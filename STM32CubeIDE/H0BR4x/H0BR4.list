
H0BR4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b148  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037a8  0801b208  0801b208  0002b208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e9b0  0801e9b0  00030aec  2**0
                  CONTENTS
  4 .ARM          00000008  0801e9b0  0801e9b0  0002e9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e9b8  0801e9b8  00030aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801e9b8  0801e9b8  0002e9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e9c0  0801e9c0  0002e9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000aec  20000000  0801e9c4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006520  20000af0  0801f4b0  00030af0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007010  0801f4b0  00037010  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030aec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007dba5  00000000  00000000  00030b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ba35  00000000  00000000  000ae6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00042286  00000000  00000000  000ba0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029d0  00000000  00000000  000fc378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00008688  00000000  00000000  000fed48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ecb1  00000000  00000000  001073d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00013516  00000000  00000000  00146081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a340  00000000  00000000  001595ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0016392c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001639f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000af0 	.word	0x20000af0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801b1ec 	.word	0x0801b1ec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000af4 	.word	0x20000af4
 8000100:	0801b1ec 	.word	0x0801b1ec

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f002 f835 	bl	80024bc <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 ff7f 	bl	8002360 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f827 	bl	80024bc <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f81d 	bl	80024bc <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ffa1 	bl	80023d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 ff97 	bl	80023d8 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fd2d 	bl	8000f20 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fcb1 	bl	8000e38 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fd1f 	bl	8000f20 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fd15 	bl	8000f20 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fcbf 	bl	8000e88 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fcb5 	bl	8000e88 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d115      	bne.n	800055c <__aeabi_ldivmod+0x30>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d113      	bne.n	800055c <__aeabi_ldivmod+0x30>
 8000534:	2900      	cmp	r1, #0
 8000536:	db06      	blt.n	8000546 <__aeabi_ldivmod+0x1a>
 8000538:	dc01      	bgt.n	800053e <__aeabi_ldivmod+0x12>
 800053a:	2800      	cmp	r0, #0
 800053c:	d006      	beq.n	800054c <__aeabi_ldivmod+0x20>
 800053e:	2000      	movs	r0, #0
 8000540:	43c0      	mvns	r0, r0
 8000542:	0841      	lsrs	r1, r0, #1
 8000544:	e002      	b.n	800054c <__aeabi_ldivmod+0x20>
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	0609      	lsls	r1, r1, #24
 800054a:	2000      	movs	r0, #0
 800054c:	b407      	push	{r0, r1, r2}
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <__aeabi_ldivmod+0x2c>)
 8000550:	a101      	add	r1, pc, #4	; (adr r1, 8000558 <__aeabi_ldivmod+0x2c>)
 8000552:	1840      	adds	r0, r0, r1
 8000554:	9002      	str	r0, [sp, #8]
 8000556:	bd03      	pop	{r0, r1, pc}
 8000558:	fffffee1 	.word	0xfffffee1
 800055c:	b403      	push	{r0, r1}
 800055e:	4668      	mov	r0, sp
 8000560:	b501      	push	{r0, lr}
 8000562:	9802      	ldr	r0, [sp, #8]
 8000564:	f000 f9a2 	bl	80008ac <__gnu_ldivmod_helper>
 8000568:	9b01      	ldr	r3, [sp, #4]
 800056a:	469e      	mov	lr, r3
 800056c:	b002      	add	sp, #8
 800056e:	bc0c      	pop	{r2, r3}
 8000570:	4770      	bx	lr
 8000572:	46c0      	nop			; (mov r8, r8)

08000574 <__aeabi_uldivmod>:
 8000574:	2b00      	cmp	r3, #0
 8000576:	d111      	bne.n	800059c <__aeabi_uldivmod+0x28>
 8000578:	2a00      	cmp	r2, #0
 800057a:	d10f      	bne.n	800059c <__aeabi_uldivmod+0x28>
 800057c:	2900      	cmp	r1, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_uldivmod+0xe>
 8000580:	2800      	cmp	r0, #0
 8000582:	d002      	beq.n	800058a <__aeabi_uldivmod+0x16>
 8000584:	2100      	movs	r1, #0
 8000586:	43c9      	mvns	r1, r1
 8000588:	1c08      	adds	r0, r1, #0
 800058a:	b407      	push	{r0, r1, r2}
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <__aeabi_uldivmod+0x24>)
 800058e:	a102      	add	r1, pc, #8	; (adr r1, 8000598 <__aeabi_uldivmod+0x24>)
 8000590:	1840      	adds	r0, r0, r1
 8000592:	9002      	str	r0, [sp, #8]
 8000594:	bd03      	pop	{r0, r1, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	fffffea1 	.word	0xfffffea1
 800059c:	b403      	push	{r0, r1}
 800059e:	4668      	mov	r0, sp
 80005a0:	b501      	push	{r0, lr}
 80005a2:	9802      	ldr	r0, [sp, #8]
 80005a4:	f000 f8b6 	bl	8000714 <__udivmoddi4>
 80005a8:	9b01      	ldr	r3, [sp, #4]
 80005aa:	469e      	mov	lr, r3
 80005ac:	b002      	add	sp, #8
 80005ae:	bc0c      	pop	{r2, r3}
 80005b0:	4770      	bx	lr
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__aeabi_lmul>:
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	0415      	lsls	r5, r2, #16
 80005b8:	0c2d      	lsrs	r5, r5, #16
 80005ba:	000f      	movs	r7, r1
 80005bc:	0001      	movs	r1, r0
 80005be:	002e      	movs	r6, r5
 80005c0:	46c6      	mov	lr, r8
 80005c2:	4684      	mov	ip, r0
 80005c4:	0400      	lsls	r0, r0, #16
 80005c6:	0c14      	lsrs	r4, r2, #16
 80005c8:	0c00      	lsrs	r0, r0, #16
 80005ca:	0c09      	lsrs	r1, r1, #16
 80005cc:	4346      	muls	r6, r0
 80005ce:	434d      	muls	r5, r1
 80005d0:	4360      	muls	r0, r4
 80005d2:	4361      	muls	r1, r4
 80005d4:	1940      	adds	r0, r0, r5
 80005d6:	0c34      	lsrs	r4, r6, #16
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	b500      	push	{lr}
 80005dc:	42a5      	cmp	r5, r4
 80005de:	d903      	bls.n	80005e8 <__aeabi_lmul+0x34>
 80005e0:	2080      	movs	r0, #128	; 0x80
 80005e2:	0240      	lsls	r0, r0, #9
 80005e4:	4680      	mov	r8, r0
 80005e6:	4441      	add	r1, r8
 80005e8:	0c25      	lsrs	r5, r4, #16
 80005ea:	186d      	adds	r5, r5, r1
 80005ec:	4661      	mov	r1, ip
 80005ee:	4359      	muls	r1, r3
 80005f0:	437a      	muls	r2, r7
 80005f2:	0430      	lsls	r0, r6, #16
 80005f4:	1949      	adds	r1, r1, r5
 80005f6:	0424      	lsls	r4, r4, #16
 80005f8:	0c00      	lsrs	r0, r0, #16
 80005fa:	1820      	adds	r0, r4, r0
 80005fc:	1889      	adds	r1, r1, r2
 80005fe:	bc80      	pop	{r7}
 8000600:	46b8      	mov	r8, r7
 8000602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000604 <__aeabi_f2uiz>:
 8000604:	219e      	movs	r1, #158	; 0x9e
 8000606:	b510      	push	{r4, lr}
 8000608:	05c9      	lsls	r1, r1, #23
 800060a:	1c04      	adds	r4, r0, #0
 800060c:	f7ff ff84 	bl	8000518 <__aeabi_fcmpge>
 8000610:	2800      	cmp	r0, #0
 8000612:	d103      	bne.n	800061c <__aeabi_f2uiz+0x18>
 8000614:	1c20      	adds	r0, r4, #0
 8000616:	f000 ffaf 	bl	8001578 <__aeabi_f2iz>
 800061a:	bd10      	pop	{r4, pc}
 800061c:	219e      	movs	r1, #158	; 0x9e
 800061e:	1c20      	adds	r0, r4, #0
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	f000 fde1 	bl	80011e8 <__aeabi_fsub>
 8000626:	f000 ffa7 	bl	8001578 <__aeabi_f2iz>
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	061b      	lsls	r3, r3, #24
 800062e:	469c      	mov	ip, r3
 8000630:	4460      	add	r0, ip
 8000632:	e7f2      	b.n	800061a <__aeabi_f2uiz+0x16>

08000634 <__aeabi_d2uiz>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <__aeabi_d2uiz+0x38>)
 800063a:	0004      	movs	r4, r0
 800063c:	000d      	movs	r5, r1
 800063e:	f7ff ff31 	bl	80004a4 <__aeabi_dcmpge>
 8000642:	2800      	cmp	r0, #0
 8000644:	d104      	bne.n	8000650 <__aeabi_d2uiz+0x1c>
 8000646:	0020      	movs	r0, r4
 8000648:	0029      	movs	r1, r5
 800064a:	f002 fdc3 	bl	80031d4 <__aeabi_d2iz>
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <__aeabi_d2uiz+0x38>)
 8000652:	2200      	movs	r2, #0
 8000654:	0020      	movs	r0, r4
 8000656:	0029      	movs	r1, r5
 8000658:	f002 fa0c 	bl	8002a74 <__aeabi_dsub>
 800065c:	f002 fdba 	bl	80031d4 <__aeabi_d2iz>
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	061b      	lsls	r3, r3, #24
 8000664:	469c      	mov	ip, r3
 8000666:	4460      	add	r0, ip
 8000668:	e7f1      	b.n	800064e <__aeabi_d2uiz+0x1a>
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	41e00000 	.word	0x41e00000

08000670 <__aeabi_d2lz>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	0005      	movs	r5, r0
 8000674:	000c      	movs	r4, r1
 8000676:	2200      	movs	r2, #0
 8000678:	2300      	movs	r3, #0
 800067a:	0028      	movs	r0, r5
 800067c:	0021      	movs	r1, r4
 800067e:	f7ff fef3 	bl	8000468 <__aeabi_dcmplt>
 8000682:	2800      	cmp	r0, #0
 8000684:	d108      	bne.n	8000698 <__aeabi_d2lz+0x28>
 8000686:	0028      	movs	r0, r5
 8000688:	0021      	movs	r1, r4
 800068a:	f000 f80f 	bl	80006ac <__aeabi_d2ulz>
 800068e:	0002      	movs	r2, r0
 8000690:	000b      	movs	r3, r1
 8000692:	0010      	movs	r0, r2
 8000694:	0019      	movs	r1, r3
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	061b      	lsls	r3, r3, #24
 800069c:	18e1      	adds	r1, r4, r3
 800069e:	0028      	movs	r0, r5
 80006a0:	f000 f804 	bl	80006ac <__aeabi_d2ulz>
 80006a4:	2300      	movs	r3, #0
 80006a6:	4242      	negs	r2, r0
 80006a8:	418b      	sbcs	r3, r1
 80006aa:	e7f2      	b.n	8000692 <__aeabi_d2lz+0x22>

080006ac <__aeabi_d2ulz>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	2200      	movs	r2, #0
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <__aeabi_d2ulz+0x34>)
 80006b2:	000d      	movs	r5, r1
 80006b4:	0004      	movs	r4, r0
 80006b6:	f001 ff71 	bl	800259c <__aeabi_dmul>
 80006ba:	f7ff ffbb 	bl	8000634 <__aeabi_d2uiz>
 80006be:	0006      	movs	r6, r0
 80006c0:	f002 fdee 	bl	80032a0 <__aeabi_ui2d>
 80006c4:	2200      	movs	r2, #0
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <__aeabi_d2ulz+0x38>)
 80006c8:	f001 ff68 	bl	800259c <__aeabi_dmul>
 80006cc:	0002      	movs	r2, r0
 80006ce:	000b      	movs	r3, r1
 80006d0:	0020      	movs	r0, r4
 80006d2:	0029      	movs	r1, r5
 80006d4:	f002 f9ce 	bl	8002a74 <__aeabi_dsub>
 80006d8:	f7ff ffac 	bl	8000634 <__aeabi_d2uiz>
 80006dc:	0031      	movs	r1, r6
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	3df00000 	.word	0x3df00000
 80006e4:	41f00000 	.word	0x41f00000

080006e8 <__aeabi_l2d>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	0006      	movs	r6, r0
 80006ec:	0008      	movs	r0, r1
 80006ee:	f002 fda7 	bl	8003240 <__aeabi_i2d>
 80006f2:	2200      	movs	r2, #0
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <__aeabi_l2d+0x28>)
 80006f6:	f001 ff51 	bl	800259c <__aeabi_dmul>
 80006fa:	000d      	movs	r5, r1
 80006fc:	0004      	movs	r4, r0
 80006fe:	0030      	movs	r0, r6
 8000700:	f002 fdce 	bl	80032a0 <__aeabi_ui2d>
 8000704:	002b      	movs	r3, r5
 8000706:	0022      	movs	r2, r4
 8000708:	f000 ffd8 	bl	80016bc <__aeabi_dadd>
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	41f00000 	.word	0x41f00000

08000714 <__udivmoddi4>:
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	4657      	mov	r7, sl
 8000718:	464e      	mov	r6, r9
 800071a:	4645      	mov	r5, r8
 800071c:	46de      	mov	lr, fp
 800071e:	b5e0      	push	{r5, r6, r7, lr}
 8000720:	0004      	movs	r4, r0
 8000722:	000d      	movs	r5, r1
 8000724:	4692      	mov	sl, r2
 8000726:	4699      	mov	r9, r3
 8000728:	b083      	sub	sp, #12
 800072a:	428b      	cmp	r3, r1
 800072c:	d830      	bhi.n	8000790 <__udivmoddi4+0x7c>
 800072e:	d02d      	beq.n	800078c <__udivmoddi4+0x78>
 8000730:	4649      	mov	r1, r9
 8000732:	4650      	mov	r0, sl
 8000734:	f002 fec8 	bl	80034c8 <__clzdi2>
 8000738:	0029      	movs	r1, r5
 800073a:	0006      	movs	r6, r0
 800073c:	0020      	movs	r0, r4
 800073e:	f002 fec3 	bl	80034c8 <__clzdi2>
 8000742:	1a33      	subs	r3, r6, r0
 8000744:	4698      	mov	r8, r3
 8000746:	3b20      	subs	r3, #32
 8000748:	469b      	mov	fp, r3
 800074a:	d433      	bmi.n	80007b4 <__udivmoddi4+0xa0>
 800074c:	465a      	mov	r2, fp
 800074e:	4653      	mov	r3, sl
 8000750:	4093      	lsls	r3, r2
 8000752:	4642      	mov	r2, r8
 8000754:	001f      	movs	r7, r3
 8000756:	4653      	mov	r3, sl
 8000758:	4093      	lsls	r3, r2
 800075a:	001e      	movs	r6, r3
 800075c:	42af      	cmp	r7, r5
 800075e:	d83a      	bhi.n	80007d6 <__udivmoddi4+0xc2>
 8000760:	42af      	cmp	r7, r5
 8000762:	d100      	bne.n	8000766 <__udivmoddi4+0x52>
 8000764:	e078      	b.n	8000858 <__udivmoddi4+0x144>
 8000766:	465b      	mov	r3, fp
 8000768:	1ba4      	subs	r4, r4, r6
 800076a:	41bd      	sbcs	r5, r7
 800076c:	2b00      	cmp	r3, #0
 800076e:	da00      	bge.n	8000772 <__udivmoddi4+0x5e>
 8000770:	e075      	b.n	800085e <__udivmoddi4+0x14a>
 8000772:	2200      	movs	r2, #0
 8000774:	2300      	movs	r3, #0
 8000776:	9200      	str	r2, [sp, #0]
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	2301      	movs	r3, #1
 800077c:	465a      	mov	r2, fp
 800077e:	4093      	lsls	r3, r2
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	2301      	movs	r3, #1
 8000784:	4642      	mov	r2, r8
 8000786:	4093      	lsls	r3, r2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	e028      	b.n	80007de <__udivmoddi4+0xca>
 800078c:	4282      	cmp	r2, r0
 800078e:	d9cf      	bls.n	8000730 <__udivmoddi4+0x1c>
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	9200      	str	r2, [sp, #0]
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <__udivmoddi4+0x8e>
 800079e:	601c      	str	r4, [r3, #0]
 80007a0:	605d      	str	r5, [r3, #4]
 80007a2:	9800      	ldr	r0, [sp, #0]
 80007a4:	9901      	ldr	r1, [sp, #4]
 80007a6:	b003      	add	sp, #12
 80007a8:	bcf0      	pop	{r4, r5, r6, r7}
 80007aa:	46bb      	mov	fp, r7
 80007ac:	46b2      	mov	sl, r6
 80007ae:	46a9      	mov	r9, r5
 80007b0:	46a0      	mov	r8, r4
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b4:	4642      	mov	r2, r8
 80007b6:	2320      	movs	r3, #32
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	4652      	mov	r2, sl
 80007bc:	40da      	lsrs	r2, r3
 80007be:	4641      	mov	r1, r8
 80007c0:	0013      	movs	r3, r2
 80007c2:	464a      	mov	r2, r9
 80007c4:	408a      	lsls	r2, r1
 80007c6:	0017      	movs	r7, r2
 80007c8:	4642      	mov	r2, r8
 80007ca:	431f      	orrs	r7, r3
 80007cc:	4653      	mov	r3, sl
 80007ce:	4093      	lsls	r3, r2
 80007d0:	001e      	movs	r6, r3
 80007d2:	42af      	cmp	r7, r5
 80007d4:	d9c4      	bls.n	8000760 <__udivmoddi4+0x4c>
 80007d6:	2200      	movs	r2, #0
 80007d8:	2300      	movs	r3, #0
 80007da:	9200      	str	r2, [sp, #0]
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	4643      	mov	r3, r8
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0d9      	beq.n	8000798 <__udivmoddi4+0x84>
 80007e4:	07fb      	lsls	r3, r7, #31
 80007e6:	0872      	lsrs	r2, r6, #1
 80007e8:	431a      	orrs	r2, r3
 80007ea:	4646      	mov	r6, r8
 80007ec:	087b      	lsrs	r3, r7, #1
 80007ee:	e00e      	b.n	800080e <__udivmoddi4+0xfa>
 80007f0:	42ab      	cmp	r3, r5
 80007f2:	d101      	bne.n	80007f8 <__udivmoddi4+0xe4>
 80007f4:	42a2      	cmp	r2, r4
 80007f6:	d80c      	bhi.n	8000812 <__udivmoddi4+0xfe>
 80007f8:	1aa4      	subs	r4, r4, r2
 80007fa:	419d      	sbcs	r5, r3
 80007fc:	2001      	movs	r0, #1
 80007fe:	1924      	adds	r4, r4, r4
 8000800:	416d      	adcs	r5, r5
 8000802:	2100      	movs	r1, #0
 8000804:	3e01      	subs	r6, #1
 8000806:	1824      	adds	r4, r4, r0
 8000808:	414d      	adcs	r5, r1
 800080a:	2e00      	cmp	r6, #0
 800080c:	d006      	beq.n	800081c <__udivmoddi4+0x108>
 800080e:	42ab      	cmp	r3, r5
 8000810:	d9ee      	bls.n	80007f0 <__udivmoddi4+0xdc>
 8000812:	3e01      	subs	r6, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2e00      	cmp	r6, #0
 800081a:	d1f8      	bne.n	800080e <__udivmoddi4+0xfa>
 800081c:	9800      	ldr	r0, [sp, #0]
 800081e:	9901      	ldr	r1, [sp, #4]
 8000820:	465b      	mov	r3, fp
 8000822:	1900      	adds	r0, r0, r4
 8000824:	4169      	adcs	r1, r5
 8000826:	2b00      	cmp	r3, #0
 8000828:	db24      	blt.n	8000874 <__udivmoddi4+0x160>
 800082a:	002b      	movs	r3, r5
 800082c:	465a      	mov	r2, fp
 800082e:	4644      	mov	r4, r8
 8000830:	40d3      	lsrs	r3, r2
 8000832:	002a      	movs	r2, r5
 8000834:	40e2      	lsrs	r2, r4
 8000836:	001c      	movs	r4, r3
 8000838:	465b      	mov	r3, fp
 800083a:	0015      	movs	r5, r2
 800083c:	2b00      	cmp	r3, #0
 800083e:	db2a      	blt.n	8000896 <__udivmoddi4+0x182>
 8000840:	0026      	movs	r6, r4
 8000842:	409e      	lsls	r6, r3
 8000844:	0033      	movs	r3, r6
 8000846:	0026      	movs	r6, r4
 8000848:	4647      	mov	r7, r8
 800084a:	40be      	lsls	r6, r7
 800084c:	0032      	movs	r2, r6
 800084e:	1a80      	subs	r0, r0, r2
 8000850:	4199      	sbcs	r1, r3
 8000852:	9000      	str	r0, [sp, #0]
 8000854:	9101      	str	r1, [sp, #4]
 8000856:	e79f      	b.n	8000798 <__udivmoddi4+0x84>
 8000858:	42a3      	cmp	r3, r4
 800085a:	d8bc      	bhi.n	80007d6 <__udivmoddi4+0xc2>
 800085c:	e783      	b.n	8000766 <__udivmoddi4+0x52>
 800085e:	4642      	mov	r2, r8
 8000860:	2320      	movs	r3, #32
 8000862:	2100      	movs	r1, #0
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	2200      	movs	r2, #0
 8000868:	9100      	str	r1, [sp, #0]
 800086a:	9201      	str	r2, [sp, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	40da      	lsrs	r2, r3
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	e786      	b.n	8000782 <__udivmoddi4+0x6e>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	002a      	movs	r2, r5
 800087c:	4646      	mov	r6, r8
 800087e:	409a      	lsls	r2, r3
 8000880:	0023      	movs	r3, r4
 8000882:	40f3      	lsrs	r3, r6
 8000884:	4644      	mov	r4, r8
 8000886:	4313      	orrs	r3, r2
 8000888:	002a      	movs	r2, r5
 800088a:	40e2      	lsrs	r2, r4
 800088c:	001c      	movs	r4, r3
 800088e:	465b      	mov	r3, fp
 8000890:	0015      	movs	r5, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	dad4      	bge.n	8000840 <__udivmoddi4+0x12c>
 8000896:	4642      	mov	r2, r8
 8000898:	002f      	movs	r7, r5
 800089a:	2320      	movs	r3, #32
 800089c:	0026      	movs	r6, r4
 800089e:	4097      	lsls	r7, r2
 80008a0:	1a9b      	subs	r3, r3, r2
 80008a2:	40de      	lsrs	r6, r3
 80008a4:	003b      	movs	r3, r7
 80008a6:	4333      	orrs	r3, r6
 80008a8:	e7cd      	b.n	8000846 <__udivmoddi4+0x132>
 80008aa:	46c0      	nop			; (mov r8, r8)

080008ac <__gnu_ldivmod_helper>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	46ce      	mov	lr, r9
 80008b0:	4647      	mov	r7, r8
 80008b2:	b580      	push	{r7, lr}
 80008b4:	4691      	mov	r9, r2
 80008b6:	4698      	mov	r8, r3
 80008b8:	0004      	movs	r4, r0
 80008ba:	000d      	movs	r5, r1
 80008bc:	f002 fe10 	bl	80034e0 <__divdi3>
 80008c0:	0007      	movs	r7, r0
 80008c2:	000e      	movs	r6, r1
 80008c4:	0002      	movs	r2, r0
 80008c6:	000b      	movs	r3, r1
 80008c8:	4648      	mov	r0, r9
 80008ca:	4641      	mov	r1, r8
 80008cc:	f7ff fe72 	bl	80005b4 <__aeabi_lmul>
 80008d0:	1a24      	subs	r4, r4, r0
 80008d2:	418d      	sbcs	r5, r1
 80008d4:	9b08      	ldr	r3, [sp, #32]
 80008d6:	0038      	movs	r0, r7
 80008d8:	0031      	movs	r1, r6
 80008da:	601c      	str	r4, [r3, #0]
 80008dc:	605d      	str	r5, [r3, #4]
 80008de:	bcc0      	pop	{r6, r7}
 80008e0:	46b9      	mov	r9, r7
 80008e2:	46b0      	mov	r8, r6
 80008e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)

080008e8 <__aeabi_fadd>:
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	4646      	mov	r6, r8
 80008ec:	46d6      	mov	lr, sl
 80008ee:	464f      	mov	r7, r9
 80008f0:	024d      	lsls	r5, r1, #9
 80008f2:	0242      	lsls	r2, r0, #9
 80008f4:	b5c0      	push	{r6, r7, lr}
 80008f6:	0a52      	lsrs	r2, r2, #9
 80008f8:	0a6e      	lsrs	r6, r5, #9
 80008fa:	0047      	lsls	r7, r0, #1
 80008fc:	46b0      	mov	r8, r6
 80008fe:	0e3f      	lsrs	r7, r7, #24
 8000900:	004e      	lsls	r6, r1, #1
 8000902:	0fc4      	lsrs	r4, r0, #31
 8000904:	00d0      	lsls	r0, r2, #3
 8000906:	4694      	mov	ip, r2
 8000908:	003b      	movs	r3, r7
 800090a:	4682      	mov	sl, r0
 800090c:	0e36      	lsrs	r6, r6, #24
 800090e:	0fc9      	lsrs	r1, r1, #31
 8000910:	09ad      	lsrs	r5, r5, #6
 8000912:	428c      	cmp	r4, r1
 8000914:	d06d      	beq.n	80009f2 <__aeabi_fadd+0x10a>
 8000916:	1bb8      	subs	r0, r7, r6
 8000918:	4681      	mov	r9, r0
 800091a:	2800      	cmp	r0, #0
 800091c:	dd4d      	ble.n	80009ba <__aeabi_fadd+0xd2>
 800091e:	2e00      	cmp	r6, #0
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x3c>
 8000922:	e088      	b.n	8000a36 <__aeabi_fadd+0x14e>
 8000924:	2fff      	cmp	r7, #255	; 0xff
 8000926:	d05a      	beq.n	80009de <__aeabi_fadd+0xf6>
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	04db      	lsls	r3, r3, #19
 800092c:	431d      	orrs	r5, r3
 800092e:	464b      	mov	r3, r9
 8000930:	2201      	movs	r2, #1
 8000932:	2b1b      	cmp	r3, #27
 8000934:	dc0a      	bgt.n	800094c <__aeabi_fadd+0x64>
 8000936:	002b      	movs	r3, r5
 8000938:	464a      	mov	r2, r9
 800093a:	4649      	mov	r1, r9
 800093c:	40d3      	lsrs	r3, r2
 800093e:	2220      	movs	r2, #32
 8000940:	1a52      	subs	r2, r2, r1
 8000942:	4095      	lsls	r5, r2
 8000944:	002a      	movs	r2, r5
 8000946:	1e55      	subs	r5, r2, #1
 8000948:	41aa      	sbcs	r2, r5
 800094a:	431a      	orrs	r2, r3
 800094c:	4653      	mov	r3, sl
 800094e:	1a9a      	subs	r2, r3, r2
 8000950:	0153      	lsls	r3, r2, #5
 8000952:	d400      	bmi.n	8000956 <__aeabi_fadd+0x6e>
 8000954:	e0b9      	b.n	8000aca <__aeabi_fadd+0x1e2>
 8000956:	0192      	lsls	r2, r2, #6
 8000958:	0996      	lsrs	r6, r2, #6
 800095a:	0030      	movs	r0, r6
 800095c:	f002 fd96 	bl	800348c <__clzsi2>
 8000960:	3805      	subs	r0, #5
 8000962:	4086      	lsls	r6, r0
 8000964:	4287      	cmp	r7, r0
 8000966:	dd00      	ble.n	800096a <__aeabi_fadd+0x82>
 8000968:	e0d4      	b.n	8000b14 <__aeabi_fadd+0x22c>
 800096a:	0033      	movs	r3, r6
 800096c:	1bc7      	subs	r7, r0, r7
 800096e:	2020      	movs	r0, #32
 8000970:	3701      	adds	r7, #1
 8000972:	40fb      	lsrs	r3, r7
 8000974:	1bc7      	subs	r7, r0, r7
 8000976:	40be      	lsls	r6, r7
 8000978:	0032      	movs	r2, r6
 800097a:	1e56      	subs	r6, r2, #1
 800097c:	41b2      	sbcs	r2, r6
 800097e:	2700      	movs	r7, #0
 8000980:	431a      	orrs	r2, r3
 8000982:	0753      	lsls	r3, r2, #29
 8000984:	d004      	beq.n	8000990 <__aeabi_fadd+0xa8>
 8000986:	230f      	movs	r3, #15
 8000988:	4013      	ands	r3, r2
 800098a:	2b04      	cmp	r3, #4
 800098c:	d000      	beq.n	8000990 <__aeabi_fadd+0xa8>
 800098e:	3204      	adds	r2, #4
 8000990:	0153      	lsls	r3, r2, #5
 8000992:	d400      	bmi.n	8000996 <__aeabi_fadd+0xae>
 8000994:	e09c      	b.n	8000ad0 <__aeabi_fadd+0x1e8>
 8000996:	1c7b      	adds	r3, r7, #1
 8000998:	2ffe      	cmp	r7, #254	; 0xfe
 800099a:	d100      	bne.n	800099e <__aeabi_fadd+0xb6>
 800099c:	e09a      	b.n	8000ad4 <__aeabi_fadd+0x1ec>
 800099e:	0192      	lsls	r2, r2, #6
 80009a0:	0a52      	lsrs	r2, r2, #9
 80009a2:	4694      	mov	ip, r2
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	05d8      	lsls	r0, r3, #23
 80009a8:	4663      	mov	r3, ip
 80009aa:	07e4      	lsls	r4, r4, #31
 80009ac:	4318      	orrs	r0, r3
 80009ae:	4320      	orrs	r0, r4
 80009b0:	bce0      	pop	{r5, r6, r7}
 80009b2:	46ba      	mov	sl, r7
 80009b4:	46b1      	mov	r9, r6
 80009b6:	46a8      	mov	r8, r5
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d049      	beq.n	8000a52 <__aeabi_fadd+0x16a>
 80009be:	1bf3      	subs	r3, r6, r7
 80009c0:	2f00      	cmp	r7, #0
 80009c2:	d000      	beq.n	80009c6 <__aeabi_fadd+0xde>
 80009c4:	e0b6      	b.n	8000b34 <__aeabi_fadd+0x24c>
 80009c6:	4652      	mov	r2, sl
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d060      	beq.n	8000a8e <__aeabi_fadd+0x1a6>
 80009cc:	3b01      	subs	r3, #1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fadd+0xec>
 80009d2:	e0fc      	b.n	8000bce <__aeabi_fadd+0x2e6>
 80009d4:	2eff      	cmp	r6, #255	; 0xff
 80009d6:	d000      	beq.n	80009da <__aeabi_fadd+0xf2>
 80009d8:	e0b4      	b.n	8000b44 <__aeabi_fadd+0x25c>
 80009da:	000c      	movs	r4, r1
 80009dc:	4642      	mov	r2, r8
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d078      	beq.n	8000ad4 <__aeabi_fadd+0x1ec>
 80009e2:	2080      	movs	r0, #128	; 0x80
 80009e4:	03c0      	lsls	r0, r0, #15
 80009e6:	4310      	orrs	r0, r2
 80009e8:	0242      	lsls	r2, r0, #9
 80009ea:	0a53      	lsrs	r3, r2, #9
 80009ec:	469c      	mov	ip, r3
 80009ee:	23ff      	movs	r3, #255	; 0xff
 80009f0:	e7d9      	b.n	80009a6 <__aeabi_fadd+0xbe>
 80009f2:	1bb9      	subs	r1, r7, r6
 80009f4:	2900      	cmp	r1, #0
 80009f6:	dd71      	ble.n	8000adc <__aeabi_fadd+0x1f4>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d03f      	beq.n	8000a7c <__aeabi_fadd+0x194>
 80009fc:	2fff      	cmp	r7, #255	; 0xff
 80009fe:	d0ee      	beq.n	80009de <__aeabi_fadd+0xf6>
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	04db      	lsls	r3, r3, #19
 8000a04:	431d      	orrs	r5, r3
 8000a06:	2201      	movs	r2, #1
 8000a08:	291b      	cmp	r1, #27
 8000a0a:	dc07      	bgt.n	8000a1c <__aeabi_fadd+0x134>
 8000a0c:	002a      	movs	r2, r5
 8000a0e:	2320      	movs	r3, #32
 8000a10:	40ca      	lsrs	r2, r1
 8000a12:	1a59      	subs	r1, r3, r1
 8000a14:	408d      	lsls	r5, r1
 8000a16:	1e6b      	subs	r3, r5, #1
 8000a18:	419d      	sbcs	r5, r3
 8000a1a:	432a      	orrs	r2, r5
 8000a1c:	4452      	add	r2, sl
 8000a1e:	0153      	lsls	r3, r2, #5
 8000a20:	d553      	bpl.n	8000aca <__aeabi_fadd+0x1e2>
 8000a22:	3701      	adds	r7, #1
 8000a24:	2fff      	cmp	r7, #255	; 0xff
 8000a26:	d055      	beq.n	8000ad4 <__aeabi_fadd+0x1ec>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	497b      	ldr	r1, [pc, #492]	; (8000c18 <__aeabi_fadd+0x330>)
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	0852      	lsrs	r2, r2, #1
 8000a30:	400a      	ands	r2, r1
 8000a32:	431a      	orrs	r2, r3
 8000a34:	e7a5      	b.n	8000982 <__aeabi_fadd+0x9a>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d02c      	beq.n	8000a94 <__aeabi_fadd+0x1ac>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	425b      	negs	r3, r3
 8000a3e:	469c      	mov	ip, r3
 8000a40:	44e1      	add	r9, ip
 8000a42:	464b      	mov	r3, r9
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_fadd+0x162>
 8000a48:	e0ad      	b.n	8000ba6 <__aeabi_fadd+0x2be>
 8000a4a:	2fff      	cmp	r7, #255	; 0xff
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fadd+0x168>
 8000a4e:	e76e      	b.n	800092e <__aeabi_fadd+0x46>
 8000a50:	e7c5      	b.n	80009de <__aeabi_fadd+0xf6>
 8000a52:	20fe      	movs	r0, #254	; 0xfe
 8000a54:	1c7e      	adds	r6, r7, #1
 8000a56:	4230      	tst	r0, r6
 8000a58:	d160      	bne.n	8000b1c <__aeabi_fadd+0x234>
 8000a5a:	2f00      	cmp	r7, #0
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_fadd+0x178>
 8000a5e:	e093      	b.n	8000b88 <__aeabi_fadd+0x2a0>
 8000a60:	4652      	mov	r2, sl
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fadd+0x180>
 8000a66:	e0b6      	b.n	8000bd6 <__aeabi_fadd+0x2ee>
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d09c      	beq.n	80009a6 <__aeabi_fadd+0xbe>
 8000a6c:	1b52      	subs	r2, r2, r5
 8000a6e:	0150      	lsls	r0, r2, #5
 8000a70:	d400      	bmi.n	8000a74 <__aeabi_fadd+0x18c>
 8000a72:	e0c3      	b.n	8000bfc <__aeabi_fadd+0x314>
 8000a74:	4653      	mov	r3, sl
 8000a76:	000c      	movs	r4, r1
 8000a78:	1aea      	subs	r2, r5, r3
 8000a7a:	e782      	b.n	8000982 <__aeabi_fadd+0x9a>
 8000a7c:	2d00      	cmp	r5, #0
 8000a7e:	d009      	beq.n	8000a94 <__aeabi_fadd+0x1ac>
 8000a80:	3901      	subs	r1, #1
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fadd+0x1a0>
 8000a86:	e08b      	b.n	8000ba0 <__aeabi_fadd+0x2b8>
 8000a88:	2fff      	cmp	r7, #255	; 0xff
 8000a8a:	d1bc      	bne.n	8000a06 <__aeabi_fadd+0x11e>
 8000a8c:	e7a7      	b.n	80009de <__aeabi_fadd+0xf6>
 8000a8e:	000c      	movs	r4, r1
 8000a90:	4642      	mov	r2, r8
 8000a92:	0037      	movs	r7, r6
 8000a94:	2fff      	cmp	r7, #255	; 0xff
 8000a96:	d0a2      	beq.n	80009de <__aeabi_fadd+0xf6>
 8000a98:	0252      	lsls	r2, r2, #9
 8000a9a:	0a53      	lsrs	r3, r2, #9
 8000a9c:	469c      	mov	ip, r3
 8000a9e:	b2fb      	uxtb	r3, r7
 8000aa0:	e781      	b.n	80009a6 <__aeabi_fadd+0xbe>
 8000aa2:	21fe      	movs	r1, #254	; 0xfe
 8000aa4:	3701      	adds	r7, #1
 8000aa6:	4239      	tst	r1, r7
 8000aa8:	d165      	bne.n	8000b76 <__aeabi_fadd+0x28e>
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d17e      	bne.n	8000bac <__aeabi_fadd+0x2c4>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_fadd+0x1cc>
 8000ab2:	e0aa      	b.n	8000c0a <__aeabi_fadd+0x322>
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_fadd+0x1d2>
 8000ab8:	e775      	b.n	80009a6 <__aeabi_fadd+0xbe>
 8000aba:	002a      	movs	r2, r5
 8000abc:	4452      	add	r2, sl
 8000abe:	2700      	movs	r7, #0
 8000ac0:	0153      	lsls	r3, r2, #5
 8000ac2:	d502      	bpl.n	8000aca <__aeabi_fadd+0x1e2>
 8000ac4:	4b55      	ldr	r3, [pc, #340]	; (8000c1c <__aeabi_fadd+0x334>)
 8000ac6:	3701      	adds	r7, #1
 8000ac8:	401a      	ands	r2, r3
 8000aca:	0753      	lsls	r3, r2, #29
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_fadd+0x1e8>
 8000ace:	e75a      	b.n	8000986 <__aeabi_fadd+0x9e>
 8000ad0:	08d2      	lsrs	r2, r2, #3
 8000ad2:	e7df      	b.n	8000a94 <__aeabi_fadd+0x1ac>
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	23ff      	movs	r3, #255	; 0xff
 8000ad8:	4694      	mov	ip, r2
 8000ada:	e764      	b.n	80009a6 <__aeabi_fadd+0xbe>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d0e0      	beq.n	8000aa2 <__aeabi_fadd+0x1ba>
 8000ae0:	1bf3      	subs	r3, r6, r7
 8000ae2:	2f00      	cmp	r7, #0
 8000ae4:	d03e      	beq.n	8000b64 <__aeabi_fadd+0x27c>
 8000ae6:	2eff      	cmp	r6, #255	; 0xff
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fadd+0x204>
 8000aea:	e777      	b.n	80009dc <__aeabi_fadd+0xf4>
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	0001      	movs	r1, r0
 8000af0:	04d2      	lsls	r2, r2, #19
 8000af2:	4311      	orrs	r1, r2
 8000af4:	468a      	mov	sl, r1
 8000af6:	2201      	movs	r2, #1
 8000af8:	2b1b      	cmp	r3, #27
 8000afa:	dc08      	bgt.n	8000b0e <__aeabi_fadd+0x226>
 8000afc:	4652      	mov	r2, sl
 8000afe:	2120      	movs	r1, #32
 8000b00:	4650      	mov	r0, sl
 8000b02:	40da      	lsrs	r2, r3
 8000b04:	1acb      	subs	r3, r1, r3
 8000b06:	4098      	lsls	r0, r3
 8000b08:	1e43      	subs	r3, r0, #1
 8000b0a:	4198      	sbcs	r0, r3
 8000b0c:	4302      	orrs	r2, r0
 8000b0e:	0037      	movs	r7, r6
 8000b10:	1952      	adds	r2, r2, r5
 8000b12:	e784      	b.n	8000a1e <__aeabi_fadd+0x136>
 8000b14:	4a41      	ldr	r2, [pc, #260]	; (8000c1c <__aeabi_fadd+0x334>)
 8000b16:	1a3f      	subs	r7, r7, r0
 8000b18:	4032      	ands	r2, r6
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0x9a>
 8000b1c:	4653      	mov	r3, sl
 8000b1e:	1b5e      	subs	r6, r3, r5
 8000b20:	0173      	lsls	r3, r6, #5
 8000b22:	d42d      	bmi.n	8000b80 <__aeabi_fadd+0x298>
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d000      	beq.n	8000b2a <__aeabi_fadd+0x242>
 8000b28:	e717      	b.n	800095a <__aeabi_fadd+0x72>
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2400      	movs	r4, #0
 8000b2e:	2300      	movs	r3, #0
 8000b30:	4694      	mov	ip, r2
 8000b32:	e738      	b.n	80009a6 <__aeabi_fadd+0xbe>
 8000b34:	2eff      	cmp	r6, #255	; 0xff
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fadd+0x252>
 8000b38:	e74f      	b.n	80009da <__aeabi_fadd+0xf2>
 8000b3a:	2280      	movs	r2, #128	; 0x80
 8000b3c:	4650      	mov	r0, sl
 8000b3e:	04d2      	lsls	r2, r2, #19
 8000b40:	4310      	orrs	r0, r2
 8000b42:	4682      	mov	sl, r0
 8000b44:	2201      	movs	r2, #1
 8000b46:	2b1b      	cmp	r3, #27
 8000b48:	dc08      	bgt.n	8000b5c <__aeabi_fadd+0x274>
 8000b4a:	4652      	mov	r2, sl
 8000b4c:	2420      	movs	r4, #32
 8000b4e:	4650      	mov	r0, sl
 8000b50:	40da      	lsrs	r2, r3
 8000b52:	1ae3      	subs	r3, r4, r3
 8000b54:	4098      	lsls	r0, r3
 8000b56:	1e43      	subs	r3, r0, #1
 8000b58:	4198      	sbcs	r0, r3
 8000b5a:	4302      	orrs	r2, r0
 8000b5c:	000c      	movs	r4, r1
 8000b5e:	0037      	movs	r7, r6
 8000b60:	1aaa      	subs	r2, r5, r2
 8000b62:	e6f5      	b.n	8000950 <__aeabi_fadd+0x68>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d093      	beq.n	8000a90 <__aeabi_fadd+0x1a8>
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d04f      	beq.n	8000c0e <__aeabi_fadd+0x326>
 8000b6e:	2eff      	cmp	r6, #255	; 0xff
 8000b70:	d1c1      	bne.n	8000af6 <__aeabi_fadd+0x20e>
 8000b72:	4642      	mov	r2, r8
 8000b74:	e733      	b.n	80009de <__aeabi_fadd+0xf6>
 8000b76:	2fff      	cmp	r7, #255	; 0xff
 8000b78:	d0ac      	beq.n	8000ad4 <__aeabi_fadd+0x1ec>
 8000b7a:	4455      	add	r5, sl
 8000b7c:	086a      	lsrs	r2, r5, #1
 8000b7e:	e7a4      	b.n	8000aca <__aeabi_fadd+0x1e2>
 8000b80:	4653      	mov	r3, sl
 8000b82:	000c      	movs	r4, r1
 8000b84:	1aee      	subs	r6, r5, r3
 8000b86:	e6e8      	b.n	800095a <__aeabi_fadd+0x72>
 8000b88:	4653      	mov	r3, sl
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d128      	bne.n	8000be0 <__aeabi_fadd+0x2f8>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d000      	beq.n	8000b94 <__aeabi_fadd+0x2ac>
 8000b92:	e722      	b.n	80009da <__aeabi_fadd+0xf2>
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	03db      	lsls	r3, r3, #15
 8000b98:	469c      	mov	ip, r3
 8000b9a:	2400      	movs	r4, #0
 8000b9c:	23ff      	movs	r3, #255	; 0xff
 8000b9e:	e702      	b.n	80009a6 <__aeabi_fadd+0xbe>
 8000ba0:	002a      	movs	r2, r5
 8000ba2:	4452      	add	r2, sl
 8000ba4:	e73b      	b.n	8000a1e <__aeabi_fadd+0x136>
 8000ba6:	4653      	mov	r3, sl
 8000ba8:	1b5a      	subs	r2, r3, r5
 8000baa:	e6d1      	b.n	8000950 <__aeabi_fadd+0x68>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_fadd+0x2ca>
 8000bb0:	e714      	b.n	80009dc <__aeabi_fadd+0xf4>
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fadd+0x2d0>
 8000bb6:	e712      	b.n	80009de <__aeabi_fadd+0xf6>
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	03db      	lsls	r3, r3, #15
 8000bbc:	421a      	tst	r2, r3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_fadd+0x2da>
 8000bc0:	e70d      	b.n	80009de <__aeabi_fadd+0xf6>
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	4219      	tst	r1, r3
 8000bc6:	d000      	beq.n	8000bca <__aeabi_fadd+0x2e2>
 8000bc8:	e709      	b.n	80009de <__aeabi_fadd+0xf6>
 8000bca:	4642      	mov	r2, r8
 8000bcc:	e707      	b.n	80009de <__aeabi_fadd+0xf6>
 8000bce:	000c      	movs	r4, r1
 8000bd0:	0037      	movs	r7, r6
 8000bd2:	1aaa      	subs	r2, r5, r2
 8000bd4:	e6bc      	b.n	8000950 <__aeabi_fadd+0x68>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d013      	beq.n	8000c02 <__aeabi_fadd+0x31a>
 8000bda:	000c      	movs	r4, r1
 8000bdc:	46c4      	mov	ip, r8
 8000bde:	e6e2      	b.n	80009a6 <__aeabi_fadd+0xbe>
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fadd+0x2fe>
 8000be4:	e6fb      	b.n	80009de <__aeabi_fadd+0xf6>
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	03db      	lsls	r3, r3, #15
 8000bea:	421a      	tst	r2, r3
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_fadd+0x308>
 8000bee:	e6f6      	b.n	80009de <__aeabi_fadd+0xf6>
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	4218      	tst	r0, r3
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_fadd+0x310>
 8000bf6:	e6f2      	b.n	80009de <__aeabi_fadd+0xf6>
 8000bf8:	000c      	movs	r4, r1
 8000bfa:	e6ef      	b.n	80009dc <__aeabi_fadd+0xf4>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d000      	beq.n	8000c02 <__aeabi_fadd+0x31a>
 8000c00:	e763      	b.n	8000aca <__aeabi_fadd+0x1e2>
 8000c02:	2200      	movs	r2, #0
 8000c04:	2400      	movs	r4, #0
 8000c06:	4694      	mov	ip, r2
 8000c08:	e6cd      	b.n	80009a6 <__aeabi_fadd+0xbe>
 8000c0a:	46c4      	mov	ip, r8
 8000c0c:	e6cb      	b.n	80009a6 <__aeabi_fadd+0xbe>
 8000c0e:	002a      	movs	r2, r5
 8000c10:	0037      	movs	r7, r6
 8000c12:	4452      	add	r2, sl
 8000c14:	e703      	b.n	8000a1e <__aeabi_fadd+0x136>
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	7dffffff 	.word	0x7dffffff
 8000c1c:	fbffffff 	.word	0xfbffffff

08000c20 <__aeabi_fdiv>:
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	464f      	mov	r7, r9
 8000c24:	4646      	mov	r6, r8
 8000c26:	46d6      	mov	lr, sl
 8000c28:	0245      	lsls	r5, r0, #9
 8000c2a:	b5c0      	push	{r6, r7, lr}
 8000c2c:	0047      	lsls	r7, r0, #1
 8000c2e:	1c0c      	adds	r4, r1, #0
 8000c30:	0a6d      	lsrs	r5, r5, #9
 8000c32:	0e3f      	lsrs	r7, r7, #24
 8000c34:	0fc6      	lsrs	r6, r0, #31
 8000c36:	2f00      	cmp	r7, #0
 8000c38:	d066      	beq.n	8000d08 <__aeabi_fdiv+0xe8>
 8000c3a:	2fff      	cmp	r7, #255	; 0xff
 8000c3c:	d06c      	beq.n	8000d18 <__aeabi_fdiv+0xf8>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	00ea      	lsls	r2, r5, #3
 8000c42:	2580      	movs	r5, #128	; 0x80
 8000c44:	4699      	mov	r9, r3
 8000c46:	469a      	mov	sl, r3
 8000c48:	04ed      	lsls	r5, r5, #19
 8000c4a:	4315      	orrs	r5, r2
 8000c4c:	3f7f      	subs	r7, #127	; 0x7f
 8000c4e:	0260      	lsls	r0, r4, #9
 8000c50:	0061      	lsls	r1, r4, #1
 8000c52:	0a43      	lsrs	r3, r0, #9
 8000c54:	4698      	mov	r8, r3
 8000c56:	0e09      	lsrs	r1, r1, #24
 8000c58:	0fe4      	lsrs	r4, r4, #31
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d048      	beq.n	8000cf0 <__aeabi_fdiv+0xd0>
 8000c5e:	29ff      	cmp	r1, #255	; 0xff
 8000c60:	d010      	beq.n	8000c84 <__aeabi_fdiv+0x64>
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	00d8      	lsls	r0, r3, #3
 8000c66:	04d2      	lsls	r2, r2, #19
 8000c68:	4302      	orrs	r2, r0
 8000c6a:	4690      	mov	r8, r2
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	397f      	subs	r1, #127	; 0x7f
 8000c70:	464a      	mov	r2, r9
 8000c72:	0033      	movs	r3, r6
 8000c74:	1a7f      	subs	r7, r7, r1
 8000c76:	4302      	orrs	r2, r0
 8000c78:	496c      	ldr	r1, [pc, #432]	; (8000e2c <__aeabi_fdiv+0x20c>)
 8000c7a:	0092      	lsls	r2, r2, #2
 8000c7c:	588a      	ldr	r2, [r1, r2]
 8000c7e:	4063      	eors	r3, r4
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4697      	mov	pc, r2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d16d      	bne.n	8000d64 <__aeabi_fdiv+0x144>
 8000c88:	2002      	movs	r0, #2
 8000c8a:	3fff      	subs	r7, #255	; 0xff
 8000c8c:	e033      	b.n	8000cf6 <__aeabi_fdiv+0xd6>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	4698      	mov	r8, r3
 8000c92:	0026      	movs	r6, r4
 8000c94:	4645      	mov	r5, r8
 8000c96:	4682      	mov	sl, r0
 8000c98:	4653      	mov	r3, sl
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fdiv+0x80>
 8000c9e:	e07f      	b.n	8000da0 <__aeabi_fdiv+0x180>
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fdiv+0x86>
 8000ca4:	e094      	b.n	8000dd0 <__aeabi_fdiv+0x1b0>
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d017      	beq.n	8000cda <__aeabi_fdiv+0xba>
 8000caa:	0038      	movs	r0, r7
 8000cac:	307f      	adds	r0, #127	; 0x7f
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	dd5f      	ble.n	8000d72 <__aeabi_fdiv+0x152>
 8000cb2:	076b      	lsls	r3, r5, #29
 8000cb4:	d004      	beq.n	8000cc0 <__aeabi_fdiv+0xa0>
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	402b      	ands	r3, r5
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_fdiv+0xa0>
 8000cbe:	3504      	adds	r5, #4
 8000cc0:	012b      	lsls	r3, r5, #4
 8000cc2:	d503      	bpl.n	8000ccc <__aeabi_fdiv+0xac>
 8000cc4:	0038      	movs	r0, r7
 8000cc6:	4b5a      	ldr	r3, [pc, #360]	; (8000e30 <__aeabi_fdiv+0x210>)
 8000cc8:	3080      	adds	r0, #128	; 0x80
 8000cca:	401d      	ands	r5, r3
 8000ccc:	28fe      	cmp	r0, #254	; 0xfe
 8000cce:	dc67      	bgt.n	8000da0 <__aeabi_fdiv+0x180>
 8000cd0:	01ad      	lsls	r5, r5, #6
 8000cd2:	0a6d      	lsrs	r5, r5, #9
 8000cd4:	b2c0      	uxtb	r0, r0
 8000cd6:	e002      	b.n	8000cde <__aeabi_fdiv+0xbe>
 8000cd8:	001e      	movs	r6, r3
 8000cda:	2000      	movs	r0, #0
 8000cdc:	2500      	movs	r5, #0
 8000cde:	05c0      	lsls	r0, r0, #23
 8000ce0:	4328      	orrs	r0, r5
 8000ce2:	07f6      	lsls	r6, r6, #31
 8000ce4:	4330      	orrs	r0, r6
 8000ce6:	bce0      	pop	{r5, r6, r7}
 8000ce8:	46ba      	mov	sl, r7
 8000cea:	46b1      	mov	r9, r6
 8000cec:	46a8      	mov	r8, r5
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d12b      	bne.n	8000d4c <__aeabi_fdiv+0x12c>
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	464a      	mov	r2, r9
 8000cf8:	0033      	movs	r3, r6
 8000cfa:	494e      	ldr	r1, [pc, #312]	; (8000e34 <__aeabi_fdiv+0x214>)
 8000cfc:	4302      	orrs	r2, r0
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	588a      	ldr	r2, [r1, r2]
 8000d02:	4063      	eors	r3, r4
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	4697      	mov	pc, r2
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	d113      	bne.n	8000d34 <__aeabi_fdiv+0x114>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	4699      	mov	r9, r3
 8000d10:	3b03      	subs	r3, #3
 8000d12:	2700      	movs	r7, #0
 8000d14:	469a      	mov	sl, r3
 8000d16:	e79a      	b.n	8000c4e <__aeabi_fdiv+0x2e>
 8000d18:	2d00      	cmp	r5, #0
 8000d1a:	d105      	bne.n	8000d28 <__aeabi_fdiv+0x108>
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	4699      	mov	r9, r3
 8000d20:	3b06      	subs	r3, #6
 8000d22:	27ff      	movs	r7, #255	; 0xff
 8000d24:	469a      	mov	sl, r3
 8000d26:	e792      	b.n	8000c4e <__aeabi_fdiv+0x2e>
 8000d28:	230c      	movs	r3, #12
 8000d2a:	4699      	mov	r9, r3
 8000d2c:	3b09      	subs	r3, #9
 8000d2e:	27ff      	movs	r7, #255	; 0xff
 8000d30:	469a      	mov	sl, r3
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fdiv+0x2e>
 8000d34:	0028      	movs	r0, r5
 8000d36:	f002 fba9 	bl	800348c <__clzsi2>
 8000d3a:	2776      	movs	r7, #118	; 0x76
 8000d3c:	1f43      	subs	r3, r0, #5
 8000d3e:	409d      	lsls	r5, r3
 8000d40:	2300      	movs	r3, #0
 8000d42:	427f      	negs	r7, r7
 8000d44:	4699      	mov	r9, r3
 8000d46:	469a      	mov	sl, r3
 8000d48:	1a3f      	subs	r7, r7, r0
 8000d4a:	e780      	b.n	8000c4e <__aeabi_fdiv+0x2e>
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f002 fb9d 	bl	800348c <__clzsi2>
 8000d52:	4642      	mov	r2, r8
 8000d54:	1f43      	subs	r3, r0, #5
 8000d56:	2176      	movs	r1, #118	; 0x76
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	4249      	negs	r1, r1
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	4690      	mov	r8, r2
 8000d60:	2000      	movs	r0, #0
 8000d62:	e785      	b.n	8000c70 <__aeabi_fdiv+0x50>
 8000d64:	21ff      	movs	r1, #255	; 0xff
 8000d66:	2003      	movs	r0, #3
 8000d68:	e782      	b.n	8000c70 <__aeabi_fdiv+0x50>
 8000d6a:	001e      	movs	r6, r3
 8000d6c:	20ff      	movs	r0, #255	; 0xff
 8000d6e:	2500      	movs	r5, #0
 8000d70:	e7b5      	b.n	8000cde <__aeabi_fdiv+0xbe>
 8000d72:	2301      	movs	r3, #1
 8000d74:	1a1b      	subs	r3, r3, r0
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcaf      	bgt.n	8000cda <__aeabi_fdiv+0xba>
 8000d7a:	379e      	adds	r7, #158	; 0x9e
 8000d7c:	0029      	movs	r1, r5
 8000d7e:	40bd      	lsls	r5, r7
 8000d80:	40d9      	lsrs	r1, r3
 8000d82:	1e6a      	subs	r2, r5, #1
 8000d84:	4195      	sbcs	r5, r2
 8000d86:	430d      	orrs	r5, r1
 8000d88:	076b      	lsls	r3, r5, #29
 8000d8a:	d004      	beq.n	8000d96 <__aeabi_fdiv+0x176>
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	402b      	ands	r3, r5
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d000      	beq.n	8000d96 <__aeabi_fdiv+0x176>
 8000d94:	3504      	adds	r5, #4
 8000d96:	016b      	lsls	r3, r5, #5
 8000d98:	d544      	bpl.n	8000e24 <__aeabi_fdiv+0x204>
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2500      	movs	r5, #0
 8000d9e:	e79e      	b.n	8000cde <__aeabi_fdiv+0xbe>
 8000da0:	20ff      	movs	r0, #255	; 0xff
 8000da2:	2500      	movs	r5, #0
 8000da4:	e79b      	b.n	8000cde <__aeabi_fdiv+0xbe>
 8000da6:	2580      	movs	r5, #128	; 0x80
 8000da8:	2600      	movs	r6, #0
 8000daa:	20ff      	movs	r0, #255	; 0xff
 8000dac:	03ed      	lsls	r5, r5, #15
 8000dae:	e796      	b.n	8000cde <__aeabi_fdiv+0xbe>
 8000db0:	2300      	movs	r3, #0
 8000db2:	4698      	mov	r8, r3
 8000db4:	2080      	movs	r0, #128	; 0x80
 8000db6:	03c0      	lsls	r0, r0, #15
 8000db8:	4205      	tst	r5, r0
 8000dba:	d009      	beq.n	8000dd0 <__aeabi_fdiv+0x1b0>
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	4203      	tst	r3, r0
 8000dc0:	d106      	bne.n	8000dd0 <__aeabi_fdiv+0x1b0>
 8000dc2:	4645      	mov	r5, r8
 8000dc4:	4305      	orrs	r5, r0
 8000dc6:	026d      	lsls	r5, r5, #9
 8000dc8:	0026      	movs	r6, r4
 8000dca:	20ff      	movs	r0, #255	; 0xff
 8000dcc:	0a6d      	lsrs	r5, r5, #9
 8000dce:	e786      	b.n	8000cde <__aeabi_fdiv+0xbe>
 8000dd0:	2080      	movs	r0, #128	; 0x80
 8000dd2:	03c0      	lsls	r0, r0, #15
 8000dd4:	4305      	orrs	r5, r0
 8000dd6:	026d      	lsls	r5, r5, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a6d      	lsrs	r5, r5, #9
 8000ddc:	e77f      	b.n	8000cde <__aeabi_fdiv+0xbe>
 8000dde:	4641      	mov	r1, r8
 8000de0:	016a      	lsls	r2, r5, #5
 8000de2:	0148      	lsls	r0, r1, #5
 8000de4:	4282      	cmp	r2, r0
 8000de6:	d219      	bcs.n	8000e1c <__aeabi_fdiv+0x1fc>
 8000de8:	211b      	movs	r1, #27
 8000dea:	2500      	movs	r5, #0
 8000dec:	3f01      	subs	r7, #1
 8000dee:	2601      	movs	r6, #1
 8000df0:	0014      	movs	r4, r2
 8000df2:	006d      	lsls	r5, r5, #1
 8000df4:	0052      	lsls	r2, r2, #1
 8000df6:	2c00      	cmp	r4, #0
 8000df8:	db01      	blt.n	8000dfe <__aeabi_fdiv+0x1de>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	d801      	bhi.n	8000e02 <__aeabi_fdiv+0x1e2>
 8000dfe:	1a12      	subs	r2, r2, r0
 8000e00:	4335      	orrs	r5, r6
 8000e02:	3901      	subs	r1, #1
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d1f3      	bne.n	8000df0 <__aeabi_fdiv+0x1d0>
 8000e08:	1e50      	subs	r0, r2, #1
 8000e0a:	4182      	sbcs	r2, r0
 8000e0c:	0038      	movs	r0, r7
 8000e0e:	307f      	adds	r0, #127	; 0x7f
 8000e10:	001e      	movs	r6, r3
 8000e12:	4315      	orrs	r5, r2
 8000e14:	2800      	cmp	r0, #0
 8000e16:	dd00      	ble.n	8000e1a <__aeabi_fdiv+0x1fa>
 8000e18:	e74b      	b.n	8000cb2 <__aeabi_fdiv+0x92>
 8000e1a:	e7aa      	b.n	8000d72 <__aeabi_fdiv+0x152>
 8000e1c:	211a      	movs	r1, #26
 8000e1e:	2501      	movs	r5, #1
 8000e20:	1a12      	subs	r2, r2, r0
 8000e22:	e7e4      	b.n	8000dee <__aeabi_fdiv+0x1ce>
 8000e24:	01ad      	lsls	r5, r5, #6
 8000e26:	2000      	movs	r0, #0
 8000e28:	0a6d      	lsrs	r5, r5, #9
 8000e2a:	e758      	b.n	8000cde <__aeabi_fdiv+0xbe>
 8000e2c:	0801b218 	.word	0x0801b218
 8000e30:	f7ffffff 	.word	0xf7ffffff
 8000e34:	0801b258 	.word	0x0801b258

08000e38 <__eqsf2>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	0042      	lsls	r2, r0, #1
 8000e3c:	024e      	lsls	r6, r1, #9
 8000e3e:	004c      	lsls	r4, r1, #1
 8000e40:	0245      	lsls	r5, r0, #9
 8000e42:	0a6d      	lsrs	r5, r5, #9
 8000e44:	0e12      	lsrs	r2, r2, #24
 8000e46:	0fc3      	lsrs	r3, r0, #31
 8000e48:	0a76      	lsrs	r6, r6, #9
 8000e4a:	0e24      	lsrs	r4, r4, #24
 8000e4c:	0fc9      	lsrs	r1, r1, #31
 8000e4e:	2aff      	cmp	r2, #255	; 0xff
 8000e50:	d00f      	beq.n	8000e72 <__eqsf2+0x3a>
 8000e52:	2cff      	cmp	r4, #255	; 0xff
 8000e54:	d011      	beq.n	8000e7a <__eqsf2+0x42>
 8000e56:	2001      	movs	r0, #1
 8000e58:	42a2      	cmp	r2, r4
 8000e5a:	d000      	beq.n	8000e5e <__eqsf2+0x26>
 8000e5c:	bd70      	pop	{r4, r5, r6, pc}
 8000e5e:	42b5      	cmp	r5, r6
 8000e60:	d1fc      	bne.n	8000e5c <__eqsf2+0x24>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d00d      	beq.n	8000e82 <__eqsf2+0x4a>
 8000e66:	2a00      	cmp	r2, #0
 8000e68:	d1f8      	bne.n	8000e5c <__eqsf2+0x24>
 8000e6a:	0028      	movs	r0, r5
 8000e6c:	1e45      	subs	r5, r0, #1
 8000e6e:	41a8      	sbcs	r0, r5
 8000e70:	e7f4      	b.n	8000e5c <__eqsf2+0x24>
 8000e72:	2001      	movs	r0, #1
 8000e74:	2d00      	cmp	r5, #0
 8000e76:	d1f1      	bne.n	8000e5c <__eqsf2+0x24>
 8000e78:	e7eb      	b.n	8000e52 <__eqsf2+0x1a>
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d1ed      	bne.n	8000e5c <__eqsf2+0x24>
 8000e80:	e7e9      	b.n	8000e56 <__eqsf2+0x1e>
 8000e82:	2000      	movs	r0, #0
 8000e84:	e7ea      	b.n	8000e5c <__eqsf2+0x24>
 8000e86:	46c0      	nop			; (mov r8, r8)

08000e88 <__gesf2>:
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	0042      	lsls	r2, r0, #1
 8000e8c:	0246      	lsls	r6, r0, #9
 8000e8e:	024d      	lsls	r5, r1, #9
 8000e90:	004c      	lsls	r4, r1, #1
 8000e92:	0fc3      	lsrs	r3, r0, #31
 8000e94:	0a76      	lsrs	r6, r6, #9
 8000e96:	0e12      	lsrs	r2, r2, #24
 8000e98:	0a6d      	lsrs	r5, r5, #9
 8000e9a:	0e24      	lsrs	r4, r4, #24
 8000e9c:	0fc8      	lsrs	r0, r1, #31
 8000e9e:	2aff      	cmp	r2, #255	; 0xff
 8000ea0:	d01f      	beq.n	8000ee2 <__gesf2+0x5a>
 8000ea2:	2cff      	cmp	r4, #255	; 0xff
 8000ea4:	d010      	beq.n	8000ec8 <__gesf2+0x40>
 8000ea6:	2a00      	cmp	r2, #0
 8000ea8:	d11f      	bne.n	8000eea <__gesf2+0x62>
 8000eaa:	4271      	negs	r1, r6
 8000eac:	4171      	adcs	r1, r6
 8000eae:	2c00      	cmp	r4, #0
 8000eb0:	d101      	bne.n	8000eb6 <__gesf2+0x2e>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d01e      	beq.n	8000ef4 <__gesf2+0x6c>
 8000eb6:	2900      	cmp	r1, #0
 8000eb8:	d10e      	bne.n	8000ed8 <__gesf2+0x50>
 8000eba:	4283      	cmp	r3, r0
 8000ebc:	d01e      	beq.n	8000efc <__gesf2+0x74>
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	1e58      	subs	r0, r3, #1
 8000ec2:	4008      	ands	r0, r1
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d126      	bne.n	8000f1a <__gesf2+0x92>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d1f4      	bne.n	8000eba <__gesf2+0x32>
 8000ed0:	4271      	negs	r1, r6
 8000ed2:	4171      	adcs	r1, r6
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d0f0      	beq.n	8000eba <__gesf2+0x32>
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d1f4      	bne.n	8000ec6 <__gesf2+0x3e>
 8000edc:	2001      	movs	r0, #1
 8000ede:	4240      	negs	r0, r0
 8000ee0:	e7f1      	b.n	8000ec6 <__gesf2+0x3e>
 8000ee2:	2e00      	cmp	r6, #0
 8000ee4:	d119      	bne.n	8000f1a <__gesf2+0x92>
 8000ee6:	2cff      	cmp	r4, #255	; 0xff
 8000ee8:	d0ee      	beq.n	8000ec8 <__gesf2+0x40>
 8000eea:	2c00      	cmp	r4, #0
 8000eec:	d1e5      	bne.n	8000eba <__gesf2+0x32>
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d1e3      	bne.n	8000eba <__gesf2+0x32>
 8000ef2:	e7e4      	b.n	8000ebe <__gesf2+0x36>
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d0e5      	beq.n	8000ec6 <__gesf2+0x3e>
 8000efa:	e7e0      	b.n	8000ebe <__gesf2+0x36>
 8000efc:	42a2      	cmp	r2, r4
 8000efe:	dc05      	bgt.n	8000f0c <__gesf2+0x84>
 8000f00:	dbea      	blt.n	8000ed8 <__gesf2+0x50>
 8000f02:	42ae      	cmp	r6, r5
 8000f04:	d802      	bhi.n	8000f0c <__gesf2+0x84>
 8000f06:	d3e7      	bcc.n	8000ed8 <__gesf2+0x50>
 8000f08:	2000      	movs	r0, #0
 8000f0a:	e7dc      	b.n	8000ec6 <__gesf2+0x3e>
 8000f0c:	4241      	negs	r1, r0
 8000f0e:	4141      	adcs	r1, r0
 8000f10:	4248      	negs	r0, r1
 8000f12:	2102      	movs	r1, #2
 8000f14:	4008      	ands	r0, r1
 8000f16:	3801      	subs	r0, #1
 8000f18:	e7d5      	b.n	8000ec6 <__gesf2+0x3e>
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	4240      	negs	r0, r0
 8000f1e:	e7d2      	b.n	8000ec6 <__gesf2+0x3e>

08000f20 <__lesf2>:
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0246      	lsls	r6, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	004c      	lsls	r4, r1, #1
 8000f2a:	0fc3      	lsrs	r3, r0, #31
 8000f2c:	0a76      	lsrs	r6, r6, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e24      	lsrs	r4, r4, #24
 8000f34:	0fc8      	lsrs	r0, r1, #31
 8000f36:	2aff      	cmp	r2, #255	; 0xff
 8000f38:	d00d      	beq.n	8000f56 <__lesf2+0x36>
 8000f3a:	2cff      	cmp	r4, #255	; 0xff
 8000f3c:	d00f      	beq.n	8000f5e <__lesf2+0x3e>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d123      	bne.n	8000f8a <__lesf2+0x6a>
 8000f42:	4271      	negs	r1, r6
 8000f44:	4171      	adcs	r1, r6
 8000f46:	2c00      	cmp	r4, #0
 8000f48:	d10f      	bne.n	8000f6a <__lesf2+0x4a>
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	d10d      	bne.n	8000f6a <__lesf2+0x4a>
 8000f4e:	2000      	movs	r0, #0
 8000f50:	2e00      	cmp	r6, #0
 8000f52:	d014      	beq.n	8000f7e <__lesf2+0x5e>
 8000f54:	e00d      	b.n	8000f72 <__lesf2+0x52>
 8000f56:	2e00      	cmp	r6, #0
 8000f58:	d110      	bne.n	8000f7c <__lesf2+0x5c>
 8000f5a:	2cff      	cmp	r4, #255	; 0xff
 8000f5c:	d115      	bne.n	8000f8a <__lesf2+0x6a>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	d10c      	bne.n	8000f7c <__lesf2+0x5c>
 8000f62:	2a00      	cmp	r2, #0
 8000f64:	d103      	bne.n	8000f6e <__lesf2+0x4e>
 8000f66:	4271      	negs	r1, r6
 8000f68:	4171      	adcs	r1, r6
 8000f6a:	2900      	cmp	r1, #0
 8000f6c:	d108      	bne.n	8000f80 <__lesf2+0x60>
 8000f6e:	4283      	cmp	r3, r0
 8000f70:	d010      	beq.n	8000f94 <__lesf2+0x74>
 8000f72:	2102      	movs	r1, #2
 8000f74:	1e58      	subs	r0, r3, #1
 8000f76:	4008      	ands	r0, r1
 8000f78:	3801      	subs	r0, #1
 8000f7a:	e000      	b.n	8000f7e <__lesf2+0x5e>
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d1fc      	bne.n	8000f7e <__lesf2+0x5e>
 8000f84:	2001      	movs	r0, #1
 8000f86:	4240      	negs	r0, r0
 8000f88:	e7f9      	b.n	8000f7e <__lesf2+0x5e>
 8000f8a:	2c00      	cmp	r4, #0
 8000f8c:	d1ef      	bne.n	8000f6e <__lesf2+0x4e>
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d1ed      	bne.n	8000f6e <__lesf2+0x4e>
 8000f92:	e7ee      	b.n	8000f72 <__lesf2+0x52>
 8000f94:	42a2      	cmp	r2, r4
 8000f96:	dc05      	bgt.n	8000fa4 <__lesf2+0x84>
 8000f98:	dbf2      	blt.n	8000f80 <__lesf2+0x60>
 8000f9a:	42ae      	cmp	r6, r5
 8000f9c:	d802      	bhi.n	8000fa4 <__lesf2+0x84>
 8000f9e:	d3ef      	bcc.n	8000f80 <__lesf2+0x60>
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	e7ec      	b.n	8000f7e <__lesf2+0x5e>
 8000fa4:	4241      	negs	r1, r0
 8000fa6:	4141      	adcs	r1, r0
 8000fa8:	4248      	negs	r0, r1
 8000faa:	2102      	movs	r1, #2
 8000fac:	4008      	ands	r0, r1
 8000fae:	3801      	subs	r0, #1
 8000fb0:	e7e5      	b.n	8000f7e <__lesf2+0x5e>
 8000fb2:	46c0      	nop			; (mov r8, r8)

08000fb4 <__aeabi_fmul>:
 8000fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb6:	4657      	mov	r7, sl
 8000fb8:	464e      	mov	r6, r9
 8000fba:	4645      	mov	r5, r8
 8000fbc:	46de      	mov	lr, fp
 8000fbe:	0244      	lsls	r4, r0, #9
 8000fc0:	b5e0      	push	{r5, r6, r7, lr}
 8000fc2:	0045      	lsls	r5, r0, #1
 8000fc4:	1c0f      	adds	r7, r1, #0
 8000fc6:	0a64      	lsrs	r4, r4, #9
 8000fc8:	0e2d      	lsrs	r5, r5, #24
 8000fca:	0fc6      	lsrs	r6, r0, #31
 8000fcc:	2d00      	cmp	r5, #0
 8000fce:	d047      	beq.n	8001060 <__aeabi_fmul+0xac>
 8000fd0:	2dff      	cmp	r5, #255	; 0xff
 8000fd2:	d04d      	beq.n	8001070 <__aeabi_fmul+0xbc>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	2080      	movs	r0, #128	; 0x80
 8000fd8:	469a      	mov	sl, r3
 8000fda:	469b      	mov	fp, r3
 8000fdc:	00e4      	lsls	r4, r4, #3
 8000fde:	04c0      	lsls	r0, r0, #19
 8000fe0:	4304      	orrs	r4, r0
 8000fe2:	3d7f      	subs	r5, #127	; 0x7f
 8000fe4:	0278      	lsls	r0, r7, #9
 8000fe6:	0a43      	lsrs	r3, r0, #9
 8000fe8:	4699      	mov	r9, r3
 8000fea:	007a      	lsls	r2, r7, #1
 8000fec:	0ffb      	lsrs	r3, r7, #31
 8000fee:	4698      	mov	r8, r3
 8000ff0:	0e12      	lsrs	r2, r2, #24
 8000ff2:	464b      	mov	r3, r9
 8000ff4:	d044      	beq.n	8001080 <__aeabi_fmul+0xcc>
 8000ff6:	2aff      	cmp	r2, #255	; 0xff
 8000ff8:	d011      	beq.n	800101e <__aeabi_fmul+0x6a>
 8000ffa:	00d8      	lsls	r0, r3, #3
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	04db      	lsls	r3, r3, #19
 8001000:	4303      	orrs	r3, r0
 8001002:	4699      	mov	r9, r3
 8001004:	2000      	movs	r0, #0
 8001006:	3a7f      	subs	r2, #127	; 0x7f
 8001008:	18ad      	adds	r5, r5, r2
 800100a:	4647      	mov	r7, r8
 800100c:	4653      	mov	r3, sl
 800100e:	4077      	eors	r7, r6
 8001010:	1c69      	adds	r1, r5, #1
 8001012:	2b0f      	cmp	r3, #15
 8001014:	d83f      	bhi.n	8001096 <__aeabi_fmul+0xe2>
 8001016:	4a72      	ldr	r2, [pc, #456]	; (80011e0 <__aeabi_fmul+0x22c>)
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	58d3      	ldr	r3, [r2, r3]
 800101c:	469f      	mov	pc, r3
 800101e:	35ff      	adds	r5, #255	; 0xff
 8001020:	2b00      	cmp	r3, #0
 8001022:	d000      	beq.n	8001026 <__aeabi_fmul+0x72>
 8001024:	e079      	b.n	800111a <__aeabi_fmul+0x166>
 8001026:	4652      	mov	r2, sl
 8001028:	2302      	movs	r3, #2
 800102a:	431a      	orrs	r2, r3
 800102c:	4692      	mov	sl, r2
 800102e:	2002      	movs	r0, #2
 8001030:	e7eb      	b.n	800100a <__aeabi_fmul+0x56>
 8001032:	4647      	mov	r7, r8
 8001034:	464c      	mov	r4, r9
 8001036:	4683      	mov	fp, r0
 8001038:	465b      	mov	r3, fp
 800103a:	2b02      	cmp	r3, #2
 800103c:	d028      	beq.n	8001090 <__aeabi_fmul+0xdc>
 800103e:	2b03      	cmp	r3, #3
 8001040:	d100      	bne.n	8001044 <__aeabi_fmul+0x90>
 8001042:	e0c6      	b.n	80011d2 <__aeabi_fmul+0x21e>
 8001044:	2b01      	cmp	r3, #1
 8001046:	d14f      	bne.n	80010e8 <__aeabi_fmul+0x134>
 8001048:	2000      	movs	r0, #0
 800104a:	2400      	movs	r4, #0
 800104c:	05c0      	lsls	r0, r0, #23
 800104e:	07ff      	lsls	r7, r7, #31
 8001050:	4320      	orrs	r0, r4
 8001052:	4338      	orrs	r0, r7
 8001054:	bcf0      	pop	{r4, r5, r6, r7}
 8001056:	46bb      	mov	fp, r7
 8001058:	46b2      	mov	sl, r6
 800105a:	46a9      	mov	r9, r5
 800105c:	46a0      	mov	r8, r4
 800105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001060:	2c00      	cmp	r4, #0
 8001062:	d171      	bne.n	8001148 <__aeabi_fmul+0x194>
 8001064:	2304      	movs	r3, #4
 8001066:	469a      	mov	sl, r3
 8001068:	3b03      	subs	r3, #3
 800106a:	2500      	movs	r5, #0
 800106c:	469b      	mov	fp, r3
 800106e:	e7b9      	b.n	8000fe4 <__aeabi_fmul+0x30>
 8001070:	2c00      	cmp	r4, #0
 8001072:	d163      	bne.n	800113c <__aeabi_fmul+0x188>
 8001074:	2308      	movs	r3, #8
 8001076:	469a      	mov	sl, r3
 8001078:	3b06      	subs	r3, #6
 800107a:	25ff      	movs	r5, #255	; 0xff
 800107c:	469b      	mov	fp, r3
 800107e:	e7b1      	b.n	8000fe4 <__aeabi_fmul+0x30>
 8001080:	2b00      	cmp	r3, #0
 8001082:	d150      	bne.n	8001126 <__aeabi_fmul+0x172>
 8001084:	4652      	mov	r2, sl
 8001086:	3301      	adds	r3, #1
 8001088:	431a      	orrs	r2, r3
 800108a:	4692      	mov	sl, r2
 800108c:	2001      	movs	r0, #1
 800108e:	e7bc      	b.n	800100a <__aeabi_fmul+0x56>
 8001090:	20ff      	movs	r0, #255	; 0xff
 8001092:	2400      	movs	r4, #0
 8001094:	e7da      	b.n	800104c <__aeabi_fmul+0x98>
 8001096:	4648      	mov	r0, r9
 8001098:	0c26      	lsrs	r6, r4, #16
 800109a:	0424      	lsls	r4, r4, #16
 800109c:	0c22      	lsrs	r2, r4, #16
 800109e:	0404      	lsls	r4, r0, #16
 80010a0:	0c24      	lsrs	r4, r4, #16
 80010a2:	464b      	mov	r3, r9
 80010a4:	0020      	movs	r0, r4
 80010a6:	0c1b      	lsrs	r3, r3, #16
 80010a8:	4350      	muls	r0, r2
 80010aa:	4374      	muls	r4, r6
 80010ac:	435a      	muls	r2, r3
 80010ae:	435e      	muls	r6, r3
 80010b0:	1912      	adds	r2, r2, r4
 80010b2:	0c03      	lsrs	r3, r0, #16
 80010b4:	189b      	adds	r3, r3, r2
 80010b6:	429c      	cmp	r4, r3
 80010b8:	d903      	bls.n	80010c2 <__aeabi_fmul+0x10e>
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	0252      	lsls	r2, r2, #9
 80010be:	4694      	mov	ip, r2
 80010c0:	4466      	add	r6, ip
 80010c2:	0400      	lsls	r0, r0, #16
 80010c4:	041a      	lsls	r2, r3, #16
 80010c6:	0c00      	lsrs	r0, r0, #16
 80010c8:	1812      	adds	r2, r2, r0
 80010ca:	0194      	lsls	r4, r2, #6
 80010cc:	1e60      	subs	r0, r4, #1
 80010ce:	4184      	sbcs	r4, r0
 80010d0:	0c1b      	lsrs	r3, r3, #16
 80010d2:	0e92      	lsrs	r2, r2, #26
 80010d4:	199b      	adds	r3, r3, r6
 80010d6:	4314      	orrs	r4, r2
 80010d8:	019b      	lsls	r3, r3, #6
 80010da:	431c      	orrs	r4, r3
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	d572      	bpl.n	80011c6 <__aeabi_fmul+0x212>
 80010e0:	2001      	movs	r0, #1
 80010e2:	0863      	lsrs	r3, r4, #1
 80010e4:	4004      	ands	r4, r0
 80010e6:	431c      	orrs	r4, r3
 80010e8:	0008      	movs	r0, r1
 80010ea:	307f      	adds	r0, #127	; 0x7f
 80010ec:	2800      	cmp	r0, #0
 80010ee:	dd3c      	ble.n	800116a <__aeabi_fmul+0x1b6>
 80010f0:	0763      	lsls	r3, r4, #29
 80010f2:	d004      	beq.n	80010fe <__aeabi_fmul+0x14a>
 80010f4:	230f      	movs	r3, #15
 80010f6:	4023      	ands	r3, r4
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d000      	beq.n	80010fe <__aeabi_fmul+0x14a>
 80010fc:	3404      	adds	r4, #4
 80010fe:	0123      	lsls	r3, r4, #4
 8001100:	d503      	bpl.n	800110a <__aeabi_fmul+0x156>
 8001102:	3180      	adds	r1, #128	; 0x80
 8001104:	0008      	movs	r0, r1
 8001106:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <__aeabi_fmul+0x230>)
 8001108:	401c      	ands	r4, r3
 800110a:	28fe      	cmp	r0, #254	; 0xfe
 800110c:	dcc0      	bgt.n	8001090 <__aeabi_fmul+0xdc>
 800110e:	01a4      	lsls	r4, r4, #6
 8001110:	0a64      	lsrs	r4, r4, #9
 8001112:	b2c0      	uxtb	r0, r0
 8001114:	e79a      	b.n	800104c <__aeabi_fmul+0x98>
 8001116:	0037      	movs	r7, r6
 8001118:	e78e      	b.n	8001038 <__aeabi_fmul+0x84>
 800111a:	4652      	mov	r2, sl
 800111c:	2303      	movs	r3, #3
 800111e:	431a      	orrs	r2, r3
 8001120:	4692      	mov	sl, r2
 8001122:	2003      	movs	r0, #3
 8001124:	e771      	b.n	800100a <__aeabi_fmul+0x56>
 8001126:	4648      	mov	r0, r9
 8001128:	f002 f9b0 	bl	800348c <__clzsi2>
 800112c:	464a      	mov	r2, r9
 800112e:	1f43      	subs	r3, r0, #5
 8001130:	409a      	lsls	r2, r3
 8001132:	1a2d      	subs	r5, r5, r0
 8001134:	4691      	mov	r9, r2
 8001136:	2000      	movs	r0, #0
 8001138:	3d76      	subs	r5, #118	; 0x76
 800113a:	e766      	b.n	800100a <__aeabi_fmul+0x56>
 800113c:	230c      	movs	r3, #12
 800113e:	469a      	mov	sl, r3
 8001140:	3b09      	subs	r3, #9
 8001142:	25ff      	movs	r5, #255	; 0xff
 8001144:	469b      	mov	fp, r3
 8001146:	e74d      	b.n	8000fe4 <__aeabi_fmul+0x30>
 8001148:	0020      	movs	r0, r4
 800114a:	f002 f99f 	bl	800348c <__clzsi2>
 800114e:	2576      	movs	r5, #118	; 0x76
 8001150:	1f43      	subs	r3, r0, #5
 8001152:	409c      	lsls	r4, r3
 8001154:	2300      	movs	r3, #0
 8001156:	426d      	negs	r5, r5
 8001158:	469a      	mov	sl, r3
 800115a:	469b      	mov	fp, r3
 800115c:	1a2d      	subs	r5, r5, r0
 800115e:	e741      	b.n	8000fe4 <__aeabi_fmul+0x30>
 8001160:	2480      	movs	r4, #128	; 0x80
 8001162:	2700      	movs	r7, #0
 8001164:	20ff      	movs	r0, #255	; 0xff
 8001166:	03e4      	lsls	r4, r4, #15
 8001168:	e770      	b.n	800104c <__aeabi_fmul+0x98>
 800116a:	2301      	movs	r3, #1
 800116c:	1a1b      	subs	r3, r3, r0
 800116e:	2b1b      	cmp	r3, #27
 8001170:	dd00      	ble.n	8001174 <__aeabi_fmul+0x1c0>
 8001172:	e769      	b.n	8001048 <__aeabi_fmul+0x94>
 8001174:	319e      	adds	r1, #158	; 0x9e
 8001176:	0020      	movs	r0, r4
 8001178:	408c      	lsls	r4, r1
 800117a:	40d8      	lsrs	r0, r3
 800117c:	1e63      	subs	r3, r4, #1
 800117e:	419c      	sbcs	r4, r3
 8001180:	4304      	orrs	r4, r0
 8001182:	0763      	lsls	r3, r4, #29
 8001184:	d004      	beq.n	8001190 <__aeabi_fmul+0x1dc>
 8001186:	230f      	movs	r3, #15
 8001188:	4023      	ands	r3, r4
 800118a:	2b04      	cmp	r3, #4
 800118c:	d000      	beq.n	8001190 <__aeabi_fmul+0x1dc>
 800118e:	3404      	adds	r4, #4
 8001190:	0163      	lsls	r3, r4, #5
 8001192:	d51a      	bpl.n	80011ca <__aeabi_fmul+0x216>
 8001194:	2001      	movs	r0, #1
 8001196:	2400      	movs	r4, #0
 8001198:	e758      	b.n	800104c <__aeabi_fmul+0x98>
 800119a:	2080      	movs	r0, #128	; 0x80
 800119c:	03c0      	lsls	r0, r0, #15
 800119e:	4204      	tst	r4, r0
 80011a0:	d009      	beq.n	80011b6 <__aeabi_fmul+0x202>
 80011a2:	464b      	mov	r3, r9
 80011a4:	4203      	tst	r3, r0
 80011a6:	d106      	bne.n	80011b6 <__aeabi_fmul+0x202>
 80011a8:	464c      	mov	r4, r9
 80011aa:	4304      	orrs	r4, r0
 80011ac:	0264      	lsls	r4, r4, #9
 80011ae:	4647      	mov	r7, r8
 80011b0:	20ff      	movs	r0, #255	; 0xff
 80011b2:	0a64      	lsrs	r4, r4, #9
 80011b4:	e74a      	b.n	800104c <__aeabi_fmul+0x98>
 80011b6:	2080      	movs	r0, #128	; 0x80
 80011b8:	03c0      	lsls	r0, r0, #15
 80011ba:	4304      	orrs	r4, r0
 80011bc:	0264      	lsls	r4, r4, #9
 80011be:	0037      	movs	r7, r6
 80011c0:	20ff      	movs	r0, #255	; 0xff
 80011c2:	0a64      	lsrs	r4, r4, #9
 80011c4:	e742      	b.n	800104c <__aeabi_fmul+0x98>
 80011c6:	0029      	movs	r1, r5
 80011c8:	e78e      	b.n	80010e8 <__aeabi_fmul+0x134>
 80011ca:	01a4      	lsls	r4, r4, #6
 80011cc:	2000      	movs	r0, #0
 80011ce:	0a64      	lsrs	r4, r4, #9
 80011d0:	e73c      	b.n	800104c <__aeabi_fmul+0x98>
 80011d2:	2080      	movs	r0, #128	; 0x80
 80011d4:	03c0      	lsls	r0, r0, #15
 80011d6:	4304      	orrs	r4, r0
 80011d8:	0264      	lsls	r4, r4, #9
 80011da:	20ff      	movs	r0, #255	; 0xff
 80011dc:	0a64      	lsrs	r4, r4, #9
 80011de:	e735      	b.n	800104c <__aeabi_fmul+0x98>
 80011e0:	0801b298 	.word	0x0801b298
 80011e4:	f7ffffff 	.word	0xf7ffffff

080011e8 <__aeabi_fsub>:
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	4646      	mov	r6, r8
 80011ec:	46d6      	mov	lr, sl
 80011ee:	464f      	mov	r7, r9
 80011f0:	0243      	lsls	r3, r0, #9
 80011f2:	0a5b      	lsrs	r3, r3, #9
 80011f4:	00da      	lsls	r2, r3, #3
 80011f6:	4694      	mov	ip, r2
 80011f8:	024a      	lsls	r2, r1, #9
 80011fa:	b5c0      	push	{r6, r7, lr}
 80011fc:	0044      	lsls	r4, r0, #1
 80011fe:	0a56      	lsrs	r6, r2, #9
 8001200:	1c05      	adds	r5, r0, #0
 8001202:	46b0      	mov	r8, r6
 8001204:	0e24      	lsrs	r4, r4, #24
 8001206:	004e      	lsls	r6, r1, #1
 8001208:	0992      	lsrs	r2, r2, #6
 800120a:	001f      	movs	r7, r3
 800120c:	0020      	movs	r0, r4
 800120e:	4692      	mov	sl, r2
 8001210:	0fed      	lsrs	r5, r5, #31
 8001212:	0e36      	lsrs	r6, r6, #24
 8001214:	0fc9      	lsrs	r1, r1, #31
 8001216:	2eff      	cmp	r6, #255	; 0xff
 8001218:	d100      	bne.n	800121c <__aeabi_fsub+0x34>
 800121a:	e07f      	b.n	800131c <__aeabi_fsub+0x134>
 800121c:	2201      	movs	r2, #1
 800121e:	4051      	eors	r1, r2
 8001220:	428d      	cmp	r5, r1
 8001222:	d051      	beq.n	80012c8 <__aeabi_fsub+0xe0>
 8001224:	1ba2      	subs	r2, r4, r6
 8001226:	4691      	mov	r9, r2
 8001228:	2a00      	cmp	r2, #0
 800122a:	dc00      	bgt.n	800122e <__aeabi_fsub+0x46>
 800122c:	e07e      	b.n	800132c <__aeabi_fsub+0x144>
 800122e:	2e00      	cmp	r6, #0
 8001230:	d100      	bne.n	8001234 <__aeabi_fsub+0x4c>
 8001232:	e099      	b.n	8001368 <__aeabi_fsub+0x180>
 8001234:	2cff      	cmp	r4, #255	; 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x52>
 8001238:	e08c      	b.n	8001354 <__aeabi_fsub+0x16c>
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	4652      	mov	r2, sl
 800123e:	04db      	lsls	r3, r3, #19
 8001240:	431a      	orrs	r2, r3
 8001242:	4692      	mov	sl, r2
 8001244:	464a      	mov	r2, r9
 8001246:	2301      	movs	r3, #1
 8001248:	2a1b      	cmp	r2, #27
 800124a:	dc08      	bgt.n	800125e <__aeabi_fsub+0x76>
 800124c:	4653      	mov	r3, sl
 800124e:	2120      	movs	r1, #32
 8001250:	40d3      	lsrs	r3, r2
 8001252:	1a89      	subs	r1, r1, r2
 8001254:	4652      	mov	r2, sl
 8001256:	408a      	lsls	r2, r1
 8001258:	1e51      	subs	r1, r2, #1
 800125a:	418a      	sbcs	r2, r1
 800125c:	4313      	orrs	r3, r2
 800125e:	4662      	mov	r2, ip
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	015a      	lsls	r2, r3, #5
 8001264:	d400      	bmi.n	8001268 <__aeabi_fsub+0x80>
 8001266:	e0f3      	b.n	8001450 <__aeabi_fsub+0x268>
 8001268:	019b      	lsls	r3, r3, #6
 800126a:	099e      	lsrs	r6, r3, #6
 800126c:	0030      	movs	r0, r6
 800126e:	f002 f90d 	bl	800348c <__clzsi2>
 8001272:	3805      	subs	r0, #5
 8001274:	4086      	lsls	r6, r0
 8001276:	4284      	cmp	r4, r0
 8001278:	dd00      	ble.n	800127c <__aeabi_fsub+0x94>
 800127a:	e0f7      	b.n	800146c <__aeabi_fsub+0x284>
 800127c:	0032      	movs	r2, r6
 800127e:	1b04      	subs	r4, r0, r4
 8001280:	2020      	movs	r0, #32
 8001282:	3401      	adds	r4, #1
 8001284:	40e2      	lsrs	r2, r4
 8001286:	1b04      	subs	r4, r0, r4
 8001288:	40a6      	lsls	r6, r4
 800128a:	0033      	movs	r3, r6
 800128c:	1e5e      	subs	r6, r3, #1
 800128e:	41b3      	sbcs	r3, r6
 8001290:	2400      	movs	r4, #0
 8001292:	4313      	orrs	r3, r2
 8001294:	075a      	lsls	r2, r3, #29
 8001296:	d004      	beq.n	80012a2 <__aeabi_fsub+0xba>
 8001298:	220f      	movs	r2, #15
 800129a:	401a      	ands	r2, r3
 800129c:	2a04      	cmp	r2, #4
 800129e:	d000      	beq.n	80012a2 <__aeabi_fsub+0xba>
 80012a0:	3304      	adds	r3, #4
 80012a2:	015a      	lsls	r2, r3, #5
 80012a4:	d400      	bmi.n	80012a8 <__aeabi_fsub+0xc0>
 80012a6:	e0d6      	b.n	8001456 <__aeabi_fsub+0x26e>
 80012a8:	1c62      	adds	r2, r4, #1
 80012aa:	2cfe      	cmp	r4, #254	; 0xfe
 80012ac:	d100      	bne.n	80012b0 <__aeabi_fsub+0xc8>
 80012ae:	e0da      	b.n	8001466 <__aeabi_fsub+0x27e>
 80012b0:	019b      	lsls	r3, r3, #6
 80012b2:	0a5f      	lsrs	r7, r3, #9
 80012b4:	b2d0      	uxtb	r0, r2
 80012b6:	05c0      	lsls	r0, r0, #23
 80012b8:	4338      	orrs	r0, r7
 80012ba:	07ed      	lsls	r5, r5, #31
 80012bc:	4328      	orrs	r0, r5
 80012be:	bce0      	pop	{r5, r6, r7}
 80012c0:	46ba      	mov	sl, r7
 80012c2:	46b1      	mov	r9, r6
 80012c4:	46a8      	mov	r8, r5
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c8:	1ba2      	subs	r2, r4, r6
 80012ca:	4691      	mov	r9, r2
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	dd63      	ble.n	8001398 <__aeabi_fsub+0x1b0>
 80012d0:	2e00      	cmp	r6, #0
 80012d2:	d100      	bne.n	80012d6 <__aeabi_fsub+0xee>
 80012d4:	e099      	b.n	800140a <__aeabi_fsub+0x222>
 80012d6:	2cff      	cmp	r4, #255	; 0xff
 80012d8:	d03c      	beq.n	8001354 <__aeabi_fsub+0x16c>
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	4652      	mov	r2, sl
 80012de:	04db      	lsls	r3, r3, #19
 80012e0:	431a      	orrs	r2, r3
 80012e2:	4692      	mov	sl, r2
 80012e4:	464a      	mov	r2, r9
 80012e6:	2301      	movs	r3, #1
 80012e8:	2a1b      	cmp	r2, #27
 80012ea:	dc08      	bgt.n	80012fe <__aeabi_fsub+0x116>
 80012ec:	4653      	mov	r3, sl
 80012ee:	2120      	movs	r1, #32
 80012f0:	40d3      	lsrs	r3, r2
 80012f2:	1a89      	subs	r1, r1, r2
 80012f4:	4652      	mov	r2, sl
 80012f6:	408a      	lsls	r2, r1
 80012f8:	1e51      	subs	r1, r2, #1
 80012fa:	418a      	sbcs	r2, r1
 80012fc:	4313      	orrs	r3, r2
 80012fe:	4463      	add	r3, ip
 8001300:	015a      	lsls	r2, r3, #5
 8001302:	d400      	bmi.n	8001306 <__aeabi_fsub+0x11e>
 8001304:	e0a4      	b.n	8001450 <__aeabi_fsub+0x268>
 8001306:	3401      	adds	r4, #1
 8001308:	2cff      	cmp	r4, #255	; 0xff
 800130a:	d100      	bne.n	800130e <__aeabi_fsub+0x126>
 800130c:	e0ab      	b.n	8001466 <__aeabi_fsub+0x27e>
 800130e:	2201      	movs	r2, #1
 8001310:	4997      	ldr	r1, [pc, #604]	; (8001570 <__aeabi_fsub+0x388>)
 8001312:	401a      	ands	r2, r3
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	400b      	ands	r3, r1
 8001318:	4313      	orrs	r3, r2
 800131a:	e7bb      	b.n	8001294 <__aeabi_fsub+0xac>
 800131c:	2a00      	cmp	r2, #0
 800131e:	d032      	beq.n	8001386 <__aeabi_fsub+0x19e>
 8001320:	428d      	cmp	r5, r1
 8001322:	d035      	beq.n	8001390 <__aeabi_fsub+0x1a8>
 8001324:	22ff      	movs	r2, #255	; 0xff
 8001326:	4252      	negs	r2, r2
 8001328:	4691      	mov	r9, r2
 800132a:	44a1      	add	r9, r4
 800132c:	464a      	mov	r2, r9
 800132e:	2a00      	cmp	r2, #0
 8001330:	d051      	beq.n	80013d6 <__aeabi_fsub+0x1ee>
 8001332:	1b30      	subs	r0, r6, r4
 8001334:	2c00      	cmp	r4, #0
 8001336:	d000      	beq.n	800133a <__aeabi_fsub+0x152>
 8001338:	e09c      	b.n	8001474 <__aeabi_fsub+0x28c>
 800133a:	4663      	mov	r3, ip
 800133c:	2b00      	cmp	r3, #0
 800133e:	d100      	bne.n	8001342 <__aeabi_fsub+0x15a>
 8001340:	e0df      	b.n	8001502 <__aeabi_fsub+0x31a>
 8001342:	3801      	subs	r0, #1
 8001344:	2800      	cmp	r0, #0
 8001346:	d100      	bne.n	800134a <__aeabi_fsub+0x162>
 8001348:	e0f7      	b.n	800153a <__aeabi_fsub+0x352>
 800134a:	2eff      	cmp	r6, #255	; 0xff
 800134c:	d000      	beq.n	8001350 <__aeabi_fsub+0x168>
 800134e:	e099      	b.n	8001484 <__aeabi_fsub+0x29c>
 8001350:	000d      	movs	r5, r1
 8001352:	4643      	mov	r3, r8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d100      	bne.n	800135a <__aeabi_fsub+0x172>
 8001358:	e085      	b.n	8001466 <__aeabi_fsub+0x27e>
 800135a:	2780      	movs	r7, #128	; 0x80
 800135c:	03ff      	lsls	r7, r7, #15
 800135e:	431f      	orrs	r7, r3
 8001360:	027f      	lsls	r7, r7, #9
 8001362:	20ff      	movs	r0, #255	; 0xff
 8001364:	0a7f      	lsrs	r7, r7, #9
 8001366:	e7a6      	b.n	80012b6 <__aeabi_fsub+0xce>
 8001368:	4652      	mov	r2, sl
 800136a:	2a00      	cmp	r2, #0
 800136c:	d074      	beq.n	8001458 <__aeabi_fsub+0x270>
 800136e:	2201      	movs	r2, #1
 8001370:	4252      	negs	r2, r2
 8001372:	4690      	mov	r8, r2
 8001374:	44c1      	add	r9, r8
 8001376:	464a      	mov	r2, r9
 8001378:	2a00      	cmp	r2, #0
 800137a:	d100      	bne.n	800137e <__aeabi_fsub+0x196>
 800137c:	e0c8      	b.n	8001510 <__aeabi_fsub+0x328>
 800137e:	2cff      	cmp	r4, #255	; 0xff
 8001380:	d000      	beq.n	8001384 <__aeabi_fsub+0x19c>
 8001382:	e75f      	b.n	8001244 <__aeabi_fsub+0x5c>
 8001384:	e7e6      	b.n	8001354 <__aeabi_fsub+0x16c>
 8001386:	2201      	movs	r2, #1
 8001388:	4051      	eors	r1, r2
 800138a:	42a9      	cmp	r1, r5
 800138c:	d000      	beq.n	8001390 <__aeabi_fsub+0x1a8>
 800138e:	e749      	b.n	8001224 <__aeabi_fsub+0x3c>
 8001390:	22ff      	movs	r2, #255	; 0xff
 8001392:	4252      	negs	r2, r2
 8001394:	4691      	mov	r9, r2
 8001396:	44a1      	add	r9, r4
 8001398:	464a      	mov	r2, r9
 800139a:	2a00      	cmp	r2, #0
 800139c:	d043      	beq.n	8001426 <__aeabi_fsub+0x23e>
 800139e:	1b31      	subs	r1, r6, r4
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_fsub+0x1be>
 80013a4:	e08c      	b.n	80014c0 <__aeabi_fsub+0x2d8>
 80013a6:	2eff      	cmp	r6, #255	; 0xff
 80013a8:	d100      	bne.n	80013ac <__aeabi_fsub+0x1c4>
 80013aa:	e092      	b.n	80014d2 <__aeabi_fsub+0x2ea>
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	4662      	mov	r2, ip
 80013b0:	04db      	lsls	r3, r3, #19
 80013b2:	431a      	orrs	r2, r3
 80013b4:	4694      	mov	ip, r2
 80013b6:	2301      	movs	r3, #1
 80013b8:	291b      	cmp	r1, #27
 80013ba:	dc09      	bgt.n	80013d0 <__aeabi_fsub+0x1e8>
 80013bc:	2020      	movs	r0, #32
 80013be:	4663      	mov	r3, ip
 80013c0:	4662      	mov	r2, ip
 80013c2:	40cb      	lsrs	r3, r1
 80013c4:	1a41      	subs	r1, r0, r1
 80013c6:	408a      	lsls	r2, r1
 80013c8:	0011      	movs	r1, r2
 80013ca:	1e48      	subs	r0, r1, #1
 80013cc:	4181      	sbcs	r1, r0
 80013ce:	430b      	orrs	r3, r1
 80013d0:	0034      	movs	r4, r6
 80013d2:	4453      	add	r3, sl
 80013d4:	e794      	b.n	8001300 <__aeabi_fsub+0x118>
 80013d6:	22fe      	movs	r2, #254	; 0xfe
 80013d8:	1c66      	adds	r6, r4, #1
 80013da:	4232      	tst	r2, r6
 80013dc:	d164      	bne.n	80014a8 <__aeabi_fsub+0x2c0>
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d000      	beq.n	80013e4 <__aeabi_fsub+0x1fc>
 80013e2:	e082      	b.n	80014ea <__aeabi_fsub+0x302>
 80013e4:	4663      	mov	r3, ip
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d100      	bne.n	80013ec <__aeabi_fsub+0x204>
 80013ea:	e0ab      	b.n	8001544 <__aeabi_fsub+0x35c>
 80013ec:	4653      	mov	r3, sl
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d100      	bne.n	80013f4 <__aeabi_fsub+0x20c>
 80013f2:	e760      	b.n	80012b6 <__aeabi_fsub+0xce>
 80013f4:	4663      	mov	r3, ip
 80013f6:	4652      	mov	r2, sl
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	015a      	lsls	r2, r3, #5
 80013fc:	d400      	bmi.n	8001400 <__aeabi_fsub+0x218>
 80013fe:	e0aa      	b.n	8001556 <__aeabi_fsub+0x36e>
 8001400:	4663      	mov	r3, ip
 8001402:	4652      	mov	r2, sl
 8001404:	000d      	movs	r5, r1
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	e744      	b.n	8001294 <__aeabi_fsub+0xac>
 800140a:	4652      	mov	r2, sl
 800140c:	2a00      	cmp	r2, #0
 800140e:	d023      	beq.n	8001458 <__aeabi_fsub+0x270>
 8001410:	2201      	movs	r2, #1
 8001412:	4252      	negs	r2, r2
 8001414:	4690      	mov	r8, r2
 8001416:	44c1      	add	r9, r8
 8001418:	464a      	mov	r2, r9
 800141a:	2a00      	cmp	r2, #0
 800141c:	d075      	beq.n	800150a <__aeabi_fsub+0x322>
 800141e:	2cff      	cmp	r4, #255	; 0xff
 8001420:	d000      	beq.n	8001424 <__aeabi_fsub+0x23c>
 8001422:	e75f      	b.n	80012e4 <__aeabi_fsub+0xfc>
 8001424:	e796      	b.n	8001354 <__aeabi_fsub+0x16c>
 8001426:	26fe      	movs	r6, #254	; 0xfe
 8001428:	3401      	adds	r4, #1
 800142a:	4226      	tst	r6, r4
 800142c:	d153      	bne.n	80014d6 <__aeabi_fsub+0x2ee>
 800142e:	2800      	cmp	r0, #0
 8001430:	d172      	bne.n	8001518 <__aeabi_fsub+0x330>
 8001432:	4663      	mov	r3, ip
 8001434:	2b00      	cmp	r3, #0
 8001436:	d100      	bne.n	800143a <__aeabi_fsub+0x252>
 8001438:	e093      	b.n	8001562 <__aeabi_fsub+0x37a>
 800143a:	4653      	mov	r3, sl
 800143c:	2b00      	cmp	r3, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_fsub+0x25a>
 8001440:	e739      	b.n	80012b6 <__aeabi_fsub+0xce>
 8001442:	4463      	add	r3, ip
 8001444:	2400      	movs	r4, #0
 8001446:	015a      	lsls	r2, r3, #5
 8001448:	d502      	bpl.n	8001450 <__aeabi_fsub+0x268>
 800144a:	4a4a      	ldr	r2, [pc, #296]	; (8001574 <__aeabi_fsub+0x38c>)
 800144c:	3401      	adds	r4, #1
 800144e:	4013      	ands	r3, r2
 8001450:	075a      	lsls	r2, r3, #29
 8001452:	d000      	beq.n	8001456 <__aeabi_fsub+0x26e>
 8001454:	e720      	b.n	8001298 <__aeabi_fsub+0xb0>
 8001456:	08db      	lsrs	r3, r3, #3
 8001458:	2cff      	cmp	r4, #255	; 0xff
 800145a:	d100      	bne.n	800145e <__aeabi_fsub+0x276>
 800145c:	e77a      	b.n	8001354 <__aeabi_fsub+0x16c>
 800145e:	025b      	lsls	r3, r3, #9
 8001460:	0a5f      	lsrs	r7, r3, #9
 8001462:	b2e0      	uxtb	r0, r4
 8001464:	e727      	b.n	80012b6 <__aeabi_fsub+0xce>
 8001466:	20ff      	movs	r0, #255	; 0xff
 8001468:	2700      	movs	r7, #0
 800146a:	e724      	b.n	80012b6 <__aeabi_fsub+0xce>
 800146c:	4b41      	ldr	r3, [pc, #260]	; (8001574 <__aeabi_fsub+0x38c>)
 800146e:	1a24      	subs	r4, r4, r0
 8001470:	4033      	ands	r3, r6
 8001472:	e70f      	b.n	8001294 <__aeabi_fsub+0xac>
 8001474:	2eff      	cmp	r6, #255	; 0xff
 8001476:	d100      	bne.n	800147a <__aeabi_fsub+0x292>
 8001478:	e76a      	b.n	8001350 <__aeabi_fsub+0x168>
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	4662      	mov	r2, ip
 800147e:	04db      	lsls	r3, r3, #19
 8001480:	431a      	orrs	r2, r3
 8001482:	4694      	mov	ip, r2
 8001484:	2301      	movs	r3, #1
 8001486:	281b      	cmp	r0, #27
 8001488:	dc09      	bgt.n	800149e <__aeabi_fsub+0x2b6>
 800148a:	2420      	movs	r4, #32
 800148c:	4663      	mov	r3, ip
 800148e:	4662      	mov	r2, ip
 8001490:	40c3      	lsrs	r3, r0
 8001492:	1a20      	subs	r0, r4, r0
 8001494:	4082      	lsls	r2, r0
 8001496:	0010      	movs	r0, r2
 8001498:	1e44      	subs	r4, r0, #1
 800149a:	41a0      	sbcs	r0, r4
 800149c:	4303      	orrs	r3, r0
 800149e:	4652      	mov	r2, sl
 80014a0:	000d      	movs	r5, r1
 80014a2:	0034      	movs	r4, r6
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	e6dc      	b.n	8001262 <__aeabi_fsub+0x7a>
 80014a8:	4663      	mov	r3, ip
 80014aa:	4652      	mov	r2, sl
 80014ac:	1a9e      	subs	r6, r3, r2
 80014ae:	0173      	lsls	r3, r6, #5
 80014b0:	d417      	bmi.n	80014e2 <__aeabi_fsub+0x2fa>
 80014b2:	2e00      	cmp	r6, #0
 80014b4:	d000      	beq.n	80014b8 <__aeabi_fsub+0x2d0>
 80014b6:	e6d9      	b.n	800126c <__aeabi_fsub+0x84>
 80014b8:	2500      	movs	r5, #0
 80014ba:	2000      	movs	r0, #0
 80014bc:	2700      	movs	r7, #0
 80014be:	e6fa      	b.n	80012b6 <__aeabi_fsub+0xce>
 80014c0:	4663      	mov	r3, ip
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d044      	beq.n	8001550 <__aeabi_fsub+0x368>
 80014c6:	3901      	subs	r1, #1
 80014c8:	2900      	cmp	r1, #0
 80014ca:	d04c      	beq.n	8001566 <__aeabi_fsub+0x37e>
 80014cc:	2eff      	cmp	r6, #255	; 0xff
 80014ce:	d000      	beq.n	80014d2 <__aeabi_fsub+0x2ea>
 80014d0:	e771      	b.n	80013b6 <__aeabi_fsub+0x1ce>
 80014d2:	4643      	mov	r3, r8
 80014d4:	e73e      	b.n	8001354 <__aeabi_fsub+0x16c>
 80014d6:	2cff      	cmp	r4, #255	; 0xff
 80014d8:	d0c5      	beq.n	8001466 <__aeabi_fsub+0x27e>
 80014da:	4652      	mov	r2, sl
 80014dc:	4462      	add	r2, ip
 80014de:	0853      	lsrs	r3, r2, #1
 80014e0:	e7b6      	b.n	8001450 <__aeabi_fsub+0x268>
 80014e2:	4663      	mov	r3, ip
 80014e4:	000d      	movs	r5, r1
 80014e6:	1ad6      	subs	r6, r2, r3
 80014e8:	e6c0      	b.n	800126c <__aeabi_fsub+0x84>
 80014ea:	4662      	mov	r2, ip
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d116      	bne.n	800151e <__aeabi_fsub+0x336>
 80014f0:	4653      	mov	r3, sl
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d000      	beq.n	80014f8 <__aeabi_fsub+0x310>
 80014f6:	e72b      	b.n	8001350 <__aeabi_fsub+0x168>
 80014f8:	2780      	movs	r7, #128	; 0x80
 80014fa:	2500      	movs	r5, #0
 80014fc:	20ff      	movs	r0, #255	; 0xff
 80014fe:	03ff      	lsls	r7, r7, #15
 8001500:	e6d9      	b.n	80012b6 <__aeabi_fsub+0xce>
 8001502:	000d      	movs	r5, r1
 8001504:	4643      	mov	r3, r8
 8001506:	0034      	movs	r4, r6
 8001508:	e7a6      	b.n	8001458 <__aeabi_fsub+0x270>
 800150a:	4653      	mov	r3, sl
 800150c:	4463      	add	r3, ip
 800150e:	e6f7      	b.n	8001300 <__aeabi_fsub+0x118>
 8001510:	4663      	mov	r3, ip
 8001512:	4652      	mov	r2, sl
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	e6a4      	b.n	8001262 <__aeabi_fsub+0x7a>
 8001518:	4662      	mov	r2, ip
 800151a:	2a00      	cmp	r2, #0
 800151c:	d0d9      	beq.n	80014d2 <__aeabi_fsub+0x2ea>
 800151e:	4652      	mov	r2, sl
 8001520:	2a00      	cmp	r2, #0
 8001522:	d100      	bne.n	8001526 <__aeabi_fsub+0x33e>
 8001524:	e716      	b.n	8001354 <__aeabi_fsub+0x16c>
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	03d2      	lsls	r2, r2, #15
 800152a:	4213      	tst	r3, r2
 800152c:	d100      	bne.n	8001530 <__aeabi_fsub+0x348>
 800152e:	e711      	b.n	8001354 <__aeabi_fsub+0x16c>
 8001530:	4640      	mov	r0, r8
 8001532:	4210      	tst	r0, r2
 8001534:	d000      	beq.n	8001538 <__aeabi_fsub+0x350>
 8001536:	e70d      	b.n	8001354 <__aeabi_fsub+0x16c>
 8001538:	e70a      	b.n	8001350 <__aeabi_fsub+0x168>
 800153a:	4652      	mov	r2, sl
 800153c:	000d      	movs	r5, r1
 800153e:	0034      	movs	r4, r6
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	e68e      	b.n	8001262 <__aeabi_fsub+0x7a>
 8001544:	4653      	mov	r3, sl
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <__aeabi_fsub+0x374>
 800154a:	000d      	movs	r5, r1
 800154c:	4647      	mov	r7, r8
 800154e:	e6b2      	b.n	80012b6 <__aeabi_fsub+0xce>
 8001550:	4643      	mov	r3, r8
 8001552:	0034      	movs	r4, r6
 8001554:	e780      	b.n	8001458 <__aeabi_fsub+0x270>
 8001556:	2b00      	cmp	r3, #0
 8001558:	d000      	beq.n	800155c <__aeabi_fsub+0x374>
 800155a:	e779      	b.n	8001450 <__aeabi_fsub+0x268>
 800155c:	2500      	movs	r5, #0
 800155e:	2700      	movs	r7, #0
 8001560:	e6a9      	b.n	80012b6 <__aeabi_fsub+0xce>
 8001562:	4647      	mov	r7, r8
 8001564:	e6a7      	b.n	80012b6 <__aeabi_fsub+0xce>
 8001566:	4653      	mov	r3, sl
 8001568:	0034      	movs	r4, r6
 800156a:	4463      	add	r3, ip
 800156c:	e6c8      	b.n	8001300 <__aeabi_fsub+0x118>
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	7dffffff 	.word	0x7dffffff
 8001574:	fbffffff 	.word	0xfbffffff

08001578 <__aeabi_f2iz>:
 8001578:	0241      	lsls	r1, r0, #9
 800157a:	0042      	lsls	r2, r0, #1
 800157c:	0fc3      	lsrs	r3, r0, #31
 800157e:	0a49      	lsrs	r1, r1, #9
 8001580:	2000      	movs	r0, #0
 8001582:	0e12      	lsrs	r2, r2, #24
 8001584:	2a7e      	cmp	r2, #126	; 0x7e
 8001586:	d903      	bls.n	8001590 <__aeabi_f2iz+0x18>
 8001588:	2a9d      	cmp	r2, #157	; 0x9d
 800158a:	d902      	bls.n	8001592 <__aeabi_f2iz+0x1a>
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <__aeabi_f2iz+0x3c>)
 800158e:	1898      	adds	r0, r3, r2
 8001590:	4770      	bx	lr
 8001592:	2080      	movs	r0, #128	; 0x80
 8001594:	0400      	lsls	r0, r0, #16
 8001596:	4301      	orrs	r1, r0
 8001598:	2a95      	cmp	r2, #149	; 0x95
 800159a:	dc07      	bgt.n	80015ac <__aeabi_f2iz+0x34>
 800159c:	2096      	movs	r0, #150	; 0x96
 800159e:	1a82      	subs	r2, r0, r2
 80015a0:	40d1      	lsrs	r1, r2
 80015a2:	4248      	negs	r0, r1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f3      	bne.n	8001590 <__aeabi_f2iz+0x18>
 80015a8:	0008      	movs	r0, r1
 80015aa:	e7f1      	b.n	8001590 <__aeabi_f2iz+0x18>
 80015ac:	3a96      	subs	r2, #150	; 0x96
 80015ae:	4091      	lsls	r1, r2
 80015b0:	e7f7      	b.n	80015a2 <__aeabi_f2iz+0x2a>
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	7fffffff 	.word	0x7fffffff

080015b8 <__aeabi_i2f>:
 80015b8:	b570      	push	{r4, r5, r6, lr}
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d013      	beq.n	80015e6 <__aeabi_i2f+0x2e>
 80015be:	17c3      	asrs	r3, r0, #31
 80015c0:	18c5      	adds	r5, r0, r3
 80015c2:	405d      	eors	r5, r3
 80015c4:	0fc4      	lsrs	r4, r0, #31
 80015c6:	0028      	movs	r0, r5
 80015c8:	f001 ff60 	bl	800348c <__clzsi2>
 80015cc:	239e      	movs	r3, #158	; 0x9e
 80015ce:	0001      	movs	r1, r0
 80015d0:	1a1b      	subs	r3, r3, r0
 80015d2:	2b96      	cmp	r3, #150	; 0x96
 80015d4:	dc0f      	bgt.n	80015f6 <__aeabi_i2f+0x3e>
 80015d6:	2808      	cmp	r0, #8
 80015d8:	dd01      	ble.n	80015de <__aeabi_i2f+0x26>
 80015da:	3908      	subs	r1, #8
 80015dc:	408d      	lsls	r5, r1
 80015de:	026d      	lsls	r5, r5, #9
 80015e0:	0a6d      	lsrs	r5, r5, #9
 80015e2:	b2d8      	uxtb	r0, r3
 80015e4:	e002      	b.n	80015ec <__aeabi_i2f+0x34>
 80015e6:	2400      	movs	r4, #0
 80015e8:	2000      	movs	r0, #0
 80015ea:	2500      	movs	r5, #0
 80015ec:	05c0      	lsls	r0, r0, #23
 80015ee:	4328      	orrs	r0, r5
 80015f0:	07e4      	lsls	r4, r4, #31
 80015f2:	4320      	orrs	r0, r4
 80015f4:	bd70      	pop	{r4, r5, r6, pc}
 80015f6:	2b99      	cmp	r3, #153	; 0x99
 80015f8:	dd0b      	ble.n	8001612 <__aeabi_i2f+0x5a>
 80015fa:	2205      	movs	r2, #5
 80015fc:	002e      	movs	r6, r5
 80015fe:	1a12      	subs	r2, r2, r0
 8001600:	40d6      	lsrs	r6, r2
 8001602:	0002      	movs	r2, r0
 8001604:	321b      	adds	r2, #27
 8001606:	4095      	lsls	r5, r2
 8001608:	0028      	movs	r0, r5
 800160a:	1e45      	subs	r5, r0, #1
 800160c:	41a8      	sbcs	r0, r5
 800160e:	0035      	movs	r5, r6
 8001610:	4305      	orrs	r5, r0
 8001612:	2905      	cmp	r1, #5
 8001614:	dd01      	ble.n	800161a <__aeabi_i2f+0x62>
 8001616:	1f4a      	subs	r2, r1, #5
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4e08      	ldr	r6, [pc, #32]	; (8001640 <__aeabi_i2f+0x88>)
 800161e:	4032      	ands	r2, r6
 8001620:	0768      	lsls	r0, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x80>
 8001624:	200f      	movs	r0, #15
 8001626:	4028      	ands	r0, r5
 8001628:	2804      	cmp	r0, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x80>
 800162c:	3204      	adds	r2, #4
 800162e:	0150      	lsls	r0, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x80>
 8001632:	239f      	movs	r3, #159	; 0x9f
 8001634:	4032      	ands	r2, r6
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7d5      	b.n	80015ec <__aeabi_i2f+0x34>
 8001640:	fbffffff 	.word	0xfbffffff

08001644 <__aeabi_ui2f>:
 8001644:	b570      	push	{r4, r5, r6, lr}
 8001646:	1e05      	subs	r5, r0, #0
 8001648:	d00e      	beq.n	8001668 <__aeabi_ui2f+0x24>
 800164a:	f001 ff1f 	bl	800348c <__clzsi2>
 800164e:	239e      	movs	r3, #158	; 0x9e
 8001650:	0004      	movs	r4, r0
 8001652:	1a1b      	subs	r3, r3, r0
 8001654:	2b96      	cmp	r3, #150	; 0x96
 8001656:	dc0c      	bgt.n	8001672 <__aeabi_ui2f+0x2e>
 8001658:	2808      	cmp	r0, #8
 800165a:	dd01      	ble.n	8001660 <__aeabi_ui2f+0x1c>
 800165c:	3c08      	subs	r4, #8
 800165e:	40a5      	lsls	r5, r4
 8001660:	026d      	lsls	r5, r5, #9
 8001662:	0a6d      	lsrs	r5, r5, #9
 8001664:	b2d8      	uxtb	r0, r3
 8001666:	e001      	b.n	800166c <__aeabi_ui2f+0x28>
 8001668:	2000      	movs	r0, #0
 800166a:	2500      	movs	r5, #0
 800166c:	05c0      	lsls	r0, r0, #23
 800166e:	4328      	orrs	r0, r5
 8001670:	bd70      	pop	{r4, r5, r6, pc}
 8001672:	2b99      	cmp	r3, #153	; 0x99
 8001674:	dd09      	ble.n	800168a <__aeabi_ui2f+0x46>
 8001676:	0002      	movs	r2, r0
 8001678:	0029      	movs	r1, r5
 800167a:	321b      	adds	r2, #27
 800167c:	4091      	lsls	r1, r2
 800167e:	1e4a      	subs	r2, r1, #1
 8001680:	4191      	sbcs	r1, r2
 8001682:	2205      	movs	r2, #5
 8001684:	1a12      	subs	r2, r2, r0
 8001686:	40d5      	lsrs	r5, r2
 8001688:	430d      	orrs	r5, r1
 800168a:	2c05      	cmp	r4, #5
 800168c:	dd01      	ble.n	8001692 <__aeabi_ui2f+0x4e>
 800168e:	1f62      	subs	r2, r4, #5
 8001690:	4095      	lsls	r5, r2
 8001692:	0029      	movs	r1, r5
 8001694:	4e08      	ldr	r6, [pc, #32]	; (80016b8 <__aeabi_ui2f+0x74>)
 8001696:	4031      	ands	r1, r6
 8001698:	076a      	lsls	r2, r5, #29
 800169a:	d009      	beq.n	80016b0 <__aeabi_ui2f+0x6c>
 800169c:	200f      	movs	r0, #15
 800169e:	4028      	ands	r0, r5
 80016a0:	2804      	cmp	r0, #4
 80016a2:	d005      	beq.n	80016b0 <__aeabi_ui2f+0x6c>
 80016a4:	3104      	adds	r1, #4
 80016a6:	014a      	lsls	r2, r1, #5
 80016a8:	d502      	bpl.n	80016b0 <__aeabi_ui2f+0x6c>
 80016aa:	239f      	movs	r3, #159	; 0x9f
 80016ac:	4031      	ands	r1, r6
 80016ae:	1b1b      	subs	r3, r3, r4
 80016b0:	0189      	lsls	r1, r1, #6
 80016b2:	0a4d      	lsrs	r5, r1, #9
 80016b4:	b2d8      	uxtb	r0, r3
 80016b6:	e7d9      	b.n	800166c <__aeabi_ui2f+0x28>
 80016b8:	fbffffff 	.word	0xfbffffff

080016bc <__aeabi_dadd>:
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	464f      	mov	r7, r9
 80016c0:	46d6      	mov	lr, sl
 80016c2:	4646      	mov	r6, r8
 80016c4:	000d      	movs	r5, r1
 80016c6:	0001      	movs	r1, r0
 80016c8:	0018      	movs	r0, r3
 80016ca:	b5c0      	push	{r6, r7, lr}
 80016cc:	0017      	movs	r7, r2
 80016ce:	032b      	lsls	r3, r5, #12
 80016d0:	0a5a      	lsrs	r2, r3, #9
 80016d2:	0f4b      	lsrs	r3, r1, #29
 80016d4:	4313      	orrs	r3, r2
 80016d6:	00ca      	lsls	r2, r1, #3
 80016d8:	4691      	mov	r9, r2
 80016da:	0302      	lsls	r2, r0, #12
 80016dc:	006e      	lsls	r6, r5, #1
 80016de:	0041      	lsls	r1, r0, #1
 80016e0:	0a52      	lsrs	r2, r2, #9
 80016e2:	0fec      	lsrs	r4, r5, #31
 80016e4:	0f7d      	lsrs	r5, r7, #29
 80016e6:	4315      	orrs	r5, r2
 80016e8:	0d76      	lsrs	r6, r6, #21
 80016ea:	0d49      	lsrs	r1, r1, #21
 80016ec:	0fc0      	lsrs	r0, r0, #31
 80016ee:	4682      	mov	sl, r0
 80016f0:	46ac      	mov	ip, r5
 80016f2:	00ff      	lsls	r7, r7, #3
 80016f4:	1a72      	subs	r2, r6, r1
 80016f6:	4284      	cmp	r4, r0
 80016f8:	d100      	bne.n	80016fc <__aeabi_dadd+0x40>
 80016fa:	e098      	b.n	800182e <__aeabi_dadd+0x172>
 80016fc:	2a00      	cmp	r2, #0
 80016fe:	dc00      	bgt.n	8001702 <__aeabi_dadd+0x46>
 8001700:	e081      	b.n	8001806 <__aeabi_dadd+0x14a>
 8001702:	2900      	cmp	r1, #0
 8001704:	d100      	bne.n	8001708 <__aeabi_dadd+0x4c>
 8001706:	e0b6      	b.n	8001876 <__aeabi_dadd+0x1ba>
 8001708:	49c9      	ldr	r1, [pc, #804]	; (8001a30 <__aeabi_dadd+0x374>)
 800170a:	428e      	cmp	r6, r1
 800170c:	d100      	bne.n	8001710 <__aeabi_dadd+0x54>
 800170e:	e172      	b.n	80019f6 <__aeabi_dadd+0x33a>
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0028      	movs	r0, r5
 8001714:	0409      	lsls	r1, r1, #16
 8001716:	4308      	orrs	r0, r1
 8001718:	4684      	mov	ip, r0
 800171a:	2a38      	cmp	r2, #56	; 0x38
 800171c:	dd00      	ble.n	8001720 <__aeabi_dadd+0x64>
 800171e:	e15e      	b.n	80019de <__aeabi_dadd+0x322>
 8001720:	2a1f      	cmp	r2, #31
 8001722:	dd00      	ble.n	8001726 <__aeabi_dadd+0x6a>
 8001724:	e1ee      	b.n	8001b04 <__aeabi_dadd+0x448>
 8001726:	2020      	movs	r0, #32
 8001728:	0039      	movs	r1, r7
 800172a:	4665      	mov	r5, ip
 800172c:	1a80      	subs	r0, r0, r2
 800172e:	4087      	lsls	r7, r0
 8001730:	40d1      	lsrs	r1, r2
 8001732:	4085      	lsls	r5, r0
 8001734:	430d      	orrs	r5, r1
 8001736:	0039      	movs	r1, r7
 8001738:	1e4f      	subs	r7, r1, #1
 800173a:	41b9      	sbcs	r1, r7
 800173c:	4667      	mov	r7, ip
 800173e:	40d7      	lsrs	r7, r2
 8001740:	4329      	orrs	r1, r5
 8001742:	1bdb      	subs	r3, r3, r7
 8001744:	464a      	mov	r2, r9
 8001746:	1a55      	subs	r5, r2, r1
 8001748:	45a9      	cmp	r9, r5
 800174a:	4189      	sbcs	r1, r1
 800174c:	4249      	negs	r1, r1
 800174e:	1a5b      	subs	r3, r3, r1
 8001750:	4698      	mov	r8, r3
 8001752:	4643      	mov	r3, r8
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	d400      	bmi.n	800175a <__aeabi_dadd+0x9e>
 8001758:	e0cc      	b.n	80018f4 <__aeabi_dadd+0x238>
 800175a:	4643      	mov	r3, r8
 800175c:	025b      	lsls	r3, r3, #9
 800175e:	0a5b      	lsrs	r3, r3, #9
 8001760:	4698      	mov	r8, r3
 8001762:	4643      	mov	r3, r8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d100      	bne.n	800176a <__aeabi_dadd+0xae>
 8001768:	e12c      	b.n	80019c4 <__aeabi_dadd+0x308>
 800176a:	4640      	mov	r0, r8
 800176c:	f001 fe8e 	bl	800348c <__clzsi2>
 8001770:	0001      	movs	r1, r0
 8001772:	3908      	subs	r1, #8
 8001774:	2220      	movs	r2, #32
 8001776:	0028      	movs	r0, r5
 8001778:	4643      	mov	r3, r8
 800177a:	1a52      	subs	r2, r2, r1
 800177c:	408b      	lsls	r3, r1
 800177e:	40d0      	lsrs	r0, r2
 8001780:	408d      	lsls	r5, r1
 8001782:	4303      	orrs	r3, r0
 8001784:	428e      	cmp	r6, r1
 8001786:	dd00      	ble.n	800178a <__aeabi_dadd+0xce>
 8001788:	e117      	b.n	80019ba <__aeabi_dadd+0x2fe>
 800178a:	1b8e      	subs	r6, r1, r6
 800178c:	1c72      	adds	r2, r6, #1
 800178e:	2a1f      	cmp	r2, #31
 8001790:	dd00      	ble.n	8001794 <__aeabi_dadd+0xd8>
 8001792:	e1a7      	b.n	8001ae4 <__aeabi_dadd+0x428>
 8001794:	2120      	movs	r1, #32
 8001796:	0018      	movs	r0, r3
 8001798:	002e      	movs	r6, r5
 800179a:	1a89      	subs	r1, r1, r2
 800179c:	408d      	lsls	r5, r1
 800179e:	4088      	lsls	r0, r1
 80017a0:	40d6      	lsrs	r6, r2
 80017a2:	40d3      	lsrs	r3, r2
 80017a4:	1e69      	subs	r1, r5, #1
 80017a6:	418d      	sbcs	r5, r1
 80017a8:	4330      	orrs	r0, r6
 80017aa:	4698      	mov	r8, r3
 80017ac:	2600      	movs	r6, #0
 80017ae:	4305      	orrs	r5, r0
 80017b0:	076b      	lsls	r3, r5, #29
 80017b2:	d009      	beq.n	80017c8 <__aeabi_dadd+0x10c>
 80017b4:	230f      	movs	r3, #15
 80017b6:	402b      	ands	r3, r5
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d005      	beq.n	80017c8 <__aeabi_dadd+0x10c>
 80017bc:	1d2b      	adds	r3, r5, #4
 80017be:	42ab      	cmp	r3, r5
 80017c0:	41ad      	sbcs	r5, r5
 80017c2:	426d      	negs	r5, r5
 80017c4:	44a8      	add	r8, r5
 80017c6:	001d      	movs	r5, r3
 80017c8:	4643      	mov	r3, r8
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	d400      	bmi.n	80017d0 <__aeabi_dadd+0x114>
 80017ce:	e094      	b.n	80018fa <__aeabi_dadd+0x23e>
 80017d0:	4b97      	ldr	r3, [pc, #604]	; (8001a30 <__aeabi_dadd+0x374>)
 80017d2:	1c72      	adds	r2, r6, #1
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d100      	bne.n	80017da <__aeabi_dadd+0x11e>
 80017d8:	e09d      	b.n	8001916 <__aeabi_dadd+0x25a>
 80017da:	4641      	mov	r1, r8
 80017dc:	4b95      	ldr	r3, [pc, #596]	; (8001a34 <__aeabi_dadd+0x378>)
 80017de:	08ed      	lsrs	r5, r5, #3
 80017e0:	4019      	ands	r1, r3
 80017e2:	000b      	movs	r3, r1
 80017e4:	0552      	lsls	r2, r2, #21
 80017e6:	0749      	lsls	r1, r1, #29
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	4329      	orrs	r1, r5
 80017ec:	0b1b      	lsrs	r3, r3, #12
 80017ee:	0d52      	lsrs	r2, r2, #21
 80017f0:	0512      	lsls	r2, r2, #20
 80017f2:	4313      	orrs	r3, r2
 80017f4:	07e4      	lsls	r4, r4, #31
 80017f6:	4323      	orrs	r3, r4
 80017f8:	0008      	movs	r0, r1
 80017fa:	0019      	movs	r1, r3
 80017fc:	bce0      	pop	{r5, r6, r7}
 80017fe:	46ba      	mov	sl, r7
 8001800:	46b1      	mov	r9, r6
 8001802:	46a8      	mov	r8, r5
 8001804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001806:	2a00      	cmp	r2, #0
 8001808:	d043      	beq.n	8001892 <__aeabi_dadd+0x1d6>
 800180a:	1b8a      	subs	r2, r1, r6
 800180c:	2e00      	cmp	r6, #0
 800180e:	d000      	beq.n	8001812 <__aeabi_dadd+0x156>
 8001810:	e12a      	b.n	8001a68 <__aeabi_dadd+0x3ac>
 8001812:	464c      	mov	r4, r9
 8001814:	431c      	orrs	r4, r3
 8001816:	d100      	bne.n	800181a <__aeabi_dadd+0x15e>
 8001818:	e1d1      	b.n	8001bbe <__aeabi_dadd+0x502>
 800181a:	1e54      	subs	r4, r2, #1
 800181c:	2a01      	cmp	r2, #1
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x166>
 8001820:	e21f      	b.n	8001c62 <__aeabi_dadd+0x5a6>
 8001822:	4d83      	ldr	r5, [pc, #524]	; (8001a30 <__aeabi_dadd+0x374>)
 8001824:	42aa      	cmp	r2, r5
 8001826:	d100      	bne.n	800182a <__aeabi_dadd+0x16e>
 8001828:	e272      	b.n	8001d10 <__aeabi_dadd+0x654>
 800182a:	0022      	movs	r2, r4
 800182c:	e123      	b.n	8001a76 <__aeabi_dadd+0x3ba>
 800182e:	2a00      	cmp	r2, #0
 8001830:	dc00      	bgt.n	8001834 <__aeabi_dadd+0x178>
 8001832:	e098      	b.n	8001966 <__aeabi_dadd+0x2aa>
 8001834:	2900      	cmp	r1, #0
 8001836:	d042      	beq.n	80018be <__aeabi_dadd+0x202>
 8001838:	497d      	ldr	r1, [pc, #500]	; (8001a30 <__aeabi_dadd+0x374>)
 800183a:	428e      	cmp	r6, r1
 800183c:	d100      	bne.n	8001840 <__aeabi_dadd+0x184>
 800183e:	e0da      	b.n	80019f6 <__aeabi_dadd+0x33a>
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	0028      	movs	r0, r5
 8001844:	0409      	lsls	r1, r1, #16
 8001846:	4308      	orrs	r0, r1
 8001848:	4684      	mov	ip, r0
 800184a:	2a38      	cmp	r2, #56	; 0x38
 800184c:	dd00      	ble.n	8001850 <__aeabi_dadd+0x194>
 800184e:	e129      	b.n	8001aa4 <__aeabi_dadd+0x3e8>
 8001850:	2a1f      	cmp	r2, #31
 8001852:	dc00      	bgt.n	8001856 <__aeabi_dadd+0x19a>
 8001854:	e187      	b.n	8001b66 <__aeabi_dadd+0x4aa>
 8001856:	0011      	movs	r1, r2
 8001858:	4665      	mov	r5, ip
 800185a:	3920      	subs	r1, #32
 800185c:	40cd      	lsrs	r5, r1
 800185e:	2a20      	cmp	r2, #32
 8001860:	d004      	beq.n	800186c <__aeabi_dadd+0x1b0>
 8001862:	2040      	movs	r0, #64	; 0x40
 8001864:	4661      	mov	r1, ip
 8001866:	1a82      	subs	r2, r0, r2
 8001868:	4091      	lsls	r1, r2
 800186a:	430f      	orrs	r7, r1
 800186c:	0039      	movs	r1, r7
 800186e:	1e4f      	subs	r7, r1, #1
 8001870:	41b9      	sbcs	r1, r7
 8001872:	430d      	orrs	r5, r1
 8001874:	e11b      	b.n	8001aae <__aeabi_dadd+0x3f2>
 8001876:	0029      	movs	r1, r5
 8001878:	4339      	orrs	r1, r7
 800187a:	d100      	bne.n	800187e <__aeabi_dadd+0x1c2>
 800187c:	e0b5      	b.n	80019ea <__aeabi_dadd+0x32e>
 800187e:	1e51      	subs	r1, r2, #1
 8001880:	2a01      	cmp	r2, #1
 8001882:	d100      	bne.n	8001886 <__aeabi_dadd+0x1ca>
 8001884:	e1ab      	b.n	8001bde <__aeabi_dadd+0x522>
 8001886:	486a      	ldr	r0, [pc, #424]	; (8001a30 <__aeabi_dadd+0x374>)
 8001888:	4282      	cmp	r2, r0
 800188a:	d100      	bne.n	800188e <__aeabi_dadd+0x1d2>
 800188c:	e1b2      	b.n	8001bf4 <__aeabi_dadd+0x538>
 800188e:	000a      	movs	r2, r1
 8001890:	e743      	b.n	800171a <__aeabi_dadd+0x5e>
 8001892:	4969      	ldr	r1, [pc, #420]	; (8001a38 <__aeabi_dadd+0x37c>)
 8001894:	1c75      	adds	r5, r6, #1
 8001896:	420d      	tst	r5, r1
 8001898:	d000      	beq.n	800189c <__aeabi_dadd+0x1e0>
 800189a:	e0cf      	b.n	8001a3c <__aeabi_dadd+0x380>
 800189c:	2e00      	cmp	r6, #0
 800189e:	d000      	beq.n	80018a2 <__aeabi_dadd+0x1e6>
 80018a0:	e193      	b.n	8001bca <__aeabi_dadd+0x50e>
 80018a2:	4649      	mov	r1, r9
 80018a4:	4319      	orrs	r1, r3
 80018a6:	d100      	bne.n	80018aa <__aeabi_dadd+0x1ee>
 80018a8:	e1d1      	b.n	8001c4e <__aeabi_dadd+0x592>
 80018aa:	4661      	mov	r1, ip
 80018ac:	4339      	orrs	r1, r7
 80018ae:	d000      	beq.n	80018b2 <__aeabi_dadd+0x1f6>
 80018b0:	e1e3      	b.n	8001c7a <__aeabi_dadd+0x5be>
 80018b2:	4649      	mov	r1, r9
 80018b4:	0758      	lsls	r0, r3, #29
 80018b6:	08c9      	lsrs	r1, r1, #3
 80018b8:	4301      	orrs	r1, r0
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	e026      	b.n	800190c <__aeabi_dadd+0x250>
 80018be:	0029      	movs	r1, r5
 80018c0:	4339      	orrs	r1, r7
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x20a>
 80018c4:	e091      	b.n	80019ea <__aeabi_dadd+0x32e>
 80018c6:	1e51      	subs	r1, r2, #1
 80018c8:	2a01      	cmp	r2, #1
 80018ca:	d005      	beq.n	80018d8 <__aeabi_dadd+0x21c>
 80018cc:	4858      	ldr	r0, [pc, #352]	; (8001a30 <__aeabi_dadd+0x374>)
 80018ce:	4282      	cmp	r2, r0
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x218>
 80018d2:	e18f      	b.n	8001bf4 <__aeabi_dadd+0x538>
 80018d4:	000a      	movs	r2, r1
 80018d6:	e7b8      	b.n	800184a <__aeabi_dadd+0x18e>
 80018d8:	003d      	movs	r5, r7
 80018da:	444d      	add	r5, r9
 80018dc:	454d      	cmp	r5, r9
 80018de:	4189      	sbcs	r1, r1
 80018e0:	4463      	add	r3, ip
 80018e2:	4698      	mov	r8, r3
 80018e4:	4249      	negs	r1, r1
 80018e6:	4488      	add	r8, r1
 80018e8:	4643      	mov	r3, r8
 80018ea:	2602      	movs	r6, #2
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	d500      	bpl.n	80018f2 <__aeabi_dadd+0x236>
 80018f0:	e0eb      	b.n	8001aca <__aeabi_dadd+0x40e>
 80018f2:	3e01      	subs	r6, #1
 80018f4:	076b      	lsls	r3, r5, #29
 80018f6:	d000      	beq.n	80018fa <__aeabi_dadd+0x23e>
 80018f8:	e75c      	b.n	80017b4 <__aeabi_dadd+0xf8>
 80018fa:	4643      	mov	r3, r8
 80018fc:	08e9      	lsrs	r1, r5, #3
 80018fe:	075a      	lsls	r2, r3, #29
 8001900:	4311      	orrs	r1, r2
 8001902:	0032      	movs	r2, r6
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	484a      	ldr	r0, [pc, #296]	; (8001a30 <__aeabi_dadd+0x374>)
 8001908:	4282      	cmp	r2, r0
 800190a:	d021      	beq.n	8001950 <__aeabi_dadd+0x294>
 800190c:	031b      	lsls	r3, r3, #12
 800190e:	0552      	lsls	r2, r2, #21
 8001910:	0b1b      	lsrs	r3, r3, #12
 8001912:	0d52      	lsrs	r2, r2, #21
 8001914:	e76c      	b.n	80017f0 <__aeabi_dadd+0x134>
 8001916:	2300      	movs	r3, #0
 8001918:	2100      	movs	r1, #0
 800191a:	e769      	b.n	80017f0 <__aeabi_dadd+0x134>
 800191c:	002a      	movs	r2, r5
 800191e:	433a      	orrs	r2, r7
 8001920:	d069      	beq.n	80019f6 <__aeabi_dadd+0x33a>
 8001922:	464a      	mov	r2, r9
 8001924:	0758      	lsls	r0, r3, #29
 8001926:	08d1      	lsrs	r1, r2, #3
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	031b      	lsls	r3, r3, #12
 800192e:	4308      	orrs	r0, r1
 8001930:	421a      	tst	r2, r3
 8001932:	d007      	beq.n	8001944 <__aeabi_dadd+0x288>
 8001934:	0029      	movs	r1, r5
 8001936:	08ed      	lsrs	r5, r5, #3
 8001938:	421d      	tst	r5, r3
 800193a:	d103      	bne.n	8001944 <__aeabi_dadd+0x288>
 800193c:	002a      	movs	r2, r5
 800193e:	08ff      	lsrs	r7, r7, #3
 8001940:	0748      	lsls	r0, r1, #29
 8001942:	4338      	orrs	r0, r7
 8001944:	0f43      	lsrs	r3, r0, #29
 8001946:	00c1      	lsls	r1, r0, #3
 8001948:	075b      	lsls	r3, r3, #29
 800194a:	08c9      	lsrs	r1, r1, #3
 800194c:	4319      	orrs	r1, r3
 800194e:	0013      	movs	r3, r2
 8001950:	000a      	movs	r2, r1
 8001952:	431a      	orrs	r2, r3
 8001954:	d100      	bne.n	8001958 <__aeabi_dadd+0x29c>
 8001956:	e213      	b.n	8001d80 <__aeabi_dadd+0x6c4>
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	0312      	lsls	r2, r2, #12
 800195c:	4313      	orrs	r3, r2
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	4a33      	ldr	r2, [pc, #204]	; (8001a30 <__aeabi_dadd+0x374>)
 8001962:	0b1b      	lsrs	r3, r3, #12
 8001964:	e744      	b.n	80017f0 <__aeabi_dadd+0x134>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d04b      	beq.n	8001a02 <__aeabi_dadd+0x346>
 800196a:	1b8a      	subs	r2, r1, r6
 800196c:	2e00      	cmp	r6, #0
 800196e:	d100      	bne.n	8001972 <__aeabi_dadd+0x2b6>
 8001970:	e0e7      	b.n	8001b42 <__aeabi_dadd+0x486>
 8001972:	482f      	ldr	r0, [pc, #188]	; (8001a30 <__aeabi_dadd+0x374>)
 8001974:	4281      	cmp	r1, r0
 8001976:	d100      	bne.n	800197a <__aeabi_dadd+0x2be>
 8001978:	e195      	b.n	8001ca6 <__aeabi_dadd+0x5ea>
 800197a:	2080      	movs	r0, #128	; 0x80
 800197c:	0400      	lsls	r0, r0, #16
 800197e:	4303      	orrs	r3, r0
 8001980:	2a38      	cmp	r2, #56	; 0x38
 8001982:	dd00      	ble.n	8001986 <__aeabi_dadd+0x2ca>
 8001984:	e143      	b.n	8001c0e <__aeabi_dadd+0x552>
 8001986:	2a1f      	cmp	r2, #31
 8001988:	dd00      	ble.n	800198c <__aeabi_dadd+0x2d0>
 800198a:	e1db      	b.n	8001d44 <__aeabi_dadd+0x688>
 800198c:	2020      	movs	r0, #32
 800198e:	001d      	movs	r5, r3
 8001990:	464e      	mov	r6, r9
 8001992:	1a80      	subs	r0, r0, r2
 8001994:	4085      	lsls	r5, r0
 8001996:	40d6      	lsrs	r6, r2
 8001998:	4335      	orrs	r5, r6
 800199a:	464e      	mov	r6, r9
 800199c:	4086      	lsls	r6, r0
 800199e:	0030      	movs	r0, r6
 80019a0:	40d3      	lsrs	r3, r2
 80019a2:	1e46      	subs	r6, r0, #1
 80019a4:	41b0      	sbcs	r0, r6
 80019a6:	449c      	add	ip, r3
 80019a8:	4305      	orrs	r5, r0
 80019aa:	19ed      	adds	r5, r5, r7
 80019ac:	42bd      	cmp	r5, r7
 80019ae:	419b      	sbcs	r3, r3
 80019b0:	425b      	negs	r3, r3
 80019b2:	4463      	add	r3, ip
 80019b4:	4698      	mov	r8, r3
 80019b6:	000e      	movs	r6, r1
 80019b8:	e07f      	b.n	8001aba <__aeabi_dadd+0x3fe>
 80019ba:	4a1e      	ldr	r2, [pc, #120]	; (8001a34 <__aeabi_dadd+0x378>)
 80019bc:	1a76      	subs	r6, r6, r1
 80019be:	4013      	ands	r3, r2
 80019c0:	4698      	mov	r8, r3
 80019c2:	e6f5      	b.n	80017b0 <__aeabi_dadd+0xf4>
 80019c4:	0028      	movs	r0, r5
 80019c6:	f001 fd61 	bl	800348c <__clzsi2>
 80019ca:	0001      	movs	r1, r0
 80019cc:	3118      	adds	r1, #24
 80019ce:	291f      	cmp	r1, #31
 80019d0:	dc00      	bgt.n	80019d4 <__aeabi_dadd+0x318>
 80019d2:	e6cf      	b.n	8001774 <__aeabi_dadd+0xb8>
 80019d4:	002b      	movs	r3, r5
 80019d6:	3808      	subs	r0, #8
 80019d8:	4083      	lsls	r3, r0
 80019da:	2500      	movs	r5, #0
 80019dc:	e6d2      	b.n	8001784 <__aeabi_dadd+0xc8>
 80019de:	4662      	mov	r2, ip
 80019e0:	433a      	orrs	r2, r7
 80019e2:	0011      	movs	r1, r2
 80019e4:	1e4f      	subs	r7, r1, #1
 80019e6:	41b9      	sbcs	r1, r7
 80019e8:	e6ac      	b.n	8001744 <__aeabi_dadd+0x88>
 80019ea:	4649      	mov	r1, r9
 80019ec:	0758      	lsls	r0, r3, #29
 80019ee:	08c9      	lsrs	r1, r1, #3
 80019f0:	4301      	orrs	r1, r0
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	e787      	b.n	8001906 <__aeabi_dadd+0x24a>
 80019f6:	4649      	mov	r1, r9
 80019f8:	075a      	lsls	r2, r3, #29
 80019fa:	08c9      	lsrs	r1, r1, #3
 80019fc:	4311      	orrs	r1, r2
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	e7a6      	b.n	8001950 <__aeabi_dadd+0x294>
 8001a02:	490d      	ldr	r1, [pc, #52]	; (8001a38 <__aeabi_dadd+0x37c>)
 8001a04:	1c70      	adds	r0, r6, #1
 8001a06:	4208      	tst	r0, r1
 8001a08:	d000      	beq.n	8001a0c <__aeabi_dadd+0x350>
 8001a0a:	e0bb      	b.n	8001b84 <__aeabi_dadd+0x4c8>
 8001a0c:	2e00      	cmp	r6, #0
 8001a0e:	d000      	beq.n	8001a12 <__aeabi_dadd+0x356>
 8001a10:	e114      	b.n	8001c3c <__aeabi_dadd+0x580>
 8001a12:	4649      	mov	r1, r9
 8001a14:	4319      	orrs	r1, r3
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dadd+0x35e>
 8001a18:	e175      	b.n	8001d06 <__aeabi_dadd+0x64a>
 8001a1a:	0029      	movs	r1, r5
 8001a1c:	4339      	orrs	r1, r7
 8001a1e:	d000      	beq.n	8001a22 <__aeabi_dadd+0x366>
 8001a20:	e17e      	b.n	8001d20 <__aeabi_dadd+0x664>
 8001a22:	4649      	mov	r1, r9
 8001a24:	0758      	lsls	r0, r3, #29
 8001a26:	08c9      	lsrs	r1, r1, #3
 8001a28:	4301      	orrs	r1, r0
 8001a2a:	08db      	lsrs	r3, r3, #3
 8001a2c:	e76e      	b.n	800190c <__aeabi_dadd+0x250>
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	000007ff 	.word	0x000007ff
 8001a34:	ff7fffff 	.word	0xff7fffff
 8001a38:	000007fe 	.word	0x000007fe
 8001a3c:	4649      	mov	r1, r9
 8001a3e:	1bcd      	subs	r5, r1, r7
 8001a40:	4661      	mov	r1, ip
 8001a42:	1a58      	subs	r0, r3, r1
 8001a44:	45a9      	cmp	r9, r5
 8001a46:	4189      	sbcs	r1, r1
 8001a48:	4249      	negs	r1, r1
 8001a4a:	4688      	mov	r8, r1
 8001a4c:	0001      	movs	r1, r0
 8001a4e:	4640      	mov	r0, r8
 8001a50:	1a09      	subs	r1, r1, r0
 8001a52:	4688      	mov	r8, r1
 8001a54:	0209      	lsls	r1, r1, #8
 8001a56:	d500      	bpl.n	8001a5a <__aeabi_dadd+0x39e>
 8001a58:	e0a6      	b.n	8001ba8 <__aeabi_dadd+0x4ec>
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	4329      	orrs	r1, r5
 8001a5e:	d000      	beq.n	8001a62 <__aeabi_dadd+0x3a6>
 8001a60:	e67f      	b.n	8001762 <__aeabi_dadd+0xa6>
 8001a62:	2300      	movs	r3, #0
 8001a64:	2400      	movs	r4, #0
 8001a66:	e751      	b.n	800190c <__aeabi_dadd+0x250>
 8001a68:	4cc7      	ldr	r4, [pc, #796]	; (8001d88 <__aeabi_dadd+0x6cc>)
 8001a6a:	42a1      	cmp	r1, r4
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dadd+0x3b4>
 8001a6e:	e0c7      	b.n	8001c00 <__aeabi_dadd+0x544>
 8001a70:	2480      	movs	r4, #128	; 0x80
 8001a72:	0424      	lsls	r4, r4, #16
 8001a74:	4323      	orrs	r3, r4
 8001a76:	2a38      	cmp	r2, #56	; 0x38
 8001a78:	dc54      	bgt.n	8001b24 <__aeabi_dadd+0x468>
 8001a7a:	2a1f      	cmp	r2, #31
 8001a7c:	dd00      	ble.n	8001a80 <__aeabi_dadd+0x3c4>
 8001a7e:	e0cc      	b.n	8001c1a <__aeabi_dadd+0x55e>
 8001a80:	2420      	movs	r4, #32
 8001a82:	4648      	mov	r0, r9
 8001a84:	1aa4      	subs	r4, r4, r2
 8001a86:	001d      	movs	r5, r3
 8001a88:	464e      	mov	r6, r9
 8001a8a:	40a0      	lsls	r0, r4
 8001a8c:	40d6      	lsrs	r6, r2
 8001a8e:	40a5      	lsls	r5, r4
 8001a90:	0004      	movs	r4, r0
 8001a92:	40d3      	lsrs	r3, r2
 8001a94:	4662      	mov	r2, ip
 8001a96:	4335      	orrs	r5, r6
 8001a98:	1e66      	subs	r6, r4, #1
 8001a9a:	41b4      	sbcs	r4, r6
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	469c      	mov	ip, r3
 8001aa0:	4325      	orrs	r5, r4
 8001aa2:	e044      	b.n	8001b2e <__aeabi_dadd+0x472>
 8001aa4:	4662      	mov	r2, ip
 8001aa6:	433a      	orrs	r2, r7
 8001aa8:	0015      	movs	r5, r2
 8001aaa:	1e6f      	subs	r7, r5, #1
 8001aac:	41bd      	sbcs	r5, r7
 8001aae:	444d      	add	r5, r9
 8001ab0:	454d      	cmp	r5, r9
 8001ab2:	4189      	sbcs	r1, r1
 8001ab4:	4249      	negs	r1, r1
 8001ab6:	4688      	mov	r8, r1
 8001ab8:	4498      	add	r8, r3
 8001aba:	4643      	mov	r3, r8
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	d400      	bmi.n	8001ac2 <__aeabi_dadd+0x406>
 8001ac0:	e718      	b.n	80018f4 <__aeabi_dadd+0x238>
 8001ac2:	4bb1      	ldr	r3, [pc, #708]	; (8001d88 <__aeabi_dadd+0x6cc>)
 8001ac4:	3601      	adds	r6, #1
 8001ac6:	429e      	cmp	r6, r3
 8001ac8:	d049      	beq.n	8001b5e <__aeabi_dadd+0x4a2>
 8001aca:	4642      	mov	r2, r8
 8001acc:	4baf      	ldr	r3, [pc, #700]	; (8001d8c <__aeabi_dadd+0x6d0>)
 8001ace:	2101      	movs	r1, #1
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	0013      	movs	r3, r2
 8001ad4:	086a      	lsrs	r2, r5, #1
 8001ad6:	400d      	ands	r5, r1
 8001ad8:	4315      	orrs	r5, r2
 8001ada:	07d9      	lsls	r1, r3, #31
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	4698      	mov	r8, r3
 8001ae0:	430d      	orrs	r5, r1
 8001ae2:	e665      	b.n	80017b0 <__aeabi_dadd+0xf4>
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	3e1f      	subs	r6, #31
 8001ae8:	40f0      	lsrs	r0, r6
 8001aea:	2a20      	cmp	r2, #32
 8001aec:	d003      	beq.n	8001af6 <__aeabi_dadd+0x43a>
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	1a8a      	subs	r2, r1, r2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	431d      	orrs	r5, r3
 8001af6:	1e69      	subs	r1, r5, #1
 8001af8:	418d      	sbcs	r5, r1
 8001afa:	2300      	movs	r3, #0
 8001afc:	2600      	movs	r6, #0
 8001afe:	4698      	mov	r8, r3
 8001b00:	4305      	orrs	r5, r0
 8001b02:	e6f7      	b.n	80018f4 <__aeabi_dadd+0x238>
 8001b04:	0011      	movs	r1, r2
 8001b06:	4665      	mov	r5, ip
 8001b08:	3920      	subs	r1, #32
 8001b0a:	40cd      	lsrs	r5, r1
 8001b0c:	2a20      	cmp	r2, #32
 8001b0e:	d004      	beq.n	8001b1a <__aeabi_dadd+0x45e>
 8001b10:	2040      	movs	r0, #64	; 0x40
 8001b12:	4661      	mov	r1, ip
 8001b14:	1a82      	subs	r2, r0, r2
 8001b16:	4091      	lsls	r1, r2
 8001b18:	430f      	orrs	r7, r1
 8001b1a:	0039      	movs	r1, r7
 8001b1c:	1e4f      	subs	r7, r1, #1
 8001b1e:	41b9      	sbcs	r1, r7
 8001b20:	4329      	orrs	r1, r5
 8001b22:	e60f      	b.n	8001744 <__aeabi_dadd+0x88>
 8001b24:	464a      	mov	r2, r9
 8001b26:	4313      	orrs	r3, r2
 8001b28:	001d      	movs	r5, r3
 8001b2a:	1e6b      	subs	r3, r5, #1
 8001b2c:	419d      	sbcs	r5, r3
 8001b2e:	1b7d      	subs	r5, r7, r5
 8001b30:	42af      	cmp	r7, r5
 8001b32:	419b      	sbcs	r3, r3
 8001b34:	4662      	mov	r2, ip
 8001b36:	425b      	negs	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	4698      	mov	r8, r3
 8001b3c:	4654      	mov	r4, sl
 8001b3e:	000e      	movs	r6, r1
 8001b40:	e607      	b.n	8001752 <__aeabi_dadd+0x96>
 8001b42:	4648      	mov	r0, r9
 8001b44:	4318      	orrs	r0, r3
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dadd+0x48e>
 8001b48:	e0b3      	b.n	8001cb2 <__aeabi_dadd+0x5f6>
 8001b4a:	1e50      	subs	r0, r2, #1
 8001b4c:	2a01      	cmp	r2, #1
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_dadd+0x496>
 8001b50:	e10d      	b.n	8001d6e <__aeabi_dadd+0x6b2>
 8001b52:	4d8d      	ldr	r5, [pc, #564]	; (8001d88 <__aeabi_dadd+0x6cc>)
 8001b54:	42aa      	cmp	r2, r5
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dadd+0x49e>
 8001b58:	e0a5      	b.n	8001ca6 <__aeabi_dadd+0x5ea>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	e710      	b.n	8001980 <__aeabi_dadd+0x2c4>
 8001b5e:	0032      	movs	r2, r6
 8001b60:	2300      	movs	r3, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	e644      	b.n	80017f0 <__aeabi_dadd+0x134>
 8001b66:	2120      	movs	r1, #32
 8001b68:	0038      	movs	r0, r7
 8001b6a:	1a89      	subs	r1, r1, r2
 8001b6c:	4665      	mov	r5, ip
 8001b6e:	408f      	lsls	r7, r1
 8001b70:	408d      	lsls	r5, r1
 8001b72:	40d0      	lsrs	r0, r2
 8001b74:	1e79      	subs	r1, r7, #1
 8001b76:	418f      	sbcs	r7, r1
 8001b78:	4305      	orrs	r5, r0
 8001b7a:	433d      	orrs	r5, r7
 8001b7c:	4667      	mov	r7, ip
 8001b7e:	40d7      	lsrs	r7, r2
 8001b80:	19db      	adds	r3, r3, r7
 8001b82:	e794      	b.n	8001aae <__aeabi_dadd+0x3f2>
 8001b84:	4a80      	ldr	r2, [pc, #512]	; (8001d88 <__aeabi_dadd+0x6cc>)
 8001b86:	4290      	cmp	r0, r2
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dadd+0x4d0>
 8001b8a:	e0ec      	b.n	8001d66 <__aeabi_dadd+0x6aa>
 8001b8c:	0039      	movs	r1, r7
 8001b8e:	4449      	add	r1, r9
 8001b90:	4549      	cmp	r1, r9
 8001b92:	4192      	sbcs	r2, r2
 8001b94:	4463      	add	r3, ip
 8001b96:	4252      	negs	r2, r2
 8001b98:	189b      	adds	r3, r3, r2
 8001b9a:	07dd      	lsls	r5, r3, #31
 8001b9c:	0849      	lsrs	r1, r1, #1
 8001b9e:	085b      	lsrs	r3, r3, #1
 8001ba0:	4698      	mov	r8, r3
 8001ba2:	0006      	movs	r6, r0
 8001ba4:	430d      	orrs	r5, r1
 8001ba6:	e6a5      	b.n	80018f4 <__aeabi_dadd+0x238>
 8001ba8:	464a      	mov	r2, r9
 8001baa:	1abd      	subs	r5, r7, r2
 8001bac:	42af      	cmp	r7, r5
 8001bae:	4189      	sbcs	r1, r1
 8001bb0:	4662      	mov	r2, ip
 8001bb2:	4249      	negs	r1, r1
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	1a5b      	subs	r3, r3, r1
 8001bb8:	4698      	mov	r8, r3
 8001bba:	4654      	mov	r4, sl
 8001bbc:	e5d1      	b.n	8001762 <__aeabi_dadd+0xa6>
 8001bbe:	076c      	lsls	r4, r5, #29
 8001bc0:	08f9      	lsrs	r1, r7, #3
 8001bc2:	4321      	orrs	r1, r4
 8001bc4:	08eb      	lsrs	r3, r5, #3
 8001bc6:	0004      	movs	r4, r0
 8001bc8:	e69d      	b.n	8001906 <__aeabi_dadd+0x24a>
 8001bca:	464a      	mov	r2, r9
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	d175      	bne.n	8001cbc <__aeabi_dadd+0x600>
 8001bd0:	4661      	mov	r1, ip
 8001bd2:	4339      	orrs	r1, r7
 8001bd4:	d114      	bne.n	8001c00 <__aeabi_dadd+0x544>
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	2400      	movs	r4, #0
 8001bda:	031b      	lsls	r3, r3, #12
 8001bdc:	e6bc      	b.n	8001958 <__aeabi_dadd+0x29c>
 8001bde:	464a      	mov	r2, r9
 8001be0:	1bd5      	subs	r5, r2, r7
 8001be2:	45a9      	cmp	r9, r5
 8001be4:	4189      	sbcs	r1, r1
 8001be6:	4662      	mov	r2, ip
 8001be8:	4249      	negs	r1, r1
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	1a5b      	subs	r3, r3, r1
 8001bee:	4698      	mov	r8, r3
 8001bf0:	2601      	movs	r6, #1
 8001bf2:	e5ae      	b.n	8001752 <__aeabi_dadd+0x96>
 8001bf4:	464a      	mov	r2, r9
 8001bf6:	08d1      	lsrs	r1, r2, #3
 8001bf8:	075a      	lsls	r2, r3, #29
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	e6a7      	b.n	8001950 <__aeabi_dadd+0x294>
 8001c00:	4663      	mov	r3, ip
 8001c02:	08f9      	lsrs	r1, r7, #3
 8001c04:	075a      	lsls	r2, r3, #29
 8001c06:	4654      	mov	r4, sl
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	08db      	lsrs	r3, r3, #3
 8001c0c:	e6a0      	b.n	8001950 <__aeabi_dadd+0x294>
 8001c0e:	464a      	mov	r2, r9
 8001c10:	4313      	orrs	r3, r2
 8001c12:	001d      	movs	r5, r3
 8001c14:	1e6b      	subs	r3, r5, #1
 8001c16:	419d      	sbcs	r5, r3
 8001c18:	e6c7      	b.n	80019aa <__aeabi_dadd+0x2ee>
 8001c1a:	0014      	movs	r4, r2
 8001c1c:	001e      	movs	r6, r3
 8001c1e:	3c20      	subs	r4, #32
 8001c20:	40e6      	lsrs	r6, r4
 8001c22:	2a20      	cmp	r2, #32
 8001c24:	d005      	beq.n	8001c32 <__aeabi_dadd+0x576>
 8001c26:	2440      	movs	r4, #64	; 0x40
 8001c28:	1aa2      	subs	r2, r4, r2
 8001c2a:	4093      	lsls	r3, r2
 8001c2c:	464a      	mov	r2, r9
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	4691      	mov	r9, r2
 8001c32:	464d      	mov	r5, r9
 8001c34:	1e6b      	subs	r3, r5, #1
 8001c36:	419d      	sbcs	r5, r3
 8001c38:	4335      	orrs	r5, r6
 8001c3a:	e778      	b.n	8001b2e <__aeabi_dadd+0x472>
 8001c3c:	464a      	mov	r2, r9
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	d000      	beq.n	8001c44 <__aeabi_dadd+0x588>
 8001c42:	e66b      	b.n	800191c <__aeabi_dadd+0x260>
 8001c44:	076b      	lsls	r3, r5, #29
 8001c46:	08f9      	lsrs	r1, r7, #3
 8001c48:	4319      	orrs	r1, r3
 8001c4a:	08eb      	lsrs	r3, r5, #3
 8001c4c:	e680      	b.n	8001950 <__aeabi_dadd+0x294>
 8001c4e:	4661      	mov	r1, ip
 8001c50:	4339      	orrs	r1, r7
 8001c52:	d054      	beq.n	8001cfe <__aeabi_dadd+0x642>
 8001c54:	4663      	mov	r3, ip
 8001c56:	08f9      	lsrs	r1, r7, #3
 8001c58:	075c      	lsls	r4, r3, #29
 8001c5a:	4321      	orrs	r1, r4
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	0004      	movs	r4, r0
 8001c60:	e654      	b.n	800190c <__aeabi_dadd+0x250>
 8001c62:	464a      	mov	r2, r9
 8001c64:	1abd      	subs	r5, r7, r2
 8001c66:	42af      	cmp	r7, r5
 8001c68:	4189      	sbcs	r1, r1
 8001c6a:	4662      	mov	r2, ip
 8001c6c:	4249      	negs	r1, r1
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	1a5b      	subs	r3, r3, r1
 8001c72:	4698      	mov	r8, r3
 8001c74:	0004      	movs	r4, r0
 8001c76:	2601      	movs	r6, #1
 8001c78:	e56b      	b.n	8001752 <__aeabi_dadd+0x96>
 8001c7a:	464a      	mov	r2, r9
 8001c7c:	1bd5      	subs	r5, r2, r7
 8001c7e:	45a9      	cmp	r9, r5
 8001c80:	4189      	sbcs	r1, r1
 8001c82:	4662      	mov	r2, ip
 8001c84:	4249      	negs	r1, r1
 8001c86:	1a9a      	subs	r2, r3, r2
 8001c88:	1a52      	subs	r2, r2, r1
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	0212      	lsls	r2, r2, #8
 8001c8e:	d532      	bpl.n	8001cf6 <__aeabi_dadd+0x63a>
 8001c90:	464a      	mov	r2, r9
 8001c92:	1abd      	subs	r5, r7, r2
 8001c94:	42af      	cmp	r7, r5
 8001c96:	4189      	sbcs	r1, r1
 8001c98:	4662      	mov	r2, ip
 8001c9a:	4249      	negs	r1, r1
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	1a5b      	subs	r3, r3, r1
 8001ca0:	4698      	mov	r8, r3
 8001ca2:	0004      	movs	r4, r0
 8001ca4:	e584      	b.n	80017b0 <__aeabi_dadd+0xf4>
 8001ca6:	4663      	mov	r3, ip
 8001ca8:	08f9      	lsrs	r1, r7, #3
 8001caa:	075a      	lsls	r2, r3, #29
 8001cac:	4311      	orrs	r1, r2
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	e64e      	b.n	8001950 <__aeabi_dadd+0x294>
 8001cb2:	08f9      	lsrs	r1, r7, #3
 8001cb4:	0768      	lsls	r0, r5, #29
 8001cb6:	4301      	orrs	r1, r0
 8001cb8:	08eb      	lsrs	r3, r5, #3
 8001cba:	e624      	b.n	8001906 <__aeabi_dadd+0x24a>
 8001cbc:	4662      	mov	r2, ip
 8001cbe:	433a      	orrs	r2, r7
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dadd+0x608>
 8001cc2:	e698      	b.n	80019f6 <__aeabi_dadd+0x33a>
 8001cc4:	464a      	mov	r2, r9
 8001cc6:	08d1      	lsrs	r1, r2, #3
 8001cc8:	075a      	lsls	r2, r3, #29
 8001cca:	4311      	orrs	r1, r2
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	031b      	lsls	r3, r3, #12
 8001cd2:	421a      	tst	r2, r3
 8001cd4:	d008      	beq.n	8001ce8 <__aeabi_dadd+0x62c>
 8001cd6:	4660      	mov	r0, ip
 8001cd8:	08c5      	lsrs	r5, r0, #3
 8001cda:	421d      	tst	r5, r3
 8001cdc:	d104      	bne.n	8001ce8 <__aeabi_dadd+0x62c>
 8001cde:	4654      	mov	r4, sl
 8001ce0:	002a      	movs	r2, r5
 8001ce2:	08f9      	lsrs	r1, r7, #3
 8001ce4:	0743      	lsls	r3, r0, #29
 8001ce6:	4319      	orrs	r1, r3
 8001ce8:	0f4b      	lsrs	r3, r1, #29
 8001cea:	00c9      	lsls	r1, r1, #3
 8001cec:	075b      	lsls	r3, r3, #29
 8001cee:	08c9      	lsrs	r1, r1, #3
 8001cf0:	4319      	orrs	r1, r3
 8001cf2:	0013      	movs	r3, r2
 8001cf4:	e62c      	b.n	8001950 <__aeabi_dadd+0x294>
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	4329      	orrs	r1, r5
 8001cfa:	d000      	beq.n	8001cfe <__aeabi_dadd+0x642>
 8001cfc:	e5fa      	b.n	80018f4 <__aeabi_dadd+0x238>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	000a      	movs	r2, r1
 8001d02:	2400      	movs	r4, #0
 8001d04:	e602      	b.n	800190c <__aeabi_dadd+0x250>
 8001d06:	076b      	lsls	r3, r5, #29
 8001d08:	08f9      	lsrs	r1, r7, #3
 8001d0a:	4319      	orrs	r1, r3
 8001d0c:	08eb      	lsrs	r3, r5, #3
 8001d0e:	e5fd      	b.n	800190c <__aeabi_dadd+0x250>
 8001d10:	4663      	mov	r3, ip
 8001d12:	08f9      	lsrs	r1, r7, #3
 8001d14:	075b      	lsls	r3, r3, #29
 8001d16:	4319      	orrs	r1, r3
 8001d18:	4663      	mov	r3, ip
 8001d1a:	0004      	movs	r4, r0
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	e617      	b.n	8001950 <__aeabi_dadd+0x294>
 8001d20:	003d      	movs	r5, r7
 8001d22:	444d      	add	r5, r9
 8001d24:	4463      	add	r3, ip
 8001d26:	454d      	cmp	r5, r9
 8001d28:	4189      	sbcs	r1, r1
 8001d2a:	4698      	mov	r8, r3
 8001d2c:	4249      	negs	r1, r1
 8001d2e:	4488      	add	r8, r1
 8001d30:	4643      	mov	r3, r8
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	d400      	bmi.n	8001d38 <__aeabi_dadd+0x67c>
 8001d36:	e5dd      	b.n	80018f4 <__aeabi_dadd+0x238>
 8001d38:	4642      	mov	r2, r8
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <__aeabi_dadd+0x6d0>)
 8001d3c:	2601      	movs	r6, #1
 8001d3e:	401a      	ands	r2, r3
 8001d40:	4690      	mov	r8, r2
 8001d42:	e5d7      	b.n	80018f4 <__aeabi_dadd+0x238>
 8001d44:	0010      	movs	r0, r2
 8001d46:	001e      	movs	r6, r3
 8001d48:	3820      	subs	r0, #32
 8001d4a:	40c6      	lsrs	r6, r0
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dadd+0x6a0>
 8001d50:	2040      	movs	r0, #64	; 0x40
 8001d52:	1a82      	subs	r2, r0, r2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	464a      	mov	r2, r9
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	4691      	mov	r9, r2
 8001d5c:	464d      	mov	r5, r9
 8001d5e:	1e6b      	subs	r3, r5, #1
 8001d60:	419d      	sbcs	r5, r3
 8001d62:	4335      	orrs	r5, r6
 8001d64:	e621      	b.n	80019aa <__aeabi_dadd+0x2ee>
 8001d66:	0002      	movs	r2, r0
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	e540      	b.n	80017f0 <__aeabi_dadd+0x134>
 8001d6e:	464a      	mov	r2, r9
 8001d70:	19d5      	adds	r5, r2, r7
 8001d72:	42bd      	cmp	r5, r7
 8001d74:	4189      	sbcs	r1, r1
 8001d76:	4463      	add	r3, ip
 8001d78:	4698      	mov	r8, r3
 8001d7a:	4249      	negs	r1, r1
 8001d7c:	4488      	add	r8, r1
 8001d7e:	e5b3      	b.n	80018e8 <__aeabi_dadd+0x22c>
 8001d80:	2100      	movs	r1, #0
 8001d82:	4a01      	ldr	r2, [pc, #4]	; (8001d88 <__aeabi_dadd+0x6cc>)
 8001d84:	000b      	movs	r3, r1
 8001d86:	e533      	b.n	80017f0 <__aeabi_dadd+0x134>
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	ff7fffff 	.word	0xff7fffff

08001d90 <__aeabi_ddiv>:
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d92:	4657      	mov	r7, sl
 8001d94:	464e      	mov	r6, r9
 8001d96:	4645      	mov	r5, r8
 8001d98:	46de      	mov	lr, fp
 8001d9a:	b5e0      	push	{r5, r6, r7, lr}
 8001d9c:	4681      	mov	r9, r0
 8001d9e:	0005      	movs	r5, r0
 8001da0:	030c      	lsls	r4, r1, #12
 8001da2:	0048      	lsls	r0, r1, #1
 8001da4:	4692      	mov	sl, r2
 8001da6:	001f      	movs	r7, r3
 8001da8:	b085      	sub	sp, #20
 8001daa:	0b24      	lsrs	r4, r4, #12
 8001dac:	0d40      	lsrs	r0, r0, #21
 8001dae:	0fce      	lsrs	r6, r1, #31
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d059      	beq.n	8001e68 <__aeabi_ddiv+0xd8>
 8001db4:	4b87      	ldr	r3, [pc, #540]	; (8001fd4 <__aeabi_ddiv+0x244>)
 8001db6:	4298      	cmp	r0, r3
 8001db8:	d100      	bne.n	8001dbc <__aeabi_ddiv+0x2c>
 8001dba:	e098      	b.n	8001eee <__aeabi_ddiv+0x15e>
 8001dbc:	0f6b      	lsrs	r3, r5, #29
 8001dbe:	00e4      	lsls	r4, r4, #3
 8001dc0:	431c      	orrs	r4, r3
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	041b      	lsls	r3, r3, #16
 8001dc6:	4323      	orrs	r3, r4
 8001dc8:	4698      	mov	r8, r3
 8001dca:	4b83      	ldr	r3, [pc, #524]	; (8001fd8 <__aeabi_ddiv+0x248>)
 8001dcc:	00ed      	lsls	r5, r5, #3
 8001dce:	469b      	mov	fp, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	4699      	mov	r9, r3
 8001dd4:	4483      	add	fp, r0
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	033c      	lsls	r4, r7, #12
 8001dda:	007b      	lsls	r3, r7, #1
 8001ddc:	4650      	mov	r0, sl
 8001dde:	0b24      	lsrs	r4, r4, #12
 8001de0:	0d5b      	lsrs	r3, r3, #21
 8001de2:	0fff      	lsrs	r7, r7, #31
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d067      	beq.n	8001eb8 <__aeabi_ddiv+0x128>
 8001de8:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <__aeabi_ddiv+0x244>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d018      	beq.n	8001e20 <__aeabi_ddiv+0x90>
 8001dee:	497a      	ldr	r1, [pc, #488]	; (8001fd8 <__aeabi_ddiv+0x248>)
 8001df0:	0f42      	lsrs	r2, r0, #29
 8001df2:	468c      	mov	ip, r1
 8001df4:	00e4      	lsls	r4, r4, #3
 8001df6:	4659      	mov	r1, fp
 8001df8:	4314      	orrs	r4, r2
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	4463      	add	r3, ip
 8001dfe:	0412      	lsls	r2, r2, #16
 8001e00:	1acb      	subs	r3, r1, r3
 8001e02:	4314      	orrs	r4, r2
 8001e04:	469b      	mov	fp, r3
 8001e06:	00c2      	lsls	r2, r0, #3
 8001e08:	2000      	movs	r0, #0
 8001e0a:	0033      	movs	r3, r6
 8001e0c:	407b      	eors	r3, r7
 8001e0e:	469a      	mov	sl, r3
 8001e10:	464b      	mov	r3, r9
 8001e12:	2b0f      	cmp	r3, #15
 8001e14:	d900      	bls.n	8001e18 <__aeabi_ddiv+0x88>
 8001e16:	e0ef      	b.n	8001ff8 <__aeabi_ddiv+0x268>
 8001e18:	4970      	ldr	r1, [pc, #448]	; (8001fdc <__aeabi_ddiv+0x24c>)
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	58cb      	ldr	r3, [r1, r3]
 8001e1e:	469f      	mov	pc, r3
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <__aeabi_ddiv+0x250>)
 8001e22:	4652      	mov	r2, sl
 8001e24:	469c      	mov	ip, r3
 8001e26:	4322      	orrs	r2, r4
 8001e28:	44e3      	add	fp, ip
 8001e2a:	2a00      	cmp	r2, #0
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_ddiv+0xa0>
 8001e2e:	e095      	b.n	8001f5c <__aeabi_ddiv+0x1cc>
 8001e30:	4649      	mov	r1, r9
 8001e32:	2302      	movs	r3, #2
 8001e34:	4319      	orrs	r1, r3
 8001e36:	4689      	mov	r9, r1
 8001e38:	2400      	movs	r4, #0
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	e7e5      	b.n	8001e0a <__aeabi_ddiv+0x7a>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2400      	movs	r4, #0
 8001e42:	2500      	movs	r5, #0
 8001e44:	4652      	mov	r2, sl
 8001e46:	051b      	lsls	r3, r3, #20
 8001e48:	4323      	orrs	r3, r4
 8001e4a:	07d2      	lsls	r2, r2, #31
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	0028      	movs	r0, r5
 8001e50:	0019      	movs	r1, r3
 8001e52:	b005      	add	sp, #20
 8001e54:	bcf0      	pop	{r4, r5, r6, r7}
 8001e56:	46bb      	mov	fp, r7
 8001e58:	46b2      	mov	sl, r6
 8001e5a:	46a9      	mov	r9, r5
 8001e5c:	46a0      	mov	r8, r4
 8001e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e60:	2400      	movs	r4, #0
 8001e62:	2500      	movs	r5, #0
 8001e64:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <__aeabi_ddiv+0x244>)
 8001e66:	e7ed      	b.n	8001e44 <__aeabi_ddiv+0xb4>
 8001e68:	464b      	mov	r3, r9
 8001e6a:	4323      	orrs	r3, r4
 8001e6c:	4698      	mov	r8, r3
 8001e6e:	d100      	bne.n	8001e72 <__aeabi_ddiv+0xe2>
 8001e70:	e089      	b.n	8001f86 <__aeabi_ddiv+0x1f6>
 8001e72:	2c00      	cmp	r4, #0
 8001e74:	d100      	bne.n	8001e78 <__aeabi_ddiv+0xe8>
 8001e76:	e1e0      	b.n	800223a <__aeabi_ddiv+0x4aa>
 8001e78:	0020      	movs	r0, r4
 8001e7a:	f001 fb07 	bl	800348c <__clzsi2>
 8001e7e:	0001      	movs	r1, r0
 8001e80:	0002      	movs	r2, r0
 8001e82:	390b      	subs	r1, #11
 8001e84:	231d      	movs	r3, #29
 8001e86:	1a5b      	subs	r3, r3, r1
 8001e88:	4649      	mov	r1, r9
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	40d9      	lsrs	r1, r3
 8001e8e:	3808      	subs	r0, #8
 8001e90:	4084      	lsls	r4, r0
 8001e92:	000b      	movs	r3, r1
 8001e94:	464d      	mov	r5, r9
 8001e96:	4323      	orrs	r3, r4
 8001e98:	4698      	mov	r8, r3
 8001e9a:	4085      	lsls	r5, r0
 8001e9c:	4851      	ldr	r0, [pc, #324]	; (8001fe4 <__aeabi_ddiv+0x254>)
 8001e9e:	033c      	lsls	r4, r7, #12
 8001ea0:	1a83      	subs	r3, r0, r2
 8001ea2:	469b      	mov	fp, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4699      	mov	r9, r3
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	007b      	lsls	r3, r7, #1
 8001eac:	4650      	mov	r0, sl
 8001eae:	0b24      	lsrs	r4, r4, #12
 8001eb0:	0d5b      	lsrs	r3, r3, #21
 8001eb2:	0fff      	lsrs	r7, r7, #31
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d197      	bne.n	8001de8 <__aeabi_ddiv+0x58>
 8001eb8:	4652      	mov	r2, sl
 8001eba:	4322      	orrs	r2, r4
 8001ebc:	d055      	beq.n	8001f6a <__aeabi_ddiv+0x1da>
 8001ebe:	2c00      	cmp	r4, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_ddiv+0x134>
 8001ec2:	e1ca      	b.n	800225a <__aeabi_ddiv+0x4ca>
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	f001 fae1 	bl	800348c <__clzsi2>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	3a0b      	subs	r2, #11
 8001ece:	231d      	movs	r3, #29
 8001ed0:	0001      	movs	r1, r0
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	4652      	mov	r2, sl
 8001ed6:	3908      	subs	r1, #8
 8001ed8:	40da      	lsrs	r2, r3
 8001eda:	408c      	lsls	r4, r1
 8001edc:	4314      	orrs	r4, r2
 8001ede:	4652      	mov	r2, sl
 8001ee0:	408a      	lsls	r2, r1
 8001ee2:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <__aeabi_ddiv+0x258>)
 8001ee4:	4458      	add	r0, fp
 8001ee6:	469b      	mov	fp, r3
 8001ee8:	4483      	add	fp, r0
 8001eea:	2000      	movs	r0, #0
 8001eec:	e78d      	b.n	8001e0a <__aeabi_ddiv+0x7a>
 8001eee:	464b      	mov	r3, r9
 8001ef0:	4323      	orrs	r3, r4
 8001ef2:	4698      	mov	r8, r3
 8001ef4:	d140      	bne.n	8001f78 <__aeabi_ddiv+0x1e8>
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	4699      	mov	r9, r3
 8001efa:	3b06      	subs	r3, #6
 8001efc:	2500      	movs	r5, #0
 8001efe:	4683      	mov	fp, r0
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	e769      	b.n	8001dd8 <__aeabi_ddiv+0x48>
 8001f04:	46b2      	mov	sl, r6
 8001f06:	9b00      	ldr	r3, [sp, #0]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d0a9      	beq.n	8001e60 <__aeabi_ddiv+0xd0>
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_ddiv+0x182>
 8001f10:	e211      	b.n	8002336 <__aeabi_ddiv+0x5a6>
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d093      	beq.n	8001e3e <__aeabi_ddiv+0xae>
 8001f16:	4a35      	ldr	r2, [pc, #212]	; (8001fec <__aeabi_ddiv+0x25c>)
 8001f18:	445a      	add	r2, fp
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	dc00      	bgt.n	8001f20 <__aeabi_ddiv+0x190>
 8001f1e:	e13c      	b.n	800219a <__aeabi_ddiv+0x40a>
 8001f20:	076b      	lsls	r3, r5, #29
 8001f22:	d000      	beq.n	8001f26 <__aeabi_ddiv+0x196>
 8001f24:	e1a7      	b.n	8002276 <__aeabi_ddiv+0x4e6>
 8001f26:	08ed      	lsrs	r5, r5, #3
 8001f28:	4643      	mov	r3, r8
 8001f2a:	01db      	lsls	r3, r3, #7
 8001f2c:	d506      	bpl.n	8001f3c <__aeabi_ddiv+0x1ac>
 8001f2e:	4642      	mov	r2, r8
 8001f30:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <__aeabi_ddiv+0x260>)
 8001f32:	401a      	ands	r2, r3
 8001f34:	4690      	mov	r8, r2
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	00d2      	lsls	r2, r2, #3
 8001f3a:	445a      	add	r2, fp
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <__aeabi_ddiv+0x264>)
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	dc8e      	bgt.n	8001e60 <__aeabi_ddiv+0xd0>
 8001f42:	4643      	mov	r3, r8
 8001f44:	0552      	lsls	r2, r2, #21
 8001f46:	0758      	lsls	r0, r3, #29
 8001f48:	025c      	lsls	r4, r3, #9
 8001f4a:	4305      	orrs	r5, r0
 8001f4c:	0b24      	lsrs	r4, r4, #12
 8001f4e:	0d53      	lsrs	r3, r2, #21
 8001f50:	e778      	b.n	8001e44 <__aeabi_ddiv+0xb4>
 8001f52:	46ba      	mov	sl, r7
 8001f54:	46a0      	mov	r8, r4
 8001f56:	0015      	movs	r5, r2
 8001f58:	9000      	str	r0, [sp, #0]
 8001f5a:	e7d4      	b.n	8001f06 <__aeabi_ddiv+0x176>
 8001f5c:	464a      	mov	r2, r9
 8001f5e:	2303      	movs	r3, #3
 8001f60:	431a      	orrs	r2, r3
 8001f62:	4691      	mov	r9, r2
 8001f64:	2003      	movs	r0, #3
 8001f66:	4652      	mov	r2, sl
 8001f68:	e74f      	b.n	8001e0a <__aeabi_ddiv+0x7a>
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4319      	orrs	r1, r3
 8001f70:	4689      	mov	r9, r1
 8001f72:	2400      	movs	r4, #0
 8001f74:	2001      	movs	r0, #1
 8001f76:	e748      	b.n	8001e0a <__aeabi_ddiv+0x7a>
 8001f78:	230c      	movs	r3, #12
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	3b09      	subs	r3, #9
 8001f7e:	46a0      	mov	r8, r4
 8001f80:	4683      	mov	fp, r0
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	e728      	b.n	8001dd8 <__aeabi_ddiv+0x48>
 8001f86:	2304      	movs	r3, #4
 8001f88:	4699      	mov	r9, r3
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	469b      	mov	fp, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	2500      	movs	r5, #0
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	e720      	b.n	8001dd8 <__aeabi_ddiv+0x48>
 8001f96:	2300      	movs	r3, #0
 8001f98:	2480      	movs	r4, #128	; 0x80
 8001f9a:	469a      	mov	sl, r3
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <__aeabi_ddiv+0x244>)
 8001fa0:	0324      	lsls	r4, r4, #12
 8001fa2:	e74f      	b.n	8001e44 <__aeabi_ddiv+0xb4>
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	4641      	mov	r1, r8
 8001fa8:	031b      	lsls	r3, r3, #12
 8001faa:	4219      	tst	r1, r3
 8001fac:	d008      	beq.n	8001fc0 <__aeabi_ddiv+0x230>
 8001fae:	421c      	tst	r4, r3
 8001fb0:	d106      	bne.n	8001fc0 <__aeabi_ddiv+0x230>
 8001fb2:	431c      	orrs	r4, r3
 8001fb4:	0324      	lsls	r4, r4, #12
 8001fb6:	46ba      	mov	sl, r7
 8001fb8:	0015      	movs	r5, r2
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <__aeabi_ddiv+0x244>)
 8001fbc:	0b24      	lsrs	r4, r4, #12
 8001fbe:	e741      	b.n	8001e44 <__aeabi_ddiv+0xb4>
 8001fc0:	2480      	movs	r4, #128	; 0x80
 8001fc2:	4643      	mov	r3, r8
 8001fc4:	0324      	lsls	r4, r4, #12
 8001fc6:	431c      	orrs	r4, r3
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	46b2      	mov	sl, r6
 8001fcc:	4b01      	ldr	r3, [pc, #4]	; (8001fd4 <__aeabi_ddiv+0x244>)
 8001fce:	0b24      	lsrs	r4, r4, #12
 8001fd0:	e738      	b.n	8001e44 <__aeabi_ddiv+0xb4>
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	000007ff 	.word	0x000007ff
 8001fd8:	fffffc01 	.word	0xfffffc01
 8001fdc:	0801b2d8 	.word	0x0801b2d8
 8001fe0:	fffff801 	.word	0xfffff801
 8001fe4:	fffffc0d 	.word	0xfffffc0d
 8001fe8:	000003f3 	.word	0x000003f3
 8001fec:	000003ff 	.word	0x000003ff
 8001ff0:	feffffff 	.word	0xfeffffff
 8001ff4:	000007fe 	.word	0x000007fe
 8001ff8:	4544      	cmp	r4, r8
 8001ffa:	d200      	bcs.n	8001ffe <__aeabi_ddiv+0x26e>
 8001ffc:	e116      	b.n	800222c <__aeabi_ddiv+0x49c>
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0x272>
 8002000:	e111      	b.n	8002226 <__aeabi_ddiv+0x496>
 8002002:	2301      	movs	r3, #1
 8002004:	425b      	negs	r3, r3
 8002006:	469c      	mov	ip, r3
 8002008:	002e      	movs	r6, r5
 800200a:	4640      	mov	r0, r8
 800200c:	2500      	movs	r5, #0
 800200e:	44e3      	add	fp, ip
 8002010:	0223      	lsls	r3, r4, #8
 8002012:	0e14      	lsrs	r4, r2, #24
 8002014:	431c      	orrs	r4, r3
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	4699      	mov	r9, r3
 800201a:	0423      	lsls	r3, r4, #16
 800201c:	0c1f      	lsrs	r7, r3, #16
 800201e:	0212      	lsls	r2, r2, #8
 8002020:	4649      	mov	r1, r9
 8002022:	9200      	str	r2, [sp, #0]
 8002024:	9701      	str	r7, [sp, #4]
 8002026:	f7fe f919 	bl	800025c <__aeabi_uidivmod>
 800202a:	0002      	movs	r2, r0
 800202c:	437a      	muls	r2, r7
 800202e:	040b      	lsls	r3, r1, #16
 8002030:	0c31      	lsrs	r1, r6, #16
 8002032:	4680      	mov	r8, r0
 8002034:	4319      	orrs	r1, r3
 8002036:	428a      	cmp	r2, r1
 8002038:	d90b      	bls.n	8002052 <__aeabi_ddiv+0x2c2>
 800203a:	2301      	movs	r3, #1
 800203c:	425b      	negs	r3, r3
 800203e:	469c      	mov	ip, r3
 8002040:	1909      	adds	r1, r1, r4
 8002042:	44e0      	add	r8, ip
 8002044:	428c      	cmp	r4, r1
 8002046:	d804      	bhi.n	8002052 <__aeabi_ddiv+0x2c2>
 8002048:	428a      	cmp	r2, r1
 800204a:	d902      	bls.n	8002052 <__aeabi_ddiv+0x2c2>
 800204c:	1e83      	subs	r3, r0, #2
 800204e:	4698      	mov	r8, r3
 8002050:	1909      	adds	r1, r1, r4
 8002052:	1a88      	subs	r0, r1, r2
 8002054:	4649      	mov	r1, r9
 8002056:	f7fe f901 	bl	800025c <__aeabi_uidivmod>
 800205a:	0409      	lsls	r1, r1, #16
 800205c:	468c      	mov	ip, r1
 800205e:	0431      	lsls	r1, r6, #16
 8002060:	4666      	mov	r6, ip
 8002062:	9a01      	ldr	r2, [sp, #4]
 8002064:	0c09      	lsrs	r1, r1, #16
 8002066:	4342      	muls	r2, r0
 8002068:	0003      	movs	r3, r0
 800206a:	4331      	orrs	r1, r6
 800206c:	428a      	cmp	r2, r1
 800206e:	d904      	bls.n	800207a <__aeabi_ddiv+0x2ea>
 8002070:	1909      	adds	r1, r1, r4
 8002072:	3b01      	subs	r3, #1
 8002074:	428c      	cmp	r4, r1
 8002076:	d800      	bhi.n	800207a <__aeabi_ddiv+0x2ea>
 8002078:	e111      	b.n	800229e <__aeabi_ddiv+0x50e>
 800207a:	1a89      	subs	r1, r1, r2
 800207c:	4642      	mov	r2, r8
 800207e:	9e00      	ldr	r6, [sp, #0]
 8002080:	0412      	lsls	r2, r2, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	0c33      	lsrs	r3, r6, #16
 8002086:	001f      	movs	r7, r3
 8002088:	0c10      	lsrs	r0, r2, #16
 800208a:	4690      	mov	r8, r2
 800208c:	9302      	str	r3, [sp, #8]
 800208e:	0413      	lsls	r3, r2, #16
 8002090:	0432      	lsls	r2, r6, #16
 8002092:	0c16      	lsrs	r6, r2, #16
 8002094:	0032      	movs	r2, r6
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	435a      	muls	r2, r3
 800209a:	9603      	str	r6, [sp, #12]
 800209c:	437b      	muls	r3, r7
 800209e:	4346      	muls	r6, r0
 80020a0:	4378      	muls	r0, r7
 80020a2:	0c17      	lsrs	r7, r2, #16
 80020a4:	46bc      	mov	ip, r7
 80020a6:	199b      	adds	r3, r3, r6
 80020a8:	4463      	add	r3, ip
 80020aa:	429e      	cmp	r6, r3
 80020ac:	d903      	bls.n	80020b6 <__aeabi_ddiv+0x326>
 80020ae:	2680      	movs	r6, #128	; 0x80
 80020b0:	0276      	lsls	r6, r6, #9
 80020b2:	46b4      	mov	ip, r6
 80020b4:	4460      	add	r0, ip
 80020b6:	0c1e      	lsrs	r6, r3, #16
 80020b8:	1830      	adds	r0, r6, r0
 80020ba:	0416      	lsls	r6, r2, #16
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	0c36      	lsrs	r6, r6, #16
 80020c0:	199e      	adds	r6, r3, r6
 80020c2:	4281      	cmp	r1, r0
 80020c4:	d200      	bcs.n	80020c8 <__aeabi_ddiv+0x338>
 80020c6:	e09c      	b.n	8002202 <__aeabi_ddiv+0x472>
 80020c8:	d100      	bne.n	80020cc <__aeabi_ddiv+0x33c>
 80020ca:	e097      	b.n	80021fc <__aeabi_ddiv+0x46c>
 80020cc:	1bae      	subs	r6, r5, r6
 80020ce:	1a09      	subs	r1, r1, r0
 80020d0:	42b5      	cmp	r5, r6
 80020d2:	4180      	sbcs	r0, r0
 80020d4:	4240      	negs	r0, r0
 80020d6:	1a08      	subs	r0, r1, r0
 80020d8:	4284      	cmp	r4, r0
 80020da:	d100      	bne.n	80020de <__aeabi_ddiv+0x34e>
 80020dc:	e111      	b.n	8002302 <__aeabi_ddiv+0x572>
 80020de:	4649      	mov	r1, r9
 80020e0:	f7fe f8bc 	bl	800025c <__aeabi_uidivmod>
 80020e4:	9a01      	ldr	r2, [sp, #4]
 80020e6:	040b      	lsls	r3, r1, #16
 80020e8:	4342      	muls	r2, r0
 80020ea:	0c31      	lsrs	r1, r6, #16
 80020ec:	0005      	movs	r5, r0
 80020ee:	4319      	orrs	r1, r3
 80020f0:	428a      	cmp	r2, r1
 80020f2:	d907      	bls.n	8002104 <__aeabi_ddiv+0x374>
 80020f4:	1909      	adds	r1, r1, r4
 80020f6:	3d01      	subs	r5, #1
 80020f8:	428c      	cmp	r4, r1
 80020fa:	d803      	bhi.n	8002104 <__aeabi_ddiv+0x374>
 80020fc:	428a      	cmp	r2, r1
 80020fe:	d901      	bls.n	8002104 <__aeabi_ddiv+0x374>
 8002100:	1e85      	subs	r5, r0, #2
 8002102:	1909      	adds	r1, r1, r4
 8002104:	1a88      	subs	r0, r1, r2
 8002106:	4649      	mov	r1, r9
 8002108:	f7fe f8a8 	bl	800025c <__aeabi_uidivmod>
 800210c:	0409      	lsls	r1, r1, #16
 800210e:	468c      	mov	ip, r1
 8002110:	0431      	lsls	r1, r6, #16
 8002112:	4666      	mov	r6, ip
 8002114:	9a01      	ldr	r2, [sp, #4]
 8002116:	0c09      	lsrs	r1, r1, #16
 8002118:	4342      	muls	r2, r0
 800211a:	0003      	movs	r3, r0
 800211c:	4331      	orrs	r1, r6
 800211e:	428a      	cmp	r2, r1
 8002120:	d907      	bls.n	8002132 <__aeabi_ddiv+0x3a2>
 8002122:	1909      	adds	r1, r1, r4
 8002124:	3b01      	subs	r3, #1
 8002126:	428c      	cmp	r4, r1
 8002128:	d803      	bhi.n	8002132 <__aeabi_ddiv+0x3a2>
 800212a:	428a      	cmp	r2, r1
 800212c:	d901      	bls.n	8002132 <__aeabi_ddiv+0x3a2>
 800212e:	1e83      	subs	r3, r0, #2
 8002130:	1909      	adds	r1, r1, r4
 8002132:	9e03      	ldr	r6, [sp, #12]
 8002134:	1a89      	subs	r1, r1, r2
 8002136:	0032      	movs	r2, r6
 8002138:	042d      	lsls	r5, r5, #16
 800213a:	431d      	orrs	r5, r3
 800213c:	9f02      	ldr	r7, [sp, #8]
 800213e:	042b      	lsls	r3, r5, #16
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	435a      	muls	r2, r3
 8002144:	437b      	muls	r3, r7
 8002146:	469c      	mov	ip, r3
 8002148:	0c28      	lsrs	r0, r5, #16
 800214a:	4346      	muls	r6, r0
 800214c:	0c13      	lsrs	r3, r2, #16
 800214e:	44b4      	add	ip, r6
 8002150:	4463      	add	r3, ip
 8002152:	4378      	muls	r0, r7
 8002154:	429e      	cmp	r6, r3
 8002156:	d903      	bls.n	8002160 <__aeabi_ddiv+0x3d0>
 8002158:	2680      	movs	r6, #128	; 0x80
 800215a:	0276      	lsls	r6, r6, #9
 800215c:	46b4      	mov	ip, r6
 800215e:	4460      	add	r0, ip
 8002160:	0c1e      	lsrs	r6, r3, #16
 8002162:	0412      	lsls	r2, r2, #16
 8002164:	041b      	lsls	r3, r3, #16
 8002166:	0c12      	lsrs	r2, r2, #16
 8002168:	1830      	adds	r0, r6, r0
 800216a:	189b      	adds	r3, r3, r2
 800216c:	4281      	cmp	r1, r0
 800216e:	d306      	bcc.n	800217e <__aeabi_ddiv+0x3ee>
 8002170:	d002      	beq.n	8002178 <__aeabi_ddiv+0x3e8>
 8002172:	2301      	movs	r3, #1
 8002174:	431d      	orrs	r5, r3
 8002176:	e6ce      	b.n	8001f16 <__aeabi_ddiv+0x186>
 8002178:	2b00      	cmp	r3, #0
 800217a:	d100      	bne.n	800217e <__aeabi_ddiv+0x3ee>
 800217c:	e6cb      	b.n	8001f16 <__aeabi_ddiv+0x186>
 800217e:	1861      	adds	r1, r4, r1
 8002180:	1e6e      	subs	r6, r5, #1
 8002182:	42a1      	cmp	r1, r4
 8002184:	d200      	bcs.n	8002188 <__aeabi_ddiv+0x3f8>
 8002186:	e0a4      	b.n	80022d2 <__aeabi_ddiv+0x542>
 8002188:	4281      	cmp	r1, r0
 800218a:	d200      	bcs.n	800218e <__aeabi_ddiv+0x3fe>
 800218c:	e0c9      	b.n	8002322 <__aeabi_ddiv+0x592>
 800218e:	d100      	bne.n	8002192 <__aeabi_ddiv+0x402>
 8002190:	e0d9      	b.n	8002346 <__aeabi_ddiv+0x5b6>
 8002192:	0035      	movs	r5, r6
 8002194:	e7ed      	b.n	8002172 <__aeabi_ddiv+0x3e2>
 8002196:	2501      	movs	r5, #1
 8002198:	426d      	negs	r5, r5
 800219a:	2101      	movs	r1, #1
 800219c:	1a89      	subs	r1, r1, r2
 800219e:	2938      	cmp	r1, #56	; 0x38
 80021a0:	dd00      	ble.n	80021a4 <__aeabi_ddiv+0x414>
 80021a2:	e64c      	b.n	8001e3e <__aeabi_ddiv+0xae>
 80021a4:	291f      	cmp	r1, #31
 80021a6:	dc00      	bgt.n	80021aa <__aeabi_ddiv+0x41a>
 80021a8:	e07f      	b.n	80022aa <__aeabi_ddiv+0x51a>
 80021aa:	231f      	movs	r3, #31
 80021ac:	425b      	negs	r3, r3
 80021ae:	1a9a      	subs	r2, r3, r2
 80021b0:	4643      	mov	r3, r8
 80021b2:	40d3      	lsrs	r3, r2
 80021b4:	2920      	cmp	r1, #32
 80021b6:	d004      	beq.n	80021c2 <__aeabi_ddiv+0x432>
 80021b8:	4644      	mov	r4, r8
 80021ba:	4a65      	ldr	r2, [pc, #404]	; (8002350 <__aeabi_ddiv+0x5c0>)
 80021bc:	445a      	add	r2, fp
 80021be:	4094      	lsls	r4, r2
 80021c0:	4325      	orrs	r5, r4
 80021c2:	1e6a      	subs	r2, r5, #1
 80021c4:	4195      	sbcs	r5, r2
 80021c6:	2207      	movs	r2, #7
 80021c8:	432b      	orrs	r3, r5
 80021ca:	0015      	movs	r5, r2
 80021cc:	2400      	movs	r4, #0
 80021ce:	401d      	ands	r5, r3
 80021d0:	421a      	tst	r2, r3
 80021d2:	d100      	bne.n	80021d6 <__aeabi_ddiv+0x446>
 80021d4:	e0a1      	b.n	800231a <__aeabi_ddiv+0x58a>
 80021d6:	220f      	movs	r2, #15
 80021d8:	2400      	movs	r4, #0
 80021da:	401a      	ands	r2, r3
 80021dc:	2a04      	cmp	r2, #4
 80021de:	d100      	bne.n	80021e2 <__aeabi_ddiv+0x452>
 80021e0:	e098      	b.n	8002314 <__aeabi_ddiv+0x584>
 80021e2:	1d1a      	adds	r2, r3, #4
 80021e4:	429a      	cmp	r2, r3
 80021e6:	419b      	sbcs	r3, r3
 80021e8:	425b      	negs	r3, r3
 80021ea:	18e4      	adds	r4, r4, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	0222      	lsls	r2, r4, #8
 80021f0:	d400      	bmi.n	80021f4 <__aeabi_ddiv+0x464>
 80021f2:	e08f      	b.n	8002314 <__aeabi_ddiv+0x584>
 80021f4:	2301      	movs	r3, #1
 80021f6:	2400      	movs	r4, #0
 80021f8:	2500      	movs	r5, #0
 80021fa:	e623      	b.n	8001e44 <__aeabi_ddiv+0xb4>
 80021fc:	42b5      	cmp	r5, r6
 80021fe:	d300      	bcc.n	8002202 <__aeabi_ddiv+0x472>
 8002200:	e764      	b.n	80020cc <__aeabi_ddiv+0x33c>
 8002202:	4643      	mov	r3, r8
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	9b00      	ldr	r3, [sp, #0]
 8002208:	469c      	mov	ip, r3
 800220a:	4465      	add	r5, ip
 800220c:	001f      	movs	r7, r3
 800220e:	429d      	cmp	r5, r3
 8002210:	419b      	sbcs	r3, r3
 8002212:	425b      	negs	r3, r3
 8002214:	191b      	adds	r3, r3, r4
 8002216:	18c9      	adds	r1, r1, r3
 8002218:	428c      	cmp	r4, r1
 800221a:	d23a      	bcs.n	8002292 <__aeabi_ddiv+0x502>
 800221c:	4288      	cmp	r0, r1
 800221e:	d863      	bhi.n	80022e8 <__aeabi_ddiv+0x558>
 8002220:	d060      	beq.n	80022e4 <__aeabi_ddiv+0x554>
 8002222:	4690      	mov	r8, r2
 8002224:	e752      	b.n	80020cc <__aeabi_ddiv+0x33c>
 8002226:	42aa      	cmp	r2, r5
 8002228:	d900      	bls.n	800222c <__aeabi_ddiv+0x49c>
 800222a:	e6ea      	b.n	8002002 <__aeabi_ddiv+0x272>
 800222c:	4643      	mov	r3, r8
 800222e:	07de      	lsls	r6, r3, #31
 8002230:	0858      	lsrs	r0, r3, #1
 8002232:	086b      	lsrs	r3, r5, #1
 8002234:	431e      	orrs	r6, r3
 8002236:	07ed      	lsls	r5, r5, #31
 8002238:	e6ea      	b.n	8002010 <__aeabi_ddiv+0x280>
 800223a:	4648      	mov	r0, r9
 800223c:	f001 f926 	bl	800348c <__clzsi2>
 8002240:	0001      	movs	r1, r0
 8002242:	0002      	movs	r2, r0
 8002244:	3115      	adds	r1, #21
 8002246:	3220      	adds	r2, #32
 8002248:	291c      	cmp	r1, #28
 800224a:	dc00      	bgt.n	800224e <__aeabi_ddiv+0x4be>
 800224c:	e61a      	b.n	8001e84 <__aeabi_ddiv+0xf4>
 800224e:	464b      	mov	r3, r9
 8002250:	3808      	subs	r0, #8
 8002252:	4083      	lsls	r3, r0
 8002254:	2500      	movs	r5, #0
 8002256:	4698      	mov	r8, r3
 8002258:	e620      	b.n	8001e9c <__aeabi_ddiv+0x10c>
 800225a:	f001 f917 	bl	800348c <__clzsi2>
 800225e:	0003      	movs	r3, r0
 8002260:	001a      	movs	r2, r3
 8002262:	3215      	adds	r2, #21
 8002264:	3020      	adds	r0, #32
 8002266:	2a1c      	cmp	r2, #28
 8002268:	dc00      	bgt.n	800226c <__aeabi_ddiv+0x4dc>
 800226a:	e630      	b.n	8001ece <__aeabi_ddiv+0x13e>
 800226c:	4654      	mov	r4, sl
 800226e:	3b08      	subs	r3, #8
 8002270:	2200      	movs	r2, #0
 8002272:	409c      	lsls	r4, r3
 8002274:	e635      	b.n	8001ee2 <__aeabi_ddiv+0x152>
 8002276:	230f      	movs	r3, #15
 8002278:	402b      	ands	r3, r5
 800227a:	2b04      	cmp	r3, #4
 800227c:	d100      	bne.n	8002280 <__aeabi_ddiv+0x4f0>
 800227e:	e652      	b.n	8001f26 <__aeabi_ddiv+0x196>
 8002280:	2305      	movs	r3, #5
 8002282:	425b      	negs	r3, r3
 8002284:	42ab      	cmp	r3, r5
 8002286:	419b      	sbcs	r3, r3
 8002288:	3504      	adds	r5, #4
 800228a:	425b      	negs	r3, r3
 800228c:	08ed      	lsrs	r5, r5, #3
 800228e:	4498      	add	r8, r3
 8002290:	e64a      	b.n	8001f28 <__aeabi_ddiv+0x198>
 8002292:	428c      	cmp	r4, r1
 8002294:	d1c5      	bne.n	8002222 <__aeabi_ddiv+0x492>
 8002296:	42af      	cmp	r7, r5
 8002298:	d9c0      	bls.n	800221c <__aeabi_ddiv+0x48c>
 800229a:	4690      	mov	r8, r2
 800229c:	e716      	b.n	80020cc <__aeabi_ddiv+0x33c>
 800229e:	428a      	cmp	r2, r1
 80022a0:	d800      	bhi.n	80022a4 <__aeabi_ddiv+0x514>
 80022a2:	e6ea      	b.n	800207a <__aeabi_ddiv+0x2ea>
 80022a4:	1e83      	subs	r3, r0, #2
 80022a6:	1909      	adds	r1, r1, r4
 80022a8:	e6e7      	b.n	800207a <__aeabi_ddiv+0x2ea>
 80022aa:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <__aeabi_ddiv+0x5c4>)
 80022ac:	0028      	movs	r0, r5
 80022ae:	445a      	add	r2, fp
 80022b0:	4643      	mov	r3, r8
 80022b2:	4095      	lsls	r5, r2
 80022b4:	4093      	lsls	r3, r2
 80022b6:	40c8      	lsrs	r0, r1
 80022b8:	1e6a      	subs	r2, r5, #1
 80022ba:	4195      	sbcs	r5, r2
 80022bc:	4644      	mov	r4, r8
 80022be:	4303      	orrs	r3, r0
 80022c0:	432b      	orrs	r3, r5
 80022c2:	40cc      	lsrs	r4, r1
 80022c4:	075a      	lsls	r2, r3, #29
 80022c6:	d092      	beq.n	80021ee <__aeabi_ddiv+0x45e>
 80022c8:	220f      	movs	r2, #15
 80022ca:	401a      	ands	r2, r3
 80022cc:	2a04      	cmp	r2, #4
 80022ce:	d188      	bne.n	80021e2 <__aeabi_ddiv+0x452>
 80022d0:	e78d      	b.n	80021ee <__aeabi_ddiv+0x45e>
 80022d2:	0035      	movs	r5, r6
 80022d4:	4281      	cmp	r1, r0
 80022d6:	d000      	beq.n	80022da <__aeabi_ddiv+0x54a>
 80022d8:	e74b      	b.n	8002172 <__aeabi_ddiv+0x3e2>
 80022da:	9a00      	ldr	r2, [sp, #0]
 80022dc:	4293      	cmp	r3, r2
 80022de:	d000      	beq.n	80022e2 <__aeabi_ddiv+0x552>
 80022e0:	e747      	b.n	8002172 <__aeabi_ddiv+0x3e2>
 80022e2:	e618      	b.n	8001f16 <__aeabi_ddiv+0x186>
 80022e4:	42ae      	cmp	r6, r5
 80022e6:	d99c      	bls.n	8002222 <__aeabi_ddiv+0x492>
 80022e8:	2302      	movs	r3, #2
 80022ea:	425b      	negs	r3, r3
 80022ec:	469c      	mov	ip, r3
 80022ee:	9b00      	ldr	r3, [sp, #0]
 80022f0:	44e0      	add	r8, ip
 80022f2:	469c      	mov	ip, r3
 80022f4:	4465      	add	r5, ip
 80022f6:	429d      	cmp	r5, r3
 80022f8:	419b      	sbcs	r3, r3
 80022fa:	425b      	negs	r3, r3
 80022fc:	191b      	adds	r3, r3, r4
 80022fe:	18c9      	adds	r1, r1, r3
 8002300:	e6e4      	b.n	80020cc <__aeabi_ddiv+0x33c>
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <__aeabi_ddiv+0x5c8>)
 8002304:	445a      	add	r2, fp
 8002306:	2a00      	cmp	r2, #0
 8002308:	dc00      	bgt.n	800230c <__aeabi_ddiv+0x57c>
 800230a:	e744      	b.n	8002196 <__aeabi_ddiv+0x406>
 800230c:	2301      	movs	r3, #1
 800230e:	2500      	movs	r5, #0
 8002310:	4498      	add	r8, r3
 8002312:	e609      	b.n	8001f28 <__aeabi_ddiv+0x198>
 8002314:	0765      	lsls	r5, r4, #29
 8002316:	0264      	lsls	r4, r4, #9
 8002318:	0b24      	lsrs	r4, r4, #12
 800231a:	08db      	lsrs	r3, r3, #3
 800231c:	431d      	orrs	r5, r3
 800231e:	2300      	movs	r3, #0
 8002320:	e590      	b.n	8001e44 <__aeabi_ddiv+0xb4>
 8002322:	9e00      	ldr	r6, [sp, #0]
 8002324:	3d02      	subs	r5, #2
 8002326:	0072      	lsls	r2, r6, #1
 8002328:	42b2      	cmp	r2, r6
 800232a:	41bf      	sbcs	r7, r7
 800232c:	427f      	negs	r7, r7
 800232e:	193c      	adds	r4, r7, r4
 8002330:	1909      	adds	r1, r1, r4
 8002332:	9200      	str	r2, [sp, #0]
 8002334:	e7ce      	b.n	80022d4 <__aeabi_ddiv+0x544>
 8002336:	2480      	movs	r4, #128	; 0x80
 8002338:	4643      	mov	r3, r8
 800233a:	0324      	lsls	r4, r4, #12
 800233c:	431c      	orrs	r4, r3
 800233e:	0324      	lsls	r4, r4, #12
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <__aeabi_ddiv+0x5cc>)
 8002342:	0b24      	lsrs	r4, r4, #12
 8002344:	e57e      	b.n	8001e44 <__aeabi_ddiv+0xb4>
 8002346:	9a00      	ldr	r2, [sp, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3ea      	bcc.n	8002322 <__aeabi_ddiv+0x592>
 800234c:	0035      	movs	r5, r6
 800234e:	e7c4      	b.n	80022da <__aeabi_ddiv+0x54a>
 8002350:	0000043e 	.word	0x0000043e
 8002354:	0000041e 	.word	0x0000041e
 8002358:	000003ff 	.word	0x000003ff
 800235c:	000007ff 	.word	0x000007ff

08002360 <__eqdf2>:
 8002360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002362:	464f      	mov	r7, r9
 8002364:	4646      	mov	r6, r8
 8002366:	46d6      	mov	lr, sl
 8002368:	4694      	mov	ip, r2
 800236a:	4691      	mov	r9, r2
 800236c:	031a      	lsls	r2, r3, #12
 800236e:	0b12      	lsrs	r2, r2, #12
 8002370:	4d18      	ldr	r5, [pc, #96]	; (80023d4 <__eqdf2+0x74>)
 8002372:	b5c0      	push	{r6, r7, lr}
 8002374:	004c      	lsls	r4, r1, #1
 8002376:	030f      	lsls	r7, r1, #12
 8002378:	4692      	mov	sl, r2
 800237a:	005a      	lsls	r2, r3, #1
 800237c:	0006      	movs	r6, r0
 800237e:	4680      	mov	r8, r0
 8002380:	0b3f      	lsrs	r7, r7, #12
 8002382:	2001      	movs	r0, #1
 8002384:	0d64      	lsrs	r4, r4, #21
 8002386:	0fc9      	lsrs	r1, r1, #31
 8002388:	0d52      	lsrs	r2, r2, #21
 800238a:	0fdb      	lsrs	r3, r3, #31
 800238c:	42ac      	cmp	r4, r5
 800238e:	d00a      	beq.n	80023a6 <__eqdf2+0x46>
 8002390:	42aa      	cmp	r2, r5
 8002392:	d003      	beq.n	800239c <__eqdf2+0x3c>
 8002394:	4294      	cmp	r4, r2
 8002396:	d101      	bne.n	800239c <__eqdf2+0x3c>
 8002398:	4557      	cmp	r7, sl
 800239a:	d00d      	beq.n	80023b8 <__eqdf2+0x58>
 800239c:	bce0      	pop	{r5, r6, r7}
 800239e:	46ba      	mov	sl, r7
 80023a0:	46b1      	mov	r9, r6
 80023a2:	46a8      	mov	r8, r5
 80023a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a6:	003d      	movs	r5, r7
 80023a8:	4335      	orrs	r5, r6
 80023aa:	d1f7      	bne.n	800239c <__eqdf2+0x3c>
 80023ac:	42a2      	cmp	r2, r4
 80023ae:	d1f5      	bne.n	800239c <__eqdf2+0x3c>
 80023b0:	4652      	mov	r2, sl
 80023b2:	4665      	mov	r5, ip
 80023b4:	432a      	orrs	r2, r5
 80023b6:	d1f1      	bne.n	800239c <__eqdf2+0x3c>
 80023b8:	2001      	movs	r0, #1
 80023ba:	45c8      	cmp	r8, r9
 80023bc:	d1ee      	bne.n	800239c <__eqdf2+0x3c>
 80023be:	4299      	cmp	r1, r3
 80023c0:	d006      	beq.n	80023d0 <__eqdf2+0x70>
 80023c2:	2c00      	cmp	r4, #0
 80023c4:	d1ea      	bne.n	800239c <__eqdf2+0x3c>
 80023c6:	433e      	orrs	r6, r7
 80023c8:	0030      	movs	r0, r6
 80023ca:	1e46      	subs	r6, r0, #1
 80023cc:	41b0      	sbcs	r0, r6
 80023ce:	e7e5      	b.n	800239c <__eqdf2+0x3c>
 80023d0:	2000      	movs	r0, #0
 80023d2:	e7e3      	b.n	800239c <__eqdf2+0x3c>
 80023d4:	000007ff 	.word	0x000007ff

080023d8 <__gedf2>:
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	464e      	mov	r6, r9
 80023dc:	4645      	mov	r5, r8
 80023de:	4657      	mov	r7, sl
 80023e0:	46de      	mov	lr, fp
 80023e2:	0004      	movs	r4, r0
 80023e4:	0018      	movs	r0, r3
 80023e6:	b5e0      	push	{r5, r6, r7, lr}
 80023e8:	0016      	movs	r6, r2
 80023ea:	031b      	lsls	r3, r3, #12
 80023ec:	0b1b      	lsrs	r3, r3, #12
 80023ee:	4d32      	ldr	r5, [pc, #200]	; (80024b8 <__gedf2+0xe0>)
 80023f0:	030f      	lsls	r7, r1, #12
 80023f2:	004a      	lsls	r2, r1, #1
 80023f4:	4699      	mov	r9, r3
 80023f6:	0043      	lsls	r3, r0, #1
 80023f8:	46a4      	mov	ip, r4
 80023fa:	46b0      	mov	r8, r6
 80023fc:	0b3f      	lsrs	r7, r7, #12
 80023fe:	0d52      	lsrs	r2, r2, #21
 8002400:	0fc9      	lsrs	r1, r1, #31
 8002402:	0d5b      	lsrs	r3, r3, #21
 8002404:	0fc0      	lsrs	r0, r0, #31
 8002406:	42aa      	cmp	r2, r5
 8002408:	d029      	beq.n	800245e <__gedf2+0x86>
 800240a:	42ab      	cmp	r3, r5
 800240c:	d018      	beq.n	8002440 <__gedf2+0x68>
 800240e:	2a00      	cmp	r2, #0
 8002410:	d12a      	bne.n	8002468 <__gedf2+0x90>
 8002412:	433c      	orrs	r4, r7
 8002414:	46a3      	mov	fp, r4
 8002416:	4265      	negs	r5, r4
 8002418:	4165      	adcs	r5, r4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d102      	bne.n	8002424 <__gedf2+0x4c>
 800241e:	464c      	mov	r4, r9
 8002420:	4326      	orrs	r6, r4
 8002422:	d027      	beq.n	8002474 <__gedf2+0x9c>
 8002424:	2d00      	cmp	r5, #0
 8002426:	d115      	bne.n	8002454 <__gedf2+0x7c>
 8002428:	4281      	cmp	r1, r0
 800242a:	d028      	beq.n	800247e <__gedf2+0xa6>
 800242c:	2002      	movs	r0, #2
 800242e:	3901      	subs	r1, #1
 8002430:	4008      	ands	r0, r1
 8002432:	3801      	subs	r0, #1
 8002434:	bcf0      	pop	{r4, r5, r6, r7}
 8002436:	46bb      	mov	fp, r7
 8002438:	46b2      	mov	sl, r6
 800243a:	46a9      	mov	r9, r5
 800243c:	46a0      	mov	r8, r4
 800243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002440:	464d      	mov	r5, r9
 8002442:	432e      	orrs	r6, r5
 8002444:	d12f      	bne.n	80024a6 <__gedf2+0xce>
 8002446:	2a00      	cmp	r2, #0
 8002448:	d1ee      	bne.n	8002428 <__gedf2+0x50>
 800244a:	433c      	orrs	r4, r7
 800244c:	4265      	negs	r5, r4
 800244e:	4165      	adcs	r5, r4
 8002450:	2d00      	cmp	r5, #0
 8002452:	d0e9      	beq.n	8002428 <__gedf2+0x50>
 8002454:	2800      	cmp	r0, #0
 8002456:	d1ed      	bne.n	8002434 <__gedf2+0x5c>
 8002458:	2001      	movs	r0, #1
 800245a:	4240      	negs	r0, r0
 800245c:	e7ea      	b.n	8002434 <__gedf2+0x5c>
 800245e:	003d      	movs	r5, r7
 8002460:	4325      	orrs	r5, r4
 8002462:	d120      	bne.n	80024a6 <__gedf2+0xce>
 8002464:	4293      	cmp	r3, r2
 8002466:	d0eb      	beq.n	8002440 <__gedf2+0x68>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1dd      	bne.n	8002428 <__gedf2+0x50>
 800246c:	464c      	mov	r4, r9
 800246e:	4326      	orrs	r6, r4
 8002470:	d1da      	bne.n	8002428 <__gedf2+0x50>
 8002472:	e7db      	b.n	800242c <__gedf2+0x54>
 8002474:	465b      	mov	r3, fp
 8002476:	2000      	movs	r0, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0db      	beq.n	8002434 <__gedf2+0x5c>
 800247c:	e7d6      	b.n	800242c <__gedf2+0x54>
 800247e:	429a      	cmp	r2, r3
 8002480:	dc0a      	bgt.n	8002498 <__gedf2+0xc0>
 8002482:	dbe7      	blt.n	8002454 <__gedf2+0x7c>
 8002484:	454f      	cmp	r7, r9
 8002486:	d8d1      	bhi.n	800242c <__gedf2+0x54>
 8002488:	d010      	beq.n	80024ac <__gedf2+0xd4>
 800248a:	2000      	movs	r0, #0
 800248c:	454f      	cmp	r7, r9
 800248e:	d2d1      	bcs.n	8002434 <__gedf2+0x5c>
 8002490:	2900      	cmp	r1, #0
 8002492:	d0e1      	beq.n	8002458 <__gedf2+0x80>
 8002494:	0008      	movs	r0, r1
 8002496:	e7cd      	b.n	8002434 <__gedf2+0x5c>
 8002498:	4243      	negs	r3, r0
 800249a:	4158      	adcs	r0, r3
 800249c:	2302      	movs	r3, #2
 800249e:	4240      	negs	r0, r0
 80024a0:	4018      	ands	r0, r3
 80024a2:	3801      	subs	r0, #1
 80024a4:	e7c6      	b.n	8002434 <__gedf2+0x5c>
 80024a6:	2002      	movs	r0, #2
 80024a8:	4240      	negs	r0, r0
 80024aa:	e7c3      	b.n	8002434 <__gedf2+0x5c>
 80024ac:	45c4      	cmp	ip, r8
 80024ae:	d8bd      	bhi.n	800242c <__gedf2+0x54>
 80024b0:	2000      	movs	r0, #0
 80024b2:	45c4      	cmp	ip, r8
 80024b4:	d2be      	bcs.n	8002434 <__gedf2+0x5c>
 80024b6:	e7eb      	b.n	8002490 <__gedf2+0xb8>
 80024b8:	000007ff 	.word	0x000007ff

080024bc <__ledf2>:
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	464e      	mov	r6, r9
 80024c0:	4645      	mov	r5, r8
 80024c2:	4657      	mov	r7, sl
 80024c4:	46de      	mov	lr, fp
 80024c6:	0004      	movs	r4, r0
 80024c8:	0018      	movs	r0, r3
 80024ca:	b5e0      	push	{r5, r6, r7, lr}
 80024cc:	0016      	movs	r6, r2
 80024ce:	031b      	lsls	r3, r3, #12
 80024d0:	0b1b      	lsrs	r3, r3, #12
 80024d2:	4d31      	ldr	r5, [pc, #196]	; (8002598 <__ledf2+0xdc>)
 80024d4:	030f      	lsls	r7, r1, #12
 80024d6:	004a      	lsls	r2, r1, #1
 80024d8:	4699      	mov	r9, r3
 80024da:	0043      	lsls	r3, r0, #1
 80024dc:	46a4      	mov	ip, r4
 80024de:	46b0      	mov	r8, r6
 80024e0:	0b3f      	lsrs	r7, r7, #12
 80024e2:	0d52      	lsrs	r2, r2, #21
 80024e4:	0fc9      	lsrs	r1, r1, #31
 80024e6:	0d5b      	lsrs	r3, r3, #21
 80024e8:	0fc0      	lsrs	r0, r0, #31
 80024ea:	42aa      	cmp	r2, r5
 80024ec:	d011      	beq.n	8002512 <__ledf2+0x56>
 80024ee:	42ab      	cmp	r3, r5
 80024f0:	d014      	beq.n	800251c <__ledf2+0x60>
 80024f2:	2a00      	cmp	r2, #0
 80024f4:	d12f      	bne.n	8002556 <__ledf2+0x9a>
 80024f6:	433c      	orrs	r4, r7
 80024f8:	46a3      	mov	fp, r4
 80024fa:	4265      	negs	r5, r4
 80024fc:	4165      	adcs	r5, r4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d114      	bne.n	800252c <__ledf2+0x70>
 8002502:	464c      	mov	r4, r9
 8002504:	4326      	orrs	r6, r4
 8002506:	d111      	bne.n	800252c <__ledf2+0x70>
 8002508:	465b      	mov	r3, fp
 800250a:	2000      	movs	r0, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d017      	beq.n	8002540 <__ledf2+0x84>
 8002510:	e010      	b.n	8002534 <__ledf2+0x78>
 8002512:	003d      	movs	r5, r7
 8002514:	4325      	orrs	r5, r4
 8002516:	d112      	bne.n	800253e <__ledf2+0x82>
 8002518:	4293      	cmp	r3, r2
 800251a:	d11c      	bne.n	8002556 <__ledf2+0x9a>
 800251c:	464d      	mov	r5, r9
 800251e:	432e      	orrs	r6, r5
 8002520:	d10d      	bne.n	800253e <__ledf2+0x82>
 8002522:	2a00      	cmp	r2, #0
 8002524:	d104      	bne.n	8002530 <__ledf2+0x74>
 8002526:	433c      	orrs	r4, r7
 8002528:	4265      	negs	r5, r4
 800252a:	4165      	adcs	r5, r4
 800252c:	2d00      	cmp	r5, #0
 800252e:	d10d      	bne.n	800254c <__ledf2+0x90>
 8002530:	4281      	cmp	r1, r0
 8002532:	d016      	beq.n	8002562 <__ledf2+0xa6>
 8002534:	2002      	movs	r0, #2
 8002536:	3901      	subs	r1, #1
 8002538:	4008      	ands	r0, r1
 800253a:	3801      	subs	r0, #1
 800253c:	e000      	b.n	8002540 <__ledf2+0x84>
 800253e:	2002      	movs	r0, #2
 8002540:	bcf0      	pop	{r4, r5, r6, r7}
 8002542:	46bb      	mov	fp, r7
 8002544:	46b2      	mov	sl, r6
 8002546:	46a9      	mov	r9, r5
 8002548:	46a0      	mov	r8, r4
 800254a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800254c:	2800      	cmp	r0, #0
 800254e:	d1f7      	bne.n	8002540 <__ledf2+0x84>
 8002550:	2001      	movs	r0, #1
 8002552:	4240      	negs	r0, r0
 8002554:	e7f4      	b.n	8002540 <__ledf2+0x84>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ea      	bne.n	8002530 <__ledf2+0x74>
 800255a:	464c      	mov	r4, r9
 800255c:	4326      	orrs	r6, r4
 800255e:	d1e7      	bne.n	8002530 <__ledf2+0x74>
 8002560:	e7e8      	b.n	8002534 <__ledf2+0x78>
 8002562:	429a      	cmp	r2, r3
 8002564:	dd06      	ble.n	8002574 <__ledf2+0xb8>
 8002566:	4243      	negs	r3, r0
 8002568:	4158      	adcs	r0, r3
 800256a:	2302      	movs	r3, #2
 800256c:	4240      	negs	r0, r0
 800256e:	4018      	ands	r0, r3
 8002570:	3801      	subs	r0, #1
 8002572:	e7e5      	b.n	8002540 <__ledf2+0x84>
 8002574:	429a      	cmp	r2, r3
 8002576:	dbe9      	blt.n	800254c <__ledf2+0x90>
 8002578:	454f      	cmp	r7, r9
 800257a:	d8db      	bhi.n	8002534 <__ledf2+0x78>
 800257c:	d006      	beq.n	800258c <__ledf2+0xd0>
 800257e:	2000      	movs	r0, #0
 8002580:	454f      	cmp	r7, r9
 8002582:	d2dd      	bcs.n	8002540 <__ledf2+0x84>
 8002584:	2900      	cmp	r1, #0
 8002586:	d0e3      	beq.n	8002550 <__ledf2+0x94>
 8002588:	0008      	movs	r0, r1
 800258a:	e7d9      	b.n	8002540 <__ledf2+0x84>
 800258c:	45c4      	cmp	ip, r8
 800258e:	d8d1      	bhi.n	8002534 <__ledf2+0x78>
 8002590:	2000      	movs	r0, #0
 8002592:	45c4      	cmp	ip, r8
 8002594:	d2d4      	bcs.n	8002540 <__ledf2+0x84>
 8002596:	e7f5      	b.n	8002584 <__ledf2+0xc8>
 8002598:	000007ff 	.word	0x000007ff

0800259c <__aeabi_dmul>:
 800259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259e:	4657      	mov	r7, sl
 80025a0:	464e      	mov	r6, r9
 80025a2:	4645      	mov	r5, r8
 80025a4:	46de      	mov	lr, fp
 80025a6:	b5e0      	push	{r5, r6, r7, lr}
 80025a8:	4698      	mov	r8, r3
 80025aa:	030c      	lsls	r4, r1, #12
 80025ac:	004b      	lsls	r3, r1, #1
 80025ae:	0006      	movs	r6, r0
 80025b0:	4692      	mov	sl, r2
 80025b2:	b087      	sub	sp, #28
 80025b4:	0b24      	lsrs	r4, r4, #12
 80025b6:	0d5b      	lsrs	r3, r3, #21
 80025b8:	0fcf      	lsrs	r7, r1, #31
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d06c      	beq.n	8002698 <__aeabi_dmul+0xfc>
 80025be:	4add      	ldr	r2, [pc, #884]	; (8002934 <__aeabi_dmul+0x398>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d100      	bne.n	80025c6 <__aeabi_dmul+0x2a>
 80025c4:	e086      	b.n	80026d4 <__aeabi_dmul+0x138>
 80025c6:	0f42      	lsrs	r2, r0, #29
 80025c8:	00e4      	lsls	r4, r4, #3
 80025ca:	4314      	orrs	r4, r2
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	0412      	lsls	r2, r2, #16
 80025d0:	4314      	orrs	r4, r2
 80025d2:	4ad9      	ldr	r2, [pc, #868]	; (8002938 <__aeabi_dmul+0x39c>)
 80025d4:	00c5      	lsls	r5, r0, #3
 80025d6:	4694      	mov	ip, r2
 80025d8:	4463      	add	r3, ip
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2300      	movs	r3, #0
 80025de:	4699      	mov	r9, r3
 80025e0:	469b      	mov	fp, r3
 80025e2:	4643      	mov	r3, r8
 80025e4:	4642      	mov	r2, r8
 80025e6:	031e      	lsls	r6, r3, #12
 80025e8:	0fd2      	lsrs	r2, r2, #31
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4650      	mov	r0, sl
 80025ee:	4690      	mov	r8, r2
 80025f0:	0b36      	lsrs	r6, r6, #12
 80025f2:	0d5b      	lsrs	r3, r3, #21
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dmul+0x5c>
 80025f6:	e078      	b.n	80026ea <__aeabi_dmul+0x14e>
 80025f8:	4ace      	ldr	r2, [pc, #824]	; (8002934 <__aeabi_dmul+0x398>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01d      	beq.n	800263a <__aeabi_dmul+0x9e>
 80025fe:	49ce      	ldr	r1, [pc, #824]	; (8002938 <__aeabi_dmul+0x39c>)
 8002600:	0f42      	lsrs	r2, r0, #29
 8002602:	468c      	mov	ip, r1
 8002604:	9900      	ldr	r1, [sp, #0]
 8002606:	4463      	add	r3, ip
 8002608:	00f6      	lsls	r6, r6, #3
 800260a:	468c      	mov	ip, r1
 800260c:	4316      	orrs	r6, r2
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	449c      	add	ip, r3
 8002612:	0412      	lsls	r2, r2, #16
 8002614:	4663      	mov	r3, ip
 8002616:	4316      	orrs	r6, r2
 8002618:	00c2      	lsls	r2, r0, #3
 800261a:	2000      	movs	r0, #0
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	9900      	ldr	r1, [sp, #0]
 8002620:	4643      	mov	r3, r8
 8002622:	3101      	adds	r1, #1
 8002624:	468c      	mov	ip, r1
 8002626:	4649      	mov	r1, r9
 8002628:	407b      	eors	r3, r7
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	290f      	cmp	r1, #15
 800262e:	d900      	bls.n	8002632 <__aeabi_dmul+0x96>
 8002630:	e07e      	b.n	8002730 <__aeabi_dmul+0x194>
 8002632:	4bc2      	ldr	r3, [pc, #776]	; (800293c <__aeabi_dmul+0x3a0>)
 8002634:	0089      	lsls	r1, r1, #2
 8002636:	5859      	ldr	r1, [r3, r1]
 8002638:	468f      	mov	pc, r1
 800263a:	4652      	mov	r2, sl
 800263c:	9b00      	ldr	r3, [sp, #0]
 800263e:	4332      	orrs	r2, r6
 8002640:	d000      	beq.n	8002644 <__aeabi_dmul+0xa8>
 8002642:	e156      	b.n	80028f2 <__aeabi_dmul+0x356>
 8002644:	49bb      	ldr	r1, [pc, #748]	; (8002934 <__aeabi_dmul+0x398>)
 8002646:	2600      	movs	r6, #0
 8002648:	468c      	mov	ip, r1
 800264a:	4463      	add	r3, ip
 800264c:	4649      	mov	r1, r9
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2302      	movs	r3, #2
 8002652:	4319      	orrs	r1, r3
 8002654:	4689      	mov	r9, r1
 8002656:	2002      	movs	r0, #2
 8002658:	e7e1      	b.n	800261e <__aeabi_dmul+0x82>
 800265a:	4643      	mov	r3, r8
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	0034      	movs	r4, r6
 8002660:	0015      	movs	r5, r2
 8002662:	4683      	mov	fp, r0
 8002664:	465b      	mov	r3, fp
 8002666:	2b02      	cmp	r3, #2
 8002668:	d05e      	beq.n	8002728 <__aeabi_dmul+0x18c>
 800266a:	2b03      	cmp	r3, #3
 800266c:	d100      	bne.n	8002670 <__aeabi_dmul+0xd4>
 800266e:	e1f3      	b.n	8002a58 <__aeabi_dmul+0x4bc>
 8002670:	2b01      	cmp	r3, #1
 8002672:	d000      	beq.n	8002676 <__aeabi_dmul+0xda>
 8002674:	e118      	b.n	80028a8 <__aeabi_dmul+0x30c>
 8002676:	2200      	movs	r2, #0
 8002678:	2400      	movs	r4, #0
 800267a:	2500      	movs	r5, #0
 800267c:	9b01      	ldr	r3, [sp, #4]
 800267e:	0512      	lsls	r2, r2, #20
 8002680:	4322      	orrs	r2, r4
 8002682:	07db      	lsls	r3, r3, #31
 8002684:	431a      	orrs	r2, r3
 8002686:	0028      	movs	r0, r5
 8002688:	0011      	movs	r1, r2
 800268a:	b007      	add	sp, #28
 800268c:	bcf0      	pop	{r4, r5, r6, r7}
 800268e:	46bb      	mov	fp, r7
 8002690:	46b2      	mov	sl, r6
 8002692:	46a9      	mov	r9, r5
 8002694:	46a0      	mov	r8, r4
 8002696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002698:	0025      	movs	r5, r4
 800269a:	4305      	orrs	r5, r0
 800269c:	d100      	bne.n	80026a0 <__aeabi_dmul+0x104>
 800269e:	e141      	b.n	8002924 <__aeabi_dmul+0x388>
 80026a0:	2c00      	cmp	r4, #0
 80026a2:	d100      	bne.n	80026a6 <__aeabi_dmul+0x10a>
 80026a4:	e1ad      	b.n	8002a02 <__aeabi_dmul+0x466>
 80026a6:	0020      	movs	r0, r4
 80026a8:	f000 fef0 	bl	800348c <__clzsi2>
 80026ac:	0001      	movs	r1, r0
 80026ae:	0002      	movs	r2, r0
 80026b0:	390b      	subs	r1, #11
 80026b2:	231d      	movs	r3, #29
 80026b4:	0010      	movs	r0, r2
 80026b6:	1a5b      	subs	r3, r3, r1
 80026b8:	0031      	movs	r1, r6
 80026ba:	0035      	movs	r5, r6
 80026bc:	3808      	subs	r0, #8
 80026be:	4084      	lsls	r4, r0
 80026c0:	40d9      	lsrs	r1, r3
 80026c2:	4085      	lsls	r5, r0
 80026c4:	430c      	orrs	r4, r1
 80026c6:	489e      	ldr	r0, [pc, #632]	; (8002940 <__aeabi_dmul+0x3a4>)
 80026c8:	1a83      	subs	r3, r0, r2
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2300      	movs	r3, #0
 80026ce:	4699      	mov	r9, r3
 80026d0:	469b      	mov	fp, r3
 80026d2:	e786      	b.n	80025e2 <__aeabi_dmul+0x46>
 80026d4:	0005      	movs	r5, r0
 80026d6:	4325      	orrs	r5, r4
 80026d8:	d000      	beq.n	80026dc <__aeabi_dmul+0x140>
 80026da:	e11c      	b.n	8002916 <__aeabi_dmul+0x37a>
 80026dc:	2208      	movs	r2, #8
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2302      	movs	r3, #2
 80026e2:	2400      	movs	r4, #0
 80026e4:	4691      	mov	r9, r2
 80026e6:	469b      	mov	fp, r3
 80026e8:	e77b      	b.n	80025e2 <__aeabi_dmul+0x46>
 80026ea:	4652      	mov	r2, sl
 80026ec:	4332      	orrs	r2, r6
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dmul+0x156>
 80026f0:	e10a      	b.n	8002908 <__aeabi_dmul+0x36c>
 80026f2:	2e00      	cmp	r6, #0
 80026f4:	d100      	bne.n	80026f8 <__aeabi_dmul+0x15c>
 80026f6:	e176      	b.n	80029e6 <__aeabi_dmul+0x44a>
 80026f8:	0030      	movs	r0, r6
 80026fa:	f000 fec7 	bl	800348c <__clzsi2>
 80026fe:	0002      	movs	r2, r0
 8002700:	3a0b      	subs	r2, #11
 8002702:	231d      	movs	r3, #29
 8002704:	0001      	movs	r1, r0
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	4652      	mov	r2, sl
 800270a:	3908      	subs	r1, #8
 800270c:	40da      	lsrs	r2, r3
 800270e:	408e      	lsls	r6, r1
 8002710:	4316      	orrs	r6, r2
 8002712:	4652      	mov	r2, sl
 8002714:	408a      	lsls	r2, r1
 8002716:	9b00      	ldr	r3, [sp, #0]
 8002718:	4989      	ldr	r1, [pc, #548]	; (8002940 <__aeabi_dmul+0x3a4>)
 800271a:	1a18      	subs	r0, r3, r0
 800271c:	0003      	movs	r3, r0
 800271e:	468c      	mov	ip, r1
 8002720:	4463      	add	r3, ip
 8002722:	2000      	movs	r0, #0
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	e77a      	b.n	800261e <__aeabi_dmul+0x82>
 8002728:	2400      	movs	r4, #0
 800272a:	2500      	movs	r5, #0
 800272c:	4a81      	ldr	r2, [pc, #516]	; (8002934 <__aeabi_dmul+0x398>)
 800272e:	e7a5      	b.n	800267c <__aeabi_dmul+0xe0>
 8002730:	0c2f      	lsrs	r7, r5, #16
 8002732:	042d      	lsls	r5, r5, #16
 8002734:	0c2d      	lsrs	r5, r5, #16
 8002736:	002b      	movs	r3, r5
 8002738:	0c11      	lsrs	r1, r2, #16
 800273a:	0412      	lsls	r2, r2, #16
 800273c:	0c12      	lsrs	r2, r2, #16
 800273e:	4353      	muls	r3, r2
 8002740:	4698      	mov	r8, r3
 8002742:	0013      	movs	r3, r2
 8002744:	0028      	movs	r0, r5
 8002746:	437b      	muls	r3, r7
 8002748:	4699      	mov	r9, r3
 800274a:	4348      	muls	r0, r1
 800274c:	4448      	add	r0, r9
 800274e:	4683      	mov	fp, r0
 8002750:	4640      	mov	r0, r8
 8002752:	000b      	movs	r3, r1
 8002754:	0c00      	lsrs	r0, r0, #16
 8002756:	4682      	mov	sl, r0
 8002758:	4658      	mov	r0, fp
 800275a:	437b      	muls	r3, r7
 800275c:	4450      	add	r0, sl
 800275e:	9302      	str	r3, [sp, #8]
 8002760:	4581      	cmp	r9, r0
 8002762:	d906      	bls.n	8002772 <__aeabi_dmul+0x1d6>
 8002764:	469a      	mov	sl, r3
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	025b      	lsls	r3, r3, #9
 800276a:	4699      	mov	r9, r3
 800276c:	44ca      	add	sl, r9
 800276e:	4653      	mov	r3, sl
 8002770:	9302      	str	r3, [sp, #8]
 8002772:	0c03      	lsrs	r3, r0, #16
 8002774:	469b      	mov	fp, r3
 8002776:	4643      	mov	r3, r8
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	0400      	lsls	r0, r0, #16
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	4698      	mov	r8, r3
 8002780:	0003      	movs	r3, r0
 8002782:	4443      	add	r3, r8
 8002784:	9304      	str	r3, [sp, #16]
 8002786:	0c33      	lsrs	r3, r6, #16
 8002788:	4699      	mov	r9, r3
 800278a:	002b      	movs	r3, r5
 800278c:	0436      	lsls	r6, r6, #16
 800278e:	0c36      	lsrs	r6, r6, #16
 8002790:	4373      	muls	r3, r6
 8002792:	4698      	mov	r8, r3
 8002794:	0033      	movs	r3, r6
 8002796:	437b      	muls	r3, r7
 8002798:	469a      	mov	sl, r3
 800279a:	464b      	mov	r3, r9
 800279c:	435d      	muls	r5, r3
 800279e:	435f      	muls	r7, r3
 80027a0:	4643      	mov	r3, r8
 80027a2:	4455      	add	r5, sl
 80027a4:	0c18      	lsrs	r0, r3, #16
 80027a6:	1940      	adds	r0, r0, r5
 80027a8:	4582      	cmp	sl, r0
 80027aa:	d903      	bls.n	80027b4 <__aeabi_dmul+0x218>
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	025b      	lsls	r3, r3, #9
 80027b0:	469a      	mov	sl, r3
 80027b2:	4457      	add	r7, sl
 80027b4:	0c05      	lsrs	r5, r0, #16
 80027b6:	19eb      	adds	r3, r5, r7
 80027b8:	9305      	str	r3, [sp, #20]
 80027ba:	4643      	mov	r3, r8
 80027bc:	041d      	lsls	r5, r3, #16
 80027be:	0c2d      	lsrs	r5, r5, #16
 80027c0:	0400      	lsls	r0, r0, #16
 80027c2:	1940      	adds	r0, r0, r5
 80027c4:	0c25      	lsrs	r5, r4, #16
 80027c6:	0424      	lsls	r4, r4, #16
 80027c8:	0c24      	lsrs	r4, r4, #16
 80027ca:	0027      	movs	r7, r4
 80027cc:	4357      	muls	r7, r2
 80027ce:	436a      	muls	r2, r5
 80027d0:	4690      	mov	r8, r2
 80027d2:	002a      	movs	r2, r5
 80027d4:	0c3b      	lsrs	r3, r7, #16
 80027d6:	469a      	mov	sl, r3
 80027d8:	434a      	muls	r2, r1
 80027da:	4361      	muls	r1, r4
 80027dc:	4441      	add	r1, r8
 80027de:	4451      	add	r1, sl
 80027e0:	4483      	add	fp, r0
 80027e2:	4588      	cmp	r8, r1
 80027e4:	d903      	bls.n	80027ee <__aeabi_dmul+0x252>
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	025b      	lsls	r3, r3, #9
 80027ea:	4698      	mov	r8, r3
 80027ec:	4442      	add	r2, r8
 80027ee:	043f      	lsls	r7, r7, #16
 80027f0:	0c0b      	lsrs	r3, r1, #16
 80027f2:	0c3f      	lsrs	r7, r7, #16
 80027f4:	0409      	lsls	r1, r1, #16
 80027f6:	19c9      	adds	r1, r1, r7
 80027f8:	0027      	movs	r7, r4
 80027fa:	4698      	mov	r8, r3
 80027fc:	464b      	mov	r3, r9
 80027fe:	4377      	muls	r7, r6
 8002800:	435c      	muls	r4, r3
 8002802:	436e      	muls	r6, r5
 8002804:	435d      	muls	r5, r3
 8002806:	0c3b      	lsrs	r3, r7, #16
 8002808:	4699      	mov	r9, r3
 800280a:	19a4      	adds	r4, r4, r6
 800280c:	444c      	add	r4, r9
 800280e:	4442      	add	r2, r8
 8002810:	9503      	str	r5, [sp, #12]
 8002812:	42a6      	cmp	r6, r4
 8002814:	d904      	bls.n	8002820 <__aeabi_dmul+0x284>
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	025b      	lsls	r3, r3, #9
 800281a:	4698      	mov	r8, r3
 800281c:	4445      	add	r5, r8
 800281e:	9503      	str	r5, [sp, #12]
 8002820:	9b02      	ldr	r3, [sp, #8]
 8002822:	043f      	lsls	r7, r7, #16
 8002824:	445b      	add	r3, fp
 8002826:	001e      	movs	r6, r3
 8002828:	4283      	cmp	r3, r0
 800282a:	4180      	sbcs	r0, r0
 800282c:	0423      	lsls	r3, r4, #16
 800282e:	4698      	mov	r8, r3
 8002830:	9b05      	ldr	r3, [sp, #20]
 8002832:	0c3f      	lsrs	r7, r7, #16
 8002834:	4447      	add	r7, r8
 8002836:	4698      	mov	r8, r3
 8002838:	1876      	adds	r6, r6, r1
 800283a:	428e      	cmp	r6, r1
 800283c:	4189      	sbcs	r1, r1
 800283e:	4447      	add	r7, r8
 8002840:	4240      	negs	r0, r0
 8002842:	183d      	adds	r5, r7, r0
 8002844:	46a8      	mov	r8, r5
 8002846:	4693      	mov	fp, r2
 8002848:	4249      	negs	r1, r1
 800284a:	468a      	mov	sl, r1
 800284c:	44c3      	add	fp, r8
 800284e:	429f      	cmp	r7, r3
 8002850:	41bf      	sbcs	r7, r7
 8002852:	4580      	cmp	r8, r0
 8002854:	4180      	sbcs	r0, r0
 8002856:	9b03      	ldr	r3, [sp, #12]
 8002858:	44da      	add	sl, fp
 800285a:	4698      	mov	r8, r3
 800285c:	4653      	mov	r3, sl
 800285e:	4240      	negs	r0, r0
 8002860:	427f      	negs	r7, r7
 8002862:	4307      	orrs	r7, r0
 8002864:	0c24      	lsrs	r4, r4, #16
 8002866:	4593      	cmp	fp, r2
 8002868:	4192      	sbcs	r2, r2
 800286a:	458a      	cmp	sl, r1
 800286c:	4189      	sbcs	r1, r1
 800286e:	193f      	adds	r7, r7, r4
 8002870:	0ddc      	lsrs	r4, r3, #23
 8002872:	9b04      	ldr	r3, [sp, #16]
 8002874:	0275      	lsls	r5, r6, #9
 8002876:	431d      	orrs	r5, r3
 8002878:	1e68      	subs	r0, r5, #1
 800287a:	4185      	sbcs	r5, r0
 800287c:	4653      	mov	r3, sl
 800287e:	4252      	negs	r2, r2
 8002880:	4249      	negs	r1, r1
 8002882:	430a      	orrs	r2, r1
 8002884:	18bf      	adds	r7, r7, r2
 8002886:	4447      	add	r7, r8
 8002888:	0df6      	lsrs	r6, r6, #23
 800288a:	027f      	lsls	r7, r7, #9
 800288c:	4335      	orrs	r5, r6
 800288e:	025a      	lsls	r2, r3, #9
 8002890:	433c      	orrs	r4, r7
 8002892:	4315      	orrs	r5, r2
 8002894:	01fb      	lsls	r3, r7, #7
 8002896:	d400      	bmi.n	800289a <__aeabi_dmul+0x2fe>
 8002898:	e0c1      	b.n	8002a1e <__aeabi_dmul+0x482>
 800289a:	2101      	movs	r1, #1
 800289c:	086a      	lsrs	r2, r5, #1
 800289e:	400d      	ands	r5, r1
 80028a0:	4315      	orrs	r5, r2
 80028a2:	07e2      	lsls	r2, r4, #31
 80028a4:	4315      	orrs	r5, r2
 80028a6:	0864      	lsrs	r4, r4, #1
 80028a8:	4926      	ldr	r1, [pc, #152]	; (8002944 <__aeabi_dmul+0x3a8>)
 80028aa:	4461      	add	r1, ip
 80028ac:	2900      	cmp	r1, #0
 80028ae:	dd56      	ble.n	800295e <__aeabi_dmul+0x3c2>
 80028b0:	076b      	lsls	r3, r5, #29
 80028b2:	d009      	beq.n	80028c8 <__aeabi_dmul+0x32c>
 80028b4:	220f      	movs	r2, #15
 80028b6:	402a      	ands	r2, r5
 80028b8:	2a04      	cmp	r2, #4
 80028ba:	d005      	beq.n	80028c8 <__aeabi_dmul+0x32c>
 80028bc:	1d2a      	adds	r2, r5, #4
 80028be:	42aa      	cmp	r2, r5
 80028c0:	41ad      	sbcs	r5, r5
 80028c2:	426d      	negs	r5, r5
 80028c4:	1964      	adds	r4, r4, r5
 80028c6:	0015      	movs	r5, r2
 80028c8:	01e3      	lsls	r3, r4, #7
 80028ca:	d504      	bpl.n	80028d6 <__aeabi_dmul+0x33a>
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <__aeabi_dmul+0x3ac>)
 80028d0:	00c9      	lsls	r1, r1, #3
 80028d2:	4014      	ands	r4, r2
 80028d4:	4461      	add	r1, ip
 80028d6:	4a1d      	ldr	r2, [pc, #116]	; (800294c <__aeabi_dmul+0x3b0>)
 80028d8:	4291      	cmp	r1, r2
 80028da:	dd00      	ble.n	80028de <__aeabi_dmul+0x342>
 80028dc:	e724      	b.n	8002728 <__aeabi_dmul+0x18c>
 80028de:	0762      	lsls	r2, r4, #29
 80028e0:	08ed      	lsrs	r5, r5, #3
 80028e2:	0264      	lsls	r4, r4, #9
 80028e4:	0549      	lsls	r1, r1, #21
 80028e6:	4315      	orrs	r5, r2
 80028e8:	0b24      	lsrs	r4, r4, #12
 80028ea:	0d4a      	lsrs	r2, r1, #21
 80028ec:	e6c6      	b.n	800267c <__aeabi_dmul+0xe0>
 80028ee:	9701      	str	r7, [sp, #4]
 80028f0:	e6b8      	b.n	8002664 <__aeabi_dmul+0xc8>
 80028f2:	4a10      	ldr	r2, [pc, #64]	; (8002934 <__aeabi_dmul+0x398>)
 80028f4:	2003      	movs	r0, #3
 80028f6:	4694      	mov	ip, r2
 80028f8:	4463      	add	r3, ip
 80028fa:	464a      	mov	r2, r9
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2303      	movs	r3, #3
 8002900:	431a      	orrs	r2, r3
 8002902:	4691      	mov	r9, r2
 8002904:	4652      	mov	r2, sl
 8002906:	e68a      	b.n	800261e <__aeabi_dmul+0x82>
 8002908:	4649      	mov	r1, r9
 800290a:	2301      	movs	r3, #1
 800290c:	4319      	orrs	r1, r3
 800290e:	4689      	mov	r9, r1
 8002910:	2600      	movs	r6, #0
 8002912:	2001      	movs	r0, #1
 8002914:	e683      	b.n	800261e <__aeabi_dmul+0x82>
 8002916:	220c      	movs	r2, #12
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2303      	movs	r3, #3
 800291c:	0005      	movs	r5, r0
 800291e:	4691      	mov	r9, r2
 8002920:	469b      	mov	fp, r3
 8002922:	e65e      	b.n	80025e2 <__aeabi_dmul+0x46>
 8002924:	2304      	movs	r3, #4
 8002926:	4699      	mov	r9, r3
 8002928:	2300      	movs	r3, #0
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	2400      	movs	r4, #0
 8002930:	469b      	mov	fp, r3
 8002932:	e656      	b.n	80025e2 <__aeabi_dmul+0x46>
 8002934:	000007ff 	.word	0x000007ff
 8002938:	fffffc01 	.word	0xfffffc01
 800293c:	0801b318 	.word	0x0801b318
 8002940:	fffffc0d 	.word	0xfffffc0d
 8002944:	000003ff 	.word	0x000003ff
 8002948:	feffffff 	.word	0xfeffffff
 800294c:	000007fe 	.word	0x000007fe
 8002950:	2300      	movs	r3, #0
 8002952:	2480      	movs	r4, #128	; 0x80
 8002954:	2500      	movs	r5, #0
 8002956:	4a44      	ldr	r2, [pc, #272]	; (8002a68 <__aeabi_dmul+0x4cc>)
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	0324      	lsls	r4, r4, #12
 800295c:	e68e      	b.n	800267c <__aeabi_dmul+0xe0>
 800295e:	2001      	movs	r0, #1
 8002960:	1a40      	subs	r0, r0, r1
 8002962:	2838      	cmp	r0, #56	; 0x38
 8002964:	dd00      	ble.n	8002968 <__aeabi_dmul+0x3cc>
 8002966:	e686      	b.n	8002676 <__aeabi_dmul+0xda>
 8002968:	281f      	cmp	r0, #31
 800296a:	dd5b      	ble.n	8002a24 <__aeabi_dmul+0x488>
 800296c:	221f      	movs	r2, #31
 800296e:	0023      	movs	r3, r4
 8002970:	4252      	negs	r2, r2
 8002972:	1a51      	subs	r1, r2, r1
 8002974:	40cb      	lsrs	r3, r1
 8002976:	0019      	movs	r1, r3
 8002978:	2820      	cmp	r0, #32
 800297a:	d003      	beq.n	8002984 <__aeabi_dmul+0x3e8>
 800297c:	4a3b      	ldr	r2, [pc, #236]	; (8002a6c <__aeabi_dmul+0x4d0>)
 800297e:	4462      	add	r2, ip
 8002980:	4094      	lsls	r4, r2
 8002982:	4325      	orrs	r5, r4
 8002984:	1e6a      	subs	r2, r5, #1
 8002986:	4195      	sbcs	r5, r2
 8002988:	002a      	movs	r2, r5
 800298a:	430a      	orrs	r2, r1
 800298c:	2107      	movs	r1, #7
 800298e:	000d      	movs	r5, r1
 8002990:	2400      	movs	r4, #0
 8002992:	4015      	ands	r5, r2
 8002994:	4211      	tst	r1, r2
 8002996:	d05b      	beq.n	8002a50 <__aeabi_dmul+0x4b4>
 8002998:	210f      	movs	r1, #15
 800299a:	2400      	movs	r4, #0
 800299c:	4011      	ands	r1, r2
 800299e:	2904      	cmp	r1, #4
 80029a0:	d053      	beq.n	8002a4a <__aeabi_dmul+0x4ae>
 80029a2:	1d11      	adds	r1, r2, #4
 80029a4:	4291      	cmp	r1, r2
 80029a6:	4192      	sbcs	r2, r2
 80029a8:	4252      	negs	r2, r2
 80029aa:	18a4      	adds	r4, r4, r2
 80029ac:	000a      	movs	r2, r1
 80029ae:	0223      	lsls	r3, r4, #8
 80029b0:	d54b      	bpl.n	8002a4a <__aeabi_dmul+0x4ae>
 80029b2:	2201      	movs	r2, #1
 80029b4:	2400      	movs	r4, #0
 80029b6:	2500      	movs	r5, #0
 80029b8:	e660      	b.n	800267c <__aeabi_dmul+0xe0>
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	031b      	lsls	r3, r3, #12
 80029be:	421c      	tst	r4, r3
 80029c0:	d009      	beq.n	80029d6 <__aeabi_dmul+0x43a>
 80029c2:	421e      	tst	r6, r3
 80029c4:	d107      	bne.n	80029d6 <__aeabi_dmul+0x43a>
 80029c6:	4333      	orrs	r3, r6
 80029c8:	031c      	lsls	r4, r3, #12
 80029ca:	4643      	mov	r3, r8
 80029cc:	0015      	movs	r5, r2
 80029ce:	0b24      	lsrs	r4, r4, #12
 80029d0:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <__aeabi_dmul+0x4cc>)
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	e652      	b.n	800267c <__aeabi_dmul+0xe0>
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	0312      	lsls	r2, r2, #12
 80029da:	4314      	orrs	r4, r2
 80029dc:	0324      	lsls	r4, r4, #12
 80029de:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <__aeabi_dmul+0x4cc>)
 80029e0:	0b24      	lsrs	r4, r4, #12
 80029e2:	9701      	str	r7, [sp, #4]
 80029e4:	e64a      	b.n	800267c <__aeabi_dmul+0xe0>
 80029e6:	f000 fd51 	bl	800348c <__clzsi2>
 80029ea:	0003      	movs	r3, r0
 80029ec:	001a      	movs	r2, r3
 80029ee:	3215      	adds	r2, #21
 80029f0:	3020      	adds	r0, #32
 80029f2:	2a1c      	cmp	r2, #28
 80029f4:	dc00      	bgt.n	80029f8 <__aeabi_dmul+0x45c>
 80029f6:	e684      	b.n	8002702 <__aeabi_dmul+0x166>
 80029f8:	4656      	mov	r6, sl
 80029fa:	3b08      	subs	r3, #8
 80029fc:	2200      	movs	r2, #0
 80029fe:	409e      	lsls	r6, r3
 8002a00:	e689      	b.n	8002716 <__aeabi_dmul+0x17a>
 8002a02:	f000 fd43 	bl	800348c <__clzsi2>
 8002a06:	0001      	movs	r1, r0
 8002a08:	0002      	movs	r2, r0
 8002a0a:	3115      	adds	r1, #21
 8002a0c:	3220      	adds	r2, #32
 8002a0e:	291c      	cmp	r1, #28
 8002a10:	dc00      	bgt.n	8002a14 <__aeabi_dmul+0x478>
 8002a12:	e64e      	b.n	80026b2 <__aeabi_dmul+0x116>
 8002a14:	0034      	movs	r4, r6
 8002a16:	3808      	subs	r0, #8
 8002a18:	2500      	movs	r5, #0
 8002a1a:	4084      	lsls	r4, r0
 8002a1c:	e653      	b.n	80026c6 <__aeabi_dmul+0x12a>
 8002a1e:	9b00      	ldr	r3, [sp, #0]
 8002a20:	469c      	mov	ip, r3
 8002a22:	e741      	b.n	80028a8 <__aeabi_dmul+0x30c>
 8002a24:	4912      	ldr	r1, [pc, #72]	; (8002a70 <__aeabi_dmul+0x4d4>)
 8002a26:	0022      	movs	r2, r4
 8002a28:	4461      	add	r1, ip
 8002a2a:	002e      	movs	r6, r5
 8002a2c:	408d      	lsls	r5, r1
 8002a2e:	408a      	lsls	r2, r1
 8002a30:	40c6      	lsrs	r6, r0
 8002a32:	1e69      	subs	r1, r5, #1
 8002a34:	418d      	sbcs	r5, r1
 8002a36:	4332      	orrs	r2, r6
 8002a38:	432a      	orrs	r2, r5
 8002a3a:	40c4      	lsrs	r4, r0
 8002a3c:	0753      	lsls	r3, r2, #29
 8002a3e:	d0b6      	beq.n	80029ae <__aeabi_dmul+0x412>
 8002a40:	210f      	movs	r1, #15
 8002a42:	4011      	ands	r1, r2
 8002a44:	2904      	cmp	r1, #4
 8002a46:	d1ac      	bne.n	80029a2 <__aeabi_dmul+0x406>
 8002a48:	e7b1      	b.n	80029ae <__aeabi_dmul+0x412>
 8002a4a:	0765      	lsls	r5, r4, #29
 8002a4c:	0264      	lsls	r4, r4, #9
 8002a4e:	0b24      	lsrs	r4, r4, #12
 8002a50:	08d2      	lsrs	r2, r2, #3
 8002a52:	4315      	orrs	r5, r2
 8002a54:	2200      	movs	r2, #0
 8002a56:	e611      	b.n	800267c <__aeabi_dmul+0xe0>
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	0312      	lsls	r2, r2, #12
 8002a5c:	4314      	orrs	r4, r2
 8002a5e:	0324      	lsls	r4, r4, #12
 8002a60:	4a01      	ldr	r2, [pc, #4]	; (8002a68 <__aeabi_dmul+0x4cc>)
 8002a62:	0b24      	lsrs	r4, r4, #12
 8002a64:	e60a      	b.n	800267c <__aeabi_dmul+0xe0>
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	000007ff 	.word	0x000007ff
 8002a6c:	0000043e 	.word	0x0000043e
 8002a70:	0000041e 	.word	0x0000041e

08002a74 <__aeabi_dsub>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	4657      	mov	r7, sl
 8002a78:	464e      	mov	r6, r9
 8002a7a:	4645      	mov	r5, r8
 8002a7c:	46de      	mov	lr, fp
 8002a7e:	0004      	movs	r4, r0
 8002a80:	b5e0      	push	{r5, r6, r7, lr}
 8002a82:	001f      	movs	r7, r3
 8002a84:	0010      	movs	r0, r2
 8002a86:	030b      	lsls	r3, r1, #12
 8002a88:	0f62      	lsrs	r2, r4, #29
 8002a8a:	004e      	lsls	r6, r1, #1
 8002a8c:	0fcd      	lsrs	r5, r1, #31
 8002a8e:	0a5b      	lsrs	r3, r3, #9
 8002a90:	0339      	lsls	r1, r7, #12
 8002a92:	4313      	orrs	r3, r2
 8002a94:	0a49      	lsrs	r1, r1, #9
 8002a96:	00e2      	lsls	r2, r4, #3
 8002a98:	0f44      	lsrs	r4, r0, #29
 8002a9a:	4321      	orrs	r1, r4
 8002a9c:	4cc2      	ldr	r4, [pc, #776]	; (8002da8 <__aeabi_dsub+0x334>)
 8002a9e:	4691      	mov	r9, r2
 8002aa0:	4692      	mov	sl, r2
 8002aa2:	00c0      	lsls	r0, r0, #3
 8002aa4:	007a      	lsls	r2, r7, #1
 8002aa6:	4680      	mov	r8, r0
 8002aa8:	0d76      	lsrs	r6, r6, #21
 8002aaa:	0d52      	lsrs	r2, r2, #21
 8002aac:	0fff      	lsrs	r7, r7, #31
 8002aae:	42a2      	cmp	r2, r4
 8002ab0:	d100      	bne.n	8002ab4 <__aeabi_dsub+0x40>
 8002ab2:	e0b4      	b.n	8002c1e <__aeabi_dsub+0x1aa>
 8002ab4:	2401      	movs	r4, #1
 8002ab6:	4067      	eors	r7, r4
 8002ab8:	46bb      	mov	fp, r7
 8002aba:	42bd      	cmp	r5, r7
 8002abc:	d100      	bne.n	8002ac0 <__aeabi_dsub+0x4c>
 8002abe:	e088      	b.n	8002bd2 <__aeabi_dsub+0x15e>
 8002ac0:	1ab4      	subs	r4, r6, r2
 8002ac2:	46a4      	mov	ip, r4
 8002ac4:	2c00      	cmp	r4, #0
 8002ac6:	dc00      	bgt.n	8002aca <__aeabi_dsub+0x56>
 8002ac8:	e0b2      	b.n	8002c30 <__aeabi_dsub+0x1bc>
 8002aca:	2a00      	cmp	r2, #0
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x5c>
 8002ace:	e0c5      	b.n	8002c5c <__aeabi_dsub+0x1e8>
 8002ad0:	4ab5      	ldr	r2, [pc, #724]	; (8002da8 <__aeabi_dsub+0x334>)
 8002ad2:	4296      	cmp	r6, r2
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x64>
 8002ad6:	e28b      	b.n	8002ff0 <__aeabi_dsub+0x57c>
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	0412      	lsls	r2, r2, #16
 8002adc:	4311      	orrs	r1, r2
 8002ade:	4662      	mov	r2, ip
 8002ae0:	2a38      	cmp	r2, #56	; 0x38
 8002ae2:	dd00      	ble.n	8002ae6 <__aeabi_dsub+0x72>
 8002ae4:	e1a1      	b.n	8002e2a <__aeabi_dsub+0x3b6>
 8002ae6:	2a1f      	cmp	r2, #31
 8002ae8:	dd00      	ble.n	8002aec <__aeabi_dsub+0x78>
 8002aea:	e216      	b.n	8002f1a <__aeabi_dsub+0x4a6>
 8002aec:	2720      	movs	r7, #32
 8002aee:	000c      	movs	r4, r1
 8002af0:	1abf      	subs	r7, r7, r2
 8002af2:	40bc      	lsls	r4, r7
 8002af4:	0002      	movs	r2, r0
 8002af6:	46a0      	mov	r8, r4
 8002af8:	4664      	mov	r4, ip
 8002afa:	40b8      	lsls	r0, r7
 8002afc:	40e2      	lsrs	r2, r4
 8002afe:	4644      	mov	r4, r8
 8002b00:	4314      	orrs	r4, r2
 8002b02:	0002      	movs	r2, r0
 8002b04:	1e50      	subs	r0, r2, #1
 8002b06:	4182      	sbcs	r2, r0
 8002b08:	4660      	mov	r0, ip
 8002b0a:	40c1      	lsrs	r1, r0
 8002b0c:	4322      	orrs	r2, r4
 8002b0e:	1a5b      	subs	r3, r3, r1
 8002b10:	4649      	mov	r1, r9
 8002b12:	1a8c      	subs	r4, r1, r2
 8002b14:	45a1      	cmp	r9, r4
 8002b16:	4192      	sbcs	r2, r2
 8002b18:	4252      	negs	r2, r2
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	4698      	mov	r8, r3
 8002b1e:	4643      	mov	r3, r8
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	d400      	bmi.n	8002b26 <__aeabi_dsub+0xb2>
 8002b24:	e117      	b.n	8002d56 <__aeabi_dsub+0x2e2>
 8002b26:	4643      	mov	r3, r8
 8002b28:	025b      	lsls	r3, r3, #9
 8002b2a:	0a5b      	lsrs	r3, r3, #9
 8002b2c:	4698      	mov	r8, r3
 8002b2e:	4643      	mov	r3, r8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d100      	bne.n	8002b36 <__aeabi_dsub+0xc2>
 8002b34:	e16c      	b.n	8002e10 <__aeabi_dsub+0x39c>
 8002b36:	4640      	mov	r0, r8
 8002b38:	f000 fca8 	bl	800348c <__clzsi2>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	3a08      	subs	r2, #8
 8002b40:	2120      	movs	r1, #32
 8002b42:	0020      	movs	r0, r4
 8002b44:	4643      	mov	r3, r8
 8002b46:	1a89      	subs	r1, r1, r2
 8002b48:	4093      	lsls	r3, r2
 8002b4a:	40c8      	lsrs	r0, r1
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	4303      	orrs	r3, r0
 8002b50:	4296      	cmp	r6, r2
 8002b52:	dd00      	ble.n	8002b56 <__aeabi_dsub+0xe2>
 8002b54:	e157      	b.n	8002e06 <__aeabi_dsub+0x392>
 8002b56:	1b96      	subs	r6, r2, r6
 8002b58:	1c71      	adds	r1, r6, #1
 8002b5a:	291f      	cmp	r1, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0xec>
 8002b5e:	e1cb      	b.n	8002ef8 <__aeabi_dsub+0x484>
 8002b60:	2220      	movs	r2, #32
 8002b62:	0018      	movs	r0, r3
 8002b64:	0026      	movs	r6, r4
 8002b66:	1a52      	subs	r2, r2, r1
 8002b68:	4094      	lsls	r4, r2
 8002b6a:	4090      	lsls	r0, r2
 8002b6c:	40ce      	lsrs	r6, r1
 8002b6e:	40cb      	lsrs	r3, r1
 8002b70:	1e62      	subs	r2, r4, #1
 8002b72:	4194      	sbcs	r4, r2
 8002b74:	4330      	orrs	r0, r6
 8002b76:	4698      	mov	r8, r3
 8002b78:	2600      	movs	r6, #0
 8002b7a:	4304      	orrs	r4, r0
 8002b7c:	0763      	lsls	r3, r4, #29
 8002b7e:	d009      	beq.n	8002b94 <__aeabi_dsub+0x120>
 8002b80:	230f      	movs	r3, #15
 8002b82:	4023      	ands	r3, r4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d005      	beq.n	8002b94 <__aeabi_dsub+0x120>
 8002b88:	1d23      	adds	r3, r4, #4
 8002b8a:	42a3      	cmp	r3, r4
 8002b8c:	41a4      	sbcs	r4, r4
 8002b8e:	4264      	negs	r4, r4
 8002b90:	44a0      	add	r8, r4
 8002b92:	001c      	movs	r4, r3
 8002b94:	4643      	mov	r3, r8
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	d400      	bmi.n	8002b9c <__aeabi_dsub+0x128>
 8002b9a:	e0df      	b.n	8002d5c <__aeabi_dsub+0x2e8>
 8002b9c:	4b82      	ldr	r3, [pc, #520]	; (8002da8 <__aeabi_dsub+0x334>)
 8002b9e:	3601      	adds	r6, #1
 8002ba0:	429e      	cmp	r6, r3
 8002ba2:	d100      	bne.n	8002ba6 <__aeabi_dsub+0x132>
 8002ba4:	e0fb      	b.n	8002d9e <__aeabi_dsub+0x32a>
 8002ba6:	4642      	mov	r2, r8
 8002ba8:	4b80      	ldr	r3, [pc, #512]	; (8002dac <__aeabi_dsub+0x338>)
 8002baa:	08e4      	lsrs	r4, r4, #3
 8002bac:	401a      	ands	r2, r3
 8002bae:	0013      	movs	r3, r2
 8002bb0:	0571      	lsls	r1, r6, #21
 8002bb2:	0752      	lsls	r2, r2, #29
 8002bb4:	025b      	lsls	r3, r3, #9
 8002bb6:	4322      	orrs	r2, r4
 8002bb8:	0b1b      	lsrs	r3, r3, #12
 8002bba:	0d49      	lsrs	r1, r1, #21
 8002bbc:	0509      	lsls	r1, r1, #20
 8002bbe:	07ed      	lsls	r5, r5, #31
 8002bc0:	4319      	orrs	r1, r3
 8002bc2:	4329      	orrs	r1, r5
 8002bc4:	0010      	movs	r0, r2
 8002bc6:	bcf0      	pop	{r4, r5, r6, r7}
 8002bc8:	46bb      	mov	fp, r7
 8002bca:	46b2      	mov	sl, r6
 8002bcc:	46a9      	mov	r9, r5
 8002bce:	46a0      	mov	r8, r4
 8002bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd2:	1ab4      	subs	r4, r6, r2
 8002bd4:	46a4      	mov	ip, r4
 8002bd6:	2c00      	cmp	r4, #0
 8002bd8:	dd58      	ble.n	8002c8c <__aeabi_dsub+0x218>
 8002bda:	2a00      	cmp	r2, #0
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0x16c>
 8002bde:	e09e      	b.n	8002d1e <__aeabi_dsub+0x2aa>
 8002be0:	4a71      	ldr	r2, [pc, #452]	; (8002da8 <__aeabi_dsub+0x334>)
 8002be2:	4296      	cmp	r6, r2
 8002be4:	d100      	bne.n	8002be8 <__aeabi_dsub+0x174>
 8002be6:	e13b      	b.n	8002e60 <__aeabi_dsub+0x3ec>
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	0412      	lsls	r2, r2, #16
 8002bec:	4311      	orrs	r1, r2
 8002bee:	4662      	mov	r2, ip
 8002bf0:	2a38      	cmp	r2, #56	; 0x38
 8002bf2:	dd00      	ble.n	8002bf6 <__aeabi_dsub+0x182>
 8002bf4:	e0c1      	b.n	8002d7a <__aeabi_dsub+0x306>
 8002bf6:	2a1f      	cmp	r2, #31
 8002bf8:	dc00      	bgt.n	8002bfc <__aeabi_dsub+0x188>
 8002bfa:	e1bb      	b.n	8002f74 <__aeabi_dsub+0x500>
 8002bfc:	000c      	movs	r4, r1
 8002bfe:	3a20      	subs	r2, #32
 8002c00:	40d4      	lsrs	r4, r2
 8002c02:	0022      	movs	r2, r4
 8002c04:	4664      	mov	r4, ip
 8002c06:	2c20      	cmp	r4, #32
 8002c08:	d004      	beq.n	8002c14 <__aeabi_dsub+0x1a0>
 8002c0a:	2740      	movs	r7, #64	; 0x40
 8002c0c:	1b3f      	subs	r7, r7, r4
 8002c0e:	40b9      	lsls	r1, r7
 8002c10:	4308      	orrs	r0, r1
 8002c12:	4680      	mov	r8, r0
 8002c14:	4644      	mov	r4, r8
 8002c16:	1e61      	subs	r1, r4, #1
 8002c18:	418c      	sbcs	r4, r1
 8002c1a:	4314      	orrs	r4, r2
 8002c1c:	e0b1      	b.n	8002d82 <__aeabi_dsub+0x30e>
 8002c1e:	000c      	movs	r4, r1
 8002c20:	4304      	orrs	r4, r0
 8002c22:	d02a      	beq.n	8002c7a <__aeabi_dsub+0x206>
 8002c24:	46bb      	mov	fp, r7
 8002c26:	42bd      	cmp	r5, r7
 8002c28:	d02d      	beq.n	8002c86 <__aeabi_dsub+0x212>
 8002c2a:	4c61      	ldr	r4, [pc, #388]	; (8002db0 <__aeabi_dsub+0x33c>)
 8002c2c:	46a4      	mov	ip, r4
 8002c2e:	44b4      	add	ip, r6
 8002c30:	4664      	mov	r4, ip
 8002c32:	2c00      	cmp	r4, #0
 8002c34:	d05c      	beq.n	8002cf0 <__aeabi_dsub+0x27c>
 8002c36:	1b94      	subs	r4, r2, r6
 8002c38:	46a4      	mov	ip, r4
 8002c3a:	2e00      	cmp	r6, #0
 8002c3c:	d000      	beq.n	8002c40 <__aeabi_dsub+0x1cc>
 8002c3e:	e115      	b.n	8002e6c <__aeabi_dsub+0x3f8>
 8002c40:	464d      	mov	r5, r9
 8002c42:	431d      	orrs	r5, r3
 8002c44:	d100      	bne.n	8002c48 <__aeabi_dsub+0x1d4>
 8002c46:	e1c3      	b.n	8002fd0 <__aeabi_dsub+0x55c>
 8002c48:	1e65      	subs	r5, r4, #1
 8002c4a:	2c01      	cmp	r4, #1
 8002c4c:	d100      	bne.n	8002c50 <__aeabi_dsub+0x1dc>
 8002c4e:	e20c      	b.n	800306a <__aeabi_dsub+0x5f6>
 8002c50:	4e55      	ldr	r6, [pc, #340]	; (8002da8 <__aeabi_dsub+0x334>)
 8002c52:	42b4      	cmp	r4, r6
 8002c54:	d100      	bne.n	8002c58 <__aeabi_dsub+0x1e4>
 8002c56:	e1f8      	b.n	800304a <__aeabi_dsub+0x5d6>
 8002c58:	46ac      	mov	ip, r5
 8002c5a:	e10e      	b.n	8002e7a <__aeabi_dsub+0x406>
 8002c5c:	000a      	movs	r2, r1
 8002c5e:	4302      	orrs	r2, r0
 8002c60:	d100      	bne.n	8002c64 <__aeabi_dsub+0x1f0>
 8002c62:	e136      	b.n	8002ed2 <__aeabi_dsub+0x45e>
 8002c64:	0022      	movs	r2, r4
 8002c66:	3a01      	subs	r2, #1
 8002c68:	2c01      	cmp	r4, #1
 8002c6a:	d100      	bne.n	8002c6e <__aeabi_dsub+0x1fa>
 8002c6c:	e1c6      	b.n	8002ffc <__aeabi_dsub+0x588>
 8002c6e:	4c4e      	ldr	r4, [pc, #312]	; (8002da8 <__aeabi_dsub+0x334>)
 8002c70:	45a4      	cmp	ip, r4
 8002c72:	d100      	bne.n	8002c76 <__aeabi_dsub+0x202>
 8002c74:	e0f4      	b.n	8002e60 <__aeabi_dsub+0x3ec>
 8002c76:	4694      	mov	ip, r2
 8002c78:	e731      	b.n	8002ade <__aeabi_dsub+0x6a>
 8002c7a:	2401      	movs	r4, #1
 8002c7c:	4067      	eors	r7, r4
 8002c7e:	46bb      	mov	fp, r7
 8002c80:	42bd      	cmp	r5, r7
 8002c82:	d000      	beq.n	8002c86 <__aeabi_dsub+0x212>
 8002c84:	e71c      	b.n	8002ac0 <__aeabi_dsub+0x4c>
 8002c86:	4c4a      	ldr	r4, [pc, #296]	; (8002db0 <__aeabi_dsub+0x33c>)
 8002c88:	46a4      	mov	ip, r4
 8002c8a:	44b4      	add	ip, r6
 8002c8c:	4664      	mov	r4, ip
 8002c8e:	2c00      	cmp	r4, #0
 8002c90:	d100      	bne.n	8002c94 <__aeabi_dsub+0x220>
 8002c92:	e0cf      	b.n	8002e34 <__aeabi_dsub+0x3c0>
 8002c94:	1b94      	subs	r4, r2, r6
 8002c96:	46a4      	mov	ip, r4
 8002c98:	2e00      	cmp	r6, #0
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x22a>
 8002c9c:	e15c      	b.n	8002f58 <__aeabi_dsub+0x4e4>
 8002c9e:	4e42      	ldr	r6, [pc, #264]	; (8002da8 <__aeabi_dsub+0x334>)
 8002ca0:	42b2      	cmp	r2, r6
 8002ca2:	d100      	bne.n	8002ca6 <__aeabi_dsub+0x232>
 8002ca4:	e1ec      	b.n	8003080 <__aeabi_dsub+0x60c>
 8002ca6:	2680      	movs	r6, #128	; 0x80
 8002ca8:	0436      	lsls	r6, r6, #16
 8002caa:	4333      	orrs	r3, r6
 8002cac:	4664      	mov	r4, ip
 8002cae:	2c38      	cmp	r4, #56	; 0x38
 8002cb0:	dd00      	ble.n	8002cb4 <__aeabi_dsub+0x240>
 8002cb2:	e1b3      	b.n	800301c <__aeabi_dsub+0x5a8>
 8002cb4:	2c1f      	cmp	r4, #31
 8002cb6:	dd00      	ble.n	8002cba <__aeabi_dsub+0x246>
 8002cb8:	e238      	b.n	800312c <__aeabi_dsub+0x6b8>
 8002cba:	2620      	movs	r6, #32
 8002cbc:	1b36      	subs	r6, r6, r4
 8002cbe:	001c      	movs	r4, r3
 8002cc0:	40b4      	lsls	r4, r6
 8002cc2:	464f      	mov	r7, r9
 8002cc4:	46a0      	mov	r8, r4
 8002cc6:	4664      	mov	r4, ip
 8002cc8:	40e7      	lsrs	r7, r4
 8002cca:	4644      	mov	r4, r8
 8002ccc:	433c      	orrs	r4, r7
 8002cce:	464f      	mov	r7, r9
 8002cd0:	40b7      	lsls	r7, r6
 8002cd2:	003e      	movs	r6, r7
 8002cd4:	1e77      	subs	r7, r6, #1
 8002cd6:	41be      	sbcs	r6, r7
 8002cd8:	4334      	orrs	r4, r6
 8002cda:	4666      	mov	r6, ip
 8002cdc:	40f3      	lsrs	r3, r6
 8002cde:	18c9      	adds	r1, r1, r3
 8002ce0:	1824      	adds	r4, r4, r0
 8002ce2:	4284      	cmp	r4, r0
 8002ce4:	419b      	sbcs	r3, r3
 8002ce6:	425b      	negs	r3, r3
 8002ce8:	4698      	mov	r8, r3
 8002cea:	0016      	movs	r6, r2
 8002cec:	4488      	add	r8, r1
 8002cee:	e04e      	b.n	8002d8e <__aeabi_dsub+0x31a>
 8002cf0:	4a30      	ldr	r2, [pc, #192]	; (8002db4 <__aeabi_dsub+0x340>)
 8002cf2:	1c74      	adds	r4, r6, #1
 8002cf4:	4214      	tst	r4, r2
 8002cf6:	d000      	beq.n	8002cfa <__aeabi_dsub+0x286>
 8002cf8:	e0d6      	b.n	8002ea8 <__aeabi_dsub+0x434>
 8002cfa:	464a      	mov	r2, r9
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	2e00      	cmp	r6, #0
 8002d00:	d000      	beq.n	8002d04 <__aeabi_dsub+0x290>
 8002d02:	e15b      	b.n	8002fbc <__aeabi_dsub+0x548>
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x296>
 8002d08:	e1a5      	b.n	8003056 <__aeabi_dsub+0x5e2>
 8002d0a:	000a      	movs	r2, r1
 8002d0c:	4302      	orrs	r2, r0
 8002d0e:	d000      	beq.n	8002d12 <__aeabi_dsub+0x29e>
 8002d10:	e1bb      	b.n	800308a <__aeabi_dsub+0x616>
 8002d12:	464a      	mov	r2, r9
 8002d14:	0759      	lsls	r1, r3, #29
 8002d16:	08d2      	lsrs	r2, r2, #3
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	08db      	lsrs	r3, r3, #3
 8002d1c:	e027      	b.n	8002d6e <__aeabi_dsub+0x2fa>
 8002d1e:	000a      	movs	r2, r1
 8002d20:	4302      	orrs	r2, r0
 8002d22:	d100      	bne.n	8002d26 <__aeabi_dsub+0x2b2>
 8002d24:	e174      	b.n	8003010 <__aeabi_dsub+0x59c>
 8002d26:	0022      	movs	r2, r4
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	2c01      	cmp	r4, #1
 8002d2c:	d005      	beq.n	8002d3a <__aeabi_dsub+0x2c6>
 8002d2e:	4c1e      	ldr	r4, [pc, #120]	; (8002da8 <__aeabi_dsub+0x334>)
 8002d30:	45a4      	cmp	ip, r4
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x2c2>
 8002d34:	e094      	b.n	8002e60 <__aeabi_dsub+0x3ec>
 8002d36:	4694      	mov	ip, r2
 8002d38:	e759      	b.n	8002bee <__aeabi_dsub+0x17a>
 8002d3a:	4448      	add	r0, r9
 8002d3c:	4548      	cmp	r0, r9
 8002d3e:	4192      	sbcs	r2, r2
 8002d40:	185b      	adds	r3, r3, r1
 8002d42:	4698      	mov	r8, r3
 8002d44:	0004      	movs	r4, r0
 8002d46:	4252      	negs	r2, r2
 8002d48:	4490      	add	r8, r2
 8002d4a:	4643      	mov	r3, r8
 8002d4c:	2602      	movs	r6, #2
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	d500      	bpl.n	8002d54 <__aeabi_dsub+0x2e0>
 8002d52:	e0c4      	b.n	8002ede <__aeabi_dsub+0x46a>
 8002d54:	3e01      	subs	r6, #1
 8002d56:	0763      	lsls	r3, r4, #29
 8002d58:	d000      	beq.n	8002d5c <__aeabi_dsub+0x2e8>
 8002d5a:	e711      	b.n	8002b80 <__aeabi_dsub+0x10c>
 8002d5c:	4643      	mov	r3, r8
 8002d5e:	46b4      	mov	ip, r6
 8002d60:	0759      	lsls	r1, r3, #29
 8002d62:	08e2      	lsrs	r2, r4, #3
 8002d64:	430a      	orrs	r2, r1
 8002d66:	08db      	lsrs	r3, r3, #3
 8002d68:	490f      	ldr	r1, [pc, #60]	; (8002da8 <__aeabi_dsub+0x334>)
 8002d6a:	458c      	cmp	ip, r1
 8002d6c:	d040      	beq.n	8002df0 <__aeabi_dsub+0x37c>
 8002d6e:	4661      	mov	r1, ip
 8002d70:	031b      	lsls	r3, r3, #12
 8002d72:	0549      	lsls	r1, r1, #21
 8002d74:	0b1b      	lsrs	r3, r3, #12
 8002d76:	0d49      	lsrs	r1, r1, #21
 8002d78:	e720      	b.n	8002bbc <__aeabi_dsub+0x148>
 8002d7a:	4301      	orrs	r1, r0
 8002d7c:	000c      	movs	r4, r1
 8002d7e:	1e61      	subs	r1, r4, #1
 8002d80:	418c      	sbcs	r4, r1
 8002d82:	444c      	add	r4, r9
 8002d84:	454c      	cmp	r4, r9
 8002d86:	4192      	sbcs	r2, r2
 8002d88:	4252      	negs	r2, r2
 8002d8a:	4690      	mov	r8, r2
 8002d8c:	4498      	add	r8, r3
 8002d8e:	4643      	mov	r3, r8
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	d5e0      	bpl.n	8002d56 <__aeabi_dsub+0x2e2>
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__aeabi_dsub+0x334>)
 8002d96:	3601      	adds	r6, #1
 8002d98:	429e      	cmp	r6, r3
 8002d9a:	d000      	beq.n	8002d9e <__aeabi_dsub+0x32a>
 8002d9c:	e09f      	b.n	8002ede <__aeabi_dsub+0x46a>
 8002d9e:	0031      	movs	r1, r6
 8002da0:	2300      	movs	r3, #0
 8002da2:	2200      	movs	r2, #0
 8002da4:	e70a      	b.n	8002bbc <__aeabi_dsub+0x148>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	000007ff 	.word	0x000007ff
 8002dac:	ff7fffff 	.word	0xff7fffff
 8002db0:	fffff801 	.word	0xfffff801
 8002db4:	000007fe 	.word	0x000007fe
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x34a>
 8002dbc:	e160      	b.n	8003080 <__aeabi_dsub+0x60c>
 8002dbe:	000a      	movs	r2, r1
 8002dc0:	4302      	orrs	r2, r0
 8002dc2:	d04d      	beq.n	8002e60 <__aeabi_dsub+0x3ec>
 8002dc4:	464a      	mov	r2, r9
 8002dc6:	075c      	lsls	r4, r3, #29
 8002dc8:	08d2      	lsrs	r2, r2, #3
 8002dca:	4322      	orrs	r2, r4
 8002dcc:	2480      	movs	r4, #128	; 0x80
 8002dce:	08db      	lsrs	r3, r3, #3
 8002dd0:	0324      	lsls	r4, r4, #12
 8002dd2:	4223      	tst	r3, r4
 8002dd4:	d007      	beq.n	8002de6 <__aeabi_dsub+0x372>
 8002dd6:	08ce      	lsrs	r6, r1, #3
 8002dd8:	4226      	tst	r6, r4
 8002dda:	d104      	bne.n	8002de6 <__aeabi_dsub+0x372>
 8002ddc:	465d      	mov	r5, fp
 8002dde:	0033      	movs	r3, r6
 8002de0:	08c2      	lsrs	r2, r0, #3
 8002de2:	0749      	lsls	r1, r1, #29
 8002de4:	430a      	orrs	r2, r1
 8002de6:	0f51      	lsrs	r1, r2, #29
 8002de8:	00d2      	lsls	r2, r2, #3
 8002dea:	08d2      	lsrs	r2, r2, #3
 8002dec:	0749      	lsls	r1, r1, #29
 8002dee:	430a      	orrs	r2, r1
 8002df0:	0011      	movs	r1, r2
 8002df2:	4319      	orrs	r1, r3
 8002df4:	d100      	bne.n	8002df8 <__aeabi_dsub+0x384>
 8002df6:	e1c8      	b.n	800318a <__aeabi_dsub+0x716>
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0309      	lsls	r1, r1, #12
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	031b      	lsls	r3, r3, #12
 8002e00:	49d5      	ldr	r1, [pc, #852]	; (8003158 <__aeabi_dsub+0x6e4>)
 8002e02:	0b1b      	lsrs	r3, r3, #12
 8002e04:	e6da      	b.n	8002bbc <__aeabi_dsub+0x148>
 8002e06:	49d5      	ldr	r1, [pc, #852]	; (800315c <__aeabi_dsub+0x6e8>)
 8002e08:	1ab6      	subs	r6, r6, r2
 8002e0a:	400b      	ands	r3, r1
 8002e0c:	4698      	mov	r8, r3
 8002e0e:	e6b5      	b.n	8002b7c <__aeabi_dsub+0x108>
 8002e10:	0020      	movs	r0, r4
 8002e12:	f000 fb3b 	bl	800348c <__clzsi2>
 8002e16:	0002      	movs	r2, r0
 8002e18:	3218      	adds	r2, #24
 8002e1a:	2a1f      	cmp	r2, #31
 8002e1c:	dc00      	bgt.n	8002e20 <__aeabi_dsub+0x3ac>
 8002e1e:	e68f      	b.n	8002b40 <__aeabi_dsub+0xcc>
 8002e20:	0023      	movs	r3, r4
 8002e22:	3808      	subs	r0, #8
 8002e24:	4083      	lsls	r3, r0
 8002e26:	2400      	movs	r4, #0
 8002e28:	e692      	b.n	8002b50 <__aeabi_dsub+0xdc>
 8002e2a:	4308      	orrs	r0, r1
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	1e50      	subs	r0, r2, #1
 8002e30:	4182      	sbcs	r2, r0
 8002e32:	e66d      	b.n	8002b10 <__aeabi_dsub+0x9c>
 8002e34:	4cca      	ldr	r4, [pc, #808]	; (8003160 <__aeabi_dsub+0x6ec>)
 8002e36:	1c72      	adds	r2, r6, #1
 8002e38:	4222      	tst	r2, r4
 8002e3a:	d000      	beq.n	8002e3e <__aeabi_dsub+0x3ca>
 8002e3c:	e0ad      	b.n	8002f9a <__aeabi_dsub+0x526>
 8002e3e:	464a      	mov	r2, r9
 8002e40:	431a      	orrs	r2, r3
 8002e42:	2e00      	cmp	r6, #0
 8002e44:	d1b8      	bne.n	8002db8 <__aeabi_dsub+0x344>
 8002e46:	2a00      	cmp	r2, #0
 8002e48:	d100      	bne.n	8002e4c <__aeabi_dsub+0x3d8>
 8002e4a:	e158      	b.n	80030fe <__aeabi_dsub+0x68a>
 8002e4c:	000a      	movs	r2, r1
 8002e4e:	4302      	orrs	r2, r0
 8002e50:	d000      	beq.n	8002e54 <__aeabi_dsub+0x3e0>
 8002e52:	e159      	b.n	8003108 <__aeabi_dsub+0x694>
 8002e54:	464a      	mov	r2, r9
 8002e56:	0759      	lsls	r1, r3, #29
 8002e58:	08d2      	lsrs	r2, r2, #3
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	08db      	lsrs	r3, r3, #3
 8002e5e:	e786      	b.n	8002d6e <__aeabi_dsub+0x2fa>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0759      	lsls	r1, r3, #29
 8002e64:	08d2      	lsrs	r2, r2, #3
 8002e66:	430a      	orrs	r2, r1
 8002e68:	08db      	lsrs	r3, r3, #3
 8002e6a:	e7c1      	b.n	8002df0 <__aeabi_dsub+0x37c>
 8002e6c:	4dba      	ldr	r5, [pc, #744]	; (8003158 <__aeabi_dsub+0x6e4>)
 8002e6e:	42aa      	cmp	r2, r5
 8002e70:	d100      	bne.n	8002e74 <__aeabi_dsub+0x400>
 8002e72:	e11e      	b.n	80030b2 <__aeabi_dsub+0x63e>
 8002e74:	2580      	movs	r5, #128	; 0x80
 8002e76:	042d      	lsls	r5, r5, #16
 8002e78:	432b      	orrs	r3, r5
 8002e7a:	4664      	mov	r4, ip
 8002e7c:	2c38      	cmp	r4, #56	; 0x38
 8002e7e:	dc5d      	bgt.n	8002f3c <__aeabi_dsub+0x4c8>
 8002e80:	2c1f      	cmp	r4, #31
 8002e82:	dd00      	ble.n	8002e86 <__aeabi_dsub+0x412>
 8002e84:	e0d0      	b.n	8003028 <__aeabi_dsub+0x5b4>
 8002e86:	2520      	movs	r5, #32
 8002e88:	4667      	mov	r7, ip
 8002e8a:	1b2d      	subs	r5, r5, r4
 8002e8c:	464e      	mov	r6, r9
 8002e8e:	001c      	movs	r4, r3
 8002e90:	40fe      	lsrs	r6, r7
 8002e92:	40ac      	lsls	r4, r5
 8002e94:	4334      	orrs	r4, r6
 8002e96:	464e      	mov	r6, r9
 8002e98:	40ae      	lsls	r6, r5
 8002e9a:	0035      	movs	r5, r6
 8002e9c:	40fb      	lsrs	r3, r7
 8002e9e:	1e6e      	subs	r6, r5, #1
 8002ea0:	41b5      	sbcs	r5, r6
 8002ea2:	1ac9      	subs	r1, r1, r3
 8002ea4:	432c      	orrs	r4, r5
 8002ea6:	e04e      	b.n	8002f46 <__aeabi_dsub+0x4d2>
 8002ea8:	464a      	mov	r2, r9
 8002eaa:	1a14      	subs	r4, r2, r0
 8002eac:	45a1      	cmp	r9, r4
 8002eae:	4192      	sbcs	r2, r2
 8002eb0:	4252      	negs	r2, r2
 8002eb2:	4690      	mov	r8, r2
 8002eb4:	1a5f      	subs	r7, r3, r1
 8002eb6:	003a      	movs	r2, r7
 8002eb8:	4647      	mov	r7, r8
 8002eba:	1bd2      	subs	r2, r2, r7
 8002ebc:	4690      	mov	r8, r2
 8002ebe:	0212      	lsls	r2, r2, #8
 8002ec0:	d500      	bpl.n	8002ec4 <__aeabi_dsub+0x450>
 8002ec2:	e08b      	b.n	8002fdc <__aeabi_dsub+0x568>
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	4322      	orrs	r2, r4
 8002ec8:	d000      	beq.n	8002ecc <__aeabi_dsub+0x458>
 8002eca:	e630      	b.n	8002b2e <__aeabi_dsub+0xba>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	2500      	movs	r5, #0
 8002ed0:	e74d      	b.n	8002d6e <__aeabi_dsub+0x2fa>
 8002ed2:	464a      	mov	r2, r9
 8002ed4:	0759      	lsls	r1, r3, #29
 8002ed6:	08d2      	lsrs	r2, r2, #3
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	08db      	lsrs	r3, r3, #3
 8002edc:	e744      	b.n	8002d68 <__aeabi_dsub+0x2f4>
 8002ede:	4642      	mov	r2, r8
 8002ee0:	4b9e      	ldr	r3, [pc, #632]	; (800315c <__aeabi_dsub+0x6e8>)
 8002ee2:	0861      	lsrs	r1, r4, #1
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	0013      	movs	r3, r2
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4014      	ands	r4, r2
 8002eec:	430c      	orrs	r4, r1
 8002eee:	07da      	lsls	r2, r3, #31
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	4698      	mov	r8, r3
 8002ef4:	4314      	orrs	r4, r2
 8002ef6:	e641      	b.n	8002b7c <__aeabi_dsub+0x108>
 8002ef8:	001a      	movs	r2, r3
 8002efa:	3e1f      	subs	r6, #31
 8002efc:	40f2      	lsrs	r2, r6
 8002efe:	0016      	movs	r6, r2
 8002f00:	2920      	cmp	r1, #32
 8002f02:	d003      	beq.n	8002f0c <__aeabi_dsub+0x498>
 8002f04:	2240      	movs	r2, #64	; 0x40
 8002f06:	1a51      	subs	r1, r2, r1
 8002f08:	408b      	lsls	r3, r1
 8002f0a:	431c      	orrs	r4, r3
 8002f0c:	1e62      	subs	r2, r4, #1
 8002f0e:	4194      	sbcs	r4, r2
 8002f10:	2300      	movs	r3, #0
 8002f12:	4334      	orrs	r4, r6
 8002f14:	4698      	mov	r8, r3
 8002f16:	2600      	movs	r6, #0
 8002f18:	e71d      	b.n	8002d56 <__aeabi_dsub+0x2e2>
 8002f1a:	000c      	movs	r4, r1
 8002f1c:	3a20      	subs	r2, #32
 8002f1e:	40d4      	lsrs	r4, r2
 8002f20:	0022      	movs	r2, r4
 8002f22:	4664      	mov	r4, ip
 8002f24:	2c20      	cmp	r4, #32
 8002f26:	d004      	beq.n	8002f32 <__aeabi_dsub+0x4be>
 8002f28:	2740      	movs	r7, #64	; 0x40
 8002f2a:	1b3f      	subs	r7, r7, r4
 8002f2c:	40b9      	lsls	r1, r7
 8002f2e:	4308      	orrs	r0, r1
 8002f30:	4680      	mov	r8, r0
 8002f32:	4644      	mov	r4, r8
 8002f34:	1e61      	subs	r1, r4, #1
 8002f36:	418c      	sbcs	r4, r1
 8002f38:	4322      	orrs	r2, r4
 8002f3a:	e5e9      	b.n	8002b10 <__aeabi_dsub+0x9c>
 8002f3c:	464c      	mov	r4, r9
 8002f3e:	4323      	orrs	r3, r4
 8002f40:	001c      	movs	r4, r3
 8002f42:	1e63      	subs	r3, r4, #1
 8002f44:	419c      	sbcs	r4, r3
 8002f46:	1b04      	subs	r4, r0, r4
 8002f48:	42a0      	cmp	r0, r4
 8002f4a:	419b      	sbcs	r3, r3
 8002f4c:	425b      	negs	r3, r3
 8002f4e:	1acb      	subs	r3, r1, r3
 8002f50:	4698      	mov	r8, r3
 8002f52:	465d      	mov	r5, fp
 8002f54:	0016      	movs	r6, r2
 8002f56:	e5e2      	b.n	8002b1e <__aeabi_dsub+0xaa>
 8002f58:	464e      	mov	r6, r9
 8002f5a:	431e      	orrs	r6, r3
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x4ec>
 8002f5e:	e0ae      	b.n	80030be <__aeabi_dsub+0x64a>
 8002f60:	1e66      	subs	r6, r4, #1
 8002f62:	2c01      	cmp	r4, #1
 8002f64:	d100      	bne.n	8002f68 <__aeabi_dsub+0x4f4>
 8002f66:	e0fd      	b.n	8003164 <__aeabi_dsub+0x6f0>
 8002f68:	4f7b      	ldr	r7, [pc, #492]	; (8003158 <__aeabi_dsub+0x6e4>)
 8002f6a:	42bc      	cmp	r4, r7
 8002f6c:	d100      	bne.n	8002f70 <__aeabi_dsub+0x4fc>
 8002f6e:	e107      	b.n	8003180 <__aeabi_dsub+0x70c>
 8002f70:	46b4      	mov	ip, r6
 8002f72:	e69b      	b.n	8002cac <__aeabi_dsub+0x238>
 8002f74:	4664      	mov	r4, ip
 8002f76:	2220      	movs	r2, #32
 8002f78:	1b12      	subs	r2, r2, r4
 8002f7a:	000c      	movs	r4, r1
 8002f7c:	4094      	lsls	r4, r2
 8002f7e:	0007      	movs	r7, r0
 8002f80:	4090      	lsls	r0, r2
 8002f82:	46a0      	mov	r8, r4
 8002f84:	4664      	mov	r4, ip
 8002f86:	1e42      	subs	r2, r0, #1
 8002f88:	4190      	sbcs	r0, r2
 8002f8a:	4662      	mov	r2, ip
 8002f8c:	40e7      	lsrs	r7, r4
 8002f8e:	4644      	mov	r4, r8
 8002f90:	40d1      	lsrs	r1, r2
 8002f92:	433c      	orrs	r4, r7
 8002f94:	4304      	orrs	r4, r0
 8002f96:	185b      	adds	r3, r3, r1
 8002f98:	e6f3      	b.n	8002d82 <__aeabi_dsub+0x30e>
 8002f9a:	4c6f      	ldr	r4, [pc, #444]	; (8003158 <__aeabi_dsub+0x6e4>)
 8002f9c:	42a2      	cmp	r2, r4
 8002f9e:	d100      	bne.n	8002fa2 <__aeabi_dsub+0x52e>
 8002fa0:	e0d5      	b.n	800314e <__aeabi_dsub+0x6da>
 8002fa2:	4448      	add	r0, r9
 8002fa4:	185b      	adds	r3, r3, r1
 8002fa6:	4548      	cmp	r0, r9
 8002fa8:	4189      	sbcs	r1, r1
 8002faa:	4249      	negs	r1, r1
 8002fac:	185b      	adds	r3, r3, r1
 8002fae:	07dc      	lsls	r4, r3, #31
 8002fb0:	0840      	lsrs	r0, r0, #1
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	4698      	mov	r8, r3
 8002fb6:	0016      	movs	r6, r2
 8002fb8:	4304      	orrs	r4, r0
 8002fba:	e6cc      	b.n	8002d56 <__aeabi_dsub+0x2e2>
 8002fbc:	2a00      	cmp	r2, #0
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x54e>
 8002fc0:	e082      	b.n	80030c8 <__aeabi_dsub+0x654>
 8002fc2:	000a      	movs	r2, r1
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	d140      	bne.n	800304a <__aeabi_dsub+0x5d6>
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	2500      	movs	r5, #0
 8002fcc:	031b      	lsls	r3, r3, #12
 8002fce:	e713      	b.n	8002df8 <__aeabi_dsub+0x384>
 8002fd0:	074b      	lsls	r3, r1, #29
 8002fd2:	08c2      	lsrs	r2, r0, #3
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	465d      	mov	r5, fp
 8002fd8:	08cb      	lsrs	r3, r1, #3
 8002fda:	e6c5      	b.n	8002d68 <__aeabi_dsub+0x2f4>
 8002fdc:	464a      	mov	r2, r9
 8002fde:	1a84      	subs	r4, r0, r2
 8002fe0:	42a0      	cmp	r0, r4
 8002fe2:	4192      	sbcs	r2, r2
 8002fe4:	1acb      	subs	r3, r1, r3
 8002fe6:	4252      	negs	r2, r2
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	4698      	mov	r8, r3
 8002fec:	465d      	mov	r5, fp
 8002fee:	e59e      	b.n	8002b2e <__aeabi_dsub+0xba>
 8002ff0:	464a      	mov	r2, r9
 8002ff2:	0759      	lsls	r1, r3, #29
 8002ff4:	08d2      	lsrs	r2, r2, #3
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	08db      	lsrs	r3, r3, #3
 8002ffa:	e6f9      	b.n	8002df0 <__aeabi_dsub+0x37c>
 8002ffc:	464a      	mov	r2, r9
 8002ffe:	1a14      	subs	r4, r2, r0
 8003000:	45a1      	cmp	r9, r4
 8003002:	4192      	sbcs	r2, r2
 8003004:	1a5b      	subs	r3, r3, r1
 8003006:	4252      	negs	r2, r2
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	4698      	mov	r8, r3
 800300c:	2601      	movs	r6, #1
 800300e:	e586      	b.n	8002b1e <__aeabi_dsub+0xaa>
 8003010:	464a      	mov	r2, r9
 8003012:	0759      	lsls	r1, r3, #29
 8003014:	08d2      	lsrs	r2, r2, #3
 8003016:	430a      	orrs	r2, r1
 8003018:	08db      	lsrs	r3, r3, #3
 800301a:	e6a5      	b.n	8002d68 <__aeabi_dsub+0x2f4>
 800301c:	464c      	mov	r4, r9
 800301e:	4323      	orrs	r3, r4
 8003020:	001c      	movs	r4, r3
 8003022:	1e63      	subs	r3, r4, #1
 8003024:	419c      	sbcs	r4, r3
 8003026:	e65b      	b.n	8002ce0 <__aeabi_dsub+0x26c>
 8003028:	4665      	mov	r5, ip
 800302a:	001e      	movs	r6, r3
 800302c:	3d20      	subs	r5, #32
 800302e:	40ee      	lsrs	r6, r5
 8003030:	2c20      	cmp	r4, #32
 8003032:	d005      	beq.n	8003040 <__aeabi_dsub+0x5cc>
 8003034:	2540      	movs	r5, #64	; 0x40
 8003036:	1b2d      	subs	r5, r5, r4
 8003038:	40ab      	lsls	r3, r5
 800303a:	464c      	mov	r4, r9
 800303c:	431c      	orrs	r4, r3
 800303e:	46a2      	mov	sl, r4
 8003040:	4654      	mov	r4, sl
 8003042:	1e63      	subs	r3, r4, #1
 8003044:	419c      	sbcs	r4, r3
 8003046:	4334      	orrs	r4, r6
 8003048:	e77d      	b.n	8002f46 <__aeabi_dsub+0x4d2>
 800304a:	074b      	lsls	r3, r1, #29
 800304c:	08c2      	lsrs	r2, r0, #3
 800304e:	431a      	orrs	r2, r3
 8003050:	465d      	mov	r5, fp
 8003052:	08cb      	lsrs	r3, r1, #3
 8003054:	e6cc      	b.n	8002df0 <__aeabi_dsub+0x37c>
 8003056:	000a      	movs	r2, r1
 8003058:	4302      	orrs	r2, r0
 800305a:	d100      	bne.n	800305e <__aeabi_dsub+0x5ea>
 800305c:	e736      	b.n	8002ecc <__aeabi_dsub+0x458>
 800305e:	074b      	lsls	r3, r1, #29
 8003060:	08c2      	lsrs	r2, r0, #3
 8003062:	431a      	orrs	r2, r3
 8003064:	465d      	mov	r5, fp
 8003066:	08cb      	lsrs	r3, r1, #3
 8003068:	e681      	b.n	8002d6e <__aeabi_dsub+0x2fa>
 800306a:	464a      	mov	r2, r9
 800306c:	1a84      	subs	r4, r0, r2
 800306e:	42a0      	cmp	r0, r4
 8003070:	4192      	sbcs	r2, r2
 8003072:	1acb      	subs	r3, r1, r3
 8003074:	4252      	negs	r2, r2
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	4698      	mov	r8, r3
 800307a:	465d      	mov	r5, fp
 800307c:	2601      	movs	r6, #1
 800307e:	e54e      	b.n	8002b1e <__aeabi_dsub+0xaa>
 8003080:	074b      	lsls	r3, r1, #29
 8003082:	08c2      	lsrs	r2, r0, #3
 8003084:	431a      	orrs	r2, r3
 8003086:	08cb      	lsrs	r3, r1, #3
 8003088:	e6b2      	b.n	8002df0 <__aeabi_dsub+0x37c>
 800308a:	464a      	mov	r2, r9
 800308c:	1a14      	subs	r4, r2, r0
 800308e:	45a1      	cmp	r9, r4
 8003090:	4192      	sbcs	r2, r2
 8003092:	1a5f      	subs	r7, r3, r1
 8003094:	4252      	negs	r2, r2
 8003096:	1aba      	subs	r2, r7, r2
 8003098:	4690      	mov	r8, r2
 800309a:	0212      	lsls	r2, r2, #8
 800309c:	d56b      	bpl.n	8003176 <__aeabi_dsub+0x702>
 800309e:	464a      	mov	r2, r9
 80030a0:	1a84      	subs	r4, r0, r2
 80030a2:	42a0      	cmp	r0, r4
 80030a4:	4192      	sbcs	r2, r2
 80030a6:	1acb      	subs	r3, r1, r3
 80030a8:	4252      	negs	r2, r2
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	4698      	mov	r8, r3
 80030ae:	465d      	mov	r5, fp
 80030b0:	e564      	b.n	8002b7c <__aeabi_dsub+0x108>
 80030b2:	074b      	lsls	r3, r1, #29
 80030b4:	08c2      	lsrs	r2, r0, #3
 80030b6:	431a      	orrs	r2, r3
 80030b8:	465d      	mov	r5, fp
 80030ba:	08cb      	lsrs	r3, r1, #3
 80030bc:	e698      	b.n	8002df0 <__aeabi_dsub+0x37c>
 80030be:	074b      	lsls	r3, r1, #29
 80030c0:	08c2      	lsrs	r2, r0, #3
 80030c2:	431a      	orrs	r2, r3
 80030c4:	08cb      	lsrs	r3, r1, #3
 80030c6:	e64f      	b.n	8002d68 <__aeabi_dsub+0x2f4>
 80030c8:	000a      	movs	r2, r1
 80030ca:	4302      	orrs	r2, r0
 80030cc:	d090      	beq.n	8002ff0 <__aeabi_dsub+0x57c>
 80030ce:	464a      	mov	r2, r9
 80030d0:	075c      	lsls	r4, r3, #29
 80030d2:	08d2      	lsrs	r2, r2, #3
 80030d4:	4314      	orrs	r4, r2
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	08db      	lsrs	r3, r3, #3
 80030da:	0312      	lsls	r2, r2, #12
 80030dc:	4213      	tst	r3, r2
 80030de:	d008      	beq.n	80030f2 <__aeabi_dsub+0x67e>
 80030e0:	08ce      	lsrs	r6, r1, #3
 80030e2:	4216      	tst	r6, r2
 80030e4:	d105      	bne.n	80030f2 <__aeabi_dsub+0x67e>
 80030e6:	08c0      	lsrs	r0, r0, #3
 80030e8:	0749      	lsls	r1, r1, #29
 80030ea:	4308      	orrs	r0, r1
 80030ec:	0004      	movs	r4, r0
 80030ee:	465d      	mov	r5, fp
 80030f0:	0033      	movs	r3, r6
 80030f2:	0f61      	lsrs	r1, r4, #29
 80030f4:	00e2      	lsls	r2, r4, #3
 80030f6:	0749      	lsls	r1, r1, #29
 80030f8:	08d2      	lsrs	r2, r2, #3
 80030fa:	430a      	orrs	r2, r1
 80030fc:	e678      	b.n	8002df0 <__aeabi_dsub+0x37c>
 80030fe:	074b      	lsls	r3, r1, #29
 8003100:	08c2      	lsrs	r2, r0, #3
 8003102:	431a      	orrs	r2, r3
 8003104:	08cb      	lsrs	r3, r1, #3
 8003106:	e632      	b.n	8002d6e <__aeabi_dsub+0x2fa>
 8003108:	4448      	add	r0, r9
 800310a:	185b      	adds	r3, r3, r1
 800310c:	4548      	cmp	r0, r9
 800310e:	4192      	sbcs	r2, r2
 8003110:	4698      	mov	r8, r3
 8003112:	4252      	negs	r2, r2
 8003114:	4490      	add	r8, r2
 8003116:	4643      	mov	r3, r8
 8003118:	0004      	movs	r4, r0
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	d400      	bmi.n	8003120 <__aeabi_dsub+0x6ac>
 800311e:	e61a      	b.n	8002d56 <__aeabi_dsub+0x2e2>
 8003120:	4642      	mov	r2, r8
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <__aeabi_dsub+0x6e8>)
 8003124:	2601      	movs	r6, #1
 8003126:	401a      	ands	r2, r3
 8003128:	4690      	mov	r8, r2
 800312a:	e614      	b.n	8002d56 <__aeabi_dsub+0x2e2>
 800312c:	4666      	mov	r6, ip
 800312e:	001f      	movs	r7, r3
 8003130:	3e20      	subs	r6, #32
 8003132:	40f7      	lsrs	r7, r6
 8003134:	2c20      	cmp	r4, #32
 8003136:	d005      	beq.n	8003144 <__aeabi_dsub+0x6d0>
 8003138:	2640      	movs	r6, #64	; 0x40
 800313a:	1b36      	subs	r6, r6, r4
 800313c:	40b3      	lsls	r3, r6
 800313e:	464c      	mov	r4, r9
 8003140:	431c      	orrs	r4, r3
 8003142:	46a2      	mov	sl, r4
 8003144:	4654      	mov	r4, sl
 8003146:	1e63      	subs	r3, r4, #1
 8003148:	419c      	sbcs	r4, r3
 800314a:	433c      	orrs	r4, r7
 800314c:	e5c8      	b.n	8002ce0 <__aeabi_dsub+0x26c>
 800314e:	0011      	movs	r1, r2
 8003150:	2300      	movs	r3, #0
 8003152:	2200      	movs	r2, #0
 8003154:	e532      	b.n	8002bbc <__aeabi_dsub+0x148>
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	000007ff 	.word	0x000007ff
 800315c:	ff7fffff 	.word	0xff7fffff
 8003160:	000007fe 	.word	0x000007fe
 8003164:	464a      	mov	r2, r9
 8003166:	1814      	adds	r4, r2, r0
 8003168:	4284      	cmp	r4, r0
 800316a:	4192      	sbcs	r2, r2
 800316c:	185b      	adds	r3, r3, r1
 800316e:	4698      	mov	r8, r3
 8003170:	4252      	negs	r2, r2
 8003172:	4490      	add	r8, r2
 8003174:	e5e9      	b.n	8002d4a <__aeabi_dsub+0x2d6>
 8003176:	4642      	mov	r2, r8
 8003178:	4322      	orrs	r2, r4
 800317a:	d100      	bne.n	800317e <__aeabi_dsub+0x70a>
 800317c:	e6a6      	b.n	8002ecc <__aeabi_dsub+0x458>
 800317e:	e5ea      	b.n	8002d56 <__aeabi_dsub+0x2e2>
 8003180:	074b      	lsls	r3, r1, #29
 8003182:	08c2      	lsrs	r2, r0, #3
 8003184:	431a      	orrs	r2, r3
 8003186:	08cb      	lsrs	r3, r1, #3
 8003188:	e632      	b.n	8002df0 <__aeabi_dsub+0x37c>
 800318a:	2200      	movs	r2, #0
 800318c:	4901      	ldr	r1, [pc, #4]	; (8003194 <__aeabi_dsub+0x720>)
 800318e:	0013      	movs	r3, r2
 8003190:	e514      	b.n	8002bbc <__aeabi_dsub+0x148>
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	000007ff 	.word	0x000007ff

08003198 <__aeabi_dcmpun>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	0005      	movs	r5, r0
 800319c:	480c      	ldr	r0, [pc, #48]	; (80031d0 <__aeabi_dcmpun+0x38>)
 800319e:	030c      	lsls	r4, r1, #12
 80031a0:	0016      	movs	r6, r2
 80031a2:	0049      	lsls	r1, r1, #1
 80031a4:	031a      	lsls	r2, r3, #12
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	0b24      	lsrs	r4, r4, #12
 80031aa:	0d49      	lsrs	r1, r1, #21
 80031ac:	0b12      	lsrs	r2, r2, #12
 80031ae:	0d5b      	lsrs	r3, r3, #21
 80031b0:	4281      	cmp	r1, r0
 80031b2:	d008      	beq.n	80031c6 <__aeabi_dcmpun+0x2e>
 80031b4:	4906      	ldr	r1, [pc, #24]	; (80031d0 <__aeabi_dcmpun+0x38>)
 80031b6:	2000      	movs	r0, #0
 80031b8:	428b      	cmp	r3, r1
 80031ba:	d103      	bne.n	80031c4 <__aeabi_dcmpun+0x2c>
 80031bc:	4332      	orrs	r2, r6
 80031be:	0010      	movs	r0, r2
 80031c0:	1e42      	subs	r2, r0, #1
 80031c2:	4190      	sbcs	r0, r2
 80031c4:	bd70      	pop	{r4, r5, r6, pc}
 80031c6:	2001      	movs	r0, #1
 80031c8:	432c      	orrs	r4, r5
 80031ca:	d1fb      	bne.n	80031c4 <__aeabi_dcmpun+0x2c>
 80031cc:	e7f2      	b.n	80031b4 <__aeabi_dcmpun+0x1c>
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff

080031d4 <__aeabi_d2iz>:
 80031d4:	000a      	movs	r2, r1
 80031d6:	b530      	push	{r4, r5, lr}
 80031d8:	4c13      	ldr	r4, [pc, #76]	; (8003228 <__aeabi_d2iz+0x54>)
 80031da:	0053      	lsls	r3, r2, #1
 80031dc:	0309      	lsls	r1, r1, #12
 80031de:	0005      	movs	r5, r0
 80031e0:	0b09      	lsrs	r1, r1, #12
 80031e2:	2000      	movs	r0, #0
 80031e4:	0d5b      	lsrs	r3, r3, #21
 80031e6:	0fd2      	lsrs	r2, r2, #31
 80031e8:	42a3      	cmp	r3, r4
 80031ea:	dd04      	ble.n	80031f6 <__aeabi_d2iz+0x22>
 80031ec:	480f      	ldr	r0, [pc, #60]	; (800322c <__aeabi_d2iz+0x58>)
 80031ee:	4283      	cmp	r3, r0
 80031f0:	dd02      	ble.n	80031f8 <__aeabi_d2iz+0x24>
 80031f2:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <__aeabi_d2iz+0x5c>)
 80031f4:	18d0      	adds	r0, r2, r3
 80031f6:	bd30      	pop	{r4, r5, pc}
 80031f8:	2080      	movs	r0, #128	; 0x80
 80031fa:	0340      	lsls	r0, r0, #13
 80031fc:	4301      	orrs	r1, r0
 80031fe:	480d      	ldr	r0, [pc, #52]	; (8003234 <__aeabi_d2iz+0x60>)
 8003200:	1ac0      	subs	r0, r0, r3
 8003202:	281f      	cmp	r0, #31
 8003204:	dd08      	ble.n	8003218 <__aeabi_d2iz+0x44>
 8003206:	480c      	ldr	r0, [pc, #48]	; (8003238 <__aeabi_d2iz+0x64>)
 8003208:	1ac3      	subs	r3, r0, r3
 800320a:	40d9      	lsrs	r1, r3
 800320c:	000b      	movs	r3, r1
 800320e:	4258      	negs	r0, r3
 8003210:	2a00      	cmp	r2, #0
 8003212:	d1f0      	bne.n	80031f6 <__aeabi_d2iz+0x22>
 8003214:	0018      	movs	r0, r3
 8003216:	e7ee      	b.n	80031f6 <__aeabi_d2iz+0x22>
 8003218:	4c08      	ldr	r4, [pc, #32]	; (800323c <__aeabi_d2iz+0x68>)
 800321a:	40c5      	lsrs	r5, r0
 800321c:	46a4      	mov	ip, r4
 800321e:	4463      	add	r3, ip
 8003220:	4099      	lsls	r1, r3
 8003222:	000b      	movs	r3, r1
 8003224:	432b      	orrs	r3, r5
 8003226:	e7f2      	b.n	800320e <__aeabi_d2iz+0x3a>
 8003228:	000003fe 	.word	0x000003fe
 800322c:	0000041d 	.word	0x0000041d
 8003230:	7fffffff 	.word	0x7fffffff
 8003234:	00000433 	.word	0x00000433
 8003238:	00000413 	.word	0x00000413
 800323c:	fffffbed 	.word	0xfffffbed

08003240 <__aeabi_i2d>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	2800      	cmp	r0, #0
 8003244:	d016      	beq.n	8003274 <__aeabi_i2d+0x34>
 8003246:	17c3      	asrs	r3, r0, #31
 8003248:	18c5      	adds	r5, r0, r3
 800324a:	405d      	eors	r5, r3
 800324c:	0fc4      	lsrs	r4, r0, #31
 800324e:	0028      	movs	r0, r5
 8003250:	f000 f91c 	bl	800348c <__clzsi2>
 8003254:	4a11      	ldr	r2, [pc, #68]	; (800329c <__aeabi_i2d+0x5c>)
 8003256:	1a12      	subs	r2, r2, r0
 8003258:	280a      	cmp	r0, #10
 800325a:	dc16      	bgt.n	800328a <__aeabi_i2d+0x4a>
 800325c:	0003      	movs	r3, r0
 800325e:	002e      	movs	r6, r5
 8003260:	3315      	adds	r3, #21
 8003262:	409e      	lsls	r6, r3
 8003264:	230b      	movs	r3, #11
 8003266:	1a18      	subs	r0, r3, r0
 8003268:	40c5      	lsrs	r5, r0
 800326a:	0553      	lsls	r3, r2, #21
 800326c:	032d      	lsls	r5, r5, #12
 800326e:	0b2d      	lsrs	r5, r5, #12
 8003270:	0d5b      	lsrs	r3, r3, #21
 8003272:	e003      	b.n	800327c <__aeabi_i2d+0x3c>
 8003274:	2400      	movs	r4, #0
 8003276:	2300      	movs	r3, #0
 8003278:	2500      	movs	r5, #0
 800327a:	2600      	movs	r6, #0
 800327c:	051b      	lsls	r3, r3, #20
 800327e:	432b      	orrs	r3, r5
 8003280:	07e4      	lsls	r4, r4, #31
 8003282:	4323      	orrs	r3, r4
 8003284:	0030      	movs	r0, r6
 8003286:	0019      	movs	r1, r3
 8003288:	bd70      	pop	{r4, r5, r6, pc}
 800328a:	380b      	subs	r0, #11
 800328c:	4085      	lsls	r5, r0
 800328e:	0553      	lsls	r3, r2, #21
 8003290:	032d      	lsls	r5, r5, #12
 8003292:	2600      	movs	r6, #0
 8003294:	0b2d      	lsrs	r5, r5, #12
 8003296:	0d5b      	lsrs	r3, r3, #21
 8003298:	e7f0      	b.n	800327c <__aeabi_i2d+0x3c>
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	0000041e 	.word	0x0000041e

080032a0 <__aeabi_ui2d>:
 80032a0:	b510      	push	{r4, lr}
 80032a2:	1e04      	subs	r4, r0, #0
 80032a4:	d010      	beq.n	80032c8 <__aeabi_ui2d+0x28>
 80032a6:	f000 f8f1 	bl	800348c <__clzsi2>
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <__aeabi_ui2d+0x48>)
 80032ac:	1a1b      	subs	r3, r3, r0
 80032ae:	280a      	cmp	r0, #10
 80032b0:	dc11      	bgt.n	80032d6 <__aeabi_ui2d+0x36>
 80032b2:	220b      	movs	r2, #11
 80032b4:	0021      	movs	r1, r4
 80032b6:	1a12      	subs	r2, r2, r0
 80032b8:	40d1      	lsrs	r1, r2
 80032ba:	3015      	adds	r0, #21
 80032bc:	030a      	lsls	r2, r1, #12
 80032be:	055b      	lsls	r3, r3, #21
 80032c0:	4084      	lsls	r4, r0
 80032c2:	0b12      	lsrs	r2, r2, #12
 80032c4:	0d5b      	lsrs	r3, r3, #21
 80032c6:	e001      	b.n	80032cc <__aeabi_ui2d+0x2c>
 80032c8:	2300      	movs	r3, #0
 80032ca:	2200      	movs	r2, #0
 80032cc:	051b      	lsls	r3, r3, #20
 80032ce:	4313      	orrs	r3, r2
 80032d0:	0020      	movs	r0, r4
 80032d2:	0019      	movs	r1, r3
 80032d4:	bd10      	pop	{r4, pc}
 80032d6:	0022      	movs	r2, r4
 80032d8:	380b      	subs	r0, #11
 80032da:	4082      	lsls	r2, r0
 80032dc:	055b      	lsls	r3, r3, #21
 80032de:	0312      	lsls	r2, r2, #12
 80032e0:	2400      	movs	r4, #0
 80032e2:	0b12      	lsrs	r2, r2, #12
 80032e4:	0d5b      	lsrs	r3, r3, #21
 80032e6:	e7f1      	b.n	80032cc <__aeabi_ui2d+0x2c>
 80032e8:	0000041e 	.word	0x0000041e

080032ec <__aeabi_f2d>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	0043      	lsls	r3, r0, #1
 80032f0:	0246      	lsls	r6, r0, #9
 80032f2:	0fc4      	lsrs	r4, r0, #31
 80032f4:	20fe      	movs	r0, #254	; 0xfe
 80032f6:	0e1b      	lsrs	r3, r3, #24
 80032f8:	1c59      	adds	r1, r3, #1
 80032fa:	0a75      	lsrs	r5, r6, #9
 80032fc:	4208      	tst	r0, r1
 80032fe:	d00c      	beq.n	800331a <__aeabi_f2d+0x2e>
 8003300:	22e0      	movs	r2, #224	; 0xe0
 8003302:	0092      	lsls	r2, r2, #2
 8003304:	4694      	mov	ip, r2
 8003306:	076d      	lsls	r5, r5, #29
 8003308:	0b36      	lsrs	r6, r6, #12
 800330a:	4463      	add	r3, ip
 800330c:	051b      	lsls	r3, r3, #20
 800330e:	4333      	orrs	r3, r6
 8003310:	07e4      	lsls	r4, r4, #31
 8003312:	4323      	orrs	r3, r4
 8003314:	0028      	movs	r0, r5
 8003316:	0019      	movs	r1, r3
 8003318:	bd70      	pop	{r4, r5, r6, pc}
 800331a:	2b00      	cmp	r3, #0
 800331c:	d114      	bne.n	8003348 <__aeabi_f2d+0x5c>
 800331e:	2d00      	cmp	r5, #0
 8003320:	d01b      	beq.n	800335a <__aeabi_f2d+0x6e>
 8003322:	0028      	movs	r0, r5
 8003324:	f000 f8b2 	bl	800348c <__clzsi2>
 8003328:	280a      	cmp	r0, #10
 800332a:	dc1c      	bgt.n	8003366 <__aeabi_f2d+0x7a>
 800332c:	230b      	movs	r3, #11
 800332e:	002a      	movs	r2, r5
 8003330:	1a1b      	subs	r3, r3, r0
 8003332:	40da      	lsrs	r2, r3
 8003334:	0003      	movs	r3, r0
 8003336:	3315      	adds	r3, #21
 8003338:	409d      	lsls	r5, r3
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <__aeabi_f2d+0x88>)
 800333c:	0312      	lsls	r2, r2, #12
 800333e:	1a1b      	subs	r3, r3, r0
 8003340:	055b      	lsls	r3, r3, #21
 8003342:	0b16      	lsrs	r6, r2, #12
 8003344:	0d5b      	lsrs	r3, r3, #21
 8003346:	e7e1      	b.n	800330c <__aeabi_f2d+0x20>
 8003348:	2d00      	cmp	r5, #0
 800334a:	d009      	beq.n	8003360 <__aeabi_f2d+0x74>
 800334c:	0b32      	lsrs	r2, r6, #12
 800334e:	2680      	movs	r6, #128	; 0x80
 8003350:	0336      	lsls	r6, r6, #12
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <__aeabi_f2d+0x8c>)
 8003354:	076d      	lsls	r5, r5, #29
 8003356:	4316      	orrs	r6, r2
 8003358:	e7d8      	b.n	800330c <__aeabi_f2d+0x20>
 800335a:	2300      	movs	r3, #0
 800335c:	2600      	movs	r6, #0
 800335e:	e7d5      	b.n	800330c <__aeabi_f2d+0x20>
 8003360:	2600      	movs	r6, #0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <__aeabi_f2d+0x8c>)
 8003364:	e7d2      	b.n	800330c <__aeabi_f2d+0x20>
 8003366:	0003      	movs	r3, r0
 8003368:	002a      	movs	r2, r5
 800336a:	3b0b      	subs	r3, #11
 800336c:	409a      	lsls	r2, r3
 800336e:	2500      	movs	r5, #0
 8003370:	e7e3      	b.n	800333a <__aeabi_f2d+0x4e>
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	00000389 	.word	0x00000389
 8003378:	000007ff 	.word	0x000007ff

0800337c <__aeabi_d2f>:
 800337c:	0002      	movs	r2, r0
 800337e:	004b      	lsls	r3, r1, #1
 8003380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003382:	0308      	lsls	r0, r1, #12
 8003384:	0d5b      	lsrs	r3, r3, #21
 8003386:	4e3d      	ldr	r6, [pc, #244]	; (800347c <__aeabi_d2f+0x100>)
 8003388:	0fcc      	lsrs	r4, r1, #31
 800338a:	0a40      	lsrs	r0, r0, #9
 800338c:	0f51      	lsrs	r1, r2, #29
 800338e:	1c5f      	adds	r7, r3, #1
 8003390:	4308      	orrs	r0, r1
 8003392:	00d5      	lsls	r5, r2, #3
 8003394:	4237      	tst	r7, r6
 8003396:	d00a      	beq.n	80033ae <__aeabi_d2f+0x32>
 8003398:	4939      	ldr	r1, [pc, #228]	; (8003480 <__aeabi_d2f+0x104>)
 800339a:	185e      	adds	r6, r3, r1
 800339c:	2efe      	cmp	r6, #254	; 0xfe
 800339e:	dd16      	ble.n	80033ce <__aeabi_d2f+0x52>
 80033a0:	23ff      	movs	r3, #255	; 0xff
 80033a2:	2100      	movs	r1, #0
 80033a4:	05db      	lsls	r3, r3, #23
 80033a6:	430b      	orrs	r3, r1
 80033a8:	07e0      	lsls	r0, r4, #31
 80033aa:	4318      	orrs	r0, r3
 80033ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <__aeabi_d2f+0x44>
 80033b2:	4328      	orrs	r0, r5
 80033b4:	d027      	beq.n	8003406 <__aeabi_d2f+0x8a>
 80033b6:	2105      	movs	r1, #5
 80033b8:	0189      	lsls	r1, r1, #6
 80033ba:	0a49      	lsrs	r1, r1, #9
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e7f1      	b.n	80033a4 <__aeabi_d2f+0x28>
 80033c0:	4305      	orrs	r5, r0
 80033c2:	d0ed      	beq.n	80033a0 <__aeabi_d2f+0x24>
 80033c4:	2180      	movs	r1, #128	; 0x80
 80033c6:	03c9      	lsls	r1, r1, #15
 80033c8:	23ff      	movs	r3, #255	; 0xff
 80033ca:	4301      	orrs	r1, r0
 80033cc:	e7ea      	b.n	80033a4 <__aeabi_d2f+0x28>
 80033ce:	2e00      	cmp	r6, #0
 80033d0:	dd1c      	ble.n	800340c <__aeabi_d2f+0x90>
 80033d2:	0192      	lsls	r2, r2, #6
 80033d4:	0011      	movs	r1, r2
 80033d6:	1e4a      	subs	r2, r1, #1
 80033d8:	4191      	sbcs	r1, r2
 80033da:	00c0      	lsls	r0, r0, #3
 80033dc:	0f6d      	lsrs	r5, r5, #29
 80033de:	4301      	orrs	r1, r0
 80033e0:	4329      	orrs	r1, r5
 80033e2:	074b      	lsls	r3, r1, #29
 80033e4:	d048      	beq.n	8003478 <__aeabi_d2f+0xfc>
 80033e6:	230f      	movs	r3, #15
 80033e8:	400b      	ands	r3, r1
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d000      	beq.n	80033f0 <__aeabi_d2f+0x74>
 80033ee:	3104      	adds	r1, #4
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	04db      	lsls	r3, r3, #19
 80033f4:	400b      	ands	r3, r1
 80033f6:	d03f      	beq.n	8003478 <__aeabi_d2f+0xfc>
 80033f8:	1c72      	adds	r2, r6, #1
 80033fa:	2efe      	cmp	r6, #254	; 0xfe
 80033fc:	d0d0      	beq.n	80033a0 <__aeabi_d2f+0x24>
 80033fe:	0189      	lsls	r1, r1, #6
 8003400:	0a49      	lsrs	r1, r1, #9
 8003402:	b2d3      	uxtb	r3, r2
 8003404:	e7ce      	b.n	80033a4 <__aeabi_d2f+0x28>
 8003406:	2300      	movs	r3, #0
 8003408:	2100      	movs	r1, #0
 800340a:	e7cb      	b.n	80033a4 <__aeabi_d2f+0x28>
 800340c:	0032      	movs	r2, r6
 800340e:	3217      	adds	r2, #23
 8003410:	db22      	blt.n	8003458 <__aeabi_d2f+0xdc>
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	221e      	movs	r2, #30
 8003416:	0409      	lsls	r1, r1, #16
 8003418:	4308      	orrs	r0, r1
 800341a:	1b92      	subs	r2, r2, r6
 800341c:	2a1f      	cmp	r2, #31
 800341e:	dd1d      	ble.n	800345c <__aeabi_d2f+0xe0>
 8003420:	2102      	movs	r1, #2
 8003422:	4249      	negs	r1, r1
 8003424:	1b8e      	subs	r6, r1, r6
 8003426:	0001      	movs	r1, r0
 8003428:	40f1      	lsrs	r1, r6
 800342a:	000e      	movs	r6, r1
 800342c:	2a20      	cmp	r2, #32
 800342e:	d004      	beq.n	800343a <__aeabi_d2f+0xbe>
 8003430:	4a14      	ldr	r2, [pc, #80]	; (8003484 <__aeabi_d2f+0x108>)
 8003432:	4694      	mov	ip, r2
 8003434:	4463      	add	r3, ip
 8003436:	4098      	lsls	r0, r3
 8003438:	4305      	orrs	r5, r0
 800343a:	0029      	movs	r1, r5
 800343c:	1e4d      	subs	r5, r1, #1
 800343e:	41a9      	sbcs	r1, r5
 8003440:	4331      	orrs	r1, r6
 8003442:	2600      	movs	r6, #0
 8003444:	074b      	lsls	r3, r1, #29
 8003446:	d1ce      	bne.n	80033e6 <__aeabi_d2f+0x6a>
 8003448:	2080      	movs	r0, #128	; 0x80
 800344a:	000b      	movs	r3, r1
 800344c:	04c0      	lsls	r0, r0, #19
 800344e:	2201      	movs	r2, #1
 8003450:	4003      	ands	r3, r0
 8003452:	4201      	tst	r1, r0
 8003454:	d1d3      	bne.n	80033fe <__aeabi_d2f+0x82>
 8003456:	e7af      	b.n	80033b8 <__aeabi_d2f+0x3c>
 8003458:	2300      	movs	r3, #0
 800345a:	e7ac      	b.n	80033b6 <__aeabi_d2f+0x3a>
 800345c:	490a      	ldr	r1, [pc, #40]	; (8003488 <__aeabi_d2f+0x10c>)
 800345e:	468c      	mov	ip, r1
 8003460:	0029      	movs	r1, r5
 8003462:	4463      	add	r3, ip
 8003464:	40d1      	lsrs	r1, r2
 8003466:	409d      	lsls	r5, r3
 8003468:	000a      	movs	r2, r1
 800346a:	0029      	movs	r1, r5
 800346c:	4098      	lsls	r0, r3
 800346e:	1e4d      	subs	r5, r1, #1
 8003470:	41a9      	sbcs	r1, r5
 8003472:	4301      	orrs	r1, r0
 8003474:	4311      	orrs	r1, r2
 8003476:	e7e4      	b.n	8003442 <__aeabi_d2f+0xc6>
 8003478:	0033      	movs	r3, r6
 800347a:	e79d      	b.n	80033b8 <__aeabi_d2f+0x3c>
 800347c:	000007fe 	.word	0x000007fe
 8003480:	fffffc80 	.word	0xfffffc80
 8003484:	fffffca2 	.word	0xfffffca2
 8003488:	fffffc82 	.word	0xfffffc82

0800348c <__clzsi2>:
 800348c:	211c      	movs	r1, #28
 800348e:	2301      	movs	r3, #1
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	4298      	cmp	r0, r3
 8003494:	d301      	bcc.n	800349a <__clzsi2+0xe>
 8003496:	0c00      	lsrs	r0, r0, #16
 8003498:	3910      	subs	r1, #16
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	4298      	cmp	r0, r3
 800349e:	d301      	bcc.n	80034a4 <__clzsi2+0x18>
 80034a0:	0a00      	lsrs	r0, r0, #8
 80034a2:	3908      	subs	r1, #8
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	4298      	cmp	r0, r3
 80034a8:	d301      	bcc.n	80034ae <__clzsi2+0x22>
 80034aa:	0900      	lsrs	r0, r0, #4
 80034ac:	3904      	subs	r1, #4
 80034ae:	a202      	add	r2, pc, #8	; (adr r2, 80034b8 <__clzsi2+0x2c>)
 80034b0:	5c10      	ldrb	r0, [r2, r0]
 80034b2:	1840      	adds	r0, r0, r1
 80034b4:	4770      	bx	lr
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	02020304 	.word	0x02020304
 80034bc:	01010101 	.word	0x01010101
	...

080034c8 <__clzdi2>:
 80034c8:	b510      	push	{r4, lr}
 80034ca:	2900      	cmp	r1, #0
 80034cc:	d103      	bne.n	80034d6 <__clzdi2+0xe>
 80034ce:	f7ff ffdd 	bl	800348c <__clzsi2>
 80034d2:	3020      	adds	r0, #32
 80034d4:	e002      	b.n	80034dc <__clzdi2+0x14>
 80034d6:	1c08      	adds	r0, r1, #0
 80034d8:	f7ff ffd8 	bl	800348c <__clzsi2>
 80034dc:	bd10      	pop	{r4, pc}
 80034de:	46c0      	nop			; (mov r8, r8)

080034e0 <__divdi3>:
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e2:	4657      	mov	r7, sl
 80034e4:	464e      	mov	r6, r9
 80034e6:	4645      	mov	r5, r8
 80034e8:	46de      	mov	lr, fp
 80034ea:	b5e0      	push	{r5, r6, r7, lr}
 80034ec:	000f      	movs	r7, r1
 80034ee:	0019      	movs	r1, r3
 80034f0:	2300      	movs	r3, #0
 80034f2:	0006      	movs	r6, r0
 80034f4:	4698      	mov	r8, r3
 80034f6:	0010      	movs	r0, r2
 80034f8:	b083      	sub	sp, #12
 80034fa:	2f00      	cmp	r7, #0
 80034fc:	da07      	bge.n	800350e <__divdi3+0x2e>
 80034fe:	0033      	movs	r3, r6
 8003500:	003c      	movs	r4, r7
 8003502:	2700      	movs	r7, #0
 8003504:	425e      	negs	r6, r3
 8003506:	41a7      	sbcs	r7, r4
 8003508:	2301      	movs	r3, #1
 800350a:	425b      	negs	r3, r3
 800350c:	4698      	mov	r8, r3
 800350e:	2900      	cmp	r1, #0
 8003510:	da07      	bge.n	8003522 <__divdi3+0x42>
 8003512:	4643      	mov	r3, r8
 8003514:	43db      	mvns	r3, r3
 8003516:	000c      	movs	r4, r1
 8003518:	4698      	mov	r8, r3
 800351a:	0003      	movs	r3, r0
 800351c:	2100      	movs	r1, #0
 800351e:	4258      	negs	r0, r3
 8003520:	41a1      	sbcs	r1, r4
 8003522:	0034      	movs	r4, r6
 8003524:	003d      	movs	r5, r7
 8003526:	4682      	mov	sl, r0
 8003528:	4689      	mov	r9, r1
 800352a:	42b9      	cmp	r1, r7
 800352c:	d86a      	bhi.n	8003604 <__divdi3+0x124>
 800352e:	d067      	beq.n	8003600 <__divdi3+0x120>
 8003530:	4649      	mov	r1, r9
 8003532:	4650      	mov	r0, sl
 8003534:	f7ff ffc8 	bl	80034c8 <__clzdi2>
 8003538:	4683      	mov	fp, r0
 800353a:	0039      	movs	r1, r7
 800353c:	0030      	movs	r0, r6
 800353e:	f7ff ffc3 	bl	80034c8 <__clzdi2>
 8003542:	465b      	mov	r3, fp
 8003544:	1a1b      	subs	r3, r3, r0
 8003546:	469c      	mov	ip, r3
 8003548:	3b20      	subs	r3, #32
 800354a:	469b      	mov	fp, r3
 800354c:	d46b      	bmi.n	8003626 <__divdi3+0x146>
 800354e:	4658      	mov	r0, fp
 8003550:	4651      	mov	r1, sl
 8003552:	4081      	lsls	r1, r0
 8003554:	4660      	mov	r0, ip
 8003556:	000b      	movs	r3, r1
 8003558:	4651      	mov	r1, sl
 800355a:	4081      	lsls	r1, r0
 800355c:	000a      	movs	r2, r1
 800355e:	42bb      	cmp	r3, r7
 8003560:	d900      	bls.n	8003564 <__divdi3+0x84>
 8003562:	e072      	b.n	800364a <__divdi3+0x16a>
 8003564:	42bb      	cmp	r3, r7
 8003566:	d100      	bne.n	800356a <__divdi3+0x8a>
 8003568:	e079      	b.n	800365e <__divdi3+0x17e>
 800356a:	0034      	movs	r4, r6
 800356c:	003d      	movs	r5, r7
 800356e:	4659      	mov	r1, fp
 8003570:	1aa4      	subs	r4, r4, r2
 8003572:	419d      	sbcs	r5, r3
 8003574:	2900      	cmp	r1, #0
 8003576:	da00      	bge.n	800357a <__divdi3+0x9a>
 8003578:	e074      	b.n	8003664 <__divdi3+0x184>
 800357a:	2100      	movs	r1, #0
 800357c:	2000      	movs	r0, #0
 800357e:	2601      	movs	r6, #1
 8003580:	9000      	str	r0, [sp, #0]
 8003582:	9101      	str	r1, [sp, #4]
 8003584:	4659      	mov	r1, fp
 8003586:	408e      	lsls	r6, r1
 8003588:	9601      	str	r6, [sp, #4]
 800358a:	4661      	mov	r1, ip
 800358c:	2601      	movs	r6, #1
 800358e:	408e      	lsls	r6, r1
 8003590:	4661      	mov	r1, ip
 8003592:	9600      	str	r6, [sp, #0]
 8003594:	2900      	cmp	r1, #0
 8003596:	d05f      	beq.n	8003658 <__divdi3+0x178>
 8003598:	07d9      	lsls	r1, r3, #31
 800359a:	0856      	lsrs	r6, r2, #1
 800359c:	430e      	orrs	r6, r1
 800359e:	085f      	lsrs	r7, r3, #1
 80035a0:	4661      	mov	r1, ip
 80035a2:	2201      	movs	r2, #1
 80035a4:	2300      	movs	r3, #0
 80035a6:	e00c      	b.n	80035c2 <__divdi3+0xe2>
 80035a8:	42af      	cmp	r7, r5
 80035aa:	d101      	bne.n	80035b0 <__divdi3+0xd0>
 80035ac:	42a6      	cmp	r6, r4
 80035ae:	d80a      	bhi.n	80035c6 <__divdi3+0xe6>
 80035b0:	1ba4      	subs	r4, r4, r6
 80035b2:	41bd      	sbcs	r5, r7
 80035b4:	1924      	adds	r4, r4, r4
 80035b6:	416d      	adcs	r5, r5
 80035b8:	3901      	subs	r1, #1
 80035ba:	18a4      	adds	r4, r4, r2
 80035bc:	415d      	adcs	r5, r3
 80035be:	2900      	cmp	r1, #0
 80035c0:	d006      	beq.n	80035d0 <__divdi3+0xf0>
 80035c2:	42af      	cmp	r7, r5
 80035c4:	d9f0      	bls.n	80035a8 <__divdi3+0xc8>
 80035c6:	3901      	subs	r1, #1
 80035c8:	1924      	adds	r4, r4, r4
 80035ca:	416d      	adcs	r5, r5
 80035cc:	2900      	cmp	r1, #0
 80035ce:	d1f8      	bne.n	80035c2 <__divdi3+0xe2>
 80035d0:	9800      	ldr	r0, [sp, #0]
 80035d2:	9901      	ldr	r1, [sp, #4]
 80035d4:	465b      	mov	r3, fp
 80035d6:	1900      	adds	r0, r0, r4
 80035d8:	4169      	adcs	r1, r5
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db4d      	blt.n	800367a <__divdi3+0x19a>
 80035de:	002e      	movs	r6, r5
 80035e0:	002c      	movs	r4, r5
 80035e2:	40de      	lsrs	r6, r3
 80035e4:	4663      	mov	r3, ip
 80035e6:	40dc      	lsrs	r4, r3
 80035e8:	465b      	mov	r3, fp
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	db55      	blt.n	800369a <__divdi3+0x1ba>
 80035ee:	0034      	movs	r4, r6
 80035f0:	409c      	lsls	r4, r3
 80035f2:	0023      	movs	r3, r4
 80035f4:	4664      	mov	r4, ip
 80035f6:	40a6      	lsls	r6, r4
 80035f8:	0032      	movs	r2, r6
 80035fa:	1a80      	subs	r0, r0, r2
 80035fc:	4199      	sbcs	r1, r3
 80035fe:	e003      	b.n	8003608 <__divdi3+0x128>
 8003600:	42b0      	cmp	r0, r6
 8003602:	d995      	bls.n	8003530 <__divdi3+0x50>
 8003604:	2000      	movs	r0, #0
 8003606:	2100      	movs	r1, #0
 8003608:	4643      	mov	r3, r8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <__divdi3+0x138>
 800360e:	0003      	movs	r3, r0
 8003610:	000c      	movs	r4, r1
 8003612:	2100      	movs	r1, #0
 8003614:	4258      	negs	r0, r3
 8003616:	41a1      	sbcs	r1, r4
 8003618:	b003      	add	sp, #12
 800361a:	bcf0      	pop	{r4, r5, r6, r7}
 800361c:	46bb      	mov	fp, r7
 800361e:	46b2      	mov	sl, r6
 8003620:	46a9      	mov	r9, r5
 8003622:	46a0      	mov	r8, r4
 8003624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003626:	4662      	mov	r2, ip
 8003628:	4648      	mov	r0, r9
 800362a:	2320      	movs	r3, #32
 800362c:	4651      	mov	r1, sl
 800362e:	4090      	lsls	r0, r2
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	40d9      	lsrs	r1, r3
 8003634:	0003      	movs	r3, r0
 8003636:	9100      	str	r1, [sp, #0]
 8003638:	9900      	ldr	r1, [sp, #0]
 800363a:	4660      	mov	r0, ip
 800363c:	430b      	orrs	r3, r1
 800363e:	4651      	mov	r1, sl
 8003640:	4081      	lsls	r1, r0
 8003642:	000a      	movs	r2, r1
 8003644:	42bb      	cmp	r3, r7
 8003646:	d800      	bhi.n	800364a <__divdi3+0x16a>
 8003648:	e78c      	b.n	8003564 <__divdi3+0x84>
 800364a:	2100      	movs	r1, #0
 800364c:	2000      	movs	r0, #0
 800364e:	9000      	str	r0, [sp, #0]
 8003650:	9101      	str	r1, [sp, #4]
 8003652:	4661      	mov	r1, ip
 8003654:	2900      	cmp	r1, #0
 8003656:	d19f      	bne.n	8003598 <__divdi3+0xb8>
 8003658:	9800      	ldr	r0, [sp, #0]
 800365a:	9901      	ldr	r1, [sp, #4]
 800365c:	e7d4      	b.n	8003608 <__divdi3+0x128>
 800365e:	42b1      	cmp	r1, r6
 8003660:	d8f3      	bhi.n	800364a <__divdi3+0x16a>
 8003662:	e782      	b.n	800356a <__divdi3+0x8a>
 8003664:	4661      	mov	r1, ip
 8003666:	2620      	movs	r6, #32
 8003668:	2701      	movs	r7, #1
 800366a:	1a76      	subs	r6, r6, r1
 800366c:	2000      	movs	r0, #0
 800366e:	2100      	movs	r1, #0
 8003670:	40f7      	lsrs	r7, r6
 8003672:	9000      	str	r0, [sp, #0]
 8003674:	9101      	str	r1, [sp, #4]
 8003676:	9701      	str	r7, [sp, #4]
 8003678:	e787      	b.n	800358a <__divdi3+0xaa>
 800367a:	4662      	mov	r2, ip
 800367c:	2320      	movs	r3, #32
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	002a      	movs	r2, r5
 8003682:	409a      	lsls	r2, r3
 8003684:	0026      	movs	r6, r4
 8003686:	0013      	movs	r3, r2
 8003688:	4662      	mov	r2, ip
 800368a:	40d6      	lsrs	r6, r2
 800368c:	002c      	movs	r4, r5
 800368e:	431e      	orrs	r6, r3
 8003690:	4663      	mov	r3, ip
 8003692:	40dc      	lsrs	r4, r3
 8003694:	465b      	mov	r3, fp
 8003696:	2b00      	cmp	r3, #0
 8003698:	daa9      	bge.n	80035ee <__divdi3+0x10e>
 800369a:	4662      	mov	r2, ip
 800369c:	2320      	movs	r3, #32
 800369e:	0035      	movs	r5, r6
 80036a0:	4094      	lsls	r4, r2
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	40dd      	lsrs	r5, r3
 80036a6:	0023      	movs	r3, r4
 80036a8:	432b      	orrs	r3, r5
 80036aa:	e7a3      	b.n	80035f4 <__divdi3+0x114>

080036ac <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 80036ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 80036b0:	4922      	ldr	r1, [pc, #136]	; (800373c <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 80036b2:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 80036b4:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 80036b6:	b29a      	uxth	r2, r3
	if(temp == 0xFFFF)				// Memory has been erased
 80036b8:	428b      	cmp	r3, r1
 80036ba:	d035      	beq.n	8003728 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 80036bc:	0a16      	lsrs	r6, r2, #8
		if(N == 0)
 80036be:	d02c      	beq.n	800371a <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <LoadROtopology+0x94>)
 80036c2:	b2f6      	uxtb	r6, r6
 80036c4:	701e      	strb	r6, [r3, #0]
			N =1;
		myID =(uint8_t )temp;
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <LoadROtopology+0x98>)
 80036c8:	701a      	strb	r2, [r3, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 80036ca:	466b      	mov	r3, sp
 80036cc:	1dd9      	adds	r1, r3, #7
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 80036ce:	2300      	movs	r3, #0
	uint16_t add =2, temp =0;
 80036d0:	2202      	movs	r2, #2
		for(uint8_t i =1; i <= N; i++){
 80036d2:	2501      	movs	r5, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 80036d4:	469c      	mov	ip, r3
 80036d6:	4c1c      	ldr	r4, [pc, #112]	; (8003748 <LoadROtopology+0x9c>)
 80036d8:	4663      	mov	r3, ip
 80036da:	700b      	strb	r3, [r1, #0]
 80036dc:	780b      	ldrb	r3, [r1, #0]
 80036de:	2b0a      	cmp	r3, #10
 80036e0:	d814      	bhi.n	800370c <LoadROtopology+0x60>
 80036e2:	1e6b      	subs	r3, r5, #1
 80036e4:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 80036e6:	18c0      	adds	r0, r0, r3
 80036e8:	0040      	lsls	r0, r0, #1
 80036ea:	18c0      	adds	r0, r0, r3
 80036ec:	4b12      	ldr	r3, [pc, #72]	; (8003738 <LoadROtopology+0x8c>)
 80036ee:	18d7      	adds	r7, r2, r3
 80036f0:	780b      	ldrb	r3, [r1, #0]
 80036f2:	883f      	ldrh	r7, [r7, #0]
 80036f4:	18c3      	adds	r3, r0, r3
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	52e7      	strh	r7, [r4, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 80036fa:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 80036fc:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 80036fe:	3301      	adds	r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	700b      	strb	r3, [r1, #0]
 8003704:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8003706:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8003708:	2b0a      	cmp	r3, #10
 800370a:	d9ef      	bls.n	80036ec <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 800370c:	3501      	adds	r5, #1
 800370e:	b2ed      	uxtb	r5, r5
 8003710:	42ae      	cmp	r6, r5
 8003712:	d2e1      	bcs.n	80036d8 <LoadROtopology+0x2c>
 8003714:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8003716:	b003      	add	sp, #12
 8003718:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 800371a:	2101      	movs	r1, #1
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 800371e:	2601      	movs	r6, #1
			N =1;
 8003720:	7019      	strb	r1, [r3, #0]
		myID =(uint8_t )temp;
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <LoadROtopology+0x98>)
 8003724:	701a      	strb	r2, [r3, #0]
		for(uint8_t i =1; i <= N; i++){
 8003726:	e7d0      	b.n	80036ca <LoadROtopology+0x1e>
		N =1;
 8003728:	2201      	movs	r2, #1
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 800372c:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 800372e:	701a      	strb	r2, [r3, #0]
		myID =0;
 8003730:	2200      	movs	r2, #0
 8003732:	4b04      	ldr	r3, [pc, #16]	; (8003744 <LoadROtopology+0x98>)
 8003734:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003736:	e7ee      	b.n	8003716 <LoadROtopology+0x6a>
 8003738:	0801d800 	.word	0x0801d800
 800373c:	0000ffff 	.word	0x0000ffff
 8003740:	2000001c 	.word	0x2000001c
 8003744:	2000110e 	.word	0x2000110e
 8003748:	20000b10 	.word	0x20000b10

0800374c <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 800374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374e:	46c6      	mov	lr, r8
 8003750:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003752:	4d0d      	ldr	r5, [pc, #52]	; (8003788 <LoadEEportsDir+0x3c>)
 8003754:	782f      	ldrb	r7, [r5, #0]
 8003756:	2f00      	cmp	r7, #0
 8003758:	d012      	beq.n	8003780 <LoadEEportsDir+0x34>
 800375a:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800375c:	2700      	movs	r7, #0
 800375e:	4e0b      	ldr	r6, [pc, #44]	; (800378c <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8003760:	1e61      	subs	r1, r4, #1
 8003762:	1c63      	adds	r3, r4, #1
 8003764:	0049      	lsls	r1, r1, #1
 8003766:	0018      	movs	r0, r3
 8003768:	1871      	adds	r1, r6, r1
 800376a:	4698      	mov	r8, r3
 800376c:	f004 fc10 	bl	8007f90 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003770:	2c19      	cmp	r4, #25
 8003772:	d900      	bls.n	8003776 <LoadEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 8003774:	270a      	movs	r7, #10
	for(uint8_t i =1; i <= N; i++){
 8003776:	4643      	mov	r3, r8
 8003778:	b2dc      	uxtb	r4, r3
 800377a:	782b      	ldrb	r3, [r5, #0]
 800377c:	42a3      	cmp	r3, r4
 800377e:	d2ef      	bcs.n	8003760 <LoadEEportsDir+0x14>
	}
	
	return result;
}
 8003780:	0038      	movs	r0, r7
 8003782:	bc80      	pop	{r7}
 8003784:	46b8      	mov	r8, r7
 8003786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003788:	2000001c 	.word	0x2000001c
 800378c:	20006f68 	.word	0x20006f68

08003790 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8003790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003792:	4657      	mov	r7, sl
 8003794:	464e      	mov	r6, r9
 8003796:	46de      	mov	lr, fp
 8003798:	4645      	mov	r5, r8
 800379a:	b5e0      	push	{r5, r6, r7, lr}
 800379c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 800379e:	466b      	mov	r3, sp
 80037a0:	1d9e      	adds	r6, r3, #6
 80037a2:	2300      	movs	r3, #0
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80037a4:	4698      	mov	r8, r3
	uint16_t add =0, temp =0;
 80037a6:	8033      	strh	r3, [r6, #0]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80037a8:	4b19      	ldr	r3, [pc, #100]	; (8003810 <LoadEEalias+0x80>)
	uint16_t add =0, temp =0;
 80037aa:	2721      	movs	r7, #33	; 0x21
 80037ac:	469a      	mov	sl, r3
 80037ae:	4b19      	ldr	r3, [pc, #100]	; (8003814 <LoadEEalias+0x84>)
 80037b0:	469b      	mov	fp, r3
 80037b2:	4643      	mov	r3, r8
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	001d      	movs	r5, r3
 80037b8:	4699      	mov	r9, r3
 80037ba:	4445      	add	r5, r8
 80037bc:	1f7c      	subs	r4, r7, #5
 80037be:	006d      	lsls	r5, r5, #1
 80037c0:	b2a4      	uxth	r4, r4
 80037c2:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 80037c4:	0020      	movs	r0, r4
 80037c6:	0031      	movs	r1, r6
 80037c8:	f004 fbe2 	bl	8007f90 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 80037cc:	8833      	ldrh	r3, [r6, #0]
 80037ce:	3401      	adds	r4, #1
 80037d0:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80037d2:	b2a4      	uxth	r4, r4
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	702b      	strb	r3, [r5, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80037d8:	3502      	adds	r5, #2
 80037da:	42bc      	cmp	r4, r7
 80037dc:	d1f2      	bne.n	80037c4 <LoadEEalias+0x34>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 80037de:	464f      	mov	r7, r9
 80037e0:	2300      	movs	r3, #0
 80037e2:	4447      	add	r7, r8
 80037e4:	007f      	lsls	r7, r7, #1
 80037e6:	4457      	add	r7, sl
 80037e8:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80037ea:	4643      	mov	r3, r8
 80037ec:	3301      	adds	r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	4698      	mov	r8, r3
 80037f2:	465b      	mov	r3, fp
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	3405      	adds	r4, #5
 80037f8:	b2a7      	uxth	r7, r4
 80037fa:	4543      	cmp	r3, r8
 80037fc:	d2d9      	bcs.n	80037b2 <LoadEEalias+0x22>
	}
	
	return result;
}
 80037fe:	2000      	movs	r0, #0
 8003800:	b003      	add	sp, #12
 8003802:	bcf0      	pop	{r4, r5, r6, r7}
 8003804:	46bb      	mov	fp, r7
 8003806:	46b2      	mov	sl, r6
 8003808:	46a9      	mov	r9, r5
 800380a:	46a0      	mov	r8, r4
 800380c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	20001000 	.word	0x20001000
 8003814:	2000001c 	.word	0x2000001c

08003818 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	4646      	mov	r6, r8
 800381c:	46d6      	mov	lr, sl
 800381e:	464f      	mov	r7, r9
 8003820:	b5c0      	push	{r6, r7, lr}
 8003822:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003824:	466b      	mov	r3, sp
 8003826:	1d9e      	adds	r6, r3, #6
 8003828:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 800382a:	4d20      	ldr	r5, [pc, #128]	; (80038ac <LoadEEgroup+0x94>)
	uint16_t add =0, temp =0;
 800382c:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 800382e:	782b      	ldrb	r3, [r5, #0]
	uint16_t add =0, temp =0;
 8003830:	2400      	movs	r4, #0
	for(i =0; i < N; i++)			// N modules
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00e      	beq.n	8003854 <LoadEEgroup+0x3c>
 8003836:	2100      	movs	r1, #0
 8003838:	4f1d      	ldr	r7, [pc, #116]	; (80038b0 <LoadEEgroup+0x98>)
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800383a:	0020      	movs	r0, r4
 800383c:	0049      	lsls	r1, r1, #1
 800383e:	30cb      	adds	r0, #203	; 0xcb
 8003840:	1879      	adds	r1, r7, r1
 8003842:	b280      	uxth	r0, r0
 8003844:	f004 fba4 	bl	8007f90 <EE_ReadVariable>
		add++;
 8003848:	1c61      	adds	r1, r4, #1
	for(i =0; i < N; i++)			// N modules
 800384a:	782b      	ldrb	r3, [r5, #0]
		add++;
 800384c:	b28c      	uxth	r4, r1
	for(i =0; i < N; i++)			// N modules
 800384e:	b2c9      	uxtb	r1, r1
 8003850:	428b      	cmp	r3, r1
 8003852:	d8f2      	bhi.n	800383a <LoadEEgroup+0x22>
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <LoadEEgroup+0x9c>)
 8003856:	0027      	movs	r7, r4
 8003858:	34d0      	adds	r4, #208	; 0xd0
 800385a:	4698      	mov	r8, r3
 800385c:	b2a3      	uxth	r3, r4
 800385e:	4699      	mov	r9, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003860:	2300      	movs	r3, #0
 8003862:	469a      	mov	sl, r3
 8003864:	379e      	adds	r7, #158	; 0x9e
 8003866:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8003868:	4645      	mov	r5, r8
 800386a:	1f7c      	subs	r4, r7, #5
 800386c:	b2a4      	uxth	r4, r4
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 800386e:	0020      	movs	r0, r4
 8003870:	0031      	movs	r1, r6
 8003872:	f004 fb8d 	bl	8007f90 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8003876:	8833      	ldrh	r3, [r6, #0]
 8003878:	3401      	adds	r4, #1
 800387a:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 800387c:	b2a4      	uxth	r4, r4
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	702b      	strb	r3, [r5, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003882:	3502      	adds	r5, #2
 8003884:	42a7      	cmp	r7, r4
 8003886:	d1f2      	bne.n	800386e <LoadEEgroup+0x56>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003888:	4643      	mov	r3, r8
 800388a:	4652      	mov	r2, sl
 800388c:	725a      	strb	r2, [r3, #9]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 800388e:	230a      	movs	r3, #10
 8003890:	469c      	mov	ip, r3
 8003892:	3705      	adds	r7, #5
 8003894:	b2bf      	uxth	r7, r7
 8003896:	44e0      	add	r8, ip
 8003898:	454f      	cmp	r7, r9
 800389a:	d1e5      	bne.n	8003868 <LoadEEgroup+0x50>
	}
	
	return result;
}
 800389c:	2000      	movs	r0, #0
 800389e:	b002      	add	sp, #8
 80038a0:	bce0      	pop	{r5, r6, r7}
 80038a2:	46ba      	mov	sl, r7
 80038a4:	46b1      	mov	r9, r6
 80038a6:	46a8      	mov	r8, r5
 80038a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	2000001c 	.word	0x2000001c
 80038b0:	20000f58 	.word	0x20000f58
 80038b4:	20000ef4 	.word	0x20000ef4

080038b8 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 80038b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ba:	46ce      	mov	lr, r9
 80038bc:	4647      	mov	r7, r8
 80038be:	b580      	push	{r7, lr}
 80038c0:	b085      	sub	sp, #20
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	466a      	mov	r2, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80038c6:	20e4      	movs	r0, #228	; 0xe4
 80038c8:	a903      	add	r1, sp, #12
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80038ca:	8193      	strh	r3, [r2, #12]
 80038cc:	81d3      	strh	r3, [r2, #14]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80038ce:	f004 fb5f 	bl	8007f90 <EE_ReadVariable>
	uint8_t direction =0;
 80038d2:	2500      	movs	r5, #0
	if(!status1){
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d101      	bne.n	80038dc <LoadEEstreams+0x24>
		direction =(uint8_t )temp1;
 80038d8:	466b      	mov	r3, sp
 80038da:	7b1d      	ldrb	r5, [r3, #12]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80038dc:	a903      	add	r1, sp, #12
 80038de:	20e5      	movs	r0, #229	; 0xe5
 80038e0:	f004 fb56 	bl	8007f90 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80038e4:	230e      	movs	r3, #14
 80038e6:	446b      	add	r3, sp
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80038e8:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80038ea:	0019      	movs	r1, r3
 80038ec:	20e6      	movs	r0, #230	; 0xe6
 80038ee:	f004 fb4f 	bl	8007f90 <EE_ReadVariable>
	if(!status1 && !status2){
 80038f2:	4304      	orrs	r4, r0
 80038f4:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 80038f6:	2600      	movs	r6, #0
	if(!status1 && !status2){
 80038f8:	2c00      	cmp	r4, #0
 80038fa:	d104      	bne.n	8003906 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 80038fc:	466b      	mov	r3, sp
 80038fe:	899e      	ldrh	r6, [r3, #12]
 8003900:	89db      	ldrh	r3, [r3, #14]
 8003902:	0436      	lsls	r6, r6, #16
 8003904:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8003906:	a903      	add	r1, sp, #12
 8003908:	20e7      	movs	r0, #231	; 0xe7
 800390a:	f004 fb41 	bl	8007f90 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 800390e:	230e      	movs	r3, #14
 8003910:	446b      	add	r3, sp
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8003912:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8003914:	0019      	movs	r1, r3
 8003916:	20e8      	movs	r0, #232	; 0xe8
 8003918:	f004 fb3a 	bl	8007f90 <EE_ReadVariable>
	if(!status1 && !status2){
 800391c:	4320      	orrs	r0, r4
 800391e:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8003920:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8003922:	2800      	cmp	r0, #0
 8003924:	d104      	bne.n	8003930 <LoadEEstreams+0x78>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003926:	466b      	mov	r3, sp
 8003928:	899c      	ldrh	r4, [r3, #12]
 800392a:	89db      	ldrh	r3, [r3, #14]
 800392c:	0424      	lsls	r4, r4, #16
 800392e:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8003930:	20e9      	movs	r0, #233	; 0xe9
 8003932:	a903      	add	r1, sp, #12
 8003934:	f004 fb2c 	bl	8007f90 <EE_ReadVariable>
	if(!status1){
 8003938:	2800      	cmp	r0, #0
 800393a:	d03f      	beq.n	80039bc <LoadEEstreams+0x104>
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <LoadEEstreams+0x144>)
 800393e:	4699      	mov	r9, r3
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8003940:	20ea      	movs	r0, #234	; 0xea
 8003942:	a903      	add	r1, sp, #12
 8003944:	f004 fb24 	bl	8007f90 <EE_ReadVariable>
	if(!status1){
 8003948:	2800      	cmp	r0, #0
 800394a:	d02d      	beq.n	80039a8 <LoadEEstreams+0xf0>
 800394c:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <LoadEEstreams+0x148>)
 800394e:	4698      	mov	r8, r3
		src2 =(uint8_t )(temp1 >> 8);
		dst2 =(uint8_t )temp1;
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003950:	20eb      	movs	r0, #235	; 0xeb
 8003952:	a903      	add	r1, sp, #12
 8003954:	f004 fb1c 	bl	8007f90 <EE_ReadVariable>
	if(!status1){
 8003958:	2800      	cmp	r0, #0
 800395a:	d01d      	beq.n	8003998 <LoadEEstreams+0xe0>
 800395c:	4f29      	ldr	r7, [pc, #164]	; (8003a04 <LoadEEstreams+0x14c>)
		src3 =(uint8_t )(temp1 >> 8);
		dst3 =(uint8_t )temp1;
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 800395e:	464b      	mov	r3, r9
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <LoadEEstreams+0xb6>
 8003966:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <LoadEEstreams+0x150>)
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	2a00      	cmp	r2, #0
 800396c:	d137      	bne.n	80039de <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 800396e:	4643      	mov	r3, r8
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <LoadEEstreams+0xc6>
 8003976:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <LoadEEstreams+0x154>)
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	2a00      	cmp	r2, #0
 800397c:	d136      	bne.n	80039ec <LoadEEstreams+0x134>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 800397e:	783b      	ldrb	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <LoadEEstreams+0xd4>
 8003984:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <LoadEEstreams+0x158>)
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	2a00      	cmp	r2, #0
 800398a:	d121      	bne.n	80039d0 <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 800398c:	2000      	movs	r0, #0
 800398e:	b005      	add	sp, #20
 8003990:	bcc0      	pop	{r6, r7}
 8003992:	46b9      	mov	r9, r7
 8003994:	46b0      	mov	r8, r6
 8003996:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src3 =(uint8_t )(temp1 >> 8);
 8003998:	466b      	mov	r3, sp
 800399a:	899b      	ldrh	r3, [r3, #12]
 800399c:	4f19      	ldr	r7, [pc, #100]	; (8003a04 <LoadEEstreams+0x14c>)
 800399e:	0a1a      	lsrs	r2, r3, #8
 80039a0:	703a      	strb	r2, [r7, #0]
		dst3 =(uint8_t )temp1;
 80039a2:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <LoadEEstreams+0x158>)
 80039a4:	7013      	strb	r3, [r2, #0]
 80039a6:	e7da      	b.n	800395e <LoadEEstreams+0xa6>
		src2 =(uint8_t )(temp1 >> 8);
 80039a8:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <LoadEEstreams+0x148>)
 80039aa:	466b      	mov	r3, sp
 80039ac:	4690      	mov	r8, r2
 80039ae:	4641      	mov	r1, r8
 80039b0:	899b      	ldrh	r3, [r3, #12]
 80039b2:	0a1a      	lsrs	r2, r3, #8
 80039b4:	700a      	strb	r2, [r1, #0]
		dst2 =(uint8_t )temp1;
 80039b6:	4a15      	ldr	r2, [pc, #84]	; (8003a0c <LoadEEstreams+0x154>)
 80039b8:	7013      	strb	r3, [r2, #0]
 80039ba:	e7c9      	b.n	8003950 <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 80039bc:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <LoadEEstreams+0x144>)
 80039be:	466b      	mov	r3, sp
 80039c0:	4691      	mov	r9, r2
 80039c2:	4649      	mov	r1, r9
 80039c4:	899b      	ldrh	r3, [r3, #12]
 80039c6:	0a1a      	lsrs	r2, r3, #8
 80039c8:	700a      	strb	r2, [r1, #0]
		dst1 =(uint8_t )temp1;
 80039ca:	4a0f      	ldr	r2, [pc, #60]	; (8003a08 <LoadEEstreams+0x150>)
 80039cc:	7013      	strb	r3, [r2, #0]
 80039ce:	e7b7      	b.n	8003940 <LoadEEstreams+0x88>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 80039d0:	9200      	str	r2, [sp, #0]
 80039d2:	0031      	movs	r1, r6
 80039d4:	0022      	movs	r2, r4
 80039d6:	0028      	movs	r0, r5
 80039d8:	f005 fe4a 	bl	8009670 <SetupDMAStreams>
 80039dc:	e7d6      	b.n	800398c <LoadEEstreams+0xd4>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 80039de:	9200      	str	r2, [sp, #0]
 80039e0:	0031      	movs	r1, r6
 80039e2:	0022      	movs	r2, r4
 80039e4:	0028      	movs	r0, r5
 80039e6:	f005 fe43 	bl	8009670 <SetupDMAStreams>
 80039ea:	e7c0      	b.n	800396e <LoadEEstreams+0xb6>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80039ec:	9200      	str	r2, [sp, #0]
 80039ee:	0031      	movs	r1, r6
 80039f0:	0022      	movs	r2, r4
 80039f2:	0028      	movs	r0, r5
 80039f4:	f005 fe3c 	bl	8009670 <SetupDMAStreams>
 80039f8:	e7c1      	b.n	800397e <LoadEEstreams+0xc6>
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	200011e2 	.word	0x200011e2
 8003a00:	200011e3 	.word	0x200011e3
 8003a04:	200011e4 	.word	0x200011e4
 8003a08:	20000ef1 	.word	0x20000ef1
 8003a0c:	20000ef2 	.word	0x20000ef2
 8003a10:	20000ef3 	.word	0x20000ef3

08003a14 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003a14:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 8003a16:	b530      	push	{r4, r5, lr}
 8003a18:	b083      	sub	sp, #12
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003a1a:	a901      	add	r1, sp, #4
 8003a1c:	0040      	lsls	r0, r0, #1
 8003a1e:	f004 fab7 	bl	8007f90 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d151      	bne.n	8003aca <LoadEEparams+0xb6>
		BOS.response =(uint8_t )temp1;
 8003a26:	466b      	mov	r3, sp
		BOS.response =BOS_default.response;
		BOS.trace =BOS_default.trace;
	}
	
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003a28:	2016      	movs	r0, #22
		BOS.response =(uint8_t )temp1;
 8003a2a:	889b      	ldrh	r3, [r3, #4]
 8003a2c:	4c42      	ldr	r4, [pc, #264]	; (8003b38 <LoadEEparams+0x124>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003a2e:	a901      	add	r1, sp, #4
		BOS.response =(uint8_t )temp1;
 8003a30:	71a3      	strb	r3, [r4, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003a32:	30ff      	adds	r0, #255	; 0xff
		BOS.trace =(traceOptions_t )(temp1 >> 8);
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	71e3      	strb	r3, [r4, #7]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003a38:	f004 faaa 	bl	8007f90 <EE_ReadVariable>
	if(!status1)
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d14f      	bne.n	8003ae0 <LoadEEparams+0xcc>
		BOS.buttons.debounce =temp1;
 8003a40:	466b      	mov	r3, sp
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003a42:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 8003a44:	889b      	ldrh	r3, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003a46:	a901      	add	r1, sp, #4
 8003a48:	0040      	lsls	r0, r0, #1
 8003a4a:	8023      	strh	r3, [r4, #0]
 8003a4c:	f004 faa0 	bl	8007f90 <EE_ReadVariable>
	if(!status1)
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d14f      	bne.n	8003af4 <LoadEEparams+0xe0>
		BOS.buttons.singleClickTime =temp1;
 8003a54:	466b      	mov	r3, sp
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003a56:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 8003a58:	889b      	ldrh	r3, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003a5a:	a901      	add	r1, sp, #4
 8003a5c:	30ff      	adds	r0, #255	; 0xff
 8003a5e:	8063      	strh	r3, [r4, #2]
 8003a60:	f004 fa96 	bl	8007f90 <EE_ReadVariable>
	if(!status1){
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d14f      	bne.n	8003b08 <LoadEEparams+0xf4>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003a68:	466b      	mov	r3, sp
 8003a6a:	889b      	ldrh	r3, [r3, #4]
 8003a6c:	80a3      	strh	r3, [r4, #4]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003a6e:	208c      	movs	r0, #140	; 0x8c
 8003a70:	a901      	add	r1, sp, #4
 8003a72:	0040      	lsls	r0, r0, #1
 8003a74:	f004 fa8c 	bl	8007f90 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003a78:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003a7a:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003a7c:	201a      	movs	r0, #26
 8003a7e:	1d99      	adds	r1, r3, #6
 8003a80:	30ff      	adds	r0, #255	; 0xff
 8003a82:	f004 fa85 	bl	8007f90 <EE_ReadVariable>
	if(!status1 && !status2){
 8003a86:	4305      	orrs	r5, r0
 8003a88:	b2ad      	uxth	r5, r5
 8003a8a:	2d00      	cmp	r5, #0
 8003a8c:	d147      	bne.n	8003b1e <LoadEEparams+0x10a>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003a8e:	466b      	mov	r3, sp
 8003a90:	466a      	mov	r2, sp
 8003a92:	88db      	ldrh	r3, [r3, #6]
 8003a94:	8892      	ldrh	r2, [r2, #4]
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60a3      	str	r3, [r4, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003a9c:	208d      	movs	r0, #141	; 0x8d
 8003a9e:	a901      	add	r1, sp, #4
 8003aa0:	0040      	lsls	r0, r0, #1
 8003aa2:	f004 fa75 	bl	8007f90 <EE_ReadVariable>
	if(!status1){
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d135      	bne.n	8003b16 <LoadEEparams+0x102>
		BOS.daylightsaving =(int8_t )temp1;
 8003aaa:	466b      	mov	r3, sp
 8003aac:	889b      	ldrh	r3, [r3, #4]
 8003aae:	81a3      	strh	r3, [r4, #12]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003ab0:	201c      	movs	r0, #28
 8003ab2:	a901      	add	r1, sp, #4
 8003ab4:	30ff      	adds	r0, #255	; 0xff
 8003ab6:	f004 fa6b 	bl	8007f90 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d128      	bne.n	8003b10 <LoadEEparams+0xfc>
		BOS.disableCLI =(uint8_t )temp1;
 8003abe:	466b      	mov	r3, sp
 8003ac0:	791b      	ldrb	r3, [r3, #4]
	else{
		BOS.disableCLI =BOS_default.disableCLI;
	}
	
	return result;
}
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	76e3      	strb	r3, [r4, #27]
 8003ac6:	b003      	add	sp, #12
 8003ac8:	bd30      	pop	{r4, r5, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003aca:	2016      	movs	r0, #22
		BOS.response =BOS_default.response;
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <LoadEEparams+0x128>)
 8003ace:	4c1a      	ldr	r4, [pc, #104]	; (8003b38 <LoadEEparams+0x124>)
 8003ad0:	88db      	ldrh	r3, [r3, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003ad2:	a901      	add	r1, sp, #4
		BOS.response =BOS_default.response;
 8003ad4:	80e3      	strh	r3, [r4, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003ad6:	30ff      	adds	r0, #255	; 0xff
 8003ad8:	f004 fa5a 	bl	8007f90 <EE_ReadVariable>
	if(!status1)
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d0af      	beq.n	8003a40 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003ae0:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <LoadEEparams+0x128>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003ae4:	a901      	add	r1, sp, #4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 8003ae6:	881b      	ldrh	r3, [r3, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003ae8:	0040      	lsls	r0, r0, #1
 8003aea:	8023      	strh	r3, [r4, #0]
 8003aec:	f004 fa50 	bl	8007f90 <EE_ReadVariable>
	if(!status1)
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d0af      	beq.n	8003a54 <LoadEEparams+0x40>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003af4:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <LoadEEparams+0x128>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003af8:	a901      	add	r1, sp, #4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003afa:	885b      	ldrh	r3, [r3, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003afc:	30ff      	adds	r0, #255	; 0xff
 8003afe:	8063      	strh	r3, [r4, #2]
 8003b00:	f004 fa46 	bl	8007f90 <EE_ReadVariable>
	if(!status1){
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d0af      	beq.n	8003a68 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <LoadEEparams+0x128>)
 8003b0a:	889b      	ldrh	r3, [r3, #4]
 8003b0c:	80a3      	strh	r3, [r4, #4]
 8003b0e:	e7ae      	b.n	8003a6e <LoadEEparams+0x5a>
		BOS.disableCLI =BOS_default.disableCLI;
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <LoadEEparams+0x128>)
 8003b12:	7edb      	ldrb	r3, [r3, #27]
 8003b14:	e7d5      	b.n	8003ac2 <LoadEEparams+0xae>
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003b16:	23c0      	movs	r3, #192	; 0xc0
 8003b18:	015b      	lsls	r3, r3, #5
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	e7c8      	b.n	8003ab0 <LoadEEparams+0x9c>
	else if(CLI_LOW_Baudrate_Flag)
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <LoadEEparams+0x12c>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <LoadEEparams+0x11a>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003b26:	23e1      	movs	r3, #225	; 0xe1
 8003b28:	025b      	lsls	r3, r3, #9
 8003b2a:	60a3      	str	r3, [r4, #8]
 8003b2c:	e7b6      	b.n	8003a9c <LoadEEparams+0x88>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003b2e:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <LoadEEparams+0x128>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	60a3      	str	r3, [r4, #8]
 8003b34:	e7b2      	b.n	8003a9c <LoadEEparams+0x88>
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	20006ab0 	.word	0x20006ab0
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	20000b0e 	.word	0x20000b0e

08003b44 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b46:	464f      	mov	r7, r9
 8003b48:	4646      	mov	r6, r8
 8003b4a:	46d6      	mov	lr, sl
 8003b4c:	b5c0      	push	{r6, r7, lr}
 8003b4e:	b088      	sub	sp, #32
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	466a      	mov	r2, sp
 8003b54:	83d3      	strh	r3, [r2, #30]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003b56:	330f      	adds	r3, #15
 8003b58:	4698      	mov	r8, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003b5a:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 8003b5c:	2601      	movs	r6, #1
 8003b5e:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003b60:	4699      	mov	r9, r3
 8003b62:	4f37      	ldr	r7, [pc, #220]	; (8003c40 <LoadEEbuttons+0xfc>)
 8003b64:	e005      	b.n	8003b72 <LoadEEbuttons+0x2e>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003b66:	3404      	adds	r4, #4
 8003b68:	3601      	adds	r6, #1
 8003b6a:	b2a4      	uxth	r4, r4
 8003b6c:	3709      	adds	r7, #9
 8003b6e:	2e08      	cmp	r6, #8
 8003b70:	d05e      	beq.n	8003c30 <LoadEEbuttons+0xec>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003b72:	231e      	movs	r3, #30
 8003b74:	446b      	add	r3, sp
 8003b76:	0019      	movs	r1, r3
 8003b78:	0020      	movs	r0, r4
 8003b7a:	f004 fa09 	bl	8007f90 <EE_ReadVariable>
 8003b7e:	1e05      	subs	r5, r0, #0
		if(!status1)									// This variable exists
 8003b80:	d1f1      	bne.n	8003b66 <LoadEEbuttons+0x22>
			temp8 =(uint8_t )(temp16 >> 8);
 8003b82:	466b      	mov	r3, sp
 8003b84:	8bdb      	ldrh	r3, [r3, #30]
 8003b86:	0a19      	lsrs	r1, r3, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003b88:	0b1a      	lsrs	r2, r3, #12
 8003b8a:	42b2      	cmp	r2, r6
 8003b8c:	d1eb      	bne.n	8003b66 <LoadEEbuttons+0x22>
 8003b8e:	4642      	mov	r2, r8
 8003b90:	4640      	mov	r0, r8
 8003b92:	400a      	ands	r2, r1
 8003b94:	4208      	tst	r0, r1
 8003b96:	d0e6      	beq.n	8003b66 <LoadEEbuttons+0x22>
				button[i + 1].type =temp8 & 0x0F;
 8003b98:	00b0      	lsls	r0, r6, #2
				button[i + 1].events =(uint8_t )temp16;
 8003b9a:	747b      	strb	r3, [r7, #17]
 8003b9c:	b283      	uxth	r3, r0
 8003b9e:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	231e      	movs	r3, #30
 8003ba4:	30e9      	adds	r0, #233	; 0xe9
 8003ba6:	446b      	add	r3, sp
 8003ba8:	0019      	movs	r1, r3
				button[i + 1].type =temp8 & 0x0F;
 8003baa:	72ba      	strb	r2, [r7, #10]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003bac:	b280      	uxth	r0, r0
 8003bae:	f004 f9ef 	bl	8007f90 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003bb2:	466b      	mov	r3, sp
 8003bb4:	8bdb      	ldrh	r3, [r3, #30]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003bb6:	4650      	mov	r0, sl
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003bb8:	0a1a      	lsrs	r2, r3, #8
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003bba:	73bb      	strb	r3, [r7, #14]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003bbc:	231e      	movs	r3, #30
 8003bbe:	30ea      	adds	r0, #234	; 0xea
 8003bc0:	446b      	add	r3, sp
 8003bc2:	0019      	movs	r1, r3
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003bc4:	72fa      	strb	r2, [r7, #11]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003bc6:	b280      	uxth	r0, r0
 8003bc8:	f004 f9e2 	bl	8007f90 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003bcc:	466b      	mov	r3, sp
 8003bce:	8bdb      	ldrh	r3, [r3, #30]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003bd0:	4650      	mov	r0, sl
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003bd2:	0a1a      	lsrs	r2, r3, #8
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003bd4:	73fb      	strb	r3, [r7, #15]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003bd6:	231e      	movs	r3, #30
 8003bd8:	30eb      	adds	r0, #235	; 0xeb
 8003bda:	446b      	add	r3, sp
 8003bdc:	0019      	movs	r1, r3
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003bde:	733a      	strb	r2, [r7, #12]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003be0:	b280      	uxth	r0, r0
 8003be2:	f004 f9d5 	bl	8007f90 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003be6:	466b      	mov	r3, sp
 8003be8:	8bdb      	ldrh	r3, [r3, #30]
				AddPortButton(button[i + 1].type,i + 1);
 8003bea:	7ab8      	ldrb	r0, [r7, #10]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003bec:	0a1a      	lsrs	r2, r3, #8
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003bee:	743b      	strb	r3, [r7, #16]
				AddPortButton(button[i + 1].type,i + 1);
 8003bf0:	b2f3      	uxtb	r3, r6
 8003bf2:	0019      	movs	r1, r3
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003bf4:	737a      	strb	r2, [r7, #13]
				AddPortButton(button[i + 1].type,i + 1);
 8003bf6:	469a      	mov	sl, r3
 8003bf8:	f004 fdb0 	bl	800875c <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003bfc:	4648      	mov	r0, r9
 8003bfe:	7c79      	ldrb	r1, [r7, #17]
 8003c00:	7afb      	ldrb	r3, [r7, #11]
 8003c02:	104a      	asrs	r2, r1, #1
 8003c04:	9505      	str	r5, [sp, #20]
 8003c06:	4002      	ands	r2, r0
 8003c08:	4001      	ands	r1, r0
 8003c0a:	7c38      	ldrb	r0, [r7, #16]
 8003c0c:	3404      	adds	r4, #4
 8003c0e:	9004      	str	r0, [sp, #16]
 8003c10:	7bf8      	ldrb	r0, [r7, #15]
 8003c12:	3601      	adds	r6, #1
 8003c14:	9003      	str	r0, [sp, #12]
 8003c16:	7bb8      	ldrb	r0, [r7, #14]
 8003c18:	b2a4      	uxth	r4, r4
 8003c1a:	9002      	str	r0, [sp, #8]
 8003c1c:	7b78      	ldrb	r0, [r7, #13]
 8003c1e:	3709      	adds	r7, #9
 8003c20:	9001      	str	r0, [sp, #4]
 8003c22:	78f8      	ldrb	r0, [r7, #3]
 8003c24:	9000      	str	r0, [sp, #0]
 8003c26:	4650      	mov	r0, sl
 8003c28:	f004 fea2 	bl	8008970 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003c2c:	2e08      	cmp	r6, #8
 8003c2e:	d1a0      	bne.n	8003b72 <LoadEEbuttons+0x2e>
			}
		}
	}
	
	return result;
}
 8003c30:	2000      	movs	r0, #0
 8003c32:	b008      	add	sp, #32
 8003c34:	bce0      	pop	{r5, r6, r7}
 8003c36:	46ba      	mov	sl, r7
 8003c38:	46b1      	mov	r9, r6
 8003c3a:	46a8      	mov	r8, r5
 8003c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	200015b4 	.word	0x200015b4

08003c44 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c46:	46d6      	mov	lr, sl
 8003c48:	4646      	mov	r6, r8
 8003c4a:	464f      	mov	r7, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003c4c:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 8003c4e:	b5c0      	push	{r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003c50:	f010 ffa2 	bl	8014b98 <malloc>
 8003c54:	1e06      	subs	r6, r0, #0
	if(snipBuffer == NULL)
 8003c56:	d06a      	beq.n	8003d2e <LoadROsnippets+0xea>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003c58:	4c36      	ldr	r4, [pc, #216]	; (8003d34 <LoadROsnippets+0xf0>)
 8003c5a:	7822      	ldrb	r2, [r4, #0]
 8003c5c:	2afe      	cmp	r2, #254	; 0xfe
 8003c5e:	d155      	bne.n	8003d0c <LoadROsnippets+0xc8>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	4699      	mov	r9, r3
 8003c64:	2364      	movs	r3, #100	; 0x64
 8003c66:	469a      	mov	sl, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003c68:	4b33      	ldr	r3, [pc, #204]	; (8003d38 <LoadROsnippets+0xf4>)
 8003c6a:	4f34      	ldr	r7, [pc, #208]	; (8003d3c <LoadROsnippets+0xf8>)
 8003c6c:	4698      	mov	r8, r3
 8003c6e:	44ba      	add	sl, r7
		for(i =0; i < sizeof(snippet_t); i++)
 8003c70:	0021      	movs	r1, r4
 8003c72:	1b35      	subs	r5, r6, r4
 8003c74:	3114      	adds	r1, #20
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003c76:	7822      	ldrb	r2, [r4, #0]
 8003c78:	552a      	strb	r2, [r5, r4]
		for(i =0; i < sizeof(snippet_t); i++)
 8003c7a:	3401      	adds	r4, #1
 8003c7c:	428c      	cmp	r4, r1
 8003c7e:	d1fa      	bne.n	8003c76 <LoadROsnippets+0x32>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003c80:	2214      	movs	r2, #20
 8003c82:	4649      	mov	r1, r9
 8003c84:	0038      	movs	r0, r7
 8003c86:	f011 f9bd 	bl	8015004 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003c8a:	2214      	movs	r2, #20
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	0030      	movs	r0, r6
 8003c90:	f011 f9c1 	bl	8015016 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003c94:	7822      	ldrb	r2, [r4, #0]
 8003c96:	2afd      	cmp	r2, #253	; 0xfd
 8003c98:	d83a      	bhi.n	8003d10 <LoadROsnippets+0xcc>
		i =0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	3d14      	subs	r5, #20
 8003c9e:	e001      	b.n	8003ca4 <LoadROsnippets+0x60>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003ca0:	2b32      	cmp	r3, #50	; 0x32
 8003ca2:	d030      	beq.n	8003d06 <LoadROsnippets+0xc2>
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003ca4:	552a      	strb	r2, [r5, r4]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003ca6:	7862      	ldrb	r2, [r4, #1]
			++i;
 8003ca8:	3301      	adds	r3, #1
			++currentAdd;
 8003caa:	3401      	adds	r4, #1
			++i;
 8003cac:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003cae:	2afd      	cmp	r2, #253	; 0xfd
 8003cb0:	d9f6      	bls.n	8003ca0 <LoadROsnippets+0x5c>
 8003cb2:	001d      	movs	r5, r3
 8003cb4:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 8003cb6:	5cb2      	ldrb	r2, [r6, r2]
 8003cb8:	2a00      	cmp	r2, #0
 8003cba:	d001      	beq.n	8003cc0 <LoadROsnippets+0x7c>
			++i;	// String termination char was not recorded, then add one
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	b2dd      	uxtb	r5, r3
		snippets[s].cmd =(char* )malloc(i);
 8003cc0:	0028      	movs	r0, r5
 8003cc2:	f010 ff69 	bl	8014b98 <malloc>
 8003cc6:	60f8      	str	r0, [r7, #12]
		if(snippets[s].cmd == NULL){
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	d026      	beq.n	8003d1a <LoadROsnippets+0xd6>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003ccc:	002a      	movs	r2, r5
 8003cce:	0031      	movs	r1, r6
 8003cd0:	f011 f998 	bl	8015004 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003cd4:	4643      	mov	r3, r8
 8003cd6:	4642      	mov	r2, r8
 8003cd8:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 8003cda:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003cdc:	3301      	adds	r3, #1
 8003cde:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003ce0:	0030      	movs	r0, r6
 8003ce2:	002a      	movs	r2, r5
 8003ce4:	f011 f997 	bl	8015016 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003ce8:	7823      	ldrb	r3, [r4, #0]
 8003cea:	2bfe      	cmp	r3, #254	; 0xfe
 8003cec:	d102      	bne.n	8003cf4 <LoadROsnippets+0xb0>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003cee:	3714      	adds	r7, #20
 8003cf0:	45ba      	cmp	sl, r7
 8003cf2:	d1bd      	bne.n	8003c70 <LoadROsnippets+0x2c>
			break;
	}
	
	free(snipBuffer);
 8003cf4:	0030      	movs	r0, r6
 8003cf6:	f010 ff59 	bl	8014bac <free>
	return BOS_OK;
 8003cfa:	2000      	movs	r0, #0
}
 8003cfc:	bce0      	pop	{r5, r6, r7}
 8003cfe:	46ba      	mov	sl, r7
 8003d00:	46b1      	mov	r9, r6
 8003d02:	46a8      	mov	r8, r5
 8003d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d06:	2231      	movs	r2, #49	; 0x31
 8003d08:	2532      	movs	r5, #50	; 0x32
 8003d0a:	e7d4      	b.n	8003cb6 <LoadROsnippets+0x72>
		return BOS_ERROR;
 8003d0c:	20ff      	movs	r0, #255	; 0xff
 8003d0e:	e7f5      	b.n	8003cfc <LoadROsnippets+0xb8>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003d10:	2201      	movs	r2, #1
 8003d12:	2500      	movs	r5, #0
		i =0;
 8003d14:	2300      	movs	r3, #0
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003d16:	4252      	negs	r2, r2
 8003d18:	e7cd      	b.n	8003cb6 <LoadROsnippets+0x72>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003d1a:	2214      	movs	r2, #20
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	0038      	movs	r0, r7
 8003d20:	f011 f979 	bl	8015016 <memset>
			free(snipBuffer);
 8003d24:	0030      	movs	r0, r6
 8003d26:	f010 ff41 	bl	8014bac <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003d2a:	200e      	movs	r0, #14
 8003d2c:	e7e6      	b.n	8003cfc <LoadROsnippets+0xb8>
		return BOS_MEM_FULL;
 8003d2e:	20fb      	movs	r0, #251	; 0xfb
 8003d30:	e7e4      	b.n	8003cfc <LoadROsnippets+0xb8>
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	0801dc00 	.word	0x0801dc00
 8003d38:	200012b7 	.word	0x200012b7
 8003d3c:	20006acc 	.word	0x20006acc

08003d40 <LoadEEvars>:
void LoadEEvars(void){
 8003d40:	b510      	push	{r4, lr}
	LoadROtopology();
 8003d42:	f7ff fcb3 	bl	80036ac <LoadROtopology>
	LoadEEportsDir();
 8003d46:	f7ff fd01 	bl	800374c <LoadEEportsDir>
	LoadEEalias();
 8003d4a:	f7ff fd21 	bl	8003790 <LoadEEalias>
	LoadEEgroup();
 8003d4e:	f7ff fd63 	bl	8003818 <LoadEEgroup>
	LoadEEstreams();
 8003d52:	f7ff fdb1 	bl	80038b8 <LoadEEstreams>
	LoadEEparams();
 8003d56:	f7ff fe5d 	bl	8003a14 <LoadEEparams>
	LoadEEbuttons();
 8003d5a:	f7ff fef3 	bl	8003b44 <LoadEEbuttons>
	LoadROsnippets();
 8003d5e:	f7ff ff71 	bl	8003c44 <LoadROsnippets>
}
 8003d62:	bd10      	pop	{r4, pc}

08003d64 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d66:	46c6      	mov	lr, r8
 8003d68:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003d6a:	4e10      	ldr	r6, [pc, #64]	; (8003dac <SaveEEportsDir+0x48>)
 8003d6c:	7833      	ldrb	r3, [r6, #0]
 8003d6e:	4698      	mov	r8, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d016      	beq.n	8003da2 <SaveEEportsDir+0x3e>
	BOS_Status result =BOS_OK;
 8003d74:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003d76:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003d78:	4698      	mov	r8, r3
 8003d7a:	4f0d      	ldr	r7, [pc, #52]	; (8003db0 <SaveEEportsDir+0x4c>)
 8003d7c:	e007      	b.n	8003d8e <SaveEEportsDir+0x2a>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003d7e:	2c19      	cmp	r4, #25
 8003d80:	d901      	bls.n	8003d86 <SaveEEportsDir+0x22>
			result =BOS_ERR_EEPROM;
 8003d82:	230a      	movs	r3, #10
 8003d84:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003d86:	7833      	ldrb	r3, [r6, #0]
 8003d88:	b2ec      	uxtb	r4, r5
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	d309      	bcc.n	8003da2 <SaveEEportsDir+0x3e>
		if(arrayPortsDir[i - 1])
 8003d8e:	1e63      	subs	r3, r4, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	5af9      	ldrh	r1, [r7, r3]
 8003d94:	1c65      	adds	r5, r4, #1
 8003d96:	2900      	cmp	r1, #0
 8003d98:	d0f1      	beq.n	8003d7e <SaveEEportsDir+0x1a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003d9a:	b2a8      	uxth	r0, r5
 8003d9c:	f004 f924 	bl	8007fe8 <EE_WriteVariable>
 8003da0:	e7ed      	b.n	8003d7e <SaveEEportsDir+0x1a>
	}
	
	return result;
}
 8003da2:	4640      	mov	r0, r8
 8003da4:	bc80      	pop	{r7}
 8003da6:	46b8      	mov	r8, r7
 8003da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	2000001c 	.word	0x2000001c
 8003db0:	20006f68 	.word	0x20006f68

08003db4 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003db4:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 8003db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003db8:	4646      	mov	r6, r8
 8003dba:	46d6      	mov	lr, sl
 8003dbc:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 8003dbe:	4698      	mov	r8, r3
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 8003dc2:	b5c0      	push	{r6, r7, lr}
 8003dc4:	4699      	mov	r9, r3
 8003dc6:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003dc8:	2600      	movs	r6, #0
 8003dca:	469a      	mov	sl, r3
 8003dcc:	e005      	b.n	8003dda <SaveEEalias+0x26>
 8003dce:	4653      	mov	r3, sl
 8003dd0:	3601      	adds	r6, #1
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	b2f6      	uxtb	r6, r6
 8003dd6:	42b3      	cmp	r3, r6
 8003dd8:	d326      	bcc.n	8003e28 <SaveEEalias+0x74>
	    {
		if(moduleAlias[i][0]){
 8003dda:	464b      	mov	r3, r9
 8003ddc:	00b4      	lsls	r4, r6, #2
 8003dde:	19a4      	adds	r4, r4, r6
 8003de0:	0064      	lsls	r4, r4, #1
 8003de2:	5d1b      	ldrb	r3, [r3, r4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f2      	beq.n	8003dce <SaveEEalias+0x1a>
 8003de8:	4645      	mov	r5, r8
 8003dea:	4647      	mov	r7, r8
 8003dec:	3401      	adds	r4, #1
 8003dee:	351c      	adds	r5, #28
 8003df0:	3721      	adds	r7, #33	; 0x21
 8003df2:	444c      	add	r4, r9
 8003df4:	b2ad      	uxth	r5, r5
 8003df6:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003df8:	7821      	ldrb	r1, [r4, #0]
 8003dfa:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003dfc:	0028      	movs	r0, r5
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003dfe:	18c9      	adds	r1, r1, r3
 8003e00:	3501      	adds	r5, #1
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003e02:	b289      	uxth	r1, r1
 8003e04:	b2ad      	uxth	r5, r5
 8003e06:	f004 f8ef 	bl	8007fe8 <EE_WriteVariable>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003e0a:	42bd      	cmp	r5, r7
 8003e0c:	d002      	beq.n	8003e14 <SaveEEalias+0x60>
 8003e0e:	7863      	ldrb	r3, [r4, #1]
 8003e10:	3402      	adds	r4, #2
 8003e12:	e7f1      	b.n	8003df8 <SaveEEalias+0x44>
 8003e14:	4643      	mov	r3, r8
 8003e16:	3305      	adds	r3, #5
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003e1c:	4653      	mov	r3, sl
 8003e1e:	3601      	adds	r6, #1
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	b2f6      	uxtb	r6, r6
 8003e24:	42b3      	cmp	r3, r6
 8003e26:	d2d8      	bcs.n	8003dda <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 8003e28:	2000      	movs	r0, #0
 8003e2a:	bce0      	pop	{r5, r6, r7}
 8003e2c:	46ba      	mov	sl, r7
 8003e2e:	46b1      	mov	r9, r6
 8003e30:	46a8      	mov	r8, r5
 8003e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e34:	20001000 	.word	0x20001000
 8003e38:	2000001c 	.word	0x2000001c

08003e3c <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	46de      	mov	lr, fp
 8003e40:	4657      	mov	r7, sl
 8003e42:	464e      	mov	r6, r9
 8003e44:	4645      	mov	r5, r8
 8003e46:	468b      	mov	fp, r1
 8003e48:	b5e0      	push	{r5, r6, r7, lr}
 8003e4a:	001c      	movs	r4, r3
 8003e4c:	ab0a      	add	r3, sp, #40	; 0x28
 8003e4e:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003e50:	0001      	movs	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003e52:	469a      	mov	sl, r3
 8003e54:	ab0b      	add	r3, sp, #44	; 0x2c
 8003e56:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003e58:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003e5a:	4698      	mov	r8, r3
 8003e5c:	ab0c      	add	r3, sp, #48	; 0x30
 8003e5e:	781f      	ldrb	r7, [r3, #0]
 8003e60:	ab0d      	add	r3, sp, #52	; 0x34
 8003e62:	781e      	ldrb	r6, [r3, #0]
 8003e64:	ab0e      	add	r3, sp, #56	; 0x38
 8003e66:	4691      	mov	r9, r2
 8003e68:	781d      	ldrb	r5, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003e6a:	f004 f8bd 	bl	8007fe8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003e6e:	465b      	mov	r3, fp
 8003e70:	0a19      	lsrs	r1, r3, #8
 8003e72:	b289      	uxth	r1, r1
 8003e74:	20e5      	movs	r0, #229	; 0xe5
 8003e76:	f004 f8b7 	bl	8007fe8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003e7a:	465b      	mov	r3, fp
 8003e7c:	20e6      	movs	r0, #230	; 0xe6
 8003e7e:	b299      	uxth	r1, r3
 8003e80:	f004 f8b2 	bl	8007fe8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003e84:	464b      	mov	r3, r9
 8003e86:	0a19      	lsrs	r1, r3, #8
 8003e88:	b289      	uxth	r1, r1
 8003e8a:	20e7      	movs	r0, #231	; 0xe7
 8003e8c:	f004 f8ac 	bl	8007fe8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003e90:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003e92:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003e94:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003e96:	4454      	add	r4, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003e98:	20e8      	movs	r0, #232	; 0xe8
 8003e9a:	f004 f8a5 	bl	8007fe8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003e9e:	b2a1      	uxth	r1, r4
 8003ea0:	20e9      	movs	r0, #233	; 0xe9
 8003ea2:	f004 f8a1 	bl	8007fe8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003ea6:	4643      	mov	r3, r8
 8003ea8:	0219      	lsls	r1, r3, #8
 8003eaa:	19c9      	adds	r1, r1, r7
 8003eac:	b289      	uxth	r1, r1
 8003eae:	20ea      	movs	r0, #234	; 0xea
 8003eb0:	f004 f89a 	bl	8007fe8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003eb4:	0231      	lsls	r1, r6, #8
 8003eb6:	1949      	adds	r1, r1, r5
 8003eb8:	b289      	uxth	r1, r1
 8003eba:	20eb      	movs	r0, #235	; 0xeb
 8003ebc:	f004 f894 	bl	8007fe8 <EE_WriteVariable>
	
	return result;
}
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	bcf0      	pop	{r4, r5, r6, r7}
 8003ec4:	46bb      	mov	fp, r7
 8003ec6:	46b2      	mov	sl, r6
 8003ec8:	46a9      	mov	r9, r5
 8003eca:	46a0      	mov	r8, r4
 8003ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)

08003ed0 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 5) | (uint16_t )BOS.response);
 8003ed0:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 8003ed2:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 5) | (uint16_t )BOS.response);
 8003ed4:	4c19      	ldr	r4, [pc, #100]	; (8003f3c <SaveEEparams+0x6c>)
 8003ed6:	0040      	lsls	r0, r0, #1
 8003ed8:	79e3      	ldrb	r3, [r4, #7]
 8003eda:	79a1      	ldrb	r1, [r4, #6]
 8003edc:	015b      	lsls	r3, r3, #5
 8003ede:	4319      	orrs	r1, r3
 8003ee0:	f004 f882 	bl	8007fe8 <EE_WriteVariable>
	
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003ee4:	2016      	movs	r0, #22
 8003ee6:	8821      	ldrh	r1, [r4, #0]
 8003ee8:	30ff      	adds	r0, #255	; 0xff
 8003eea:	f004 f87d 	bl	8007fe8 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003eee:	208b      	movs	r0, #139	; 0x8b
 8003ef0:	8861      	ldrh	r1, [r4, #2]
 8003ef2:	0040      	lsls	r0, r0, #1
 8003ef4:	f004 f878 	bl	8007fe8 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003ef8:	2018      	movs	r0, #24
 8003efa:	7963      	ldrb	r3, [r4, #5]
 8003efc:	7b21      	ldrb	r1, [r4, #12]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	4319      	orrs	r1, r3
 8003f02:	30ff      	adds	r0, #255	; 0xff
 8003f04:	f004 f870 	bl	8007fe8 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003f08:	208c      	movs	r0, #140	; 0x8c
 8003f0a:	8921      	ldrh	r1, [r4, #8]
 8003f0c:	0040      	lsls	r0, r0, #1
 8003f0e:	f004 f86b 	bl	8007fe8 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8003f12:	201a      	movs	r0, #26
 8003f14:	8961      	ldrh	r1, [r4, #10]
 8003f16:	30ff      	adds	r0, #255	; 0xff
 8003f18:	f004 f866 	bl	8007fe8 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003f1c:	208d      	movs	r0, #141	; 0x8d
 8003f1e:	7b63      	ldrb	r3, [r4, #13]
 8003f20:	7921      	ldrb	r1, [r4, #4]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	4319      	orrs	r1, r3
 8003f26:	0040      	lsls	r0, r0, #1
 8003f28:	f004 f85e 	bl	8007fe8 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003f2c:	201c      	movs	r0, #28
 8003f2e:	7ee1      	ldrb	r1, [r4, #27]
 8003f30:	30ff      	adds	r0, #255	; 0xff
 8003f32:	f004 f859 	bl	8007fe8 <EE_WriteVariable>
	
	return result;
}
 8003f36:	2000      	movs	r0, #0
 8003f38:	bd10      	pop	{r4, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	20006ab0 	.word	0x20006ab0

08003f40 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003f44:	4e12      	ldr	r6, [pc, #72]	; (8003f90 <ClearEEportsDir+0x50>)
 8003f46:	2234      	movs	r2, #52	; 0x34
 8003f48:	2100      	movs	r1, #0
 8003f4a:	0030      	movs	r0, r6
BOS_Status ClearEEportsDir(void){
 8003f4c:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003f4e:	f011 f862 	bl	8015016 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003f52:	4d10      	ldr	r5, [pc, #64]	; (8003f94 <ClearEEportsDir+0x54>)
 8003f54:	782f      	ldrb	r7, [r5, #0]
 8003f56:	2f00      	cmp	r7, #0
 8003f58:	d016      	beq.n	8003f88 <ClearEEportsDir+0x48>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003f5e:	2700      	movs	r7, #0
 8003f60:	4698      	mov	r8, r3
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003f62:	2c19      	cmp	r4, #25
 8003f64:	d900      	bls.n	8003f68 <ClearEEportsDir+0x28>
			result =BOS_ERR_EEPROM;
 8003f66:	270a      	movs	r7, #10
	for(uint8_t i =1; i <= N; i++){
 8003f68:	4643      	mov	r3, r8
 8003f6a:	b2dc      	uxtb	r4, r3
 8003f6c:	782b      	ldrb	r3, [r5, #0]
 8003f6e:	42a3      	cmp	r3, r4
 8003f70:	d30a      	bcc.n	8003f88 <ClearEEportsDir+0x48>
 8003f72:	1e63      	subs	r3, r4, #1
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	5af1      	ldrh	r1, [r6, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003f78:	1c63      	adds	r3, r4, #1
 8003f7a:	4698      	mov	r8, r3
		if(arrayPortsDir[i - 1])
 8003f7c:	2900      	cmp	r1, #0
 8003f7e:	d0f0      	beq.n	8003f62 <ClearEEportsDir+0x22>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003f80:	0018      	movs	r0, r3
 8003f82:	f004 f831 	bl	8007fe8 <EE_WriteVariable>
 8003f86:	e7ec      	b.n	8003f62 <ClearEEportsDir+0x22>
	}
	
	return result;
}
 8003f88:	0038      	movs	r0, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	46b8      	mov	r8, r7
 8003f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f90:	20006f68 	.word	0x20006f68
 8003f94:	2000001c 	.word	0x2000001c

08003f98 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003f98:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 8003f9a:	b530      	push	{r4, r5, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003f9c:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 8003f9e:	b08f      	sub	sp, #60	; 0x3c
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003fa0:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003fa2:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	aa03      	add	r2, sp, #12
 8003fa8:	ab06      	add	r3, sp, #24
 8003faa:	a905      	add	r1, sp, #20
 8003fac:	2001      	movs	r0, #1
 8003fae:	f009 fd61 	bl	800da74 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003fb2:	aa04      	add	r2, sp, #16
 8003fb4:	ab08      	add	r3, sp, #32
 8003fb6:	a907      	add	r1, sp, #28
 8003fb8:	2002      	movs	r0, #2
 8003fba:	9400      	str	r4, [sp, #0]
 8003fbc:	f009 fd5a 	bl	800da74 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003fc4:	466b      	mov	r3, sp
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003fc8:	899b      	ldrh	r3, [r3, #12]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003fca:	9805      	ldr	r0, [sp, #20]
 8003fcc:	a909      	add	r1, sp, #36	; 0x24
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003fce:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd0:	950b      	str	r5, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003fd2:	f00e fb8f 	bl	80126f4 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003fda:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003fdc:	9808      	ldr	r0, [sp, #32]
 8003fde:	a909      	add	r1, sp, #36	; 0x24
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003fe0:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fe2:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003fe4:	f00e fb86 	bl	80126f4 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003fe8:	466b      	mov	r3, sp
 8003fea:	2200      	movs	r2, #0
 8003fec:	8999      	ldrh	r1, [r3, #12]
 8003fee:	9805      	ldr	r0, [sp, #20]
 8003ff0:	f00e fd34 	bl	8012a5c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003ff4:	2005      	movs	r0, #5
 8003ff6:	f00a f975 	bl	800e2e4 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003ffa:	8821      	ldrh	r1, [r4, #0]
 8003ffc:	9808      	ldr	r0, [sp, #32]
 8003ffe:	f00e fd27 	bl	8012a50 <HAL_GPIO_ReadPin>
 8004002:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8004004:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <IsLowerCLIbaud+0x76>
}
 800400a:	b00f      	add	sp, #60	; 0x3c
 800400c:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800400e:	466b      	mov	r3, sp
 8004010:	2201      	movs	r2, #1
 8004012:	8999      	ldrh	r1, [r3, #12]
 8004014:	9805      	ldr	r0, [sp, #20]
 8004016:	f00e fd21 	bl	8012a5c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800401a:	2005      	movs	r0, #5
 800401c:	f00a f962 	bl	800e2e4 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8004020:	8821      	ldrh	r1, [r4, #0]
 8004022:	9808      	ldr	r0, [sp, #32]
 8004024:	f00e fd14 	bl	8012a50 <HAL_GPIO_ReadPin>
 8004028:	3801      	subs	r0, #1
 800402a:	4243      	negs	r3, r0
 800402c:	4158      	adcs	r0, r3
			return 1;
 800402e:	b2c0      	uxtb	r0, r0
 8004030:	e7eb      	b.n	800400a <IsLowerCLIbaud+0x72>
 8004032:	46c0      	nop			; (mov r8, r8)

08004034 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8004034:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8004036:	f00a fb93 	bl	800e760 <GetUart>
	
	huart->Init.BaudRate =57600;
 800403a:	23e1      	movs	r3, #225	; 0xe1
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8004046:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 8004048:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800404a:	015b      	lsls	r3, r3, #5
 800404c:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800404e:	f010 fbdf 	bl	8014810 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8004052:	2120      	movs	r1, #32
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	6813      	ldr	r3, [r2, #0]
 8004058:	430b      	orrs	r3, r1
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bd10      	pop	{r4, pc}
 800405e:	46c0      	nop			; (mov r8, r8)

08004060 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	0006      	movs	r6, r0
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8004064:	2400      	movs	r4, #0
 8004066:	4d08      	ldr	r5, [pc, #32]	; (8004088 <IsModuleParameter+0x28>)
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8004068:	0030      	movs	r0, r6
 800406a:	6829      	ldr	r1, [r5, #0]
 800406c:	f7fc f84a 	bl	8000104 <strcmp>
			return i + 1;
 8004070:	3401      	adds	r4, #1
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8004072:	2800      	cmp	r0, #0
 8004074:	d005      	beq.n	8004082 <IsModuleParameter+0x22>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8004076:	b2e4      	uxtb	r4, r4
 8004078:	350c      	adds	r5, #12
 800407a:	2c0d      	cmp	r4, #13
 800407c:	d1f4      	bne.n	8004068 <IsModuleParameter+0x8>
	}
	return 0;
 800407e:	2000      	movs	r0, #0
}
 8004080:	bd70      	pop	{r4, r5, r6, pc}
			return i + 1;
 8004082:	b2e0      	uxtb	r0, r4
 8004084:	e7fc      	b.n	8004080 <IsModuleParameter+0x20>
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	2000008c 	.word	0x2000008c

0800408c <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 800408c:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 800408e:	7801      	ldrb	r1, [r0, #0]
uint8_t IsMathOperator(char *string){
 8004090:	0003      	movs	r3, r0
		if(!strcmp(string,"="))
 8004092:	000c      	movs	r4, r1
 8004094:	3c3d      	subs	r4, #61	; 0x3d
 8004096:	293d      	cmp	r1, #61	; 0x3d
 8004098:	d100      	bne.n	800409c <IsMathOperator+0x10>
 800409a:	7844      	ldrb	r4, [r0, #1]
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 800409c:	000d      	movs	r5, r1
		if(!strcmp(string,"="))
 800409e:	2006      	movs	r0, #6
		else if(!strcmp(string,">"))
 80040a0:	3d3e      	subs	r5, #62	; 0x3e
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 80040a2:	393c      	subs	r1, #60	; 0x3c
		if(!strcmp(string,"="))
 80040a4:	2c00      	cmp	r4, #0
 80040a6:	d027      	beq.n	80040f8 <IsMathOperator+0x6c>
		else if(!strcmp(string,">"))
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	d102      	bne.n	80040b2 <IsMathOperator+0x26>
 80040ac:	785a      	ldrb	r2, [r3, #1]
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	d024      	beq.n	80040fc <IsMathOperator+0x70>
		else if(!strcmp(string,"<"))
 80040b2:	2900      	cmp	r1, #0
 80040b4:	d102      	bne.n	80040bc <IsMathOperator+0x30>
 80040b6:	785a      	ldrb	r2, [r3, #1]
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	d021      	beq.n	8004100 <IsMathOperator+0x74>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	2a3e      	cmp	r2, #62	; 0x3e
 80040c0:	d105      	bne.n	80040ce <IsMathOperator+0x42>
 80040c2:	785e      	ldrb	r6, [r3, #1]
 80040c4:	2e3d      	cmp	r6, #61	; 0x3d
 80040c6:	d102      	bne.n	80040ce <IsMathOperator+0x42>
 80040c8:	789e      	ldrb	r6, [r3, #2]
 80040ca:	2e00      	cmp	r6, #0
 80040cc:	d01a      	beq.n	8004104 <IsMathOperator+0x78>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80040ce:	2a3c      	cmp	r2, #60	; 0x3c
 80040d0:	d105      	bne.n	80040de <IsMathOperator+0x52>
 80040d2:	785e      	ldrb	r6, [r3, #1]
 80040d4:	2e3d      	cmp	r6, #61	; 0x3d
 80040d6:	d102      	bne.n	80040de <IsMathOperator+0x52>
 80040d8:	789e      	ldrb	r6, [r3, #2]
 80040da:	2e00      	cmp	r6, #0
 80040dc:	d014      	beq.n	8004108 <IsMathOperator+0x7c>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80040de:	2a21      	cmp	r2, #33	; 0x21
 80040e0:	d105      	bne.n	80040ee <IsMathOperator+0x62>
 80040e2:	785a      	ldrb	r2, [r3, #1]
 80040e4:	2a3d      	cmp	r2, #61	; 0x3d
 80040e6:	d102      	bne.n	80040ee <IsMathOperator+0x62>
 80040e8:	789a      	ldrb	r2, [r3, #2]
 80040ea:	2a00      	cmp	r2, #0
 80040ec:	d00e      	beq.n	800410c <IsMathOperator+0x80>
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80040ee:	3801      	subs	r0, #1
 80040f0:	b2c0      	uxtb	r0, r0
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d1d6      	bne.n	80040a4 <IsMathOperator+0x18>
			return MATH_NOT_EQUAL;
	}
	return 0;
}
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 80040f8:	2001      	movs	r0, #1
 80040fa:	e7fc      	b.n	80040f6 <IsMathOperator+0x6a>
			return MATH_GREATER;
 80040fc:	2002      	movs	r0, #2
 80040fe:	e7fa      	b.n	80040f6 <IsMathOperator+0x6a>
			return MATH_SMALLER;
 8004100:	2003      	movs	r0, #3
 8004102:	e7f8      	b.n	80040f6 <IsMathOperator+0x6a>
			return MATH_GREATER_EQUAL;
 8004104:	2004      	movs	r0, #4
 8004106:	e7f6      	b.n	80040f6 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
 8004108:	2005      	movs	r0, #5
 800410a:	e7f4      	b.n	80040f6 <IsMathOperator+0x6a>
			return MATH_NOT_EQUAL;
 800410c:	2006      	movs	r0, #6
 800410e:	e7f2      	b.n	80040f6 <IsMathOperator+0x6a>

08004110 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8004110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004112:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8004114:	4b10      	ldr	r3, [pc, #64]	; (8004158 <ExploreNeighbors+0x48>)
BOS_Status ExploreNeighbors(uint8_t ignore){
 8004116:	0005      	movs	r5, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8004118:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 800411a:	4698      	mov	r8, r3
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800411c:	2703      	movs	r7, #3
BOS_Status ExploreNeighbors(uint8_t ignore){
 800411e:	b500      	push	{lr}
			messageParams[0] =(uint8_t )(myPN >> 8);
 8004120:	4e0e      	ldr	r6, [pc, #56]	; (800415c <ExploreNeighbors+0x4c>)
BOS_Status ExploreNeighbors(uint8_t ignore){
 8004122:	b082      	sub	sp, #8
		if(port != ignore){
 8004124:	42a5      	cmp	r5, r4
 8004126:	d00e      	beq.n	8004146 <ExploreNeighbors+0x36>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8004128:	4643      	mov	r3, r8
 800412a:	881b      	ldrh	r3, [r3, #0]
			messageParams[2] =port;
 800412c:	70b4      	strb	r4, [r6, #2]
			messageParams[0] =(uint8_t )(myPN >> 8);
 800412e:	ba5b      	rev16	r3, r3
 8004130:	8033      	strh	r3, [r6, #0]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8004132:	2200      	movs	r2, #0
 8004134:	230a      	movs	r3, #10
 8004136:	2100      	movs	r1, #0
 8004138:	0020      	movs	r0, r4
 800413a:	9700      	str	r7, [sp, #0]
 800413c:	f005 fb8e 	bl	800985c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8004140:	200a      	movs	r0, #10
 8004142:	f00a ff93 	bl	800f06c <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8004146:	3401      	adds	r4, #1
 8004148:	b2e4      	uxtb	r4, r4
 800414a:	2c07      	cmp	r4, #7
 800414c:	d1ea      	bne.n	8004124 <ExploreNeighbors+0x14>
		}
	}
	
	return result;
}
 800414e:	2000      	movs	r0, #0
 8004150:	b002      	add	sp, #8
 8004152:	bc80      	pop	{r7}
 8004154:	46b8      	mov	r8, r7
 8004156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004158:	20000050 	.word	0x20000050
 800415c:	20000fd0 	.word	0x20000fd0

08004160 <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8004160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004162:	4657      	mov	r7, sl
 8004164:	4645      	mov	r5, r8
 8004166:	46de      	mov	lr, fp
 8004168:	464e      	mov	r6, r9
 800416a:	b5e0      	push	{r5, r6, r7, lr}
 800416c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 800416e:	466a      	mov	r2, sp
 8004170:	4b46      	ldr	r3, [pc, #280]	; (800428c <FindBroadcastRoutes+0x12c>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8004172:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8004174:	781d      	ldrb	r5, [r3, #0]
 8004176:	1deb      	adds	r3, r5, #7
 8004178:	08db      	lsrs	r3, r3, #3
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	469d      	mov	sp, r3
 8004180:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8004182:	2d00      	cmp	r5, #0
 8004184:	d009      	beq.n	800419a <FindBroadcastRoutes+0x3a>
 8004186:	2300      	movs	r3, #0
		modules[m] =0;
 8004188:	2100      	movs	r1, #0
 800418a:	4a41      	ldr	r2, [pc, #260]	; (8004290 <FindBroadcastRoutes+0x130>)
 800418c:	54e1      	strb	r1, [r4, r3]
		bcastRoutes[m] =0;
 800418e:	3301      	adds	r3, #1
	for(m =0; m < N; m++){
 8004190:	b2de      	uxtb	r6, r3
		bcastRoutes[m] =0;
 8004192:	8011      	strh	r1, [r2, #0]
	for(m =0; m < N; m++){
 8004194:	3202      	adds	r2, #2
 8004196:	42b5      	cmp	r5, r6
 8004198:	d8f8      	bhi.n	800418c <FindBroadcastRoutes+0x2c>
	}
	modules[src - 1] =++level;					// Tag the source
 800419a:	2301      	movs	r3, #1
 800419c:	3801      	subs	r0, #1
 800419e:	2216      	movs	r2, #22
 80041a0:	5423      	strb	r3, [r4, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= NumOfPorts; p++){
 80041a2:	4b3c      	ldr	r3, [pc, #240]	; (8004294 <FindBroadcastRoutes+0x134>)
 80041a4:	4342      	muls	r2, r0
 80041a6:	469c      	mov	ip, r3
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80041a8:	2301      	movs	r3, #1
 80041aa:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80041ac:	3301      	adds	r3, #1
 80041ae:	4462      	add	r2, ip
	modules[src - 1] =++level;					// Tag the source
 80041b0:	2100      	movs	r1, #0
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80041b2:	469c      	mov	ip, r3
 80041b4:	46a3      	mov	fp, r4
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80041b6:	4e36      	ldr	r6, [pc, #216]	; (8004290 <FindBroadcastRoutes+0x130>)
 80041b8:	0040      	lsls	r0, r0, #1
 80041ba:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 80041bc:	8853      	ldrh	r3, [r2, #2]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <FindBroadcastRoutes+0x7e>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80041c2:	5b85      	ldrh	r5, [r0, r6]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80041c4:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80041c6:	46a9      	mov	r9, r5
 80041c8:	4645      	mov	r5, r8
 80041ca:	408d      	lsls	r5, r1
 80041cc:	46aa      	mov	sl, r5
 80041ce:	464d      	mov	r5, r9
 80041d0:	4654      	mov	r4, sl
 80041d2:	4325      	orrs	r5, r4
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80041d4:	4664      	mov	r4, ip
 80041d6:	445b      	add	r3, fp
 80041d8:	3b01      	subs	r3, #1
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80041da:	5385      	strh	r5, [r0, r6]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80041dc:	701c      	strb	r4, [r3, #0]
	for(p =1; p <= NumOfPorts; p++){
 80041de:	3101      	adds	r1, #1
 80041e0:	3202      	adds	r2, #2
 80041e2:	2906      	cmp	r1, #6
 80041e4:	d1ea      	bne.n	80041bc <FindBroadcastRoutes+0x5c>
	++level;												// Move one level
 80041e6:	2302      	movs	r3, #2
 80041e8:	4699      	mov	r9, r3
			{
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 80041ea:	4b29      	ldr	r3, [pc, #164]	; (8004290 <FindBroadcastRoutes+0x130>)
 80041ec:	465c      	mov	r4, fp
 80041ee:	46ca      	mov	sl, r9
 80041f0:	469b      	mov	fp, r3
 80041f2:	687d      	ldr	r5, [r7, #4]
		++level;											// Move one level
 80041f4:	4653      	mov	r3, sl
 80041f6:	3301      	adds	r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	469a      	mov	sl, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	d03c      	beq.n	800427a <FindBroadcastRoutes+0x11a>
 8004200:	2301      	movs	r3, #1
		untaged =0;								// Reset the untaged counter
 8004202:	2600      	movs	r6, #0
 8004204:	425b      	negs	r3, r3
 8004206:	4453      	add	r3, sl
 8004208:	46b4      	mov	ip, r6
		for(m =0; m < N; m++)					// Scan all modules in the list
 800420a:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 800420c:	001e      	movs	r6, r3
 800420e:	4821      	ldr	r0, [pc, #132]	; (8004294 <FindBroadcastRoutes+0x134>)
 8004210:	e004      	b.n	800421c <FindBroadcastRoutes+0xbc>
		for(m =0; m < N; m++)					// Scan all modules in the list
 8004212:	3201      	adds	r2, #1
 8004214:	b2d3      	uxtb	r3, r2
 8004216:	3016      	adds	r0, #22
 8004218:	429d      	cmp	r5, r3
 800421a:	d92b      	bls.n	8004274 <FindBroadcastRoutes+0x114>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 800421c:	5ca3      	ldrb	r3, [r4, r2]
 800421e:	42b3      	cmp	r3, r6
 8004220:	d1f7      	bne.n	8004212 <FindBroadcastRoutes+0xb2>
 8004222:	0053      	lsls	r3, r2, #1
 8004224:	46a9      	mov	r9, r5
 8004226:	2101      	movs	r1, #1
 8004228:	4690      	mov	r8, r2
 800422a:	001d      	movs	r5, r3
 800422c:	607e      	str	r6, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 800422e:	004b      	lsls	r3, r1, #1
 8004230:	5ac3      	ldrh	r3, [r0, r3]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d013      	beq.n	800425e <FindBroadcastRoutes+0xfe>
 8004236:	08db      	lsrs	r3, r3, #3
 8004238:	3b01      	subs	r3, #1
 800423a:	5ce2      	ldrb	r2, [r4, r3]
 800423c:	2a00      	cmp	r2, #0
 800423e:	d10e      	bne.n	800425e <FindBroadcastRoutes+0xfe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8004240:	2601      	movs	r6, #1
 8004242:	1e4a      	subs	r2, r1, #1
 8004244:	4096      	lsls	r6, r2
 8004246:	0032      	movs	r2, r6
 8004248:	465e      	mov	r6, fp
 800424a:	5bae      	ldrh	r6, [r5, r6]
 800424c:	4332      	orrs	r2, r6
 800424e:	465e      	mov	r6, fp
 8004250:	53aa      	strh	r2, [r5, r6]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8004252:	4652      	mov	r2, sl
 8004254:	54e2      	strb	r2, [r4, r3]
						++untaged;
 8004256:	4663      	mov	r3, ip
 8004258:	3301      	adds	r3, #1
 800425a:	b2db      	uxtb	r3, r3
 800425c:	469c      	mov	ip, r3
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
 800425e:	3101      	adds	r1, #1
 8004260:	2907      	cmp	r1, #7
 8004262:	d1e4      	bne.n	800422e <FindBroadcastRoutes+0xce>
 8004264:	4642      	mov	r2, r8
 8004266:	464d      	mov	r5, r9
 8004268:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 800426a:	b2d3      	uxtb	r3, r2
 800426c:	687e      	ldr	r6, [r7, #4]
 800426e:	3016      	adds	r0, #22
 8004270:	429d      	cmp	r5, r3
 8004272:	d8d3      	bhi.n	800421c <FindBroadcastRoutes+0xbc>
 8004274:	4666      	mov	r6, ip
					}
				}
			}
		}
	} while(untaged);
 8004276:	2e00      	cmp	r6, #0
 8004278:	d1bc      	bne.n	80041f4 <FindBroadcastRoutes+0x94>
	
	return result;
}
 800427a:	2000      	movs	r0, #0
 800427c:	46bd      	mov	sp, r7
 800427e:	b003      	add	sp, #12
 8004280:	bcf0      	pop	{r4, r5, r6, r7}
 8004282:	46bb      	mov	fp, r7
 8004284:	46b2      	mov	sl, r6
 8004286:	46a9      	mov	r9, r5
 8004288:	46a0      	mov	r8, r4
 800428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428c:	2000001c 	.word	0x2000001c
 8004290:	20000d50 	.word	0x20000d50
 8004294:	20000b10 	.word	0x20000b10

08004298 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8004298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429a:	46de      	mov	lr, fp
 800429c:	4657      	mov	r7, sl
 800429e:	464e      	mov	r6, r9
 80042a0:	4645      	mov	r5, r8
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};		// All nodes initially in Q (unvisited nodes)
 80042a2:	2400      	movs	r4, #0
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 80042a4:	b5e0      	push	{r5, r6, r7, lr}
 80042a6:	0006      	movs	r6, r0
 80042a8:	b091      	sub	sp, #68	; 0x44
 80042aa:	000f      	movs	r7, r1
	uint8_t Q[50] ={0};		// All nodes initially in Q (unvisited nodes)
 80042ac:	222e      	movs	r2, #46	; 0x2e
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 80042ae:	9100      	str	r1, [sp, #0]
	uint8_t Q[50] ={0};		// All nodes initially in Q (unvisited nodes)
 80042b0:	a804      	add	r0, sp, #16
 80042b2:	2100      	movs	r1, #0
 80042b4:	9403      	str	r4, [sp, #12]
 80042b6:	f010 feae 	bl	8015016 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 80042ba:	221a      	movs	r2, #26
 80042bc:	2100      	movs	r1, #0
 80042be:	4864      	ldr	r0, [pc, #400]	; (8004450 <FindRoute+0x1b8>)
 80042c0:	f010 fea9 	bl	8015016 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80042c4:	4b63      	ldr	r3, [pc, #396]	; (8004454 <FindRoute+0x1bc>)
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80042c6:	1e72      	subs	r2, r6, #1
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80042c8:	549c      	strb	r4, [r3, r2]
 80042ca:	469b      	mov	fp, r3
 80042cc:	2316      	movs	r3, #22
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80042ce:	4d62      	ldr	r5, [pc, #392]	; (8004458 <FindRoute+0x1c0>)
 80042d0:	4353      	muls	r3, r2
 80042d2:	54ac      	strb	r4, [r5, r2]
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 80042d4:	4a61      	ldr	r2, [pc, #388]	; (800445c <FindRoute+0x1c4>)
 80042d6:	2001      	movs	r0, #1
 80042d8:	4694      	mov	ip, r2
 80042da:	4463      	add	r3, ip
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80042dc:	0019      	movs	r1, r3
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	b2ba      	uxth	r2, r7
 80042e2:	0043      	lsls	r3, r0, #1
 80042e4:	5acb      	ldrh	r3, [r1, r3]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <FindRoute+0x5a>
 80042ea:	08db      	lsrs	r3, r3, #3
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d100      	bne.n	80042f2 <FindRoute+0x5a>
 80042f0:	e0a1      	b.n	8004436 <FindRoute+0x19e>
	for(int col =1; col <= 6; col++){
 80042f2:	3001      	adds	r0, #1
 80042f4:	2807      	cmp	r0, #7
 80042f6:	d1f4      	bne.n	80042e2 <FindRoute+0x4a>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 80042f8:	4b59      	ldr	r3, [pc, #356]	; (8004460 <FindRoute+0x1c8>)
 80042fa:	781c      	ldrb	r4, [r3, #0]
 80042fc:	2c00      	cmp	r4, #0
 80042fe:	d064      	beq.n	80043ca <FindRoute+0x132>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8004300:	1e6a      	subs	r2, r5, #1
 8004302:	4690      	mov	r8, r2
 8004304:	22ff      	movs	r2, #255	; 0xff
 8004306:	4694      	mov	ip, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8004308:	465a      	mov	r2, fp
	for(int i =1; i <= N; i++){
 800430a:	2301      	movs	r3, #1
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 800430c:	2100      	movs	r1, #0
 800430e:	1e50      	subs	r0, r2, #1
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8004310:	429e      	cmp	r6, r3
 8004312:	d004      	beq.n	800431e <FindRoute+0x86>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8004314:	4642      	mov	r2, r8
 8004316:	4667      	mov	r7, ip
 8004318:	54d7      	strb	r7, [r2, r3]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 800431a:	181a      	adds	r2, r3, r0
 800431c:	7011      	strb	r1, [r2, #0]
	for(int i =1; i <= N; i++){
 800431e:	3301      	adds	r3, #1
 8004320:	42a3      	cmp	r3, r4
 8004322:	ddf5      	ble.n	8004310 <FindRoute+0x78>
 8004324:	9b00      	ldr	r3, [sp, #0]
	uint8_t u =0;
 8004326:	2200      	movs	r2, #0
 8004328:	469c      	mov	ip, r3
 800432a:	a803      	add	r0, sp, #12
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 800432c:	0001      	movs	r1, r0
	char temp =1;
 800432e:	2601      	movs	r6, #1
	for(int i =0; i < N; i++){
 8004330:	2300      	movs	r3, #0
		temp &=Q[i];
 8004332:	780f      	ldrb	r7, [r1, #0]
	for(int i =0; i < N; i++){
 8004334:	3301      	adds	r3, #1
		temp &=Q[i];
 8004336:	403e      	ands	r6, r7
	for(int i =0; i < N; i++){
 8004338:	3101      	adds	r1, #1
 800433a:	42a3      	cmp	r3, r4
 800433c:	dbf9      	blt.n	8004332 <FindRoute+0x9a>
	while(!QnotEmpty(Q)){
 800433e:	2e00      	cmp	r6, #0
 8004340:	d144      	bne.n	80043cc <FindRoute+0x134>
	if(!Q[0])						// Not visited yet
 8004342:	7803      	ldrb	r3, [r0, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d03d      	beq.n	80043c4 <FindRoute+0x12c>
	uint8_t smallest =0xFF;
 8004348:	21ff      	movs	r1, #255	; 0xff
 800434a:	782a      	ldrb	r2, [r5, #0]
 800434c:	2301      	movs	r3, #1
 800434e:	e001      	b.n	8004354 <FindRoute+0xbc>
 8004350:	5cea      	ldrb	r2, [r5, r3]
 8004352:	3301      	adds	r3, #1
		if((arr[i] < smallest) && !Q[i]){
 8004354:	4291      	cmp	r1, r2
 8004356:	d907      	bls.n	8004368 <FindRoute+0xd0>
 8004358:	af02      	add	r7, sp, #8
 800435a:	3703      	adds	r7, #3
 800435c:	5cff      	ldrb	r7, [r7, r3]
 800435e:	2f00      	cmp	r7, #0
 8004360:	d102      	bne.n	8004368 <FindRoute+0xd0>
 8004362:	0011      	movs	r1, r2
 8004364:	1e5e      	subs	r6, r3, #1
 8004366:	b2f6      	uxtb	r6, r6
	for(int i =0; i < N; i++){
 8004368:	429c      	cmp	r4, r3
 800436a:	dcf1      	bgt.n	8004350 <FindRoute+0xb8>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 800436c:	3601      	adds	r6, #1
 800436e:	b2f2      	uxtb	r2, r6
		if(u == desID){
 8004370:	4562      	cmp	r2, ip
 8004372:	d05e      	beq.n	8004432 <FindRoute+0x19a>
			Q[u - 1] =1;									// Remove u from Q
 8004374:	2616      	movs	r6, #22
 8004376:	2301      	movs	r3, #1
 8004378:	1e57      	subs	r7, r2, #1
 800437a:	437e      	muls	r6, r7
 800437c:	55c3      	strb	r3, [r0, r7]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 800437e:	4b37      	ldr	r3, [pc, #220]	; (800445c <FindRoute+0x1c4>)
 8004380:	46a2      	mov	sl, r4
 8004382:	1999      	adds	r1, r3, r6
 8004384:	4b37      	ldr	r3, [pc, #220]	; (8004464 <FindRoute+0x1cc>)
 8004386:	4698      	mov	r8, r3
 8004388:	4446      	add	r6, r8
			if(array[u - 1][n])		// There's a neighbor v at this port n
 800438a:	884b      	ldrh	r3, [r1, #2]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d014      	beq.n	80043ba <FindRoute+0x122>
				v =(array[u - 1][n] >> 3);
 8004390:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8004392:	b2db      	uxtb	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	5cc4      	ldrb	r4, [r0, r3]
 8004398:	2c00      	cmp	r4, #0
 800439a:	d10e      	bne.n	80043ba <FindRoute+0x122>
					alt =routeDist[u - 1] + 1;					// Add one hop
 800439c:	5dec      	ldrb	r4, [r5, r7]
 800439e:	46a0      	mov	r8, r4
 80043a0:	2401      	movs	r4, #1
 80043a2:	46a1      	mov	r9, r4
 80043a4:	44c8      	add	r8, r9
 80043a6:	4644      	mov	r4, r8
 80043a8:	b2e4      	uxtb	r4, r4
 80043aa:	46a0      	mov	r8, r4
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 80043ac:	5cec      	ldrb	r4, [r5, r3]
 80043ae:	4544      	cmp	r4, r8
 80043b0:	d903      	bls.n	80043ba <FindRoute+0x122>
						routeDist[v - 1] =alt;
 80043b2:	4644      	mov	r4, r8
 80043b4:	54ec      	strb	r4, [r5, r3]
						routePrev[v - 1] =u;
 80043b6:	465c      	mov	r4, fp
 80043b8:	54e2      	strb	r2, [r4, r3]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 80043ba:	3102      	adds	r1, #2
 80043bc:	428e      	cmp	r6, r1
 80043be:	d1e4      	bne.n	800438a <FindRoute+0xf2>
 80043c0:	4654      	mov	r4, sl
 80043c2:	e7b3      	b.n	800432c <FindRoute+0x94>
		smallest =arr[0];
 80043c4:	7829      	ldrb	r1, [r5, #0]
 80043c6:	000a      	movs	r2, r1
 80043c8:	e7c0      	b.n	800434c <FindRoute+0xb4>
	for(int i =1; i <= N; i++){
 80043ca:	2200      	movs	r2, #0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 80043cc:	465b      	mov	r3, fp
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	3b01      	subs	r3, #1
 80043d2:	7819      	ldrb	r1, [r3, #0]
 80043d4:	2300      	movs	r3, #0
 80043d6:	2900      	cmp	r1, #0
 80043d8:	d101      	bne.n	80043de <FindRoute+0x146>
 80043da:	e00c      	b.n	80043f6 <FindRoute+0x15e>
 80043dc:	0001      	movs	r1, r0
		route[j++] =u;          			// Push the vertex onto the stack
 80043de:	0018      	movs	r0, r3
 80043e0:	4c1b      	ldr	r4, [pc, #108]	; (8004450 <FindRoute+0x1b8>)
 80043e2:	3301      	adds	r3, #1
 80043e4:	5422      	strb	r2, [r4, r0]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 80043e6:	465a      	mov	r2, fp
 80043e8:	1852      	adds	r2, r2, r1
 80043ea:	3a01      	subs	r2, #1
 80043ec:	7810      	ldrb	r0, [r2, #0]
		route[j++] =u;          			// Push the vertex onto the stack
 80043ee:	b2db      	uxtb	r3, r3
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 80043f0:	000a      	movs	r2, r1
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d1f2      	bne.n	80043dc <FindRoute+0x144>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 80043f6:	9b00      	ldr	r3, [sp, #0]
	for(int col =1; col <= 6; col++){
 80043f8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 80043fa:	469c      	mov	ip, r3
 80043fc:	9901      	ldr	r1, [sp, #4]
 80043fe:	4465      	add	r5, ip
 8004400:	3d01      	subs	r5, #1
 8004402:	0043      	lsls	r3, r0, #1
 8004404:	5acb      	ldrh	r3, [r1, r3]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <FindRoute+0x184>
 800440a:	4c11      	ldr	r4, [pc, #68]	; (8004450 <FindRoute+0x1b8>)
 800440c:	782a      	ldrb	r2, [r5, #0]
 800440e:	46a4      	mov	ip, r4
 8004410:	4462      	add	r2, ip
 8004412:	3a01      	subs	r2, #1
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	08db      	lsrs	r3, r3, #3
 8004418:	429a      	cmp	r2, r3
 800441a:	d016      	beq.n	800444a <FindRoute+0x1b2>
	for(int col =1; col <= 6; col++){
 800441c:	3001      	adds	r0, #1
 800441e:	2807      	cmp	r0, #7
 8004420:	d1ef      	bne.n	8004402 <FindRoute+0x16a>
	return 0;
 8004422:	2000      	movs	r0, #0
}
 8004424:	b011      	add	sp, #68	; 0x44
 8004426:	bcf0      	pop	{r4, r5, r6, r7}
 8004428:	46bb      	mov	fp, r7
 800442a:	46b2      	mov	sl, r6
 800442c:	46a9      	mov	r9, r5
 800442e:	46a0      	mov	r8, r4
 8004430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004432:	9a00      	ldr	r2, [sp, #0]
 8004434:	e7ca      	b.n	80043cc <FindRoute+0x134>
			routeDist[desID - 1] =1;
 8004436:	9a00      	ldr	r2, [sp, #0]
 8004438:	2301      	movs	r3, #1
 800443a:	4694      	mov	ip, r2
 800443c:	4465      	add	r5, ip
 800443e:	3d01      	subs	r5, #1
 8004440:	702b      	strb	r3, [r5, #0]
			route[0] =desID;
 8004442:	4b03      	ldr	r3, [pc, #12]	; (8004450 <FindRoute+0x1b8>)
			return col;
 8004444:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8004446:	701a      	strb	r2, [r3, #0]
			return col;
 8004448:	e7ec      	b.n	8004424 <FindRoute+0x18c>
			return col;
 800444a:	b2c0      	uxtb	r0, r0
 800444c:	e7ea      	b.n	8004424 <FindRoute+0x18c>
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	20006bb4 	.word	0x20006bb4
 8004454:	200011c8 	.word	0x200011c8
 8004458:	200011ac 	.word	0x200011ac
 800445c:	20000b10 	.word	0x20000b10
 8004460:	2000001c 	.word	0x2000001c
 8004464:	20000b1c 	.word	0x20000b1c

08004468 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8004468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446a:	464f      	mov	r7, r9
 800446c:	4646      	mov	r6, r8
 800446e:	46d6      	mov	lr, sl
 8004470:	b5c0      	push	{r6, r7, lr}
 8004472:	001f      	movs	r7, r3
	myOutport =FindRoute(myID,dst);
 8004474:	4b39      	ldr	r3, [pc, #228]	; (800455c <remoteBootloaderUpdate+0xf4>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8004476:	4681      	mov	r9, r0
 8004478:	b084      	sub	sp, #16
	myOutport =FindRoute(myID,dst);
 800447a:	7818      	ldrb	r0, [r3, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800447c:	000e      	movs	r6, r1
 800447e:	0015      	movs	r5, r2
	myOutport =FindRoute(myID,dst);
 8004480:	4698      	mov	r8, r3
 8004482:	f7ff ff09 	bl	8004298 <FindRoute>
 8004486:	0004      	movs	r4, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8004488:	2f00      	cmp	r7, #0
 800448a:	d128      	bne.n	80044de <remoteBootloaderUpdate+0x76>
		if(NumberOfHops(dst)== 1)
 800448c:	4b34      	ldr	r3, [pc, #208]	; (8004560 <remoteBootloaderUpdate+0xf8>)
 800448e:	199b      	adds	r3, r3, r6
 8004490:	3b01      	subs	r3, #1
 8004492:	781a      	ldrb	r2, [r3, #0]
 8004494:	2a01      	cmp	r2, #1
 8004496:	d05d      	beq.n	8004554 <remoteBootloaderUpdate+0xec>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8004498:	4b32      	ldr	r3, [pc, #200]	; (8004564 <remoteBootloaderUpdate+0xfc>)
 800449a:	189b      	adds	r3, r3, r2
 800449c:	3b01      	subs	r3, #1
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	469a      	mov	sl, r3
 80044a2:	4643      	mov	r3, r8
 80044a4:	781b      	ldrb	r3, [r3, #0]
	if(src == myID){
 80044a6:	4599      	cmp	r9, r3
 80044a8:	d121      	bne.n	80044ee <remoteBootloaderUpdate+0x86>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80044aa:	f00a fef3 	bl	800f294 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 80044ae:	4b2e      	ldr	r3, [pc, #184]	; (8004568 <remoteBootloaderUpdate+0x100>)
 80044b0:	0032      	movs	r2, r6
 80044b2:	6819      	ldr	r1, [r3, #0]
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80044b4:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 80044b6:	f010 ffd7 	bl	8015468 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 80044ba:	4b2c      	ldr	r3, [pc, #176]	; (800456c <remoteBootloaderUpdate+0x104>)
 80044bc:	4648      	mov	r0, r9
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	f010 fff2 	bl	80154a8 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 80044c4:	4648      	mov	r0, r9
 80044c6:	f7fb fe27 	bl	8000118 <strlen>
 80044ca:	2332      	movs	r3, #50	; 0x32
 80044cc:	b282      	uxth	r2, r0
 80044ce:	4649      	mov	r1, r9
 80044d0:	0028      	movs	r0, r5
 80044d2:	f00a f8ef 	bl	800e6b4 <writePxITMutex>
		Delay_ms(100);
 80044d6:	2064      	movs	r0, #100	; 0x64
 80044d8:	f00c fe3a 	bl	8011150 <HAL_Delay>
 80044dc:	e007      	b.n	80044ee <remoteBootloaderUpdate+0x86>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 80044de:	4643      	mov	r3, r8
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	42b3      	cmp	r3, r6
 80044e4:	d028      	beq.n	8004538 <remoteBootloaderUpdate+0xd0>
	uint8_t myOutport =0, lastModule =0;
 80044e6:	2200      	movs	r2, #0
 80044e8:	4692      	mov	sl, r2
	if(src == myID){
 80044ea:	454b      	cmp	r3, r9
 80044ec:	d028      	beq.n	8004540 <remoteBootloaderUpdate+0xd8>
	SetupPortForRemoteBootloaderUpdate(inport);
 80044ee:	0028      	movs	r0, r5
 80044f0:	f7ff fda0 	bl	8004034 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 80044f4:	0020      	movs	r0, r4
 80044f6:	f7ff fd9d 	bl	8004034 <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 80044fa:	4643      	mov	r3, r8
 80044fc:	7819      	ldrb	r1, [r3, #0]
 80044fe:	4551      	cmp	r1, sl
 8004500:	d011      	beq.n	8004526 <remoteBootloaderUpdate+0xbe>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8004502:	2300      	movs	r3, #0
 8004504:	9303      	str	r3, [sp, #12]
 8004506:	3b01      	subs	r3, #1
 8004508:	9302      	str	r3, [sp, #8]
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	3303      	adds	r3, #3
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	0022      	movs	r2, r4
 8004512:	000b      	movs	r3, r1
 8004514:	0028      	movs	r0, r5
 8004516:	f005 fbe3 	bl	8009ce0 <StartScastDMAStream>
}
 800451a:	b004      	add	sp, #16
 800451c:	bce0      	pop	{r5, r6, r7}
 800451e:	46ba      	mov	sl, r7
 8004520:	46b1      	mov	r9, r6
 8004522:	46a8      	mov	r8, r5
 8004524:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwapUartPins(GetUart(myOutport),REVERSED);
 8004526:	0020      	movs	r0, r4
 8004528:	f00a f91a 	bl	800e760 <GetUart>
 800452c:	2101      	movs	r1, #1
 800452e:	f00a f923 	bl	800e778 <SwapUartPins>
 8004532:	4643      	mov	r3, r8
 8004534:	7819      	ldrb	r1, [r3, #0]
 8004536:	e7e4      	b.n	8004502 <remoteBootloaderUpdate+0x9a>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8004538:	469a      	mov	sl, r3
 800453a:	003c      	movs	r4, r7
	if(src == myID){
 800453c:	454b      	cmp	r3, r9
 800453e:	d1d6      	bne.n	80044ee <remoteBootloaderUpdate+0x86>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004540:	f00a fea8 	bl	800f294 <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <remoteBootloaderUpdate+0x108>)
 8004546:	0032      	movs	r2, r6
 8004548:	6819      	ldr	r1, [r3, #0]
 800454a:	003b      	movs	r3, r7
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800454c:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800454e:	f010 ff8b 	bl	8015468 <sprintf>
 8004552:	e7b2      	b.n	80044ba <remoteBootloaderUpdate+0x52>
		lastModule = myID;
 8004554:	4643      	mov	r3, r8
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	469a      	mov	sl, r3
 800455a:	e7a4      	b.n	80044a6 <remoteBootloaderUpdate+0x3e>
 800455c:	2000110e 	.word	0x2000110e
 8004560:	200011ac 	.word	0x200011ac
 8004564:	20006bb4 	.word	0x20006bb4
 8004568:	20000078 	.word	0x20000078
 800456c:	20000080 	.word	0x20000080
 8004570:	2000007c 	.word	0x2000007c

08004574 <DisplayTopology>:
}
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8004574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004576:	4645      	mov	r5, r8
 8004578:	46de      	mov	lr, fp
 800457a:	4657      	mov	r7, sl
 800457c:	464e      	mov	r6, r9
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 800457e:	4c58      	ldr	r4, [pc, #352]	; (80046e0 <DisplayTopology+0x16c>)
void DisplayTopology(uint8_t port){
 8004580:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8004582:	0022      	movs	r2, r4
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004584:	2701      	movs	r7, #1
void DisplayTopology(uint8_t port){
 8004586:	0006      	movs	r6, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8004588:	4b56      	ldr	r3, [pc, #344]	; (80046e4 <DisplayTopology+0x170>)
void DisplayTopology(uint8_t port){
 800458a:	b085      	sub	sp, #20
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 800458c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800458e:	c223      	stmia	r2!, {r0, r1, r5}
 8004590:	6819      	ldr	r1, [r3, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004592:	427f      	negs	r7, r7
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8004594:	6011      	str	r1, [r2, #0]
 8004596:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004598:	0021      	movs	r1, r4
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 800459a:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800459c:	0030      	movs	r0, r6
 800459e:	2332      	movs	r3, #50	; 0x32
 80045a0:	2211      	movs	r2, #17
 80045a2:	9700      	str	r7, [sp, #0]
 80045a4:	f00a f850 	bl	800e648 <writePxMutex>
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80045a8:	4b4f      	ldr	r3, [pc, #316]	; (80046e8 <DisplayTopology+0x174>)
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80045aa:	2501      	movs	r5, #1
 80045ac:	4698      	mov	r8, r3
		sprintf(pcUserMessage,"P%d\t",i);
 80045ae:	002a      	movs	r2, r5
 80045b0:	4641      	mov	r1, r8
 80045b2:	0020      	movs	r0, r4
 80045b4:	f010 ff58 	bl	8015468 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80045b8:	0020      	movs	r0, r4
 80045ba:	f7fb fdad 	bl	8000118 <strlen>
 80045be:	3501      	adds	r5, #1
 80045c0:	b282      	uxth	r2, r0
 80045c2:	2332      	movs	r3, #50	; 0x32
 80045c4:	0021      	movs	r1, r4
 80045c6:	0030      	movs	r0, r6
 80045c8:	9700      	str	r7, [sp, #0]
 80045ca:	f00a f83d 	bl	800e648 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80045ce:	2d07      	cmp	r5, #7
 80045d0:	d1ed      	bne.n	80045ae <DisplayTopology+0x3a>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 80045d2:	2332      	movs	r3, #50	; 0x32
 80045d4:	2203      	movs	r2, #3
 80045d6:	0030      	movs	r0, r6
 80045d8:	4944      	ldr	r1, [pc, #272]	; (80046ec <DisplayTopology+0x178>)
 80045da:	9700      	str	r7, [sp, #0]
 80045dc:	f00a f834 	bl	800e648 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 80045e0:	4b43      	ldr	r3, [pc, #268]	; (80046f0 <DisplayTopology+0x17c>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d06b      	beq.n	80046c0 <DisplayTopology+0x14c>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 80045e8:	4b42      	ldr	r3, [pc, #264]	; (80046f4 <DisplayTopology+0x180>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80045ea:	2701      	movs	r7, #1
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 80045ec:	469a      	mov	sl, r3
				sprintf(pcUserMessage,"%d\t",0);
 80045ee:	4b42      	ldr	r3, [pc, #264]	; (80046f8 <DisplayTopology+0x184>)
	for(uint8_t row =0; row < N; row++){
 80045f0:	2500      	movs	r5, #0
				sprintf(pcUserMessage,"%d\t",0);
 80045f2:	469b      	mov	fp, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80045f4:	427f      	negs	r7, r7
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 80045f6:	1c6b      	adds	r3, r5, #1
 80045f8:	001a      	movs	r2, r3
 80045fa:	4940      	ldr	r1, [pc, #256]	; (80046fc <DisplayTopology+0x188>)
 80045fc:	0020      	movs	r0, r4
 80045fe:	9303      	str	r3, [sp, #12]
 8004600:	f010 ff32 	bl	8015468 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004604:	0020      	movs	r0, r4
 8004606:	f7fb fd87 	bl	8000118 <strlen>
 800460a:	2332      	movs	r3, #50	; 0x32
 800460c:	b282      	uxth	r2, r0
 800460e:	0021      	movs	r1, r4
 8004610:	0030      	movs	r0, r6
 8004612:	9700      	str	r7, [sp, #0]
 8004614:	f00a f818 	bl	800e648 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8004618:	2316      	movs	r3, #22
 800461a:	436b      	muls	r3, r5
 800461c:	4698      	mov	r8, r3
 800461e:	4642      	mov	r2, r8
 8004620:	4b37      	ldr	r3, [pc, #220]	; (8004700 <DisplayTopology+0x18c>)
 8004622:	0020      	movs	r0, r4
 8004624:	5a9b      	ldrh	r3, [r3, r2]
 8004626:	2205      	movs	r2, #5
 8004628:	0059      	lsls	r1, r3, #1
 800462a:	18c9      	adds	r1, r1, r3
 800462c:	4b35      	ldr	r3, [pc, #212]	; (8004704 <DisplayTopology+0x190>)
 800462e:	0049      	lsls	r1, r1, #1
 8004630:	469c      	mov	ip, r3
 8004632:	4461      	add	r1, ip
 8004634:	f010 ff6c 	bl	8015510 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8004638:	2332      	movs	r3, #50	; 0x32
 800463a:	2205      	movs	r2, #5
 800463c:	0021      	movs	r1, r4
 800463e:	0030      	movs	r0, r6
 8004640:	9700      	str	r7, [sp, #0]
 8004642:	f00a f801 	bl	800e648 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8004646:	2332      	movs	r3, #50	; 0x32
 8004648:	0030      	movs	r0, r6
 800464a:	2201      	movs	r2, #1
 800464c:	492e      	ldr	r1, [pc, #184]	; (8004708 <DisplayTopology+0x194>)
 800464e:	9700      	str	r7, [sp, #0]
 8004650:	f009 fffa 	bl	800e648 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8004654:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <DisplayTopology+0x18c>)
 8004656:	4443      	add	r3, r8
 8004658:	001d      	movs	r5, r3
 800465a:	4b29      	ldr	r3, [pc, #164]	; (8004700 <DisplayTopology+0x18c>)
 800465c:	330c      	adds	r3, #12
 800465e:	4498      	add	r8, r3
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8004660:	2307      	movs	r3, #7
 8004662:	4699      	mov	r9, r3
 8004664:	0033      	movs	r3, r6
 8004666:	4646      	mov	r6, r8
 8004668:	4698      	mov	r8, r3
 800466a:	e010      	b.n	800468e <DisplayTopology+0x11a>
				sprintf(pcUserMessage,"%d\t",0);
 800466c:	4659      	mov	r1, fp
 800466e:	0020      	movs	r0, r4
 8004670:	f010 fefa 	bl	8015468 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004674:	0020      	movs	r0, r4
 8004676:	f7fb fd4f 	bl	8000118 <strlen>
 800467a:	3502      	adds	r5, #2
 800467c:	b282      	uxth	r2, r0
 800467e:	2332      	movs	r3, #50	; 0x32
 8004680:	0021      	movs	r1, r4
 8004682:	4640      	mov	r0, r8
 8004684:	9700      	str	r7, [sp, #0]
 8004686:	f009 ffdf 	bl	800e648 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 800468a:	42b5      	cmp	r5, r6
 800468c:	d00a      	beq.n	80046a4 <DisplayTopology+0x130>
			if(!array[row][col])
 800468e:	886a      	ldrh	r2, [r5, #2]
 8004690:	2a00      	cmp	r2, #0
 8004692:	d0eb      	beq.n	800466c <DisplayTopology+0xf8>
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8004694:	464b      	mov	r3, r9
 8004696:	4651      	mov	r1, sl
 8004698:	4013      	ands	r3, r2
 800469a:	0020      	movs	r0, r4
 800469c:	08d2      	lsrs	r2, r2, #3
 800469e:	f010 fee3 	bl	8015468 <sprintf>
 80046a2:	e7e7      	b.n	8004674 <DisplayTopology+0x100>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 80046a4:	2332      	movs	r3, #50	; 0x32
 80046a6:	2202      	movs	r2, #2
 80046a8:	4640      	mov	r0, r8
 80046aa:	4918      	ldr	r1, [pc, #96]	; (800470c <DisplayTopology+0x198>)
 80046ac:	9700      	str	r7, [sp, #0]
 80046ae:	f009 ffcb 	bl	800e648 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 80046b2:	466b      	mov	r3, sp
 80046b4:	7b1d      	ldrb	r5, [r3, #12]
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <DisplayTopology+0x17c>)
 80046b8:	4646      	mov	r6, r8
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	42ab      	cmp	r3, r5
 80046be:	d89a      	bhi.n	80045f6 <DisplayTopology+0x82>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 80046c0:	2301      	movs	r3, #1
 80046c2:	425b      	negs	r3, r3
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	0030      	movs	r0, r6
 80046ca:	4911      	ldr	r1, [pc, #68]	; (8004710 <DisplayTopology+0x19c>)
 80046cc:	3333      	adds	r3, #51	; 0x33
 80046ce:	f009 ffbb 	bl	800e648 <writePxMutex>
}
 80046d2:	b005      	add	sp, #20
 80046d4:	bcf0      	pop	{r4, r5, r6, r7}
 80046d6:	46bb      	mov	fp, r7
 80046d8:	46b2      	mov	sl, r6
 80046da:	46a9      	mov	r9, r5
 80046dc:	46a0      	mov	r8, r4
 80046de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e0:	20001140 	.word	0x20001140
 80046e4:	0801b358 	.word	0x0801b358
 80046e8:	0801b36c 	.word	0x0801b36c
 80046ec:	0801c02c 	.word	0x0801c02c
 80046f0:	2000001c 	.word	0x2000001c
 80046f4:	0801b384 	.word	0x0801b384
 80046f8:	0801b380 	.word	0x0801b380
 80046fc:	0801b374 	.word	0x0801b374
 8004700:	20000b10 	.word	0x20000b10
 8004704:	0801b81c 	.word	0x0801b81c
 8004708:	0801b368 	.word	0x0801b368
 800470c:	0801b490 	.word	0x0801b490
 8004710:	0801cb0c 	.word	0x0801cb0c

08004714 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8004714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004716:	46de      	mov	lr, fp
 8004718:	464e      	mov	r6, r9
 800471a:	4657      	mov	r7, sl
 800471c:	4645      	mov	r5, r8
 800471e:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8004720:	4e31      	ldr	r6, [pc, #196]	; (80047e8 <DisplayPortsDir+0xd4>)
 8004722:	4b32      	ldr	r3, [pc, #200]	; (80047ec <DisplayPortsDir+0xd8>)
 8004724:	0032      	movs	r2, r6
void DisplayPortsDir(uint8_t port){
 8004726:	4683      	mov	fp, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8004728:	cb13      	ldmia	r3!, {r0, r1, r4}
 800472a:	c213      	stmia	r2!, {r0, r1, r4}
 800472c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800472e:	c213      	stmia	r2!, {r0, r1, r4}
 8004730:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8004732:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8004734:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004736:	2301      	movs	r3, #1
 8004738:	425b      	negs	r3, r3
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	221b      	movs	r2, #27
 800473e:	3333      	adds	r3, #51	; 0x33
 8004740:	0031      	movs	r1, r6
 8004742:	4658      	mov	r0, fp
 8004744:	f009 ff80 	bl	800e648 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8004748:	4b29      	ldr	r3, [pc, #164]	; (80047f0 <DisplayPortsDir+0xdc>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d032      	beq.n	80047b6 <DisplayPortsDir+0xa2>
 8004750:	2301      	movs	r3, #1
 8004752:	4699      	mov	r9, r3
 8004754:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <DisplayPortsDir+0xe0>)
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004756:	2780      	movs	r7, #128	; 0x80
 8004758:	4698      	mov	r8, r3
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 800475a:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <DisplayPortsDir+0xe4>)
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800475c:	023f      	lsls	r7, r7, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 800475e:	469a      	mov	sl, r3
 8004760:	464b      	mov	r3, r9
 8004762:	1e5d      	subs	r5, r3, #1
	for(uint8_t i =1; i <= N; i++){
 8004764:	2400      	movs	r4, #0
 8004766:	006d      	lsls	r5, r5, #1
 8004768:	e001      	b.n	800476e <DisplayPortsDir+0x5a>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 800476a:	2c0a      	cmp	r4, #10
 800476c:	d01b      	beq.n	80047a6 <DisplayPortsDir+0x92>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800476e:	0022      	movs	r2, r4
 8004770:	0039      	movs	r1, r7
 8004772:	4643      	mov	r3, r8
 8004774:	4111      	asrs	r1, r2
 8004776:	5b5b      	ldrh	r3, [r3, r5]
 8004778:	3401      	adds	r4, #1
 800477a:	4219      	tst	r1, r3
 800477c:	d0f5      	beq.n	800476a <DisplayPortsDir+0x56>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 800477e:	0023      	movs	r3, r4
 8004780:	464a      	mov	r2, r9
 8004782:	4651      	mov	r1, sl
 8004784:	0030      	movs	r0, r6
 8004786:	f010 fe6f 	bl	8015468 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 800478a:	0030      	movs	r0, r6
 800478c:	f7fb fcc4 	bl	8000118 <strlen>
 8004790:	2301      	movs	r3, #1
 8004792:	425b      	negs	r3, r3
 8004794:	b282      	uxth	r2, r0
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	0031      	movs	r1, r6
 800479a:	4658      	mov	r0, fp
 800479c:	3333      	adds	r3, #51	; 0x33
 800479e:	f009 ff53 	bl	800e648 <writePxMutex>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 80047a2:	2c0a      	cmp	r4, #10
 80047a4:	d1e3      	bne.n	800476e <DisplayPortsDir+0x5a>
	for(uint8_t i =1; i <= N; i++){
 80047a6:	464b      	mov	r3, r9
 80047a8:	3301      	adds	r3, #1
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	4699      	mov	r9, r3
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <DisplayPortsDir+0xdc>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	454b      	cmp	r3, r9
 80047b4:	d2d4      	bcs.n	8004760 <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 80047b6:	0032      	movs	r2, r6
 80047b8:	4b10      	ldr	r3, [pc, #64]	; (80047fc <DisplayPortsDir+0xe8>)
 80047ba:	cb13      	ldmia	r3!, {r0, r1, r4}
 80047bc:	c213      	stmia	r2!, {r0, r1, r4}
 80047be:	cb13      	ldmia	r3!, {r0, r1, r4}
 80047c0:	c213      	stmia	r2!, {r0, r1, r4}
 80047c2:	cb03      	ldmia	r3!, {r0, r1}
 80047c4:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80047c6:	2301      	movs	r3, #1
 80047c8:	425b      	negs	r3, r3
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	221f      	movs	r2, #31
 80047ce:	0031      	movs	r1, r6
 80047d0:	4658      	mov	r0, fp
 80047d2:	3333      	adds	r3, #51	; 0x33
 80047d4:	f009 ff38 	bl	800e648 <writePxMutex>
	HAL_MAX_DELAY);
}
 80047d8:	b003      	add	sp, #12
 80047da:	bcf0      	pop	{r4, r5, r6, r7}
 80047dc:	46bb      	mov	fp, r7
 80047de:	46b2      	mov	sl, r6
 80047e0:	46a9      	mov	r9, r5
 80047e2:	46a0      	mov	r8, r4
 80047e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	20001140 	.word	0x20001140
 80047ec:	0801b38c 	.word	0x0801b38c
 80047f0:	2000001c 	.word	0x2000001c
 80047f4:	20006f68 	.word	0x20006f68
 80047f8:	0801b3c8 	.word	0x0801b3c8
 80047fc:	0801b3a8 	.word	0x0801b3a8

08004800 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004802:	46de      	mov	lr, fp
 8004804:	464e      	mov	r6, r9
 8004806:	4645      	mov	r5, r8
 8004808:	4657      	mov	r7, sl
 800480a:	b5e0      	push	{r5, r6, r7, lr}
 800480c:	b085      	sub	sp, #20
 800480e:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004810:	f00a fd40 	bl	800f294 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8004814:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004816:	0005      	movs	r5, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8004818:	4c95      	ldr	r4, [pc, #596]	; (8004a70 <DisplayModuleStatus+0x270>)
	strcpy((char* )pcOutputString,"");
 800481a:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 800481c:	4b95      	ldr	r3, [pc, #596]	; (8004a74 <DisplayModuleStatus+0x274>)
 800481e:	4996      	ldr	r1, [pc, #600]	; (8004a78 <DisplayModuleStatus+0x278>)
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	0020      	movs	r0, r4
 8004824:	f010 fe20 	bl	8015468 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004828:	0021      	movs	r1, r4
 800482a:	0028      	movs	r0, r5
 800482c:	f010 fe3c 	bl	80154a8 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8004830:	4b92      	ldr	r3, [pc, #584]	; (8004a7c <DisplayModuleStatus+0x27c>)
 8004832:	4993      	ldr	r1, [pc, #588]	; (8004a80 <DisplayModuleStatus+0x280>)
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	0020      	movs	r0, r4
 8004838:	f010 fe16 	bl	8015468 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800483c:	0021      	movs	r1, r4
 800483e:	0028      	movs	r0, r5
 8004840:	f010 fe32 	bl	80154a8 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8004844:	2305      	movs	r3, #5
 8004846:	2200      	movs	r2, #0
 8004848:	498e      	ldr	r1, [pc, #568]	; (8004a84 <DisplayModuleStatus+0x284>)
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	0020      	movs	r0, r4
 800484e:	3b03      	subs	r3, #3
 8004850:	f010 fe0a 	bl	8015468 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8004854:	0021      	movs	r1, r4
 8004856:	0028      	movs	r0, r5
 8004858:	f010 fe26 	bl	80154a8 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 800485c:	4a8a      	ldr	r2, [pc, #552]	; (8004a88 <DisplayModuleStatus+0x288>)
 800485e:	498b      	ldr	r1, [pc, #556]	; (8004a8c <DisplayModuleStatus+0x28c>)
 8004860:	0020      	movs	r0, r4
 8004862:	f010 fe01 	bl	8015468 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004866:	0021      	movs	r1, r4
 8004868:	0028      	movs	r0, r5
 800486a:	f010 fe1d 	bl	80154a8 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 800486e:	4a88      	ldr	r2, [pc, #544]	; (8004a90 <DisplayModuleStatus+0x290>)
 8004870:	4988      	ldr	r1, [pc, #544]	; (8004a94 <DisplayModuleStatus+0x294>)
 8004872:	0020      	movs	r0, r4
 8004874:	f010 fdf8 	bl	8015468 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004878:	0021      	movs	r1, r4
 800487a:	0028      	movs	r0, r5
 800487c:	f010 fe14 	bl	80154a8 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004880:	0022      	movs	r2, r4
 8004882:	4b85      	ldr	r3, [pc, #532]	; (8004a98 <DisplayModuleStatus+0x298>)
 8004884:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004886:	c243      	stmia	r2!, {r0, r1, r6}
 8004888:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 800488a:	0028      	movs	r0, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 800488c:	6011      	str	r1, [r2, #0]
 800488e:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8004890:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004892:	8091      	strh	r1, [r2, #4]
 8004894:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004896:	0021      	movs	r1, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004898:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 800489a:	f010 fe05 	bl	80154a8 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800489e:	4b7f      	ldr	r3, [pc, #508]	; (8004a9c <DisplayModuleStatus+0x29c>)
 80048a0:	4699      	mov	r9, r3
 80048a2:	4b7f      	ldr	r3, [pc, #508]	; (8004aa0 <DisplayModuleStatus+0x2a0>)
 80048a4:	4698      	mov	r8, r3
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
				break;
			case PORTBUTTON:
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80048a6:	4b7f      	ldr	r3, [pc, #508]	; (8004aa4 <DisplayModuleStatus+0x2a4>)
 80048a8:	469a      	mov	sl, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 80048aa:	4b7f      	ldr	r3, [pc, #508]	; (8004aa8 <DisplayModuleStatus+0x2a8>)
 80048ac:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 80048ae:	0032      	movs	r2, r6
 80048b0:	4649      	mov	r1, r9
 80048b2:	0020      	movs	r0, r4
 80048b4:	f010 fdd8 	bl	8015468 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 80048b8:	0021      	movs	r1, r4
 80048ba:	0028      	movs	r0, r5
 80048bc:	f010 fdf4 	bl	80154a8 <strcat>
		switch(portStatus[i]){
 80048c0:	4643      	mov	r3, r8
 80048c2:	5d9b      	ldrb	r3, [r3, r6]
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d80b      	bhi.n	80048e0 <DisplayModuleStatus+0xe0>
 80048c8:	4a78      	ldr	r2, [pc, #480]	; (8004aac <DisplayModuleStatus+0x2ac>)
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	58d3      	ldr	r3, [r2, r3]
 80048ce:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 80048d0:	0023      	movs	r3, r4
 80048d2:	465a      	mov	r2, fp
 80048d4:	ca83      	ldmia	r2!, {r0, r1, r7}
 80048d6:	c383      	stmia	r3!, {r0, r1, r7}
 80048d8:	ca83      	ldmia	r2!, {r0, r1, r7}
 80048da:	c383      	stmia	r3!, {r0, r1, r7}
 80048dc:	8812      	ldrh	r2, [r2, #0]
 80048de:	801a      	strh	r2, [r3, #0]
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 80048e0:	0021      	movs	r1, r4
 80048e2:	0028      	movs	r0, r5
 80048e4:	3601      	adds	r6, #1
 80048e6:	f010 fddf 	bl	80154a8 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80048ea:	2e07      	cmp	r6, #7
 80048ec:	d1df      	bne.n	80048ae <DisplayModuleStatus+0xae>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 80048ee:	0022      	movs	r2, r4
 80048f0:	4b6f      	ldr	r3, [pc, #444]	; (8004ab0 <DisplayModuleStatus+0x2b0>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80048f2:	46a8      	mov	r8, r5
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 80048f4:	cb43      	ldmia	r3!, {r0, r1, r6}
 80048f6:	c243      	stmia	r2!, {r0, r1, r6}
 80048f8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80048fa:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 80048fc:	0021      	movs	r1, r4
 80048fe:	0028      	movs	r0, r5
 8004900:	f010 fdd2 	bl	80154a8 <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004904:	4b6b      	ldr	r3, [pc, #428]	; (8004ab4 <DisplayModuleStatus+0x2b4>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004906:	2601      	movs	r6, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004908:	469a      	mov	sl, r3
 800490a:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <DisplayModuleStatus+0x2b8>)
 800490c:	4f6b      	ldr	r7, [pc, #428]	; (8004abc <DisplayModuleStatus+0x2bc>)
 800490e:	4699      	mov	r9, r3
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004910:	4b6b      	ldr	r3, [pc, #428]	; (8004ac0 <DisplayModuleStatus+0x2c0>)
 8004912:	469b      	mov	fp, r3
 8004914:	e017      	b.n	8004946 <DisplayModuleStatus+0x146>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004918:	f007 fb82 	bl	800c020 <GetPort>
 800491c:	4652      	mov	r2, sl
 800491e:	00b3      	lsls	r3, r6, #2
 8004920:	0005      	movs	r5, r0
 8004922:	58d0      	ldr	r0, [r2, r3]
 8004924:	f007 fb7c 	bl	800c020 <GetPort>
 8004928:	0032      	movs	r2, r6
 800492a:	002b      	movs	r3, r5
 800492c:	4649      	mov	r1, r9
 800492e:	9000      	str	r0, [sp, #0]
 8004930:	0020      	movs	r0, r4
 8004932:	f010 fd99 	bl	8015468 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004936:	3601      	adds	r6, #1
 8004938:	0021      	movs	r1, r4
 800493a:	4640      	mov	r0, r8
 800493c:	f010 fdb4 	bl	80154a8 <strcat>
	for(char i =1; i <= 6; i++){
 8004940:	3738      	adds	r7, #56	; 0x38
 8004942:	2e07      	cmp	r6, #7
 8004944:	d00f      	beq.n	8004966 <DisplayModuleStatus+0x166>
		if(streamDMA[i - 1].Instance == 0){
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e4      	bne.n	8004916 <DisplayModuleStatus+0x116>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 800494c:	0032      	movs	r2, r6
 800494e:	4659      	mov	r1, fp
 8004950:	0020      	movs	r0, r4
 8004952:	f010 fd89 	bl	8015468 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004956:	3601      	adds	r6, #1
 8004958:	0021      	movs	r1, r4
 800495a:	4640      	mov	r0, r8
 800495c:	f010 fda4 	bl	80154a8 <strcat>
	for(char i =1; i <= 6; i++){
 8004960:	3738      	adds	r7, #56	; 0x38
 8004962:	2e07      	cmp	r6, #7
 8004964:	d1ef      	bne.n	8004946 <DisplayModuleStatus+0x146>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004966:	4640      	mov	r0, r8
 8004968:	f7fb fbd6 	bl	8000118 <strlen>
 800496c:	4645      	mov	r5, r8
 800496e:	0006      	movs	r6, r0
 8004970:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <DisplayModuleStatus+0x2c4>)
 8004972:	2202      	movs	r2, #2
 8004974:	0019      	movs	r1, r3
 8004976:	1828      	adds	r0, r5, r0
 8004978:	4699      	mov	r9, r3
 800497a:	f010 fb43 	bl	8015004 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 800497e:	1cb0      	adds	r0, r6, #2
 8004980:	221d      	movs	r2, #29
 8004982:	4951      	ldr	r1, [pc, #324]	; (8004ac8 <DisplayModuleStatus+0x2c8>)
 8004984:	1828      	adds	r0, r5, r0
 8004986:	f010 fb3d 	bl	8015004 <memcpy>
	temp =strlen((char* )pcOutputString);
 800498a:	231e      	movs	r3, #30
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800498c:	2780      	movs	r7, #128	; 0x80
	temp =strlen((char* )pcOutputString);
 800498e:	469b      	mov	fp, r3
 8004990:	4b4e      	ldr	r3, [pc, #312]	; (8004acc <DisplayModuleStatus+0x2cc>)
 8004992:	44b3      	add	fp, r6
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004994:	4698      	mov	r8, r3
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004996:	4b4e      	ldr	r3, [pc, #312]	; (8004ad0 <DisplayModuleStatus+0x2d0>)
	temp =strlen((char* )pcOutputString);
 8004998:	2600      	movs	r6, #0
			sprintf(pcUserMessage,"P%d ",p);
 800499a:	469a      	mov	sl, r3
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800499c:	023f      	lsls	r7, r7, #8
 800499e:	e001      	b.n	80049a4 <DisplayModuleStatus+0x1a4>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80049a0:	2e06      	cmp	r6, #6
 80049a2:	d016      	beq.n	80049d2 <DisplayModuleStatus+0x1d2>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80049a4:	4641      	mov	r1, r8
 80049a6:	4b33      	ldr	r3, [pc, #204]	; (8004a74 <DisplayModuleStatus+0x274>)
 80049a8:	0032      	movs	r2, r6
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	3601      	adds	r6, #1
 80049ae:	3b01      	subs	r3, #1
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	5acb      	ldrh	r3, [r1, r3]
 80049b4:	0039      	movs	r1, r7
 80049b6:	4111      	asrs	r1, r2
 80049b8:	4219      	tst	r1, r3
 80049ba:	d0f1      	beq.n	80049a0 <DisplayModuleStatus+0x1a0>
			sprintf(pcUserMessage,"P%d ",p);
 80049bc:	4651      	mov	r1, sl
 80049be:	0032      	movs	r2, r6
 80049c0:	0020      	movs	r0, r4
 80049c2:	f010 fd51 	bl	8015468 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80049c6:	0021      	movs	r1, r4
 80049c8:	0028      	movs	r0, r5
 80049ca:	f010 fd6d 	bl	80154a8 <strcat>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80049ce:	2e06      	cmp	r6, #6
 80049d0:	d1e8      	bne.n	80049a4 <DisplayModuleStatus+0x1a4>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80049d2:	0028      	movs	r0, r5
 80049d4:	f7fb fba0 	bl	8000118 <strlen>
 80049d8:	465b      	mov	r3, fp
 80049da:	0004      	movs	r4, r0
 80049dc:	b298      	uxth	r0, r3
 80049de:	42a0      	cmp	r0, r4
 80049e0:	d03e      	beq.n	8004a60 <DisplayModuleStatus+0x260>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80049e2:	2203      	movs	r2, #3
 80049e4:	4649      	mov	r1, r9
 80049e6:	1928      	adds	r0, r5, r4
 80049e8:	f010 fb0c 	bl	8015004 <memcpy>
	
	/* Display output */
	if(port)
 80049ec:	9b03      	ldr	r3, [sp, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d129      	bne.n	8004a46 <DisplayModuleStatus+0x246>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80049f2:	b005      	add	sp, #20
 80049f4:	bcf0      	pop	{r4, r5, r6, r7}
 80049f6:	46bb      	mov	fp, r7
 80049f8:	46b2      	mov	sl, r6
 80049fa:	46a9      	mov	r9, r5
 80049fc:	46a0      	mov	r8, r4
 80049fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004a00:	0022      	movs	r2, r4
 8004a02:	4b34      	ldr	r3, [pc, #208]	; (8004ad4 <DisplayModuleStatus+0x2d4>)
 8004a04:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004a06:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004a08:	e76a      	b.n	80048e0 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004a0a:	0022      	movs	r2, r4
 8004a0c:	4b32      	ldr	r3, [pc, #200]	; (8004ad8 <DisplayModuleStatus+0x2d8>)
 8004a0e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004a10:	c283      	stmia	r2!, {r0, r1, r7}
 8004a12:	cb03      	ldmia	r3!, {r0, r1}
 8004a14:	c203      	stmia	r2!, {r0, r1}
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	7013      	strb	r3, [r2, #0]
				break;
 8004a1a:	e761      	b.n	80048e0 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004a1c:	0023      	movs	r3, r4
 8004a1e:	4652      	mov	r2, sl
 8004a20:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004a22:	c383      	stmia	r3!, {r0, r1, r7}
 8004a24:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004a26:	c383      	stmia	r3!, {r0, r1, r7}
 8004a28:	6811      	ldr	r1, [r2, #0]
 8004a2a:	6019      	str	r1, [r3, #0]
 8004a2c:	8891      	ldrh	r1, [r2, #4]
 8004a2e:	8099      	strh	r1, [r3, #4]
 8004a30:	7992      	ldrb	r2, [r2, #6]
 8004a32:	719a      	strb	r2, [r3, #6]
				break;
 8004a34:	e754      	b.n	80048e0 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Free\n\r");
 8004a36:	4b29      	ldr	r3, [pc, #164]	; (8004adc <DisplayModuleStatus+0x2dc>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	6022      	str	r2, [r4, #0]
 8004a3c:	889a      	ldrh	r2, [r3, #4]
 8004a3e:	80a2      	strh	r2, [r4, #4]
 8004a40:	799b      	ldrb	r3, [r3, #6]
 8004a42:	71a3      	strb	r3, [r4, #6]
				break;
 8004a44:	e74c      	b.n	80048e0 <DisplayModuleStatus+0xe0>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004a46:	0028      	movs	r0, r5
 8004a48:	f7fb fb66 	bl	8000118 <strlen>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	425b      	negs	r3, r3
 8004a50:	b282      	uxth	r2, r0
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	0029      	movs	r1, r5
 8004a56:	9803      	ldr	r0, [sp, #12]
 8004a58:	3333      	adds	r3, #51	; 0x33
 8004a5a:	f009 fdf5 	bl	800e648 <writePxMutex>
}
 8004a5e:	e7c8      	b.n	80049f2 <DisplayModuleStatus+0x1f2>
		strcat((char* )pcOutputString,"None");
 8004a60:	1928      	adds	r0, r5, r4
 8004a62:	2205      	movs	r2, #5
 8004a64:	491e      	ldr	r1, [pc, #120]	; (8004ae0 <DisplayModuleStatus+0x2e0>)
 8004a66:	f010 facd 	bl	8015004 <memcpy>
 8004a6a:	3404      	adds	r4, #4
 8004a6c:	e7b9      	b.n	80049e2 <DisplayModuleStatus+0x1e2>
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	20001140 	.word	0x20001140
 8004a74:	2000110e 	.word	0x2000110e
 8004a78:	0801b3dc 	.word	0x0801b3dc
 8004a7c:	20000b0f 	.word	0x20000b0f
 8004a80:	0801b3f8 	.word	0x0801b3f8
 8004a84:	0801b414 	.word	0x0801b414
 8004a88:	0801b434 	.word	0x0801b434
 8004a8c:	0801b440 	.word	0x0801b440
 8004a90:	0801b458 	.word	0x0801b458
 8004a94:	0801b464 	.word	0x0801b464
 8004a98:	0801b480 	.word	0x0801b480
 8004a9c:	0801b494 	.word	0x0801b494
 8004aa0:	20001190 	.word	0x20001190
 8004aa4:	0801b4e4 	.word	0x0801b4e4
 8004aa8:	0801b4c8 	.word	0x0801b4c8
 8004aac:	0801b598 	.word	0x0801b598
 8004ab0:	0801b504 	.word	0x0801b504
 8004ab4:	2000153c 	.word	0x2000153c
 8004ab8:	0801b538 	.word	0x0801b538
 8004abc:	20001a80 	.word	0x20001a80
 8004ac0:	0801b51c 	.word	0x0801b51c
 8004ac4:	0801b490 	.word	0x0801b490
 8004ac8:	0801b568 	.word	0x0801b568
 8004acc:	20006f68 	.word	0x20006f68
 8004ad0:	0801b588 	.word	0x0801b588
 8004ad4:	0801b4bc 	.word	0x0801b4bc
 8004ad8:	0801b4a4 	.word	0x0801b4a4
 8004adc:	0801b49c 	.word	0x0801b49c
 8004ae0:	0801b590 	.word	0x0801b590

08004ae4 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae6:	46c6      	mov	lr, r8
 8004ae8:	b500      	push	{lr}
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004aea:	7803      	ldrb	r3, [r0, #0]
int16_t GetID(char *string){
 8004aec:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 8004aee:	2b6d      	cmp	r3, #109	; 0x6d
 8004af0:	d10a      	bne.n	8004b08 <GetID+0x24>
 8004af2:	7843      	ldrb	r3, [r0, #1]
 8004af4:	2b65      	cmp	r3, #101	; 0x65
 8004af6:	d107      	bne.n	8004b08 <GetID+0x24>
 8004af8:	7883      	ldrb	r3, [r0, #2]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <GetID+0x24>
		return myID;
 8004afe:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <GetID+0xb0>)
 8004b00:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004b02:	bc80      	pop	{r7}
 8004b04:	46b8      	mov	r8, r7
 8004b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strcmp(string,"all"))
 8004b08:	0030      	movs	r0, r6
 8004b0a:	4923      	ldr	r1, [pc, #140]	; (8004b98 <GetID+0xb4>)
 8004b0c:	f7fb fafa 	bl	8000104 <strcmp>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d036      	beq.n	8004b82 <GetID+0x9e>
	else if(string[0] == '#') /* Check IDs */
 8004b14:	7833      	ldrb	r3, [r6, #0]
 8004b16:	4698      	mov	r8, r3
 8004b18:	2b23      	cmp	r3, #35	; 0x23
 8004b1a:	d021      	beq.n	8004b60 <GetID+0x7c>
		for(i =0; i < N; i++){
 8004b1c:	4b1f      	ldr	r3, [pc, #124]	; (8004b9c <GetID+0xb8>)
 8004b1e:	781f      	ldrb	r7, [r3, #0]
 8004b20:	2f00      	cmp	r7, #0
 8004b22:	d00f      	beq.n	8004b44 <GetID+0x60>
 8004b24:	2400      	movs	r4, #0
 8004b26:	4d1e      	ldr	r5, [pc, #120]	; (8004ba0 <GetID+0xbc>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004b28:	0029      	movs	r1, r5
 8004b2a:	0030      	movs	r0, r6
 8004b2c:	f7fb faea 	bl	8000104 <strcmp>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d102      	bne.n	8004b3a <GetID+0x56>
 8004b34:	4643      	mov	r3, r8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d125      	bne.n	8004b86 <GetID+0xa2>
		for(i =0; i < N; i++){
 8004b3a:	3401      	adds	r4, #1
 8004b3c:	b2e4      	uxtb	r4, r4
 8004b3e:	350a      	adds	r5, #10
 8004b40:	42a7      	cmp	r7, r4
 8004b42:	d1f1      	bne.n	8004b28 <GetID+0x44>
 8004b44:	2400      	movs	r4, #0
 8004b46:	4d17      	ldr	r5, [pc, #92]	; (8004ba4 <GetID+0xc0>)
			if(!strcmp(string,groupAlias[i]))
 8004b48:	0029      	movs	r1, r5
 8004b4a:	0030      	movs	r0, r6
 8004b4c:	f7fb fada 	bl	8000104 <strcmp>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d01a      	beq.n	8004b8a <GetID+0xa6>
		for(i =0; i < MaxNumOfGroups; i++){
 8004b54:	3401      	adds	r4, #1
 8004b56:	350a      	adds	r5, #10
 8004b58:	2c0a      	cmp	r4, #10
 8004b5a:	d1f5      	bne.n	8004b48 <GetID+0x64>
		return BOS_ERR_WrongName;
 8004b5c:	2064      	movs	r0, #100	; 0x64
 8004b5e:	e7d0      	b.n	8004b02 <GetID+0x1e>
		id =atol(string + 1);
 8004b60:	1c70      	adds	r0, r6, #1
 8004b62:	f00f ffb8 	bl	8014ad6 <atol>
 8004b66:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <GetID+0x90>
 8004b6c:	4a0b      	ldr	r2, [pc, #44]	; (8004b9c <GetID+0xb8>)
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d204      	bcs.n	8004b7e <GetID+0x9a>
		else if(id == myID)
 8004b74:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <GetID+0xb0>)
			return BOS_ERR_WrongID;
 8004b76:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004b78:	7812      	ldrb	r2, [r2, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d1c1      	bne.n	8004b02 <GetID+0x1e>
			return myID;
 8004b7e:	b218      	sxth	r0, r3
 8004b80:	e7bf      	b.n	8004b02 <GetID+0x1e>
		return BOS_BROADCAST;
 8004b82:	20ff      	movs	r0, #255	; 0xff
 8004b84:	e7bd      	b.n	8004b02 <GetID+0x1e>
				return (i);
 8004b86:	b220      	sxth	r0, r4
 8004b88:	e7bb      	b.n	8004b02 <GetID+0x1e>
				return (BOS_MULTICAST | (i << 8));
 8004b8a:	20fe      	movs	r0, #254	; 0xfe
 8004b8c:	0224      	lsls	r4, r4, #8
 8004b8e:	4320      	orrs	r0, r4
 8004b90:	b200      	sxth	r0, r0
 8004b92:	e7b6      	b.n	8004b02 <GetID+0x1e>
 8004b94:	2000110e 	.word	0x2000110e
 8004b98:	0801b5ac 	.word	0x0801b5ac
 8004b9c:	2000001c 	.word	0x2000001c
 8004ba0:	20001000 	.word	0x20001000
 8004ba4:	20000ef4 	.word	0x20000ef4

08004ba8 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004baa:	46c6      	mov	lr, r8
 8004bac:	4c29      	ldr	r4, [pc, #164]	; (8004c54 <NameModule+0xac>)
 8004bae:	4680      	mov	r8, r0
 8004bb0:	0025      	movs	r5, r4
 8004bb2:	000e      	movs	r6, r1
 8004bb4:	b500      	push	{lr}
 8004bb6:	3510      	adds	r5, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 8004bb8:	0021      	movs	r1, r4
 8004bba:	0030      	movs	r0, r6
 8004bbc:	f7fb faa2 	bl	8000104 <strcmp>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d039      	beq.n	8004c38 <NameModule+0x90>
	for(i =0; i < NumOfKeywords; i++){
 8004bc4:	3404      	adds	r4, #4
 8004bc6:	42ac      	cmp	r4, r5
 8004bc8:	d1f6      	bne.n	8004bb8 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004bca:	4b23      	ldr	r3, [pc, #140]	; (8004c58 <NameModule+0xb0>)
 8004bcc:	781f      	ldrb	r7, [r3, #0]
 8004bce:	2f01      	cmp	r7, #1
 8004bd0:	dd10      	ble.n	8004bf4 <NameModule+0x4c>
 8004bd2:	2501      	movs	r5, #1
 8004bd4:	4c21      	ldr	r4, [pc, #132]	; (8004c5c <NameModule+0xb4>)
 8004bd6:	e003      	b.n	8004be0 <NameModule+0x38>
 8004bd8:	3501      	adds	r5, #1
 8004bda:	340a      	adds	r4, #10
 8004bdc:	42bd      	cmp	r5, r7
 8004bde:	da09      	bge.n	8004bf4 <NameModule+0x4c>
		if(!strcmp(alias,moduleAlias[i]))
 8004be0:	0021      	movs	r1, r4
 8004be2:	0030      	movs	r0, r6
 8004be4:	f7fb fa8e 	bl	8000104 <strcmp>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d1f5      	bne.n	8004bd8 <NameModule+0x30>
			return BOS_ERR_ExistingAlias;
 8004bec:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 8004bee:	bc80      	pop	{r7}
 8004bf0:	46b8      	mov	r8, r7
 8004bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf4:	4c1a      	ldr	r4, [pc, #104]	; (8004c60 <NameModule+0xb8>)
 8004bf6:	0025      	movs	r5, r4
 8004bf8:	3564      	adds	r5, #100	; 0x64
		if(!strcmp(alias,groupAlias[i]))
 8004bfa:	0021      	movs	r1, r4
 8004bfc:	0030      	movs	r0, r6
 8004bfe:	f7fb fa81 	bl	8000104 <strcmp>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d0f2      	beq.n	8004bec <NameModule+0x44>
	for(i =0; i < MaxNumOfGroups; i++){
 8004c06:	340a      	adds	r4, #10
 8004c08:	42a5      	cmp	r5, r4
 8004c0a:	d1f6      	bne.n	8004bfa <NameModule+0x52>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004c0c:	4f15      	ldr	r7, [pc, #84]	; (8004c64 <NameModule+0xbc>)
 8004c0e:	4c16      	ldr	r4, [pc, #88]	; (8004c68 <NameModule+0xc0>)
 8004c10:	603c      	str	r4, [r7, #0]
 8004c12:	e003      	b.n	8004c1c <NameModule+0x74>
 8004c14:	6864      	ldr	r4, [r4, #4]
 8004c16:	603c      	str	r4, [r7, #0]
 8004c18:	2c00      	cmp	r4, #0
 8004c1a:	d00f      	beq.n	8004c3c <NameModule+0x94>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004c20:	0028      	movs	r0, r5
 8004c22:	f7fb fa79 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004c26:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004c28:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004c2a:	0030      	movs	r0, r6
 8004c2c:	f010 fc5f 	bl	80154ee <strncmp>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	d1ef      	bne.n	8004c14 <NameModule+0x6c>
			return BOS_ERR_ExistingCmd;
 8004c34:	2008      	movs	r0, #8
 8004c36:	e7da      	b.n	8004bee <NameModule+0x46>
			return BOS_ERR_Keyword;
 8004c38:	2006      	movs	r0, #6
 8004c3a:	e7d8      	b.n	8004bee <NameModule+0x46>
	strcpy(moduleAlias[module],alias);
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	0098      	lsls	r0, r3, #2
 8004c40:	4f0a      	ldr	r7, [pc, #40]	; (8004c6c <NameModule+0xc4>)
 8004c42:	4440      	add	r0, r8
 8004c44:	0040      	lsls	r0, r0, #1
 8004c46:	0031      	movs	r1, r6
 8004c48:	19c0      	adds	r0, r0, r7
 8004c4a:	f010 fc48 	bl	80154de <strcpy>
	result =SaveEEalias();
 8004c4e:	f7ff f8b1 	bl	8003db4 <SaveEEalias>
	return result;
 8004c52:	e7cc      	b.n	8004bee <NameModule+0x46>
 8004c54:	0801b7f8 	.word	0x0801b7f8
 8004c58:	2000001c 	.word	0x2000001c
 8004c5c:	2000100a 	.word	0x2000100a
 8004c60:	20000ef4 	.word	0x20000ef4
 8004c64:	20001198 	.word	0x20001198
 8004c68:	20000128 	.word	0x20000128
 8004c6c:	20001000 	.word	0x20001000

08004c70 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c72:	464f      	mov	r7, r9
 8004c74:	4646      	mov	r6, r8
 8004c76:	46d6      	mov	lr, sl
 8004c78:	4b3b      	ldr	r3, [pc, #236]	; (8004d68 <AddModuleToGroup+0xf8>)
 8004c7a:	b5c0      	push	{r6, r7, lr}
 8004c7c:	4680      	mov	r8, r0
 8004c7e:	000e      	movs	r6, r1
 8004c80:	4699      	mov	r9, r3
 8004c82:	001f      	movs	r7, r3
 8004c84:	001d      	movs	r5, r3
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004c86:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 8004c88:	0029      	movs	r1, r5
 8004c8a:	0030      	movs	r0, r6
 8004c8c:	f7fb fa3a 	bl	8000104 <strcmp>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d051      	beq.n	8004d38 <AddModuleToGroup+0xc8>
	for(i =0; i < MaxNumOfGroups; i++){
 8004c94:	3401      	adds	r4, #1
 8004c96:	350a      	adds	r5, #10
 8004c98:	2c0a      	cmp	r4, #10
 8004c9a:	d1f5      	bne.n	8004c88 <AddModuleToGroup+0x18>
 8004c9c:	4c33      	ldr	r4, [pc, #204]	; (8004d6c <AddModuleToGroup+0xfc>)
 8004c9e:	0025      	movs	r5, r4
 8004ca0:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004ca2:	0021      	movs	r1, r4
 8004ca4:	0030      	movs	r0, r6
 8004ca6:	f7fb fa2d 	bl	8000104 <strcmp>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d04e      	beq.n	8004d4c <AddModuleToGroup+0xdc>
	for(j =0; j < NumOfKeywords; j++){
 8004cae:	3404      	adds	r4, #4
 8004cb0:	42a5      	cmp	r5, r4
 8004cb2:	d1f6      	bne.n	8004ca2 <AddModuleToGroup+0x32>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 8004cb4:	4b2e      	ldr	r3, [pc, #184]	; (8004d70 <AddModuleToGroup+0x100>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	469a      	mov	sl, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	dd12      	ble.n	8004ce4 <AddModuleToGroup+0x74>
 8004cbe:	2501      	movs	r5, #1
 8004cc0:	4c2c      	ldr	r4, [pc, #176]	; (8004d74 <AddModuleToGroup+0x104>)
 8004cc2:	e003      	b.n	8004ccc <AddModuleToGroup+0x5c>
 8004cc4:	3501      	adds	r5, #1
 8004cc6:	340a      	adds	r4, #10
 8004cc8:	45aa      	cmp	sl, r5
 8004cca:	dd0b      	ble.n	8004ce4 <AddModuleToGroup+0x74>
		if(!strcmp(group,moduleAlias[j]))
 8004ccc:	0021      	movs	r1, r4
 8004cce:	0030      	movs	r0, r6
 8004cd0:	f7fb fa18 	bl	8000104 <strcmp>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d1f5      	bne.n	8004cc4 <AddModuleToGroup+0x54>
			return BOS_ERR_ExistingAlias;
 8004cd8:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004cda:	bce0      	pop	{r5, r6, r7}
 8004cdc:	46ba      	mov	sl, r7
 8004cde:	46b1      	mov	r9, r6
 8004ce0:	46a8      	mov	r8, r5
 8004ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004ce4:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <AddModuleToGroup+0x108>)
 8004ce6:	4c25      	ldr	r4, [pc, #148]	; (8004d7c <AddModuleToGroup+0x10c>)
 8004ce8:	469a      	mov	sl, r3
 8004cea:	601c      	str	r4, [r3, #0]
 8004cec:	e004      	b.n	8004cf8 <AddModuleToGroup+0x88>
 8004cee:	4653      	mov	r3, sl
 8004cf0:	6864      	ldr	r4, [r4, #4]
 8004cf2:	601c      	str	r4, [r3, #0]
 8004cf4:	2c00      	cmp	r4, #0
 8004cf6:	d00d      	beq.n	8004d14 <AddModuleToGroup+0xa4>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004cfc:	0028      	movs	r0, r5
 8004cfe:	f7fb fa0b 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004d02:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004d04:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004d06:	0030      	movs	r0, r6
 8004d08:	f010 fbf1 	bl	80154ee <strncmp>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d1ee      	bne.n	8004cee <AddModuleToGroup+0x7e>
			return BOS_ERR_ExistingCmd;
 8004d10:	2008      	movs	r0, #8
 8004d12:	e7e2      	b.n	8004cda <AddModuleToGroup+0x6a>
		if(!groupAlias[i][0]){
 8004d14:	783b      	ldrb	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01a      	beq.n	8004d50 <AddModuleToGroup+0xe0>
	for(i =0; i < MaxNumOfGroups; i++){
 8004d1a:	3401      	adds	r4, #1
 8004d1c:	370a      	adds	r7, #10
 8004d1e:	2c0a      	cmp	r4, #10
 8004d20:	d1f8      	bne.n	8004d14 <AddModuleToGroup+0xa4>
 8004d22:	2380      	movs	r3, #128	; 0x80
 8004d24:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 8004d26:	4647      	mov	r7, r8
 8004d28:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <AddModuleToGroup+0x110>)
 8004d2a:	3f01      	subs	r7, #1
 8004d2c:	007f      	lsls	r7, r7, #1
 8004d2e:	5ab9      	ldrh	r1, [r7, r2]
	return result;
 8004d30:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 8004d32:	430b      	orrs	r3, r1
 8004d34:	52bb      	strh	r3, [r7, r2]
	return result;
 8004d36:	e7d0      	b.n	8004cda <AddModuleToGroup+0x6a>
			groupModules[module - 1] |=(0x0001 << i);
 8004d38:	2201      	movs	r2, #1
 8004d3a:	4647      	mov	r7, r8
 8004d3c:	40a2      	lsls	r2, r4
 8004d3e:	4910      	ldr	r1, [pc, #64]	; (8004d80 <AddModuleToGroup+0x110>)
 8004d40:	3f01      	subs	r7, #1
 8004d42:	007f      	lsls	r7, r7, #1
 8004d44:	5a7b      	ldrh	r3, [r7, r1]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	527b      	strh	r3, [r7, r1]
			return result;
 8004d4a:	e7c6      	b.n	8004cda <AddModuleToGroup+0x6a>
			return BOS_ERR_Keyword;
 8004d4c:	2006      	movs	r0, #6
 8004d4e:	e7c4      	b.n	8004cda <AddModuleToGroup+0x6a>
			strcpy(groupAlias[i],group);
 8004d50:	00a0      	lsls	r0, r4, #2
 8004d52:	1900      	adds	r0, r0, r4
 8004d54:	0040      	lsls	r0, r0, #1
 8004d56:	0031      	movs	r1, r6
 8004d58:	4448      	add	r0, r9
 8004d5a:	f010 fbc0 	bl	80154de <strcpy>
			break;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	40a3      	lsls	r3, r4
 8004d62:	b21b      	sxth	r3, r3
 8004d64:	e7df      	b.n	8004d26 <AddModuleToGroup+0xb6>
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	20000ef4 	.word	0x20000ef4
 8004d6c:	0801b7f8 	.word	0x0801b7f8
 8004d70:	2000001c 	.word	0x2000001c
 8004d74:	2000100a 	.word	0x2000100a
 8004d78:	2000119c 	.word	0x2000119c
 8004d7c:	20000128 	.word	0x20000128
 8004d80:	20000f58 	.word	0x20000f58

08004d84 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	46de      	mov	lr, fp
 8004d88:	4657      	mov	r7, sl
 8004d8a:	464e      	mov	r6, r9
 8004d8c:	4645      	mov	r5, r8
 8004d8e:	b5e0      	push	{r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <ReadPortsDir+0xa4>)
 8004d92:	469a      	mov	sl, r3
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	469b      	mov	fp, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d03d      	beq.n	8004e18 <ReadPortsDir+0x94>
	BOS_Status result =BOS_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	469b      	mov	fp, r3
 8004da0:	4b22      	ldr	r3, [pc, #136]	; (8004e2c <ReadPortsDir+0xa8>)
	for(uint8_t i =1; i <= N; i++){
 8004da2:	2401      	movs	r4, #1
 8004da4:	4698      	mov	r8, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004da6:	4b22      	ldr	r3, [pc, #136]	; (8004e30 <ReadPortsDir+0xac>)
 8004da8:	4699      	mov	r9, r3
 8004daa:	e013      	b.n	8004dd4 <ReadPortsDir+0x50>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 8004dac:	2200      	movs	r2, #0
 8004dae:	2113      	movs	r1, #19
 8004db0:	0020      	movs	r0, r4
 8004db2:	f004 ff6f 	bl	8009c94 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004db6:	2032      	movs	r0, #50	; 0x32
 8004db8:	f009 fa94 	bl	800e2e4 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <ReadPortsDir+0xb0>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <ReadPortsDir+0x44>
				result =BOS_ERR_NoResponse;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	469b      	mov	fp, r3
	for(uint8_t i =1; i <= N; i++){
 8004dc8:	4653      	mov	r3, sl
 8004dca:	3401      	adds	r4, #1
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	b2e4      	uxtb	r4, r4
 8004dd0:	42a3      	cmp	r3, r4
 8004dd2:	d321      	bcc.n	8004e18 <ReadPortsDir+0x94>
		if(i != myID){
 8004dd4:	4643      	mov	r3, r8
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d1e7      	bne.n	8004dac <ReadPortsDir+0x28>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004ddc:	2780      	movs	r7, #128	; 0x80
 8004dde:	2500      	movs	r5, #0
 8004de0:	023f      	lsls	r7, r7, #8
 8004de2:	1c6e      	adds	r6, r5, #1
 8004de4:	b2f0      	uxtb	r0, r6
 8004de6:	f009 fcbb 	bl	800e760 <GetUart>
 8004dea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dec:	42bb      	cmp	r3, r7
 8004dee:	d10a      	bne.n	8004e06 <ReadPortsDir+0x82>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004df0:	0039      	movs	r1, r7
 8004df2:	4643      	mov	r3, r8
 8004df4:	464a      	mov	r2, r9
 8004df6:	4129      	asrs	r1, r5
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	5a9a      	ldrh	r2, [r3, r2]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	4649      	mov	r1, r9
 8004e04:	525a      	strh	r2, [r3, r1]
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004e06:	0035      	movs	r5, r6
 8004e08:	2e06      	cmp	r6, #6
 8004e0a:	d1ea      	bne.n	8004de2 <ReadPortsDir+0x5e>
	for(uint8_t i =1; i <= N; i++){
 8004e0c:	4653      	mov	r3, sl
 8004e0e:	3401      	adds	r4, #1
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	b2e4      	uxtb	r4, r4
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d2dd      	bcs.n	8004dd4 <ReadPortsDir+0x50>
			}
		}
	}
	
	return result;
}
 8004e18:	4658      	mov	r0, fp
 8004e1a:	bcf0      	pop	{r4, r5, r6, r7}
 8004e1c:	46bb      	mov	fp, r7
 8004e1e:	46b2      	mov	sl, r6
 8004e20:	46a9      	mov	r9, r5
 8004e22:	46a0      	mov	r8, r4
 8004e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	2000001c 	.word	0x2000001c
 8004e2c:	2000110e 	.word	0x2000110e
 8004e30:	20006f68 	.word	0x20006f68
 8004e34:	200011a8 	.word	0x200011a8

08004e38 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004e3a:	2580      	movs	r5, #128	; 0x80
BOS_Status UpdateMyPortsDir(void){
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	4f10      	ldr	r7, [pc, #64]	; (8004e80 <UpdateMyPortsDir+0x48>)
 8004e40:	4e10      	ldr	r6, [pc, #64]	; (8004e84 <UpdateMyPortsDir+0x4c>)
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004e42:	022d      	lsls	r5, r5, #8
 8004e44:	e007      	b.n	8004e56 <UpdateMyPortsDir+0x1e>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
 8004e46:	f009 fc8b 	bl	800e760 <GetUart>
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	f009 fc94 	bl	800e778 <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004e50:	0022      	movs	r2, r4
 8004e52:	2c06      	cmp	r4, #6
 8004e54:	d011      	beq.n	8004e7a <UpdateMyPortsDir+0x42>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004e56:	0029      	movs	r1, r5
 8004e58:	4111      	asrs	r1, r2
 8004e5a:	7833      	ldrb	r3, [r6, #0]
 8004e5c:	1c54      	adds	r4, r2, #1
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	5afb      	ldrh	r3, [r7, r3]
 8004e64:	b2e0      	uxtb	r0, r4
 8004e66:	4219      	tst	r1, r3
 8004e68:	d0ed      	beq.n	8004e46 <UpdateMyPortsDir+0xe>
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004e6a:	f009 fc79 	bl	800e760 <GetUart>
 8004e6e:	2101      	movs	r1, #1
 8004e70:	f009 fc82 	bl	800e778 <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004e74:	0022      	movs	r2, r4
 8004e76:	2c06      	cmp	r4, #6
 8004e78:	d1ed      	bne.n	8004e56 <UpdateMyPortsDir+0x1e>
		}
	}
	
	return result;
}
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	20006f68 	.word	0x20006f68
 8004e84:	2000110e 	.word	0x2000110e

08004e88 <BOS_Init>:
void BOS_Init(void){
 8004e88:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8004e8a:	f009 f8e3 	bl	800e054 <RTC_Init>
	GetTimeDate();
 8004e8e:	f009 f983 	bl	800e198 <GetTimeDate>
	EE_Init();
 8004e92:	f003 f98f 	bl	80081b4 <EE_Init>
	GPIO_Init();
 8004e96:	f008 fda9 	bl	800d9ec <GPIO_Init>
	DMA_Init();
 8004e9a:	f007 fcdf 	bl	800c85c <DMA_Init>
	TIM_USEC_Init();
 8004e9e:	f009 f9ad 	bl	800e1fc <TIM_USEC_Init>
	CRC_Init();
 8004ea2:	f008 fd31 	bl	800d908 <CRC_Init>
	TIM_MSEC_Init();
 8004ea6:	f009 f9db 	bl	800e260 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 8004eaa:	f008 fe4f 	bl	800db4c <IsFactoryReset>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d15a      	bne.n	8004f68 <BOS_Init+0xe0>
	if(IsLowerCLIbaud()){
 8004eb2:	f7ff f871 	bl	8003f98 <IsLowerCLIbaud>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d126      	bne.n	8004f08 <BOS_Init+0x80>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004eba:	2032      	movs	r0, #50	; 0x32
 8004ebc:	f009 fa12 	bl	800e2e4 <StartMilliDelay>
		Module_Peripheral_Init();
 8004ec0:	f006 fffc 	bl	800bebc <Module_Peripheral_Init>
	LoadEEvars();
 8004ec4:	f7fe ff3c 	bl	8003d40 <LoadEEvars>
	UpdateMyPortsDir();
 8004ec8:	f7ff ffb6 	bl	8004e38 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004ecc:	f008 f990 	bl	800d1f0 <SetupMessagingRxDMAs>
		IND_ON();
 8004ed0:	2180      	movs	r1, #128	; 0x80
 8004ed2:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 8004ed4:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <BOS_Init+0x108>)
		IND_ON();
 8004ed6:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8004ed8:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 8004eda:	0109      	lsls	r1, r1, #4
 8004edc:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d129      	bne.n	8004f36 <BOS_Init+0xae>
		IND_ON();
 8004ee2:	f00d fdbb 	bl	8012a5c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8004ee6:	20fa      	movs	r0, #250	; 0xfa
 8004ee8:	0040      	lsls	r0, r0, #1
		Delay_ms_no_rtos(100);
 8004eea:	f009 f9fb 	bl	800e2e4 <StartMilliDelay>
		IND_OFF();
 8004eee:	2180      	movs	r1, #128	; 0x80
 8004ef0:	2090      	movs	r0, #144	; 0x90
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	0109      	lsls	r1, r1, #4
 8004ef6:	05c0      	lsls	r0, r0, #23
 8004ef8:	f00d fdb0 	bl	8012a5c <HAL_GPIO_WritePin>
	ResetUartORE();
 8004efc:	f002 ffce 	bl	8007e9c <ResetUartORE>
	BOS_initialized =1;
 8004f00:	2201      	movs	r2, #1
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <BOS_Init+0x10c>)
 8004f04:	701a      	strb	r2, [r3, #0]
}
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
		CLI_LOW_Baudrate_Flag =1;
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4b23      	ldr	r3, [pc, #140]	; (8004f98 <BOS_Init+0x110>)
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004f0c:	2032      	movs	r0, #50	; 0x32
		CLI_LOW_Baudrate_Flag =1;
 8004f0e:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004f10:	f009 f9e8 	bl	800e2e4 <StartMilliDelay>
		Module_Peripheral_Init();
 8004f14:	f006 ffd2 	bl	800bebc <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004f18:	21e1      	movs	r1, #225	; 0xe1
 8004f1a:	4d20      	ldr	r5, [pc, #128]	; (8004f9c <BOS_Init+0x114>)
 8004f1c:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004f1e:	2401      	movs	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004f20:	60a9      	str	r1, [r5, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004f22:	e000      	b.n	8004f26 <BOS_Init+0x9e>
 8004f24:	68a9      	ldr	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 8004f26:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004f28:	3401      	adds	r4, #1
 8004f2a:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 8004f2c:	f009 fc06 	bl	800e73c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004f30:	2c07      	cmp	r4, #7
 8004f32:	d1f7      	bne.n	8004f24 <BOS_Init+0x9c>
 8004f34:	e7c6      	b.n	8004ec4 <BOS_Init+0x3c>
		IND_ON();
 8004f36:	f00d fd91 	bl	8012a5c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8004f3a:	20fa      	movs	r0, #250	; 0xfa
 8004f3c:	0040      	lsls	r0, r0, #1
 8004f3e:	f009 f9d1 	bl	800e2e4 <StartMilliDelay>
		IND_OFF();
 8004f42:	2180      	movs	r1, #128	; 0x80
 8004f44:	2090      	movs	r0, #144	; 0x90
 8004f46:	2200      	movs	r2, #0
 8004f48:	0109      	lsls	r1, r1, #4
 8004f4a:	05c0      	lsls	r0, r0, #23
 8004f4c:	f00d fd86 	bl	8012a5c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004f50:	2064      	movs	r0, #100	; 0x64
 8004f52:	f009 f9c7 	bl	800e2e4 <StartMilliDelay>
		IND_ON();
 8004f56:	2180      	movs	r1, #128	; 0x80
 8004f58:	2090      	movs	r0, #144	; 0x90
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	05c0      	lsls	r0, r0, #23
 8004f5e:	0109      	lsls	r1, r1, #4
 8004f60:	f00d fd7c 	bl	8012a5c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004f64:	2064      	movs	r0, #100	; 0x64
 8004f66:	e7c0      	b.n	8004eea <BOS_Init+0x62>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8004f68:	4c0d      	ldr	r4, [pc, #52]	; (8004fa0 <BOS_Init+0x118>)
 8004f6a:	4d0e      	ldr	r5, [pc, #56]	; (8004fa4 <BOS_Init+0x11c>)
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	42ab      	cmp	r3, r5
 8004f70:	d004      	beq.n	8004f7c <BOS_Init+0xf4>
		if(EE_Format() == HAL_OK){
 8004f72:	f003 f8cf 	bl	8008114 <EE_Format>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d100      	bne.n	8004f7c <BOS_Init+0xf4>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8004f7a:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f7c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <BOS_Init+0x120>)
 8004f82:	4a0a      	ldr	r2, [pc, #40]	; (8004fac <BOS_Init+0x124>)
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	e7fd      	b.n	8004f8a <BOS_Init+0x102>
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	2000110e 	.word	0x2000110e
 8004f94:	20000b0d 	.word	0x20000b0d
 8004f98:	20000b0e 	.word	0x20000b0e
 8004f9c:	20006ab0 	.word	0x20006ab0
 8004fa0:	20007ff0 	.word	0x20007ff0
 8004fa4:	beefdead 	.word	0xbeefdead
 8004fa8:	e000ed00 	.word	0xe000ed00
 8004fac:	05fa0004 	.word	0x05fa0004

08004fb0 <Module_Init>:
void Module_Init(void){
 8004fb0:	b510      	push	{r4, lr}
	HAL_Init();
 8004fb2:	f00c f8af 	bl	8011114 <HAL_Init>
	SystemClock_Config();
 8004fb6:	f006 ff29 	bl	800be0c <SystemClock_Config>
	BOS_Init();
 8004fba:	f7ff ff65 	bl	8004e88 <BOS_Init>
	MX_FREERTOS_Init();
 8004fbe:	f003 fa9b 	bl	80084f8 <MX_FREERTOS_Init>
	osKernelStart();
 8004fc2:	f00a f84d 	bl	800f060 <osKernelStart>
}
 8004fc6:	bd10      	pop	{r4, pc}

08004fc8 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004fc8:	b510      	push	{r4, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004fca:	2101      	movs	r1, #1
char* GetDateString(void){
 8004fcc:	b082      	sub	sp, #8
	char *buffer =malloc(30 * sizeof(int8_t));
 8004fce:	201e      	movs	r0, #30
 8004fd0:	f00f fd88 	bl	8014ae4 <calloc>
 8004fd4:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004fd6:	4909      	ldr	r1, [pc, #36]	; (8004ffc <GetDateString+0x34>)
 8004fd8:	4809      	ldr	r0, [pc, #36]	; (8005000 <GetDateString+0x38>)
 8004fda:	7d0a      	ldrb	r2, [r1, #20]
 8004fdc:	7d8b      	ldrb	r3, [r1, #22]
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	0092      	lsls	r2, r2, #2
 8004fe2:	5812      	ldr	r2, [r2, r0]
 8004fe4:	8b08      	ldrh	r0, [r1, #24]
 8004fe6:	9001      	str	r0, [sp, #4]
 8004fe8:	7d49      	ldrb	r1, [r1, #21]
 8004fea:	0020      	movs	r0, r4
 8004fec:	9100      	str	r1, [sp, #0]
 8004fee:	4905      	ldr	r1, [pc, #20]	; (8005004 <GetDateString+0x3c>)
 8004ff0:	f010 fa3a 	bl	8015468 <sprintf>
	return buffer;
}
 8004ff4:	0020      	movs	r0, r4
 8004ff6:	b002      	add	sp, #8
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	20006ab0 	.word	0x20006ab0
 8005000:	0801b8b4 	.word	0x0801b8b4
 8005004:	0801b808 	.word	0x0801b808

08005008 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8005008:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800500c:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800500e:	7819      	ldrb	r1, [r3, #0]
 8005010:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8005012:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8005014:	9303      	str	r3, [sp, #12]
 8005016:	3b02      	subs	r3, #2
 8005018:	9302      	str	r3, [sp, #8]
 800501a:	9301      	str	r3, [sp, #4]
 800501c:	3303      	adds	r3, #3
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	000b      	movs	r3, r1
 8005022:	f004 fe5d 	bl	8009ce0 <StartScastDMAStream>
}
 8005026:	b005      	add	sp, #20
 8005028:	bd00      	pop	{pc}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	2000110e 	.word	0x2000110e

08005030 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8005030:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8005032:	b530      	push	{r4, r5, lr}
 8005034:	0005      	movs	r5, r0
 8005036:	000c      	movs	r4, r1
 8005038:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 800503a:	2200      	movs	r2, #0
 800503c:	2100      	movs	r1, #0
 800503e:	9304      	str	r3, [sp, #16]
 8005040:	9303      	str	r3, [sp, #12]
 8005042:	9302      	str	r3, [sp, #8]
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	2000      	movs	r0, #0
 800504a:	f7fe fef7 	bl	8003e3c <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800504e:	1e69      	subs	r1, r5, #1
 8005050:	00cb      	lsls	r3, r1, #3
 8005052:	1a5b      	subs	r3, r3, r1
 8005054:	4a11      	ldr	r2, [pc, #68]	; (800509c <Unbridge+0x6c>)
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	589b      	ldr	r3, [r3, r2]
 800505a:	1e61      	subs	r1, r4, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d012      	beq.n	8005086 <Unbridge+0x56>
 8005060:	00cb      	lsls	r3, r1, #3
 8005062:	1a5b      	subs	r3, r3, r1
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	589b      	ldr	r3, [r3, r2]
		SwitchStreamDMAToMsg(port1);
 8005068:	0028      	movs	r0, r5
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800506a:	2b00      	cmp	r3, #0
 800506c:	d104      	bne.n	8005078 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 800506e:	f002 fe61 	bl	8007d34 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8005072:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8005074:	b007      	add	sp, #28
 8005076:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 8005078:	f002 fe5c 	bl	8007d34 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800507c:	0020      	movs	r0, r4
 800507e:	f002 fe59 	bl	8007d34 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8005082:	2000      	movs	r0, #0
 8005084:	e7f6      	b.n	8005074 <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 8005086:	00cb      	lsls	r3, r1, #3
 8005088:	1a5b      	subs	r3, r3, r1
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	589b      	ldr	r3, [r3, r2]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 8005092:	0020      	movs	r0, r4
 8005094:	e7eb      	b.n	800506e <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 8005096:	2068      	movs	r0, #104	; 0x68
 8005098:	e7ec      	b.n	8005074 <Unbridge+0x44>
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	20001a80 	.word	0x20001a80

080050a0 <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	46ce      	mov	lr, r9
 80050a4:	4647      	mov	r7, r8
 80050a6:	b580      	push	{r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 80050a8:	4e26      	ldr	r6, [pc, #152]	; (8005144 <AddSnippet.part.0+0xa4>)
 80050aa:	4d27      	ldr	r5, [pc, #156]	; (8005148 <AddSnippet.part.0+0xa8>)
 80050ac:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 80050ae:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 80050b0:	3b01      	subs	r3, #1
 80050b2:	009c      	lsls	r4, r3, #2
 80050b4:	18e4      	adds	r4, r4, r3
 80050b6:	00a4      	lsls	r4, r4, #2
 80050b8:	192c      	adds	r4, r5, r4
 80050ba:	68e3      	ldr	r3, [r4, #12]
 80050bc:	4699      	mov	r9, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02f      	beq.n	8005122 <AddSnippet.part.0+0x82>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 80050c2:	0018      	movs	r0, r3
 80050c4:	f7fb f828 	bl	8000118 <strlen>
 80050c8:	0007      	movs	r7, r0
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 80050ca:	4640      	mov	r0, r8
 80050cc:	f7fb f824 	bl	8000118 <strlen>
 80050d0:	1839      	adds	r1, r7, r0
 80050d2:	3102      	adds	r1, #2
 80050d4:	4648      	mov	r0, r9
 80050d6:	f00f ffd1 	bl	801507c <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 80050da:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 80050dc:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 80050de:	3a01      	subs	r2, #1
 80050e0:	0093      	lsls	r3, r2, #2
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	18eb      	adds	r3, r5, r3
 80050e8:	68d8      	ldr	r0, [r3, #12]
 80050ea:	1c7a      	adds	r2, r7, #1
 80050ec:	1880      	adds	r0, r0, r2
 80050ee:	4641      	mov	r1, r8
 80050f0:	f010 f9f5 	bl	80154de <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 80050f4:	7832      	ldrb	r2, [r6, #0]
 80050f6:	3a01      	subs	r2, #1
 80050f8:	0093      	lsls	r3, r2, #2
 80050fa:	189b      	adds	r3, r3, r2
 80050fc:	2213      	movs	r2, #19
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	18eb      	adds	r3, r5, r3
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	55da      	strb	r2, [r3, r7]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8005106:	7833      	ldrb	r3, [r6, #0]
 8005108:	3b01      	subs	r3, #1
 800510a:	0098      	lsls	r0, r3, #2
 800510c:	18c0      	adds	r0, r0, r3
 800510e:	0080      	lsls	r0, r0, #2
 8005110:	1828      	adds	r0, r5, r0
 8005112:	68c3      	ldr	r3, [r0, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00e      	beq.n	8005136 <AddSnippet.part.0+0x96>
			
		default:
			break;
	}
	
	return BOS_OK;
 8005118:	2000      	movs	r0, #0
}
 800511a:	bcc0      	pop	{r6, r7}
 800511c:	46b9      	mov	r9, r7
 800511e:	46b0      	mov	r8, r6
 8005120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8005122:	f7fa fff9 	bl	8000118 <strlen>
 8005126:	3001      	adds	r0, #1
 8005128:	f00f fd36 	bl	8014b98 <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 800512c:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 800512e:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8005130:	f010 f9d5 	bl	80154de <strcpy>
 8005134:	e7f0      	b.n	8005118 <AddSnippet.part.0+0x78>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8005136:	2214      	movs	r2, #20
 8005138:	2100      	movs	r1, #0
 800513a:	f00f ff6c 	bl	8015016 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800513e:	200e      	movs	r0, #14
 8005140:	e7eb      	b.n	800511a <AddSnippet.part.0+0x7a>
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	200012b7 	.word	0x200012b7
 8005148:	20006acc 	.word	0x20006acc

0800514c <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 800514c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800514e:	4657      	mov	r7, sl
 8005150:	464e      	mov	r6, r9
 8005152:	46de      	mov	lr, fp
 8005154:	4645      	mov	r5, r8
 8005156:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8005158:	4fcd      	ldr	r7, [pc, #820]	; (8005490 <ParseSnippetCondition+0x344>)
BOS_Status ParseSnippetCondition(char *string){
 800515a:	0004      	movs	r4, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 800515c:	783e      	ldrb	r6, [r7, #0]
BOS_Status ParseSnippetCondition(char *string){
 800515e:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8005160:	2e05      	cmp	r6, #5
 8005162:	d06a      	beq.n	800523a <ParseSnippetCondition+0xee>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8005164:	00b3      	lsls	r3, r6, #2
 8005166:	4dcb      	ldr	r5, [pc, #812]	; (8005494 <ParseSnippetCondition+0x348>)
 8005168:	1998      	adds	r0, r3, r6
 800516a:	0080      	lsls	r0, r0, #2
 800516c:	469a      	mov	sl, r3
 800516e:	182b      	adds	r3, r5, r0
 8005170:	4699      	mov	r9, r3
 8005172:	2300      	movs	r3, #0
 8005174:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8005176:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8005178:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 800517a:	2100      	movs	r1, #0
 800517c:	2204      	movs	r2, #4
 800517e:	1828      	adds	r0, r5, r0
 8005180:	f00f ff49 	bl	8015016 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8005184:	7823      	ldrb	r3, [r4, #0]
 8005186:	2b62      	cmp	r3, #98	; 0x62
 8005188:	d102      	bne.n	8005190 <ParseSnippetCondition+0x44>
 800518a:	78a3      	ldrb	r3, [r4, #2]
 800518c:	2b2e      	cmp	r3, #46	; 0x2e
 800518e:	d057      	beq.n	8005240 <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8005190:	4bc1      	ldr	r3, [pc, #772]	; (8005498 <ParseSnippetCondition+0x34c>)
 8005192:	0021      	movs	r1, r4
 8005194:	4698      	mov	r8, r3
 8005196:	0018      	movs	r0, r3
 8005198:	f010 f9a1 	bl	80154de <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 800519c:	4ebf      	ldr	r6, [pc, #764]	; (800549c <ParseSnippetCondition+0x350>)
 800519e:	4640      	mov	r0, r8
 80051a0:	0031      	movs	r1, r6
 80051a2:	f011 f813 	bl	80161cc <strtok>
		secondPart =strtok( NULL," ");
 80051a6:	0031      	movs	r1, r6
		firstPart =strtok((char* )cInputString," ");
 80051a8:	0004      	movs	r4, r0
		secondPart =strtok( NULL," ");
 80051aa:	2000      	movs	r0, #0
 80051ac:	f011 f80e 	bl	80161cc <strtok>
		thirdPart =strtok( NULL," ");
 80051b0:	0031      	movs	r1, r6
		secondPart =strtok( NULL," ");
 80051b2:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 80051b4:	2000      	movs	r0, #0
 80051b6:	f011 f809 	bl	80161cc <strtok>
 80051ba:	0006      	movs	r6, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 80051bc:	2c00      	cmp	r4, #0
 80051be:	d039      	beq.n	8005234 <ParseSnippetCondition+0xe8>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 80051c0:	0020      	movs	r0, r4
 80051c2:	f7fe ff4d 	bl	8004060 <IsModuleParameter>
 80051c6:	4681      	mov	r9, r0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d12e      	bne.n	800522a <ParseSnippetCondition+0xde>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 80051cc:	4643      	mov	r3, r8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d030      	beq.n	8005234 <ParseSnippetCondition+0xe8>
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	d02e      	beq.n	8005234 <ParseSnippetCondition+0xe8>
				modPar2 =IsModuleParameter(thirdPart);
 80051d6:	0030      	movs	r0, r6
 80051d8:	f7fe ff42 	bl	8004060 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 80051dc:	2800      	cmp	r0, #0
 80051de:	d062      	beq.n	80052a6 <ParseSnippetCondition+0x15a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 80051e0:	2204      	movs	r2, #4
 80051e2:	783e      	ldrb	r6, [r7, #0]
 80051e4:	00b4      	lsls	r4, r6, #2
 80051e6:	19a3      	adds	r3, r4, r6
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80051ec:	464a      	mov	r2, r9
 80051ee:	18eb      	adds	r3, r5, r3
 80051f0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 80051f2:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 80051f4:	4640      	mov	r0, r8
 80051f6:	f7fe ff49 	bl	800408c <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 80051fa:	783a      	ldrb	r2, [r7, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 80051fc:	19a4      	adds	r4, r4, r6
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 80051fe:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8005200:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8005202:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8005204:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8005206:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8005208:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 800520a:	18ed      	adds	r5, r5, r3
 800520c:	786b      	ldrb	r3, [r5, #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d010      	beq.n	8005234 <ParseSnippetCondition+0xe8>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	4698      	mov	r8, r3
				++numOfRecordedSnippets;		// Record a successful Snippet
 8005216:	3201      	adds	r2, #1
 8005218:	703a      	strb	r2, [r7, #0]
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 800521a:	4640      	mov	r0, r8
 800521c:	b00b      	add	sp, #44	; 0x2c
 800521e:	bcf0      	pop	{r4, r5, r6, r7}
 8005220:	46bb      	mov	fp, r7
 8005222:	46b2      	mov	sl, r6
 8005224:	46a9      	mov	r9, r5
 8005226:	46a0      	mov	r8, r4
 8005228:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 800522a:	4643      	mov	r3, r8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1d0      	bne.n	80051d2 <ParseSnippetCondition+0x86>
 8005230:	2e00      	cmp	r6, #0
 8005232:	d070      	beq.n	8005316 <ParseSnippetCondition+0x1ca>
			return BOS_ERR_WrongParam;
 8005234:	2367      	movs	r3, #103	; 0x67
 8005236:	4698      	mov	r8, r3
 8005238:	e7ef      	b.n	800521a <ParseSnippetCondition+0xce>
		return BOS_ERR_SNIP_MEM_FULL;
 800523a:	230e      	movs	r3, #14
 800523c:	4698      	mov	r8, r3
 800523e:	e7ec      	b.n	800521a <ParseSnippetCondition+0xce>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8005240:	7863      	ldrb	r3, [r4, #1]
 8005242:	3b30      	subs	r3, #48	; 0x30
 8005244:	b2db      	uxtb	r3, r3
 8005246:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 800524c:	465b      	mov	r3, fp
 800524e:	2b06      	cmp	r3, #6
 8005250:	d8e3      	bhi.n	800521a <ParseSnippetCondition+0xce>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8005252:	4649      	mov	r1, r9
 8005254:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8005256:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8005258:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 800525a:	1ce3      	adds	r3, r4, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 800525c:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 800525e:	2207      	movs	r2, #7
 8005260:	0018      	movs	r0, r3
 8005262:	498f      	ldr	r1, [pc, #572]	; (80054a0 <ParseSnippetCondition+0x354>)
 8005264:	9307      	str	r3, [sp, #28]
 8005266:	f010 f942 	bl	80154ee <strncmp>
 800526a:	2800      	cmp	r0, #0
 800526c:	d035      	beq.n	80052da <ParseSnippetCondition+0x18e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 800526e:	220e      	movs	r2, #14
 8005270:	498c      	ldr	r1, [pc, #560]	; (80054a4 <ParseSnippetCondition+0x358>)
 8005272:	9807      	ldr	r0, [sp, #28]
 8005274:	f010 f93b 	bl	80154ee <strncmp>
 8005278:	2800      	cmp	r0, #0
 800527a:	d159      	bne.n	8005330 <ParseSnippetCondition+0x1e4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 800527c:	2306      	movs	r3, #6
 800527e:	464a      	mov	r2, r9
 8005280:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8005282:	465b      	mov	r3, fp
 8005284:	00da      	lsls	r2, r3, #3
 8005286:	4b88      	ldr	r3, [pc, #544]	; (80054a8 <ParseSnippetCondition+0x35c>)
 8005288:	445a      	add	r2, fp
 800528a:	189b      	adds	r3, r3, r2
 800528c:	2202      	movs	r2, #2
 800528e:	0011      	movs	r1, r2
 8005290:	7a1b      	ldrb	r3, [r3, #8]
 8005292:	4019      	ands	r1, r3
 8005294:	4688      	mov	r8, r1
 8005296:	421a      	tst	r2, r3
 8005298:	d100      	bne.n	800529c <ParseSnippetCondition+0x150>
 800529a:	e083      	b.n	80053a4 <ParseSnippetCondition+0x258>
				status =BOS_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	4698      	mov	r8, r3
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80052a0:	3601      	adds	r6, #1
 80052a2:	703e      	strb	r6, [r7, #0]
 80052a4:	e7b9      	b.n	800521a <ParseSnippetCondition+0xce>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 80052a6:	783a      	ldrb	r2, [r7, #0]
					float constant =atof(thirdPart);
 80052a8:	0030      	movs	r0, r6
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 80052aa:	0093      	lsls	r3, r2, #2
 80052ac:	189b      	adds	r3, r3, r2
 80052ae:	2203      	movs	r2, #3
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80052b4:	464a      	mov	r2, r9
 80052b6:	18eb      	adds	r3, r5, r3
 80052b8:	70da      	strb	r2, [r3, #3]
					float constant =atof(thirdPart);
 80052ba:	f00f fc01 	bl	8014ac0 <atof>
 80052be:	f7fe f85d 	bl	800337c <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80052c2:	783e      	ldrb	r6, [r7, #0]
					float constant =atof(thirdPart);
 80052c4:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80052c6:	00b4      	lsls	r4, r6, #2
 80052c8:	19a0      	adds	r0, r4, r6
 80052ca:	0080      	lsls	r0, r0, #2
 80052cc:	3006      	adds	r0, #6
 80052ce:	2204      	movs	r2, #4
 80052d0:	1828      	adds	r0, r5, r0
 80052d2:	a909      	add	r1, sp, #36	; 0x24
 80052d4:	f00f fe96 	bl	8015004 <memcpy>
 80052d8:	e78c      	b.n	80051f4 <ParseSnippetCondition+0xa8>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 80052da:	2305      	movs	r3, #5
 80052dc:	4649      	mov	r1, r9
 80052de:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 80052e0:	4659      	mov	r1, fp
 80052e2:	4b71      	ldr	r3, [pc, #452]	; (80054a8 <ParseSnippetCondition+0x35c>)
 80052e4:	00ca      	lsls	r2, r1, #3
 80052e6:	445a      	add	r2, fp
 80052e8:	2101      	movs	r1, #1
 80052ea:	189b      	adds	r3, r3, r2
 80052ec:	2201      	movs	r2, #1
 80052ee:	7a1b      	ldrb	r3, [r3, #8]
 80052f0:	4019      	ands	r1, r3
 80052f2:	4688      	mov	r8, r1
 80052f4:	421a      	tst	r2, r3
 80052f6:	d1d1      	bne.n	800529c <ParseSnippetCondition+0x150>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80052f8:	2301      	movs	r3, #1
 80052fa:	9104      	str	r1, [sp, #16]
 80052fc:	9305      	str	r3, [sp, #20]
 80052fe:	9103      	str	r1, [sp, #12]
 8005300:	9102      	str	r1, [sp, #8]
 8005302:	9101      	str	r1, [sp, #4]
 8005304:	9100      	str	r1, [sp, #0]
 8005306:	2300      	movs	r3, #0
 8005308:	2200      	movs	r2, #0
 800530a:	2101      	movs	r1, #1
 800530c:	4658      	mov	r0, fp
 800530e:	f003 fb2f 	bl	8008970 <SetButtonEvents>
 8005312:	783e      	ldrb	r6, [r7, #0]
 8005314:	e7c4      	b.n	80052a0 <ParseSnippetCondition+0x154>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8005316:	2102      	movs	r1, #2
 8005318:	783a      	ldrb	r2, [r7, #0]
 800531a:	0093      	lsls	r3, r2, #2
 800531c:	189b      	adds	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8005322:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8005324:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8005326:	3201      	adds	r2, #1
				return BOS_OK;
 8005328:	4698      	mov	r8, r3
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800532a:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800532c:	703a      	strb	r2, [r7, #0]
				return BOS_OK;
 800532e:	e774      	b.n	800521a <ParseSnippetCondition+0xce>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8005330:	220c      	movs	r2, #12
 8005332:	495e      	ldr	r1, [pc, #376]	; (80054ac <ParseSnippetCondition+0x360>)
 8005334:	9807      	ldr	r0, [sp, #28]
 8005336:	f010 f8da 	bl	80154ee <strncmp>
 800533a:	2800      	cmp	r0, #0
 800533c:	d113      	bne.n	8005366 <ParseSnippetCondition+0x21a>
				if(!button[port].pressedX1Sec){
 800533e:	465b      	mov	r3, fp
 8005340:	00da      	lsls	r2, r3, #3
 8005342:	4b59      	ldr	r3, [pc, #356]	; (80054a8 <ParseSnippetCondition+0x35c>)
 8005344:	445a      	add	r2, fp
 8005346:	189b      	adds	r3, r3, r2
 8005348:	789a      	ldrb	r2, [r3, #2]
 800534a:	4690      	mov	r8, r2
 800534c:	2a00      	cmp	r2, #0
 800534e:	d038      	beq.n	80053c2 <ParseSnippetCondition+0x276>
				else if(!button[port].pressedX2Sec){
 8005350:	78da      	ldrb	r2, [r3, #3]
 8005352:	4690      	mov	r8, r2
 8005354:	2a00      	cmp	r2, #0
 8005356:	d051      	beq.n	80053fc <ParseSnippetCondition+0x2b0>
				else if(!button[port].pressedX3Sec){
 8005358:	791b      	ldrb	r3, [r3, #4]
 800535a:	4698      	mov	r8, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d07d      	beq.n	800545c <ParseSnippetCondition+0x310>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8005360:	230c      	movs	r3, #12
 8005362:	4698      	mov	r8, r3
 8005364:	e79c      	b.n	80052a0 <ParseSnippetCondition+0x154>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8005366:	220d      	movs	r2, #13
 8005368:	4951      	ldr	r1, [pc, #324]	; (80054b0 <ParseSnippetCondition+0x364>)
 800536a:	9807      	ldr	r0, [sp, #28]
 800536c:	f010 f8bf 	bl	80154ee <strncmp>
 8005370:	2800      	cmp	r0, #0
 8005372:	d195      	bne.n	80052a0 <ParseSnippetCondition+0x154>
				if(!button[port].releasedY1Sec){
 8005374:	465b      	mov	r3, fp
 8005376:	4a4c      	ldr	r2, [pc, #304]	; (80054a8 <ParseSnippetCondition+0x35c>)
 8005378:	00d9      	lsls	r1, r3, #3
 800537a:	18cb      	adds	r3, r1, r3
 800537c:	18d3      	adds	r3, r2, r3
 800537e:	7958      	ldrb	r0, [r3, #5]
 8005380:	4680      	mov	r8, r0
 8005382:	2800      	cmp	r0, #0
 8005384:	d052      	beq.n	800542c <ParseSnippetCondition+0x2e0>
				else if(!button[port].releasedY2Sec){
 8005386:	799b      	ldrb	r3, [r3, #6]
 8005388:	4698      	mov	r8, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d100      	bne.n	8005390 <ParseSnippetCondition+0x244>
 800538e:	e091      	b.n	80054b4 <ParseSnippetCondition+0x368>
				else if(!button[port].releasedY3Sec){
 8005390:	4459      	add	r1, fp
 8005392:	1852      	adds	r2, r2, r1
 8005394:	79d3      	ldrb	r3, [r2, #7]
 8005396:	4698      	mov	r8, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d100      	bne.n	800539e <ParseSnippetCondition+0x252>
 800539c:	e0a9      	b.n	80054f2 <ParseSnippetCondition+0x3a6>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 800539e:	230d      	movs	r3, #13
 80053a0:	4698      	mov	r8, r3
 80053a2:	e77d      	b.n	80052a0 <ParseSnippetCondition+0x154>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80053a4:	2301      	movs	r3, #1
 80053a6:	9104      	str	r1, [sp, #16]
 80053a8:	9305      	str	r3, [sp, #20]
 80053aa:	9103      	str	r1, [sp, #12]
 80053ac:	9102      	str	r1, [sp, #8]
 80053ae:	9101      	str	r1, [sp, #4]
 80053b0:	9100      	str	r1, [sp, #0]
 80053b2:	2300      	movs	r3, #0
 80053b4:	2100      	movs	r1, #0
 80053b6:	4658      	mov	r0, fp
 80053b8:	3a01      	subs	r2, #1
 80053ba:	f003 fad9 	bl	8008970 <SetButtonEvents>
 80053be:	783e      	ldrb	r6, [r7, #0]
 80053c0:	e76e      	b.n	80052a0 <ParseSnippetCondition+0x154>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 80053c2:	2309      	movs	r3, #9
 80053c4:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80053c6:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 80053c8:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80053ca:	300f      	adds	r0, #15
 80053cc:	f00f fb7d 	bl	8014aca <atoi>
 80053d0:	7839      	ldrb	r1, [r7, #0]
 80053d2:	b2c3      	uxtb	r3, r0
 80053d4:	008a      	lsls	r2, r1, #2
 80053d6:	1852      	adds	r2, r2, r1
 80053d8:	0092      	lsls	r2, r2, #2
 80053da:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80053dc:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80053de:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80053e0:	9205      	str	r2, [sp, #20]
 80053e2:	4642      	mov	r2, r8
 80053e4:	9204      	str	r2, [sp, #16]
 80053e6:	9203      	str	r2, [sp, #12]
 80053e8:	9202      	str	r2, [sp, #8]
 80053ea:	9201      	str	r2, [sp, #4]
 80053ec:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 80053ee:	2200      	movs	r2, #0
 80053f0:	2100      	movs	r1, #0
 80053f2:	4658      	mov	r0, fp
 80053f4:	f003 fabc 	bl	8008970 <SetButtonEvents>
					status =BOS_OK;
 80053f8:	783e      	ldrb	r6, [r7, #0]
 80053fa:	e751      	b.n	80052a0 <ParseSnippetCondition+0x154>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 80053fc:	230a      	movs	r3, #10
 80053fe:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8005400:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8005402:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8005404:	300f      	adds	r0, #15
 8005406:	f00f fb60 	bl	8014aca <atoi>
 800540a:	783a      	ldrb	r2, [r7, #0]
 800540c:	b2c0      	uxtb	r0, r0
 800540e:	0093      	lsls	r3, r2, #2
 8005410:	189b      	adds	r3, r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8005416:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8005418:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 800541a:	9305      	str	r3, [sp, #20]
 800541c:	4643      	mov	r3, r8
 800541e:	9000      	str	r0, [sp, #0]
 8005420:	9304      	str	r3, [sp, #16]
 8005422:	9303      	str	r3, [sp, #12]
 8005424:	9302      	str	r3, [sp, #8]
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	2300      	movs	r3, #0
 800542a:	e7e0      	b.n	80053ee <ParseSnippetCondition+0x2a2>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 800542c:	230c      	movs	r3, #12
 800542e:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8005430:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8005432:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8005434:	3010      	adds	r0, #16
 8005436:	f00f fb48 	bl	8014aca <atoi>
 800543a:	783a      	ldrb	r2, [r7, #0]
 800543c:	b2c0      	uxtb	r0, r0
 800543e:	0093      	lsls	r3, r2, #2
 8005440:	189b      	adds	r3, r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8005446:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8005448:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 800544a:	9305      	str	r3, [sp, #20]
 800544c:	4643      	mov	r3, r8
 800544e:	9002      	str	r0, [sp, #8]
 8005450:	9304      	str	r3, [sp, #16]
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	2300      	movs	r3, #0
 800545a:	e7c8      	b.n	80053ee <ParseSnippetCondition+0x2a2>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 800545c:	0033      	movs	r3, r6
 800545e:	220b      	movs	r2, #11
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8005460:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8005462:	4453      	add	r3, sl
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	18eb      	adds	r3, r5, r3
 8005468:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800546a:	300f      	adds	r0, #15
 800546c:	f00f fb2d 	bl	8014aca <atoi>
 8005470:	783a      	ldrb	r2, [r7, #0]
 8005472:	b2c0      	uxtb	r0, r0
 8005474:	0093      	lsls	r3, r2, #2
 8005476:	189b      	adds	r3, r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 800547c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800547e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8005480:	9305      	str	r3, [sp, #20]
 8005482:	2300      	movs	r3, #0
 8005484:	9001      	str	r0, [sp, #4]
 8005486:	9304      	str	r3, [sp, #16]
 8005488:	9303      	str	r3, [sp, #12]
 800548a:	9302      	str	r3, [sp, #8]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	e7ae      	b.n	80053ee <ParseSnippetCondition+0x2a2>
 8005490:	200012b7 	.word	0x200012b7
 8005494:	20006acc 	.word	0x20006acc
 8005498:	2000121c 	.word	0x2000121c
 800549c:	0801b498 	.word	0x0801b498
 80054a0:	0801c060 	.word	0x0801c060
 80054a4:	0801b8d0 	.word	0x0801b8d0
 80054a8:	200015b4 	.word	0x200015b4
 80054ac:	0801b8e0 	.word	0x0801b8e0
 80054b0:	0801b8f0 	.word	0x0801b8f0
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 80054b4:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80054b6:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 80054b8:	4699      	mov	r9, r3
 80054ba:	435e      	muls	r6, r3
 80054bc:	3b07      	subs	r3, #7
 80054be:	19ae      	adds	r6, r5, r6
 80054c0:	70f3      	strb	r3, [r6, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80054c2:	3010      	adds	r0, #16
 80054c4:	f00f fb01 	bl	8014aca <atoi>
 80054c8:	464a      	mov	r2, r9
 80054ca:	783b      	ldrb	r3, [r7, #0]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 80054cc:	2100      	movs	r1, #0
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80054ce:	4353      	muls	r3, r2
 80054d0:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 80054d2:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80054d4:	b2c0      	uxtb	r0, r0
 80054d6:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 80054d8:	000a      	movs	r2, r1
 80054da:	9305      	str	r3, [sp, #20]
 80054dc:	9003      	str	r0, [sp, #12]
 80054de:	000b      	movs	r3, r1
 80054e0:	4658      	mov	r0, fp
 80054e2:	9104      	str	r1, [sp, #16]
 80054e4:	9102      	str	r1, [sp, #8]
 80054e6:	9101      	str	r1, [sp, #4]
 80054e8:	9100      	str	r1, [sp, #0]
 80054ea:	f003 fa41 	bl	8008970 <SetButtonEvents>
					status =BOS_OK;
 80054ee:	783e      	ldrb	r6, [r7, #0]
 80054f0:	e6d6      	b.n	80052a0 <ParseSnippetCondition+0x154>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 80054f2:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80054f4:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 80054f6:	4699      	mov	r9, r3
 80054f8:	435e      	muls	r6, r3
 80054fa:	3b06      	subs	r3, #6
 80054fc:	19ae      	adds	r6, r5, r6
 80054fe:	70f3      	strb	r3, [r6, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8005500:	3010      	adds	r0, #16
 8005502:	f00f fae2 	bl	8014aca <atoi>
 8005506:	464a      	mov	r2, r9
 8005508:	783b      	ldrb	r3, [r7, #0]
 800550a:	b2c0      	uxtb	r0, r0
 800550c:	4353      	muls	r3, r2
 800550e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8005510:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8005512:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8005514:	9305      	str	r3, [sp, #20]
 8005516:	4643      	mov	r3, r8
 8005518:	9303      	str	r3, [sp, #12]
 800551a:	9302      	str	r3, [sp, #8]
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	2300      	movs	r3, #0
 8005522:	9004      	str	r0, [sp, #16]
 8005524:	001a      	movs	r2, r3
 8005526:	0019      	movs	r1, r3
 8005528:	4658      	mov	r0, fp
 800552a:	f003 fa21 	bl	8008970 <SetButtonEvents>
					status =BOS_OK;
 800552e:	783e      	ldrb	r6, [r7, #0]
 8005530:	e6b6      	b.n	80052a0 <ParseSnippetCondition+0x154>
 8005532:	46c0      	nop			; (mov r8, r8)

08005534 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8005534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005536:	46de      	mov	lr, fp
 8005538:	464e      	mov	r6, r9
 800553a:	4657      	mov	r7, sl
 800553c:	4645      	mov	r5, r8
 800553e:	b5e0      	push	{r5, r6, r7, lr}
 8005540:	001e      	movs	r6, r3
	char idString[MaxLengthOfAlias] ={0};
 8005542:	2300      	movs	r3, #0
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8005544:	b08b      	sub	sp, #44	; 0x2c
 8005546:	4683      	mov	fp, r0
 8005548:	468a      	mov	sl, r1
 800554a:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 800554c:	2100      	movs	r1, #0
 800554e:	2205      	movs	r2, #5
 8005550:	a808      	add	r0, sp, #32
 8005552:	9307      	str	r3, [sp, #28]
 8005554:	f00f fd5f 	bl	8015016 <memset>
 8005558:	4bcf      	ldr	r3, [pc, #828]	; (8005898 <CLI_CommandParser+0x364>)
 800555a:	4cd0      	ldr	r4, [pc, #832]	; (800589c <CLI_CommandParser+0x368>)
 800555c:	4699      	mov	r9, r3
	for(int i =0; string[i]; i++){
 800555e:	782b      	ldrb	r3, [r5, #0]
 8005560:	002a      	movs	r2, r5
		string[i] =tolower(string[i]);
 8005562:	2003      	movs	r0, #3
	for(int i =0; string[i]; i++){
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <CLI_CommandParser+0x4a>
		string[i] =tolower(string[i]);
 8005568:	5ce1      	ldrb	r1, [r4, r3]
 800556a:	4001      	ands	r1, r0
 800556c:	2901      	cmp	r1, #1
 800556e:	d101      	bne.n	8005574 <CLI_CommandParser+0x40>
 8005570:	3320      	adds	r3, #32
 8005572:	b2db      	uxtb	r3, r3
 8005574:	7013      	strb	r3, [r2, #0]
	for(int i =0; string[i]; i++){
 8005576:	7853      	ldrb	r3, [r2, #1]
 8005578:	3201      	adds	r2, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f4      	bne.n	8005568 <CLI_CommandParser+0x34>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 800557e:	464b      	mov	r3, r9
 8005580:	781f      	ldrb	r7, [r3, #0]
 8005582:	2f00      	cmp	r7, #0
 8005584:	d060      	beq.n	8005648 <CLI_CommandParser+0x114>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8005586:	2206      	movs	r2, #6
 8005588:	0028      	movs	r0, r5
 800558a:	49c5      	ldr	r1, [pc, #788]	; (80058a0 <CLI_CommandParser+0x36c>)
 800558c:	f00f ffaf 	bl	80154ee <strncmp>
 8005590:	2800      	cmp	r0, #0
 8005592:	d100      	bne.n	8005596 <CLI_CommandParser+0x62>
 8005594:	e0bf      	b.n	8005716 <CLI_CommandParser+0x1e2>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8005596:	2f02      	cmp	r7, #2
 8005598:	d138      	bne.n	800560c <CLI_CommandParser+0xd8>
	switch(code){
 800559a:	0028      	movs	r0, r5
 800559c:	f7ff fd80 	bl	80050a0 <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d000      	beq.n	80055a6 <CLI_CommandParser+0x72>
 80055a4:	e0d3      	b.n	800574e <CLI_CommandParser+0x21a>
				pcOutputString[0] ='\r';
 80055a6:	230d      	movs	r3, #13
 80055a8:	7033      	strb	r3, [r6, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80055aa:	4653      	mov	r3, sl
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d100      	bne.n	80055b2 <CLI_CommandParser+0x7e>
 80055b0:	e0a8      	b.n	8005704 <CLI_CommandParser+0x1d0>
 80055b2:	2300      	movs	r3, #0
 80055b4:	4698      	mov	r8, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80055b6:	0030      	movs	r0, r6
 80055b8:	f7fa fdae 	bl	8000118 <strlen>
 80055bc:	2301      	movs	r3, #1
 80055be:	425b      	negs	r3, r3
 80055c0:	b282      	uxth	r2, r0
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	0031      	movs	r1, r6
 80055c6:	4658      	mov	r0, fp
 80055c8:	3333      	adds	r3, #51	; 0x33
 80055ca:	f009 f83d 	bl	800e648 <writePxMutex>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80055ce:	0030      	movs	r0, r6
 80055d0:	f7fa fda2 	bl	8000118 <strlen>
 80055d4:	2100      	movs	r1, #0
 80055d6:	0002      	movs	r2, r0
 80055d8:	0030      	movs	r0, r6
 80055da:	f00f fd1c 	bl	8015016 <memset>
	} while(xReturned != pdFALSE);
 80055de:	4643      	mov	r3, r8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1bc      	bne.n	800555e <CLI_CommandParser+0x2a>
	memset(idString,0x00,MaxLengthOfAlias);
 80055e4:	2209      	movs	r2, #9
 80055e6:	2100      	movs	r1, #0
 80055e8:	a807      	add	r0, sp, #28
 80055ea:	f00f fd14 	bl	8015016 <memset>
	if(!recordSnippet && enableOutput)
 80055ee:	464b      	mov	r3, r9
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <CLI_CommandParser+0xca>
 80055f6:	4653      	mov	r3, sl
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d000      	beq.n	80055fe <CLI_CommandParser+0xca>
 80055fc:	e0b3      	b.n	8005766 <CLI_CommandParser+0x232>
}
 80055fe:	b00b      	add	sp, #44	; 0x2c
 8005600:	bcf0      	pop	{r4, r5, r6, r7}
 8005602:	46bb      	mov	fp, r7
 8005604:	46b2      	mov	sl, r6
 8005606:	46a9      	mov	r9, r5
 8005608:	46a0      	mov	r8, r4
 800560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			loc =strchr((char* )cInputString,'.');
 800560c:	212e      	movs	r1, #46	; 0x2e
 800560e:	0028      	movs	r0, r5
 8005610:	f00f ff57 	bl	80154c2 <strchr>
 8005614:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005616:	d009      	beq.n	800562c <CLI_CommandParser+0xf8>
 8005618:	1ec3      	subs	r3, r0, #3
 800561a:	781a      	ldrb	r2, [r3, #0]
 800561c:	2a62      	cmp	r2, #98	; 0x62
 800561e:	d129      	bne.n	8005674 <CLI_CommandParser+0x140>
 8005620:	785a      	ldrb	r2, [r3, #1]
 8005622:	2a6f      	cmp	r2, #111	; 0x6f
 8005624:	d126      	bne.n	8005674 <CLI_CommandParser+0x140>
 8005626:	789b      	ldrb	r3, [r3, #2]
 8005628:	2b73      	cmp	r3, #115	; 0x73
 800562a:	d123      	bne.n	8005674 <CLI_CommandParser+0x140>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800562c:	2299      	movs	r2, #153	; 0x99
 800562e:	0031      	movs	r1, r6
 8005630:	0028      	movs	r0, r5
 8005632:	0092      	lsls	r2, r2, #2
 8005634:	f009 fdac 	bl	800f190 <FreeRTOS_CLIProcessCommand>
 8005638:	4680      	mov	r8, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 800563a:	7833      	ldrb	r3, [r6, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0c6      	beq.n	80055ce <CLI_CommandParser+0x9a>
 8005640:	4653      	mov	r3, sl
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0c3      	beq.n	80055ce <CLI_CommandParser+0x9a>
 8005646:	e7b6      	b.n	80055b6 <CLI_CommandParser+0x82>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8005648:	782b      	ldrb	r3, [r5, #0]
 800564a:	2b69      	cmp	r3, #105	; 0x69
 800564c:	d1de      	bne.n	800560c <CLI_CommandParser+0xd8>
 800564e:	786b      	ldrb	r3, [r5, #1]
 8005650:	2b66      	cmp	r3, #102	; 0x66
 8005652:	d1db      	bne.n	800560c <CLI_CommandParser+0xd8>
 8005654:	78ab      	ldrb	r3, [r5, #2]
 8005656:	001f      	movs	r7, r3
 8005658:	3f20      	subs	r7, #32
 800565a:	2b20      	cmp	r3, #32
 800565c:	d1d6      	bne.n	800560c <CLI_CommandParser+0xd8>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 800565e:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8005660:	f7ff fd74 	bl	800514c <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8005664:	2800      	cmp	r0, #0
 8005666:	d16a      	bne.n	800573e <CLI_CommandParser+0x20a>
				recordSnippet = SNIPPET_COMMANDS;
 8005668:	2302      	movs	r3, #2
 800566a:	464a      	mov	r2, r9
 800566c:	7013      	strb	r3, [r2, #0]
				pcOutputString[0] ='\r';
 800566e:	330b      	adds	r3, #11
 8005670:	7033      	strb	r3, [r6, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005672:	e79a      	b.n	80055aa <CLI_CommandParser+0x76>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005674:	787b      	ldrb	r3, [r7, #1]
 8005676:	4a89      	ldr	r2, [pc, #548]	; (800589c <CLI_CommandParser+0x368>)
 8005678:	5cd3      	ldrb	r3, [r2, r3]
 800567a:	075b      	lsls	r3, r3, #29
 800567c:	d4d6      	bmi.n	800562c <CLI_CommandParser+0xf8>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 800567e:	0029      	movs	r1, r5
 8005680:	1b7a      	subs	r2, r7, r5
 8005682:	a807      	add	r0, sp, #28
 8005684:	f00f ff44 	bl	8015510 <strncpy>
				id =GetID(idString);
 8005688:	a807      	add	r0, sp, #28
 800568a:	f7ff fa2b 	bl	8004ae4 <GetID>
				if(id == myID){
 800568e:	4b85      	ldr	r3, [pc, #532]	; (80058a4 <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8005690:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	4298      	cmp	r0, r3
 8005698:	d06f      	beq.n	800577a <CLI_CommandParser+0x246>
				else if(id == BOS_ERR_WrongName){
 800569a:	9b03      	ldr	r3, [sp, #12]
 800569c:	2b64      	cmp	r3, #100	; 0x64
 800569e:	d05c      	beq.n	800575a <CLI_CommandParser+0x226>
				else if(id == BOS_ERR_WrongID){
 80056a0:	9b03      	ldr	r3, [sp, #12]
 80056a2:	2b66      	cmp	r3, #102	; 0x66
 80056a4:	d071      	beq.n	800578a <CLI_CommandParser+0x256>
				else if(id == BOS_BROADCAST){
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	2bff      	cmp	r3, #255	; 0xff
 80056aa:	d100      	bne.n	80056ae <CLI_CommandParser+0x17a>
 80056ac:	e0ad      	b.n	800580a <CLI_CommandParser+0x2d6>
				else if((uint8_t )id == BOS_MULTICAST){
 80056ae:	466b      	mov	r3, sp
 80056b0:	7b1b      	ldrb	r3, [r3, #12]
 80056b2:	9305      	str	r3, [sp, #20]
 80056b4:	2bfe      	cmp	r3, #254	; 0xfe
 80056b6:	d100      	bne.n	80056ba <CLI_CommandParser+0x186>
 80056b8:	e118      	b.n	80058ec <CLI_CommandParser+0x3b8>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 80056ba:	1c7b      	adds	r3, r7, #1
 80056bc:	2206      	movs	r2, #6
 80056be:	0018      	movs	r0, r3
 80056c0:	4979      	ldr	r1, [pc, #484]	; (80058a8 <CLI_CommandParser+0x374>)
 80056c2:	4698      	mov	r8, r3
 80056c4:	f00f ff13 	bl	80154ee <strncmp>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d164      	bne.n	8005796 <CLI_CommandParser+0x262>
						SendMessageToModule(id,CODE_UPDATE,0);
 80056cc:	9b05      	ldr	r3, [sp, #20]
						BOS.response = BOS_RESPONSE_NONE;
 80056ce:	4f77      	ldr	r7, [pc, #476]	; (80058ac <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 80056d0:	4698      	mov	r8, r3
 80056d2:	2200      	movs	r2, #0
 80056d4:	2119      	movs	r1, #25
						BOS.response = BOS_RESPONSE_NONE;
 80056d6:	71b8      	strb	r0, [r7, #6]
						SendMessageToModule(id,CODE_UPDATE,0);
 80056d8:	0018      	movs	r0, r3
 80056da:	f004 fadb 	bl	8009c94 <SendMessageToModule>
						osDelay(100);
 80056de:	2064      	movs	r0, #100	; 0x64
 80056e0:	f009 fcc4 	bl	800f06c <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 80056e4:	4b72      	ldr	r3, [pc, #456]	; (80058b0 <CLI_CommandParser+0x37c>)
 80056e6:	4641      	mov	r1, r8
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	4b6e      	ldr	r3, [pc, #440]	; (80058a4 <CLI_CommandParser+0x370>)
 80056ec:	7818      	ldrb	r0, [r3, #0]
 80056ee:	2300      	movs	r3, #0
 80056f0:	f7fe feba 	bl	8004468 <remoteBootloaderUpdate>
					if(BOS.response == BOS_RESPONSE_ALL){
 80056f4:	79bb      	ldrb	r3, [r7, #6]
 80056f6:	2b60      	cmp	r3, #96	; 0x60
 80056f8:	d100      	bne.n	80056fc <CLI_CommandParser+0x1c8>
 80056fa:	e0b7      	b.n	800586c <CLI_CommandParser+0x338>
 80056fc:	7833      	ldrb	r3, [r6, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d000      	beq.n	8005704 <CLI_CommandParser+0x1d0>
 8005702:	e752      	b.n	80055aa <CLI_CommandParser+0x76>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005704:	0030      	movs	r0, r6
 8005706:	f7fa fd07 	bl	8000118 <strlen>
 800570a:	2100      	movs	r1, #0
 800570c:	0002      	movs	r2, r0
 800570e:	0030      	movs	r0, r6
 8005710:	f00f fc81 	bl	8015016 <memset>
	} while(xReturned != pdFALSE);
 8005714:	e766      	b.n	80055e4 <CLI_CommandParser+0xb0>
			recordSnippet =0;
 8005716:	464b      	mov	r3, r9
 8005718:	7018      	strb	r0, [r3, #0]
			snippets[numOfRecordedSnippets - 1].state = true;
 800571a:	4b66      	ldr	r3, [pc, #408]	; (80058b4 <CLI_CommandParser+0x380>)
 800571c:	781a      	ldrb	r2, [r3, #0]
 800571e:	3a01      	subs	r2, #1
 8005720:	0093      	lsls	r3, r2, #2
 8005722:	189b      	adds	r3, r3, r2
 8005724:	4a64      	ldr	r2, [pc, #400]	; (80058b8 <CLI_CommandParser+0x384>)
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	18d3      	adds	r3, r2, r3
 800572a:	2201      	movs	r2, #1
 800572c:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 800572e:	f006 ff7d 	bl	800c62c <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8005732:	2241      	movs	r2, #65	; 0x41
 8005734:	0030      	movs	r0, r6
 8005736:	4961      	ldr	r1, [pc, #388]	; (80058bc <CLI_CommandParser+0x388>)
 8005738:	f00f fc64 	bl	8015004 <memcpy>
			xReturned = pdFALSE;
 800573c:	e735      	b.n	80055aa <CLI_CommandParser+0x76>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 800573e:	2252      	movs	r2, #82	; 0x52
 8005740:	0030      	movs	r0, r6
 8005742:	495f      	ldr	r1, [pc, #380]	; (80058c0 <CLI_CommandParser+0x38c>)
 8005744:	f00f fc5e 	bl	8015004 <memcpy>
				recordSnippet =0;
 8005748:	464b      	mov	r3, r9
 800574a:	701f      	strb	r7, [r3, #0]
 800574c:	e72d      	b.n	80055aa <CLI_CommandParser+0x76>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 800574e:	2252      	movs	r2, #82	; 0x52
 8005750:	0030      	movs	r0, r6
 8005752:	495b      	ldr	r1, [pc, #364]	; (80058c0 <CLI_CommandParser+0x38c>)
 8005754:	f00f fc56 	bl	8015004 <memcpy>
 8005758:	e727      	b.n	80055aa <CLI_CommandParser+0x76>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 800575a:	2227      	movs	r2, #39	; 0x27
 800575c:	0030      	movs	r0, r6
 800575e:	4959      	ldr	r1, [pc, #356]	; (80058c4 <CLI_CommandParser+0x390>)
 8005760:	f00f fc50 	bl	8015004 <memcpy>
					xReturned = pdFALSE;
 8005764:	e721      	b.n	80055aa <CLI_CommandParser+0x76>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8005766:	2301      	movs	r3, #1
 8005768:	425b      	negs	r3, r3
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	2238      	movs	r2, #56	; 0x38
 800576e:	4658      	mov	r0, fp
 8005770:	4955      	ldr	r1, [pc, #340]	; (80058c8 <CLI_CommandParser+0x394>)
 8005772:	3333      	adds	r3, #51	; 0x33
 8005774:	f008 ff68 	bl	800e648 <writePxMutex>
}
 8005778:	e741      	b.n	80055fe <CLI_CommandParser+0xca>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800577a:	2299      	movs	r2, #153	; 0x99
 800577c:	0031      	movs	r1, r6
 800577e:	1c78      	adds	r0, r7, #1
 8005780:	0092      	lsls	r2, r2, #2
 8005782:	f009 fd05 	bl	800f190 <FreeRTOS_CLIProcessCommand>
 8005786:	4680      	mov	r8, r0
 8005788:	e757      	b.n	800563a <CLI_CommandParser+0x106>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 800578a:	2225      	movs	r2, #37	; 0x25
 800578c:	0030      	movs	r0, r6
 800578e:	494f      	ldr	r1, [pc, #316]	; (80058cc <CLI_CommandParser+0x398>)
 8005790:	f00f fc38 	bl	8015004 <memcpy>
					xReturned = pdFALSE;
 8005794:	e709      	b.n	80055aa <CLI_CommandParser+0x76>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005796:	0028      	movs	r0, r5
 8005798:	f7fa fcbe 	bl	8000118 <strlen>
 800579c:	ab07      	add	r3, sp, #28
 800579e:	9004      	str	r0, [sp, #16]
 80057a0:	0018      	movs	r0, r3
 80057a2:	f7fa fcb9 	bl	8000118 <strlen>
 80057a6:	9a04      	ldr	r2, [sp, #16]
 80057a8:	4641      	mov	r1, r8
 80057aa:	3a01      	subs	r2, #1
 80057ac:	1a12      	subs	r2, r2, r0
 80057ae:	0007      	movs	r7, r0
 80057b0:	4847      	ldr	r0, [pc, #284]	; (80058d0 <CLI_CommandParser+0x39c>)
 80057b2:	f00f fead 	bl	8015510 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 80057b6:	0028      	movs	r0, r5
 80057b8:	f7fa fcae 	bl	8000118 <strlen>
 80057bc:	1e42      	subs	r2, r0, #1
 80057be:	1bd2      	subs	r2, r2, r7
 80057c0:	2117      	movs	r1, #23
 80057c2:	b292      	uxth	r2, r2
 80057c4:	9805      	ldr	r0, [sp, #20]
 80057c6:	f004 fa65 	bl	8009c94 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 80057ca:	0030      	movs	r0, r6
 80057cc:	9a03      	ldr	r2, [sp, #12]
 80057ce:	4941      	ldr	r1, [pc, #260]	; (80058d4 <CLI_CommandParser+0x3a0>)
 80057d0:	f00f fe4a 	bl	8015468 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 80057d4:	7833      	ldrb	r3, [r6, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00d      	beq.n	80057f6 <CLI_CommandParser+0x2c2>
 80057da:	4653      	mov	r3, sl
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <CLI_CommandParser+0x2c2>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 80057e0:	0030      	movs	r0, r6
 80057e2:	f7fa fc99 	bl	8000118 <strlen>
 80057e6:	2301      	movs	r3, #1
 80057e8:	b282      	uxth	r2, r0
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	0031      	movs	r1, r6
 80057ee:	4658      	mov	r0, fp
 80057f0:	3331      	adds	r3, #49	; 0x31
 80057f2:	f008 ff29 	bl	800e648 <writePxMutex>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80057f6:	0030      	movs	r0, r6
 80057f8:	f7fa fc8e 	bl	8000118 <strlen>
 80057fc:	2100      	movs	r1, #0
 80057fe:	0002      	movs	r2, r0
 8005800:	0030      	movs	r0, r6
 8005802:	f00f fc08 	bl	8015016 <memset>
 8005806:	4f29      	ldr	r7, [pc, #164]	; (80058ac <CLI_CommandParser+0x378>)
 8005808:	e774      	b.n	80056f4 <CLI_CommandParser+0x1c0>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800580a:	221a      	movs	r2, #26
 800580c:	2100      	movs	r1, #0
 800580e:	4832      	ldr	r0, [pc, #200]	; (80058d8 <CLI_CommandParser+0x3a4>)
 8005810:	f00f fc01 	bl	8015016 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005814:	0028      	movs	r0, r5
 8005816:	f7fa fc7f 	bl	8000118 <strlen>
 800581a:	ab07      	add	r3, sp, #28
 800581c:	9003      	str	r0, [sp, #12]
 800581e:	0018      	movs	r0, r3
 8005820:	f7fa fc7a 	bl	8000118 <strlen>
 8005824:	4680      	mov	r8, r0
 8005826:	9a03      	ldr	r2, [sp, #12]
 8005828:	3701      	adds	r7, #1
 800582a:	3a01      	subs	r2, #1
 800582c:	0039      	movs	r1, r7
 800582e:	1a12      	subs	r2, r2, r0
 8005830:	4827      	ldr	r0, [pc, #156]	; (80058d0 <CLI_CommandParser+0x39c>)
 8005832:	f00f fe6d 	bl	8015510 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005836:	0028      	movs	r0, r5
 8005838:	f7fa fc6e 	bl	8000118 <strlen>
 800583c:	4643      	mov	r3, r8
 800583e:	1ac3      	subs	r3, r0, r3
 8005840:	b29b      	uxth	r3, r3
 8005842:	2217      	movs	r2, #23
 8005844:	21ff      	movs	r1, #255	; 0xff
 8005846:	9804      	ldr	r0, [sp, #16]
 8005848:	f004 f9de 	bl	8009c08 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800584c:	2299      	movs	r2, #153	; 0x99
 800584e:	0031      	movs	r1, r6
 8005850:	0092      	lsls	r2, r2, #2
 8005852:	0038      	movs	r0, r7
 8005854:	f009 fc9c 	bl	800f190 <FreeRTOS_CLIProcessCommand>
 8005858:	4680      	mov	r8, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 800585a:	0030      	movs	r0, r6
 800585c:	f7fa fc5c 	bl	8000118 <strlen>
 8005860:	221d      	movs	r2, #29
 8005862:	491e      	ldr	r1, [pc, #120]	; (80058dc <CLI_CommandParser+0x3a8>)
 8005864:	1830      	adds	r0, r6, r0
 8005866:	f00f fbcd 	bl	8015004 <memcpy>
 800586a:	e6e6      	b.n	800563a <CLI_CommandParser+0x106>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 800586c:	21fa      	movs	r1, #250	; 0xfa
 800586e:	2001      	movs	r0, #1
 8005870:	0089      	lsls	r1, r1, #2
 8005872:	f00b f831 	bl	80108d8 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8005876:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <CLI_CommandParser+0x3ac>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d100      	bne.n	8005880 <CLI_CommandParser+0x34c>
 800587e:	e73d      	b.n	80056fc <CLI_CommandParser+0x1c8>
							++timedoutMsg;
 8005880:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <CLI_CommandParser+0x3b0>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005882:	0030      	movs	r0, r6
							++timedoutMsg;
 8005884:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005886:	4918      	ldr	r1, [pc, #96]	; (80058e8 <CLI_CommandParser+0x3b4>)
							++timedoutMsg;
 8005888:	3301      	adds	r3, #1
 800588a:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	0032      	movs	r2, r6
 8005890:	f00f fdea 	bl	8015468 <sprintf>
 8005894:	7833      	ldrb	r3, [r6, #0]
 8005896:	e732      	b.n	80056fe <CLI_CommandParser+0x1ca>
 8005898:	200012e4 	.word	0x200012e4
 800589c:	0801e550 	.word	0x0801e550
 80058a0:	0801b954 	.word	0x0801b954
 80058a4:	2000110e 	.word	0x2000110e
 80058a8:	0801ba3c 	.word	0x0801ba3c
 80058ac:	20006ab0 	.word	0x20006ab0
 80058b0:	20000b0f 	.word	0x20000b0f
 80058b4:	200012b7 	.word	0x200012b7
 80058b8:	20006acc 	.word	0x20006acc
 80058bc:	0801b95c 	.word	0x0801b95c
 80058c0:	0801b900 	.word	0x0801b900
 80058c4:	0801b9a0 	.word	0x0801b9a0
 80058c8:	0801ba88 	.word	0x0801ba88
 80058cc:	0801b9c8 	.word	0x0801b9c8
 80058d0:	20000fd0 	.word	0x20000fd0
 80058d4:	0801ba44 	.word	0x0801ba44
 80058d8:	20000d84 	.word	0x20000d84
 80058dc:	0801b9f0 	.word	0x0801b9f0
 80058e0:	200011a8 	.word	0x200011a8
 80058e4:	20001832 	.word	0x20001832
 80058e8:	0801ba68 	.word	0x0801ba68
					group =id >> 8;
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	4a1f      	ldr	r2, [pc, #124]	; (800596c <CLI_CommandParser+0x438>)
 80058f0:	1218      	asrs	r0, r3, #8
 80058f2:	b2c3      	uxtb	r3, r0
 80058f4:	7013      	strb	r3, [r2, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80058f6:	2100      	movs	r1, #0
 80058f8:	221a      	movs	r2, #26
 80058fa:	481d      	ldr	r0, [pc, #116]	; (8005970 <CLI_CommandParser+0x43c>)
					group =id >> 8;
 80058fc:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 80058fe:	f00f fb8a 	bl	8015016 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005902:	0028      	movs	r0, r5
 8005904:	f7fa fc08 	bl	8000118 <strlen>
 8005908:	9005      	str	r0, [sp, #20]
 800590a:	a807      	add	r0, sp, #28
 800590c:	f7fa fc04 	bl	8000118 <strlen>
 8005910:	9a05      	ldr	r2, [sp, #20]
 8005912:	3701      	adds	r7, #1
 8005914:	3a01      	subs	r2, #1
 8005916:	1a12      	subs	r2, r2, r0
 8005918:	0039      	movs	r1, r7
 800591a:	9005      	str	r0, [sp, #20]
 800591c:	4815      	ldr	r0, [pc, #84]	; (8005974 <CLI_CommandParser+0x440>)
 800591e:	f00f fdf7 	bl	8015510 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005922:	0028      	movs	r0, r5
 8005924:	f7fa fbf8 	bl	8000118 <strlen>
 8005928:	9a05      	ldr	r2, [sp, #20]
 800592a:	9903      	ldr	r1, [sp, #12]
 800592c:	1a83      	subs	r3, r0, r2
 800592e:	b29b      	uxth	r3, r3
 8005930:	2217      	movs	r2, #23
 8005932:	9804      	ldr	r0, [sp, #16]
 8005934:	f004 f968 	bl	8009c08 <BroadcastMessage>
					if(InGroup(myID,group))
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <CLI_CommandParser+0x444>)
 800593a:	4a10      	ldr	r2, [pc, #64]	; (800597c <CLI_CommandParser+0x448>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	3b01      	subs	r3, #1
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	5a9b      	ldrh	r3, [r3, r2]
 8005944:	4a09      	ldr	r2, [pc, #36]	; (800596c <CLI_CommandParser+0x438>)
 8005946:	7812      	ldrb	r2, [r2, #0]
 8005948:	4113      	asrs	r3, r2
 800594a:	07db      	lsls	r3, r3, #31
 800594c:	d406      	bmi.n	800595c <CLI_CommandParser+0x428>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 800594e:	0032      	movs	r2, r6
 8005950:	0030      	movs	r0, r6
 8005952:	490b      	ldr	r1, [pc, #44]	; (8005980 <CLI_CommandParser+0x44c>)
 8005954:	ab07      	add	r3, sp, #28
 8005956:	f00f fd87 	bl	8015468 <sprintf>
 800595a:	e66e      	b.n	800563a <CLI_CommandParser+0x106>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800595c:	2299      	movs	r2, #153	; 0x99
 800595e:	0031      	movs	r1, r6
 8005960:	0038      	movs	r0, r7
 8005962:	0092      	lsls	r2, r2, #2
 8005964:	f009 fc14 	bl	800f190 <FreeRTOS_CLIProcessCommand>
 8005968:	4680      	mov	r8, r0
 800596a:	e7f0      	b.n	800594e <CLI_CommandParser+0x41a>
 800596c:	200012b6 	.word	0x200012b6
 8005970:	20000d84 	.word	0x20000d84
 8005974:	20000fd0 	.word	0x20000fd0
 8005978:	2000110e 	.word	0x2000110e
 800597c:	20000f58 	.word	0x20000f58
 8005980:	0801ba10 	.word	0x0801ba10

08005984 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005986:	46de      	mov	lr, fp
 8005988:	4657      	mov	r7, sl
 800598a:	4645      	mov	r5, r8
 800598c:	464e      	mov	r6, r9
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800598e:	2101      	movs	r1, #1
void prvCLITask(void *pvParameters){
 8005990:	b5e0      	push	{r5, r6, r7, lr}
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005992:	4249      	negs	r1, r1
void prvCLITask(void *pvParameters){
 8005994:	b087      	sub	sp, #28
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005996:	2001      	movs	r0, #1
 8005998:	f00a ff9e 	bl	80108d8 <ulTaskNotifyTake>
	cRxedChar ='\0';
 800599c:	ab02      	add	r3, sp, #8
 800599e:	469c      	mov	ip, r3
 80059a0:	270f      	movs	r7, #15
 80059a2:	2300      	movs	r3, #0
 80059a4:	4467      	add	r7, ip
 80059a6:	703b      	strb	r3, [r7, #0]
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80059a8:	f009 fc74 	bl	800f294 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 80059ac:	23e1      	movs	r3, #225	; 0xe1
 80059ae:	4a52      	ldr	r2, [pc, #328]	; (8005af8 <prvCLITask+0x174>)
 80059b0:	4d52      	ldr	r5, [pc, #328]	; (8005afc <prvCLITask+0x178>)
 80059b2:	6892      	ldr	r2, [r2, #8]
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80059b4:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 80059b6:	031b      	lsls	r3, r3, #12
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d00d      	beq.n	80059d8 <prvCLITask+0x54>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80059bc:	2401      	movs	r4, #1
 80059be:	782b      	ldrb	r3, [r5, #0]
			if(port != PcPort)
 80059c0:	429c      	cmp	r4, r3
 80059c2:	d005      	beq.n	80059d0 <prvCLITask+0x4c>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80059c4:	21e1      	movs	r1, #225	; 0xe1
 80059c6:	0020      	movs	r0, r4
 80059c8:	0309      	lsls	r1, r1, #12
 80059ca:	f008 feb7 	bl	800e73c <UpdateBaudrate>
 80059ce:	782b      	ldrb	r3, [r5, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80059d0:	3401      	adds	r4, #1
 80059d2:	b2e4      	uxtb	r4, r4
 80059d4:	2c07      	cmp	r4, #7
 80059d6:	d1f3      	bne.n	80059c0 <prvCLITask+0x3c>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 80059d8:	4b49      	ldr	r3, [pc, #292]	; (8005b00 <prvCLITask+0x17c>)
 80059da:	4c4a      	ldr	r4, [pc, #296]	; (8005b04 <prvCLITask+0x180>)
 80059dc:	881a      	ldrh	r2, [r3, #0]
 80059de:	7829      	ldrb	r1, [r5, #0]
 80059e0:	0053      	lsls	r3, r2, #1
 80059e2:	189b      	adds	r3, r3, r2
 80059e4:	4a48      	ldr	r2, [pc, #288]	; (8005b08 <prvCLITask+0x184>)
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	189b      	adds	r3, r3, r2
 80059ea:	4a48      	ldr	r2, [pc, #288]	; (8005b0c <prvCLITask+0x188>)
 80059ec:	0020      	movs	r0, r4
 80059ee:	7812      	ldrb	r2, [r2, #0]
 80059f0:	9100      	str	r1, [sp, #0]
 80059f2:	4947      	ldr	r1, [pc, #284]	; (8005b10 <prvCLITask+0x18c>)
 80059f4:	f00f fd38 	bl	8015468 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80059f8:	22a4      	movs	r2, #164	; 0xa4
 80059fa:	230a      	movs	r3, #10
 80059fc:	4945      	ldr	r1, [pc, #276]	; (8005b14 <prvCLITask+0x190>)
 80059fe:	0092      	lsls	r2, r2, #2
 8005a00:	7828      	ldrb	r0, [r5, #0]
 8005a02:	f008 fe57 	bl	800e6b4 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005a06:	0020      	movs	r0, r4
 8005a08:	f7fa fb86 	bl	8000118 <strlen>
 8005a0c:	230a      	movs	r3, #10
 8005a0e:	b282      	uxth	r2, r0
 8005a10:	0021      	movs	r1, r4
 8005a12:	7828      	ldrb	r0, [r5, #0]
 8005a14:	f008 fe4e 	bl	800e6b4 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4699      	mov	r9, r3
 8005a1c:	4b3e      	ldr	r3, [pc, #248]	; (8005b18 <prvCLITask+0x194>)
 8005a1e:	4e3f      	ldr	r6, [pc, #252]	; (8005b1c <prvCLITask+0x198>)
 8005a20:	4698      	mov	r8, r3
 8005a22:	4b3f      	ldr	r3, [pc, #252]	; (8005b20 <prvCLITask+0x19c>)
 8005a24:	469b      	mov	fp, r3
 8005a26:	4b3f      	ldr	r3, [pc, #252]	; (8005b24 <prvCLITask+0x1a0>)
 8005a28:	469a      	mov	sl, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005a2a:	4643      	mov	r3, r8
 8005a2c:	7828      	ldrb	r0, [r5, #0]
 8005a2e:	181b      	adds	r3, r3, r0
 8005a30:	3b01      	subs	r3, #1
 8005a32:	781c      	ldrb	r4, [r3, #0]
 8005a34:	2c3f      	cmp	r4, #63	; 0x3f
 8005a36:	d905      	bls.n	8005a44 <prvCLITask+0xc0>
 8005a38:	e015      	b.n	8005a66 <prvCLITask+0xe2>
 8005a3a:	3401      	adds	r4, #1
 8005a3c:	b2a4      	uxth	r4, r4
			taskYIELD();
 8005a3e:	f00b fa1d 	bl	8010e7c <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005a42:	7828      	ldrb	r0, [r5, #0]
			if(UARTRxBuf[PcPort - 1][chr]){
 8005a44:	1e42      	subs	r2, r0, #1
 8005a46:	0193      	lsls	r3, r2, #6
 8005a48:	18f3      	adds	r3, r6, r3
 8005a4a:	5d19      	ldrb	r1, [r3, r4]
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d105      	bne.n	8005a5c <prvCLITask+0xd8>
			if(chr == MSG_RX_BUF_SIZE - 1){
 8005a50:	2c3f      	cmp	r4, #63	; 0x3f
 8005a52:	d1f2      	bne.n	8005a3a <prvCLITask+0xb6>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8005a54:	4643      	mov	r3, r8
 8005a56:	2401      	movs	r4, #1
 8005a58:	5499      	strb	r1, [r3, r2]
 8005a5a:	e7f0      	b.n	8005a3e <prvCLITask+0xba>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 8005a5c:	7039      	strb	r1, [r7, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005a5e:	2100      	movs	r1, #0
 8005a60:	5519      	strb	r1, [r3, r4]
				UARTRxBufIndex[PcPort - 1] =chr;
 8005a62:	4643      	mov	r3, r8
 8005a64:	549c      	strb	r4, [r3, r2]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 8005a66:	230a      	movs	r3, #10
 8005a68:	2201      	movs	r2, #1
 8005a6a:	0039      	movs	r1, r7
 8005a6c:	f008 fe22 	bl	800e6b4 <writePxITMutex>
		if(cRxedChar == '\r'){
 8005a70:	783b      	ldrb	r3, [r7, #0]
 8005a72:	2b0d      	cmp	r3, #13
 8005a74:	d014      	beq.n	8005aa0 <prvCLITask+0x11c>
			if(cRxedChar == '\n'){
 8005a76:	2b0a      	cmp	r3, #10
 8005a78:	d00f      	beq.n	8005a9a <prvCLITask+0x116>
			else if(cRxedChar == '\b'){
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d02b      	beq.n	8005ad6 <prvCLITask+0x152>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005a7e:	001a      	movs	r2, r3
 8005a80:	3a20      	subs	r2, #32
 8005a82:	2a5e      	cmp	r2, #94	; 0x5e
 8005a84:	d809      	bhi.n	8005a9a <prvCLITask+0x116>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005a86:	464a      	mov	r2, r9
 8005a88:	2a31      	cmp	r2, #49	; 0x31
 8005a8a:	dc06      	bgt.n	8005a9a <prvCLITask+0x116>
						cInputString[cInputIndex] =cRxedChar;
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	4652      	mov	r2, sl
 8005a90:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005a92:	464b      	mov	r3, r9
 8005a94:	3301      	adds	r3, #1
 8005a96:	b25b      	sxtb	r3, r3
 8005a98:	4699      	mov	r9, r3
		taskYIELD();
 8005a9a:	f00b f9ef 	bl	8010e7c <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005a9e:	e7c4      	b.n	8005a2a <prvCLITask+0xa6>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005aa0:	3b03      	subs	r3, #3
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	7828      	ldrb	r0, [r5, #0]
 8005aa6:	4920      	ldr	r1, [pc, #128]	; (8005b28 <prvCLITask+0x1a4>)
 8005aa8:	f008 fe04 	bl	800e6b4 <writePxITMutex>
			if(cInputIndex == 0){
 8005aac:	464b      	mov	r3, r9
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d01c      	beq.n	8005aec <prvCLITask+0x168>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005ab2:	9b03      	ldr	r3, [sp, #12]
 8005ab4:	4652      	mov	r2, sl
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	7828      	ldrb	r0, [r5, #0]
 8005aba:	f7ff fd3b 	bl	8005534 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 8005abe:	4651      	mov	r1, sl
 8005ac0:	4658      	mov	r0, fp
 8005ac2:	f00f fd0c 	bl	80154de <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005ac6:	2232      	movs	r2, #50	; 0x32
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4650      	mov	r0, sl
 8005acc:	f00f faa3 	bl	8015016 <memset>
			cInputIndex =0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4699      	mov	r9, r3
 8005ad4:	e7e1      	b.n	8005a9a <prvCLITask+0x116>
				if(cInputIndex > 0){
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0de      	beq.n	8005a9a <prvCLITask+0x116>
					cInputIndex--;
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	4699      	mov	r9, r3
					cInputString[cInputIndex] ='\0';
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4653      	mov	r3, sl
 8005ae8:	5499      	strb	r1, [r3, r2]
 8005aea:	e7d6      	b.n	8005a9a <prvCLITask+0x116>
				strcpy((char* )cInputString,(char* )cLastInputString);
 8005aec:	4659      	mov	r1, fp
 8005aee:	4650      	mov	r0, sl
 8005af0:	f00f fcf5 	bl	80154de <strcpy>
 8005af4:	e7dd      	b.n	8005ab2 <prvCLITask+0x12e>
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	20006ab0 	.word	0x20006ab0
 8005afc:	20000b0f 	.word	0x20000b0f
 8005b00:	20000050 	.word	0x20000050
 8005b04:	200012b8 	.word	0x200012b8
 8005b08:	0801b81c 	.word	0x0801b81c
 8005b0c:	2000110e 	.word	0x2000110e
 8005b10:	0801bac4 	.word	0x0801bac4
 8005b14:	0801baf0 	.word	0x0801baf0
 8005b18:	200014e8 	.word	0x200014e8
 8005b1c:	20001368 	.word	0x20001368
 8005b20:	20001284 	.word	0x20001284
 8005b24:	200011e8 	.word	0x200011e8
 8005b28:	0801d318 	.word	0x0801d318

08005b2c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005b30:	000d      	movs	r5, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005b32:	781a      	ldrb	r2, [r3, #0]
 8005b34:	3a01      	subs	r2, #1
 8005b36:	0093      	lsls	r3, r2, #2
 8005b38:	189b      	adds	r3, r3, r2
 8005b3a:	4a18      	ldr	r2, [pc, #96]	; (8005b9c <ParseSnippetCommand+0x70>)
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	18d3      	adds	r3, r2, r3
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d026      	beq.n	8005b94 <ParseSnippetCommand+0x68>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005b46:	4f16      	ldr	r7, [pc, #88]	; (8005ba0 <ParseSnippetCommand+0x74>)
 8005b48:	683c      	ldr	r4, [r7, #0]
 8005b4a:	2c00      	cmp	r4, #0
 8005b4c:	d014      	beq.n	8005b78 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8005b4e:	7823      	ldrb	r3, [r4, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00e      	beq.n	8005b72 <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005b54:	2113      	movs	r1, #19
 8005b56:	0020      	movs	r0, r4
 8005b58:	f00f fcb3 	bl	80154c2 <strchr>
 8005b5c:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8005b5e:	d00e      	beq.n	8005b7e <ParseSnippetCommand+0x52>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005b60:	1b02      	subs	r2, r0, r4
 8005b62:	0021      	movs	r1, r4
 8005b64:	0028      	movs	r0, r5
 8005b66:	f00f fcd3 	bl	8015510 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005b6a:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	603e      	str	r6, [r7, #0]
}
 8005b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 8005b72:	2000      	movs	r0, #0
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8005b74:	603b      	str	r3, [r7, #0]
		return false;
 8005b76:	e7fb      	b.n	8005b70 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 8005b78:	0004      	movs	r4, r0
 8005b7a:	6038      	str	r0, [r7, #0]
 8005b7c:	e7e7      	b.n	8005b4e <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 8005b7e:	0021      	movs	r1, r4
 8005b80:	0028      	movs	r0, r5
 8005b82:	f00f fcac 	bl	80154de <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005b86:	0028      	movs	r0, r5
 8005b88:	f7fa fac6 	bl	8000118 <strlen>
 8005b8c:	1824      	adds	r4, r4, r0
 8005b8e:	603c      	str	r4, [r7, #0]
	return true;
 8005b90:	2001      	movs	r0, #1
 8005b92:	e7ed      	b.n	8005b70 <ParseSnippetCommand+0x44>
		return false;
 8005b94:	2000      	movs	r0, #0
 8005b96:	e7eb      	b.n	8005b70 <ParseSnippetCommand+0x44>
 8005b98:	200012b7 	.word	0x200012b7
 8005b9c:	20006acc 	.word	0x20006acc
 8005ba0:	200012e0 	.word	0x200012e0

08005ba4 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005ba4:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 8005ba6:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 8005ba8:	1818      	adds	r0, r3, r0
 8005baa:	492e      	ldr	r1, [pc, #184]	; (8005c64 <CheckSnippetCondition+0xc0>)
 8005bac:	0080      	lsls	r0, r0, #2
 8005bae:	5c43      	ldrb	r3, [r0, r1]
bool CheckSnippetCondition(uint8_t index){
 8005bb0:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d020      	beq.n	8005bf8 <CheckSnippetCondition+0x54>
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d11b      	bne.n	8005bf2 <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005bba:	180c      	adds	r4, r1, r0
 8005bbc:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005bbe:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005bc0:	3a01      	subs	r2, #1
 8005bc2:	0053      	lsls	r3, r2, #1
 8005bc4:	189b      	adds	r3, r3, r2
 8005bc6:	4a28      	ldr	r2, [pc, #160]	; (8005c68 <CheckSnippetCondition+0xc4>)
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005bcc:	1841      	adds	r1, r0, r1
 8005bce:	2204      	movs	r2, #4
 8005bd0:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005bd2:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005bd4:	f00f fa16 	bl	8015004 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005bd8:	7863      	ldrb	r3, [r4, #1]
 8005bda:	2b06      	cmp	r3, #6
 8005bdc:	d809      	bhi.n	8005bf2 <CheckSnippetCondition+0x4e>
 8005bde:	4a23      	ldr	r2, [pc, #140]	; (8005c6c <CheckSnippetCondition+0xc8>)
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	58d3      	ldr	r3, [r2, r3]
 8005be4:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 8005be6:	9801      	ldr	r0, [sp, #4]
 8005be8:	1c29      	adds	r1, r5, #0
 8005bea:	f7fa fc8b 	bl	8000504 <__aeabi_fcmpgt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d114      	bne.n	8005c1c <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 8005bf2:	2000      	movs	r0, #0
}
 8005bf4:	b003      	add	sp, #12
 8005bf6:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005bf8:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005bfa:	7882      	ldrb	r2, [r0, #2]
 8005bfc:	78c0      	ldrb	r0, [r0, #3]
 8005bfe:	00d3      	lsls	r3, r2, #3
 8005c00:	189b      	adds	r3, r3, r2
 8005c02:	4a1b      	ldr	r2, [pc, #108]	; (8005c70 <CheckSnippetCondition+0xcc>)
 8005c04:	5c9b      	ldrb	r3, [r3, r2]
 8005c06:	1a18      	subs	r0, r3, r0
 8005c08:	4243      	negs	r3, r0
 8005c0a:	4158      	adcs	r0, r3
 8005c0c:	b2c0      	uxtb	r0, r0
 8005c0e:	e7f1      	b.n	8005bf4 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005c10:	9801      	ldr	r0, [sp, #4]
 8005c12:	1c29      	adds	r1, r5, #0
 8005c14:	f7fa fc5c 	bl	80004d0 <__aeabi_fcmpeq>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d1ea      	bne.n	8005bf2 <CheckSnippetCondition+0x4e>
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	1c28      	adds	r0, r5, #0
 8005c20:	f7fa fc56 	bl	80004d0 <__aeabi_fcmpeq>
 8005c24:	4243      	negs	r3, r0
 8005c26:	4158      	adcs	r0, r3
 8005c28:	e7e4      	b.n	8005bf4 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 8005c2a:	9801      	ldr	r0, [sp, #4]
 8005c2c:	1c29      	adds	r1, r5, #0
 8005c2e:	f7fa fc4f 	bl	80004d0 <__aeabi_fcmpeq>
 8005c32:	1e43      	subs	r3, r0, #1
 8005c34:	4198      	sbcs	r0, r3
 8005c36:	e7dd      	b.n	8005bf4 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 8005c38:	9801      	ldr	r0, [sp, #4]
 8005c3a:	1c29      	adds	r1, r5, #0
 8005c3c:	f7fa fc4e 	bl	80004dc <__aeabi_fcmplt>
 8005c40:	1e43      	subs	r3, r0, #1
 8005c42:	4198      	sbcs	r0, r3
 8005c44:	e7d6      	b.n	8005bf4 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 8005c46:	9801      	ldr	r0, [sp, #4]
 8005c48:	1c29      	adds	r1, r5, #0
 8005c4a:	f7fa fc51 	bl	80004f0 <__aeabi_fcmple>
 8005c4e:	1e43      	subs	r3, r0, #1
 8005c50:	4198      	sbcs	r0, r3
 8005c52:	e7cf      	b.n	8005bf4 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005c54:	9801      	ldr	r0, [sp, #4]
 8005c56:	1c29      	adds	r1, r5, #0
 8005c58:	f7fa fc5e 	bl	8000518 <__aeabi_fcmpge>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d0c8      	beq.n	8005bf2 <CheckSnippetCondition+0x4e>
 8005c60:	e7dc      	b.n	8005c1c <CheckSnippetCondition+0x78>
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	20006acc 	.word	0x20006acc
 8005c68:	20000084 	.word	0x20000084
 8005c6c:	0801bd84 	.word	0x0801bd84
 8005c70:	200015b4 	.word	0x200015b4

08005c74 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8005c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c76:	4646      	mov	r6, r8
 8005c78:	46d6      	mov	lr, sl
 8005c7a:	464f      	mov	r7, r9
 8005c7c:	b5c0      	push	{r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005c7e:	f009 fb09 	bl	800f294 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005c82:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <ExecuteSnippet+0x94>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005c84:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 8005c86:	4698      	mov	r8, r3
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d036      	beq.n	8005cfc <ExecuteSnippet+0x88>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005c8e:	4b1f      	ldr	r3, [pc, #124]	; (8005d0c <ExecuteSnippet+0x98>)
	for(s =0; s < numOfRecordedSnippets; s++){
 8005c90:	2400      	movs	r4, #0
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005c92:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005c94:	4b1e      	ldr	r3, [pc, #120]	; (8005d10 <ExecuteSnippet+0x9c>)
 8005c96:	4d1f      	ldr	r5, [pc, #124]	; (8005d14 <ExecuteSnippet+0xa0>)
 8005c98:	4699      	mov	r9, r3
 8005c9a:	e006      	b.n	8005caa <ExecuteSnippet+0x36>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005c9c:	4643      	mov	r3, r8
 8005c9e:	3401      	adds	r4, #1
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	b2a4      	uxth	r4, r4
 8005ca4:	3514      	adds	r5, #20
 8005ca6:	42a3      	cmp	r3, r4
 8005ca8:	d928      	bls.n	8005cfc <ExecuteSnippet+0x88>
		if(snippets[s].state)								// Check for activated Snippets
 8005caa:	7c2b      	ldrb	r3, [r5, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0f5      	beq.n	8005c9c <ExecuteSnippet+0x28>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005cb0:	b2e0      	uxtb	r0, r4
 8005cb2:	f7ff ff77 	bl	8005ba4 <CheckSnippetCondition>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d0f0      	beq.n	8005c9c <ExecuteSnippet+0x28>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005cba:	2320      	movs	r3, #32
 8005cbc:	4652      	mov	r2, sl
 8005cbe:	4f16      	ldr	r7, [pc, #88]	; (8005d18 <ExecuteSnippet+0xa4>)
 8005cc0:	7193      	strb	r3, [r2, #6]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005cc2:	e00e      	b.n	8005ce2 <ExecuteSnippet+0x6e>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	003a      	movs	r2, r7
 8005cc8:	2100      	movs	r1, #0
 8005cca:	7818      	ldrb	r0, [r3, #0]
 8005ccc:	0033      	movs	r3, r6
 8005cce:	f7ff fc31 	bl	8005534 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005cd2:	0030      	movs	r0, r6
 8005cd4:	f7fa fa20 	bl	8000118 <strlen>
 8005cd8:	2100      	movs	r1, #0
 8005cda:	0002      	movs	r2, r0
 8005cdc:	0030      	movs	r0, r6
 8005cde:	f00f f99a 	bl	8015016 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005ce2:	0039      	movs	r1, r7
 8005ce4:	68e8      	ldr	r0, [r5, #12]
 8005ce6:	f7ff ff21 	bl	8005b2c <ParseSnippetCommand>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d1ea      	bne.n	8005cc4 <ExecuteSnippet+0x50>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005cee:	4643      	mov	r3, r8
 8005cf0:	3401      	adds	r4, #1
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b2a4      	uxth	r4, r4
 8005cf6:	3514      	adds	r5, #20
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	d8d6      	bhi.n	8005caa <ExecuteSnippet+0x36>
			}
		}
	}
	
	return result;
}
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	bce0      	pop	{r5, r6, r7}
 8005d00:	46ba      	mov	sl, r7
 8005d02:	46b1      	mov	r9, r6
 8005d04:	46a8      	mov	r8, r5
 8005d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d08:	200012b7 	.word	0x200012b7
 8005d0c:	20006ab0 	.word	0x20006ab0
 8005d10:	20000b0f 	.word	0x20000b0f
 8005d14:	20006acc 	.word	0x20006acc
 8005d18:	20001250 	.word	0x20001250

08005d1c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	4770      	bx	lr

08005d20 <setBaudrateCommand>:

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005d20:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d22:	b570      	push	{r4, r5, r6, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	0004      	movs	r4, r0
 8005d28:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005d2a:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 8005d2c:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d02f      	beq.n	8005d92 <setBaudrateCommand+0x72>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d32:	466a      	mov	r2, sp
 8005d34:	2101      	movs	r1, #1
 8005d36:	0028      	movs	r0, r5
 8005d38:	f009 fab0 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	56c3      	ldrsb	r3, [r0, r3]
 8005d40:	2b70      	cmp	r3, #112	; 0x70
 8005d42:	d00c      	beq.n	8005d5e <setBaudrateCommand+0x3e>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005d44:	aa01      	add	r2, sp, #4
 8005d46:	2102      	movs	r1, #2
 8005d48:	0028      	movs	r0, r5
 8005d4a:	f009 faa7 	bl	800f29c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005d4e:	f00e fec2 	bl	8014ad6 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005d52:	2213      	movs	r2, #19
 8005d54:	0020      	movs	r0, r4
 8005d56:	4910      	ldr	r1, [pc, #64]	; (8005d98 <setBaudrateCommand+0x78>)
 8005d58:	f00f f954 	bl	8015004 <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005d5c:	e016      	b.n	8005d8c <setBaudrateCommand+0x6c>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005d5e:	3001      	adds	r0, #1
 8005d60:	f00e feb9 	bl	8014ad6 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005d64:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005d66:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005d68:	2102      	movs	r1, #2
 8005d6a:	0028      	movs	r0, r5
 8005d6c:	f009 fa96 	bl	800f29c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005d70:	f00e feb1 	bl	8014ad6 <atol>
 8005d74:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 8005d76:	b2f0      	uxtb	r0, r6
 8005d78:	0029      	movs	r1, r5
 8005d7a:	f008 fcdf 	bl	800e73c <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005d7e:	23ff      	movs	r3, #255	; 0xff
 8005d80:	002a      	movs	r2, r5
 8005d82:	0020      	movs	r0, r4
 8005d84:	4905      	ldr	r1, [pc, #20]	; (8005d9c <setBaudrateCommand+0x7c>)
 8005d86:	4033      	ands	r3, r6
 8005d88:	f00f fb6e 	bl	8015468 <sprintf>
}
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	b002      	add	sp, #8
 8005d90:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8005d92:	b672      	cpsid	i
 8005d94:	e7fe      	b.n	8005d94 <setBaudrateCommand+0x74>
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	0801bdc8 	.word	0x0801bdc8
 8005d9c:	0801bda0 	.word	0x0801bda0

08005da0 <ReadVrefCommand>:
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005da0:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005da2:	b510      	push	{r4, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005dac:	d013      	beq.n	8005dd6 <ReadVrefCommand+0x36>
	
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005dae:	4668      	mov	r0, sp
 8005db0:	a901      	add	r1, sp, #4
 8005db2:	f002 ff1f 	bl	8008bf4 <ReadTempAndVref>
	
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005db6:	4669      	mov	r1, sp
 8005db8:	0020      	movs	r0, r4
 8005dba:	f00f fb90 	bl	80154de <strcpy>
	
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005dbe:	9801      	ldr	r0, [sp, #4]
 8005dc0:	f7fd fa94 	bl	80032ec <__aeabi_f2d>
 8005dc4:	0002      	movs	r2, r0
 8005dc6:	000b      	movs	r3, r1
 8005dc8:	0020      	movs	r0, r4
 8005dca:	4904      	ldr	r1, [pc, #16]	; (8005ddc <ReadVrefCommand+0x3c>)
 8005dcc:	f00f fb4c 	bl	8015468 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	b002      	add	sp, #8
 8005dd4:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005dd6:	b672      	cpsid	i
 8005dd8:	e7fe      	b.n	8005dd8 <ReadVrefCommand+0x38>
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	0801bddc 	.word	0x0801bddc

08005de0 <ReadTempCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005de0:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de2:	b510      	push	{r4, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005dec:	d013      	beq.n	8005e16 <ReadTempCommand+0x36>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005dee:	4668      	mov	r0, sp
 8005df0:	a901      	add	r1, sp, #4
 8005df2:	f002 feff 	bl	8008bf4 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005df6:	4669      	mov	r1, sp
 8005df8:	0020      	movs	r0, r4
 8005dfa:	f00f fb70 	bl	80154de <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005dfe:	9800      	ldr	r0, [sp, #0]
 8005e00:	f7fd fa74 	bl	80032ec <__aeabi_f2d>
 8005e04:	0002      	movs	r2, r0
 8005e06:	000b      	movs	r3, r1
 8005e08:	0020      	movs	r0, r4
 8005e0a:	4904      	ldr	r1, [pc, #16]	; (8005e1c <ReadTempCommand+0x3c>)
 8005e0c:	f00f fb2c 	bl	8015468 <sprintf>
}
 8005e10:	2000      	movs	r0, #0
 8005e12:	b002      	add	sp, #8
 8005e14:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005e16:	b672      	cpsid	i
 8005e18:	e7fe      	b.n	8005e18 <ReadTempCommand+0x38>
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	0801be04 	.word	0x0801be04

08005e20 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005e20:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e24:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005e26:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005e28:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005e2a:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e2c:	0004      	movs	r4, r0
 8005e2e:	0016      	movs	r6, r2
	float ADC_Value_CLI =0;
 8005e30:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d017      	beq.n	8005e66 <ADCReadCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e36:	2101      	movs	r1, #1
 8005e38:	0030      	movs	r0, r6
 8005e3a:	aa01      	add	r2, sp, #4
 8005e3c:	f009 fa2e 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8005e40:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005e42:	2102      	movs	r1, #2
 8005e44:	0030      	movs	r0, r6
 8005e46:	aa02      	add	r2, sp, #8
 8005e48:	f009 fa28 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005e4c:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005e4e:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005e50:	3b32      	subs	r3, #50	; 0x32
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d909      	bls.n	8005e6a <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005e56:	2215      	movs	r2, #21
 8005e58:	0020      	movs	r0, r4
 8005e5a:	491a      	ldr	r1, [pc, #104]	; (8005ec4 <ADCReadCommand+0xa4>)
 8005e5c:	f00f f8d2 	bl	8015004 <memcpy>
}
 8005e60:	2000      	movs	r0, #0
 8005e62:	b005      	add	sp, #20
 8005e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005e66:	b672      	cpsid	i
 8005e68:	e7fe      	b.n	8005e68 <ADCReadCommand+0x48>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005e6a:	0028      	movs	r0, r5
 8005e6c:	f00e fe33 	bl	8014ad6 <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005e70:	4f15      	ldr	r7, [pc, #84]	; (8005ec8 <ADCReadCommand+0xa8>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005e72:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005e74:	0039      	movs	r1, r7
 8005e76:	0030      	movs	r0, r6
 8005e78:	f7fa f944 	bl	8000104 <strcmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d005      	beq.n	8005e8c <ADCReadCommand+0x6c>
 8005e80:	0030      	movs	r0, r6
 8005e82:	4912      	ldr	r1, [pc, #72]	; (8005ecc <ADCReadCommand+0xac>)
 8005e84:	f7fa f93e 	bl	8000104 <strcmp>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d115      	bne.n	8005eb8 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 8005e8c:	0039      	movs	r1, r7
 8005e8e:	0028      	movs	r0, r5
 8005e90:	f003 f872 	bl	8008f78 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005e94:	aa03      	add	r2, sp, #12
 8005e96:	0039      	movs	r1, r7
 8005e98:	0028      	movs	r0, r5
 8005e9a:	f003 f8bb 	bl	8009014 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005e9e:	a903      	add	r1, sp, #12
 8005ea0:	0020      	movs	r0, r4
 8005ea2:	f00f fb1c 	bl	80154de <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005ea6:	9803      	ldr	r0, [sp, #12]
 8005ea8:	f7fa fbac 	bl	8000604 <__aeabi_f2uiz>
 8005eac:	4908      	ldr	r1, [pc, #32]	; (8005ed0 <ADCReadCommand+0xb0>)
 8005eae:	b282      	uxth	r2, r0
 8005eb0:	0020      	movs	r0, r4
 8005eb2:	f00f fad9 	bl	8015468 <sprintf>
 8005eb6:	e7d3      	b.n	8005e60 <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005eb8:	2212      	movs	r2, #18
 8005eba:	0020      	movs	r0, r4
 8005ebc:	4905      	ldr	r1, [pc, #20]	; (8005ed4 <ADCReadCommand+0xb4>)
 8005ebe:	f00f f8a1 	bl	8015004 <memcpy>
 8005ec2:	e7cd      	b.n	8005e60 <ADCReadCommand+0x40>
 8005ec4:	0801be58 	.word	0x0801be58
 8005ec8:	0801be28 	.word	0x0801be28
 8005ecc:	0801be2c 	.word	0x0801be2c
 8005ed0:	0801be34 	.word	0x0801be34
 8005ed4:	0801be44 	.word	0x0801be44

08005ed8 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eda:	4645      	mov	r5, r8
 8005edc:	46de      	mov	lr, fp
 8005ede:	4657      	mov	r7, sl
 8005ee0:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0;
 8005ee2:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ee4:	b5e0      	push	{r5, r6, r7, lr}
 8005ee6:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005ee8:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005eea:	4b5f      	ldr	r3, [pc, #380]	; (8006068 <testportCommand+0x190>)
 8005eec:	ad02      	add	r5, sp, #8
 8005eee:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ef0:	0004      	movs	r4, r0
	char WriteVaule[1] ="H";
 8005ef2:	702b      	strb	r3, [r5, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ef4:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005ef6:	2c00      	cmp	r4, #0
 8005ef8:	d100      	bne.n	8005efc <testportCommand+0x24>
 8005efa:	e072      	b.n	8005fe2 <testportCommand+0x10a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005efc:	2101      	movs	r1, #1
 8005efe:	aa03      	add	r2, sp, #12
 8005f00:	f009 f9cc 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005f04:	4959      	ldr	r1, [pc, #356]	; (800606c <testportCommand+0x194>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005f06:	0006      	movs	r6, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005f08:	f7fa f8fc 	bl	8000104 <strcmp>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d15e      	bne.n	8005fce <testportCommand+0xf6>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005f10:	4e57      	ldr	r6, [pc, #348]	; (8006070 <testportCommand+0x198>)
 8005f12:	4b58      	ldr	r3, [pc, #352]	; (8006074 <testportCommand+0x19c>)
 8005f14:	7832      	ldrb	r2, [r6, #0]
 8005f16:	2701      	movs	r7, #1
 8005f18:	189b      	adds	r3, r3, r2
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	4698      	mov	r8, r3
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005f20:	4b55      	ldr	r3, [pc, #340]	; (8006078 <testportCommand+0x1a0>)
 8005f22:	469b      	mov	fp, r3
 8005f24:	e003      	b.n	8005f2e <testportCommand+0x56>
		for(ports =1; ports <= NumOfPorts; ports++){
 8005f26:	3701      	adds	r7, #1
 8005f28:	2f07      	cmp	r7, #7
 8005f2a:	d048      	beq.n	8005fbe <testportCommand+0xe6>
 8005f2c:	7832      	ldrb	r2, [r6, #0]
 8005f2e:	b2fb      	uxtb	r3, r7
 8005f30:	469a      	mov	sl, r3
			if(PcPort != ports){
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d0f7      	beq.n	8005f26 <testportCommand+0x4e>
				WriteVaule[0] =rand();
 8005f36:	f00f f887 	bl	8015048 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 8005f3a:	2364      	movs	r3, #100	; 0x64
 8005f3c:	2201      	movs	r2, #1
				WriteVaule[0] =rand();
 8005f3e:	7028      	strb	r0, [r5, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005f40:	0029      	movs	r1, r5
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	4699      	mov	r9, r3
 8005f46:	4650      	mov	r0, sl
 8005f48:	3b5a      	subs	r3, #90	; 0x5a
 8005f4a:	f008 fb7d 	bl	800e648 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005f4e:	4650      	mov	r0, sl
 8005f50:	f008 fc06 	bl	800e760 <GetUart>
 8005f54:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 8005f56:	782a      	ldrb	r2, [r5, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005f58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d050      	beq.n	8006002 <testportCommand+0x12a>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005f60:	003a      	movs	r2, r7
 8005f62:	4946      	ldr	r1, [pc, #280]	; (800607c <testportCommand+0x1a4>)
 8005f64:	0020      	movs	r0, r4
 8005f66:	f00f fa7f 	bl	8015468 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005f6a:	0020      	movs	r0, r4
 8005f6c:	f7fa f8d4 	bl	8000118 <strlen>
 8005f70:	464b      	mov	r3, r9
 8005f72:	b282      	uxth	r2, r0
 8005f74:	0021      	movs	r1, r4
 8005f76:	7830      	ldrb	r0, [r6, #0]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	230a      	movs	r3, #10
 8005f7c:	f008 fb64 	bl	800e648 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005f80:	2254      	movs	r2, #84	; 0x54
 8005f82:	493f      	ldr	r1, [pc, #252]	; (8006080 <testportCommand+0x1a8>)
 8005f84:	0020      	movs	r0, r4
 8005f86:	f00f f83d 	bl	8015004 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005f8a:	2364      	movs	r3, #100	; 0x64
 8005f8c:	7830      	ldrb	r0, [r6, #0]
 8005f8e:	2253      	movs	r2, #83	; 0x53
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	0021      	movs	r1, r4
 8005f94:	3b5a      	subs	r3, #90	; 0x5a
 8005f96:	f008 fb57 	bl	800e648 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	469c      	mov	ip, r3
 8005f9e:	44e0      	add	r8, ip
 8005fa0:	e002      	b.n	8005fa8 <testportCommand+0xd0>
					Delay_ms(1);
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	f00b f8d4 	bl	8011150 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005fa8:	4642      	mov	r2, r8
 8005faa:	7833      	ldrb	r3, [r6, #0]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	019b      	lsls	r3, r3, #6
 8005fb0:	445b      	add	r3, fp
 8005fb2:	5c9b      	ldrb	r3, [r3, r2]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0f4      	beq.n	8005fa2 <testportCommand+0xca>
		for(ports =1; ports <= NumOfPorts; ports++){
 8005fb8:	3701      	adds	r7, #1
 8005fba:	2f07      	cmp	r7, #7
 8005fbc:	d1b6      	bne.n	8005f2c <testportCommand+0x54>
}
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	b005      	add	sp, #20
 8005fc2:	bcf0      	pop	{r4, r5, r6, r7}
 8005fc4:	46bb      	mov	fp, r7
 8005fc6:	46b2      	mov	sl, r6
 8005fc8:	46a9      	mov	r9, r5
 8005fca:	46a0      	mov	r8, r4
 8005fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(pcParameterString1[0] == 'p'){
 8005fce:	2300      	movs	r3, #0
 8005fd0:	56f3      	ldrsb	r3, [r6, r3]
 8005fd2:	2b70      	cmp	r3, #112	; 0x70
 8005fd4:	d007      	beq.n	8005fe6 <testportCommand+0x10e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005fd6:	220f      	movs	r2, #15
 8005fd8:	0020      	movs	r0, r4
 8005fda:	492a      	ldr	r1, [pc, #168]	; (8006084 <testportCommand+0x1ac>)
 8005fdc:	f00f f812 	bl	8015004 <memcpy>
 8005fe0:	e7ed      	b.n	8005fbe <testportCommand+0xe6>
	configASSERT(pcWriteBuffer);
 8005fe2:	b672      	cpsid	i
 8005fe4:	e7fe      	b.n	8005fe4 <testportCommand+0x10c>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005fe6:	1c70      	adds	r0, r6, #1
 8005fe8:	f00e fd75 	bl	8014ad6 <atol>
 8005fec:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005fee:	1e7b      	subs	r3, r7, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005ff0:	0006      	movs	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d916      	bls.n	8006024 <testportCommand+0x14c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005ff6:	221b      	movs	r2, #27
 8005ff8:	0020      	movs	r0, r4
 8005ffa:	4923      	ldr	r1, [pc, #140]	; (8006088 <testportCommand+0x1b0>)
 8005ffc:	f00f f802 	bl	8015004 <memcpy>
 8006000:	e7dd      	b.n	8005fbe <testportCommand+0xe6>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8006002:	003a      	movs	r2, r7
 8006004:	4921      	ldr	r1, [pc, #132]	; (800608c <testportCommand+0x1b4>)
 8006006:	0020      	movs	r0, r4
 8006008:	f00f fa2e 	bl	8015468 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800600c:	0020      	movs	r0, r4
 800600e:	f7fa f883 	bl	8000118 <strlen>
 8006012:	464b      	mov	r3, r9
 8006014:	b282      	uxth	r2, r0
 8006016:	0021      	movs	r1, r4
 8006018:	7830      	ldrb	r0, [r6, #0]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	3b5a      	subs	r3, #90	; 0x5a
 800601e:	f008 fb13 	bl	800e648 <writePxMutex>
 8006022:	e7ad      	b.n	8005f80 <testportCommand+0xa8>
				WriteVaule[0] =rand();
 8006024:	f00f f810 	bl	8015048 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8006028:	2364      	movs	r3, #100	; 0x64
 800602a:	2201      	movs	r2, #1
				WriteVaule[0] =rand();
 800602c:	7028      	strb	r0, [r5, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 800602e:	0029      	movs	r1, r5
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	0038      	movs	r0, r7
 8006034:	3b32      	subs	r3, #50	; 0x32
 8006036:	f008 fb07 	bl	800e648 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 800603a:	0038      	movs	r0, r7
 800603c:	f008 fb90 	bl	800e760 <GetUart>
 8006040:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8006042:	782a      	ldrb	r2, [r5, #0]
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8006044:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 8006046:	b2db      	uxtb	r3, r3
 8006048:	429a      	cmp	r2, r3
 800604a:	d006      	beq.n	800605a <testportCommand+0x182>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 800604c:	22ff      	movs	r2, #255	; 0xff
 800604e:	0020      	movs	r0, r4
 8006050:	490a      	ldr	r1, [pc, #40]	; (800607c <testportCommand+0x1a4>)
 8006052:	4032      	ands	r2, r6
 8006054:	f00f fa08 	bl	8015468 <sprintf>
 8006058:	e7b1      	b.n	8005fbe <testportCommand+0xe6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 800605a:	22ff      	movs	r2, #255	; 0xff
 800605c:	0020      	movs	r0, r4
 800605e:	490b      	ldr	r1, [pc, #44]	; (800608c <testportCommand+0x1b4>)
 8006060:	4032      	ands	r2, r6
 8006062:	f00f fa01 	bl	8015468 <sprintf>
 8006066:	e7aa      	b.n	8005fbe <testportCommand+0xe6>
 8006068:	0801bf20 	.word	0x0801bf20
 800606c:	0801b5ac 	.word	0x0801b5ac
 8006070:	20000b0f 	.word	0x20000b0f
 8006074:	200014e8 	.word	0x200014e8
 8006078:	20001368 	.word	0x20001368
 800607c:	0801be8c 	.word	0x0801be8c
 8006080:	0801bea0 	.word	0x0801bea0
 8006084:	0801bf10 	.word	0x0801bf10
 8006088:	0801bef4 	.word	0x0801bef4
 800608c:	0801be70 	.word	0x0801be70

08006090 <unbridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006090:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006092:	b570      	push	{r4, r5, r6, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	0004      	movs	r4, r0
 8006098:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800609e:	2800      	cmp	r0, #0
 80060a0:	d019      	beq.n	80060d6 <unbridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060a2:	466a      	mov	r2, sp
 80060a4:	2101      	movs	r1, #1
 80060a6:	0028      	movs	r0, r5
 80060a8:	f009 f8f8 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80060ac:	2300      	movs	r3, #0
 80060ae:	56c3      	ldrsb	r3, [r0, r3]
 80060b0:	2b70      	cmp	r3, #112	; 0x70
 80060b2:	d016      	beq.n	80060e2 <unbridgeCommand+0x52>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80060b4:	2102      	movs	r1, #2
 80060b6:	0028      	movs	r0, r5
 80060b8:	aa01      	add	r2, sp, #4
 80060ba:	f009 f8ef 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80060be:	2300      	movs	r3, #0
 80060c0:	56c3      	ldrsb	r3, [r0, r3]
 80060c2:	2b70      	cmp	r3, #112	; 0x70
 80060c4:	d009      	beq.n	80060da <unbridgeCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80060c6:	220f      	movs	r2, #15
 80060c8:	0020      	movs	r0, r4
 80060ca:	491a      	ldr	r1, [pc, #104]	; (8006134 <unbridgeCommand+0xa4>)
 80060cc:	f00e ff9a 	bl	8015004 <memcpy>
}
 80060d0:	2000      	movs	r0, #0
 80060d2:	b002      	add	sp, #8
 80060d4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80060d6:	b672      	cpsid	i
 80060d8:	e7fe      	b.n	80060d8 <unbridgeCommand+0x48>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80060da:	3001      	adds	r0, #1
 80060dc:	f00e fcfb 	bl	8014ad6 <atol>
	else if(result == BOS_ERR_WrongParam)
 80060e0:	e7f1      	b.n	80060c6 <unbridgeCommand+0x36>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80060e2:	3001      	adds	r0, #1
 80060e4:	f00e fcf7 	bl	8014ad6 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80060e8:	2102      	movs	r1, #2
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80060ea:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80060ec:	aa01      	add	r2, sp, #4
 80060ee:	0028      	movs	r0, r5
 80060f0:	f009 f8d4 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80060f4:	2300      	movs	r3, #0
 80060f6:	56c3      	ldrsb	r3, [r0, r3]
 80060f8:	2b70      	cmp	r3, #112	; 0x70
 80060fa:	d1e4      	bne.n	80060c6 <unbridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80060fc:	3001      	adds	r0, #1
 80060fe:	f00e fcea 	bl	8014ad6 <atol>
 8006102:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 8006104:	b2c1      	uxtb	r1, r0
 8006106:	b2f0      	uxtb	r0, r6
 8006108:	f7fe ff92 	bl	8005030 <Unbridge>
	if(result == BOS_OK)
 800610c:	2800      	cmp	r0, #0
 800610e:	d108      	bne.n	8006122 <unbridgeCommand+0x92>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8006110:	22ff      	movs	r2, #255	; 0xff
 8006112:	002b      	movs	r3, r5
 8006114:	0020      	movs	r0, r4
 8006116:	4013      	ands	r3, r2
 8006118:	4907      	ldr	r1, [pc, #28]	; (8006138 <unbridgeCommand+0xa8>)
 800611a:	4032      	ands	r2, r6
 800611c:	f00f f9a4 	bl	8015468 <sprintf>
 8006120:	e7d6      	b.n	80060d0 <unbridgeCommand+0x40>
	else if(result == BOS_ERR_WrongParam)
 8006122:	2867      	cmp	r0, #103	; 0x67
 8006124:	d0cf      	beq.n	80060c6 <unbridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8006126:	2219      	movs	r2, #25
 8006128:	0020      	movs	r0, r4
 800612a:	4904      	ldr	r1, [pc, #16]	; (800613c <unbridgeCommand+0xac>)
 800612c:	f00e ff6a 	bl	8015004 <memcpy>
	return pdFALSE;
 8006130:	e7ce      	b.n	80060d0 <unbridgeCommand+0x40>
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	0801bf10 	.word	0x0801bf10
 8006138:	0801bf24 	.word	0x0801bf24
 800613c:	0801bf44 	.word	0x0801bf44

08006140 <bridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006140:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006142:	b570      	push	{r4, r5, r6, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	0004      	movs	r4, r0
 8006148:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800614e:	2800      	cmp	r0, #0
 8006150:	d019      	beq.n	8006186 <bridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006152:	466a      	mov	r2, sp
 8006154:	2101      	movs	r1, #1
 8006156:	0028      	movs	r0, r5
 8006158:	f009 f8a0 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800615c:	2300      	movs	r3, #0
 800615e:	56c3      	ldrsb	r3, [r0, r3]
 8006160:	2b70      	cmp	r3, #112	; 0x70
 8006162:	d016      	beq.n	8006192 <bridgeCommand+0x52>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006164:	2102      	movs	r1, #2
 8006166:	0028      	movs	r0, r5
 8006168:	aa01      	add	r2, sp, #4
 800616a:	f009 f897 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800616e:	2300      	movs	r3, #0
 8006170:	56c3      	ldrsb	r3, [r0, r3]
 8006172:	2b70      	cmp	r3, #112	; 0x70
 8006174:	d009      	beq.n	800618a <bridgeCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8006176:	220f      	movs	r2, #15
 8006178:	0020      	movs	r0, r4
 800617a:	491a      	ldr	r1, [pc, #104]	; (80061e4 <bridgeCommand+0xa4>)
 800617c:	f00e ff42 	bl	8015004 <memcpy>
}
 8006180:	2000      	movs	r0, #0
 8006182:	b002      	add	sp, #8
 8006184:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8006186:	b672      	cpsid	i
 8006188:	e7fe      	b.n	8006188 <bridgeCommand+0x48>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 800618a:	3001      	adds	r0, #1
 800618c:	f00e fca3 	bl	8014ad6 <atol>
	else if(result == BOS_ERR_WrongParam)
 8006190:	e7f1      	b.n	8006176 <bridgeCommand+0x36>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006192:	3001      	adds	r0, #1
 8006194:	f00e fc9f 	bl	8014ad6 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006198:	2102      	movs	r1, #2
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800619a:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800619c:	aa01      	add	r2, sp, #4
 800619e:	0028      	movs	r0, r5
 80061a0:	f009 f87c 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80061a4:	2300      	movs	r3, #0
 80061a6:	56c3      	ldrsb	r3, [r0, r3]
 80061a8:	2b70      	cmp	r3, #112	; 0x70
 80061aa:	d1e4      	bne.n	8006176 <bridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80061ac:	3001      	adds	r0, #1
 80061ae:	f00e fc92 	bl	8014ad6 <atol>
 80061b2:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 80061b4:	b2c1      	uxtb	r1, r0
 80061b6:	b2f0      	uxtb	r0, r6
 80061b8:	f7fe ff26 	bl	8005008 <Bridge>
	if(result == BOS_OK)
 80061bc:	2800      	cmp	r0, #0
 80061be:	d108      	bne.n	80061d2 <bridgeCommand+0x92>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80061c0:	22ff      	movs	r2, #255	; 0xff
 80061c2:	002b      	movs	r3, r5
 80061c4:	0020      	movs	r0, r4
 80061c6:	4013      	ands	r3, r2
 80061c8:	4907      	ldr	r1, [pc, #28]	; (80061e8 <bridgeCommand+0xa8>)
 80061ca:	4032      	ands	r2, r6
 80061cc:	f00f f94c 	bl	8015468 <sprintf>
 80061d0:	e7d6      	b.n	8006180 <bridgeCommand+0x40>
	else if(result == BOS_ERR_WrongParam)
 80061d2:	2867      	cmp	r0, #103	; 0x67
 80061d4:	d0cf      	beq.n	8006176 <bridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80061d6:	2217      	movs	r2, #23
 80061d8:	0020      	movs	r0, r4
 80061da:	4904      	ldr	r1, [pc, #16]	; (80061ec <bridgeCommand+0xac>)
 80061dc:	f00e ff12 	bl	8015004 <memcpy>
	return pdFALSE;
 80061e0:	e7ce      	b.n	8006180 <bridgeCommand+0x40>
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	0801bf10 	.word	0x0801bf10
 80061e8:	0801bf60 	.word	0x0801bf60
 80061ec:	0801bf84 	.word	0x0801bf84

080061f0 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f2:	464f      	mov	r7, r9
 80061f4:	4646      	mov	r6, r8
 80061f6:	46d6      	mov	lr, sl
 80061f8:	b5c0      	push	{r6, r7, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 80061fa:	2700      	movs	r7, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061fc:	b082      	sub	sp, #8
 80061fe:	0006      	movs	r6, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006200:	9701      	str	r7, [sp, #4]
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006202:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006204:	2e00      	cmp	r6, #0
 8006206:	d04f      	beq.n	80062a8 <delSnipCommand+0xb8>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006208:	2101      	movs	r1, #1
 800620a:	aa01      	add	r2, sp, #4
 800620c:	f009 f846 	bl	800f29c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8006210:	f00e fc5b 	bl	8014aca <atoi>
 8006214:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 8006216:	2d00      	cmp	r5, #0
 8006218:	d10b      	bne.n	8006232 <delSnipCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800621a:	2223      	movs	r2, #35	; 0x23
 800621c:	0030      	movs	r0, r6
 800621e:	4929      	ldr	r1, [pc, #164]	; (80062c4 <delSnipCommand+0xd4>)
 8006220:	f00e fef0 	bl	8015004 <memcpy>
}
 8006224:	2000      	movs	r0, #0
 8006226:	b002      	add	sp, #8
 8006228:	bce0      	pop	{r5, r6, r7}
 800622a:	46ba      	mov	sl, r7
 800622c:	46b1      	mov	r9, r6
 800622e:	46a8      	mov	r8, r5
 8006230:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(!index || index > numOfRecordedSnippets)
 8006232:	4b25      	ldr	r3, [pc, #148]	; (80062c8 <delSnipCommand+0xd8>)
 8006234:	4698      	mov	r8, r3
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	42ab      	cmp	r3, r5
 800623a:	d3ee      	bcc.n	800621a <delSnipCommand+0x2a>
		snippets[index - 1].cond.conditionType =0;
 800623c:	24ff      	movs	r4, #255	; 0xff
 800623e:	4004      	ands	r4, r0
 8006240:	1e62      	subs	r2, r4, #1
 8006242:	0093      	lsls	r3, r2, #2
 8006244:	189b      	adds	r3, r3, r2
 8006246:	4a21      	ldr	r2, [pc, #132]	; (80062cc <delSnipCommand+0xdc>)
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4691      	mov	r9, r2
 800624c:	46a2      	mov	sl, r4
 800624e:	189c      	adds	r4, r3, r2
		memset(snippets[index - 1].cond.buffer1,0,4);
 8006250:	3302      	adds	r3, #2
 8006252:	444b      	add	r3, r9
 8006254:	0018      	movs	r0, r3
 8006256:	2204      	movs	r2, #4
 8006258:	2100      	movs	r1, #0
		snippets[index - 1].cond.conditionType =0;
 800625a:	8027      	strh	r7, [r4, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 800625c:	f00e fedb 	bl	8015016 <memset>
		snippets[index - 1].state = false;
 8006260:	2300      	movs	r3, #0
		free(snippets[index - 1].cmd);
 8006262:	68e0      	ldr	r0, [r4, #12]
		snippets[index - 1].state = false;
 8006264:	7423      	strb	r3, [r4, #16]
		free(snippets[index - 1].cmd);
 8006266:	f00e fca1 	bl	8014bac <free>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 800626a:	4643      	mov	r3, r8
		snippets[index - 1].cmd = NULL;
 800626c:	60e7      	str	r7, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 800626e:	781f      	ldrb	r7, [r3, #0]
 8006270:	42bd      	cmp	r5, r7
 8006272:	d21b      	bcs.n	80062ac <delSnipCommand+0xbc>
 8006274:	4653      	mov	r3, sl
 8006276:	009c      	lsls	r4, r3, #2
 8006278:	4454      	add	r4, sl
 800627a:	00a4      	lsls	r4, r4, #2
 800627c:	444c      	add	r4, r9
 800627e:	e004      	b.n	800628a <delSnipCommand+0x9a>
 8006280:	3501      	adds	r5, #1
 8006282:	b2ed      	uxtb	r5, r5
 8006284:	3414      	adds	r4, #20
 8006286:	42bd      	cmp	r5, r7
 8006288:	d010      	beq.n	80062ac <delSnipCommand+0xbc>
			if(snippets[s].cond.conditionType){
 800628a:	7823      	ldrb	r3, [r4, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f7      	beq.n	8006280 <delSnipCommand+0x90>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8006290:	0020      	movs	r0, r4
 8006292:	0021      	movs	r1, r4
 8006294:	2214      	movs	r2, #20
 8006296:	3814      	subs	r0, #20
 8006298:	f00e feb4 	bl	8015004 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 800629c:	2214      	movs	r2, #20
 800629e:	2100      	movs	r1, #0
 80062a0:	0020      	movs	r0, r4
 80062a2:	f00e feb8 	bl	8015016 <memset>
 80062a6:	e7eb      	b.n	8006280 <delSnipCommand+0x90>
	configASSERT(pcWriteBuffer);
 80062a8:	b672      	cpsid	i
 80062aa:	e7fe      	b.n	80062aa <delSnipCommand+0xba>
		--numOfRecordedSnippets;
 80062ac:	4643      	mov	r3, r8
 80062ae:	3f01      	subs	r7, #1
 80062b0:	701f      	strb	r7, [r3, #0]
		SaveToRO();
 80062b2:	f006 f9bb 	bl	800c62c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 80062b6:	2236      	movs	r2, #54	; 0x36
 80062b8:	0030      	movs	r0, r6
 80062ba:	4905      	ldr	r1, [pc, #20]	; (80062d0 <delSnipCommand+0xe0>)
 80062bc:	f00e fea2 	bl	8015004 <memcpy>
 80062c0:	e7b0      	b.n	8006224 <delSnipCommand+0x34>
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	0801bfd4 	.word	0x0801bfd4
 80062c8:	200012b7 	.word	0x200012b7
 80062cc:	20006acc 	.word	0x20006acc
 80062d0:	0801bf9c 	.word	0x0801bf9c

080062d4 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d6:	4645      	mov	r5, r8
 80062d8:	46de      	mov	lr, fp
 80062da:	4657      	mov	r7, sl
 80062dc:	464e      	mov	r6, r9
 80062de:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 80062e0:	4b6d      	ldr	r3, [pc, #436]	; (8006498 <snipCommand+0x1c4>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062e2:	b08d      	sub	sp, #52	; 0x34
	char status[2][7] ={"Paused", "Active"};
 80062e4:	aa08      	add	r2, sp, #32
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062e6:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 80062e8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80062ea:	c223      	stmia	r2!, {r0, r1, r5}
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 80062f0:	2c00      	cmp	r4, #0
 80062f2:	d100      	bne.n	80062f6 <snipCommand+0x22>
 80062f4:	e0c5      	b.n	8006482 <snipCommand+0x1ae>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 80062f6:	4b69      	ldr	r3, [pc, #420]	; (800649c <snipCommand+0x1c8>)
 80062f8:	2237      	movs	r2, #55	; 0x37
 80062fa:	7818      	ldrb	r0, [r3, #0]
 80062fc:	2301      	movs	r3, #1
 80062fe:	425b      	negs	r3, r3
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	4967      	ldr	r1, [pc, #412]	; (80064a0 <snipCommand+0x1cc>)
 8006304:	3333      	adds	r3, #51	; 0x33
 8006306:	f008 f99f 	bl	800e648 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800630a:	4b66      	ldr	r3, [pc, #408]	; (80064a4 <snipCommand+0x1d0>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d047      	beq.n	80063a2 <snipCommand+0xce>
 8006312:	2300      	movs	r3, #0
 8006314:	469b      	mov	fp, r3
 8006316:	4b64      	ldr	r3, [pc, #400]	; (80064a8 <snipCommand+0x1d4>)
 8006318:	4d64      	ldr	r5, [pc, #400]	; (80064ac <snipCommand+0x1d8>)
 800631a:	469a      	mov	sl, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 800631c:	4b64      	ldr	r3, [pc, #400]	; (80064b0 <snipCommand+0x1dc>)
 800631e:	4699      	mov	r9, r3
 8006320:	465e      	mov	r6, fp
 8006322:	1c73      	adds	r3, r6, #1
 8006324:	b2db      	uxtb	r3, r3
 8006326:	469b      	mov	fp, r3
		if(snippets[s].cond.conditionType)
 8006328:	00b3      	lsls	r3, r6, #2
 800632a:	9305      	str	r3, [sp, #20]
 800632c:	199b      	adds	r3, r3, r6
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4698      	mov	r8, r3
 8006332:	4653      	mov	r3, sl
 8006334:	4642      	mov	r2, r8
 8006336:	5c9b      	ldrb	r3, [r3, r2]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d13f      	bne.n	80063bc <snipCommand+0xe8>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 800633c:	9b05      	ldr	r3, [sp, #20]
 800633e:	469c      	mov	ip, r3
 8006340:	4466      	add	r6, ip
 8006342:	00b6      	lsls	r6, r6, #2
 8006344:	4456      	add	r6, sl
 8006346:	e00d      	b.n	8006364 <snipCommand+0x90>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8006348:	0022      	movs	r2, r4
 800634a:	4649      	mov	r1, r9
 800634c:	002b      	movs	r3, r5
 800634e:	0020      	movs	r0, r4
 8006350:	f00f f88a 	bl	8015468 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8006354:	0028      	movs	r0, r5
 8006356:	f7f9 fedf 	bl	8000118 <strlen>
 800635a:	2100      	movs	r1, #0
 800635c:	0002      	movs	r2, r0
 800635e:	0028      	movs	r0, r5
 8006360:	f00e fe59 	bl	8015016 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8006364:	0029      	movs	r1, r5
 8006366:	68f0      	ldr	r0, [r6, #12]
 8006368:	f7ff fbe0 	bl	8005b2c <ParseSnippetCommand>
 800636c:	2800      	cmp	r0, #0
 800636e:	d1eb      	bne.n	8006348 <snipCommand+0x74>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8006370:	0020      	movs	r0, r4
 8006372:	f7f9 fed1 	bl	8000118 <strlen>
 8006376:	0006      	movs	r6, r0
 8006378:	220c      	movs	r2, #12
 800637a:	494e      	ldr	r1, [pc, #312]	; (80064b4 <snipCommand+0x1e0>)
 800637c:	1820      	adds	r0, r4, r0
 800637e:	f00e fe41 	bl	8015004 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006382:	4b46      	ldr	r3, [pc, #280]	; (800649c <snipCommand+0x1c8>)
 8006384:	0032      	movs	r2, r6
 8006386:	7818      	ldrb	r0, [r3, #0]
 8006388:	2301      	movs	r3, #1
 800638a:	320b      	adds	r2, #11
 800638c:	425b      	negs	r3, r3
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	0021      	movs	r1, r4
 8006392:	3333      	adds	r3, #51	; 0x33
 8006394:	b292      	uxth	r2, r2
 8006396:	f008 f957 	bl	800e648 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800639a:	4b42      	ldr	r3, [pc, #264]	; (80064a4 <snipCommand+0x1d0>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	455b      	cmp	r3, fp
 80063a0:	d8be      	bhi.n	8006320 <snipCommand+0x4c>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 80063a2:	22b5      	movs	r2, #181	; 0xb5
 80063a4:	0020      	movs	r0, r4
 80063a6:	4944      	ldr	r1, [pc, #272]	; (80064b8 <snipCommand+0x1e4>)
 80063a8:	f00e fe2c 	bl	8015004 <memcpy>
}
 80063ac:	2000      	movs	r0, #0
 80063ae:	b00d      	add	sp, #52	; 0x34
 80063b0:	bcf0      	pop	{r4, r5, r6, r7}
 80063b2:	46bb      	mov	fp, r7
 80063b4:	46b2      	mov	sl, r6
 80063b6:	46a9      	mov	r9, r5
 80063b8:	46a0      	mov	r8, r4
 80063ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 80063bc:	4657      	mov	r7, sl
 80063be:	4447      	add	r7, r8
 80063c0:	7c3a      	ldrb	r2, [r7, #16]
 80063c2:	0020      	movs	r0, r4
 80063c4:	00d3      	lsls	r3, r2, #3
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	aa08      	add	r2, sp, #32
 80063ca:	4694      	mov	ip, r2
 80063cc:	493b      	ldr	r1, [pc, #236]	; (80064bc <snipCommand+0x1e8>)
 80063ce:	465a      	mov	r2, fp
 80063d0:	4463      	add	r3, ip
 80063d2:	f00f f849 	bl	8015468 <sprintf>
		switch(snippets[s].cond.conditionType){
 80063d6:	4653      	mov	r3, sl
 80063d8:	4642      	mov	r2, r8
 80063da:	5c9b      	ldrb	r3, [r3, r2]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d111      	bne.n	8006404 <snipCommand+0x130>
				switch(snippets[s].cond.buffer1[1]){
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	2b0b      	cmp	r3, #11
 80063e4:	d833      	bhi.n	800644e <snipCommand+0x17a>
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d840      	bhi.n	800646c <snipCommand+0x198>
 80063ea:	2b05      	cmp	r3, #5
 80063ec:	d04b      	beq.n	8006486 <snipCommand+0x1b2>
 80063ee:	2b06      	cmp	r3, #6
 80063f0:	d1a4      	bne.n	800633c <snipCommand+0x68>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	78bb      	ldrb	r3, [r7, #2]
 80063f6:	0020      	movs	r0, r4
 80063f8:	9200      	str	r2, [sp, #0]
 80063fa:	4931      	ldr	r1, [pc, #196]	; (80064c0 <snipCommand+0x1ec>)
 80063fc:	0022      	movs	r2, r4
 80063fe:	f00f f833 	bl	8015468 <sprintf>
						break;
 8006402:	e79b      	b.n	800633c <snipCommand+0x68>
		switch(snippets[s].cond.conditionType){
 8006404:	2b03      	cmp	r3, #3
 8006406:	d199      	bne.n	800633c <snipCommand+0x68>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8006408:	4641      	mov	r1, r8
 800640a:	3106      	adds	r1, #6
 800640c:	4451      	add	r1, sl
 800640e:	2204      	movs	r2, #4
 8006410:	a807      	add	r0, sp, #28
 8006412:	f00e fdf7 	bl	8015004 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	9807      	ldr	r0, [sp, #28]
 800641a:	3a01      	subs	r2, #1
 800641c:	0053      	lsls	r3, r2, #1
 800641e:	189b      	adds	r3, r3, r2
 8006420:	4a28      	ldr	r2, [pc, #160]	; (80064c4 <snipCommand+0x1f0>)
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	18d3      	adds	r3, r2, r3
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	4698      	mov	r8, r3
 800642a:	f7fc ff5f 	bl	80032ec <__aeabi_f2d>
 800642e:	9002      	str	r0, [sp, #8]
 8006430:	9103      	str	r1, [sp, #12]
 8006432:	787b      	ldrb	r3, [r7, #1]
 8006434:	0020      	movs	r0, r4
 8006436:	3b01      	subs	r3, #1
 8006438:	005a      	lsls	r2, r3, #1
 800643a:	18d2      	adds	r2, r2, r3
 800643c:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <snipCommand+0x1f4>)
 800643e:	4923      	ldr	r1, [pc, #140]	; (80064cc <snipCommand+0x1f8>)
 8006440:	189b      	adds	r3, r3, r2
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	0022      	movs	r2, r4
 8006446:	4643      	mov	r3, r8
 8006448:	f00f f80e 	bl	8015468 <sprintf>
				break;
 800644c:	e776      	b.n	800633c <snipCommand+0x68>
 800644e:	3b0c      	subs	r3, #12
 8006450:	2b02      	cmp	r3, #2
 8006452:	d900      	bls.n	8006456 <snipCommand+0x182>
 8006454:	e772      	b.n	800633c <snipCommand+0x68>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	78bb      	ldrb	r3, [r7, #2]
 800645a:	9201      	str	r2, [sp, #4]
 800645c:	793a      	ldrb	r2, [r7, #4]
 800645e:	0020      	movs	r0, r4
 8006460:	9200      	str	r2, [sp, #0]
 8006462:	491b      	ldr	r1, [pc, #108]	; (80064d0 <snipCommand+0x1fc>)
 8006464:	0022      	movs	r2, r4
 8006466:	f00e ffff 	bl	8015468 <sprintf>
						break;
 800646a:	e767      	b.n	800633c <snipCommand+0x68>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	78bb      	ldrb	r3, [r7, #2]
 8006470:	9201      	str	r2, [sp, #4]
 8006472:	793a      	ldrb	r2, [r7, #4]
 8006474:	0020      	movs	r0, r4
 8006476:	9200      	str	r2, [sp, #0]
 8006478:	4916      	ldr	r1, [pc, #88]	; (80064d4 <snipCommand+0x200>)
 800647a:	0022      	movs	r2, r4
 800647c:	f00e fff4 	bl	8015468 <sprintf>
						break;
 8006480:	e75c      	b.n	800633c <snipCommand+0x68>
	configASSERT(pcWriteBuffer);
 8006482:	b672      	cpsid	i
 8006484:	e7fe      	b.n	8006484 <snipCommand+0x1b0>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	78bb      	ldrb	r3, [r7, #2]
 800648a:	0020      	movs	r0, r4
 800648c:	9200      	str	r2, [sp, #0]
 800648e:	4912      	ldr	r1, [pc, #72]	; (80064d8 <snipCommand+0x204>)
 8006490:	0022      	movs	r2, r4
 8006492:	f00e ffe9 	bl	8015468 <sprintf>
						break;
 8006496:	e751      	b.n	800633c <snipCommand+0x68>
 8006498:	0801b208 	.word	0x0801b208
 800649c:	20000b0f 	.word	0x20000b0f
 80064a0:	0801bff8 	.word	0x0801bff8
 80064a4:	200012b7 	.word	0x200012b7
 80064a8:	20006acc 	.word	0x20006acc
 80064ac:	200012e8 	.word	0x200012e8
 80064b0:	0801c0ac 	.word	0x0801c0ac
 80064b4:	0801c0b4 	.word	0x0801c0b4
 80064b8:	0801c0c0 	.word	0x0801c0c0
 80064bc:	0801c030 	.word	0x0801c030
 80064c0:	0801c050 	.word	0x0801c050
 80064c4:	20000084 	.word	0x20000084
 80064c8:	0801dab8 	.word	0x0801dab8
 80064cc:	0801c09c 	.word	0x0801c09c
 80064d0:	0801c080 	.word	0x0801c080
 80064d4:	0801c068 	.word	0x0801c068
 80064d8:	0801c03c 	.word	0x0801c03c

080064dc <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80064dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064de:	46ce      	mov	lr, r9
 80064e0:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80064e2:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b083      	sub	sp, #12
 80064e8:	0004      	movs	r4, r0
 80064ea:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d039      	beq.n	8006568 <getCommand+0x8c>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80064f4:	466a      	mov	r2, sp
 80064f6:	2101      	movs	r1, #1
 80064f8:	0028      	movs	r0, r5
 80064fa:	f008 fecf 	bl	800f29c <FreeRTOS_CLIGetParameter>
 80064fe:	4b6c      	ldr	r3, [pc, #432]	; (80066b0 <getCommand+0x1d4>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006500:	2204      	movs	r2, #4
 8006502:	496c      	ldr	r1, [pc, #432]	; (80066b4 <getCommand+0x1d8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006504:	0006      	movs	r6, r0
 8006506:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006508:	f00e fff1 	bl	80154ee <strncmp>
 800650c:	2800      	cmp	r0, #0
 800650e:	d11e      	bne.n	800654e <getCommand+0x72>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006510:	9b00      	ldr	r3, [sp, #0]
 8006512:	1d37      	adds	r7, r6, #4
 8006514:	1f1d      	subs	r5, r3, #4
 8006516:	002a      	movs	r2, r5
 8006518:	0038      	movs	r0, r7
 800651a:	4967      	ldr	r1, [pc, #412]	; (80066b8 <getCommand+0x1dc>)
 800651c:	f00e ffe7 	bl	80154ee <strncmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	d13b      	bne.n	800659c <getCommand+0xc0>
			if(BOS.response == BOS_RESPONSE_ALL)
 8006524:	4b65      	ldr	r3, [pc, #404]	; (80066bc <getCommand+0x1e0>)
 8006526:	799b      	ldrb	r3, [r3, #6]
 8006528:	2b60      	cmp	r3, #96	; 0x60
 800652a:	d100      	bne.n	800652e <getCommand+0x52>
 800652c:	e097      	b.n	800665e <getCommand+0x182>
			else if(BOS.response == BOS_RESPONSE_MSG)
 800652e:	2b20      	cmp	r3, #32
 8006530:	d041      	beq.n	80065b6 <getCommand+0xda>
			else if(BOS.response == BOS_RESPONSE_NONE)
 8006532:	2b00      	cmp	r3, #0
 8006534:	d100      	bne.n	8006538 <getCommand+0x5c>
 8006536:	e09f      	b.n	8006678 <getCommand+0x19c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006538:	0032      	movs	r2, r6
 800653a:	0020      	movs	r0, r4
 800653c:	4960      	ldr	r1, [pc, #384]	; (80066c0 <getCommand+0x1e4>)
 800653e:	f00e ff93 	bl	8015468 <sprintf>
}
 8006542:	2000      	movs	r0, #0
 8006544:	b003      	add	sp, #12
 8006546:	bcc0      	pop	{r6, r7}
 8006548:	46b9      	mov	r9, r7
 800654a:	46b0      	mov	r8, r6
 800654c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 800654e:	2205      	movs	r2, #5
 8006550:	0030      	movs	r0, r6
 8006552:	495c      	ldr	r1, [pc, #368]	; (80066c4 <getCommand+0x1e8>)
 8006554:	f00e ffcb 	bl	80154ee <strncmp>
 8006558:	2800      	cmp	r0, #0
 800655a:	d007      	beq.n	800656c <getCommand+0x90>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800655c:	2213      	movs	r2, #19
 800655e:	0020      	movs	r0, r4
 8006560:	4959      	ldr	r1, [pc, #356]	; (80066c8 <getCommand+0x1ec>)
 8006562:	f00e fd4f 	bl	8015004 <memcpy>
 8006566:	e7ec      	b.n	8006542 <getCommand+0x66>
	configASSERT(pcWriteBuffer);
 8006568:	b672      	cpsid	i
 800656a:	e7fe      	b.n	800656a <getCommand+0x8e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800656c:	0028      	movs	r0, r5
 800656e:	2102      	movs	r1, #2
 8006570:	aa01      	add	r2, sp, #4
 8006572:	f008 fe93 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8006576:	2600      	movs	r6, #0
 8006578:	0005      	movs	r5, r0
		for(i =0; i < MaxNumOfGroups; i++){
 800657a:	4f54      	ldr	r7, [pc, #336]	; (80066cc <getCommand+0x1f0>)
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 800657c:	0039      	movs	r1, r7
 800657e:	0028      	movs	r0, r5
 8006580:	f7f9 fdc0 	bl	8000104 <strcmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	d01c      	beq.n	80065c2 <getCommand+0xe6>
		for(i =0; i < MaxNumOfGroups; i++){
 8006588:	3601      	adds	r6, #1
 800658a:	370a      	adds	r7, #10
 800658c:	2e0a      	cmp	r6, #10
 800658e:	d1f5      	bne.n	800657c <getCommand+0xa0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006590:	002a      	movs	r2, r5
 8006592:	0020      	movs	r0, r4
 8006594:	494e      	ldr	r1, [pc, #312]	; (80066d0 <getCommand+0x1f4>)
 8006596:	f00e ff67 	bl	8015468 <sprintf>
			return pdFALSE;
 800659a:	e7d2      	b.n	8006542 <getCommand+0x66>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800659c:	002a      	movs	r2, r5
 800659e:	0038      	movs	r0, r7
 80065a0:	494c      	ldr	r1, [pc, #304]	; (80066d4 <getCommand+0x1f8>)
 80065a2:	f00e ffa4 	bl	80154ee <strncmp>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d12f      	bne.n	800660a <getCommand+0x12e>
			if(BOS.trace == TRACE_BOTH)
 80065aa:	4b44      	ldr	r3, [pc, #272]	; (80066bc <getCommand+0x1e0>)
 80065ac:	79db      	ldrb	r3, [r3, #7]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d055      	beq.n	800665e <getCommand+0x182>
			else if(BOS.trace == TRACE_MESSAGE)
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d1bd      	bne.n	8006532 <getCommand+0x56>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80065b6:	0020      	movs	r0, r4
 80065b8:	4a47      	ldr	r2, [pc, #284]	; (80066d8 <getCommand+0x1fc>)
 80065ba:	4948      	ldr	r1, [pc, #288]	; (80066dc <getCommand+0x200>)
 80065bc:	f00e ff54 	bl	8015468 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 80065c0:	e7bf      	b.n	8006542 <getCommand+0x66>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80065c2:	002a      	movs	r2, r5
 80065c4:	0020      	movs	r0, r4
 80065c6:	4946      	ldr	r1, [pc, #280]	; (80066e0 <getCommand+0x204>)
 80065c8:	f00e ff4e 	bl	8015468 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80065cc:	4f45      	ldr	r7, [pc, #276]	; (80066e4 <getCommand+0x208>)
 80065ce:	783b      	ldrb	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0b6      	beq.n	8006542 <getCommand+0x66>
 80065d4:	2301      	movs	r3, #1
 80065d6:	40b3      	lsls	r3, r6
 80065d8:	001e      	movs	r6, r3
 80065da:	4b43      	ldr	r3, [pc, #268]	; (80066e8 <getCommand+0x20c>)
 80065dc:	2501      	movs	r5, #1
 80065de:	4699      	mov	r9, r3
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80065e0:	4b42      	ldr	r3, [pc, #264]	; (80066ec <getCommand+0x210>)
 80065e2:	4698      	mov	r8, r3
 80065e4:	e004      	b.n	80065f0 <getCommand+0x114>
			for(j =1; j <= N; j++)						// N modules
 80065e6:	3501      	adds	r5, #1
 80065e8:	783b      	ldrb	r3, [r7, #0]
 80065ea:	b2ed      	uxtb	r5, r5
 80065ec:	42ab      	cmp	r3, r5
 80065ee:	d3a8      	bcc.n	8006542 <getCommand+0x66>
				if(InGroup(j,i)){
 80065f0:	464a      	mov	r2, r9
 80065f2:	1e6b      	subs	r3, r5, #1
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	5ad3      	ldrh	r3, [r2, r3]
 80065f8:	421e      	tst	r6, r3
 80065fa:	d0f4      	beq.n	80065e6 <getCommand+0x10a>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80065fc:	002b      	movs	r3, r5
 80065fe:	0022      	movs	r2, r4
 8006600:	4641      	mov	r1, r8
 8006602:	0020      	movs	r0, r4
 8006604:	f00e ff30 	bl	8015468 <sprintf>
 8006608:	e7ed      	b.n	80065e6 <getCommand+0x10a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800660a:	002a      	movs	r2, r5
 800660c:	0038      	movs	r0, r7
 800660e:	4938      	ldr	r1, [pc, #224]	; (80066f0 <getCommand+0x214>)
 8006610:	f00e ff6d 	bl	80154ee <strncmp>
 8006614:	2800      	cmp	r0, #0
 8006616:	d028      	beq.n	800666a <getCommand+0x18e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006618:	002a      	movs	r2, r5
 800661a:	0038      	movs	r0, r7
 800661c:	4935      	ldr	r1, [pc, #212]	; (80066f4 <getCommand+0x218>)
 800661e:	f00e ff66 	bl	80154ee <strncmp>
 8006622:	2800      	cmp	r0, #0
 8006624:	d03c      	beq.n	80066a0 <getCommand+0x1c4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006626:	002a      	movs	r2, r5
 8006628:	0038      	movs	r0, r7
 800662a:	4933      	ldr	r1, [pc, #204]	; (80066f8 <getCommand+0x21c>)
 800662c:	f00e ff5f 	bl	80154ee <strncmp>
 8006630:	2800      	cmp	r0, #0
 8006632:	d02e      	beq.n	8006692 <getCommand+0x1b6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006634:	002a      	movs	r2, r5
 8006636:	0038      	movs	r0, r7
 8006638:	4930      	ldr	r1, [pc, #192]	; (80066fc <getCommand+0x220>)
 800663a:	f00e ff58 	bl	80154ee <strncmp>
 800663e:	2800      	cmp	r0, #0
 8006640:	d020      	beq.n	8006684 <getCommand+0x1a8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006642:	002a      	movs	r2, r5
 8006644:	0038      	movs	r0, r7
 8006646:	492e      	ldr	r1, [pc, #184]	; (8006700 <getCommand+0x224>)
 8006648:	f00e ff51 	bl	80154ee <strncmp>
 800664c:	2800      	cmp	r0, #0
 800664e:	d185      	bne.n	800655c <getCommand+0x80>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006650:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <getCommand+0x1e0>)
 8006652:	0020      	movs	r0, r4
 8006654:	795a      	ldrb	r2, [r3, #5]
 8006656:	492b      	ldr	r1, [pc, #172]	; (8006704 <getCommand+0x228>)
 8006658:	f00e ff06 	bl	8015468 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 800665c:	e771      	b.n	8006542 <getCommand+0x66>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 800665e:	0020      	movs	r0, r4
 8006660:	4a29      	ldr	r2, [pc, #164]	; (8006708 <getCommand+0x22c>)
 8006662:	491e      	ldr	r1, [pc, #120]	; (80066dc <getCommand+0x200>)
 8006664:	f00e ff00 	bl	8015468 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 8006668:	e76b      	b.n	8006542 <getCommand+0x66>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 800666a:	4b14      	ldr	r3, [pc, #80]	; (80066bc <getCommand+0x1e0>)
 800666c:	0020      	movs	r0, r4
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	4924      	ldr	r1, [pc, #144]	; (8006704 <getCommand+0x228>)
 8006672:	f00e fef9 	bl	8015468 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 8006676:	e764      	b.n	8006542 <getCommand+0x66>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8006678:	0020      	movs	r0, r4
 800667a:	4a24      	ldr	r2, [pc, #144]	; (800670c <getCommand+0x230>)
 800667c:	4917      	ldr	r1, [pc, #92]	; (80066dc <getCommand+0x200>)
 800667e:	f00e fef3 	bl	8015468 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 8006682:	e75e      	b.n	8006542 <getCommand+0x66>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006684:	4b0d      	ldr	r3, [pc, #52]	; (80066bc <getCommand+0x1e0>)
 8006686:	0020      	movs	r0, r4
 8006688:	791a      	ldrb	r2, [r3, #4]
 800668a:	491e      	ldr	r1, [pc, #120]	; (8006704 <getCommand+0x228>)
 800668c:	f00e feec 	bl	8015468 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 8006690:	e757      	b.n	8006542 <getCommand+0x66>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006692:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <getCommand+0x1e0>)
 8006694:	0020      	movs	r0, r4
 8006696:	885a      	ldrh	r2, [r3, #2]
 8006698:	491a      	ldr	r1, [pc, #104]	; (8006704 <getCommand+0x228>)
 800669a:	f00e fee5 	bl	8015468 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 800669e:	e750      	b.n	8006542 <getCommand+0x66>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <getCommand+0x1e0>)
 80066a2:	0020      	movs	r0, r4
 80066a4:	881a      	ldrh	r2, [r3, #0]
 80066a6:	4917      	ldr	r1, [pc, #92]	; (8006704 <getCommand+0x228>)
 80066a8:	f00e fede 	bl	8015468 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 80066ac:	e749      	b.n	8006542 <getCommand+0x66>
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	2000132c 	.word	0x2000132c
 80066b4:	0801c178 	.word	0x0801c178
 80066b8:	0801c180 	.word	0x0801c180
 80066bc:	20006ab0 	.word	0x20006ab0
 80066c0:	0801c214 	.word	0x0801c214
 80066c4:	0801c1f0 	.word	0x0801c1f0
 80066c8:	0801c200 	.word	0x0801c200
 80066cc:	20000ef4 	.word	0x20000ef4
 80066d0:	0801c234 	.word	0x0801c234
 80066d4:	0801c198 	.word	0x0801c198
 80066d8:	0801c18c 	.word	0x0801c18c
 80066dc:	0801b478 	.word	0x0801b478
 80066e0:	0801c250 	.word	0x0801c250
 80066e4:	2000001c 	.word	0x2000001c
 80066e8:	20000f58 	.word	0x20000f58
 80066ec:	0801c1f8 	.word	0x0801c1f8
 80066f0:	0801c1a0 	.word	0x0801c1a0
 80066f4:	0801c1ac 	.word	0x0801c1ac
 80066f8:	0801c1b8 	.word	0x0801c1b8
 80066fc:	0801c1c8 	.word	0x0801c1c8
 8006700:	0801c1dc 	.word	0x0801c1dc
 8006704:	0801ba60 	.word	0x0801ba60
 8006708:	0801b5ac 	.word	0x0801b5ac
 800670c:	0801c190 	.word	0x0801c190

08006710 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006710:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006712:	b570      	push	{r4, r5, r6, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006718:	9301      	str	r3, [sp, #4]
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800671a:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 800671c:	2c00      	cmp	r4, #0
 800671e:	d02c      	beq.n	800677a <defaultCommand+0x6a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006720:	2101      	movs	r1, #1
 8006722:	aa01      	add	r2, sp, #4
 8006724:	f008 fdba 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006728:	9e01      	ldr	r6, [sp, #4]
 800672a:	4920      	ldr	r1, [pc, #128]	; (80067ac <defaultCommand+0x9c>)
 800672c:	0032      	movs	r2, r6
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800672e:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006730:	f00e fedd 	bl	80154ee <strncmp>
 8006734:	2800      	cmp	r0, #0
 8006736:	d022      	beq.n	800677e <defaultCommand+0x6e>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006738:	0032      	movs	r2, r6
 800673a:	0028      	movs	r0, r5
 800673c:	491c      	ldr	r1, [pc, #112]	; (80067b0 <defaultCommand+0xa0>)
 800673e:	f00e fed6 	bl	80154ee <strncmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	d12c      	bne.n	80067a0 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006746:	2116      	movs	r1, #22
 8006748:	2200      	movs	r2, #0
 800674a:	20ff      	movs	r0, #255	; 0xff
 800674c:	f003 faa2 	bl	8009c94 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006750:	2202      	movs	r2, #2
 8006752:	4b18      	ldr	r3, [pc, #96]	; (80067b4 <defaultCommand+0xa4>)
		osDelay(100);
 8006754:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 8006756:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006758:	f008 fc88 	bl	800f06c <osDelay>
		ClearEEportsDir();
 800675c:	f7fd fbf0 	bl	8003f40 <ClearEEportsDir>
		ClearROtopology();
 8006760:	f006 f866 	bl	800c830 <ClearROtopology>
		osDelay(100);
 8006764:	2064      	movs	r0, #100	; 0x64
 8006766:	f008 fc81 	bl	800f06c <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 800676a:	2240      	movs	r2, #64	; 0x40
 800676c:	0020      	movs	r0, r4
 800676e:	4912      	ldr	r1, [pc, #72]	; (80067b8 <defaultCommand+0xa8>)
 8006770:	f00e fc48 	bl	8015004 <memcpy>
}
 8006774:	2000      	movs	r0, #0
 8006776:	b002      	add	sp, #8
 8006778:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 800677a:	b672      	cpsid	i
 800677c:	e7fe      	b.n	800677c <defaultCommand+0x6c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800677e:	490f      	ldr	r1, [pc, #60]	; (80067bc <defaultCommand+0xac>)
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <defaultCommand+0xb0>)
 8006782:	000a      	movs	r2, r1
 8006784:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006786:	c223      	stmia	r2!, {r0, r1, r5}
 8006788:	cb23      	ldmia	r3!, {r0, r1, r5}
 800678a:	c223      	stmia	r2!, {r0, r1, r5}
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006790:	f7fd fb9e 	bl	8003ed0 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006794:	2227      	movs	r2, #39	; 0x27
 8006796:	0020      	movs	r0, r4
 8006798:	490a      	ldr	r1, [pc, #40]	; (80067c4 <defaultCommand+0xb4>)
 800679a:	f00e fc33 	bl	8015004 <memcpy>
	if(result == BOS_ERR_WrongValue)
 800679e:	e7e9      	b.n	8006774 <defaultCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80067a0:	220f      	movs	r2, #15
 80067a2:	0020      	movs	r0, r4
 80067a4:	4908      	ldr	r1, [pc, #32]	; (80067c8 <defaultCommand+0xb8>)
 80067a6:	f00e fc2d 	bl	8015004 <memcpy>
 80067aa:	e7e3      	b.n	8006774 <defaultCommand+0x64>
 80067ac:	0801c264 	.word	0x0801c264
 80067b0:	0801c294 	.word	0x0801c294
 80067b4:	20000f8c 	.word	0x20000f8c
 80067b8:	0801c2ac 	.word	0x0801c2ac
 80067bc:	20006ab0 	.word	0x20006ab0
 80067c0:	20000000 	.word	0x20000000
 80067c4:	0801c26c 	.word	0x0801c26c
 80067c8:	0801c29c 	.word	0x0801c29c

080067cc <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80067cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ce:	4645      	mov	r5, r8
 80067d0:	464e      	mov	r6, r9
 80067d2:	46de      	mov	lr, fp
 80067d4:	4657      	mov	r7, sl
 80067d6:	b5e0      	push	{r5, r6, r7, lr}
 80067d8:	2600      	movs	r6, #0
 80067da:	b08f      	sub	sp, #60	; 0x3c
 80067dc:	4680      	mov	r8, r0
 80067de:	0014      	movs	r4, r2
 80067e0:	2500      	movs	r5, #0
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80067e2:	9609      	str	r6, [sp, #36]	; 0x24
 80067e4:	960a      	str	r6, [sp, #40]	; 0x28
 80067e6:	960b      	str	r6, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80067e8:	960c      	str	r6, [sp, #48]	; 0x30
 80067ea:	960d      	str	r6, [sp, #52]	; 0x34
	configASSERT(pcWriteBuffer);
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d023      	beq.n	8006838 <setCommand+0x6c>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80067f0:	2101      	movs	r1, #1
 80067f2:	aa09      	add	r2, sp, #36	; 0x24
 80067f4:	0020      	movs	r0, r4
 80067f6:	f008 fd51 	bl	800f29c <FreeRTOS_CLIGetParameter>
 80067fa:	4bc1      	ldr	r3, [pc, #772]	; (8006b00 <setCommand+0x334>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80067fc:	2204      	movs	r2, #4
 80067fe:	49c1      	ldr	r1, [pc, #772]	; (8006b04 <setCommand+0x338>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006800:	0007      	movs	r7, r0
 8006802:	469b      	mov	fp, r3
 8006804:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006806:	f00e fe72 	bl	80154ee <strncmp>
 800680a:	2800      	cmp	r0, #0
 800680c:	d062      	beq.n	80068d4 <setCommand+0x108>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800680e:	2204      	movs	r2, #4
 8006810:	0038      	movs	r0, r7
 8006812:	49bd      	ldr	r1, [pc, #756]	; (8006b08 <setCommand+0x33c>)
 8006814:	f00e fe6b 	bl	80154ee <strncmp>
 8006818:	2800      	cmp	r0, #0
 800681a:	d00f      	beq.n	800683c <setCommand+0x70>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800681c:	2204      	movs	r2, #4
 800681e:	0038      	movs	r0, r7
 8006820:	49ba      	ldr	r1, [pc, #744]	; (8006b0c <setCommand+0x340>)
 8006822:	f00e fe64 	bl	80154ee <strncmp>
 8006826:	2800      	cmp	r0, #0
 8006828:	d100      	bne.n	800682c <setCommand+0x60>
 800682a:	e0d5      	b.n	80069d8 <setCommand+0x20c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800682c:	2213      	movs	r2, #19
 800682e:	4640      	mov	r0, r8
 8006830:	49b7      	ldr	r1, [pc, #732]	; (8006b10 <setCommand+0x344>)
 8006832:	f00e fbe7 	bl	8015004 <memcpy>
 8006836:	e045      	b.n	80068c4 <setCommand+0xf8>
	configASSERT(pcWriteBuffer);
 8006838:	b672      	cpsid	i
 800683a:	e7fe      	b.n	800683a <setCommand+0x6e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800683c:	2102      	movs	r1, #2
 800683e:	0020      	movs	r0, r4
 8006840:	aa0a      	add	r2, sp, #40	; 0x28
 8006842:	f008 fd2b 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8006846:	4bb3      	ldr	r3, [pc, #716]	; (8006b14 <setCommand+0x348>)
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006848:	2103      	movs	r1, #3
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800684a:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800684c:	aa0b      	add	r2, sp, #44	; 0x2c
 800684e:	0020      	movs	r0, r4
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006850:	4699      	mov	r9, r3
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006852:	f008 fd23 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8006856:	4fb0      	ldr	r7, [pc, #704]	; (8006b18 <setCommand+0x34c>)
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006858:	2104      	movs	r1, #4
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800685a:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800685c:	aa0c      	add	r2, sp, #48	; 0x30
 800685e:	0020      	movs	r0, r4
 8006860:	f008 fd1c 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8006864:	4ead      	ldr	r6, [pc, #692]	; (8006b1c <setCommand+0x350>)
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006866:	2105      	movs	r1, #5
 8006868:	aa0d      	add	r2, sp, #52	; 0x34
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800686a:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800686c:	0020      	movs	r0, r4
 800686e:	f008 fd15 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8006872:	4bab      	ldr	r3, [pc, #684]	; (8006b20 <setCommand+0x354>)
 8006874:	6018      	str	r0, [r3, #0]
 8006876:	469a      	mov	sl, r3
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006878:	464b      	mov	r3, r9
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	f00e f925 	bl	8014aca <atoi>
 8006880:	b2c4      	uxtb	r4, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006882:	6838      	ldr	r0, [r7, #0]
 8006884:	f00e f921 	bl	8014aca <atoi>
 8006888:	0007      	movs	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800688a:	6830      	ldr	r0, [r6, #0]
 800688c:	f00e f91d 	bl	8014aca <atoi>
		if(pcParameterString5 != NULL){
 8006890:	4653      	mov	r3, sl
 8006892:	681b      	ldr	r3, [r3, #0]
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006894:	0006      	movs	r6, r0
		if(pcParameterString5 != NULL){
 8006896:	2b00      	cmp	r3, #0
 8006898:	d009      	beq.n	80068ae <setCommand+0xe2>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	2a61      	cmp	r2, #97	; 0x61
 800689e:	d100      	bne.n	80068a2 <setCommand+0xd6>
 80068a0:	e1ce      	b.n	8006c40 <setCommand+0x474>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80068a2:	2a70      	cmp	r2, #112	; 0x70
 80068a4:	d109      	bne.n	80068ba <setCommand+0xee>
 80068a6:	785b      	ldrb	r3, [r3, #1]
				temp84 =RTC_PM;
 80068a8:	2502      	movs	r5, #2
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80068aa:	2b6d      	cmp	r3, #109	; 0x6d
 80068ac:	d105      	bne.n	80068ba <setCommand+0xee>
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80068ae:	2c17      	cmp	r4, #23
 80068b0:	d803      	bhi.n	80068ba <setCommand+0xee>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80068b2:	b2ff      	uxtb	r7, r7
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80068b4:	2f3b      	cmp	r7, #59	; 0x3b
 80068b6:	d800      	bhi.n	80068ba <setCommand+0xee>
 80068b8:	e1ee      	b.n	8006c98 <setCommand+0x4cc>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80068ba:	220f      	movs	r2, #15
 80068bc:	4640      	mov	r0, r8
 80068be:	4999      	ldr	r1, [pc, #612]	; (8006b24 <setCommand+0x358>)
 80068c0:	f00e fba0 	bl	8015004 <memcpy>
}
 80068c4:	2000      	movs	r0, #0
 80068c6:	b00f      	add	sp, #60	; 0x3c
 80068c8:	bcf0      	pop	{r4, r5, r6, r7}
 80068ca:	46bb      	mov	fp, r7
 80068cc:	46b2      	mov	sl, r6
 80068ce:	46a9      	mov	r9, r5
 80068d0:	46a0      	mov	r8, r4
 80068d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80068d4:	2102      	movs	r1, #2
 80068d6:	0020      	movs	r0, r4
 80068d8:	aa0a      	add	r2, sp, #40	; 0x28
 80068da:	f008 fcdf 	bl	800f29c <FreeRTOS_CLIGetParameter>
 80068de:	4b8d      	ldr	r3, [pc, #564]	; (8006b14 <setCommand+0x348>)
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80068e0:	4f91      	ldr	r7, [pc, #580]	; (8006b28 <setCommand+0x35c>)
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80068e2:	6018      	str	r0, [r3, #0]
 80068e4:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80068e6:	465b      	mov	r3, fp
 80068e8:	681b      	ldr	r3, [r3, #0]
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80068ea:	0004      	movs	r4, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80068ec:	1d1d      	adds	r5, r3, #4
 80068ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f0:	0039      	movs	r1, r7
 80068f2:	1f1e      	subs	r6, r3, #4
 80068f4:	0032      	movs	r2, r6
 80068f6:	0028      	movs	r0, r5
 80068f8:	f00e fdf9 	bl	80154ee <strncmp>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d128      	bne.n	8006952 <setCommand+0x186>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006900:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006902:	0020      	movs	r0, r4
 8006904:	002a      	movs	r2, r5
 8006906:	4989      	ldr	r1, [pc, #548]	; (8006b2c <setCommand+0x360>)
 8006908:	f00e fdf1 	bl	80154ee <strncmp>
 800690c:	2800      	cmp	r0, #0
 800690e:	d100      	bne.n	8006912 <setCommand+0x146>
 8006910:	e18a      	b.n	8006c28 <setCommand+0x45c>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006912:	002a      	movs	r2, r5
 8006914:	0020      	movs	r0, r4
 8006916:	4986      	ldr	r1, [pc, #536]	; (8006b30 <setCommand+0x364>)
 8006918:	f00e fde9 	bl	80154ee <strncmp>
 800691c:	2800      	cmp	r0, #0
 800691e:	d100      	bne.n	8006922 <setCommand+0x156>
 8006920:	e16a      	b.n	8006bf8 <setCommand+0x42c>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006922:	002a      	movs	r2, r5
 8006924:	0020      	movs	r0, r4
 8006926:	4983      	ldr	r1, [pc, #524]	; (8006b34 <setCommand+0x368>)
 8006928:	f00e fde1 	bl	80154ee <strncmp>
 800692c:	2800      	cmp	r0, #0
 800692e:	d100      	bne.n	8006932 <setCommand+0x166>
 8006930:	e16e      	b.n	8006c10 <setCommand+0x444>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006932:	002a      	movs	r2, r5
 8006934:	0020      	movs	r0, r4
 8006936:	4980      	ldr	r1, [pc, #512]	; (8006b38 <setCommand+0x36c>)
 8006938:	f00e fdd9 	bl	80154ee <strncmp>
 800693c:	2800      	cmp	r0, #0
 800693e:	d1bc      	bne.n	80068ba <setCommand+0xee>
				BOS.response = BOS_RESPONSE_NONE;
 8006940:	4b7e      	ldr	r3, [pc, #504]	; (8006b3c <setCommand+0x370>)
 8006942:	7198      	strb	r0, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006944:	208a      	movs	r0, #138	; 0x8a
 8006946:	79d9      	ldrb	r1, [r3, #7]
 8006948:	0040      	lsls	r0, r0, #1
 800694a:	0209      	lsls	r1, r1, #8
 800694c:	f001 fb4c 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 8006950:	e13c      	b.n	8006bcc <setCommand+0x400>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006952:	0032      	movs	r2, r6
 8006954:	0028      	movs	r0, r5
 8006956:	497a      	ldr	r1, [pc, #488]	; (8006b40 <setCommand+0x374>)
 8006958:	f00e fdc9 	bl	80154ee <strncmp>
 800695c:	2800      	cmp	r0, #0
 800695e:	d100      	bne.n	8006962 <setCommand+0x196>
 8006960:	e174      	b.n	8006c4c <setCommand+0x480>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006962:	0032      	movs	r2, r6
 8006964:	0028      	movs	r0, r5
 8006966:	4977      	ldr	r1, [pc, #476]	; (8006b44 <setCommand+0x378>)
 8006968:	f00e fdc1 	bl	80154ee <strncmp>
 800696c:	1e07      	subs	r7, r0, #0
 800696e:	d100      	bne.n	8006972 <setCommand+0x1a6>
 8006970:	e2ee      	b.n	8006f50 <setCommand+0x784>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006972:	0032      	movs	r2, r6
 8006974:	0028      	movs	r0, r5
 8006976:	4974      	ldr	r1, [pc, #464]	; (8006b48 <setCommand+0x37c>)
 8006978:	f00e fdb9 	bl	80154ee <strncmp>
 800697c:	2800      	cmp	r0, #0
 800697e:	d100      	bne.n	8006982 <setCommand+0x1b6>
 8006980:	e29f      	b.n	8006ec2 <setCommand+0x6f6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006982:	0032      	movs	r2, r6
 8006984:	0028      	movs	r0, r5
 8006986:	4971      	ldr	r1, [pc, #452]	; (8006b4c <setCommand+0x380>)
 8006988:	f00e fdb1 	bl	80154ee <strncmp>
 800698c:	2800      	cmp	r0, #0
 800698e:	d100      	bne.n	8006992 <setCommand+0x1c6>
 8006990:	e289      	b.n	8006ea6 <setCommand+0x6da>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006992:	0032      	movs	r2, r6
 8006994:	0028      	movs	r0, r5
 8006996:	496e      	ldr	r1, [pc, #440]	; (8006b50 <setCommand+0x384>)
 8006998:	f00e fda9 	bl	80154ee <strncmp>
 800699c:	2800      	cmp	r0, #0
 800699e:	d100      	bne.n	80069a2 <setCommand+0x1d6>
 80069a0:	e26e      	b.n	8006e80 <setCommand+0x6b4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80069a2:	0032      	movs	r2, r6
 80069a4:	0028      	movs	r0, r5
 80069a6:	496b      	ldr	r1, [pc, #428]	; (8006b54 <setCommand+0x388>)
 80069a8:	f00e fda1 	bl	80154ee <strncmp>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d000      	beq.n	80069b2 <setCommand+0x1e6>
 80069b0:	e73c      	b.n	800682c <setCommand+0x60>
			temp16 =atoi((const char* )pcParameterString2);
 80069b2:	0020      	movs	r0, r4
 80069b4:	f00e f889 	bl	8014aca <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80069b8:	1e43      	subs	r3, r0, #1
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2bfe      	cmp	r3, #254	; 0xfe
 80069be:	d900      	bls.n	80069c2 <setCommand+0x1f6>
 80069c0:	e77b      	b.n	80068ba <setCommand+0xee>
				BOS.buttons.maxInterClickTime =temp16;
 80069c2:	4b5e      	ldr	r3, [pc, #376]	; (8006b3c <setCommand+0x370>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069c4:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 80069c6:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069c8:	0200      	lsls	r0, r0, #8
 80069ca:	4301      	orrs	r1, r0
 80069cc:	2018      	movs	r0, #24
 80069ce:	b289      	uxth	r1, r1
 80069d0:	30ff      	adds	r0, #255	; 0xff
 80069d2:	f001 fb09 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 80069d6:	e0f9      	b.n	8006bcc <setCommand+0x400>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80069d8:	2102      	movs	r1, #2
 80069da:	0020      	movs	r0, r4
 80069dc:	aa0a      	add	r2, sp, #40	; 0x28
 80069de:	f008 fc5d 	bl	800f29c <FreeRTOS_CLIGetParameter>
 80069e2:	4b4c      	ldr	r3, [pc, #304]	; (8006b14 <setCommand+0x348>)
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80069e4:	2103      	movs	r1, #3
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80069e6:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80069e8:	aa0b      	add	r2, sp, #44	; 0x2c
 80069ea:	0020      	movs	r0, r4
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80069ec:	4699      	mov	r9, r3
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80069ee:	f008 fc55 	bl	800f29c <FreeRTOS_CLIGetParameter>
 80069f2:	4d49      	ldr	r5, [pc, #292]	; (8006b18 <setCommand+0x34c>)
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80069f4:	2104      	movs	r1, #4
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80069f6:	6028      	str	r0, [r5, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80069f8:	aa0c      	add	r2, sp, #48	; 0x30
 80069fa:	0020      	movs	r0, r4
 80069fc:	f008 fc4e 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8006a00:	4f46      	ldr	r7, [pc, #280]	; (8006b1c <setCommand+0x350>)
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a02:	2105      	movs	r1, #5
 8006a04:	aa0d      	add	r2, sp, #52	; 0x34
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006a06:	6038      	str	r0, [r7, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006a08:	0020      	movs	r0, r4
 8006a0a:	f008 fc47 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8006a0e:	4c44      	ldr	r4, [pc, #272]	; (8006b20 <setCommand+0x354>)
 8006a10:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006a12:	6838      	ldr	r0, [r7, #0]
 8006a14:	f00e f859 	bl	8014aca <atoi>
 8006a18:	9007      	str	r0, [sp, #28]
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006a1a:	6820      	ldr	r0, [r4, #0]
 8006a1c:	f00e f855 	bl	8014aca <atoi>
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006a20:	464b      	mov	r3, r9
 8006a22:	681c      	ldr	r4, [r3, #0]
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006a24:	4682      	mov	sl, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006a26:	2206      	movs	r2, #6
 8006a28:	0020      	movs	r0, r4
 8006a2a:	494b      	ldr	r1, [pc, #300]	; (8006b58 <setCommand+0x38c>)
 8006a2c:	f00e fd5f 	bl	80154ee <strncmp>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d100      	bne.n	8006a36 <setCommand+0x26a>
 8006a34:	e0d6      	b.n	8006be4 <setCommand+0x418>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006a36:	2207      	movs	r2, #7
 8006a38:	0020      	movs	r0, r4
 8006a3a:	4948      	ldr	r1, [pc, #288]	; (8006b5c <setCommand+0x390>)
 8006a3c:	f00e fd57 	bl	80154ee <strncmp>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d100      	bne.n	8006a46 <setCommand+0x27a>
 8006a44:	e0d6      	b.n	8006bf4 <setCommand+0x428>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006a46:	2209      	movs	r2, #9
 8006a48:	0020      	movs	r0, r4
 8006a4a:	4945      	ldr	r1, [pc, #276]	; (8006b60 <setCommand+0x394>)
 8006a4c:	f00e fd4f 	bl	80154ee <strncmp>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d100      	bne.n	8006a56 <setCommand+0x28a>
 8006a54:	e0cc      	b.n	8006bf0 <setCommand+0x424>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006a56:	2208      	movs	r2, #8
 8006a58:	0020      	movs	r0, r4
 8006a5a:	4942      	ldr	r1, [pc, #264]	; (8006b64 <setCommand+0x398>)
 8006a5c:	f00e fd47 	bl	80154ee <strncmp>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d100      	bne.n	8006a66 <setCommand+0x29a>
 8006a64:	e0c2      	b.n	8006bec <setCommand+0x420>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006a66:	2206      	movs	r2, #6
 8006a68:	0020      	movs	r0, r4
 8006a6a:	493f      	ldr	r1, [pc, #252]	; (8006b68 <setCommand+0x39c>)
 8006a6c:	f00e fd3f 	bl	80154ee <strncmp>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d100      	bne.n	8006a76 <setCommand+0x2aa>
 8006a74:	e0b8      	b.n	8006be8 <setCommand+0x41c>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006a76:	2208      	movs	r2, #8
 8006a78:	0020      	movs	r0, r4
 8006a7a:	493c      	ldr	r1, [pc, #240]	; (8006b6c <setCommand+0x3a0>)
 8006a7c:	f00e fd37 	bl	80154ee <strncmp>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d100      	bne.n	8006a86 <setCommand+0x2ba>
 8006a84:	e1f6      	b.n	8006e74 <setCommand+0x6a8>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006a86:	2206      	movs	r2, #6
 8006a88:	0020      	movs	r0, r4
 8006a8a:	4939      	ldr	r1, [pc, #228]	; (8006b70 <setCommand+0x3a4>)
 8006a8c:	f00e fd2f 	bl	80154ee <strncmp>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d000      	beq.n	8006a96 <setCommand+0x2ca>
 8006a94:	e1cb      	b.n	8006e2e <setCommand+0x662>
			temp81 =SUNDAY;
 8006a96:	2607      	movs	r6, #7
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006a98:	682c      	ldr	r4, [r5, #0]
 8006a9a:	2207      	movs	r2, #7
 8006a9c:	0020      	movs	r0, r4
 8006a9e:	4935      	ldr	r1, [pc, #212]	; (8006b74 <setCommand+0x3a8>)
 8006aa0:	f00e fd25 	bl	80154ee <strncmp>
			temp82 =JANUARY;
 8006aa4:	2501      	movs	r5, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d06b      	beq.n	8006b82 <setCommand+0x3b6>
 8006aaa:	7827      	ldrb	r7, [r4, #0]
 8006aac:	2f31      	cmp	r7, #49	; 0x31
 8006aae:	d102      	bne.n	8006ab6 <setCommand+0x2ea>
 8006ab0:	7863      	ldrb	r3, [r4, #1]
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d065      	beq.n	8006b82 <setCommand+0x3b6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006ab6:	2208      	movs	r2, #8
 8006ab8:	0020      	movs	r0, r4
 8006aba:	492f      	ldr	r1, [pc, #188]	; (8006b78 <setCommand+0x3ac>)
 8006abc:	f00e fd17 	bl	80154ee <strncmp>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d05d      	beq.n	8006b80 <setCommand+0x3b4>
 8006ac4:	2f32      	cmp	r7, #50	; 0x32
 8006ac6:	d102      	bne.n	8006ace <setCommand+0x302>
 8006ac8:	7863      	ldrb	r3, [r4, #1]
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d058      	beq.n	8006b80 <setCommand+0x3b4>
 8006ace:	2700      	movs	r7, #0
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006ad0:	2205      	movs	r2, #5
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	4929      	ldr	r1, [pc, #164]	; (8006b7c <setCommand+0x3b0>)
 8006ad6:	f00e fd0a 	bl	80154ee <strncmp>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d100      	bne.n	8006ae0 <setCommand+0x314>
 8006ade:	e194      	b.n	8006e0a <setCommand+0x63e>
 8006ae0:	7823      	ldrb	r3, [r4, #0]
 8006ae2:	2b33      	cmp	r3, #51	; 0x33
 8006ae4:	d000      	beq.n	8006ae8 <setCommand+0x31c>
 8006ae6:	e10d      	b.n	8006d04 <setCommand+0x538>
 8006ae8:	7863      	ldrb	r3, [r4, #1]
			temp82 =MARCH;
 8006aea:	2503      	movs	r5, #3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d000      	beq.n	8006af2 <setCommand+0x326>
 8006af0:	e108      	b.n	8006d04 <setCommand+0x538>
		if(result == BOS_OK){
 8006af2:	2f00      	cmp	r7, #0
 8006af4:	d045      	beq.n	8006b82 <setCommand+0x3b6>
	else if(result == BOS_ERR_WrongValue)
 8006af6:	2f68      	cmp	r7, #104	; 0x68
 8006af8:	d000      	beq.n	8006afc <setCommand+0x330>
 8006afa:	e6e3      	b.n	80068c4 <setCommand+0xf8>
 8006afc:	e6dd      	b.n	80068ba <setCommand+0xee>
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	20001328 	.word	0x20001328
 8006b04:	0801c178 	.word	0x0801c178
 8006b08:	0801c3f0 	.word	0x0801c3f0
 8006b0c:	0801c3f8 	.word	0x0801c3f8
 8006b10:	0801c200 	.word	0x0801c200
 8006b14:	20001334 	.word	0x20001334
 8006b18:	2000133c 	.word	0x2000133c
 8006b1c:	20001340 	.word	0x20001340
 8006b20:	20001344 	.word	0x20001344
 8006b24:	0801c29c 	.word	0x0801c29c
 8006b28:	0801c180 	.word	0x0801c180
 8006b2c:	0801b5ac 	.word	0x0801b5ac
 8006b30:	0801c2ec 	.word	0x0801c2ec
 8006b34:	0801c2f4 	.word	0x0801c2f4
 8006b38:	0801c190 	.word	0x0801c190
 8006b3c:	20006ab0 	.word	0x20006ab0
 8006b40:	0801c198 	.word	0x0801c198
 8006b44:	0801c1a0 	.word	0x0801c1a0
 8006b48:	0801c1ac 	.word	0x0801c1ac
 8006b4c:	0801c1b8 	.word	0x0801c1b8
 8006b50:	0801c1c8 	.word	0x0801c1c8
 8006b54:	0801c1dc 	.word	0x0801c1dc
 8006b58:	0801c400 	.word	0x0801c400
 8006b5c:	0801c408 	.word	0x0801c408
 8006b60:	0801c410 	.word	0x0801c410
 8006b64:	0801c41c 	.word	0x0801c41c
 8006b68:	0801c428 	.word	0x0801c428
 8006b6c:	0801c430 	.word	0x0801c430
 8006b70:	0801c43c 	.word	0x0801c43c
 8006b74:	0801c4c4 	.word	0x0801c4c4
 8006b78:	0801c4cc 	.word	0x0801c4cc
 8006b7c:	0801c448 	.word	0x0801c448
			temp82 =FEBRUARY;
 8006b80:	2502      	movs	r5, #2
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006b82:	466b      	mov	r3, sp
 8006b84:	7f1c      	ldrb	r4, [r3, #28]
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006b86:	1e63      	subs	r3, r4, #1
 8006b88:	2b1e      	cmp	r3, #30
 8006b8a:	d900      	bls.n	8006b8e <setCommand+0x3c2>
 8006b8c:	e695      	b.n	80068ba <setCommand+0xee>
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006b8e:	4653      	mov	r3, sl
 8006b90:	b29f      	uxth	r7, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006b92:	4bd3      	ldr	r3, [pc, #844]	; (8006ee0 <setCommand+0x714>)
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	2b64      	cmp	r3, #100	; 0x64
 8006b98:	d900      	bls.n	8006b9c <setCommand+0x3d0>
 8006b9a:	e68e      	b.n	80068ba <setCommand+0xee>
				GetTimeDate();
 8006b9c:	f007 fafc 	bl	800e198 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006ba0:	220c      	movs	r2, #12
 8006ba2:	4bd0      	ldr	r3, [pc, #832]	; (8006ee4 <setCommand+0x718>)
 8006ba4:	0021      	movs	r1, r4
 8006ba6:	569a      	ldrsb	r2, [r3, r2]
 8006ba8:	0028      	movs	r0, r5
 8006baa:	9204      	str	r2, [sp, #16]
 8006bac:	7cda      	ldrb	r2, [r3, #19]
 8006bae:	9203      	str	r2, [sp, #12]
 8006bb0:	7c9a      	ldrb	r2, [r3, #18]
 8006bb2:	9202      	str	r2, [sp, #8]
 8006bb4:	7c5a      	ldrb	r2, [r3, #17]
 8006bb6:	9201      	str	r2, [sp, #4]
 8006bb8:	7c1b      	ldrb	r3, [r3, #16]
 8006bba:	003a      	movs	r2, r7
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	0033      	movs	r3, r6
 8006bc0:	f007 fa8c 	bl	800e0dc <BOS_CalendarConfig>
 8006bc4:	0007      	movs	r7, r0
	if(result == BOS_OK){
 8006bc6:	2f00      	cmp	r7, #0
 8006bc8:	d000      	beq.n	8006bcc <setCommand+0x400>
 8006bca:	e155      	b.n	8006e78 <setCommand+0x6ac>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006bcc:	465b      	mov	r3, fp
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	9909      	ldr	r1, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006bd4:	4640      	mov	r0, r8
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006bd6:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006bd8:	464b      	mov	r3, r9
 8006bda:	49c3      	ldr	r1, [pc, #780]	; (8006ee8 <setCommand+0x71c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f00e fc43 	bl	8015468 <sprintf>
	return pdFALSE;
 8006be2:	e66f      	b.n	80068c4 <setCommand+0xf8>
			temp81 =MONDAY;
 8006be4:	2601      	movs	r6, #1
 8006be6:	e757      	b.n	8006a98 <setCommand+0x2cc>
			temp81 =FRIDAY;
 8006be8:	2605      	movs	r6, #5
 8006bea:	e755      	b.n	8006a98 <setCommand+0x2cc>
			temp81 =THURSDAY;
 8006bec:	2604      	movs	r6, #4
 8006bee:	e753      	b.n	8006a98 <setCommand+0x2cc>
			temp81 =WEDNESDAY;
 8006bf0:	2603      	movs	r6, #3
 8006bf2:	e751      	b.n	8006a98 <setCommand+0x2cc>
			temp81 =TUESDAY;
 8006bf4:	2602      	movs	r6, #2
 8006bf6:	e74f      	b.n	8006a98 <setCommand+0x2cc>
				BOS.response = BOS_RESPONSE_MSG;
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	4bba      	ldr	r3, [pc, #744]	; (8006ee4 <setCommand+0x718>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006bfc:	3015      	adds	r0, #21
 8006bfe:	79d9      	ldrb	r1, [r3, #7]
				BOS.response = BOS_RESPONSE_MSG;
 8006c00:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006c02:	2320      	movs	r3, #32
 8006c04:	0209      	lsls	r1, r1, #8
 8006c06:	4319      	orrs	r1, r3
 8006c08:	30ff      	adds	r0, #255	; 0xff
 8006c0a:	f001 f9ed 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 8006c0e:	e7dd      	b.n	8006bcc <setCommand+0x400>
				BOS.response = BOS_RESPONSE_CLI;
 8006c10:	2240      	movs	r2, #64	; 0x40
 8006c12:	4bb4      	ldr	r3, [pc, #720]	; (8006ee4 <setCommand+0x718>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006c14:	3015      	adds	r0, #21
 8006c16:	79d9      	ldrb	r1, [r3, #7]
				BOS.response = BOS_RESPONSE_CLI;
 8006c18:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	0209      	lsls	r1, r1, #8
 8006c1e:	4319      	orrs	r1, r3
 8006c20:	30ff      	adds	r0, #255	; 0xff
 8006c22:	f001 f9e1 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 8006c26:	e7d1      	b.n	8006bcc <setCommand+0x400>
				BOS.response = BOS_RESPONSE_ALL;
 8006c28:	2260      	movs	r2, #96	; 0x60
 8006c2a:	4bae      	ldr	r3, [pc, #696]	; (8006ee4 <setCommand+0x718>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006c2c:	3015      	adds	r0, #21
 8006c2e:	79d9      	ldrb	r1, [r3, #7]
				BOS.response = BOS_RESPONSE_ALL;
 8006c30:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006c32:	2360      	movs	r3, #96	; 0x60
 8006c34:	0209      	lsls	r1, r1, #8
 8006c36:	4319      	orrs	r1, r3
 8006c38:	30ff      	adds	r0, #255	; 0xff
 8006c3a:	f001 f9d5 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 8006c3e:	e7c5      	b.n	8006bcc <setCommand+0x400>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006c40:	7859      	ldrb	r1, [r3, #1]
				temp84 =RTC_AM;
 8006c42:	2501      	movs	r5, #1
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006c44:	296d      	cmp	r1, #109	; 0x6d
 8006c46:	d100      	bne.n	8006c4a <setCommand+0x47e>
 8006c48:	e631      	b.n	80068ae <setCommand+0xe2>
 8006c4a:	e62a      	b.n	80068a2 <setCommand+0xd6>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006c4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006c4e:	0020      	movs	r0, r4
 8006c50:	002a      	movs	r2, r5
 8006c52:	49a6      	ldr	r1, [pc, #664]	; (8006eec <setCommand+0x720>)
 8006c54:	f00e fc4b 	bl	80154ee <strncmp>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d04d      	beq.n	8006cf8 <setCommand+0x52c>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006c5c:	002a      	movs	r2, r5
 8006c5e:	0020      	movs	r0, r4
 8006c60:	49a3      	ldr	r1, [pc, #652]	; (8006ef0 <setCommand+0x724>)
 8006c62:	f00e fc44 	bl	80154ee <strncmp>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d03a      	beq.n	8006ce0 <setCommand+0x514>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006c6a:	002a      	movs	r2, r5
 8006c6c:	0039      	movs	r1, r7
 8006c6e:	0020      	movs	r0, r4
 8006c70:	f00e fc3d 	bl	80154ee <strncmp>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d027      	beq.n	8006cc8 <setCommand+0x4fc>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006c78:	002a      	movs	r2, r5
 8006c7a:	0020      	movs	r0, r4
 8006c7c:	499d      	ldr	r1, [pc, #628]	; (8006ef4 <setCommand+0x728>)
 8006c7e:	f00e fc36 	bl	80154ee <strncmp>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d000      	beq.n	8006c88 <setCommand+0x4bc>
 8006c86:	e618      	b.n	80068ba <setCommand+0xee>
				BOS.trace =TRACE_NONE;
 8006c88:	4b96      	ldr	r3, [pc, #600]	; (8006ee4 <setCommand+0x718>)
 8006c8a:	71d8      	strb	r0, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006c8c:	3015      	adds	r0, #21
 8006c8e:	7999      	ldrb	r1, [r3, #6]
 8006c90:	30ff      	adds	r0, #255	; 0xff
 8006c92:	f001 f9a9 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 8006c96:	e799      	b.n	8006bcc <setCommand+0x400>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006c98:	b2f6      	uxtb	r6, r6
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006c9a:	2e3b      	cmp	r6, #59	; 0x3b
 8006c9c:	d900      	bls.n	8006ca0 <setCommand+0x4d4>
 8006c9e:	e60c      	b.n	80068ba <setCommand+0xee>
				GetTimeDate();
 8006ca0:	f007 fa7a 	bl	800e198 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006ca4:	4b8f      	ldr	r3, [pc, #572]	; (8006ee4 <setCommand+0x718>)
 8006ca6:	7d1a      	ldrb	r2, [r3, #20]
 8006ca8:	7d59      	ldrb	r1, [r3, #21]
 8006caa:	4694      	mov	ip, r2
 8006cac:	7d98      	ldrb	r0, [r3, #22]
 8006cae:	8b1a      	ldrh	r2, [r3, #24]
 8006cb0:	7b1b      	ldrb	r3, [r3, #12]
 8006cb2:	9701      	str	r7, [sp, #4]
 8006cb4:	b25b      	sxtb	r3, r3
 8006cb6:	9304      	str	r3, [sp, #16]
 8006cb8:	9503      	str	r5, [sp, #12]
 8006cba:	4663      	mov	r3, ip
 8006cbc:	9402      	str	r4, [sp, #8]
 8006cbe:	9600      	str	r6, [sp, #0]
 8006cc0:	f007 fa0c 	bl	800e0dc <BOS_CalendarConfig>
 8006cc4:	0007      	movs	r7, r0
 8006cc6:	e77e      	b.n	8006bc6 <setCommand+0x3fa>
				BOS.trace =TRACE_RESPONSE;
 8006cc8:	2202      	movs	r2, #2
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006cca:	2180      	movs	r1, #128	; 0x80
				BOS.trace =TRACE_RESPONSE;
 8006ccc:	4b85      	ldr	r3, [pc, #532]	; (8006ee4 <setCommand+0x718>)
 8006cce:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006cd0:	799b      	ldrb	r3, [r3, #6]
 8006cd2:	0089      	lsls	r1, r1, #2
 8006cd4:	3015      	adds	r0, #21
 8006cd6:	4319      	orrs	r1, r3
 8006cd8:	30ff      	adds	r0, #255	; 0xff
 8006cda:	f001 f985 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 8006cde:	e775      	b.n	8006bcc <setCommand+0x400>
				BOS.trace =TRACE_MESSAGE;
 8006ce0:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006ce2:	2180      	movs	r1, #128	; 0x80
				BOS.trace =TRACE_MESSAGE;
 8006ce4:	4b7f      	ldr	r3, [pc, #508]	; (8006ee4 <setCommand+0x718>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006ce6:	0049      	lsls	r1, r1, #1
				BOS.trace =TRACE_MESSAGE;
 8006ce8:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006cea:	799b      	ldrb	r3, [r3, #6]
 8006cec:	3015      	adds	r0, #21
 8006cee:	4319      	orrs	r1, r3
 8006cf0:	30ff      	adds	r0, #255	; 0xff
 8006cf2:	f001 f979 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 8006cf6:	e769      	b.n	8006bcc <setCommand+0x400>
				BOS.trace =TRACE_BOTH;
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	4b7a      	ldr	r3, [pc, #488]	; (8006ee4 <setCommand+0x718>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006cfc:	21c0      	movs	r1, #192	; 0xc0
				BOS.trace =TRACE_BOTH;
 8006cfe:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006d00:	799b      	ldrb	r3, [r3, #6]
 8006d02:	e7e6      	b.n	8006cd2 <setCommand+0x506>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006d04:	2205      	movs	r2, #5
 8006d06:	0020      	movs	r0, r4
 8006d08:	497b      	ldr	r1, [pc, #492]	; (8006ef8 <setCommand+0x72c>)
 8006d0a:	f00e fbf0 	bl	80154ee <strncmp>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d100      	bne.n	8006d14 <setCommand+0x548>
 8006d12:	e08a      	b.n	8006e2a <setCommand+0x65e>
 8006d14:	2202      	movs	r2, #2
 8006d16:	0020      	movs	r0, r4
 8006d18:	4978      	ldr	r1, [pc, #480]	; (8006efc <setCommand+0x730>)
 8006d1a:	f00e fbe8 	bl	80154ee <strncmp>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d100      	bne.n	8006d24 <setCommand+0x558>
 8006d22:	e082      	b.n	8006e2a <setCommand+0x65e>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006d24:	2203      	movs	r2, #3
 8006d26:	0020      	movs	r0, r4
 8006d28:	4975      	ldr	r1, [pc, #468]	; (8006f00 <setCommand+0x734>)
 8006d2a:	f00e fbe0 	bl	80154ee <strncmp>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d079      	beq.n	8006e26 <setCommand+0x65a>
 8006d32:	2202      	movs	r2, #2
 8006d34:	0020      	movs	r0, r4
 8006d36:	4973      	ldr	r1, [pc, #460]	; (8006f04 <setCommand+0x738>)
 8006d38:	f00e fbd9 	bl	80154ee <strncmp>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d072      	beq.n	8006e26 <setCommand+0x65a>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006d40:	2204      	movs	r2, #4
 8006d42:	0020      	movs	r0, r4
 8006d44:	4970      	ldr	r1, [pc, #448]	; (8006f08 <setCommand+0x73c>)
 8006d46:	f00e fbd2 	bl	80154ee <strncmp>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d069      	beq.n	8006e22 <setCommand+0x656>
 8006d4e:	2202      	movs	r2, #2
 8006d50:	0020      	movs	r0, r4
 8006d52:	496e      	ldr	r1, [pc, #440]	; (8006f0c <setCommand+0x740>)
 8006d54:	f00e fbcb 	bl	80154ee <strncmp>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d062      	beq.n	8006e22 <setCommand+0x656>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	0020      	movs	r0, r4
 8006d60:	496b      	ldr	r1, [pc, #428]	; (8006f10 <setCommand+0x744>)
 8006d62:	f00e fbc4 	bl	80154ee <strncmp>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d059      	beq.n	8006e1e <setCommand+0x652>
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	0020      	movs	r0, r4
 8006d6e:	4969      	ldr	r1, [pc, #420]	; (8006f14 <setCommand+0x748>)
 8006d70:	f00e fbbd 	bl	80154ee <strncmp>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d052      	beq.n	8006e1e <setCommand+0x652>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006d78:	2205      	movs	r2, #5
 8006d7a:	0020      	movs	r0, r4
 8006d7c:	4966      	ldr	r1, [pc, #408]	; (8006f18 <setCommand+0x74c>)
 8006d7e:	f00e fbb6 	bl	80154ee <strncmp>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d049      	beq.n	8006e1a <setCommand+0x64e>
 8006d86:	2202      	movs	r2, #2
 8006d88:	0020      	movs	r0, r4
 8006d8a:	4964      	ldr	r1, [pc, #400]	; (8006f1c <setCommand+0x750>)
 8006d8c:	f00e fbaf 	bl	80154ee <strncmp>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d042      	beq.n	8006e1a <setCommand+0x64e>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006d94:	2209      	movs	r2, #9
 8006d96:	0020      	movs	r0, r4
 8006d98:	4961      	ldr	r1, [pc, #388]	; (8006f20 <setCommand+0x754>)
 8006d9a:	f00e fba8 	bl	80154ee <strncmp>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d039      	beq.n	8006e16 <setCommand+0x64a>
 8006da2:	2202      	movs	r2, #2
 8006da4:	0020      	movs	r0, r4
 8006da6:	495f      	ldr	r1, [pc, #380]	; (8006f24 <setCommand+0x758>)
 8006da8:	f00e fba1 	bl	80154ee <strncmp>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d032      	beq.n	8006e16 <setCommand+0x64a>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006db0:	2207      	movs	r2, #7
 8006db2:	0020      	movs	r0, r4
 8006db4:	495c      	ldr	r1, [pc, #368]	; (8006f28 <setCommand+0x75c>)
 8006db6:	f00e fb9a 	bl	80154ee <strncmp>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d029      	beq.n	8006e12 <setCommand+0x646>
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	0020      	movs	r0, r4
 8006dc2:	495a      	ldr	r1, [pc, #360]	; (8006f2c <setCommand+0x760>)
 8006dc4:	f00e fb93 	bl	80154ee <strncmp>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d022      	beq.n	8006e12 <setCommand+0x646>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006dcc:	2208      	movs	r2, #8
 8006dce:	0020      	movs	r0, r4
 8006dd0:	4957      	ldr	r1, [pc, #348]	; (8006f30 <setCommand+0x764>)
 8006dd2:	f00e fb8c 	bl	80154ee <strncmp>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d019      	beq.n	8006e0e <setCommand+0x642>
 8006dda:	2202      	movs	r2, #2
 8006ddc:	0020      	movs	r0, r4
 8006dde:	4955      	ldr	r1, [pc, #340]	; (8006f34 <setCommand+0x768>)
 8006de0:	f00e fb85 	bl	80154ee <strncmp>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d012      	beq.n	8006e0e <setCommand+0x642>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006de8:	2208      	movs	r2, #8
 8006dea:	0020      	movs	r0, r4
 8006dec:	4952      	ldr	r1, [pc, #328]	; (8006f38 <setCommand+0x76c>)
 8006dee:	f00e fb7e 	bl	80154ee <strncmp>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d007      	beq.n	8006e06 <setCommand+0x63a>
 8006df6:	2202      	movs	r2, #2
 8006df8:	0020      	movs	r0, r4
 8006dfa:	4950      	ldr	r1, [pc, #320]	; (8006f3c <setCommand+0x770>)
 8006dfc:	f00e fb77 	bl	80154ee <strncmp>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d000      	beq.n	8006e06 <setCommand+0x63a>
 8006e04:	e559      	b.n	80068ba <setCommand+0xee>
			temp82 =DECEMBER;
 8006e06:	250c      	movs	r5, #12
 8006e08:	e673      	b.n	8006af2 <setCommand+0x326>
			temp82 =MARCH;
 8006e0a:	2503      	movs	r5, #3
 8006e0c:	e671      	b.n	8006af2 <setCommand+0x326>
			temp82 =NOVEMBER;
 8006e0e:	250b      	movs	r5, #11
 8006e10:	e66f      	b.n	8006af2 <setCommand+0x326>
			temp82 =OCTOBER;
 8006e12:	250a      	movs	r5, #10
 8006e14:	e66d      	b.n	8006af2 <setCommand+0x326>
			temp82 =SEPTEMBER;
 8006e16:	2509      	movs	r5, #9
 8006e18:	e66b      	b.n	8006af2 <setCommand+0x326>
			temp82 =AUGUST;
 8006e1a:	2508      	movs	r5, #8
 8006e1c:	e669      	b.n	8006af2 <setCommand+0x326>
			temp82 =JULY;
 8006e1e:	2507      	movs	r5, #7
 8006e20:	e667      	b.n	8006af2 <setCommand+0x326>
			temp82 =JUNE;
 8006e22:	2506      	movs	r5, #6
 8006e24:	e665      	b.n	8006af2 <setCommand+0x326>
			temp82 =MAY;
 8006e26:	2505      	movs	r5, #5
 8006e28:	e663      	b.n	8006af2 <setCommand+0x326>
			temp82 =APRIL;
 8006e2a:	2504      	movs	r5, #4
 8006e2c:	e661      	b.n	8006af2 <setCommand+0x326>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006e2e:	682c      	ldr	r4, [r5, #0]
 8006e30:	2207      	movs	r2, #7
 8006e32:	0020      	movs	r0, r4
 8006e34:	4942      	ldr	r1, [pc, #264]	; (8006f40 <setCommand+0x774>)
 8006e36:	f00e fb5a 	bl	80154ee <strncmp>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d100      	bne.n	8006e40 <setCommand+0x674>
 8006e3e:	e53c      	b.n	80068ba <setCommand+0xee>
 8006e40:	2202      	movs	r2, #2
 8006e42:	0020      	movs	r0, r4
 8006e44:	493f      	ldr	r1, [pc, #252]	; (8006f44 <setCommand+0x778>)
 8006e46:	f00e fb52 	bl	80154ee <strncmp>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d100      	bne.n	8006e50 <setCommand+0x684>
 8006e4e:	e534      	b.n	80068ba <setCommand+0xee>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006e50:	2208      	movs	r2, #8
 8006e52:	0020      	movs	r0, r4
 8006e54:	493c      	ldr	r1, [pc, #240]	; (8006f48 <setCommand+0x77c>)
 8006e56:	f00e fb4a 	bl	80154ee <strncmp>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d100      	bne.n	8006e60 <setCommand+0x694>
 8006e5e:	e52c      	b.n	80068ba <setCommand+0xee>
 8006e60:	2202      	movs	r2, #2
 8006e62:	0020      	movs	r0, r4
 8006e64:	4939      	ldr	r1, [pc, #228]	; (8006f4c <setCommand+0x780>)
 8006e66:	f00e fb42 	bl	80154ee <strncmp>
			result =BOS_ERR_WrongValue;
 8006e6a:	2768      	movs	r7, #104	; 0x68
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d000      	beq.n	8006e72 <setCommand+0x6a6>
 8006e70:	e62e      	b.n	8006ad0 <setCommand+0x304>
 8006e72:	e522      	b.n	80068ba <setCommand+0xee>
			temp81 =SATURDAY;
 8006e74:	2606      	movs	r6, #6
 8006e76:	e60f      	b.n	8006a98 <setCommand+0x2cc>
	else if(result == BOS_ERR_WrongParam)
 8006e78:	2f67      	cmp	r7, #103	; 0x67
 8006e7a:	d100      	bne.n	8006e7e <setCommand+0x6b2>
 8006e7c:	e4d6      	b.n	800682c <setCommand+0x60>
 8006e7e:	e63a      	b.n	8006af6 <setCommand+0x32a>
			temp16 =atoi((const char* )pcParameterString2);
 8006e80:	0020      	movs	r0, r4
 8006e82:	f00d fe22 	bl	8014aca <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006e86:	1e43      	subs	r3, r0, #1
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2bfe      	cmp	r3, #254	; 0xfe
 8006e8c:	d900      	bls.n	8006e90 <setCommand+0x6c4>
 8006e8e:	e514      	b.n	80068ba <setCommand+0xee>
				BOS.buttons.minInterClickTime =temp16;
 8006e90:	b2c1      	uxtb	r1, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006e92:	2018      	movs	r0, #24
				BOS.buttons.minInterClickTime =temp16;
 8006e94:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <setCommand+0x718>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006e96:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.minInterClickTime =temp16;
 8006e98:	7119      	strb	r1, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006e9a:	795b      	ldrb	r3, [r3, #5]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	4319      	orrs	r1, r3
 8006ea0:	f001 f8a2 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 8006ea4:	e692      	b.n	8006bcc <setCommand+0x400>
			temp16 =atoi((const char* )pcParameterString2);
 8006ea6:	0020      	movs	r0, r4
 8006ea8:	f00d fe0f 	bl	8014aca <atoi>
 8006eac:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006eae:	2900      	cmp	r1, #0
 8006eb0:	d100      	bne.n	8006eb4 <setCommand+0x6e8>
 8006eb2:	e502      	b.n	80068ba <setCommand+0xee>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006eb4:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 8006eb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <setCommand+0x718>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006eb8:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 8006eba:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006ebc:	f001 f894 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 8006ec0:	e684      	b.n	8006bcc <setCommand+0x400>
			temp16 =atoi((const char* )pcParameterString2);
 8006ec2:	0020      	movs	r0, r4
 8006ec4:	f00d fe01 	bl	8014aca <atoi>
 8006ec8:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006eca:	2900      	cmp	r1, #0
 8006ecc:	d100      	bne.n	8006ed0 <setCommand+0x704>
 8006ece:	e4f4      	b.n	80068ba <setCommand+0xee>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006ed0:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 8006ed2:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <setCommand+0x718>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006ed4:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 8006ed6:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006ed8:	f001 f886 	bl	8007fe8 <EE_WriteVariable>
	if(result == BOS_OK){
 8006edc:	e676      	b.n	8006bcc <setCommand+0x400>
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	fffff830 	.word	0xfffff830
 8006ee4:	20006ab0 	.word	0x20006ab0
 8006ee8:	0801c2f8 	.word	0x0801c2f8
 8006eec:	0801b5ac 	.word	0x0801b5ac
 8006ef0:	0801c2ec 	.word	0x0801c2ec
 8006ef4:	0801c190 	.word	0x0801c190
 8006ef8:	0801c450 	.word	0x0801c450
 8006efc:	0801c458 	.word	0x0801c458
 8006f00:	0801c45c 	.word	0x0801c45c
 8006f04:	0801c460 	.word	0x0801c460
 8006f08:	0801c464 	.word	0x0801c464
 8006f0c:	0801c46c 	.word	0x0801c46c
 8006f10:	0801c470 	.word	0x0801c470
 8006f14:	0801c478 	.word	0x0801c478
 8006f18:	0801c47c 	.word	0x0801c47c
 8006f1c:	0801c484 	.word	0x0801c484
 8006f20:	0801c488 	.word	0x0801c488
 8006f24:	0801c494 	.word	0x0801c494
 8006f28:	0801c498 	.word	0x0801c498
 8006f2c:	0801c4a0 	.word	0x0801c4a0
 8006f30:	0801c4a4 	.word	0x0801c4a4
 8006f34:	0801c4b0 	.word	0x0801c4b0
 8006f38:	0801c4b4 	.word	0x0801c4b4
 8006f3c:	0801c4c0 	.word	0x0801c4c0
 8006f40:	0801c4c4 	.word	0x0801c4c4
 8006f44:	0801c444 	.word	0x0801c444
 8006f48:	0801c4cc 	.word	0x0801c4cc
 8006f4c:	0801c4d8 	.word	0x0801c4d8
			temp2 =atoi((const char* )pcParameterString2);
 8006f50:	0020      	movs	r0, r4
 8006f52:	f00d fdba 	bl	8014aca <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006f56:	23e1      	movs	r3, #225	; 0xe1
 8006f58:	031b      	lsls	r3, r3, #12
 8006f5a:	4298      	cmp	r0, r3
 8006f5c:	d900      	bls.n	8006f60 <setCommand+0x794>
 8006f5e:	e4ac      	b.n	80068ba <setCommand+0xee>
				BOS.clibaudrate =temp2;
 8006f60:	4c13      	ldr	r4, [pc, #76]	; (8006fb0 <setCommand+0x7e4>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006f62:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006f64:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006f66:	208c      	movs	r0, #140	; 0x8c
 8006f68:	0040      	lsls	r0, r0, #1
 8006f6a:	f001 f83d 	bl	8007fe8 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006f6e:	201a      	movs	r0, #26
 8006f70:	8961      	ldrh	r1, [r4, #10]
 8006f72:	30ff      	adds	r0, #255	; 0xff
 8006f74:	f001 f838 	bl	8007fe8 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006f78:	465b      	mov	r3, fp
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006f7e:	490d      	ldr	r1, [pc, #52]	; (8006fb4 <setCommand+0x7e8>)
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006f80:	54d7      	strb	r7, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006f82:	464b      	mov	r3, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f00e fa6e 	bl	8015468 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	f7f9 f8c3 	bl	8000118 <strlen>
 8006f92:	4643      	mov	r3, r8
 8006f94:	0004      	movs	r4, r0
 8006f96:	2230      	movs	r2, #48	; 0x30
 8006f98:	4907      	ldr	r1, [pc, #28]	; (8006fb8 <setCommand+0x7ec>)
 8006f9a:	1818      	adds	r0, r3, r0
 8006f9c:	f00e f832 	bl	8015004 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006fa0:	0020      	movs	r0, r4
 8006fa2:	302f      	adds	r0, #47	; 0x2f
 8006fa4:	22b2      	movs	r2, #178	; 0xb2
 8006fa6:	4905      	ldr	r1, [pc, #20]	; (8006fbc <setCommand+0x7f0>)
 8006fa8:	4440      	add	r0, r8
 8006faa:	f00e f82b 	bl	8015004 <memcpy>
 8006fae:	e489      	b.n	80068c4 <setCommand+0xf8>
 8006fb0:	20006ab0 	.word	0x20006ab0
 8006fb4:	0801c2f8 	.word	0x0801c2f8
 8006fb8:	0801c30c 	.word	0x0801c30c
 8006fbc:	0801c33c 	.word	0x0801c33c

08006fc0 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006fc0:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fc2:	b530      	push	{r4, r5, lr}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	0005      	movs	r5, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006fc8:	9301      	str	r3, [sp, #4]
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fca:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	d010      	beq.n	8006ff2 <removebuttonCommand+0x32>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	aa01      	add	r2, sp, #4
 8006fd4:	f008 f962 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006fd8:	2300      	movs	r3, #0
 8006fda:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006fdc:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006fde:	2b70      	cmp	r3, #112	; 0x70
 8006fe0:	d010      	beq.n	8007004 <removebuttonCommand+0x44>
	result =RemovePortButton(port);
 8006fe2:	0020      	movs	r0, r4
 8006fe4:	f001 fc34 	bl	8008850 <RemovePortButton>
	if(result == BOS_OK){
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d004      	beq.n	8006ff6 <removebuttonCommand+0x36>
}
 8006fec:	2000      	movs	r0, #0
 8006fee:	b003      	add	sp, #12
 8006ff0:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8006ff2:	b672      	cpsid	i
 8006ff4:	e7fe      	b.n	8006ff4 <removebuttonCommand+0x34>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006ff6:	0023      	movs	r3, r4
 8006ff8:	0022      	movs	r2, r4
 8006ffa:	0028      	movs	r0, r5
 8006ffc:	4906      	ldr	r1, [pc, #24]	; (8007018 <removebuttonCommand+0x58>)
 8006ffe:	f00e fa33 	bl	8015468 <sprintf>
 8007002:	e7f3      	b.n	8006fec <removebuttonCommand+0x2c>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8007004:	3001      	adds	r0, #1
 8007006:	f00d fd66 	bl	8014ad6 <atol>
 800700a:	b2c4      	uxtb	r4, r0
	result =RemovePortButton(port);
 800700c:	0020      	movs	r0, r4
 800700e:	f001 fc1f 	bl	8008850 <RemovePortButton>
	if(result == BOS_OK){
 8007012:	2800      	cmp	r0, #0
 8007014:	d1ea      	bne.n	8006fec <removebuttonCommand+0x2c>
 8007016:	e7ee      	b.n	8006ff6 <removebuttonCommand+0x36>
 8007018:	0801c4dc 	.word	0x0801c4dc

0800701c <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800701c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800701e:	4647      	mov	r7, r8
 8007020:	46ce      	mov	lr, r9
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8007022:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007024:	b580      	push	{r7, lr}
 8007026:	b085      	sub	sp, #20
 8007028:	1e06      	subs	r6, r0, #0
 800702a:	4690      	mov	r8, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800702c:	9302      	str	r3, [sp, #8]
 800702e:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007030:	d03f      	beq.n	80070b2 <addbuttonCommand+0x96>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007032:	2101      	movs	r1, #1
 8007034:	aa02      	add	r2, sp, #8
 8007036:	4640      	mov	r0, r8
 8007038:	f008 f930 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800703c:	9b02      	ldr	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800703e:	4f28      	ldr	r7, [pc, #160]	; (80070e0 <addbuttonCommand+0xc4>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8007040:	001a      	movs	r2, r3
 8007042:	4928      	ldr	r1, [pc, #160]	; (80070e4 <addbuttonCommand+0xc8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007044:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8007046:	4699      	mov	r9, r3
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007048:	6038      	str	r0, [r7, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800704a:	f00e fa50 	bl	80154ee <strncmp>
		type =MOMENTARY_NO;
 800704e:	2401      	movs	r4, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8007050:	2800      	cmp	r0, #0
 8007052:	d115      	bne.n	8007080 <addbuttonCommand+0x64>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007054:	2102      	movs	r1, #2
 8007056:	4640      	mov	r0, r8
 8007058:	aa03      	add	r2, sp, #12
 800705a:	f008 f91f 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800705e:	2300      	movs	r3, #0
 8007060:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8007062:	2500      	movs	r5, #0
	if(pcParameterString2[0] == 'p'){
 8007064:	2b70      	cmp	r3, #112	; 0x70
 8007066:	d026      	beq.n	80070b6 <addbuttonCommand+0x9a>
	result =AddPortButton(type,port);
 8007068:	0029      	movs	r1, r5
 800706a:	0020      	movs	r0, r4
 800706c:	f001 fb76 	bl	800875c <AddPortButton>
	if(result == BOS_OK){
 8007070:	2800      	cmp	r0, #0
 8007072:	d02a      	beq.n	80070ca <addbuttonCommand+0xae>
}
 8007074:	2000      	movs	r0, #0
 8007076:	b005      	add	sp, #20
 8007078:	bcc0      	pop	{r6, r7}
 800707a:	46b9      	mov	r9, r7
 800707c:	46b0      	mov	r8, r6
 800707e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8007080:	464a      	mov	r2, r9
 8007082:	0028      	movs	r0, r5
 8007084:	4918      	ldr	r1, [pc, #96]	; (80070e8 <addbuttonCommand+0xcc>)
 8007086:	f00e fa32 	bl	80154ee <strncmp>
		type =MOMENTARY_NC;
 800708a:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 800708c:	2800      	cmp	r0, #0
 800708e:	d0e1      	beq.n	8007054 <addbuttonCommand+0x38>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8007090:	464a      	mov	r2, r9
 8007092:	0028      	movs	r0, r5
 8007094:	4915      	ldr	r1, [pc, #84]	; (80070ec <addbuttonCommand+0xd0>)
 8007096:	f00e fa2a 	bl	80154ee <strncmp>
		type =ONOFF_NO;
 800709a:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 800709c:	2800      	cmp	r0, #0
 800709e:	d0d9      	beq.n	8007054 <addbuttonCommand+0x38>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 80070a0:	464a      	mov	r2, r9
 80070a2:	0028      	movs	r0, r5
 80070a4:	4912      	ldr	r1, [pc, #72]	; (80070f0 <addbuttonCommand+0xd4>)
 80070a6:	f00e fa22 	bl	80154ee <strncmp>
		type =ONOFF_NC;
 80070aa:	4244      	negs	r4, r0
 80070ac:	4144      	adcs	r4, r0
 80070ae:	00a4      	lsls	r4, r4, #2
 80070b0:	e7d0      	b.n	8007054 <addbuttonCommand+0x38>
	configASSERT(pcWriteBuffer);
 80070b2:	b672      	cpsid	i
 80070b4:	e7fe      	b.n	80070b4 <addbuttonCommand+0x98>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 80070b6:	3001      	adds	r0, #1
 80070b8:	f00d fd0d 	bl	8014ad6 <atol>
 80070bc:	b2c5      	uxtb	r5, r0
	result =AddPortButton(type,port);
 80070be:	0029      	movs	r1, r5
 80070c0:	0020      	movs	r0, r4
 80070c2:	f001 fb4b 	bl	800875c <AddPortButton>
	if(result == BOS_OK){
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d1d4      	bne.n	8007074 <addbuttonCommand+0x58>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 80070ce:	4909      	ldr	r1, [pc, #36]	; (80070f4 <addbuttonCommand+0xd8>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 80070d0:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 80070d2:	002b      	movs	r3, r5
 80070d4:	0030      	movs	r0, r6
 80070d6:	9500      	str	r5, [sp, #0]
 80070d8:	f00e f9c6 	bl	8015468 <sprintf>
 80070dc:	e7ca      	b.n	8007074 <addbuttonCommand+0x58>
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	20001324 	.word	0x20001324
 80070e4:	0801c504 	.word	0x0801c504
 80070e8:	0801c514 	.word	0x0801c514
 80070ec:	0801c524 	.word	0x0801c524
 80070f0:	0801c530 	.word	0x0801c530
 80070f4:	0801c53c 	.word	0x0801c53c

080070f8 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070fa:	46de      	mov	lr, fp
 80070fc:	464e      	mov	r6, r9
 80070fe:	4645      	mov	r5, r8
 8007100:	4657      	mov	r7, sl
 8007102:	b5e0      	push	{r5, r6, r7, lr}
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8007104:	2500      	movs	r5, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007106:	b09b      	sub	sp, #108	; 0x6c
 8007108:	0006      	movs	r6, r0
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 800710a:	2100      	movs	r1, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800710c:	9009      	str	r0, [sp, #36]	; 0x24
 800710e:	0014      	movs	r4, r2
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8007110:	a812      	add	r0, sp, #72	; 0x48
 8007112:	2206      	movs	r2, #6
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8007114:	950a      	str	r5, [sp, #40]	; 0x28
 8007116:	950b      	str	r5, [sp, #44]	; 0x2c
 8007118:	950c      	str	r5, [sp, #48]	; 0x30
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 800711a:	950d      	str	r5, [sp, #52]	; 0x34
 800711c:	950e      	str	r5, [sp, #56]	; 0x38
 800711e:	950f      	str	r5, [sp, #60]	; 0x3c
	portBASE_TYPE xParameterStringLength7 =0;
 8007120:	9510      	str	r5, [sp, #64]	; 0x40
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8007122:	9511      	str	r5, [sp, #68]	; 0x44
 8007124:	f00d ff77 	bl	8015016 <memset>
 8007128:	2206      	movs	r2, #6
 800712a:	2100      	movs	r1, #0
 800712c:	a815      	add	r0, sp, #84	; 0x54
 800712e:	9514      	str	r5, [sp, #80]	; 0x50
 8007130:	f00d ff71 	bl	8015016 <memset>
 8007134:	2206      	movs	r2, #6
 8007136:	2100      	movs	r1, #0
 8007138:	a818      	add	r0, sp, #96	; 0x60
 800713a:	9517      	str	r5, [sp, #92]	; 0x5c
 800713c:	f00d ff6b 	bl	8015016 <memset>
	configASSERT(pcWriteBuffer);
 8007140:	2e00      	cmp	r6, #0
 8007142:	d100      	bne.n	8007146 <scastCommand+0x4e>
 8007144:	e081      	b.n	800724a <scastCommand+0x152>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007146:	2101      	movs	r1, #1
 8007148:	0020      	movs	r0, r4
 800714a:	aa0a      	add	r2, sp, #40	; 0x28
 800714c:	f008 f8a6 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8007150:	2300      	movs	r3, #0
 8007152:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8007154:	2700      	movs	r7, #0
	if(pcParameterString1[0] == 'P'){
 8007156:	2b50      	cmp	r3, #80	; 0x50
 8007158:	d100      	bne.n	800715c <scastCommand+0x64>
 800715a:	e078      	b.n	800724e <scastCommand+0x156>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800715c:	2102      	movs	r1, #2
 800715e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007160:	0020      	movs	r0, r4
 8007162:	f008 f89b 	bl	800f29c <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8007166:	ab11      	add	r3, sp, #68	; 0x44
 8007168:	469a      	mov	sl, r3
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800716a:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 800716c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800716e:	0018      	movs	r0, r3
 8007170:	f00e f9ce 	bl	8015510 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8007174:	4650      	mov	r0, sl
 8007176:	f7fd fcb5 	bl	8004ae4 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800717a:	aa0c      	add	r2, sp, #48	; 0x30
	srcM =(uint8_t )GetID(par1);
 800717c:	b2c3      	uxtb	r3, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800717e:	2103      	movs	r1, #3
 8007180:	0020      	movs	r0, r4
	srcM =(uint8_t )GetID(par1);
 8007182:	9307      	str	r3, [sp, #28]
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007184:	f008 f88a 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8007188:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 800718a:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 800718c:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 800718e:	4690      	mov	r8, r2
	if(pcParameterString3[0] == 'p'){
 8007190:	2b70      	cmp	r3, #112	; 0x70
 8007192:	d061      	beq.n	8007258 <scastCommand+0x160>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8007194:	2104      	movs	r1, #4
 8007196:	aa0d      	add	r2, sp, #52	; 0x34
 8007198:	0020      	movs	r0, r4
 800719a:	f008 f87f 	bl	800f29c <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 800719e:	ab14      	add	r3, sp, #80	; 0x50
 80071a0:	469b      	mov	fp, r3
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80071a2:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 80071a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071a6:	0018      	movs	r0, r3
 80071a8:	f00e f9b2 	bl	8015510 <strncpy>
	dstM =(uint8_t )GetID(par2);
 80071ac:	4658      	mov	r0, fp
 80071ae:	f7fd fc99 	bl	8004ae4 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80071b2:	2105      	movs	r1, #5
	dstM =(uint8_t )GetID(par2);
 80071b4:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80071b6:	aa0e      	add	r2, sp, #56	; 0x38
 80071b8:	0020      	movs	r0, r4
	dstM =(uint8_t )GetID(par2);
 80071ba:	9308      	str	r3, [sp, #32]
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80071bc:	f008 f86e 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 80071c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071c2:	4930      	ldr	r1, [pc, #192]	; (8007284 <scastCommand+0x18c>)
 80071c4:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80071c6:	0006      	movs	r6, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 80071c8:	4699      	mov	r9, r3
 80071ca:	f00e f990 	bl	80154ee <strncmp>
		direction =FORWARD;
 80071ce:	2500      	movs	r5, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d129      	bne.n	8007228 <scastCommand+0x130>
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 80071d4:	0031      	movs	r1, r6
 80071d6:	464a      	mov	r2, r9
 80071d8:	a817      	add	r0, sp, #92	; 0x5c
 80071da:	f00e f999 	bl	8015510 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 80071de:	2106      	movs	r1, #6
 80071e0:	aa0f      	add	r2, sp, #60	; 0x3c
 80071e2:	0020      	movs	r0, r4
 80071e4:	f008 f85a 	bl	800f29c <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 80071e8:	f00d fc75 	bl	8014ad6 <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 80071ec:	2107      	movs	r1, #7
 80071ee:	aa10      	add	r2, sp, #64	; 0x40
	count =(uint32_t )atol((char* )pcParameterString6);
 80071f0:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 80071f2:	0020      	movs	r0, r4
 80071f4:	f008 f852 	bl	800f29c <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 80071f8:	f00d fc6d 	bl	8014ad6 <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 80071fc:	2300      	movs	r3, #0
	timeout =(uint32_t )atol((char* )pcParameterString7);
 80071fe:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8007200:	9303      	str	r3, [sp, #12]
 8007202:	9002      	str	r0, [sp, #8]
 8007204:	4642      	mov	r2, r8
 8007206:	0038      	movs	r0, r7
 8007208:	9b08      	ldr	r3, [sp, #32]
 800720a:	9907      	ldr	r1, [sp, #28]
 800720c:	9601      	str	r6, [sp, #4]
 800720e:	9500      	str	r5, [sp, #0]
 8007210:	f002 fd66 	bl	8009ce0 <StartScastDMAStream>
	if(result == BOS_OK){
 8007214:	2800      	cmp	r0, #0
 8007216:	d025      	beq.n	8007264 <scastCommand+0x16c>
}
 8007218:	2000      	movs	r0, #0
 800721a:	b01b      	add	sp, #108	; 0x6c
 800721c:	bcf0      	pop	{r4, r5, r6, r7}
 800721e:	46bb      	mov	fp, r7
 8007220:	46b2      	mov	sl, r6
 8007222:	46a9      	mov	r9, r5
 8007224:	46a0      	mov	r8, r4
 8007226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8007228:	464a      	mov	r2, r9
 800722a:	0030      	movs	r0, r6
 800722c:	4916      	ldr	r1, [pc, #88]	; (8007288 <scastCommand+0x190>)
 800722e:	f00e f95e 	bl	80154ee <strncmp>
		direction =BACKWARD;
 8007232:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8007234:	2800      	cmp	r0, #0
 8007236:	d0cd      	beq.n	80071d4 <scastCommand+0xdc>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8007238:	464a      	mov	r2, r9
 800723a:	0030      	movs	r0, r6
 800723c:	4913      	ldr	r1, [pc, #76]	; (800728c <scastCommand+0x194>)
 800723e:	f00e f956 	bl	80154ee <strncmp>
		direction =BIDIRECTIONAL;
 8007242:	4245      	negs	r5, r0
 8007244:	4145      	adcs	r5, r0
 8007246:	006d      	lsls	r5, r5, #1
 8007248:	e7c4      	b.n	80071d4 <scastCommand+0xdc>
	configASSERT(pcWriteBuffer);
 800724a:	b672      	cpsid	i
 800724c:	e7fe      	b.n	800724c <scastCommand+0x154>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 800724e:	3001      	adds	r0, #1
 8007250:	f00d fc41 	bl	8014ad6 <atol>
 8007254:	b2c7      	uxtb	r7, r0
 8007256:	e781      	b.n	800715c <scastCommand+0x64>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007258:	3001      	adds	r0, #1
 800725a:	f00d fc3c 	bl	8014ad6 <atol>
 800725e:	b2c3      	uxtb	r3, r0
 8007260:	4698      	mov	r8, r3
 8007262:	e797      	b.n	8007194 <scastCommand+0x9c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8007264:	465b      	mov	r3, fp
 8007266:	9302      	str	r3, [sp, #8]
 8007268:	4643      	mov	r3, r8
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	4653      	mov	r3, sl
 800726e:	4908      	ldr	r1, [pc, #32]	; (8007290 <scastCommand+0x198>)
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007274:	003b      	movs	r3, r7
 8007276:	9404      	str	r4, [sp, #16]
 8007278:	9603      	str	r6, [sp, #12]
 800727a:	aa17      	add	r2, sp, #92	; 0x5c
 800727c:	f00e f8f4 	bl	8015468 <sprintf>
 8007280:	e7ca      	b.n	8007218 <scastCommand+0x120>
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	0801c570 	.word	0x0801c570
 8007288:	0801c578 	.word	0x0801c578
 800728c:	0801c584 	.word	0x0801c584
 8007290:	0801c594 	.word	0x0801c594

08007294 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007296:	0004      	movs	r4, r0
 8007298:	b083      	sub	sp, #12
	configASSERT(pcWriteBuffer);
 800729a:	2800      	cmp	r0, #0
 800729c:	d063      	beq.n	8007366 <infoCommand+0xd2>
	if(N > 1)
 800729e:	4d33      	ldr	r5, [pc, #204]	; (800736c <infoCommand+0xd8>)
 80072a0:	782a      	ldrb	r2, [r5, #0]
 80072a2:	2a01      	cmp	r2, #1
 80072a4:	d829      	bhi.n	80072fa <infoCommand+0x66>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 80072a6:	4932      	ldr	r1, [pc, #200]	; (8007370 <infoCommand+0xdc>)
 80072a8:	f00e f8de 	bl	8015468 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 80072ac:	2601      	movs	r6, #1
 80072ae:	0020      	movs	r0, r4
 80072b0:	f7f8 ff32 	bl	8000118 <strlen>
 80072b4:	4d2f      	ldr	r5, [pc, #188]	; (8007374 <infoCommand+0xe0>)
 80072b6:	4276      	negs	r6, r6
 80072b8:	2332      	movs	r3, #50	; 0x32
 80072ba:	b282      	uxth	r2, r0
 80072bc:	0021      	movs	r1, r4
 80072be:	7828      	ldrb	r0, [r5, #0]
 80072c0:	9600      	str	r6, [sp, #0]
 80072c2:	f007 f9c1 	bl	800e648 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 80072c6:	2213      	movs	r2, #19
 80072c8:	492b      	ldr	r1, [pc, #172]	; (8007378 <infoCommand+0xe4>)
 80072ca:	0020      	movs	r0, r4
 80072cc:	f00d fe9a 	bl	8015004 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 80072d0:	2332      	movs	r3, #50	; 0x32
 80072d2:	2212      	movs	r2, #18
 80072d4:	0021      	movs	r1, r4
 80072d6:	7828      	ldrb	r0, [r5, #0]
 80072d8:	9600      	str	r6, [sp, #0]
 80072da:	f007 f9b5 	bl	800e648 <writePxMutex>
	DisplayTopology(PcPort);
 80072de:	7828      	ldrb	r0, [r5, #0]
 80072e0:	f7fd f948 	bl	8004574 <DisplayTopology>
	DisplayPortsDir(PcPort);
 80072e4:	7828      	ldrb	r0, [r5, #0]
 80072e6:	f7fd fa15 	bl	8004714 <DisplayPortsDir>
	sprintf((char* )pcWriteBuffer," ");
 80072ea:	2202      	movs	r2, #2
 80072ec:	0020      	movs	r0, r4
 80072ee:	4923      	ldr	r1, [pc, #140]	; (800737c <infoCommand+0xe8>)
 80072f0:	f00d fe88 	bl	8015004 <memcpy>
}
 80072f4:	2000      	movs	r0, #0
 80072f6:	b003      	add	sp, #12
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 80072fa:	f7fd fd43 	bl	8004d84 <ReadPortsDir>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 80072fe:	782a      	ldrb	r2, [r5, #0]
 8007300:	491b      	ldr	r1, [pc, #108]	; (8007370 <infoCommand+0xdc>)
		result =ReadPortsDir();
 8007302:	0007      	movs	r7, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8007304:	0020      	movs	r0, r4
 8007306:	f00e f8af 	bl	8015468 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 800730a:	2601      	movs	r6, #1
 800730c:	0020      	movs	r0, r4
 800730e:	f7f8 ff03 	bl	8000118 <strlen>
 8007312:	4d18      	ldr	r5, [pc, #96]	; (8007374 <infoCommand+0xe0>)
 8007314:	4276      	negs	r6, r6
 8007316:	2332      	movs	r3, #50	; 0x32
 8007318:	b282      	uxth	r2, r0
 800731a:	0021      	movs	r1, r4
 800731c:	7828      	ldrb	r0, [r5, #0]
 800731e:	9600      	str	r6, [sp, #0]
 8007320:	f007 f992 	bl	800e648 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8007324:	2213      	movs	r2, #19
 8007326:	4914      	ldr	r1, [pc, #80]	; (8007378 <infoCommand+0xe4>)
 8007328:	0020      	movs	r0, r4
 800732a:	f00d fe6b 	bl	8015004 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 800732e:	2332      	movs	r3, #50	; 0x32
 8007330:	2212      	movs	r2, #18
 8007332:	0021      	movs	r1, r4
 8007334:	7828      	ldrb	r0, [r5, #0]
 8007336:	9600      	str	r6, [sp, #0]
 8007338:	f007 f986 	bl	800e648 <writePxMutex>
	DisplayTopology(PcPort);
 800733c:	7828      	ldrb	r0, [r5, #0]
 800733e:	f7fd f919 	bl	8004574 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8007342:	7828      	ldrb	r0, [r5, #0]
 8007344:	f7fd f9e6 	bl	8004714 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8007348:	2f02      	cmp	r7, #2
 800734a:	d1ce      	bne.n	80072ea <infoCommand+0x56>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 800734c:	2244      	movs	r2, #68	; 0x44
 800734e:	0020      	movs	r0, r4
 8007350:	490b      	ldr	r1, [pc, #44]	; (8007380 <infoCommand+0xec>)
 8007352:	f00d fe57 	bl	8015004 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007356:	7828      	ldrb	r0, [r5, #0]
 8007358:	2332      	movs	r3, #50	; 0x32
 800735a:	2243      	movs	r2, #67	; 0x43
 800735c:	0021      	movs	r1, r4
 800735e:	9600      	str	r6, [sp, #0]
 8007360:	f007 f972 	bl	800e648 <writePxMutex>
 8007364:	e7c1      	b.n	80072ea <infoCommand+0x56>
	configASSERT(pcWriteBuffer);
 8007366:	b672      	cpsid	i
 8007368:	e7fe      	b.n	8007368 <infoCommand+0xd4>
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	2000001c 	.word	0x2000001c
 8007370:	0801c61c 	.word	0x0801c61c
 8007374:	20000b0f 	.word	0x20000b0f
 8007378:	0801c638 	.word	0x0801c638
 800737c:	0801b498 	.word	0x0801b498
 8007380:	0801c64c 	.word	0x0801c64c

08007384 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007386:	4645      	mov	r5, r8
 8007388:	46de      	mov	lr, fp
 800738a:	4657      	mov	r7, sl
 800738c:	464e      	mov	r6, r9
 800738e:	b5e0      	push	{r5, r6, r7, lr}
	char module[MaxLengthOfAlias + 30] ={0};
 8007390:	2500      	movs	r5, #0
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007392:	b08f      	sub	sp, #60	; 0x3c
 8007394:	0004      	movs	r4, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8007396:	2100      	movs	r1, #0
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007398:	4690      	mov	r8, r2
	char module[MaxLengthOfAlias + 30] ={0};
 800739a:	a805      	add	r0, sp, #20
 800739c:	2223      	movs	r2, #35	; 0x23
 800739e:	9504      	str	r5, [sp, #16]
 80073a0:	f00d fe39 	bl	8015016 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 80073a4:	2206      	movs	r2, #6
 80073a6:	2100      	movs	r1, #0
 80073a8:	a802      	add	r0, sp, #8
 80073aa:	9501      	str	r5, [sp, #4]
 80073ac:	f00d fe33 	bl	8015016 <memset>
	configASSERT(pcWriteBuffer);
 80073b0:	2c00      	cmp	r4, #0
 80073b2:	d05d      	beq.n	8007470 <groupCommand+0xec>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80073b4:	4d55      	ldr	r5, [pc, #340]	; (800750c <groupCommand+0x188>)
 80073b6:	2101      	movs	r1, #1
 80073b8:	002a      	movs	r2, r5
 80073ba:	4640      	mov	r0, r8
 80073bc:	f007 ff6e 	bl	800f29c <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 80073c0:	682a      	ldr	r2, [r5, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80073c2:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 80073c4:	a801      	add	r0, sp, #4
 80073c6:	f00e f8a3 	bl	8015510 <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 80073ca:	4d51      	ldr	r5, [pc, #324]	; (8007510 <groupCommand+0x18c>)
 80073cc:	002e      	movs	r6, r5
 80073ce:	3664      	adds	r6, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 80073d0:	0029      	movs	r1, r5
 80073d2:	a801      	add	r0, sp, #4
 80073d4:	f7f8 fe96 	bl	8000104 <strcmp>
 80073d8:	2800      	cmp	r0, #0
 80073da:	d04b      	beq.n	8007474 <groupCommand+0xf0>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 80073dc:	350a      	adds	r5, #10
 80073de:	42ae      	cmp	r6, r5
 80073e0:	d1f6      	bne.n	80073d0 <groupCommand+0x4c>
	type =1;
 80073e2:	2301      	movs	r3, #1
 80073e4:	469a      	mov	sl, r3
	count =2;
 80073e6:	2302      	movs	r3, #2
 80073e8:	4f4a      	ldr	r7, [pc, #296]	; (8007514 <groupCommand+0x190>)
	strcpy((char* )pcWriteBuffer,"Modules [");
 80073ea:	220a      	movs	r2, #10
 80073ec:	494a      	ldr	r1, [pc, #296]	; (8007518 <groupCommand+0x194>)
 80073ee:	0020      	movs	r0, r4
	count =2;
 80073f0:	703b      	strb	r3, [r7, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 80073f2:	f00d fe07 	bl	8015004 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 80073f6:	4b49      	ldr	r3, [pc, #292]	; (800751c <groupCommand+0x198>)
 80073f8:	2102      	movs	r1, #2
 80073fa:	001a      	movs	r2, r3
 80073fc:	4640      	mov	r0, r8
 80073fe:	4699      	mov	r9, r3
 8007400:	f007 ff4c 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8007404:	4b46      	ldr	r3, [pc, #280]	; (8007520 <groupCommand+0x19c>)
 8007406:	1e01      	subs	r1, r0, #0
 8007408:	469b      	mov	fp, r3
 800740a:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 800740c:	d066      	beq.n	80074dc <groupCommand+0x158>
 800740e:	ad04      	add	r5, sp, #16
 8007410:	e00e      	b.n	8007430 <groupCommand+0xac>
		strcat((char* )pcWriteBuffer,module);
 8007412:	0029      	movs	r1, r5
 8007414:	0020      	movs	r0, r4
 8007416:	f00e f847 	bl	80154a8 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 800741a:	1c71      	adds	r1, r6, #1
 800741c:	b249      	sxtb	r1, r1
 800741e:	464a      	mov	r2, r9
 8007420:	4640      	mov	r0, r8
 8007422:	7039      	strb	r1, [r7, #0]
 8007424:	f007 ff3a 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8007428:	465b      	mov	r3, fp
 800742a:	1e01      	subs	r1, r0, #0
 800742c:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 800742e:	d024      	beq.n	800747a <groupCommand+0xf6>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8007430:	464b      	mov	r3, r9
 8007432:	681e      	ldr	r6, [r3, #0]
 8007434:	0028      	movs	r0, r5
 8007436:	0032      	movs	r2, r6
 8007438:	f00e f86a 	bl	8015510 <strncpy>
		module[xParameterStringLength] ='\0';
 800743c:	2300      	movs	r3, #0
		modID =GetID(module);
 800743e:	0028      	movs	r0, r5
		module[xParameterStringLength] ='\0';
 8007440:	55ab      	strb	r3, [r5, r6]
		modID =GetID(module);
 8007442:	f7fd fb4f 	bl	8004ae4 <GetID>
		if(modID < 0)
 8007446:	2800      	cmp	r0, #0
 8007448:	db3a      	blt.n	80074c0 <groupCommand+0x13c>
		result =AddModuleToGroup(modID,alias);
 800744a:	b2c0      	uxtb	r0, r0
 800744c:	a901      	add	r1, sp, #4
 800744e:	f7fd fc0f 	bl	8004c70 <AddModuleToGroup>
		if(result != BOS_OK)
 8007452:	2800      	cmp	r0, #0
 8007454:	d122      	bne.n	800749c <groupCommand+0x118>
		if(count > 2)
 8007456:	2600      	movs	r6, #0
 8007458:	57be      	ldrsb	r6, [r7, r6]
 800745a:	2e02      	cmp	r6, #2
 800745c:	ddd9      	ble.n	8007412 <groupCommand+0x8e>
			strcat((char* )pcWriteBuffer,", ");
 800745e:	0020      	movs	r0, r4
 8007460:	f7f8 fe5a 	bl	8000118 <strlen>
 8007464:	2203      	movs	r2, #3
 8007466:	492f      	ldr	r1, [pc, #188]	; (8007524 <groupCommand+0x1a0>)
 8007468:	1820      	adds	r0, r4, r0
 800746a:	f00d fdcb 	bl	8015004 <memcpy>
 800746e:	e7d0      	b.n	8007412 <groupCommand+0x8e>
	configASSERT(pcWriteBuffer);
 8007470:	b672      	cpsid	i
 8007472:	e7fe      	b.n	8007472 <groupCommand+0xee>
			type =0;
 8007474:	2300      	movs	r3, #0
 8007476:	469a      	mov	sl, r3
 8007478:	e7b5      	b.n	80073e6 <groupCommand+0x62>
	else if(count == 2)
 800747a:	2300      	movs	r3, #0
 800747c:	56fb      	ldrsb	r3, [r7, r3]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d026      	beq.n	80074d0 <groupCommand+0x14c>
	else if(result == BOS_OK && type){
 8007482:	4653      	mov	r3, sl
		sprintf(module,(char* )pcMessageOKnew,alias);
 8007484:	aa01      	add	r2, sp, #4
	else if(result == BOS_OK && type){
 8007486:	2b00      	cmp	r3, #0
 8007488:	d120      	bne.n	80074cc <groupCommand+0x148>
		sprintf(module,(char* )pcMessageOKexist,alias);
 800748a:	4927      	ldr	r1, [pc, #156]	; (8007528 <groupCommand+0x1a4>)
 800748c:	0028      	movs	r0, r5
 800748e:	f00d ffeb 	bl	8015468 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007492:	0029      	movs	r1, r5
 8007494:	0020      	movs	r0, r4
 8007496:	f00e f807 	bl	80154a8 <strcat>
 800749a:	e009      	b.n	80074b0 <groupCommand+0x12c>
	else if(count == 2)
 800749c:	2300      	movs	r3, #0
 800749e:	56fb      	ldrsb	r3, [r7, r3]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d015      	beq.n	80074d0 <groupCommand+0x14c>
	else if(result == BOS_ERR_Keyword)
 80074a4:	2806      	cmp	r0, #6
 80074a6:	d02b      	beq.n	8007500 <groupCommand+0x17c>
	else if(result == BOS_ERR_ExistingAlias)
 80074a8:	2807      	cmp	r0, #7
 80074aa:	d023      	beq.n	80074f4 <groupCommand+0x170>
	else if(result == BOS_ERR_ExistingCmd)
 80074ac:	2808      	cmp	r0, #8
 80074ae:	d01b      	beq.n	80074e8 <groupCommand+0x164>
}
 80074b0:	2000      	movs	r0, #0
 80074b2:	b00f      	add	sp, #60	; 0x3c
 80074b4:	bcf0      	pop	{r4, r5, r6, r7}
 80074b6:	46bb      	mov	fp, r7
 80074b8:	46b2      	mov	sl, r6
 80074ba:	46a9      	mov	r9, r5
 80074bc:	46a0      	mov	r8, r4
 80074be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 80074c0:	002a      	movs	r2, r5
 80074c2:	0020      	movs	r0, r4
 80074c4:	4919      	ldr	r1, [pc, #100]	; (800752c <groupCommand+0x1a8>)
 80074c6:	f00d ffcf 	bl	8015468 <sprintf>
	return pdFALSE;
 80074ca:	e7f1      	b.n	80074b0 <groupCommand+0x12c>
		sprintf(module,(char* )pcMessageOKnew,alias);
 80074cc:	4918      	ldr	r1, [pc, #96]	; (8007530 <groupCommand+0x1ac>)
 80074ce:	e7dd      	b.n	800748c <groupCommand+0x108>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 80074d0:	0020      	movs	r0, r4
 80074d2:	4918      	ldr	r1, [pc, #96]	; (8007534 <groupCommand+0x1b0>)
 80074d4:	aa01      	add	r2, sp, #4
 80074d6:	f00d ffc7 	bl	8015468 <sprintf>
 80074da:	e7e9      	b.n	80074b0 <groupCommand+0x12c>
	else if(count == 2)
 80074dc:	2300      	movs	r3, #0
 80074de:	56fb      	ldrsb	r3, [r7, r3]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d0f5      	beq.n	80074d0 <groupCommand+0x14c>
 80074e4:	ad04      	add	r5, sp, #16
 80074e6:	e7cc      	b.n	8007482 <groupCommand+0xfe>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 80074e8:	0020      	movs	r0, r4
 80074ea:	4913      	ldr	r1, [pc, #76]	; (8007538 <groupCommand+0x1b4>)
 80074ec:	aa01      	add	r2, sp, #4
 80074ee:	f00d ffbb 	bl	8015468 <sprintf>
 80074f2:	e7dd      	b.n	80074b0 <groupCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 80074f4:	0020      	movs	r0, r4
 80074f6:	4911      	ldr	r1, [pc, #68]	; (800753c <groupCommand+0x1b8>)
 80074f8:	aa01      	add	r2, sp, #4
 80074fa:	f00d ffb5 	bl	8015468 <sprintf>
 80074fe:	e7d7      	b.n	80074b0 <groupCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8007500:	0020      	movs	r0, r4
 8007502:	490f      	ldr	r1, [pc, #60]	; (8007540 <groupCommand+0x1bc>)
 8007504:	aa01      	add	r2, sp, #4
 8007506:	f00d ffaf 	bl	8015468 <sprintf>
 800750a:	e7d1      	b.n	80074b0 <groupCommand+0x12c>
 800750c:	20001354 	.word	0x20001354
 8007510:	20000ef4 	.word	0x20000ef4
 8007514:	2000131a 	.word	0x2000131a
 8007518:	0801c690 	.word	0x0801c690
 800751c:	20001348 	.word	0x20001348
 8007520:	2000131c 	.word	0x2000131c
 8007524:	0801c69c 	.word	0x0801c69c
 8007528:	0801c6e8 	.word	0x0801c6e8
 800752c:	0801c7bc 	.word	0x0801c7bc
 8007530:	0801c6cc 	.word	0x0801c6cc
 8007534:	0801c6a0 	.word	0x0801c6a0
 8007538:	0801c77c 	.word	0x0801c77c
 800753c:	0801c748 	.word	0x0801c748
 8007540:	0801c708 	.word	0x0801c708

08007544 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007546:	4647      	mov	r7, r8
 8007548:	46ce      	mov	lr, r9
 800754a:	b580      	push	{r7, lr}
 800754c:	0004      	movs	r4, r0
 800754e:	0017      	movs	r7, r2
 8007550:	2600      	movs	r6, #0
 8007552:	2500      	movs	r5, #0
 8007554:	b083      	sub	sp, #12
	configASSERT(pcWriteBuffer);
 8007556:	2800      	cmp	r0, #0
 8007558:	d067      	beq.n	800762a <bootloaderUpdateCommand+0xe6>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800755a:	4b50      	ldr	r3, [pc, #320]	; (800769c <bootloaderUpdateCommand+0x158>)
 800755c:	2101      	movs	r1, #1
 800755e:	001a      	movs	r2, r3
 8007560:	0038      	movs	r0, r7
 8007562:	4698      	mov	r8, r3
 8007564:	f007 fe9a 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007568:	2800      	cmp	r0, #0
 800756a:	d100      	bne.n	800756e <bootloaderUpdateCommand+0x2a>
 800756c:	e06c      	b.n	8007648 <bootloaderUpdateCommand+0x104>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 800756e:	4643      	mov	r3, r8
 8007570:	494b      	ldr	r1, [pc, #300]	; (80076a0 <bootloaderUpdateCommand+0x15c>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	f00d ffbb 	bl	80154ee <strncmp>
 8007578:	2800      	cmp	r0, #0
 800757a:	d14b      	bne.n	8007614 <bootloaderUpdateCommand+0xd0>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800757c:	2102      	movs	r1, #2
 800757e:	0038      	movs	r0, r7
 8007580:	4a48      	ldr	r2, [pc, #288]	; (80076a4 <bootloaderUpdateCommand+0x160>)
 8007582:	f007 fe8b 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8007586:	4b48      	ldr	r3, [pc, #288]	; (80076a8 <bootloaderUpdateCommand+0x164>)
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007588:	4a48      	ldr	r2, [pc, #288]	; (80076ac <bootloaderUpdateCommand+0x168>)
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800758a:	6018      	str	r0, [r3, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800758c:	2103      	movs	r1, #3
 800758e:	0038      	movs	r0, r7
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007590:	4699      	mov	r9, r3
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007592:	f007 fe83 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8007596:	4b46      	ldr	r3, [pc, #280]	; (80076b0 <bootloaderUpdateCommand+0x16c>)
			if(pcParameterString2[0] == '#'){
 8007598:	2200      	movs	r2, #0
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800759a:	6018      	str	r0, [r3, #0]
 800759c:	4698      	mov	r8, r3
			if(pcParameterString2[0] == '#'){
 800759e:	464b      	mov	r3, r9
 80075a0:	681b      	ldr	r3, [r3, #0]
				result =BOS_ERR_WrongValue;
 80075a2:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 80075a4:	569a      	ldrsb	r2, [r3, r2]
 80075a6:	2a23      	cmp	r2, #35	; 0x23
 80075a8:	d041      	beq.n	800762e <bootloaderUpdateCommand+0xea>
			if(pcParameterString3[0] == 'p'){
 80075aa:	2300      	movs	r3, #0
 80075ac:	56c3      	ldrsb	r3, [r0, r3]
 80075ae:	2b70      	cmp	r3, #112	; 0x70
 80075b0:	d045      	beq.n	800763e <bootloaderUpdateCommand+0xfa>
				result =BOS_ERR_WrongValue;
 80075b2:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 80075b4:	4b3f      	ldr	r3, [pc, #252]	; (80076b4 <bootloaderUpdateCommand+0x170>)
 80075b6:	4698      	mov	r8, r3
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	42b3      	cmp	r3, r6
 80075bc:	d015      	beq.n	80075ea <bootloaderUpdateCommand+0xa6>
				BOS.response = BOS_RESPONSE_NONE;
 80075be:	2200      	movs	r2, #0
 80075c0:	4b3d      	ldr	r3, [pc, #244]	; (80076b8 <bootloaderUpdateCommand+0x174>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80075c2:	211a      	movs	r1, #26
				BOS.response = BOS_RESPONSE_NONE;
 80075c4:	719a      	strb	r2, [r3, #6]
				messageParams[0] =port;
 80075c6:	4b3d      	ldr	r3, [pc, #244]	; (80076bc <bootloaderUpdateCommand+0x178>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80075c8:	3201      	adds	r2, #1
 80075ca:	0030      	movs	r0, r6
				messageParams[0] =port;
 80075cc:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80075ce:	f002 fb61 	bl	8009c94 <SendMessageToModule>
				osDelay(100);
 80075d2:	2064      	movs	r0, #100	; 0x64
 80075d4:	f007 fd4a 	bl	800f06c <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80075d8:	4b39      	ldr	r3, [pc, #228]	; (80076c0 <bootloaderUpdateCommand+0x17c>)
 80075da:	0031      	movs	r1, r6
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	4643      	mov	r3, r8
 80075e0:	7818      	ldrb	r0, [r3, #0]
 80075e2:	002b      	movs	r3, r5
 80075e4:	f7fc ff40 	bl	8004468 <remoteBootloaderUpdate>
 80075e8:	e012      	b.n	8007610 <bootloaderUpdateCommand+0xcc>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 80075ea:	2300      	movs	r3, #0
 80075ec:	2200      	movs	r2, #0
 80075ee:	2100      	movs	r1, #0
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	0028      	movs	r0, r5
 80075f4:	3319      	adds	r3, #25
 80075f6:	f002 f931 	bl	800985c <SendMessageFromPort>
				osDelay(100);
 80075fa:	2064      	movs	r0, #100	; 0x64
 80075fc:	f007 fd36 	bl	800f06c <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007600:	4643      	mov	r3, r8
 8007602:	7818      	ldrb	r0, [r3, #0]
 8007604:	4b2e      	ldr	r3, [pc, #184]	; (80076c0 <bootloaderUpdateCommand+0x17c>)
 8007606:	0001      	movs	r1, r0
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	002b      	movs	r3, r5
 800760c:	f7fc ff2c 	bl	8004468 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8007610:	2f68      	cmp	r7, #104	; 0x68
 8007612:	d104      	bne.n	800761e <bootloaderUpdateCommand+0xda>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007614:	220f      	movs	r2, #15
 8007616:	0020      	movs	r0, r4
 8007618:	492a      	ldr	r1, [pc, #168]	; (80076c4 <bootloaderUpdateCommand+0x180>)
 800761a:	f00d fcf3 	bl	8015004 <memcpy>
}
 800761e:	2000      	movs	r0, #0
 8007620:	b003      	add	sp, #12
 8007622:	bcc0      	pop	{r6, r7}
 8007624:	46b9      	mov	r9, r7
 8007626:	46b0      	mov	r8, r6
 8007628:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 800762a:	b672      	cpsid	i
 800762c:	e7fe      	b.n	800762c <bootloaderUpdateCommand+0xe8>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800762e:	1c58      	adds	r0, r3, #1
 8007630:	f00d fa51 	bl	8014ad6 <atol>
 8007634:	4643      	mov	r3, r8
 8007636:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8007638:	2700      	movs	r7, #0
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	e7b5      	b.n	80075aa <bootloaderUpdateCommand+0x66>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 800763e:	3001      	adds	r0, #1
 8007640:	f00d fa49 	bl	8014ad6 <atol>
 8007644:	b2c5      	uxtb	r5, r0
 8007646:	e7b5      	b.n	80075b4 <bootloaderUpdateCommand+0x70>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007648:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <bootloaderUpdateCommand+0x170>)
 800764a:	0020      	movs	r0, r4
 800764c:	781a      	ldrb	r2, [r3, #0]
 800764e:	491e      	ldr	r1, [pc, #120]	; (80076c8 <bootloaderUpdateCommand+0x184>)
 8007650:	f00d ff0a 	bl	8015468 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007654:	4b1d      	ldr	r3, [pc, #116]	; (80076cc <bootloaderUpdateCommand+0x188>)
 8007656:	0020      	movs	r0, r4
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	f00d ff25 	bl	80154a8 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800765e:	0020      	movs	r0, r4
 8007660:	f7f8 fd5a 	bl	8000118 <strlen>
 8007664:	4b16      	ldr	r3, [pc, #88]	; (80076c0 <bootloaderUpdateCommand+0x17c>)
 8007666:	b282      	uxth	r2, r0
 8007668:	7818      	ldrb	r0, [r3, #0]
 800766a:	2301      	movs	r3, #1
 800766c:	425b      	negs	r3, r3
 800766e:	0021      	movs	r1, r4
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	3333      	adds	r3, #51	; 0x33
 8007674:	f006 ffe8 	bl	800e648 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007678:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <bootloaderUpdateCommand+0x18c>)
 800767a:	4a16      	ldr	r2, [pc, #88]	; (80076d4 <bootloaderUpdateCommand+0x190>)
		osDelay(10);
 800767c:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800767e:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007680:	2201      	movs	r2, #1
 8007682:	4b15      	ldr	r3, [pc, #84]	; (80076d8 <bootloaderUpdateCommand+0x194>)
 8007684:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007686:	f007 fcf1 	bl	800f06c <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <bootloaderUpdateCommand+0x198>)
 8007690:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <bootloaderUpdateCommand+0x19c>)
 8007692:	60da      	str	r2, [r3, #12]
 8007694:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007698:	46c0      	nop			; (mov r8, r8)
 800769a:	e7fd      	b.n	8007698 <bootloaderUpdateCommand+0x154>
 800769c:	2000134c 	.word	0x2000134c
 80076a0:	0801c800 	.word	0x0801c800
 80076a4:	20001358 	.word	0x20001358
 80076a8:	20001330 	.word	0x20001330
 80076ac:	2000135c 	.word	0x2000135c
 80076b0:	20001338 	.word	0x20001338
 80076b4:	2000110e 	.word	0x2000110e
 80076b8:	20006ab0 	.word	0x20006ab0
 80076bc:	20000fd0 	.word	0x20000fd0
 80076c0:	20000b0f 	.word	0x20000b0f
 80076c4:	0801c29c 	.word	0x0801c29c
 80076c8:	0801c7e0 	.word	0x0801c7e0
 80076cc:	20000074 	.word	0x20000074
 80076d0:	20007ff0 	.word	0x20007ff0
 80076d4:	deadbeef 	.word	0xdeadbeef
 80076d8:	20000f8c 	.word	0x20000f8c
 80076dc:	e000ed00 	.word	0xe000ed00
 80076e0:	05fa0004 	.word	0x05fa0004

080076e4 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80076e4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d023      	beq.n	8007732 <pingCommand+0x4e>
	if(!moduleAlias[myID][0])
 80076ea:	4b13      	ldr	r3, [pc, #76]	; (8007738 <pingCommand+0x54>)
 80076ec:	4913      	ldr	r1, [pc, #76]	; (800773c <pingCommand+0x58>)
 80076ee:	781a      	ldrb	r2, [r3, #0]
 80076f0:	0093      	lsls	r3, r2, #2
 80076f2:	189b      	adds	r3, r3, r2
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	5c5c      	ldrb	r4, [r3, r1]
 80076f8:	2c00      	cmp	r4, #0
 80076fa:	d016      	beq.n	800772a <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80076fc:	185b      	adds	r3, r3, r1
 80076fe:	4910      	ldr	r1, [pc, #64]	; (8007740 <pingCommand+0x5c>)
 8007700:	f00d feb2 	bl	8015468 <sprintf>
	RTOS_IND_blink(200);
 8007704:	2180      	movs	r1, #128	; 0x80
 8007706:	2090      	movs	r0, #144	; 0x90
 8007708:	2201      	movs	r2, #1
 800770a:	0109      	lsls	r1, r1, #4
 800770c:	05c0      	lsls	r0, r0, #23
 800770e:	f00b f9a5 	bl	8012a5c <HAL_GPIO_WritePin>
 8007712:	20c8      	movs	r0, #200	; 0xc8
 8007714:	f007 fcaa 	bl	800f06c <osDelay>
 8007718:	2180      	movs	r1, #128	; 0x80
 800771a:	2090      	movs	r0, #144	; 0x90
 800771c:	2200      	movs	r2, #0
 800771e:	0109      	lsls	r1, r1, #4
 8007720:	05c0      	lsls	r0, r0, #23
 8007722:	f00b f99b 	bl	8012a5c <HAL_GPIO_WritePin>
}
 8007726:	2000      	movs	r0, #0
 8007728:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 800772a:	4906      	ldr	r1, [pc, #24]	; (8007744 <pingCommand+0x60>)
 800772c:	f00d fe9c 	bl	8015468 <sprintf>
 8007730:	e7e8      	b.n	8007704 <pingCommand+0x20>
	configASSERT(pcWriteBuffer);
 8007732:	b672      	cpsid	i
 8007734:	e7fe      	b.n	8007734 <pingCommand+0x50>
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	2000110e 	.word	0x2000110e
 800773c:	20001000 	.word	0x20001000
 8007740:	0801c818 	.word	0x0801c818
 8007744:	0801c804 	.word	0x0801c804

08007748 <flashsizeCommand>:
static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007748:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 800774a:	2800      	cmp	r0, #0
 800774c:	d006      	beq.n	800775c <flashsizeCommand+0x14>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800774e:	4b04      	ldr	r3, [pc, #16]	; (8007760 <flashsizeCommand+0x18>)
 8007750:	4904      	ldr	r1, [pc, #16]	; (8007764 <flashsizeCommand+0x1c>)
 8007752:	881a      	ldrh	r2, [r3, #0]
 8007754:	f00d fe88 	bl	8015468 <sprintf>
}
 8007758:	2000      	movs	r0, #0
 800775a:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800775c:	b672      	cpsid	i
 800775e:	e7fe      	b.n	800775e <flashsizeCommand+0x16>
 8007760:	1ffff7cc 	.word	0x1ffff7cc
 8007764:	0801c834 	.word	0x0801c834

08007768 <GetReadPrecentageCommand>:

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8007768:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800776a:	b510      	push	{r4, lr}
 800776c:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 800776e:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8007770:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007772:	0004      	movs	r4, r0
	float ADC_Value_CLI =0;
 8007774:	9301      	str	r3, [sp, #4]
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007776:	0010      	movs	r0, r2
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8007778:	2c00      	cmp	r4, #0
 800777a:	d00f      	beq.n	800779c <GetReadPrecentageCommand+0x34>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800777c:	466a      	mov	r2, sp
 800777e:	2101      	movs	r1, #1
 8007780:	f007 fd8c 	bl	800f29c <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8007784:	7803      	ldrb	r3, [r0, #0]
 8007786:	3b32      	subs	r3, #50	; 0x32
 8007788:	2b01      	cmp	r3, #1
 800778a:	d909      	bls.n	80077a0 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800778c:	2215      	movs	r2, #21
 800778e:	0020      	movs	r0, r4
 8007790:	490b      	ldr	r1, [pc, #44]	; (80077c0 <GetReadPrecentageCommand+0x58>)
 8007792:	f00d fc37 	bl	8015004 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8007796:	2000      	movs	r0, #0
 8007798:	b002      	add	sp, #8
 800779a:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800779c:	b672      	cpsid	i
 800779e:	e7fe      	b.n	800779e <GetReadPrecentageCommand+0x36>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80077a0:	f00d f999 	bl	8014ad6 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80077a4:	a901      	add	r1, sp, #4
 80077a6:	b2c0      	uxtb	r0, r0
 80077a8:	f001 faec 	bl	8008d84 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80077ac:	9801      	ldr	r0, [sp, #4]
 80077ae:	f7fb fd9d 	bl	80032ec <__aeabi_f2d>
 80077b2:	0002      	movs	r2, r0
 80077b4:	000b      	movs	r3, r1
 80077b6:	0020      	movs	r0, r4
 80077b8:	4902      	ldr	r1, [pc, #8]	; (80077c4 <GetReadPrecentageCommand+0x5c>)
 80077ba:	f00d fe55 	bl	8015468 <sprintf>
 80077be:	e7ea      	b.n	8007796 <GetReadPrecentageCommand+0x2e>
 80077c0:	0801be58 	.word	0x0801be58
 80077c4:	0801c854 	.word	0x0801c854

080077c8 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80077c8:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 80077ca:	2500      	movs	r5, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80077cc:	b083      	sub	sp, #12
 80077ce:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 80077d0:	9501      	str	r5, [sp, #4]
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80077d2:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80077d4:	2c00      	cmp	r4, #0
 80077d6:	d014      	beq.n	8007802 <pauseSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80077d8:	2101      	movs	r1, #1
 80077da:	aa01      	add	r2, sp, #4
 80077dc:	f007 fd5e 	bl	800f29c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80077e0:	f00d f973 	bl	8014aca <atoi>
 80077e4:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <pauseSnipCommand+0x2a>
 80077ea:	4a0f      	ldr	r2, [pc, #60]	; (8007828 <pauseSnipCommand+0x60>)
 80077ec:	7812      	ldrb	r2, [r2, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d209      	bcs.n	8007806 <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80077f2:	2223      	movs	r2, #35	; 0x23
 80077f4:	0020      	movs	r0, r4
 80077f6:	490d      	ldr	r1, [pc, #52]	; (800782c <pauseSnipCommand+0x64>)
 80077f8:	f00d fc04 	bl	8015004 <memcpy>
}
 80077fc:	2000      	movs	r0, #0
 80077fe:	b003      	add	sp, #12
 8007800:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8007802:	b672      	cpsid	i
 8007804:	e7fe      	b.n	8007804 <pauseSnipCommand+0x3c>
		snippets[index - 1].state = false;
 8007806:	23ff      	movs	r3, #255	; 0xff
 8007808:	4003      	ands	r3, r0
 800780a:	3b01      	subs	r3, #1
 800780c:	009a      	lsls	r2, r3, #2
 800780e:	18d3      	adds	r3, r2, r3
 8007810:	4a07      	ldr	r2, [pc, #28]	; (8007830 <pauseSnipCommand+0x68>)
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	18d3      	adds	r3, r2, r3
 8007816:	741d      	strb	r5, [r3, #16]
		SaveToRO();
 8007818:	f004 ff08 	bl	800c62c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 800781c:	2235      	movs	r2, #53	; 0x35
 800781e:	0020      	movs	r0, r4
 8007820:	4904      	ldr	r1, [pc, #16]	; (8007834 <pauseSnipCommand+0x6c>)
 8007822:	f00d fbef 	bl	8015004 <memcpy>
 8007826:	e7e9      	b.n	80077fc <pauseSnipCommand+0x34>
 8007828:	200012b7 	.word	0x200012b7
 800782c:	0801bfd4 	.word	0x0801bfd4
 8007830:	20006acc 	.word	0x20006acc
 8007834:	0801c878 	.word	0x0801c878

08007838 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007838:	b510      	push	{r4, lr}
 800783a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800783c:	d00c      	beq.n	8007858 <idcodeCommand+0x20>
	dev =HAL_GetDEVID();
 800783e:	f009 fc9b 	bl	8011178 <HAL_GetDEVID>
	switch(dev){
 8007842:	4a1d      	ldr	r2, [pc, #116]	; (80078b8 <idcodeCommand+0x80>)
 8007844:	0403      	lsls	r3, r0, #16
 8007846:	4694      	mov	ip, r2
 8007848:	0c1b      	lsrs	r3, r3, #16
 800784a:	4463      	add	r3, ip
 800784c:	2b08      	cmp	r3, #8
 800784e:	d814      	bhi.n	800787a <idcodeCommand+0x42>
 8007850:	4a1a      	ldr	r2, [pc, #104]	; (80078bc <idcodeCommand+0x84>)
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	58d3      	ldr	r3, [r2, r3]
 8007856:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 8007858:	b672      	cpsid	i
 800785a:	e7fe      	b.n	800785a <idcodeCommand+0x22>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 800785c:	0020      	movs	r0, r4
 800785e:	4a18      	ldr	r2, [pc, #96]	; (80078c0 <idcodeCommand+0x88>)
 8007860:	4918      	ldr	r1, [pc, #96]	; (80078c4 <idcodeCommand+0x8c>)
 8007862:	f00d fe01 	bl	8015468 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8007866:	f009 fc81 	bl	801116c <HAL_GetREVID>
 800786a:	0022      	movs	r2, r4
 800786c:	0b03      	lsrs	r3, r0, #12
 800786e:	4916      	ldr	r1, [pc, #88]	; (80078c8 <idcodeCommand+0x90>)
 8007870:	0020      	movs	r0, r4
 8007872:	f00d fdf9 	bl	8015468 <sprintf>
}
 8007876:	2000      	movs	r0, #0
 8007878:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 800787a:	0020      	movs	r0, r4
 800787c:	4a13      	ldr	r2, [pc, #76]	; (80078cc <idcodeCommand+0x94>)
 800787e:	4911      	ldr	r1, [pc, #68]	; (80078c4 <idcodeCommand+0x8c>)
 8007880:	f00d fdf2 	bl	8015468 <sprintf>
			break;
 8007884:	e7ef      	b.n	8007866 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8007886:	0020      	movs	r0, r4
 8007888:	4a11      	ldr	r2, [pc, #68]	; (80078d0 <idcodeCommand+0x98>)
 800788a:	490e      	ldr	r1, [pc, #56]	; (80078c4 <idcodeCommand+0x8c>)
 800788c:	f00d fdec 	bl	8015468 <sprintf>
			break;
 8007890:	e7e9      	b.n	8007866 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8007892:	0020      	movs	r0, r4
 8007894:	4a0f      	ldr	r2, [pc, #60]	; (80078d4 <idcodeCommand+0x9c>)
 8007896:	490b      	ldr	r1, [pc, #44]	; (80078c4 <idcodeCommand+0x8c>)
 8007898:	f00d fde6 	bl	8015468 <sprintf>
			break;
 800789c:	e7e3      	b.n	8007866 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 800789e:	0020      	movs	r0, r4
 80078a0:	4a0d      	ldr	r2, [pc, #52]	; (80078d8 <idcodeCommand+0xa0>)
 80078a2:	4908      	ldr	r1, [pc, #32]	; (80078c4 <idcodeCommand+0x8c>)
 80078a4:	f00d fde0 	bl	8015468 <sprintf>
			break;
 80078a8:	e7dd      	b.n	8007866 <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 80078aa:	0020      	movs	r0, r4
 80078ac:	4a0b      	ldr	r2, [pc, #44]	; (80078dc <idcodeCommand+0xa4>)
 80078ae:	4905      	ldr	r1, [pc, #20]	; (80078c4 <idcodeCommand+0x8c>)
 80078b0:	f00d fdda 	bl	8015468 <sprintf>
			break;
 80078b4:	e7d7      	b.n	8007866 <idcodeCommand+0x2e>
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	fffffbc0 	.word	0xfffffbc0
 80078bc:	0801c920 	.word	0x0801c920
 80078c0:	0801c8dc 	.word	0x0801c8dc
 80078c4:	0801c8bc 	.word	0x0801c8bc
 80078c8:	0801c908 	.word	0x0801c908
 80078cc:	0801c900 	.word	0x0801c900
 80078d0:	0801c8e8 	.word	0x0801c8e8
 80078d4:	0801c8d0 	.word	0x0801c8d0
 80078d8:	0801c8b0 	.word	0x0801c8b0
 80078dc:	0801c8f4 	.word	0x0801c8f4

080078e0 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80078e4:	d023      	beq.n	800792e <uuidCommand+0x4e>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 80078e6:	220e      	movs	r2, #14
 80078e8:	4912      	ldr	r1, [pc, #72]	; (8007934 <uuidCommand+0x54>)
 80078ea:	f00d fb8b 	bl	8015004 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 80078ee:	4d12      	ldr	r5, [pc, #72]	; (8007938 <uuidCommand+0x58>)
 80078f0:	4b12      	ldr	r3, [pc, #72]	; (800793c <uuidCommand+0x5c>)
 80078f2:	0029      	movs	r1, r5
 80078f4:	0022      	movs	r2, r4
 80078f6:	0020      	movs	r0, r4
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f00d fdb5 	bl	8015468 <sprintf>
 80078fe:	4b10      	ldr	r3, [pc, #64]	; (8007940 <uuidCommand+0x60>)
 8007900:	0029      	movs	r1, r5
 8007902:	0022      	movs	r2, r4
 8007904:	0020      	movs	r0, r4
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f00d fdae 	bl	8015468 <sprintf>
 800790c:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <uuidCommand+0x64>)
 800790e:	0029      	movs	r1, r5
 8007910:	0022      	movs	r2, r4
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	0020      	movs	r0, r4
 8007916:	f00d fda7 	bl	8015468 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 800791a:	0020      	movs	r0, r4
 800791c:	f7f8 fbfc 	bl	8000118 <strlen>
 8007920:	2203      	movs	r2, #3
 8007922:	4909      	ldr	r1, [pc, #36]	; (8007948 <uuidCommand+0x68>)
 8007924:	1820      	adds	r0, r4, r0
 8007926:	f00d fb6d 	bl	8015004 <memcpy>
}
 800792a:	2000      	movs	r0, #0
 800792c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 800792e:	b672      	cpsid	i
 8007930:	e7fe      	b.n	8007930 <uuidCommand+0x50>
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	0801c944 	.word	0x0801c944
 8007938:	0801c954 	.word	0x0801c954
 800793c:	1ffff7ac 	.word	0x1ffff7ac
 8007940:	1ffff7b0 	.word	0x1ffff7b0
 8007944:	1ffff7b4 	.word	0x1ffff7b4
 8007948:	0801d318 	.word	0x0801d318

0800794c <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800794c:	b510      	push	{r4, lr}
 800794e:	0004      	movs	r4, r0
 8007950:	b084      	sub	sp, #16
	configASSERT(pcWriteBuffer);
 8007952:	2800      	cmp	r0, #0
 8007954:	d00a      	beq.n	800796c <timeCommand+0x20>
	GetTimeDate();
 8007956:	f006 fc1f 	bl	800e198 <GetTimeDate>
	if(BOS.hourformat == 24)
 800795a:	4916      	ldr	r1, [pc, #88]	; (80079b4 <timeCommand+0x68>)
 800795c:	7b4b      	ldrb	r3, [r1, #13]
 800795e:	2b18      	cmp	r3, #24
 8007960:	d00f      	beq.n	8007982 <timeCommand+0x36>
	else if(BOS.hourformat == 12){
 8007962:	2b0c      	cmp	r3, #12
 8007964:	d004      	beq.n	8007970 <timeCommand+0x24>
}
 8007966:	2000      	movs	r0, #0
 8007968:	b004      	add	sp, #16
 800796a:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800796c:	b672      	cpsid	i
 800796e:	e7fe      	b.n	800796e <timeCommand+0x22>
		if(BOS.time.ampm == RTC_AM)
 8007970:	7ccb      	ldrb	r3, [r1, #19]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d010      	beq.n	8007998 <timeCommand+0x4c>
		else if(BOS.time.ampm == RTC_PM)
 8007976:	2b02      	cmp	r3, #2
 8007978:	d1f5      	bne.n	8007966 <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800797a:	7c4b      	ldrb	r3, [r1, #17]
 800797c:	7c8a      	ldrb	r2, [r1, #18]
 800797e:	480e      	ldr	r0, [pc, #56]	; (80079b8 <timeCommand+0x6c>)
 8007980:	e00d      	b.n	800799e <timeCommand+0x52>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8007982:	89c8      	ldrh	r0, [r1, #14]
 8007984:	7c4b      	ldrb	r3, [r1, #17]
 8007986:	7c8a      	ldrb	r2, [r1, #18]
 8007988:	9001      	str	r0, [sp, #4]
 800798a:	7c09      	ldrb	r1, [r1, #16]
 800798c:	0020      	movs	r0, r4
 800798e:	9100      	str	r1, [sp, #0]
 8007990:	490a      	ldr	r1, [pc, #40]	; (80079bc <timeCommand+0x70>)
 8007992:	f00d fd69 	bl	8015468 <sprintf>
 8007996:	e7e6      	b.n	8007966 <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8007998:	7c4b      	ldrb	r3, [r1, #17]
 800799a:	7c8a      	ldrb	r2, [r1, #18]
 800799c:	4808      	ldr	r0, [pc, #32]	; (80079c0 <timeCommand+0x74>)
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800799e:	9002      	str	r0, [sp, #8]
 80079a0:	89c8      	ldrh	r0, [r1, #14]
 80079a2:	9001      	str	r0, [sp, #4]
 80079a4:	7c09      	ldrb	r1, [r1, #16]
 80079a6:	0020      	movs	r0, r4
 80079a8:	9100      	str	r1, [sp, #0]
 80079aa:	4906      	ldr	r1, [pc, #24]	; (80079c4 <timeCommand+0x78>)
 80079ac:	f00d fd5c 	bl	8015468 <sprintf>
 80079b0:	e7d9      	b.n	8007966 <timeCommand+0x1a>
 80079b2:	46c0      	nop			; (mov r8, r8)
 80079b4:	20006ab0 	.word	0x20006ab0
 80079b8:	0801c9b4 	.word	0x0801c9b4
 80079bc:	0801c95c 	.word	0x0801c95c
 80079c0:	0801c9b0 	.word	0x0801c9b0
 80079c4:	0801c984 	.word	0x0801c984

080079c8 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80079c8:	b510      	push	{r4, lr}
 80079ca:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80079cc:	d00a      	beq.n	80079e4 <dateCommand+0x1c>
	GetTimeDate();
 80079ce:	f006 fbe3 	bl	800e198 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80079d2:	f7fd faf9 	bl	8004fc8 <GetDateString>
 80079d6:	4904      	ldr	r1, [pc, #16]	; (80079e8 <dateCommand+0x20>)
 80079d8:	0002      	movs	r2, r0
 80079da:	0020      	movs	r0, r4
 80079dc:	f00d fd44 	bl	8015468 <sprintf>
}
 80079e0:	2000      	movs	r0, #0
 80079e2:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80079e4:	b672      	cpsid	i
 80079e6:	e7fe      	b.n	80079e6 <dateCommand+0x1e>
 80079e8:	0801c9b8 	.word	0x0801c9b8

080079ec <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80079ec:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d004      	beq.n	80079fc <statusCommand+0x10>
	DisplayModuleStatus(0);
 80079f2:	2000      	movs	r0, #0
 80079f4:	f7fc ff04 	bl	8004800 <DisplayModuleStatus>
}
 80079f8:	2000      	movs	r0, #0
 80079fa:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80079fc:	b672      	cpsid	i
 80079fe:	e7fe      	b.n	80079fe <statusCommand+0x12>

08007a00 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	0004      	movs	r4, r0
 8007a04:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8007a06:	2c00      	cmp	r4, #0
 8007a08:	d01a      	beq.n	8007a40 <nameCommand+0x40>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007a0a:	4e1b      	ldr	r6, [pc, #108]	; (8007a78 <nameCommand+0x78>)
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	0032      	movs	r2, r6
 8007a10:	f007 fc44 	bl	800f29c <FreeRTOS_CLIGetParameter>
 8007a14:	4d19      	ldr	r5, [pc, #100]	; (8007a7c <nameCommand+0x7c>)
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8007a16:	6833      	ldr	r3, [r6, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007a18:	0001      	movs	r1, r0
 8007a1a:	6028      	str	r0, [r5, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8007a1c:	2b09      	cmp	r3, #9
 8007a1e:	dd01      	ble.n	8007a24 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007a20:	2300      	movs	r3, #0
 8007a22:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8007a24:	4e16      	ldr	r6, [pc, #88]	; (8007a80 <nameCommand+0x80>)
 8007a26:	7830      	ldrb	r0, [r6, #0]
 8007a28:	f7fd f8be 	bl	8004ba8 <NameModule>
	if(result == BOS_OK)
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d00f      	beq.n	8007a50 <nameCommand+0x50>
	else if(result == BOS_ERR_Keyword)
 8007a30:	2806      	cmp	r0, #6
 8007a32:	d007      	beq.n	8007a44 <nameCommand+0x44>
	else if(result == BOS_ERR_ExistingAlias)
 8007a34:	2807      	cmp	r0, #7
 8007a36:	d012      	beq.n	8007a5e <nameCommand+0x5e>
	else if(result == BOS_ERR_ExistingCmd)
 8007a38:	2808      	cmp	r0, #8
 8007a3a:	d016      	beq.n	8007a6a <nameCommand+0x6a>
}
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8007a40:	b672      	cpsid	i
 8007a42:	e7fe      	b.n	8007a42 <nameCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007a44:	0020      	movs	r0, r4
 8007a46:	682a      	ldr	r2, [r5, #0]
 8007a48:	490e      	ldr	r1, [pc, #56]	; (8007a84 <nameCommand+0x84>)
 8007a4a:	f00d fd0d 	bl	8015468 <sprintf>
 8007a4e:	e7f5      	b.n	8007a3c <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007a50:	0020      	movs	r0, r4
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	7832      	ldrb	r2, [r6, #0]
 8007a56:	490c      	ldr	r1, [pc, #48]	; (8007a88 <nameCommand+0x88>)
 8007a58:	f00d fd06 	bl	8015468 <sprintf>
 8007a5c:	e7ee      	b.n	8007a3c <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007a5e:	0020      	movs	r0, r4
 8007a60:	682a      	ldr	r2, [r5, #0]
 8007a62:	490a      	ldr	r1, [pc, #40]	; (8007a8c <nameCommand+0x8c>)
 8007a64:	f00d fd00 	bl	8015468 <sprintf>
 8007a68:	e7e8      	b.n	8007a3c <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007a6a:	0020      	movs	r0, r4
 8007a6c:	682a      	ldr	r2, [r5, #0]
 8007a6e:	4908      	ldr	r1, [pc, #32]	; (8007a90 <nameCommand+0x90>)
 8007a70:	f00d fcfa 	bl	8015468 <sprintf>
 8007a74:	e7e2      	b.n	8007a3c <nameCommand+0x3c>
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	20001350 	.word	0x20001350
 8007a7c:	20001320 	.word	0x20001320
 8007a80:	2000110e 	.word	0x2000110e
 8007a84:	0801c708 	.word	0x0801c708
 8007a88:	0801c9d0 	.word	0x0801c9d0
 8007a8c:	0801c748 	.word	0x0801c748
 8007a90:	0801c77c 	.word	0x0801c77c

08007a94 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007a94:	b510      	push	{r4, lr}
 8007a96:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007a98:	d009      	beq.n	8007aae <prvRunTimeStatsCommand+0x1a>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007a9a:	2241      	movs	r2, #65	; 0x41
 8007a9c:	4905      	ldr	r1, [pc, #20]	; (8007ab4 <prvRunTimeStatsCommand+0x20>)
 8007a9e:	f00d fab1 	bl	8015004 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8007aa2:	0020      	movs	r0, r4
 8007aa4:	3040      	adds	r0, #64	; 0x40
 8007aa6:	f008 fe9f 	bl	80107e8 <vTaskGetRunTimeStats>
}
 8007aaa:	2000      	movs	r0, #0
 8007aac:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8007aae:	b672      	cpsid	i
 8007ab0:	e7fe      	b.n	8007ab0 <prvRunTimeStatsCommand+0x1c>
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	0801c9e8 	.word	0x0801c9e8

08007ab8 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007abc:	d009      	beq.n	8007ad2 <prvTaskStatsCommand+0x1a>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007abe:	2250      	movs	r2, #80	; 0x50
 8007ac0:	4905      	ldr	r1, [pc, #20]	; (8007ad8 <prvTaskStatsCommand+0x20>)
 8007ac2:	f00d fa9f 	bl	8015004 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007ac6:	0020      	movs	r0, r4
 8007ac8:	304f      	adds	r0, #79	; 0x4f
 8007aca:	f008 fe33 	bl	8010734 <vTaskList>
}
 8007ace:	2000      	movs	r0, #0
 8007ad0:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8007ad2:	b672      	cpsid	i
 8007ad4:	e7fe      	b.n	8007ad4 <prvTaskStatsCommand+0x1c>
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	0801ca2c 	.word	0x0801ca2c

08007adc <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d008      	beq.n	8007af2 <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <resetCommand+0x1c>)
 8007ae6:	4a05      	ldr	r2, [pc, #20]	; (8007afc <resetCommand+0x20>)
 8007ae8:	60da      	str	r2, [r3, #12]
 8007aea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	e7fd      	b.n	8007aee <resetCommand+0x12>
 8007af2:	b672      	cpsid	i
 8007af4:	e7fe      	b.n	8007af4 <resetCommand+0x18>
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	e000ed00 	.word	0xe000ed00
 8007afc:	05fa0004 	.word	0x05fa0004

08007b00 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8007b00:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007b02:	b510      	push	{r4, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8007b08:	9301      	str	r3, [sp, #4]
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007b0a:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8007b0c:	2c00      	cmp	r4, #0
 8007b0e:	d014      	beq.n	8007b3a <actSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007b10:	2101      	movs	r1, #1
 8007b12:	aa01      	add	r2, sp, #4
 8007b14:	f007 fbc2 	bl	800f29c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8007b18:	f00c ffd7 	bl	8014aca <atoi>
 8007b1c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <actSnipCommand+0x2a>
 8007b22:	4a10      	ldr	r2, [pc, #64]	; (8007b64 <actSnipCommand+0x64>)
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d209      	bcs.n	8007b3e <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8007b2a:	2223      	movs	r2, #35	; 0x23
 8007b2c:	0020      	movs	r0, r4
 8007b2e:	490e      	ldr	r1, [pc, #56]	; (8007b68 <actSnipCommand+0x68>)
 8007b30:	f00d fa68 	bl	8015004 <memcpy>
}
 8007b34:	2000      	movs	r0, #0
 8007b36:	b002      	add	sp, #8
 8007b38:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8007b3a:	b672      	cpsid	i
 8007b3c:	e7fe      	b.n	8007b3c <actSnipCommand+0x3c>
		snippets[index - 1].state = true;
 8007b3e:	23ff      	movs	r3, #255	; 0xff
 8007b40:	4003      	ands	r3, r0
 8007b42:	3b01      	subs	r3, #1
 8007b44:	009a      	lsls	r2, r3, #2
 8007b46:	18d3      	adds	r3, r2, r3
 8007b48:	4a08      	ldr	r2, [pc, #32]	; (8007b6c <actSnipCommand+0x6c>)
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	18d3      	adds	r3, r2, r3
 8007b4e:	2201      	movs	r2, #1
 8007b50:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8007b52:	f004 fd6b 	bl	800c62c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8007b56:	2238      	movs	r2, #56	; 0x38
 8007b58:	0020      	movs	r0, r4
 8007b5a:	4905      	ldr	r1, [pc, #20]	; (8007b70 <actSnipCommand+0x70>)
 8007b5c:	f00d fa52 	bl	8015004 <memcpy>
 8007b60:	e7e8      	b.n	8007b34 <actSnipCommand+0x34>
 8007b62:	46c0      	nop			; (mov r8, r8)
 8007b64:	200012b7 	.word	0x200012b7
 8007b68:	0801bfd4 	.word	0x0801bfd4
 8007b6c:	20006acc 	.word	0x20006acc
 8007b70:	0801ca7c 	.word	0x0801ca7c

08007b74 <RegisterUserCLICommands>:
}
 8007b74:	4770      	bx	lr
 8007b76:	46c0      	nop			; (mov r8, r8)

08007b78 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007b78:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 8007b7a:	4835      	ldr	r0, [pc, #212]	; (8007c50 <vRegisterCLICommands+0xd8>)
 8007b7c:	f007 faec 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007b80:	4834      	ldr	r0, [pc, #208]	; (8007c54 <vRegisterCLICommands+0xdc>)
 8007b82:	f007 fae9 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007b86:	4834      	ldr	r0, [pc, #208]	; (8007c58 <vRegisterCLICommands+0xe0>)
 8007b88:	f007 fae6 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007b8c:	4833      	ldr	r0, [pc, #204]	; (8007c5c <vRegisterCLICommands+0xe4>)
 8007b8e:	f007 fae3 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007b92:	4833      	ldr	r0, [pc, #204]	; (8007c60 <vRegisterCLICommands+0xe8>)
 8007b94:	f007 fae0 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007b98:	4832      	ldr	r0, [pc, #200]	; (8007c64 <vRegisterCLICommands+0xec>)
 8007b9a:	f007 fadd 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007b9e:	4832      	ldr	r0, [pc, #200]	; (8007c68 <vRegisterCLICommands+0xf0>)
 8007ba0:	f007 fada 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007ba4:	4831      	ldr	r0, [pc, #196]	; (8007c6c <vRegisterCLICommands+0xf4>)
 8007ba6:	f007 fad7 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8007baa:	4831      	ldr	r0, [pc, #196]	; (8007c70 <vRegisterCLICommands+0xf8>)
 8007bac:	f007 fad4 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007bb0:	4830      	ldr	r0, [pc, #192]	; (8007c74 <vRegisterCLICommands+0xfc>)
 8007bb2:	f007 fad1 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007bb6:	4830      	ldr	r0, [pc, #192]	; (8007c78 <vRegisterCLICommands+0x100>)
 8007bb8:	f007 face 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007bbc:	482f      	ldr	r0, [pc, #188]	; (8007c7c <vRegisterCLICommands+0x104>)
 8007bbe:	f007 facb 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007bc2:	482f      	ldr	r0, [pc, #188]	; (8007c80 <vRegisterCLICommands+0x108>)
 8007bc4:	f007 fac8 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007bc8:	482e      	ldr	r0, [pc, #184]	; (8007c84 <vRegisterCLICommands+0x10c>)
 8007bca:	f007 fac5 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007bce:	482e      	ldr	r0, [pc, #184]	; (8007c88 <vRegisterCLICommands+0x110>)
 8007bd0:	f007 fac2 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007bd4:	482d      	ldr	r0, [pc, #180]	; (8007c8c <vRegisterCLICommands+0x114>)
 8007bd6:	f007 fabf 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8007bda:	482d      	ldr	r0, [pc, #180]	; (8007c90 <vRegisterCLICommands+0x118>)
 8007bdc:	f007 fabc 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007be0:	482c      	ldr	r0, [pc, #176]	; (8007c94 <vRegisterCLICommands+0x11c>)
 8007be2:	f007 fab9 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007be6:	482c      	ldr	r0, [pc, #176]	; (8007c98 <vRegisterCLICommands+0x120>)
 8007be8:	f007 fab6 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007bec:	482b      	ldr	r0, [pc, #172]	; (8007c9c <vRegisterCLICommands+0x124>)
 8007bee:	f007 fab3 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007bf2:	482b      	ldr	r0, [pc, #172]	; (8007ca0 <vRegisterCLICommands+0x128>)
 8007bf4:	f007 fab0 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007bf8:	482a      	ldr	r0, [pc, #168]	; (8007ca4 <vRegisterCLICommands+0x12c>)
 8007bfa:	f007 faad 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007bfe:	482a      	ldr	r0, [pc, #168]	; (8007ca8 <vRegisterCLICommands+0x130>)
 8007c00:	f007 faaa 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007c04:	4829      	ldr	r0, [pc, #164]	; (8007cac <vRegisterCLICommands+0x134>)
 8007c06:	f007 faa7 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 8007c0a:	4829      	ldr	r0, [pc, #164]	; (8007cb0 <vRegisterCLICommands+0x138>)
 8007c0c:	f007 faa4 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007c10:	4828      	ldr	r0, [pc, #160]	; (8007cb4 <vRegisterCLICommands+0x13c>)
 8007c12:	f007 faa1 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007c16:	4828      	ldr	r0, [pc, #160]	; (8007cb8 <vRegisterCLICommands+0x140>)
 8007c18:	f007 fa9e 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007c1c:	4827      	ldr	r0, [pc, #156]	; (8007cbc <vRegisterCLICommands+0x144>)
 8007c1e:	f007 fa9b 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007c22:	4827      	ldr	r0, [pc, #156]	; (8007cc0 <vRegisterCLICommands+0x148>)
 8007c24:	f007 fa98 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007c28:	4826      	ldr	r0, [pc, #152]	; (8007cc4 <vRegisterCLICommands+0x14c>)
 8007c2a:	f007 fa95 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007c2e:	4826      	ldr	r0, [pc, #152]	; (8007cc8 <vRegisterCLICommands+0x150>)
 8007c30:	f007 fa92 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007c34:	4825      	ldr	r0, [pc, #148]	; (8007ccc <vRegisterCLICommands+0x154>)
 8007c36:	f007 fa8f 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 8007c3a:	4825      	ldr	r0, [pc, #148]	; (8007cd0 <vRegisterCLICommands+0x158>)
 8007c3c:	f007 fa8c 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007c40:	2223      	movs	r2, #35	; 0x23
 8007c42:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <vRegisterCLICommands+0x15c>)
 8007c44:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007c46:	f004 f9d9 	bl	800bffc <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8007c4a:	f7ff ff93 	bl	8007b74 <RegisterUserCLICommands>
}
 8007c4e:	bd10      	pop	{r4, pc}
 8007c50:	0801db0c 	.word	0x0801db0c
 8007c54:	0801dafc 	.word	0x0801dafc
 8007c58:	0801daec 	.word	0x0801daec
 8007c5c:	0801da08 	.word	0x0801da08
 8007c60:	0801da58 	.word	0x0801da58
 8007c64:	0801db2c 	.word	0x0801db2c
 8007c68:	0801dacc 	.word	0x0801dacc
 8007c6c:	0801da88 	.word	0x0801da88
 8007c70:	0801db7c 	.word	0x0801db7c
 8007c74:	0801daa8 	.word	0x0801daa8
 8007c78:	0801db3c 	.word	0x0801db3c
 8007c7c:	0801d9f8 	.word	0x0801d9f8
 8007c80:	0801db1c 	.word	0x0801db1c
 8007c84:	0801db5c 	.word	0x0801db5c
 8007c88:	0801da78 	.word	0x0801da78
 8007c8c:	0801da38 	.word	0x0801da38
 8007c90:	0801db9c 	.word	0x0801db9c
 8007c94:	0801da28 	.word	0x0801da28
 8007c98:	0801db4c 	.word	0x0801db4c
 8007c9c:	0801dbbc 	.word	0x0801dbbc
 8007ca0:	0801da98 	.word	0x0801da98
 8007ca4:	0801da68 	.word	0x0801da68
 8007ca8:	0801db6c 	.word	0x0801db6c
 8007cac:	0801d9e8 	.word	0x0801d9e8
 8007cb0:	0801dadc 	.word	0x0801dadc
 8007cb4:	0801da48 	.word	0x0801da48
 8007cb8:	0801da18 	.word	0x0801da18
 8007cbc:	0801dbac 	.word	0x0801dbac
 8007cc0:	0801db8c 	.word	0x0801db8c
 8007cc4:	0801d9a8 	.word	0x0801d9a8
 8007cc8:	0801d9c8 	.word	0x0801d9c8
 8007ccc:	0801d9d8 	.word	0x0801d9d8
 8007cd0:	0801d9b8 	.word	0x0801d9b8
 8007cd4:	20006a34 	.word	0x20006a34

08007cd8 <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 8007cd8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 8007cda:	1e44      	subs	r4, r0, #1
 8007cdc:	00e5      	lsls	r5, r4, #3
 8007cde:	4e07      	ldr	r6, [pc, #28]	; (8007cfc <StopStreamDMA+0x24>)
 8007ce0:	1b2d      	subs	r5, r5, r4
 8007ce2:	00ed      	lsls	r5, r5, #3
 8007ce4:	19a8      	adds	r0, r5, r6
	
	HAL_DMA_Abort(hDMA);
 8007ce6:	f009 ff19 	bl	8011b1c <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] =0;
 8007cee:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR =0;
 8007cf0:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007cf2:	4a03      	ldr	r2, [pc, #12]	; (8007d00 <StopStreamDMA+0x28>)
 8007cf4:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 8007cf6:	4a03      	ldr	r2, [pc, #12]	; (8007d04 <StopStreamDMA+0x2c>)
 8007cf8:	50a3      	str	r3, [r4, r2]
	
}
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	20001a80 	.word	0x20001a80
 8007d00:	20001528 	.word	0x20001528
 8007d04:	20001558 	.word	0x20001558

08007d08 <SwitchMsgDMAToStream>:
	hDMA =&msgRxDMA[port - 1];
 8007d08:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8007d0a:	b570      	push	{r4, r5, r6, lr}
 8007d0c:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 8007d0e:	4d07      	ldr	r5, [pc, #28]	; (8007d2c <SwitchMsgDMAToStream+0x24>)
 8007d10:	1a24      	subs	r4, r4, r0
 8007d12:	00e4      	lsls	r4, r4, #3
 8007d14:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 8007d16:	f009 ff01 	bl	8011b1c <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	5961      	ldr	r1, [r4, r5]
	
	// Stop the messaging DMA
	StopMsgDMA(port);
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8007d1e:	4804      	ldr	r0, [pc, #16]	; (8007d30 <SwitchMsgDMAToStream+0x28>)
	hDMA->Instance->CNDTR =0;
 8007d20:	604b      	str	r3, [r1, #4]
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8007d22:	1820      	adds	r0, r4, r0
 8007d24:	f004 fe8a 	bl	800ca3c <DMA_STREAM_CH_Init>
}
 8007d28:	bd70      	pop	{r4, r5, r6, pc}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	20001888 	.word	0x20001888
 8007d30:	20001a80 	.word	0x20001a80

08007d34 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007d34:	b5f0      	push	{r4, r5, r6, r7, lr}
	hDMA =&streamDMA[port - 1];
 8007d36:	1e45      	subs	r5, r0, #1
 8007d38:	00ec      	lsls	r4, r5, #3
 8007d3a:	4b18      	ldr	r3, [pc, #96]	; (8007d9c <SwitchStreamDMAToMsg+0x68>)
 8007d3c:	1b64      	subs	r4, r4, r5
 8007d3e:	00e4      	lsls	r4, r4, #3
void SwitchStreamDMAToMsg(uint8_t port){
 8007d40:	46d6      	mov	lr, sl
 8007d42:	464f      	mov	r7, r9
	hDMA =&streamDMA[port - 1];
 8007d44:	46a2      	mov	sl, r4
 8007d46:	4699      	mov	r9, r3
void SwitchStreamDMAToMsg(uint8_t port){
 8007d48:	4646      	mov	r6, r8
	hDMA =&streamDMA[port - 1];
 8007d4a:	44ca      	add	sl, r9
void SwitchStreamDMAToMsg(uint8_t port){
 8007d4c:	b5c0      	push	{r6, r7, lr}
 8007d4e:	4680      	mov	r8, r0
	HAL_DMA_Abort(hDMA);
 8007d50:	4650      	mov	r0, sl
 8007d52:	f009 fee3 	bl	8011b1c <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007d56:	464b      	mov	r3, r9
 8007d58:	2600      	movs	r6, #0
 8007d5a:	58e1      	ldr	r1, [r4, r3]
	// Stop the streaming DMA
	StopStreamDMA(port);
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007d5c:	4f10      	ldr	r7, [pc, #64]	; (8007da0 <SwitchStreamDMAToMsg+0x6c>)
	dmaStreamCount[port - 1] =0;
 8007d5e:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <SwitchStreamDMAToMsg+0x70>)
 8007d60:	00ad      	lsls	r5, r5, #2
	hDMA->Instance->CNDTR =0;
 8007d62:	604e      	str	r6, [r1, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007d64:	19e7      	adds	r7, r4, r7
	dmaStreamCount[port - 1] =0;
 8007d66:	50ee      	str	r6, [r5, r3]
	dmaStreamTotal[port - 1] =0;
 8007d68:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <SwitchStreamDMAToMsg+0x74>)
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007d6a:	0038      	movs	r0, r7
	dmaStreamTotal[port - 1] =0;
 8007d6c:	50ee      	str	r6, [r5, r3]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007d6e:	f004 fe53 	bl	800ca18 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8007d72:	4653      	mov	r3, sl
 8007d74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007d76:	f004 f953 	bl	800c020 <GetPort>
 8007d7a:	4b0c      	ldr	r3, [pc, #48]	; (8007dac <SwitchStreamDMAToMsg+0x78>)
 8007d7c:	541e      	strb	r6, [r3, r0]
	streamDMA[port - 1].Instance =0;
 8007d7e:	464b      	mov	r3, r9
 8007d80:	50e6      	str	r6, [r4, r3]
	dmaStreamDst[port - 1] =0;
 8007d82:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <SwitchStreamDMAToMsg+0x7c>)
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007d84:	4640      	mov	r0, r8
	dmaStreamDst[port - 1] =0;
 8007d86:	50ee      	str	r6, [r5, r3]
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007d88:	f006 fcea 	bl	800e760 <GetUart>
 8007d8c:	0039      	movs	r1, r7
 8007d8e:	f005 fa17 	bl	800d1c0 <DMA_MSG_RX_Setup>
	
}
 8007d92:	bce0      	pop	{r5, r6, r7}
 8007d94:	46ba      	mov	sl, r7
 8007d96:	46b1      	mov	r9, r6
 8007d98:	46a8      	mov	r8, r5
 8007d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d9c:	20001a80 	.word	0x20001a80
 8007da0:	20001888 	.word	0x20001888
 8007da4:	20001528 	.word	0x20001528
 8007da8:	20001558 	.word	0x20001558
 8007dac:	20001190 	.word	0x20001190
 8007db0:	20001540 	.word	0x20001540

08007db4 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007db6:	46c6      	mov	lr, r8
 8007db8:	b500      	push	{lr}
 8007dba:	0005      	movs	r5, r0
 8007dbc:	000e      	movs	r6, r1
 8007dbe:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007dc0:	f004 f92e 	bl	800c020 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007dc4:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <StartDMAstream+0x50>)
	uint8_t srcPort =GetPort(huartSrc);
 8007dc6:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007dc8:	4698      	mov	r8, r3
 8007dca:	5c1b      	ldrb	r3, [r3, r0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d905      	bls.n	8007ddc <StartDMAstream+0x28>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007dd0:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d002      	beq.n	8007ddc <StartDMAstream+0x28>
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
	
	return BOS_OK;
}
 8007dd6:	bc80      	pop	{r7}
 8007dd8:	46b8      	mov	r8, r7
 8007dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwitchMsgDMAToStream(srcPort);
 8007ddc:	0020      	movs	r0, r4
 8007dde:	f7ff ff93 	bl	8007d08 <SwitchMsgDMAToStream>
	dmaStreamDst[srcPort - 1] =huartDst;
 8007de2:	4a09      	ldr	r2, [pc, #36]	; (8007e08 <StartDMAstream+0x54>)
 8007de4:	1e63      	subs	r3, r4, #1
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	509e      	str	r6, [r3, r2]
	portStatus[srcPort] =STREAM;
 8007dea:	4641      	mov	r1, r8
 8007dec:	2202      	movs	r2, #2
 8007dee:	550a      	strb	r2, [r1, r4]
	dmaStreamCount[srcPort - 1] =0;
 8007df0:	2100      	movs	r1, #0
 8007df2:	4a06      	ldr	r2, [pc, #24]	; (8007e0c <StartDMAstream+0x58>)
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007df4:	0028      	movs	r0, r5
	dmaStreamCount[srcPort - 1] =0;
 8007df6:	5099      	str	r1, [r3, r2]
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007df8:	003a      	movs	r2, r7
 8007dfa:	0031      	movs	r1, r6
 8007dfc:	f005 fa50 	bl	800d2a0 <DMA_STREAM_Setup>
	return BOS_OK;
 8007e00:	2000      	movs	r0, #0
 8007e02:	e7e8      	b.n	8007dd6 <StartDMAstream+0x22>
 8007e04:	20001190 	.word	0x20001190
 8007e08:	20001540 	.word	0x20001540
 8007e0c:	20001528 	.word	0x20001528

08007e10 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e12:	46d6      	mov	lr, sl
 8007e14:	464f      	mov	r7, r9
 8007e16:	4646      	mov	r6, r8
 8007e18:	b5c0      	push	{r6, r7, lr}
	if(portStatus[port] != STREAM){
 8007e1a:	4b1b      	ldr	r3, [pc, #108]	; (8007e88 <DMA_IRQHandler+0x78>)
 8007e1c:	5c1b      	ldrb	r3, [r3, r0]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d00c      	beq.n	8007e3c <DMA_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007e22:	3801      	subs	r0, #1
 8007e24:	00c3      	lsls	r3, r0, #3
 8007e26:	1a18      	subs	r0, r3, r0
 8007e28:	4b18      	ldr	r3, [pc, #96]	; (8007e8c <DMA_IRQHandler+0x7c>)
 8007e2a:	00c0      	lsls	r0, r0, #3
 8007e2c:	18c0      	adds	r0, r0, r3
 8007e2e:	f009 fe9f 	bl	8011b70 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007e32:	bce0      	pop	{r5, r6, r7}
 8007e34:	46ba      	mov	sl, r7
 8007e36:	46b1      	mov	r9, r6
 8007e38:	46a8      	mov	r8, r5
 8007e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007e3c:	1e44      	subs	r4, r0, #1
 8007e3e:	00e3      	lsls	r3, r4, #3
 8007e40:	1b1d      	subs	r5, r3, r4
 8007e42:	4698      	mov	r8, r3
 8007e44:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <DMA_IRQHandler+0x80>)
 8007e46:	00ed      	lsls	r5, r5, #3
 8007e48:	4699      	mov	r9, r3
 8007e4a:	444d      	add	r5, r9
 8007e4c:	0028      	movs	r0, r5
 8007e4e:	f009 fe8f 	bl	8011b70 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007e52:	4b10      	ldr	r3, [pc, #64]	; (8007e94 <DMA_IRQHandler+0x84>)
 8007e54:	00a6      	lsls	r6, r4, #2
 8007e56:	599a      	ldr	r2, [r3, r6]
 8007e58:	469a      	mov	sl, r3
			++dmaStreamCount[port - 1];
 8007e5a:	4f0f      	ldr	r7, [pc, #60]	; (8007e98 <DMA_IRQHandler+0x88>)
		if(dmaStreamTotal[port - 1])
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	d004      	beq.n	8007e6a <DMA_IRQHandler+0x5a>
			++dmaStreamCount[port - 1];
 8007e60:	59bb      	ldr	r3, [r7, r6]
 8007e62:	3301      	adds	r3, #1
 8007e64:	51bb      	str	r3, [r7, r6]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d8e3      	bhi.n	8007e32 <DMA_IRQHandler+0x22>
	HAL_DMA_Abort(hDMA);
 8007e6a:	0028      	movs	r0, r5
 8007e6c:	f009 fe56 	bl	8011b1c <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007e70:	4643      	mov	r3, r8
 8007e72:	1b18      	subs	r0, r3, r4
 8007e74:	464b      	mov	r3, r9
 8007e76:	00c0      	lsls	r0, r0, #3
 8007e78:	581a      	ldr	r2, [r3, r0]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	6053      	str	r3, [r2, #4]
	dmaStreamTotal[port - 1] =0;
 8007e7e:	4652      	mov	r2, sl
	dmaStreamCount[port - 1] =0;
 8007e80:	51bb      	str	r3, [r7, r6]
	dmaStreamTotal[port - 1] =0;
 8007e82:	5193      	str	r3, [r2, r6]
}
 8007e84:	e7d5      	b.n	8007e32 <DMA_IRQHandler+0x22>
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	20001190 	.word	0x20001190
 8007e8c:	20001888 	.word	0x20001888
 8007e90:	20001a80 	.word	0x20001a80
 8007e94:	20001558 	.word	0x20001558
 8007e98:	20001528 	.word	0x20001528

08007e9c <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007e9c:	4b08      	ldr	r3, [pc, #32]	; (8007ec0 <ResetUartORE+0x24>)
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	2308      	movs	r3, #8
 8007ea2:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007ea4:	4a07      	ldr	r2, [pc, #28]	; (8007ec4 <ResetUartORE+0x28>)
 8007ea6:	6812      	ldr	r2, [r2, #0]
 8007ea8:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007eaa:	4a07      	ldr	r2, [pc, #28]	; (8007ec8 <ResetUartORE+0x2c>)
 8007eac:	6812      	ldr	r2, [r2, #0]
 8007eae:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007eb0:	4a06      	ldr	r2, [pc, #24]	; (8007ecc <ResetUartORE+0x30>)
 8007eb2:	6812      	ldr	r2, [r2, #0]
 8007eb4:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007eb6:	4a06      	ldr	r2, [pc, #24]	; (8007ed0 <ResetUartORE+0x34>)
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	6213      	str	r3, [r2, #32]
#endif
}
 8007ebc:	4770      	bx	lr
 8007ebe:	46c0      	nop			; (mov r8, r8)
 8007ec0:	20006cb0 	.word	0x20006cb0
 8007ec4:	20006e00 	.word	0x20006e00
 8007ec8:	20006bd0 	.word	0x20006bd0
 8007ecc:	20006c40 	.word	0x20006c40
 8007ed0:	20006d20 	.word	0x20006d20

08007ed4 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	000d      	movs	r5, r1
 8007ed8:	0006      	movs	r6, r0
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007eda:	4c25      	ldr	r4, [pc, #148]	; (8007f70 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8007edc:	f00a facc 	bl	8012478 <HAL_FLASH_Unlock>
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007ee0:	4924      	ldr	r1, [pc, #144]	; (8007f74 <EE_VerifyPageFullWriteVariable+0xa0>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007ee2:	8823      	ldrh	r3, [r4, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007ee4:	880a      	ldrh	r2, [r1, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007ee6:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007ee8:	b290      	uxth	r0, r2
			if(PageStatusB == VALID_PAGE){
 8007eea:	2a00      	cmp	r2, #0
 8007eec:	d126      	bne.n	8007f3c <EE_VerifyPageFullWriteVariable+0x68>
				if(PageStatusA == RECEIVE_DATA){
 8007eee:	4a22      	ldr	r2, [pc, #136]	; (8007f78 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d028      	beq.n	8007f46 <EE_VerifyPageFullWriteVariable+0x72>
				if(PageStatusB == RECEIVE_DATA){
 8007ef4:	000c      	movs	r4, r1
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 8007ef6:	6823      	ldr	r3, [r4, #0]
				if(PageStatusB == RECEIVE_DATA){
 8007ef8:	4a20      	ldr	r2, [pc, #128]	; (8007f7c <EE_VerifyPageFullWriteVariable+0xa8>)
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 8007efa:	3301      	adds	r3, #1
 8007efc:	d125      	bne.n	8007f4a <EE_VerifyPageFullWriteVariable+0x76>
			/* Set variable data */
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 8007efe:	002a      	movs	r2, r5
 8007f00:	2300      	movs	r3, #0
 8007f02:	0021      	movs	r1, r4
 8007f04:	2001      	movs	r0, #1
 8007f06:	f00a fb13 	bl	8012530 <HAL_FLASH_Program>
			/* Wait for last operation to be completed */
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f0a:	481d      	ldr	r0, [pc, #116]	; (8007f80 <EE_VerifyPageFullWriteVariable+0xac>)
 8007f0c:	f00a fad0 	bl	80124b0 <FLASH_WaitForLastOperation>
			/* If program operation was failed, a Flash error code is returned */
			if(FlashStatus != HAL_OK){
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d10f      	bne.n	8007f34 <EE_VerifyPageFullWriteVariable+0x60>
				return pFlash.ErrorCode;
			}
			else{
				/* If the program operation is completed, disable the PG Bit */
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007f14:	2701      	movs	r7, #1
 8007f16:	4d1b      	ldr	r5, [pc, #108]	; (8007f84 <EE_VerifyPageFullWriteVariable+0xb0>)
			}
			
			/* Set variable virtual address */
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007f18:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007f1a:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007f1c:	2001      	movs	r0, #1
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007f1e:	43bb      	bics	r3, r7
 8007f20:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007f22:	1ca1      	adds	r1, r4, #2
 8007f24:	2300      	movs	r3, #0
 8007f26:	f00a fb03 	bl	8012530 <HAL_FLASH_Program>
			
			/* Wait for last operation to be completed */
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007f2a:	4815      	ldr	r0, [pc, #84]	; (8007f80 <EE_VerifyPageFullWriteVariable+0xac>)
 8007f2c:	f00a fac0 	bl	80124b0 <FLASH_WaitForLastOperation>
			/* If program operation was failed, a Flash error code is returned */
			if(FlashStatus != HAL_OK){
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d019      	beq.n	8007f68 <EE_VerifyPageFullWriteVariable+0x94>
				/* If the program operation is completed, disable the PG Bit */
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
			}
			
			/* Return program operation status */
			return pFlash.ErrorCode;
 8007f34:	4b14      	ldr	r3, [pc, #80]	; (8007f88 <EE_VerifyPageFullWriteVariable+0xb4>)
 8007f36:	69d8      	ldr	r0, [r3, #28]
 8007f38:	b280      	uxth	r0, r0
	
	HAL_FLASH_Lock();
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
}
 8007f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(PageStatusA == VALID_PAGE){
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d111      	bne.n	8007f64 <EE_VerifyPageFullWriteVariable+0x90>
				if(PageStatusB == RECEIVE_DATA){
 8007f40:	4b0d      	ldr	r3, [pc, #52]	; (8007f78 <EE_VerifyPageFullWriteVariable+0xa4>)
 8007f42:	4298      	cmp	r0, r3
 8007f44:	d0d6      	beq.n	8007ef4 <EE_VerifyPageFullWriteVariable+0x20>
 8007f46:	4a11      	ldr	r2, [pc, #68]	; (8007f8c <EE_VerifyPageFullWriteVariable+0xb8>)
	while(Address < PageEndAddress){
 8007f48:	e002      	b.n	8007f50 <EE_VerifyPageFullWriteVariable+0x7c>
			Address =Address + 4;
 8007f4a:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 8007f4c:	42a2      	cmp	r2, r4
 8007f4e:	d905      	bls.n	8007f5c <EE_VerifyPageFullWriteVariable+0x88>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	3301      	adds	r3, #1
 8007f54:	d0d3      	beq.n	8007efe <EE_VerifyPageFullWriteVariable+0x2a>
			Address =Address + 4;
 8007f56:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 8007f58:	42a2      	cmp	r2, r4
 8007f5a:	d8f9      	bhi.n	8007f50 <EE_VerifyPageFullWriteVariable+0x7c>
	HAL_FLASH_Lock();
 8007f5c:	f00a fa9e 	bl	801249c <HAL_FLASH_Lock>
	return PAGE_FULL;
 8007f60:	2080      	movs	r0, #128	; 0x80
 8007f62:	e7ea      	b.n	8007f3a <EE_VerifyPageFullWriteVariable+0x66>
		return NO_VALID_PAGE;
 8007f64:	20ab      	movs	r0, #171	; 0xab
 8007f66:	e7e8      	b.n	8007f3a <EE_VerifyPageFullWriteVariable+0x66>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007f68:	692b      	ldr	r3, [r5, #16]
 8007f6a:	43bb      	bics	r3, r7
 8007f6c:	612b      	str	r3, [r5, #16]
 8007f6e:	e7e1      	b.n	8007f34 <EE_VerifyPageFullWriteVariable+0x60>
 8007f70:	0801e000 	.word	0x0801e000
 8007f74:	0801f000 	.word	0x0801f000
 8007f78:	0000eeee 	.word	0x0000eeee
 8007f7c:	0801fffe 	.word	0x0801fffe
 8007f80:	0000c350 	.word	0x0000c350
 8007f84:	40022000 	.word	0x40022000
 8007f88:	20006fe0 	.word	0x20006fe0
 8007f8c:	0801effe 	.word	0x0801effe

08007f90 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007f90:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <EE_ReadVariable+0x40>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007f92:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007f94:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007f96:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <EE_ReadVariable+0x44>)
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 8007f9c:	2a00      	cmp	r2, #0
 8007f9e:	d011      	beq.n	8007fc4 <EE_ReadVariable+0x34>
			else if(PageStatusB == VALID_PAGE){
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10d      	bne.n	8007fc0 <EE_ReadVariable+0x30>
 8007fa4:	4c0c      	ldr	r4, [pc, #48]	; (8007fd8 <EE_ReadVariable+0x48>)
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <EE_ReadVariable+0x4c>)
	while(Address > (PageStartAddress + 2)){
 8007fa8:	e002      	b.n	8007fb0 <EE_ReadVariable+0x20>
			Address =Address - 4;
 8007faa:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 8007fac:	429c      	cmp	r4, r3
 8007fae:	d20c      	bcs.n	8007fca <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 8007fb0:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 8007fb2:	4282      	cmp	r2, r0
 8007fb4:	d1f9      	bne.n	8007faa <EE_ReadVariable+0x1a>
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007fb6:	3b02      	subs	r3, #2
 8007fb8:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 8007fba:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007fbc:	800b      	strh	r3, [r1, #0]
			break;
 8007fbe:	e000      	b.n	8007fc2 <EE_ReadVariable+0x32>
		return NO_VALID_PAGE;
 8007fc0:	20ab      	movs	r0, #171	; 0xab
}
 8007fc2:	bd10      	pop	{r4, pc}
 8007fc4:	4c06      	ldr	r4, [pc, #24]	; (8007fe0 <EE_ReadVariable+0x50>)
 8007fc6:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <EE_ReadVariable+0x54>)
 8007fc8:	e7f2      	b.n	8007fb0 <EE_ReadVariable+0x20>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 8007fca:	2001      	movs	r0, #1
 8007fcc:	e7f9      	b.n	8007fc2 <EE_ReadVariable+0x32>
 8007fce:	46c0      	nop			; (mov r8, r8)
 8007fd0:	0801e000 	.word	0x0801e000
 8007fd4:	0801f000 	.word	0x0801f000
 8007fd8:	0801f002 	.word	0x0801f002
 8007fdc:	0801fffe 	.word	0x0801fffe
 8007fe0:	0801e002 	.word	0x0801e002
 8007fe4:	0801effe 	.word	0x0801effe

08007fe8 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fea:	46d6      	mov	lr, sl
 8007fec:	4646      	mov	r6, r8
 8007fee:	464f      	mov	r7, r9
 8007ff0:	000d      	movs	r5, r1
 8007ff2:	b5c0      	push	{r6, r7, lr}
 8007ff4:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 8007ff6:	f00a fa3f 	bl	8012478 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007ffa:	0029      	movs	r1, r5
 8007ffc:	0030      	movs	r0, r6
 8007ffe:	f7ff ff69 	bl	8007ed4 <EE_VerifyPageFullWriteVariable>
 8008002:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 8008004:	2880      	cmp	r0, #128	; 0x80
 8008006:	d007      	beq.n	8008018 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8008008:	f00a fa48 	bl	801249c <HAL_FLASH_Lock>
}
 800800c:	0020      	movs	r0, r4
 800800e:	bce0      	pop	{r5, r6, r7}
 8008010:	46ba      	mov	sl, r7
 8008012:	46b1      	mov	r9, r6
 8008014:	46a8      	mov	r8, r5
 8008016:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8008018:	f00a fa2e 	bl	8012478 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800801c:	4935      	ldr	r1, [pc, #212]	; (80080f4 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800801e:	4a36      	ldr	r2, [pc, #216]	; (80080f8 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8008020:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8008022:	8813      	ldrh	r3, [r2, #0]
 8008024:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 8008026:	2800      	cmp	r0, #0
 8008028:	d05a      	beq.n	80080e0 <EE_WriteVariable+0xf8>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800802a:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1eb      	bne.n	8008008 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 8008030:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8008032:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 8008034:	2300      	movs	r3, #0
 8008036:	4641      	mov	r1, r8
 8008038:	2001      	movs	r0, #1
 800803a:	4a30      	ldr	r2, [pc, #192]	; (80080fc <EE_WriteVariable+0x114>)
 800803c:	f00a fa78 	bl	8012530 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008040:	482f      	ldr	r0, [pc, #188]	; (8008100 <EE_WriteVariable+0x118>)
 8008042:	f00a fa35 	bl	80124b0 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8008046:	2800      	cmp	r0, #0
 8008048:	d14d      	bne.n	80080e6 <EE_WriteVariable+0xfe>
		return pFlash.ErrorCode;
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800804a:	2101      	movs	r1, #1
 800804c:	4a2d      	ldr	r2, [pc, #180]	; (8008104 <EE_WriteVariable+0x11c>)
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800804e:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8008050:	6913      	ldr	r3, [r2, #16]
 8008052:	438b      	bics	r3, r1
 8008054:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8008056:	0029      	movs	r1, r5
 8008058:	f7ff ff3c 	bl	8007ed4 <EE_VerifyPageFullWriteVariable>
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800805c:	2800      	cmp	r0, #0
 800805e:	d146      	bne.n	80080ee <EE_WriteVariable+0x106>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8008060:	4b29      	ldr	r3, [pc, #164]	; (8008108 <EE_WriteVariable+0x120>)
 8008062:	2501      	movs	r5, #1
 8008064:	469a      	mov	sl, r3
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
		{
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8008066:	4f29      	ldr	r7, [pc, #164]	; (800810c <EE_WriteVariable+0x124>)
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8008068:	42ae      	cmp	r6, r5
 800806a:	d00b      	beq.n	8008084 <EE_WriteVariable+0x9c>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800806c:	0039      	movs	r1, r7
 800806e:	0028      	movs	r0, r5
 8008070:	f7ff ff8e 	bl	8007f90 <EE_ReadVariable>
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
 8008074:	2801      	cmp	r0, #1
 8008076:	d005      	beq.n	8008084 <EE_WriteVariable+0x9c>
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8008078:	0028      	movs	r0, r5
 800807a:	8839      	ldrh	r1, [r7, #0]
 800807c:	f7ff ff2a 	bl	8007ed4 <EE_VerifyPageFullWriteVariable>
 8008080:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 8008082:	d1c1      	bne.n	8008008 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8008084:	3501      	adds	r5, #1
 8008086:	b2ad      	uxth	r5, r5
 8008088:	4555      	cmp	r5, sl
 800808a:	d1ed      	bne.n	8008068 <EE_WriteVariable+0x80>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 800808c:	4648      	mov	r0, r9
 800808e:	f00a fb1f 	bl	80126d0 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008092:	481b      	ldr	r0, [pc, #108]	; (8008100 <EE_WriteVariable+0x118>)
 8008094:	f00a fa0c 	bl	80124b0 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8008098:	2800      	cmp	r0, #0
 800809a:	d124      	bne.n	80080e6 <EE_WriteVariable+0xfe>
		return pFlash.ErrorCode;
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800809c:	2080      	movs	r0, #128	; 0x80
 800809e:	0100      	lsls	r0, r0, #4
 80080a0:	4448      	add	r0, r9
 80080a2:	f00a fb15 	bl	80126d0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80080a6:	4816      	ldr	r0, [pc, #88]	; (8008100 <EE_WriteVariable+0x118>)
 80080a8:	f00a fa02 	bl	80124b0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d11a      	bne.n	80080e6 <EE_WriteVariable+0xfe>
			return pFlash.ErrorCode;
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80080b0:	2202      	movs	r2, #2
 80080b2:	4c14      	ldr	r4, [pc, #80]	; (8008104 <EE_WriteVariable+0x11c>)
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 80080b4:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80080b6:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 80080b8:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80080ba:	4393      	bics	r3, r2
 80080bc:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 80080be:	2200      	movs	r2, #0
 80080c0:	2300      	movs	r3, #0
 80080c2:	f00a fa35 	bl	8012530 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80080c6:	480e      	ldr	r0, [pc, #56]	; (8008100 <EE_WriteVariable+0x118>)
 80080c8:	f00a f9f2 	bl	80124b0 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d10a      	bne.n	80080e6 <EE_WriteVariable+0xfe>
		return pFlash.ErrorCode;
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80080d0:	2201      	movs	r2, #1
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	4393      	bics	r3, r2
 80080d6:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 80080d8:	f00a f9e0 	bl	801249c <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 80080dc:	2400      	movs	r4, #0
 80080de:	e793      	b.n	8008008 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 80080e0:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 80080e2:	4690      	mov	r8, r2
 80080e4:	e7a6      	b.n	8008034 <EE_WriteVariable+0x4c>
		return pFlash.ErrorCode;
 80080e6:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <EE_WriteVariable+0x128>)
 80080e8:	69dc      	ldr	r4, [r3, #28]
 80080ea:	b2a4      	uxth	r4, r4
 80080ec:	e78c      	b.n	8008008 <EE_WriteVariable+0x20>
 80080ee:	0004      	movs	r4, r0
 80080f0:	e78a      	b.n	8008008 <EE_WriteVariable+0x20>
 80080f2:	46c0      	nop			; (mov r8, r8)
 80080f4:	0801e000 	.word	0x0801e000
 80080f8:	0801f000 	.word	0x0801f000
 80080fc:	0000eeee 	.word	0x0000eeee
 8008100:	0000c350 	.word	0x0000c350
 8008104:	40022000 	.word	0x40022000
 8008108:	00000401 	.word	0x00000401
 800810c:	20001570 	.word	0x20001570
 8008110:	20006fe0 	.word	0x20006fe0

08008114 <EE_Format>:
uint16_t EE_Format(void){
 8008114:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 8008116:	f00a f9af 	bl	8012478 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800811a:	481f      	ldr	r0, [pc, #124]	; (8008198 <EE_Format+0x84>)
 800811c:	f00a fad8 	bl	80126d0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008120:	481e      	ldr	r0, [pc, #120]	; (800819c <EE_Format+0x88>)
 8008122:	f00a f9c5 	bl	80124b0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8008126:	2800      	cmp	r0, #0
 8008128:	d003      	beq.n	8008132 <EE_Format+0x1e>
			return pFlash.ErrorCode;
 800812a:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <EE_Format+0x8c>)
 800812c:	69d8      	ldr	r0, [r3, #28]
 800812e:	b280      	uxth	r0, r0
}
 8008130:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8008132:	481c      	ldr	r0, [pc, #112]	; (80081a4 <EE_Format+0x90>)
 8008134:	f00a facc 	bl	80126d0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008138:	4818      	ldr	r0, [pc, #96]	; (800819c <EE_Format+0x88>)
 800813a:	f00a f9b9 	bl	80124b0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800813e:	2800      	cmp	r0, #0
 8008140:	d1f3      	bne.n	800812a <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8008142:	2202      	movs	r2, #2
 8008144:	4c18      	ldr	r4, [pc, #96]	; (80081a8 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8008146:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8008148:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800814a:	4913      	ldr	r1, [pc, #76]	; (8008198 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800814c:	4393      	bics	r3, r2
 800814e:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8008150:	2200      	movs	r2, #0
 8008152:	2300      	movs	r3, #0
 8008154:	f00a f9ec 	bl	8012530 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008158:	4810      	ldr	r0, [pc, #64]	; (800819c <EE_Format+0x88>)
 800815a:	f00a f9a9 	bl	80124b0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800815e:	2800      	cmp	r0, #0
 8008160:	d1e3      	bne.n	800812a <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8008162:	2501      	movs	r5, #1
 8008164:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8008166:	4811      	ldr	r0, [pc, #68]	; (80081ac <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8008168:	43ab      	bics	r3, r5
 800816a:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800816c:	f00a fab0 	bl	80126d0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008170:	480a      	ldr	r0, [pc, #40]	; (800819c <EE_Format+0x88>)
 8008172:	f00a f99d 	bl	80124b0 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8008176:	2800      	cmp	r0, #0
 8008178:	d1d7      	bne.n	800812a <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800817a:	480d      	ldr	r0, [pc, #52]	; (80081b0 <EE_Format+0x9c>)
 800817c:	f00a faa8 	bl	80126d0 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008180:	4806      	ldr	r0, [pc, #24]	; (800819c <EE_Format+0x88>)
 8008182:	f00a f995 	bl	80124b0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8008186:	2800      	cmp	r0, #0
 8008188:	d1cf      	bne.n	800812a <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	43ab      	bics	r3, r5
 800818e:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 8008190:	f00a f984 	bl	801249c <HAL_FLASH_Lock>
	return FlashStatus;
 8008194:	2000      	movs	r0, #0
 8008196:	e7cb      	b.n	8008130 <EE_Format+0x1c>
 8008198:	0801e000 	.word	0x0801e000
 800819c:	0000c350 	.word	0x0000c350
 80081a0:	20006fe0 	.word	0x20006fe0
 80081a4:	0801e800 	.word	0x0801e800
 80081a8:	40022000 	.word	0x40022000
 80081ac:	0801f000 	.word	0x0801f000
 80081b0:	0801f800 	.word	0x0801f800

080081b4 <EE_Init>:
uint16_t EE_Init(void){
 80081b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b6:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80081b8:	4ca1      	ldr	r4, [pc, #644]	; (8008440 <EE_Init+0x28c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80081ba:	4da2      	ldr	r5, [pc, #648]	; (8008444 <EE_Init+0x290>)
uint16_t EE_Init(void){
 80081bc:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 80081be:	f00a f95b 	bl	8012478 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80081c2:	8821      	ldrh	r1, [r4, #0]
	switch(PageStatusA){
 80081c4:	48a0      	ldr	r0, [pc, #640]	; (8008448 <EE_Init+0x294>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80081c6:	882b      	ldrh	r3, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80081c8:	b28a      	uxth	r2, r1
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80081ca:	b29b      	uxth	r3, r3
	switch(PageStatusA){
 80081cc:	4281      	cmp	r1, r0
 80081ce:	d04d      	beq.n	800826c <EE_Init+0xb8>
 80081d0:	499e      	ldr	r1, [pc, #632]	; (800844c <EE_Init+0x298>)
 80081d2:	428a      	cmp	r2, r1
 80081d4:	d03a      	beq.n	800824c <EE_Init+0x98>
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	d00e      	beq.n	80081f8 <EE_Init+0x44>
			FlashStatus =EE_Format();
 80081da:	f7ff ff9b 	bl	8008114 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80081de:	489c      	ldr	r0, [pc, #624]	; (8008450 <EE_Init+0x29c>)
 80081e0:	f00a f966 	bl	80124b0 <FLASH_WaitForLastOperation>
 80081e4:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 80081e6:	2d00      	cmp	r5, #0
 80081e8:	d102      	bne.n	80081f0 <EE_Init+0x3c>
	HAL_FLASH_Lock();
 80081ea:	f00a f957 	bl	801249c <HAL_FLASH_Lock>
	return HAL_OK;
 80081ee:	2500      	movs	r5, #0
}
 80081f0:	0028      	movs	r0, r5
 80081f2:	bc80      	pop	{r7}
 80081f4:	46b8      	mov	r8, r7
 80081f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0ee      	beq.n	80081da <EE_Init+0x26>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 80081fc:	428b      	cmp	r3, r1
 80081fe:	d100      	bne.n	8008202 <EE_Init+0x4e>
 8008200:	e10b      	b.n	800841a <EE_Init+0x266>
	int16_t x =-1;
 8008202:	2601      	movs	r6, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8008204:	4b93      	ldr	r3, [pc, #588]	; (8008454 <EE_Init+0x2a0>)
 8008206:	2401      	movs	r4, #1
 8008208:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800820a:	4f93      	ldr	r7, [pc, #588]	; (8008458 <EE_Init+0x2a4>)
	int16_t x =-1;
 800820c:	4276      	negs	r6, r6
 800820e:	e004      	b.n	800821a <EE_Init+0x66>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8008210:	4b92      	ldr	r3, [pc, #584]	; (800845c <EE_Init+0x2a8>)
 8008212:	3401      	adds	r4, #1
 8008214:	429c      	cmp	r4, r3
 8008216:	d100      	bne.n	800821a <EE_Init+0x66>
 8008218:	e08d      	b.n	8008336 <EE_Init+0x182>
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800821a:	883b      	ldrh	r3, [r7, #0]
 800821c:	b2a5      	uxth	r5, r4
 800821e:	42ab      	cmp	r3, r5
 8008220:	d100      	bne.n	8008224 <EE_Init+0x70>
						x =VarIdx;
 8008222:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8008224:	42a6      	cmp	r6, r4
 8008226:	d0f3      	beq.n	8008210 <EE_Init+0x5c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8008228:	4641      	mov	r1, r8
 800822a:	0028      	movs	r0, r5
 800822c:	f7ff feb0 	bl	8007f90 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8008230:	2801      	cmp	r0, #1
 8008232:	d0ed      	beq.n	8008210 <EE_Init+0x5c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8008234:	4643      	mov	r3, r8
 8008236:	0028      	movs	r0, r5
 8008238:	8819      	ldrh	r1, [r3, #0]
 800823a:	f7ff fe4b 	bl	8007ed4 <EE_VerifyPageFullWriteVariable>
 800823e:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008240:	4883      	ldr	r0, [pc, #524]	; (8008450 <EE_Init+0x29c>)
 8008242:	f00a f935 	bl	80124b0 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8008246:	2800      	cmp	r0, #0
 8008248:	d0e2      	beq.n	8008210 <EE_Init+0x5c>
 800824a:	e7d1      	b.n	80081f0 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800824c:	2b00      	cmp	r3, #0
 800824e:	d05c      	beq.n	800830a <EE_Init+0x156>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8008250:	4283      	cmp	r3, r0
 8008252:	d100      	bne.n	8008256 <EE_Init+0xa2>
 8008254:	e096      	b.n	8008384 <EE_Init+0x1d0>
				FlashStatus =EE_Format();
 8008256:	f7ff ff5d 	bl	8008114 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800825a:	487d      	ldr	r0, [pc, #500]	; (8008450 <EE_Init+0x29c>)
 800825c:	f00a f928 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008260:	2800      	cmp	r0, #0
 8008262:	d0c2      	beq.n	80081ea <EE_Init+0x36>
						return pFlash.ErrorCode;
 8008264:	4b7e      	ldr	r3, [pc, #504]	; (8008460 <EE_Init+0x2ac>)
 8008266:	69dd      	ldr	r5, [r3, #28]
 8008268:	b2ad      	uxth	r5, r5
 800826a:	e7c1      	b.n	80081f0 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800826c:	2b00      	cmp	r3, #0
 800826e:	d124      	bne.n	80082ba <EE_Init+0x106>
	int16_t x =-1;
 8008270:	2601      	movs	r6, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8008272:	4b78      	ldr	r3, [pc, #480]	; (8008454 <EE_Init+0x2a0>)
 8008274:	2401      	movs	r4, #1
 8008276:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8008278:	4f7a      	ldr	r7, [pc, #488]	; (8008464 <EE_Init+0x2b0>)
	int16_t x =-1;
 800827a:	4276      	negs	r6, r6
 800827c:	e004      	b.n	8008288 <EE_Init+0xd4>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800827e:	4b77      	ldr	r3, [pc, #476]	; (800845c <EE_Init+0x2a8>)
 8008280:	3401      	adds	r4, #1
 8008282:	429c      	cmp	r4, r3
 8008284:	d100      	bne.n	8008288 <EE_Init+0xd4>
 8008286:	e0a5      	b.n	80083d4 <EE_Init+0x220>
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8008288:	883b      	ldrh	r3, [r7, #0]
 800828a:	b2a5      	uxth	r5, r4
 800828c:	42ab      	cmp	r3, r5
 800828e:	d100      	bne.n	8008292 <EE_Init+0xde>
						x =VarIdx;
 8008290:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8008292:	42a6      	cmp	r6, r4
 8008294:	d0f3      	beq.n	800827e <EE_Init+0xca>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8008296:	4641      	mov	r1, r8
 8008298:	0028      	movs	r0, r5
 800829a:	f7ff fe79 	bl	8007f90 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800829e:	2801      	cmp	r0, #1
 80082a0:	d0ed      	beq.n	800827e <EE_Init+0xca>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 80082a2:	4643      	mov	r3, r8
 80082a4:	0028      	movs	r0, r5
 80082a6:	8819      	ldrh	r1, [r3, #0]
 80082a8:	f7ff fe14 	bl	8007ed4 <EE_VerifyPageFullWriteVariable>
 80082ac:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80082ae:	4868      	ldr	r0, [pc, #416]	; (8008450 <EE_Init+0x29c>)
 80082b0:	f00a f8fe 	bl	80124b0 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d0e2      	beq.n	800827e <EE_Init+0xca>
 80082b8:	e79a      	b.n	80081f0 <EE_Init+0x3c>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 80082ba:	4a64      	ldr	r2, [pc, #400]	; (800844c <EE_Init+0x298>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d1ca      	bne.n	8008256 <EE_Init+0xa2>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80082c0:	0028      	movs	r0, r5
 80082c2:	f00a fa05 	bl	80126d0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80082c6:	4862      	ldr	r0, [pc, #392]	; (8008450 <EE_Init+0x29c>)
 80082c8:	f00a f8f2 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d1c9      	bne.n	8008264 <EE_Init+0xb0>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80082d0:	4865      	ldr	r0, [pc, #404]	; (8008468 <EE_Init+0x2b4>)
 80082d2:	f00a f9fd 	bl	80126d0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80082d6:	485e      	ldr	r0, [pc, #376]	; (8008450 <EE_Init+0x29c>)
 80082d8:	f00a f8ea 	bl	80124b0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 80082dc:	2800      	cmp	r0, #0
 80082de:	d1c1      	bne.n	8008264 <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80082e0:	2202      	movs	r2, #2
 80082e2:	4d62      	ldr	r5, [pc, #392]	; (800846c <EE_Init+0x2b8>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 80082e4:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80082e6:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 80082e8:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80082ea:	4393      	bics	r3, r2
 80082ec:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 80082ee:	2200      	movs	r2, #0
 80082f0:	2300      	movs	r3, #0
 80082f2:	f00a f91d 	bl	8012530 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80082f6:	4856      	ldr	r0, [pc, #344]	; (8008450 <EE_Init+0x29c>)
 80082f8:	f00a f8da 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d1b1      	bne.n	8008264 <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8008300:	2201      	movs	r2, #1
 8008302:	692b      	ldr	r3, [r5, #16]
 8008304:	4393      	bics	r3, r2
 8008306:	612b      	str	r3, [r5, #16]
 8008308:	e76f      	b.n	80081ea <EE_Init+0x36>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800830a:	0020      	movs	r0, r4
 800830c:	f00a f9e0 	bl	80126d0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008310:	484f      	ldr	r0, [pc, #316]	; (8008450 <EE_Init+0x29c>)
 8008312:	f00a f8cd 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008316:	2800      	cmp	r0, #0
 8008318:	d1a4      	bne.n	8008264 <EE_Init+0xb0>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800831a:	4855      	ldr	r0, [pc, #340]	; (8008470 <EE_Init+0x2bc>)
 800831c:	f00a f9d8 	bl	80126d0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008320:	484b      	ldr	r0, [pc, #300]	; (8008450 <EE_Init+0x29c>)
 8008322:	f00a f8c5 	bl	80124b0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8008326:	2800      	cmp	r0, #0
 8008328:	d19c      	bne.n	8008264 <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800832a:	2102      	movs	r1, #2
 800832c:	4a4f      	ldr	r2, [pc, #316]	; (800846c <EE_Init+0x2b8>)
 800832e:	6913      	ldr	r3, [r2, #16]
 8008330:	438b      	bics	r3, r1
 8008332:	6113      	str	r3, [r2, #16]
 8008334:	e759      	b.n	80081ea <EE_Init+0x36>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8008336:	2200      	movs	r2, #0
 8008338:	2300      	movs	r3, #0
 800833a:	2001      	movs	r0, #1
 800833c:	4941      	ldr	r1, [pc, #260]	; (8008444 <EE_Init+0x290>)
 800833e:	f00a f8f7 	bl	8012530 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008342:	4843      	ldr	r0, [pc, #268]	; (8008450 <EE_Init+0x29c>)
 8008344:	f00a f8b4 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008348:	2800      	cmp	r0, #0
 800834a:	d18b      	bne.n	8008264 <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800834c:	2201      	movs	r2, #1
 800834e:	4c47      	ldr	r4, [pc, #284]	; (800846c <EE_Init+0x2b8>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8008350:	483b      	ldr	r0, [pc, #236]	; (8008440 <EE_Init+0x28c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	4393      	bics	r3, r2
 8008356:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8008358:	f00a f9ba 	bl	80126d0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800835c:	483c      	ldr	r0, [pc, #240]	; (8008450 <EE_Init+0x29c>)
 800835e:	f00a f8a7 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008362:	2800      	cmp	r0, #0
 8008364:	d000      	beq.n	8008368 <EE_Init+0x1b4>
 8008366:	e77d      	b.n	8008264 <EE_Init+0xb0>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8008368:	4841      	ldr	r0, [pc, #260]	; (8008470 <EE_Init+0x2bc>)
 800836a:	f00a f9b1 	bl	80126d0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800836e:	4838      	ldr	r0, [pc, #224]	; (8008450 <EE_Init+0x29c>)
 8008370:	f00a f89e 	bl	80124b0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8008374:	2800      	cmp	r0, #0
 8008376:	d000      	beq.n	800837a <EE_Init+0x1c6>
 8008378:	e774      	b.n	8008264 <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800837a:	2202      	movs	r2, #2
 800837c:	6923      	ldr	r3, [r4, #16]
 800837e:	4393      	bics	r3, r2
 8008380:	6123      	str	r3, [r4, #16]
 8008382:	e732      	b.n	80081ea <EE_Init+0x36>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8008384:	0020      	movs	r0, r4
 8008386:	f00a f9a3 	bl	80126d0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800838a:	4831      	ldr	r0, [pc, #196]	; (8008450 <EE_Init+0x29c>)
 800838c:	f00a f890 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008390:	2800      	cmp	r0, #0
 8008392:	d000      	beq.n	8008396 <EE_Init+0x1e2>
 8008394:	e766      	b.n	8008264 <EE_Init+0xb0>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8008396:	4836      	ldr	r0, [pc, #216]	; (8008470 <EE_Init+0x2bc>)
 8008398:	f00a f99a 	bl	80126d0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800839c:	482c      	ldr	r0, [pc, #176]	; (8008450 <EE_Init+0x29c>)
 800839e:	f00a f887 	bl	80124b0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d000      	beq.n	80083a8 <EE_Init+0x1f4>
 80083a6:	e75d      	b.n	8008264 <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80083a8:	2202      	movs	r2, #2
 80083aa:	4c30      	ldr	r4, [pc, #192]	; (800846c <EE_Init+0x2b8>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 80083ac:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80083ae:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 80083b0:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80083b2:	4393      	bics	r3, r2
 80083b4:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 80083b6:	2200      	movs	r2, #0
 80083b8:	2300      	movs	r3, #0
 80083ba:	f00a f8b9 	bl	8012530 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80083be:	4824      	ldr	r0, [pc, #144]	; (8008450 <EE_Init+0x29c>)
 80083c0:	f00a f876 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d000      	beq.n	80083ca <EE_Init+0x216>
 80083c8:	e74c      	b.n	8008264 <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80083ca:	2201      	movs	r2, #1
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	4393      	bics	r3, r2
 80083d0:	6123      	str	r3, [r4, #16]
 80083d2:	e70a      	b.n	80081ea <EE_Init+0x36>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 80083d4:	2200      	movs	r2, #0
 80083d6:	2300      	movs	r3, #0
 80083d8:	2001      	movs	r0, #1
 80083da:	4919      	ldr	r1, [pc, #100]	; (8008440 <EE_Init+0x28c>)
 80083dc:	f00a f8a8 	bl	8012530 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80083e0:	481b      	ldr	r0, [pc, #108]	; (8008450 <EE_Init+0x29c>)
 80083e2:	f00a f865 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d000      	beq.n	80083ec <EE_Init+0x238>
 80083ea:	e73b      	b.n	8008264 <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80083ec:	2201      	movs	r2, #1
 80083ee:	4c1f      	ldr	r4, [pc, #124]	; (800846c <EE_Init+0x2b8>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80083f0:	4814      	ldr	r0, [pc, #80]	; (8008444 <EE_Init+0x290>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	4393      	bics	r3, r2
 80083f6:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80083f8:	f00a f96a 	bl	80126d0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80083fc:	4814      	ldr	r0, [pc, #80]	; (8008450 <EE_Init+0x29c>)
 80083fe:	f00a f857 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008402:	2800      	cmp	r0, #0
 8008404:	d000      	beq.n	8008408 <EE_Init+0x254>
 8008406:	e72d      	b.n	8008264 <EE_Init+0xb0>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8008408:	4817      	ldr	r0, [pc, #92]	; (8008468 <EE_Init+0x2b4>)
 800840a:	f00a f961 	bl	80126d0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800840e:	4810      	ldr	r0, [pc, #64]	; (8008450 <EE_Init+0x29c>)
 8008410:	f00a f84e 	bl	80124b0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8008414:	2800      	cmp	r0, #0
 8008416:	d0b0      	beq.n	800837a <EE_Init+0x1c6>
 8008418:	e724      	b.n	8008264 <EE_Init+0xb0>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800841a:	0028      	movs	r0, r5
 800841c:	f00a f958 	bl	80126d0 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008420:	480b      	ldr	r0, [pc, #44]	; (8008450 <EE_Init+0x29c>)
 8008422:	f00a f845 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8008426:	2800      	cmp	r0, #0
 8008428:	d000      	beq.n	800842c <EE_Init+0x278>
 800842a:	e71b      	b.n	8008264 <EE_Init+0xb0>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800842c:	480e      	ldr	r0, [pc, #56]	; (8008468 <EE_Init+0x2b4>)
 800842e:	f00a f94f 	bl	80126d0 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8008432:	4807      	ldr	r0, [pc, #28]	; (8008450 <EE_Init+0x29c>)
 8008434:	f00a f83c 	bl	80124b0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8008438:	2800      	cmp	r0, #0
 800843a:	d100      	bne.n	800843e <EE_Init+0x28a>
 800843c:	e775      	b.n	800832a <EE_Init+0x176>
 800843e:	e711      	b.n	8008264 <EE_Init+0xb0>
 8008440:	0801e000 	.word	0x0801e000
 8008444:	0801f000 	.word	0x0801f000
 8008448:	0000eeee 	.word	0x0000eeee
 800844c:	0000ffff 	.word	0x0000ffff
 8008450:	0000c350 	.word	0x0000c350
 8008454:	20001570 	.word	0x20001570
 8008458:	0801f006 	.word	0x0801f006
 800845c:	00000401 	.word	0x00000401
 8008460:	20006fe0 	.word	0x20006fe0
 8008464:	0801e006 	.word	0x0801e006
 8008468:	0801f800 	.word	0x0801f800
 800846c:	40022000 	.word	0x40022000
 8008470:	0801e800 	.word	0x0801e800

08008474 <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	4c1d      	ldr	r4, [pc, #116]	; (80084ec <StartDefaultTask+0x78>)
 8008478:	4d1d      	ldr	r5, [pc, #116]	; (80084f0 <StartDefaultTask+0x7c>)
 800847a:	4e1e      	ldr	r6, [pc, #120]	; (80084f4 <StartDefaultTask+0x80>)
 800847c:	e00b      	b.n	8008496 <StartDefaultTask+0x22>
	
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
 800847e:	2b01      	cmp	r3, #1
 8008480:	d022      	beq.n	80084c8 <StartDefaultTask+0x54>
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8008482:	f000 fe5d 	bl	8009140 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8008486:	f7fd fbf5 	bl	8005c74 <ExecuteSnippet>

		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 800848a:	782b      	ldrb	r3, [r5, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d100      	bne.n	8008492 <StartDefaultTask+0x1e>
			delayButtonStateReset = false;
 8008490:	7033      	strb	r3, [r6, #0]
		
		taskYIELD();
 8008492:	f008 fcf3 	bl	8010e7c <vPortYield>
		switch(indMode){
 8008496:	7823      	ldrb	r3, [r4, #0]
 8008498:	2b02      	cmp	r3, #2
 800849a:	d01e      	beq.n	80084da <StartDefaultTask+0x66>
 800849c:	2b03      	cmp	r3, #3
 800849e:	d1ee      	bne.n	800847e <StartDefaultTask+0xa>
				RTOS_IND_blink(30);
 80084a0:	2180      	movs	r1, #128	; 0x80
 80084a2:	2090      	movs	r0, #144	; 0x90
 80084a4:	2201      	movs	r2, #1
 80084a6:	05c0      	lsls	r0, r0, #23
 80084a8:	0109      	lsls	r1, r1, #4
 80084aa:	f00a fad7 	bl	8012a5c <HAL_GPIO_WritePin>
 80084ae:	201e      	movs	r0, #30
 80084b0:	f006 fddc 	bl	800f06c <osDelay>
 80084b4:	2180      	movs	r1, #128	; 0x80
 80084b6:	2090      	movs	r0, #144	; 0x90
 80084b8:	2200      	movs	r2, #0
 80084ba:	0109      	lsls	r1, r1, #4
 80084bc:	05c0      	lsls	r0, r0, #23
 80084be:	f00a facd 	bl	8012a5c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80084c2:	2300      	movs	r3, #0
 80084c4:	7023      	strb	r3, [r4, #0]
				break;
 80084c6:	e7dc      	b.n	8008482 <StartDefaultTask+0xe>
				RTOS_IND_blink(200);
 80084c8:	2180      	movs	r1, #128	; 0x80
 80084ca:	2090      	movs	r0, #144	; 0x90
 80084cc:	2201      	movs	r2, #1
 80084ce:	05c0      	lsls	r0, r0, #23
 80084d0:	0109      	lsls	r1, r1, #4
 80084d2:	f00a fac3 	bl	8012a5c <HAL_GPIO_WritePin>
 80084d6:	20c8      	movs	r0, #200	; 0xc8
 80084d8:	e7ea      	b.n	80084b0 <StartDefaultTask+0x3c>
				RTOS_IND_blink(100);
 80084da:	2180      	movs	r1, #128	; 0x80
 80084dc:	2090      	movs	r0, #144	; 0x90
 80084de:	2201      	movs	r2, #1
 80084e0:	05c0      	lsls	r0, r0, #23
 80084e2:	0109      	lsls	r1, r1, #4
 80084e4:	f00a faba 	bl	8012a5c <HAL_GPIO_WritePin>
 80084e8:	2064      	movs	r0, #100	; 0x64
 80084ea:	e7e1      	b.n	80084b0 <StartDefaultTask+0x3c>
 80084ec:	20000f8c 	.word	0x20000f8c
 80084f0:	20001600 	.word	0x20001600
 80084f4:	200015ff 	.word	0x200015ff

080084f8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 80084f8:	b570      	push	{r4, r5, r6, lr}
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80084fa:	25a0      	movs	r5, #160	; 0xa0
 80084fc:	2400      	movs	r4, #0
 80084fe:	2603      	movs	r6, #3
 8008500:	4b5f      	ldr	r3, [pc, #380]	; (8008680 <MX_FREERTOS_Init+0x188>)
void MX_FREERTOS_Init(void){
 8008502:	b090      	sub	sp, #64	; 0x40
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8008504:	006d      	lsls	r5, r5, #1
 8008506:	002a      	movs	r2, r5
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	9600      	str	r6, [sp, #0]
 800850c:	2300      	movs	r3, #0
 800850e:	495d      	ldr	r1, [pc, #372]	; (8008684 <MX_FREERTOS_Init+0x18c>)
 8008510:	9403      	str	r4, [sp, #12]
 8008512:	9402      	str	r4, [sp, #8]
 8008514:	485c      	ldr	r0, [pc, #368]	; (8008688 <MX_FREERTOS_Init+0x190>)
 8008516:	f007 fcf3 	bl	800ff00 <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 800851a:	4b5c      	ldr	r3, [pc, #368]	; (800868c <MX_FREERTOS_Init+0x194>)
 800851c:	002a      	movs	r2, r5
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	9600      	str	r6, [sp, #0]
 8008522:	2300      	movs	r3, #0
 8008524:	495a      	ldr	r1, [pc, #360]	; (8008690 <MX_FREERTOS_Init+0x198>)
 8008526:	9403      	str	r4, [sp, #12]
 8008528:	9402      	str	r4, [sp, #8]
 800852a:	485a      	ldr	r0, [pc, #360]	; (8008694 <MX_FREERTOS_Init+0x19c>)
 800852c:	f007 fce8 	bl	800ff00 <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8008530:	4b59      	ldr	r3, [pc, #356]	; (8008698 <MX_FREERTOS_Init+0x1a0>)
 8008532:	002a      	movs	r2, r5
 8008534:	4959      	ldr	r1, [pc, #356]	; (800869c <MX_FREERTOS_Init+0x1a4>)
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	9600      	str	r6, [sp, #0]
 800853a:	2300      	movs	r3, #0
 800853c:	9403      	str	r4, [sp, #12]
 800853e:	9402      	str	r4, [sp, #8]
 8008540:	4857      	ldr	r0, [pc, #348]	; (80086a0 <MX_FREERTOS_Init+0x1a8>)
 8008542:	f007 fcdd 	bl	800ff00 <xTaskGenericCreate>
	vRegisterCLICommands();
 8008546:	f7ff fb17 	bl	8007b78 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 800854a:	4b56      	ldr	r3, [pc, #344]	; (80086a4 <MX_FREERTOS_Init+0x1ac>)
 800854c:	002a      	movs	r2, r5
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	9600      	str	r6, [sp, #0]
 8008552:	2300      	movs	r3, #0
 8008554:	4954      	ldr	r1, [pc, #336]	; (80086a8 <MX_FREERTOS_Init+0x1b0>)
 8008556:	9403      	str	r4, [sp, #12]
 8008558:	9402      	str	r4, [sp, #8]
 800855a:	4854      	ldr	r0, [pc, #336]	; (80086ac <MX_FREERTOS_Init+0x1b4>)
 800855c:	f007 fcd0 	bl	800ff00 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",configMINIMAL_STACK_SIZE,(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8008560:	4d53      	ldr	r5, [pc, #332]	; (80086b0 <MX_FREERTOS_Init+0x1b8>)
 8008562:	4b54      	ldr	r3, [pc, #336]	; (80086b4 <MX_FREERTOS_Init+0x1bc>)
 8008564:	3601      	adds	r6, #1
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	9600      	str	r6, [sp, #0]
 800856a:	2301      	movs	r3, #1
 800856c:	22a0      	movs	r2, #160	; 0xa0
 800856e:	0028      	movs	r0, r5
 8008570:	4951      	ldr	r1, [pc, #324]	; (80086b8 <MX_FREERTOS_Init+0x1c0>)
 8008572:	9403      	str	r4, [sp, #12]
 8008574:	9402      	str	r4, [sp, #8]
 8008576:	f007 fcc3 	bl	800ff00 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",configMINIMAL_STACK_SIZE,(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 800857a:	4b50      	ldr	r3, [pc, #320]	; (80086bc <MX_FREERTOS_Init+0x1c4>)
 800857c:	9600      	str	r6, [sp, #0]
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	22a0      	movs	r2, #160	; 0xa0
 8008582:	2302      	movs	r3, #2
 8008584:	0028      	movs	r0, r5
 8008586:	494e      	ldr	r1, [pc, #312]	; (80086c0 <MX_FREERTOS_Init+0x1c8>)
 8008588:	9403      	str	r4, [sp, #12]
 800858a:	9402      	str	r4, [sp, #8]
 800858c:	f007 fcb8 	bl	800ff00 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",configMINIMAL_STACK_SIZE,(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8008590:	4b4c      	ldr	r3, [pc, #304]	; (80086c4 <MX_FREERTOS_Init+0x1cc>)
 8008592:	9600      	str	r6, [sp, #0]
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	22a0      	movs	r2, #160	; 0xa0
 8008598:	2303      	movs	r3, #3
 800859a:	0028      	movs	r0, r5
 800859c:	494a      	ldr	r1, [pc, #296]	; (80086c8 <MX_FREERTOS_Init+0x1d0>)
 800859e:	9403      	str	r4, [sp, #12]
 80085a0:	9402      	str	r4, [sp, #8]
 80085a2:	f007 fcad 	bl	800ff00 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",configMINIMAL_STACK_SIZE,(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80085a6:	4b49      	ldr	r3, [pc, #292]	; (80086cc <MX_FREERTOS_Init+0x1d4>)
 80085a8:	9600      	str	r6, [sp, #0]
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	22a0      	movs	r2, #160	; 0xa0
 80085ae:	2304      	movs	r3, #4
 80085b0:	0028      	movs	r0, r5
 80085b2:	4947      	ldr	r1, [pc, #284]	; (80086d0 <MX_FREERTOS_Init+0x1d8>)
 80085b4:	9403      	str	r4, [sp, #12]
 80085b6:	9402      	str	r4, [sp, #8]
 80085b8:	f007 fca2 	bl	800ff00 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",configMINIMAL_STACK_SIZE,(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80085bc:	4b45      	ldr	r3, [pc, #276]	; (80086d4 <MX_FREERTOS_Init+0x1dc>)
 80085be:	9600      	str	r6, [sp, #0]
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	22a0      	movs	r2, #160	; 0xa0
 80085c4:	2305      	movs	r3, #5
 80085c6:	0028      	movs	r0, r5
 80085c8:	4943      	ldr	r1, [pc, #268]	; (80086d8 <MX_FREERTOS_Init+0x1e0>)
 80085ca:	9403      	str	r4, [sp, #12]
 80085cc:	9402      	str	r4, [sp, #8]
 80085ce:	f007 fc97 	bl	800ff00 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",configMINIMAL_STACK_SIZE,(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 80085d2:	4b42      	ldr	r3, [pc, #264]	; (80086dc <MX_FREERTOS_Init+0x1e4>)
 80085d4:	22a0      	movs	r2, #160	; 0xa0
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	9600      	str	r6, [sp, #0]
 80085da:	2306      	movs	r3, #6
 80085dc:	0028      	movs	r0, r5
 80085de:	4940      	ldr	r1, [pc, #256]	; (80086e0 <MX_FREERTOS_Init+0x1e8>)
 80085e0:	9403      	str	r4, [sp, #12]
 80085e2:	9402      	str	r4, [sp, #8]
 80085e4:	f007 fc8c 	bl	800ff00 <xTaskGenericCreate>
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80085e8:	2101      	movs	r1, #1
 80085ea:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 80085ec:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80085ee:	f006 fd69 	bl	800f0c4 <osSemaphoreCreate>
 80085f2:	4e3c      	ldr	r6, [pc, #240]	; (80086e4 <MX_FREERTOS_Init+0x1ec>)
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80085f4:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80085f6:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80085f8:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 80085fa:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80085fc:	f006 fd62 	bl	800f0c4 <osSemaphoreCreate>
 8008600:	4d39      	ldr	r5, [pc, #228]	; (80086e8 <MX_FREERTOS_Init+0x1f0>)
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8008602:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8008604:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8008606:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 8008608:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 800860a:	f006 fd5b 	bl	800f0c4 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 800860e:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8008610:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8008612:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8008614:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8008616:	f006 fd55 	bl	800f0c4 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800861a:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 800861c:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800861e:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 8008620:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8008622:	f006 fd4f 	bl	800f0c4 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8008626:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8008628:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800862a:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 800862c:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 800862e:	f006 fd49 	bl	800f0c4 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8008632:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8008634:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8008636:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8008638:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 800863a:	f006 fd43 	bl	800f0c4 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800863e:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8008640:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8008642:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8008644:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8008646:	f006 fd3d 	bl	800f0c4 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800864a:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800864c:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800864e:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8008650:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8008652:	f006 fd37 	bl	800f0c4 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8008656:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8008658:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800865a:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 800865c:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800865e:	f006 fd31 	bl	800f0c4 <osSemaphoreCreate>
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8008662:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8008664:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8008666:	a80e      	add	r0, sp, #56	; 0x38
	osSemaphoreDef(SemaphoreP11);
 8008668:	940e      	str	r4, [sp, #56]	; 0x38
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 800866a:	f006 fd2b 	bl	800f0c4 <osSemaphoreCreate>
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 800866e:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8008670:	61b0      	str	r0, [r6, #24]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8008672:	a80f      	add	r0, sp, #60	; 0x3c
	osSemaphoreDef(SemaphoreP12);
 8008674:	940f      	str	r4, [sp, #60]	; 0x3c
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8008676:	f006 fd25 	bl	800f0c4 <osSemaphoreCreate>
 800867a:	61a8      	str	r0, [r5, #24]
}
 800867c:	b010      	add	sp, #64	; 0x40
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	20001594 	.word	0x20001594
 8008684:	0801dbcc 	.word	0x0801dbcc
 8008688:	08008475 	.word	0x08008475
 800868c:	20001574 	.word	0x20001574
 8008690:	0801dbd8 	.word	0x0801dbd8
 8008694:	08009e6d 	.word	0x08009e6d
 8008698:	20001590 	.word	0x20001590
 800869c:	0801dbe4 	.word	0x0801dbe4
 80086a0:	08014abd 	.word	0x08014abd
 80086a4:	2000159c 	.word	0x2000159c
 80086a8:	0801dbf0 	.word	0x0801dbf0
 80086ac:	08005985 	.word	0x08005985
 80086b0:	0800a245 	.word	0x0800a245
 80086b4:	20001578 	.word	0x20001578
 80086b8:	0801dbf8 	.word	0x0801dbf8
 80086bc:	2000157c 	.word	0x2000157c
 80086c0:	0801dc04 	.word	0x0801dc04
 80086c4:	20001580 	.word	0x20001580
 80086c8:	0801dc10 	.word	0x0801dc10
 80086cc:	20001584 	.word	0x20001584
 80086d0:	0801dc1c 	.word	0x0801dc1c
 80086d4:	20001588 	.word	0x20001588
 80086d8:	0801dc28 	.word	0x0801dc28
 80086dc:	2000158c 	.word	0x2000158c
 80086e0:	0801dc34 	.word	0x0801dc34
 80086e4:	20006b4c 	.word	0x20006b4c
 80086e8:	20006b30 	.word	0x20006b30

080086ec <vMainConfigureTimerForRunTimeStats>:

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80086ec:	4b04      	ldr	r3, [pc, #16]	; (8008700 <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 80086ee:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80086f0:	6818      	ldr	r0, [r3, #0]
 80086f2:	4904      	ldr	r1, [pc, #16]	; (8008704 <vMainConfigureTimerForRunTimeStats+0x18>)
 80086f4:	f7f7 fd2c 	bl	8000150 <__udivsi3>
 80086f8:	4b03      	ldr	r3, [pc, #12]	; (8008708 <vMainConfigureTimerForRunTimeStats+0x1c>)
 80086fa:	6018      	str	r0, [r3, #0]
}
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	20000120 	.word	0x20000120
 8008704:	00002710 	.word	0x00002710
 8008708:	20001598 	.word	0x20001598

0800870c <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800870c:	21fa      	movs	r1, #250	; 0xfa
 800870e:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <ulMainGetRunTimeCounterValue+0x3c>)
uint32_t ulMainGetRunTimeCounterValue(void){
 8008710:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	0089      	lsls	r1, r1, #2
 8008716:	f7f7 fd1b 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800871a:	4c0c      	ldr	r4, [pc, #48]	; (800874c <ulMainGetRunTimeCounterValue+0x40>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 800871c:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800871e:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8008720:	f007 fca0 	bl	8010064 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8008724:	4a0a      	ldr	r2, [pc, #40]	; (8008750 <ulMainGetRunTimeCounterValue+0x44>)
	ulTickCount =xTaskGetTickCountFromISR();
 8008726:	0003      	movs	r3, r0
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8008728:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800872a:	1ba8      	subs	r0, r5, r6
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 800872c:	0152      	lsls	r2, r2, #5
 800872e:	d502      	bpl.n	8008736 <ulMainGetRunTimeCounterValue+0x2a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008730:	6820      	ldr	r0, [r4, #0]
		ulTickCount++;
 8008732:	3301      	adds	r3, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008734:	1a28      	subs	r0, r5, r0
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8008736:	009c      	lsls	r4, r3, #2
 8008738:	18e4      	adds	r4, r4, r3
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 800873a:	4b06      	ldr	r3, [pc, #24]	; (8008754 <ulMainGetRunTimeCounterValue+0x48>)
	ulReturn =(ulTickCount * 10UL);
 800873c:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 800873e:	6819      	ldr	r1, [r3, #0]
 8008740:	f7f7 fd06 	bl	8000150 <__udivsi3>
 8008744:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	20000120 	.word	0x20000120
 800874c:	e000e018 	.word	0xe000e018
 8008750:	e000ed04 	.word	0xe000ed04
 8008754:	20001598 	.word	0x20001598

08008758 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 8008758:	4770      	bx	lr
 800875a:	46c0      	nop			; (mov r8, r8)

0800875c <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 800875c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 800875e:	4d37      	ldr	r5, [pc, #220]	; (800883c <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 8008760:	0006      	movs	r6, r0
	if(BOS_initialized){
 8008762:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 8008764:	000c      	movs	r4, r1
 8008766:	b08d      	sub	sp, #52	; 0x34
	if(BOS_initialized){
 8008768:	2b00      	cmp	r3, #0
 800876a:	d152      	bne.n	8008812 <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 800876c:	2204      	movs	r2, #4
 800876e:	4b34      	ldr	r3, [pc, #208]	; (8008840 <AddPortButton+0xe4>)
 8008770:	545a      	strb	r2, [r3, r1]
	if(BOS_initialized){
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008772:	250e      	movs	r5, #14
 8008774:	af04      	add	r7, sp, #16
 8008776:	446d      	add	r5, sp
 8008778:	002a      	movs	r2, r5
 800877a:	ab06      	add	r3, sp, #24
 800877c:	a905      	add	r1, sp, #20
 800877e:	0020      	movs	r0, r4
 8008780:	9700      	str	r7, [sp, #0]
 8008782:	f005 f977 	bl	800da74 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 8008786:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008788:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin =TX_Pin;
 800878a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800878c:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 800878e:	9805      	ldr	r0, [sp, #20]
 8008790:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008792:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008794:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008796:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 8008798:	f009 ffac 	bl	80126f4 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 800879c:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 800879e:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Pin =RX_Pin;
 80087a0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80087a2:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 80087a4:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087a6:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80087a8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 80087aa:	f009 ffa3 	bl	80126f4 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 80087ae:	4b25      	ldr	r3, [pc, #148]	; (8008844 <AddPortButton+0xe8>)
 80087b0:	00e2      	lsls	r2, r4, #3
 80087b2:	1912      	adds	r2, r2, r4
 80087b4:	189b      	adds	r3, r3, r2
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80087b6:	0025      	movs	r5, r4
	button[port].type =buttonType;
 80087b8:	705e      	strb	r6, [r3, #1]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80087ba:	2312      	movs	r3, #18
 80087bc:	353a      	adds	r5, #58	; 0x3a
 80087be:	00ad      	lsls	r5, r5, #2
 80087c0:	446b      	add	r3, sp
 80087c2:	0019      	movs	r1, r3
 80087c4:	0028      	movs	r0, r5
 80087c6:	f7ff fbe3 	bl	8007f90 <EE_ReadVariable>
	if(!res)											// This variable exists
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d109      	bne.n	80087e2 <AddPortButton+0x86>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 80087ce:	466b      	mov	r3, sp
 80087d0:	8a5b      	ldrh	r3, [r3, #18]
 80087d2:	0a1a      	lsrs	r2, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 80087d4:	0b1b      	lsrs	r3, r3, #12
 80087d6:	42a3      	cmp	r3, r4
 80087d8:	d103      	bne.n	80087e2 <AddPortButton+0x86>
 80087da:	230f      	movs	r3, #15
 80087dc:	4013      	ands	r3, r2
 80087de:	42b3      	cmp	r3, r6
 80087e0:	d014      	beq.n	800880c <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
		}
	}
	else							// Variable does not exist. Create a new one
	{
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 80087e2:	466b      	mov	r3, sp
 80087e4:	0324      	lsls	r4, r4, #12
 80087e6:	0231      	lsls	r1, r6, #8
 80087e8:	4321      	orrs	r1, r4
 80087ea:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80087ec:	0028      	movs	r0, r5
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 80087ee:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80087f0:	f7ff fbfa 	bl	8007fe8 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80087f4:	2100      	movs	r1, #0
 80087f6:	1c68      	adds	r0, r5, #1
 80087f8:	f7ff fbf6 	bl	8007fe8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80087fc:	2100      	movs	r1, #0
 80087fe:	1ca8      	adds	r0, r5, #2
 8008800:	f7ff fbf2 	bl	8007fe8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008804:	2100      	movs	r1, #0
 8008806:	1ce8      	adds	r0, r5, #3
 8008808:	f7ff fbee 	bl	8007fe8 <EE_WriteVariable>
	}
	
	return result;
}
 800880c:	2000      	movs	r0, #0
 800880e:	b00d      	add	sp, #52	; 0x34
 8008810:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 8008812:	4b0d      	ldr	r3, [pc, #52]	; (8008848 <AddPortButton+0xec>)
 8008814:	008f      	lsls	r7, r1, #2
 8008816:	58f8      	ldr	r0, [r7, r3]
 8008818:	f006 fc92 	bl	800f140 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800881c:	4b0b      	ldr	r3, [pc, #44]	; (800884c <AddPortButton+0xf0>)
 800881e:	58f8      	ldr	r0, [r7, r3]
 8008820:	f006 fc8e 	bl	800f140 <osSemaphoreRelease>
	portStatus[port] =PORTBUTTON;
 8008824:	2104      	movs	r1, #4
 8008826:	4a06      	ldr	r2, [pc, #24]	; (8008840 <AddPortButton+0xe4>)
 8008828:	782b      	ldrb	r3, [r5, #0]
 800882a:	5511      	strb	r1, [r2, r4]
	if(BOS_initialized){
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0a0      	beq.n	8008772 <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 8008830:	0020      	movs	r0, r4
 8008832:	f005 ff95 	bl	800e760 <GetUart>
 8008836:	f00b fc13 	bl	8014060 <HAL_UART_DeInit>
 800883a:	e79a      	b.n	8008772 <AddPortButton+0x16>
 800883c:	20000b0d 	.word	0x20000b0d
 8008840:	20001190 	.word	0x20001190
 8008844:	200015b4 	.word	0x200015b4
 8008848:	20006b4c 	.word	0x20006b4c
 800884c:	20006b30 	.word	0x20006b30

08008850 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 8008854:	2300      	movs	r3, #0
 8008856:	483b      	ldr	r0, [pc, #236]	; (8008944 <RemovePortButton+0xf4>)
 8008858:	00e9      	lsls	r1, r5, #3
 800885a:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec =0;
	button[port].releasedY2Sec =0;
	button[port].releasedY3Sec =0;
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800885c:	002c      	movs	r4, r5
	button[port].type =NONE;
 800885e:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port){
 8008860:	b082      	sub	sp, #8
	button[port].state =NONE;
 8008862:	540b      	strb	r3, [r1, r0]
	button[port].type =NONE;
 8008864:	7053      	strb	r3, [r2, #1]
	button[port].events =0;
 8008866:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 8008868:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 800886a:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 800886c:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 800886e:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 8008870:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 8008872:	71d3      	strb	r3, [r2, #7]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008874:	466b      	mov	r3, sp
 8008876:	343a      	adds	r4, #58	; 0x3a
 8008878:	00a4      	lsls	r4, r4, #2
 800887a:	0020      	movs	r0, r4
 800887c:	1d99      	adds	r1, r3, #6
 800887e:	f7ff fb87 	bl	8007f90 <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 8008882:	2800      	cmp	r0, #0
 8008884:	d02b      	beq.n	80088de <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 8008886:	0028      	movs	r0, r5
 8008888:	f005 ff6a 	bl	800e760 <GetUart>
	
	if(huart->Instance == USART1){
 800888c:	4a2e      	ldr	r2, [pc, #184]	; (8008948 <RemovePortButton+0xf8>)
 800888e:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart =GetUart(port);
 8008890:	0006      	movs	r6, r0
	if(huart->Instance == USART1){
 8008892:	4293      	cmp	r3, r2
 8008894:	d03b      	beq.n	800890e <RemovePortButton+0xbe>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 8008896:	4a2d      	ldr	r2, [pc, #180]	; (800894c <RemovePortButton+0xfc>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d040      	beq.n	800891e <RemovePortButton+0xce>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 800889c:	4a2c      	ldr	r2, [pc, #176]	; (8008950 <RemovePortButton+0x100>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d041      	beq.n	8008926 <RemovePortButton+0xd6>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 80088a2:	4a2c      	ldr	r2, [pc, #176]	; (8008954 <RemovePortButton+0x104>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d036      	beq.n	8008916 <RemovePortButton+0xc6>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 80088a8:	4a2b      	ldr	r2, [pc, #172]	; (8008958 <RemovePortButton+0x108>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d041      	beq.n	8008932 <RemovePortButton+0xe2>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 80088ae:	4a2b      	ldr	r2, [pc, #172]	; (800895c <RemovePortButton+0x10c>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d042      	beq.n	800893a <RemovePortButton+0xea>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 80088b4:	4a2a      	ldr	r2, [pc, #168]	; (8008960 <RemovePortButton+0x110>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d039      	beq.n	800892e <RemovePortButton+0xde>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 80088ba:	4a2a      	ldr	r2, [pc, #168]	; (8008964 <RemovePortButton+0x114>)
 80088bc:	4694      	mov	ip, r2
 80088be:	4463      	add	r3, ip
 80088c0:	1e5c      	subs	r4, r3, #1
 80088c2:	41a3      	sbcs	r3, r4
 80088c4:	425c      	negs	r4, r3
 80088c6:	b2e4      	uxtb	r4, r4
	}
	else
		result =BOS_ERROR;
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 80088c8:	2200      	movs	r2, #0
 80088ca:	4b27      	ldr	r3, [pc, #156]	; (8008968 <RemovePortButton+0x118>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 80088cc:	0030      	movs	r0, r6
	portStatus[port] =FREE;
 80088ce:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 80088d0:	4926      	ldr	r1, [pc, #152]	; (800896c <RemovePortButton+0x11c>)
 80088d2:	3201      	adds	r2, #1
 80088d4:	f00b fc12 	bl	80140fc <HAL_UART_Receive_IT>
	
	return result;
}
 80088d8:	0020      	movs	r0, r4
 80088da:	b002      	add	sp, #8
 80088dc:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 80088de:	2100      	movs	r1, #0
 80088e0:	0020      	movs	r0, r4
 80088e2:	f7ff fb81 	bl	8007fe8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80088e6:	2100      	movs	r1, #0
 80088e8:	1c60      	adds	r0, r4, #1
 80088ea:	f7ff fb7d 	bl	8007fe8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80088ee:	2100      	movs	r1, #0
 80088f0:	1ca0      	adds	r0, r4, #2
 80088f2:	f7ff fb79 	bl	8007fe8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80088f6:	2100      	movs	r1, #0
 80088f8:	1ce0      	adds	r0, r4, #3
 80088fa:	f7ff fb75 	bl	8007fe8 <EE_WriteVariable>
	UART_HandleTypeDef *huart =GetUart(port);
 80088fe:	0028      	movs	r0, r5
 8008900:	f005 ff2e 	bl	800e760 <GetUart>
	if(huart->Instance == USART1){
 8008904:	4a10      	ldr	r2, [pc, #64]	; (8008948 <RemovePortButton+0xf8>)
 8008906:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart =GetUart(port);
 8008908:	0006      	movs	r6, r0
	if(huart->Instance == USART1){
 800890a:	4293      	cmp	r3, r2
 800890c:	d1c3      	bne.n	8008896 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 800890e:	f005 fcfb 	bl	800e308 <MX_USART1_UART_Init>
	BOS_Status result =BOS_OK;
 8008912:	2400      	movs	r4, #0
 8008914:	e7d8      	b.n	80088c8 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008916:	f005 fd3f 	bl	800e398 <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 800891a:	2400      	movs	r4, #0
 800891c:	e7d4      	b.n	80088c8 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800891e:	f005 fd0b 	bl	800e338 <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 8008922:	2400      	movs	r4, #0
 8008924:	e7d0      	b.n	80088c8 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008926:	f005 fd1f 	bl	800e368 <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 800892a:	2400      	movs	r4, #0
 800892c:	e7cc      	b.n	80088c8 <RemovePortButton+0x78>
 800892e:	2400      	movs	r4, #0
 8008930:	e7ca      	b.n	80088c8 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008932:	f005 fd49 	bl	800e3c8 <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 8008936:	2400      	movs	r4, #0
 8008938:	e7c6      	b.n	80088c8 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800893a:	f005 fd5d 	bl	800e3f8 <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 800893e:	2400      	movs	r4, #0
 8008940:	e7c2      	b.n	80088c8 <RemovePortButton+0x78>
 8008942:	46c0      	nop			; (mov r8, r8)
 8008944:	200015b4 	.word	0x200015b4
 8008948:	40013800 	.word	0x40013800
 800894c:	40004400 	.word	0x40004400
 8008950:	40004800 	.word	0x40004800
 8008954:	40004c00 	.word	0x40004c00
 8008958:	40005000 	.word	0x40005000
 800895c:	40011400 	.word	0x40011400
 8008960:	40011800 	.word	0x40011800
 8008964:	bffee400 	.word	0xbffee400
 8008968:	20001190 	.word	0x20001190
 800896c:	20000ef0 	.word	0x20000ef0

08008970 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 8008970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008972:	4657      	mov	r7, sl
 8008974:	4645      	mov	r5, r8
 8008976:	46de      	mov	lr, fp
 8008978:	464e      	mov	r6, r9
 800897a:	b5e0      	push	{r5, r6, r7, lr}
 800897c:	b087      	sub	sp, #28
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	ab10      	add	r3, sp, #64	; 0x40
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	0004      	movs	r4, r0
 8008986:	9302      	str	r3, [sp, #8]
 8008988:	ab11      	add	r3, sp, #68	; 0x44
 800898a:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 800898c:	00e7      	lsls	r7, r4, #3
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 800898e:	9303      	str	r3, [sp, #12]
 8008990:	ab12      	add	r3, sp, #72	; 0x48
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	4699      	mov	r9, r3
 8008996:	ab13      	add	r3, sp, #76	; 0x4c
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	469a      	mov	sl, r3
 800899c:	ab14      	add	r3, sp, #80	; 0x50
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	469b      	mov	fp, r3
 80089a2:	ab15      	add	r3, sp, #84	; 0x54
 80089a4:	7818      	ldrb	r0, [r3, #0]
	if(button[port].type == NONE)
 80089a6:	4b64      	ldr	r3, [pc, #400]	; (8008b38 <SetButtonEvents+0x1c8>)
 80089a8:	4698      	mov	r8, r3
 80089aa:	193b      	adds	r3, r7, r4
 80089ac:	4443      	add	r3, r8
 80089ae:	785d      	ldrb	r5, [r3, #1]
 80089b0:	2d00      	cmp	r5, #0
 80089b2:	d100      	bne.n	80089b6 <SetButtonEvents+0x46>
 80089b4:	e092      	b.n	8008adc <SetButtonEvents+0x16c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 80089b6:	9d01      	ldr	r5, [sp, #4]
 80089b8:	709d      	strb	r5, [r3, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 80089ba:	9d02      	ldr	r5, [sp, #8]
 80089bc:	70dd      	strb	r5, [r3, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 80089be:	9d03      	ldr	r5, [sp, #12]
 80089c0:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec =released_y1sec;
 80089c2:	464d      	mov	r5, r9
 80089c4:	715d      	strb	r5, [r3, #5]
	button[port].releasedY2Sec =released_y2sec;
 80089c6:	4655      	mov	r5, sl
 80089c8:	719d      	strb	r5, [r3, #6]
	button[port].releasedY3Sec =released_y3sec;
 80089ca:	465d      	mov	r5, fp
 80089cc:	71dd      	strb	r5, [r3, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 80089ce:	2801      	cmp	r0, #1
 80089d0:	d100      	bne.n	80089d4 <SetButtonEvents+0x64>
 80089d2:	e085      	b.n	8008ae0 <SetButtonEvents+0x170>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d056      	beq.n	8008a86 <SetButtonEvents+0x116>
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}
	
	/* Add to EEPROM */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80089d8:	0025      	movs	r5, r4
 80089da:	ab04      	add	r3, sp, #16
 80089dc:	353a      	adds	r5, #58	; 0x3a
 80089de:	00ad      	lsls	r5, r5, #2
 80089e0:	1d9e      	adds	r6, r3, #6
 80089e2:	0031      	movs	r1, r6
 80089e4:	0028      	movs	r0, r5
 80089e6:	f7ff fad3 	bl	8007f90 <EE_ReadVariable>
	if(!res)											// This variable exists
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d000      	beq.n	80089f0 <SetButtonEvents+0x80>
 80089ee:	e075      	b.n	8008adc <SetButtonEvents+0x16c>
	{
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 80089f0:	193f      	adds	r7, r7, r4
 80089f2:	4447      	add	r7, r8
 80089f4:	7a3a      	ldrb	r2, [r7, #8]
 80089f6:	7831      	ldrb	r1, [r6, #0]
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 80089f8:	8833      	ldrh	r3, [r6, #0]
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 80089fa:	4291      	cmp	r1, r2
 80089fc:	d13b      	bne.n	8008a76 <SetButtonEvents+0x106>
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 80089fe:	1c6c      	adds	r4, r5, #1
 8008a00:	0031      	movs	r1, r6
 8008a02:	0020      	movs	r0, r4
 8008a04:	f7ff fac4 	bl	8007f90 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 8008a08:	464a      	mov	r2, r9
 8008a0a:	9b01      	ldr	r3, [sp, #4]
 8008a0c:	0219      	lsls	r1, r3, #8
 8008a0e:	8833      	ldrh	r3, [r6, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d12a      	bne.n	8008a6c <SetButtonEvents+0xfc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 8008a16:	1cac      	adds	r4, r5, #2
 8008a18:	0031      	movs	r1, r6
 8008a1a:	0020      	movs	r0, r4
 8008a1c:	f7ff fab8 	bl	8007f90 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 8008a20:	4652      	mov	r2, sl
 8008a22:	9b02      	ldr	r3, [sp, #8]
 8008a24:	0219      	lsls	r1, r3, #8
 8008a26:	8833      	ldrh	r3, [r6, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d119      	bne.n	8008a62 <SetButtonEvents+0xf2>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 8008a2e:	3503      	adds	r5, #3
 8008a30:	0031      	movs	r1, r6
 8008a32:	0028      	movs	r0, r5
 8008a34:	f7ff faac 	bl	8007f90 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008a38:	465a      	mov	r2, fp
 8008a3a:	9b03      	ldr	r3, [sp, #12]
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
 8008a3c:	2400      	movs	r4, #0
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008a3e:	0219      	lsls	r1, r3, #8
 8008a40:	8833      	ldrh	r3, [r6, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d107      	bne.n	8008a58 <SetButtonEvents+0xe8>
}
 8008a48:	0020      	movs	r0, r4
 8008a4a:	b007      	add	sp, #28
 8008a4c:	bcf0      	pop	{r4, r5, r6, r7}
 8008a4e:	46bb      	mov	fp, r7
 8008a50:	46b2      	mov	sl, r6
 8008a52:	46a9      	mov	r9, r5
 8008a54:	46a0      	mov	r8, r4
 8008a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 8008a58:	0028      	movs	r0, r5
 8008a5a:	b291      	uxth	r1, r2
 8008a5c:	f7ff fac4 	bl	8007fe8 <EE_WriteVariable>
 8008a60:	e7f2      	b.n	8008a48 <SetButtonEvents+0xd8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 8008a62:	0020      	movs	r0, r4
 8008a64:	b291      	uxth	r1, r2
 8008a66:	f7ff fabf 	bl	8007fe8 <EE_WriteVariable>
 8008a6a:	e7e0      	b.n	8008a2e <SetButtonEvents+0xbe>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 8008a6c:	0020      	movs	r0, r4
 8008a6e:	b291      	uxth	r1, r2
 8008a70:	f7ff faba 	bl	8007fe8 <EE_WriteVariable>
 8008a74:	e7cf      	b.n	8008a16 <SetButtonEvents+0xa6>
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 8008a76:	0a19      	lsrs	r1, r3, #8
 8008a78:	0209      	lsls	r1, r1, #8
 8008a7a:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008a7c:	0028      	movs	r0, r5
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 8008a7e:	8031      	strh	r1, [r6, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008a80:	f7ff fab2 	bl	8007fe8 <EE_WriteVariable>
 8008a84:	e7bb      	b.n	80089fe <SetButtonEvents+0x8e>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 8008a86:	2900      	cmp	r1, #0
 8008a88:	d134      	bne.n	8008af4 <SetButtonEvents+0x184>
		button[port].events &=~BUTTON_EVENT_CLICKED;
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	7a1b      	ldrb	r3, [r3, #8]
 8008a8e:	438b      	bics	r3, r1
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	d034      	beq.n	8008afe <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008a94:	2202      	movs	r2, #2
 8008a96:	4313      	orrs	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	d034      	beq.n	8008b08 <SetButtonEvents+0x198>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008a9e:	2204      	movs	r2, #4
 8008aa0:	4313      	orrs	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008aa2:	9a02      	ldr	r2, [sp, #8]
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	d034      	beq.n	8008b12 <SetButtonEvents+0x1a2>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008aa8:	2208      	movs	r2, #8
 8008aaa:	4313      	orrs	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 8008aac:	9a03      	ldr	r2, [sp, #12]
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	d034      	beq.n	8008b1c <SetButtonEvents+0x1ac>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008ab2:	2210      	movs	r2, #16
 8008ab4:	4313      	orrs	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 8008ab6:	464a      	mov	r2, r9
 8008ab8:	2a00      	cmp	r2, #0
 8008aba:	d034      	beq.n	8008b26 <SetButtonEvents+0x1b6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008abc:	2220      	movs	r2, #32
 8008abe:	4313      	orrs	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008ac0:	4652      	mov	r2, sl
 8008ac2:	2a00      	cmp	r2, #0
 8008ac4:	d034      	beq.n	8008b30 <SetButtonEvents+0x1c0>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008ac6:	2240      	movs	r2, #64	; 0x40
 8008ac8:	4313      	orrs	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008aca:	465a      	mov	r2, fp
 8008acc:	2a00      	cmp	r2, #0
 8008ace:	d10a      	bne.n	8008ae6 <SetButtonEvents+0x176>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008ad0:	217f      	movs	r1, #127	; 0x7f
 8008ad2:	193a      	adds	r2, r7, r4
 8008ad4:	4442      	add	r2, r8
 8008ad6:	400b      	ands	r3, r1
 8008ad8:	7213      	strb	r3, [r2, #8]
 8008ada:	e77d      	b.n	80089d8 <SetButtonEvents+0x68>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008adc:	240b      	movs	r4, #11
 8008ade:	e7b3      	b.n	8008a48 <SetButtonEvents+0xd8>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008ae0:	7a1a      	ldrb	r2, [r3, #8]
 8008ae2:	237f      	movs	r3, #127	; 0x7f
 8008ae4:	4313      	orrs	r3, r2
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008ae6:	2180      	movs	r1, #128	; 0x80
 8008ae8:	193a      	adds	r2, r7, r4
 8008aea:	4249      	negs	r1, r1
 8008aec:	4442      	add	r2, r8
 8008aee:	430b      	orrs	r3, r1
 8008af0:	7213      	strb	r3, [r2, #8]
 8008af2:	e771      	b.n	80089d8 <SetButtonEvents+0x68>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008af4:	2101      	movs	r1, #1
 8008af6:	7a1b      	ldrb	r3, [r3, #8]
 8008af8:	430b      	orrs	r3, r1
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	d1ca      	bne.n	8008a94 <SetButtonEvents+0x124>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 8008afe:	2202      	movs	r2, #2
 8008b00:	4393      	bics	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 8008b02:	9a01      	ldr	r2, [sp, #4]
 8008b04:	2a00      	cmp	r2, #0
 8008b06:	d1ca      	bne.n	8008a9e <SetButtonEvents+0x12e>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008b08:	2204      	movs	r2, #4
 8008b0a:	4393      	bics	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008b0c:	9a02      	ldr	r2, [sp, #8]
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d1ca      	bne.n	8008aa8 <SetButtonEvents+0x138>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008b12:	2208      	movs	r2, #8
 8008b14:	4393      	bics	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 8008b16:	9a03      	ldr	r2, [sp, #12]
 8008b18:	2a00      	cmp	r2, #0
 8008b1a:	d1ca      	bne.n	8008ab2 <SetButtonEvents+0x142>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008b1c:	2210      	movs	r2, #16
 8008b1e:	4393      	bics	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 8008b20:	464a      	mov	r2, r9
 8008b22:	2a00      	cmp	r2, #0
 8008b24:	d1ca      	bne.n	8008abc <SetButtonEvents+0x14c>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008b26:	2220      	movs	r2, #32
 8008b28:	4393      	bics	r3, r2
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008b2a:	4652      	mov	r2, sl
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	d1ca      	bne.n	8008ac6 <SetButtonEvents+0x156>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008b30:	2240      	movs	r2, #64	; 0x40
 8008b32:	4393      	bics	r3, r2
 8008b34:	e7c9      	b.n	8008aca <SetButtonEvents+0x15a>
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	200015b4 	.word	0x200015b4

08008b3c <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void){
	hadc.Instance = ADC1;
 8008b3c:	4811      	ldr	r0, [pc, #68]	; (8008b84 <MX_ADC_Init+0x48>)
 8008b3e:	4b12      	ldr	r3, [pc, #72]	; (8008b88 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void){
 8008b40:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008b42:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 8008b44:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008b46:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008b48:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008b4a:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait =DISABLE;
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
	hadc.Init.ContinuousConvMode =ENABLE;
	hadc.Init.DiscontinuousConvMode =DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b4c:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008b4e:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008b50:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008b52:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b54:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008b56:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008b58:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008b5a:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait =DISABLE;
 8008b5c:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 8008b5e:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 8008b60:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 8008b62:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b64:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b66:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 8008b68:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008b6a:	6342      	str	r2, [r0, #52]	; 0x34
	
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 8008b6c:	f008 fbca 	bl	8011304 <HAL_ADC_Init>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d103      	bne.n	8008b7c <MX_ADC_Init+0x40>
		Error_Handler();
	}
	ADC_flag =1;
 8008b74:	2201      	movs	r2, #1
 8008b76:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <MX_ADC_Init+0x50>)
 8008b78:	701a      	strb	r2, [r3, #0]
}
 8008b7a:	bd10      	pop	{r4, pc}
		return ADC_CHANNEL_5;
}

void Error_Handler(void){
	
	HAL_Delay(100);
 8008b7c:	2064      	movs	r0, #100	; 0x64
 8008b7e:	f008 fae7 	bl	8011150 <HAL_Delay>
	
}
 8008b82:	e7f7      	b.n	8008b74 <MX_ADC_Init+0x38>
 8008b84:	20006b68 	.word	0x20006b68
 8008b88:	40012400 	.word	0x40012400
 8008b8c:	200015a0 	.word	0x200015a0

08008b90 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle){
 8008b90:	b510      	push	{r4, lr}
 8008b92:	0004      	movs	r4, r0
 8008b94:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8008b96:	2214      	movs	r2, #20
 8008b98:	2100      	movs	r1, #0
 8008b9a:	a803      	add	r0, sp, #12
 8008b9c:	f00c fa3b 	bl	8015016 <memset>
	if(adcHandle->Instance == ADC1){
 8008ba0:	4b12      	ldr	r3, [pc, #72]	; (8008bec <HAL_ADC_MspInit+0x5c>)
 8008ba2:	6822      	ldr	r2, [r4, #0]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d001      	beq.n	8008bac <HAL_ADC_MspInit+0x1c>
}
 8008ba8:	b008      	add	sp, #32
 8008baa:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008bac:	2080      	movs	r0, #128	; 0x80
 8008bae:	4b10      	ldr	r3, [pc, #64]	; (8008bf0 <HAL_ADC_MspInit+0x60>)
 8008bb0:	0080      	lsls	r0, r0, #2
 8008bb2:	6999      	ldr	r1, [r3, #24]
 8008bb4:	4301      	orrs	r1, r0
 8008bb6:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008bb8:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008bba:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008bbc:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008bbe:	4002      	ands	r2, r0
 8008bc0:	9201      	str	r2, [sp, #4]
 8008bc2:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008bc4:	695a      	ldr	r2, [r3, #20]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008bc6:	2090      	movs	r0, #144	; 0x90
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	615a      	str	r2, [r3, #20]
 8008bcc:	695b      	ldr	r3, [r3, #20]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008bce:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008bd0:	400b      	ands	r3, r1
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8008bd6:	233c      	movs	r3, #60	; 0x3c
 8008bd8:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008bda:	3b39      	subs	r3, #57	; 0x39
 8008bdc:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bde:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008be0:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be2:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008be4:	f009 fd86 	bl	80126f4 <HAL_GPIO_Init>
}
 8008be8:	e7de      	b.n	8008ba8 <HAL_ADC_MspInit+0x18>
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	40012400 	.word	0x40012400
 8008bf0:	40021000 	.word	0x40021000

08008bf4 <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 8008bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf6:	46ce      	mov	lr, r9
 8008bf8:	4647      	mov	r7, r8
 8008bfa:	b580      	push	{r7, lr}
	if(0 == ADC_flag)
 8008bfc:	4b52      	ldr	r3, [pc, #328]	; (8008d48 <ReadTempAndVref+0x154>)
void ReadTempAndVref(float *temp,float *Vref){
 8008bfe:	0006      	movs	r6, r0
	if(0 == ADC_flag)
 8008c00:	781b      	ldrb	r3, [r3, #0]
void ReadTempAndVref(float *temp,float *Vref){
 8008c02:	4689      	mov	r9, r1
	if(0 == ADC_flag)
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d100      	bne.n	8008c0a <ReadTempAndVref+0x16>
 8008c08:	e08b      	b.n	8008d22 <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c0a:	2310      	movs	r3, #16
 8008c0c:	4c4f      	ldr	r4, [pc, #316]	; (8008d4c <ReadTempAndVref+0x158>)
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c0e:	4d50      	ldr	r5, [pc, #320]	; (8008d50 <ReadTempAndVref+0x15c>)
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c10:	6023      	str	r3, [r4, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008c12:	2380      	movs	r3, #128	; 0x80
 8008c14:	015b      	lsls	r3, r3, #5
 8008c16:	6063      	str	r3, [r4, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c18:	2301      	movs	r3, #1
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c1a:	0021      	movs	r1, r4
 8008c1c:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c1e:	60a3      	str	r3, [r4, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c20:	f008 fcc0 	bl	80115a4 <HAL_ADC_ConfigChannel>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d000      	beq.n	8008c2a <ReadTempAndVref+0x36>
 8008c28:	e08a      	b.n	8008d40 <ReadTempAndVref+0x14c>
	HAL_ADC_Start(&hadc);
 8008c2a:	0028      	movs	r0, r5
 8008c2c:	f008 fc0a 	bl	8011444 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008c30:	2164      	movs	r1, #100	; 0x64
 8008c32:	0028      	movs	r0, r5
 8008c34:	f008 fc52 	bl	80114dc <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 8008c38:	0028      	movs	r0, r5
 8008c3a:	f008 fcad 	bl	8011598 <HAL_ADC_GetValue>
 8008c3e:	4b45      	ldr	r3, [pc, #276]	; (8008d54 <ReadTempAndVref+0x160>)
 8008c40:	8018      	strh	r0, [r3, #0]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008c42:	0400      	lsls	r0, r0, #16
 8008c44:	0c00      	lsrs	r0, r0, #16
 8008c46:	f7fa fafb 	bl	8003240 <__aeabi_i2d>
 8008c4a:	4a43      	ldr	r2, [pc, #268]	; (8008d58 <ReadTempAndVref+0x164>)
 8008c4c:	4b43      	ldr	r3, [pc, #268]	; (8008d5c <ReadTempAndVref+0x168>)
 8008c4e:	f7f9 fca5 	bl	800259c <__aeabi_dmul>
 8008c52:	2200      	movs	r2, #0
 8008c54:	4b42      	ldr	r3, [pc, #264]	; (8008d60 <ReadTempAndVref+0x16c>)
 8008c56:	f7f9 f89b 	bl	8001d90 <__aeabi_ddiv>
 8008c5a:	4a42      	ldr	r2, [pc, #264]	; (8008d64 <ReadTempAndVref+0x170>)
 8008c5c:	4b42      	ldr	r3, [pc, #264]	; (8008d68 <ReadTempAndVref+0x174>)
 8008c5e:	f7f9 ff09 	bl	8002a74 <__aeabi_dsub>
 8008c62:	4a42      	ldr	r2, [pc, #264]	; (8008d6c <ReadTempAndVref+0x178>)
 8008c64:	4b42      	ldr	r3, [pc, #264]	; (8008d70 <ReadTempAndVref+0x17c>)
 8008c66:	f7f9 f893 	bl	8001d90 <__aeabi_ddiv>
 8008c6a:	4b42      	ldr	r3, [pc, #264]	; (8008d74 <ReadTempAndVref+0x180>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f7f8 fd25 	bl	80016bc <__aeabi_dadd>
 8008c72:	f7fa fb83 	bl	800337c <__aeabi_d2f>
 8008c76:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 8008c78:	0028      	movs	r0, r5
 8008c7a:	f008 fc0f 	bl	801149c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c7e:	2310      	movs	r3, #16
 8008c80:	6023      	str	r3, [r4, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008c82:	4b3d      	ldr	r3, [pc, #244]	; (8008d78 <ReadTempAndVref+0x184>)
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c84:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 8008c86:	6063      	str	r3, [r4, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c88:	2301      	movs	r3, #1
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c8a:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c8c:	60a3      	str	r3, [r4, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008c8e:	f008 fc89 	bl	80115a4 <HAL_ADC_ConfigChannel>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d150      	bne.n	8008d38 <ReadTempAndVref+0x144>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008c96:	2311      	movs	r3, #17
 8008c98:	6023      	str	r3, [r4, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008c9a:	2380      	movs	r3, #128	; 0x80
 8008c9c:	015b      	lsls	r3, r3, #5
 8008c9e:	6063      	str	r3, [r4, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008ca0:	2305      	movs	r3, #5
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008ca2:	0021      	movs	r1, r4
 8008ca4:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008ca6:	60a3      	str	r3, [r4, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008ca8:	f008 fc7c 	bl	80115a4 <HAL_ADC_ConfigChannel>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d13f      	bne.n	8008d30 <ReadTempAndVref+0x13c>
	HAL_ADC_Start(&hadc);
 8008cb0:	0028      	movs	r0, r5
 8008cb2:	f008 fbc7 	bl	8011444 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008cb6:	2164      	movs	r1, #100	; 0x64
 8008cb8:	0028      	movs	r0, r5
 8008cba:	f008 fc0f 	bl	80114dc <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 8008cbe:	0028      	movs	r0, r5
 8008cc0:	f008 fc6a 	bl	8011598 <HAL_ADC_GetValue>
 8008cc4:	4680      	mov	r8, r0
 8008cc6:	4b2d      	ldr	r3, [pc, #180]	; (8008d7c <ReadTempAndVref+0x188>)
 8008cc8:	8018      	strh	r0, [r3, #0]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 8008cca:	4b2d      	ldr	r3, [pc, #180]	; (8008d80 <ReadTempAndVref+0x18c>)
 8008ccc:	8818      	ldrh	r0, [r3, #0]
 8008cce:	f7fa fab7 	bl	8003240 <__aeabi_i2d>
 8008cd2:	4a21      	ldr	r2, [pc, #132]	; (8008d58 <ReadTempAndVref+0x164>)
 8008cd4:	4b21      	ldr	r3, [pc, #132]	; (8008d5c <ReadTempAndVref+0x168>)
 8008cd6:	f7f9 fc61 	bl	800259c <__aeabi_dmul>
 8008cda:	4643      	mov	r3, r8
 8008cdc:	0006      	movs	r6, r0
 8008cde:	0418      	lsls	r0, r3, #16
 8008ce0:	0c00      	lsrs	r0, r0, #16
 8008ce2:	000f      	movs	r7, r1
 8008ce4:	f7fa faac 	bl	8003240 <__aeabi_i2d>
 8008ce8:	0002      	movs	r2, r0
 8008cea:	000b      	movs	r3, r1
 8008cec:	0030      	movs	r0, r6
 8008cee:	0039      	movs	r1, r7
 8008cf0:	f7f9 f84e 	bl	8001d90 <__aeabi_ddiv>
 8008cf4:	f7fa fb42 	bl	800337c <__aeabi_d2f>
 8008cf8:	464b      	mov	r3, r9
 8008cfa:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 8008cfc:	0028      	movs	r0, r5
 8008cfe:	f008 fbcd 	bl	801149c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008d02:	2311      	movs	r3, #17
 8008d04:	6023      	str	r3, [r4, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008d06:	4b1c      	ldr	r3, [pc, #112]	; (8008d78 <ReadTempAndVref+0x184>)
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d08:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 8008d0a:	6063      	str	r3, [r4, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008d0c:	2301      	movs	r3, #1
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d0e:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008d10:	60a3      	str	r3, [r4, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d12:	f008 fc47 	bl	80115a4 <HAL_ADC_ConfigChannel>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d106      	bne.n	8008d28 <ReadTempAndVref+0x134>
}
 8008d1a:	bcc0      	pop	{r6, r7}
 8008d1c:	46b9      	mov	r9, r7
 8008d1e:	46b0      	mov	r8, r6
 8008d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MX_ADC_Init();
 8008d22:	f7ff ff0b 	bl	8008b3c <MX_ADC_Init>
 8008d26:	e770      	b.n	8008c0a <ReadTempAndVref+0x16>
	HAL_Delay(100);
 8008d28:	2064      	movs	r0, #100	; 0x64
 8008d2a:	f008 fa11 	bl	8011150 <HAL_Delay>
}
 8008d2e:	e7f4      	b.n	8008d1a <ReadTempAndVref+0x126>
	HAL_Delay(100);
 8008d30:	2064      	movs	r0, #100	; 0x64
 8008d32:	f008 fa0d 	bl	8011150 <HAL_Delay>
}
 8008d36:	e7bb      	b.n	8008cb0 <ReadTempAndVref+0xbc>
	HAL_Delay(100);
 8008d38:	2064      	movs	r0, #100	; 0x64
 8008d3a:	f008 fa09 	bl	8011150 <HAL_Delay>
}
 8008d3e:	e7aa      	b.n	8008c96 <ReadTempAndVref+0xa2>
	HAL_Delay(100);
 8008d40:	2064      	movs	r0, #100	; 0x64
 8008d42:	f008 fa05 	bl	8011150 <HAL_Delay>
}
 8008d46:	e770      	b.n	8008c2a <ReadTempAndVref+0x36>
 8008d48:	200015a0 	.word	0x200015a0
 8008d4c:	20001640 	.word	0x20001640
 8008d50:	20006b68 	.word	0x20006b68
 8008d54:	200015a4 	.word	0x200015a4
 8008d58:	66666666 	.word	0x66666666
 8008d5c:	400a6666 	.word	0x400a6666
 8008d60:	40affe00 	.word	0x40affe00
 8008d64:	28f5c28f 	.word	0x28f5c28f
 8008d68:	3ff68f5c 	.word	0x3ff68f5c
 8008d6c:	33333333 	.word	0x33333333
 8008d70:	40113333 	.word	0x40113333
 8008d74:	40390000 	.word	0x40390000
 8008d78:	00001001 	.word	0x00001001
 8008d7c:	200015a2 	.word	0x200015a2
 8008d80:	1ffff7ba 	.word	0x1ffff7ba

08008d84 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d86:	46c6      	mov	lr, r8
 8008d88:	2300      	movs	r3, #0
 8008d8a:	b500      	push	{lr}
 8008d8c:	4698      	mov	r8, r3
	if(port == 2 || port == 3){
 8008d8e:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008d90:	0004      	movs	r4, r0
 8008d92:	000d      	movs	r5, r1
 8008d94:	b086      	sub	sp, #24
	if(port == 2 || port == 3){
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d903      	bls.n	8008da2 <GetReadPrecentage+0x1e>
}
 8008d9a:	b006      	add	sp, #24
 8008d9c:	bc80      	pop	{r7}
 8008d9e:	46b8      	mov	r8, r7
 8008da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(0 == ADC_flag){
 8008da2:	4b4f      	ldr	r3, [pc, #316]	; (8008ee0 <GetReadPrecentage+0x15c>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d068      	beq.n	8008e7c <GetReadPrecentage+0xf8>
 8008daa:	4e4e      	ldr	r6, [pc, #312]	; (8008ee4 <GetReadPrecentage+0x160>)
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8008dac:	2090      	movs	r0, #144	; 0x90
 8008dae:	2201      	movs	r2, #1
 8008db0:	2110      	movs	r1, #16
 8008db2:	05c0      	lsls	r0, r0, #23
 8008db4:	f009 fe52 	bl	8012a5c <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 8008db8:	0020      	movs	r0, r4
 8008dba:	f005 fcd1 	bl	800e760 <GetUart>
	if(huart->Instance == USART2 && side == "top")
 8008dbe:	4a4a      	ldr	r2, [pc, #296]	; (8008ee8 <GetReadPrecentage+0x164>)
 8008dc0:	6803      	ldr	r3, [r0, #0]
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d07b      	beq.n	8008ebe <GetReadPrecentage+0x13a>
	else if(huart->Instance == USART6 && side == "top")
 8008dc6:	4a49      	ldr	r2, [pc, #292]	; (8008eec <GetReadPrecentage+0x168>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d04b      	beq.n	8008e64 <GetReadPrecentage+0xe0>
 8008dcc:	2300      	movs	r3, #0
		sConfig.Channel =Channel;
 8008dce:	4c48      	ldr	r4, [pc, #288]	; (8008ef0 <GetReadPrecentage+0x16c>)
		Channel =Get_channel(GetUart(port),"bottom");
 8008dd0:	4642      	mov	r2, r8
		sConfig.Channel =Channel;
 8008dd2:	6023      	str	r3, [r4, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008dd4:	2380      	movs	r3, #128	; 0x80
 8008dd6:	015b      	lsls	r3, r3, #5
 8008dd8:	6063      	str	r3, [r4, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008dda:	2301      	movs	r3, #1
		Channel =Get_channel(GetUart(port),"bottom");
 8008ddc:	4f45      	ldr	r7, [pc, #276]	; (8008ef4 <GetReadPrecentage+0x170>)
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008dde:	0021      	movs	r1, r4
 8008de0:	0030      	movs	r0, r6
		Channel =Get_channel(GetUart(port),"bottom");
 8008de2:	703a      	strb	r2, [r7, #0]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008de4:	60a3      	str	r3, [r4, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008de6:	f008 fbdd 	bl	80115a4 <HAL_ADC_ConfigChannel>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d142      	bne.n	8008e74 <GetReadPrecentage+0xf0>
		HAL_ADC_Start(&hadc);
 8008dee:	0030      	movs	r0, r6
 8008df0:	f008 fb28 	bl	8011444 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008df4:	2164      	movs	r1, #100	; 0x64
 8008df6:	0030      	movs	r0, r6
 8008df8:	f008 fb70 	bl	80114dc <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008dfc:	0030      	movs	r0, r6
 8008dfe:	f008 fbcb 	bl	8011598 <HAL_ADC_GetValue>
 8008e02:	f7f8 fc1f 	bl	8001644 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008e06:	f7fa fa71 	bl	80032ec <__aeabi_f2d>
 8008e0a:	4a3b      	ldr	r2, [pc, #236]	; (8008ef8 <GetReadPrecentage+0x174>)
 8008e0c:	4b3b      	ldr	r3, [pc, #236]	; (8008efc <GetReadPrecentage+0x178>)
 8008e0e:	f7f9 fbc5 	bl	800259c <__aeabi_dmul>
 8008e12:	2200      	movs	r2, #0
 8008e14:	4b3a      	ldr	r3, [pc, #232]	; (8008f00 <GetReadPrecentage+0x17c>)
 8008e16:	f7f8 ffbb 	bl	8001d90 <__aeabi_ddiv>
 8008e1a:	f7fa faaf 	bl	800337c <__aeabi_d2f>
 8008e1e:	4b39      	ldr	r3, [pc, #228]	; (8008f04 <GetReadPrecentage+0x180>)
		current =(100 * percentage) / 3.3;
 8008e20:	4939      	ldr	r1, [pc, #228]	; (8008f08 <GetReadPrecentage+0x184>)
		percentage =3.3 * percentage / 4095;
 8008e22:	6018      	str	r0, [r3, #0]
		current =(100 * percentage) / 3.3;
 8008e24:	f7f8 f8c6 	bl	8000fb4 <__aeabi_fmul>
 8008e28:	f7fa fa60 	bl	80032ec <__aeabi_f2d>
 8008e2c:	4a32      	ldr	r2, [pc, #200]	; (8008ef8 <GetReadPrecentage+0x174>)
 8008e2e:	4b33      	ldr	r3, [pc, #204]	; (8008efc <GetReadPrecentage+0x178>)
 8008e30:	f7f8 ffae 	bl	8001d90 <__aeabi_ddiv>
 8008e34:	f7fa faa2 	bl	800337c <__aeabi_d2f>
 8008e38:	4b34      	ldr	r3, [pc, #208]	; (8008f0c <GetReadPrecentage+0x188>)
 8008e3a:	6018      	str	r0, [r3, #0]
		*precentageValue =current;
 8008e3c:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 8008e3e:	0030      	movs	r0, r6
 8008e40:	f008 fb2c 	bl	801149c <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008e44:	783b      	ldrb	r3, [r7, #0]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008e46:	0021      	movs	r1, r4
		sConfig.Channel =Channel;
 8008e48:	6023      	str	r3, [r4, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008e4a:	4b31      	ldr	r3, [pc, #196]	; (8008f10 <GetReadPrecentage+0x18c>)
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008e4c:	0030      	movs	r0, r6
		sConfig.Rank = ADC_RANK_NONE;
 8008e4e:	6063      	str	r3, [r4, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008e50:	2301      	movs	r3, #1
 8008e52:	60a3      	str	r3, [r4, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008e54:	f008 fba6 	bl	80115a4 <HAL_ADC_ConfigChannel>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d09e      	beq.n	8008d9a <GetReadPrecentage+0x16>
	HAL_Delay(100);
 8008e5c:	2064      	movs	r0, #100	; 0x64
 8008e5e:	f008 f977 	bl	8011150 <HAL_Delay>
}
 8008e62:	e79a      	b.n	8008d9a <GetReadPrecentage+0x16>
	else if(huart->Instance == USART6 && side == "top")
 8008e64:	4a2b      	ldr	r2, [pc, #172]	; (8008f14 <GetReadPrecentage+0x190>)
 8008e66:	4b2c      	ldr	r3, [pc, #176]	; (8008f18 <GetReadPrecentage+0x194>)
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d034      	beq.n	8008ed6 <GetReadPrecentage+0x152>
		return ADC_CHANNEL_5;
 8008e6c:	2205      	movs	r2, #5
	else if(huart->Instance == USART6 && side == "top")
 8008e6e:	2305      	movs	r3, #5
		return ADC_CHANNEL_5;
 8008e70:	4690      	mov	r8, r2
 8008e72:	e7ac      	b.n	8008dce <GetReadPrecentage+0x4a>
	HAL_Delay(100);
 8008e74:	2064      	movs	r0, #100	; 0x64
 8008e76:	f008 f96b 	bl	8011150 <HAL_Delay>
}
 8008e7a:	e7b8      	b.n	8008dee <GetReadPrecentage+0x6a>
			MX_ADC_Init();
 8008e7c:	f7ff fe5e 	bl	8008b3c <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008e80:	0020      	movs	r0, r4
 8008e82:	f005 fc6d 	bl	800e760 <GetUart>
 8008e86:	f00b f8eb 	bl	8014060 <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 8008e8a:	2090      	movs	r0, #144	; 0x90
 8008e8c:	2110      	movs	r1, #16
 8008e8e:	05c0      	lsls	r0, r0, #23
 8008e90:	f009 fd46 	bl	8012920 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008e94:	4e13      	ldr	r6, [pc, #76]	; (8008ee4 <GetReadPrecentage+0x160>)
 8008e96:	0030      	movs	r0, r6
 8008e98:	f008 fc16 	bl	80116c8 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008e9c:	2310      	movs	r3, #16
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008e9e:	2090      	movs	r0, #144	; 0x90
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008ea0:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ea2:	3b0f      	subs	r3, #15
 8008ea4:	9302      	str	r3, [sp, #8]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008ea6:	a901      	add	r1, sp, #4
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008ea8:	3302      	adds	r3, #2
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008eaa:	05c0      	lsls	r0, r0, #23
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008eac:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008eae:	f009 fc21 	bl	80126f4 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008eb2:	2206      	movs	r2, #6
 8008eb4:	4b19      	ldr	r3, [pc, #100]	; (8008f1c <GetReadPrecentage+0x198>)
 8008eb6:	191b      	adds	r3, r3, r4
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	701a      	strb	r2, [r3, #0]
 8008ebc:	e776      	b.n	8008dac <GetReadPrecentage+0x28>
	if(huart->Instance == USART2 && side == "top")
 8008ebe:	4a15      	ldr	r2, [pc, #84]	; (8008f14 <GetReadPrecentage+0x190>)
 8008ec0:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <GetReadPrecentage+0x194>)
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d003      	beq.n	8008ece <GetReadPrecentage+0x14a>
		return ADC_CHANNEL_3;
 8008ec6:	2203      	movs	r2, #3
	if(huart->Instance == USART2 && side == "top")
 8008ec8:	2303      	movs	r3, #3
		return ADC_CHANNEL_3;
 8008eca:	4690      	mov	r8, r2
 8008ecc:	e77f      	b.n	8008dce <GetReadPrecentage+0x4a>
		return ADC_CHANNEL_2;
 8008ece:	2202      	movs	r2, #2
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	4690      	mov	r8, r2
 8008ed4:	e77b      	b.n	8008dce <GetReadPrecentage+0x4a>
		return ADC_CHANNEL_4;
 8008ed6:	2204      	movs	r2, #4
 8008ed8:	2304      	movs	r3, #4
 8008eda:	4690      	mov	r8, r2
 8008edc:	e777      	b.n	8008dce <GetReadPrecentage+0x4a>
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	200015a0 	.word	0x200015a0
 8008ee4:	20006b68 	.word	0x20006b68
 8008ee8:	40004400 	.word	0x40004400
 8008eec:	40011400 	.word	0x40011400
 8008ef0:	20001640 	.word	0x20001640
 8008ef4:	200015b0 	.word	0x200015b0
 8008ef8:	66666666 	.word	0x66666666
 8008efc:	400a6666 	.word	0x400a6666
 8008f00:	40affe00 	.word	0x40affe00
 8008f04:	20001604 	.word	0x20001604
 8008f08:	42c80000 	.word	0x42c80000
 8008f0c:	200015f4 	.word	0x200015f4
 8008f10:	00001001 	.word	0x00001001
 8008f14:	0801be2c 	.word	0x0801be2c
 8008f18:	0801be28 	.word	0x0801be28
 8008f1c:	20001190 	.word	0x20001190

08008f20 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008f20:	2802      	cmp	r0, #2
 8008f22:	d00e      	beq.n	8008f42 <Get_Rank+0x22>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008f24:	2803      	cmp	r0, #3
 8008f26:	d002      	beq.n	8008f2e <Get_Rank+0xe>
 8008f28:	4b10      	ldr	r3, [pc, #64]	; (8008f6c <Get_Rank+0x4c>)
 8008f2a:	7818      	ldrb	r0, [r3, #0]
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
		Rank_t =3;
	return Rank_t;
}
 8008f2c:	4770      	bx	lr
	else if(Port == 3 && side == "top")
 8008f2e:	4b10      	ldr	r3, [pc, #64]	; (8008f70 <Get_Rank+0x50>)
 8008f30:	4299      	cmp	r1, r3
 8008f32:	d011      	beq.n	8008f58 <Get_Rank+0x38>
	else if(Port == 3 && side == "bottom")
 8008f34:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <Get_Rank+0x54>)
 8008f36:	4299      	cmp	r1, r3
 8008f38:	d1f6      	bne.n	8008f28 <Get_Rank+0x8>
		Rank_t =3;
 8008f3a:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <Get_Rank+0x4c>)
 8008f3c:	7018      	strb	r0, [r3, #0]
 8008f3e:	2003      	movs	r0, #3
 8008f40:	e7f4      	b.n	8008f2c <Get_Rank+0xc>
	if(Port == 2 && side == "top")
 8008f42:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <Get_Rank+0x50>)
 8008f44:	4299      	cmp	r1, r3
 8008f46:	d00c      	beq.n	8008f62 <Get_Rank+0x42>
	else if(Port == 2 && side == "bottom")
 8008f48:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <Get_Rank+0x54>)
 8008f4a:	4299      	cmp	r1, r3
 8008f4c:	d1ec      	bne.n	8008f28 <Get_Rank+0x8>
		Rank_t =1;
 8008f4e:	2201      	movs	r2, #1
 8008f50:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <Get_Rank+0x4c>)
 8008f52:	2001      	movs	r0, #1
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e7e9      	b.n	8008f2c <Get_Rank+0xc>
		Rank_t =2;
 8008f58:	2202      	movs	r2, #2
 8008f5a:	4b04      	ldr	r3, [pc, #16]	; (8008f6c <Get_Rank+0x4c>)
 8008f5c:	3801      	subs	r0, #1
 8008f5e:	701a      	strb	r2, [r3, #0]
 8008f60:	e7e4      	b.n	8008f2c <Get_Rank+0xc>
		Rank_t =0;
 8008f62:	2200      	movs	r2, #0
 8008f64:	4b01      	ldr	r3, [pc, #4]	; (8008f6c <Get_Rank+0x4c>)
 8008f66:	2000      	movs	r0, #0
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	e7df      	b.n	8008f2c <Get_Rank+0xc>
 8008f6c:	200015b1 	.word	0x200015b1
 8008f70:	0801be28 	.word	0x0801be28
 8008f74:	0801be2c 	.word	0x0801be2c

08008f78 <ADCSelectChannel>:
	if(ADC_port == 2 || ADC_port == 3){
 8008f78:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008f7a:	b570      	push	{r4, r5, r6, lr}
 8008f7c:	0004      	movs	r4, r0
 8008f7e:	000d      	movs	r5, r1
 8008f80:	2600      	movs	r6, #0
	if(ADC_port == 2 || ADC_port == 3){
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d900      	bls.n	8008f88 <ADCSelectChannel+0x10>
}
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008f88:	f005 fbea 	bl	800e760 <GetUart>
 8008f8c:	f00b f868 	bl	8014060 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008f90:	2206      	movs	r2, #6
 8008f92:	4b18      	ldr	r3, [pc, #96]	; (8008ff4 <ADCSelectChannel+0x7c>)
		Channel =Get_channel(GetUart(ADC_port),side);
 8008f94:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] =CUSTOM;
 8008f96:	191b      	adds	r3, r3, r4
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	701a      	strb	r2, [r3, #0]
		Channel =Get_channel(GetUart(ADC_port),side);
 8008f9c:	f005 fbe0 	bl	800e760 <GetUart>
	if(huart->Instance == USART2 && side == "top")
 8008fa0:	4a15      	ldr	r2, [pc, #84]	; (8008ff8 <ADCSelectChannel+0x80>)
 8008fa2:	6803      	ldr	r3, [r0, #0]
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d011      	beq.n	8008fcc <ADCSelectChannel+0x54>
	else if(huart->Instance == USART6 && side == "top")
 8008fa8:	4a14      	ldr	r2, [pc, #80]	; (8008ffc <ADCSelectChannel+0x84>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d016      	beq.n	8008fdc <ADCSelectChannel+0x64>
		Channel =Get_channel(GetUart(ADC_port),side);
 8008fae:	4b14      	ldr	r3, [pc, #80]	; (8009000 <ADCSelectChannel+0x88>)
		Rank_t =Get_Rank(ADC_port,side);
 8008fb0:	0029      	movs	r1, r5
 8008fb2:	0020      	movs	r0, r4
		Channel =Get_channel(GetUart(ADC_port),side);
 8008fb4:	701e      	strb	r6, [r3, #0]
		Rank_t =Get_Rank(ADC_port,side);
 8008fb6:	f7ff ffb3 	bl	8008f20 <Get_Rank>
 8008fba:	4b12      	ldr	r3, [pc, #72]	; (8009004 <ADCSelectChannel+0x8c>)
 8008fbc:	7018      	strb	r0, [r3, #0]
		if(ADC_flag == 0)
 8008fbe:	4b12      	ldr	r3, [pc, #72]	; (8009008 <ADCSelectChannel+0x90>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1df      	bne.n	8008f86 <ADCSelectChannel+0xe>
			MX_ADC_Init();
 8008fc6:	f7ff fdb9 	bl	8008b3c <MX_ADC_Init>
}
 8008fca:	e7dc      	b.n	8008f86 <ADCSelectChannel+0xe>
	if(huart->Instance == USART2 && side == "top")
 8008fcc:	4b0f      	ldr	r3, [pc, #60]	; (800900c <ADCSelectChannel+0x94>)
 8008fce:	429d      	cmp	r5, r3
 8008fd0:	d00c      	beq.n	8008fec <ADCSelectChannel+0x74>
	else if(huart->Instance == USART2 && side == "bottom")
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <ADCSelectChannel+0x98>)
 8008fd4:	429d      	cmp	r5, r3
 8008fd6:	d1ea      	bne.n	8008fae <ADCSelectChannel+0x36>
		return ADC_CHANNEL_3;
 8008fd8:	2603      	movs	r6, #3
 8008fda:	e7e8      	b.n	8008fae <ADCSelectChannel+0x36>
	else if(huart->Instance == USART6 && side == "top")
 8008fdc:	4b0b      	ldr	r3, [pc, #44]	; (800900c <ADCSelectChannel+0x94>)
 8008fde:	429d      	cmp	r5, r3
 8008fe0:	d006      	beq.n	8008ff0 <ADCSelectChannel+0x78>
	else if(huart->Instance == USART6 && side == "bottom")
 8008fe2:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <ADCSelectChannel+0x98>)
 8008fe4:	429d      	cmp	r5, r3
 8008fe6:	d1e2      	bne.n	8008fae <ADCSelectChannel+0x36>
		return ADC_CHANNEL_5;
 8008fe8:	2605      	movs	r6, #5
 8008fea:	e7e0      	b.n	8008fae <ADCSelectChannel+0x36>
		return ADC_CHANNEL_2;
 8008fec:	2602      	movs	r6, #2
 8008fee:	e7de      	b.n	8008fae <ADCSelectChannel+0x36>
		return ADC_CHANNEL_4;
 8008ff0:	2604      	movs	r6, #4
 8008ff2:	e7dc      	b.n	8008fae <ADCSelectChannel+0x36>
 8008ff4:	20001190 	.word	0x20001190
 8008ff8:	40004400 	.word	0x40004400
 8008ffc:	40011400 	.word	0x40011400
 8009000:	200015b0 	.word	0x200015b0
 8009004:	200015b1 	.word	0x200015b1
 8009008:	200015a0 	.word	0x200015a0
 800900c:	0801be28 	.word	0x0801be28
 8009010:	0801be2c 	.word	0x0801be2c

08009014 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	4647      	mov	r7, r8
 8009018:	46ce      	mov	lr, r9
 800901a:	b580      	push	{r7, lr}
	if(ADC_flag == 1){
 800901c:	4b38      	ldr	r3, [pc, #224]	; (8009100 <ReadADCChannel+0xec>)
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 800901e:	0006      	movs	r6, r0
	if(ADC_flag == 1){
 8009020:	781b      	ldrb	r3, [r3, #0]
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8009022:	000d      	movs	r5, r1
 8009024:	0014      	movs	r4, r2
 8009026:	2700      	movs	r7, #0
	if(ADC_flag == 1){
 8009028:	2b01      	cmp	r3, #1
 800902a:	d00b      	beq.n	8009044 <ReadADCChannel+0x30>
 800902c:	4d35      	ldr	r5, [pc, #212]	; (8009104 <ReadADCChannel+0xf0>)
 800902e:	4e36      	ldr	r6, [pc, #216]	; (8009108 <ReadADCChannel+0xf4>)
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8009030:	782b      	ldrb	r3, [r5, #0]
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	5af0      	ldrh	r0, [r6, r3]
 8009036:	f7f8 fb05 	bl	8001644 <__aeabi_ui2f>
 800903a:	6020      	str	r0, [r4, #0]
}
 800903c:	bcc0      	pop	{r6, r7}
 800903e:	46b9      	mov	r9, r7
 8009040:	46b0      	mov	r8, r6
 8009042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8009044:	f005 fb8c 	bl	800e760 <GetUart>
	if(huart->Instance == USART2 && side == "top")
 8009048:	4a30      	ldr	r2, [pc, #192]	; (800910c <ReadADCChannel+0xf8>)
 800904a:	6803      	ldr	r3, [r0, #0]
 800904c:	4293      	cmp	r3, r2
 800904e:	d03e      	beq.n	80090ce <ReadADCChannel+0xba>
	else if(huart->Instance == USART6 && side == "top")
 8009050:	4a2f      	ldr	r2, [pc, #188]	; (8009110 <ReadADCChannel+0xfc>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d047      	beq.n	80090e6 <ReadADCChannel+0xd2>
		Channel =Get_channel(GetUart(Port),side);
 8009056:	4b2f      	ldr	r3, [pc, #188]	; (8009114 <ReadADCChannel+0x100>)
		Rank_t =Get_Rank(Port,side);
 8009058:	0029      	movs	r1, r5
		Channel =Get_channel(GetUart(Port),side);
 800905a:	4699      	mov	r9, r3
		Rank_t =Get_Rank(Port,side);
 800905c:	0030      	movs	r0, r6
		Channel =Get_channel(GetUart(Port),side);
 800905e:	701f      	strb	r7, [r3, #0]
		Rank_t =Get_Rank(Port,side);
 8009060:	f7ff ff5e 	bl	8008f20 <Get_Rank>
		sConfig.Channel =Channel;
 8009064:	464b      	mov	r3, r9
 8009066:	4f2c      	ldr	r7, [pc, #176]	; (8009118 <ReadADCChannel+0x104>)
 8009068:	781b      	ldrb	r3, [r3, #0]
		Rank_t =Get_Rank(Port,side);
 800906a:	4d26      	ldr	r5, [pc, #152]	; (8009104 <ReadADCChannel+0xf0>)
		sConfig.Channel =Channel;
 800906c:	603b      	str	r3, [r7, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800906e:	2380      	movs	r3, #128	; 0x80
 8009070:	015b      	lsls	r3, r3, #5
 8009072:	607b      	str	r3, [r7, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8009074:	2303      	movs	r3, #3
 8009076:	60bb      	str	r3, [r7, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8009078:	4b28      	ldr	r3, [pc, #160]	; (800911c <ReadADCChannel+0x108>)
		Rank_t =Get_Rank(Port,side);
 800907a:	7028      	strb	r0, [r5, #0]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800907c:	0039      	movs	r1, r7
 800907e:	0018      	movs	r0, r3
 8009080:	4698      	mov	r8, r3
 8009082:	f008 fa8f 	bl	80115a4 <HAL_ADC_ConfigChannel>
 8009086:	2800      	cmp	r0, #0
 8009088:	d129      	bne.n	80090de <ReadADCChannel+0xca>
		HAL_ADC_Start(&hadc);
 800908a:	4640      	mov	r0, r8
 800908c:	f008 f9da 	bl	8011444 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8009090:	2164      	movs	r1, #100	; 0x64
 8009092:	4640      	mov	r0, r8
 8009094:	f008 fa22 	bl	80114dc <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8009098:	4640      	mov	r0, r8
 800909a:	f008 fa7d 	bl	8011598 <HAL_ADC_GetValue>
 800909e:	782b      	ldrb	r3, [r5, #0]
 80090a0:	4e19      	ldr	r6, [pc, #100]	; (8009108 <ReadADCChannel+0xf4>)
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	52f0      	strh	r0, [r6, r3]
		HAL_ADC_Stop(&hadc);
 80090a6:	4640      	mov	r0, r8
 80090a8:	f008 f9f8 	bl	801149c <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 80090ac:	464b      	mov	r3, r9
 80090ae:	781b      	ldrb	r3, [r3, #0]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80090b0:	0039      	movs	r1, r7
		sConfig.Channel =Channel;
 80090b2:	603b      	str	r3, [r7, #0]
		sConfig.Rank = ADC_RANK_NONE;
 80090b4:	4b1a      	ldr	r3, [pc, #104]	; (8009120 <ReadADCChannel+0x10c>)
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80090b6:	4640      	mov	r0, r8
		sConfig.Rank = ADC_RANK_NONE;
 80090b8:	607b      	str	r3, [r7, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80090ba:	2303      	movs	r3, #3
 80090bc:	60bb      	str	r3, [r7, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80090be:	f008 fa71 	bl	80115a4 <HAL_ADC_ConfigChannel>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d0b4      	beq.n	8009030 <ReadADCChannel+0x1c>
	HAL_Delay(100);
 80090c6:	2064      	movs	r0, #100	; 0x64
 80090c8:	f008 f842 	bl	8011150 <HAL_Delay>
}
 80090cc:	e7b0      	b.n	8009030 <ReadADCChannel+0x1c>
	if(huart->Instance == USART2 && side == "top")
 80090ce:	4b15      	ldr	r3, [pc, #84]	; (8009124 <ReadADCChannel+0x110>)
 80090d0:	429d      	cmp	r5, r3
 80090d2:	d010      	beq.n	80090f6 <ReadADCChannel+0xe2>
	else if(huart->Instance == USART2 && side == "bottom")
 80090d4:	4b14      	ldr	r3, [pc, #80]	; (8009128 <ReadADCChannel+0x114>)
 80090d6:	429d      	cmp	r5, r3
 80090d8:	d1bd      	bne.n	8009056 <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 80090da:	2703      	movs	r7, #3
 80090dc:	e7bb      	b.n	8009056 <ReadADCChannel+0x42>
	HAL_Delay(100);
 80090de:	2064      	movs	r0, #100	; 0x64
 80090e0:	f008 f836 	bl	8011150 <HAL_Delay>
}
 80090e4:	e7d1      	b.n	800908a <ReadADCChannel+0x76>
	else if(huart->Instance == USART6 && side == "top")
 80090e6:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <ReadADCChannel+0x110>)
 80090e8:	429d      	cmp	r5, r3
 80090ea:	d006      	beq.n	80090fa <ReadADCChannel+0xe6>
	else if(huart->Instance == USART6 && side == "bottom")
 80090ec:	4b0e      	ldr	r3, [pc, #56]	; (8009128 <ReadADCChannel+0x114>)
 80090ee:	429d      	cmp	r5, r3
 80090f0:	d1b1      	bne.n	8009056 <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 80090f2:	2705      	movs	r7, #5
 80090f4:	e7af      	b.n	8009056 <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 80090f6:	2702      	movs	r7, #2
 80090f8:	e7ad      	b.n	8009056 <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 80090fa:	2704      	movs	r7, #4
 80090fc:	e7ab      	b.n	8009056 <ReadADCChannel+0x42>
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	200015a0 	.word	0x200015a0
 8009104:	200015b1 	.word	0x200015b1
 8009108:	200015a8 	.word	0x200015a8
 800910c:	40004400 	.word	0x40004400
 8009110:	40011400 	.word	0x40011400
 8009114:	200015b0 	.word	0x200015b0
 8009118:	20001640 	.word	0x20001640
 800911c:	20006b68 	.word	0x20006b68
 8009120:	00001001 	.word	0x00001001
 8009124:	0801be28 	.word	0x0801be28
 8009128:	0801be2c 	.word	0x0801be2c

0800912c <buttonReleasedCallback>:
 800912c:	4770      	bx	lr
 800912e:	46c0      	nop			; (mov r8, r8)

08009130 <buttonClickedCallback>:
 8009130:	4770      	bx	lr
 8009132:	46c0      	nop			; (mov r8, r8)

08009134 <buttonDblClickedCallback>:
 8009134:	4770      	bx	lr
 8009136:	46c0      	nop			; (mov r8, r8)

08009138 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8009138:	4770      	bx	lr
 800913a:	46c0      	nop			; (mov r8, r8)

0800913c <buttonReleasedForYCallback>:
 800913c:	4770      	bx	lr
 800913e:	46c0      	nop			; (mov r8, r8)

08009140 <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 8009140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009142:	4bc7      	ldr	r3, [pc, #796]	; (8009460 <CheckAttachedButtons+0x320>)
 8009144:	464e      	mov	r6, r9
 8009146:	4645      	mov	r5, r8
 8009148:	4657      	mov	r7, sl
 800914a:	46de      	mov	lr, fp
 800914c:	3304      	adds	r3, #4
 800914e:	4698      	mov	r8, r3
 8009150:	4bc4      	ldr	r3, [pc, #784]	; (8009464 <CheckAttachedButtons+0x324>)
 8009152:	b5e0      	push	{r5, r6, r7, lr}
 8009154:	3301      	adds	r3, #1
 8009156:	4699      	mov	r9, r3
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8009158:	2300      	movs	r3, #0
void CheckAttachedButtons(void){
 800915a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t connected =GPIO_PIN_RESET, state =0;
 800915c:	9304      	str	r3, [sp, #16]
 800915e:	9303      	str	r3, [sp, #12]
			if(delayButtonStateReset == false)
 8009160:	4bc1      	ldr	r3, [pc, #772]	; (8009468 <CheckAttachedButtons+0x328>)
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8009162:	2401      	movs	r4, #1
			if(delayButtonStateReset == false)
 8009164:	469a      	mov	sl, r3
 8009166:	4dc1      	ldr	r5, [pc, #772]	; (800946c <CheckAttachedButtons+0x32c>)
 8009168:	4ec1      	ldr	r6, [pc, #772]	; (8009470 <CheckAttachedButtons+0x330>)
 800916a:	3509      	adds	r5, #9
 800916c:	3604      	adds	r6, #4
		if(button[i].type)			// Only check defined butons
 800916e:	786b      	ldrb	r3, [r5, #1]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d100      	bne.n	8009176 <CheckAttachedButtons+0x36>
 8009174:	e0ed      	b.n	8009352 <CheckAttachedButtons+0x212>
			if(delayButtonStateReset == false)
 8009176:	4653      	mov	r3, sl
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d100      	bne.n	8009180 <CheckAttachedButtons+0x40>
				button[i].state =NONE;
 800917e:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8009180:	ab04      	add	r3, sp, #16
 8009182:	469c      	mov	ip, r3
 8009184:	270e      	movs	r7, #14
 8009186:	4467      	add	r7, ip
 8009188:	ab09      	add	r3, sp, #36	; 0x24
 800918a:	aa07      	add	r2, sp, #28
 800918c:	a908      	add	r1, sp, #32
 800918e:	0020      	movs	r0, r4
 8009190:	9700      	str	r7, [sp, #0]
 8009192:	f004 fc6f 	bl	800da74 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8009196:	ab04      	add	r3, sp, #16
 8009198:	8999      	ldrh	r1, [r3, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	9808      	ldr	r0, [sp, #32]
 800919e:	f009 fc5d 	bl	8012a5c <HAL_GPIO_WritePin>
			Delay_us(10);
 80091a2:	200a      	movs	r0, #10
 80091a4:	f005 f88c 	bl	800e2c0 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 80091a8:	8839      	ldrh	r1, [r7, #0]
 80091aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ac:	f009 fc50 	bl	8012a50 <HAL_GPIO_ReadPin>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d100      	bne.n	80091b6 <CheckAttachedButtons+0x76>
 80091b4:	e128      	b.n	8009408 <CheckAttachedButtons+0x2c8>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 80091b6:	ab04      	add	r3, sp, #16
 80091b8:	8999      	ldrh	r1, [r3, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	9808      	ldr	r0, [sp, #32]
 80091be:	f009 fc4d 	bl	8012a5c <HAL_GPIO_WritePin>
			switch(button[i].type){
 80091c2:	786b      	ldrb	r3, [r5, #1]
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d100      	bne.n	80091ca <CheckAttachedButtons+0x8a>
 80091c8:	e138      	b.n	800943c <CheckAttachedButtons+0x2fc>
 80091ca:	d900      	bls.n	80091ce <CheckAttachedButtons+0x8e>
 80091cc:	e0d5      	b.n	800937a <CheckAttachedButtons+0x23a>
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d001      	beq.n	80091d6 <CheckAttachedButtons+0x96>
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d107      	bne.n	80091e6 <CheckAttachedButtons+0xa6>
					if(connected == GPIO_PIN_SET)
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d100      	bne.n	80091de <CheckAttachedButtons+0x9e>
 80091dc:	e213      	b.n	8009606 <CheckAttachedButtons+0x4c6>
					else if(connected == GPIO_PIN_RESET)
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d100      	bne.n	80091e6 <CheckAttachedButtons+0xa6>
 80091e4:	e152      	b.n	800948c <CheckAttachedButtons+0x34c>
			if(state == CLOSED || state == ON){
 80091e6:	9b04      	ldr	r3, [sp, #16]
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d100      	bne.n	80091ee <CheckAttachedButtons+0xae>
 80091ec:	e11b      	b.n	8009426 <CheckAttachedButtons+0x2e6>
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d100      	bne.n	80091f4 <CheckAttachedButtons+0xb4>
 80091f2:	e118      	b.n	8009426 <CheckAttachedButtons+0x2e6>
			if(state == OPEN || state == OFF){
 80091f4:	9b04      	ldr	r3, [sp, #16]
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d002      	beq.n	8009200 <CheckAttachedButtons+0xc0>
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d000      	beq.n	8009200 <CheckAttachedButtons+0xc0>
 80091fe:	e21f      	b.n	8009640 <CheckAttachedButtons+0x500>
				if(releaseCounter[i] < 0xFFFF)
 8009200:	4643      	mov	r3, r8
 8009202:	4a9c      	ldr	r2, [pc, #624]	; (8009474 <CheckAttachedButtons+0x334>)
 8009204:	681b      	ldr	r3, [r3, #0]
					releaseCounter[i] =0;		// Reset debounce counter
 8009206:	2100      	movs	r1, #0
				if(releaseCounter[i] < 0xFFFF)
 8009208:	4293      	cmp	r3, r2
 800920a:	d800      	bhi.n	800920e <CheckAttachedButtons+0xce>
					++releaseCounter[i];		// Advance the debounce counter
 800920c:	1c59      	adds	r1, r3, #1
 800920e:	4643      	mov	r3, r8
 8009210:	6019      	str	r1, [r3, #0]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8009212:	4b99      	ldr	r3, [pc, #612]	; (8009478 <CheckAttachedButtons+0x338>)
 8009214:	781a      	ldrb	r2, [r3, #0]
 8009216:	2a02      	cmp	r2, #2
 8009218:	d100      	bne.n	800921c <CheckAttachedButtons+0xdc>
 800921a:	e07f      	b.n	800931c <CheckAttachedButtons+0x1dc>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 800921c:	464a      	mov	r2, r9
 800921e:	4897      	ldr	r0, [pc, #604]	; (800947c <CheckAttachedButtons+0x33c>)
 8009220:	7817      	ldrb	r7, [r2, #0]
 8009222:	9002      	str	r0, [sp, #8]
 8009224:	7942      	ldrb	r2, [r0, #5]
 8009226:	4297      	cmp	r7, r2
 8009228:	d900      	bls.n	800922c <CheckAttachedButtons+0xec>
 800922a:	e07f      	b.n	800932c <CheckAttachedButtons+0x1ec>
 800922c:	6833      	ldr	r3, [r6, #0]
			if(pressCounter[i] < BOS.buttons.debounce){
 800922e:	9a02      	ldr	r2, [sp, #8]
 8009230:	8812      	ldrh	r2, [r2, #0]
 8009232:	429a      	cmp	r2, r3
 8009234:	d84b      	bhi.n	80092ce <CheckAttachedButtons+0x18e>
				if(pressCounter[i] == BOS.buttons.debounce){
 8009236:	d103      	bne.n	8009240 <CheckAttachedButtons+0x100>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 8009238:	2707      	movs	r7, #7
					++pressCounter[i];
 800923a:	3301      	adds	r3, #1
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 800923c:	702f      	strb	r7, [r5, #0]
					++pressCounter[i];
 800923e:	6033      	str	r3, [r6, #0]
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8009240:	428a      	cmp	r2, r1
 8009242:	d202      	bcs.n	800924a <CheckAttachedButtons+0x10a>
					releaseCounter[i] =0;
 8009244:	2100      	movs	r1, #0
 8009246:	4647      	mov	r7, r8
 8009248:	6039      	str	r1, [r7, #0]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 800924a:	9802      	ldr	r0, [sp, #8]
 800924c:	8840      	ldrh	r0, [r0, #2]
 800924e:	9005      	str	r0, [sp, #20]
 8009250:	4298      	cmp	r0, r3
 8009252:	d204      	bcs.n	800925e <CheckAttachedButtons+0x11e>
 8009254:	27fa      	movs	r7, #250	; 0xfa
 8009256:	007f      	lsls	r7, r7, #1
 8009258:	42bb      	cmp	r3, r7
 800925a:	d200      	bcs.n	800925e <CheckAttachedButtons+0x11e>
 800925c:	e119      	b.n	8009492 <CheckAttachedButtons+0x352>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 800925e:	4f88      	ldr	r7, [pc, #544]	; (8009480 <CheckAttachedButtons+0x340>)
 8009260:	46bb      	mov	fp, r7
 8009262:	4f88      	ldr	r7, [pc, #544]	; (8009484 <CheckAttachedButtons+0x344>)
 8009264:	46bc      	mov	ip, r7
 8009266:	449c      	add	ip, r3
 8009268:	45dc      	cmp	ip, fp
 800926a:	d830      	bhi.n	80092ce <CheckAttachedButtons+0x18e>
					if(clicked)
 800926c:	4f82      	ldr	r7, [pc, #520]	; (8009478 <CheckAttachedButtons+0x338>)
 800926e:	46bc      	mov	ip, r7
 8009270:	783f      	ldrb	r7, [r7, #0]
 8009272:	2f00      	cmp	r7, #0
 8009274:	d004      	beq.n	8009280 <CheckAttachedButtons+0x140>
						clicked =0;						// Cannot be a click
 8009276:	2000      	movs	r0, #0
 8009278:	4683      	mov	fp, r0
 800927a:	4660      	mov	r0, ip
 800927c:	465f      	mov	r7, fp
 800927e:	7007      	strb	r7, [r0, #0]
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8009280:	78af      	ldrb	r7, [r5, #2]
 8009282:	46bb      	mov	fp, r7
	t1 *=1000;
 8009284:	4658      	mov	r0, fp
 8009286:	017f      	lsls	r7, r7, #5
 8009288:	1a3f      	subs	r7, r7, r0
 800928a:	00b8      	lsls	r0, r7, #2
 800928c:	4684      	mov	ip, r0
 800928e:	44dc      	add	ip, fp
 8009290:	4660      	mov	r0, ip
 8009292:	00c0      	lsls	r0, r0, #3
	if(pressCounter[port] == t1){
 8009294:	4298      	cmp	r0, r3
 8009296:	d100      	bne.n	800929a <CheckAttachedButtons+0x15a>
 8009298:	e15c      	b.n	8009554 <CheckAttachedButtons+0x414>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 800929a:	78e8      	ldrb	r0, [r5, #3]
 800929c:	4683      	mov	fp, r0
	t2 *=1000;
 800929e:	465f      	mov	r7, fp
 80092a0:	0140      	lsls	r0, r0, #5
 80092a2:	1bc0      	subs	r0, r0, r7
 80092a4:	0080      	lsls	r0, r0, #2
 80092a6:	4684      	mov	ip, r0
 80092a8:	44dc      	add	ip, fp
 80092aa:	4660      	mov	r0, ip
 80092ac:	00c0      	lsls	r0, r0, #3
	else if(pressCounter[port] == t2){
 80092ae:	4298      	cmp	r0, r3
 80092b0:	d100      	bne.n	80092b4 <CheckAttachedButtons+0x174>
 80092b2:	e139      	b.n	8009528 <CheckAttachedButtons+0x3e8>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80092b4:	7928      	ldrb	r0, [r5, #4]
 80092b6:	4683      	mov	fp, r0
	t3 *=1000;
 80092b8:	465f      	mov	r7, fp
 80092ba:	0140      	lsls	r0, r0, #5
 80092bc:	1bc0      	subs	r0, r0, r7
 80092be:	0080      	lsls	r0, r0, #2
 80092c0:	4684      	mov	ip, r0
 80092c2:	44dc      	add	ip, fp
 80092c4:	4660      	mov	r0, ip
 80092c6:	00c0      	lsls	r0, r0, #3
	else if(pressCounter[port] == t3){
 80092c8:	4298      	cmp	r0, r3
 80092ca:	d100      	bne.n	80092ce <CheckAttachedButtons+0x18e>
 80092cc:	e12c      	b.n	8009528 <CheckAttachedButtons+0x3e8>
			if(releaseCounter[i] < BOS.buttons.debounce){
 80092ce:	428a      	cmp	r2, r1
 80092d0:	d81b      	bhi.n	800930a <CheckAttachedButtons+0x1ca>
 80092d2:	9b02      	ldr	r3, [sp, #8]
 80092d4:	885b      	ldrh	r3, [r3, #2]
 80092d6:	9305      	str	r3, [sp, #20]
 80092d8:	6833      	ldr	r3, [r6, #0]
				if(releaseCounter[i] == BOS.buttons.debounce){
 80092da:	428a      	cmp	r2, r1
 80092dc:	d100      	bne.n	80092e0 <CheckAttachedButtons+0x1a0>
 80092de:	e0b8      	b.n	8009452 <CheckAttachedButtons+0x312>
 80092e0:	4641      	mov	r1, r8
 80092e2:	6809      	ldr	r1, [r1, #0]
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d201      	bcs.n	80092ec <CheckAttachedButtons+0x1ac>
					pressCounter[i] =0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	6033      	str	r3, [r6, #0]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 80092ec:	9b05      	ldr	r3, [sp, #20]
 80092ee:	4299      	cmp	r1, r3
 80092f0:	d95a      	bls.n	80093a8 <CheckAttachedButtons+0x268>
 80092f2:	23fa      	movs	r3, #250	; 0xfa
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	4299      	cmp	r1, r3
 80092f8:	d256      	bcs.n	80093a8 <CheckAttachedButtons+0x268>
					if(clicked == 1){
 80092fa:	4b5f      	ldr	r3, [pc, #380]	; (8009478 <CheckAttachedButtons+0x338>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d100      	bne.n	8009304 <CheckAttachedButtons+0x1c4>
 8009302:	e15e      	b.n	80095c2 <CheckAttachedButtons+0x482>
					else if(clicked == 3){
 8009304:	2b03      	cmp	r3, #3
 8009306:	d100      	bne.n	800930a <CheckAttachedButtons+0x1ca>
 8009308:	e146      	b.n	8009598 <CheckAttachedButtons+0x458>
			switch(button[i].state){
 800930a:	782b      	ldrb	r3, [r5, #0]
 800930c:	3b05      	subs	r3, #5
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b09      	cmp	r3, #9
 8009312:	d81e      	bhi.n	8009352 <CheckAttachedButtons+0x212>
 8009314:	4a5c      	ldr	r2, [pc, #368]	; (8009488 <CheckAttachedButtons+0x348>)
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	58d3      	ldr	r3, [r2, r3]
 800931a:	469f      	mov	pc, r3
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 800931c:	464a      	mov	r2, r9
 800931e:	4857      	ldr	r0, [pc, #348]	; (800947c <CheckAttachedButtons+0x33c>)
 8009320:	7812      	ldrb	r2, [r2, #0]
 8009322:	9002      	str	r0, [sp, #8]
 8009324:	7947      	ldrb	r7, [r0, #5]
 8009326:	4297      	cmp	r7, r2
 8009328:	d300      	bcc.n	800932c <CheckAttachedButtons+0x1ec>
 800932a:	e0d4      	b.n	80094d6 <CheckAttachedButtons+0x396>
					clicked =0;
 800932c:	2200      	movs	r2, #0
 800932e:	701a      	strb	r2, [r3, #0]
					dblCounter[i] =0;			// Reset the inter-click counter
 8009330:	464b      	mov	r3, r9
 8009332:	701a      	strb	r2, [r3, #0]
 8009334:	e77a      	b.n	800922c <CheckAttachedButtons+0xec>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 8009336:	4653      	mov	r3, sl
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d109      	bne.n	8009352 <CheckAttachedButtons+0x212>
 800933e:	7a2b      	ldrb	r3, [r5, #8]
 8009340:	2b7f      	cmp	r3, #127	; 0x7f
 8009342:	d906      	bls.n	8009352 <CheckAttachedButtons+0x212>
						delayButtonStateReset = true;
 8009344:	2301      	movs	r3, #1
 8009346:	4652      	mov	r2, sl
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 8009348:	2103      	movs	r1, #3
 800934a:	0020      	movs	r0, r4
						delayButtonStateReset = true;
 800934c:	7013      	strb	r3, [r2, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 800934e:	f7ff fef5 	bl	800913c <buttonReleasedForYCallback>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8009352:	2304      	movs	r3, #4
 8009354:	469c      	mov	ip, r3
 8009356:	3b03      	subs	r3, #3
 8009358:	44e0      	add	r8, ip
 800935a:	469c      	mov	ip, r3
 800935c:	3401      	adds	r4, #1
 800935e:	b2e4      	uxtb	r4, r4
 8009360:	3509      	adds	r5, #9
 8009362:	3604      	adds	r6, #4
 8009364:	44e1      	add	r9, ip
 8009366:	2c07      	cmp	r4, #7
 8009368:	d000      	beq.n	800936c <CheckAttachedButtons+0x22c>
 800936a:	e700      	b.n	800916e <CheckAttachedButtons+0x2e>
}
 800936c:	b00b      	add	sp, #44	; 0x2c
 800936e:	bcf0      	pop	{r4, r5, r6, r7}
 8009370:	46bb      	mov	fp, r7
 8009372:	46b2      	mov	sl, r6
 8009374:	46a9      	mov	r9, r5
 8009376:	46a0      	mov	r8, r4
 8009378:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch(button[i].type){
 800937a:	2b04      	cmp	r3, #4
 800937c:	d000      	beq.n	8009380 <CheckAttachedButtons+0x240>
 800937e:	e732      	b.n	80091e6 <CheckAttachedButtons+0xa6>
					if(connected == GPIO_PIN_SET)
 8009380:	9903      	ldr	r1, [sp, #12]
 8009382:	2901      	cmp	r1, #1
 8009384:	d062      	beq.n	800944c <CheckAttachedButtons+0x30c>
					else if(connected == GPIO_PIN_RESET)
 8009386:	2900      	cmp	r1, #0
 8009388:	d000      	beq.n	800938c <CheckAttachedButtons+0x24c>
 800938a:	e72c      	b.n	80091e6 <CheckAttachedButtons+0xa6>
				if(pressCounter[i] < 0xFFFF)
 800938c:	6833      	ldr	r3, [r6, #0]
 800938e:	4a39      	ldr	r2, [pc, #228]	; (8009474 <CheckAttachedButtons+0x334>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d800      	bhi.n	8009396 <CheckAttachedButtons+0x256>
 8009394:	e12e      	b.n	80095f4 <CheckAttachedButtons+0x4b4>
					pressCounter[i] =0;			// Reset debounce counter
 8009396:	6031      	str	r1, [r6, #0]
			if(state == OPEN || state == OFF){
 8009398:	4643      	mov	r3, r8
						state =ON;
 800939a:	2202      	movs	r2, #2
 800939c:	6819      	ldr	r1, [r3, #0]
 800939e:	9204      	str	r2, [sp, #16]
 80093a0:	4a36      	ldr	r2, [pc, #216]	; (800947c <CheckAttachedButtons+0x33c>)
					pressCounter[i] =0;			// Reset debounce counter
 80093a2:	2300      	movs	r3, #0
 80093a4:	9202      	str	r2, [sp, #8]
 80093a6:	e742      	b.n	800922e <CheckAttachedButtons+0xee>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 80093a8:	000b      	movs	r3, r1
 80093aa:	4a35      	ldr	r2, [pc, #212]	; (8009480 <CheckAttachedButtons+0x340>)
 80093ac:	3bf5      	subs	r3, #245	; 0xf5
 80093ae:	3bff      	subs	r3, #255	; 0xff
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d8aa      	bhi.n	800930a <CheckAttachedButtons+0x1ca>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 80093b4:	7968      	ldrb	r0, [r5, #5]
	t1 *=1000;
 80093b6:	0143      	lsls	r3, r0, #5
 80093b8:	1a1b      	subs	r3, r3, r0
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	181b      	adds	r3, r3, r0
 80093be:	00db      	lsls	r3, r3, #3
	if(releaseCounter[port] == t1){
 80093c0:	428b      	cmp	r3, r1
 80093c2:	d100      	bne.n	80093c6 <CheckAttachedButtons+0x286>
 80093c4:	e08c      	b.n	80094e0 <CheckAttachedButtons+0x3a0>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 80093c6:	79a8      	ldrb	r0, [r5, #6]
	t2 *=1000;
 80093c8:	0143      	lsls	r3, r0, #5
 80093ca:	1a1b      	subs	r3, r3, r0
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	181b      	adds	r3, r3, r0
 80093d0:	00db      	lsls	r3, r3, #3
	else if(releaseCounter[port] == t2){
 80093d2:	428b      	cmp	r3, r1
 80093d4:	d007      	beq.n	80093e6 <CheckAttachedButtons+0x2a6>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 80093d6:	79e8      	ldrb	r0, [r5, #7]
	t3 *=1000;
 80093d8:	0143      	lsls	r3, r0, #5
 80093da:	1a1b      	subs	r3, r3, r0
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	181b      	adds	r3, r3, r0
 80093e0:	00db      	lsls	r3, r3, #3
	else if(releaseCounter[port] == t3){
 80093e2:	428b      	cmp	r3, r1
 80093e4:	d191      	bne.n	800930a <CheckAttachedButtons+0x1ca>
		button[port].state =RELEASED_FOR_Y2_SEC;
 80093e6:	230d      	movs	r3, #13
 80093e8:	702b      	strb	r3, [r5, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 80093ea:	4653      	mov	r3, sl
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1af      	bne.n	8009352 <CheckAttachedButtons+0x212>
 80093f2:	7a2b      	ldrb	r3, [r5, #8]
 80093f4:	065b      	lsls	r3, r3, #25
 80093f6:	d5ac      	bpl.n	8009352 <CheckAttachedButtons+0x212>
						delayButtonStateReset = true;
 80093f8:	2301      	movs	r3, #1
 80093fa:	4652      	mov	r2, sl
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 80093fc:	2102      	movs	r1, #2
 80093fe:	0020      	movs	r0, r4
						delayButtonStateReset = true;
 8009400:	7013      	strb	r3, [r2, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8009402:	f7ff fe9b 	bl	800913c <buttonReleasedForYCallback>
 8009406:	e7a4      	b.n	8009352 <CheckAttachedButtons+0x212>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 8009408:	ab04      	add	r3, sp, #16
 800940a:	8999      	ldrh	r1, [r3, #12]
 800940c:	2201      	movs	r2, #1
 800940e:	9808      	ldr	r0, [sp, #32]
 8009410:	f009 fb24 	bl	8012a5c <HAL_GPIO_WritePin>
				Delay_us(10);
 8009414:	200a      	movs	r0, #10
 8009416:	f004 ff53 	bl	800e2c0 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 800941a:	8839      	ldrh	r1, [r7, #0]
 800941c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800941e:	f009 fb17 	bl	8012a50 <HAL_GPIO_ReadPin>
 8009422:	9003      	str	r0, [sp, #12]
 8009424:	e6c7      	b.n	80091b6 <CheckAttachedButtons+0x76>
				if(pressCounter[i] < 0xFFFF)
 8009426:	6833      	ldr	r3, [r6, #0]
 8009428:	4a12      	ldr	r2, [pc, #72]	; (8009474 <CheckAttachedButtons+0x334>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d84b      	bhi.n	80094c6 <CheckAttachedButtons+0x386>
					++pressCounter[i];			// Advance the debounce counter
 800942e:	4642      	mov	r2, r8
 8009430:	3301      	adds	r3, #1
 8009432:	6033      	str	r3, [r6, #0]
			if(state == OPEN || state == OFF){
 8009434:	6811      	ldr	r1, [r2, #0]
 8009436:	4a11      	ldr	r2, [pc, #68]	; (800947c <CheckAttachedButtons+0x33c>)
 8009438:	9202      	str	r2, [sp, #8]
 800943a:	e6f8      	b.n	800922e <CheckAttachedButtons+0xee>
					if(connected == GPIO_PIN_SET)
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d100      	bne.n	8009444 <CheckAttachedButtons+0x304>
 8009442:	e0d3      	b.n	80095ec <CheckAttachedButtons+0x4ac>
					else if(connected == GPIO_PIN_RESET)
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d000      	beq.n	800944c <CheckAttachedButtons+0x30c>
 800944a:	e6cc      	b.n	80091e6 <CheckAttachedButtons+0xa6>
 800944c:	2301      	movs	r3, #1
 800944e:	9304      	str	r3, [sp, #16]
 8009450:	e6d6      	b.n	8009200 <CheckAttachedButtons+0xc0>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8009452:	2108      	movs	r1, #8
					++releaseCounter[i];
 8009454:	4640      	mov	r0, r8
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8009456:	7029      	strb	r1, [r5, #0]
					++releaseCounter[i];
 8009458:	1c51      	adds	r1, r2, #1
 800945a:	6001      	str	r1, [r0, #0]
 800945c:	e742      	b.n	80092e4 <CheckAttachedButtons+0x1a4>
 800945e:	46c0      	nop			; (mov r8, r8)
 8009460:	20001624 	.word	0x20001624
 8009464:	200015f8 	.word	0x200015f8
 8009468:	200015ff 	.word	0x200015ff
 800946c:	200015b4 	.word	0x200015b4
 8009470:	20001608 	.word	0x20001608
 8009474:	0000fffe 	.word	0x0000fffe
 8009478:	200015f3 	.word	0x200015f3
 800947c:	20006ab0 	.word	0x20006ab0
 8009480:	0000fe0a 	.word	0x0000fe0a
 8009484:	fffffe0c 	.word	0xfffffe0c
 8009488:	0801dc40 	.word	0x0801dc40
 800948c:	2303      	movs	r3, #3
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	e6b6      	b.n	8009200 <CheckAttachedButtons+0xc0>
					if(clicked == 0)
 8009492:	4b6e      	ldr	r3, [pc, #440]	; (800964c <CheckAttachedButtons+0x50c>)
 8009494:	781f      	ldrb	r7, [r3, #0]
 8009496:	2f00      	cmp	r7, #0
 8009498:	d100      	bne.n	800949c <CheckAttachedButtons+0x35c>
 800949a:	e0cb      	b.n	8009634 <CheckAttachedButtons+0x4f4>
					else if(clicked == 2){
 800949c:	2f02      	cmp	r7, #2
 800949e:	d000      	beq.n	80094a2 <CheckAttachedButtons+0x362>
 80094a0:	e715      	b.n	80092ce <CheckAttachedButtons+0x18e>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 80094a2:	4648      	mov	r0, r9
 80094a4:	7807      	ldrb	r7, [r0, #0]
 80094a6:	9802      	ldr	r0, [sp, #8]
 80094a8:	7900      	ldrb	r0, [r0, #4]
 80094aa:	42b8      	cmp	r0, r7
 80094ac:	d300      	bcc.n	80094b0 <CheckAttachedButtons+0x370>
 80094ae:	e70e      	b.n	80092ce <CheckAttachedButtons+0x18e>
 80094b0:	9802      	ldr	r0, [sp, #8]
 80094b2:	7940      	ldrb	r0, [r0, #5]
 80094b4:	42b8      	cmp	r0, r7
 80094b6:	d800      	bhi.n	80094ba <CheckAttachedButtons+0x37a>
 80094b8:	e709      	b.n	80092ce <CheckAttachedButtons+0x18e>
							clicked =3;	// Record a possible double click
 80094ba:	2703      	movs	r7, #3
							dblCounter[i] =0;	// Reset the inter-click counter
 80094bc:	4648      	mov	r0, r9
							clicked =3;	// Record a possible double click
 80094be:	701f      	strb	r7, [r3, #0]
							dblCounter[i] =0;	// Reset the inter-click counter
 80094c0:	2300      	movs	r3, #0
 80094c2:	7003      	strb	r3, [r0, #0]
 80094c4:	e703      	b.n	80092ce <CheckAttachedButtons+0x18e>
					pressCounter[i] =0;			// Reset debounce counter
 80094c6:	2300      	movs	r3, #0
 80094c8:	6033      	str	r3, [r6, #0]
			if(state == OPEN || state == OFF){
 80094ca:	4643      	mov	r3, r8
 80094cc:	4a60      	ldr	r2, [pc, #384]	; (8009650 <CheckAttachedButtons+0x510>)
 80094ce:	6819      	ldr	r1, [r3, #0]
					pressCounter[i] =0;			// Reset debounce counter
 80094d0:	2300      	movs	r3, #0
 80094d2:	9202      	str	r2, [sp, #8]
 80094d4:	e6ab      	b.n	800922e <CheckAttachedButtons+0xee>
					++dblCounter[i];
 80094d6:	464b      	mov	r3, r9
 80094d8:	3201      	adds	r2, #1
 80094da:	701a      	strb	r2, [r3, #0]
 80094dc:	6833      	ldr	r3, [r6, #0]
 80094de:	e6a6      	b.n	800922e <CheckAttachedButtons+0xee>
		button[port].state =RELEASED_FOR_Y1_SEC;
 80094e0:	230c      	movs	r3, #12
 80094e2:	702b      	strb	r3, [r5, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 80094e4:	4653      	mov	r3, sl
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d000      	beq.n	80094ee <CheckAttachedButtons+0x3ae>
 80094ec:	e731      	b.n	8009352 <CheckAttachedButtons+0x212>
 80094ee:	7a2b      	ldrb	r3, [r5, #8]
 80094f0:	069b      	lsls	r3, r3, #26
 80094f2:	d400      	bmi.n	80094f6 <CheckAttachedButtons+0x3b6>
 80094f4:	e72d      	b.n	8009352 <CheckAttachedButtons+0x212>
						delayButtonStateReset = true;
 80094f6:	2301      	movs	r3, #1
 80094f8:	4652      	mov	r2, sl
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 80094fa:	2101      	movs	r1, #1
 80094fc:	0020      	movs	r0, r4
						delayButtonStateReset = true;
 80094fe:	7013      	strb	r3, [r2, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 8009500:	f7ff fe1c 	bl	800913c <buttonReleasedForYCallback>
 8009504:	e725      	b.n	8009352 <CheckAttachedButtons+0x212>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8009506:	4653      	mov	r3, sl
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d000      	beq.n	8009510 <CheckAttachedButtons+0x3d0>
 800950e:	e720      	b.n	8009352 <CheckAttachedButtons+0x212>
 8009510:	7a2b      	ldrb	r3, [r5, #8]
 8009512:	06db      	lsls	r3, r3, #27
 8009514:	d400      	bmi.n	8009518 <CheckAttachedButtons+0x3d8>
 8009516:	e71c      	b.n	8009352 <CheckAttachedButtons+0x212>
						delayButtonStateReset = true;
 8009518:	2301      	movs	r3, #1
 800951a:	4652      	mov	r2, sl
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 800951c:	2103      	movs	r1, #3
 800951e:	0020      	movs	r0, r4
						delayButtonStateReset = true;
 8009520:	7013      	strb	r3, [r2, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8009522:	f7ff fe09 	bl	8009138 <buttonPressedForXCallback>
 8009526:	e714      	b.n	8009352 <CheckAttachedButtons+0x212>
		button[port].state =PRESSED_FOR_X2_SEC;
 8009528:	200a      	movs	r0, #10
 800952a:	7028      	strb	r0, [r5, #0]
			if(releaseCounter[i] < BOS.buttons.debounce){
 800952c:	428a      	cmp	r2, r1
 800952e:	d800      	bhi.n	8009532 <CheckAttachedButtons+0x3f2>
 8009530:	e6d3      	b.n	80092da <CheckAttachedButtons+0x19a>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 8009532:	4653      	mov	r3, sl
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d000      	beq.n	800953c <CheckAttachedButtons+0x3fc>
 800953a:	e70a      	b.n	8009352 <CheckAttachedButtons+0x212>
 800953c:	7a2b      	ldrb	r3, [r5, #8]
 800953e:	071b      	lsls	r3, r3, #28
 8009540:	d400      	bmi.n	8009544 <CheckAttachedButtons+0x404>
 8009542:	e706      	b.n	8009352 <CheckAttachedButtons+0x212>
						delayButtonStateReset = true;
 8009544:	2301      	movs	r3, #1
 8009546:	4652      	mov	r2, sl
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 8009548:	2102      	movs	r1, #2
 800954a:	0020      	movs	r0, r4
						delayButtonStateReset = true;
 800954c:	7013      	strb	r3, [r2, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 800954e:	f7ff fdf3 	bl	8009138 <buttonPressedForXCallback>
 8009552:	e6fe      	b.n	8009352 <CheckAttachedButtons+0x212>
		button[port].state =PRESSED_FOR_X1_SEC;
 8009554:	2009      	movs	r0, #9
 8009556:	7028      	strb	r0, [r5, #0]
			if(releaseCounter[i] < BOS.buttons.debounce){
 8009558:	428a      	cmp	r2, r1
 800955a:	d800      	bhi.n	800955e <CheckAttachedButtons+0x41e>
 800955c:	e6bd      	b.n	80092da <CheckAttachedButtons+0x19a>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 800955e:	4653      	mov	r3, sl
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d000      	beq.n	8009568 <CheckAttachedButtons+0x428>
 8009566:	e6f4      	b.n	8009352 <CheckAttachedButtons+0x212>
 8009568:	7a2b      	ldrb	r3, [r5, #8]
 800956a:	075b      	lsls	r3, r3, #29
 800956c:	d400      	bmi.n	8009570 <CheckAttachedButtons+0x430>
 800956e:	e6f0      	b.n	8009352 <CheckAttachedButtons+0x212>
						delayButtonStateReset = true;
 8009570:	2301      	movs	r3, #1
 8009572:	4652      	mov	r2, sl
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 8009574:	2101      	movs	r1, #1
 8009576:	0020      	movs	r0, r4
						delayButtonStateReset = true;
 8009578:	7013      	strb	r3, [r2, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 800957a:	f7ff fddd 	bl	8009138 <buttonPressedForXCallback>
 800957e:	e6e8      	b.n	8009352 <CheckAttachedButtons+0x212>
					buttonReleasedCallback(i);
 8009580:	0020      	movs	r0, r4
 8009582:	f7ff fdd3 	bl	800912c <buttonReleasedCallback>
					button[i].state =NONE;
 8009586:	2300      	movs	r3, #0
 8009588:	702b      	strb	r3, [r5, #0]
					break;
 800958a:	e6e2      	b.n	8009352 <CheckAttachedButtons+0x212>
					buttonPressedCallback(i);
 800958c:	0020      	movs	r0, r4
 800958e:	f7ff f8e3 	bl	8008758 <buttonPressedCallback>
					button[i].state =NONE;
 8009592:	2300      	movs	r3, #0
 8009594:	702b      	strb	r3, [r5, #0]
					break;
 8009596:	e6dc      	b.n	8009352 <CheckAttachedButtons+0x212>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 8009598:	3303      	adds	r3, #3
 800959a:	702b      	strb	r3, [r5, #0]
						clicked =0;			// Prepare for a single click
 800959c:	2300      	movs	r3, #0
 800959e:	4a2b      	ldr	r2, [pc, #172]	; (800964c <CheckAttachedButtons+0x50c>)
 80095a0:	7013      	strb	r3, [r2, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 80095a2:	4653      	mov	r3, sl
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d000      	beq.n	80095ac <CheckAttachedButtons+0x46c>
 80095aa:	e6d2      	b.n	8009352 <CheckAttachedButtons+0x212>
 80095ac:	7a2b      	ldrb	r3, [r5, #8]
 80095ae:	079b      	lsls	r3, r3, #30
 80095b0:	d400      	bmi.n	80095b4 <CheckAttachedButtons+0x474>
 80095b2:	e6ce      	b.n	8009352 <CheckAttachedButtons+0x212>
						delayButtonStateReset = true;
 80095b4:	2301      	movs	r3, #1
 80095b6:	4652      	mov	r2, sl
						buttonDblClickedCallback(i);
 80095b8:	0020      	movs	r0, r4
						delayButtonStateReset = true;
 80095ba:	7013      	strb	r3, [r2, #0]
						buttonDblClickedCallback(i);
 80095bc:	f7ff fdba 	bl	8009134 <buttonDblClickedCallback>
 80095c0:	e6c7      	b.n	8009352 <CheckAttachedButtons+0x212>
						button[i].state =CLICKED;	// Record a single button click event
 80095c2:	3304      	adds	r3, #4
						clicked =2;			// Prepare for a double click
 80095c4:	4a21      	ldr	r2, [pc, #132]	; (800964c <CheckAttachedButtons+0x50c>)
						button[i].state =CLICKED;	// Record a single button click event
 80095c6:	702b      	strb	r3, [r5, #0]
						clicked =2;			// Prepare for a double click
 80095c8:	3b03      	subs	r3, #3
 80095ca:	7013      	strb	r3, [r2, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 80095cc:	4653      	mov	r3, sl
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d000      	beq.n	80095d6 <CheckAttachedButtons+0x496>
 80095d4:	e6bd      	b.n	8009352 <CheckAttachedButtons+0x212>
 80095d6:	7a2a      	ldrb	r2, [r5, #8]
 80095d8:	3301      	adds	r3, #1
 80095da:	4213      	tst	r3, r2
 80095dc:	d100      	bne.n	80095e0 <CheckAttachedButtons+0x4a0>
 80095de:	e6b8      	b.n	8009352 <CheckAttachedButtons+0x212>
						delayButtonStateReset = true;
 80095e0:	4652      	mov	r2, sl
						buttonClickedCallback(i);
 80095e2:	0020      	movs	r0, r4
						delayButtonStateReset = true;
 80095e4:	7013      	strb	r3, [r2, #0]
						buttonClickedCallback(i);
 80095e6:	f7ff fda3 	bl	8009130 <buttonClickedCallback>
 80095ea:	e6b2      	b.n	8009352 <CheckAttachedButtons+0x212>
				if(pressCounter[i] < 0xFFFF)
 80095ec:	6833      	ldr	r3, [r6, #0]
 80095ee:	4a19      	ldr	r2, [pc, #100]	; (8009654 <CheckAttachedButtons+0x514>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d822      	bhi.n	800963a <CheckAttachedButtons+0x4fa>
						state =ON;
 80095f4:	2202      	movs	r2, #2
 80095f6:	9204      	str	r2, [sp, #16]
					++pressCounter[i];			// Advance the debounce counter
 80095f8:	4642      	mov	r2, r8
 80095fa:	3301      	adds	r3, #1
 80095fc:	6033      	str	r3, [r6, #0]
			if(state == OPEN || state == OFF){
 80095fe:	6811      	ldr	r1, [r2, #0]
 8009600:	4a13      	ldr	r2, [pc, #76]	; (8009650 <CheckAttachedButtons+0x510>)
 8009602:	9202      	str	r2, [sp, #8]
 8009604:	e613      	b.n	800922e <CheckAttachedButtons+0xee>
				if(pressCounter[i] < 0xFFFF)
 8009606:	6833      	ldr	r3, [r6, #0]
 8009608:	4a12      	ldr	r2, [pc, #72]	; (8009654 <CheckAttachedButtons+0x514>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d808      	bhi.n	8009620 <CheckAttachedButtons+0x4e0>
					++pressCounter[i];			// Advance the debounce counter
 800960e:	4642      	mov	r2, r8
 8009610:	3301      	adds	r3, #1
 8009612:	6033      	str	r3, [r6, #0]
			if(state == OPEN || state == OFF){
 8009614:	6811      	ldr	r1, [r2, #0]
					++pressCounter[i];			// Advance the debounce counter
 8009616:	2204      	movs	r2, #4
 8009618:	9204      	str	r2, [sp, #16]
 800961a:	4a0d      	ldr	r2, [pc, #52]	; (8009650 <CheckAttachedButtons+0x510>)
 800961c:	9202      	str	r2, [sp, #8]
 800961e:	e606      	b.n	800922e <CheckAttachedButtons+0xee>
					pressCounter[i] =0;			// Reset debounce counter
 8009620:	2300      	movs	r3, #0
						state =CLOSED;
 8009622:	2204      	movs	r2, #4
					pressCounter[i] =0;			// Reset debounce counter
 8009624:	6033      	str	r3, [r6, #0]
			if(state == OPEN || state == OFF){
 8009626:	4643      	mov	r3, r8
 8009628:	6819      	ldr	r1, [r3, #0]
						state =CLOSED;
 800962a:	9204      	str	r2, [sp, #16]
 800962c:	4a08      	ldr	r2, [pc, #32]	; (8009650 <CheckAttachedButtons+0x510>)
					pressCounter[i] =0;			// Reset debounce counter
 800962e:	2300      	movs	r3, #0
 8009630:	9202      	str	r2, [sp, #8]
 8009632:	e5fc      	b.n	800922e <CheckAttachedButtons+0xee>
						clicked =1;		// Record a possible single click
 8009634:	3701      	adds	r7, #1
 8009636:	701f      	strb	r7, [r3, #0]
 8009638:	e649      	b.n	80092ce <CheckAttachedButtons+0x18e>
					pressCounter[i] =0;			// Reset debounce counter
 800963a:	2300      	movs	r3, #0
 800963c:	6033      	str	r3, [r6, #0]
			if(state == OPEN || state == OFF){
 800963e:	e6ab      	b.n	8009398 <CheckAttachedButtons+0x258>
 8009640:	4642      	mov	r2, r8
 8009642:	6811      	ldr	r1, [r2, #0]
 8009644:	4a02      	ldr	r2, [pc, #8]	; (8009650 <CheckAttachedButtons+0x510>)
 8009646:	6833      	ldr	r3, [r6, #0]
 8009648:	9202      	str	r2, [sp, #8]
 800964a:	e5f0      	b.n	800922e <CheckAttachedButtons+0xee>
 800964c:	200015f3 	.word	0x200015f3
 8009650:	20006ab0 	.word	0x20006ab0
 8009654:	0000fffe 	.word	0x0000fffe

08009658 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009658:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 800965a:	f007 fbad 	bl	8010db8 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800965e:	b2c4      	uxtb	r4, r0
 8009660:	0020      	movs	r0, r4
 8009662:	f7fe fb39 	bl	8007cd8 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8009666:	0020      	movs	r0, r4
 8009668:	f7fe fb64 	bl	8007d34 <SwitchStreamDMAToMsg>
}
 800966c:	bd10      	pop	{r4, pc}
 800966e:	46c0      	nop			; (mov r8, r8)

08009670 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8009670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009672:	46ce      	mov	lr, r9
 8009674:	4647      	mov	r7, r8
 8009676:	b580      	push	{r7, lr}
 8009678:	b085      	sub	sp, #20
 800967a:	0004      	movs	r4, r0
 800967c:	0018      	movs	r0, r3
 800967e:	466b      	mov	r3, sp
 8009680:	73d8      	strb	r0, [r3, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8009682:	ab0c      	add	r3, sp, #48	; 0x30
 8009684:	781b      	ldrb	r3, [r3, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8009686:	000e      	movs	r6, r1
 8009688:	0015      	movs	r5, r2
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800968a:	4298      	cmp	r0, r3
 800968c:	d100      	bne.n	8009690 <SetupDMAStreams+0x20>
 800968e:	e091      	b.n	80097b4 <SetupDMAStreams+0x144>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8009690:	2800      	cmp	r0, #0
 8009692:	d00f      	beq.n	80096b4 <SetupDMAStreams+0x44>
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00d      	beq.n	80096b4 <SetupDMAStreams+0x44>
	if(direction == FORWARD){
 8009698:	2c00      	cmp	r4, #0
 800969a:	d00d      	beq.n	80096b8 <SetupDMAStreams+0x48>
	else if(direction == BACKWARD){
 800969c:	2c01      	cmp	r4, #1
 800969e:	d100      	bne.n	80096a2 <SetupDMAStreams+0x32>
 80096a0:	e08f      	b.n	80097c2 <SetupDMAStreams+0x152>
		return BOS_ERR_WrongParam;
 80096a2:	2767      	movs	r7, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 80096a4:	2c02      	cmp	r4, #2
 80096a6:	d03d      	beq.n	8009724 <SetupDMAStreams+0xb4>
}
 80096a8:	0038      	movs	r0, r7
 80096aa:	b005      	add	sp, #20
 80096ac:	bcc0      	pop	{r6, r7}
 80096ae:	46b9      	mov	r9, r7
 80096b0:	46b0      	mov	r8, r6
 80096b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 80096b4:	2767      	movs	r7, #103	; 0x67
 80096b6:	e7f7      	b.n	80096a8 <SetupDMAStreams+0x38>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80096b8:	f005 f852 	bl	800e760 <GetUart>
 80096bc:	ab0c      	add	r3, sp, #48	; 0x30
 80096be:	0004      	movs	r4, r0
 80096c0:	7818      	ldrb	r0, [r3, #0]
 80096c2:	f005 f84d 	bl	800e760 <GetUart>
 80096c6:	2201      	movs	r2, #1
 80096c8:	0001      	movs	r1, r0
 80096ca:	0020      	movs	r0, r4
 80096cc:	f7fe fb72 	bl	8007db4 <StartDMAstream>
 80096d0:	2817      	cmp	r0, #23
 80096d2:	d074      	beq.n	80097be <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80096d4:	21fa      	movs	r1, #250	; 0xfa
 80096d6:	0168      	lsls	r0, r5, #5
 80096d8:	1b40      	subs	r0, r0, r5
 80096da:	0080      	lsls	r0, r0, #2
 80096dc:	1940      	adds	r0, r0, r5
 80096de:	0089      	lsls	r1, r1, #2
 80096e0:	00c0      	lsls	r0, r0, #3
 80096e2:	f7f6 fd35 	bl	8000150 <__udivsi3>
 80096e6:	4b45      	ldr	r3, [pc, #276]	; (80097fc <SetupDMAStreams+0x18c>)
 80096e8:	0001      	movs	r1, r0
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	230f      	movs	r3, #15
 80096ee:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80096f0:	2200      	movs	r2, #0
 80096f2:	4843      	ldr	r0, [pc, #268]	; (8009800 <SetupDMAStreams+0x190>)
 80096f4:	f007 fa02 	bl	8010afc <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80096f8:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80096fa:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80096fc:	7bdb      	ldrb	r3, [r3, #15]
 80096fe:	4a41      	ldr	r2, [pc, #260]	; (8009804 <SetupDMAStreams+0x194>)
 8009700:	3b01      	subs	r3, #1
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8009706:	2700      	movs	r7, #0
	if(xTimerStream != NULL)
 8009708:	2c00      	cmp	r4, #0
 800970a:	d0cd      	beq.n	80096a8 <SetupDMAStreams+0x38>
		xTimerStart(xTimerStream,portMAX_DELAY);
 800970c:	f006 fca4 	bl	8010058 <xTaskGetTickCount>
 8009710:	2301      	movs	r3, #1
 8009712:	425b      	negs	r3, r3
 8009714:	0002      	movs	r2, r0
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	2101      	movs	r1, #1
 800971a:	2300      	movs	r3, #0
 800971c:	0020      	movs	r0, r4
 800971e:	f007 fa0d 	bl	8010b3c <xTimerGenericCommand>
 8009722:	e7c1      	b.n	80096a8 <SetupDMAStreams+0x38>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009724:	f005 f81c 	bl	800e760 <GetUart>
 8009728:	ab0c      	add	r3, sp, #48	; 0x30
 800972a:	0004      	movs	r4, r0
 800972c:	7818      	ldrb	r0, [r3, #0]
 800972e:	f005 f817 	bl	800e760 <GetUart>
 8009732:	2201      	movs	r2, #1
 8009734:	0001      	movs	r1, r0
 8009736:	0020      	movs	r0, r4
 8009738:	f7fe fb3c 	bl	8007db4 <StartDMAstream>
 800973c:	2817      	cmp	r0, #23
 800973e:	d03e      	beq.n	80097be <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009740:	21fa      	movs	r1, #250	; 0xfa
 8009742:	0168      	lsls	r0, r5, #5
 8009744:	1b40      	subs	r0, r0, r5
 8009746:	0080      	lsls	r0, r0, #2
 8009748:	1940      	adds	r0, r0, r5
 800974a:	0089      	lsls	r1, r1, #2
 800974c:	00c0      	lsls	r0, r0, #3
 800974e:	f7f6 fcff 	bl	8000150 <__udivsi3>
 8009752:	4b2a      	ldr	r3, [pc, #168]	; (80097fc <SetupDMAStreams+0x18c>)
 8009754:	4f2a      	ldr	r7, [pc, #168]	; (8009800 <SetupDMAStreams+0x190>)
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	4698      	mov	r8, r3
 800975a:	230f      	movs	r3, #15
 800975c:	0001      	movs	r1, r0
 800975e:	2200      	movs	r2, #0
 8009760:	446b      	add	r3, sp
 8009762:	0004      	movs	r4, r0
 8009764:	0038      	movs	r0, r7
 8009766:	f007 f9c9 	bl	8010afc <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 800976a:	466b      	mov	r3, sp
 800976c:	7bdb      	ldrb	r3, [r3, #15]
 800976e:	4d25      	ldr	r5, [pc, #148]	; (8009804 <SetupDMAStreams+0x194>)
 8009770:	3b01      	subs	r3, #1
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	515e      	str	r6, [r3, r5]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009776:	ab0c      	add	r3, sp, #48	; 0x30
 8009778:	7818      	ldrb	r0, [r3, #0]
 800977a:	f004 fff1 	bl	800e760 <GetUart>
 800977e:	466b      	mov	r3, sp
 8009780:	4681      	mov	r9, r0
 8009782:	7bd8      	ldrb	r0, [r3, #15]
 8009784:	f004 ffec 	bl	800e760 <GetUart>
 8009788:	2201      	movs	r2, #1
 800978a:	0001      	movs	r1, r0
 800978c:	4648      	mov	r0, r9
 800978e:	f7fe fb11 	bl	8007db4 <StartDMAstream>
 8009792:	2817      	cmp	r0, #23
 8009794:	d013      	beq.n	80097be <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009796:	4643      	mov	r3, r8
 8009798:	0021      	movs	r1, r4
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	2200      	movs	r2, #0
 800979e:	ab0c      	add	r3, sp, #48	; 0x30
 80097a0:	0038      	movs	r0, r7
 80097a2:	f007 f9ab 	bl	8010afc <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 80097a6:	ab0c      	add	r3, sp, #48	; 0x30
 80097a8:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80097aa:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 80097ac:	3b01      	subs	r3, #1
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	515e      	str	r6, [r3, r5]
 80097b2:	e7a8      	b.n	8009706 <SetupDMAStreams+0x96>
		portStatus[src] =STREAM;
 80097b4:	2202      	movs	r2, #2
 80097b6:	4b14      	ldr	r3, [pc, #80]	; (8009808 <SetupDMAStreams+0x198>)
		return BOS_ERR_WrongParam;
 80097b8:	2767      	movs	r7, #103	; 0x67
		portStatus[src] =STREAM;
 80097ba:	541a      	strb	r2, [r3, r0]
		return BOS_ERR_WrongParam;
 80097bc:	e774      	b.n	80096a8 <SetupDMAStreams+0x38>
			return BOS_ERR_PORT_BUSY;
 80097be:	2717      	movs	r7, #23
 80097c0:	e772      	b.n	80096a8 <SetupDMAStreams+0x38>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80097c2:	0018      	movs	r0, r3
 80097c4:	f004 ffcc 	bl	800e760 <GetUart>
 80097c8:	466b      	mov	r3, sp
 80097ca:	0004      	movs	r4, r0
 80097cc:	7bd8      	ldrb	r0, [r3, #15]
 80097ce:	f004 ffc7 	bl	800e760 <GetUart>
 80097d2:	2201      	movs	r2, #1
 80097d4:	0001      	movs	r1, r0
 80097d6:	0020      	movs	r0, r4
 80097d8:	f7fe faec 	bl	8007db4 <StartDMAstream>
 80097dc:	2817      	cmp	r0, #23
 80097de:	d0ee      	beq.n	80097be <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80097e0:	21fa      	movs	r1, #250	; 0xfa
 80097e2:	0168      	lsls	r0, r5, #5
 80097e4:	1b40      	subs	r0, r0, r5
 80097e6:	0080      	lsls	r0, r0, #2
 80097e8:	1940      	adds	r0, r0, r5
 80097ea:	0089      	lsls	r1, r1, #2
 80097ec:	00c0      	lsls	r0, r0, #3
 80097ee:	f7f6 fcaf 	bl	8000150 <__udivsi3>
 80097f2:	4b02      	ldr	r3, [pc, #8]	; (80097fc <SetupDMAStreams+0x18c>)
 80097f4:	0001      	movs	r1, r0
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	ab0c      	add	r3, sp, #48	; 0x30
 80097fa:	e779      	b.n	80096f0 <SetupDMAStreams+0x80>
 80097fc:	08009659 	.word	0x08009659
 8009800:	0801dc68 	.word	0x0801dc68
 8009804:	20001558 	.word	0x20001558
 8009808:	20001190 	.word	0x20001190

0800980c <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 800980c:	b510      	push	{r4, lr}
 800980e:	2806      	cmp	r0, #6
 8009810:	d80a      	bhi.n	8009828 <NotifyMessagingTask+0x1c>
 8009812:	4b0b      	ldr	r3, [pc, #44]	; (8009840 <NotifyMessagingTask+0x34>)
 8009814:	0080      	lsls	r0, r0, #2
 8009816:	581b      	ldr	r3, [r3, r0]
 8009818:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P6
		case P6:
			xTaskNotifyGive(P6MsgTaskHandle)
 800981a:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <NotifyMessagingTask+0x38>)
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	2202      	movs	r2, #2
 8009820:	2300      	movs	r3, #0
 8009822:	2100      	movs	r1, #0
 8009824:	f007 f89c 	bl	8010960 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009828:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 800982a:	4b07      	ldr	r3, [pc, #28]	; (8009848 <NotifyMessagingTask+0x3c>)
 800982c:	e7f6      	b.n	800981c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 800982e:	4b07      	ldr	r3, [pc, #28]	; (800984c <NotifyMessagingTask+0x40>)
 8009830:	e7f4      	b.n	800981c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009832:	4b07      	ldr	r3, [pc, #28]	; (8009850 <NotifyMessagingTask+0x44>)
 8009834:	e7f2      	b.n	800981c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8009836:	4b07      	ldr	r3, [pc, #28]	; (8009854 <NotifyMessagingTask+0x48>)
 8009838:	e7f0      	b.n	800981c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P5MsgTaskHandle)
 800983a:	4b07      	ldr	r3, [pc, #28]	; (8009858 <NotifyMessagingTask+0x4c>)
 800983c:	e7ee      	b.n	800981c <NotifyMessagingTask+0x10>
 800983e:	46c0      	nop			; (mov r8, r8)
 8009840:	0801dc74 	.word	0x0801dc74
 8009844:	2000158c 	.word	0x2000158c
 8009848:	20001578 	.word	0x20001578
 800984c:	2000157c 	.word	0x2000157c
 8009850:	20001580 	.word	0x20001580
 8009854:	20001584 	.word	0x20001584
 8009858:	20001588 	.word	0x20001588

0800985c <SendMessageFromPort>:
 6   !0        0					!0							Either single-cast message with myID as source module OR (if code == 0)
 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7   !0        !0				0								Not allowed.
 8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800985c:	b530      	push	{r4, r5, lr}
 800985e:	b083      	sub	sp, #12
 8009860:	ac06      	add	r4, sp, #24
 8009862:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009864:	0004      	movs	r4, r0
 8009866:	4314      	orrs	r4, r2
 8009868:	d00c      	beq.n	8009884 <SendMessageFromPort+0x28>
 800986a:	2800      	cmp	r0, #0
 800986c:	d008      	beq.n	8009880 <SendMessageFromPort+0x24>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 800986e:	2900      	cmp	r1, #0
 8009870:	d001      	beq.n	8009876 <SendMessageFromPort+0x1a>
 8009872:	2a00      	cmp	r2, #0
 8009874:	d006      	beq.n	8009884 <SendMessageFromPort+0x28>
 8009876:	9500      	str	r5, [sp, #0]
 8009878:	f000 f806 	bl	8009888 <SendMessageFromPort.part.0>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 800987c:	b003      	add	sp, #12
 800987e:	bd30      	pop	{r4, r5, pc}
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009880:	2afd      	cmp	r2, #253	; 0xfd
 8009882:	d8f8      	bhi.n	8009876 <SendMessageFromPort+0x1a>
		return BOS_ERR_WrongParam;
 8009884:	2067      	movs	r0, #103	; 0x67
 8009886:	e7f9      	b.n	800987c <SendMessageFromPort+0x20>

08009888 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800988a:	46de      	mov	lr, fp
 800988c:	464e      	mov	r6, r9
 800988e:	4645      	mov	r5, r8
 8009890:	4657      	mov	r7, sl
 8009892:	b5e0      	push	{r5, r6, r7, lr}
 8009894:	b087      	sub	sp, #28
 8009896:	4680      	mov	r8, r0
 8009898:	9004      	str	r0, [sp, #16]
 800989a:	001e      	movs	r6, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 800989c:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800989e:	ab10      	add	r3, sp, #64	; 0x40
 80098a0:	000d      	movs	r5, r1
 80098a2:	881f      	ldrh	r7, [r3, #0]
 80098a4:	4691      	mov	r9, r2
 80098a6:	9203      	str	r2, [sp, #12]
	TaskPriority =uxTaskPriorityGet( NULL);
 80098a8:	f006 fb3e 	bl	800ff28 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80098ac:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 80098ae:	9005      	str	r0, [sp, #20]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80098b0:	2000      	movs	r0, #0
 80098b2:	f006 fb49 	bl	800ff48 <vTaskPrioritySet>
	message[0] ='H';
 80098b6:	2348      	movs	r3, #72	; 0x48
 80098b8:	4cb3      	ldr	r4, [pc, #716]	; (8009b88 <SendMessageFromPort.part.0+0x300>)
 80098ba:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 80098bc:	3312      	adds	r3, #18
 80098be:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80098c0:	4643      	mov	r3, r8
 80098c2:	432b      	orrs	r3, r5
 80098c4:	d159      	bne.n	800997a <SendMessageFromPort.part.0+0xf2>
 80098c6:	464b      	mov	r3, r9
 80098c8:	2bfd      	cmp	r3, #253	; 0xfd
 80098ca:	d800      	bhi.n	80098ce <SendMessageFromPort.part.0+0x46>
 80098cc:	e123      	b.n	8009b16 <SendMessageFromPort.part.0+0x28e>
		length =messageLength[numberOfParams - 1];
 80098ce:	4aaf      	ldr	r2, [pc, #700]	; (8009b8c <SendMessageFromPort.part.0+0x304>)
 80098d0:	1e7b      	subs	r3, r7, #1
 80098d2:	5cd2      	ldrb	r2, [r2, r3]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80098d4:	00d9      	lsls	r1, r3, #3
		length =messageLength[numberOfParams - 1];
 80098d6:	4690      	mov	r8, r2
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80098d8:	4fad      	ldr	r7, [pc, #692]	; (8009b90 <SendMessageFromPort.part.0+0x308>)
 80098da:	1ac9      	subs	r1, r1, r3
 80098dc:	4bad      	ldr	r3, [pc, #692]	; (8009b94 <SendMessageFromPort.part.0+0x30c>)
 80098de:	00c9      	lsls	r1, r1, #3
 80098e0:	18c9      	adds	r1, r1, r3
 80098e2:	0038      	movs	r0, r7
 80098e4:	f00b fb8e 	bl	8015004 <memcpy>
	message[2] =length;
 80098e8:	4642      	mov	r2, r8
 80098ea:	1efb      	subs	r3, r7, #3
 80098ec:	4699      	mov	r9, r3
 80098ee:	709a      	strb	r2, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 80098f0:	2303      	movs	r3, #3
 80098f2:	4443      	add	r3, r8
 80098f4:	469b      	mov	fp, r3
 80098f6:	4ba8      	ldr	r3, [pc, #672]	; (8009b98 <SendMessageFromPort.part.0+0x310>)
 80098f8:	465a      	mov	r2, fp
 80098fa:	469a      	mov	sl, r3
 80098fc:	4649      	mov	r1, r9
 80098fe:	0018      	movs	r0, r3
 8009900:	f00b fb80 	bl	8015004 <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009904:	4643      	mov	r3, r8
 8009906:	4659      	mov	r1, fp
 8009908:	4650      	mov	r0, sl
 800990a:	b29f      	uxth	r7, r3
 800990c:	f004 f81e 	bl	800d94c <CalculateCRC8>
 8009910:	464b      	mov	r3, r9
 8009912:	465a      	mov	r2, fp
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009914:	2100      	movs	r1, #0
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009916:	5498      	strb	r0, [r3, r2]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009918:	2238      	movs	r2, #56	; 0x38
 800991a:	4650      	mov	r0, sl
 800991c:	f00b fb7b 	bl	8015016 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009920:	9b03      	ldr	r3, [sp, #12]
 8009922:	2bfd      	cmp	r3, #253	; 0xfd
 8009924:	d800      	bhi.n	8009928 <SendMessageFromPort.part.0+0xa0>
 8009926:	e0e0      	b.n	8009aea <SendMessageFromPort.part.0+0x262>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8009928:	2e00      	cmp	r6, #0
 800992a:	d102      	bne.n	8009932 <SendMessageFromPort.part.0+0xaa>
 800992c:	2d00      	cmp	r5, #0
 800992e:	d100      	bne.n	8009932 <SendMessageFromPort.part.0+0xaa>
 8009930:	e10d      	b.n	8009b4e <SendMessageFromPort.part.0+0x2c6>
		FindBroadcastRoutes(src);
 8009932:	0028      	movs	r0, r5
 8009934:	f7fa fc14 	bl	8004160 <FindBroadcastRoutes>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009938:	4b98      	ldr	r3, [pc, #608]	; (8009b9c <SendMessageFromPort.part.0+0x314>)
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800993a:	3704      	adds	r7, #4
 800993c:	4699      	mov	r9, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800993e:	2301      	movs	r3, #1
		FindBroadcastRoutes(src);
 8009940:	2100      	movs	r1, #0
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009942:	4698      	mov	r8, r3
 8009944:	4d96      	ldr	r5, [pc, #600]	; (8009ba0 <SendMessageFromPort.part.0+0x318>)
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009946:	b2bf      	uxth	r7, r7
 8009948:	e003      	b.n	8009952 <SendMessageFromPort.part.0+0xca>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800994a:	0031      	movs	r1, r6
 800994c:	2e06      	cmp	r6, #6
 800994e:	d100      	bne.n	8009952 <SendMessageFromPort.part.0+0xca>
 8009950:	e0d2      	b.n	8009af8 <SendMessageFromPort.part.0+0x270>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009952:	464a      	mov	r2, r9
 8009954:	782b      	ldrb	r3, [r5, #0]
 8009956:	1c4e      	adds	r6, r1, #1
 8009958:	3b01      	subs	r3, #1
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	5ad3      	ldrh	r3, [r2, r3]
 800995e:	4642      	mov	r2, r8
 8009960:	410b      	asrs	r3, r1
 8009962:	b2f0      	uxtb	r0, r6
 8009964:	421a      	tst	r2, r3
 8009966:	d0f0      	beq.n	800994a <SendMessageFromPort.part.0+0xc2>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009968:	2332      	movs	r3, #50	; 0x32
 800996a:	003a      	movs	r2, r7
 800996c:	0021      	movs	r1, r4
 800996e:	f004 fec1 	bl	800e6f4 <writePxDMAMutex>
				Delay_ms(1);
 8009972:	2001      	movs	r0, #1
 8009974:	f007 fbec 	bl	8011150 <HAL_Delay>
 8009978:	e7e7      	b.n	800994a <SendMessageFromPort.part.0+0xc2>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800997a:	2e00      	cmp	r6, #0
 800997c:	d0a7      	beq.n	80098ce <SendMessageFromPort.part.0+0x46>
		if(src == 0)
 800997e:	2d00      	cmp	r5, #0
 8009980:	d100      	bne.n	8009984 <SendMessageFromPort.part.0+0xfc>
 8009982:	e0cb      	b.n	8009b1c <SendMessageFromPort.part.0+0x294>
		message[2] =length;
 8009984:	2300      	movs	r3, #0
 8009986:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8009988:	9b03      	ldr	r3, [sp, #12]
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 800998a:	4a86      	ldr	r2, [pc, #536]	; (8009ba4 <SendMessageFromPort.part.0+0x31c>)
		message[3] =dst;
 800998c:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 800998e:	7125      	strb	r5, [r4, #4]
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 8009990:	79d3      	ldrb	r3, [r2, #7]
 8009992:	7992      	ldrb	r2, [r2, #6]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8009998:	22ff      	movs	r2, #255	; 0xff
 800999a:	42b2      	cmp	r2, r6
 800999c:	4192      	sbcs	r2, r2
 800999e:	4252      	negs	r2, r2
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 80099a0:	0052      	lsls	r2, r2, #1
 80099a2:	4313      	orrs	r3, r2
 80099a4:	2200      	movs	r2, #0
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	4693      	mov	fp, r2
 80099aa:	7163      	strb	r3, [r4, #5]
		message[6 + shift] =(uint8_t )code;
 80099ac:	71a6      	strb	r6, [r4, #6]
		if(extendCode == true){
 80099ae:	2eff      	cmp	r6, #255	; 0xff
 80099b0:	d900      	bls.n	80099b4 <SendMessageFromPort.part.0+0x12c>
 80099b2:	e0b6      	b.n	8009b22 <SendMessageFromPort.part.0+0x29a>
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 80099b4:	2f2e      	cmp	r7, #46	; 0x2e
 80099b6:	d800      	bhi.n	80099ba <SendMessageFromPort.part.0+0x132>
 80099b8:	e0ba      	b.n	8009b30 <SendMessageFromPort.part.0+0x2a8>
			message[5] |=0x80;
 80099ba:	2280      	movs	r2, #128	; 0x80
 80099bc:	4252      	negs	r2, r2
 80099be:	4313      	orrs	r3, r2
 80099c0:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 80099c2:	4b79      	ldr	r3, [pc, #484]	; (8009ba8 <SendMessageFromPort.part.0+0x320>)
 80099c4:	4698      	mov	r8, r3
 80099c6:	801f      	strh	r7, [r3, #0]
				if((totalNumberOfParams / numberOfParams) >= 1){
 80099c8:	4b78      	ldr	r3, [pc, #480]	; (8009bac <SendMessageFromPort.part.0+0x324>)
 80099ca:	4699      	mov	r9, r3
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80099cc:	232e      	movs	r3, #46	; 0x2e
 80099ce:	469a      	mov	sl, r3
 80099d0:	4653      	mov	r3, sl
 80099d2:	0029      	movs	r1, r5
 80099d4:	9a03      	ldr	r2, [sp, #12]
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	9804      	ldr	r0, [sp, #16]
 80099da:	0033      	movs	r3, r6
 80099dc:	f7ff ff3e 	bl	800985c <SendMessageFromPort>
					osDelay(10);
 80099e0:	200a      	movs	r0, #10
 80099e2:	f005 fb43 	bl	800f06c <osDelay>
					totalNumberOfParams -=numberOfParams;
 80099e6:	4643      	mov	r3, r8
 80099e8:	881f      	ldrh	r7, [r3, #0]
 80099ea:	3f2e      	subs	r7, #46	; 0x2e
 80099ec:	b2bf      	uxth	r7, r7
 80099ee:	801f      	strh	r7, [r3, #0]
					ptrShift +=numberOfParams;
 80099f0:	464b      	mov	r3, r9
 80099f2:	8819      	ldrh	r1, [r3, #0]
 80099f4:	312e      	adds	r1, #46	; 0x2e
 80099f6:	b289      	uxth	r1, r1
 80099f8:	8019      	strh	r1, [r3, #0]
			while(totalNumberOfParams != 0){
 80099fa:	2f00      	cmp	r7, #0
 80099fc:	d100      	bne.n	8009a00 <SendMessageFromPort.part.0+0x178>
 80099fe:	e0be      	b.n	8009b7e <SendMessageFromPort.part.0+0x2f6>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8009a00:	2f2d      	cmp	r7, #45	; 0x2d
 8009a02:	d8e5      	bhi.n	80099d0 <SendMessageFromPort.part.0+0x148>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8009a04:	237f      	movs	r3, #127	; 0x7f
 8009a06:	7962      	ldrb	r2, [r4, #5]
 8009a08:	4013      	ands	r3, r2
 8009a0a:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009a0c:	465b      	mov	r3, fp
 8009a0e:	1dd8      	adds	r0, r3, #7
 8009a10:	4b67      	ldr	r3, [pc, #412]	; (8009bb0 <SendMessageFromPort.part.0+0x328>)
 8009a12:	003a      	movs	r2, r7
 8009a14:	18c9      	adds	r1, r1, r3
 8009a16:	1820      	adds	r0, r4, r0
 8009a18:	f00b faf4 	bl	8015004 <memcpy>
					ptrShift =0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	464a      	mov	r2, r9
 8009a20:	8013      	strh	r3, [r2, #0]
					totalNumberOfParams =0;
 8009a22:	4642      	mov	r2, r8
 8009a24:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 8009a26:	465b      	mov	r3, fp
 8009a28:	1d19      	adds	r1, r3, #4
 8009a2a:	19c9      	adds	r1, r1, r7
 8009a2c:	b2cb      	uxtb	r3, r1
 8009a2e:	4699      	mov	r9, r3
		if(AddBcastPayload == true){
 8009a30:	4b60      	ldr	r3, [pc, #384]	; (8009bb4 <SendMessageFromPort.part.0+0x32c>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d03c      	beq.n	8009ab2 <SendMessageFromPort.part.0+0x22a>
			if(dstGroupID < BOS_BROADCAST){
 8009a38:	4b5f      	ldr	r3, [pc, #380]	; (8009bb8 <SendMessageFromPort.part.0+0x330>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2bff      	cmp	r3, #255	; 0xff
 8009a3e:	d100      	bne.n	8009a42 <SendMessageFromPort.part.0+0x1ba>
 8009a40:	e08a      	b.n	8009b58 <SendMessageFromPort.part.0+0x2d0>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009a42:	495e      	ldr	r1, [pc, #376]	; (8009bbc <SendMessageFromPort.part.0+0x334>)
 8009a44:	780a      	ldrb	r2, [r1, #0]
 8009a46:	4694      	mov	ip, r2
 8009a48:	2a00      	cmp	r2, #0
 8009a4a:	d100      	bne.n	8009a4e <SendMessageFromPort.part.0+0x1c6>
 8009a4c:	e094      	b.n	8009b78 <SendMessageFromPort.part.0+0x2f0>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009a4e:	0029      	movs	r1, r5
 8009a50:	2601      	movs	r6, #1
 8009a52:	46a0      	mov	r8, r4
 8009a54:	409e      	lsls	r6, r3
 8009a56:	4665      	mov	r5, ip
			uint8_t groupMembers =0;
 8009a58:	2200      	movs	r2, #0
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009a5a:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009a5c:	468c      	mov	ip, r1
 8009a5e:	4858      	ldr	r0, [pc, #352]	; (8009bc0 <SendMessageFromPort.part.0+0x338>)
 8009a60:	44d8      	add	r8, fp
					if(InGroup(i,dstGroupID)){
 8009a62:	8801      	ldrh	r1, [r0, #0]
 8009a64:	420e      	tst	r6, r1
 8009a66:	d009      	beq.n	8009a7c <SendMessageFromPort.part.0+0x1f4>
						++groupMembers;							// Add this member
 8009a68:	3201      	adds	r2, #1
 8009a6a:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8009a6c:	19d1      	adds	r1, r2, r7
 8009a6e:	292c      	cmp	r1, #44	; 0x2c
 8009a70:	dd00      	ble.n	8009a74 <SendMessageFromPort.part.0+0x1ec>
 8009a72:	e06f      	b.n	8009b54 <SendMessageFromPort.part.0+0x2cc>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009a74:	4641      	mov	r1, r8
 8009a76:	1889      	adds	r1, r1, r2
 8009a78:	19c9      	adds	r1, r1, r7
 8009a7a:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	3002      	adds	r0, #2
 8009a82:	42ab      	cmp	r3, r5
 8009a84:	d9ed      	bls.n	8009a62 <SendMessageFromPort.part.0+0x1da>
 8009a86:	4665      	mov	r5, ip
 8009a88:	0010      	movs	r0, r2
 8009a8a:	18b9      	adds	r1, r7, r2
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8009a8c:	465b      	mov	r3, fp
 8009a8e:	3307      	adds	r3, #7
 8009a90:	19df      	adds	r7, r3, r7
 8009a92:	183f      	adds	r7, r7, r0
 8009a94:	55e2      	strb	r2, [r4, r7]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8009a96:	292b      	cmp	r1, #43	; 0x2b
 8009a98:	dc5c      	bgt.n	8009b54 <SendMessageFromPort.part.0+0x2cc>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009a9a:	494a      	ldr	r1, [pc, #296]	; (8009bc4 <SendMessageFromPort.part.0+0x33c>)
 8009a9c:	19e7      	adds	r7, r4, r7
 8009a9e:	780b      	ldrb	r3, [r1, #0]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	700b      	strb	r3, [r1, #0]
 8009aa6:	707b      	strb	r3, [r7, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009aa8:	464b      	mov	r3, r9
 8009aaa:	3302      	adds	r3, #2
 8009aac:	189a      	adds	r2, r3, r2
 8009aae:	b2d3      	uxtb	r3, r2
 8009ab0:	4699      	mov	r9, r3
	message[2] =length;
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	70a3      	strb	r3, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	4e37      	ldr	r6, [pc, #220]	; (8009b98 <SendMessageFromPort.part.0+0x310>)
 8009aba:	444b      	add	r3, r9
 8009abc:	4698      	mov	r8, r3
 8009abe:	001a      	movs	r2, r3
 8009ac0:	0021      	movs	r1, r4
 8009ac2:	0030      	movs	r0, r6
 8009ac4:	f00b fa9e 	bl	8015004 <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009ac8:	464b      	mov	r3, r9
 8009aca:	4641      	mov	r1, r8
 8009acc:	0030      	movs	r0, r6
 8009ace:	b29f      	uxth	r7, r3
 8009ad0:	f003 ff3c 	bl	800d94c <CalculateCRC8>
 8009ad4:	4643      	mov	r3, r8
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009ad6:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009ad8:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009ada:	2100      	movs	r1, #0
 8009adc:	0030      	movs	r0, r6
 8009ade:	f00b fa9a 	bl	8015016 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009ae2:	9b03      	ldr	r3, [sp, #12]
 8009ae4:	2bfd      	cmp	r3, #253	; 0xfd
 8009ae6:	d900      	bls.n	8009aea <SendMessageFromPort.part.0+0x262>
 8009ae8:	e723      	b.n	8009932 <SendMessageFromPort.part.0+0xaa>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009aea:	1d3a      	adds	r2, r7, #4
 8009aec:	2332      	movs	r3, #50	; 0x32
 8009aee:	0021      	movs	r1, r4
 8009af0:	9804      	ldr	r0, [sp, #16]
 8009af2:	b292      	uxth	r2, r2
 8009af4:	f004 fdfe 	bl	800e6f4 <writePxDMAMutex>
	vTaskPrioritySet( NULL,TaskPriority);
 8009af8:	2000      	movs	r0, #0
 8009afa:	9905      	ldr	r1, [sp, #20]
 8009afc:	f006 fa24 	bl	800ff48 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8009b00:	2202      	movs	r2, #2
	return result;
 8009b02:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 8009b04:	4b30      	ldr	r3, [pc, #192]	; (8009bc8 <SendMessageFromPort.part.0+0x340>)
 8009b06:	701a      	strb	r2, [r3, #0]
}
 8009b08:	b007      	add	sp, #28
 8009b0a:	bcf0      	pop	{r4, r5, r6, r7}
 8009b0c:	46bb      	mov	fp, r7
 8009b0e:	46b2      	mov	sl, r6
 8009b10:	46a9      	mov	r9, r5
 8009b12:	46a0      	mov	r8, r4
 8009b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009b16:	2e00      	cmp	r6, #0
 8009b18:	d100      	bne.n	8009b1c <SendMessageFromPort.part.0+0x294>
 8009b1a:	e6d8      	b.n	80098ce <SendMessageFromPort.part.0+0x46>
			src =myID;
 8009b1c:	4d20      	ldr	r5, [pc, #128]	; (8009ba0 <SendMessageFromPort.part.0+0x318>)
 8009b1e:	782d      	ldrb	r5, [r5, #0]
 8009b20:	e730      	b.n	8009984 <SendMessageFromPort.part.0+0xfc>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009b22:	0a32      	lsrs	r2, r6, #8
 8009b24:	71e2      	strb	r2, [r4, #7]
			++shift;
 8009b26:	2201      	movs	r2, #1
 8009b28:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8009b2a:	2f2e      	cmp	r7, #46	; 0x2e
 8009b2c:	d900      	bls.n	8009b30 <SendMessageFromPort.part.0+0x2a8>
 8009b2e:	e744      	b.n	80099ba <SendMessageFromPort.part.0+0x132>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009b30:	465b      	mov	r3, fp
 8009b32:	1dd8      	adds	r0, r3, #7
 8009b34:	4b1d      	ldr	r3, [pc, #116]	; (8009bac <SendMessageFromPort.part.0+0x324>)
 8009b36:	003a      	movs	r2, r7
 8009b38:	8819      	ldrh	r1, [r3, #0]
 8009b3a:	4b1d      	ldr	r3, [pc, #116]	; (8009bb0 <SendMessageFromPort.part.0+0x328>)
 8009b3c:	1820      	adds	r0, r4, r0
 8009b3e:	18c9      	adds	r1, r1, r3
 8009b40:	f00b fa60 	bl	8015004 <memcpy>
			length =numberOfParams + shift + 4;
 8009b44:	1d39      	adds	r1, r7, #4
 8009b46:	4459      	add	r1, fp
 8009b48:	b2cb      	uxtb	r3, r1
 8009b4a:	4699      	mov	r9, r3
 8009b4c:	e770      	b.n	8009a30 <SendMessageFromPort.part.0+0x1a8>
			src =message[4];
 8009b4e:	464b      	mov	r3, r9
 8009b50:	791d      	ldrb	r5, [r3, #4]
 8009b52:	e6ee      	b.n	8009932 <SendMessageFromPort.part.0+0xaa>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009b54:	2069      	movs	r0, #105	; 0x69
 8009b56:	e7d7      	b.n	8009b08 <SendMessageFromPort.part.0+0x280>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009b58:	2f2c      	cmp	r7, #44	; 0x2c
 8009b5a:	d8fb      	bhi.n	8009b54 <SendMessageFromPort.part.0+0x2cc>
				message[7 + shift + numberOfParams] =++bcastID;
 8009b5c:	4a19      	ldr	r2, [pc, #100]	; (8009bc4 <SendMessageFromPort.part.0+0x33c>)
				length +=1;		// + bcastID
 8009b5e:	4649      	mov	r1, r9
				message[7 + shift + numberOfParams] =++bcastID;
 8009b60:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 8009b62:	3101      	adds	r1, #1
				message[7 + shift + numberOfParams] =++bcastID;
 8009b64:	3301      	adds	r3, #1
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	7013      	strb	r3, [r2, #0]
 8009b6a:	465a      	mov	r2, fp
 8009b6c:	18a2      	adds	r2, r4, r2
 8009b6e:	19d7      	adds	r7, r2, r7
 8009b70:	71fb      	strb	r3, [r7, #7]
				length +=1;		// + bcastID
 8009b72:	b2cb      	uxtb	r3, r1
 8009b74:	4699      	mov	r9, r3
 8009b76:	e79c      	b.n	8009ab2 <SendMessageFromPort.part.0+0x22a>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009b78:	0039      	movs	r1, r7
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	e786      	b.n	8009a8c <SendMessageFromPort.part.0+0x204>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	372e      	adds	r7, #46	; 0x2e
 8009b82:	4699      	mov	r9, r3
 8009b84:	e754      	b.n	8009a30 <SendMessageFromPort.part.0+0x1a8>
 8009b86:	46c0      	nop			; (mov r8, r8)
 8009b88:	20000f90 	.word	0x20000f90
 8009b8c:	20000fc8 	.word	0x20000fc8
 8009b90:	20000f93 	.word	0x20000f93
 8009b94:	20000da0 	.word	0x20000da0
 8009b98:	200014f0 	.word	0x200014f0
 8009b9c:	20000d50 	.word	0x20000d50
 8009ba0:	2000110e 	.word	0x2000110e
 8009ba4:	20006ab0 	.word	0x20006ab0
 8009ba8:	2000164e 	.word	0x2000164e
 8009bac:	2000164c 	.word	0x2000164c
 8009bb0:	20000fd0 	.word	0x20000fd0
 8009bb4:	20000b0c 	.word	0x20000b0c
 8009bb8:	2000001d 	.word	0x2000001d
 8009bbc:	2000001c 	.word	0x2000001c
 8009bc0:	20000f58 	.word	0x20000f58
 8009bc4:	20000d4c 	.word	0x20000d4c
 8009bc8:	200011a8 	.word	0x200011a8

08009bcc <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8009bcc:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009bce:	b500      	push	{lr}
	AddBcastPayload = false;
 8009bd0:	4b0b      	ldr	r3, [pc, #44]	; (8009c00 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009bd2:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009bd4:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8009bd6:	4b0b      	ldr	r3, [pc, #44]	; (8009c04 <BroadcastReceivedMessage+0x38>)
 8009bd8:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009bda:	2300      	movs	r3, #0
 8009bdc:	9100      	str	r1, [sp, #0]
 8009bde:	28ff      	cmp	r0, #255	; 0xff
 8009be0:	d007      	beq.n	8009bf2 <BroadcastReceivedMessage+0x26>
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009be2:	22fe      	movs	r2, #254	; 0xfe
 8009be4:	2100      	movs	r1, #0
 8009be6:	2000      	movs	r0, #0
 8009be8:	f7ff fe4e 	bl	8009888 <SendMessageFromPort.part.0>
}
 8009bec:	2000      	movs	r0, #0
 8009bee:	b003      	add	sp, #12
 8009bf0:	bd00      	pop	{pc}
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	32ff      	adds	r2, #255	; 0xff
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	f7ff fe46 	bl	8009888 <SendMessageFromPort.part.0>
 8009bfc:	e7f6      	b.n	8009bec <BroadcastReceivedMessage+0x20>
 8009bfe:	46c0      	nop			; (mov r8, r8)
 8009c00:	20000b0c 	.word	0x20000b0c
 8009c04:	2000001d 	.word	0x2000001d

08009c08 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009c08:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 8009c0a:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009c0c:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009c0e:	4b0e      	ldr	r3, [pc, #56]	; (8009c48 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009c10:	b083      	sub	sp, #12
	AddBcastPayload = true;
 8009c12:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009c14:	4b0d      	ldr	r3, [pc, #52]	; (8009c4c <BroadcastMessage+0x44>)
 8009c16:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009c18:	0013      	movs	r3, r2
 8009c1a:	9400      	str	r4, [sp, #0]
 8009c1c:	29ff      	cmp	r1, #255	; 0xff
 8009c1e:	d00c      	beq.n	8009c3a <BroadcastMessage+0x32>
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009c20:	0001      	movs	r1, r0
 8009c22:	22fe      	movs	r2, #254	; 0xfe
 8009c24:	2000      	movs	r0, #0
 8009c26:	f7ff fe2f 	bl	8009888 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 8009c2a:	0022      	movs	r2, r4
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	4808      	ldr	r0, [pc, #32]	; (8009c50 <BroadcastMessage+0x48>)
 8009c30:	f00b f9f1 	bl	8015016 <memset>
}
 8009c34:	2000      	movs	r0, #0
 8009c36:	b003      	add	sp, #12
 8009c38:	bd30      	pop	{r4, r5, pc}
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009c3a:	0001      	movs	r1, r0
 8009c3c:	22ff      	movs	r2, #255	; 0xff
 8009c3e:	2000      	movs	r0, #0
 8009c40:	f7ff fe22 	bl	8009888 <SendMessageFromPort.part.0>
 8009c44:	e7f1      	b.n	8009c2a <BroadcastMessage+0x22>
 8009c46:	46c0      	nop			; (mov r8, r8)
 8009c48:	20000b0c 	.word	0x20000b0c
 8009c4c:	2000001d 	.word	0x2000001d
 8009c50:	20000fd0 	.word	0x20000fd0

08009c54 <ForwardReceivedMessage>:
	AddBcastPayload = false;
 8009c54:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009c56:	b530      	push	{r4, r5, lr}
 8009c58:	0004      	movs	r4, r0
	AddBcastPayload = false;
 8009c5a:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009c5c:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009c5e:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009c60:	1e42      	subs	r2, r0, #1
 8009c62:	00d3      	lsls	r3, r2, #3
 8009c64:	1a9b      	subs	r3, r3, r2
 8009c66:	4a09      	ldr	r2, [pc, #36]	; (8009c8c <ForwardReceivedMessage+0x38>)
 8009c68:	00db      	lsls	r3, r3, #3
 8009c6a:	5c9d      	ldrb	r5, [r3, r2]
	port =FindRoute(myID,dst);
 8009c6c:	4b08      	ldr	r3, [pc, #32]	; (8009c90 <ForwardReceivedMessage+0x3c>)
 8009c6e:	0029      	movs	r1, r5
 8009c70:	7818      	ldrb	r0, [r3, #0]
 8009c72:	f7fa fb11 	bl	8004298 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009c76:	2300      	movs	r3, #0
 8009c78:	002a      	movs	r2, r5
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	9400      	str	r4, [sp, #0]
 8009c7e:	f7ff fded 	bl	800985c <SendMessageFromPort>
}
 8009c82:	2000      	movs	r0, #0
 8009c84:	b003      	add	sp, #12
 8009c86:	bd30      	pop	{r4, r5, pc}
 8009c88:	20000b0c 	.word	0x20000b0c
 8009c8c:	20000da0 	.word	0x20000da0
 8009c90:	2000110e 	.word	0x2000110e

08009c94 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c96:	0004      	movs	r4, r0
 8009c98:	000e      	movs	r6, r1
 8009c9a:	0015      	movs	r5, r2
 8009c9c:	b083      	sub	sp, #12
	if(dst != BOS_BROADCAST){
 8009c9e:	28ff      	cmp	r0, #255	; 0xff
 8009ca0:	d012      	beq.n	8009cc8 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009ca2:	4f0d      	ldr	r7, [pc, #52]	; (8009cd8 <SendMessageToModule+0x44>)
 8009ca4:	0021      	movs	r1, r4
 8009ca6:	7838      	ldrb	r0, [r7, #0]
 8009ca8:	f7fa faf6 	bl	8004298 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009cac:	7839      	ldrb	r1, [r7, #0]
 8009cae:	0022      	movs	r2, r4
 8009cb0:	0033      	movs	r3, r6
 8009cb2:	9500      	str	r5, [sp, #0]
 8009cb4:	f7ff fdd2 	bl	800985c <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009cb8:	002a      	movs	r2, r5
 8009cba:	2100      	movs	r1, #0
 8009cbc:	4807      	ldr	r0, [pc, #28]	; (8009cdc <SendMessageToModule+0x48>)
 8009cbe:	f00b f9aa 	bl	8015016 <memset>
}
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	b003      	add	sp, #12
 8009cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009cc8:	4b03      	ldr	r3, [pc, #12]	; (8009cd8 <SendMessageToModule+0x44>)
 8009cca:	7818      	ldrb	r0, [r3, #0]
 8009ccc:	0013      	movs	r3, r2
 8009cce:	000a      	movs	r2, r1
 8009cd0:	21ff      	movs	r1, #255	; 0xff
 8009cd2:	f7ff ff99 	bl	8009c08 <BroadcastMessage>
 8009cd6:	e7f4      	b.n	8009cc2 <SendMessageToModule+0x2e>
 8009cd8:	2000110e 	.word	0x2000110e
 8009cdc:	20000fd0 	.word	0x20000fd0

08009ce0 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ce2:	4657      	mov	r7, sl
 8009ce4:	46de      	mov	lr, fp
 8009ce6:	464e      	mov	r6, r9
 8009ce8:	4645      	mov	r5, r8
 8009cea:	b5e0      	push	{r5, r6, r7, lr}
 8009cec:	b08f      	sub	sp, #60	; 0x3c
 8009cee:	001e      	movs	r6, r3
 8009cf0:	ab18      	add	r3, sp, #96	; 0x60
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	000f      	movs	r7, r1
 8009cf6:	469b      	mov	fp, r3
 8009cf8:	ab1b      	add	r3, sp, #108	; 0x6c
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	4692      	mov	sl, r2
 8009cfe:	9306      	str	r3, [sp, #24]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009d00:	4b57      	ldr	r3, [pc, #348]	; (8009e60 <StartScastDMAStream+0x180>)
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009d02:	900d      	str	r0, [sp, #52]	; 0x34
	if(srcM != myID){
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	428b      	cmp	r3, r1
 8009d08:	d000      	beq.n	8009d0c <StartScastDMAStream+0x2c>
 8009d0a:	e083      	b.n	8009e14 <StartScastDMAStream+0x134>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009d0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d0e:	4d55      	ldr	r5, [pc, #340]	; (8009e64 <StartScastDMAStream+0x184>)
 8009d10:	0e1b      	lsrs	r3, r3, #24
 8009d12:	9307      	str	r3, [sp, #28]
			messageParams[1] =(uint8_t )(count >> 16);
 8009d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009d16:	4c54      	ldr	r4, [pc, #336]	; (8009e68 <StartScastDMAStream+0x188>)
			messageParams[1] =(uint8_t )(count >> 16);
 8009d18:	0c1b      	lsrs	r3, r3, #16
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	9308      	str	r3, [sp, #32]
			messageParams[2] =(uint8_t )(count >> 8);
 8009d1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d20:	0a1b      	lsrs	r3, r3, #8
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009d26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009d28:	0e1b      	lsrs	r3, r3, #24
 8009d2a:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009d2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009d2e:	0c1b      	lsrs	r3, r3, #16
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009d34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009d36:	0a1b      	lsrs	r3, r3, #8
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8009d3c:	231a      	movs	r3, #26
 8009d3e:	4699      	mov	r9, r3
 8009d40:	44a9      	add	r9, r5
		FindRoute(srcM,dstM);
 8009d42:	0031      	movs	r1, r6
 8009d44:	0038      	movs	r0, r7
 8009d46:	f7fa faa7 	bl	8004298 <FindRoute>
		if(route[i]){
 8009d4a:	7868      	ldrb	r0, [r5, #1]
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d035      	beq.n	8009dbc <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 8009d50:	78a9      	ldrb	r1, [r5, #2]
 8009d52:	2900      	cmp	r1, #0
 8009d54:	d100      	bne.n	8009d58 <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 8009d56:	0039      	movs	r1, r7
 8009d58:	f7fa fa9e 	bl	8004298 <FindRoute>
			FindRoute(srcM,dstM);
 8009d5c:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 8009d5e:	4680      	mov	r8, r0
			FindRoute(srcM,dstM);
 8009d60:	0038      	movs	r0, r7
 8009d62:	f7fa fa99 	bl	8004298 <FindRoute>
			if(route[i] == dstM){
 8009d66:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 8009d68:	4653      	mov	r3, sl
			if(route[i] == dstM){
 8009d6a:	42b0      	cmp	r0, r6
 8009d6c:	d003      	beq.n	8009d76 <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009d6e:	7829      	ldrb	r1, [r5, #0]
 8009d70:	f7fa fa92 	bl	8004298 <FindRoute>
 8009d74:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009d76:	9a07      	ldr	r2, [sp, #28]
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 8009d78:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009d7a:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009d7c:	9a08      	ldr	r2, [sp, #32]
			messageParams[11] =stored; /* EEPROM storage */
 8009d7e:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8009d80:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
			FindRoute(srcM,dstM);
 8009d84:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 8009d86:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8009d88:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 8009d8a:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8009d8c:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 8009d90:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009d92:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d96:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009d98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d9a:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009d9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009d9e:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009da0:	465a      	mov	r2, fp
 8009da2:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009da4:	4642      	mov	r2, r8
 8009da6:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 8009da8:	f7fa fa76 	bl	8004298 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009dac:	220c      	movs	r2, #12
 8009dae:	211b      	movs	r1, #27
 8009db0:	7868      	ldrb	r0, [r5, #1]
 8009db2:	f7ff ff6f 	bl	8009c94 <SendMessageToModule>
			osDelay(10);
 8009db6:	200a      	movs	r0, #10
 8009db8:	f005 f958 	bl	800f06c <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 8009dbc:	3501      	adds	r5, #1
 8009dbe:	454d      	cmp	r5, r9
 8009dc0:	d1bf      	bne.n	8009d42 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8009dc2:	42b7      	cmp	r7, r6
 8009dc4:	d112      	bne.n	8009dec <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009dc6:	4653      	mov	r3, sl
 8009dc8:	4658      	mov	r0, fp
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dd0:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009dd2:	f7ff fc4d 	bl	8009670 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 8009dd6:	9b06      	ldr	r3, [sp, #24]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10d      	bne.n	8009df8 <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009ddc:	2000      	movs	r0, #0
 8009dde:	b00f      	add	sp, #60	; 0x3c
 8009de0:	bcf0      	pop	{r4, r5, r6, r7}
 8009de2:	46bb      	mov	fp, r7
 8009de4:	46b2      	mov	sl, r6
 8009de6:	46a9      	mov	r9, r5
 8009de8:	46a0      	mov	r8, r4
 8009dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8009dec:	0031      	movs	r1, r6
 8009dee:	0038      	movs	r0, r7
 8009df0:	f7fa fa52 	bl	8004298 <FindRoute>
 8009df4:	4682      	mov	sl, r0
 8009df6:	e7e6      	b.n	8009dc6 <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009df8:	2300      	movs	r3, #0
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	9303      	str	r3, [sp, #12]
 8009dfe:	9302      	str	r3, [sp, #8]
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	4653      	mov	r3, sl
 8009e04:	4658      	mov	r0, fp
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e0c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009e0e:	f7fa f815 	bl	8003e3c <SaveEEstreams>
 8009e12:	e7e3      	b.n	8009ddc <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009e14:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e16:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <StartScastDMAStream+0x188>)
 8009e18:	0e12      	lsrs	r2, r2, #24
 8009e1a:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009e1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
		messageParams[9] =srcP; /* Source port */
 8009e1e:	7258      	strb	r0, [r3, #9]
		messageParams[1] =(uint8_t )(count >> 16);
 8009e20:	0c12      	lsrs	r2, r2, #16
 8009e22:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009e24:	9a19      	ldr	r2, [sp, #100]	; 0x64
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009e26:	211c      	movs	r1, #28
		messageParams[2] =(uint8_t )(count >> 8);
 8009e28:	0a12      	lsrs	r2, r2, #8
 8009e2a:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009e2c:	9a19      	ldr	r2, [sp, #100]	; 0x64
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009e2e:	0038      	movs	r0, r7
		messageParams[3] =(uint8_t )count;
 8009e30:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009e32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
		messageParams[10] =dstM; /* destination module */
 8009e34:	729e      	strb	r6, [r3, #10]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009e36:	0e12      	lsrs	r2, r2, #24
 8009e38:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009e3a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e3c:	0c12      	lsrs	r2, r2, #16
 8009e3e:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009e40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e42:	0a12      	lsrs	r2, r2, #8
 8009e44:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009e46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e48:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009e4a:	465a      	mov	r2, fp
 8009e4c:	721a      	strb	r2, [r3, #8]
		messageParams[11] =dstP; /* destination port */
 8009e4e:	4652      	mov	r2, sl
 8009e50:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8009e52:	9a06      	ldr	r2, [sp, #24]
 8009e54:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009e56:	220d      	movs	r2, #13
 8009e58:	f7ff ff1c 	bl	8009c94 <SendMessageToModule>
		return result;
 8009e5c:	e7be      	b.n	8009ddc <StartScastDMAStream+0xfc>
 8009e5e:	46c0      	nop			; (mov r8, r8)
 8009e60:	2000110e 	.word	0x2000110e
 8009e64:	20006bb3 	.word	0x20006bb3
 8009e68:	20000fd0 	.word	0x20000fd0

08009e6c <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument){
 8009e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e6e:	46de      	mov	lr, fp
 8009e70:	4657      	mov	r7, sl
 8009e72:	464e      	mov	r6, r9
 8009e74:	4645      	mov	r5, r8
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009e76:	2300      	movs	r3, #0
void BackEndTask(void *argument){
 8009e78:	b5e0      	push	{r5, r6, r7, lr}
 8009e7a:	b08b      	sub	sp, #44	; 0x2c
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	4bcf      	ldr	r3, [pc, #828]	; (800a1bc <BackEndTask+0x350>)
 8009e80:	469b      	mov	fp, r3
	static uint8_t crc8;
	
	/* Infinite loop */
	for(;;){
		/* Search the circular receive buffers for any complete packets */
		for(port =1; port <= NumOfPorts; port++){
 8009e82:	223f      	movs	r2, #63	; 0x3f
 8009e84:	4694      	mov	ip, r2
 8009e86:	4bce      	ldr	r3, [pc, #824]	; (800a1c0 <BackEndTask+0x354>)
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009e88:	2600      	movs	r6, #0
 8009e8a:	4698      	mov	r8, r3
 8009e8c:	4bcd      	ldr	r3, [pc, #820]	; (800a1c4 <BackEndTask+0x358>)
 8009e8e:	4dce      	ldr	r5, [pc, #824]	; (800a1c8 <BackEndTask+0x35c>)
 8009e90:	4463      	add	r3, ip
 8009e92:	469a      	mov	sl, r3
 8009e94:	4fcb      	ldr	r7, [pc, #812]	; (800a1c4 <BackEndTask+0x358>)
 8009e96:	e01e      	b.n	8009ed6 <BackEndTask+0x6a>
				UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
				++rejectedMsg;
			}
			
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
 8009e98:	465b      	mov	r3, fp
 8009e9a:	5d9b      	ldrb	r3, [r3, r6]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00e      	beq.n	8009ebe <BackEndTask+0x52>
				MsgDMAStopped[port - 1] = false;
 8009ea0:	465b      	mov	r3, fp
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	559a      	strb	r2, [r3, r6]
				if(portStatus[port] == OVERRUN)
 8009ea6:	782b      	ldrb	r3, [r5, #0]
 8009ea8:	2b05      	cmp	r3, #5
 8009eaa:	d101      	bne.n	8009eb0 <BackEndTask+0x44>
					portStatus[port] =FREE;
 8009eac:	2300      	movs	r3, #0
 8009eae:	702b      	strb	r3, [r5, #0]
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009eb0:	4648      	mov	r0, r9
 8009eb2:	f004 fc55 	bl	800e760 <GetUart>
 8009eb6:	2240      	movs	r2, #64	; 0x40
 8009eb8:	0039      	movs	r1, r7
 8009eba:	f00a f9c5 	bl	8014248 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	469c      	mov	ip, r3
 8009ec2:	333f      	adds	r3, #63	; 0x3f
 8009ec4:	44e0      	add	r8, ip
 8009ec6:	469c      	mov	ip, r3
 8009ec8:	0026      	movs	r6, r4
 8009eca:	3501      	adds	r5, #1
 8009ecc:	3740      	adds	r7, #64	; 0x40
 8009ece:	44e2      	add	sl, ip
 8009ed0:	2c06      	cmp	r4, #6
 8009ed2:	d100      	bne.n	8009ed6 <BackEndTask+0x6a>
 8009ed4:	e0ca      	b.n	800a06c <BackEndTask+0x200>
 8009ed6:	1c74      	adds	r4, r6, #1
 8009ed8:	b2e3      	uxtb	r3, r4
 8009eda:	4699      	mov	r9, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009edc:	782b      	ldrb	r3, [r5, #0]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d8da      	bhi.n	8009e98 <BackEndTask+0x2c>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009ee2:	4643      	mov	r3, r8
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b3f      	cmp	r3, #63	; 0x3f
 8009ee8:	d841      	bhi.n	8009f6e <BackEndTask+0x102>
 8009eea:	001a      	movs	r2, r3
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009eec:	1c78      	adds	r0, r7, #1
 8009eee:	2a3f      	cmp	r2, #63	; 0x3f
 8009ef0:	d005      	beq.n	8009efe <BackEndTask+0x92>
 8009ef2:	5cb9      	ldrb	r1, [r7, r2]
 8009ef4:	2948      	cmp	r1, #72	; 0x48
 8009ef6:	d036      	beq.n	8009f66 <BackEndTask+0xfa>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009ef8:	3201      	adds	r2, #1
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009efa:	2a3f      	cmp	r2, #63	; 0x3f
 8009efc:	d1f9      	bne.n	8009ef2 <BackEndTask+0x86>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009efe:	4652      	mov	r2, sl
 8009f00:	7812      	ldrb	r2, [r2, #0]
 8009f02:	2a48      	cmp	r2, #72	; 0x48
 8009f04:	d100      	bne.n	8009f08 <BackEndTask+0x9c>
 8009f06:	e099      	b.n	800a03c <BackEndTask+0x1d0>
							if(BOS.disableCLI == false){
 8009f08:	4ab0      	ldr	r2, [pc, #704]	; (800a1cc <BackEndTask+0x360>)
 8009f0a:	7ed2      	ldrb	r2, [r2, #27]
 8009f0c:	2a00      	cmp	r2, #0
 8009f0e:	d1d6      	bne.n	8009ebe <BackEndTask+0x52>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009f10:	1c78      	adds	r0, r7, #1
 8009f12:	e002      	b.n	8009f1a <BackEndTask+0xae>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009f14:	000b      	movs	r3, r1
 8009f16:	2940      	cmp	r1, #64	; 0x40
 8009f18:	d0d1      	beq.n	8009ebe <BackEndTask+0x52>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009f1a:	5cfa      	ldrb	r2, [r7, r3]
 8009f1c:	1c59      	adds	r1, r3, #1
 8009f1e:	2a0d      	cmp	r2, #13
 8009f20:	d1f8      	bne.n	8009f14 <BackEndTask+0xa8>
 8009f22:	2b3f      	cmp	r3, #63	; 0x3f
 8009f24:	d100      	bne.n	8009f28 <BackEndTask+0xbc>
 8009f26:	e083      	b.n	800a030 <BackEndTask+0x1c4>
 8009f28:	5cc2      	ldrb	r2, [r0, r3]
 8009f2a:	2a00      	cmp	r2, #0
 8009f2c:	d1f2      	bne.n	8009f14 <BackEndTask+0xa8>
 8009f2e:	b2c9      	uxtb	r1, r1
										UARTRxBuf[port - 1][j] =0;
 8009f30:	4aa4      	ldr	r2, [pc, #656]	; (800a1c4 <BackEndTask+0x358>)
 8009f32:	01b6      	lsls	r6, r6, #6
 8009f34:	4694      	mov	ip, r2
 8009f36:	2200      	movs	r2, #0
 8009f38:	4466      	add	r6, ip
 8009f3a:	54f2      	strb	r2, [r6, r3]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009f3c:	4643      	mov	r3, r8
 8009f3e:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009f40:	4ba3      	ldr	r3, [pc, #652]	; (800a1d0 <BackEndTask+0x364>)
 8009f42:	49a4      	ldr	r1, [pc, #656]	; (800a1d4 <BackEndTask+0x368>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	54ca      	strb	r2, [r1, r3]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009f48:	2303      	movs	r3, #3
										PcPort =port;
 8009f4a:	464a      	mov	r2, r9
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009f4c:	702b      	strb	r3, [r5, #0]
										PcPort =port;
 8009f4e:	4ba0      	ldr	r3, [pc, #640]	; (800a1d0 <BackEndTask+0x364>)
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009f50:	2100      	movs	r1, #0
										PcPort =port;
 8009f52:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009f54:	4ba0      	ldr	r3, [pc, #640]	; (800a1d8 <BackEndTask+0x36c>)
 8009f56:	2202      	movs	r2, #2
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	9301      	str	r3, [sp, #4]
 8009f5c:	9801      	ldr	r0, [sp, #4]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f006 fcfe 	bl	8010960 <xTaskGenericNotify>
										break;
 8009f64:	e7ab      	b.n	8009ebe <BackEndTask+0x52>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009f66:	5c81      	ldrb	r1, [r0, r2]
 8009f68:	295a      	cmp	r1, #90	; 0x5a
 8009f6a:	d1c5      	bne.n	8009ef8 <BackEndTask+0x8c>
 8009f6c:	9200      	str	r2, [sp, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009f6e:	9b00      	ldr	r3, [sp, #0]
 8009f70:	2b3d      	cmp	r3, #61	; 0x3d
 8009f72:	d100      	bne.n	8009f76 <BackEndTask+0x10a>
 8009f74:	e097      	b.n	800a0a6 <BackEndTask+0x23a>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009f76:	9b00      	ldr	r3, [sp, #0]
 8009f78:	2b3e      	cmp	r3, #62	; 0x3e
 8009f7a:	d100      	bne.n	8009f7e <BackEndTask+0x112>
 8009f7c:	e102      	b.n	800a184 <BackEndTask+0x318>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009f7e:	9b00      	ldr	r3, [sp, #0]
 8009f80:	2b3f      	cmp	r3, #63	; 0x3f
 8009f82:	d05f      	beq.n	800a044 <BackEndTask+0x1d8>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009f84:	01b2      	lsls	r2, r6, #6
 8009f86:	4694      	mov	ip, r2
 8009f88:	4b8e      	ldr	r3, [pc, #568]	; (800a1c4 <BackEndTask+0x358>)
 8009f8a:	9203      	str	r2, [sp, #12]
 8009f8c:	9a00      	ldr	r2, [sp, #0]
 8009f8e:	4463      	add	r3, ip
 8009f90:	4694      	mov	ip, r2
 8009f92:	4463      	add	r3, ip
 8009f94:	7899      	ldrb	r1, [r3, #2]
					parseStart =packetStart + 3;
 8009f96:	0013      	movs	r3, r2
 8009f98:	3203      	adds	r2, #3
 8009f9a:	9207      	str	r2, [sp, #28]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009f9c:	1cca      	adds	r2, r1, #3
 8009f9e:	4694      	mov	ip, r2
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	4463      	add	r3, ip
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009fa4:	9102      	str	r1, [sp, #8]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009fa6:	9206      	str	r2, [sp, #24]
 8009fa8:	9301      	str	r3, [sp, #4]
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009faa:	2b3f      	cmp	r3, #63	; 0x3f
 8009fac:	dc5a      	bgt.n	800a064 <BackEndTask+0x1f8>
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	9305      	str	r3, [sp, #20]
				if(packetStart != packetEnd) // Non-empty packet
 8009fb2:	9b00      	ldr	r3, [sp, #0]
 8009fb4:	0019      	movs	r1, r3
 8009fb6:	9b01      	ldr	r3, [sp, #4]
 8009fb8:	4299      	cmp	r1, r3
 8009fba:	d05a      	beq.n	800a072 <BackEndTask+0x206>
					Delay_ms(1);
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	f007 f8c7 	bl	8011150 <HAL_Delay>
					if(packetStart < packetEnd){
 8009fc2:	9900      	ldr	r1, [sp, #0]
 8009fc4:	9a01      	ldr	r2, [sp, #4]
 8009fc6:	4291      	cmp	r1, r2
 8009fc8:	da7b      	bge.n	800a0c2 <BackEndTask+0x256>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009fca:	9904      	ldr	r1, [sp, #16]
 8009fcc:	4b7d      	ldr	r3, [pc, #500]	; (800a1c4 <BackEndTask+0x358>)
 8009fce:	0008      	movs	r0, r1
 8009fd0:	9903      	ldr	r1, [sp, #12]
 8009fd2:	9a06      	ldr	r2, [sp, #24]
 8009fd4:	468c      	mov	ip, r1
 8009fd6:	4460      	add	r0, ip
 8009fd8:	469c      	mov	ip, r3
 8009fda:	4460      	add	r0, ip
 8009fdc:	0001      	movs	r1, r0
 8009fde:	9008      	str	r0, [sp, #32]
 8009fe0:	487e      	ldr	r0, [pc, #504]	; (800a1dc <BackEndTask+0x370>)
 8009fe2:	f00b f80f 	bl	8015004 <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009fe6:	9802      	ldr	r0, [sp, #8]
 8009fe8:	1cc1      	adds	r1, r0, #3
 8009fea:	487c      	ldr	r0, [pc, #496]	; (800a1dc <BackEndTask+0x370>)
 8009fec:	f003 fcae 	bl	800d94c <CalculateCRC8>
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009ff0:	2238      	movs	r2, #56	; 0x38
 8009ff2:	2100      	movs	r1, #0
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009ff4:	9004      	str	r0, [sp, #16]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009ff6:	4879      	ldr	r0, [pc, #484]	; (800a1dc <BackEndTask+0x370>)
 8009ff8:	f00b f80d 	bl	8015016 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009ffc:	9903      	ldr	r1, [sp, #12]
 8009ffe:	4b71      	ldr	r3, [pc, #452]	; (800a1c4 <BackEndTask+0x358>)
 800a000:	468c      	mov	ip, r1
 800a002:	9a01      	ldr	r2, [sp, #4]
 800a004:	4463      	add	r3, ip
 800a006:	5c9b      	ldrb	r3, [r3, r2]
 800a008:	9a04      	ldr	r2, [sp, #16]
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d100      	bne.n	800a010 <BackEndTask+0x1a4>
 800a00e:	e088      	b.n	800a122 <BackEndTask+0x2b6>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 800a010:	9a02      	ldr	r2, [sp, #8]
 800a012:	2100      	movs	r1, #0
 800a014:	9808      	ldr	r0, [sp, #32]
 800a016:	3204      	adds	r2, #4
 800a018:	f00a fffd 	bl	8015016 <memset>
				UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 800a01c:	4642      	mov	r2, r8
 800a01e:	9b05      	ldr	r3, [sp, #20]
 800a020:	3301      	adds	r3, #1
 800a022:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;
 800a024:	4b6e      	ldr	r3, [pc, #440]	; (800a1e0 <BackEndTask+0x374>)
 800a026:	4a6e      	ldr	r2, [pc, #440]	; (800a1e0 <BackEndTask+0x374>)
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	3301      	adds	r3, #1
 800a02c:	8013      	strh	r3, [r2, #0]
 800a02e:	e733      	b.n	8009e98 <BackEndTask+0x2c>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 800a030:	783a      	ldrb	r2, [r7, #0]
 800a032:	2a00      	cmp	r2, #0
 800a034:	d000      	beq.n	800a038 <BackEndTask+0x1cc>
 800a036:	e742      	b.n	8009ebe <BackEndTask+0x52>
 800a038:	2140      	movs	r1, #64	; 0x40
 800a03a:	e779      	b.n	8009f30 <BackEndTask+0xc4>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 800a03c:	783a      	ldrb	r2, [r7, #0]
 800a03e:	2a5a      	cmp	r2, #90	; 0x5a
 800a040:	d000      	beq.n	800a044 <BackEndTask+0x1d8>
 800a042:	e761      	b.n	8009f08 <BackEndTask+0x9c>
					packetLength =UARTRxBuf[port - 1][1];
 800a044:	787b      	ldrb	r3, [r7, #1]
 800a046:	9302      	str	r3, [sp, #8]
					parseStart =2;
 800a048:	233f      	movs	r3, #63	; 0x3f
 800a04a:	9304      	str	r3, [sp, #16]
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	3b3d      	subs	r3, #61	; 0x3d
 800a050:	9307      	str	r3, [sp, #28]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 800a052:	9b02      	ldr	r3, [sp, #8]
 800a054:	9a00      	ldr	r2, [sp, #0]
 800a056:	3303      	adds	r3, #3
 800a058:	469c      	mov	ip, r3
 800a05a:	9306      	str	r3, [sp, #24]
 800a05c:	4462      	add	r2, ip
 800a05e:	01b3      	lsls	r3, r6, #6
 800a060:	9201      	str	r2, [sp, #4]
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 800a062:	9303      	str	r3, [sp, #12]
 800a064:	9b01      	ldr	r3, [sp, #4]
 800a066:	3b40      	subs	r3, #64	; 0x40
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	e7a0      	b.n	8009fae <BackEndTask+0x142>
			}
		}

		taskYIELD();
 800a06c:	f006 ff06 	bl	8010e7c <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 800a070:	e707      	b.n	8009e82 <BackEndTask+0x16>
					memset(&UARTRxBuf[port - 1][packetStart],0,
 800a072:	9904      	ldr	r1, [sp, #16]
					MSG_RX_BUF_SIZE - packetStart);
 800a074:	2240      	movs	r2, #64	; 0x40
					memset(&UARTRxBuf[port - 1][packetStart],0,
 800a076:	468c      	mov	ip, r1
					MSG_RX_BUF_SIZE - packetStart);
 800a078:	9b00      	ldr	r3, [sp, #0]
					memset(&UARTRxBuf[port - 1][packetStart],0,
 800a07a:	2100      	movs	r1, #0
					MSG_RX_BUF_SIZE - packetStart);
 800a07c:	1ad3      	subs	r3, r2, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 800a07e:	9a03      	ldr	r2, [sp, #12]
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	4462      	add	r2, ip
 800a084:	0010      	movs	r0, r2
 800a086:	4a4f      	ldr	r2, [pc, #316]	; (800a1c4 <BackEndTask+0x358>)
 800a088:	4694      	mov	ip, r2
 800a08a:	001a      	movs	r2, r3
 800a08c:	4460      	add	r0, ip
 800a08e:	f00a ffc2 	bl	8015016 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800a092:	9b02      	ldr	r3, [sp, #8]
 800a094:	2100      	movs	r1, #0
 800a096:	3304      	adds	r3, #4
 800a098:	001a      	movs	r2, r3
 800a09a:	9b01      	ldr	r3, [sp, #4]
 800a09c:	0038      	movs	r0, r7
 800a09e:	1ad2      	subs	r2, r2, r3
 800a0a0:	f00a ffb9 	bl	8015016 <memset>
 800a0a4:	e7ba      	b.n	800a01c <BackEndTask+0x1b0>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 800a0a6:	4653      	mov	r3, sl
 800a0a8:	781b      	ldrb	r3, [r3, #0]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 800a0aa:	1cda      	adds	r2, r3, #3
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 800a0ac:	9305      	str	r3, [sp, #20]
 800a0ae:	9302      	str	r3, [sp, #8]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	233d      	movs	r3, #61	; 0x3d
 800a0b4:	9304      	str	r3, [sp, #16]
					parseStart =0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9307      	str	r3, [sp, #28]
 800a0ba:	01b3      	lsls	r3, r6, #6
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 800a0bc:	9206      	str	r2, [sp, #24]
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 800a0be:	9303      	str	r3, [sp, #12]
 800a0c0:	e777      	b.n	8009fb2 <BackEndTask+0x146>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 800a0c2:	9a04      	ldr	r2, [sp, #16]
 800a0c4:	9b03      	ldr	r3, [sp, #12]
 800a0c6:	4694      	mov	ip, r2
 800a0c8:	483e      	ldr	r0, [pc, #248]	; (800a1c4 <BackEndTask+0x358>)
 800a0ca:	4463      	add	r3, ip
 800a0cc:	001a      	movs	r2, r3
 800a0ce:	4684      	mov	ip, r0
 800a0d0:	4462      	add	r2, ip
 800a0d2:	0011      	movs	r1, r2
 800a0d4:	9208      	str	r2, [sp, #32]
						MSG_RX_BUF_SIZE - packetStart);
 800a0d6:	2240      	movs	r2, #64	; 0x40
 800a0d8:	9800      	ldr	r0, [sp, #0]
 800a0da:	1a12      	subs	r2, r2, r0
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 800a0dc:	483f      	ldr	r0, [pc, #252]	; (800a1dc <BackEndTask+0x370>)
 800a0de:	9209      	str	r2, [sp, #36]	; 0x24
 800a0e0:	f00a ff90 	bl	8015004 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 800a0e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0e6:	9903      	ldr	r1, [sp, #12]
 800a0e8:	4694      	mov	ip, r2
 800a0ea:	483c      	ldr	r0, [pc, #240]	; (800a1dc <BackEndTask+0x370>)
 800a0ec:	9b06      	ldr	r3, [sp, #24]
 800a0ee:	4460      	add	r0, ip
 800a0f0:	468c      	mov	ip, r1
 800a0f2:	1a9a      	subs	r2, r3, r2
 800a0f4:	4b33      	ldr	r3, [pc, #204]	; (800a1c4 <BackEndTask+0x358>)
 800a0f6:	4463      	add	r3, ip
 800a0f8:	0019      	movs	r1, r3
 800a0fa:	9306      	str	r3, [sp, #24]
 800a0fc:	f00a ff82 	bl	8015004 <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	4836      	ldr	r0, [pc, #216]	; (800a1dc <BackEndTask+0x370>)
 800a104:	1cd9      	adds	r1, r3, #3
 800a106:	f003 fc21 	bl	800d94c <CalculateCRC8>
					memset(crcBuffer,0,sizeof(crcBuffer));
 800a10a:	2238      	movs	r2, #56	; 0x38
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 800a10c:	9009      	str	r0, [sp, #36]	; 0x24
					memset(crcBuffer,0,sizeof(crcBuffer));
 800a10e:	2100      	movs	r1, #0
 800a110:	4832      	ldr	r0, [pc, #200]	; (800a1dc <BackEndTask+0x370>)
 800a112:	f00a ff80 	bl	8015016 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 800a116:	9a01      	ldr	r2, [sp, #4]
 800a118:	9b06      	ldr	r3, [sp, #24]
 800a11a:	5c9b      	ldrb	r3, [r3, r2]
 800a11c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a11e:	4293      	cmp	r3, r2
 800a120:	d1a7      	bne.n	800a072 <BackEndTask+0x206>
						portStatus[port] =MSG;
 800a122:	2301      	movs	r3, #1
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 800a124:	213f      	movs	r1, #63	; 0x3f
						messageLength[port - 1] =packetLength;
 800a126:	9a02      	ldr	r2, [sp, #8]
						portStatus[port] =MSG;
 800a128:	702b      	strb	r3, [r5, #0]
						messageLength[port - 1] =packetLength;
 800a12a:	4b2e      	ldr	r3, [pc, #184]	; (800a1e4 <BackEndTask+0x378>)
 800a12c:	559a      	strb	r2, [r3, r6]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 800a12e:	9b07      	ldr	r3, [sp, #28]
 800a130:	1acb      	subs	r3, r1, r3
 800a132:	4293      	cmp	r3, r2
 800a134:	db5c      	blt.n	800a1f0 <BackEndTask+0x384>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 800a136:	492c      	ldr	r1, [pc, #176]	; (800a1e8 <BackEndTask+0x37c>)
 800a138:	00f0      	lsls	r0, r6, #3
 800a13a:	468c      	mov	ip, r1
 800a13c:	1b80      	subs	r0, r0, r6
 800a13e:	9e03      	ldr	r6, [sp, #12]
 800a140:	00c0      	lsls	r0, r0, #3
 800a142:	4460      	add	r0, ip
 800a144:	46b4      	mov	ip, r6
 800a146:	9b07      	ldr	r3, [sp, #28]
 800a148:	4463      	add	r3, ip
 800a14a:	0019      	movs	r1, r3
 800a14c:	4b1d      	ldr	r3, [pc, #116]	; (800a1c4 <BackEndTask+0x358>)
 800a14e:	469c      	mov	ip, r3
 800a150:	4461      	add	r1, ip
 800a152:	f00a ff57 	bl	8015004 <memcpy>
						if(packetStart < packetEnd){
 800a156:	9b00      	ldr	r3, [sp, #0]
 800a158:	9a01      	ldr	r2, [sp, #4]
 800a15a:	4293      	cmp	r3, r2
 800a15c:	da19      	bge.n	800a192 <BackEndTask+0x326>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 800a15e:	9a02      	ldr	r2, [sp, #8]
 800a160:	2100      	movs	r1, #0
 800a162:	9808      	ldr	r0, [sp, #32]
 800a164:	3204      	adds	r2, #4
 800a166:	f00a ff56 	bl	8015016 <memset>
						UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 800a16a:	4642      	mov	r2, r8
 800a16c:	9b05      	ldr	r3, [sp, #20]
						NotifyMessagingTask(port);
 800a16e:	4648      	mov	r0, r9
						UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 800a170:	3301      	adds	r3, #1
 800a172:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 800a174:	4b1d      	ldr	r3, [pc, #116]	; (800a1ec <BackEndTask+0x380>)
 800a176:	4a1d      	ldr	r2, [pc, #116]	; (800a1ec <BackEndTask+0x380>)
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	3301      	adds	r3, #1
 800a17c:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 800a17e:	f7ff fb45 	bl	800980c <NotifyMessagingTask>
						continue; // Inspect the next port circular buffer
 800a182:	e69c      	b.n	8009ebe <BackEndTask+0x52>
					packetLength =UARTRxBuf[port - 1][0];
 800a184:	783b      	ldrb	r3, [r7, #0]
 800a186:	9302      	str	r3, [sp, #8]
					parseStart =1;
 800a188:	233e      	movs	r3, #62	; 0x3e
 800a18a:	9304      	str	r3, [sp, #16]
 800a18c:	3b3d      	subs	r3, #61	; 0x3d
 800a18e:	9307      	str	r3, [sp, #28]
 800a190:	e75f      	b.n	800a052 <BackEndTask+0x1e6>
							MSG_RX_BUF_SIZE - packetStart);
 800a192:	2640      	movs	r6, #64	; 0x40
 800a194:	9b00      	ldr	r3, [sp, #0]
							memset(&UARTRxBuf[port - 1][packetStart],0,
 800a196:	2100      	movs	r1, #0
							MSG_RX_BUF_SIZE - packetStart);
 800a198:	1af6      	subs	r6, r6, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 800a19a:	0032      	movs	r2, r6
 800a19c:	9808      	ldr	r0, [sp, #32]
 800a19e:	f00a ff3a 	bl	8015016 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800a1a2:	4908      	ldr	r1, [pc, #32]	; (800a1c4 <BackEndTask+0x358>)
 800a1a4:	9a02      	ldr	r2, [sp, #8]
 800a1a6:	468c      	mov	ip, r1
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	3204      	adds	r2, #4
 800a1ac:	4463      	add	r3, ip
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	1b92      	subs	r2, r2, r6
 800a1b4:	f00a ff2f 	bl	8015016 <memset>
 800a1b8:	e7d7      	b.n	800a16a <BackEndTask+0x2fe>
 800a1ba:	46c0      	nop			; (mov r8, r8)
 800a1bc:	20001360 	.word	0x20001360
 800a1c0:	200014e8 	.word	0x200014e8
 800a1c4:	20001368 	.word	0x20001368
 800a1c8:	20001191 	.word	0x20001191
 800a1cc:	20006ab0 	.word	0x20006ab0
 800a1d0:	20000b0f 	.word	0x20000b0f
 800a1d4:	20001190 	.word	0x20001190
 800a1d8:	2000159c 	.word	0x2000159c
 800a1dc:	200014f0 	.word	0x200014f0
 800a1e0:	20001830 	.word	0x20001830
 800a1e4:	20000fc8 	.word	0x20000fc8
 800a1e8:	20000da0 	.word	0x20000da0
 800a1ec:	20001688 	.word	0x20001688
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800a1f0:	00f3      	lsls	r3, r6, #3
 800a1f2:	1b9e      	subs	r6, r3, r6
 800a1f4:	00f3      	lsls	r3, r6, #3
 800a1f6:	469c      	mov	ip, r3
 800a1f8:	490f      	ldr	r1, [pc, #60]	; (800a238 <BackEndTask+0x3cc>)
							MSG_RX_BUF_SIZE - parseStart);
 800a1fa:	2640      	movs	r6, #64	; 0x40
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800a1fc:	4461      	add	r1, ip
 800a1fe:	0008      	movs	r0, r1
 800a200:	9903      	ldr	r1, [sp, #12]
							MSG_RX_BUF_SIZE - parseStart);
 800a202:	9a07      	ldr	r2, [sp, #28]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800a204:	468c      	mov	ip, r1
							MSG_RX_BUF_SIZE - parseStart);
 800a206:	1ab6      	subs	r6, r6, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800a208:	4462      	add	r2, ip
 800a20a:	0011      	movs	r1, r2
 800a20c:	4a0b      	ldr	r2, [pc, #44]	; (800a23c <BackEndTask+0x3d0>)
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	4694      	mov	ip, r2
 800a212:	0032      	movs	r2, r6
 800a214:	4461      	add	r1, ip
 800a216:	f00a fef5 	bl	8015004 <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 800a21a:	9b04      	ldr	r3, [sp, #16]
 800a21c:	18f0      	adds	r0, r6, r3
 800a21e:	4b06      	ldr	r3, [pc, #24]	; (800a238 <BackEndTask+0x3cc>)
 800a220:	469c      	mov	ip, r3
 800a222:	9b02      	ldr	r3, [sp, #8]
 800a224:	4460      	add	r0, ip
 800a226:	1b9a      	subs	r2, r3, r6
 800a228:	4b04      	ldr	r3, [pc, #16]	; (800a23c <BackEndTask+0x3d0>)
 800a22a:	0019      	movs	r1, r3
 800a22c:	9b03      	ldr	r3, [sp, #12]
 800a22e:	469c      	mov	ip, r3
 800a230:	4461      	add	r1, ip
 800a232:	f00a fee7 	bl	8015004 <memcpy>
 800a236:	e78e      	b.n	800a156 <BackEndTask+0x2ea>
 800a238:	20000da0 	.word	0x20000da0
 800a23c:	20001368 	.word	0x20001368

0800a240 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800a240:	2001      	movs	r0, #1
 800a242:	4770      	bx	lr

0800a244 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800a244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a246:	464e      	mov	r6, r9
 800a248:	46de      	mov	lr, fp
 800a24a:	4645      	mov	r5, r8
 800a24c:	4657      	mov	r7, sl
 800a24e:	2300      	movs	r3, #0
 800a250:	b5e0      	push	{r5, r6, r7, lr}
 800a252:	b099      	sub	sp, #100	; 0x64
 800a254:	9309      	str	r3, [sp, #36]	; 0x24
	port =(int8_t )(unsigned )argument;
 800a256:	b2c3      	uxtb	r3, r0
 800a258:	9307      	str	r3, [sp, #28]
 800a25a:	23ff      	movs	r3, #255	; 0xff
 800a25c:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 800a25e:	1e5d      	subs	r5, r3, #1
 800a260:	4699      	mov	r9, r3
 800a262:	00eb      	lsls	r3, r5, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a264:	4aec      	ldr	r2, [pc, #944]	; (800a618 <PxMessagingTask+0x3d4>)
 800a266:	9306      	str	r3, [sp, #24]
 800a268:	1b5b      	subs	r3, r3, r5
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	4693      	mov	fp, r2
 800a26e:	1e5a      	subs	r2, r3, #1
 800a270:	920e      	str	r2, [sp, #56]	; 0x38
	HAL_StatusTypeDef status =HAL_OK;
 800a272:	2200      	movs	r2, #0
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a274:	469c      	mov	ip, r3
 800a276:	930a      	str	r3, [sp, #40]	; 0x28
 800a278:	3301      	adds	r3, #1
 800a27a:	930f      	str	r3, [sp, #60]	; 0x3c
									ADCPort =cMessage[port - 1][shift];
 800a27c:	2338      	movs	r3, #56	; 0x38
	HAL_StatusTypeDef status =HAL_OK;
 800a27e:	920d      	str	r2, [sp, #52]	; 0x34
	BOS_Status result =BOS_OK;
 800a280:	9204      	str	r2, [sp, #16]
 800a282:	00aa      	lsls	r2, r5, #2
 800a284:	920c      	str	r2, [sp, #48]	; 0x30
									ADCPort =cMessage[port - 1][shift];
 800a286:	4ae4      	ldr	r2, [pc, #912]	; (800a618 <PxMessagingTask+0x3d4>)
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a288:	44e3      	add	fp, ip
									ADCPort =cMessage[port - 1][shift];
 800a28a:	4694      	mov	ip, r2
 800a28c:	436b      	muls	r3, r5
 800a28e:	4ee3      	ldr	r6, [pc, #908]	; (800a61c <PxMessagingTask+0x3d8>)
 800a290:	4463      	add	r3, ip
 800a292:	930b      	str	r3, [sp, #44]	; 0x2c
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a294:	2101      	movs	r1, #1
 800a296:	2001      	movs	r0, #1
 800a298:	4249      	negs	r1, r1
 800a29a:	f006 fb1d 	bl	80108d8 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800a29e:	5d72      	ldrb	r2, [r6, r5]
 800a2a0:	2a00      	cmp	r2, #0
 800a2a2:	d100      	bne.n	800a2a6 <PxMessagingTask+0x62>
 800a2a4:	e0ae      	b.n	800a404 <PxMessagingTask+0x1c0>
			if(cMessage[port - 1][2] >> 7){
 800a2a6:	9b06      	ldr	r3, [sp, #24]
 800a2a8:	4fdd      	ldr	r7, [pc, #884]	; (800a620 <PxMessagingTask+0x3dc>)
 800a2aa:	1b58      	subs	r0, r3, r5
 800a2ac:	4bda      	ldr	r3, [pc, #872]	; (800a618 <PxMessagingTask+0x3d4>)
 800a2ae:	00c0      	lsls	r0, r0, #3
 800a2b0:	181b      	adds	r3, r3, r0
 800a2b2:	7899      	ldrb	r1, [r3, #2]
 800a2b4:	09cc      	lsrs	r4, r1, #7
 800a2b6:	703c      	strb	r4, [r7, #0]
			dst =cMessage[port - 1][0];
 800a2b8:	4cd7      	ldr	r4, [pc, #860]	; (800a618 <PxMessagingTask+0x3d4>)
			BOS.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03); // 3rd-4th bits Trace
 800a2ba:	4fda      	ldr	r7, [pc, #872]	; (800a624 <PxMessagingTask+0x3e0>)
			dst =cMessage[port - 1][0];
 800a2bc:	5c20      	ldrb	r0, [r4, r0]
 800a2be:	2401      	movs	r4, #1
 800a2c0:	4680      	mov	r8, r0
			src =cMessage[port - 1][1];
 800a2c2:	7858      	ldrb	r0, [r3, #1]
 800a2c4:	400c      	ands	r4, r1
 800a2c6:	4682      	mov	sl, r0
			BOS.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03); // 3rd-4th bits Trace
 800a2c8:	0708      	lsls	r0, r1, #28
 800a2ca:	0f80      	lsrs	r0, r0, #30
 800a2cc:	71f8      	strb	r0, [r7, #7]
			BOS.response =(cMessage[port - 1][2]) & 0x60; // 6th-7th bits Response mode
 800a2ce:	2060      	movs	r0, #96	; 0x60
 800a2d0:	4008      	ands	r0, r1
 800a2d2:	71b8      	strb	r0, [r7, #6]
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a2d4:	191b      	adds	r3, r3, r4
			if(extendCode == true){
 800a2d6:	0789      	lsls	r1, r1, #30
 800a2d8:	d401      	bmi.n	800a2de <PxMessagingTask+0x9a>
 800a2da:	f000 fcbe 	bl	800ac5a <PxMessagingTask+0xa16>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a2de:	7919      	ldrb	r1, [r3, #4]
 800a2e0:	78df      	ldrb	r7, [r3, #3]
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a2e2:	4643      	mov	r3, r8
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a2e4:	0209      	lsls	r1, r1, #8
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a2e6:	3b01      	subs	r3, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a2e8:	187f      	adds	r7, r7, r1
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a2ea:	b2db      	uxtb	r3, r3
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a2ec:	b2bf      	uxth	r7, r7
				++shift;
 800a2ee:	3401      	adds	r4, #1
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a2f0:	2bfc      	cmp	r3, #252	; 0xfc
 800a2f2:	d801      	bhi.n	800a2f8 <PxMessagingTask+0xb4>
 800a2f4:	f000 fcb9 	bl	800ac6a <PxMessagingTask+0xa26>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a2f8:	4643      	mov	r3, r8
 800a2fa:	2bff      	cmp	r3, #255	; 0xff
 800a2fc:	d001      	beq.n	800a302 <PxMessagingTask+0xbe>
 800a2fe:	f000 fcdd 	bl	800acbc <PxMessagingTask+0xa78>
 800a302:	49c5      	ldr	r1, [pc, #788]	; (800a618 <PxMessagingTask+0x3d4>)
 800a304:	9b06      	ldr	r3, [sp, #24]
 800a306:	468c      	mov	ip, r1
 800a308:	1b5b      	subs	r3, r3, r5
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	4463      	add	r3, ip
 800a30e:	49c6      	ldr	r1, [pc, #792]	; (800a628 <PxMessagingTask+0x3e4>)
 800a310:	9308      	str	r3, [sp, #32]
 800a312:	189b      	adds	r3, r3, r2
 800a314:	3b01      	subs	r3, #1
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	7809      	ldrb	r1, [r1, #0]
 800a31a:	4299      	cmp	r1, r3
 800a31c:	d101      	bne.n	800a322 <PxMessagingTask+0xde>
 800a31e:	f000 fd18 	bl	800ad52 <PxMessagingTask+0xb0e>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a322:	4ac1      	ldr	r2, [pc, #772]	; (800a628 <PxMessagingTask+0x3e4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a324:	9907      	ldr	r1, [sp, #28]
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a326:	7013      	strb	r3, [r2, #0]
 800a328:	4ac0      	ldr	r2, [pc, #768]	; (800a62c <PxMessagingTask+0x3e8>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a32a:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a32c:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a32e:	f7ff fc4d 	bl	8009bcc <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a332:	2100      	movs	r1, #0
 800a334:	5d72      	ldrb	r2, [r6, r5]
 800a336:	9b08      	ldr	r3, [sp, #32]
 800a338:	189b      	adds	r3, r3, r2
 800a33a:	3b01      	subs	r3, #1
 800a33c:	7019      	strb	r1, [r3, #0]
				if(result == BOS_OK){
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d15f      	bne.n	800a404 <PxMessagingTask+0x1c0>
				shift +=4;
 800a344:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800a346:	1b13      	subs	r3, r2, r4
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	9308      	str	r3, [sp, #32]
					switch(code){
 800a34c:	2f24      	cmp	r7, #36	; 0x24
 800a34e:	d84c      	bhi.n	800a3ea <PxMessagingTask+0x1a6>
 800a350:	49b7      	ldr	r1, [pc, #732]	; (800a630 <PxMessagingTask+0x3ec>)
 800a352:	00bb      	lsls	r3, r7, #2
 800a354:	58cb      	ldr	r3, [r1, r3]
 800a356:	469f      	mov	pc, r3
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a35a:	191a      	adds	r2, r3, r4
 800a35c:	7893      	ldrb	r3, [r2, #2]
 800a35e:	78d1      	ldrb	r1, [r2, #3]
 800a360:	021b      	lsls	r3, r3, #8
 800a362:	0409      	lsls	r1, r1, #16
 800a364:	185b      	adds	r3, r3, r1
 800a366:	7851      	ldrb	r1, [r2, #1]
 800a368:	7912      	ldrb	r2, [r2, #4]
 800a36a:	185b      	adds	r3, r3, r1
 800a36c:	0612      	lsls	r2, r2, #24
 800a36e:	189b      	adds	r3, r3, r2
 800a370:	4ab0      	ldr	r2, [pc, #704]	; (800a634 <PxMessagingTask+0x3f0>)
 800a372:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800a374:	4bb0      	ldr	r3, [pc, #704]	; (800a638 <PxMessagingTask+0x3f4>)
									ADCSide =cMessage[port - 1][shift + 1];
 800a376:	4ab1      	ldr	r2, [pc, #708]	; (800a63c <PxMessagingTask+0x3f8>)
									ADCPort =cMessage[port - 1][shift];
 800a378:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800a37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a37c:	191b      	adds	r3, r3, r4
 800a37e:	785b      	ldrb	r3, [r3, #1]
 800a380:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800a382:	2b00      	cmp	r3, #0
 800a384:	d101      	bne.n	800a38a <PxMessagingTask+0x146>
 800a386:	f000 fe58 	bl	800b03a <PxMessagingTask+0xdf6>
									else if(1 == ADCSide){
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d108      	bne.n	800a3a0 <PxMessagingTask+0x15c>
										ADCSelectChannel(ADCPort,"bottom");
 800a38e:	49ac      	ldr	r1, [pc, #688]	; (800a640 <PxMessagingTask+0x3fc>)
 800a390:	f7fe fdf2 	bl	8008f78 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800a394:	4ba8      	ldr	r3, [pc, #672]	; (800a638 <PxMessagingTask+0x3f4>)
 800a396:	4aab      	ldr	r2, [pc, #684]	; (800a644 <PxMessagingTask+0x400>)
 800a398:	7818      	ldrb	r0, [r3, #0]
 800a39a:	49a9      	ldr	r1, [pc, #676]	; (800a640 <PxMessagingTask+0x3fc>)
 800a39c:	f7fe fe3a 	bl	8009014 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800a3a0:	49a9      	ldr	r1, [pc, #676]	; (800a648 <PxMessagingTask+0x404>)
 800a3a2:	48aa      	ldr	r0, [pc, #680]	; (800a64c <PxMessagingTask+0x408>)
 800a3a4:	f7fe fc26 	bl	8008bf4 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800a3a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3aa:	4aa3      	ldr	r2, [pc, #652]	; (800a638 <PxMessagingTask+0x3f4>)
 800a3ac:	5d18      	ldrb	r0, [r3, r4]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a3ae:	49a8      	ldr	r1, [pc, #672]	; (800a650 <PxMessagingTask+0x40c>)
									ADCPort =cMessage[port - 1][shift];
 800a3b0:	8010      	strh	r0, [r2, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a3b2:	f7fe fce7 	bl	8008d84 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a3b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3b8:	191a      	adds	r2, r3, r4
 800a3ba:	7993      	ldrb	r3, [r2, #6]
 800a3bc:	79d1      	ldrb	r1, [r2, #7]
 800a3be:	021b      	lsls	r3, r3, #8
 800a3c0:	0409      	lsls	r1, r1, #16
 800a3c2:	185b      	adds	r3, r3, r1
 800a3c4:	7951      	ldrb	r1, [r2, #5]
 800a3c6:	185b      	adds	r3, r3, r1
 800a3c8:	7a11      	ldrb	r1, [r2, #8]
 800a3ca:	0609      	lsls	r1, r1, #24
 800a3cc:	185b      	adds	r3, r3, r1
 800a3ce:	4999      	ldr	r1, [pc, #612]	; (800a634 <PxMessagingTask+0x3f0>)
 800a3d0:	61cb      	str	r3, [r1, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a3d2:	7a93      	ldrb	r3, [r2, #10]
 800a3d4:	7ad1      	ldrb	r1, [r2, #11]
 800a3d6:	021b      	lsls	r3, r3, #8
 800a3d8:	0409      	lsls	r1, r1, #16
 800a3da:	185b      	adds	r3, r3, r1
 800a3dc:	7a51      	ldrb	r1, [r2, #9]
 800a3de:	7b12      	ldrb	r2, [r2, #12]
 800a3e0:	185b      	adds	r3, r3, r1
 800a3e2:	0612      	lsls	r2, r2, #24
 800a3e4:	189b      	adds	r3, r3, r2
 800a3e6:	4a93      	ldr	r2, [pc, #588]	; (800a634 <PxMessagingTask+0x3f0>)
 800a3e8:	6213      	str	r3, [r2, #32]
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800a3ea:	4643      	mov	r3, r8
 800a3ec:	4652      	mov	r2, sl
 800a3ee:	0038      	movs	r0, r7
 800a3f0:	9907      	ldr	r1, [sp, #28]
 800a3f2:	9400      	str	r4, [sp, #0]
 800a3f4:	f7ff ff24 	bl	800a240 <User_MessagingParser>
 800a3f8:	9004      	str	r0, [sp, #16]
							if(result == BOS_ERR_UnknownMessage){
 800a3fa:	2801      	cmp	r0, #1
 800a3fc:	d101      	bne.n	800a402 <PxMessagingTask+0x1be>
 800a3fe:	f000 fc11 	bl	800ac24 <PxMessagingTask+0x9e0>
 800a402:	5d72      	ldrb	r2, [r6, r5]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a404:	2100      	movs	r1, #0
 800a406:	4658      	mov	r0, fp
 800a408:	f00a fe05 	bl	8015016 <memset>
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a40c:	4649      	mov	r1, r9
		messageLength[port - 1] =0;
 800a40e:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a410:	4b90      	ldr	r3, [pc, #576]	; (800a654 <PxMessagingTask+0x410>)
		messageLength[port - 1] =0;
 800a412:	5572      	strb	r2, [r6, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a414:	5c5b      	ldrb	r3, [r3, r1]
 800a416:	3b02      	subs	r3, #2
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d901      	bls.n	800a420 <PxMessagingTask+0x1dc>
			portStatus[port] =FREE;
 800a41c:	4b8d      	ldr	r3, [pc, #564]	; (800a654 <PxMessagingTask+0x410>)
 800a41e:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a420:	f006 fd2c 	bl	8010e7c <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a424:	e736      	b.n	800a294 <PxMessagingTask+0x50>
							responseStatus =BOS_OK; // Initialize response
 800a426:	2300      	movs	r3, #0
 800a428:	4a8b      	ldr	r2, [pc, #556]	; (800a658 <PxMessagingTask+0x414>)
 800a42a:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800a42c:	4a7a      	ldr	r2, [pc, #488]	; (800a618 <PxMessagingTask+0x3d4>)
 800a42e:	9b06      	ldr	r3, [sp, #24]
 800a430:	4694      	mov	ip, r2
 800a432:	1b5b      	subs	r3, r3, r5
 800a434:	00db      	lsls	r3, r3, #3
 800a436:	4463      	add	r3, ip
 800a438:	5d1b      	ldrb	r3, [r3, r4]
 800a43a:	9304      	str	r3, [sp, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <PxMessagingTask+0x200>
 800a440:	f000 fd40 	bl	800aec4 <PxMessagingTask+0xc80>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800a444:	2b1e      	cmp	r3, #30
 800a446:	d901      	bls.n	800a44c <PxMessagingTask+0x208>
 800a448:	f000 fdcb 	bl	800afe2 <PxMessagingTask+0xd9e>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a44c:	3b01      	subs	r3, #1
 800a44e:	009f      	lsls	r7, r3, #2
 800a450:	4b82      	ldr	r3, [pc, #520]	; (800a65c <PxMessagingTask+0x418>)
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a452:	990b      	ldr	r1, [sp, #44]	; 0x2c
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a454:	59da      	ldr	r2, [r3, r7]
 800a456:	2380      	movs	r3, #128	; 0x80
 800a458:	059b      	lsls	r3, r3, #22
 800a45a:	469c      	mov	ip, r3
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a45c:	1c63      	adds	r3, r4, #1
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	5ccb      	ldrb	r3, [r1, r3]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a462:	0c10      	lsrs	r0, r2, #16
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a464:	4698      	mov	r8, r3
 800a466:	3b01      	subs	r3, #1
 800a468:	b2db      	uxtb	r3, r3
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a46a:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a46c:	2b07      	cmp	r3, #7
 800a46e:	d901      	bls.n	800a474 <PxMessagingTask+0x230>
 800a470:	f000 fda1 	bl	800afb6 <PxMessagingTask+0xd72>
 800a474:	497a      	ldr	r1, [pc, #488]	; (800a660 <PxMessagingTask+0x41c>)
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	58cb      	ldr	r3, [r1, r3]
 800a47a:	469f      	mov	pc, r3
							ClearEEportsDir();
 800a47c:	f7f9 fd60 	bl	8003f40 <ClearEEportsDir>
							ClearROtopology();
 800a480:	f002 f9d6 	bl	800c830 <ClearROtopology>
							osDelay(100);
 800a484:	2064      	movs	r0, #100	; 0x64
 800a486:	f004 fdf1 	bl	800f06c <osDelay>
							indMode =IND_TOPOLOGY;
 800a48a:	2302      	movs	r3, #2
 800a48c:	4a75      	ldr	r2, [pc, #468]	; (800a664 <PxMessagingTask+0x420>)
 800a48e:	7013      	strb	r3, [r2, #0]
 800a490:	2300      	movs	r3, #0
 800a492:	5d72      	ldrb	r2, [r6, r5]
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	e7b5      	b.n	800a404 <PxMessagingTask+0x1c0>
							indMode =IND_PING;
 800a498:	2301      	movs	r3, #1
 800a49a:	4a72      	ldr	r2, [pc, #456]	; (800a664 <PxMessagingTask+0x420>)
							osDelay(10);
 800a49c:	200a      	movs	r0, #10
							indMode =IND_PING;
 800a49e:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a4a0:	f004 fde4 	bl	800f06c <osDelay>
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 800a4a4:	2240      	movs	r2, #64	; 0x40
 800a4a6:	4b5f      	ldr	r3, [pc, #380]	; (800a624 <PxMessagingTask+0x3e0>)
 800a4a8:	799b      	ldrb	r3, [r3, #6]
 800a4aa:	4393      	bics	r3, r2
 800a4ac:	2b20      	cmp	r3, #32
 800a4ae:	d1ef      	bne.n	800a490 <PxMessagingTask+0x24c>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2102      	movs	r1, #2
 800a4b4:	e3c4      	b.n	800ac40 <PxMessagingTask+0x9fc>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a4b6:	4a58      	ldr	r2, [pc, #352]	; (800a618 <PxMessagingTask+0x3d4>)
 800a4b8:	9b06      	ldr	r3, [sp, #24]
 800a4ba:	4694      	mov	ip, r2
 800a4bc:	1b5b      	subs	r3, r3, r5
 800a4be:	00db      	lsls	r3, r3, #3
 800a4c0:	4463      	add	r3, ip
 800a4c2:	5d1b      	ldrb	r3, [r3, r4]
 800a4c4:	4a64      	ldr	r2, [pc, #400]	; (800a658 <PxMessagingTask+0x414>)
 800a4c6:	7013      	strb	r3, [r2, #0]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	5d72      	ldrb	r2, [r6, r5]
 800a4cc:	9304      	str	r3, [sp, #16]
 800a4ce:	e799      	b.n	800a404 <PxMessagingTask+0x1c0>
							IND_ON();
 800a4d0:	2201      	movs	r2, #1
							IND_OFF();
 800a4d2:	2180      	movs	r1, #128	; 0x80
 800a4d4:	2090      	movs	r0, #144	; 0x90
 800a4d6:	0109      	lsls	r1, r1, #4
 800a4d8:	05c0      	lsls	r0, r0, #23
 800a4da:	f008 fabf 	bl	8012a5c <HAL_GPIO_WritePin>
							indMode =IND_TOPOLOGY;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	5d72      	ldrb	r2, [r6, r5]
 800a4e2:	9304      	str	r3, [sp, #16]
 800a4e4:	e78e      	b.n	800a404 <PxMessagingTask+0x1c0>
							if(!moduleAlias[myID][0])
 800a4e6:	4b60      	ldr	r3, [pc, #384]	; (800a668 <PxMessagingTask+0x424>)
 800a4e8:	781a      	ldrb	r2, [r3, #0]
 800a4ea:	0093      	lsls	r3, r2, #2
 800a4ec:	189b      	adds	r3, r3, r2
 800a4ee:	4a5f      	ldr	r2, [pc, #380]	; (800a66c <PxMessagingTask+0x428>)
 800a4f0:	005b      	lsls	r3, r3, #1
 800a4f2:	5cd3      	ldrb	r3, [r2, r3]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <PxMessagingTask+0x2b8>
 800a4f8:	f000 fcdd 	bl	800aeb6 <PxMessagingTask+0xc72>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800a4fc:	4652      	mov	r2, sl
 800a4fe:	230a      	movs	r3, #10
 800a500:	4353      	muls	r3, r2
 800a502:	4a5a      	ldr	r2, [pc, #360]	; (800a66c <PxMessagingTask+0x428>)
 800a504:	495a      	ldr	r1, [pc, #360]	; (800a670 <PxMessagingTask+0x42c>)
 800a506:	4694      	mov	ip, r2
 800a508:	485a      	ldr	r0, [pc, #360]	; (800a674 <PxMessagingTask+0x430>)
 800a50a:	4652      	mov	r2, sl
 800a50c:	4463      	add	r3, ip
 800a50e:	f00a ffab 	bl	8015468 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a512:	4858      	ldr	r0, [pc, #352]	; (800a674 <PxMessagingTask+0x430>)
 800a514:	f7f5 fe00 	bl	8000118 <strlen>
 800a518:	4b57      	ldr	r3, [pc, #348]	; (800a678 <PxMessagingTask+0x434>)
 800a51a:	b282      	uxth	r2, r0
 800a51c:	7818      	ldrb	r0, [r3, #0]
 800a51e:	2301      	movs	r3, #1
 800a520:	425b      	negs	r3, r3
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	4953      	ldr	r1, [pc, #332]	; (800a674 <PxMessagingTask+0x430>)
 800a526:	3333      	adds	r3, #51	; 0x33
 800a528:	f004 f88e 	bl	800e648 <writePxMutex>
							responseStatus =BOS_OK;
 800a52c:	e015      	b.n	800a55a <PxMessagingTask+0x316>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a52e:	4a3a      	ldr	r2, [pc, #232]	; (800a618 <PxMessagingTask+0x3d4>)
 800a530:	4651      	mov	r1, sl
 800a532:	4694      	mov	ip, r2
 800a534:	9b06      	ldr	r3, [sp, #24]
 800a536:	0209      	lsls	r1, r1, #8
 800a538:	1b5b      	subs	r3, r3, r5
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	4463      	add	r3, ip
 800a53e:	1918      	adds	r0, r3, r4
 800a540:	7882      	ldrb	r2, [r0, #2]
 800a542:	4f4e      	ldr	r7, [pc, #312]	; (800a67c <PxMessagingTask+0x438>)
 800a544:	1852      	adds	r2, r2, r1
 800a546:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a548:	53ca      	strh	r2, [r1, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a54a:	468c      	mov	ip, r1
 800a54c:	003a      	movs	r2, r7
 800a54e:	5d19      	ldrb	r1, [r3, r4]
 800a550:	7843      	ldrb	r3, [r0, #1]
 800a552:	0209      	lsls	r1, r1, #8
 800a554:	4462      	add	r2, ip
 800a556:	185b      	adds	r3, r3, r1
 800a558:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	4a3e      	ldr	r2, [pc, #248]	; (800a658 <PxMessagingTask+0x414>)
 800a55e:	9304      	str	r3, [sp, #16]
 800a560:	7013      	strb	r3, [r2, #0]
		if(result == BOS_ERR_UnknownMessage){
 800a562:	5d72      	ldrb	r2, [r6, r5]
 800a564:	e74e      	b.n	800a404 <PxMessagingTask+0x1c0>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a566:	4a2c      	ldr	r2, [pc, #176]	; (800a618 <PxMessagingTask+0x3d4>)
 800a568:	4651      	mov	r1, sl
 800a56a:	4694      	mov	ip, r2
 800a56c:	9b06      	ldr	r3, [sp, #24]
 800a56e:	0209      	lsls	r1, r1, #8
 800a570:	1b5b      	subs	r3, r3, r5
 800a572:	00db      	lsls	r3, r3, #3
 800a574:	4463      	add	r3, ip
 800a576:	1918      	adds	r0, r3, r4
 800a578:	7882      	ldrb	r2, [r0, #2]
 800a57a:	4f40      	ldr	r7, [pc, #256]	; (800a67c <PxMessagingTask+0x438>)
 800a57c:	1852      	adds	r2, r2, r1
 800a57e:	990c      	ldr	r1, [sp, #48]	; 0x30
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a580:	468c      	mov	ip, r1
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a582:	53ca      	strh	r2, [r1, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a584:	003a      	movs	r2, r7
 800a586:	5d19      	ldrb	r1, [r3, r4]
 800a588:	7843      	ldrb	r3, [r0, #1]
 800a58a:	0209      	lsls	r1, r1, #8
 800a58c:	4462      	add	r2, ip
 800a58e:	185b      	adds	r3, r3, r1
 800a590:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 800a592:	4b3b      	ldr	r3, [pc, #236]	; (800a680 <PxMessagingTask+0x43c>)
 800a594:	4a3b      	ldr	r2, [pc, #236]	; (800a684 <PxMessagingTask+0x440>)
 800a596:	881b      	ldrh	r3, [r3, #0]
							messageParams[2] =port;
 800a598:	9c07      	ldr	r4, [sp, #28]
							messageParams[1] =(uint8_t )myPN;
 800a59a:	7053      	strb	r3, [r2, #1]
							osDelay(2);
 800a59c:	2002      	movs	r0, #2
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a59e:	0a1b      	lsrs	r3, r3, #8
 800a5a0:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a5a2:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a5a4:	f004 fd62 	bl	800f06c <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	0020      	movs	r0, r4
 800a5b4:	f7ff f952 	bl	800985c <SendMessageFromPort>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	5d72      	ldrb	r2, [r6, r5]
 800a5bc:	9304      	str	r3, [sp, #16]
 800a5be:	e721      	b.n	800a404 <PxMessagingTask+0x1c0>
							IND_toggle();
 800a5c0:	2180      	movs	r1, #128	; 0x80
 800a5c2:	2090      	movs	r0, #144	; 0x90
 800a5c4:	0109      	lsls	r1, r1, #4
 800a5c6:	05c0      	lsls	r0, r0, #23
 800a5c8:	f008 fa4e 	bl	8012a68 <HAL_GPIO_TogglePin>
							indMode =IND_TOPOLOGY;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	5d72      	ldrb	r2, [r6, r5]
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	e717      	b.n	800a404 <PxMessagingTask+0x1c0>
							IND_OFF();
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	e77c      	b.n	800a4d2 <PxMessagingTask+0x28e>
							for(p =0; p < numOfParams; p++){
 800a5d8:	9b08      	ldr	r3, [sp, #32]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d0bd      	beq.n	800a55a <PxMessagingTask+0x316>
 800a5de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a5e0:	4651      	mov	r1, sl
 800a5e2:	4694      	mov	ip, r2
 800a5e4:	4a0c      	ldr	r2, [pc, #48]	; (800a618 <PxMessagingTask+0x3d4>)
 800a5e6:	4464      	add	r4, ip
 800a5e8:	4694      	mov	ip, r2
 800a5ea:	3901      	subs	r1, #1
 800a5ec:	0049      	lsls	r1, r1, #1
 800a5ee:	4464      	add	r4, ip
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	468c      	mov	ip, r1
 800a5f4:	4b24      	ldr	r3, [pc, #144]	; (800a688 <PxMessagingTask+0x444>)
 800a5f6:	9f08      	ldr	r7, [sp, #32]
 800a5f8:	5a5b      	ldrh	r3, [r3, r1]
 800a5fa:	2180      	movs	r1, #128	; 0x80
 800a5fc:	5ca0      	ldrb	r0, [r4, r2]
 800a5fe:	0209      	lsls	r1, r1, #8
 800a600:	3801      	subs	r0, #1
 800a602:	4101      	asrs	r1, r0
 800a604:	3201      	adds	r2, #1
 800a606:	430b      	orrs	r3, r1
							for(p =0; p < numOfParams; p++){
 800a608:	b2d0      	uxtb	r0, r2
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a60a:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 800a60c:	42b8      	cmp	r0, r7
 800a60e:	d3f4      	bcc.n	800a5fa <PxMessagingTask+0x3b6>
 800a610:	4661      	mov	r1, ip
 800a612:	4a1d      	ldr	r2, [pc, #116]	; (800a688 <PxMessagingTask+0x444>)
 800a614:	5253      	strh	r3, [r2, r1]
 800a616:	e7a0      	b.n	800a55a <PxMessagingTask+0x316>
 800a618:	20000da0 	.word	0x20000da0
 800a61c:	20000fc8 	.word	0x20000fc8
 800a620:	20000f8d 	.word	0x20000f8d
 800a624:	20006ab0 	.word	0x20006ab0
 800a628:	2000168a 	.word	0x2000168a
 800a62c:	20000d4c 	.word	0x20000d4c
 800a630:	0801dc90 	.word	0x0801dc90
 800a634:	20001664 	.word	0x20001664
 800a638:	20001654 	.word	0x20001654
 800a63c:	20001656 	.word	0x20001656
 800a640:	0801be2c 	.word	0x0801be2c
 800a644:	20001658 	.word	0x20001658
 800a648:	20001660 	.word	0x20001660
 800a64c:	2000165c 	.word	0x2000165c
 800a650:	20001650 	.word	0x20001650
 800a654:	20001190 	.word	0x20001190
 800a658:	200011a8 	.word	0x200011a8
 800a65c:	20006a38 	.word	0x20006a38
 800a660:	0801dd24 	.word	0x0801dd24
 800a664:	20000f8c 	.word	0x20000f8c
 800a668:	2000110e 	.word	0x2000110e
 800a66c:	20001000 	.word	0x20001000
 800a670:	0801c818 	.word	0x0801c818
 800a674:	200017e0 	.word	0x200017e0
 800a678:	20000b0f 	.word	0x20000b0f
 800a67c:	20001110 	.word	0x20001110
 800a680:	20000050 	.word	0x20000050
 800a684:	20000fd0 	.word	0x20000fd0
 800a688:	20006f68 	.word	0x20006f68
							if(longMessage){
 800a68c:	4bdd      	ldr	r3, [pc, #884]	; (800aa04 <PxMessagingTask+0x7c0>)
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	9304      	str	r3, [sp, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d100      	bne.n	800a698 <PxMessagingTask+0x454>
 800a696:	e3ed      	b.n	800ae74 <PxMessagingTask+0xc30>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a698:	4bdb      	ldr	r3, [pc, #876]	; (800aa08 <PxMessagingTask+0x7c4>)
 800a69a:	881f      	ldrh	r7, [r3, #0]
 800a69c:	4bdb      	ldr	r3, [pc, #876]	; (800aa0c <PxMessagingTask+0x7c8>)
 800a69e:	19d8      	adds	r0, r3, r7
 800a6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a2:	469c      	mov	ip, r3
 800a6a4:	4bda      	ldr	r3, [pc, #872]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a6a6:	4464      	add	r4, ip
 800a6a8:	1919      	adds	r1, r3, r4
 800a6aa:	9c08      	ldr	r4, [sp, #32]
 800a6ac:	0022      	movs	r2, r4
 800a6ae:	f00a fca9 	bl	8015004 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a6b2:	46a4      	mov	ip, r4
 800a6b4:	4bd4      	ldr	r3, [pc, #848]	; (800aa08 <PxMessagingTask+0x7c4>)
 800a6b6:	4467      	add	r7, ip
 800a6b8:	801f      	strh	r7, [r3, #0]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	5d72      	ldrb	r2, [r6, r5]
 800a6be:	9304      	str	r3, [sp, #16]
 800a6c0:	e6a0      	b.n	800a404 <PxMessagingTask+0x1c0>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a6c2:	4ad3      	ldr	r2, [pc, #844]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a6c4:	9b06      	ldr	r3, [sp, #24]
 800a6c6:	4694      	mov	ip, r2
 800a6c8:	1b5b      	subs	r3, r3, r5
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	4463      	add	r3, ip
 800a6ce:	5d1b      	ldrb	r3, [r3, r4]
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d000      	beq.n	800a6d8 <PxMessagingTask+0x494>
 800a6d6:	e3b3      	b.n	800ae40 <PxMessagingTask+0xbfc>
								myID =cMessage[port - 1][1 + shift];
 800a6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6da:	4ace      	ldr	r2, [pc, #824]	; (800aa14 <PxMessagingTask+0x7d0>)
 800a6dc:	469c      	mov	ip, r3
 800a6de:	4464      	add	r4, ip
 800a6e0:	7863      	ldrb	r3, [r4, #1]
 800a6e2:	7013      	strb	r3, [r2, #0]
		if(result == BOS_ERR_UnknownMessage){
 800a6e4:	5d72      	ldrb	r2, [r6, r5]
 800a6e6:	e68d      	b.n	800a404 <PxMessagingTask+0x1c0>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a6e8:	4ac9      	ldr	r2, [pc, #804]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a6ea:	9b06      	ldr	r3, [sp, #24]
 800a6ec:	4694      	mov	ip, r2
 800a6ee:	1b5b      	subs	r3, r3, r5
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	4463      	add	r3, ip
 800a6f4:	5d1f      	ldrb	r7, [r3, r4]
 800a6f6:	191b      	adds	r3, r3, r4
 800a6f8:	78da      	ldrb	r2, [r3, #3]
 800a6fa:	063f      	lsls	r7, r7, #24
 800a6fc:	18bf      	adds	r7, r7, r2
 800a6fe:	785a      	ldrb	r2, [r3, #1]
 800a700:	0412      	lsls	r2, r2, #16
 800a702:	18bf      	adds	r7, r7, r2
 800a704:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a706:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a708:	0212      	lsls	r2, r2, #8
 800a70a:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a70c:	2bff      	cmp	r3, #255	; 0xff
 800a70e:	d101      	bne.n	800a714 <PxMessagingTask+0x4d0>
 800a710:	f000 fc13 	bl	800af3a <PxMessagingTask+0xcf6>
								for(p =0; p < numOfParams; p++){
 800a714:	9b08      	ldr	r3, [sp, #32]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d100      	bne.n	800a71c <PxMessagingTask+0x4d8>
 800a71a:	e299      	b.n	800ac50 <PxMessagingTask+0xa0c>
 800a71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a71e:	46aa      	mov	sl, r5
 800a720:	469c      	mov	ip, r3
 800a722:	4bbb      	ldr	r3, [pc, #748]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a724:	4464      	add	r4, ip
 800a726:	4698      	mov	r8, r3
 800a728:	3404      	adds	r4, #4
 800a72a:	44a0      	add	r8, r4
 800a72c:	4645      	mov	r5, r8
 800a72e:	2400      	movs	r4, #0
 800a730:	46b8      	mov	r8, r7
 800a732:	e004      	b.n	800a73e <PxMessagingTask+0x4fa>
 800a734:	3401      	adds	r4, #1
 800a736:	9a08      	ldr	r2, [sp, #32]
 800a738:	b2e3      	uxtb	r3, r4
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d20c      	bcs.n	800a758 <PxMessagingTask+0x514>
									temp =cMessage[port - 1][4 + shift + p];
 800a73e:	5d2f      	ldrb	r7, [r5, r4]
									if(temp > 0 && temp <= NumOfPorts){
 800a740:	1e7b      	subs	r3, r7, #1
 800a742:	2b05      	cmp	r3, #5
 800a744:	d8f6      	bhi.n	800a734 <PxMessagingTask+0x4f0>
										UpdateBaudrate(temp,temp32);
 800a746:	4641      	mov	r1, r8
 800a748:	0038      	movs	r0, r7
 800a74a:	f003 fff7 	bl	800e73c <UpdateBaudrate>
								for(p =0; p < numOfParams; p++){
 800a74e:	3401      	adds	r4, #1
 800a750:	9a08      	ldr	r2, [sp, #32]
 800a752:	b2e3      	uxtb	r3, r4
 800a754:	4293      	cmp	r3, r2
 800a756:	d3f2      	bcc.n	800a73e <PxMessagingTask+0x4fa>
 800a758:	4655      	mov	r5, sl
 800a75a:	2300      	movs	r3, #0
 800a75c:	5d72      	ldrb	r2, [r6, r5]
 800a75e:	9709      	str	r7, [sp, #36]	; 0x24
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	e64f      	b.n	800a404 <PxMessagingTask+0x1c0>
 800a764:	4aaa      	ldr	r2, [pc, #680]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a768:	4690      	mov	r8, r2
 800a76a:	18e3      	adds	r3, r4, r3
 800a76c:	3b01      	subs	r3, #1
 800a76e:	4498      	add	r8, r3
							for(uint8_t k =0; k < temp; k++){
 800a770:	4643      	mov	r3, r8
 800a772:	2701      	movs	r7, #1
 800a774:	46a8      	mov	r8, r5
 800a776:	001d      	movs	r5, r3
 800a778:	46a2      	mov	sl, r4
 800a77a:	9c07      	ldr	r4, [sp, #28]
 800a77c:	b2f8      	uxtb	r0, r7
								if(p != port)
 800a77e:	4284      	cmp	r4, r0
 800a780:	d004      	beq.n	800a78c <PxMessagingTask+0x548>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a782:	f003 ffed 	bl	800e760 <GetUart>
 800a786:	5de9      	ldrb	r1, [r5, r7]
 800a788:	f003 fff6 	bl	800e778 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a78c:	3701      	adds	r7, #1
 800a78e:	2f07      	cmp	r7, #7
 800a790:	d1f4      	bne.n	800a77c <PxMessagingTask+0x538>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a792:	9807      	ldr	r0, [sp, #28]
 800a794:	f003 ffe4 	bl	800e760 <GetUart>
 800a798:	4645      	mov	r5, r8
 800a79a:	4a9d      	ldr	r2, [pc, #628]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a79c:	4654      	mov	r4, sl
 800a79e:	4694      	mov	ip, r2
 800a7a0:	9b06      	ldr	r3, [sp, #24]
 800a7a2:	1b5b      	subs	r3, r3, r5
 800a7a4:	00db      	lsls	r3, r3, #3
 800a7a6:	4463      	add	r3, ip
 800a7a8:	191c      	adds	r4, r3, r4
 800a7aa:	7aa1      	ldrb	r1, [r4, #10]
 800a7ac:	f003 ffe4 	bl	800e778 <SwapUartPins>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	5d72      	ldrb	r2, [r6, r5]
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	e625      	b.n	800a404 <PxMessagingTask+0x1c0>
							temp =numOfParams / 5;
 800a7b8:	9f08      	ldr	r7, [sp, #32]
 800a7ba:	2105      	movs	r1, #5
 800a7bc:	0038      	movs	r0, r7
 800a7be:	f7f5 fcc7 	bl	8000150 <__udivsi3>
 800a7c2:	b2c3      	uxtb	r3, r0
 800a7c4:	9309      	str	r3, [sp, #36]	; 0x24
							for(uint8_t k =0; k < temp; k++){
 800a7c6:	2f04      	cmp	r7, #4
 800a7c8:	d800      	bhi.n	800a7cc <PxMessagingTask+0x588>
 800a7ca:	e6c6      	b.n	800a55a <PxMessagingTask+0x316>
 800a7cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7ce:	2700      	movs	r7, #0
 800a7d0:	469c      	mov	ip, r3
 800a7d2:	4b8f      	ldr	r3, [pc, #572]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a7d4:	4464      	add	r4, ip
 800a7d6:	469c      	mov	ip, r3
 800a7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7da:	46aa      	mov	sl, r5
 800a7dc:	4698      	mov	r8, r3
 800a7de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a7e0:	4464      	add	r4, ip
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a7e2:	4643      	mov	r3, r8
 800a7e4:	1ae3      	subs	r3, r4, r3
 800a7e6:	5d58      	ldrb	r0, [r3, r5]
 800a7e8:	4b8b      	ldr	r3, [pc, #556]	; (800aa18 <PxMessagingTask+0x7d4>)
 800a7ea:	3801      	subs	r0, #1
 800a7ec:	469c      	mov	ip, r3
 800a7ee:	0080      	lsls	r0, r0, #2
 800a7f0:	0021      	movs	r1, r4
 800a7f2:	2204      	movs	r2, #4
 800a7f4:	4460      	add	r0, ip
 800a7f6:	f00a fc05 	bl	8015004 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800a7fa:	3701      	adds	r7, #1
 800a7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7fe:	b2ff      	uxtb	r7, r7
 800a800:	3405      	adds	r4, #5
 800a802:	42bb      	cmp	r3, r7
 800a804:	d8ed      	bhi.n	800a7e2 <PxMessagingTask+0x59e>
 800a806:	4655      	mov	r5, sl
 800a808:	e6a7      	b.n	800a55a <PxMessagingTask+0x316>
							ExploreNeighbors(port);
 800a80a:	9807      	ldr	r0, [sp, #28]
 800a80c:	f7f9 fc80 	bl	8004110 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a810:	2302      	movs	r3, #2
 800a812:	4a82      	ldr	r2, [pc, #520]	; (800aa1c <PxMessagingTask+0x7d8>)
							osDelay(10);
 800a814:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 800a816:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a818:	f004 fc28 	bl	800f06c <osDelay>
							temp =0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	46a8      	mov	r8, r5
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a820:	2401      	movs	r4, #1
							temp =0;
 800a822:	001d      	movs	r5, r3
 800a824:	4f7e      	ldr	r7, [pc, #504]	; (800aa20 <PxMessagingTask+0x7dc>)
 800a826:	e004      	b.n	800a832 <PxMessagingTask+0x5ee>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a828:	3401      	adds	r4, #1
 800a82a:	b2e4      	uxtb	r4, r4
 800a82c:	3704      	adds	r7, #4
 800a82e:	2c07      	cmp	r4, #7
 800a830:	d012      	beq.n	800a858 <PxMessagingTask+0x614>
								if(neighbors[p - 1][0]){
 800a832:	883b      	ldrh	r3, [r7, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0f7      	beq.n	800a828 <PxMessagingTask+0x5e4>
									messageParams[temp] =p;
 800a838:	4b7a      	ldr	r3, [pc, #488]	; (800aa24 <PxMessagingTask+0x7e0>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a83a:	1c68      	adds	r0, r5, #1
 800a83c:	469c      	mov	ip, r3
									messageParams[temp] =p;
 800a83e:	555c      	strb	r4, [r3, r5]
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a840:	3401      	adds	r4, #1
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a842:	0039      	movs	r1, r7
 800a844:	2204      	movs	r2, #4
 800a846:	4460      	add	r0, ip
									temp +=5;
 800a848:	3505      	adds	r5, #5
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a84a:	b2e4      	uxtb	r4, r4
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a84c:	f00a fbda 	bl	8015004 <memcpy>
									temp +=5;
 800a850:	b2ed      	uxtb	r5, r5
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a852:	3704      	adds	r7, #4
 800a854:	2c07      	cmp	r4, #7
 800a856:	d1ec      	bne.n	800a832 <PxMessagingTask+0x5ee>
 800a858:	002b      	movs	r3, r5
 800a85a:	9509      	str	r5, [sp, #36]	; 0x24
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a85c:	210d      	movs	r1, #13
 800a85e:	4645      	mov	r5, r8
 800a860:	b29a      	uxth	r2, r3
 800a862:	e1ed      	b.n	800ac40 <PxMessagingTask+0x9fc>
							switch(cMessage[port - 1][0 + shift]){
 800a864:	4a6a      	ldr	r2, [pc, #424]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a866:	9b06      	ldr	r3, [sp, #24]
 800a868:	4694      	mov	ip, r2
 800a86a:	1b5b      	subs	r3, r3, r5
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	4463      	add	r3, ip
 800a870:	5d18      	ldrb	r0, [r3, r4]
 800a872:	282b      	cmp	r0, #43	; 0x2b
 800a874:	d900      	bls.n	800a878 <PxMessagingTask+0x634>
 800a876:	e5b8      	b.n	800a3ea <PxMessagingTask+0x1a6>
 800a878:	4a6b      	ldr	r2, [pc, #428]	; (800aa28 <PxMessagingTask+0x7e4>)
 800a87a:	0083      	lsls	r3, r0, #2
 800a87c:	58d3      	ldr	r3, [r2, r3]
 800a87e:	469f      	mov	pc, r3
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800a880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a882:	1c61      	adds	r1, r4, #1
 800a884:	469c      	mov	ip, r3
 800a886:	4b62      	ldr	r3, [pc, #392]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a888:	4461      	add	r1, ip
 800a88a:	469c      	mov	ip, r3
 800a88c:	9b06      	ldr	r3, [sp, #24]
 800a88e:	9a08      	ldr	r2, [sp, #32]
 800a890:	1b5b      	subs	r3, r3, r5
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	4463      	add	r3, ip
 800a896:	5d18      	ldrb	r0, [r3, r4]
 800a898:	230a      	movs	r3, #10
 800a89a:	3a01      	subs	r2, #1
 800a89c:	b292      	uxth	r2, r2
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	4461      	add	r1, ip
 800a8a2:	f003 fed1 	bl	800e648 <writePxMutex>
							indMode =IND_TOPOLOGY;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	5d72      	ldrb	r2, [r6, r5]
 800a8aa:	9304      	str	r3, [sp, #16]
 800a8ac:	e5aa      	b.n	800a404 <PxMessagingTask+0x1c0>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a8ae:	9b06      	ldr	r3, [sp, #24]
 800a8b0:	1b5a      	subs	r2, r3, r5
 800a8b2:	4b57      	ldr	r3, [pc, #348]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a8b4:	00d2      	lsls	r2, r2, #3
 800a8b6:	469c      	mov	ip, r3
 800a8b8:	4462      	add	r2, ip
 800a8ba:	1917      	adds	r7, r2, r4
 800a8bc:	7abb      	ldrb	r3, [r7, #10]
 800a8be:	7a78      	ldrb	r0, [r7, #9]
 800a8c0:	4698      	mov	r8, r3
 800a8c2:	7afb      	ldrb	r3, [r7, #11]
 800a8c4:	469c      	mov	ip, r3
 800a8c6:	4b53      	ldr	r3, [pc, #332]	; (800aa14 <PxMessagingTask+0x7d0>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	7b3b      	ldrb	r3, [r7, #12]
 800a8ce:	1e59      	subs	r1, r3, #1
 800a8d0:	418b      	sbcs	r3, r1
 800a8d2:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a8d4:	793b      	ldrb	r3, [r7, #4]
 800a8d6:	79f9      	ldrb	r1, [r7, #7]
 800a8d8:	061b      	lsls	r3, r3, #24
 800a8da:	469a      	mov	sl, r3
 800a8dc:	797b      	ldrb	r3, [r7, #5]
 800a8de:	041b      	lsls	r3, r3, #16
 800a8e0:	4453      	add	r3, sl
 800a8e2:	468a      	mov	sl, r1
 800a8e4:	79b9      	ldrb	r1, [r7, #6]
 800a8e6:	4453      	add	r3, sl
 800a8e8:	0209      	lsls	r1, r1, #8
 800a8ea:	468a      	mov	sl, r1
 800a8ec:	4453      	add	r3, sl
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a8ee:	9302      	str	r3, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a8f0:	5d13      	ldrb	r3, [r2, r4]
 800a8f2:	78fa      	ldrb	r2, [r7, #3]
 800a8f4:	061b      	lsls	r3, r3, #24
 800a8f6:	189b      	adds	r3, r3, r2
 800a8f8:	787a      	ldrb	r2, [r7, #1]
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a8fa:	9904      	ldr	r1, [sp, #16]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a8fc:	0412      	lsls	r2, r2, #16
 800a8fe:	189b      	adds	r3, r3, r2
 800a900:	78ba      	ldrb	r2, [r7, #2]
 800a902:	0212      	lsls	r2, r2, #8
 800a904:	189b      	adds	r3, r3, r2
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a906:	9301      	str	r3, [sp, #4]
 800a908:	7a3b      	ldrb	r3, [r7, #8]
 800a90a:	4662      	mov	r2, ip
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	4643      	mov	r3, r8
 800a910:	f7ff f9e6 	bl	8009ce0 <StartScastDMAStream>
 800a914:	2300      	movs	r3, #0
 800a916:	5d72      	ldrb	r2, [r6, r5]
 800a918:	9304      	str	r3, [sp, #16]
 800a91a:	e573      	b.n	800a404 <PxMessagingTask+0x1c0>
							temp =cMessage[port - 1][11 + shift];
 800a91c:	0027      	movs	r7, r4
							if(numOfParams == 15)
 800a91e:	9b08      	ldr	r3, [sp, #32]
							temp =cMessage[port - 1][11 + shift];
 800a920:	370b      	adds	r7, #11
 800a922:	9704      	str	r7, [sp, #16]
							if(numOfParams == 15)
 800a924:	2b0f      	cmp	r3, #15
 800a926:	d100      	bne.n	800a92a <PxMessagingTask+0x6e6>
 800a928:	e316      	b.n	800af58 <PxMessagingTask+0xd14>
							temp =cMessage[port - 1][11 + shift];
 800a92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a92c:	9a04      	ldr	r2, [sp, #16]
 800a92e:	5c9a      	ldrb	r2, [r3, r2]
 800a930:	9209      	str	r2, [sp, #36]	; 0x24
							if(numOfParams == 17)
 800a932:	9a08      	ldr	r2, [sp, #32]
 800a934:	2a11      	cmp	r2, #17
 800a936:	d102      	bne.n	800a93e <PxMessagingTask+0x6fa>
								temp =cMessage[port - 1][15 + shift];
 800a938:	191b      	adds	r3, r3, r4
 800a93a:	7bdb      	ldrb	r3, [r3, #15]
 800a93c:	9309      	str	r3, [sp, #36]	; 0x24
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a93e:	1ce2      	adds	r2, r4, #3
 800a940:	0011      	movs	r1, r2
 800a942:	9212      	str	r2, [sp, #72]	; 0x48
 800a944:	9a06      	ldr	r2, [sp, #24]
 800a946:	1ca3      	adds	r3, r4, #2
 800a948:	001f      	movs	r7, r3
 800a94a:	9311      	str	r3, [sp, #68]	; 0x44
 800a94c:	1b53      	subs	r3, r2, r5
 800a94e:	4a30      	ldr	r2, [pc, #192]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	4694      	mov	ip, r2
 800a954:	4463      	add	r3, ip
 800a956:	5d1a      	ldrb	r2, [r3, r4]
 800a958:	5c59      	ldrb	r1, [r3, r1]
 800a95a:	1c60      	adds	r0, r4, #1
 800a95c:	0612      	lsls	r2, r2, #24
 800a95e:	1852      	adds	r2, r2, r1
 800a960:	5c19      	ldrb	r1, [r3, r0]
 800a962:	9010      	str	r0, [sp, #64]	; 0x40
 800a964:	0409      	lsls	r1, r1, #16
 800a966:	1852      	adds	r2, r2, r1
 800a968:	4692      	mov	sl, r2
 800a96a:	5dd9      	ldrb	r1, [r3, r7]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a96c:	1d22      	adds	r2, r4, #4
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a96e:	0209      	lsls	r1, r1, #8
 800a970:	448a      	add	sl, r1
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a972:	1d61      	adds	r1, r4, #5
 800a974:	468c      	mov	ip, r1
 800a976:	9213      	str	r2, [sp, #76]	; 0x4c
 800a978:	5c9a      	ldrb	r2, [r3, r2]
 800a97a:	1de0      	adds	r0, r4, #7
 800a97c:	0612      	lsls	r2, r2, #24
 800a97e:	4690      	mov	r8, r2
 800a980:	4662      	mov	r2, ip
 800a982:	5c9a      	ldrb	r2, [r3, r2]
 800a984:	5c1f      	ldrb	r7, [r3, r0]
 800a986:	0412      	lsls	r2, r2, #16
 800a988:	4442      	add	r2, r8
 800a98a:	46b8      	mov	r8, r7
 800a98c:	1da1      	adds	r1, r4, #6
 800a98e:	5c5f      	ldrb	r7, [r3, r1]
 800a990:	4442      	add	r2, r8
 800a992:	023f      	lsls	r7, r7, #8
 800a994:	46b8      	mov	r8, r7
 800a996:	4490      	add	r8, r2
							if(temp == false){
 800a998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a99a:	2a00      	cmp	r2, #0
 800a99c:	d001      	beq.n	800a9a2 <PxMessagingTask+0x75e>
 800a99e:	f000 fca2 	bl	800b2e6 <PxMessagingTask+0x10a2>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a9a2:	191b      	adds	r3, r3, r4
 800a9a4:	7a5b      	ldrb	r3, [r3, #9]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d005      	beq.n	800a9b6 <PxMessagingTask+0x772>
 800a9aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9ac:	1911      	adds	r1, r2, r4
 800a9ae:	7a8a      	ldrb	r2, [r1, #10]
 800a9b0:	2a00      	cmp	r2, #0
 800a9b2:	d000      	beq.n	800a9b6 <PxMessagingTask+0x772>
 800a9b4:	e333      	b.n	800b01e <PxMessagingTask+0xdda>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a9b6:	4a16      	ldr	r2, [pc, #88]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a9b8:	9b06      	ldr	r3, [sp, #24]
 800a9ba:	4694      	mov	ip, r2
 800a9bc:	1b5b      	subs	r3, r3, r5
 800a9be:	9a04      	ldr	r2, [sp, #16]
 800a9c0:	00db      	lsls	r3, r3, #3
 800a9c2:	4463      	add	r3, ip
 800a9c4:	5c9b      	ldrb	r3, [r3, r2]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d005      	beq.n	800a9d6 <PxMessagingTask+0x792>
 800a9ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9cc:	1911      	adds	r1, r2, r4
 800a9ce:	7b0a      	ldrb	r2, [r1, #12]
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	d000      	beq.n	800a9d6 <PxMessagingTask+0x792>
 800a9d4:	e32a      	b.n	800b02c <PxMessagingTask+0xde8>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a9d6:	4a0e      	ldr	r2, [pc, #56]	; (800aa10 <PxMessagingTask+0x7cc>)
 800a9d8:	9b06      	ldr	r3, [sp, #24]
 800a9da:	4694      	mov	ip, r2
 800a9dc:	1b5b      	subs	r3, r3, r5
 800a9de:	00db      	lsls	r3, r3, #3
 800a9e0:	4463      	add	r3, ip
 800a9e2:	191b      	adds	r3, r3, r4
 800a9e4:	7b5b      	ldrb	r3, [r3, #13]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d100      	bne.n	800a9ec <PxMessagingTask+0x7a8>
 800a9ea:	e131      	b.n	800ac50 <PxMessagingTask+0xa0c>
 800a9ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9ee:	4694      	mov	ip, r2
 800a9f0:	4464      	add	r4, ip
 800a9f2:	7ba1      	ldrb	r1, [r4, #14]
 800a9f4:	9104      	str	r1, [sp, #16]
 800a9f6:	2900      	cmp	r1, #0
 800a9f8:	d001      	beq.n	800a9fe <PxMessagingTask+0x7ba>
 800a9fa:	f000 fc40 	bl	800b27e <PxMessagingTask+0x103a>
 800a9fe:	5d72      	ldrb	r2, [r6, r5]
 800aa00:	9109      	str	r1, [sp, #36]	; 0x24
 800aa02:	e4ff      	b.n	800a404 <PxMessagingTask+0x1c0>
 800aa04:	20000f8d 	.word	0x20000f8d
 800aa08:	20000f8e 	.word	0x20000f8e
 800aa0c:	200016c0 	.word	0x200016c0
 800aa10:	20000da0 	.word	0x20000da0
 800aa14:	2000110e 	.word	0x2000110e
 800aa18:	20001128 	.word	0x20001128
 800aa1c:	20000f8c 	.word	0x20000f8c
 800aa20:	20001110 	.word	0x20001110
 800aa24:	20000fd0 	.word	0x20000fd0
 800aa28:	0801dd44 	.word	0x0801dd44
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800aa2c:	9b06      	ldr	r3, [sp, #24]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	1b5f      	subs	r7, r3, r5
 800aa32:	4be2      	ldr	r3, [pc, #904]	; (800adbc <PxMessagingTask+0xb78>)
 800aa34:	00ff      	lsls	r7, r7, #3
 800aa36:	469c      	mov	ip, r3
 800aa38:	2300      	movs	r3, #0
 800aa3a:	4467      	add	r7, ip
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	5d38      	ldrb	r0, [r7, r4]
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	3319      	adds	r3, #25
 800aa44:	f7fe ff0a 	bl	800985c <SendMessageFromPort>
							osDelay(100);
 800aa48:	2064      	movs	r0, #100	; 0x64
 800aa4a:	f004 fb0f 	bl	800f06c <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800aa4e:	4adc      	ldr	r2, [pc, #880]	; (800adc0 <PxMessagingTask+0xb7c>)
 800aa50:	5d3b      	ldrb	r3, [r7, r4]
 800aa52:	7811      	ldrb	r1, [r2, #0]
 800aa54:	4650      	mov	r0, sl
 800aa56:	9a07      	ldr	r2, [sp, #28]
 800aa58:	f7f9 fd06 	bl	8004468 <remoteBootloaderUpdate>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	5d72      	ldrb	r2, [r6, r5]
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	e4cf      	b.n	800a404 <PxMessagingTask+0x1c0>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800aa64:	4bd7      	ldr	r3, [pc, #860]	; (800adc4 <PxMessagingTask+0xb80>)
 800aa66:	4ad8      	ldr	r2, [pc, #864]	; (800adc8 <PxMessagingTask+0xb84>)
							osDelay(10);
 800aa68:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800aa6a:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	4ad7      	ldr	r2, [pc, #860]	; (800adcc <PxMessagingTask+0xb88>)
 800aa70:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800aa72:	f004 fafb 	bl	800f06c <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	4bd5      	ldr	r3, [pc, #852]	; (800add0 <PxMessagingTask+0xb8c>)
 800aa7c:	4ad5      	ldr	r2, [pc, #852]	; (800add4 <PxMessagingTask+0xb90>)
 800aa7e:	60da      	str	r2, [r3, #12]
 800aa80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800aa84:	46c0      	nop			; (mov r8, r8)
 800aa86:	e7fd      	b.n	800aa84 <PxMessagingTask+0x840>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800aa88:	f004 fc04 	bl	800f294 <FreeRTOS_CLIGetOutputBuffer>
 800aa8c:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800aa8e:	f7f5 fb43 	bl	8000118 <strlen>
 800aa92:	2100      	movs	r1, #0
 800aa94:	0002      	movs	r2, r0
 800aa96:	0038      	movs	r0, r7
 800aa98:	f00a fabd 	bl	8015016 <memset>
							if(longMessage){
 800aa9c:	4bce      	ldr	r3, [pc, #824]	; (800add8 <PxMessagingTask+0xb94>)
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d100      	bne.n	800aaa8 <PxMessagingTask+0x864>
 800aaa6:	e1b1      	b.n	800ae0c <PxMessagingTask+0xbc8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800aaa8:	4bcc      	ldr	r3, [pc, #816]	; (800addc <PxMessagingTask+0xb98>)
 800aaaa:	8818      	ldrh	r0, [r3, #0]
 800aaac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaae:	1838      	adds	r0, r7, r0
 800aab0:	469c      	mov	ip, r3
 800aab2:	4bc2      	ldr	r3, [pc, #776]	; (800adbc <PxMessagingTask+0xb78>)
 800aab4:	4464      	add	r4, ip
 800aab6:	1919      	adds	r1, r3, r4
 800aab8:	9c08      	ldr	r4, [sp, #32]
 800aaba:	0022      	movs	r2, r4
 800aabc:	f00a faa2 	bl	8015004 <memcpy>
								longMessageLastPtr +=numOfParams;
 800aac0:	46a4      	mov	ip, r4
 800aac2:	4bc6      	ldr	r3, [pc, #792]	; (800addc <PxMessagingTask+0xb98>)
 800aac4:	881a      	ldrh	r2, [r3, #0]
 800aac6:	4bc5      	ldr	r3, [pc, #788]	; (800addc <PxMessagingTask+0xb98>)
 800aac8:	4462      	add	r2, ip
 800aaca:	801a      	strh	r2, [r3, #0]
 800aacc:	2300      	movs	r3, #0
 800aace:	5d72      	ldrb	r2, [r6, r5]
 800aad0:	9304      	str	r3, [sp, #16]
 800aad2:	e497      	b.n	800a404 <PxMessagingTask+0x1c0>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800aad4:	f004 fbde 	bl	800f294 <FreeRTOS_CLIGetOutputBuffer>
							if(dst == BOS_BROADCAST)
 800aad8:	4643      	mov	r3, r8
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800aada:	0007      	movs	r7, r0
							if(dst == BOS_BROADCAST)
 800aadc:	2bff      	cmp	r3, #255	; 0xff
 800aade:	d100      	bne.n	800aae2 <PxMessagingTask+0x89e>
 800aae0:	e3ca      	b.n	800b278 <PxMessagingTask+0x1034>
							else if(dst == BOS_MULTICAST)
 800aae2:	2bfe      	cmp	r3, #254	; 0xfe
 800aae4:	d100      	bne.n	800aae8 <PxMessagingTask+0x8a4>
 800aae6:	e23c      	b.n	800af62 <PxMessagingTask+0xd1e>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800aae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaea:	9a08      	ldr	r2, [sp, #32]
 800aaec:	469c      	mov	ip, r3
 800aaee:	4bb3      	ldr	r3, [pc, #716]	; (800adbc <PxMessagingTask+0xb78>)
 800aaf0:	4464      	add	r4, ip
 800aaf2:	48bb      	ldr	r0, [pc, #748]	; (800ade0 <PxMessagingTask+0xb9c>)
 800aaf4:	1919      	adds	r1, r3, r4
 800aaf6:	46a8      	mov	r8, r5
 800aaf8:	f00a fa84 	bl	8015004 <memcpy>
 800aafc:	003d      	movs	r5, r7
 800aafe:	e001      	b.n	800ab04 <PxMessagingTask+0x8c0>
							} while(xReturned != pdFALSE);
 800ab00:	2c00      	cmp	r4, #0
 800ab02:	d025      	beq.n	800ab50 <PxMessagingTask+0x90c>
								temp =PcPort;
 800ab04:	4bb7      	ldr	r3, [pc, #732]	; (800ade4 <PxMessagingTask+0xba0>)
								PcPort =port;
 800ab06:	9a07      	ldr	r2, [sp, #28]
								temp =PcPort;
 800ab08:	781f      	ldrb	r7, [r3, #0]
								PcPort =port;
 800ab0a:	701a      	strb	r2, [r3, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800ab0c:	2299      	movs	r2, #153	; 0x99
 800ab0e:	0029      	movs	r1, r5
 800ab10:	48b3      	ldr	r0, [pc, #716]	; (800ade0 <PxMessagingTask+0xb9c>)
 800ab12:	0092      	lsls	r2, r2, #2
 800ab14:	f004 fb3c 	bl	800f190 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 800ab18:	4bb2      	ldr	r3, [pc, #712]	; (800ade4 <PxMessagingTask+0xba0>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800ab1a:	0004      	movs	r4, r0
								PcPort =temp;
 800ab1c:	701f      	strb	r7, [r3, #0]
								if(BOS.response == BOS_RESPONSE_ALL){
 800ab1e:	4bb2      	ldr	r3, [pc, #712]	; (800ade8 <PxMessagingTask+0xba4>)
 800ab20:	799b      	ldrb	r3, [r3, #6]
 800ab22:	2b60      	cmp	r3, #96	; 0x60
 800ab24:	d1ec      	bne.n	800ab00 <PxMessagingTask+0x8bc>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800ab26:	0028      	movs	r0, r5
 800ab28:	f7f5 faf6 	bl	8000118 <strlen>
 800ab2c:	0029      	movs	r1, r5
 800ab2e:	0002      	movs	r2, r0
 800ab30:	48ae      	ldr	r0, [pc, #696]	; (800adec <PxMessagingTask+0xba8>)
 800ab32:	f00a fa67 	bl	8015004 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800ab36:	0028      	movs	r0, r5
 800ab38:	f7f5 faee 	bl	8000118 <strlen>
 800ab3c:	2118      	movs	r1, #24
 800ab3e:	b282      	uxth	r2, r0
 800ab40:	4650      	mov	r0, sl
 800ab42:	f7ff f8a7 	bl	8009c94 <SendMessageToModule>
									osDelay(10);
 800ab46:	200a      	movs	r0, #10
 800ab48:	f004 fa90 	bl	800f06c <osDelay>
							} while(xReturned != pdFALSE);
 800ab4c:	2c00      	cmp	r4, #0
 800ab4e:	d1d9      	bne.n	800ab04 <PxMessagingTask+0x8c0>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800ab50:	2232      	movs	r2, #50	; 0x32
 800ab52:	2100      	movs	r1, #0
 800ab54:	48a2      	ldr	r0, [pc, #648]	; (800ade0 <PxMessagingTask+0xb9c>)
 800ab56:	4645      	mov	r5, r8
 800ab58:	9709      	str	r7, [sp, #36]	; 0x24
 800ab5a:	f00a fa5c 	bl	8015016 <memset>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	5d72      	ldrb	r2, [r6, r5]
 800ab62:	9304      	str	r3, [sp, #16]
 800ab64:	e44e      	b.n	800a404 <PxMessagingTask+0x1c0>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800ab66:	4ba2      	ldr	r3, [pc, #648]	; (800adf0 <PxMessagingTask+0xbac>)
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	9204      	str	r2, [sp, #16]
 800ab6e:	9305      	str	r3, [sp, #20]
 800ab70:	9804      	ldr	r0, [sp, #16]
 800ab72:	9905      	ldr	r1, [sp, #20]
 800ab74:	2202      	movs	r2, #2
 800ab76:	4252      	negs	r2, r2
 800ab78:	17d3      	asrs	r3, r2, #31
 800ab7a:	1812      	adds	r2, r2, r0
 800ab7c:	414b      	adcs	r3, r1
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d100      	bne.n	800ab84 <PxMessagingTask+0x940>
 800ab82:	e232      	b.n	800afea <PxMessagingTask+0xda6>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800ab84:	4b9b      	ldr	r3, [pc, #620]	; (800adf4 <PxMessagingTask+0xbb0>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	d100      	bne.n	800ab8e <PxMessagingTask+0x94a>
 800ab8c:	e480      	b.n	800a490 <PxMessagingTask+0x24c>
								responseStatus =BOS_OK;
 800ab8e:	2000      	movs	r0, #0
 800ab90:	4b98      	ldr	r3, [pc, #608]	; (800adf4 <PxMessagingTask+0xbb0>)
 800ab92:	5d72      	ldrb	r2, [r6, r5]
 800ab94:	7018      	strb	r0, [r3, #0]
 800ab96:	9004      	str	r0, [sp, #16]
 800ab98:	e434      	b.n	800a404 <PxMessagingTask+0x1c0>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800ab9a:	4988      	ldr	r1, [pc, #544]	; (800adbc <PxMessagingTask+0xb78>)
 800ab9c:	9b06      	ldr	r3, [sp, #24]
 800ab9e:	468c      	mov	ip, r1
 800aba0:	1b5b      	subs	r3, r3, r5
 800aba2:	00db      	lsls	r3, r3, #3
 800aba4:	4463      	add	r3, ip
 800aba6:	5d1b      	ldrb	r3, [r3, r4]
 800aba8:	9304      	str	r3, [sp, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d000      	beq.n	800abb0 <PxMessagingTask+0x96c>
 800abae:	e0e1      	b.n	800ad74 <PxMessagingTask+0xb30>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800abb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb2:	469c      	mov	ip, r3
 800abb4:	4464      	add	r4, ip
 800abb6:	78a3      	ldrb	r3, [r4, #2]
 800abb8:	78e2      	ldrb	r2, [r4, #3]
 800abba:	061b      	lsls	r3, r3, #24
 800abbc:	0412      	lsls	r2, r2, #16
 800abbe:	189b      	adds	r3, r3, r2
 800abc0:	7962      	ldrb	r2, [r4, #5]
 800abc2:	189b      	adds	r3, r3, r2
 800abc4:	7922      	ldrb	r2, [r4, #4]
 800abc6:	0212      	lsls	r2, r2, #8
 800abc8:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800abca:	7862      	ldrb	r2, [r4, #1]
 800abcc:	3a01      	subs	r2, #1
 800abce:	b2d2      	uxtb	r2, r2
 800abd0:	2a07      	cmp	r2, #7
 800abd2:	d900      	bls.n	800abd6 <PxMessagingTask+0x992>
 800abd4:	e415      	b.n	800a402 <PxMessagingTask+0x1be>
 800abd6:	4988      	ldr	r1, [pc, #544]	; (800adf8 <PxMessagingTask+0xbb4>)
 800abd8:	0092      	lsls	r2, r2, #2
 800abda:	588a      	ldr	r2, [r1, r2]
 800abdc:	4697      	mov	pc, r2
							SaveToRO();
 800abde:	f001 fd25 	bl	800c62c <SaveToRO>
							SaveEEportsDir();
 800abe2:	f7f9 f8bf 	bl	8003d64 <SaveEEportsDir>
							indMode =IND_PING;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e450      	b.n	800a48c <PxMessagingTask+0x248>
							for(uint8_t k =0; k < temp; k++){
 800abea:	2401      	movs	r4, #1
 800abec:	2700      	movs	r7, #0
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800abee:	0020      	movs	r0, r4
 800abf0:	f003 fdb6 	bl	800e760 <GetUart>
 800abf4:	2280      	movs	r2, #128	; 0x80
 800abf6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800abf8:	0212      	lsls	r2, r2, #8
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d103      	bne.n	800ac06 <PxMessagingTask+0x9c2>
									messageParams[temp++] =p;
 800abfe:	4a7b      	ldr	r2, [pc, #492]	; (800adec <PxMessagingTask+0xba8>)
 800ac00:	1c7b      	adds	r3, r7, #1
 800ac02:	55d4      	strb	r4, [r2, r7]
 800ac04:	b2df      	uxtb	r7, r3
							for(p =1; p <= NumOfPorts; p++){
 800ac06:	3401      	adds	r4, #1
 800ac08:	b2e4      	uxtb	r4, r4
 800ac0a:	2c07      	cmp	r4, #7
 800ac0c:	d1ef      	bne.n	800abee <PxMessagingTask+0x9aa>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800ac0e:	b2ba      	uxth	r2, r7
 800ac10:	2114      	movs	r1, #20
 800ac12:	4650      	mov	r0, sl
 800ac14:	9709      	str	r7, [sp, #36]	; 0x24
 800ac16:	f7ff f83d 	bl	8009c94 <SendMessageToModule>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	5d72      	ldrb	r2, [r6, r5]
 800ac1e:	9304      	str	r3, [sp, #16]
 800ac20:	f7ff fbf0 	bl	800a404 <PxMessagingTask+0x1c0>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800ac24:	4652      	mov	r2, sl
 800ac26:	9907      	ldr	r1, [sp, #28]
 800ac28:	4643      	mov	r3, r8
 800ac2a:	0038      	movs	r0, r7
 800ac2c:	9400      	str	r4, [sp, #0]
 800ac2e:	f001 fbed 	bl	800c40c <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800ac32:	2200      	movs	r2, #0
 800ac34:	2100      	movs	r1, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800ac36:	9004      	str	r0, [sp, #16]
		if(result == BOS_ERR_UnknownMessage){
 800ac38:	2801      	cmp	r0, #1
 800ac3a:	d001      	beq.n	800ac40 <PxMessagingTask+0x9fc>
 800ac3c:	f7ff fbe1 	bl	800a402 <PxMessagingTask+0x1be>
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ac40:	4650      	mov	r0, sl
 800ac42:	f7ff f827 	bl	8009c94 <SendMessageToModule>
							indMode =IND_TOPOLOGY;
 800ac46:	2300      	movs	r3, #0
 800ac48:	5d72      	ldrb	r2, [r6, r5]
 800ac4a:	9304      	str	r3, [sp, #16]
 800ac4c:	f7ff fbda 	bl	800a404 <PxMessagingTask+0x1c0>
 800ac50:	5d72      	ldrb	r2, [r6, r5]
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800ac52:	9309      	str	r3, [sp, #36]	; 0x24
 800ac54:	9304      	str	r3, [sp, #16]
 800ac56:	f7ff fbd5 	bl	800a404 <PxMessagingTask+0x1c0>
				code =cMessage[port - 1][3 + shift];
 800ac5a:	78df      	ldrb	r7, [r3, #3]
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800ac5c:	4643      	mov	r3, r8
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2bfc      	cmp	r3, #252	; 0xfc
 800ac64:	d901      	bls.n	800ac6a <PxMessagingTask+0xa26>
 800ac66:	f7ff fb47 	bl	800a2f8 <PxMessagingTask+0xb4>
 800ac6a:	4b55      	ldr	r3, [pc, #340]	; (800adc0 <PxMessagingTask+0xb7c>)
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	4543      	cmp	r3, r8
 800ac70:	d101      	bne.n	800ac76 <PxMessagingTask+0xa32>
 800ac72:	f7ff fb64 	bl	800a33e <PxMessagingTask+0xfa>
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d06f      	beq.n	800ad5a <PxMessagingTask+0xb16>
				ForwardReceivedMessage(port);
 800ac7a:	9807      	ldr	r0, [sp, #28]
 800ac7c:	f7fe ffea 	bl	8009c54 <ForwardReceivedMessage>
				if(BOS.trace)
 800ac80:	4b59      	ldr	r3, [pc, #356]	; (800ade8 <PxMessagingTask+0xba4>)
 800ac82:	79db      	ldrb	r3, [r3, #7]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <PxMessagingTask+0xa4a>
					indMode =IND_SHORT_BLINK;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	4a50      	ldr	r2, [pc, #320]	; (800adcc <PxMessagingTask+0xb88>)
 800ac8c:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800ac8e:	2f19      	cmp	r7, #25
 800ac90:	d067      	beq.n	800ad62 <PxMessagingTask+0xb1e>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800ac92:	2f1a      	cmp	r7, #26
 800ac94:	d001      	beq.n	800ac9a <PxMessagingTask+0xa56>
 800ac96:	f7ff fbb4 	bl	800a402 <PxMessagingTask+0x1be>
					Delay_ms(100);
 800ac9a:	2064      	movs	r0, #100	; 0x64
 800ac9c:	f006 fa58 	bl	8011150 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800aca0:	4a46      	ldr	r2, [pc, #280]	; (800adbc <PxMessagingTask+0xb78>)
 800aca2:	9b06      	ldr	r3, [sp, #24]
 800aca4:	4694      	mov	ip, r2
 800aca6:	1b5b      	subs	r3, r3, r5
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	4463      	add	r3, ip
 800acac:	5d1b      	ldrb	r3, [r3, r4]
 800acae:	4641      	mov	r1, r8
 800acb0:	4650      	mov	r0, sl
 800acb2:	9a07      	ldr	r2, [sp, #28]
 800acb4:	f7f9 fbd8 	bl	8004468 <remoteBootloaderUpdate>
 800acb8:	f7ff fba3 	bl	800a402 <PxMessagingTask+0x1be>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800acbc:	2bfe      	cmp	r3, #254	; 0xfe
 800acbe:	d001      	beq.n	800acc4 <PxMessagingTask+0xa80>
 800acc0:	f7ff fb3d 	bl	800a33e <PxMessagingTask+0xfa>
 800acc4:	493d      	ldr	r1, [pc, #244]	; (800adbc <PxMessagingTask+0xb78>)
					result =BOS_ERR_MSG_Reflection;
 800acc6:	2003      	movs	r0, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800acc8:	468c      	mov	ip, r1
 800acca:	9b06      	ldr	r3, [sp, #24]
 800accc:	494b      	ldr	r1, [pc, #300]	; (800adfc <PxMessagingTask+0xbb8>)
 800acce:	1b5b      	subs	r3, r3, r5
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	4463      	add	r3, ip
 800acd4:	9308      	str	r3, [sp, #32]
 800acd6:	189b      	adds	r3, r3, r2
 800acd8:	3b01      	subs	r3, #1
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	7809      	ldrb	r1, [r1, #0]
					result =BOS_ERR_MSG_Reflection;
 800acde:	9004      	str	r0, [sp, #16]
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800ace0:	4299      	cmp	r1, r3
 800ace2:	d101      	bne.n	800ace8 <PxMessagingTask+0xaa4>
 800ace4:	f7ff fb8e 	bl	800a404 <PxMessagingTask+0x1c0>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800ace8:	4a44      	ldr	r2, [pc, #272]	; (800adfc <PxMessagingTask+0xbb8>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800acea:	9907      	ldr	r1, [sp, #28]
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800acec:	7013      	strb	r3, [r2, #0]
 800acee:	4a44      	ldr	r2, [pc, #272]	; (800ae00 <PxMessagingTask+0xbbc>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800acf0:	30fb      	adds	r0, #251	; 0xfb
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800acf2:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800acf4:	f7fe ff6a 	bl	8009bcc <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800acf8:	2100      	movs	r1, #0
 800acfa:	5d72      	ldrb	r2, [r6, r5]
 800acfc:	9b08      	ldr	r3, [sp, #32]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800acfe:	1e90      	subs	r0, r2, #2
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800ad00:	189b      	adds	r3, r3, r2
 800ad02:	3b01      	subs	r3, #1
 800ad04:	7019      	strb	r1, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800ad06:	9b08      	ldr	r3, [sp, #32]
 800ad08:	5c19      	ldrb	r1, [r3, r0]
 800ad0a:	9109      	str	r1, [sp, #36]	; 0x24
					for(i =0; i < temp; i++){
 800ad0c:	2900      	cmp	r1, #0
 800ad0e:	d02d      	beq.n	800ad6c <PxMessagingTask+0xb28>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800ad10:	4b2b      	ldr	r3, [pc, #172]	; (800adc0 <PxMessagingTask+0xb7c>)
 800ad12:	1a40      	subs	r0, r0, r1
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	9708      	str	r7, [sp, #32]
 800ad18:	9304      	str	r3, [sp, #16]
 800ad1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad1c:	000f      	movs	r7, r1
 800ad1e:	469c      	mov	ip, r3
 800ad20:	4b26      	ldr	r3, [pc, #152]	; (800adbc <PxMessagingTask+0xb78>)
 800ad22:	4460      	add	r0, ip
 800ad24:	469c      	mov	ip, r3
 800ad26:	4460      	add	r0, ip
 800ad28:	0001      	movs	r1, r0
 800ad2a:	46a4      	mov	ip, r4
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	000c      	movs	r4, r1
 800ad30:	9804      	ldr	r0, [sp, #16]
 800ad32:	e003      	b.n	800ad3c <PxMessagingTask+0xaf8>
					for(i =0; i < temp; i++){
 800ad34:	3301      	adds	r3, #1
 800ad36:	b2d9      	uxtb	r1, r3
 800ad38:	428f      	cmp	r7, r1
 800ad3a:	d917      	bls.n	800ad6c <PxMessagingTask+0xb28>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800ad3c:	5ce1      	ldrb	r1, [r4, r3]
 800ad3e:	4281      	cmp	r1, r0
 800ad40:	d1f8      	bne.n	800ad34 <PxMessagingTask+0xaf0>
 800ad42:	4664      	mov	r4, ip
				shift +=4;
 800ad44:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800ad46:	1b13      	subs	r3, r2, r4
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	9f08      	ldr	r7, [sp, #32]
 800ad4c:	9308      	str	r3, [sp, #32]
				if(result == BOS_OK){
 800ad4e:	f7ff fafd 	bl	800a34c <PxMessagingTask+0x108>
					result =BOS_ERR_MSG_Reflection;
 800ad52:	2303      	movs	r3, #3
 800ad54:	9304      	str	r3, [sp, #16]
		if(result == BOS_ERR_UnknownMessage){
 800ad56:	f7ff fb55 	bl	800a404 <PxMessagingTask+0x1c0>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800ad5a:	2f10      	cmp	r7, #16
 800ad5c:	d18d      	bne.n	800ac7a <PxMessagingTask+0xa36>
 800ad5e:	f7ff faee 	bl	800a33e <PxMessagingTask+0xfa>
					Delay_ms(100);
 800ad62:	2064      	movs	r0, #100	; 0x64
 800ad64:	f006 f9f4 	bl	8011150 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e7a0      	b.n	800acae <PxMessagingTask+0xa6a>
					result =BOS_ERR_WrongID;
 800ad6c:	2366      	movs	r3, #102	; 0x66
 800ad6e:	9304      	str	r3, [sp, #16]
 800ad70:	f7ff fb48 	bl	800a404 <PxMessagingTask+0x1c0>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800ad74:	9b04      	ldr	r3, [sp, #16]
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d100      	bne.n	800ad7c <PxMessagingTask+0xb38>
 800ad7a:	e28c      	b.n	800b296 <PxMessagingTask+0x1052>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d801      	bhi.n	800ad86 <PxMessagingTask+0xb42>
 800ad82:	f7ff fb85 	bl	800a490 <PxMessagingTask+0x24c>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800ad86:	200f      	movs	r0, #15
 800ad88:	9b04      	ldr	r3, [sp, #16]
 800ad8a:	4a1e      	ldr	r2, [pc, #120]	; (800ae04 <PxMessagingTask+0xbc0>)
 800ad8c:	3b04      	subs	r3, #4
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	58d2      	ldr	r2, [r2, r3]
 800ad92:	4b16      	ldr	r3, [pc, #88]	; (800adec <PxMessagingTask+0xba8>)
 800ad94:	4010      	ands	r0, r2
 800ad96:	9004      	str	r0, [sp, #16]
 800ad98:	7018      	strb	r0, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800ad9a:	d100      	bne.n	800ad9e <PxMessagingTask+0xb5a>
 800ad9c:	e137      	b.n	800b00e <PxMessagingTask+0xdca>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ad9e:	2380      	movs	r3, #128	; 0x80
 800ada0:	9904      	ldr	r1, [sp, #16]
 800ada2:	0c12      	lsrs	r2, r2, #16
 800ada4:	3901      	subs	r1, #1
 800ada6:	059b      	lsls	r3, r3, #22
 800ada8:	b2c9      	uxtb	r1, r1
 800adaa:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 800adac:	2907      	cmp	r1, #7
 800adae:	d901      	bls.n	800adb4 <PxMessagingTask+0xb70>
 800adb0:	f7ff fb6e 	bl	800a490 <PxMessagingTask+0x24c>
 800adb4:	4814      	ldr	r0, [pc, #80]	; (800ae08 <PxMessagingTask+0xbc4>)
 800adb6:	0089      	lsls	r1, r1, #2
 800adb8:	5841      	ldr	r1, [r0, r1]
 800adba:	468f      	mov	pc, r1
 800adbc:	20000da0 	.word	0x20000da0
 800adc0:	2000110e 	.word	0x2000110e
 800adc4:	20007ff0 	.word	0x20007ff0
 800adc8:	deadbeef 	.word	0xdeadbeef
 800adcc:	20000f8c 	.word	0x20000f8c
 800add0:	e000ed00 	.word	0xe000ed00
 800add4:	05fa0004 	.word	0x05fa0004
 800add8:	20000f8d 	.word	0x20000f8d
 800addc:	20000f8e 	.word	0x20000f8e
 800ade0:	2000168c 	.word	0x2000168c
 800ade4:	20000b0f 	.word	0x20000b0f
 800ade8:	20006ab0 	.word	0x20006ab0
 800adec:	20000fd0 	.word	0x20000fd0
 800adf0:	200011a0 	.word	0x200011a0
 800adf4:	200011a8 	.word	0x200011a8
 800adf8:	0801ddf4 	.word	0x0801ddf4
 800adfc:	2000168a 	.word	0x2000168a
 800ae00:	20000d4c 	.word	0x20000d4c
 800ae04:	20006a38 	.word	0x20006a38
 800ae08:	0801de14 	.word	0x0801de14
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800ae0c:	4bdb      	ldr	r3, [pc, #876]	; (800b17c <PxMessagingTask+0xf38>)
 800ae0e:	9a08      	ldr	r2, [sp, #32]
 800ae10:	8818      	ldrh	r0, [r3, #0]
 800ae12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae14:	1838      	adds	r0, r7, r0
 800ae16:	469c      	mov	ip, r3
 800ae18:	4bd9      	ldr	r3, [pc, #868]	; (800b180 <PxMessagingTask+0xf3c>)
 800ae1a:	4464      	add	r4, ip
 800ae1c:	1919      	adds	r1, r3, r4
 800ae1e:	f00a f8f1 	bl	8015004 <memcpy>
								longMessageLastPtr =0;
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	4ad5      	ldr	r2, [pc, #852]	; (800b17c <PxMessagingTask+0xf38>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800ae26:	48d7      	ldr	r0, [pc, #860]	; (800b184 <PxMessagingTask+0xf40>)
								longMessageLastPtr =0;
 800ae28:	8013      	strh	r3, [r2, #0]
								responseStatus =BOS_OK;
 800ae2a:	4ad7      	ldr	r2, [pc, #860]	; (800b188 <PxMessagingTask+0xf44>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800ae2c:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 800ae2e:	7013      	strb	r3, [r2, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800ae30:	2300      	movs	r3, #0
 800ae32:	001a      	movs	r2, r3
 800ae34:	0019      	movs	r1, r3
 800ae36:	f005 fd93 	bl	8010960 <xTaskGenericNotify>
		if(result == BOS_ERR_UnknownMessage){
 800ae3a:	5d72      	ldrb	r2, [r6, r5]
 800ae3c:	f7ff fae2 	bl	800a404 <PxMessagingTask+0x1c0>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800ae40:	9b04      	ldr	r3, [sp, #16]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d001      	beq.n	800ae4a <PxMessagingTask+0xc06>
 800ae46:	f7ff fb23 	bl	800a490 <PxMessagingTask+0x24c>
								messageParams[0] =0; /* change own ID */
 800ae4a:	2700      	movs	r7, #0
 800ae4c:	4bcf      	ldr	r3, [pc, #828]	; (800b18c <PxMessagingTask+0xf48>)
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800ae4e:	4acf      	ldr	r2, [pc, #828]	; (800b18c <PxMessagingTask+0xf48>)
								messageParams[0] =0; /* change own ID */
 800ae50:	701f      	strb	r7, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800ae52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800ae54:	0039      	movs	r1, r7
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800ae56:	469c      	mov	ip, r3
 800ae58:	4464      	add	r4, ip
 800ae5a:	7863      	ldrb	r3, [r4, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800ae5c:	78a0      	ldrb	r0, [r4, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800ae5e:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800ae60:	2303      	movs	r3, #3
 800ae62:	003a      	movs	r2, r7
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	330d      	adds	r3, #13
 800ae68:	f7fe fcf8 	bl	800985c <SendMessageFromPort>
		if(result == BOS_ERR_UnknownMessage){
 800ae6c:	5d72      	ldrb	r2, [r6, r5]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800ae6e:	9704      	str	r7, [sp, #16]
 800ae70:	f7ff fac8 	bl	800a404 <PxMessagingTask+0x1c0>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800ae74:	4bc1      	ldr	r3, [pc, #772]	; (800b17c <PxMessagingTask+0xf38>)
 800ae76:	881f      	ldrh	r7, [r3, #0]
 800ae78:	4bc5      	ldr	r3, [pc, #788]	; (800b190 <PxMessagingTask+0xf4c>)
 800ae7a:	19d8      	adds	r0, r3, r7
 800ae7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae7e:	469c      	mov	ip, r3
 800ae80:	4bbf      	ldr	r3, [pc, #764]	; (800b180 <PxMessagingTask+0xf3c>)
 800ae82:	4464      	add	r4, ip
 800ae84:	1919      	adds	r1, r3, r4
 800ae86:	9c08      	ldr	r4, [sp, #32]
 800ae88:	0022      	movs	r2, r4
 800ae8a:	f00a f8bb 	bl	8015004 <memcpy>
								longMessageLastPtr +=numOfParams;
 800ae8e:	46a4      	mov	ip, r4
 800ae90:	4467      	add	r7, ip
 800ae92:	b2bf      	uxth	r7, r7
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800ae94:	2116      	movs	r1, #22
 800ae96:	0038      	movs	r0, r7
 800ae98:	f7f5 f95a 	bl	8000150 <__udivsi3>
 800ae9c:	4bbd      	ldr	r3, [pc, #756]	; (800b194 <PxMessagingTask+0xf50>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800ae9e:	003a      	movs	r2, r7
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800aea0:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800aea2:	49bb      	ldr	r1, [pc, #748]	; (800b190 <PxMessagingTask+0xf4c>)
 800aea4:	48bc      	ldr	r0, [pc, #752]	; (800b198 <PxMessagingTask+0xf54>)
 800aea6:	f00a f8ad 	bl	8015004 <memcpy>
								longMessageLastPtr =0;
 800aeaa:	9a04      	ldr	r2, [sp, #16]
 800aeac:	4bb3      	ldr	r3, [pc, #716]	; (800b17c <PxMessagingTask+0xf38>)
 800aeae:	801a      	strh	r2, [r3, #0]
		if(result == BOS_ERR_UnknownMessage){
 800aeb0:	5d72      	ldrb	r2, [r6, r5]
 800aeb2:	f7ff faa7 	bl	800a404 <PxMessagingTask+0x1c0>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800aeb6:	4652      	mov	r2, sl
 800aeb8:	49b8      	ldr	r1, [pc, #736]	; (800b19c <PxMessagingTask+0xf58>)
 800aeba:	48b9      	ldr	r0, [pc, #740]	; (800b1a0 <PxMessagingTask+0xf5c>)
 800aebc:	f00a fad4 	bl	8015468 <sprintf>
 800aec0:	f7ff fb27 	bl	800a512 <PxMessagingTask+0x2ce>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800aec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aec6:	191a      	adds	r2, r3, r4
 800aec8:	7893      	ldrb	r3, [r2, #2]
 800aeca:	78d1      	ldrb	r1, [r2, #3]
 800aecc:	061b      	lsls	r3, r3, #24
 800aece:	0409      	lsls	r1, r1, #16
 800aed0:	185b      	adds	r3, r3, r1
 800aed2:	7951      	ldrb	r1, [r2, #5]
 800aed4:	185b      	adds	r3, r3, r1
 800aed6:	4698      	mov	r8, r3
 800aed8:	7911      	ldrb	r1, [r2, #4]
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800aeda:	23e0      	movs	r3, #224	; 0xe0
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800aedc:	0209      	lsls	r1, r1, #8
 800aede:	4488      	add	r8, r1
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800aee0:	2180      	movs	r1, #128	; 0x80
 800aee2:	061b      	lsls	r3, r3, #24
 800aee4:	4443      	add	r3, r8
 800aee6:	0209      	lsls	r1, r1, #8
 800aee8:	428b      	cmp	r3, r1
 800aeea:	d249      	bcs.n	800af80 <PxMessagingTask+0xd3c>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800aeec:	7853      	ldrb	r3, [r2, #1]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b07      	cmp	r3, #7
 800aef4:	d812      	bhi.n	800af1c <PxMessagingTask+0xcd8>
 800aef6:	4aab      	ldr	r2, [pc, #684]	; (800b1a4 <PxMessagingTask+0xf60>)
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	58d3      	ldr	r3, [r2, r3]
 800aefc:	469f      	mov	pc, r3
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800aefe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af00:	469c      	mov	ip, r3
 800af02:	4464      	add	r4, ip
 800af04:	79e3      	ldrb	r3, [r4, #7]
 800af06:	79a2      	ldrb	r2, [r4, #6]
 800af08:	021b      	lsls	r3, r3, #8
 800af0a:	189b      	adds	r3, r3, r2
 800af0c:	7a22      	ldrb	r2, [r4, #8]
 800af0e:	0412      	lsls	r2, r2, #16
 800af10:	189b      	adds	r3, r3, r2
 800af12:	7a62      	ldrb	r2, [r4, #9]
 800af14:	0612      	lsls	r2, r2, #24
 800af16:	189b      	adds	r3, r3, r2
 800af18:	4642      	mov	r2, r8
 800af1a:	6013      	str	r3, [r2, #0]
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG){
 800af1c:	2240      	movs	r2, #64	; 0x40
 800af1e:	4ba2      	ldr	r3, [pc, #648]	; (800b1a8 <PxMessagingTask+0xf64>)
 800af20:	799b      	ldrb	r3, [r3, #6]
 800af22:	4393      	bics	r3, r2
 800af24:	2b20      	cmp	r3, #32
 800af26:	d001      	beq.n	800af2c <PxMessagingTask+0xce8>
 800af28:	f7ff fab2 	bl	800a490 <PxMessagingTask+0x24c>
								messageParams[0] =responseStatus;
 800af2c:	4b96      	ldr	r3, [pc, #600]	; (800b188 <PxMessagingTask+0xf44>)
 800af2e:	4a97      	ldr	r2, [pc, #604]	; (800b18c <PxMessagingTask+0xf48>)
 800af30:	781b      	ldrb	r3, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800af32:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 800af34:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800af36:	2201      	movs	r2, #1
 800af38:	e682      	b.n	800ac40 <PxMessagingTask+0x9fc>
								for(p =1; p <= NumOfPorts; p++){
 800af3a:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800af3c:	0020      	movs	r0, r4
								for(p =1; p <= NumOfPorts; p++){
 800af3e:	3401      	adds	r4, #1
									UpdateBaudrate(p,temp32);
 800af40:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 800af42:	b2e4      	uxtb	r4, r4
									UpdateBaudrate(p,temp32);
 800af44:	f003 fbfa 	bl	800e73c <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800af48:	2c07      	cmp	r4, #7
 800af4a:	d1f7      	bne.n	800af3c <PxMessagingTask+0xcf8>
							temp =temp32 =0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	5d72      	ldrb	r2, [r6, r5]
 800af50:	9309      	str	r3, [sp, #36]	; 0x24
								for(p =1; p <= NumOfPorts; p++){
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	f7ff fa56 	bl	800a404 <PxMessagingTask+0x1c0>
								temp =cMessage[port - 1][13 + shift];
 800af58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af5a:	191b      	adds	r3, r3, r4
 800af5c:	7b5b      	ldrb	r3, [r3, #13]
 800af5e:	9309      	str	r3, [sp, #36]	; 0x24
							if(numOfParams == 17)
 800af60:	e4ed      	b.n	800a93e <PxMessagingTask+0x6fa>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800af62:	9b08      	ldr	r3, [sp, #32]
 800af64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af66:	1a9a      	subs	r2, r3, r2
 800af68:	3a02      	subs	r2, #2
 800af6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af6c:	488f      	ldr	r0, [pc, #572]	; (800b1ac <PxMessagingTask+0xf68>)
 800af6e:	469c      	mov	ip, r3
 800af70:	4b83      	ldr	r3, [pc, #524]	; (800b180 <PxMessagingTask+0xf3c>)
 800af72:	4464      	add	r4, ip
 800af74:	1919      	adds	r1, r3, r4
 800af76:	46a8      	mov	r8, r5
 800af78:	f00a f844 	bl	8015004 <memcpy>
 800af7c:	003d      	movs	r5, r7
 800af7e:	e5c1      	b.n	800ab04 <PxMessagingTask+0x8c0>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800af80:	23f8      	movs	r3, #248	; 0xf8
 800af82:	2280      	movs	r2, #128	; 0x80
 800af84:	061b      	lsls	r3, r3, #24
 800af86:	4443      	add	r3, r8
 800af88:	0292      	lsls	r2, r2, #10
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d37e      	bcc.n	800b08c <PxMessagingTask+0xe48>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800af8e:	2315      	movs	r3, #21
 800af90:	4a7d      	ldr	r2, [pc, #500]	; (800b188 <PxMessagingTask+0xf44>)
 800af92:	7013      	strb	r3, [r2, #0]
 800af94:	e7c2      	b.n	800af1c <PxMessagingTask+0xcd8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800af96:	0713      	lsls	r3, r2, #28
 800af98:	d100      	bne.n	800af9c <PxMessagingTask+0xd58>
 800af9a:	e35f      	b.n	800b65c <PxMessagingTask+0x1418>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800af9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af9e:	191a      	adds	r2, r3, r4
 800afa0:	78d3      	ldrb	r3, [r2, #3]
 800afa2:	7911      	ldrb	r1, [r2, #4]
 800afa4:	021b      	lsls	r3, r3, #8
 800afa6:	0409      	lsls	r1, r1, #16
 800afa8:	185b      	adds	r3, r3, r1
 800afaa:	7891      	ldrb	r1, [r2, #2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800afac:	7952      	ldrb	r2, [r2, #5]
 800afae:	185b      	adds	r3, r3, r1
 800afb0:	0612      	lsls	r2, r2, #24
 800afb2:	189b      	adds	r3, r3, r2
 800afb4:	6003      	str	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800afb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afb8:	9804      	ldr	r0, [sp, #16]
 800afba:	5d0b      	ldrb	r3, [r1, r4]
 800afbc:	5c09      	ldrb	r1, [r1, r0]
 800afbe:	200f      	movs	r0, #15
 800afc0:	4a7b      	ldr	r2, [pc, #492]	; (800b1b0 <PxMessagingTask+0xf6c>)
 800afc2:	3b01      	subs	r3, #1
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	58d2      	ldr	r2, [r2, r3]
 800afc8:	4010      	ands	r0, r2
 800afca:	4288      	cmp	r0, r1
 800afcc:	d0a6      	beq.n	800af1c <PxMessagingTask+0xcd8>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800afce:	4879      	ldr	r0, [pc, #484]	; (800b1b4 <PxMessagingTask+0xf70>)
 800afd0:	4684      	mov	ip, r0
 800afd2:	4461      	add	r1, ip
 800afd4:	400a      	ands	r2, r1
 800afd6:	4976      	ldr	r1, [pc, #472]	; (800b1b0 <PxMessagingTask+0xf6c>)
 800afd8:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800afda:	2314      	movs	r3, #20
 800afdc:	4a6a      	ldr	r2, [pc, #424]	; (800b188 <PxMessagingTask+0xf44>)
 800afde:	7013      	strb	r3, [r2, #0]
 800afe0:	e79c      	b.n	800af1c <PxMessagingTask+0xcd8>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800afe2:	2313      	movs	r3, #19
 800afe4:	4a68      	ldr	r2, [pc, #416]	; (800b188 <PxMessagingTask+0xf44>)
 800afe6:	7013      	strb	r3, [r2, #0]
 800afe8:	e798      	b.n	800af1c <PxMessagingTask+0xcd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800afea:	2a01      	cmp	r2, #1
 800afec:	d900      	bls.n	800aff0 <PxMessagingTask+0xdac>
 800afee:	e5c9      	b.n	800ab84 <PxMessagingTask+0x940>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800aff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aff2:	4a71      	ldr	r2, [pc, #452]	; (800b1b8 <PxMessagingTask+0xf74>)
 800aff4:	5d1b      	ldrb	r3, [r3, r4]
 800aff6:	9304      	str	r3, [sp, #16]
 800aff8:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800affa:	2b08      	cmp	r3, #8
 800affc:	d900      	bls.n	800b000 <PxMessagingTask+0xdbc>
 800affe:	e5c1      	b.n	800ab84 <PxMessagingTask+0x940>
 800b000:	4a6e      	ldr	r2, [pc, #440]	; (800b1bc <PxMessagingTask+0xf78>)
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	58d3      	ldr	r3, [r2, r3]
 800b006:	469f      	mov	pc, r3
										messageParams[0] =*(__IO int8_t* )temp32;
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	4a60      	ldr	r2, [pc, #384]	; (800b18c <PxMessagingTask+0xf48>)
 800b00c:	7013      	strb	r3, [r2, #0]
									SendMessageToModule(src,
 800b00e:	2201      	movs	r2, #1
 800b010:	211f      	movs	r1, #31
 800b012:	4650      	mov	r0, sl
 800b014:	f7fe fe3e 	bl	8009c94 <SendMessageToModule>
 800b018:	5d72      	ldrb	r2, [r6, r5]
 800b01a:	f7ff f9f3 	bl	800a404 <PxMessagingTask+0x1c0>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800b01e:	7a08      	ldrb	r0, [r1, #8]
 800b020:	9200      	str	r2, [sp, #0]
 800b022:	4651      	mov	r1, sl
 800b024:	4642      	mov	r2, r8
 800b026:	f7fe fb23 	bl	8009670 <SetupDMAStreams>
 800b02a:	e4c4      	b.n	800a9b6 <PxMessagingTask+0x772>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800b02c:	7a08      	ldrb	r0, [r1, #8]
 800b02e:	9200      	str	r2, [sp, #0]
 800b030:	4651      	mov	r1, sl
 800b032:	4642      	mov	r2, r8
 800b034:	f7fe fb1c 	bl	8009670 <SetupDMAStreams>
 800b038:	e4cd      	b.n	800a9d6 <PxMessagingTask+0x792>
										ADCSelectChannel(ADCPort,"top");
 800b03a:	4961      	ldr	r1, [pc, #388]	; (800b1c0 <PxMessagingTask+0xf7c>)
 800b03c:	f7fd ff9c 	bl	8008f78 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b040:	4b60      	ldr	r3, [pc, #384]	; (800b1c4 <PxMessagingTask+0xf80>)
 800b042:	4a61      	ldr	r2, [pc, #388]	; (800b1c8 <PxMessagingTask+0xf84>)
 800b044:	7818      	ldrb	r0, [r3, #0]
 800b046:	495e      	ldr	r1, [pc, #376]	; (800b1c0 <PxMessagingTask+0xf7c>)
 800b048:	f7fd ffe4 	bl	8009014 <ReadADCChannel>
 800b04c:	f7ff f9a8 	bl	800a3a0 <PxMessagingTask+0x15c>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b052:	469c      	mov	ip, r3
 800b054:	4464      	add	r4, ip
 800b056:	78a3      	ldrb	r3, [r4, #2]
 800b058:	7862      	ldrb	r2, [r4, #1]
 800b05a:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b05c:	189b      	adds	r3, r3, r2
 800b05e:	4a5b      	ldr	r2, [pc, #364]	; (800b1cc <PxMessagingTask+0xf88>)
 800b060:	6013      	str	r3, [r2, #0]
 800b062:	17db      	asrs	r3, r3, #31
 800b064:	6053      	str	r3, [r2, #4]
										break;
 800b066:	e58d      	b.n	800ab84 <PxMessagingTask+0x940>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b06a:	469c      	mov	ip, r3
 800b06c:	4464      	add	r4, ip
 800b06e:	78a3      	ldrb	r3, [r4, #2]
 800b070:	78e2      	ldrb	r2, [r4, #3]
 800b072:	021b      	lsls	r3, r3, #8
 800b074:	0412      	lsls	r2, r2, #16
 800b076:	189b      	adds	r3, r3, r2
 800b078:	7862      	ldrb	r2, [r4, #1]
 800b07a:	189b      	adds	r3, r3, r2
 800b07c:	7922      	ldrb	r2, [r4, #4]
 800b07e:	0612      	lsls	r2, r2, #24
 800b080:	189b      	adds	r3, r3, r2
 800b082:	4a52      	ldr	r2, [pc, #328]	; (800b1cc <PxMessagingTask+0xf88>)
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	2300      	movs	r3, #0
 800b088:	6053      	str	r3, [r2, #4]
										break;
 800b08a:	e57b      	b.n	800ab84 <PxMessagingTask+0x940>
									HAL_FLASH_Unlock();
 800b08c:	f007 f9f4 	bl	8012478 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800b090:	2f22      	cmp	r7, #34	; 0x22
 800b092:	d100      	bne.n	800b096 <PxMessagingTask+0xe52>
 800b094:	e300      	b.n	800b698 <PxMessagingTask+0x1454>
									if(responseStatus == BOS_OK){
 800b096:	4b3c      	ldr	r3, [pc, #240]	; (800b188 <PxMessagingTask+0xf44>)
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d164      	bne.n	800b168 <PxMessagingTask+0xf24>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800b09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0a0:	191b      	adds	r3, r3, r4
 800b0a2:	785b      	ldrb	r3, [r3, #1]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b07      	cmp	r3, #7
 800b0aa:	d85d      	bhi.n	800b168 <PxMessagingTask+0xf24>
 800b0ac:	4a48      	ldr	r2, [pc, #288]	; (800b1d0 <PxMessagingTask+0xf8c>)
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	58d3      	ldr	r3, [r2, r3]
 800b0b2:	469f      	mov	pc, r3
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	4935      	ldr	r1, [pc, #212]	; (800b18c <PxMessagingTask+0xf48>)
 800b0b8:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	0a12      	lsrs	r2, r2, #8
 800b0be:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	0c12      	lsrs	r2, r2, #16
 800b0c4:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	0e1b      	lsrs	r3, r3, #24
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b0ca:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 800b0cc:	2204      	movs	r2, #4
 800b0ce:	211f      	movs	r1, #31
 800b0d0:	4650      	mov	r0, sl
 800b0d2:	f7fe fddf 	bl	8009c94 <SendMessageToModule>
		if(result == BOS_ERR_UnknownMessage){
 800b0d6:	f7ff f994 	bl	800a402 <PxMessagingTask+0x1be>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800b0da:	881a      	ldrh	r2, [r3, #0]
 800b0dc:	492b      	ldr	r1, [pc, #172]	; (800b18c <PxMessagingTask+0xf48>)
 800b0de:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	b21b      	sxth	r3, r3
 800b0e4:	121b      	asrs	r3, r3, #8
										SendMessageToModule(src,
 800b0e6:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b0e8:	704b      	strb	r3, [r1, #1]
										SendMessageToModule(src,
 800b0ea:	4650      	mov	r0, sl
 800b0ec:	211f      	movs	r1, #31
 800b0ee:	f7fe fdd1 	bl	8009c94 <SendMessageToModule>
		if(result == BOS_ERR_UnknownMessage){
 800b0f2:	5d72      	ldrb	r2, [r6, r5]
 800b0f4:	f7ff f986 	bl	800a404 <PxMessagingTask+0x1c0>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800b0f8:	881a      	ldrh	r2, [r3, #0]
 800b0fa:	4924      	ldr	r1, [pc, #144]	; (800b18c <PxMessagingTask+0xf48>)
 800b0fc:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	0a1b      	lsrs	r3, r3, #8
 800b102:	e7f0      	b.n	800b0e6 <PxMessagingTask+0xea2>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	4921      	ldr	r1, [pc, #132]	; (800b18c <PxMessagingTask+0xf48>)
 800b108:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	1212      	asrs	r2, r2, #8
 800b10e:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	1412      	asrs	r2, r2, #16
 800b114:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	161b      	asrs	r3, r3, #24
 800b11a:	e7d6      	b.n	800b0ca <PxMessagingTask+0xe86>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800b11c:	781a      	ldrb	r2, [r3, #0]
 800b11e:	491b      	ldr	r1, [pc, #108]	; (800b18c <PxMessagingTask+0xf48>)
										SendMessageToModule(src,
 800b120:	4650      	mov	r0, sl
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800b122:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800b124:	785a      	ldrb	r2, [r3, #1]
 800b126:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800b128:	789a      	ldrb	r2, [r3, #2]
 800b12a:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800b12c:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 800b12e:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800b130:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 800b132:	211f      	movs	r1, #31
 800b134:	f7fe fdae 	bl	8009c94 <SendMessageToModule>
		if(result == BOS_ERR_UnknownMessage){
 800b138:	5d72      	ldrb	r2, [r6, r5]
 800b13a:	f7ff f963 	bl	800a404 <PxMessagingTask+0x1c0>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b13e:	4643      	mov	r3, r8
 800b140:	881a      	ldrh	r2, [r3, #0]
 800b142:	4b24      	ldr	r3, [pc, #144]	; (800b1d4 <PxMessagingTask+0xf90>)
 800b144:	429a      	cmp	r2, r3
 800b146:	d000      	beq.n	800b14a <PxMessagingTask+0xf06>
 800b148:	e249      	b.n	800b5de <PxMessagingTask+0x139a>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b14c:	469c      	mov	ip, r3
 800b14e:	4464      	add	r4, ip
 800b150:	79e2      	ldrb	r2, [r4, #7]
 800b152:	79a3      	ldrb	r3, [r4, #6]
 800b154:	0212      	lsls	r2, r2, #8
 800b156:	18d2      	adds	r2, r2, r3
 800b158:	2300      	movs	r3, #0
 800b15a:	491c      	ldr	r1, [pc, #112]	; (800b1cc <PxMessagingTask+0xf88>)
													status =HAL_FLASH_Program(
 800b15c:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b15e:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b160:	4641      	mov	r1, r8
 800b162:	f007 f9e5 	bl	8012530 <HAL_FLASH_Program>
 800b166:	900d      	str	r0, [sp, #52]	; 0x34
									HAL_FLASH_Lock();
 800b168:	f007 f998 	bl	801249c <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b16c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d100      	bne.n	800b174 <PxMessagingTask+0xf30>
 800b172:	e6d3      	b.n	800af1c <PxMessagingTask+0xcd8>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b174:	2316      	movs	r3, #22
 800b176:	4a04      	ldr	r2, [pc, #16]	; (800b188 <PxMessagingTask+0xf44>)
 800b178:	7013      	strb	r3, [r2, #0]
 800b17a:	e6cf      	b.n	800af1c <PxMessagingTask+0xcd8>
 800b17c:	20000f8e 	.word	0x20000f8e
 800b180:	20000da0 	.word	0x20000da0
 800b184:	2000159c 	.word	0x2000159c
 800b188:	200011a8 	.word	0x200011a8
 800b18c:	20000fd0 	.word	0x20000fd0
 800b190:	200016c0 	.word	0x200016c0
 800b194:	2000001c 	.word	0x2000001c
 800b198:	20000b10 	.word	0x20000b10
 800b19c:	0801c804 	.word	0x0801c804
 800b1a0:	200017e0 	.word	0x200017e0
 800b1a4:	0801de34 	.word	0x0801de34
 800b1a8:	20006ab0 	.word	0x20006ab0
 800b1ac:	2000168c 	.word	0x2000168c
 800b1b0:	20006a38 	.word	0x20006a38
 800b1b4:	0000fff0 	.word	0x0000fff0
 800b1b8:	20000070 	.word	0x20000070
 800b1bc:	0801de54 	.word	0x0801de54
 800b1c0:	0801be28 	.word	0x0801be28
 800b1c4:	20001654 	.word	0x20001654
 800b1c8:	20001658 	.word	0x20001658
 800b1cc:	200011a0 	.word	0x200011a0
 800b1d0:	0801de78 	.word	0x0801de78
 800b1d4:	0000ffff 	.word	0x0000ffff
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1da:	191b      	adds	r3, r3, r4
 800b1dc:	789a      	ldrb	r2, [r3, #2]
 800b1de:	78d9      	ldrb	r1, [r3, #3]
 800b1e0:	0212      	lsls	r2, r2, #8
 800b1e2:	0409      	lsls	r1, r1, #16
 800b1e4:	1852      	adds	r2, r2, r1
 800b1e6:	7859      	ldrb	r1, [r3, #1]
 800b1e8:	1852      	adds	r2, r2, r1
 800b1ea:	7919      	ldrb	r1, [r3, #4]
 800b1ec:	0609      	lsls	r1, r1, #24
 800b1ee:	1852      	adds	r2, r2, r1
 800b1f0:	49ec      	ldr	r1, [pc, #944]	; (800b5a4 <PxMessagingTask+0x1360>)
 800b1f2:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b1f4:	799a      	ldrb	r2, [r3, #6]
 800b1f6:	79d9      	ldrb	r1, [r3, #7]
 800b1f8:	0212      	lsls	r2, r2, #8
 800b1fa:	0409      	lsls	r1, r1, #16
 800b1fc:	1852      	adds	r2, r2, r1
 800b1fe:	7959      	ldrb	r1, [r3, #5]
 800b200:	1852      	adds	r2, r2, r1
 800b202:	7a19      	ldrb	r1, [r3, #8]
 800b204:	0609      	lsls	r1, r1, #24
 800b206:	1852      	adds	r2, r2, r1
 800b208:	49e6      	ldr	r1, [pc, #920]	; (800b5a4 <PxMessagingTask+0x1360>)
 800b20a:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b20c:	7a9a      	ldrb	r2, [r3, #10]
 800b20e:	7ad9      	ldrb	r1, [r3, #11]
 800b210:	0212      	lsls	r2, r2, #8
 800b212:	0409      	lsls	r1, r1, #16
 800b214:	1852      	adds	r2, r2, r1
 800b216:	7a59      	ldrb	r1, [r3, #9]
 800b218:	7b1b      	ldrb	r3, [r3, #12]
 800b21a:	1852      	adds	r2, r2, r1
 800b21c:	061b      	lsls	r3, r3, #24
 800b21e:	18d3      	adds	r3, r2, r3
 800b220:	4ae0      	ldr	r2, [pc, #896]	; (800b5a4 <PxMessagingTask+0x1360>)
 800b222:	6093      	str	r3, [r2, #8]
									break;
 800b224:	f7ff f8e1 	bl	800a3ea <PxMessagingTask+0x1a6>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b22a:	191b      	adds	r3, r3, r4
 800b22c:	789a      	ldrb	r2, [r3, #2]
 800b22e:	78d9      	ldrb	r1, [r3, #3]
 800b230:	0212      	lsls	r2, r2, #8
 800b232:	0409      	lsls	r1, r1, #16
 800b234:	1852      	adds	r2, r2, r1
 800b236:	7859      	ldrb	r1, [r3, #1]
 800b238:	1852      	adds	r2, r2, r1
 800b23a:	7919      	ldrb	r1, [r3, #4]
 800b23c:	0609      	lsls	r1, r1, #24
 800b23e:	1852      	adds	r2, r2, r1
 800b240:	49d8      	ldr	r1, [pc, #864]	; (800b5a4 <PxMessagingTask+0x1360>)
 800b242:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b244:	799a      	ldrb	r2, [r3, #6]
 800b246:	79d9      	ldrb	r1, [r3, #7]
 800b248:	0212      	lsls	r2, r2, #8
 800b24a:	0409      	lsls	r1, r1, #16
 800b24c:	1852      	adds	r2, r2, r1
 800b24e:	7959      	ldrb	r1, [r3, #5]
 800b250:	1852      	adds	r2, r2, r1
 800b252:	7a19      	ldrb	r1, [r3, #8]
 800b254:	0609      	lsls	r1, r1, #24
 800b256:	1852      	adds	r2, r2, r1
 800b258:	49d2      	ldr	r1, [pc, #840]	; (800b5a4 <PxMessagingTask+0x1360>)
 800b25a:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b25c:	7a9a      	ldrb	r2, [r3, #10]
 800b25e:	7ad9      	ldrb	r1, [r3, #11]
 800b260:	0212      	lsls	r2, r2, #8
 800b262:	0409      	lsls	r1, r1, #16
 800b264:	1852      	adds	r2, r2, r1
 800b266:	7a59      	ldrb	r1, [r3, #9]
 800b268:	7b1b      	ldrb	r3, [r3, #12]
 800b26a:	1852      	adds	r2, r2, r1
 800b26c:	061b      	lsls	r3, r3, #24
 800b26e:	18d3      	adds	r3, r2, r3
 800b270:	4acc      	ldr	r2, [pc, #816]	; (800b5a4 <PxMessagingTask+0x1360>)
 800b272:	6153      	str	r3, [r2, #20]
									break;
 800b274:	f7ff f8b9 	bl	800a3ea <PxMessagingTask+0x1a6>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800b278:	9a08      	ldr	r2, [sp, #32]
 800b27a:	3a01      	subs	r2, #1
 800b27c:	e675      	b.n	800af6a <PxMessagingTask+0xd26>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800b27e:	9a04      	ldr	r2, [sp, #16]
 800b280:	7a20      	ldrb	r0, [r4, #8]
 800b282:	4651      	mov	r1, sl
 800b284:	9200      	str	r2, [sp, #0]
 800b286:	4642      	mov	r2, r8
 800b288:	f7fe f9f2 	bl	8009670 <SetupDMAStreams>
 800b28c:	2300      	movs	r3, #0
 800b28e:	5d72      	ldrb	r2, [r6, r5]
 800b290:	9304      	str	r3, [sp, #16]
 800b292:	f7ff f8b7 	bl	800a404 <PxMessagingTask+0x1c0>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b298:	1c60      	adds	r0, r4, #1
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b29a:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b29e:	4462      	add	r2, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2a0:	469c      	mov	ip, r3
 800b2a2:	4bc1      	ldr	r3, [pc, #772]	; (800b5a8 <PxMessagingTask+0x1364>)
 800b2a4:	4460      	add	r0, ip
 800b2a6:	469c      	mov	ip, r3
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2a8:	2700      	movs	r7, #0
 800b2aa:	3a01      	subs	r2, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2ac:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2ae:	7017      	strb	r7, [r2, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2b0:	f7f8 fed6 	bl	8004060 <IsModuleParameter>
 800b2b4:	9009      	str	r0, [sp, #36]	; 0x24
								if(temp == 0){ // Parameter does not exist
 800b2b6:	42b8      	cmp	r0, r7
 800b2b8:	d100      	bne.n	800b2bc <PxMessagingTask+0x1078>
 800b2ba:	e19e      	b.n	800b5fa <PxMessagingTask+0x13b6>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b2bc:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b2be:	49bb      	ldr	r1, [pc, #748]	; (800b5ac <PxMessagingTask+0x1368>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b2c2:	468c      	mov	ip, r1
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	435a      	muls	r2, r3
 800b2c8:	4bb8      	ldr	r3, [pc, #736]	; (800b5ac <PxMessagingTask+0x1368>)
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b2ca:	49b9      	ldr	r1, [pc, #740]	; (800b5b0 <PxMessagingTask+0x136c>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b2cc:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b2ce:	4462      	add	r2, ip
 800b2d0:	7912      	ldrb	r2, [r2, #4]
 800b2d2:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800b2d4:	3a01      	subs	r2, #1
 800b2d6:	b2d2      	uxtb	r2, r2
 800b2d8:	2a07      	cmp	r2, #7
 800b2da:	d900      	bls.n	800b2de <PxMessagingTask+0x109a>
 800b2dc:	e208      	b.n	800b6f0 <PxMessagingTask+0x14ac>
 800b2de:	49b5      	ldr	r1, [pc, #724]	; (800b5b4 <PxMessagingTask+0x1370>)
 800b2e0:	0092      	lsls	r2, r2, #2
 800b2e2:	588a      	ldr	r2, [r1, r2]
 800b2e4:	4697      	mov	pc, r2
 800b2e6:	9b04      	ldr	r3, [sp, #16]
 800b2e8:	4667      	mov	r7, ip
 800b2ea:	4698      	mov	r8, r3
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800b2ec:	2338      	movs	r3, #56	; 0x38
 800b2ee:	435d      	muls	r5, r3
 800b2f0:	4bad      	ldr	r3, [pc, #692]	; (800b5a8 <PxMessagingTask+0x1364>)
 800b2f2:	4689      	mov	r9, r1
 800b2f4:	469c      	mov	ip, r3
 800b2f6:	4682      	mov	sl, r0
 800b2f8:	4465      	add	r5, ip
 800b2fa:	192e      	adds	r6, r5, r4
 800b2fc:	7a31      	ldrb	r1, [r6, #8]
 800b2fe:	20e4      	movs	r0, #228	; 0xe4
 800b300:	f7fc fe72 	bl	8007fe8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800b304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b306:	5d2b      	ldrb	r3, [r5, r4]
 800b308:	5ca9      	ldrb	r1, [r5, r2]
 800b30a:	021b      	lsls	r3, r3, #8
 800b30c:	18c9      	adds	r1, r1, r3
 800b30e:	b289      	uxth	r1, r1
 800b310:	20e5      	movs	r0, #229	; 0xe5
 800b312:	f7fc fe69 	bl	8007fe8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800b316:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b318:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b31a:	5ceb      	ldrb	r3, [r5, r3]
 800b31c:	5ca9      	ldrb	r1, [r5, r2]
 800b31e:	021b      	lsls	r3, r3, #8
 800b320:	18c9      	adds	r1, r1, r3
 800b322:	b289      	uxth	r1, r1
 800b324:	20e6      	movs	r0, #230	; 0xe6
 800b326:	f7fc fe5f 	bl	8007fe8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800b32a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b32c:	5de9      	ldrb	r1, [r5, r7]
 800b32e:	5ceb      	ldrb	r3, [r5, r3]
 800b330:	20e7      	movs	r0, #231	; 0xe7
 800b332:	021b      	lsls	r3, r3, #8
 800b334:	18c9      	adds	r1, r1, r3
 800b336:	b289      	uxth	r1, r1
 800b338:	f7fc fe56 	bl	8007fe8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800b33c:	464b      	mov	r3, r9
 800b33e:	4652      	mov	r2, sl
 800b340:	5ceb      	ldrb	r3, [r5, r3]
 800b342:	5ca9      	ldrb	r1, [r5, r2]
 800b344:	021b      	lsls	r3, r3, #8
 800b346:	18c9      	adds	r1, r1, r3
 800b348:	b289      	uxth	r1, r1
 800b34a:	20e8      	movs	r0, #232	; 0xe8
 800b34c:	f7fc fe4c 	bl	8007fe8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800b350:	7a73      	ldrb	r3, [r6, #9]
 800b352:	7ab1      	ldrb	r1, [r6, #10]
 800b354:	021b      	lsls	r3, r3, #8
 800b356:	18c9      	adds	r1, r1, r3
 800b358:	20e9      	movs	r0, #233	; 0xe9
 800b35a:	b289      	uxth	r1, r1
 800b35c:	f7fc fe44 	bl	8007fe8 <EE_WriteVariable>
								if(numOfParams == 19)
 800b360:	9b08      	ldr	r3, [sp, #32]
 800b362:	2b13      	cmp	r3, #19
 800b364:	d100      	bne.n	800b368 <PxMessagingTask+0x1124>
 800b366:	e112      	b.n	800b58e <PxMessagingTask+0x134a>
								if(numOfParams == 21)
 800b368:	9b08      	ldr	r3, [sp, #32]
 800b36a:	2b15      	cmp	r3, #21
 800b36c:	d100      	bne.n	800b370 <PxMessagingTask+0x112c>
 800b36e:	e162      	b.n	800b636 <PxMessagingTask+0x13f2>
  __ASM volatile ("dsb 0xF":::"memory");
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	4b90      	ldr	r3, [pc, #576]	; (800b5b8 <PxMessagingTask+0x1374>)
 800b376:	4a91      	ldr	r2, [pc, #580]	; (800b5bc <PxMessagingTask+0x1378>)
 800b378:	60da      	str	r2, [r3, #12]
 800b37a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800b37e:	46c0      	nop			; (mov r8, r8)
 800b380:	e7fd      	b.n	800b37e <PxMessagingTask+0x113a>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800b382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b384:	4a8e      	ldr	r2, [pc, #568]	; (800b5c0 <PxMessagingTask+0x137c>)
 800b386:	469c      	mov	ip, r3
 800b388:	4464      	add	r4, ip
 800b38a:	7863      	ldrb	r3, [r4, #1]
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	2300      	movs	r3, #0
 800b390:	6053      	str	r3, [r2, #4]
										break;
 800b392:	f7ff fbf7 	bl	800ab84 <PxMessagingTask+0x940>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800b396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b398:	4642      	mov	r2, r8
 800b39a:	469c      	mov	ip, r3
 800b39c:	4464      	add	r4, ip
 800b39e:	79a3      	ldrb	r3, [r4, #6]
 800b3a0:	7013      	strb	r3, [r2, #0]
											break;
 800b3a2:	e5bb      	b.n	800af1c <PxMessagingTask+0xcd8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b3a4:	0713      	lsls	r3, r2, #28
 800b3a6:	d100      	bne.n	800b3aa <PxMessagingTask+0x1166>
 800b3a8:	e131      	b.n	800b60e <PxMessagingTask+0x13ca>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800b3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ac:	191b      	adds	r3, r3, r4
 800b3ae:	789b      	ldrb	r3, [r3, #2]
 800b3b0:	7003      	strb	r3, [r0, #0]
 800b3b2:	e600      	b.n	800afb6 <PxMessagingTask+0xd72>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b3b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3b6:	469c      	mov	ip, r3
 800b3b8:	4464      	add	r4, ip
 800b3ba:	78a3      	ldrb	r3, [r4, #2]
 800b3bc:	7862      	ldrb	r2, [r4, #1]
 800b3be:	021b      	lsls	r3, r3, #8
 800b3c0:	189b      	adds	r3, r3, r2
 800b3c2:	78e2      	ldrb	r2, [r4, #3]
 800b3c4:	0412      	lsls	r2, r2, #16
 800b3c6:	189b      	adds	r3, r3, r2
 800b3c8:	7922      	ldrb	r2, [r4, #4]
 800b3ca:	0612      	lsls	r2, r2, #24
 800b3cc:	e646      	b.n	800b05c <PxMessagingTask+0xe18>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b3ce:	2310      	movs	r3, #16
 800b3d0:	4a7c      	ldr	r2, [pc, #496]	; (800b5c4 <PxMessagingTask+0x1380>)
 800b3d2:	7013      	strb	r3, [r2, #0]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800b3d4:	5d72      	ldrb	r2, [r6, r5]
 800b3d6:	f7ff f815 	bl	800a404 <PxMessagingTask+0x1c0>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800b3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3dc:	4a78      	ldr	r2, [pc, #480]	; (800b5c0 <PxMessagingTask+0x137c>)
 800b3de:	469c      	mov	ip, r3
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	4464      	add	r4, ip
 800b3e4:	56e3      	ldrsb	r3, [r4, r3]
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	17db      	asrs	r3, r3, #31
 800b3ea:	6053      	str	r3, [r2, #4]
										break;
 800b3ec:	f7ff fbca 	bl	800ab84 <PxMessagingTask+0x940>
											messageParams[1] =*(__IO int8_t* )temp32;
 800b3f0:	4a6f      	ldr	r2, [pc, #444]	; (800b5b0 <PxMessagingTask+0x136c>)
 800b3f2:	781b      	ldrb	r3, [r3, #0]
											SendMessageToModule(src,
 800b3f4:	211f      	movs	r1, #31
											messageParams[1] =*(__IO int8_t* )temp32;
 800b3f6:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	e421      	b.n	800ac40 <PxMessagingTask+0x9fc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b3fc:	0713      	lsls	r3, r2, #28
 800b3fe:	d100      	bne.n	800b402 <PxMessagingTask+0x11be>
 800b400:	e122      	b.n	800b648 <PxMessagingTask+0x1404>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800b402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b404:	1919      	adds	r1, r3, r4
 800b406:	78ca      	ldrb	r2, [r1, #3]
 800b408:	788b      	ldrb	r3, [r1, #2]
 800b40a:	0212      	lsls	r2, r2, #8
 800b40c:	189b      	adds	r3, r3, r2
 800b40e:	b21b      	sxth	r3, r3
 800b410:	8003      	strh	r3, [r0, #0]
 800b412:	e5d0      	b.n	800afb6 <PxMessagingTask+0xd72>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800b414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b416:	469c      	mov	ip, r3
 800b418:	4464      	add	r4, ip
 800b41a:	79e2      	ldrb	r2, [r4, #7]
 800b41c:	79a3      	ldrb	r3, [r4, #6]
 800b41e:	0212      	lsls	r2, r2, #8
 800b420:	189b      	adds	r3, r3, r2
 800b422:	4642      	mov	r2, r8
 800b424:	b21b      	sxth	r3, r3
 800b426:	8013      	strh	r3, [r2, #0]
											break;
 800b428:	e578      	b.n	800af1c <PxMessagingTask+0xcd8>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800b42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b42c:	4642      	mov	r2, r8
 800b42e:	469c      	mov	ip, r3
 800b430:	2306      	movs	r3, #6
 800b432:	4464      	add	r4, ip
 800b434:	56e3      	ldrsb	r3, [r4, r3]
 800b436:	7013      	strb	r3, [r2, #0]
											break;
 800b438:	e570      	b.n	800af1c <PxMessagingTask+0xcd8>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b43c:	469c      	mov	ip, r3
 800b43e:	4464      	add	r4, ip
 800b440:	79e2      	ldrb	r2, [r4, #7]
 800b442:	79a3      	ldrb	r3, [r4, #6]
 800b444:	0212      	lsls	r2, r2, #8
 800b446:	189b      	adds	r3, r3, r2
 800b448:	4642      	mov	r2, r8
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	8013      	strh	r3, [r2, #0]
											break;
 800b44e:	e565      	b.n	800af1c <PxMessagingTask+0xcd8>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b452:	469c      	mov	ip, r3
 800b454:	4464      	add	r4, ip
 800b456:	79e3      	ldrb	r3, [r4, #7]
 800b458:	7a22      	ldrb	r2, [r4, #8]
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	0412      	lsls	r2, r2, #16
 800b45e:	189b      	adds	r3, r3, r2
 800b460:	79a2      	ldrb	r2, [r4, #6]
 800b462:	e555      	b.n	800af10 <PxMessagingTask+0xccc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b464:	0713      	lsls	r3, r2, #28
 800b466:	d100      	bne.n	800b46a <PxMessagingTask+0x1226>
 800b468:	e102      	b.n	800b670 <PxMessagingTask+0x142c>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b46c:	191a      	adds	r2, r3, r4
 800b46e:	78d3      	ldrb	r3, [r2, #3]
 800b470:	7911      	ldrb	r1, [r2, #4]
 800b472:	021b      	lsls	r3, r3, #8
 800b474:	0409      	lsls	r1, r1, #16
 800b476:	185b      	adds	r3, r3, r1
 800b478:	7891      	ldrb	r1, [r2, #2]
 800b47a:	7952      	ldrb	r2, [r2, #5]
 800b47c:	185b      	adds	r3, r3, r1
 800b47e:	0612      	lsls	r2, r2, #24
 800b480:	189b      	adds	r3, r3, r2
 800b482:	4a4f      	ldr	r2, [pc, #316]	; (800b5c0 <PxMessagingTask+0x137c>)
 800b484:	494e      	ldr	r1, [pc, #312]	; (800b5c0 <PxMessagingTask+0x137c>)
 800b486:	6013      	str	r3, [r2, #0]
 800b488:	2200      	movs	r2, #0
 800b48a:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800b48c:	6003      	str	r3, [r0, #0]
 800b48e:	e592      	b.n	800afb6 <PxMessagingTask+0xd72>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b490:	0713      	lsls	r3, r2, #28
 800b492:	d100      	bne.n	800b496 <PxMessagingTask+0x1252>
 800b494:	e0c5      	b.n	800b622 <PxMessagingTask+0x13de>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800b496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b498:	191b      	adds	r3, r3, r4
 800b49a:	789b      	ldrb	r3, [r3, #2]
 800b49c:	b25b      	sxtb	r3, r3
 800b49e:	7003      	strb	r3, [r0, #0]
 800b4a0:	e589      	b.n	800afb6 <PxMessagingTask+0xd72>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b4a2:	0713      	lsls	r3, r2, #28
 800b4a4:	d100      	bne.n	800b4a8 <PxMessagingTask+0x1264>
 800b4a6:	e10c      	b.n	800b6c2 <PxMessagingTask+0x147e>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800b4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4aa:	1919      	adds	r1, r3, r4
 800b4ac:	78ca      	ldrb	r2, [r1, #3]
 800b4ae:	788b      	ldrb	r3, [r1, #2]
 800b4b0:	0212      	lsls	r2, r2, #8
 800b4b2:	189b      	adds	r3, r3, r2
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	8003      	strh	r3, [r0, #0]
 800b4b8:	e57d      	b.n	800afb6 <PxMessagingTask+0xd72>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b4ba:	0713      	lsls	r3, r2, #28
 800b4bc:	d100      	bne.n	800b4c0 <PxMessagingTask+0x127c>
 800b4be:	e0e1      	b.n	800b684 <PxMessagingTask+0x1440>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800b4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4c2:	191a      	adds	r2, r3, r4
 800b4c4:	78d3      	ldrb	r3, [r2, #3]
 800b4c6:	7891      	ldrb	r1, [r2, #2]
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	185b      	adds	r3, r3, r1
 800b4cc:	7911      	ldrb	r1, [r2, #4]
 800b4ce:	0409      	lsls	r1, r1, #16
 800b4d0:	e56c      	b.n	800afac <PxMessagingTask+0xd68>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d4:	493a      	ldr	r1, [pc, #232]	; (800b5c0 <PxMessagingTask+0x137c>)
 800b4d6:	469c      	mov	ip, r3
 800b4d8:	4464      	add	r4, ip
 800b4da:	79e3      	ldrb	r3, [r4, #7]
 800b4dc:	7a22      	ldrb	r2, [r4, #8]
 800b4de:	021b      	lsls	r3, r3, #8
 800b4e0:	0412      	lsls	r2, r2, #16
 800b4e2:	189b      	adds	r3, r3, r2
 800b4e4:	79a2      	ldrb	r2, [r4, #6]
 800b4e6:	189b      	adds	r3, r3, r2
 800b4e8:	7a62      	ldrb	r2, [r4, #9]
 800b4ea:	0612      	lsls	r2, r2, #24
 800b4ec:	189b      	adds	r3, r3, r2
 800b4ee:	4a34      	ldr	r2, [pc, #208]	; (800b5c0 <PxMessagingTask+0x137c>)
 800b4f0:	6013      	str	r3, [r2, #0]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800b4f6:	4642      	mov	r2, r8
 800b4f8:	6013      	str	r3, [r2, #0]
											break;
 800b4fa:	e50f      	b.n	800af1c <PxMessagingTask+0xcd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800b4fc:	881a      	ldrh	r2, [r3, #0]
 800b4fe:	492c      	ldr	r1, [pc, #176]	; (800b5b0 <PxMessagingTask+0x136c>)
 800b500:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b502:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b504:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b506:	b21b      	sxth	r3, r3
 800b508:	121b      	asrs	r3, r3, #8
 800b50a:	708b      	strb	r3, [r1, #2]
											SendMessageToModule(src,
 800b50c:	211f      	movs	r1, #31
 800b50e:	f7ff fb97 	bl	800ac40 <PxMessagingTask+0x9fc>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800b512:	881a      	ldrh	r2, [r3, #0]
 800b514:	4926      	ldr	r1, [pc, #152]	; (800b5b0 <PxMessagingTask+0x136c>)
 800b516:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b518:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b51a:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b51c:	0a1b      	lsrs	r3, r3, #8
 800b51e:	708b      	strb	r3, [r1, #2]
											SendMessageToModule(src,
 800b520:	211f      	movs	r1, #31
 800b522:	f7ff fb8d 	bl	800ac40 <PxMessagingTask+0x9fc>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	4921      	ldr	r1, [pc, #132]	; (800b5b0 <PxMessagingTask+0x136c>)
 800b52a:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	0a12      	lsrs	r2, r2, #8
 800b530:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	0c12      	lsrs	r2, r2, #16
 800b536:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b538:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b53a:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b53c:	0e1b      	lsrs	r3, r3, #24
 800b53e:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 800b540:	211f      	movs	r1, #31
 800b542:	f7ff fb7d 	bl	800ac40 <PxMessagingTask+0x9fc>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	4919      	ldr	r1, [pc, #100]	; (800b5b0 <PxMessagingTask+0x136c>)
 800b54a:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	1212      	asrs	r2, r2, #8
 800b550:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	1412      	asrs	r2, r2, #16
 800b556:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b558:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b55a:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b55c:	161b      	asrs	r3, r3, #24
 800b55e:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 800b560:	211f      	movs	r1, #31
 800b562:	f7ff fb6d 	bl	800ac40 <PxMessagingTask+0x9fc>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	4911      	ldr	r1, [pc, #68]	; (800b5b0 <PxMessagingTask+0x136c>)
 800b56a:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b56c:	4b16      	ldr	r3, [pc, #88]	; (800b5c8 <PxMessagingTask+0x1384>)
 800b56e:	18d3      	adds	r3, r2, r3
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b574:	4b15      	ldr	r3, [pc, #84]	; (800b5cc <PxMessagingTask+0x1388>)
 800b576:	18d3      	adds	r3, r2, r3
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b57c:	4b14      	ldr	r3, [pc, #80]	; (800b5d0 <PxMessagingTask+0x138c>)
 800b57e:	469c      	mov	ip, r3
 800b580:	4462      	add	r2, ip
 800b582:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 800b584:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b586:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 800b588:	211f      	movs	r1, #31
 800b58a:	f7ff fb59 	bl	800ac40 <PxMessagingTask+0x9fc>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800b58e:	4643      	mov	r3, r8
 800b590:	5ceb      	ldrb	r3, [r5, r3]
 800b592:	7b31      	ldrb	r1, [r6, #12]
 800b594:	021b      	lsls	r3, r3, #8
 800b596:	18c9      	adds	r1, r1, r3
 800b598:	b289      	uxth	r1, r1
 800b59a:	20ea      	movs	r0, #234	; 0xea
 800b59c:	f7fc fd24 	bl	8007fe8 <EE_WriteVariable>
								if(numOfParams == 21)
 800b5a0:	e6e6      	b.n	800b370 <PxMessagingTask+0x112c>
 800b5a2:	46c0      	nop			; (mov r8, r8)
 800b5a4:	20001664 	.word	0x20001664
 800b5a8:	20000da0 	.word	0x20000da0
 800b5ac:	20000084 	.word	0x20000084
 800b5b0:	20000fd0 	.word	0x20000fd0
 800b5b4:	0801de98 	.word	0x0801de98
 800b5b8:	e000ed00 	.word	0xe000ed00
 800b5bc:	05fa0004 	.word	0x05fa0004
 800b5c0:	200011a0 	.word	0x200011a0
 800b5c4:	200011a8 	.word	0x200011a8
 800b5c8:	20000001 	.word	0x20000001
 800b5cc:	20000002 	.word	0x20000002
 800b5d0:	20000003 	.word	0x20000003
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b5d4:	4643      	mov	r3, r8
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	d100      	bne.n	800b5de <PxMessagingTask+0x139a>
 800b5dc:	e090      	b.n	800b700 <PxMessagingTask+0x14bc>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b5de:	2316      	movs	r3, #22
 800b5e0:	4a60      	ldr	r2, [pc, #384]	; (800b764 <PxMessagingTask+0x1520>)
 800b5e2:	7013      	strb	r3, [r2, #0]
													break;
 800b5e4:	e5c0      	b.n	800b168 <PxMessagingTask+0xf24>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b5e6:	4643      	mov	r3, r8
 800b5e8:	881a      	ldrh	r2, [r3, #0]
 800b5ea:	4b5f      	ldr	r3, [pc, #380]	; (800b768 <PxMessagingTask+0x1524>)
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d1f6      	bne.n	800b5de <PxMessagingTask+0x139a>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b5f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5f2:	469c      	mov	ip, r3
 800b5f4:	4464      	add	r4, ip
 800b5f6:	79a2      	ldrb	r2, [r4, #6]
 800b5f8:	e5ae      	b.n	800b158 <PxMessagingTask+0xf14>
									SendMessageToModule(src,
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	211f      	movs	r1, #31
 800b5fe:	4650      	mov	r0, sl
 800b600:	f7fe fb48 	bl	8009c94 <SendMessageToModule>
 800b604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b606:	5d72      	ldrb	r2, [r6, r5]
 800b608:	9304      	str	r3, [sp, #16]
 800b60a:	f7fe fefb 	bl	800a404 <PxMessagingTask+0x1c0>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800b60e:	2001      	movs	r0, #1
 800b610:	f009 fac2 	bl	8014b98 <malloc>
												if(temp32 != 0){
 800b614:	2800      	cmp	r0, #0
 800b616:	d06f      	beq.n	800b6f8 <PxMessagingTask+0x14b4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b618:	4a54      	ldr	r2, [pc, #336]	; (800b76c <PxMessagingTask+0x1528>)
 800b61a:	0403      	lsls	r3, r0, #16
 800b61c:	4443      	add	r3, r8
 800b61e:	51d3      	str	r3, [r2, r7]
 800b620:	e6c3      	b.n	800b3aa <PxMessagingTask+0x1166>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800b622:	2001      	movs	r0, #1
 800b624:	f009 fab8 	bl	8014b98 <malloc>
												if(temp32 != 0){
 800b628:	2800      	cmp	r0, #0
 800b62a:	d065      	beq.n	800b6f8 <PxMessagingTask+0x14b4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b62c:	4a4f      	ldr	r2, [pc, #316]	; (800b76c <PxMessagingTask+0x1528>)
 800b62e:	0403      	lsls	r3, r0, #16
 800b630:	3302      	adds	r3, #2
 800b632:	51d3      	str	r3, [r2, r7]
 800b634:	e72f      	b.n	800b496 <PxMessagingTask+0x1252>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800b636:	7b73      	ldrb	r3, [r6, #13]
 800b638:	7bb1      	ldrb	r1, [r6, #14]
 800b63a:	021b      	lsls	r3, r3, #8
 800b63c:	18c9      	adds	r1, r1, r3
 800b63e:	b289      	uxth	r1, r1
 800b640:	20eb      	movs	r0, #235	; 0xeb
 800b642:	f7fc fcd1 	bl	8007fe8 <EE_WriteVariable>
 800b646:	e693      	b.n	800b370 <PxMessagingTask+0x112c>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800b648:	2002      	movs	r0, #2
 800b64a:	f009 faa5 	bl	8014b98 <malloc>
												if(temp32 != 0){
 800b64e:	2800      	cmp	r0, #0
 800b650:	d052      	beq.n	800b6f8 <PxMessagingTask+0x14b4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b652:	4a46      	ldr	r2, [pc, #280]	; (800b76c <PxMessagingTask+0x1528>)
 800b654:	0403      	lsls	r3, r0, #16
 800b656:	3304      	adds	r3, #4
 800b658:	51d3      	str	r3, [r2, r7]
 800b65a:	e6d2      	b.n	800b402 <PxMessagingTask+0x11be>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b65c:	2004      	movs	r0, #4
 800b65e:	f009 fa9b 	bl	8014b98 <malloc>
												if(temp32 != 0){
 800b662:	2800      	cmp	r0, #0
 800b664:	d048      	beq.n	800b6f8 <PxMessagingTask+0x14b4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b666:	4a41      	ldr	r2, [pc, #260]	; (800b76c <PxMessagingTask+0x1528>)
 800b668:	0403      	lsls	r3, r0, #16
 800b66a:	3305      	adds	r3, #5
 800b66c:	51d3      	str	r3, [r2, r7]
 800b66e:	e495      	b.n	800af9c <PxMessagingTask+0xd58>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800b670:	2004      	movs	r0, #4
 800b672:	f009 fa91 	bl	8014b98 <malloc>
												if(temp32 != 0){
 800b676:	2800      	cmp	r0, #0
 800b678:	d03e      	beq.n	800b6f8 <PxMessagingTask+0x14b4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b67a:	4a3c      	ldr	r2, [pc, #240]	; (800b76c <PxMessagingTask+0x1528>)
 800b67c:	0403      	lsls	r3, r0, #16
 800b67e:	3307      	adds	r3, #7
 800b680:	51d3      	str	r3, [r2, r7]
 800b682:	e6f2      	b.n	800b46a <PxMessagingTask+0x1226>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b684:	2004      	movs	r0, #4
 800b686:	f009 fa87 	bl	8014b98 <malloc>
												if(temp32 != 0){
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d034      	beq.n	800b6f8 <PxMessagingTask+0x14b4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b68e:	4a37      	ldr	r2, [pc, #220]	; (800b76c <PxMessagingTask+0x1528>)
 800b690:	0403      	lsls	r3, r0, #16
 800b692:	3306      	adds	r3, #6
 800b694:	51d3      	str	r3, [r2, r7]
 800b696:	e713      	b.n	800b4c0 <PxMessagingTask+0x127c>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b698:	9b04      	ldr	r3, [sp, #16]
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b69a:	a914      	add	r1, sp, #80	; 0x50
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b69c:	9315      	str	r3, [sp, #84]	; 0x54
										erase.PageAddress =temp32;
 800b69e:	4643      	mov	r3, r8
 800b6a0:	9316      	str	r3, [sp, #88]	; 0x58
										erase.NbPages =1;
 800b6a2:	2301      	movs	r3, #1
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b6a4:	a815      	add	r0, sp, #84	; 0x54
										erase.NbPages =1;
 800b6a6:	9317      	str	r3, [sp, #92]	; 0x5c
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b6a8:	f006 ffa6 	bl	80125f8 <HAL_FLASHEx_Erase>
 800b6ac:	900d      	str	r0, [sp, #52]	; 0x34
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d103      	bne.n	800b6ba <PxMessagingTask+0x1476>
 800b6b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	d100      	bne.n	800b6ba <PxMessagingTask+0x1476>
 800b6b8:	e4ed      	b.n	800b096 <PxMessagingTask+0xe52>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b6ba:	2316      	movs	r3, #22
 800b6bc:	4a29      	ldr	r2, [pc, #164]	; (800b764 <PxMessagingTask+0x1520>)
 800b6be:	7013      	strb	r3, [r2, #0]
 800b6c0:	e4e9      	b.n	800b096 <PxMessagingTask+0xe52>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800b6c2:	2002      	movs	r0, #2
 800b6c4:	f009 fa68 	bl	8014b98 <malloc>
												if(temp32 != 0){
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d015      	beq.n	800b6f8 <PxMessagingTask+0x14b4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b6cc:	4a27      	ldr	r2, [pc, #156]	; (800b76c <PxMessagingTask+0x1528>)
 800b6ce:	0403      	lsls	r3, r0, #16
 800b6d0:	3303      	adds	r3, #3
 800b6d2:	51d3      	str	r3, [r2, r7]
 800b6d4:	e6e8      	b.n	800b4a8 <PxMessagingTask+0x1264>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b6d6:	781a      	ldrb	r2, [r3, #0]
 800b6d8:	4925      	ldr	r1, [pc, #148]	; (800b770 <PxMessagingTask+0x152c>)
 800b6da:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b6dc:	785a      	ldrb	r2, [r3, #1]
 800b6de:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b6e0:	789a      	ldrb	r2, [r3, #2]
 800b6e2:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b6e4:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 800b6e6:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b6e8:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 800b6ea:	211f      	movs	r1, #31
 800b6ec:	f7ff faa8 	bl	800ac40 <PxMessagingTask+0x9fc>
 800b6f0:	5d72      	ldrb	r2, [r6, r5]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b6f2:	9704      	str	r7, [sp, #16]
 800b6f4:	f7fe fe86 	bl	800a404 <PxMessagingTask+0x1c0>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b6f8:	2312      	movs	r3, #18
 800b6fa:	4a1a      	ldr	r2, [pc, #104]	; (800b764 <PxMessagingTask+0x1520>)
 800b6fc:	7013      	strb	r3, [r2, #0]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800b6fe:	e45a      	b.n	800afb6 <PxMessagingTask+0xd72>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b702:	491c      	ldr	r1, [pc, #112]	; (800b774 <PxMessagingTask+0x1530>)
 800b704:	469c      	mov	ip, r3
 800b706:	4464      	add	r4, ip
 800b708:	79e2      	ldrb	r2, [r4, #7]
 800b70a:	7a23      	ldrb	r3, [r4, #8]
 800b70c:	0212      	lsls	r2, r2, #8
 800b70e:	041b      	lsls	r3, r3, #16
 800b710:	18d2      	adds	r2, r2, r3
 800b712:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800b714:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b716:	18d2      	adds	r2, r2, r3
 800b718:	7a63      	ldrb	r3, [r4, #9]
 800b71a:	061b      	lsls	r3, r3, #24
 800b71c:	18d2      	adds	r2, r2, r3
 800b71e:	2300      	movs	r3, #0
 800b720:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b722:	4641      	mov	r1, r8
 800b724:	f006 ff04 	bl	8012530 <HAL_FLASH_Program>
 800b728:	900d      	str	r0, [sp, #52]	; 0x34
													break;
 800b72a:	e51d      	b.n	800b168 <PxMessagingTask+0xf24>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b72c:	4643      	mov	r3, r8
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	3301      	adds	r3, #1
 800b732:	d000      	beq.n	800b736 <PxMessagingTask+0x14f2>
 800b734:	e753      	b.n	800b5de <PxMessagingTask+0x139a>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b738:	490e      	ldr	r1, [pc, #56]	; (800b774 <PxMessagingTask+0x1530>)
 800b73a:	469c      	mov	ip, r3
 800b73c:	4464      	add	r4, ip
 800b73e:	79e2      	ldrb	r2, [r4, #7]
 800b740:	7a23      	ldrb	r3, [r4, #8]
 800b742:	0212      	lsls	r2, r2, #8
 800b744:	041b      	lsls	r3, r3, #16
 800b746:	18d2      	adds	r2, r2, r3
 800b748:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800b74a:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b74c:	18d2      	adds	r2, r2, r3
 800b74e:	7a63      	ldrb	r3, [r4, #9]
 800b750:	061b      	lsls	r3, r3, #24
 800b752:	18d2      	adds	r2, r2, r3
 800b754:	2300      	movs	r3, #0
 800b756:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b758:	4641      	mov	r1, r8
 800b75a:	f006 fee9 	bl	8012530 <HAL_FLASH_Program>
 800b75e:	900d      	str	r0, [sp, #52]	; 0x34
													break;
 800b760:	e502      	b.n	800b168 <PxMessagingTask+0xf24>
 800b762:	46c0      	nop			; (mov r8, r8)
 800b764:	200011a8 	.word	0x200011a8
 800b768:	0000ffff 	.word	0x0000ffff
 800b76c:	20006a38 	.word	0x20006a38
 800b770:	20000fd0 	.word	0x20000fd0
 800b774:	200011a0 	.word	0x200011a0

0800b778 <StopStreamCommand>:
	return pdFALSE;
}

static portBASE_TYPE StopStreamCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	// Make sure we return something
	pcWriteBuffer[0] ='\0';
 800b778:	2300      	movs	r3, #0
static portBASE_TYPE StopStreamCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800b77a:	b510      	push	{r4, lr}
	snprintf((char* )pcWriteBuffer,xWriteBufferLen,"Stopping Streaming MEMS...\r\n");
 800b77c:	4a04      	ldr	r2, [pc, #16]	; (800b790 <StopStreamCommand+0x18>)
	pcWriteBuffer[0] ='\0';
 800b77e:	7003      	strb	r3, [r0, #0]
	snprintf((char* )pcWriteBuffer,xWriteBufferLen,"Stopping Streaming MEMS...\r\n");
 800b780:	f009 fe3e 	bl	8015400 <snprintf>
	stopStream = true;
 800b784:	2201      	movs	r2, #1
 800b786:	4b03      	ldr	r3, [pc, #12]	; (800b794 <StopStreamCommand+0x1c>)
	
	stopStreamMems();
	return pdFALSE;
}
 800b788:	2000      	movs	r0, #0
	stopStream = true;
 800b78a:	701a      	strb	r2, [r3, #0]
}
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	46c0      	nop			; (mov r8, r8)
 800b790:	0801deb8 	.word	0x0801deb8
 800b794:	2000185c 	.word	0x2000185c

0800b798 <LSM303SampleMagRaw>:
static Module_Status LSM303SampleMagRaw(int16_t *magX,int16_t *magY,int16_t *magZ){
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	0006      	movs	r6, r0
 800b79e:	000d      	movs	r5, r1
 800b7a0:	0014      	movs	r4, r2
	memset(data,0,sizeof(data));
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	2206      	movs	r2, #6
 800b7a6:	4668      	mov	r0, sp
 800b7a8:	f009 fc35 	bl	8015016 <memset>
	if(LSM303AGR_MAG_Get_Raw_Magnetic(&hi2c2,data) != MEMS_SUCCESS)
 800b7ac:	4669      	mov	r1, sp
 800b7ae:	4809      	ldr	r0, [pc, #36]	; (800b7d4 <LSM303SampleMagRaw+0x3c>)
 800b7b0:	f003 f8de 	bl	800e970 <LSM303AGR_MAG_Get_Raw_Magnetic>
 800b7b4:	2801      	cmp	r0, #1
 800b7b6:	d10b      	bne.n	800b7d0 <LSM303SampleMagRaw+0x38>
	*magX =pData[0];
 800b7b8:	466b      	mov	r3, sp
 800b7ba:	881b      	ldrh	r3, [r3, #0]
	return H0BR4_OK;
 800b7bc:	2000      	movs	r0, #0
	*magX =pData[0];
 800b7be:	8033      	strh	r3, [r6, #0]
	*magY =pData[1];
 800b7c0:	466b      	mov	r3, sp
 800b7c2:	885b      	ldrh	r3, [r3, #2]
 800b7c4:	802b      	strh	r3, [r5, #0]
	*magZ =pData[2];
 800b7c6:	466b      	mov	r3, sp
 800b7c8:	889b      	ldrh	r3, [r3, #4]
 800b7ca:	8023      	strh	r3, [r4, #0]
}
 800b7cc:	b002      	add	sp, #8
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}
		return H0BR4_ERR_LSM303;
 800b7d0:	2006      	movs	r0, #6
 800b7d2:	e7fb      	b.n	800b7cc <LSM303SampleMagRaw+0x34>
 800b7d4:	20006e94 	.word	0x20006e94

0800b7d8 <LSM303SampleMagMGauss>:
static Module_Status LSM303SampleMagMGauss(int *magX,int *magY,int *magZ){
 800b7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7da:	b083      	sub	sp, #12
	if((status =LSM303SampleMagRaw(&rawMagX,&rawMagY,&rawMagZ)) != H0BR4_OK)
 800b7dc:	466b      	mov	r3, sp
static Module_Status LSM303SampleMagMGauss(int *magX,int *magY,int *magZ){
 800b7de:	0007      	movs	r7, r0
 800b7e0:	000e      	movs	r6, r1
 800b7e2:	0015      	movs	r5, r2
	if((status =LSM303SampleMagRaw(&rawMagX,&rawMagY,&rawMagZ)) != H0BR4_OK)
 800b7e4:	a901      	add	r1, sp, #4
 800b7e6:	1d9a      	adds	r2, r3, #6
 800b7e8:	1c98      	adds	r0, r3, #2
 800b7ea:	f7ff ffd5 	bl	800b798 <LSM303SampleMagRaw>
 800b7ee:	1e04      	subs	r4, r0, #0
 800b7f0:	d123      	bne.n	800b83a <LSM303SampleMagMGauss+0x62>
	*magX =rawMagX * (float )LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b7f2:	466b      	mov	r3, sp
 800b7f4:	2002      	movs	r0, #2
 800b7f6:	5e18      	ldrsh	r0, [r3, r0]
 800b7f8:	f7f5 fede 	bl	80015b8 <__aeabi_i2f>
 800b7fc:	21ff      	movs	r1, #255	; 0xff
 800b7fe:	0589      	lsls	r1, r1, #22
 800b800:	f7f5 fbd8 	bl	8000fb4 <__aeabi_fmul>
 800b804:	f7f5 feb8 	bl	8001578 <__aeabi_f2iz>
	*magY =rawMagY * (float )LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b808:	466b      	mov	r3, sp
	*magX =rawMagX * (float )LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b80a:	6038      	str	r0, [r7, #0]
	*magY =rawMagY * (float )LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b80c:	2004      	movs	r0, #4
 800b80e:	5e18      	ldrsh	r0, [r3, r0]
 800b810:	f7f5 fed2 	bl	80015b8 <__aeabi_i2f>
 800b814:	21ff      	movs	r1, #255	; 0xff
 800b816:	0589      	lsls	r1, r1, #22
 800b818:	f7f5 fbcc 	bl	8000fb4 <__aeabi_fmul>
 800b81c:	f7f5 feac 	bl	8001578 <__aeabi_f2iz>
	*magZ =rawMagZ * (float )LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b820:	466b      	mov	r3, sp
	*magY =rawMagY * (float )LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b822:	6030      	str	r0, [r6, #0]
	*magZ =rawMagZ * (float )LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b824:	2006      	movs	r0, #6
 800b826:	5e18      	ldrsh	r0, [r3, r0]
 800b828:	f7f5 fec6 	bl	80015b8 <__aeabi_i2f>
 800b82c:	21ff      	movs	r1, #255	; 0xff
 800b82e:	0589      	lsls	r1, r1, #22
 800b830:	f7f5 fbc0 	bl	8000fb4 <__aeabi_fmul>
 800b834:	f7f5 fea0 	bl	8001578 <__aeabi_f2iz>
 800b838:	6028      	str	r0, [r5, #0]
}
 800b83a:	0020      	movs	r0, r4
 800b83c:	b003      	add	sp, #12
 800b83e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b840 <SampleMagMGaussToString>:
	int x =0, y =0, z =0;
 800b840:	2300      	movs	r3, #0
Module_Status SampleMagMGaussToString(char *cstring,size_t maxLen){
 800b842:	b570      	push	{r4, r5, r6, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	0005      	movs	r5, r0
 800b848:	000e      	movs	r6, r1
	if((status =LSM303SampleMagMGauss(&x,&y,&z)) != H0BR4_OK)
 800b84a:	aa05      	add	r2, sp, #20
 800b84c:	a904      	add	r1, sp, #16
 800b84e:	a803      	add	r0, sp, #12
	int x =0, y =0, z =0;
 800b850:	9303      	str	r3, [sp, #12]
 800b852:	9304      	str	r3, [sp, #16]
 800b854:	9305      	str	r3, [sp, #20]
	if((status =LSM303SampleMagMGauss(&x,&y,&z)) != H0BR4_OK)
 800b856:	f7ff ffbf 	bl	800b7d8 <LSM303SampleMagMGauss>
 800b85a:	1e04      	subs	r4, r0, #0
 800b85c:	d109      	bne.n	800b872 <SampleMagMGaussToString+0x32>
	snprintf(cstring,maxLen,"Mag(mGauss) | X: %d, Y: %d, Z: %d\r\n",x,y,z);
 800b85e:	9b05      	ldr	r3, [sp, #20]
 800b860:	0031      	movs	r1, r6
 800b862:	9301      	str	r3, [sp, #4]
 800b864:	9b04      	ldr	r3, [sp, #16]
 800b866:	0028      	movs	r0, r5
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	4a03      	ldr	r2, [pc, #12]	; (800b878 <SampleMagMGaussToString+0x38>)
 800b86c:	9b03      	ldr	r3, [sp, #12]
 800b86e:	f009 fdc7 	bl	8015400 <snprintf>
}
 800b872:	0020      	movs	r0, r4
 800b874:	b006      	add	sp, #24
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	0801ded8 	.word	0x0801ded8

0800b87c <SampleMagMGaussToBuf>:
Module_Status SampleMagMGaussToBuf(float *buffer){
 800b87c:	b530      	push	{r4, r5, lr}
 800b87e:	b085      	sub	sp, #20
 800b880:	0004      	movs	r4, r0
	Module_Status status =LSM303SampleMagMGauss(iMagMGauss,iMagMGauss + 1,iMagMGauss + 2);
 800b882:	aa03      	add	r2, sp, #12
 800b884:	a902      	add	r1, sp, #8
 800b886:	a801      	add	r0, sp, #4
 800b888:	f7ff ffa6 	bl	800b7d8 <LSM303SampleMagMGauss>
 800b88c:	0005      	movs	r5, r0
	buffer[0] =iMagMGauss[0];
 800b88e:	9801      	ldr	r0, [sp, #4]
 800b890:	f7f5 fe92 	bl	80015b8 <__aeabi_i2f>
 800b894:	6020      	str	r0, [r4, #0]
	buffer[1] =iMagMGauss[1];
 800b896:	9802      	ldr	r0, [sp, #8]
 800b898:	f7f5 fe8e 	bl	80015b8 <__aeabi_i2f>
 800b89c:	6060      	str	r0, [r4, #4]
	buffer[2] =iMagMGauss[2];
 800b89e:	9803      	ldr	r0, [sp, #12]
 800b8a0:	f7f5 fe8a 	bl	80015b8 <__aeabi_i2f>
 800b8a4:	60a0      	str	r0, [r4, #8]
}
 800b8a6:	0028      	movs	r0, r5
 800b8a8:	b005      	add	sp, #20
 800b8aa:	bd30      	pop	{r4, r5, pc}

0800b8ac <SampleMagMGaussToPort>:
Module_Status SampleMagMGaussToPort(uint8_t port,uint8_t module){
 800b8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ae:	b085      	sub	sp, #20
	if((status =SampleMagMGaussToBuf(buffer)) != H0BR4_OK)
 800b8b0:	ac01      	add	r4, sp, #4
Module_Status SampleMagMGaussToPort(uint8_t port,uint8_t module){
 800b8b2:	0007      	movs	r7, r0
	if((status =SampleMagMGaussToBuf(buffer)) != H0BR4_OK)
 800b8b4:	0020      	movs	r0, r4
Module_Status SampleMagMGaussToPort(uint8_t port,uint8_t module){
 800b8b6:	000e      	movs	r6, r1
	if((status =SampleMagMGaussToBuf(buffer)) != H0BR4_OK)
 800b8b8:	f7ff ffe0 	bl	800b87c <SampleMagMGaussToBuf>
 800b8bc:	1e05      	subs	r5, r0, #0
 800b8be:	d122      	bne.n	800b906 <SampleMagMGaussToPort+0x5a>
	if(module == myID){
 800b8c0:	4b22      	ldr	r3, [pc, #136]	; (800b94c <SampleMagMGaussToPort+0xa0>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	42b3      	cmp	r3, r6
 800b8c6:	d021      	beq.n	800b90c <SampleMagMGaussToPort+0x60>
		messageParams[0] =port;
 800b8c8:	4b21      	ldr	r3, [pc, #132]	; (800b950 <SampleMagMGaussToPort+0xa4>)
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800b8ca:	78e2      	ldrb	r2, [r4, #3]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800b8cc:	2123      	movs	r1, #35	; 0x23
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800b8ce:	705a      	strb	r2, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800b8d0:	78a2      	ldrb	r2, [r4, #2]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800b8d2:	0030      	movs	r0, r6
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800b8d4:	709a      	strb	r2, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800b8d6:	7862      	ldrb	r2, [r4, #1]
		messageParams[0] =port;
 800b8d8:	701f      	strb	r7, [r3, #0]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800b8da:	70da      	strb	r2, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800b8dc:	7822      	ldrb	r2, [r4, #0]
 800b8de:	711a      	strb	r2, [r3, #4]
		messageParams[5] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800b8e0:	79e2      	ldrb	r2, [r4, #7]
 800b8e2:	715a      	strb	r2, [r3, #5]
		messageParams[6] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800b8e4:	79a2      	ldrb	r2, [r4, #6]
 800b8e6:	719a      	strb	r2, [r3, #6]
		messageParams[7] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800b8e8:	7962      	ldrb	r2, [r4, #5]
 800b8ea:	71da      	strb	r2, [r3, #7]
		messageParams[8] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800b8ec:	7922      	ldrb	r2, [r4, #4]
 800b8ee:	721a      	strb	r2, [r3, #8]
		messageParams[9] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800b8f0:	7ae2      	ldrb	r2, [r4, #11]
 800b8f2:	725a      	strb	r2, [r3, #9]
		messageParams[10] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800b8f4:	7aa2      	ldrb	r2, [r4, #10]
 800b8f6:	729a      	strb	r2, [r3, #10]
		messageParams[11] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800b8f8:	7a62      	ldrb	r2, [r4, #9]
 800b8fa:	72da      	strb	r2, [r3, #11]
		messageParams[12] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800b8fc:	7a22      	ldrb	r2, [r4, #8]
 800b8fe:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800b900:	220d      	movs	r2, #13
 800b902:	f7fe f9c7 	bl	8009c94 <SendMessageToModule>
}
 800b906:	0028      	movs	r0, r5
 800b908:	b005      	add	sp, #20
 800b90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800b90c:	78e3      	ldrb	r3, [r4, #3]
 800b90e:	4911      	ldr	r1, [pc, #68]	; (800b954 <SampleMagMGaussToPort+0xa8>)
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800b910:	220c      	movs	r2, #12
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800b912:	700b      	strb	r3, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800b914:	78a3      	ldrb	r3, [r4, #2]
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800b916:	0038      	movs	r0, r7
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800b918:	704b      	strb	r3, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800b91a:	7863      	ldrb	r3, [r4, #1]
 800b91c:	708b      	strb	r3, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800b91e:	7823      	ldrb	r3, [r4, #0]
 800b920:	70cb      	strb	r3, [r1, #3]
		temp[4] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800b922:	79e3      	ldrb	r3, [r4, #7]
 800b924:	710b      	strb	r3, [r1, #4]
		temp[5] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800b926:	79a3      	ldrb	r3, [r4, #6]
 800b928:	714b      	strb	r3, [r1, #5]
		temp[6] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800b92a:	7963      	ldrb	r3, [r4, #5]
 800b92c:	718b      	strb	r3, [r1, #6]
		temp[7] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800b92e:	7923      	ldrb	r3, [r4, #4]
 800b930:	71cb      	strb	r3, [r1, #7]
		temp[8] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800b932:	7ae3      	ldrb	r3, [r4, #11]
 800b934:	720b      	strb	r3, [r1, #8]
		temp[9] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800b936:	7aa3      	ldrb	r3, [r4, #10]
 800b938:	724b      	strb	r3, [r1, #9]
		temp[10] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800b93a:	7a63      	ldrb	r3, [r4, #9]
 800b93c:	728b      	strb	r3, [r1, #10]
		temp[11] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800b93e:	7a23      	ldrb	r3, [r4, #8]
 800b940:	72cb      	strb	r3, [r1, #11]
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800b942:	230a      	movs	r3, #10
 800b944:	f002 feb6 	bl	800e6b4 <writePxITMutex>
 800b948:	e7dd      	b.n	800b906 <SampleMagMGaussToPort+0x5a>
 800b94a:	46c0      	nop			; (mov r8, r8)
 800b94c:	2000110e 	.word	0x2000110e
 800b950:	20000fd0 	.word	0x20000fd0
 800b954:	20001878 	.word	0x20001878

0800b958 <LSM6DS3SampleTempCelsius>:
static Module_Status LSM6DS3SampleTempCelsius(float *temp){
 800b958:	b510      	push	{r4, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	0004      	movs	r4, r0
	if(LSM6DS3_ACC_GYRO_ReadReg(&hi2c2,LSM6DS3_ACC_GYRO_OUT_TEMP_L,buff,2) != MEMS_SUCCESS)
 800b95e:	2302      	movs	r3, #2
 800b960:	2120      	movs	r1, #32
 800b962:	480e      	ldr	r0, [pc, #56]	; (800b99c <LSM6DS3SampleTempCelsius+0x44>)
 800b964:	aa01      	add	r2, sp, #4
 800b966:	f003 f84d 	bl	800ea04 <LSM6DS3_ACC_GYRO_ReadReg>
 800b96a:	2801      	cmp	r0, #1
 800b96c:	d113      	bne.n	800b996 <LSM6DS3SampleTempCelsius+0x3e>
	int16_t rawTemp =concatBytes(buff[0],buff[1]);
 800b96e:	466b      	mov	r3, sp
 800b970:	466a      	mov	r2, sp
 800b972:	795b      	ldrb	r3, [r3, #5]
 800b974:	7910      	ldrb	r0, [r2, #4]
 800b976:	021b      	lsls	r3, r3, #8
 800b978:	4318      	orrs	r0, r3
	*temp =(((float )rawTemp) / 16) + 25;
 800b97a:	b200      	sxth	r0, r0
 800b97c:	f7f5 fe1c 	bl	80015b8 <__aeabi_i2f>
 800b980:	21f6      	movs	r1, #246	; 0xf6
 800b982:	0589      	lsls	r1, r1, #22
 800b984:	f7f5 fb16 	bl	8000fb4 <__aeabi_fmul>
 800b988:	4905      	ldr	r1, [pc, #20]	; (800b9a0 <LSM6DS3SampleTempCelsius+0x48>)
 800b98a:	f7f4 ffad 	bl	80008e8 <__aeabi_fadd>
 800b98e:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800b990:	2000      	movs	r0, #0
}
 800b992:	b002      	add	sp, #8
 800b994:	bd10      	pop	{r4, pc}
		return H0BR4_ERR_LSM6DS3;
 800b996:	2005      	movs	r0, #5
 800b998:	e7fb      	b.n	800b992 <LSM6DS3SampleTempCelsius+0x3a>
 800b99a:	46c0      	nop			; (mov r8, r8)
 800b99c:	20006e94 	.word	0x20006e94
 800b9a0:	41c80000 	.word	0x41c80000

0800b9a4 <SampleTempCToString>:
Module_Status SampleTempCToString(char *cstring,size_t maxLen){
 800b9a4:	b570      	push	{r4, r5, r6, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	0005      	movs	r5, r0
	if((status =LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800b9aa:	a803      	add	r0, sp, #12
Module_Status SampleTempCToString(char *cstring,size_t maxLen){
 800b9ac:	000e      	movs	r6, r1
	if((status =LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800b9ae:	f7ff ffd3 	bl	800b958 <LSM6DS3SampleTempCelsius>
 800b9b2:	1e04      	subs	r4, r0, #0
 800b9b4:	d109      	bne.n	800b9ca <SampleTempCToString+0x26>
	snprintf(cstring,maxLen,"Temp(Celsius) | %0.2f\r\n",temp);
 800b9b6:	9803      	ldr	r0, [sp, #12]
 800b9b8:	f7f7 fc98 	bl	80032ec <__aeabi_f2d>
 800b9bc:	4a04      	ldr	r2, [pc, #16]	; (800b9d0 <SampleTempCToString+0x2c>)
 800b9be:	9000      	str	r0, [sp, #0]
 800b9c0:	9101      	str	r1, [sp, #4]
 800b9c2:	0031      	movs	r1, r6
 800b9c4:	0028      	movs	r0, r5
 800b9c6:	f009 fd1b 	bl	8015400 <snprintf>
}
 800b9ca:	0020      	movs	r0, r4
 800b9cc:	b004      	add	sp, #16
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	0801defc 	.word	0x0801defc

0800b9d4 <SampleTempCToPort>:
Module_Status SampleTempCToPort(uint8_t port,uint8_t module){
 800b9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9d6:	b085      	sub	sp, #20
	if((status =LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800b9d8:	ad03      	add	r5, sp, #12
Module_Status SampleTempCToPort(uint8_t port,uint8_t module){
 800b9da:	0007      	movs	r7, r0
	if((status =LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800b9dc:	0028      	movs	r0, r5
Module_Status SampleTempCToPort(uint8_t port,uint8_t module){
 800b9de:	000e      	movs	r6, r1
	if((status =LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800b9e0:	f7ff ffba 	bl	800b958 <LSM6DS3SampleTempCelsius>
 800b9e4:	1e04      	subs	r4, r0, #0
 800b9e6:	d112      	bne.n	800ba0e <SampleTempCToPort+0x3a>
	if(module == myID){
 800b9e8:	4b12      	ldr	r3, [pc, #72]	; (800ba34 <SampleTempCToPort+0x60>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	42b3      	cmp	r3, r6
 800b9ee:	d011      	beq.n	800ba14 <SampleTempCToPort+0x40>
		messageParams[0] =port;
 800b9f0:	4b11      	ldr	r3, [pc, #68]	; (800ba38 <SampleTempCToPort+0x64>)
		messageParams[1] =*((__IO uint8_t* )(&temp) + 3);
 800b9f2:	78ea      	ldrb	r2, [r5, #3]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float) + 1);
 800b9f4:	2123      	movs	r1, #35	; 0x23
		messageParams[1] =*((__IO uint8_t* )(&temp) + 3);
 800b9f6:	705a      	strb	r2, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&temp) + 2);
 800b9f8:	78aa      	ldrb	r2, [r5, #2]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float) + 1);
 800b9fa:	0030      	movs	r0, r6
		messageParams[2] =*((__IO uint8_t* )(&temp) + 2);
 800b9fc:	709a      	strb	r2, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&temp) + 1);
 800b9fe:	786a      	ldrb	r2, [r5, #1]
		messageParams[0] =port;
 800ba00:	701f      	strb	r7, [r3, #0]
		messageParams[3] =*((__IO uint8_t* )(&temp) + 1);
 800ba02:	70da      	strb	r2, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&temp) + 0);
 800ba04:	782a      	ldrb	r2, [r5, #0]
 800ba06:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float) + 1);
 800ba08:	2205      	movs	r2, #5
 800ba0a:	f7fe f943 	bl	8009c94 <SendMessageToModule>
}
 800ba0e:	0020      	movs	r0, r4
 800ba10:	b005      	add	sp, #20
 800ba12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tempD[0] =*((__IO uint8_t* )(&temp) + 3);
 800ba14:	78eb      	ldrb	r3, [r5, #3]
 800ba16:	4909      	ldr	r1, [pc, #36]	; (800ba3c <SampleTempCToPort+0x68>)
		writePxMutex(port,(char* )&tempD[0],4 * sizeof(uint8_t),10,10);
 800ba18:	2204      	movs	r2, #4
		tempD[0] =*((__IO uint8_t* )(&temp) + 3);
 800ba1a:	700b      	strb	r3, [r1, #0]
		tempD[1] =*((__IO uint8_t* )(&temp) + 2);
 800ba1c:	78ab      	ldrb	r3, [r5, #2]
		writePxMutex(port,(char* )&tempD[0],4 * sizeof(uint8_t),10,10);
 800ba1e:	0038      	movs	r0, r7
		tempD[1] =*((__IO uint8_t* )(&temp) + 2);
 800ba20:	704b      	strb	r3, [r1, #1]
		tempD[2] =*((__IO uint8_t* )(&temp) + 1);
 800ba22:	786b      	ldrb	r3, [r5, #1]
 800ba24:	708b      	strb	r3, [r1, #2]
		tempD[3] =*((__IO uint8_t* )(&temp) + 0);
 800ba26:	782b      	ldrb	r3, [r5, #0]
 800ba28:	70cb      	strb	r3, [r1, #3]
		writePxMutex(port,(char* )&tempD[0],4 * sizeof(uint8_t),10,10);
 800ba2a:	230a      	movs	r3, #10
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	f002 fe0b 	bl	800e648 <writePxMutex>
 800ba32:	e7ec      	b.n	800ba0e <SampleTempCToPort+0x3a>
 800ba34:	2000110e 	.word	0x2000110e
 800ba38:	20000fd0 	.word	0x20000fd0
 800ba3c:	20001884 	.word	0x20001884

0800ba40 <StreamMemsToCLI>:
static Module_Status StreamMemsToCLI(uint32_t period,uint32_t timeout,SampleMemsToString function){
 800ba40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba42:	4657      	mov	r7, sl
 800ba44:	46de      	mov	lr, fp
 800ba46:	464e      	mov	r6, r9
 800ba48:	4645      	mov	r5, r8
 800ba4a:	b5e0      	push	{r5, r6, r7, lr}
 800ba4c:	0004      	movs	r4, r0
 800ba4e:	4692      	mov	sl, r2
 800ba50:	b085      	sub	sp, #20
	if(period < MIN_MEMS_PERIOD_MS)
 800ba52:	28c7      	cmp	r0, #199	; 0xc7
 800ba54:	d800      	bhi.n	800ba58 <StreamMemsToCLI+0x18>
 800ba56:	e079      	b.n	800bb4c <StreamMemsToCLI+0x10c>
	if(period > timeout)
 800ba58:	9003      	str	r0, [sp, #12]
 800ba5a:	4288      	cmp	r0, r1
 800ba5c:	d200      	bcs.n	800ba60 <StreamMemsToCLI+0x20>
 800ba5e:	e073      	b.n	800bb48 <StreamMemsToCLI+0x108>
	long numTimes =timeout / period;
 800ba60:	0021      	movs	r1, r4
 800ba62:	9803      	ldr	r0, [sp, #12]
 800ba64:	f7f4 fb74 	bl	8000150 <__udivsi3>
	stopStream = false;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	4a39      	ldr	r2, [pc, #228]	; (800bb50 <StreamMemsToCLI+0x110>)
	long numDeltaDelay =period / DELTA_SLEEP_MS;
 800ba6c:	2164      	movs	r1, #100	; 0x64
	stopStream = false;
 800ba6e:	7013      	strb	r3, [r2, #0]
	long numTimes =timeout / period;
 800ba70:	0007      	movs	r7, r0
	long numDeltaDelay =period / DELTA_SLEEP_MS;
 800ba72:	0020      	movs	r0, r4
 800ba74:	f7f4 fb6c 	bl	8000150 <__udivsi3>
	unsigned lastDelayMS =period % DELTA_SLEEP_MS;
 800ba78:	2164      	movs	r1, #100	; 0x64
	while(numDeltaDelay-- > 0){
 800ba7a:	1e43      	subs	r3, r0, #1
	unsigned lastDelayMS =period % DELTA_SLEEP_MS;
 800ba7c:	0020      	movs	r0, r4
	while(numDeltaDelay-- > 0){
 800ba7e:	9302      	str	r3, [sp, #8]
	unsigned lastDelayMS =period % DELTA_SLEEP_MS;
 800ba80:	f7f4 fbec 	bl	800025c <__aeabi_uidivmod>
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800ba84:	0148      	lsls	r0, r1, #5
 800ba86:	1a40      	subs	r0, r0, r1
 800ba88:	0080      	lsls	r0, r0, #2
 800ba8a:	1840      	adds	r0, r0, r1
 800ba8c:	21fa      	movs	r1, #250	; 0xfa
 800ba8e:	00c0      	lsls	r0, r0, #3
 800ba90:	0089      	lsls	r1, r1, #2
 800ba92:	f7f4 fb5d 	bl	8000150 <__udivsi3>
		writePxMutex(PcPort,(char* )pcOutputString,strlen((char* )pcOutputString),cmd500ms,HAL_MAX_DELAY);
 800ba96:	4b2f      	ldr	r3, [pc, #188]	; (800bb54 <StreamMemsToCLI+0x114>)
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800ba98:	4683      	mov	fp, r0
	int8_t *pcOutputString = NULL;
 800ba9a:	2400      	movs	r4, #0
		writePxMutex(PcPort,(char* )pcOutputString,strlen((char* )pcOutputString),cmd500ms,HAL_MAX_DELAY);
 800ba9c:	4698      	mov	r8, r3
 800ba9e:	4e2e      	ldr	r6, [pc, #184]	; (800bb58 <StreamMemsToCLI+0x118>)
	while((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)){
 800baa0:	2f00      	cmp	r7, #0
 800baa2:	dd3c      	ble.n	800bb1e <StreamMemsToCLI+0xde>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800baa4:	f003 fbf6 	bl	800f294 <FreeRTOS_CLIGetOutputBuffer>
		if((status =function((char* )pcOutputString,100)) != H0BR4_OK)
 800baa8:	2164      	movs	r1, #100	; 0x64
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800baaa:	0004      	movs	r4, r0
		if((status =function((char* )pcOutputString,100)) != H0BR4_OK)
 800baac:	47d0      	blx	sl
 800baae:	1e05      	subs	r5, r0, #0
 800bab0:	d122      	bne.n	800baf8 <StreamMemsToCLI+0xb8>
		writePxMutex(PcPort,(char* )pcOutputString,strlen((char* )pcOutputString),cmd500ms,HAL_MAX_DELAY);
 800bab2:	0020      	movs	r0, r4
 800bab4:	f7f4 fb30 	bl	8000118 <strlen>
 800bab8:	4643      	mov	r3, r8
 800baba:	b282      	uxth	r2, r0
 800babc:	7818      	ldrb	r0, [r3, #0]
 800babe:	2301      	movs	r3, #1
 800bac0:	425b      	negs	r3, r3
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	33f6      	adds	r3, #246	; 0xf6
 800bac6:	33ff      	adds	r3, #255	; 0xff
 800bac8:	0021      	movs	r1, r4
 800baca:	f002 fdbd 	bl	800e648 <writePxMutex>
	while(numDeltaDelay-- > 0){
 800bace:	9b02      	ldr	r3, [sp, #8]
 800bad0:	4699      	mov	r9, r3
		vTaskDelay(pdMS_TO_TICKS(DELTA_SLEEP_MS));
 800bad2:	2064      	movs	r0, #100	; 0x64
 800bad4:	f004 fbf8 	bl	80102c8 <vTaskDelay>
			if(UARTRxBuf[PcPort - 1][chr] == '\r'){
 800bad8:	4643      	mov	r3, r8
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	2200      	movs	r2, #0
 800bade:	3b01      	subs	r3, #1
 800bae0:	019b      	lsls	r3, r3, #6
 800bae2:	18f1      	adds	r1, r6, r3
 800bae4:	e002      	b.n	800baec <StreamMemsToCLI+0xac>
		for(uint8_t chr =0; chr < MSG_RX_BUF_SIZE; chr++){
 800bae6:	3201      	adds	r2, #1
 800bae8:	2a40      	cmp	r2, #64	; 0x40
 800baea:	d01d      	beq.n	800bb28 <StreamMemsToCLI+0xe8>
			if(UARTRxBuf[PcPort - 1][chr] == '\r'){
 800baec:	5c88      	ldrb	r0, [r1, r2]
 800baee:	280d      	cmp	r0, #13
 800baf0:	d1f9      	bne.n	800bae6 <StreamMemsToCLI+0xa6>
				UARTRxBuf[PcPort - 1][chr] =0;
 800baf2:	18f6      	adds	r6, r6, r3
 800baf4:	2300      	movs	r3, #0
 800baf6:	54b3      	strb	r3, [r6, r2]
	memset((char* )pcOutputString,0,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800baf8:	2299      	movs	r2, #153	; 0x99
 800bafa:	2100      	movs	r1, #0
 800bafc:	0092      	lsls	r2, r2, #2
 800bafe:	0020      	movs	r0, r4
 800bb00:	f009 fa89 	bl	8015016 <memset>
	sprintf((char* )pcOutputString,"\r\n");
 800bb04:	2203      	movs	r2, #3
 800bb06:	0020      	movs	r0, r4
 800bb08:	4914      	ldr	r1, [pc, #80]	; (800bb5c <StreamMemsToCLI+0x11c>)
 800bb0a:	f009 fa7b 	bl	8015004 <memcpy>
}
 800bb0e:	0028      	movs	r0, r5
 800bb10:	b005      	add	sp, #20
 800bb12:	bcf0      	pop	{r4, r5, r6, r7}
 800bb14:	46bb      	mov	fp, r7
 800bb16:	46b2      	mov	sl, r6
 800bb18:	46a9      	mov	r9, r5
 800bb1a:	46a0      	mov	r8, r4
 800bb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)){
 800bb1e:	9b03      	ldr	r3, [sp, #12]
 800bb20:	3301      	adds	r3, #1
 800bb22:	d0bf      	beq.n	800baa4 <StreamMemsToCLI+0x64>
 800bb24:	2500      	movs	r5, #0
 800bb26:	e7e7      	b.n	800baf8 <StreamMemsToCLI+0xb8>
		if(stopStream)
 800bb28:	4b09      	ldr	r3, [pc, #36]	; (800bb50 <StreamMemsToCLI+0x110>)
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e3      	bne.n	800baf8 <StreamMemsToCLI+0xb8>
	while(numDeltaDelay-- > 0){
 800bb30:	464b      	mov	r3, r9
 800bb32:	464a      	mov	r2, r9
 800bb34:	3b01      	subs	r3, #1
 800bb36:	2a00      	cmp	r2, #0
 800bb38:	dd01      	ble.n	800bb3e <StreamMemsToCLI+0xfe>
 800bb3a:	4699      	mov	r9, r3
 800bb3c:	e7c9      	b.n	800bad2 <StreamMemsToCLI+0x92>
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800bb3e:	4658      	mov	r0, fp
 800bb40:	f004 fbc2 	bl	80102c8 <vTaskDelay>
	return H0BR4_OK;
 800bb44:	3f01      	subs	r7, #1
 800bb46:	e7ab      	b.n	800baa0 <StreamMemsToCLI+0x60>
 800bb48:	9103      	str	r1, [sp, #12]
 800bb4a:	e789      	b.n	800ba60 <StreamMemsToCLI+0x20>
		return H0BR4_ERR_WrongParams;
 800bb4c:	250b      	movs	r5, #11
 800bb4e:	e7de      	b.n	800bb0e <StreamMemsToCLI+0xce>
 800bb50:	2000185c 	.word	0x2000185c
 800bb54:	20000b0f 	.word	0x20000b0f
 800bb58:	20001368 	.word	0x20001368
 800bb5c:	0801d318 	.word	0x0801d318

0800bb60 <StreamMemsToPort.part.0>:
static Module_Status StreamMemsToPort(uint8_t port,uint8_t module,uint32_t period,uint32_t timeout,SampleMemsToPort function){
 800bb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb62:	464f      	mov	r7, r9
 800bb64:	46d6      	mov	lr, sl
 800bb66:	4646      	mov	r6, r8
 800bb68:	b5c0      	push	{r6, r7, lr}
 800bb6a:	0017      	movs	r7, r2
 800bb6c:	9a08      	ldr	r2, [sp, #32]
 800bb6e:	0005      	movs	r5, r0
 800bb70:	000e      	movs	r6, r1
 800bb72:	4691      	mov	r9, r2
 800bb74:	46ba      	mov	sl, r7
 800bb76:	429f      	cmp	r7, r3
 800bb78:	d200      	bcs.n	800bb7c <StreamMemsToPort.part.0+0x1c>
 800bb7a:	469a      	mov	sl, r3
	long numTimes =timeout / period;
 800bb7c:	0039      	movs	r1, r7
 800bb7e:	4650      	mov	r0, sl
 800bb80:	f7f4 fae6 	bl	8000150 <__udivsi3>
	stopStream = false;
 800bb84:	4b15      	ldr	r3, [pc, #84]	; (800bbdc <StreamMemsToPort.part.0+0x7c>)
		vTaskDelay(pdMS_TO_TICKS(period));
 800bb86:	21fa      	movs	r1, #250	; 0xfa
	stopStream = false;
 800bb88:	4698      	mov	r8, r3
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	4642      	mov	r2, r8
	long numTimes =timeout / period;
 800bb8e:	0004      	movs	r4, r0
		vTaskDelay(pdMS_TO_TICKS(period));
 800bb90:	0178      	lsls	r0, r7, #5
 800bb92:	1bc0      	subs	r0, r0, r7
 800bb94:	0080      	lsls	r0, r0, #2
 800bb96:	19c0      	adds	r0, r0, r7
	stopStream = false;
 800bb98:	7013      	strb	r3, [r2, #0]
		vTaskDelay(pdMS_TO_TICKS(period));
 800bb9a:	00c0      	lsls	r0, r0, #3
 800bb9c:	0089      	lsls	r1, r1, #2
 800bb9e:	f7f4 fad7 	bl	8000150 <__udivsi3>
 800bba2:	0007      	movs	r7, r0
	while((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)){
 800bba4:	e00c      	b.n	800bbc0 <StreamMemsToPort.part.0+0x60>
		if((status =function(port,module)) != H0BR4_OK)
 800bba6:	0031      	movs	r1, r6
 800bba8:	0028      	movs	r0, r5
 800bbaa:	47c8      	blx	r9
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d10d      	bne.n	800bbcc <StreamMemsToPort.part.0+0x6c>
		vTaskDelay(pdMS_TO_TICKS(period));
 800bbb0:	0038      	movs	r0, r7
 800bbb2:	f004 fb89 	bl	80102c8 <vTaskDelay>
		if(stopStream){
 800bbb6:	4643      	mov	r3, r8
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	3c01      	subs	r4, #1
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10a      	bne.n	800bbd6 <StreamMemsToPort.part.0+0x76>
	while((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)){
 800bbc0:	2c00      	cmp	r4, #0
 800bbc2:	dcf0      	bgt.n	800bba6 <StreamMemsToPort.part.0+0x46>
 800bbc4:	4653      	mov	r3, sl
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	d0ed      	beq.n	800bba6 <StreamMemsToPort.part.0+0x46>
 800bbca:	2000      	movs	r0, #0
}
 800bbcc:	bce0      	pop	{r5, r6, r7}
 800bbce:	46ba      	mov	sl, r7
 800bbd0:	46b1      	mov	r9, r6
 800bbd2:	46a8      	mov	r8, r5
 800bbd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status =H0BR4_ERR_TERMINATED;
 800bbd6:	200a      	movs	r0, #10
 800bbd8:	e7f8      	b.n	800bbcc <StreamMemsToPort.part.0+0x6c>
 800bbda:	46c0      	nop			; (mov r8, r8)
 800bbdc:	2000185c 	.word	0x2000185c

0800bbe0 <StreamSensorCommand>:
static portBASE_TYPE StreamSensorCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800bbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbe2:	46d6      	mov	lr, sl
 800bbe4:	464f      	mov	r7, r9
 800bbe6:	4646      	mov	r6, r8
	portBASE_TYPE sensNameLen =0;
 800bbe8:	2300      	movs	r3, #0
static portBASE_TYPE StreamSensorCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800bbea:	0014      	movs	r4, r2
 800bbec:	b5c0      	push	{r6, r7, lr}
 800bbee:	b088      	sub	sp, #32
	*pcWriteBuffer ='\0';
 800bbf0:	7003      	strb	r3, [r0, #0]
	*ppSensName =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,1,pSensNameLen);
 800bbf2:	aa03      	add	r2, sp, #12
static portBASE_TYPE StreamSensorCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800bbf4:	0005      	movs	r5, r0
 800bbf6:	000e      	movs	r6, r1
	*ppSensName =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,1,pSensNameLen);
 800bbf8:	0020      	movs	r0, r4
 800bbfa:	2101      	movs	r1, #1
	portBASE_TYPE sensNameLen =0;
 800bbfc:	9303      	str	r3, [sp, #12]
	portBASE_TYPE periodStrLen =0;
 800bbfe:	9304      	str	r3, [sp, #16]
	portBASE_TYPE timeoutStrLen =0;
 800bc00:	9305      	str	r3, [sp, #20]
	portBASE_TYPE portStrLen =0;
 800bc02:	9306      	str	r3, [sp, #24]
	portBASE_TYPE modStrLen =0;
 800bc04:	9307      	str	r3, [sp, #28]
	*ppSensName =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,1,pSensNameLen);
 800bc06:	f003 fb49 	bl	800f29c <FreeRTOS_CLIGetParameter>
	pPeriodMSStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,2,&periodStrLen);
 800bc0a:	2102      	movs	r1, #2
	*ppSensName =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,1,pSensNameLen);
 800bc0c:	4680      	mov	r8, r0
	pPeriodMSStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,2,&periodStrLen);
 800bc0e:	aa04      	add	r2, sp, #16
 800bc10:	0020      	movs	r0, r4
 800bc12:	f003 fb43 	bl	800f29c <FreeRTOS_CLIGetParameter>
	pTimeoutMSStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,3,&timeoutStrLen);
 800bc16:	2103      	movs	r1, #3
	pPeriodMSStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,2,&periodStrLen);
 800bc18:	0007      	movs	r7, r0
	pTimeoutMSStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,3,&timeoutStrLen);
 800bc1a:	aa05      	add	r2, sp, #20
 800bc1c:	0020      	movs	r0, r4
 800bc1e:	f003 fb3d 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if((*ppSensName == NULL) || (pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800bc22:	4643      	mov	r3, r8
	pTimeoutMSStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,3,&timeoutStrLen);
 800bc24:	4681      	mov	r9, r0
	if((*ppSensName == NULL) || (pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d046      	beq.n	800bcb8 <StreamSensorCommand+0xd8>
 800bc2a:	2f00      	cmp	r7, #0
 800bc2c:	d044      	beq.n	800bcb8 <StreamSensorCommand+0xd8>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d042      	beq.n	800bcb8 <StreamSensorCommand+0xd8>
	*pPeriod =atoi(pPeriodMSStr);
 800bc32:	0038      	movs	r0, r7
 800bc34:	f008 ff49 	bl	8014aca <atoi>
 800bc38:	0007      	movs	r7, r0
	*pTimeout =atoi(pTimeoutMSStr);
 800bc3a:	4648      	mov	r0, r9
 800bc3c:	f008 ff45 	bl	8014aca <atoi>
	pPortStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,4,&portStrLen);
 800bc40:	2104      	movs	r1, #4
 800bc42:	aa06      	add	r2, sp, #24
	*pTimeout =atoi(pTimeoutMSStr);
 800bc44:	4682      	mov	sl, r0
	pPortStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,4,&portStrLen);
 800bc46:	0020      	movs	r0, r4
 800bc48:	f003 fb28 	bl	800f29c <FreeRTOS_CLIGetParameter>
	pModStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,5,&modStrLen);
 800bc4c:	2105      	movs	r1, #5
	pPortStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,4,&portStrLen);
 800bc4e:	4681      	mov	r9, r0
	pModStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,5,&modStrLen);
 800bc50:	aa07      	add	r2, sp, #28
 800bc52:	0020      	movs	r0, r4
 800bc54:	f003 fb22 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if((pModStr == NULL) && (pPortStr == NULL))
 800bc58:	464b      	mov	r3, r9
	pModStr =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,5,&modStrLen);
 800bc5a:	1e04      	subs	r4, r0, #0
	if((pModStr == NULL) && (pPortStr == NULL))
 800bc5c:	d02a      	beq.n	800bcb4 <StreamSensorCommand+0xd4>
	if((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d02a      	beq.n	800bcb8 <StreamSensorCommand+0xd8>
	*pPort =atoi(pPortStr);
 800bc62:	4648      	mov	r0, r9
 800bc64:	f008 ff31 	bl	8014aca <atoi>
 800bc68:	b2c3      	uxtb	r3, r0
	*pModule =atoi(pModStr);
 800bc6a:	0020      	movs	r0, r4
	*pPort =atoi(pPortStr);
 800bc6c:	4699      	mov	r9, r3
	*pModule =atoi(pModStr);
 800bc6e:	f008 ff2c 	bl	8014aca <atoi>
		if(!strncmp(pSensName,gyroCmdName,strlen(gyroCmdName))){
 800bc72:	2204      	movs	r2, #4
	*pModule =atoi(pModStr);
 800bc74:	b2c4      	uxtb	r4, r0
		if(!strncmp(pSensName,gyroCmdName,strlen(gyroCmdName))){
 800bc76:	4955      	ldr	r1, [pc, #340]	; (800bdcc <StreamSensorCommand+0x1ec>)
 800bc78:	4640      	mov	r0, r8
 800bc7a:	f009 fc38 	bl	80154ee <strncmp>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d157      	bne.n	800bd32 <StreamSensorCommand+0x152>
	if(period < MIN_MEMS_PERIOD_MS)
 800bc82:	2fc7      	cmp	r7, #199	; 0xc7
 800bc84:	d940      	bls.n	800bd08 <StreamSensorCommand+0x128>
	if(port == 0)
 800bc86:	464b      	mov	r3, r9
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d03d      	beq.n	800bd08 <StreamSensorCommand+0x128>
	if(port == PcPort) // Check if CLI is not enabled at that port!
 800bc8c:	4b50      	ldr	r3, [pc, #320]	; (800bdd0 <StreamSensorCommand+0x1f0>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	454b      	cmp	r3, r9
 800bc92:	d039      	beq.n	800bd08 <StreamSensorCommand+0x128>
Module_Status StreamGyroDPSToPort(uint8_t port,uint8_t module,uint32_t period,uint32_t timeout){
 800bc94:	4b4f      	ldr	r3, [pc, #316]	; (800bdd4 <StreamSensorCommand+0x1f4>)
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	003a      	movs	r2, r7
 800bc9a:	4653      	mov	r3, sl
 800bc9c:	0021      	movs	r1, r4
 800bc9e:	4648      	mov	r0, r9
 800bca0:	f7ff ff5e 	bl	800bb60 <StreamMemsToPort.part.0>
				if(StreamTempCToPort(port,module,period,timeout) != H0BR4_OK)
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d12f      	bne.n	800bd08 <StreamSensorCommand+0x128>
		snprintf((char* )pcWriteBuffer,xWriteBufferLen,"\r\n");
 800bca8:	0031      	movs	r1, r6
 800bcaa:	0028      	movs	r0, r5
 800bcac:	4a4a      	ldr	r2, [pc, #296]	; (800bdd8 <StreamSensorCommand+0x1f8>)
 800bcae:	f009 fba7 	bl	8015400 <snprintf>
		return pdFALSE;
 800bcb2:	e006      	b.n	800bcc2 <StreamSensorCommand+0xe2>
	if((pModStr == NULL) && (pPortStr == NULL))
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d02d      	beq.n	800bd14 <StreamSensorCommand+0x134>
		snprintf((char* )pcWriteBuffer,xWriteBufferLen,"Invalid Arguments\r\n");
 800bcb8:	0031      	movs	r1, r6
 800bcba:	0028      	movs	r0, r5
 800bcbc:	4a47      	ldr	r2, [pc, #284]	; (800bddc <StreamSensorCommand+0x1fc>)
 800bcbe:	f009 fb9f 	bl	8015400 <snprintf>
}
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	b008      	add	sp, #32
 800bcc6:	bce0      	pop	{r5, r6, r7}
 800bcc8:	46ba      	mov	sl, r7
 800bcca:	46b1      	mov	r9, r6
 800bccc:	46a8      	mov	r8, r5
 800bcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(!strncmp(pSensName,accCmdName,strlen(accCmdName))){
 800bcd0:	2203      	movs	r2, #3
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	4942      	ldr	r1, [pc, #264]	; (800bde0 <StreamSensorCommand+0x200>)
 800bcd6:	f009 fc0a 	bl	80154ee <strncmp>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d065      	beq.n	800bdaa <StreamSensorCommand+0x1ca>
		else if(!strncmp(pSensName,magCmdName,strlen(magCmdName))){
 800bcde:	2203      	movs	r2, #3
 800bce0:	4640      	mov	r0, r8
 800bce2:	4940      	ldr	r1, [pc, #256]	; (800bde4 <StreamSensorCommand+0x204>)
 800bce4:	f009 fc03 	bl	80154ee <strncmp>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d066      	beq.n	800bdba <StreamSensorCommand+0x1da>
		else if(!strncmp(pSensName,tempCmdName,strlen(tempCmdName))){
 800bcec:	2204      	movs	r2, #4
 800bcee:	4640      	mov	r0, r8
 800bcf0:	493d      	ldr	r1, [pc, #244]	; (800bde8 <StreamSensorCommand+0x208>)
 800bcf2:	f009 fbfc 	bl	80154ee <strncmp>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d151      	bne.n	800bd9e <StreamSensorCommand+0x1be>
	return StreamMemsToCLI(period,timeout,SampleTempCToString);
 800bcfa:	4651      	mov	r1, sl
 800bcfc:	0038      	movs	r0, r7
 800bcfe:	4a3b      	ldr	r2, [pc, #236]	; (800bdec <StreamSensorCommand+0x20c>)
 800bd00:	f7ff fe9e 	bl	800ba40 <StreamMemsToCLI>
				if(StreamTempCToCLI(period,timeout) != H0BR4_OK)
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d0cf      	beq.n	800bca8 <StreamSensorCommand+0xc8>
	snprintf((char* )pcWriteBuffer,xWriteBufferLen,"Error reading Sensor\r\n");
 800bd08:	0031      	movs	r1, r6
 800bd0a:	0028      	movs	r0, r5
 800bd0c:	4a38      	ldr	r2, [pc, #224]	; (800bdf0 <StreamSensorCommand+0x210>)
 800bd0e:	f009 fb77 	bl	8015400 <snprintf>
	return pdFALSE;
 800bd12:	e7d6      	b.n	800bcc2 <StreamSensorCommand+0xe2>
		if(!strncmp(pSensName,gyroCmdName,strlen(gyroCmdName))){
 800bd14:	2204      	movs	r2, #4
 800bd16:	4640      	mov	r0, r8
 800bd18:	492c      	ldr	r1, [pc, #176]	; (800bdcc <StreamSensorCommand+0x1ec>)
 800bd1a:	f009 fbe8 	bl	80154ee <strncmp>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	d1d6      	bne.n	800bcd0 <StreamSensorCommand+0xf0>
	return StreamMemsToCLI(period,timeout,SampleGyroDPSToString);
 800bd22:	4651      	mov	r1, sl
 800bd24:	0038      	movs	r0, r7
 800bd26:	4a33      	ldr	r2, [pc, #204]	; (800bdf4 <StreamSensorCommand+0x214>)
 800bd28:	f7ff fe8a 	bl	800ba40 <StreamMemsToCLI>
				if(StreamGyroDPSToCLI(period,timeout) != H0BR4_OK)
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d1eb      	bne.n	800bd08 <StreamSensorCommand+0x128>
 800bd30:	e7ba      	b.n	800bca8 <StreamSensorCommand+0xc8>
		else if(!strncmp(pSensName,accCmdName,strlen(accCmdName))){
 800bd32:	2203      	movs	r2, #3
 800bd34:	4640      	mov	r0, r8
 800bd36:	492a      	ldr	r1, [pc, #168]	; (800bde0 <StreamSensorCommand+0x200>)
 800bd38:	f009 fbd9 	bl	80154ee <strncmp>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d018      	beq.n	800bd72 <StreamSensorCommand+0x192>
		else if(!strncmp(pSensName,magCmdName,strlen(magCmdName))){
 800bd40:	2203      	movs	r2, #3
 800bd42:	4640      	mov	r0, r8
 800bd44:	4927      	ldr	r1, [pc, #156]	; (800bde4 <StreamSensorCommand+0x204>)
 800bd46:	f009 fbd2 	bl	80154ee <strncmp>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d01c      	beq.n	800bd88 <StreamSensorCommand+0x1a8>
		else if(!strncmp(pSensName,tempCmdName,strlen(tempCmdName))){
 800bd4e:	2204      	movs	r2, #4
 800bd50:	4640      	mov	r0, r8
 800bd52:	4925      	ldr	r1, [pc, #148]	; (800bde8 <StreamSensorCommand+0x208>)
 800bd54:	f009 fbcb 	bl	80154ee <strncmp>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d120      	bne.n	800bd9e <StreamSensorCommand+0x1be>
	if(period < MIN_MEMS_PERIOD_MS)
 800bd5c:	2fc7      	cmp	r7, #199	; 0xc7
 800bd5e:	d9d3      	bls.n	800bd08 <StreamSensorCommand+0x128>
	if(port == 0)
 800bd60:	464b      	mov	r3, r9
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0d0      	beq.n	800bd08 <StreamSensorCommand+0x128>
	if(port == PcPort) // Check if CLI is not enabled at that port!
 800bd66:	4b1a      	ldr	r3, [pc, #104]	; (800bdd0 <StreamSensorCommand+0x1f0>)
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	454b      	cmp	r3, r9
 800bd6c:	d0cc      	beq.n	800bd08 <StreamSensorCommand+0x128>
Module_Status StreamTempCToPort(uint8_t port,uint8_t module,uint32_t period,uint32_t timeout){
 800bd6e:	4b22      	ldr	r3, [pc, #136]	; (800bdf8 <StreamSensorCommand+0x218>)
 800bd70:	e791      	b.n	800bc96 <StreamSensorCommand+0xb6>
	if(period < MIN_MEMS_PERIOD_MS)
 800bd72:	2fc7      	cmp	r7, #199	; 0xc7
 800bd74:	d9c8      	bls.n	800bd08 <StreamSensorCommand+0x128>
	if(port == 0)
 800bd76:	464b      	mov	r3, r9
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d0c5      	beq.n	800bd08 <StreamSensorCommand+0x128>
	if(port == PcPort) // Check if CLI is not enabled at that port!
 800bd7c:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <StreamSensorCommand+0x1f0>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	454b      	cmp	r3, r9
 800bd82:	d0c1      	beq.n	800bd08 <StreamSensorCommand+0x128>
Module_Status StreamAccGToPort(uint8_t port,uint8_t module,uint32_t period,uint32_t timeout){
 800bd84:	4b1d      	ldr	r3, [pc, #116]	; (800bdfc <StreamSensorCommand+0x21c>)
 800bd86:	e786      	b.n	800bc96 <StreamSensorCommand+0xb6>
	if(period < MIN_MEMS_PERIOD_MS)
 800bd88:	2fc7      	cmp	r7, #199	; 0xc7
 800bd8a:	d9bd      	bls.n	800bd08 <StreamSensorCommand+0x128>
	if(port == 0)
 800bd8c:	464b      	mov	r3, r9
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0ba      	beq.n	800bd08 <StreamSensorCommand+0x128>
	if(port == PcPort) // Check if CLI is not enabled at that port!
 800bd92:	4b0f      	ldr	r3, [pc, #60]	; (800bdd0 <StreamSensorCommand+0x1f0>)
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	454b      	cmp	r3, r9
 800bd98:	d0b6      	beq.n	800bd08 <StreamSensorCommand+0x128>
Module_Status StreamMagMGaussToPort(uint8_t port,uint8_t module,uint32_t period,uint32_t timeout){
 800bd9a:	4b19      	ldr	r3, [pc, #100]	; (800be00 <StreamSensorCommand+0x220>)
 800bd9c:	e77b      	b.n	800bc96 <StreamSensorCommand+0xb6>
			snprintf((char* )pcWriteBuffer,xWriteBufferLen,"Invalid Arguments\r\n");
 800bd9e:	0031      	movs	r1, r6
 800bda0:	0028      	movs	r0, r5
 800bda2:	4a0e      	ldr	r2, [pc, #56]	; (800bddc <StreamSensorCommand+0x1fc>)
 800bda4:	f009 fb2c 	bl	8015400 <snprintf>
 800bda8:	e77e      	b.n	800bca8 <StreamSensorCommand+0xc8>
	return StreamMemsToCLI(period,timeout,SampleAccGToString);
 800bdaa:	4651      	mov	r1, sl
 800bdac:	0038      	movs	r0, r7
 800bdae:	4a15      	ldr	r2, [pc, #84]	; (800be04 <StreamSensorCommand+0x224>)
 800bdb0:	f7ff fe46 	bl	800ba40 <StreamMemsToCLI>
				if(StreamAccGToCLI(period,timeout) != H0BR4_OK)
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d1a7      	bne.n	800bd08 <StreamSensorCommand+0x128>
 800bdb8:	e776      	b.n	800bca8 <StreamSensorCommand+0xc8>
	return StreamMemsToCLI(period,timeout,SampleMagMGaussToString);
 800bdba:	4651      	mov	r1, sl
 800bdbc:	0038      	movs	r0, r7
 800bdbe:	4a12      	ldr	r2, [pc, #72]	; (800be08 <StreamSensorCommand+0x228>)
 800bdc0:	f7ff fe3e 	bl	800ba40 <StreamMemsToCLI>
				if(StreamMagMGaussToCLI(period,timeout) != H0BR4_OK)
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d19f      	bne.n	800bd08 <StreamSensorCommand+0x128>
 800bdc8:	e76e      	b.n	800bca8 <StreamSensorCommand+0xc8>
 800bdca:	46c0      	nop			; (mov r8, r8)
 800bdcc:	0801df28 	.word	0x0801df28
 800bdd0:	20000b0f 	.word	0x20000b0f
 800bdd4:	0800c135 	.word	0x0800c135
 800bdd8:	0801d318 	.word	0x0801d318
 800bddc:	0801df14 	.word	0x0801df14
 800bde0:	0801df48 	.word	0x0801df48
 800bde4:	0801df4c 	.word	0x0801df4c
 800bde8:	0801df50 	.word	0x0801df50
 800bdec:	0800b9a5 	.word	0x0800b9a5
 800bdf0:	0801df30 	.word	0x0801df30
 800bdf4:	0800c0e5 	.word	0x0800c0e5
 800bdf8:	0800b9d5 	.word	0x0800b9d5
 800bdfc:	0800c35d 	.word	0x0800c35d
 800be00:	0800b8ad 	.word	0x0800b8ad
 800be04:	0800c249 	.word	0x0800c249
 800be08:	0800b841 	.word	0x0800b841

0800be0c <SystemClock_Config>:
	RCC_OscInitStruct.HSICalibrationValue =16;
 800be0c:	2310      	movs	r3, #16
void SystemClock_Config(void){
 800be0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be10:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.HSICalibrationValue =16;
 800be12:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800be14:	2680      	movs	r6, #128	; 0x80
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800be16:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800be18:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800be1a:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800be1c:	2702      	movs	r7, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800be1e:	0276      	lsls	r6, r6, #9
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800be20:	035b      	lsls	r3, r3, #13
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800be22:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800be24:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800be26:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800be28:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800be2a:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800be2c:	9519      	str	r5, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800be2e:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800be30:	9617      	str	r6, [sp, #92]	; 0x5c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800be32:	f007 f9b5 	bl	80131a0 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType =(RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800be36:	2307      	movs	r3, #7
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1);
 800be38:	2101      	movs	r1, #1
 800be3a:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType =(RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800be3c:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800be3e:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800be40:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800be42:	9703      	str	r7, [sp, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1);
 800be44:	f007 fc4e 	bl	80136e4 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
 800be48:	4b1a      	ldr	r3, [pc, #104]	; (800beb4 <SystemClock_Config+0xa8>)
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800be4a:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
 800be4c:	9306      	str	r3, [sp, #24]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800be4e:	9508      	str	r5, [sp, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800be50:	9509      	str	r5, [sp, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800be52:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800be54:	f007 fdd2 	bl	80139fc <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800be58:	2180      	movs	r1, #128	; 0x80
 800be5a:	4d17      	ldr	r5, [pc, #92]	; (800beb8 <SystemClock_Config+0xac>)
 800be5c:	0549      	lsls	r1, r1, #21
 800be5e:	69ea      	ldr	r2, [r5, #28]
 800be60:	430a      	orrs	r2, r1
 800be62:	61ea      	str	r2, [r5, #28]
 800be64:	69eb      	ldr	r3, [r5, #28]
 800be66:	400b      	ands	r3, r1
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800be6c:	f007 f98e 	bl	801318c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800be70:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800be72:	a806      	add	r0, sp, #24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800be78:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800be7a:	f007 fdbf 	bl	80139fc <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800be7e:	f007 fd91 	bl	80139a4 <HAL_RCC_GetHCLKFreq>
 800be82:	21fa      	movs	r1, #250	; 0xfa
 800be84:	0089      	lsls	r1, r1, #2
 800be86:	f7f4 f963 	bl	8000150 <__udivsi3>
 800be8a:	f005 fcb1 	bl	80117f0 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800be8e:	2004      	movs	r0, #4
 800be90:	f005 fcc8 	bl	8011824 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800be94:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE()
 800be96:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800be98:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE()
 800be9a:	4323      	orrs	r3, r4
 800be9c:	61ab      	str	r3, [r5, #24]
 800be9e:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800bea0:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE()
 800bea2:	401c      	ands	r4, r3
 800bea4:	9401      	str	r4, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800bea6:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE()
 800bea8:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800beaa:	f005 fc5b 	bl	8011764 <HAL_NVIC_SetPriority>
}
 800beae:	b01b      	add	sp, #108	; 0x6c
 800beb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beb2:	46c0      	nop			; (mov r8, r8)
 800beb4:	00040003 	.word	0x00040003
 800beb8:	40021000 	.word	0x40021000

0800bebc <Module_Peripheral_Init>:
void Module_Peripheral_Init(void){
 800bebc:	b530      	push	{r4, r5, lr}
 800bebe:	b083      	sub	sp, #12
	MX_USART1_UART_Init();
 800bec0:	f002 fa22 	bl	800e308 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800bec4:	f002 fa38 	bl	800e338 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800bec8:	f002 fa4e 	bl	800e368 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800becc:	f002 fa64 	bl	800e398 <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 800bed0:	f002 fa7a 	bl	800e3c8 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800bed4:	f002 fa90 	bl	800e3f8 <MX_USART6_UART_Init>
	MX_I2C_Init();
 800bed8:	f001 fed2 	bl	800dc80 <MX_I2C_Init>
	uint8_t who_am_i =0;
 800bedc:	466b      	mov	r3, sp
 800bede:	1ddc      	adds	r4, r3, #7
 800bee0:	2300      	movs	r3, #0
	if(LSM6DS3_ACC_GYRO_R_WHO_AM_I(&hi2c2,&who_am_i) != MEMS_SUCCESS)
 800bee2:	4d45      	ldr	r5, [pc, #276]	; (800bff8 <Module_Peripheral_Init+0x13c>)
 800bee4:	0021      	movs	r1, r4
 800bee6:	0028      	movs	r0, r5
	uint8_t who_am_i =0;
 800bee8:	7023      	strb	r3, [r4, #0]
	if(LSM6DS3_ACC_GYRO_R_WHO_AM_I(&hi2c2,&who_am_i) != MEMS_SUCCESS)
 800beea:	f002 fd93 	bl	800ea14 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 800beee:	2801      	cmp	r0, #1
 800bef0:	d102      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(who_am_i != LSM6DS3_ACC_GYRO_WHO_AM_I)
 800bef2:	7823      	ldrb	r3, [r4, #0]
 800bef4:	2b69      	cmp	r3, #105	; 0x69
 800bef6:	d029      	beq.n	800bf4c <Module_Peripheral_Init+0x90>
	uint8_t who_am_i =0x00;
 800bef8:	2300      	movs	r3, #0
	if(LSM303AGR_MAG_R_WHO_AM_I(&hi2c2,&who_am_i) != MEMS_SUCCESS)
 800befa:	0021      	movs	r1, r4
 800befc:	0028      	movs	r0, r5
	uint8_t who_am_i =0x00;
 800befe:	7023      	strb	r3, [r4, #0]
	if(LSM303AGR_MAG_R_WHO_AM_I(&hi2c2,&who_am_i) != MEMS_SUCCESS)
 800bf00:	f002 fcec 	bl	800e8dc <LSM303AGR_MAG_R_WHO_AM_I>
 800bf04:	2801      	cmp	r0, #1
 800bf06:	d102      	bne.n	800bf0e <Module_Peripheral_Init+0x52>
	if(who_am_i != LSM303AGR_MAG_WHO_AM_I)
 800bf08:	7823      	ldrb	r3, [r4, #0]
 800bf0a:	2b40      	cmp	r3, #64	; 0x40
 800bf0c:	d001      	beq.n	800bf12 <Module_Peripheral_Init+0x56>
}
 800bf0e:	b003      	add	sp, #12
 800bf10:	bd30      	pop	{r4, r5, pc}
	if(LSM303AGR_MAG_W_MD(&hi2c2,LSM303AGR_MAG_MD_IDLE1_MODE) != MEMS_SUCCESS)
 800bf12:	2102      	movs	r1, #2
 800bf14:	0028      	movs	r0, r5
 800bf16:	f002 fd0b 	bl	800e930 <LSM303AGR_MAG_W_MD>
 800bf1a:	2801      	cmp	r0, #1
 800bf1c:	d1f7      	bne.n	800bf0e <Module_Peripheral_Init+0x52>
	if(LSM303AGR_MAG_W_BDU(&hi2c2,LSM303AGR_MAG_BDU_ENABLED) != MEMS_SUCCESS)
 800bf1e:	2110      	movs	r1, #16
 800bf20:	0028      	movs	r0, r5
 800bf22:	f002 fce5 	bl	800e8f0 <LSM303AGR_MAG_W_BDU>
 800bf26:	2801      	cmp	r0, #1
 800bf28:	d1f1      	bne.n	800bf0e <Module_Peripheral_Init+0x52>
	if(LSM303AGR_MAG_W_ODR(&hi2c2,LSM303AGR_MAG_ODR_10Hz) != MEMS_SUCCESS)
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	0028      	movs	r0, r5
 800bf2e:	f002 fd29 	bl	800e984 <LSM303AGR_MAG_W_ODR>
 800bf32:	2801      	cmp	r0, #1
 800bf34:	d1eb      	bne.n	800bf0e <Module_Peripheral_Init+0x52>
	if(LSM303AGR_MAG_W_ST(&hi2c2,LSM303AGR_MAG_ST_DISABLED) != MEMS_SUCCESS)
 800bf36:	2100      	movs	r1, #0
 800bf38:	0028      	movs	r0, r5
 800bf3a:	f002 fd43 	bl	800e9c4 <LSM303AGR_MAG_W_ST>
 800bf3e:	2801      	cmp	r0, #1
 800bf40:	d1e5      	bne.n	800bf0e <Module_Peripheral_Init+0x52>
	if(LSM303AGR_MAG_W_MD(&hi2c2,LSM303AGR_MAG_MD_CONTINUOS_MODE) != MEMS_SUCCESS)
 800bf42:	2100      	movs	r1, #0
 800bf44:	0028      	movs	r0, r5
 800bf46:	f002 fcf3 	bl	800e930 <LSM303AGR_MAG_W_MD>
}
 800bf4a:	e7e0      	b.n	800bf0e <Module_Peripheral_Init+0x52>
	if(LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(&hi2c2,LSM6DS3_ACC_GYRO_IF_INC_ENABLED) != MEMS_SUCCESS)
 800bf4c:	2104      	movs	r1, #4
 800bf4e:	0028      	movs	r0, r5
 800bf50:	f002 fe66 	bl	800ec20 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>
 800bf54:	2801      	cmp	r0, #1
 800bf56:	d1cf      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_FIFO_MODE(&hi2c2,LSM6DS3_ACC_GYRO_FIFO_MODE_BYPASS) != MEMS_SUCCESS)
 800bf58:	2100      	movs	r1, #0
 800bf5a:	0028      	movs	r0, r5
 800bf5c:	f002 fe40 	bl	800ebe0 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>
 800bf60:	2801      	cmp	r0, #1
 800bf62:	d1c9      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_ODR_G(&hi2c2,LSM6DS3_ACC_GYRO_ODR_G_13Hz) != MEMS_SUCCESS)
 800bf64:	2110      	movs	r1, #16
 800bf66:	0028      	movs	r0, r5
 800bf68:	f002 fddc 	bl	800eb24 <LSM6DS3_ACC_GYRO_W_ODR_G>
 800bf6c:	2801      	cmp	r0, #1
 800bf6e:	d1c3      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_FS_G(&hi2c2,LSM6DS3_ACC_GYRO_FS_G_2000dps) != MEMS_SUCCESS)
 800bf70:	210c      	movs	r1, #12
 800bf72:	0028      	movs	r0, r5
 800bf74:	f002 fdb6 	bl	800eae4 <LSM6DS3_ACC_GYRO_W_FS_G>
 800bf78:	2801      	cmp	r0, #1
 800bf7a:	d1bd      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_XEN_G(&hi2c2,LSM6DS3_ACC_GYRO_XEN_G_ENABLED) != MEMS_SUCCESS)
 800bf7c:	2108      	movs	r1, #8
 800bf7e:	0028      	movs	r0, r5
 800bf80:	f002 feee 	bl	800ed60 <LSM6DS3_ACC_GYRO_W_XEN_G>
 800bf84:	2801      	cmp	r0, #1
 800bf86:	d1b7      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_YEN_G(&hi2c2,LSM6DS3_ACC_GYRO_YEN_G_ENABLED) != MEMS_SUCCESS)
 800bf88:	2110      	movs	r1, #16
 800bf8a:	0028      	movs	r0, r5
 800bf8c:	f002 ff08 	bl	800eda0 <LSM6DS3_ACC_GYRO_W_YEN_G>
 800bf90:	2801      	cmp	r0, #1
 800bf92:	d1b1      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_ZEN_G(&hi2c2,LSM6DS3_ACC_GYRO_ZEN_G_ENABLED) != MEMS_SUCCESS)
 800bf94:	2120      	movs	r1, #32
 800bf96:	0028      	movs	r0, r5
 800bf98:	f002 ff22 	bl	800ede0 <LSM6DS3_ACC_GYRO_W_ZEN_G>
 800bf9c:	2801      	cmp	r0, #1
 800bf9e:	d1ab      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_ODR_XL(&hi2c2,LSM6DS3_ACC_GYRO_ODR_XL_104Hz) != MEMS_SUCCESS)
 800bfa0:	2140      	movs	r1, #64	; 0x40
 800bfa2:	0028      	movs	r0, r5
 800bfa4:	f002 fd7e 	bl	800eaa4 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 800bfa8:	2801      	cmp	r0, #1
 800bfaa:	d1a5      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_BW_XL(&hi2c2,LSM6DS3_ACC_GYRO_BW_XL_50Hz) != MEMS_SUCCESS)
 800bfac:	2103      	movs	r1, #3
 800bfae:	0028      	movs	r0, r5
 800bfb0:	f002 fdf6 	bl	800eba0 <LSM6DS3_ACC_GYRO_W_BW_XL>
 800bfb4:	2801      	cmp	r0, #1
 800bfb6:	d19f      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_FS_XL(&hi2c2,LSM6DS3_ACC_GYRO_FS_XL_16g) != MEMS_SUCCESS)
 800bfb8:	2104      	movs	r1, #4
 800bfba:	0028      	movs	r0, r5
 800bfbc:	f002 fd34 	bl	800ea28 <LSM6DS3_ACC_GYRO_W_FS_XL>
 800bfc0:	2801      	cmp	r0, #1
 800bfc2:	d199      	bne.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_XEN_XL(&hi2c2,LSM6DS3_ACC_GYRO_XEN_XL_ENABLED) != MEMS_SUCCESS)
 800bfc4:	2108      	movs	r1, #8
 800bfc6:	0028      	movs	r0, r5
 800bfc8:	f002 fe6a 	bl	800eca0 <LSM6DS3_ACC_GYRO_W_XEN_XL>
 800bfcc:	2801      	cmp	r0, #1
 800bfce:	d000      	beq.n	800bfd2 <Module_Peripheral_Init+0x116>
 800bfd0:	e792      	b.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_YEN_XL(&hi2c2,LSM6DS3_ACC_GYRO_YEN_XL_ENABLED) != MEMS_SUCCESS)
 800bfd2:	2110      	movs	r1, #16
 800bfd4:	0028      	movs	r0, r5
 800bfd6:	f002 fe83 	bl	800ece0 <LSM6DS3_ACC_GYRO_W_YEN_XL>
 800bfda:	2801      	cmp	r0, #1
 800bfdc:	d000      	beq.n	800bfe0 <Module_Peripheral_Init+0x124>
 800bfde:	e78b      	b.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_ZEN_XL(&hi2c2,LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED) != MEMS_SUCCESS)
 800bfe0:	2120      	movs	r1, #32
 800bfe2:	0028      	movs	r0, r5
 800bfe4:	f002 fe9c 	bl	800ed20 <LSM6DS3_ACC_GYRO_W_ZEN_XL>
 800bfe8:	2801      	cmp	r0, #1
 800bfea:	d000      	beq.n	800bfee <Module_Peripheral_Init+0x132>
 800bfec:	e784      	b.n	800bef8 <Module_Peripheral_Init+0x3c>
	if(LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR(&hi2c2,LSM6DS3_ACC_GYRO_BW_SCAL_ODR_ENABLED) != MEMS_ERROR)
 800bfee:	2180      	movs	r1, #128	; 0x80
 800bff0:	0028      	movs	r0, r5
 800bff2:	f002 fe35 	bl	800ec60 <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR>
 800bff6:	e77f      	b.n	800bef8 <Module_Peripheral_Init+0x3c>
 800bff8:	20006e94 	.word	0x20006e94

0800bffc <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void){
 800bffc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&SampleCommandDefinition);
 800bffe:	4805      	ldr	r0, [pc, #20]	; (800c014 <RegisterModuleCLICommands+0x18>)
 800c000:	f003 f8aa 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&StreamCommandDefinition);
 800c004:	4804      	ldr	r0, [pc, #16]	; (800c018 <RegisterModuleCLICommands+0x1c>)
 800c006:	f003 f8a7 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&StopCommandDefinition);
 800c00a:	4804      	ldr	r0, [pc, #16]	; (800c01c <RegisterModuleCLICommands+0x20>)
 800c00c:	f003 f8a4 	bl	800f158 <FreeRTOS_CLIRegisterCommand>
}
 800c010:	bd10      	pop	{r4, pc}
 800c012:	46c0      	nop			; (mov r8, r8)
 800c014:	0801e234 	.word	0x0801e234
 800c018:	0801e254 	.word	0x0801e254
 800c01c:	0801e244 	.word	0x0801e244

0800c020 <GetPort>:
	if(huart->Instance == USART4)
 800c020:	6800      	ldr	r0, [r0, #0]
 800c022:	4b11      	ldr	r3, [pc, #68]	; (800c068 <GetPort+0x48>)
 800c024:	4298      	cmp	r0, r3
 800c026:	d015      	beq.n	800c054 <GetPort+0x34>
	else if(huart->Instance == USART2)
 800c028:	4b10      	ldr	r3, [pc, #64]	; (800c06c <GetPort+0x4c>)
 800c02a:	4298      	cmp	r0, r3
 800c02c:	d014      	beq.n	800c058 <GetPort+0x38>
	else if(huart->Instance == USART6)
 800c02e:	4b10      	ldr	r3, [pc, #64]	; (800c070 <GetPort+0x50>)
 800c030:	4298      	cmp	r0, r3
 800c032:	d013      	beq.n	800c05c <GetPort+0x3c>
	else if(huart->Instance == USART3)
 800c034:	4b0f      	ldr	r3, [pc, #60]	; (800c074 <GetPort+0x54>)
 800c036:	4298      	cmp	r0, r3
 800c038:	d012      	beq.n	800c060 <GetPort+0x40>
	else if(huart->Instance == USART1)
 800c03a:	4b0f      	ldr	r3, [pc, #60]	; (800c078 <GetPort+0x58>)
 800c03c:	4298      	cmp	r0, r3
 800c03e:	d011      	beq.n	800c064 <GetPort+0x44>
		return P6;
 800c040:	4b0e      	ldr	r3, [pc, #56]	; (800c07c <GetPort+0x5c>)
 800c042:	469c      	mov	ip, r3
 800c044:	4460      	add	r0, ip
 800c046:	1e43      	subs	r3, r0, #1
 800c048:	4198      	sbcs	r0, r3
 800c04a:	2305      	movs	r3, #5
 800c04c:	4240      	negs	r0, r0
 800c04e:	4398      	bics	r0, r3
 800c050:	3006      	adds	r0, #6
}
 800c052:	4770      	bx	lr
		return P1;
 800c054:	2001      	movs	r0, #1
 800c056:	e7fc      	b.n	800c052 <GetPort+0x32>
		return P2;
 800c058:	2002      	movs	r0, #2
 800c05a:	e7fa      	b.n	800c052 <GetPort+0x32>
		return P3;
 800c05c:	2003      	movs	r0, #3
 800c05e:	e7f8      	b.n	800c052 <GetPort+0x32>
		return P4;
 800c060:	2004      	movs	r0, #4
 800c062:	e7f6      	b.n	800c052 <GetPort+0x32>
		return P5;
 800c064:	2005      	movs	r0, #5
 800c066:	e7f4      	b.n	800c052 <GetPort+0x32>
 800c068:	40004c00 	.word	0x40004c00
 800c06c:	40004400 	.word	0x40004400
 800c070:	40011400 	.word	0x40011400
 800c074:	40004800 	.word	0x40004800
 800c078:	40013800 	.word	0x40013800
 800c07c:	bfffb000 	.word	0xbfffb000

0800c080 <SampleGyroDPS>:
Module_Status SampleGyroDPS(float *x,float *y,float *z){
 800c080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c082:	46c6      	mov	lr, r8
 800c084:	b500      	push	{lr}
 800c086:	b084      	sub	sp, #16
 800c088:	0006      	movs	r6, r0
 800c08a:	000d      	movs	r5, r1
 800c08c:	0014      	movs	r4, r2
	if(LSM6DS3_ACC_Get_AngularRate(&hi2c2,buff,0) != MEMS_SUCCESS)
 800c08e:	4813      	ldr	r0, [pc, #76]	; (800c0dc <SampleGyroDPS+0x5c>)
 800c090:	2200      	movs	r2, #0
 800c092:	a901      	add	r1, sp, #4
 800c094:	f002 ff52 	bl	800ef3c <LSM6DS3_ACC_Get_AngularRate>
 800c098:	2801      	cmp	r0, #1
 800c09a:	d11c      	bne.n	800c0d6 <SampleGyroDPS+0x56>
	*gyroY =buff[1];
 800c09c:	9b02      	ldr	r3, [sp, #8]
	*x =((float )xInMDPS) / 1000;
 800c09e:	9801      	ldr	r0, [sp, #4]
	*gyroY =buff[1];
 800c0a0:	4698      	mov	r8, r3
	*x =((float )xInMDPS) / 1000;
 800c0a2:	f7f5 fa89 	bl	80015b8 <__aeabi_i2f>
 800c0a6:	490e      	ldr	r1, [pc, #56]	; (800c0e0 <SampleGyroDPS+0x60>)
 800c0a8:	f7f4 fdba 	bl	8000c20 <__aeabi_fdiv>
 800c0ac:	6030      	str	r0, [r6, #0]
	*y =((float )yInMDPS) / 1000;
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	f7f5 fa82 	bl	80015b8 <__aeabi_i2f>
 800c0b4:	490a      	ldr	r1, [pc, #40]	; (800c0e0 <SampleGyroDPS+0x60>)
 800c0b6:	f7f4 fdb3 	bl	8000c20 <__aeabi_fdiv>
	*gyroZ =buff[2];
 800c0ba:	9f03      	ldr	r7, [sp, #12]
	*y =((float )yInMDPS) / 1000;
 800c0bc:	6028      	str	r0, [r5, #0]
	*z =((float )zInMDPS) / 1000;
 800c0be:	0038      	movs	r0, r7
 800c0c0:	f7f5 fa7a 	bl	80015b8 <__aeabi_i2f>
 800c0c4:	4906      	ldr	r1, [pc, #24]	; (800c0e0 <SampleGyroDPS+0x60>)
 800c0c6:	f7f4 fdab 	bl	8000c20 <__aeabi_fdiv>
 800c0ca:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800c0cc:	2000      	movs	r0, #0
}
 800c0ce:	b004      	add	sp, #16
 800c0d0:	bc80      	pop	{r7}
 800c0d2:	46b8      	mov	r8, r7
 800c0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return H0BR4_ERR_LSM6DS3;
 800c0d6:	2005      	movs	r0, #5
 800c0d8:	e7f9      	b.n	800c0ce <SampleGyroDPS+0x4e>
 800c0da:	46c0      	nop			; (mov r8, r8)
 800c0dc:	20006e94 	.word	0x20006e94
 800c0e0:	447a0000 	.word	0x447a0000

0800c0e4 <SampleGyroDPSToString>:
	float x =0, y =0, z =0;
 800c0e4:	2300      	movs	r3, #0
Module_Status SampleGyroDPSToString(char *cstring,size_t maxLen){
 800c0e6:	b570      	push	{r4, r5, r6, lr}
 800c0e8:	b08a      	sub	sp, #40	; 0x28
 800c0ea:	0006      	movs	r6, r0
 800c0ec:	000d      	movs	r5, r1
	if((status =SampleGyroDPS(&x,&y,&z)) != H0BR4_OK)
 800c0ee:	aa09      	add	r2, sp, #36	; 0x24
 800c0f0:	a908      	add	r1, sp, #32
 800c0f2:	a807      	add	r0, sp, #28
	float x =0, y =0, z =0;
 800c0f4:	9307      	str	r3, [sp, #28]
 800c0f6:	9308      	str	r3, [sp, #32]
 800c0f8:	9309      	str	r3, [sp, #36]	; 0x24
	if((status =SampleGyroDPS(&x,&y,&z)) != H0BR4_OK)
 800c0fa:	f7ff ffc1 	bl	800c080 <SampleGyroDPS>
 800c0fe:	1e04      	subs	r4, r0, #0
 800c100:	d113      	bne.n	800c12a <SampleGyroDPSToString+0x46>
	snprintf(cstring,maxLen,"Gyro(DPS) | X: %.2f, Y: %.2f, Z: %.2f\r\n",x,y,z);
 800c102:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c104:	f7f7 f8f2 	bl	80032ec <__aeabi_f2d>
 800c108:	9004      	str	r0, [sp, #16]
 800c10a:	9105      	str	r1, [sp, #20]
 800c10c:	9808      	ldr	r0, [sp, #32]
 800c10e:	f7f7 f8ed 	bl	80032ec <__aeabi_f2d>
 800c112:	9002      	str	r0, [sp, #8]
 800c114:	9103      	str	r1, [sp, #12]
 800c116:	9807      	ldr	r0, [sp, #28]
 800c118:	f7f7 f8e8 	bl	80032ec <__aeabi_f2d>
 800c11c:	4a04      	ldr	r2, [pc, #16]	; (800c130 <SampleGyroDPSToString+0x4c>)
 800c11e:	9000      	str	r0, [sp, #0]
 800c120:	9101      	str	r1, [sp, #4]
 800c122:	0029      	movs	r1, r5
 800c124:	0030      	movs	r0, r6
 800c126:	f009 f96b 	bl	8015400 <snprintf>
}
 800c12a:	0020      	movs	r0, r4
 800c12c:	b00a      	add	sp, #40	; 0x28
 800c12e:	bd70      	pop	{r4, r5, r6, pc}
 800c130:	0801df58 	.word	0x0801df58

0800c134 <SampleGyroDPSToPort>:
Module_Status SampleGyroDPSToPort(uint8_t port,uint8_t module){
 800c134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c136:	b085      	sub	sp, #20
	return SampleGyroDPS(buffer,buffer + 1,buffer + 2);
 800c138:	ac01      	add	r4, sp, #4
Module_Status SampleGyroDPSToPort(uint8_t port,uint8_t module){
 800c13a:	0007      	movs	r7, r0
 800c13c:	000e      	movs	r6, r1
	return SampleGyroDPS(buffer,buffer + 1,buffer + 2);
 800c13e:	0020      	movs	r0, r4
 800c140:	aa03      	add	r2, sp, #12
 800c142:	a902      	add	r1, sp, #8
 800c144:	f7ff ff9c 	bl	800c080 <SampleGyroDPS>
 800c148:	1e05      	subs	r5, r0, #0
	if((status =SampleGyroDPSToBuf(buffer)) != H0BR4_OK)
 800c14a:	d122      	bne.n	800c192 <SampleGyroDPSToPort+0x5e>
	if(module == myID){
 800c14c:	4b22      	ldr	r3, [pc, #136]	; (800c1d8 <SampleGyroDPSToPort+0xa4>)
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	42b3      	cmp	r3, r6
 800c152:	d021      	beq.n	800c198 <SampleGyroDPSToPort+0x64>
		messageParams[0] =port;
 800c154:	4b21      	ldr	r3, [pc, #132]	; (800c1dc <SampleGyroDPSToPort+0xa8>)
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c156:	78e2      	ldrb	r2, [r4, #3]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800c158:	2123      	movs	r1, #35	; 0x23
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c15a:	705a      	strb	r2, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c15c:	78a2      	ldrb	r2, [r4, #2]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800c15e:	0030      	movs	r0, r6
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c160:	709a      	strb	r2, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c162:	7862      	ldrb	r2, [r4, #1]
		messageParams[0] =port;
 800c164:	701f      	strb	r7, [r3, #0]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c166:	70da      	strb	r2, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c168:	7822      	ldrb	r2, [r4, #0]
 800c16a:	711a      	strb	r2, [r3, #4]
		messageParams[5] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800c16c:	79e2      	ldrb	r2, [r4, #7]
 800c16e:	715a      	strb	r2, [r3, #5]
		messageParams[6] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800c170:	79a2      	ldrb	r2, [r4, #6]
 800c172:	719a      	strb	r2, [r3, #6]
		messageParams[7] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800c174:	7962      	ldrb	r2, [r4, #5]
 800c176:	71da      	strb	r2, [r3, #7]
		messageParams[8] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800c178:	7922      	ldrb	r2, [r4, #4]
 800c17a:	721a      	strb	r2, [r3, #8]
		messageParams[9] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800c17c:	7ae2      	ldrb	r2, [r4, #11]
 800c17e:	725a      	strb	r2, [r3, #9]
		messageParams[10] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800c180:	7aa2      	ldrb	r2, [r4, #10]
 800c182:	729a      	strb	r2, [r3, #10]
		messageParams[11] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800c184:	7a62      	ldrb	r2, [r4, #9]
 800c186:	72da      	strb	r2, [r3, #11]
		messageParams[12] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800c188:	7a22      	ldrb	r2, [r4, #8]
 800c18a:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800c18c:	220d      	movs	r2, #13
 800c18e:	f7fd fd81 	bl	8009c94 <SendMessageToModule>
}
 800c192:	0028      	movs	r0, r5
 800c194:	b005      	add	sp, #20
 800c196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c198:	78e3      	ldrb	r3, [r4, #3]
 800c19a:	4911      	ldr	r1, [pc, #68]	; (800c1e0 <SampleGyroDPSToPort+0xac>)
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800c19c:	220c      	movs	r2, #12
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c19e:	700b      	strb	r3, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c1a0:	78a3      	ldrb	r3, [r4, #2]
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800c1a2:	0038      	movs	r0, r7
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c1a4:	704b      	strb	r3, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c1a6:	7863      	ldrb	r3, [r4, #1]
 800c1a8:	708b      	strb	r3, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c1aa:	7823      	ldrb	r3, [r4, #0]
 800c1ac:	70cb      	strb	r3, [r1, #3]
		temp[4] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800c1ae:	79e3      	ldrb	r3, [r4, #7]
 800c1b0:	710b      	strb	r3, [r1, #4]
		temp[5] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800c1b2:	79a3      	ldrb	r3, [r4, #6]
 800c1b4:	714b      	strb	r3, [r1, #5]
		temp[6] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800c1b6:	7963      	ldrb	r3, [r4, #5]
 800c1b8:	718b      	strb	r3, [r1, #6]
		temp[7] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800c1ba:	7923      	ldrb	r3, [r4, #4]
 800c1bc:	71cb      	strb	r3, [r1, #7]
		temp[8] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800c1be:	7ae3      	ldrb	r3, [r4, #11]
 800c1c0:	720b      	strb	r3, [r1, #8]
		temp[9] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800c1c2:	7aa3      	ldrb	r3, [r4, #10]
 800c1c4:	724b      	strb	r3, [r1, #9]
		temp[10] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800c1c6:	7a63      	ldrb	r3, [r4, #9]
 800c1c8:	728b      	strb	r3, [r1, #10]
		temp[11] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800c1ca:	7a23      	ldrb	r3, [r4, #8]
 800c1cc:	72cb      	strb	r3, [r1, #11]
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800c1ce:	230a      	movs	r3, #10
 800c1d0:	f002 fa70 	bl	800e6b4 <writePxITMutex>
 800c1d4:	e7dd      	b.n	800c192 <SampleGyroDPSToPort+0x5e>
 800c1d6:	46c0      	nop			; (mov r8, r8)
 800c1d8:	2000110e 	.word	0x2000110e
 800c1dc:	20000fd0 	.word	0x20000fd0
 800c1e0:	20001860 	.word	0x20001860

0800c1e4 <SampleAccG>:
Module_Status SampleAccG(float *x,float *y,float *z){
 800c1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1e6:	46c6      	mov	lr, r8
 800c1e8:	b500      	push	{lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	0006      	movs	r6, r0
 800c1ee:	000d      	movs	r5, r1
 800c1f0:	0014      	movs	r4, r2
	if(LSM6DS3_ACC_Get_Acceleration(&hi2c2,buff,0) != MEMS_SUCCESS)
 800c1f2:	4813      	ldr	r0, [pc, #76]	; (800c240 <SampleAccG+0x5c>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	a901      	add	r1, sp, #4
 800c1f8:	f002 fe28 	bl	800ee4c <LSM6DS3_ACC_Get_Acceleration>
 800c1fc:	2801      	cmp	r0, #1
 800c1fe:	d11c      	bne.n	800c23a <SampleAccG+0x56>
	*accY =buff[1];
 800c200:	9b02      	ldr	r3, [sp, #8]
	*x =((float )xInMG) / 1000;
 800c202:	9801      	ldr	r0, [sp, #4]
	*accY =buff[1];
 800c204:	4698      	mov	r8, r3
	*x =((float )xInMG) / 1000;
 800c206:	f7f5 f9d7 	bl	80015b8 <__aeabi_i2f>
 800c20a:	490e      	ldr	r1, [pc, #56]	; (800c244 <SampleAccG+0x60>)
 800c20c:	f7f4 fd08 	bl	8000c20 <__aeabi_fdiv>
 800c210:	6030      	str	r0, [r6, #0]
	*y =((float )yInMG) / 1000;
 800c212:	4640      	mov	r0, r8
 800c214:	f7f5 f9d0 	bl	80015b8 <__aeabi_i2f>
 800c218:	490a      	ldr	r1, [pc, #40]	; (800c244 <SampleAccG+0x60>)
 800c21a:	f7f4 fd01 	bl	8000c20 <__aeabi_fdiv>
	*accZ =buff[2];
 800c21e:	9f03      	ldr	r7, [sp, #12]
	*y =((float )yInMG) / 1000;
 800c220:	6028      	str	r0, [r5, #0]
	*z =((float )zInMG) / 1000;
 800c222:	0038      	movs	r0, r7
 800c224:	f7f5 f9c8 	bl	80015b8 <__aeabi_i2f>
 800c228:	4906      	ldr	r1, [pc, #24]	; (800c244 <SampleAccG+0x60>)
 800c22a:	f7f4 fcf9 	bl	8000c20 <__aeabi_fdiv>
 800c22e:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800c230:	2000      	movs	r0, #0
}
 800c232:	b004      	add	sp, #16
 800c234:	bc80      	pop	{r7}
 800c236:	46b8      	mov	r8, r7
 800c238:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return H0BR4_ERR_LSM6DS3;
 800c23a:	2005      	movs	r0, #5
 800c23c:	e7f9      	b.n	800c232 <SampleAccG+0x4e>
 800c23e:	46c0      	nop			; (mov r8, r8)
 800c240:	20006e94 	.word	0x20006e94
 800c244:	447a0000 	.word	0x447a0000

0800c248 <SampleAccGToString>:
	float x =0, y =0, z =0;
 800c248:	2300      	movs	r3, #0
Module_Status SampleAccGToString(char *cstring,size_t maxLen){
 800c24a:	b570      	push	{r4, r5, r6, lr}
 800c24c:	b08a      	sub	sp, #40	; 0x28
 800c24e:	0006      	movs	r6, r0
 800c250:	000d      	movs	r5, r1
	if((status =SampleAccG(&x,&y,&z)) != H0BR4_OK)
 800c252:	aa09      	add	r2, sp, #36	; 0x24
 800c254:	a908      	add	r1, sp, #32
 800c256:	a807      	add	r0, sp, #28
	float x =0, y =0, z =0;
 800c258:	9307      	str	r3, [sp, #28]
 800c25a:	9308      	str	r3, [sp, #32]
 800c25c:	9309      	str	r3, [sp, #36]	; 0x24
	if((status =SampleAccG(&x,&y,&z)) != H0BR4_OK)
 800c25e:	f7ff ffc1 	bl	800c1e4 <SampleAccG>
 800c262:	1e04      	subs	r4, r0, #0
 800c264:	d113      	bne.n	800c28e <SampleAccGToString+0x46>
	snprintf(cstring,maxLen,"Acc(G) | X: %.2f, Y: %.2f, Z: %.2f\r\n",x,y,z);
 800c266:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c268:	f7f7 f840 	bl	80032ec <__aeabi_f2d>
 800c26c:	9004      	str	r0, [sp, #16]
 800c26e:	9105      	str	r1, [sp, #20]
 800c270:	9808      	ldr	r0, [sp, #32]
 800c272:	f7f7 f83b 	bl	80032ec <__aeabi_f2d>
 800c276:	9002      	str	r0, [sp, #8]
 800c278:	9103      	str	r1, [sp, #12]
 800c27a:	9807      	ldr	r0, [sp, #28]
 800c27c:	f7f7 f836 	bl	80032ec <__aeabi_f2d>
 800c280:	4a04      	ldr	r2, [pc, #16]	; (800c294 <SampleAccGToString+0x4c>)
 800c282:	9000      	str	r0, [sp, #0]
 800c284:	9101      	str	r1, [sp, #4]
 800c286:	0029      	movs	r1, r5
 800c288:	0030      	movs	r0, r6
 800c28a:	f009 f8b9 	bl	8015400 <snprintf>
}
 800c28e:	0020      	movs	r0, r4
 800c290:	b00a      	add	sp, #40	; 0x28
 800c292:	bd70      	pop	{r4, r5, r6, pc}
 800c294:	0801df80 	.word	0x0801df80

0800c298 <SampleSensorCommand>:
static portBASE_TYPE SampleSensorCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800c298:	b570      	push	{r4, r5, r6, lr}
	portBASE_TYPE sensNameLen =0;
 800c29a:	2300      	movs	r3, #0
static portBASE_TYPE SampleSensorCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800c29c:	0005      	movs	r5, r0
 800c29e:	b082      	sub	sp, #8
 800c2a0:	0010      	movs	r0, r2
 800c2a2:	000e      	movs	r6, r1
	*pcWriteBuffer ='\0';
 800c2a4:	702b      	strb	r3, [r5, #0]
	pSensName =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,1,&sensNameLen);
 800c2a6:	2101      	movs	r1, #1
 800c2a8:	aa01      	add	r2, sp, #4
	portBASE_TYPE sensNameLen =0;
 800c2aa:	9301      	str	r3, [sp, #4]
	pSensName =(const char* )FreeRTOS_CLIGetParameter(pcCommandString,1,&sensNameLen);
 800c2ac:	f002 fff6 	bl	800f29c <FreeRTOS_CLIGetParameter>
 800c2b0:	1e04      	subs	r4, r0, #0
	if(pSensName == NULL){
 800c2b2:	d030      	beq.n	800c316 <SampleSensorCommand+0x7e>
		if(!strncmp(pSensName,gyroCmdName,strlen(gyroCmdName))){
 800c2b4:	2204      	movs	r2, #4
 800c2b6:	4925      	ldr	r1, [pc, #148]	; (800c34c <SampleSensorCommand+0xb4>)
 800c2b8:	f009 f919 	bl	80154ee <strncmp>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d032      	beq.n	800c326 <SampleSensorCommand+0x8e>
		else if(!strncmp(pSensName,accCmdName,strlen(accCmdName))){
 800c2c0:	7823      	ldrb	r3, [r4, #0]
 800c2c2:	2b61      	cmp	r3, #97	; 0x61
 800c2c4:	d013      	beq.n	800c2ee <SampleSensorCommand+0x56>
		else if(!strncmp(pSensName,magCmdName,strlen(magCmdName))){
 800c2c6:	2b6d      	cmp	r3, #109	; 0x6d
 800c2c8:	d11e      	bne.n	800c308 <SampleSensorCommand+0x70>
 800c2ca:	7863      	ldrb	r3, [r4, #1]
 800c2cc:	2b61      	cmp	r3, #97	; 0x61
 800c2ce:	d11b      	bne.n	800c308 <SampleSensorCommand+0x70>
 800c2d0:	78a3      	ldrb	r3, [r4, #2]
 800c2d2:	2b67      	cmp	r3, #103	; 0x67
 800c2d4:	d118      	bne.n	800c308 <SampleSensorCommand+0x70>
			if(SampleMagMGaussToString((char* )pcWriteBuffer,xWriteBufferLen) != H0BR4_OK)
 800c2d6:	0031      	movs	r1, r6
 800c2d8:	0028      	movs	r0, r5
 800c2da:	f7ff fab1 	bl	800b840 <SampleMagMGaussToString>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d01e      	beq.n	800c320 <SampleSensorCommand+0x88>
	snprintf((char* )pcWriteBuffer,xWriteBufferLen,"Error reading Sensor\r\n");
 800c2e2:	0031      	movs	r1, r6
 800c2e4:	0028      	movs	r0, r5
 800c2e6:	4a1a      	ldr	r2, [pc, #104]	; (800c350 <SampleSensorCommand+0xb8>)
 800c2e8:	f009 f88a 	bl	8015400 <snprintf>
	return pdFALSE;
 800c2ec:	e018      	b.n	800c320 <SampleSensorCommand+0x88>
		else if(!strncmp(pSensName,accCmdName,strlen(accCmdName))){
 800c2ee:	7862      	ldrb	r2, [r4, #1]
 800c2f0:	2a63      	cmp	r2, #99	; 0x63
 800c2f2:	d1e8      	bne.n	800c2c6 <SampleSensorCommand+0x2e>
 800c2f4:	78a2      	ldrb	r2, [r4, #2]
 800c2f6:	2a63      	cmp	r2, #99	; 0x63
 800c2f8:	d1e5      	bne.n	800c2c6 <SampleSensorCommand+0x2e>
			if(SampleAccGToString((char* )pcWriteBuffer,xWriteBufferLen) != H0BR4_OK)
 800c2fa:	0031      	movs	r1, r6
 800c2fc:	0028      	movs	r0, r5
 800c2fe:	f7ff ffa3 	bl	800c248 <SampleAccGToString>
 800c302:	2800      	cmp	r0, #0
 800c304:	d1ed      	bne.n	800c2e2 <SampleSensorCommand+0x4a>
 800c306:	e00b      	b.n	800c320 <SampleSensorCommand+0x88>
		else if(!strncmp(pSensName,tempCmdName,strlen(tempCmdName))){
 800c308:	2204      	movs	r2, #4
 800c30a:	0020      	movs	r0, r4
 800c30c:	4911      	ldr	r1, [pc, #68]	; (800c354 <SampleSensorCommand+0xbc>)
 800c30e:	f009 f8ee 	bl	80154ee <strncmp>
 800c312:	2800      	cmp	r0, #0
 800c314:	d013      	beq.n	800c33e <SampleSensorCommand+0xa6>
		snprintf((char* )pcWriteBuffer,xWriteBufferLen,"Invalid Arguments\r\n");
 800c316:	0031      	movs	r1, r6
 800c318:	0028      	movs	r0, r5
 800c31a:	4a0f      	ldr	r2, [pc, #60]	; (800c358 <SampleSensorCommand+0xc0>)
 800c31c:	f009 f870 	bl	8015400 <snprintf>
}
 800c320:	2000      	movs	r0, #0
 800c322:	b002      	add	sp, #8
 800c324:	bd70      	pop	{r4, r5, r6, pc}
			if(SampleGyroDPSToString((char* )pcWriteBuffer,xWriteBufferLen) != H0BR4_OK)
 800c326:	0031      	movs	r1, r6
 800c328:	0028      	movs	r0, r5
 800c32a:	f7ff fedb 	bl	800c0e4 <SampleGyroDPSToString>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d0f6      	beq.n	800c320 <SampleSensorCommand+0x88>
	snprintf((char* )pcWriteBuffer,xWriteBufferLen,"Error reading Sensor\r\n");
 800c332:	0031      	movs	r1, r6
 800c334:	0028      	movs	r0, r5
 800c336:	4a06      	ldr	r2, [pc, #24]	; (800c350 <SampleSensorCommand+0xb8>)
 800c338:	f009 f862 	bl	8015400 <snprintf>
	return pdFALSE;
 800c33c:	e7f0      	b.n	800c320 <SampleSensorCommand+0x88>
			if(SampleTempCToString((char* )pcWriteBuffer,xWriteBufferLen) != H0BR4_OK)
 800c33e:	0031      	movs	r1, r6
 800c340:	0028      	movs	r0, r5
 800c342:	f7ff fb2f 	bl	800b9a4 <SampleTempCToString>
 800c346:	2800      	cmp	r0, #0
 800c348:	d0ea      	beq.n	800c320 <SampleSensorCommand+0x88>
 800c34a:	e7ca      	b.n	800c2e2 <SampleSensorCommand+0x4a>
 800c34c:	0801df28 	.word	0x0801df28
 800c350:	0801df30 	.word	0x0801df30
 800c354:	0801df50 	.word	0x0801df50
 800c358:	0801df14 	.word	0x0801df14

0800c35c <SampleAccGToPort>:
Module_Status SampleAccGToPort(uint8_t port,uint8_t module){
 800c35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c35e:	b085      	sub	sp, #20
	return SampleAccG(buffer,buffer + 1,buffer + 2);
 800c360:	ac01      	add	r4, sp, #4
Module_Status SampleAccGToPort(uint8_t port,uint8_t module){
 800c362:	0007      	movs	r7, r0
 800c364:	000e      	movs	r6, r1
	return SampleAccG(buffer,buffer + 1,buffer + 2);
 800c366:	0020      	movs	r0, r4
 800c368:	aa03      	add	r2, sp, #12
 800c36a:	a902      	add	r1, sp, #8
 800c36c:	f7ff ff3a 	bl	800c1e4 <SampleAccG>
 800c370:	1e05      	subs	r5, r0, #0
	if((status =SampleAccGToBuf(buffer)) != H0BR4_OK)
 800c372:	d122      	bne.n	800c3ba <SampleAccGToPort+0x5e>
	if(module == myID){
 800c374:	4b22      	ldr	r3, [pc, #136]	; (800c400 <SampleAccGToPort+0xa4>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	42b3      	cmp	r3, r6
 800c37a:	d021      	beq.n	800c3c0 <SampleAccGToPort+0x64>
		messageParams[0] =port;
 800c37c:	4b21      	ldr	r3, [pc, #132]	; (800c404 <SampleAccGToPort+0xa8>)
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c37e:	78e2      	ldrb	r2, [r4, #3]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800c380:	2123      	movs	r1, #35	; 0x23
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c382:	705a      	strb	r2, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c384:	78a2      	ldrb	r2, [r4, #2]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800c386:	0030      	movs	r0, r6
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c388:	709a      	strb	r2, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c38a:	7862      	ldrb	r2, [r4, #1]
		messageParams[0] =port;
 800c38c:	701f      	strb	r7, [r3, #0]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c38e:	70da      	strb	r2, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c390:	7822      	ldrb	r2, [r4, #0]
 800c392:	711a      	strb	r2, [r3, #4]
		messageParams[5] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800c394:	79e2      	ldrb	r2, [r4, #7]
 800c396:	715a      	strb	r2, [r3, #5]
		messageParams[6] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800c398:	79a2      	ldrb	r2, [r4, #6]
 800c39a:	719a      	strb	r2, [r3, #6]
		messageParams[7] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800c39c:	7962      	ldrb	r2, [r4, #5]
 800c39e:	71da      	strb	r2, [r3, #7]
		messageParams[8] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800c3a0:	7922      	ldrb	r2, [r4, #4]
 800c3a2:	721a      	strb	r2, [r3, #8]
		messageParams[9] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800c3a4:	7ae2      	ldrb	r2, [r4, #11]
 800c3a6:	725a      	strb	r2, [r3, #9]
		messageParams[10] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800c3a8:	7aa2      	ldrb	r2, [r4, #10]
 800c3aa:	729a      	strb	r2, [r3, #10]
		messageParams[11] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800c3ac:	7a62      	ldrb	r2, [r4, #9]
 800c3ae:	72da      	strb	r2, [r3, #11]
		messageParams[12] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800c3b0:	7a22      	ldrb	r2, [r4, #8]
 800c3b2:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800c3b4:	220d      	movs	r2, #13
 800c3b6:	f7fd fc6d 	bl	8009c94 <SendMessageToModule>
}
 800c3ba:	0028      	movs	r0, r5
 800c3bc:	b005      	add	sp, #20
 800c3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c3c0:	78e3      	ldrb	r3, [r4, #3]
 800c3c2:	4911      	ldr	r1, [pc, #68]	; (800c408 <SampleAccGToPort+0xac>)
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800c3c4:	220c      	movs	r2, #12
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c3c6:	700b      	strb	r3, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c3c8:	78a3      	ldrb	r3, [r4, #2]
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800c3ca:	0038      	movs	r0, r7
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c3cc:	704b      	strb	r3, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c3ce:	7863      	ldrb	r3, [r4, #1]
 800c3d0:	708b      	strb	r3, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c3d2:	7823      	ldrb	r3, [r4, #0]
 800c3d4:	70cb      	strb	r3, [r1, #3]
		temp[4] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800c3d6:	79e3      	ldrb	r3, [r4, #7]
 800c3d8:	710b      	strb	r3, [r1, #4]
		temp[5] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800c3da:	79a3      	ldrb	r3, [r4, #6]
 800c3dc:	714b      	strb	r3, [r1, #5]
		temp[6] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800c3de:	7963      	ldrb	r3, [r4, #5]
 800c3e0:	718b      	strb	r3, [r1, #6]
		temp[7] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800c3e2:	7923      	ldrb	r3, [r4, #4]
 800c3e4:	71cb      	strb	r3, [r1, #7]
		temp[8] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800c3e6:	7ae3      	ldrb	r3, [r4, #11]
 800c3e8:	720b      	strb	r3, [r1, #8]
		temp[9] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800c3ea:	7aa3      	ldrb	r3, [r4, #10]
 800c3ec:	724b      	strb	r3, [r1, #9]
		temp[10] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800c3ee:	7a63      	ldrb	r3, [r4, #9]
 800c3f0:	728b      	strb	r3, [r1, #10]
		temp[11] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800c3f2:	7a23      	ldrb	r3, [r4, #8]
 800c3f4:	72cb      	strb	r3, [r1, #11]
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800c3f6:	230a      	movs	r3, #10
 800c3f8:	f002 f95c 	bl	800e6b4 <writePxITMutex>
 800c3fc:	e7dd      	b.n	800c3ba <SampleAccGToPort+0x5e>
 800c3fe:	46c0      	nop			; (mov r8, r8)
 800c400:	2000110e 	.word	0x2000110e
 800c404:	20000fd0 	.word	0x20000fd0
 800c408:	2000186c 	.word	0x2000186c

0800c40c <Module_MessagingTask>:
Module_Status Module_MessagingTask(uint16_t code,uint8_t port,uint8_t src,uint8_t dst,uint8_t shift){
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	ab06      	add	r3, sp, #24
 800c412:	781c      	ldrb	r4, [r3, #0]
 800c414:	4b7c      	ldr	r3, [pc, #496]	; (800c608 <Module_MessagingTask+0x1fc>)
 800c416:	469c      	mov	ip, r3
 800c418:	4460      	add	r0, ip
 800c41a:	b280      	uxth	r0, r0
 800c41c:	280c      	cmp	r0, #12
 800c41e:	d803      	bhi.n	800c428 <Module_MessagingTask+0x1c>
 800c420:	4b7a      	ldr	r3, [pc, #488]	; (800c60c <Module_MessagingTask+0x200>)
 800c422:	0080      	lsls	r0, r0, #2
 800c424:	581b      	ldr	r3, [r3, r0]
 800c426:	469f      	mov	pc, r3
	Module_Status result =H0BR4_OK;
 800c428:	2001      	movs	r0, #1
}
 800c42a:	b002      	add	sp, #8
 800c42c:	bd70      	pop	{r4, r5, r6, pc}
			SampleGyroDPSToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift]);
 800c42e:	3901      	subs	r1, #1
 800c430:	00cb      	lsls	r3, r1, #3
 800c432:	1a59      	subs	r1, r3, r1
 800c434:	4b76      	ldr	r3, [pc, #472]	; (800c610 <Module_MessagingTask+0x204>)
 800c436:	00c9      	lsls	r1, r1, #3
 800c438:	185b      	adds	r3, r3, r1
 800c43a:	5d19      	ldrb	r1, [r3, r4]
 800c43c:	191c      	adds	r4, r3, r4
 800c43e:	7860      	ldrb	r0, [r4, #1]
 800c440:	f7ff fe78 	bl	800c134 <SampleGyroDPSToPort>
	Module_Status result =H0BR4_OK;
 800c444:	2000      	movs	r0, #0
			break;
 800c446:	e7f0      	b.n	800c42a <Module_MessagingTask+0x1e>
			SampleAccGToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift]);
 800c448:	3901      	subs	r1, #1
 800c44a:	00cb      	lsls	r3, r1, #3
 800c44c:	1a59      	subs	r1, r3, r1
 800c44e:	4b70      	ldr	r3, [pc, #448]	; (800c610 <Module_MessagingTask+0x204>)
 800c450:	00c9      	lsls	r1, r1, #3
 800c452:	185b      	adds	r3, r3, r1
 800c454:	5d19      	ldrb	r1, [r3, r4]
 800c456:	191c      	adds	r4, r3, r4
 800c458:	7860      	ldrb	r0, [r4, #1]
 800c45a:	f7ff ff7f 	bl	800c35c <SampleAccGToPort>
	Module_Status result =H0BR4_OK;
 800c45e:	2000      	movs	r0, #0
			break;
 800c460:	e7e3      	b.n	800c42a <Module_MessagingTask+0x1e>
			SampleMagMGaussToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift]);
 800c462:	3901      	subs	r1, #1
 800c464:	00cb      	lsls	r3, r1, #3
 800c466:	1a59      	subs	r1, r3, r1
 800c468:	4b69      	ldr	r3, [pc, #420]	; (800c610 <Module_MessagingTask+0x204>)
 800c46a:	00c9      	lsls	r1, r1, #3
 800c46c:	185b      	adds	r3, r3, r1
 800c46e:	5d19      	ldrb	r1, [r3, r4]
 800c470:	191c      	adds	r4, r3, r4
 800c472:	7860      	ldrb	r0, [r4, #1]
 800c474:	f7ff fa1a 	bl	800b8ac <SampleMagMGaussToPort>
	Module_Status result =H0BR4_OK;
 800c478:	2000      	movs	r0, #0
			break;
 800c47a:	e7d6      	b.n	800c42a <Module_MessagingTask+0x1e>
			SampleTempCToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift]);
 800c47c:	3901      	subs	r1, #1
 800c47e:	00cb      	lsls	r3, r1, #3
 800c480:	1a59      	subs	r1, r3, r1
 800c482:	4b63      	ldr	r3, [pc, #396]	; (800c610 <Module_MessagingTask+0x204>)
 800c484:	00c9      	lsls	r1, r1, #3
 800c486:	185b      	adds	r3, r3, r1
 800c488:	5d19      	ldrb	r1, [r3, r4]
 800c48a:	191c      	adds	r4, r3, r4
 800c48c:	7860      	ldrb	r0, [r4, #1]
 800c48e:	f7ff faa1 	bl	800b9d4 <SampleTempCToPort>
	Module_Status result =H0BR4_OK;
 800c492:	2000      	movs	r0, #0
			break;
 800c494:	e7c9      	b.n	800c42a <Module_MessagingTask+0x1e>
			period =((uint32_t )cMessage[port - 1][5 + shift] << 24) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + cMessage[port - 1][2 + shift];
 800c496:	3901      	subs	r1, #1
 800c498:	00cb      	lsls	r3, r1, #3
 800c49a:	1a59      	subs	r1, r3, r1
 800c49c:	4b5c      	ldr	r3, [pc, #368]	; (800c610 <Module_MessagingTask+0x204>)
 800c49e:	00c9      	lsls	r1, r1, #3
 800c4a0:	1859      	adds	r1, r3, r1
 800c4a2:	190d      	adds	r5, r1, r4
 800c4a4:	796a      	ldrb	r2, [r5, #5]
 800c4a6:	792b      	ldrb	r3, [r5, #4]
 800c4a8:	0612      	lsls	r2, r2, #24
 800c4aa:	041b      	lsls	r3, r3, #16
 800c4ac:	18d2      	adds	r2, r2, r3
 800c4ae:	78ab      	ldrb	r3, [r5, #2]
 800c4b0:	18d2      	adds	r2, r2, r3
 800c4b2:	78eb      	ldrb	r3, [r5, #3]
 800c4b4:	021b      	lsls	r3, r3, #8
 800c4b6:	18d2      	adds	r2, r2, r3
			if((result =StreamGyroDPSToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift],period,timeout)) != H0BR4_OK)
 800c4b8:	1c63      	adds	r3, r4, #1
	if(period < MIN_MEMS_PERIOD_MS)
 800c4ba:	2ac7      	cmp	r2, #199	; 0xc7
 800c4bc:	d800      	bhi.n	800c4c0 <Module_MessagingTask+0xb4>
 800c4be:	e09e      	b.n	800c5fe <Module_MessagingTask+0x1f2>
			if((result =StreamGyroDPSToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift],period,timeout)) != H0BR4_OK)
 800c4c0:	5cc8      	ldrb	r0, [r1, r3]
	if(port == 0)
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	d100      	bne.n	800c4c8 <Module_MessagingTask+0xbc>
 800c4c6:	e09a      	b.n	800c5fe <Module_MessagingTask+0x1f2>
	if(port == PcPort) // Check if CLI is not enabled at that port!
 800c4c8:	4b52      	ldr	r3, [pc, #328]	; (800c614 <Module_MessagingTask+0x208>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	4283      	cmp	r3, r0
 800c4ce:	d100      	bne.n	800c4d2 <Module_MessagingTask+0xc6>
 800c4d0:	e097      	b.n	800c602 <Module_MessagingTask+0x1f6>
			timeout =((uint32_t )cMessage[port - 1][9 + shift] << 24) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + cMessage[port - 1][6 + shift];
 800c4d2:	7a6b      	ldrb	r3, [r5, #9]
 800c4d4:	7a2e      	ldrb	r6, [r5, #8]
 800c4d6:	061b      	lsls	r3, r3, #24
 800c4d8:	0436      	lsls	r6, r6, #16
 800c4da:	199b      	adds	r3, r3, r6
 800c4dc:	79ae      	ldrb	r6, [r5, #6]
 800c4de:	79ed      	ldrb	r5, [r5, #7]
 800c4e0:	5d09      	ldrb	r1, [r1, r4]
 800c4e2:	4c4d      	ldr	r4, [pc, #308]	; (800c618 <Module_MessagingTask+0x20c>)
 800c4e4:	199b      	adds	r3, r3, r6
 800c4e6:	022d      	lsls	r5, r5, #8
 800c4e8:	195b      	adds	r3, r3, r5
 800c4ea:	9400      	str	r4, [sp, #0]
 800c4ec:	f7ff fb38 	bl	800bb60 <StreamMemsToPort.part.0>
 800c4f0:	e79b      	b.n	800c42a <Module_MessagingTask+0x1e>
			period =((uint32_t )cMessage[port - 1][5 + shift] << 24) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + cMessage[port - 1][2 + shift];
 800c4f2:	3901      	subs	r1, #1
 800c4f4:	00cb      	lsls	r3, r1, #3
 800c4f6:	1a59      	subs	r1, r3, r1
 800c4f8:	4b45      	ldr	r3, [pc, #276]	; (800c610 <Module_MessagingTask+0x204>)
 800c4fa:	00c9      	lsls	r1, r1, #3
 800c4fc:	1859      	adds	r1, r3, r1
 800c4fe:	190d      	adds	r5, r1, r4
 800c500:	796a      	ldrb	r2, [r5, #5]
 800c502:	792b      	ldrb	r3, [r5, #4]
 800c504:	0612      	lsls	r2, r2, #24
 800c506:	041b      	lsls	r3, r3, #16
 800c508:	18d2      	adds	r2, r2, r3
 800c50a:	78ab      	ldrb	r3, [r5, #2]
 800c50c:	18d2      	adds	r2, r2, r3
 800c50e:	78eb      	ldrb	r3, [r5, #3]
 800c510:	021b      	lsls	r3, r3, #8
 800c512:	18d2      	adds	r2, r2, r3
			if((result =StreamAccGToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift],period,timeout)) != H0BR4_OK)
 800c514:	1c63      	adds	r3, r4, #1
	if(period < MIN_MEMS_PERIOD_MS)
 800c516:	2ac7      	cmp	r2, #199	; 0xc7
 800c518:	d971      	bls.n	800c5fe <Module_MessagingTask+0x1f2>
			if((result =StreamAccGToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift],period,timeout)) != H0BR4_OK)
 800c51a:	5cc8      	ldrb	r0, [r1, r3]
	if(port == 0)
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d06e      	beq.n	800c5fe <Module_MessagingTask+0x1f2>
	if(port == PcPort) // Check if CLI is not enabled at that port!
 800c520:	4b3c      	ldr	r3, [pc, #240]	; (800c614 <Module_MessagingTask+0x208>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	4283      	cmp	r3, r0
 800c526:	d06c      	beq.n	800c602 <Module_MessagingTask+0x1f6>
			timeout =((uint32_t )cMessage[port - 1][9 + shift] << 24) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + cMessage[port - 1][6 + shift];
 800c528:	7a6b      	ldrb	r3, [r5, #9]
 800c52a:	7a2e      	ldrb	r6, [r5, #8]
 800c52c:	061b      	lsls	r3, r3, #24
 800c52e:	0436      	lsls	r6, r6, #16
 800c530:	199b      	adds	r3, r3, r6
 800c532:	79ae      	ldrb	r6, [r5, #6]
 800c534:	79ed      	ldrb	r5, [r5, #7]
 800c536:	5d09      	ldrb	r1, [r1, r4]
 800c538:	4c38      	ldr	r4, [pc, #224]	; (800c61c <Module_MessagingTask+0x210>)
 800c53a:	199b      	adds	r3, r3, r6
 800c53c:	022d      	lsls	r5, r5, #8
 800c53e:	195b      	adds	r3, r3, r5
 800c540:	9400      	str	r4, [sp, #0]
 800c542:	f7ff fb0d 	bl	800bb60 <StreamMemsToPort.part.0>
 800c546:	e770      	b.n	800c42a <Module_MessagingTask+0x1e>
			period =((uint32_t )cMessage[port - 1][5 + shift] << 24) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + cMessage[port - 1][2 + shift];
 800c548:	3901      	subs	r1, #1
 800c54a:	00cb      	lsls	r3, r1, #3
 800c54c:	1a59      	subs	r1, r3, r1
 800c54e:	4b30      	ldr	r3, [pc, #192]	; (800c610 <Module_MessagingTask+0x204>)
 800c550:	00c9      	lsls	r1, r1, #3
 800c552:	1859      	adds	r1, r3, r1
 800c554:	190d      	adds	r5, r1, r4
 800c556:	796a      	ldrb	r2, [r5, #5]
 800c558:	792b      	ldrb	r3, [r5, #4]
 800c55a:	0612      	lsls	r2, r2, #24
 800c55c:	041b      	lsls	r3, r3, #16
 800c55e:	18d2      	adds	r2, r2, r3
 800c560:	78ab      	ldrb	r3, [r5, #2]
 800c562:	18d2      	adds	r2, r2, r3
 800c564:	78eb      	ldrb	r3, [r5, #3]
 800c566:	021b      	lsls	r3, r3, #8
 800c568:	18d2      	adds	r2, r2, r3
			if((result =StreamTempCToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift],period,timeout)) != H0BR4_OK)
 800c56a:	1c63      	adds	r3, r4, #1
	if(period < MIN_MEMS_PERIOD_MS)
 800c56c:	2ac7      	cmp	r2, #199	; 0xc7
 800c56e:	d946      	bls.n	800c5fe <Module_MessagingTask+0x1f2>
			if((result =StreamTempCToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift],period,timeout)) != H0BR4_OK)
 800c570:	5cc8      	ldrb	r0, [r1, r3]
	if(port == 0)
 800c572:	2800      	cmp	r0, #0
 800c574:	d043      	beq.n	800c5fe <Module_MessagingTask+0x1f2>
	if(port == PcPort) // Check if CLI is not enabled at that port!
 800c576:	4b27      	ldr	r3, [pc, #156]	; (800c614 <Module_MessagingTask+0x208>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	4283      	cmp	r3, r0
 800c57c:	d041      	beq.n	800c602 <Module_MessagingTask+0x1f6>
			timeout =((uint32_t )cMessage[port - 1][9 + shift] << 24) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + cMessage[port - 1][6 + shift];
 800c57e:	7a6b      	ldrb	r3, [r5, #9]
 800c580:	7a2e      	ldrb	r6, [r5, #8]
 800c582:	061b      	lsls	r3, r3, #24
 800c584:	0436      	lsls	r6, r6, #16
 800c586:	199b      	adds	r3, r3, r6
 800c588:	79ae      	ldrb	r6, [r5, #6]
 800c58a:	79ed      	ldrb	r5, [r5, #7]
 800c58c:	5d09      	ldrb	r1, [r1, r4]
 800c58e:	4c24      	ldr	r4, [pc, #144]	; (800c620 <Module_MessagingTask+0x214>)
 800c590:	199b      	adds	r3, r3, r6
 800c592:	022d      	lsls	r5, r5, #8
 800c594:	195b      	adds	r3, r3, r5
 800c596:	9400      	str	r4, [sp, #0]
 800c598:	f7ff fae2 	bl	800bb60 <StreamMemsToPort.part.0>
 800c59c:	e745      	b.n	800c42a <Module_MessagingTask+0x1e>
	stopStream = true;
 800c59e:	2201      	movs	r2, #1
 800c5a0:	4b20      	ldr	r3, [pc, #128]	; (800c624 <Module_MessagingTask+0x218>)
			result =H0BR4_OK;
 800c5a2:	2000      	movs	r0, #0
	stopStream = true;
 800c5a4:	701a      	strb	r2, [r3, #0]
			break;
 800c5a6:	e740      	b.n	800c42a <Module_MessagingTask+0x1e>
			period =((uint32_t )cMessage[port - 1][5 + shift] << 24) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + cMessage[port - 1][2 + shift];
 800c5a8:	3901      	subs	r1, #1
 800c5aa:	00cb      	lsls	r3, r1, #3
 800c5ac:	1a59      	subs	r1, r3, r1
 800c5ae:	4b18      	ldr	r3, [pc, #96]	; (800c610 <Module_MessagingTask+0x204>)
 800c5b0:	00c9      	lsls	r1, r1, #3
 800c5b2:	1859      	adds	r1, r3, r1
 800c5b4:	190d      	adds	r5, r1, r4
 800c5b6:	796a      	ldrb	r2, [r5, #5]
 800c5b8:	792b      	ldrb	r3, [r5, #4]
 800c5ba:	0612      	lsls	r2, r2, #24
 800c5bc:	041b      	lsls	r3, r3, #16
 800c5be:	18d2      	adds	r2, r2, r3
 800c5c0:	78ab      	ldrb	r3, [r5, #2]
 800c5c2:	18d2      	adds	r2, r2, r3
 800c5c4:	78eb      	ldrb	r3, [r5, #3]
 800c5c6:	021b      	lsls	r3, r3, #8
 800c5c8:	18d2      	adds	r2, r2, r3
			if((result =StreamMagMGaussToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift],period,timeout)) != H0BR4_OK)
 800c5ca:	1c63      	adds	r3, r4, #1
	if(period < MIN_MEMS_PERIOD_MS)
 800c5cc:	2ac7      	cmp	r2, #199	; 0xc7
 800c5ce:	d916      	bls.n	800c5fe <Module_MessagingTask+0x1f2>
			if((result =StreamMagMGaussToPort(cMessage[port - 1][1 + shift],cMessage[port - 1][shift],period,timeout)) != H0BR4_OK)
 800c5d0:	5cc8      	ldrb	r0, [r1, r3]
	if(port == 0)
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d013      	beq.n	800c5fe <Module_MessagingTask+0x1f2>
	if(port == PcPort) // Check if CLI is not enabled at that port!
 800c5d6:	4b0f      	ldr	r3, [pc, #60]	; (800c614 <Module_MessagingTask+0x208>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	4283      	cmp	r3, r0
 800c5dc:	d011      	beq.n	800c602 <Module_MessagingTask+0x1f6>
			timeout =((uint32_t )cMessage[port - 1][9 + shift] << 24) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + cMessage[port - 1][6 + shift];
 800c5de:	7a6b      	ldrb	r3, [r5, #9]
 800c5e0:	7a2e      	ldrb	r6, [r5, #8]
 800c5e2:	061b      	lsls	r3, r3, #24
 800c5e4:	0436      	lsls	r6, r6, #16
 800c5e6:	199b      	adds	r3, r3, r6
 800c5e8:	79ae      	ldrb	r6, [r5, #6]
 800c5ea:	79ed      	ldrb	r5, [r5, #7]
 800c5ec:	5d09      	ldrb	r1, [r1, r4]
 800c5ee:	4c0e      	ldr	r4, [pc, #56]	; (800c628 <Module_MessagingTask+0x21c>)
 800c5f0:	199b      	adds	r3, r3, r6
 800c5f2:	022d      	lsls	r5, r5, #8
 800c5f4:	195b      	adds	r3, r3, r5
 800c5f6:	9400      	str	r4, [sp, #0]
 800c5f8:	f7ff fab2 	bl	800bb60 <StreamMemsToPort.part.0>
 800c5fc:	e715      	b.n	800c42a <Module_MessagingTask+0x1e>
		return H0BR4_ERR_WrongParams;
 800c5fe:	200b      	movs	r0, #11
 800c600:	e713      	b.n	800c42a <Module_MessagingTask+0x1e>
		return H0BR4_ERR_BUSY;
 800c602:	2007      	movs	r0, #7
 800c604:	e711      	b.n	800c42a <Module_MessagingTask+0x1e>
 800c606:	46c0      	nop			; (mov r8, r8)
 800c608:	fffffdda 	.word	0xfffffdda
 800c60c:	0801dfa8 	.word	0x0801dfa8
 800c610:	20000da0 	.word	0x20000da0
 800c614:	20000b0f 	.word	0x20000b0f
 800c618:	0800c135 	.word	0x0800c135
 800c61c:	0800c35d 	.word	0x0800c35d
 800c620:	0800b9d5 	.word	0x0800b9d5
 800c624:	2000185c 	.word	0x2000185c
 800c628:	0800b8ad 	.word	0x0800b8ad

0800c62c <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
 */
uint8_t SaveToRO(void){
 800c62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c62e:	46de      	mov	lr, fp
 800c630:	4657      	mov	r7, sl
 800c632:	464e      	mov	r6, r9
 800c634:	4645      	mov	r5, r8
	BOS_Status result =BOS_OK;
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t add =2, temp =0;
	uint8_t snipBuffer[sizeof(snippet_t) + 1] ={0};
 800c636:	2300      	movs	r3, #0
uint8_t SaveToRO(void){
 800c638:	b5e0      	push	{r5, r6, r7, lr}
 800c63a:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] ={0};
 800c63c:	2211      	movs	r2, #17
 800c63e:	2100      	movs	r1, #0
 800c640:	a803      	add	r0, sp, #12
 800c642:	9302      	str	r3, [sp, #8]
 800c644:	f008 fce7 	bl	8015016 <memset>
	
	HAL_FLASH_Unlock();
 800c648:	f005 ff16 	bl	8012478 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800c64c:	486e      	ldr	r0, [pc, #440]	; (800c808 <SaveToRO+0x1dc>)
 800c64e:	f006 f83f 	bl	80126d0 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c652:	486e      	ldr	r0, [pc, #440]	; (800c80c <SaveToRO+0x1e0>)
 800c654:	f005 ff2c 	bl	80124b0 <FLASH_WaitForLastOperation>
 800c658:	4683      	mov	fp, r0
	if(FlashStatus != HAL_OK){
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d000      	beq.n	800c660 <SaveToRO+0x34>
 800c65e:	e086      	b.n	800c76e <SaveToRO+0x142>
		return pFlash.ErrorCode;
	}
	else{
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c660:	2202      	movs	r2, #2
 800c662:	4c6b      	ldr	r4, [pc, #428]	; (800c810 <SaveToRO+0x1e4>)
 800c664:	6923      	ldr	r3, [r4, #16]
 800c666:	4393      	bics	r3, r2
 800c668:	6123      	str	r3, [r4, #16]
	}
	
	/* Save number of modules and myID */
	if(myID){
 800c66a:	4b6a      	ldr	r3, [pc, #424]	; (800c814 <SaveToRO+0x1e8>)
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d16e      	bne.n	800c750 <SaveToRO+0x124>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800c672:	4b69      	ldr	r3, [pc, #420]	; (800c818 <SaveToRO+0x1ec>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d067      	beq.n	800c74a <SaveToRO+0x11e>
 800c67a:	4b68      	ldr	r3, [pc, #416]	; (800c81c <SaveToRO+0x1f0>)
 800c67c:	2600      	movs	r6, #0
 800c67e:	4699      	mov	r9, r3
				if(FlashStatus != HAL_OK){
					return pFlash.ErrorCode;
				}
				else{
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c680:	465b      	mov	r3, fp
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800c682:	4d67      	ldr	r5, [pc, #412]	; (800c820 <SaveToRO+0x1f4>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c684:	4f62      	ldr	r7, [pc, #392]	; (800c810 <SaveToRO+0x1e4>)
 800c686:	9301      	str	r3, [sp, #4]
 800c688:	e005      	b.n	800c696 <SaveToRO+0x6a>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800c68a:	4b63      	ldr	r3, [pc, #396]	; (800c818 <SaveToRO+0x1ec>)
 800c68c:	3601      	adds	r6, #1
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	b2f6      	uxtb	r6, r6
 800c692:	42b3      	cmp	r3, r6
 800c694:	d957      	bls.n	800c746 <SaveToRO+0x11a>
		if(snippets[s].cond.conditionType){
 800c696:	00b3      	lsls	r3, r6, #2
 800c698:	1999      	adds	r1, r3, r6
 800c69a:	4698      	mov	r8, r3
 800c69c:	464b      	mov	r3, r9
 800c69e:	0089      	lsls	r1, r1, #2
 800c6a0:	5c5b      	ldrb	r3, [r3, r1]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d0f1      	beq.n	800c68a <SaveToRO+0x5e>
			snipBuffer[0] =0xFE;		// A marker to separate Snippets
 800c6a6:	23fe      	movs	r3, #254	; 0xfe
 800c6a8:	aa02      	add	r2, sp, #8
 800c6aa:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t* )&snipBuffer[1],(uint8_t* )&snippets[s],sizeof(snippet_t));
 800c6ac:	ab02      	add	r3, sp, #8
 800c6ae:	1c58      	adds	r0, r3, #1
 800c6b0:	2214      	movs	r2, #20
 800c6b2:	4449      	add	r1, r9
 800c6b4:	f008 fca6 	bl	8015004 <memcpy>
			for(uint8_t j =0; j < (sizeof(snippet_t) / 2); j++){
 800c6b8:	2314      	movs	r3, #20
 800c6ba:	469b      	mov	fp, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,currentAdd,*(uint16_t* )&snipBuffer[j * 2]);
 800c6bc:	ab02      	add	r3, sp, #8
 800c6be:	44ab      	add	fp, r5
 800c6c0:	1b5b      	subs	r3, r3, r5
 800c6c2:	46b2      	mov	sl, r6
 800c6c4:	001c      	movs	r4, r3
 800c6c6:	465e      	mov	r6, fp
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	0029      	movs	r1, r5
 800c6cc:	2001      	movs	r0, #1
 800c6ce:	5b62      	ldrh	r2, [r4, r5]
 800c6d0:	f005 ff2e 	bl	8012530 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c6d4:	484d      	ldr	r0, [pc, #308]	; (800c80c <SaveToRO+0x1e0>)
 800c6d6:	f005 feeb 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d147      	bne.n	800c76e <SaveToRO+0x142>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c6de:	2201      	movs	r2, #1
 800c6e0:	693b      	ldr	r3, [r7, #16]
					currentAdd +=2;
 800c6e2:	3502      	adds	r5, #2
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c6e4:	4393      	bics	r3, r2
 800c6e6:	613b      	str	r3, [r7, #16]
			for(uint8_t j =0; j < (sizeof(snippet_t) / 2); j++){
 800c6e8:	42ae      	cmp	r6, r5
 800c6ea:	d1ed      	bne.n	800c6c8 <SaveToRO+0x9c>
 800c6ec:	4656      	mov	r6, sl
				}
			}
			// Copy the snippet commands buffer. Always an even number. Note the string termination char might be skipped
			for(uint8_t j =0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++){
 800c6ee:	4643      	mov	r3, r8
 800c6f0:	199b      	adds	r3, r3, r6
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	444b      	add	r3, r9
 800c6f6:	0004      	movs	r4, r0
 800c6f8:	4698      	mov	r8, r3
 800c6fa:	002e      	movs	r6, r5
 800c6fc:	e012      	b.n	800c724 <SaveToRO+0xf8>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,currentAdd,*(uint16_t* )(snippets[s].cmd + j * 2));
 800c6fe:	0063      	lsls	r3, r4, #1
 800c700:	5aea      	ldrh	r2, [r5, r3]
 800c702:	0031      	movs	r1, r6
 800c704:	2300      	movs	r3, #0
 800c706:	2001      	movs	r0, #1
 800c708:	f005 ff12 	bl	8012530 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c70c:	483f      	ldr	r0, [pc, #252]	; (800c80c <SaveToRO+0x1e0>)
 800c70e:	f005 fecf 	bl	80124b0 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c712:	2800      	cmp	r0, #0
 800c714:	d12b      	bne.n	800c76e <SaveToRO+0x142>
					return pFlash.ErrorCode;
				}
				else{
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c716:	2201      	movs	r2, #1
 800c718:	693b      	ldr	r3, [r7, #16]
			for(uint8_t j =0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++){
 800c71a:	3401      	adds	r4, #1
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c71c:	4393      	bics	r3, r2
 800c71e:	613b      	str	r3, [r7, #16]
					currentAdd +=2;
 800c720:	3602      	adds	r6, #2
			for(uint8_t j =0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++){
 800c722:	b2e4      	uxtb	r4, r4
 800c724:	4643      	mov	r3, r8
 800c726:	68dd      	ldr	r5, [r3, #12]
 800c728:	0028      	movs	r0, r5
 800c72a:	f7f3 fcf5 	bl	8000118 <strlen>
 800c72e:	3001      	adds	r0, #1
 800c730:	0840      	lsrs	r0, r0, #1
 800c732:	4284      	cmp	r4, r0
 800c734:	d3e3      	bcc.n	800c6fe <SaveToRO+0xd2>
 800c736:	0035      	movs	r5, r6
 800c738:	4656      	mov	r6, sl
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800c73a:	4b37      	ldr	r3, [pc, #220]	; (800c818 <SaveToRO+0x1ec>)
 800c73c:	3601      	adds	r6, #1
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	b2f6      	uxtb	r6, r6
 800c742:	42b3      	cmp	r3, r6
 800c744:	d8a7      	bhi.n	800c696 <SaveToRO+0x6a>
 800c746:	9b01      	ldr	r3, [sp, #4]
 800c748:	469b      	mov	fp, r3
				}
			}
		}
	}
	
	HAL_FLASH_Lock();
 800c74a:	f005 fea7 	bl	801249c <HAL_FLASH_Lock>
	
	return result;
 800c74e:	e012      	b.n	800c776 <SaveToRO+0x14a>
		temp =(uint16_t )(N << 8) + myID;
 800c750:	4a34      	ldr	r2, [pc, #208]	; (800c824 <SaveToRO+0x1f8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,RO_START_ADDRESS,temp);
 800c752:	2001      	movs	r0, #1
		temp =(uint16_t )(N << 8) + myID;
 800c754:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,RO_START_ADDRESS,temp);
 800c756:	492c      	ldr	r1, [pc, #176]	; (800c808 <SaveToRO+0x1dc>)
		temp =(uint16_t )(N << 8) + myID;
 800c758:	0212      	lsls	r2, r2, #8
 800c75a:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,RO_START_ADDRESS,temp);
 800c75c:	b292      	uxth	r2, r2
 800c75e:	2300      	movs	r3, #0
 800c760:	f005 fee6 	bl	8012530 <HAL_FLASH_Program>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c764:	4829      	ldr	r0, [pc, #164]	; (800c80c <SaveToRO+0x1e0>)
 800c766:	f005 fea3 	bl	80124b0 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d00b      	beq.n	800c786 <SaveToRO+0x15a>
					return pFlash.ErrorCode;
 800c76e:	4b2e      	ldr	r3, [pc, #184]	; (800c828 <SaveToRO+0x1fc>)
 800c770:	69d8      	ldr	r0, [r3, #28]
 800c772:	b2c3      	uxtb	r3, r0
 800c774:	469b      	mov	fp, r3
}
 800c776:	4658      	mov	r0, fp
 800c778:	b009      	add	sp, #36	; 0x24
 800c77a:	bcf0      	pop	{r4, r5, r6, r7}
 800c77c:	46bb      	mov	fp, r7
 800c77e:	46b2      	mov	sl, r6
 800c780:	46a9      	mov	r9, r5
 800c782:	46a0      	mov	r8, r4
 800c784:	bdf0      	pop	{r4, r5, r6, r7, pc}
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c786:	2201      	movs	r2, #1
 800c788:	6923      	ldr	r3, [r4, #16]
 800c78a:	4393      	bics	r3, r2
 800c78c:	6123      	str	r3, [r4, #16]
		for(uint8_t i =1; i <= N; i++){
 800c78e:	4b25      	ldr	r3, [pc, #148]	; (800c824 <SaveToRO+0x1f8>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d100      	bne.n	800c798 <SaveToRO+0x16c>
 800c796:	e76c      	b.n	800c672 <SaveToRO+0x46>
 800c798:	2301      	movs	r3, #1
 800c79a:	469a      	mov	sl, r3
 800c79c:	4b23      	ldr	r3, [pc, #140]	; (800c82c <SaveToRO+0x200>)
	uint16_t add =2, temp =0;
 800c79e:	2602      	movs	r6, #2
 800c7a0:	4698      	mov	r8, r3
						CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c7a2:	46a1      	mov	r9, r4
 800c7a4:	4653      	mov	r3, sl
 800c7a6:	1e5d      	subs	r5, r3, #1
 800c7a8:	2316      	movs	r3, #22
 800c7aa:	4647      	mov	r7, r8
 800c7ac:	435d      	muls	r5, r3
 800c7ae:	4643      	mov	r3, r8
 800c7b0:	3716      	adds	r7, #22
 800c7b2:	195c      	adds	r4, r3, r5
 800c7b4:	197f      	adds	r7, r7, r5
 800c7b6:	e002      	b.n	800c7be <SaveToRO+0x192>
			for(uint8_t j =0; j <= MaxNumOfPorts; j++){
 800c7b8:	3402      	adds	r4, #2
 800c7ba:	42bc      	cmp	r4, r7
 800c7bc:	d01a      	beq.n	800c7f4 <SaveToRO+0x1c8>
				if(array[i - 1][0]){
 800c7be:	4643      	mov	r3, r8
 800c7c0:	5b5b      	ldrh	r3, [r3, r5]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d0f8      	beq.n	800c7b8 <SaveToRO+0x18c>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,RO_START_ADDRESS + add,array[i - 1][j]);
 800c7c6:	4b10      	ldr	r3, [pc, #64]	; (800c808 <SaveToRO+0x1dc>)
 800c7c8:	2001      	movs	r0, #1
 800c7ca:	18f1      	adds	r1, r6, r3
 800c7cc:	8822      	ldrh	r2, [r4, #0]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	f005 feae 	bl	8012530 <HAL_FLASH_Program>
					add +=2;
 800c7d4:	3602      	adds	r6, #2
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c7d6:	480d      	ldr	r0, [pc, #52]	; (800c80c <SaveToRO+0x1e0>)
					add +=2;
 800c7d8:	b2b6      	uxth	r6, r6
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c7da:	f005 fe69 	bl	80124b0 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d1c5      	bne.n	800c76e <SaveToRO+0x142>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c7e2:	464b      	mov	r3, r9
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	3402      	adds	r4, #2
 800c7ea:	4393      	bics	r3, r2
 800c7ec:	464a      	mov	r2, r9
 800c7ee:	6113      	str	r3, [r2, #16]
			for(uint8_t j =0; j <= MaxNumOfPorts; j++){
 800c7f0:	42bc      	cmp	r4, r7
 800c7f2:	d1e4      	bne.n	800c7be <SaveToRO+0x192>
		for(uint8_t i =1; i <= N; i++){
 800c7f4:	4653      	mov	r3, sl
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	469a      	mov	sl, r3
 800c7fc:	4b09      	ldr	r3, [pc, #36]	; (800c824 <SaveToRO+0x1f8>)
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	4553      	cmp	r3, sl
 800c802:	d2cf      	bcs.n	800c7a4 <SaveToRO+0x178>
 800c804:	e735      	b.n	800c672 <SaveToRO+0x46>
 800c806:	46c0      	nop			; (mov r8, r8)
 800c808:	0801d800 	.word	0x0801d800
 800c80c:	0000c350 	.word	0x0000c350
 800c810:	40022000 	.word	0x40022000
 800c814:	2000110e 	.word	0x2000110e
 800c818:	200012b7 	.word	0x200012b7
 800c81c:	20006acc 	.word	0x20006acc
 800c820:	0801dc00 	.word	0x0801dc00
 800c824:	2000001c 	.word	0x2000001c
 800c828:	20006fe0 	.word	0x20006fe0
 800c82c:	20000b10 	.word	0x20000b10

0800c830 <ClearROtopology>:
/* --- Clear array topology in SRAM and Flash RO --- 
 */
uint8_t ClearROtopology(void){
	// Clear the array 
	memset(array,0,sizeof(array));
 800c830:	228f      	movs	r2, #143	; 0x8f
uint8_t ClearROtopology(void){
 800c832:	b510      	push	{r4, lr}
	memset(array,0,sizeof(array));
 800c834:	2100      	movs	r1, #0
 800c836:	0092      	lsls	r2, r2, #2
 800c838:	4805      	ldr	r0, [pc, #20]	; (800c850 <ClearROtopology+0x20>)
 800c83a:	f008 fbec 	bl	8015016 <memset>
	N =1;
 800c83e:	2201      	movs	r2, #1
 800c840:	4b04      	ldr	r3, [pc, #16]	; (800c854 <ClearROtopology+0x24>)
 800c842:	701a      	strb	r2, [r3, #0]
	myID =0;
 800c844:	2200      	movs	r2, #0
 800c846:	4b04      	ldr	r3, [pc, #16]	; (800c858 <ClearROtopology+0x28>)
 800c848:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800c84a:	f7ff feef 	bl	800c62c <SaveToRO>
}
 800c84e:	bd10      	pop	{r4, pc}
 800c850:	20000b10 	.word	0x20000b10
 800c854:	2000001c 	.word	0x2000001c
 800c858:	2000110e 	.word	0x2000110e

0800c85c <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800c85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c85e:	46de      	mov	lr, fp
 800c860:	4657      	mov	r7, sl
 800c862:	464e      	mov	r6, r9
 800c864:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800c866:	2201      	movs	r2, #1
 800c868:	4b5f      	ldr	r3, [pc, #380]	; (800c9e8 <DMA_Init+0x18c>)
{
 800c86a:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800c86c:	6959      	ldr	r1, [r3, #20]
{
 800c86e:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800c870:	4311      	orrs	r1, r2
 800c872:	6159      	str	r1, [r3, #20]
 800c874:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800c876:	4c5d      	ldr	r4, [pc, #372]	; (800c9ec <DMA_Init+0x190>)
	__DMA1_CLK_ENABLE();
 800c878:	400a      	ands	r2, r1
 800c87a:	9200      	str	r2, [sp, #0]
 800c87c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800c87e:	2202      	movs	r2, #2
 800c880:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c882:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800c884:	4311      	orrs	r1, r2
 800c886:	6159      	str	r1, [r3, #20]
 800c888:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c88a:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800c88c:	401a      	ands	r2, r3
 800c88e:	9201      	str	r2, [sp, #4]
 800c890:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800c892:	4b57      	ldr	r3, [pc, #348]	; (800c9f0 <DMA_Init+0x194>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c894:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800c896:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c898:	2320      	movs	r3, #32
 800c89a:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c89c:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c89e:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c8a0:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c8a2:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c8a4:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c8a6:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c8a8:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c8aa:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800c8ac:	0020      	movs	r0, r4
 800c8ae:	f005 f8dd 	bl	8011a6c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c8b2:	4b50      	ldr	r3, [pc, #320]	; (800c9f4 <DMA_Init+0x198>)
	HAL_DMA_Init(hDMA);		
 800c8b4:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c8b6:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c8b8:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c8ba:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c8bc:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c8be:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c8c0:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c8c2:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c8c4:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c8c6:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800c8c8:	3038      	adds	r0, #56	; 0x38
 800c8ca:	f005 f8cf 	bl	8011a6c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c8ce:	4b4a      	ldr	r3, [pc, #296]	; (800c9f8 <DMA_Init+0x19c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c8d0:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800c8d2:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c8d4:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800c8d6:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c8d8:	50e5      	str	r5, [r4, r3]
 800c8da:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c8dc:	3304      	adds	r3, #4
 800c8de:	50e2      	str	r2, [r4, r3]
 800c8e0:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c8e6:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c8e8:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c8ea:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c8ec:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800c8ee:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c8f0:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800c8f2:	f005 f8bb 	bl	8011a6c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c8f6:	23a8      	movs	r3, #168	; 0xa8
 800c8f8:	4a40      	ldr	r2, [pc, #256]	; (800c9fc <DMA_Init+0x1a0>)
	HAL_DMA_Init(hDMA);		
 800c8fa:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c8fc:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c8fe:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c900:	3304      	adds	r3, #4
 800c902:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c904:	3304      	adds	r3, #4
 800c906:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c908:	3304      	adds	r3, #4
 800c90a:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c90c:	3304      	adds	r3, #4
 800c90e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c910:	3304      	adds	r3, #4
 800c912:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c914:	3304      	adds	r3, #4
 800c916:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c918:	3304      	adds	r3, #4
 800c91a:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800c91c:	30a8      	adds	r0, #168	; 0xa8
 800c91e:	f005 f8a5 	bl	8011a6c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c922:	23e0      	movs	r3, #224	; 0xe0
 800c924:	4a36      	ldr	r2, [pc, #216]	; (800ca00 <DMA_Init+0x1a4>)
	HAL_DMA_Init(hDMA);		
 800c926:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c928:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c92a:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c92c:	3304      	adds	r3, #4
 800c92e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c930:	3304      	adds	r3, #4
 800c932:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c934:	3304      	adds	r3, #4
 800c936:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c938:	3304      	adds	r3, #4
 800c93a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c93c:	3304      	adds	r3, #4
 800c93e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c940:	3304      	adds	r3, #4
 800c942:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c944:	3304      	adds	r3, #4
 800c946:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800c948:	30e0      	adds	r0, #224	; 0xe0
 800c94a:	f005 f88f 	bl	8011a6c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c94e:	238c      	movs	r3, #140	; 0x8c
 800c950:	4a2c      	ldr	r2, [pc, #176]	; (800ca04 <DMA_Init+0x1a8>)
 800c952:	005b      	lsls	r3, r3, #1
 800c954:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800c956:	0020      	movs	r0, r4
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c958:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c95a:	3304      	adds	r3, #4
 800c95c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c95e:	3304      	adds	r3, #4
 800c960:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c962:	3304      	adds	r3, #4
 800c964:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c966:	3304      	adds	r3, #4
 800c968:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c96a:	3304      	adds	r3, #4
 800c96c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c96e:	3304      	adds	r3, #4
 800c970:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800c972:	3019      	adds	r0, #25
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c974:	3304      	adds	r3, #4
 800c976:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800c978:	30ff      	adds	r0, #255	; 0xff
 800c97a:	f005 f877 	bl	8011a6c <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800c97e:	4c22      	ldr	r4, [pc, #136]	; (800ca08 <DMA_Init+0x1ac>)
 800c980:	4b22      	ldr	r3, [pc, #136]	; (800ca0c <DMA_Init+0x1b0>)
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_NORMAL; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
	
	HAL_DMA_Init(hDMA);		
 800c982:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c984:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c986:	2310      	movs	r3, #16
 800c988:	469b      	mov	fp, r3
 800c98a:	6063      	str	r3, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c98c:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c98e:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c990:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c992:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c994:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c996:	61e7      	str	r7, [r4, #28]
	HAL_DMA_Init(hDMA);		
 800c998:	f005 f868 	bl	8011a6c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c99c:	4b1c      	ldr	r3, [pc, #112]	; (800ca10 <DMA_Init+0x1b4>)
	HAL_DMA_Init(hDMA);		
 800c99e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c9a0:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c9a2:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c9a4:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c9a6:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c9a8:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c9aa:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c9ac:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800c9ae:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c9b0:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800c9b2:	3038      	adds	r0, #56	; 0x38
 800c9b4:	f005 f85a 	bl	8011a6c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800c9b8:	4b16      	ldr	r3, [pc, #88]	; (800ca14 <DMA_Init+0x1b8>)
	HAL_DMA_Init(hDMA);		
 800c9ba:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800c9bc:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c9be:	465b      	mov	r3, fp
 800c9c0:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c9c2:	4653      	mov	r3, sl
 800c9c4:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c9c6:	464b      	mov	r3, r9
 800c9c8:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c9ca:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c9cc:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c9ce:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c9d0:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c9d2:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800c9d4:	3070      	adds	r0, #112	; 0x70
 800c9d6:	f005 f849 	bl	8011a6c <HAL_DMA_Init>
}
 800c9da:	b003      	add	sp, #12
 800c9dc:	bcf0      	pop	{r4, r5, r6, r7}
 800c9de:	46bb      	mov	fp, r7
 800c9e0:	46b2      	mov	sl, r6
 800c9e2:	46a9      	mov	r9, r5
 800c9e4:	46a0      	mov	r8, r4
 800c9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9e8:	40021000 	.word	0x40021000
 800c9ec:	20001888 	.word	0x20001888
 800c9f0:	40020008 	.word	0x40020008
 800c9f4:	40020030 	.word	0x40020030
 800c9f8:	40020058 	.word	0x40020058
 800c9fc:	4002006c 	.word	0x4002006c
 800ca00:	4002041c 	.word	0x4002041c
 800ca04:	40020430 	.word	0x40020430
 800ca08:	200019d8 	.word	0x200019d8
 800ca0c:	4002001c 	.word	0x4002001c
 800ca10:	40020044 	.word	0x40020044
 800ca14:	40020080 	.word	0x40020080

0800ca18 <DMA_MSG_RX_CH_Init>:
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca18:	2300      	movs	r3, #0
{
 800ca1a:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca1c:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ca1e:	6083      	str	r3, [r0, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ca20:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ca22:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ca24:	3320      	adds	r3, #32
 800ca26:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ca28:	2380      	movs	r3, #128	; 0x80
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ca2a:	2280      	movs	r2, #128	; 0x80
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ca2c:	019b      	lsls	r3, r3, #6
	hDMA->Instance = ch;
 800ca2e:	6001      	str	r1, [r0, #0]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ca30:	60c2      	str	r2, [r0, #12]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ca32:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800ca34:	f005 f81a 	bl	8011a6c <HAL_DMA_Init>
}
 800ca38:	bd10      	pop	{r4, pc}
 800ca3a:	46c0      	nop			; (mov r8, r8)

0800ca3c <DMA_STREAM_CH_Init>:
/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca3c:	2300      	movs	r3, #0
{
 800ca3e:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca40:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ca42:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800ca44:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ca46:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ca48:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ca4a:	3320      	adds	r3, #32
 800ca4c:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800ca4e:	2380      	movs	r3, #128	; 0x80
 800ca50:	015b      	lsls	r3, r3, #5
	hDMA->Instance = ch;
 800ca52:	6001      	str	r1, [r0, #0]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800ca54:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ca56:	f005 f809 	bl	8011a6c <HAL_DMA_Init>
}
 800ca5a:	bd10      	pop	{r4, pc}

0800ca5c <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800ca5c:	6803      	ldr	r3, [r0, #0]
 800ca5e:	4a22      	ldr	r2, [pc, #136]	; (800cae8 <SetupDMAInterrupts+0x8c>)
{
 800ca60:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d019      	beq.n	800ca9a <SetupDMAInterrupts+0x3e>
 800ca66:	d928      	bls.n	800caba <SetupDMAInterrupts+0x5e>
 800ca68:	4a20      	ldr	r2, [pc, #128]	; (800caec <SetupDMAInterrupts+0x90>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d015      	beq.n	800ca9a <SetupDMAInterrupts+0x3e>
 800ca6e:	d91c      	bls.n	800caaa <SetupDMAInterrupts+0x4e>
 800ca70:	4a1f      	ldr	r2, [pc, #124]	; (800caf0 <SetupDMAInterrupts+0x94>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d006      	beq.n	800ca84 <SetupDMAInterrupts+0x28>
 800ca76:	d90d      	bls.n	800ca94 <SetupDMAInterrupts+0x38>
 800ca78:	4a1e      	ldr	r2, [pc, #120]	; (800caf4 <SetupDMAInterrupts+0x98>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d002      	beq.n	800ca84 <SetupDMAInterrupts+0x28>
 800ca7e:	4a1e      	ldr	r2, [pc, #120]	; (800caf8 <SetupDMAInterrupts+0x9c>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d106      	bne.n	800ca92 <SetupDMAInterrupts+0x36>
		case (uint32_t)DMA1_Channel6:
		case (uint32_t)DMA1_Channel7:
		case (uint32_t)DMA2_Channel3:
		case (uint32_t)DMA2_Channel4:
		case (uint32_t)DMA2_Channel5:
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800ca84:	200b      	movs	r0, #11
 800ca86:	2200      	movs	r2, #0
 800ca88:	f004 fe6c 	bl	8011764 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ca8c:	200b      	movs	r0, #11
 800ca8e:	f004 fe9b 	bl	80117c8 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800ca92:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ca94:	4a19      	ldr	r2, [pc, #100]	; (800cafc <SetupDMAInterrupts+0xa0>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d1fb      	bne.n	800ca92 <SetupDMAInterrupts+0x36>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	200a      	movs	r0, #10
 800ca9e:	f004 fe61 	bl	8011764 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800caa2:	200a      	movs	r0, #10
 800caa4:	f004 fe90 	bl	80117c8 <HAL_NVIC_EnableIRQ>
			break;
 800caa8:	e7f3      	b.n	800ca92 <SetupDMAInterrupts+0x36>
	switch ((uint32_t)hDMA->Instance)
 800caaa:	4a15      	ldr	r2, [pc, #84]	; (800cb00 <SetupDMAInterrupts+0xa4>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d0e9      	beq.n	800ca84 <SetupDMAInterrupts+0x28>
 800cab0:	d90e      	bls.n	800cad0 <SetupDMAInterrupts+0x74>
 800cab2:	4a14      	ldr	r2, [pc, #80]	; (800cb04 <SetupDMAInterrupts+0xa8>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d0e5      	beq.n	800ca84 <SetupDMAInterrupts+0x28>
 800cab8:	e7eb      	b.n	800ca92 <SetupDMAInterrupts+0x36>
 800caba:	4a13      	ldr	r2, [pc, #76]	; (800cb08 <SetupDMAInterrupts+0xac>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d10e      	bne.n	800cade <SetupDMAInterrupts+0x82>
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800cac0:	2200      	movs	r2, #0
 800cac2:	2009      	movs	r0, #9
 800cac4:	f004 fe4e 	bl	8011764 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800cac8:	2009      	movs	r0, #9
 800caca:	f004 fe7d 	bl	80117c8 <HAL_NVIC_EnableIRQ>
			break;
 800cace:	e7e0      	b.n	800ca92 <SetupDMAInterrupts+0x36>
	switch ((uint32_t)hDMA->Instance)
 800cad0:	4a0e      	ldr	r2, [pc, #56]	; (800cb0c <SetupDMAInterrupts+0xb0>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d0d6      	beq.n	800ca84 <SetupDMAInterrupts+0x28>
 800cad6:	4a0e      	ldr	r2, [pc, #56]	; (800cb10 <SetupDMAInterrupts+0xb4>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d0d3      	beq.n	800ca84 <SetupDMAInterrupts+0x28>
 800cadc:	e7d9      	b.n	800ca92 <SetupDMAInterrupts+0x36>
 800cade:	4a0d      	ldr	r2, [pc, #52]	; (800cb14 <SetupDMAInterrupts+0xb8>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d0da      	beq.n	800ca9a <SetupDMAInterrupts+0x3e>
 800cae4:	e7d5      	b.n	800ca92 <SetupDMAInterrupts+0x36>
 800cae6:	46c0      	nop			; (mov r8, r8)
 800cae8:	40020030 	.word	0x40020030
 800caec:	40020408 	.word	0x40020408
 800caf0:	40020430 	.word	0x40020430
 800caf4:	40020444 	.word	0x40020444
 800caf8:	40020458 	.word	0x40020458
 800cafc:	4002041c 	.word	0x4002041c
 800cb00:	4002006c 	.word	0x4002006c
 800cb04:	40020080 	.word	0x40020080
 800cb08:	40020008 	.word	0x40020008
 800cb0c:	40020044 	.word	0x40020044
 800cb10:	40020058 	.word	0x40020058
 800cb14:	4002001c 	.word	0x4002001c

0800cb18 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800cb18:	6803      	ldr	r3, [r0, #0]
 800cb1a:	4a1c      	ldr	r2, [pc, #112]	; (800cb8c <UnSetupDMAInterrupts+0x74>)
{
 800cb1c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d015      	beq.n	800cb4e <UnSetupDMAInterrupts+0x36>
 800cb22:	d920      	bls.n	800cb66 <UnSetupDMAInterrupts+0x4e>
 800cb24:	4a1a      	ldr	r2, [pc, #104]	; (800cb90 <UnSetupDMAInterrupts+0x78>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d011      	beq.n	800cb4e <UnSetupDMAInterrupts+0x36>
 800cb2a:	d914      	bls.n	800cb56 <UnSetupDMAInterrupts+0x3e>
 800cb2c:	4a19      	ldr	r2, [pc, #100]	; (800cb94 <UnSetupDMAInterrupts+0x7c>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d006      	beq.n	800cb40 <UnSetupDMAInterrupts+0x28>
 800cb32:	d909      	bls.n	800cb48 <UnSetupDMAInterrupts+0x30>
 800cb34:	4a18      	ldr	r2, [pc, #96]	; (800cb98 <UnSetupDMAInterrupts+0x80>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d002      	beq.n	800cb40 <UnSetupDMAInterrupts+0x28>
 800cb3a:	4a18      	ldr	r2, [pc, #96]	; (800cb9c <UnSetupDMAInterrupts+0x84>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d102      	bne.n	800cb46 <UnSetupDMAInterrupts+0x2e>
		case (uint32_t)DMA1_Channel6:
		case (uint32_t)DMA1_Channel7:
		case (uint32_t)DMA2_Channel3:
		case (uint32_t)DMA2_Channel4:
		case (uint32_t)DMA2_Channel5:
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800cb40:	200b      	movs	r0, #11
 800cb42:	f004 fe4b 	bl	80117dc <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cb46:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cb48:	4a15      	ldr	r2, [pc, #84]	; (800cba0 <UnSetupDMAInterrupts+0x88>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d1fb      	bne.n	800cb46 <UnSetupDMAInterrupts+0x2e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cb4e:	200a      	movs	r0, #10
 800cb50:	f004 fe44 	bl	80117dc <HAL_NVIC_DisableIRQ>
			break;
 800cb54:	e7f7      	b.n	800cb46 <UnSetupDMAInterrupts+0x2e>
	switch ((uint32_t)hDMA->Instance)
 800cb56:	4a13      	ldr	r2, [pc, #76]	; (800cba4 <UnSetupDMAInterrupts+0x8c>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d0f1      	beq.n	800cb40 <UnSetupDMAInterrupts+0x28>
 800cb5c:	d90a      	bls.n	800cb74 <UnSetupDMAInterrupts+0x5c>
 800cb5e:	4a12      	ldr	r2, [pc, #72]	; (800cba8 <UnSetupDMAInterrupts+0x90>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d0ed      	beq.n	800cb40 <UnSetupDMAInterrupts+0x28>
 800cb64:	e7ef      	b.n	800cb46 <UnSetupDMAInterrupts+0x2e>
 800cb66:	4a11      	ldr	r2, [pc, #68]	; (800cbac <UnSetupDMAInterrupts+0x94>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d10a      	bne.n	800cb82 <UnSetupDMAInterrupts+0x6a>
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800cb6c:	2009      	movs	r0, #9
 800cb6e:	f004 fe35 	bl	80117dc <HAL_NVIC_DisableIRQ>
			break;
 800cb72:	e7e8      	b.n	800cb46 <UnSetupDMAInterrupts+0x2e>
	switch ((uint32_t)hDMA->Instance)
 800cb74:	4a0e      	ldr	r2, [pc, #56]	; (800cbb0 <UnSetupDMAInterrupts+0x98>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d0e2      	beq.n	800cb40 <UnSetupDMAInterrupts+0x28>
 800cb7a:	4a0e      	ldr	r2, [pc, #56]	; (800cbb4 <UnSetupDMAInterrupts+0x9c>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d0df      	beq.n	800cb40 <UnSetupDMAInterrupts+0x28>
 800cb80:	e7e1      	b.n	800cb46 <UnSetupDMAInterrupts+0x2e>
 800cb82:	4a0d      	ldr	r2, [pc, #52]	; (800cbb8 <UnSetupDMAInterrupts+0xa0>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d0e2      	beq.n	800cb4e <UnSetupDMAInterrupts+0x36>
 800cb88:	e7dd      	b.n	800cb46 <UnSetupDMAInterrupts+0x2e>
 800cb8a:	46c0      	nop			; (mov r8, r8)
 800cb8c:	40020030 	.word	0x40020030
 800cb90:	40020408 	.word	0x40020408
 800cb94:	40020430 	.word	0x40020430
 800cb98:	40020444 	.word	0x40020444
 800cb9c:	40020458 	.word	0x40020458
 800cba0:	4002041c 	.word	0x4002041c
 800cba4:	4002006c 	.word	0x4002006c
 800cba8:	40020080 	.word	0x40020080
 800cbac:	40020008 	.word	0x40020008
 800cbb0:	40020044 	.word	0x40020044
 800cbb4:	40020058 	.word	0x40020058
 800cbb8:	4002001c 	.word	0x4002001c

0800cbbc <DMA_MSG_TX_UnSetup>:
{	
 800cbbc:	b510      	push	{r4, lr}
 800cbbe:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800cbc0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800cbc2:	f7ff ffa9 	bl	800cb18 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800cbca:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800cbcc:	6623      	str	r3, [r4, #96]	; 0x60
}
 800cbce:	bd10      	pop	{r4, pc}

0800cbd0 <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cbd0:	6803      	ldr	r3, [r0, #0]
 800cbd2:	4ac9      	ldr	r2, [pc, #804]	; (800cef8 <RemapAndLinkDMAtoUARTRx+0x328>)
{
 800cbd4:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d03d      	beq.n	800cc56 <RemapAndLinkDMAtoUARTRx+0x86>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800cbda:	4ac8      	ldr	r2, [pc, #800]	; (800cefc <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d05a      	beq.n	800cc96 <RemapAndLinkDMAtoUARTRx+0xc6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800cbe0:	4ac7      	ldr	r2, [pc, #796]	; (800cf00 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d100      	bne.n	800cbe8 <RemapAndLinkDMAtoUARTRx+0x18>
 800cbe6:	e072      	b.n	800ccce <RemapAndLinkDMAtoUARTRx+0xfe>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800cbe8:	4ac6      	ldr	r2, [pc, #792]	; (800cf04 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d100      	bne.n	800cbf0 <RemapAndLinkDMAtoUARTRx+0x20>
 800cbee:	e0c2      	b.n	800cd76 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800cbf0:	4ac5      	ldr	r2, [pc, #788]	; (800cf08 <RemapAndLinkDMAtoUARTRx+0x338>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d100      	bne.n	800cbf8 <RemapAndLinkDMAtoUARTRx+0x28>
 800cbf6:	e0ed      	b.n	800cdd4 <RemapAndLinkDMAtoUARTRx+0x204>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800cbf8:	4ac4      	ldr	r2, [pc, #784]	; (800cf0c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d100      	bne.n	800cc00 <RemapAndLinkDMAtoUARTRx+0x30>
 800cbfe:	e1a1      	b.n	800cf44 <RemapAndLinkDMAtoUARTRx+0x374>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800cc00:	4ac3      	ldr	r2, [pc, #780]	; (800cf10 <RemapAndLinkDMAtoUARTRx+0x340>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d100      	bne.n	800cc08 <RemapAndLinkDMAtoUARTRx+0x38>
 800cc06:	e1e7      	b.n	800cfd8 <RemapAndLinkDMAtoUARTRx+0x408>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800cc08:	4ac2      	ldr	r2, [pc, #776]	; (800cf14 <RemapAndLinkDMAtoUARTRx+0x344>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d15c      	bne.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
 800cc0e:	680b      	ldr	r3, [r1, #0]
 800cc10:	4ac1      	ldr	r2, [pc, #772]	; (800cf18 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d100      	bne.n	800cc18 <RemapAndLinkDMAtoUARTRx+0x48>
 800cc16:	e293      	b.n	800d140 <RemapAndLinkDMAtoUARTRx+0x570>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800cc18:	4ac0      	ldr	r2, [pc, #768]	; (800cf1c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d100      	bne.n	800cc20 <RemapAndLinkDMAtoUARTRx+0x50>
 800cc1e:	e299      	b.n	800d154 <RemapAndLinkDMAtoUARTRx+0x584>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800cc20:	4abf      	ldr	r2, [pc, #764]	; (800cf20 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d100      	bne.n	800cc28 <RemapAndLinkDMAtoUARTRx+0x58>
 800cc26:	e297      	b.n	800d158 <RemapAndLinkDMAtoUARTRx+0x588>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800cc28:	4abe      	ldr	r2, [pc, #760]	; (800cf24 <RemapAndLinkDMAtoUARTRx+0x354>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d100      	bne.n	800cc30 <RemapAndLinkDMAtoUARTRx+0x60>
 800cc2e:	e29f      	b.n	800d170 <RemapAndLinkDMAtoUARTRx+0x5a0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800cc30:	4abd      	ldr	r2, [pc, #756]	; (800cf28 <RemapAndLinkDMAtoUARTRx+0x358>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d100      	bne.n	800cc38 <RemapAndLinkDMAtoUARTRx+0x68>
 800cc36:	e2a7      	b.n	800d188 <RemapAndLinkDMAtoUARTRx+0x5b8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800cc38:	4abc      	ldr	r2, [pc, #752]	; (800cf2c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d144      	bne.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800cc3e:	4abc      	ldr	r2, [pc, #752]	; (800cf30 <RemapAndLinkDMAtoUARTRx+0x360>)
 800cc40:	23a8      	movs	r3, #168	; 0xa8
 800cc42:	4dbc      	ldr	r5, [pc, #752]	; (800cf34 <RemapAndLinkDMAtoUARTRx+0x364>)
 800cc44:	58d4      	ldr	r4, [r2, r3]
 800cc46:	402c      	ands	r4, r5
 800cc48:	50d4      	str	r4, [r2, r3]
 800cc4a:	24f0      	movs	r4, #240	; 0xf0
 800cc4c:	58d5      	ldr	r5, [r2, r3]
 800cc4e:	0124      	lsls	r4, r4, #4
 800cc50:	432c      	orrs	r4, r5
 800cc52:	50d4      	str	r4, [r2, r3]
 800cc54:	e038      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cc56:	680b      	ldr	r3, [r1, #0]
 800cc58:	4aaf      	ldr	r2, [pc, #700]	; (800cf18 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d100      	bne.n	800cc60 <RemapAndLinkDMAtoUARTRx+0x90>
 800cc5e:	e07f      	b.n	800cd60 <RemapAndLinkDMAtoUARTRx+0x190>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800cc60:	4aae      	ldr	r2, [pc, #696]	; (800cf1c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d057      	beq.n	800cd16 <RemapAndLinkDMAtoUARTRx+0x146>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800cc66:	4aae      	ldr	r2, [pc, #696]	; (800cf20 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d056      	beq.n	800cd1a <RemapAndLinkDMAtoUARTRx+0x14a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800cc6c:	4aad      	ldr	r2, [pc, #692]	; (800cf24 <RemapAndLinkDMAtoUARTRx+0x354>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d05f      	beq.n	800cd32 <RemapAndLinkDMAtoUARTRx+0x162>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800cc72:	4aad      	ldr	r2, [pc, #692]	; (800cf28 <RemapAndLinkDMAtoUARTRx+0x358>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d068      	beq.n	800cd4a <RemapAndLinkDMAtoUARTRx+0x17a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800cc78:	4aac      	ldr	r2, [pc, #688]	; (800cf2c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d124      	bne.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800cc7e:	4aac      	ldr	r2, [pc, #688]	; (800cf30 <RemapAndLinkDMAtoUARTRx+0x360>)
 800cc80:	23a8      	movs	r3, #168	; 0xa8
 800cc82:	4dac      	ldr	r5, [pc, #688]	; (800cf34 <RemapAndLinkDMAtoUARTRx+0x364>)
 800cc84:	58d4      	ldr	r4, [r2, r3]
 800cc86:	402c      	ands	r4, r5
 800cc88:	50d4      	str	r4, [r2, r3]
 800cc8a:	2480      	movs	r4, #128	; 0x80
 800cc8c:	58d5      	ldr	r5, [r2, r3]
 800cc8e:	0124      	lsls	r4, r4, #4
 800cc90:	432c      	orrs	r4, r5
 800cc92:	50d4      	str	r4, [r2, r3]
 800cc94:	e018      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800cc96:	680b      	ldr	r3, [r1, #0]
 800cc98:	4a9f      	ldr	r2, [pc, #636]	; (800cf18 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d100      	bne.n	800cca0 <RemapAndLinkDMAtoUARTRx+0xd0>
 800cc9e:	e08e      	b.n	800cdbe <RemapAndLinkDMAtoUARTRx+0x1ee>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800cca0:	4a9e      	ldr	r2, [pc, #632]	; (800cf1c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d100      	bne.n	800cca8 <RemapAndLinkDMAtoUARTRx+0xd8>
 800cca6:	e0d0      	b.n	800ce4a <RemapAndLinkDMAtoUARTRx+0x27a>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800cca8:	4a9d      	ldr	r2, [pc, #628]	; (800cf20 <RemapAndLinkDMAtoUARTRx+0x350>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d100      	bne.n	800ccb0 <RemapAndLinkDMAtoUARTRx+0xe0>
 800ccae:	e0d8      	b.n	800ce62 <RemapAndLinkDMAtoUARTRx+0x292>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800ccb0:	4a9c      	ldr	r2, [pc, #624]	; (800cf24 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d100      	bne.n	800ccb8 <RemapAndLinkDMAtoUARTRx+0xe8>
 800ccb6:	e0e0      	b.n	800ce7a <RemapAndLinkDMAtoUARTRx+0x2aa>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800ccb8:	4a9b      	ldr	r2, [pc, #620]	; (800cf28 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d100      	bne.n	800ccc0 <RemapAndLinkDMAtoUARTRx+0xf0>
 800ccbe:	e0e8      	b.n	800ce92 <RemapAndLinkDMAtoUARTRx+0x2c2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800ccc0:	4a9a      	ldr	r2, [pc, #616]	; (800cf2c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d100      	bne.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
 800ccc6:	e0ef      	b.n	800cea8 <RemapAndLinkDMAtoUARTRx+0x2d8>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800ccc8:	6641      	str	r1, [r0, #100]	; 0x64
 800ccca:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cccc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ccce:	680b      	ldr	r3, [r1, #0]
 800ccd0:	4a91      	ldr	r2, [pc, #580]	; (800cf18 <RemapAndLinkDMAtoUARTRx+0x348>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d100      	bne.n	800ccd8 <RemapAndLinkDMAtoUARTRx+0x108>
 800ccd6:	e0e9      	b.n	800ceac <RemapAndLinkDMAtoUARTRx+0x2dc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800ccd8:	4a90      	ldr	r2, [pc, #576]	; (800cf1c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d100      	bne.n	800cce0 <RemapAndLinkDMAtoUARTRx+0x110>
 800ccde:	e0f0      	b.n	800cec2 <RemapAndLinkDMAtoUARTRx+0x2f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800cce0:	4a8f      	ldr	r2, [pc, #572]	; (800cf20 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d100      	bne.n	800cce8 <RemapAndLinkDMAtoUARTRx+0x118>
 800cce6:	e0ee      	b.n	800cec6 <RemapAndLinkDMAtoUARTRx+0x2f6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800cce8:	4a8e      	ldr	r2, [pc, #568]	; (800cf24 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d100      	bne.n	800ccf0 <RemapAndLinkDMAtoUARTRx+0x120>
 800ccee:	e0f6      	b.n	800cede <RemapAndLinkDMAtoUARTRx+0x30e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800ccf0:	4a8d      	ldr	r2, [pc, #564]	; (800cf28 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d100      	bne.n	800ccf8 <RemapAndLinkDMAtoUARTRx+0x128>
 800ccf6:	e092      	b.n	800ce1e <RemapAndLinkDMAtoUARTRx+0x24e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800ccf8:	4a8c      	ldr	r2, [pc, #560]	; (800cf2c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d1e4      	bne.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800ccfe:	4a8c      	ldr	r2, [pc, #560]	; (800cf30 <RemapAndLinkDMAtoUARTRx+0x360>)
 800cd00:	23a8      	movs	r3, #168	; 0xa8
 800cd02:	4d8c      	ldr	r5, [pc, #560]	; (800cf34 <RemapAndLinkDMAtoUARTRx+0x364>)
 800cd04:	58d4      	ldr	r4, [r2, r3]
 800cd06:	402c      	ands	r4, r5
 800cd08:	50d4      	str	r4, [r2, r3]
 800cd0a:	24a0      	movs	r4, #160	; 0xa0
 800cd0c:	58d5      	ldr	r5, [r2, r3]
 800cd0e:	0124      	lsls	r4, r4, #4
 800cd10:	432c      	orrs	r4, r5
 800cd12:	50d4      	str	r4, [r2, r3]
 800cd14:	e7d8      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800cd16:	4a88      	ldr	r2, [pc, #544]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800cd18:	e7b2      	b.n	800cc80 <RemapAndLinkDMAtoUARTRx+0xb0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800cd1a:	23a8      	movs	r3, #168	; 0xa8
 800cd1c:	4a86      	ldr	r2, [pc, #536]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800cd1e:	4d87      	ldr	r5, [pc, #540]	; (800cf3c <RemapAndLinkDMAtoUARTRx+0x36c>)
 800cd20:	58d4      	ldr	r4, [r2, r3]
 800cd22:	402c      	ands	r4, r5
 800cd24:	50d4      	str	r4, [r2, r3]
 800cd26:	2480      	movs	r4, #128	; 0x80
 800cd28:	58d5      	ldr	r5, [r2, r3]
 800cd2a:	0324      	lsls	r4, r4, #12
 800cd2c:	432c      	orrs	r4, r5
 800cd2e:	50d4      	str	r4, [r2, r3]
 800cd30:	e7ca      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800cd32:	23a8      	movs	r3, #168	; 0xa8
 800cd34:	4a80      	ldr	r2, [pc, #512]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800cd36:	4d82      	ldr	r5, [pc, #520]	; (800cf40 <RemapAndLinkDMAtoUARTRx+0x370>)
 800cd38:	58d4      	ldr	r4, [r2, r3]
 800cd3a:	402c      	ands	r4, r5
 800cd3c:	50d4      	str	r4, [r2, r3]
 800cd3e:	2480      	movs	r4, #128	; 0x80
 800cd40:	58d5      	ldr	r5, [r2, r3]
 800cd42:	0424      	lsls	r4, r4, #16
 800cd44:	432c      	orrs	r4, r5
 800cd46:	50d4      	str	r4, [r2, r3]
 800cd48:	e7be      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800cd4a:	23a8      	movs	r3, #168	; 0xa8
 800cd4c:	25f0      	movs	r5, #240	; 0xf0
 800cd4e:	4a78      	ldr	r2, [pc, #480]	; (800cf30 <RemapAndLinkDMAtoUARTRx+0x360>)
 800cd50:	58d4      	ldr	r4, [r2, r3]
 800cd52:	43ac      	bics	r4, r5
 800cd54:	50d4      	str	r4, [r2, r3]
 800cd56:	58d4      	ldr	r4, [r2, r3]
 800cd58:	3d70      	subs	r5, #112	; 0x70
 800cd5a:	432c      	orrs	r4, r5
 800cd5c:	50d4      	str	r4, [r2, r3]
 800cd5e:	e7b3      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800cd60:	23a8      	movs	r3, #168	; 0xa8
 800cd62:	250f      	movs	r5, #15
 800cd64:	4a74      	ldr	r2, [pc, #464]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800cd66:	58d4      	ldr	r4, [r2, r3]
 800cd68:	43ac      	bics	r4, r5
 800cd6a:	50d4      	str	r4, [r2, r3]
 800cd6c:	58d4      	ldr	r4, [r2, r3]
 800cd6e:	3d07      	subs	r5, #7
 800cd70:	432c      	orrs	r4, r5
 800cd72:	50d4      	str	r4, [r2, r3]
 800cd74:	e7a8      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800cd76:	680b      	ldr	r3, [r1, #0]
 800cd78:	4a67      	ldr	r2, [pc, #412]	; (800cf18 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d05a      	beq.n	800ce34 <RemapAndLinkDMAtoUARTRx+0x264>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800cd7e:	4a67      	ldr	r2, [pc, #412]	; (800cf1c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d100      	bne.n	800cd86 <RemapAndLinkDMAtoUARTRx+0x1b6>
 800cd84:	e103      	b.n	800cf8e <RemapAndLinkDMAtoUARTRx+0x3be>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800cd86:	4a66      	ldr	r2, [pc, #408]	; (800cf20 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d100      	bne.n	800cd8e <RemapAndLinkDMAtoUARTRx+0x1be>
 800cd8c:	e101      	b.n	800cf92 <RemapAndLinkDMAtoUARTRx+0x3c2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800cd8e:	4a65      	ldr	r2, [pc, #404]	; (800cf24 <RemapAndLinkDMAtoUARTRx+0x354>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d100      	bne.n	800cd96 <RemapAndLinkDMAtoUARTRx+0x1c6>
 800cd94:	e109      	b.n	800cfaa <RemapAndLinkDMAtoUARTRx+0x3da>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800cd96:	4a64      	ldr	r2, [pc, #400]	; (800cf28 <RemapAndLinkDMAtoUARTRx+0x358>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d100      	bne.n	800cd9e <RemapAndLinkDMAtoUARTRx+0x1ce>
 800cd9c:	e111      	b.n	800cfc2 <RemapAndLinkDMAtoUARTRx+0x3f2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800cd9e:	4a63      	ldr	r2, [pc, #396]	; (800cf2c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d000      	beq.n	800cda6 <RemapAndLinkDMAtoUARTRx+0x1d6>
 800cda4:	e790      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800cda6:	4a62      	ldr	r2, [pc, #392]	; (800cf30 <RemapAndLinkDMAtoUARTRx+0x360>)
 800cda8:	23a8      	movs	r3, #168	; 0xa8
 800cdaa:	4d62      	ldr	r5, [pc, #392]	; (800cf34 <RemapAndLinkDMAtoUARTRx+0x364>)
 800cdac:	58d4      	ldr	r4, [r2, r3]
 800cdae:	402c      	ands	r4, r5
 800cdb0:	50d4      	str	r4, [r2, r3]
 800cdb2:	24b0      	movs	r4, #176	; 0xb0
 800cdb4:	58d5      	ldr	r5, [r2, r3]
 800cdb6:	0124      	lsls	r4, r4, #4
 800cdb8:	432c      	orrs	r4, r5
 800cdba:	50d4      	str	r4, [r2, r3]
 800cdbc:	e784      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800cdbe:	23a8      	movs	r3, #168	; 0xa8
 800cdc0:	250f      	movs	r5, #15
 800cdc2:	4a5d      	ldr	r2, [pc, #372]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800cdc4:	58d4      	ldr	r4, [r2, r3]
 800cdc6:	43ac      	bics	r4, r5
 800cdc8:	50d4      	str	r4, [r2, r3]
 800cdca:	58d4      	ldr	r4, [r2, r3]
 800cdcc:	3d06      	subs	r5, #6
 800cdce:	432c      	orrs	r4, r5
 800cdd0:	50d4      	str	r4, [r2, r3]
 800cdd2:	e779      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800cdd4:	680b      	ldr	r3, [r1, #0]
 800cdd6:	4a50      	ldr	r2, [pc, #320]	; (800cf18 <RemapAndLinkDMAtoUARTRx+0x348>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d100      	bne.n	800cdde <RemapAndLinkDMAtoUARTRx+0x20e>
 800cddc:	e120      	b.n	800d020 <RemapAndLinkDMAtoUARTRx+0x450>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800cdde:	4a4f      	ldr	r2, [pc, #316]	; (800cf1c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d100      	bne.n	800cde6 <RemapAndLinkDMAtoUARTRx+0x216>
 800cde4:	e127      	b.n	800d036 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800cde6:	4a4e      	ldr	r2, [pc, #312]	; (800cf20 <RemapAndLinkDMAtoUARTRx+0x350>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d100      	bne.n	800cdee <RemapAndLinkDMAtoUARTRx+0x21e>
 800cdec:	e125      	b.n	800d03a <RemapAndLinkDMAtoUARTRx+0x46a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800cdee:	4a4d      	ldr	r2, [pc, #308]	; (800cf24 <RemapAndLinkDMAtoUARTRx+0x354>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d100      	bne.n	800cdf6 <RemapAndLinkDMAtoUARTRx+0x226>
 800cdf4:	e12d      	b.n	800d052 <RemapAndLinkDMAtoUARTRx+0x482>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800cdf6:	4a4c      	ldr	r2, [pc, #304]	; (800cf28 <RemapAndLinkDMAtoUARTRx+0x358>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d100      	bne.n	800cdfe <RemapAndLinkDMAtoUARTRx+0x22e>
 800cdfc:	e135      	b.n	800d06a <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800cdfe:	4a4b      	ldr	r2, [pc, #300]	; (800cf2c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d000      	beq.n	800ce06 <RemapAndLinkDMAtoUARTRx+0x236>
 800ce04:	e760      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800ce06:	4a4a      	ldr	r2, [pc, #296]	; (800cf30 <RemapAndLinkDMAtoUARTRx+0x360>)
 800ce08:	23a8      	movs	r3, #168	; 0xa8
 800ce0a:	4d4a      	ldr	r5, [pc, #296]	; (800cf34 <RemapAndLinkDMAtoUARTRx+0x364>)
 800ce0c:	58d4      	ldr	r4, [r2, r3]
 800ce0e:	402c      	ands	r4, r5
 800ce10:	50d4      	str	r4, [r2, r3]
 800ce12:	24c0      	movs	r4, #192	; 0xc0
 800ce14:	58d5      	ldr	r5, [r2, r3]
 800ce16:	0124      	lsls	r4, r4, #4
 800ce18:	432c      	orrs	r4, r5
 800ce1a:	50d4      	str	r4, [r2, r3]
 800ce1c:	e754      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800ce1e:	23a8      	movs	r3, #168	; 0xa8
 800ce20:	25f0      	movs	r5, #240	; 0xf0
 800ce22:	4a43      	ldr	r2, [pc, #268]	; (800cf30 <RemapAndLinkDMAtoUARTRx+0x360>)
 800ce24:	58d4      	ldr	r4, [r2, r3]
 800ce26:	43ac      	bics	r4, r5
 800ce28:	50d4      	str	r4, [r2, r3]
 800ce2a:	58d4      	ldr	r4, [r2, r3]
 800ce2c:	3d50      	subs	r5, #80	; 0x50
 800ce2e:	432c      	orrs	r4, r5
 800ce30:	50d4      	str	r4, [r2, r3]
 800ce32:	e749      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800ce34:	23a8      	movs	r3, #168	; 0xa8
 800ce36:	250f      	movs	r5, #15
 800ce38:	4a3f      	ldr	r2, [pc, #252]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ce3a:	58d4      	ldr	r4, [r2, r3]
 800ce3c:	43ac      	bics	r4, r5
 800ce3e:	50d4      	str	r4, [r2, r3]
 800ce40:	58d4      	ldr	r4, [r2, r3]
 800ce42:	3d04      	subs	r5, #4
 800ce44:	432c      	orrs	r4, r5
 800ce46:	50d4      	str	r4, [r2, r3]
 800ce48:	e73e      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800ce4a:	4a3b      	ldr	r2, [pc, #236]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800ce4c:	23a8      	movs	r3, #168	; 0xa8
 800ce4e:	4d39      	ldr	r5, [pc, #228]	; (800cf34 <RemapAndLinkDMAtoUARTRx+0x364>)
 800ce50:	58d4      	ldr	r4, [r2, r3]
 800ce52:	402c      	ands	r4, r5
 800ce54:	50d4      	str	r4, [r2, r3]
 800ce56:	2490      	movs	r4, #144	; 0x90
 800ce58:	58d5      	ldr	r5, [r2, r3]
 800ce5a:	0124      	lsls	r4, r4, #4
 800ce5c:	432c      	orrs	r4, r5
 800ce5e:	50d4      	str	r4, [r2, r3]
 800ce60:	e732      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800ce62:	23a8      	movs	r3, #168	; 0xa8
 800ce64:	4a34      	ldr	r2, [pc, #208]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ce66:	4d35      	ldr	r5, [pc, #212]	; (800cf3c <RemapAndLinkDMAtoUARTRx+0x36c>)
 800ce68:	58d4      	ldr	r4, [r2, r3]
 800ce6a:	402c      	ands	r4, r5
 800ce6c:	50d4      	str	r4, [r2, r3]
 800ce6e:	2490      	movs	r4, #144	; 0x90
 800ce70:	58d5      	ldr	r5, [r2, r3]
 800ce72:	0324      	lsls	r4, r4, #12
 800ce74:	432c      	orrs	r4, r5
 800ce76:	50d4      	str	r4, [r2, r3]
 800ce78:	e726      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800ce7a:	23a8      	movs	r3, #168	; 0xa8
 800ce7c:	4a2e      	ldr	r2, [pc, #184]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ce7e:	4d30      	ldr	r5, [pc, #192]	; (800cf40 <RemapAndLinkDMAtoUARTRx+0x370>)
 800ce80:	58d4      	ldr	r4, [r2, r3]
 800ce82:	402c      	ands	r4, r5
 800ce84:	50d4      	str	r4, [r2, r3]
 800ce86:	2490      	movs	r4, #144	; 0x90
 800ce88:	58d5      	ldr	r5, [r2, r3]
 800ce8a:	0424      	lsls	r4, r4, #16
 800ce8c:	432c      	orrs	r4, r5
 800ce8e:	50d4      	str	r4, [r2, r3]
 800ce90:	e71a      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800ce92:	23a8      	movs	r3, #168	; 0xa8
 800ce94:	25f0      	movs	r5, #240	; 0xf0
 800ce96:	4a26      	ldr	r2, [pc, #152]	; (800cf30 <RemapAndLinkDMAtoUARTRx+0x360>)
 800ce98:	58d4      	ldr	r4, [r2, r3]
 800ce9a:	43ac      	bics	r4, r5
 800ce9c:	50d4      	str	r4, [r2, r3]
 800ce9e:	58d4      	ldr	r4, [r2, r3]
 800cea0:	3d60      	subs	r5, #96	; 0x60
 800cea2:	432c      	orrs	r4, r5
 800cea4:	50d4      	str	r4, [r2, r3]
 800cea6:	e70f      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800cea8:	4a21      	ldr	r2, [pc, #132]	; (800cf30 <RemapAndLinkDMAtoUARTRx+0x360>)
 800ceaa:	e7cf      	b.n	800ce4c <RemapAndLinkDMAtoUARTRx+0x27c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800ceac:	23a8      	movs	r3, #168	; 0xa8
 800ceae:	250f      	movs	r5, #15
 800ceb0:	4a21      	ldr	r2, [pc, #132]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ceb2:	58d4      	ldr	r4, [r2, r3]
 800ceb4:	43ac      	bics	r4, r5
 800ceb6:	50d4      	str	r4, [r2, r3]
 800ceb8:	58d4      	ldr	r4, [r2, r3]
 800ceba:	3d05      	subs	r5, #5
 800cebc:	432c      	orrs	r4, r5
 800cebe:	50d4      	str	r4, [r2, r3]
 800cec0:	e702      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800cec2:	4a1d      	ldr	r2, [pc, #116]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800cec4:	e71c      	b.n	800cd00 <RemapAndLinkDMAtoUARTRx+0x130>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800cec6:	23a8      	movs	r3, #168	; 0xa8
 800cec8:	4a1b      	ldr	r2, [pc, #108]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ceca:	4d1c      	ldr	r5, [pc, #112]	; (800cf3c <RemapAndLinkDMAtoUARTRx+0x36c>)
 800cecc:	58d4      	ldr	r4, [r2, r3]
 800cece:	402c      	ands	r4, r5
 800ced0:	50d4      	str	r4, [r2, r3]
 800ced2:	24a0      	movs	r4, #160	; 0xa0
 800ced4:	58d5      	ldr	r5, [r2, r3]
 800ced6:	0324      	lsls	r4, r4, #12
 800ced8:	432c      	orrs	r4, r5
 800ceda:	50d4      	str	r4, [r2, r3]
 800cedc:	e6f4      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800cede:	23a8      	movs	r3, #168	; 0xa8
 800cee0:	4a15      	ldr	r2, [pc, #84]	; (800cf38 <RemapAndLinkDMAtoUARTRx+0x368>)
 800cee2:	4d17      	ldr	r5, [pc, #92]	; (800cf40 <RemapAndLinkDMAtoUARTRx+0x370>)
 800cee4:	58d4      	ldr	r4, [r2, r3]
 800cee6:	402c      	ands	r4, r5
 800cee8:	50d4      	str	r4, [r2, r3]
 800ceea:	24a0      	movs	r4, #160	; 0xa0
 800ceec:	58d5      	ldr	r5, [r2, r3]
 800ceee:	0424      	lsls	r4, r4, #16
 800cef0:	432c      	orrs	r4, r5
 800cef2:	50d4      	str	r4, [r2, r3]
 800cef4:	e6e8      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
 800cef6:	46c0      	nop			; (mov r8, r8)
 800cef8:	40013800 	.word	0x40013800
 800cefc:	40004400 	.word	0x40004400
 800cf00:	40004800 	.word	0x40004800
 800cf04:	40004c00 	.word	0x40004c00
 800cf08:	40005000 	.word	0x40005000
 800cf0c:	40011400 	.word	0x40011400
 800cf10:	40011800 	.word	0x40011800
 800cf14:	40011c00 	.word	0x40011c00
 800cf18:	40020008 	.word	0x40020008
 800cf1c:	40020030 	.word	0x40020030
 800cf20:	40020058 	.word	0x40020058
 800cf24:	4002006c 	.word	0x4002006c
 800cf28:	4002041c 	.word	0x4002041c
 800cf2c:	40020430 	.word	0x40020430
 800cf30:	40020400 	.word	0x40020400
 800cf34:	fffff0ff 	.word	0xfffff0ff
 800cf38:	40020000 	.word	0x40020000
 800cf3c:	fff0ffff 	.word	0xfff0ffff
 800cf40:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800cf44:	680b      	ldr	r3, [r1, #0]
 800cf46:	4a93      	ldr	r2, [pc, #588]	; (800d194 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d100      	bne.n	800cf4e <RemapAndLinkDMAtoUARTRx+0x37e>
 800cf4c:	e098      	b.n	800d080 <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800cf4e:	4a92      	ldr	r2, [pc, #584]	; (800d198 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d100      	bne.n	800cf56 <RemapAndLinkDMAtoUARTRx+0x386>
 800cf54:	e09f      	b.n	800d096 <RemapAndLinkDMAtoUARTRx+0x4c6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800cf56:	4a91      	ldr	r2, [pc, #580]	; (800d19c <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d100      	bne.n	800cf5e <RemapAndLinkDMAtoUARTRx+0x38e>
 800cf5c:	e09d      	b.n	800d09a <RemapAndLinkDMAtoUARTRx+0x4ca>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800cf5e:	4a90      	ldr	r2, [pc, #576]	; (800d1a0 <RemapAndLinkDMAtoUARTRx+0x5d0>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d100      	bne.n	800cf66 <RemapAndLinkDMAtoUARTRx+0x396>
 800cf64:	e0a5      	b.n	800d0b2 <RemapAndLinkDMAtoUARTRx+0x4e2>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800cf66:	4a8f      	ldr	r2, [pc, #572]	; (800d1a4 <RemapAndLinkDMAtoUARTRx+0x5d4>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d100      	bne.n	800cf6e <RemapAndLinkDMAtoUARTRx+0x39e>
 800cf6c:	e0ad      	b.n	800d0ca <RemapAndLinkDMAtoUARTRx+0x4fa>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800cf6e:	4a8e      	ldr	r2, [pc, #568]	; (800d1a8 <RemapAndLinkDMAtoUARTRx+0x5d8>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d000      	beq.n	800cf76 <RemapAndLinkDMAtoUARTRx+0x3a6>
 800cf74:	e6a8      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800cf76:	4a8d      	ldr	r2, [pc, #564]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800cf78:	23a8      	movs	r3, #168	; 0xa8
 800cf7a:	4d8d      	ldr	r5, [pc, #564]	; (800d1b0 <RemapAndLinkDMAtoUARTRx+0x5e0>)
 800cf7c:	58d4      	ldr	r4, [r2, r3]
 800cf7e:	402c      	ands	r4, r5
 800cf80:	50d4      	str	r4, [r2, r3]
 800cf82:	24d0      	movs	r4, #208	; 0xd0
 800cf84:	58d5      	ldr	r5, [r2, r3]
 800cf86:	0124      	lsls	r4, r4, #4
 800cf88:	432c      	orrs	r4, r5
 800cf8a:	50d4      	str	r4, [r2, r3]
 800cf8c:	e69c      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800cf8e:	4a89      	ldr	r2, [pc, #548]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800cf90:	e70a      	b.n	800cda8 <RemapAndLinkDMAtoUARTRx+0x1d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800cf92:	23a8      	movs	r3, #168	; 0xa8
 800cf94:	4a87      	ldr	r2, [pc, #540]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800cf96:	4d88      	ldr	r5, [pc, #544]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800cf98:	58d4      	ldr	r4, [r2, r3]
 800cf9a:	402c      	ands	r4, r5
 800cf9c:	50d4      	str	r4, [r2, r3]
 800cf9e:	24b0      	movs	r4, #176	; 0xb0
 800cfa0:	58d5      	ldr	r5, [r2, r3]
 800cfa2:	0324      	lsls	r4, r4, #12
 800cfa4:	432c      	orrs	r4, r5
 800cfa6:	50d4      	str	r4, [r2, r3]
 800cfa8:	e68e      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800cfaa:	23a8      	movs	r3, #168	; 0xa8
 800cfac:	4a81      	ldr	r2, [pc, #516]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800cfae:	4d83      	ldr	r5, [pc, #524]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800cfb0:	58d4      	ldr	r4, [r2, r3]
 800cfb2:	402c      	ands	r4, r5
 800cfb4:	50d4      	str	r4, [r2, r3]
 800cfb6:	24b0      	movs	r4, #176	; 0xb0
 800cfb8:	58d5      	ldr	r5, [r2, r3]
 800cfba:	0424      	lsls	r4, r4, #16
 800cfbc:	432c      	orrs	r4, r5
 800cfbe:	50d4      	str	r4, [r2, r3]
 800cfc0:	e682      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800cfc2:	23a8      	movs	r3, #168	; 0xa8
 800cfc4:	25f0      	movs	r5, #240	; 0xf0
 800cfc6:	4a79      	ldr	r2, [pc, #484]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800cfc8:	58d4      	ldr	r4, [r2, r3]
 800cfca:	43ac      	bics	r4, r5
 800cfcc:	50d4      	str	r4, [r2, r3]
 800cfce:	58d4      	ldr	r4, [r2, r3]
 800cfd0:	3d40      	subs	r5, #64	; 0x40
 800cfd2:	432c      	orrs	r4, r5
 800cfd4:	50d4      	str	r4, [r2, r3]
 800cfd6:	e677      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800cfd8:	680b      	ldr	r3, [r1, #0]
 800cfda:	4a6e      	ldr	r2, [pc, #440]	; (800d194 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d07f      	beq.n	800d0e0 <RemapAndLinkDMAtoUARTRx+0x510>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800cfe0:	4a6d      	ldr	r2, [pc, #436]	; (800d198 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d100      	bne.n	800cfe8 <RemapAndLinkDMAtoUARTRx+0x418>
 800cfe6:	e086      	b.n	800d0f6 <RemapAndLinkDMAtoUARTRx+0x526>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800cfe8:	4a6c      	ldr	r2, [pc, #432]	; (800d19c <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d100      	bne.n	800cff0 <RemapAndLinkDMAtoUARTRx+0x420>
 800cfee:	e084      	b.n	800d0fa <RemapAndLinkDMAtoUARTRx+0x52a>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800cff0:	4a6b      	ldr	r2, [pc, #428]	; (800d1a0 <RemapAndLinkDMAtoUARTRx+0x5d0>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d100      	bne.n	800cff8 <RemapAndLinkDMAtoUARTRx+0x428>
 800cff6:	e08c      	b.n	800d112 <RemapAndLinkDMAtoUARTRx+0x542>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800cff8:	4a6a      	ldr	r2, [pc, #424]	; (800d1a4 <RemapAndLinkDMAtoUARTRx+0x5d4>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d100      	bne.n	800d000 <RemapAndLinkDMAtoUARTRx+0x430>
 800cffe:	e094      	b.n	800d12a <RemapAndLinkDMAtoUARTRx+0x55a>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800d000:	4a69      	ldr	r2, [pc, #420]	; (800d1a8 <RemapAndLinkDMAtoUARTRx+0x5d8>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d000      	beq.n	800d008 <RemapAndLinkDMAtoUARTRx+0x438>
 800d006:	e65f      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800d008:	4a68      	ldr	r2, [pc, #416]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800d00a:	23a8      	movs	r3, #168	; 0xa8
 800d00c:	4d68      	ldr	r5, [pc, #416]	; (800d1b0 <RemapAndLinkDMAtoUARTRx+0x5e0>)
 800d00e:	58d4      	ldr	r4, [r2, r3]
 800d010:	402c      	ands	r4, r5
 800d012:	50d4      	str	r4, [r2, r3]
 800d014:	24e0      	movs	r4, #224	; 0xe0
 800d016:	58d5      	ldr	r5, [r2, r3]
 800d018:	0124      	lsls	r4, r4, #4
 800d01a:	432c      	orrs	r4, r5
 800d01c:	50d4      	str	r4, [r2, r3]
 800d01e:	e653      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800d020:	23a8      	movs	r3, #168	; 0xa8
 800d022:	250f      	movs	r5, #15
 800d024:	4a63      	ldr	r2, [pc, #396]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d026:	58d4      	ldr	r4, [r2, r3]
 800d028:	43ac      	bics	r4, r5
 800d02a:	50d4      	str	r4, [r2, r3]
 800d02c:	58d4      	ldr	r4, [r2, r3]
 800d02e:	3d03      	subs	r5, #3
 800d030:	432c      	orrs	r4, r5
 800d032:	50d4      	str	r4, [r2, r3]
 800d034:	e648      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800d036:	4a5f      	ldr	r2, [pc, #380]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d038:	e6e6      	b.n	800ce08 <RemapAndLinkDMAtoUARTRx+0x238>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800d03a:	23a8      	movs	r3, #168	; 0xa8
 800d03c:	4a5d      	ldr	r2, [pc, #372]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d03e:	4d5e      	ldr	r5, [pc, #376]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800d040:	58d4      	ldr	r4, [r2, r3]
 800d042:	402c      	ands	r4, r5
 800d044:	50d4      	str	r4, [r2, r3]
 800d046:	24c0      	movs	r4, #192	; 0xc0
 800d048:	58d5      	ldr	r5, [r2, r3]
 800d04a:	0324      	lsls	r4, r4, #12
 800d04c:	432c      	orrs	r4, r5
 800d04e:	50d4      	str	r4, [r2, r3]
 800d050:	e63a      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800d052:	23a8      	movs	r3, #168	; 0xa8
 800d054:	4a57      	ldr	r2, [pc, #348]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d056:	4d59      	ldr	r5, [pc, #356]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800d058:	58d4      	ldr	r4, [r2, r3]
 800d05a:	402c      	ands	r4, r5
 800d05c:	50d4      	str	r4, [r2, r3]
 800d05e:	24c0      	movs	r4, #192	; 0xc0
 800d060:	58d5      	ldr	r5, [r2, r3]
 800d062:	0424      	lsls	r4, r4, #16
 800d064:	432c      	orrs	r4, r5
 800d066:	50d4      	str	r4, [r2, r3]
 800d068:	e62e      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800d06a:	23a8      	movs	r3, #168	; 0xa8
 800d06c:	25f0      	movs	r5, #240	; 0xf0
 800d06e:	4a4f      	ldr	r2, [pc, #316]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800d070:	58d4      	ldr	r4, [r2, r3]
 800d072:	43ac      	bics	r4, r5
 800d074:	50d4      	str	r4, [r2, r3]
 800d076:	58d4      	ldr	r4, [r2, r3]
 800d078:	3d30      	subs	r5, #48	; 0x30
 800d07a:	432c      	orrs	r4, r5
 800d07c:	50d4      	str	r4, [r2, r3]
 800d07e:	e623      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800d080:	23a8      	movs	r3, #168	; 0xa8
 800d082:	250f      	movs	r5, #15
 800d084:	4a4b      	ldr	r2, [pc, #300]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d086:	58d4      	ldr	r4, [r2, r3]
 800d088:	43ac      	bics	r4, r5
 800d08a:	50d4      	str	r4, [r2, r3]
 800d08c:	58d4      	ldr	r4, [r2, r3]
 800d08e:	3d02      	subs	r5, #2
 800d090:	432c      	orrs	r4, r5
 800d092:	50d4      	str	r4, [r2, r3]
 800d094:	e618      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800d096:	4a47      	ldr	r2, [pc, #284]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d098:	e76e      	b.n	800cf78 <RemapAndLinkDMAtoUARTRx+0x3a8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800d09a:	23a8      	movs	r3, #168	; 0xa8
 800d09c:	4a45      	ldr	r2, [pc, #276]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d09e:	4d46      	ldr	r5, [pc, #280]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800d0a0:	58d4      	ldr	r4, [r2, r3]
 800d0a2:	402c      	ands	r4, r5
 800d0a4:	50d4      	str	r4, [r2, r3]
 800d0a6:	24d0      	movs	r4, #208	; 0xd0
 800d0a8:	58d5      	ldr	r5, [r2, r3]
 800d0aa:	0324      	lsls	r4, r4, #12
 800d0ac:	432c      	orrs	r4, r5
 800d0ae:	50d4      	str	r4, [r2, r3]
 800d0b0:	e60a      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800d0b2:	23a8      	movs	r3, #168	; 0xa8
 800d0b4:	4a3f      	ldr	r2, [pc, #252]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d0b6:	4d41      	ldr	r5, [pc, #260]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800d0b8:	58d4      	ldr	r4, [r2, r3]
 800d0ba:	402c      	ands	r4, r5
 800d0bc:	50d4      	str	r4, [r2, r3]
 800d0be:	24d0      	movs	r4, #208	; 0xd0
 800d0c0:	58d5      	ldr	r5, [r2, r3]
 800d0c2:	0424      	lsls	r4, r4, #16
 800d0c4:	432c      	orrs	r4, r5
 800d0c6:	50d4      	str	r4, [r2, r3]
 800d0c8:	e5fe      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800d0ca:	23a8      	movs	r3, #168	; 0xa8
 800d0cc:	25f0      	movs	r5, #240	; 0xf0
 800d0ce:	4a37      	ldr	r2, [pc, #220]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800d0d0:	58d4      	ldr	r4, [r2, r3]
 800d0d2:	43ac      	bics	r4, r5
 800d0d4:	50d4      	str	r4, [r2, r3]
 800d0d6:	58d4      	ldr	r4, [r2, r3]
 800d0d8:	3d20      	subs	r5, #32
 800d0da:	432c      	orrs	r4, r5
 800d0dc:	50d4      	str	r4, [r2, r3]
 800d0de:	e5f3      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800d0e0:	23a8      	movs	r3, #168	; 0xa8
 800d0e2:	250f      	movs	r5, #15
 800d0e4:	4a33      	ldr	r2, [pc, #204]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d0e6:	58d4      	ldr	r4, [r2, r3]
 800d0e8:	43ac      	bics	r4, r5
 800d0ea:	50d4      	str	r4, [r2, r3]
 800d0ec:	58d4      	ldr	r4, [r2, r3]
 800d0ee:	3d01      	subs	r5, #1
 800d0f0:	432c      	orrs	r4, r5
 800d0f2:	50d4      	str	r4, [r2, r3]
 800d0f4:	e5e8      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800d0f6:	4a2f      	ldr	r2, [pc, #188]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d0f8:	e787      	b.n	800d00a <RemapAndLinkDMAtoUARTRx+0x43a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800d0fa:	23a8      	movs	r3, #168	; 0xa8
 800d0fc:	4a2d      	ldr	r2, [pc, #180]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d0fe:	4d2e      	ldr	r5, [pc, #184]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800d100:	58d4      	ldr	r4, [r2, r3]
 800d102:	402c      	ands	r4, r5
 800d104:	50d4      	str	r4, [r2, r3]
 800d106:	24e0      	movs	r4, #224	; 0xe0
 800d108:	58d5      	ldr	r5, [r2, r3]
 800d10a:	0324      	lsls	r4, r4, #12
 800d10c:	432c      	orrs	r4, r5
 800d10e:	50d4      	str	r4, [r2, r3]
 800d110:	e5da      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800d112:	23a8      	movs	r3, #168	; 0xa8
 800d114:	4a27      	ldr	r2, [pc, #156]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d116:	4d29      	ldr	r5, [pc, #164]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800d118:	58d4      	ldr	r4, [r2, r3]
 800d11a:	402c      	ands	r4, r5
 800d11c:	50d4      	str	r4, [r2, r3]
 800d11e:	24e0      	movs	r4, #224	; 0xe0
 800d120:	58d5      	ldr	r5, [r2, r3]
 800d122:	0424      	lsls	r4, r4, #16
 800d124:	432c      	orrs	r4, r5
 800d126:	50d4      	str	r4, [r2, r3]
 800d128:	e5ce      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800d12a:	23a8      	movs	r3, #168	; 0xa8
 800d12c:	25f0      	movs	r5, #240	; 0xf0
 800d12e:	4a1f      	ldr	r2, [pc, #124]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800d130:	58d4      	ldr	r4, [r2, r3]
 800d132:	43ac      	bics	r4, r5
 800d134:	50d4      	str	r4, [r2, r3]
 800d136:	58d4      	ldr	r4, [r2, r3]
 800d138:	3d10      	subs	r5, #16
 800d13a:	432c      	orrs	r4, r5
 800d13c:	50d4      	str	r4, [r2, r3]
 800d13e:	e5c3      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800d140:	23a8      	movs	r3, #168	; 0xa8
 800d142:	260f      	movs	r6, #15
 800d144:	4a1b      	ldr	r2, [pc, #108]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d146:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800d148:	43b5      	bics	r5, r6
 800d14a:	50d5      	str	r5, [r2, r3]
 800d14c:	58d4      	ldr	r4, [r2, r3]
 800d14e:	4334      	orrs	r4, r6
 800d150:	50d4      	str	r4, [r2, r3]
 800d152:	e5b9      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800d154:	4a17      	ldr	r2, [pc, #92]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d156:	e573      	b.n	800cc40 <RemapAndLinkDMAtoUARTRx+0x70>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800d158:	23a8      	movs	r3, #168	; 0xa8
 800d15a:	4a16      	ldr	r2, [pc, #88]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d15c:	4d16      	ldr	r5, [pc, #88]	; (800d1b8 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800d15e:	58d4      	ldr	r4, [r2, r3]
 800d160:	402c      	ands	r4, r5
 800d162:	50d4      	str	r4, [r2, r3]
 800d164:	24f0      	movs	r4, #240	; 0xf0
 800d166:	58d5      	ldr	r5, [r2, r3]
 800d168:	0324      	lsls	r4, r4, #12
 800d16a:	432c      	orrs	r4, r5
 800d16c:	50d4      	str	r4, [r2, r3]
 800d16e:	e5ab      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800d170:	23a8      	movs	r3, #168	; 0xa8
 800d172:	4a10      	ldr	r2, [pc, #64]	; (800d1b4 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800d174:	4d11      	ldr	r5, [pc, #68]	; (800d1bc <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800d176:	58d4      	ldr	r4, [r2, r3]
 800d178:	402c      	ands	r4, r5
 800d17a:	50d4      	str	r4, [r2, r3]
 800d17c:	24f0      	movs	r4, #240	; 0xf0
 800d17e:	58d5      	ldr	r5, [r2, r3]
 800d180:	0424      	lsls	r4, r4, #16
 800d182:	432c      	orrs	r4, r5
 800d184:	50d4      	str	r4, [r2, r3]
 800d186:	e59f      	b.n	800ccc8 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800d188:	23a8      	movs	r3, #168	; 0xa8
 800d18a:	4a08      	ldr	r2, [pc, #32]	; (800d1ac <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800d18c:	26f0      	movs	r6, #240	; 0xf0
 800d18e:	58d5      	ldr	r5, [r2, r3]
 800d190:	e7da      	b.n	800d148 <RemapAndLinkDMAtoUARTRx+0x578>
 800d192:	46c0      	nop			; (mov r8, r8)
 800d194:	40020008 	.word	0x40020008
 800d198:	40020030 	.word	0x40020030
 800d19c:	40020058 	.word	0x40020058
 800d1a0:	4002006c 	.word	0x4002006c
 800d1a4:	4002041c 	.word	0x4002041c
 800d1a8:	40020430 	.word	0x40020430
 800d1ac:	40020400 	.word	0x40020400
 800d1b0:	fffff0ff 	.word	0xfffff0ff
 800d1b4:	40020000 	.word	0x40020000
 800d1b8:	fff0ffff 	.word	0xfff0ffff
 800d1bc:	ff0fffff 	.word	0xff0fffff

0800d1c0 <DMA_MSG_RX_Setup>:
{	
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	000d      	movs	r5, r1
 800d1c4:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800d1c6:	f7ff fd03 	bl	800cbd0 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d1ca:	0028      	movs	r0, r5
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	f7ff fc45 	bl	800ca5c <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800d1d2:	0020      	movs	r0, r4
 800d1d4:	f7fe ff24 	bl	800c020 <GetPort>
 800d1d8:	1e41      	subs	r1, r0, #1
 800d1da:	4804      	ldr	r0, [pc, #16]	; (800d1ec <DMA_MSG_RX_Setup+0x2c>)
 800d1dc:	0189      	lsls	r1, r1, #6
 800d1de:	1809      	adds	r1, r1, r0
 800d1e0:	2240      	movs	r2, #64	; 0x40
 800d1e2:	0020      	movs	r0, r4
 800d1e4:	f007 f830 	bl	8014248 <HAL_UART_Receive_DMA>
}
 800d1e8:	bd70      	pop	{r4, r5, r6, pc}
 800d1ea:	46c0      	nop			; (mov r8, r8)
 800d1ec:	20001368 	.word	0x20001368

0800d1f0 <SetupMessagingRxDMAs>:
{	
 800d1f0:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800d1f2:	4c1e      	ldr	r4, [pc, #120]	; (800d26c <SetupMessagingRxDMAs+0x7c>)
 800d1f4:	7863      	ldrb	r3, [r4, #1]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00f      	beq.n	800d21a <SetupMessagingRxDMAs+0x2a>
	if (portStatus[P2] == FREE)	
 800d1fa:	78a3      	ldrb	r3, [r4, #2]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d013      	beq.n	800d228 <SetupMessagingRxDMAs+0x38>
	if (portStatus[P3] == FREE)
 800d200:	78e3      	ldrb	r3, [r4, #3]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d017      	beq.n	800d236 <SetupMessagingRxDMAs+0x46>
	if (portStatus[P4] == FREE)
 800d206:	7923      	ldrb	r3, [r4, #4]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d01b      	beq.n	800d244 <SetupMessagingRxDMAs+0x54>
	if (portStatus[P5] == FREE)
 800d20c:	7963      	ldrb	r3, [r4, #5]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d01f      	beq.n	800d252 <SetupMessagingRxDMAs+0x62>
	if (portStatus[P6] == FREE)
 800d212:	79a3      	ldrb	r3, [r4, #6]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d023      	beq.n	800d260 <SetupMessagingRxDMAs+0x70>
}
 800d218:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800d21a:	4915      	ldr	r1, [pc, #84]	; (800d270 <SetupMessagingRxDMAs+0x80>)
 800d21c:	4815      	ldr	r0, [pc, #84]	; (800d274 <SetupMessagingRxDMAs+0x84>)
 800d21e:	f7ff ffcf 	bl	800d1c0 <DMA_MSG_RX_Setup>
	if (portStatus[P2] == FREE)	
 800d222:	78a3      	ldrb	r3, [r4, #2]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1eb      	bne.n	800d200 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800d228:	4913      	ldr	r1, [pc, #76]	; (800d278 <SetupMessagingRxDMAs+0x88>)
 800d22a:	4814      	ldr	r0, [pc, #80]	; (800d27c <SetupMessagingRxDMAs+0x8c>)
 800d22c:	f7ff ffc8 	bl	800d1c0 <DMA_MSG_RX_Setup>
	if (portStatus[P3] == FREE)
 800d230:	78e3      	ldrb	r3, [r4, #3]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1e7      	bne.n	800d206 <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800d236:	4912      	ldr	r1, [pc, #72]	; (800d280 <SetupMessagingRxDMAs+0x90>)
 800d238:	4812      	ldr	r0, [pc, #72]	; (800d284 <SetupMessagingRxDMAs+0x94>)
 800d23a:	f7ff ffc1 	bl	800d1c0 <DMA_MSG_RX_Setup>
	if (portStatus[P4] == FREE)
 800d23e:	7923      	ldrb	r3, [r4, #4]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1e3      	bne.n	800d20c <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800d244:	4910      	ldr	r1, [pc, #64]	; (800d288 <SetupMessagingRxDMAs+0x98>)
 800d246:	4811      	ldr	r0, [pc, #68]	; (800d28c <SetupMessagingRxDMAs+0x9c>)
 800d248:	f7ff ffba 	bl	800d1c0 <DMA_MSG_RX_Setup>
	if (portStatus[P5] == FREE)
 800d24c:	7963      	ldrb	r3, [r4, #5]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1df      	bne.n	800d212 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800d252:	490f      	ldr	r1, [pc, #60]	; (800d290 <SetupMessagingRxDMAs+0xa0>)
 800d254:	480f      	ldr	r0, [pc, #60]	; (800d294 <SetupMessagingRxDMAs+0xa4>)
 800d256:	f7ff ffb3 	bl	800d1c0 <DMA_MSG_RX_Setup>
	if (portStatus[P6] == FREE)
 800d25a:	79a3      	ldrb	r3, [r4, #6]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1db      	bne.n	800d218 <SetupMessagingRxDMAs+0x28>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800d260:	490d      	ldr	r1, [pc, #52]	; (800d298 <SetupMessagingRxDMAs+0xa8>)
 800d262:	480e      	ldr	r0, [pc, #56]	; (800d29c <SetupMessagingRxDMAs+0xac>)
 800d264:	f7ff ffac 	bl	800d1c0 <DMA_MSG_RX_Setup>
}
 800d268:	e7d6      	b.n	800d218 <SetupMessagingRxDMAs+0x28>
 800d26a:	46c0      	nop			; (mov r8, r8)
 800d26c:	20001190 	.word	0x20001190
 800d270:	20001888 	.word	0x20001888
 800d274:	20006d90 	.word	0x20006d90
 800d278:	200018c0 	.word	0x200018c0
 800d27c:	20006e00 	.word	0x20006e00
 800d280:	200018f8 	.word	0x200018f8
 800d284:	20006d20 	.word	0x20006d20
 800d288:	20001930 	.word	0x20001930
 800d28c:	20006bd0 	.word	0x20006bd0
 800d290:	20001968 	.word	0x20001968
 800d294:	20006cb0 	.word	0x20006cb0
 800d298:	200019a0 	.word	0x200019a0
 800d29c:	20006c40 	.word	0x20006c40

0800d2a0 <DMA_STREAM_Setup>:
{	
 800d2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a2:	0016      	movs	r6, r2
 800d2a4:	0005      	movs	r5, r0
 800d2a6:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800d2a8:	f7fe feba 	bl	800c020 <GetPort>
	hDMA = &streamDMA[port-1];
 800d2ac:	3801      	subs	r0, #1
 800d2ae:	00c4      	lsls	r4, r0, #3
 800d2b0:	1a24      	subs	r4, r4, r0
 800d2b2:	480a      	ldr	r0, [pc, #40]	; (800d2dc <DMA_STREAM_Setup+0x3c>)
 800d2b4:	00e4      	lsls	r4, r4, #3
 800d2b6:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800d2b8:	0021      	movs	r1, r4
 800d2ba:	0028      	movs	r0, r5
 800d2bc:	f7ff fc88 	bl	800cbd0 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800d2c0:	0020      	movs	r0, r4
 800d2c2:	2101      	movs	r1, #1
 800d2c4:	f7ff fbca 	bl	800ca5c <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800d2c8:	2369      	movs	r3, #105	; 0x69
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	0032      	movs	r2, r6
 800d2d2:	0028      	movs	r0, r5
 800d2d4:	3128      	adds	r1, #40	; 0x28
 800d2d6:	f006 ffb7 	bl	8014248 <HAL_UART_Receive_DMA>
}
 800d2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2dc:	20001a80 	.word	0x20001a80

0800d2e0 <RemapAndLinkDMAtoUARTTx>:
/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d2e0:	6803      	ldr	r3, [r0, #0]
 800d2e2:	4ac9      	ldr	r2, [pc, #804]	; (800d608 <RemapAndLinkDMAtoUARTTx+0x328>)
{
 800d2e4:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d03d      	beq.n	800d366 <RemapAndLinkDMAtoUARTTx+0x86>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d2ea:	4ac8      	ldr	r2, [pc, #800]	; (800d60c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d05b      	beq.n	800d3a8 <RemapAndLinkDMAtoUARTTx+0xc8>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d2f0:	4ac7      	ldr	r2, [pc, #796]	; (800d610 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d100      	bne.n	800d2f8 <RemapAndLinkDMAtoUARTTx+0x18>
 800d2f6:	e073      	b.n	800d3e0 <RemapAndLinkDMAtoUARTTx+0x100>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d2f8:	4ac6      	ldr	r2, [pc, #792]	; (800d614 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d100      	bne.n	800d300 <RemapAndLinkDMAtoUARTTx+0x20>
 800d2fe:	e0c3      	b.n	800d488 <RemapAndLinkDMAtoUARTTx+0x1a8>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d300:	4ac5      	ldr	r2, [pc, #788]	; (800d618 <RemapAndLinkDMAtoUARTTx+0x338>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d100      	bne.n	800d308 <RemapAndLinkDMAtoUARTTx+0x28>
 800d306:	e0ee      	b.n	800d4e6 <RemapAndLinkDMAtoUARTTx+0x206>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d308:	4ac4      	ldr	r2, [pc, #784]	; (800d61c <RemapAndLinkDMAtoUARTTx+0x33c>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d100      	bne.n	800d310 <RemapAndLinkDMAtoUARTTx+0x30>
 800d30e:	e1a1      	b.n	800d654 <RemapAndLinkDMAtoUARTTx+0x374>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d310:	4ac3      	ldr	r2, [pc, #780]	; (800d620 <RemapAndLinkDMAtoUARTTx+0x340>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d100      	bne.n	800d318 <RemapAndLinkDMAtoUARTTx+0x38>
 800d316:	e1e7      	b.n	800d6e8 <RemapAndLinkDMAtoUARTTx+0x408>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d318:	4ac2      	ldr	r2, [pc, #776]	; (800d624 <RemapAndLinkDMAtoUARTTx+0x344>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d15d      	bne.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
 800d31e:	680b      	ldr	r3, [r1, #0]
 800d320:	4ac1      	ldr	r2, [pc, #772]	; (800d628 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d100      	bne.n	800d328 <RemapAndLinkDMAtoUARTTx+0x48>
 800d326:	e293      	b.n	800d850 <RemapAndLinkDMAtoUARTTx+0x570>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d328:	4ac0      	ldr	r2, [pc, #768]	; (800d62c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d100      	bne.n	800d330 <RemapAndLinkDMAtoUARTTx+0x50>
 800d32e:	e299      	b.n	800d864 <RemapAndLinkDMAtoUARTTx+0x584>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d330:	4abf      	ldr	r2, [pc, #764]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d100      	bne.n	800d338 <RemapAndLinkDMAtoUARTTx+0x58>
 800d336:	e2a1      	b.n	800d87c <RemapAndLinkDMAtoUARTTx+0x59c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d338:	4abe      	ldr	r2, [pc, #760]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d100      	bne.n	800d340 <RemapAndLinkDMAtoUARTTx+0x60>
 800d33e:	e2a9      	b.n	800d894 <RemapAndLinkDMAtoUARTTx+0x5b4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d340:	4abd      	ldr	r2, [pc, #756]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d100      	bne.n	800d348 <RemapAndLinkDMAtoUARTTx+0x68>
 800d346:	e2aa      	b.n	800d89e <RemapAndLinkDMAtoUARTTx+0x5be>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800d348:	4abc      	ldr	r2, [pc, #752]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d145      	bne.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800d34e:	23a8      	movs	r3, #168	; 0xa8
 800d350:	4abb      	ldr	r2, [pc, #748]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d352:	4dbc      	ldr	r5, [pc, #752]	; (800d644 <RemapAndLinkDMAtoUARTTx+0x364>)
 800d354:	58d4      	ldr	r4, [r2, r3]
 800d356:	402c      	ands	r4, r5
 800d358:	50d4      	str	r4, [r2, r3]
 800d35a:	24f0      	movs	r4, #240	; 0xf0
 800d35c:	58d5      	ldr	r5, [r2, r3]
 800d35e:	0324      	lsls	r4, r4, #12
 800d360:	432c      	orrs	r4, r5
 800d362:	50d4      	str	r4, [r2, r3]
 800d364:	e039      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d366:	680b      	ldr	r3, [r1, #0]
 800d368:	4aaf      	ldr	r2, [pc, #700]	; (800d628 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d100      	bne.n	800d370 <RemapAndLinkDMAtoUARTTx+0x90>
 800d36e:	e080      	b.n	800d472 <RemapAndLinkDMAtoUARTTx+0x192>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800d370:	4aae      	ldr	r2, [pc, #696]	; (800d62c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d058      	beq.n	800d428 <RemapAndLinkDMAtoUARTTx+0x148>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800d376:	4aae      	ldr	r2, [pc, #696]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d061      	beq.n	800d440 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800d37c:	4aad      	ldr	r2, [pc, #692]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d06a      	beq.n	800d458 <RemapAndLinkDMAtoUARTTx+0x178>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800d382:	4aad      	ldr	r2, [pc, #692]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d100      	bne.n	800d38a <RemapAndLinkDMAtoUARTTx+0xaa>
 800d388:	e071      	b.n	800d46e <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800d38a:	4aac      	ldr	r2, [pc, #688]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d124      	bne.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800d390:	23a8      	movs	r3, #168	; 0xa8
 800d392:	4aab      	ldr	r2, [pc, #684]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d394:	4dab      	ldr	r5, [pc, #684]	; (800d644 <RemapAndLinkDMAtoUARTTx+0x364>)
 800d396:	58d4      	ldr	r4, [r2, r3]
 800d398:	402c      	ands	r4, r5
 800d39a:	50d4      	str	r4, [r2, r3]
 800d39c:	2480      	movs	r4, #128	; 0x80
 800d39e:	58d5      	ldr	r5, [r2, r3]
 800d3a0:	0324      	lsls	r4, r4, #12
 800d3a2:	432c      	orrs	r4, r5
 800d3a4:	50d4      	str	r4, [r2, r3]
 800d3a6:	e018      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d3a8:	680b      	ldr	r3, [r1, #0]
 800d3aa:	4a9f      	ldr	r2, [pc, #636]	; (800d628 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d100      	bne.n	800d3b2 <RemapAndLinkDMAtoUARTTx+0xd2>
 800d3b0:	e08e      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x1f0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800d3b2:	4a9e      	ldr	r2, [pc, #632]	; (800d62c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d100      	bne.n	800d3ba <RemapAndLinkDMAtoUARTTx+0xda>
 800d3b8:	e0d1      	b.n	800d55e <RemapAndLinkDMAtoUARTTx+0x27e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800d3ba:	4a9d      	ldr	r2, [pc, #628]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d100      	bne.n	800d3c2 <RemapAndLinkDMAtoUARTTx+0xe2>
 800d3c0:	e0d9      	b.n	800d576 <RemapAndLinkDMAtoUARTTx+0x296>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800d3c2:	4a9c      	ldr	r2, [pc, #624]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d100      	bne.n	800d3ca <RemapAndLinkDMAtoUARTTx+0xea>
 800d3c8:	e0e1      	b.n	800d58e <RemapAndLinkDMAtoUARTTx+0x2ae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800d3ca:	4a9b      	ldr	r2, [pc, #620]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d100      	bne.n	800d3d2 <RemapAndLinkDMAtoUARTTx+0xf2>
 800d3d0:	e0e8      	b.n	800d5a4 <RemapAndLinkDMAtoUARTTx+0x2c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800d3d2:	4a9a      	ldr	r2, [pc, #616]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d100      	bne.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
 800d3d8:	e0e6      	b.n	800d5a8 <RemapAndLinkDMAtoUARTTx+0x2c8>
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800d3da:	6601      	str	r1, [r0, #96]	; 0x60
 800d3dc:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d3de:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d3e0:	680b      	ldr	r3, [r1, #0]
 800d3e2:	4a91      	ldr	r2, [pc, #580]	; (800d628 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d100      	bne.n	800d3ea <RemapAndLinkDMAtoUARTTx+0x10a>
 800d3e8:	e0ea      	b.n	800d5c0 <RemapAndLinkDMAtoUARTTx+0x2e0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d3ea:	4a90      	ldr	r2, [pc, #576]	; (800d62c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d100      	bne.n	800d3f2 <RemapAndLinkDMAtoUARTTx+0x112>
 800d3f0:	e0f1      	b.n	800d5d6 <RemapAndLinkDMAtoUARTTx+0x2f6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d3f2:	4a8f      	ldr	r2, [pc, #572]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d100      	bne.n	800d3fa <RemapAndLinkDMAtoUARTTx+0x11a>
 800d3f8:	e0ef      	b.n	800d5da <RemapAndLinkDMAtoUARTTx+0x2fa>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d3fa:	4a8e      	ldr	r2, [pc, #568]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d100      	bne.n	800d402 <RemapAndLinkDMAtoUARTTx+0x122>
 800d400:	e0f7      	b.n	800d5f2 <RemapAndLinkDMAtoUARTTx+0x312>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d402:	4a8d      	ldr	r2, [pc, #564]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d100      	bne.n	800d40a <RemapAndLinkDMAtoUARTTx+0x12a>
 800d408:	e092      	b.n	800d530 <RemapAndLinkDMAtoUARTTx+0x250>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d40a:	4a8c      	ldr	r2, [pc, #560]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d1e4      	bne.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800d410:	23a8      	movs	r3, #168	; 0xa8
 800d412:	4a8b      	ldr	r2, [pc, #556]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d414:	4d8b      	ldr	r5, [pc, #556]	; (800d644 <RemapAndLinkDMAtoUARTTx+0x364>)
 800d416:	58d4      	ldr	r4, [r2, r3]
 800d418:	402c      	ands	r4, r5
 800d41a:	50d4      	str	r4, [r2, r3]
 800d41c:	24a0      	movs	r4, #160	; 0xa0
 800d41e:	58d5      	ldr	r5, [r2, r3]
 800d420:	0324      	lsls	r4, r4, #12
 800d422:	432c      	orrs	r4, r5
 800d424:	50d4      	str	r4, [r2, r3]
 800d426:	e7d8      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800d428:	4a87      	ldr	r2, [pc, #540]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x368>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800d42a:	23a8      	movs	r3, #168	; 0xa8
 800d42c:	4d87      	ldr	r5, [pc, #540]	; (800d64c <RemapAndLinkDMAtoUARTTx+0x36c>)
 800d42e:	58d4      	ldr	r4, [r2, r3]
 800d430:	402c      	ands	r4, r5
 800d432:	50d4      	str	r4, [r2, r3]
 800d434:	2480      	movs	r4, #128	; 0x80
 800d436:	58d5      	ldr	r5, [r2, r3]
 800d438:	0224      	lsls	r4, r4, #8
 800d43a:	432c      	orrs	r4, r5
 800d43c:	50d4      	str	r4, [r2, r3]
 800d43e:	e7cc      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800d440:	23a8      	movs	r3, #168	; 0xa8
 800d442:	4a81      	ldr	r2, [pc, #516]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x368>)
 800d444:	4d82      	ldr	r5, [pc, #520]	; (800d650 <RemapAndLinkDMAtoUARTTx+0x370>)
 800d446:	58d4      	ldr	r4, [r2, r3]
 800d448:	402c      	ands	r4, r5
 800d44a:	50d4      	str	r4, [r2, r3]
 800d44c:	2480      	movs	r4, #128	; 0x80
 800d44e:	58d5      	ldr	r5, [r2, r3]
 800d450:	0524      	lsls	r4, r4, #20
 800d452:	432c      	orrs	r4, r5
 800d454:	50d4      	str	r4, [r2, r3]
 800d456:	e7c0      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800d458:	23a8      	movs	r3, #168	; 0xa8
 800d45a:	250f      	movs	r5, #15
 800d45c:	4a78      	ldr	r2, [pc, #480]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d45e:	58d4      	ldr	r4, [r2, r3]
 800d460:	43ac      	bics	r4, r5
 800d462:	50d4      	str	r4, [r2, r3]
 800d464:	58d4      	ldr	r4, [r2, r3]
 800d466:	3d07      	subs	r5, #7
 800d468:	432c      	orrs	r4, r5
 800d46a:	50d4      	str	r4, [r2, r3]
 800d46c:	e7b5      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800d46e:	4a74      	ldr	r2, [pc, #464]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d470:	e7db      	b.n	800d42a <RemapAndLinkDMAtoUARTTx+0x14a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800d472:	23a8      	movs	r3, #168	; 0xa8
 800d474:	25f0      	movs	r5, #240	; 0xf0
 800d476:	4a74      	ldr	r2, [pc, #464]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x368>)
 800d478:	58d4      	ldr	r4, [r2, r3]
 800d47a:	43ac      	bics	r4, r5
 800d47c:	50d4      	str	r4, [r2, r3]
 800d47e:	58d4      	ldr	r4, [r2, r3]
 800d480:	3d70      	subs	r5, #112	; 0x70
 800d482:	432c      	orrs	r4, r5
 800d484:	50d4      	str	r4, [r2, r3]
 800d486:	e7a8      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d488:	680b      	ldr	r3, [r1, #0]
 800d48a:	4a67      	ldr	r2, [pc, #412]	; (800d628 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d05b      	beq.n	800d548 <RemapAndLinkDMAtoUARTTx+0x268>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d490:	4a66      	ldr	r2, [pc, #408]	; (800d62c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d100      	bne.n	800d498 <RemapAndLinkDMAtoUARTTx+0x1b8>
 800d496:	e102      	b.n	800d69e <RemapAndLinkDMAtoUARTTx+0x3be>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d498:	4a65      	ldr	r2, [pc, #404]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d100      	bne.n	800d4a0 <RemapAndLinkDMAtoUARTTx+0x1c0>
 800d49e:	e10a      	b.n	800d6b6 <RemapAndLinkDMAtoUARTTx+0x3d6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d4a0:	4a64      	ldr	r2, [pc, #400]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d100      	bne.n	800d4a8 <RemapAndLinkDMAtoUARTTx+0x1c8>
 800d4a6:	e112      	b.n	800d6ce <RemapAndLinkDMAtoUARTTx+0x3ee>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d4a8:	4a63      	ldr	r2, [pc, #396]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d100      	bne.n	800d4b0 <RemapAndLinkDMAtoUARTTx+0x1d0>
 800d4ae:	e119      	b.n	800d6e4 <RemapAndLinkDMAtoUARTTx+0x404>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d4b0:	4a62      	ldr	r2, [pc, #392]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d000      	beq.n	800d4b8 <RemapAndLinkDMAtoUARTTx+0x1d8>
 800d4b6:	e790      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800d4b8:	23a8      	movs	r3, #168	; 0xa8
 800d4ba:	4a61      	ldr	r2, [pc, #388]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d4bc:	4d61      	ldr	r5, [pc, #388]	; (800d644 <RemapAndLinkDMAtoUARTTx+0x364>)
 800d4be:	58d4      	ldr	r4, [r2, r3]
 800d4c0:	402c      	ands	r4, r5
 800d4c2:	50d4      	str	r4, [r2, r3]
 800d4c4:	24b0      	movs	r4, #176	; 0xb0
 800d4c6:	58d5      	ldr	r5, [r2, r3]
 800d4c8:	0324      	lsls	r4, r4, #12
 800d4ca:	432c      	orrs	r4, r5
 800d4cc:	50d4      	str	r4, [r2, r3]
 800d4ce:	e784      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800d4d0:	23a8      	movs	r3, #168	; 0xa8
 800d4d2:	25f0      	movs	r5, #240	; 0xf0
 800d4d4:	4a5c      	ldr	r2, [pc, #368]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x368>)
 800d4d6:	58d4      	ldr	r4, [r2, r3]
 800d4d8:	43ac      	bics	r4, r5
 800d4da:	50d4      	str	r4, [r2, r3]
 800d4dc:	58d4      	ldr	r4, [r2, r3]
 800d4de:	3d60      	subs	r5, #96	; 0x60
 800d4e0:	432c      	orrs	r4, r5
 800d4e2:	50d4      	str	r4, [r2, r3]
 800d4e4:	e779      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d4e6:	680b      	ldr	r3, [r1, #0]
 800d4e8:	4a4f      	ldr	r2, [pc, #316]	; (800d628 <RemapAndLinkDMAtoUARTTx+0x348>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d100      	bne.n	800d4f0 <RemapAndLinkDMAtoUARTTx+0x210>
 800d4ee:	e11f      	b.n	800d730 <RemapAndLinkDMAtoUARTTx+0x450>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d4f0:	4a4e      	ldr	r2, [pc, #312]	; (800d62c <RemapAndLinkDMAtoUARTTx+0x34c>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d100      	bne.n	800d4f8 <RemapAndLinkDMAtoUARTTx+0x218>
 800d4f6:	e126      	b.n	800d746 <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d4f8:	4a4d      	ldr	r2, [pc, #308]	; (800d630 <RemapAndLinkDMAtoUARTTx+0x350>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d100      	bne.n	800d500 <RemapAndLinkDMAtoUARTTx+0x220>
 800d4fe:	e12e      	b.n	800d75e <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d500:	4a4c      	ldr	r2, [pc, #304]	; (800d634 <RemapAndLinkDMAtoUARTTx+0x354>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d100      	bne.n	800d508 <RemapAndLinkDMAtoUARTTx+0x228>
 800d506:	e136      	b.n	800d776 <RemapAndLinkDMAtoUARTTx+0x496>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d508:	4a4b      	ldr	r2, [pc, #300]	; (800d638 <RemapAndLinkDMAtoUARTTx+0x358>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d100      	bne.n	800d510 <RemapAndLinkDMAtoUARTTx+0x230>
 800d50e:	e13d      	b.n	800d78c <RemapAndLinkDMAtoUARTTx+0x4ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d510:	4a4a      	ldr	r2, [pc, #296]	; (800d63c <RemapAndLinkDMAtoUARTTx+0x35c>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d000      	beq.n	800d518 <RemapAndLinkDMAtoUARTTx+0x238>
 800d516:	e760      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d518:	23a8      	movs	r3, #168	; 0xa8
 800d51a:	4a49      	ldr	r2, [pc, #292]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d51c:	4d49      	ldr	r5, [pc, #292]	; (800d644 <RemapAndLinkDMAtoUARTTx+0x364>)
 800d51e:	58d4      	ldr	r4, [r2, r3]
 800d520:	402c      	ands	r4, r5
 800d522:	50d4      	str	r4, [r2, r3]
 800d524:	24c0      	movs	r4, #192	; 0xc0
 800d526:	58d5      	ldr	r5, [r2, r3]
 800d528:	0324      	lsls	r4, r4, #12
 800d52a:	432c      	orrs	r4, r5
 800d52c:	50d4      	str	r4, [r2, r3]
 800d52e:	e754      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d530:	4a43      	ldr	r2, [pc, #268]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d532:	23a8      	movs	r3, #168	; 0xa8
 800d534:	4d45      	ldr	r5, [pc, #276]	; (800d64c <RemapAndLinkDMAtoUARTTx+0x36c>)
 800d536:	58d4      	ldr	r4, [r2, r3]
 800d538:	402c      	ands	r4, r5
 800d53a:	50d4      	str	r4, [r2, r3]
 800d53c:	24a0      	movs	r4, #160	; 0xa0
 800d53e:	58d5      	ldr	r5, [r2, r3]
 800d540:	0224      	lsls	r4, r4, #8
 800d542:	432c      	orrs	r4, r5
 800d544:	50d4      	str	r4, [r2, r3]
 800d546:	e748      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d548:	23a8      	movs	r3, #168	; 0xa8
 800d54a:	25f0      	movs	r5, #240	; 0xf0
 800d54c:	4a3e      	ldr	r2, [pc, #248]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x368>)
 800d54e:	58d4      	ldr	r4, [r2, r3]
 800d550:	43ac      	bics	r4, r5
 800d552:	50d4      	str	r4, [r2, r3]
 800d554:	58d4      	ldr	r4, [r2, r3]
 800d556:	3d40      	subs	r5, #64	; 0x40
 800d558:	432c      	orrs	r4, r5
 800d55a:	50d4      	str	r4, [r2, r3]
 800d55c:	e73d      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800d55e:	4a3a      	ldr	r2, [pc, #232]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x368>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d560:	23a8      	movs	r3, #168	; 0xa8
 800d562:	4d3a      	ldr	r5, [pc, #232]	; (800d64c <RemapAndLinkDMAtoUARTTx+0x36c>)
 800d564:	58d4      	ldr	r4, [r2, r3]
 800d566:	402c      	ands	r4, r5
 800d568:	50d4      	str	r4, [r2, r3]
 800d56a:	2490      	movs	r4, #144	; 0x90
 800d56c:	58d5      	ldr	r5, [r2, r3]
 800d56e:	0224      	lsls	r4, r4, #8
 800d570:	432c      	orrs	r4, r5
 800d572:	50d4      	str	r4, [r2, r3]
 800d574:	e731      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800d576:	23a8      	movs	r3, #168	; 0xa8
 800d578:	4a33      	ldr	r2, [pc, #204]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x368>)
 800d57a:	4d35      	ldr	r5, [pc, #212]	; (800d650 <RemapAndLinkDMAtoUARTTx+0x370>)
 800d57c:	58d4      	ldr	r4, [r2, r3]
 800d57e:	402c      	ands	r4, r5
 800d580:	50d4      	str	r4, [r2, r3]
 800d582:	2490      	movs	r4, #144	; 0x90
 800d584:	58d5      	ldr	r5, [r2, r3]
 800d586:	0524      	lsls	r4, r4, #20
 800d588:	432c      	orrs	r4, r5
 800d58a:	50d4      	str	r4, [r2, r3]
 800d58c:	e725      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800d58e:	23a8      	movs	r3, #168	; 0xa8
 800d590:	250f      	movs	r5, #15
 800d592:	4a2b      	ldr	r2, [pc, #172]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d594:	58d4      	ldr	r4, [r2, r3]
 800d596:	43ac      	bics	r4, r5
 800d598:	50d4      	str	r4, [r2, r3]
 800d59a:	58d4      	ldr	r4, [r2, r3]
 800d59c:	3d06      	subs	r5, #6
 800d59e:	432c      	orrs	r4, r5
 800d5a0:	50d4      	str	r4, [r2, r3]
 800d5a2:	e71a      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d5a4:	4a26      	ldr	r2, [pc, #152]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d5a6:	e7db      	b.n	800d560 <RemapAndLinkDMAtoUARTTx+0x280>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800d5a8:	23a8      	movs	r3, #168	; 0xa8
 800d5aa:	4a25      	ldr	r2, [pc, #148]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d5ac:	4d25      	ldr	r5, [pc, #148]	; (800d644 <RemapAndLinkDMAtoUARTTx+0x364>)
 800d5ae:	58d4      	ldr	r4, [r2, r3]
 800d5b0:	402c      	ands	r4, r5
 800d5b2:	50d4      	str	r4, [r2, r3]
 800d5b4:	2490      	movs	r4, #144	; 0x90
 800d5b6:	58d5      	ldr	r5, [r2, r3]
 800d5b8:	0324      	lsls	r4, r4, #12
 800d5ba:	432c      	orrs	r4, r5
 800d5bc:	50d4      	str	r4, [r2, r3]
 800d5be:	e70c      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d5c0:	23a8      	movs	r3, #168	; 0xa8
 800d5c2:	25f0      	movs	r5, #240	; 0xf0
 800d5c4:	4a20      	ldr	r2, [pc, #128]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x368>)
 800d5c6:	58d4      	ldr	r4, [r2, r3]
 800d5c8:	43ac      	bics	r4, r5
 800d5ca:	50d4      	str	r4, [r2, r3]
 800d5cc:	58d4      	ldr	r4, [r2, r3]
 800d5ce:	3d50      	subs	r5, #80	; 0x50
 800d5d0:	432c      	orrs	r4, r5
 800d5d2:	50d4      	str	r4, [r2, r3]
 800d5d4:	e701      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d5d6:	4a1c      	ldr	r2, [pc, #112]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x368>)
 800d5d8:	e7ab      	b.n	800d532 <RemapAndLinkDMAtoUARTTx+0x252>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d5da:	23a8      	movs	r3, #168	; 0xa8
 800d5dc:	4a1a      	ldr	r2, [pc, #104]	; (800d648 <RemapAndLinkDMAtoUARTTx+0x368>)
 800d5de:	4d1c      	ldr	r5, [pc, #112]	; (800d650 <RemapAndLinkDMAtoUARTTx+0x370>)
 800d5e0:	58d4      	ldr	r4, [r2, r3]
 800d5e2:	402c      	ands	r4, r5
 800d5e4:	50d4      	str	r4, [r2, r3]
 800d5e6:	24a0      	movs	r4, #160	; 0xa0
 800d5e8:	58d5      	ldr	r5, [r2, r3]
 800d5ea:	0524      	lsls	r4, r4, #20
 800d5ec:	432c      	orrs	r4, r5
 800d5ee:	50d4      	str	r4, [r2, r3]
 800d5f0:	e6f3      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d5f2:	23a8      	movs	r3, #168	; 0xa8
 800d5f4:	250f      	movs	r5, #15
 800d5f6:	4a12      	ldr	r2, [pc, #72]	; (800d640 <RemapAndLinkDMAtoUARTTx+0x360>)
 800d5f8:	58d4      	ldr	r4, [r2, r3]
 800d5fa:	43ac      	bics	r4, r5
 800d5fc:	50d4      	str	r4, [r2, r3]
 800d5fe:	58d4      	ldr	r4, [r2, r3]
 800d600:	3d05      	subs	r5, #5
 800d602:	432c      	orrs	r4, r5
 800d604:	50d4      	str	r4, [r2, r3]
 800d606:	e6e8      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
 800d608:	40013800 	.word	0x40013800
 800d60c:	40004400 	.word	0x40004400
 800d610:	40004800 	.word	0x40004800
 800d614:	40004c00 	.word	0x40004c00
 800d618:	40005000 	.word	0x40005000
 800d61c:	40011400 	.word	0x40011400
 800d620:	40011800 	.word	0x40011800
 800d624:	40011c00 	.word	0x40011c00
 800d628:	4002001c 	.word	0x4002001c
 800d62c:	40020044 	.word	0x40020044
 800d630:	40020080 	.word	0x40020080
 800d634:	40020408 	.word	0x40020408
 800d638:	40020444 	.word	0x40020444
 800d63c:	40020458 	.word	0x40020458
 800d640:	40020400 	.word	0x40020400
 800d644:	fff0ffff 	.word	0xfff0ffff
 800d648:	40020000 	.word	0x40020000
 800d64c:	ffff0fff 	.word	0xffff0fff
 800d650:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d654:	680b      	ldr	r3, [r1, #0]
 800d656:	4a93      	ldr	r2, [pc, #588]	; (800d8a4 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d100      	bne.n	800d65e <RemapAndLinkDMAtoUARTTx+0x37e>
 800d65c:	e098      	b.n	800d790 <RemapAndLinkDMAtoUARTTx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d65e:	4a92      	ldr	r2, [pc, #584]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d100      	bne.n	800d666 <RemapAndLinkDMAtoUARTTx+0x386>
 800d664:	e09f      	b.n	800d7a6 <RemapAndLinkDMAtoUARTTx+0x4c6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d666:	4a91      	ldr	r2, [pc, #580]	; (800d8ac <RemapAndLinkDMAtoUARTTx+0x5cc>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d100      	bne.n	800d66e <RemapAndLinkDMAtoUARTTx+0x38e>
 800d66c:	e0a7      	b.n	800d7be <RemapAndLinkDMAtoUARTTx+0x4de>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d66e:	4a90      	ldr	r2, [pc, #576]	; (800d8b0 <RemapAndLinkDMAtoUARTTx+0x5d0>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d100      	bne.n	800d676 <RemapAndLinkDMAtoUARTTx+0x396>
 800d674:	e0af      	b.n	800d7d6 <RemapAndLinkDMAtoUARTTx+0x4f6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d676:	4a8f      	ldr	r2, [pc, #572]	; (800d8b4 <RemapAndLinkDMAtoUARTTx+0x5d4>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d100      	bne.n	800d67e <RemapAndLinkDMAtoUARTTx+0x39e>
 800d67c:	e0b6      	b.n	800d7ec <RemapAndLinkDMAtoUARTTx+0x50c>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d67e:	4a8e      	ldr	r2, [pc, #568]	; (800d8b8 <RemapAndLinkDMAtoUARTTx+0x5d8>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d000      	beq.n	800d686 <RemapAndLinkDMAtoUARTTx+0x3a6>
 800d684:	e6a9      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d686:	23a8      	movs	r3, #168	; 0xa8
 800d688:	4a8c      	ldr	r2, [pc, #560]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d68a:	4d8d      	ldr	r5, [pc, #564]	; (800d8c0 <RemapAndLinkDMAtoUARTTx+0x5e0>)
 800d68c:	58d4      	ldr	r4, [r2, r3]
 800d68e:	402c      	ands	r4, r5
 800d690:	50d4      	str	r4, [r2, r3]
 800d692:	24d0      	movs	r4, #208	; 0xd0
 800d694:	58d5      	ldr	r5, [r2, r3]
 800d696:	0324      	lsls	r4, r4, #12
 800d698:	432c      	orrs	r4, r5
 800d69a:	50d4      	str	r4, [r2, r3]
 800d69c:	e69d      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d69e:	4a89      	ldr	r2, [pc, #548]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d6a0:	23a8      	movs	r3, #168	; 0xa8
 800d6a2:	4d89      	ldr	r5, [pc, #548]	; (800d8c8 <RemapAndLinkDMAtoUARTTx+0x5e8>)
 800d6a4:	58d4      	ldr	r4, [r2, r3]
 800d6a6:	402c      	ands	r4, r5
 800d6a8:	50d4      	str	r4, [r2, r3]
 800d6aa:	24b0      	movs	r4, #176	; 0xb0
 800d6ac:	58d5      	ldr	r5, [r2, r3]
 800d6ae:	0224      	lsls	r4, r4, #8
 800d6b0:	432c      	orrs	r4, r5
 800d6b2:	50d4      	str	r4, [r2, r3]
 800d6b4:	e691      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d6b6:	23a8      	movs	r3, #168	; 0xa8
 800d6b8:	4a82      	ldr	r2, [pc, #520]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
 800d6ba:	4d84      	ldr	r5, [pc, #528]	; (800d8cc <RemapAndLinkDMAtoUARTTx+0x5ec>)
 800d6bc:	58d4      	ldr	r4, [r2, r3]
 800d6be:	402c      	ands	r4, r5
 800d6c0:	50d4      	str	r4, [r2, r3]
 800d6c2:	24b0      	movs	r4, #176	; 0xb0
 800d6c4:	58d5      	ldr	r5, [r2, r3]
 800d6c6:	0524      	lsls	r4, r4, #20
 800d6c8:	432c      	orrs	r4, r5
 800d6ca:	50d4      	str	r4, [r2, r3]
 800d6cc:	e685      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d6ce:	23a8      	movs	r3, #168	; 0xa8
 800d6d0:	250f      	movs	r5, #15
 800d6d2:	4a7a      	ldr	r2, [pc, #488]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d6d4:	58d4      	ldr	r4, [r2, r3]
 800d6d6:	43ac      	bics	r4, r5
 800d6d8:	50d4      	str	r4, [r2, r3]
 800d6da:	58d4      	ldr	r4, [r2, r3]
 800d6dc:	3d04      	subs	r5, #4
 800d6de:	432c      	orrs	r4, r5
 800d6e0:	50d4      	str	r4, [r2, r3]
 800d6e2:	e67a      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d6e4:	4a75      	ldr	r2, [pc, #468]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d6e6:	e7db      	b.n	800d6a0 <RemapAndLinkDMAtoUARTTx+0x3c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d6e8:	680b      	ldr	r3, [r1, #0]
 800d6ea:	4a6e      	ldr	r2, [pc, #440]	; (800d8a4 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d07f      	beq.n	800d7f0 <RemapAndLinkDMAtoUARTTx+0x510>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d6f0:	4a6d      	ldr	r2, [pc, #436]	; (800d8a8 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d100      	bne.n	800d6f8 <RemapAndLinkDMAtoUARTTx+0x418>
 800d6f6:	e086      	b.n	800d806 <RemapAndLinkDMAtoUARTTx+0x526>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d6f8:	4a6c      	ldr	r2, [pc, #432]	; (800d8ac <RemapAndLinkDMAtoUARTTx+0x5cc>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d100      	bne.n	800d700 <RemapAndLinkDMAtoUARTTx+0x420>
 800d6fe:	e08e      	b.n	800d81e <RemapAndLinkDMAtoUARTTx+0x53e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d700:	4a6b      	ldr	r2, [pc, #428]	; (800d8b0 <RemapAndLinkDMAtoUARTTx+0x5d0>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d100      	bne.n	800d708 <RemapAndLinkDMAtoUARTTx+0x428>
 800d706:	e096      	b.n	800d836 <RemapAndLinkDMAtoUARTTx+0x556>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d708:	4a6a      	ldr	r2, [pc, #424]	; (800d8b4 <RemapAndLinkDMAtoUARTTx+0x5d4>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d100      	bne.n	800d710 <RemapAndLinkDMAtoUARTTx+0x430>
 800d70e:	e09d      	b.n	800d84c <RemapAndLinkDMAtoUARTTx+0x56c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d710:	4a69      	ldr	r2, [pc, #420]	; (800d8b8 <RemapAndLinkDMAtoUARTTx+0x5d8>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d000      	beq.n	800d718 <RemapAndLinkDMAtoUARTTx+0x438>
 800d716:	e660      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d718:	23a8      	movs	r3, #168	; 0xa8
 800d71a:	4a68      	ldr	r2, [pc, #416]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d71c:	4d68      	ldr	r5, [pc, #416]	; (800d8c0 <RemapAndLinkDMAtoUARTTx+0x5e0>)
 800d71e:	58d4      	ldr	r4, [r2, r3]
 800d720:	402c      	ands	r4, r5
 800d722:	50d4      	str	r4, [r2, r3]
 800d724:	24e0      	movs	r4, #224	; 0xe0
 800d726:	58d5      	ldr	r5, [r2, r3]
 800d728:	0324      	lsls	r4, r4, #12
 800d72a:	432c      	orrs	r4, r5
 800d72c:	50d4      	str	r4, [r2, r3]
 800d72e:	e654      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d730:	23a8      	movs	r3, #168	; 0xa8
 800d732:	25f0      	movs	r5, #240	; 0xf0
 800d734:	4a63      	ldr	r2, [pc, #396]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
 800d736:	58d4      	ldr	r4, [r2, r3]
 800d738:	43ac      	bics	r4, r5
 800d73a:	50d4      	str	r4, [r2, r3]
 800d73c:	58d4      	ldr	r4, [r2, r3]
 800d73e:	3d30      	subs	r5, #48	; 0x30
 800d740:	432c      	orrs	r4, r5
 800d742:	50d4      	str	r4, [r2, r3]
 800d744:	e649      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d746:	4a5f      	ldr	r2, [pc, #380]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d748:	23a8      	movs	r3, #168	; 0xa8
 800d74a:	4d5f      	ldr	r5, [pc, #380]	; (800d8c8 <RemapAndLinkDMAtoUARTTx+0x5e8>)
 800d74c:	58d4      	ldr	r4, [r2, r3]
 800d74e:	402c      	ands	r4, r5
 800d750:	50d4      	str	r4, [r2, r3]
 800d752:	24c0      	movs	r4, #192	; 0xc0
 800d754:	58d5      	ldr	r5, [r2, r3]
 800d756:	0224      	lsls	r4, r4, #8
 800d758:	432c      	orrs	r4, r5
 800d75a:	50d4      	str	r4, [r2, r3]
 800d75c:	e63d      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d75e:	23a8      	movs	r3, #168	; 0xa8
 800d760:	4a58      	ldr	r2, [pc, #352]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
 800d762:	4d5a      	ldr	r5, [pc, #360]	; (800d8cc <RemapAndLinkDMAtoUARTTx+0x5ec>)
 800d764:	58d4      	ldr	r4, [r2, r3]
 800d766:	402c      	ands	r4, r5
 800d768:	50d4      	str	r4, [r2, r3]
 800d76a:	24c0      	movs	r4, #192	; 0xc0
 800d76c:	58d5      	ldr	r5, [r2, r3]
 800d76e:	0524      	lsls	r4, r4, #20
 800d770:	432c      	orrs	r4, r5
 800d772:	50d4      	str	r4, [r2, r3]
 800d774:	e631      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d776:	23a8      	movs	r3, #168	; 0xa8
 800d778:	250f      	movs	r5, #15
 800d77a:	4a50      	ldr	r2, [pc, #320]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d77c:	58d4      	ldr	r4, [r2, r3]
 800d77e:	43ac      	bics	r4, r5
 800d780:	50d4      	str	r4, [r2, r3]
 800d782:	58d4      	ldr	r4, [r2, r3]
 800d784:	3d03      	subs	r5, #3
 800d786:	432c      	orrs	r4, r5
 800d788:	50d4      	str	r4, [r2, r3]
 800d78a:	e626      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d78c:	4a4b      	ldr	r2, [pc, #300]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d78e:	e7db      	b.n	800d748 <RemapAndLinkDMAtoUARTTx+0x468>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d790:	23a8      	movs	r3, #168	; 0xa8
 800d792:	25f0      	movs	r5, #240	; 0xf0
 800d794:	4a4b      	ldr	r2, [pc, #300]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
 800d796:	58d4      	ldr	r4, [r2, r3]
 800d798:	43ac      	bics	r4, r5
 800d79a:	50d4      	str	r4, [r2, r3]
 800d79c:	58d4      	ldr	r4, [r2, r3]
 800d79e:	3d20      	subs	r5, #32
 800d7a0:	432c      	orrs	r4, r5
 800d7a2:	50d4      	str	r4, [r2, r3]
 800d7a4:	e619      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d7a6:	4a47      	ldr	r2, [pc, #284]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d7a8:	23a8      	movs	r3, #168	; 0xa8
 800d7aa:	4d47      	ldr	r5, [pc, #284]	; (800d8c8 <RemapAndLinkDMAtoUARTTx+0x5e8>)
 800d7ac:	58d4      	ldr	r4, [r2, r3]
 800d7ae:	402c      	ands	r4, r5
 800d7b0:	50d4      	str	r4, [r2, r3]
 800d7b2:	24d0      	movs	r4, #208	; 0xd0
 800d7b4:	58d5      	ldr	r5, [r2, r3]
 800d7b6:	0224      	lsls	r4, r4, #8
 800d7b8:	432c      	orrs	r4, r5
 800d7ba:	50d4      	str	r4, [r2, r3]
 800d7bc:	e60d      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d7be:	23a8      	movs	r3, #168	; 0xa8
 800d7c0:	4a40      	ldr	r2, [pc, #256]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
 800d7c2:	4d42      	ldr	r5, [pc, #264]	; (800d8cc <RemapAndLinkDMAtoUARTTx+0x5ec>)
 800d7c4:	58d4      	ldr	r4, [r2, r3]
 800d7c6:	402c      	ands	r4, r5
 800d7c8:	50d4      	str	r4, [r2, r3]
 800d7ca:	24d0      	movs	r4, #208	; 0xd0
 800d7cc:	58d5      	ldr	r5, [r2, r3]
 800d7ce:	0524      	lsls	r4, r4, #20
 800d7d0:	432c      	orrs	r4, r5
 800d7d2:	50d4      	str	r4, [r2, r3]
 800d7d4:	e601      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d7d6:	23a8      	movs	r3, #168	; 0xa8
 800d7d8:	250f      	movs	r5, #15
 800d7da:	4a38      	ldr	r2, [pc, #224]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d7dc:	58d4      	ldr	r4, [r2, r3]
 800d7de:	43ac      	bics	r4, r5
 800d7e0:	50d4      	str	r4, [r2, r3]
 800d7e2:	58d4      	ldr	r4, [r2, r3]
 800d7e4:	3d02      	subs	r5, #2
 800d7e6:	432c      	orrs	r4, r5
 800d7e8:	50d4      	str	r4, [r2, r3]
 800d7ea:	e5f6      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d7ec:	4a33      	ldr	r2, [pc, #204]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d7ee:	e7db      	b.n	800d7a8 <RemapAndLinkDMAtoUARTTx+0x4c8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d7f0:	23a8      	movs	r3, #168	; 0xa8
 800d7f2:	25f0      	movs	r5, #240	; 0xf0
 800d7f4:	4a33      	ldr	r2, [pc, #204]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
 800d7f6:	58d4      	ldr	r4, [r2, r3]
 800d7f8:	43ac      	bics	r4, r5
 800d7fa:	50d4      	str	r4, [r2, r3]
 800d7fc:	58d4      	ldr	r4, [r2, r3]
 800d7fe:	3d10      	subs	r5, #16
 800d800:	432c      	orrs	r4, r5
 800d802:	50d4      	str	r4, [r2, r3]
 800d804:	e5e9      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d806:	4a2f      	ldr	r2, [pc, #188]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d808:	23a8      	movs	r3, #168	; 0xa8
 800d80a:	4d2f      	ldr	r5, [pc, #188]	; (800d8c8 <RemapAndLinkDMAtoUARTTx+0x5e8>)
 800d80c:	58d4      	ldr	r4, [r2, r3]
 800d80e:	402c      	ands	r4, r5
 800d810:	50d4      	str	r4, [r2, r3]
 800d812:	24e0      	movs	r4, #224	; 0xe0
 800d814:	58d5      	ldr	r5, [r2, r3]
 800d816:	0224      	lsls	r4, r4, #8
 800d818:	432c      	orrs	r4, r5
 800d81a:	50d4      	str	r4, [r2, r3]
 800d81c:	e5dd      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d81e:	23a8      	movs	r3, #168	; 0xa8
 800d820:	4a28      	ldr	r2, [pc, #160]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
 800d822:	4d2a      	ldr	r5, [pc, #168]	; (800d8cc <RemapAndLinkDMAtoUARTTx+0x5ec>)
 800d824:	58d4      	ldr	r4, [r2, r3]
 800d826:	402c      	ands	r4, r5
 800d828:	50d4      	str	r4, [r2, r3]
 800d82a:	24e0      	movs	r4, #224	; 0xe0
 800d82c:	58d5      	ldr	r5, [r2, r3]
 800d82e:	0524      	lsls	r4, r4, #20
 800d830:	432c      	orrs	r4, r5
 800d832:	50d4      	str	r4, [r2, r3]
 800d834:	e5d1      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d836:	23a8      	movs	r3, #168	; 0xa8
 800d838:	250f      	movs	r5, #15
 800d83a:	4a20      	ldr	r2, [pc, #128]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d83c:	58d4      	ldr	r4, [r2, r3]
 800d83e:	43ac      	bics	r4, r5
 800d840:	50d4      	str	r4, [r2, r3]
 800d842:	58d4      	ldr	r4, [r2, r3]
 800d844:	3d01      	subs	r5, #1
 800d846:	432c      	orrs	r4, r5
 800d848:	50d4      	str	r4, [r2, r3]
 800d84a:	e5c6      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d84c:	4a1b      	ldr	r2, [pc, #108]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d84e:	e7db      	b.n	800d808 <RemapAndLinkDMAtoUARTTx+0x528>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d850:	23a8      	movs	r3, #168	; 0xa8
 800d852:	26f0      	movs	r6, #240	; 0xf0
 800d854:	4a1b      	ldr	r2, [pc, #108]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
 800d856:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d858:	43b5      	bics	r5, r6
 800d85a:	50d5      	str	r5, [r2, r3]
 800d85c:	58d4      	ldr	r4, [r2, r3]
 800d85e:	4334      	orrs	r4, r6
 800d860:	50d4      	str	r4, [r2, r3]
 800d862:	e5ba      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d864:	4a17      	ldr	r2, [pc, #92]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d866:	23a8      	movs	r3, #168	; 0xa8
 800d868:	4d17      	ldr	r5, [pc, #92]	; (800d8c8 <RemapAndLinkDMAtoUARTTx+0x5e8>)
 800d86a:	58d4      	ldr	r4, [r2, r3]
 800d86c:	402c      	ands	r4, r5
 800d86e:	50d4      	str	r4, [r2, r3]
 800d870:	24f0      	movs	r4, #240	; 0xf0
 800d872:	58d5      	ldr	r5, [r2, r3]
 800d874:	0224      	lsls	r4, r4, #8
 800d876:	432c      	orrs	r4, r5
 800d878:	50d4      	str	r4, [r2, r3]
 800d87a:	e5ae      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d87c:	23a8      	movs	r3, #168	; 0xa8
 800d87e:	4a11      	ldr	r2, [pc, #68]	; (800d8c4 <RemapAndLinkDMAtoUARTTx+0x5e4>)
 800d880:	4d12      	ldr	r5, [pc, #72]	; (800d8cc <RemapAndLinkDMAtoUARTTx+0x5ec>)
 800d882:	58d4      	ldr	r4, [r2, r3]
 800d884:	402c      	ands	r4, r5
 800d886:	50d4      	str	r4, [r2, r3]
 800d888:	24f0      	movs	r4, #240	; 0xf0
 800d88a:	58d5      	ldr	r5, [r2, r3]
 800d88c:	0524      	lsls	r4, r4, #20
 800d88e:	432c      	orrs	r4, r5
 800d890:	50d4      	str	r4, [r2, r3]
 800d892:	e5a2      	b.n	800d3da <RemapAndLinkDMAtoUARTTx+0xfa>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d894:	23a8      	movs	r3, #168	; 0xa8
 800d896:	4a09      	ldr	r2, [pc, #36]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d898:	260f      	movs	r6, #15
 800d89a:	58d5      	ldr	r5, [r2, r3]
 800d89c:	e7dc      	b.n	800d858 <RemapAndLinkDMAtoUARTTx+0x578>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d89e:	4a07      	ldr	r2, [pc, #28]	; (800d8bc <RemapAndLinkDMAtoUARTTx+0x5dc>)
 800d8a0:	e7e1      	b.n	800d866 <RemapAndLinkDMAtoUARTTx+0x586>
 800d8a2:	46c0      	nop			; (mov r8, r8)
 800d8a4:	4002001c 	.word	0x4002001c
 800d8a8:	40020044 	.word	0x40020044
 800d8ac:	40020080 	.word	0x40020080
 800d8b0:	40020408 	.word	0x40020408
 800d8b4:	40020444 	.word	0x40020444
 800d8b8:	40020458 	.word	0x40020458
 800d8bc:	40020400 	.word	0x40020400
 800d8c0:	fff0ffff 	.word	0xfff0ffff
 800d8c4:	40020000 	.word	0x40020000
 800d8c8:	ffff0fff 	.word	0xffff0fff
 800d8cc:	f0ffffff 	.word	0xf0ffffff

0800d8d0 <DMA_MSG_TX_Setup>:
	if (msgTxDMA[0].Parent == NULL)
 800d8d0:	4b0c      	ldr	r3, [pc, #48]	; (800d904 <DMA_MSG_TX_Setup+0x34>)
{	
 800d8d2:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d8d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8d6:	2a00      	cmp	r2, #0
 800d8d8:	d00a      	beq.n	800d8f0 <DMA_MSG_TX_Setup+0x20>
	else if (msgTxDMA[1].Parent == NULL)
 800d8da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d8dc:	2a00      	cmp	r2, #0
 800d8de:	d006      	beq.n	800d8ee <DMA_MSG_TX_Setup+0x1e>
	else if (msgTxDMA[2].Parent == NULL)
 800d8e0:	2294      	movs	r2, #148	; 0x94
 800d8e2:	589a      	ldr	r2, [r3, r2]
 800d8e4:	2a00      	cmp	r2, #0
 800d8e6:	d104      	bne.n	800d8f2 <DMA_MSG_TX_Setup+0x22>
		hDMA = &msgTxDMA[2];  
 800d8e8:	3370      	adds	r3, #112	; 0x70
 800d8ea:	001c      	movs	r4, r3
 800d8ec:	e001      	b.n	800d8f2 <DMA_MSG_TX_Setup+0x22>
		hDMA = &msgTxDMA[1];
 800d8ee:	3338      	adds	r3, #56	; 0x38
 800d8f0:	001c      	movs	r4, r3
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d8f2:	0021      	movs	r1, r4
 800d8f4:	f7ff fcf4 	bl	800d2e0 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	0020      	movs	r0, r4
 800d8fc:	f7ff f8ae 	bl	800ca5c <SetupDMAInterrupts>
}
 800d900:	bd10      	pop	{r4, pc}
 800d902:	46c0      	nop			; (mov r8, r8)
 800d904:	200019d8 	.word	0x200019d8

0800d908 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d908:	2310      	movs	r3, #16
 800d90a:	4807      	ldr	r0, [pc, #28]	; (800d928 <CRC_Init+0x20>)
{
 800d90c:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d90e:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800d910:	4b06      	ldr	r3, [pc, #24]	; (800d92c <CRC_Init+0x24>)
 800d912:	6003      	str	r3, [r0, #0]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d914:	2300      	movs	r3, #0
 800d916:	8083      	strh	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800d918:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800d91a:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d91c:	3303      	adds	r3, #3
 800d91e:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d920:	f003 ffd6 	bl	80118d0 <HAL_CRC_Init>
}
 800d924:	bd10      	pop	{r4, pc}
 800d926:	46c0      	nop			; (mov r8, r8)
 800d928:	20006e70 	.word	0x20006e70
 800d92c:	40023000 	.word	0x40023000

0800d930 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d930:	2340      	movs	r3, #64	; 0x40
 800d932:	4a05      	ldr	r2, [pc, #20]	; (800d948 <HAL_CRC_MspInit+0x18>)
{
 800d934:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800d936:	6951      	ldr	r1, [r2, #20]
 800d938:	4319      	orrs	r1, r3
 800d93a:	6151      	str	r1, [r2, #20]
 800d93c:	6952      	ldr	r2, [r2, #20]
 800d93e:	4013      	ands	r3, r2
 800d940:	9301      	str	r3, [sp, #4]
 800d942:	9b01      	ldr	r3, [sp, #4]
}
 800d944:	b002      	add	sp, #8
 800d946:	4770      	bx	lr
 800d948:	40021000 	.word	0x40021000

0800d94c <CalculateCRC8>:
/*-----------------------------------------------------------*/
/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94e:	0004      	movs	r4, r0
 800d950:	000d      	movs	r5, r1
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800d952:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800d954:	2c00      	cmp	r4, #0
 800d956:	d001      	beq.n	800d95c <CalculateCRC8+0x10>
 800d958:	2900      	cmp	r1, #0
 800d95a:	d100      	bne.n	800d95e <CalculateCRC8+0x12>
}
 800d95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d95e:	4f09      	ldr	r7, [pc, #36]	; (800d984 <CalculateCRC8+0x38>)
 800d960:	088e      	lsrs	r6, r1, #2
 800d962:	0032      	movs	r2, r6
 800d964:	0021      	movs	r1, r4
 800d966:	0038      	movs	r0, r7
 800d968:	f004 f80a 	bl	8011980 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800d96c:	07ab      	lsls	r3, r5, #30
 800d96e:	d101      	bne.n	800d974 <CalculateCRC8+0x28>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800d970:	b2c0      	uxtb	r0, r0
 800d972:	e7f3      	b.n	800d95c <CalculateCRC8+0x10>
 800d974:	0131      	lsls	r1, r6, #4
 800d976:	2201      	movs	r2, #1
 800d978:	0038      	movs	r0, r7
 800d97a:	1861      	adds	r1, r4, r1
 800d97c:	f003 ffd6 	bl	801192c <HAL_CRC_Accumulate>
 800d980:	b2c0      	uxtb	r0, r0
 800d982:	e7eb      	b.n	800d95c <CalculateCRC8+0x10>
 800d984:	20006e70 	.word	0x20006e70

0800d988 <MEMS_GPIO_Init>:
  /**I2C2 GPIO Configuration
  PB13     ------> I2C2_SCL
  PB14     ------> I2C2_SDA
  */
	
  GPIO_InitStruct.Pin = _MEMS_I2C2_SCL_PIN;
 800d988:	2380      	movs	r3, #128	; 0x80
{
 800d98a:	b510      	push	{r4, lr}
  GPIO_InitStruct.Pin = _MEMS_I2C2_SCL_PIN;
 800d98c:	019b      	lsls	r3, r3, #6
{
 800d98e:	b086      	sub	sp, #24
  GPIO_InitStruct.Pin = _MEMS_I2C2_SCL_PIN;
 800d990:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d992:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
  HAL_GPIO_Init(_MEMS_I2C2_SCL_PORT, &GPIO_InitStruct);
 800d994:	4c13      	ldr	r4, [pc, #76]	; (800d9e4 <MEMS_GPIO_Init+0x5c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d996:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d998:	3b11      	subs	r3, #17
 800d99a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d99c:	3302      	adds	r3, #2
  HAL_GPIO_Init(_MEMS_I2C2_SCL_PORT, &GPIO_InitStruct);
 800d99e:	0020      	movs	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d9a0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(_MEMS_I2C2_SCL_PORT, &GPIO_InitStruct);
 800d9a2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800d9a4:	3302      	adds	r3, #2
 800d9a6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(_MEMS_I2C2_SCL_PORT, &GPIO_InitStruct);
 800d9a8:	f004 fea4 	bl	80126f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = _MEMS_I2C2_SDA_PIN;
 800d9ac:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(_MEMS_I2C2_SDA_PORT, &GPIO_InitStruct);
 800d9ae:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = _MEMS_I2C2_SDA_PIN;
 800d9b0:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(_MEMS_I2C2_SDA_PORT, &GPIO_InitStruct);
 800d9b2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = _MEMS_I2C2_SDA_PIN;
 800d9b4:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(_MEMS_I2C2_SDA_PORT, &GPIO_InitStruct);
 800d9b6:	f004 fe9d 	bl	80126f4 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C2_CLK_ENABLE();
 800d9ba:	2080      	movs	r0, #128	; 0x80
 800d9bc:	4a0a      	ldr	r2, [pc, #40]	; (800d9e8 <MEMS_GPIO_Init+0x60>)
 800d9be:	03c0      	lsls	r0, r0, #15
 800d9c0:	69d1      	ldr	r1, [r2, #28]
 800d9c2:	4301      	orrs	r1, r0
 800d9c4:	61d1      	str	r1, [r2, #28]
 800d9c6:	69d3      	ldr	r3, [r2, #28]
	
  /* I2C2 interrupt Init */
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 800d9c8:	2101      	movs	r1, #1
  __HAL_RCC_I2C2_CLK_ENABLE();
 800d9ca:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 800d9cc:	2200      	movs	r2, #0
  __HAL_RCC_I2C2_CLK_ENABLE();
 800d9ce:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 800d9d0:	2018      	movs	r0, #24
  __HAL_RCC_I2C2_CLK_ENABLE();
 800d9d2:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 800d9d4:	f003 fec6 	bl	8011764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800d9d8:	2018      	movs	r0, #24
 800d9da:	f003 fef5 	bl	80117c8 <HAL_NVIC_EnableIRQ>
}
 800d9de:	b006      	add	sp, #24
 800d9e0:	bd10      	pop	{r4, pc}
 800d9e2:	46c0      	nop			; (mov r8, r8)
 800d9e4:	48000400 	.word	0x48000400
 800d9e8:	40021000 	.word	0x40021000

0800d9ec <GPIO_Init>:
  __GPIOC_CLK_ENABLE();
 800d9ec:	2080      	movs	r0, #128	; 0x80
 800d9ee:	4b20      	ldr	r3, [pc, #128]	; (800da70 <GPIO_Init+0x84>)
 800d9f0:	0300      	lsls	r0, r0, #12
 800d9f2:	6959      	ldr	r1, [r3, #20]
{
 800d9f4:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800d9f6:	4301      	orrs	r1, r0
 800d9f8:	6159      	str	r1, [r3, #20]
 800d9fa:	695a      	ldr	r2, [r3, #20]
{
 800d9fc:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800d9fe:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800da00:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800da02:	9200      	str	r2, [sp, #0]
 800da04:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800da06:	6959      	ldr	r1, [r3, #20]
 800da08:	0280      	lsls	r0, r0, #10
 800da0a:	4301      	orrs	r1, r0
 800da0c:	6159      	str	r1, [r3, #20]
 800da0e:	695a      	ldr	r2, [r3, #20]
 800da10:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800da12:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800da14:	9201      	str	r2, [sp, #4]
 800da16:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800da18:	6959      	ldr	r1, [r3, #20]
 800da1a:	0340      	lsls	r0, r0, #13
 800da1c:	4301      	orrs	r1, r0
 800da1e:	6159      	str	r1, [r3, #20]
 800da20:	695a      	ldr	r2, [r3, #20]
 800da22:	4002      	ands	r2, r0
	__GPIOB_CLK_ENABLE();
 800da24:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800da26:	9202      	str	r2, [sp, #8]
 800da28:	9a02      	ldr	r2, [sp, #8]
	__GPIOB_CLK_ENABLE();
 800da2a:	6959      	ldr	r1, [r3, #20]
 800da2c:	02c0      	lsls	r0, r0, #11
 800da2e:	4301      	orrs	r1, r0
 800da30:	6159      	str	r1, [r3, #20]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800da32:	2180      	movs	r1, #128	; 0x80
	__GPIOB_CLK_ENABLE();
 800da34:	695a      	ldr	r2, [r3, #20]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800da36:	03c9      	lsls	r1, r1, #15
	__GPIOB_CLK_ENABLE();
 800da38:	4002      	ands	r2, r0
 800da3a:	9203      	str	r2, [sp, #12]
 800da3c:	9a03      	ldr	r2, [sp, #12]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800da3e:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800da40:	2090      	movs	r0, #144	; 0x90
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800da42:	430a      	orrs	r2, r1
 800da44:	615a      	str	r2, [r3, #20]
 800da46:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800da48:	05c0      	lsls	r0, r0, #23
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800da4a:	400b      	ands	r3, r1
 800da4c:	9304      	str	r3, [sp, #16]
 800da4e:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800da50:	2380      	movs	r3, #128	; 0x80
 800da52:	011b      	lsls	r3, r3, #4
 800da54:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800da56:	2301      	movs	r3, #1
 800da58:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da5a:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800da5c:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da5e:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800da60:	3303      	adds	r3, #3
 800da62:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800da64:	f004 fe46 	bl	80126f4 <HAL_GPIO_Init>
	MEMS_GPIO_Init();
 800da68:	f7ff ff8e 	bl	800d988 <MEMS_GPIO_Init>
}
 800da6c:	b00b      	add	sp, #44	; 0x2c
 800da6e:	bd00      	pop	{pc}
 800da70:	40021000 	.word	0x40021000

0800da74 <GetPortGPIOs>:
/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da76:	000e      	movs	r6, r1
 800da78:	0015      	movs	r5, r2
 800da7a:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800da7c:	f000 fe70 	bl	800e760 <GetUart>
 800da80:	0004      	movs	r4, r0
	
	if (huart == &huart1) 
 800da82:	482b      	ldr	r0, [pc, #172]	; (800db30 <GetPortGPIOs+0xbc>)
 800da84:	4284      	cmp	r4, r0
 800da86:	d025      	beq.n	800dad4 <GetPortGPIOs+0x60>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800da88:	4b2a      	ldr	r3, [pc, #168]	; (800db34 <GetPortGPIOs+0xc0>)
 800da8a:	429c      	cmp	r4, r3
 800da8c:	d017      	beq.n	800dabe <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800da8e:	4b2a      	ldr	r3, [pc, #168]	; (800db38 <GetPortGPIOs+0xc4>)
 800da90:	429c      	cmp	r4, r3
 800da92:	d036      	beq.n	800db02 <GetPortGPIOs+0x8e>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800da94:	4b29      	ldr	r3, [pc, #164]	; (800db3c <GetPortGPIOs+0xc8>)
 800da96:	429c      	cmp	r4, r3
 800da98:	d03f      	beq.n	800db1a <GetPortGPIOs+0xa6>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800da9a:	4b29      	ldr	r3, [pc, #164]	; (800db40 <GetPortGPIOs+0xcc>)
 800da9c:	429c      	cmp	r4, r3
 800da9e:	d026      	beq.n	800daee <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800daa0:	4b28      	ldr	r3, [pc, #160]	; (800db44 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800daa2:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800daa4:	429c      	cmp	r4, r3
 800daa6:	d114      	bne.n	800dad2 <GetPortGPIOs+0x5e>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800daa8:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800daaa:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800daac:	05db      	lsls	r3, r3, #23
 800daae:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800dab0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800dab2:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800dab4:	2320      	movs	r3, #32
 800dab6:	9a06      	ldr	r2, [sp, #24]
	BOS_Status result = BOS_OK;
 800dab8:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800daba:	8013      	strh	r3, [r2, #0]
 800dabc:	e009      	b.n	800dad2 <GetPortGPIOs+0x5e>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800dabe:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800dac0:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800dac2:	05db      	lsls	r3, r3, #23
 800dac4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800dac6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800dac8:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800daca:	2308      	movs	r3, #8
	BOS_Status result = BOS_OK;
 800dacc:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800dace:	9a06      	ldr	r2, [sp, #24]
 800dad0:	8013      	strh	r3, [r2, #0]
	
	return result;	
}
 800dad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800dad4:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800dad6:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800dad8:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800dada:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800dadc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800dade:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800dae0:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART1_RX_PIN;
 800dae2:	2380      	movs	r3, #128	; 0x80
 800dae4:	9a06      	ldr	r2, [sp, #24]
 800dae6:	00db      	lsls	r3, r3, #3
	BOS_Status result = BOS_OK;
 800dae8:	2000      	movs	r0, #0
		*RX_Pin = USART1_RX_PIN;
 800daea:	8013      	strh	r3, [r2, #0]
 800daec:	e7f1      	b.n	800dad2 <GetPortGPIOs+0x5e>
		*TX_Pin = USART5_TX_PIN;
 800daee:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800daf0:	4b15      	ldr	r3, [pc, #84]	; (800db48 <GetPortGPIOs+0xd4>)
	BOS_Status result = BOS_OK;
 800daf2:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800daf4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800daf6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800daf8:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART5_RX_PIN;
 800dafa:	2310      	movs	r3, #16
 800dafc:	9a06      	ldr	r2, [sp, #24]
 800dafe:	8013      	strh	r3, [r2, #0]
 800db00:	e7e7      	b.n	800dad2 <GetPortGPIOs+0x5e>
		*TX_Pin = USART3_TX_PIN;
 800db02:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800db04:	4b10      	ldr	r3, [pc, #64]	; (800db48 <GetPortGPIOs+0xd4>)
		*TX_Pin = USART3_TX_PIN;
 800db06:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800db08:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800db0a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800db0c:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800db0e:	2380      	movs	r3, #128	; 0x80
 800db10:	9a06      	ldr	r2, [sp, #24]
 800db12:	011b      	lsls	r3, r3, #4
	BOS_Status result = BOS_OK;
 800db14:	2000      	movs	r0, #0
		*RX_Pin = USART3_RX_PIN;
 800db16:	8013      	strh	r3, [r2, #0]
 800db18:	e7db      	b.n	800dad2 <GetPortGPIOs+0x5e>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800db1a:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART4_TX_PIN;
 800db1c:	2201      	movs	r2, #1
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800db1e:	05db      	lsls	r3, r3, #23
 800db20:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800db22:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800db24:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART4_RX_PIN;
 800db26:	2302      	movs	r3, #2
 800db28:	9a06      	ldr	r2, [sp, #24]
	BOS_Status result = BOS_OK;
 800db2a:	2000      	movs	r0, #0
		*RX_Pin = USART4_RX_PIN;
 800db2c:	8013      	strh	r3, [r2, #0]
 800db2e:	e7d0      	b.n	800dad2 <GetPortGPIOs+0x5e>
 800db30:	20006cb0 	.word	0x20006cb0
 800db34:	20006e00 	.word	0x20006e00
 800db38:	20006bd0 	.word	0x20006bd0
 800db3c:	20006d90 	.word	0x20006d90
 800db40:	20006c40 	.word	0x20006c40
 800db44:	20006d20 	.word	0x20006d20
 800db48:	48000400 	.word	0x48000400

0800db4c <IsFactoryReset>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800db4c:	2080      	movs	r0, #128	; 0x80
 800db4e:	4b39      	ldr	r3, [pc, #228]	; (800dc34 <IsFactoryReset+0xe8>)
 800db50:	0280      	lsls	r0, r0, #10
 800db52:	6959      	ldr	r1, [r3, #20]
{
 800db54:	b530      	push	{r4, r5, lr}
  __GPIOA_CLK_ENABLE();
 800db56:	4301      	orrs	r1, r0
 800db58:	6159      	str	r1, [r3, #20]
 800db5a:	695a      	ldr	r2, [r3, #20]
{
 800db5c:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800db5e:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800db60:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800db62:	9209      	str	r2, [sp, #36]	; 0x24
 800db64:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800db66:	6959      	ldr	r1, [r3, #20]
 800db68:	02c0      	lsls	r0, r0, #11
 800db6a:	4301      	orrs	r1, r0
 800db6c:	6159      	str	r1, [r3, #20]
 800db6e:	695a      	ldr	r2, [r3, #20]
  __GPIOC_CLK_ENABLE();
	__GPIOD_CLK_ENABLE();
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800db70:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800db72:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800db74:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800db76:	920a      	str	r2, [sp, #40]	; 0x28
 800db78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800db7a:	6959      	ldr	r1, [r3, #20]
 800db7c:	0300      	lsls	r0, r0, #12
 800db7e:	4301      	orrs	r1, r0
 800db80:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800db82:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800db84:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800db86:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800db88:	4002      	ands	r2, r0
 800db8a:	920b      	str	r2, [sp, #44]	; 0x2c
 800db8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800db8e:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800db90:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800db92:	430a      	orrs	r2, r1
 800db94:	615a      	str	r2, [r3, #20]
 800db96:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800db98:	aa03      	add	r2, sp, #12
	__GPIOD_CLK_ENABLE();
 800db9a:	400b      	ands	r3, r1
 800db9c:	930c      	str	r3, [sp, #48]	; 0x30
 800db9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800dba0:	230e      	movs	r3, #14
 800dba2:	446b      	add	r3, sp
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	a905      	add	r1, sp, #20
 800dba8:	ab06      	add	r3, sp, #24
 800dbaa:	2001      	movs	r0, #1
 800dbac:	f7ff ff62 	bl	800da74 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800dbb0:	aa04      	add	r2, sp, #16
 800dbb2:	ab08      	add	r3, sp, #32
 800dbb4:	a907      	add	r1, sp, #28
 800dbb6:	2006      	movs	r0, #6
 800dbb8:	9400      	str	r4, [sp, #0]
 800dbba:	f7ff ff5b 	bl	800da74 <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800dbc2:	466b      	mov	r3, sp
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbc4:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800dbc6:	899b      	ldrh	r3, [r3, #12]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800dbc8:	9805      	ldr	r0, [sp, #20]
 800dbca:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800dbcc:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbce:	950f      	str	r5, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800dbd0:	f004 fd90 	bl	80126f4 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800dbd4:	2302      	movs	r3, #2
 800dbd6:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800dbd8:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800dbda:	9808      	ldr	r0, [sp, #32]
 800dbdc:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800dbde:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dbe0:	950e      	str	r5, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800dbe2:	f004 fd87 	bl	80126f4 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800dbe6:	466b      	mov	r3, sp
 800dbe8:	2200      	movs	r2, #0
 800dbea:	8999      	ldrh	r1, [r3, #12]
 800dbec:	9805      	ldr	r0, [sp, #20]
 800dbee:	f004 ff35 	bl	8012a5c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800dbf2:	2005      	movs	r0, #5
 800dbf4:	f000 fb76 	bl	800e2e4 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800dbf8:	8821      	ldrh	r1, [r4, #0]
 800dbfa:	9808      	ldr	r0, [sp, #32]
 800dbfc:	f004 ff28 	bl	8012a50 <HAL_GPIO_ReadPin>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d006      	beq.n	800dc12 <IsFactoryReset+0xc6>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800dc04:	2201      	movs	r2, #1
	
	return 0;
 800dc06:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800dc08:	4b0b      	ldr	r3, [pc, #44]	; (800dc38 <IsFactoryReset+0xec>)
 800dc0a:	4252      	negs	r2, r2
 800dc0c:	601a      	str	r2, [r3, #0]
}
 800dc0e:	b013      	add	sp, #76	; 0x4c
 800dc10:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800dc12:	466b      	mov	r3, sp
 800dc14:	2201      	movs	r2, #1
 800dc16:	8999      	ldrh	r1, [r3, #12]
 800dc18:	9805      	ldr	r0, [sp, #20]
 800dc1a:	f004 ff1f 	bl	8012a5c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800dc1e:	2005      	movs	r0, #5
 800dc20:	f000 fb60 	bl	800e2e4 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800dc24:	8821      	ldrh	r1, [r4, #0]
 800dc26:	9808      	ldr	r0, [sp, #32]
 800dc28:	f004 ff12 	bl	8012a50 <HAL_GPIO_ReadPin>
 800dc2c:	2801      	cmp	r0, #1
 800dc2e:	d1e9      	bne.n	800dc04 <IsFactoryReset+0xb8>
 800dc30:	e7ed      	b.n	800dc0e <IsFactoryReset+0xc2>
 800dc32:	46c0      	nop			; (mov r8, r8)
 800dc34:	40021000 	.word	0x40021000
 800dc38:	20007ff0 	.word	0x20007ff0

0800dc3c <MX_I2C2_Init>:
	
	MX_I2C2_Init();
}

//-- Configure indicator LED
void MX_I2C2_Init(void){
 800dc3c:	b510      	push	{r4, lr}
	
	hi2c2.Instance = I2C2;
 800dc3e:	4b0d      	ldr	r3, [pc, #52]	; (800dc74 <MX_I2C2_Init+0x38>)
 800dc40:	4c0d      	ldr	r4, [pc, #52]	; (800dc78 <MX_I2C2_Init+0x3c>)
	/* hi2c2.Init.Timing = 0x2010091A; *//* fast mode: 400 KHz */
	hi2c2.Init.Timing =0x20303E5D; /* Standard mode: 100 KHz */
	hi2c2.Init.OwnAddress1 =0;
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800dc42:	2201      	movs	r2, #1
	hi2c2.Instance = I2C2;
 800dc44:	6023      	str	r3, [r4, #0]
	hi2c2.Init.Timing =0x20303E5D; /* Standard mode: 100 KHz */
 800dc46:	4b0d      	ldr	r3, [pc, #52]	; (800dc7c <MX_I2C2_Init+0x40>)
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	hi2c2.Init.OwnAddress2 =0;
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
	HAL_I2C_Init(&hi2c2);
 800dc48:	0020      	movs	r0, r4
	hi2c2.Init.Timing =0x20303E5D; /* Standard mode: 100 KHz */
 800dc4a:	6063      	str	r3, [r4, #4]
	hi2c2.Init.OwnAddress1 =0;
 800dc4c:	2300      	movs	r3, #0
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800dc4e:	60e2      	str	r2, [r4, #12]
	hi2c2.Init.OwnAddress1 =0;
 800dc50:	60a3      	str	r3, [r4, #8]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800dc52:	6123      	str	r3, [r4, #16]
	hi2c2.Init.OwnAddress2 =0;
 800dc54:	6163      	str	r3, [r4, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800dc56:	61a3      	str	r3, [r4, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800dc58:	61e3      	str	r3, [r4, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800dc5a:	6223      	str	r3, [r4, #32]
	HAL_I2C_Init(&hi2c2);
 800dc5c:	f005 f854 	bl	8012d08 <HAL_I2C_Init>
	
	/** Configure Analogue filter */
	HAL_I2CEx_ConfigAnalogFilter(&hi2c2,I2C_ANALOGFILTER_ENABLE);
 800dc60:	2100      	movs	r1, #0
 800dc62:	0020      	movs	r0, r4
 800dc64:	f005 fa2e 	bl	80130c4 <HAL_I2CEx_ConfigAnalogFilter>
	
	/** Configure Digital filter */
	HAL_I2CEx_ConfigDigitalFilter(&hi2c2,0);
 800dc68:	2100      	movs	r1, #0
 800dc6a:	0020      	movs	r0, r4
 800dc6c:	f005 fa5c 	bl	8013128 <HAL_I2CEx_ConfigDigitalFilter>
}
 800dc70:	bd10      	pop	{r4, pc}
 800dc72:	46c0      	nop			; (mov r8, r8)
 800dc74:	40005800 	.word	0x40005800
 800dc78:	20006e94 	.word	0x20006e94
 800dc7c:	20303e5d 	.word	0x20303e5d

0800dc80 <MX_I2C_Init>:
	__GPIOC_CLK_ENABLE()
 800dc80:	2080      	movs	r0, #128	; 0x80
 800dc82:	4b19      	ldr	r3, [pc, #100]	; (800dce8 <MX_I2C_Init+0x68>)
 800dc84:	0300      	lsls	r0, r0, #12
 800dc86:	6959      	ldr	r1, [r3, #20]
void MX_I2C_Init(void){
 800dc88:	b500      	push	{lr}
	__GPIOC_CLK_ENABLE()
 800dc8a:	4301      	orrs	r1, r0
 800dc8c:	6159      	str	r1, [r3, #20]
 800dc8e:	695a      	ldr	r2, [r3, #20]
void MX_I2C_Init(void){
 800dc90:	b087      	sub	sp, #28
	__GPIOC_CLK_ENABLE()
 800dc92:	4002      	ands	r2, r0
	__GPIOA_CLK_ENABLE()
 800dc94:	2080      	movs	r0, #128	; 0x80
	__GPIOC_CLK_ENABLE()
 800dc96:	9201      	str	r2, [sp, #4]
 800dc98:	9a01      	ldr	r2, [sp, #4]
	__GPIOA_CLK_ENABLE()
 800dc9a:	6959      	ldr	r1, [r3, #20]
 800dc9c:	0280      	lsls	r0, r0, #10
 800dc9e:	4301      	orrs	r1, r0
 800dca0:	6159      	str	r1, [r3, #20]
 800dca2:	695a      	ldr	r2, [r3, #20]
 800dca4:	4002      	ands	r2, r0
	__GPIOD_CLK_ENABLE()
 800dca6:	2080      	movs	r0, #128	; 0x80
	__GPIOA_CLK_ENABLE()
 800dca8:	9202      	str	r2, [sp, #8]
 800dcaa:	9a02      	ldr	r2, [sp, #8]
	__GPIOD_CLK_ENABLE()
 800dcac:	6959      	ldr	r1, [r3, #20]
 800dcae:	0340      	lsls	r0, r0, #13
 800dcb0:	4301      	orrs	r1, r0
 800dcb2:	6159      	str	r1, [r3, #20]
 800dcb4:	695a      	ldr	r2, [r3, #20]
 800dcb6:	4002      	ands	r2, r0
	__GPIOB_CLK_ENABLE()
 800dcb8:	2080      	movs	r0, #128	; 0x80
	__GPIOD_CLK_ENABLE()
 800dcba:	9203      	str	r2, [sp, #12]
 800dcbc:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE()
 800dcbe:	6959      	ldr	r1, [r3, #20]
 800dcc0:	02c0      	lsls	r0, r0, #11
 800dcc2:	4301      	orrs	r1, r0
 800dcc4:	6159      	str	r1, [r3, #20]
	__GPIOF_CLK_ENABLE()
 800dcc6:	2180      	movs	r1, #128	; 0x80
	__GPIOB_CLK_ENABLE()
 800dcc8:	695a      	ldr	r2, [r3, #20]
	__GPIOF_CLK_ENABLE()
 800dcca:	03c9      	lsls	r1, r1, #15
	__GPIOB_CLK_ENABLE()
 800dccc:	4002      	ands	r2, r0
 800dcce:	9204      	str	r2, [sp, #16]
 800dcd0:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE()
 800dcd2:	695a      	ldr	r2, [r3, #20]
 800dcd4:	430a      	orrs	r2, r1
 800dcd6:	615a      	str	r2, [r3, #20]
 800dcd8:	695b      	ldr	r3, [r3, #20]
 800dcda:	400b      	ands	r3, r1
 800dcdc:	9305      	str	r3, [sp, #20]
 800dcde:	9b05      	ldr	r3, [sp, #20]
	MX_I2C2_Init();
 800dce0:	f7ff ffac 	bl	800dc3c <MX_I2C2_Init>
}
 800dce4:	b007      	add	sp, #28
 800dce6:	bd00      	pop	{pc}
 800dce8:	40021000 	.word	0x40021000

0800dcec <LSM6DS3_I2C_Write>:

uint8_t LSM6DS3_I2C_Write(void *handle,uint8_t WriteAddr,uint8_t *pBuffer,uint16_t nBytesToWrite){
 800dcec:	b510      	push	{r4, lr}
	if(HAL_I2C_Mem_Write(handle,LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH,WriteAddr,sizeof(WriteAddr),pBuffer,nBytesToWrite,100) != HAL_OK){
 800dcee:	2464      	movs	r4, #100	; 0x64
uint8_t LSM6DS3_I2C_Write(void *handle,uint8_t WriteAddr,uint8_t *pBuffer,uint16_t nBytesToWrite){
 800dcf0:	b084      	sub	sp, #16
	if(HAL_I2C_Mem_Write(handle,LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH,WriteAddr,sizeof(WriteAddr),pBuffer,nBytesToWrite,100) != HAL_OK){
 800dcf2:	9301      	str	r3, [sp, #4]
 800dcf4:	9200      	str	r2, [sp, #0]
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	000a      	movs	r2, r1
 800dcfa:	9402      	str	r4, [sp, #8]
 800dcfc:	21d6      	movs	r1, #214	; 0xd6
 800dcfe:	f005 f857 	bl	8012db0 <HAL_I2C_Mem_Write>
 800dd02:	1e43      	subs	r3, r0, #1
 800dd04:	4198      	sbcs	r0, r3
 800dd06:	b2c0      	uxtb	r0, r0
		return 1;
	}
	return 0;
}
 800dd08:	b004      	add	sp, #16
 800dd0a:	bd10      	pop	{r4, pc}

0800dd0c <LSM6DS3_I2C_Read>:

uint8_t LSM6DS3_I2C_Read(void *handle,uint8_t ReadAddr,uint8_t *pBuffer,uint16_t nBytesToRead){
 800dd0c:	b510      	push	{r4, lr}
	if(HAL_I2C_Mem_Read(handle,LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH,ReadAddr,sizeof(ReadAddr),pBuffer,nBytesToRead,100) != HAL_OK){
 800dd0e:	2464      	movs	r4, #100	; 0x64
uint8_t LSM6DS3_I2C_Read(void *handle,uint8_t ReadAddr,uint8_t *pBuffer,uint16_t nBytesToRead){
 800dd10:	b084      	sub	sp, #16
	if(HAL_I2C_Mem_Read(handle,LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH,ReadAddr,sizeof(ReadAddr),pBuffer,nBytesToRead,100) != HAL_OK){
 800dd12:	9301      	str	r3, [sp, #4]
 800dd14:	9200      	str	r2, [sp, #0]
 800dd16:	2301      	movs	r3, #1
 800dd18:	000a      	movs	r2, r1
 800dd1a:	9402      	str	r4, [sp, #8]
 800dd1c:	21d6      	movs	r1, #214	; 0xd6
 800dd1e:	f005 f909 	bl	8012f34 <HAL_I2C_Mem_Read>
 800dd22:	1e43      	subs	r3, r0, #1
 800dd24:	4198      	sbcs	r0, r3
 800dd26:	b2c0      	uxtb	r0, r0
		return 1;
	}
	return 0;
}
 800dd28:	b004      	add	sp, #16
 800dd2a:	bd10      	pop	{r4, pc}

0800dd2c <LSM303AGR_MAG_I2C_Write>:
		return 1;
	}
	return 0;
}

uint8_t LSM303AGR_MAG_I2C_Write(void *handle,uint8_t WriteAddr,uint8_t *pBuffer,uint16_t nBytesToWrite){
 800dd2c:	b510      	push	{r4, lr}
	if(HAL_I2C_Mem_Write(handle,LSM303AGR_MAG_I2C_ADDRESS,WriteAddr,sizeof(WriteAddr),pBuffer,nBytesToWrite,100) != HAL_OK){
 800dd2e:	2464      	movs	r4, #100	; 0x64
uint8_t LSM303AGR_MAG_I2C_Write(void *handle,uint8_t WriteAddr,uint8_t *pBuffer,uint16_t nBytesToWrite){
 800dd30:	b084      	sub	sp, #16
	if(HAL_I2C_Mem_Write(handle,LSM303AGR_MAG_I2C_ADDRESS,WriteAddr,sizeof(WriteAddr),pBuffer,nBytesToWrite,100) != HAL_OK){
 800dd32:	9301      	str	r3, [sp, #4]
 800dd34:	9200      	str	r2, [sp, #0]
 800dd36:	2301      	movs	r3, #1
 800dd38:	000a      	movs	r2, r1
 800dd3a:	9402      	str	r4, [sp, #8]
 800dd3c:	213c      	movs	r1, #60	; 0x3c
 800dd3e:	f005 f837 	bl	8012db0 <HAL_I2C_Mem_Write>
 800dd42:	1e43      	subs	r3, r0, #1
 800dd44:	4198      	sbcs	r0, r3
 800dd46:	b2c0      	uxtb	r0, r0
		return 1;
	}
	return 0;
}
 800dd48:	b004      	add	sp, #16
 800dd4a:	bd10      	pop	{r4, pc}

0800dd4c <LSM303AGR_MAG_I2C_Read>:

uint8_t LSM303AGR_MAG_I2C_Read(void *handle,uint8_t ReadAddr,uint8_t *pBuffer,uint16_t nBytesToRead){
 800dd4c:	b510      	push	{r4, lr}
	if(HAL_I2C_Mem_Read(handle,LSM303AGR_MAG_I2C_ADDRESS,ReadAddr,sizeof(ReadAddr),pBuffer,nBytesToRead,100) != HAL_OK){
 800dd4e:	2464      	movs	r4, #100	; 0x64
uint8_t LSM303AGR_MAG_I2C_Read(void *handle,uint8_t ReadAddr,uint8_t *pBuffer,uint16_t nBytesToRead){
 800dd50:	b084      	sub	sp, #16
	if(HAL_I2C_Mem_Read(handle,LSM303AGR_MAG_I2C_ADDRESS,ReadAddr,sizeof(ReadAddr),pBuffer,nBytesToRead,100) != HAL_OK){
 800dd52:	9301      	str	r3, [sp, #4]
 800dd54:	9200      	str	r2, [sp, #0]
 800dd56:	2301      	movs	r3, #1
 800dd58:	000a      	movs	r2, r1
 800dd5a:	9402      	str	r4, [sp, #8]
 800dd5c:	213c      	movs	r1, #60	; 0x3c
 800dd5e:	f005 f8e9 	bl	8012f34 <HAL_I2C_Mem_Read>
 800dd62:	1e43      	subs	r3, r0, #1
 800dd64:	4198      	sbcs	r0, r3
 800dd66:	b2c0      	uxtb	r0, r0
		return 1;
	}
	return 0;
}
 800dd68:	b004      	add	sp, #16
 800dd6a:	bd10      	pop	{r4, pc}

0800dd6c <SysTick_Handler>:
/******************************************************************************/

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void){
 800dd6c:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800dd6e:	f003 f9e1 	bl	8011134 <HAL_IncTick>
	osSystickHandler();
 800dd72:	f001 f9e9 	bl	800f148 <osSystickHandler>
	
}
 800dd76:	bd10      	pop	{r4, pc}

0800dd78 <HardFault_Handler>:
/**
 * @brief This function handles Hard Fault error callback.
 */
void HardFault_Handler(void){
	/* Loop here */
	for(;;){
 800dd78:	e7fe      	b.n	800dd78 <HardFault_Handler>
 800dd7a:	46c0      	nop			; (mov r8, r8)

0800dd7c <USART1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void){
 800dd7c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
	HAL_UART_IRQHandler(&huart1);
 800dd7e:	4802      	ldr	r0, [pc, #8]	; (800dd88 <USART1_IRQHandler+0xc>)
 800dd80:	f006 fe14 	bl	80149ac <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	 switch should be performed before the interrupt exists.  That ensures the
	 unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
}
 800dd84:	bd10      	pop	{r4, pc}
 800dd86:	46c0      	nop			; (mov r8, r8)
 800dd88:	20006cb0 	.word	0x20006cb0

0800dd8c <USART2_IRQHandler>:
/*-----------------------------------------------------------*/

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void){
 800dd8c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
	HAL_UART_IRQHandler(&huart2);
 800dd8e:	4802      	ldr	r0, [pc, #8]	; (800dd98 <USART2_IRQHandler+0xc>)
 800dd90:	f006 fe0c 	bl	80149ac <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	 switch should be performed before the interrupt exists.  That ensures the
	 unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
}
 800dd94:	bd10      	pop	{r4, pc}
 800dd96:	46c0      	nop			; (mov r8, r8)
 800dd98:	20006e00 	.word	0x20006e00

0800dd9c <USART3_8_IRQHandler>:
/*-----------------------------------------------------------*/

/**
 * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
 */
void USART3_8_IRQHandler(void){
 800dd9c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800dd9e:	4806      	ldr	r0, [pc, #24]	; (800ddb8 <USART3_8_IRQHandler+0x1c>)
 800dda0:	f006 fe04 	bl	80149ac <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800dda4:	4805      	ldr	r0, [pc, #20]	; (800ddbc <USART3_8_IRQHandler+0x20>)
 800dda6:	f006 fe01 	bl	80149ac <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800ddaa:	4805      	ldr	r0, [pc, #20]	; (800ddc0 <USART3_8_IRQHandler+0x24>)
 800ddac:	f006 fdfe 	bl	80149ac <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800ddb0:	4804      	ldr	r0, [pc, #16]	; (800ddc4 <USART3_8_IRQHandler+0x28>)
 800ddb2:	f006 fdfb 	bl	80149ac <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	 switch should be performed before the interrupt exists.  That ensures the
	 unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
}
 800ddb6:	bd10      	pop	{r4, pc}
 800ddb8:	20006bd0 	.word	0x20006bd0
 800ddbc:	20006d90 	.word	0x20006d90
 800ddc0:	20006c40 	.word	0x20006c40
 800ddc4:	20006d20 	.word	0x20006d20

0800ddc8 <DMA1_Ch1_IRQHandler>:
/*-----------------------------------------------------------*/

/**
 * @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
 */
void DMA1_Ch1_IRQHandler(void){
 800ddc8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800ddca:	2001      	movs	r0, #1
 800ddcc:	f7fa f820 	bl	8007e10 <DMA_IRQHandler>
	
}
 800ddd0:	bd10      	pop	{r4, pc}
 800ddd2:	46c0      	nop			; (mov r8, r8)

0800ddd4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
/**
 * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
 */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void){
	/* Streaming or messaging DMA on P5 */
	if(HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET){
 800ddd4:	4b0c      	ldr	r3, [pc, #48]	; (800de08 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void){
 800ddd6:	b510      	push	{r4, lr}
	if(HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET){
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	2310      	movs	r3, #16
 800dddc:	4213      	tst	r3, r2
 800ddde:	d10b      	bne.n	800ddf8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P5);
		/* Streaming or messaging DMA on P2 */
	}
	else if(HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET){
 800dde0:	4a0a      	ldr	r2, [pc, #40]	; (800de0c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dde2:	6811      	ldr	r1, [r2, #0]
 800dde4:	05c9      	lsls	r1, r1, #23
 800dde6:	d403      	bmi.n	800ddf0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P2);
		/* TX messaging DMA 0 */
	}
	else if(HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET){
 800dde8:	6812      	ldr	r2, [r2, #0]
 800ddea:	4213      	tst	r3, r2
 800ddec:	d108      	bne.n	800de00 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800ddee:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800ddf0:	2002      	movs	r0, #2
 800ddf2:	f7fa f80d 	bl	8007e10 <DMA_IRQHandler>
 800ddf6:	e7fa      	b.n	800ddee <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P5);
 800ddf8:	2005      	movs	r0, #5
 800ddfa:	f7fa f809 	bl	8007e10 <DMA_IRQHandler>
 800ddfe:	e7f6      	b.n	800ddee <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800de00:	4803      	ldr	r0, [pc, #12]	; (800de10 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800de02:	f003 feb5 	bl	8011b70 <HAL_DMA_IRQHandler>
}
 800de06:	e7f2      	b.n	800ddee <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800de08:	40020400 	.word	0x40020400
 800de0c:	40020000 	.word	0x40020000
 800de10:	200019d8 	.word	0x200019d8

0800de14 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
/**
 * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
 */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void){
	/* Streaming or messaging DMA on P3 */
	if(HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET){
 800de14:	4b12      	ldr	r3, [pc, #72]	; (800de60 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void){
 800de16:	b510      	push	{r4, lr}
	if(HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET){
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	03d2      	lsls	r2, r2, #15
 800de1c:	d414      	bmi.n	800de48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
		/* Streaming or messaging DMA on P4 */
	}
	else if(HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET){
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	02d2      	lsls	r2, r2, #11
 800de22:	d40d      	bmi.n	800de40 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
		/* Streaming or messaging DMA on P6 */
	}
	else if(HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET){
 800de24:	4a0f      	ldr	r2, [pc, #60]	; (800de64 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800de26:	6812      	ldr	r2, [r2, #0]
 800de28:	05d2      	lsls	r2, r2, #23
 800de2a:	d411      	bmi.n	800de50 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
		/* TX messaging DMA 1 */
	}
	else if(HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET){
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	04d2      	lsls	r2, r2, #19
 800de30:	d412      	bmi.n	800de58 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
		/* TX messaging DMA 2 */
	}
	else if(HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET){
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	01db      	lsls	r3, r3, #7
 800de36:	d506      	bpl.n	800de46 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800de38:	480b      	ldr	r0, [pc, #44]	; (800de68 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800de3a:	f003 fe99 	bl	8011b70 <HAL_DMA_IRQHandler>
	}
}
 800de3e:	e002      	b.n	800de46 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800de40:	2004      	movs	r0, #4
 800de42:	f7f9 ffe5 	bl	8007e10 <DMA_IRQHandler>
}
 800de46:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800de48:	2003      	movs	r0, #3
 800de4a:	f7f9 ffe1 	bl	8007e10 <DMA_IRQHandler>
 800de4e:	e7fa      	b.n	800de46 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800de50:	2006      	movs	r0, #6
 800de52:	f7f9 ffdd 	bl	8007e10 <DMA_IRQHandler>
 800de56:	e7f6      	b.n	800de46 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800de58:	4804      	ldr	r0, [pc, #16]	; (800de6c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800de5a:	f003 fe89 	bl	8011b70 <HAL_DMA_IRQHandler>
 800de5e:	e7f2      	b.n	800de46 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800de60:	40020000 	.word	0x40020000
 800de64:	40020400 	.word	0x40020400
 800de68:	20001a48 	.word	0x20001a48
 800de6c:	20001a10 	.word	0x20001a10

0800de70 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800de70:	2300      	movs	r3, #0
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800de72:	b510      	push	{r4, lr}
 800de74:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800de76:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800de78:	6e03      	ldr	r3, [r0, #96]	; 0x60
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800de7a:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d001      	beq.n	800de84 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800de80:	f7fe fe9c 	bl	800cbbc <DMA_MSG_TX_UnSetup>
	
	/* Give back the mutex. */
	xSemaphoreGiveFromISR(PxTxSemaphoreHandle[GetPort(huart)],&(xHigherPriorityTaskWoken));
 800de84:	0020      	movs	r0, r4
 800de86:	f7fe f8cb 	bl	800c020 <GetPort>
 800de8a:	4b04      	ldr	r3, [pc, #16]	; (800de9c <HAL_UART_TxCpltCallback+0x2c>)
 800de8c:	0080      	lsls	r0, r0, #2
 800de8e:	58c0      	ldr	r0, [r0, r3]
 800de90:	a901      	add	r1, sp, #4
 800de92:	f001 fcdf 	bl	800f854 <xQueueGiveFromISR>
}
 800de96:	b002      	add	sp, #8
 800de98:	bd10      	pop	{r4, pc}
 800de9a:	46c0      	nop			; (mov r8, r8)
 800de9c:	20006b30 	.word	0x20006b30

0800dea0 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800dea0:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};
	/* Set the UART state ready to be able to start the process again */
	huart->State =HAL_UART_STATE_READY;
 800dea2:	2369      	movs	r3, #105	; 0x69
 800dea4:	2501      	movs	r5, #1
 800dea6:	54c5      	strb	r5, [r0, r3]
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800dea8:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port =GetPort(huart);
 800deaa:	f7fe f8b9 	bl	800c020 <GetPort>
	if(portStatus[port] == STREAM){
 800deae:	4b0b      	ldr	r3, [pc, #44]	; (800dedc <HAL_UART_ErrorCallback+0x3c>)
 800deb0:	5c1b      	ldrb	r3, [r3, r0]
 800deb2:	2b02      	cmp	r3, #2
 800deb4:	d004      	beq.n	800dec0 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart,(uint8_t* )(&(dmaStreamDst[port - 1]->Instance->TDR)),huart->hdmarx->Instance->CNDTR);
		/* Or parse the circular buffer and restart messaging DMA for this port */
	}
	else{
		MsgDMAStopped[port - 1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800deb6:	4b0a      	ldr	r3, [pc, #40]	; (800dee0 <HAL_UART_ErrorCallback+0x40>)
 800deb8:	1818      	adds	r0, r3, r0
 800deba:	3801      	subs	r0, #1
 800debc:	7005      	strb	r5, [r0, #0]
	}
}
 800debe:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart,(uint8_t* )(&(dmaStreamDst[port - 1]->Instance->TDR)),huart->hdmarx->Instance->CNDTR);
 800dec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dec2:	4908      	ldr	r1, [pc, #32]	; (800dee4 <HAL_UART_ErrorCallback+0x44>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	1e43      	subs	r3, r0, #1
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	585b      	ldr	r3, [r3, r1]
 800dece:	0020      	movs	r0, r4
 800ded0:	6819      	ldr	r1, [r3, #0]
 800ded2:	b292      	uxth	r2, r2
 800ded4:	3128      	adds	r1, #40	; 0x28
 800ded6:	f006 f9b7 	bl	8014248 <HAL_UART_Receive_DMA>
 800deda:	e7f0      	b.n	800debe <HAL_UART_ErrorCallback+0x1e>
 800dedc:	20001190 	.word	0x20001190
 800dee0:	20001360 	.word	0x20001360
 800dee4:	20001540 	.word	0x20001540

0800dee8 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800dee8:	b570      	push	{r4, r5, r6, lr}
 800deea:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if(portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG){
 800deec:	f7fe f898 	bl	800c020 <GetPort>
 800def0:	4d12      	ldr	r5, [pc, #72]	; (800df3c <HAL_UART_RxCpltCallback+0x54>)
 800def2:	5c2b      	ldrb	r3, [r5, r0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d006      	beq.n	800df06 <HAL_UART_RxCpltCallback+0x1e>
 800def8:	0020      	movs	r0, r4
 800defa:	f7fe f891 	bl	800c020 <GetPort>
 800defe:	5c2b      	ldrb	r3, [r5, r0]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d000      	beq.n	800df06 <HAL_UART_RxCpltCallback+0x1e>
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart) - 1] =0;
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart) - 1] = true;
	}
}
 800df04:	bd70      	pop	{r4, r5, r6, pc}
		BOS.overrun =GetPort(huart);
 800df06:	0020      	movs	r0, r4
 800df08:	f7fe f88a 	bl	800c020 <GetPort>
 800df0c:	4b0c      	ldr	r3, [pc, #48]	; (800df40 <HAL_UART_RxCpltCallback+0x58>)
 800df0e:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] =OVERRUN;
 800df10:	0020      	movs	r0, r4
 800df12:	f7fe f885 	bl	800c020 <GetPort>
 800df16:	2305      	movs	r3, #5
 800df18:	542b      	strb	r3, [r5, r0]
		UARTRxBufIndex[GetPort(huart) - 1] =0;
 800df1a:	0020      	movs	r0, r4
 800df1c:	f7fe f880 	bl	800c020 <GetPort>
 800df20:	2200      	movs	r2, #0
 800df22:	4b08      	ldr	r3, [pc, #32]	; (800df44 <HAL_UART_RxCpltCallback+0x5c>)
 800df24:	181b      	adds	r3, r3, r0
 800df26:	3b01      	subs	r3, #1
		MsgDMAStopped[GetPort(huart) - 1] = true;
 800df28:	0020      	movs	r0, r4
		UARTRxBufIndex[GetPort(huart) - 1] =0;
 800df2a:	701a      	strb	r2, [r3, #0]
		MsgDMAStopped[GetPort(huart) - 1] = true;
 800df2c:	f7fe f878 	bl	800c020 <GetPort>
 800df30:	2201      	movs	r2, #1
 800df32:	4b05      	ldr	r3, [pc, #20]	; (800df48 <HAL_UART_RxCpltCallback+0x60>)
 800df34:	181b      	adds	r3, r3, r0
 800df36:	3b01      	subs	r3, #1
 800df38:	701a      	strb	r2, [r3, #0]
 800df3a:	e7e3      	b.n	800df04 <HAL_UART_RxCpltCallback+0x1c>
 800df3c:	20001190 	.word	0x20001190
 800df40:	20006ab0 	.word	0x20006ab0
 800df44:	200014e8 	.word	0x200014e8
 800df48:	20001360 	.word	0x20001360

0800df4c <vApplicationStackOverflowHook>:
	(void )pxTask;
	
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	 function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800df4c:	b672      	cpsid	i
	for(;;);
 800df4e:	e7fe      	b.n	800df4e <vApplicationStackOverflowHook+0x2>

0800df50 <vApplicationMallocFailedHook>:
	 demo application.  If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800df50:	b672      	cpsid	i
	for(;;);
 800df52:	e7fe      	b.n	800df52 <vApplicationMallocFailedHook+0x2>

0800df54 <RTC_CalendarConfig>:

/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
 */
BOS_Status RTC_CalendarConfig(void){
 800df54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df56:	46de      	mov	lr, fp
 800df58:	4657      	mov	r7, sl
 800df5a:	464e      	mov	r6, r9
 800df5c:	4645      	mov	r5, r8
 800df5e:	b5e0      	push	{r5, r6, r7, lr}
 800df60:	b08d      	sub	sp, #52	; 0x34
	RTC_DateTypeDef sdatestructure;
	RTC_TimeTypeDef stimestructure;
	uint8_t month, day, year, seconds, minutes, hours;
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800df62:	ae04      	add	r6, sp, #16
 800df64:	0032      	movs	r2, r6
 800df66:	4b35      	ldr	r3, [pc, #212]	; (800e03c <RTC_CalendarConfig+0xe8>)
BOS_Status RTC_CalendarConfig(void){
 800df68:	2700      	movs	r7, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800df6a:	cb13      	ldmia	r3!, {r0, r1, r4}
 800df6c:	c213      	stmia	r2!, {r0, r1, r4}
 800df6e:	ab01      	add	r3, sp, #4
 800df70:	4698      	mov	r8, r3
 800df72:	4642      	mov	r2, r8
 800df74:	4b32      	ldr	r3, [pc, #200]	; (800e040 <RTC_CalendarConfig+0xec>)
	
	/* Get compile date */
	year =atoi(comDate + 9);		// only last 2 digits
	*(comDate + 6) =0;
	day =atoi(comDate + 4);
	*(comDate + 3) =0;
 800df76:	2401      	movs	r4, #1
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800df78:	cb03      	ldmia	r3!, {r0, r1}
 800df7a:	c203      	stmia	r2!, {r0, r1}
	year =atoi(comDate + 9);		// only last 2 digits
 800df7c:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800df7e:	781b      	ldrb	r3, [r3, #0]
	year =atoi(comDate + 9);		// only last 2 digits
 800df80:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800df82:	7013      	strb	r3, [r2, #0]
	year =atoi(comDate + 9);		// only last 2 digits
 800df84:	f006 fda1 	bl	8014aca <atoi>
 800df88:	b2c3      	uxtb	r3, r0
	day =atoi(comDate + 4);
 800df8a:	a805      	add	r0, sp, #20
	year =atoi(comDate + 9);		// only last 2 digits
 800df8c:	469a      	mov	sl, r3
	*(comDate + 6) =0;
 800df8e:	71b7      	strb	r7, [r6, #6]
	day =atoi(comDate + 4);
 800df90:	f006 fd9b 	bl	8014aca <atoi>
 800df94:	b2c3      	uxtb	r3, r0
 800df96:	4699      	mov	r9, r3
	*(comDate + 3) =0;
 800df98:	4d2a      	ldr	r5, [pc, #168]	; (800e044 <RTC_CalendarConfig+0xf0>)
 800df9a:	70f7      	strb	r7, [r6, #3]
	for(uint8_t i =0; i < 12; i++){
		if(!strcmp(comDate,monthStringAbreviated[i]))
 800df9c:	0030      	movs	r0, r6
 800df9e:	6829      	ldr	r1, [r5, #0]
 800dfa0:	f7f2 f8b0 	bl	8000104 <strcmp>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	d100      	bne.n	800dfaa <RTC_CalendarConfig+0x56>
			month =i + 1;
 800dfa8:	0027      	movs	r7, r4
	for(uint8_t i =0; i < 12; i++){
 800dfaa:	3401      	adds	r4, #1
 800dfac:	b2e4      	uxtb	r4, r4
 800dfae:	3504      	adds	r5, #4
 800dfb0:	2c0d      	cmp	r4, #13
 800dfb2:	d1f3      	bne.n	800df9c <RTC_CalendarConfig+0x48>
	}
	
	/* Get compile time */
	seconds =atoi(comTime + 6);
 800dfb4:	200a      	movs	r0, #10
 800dfb6:	4468      	add	r0, sp
 800dfb8:	f006 fd87 	bl	8014aca <atoi>
	*(comDate + 5) =0;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	7173      	strb	r3, [r6, #5]
 800dfc0:	469b      	mov	fp, r3
	minutes =atoi(comTime + 3);
 800dfc2:	466b      	mov	r3, sp
	seconds =atoi(comTime + 6);
 800dfc4:	0004      	movs	r4, r0
	minutes =atoi(comTime + 3);
 800dfc6:	1dd8      	adds	r0, r3, #7
 800dfc8:	f006 fd7f 	bl	8014aca <atoi>
	*(comDate + 2) =0;
 800dfcc:	465b      	mov	r3, fp
	minutes =atoi(comTime + 3);
 800dfce:	0005      	movs	r5, r0
	hours =atoi(comTime);
 800dfd0:	4640      	mov	r0, r8
	*(comDate + 2) =0;
 800dfd2:	70b3      	strb	r3, [r6, #2]
	hours =atoi(comTime);
 800dfd4:	f006 fd79 	bl	8014aca <atoi>
	
	/* Set Date */
	sdatestructure.Year =year;
 800dfd8:	466b      	mov	r3, sp
 800dfda:	4652      	mov	r2, sl
 800dfdc:	70da      	strb	r2, [r3, #3]
	sdatestructure.Month =month;
	sdatestructure.Date =day;
 800dfde:	464a      	mov	r2, r9
	sdatestructure.Month =month;
 800dfe0:	705f      	strb	r7, [r3, #1]
	sdatestructure.Date =day;
 800dfe2:	709a      	strb	r2, [r3, #2]
	sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	466a      	mov	r2, sp
	
	if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800dfe8:	4f17      	ldr	r7, [pc, #92]	; (800e048 <RTC_CalendarConfig+0xf4>)
	sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800dfea:	7013      	strb	r3, [r2, #0]
	hours =atoi(comTime);
 800dfec:	0006      	movs	r6, r0
	if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800dfee:	2200      	movs	r2, #0
 800dff0:	4669      	mov	r1, sp
 800dff2:	0038      	movs	r0, r7
 800dff4:	f005 ff10 	bl	8013e18 <HAL_RTC_SetDate>
 800dff8:	1e03      	subs	r3, r0, #0
 800dffa:	d115      	bne.n	800e028 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;
	
	/* Set Time */
	stimestructure.Hours =hours;
 800dffc:	a907      	add	r1, sp, #28
	stimestructure.Minutes =minutes;
	stimestructure.Seconds =seconds;
	stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800dffe:	7208      	strb	r0, [r1, #8]
	BOS.hourformat =24;
 800e000:	2018      	movs	r0, #24
 800e002:	4a12      	ldr	r2, [pc, #72]	; (800e04c <RTC_CalendarConfig+0xf8>)
	stimestructure.Seconds =seconds;
 800e004:	708c      	strb	r4, [r1, #2]
	BOS.hourformat =24;
 800e006:	7350      	strb	r0, [r2, #13]
	stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
	
	if(HAL_RTC_SetTime(&RtcHandle,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e008:	2200      	movs	r2, #0
 800e00a:	0038      	movs	r0, r7
	stimestructure.Hours =hours;
 800e00c:	700e      	strb	r6, [r1, #0]
	stimestructure.Minutes =minutes;
 800e00e:	704d      	strb	r5, [r1, #1]
	stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e010:	60cb      	str	r3, [r1, #12]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800e012:	610b      	str	r3, [r1, #16]
	if(HAL_RTC_SetTime(&RtcHandle,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e014:	f005 fe68 	bl	8013ce8 <HAL_RTC_SetTime>
 800e018:	1e04      	subs	r4, r0, #0
 800e01a:	d105      	bne.n	800e028 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;
	
	/* Writes a data in a RTC Backup data Register1 */
	HAL_RTCEx_BKUPWrite(&RtcHandle,RTC_BKP_DR1,0x32F2);
 800e01c:	2101      	movs	r1, #1
 800e01e:	0038      	movs	r0, r7
 800e020:	4a0b      	ldr	r2, [pc, #44]	; (800e050 <RTC_CalendarConfig+0xfc>)
 800e022:	f005 ff7f 	bl	8013f24 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e026:	e000      	b.n	800e02a <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800e028:	24ff      	movs	r4, #255	; 0xff
}
 800e02a:	0020      	movs	r0, r4
 800e02c:	b00d      	add	sp, #52	; 0x34
 800e02e:	bcf0      	pop	{r4, r5, r6, r7}
 800e030:	46bb      	mov	fp, r7
 800e032:	46b2      	mov	sl, r6
 800e034:	46a9      	mov	r9, r5
 800e036:	46a0      	mov	r8, r4
 800e038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e03a:	46c0      	nop			; (mov r8, r8)
 800e03c:	0801b434 	.word	0x0801b434
 800e040:	0801e264 	.word	0x0801e264
 800e044:	20000020 	.word	0x20000020
 800e048:	20006ed0 	.word	0x20006ed0
 800e04c:	20006ab0 	.word	0x20006ab0
 800e050:	000032f2 	.word	0x000032f2

0800e054 <RTC_Init>:
	__HAL_RCC_RTC_ENABLE();
 800e054:	2380      	movs	r3, #128	; 0x80
BOS_Status RTC_Init(void){
 800e056:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_RTC_ENABLE();
 800e058:	4e1a      	ldr	r6, [pc, #104]	; (800e0c4 <RTC_Init+0x70>)
 800e05a:	021b      	lsls	r3, r3, #8
 800e05c:	6a32      	ldr	r2, [r6, #32]
	RtcHandle.Instance = RTC;
 800e05e:	4c1a      	ldr	r4, [pc, #104]	; (800e0c8 <RTC_Init+0x74>)
	__HAL_RCC_RTC_ENABLE();
 800e060:	4313      	orrs	r3, r2
 800e062:	6233      	str	r3, [r6, #32]
	RtcHandle.Init.AsynchPrediv =124;
 800e064:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC;
 800e066:	4b19      	ldr	r3, [pc, #100]	; (800e0cc <RTC_Init+0x78>)
	RtcHandle.Init.AsynchPrediv =124;
 800e068:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC;
 800e06a:	6023      	str	r3, [r4, #0]
	RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800e06c:	2300      	movs	r3, #0
	RtcHandle.Init.SynchPrediv =1999;
 800e06e:	4a18      	ldr	r2, [pc, #96]	; (800e0d0 <RTC_Init+0x7c>)
	if(HAL_RTC_Init(&RtcHandle) != HAL_OK)
 800e070:	0020      	movs	r0, r4
	RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800e072:	6063      	str	r3, [r4, #4]
	RtcHandle.Init.SynchPrediv =1999;
 800e074:	60e2      	str	r2, [r4, #12]
	RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e076:	6123      	str	r3, [r4, #16]
	RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e078:	6163      	str	r3, [r4, #20]
	RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e07a:	61a3      	str	r3, [r4, #24]
	if(HAL_RTC_Init(&RtcHandle) != HAL_OK)
 800e07c:	f005 fdec 	bl	8013c58 <HAL_RTC_Init>
 800e080:	1e05      	subs	r5, r0, #0
 800e082:	d11d      	bne.n	800e0c0 <RTC_Init+0x6c>
	if(HAL_RTCEx_BKUPRead(&RtcHandle,RTC_BKP_DR1) != 0x32F2){
 800e084:	2101      	movs	r1, #1
 800e086:	0020      	movs	r0, r4
 800e088:	f005 ff52 	bl	8013f30 <HAL_RTCEx_BKUPRead>
 800e08c:	4b11      	ldr	r3, [pc, #68]	; (800e0d4 <RTC_Init+0x80>)
 800e08e:	4298      	cmp	r0, r3
 800e090:	d10c      	bne.n	800e0ac <RTC_Init+0x58>
		if(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET){
 800e092:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e094:	011b      	lsls	r3, r3, #4
 800e096:	d501      	bpl.n	800e09c <RTC_Init+0x48>
			bootStatus =POWER_ON_BOOT;
 800e098:	4b0f      	ldr	r3, [pc, #60]	; (800e0d8 <RTC_Init+0x84>)
 800e09a:	701d      	strb	r5, [r3, #0]
		if(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET){
 800e09c:	4b09      	ldr	r3, [pc, #36]	; (800e0c4 <RTC_Init+0x70>)
 800e09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a0:	015b      	lsls	r3, r3, #5
 800e0a2:	d505      	bpl.n	800e0b0 <RTC_Init+0x5c>
			bootStatus =RESET_BOOT;
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	4b0c      	ldr	r3, [pc, #48]	; (800e0d8 <RTC_Init+0x84>)
 800e0a8:	701a      	strb	r2, [r3, #0]
 800e0aa:	e001      	b.n	800e0b0 <RTC_Init+0x5c>
		RTC_CalendarConfig();
 800e0ac:	f7ff ff52 	bl	800df54 <RTC_CalendarConfig>
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800e0b0:	2380      	movs	r3, #128	; 0x80
 800e0b2:	4a04      	ldr	r2, [pc, #16]	; (800e0c4 <RTC_Init+0x70>)
 800e0b4:	045b      	lsls	r3, r3, #17
 800e0b6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800e0b8:	430b      	orrs	r3, r1
 800e0ba:	6253      	str	r3, [r2, #36]	; 0x24
}
 800e0bc:	0028      	movs	r0, r5
 800e0be:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERROR;
 800e0c0:	25ff      	movs	r5, #255	; 0xff
 800e0c2:	e7fb      	b.n	800e0bc <RTC_Init+0x68>
 800e0c4:	40021000 	.word	0x40021000
 800e0c8:	20006ed0 	.word	0x20006ed0
 800e0cc:	40002800 	.word	0x40002800
 800e0d0:	000007cf 	.word	0x000007cf
 800e0d4:	000032f2 	.word	0x000032f2
 800e0d8:	20001bd0 	.word	0x20001bd0

0800e0dc <BOS_CalendarConfig>:

/*-----------------------------------------------------------*/

/* --- BOS internal real-time clock and calendar configuration.
 */
BOS_Status BOS_CalendarConfig(uint8_t month,uint8_t day,uint16_t year,uint8_t weekday,uint8_t seconds,uint8_t minutes,uint8_t hours,uint8_t AMPM,int8_t daylightsaving){
 800e0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0de:	46c6      	mov	lr, r8
 800e0e0:	b500      	push	{lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	ad0f      	add	r5, sp, #60	; 0x3c
 800e0e6:	782e      	ldrb	r6, [r5, #0]
	RTC_DateTypeDef sdatestructure;
	RTC_TimeTypeDef stimestructure;
	
	/* Set Date */
	sdatestructure.Year =year - 2000;
 800e0e8:	466d      	mov	r5, sp
BOS_Status BOS_CalendarConfig(uint8_t month,uint8_t day,uint16_t year,uint8_t weekday,uint8_t seconds,uint8_t minutes,uint8_t hours,uint8_t AMPM,int8_t daylightsaving){
 800e0ea:	ac0c      	add	r4, sp, #48	; 0x30
	sdatestructure.Year =year - 2000;
 800e0ec:	3230      	adds	r2, #48	; 0x30
BOS_Status BOS_CalendarConfig(uint8_t month,uint8_t day,uint16_t year,uint8_t weekday,uint8_t seconds,uint8_t minutes,uint8_t hours,uint8_t AMPM,int8_t daylightsaving){
 800e0ee:	7827      	ldrb	r7, [r4, #0]
 800e0f0:	ac0d      	add	r4, sp, #52	; 0x34
 800e0f2:	7824      	ldrb	r4, [r4, #0]
	sdatestructure.Year =year - 2000;
 800e0f4:	70ea      	strb	r2, [r5, #3]
	sdatestructure.Month =month;
 800e0f6:	7068      	strb	r0, [r5, #1]
	sdatestructure.Date =day;
 800e0f8:	70a9      	strb	r1, [r5, #2]
	sdatestructure.WeekDay =weekday;		// Todo - Calculate weekday later
 800e0fa:	702b      	strb	r3, [r5, #0]
	
	if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e0fc:	4d23      	ldr	r5, [pc, #140]	; (800e18c <BOS_CalendarConfig+0xb0>)
BOS_Status BOS_CalendarConfig(uint8_t month,uint8_t day,uint16_t year,uint8_t weekday,uint8_t seconds,uint8_t minutes,uint8_t hours,uint8_t AMPM,int8_t daylightsaving){
 800e0fe:	46a0      	mov	r8, r4
	if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e100:	2200      	movs	r2, #0
BOS_Status BOS_CalendarConfig(uint8_t month,uint8_t day,uint16_t year,uint8_t weekday,uint8_t seconds,uint8_t minutes,uint8_t hours,uint8_t AMPM,int8_t daylightsaving){
 800e102:	ac0e      	add	r4, sp, #56	; 0x38
	if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e104:	4669      	mov	r1, sp
 800e106:	0028      	movs	r0, r5
BOS_Status BOS_CalendarConfig(uint8_t month,uint8_t day,uint16_t year,uint8_t weekday,uint8_t seconds,uint8_t minutes,uint8_t hours,uint8_t AMPM,int8_t daylightsaving){
 800e108:	7824      	ldrb	r4, [r4, #0]
	if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e10a:	f005 fe85 	bl	8013e18 <HAL_RTC_SetDate>
 800e10e:	2800      	cmp	r0, #0
 800e110:	d134      	bne.n	800e17c <BOS_CalendarConfig+0xa0>
		return BOS_ERROR;
	
	/* Set Time */
	stimestructure.Hours =hours;
	stimestructure.Minutes =minutes;
 800e112:	4643      	mov	r3, r8
	stimestructure.Hours =hours;
 800e114:	a901      	add	r1, sp, #4
	stimestructure.Seconds =seconds;
 800e116:	708f      	strb	r7, [r1, #2]
	stimestructure.Hours =hours;
 800e118:	700c      	strb	r4, [r1, #0]
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if(hours > 12)
		BOS.hourformat =24;
 800e11a:	4f1d      	ldr	r7, [pc, #116]	; (800e190 <BOS_CalendarConfig+0xb4>)
	stimestructure.Minutes =minutes;
 800e11c:	704b      	strb	r3, [r1, #1]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800e11e:	6108      	str	r0, [r1, #16]
	if(hours > 12)
 800e120:	2c0c      	cmp	r4, #12
 800e122:	d81d      	bhi.n	800e160 <BOS_CalendarConfig+0x84>
	
	if(AMPM == RTC_AM){
 800e124:	2e01      	cmp	r6, #1
 800e126:	d01f      	beq.n	800e168 <BOS_CalendarConfig+0x8c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat =12;
	}
	else if(AMPM == RTC_PM){
 800e128:	2e02      	cmp	r6, #2
 800e12a:	d029      	beq.n	800e180 <BOS_CalendarConfig+0xa4>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat =12;
	}
	else
		BOS.hourformat =24;
 800e12c:	2318      	movs	r3, #24
 800e12e:	737b      	strb	r3, [r7, #13]
	
	if(HAL_RTC_SetTime(&RtcHandle,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e130:	2200      	movs	r2, #0
 800e132:	0028      	movs	r0, r5
 800e134:	f005 fdd8 	bl	8013ce8 <HAL_RTC_SetTime>
 800e138:	1e04      	subs	r4, r0, #0
 800e13a:	d11f      	bne.n	800e17c <BOS_CalendarConfig+0xa0>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800e13c:	208d      	movs	r0, #141	; 0x8d
 800e13e:	7b7b      	ldrb	r3, [r7, #13]
 800e140:	7939      	ldrb	r1, [r7, #4]
 800e142:	021b      	lsls	r3, r3, #8
 800e144:	4319      	orrs	r1, r3
 800e146:	0040      	lsls	r0, r0, #1
 800e148:	f7f9 ff4e 	bl	8007fe8 <EE_WriteVariable>
	
	/* Writes a data in a RTC Backup data Register1 */
	HAL_RTCEx_BKUPWrite(&RtcHandle,RTC_BKP_DR1,0x32F2);
 800e14c:	2101      	movs	r1, #1
 800e14e:	0028      	movs	r0, r5
 800e150:	4a10      	ldr	r2, [pc, #64]	; (800e194 <BOS_CalendarConfig+0xb8>)
 800e152:	f005 fee7 	bl	8013f24 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800e156:	0020      	movs	r0, r4
 800e158:	b006      	add	sp, #24
 800e15a:	bc80      	pop	{r7}
 800e15c:	46b8      	mov	r8, r7
 800e15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BOS.hourformat =24;
 800e160:	2318      	movs	r3, #24
 800e162:	737b      	strb	r3, [r7, #13]
	if(AMPM == RTC_AM){
 800e164:	2e01      	cmp	r6, #1
 800e166:	d1df      	bne.n	800e128 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800e168:	2300      	movs	r3, #0
	if(HAL_RTC_SetTime(&RtcHandle,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e16a:	2200      	movs	r2, #0
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800e16c:	720b      	strb	r3, [r1, #8]
	if(HAL_RTC_SetTime(&RtcHandle,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e16e:	0028      	movs	r0, r5
		BOS.hourformat =12;
 800e170:	330c      	adds	r3, #12
 800e172:	737b      	strb	r3, [r7, #13]
	if(HAL_RTC_SetTime(&RtcHandle,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e174:	f005 fdb8 	bl	8013ce8 <HAL_RTC_SetTime>
 800e178:	1e04      	subs	r4, r0, #0
 800e17a:	d0df      	beq.n	800e13c <BOS_CalendarConfig+0x60>
		return BOS_ERROR;
 800e17c:	24ff      	movs	r4, #255	; 0xff
 800e17e:	e7ea      	b.n	800e156 <BOS_CalendarConfig+0x7a>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800e180:	2340      	movs	r3, #64	; 0x40
 800e182:	720b      	strb	r3, [r1, #8]
		BOS.hourformat =12;
 800e184:	3b34      	subs	r3, #52	; 0x34
 800e186:	737b      	strb	r3, [r7, #13]
 800e188:	e7d2      	b.n	800e130 <BOS_CalendarConfig+0x54>
 800e18a:	46c0      	nop			; (mov r8, r8)
 800e18c:	20006ed0 	.word	0x20006ed0
 800e190:	20006ab0 	.word	0x20006ab0
 800e194:	000032f2 	.word	0x000032f2

0800e198 <GetTimeDate>:

/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
 */
void GetTimeDate(void){
 800e198:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;
	
	HAL_RTC_GetTime(&RtcHandle,&stimestructureget,RTC_FORMAT_BIN);
 800e19a:	4d16      	ldr	r5, [pc, #88]	; (800e1f4 <GetTimeDate+0x5c>)
void GetTimeDate(void){
 800e19c:	b087      	sub	sp, #28
	HAL_RTC_GetTime(&RtcHandle,&stimestructureget,RTC_FORMAT_BIN);
 800e19e:	ac01      	add	r4, sp, #4
 800e1a0:	0021      	movs	r1, r4
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	0028      	movs	r0, r5
 800e1a6:	f005 fcbf 	bl	8013b28 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&RtcHandle,&sdatestructureget,RTC_FORMAT_BIN);
 800e1aa:	4669      	mov	r1, sp
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	0028      	movs	r0, r5
 800e1b0:	f005 fcea 	bl	8013b88 <HAL_RTC_GetDate>
	
	BOS.time.ampm =(stimestructureget.TimeFormat >> 7) + 1;
 800e1b4:	7a22      	ldrb	r2, [r4, #8]
 800e1b6:	4b10      	ldr	r3, [pc, #64]	; (800e1f8 <GetTimeDate+0x60>)
 800e1b8:	09d2      	lsrs	r2, r2, #7
 800e1ba:	3201      	adds	r2, #1
 800e1bc:	74da      	strb	r2, [r3, #19]
	BOS.time.msec =stimestructureget.SubSeconds / 2;
 800e1be:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes =stimestructureget.Minutes;
	BOS.time.hours =stimestructureget.Hours;
	BOS.date.day =sdatestructureget.Date;
	BOS.date.month =sdatestructureget.Month;
	BOS.date.weekday =sdatestructureget.WeekDay;
	BOS.date.year =sdatestructureget.Year + 2000;
 800e1c0:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec =stimestructureget.SubSeconds / 2;
 800e1c2:	0852      	lsrs	r2, r2, #1
 800e1c4:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds =stimestructureget.Seconds;
 800e1c6:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year =sdatestructureget.Year + 2000;
 800e1c8:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds =stimestructureget.Seconds;
 800e1ca:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes =stimestructureget.Minutes;
 800e1cc:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year =sdatestructureget.Year + 2000;
 800e1ce:	468c      	mov	ip, r1
	BOS.time.minutes =stimestructureget.Minutes;
 800e1d0:	745a      	strb	r2, [r3, #17]
	BOS.time.hours =stimestructureget.Hours;
 800e1d2:	7822      	ldrb	r2, [r4, #0]
 800e1d4:	749a      	strb	r2, [r3, #18]
	BOS.date.day =sdatestructureget.Date;
 800e1d6:	466a      	mov	r2, sp
 800e1d8:	7892      	ldrb	r2, [r2, #2]
 800e1da:	755a      	strb	r2, [r3, #21]
	BOS.date.month =sdatestructureget.Month;
 800e1dc:	466a      	mov	r2, sp
 800e1de:	7852      	ldrb	r2, [r2, #1]
 800e1e0:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday =sdatestructureget.WeekDay;
 800e1e2:	466a      	mov	r2, sp
 800e1e4:	7812      	ldrb	r2, [r2, #0]
 800e1e6:	751a      	strb	r2, [r3, #20]
	BOS.date.year =sdatestructureget.Year + 2000;
 800e1e8:	466a      	mov	r2, sp
 800e1ea:	78d2      	ldrb	r2, [r2, #3]
 800e1ec:	4462      	add	r2, ip
 800e1ee:	831a      	strh	r2, [r3, #24]
}
 800e1f0:	b007      	add	sp, #28
 800e1f2:	bd30      	pop	{r4, r5, pc}
 800e1f4:	20006ed0 	.word	0x20006ed0
 800e1f8:	20006ab0 	.word	0x20006ab0

0800e1fc <TIM_USEC_Init>:
 */
void TIM_USEC_Init(void){
	TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE()
 800e1fc:	2080      	movs	r0, #128	; 0x80
 800e1fe:	4a13      	ldr	r2, [pc, #76]	; (800e24c <TIM_USEC_Init+0x50>)
void TIM_USEC_Init(void){
 800e200:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE()
 800e202:	69d1      	ldr	r1, [r2, #28]
 800e204:	0040      	lsls	r0, r0, #1
 800e206:	4301      	orrs	r1, r0
 800e208:	61d1      	str	r1, [r2, #28]
 800e20a:	69d3      	ldr	r3, [r2, #28]
void TIM_USEC_Init(void){
 800e20c:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE()
 800e20e:	4003      	ands	r3, r0
 800e210:	9301      	str	r3, [sp, #4]
	;
	
	/* Peripheral configuration */
	htim14.Instance = TIM14;
 800e212:	4c0f      	ldr	r4, [pc, #60]	; (800e250 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE()
 800e214:	9b01      	ldr	r3, [sp, #4]
	htim14.Instance = TIM14;
 800e216:	4b0f      	ldr	r3, [pc, #60]	; (800e254 <TIM_USEC_Init+0x58>)
	htim14.Init.Prescaler =HAL_RCC_GetPCLK1Freq() / 1000000;
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e218:	2500      	movs	r5, #0
	htim14.Instance = TIM14;
 800e21a:	6023      	str	r3, [r4, #0]
	htim14.Init.Prescaler =HAL_RCC_GetPCLK1Freq() / 1000000;
 800e21c:	f005 fbd6 	bl	80139cc <HAL_RCC_GetPCLK1Freq>
 800e220:	490d      	ldr	r1, [pc, #52]	; (800e258 <TIM_USEC_Init+0x5c>)
 800e222:	f7f1 ff95 	bl	8000150 <__udivsi3>
	htim14.Init.Period =0xFFFF;
 800e226:	4b0d      	ldr	r3, [pc, #52]	; (800e25c <TIM_USEC_Init+0x60>)
	htim14.Init.Prescaler =HAL_RCC_GetPCLK1Freq() / 1000000;
 800e228:	6060      	str	r0, [r4, #4]
	HAL_TIM_Base_Init(&htim14);
 800e22a:	0020      	movs	r0, r4
	htim14.Init.Period =0xFFFF;
 800e22c:	60e3      	str	r3, [r4, #12]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e22e:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim14);
 800e230:	f005 fed8 	bl	8013fe4 <HAL_TIM_Base_Init>
	
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim14,&sMasterConfig);
 800e234:	a902      	add	r1, sp, #8
 800e236:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e238:	9502      	str	r5, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e23a:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim14,&sMasterConfig);
 800e23c:	f005 feec 	bl	8014018 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800e240:	0020      	movs	r0, r4
 800e242:	f005 fe7d 	bl	8013f40 <HAL_TIM_Base_Start>
}
 800e246:	b005      	add	sp, #20
 800e248:	bd30      	pop	{r4, r5, pc}
 800e24a:	46c0      	nop			; (mov r8, r8)
 800e24c:	40021000 	.word	0x40021000
 800e250:	20006f2c 	.word	0x20006f2c
 800e254:	40002000 	.word	0x40002000
 800e258:	000f4240 	.word	0x000f4240
 800e25c:	0000ffff 	.word	0x0000ffff

0800e260 <TIM_MSEC_Init>:
 */
void TIM_MSEC_Init(void){
	TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE()
 800e260:	2080      	movs	r0, #128	; 0x80
 800e262:	4a13      	ldr	r2, [pc, #76]	; (800e2b0 <TIM_MSEC_Init+0x50>)
void TIM_MSEC_Init(void){
 800e264:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE()
 800e266:	6991      	ldr	r1, [r2, #24]
 800e268:	0240      	lsls	r0, r0, #9
 800e26a:	4301      	orrs	r1, r0
 800e26c:	6191      	str	r1, [r2, #24]
 800e26e:	6993      	ldr	r3, [r2, #24]
void TIM_MSEC_Init(void){
 800e270:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE()
 800e272:	4003      	ands	r3, r0
 800e274:	9301      	str	r3, [sp, #4]
	;
	
	/* Peripheral configuration */
	htim15.Instance = TIM15;
 800e276:	4c0f      	ldr	r4, [pc, #60]	; (800e2b4 <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE()
 800e278:	9b01      	ldr	r3, [sp, #4]
	htim15.Instance = TIM15;
 800e27a:	4b0f      	ldr	r3, [pc, #60]	; (800e2b8 <TIM_MSEC_Init+0x58>)
	htim15.Init.Prescaler =HAL_RCC_GetPCLK1Freq() / 1000;
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e27c:	2500      	movs	r5, #0
	htim15.Instance = TIM15;
 800e27e:	6023      	str	r3, [r4, #0]
	htim15.Init.Prescaler =HAL_RCC_GetPCLK1Freq() / 1000;
 800e280:	f005 fba4 	bl	80139cc <HAL_RCC_GetPCLK1Freq>
 800e284:	21fa      	movs	r1, #250	; 0xfa
 800e286:	0089      	lsls	r1, r1, #2
 800e288:	f7f1 ff62 	bl	8000150 <__udivsi3>
	htim15.Init.Period =0xFFFF;
 800e28c:	4b0b      	ldr	r3, [pc, #44]	; (800e2bc <TIM_MSEC_Init+0x5c>)
	htim15.Init.Prescaler =HAL_RCC_GetPCLK1Freq() / 1000;
 800e28e:	6060      	str	r0, [r4, #4]
	HAL_TIM_Base_Init(&htim15);
 800e290:	0020      	movs	r0, r4
	htim15.Init.Period =0xFFFF;
 800e292:	60e3      	str	r3, [r4, #12]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e294:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim15);
 800e296:	f005 fea5 	bl	8013fe4 <HAL_TIM_Base_Init>
	
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim15,&sMasterConfig);
 800e29a:	a902      	add	r1, sp, #8
 800e29c:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e29e:	9502      	str	r5, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e2a0:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim15,&sMasterConfig);
 800e2a2:	f005 feb9 	bl	8014018 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800e2a6:	0020      	movs	r0, r4
 800e2a8:	f005 fe4a 	bl	8013f40 <HAL_TIM_Base_Start>
}
 800e2ac:	b005      	add	sp, #20
 800e2ae:	bd30      	pop	{r4, r5, pc}
 800e2b0:	40021000 	.word	0x40021000
 800e2b4:	20006ef0 	.word	0x20006ef0
 800e2b8:	40014000 	.word	0x40014000
 800e2bc:	0000ffff 	.word	0x0000ffff

0800e2c0 <StartMicroDelay>:

/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
 */
void StartMicroDelay(uint16_t Delay){
 800e2c0:	b510      	push	{r4, lr}
 800e2c2:	0004      	movs	r4, r0
	uint32_t t0 =0;
	
	portENTER_CRITICAL();
 800e2c4:	f002 fde6 	bl	8010e94 <vPortEnterCritical>
	
	if(Delay){
 800e2c8:	2c00      	cmp	r4, #0
 800e2ca:	d006      	beq.n	800e2da <StartMicroDelay+0x1a>
		t0 =htim14.Instance->CNT;
 800e2cc:	4b04      	ldr	r3, [pc, #16]	; (800e2e0 <StartMicroDelay+0x20>)
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	6a51      	ldr	r1, [r2, #36]	; 0x24
		
		while(htim14.Instance->CNT - t0 <= Delay){
 800e2d2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e2d4:	1a5b      	subs	r3, r3, r1
 800e2d6:	42a3      	cmp	r3, r4
 800e2d8:	d9fb      	bls.n	800e2d2 <StartMicroDelay+0x12>
		};
	}

	portEXIT_CRITICAL();
 800e2da:	f002 fde7 	bl	8010eac <vPortExitCritical>
}
 800e2de:	bd10      	pop	{r4, pc}
 800e2e0:	20006f2c 	.word	0x20006f2c

0800e2e4 <StartMilliDelay>:

/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
 */
void StartMilliDelay(uint16_t Delay){
 800e2e4:	b510      	push	{r4, lr}
 800e2e6:	0004      	movs	r4, r0
	uint32_t t0 =0;
	
	portENTER_CRITICAL();
 800e2e8:	f002 fdd4 	bl	8010e94 <vPortEnterCritical>
	
	if(Delay){
 800e2ec:	2c00      	cmp	r4, #0
 800e2ee:	d006      	beq.n	800e2fe <StartMilliDelay+0x1a>
		t0 =htim15.Instance->CNT;
 800e2f0:	4b04      	ldr	r3, [pc, #16]	; (800e304 <StartMilliDelay+0x20>)
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	6a51      	ldr	r1, [r2, #36]	; 0x24
		
		while(htim15.Instance->CNT - t0 <= Delay){
 800e2f6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e2f8:	1a5b      	subs	r3, r3, r1
 800e2fa:	42a3      	cmp	r3, r4
 800e2fc:	d9fb      	bls.n	800e2f6 <StartMilliDelay+0x12>
		};
	}

	portEXIT_CRITICAL();
 800e2fe:	f002 fdd5 	bl	8010eac <vPortExitCritical>
}
 800e302:	bd10      	pop	{r4, pc}
 800e304:	20006ef0 	.word	0x20006ef0

0800e308 <MX_USART1_UART_Init>:
FlagStatus UartTxReady =RESET;

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void){
	huart1.Instance = USART1;
 800e308:	4809      	ldr	r0, [pc, #36]	; (800e330 <MX_USART1_UART_Init+0x28>)
 800e30a:	4b0a      	ldr	r3, [pc, #40]	; (800e334 <MX_USART1_UART_Init+0x2c>)
void MX_USART1_UART_Init(void){
 800e30c:	b510      	push	{r4, lr}
	huart1.Instance = USART1;
 800e30e:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e310:	23e1      	movs	r3, #225	; 0xe1
 800e312:	031b      	lsls	r3, r3, #12
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
 800e314:	220c      	movs	r2, #12
	huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e316:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e318:	2300      	movs	r3, #0
	huart1.Init.Mode = UART_MODE_TX_RX;
 800e31a:	6142      	str	r2, [r0, #20]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e31c:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800e31e:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800e320:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e322:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e324:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e326:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e328:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800e32a:	f006 fa71 	bl	8014810 <HAL_UART_Init>
#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800e32e:	bd10      	pop	{r4, pc}
 800e330:	20006cb0 	.word	0x20006cb0
 800e334:	40013800 	.word	0x40013800

0800e338 <MX_USART2_UART_Init>:

/*-----------------------------------------------------------*/
/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void){
	huart2.Instance = USART2;
 800e338:	4809      	ldr	r0, [pc, #36]	; (800e360 <MX_USART2_UART_Init+0x28>)
 800e33a:	4b0a      	ldr	r3, [pc, #40]	; (800e364 <MX_USART2_UART_Init+0x2c>)
void MX_USART2_UART_Init(void){
 800e33c:	b510      	push	{r4, lr}
	huart2.Instance = USART2;
 800e33e:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e340:	23e1      	movs	r3, #225	; 0xe1
 800e342:	031b      	lsls	r3, r3, #12
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 800e344:	220c      	movs	r2, #12
	huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e346:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e348:	2300      	movs	r3, #0
	huart2.Init.Mode = UART_MODE_TX_RX;
 800e34a:	6142      	str	r2, [r0, #20]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e34c:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800e34e:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800e350:	6103      	str	r3, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e352:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e354:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e356:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e358:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800e35a:	f006 fa59 	bl	8014810 <HAL_UART_Init>
#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800e35e:	bd10      	pop	{r4, pc}
 800e360:	20006e00 	.word	0x20006e00
 800e364:	40004400 	.word	0x40004400

0800e368 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void){
	huart3.Instance = USART3;
 800e368:	4809      	ldr	r0, [pc, #36]	; (800e390 <MX_USART3_UART_Init+0x28>)
 800e36a:	4b0a      	ldr	r3, [pc, #40]	; (800e394 <MX_USART3_UART_Init+0x2c>)
void MX_USART3_UART_Init(void){
 800e36c:	b510      	push	{r4, lr}
	huart3.Instance = USART3;
 800e36e:	6003      	str	r3, [r0, #0]
	huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e370:	23e1      	movs	r3, #225	; 0xe1
 800e372:	031b      	lsls	r3, r3, #12
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
	huart3.Init.StopBits = UART_STOPBITS_1;
	huart3.Init.Parity = UART_PARITY_NONE;
	huart3.Init.Mode = UART_MODE_TX_RX;
 800e374:	220c      	movs	r2, #12
	huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e376:	6043      	str	r3, [r0, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e378:	2300      	movs	r3, #0
	huart3.Init.Mode = UART_MODE_TX_RX;
 800e37a:	6142      	str	r2, [r0, #20]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e37c:	6083      	str	r3, [r0, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800e37e:	60c3      	str	r3, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800e380:	6103      	str	r3, [r0, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e382:	6183      	str	r3, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e384:	61c3      	str	r3, [r0, #28]
	huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e386:	6203      	str	r3, [r0, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e388:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800e38a:	f006 fa41 	bl	8014810 <HAL_UART_Init>
#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800e38e:	bd10      	pop	{r4, pc}
 800e390:	20006bd0 	.word	0x20006bd0
 800e394:	40004800 	.word	0x40004800

0800e398 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void){
	huart4.Instance = USART4;
 800e398:	4809      	ldr	r0, [pc, #36]	; (800e3c0 <MX_USART4_UART_Init+0x28>)
 800e39a:	4b0a      	ldr	r3, [pc, #40]	; (800e3c4 <MX_USART4_UART_Init+0x2c>)
void MX_USART4_UART_Init(void){
 800e39c:	b510      	push	{r4, lr}
	huart4.Instance = USART4;
 800e39e:	6003      	str	r3, [r0, #0]
	huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e3a0:	23e1      	movs	r3, #225	; 0xe1
 800e3a2:	031b      	lsls	r3, r3, #12
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
	huart4.Init.StopBits = UART_STOPBITS_1;
	huart4.Init.Parity = UART_PARITY_NONE;
	huart4.Init.Mode = UART_MODE_TX_RX;
 800e3a4:	220c      	movs	r2, #12
	huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e3a6:	6043      	str	r3, [r0, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e3a8:	2300      	movs	r3, #0
	huart4.Init.Mode = UART_MODE_TX_RX;
 800e3aa:	6142      	str	r2, [r0, #20]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e3ac:	6083      	str	r3, [r0, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800e3ae:	60c3      	str	r3, [r0, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800e3b0:	6103      	str	r3, [r0, #16]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e3b2:	6183      	str	r3, [r0, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e3b4:	61c3      	str	r3, [r0, #28]
	huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e3b6:	6203      	str	r3, [r0, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e3b8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800e3ba:	f006 fa29 	bl	8014810 <HAL_UART_Init>
#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800e3be:	bd10      	pop	{r4, pc}
 800e3c0:	20006d90 	.word	0x20006d90
 800e3c4:	40004c00 	.word	0x40004c00

0800e3c8 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void){
	huart5.Instance = USART5;
 800e3c8:	4809      	ldr	r0, [pc, #36]	; (800e3f0 <MX_USART5_UART_Init+0x28>)
 800e3ca:	4b0a      	ldr	r3, [pc, #40]	; (800e3f4 <MX_USART5_UART_Init+0x2c>)
void MX_USART5_UART_Init(void){
 800e3cc:	b510      	push	{r4, lr}
	huart5.Instance = USART5;
 800e3ce:	6003      	str	r3, [r0, #0]
	huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e3d0:	23e1      	movs	r3, #225	; 0xe1
 800e3d2:	031b      	lsls	r3, r3, #12
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 800e3d4:	220c      	movs	r2, #12
	huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e3d6:	6043      	str	r3, [r0, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e3d8:	2300      	movs	r3, #0
	huart5.Init.Mode = UART_MODE_TX_RX;
 800e3da:	6142      	str	r2, [r0, #20]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e3dc:	6083      	str	r3, [r0, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 800e3de:	60c3      	str	r3, [r0, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800e3e0:	6103      	str	r3, [r0, #16]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e3e2:	6183      	str	r3, [r0, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e3e4:	61c3      	str	r3, [r0, #28]
	huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e3e6:	6203      	str	r3, [r0, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e3e8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800e3ea:	f006 fa11 	bl	8014810 <HAL_UART_Init>
#if _P6pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800e3ee:	bd10      	pop	{r4, pc}
 800e3f0:	20006c40 	.word	0x20006c40
 800e3f4:	40005000 	.word	0x40005000

0800e3f8 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void){
	huart6.Instance = USART6;
 800e3f8:	4809      	ldr	r0, [pc, #36]	; (800e420 <MX_USART6_UART_Init+0x28>)
 800e3fa:	4b0a      	ldr	r3, [pc, #40]	; (800e424 <MX_USART6_UART_Init+0x2c>)
void MX_USART6_UART_Init(void){
 800e3fc:	b510      	push	{r4, lr}
	huart6.Instance = USART6;
 800e3fe:	6003      	str	r3, [r0, #0]
	huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e400:	23e1      	movs	r3, #225	; 0xe1
 800e402:	031b      	lsls	r3, r3, #12
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
	huart6.Init.StopBits = UART_STOPBITS_1;
	huart6.Init.Parity = UART_PARITY_NONE;
	huart6.Init.Mode = UART_MODE_TX_RX;
 800e404:	220c      	movs	r2, #12
	huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e406:	6043      	str	r3, [r0, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e408:	2300      	movs	r3, #0
	huart6.Init.Mode = UART_MODE_TX_RX;
 800e40a:	6142      	str	r2, [r0, #20]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e40c:	6083      	str	r3, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800e40e:	60c3      	str	r3, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800e410:	6103      	str	r3, [r0, #16]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e412:	6183      	str	r3, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e414:	61c3      	str	r3, [r0, #28]
	huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e416:	6203      	str	r3, [r0, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e418:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800e41a:	f006 f9f9 	bl	8014810 <HAL_UART_Init>
#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800e41e:	bd10      	pop	{r4, pc}
 800e420:	20006d20 	.word	0x20006d20
 800e424:	40011400 	.word	0x40011400

0800e428 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800e428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e42a:	46c6      	mov	lr, r8
 800e42c:	b500      	push	{lr}
	
	GPIO_InitTypeDef GPIO_InitStruct;
	if(huart->Instance == USART1){
 800e42e:	6803      	ldr	r3, [r0, #0]
 800e430:	4a7d      	ldr	r2, [pc, #500]	; (800e628 <HAL_UART_MspInit+0x200>)
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800e432:	b08c      	sub	sp, #48	; 0x30
	if(huart->Instance == USART1){
 800e434:	4293      	cmp	r3, r2
 800e436:	d040      	beq.n	800e4ba <HAL_UART_MspInit+0x92>
		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART1_IRQn,1,0);
		HAL_NVIC_EnableIRQ(USART1_IRQn);
#endif
	}
	else if(huart->Instance == USART2){
 800e438:	4a7c      	ldr	r2, [pc, #496]	; (800e62c <HAL_UART_MspInit+0x204>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d06b      	beq.n	800e516 <HAL_UART_MspInit+0xee>
		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART2_IRQn,1,0);
		HAL_NVIC_EnableIRQ(USART2_IRQn);
#endif
	}
	else if(huart->Instance == USART3){
 800e43e:	4a7c      	ldr	r2, [pc, #496]	; (800e630 <HAL_UART_MspInit+0x208>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d100      	bne.n	800e446 <HAL_UART_MspInit+0x1e>
 800e444:	e093      	b.n	800e56e <HAL_UART_MspInit+0x146>
		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART3_8_IRQn,1,0);
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
#endif
	}
	else if(huart->Instance == USART4){
 800e446:	4a7b      	ldr	r2, [pc, #492]	; (800e634 <HAL_UART_MspInit+0x20c>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d00b      	beq.n	800e464 <HAL_UART_MspInit+0x3c>
		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART3_8_IRQn,1,0);
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
#endif
	}
	else if(huart->Instance == USART5){
 800e44c:	4a7a      	ldr	r2, [pc, #488]	; (800e638 <HAL_UART_MspInit+0x210>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d100      	bne.n	800e454 <HAL_UART_MspInit+0x2c>
 800e452:	e0af      	b.n	800e5b4 <HAL_UART_MspInit+0x18c>
		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART3_8_IRQn,1,0);
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
#endif
	}
	else if(huart->Instance == USART6){
 800e454:	4a79      	ldr	r2, [pc, #484]	; (800e63c <HAL_UART_MspInit+0x214>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d100      	bne.n	800e45c <HAL_UART_MspInit+0x34>
 800e45a:	e0c5      	b.n	800e5e8 <HAL_UART_MspInit+0x1c0>
		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(USART3_8_IRQn,1,0);
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
#endif
	}
}
 800e45c:	b00c      	add	sp, #48	; 0x30
 800e45e:	bc80      	pop	{r7}
 800e460:	46b8      	mov	r8, r7
 800e462:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__USART4_CLK_ENABLE()
 800e464:	2080      	movs	r0, #128	; 0x80
 800e466:	4a76      	ldr	r2, [pc, #472]	; (800e640 <HAL_UART_MspInit+0x218>)
 800e468:	0300      	lsls	r0, r0, #12
 800e46a:	69d1      	ldr	r1, [r2, #28]
		GPIO_InitStruct.Pin = USART4_TX_PIN;
 800e46c:	2401      	movs	r4, #1
		__USART4_CLK_ENABLE()
 800e46e:	4301      	orrs	r1, r0
 800e470:	61d1      	str	r1, [r2, #28]
 800e472:	69d3      	ldr	r3, [r2, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e474:	2502      	movs	r5, #2
		__USART4_CLK_ENABLE()
 800e476:	4003      	ands	r3, r0
		HAL_GPIO_Init(USART4_TX_PORT,&GPIO_InitStruct);
 800e478:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e47a:	2703      	movs	r7, #3
		GPIO_InitStruct.Alternate = USART4_AF;
 800e47c:	2604      	movs	r6, #4
		__USART4_CLK_ENABLE()
 800e47e:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(USART4_TX_PORT,&GPIO_InitStruct);
 800e480:	a907      	add	r1, sp, #28
 800e482:	05c0      	lsls	r0, r0, #23
		__USART4_CLK_ENABLE()
 800e484:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Pin = USART4_TX_PIN;
 800e486:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e488:	9508      	str	r5, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e48a:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e48c:	970a      	str	r7, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART4_AF;
 800e48e:	960b      	str	r6, [sp, #44]	; 0x2c
		HAL_GPIO_Init(USART4_TX_PORT,&GPIO_InitStruct);
 800e490:	f004 f930 	bl	80126f4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;
 800e494:	9507      	str	r5, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e496:	9508      	str	r5, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e498:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e49a:	970a      	str	r7, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART4_AF;
 800e49c:	960b      	str	r6, [sp, #44]	; 0x2c
		HAL_GPIO_Init(USART6_RX_PORT,&GPIO_InitStruct);
 800e49e:	2090      	movs	r0, #144	; 0x90
 800e4a0:	a907      	add	r1, sp, #28
 800e4a2:	05c0      	lsls	r0, r0, #23
 800e4a4:	f004 f926 	bl	80126f4 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_8_IRQn,1,0);
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	201d      	movs	r0, #29
 800e4ae:	f003 f959 	bl	8011764 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e4b2:	201d      	movs	r0, #29
 800e4b4:	f003 f988 	bl	80117c8 <HAL_NVIC_EnableIRQ>
}
 800e4b8:	e7d0      	b.n	800e45c <HAL_UART_MspInit+0x34>
		__USART1_CLK_ENABLE()
 800e4ba:	2080      	movs	r0, #128	; 0x80
 800e4bc:	4a60      	ldr	r2, [pc, #384]	; (800e640 <HAL_UART_MspInit+0x218>)
 800e4be:	01c0      	lsls	r0, r0, #7
 800e4c0:	6991      	ldr	r1, [r2, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e4c2:	2401      	movs	r4, #1
		__USART1_CLK_ENABLE()
 800e4c4:	4301      	orrs	r1, r0
 800e4c6:	6191      	str	r1, [r2, #24]
 800e4c8:	6993      	ldr	r3, [r2, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4ca:	2602      	movs	r6, #2
		__USART1_CLK_ENABLE()
 800e4cc:	4003      	ands	r3, r0
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	9b01      	ldr	r3, [sp, #4]
		HAL_GPIO_Init(USART1_TX_PORT,&GPIO_InitStruct);
 800e4d2:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_TX_PIN;
 800e4d4:	2380      	movs	r3, #128	; 0x80
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e4d6:	2503      	movs	r5, #3
		GPIO_InitStruct.Pin = USART1_TX_PIN;
 800e4d8:	009b      	lsls	r3, r3, #2
		HAL_GPIO_Init(USART1_TX_PORT,&GPIO_InitStruct);
 800e4da:	a907      	add	r1, sp, #28
 800e4dc:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_TX_PIN;
 800e4de:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4e0:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e4e2:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e4e4:	950a      	str	r5, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART1_AF;
 800e4e6:	940b      	str	r4, [sp, #44]	; 0x2c
		HAL_GPIO_Init(USART1_TX_PORT,&GPIO_InitStruct);
 800e4e8:	f004 f904 	bl	80126f4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;
 800e4ec:	2380      	movs	r3, #128	; 0x80
		HAL_GPIO_Init(USART1_RX_PORT,&GPIO_InitStruct);
 800e4ee:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;
 800e4f0:	00db      	lsls	r3, r3, #3
		HAL_GPIO_Init(USART1_RX_PORT,&GPIO_InitStruct);
 800e4f2:	a907      	add	r1, sp, #28
 800e4f4:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;
 800e4f6:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4f8:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e4fa:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e4fc:	950a      	str	r5, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART1_AF;
 800e4fe:	940b      	str	r4, [sp, #44]	; 0x2c
		HAL_GPIO_Init(USART1_RX_PORT,&GPIO_InitStruct);
 800e500:	f004 f8f8 	bl	80126f4 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART1_IRQn,1,0);
 800e504:	2200      	movs	r2, #0
 800e506:	2101      	movs	r1, #1
 800e508:	201b      	movs	r0, #27
 800e50a:	f003 f92b 	bl	8011764 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e50e:	201b      	movs	r0, #27
 800e510:	f003 f95a 	bl	80117c8 <HAL_NVIC_EnableIRQ>
 800e514:	e7a2      	b.n	800e45c <HAL_UART_MspInit+0x34>
		__USART2_CLK_ENABLE()
 800e516:	2080      	movs	r0, #128	; 0x80
 800e518:	4a49      	ldr	r2, [pc, #292]	; (800e640 <HAL_UART_MspInit+0x218>)
 800e51a:	0280      	lsls	r0, r0, #10
 800e51c:	69d1      	ldr	r1, [r2, #28]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e51e:	2401      	movs	r4, #1
		__USART2_CLK_ENABLE()
 800e520:	4301      	orrs	r1, r0
 800e522:	61d1      	str	r1, [r2, #28]
 800e524:	69d3      	ldr	r3, [r2, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e526:	2602      	movs	r6, #2
		__USART2_CLK_ENABLE()
 800e528:	4003      	ands	r3, r0
 800e52a:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(USART2_TX_PORT,&GPIO_InitStruct);
 800e52c:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e52e:	2503      	movs	r5, #3
		__USART2_CLK_ENABLE()
 800e530:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = USART2_TX_PIN;
 800e532:	2304      	movs	r3, #4
		HAL_GPIO_Init(USART2_TX_PORT,&GPIO_InitStruct);
 800e534:	a907      	add	r1, sp, #28
 800e536:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_TX_PIN;
 800e538:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e53a:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e53c:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e53e:	950a      	str	r5, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART2_AF;
 800e540:	940b      	str	r4, [sp, #44]	; 0x2c
		HAL_GPIO_Init(USART2_TX_PORT,&GPIO_InitStruct);
 800e542:	f004 f8d7 	bl	80126f4 <HAL_GPIO_Init>
		HAL_GPIO_Init(USART2_RX_PORT,&GPIO_InitStruct);
 800e546:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;
 800e548:	2308      	movs	r3, #8
		HAL_GPIO_Init(USART2_RX_PORT,&GPIO_InitStruct);
 800e54a:	a907      	add	r1, sp, #28
 800e54c:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;
 800e54e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e550:	9608      	str	r6, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e552:	9409      	str	r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e554:	950a      	str	r5, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART2_AF;
 800e556:	940b      	str	r4, [sp, #44]	; 0x2c
		HAL_GPIO_Init(USART2_RX_PORT,&GPIO_InitStruct);
 800e558:	f004 f8cc 	bl	80126f4 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART2_IRQn,1,0);
 800e55c:	2200      	movs	r2, #0
 800e55e:	2101      	movs	r1, #1
 800e560:	201c      	movs	r0, #28
 800e562:	f003 f8ff 	bl	8011764 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e566:	201c      	movs	r0, #28
 800e568:	f003 f92e 	bl	80117c8 <HAL_NVIC_EnableIRQ>
 800e56c:	e776      	b.n	800e45c <HAL_UART_MspInit+0x34>
		__USART3_CLK_ENABLE()
 800e56e:	2080      	movs	r0, #128	; 0x80
 800e570:	4a33      	ldr	r2, [pc, #204]	; (800e640 <HAL_UART_MspInit+0x218>)
 800e572:	02c0      	lsls	r0, r0, #11
 800e574:	69d1      	ldr	r1, [r2, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e576:	2702      	movs	r7, #2
		__USART3_CLK_ENABLE()
 800e578:	4301      	orrs	r1, r0
 800e57a:	61d1      	str	r1, [r2, #28]
 800e57c:	69d3      	ldr	r3, [r2, #28]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e57e:	2601      	movs	r6, #1
		__USART3_CLK_ENABLE()
 800e580:	4003      	ands	r3, r0
 800e582:	9303      	str	r3, [sp, #12]
 800e584:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin = USART3_TX_PIN;
 800e586:	2380      	movs	r3, #128	; 0x80
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e588:	2503      	movs	r5, #3
		GPIO_InitStruct.Alternate = USART3_AF;
 800e58a:	2404      	movs	r4, #4
		GPIO_InitStruct.Pin = USART3_TX_PIN;
 800e58c:	00db      	lsls	r3, r3, #3
		HAL_GPIO_Init(USART3_TX_PORT,&GPIO_InitStruct);
 800e58e:	482d      	ldr	r0, [pc, #180]	; (800e644 <HAL_UART_MspInit+0x21c>)
 800e590:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Pin = USART3_TX_PIN;
 800e592:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e594:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e596:	9609      	str	r6, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e598:	950a      	str	r5, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART3_AF;
 800e59a:	940b      	str	r4, [sp, #44]	; 0x2c
		HAL_GPIO_Init(USART3_TX_PORT,&GPIO_InitStruct);
 800e59c:	f004 f8aa 	bl	80126f4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;
 800e5a0:	2380      	movs	r3, #128	; 0x80
 800e5a2:	011b      	lsls	r3, r3, #4
		HAL_GPIO_Init(USART5_RX_PORT,&GPIO_InitStruct);
 800e5a4:	4827      	ldr	r0, [pc, #156]	; (800e644 <HAL_UART_MspInit+0x21c>)
		GPIO_InitStruct.Pin = USART5_RX_PIN;
 800e5a6:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5a8:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5aa:	9609      	str	r6, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e5ac:	950a      	str	r5, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART5_AF;
 800e5ae:	940b      	str	r4, [sp, #44]	; 0x2c
		HAL_GPIO_Init(USART5_RX_PORT,&GPIO_InitStruct);
 800e5b0:	a907      	add	r1, sp, #28
 800e5b2:	e777      	b.n	800e4a4 <HAL_UART_MspInit+0x7c>
		__USART5_CLK_ENABLE()
 800e5b4:	2080      	movs	r0, #128	; 0x80
 800e5b6:	4a22      	ldr	r2, [pc, #136]	; (800e640 <HAL_UART_MspInit+0x218>)
 800e5b8:	0340      	lsls	r0, r0, #13
 800e5ba:	69d1      	ldr	r1, [r2, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5bc:	2702      	movs	r7, #2
		__USART5_CLK_ENABLE()
 800e5be:	4301      	orrs	r1, r0
 800e5c0:	61d1      	str	r1, [r2, #28]
 800e5c2:	69d3      	ldr	r3, [r2, #28]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5c4:	2601      	movs	r6, #1
		__USART5_CLK_ENABLE()
 800e5c6:	4003      	ands	r3, r0
 800e5c8:	9305      	str	r3, [sp, #20]
 800e5ca:	9b05      	ldr	r3, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e5cc:	2503      	movs	r5, #3
		GPIO_InitStruct.Pin = USART5_TX_PIN;
 800e5ce:	2308      	movs	r3, #8
		GPIO_InitStruct.Alternate = USART5_AF;
 800e5d0:	2404      	movs	r4, #4
		HAL_GPIO_Init(USART5_TX_PORT,&GPIO_InitStruct);
 800e5d2:	481c      	ldr	r0, [pc, #112]	; (800e644 <HAL_UART_MspInit+0x21c>)
 800e5d4:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Pin = USART5_TX_PIN;
 800e5d6:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5d8:	9708      	str	r7, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5da:	9609      	str	r6, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e5dc:	950a      	str	r5, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART5_AF;
 800e5de:	940b      	str	r4, [sp, #44]	; 0x2c
		HAL_GPIO_Init(USART5_TX_PORT,&GPIO_InitStruct);
 800e5e0:	f004 f888 	bl	80126f4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;
 800e5e4:	2310      	movs	r3, #16
 800e5e6:	e7dd      	b.n	800e5a4 <HAL_UART_MspInit+0x17c>
		__USART6_CLK_ENABLE()
 800e5e8:	2420      	movs	r4, #32
 800e5ea:	4b15      	ldr	r3, [pc, #84]	; (800e640 <HAL_UART_MspInit+0x218>)
		HAL_GPIO_Init(USART6_TX_PORT,&GPIO_InitStruct);
 800e5ec:	2090      	movs	r0, #144	; 0x90
		__USART6_CLK_ENABLE()
 800e5ee:	699a      	ldr	r2, [r3, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5f0:	2701      	movs	r7, #1
		__USART6_CLK_ENABLE()
 800e5f2:	4322      	orrs	r2, r4
 800e5f4:	619a      	str	r2, [r3, #24]
 800e5f6:	699b      	ldr	r3, [r3, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e5f8:	2603      	movs	r6, #3
		__USART6_CLK_ENABLE()
 800e5fa:	4023      	ands	r3, r4
 800e5fc:	9306      	str	r3, [sp, #24]
 800e5fe:	9b06      	ldr	r3, [sp, #24]
		GPIO_InitStruct.Pin = USART6_TX_PIN;
 800e600:	2310      	movs	r3, #16
 800e602:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e604:	3b0e      	subs	r3, #14
 800e606:	4698      	mov	r8, r3
		GPIO_InitStruct.Alternate = USART6_AF;
 800e608:	2505      	movs	r5, #5
		HAL_GPIO_Init(USART6_TX_PORT,&GPIO_InitStruct);
 800e60a:	a907      	add	r1, sp, #28
 800e60c:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e60e:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e610:	9709      	str	r7, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e612:	960a      	str	r6, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART6_AF;
 800e614:	950b      	str	r5, [sp, #44]	; 0x2c
		HAL_GPIO_Init(USART6_TX_PORT,&GPIO_InitStruct);
 800e616:	f004 f86d 	bl	80126f4 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e61a:	4643      	mov	r3, r8
		GPIO_InitStruct.Pin = USART6_RX_PIN;
 800e61c:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e61e:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e620:	9709      	str	r7, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e622:	960a      	str	r6, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = USART6_AF;
 800e624:	950b      	str	r5, [sp, #44]	; 0x2c
 800e626:	e73a      	b.n	800e49e <HAL_UART_MspInit+0x76>
 800e628:	40013800 	.word	0x40013800
 800e62c:	40004400 	.word	0x40004400
 800e630:	40004800 	.word	0x40004800
 800e634:	40004c00 	.word	0x40004c00
 800e638:	40005000 	.word	0x40005000
 800e63c:	40011400 	.word	0x40011400
 800e640:	40021000 	.word	0x40021000
 800e644:	48000400 	.word	0x48000400

0800e648 <writePxMutex>:
	return result;
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
 */
HAL_StatusTypeDef writePxMutex(uint8_t port,char *buffer,uint16_t n,uint32_t mutexTimeout,uint32_t portTimeout){
 800e648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e64a:	46ce      	mov	lr, r9
 800e64c:	4647      	mov	r7, r8
 800e64e:	1e44      	subs	r4, r0, #1
 800e650:	b2e4      	uxtb	r4, r4
 800e652:	000d      	movs	r5, r1
 800e654:	0016      	movs	r6, r2
 800e656:	0019      	movs	r1, r3
 800e658:	b580      	push	{r7, lr}
 800e65a:	2c05      	cmp	r4, #5
 800e65c:	d80f      	bhi.n	800e67e <writePxMutex+0x36>
 800e65e:	4a13      	ldr	r2, [pc, #76]	; (800e6ac <writePxMutex+0x64>)
 800e660:	00a4      	lsls	r4, r4, #2
 800e662:	58a7      	ldr	r7, [r4, r2]
	HAL_StatusTypeDef result =HAL_ERROR;
	
	if(GetUart(port) != NULL){
 800e664:	2f00      	cmp	r7, #0
 800e666:	d00a      	beq.n	800e67e <writePxMutex+0x36>
		/*/ Wait for the semaphore to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 800e668:	4b11      	ldr	r3, [pc, #68]	; (800e6b0 <writePxMutex+0x68>)
 800e66a:	4698      	mov	r8, r3
 800e66c:	0083      	lsls	r3, r0, #2
 800e66e:	4699      	mov	r9, r3
 800e670:	4643      	mov	r3, r8
 800e672:	464a      	mov	r2, r9
 800e674:	5898      	ldr	r0, [r3, r2]
 800e676:	f000 fd3b 	bl	800f0f0 <osSemaphoreWait>
 800e67a:	2800      	cmp	r0, #0
 800e67c:	d007      	beq.n	800e68e <writePxMutex+0x46>
	HAL_StatusTypeDef result =HAL_ERROR;
 800e67e:	2401      	movs	r4, #1
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
		}
	}
	
	return result;
}
 800e680:	0020      	movs	r0, r4
 800e682:	bcc0      	pop	{r6, r7}
 800e684:	46b9      	mov	r9, r7
 800e686:	46b0      	mov	r8, r6
 800e688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while(result != HAL_OK && result != HAL_TIMEOUT){
 800e68a:	2803      	cmp	r0, #3
 800e68c:	d007      	beq.n	800e69e <writePxMutex+0x56>
				result =HAL_UART_Transmit(GetUart(port),(uint8_t* )buffer,n,portTimeout);
 800e68e:	0032      	movs	r2, r6
 800e690:	0029      	movs	r1, r5
 800e692:	0038      	movs	r0, r7
 800e694:	9b08      	ldr	r3, [sp, #32]
 800e696:	f006 f817 	bl	80146c8 <HAL_UART_Transmit>
 800e69a:	1e04      	subs	r4, r0, #0
			while(result != HAL_OK && result != HAL_TIMEOUT){
 800e69c:	d1f5      	bne.n	800e68a <writePxMutex+0x42>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e69e:	4643      	mov	r3, r8
 800e6a0:	464a      	mov	r2, r9
 800e6a2:	5898      	ldr	r0, [r3, r2]
 800e6a4:	f000 fd4c 	bl	800f140 <osSemaphoreRelease>
 800e6a8:	e7ea      	b.n	800e680 <writePxMutex+0x38>
 800e6aa:	46c0      	nop			; (mov r8, r8)
 800e6ac:	0801e270 	.word	0x0801e270
 800e6b0:	20006b30 	.word	0x20006b30

0800e6b4 <writePxITMutex>:
	return result;
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
 */
HAL_StatusTypeDef writePxITMutex(uint8_t port,char *buffer,uint16_t n,uint32_t mutexTimeout){
 800e6b4:	b570      	push	{r4, r5, r6, lr}
 800e6b6:	1e44      	subs	r4, r0, #1
 800e6b8:	b2e4      	uxtb	r4, r4
 800e6ba:	000d      	movs	r5, r1
 800e6bc:	0016      	movs	r6, r2
 800e6be:	0019      	movs	r1, r3
 800e6c0:	2c05      	cmp	r4, #5
 800e6c2:	d80b      	bhi.n	800e6dc <writePxITMutex+0x28>
 800e6c4:	4a09      	ldr	r2, [pc, #36]	; (800e6ec <writePxITMutex+0x38>)
 800e6c6:	00a4      	lsls	r4, r4, #2
 800e6c8:	58a4      	ldr	r4, [r4, r2]
	HAL_StatusTypeDef result =HAL_ERROR;
	
	if(GetUart(port) != NULL){
 800e6ca:	2c00      	cmp	r4, #0
 800e6cc:	d006      	beq.n	800e6dc <writePxITMutex+0x28>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 800e6ce:	4a08      	ldr	r2, [pc, #32]	; (800e6f0 <writePxITMutex+0x3c>)
 800e6d0:	0080      	lsls	r0, r0, #2
 800e6d2:	5880      	ldr	r0, [r0, r2]
 800e6d4:	f000 fd0c 	bl	800f0f0 <osSemaphoreWait>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d001      	beq.n	800e6e0 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result =HAL_ERROR;
 800e6dc:	2001      	movs	r0, #1
			result =HAL_UART_Transmit_IT(GetUart(port),(uint8_t* )buffer,n);
		}
	}
	
	return result;
}
 800e6de:	bd70      	pop	{r4, r5, r6, pc}
			result =HAL_UART_Transmit_IT(GetUart(port),(uint8_t* )buffer,n);
 800e6e0:	0032      	movs	r2, r6
 800e6e2:	0029      	movs	r1, r5
 800e6e4:	0020      	movs	r0, r4
 800e6e6:	f005 fcd5 	bl	8014094 <HAL_UART_Transmit_IT>
 800e6ea:	e7f8      	b.n	800e6de <writePxITMutex+0x2a>
 800e6ec:	0801e270 	.word	0x0801e270
 800e6f0:	20006b30 	.word	0x20006b30

0800e6f4 <writePxDMAMutex>:

/* --- Non-blocking (DMA-based) write protected with a semaphore --- 
 */
HAL_StatusTypeDef writePxDMAMutex(uint8_t port,char *buffer,uint16_t n,uint32_t mutexTimeout){
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	1e44      	subs	r4, r0, #1
 800e6f8:	b2e4      	uxtb	r4, r4
 800e6fa:	000d      	movs	r5, r1
 800e6fc:	0016      	movs	r6, r2
 800e6fe:	0019      	movs	r1, r3
 800e700:	2c05      	cmp	r4, #5
 800e702:	d80b      	bhi.n	800e71c <writePxDMAMutex+0x28>
 800e704:	4a0b      	ldr	r2, [pc, #44]	; (800e734 <writePxDMAMutex+0x40>)
 800e706:	00a4      	lsls	r4, r4, #2
 800e708:	58a4      	ldr	r4, [r4, r2]
	HAL_StatusTypeDef result =HAL_ERROR;
	UART_HandleTypeDef *hUart =GetUart(port);
	
	if(hUart != NULL){
 800e70a:	2c00      	cmp	r4, #0
 800e70c:	d006      	beq.n	800e71c <writePxDMAMutex+0x28>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 800e70e:	4a0a      	ldr	r2, [pc, #40]	; (800e738 <writePxDMAMutex+0x44>)
 800e710:	0080      	lsls	r0, r0, #2
 800e712:	5880      	ldr	r0, [r0, r2]
 800e714:	f000 fcec 	bl	800f0f0 <osSemaphoreWait>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d001      	beq.n	800e720 <writePxDMAMutex+0x2c>
	HAL_StatusTypeDef result =HAL_ERROR;
 800e71c:	2001      	movs	r0, #1
			result =HAL_UART_Transmit_DMA(hUart,(uint8_t* )buffer,n);
		}
	}
	
	return result;
}
 800e71e:	bd70      	pop	{r4, r5, r6, pc}
			DMA_MSG_TX_Setup(hUart);
 800e720:	0020      	movs	r0, r4
 800e722:	f7ff f8d5 	bl	800d8d0 <DMA_MSG_TX_Setup>
			result =HAL_UART_Transmit_DMA(hUart,(uint8_t* )buffer,n);
 800e726:	0032      	movs	r2, r6
 800e728:	0029      	movs	r1, r5
 800e72a:	0020      	movs	r0, r4
 800e72c:	f005 fd46 	bl	80141bc <HAL_UART_Transmit_DMA>
 800e730:	e7f5      	b.n	800e71e <writePxDMAMutex+0x2a>
 800e732:	46c0      	nop			; (mov r8, r8)
 800e734:	0801e270 	.word	0x0801e270
 800e738:	20006b30 	.word	0x20006b30

0800e73c <UpdateBaudrate>:
}

/* --- Get the UART for a given port. 
 */
UART_HandleTypeDef* GetUart(uint8_t port){
	switch(port){
 800e73c:	3801      	subs	r0, #1
 800e73e:	b2c0      	uxtb	r0, r0
BOS_Status UpdateBaudrate(uint8_t port,uint32_t baudrate){
 800e740:	b510      	push	{r4, lr}
 800e742:	2805      	cmp	r0, #5
 800e744:	d807      	bhi.n	800e756 <UpdateBaudrate+0x1a>
 800e746:	4b05      	ldr	r3, [pc, #20]	; (800e75c <UpdateBaudrate+0x20>)
 800e748:	0080      	lsls	r0, r0, #2
 800e74a:	58c0      	ldr	r0, [r0, r3]
	huart->Init.BaudRate =baudrate;
 800e74c:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800e74e:	f006 f85f 	bl	8014810 <HAL_UART_Init>
}
 800e752:	2000      	movs	r0, #0
 800e754:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate =baudrate;
 800e756:	2300      	movs	r3, #0
 800e758:	605b      	str	r3, [r3, #4]
 800e75a:	deff      	udf	#255	; 0xff
 800e75c:	0801e270 	.word	0x0801e270

0800e760 <GetUart>:
	switch(port){
 800e760:	3801      	subs	r0, #1
 800e762:	b2c3      	uxtb	r3, r0
UART_HandleTypeDef* GetUart(uint8_t port){
 800e764:	2000      	movs	r0, #0
 800e766:	2b05      	cmp	r3, #5
 800e768:	d802      	bhi.n	800e770 <GetUart+0x10>
 800e76a:	4a02      	ldr	r2, [pc, #8]	; (800e774 <GetUart+0x14>)
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	5898      	ldr	r0, [r3, r2]
			return P10uart;
	#endif
		default:
			return 0;
	}
}
 800e770:	4770      	bx	lr
 800e772:	46c0      	nop			; (mov r8, r8)
 800e774:	0801e270 	.word	0x0801e270

0800e778 <SwapUartPins>:

/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
 */
void SwapUartPins(UART_HandleTypeDef *huart,uint8_t direction){
 800e778:	b570      	push	{r4, r5, r6, lr}
 800e77a:	0004      	movs	r4, r0
 800e77c:	000d      	movs	r5, r1
	if(huart != NULL){
 800e77e:	2800      	cmp	r0, #0
 800e780:	d003      	beq.n	800e78a <SwapUartPins+0x12>
		if(direction == REVERSED){
 800e782:	2901      	cmp	r1, #1
 800e784:	d017      	beq.n	800e7b6 <SwapUartPins+0x3e>
			arrayPortsDir[myID - 1] |=(0x8000 >> (GetPort(huart) - 1)); /* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		}
		else if(direction == NORMAL){
 800e786:	2900      	cmp	r1, #0
 800e788:	d000      	beq.n	800e78c <SwapUartPins+0x14>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);
		}
	}
}
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID - 1] &=(~(0x8000 >> (GetPort(huart) - 1))); /* Set bit to zero */
 800e78c:	f7fd fc48 	bl	800c020 <GetPort>
 800e790:	2180      	movs	r1, #128	; 0x80
 800e792:	3801      	subs	r0, #1
 800e794:	0209      	lsls	r1, r1, #8
 800e796:	4101      	asrs	r1, r0
 800e798:	4b12      	ldr	r3, [pc, #72]	; (800e7e4 <SwapUartPins+0x6c>)
 800e79a:	4e13      	ldr	r6, [pc, #76]	; (800e7e8 <SwapUartPins+0x70>)
 800e79c:	781b      	ldrb	r3, [r3, #0]
			HAL_UART_Init(huart);
 800e79e:	0020      	movs	r0, r4
			arrayPortsDir[myID - 1] &=(~(0x8000 >> (GetPort(huart) - 1))); /* Set bit to zero */
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	5b9a      	ldrh	r2, [r3, r6]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e7a6:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID - 1] &=(~(0x8000 >> (GetPort(huart) - 1))); /* Set bit to zero */
 800e7a8:	438a      	bics	r2, r1
 800e7aa:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e7ac:	2308      	movs	r3, #8
 800e7ae:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800e7b0:	f006 f82e 	bl	8014810 <HAL_UART_Init>
}
 800e7b4:	e7e9      	b.n	800e78a <SwapUartPins+0x12>
			arrayPortsDir[myID - 1] |=(0x8000 >> (GetPort(huart) - 1)); /* Set bit to one */
 800e7b6:	f7fd fc33 	bl	800c020 <GetPort>
 800e7ba:	2180      	movs	r1, #128	; 0x80
 800e7bc:	0209      	lsls	r1, r1, #8
 800e7be:	000a      	movs	r2, r1
 800e7c0:	3801      	subs	r0, #1
 800e7c2:	4102      	asrs	r2, r0
 800e7c4:	4b07      	ldr	r3, [pc, #28]	; (800e7e4 <SwapUartPins+0x6c>)
 800e7c6:	4d08      	ldr	r5, [pc, #32]	; (800e7e8 <SwapUartPins+0x70>)
 800e7c8:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e7ca:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID - 1] |=(0x8000 >> (GetPort(huart) - 1)); /* Set bit to one */
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	005b      	lsls	r3, r3, #1
 800e7d0:	5b58      	ldrh	r0, [r3, r5]
 800e7d2:	4302      	orrs	r2, r0
 800e7d4:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e7d6:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800e7d8:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e7da:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800e7dc:	f006 f818 	bl	8014810 <HAL_UART_Init>
 800e7e0:	e7d3      	b.n	800e78a <SwapUartPins+0x12>
 800e7e2:	46c0      	nop			; (mov r8, r8)
 800e7e4:	2000110e 	.word	0x2000110e
 800e7e8:	20006f68 	.word	0x20006f68

0800e7ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e7ec:	4816      	ldr	r0, [pc, #88]	; (800e848 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e7ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e7f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e7f2:	e003      	b.n	800e7fc <LoopCopyDataInit>

0800e7f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e7f4:	4b15      	ldr	r3, [pc, #84]	; (800e84c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e7f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e7f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e7fa:	3104      	adds	r1, #4

0800e7fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e7fc:	4814      	ldr	r0, [pc, #80]	; (800e850 <LoopForever+0xc>)
  ldr r3, =_edata
 800e7fe:	4b15      	ldr	r3, [pc, #84]	; (800e854 <LoopForever+0x10>)
  adds r2, r0, r1
 800e800:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e802:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e804:	d3f6      	bcc.n	800e7f4 <CopyDataInit>
  ldr r2, =_sbss
 800e806:	4a14      	ldr	r2, [pc, #80]	; (800e858 <LoopForever+0x14>)
  b LoopFillZerobss
 800e808:	e002      	b.n	800e810 <LoopFillZerobss>

0800e80a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e80a:	2300      	movs	r3, #0
  str  r3, [r2]
 800e80c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e80e:	3204      	adds	r2, #4

0800e810 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e810:	4b12      	ldr	r3, [pc, #72]	; (800e85c <LoopForever+0x18>)
  cmp r2, r3
 800e812:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e814:	d3f9      	bcc.n	800e80a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e816:	4812      	ldr	r0, [pc, #72]	; (800e860 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e818:	4912      	ldr	r1, [pc, #72]	; (800e864 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e81a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e81c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e81e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e820:	d005      	beq.n	800e82e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e822:	f000 f82b 	bl	800e87c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e826:	f006 f993 	bl	8014b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e82a:	f006 f943 	bl	8014ab4 <main>

0800e82e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e82e:	480e      	ldr	r0, [pc, #56]	; (800e868 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e830:	490e      	ldr	r1, [pc, #56]	; (800e86c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e832:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e834:	480e      	ldr	r0, [pc, #56]	; (800e870 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e836:	490d      	ldr	r1, [pc, #52]	; (800e86c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e838:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e83a:	480e      	ldr	r0, [pc, #56]	; (800e874 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e83c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e83e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e840:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e842:	4700      	bx	r0

0800e844 <LoopForever>:


LoopForever:
    b LoopForever
 800e844:	e7fe      	b.n	800e844 <LoopForever>
 800e846:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e848:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e84c:	0801e9c4 	.word	0x0801e9c4
  ldr r0, =_sdata
 800e850:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e854:	20000aec 	.word	0x20000aec
  ldr r2, =_sbss
 800e858:	20000af0 	.word	0x20000af0
  ldr r3, = _ebss
 800e85c:	20007010 	.word	0x20007010
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e860:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e864:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e868:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e86c:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e870:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e874:	1fffd800 	.word	0x1fffd800

0800e878 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e878:	e7fe      	b.n	800e878 <ADC1_COMP_IRQHandler>
	...

0800e87c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e87c:	2101      	movs	r1, #1
 800e87e:	4b11      	ldr	r3, [pc, #68]	; (800e8c4 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e880:	4811      	ldr	r0, [pc, #68]	; (800e8c8 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	430a      	orrs	r2, r1
 800e886:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e888:	685a      	ldr	r2, [r3, #4]
 800e88a:	4002      	ands	r2, r0
 800e88c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	480e      	ldr	r0, [pc, #56]	; (800e8cc <SystemInit+0x50>)
 800e892:	4002      	ands	r2, r0
 800e894:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	480d      	ldr	r0, [pc, #52]	; (800e8d0 <SystemInit+0x54>)
 800e89a:	4002      	ands	r2, r0
 800e89c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e89e:	685a      	ldr	r2, [r3, #4]
 800e8a0:	480c      	ldr	r0, [pc, #48]	; (800e8d4 <SystemInit+0x58>)
 800e8a2:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e8a4:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e8a6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8aa:	4382      	bics	r2, r0
 800e8ac:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e8ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8b0:	4809      	ldr	r0, [pc, #36]	; (800e8d8 <SystemInit+0x5c>)
 800e8b2:	4002      	ands	r2, r0
 800e8b4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e8b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8b8:	438a      	bics	r2, r1
 800e8ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e8bc:	2200      	movs	r2, #0
 800e8be:	609a      	str	r2, [r3, #8]

}
 800e8c0:	4770      	bx	lr
 800e8c2:	46c0      	nop			; (mov r8, r8)
 800e8c4:	40021000 	.word	0x40021000
 800e8c8:	08ffb80c 	.word	0x08ffb80c
 800e8cc:	fef6ffff 	.word	0xfef6ffff
 800e8d0:	fffbffff 	.word	0xfffbffff
 800e8d4:	ffc0ffff 	.word	0xffc0ffff
 800e8d8:	fff0feac 	.word	0xfff0feac

0800e8dc <LSM303AGR_MAG_R_WHO_AM_I>:
* Input          : Pointer to u8_t
* Output         : Status of WHO_AM_I
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM303AGR_MAG_R_WHO_AM_I(void *handle, u8_t *value)
{
 800e8dc:	000a      	movs	r2, r1
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e8de:	2301      	movs	r3, #1
{
 800e8e0:	b510      	push	{r4, lr}
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e8e2:	214f      	movs	r1, #79	; 0x4f
 800e8e4:	f7ff fa32 	bl	800dd4c <LSM303AGR_MAG_I2C_Read>
 800e8e8:	4243      	negs	r3, r0
 800e8ea:	4158      	adcs	r0, r3

  *value &= LSM303AGR_MAG_WHO_AM_I_MASK; //coerce
  *value = *value >> LSM303AGR_MAG_WHO_AM_I_POSITION; //mask

  return MEMS_SUCCESS;
}
 800e8ec:	b2c0      	uxtb	r0, r0
 800e8ee:	bd10      	pop	{r4, pc}

0800e8f0 <LSM303AGR_MAG_W_BDU>:
* Input          : LSM303AGR_MAG_BDU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_BDU(void *handle, LSM303AGR_MAG_BDU_t newValue)
{
 800e8f0:	b570      	push	{r4, r5, r6, lr}
 800e8f2:	b082      	sub	sp, #8
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e8f4:	466b      	mov	r3, sp
 800e8f6:	1dde      	adds	r6, r3, #7
{
 800e8f8:	000d      	movs	r5, r1
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	0032      	movs	r2, r6
 800e8fe:	2162      	movs	r1, #98	; 0x62
{
 800e900:	0004      	movs	r4, r0
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e902:	f7ff fa23 	bl	800dd4c <LSM303AGR_MAG_I2C_Read>
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
    return MEMS_ERROR;
 800e906:	2300      	movs	r3, #0
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e908:	2800      	cmp	r0, #0
 800e90a:	d10d      	bne.n	800e928 <LSM303AGR_MAG_W_BDU+0x38>

  value &= ~LSM303AGR_MAG_BDU_MASK;
 800e90c:	7831      	ldrb	r1, [r6, #0]
 800e90e:	3310      	adds	r3, #16
 800e910:	4399      	bics	r1, r3
  value |= newValue;
 800e912:	4329      	orrs	r1, r5
 800e914:	7031      	strb	r1, [r6, #0]
  if (LSM303AGR_MAG_I2C_Write(handle, Reg, Bufp, len))
 800e916:	3b0f      	subs	r3, #15
 800e918:	0032      	movs	r2, r6
 800e91a:	2162      	movs	r1, #98	; 0x62
 800e91c:	0020      	movs	r0, r4
 800e91e:	f7ff fa05 	bl	800dd2c <LSM303AGR_MAG_I2C_Write>
 800e922:	4243      	negs	r3, r0
 800e924:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800e926:	b2db      	uxtb	r3, r3

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e928:	0018      	movs	r0, r3
 800e92a:	b002      	add	sp, #8
 800e92c:	bd70      	pop	{r4, r5, r6, pc}
 800e92e:	46c0      	nop			; (mov r8, r8)

0800e930 <LSM303AGR_MAG_W_MD>:
* Input          : LSM303AGR_MAG_MD_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_MD(void *handle, LSM303AGR_MAG_MD_t newValue)
{
 800e930:	b570      	push	{r4, r5, r6, lr}
 800e932:	b082      	sub	sp, #8
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e934:	466b      	mov	r3, sp
 800e936:	1dde      	adds	r6, r3, #7
{
 800e938:	000d      	movs	r5, r1
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e93a:	2301      	movs	r3, #1
 800e93c:	0032      	movs	r2, r6
 800e93e:	2160      	movs	r1, #96	; 0x60
{
 800e940:	0004      	movs	r4, r0
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e942:	f7ff fa03 	bl	800dd4c <LSM303AGR_MAG_I2C_Read>
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
    return MEMS_ERROR;
 800e946:	2300      	movs	r3, #0
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e948:	2800      	cmp	r0, #0
 800e94a:	d10d      	bne.n	800e968 <LSM303AGR_MAG_W_MD+0x38>

  value &= ~LSM303AGR_MAG_MD_MASK;
 800e94c:	7831      	ldrb	r1, [r6, #0]
 800e94e:	3303      	adds	r3, #3
 800e950:	4399      	bics	r1, r3
  value |= newValue;
 800e952:	4329      	orrs	r1, r5
 800e954:	7031      	strb	r1, [r6, #0]
  if (LSM303AGR_MAG_I2C_Write(handle, Reg, Bufp, len))
 800e956:	3b02      	subs	r3, #2
 800e958:	0032      	movs	r2, r6
 800e95a:	2160      	movs	r1, #96	; 0x60
 800e95c:	0020      	movs	r0, r4
 800e95e:	f7ff f9e5 	bl	800dd2c <LSM303AGR_MAG_I2C_Write>
 800e962:	4243      	negs	r3, r0
 800e964:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800e966:	b2db      	uxtb	r3, r3

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e968:	0018      	movs	r0, r3
 800e96a:	b002      	add	sp, #8
 800e96c:	bd70      	pop	{r4, r5, r6, pc}
 800e96e:	46c0      	nop			; (mov r8, r8)

0800e970 <LSM303AGR_MAG_Get_Raw_Magnetic>:
* Input          : pointer to [u8_t]
* Output         : Magnetic buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM303AGR_MAG_Get_Raw_Magnetic(void *handle, u8_t *buff)
{
 800e970:	000a      	movs	r2, r1
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e972:	2306      	movs	r3, #6
{
 800e974:	b510      	push	{r4, lr}
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e976:	2168      	movs	r1, #104	; 0x68
 800e978:	f7ff f9e8 	bl	800dd4c <LSM303AGR_MAG_I2C_Read>
 800e97c:	4243      	negs	r3, r0
 800e97e:	4158      	adcs	r0, r3
  if( !LSM303AGR_MAG_ReadReg( handle, LSM303AGR_MAG_OUTX_L_REG, buff, 6 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e980:	b2c0      	uxtb	r0, r0
 800e982:	bd10      	pop	{r4, pc}

0800e984 <LSM303AGR_MAG_W_ODR>:
* Input          : LSM303AGR_MAG_ODR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_ODR(void *handle, LSM303AGR_MAG_ODR_t newValue)
{
 800e984:	b570      	push	{r4, r5, r6, lr}
 800e986:	b082      	sub	sp, #8
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e988:	466b      	mov	r3, sp
 800e98a:	1dde      	adds	r6, r3, #7
{
 800e98c:	000d      	movs	r5, r1
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e98e:	2301      	movs	r3, #1
 800e990:	0032      	movs	r2, r6
 800e992:	2160      	movs	r1, #96	; 0x60
{
 800e994:	0004      	movs	r4, r0
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e996:	f7ff f9d9 	bl	800dd4c <LSM303AGR_MAG_I2C_Read>
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
    return MEMS_ERROR;
 800e99a:	2300      	movs	r3, #0
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e99c:	2800      	cmp	r0, #0
 800e99e:	d10d      	bne.n	800e9bc <LSM303AGR_MAG_W_ODR+0x38>

  value &= ~LSM303AGR_MAG_ODR_MASK;
 800e9a0:	7831      	ldrb	r1, [r6, #0]
 800e9a2:	330c      	adds	r3, #12
 800e9a4:	4399      	bics	r1, r3
  value |= newValue;
 800e9a6:	4329      	orrs	r1, r5
 800e9a8:	7031      	strb	r1, [r6, #0]
  if (LSM303AGR_MAG_I2C_Write(handle, Reg, Bufp, len))
 800e9aa:	3b0b      	subs	r3, #11
 800e9ac:	0032      	movs	r2, r6
 800e9ae:	2160      	movs	r1, #96	; 0x60
 800e9b0:	0020      	movs	r0, r4
 800e9b2:	f7ff f9bb 	bl	800dd2c <LSM303AGR_MAG_I2C_Write>
 800e9b6:	4243      	negs	r3, r0
 800e9b8:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800e9ba:	b2db      	uxtb	r3, r3

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e9bc:	0018      	movs	r0, r3
 800e9be:	b002      	add	sp, #8
 800e9c0:	bd70      	pop	{r4, r5, r6, pc}
 800e9c2:	46c0      	nop			; (mov r8, r8)

0800e9c4 <LSM303AGR_MAG_W_ST>:
* Input          : LSM303AGR_MAG_ST_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_ST(void *handle, LSM303AGR_MAG_ST_t newValue)
{
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	b082      	sub	sp, #8
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e9c8:	466b      	mov	r3, sp
 800e9ca:	1dde      	adds	r6, r3, #7
{
 800e9cc:	000d      	movs	r5, r1
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	0032      	movs	r2, r6
 800e9d2:	2162      	movs	r1, #98	; 0x62
{
 800e9d4:	0004      	movs	r4, r0
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e9d6:	f7ff f9b9 	bl	800dd4c <LSM303AGR_MAG_I2C_Read>
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
    return MEMS_ERROR;
 800e9da:	2300      	movs	r3, #0
  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d10d      	bne.n	800e9fc <LSM303AGR_MAG_W_ST+0x38>

  value &= ~LSM303AGR_MAG_ST_MASK;
 800e9e0:	7831      	ldrb	r1, [r6, #0]
 800e9e2:	3302      	adds	r3, #2
 800e9e4:	4399      	bics	r1, r3
  value |= newValue;
 800e9e6:	4329      	orrs	r1, r5
 800e9e8:	7031      	strb	r1, [r6, #0]
  if (LSM303AGR_MAG_I2C_Write(handle, Reg, Bufp, len))
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	0032      	movs	r2, r6
 800e9ee:	2162      	movs	r1, #98	; 0x62
 800e9f0:	0020      	movs	r0, r4
 800e9f2:	f7ff f99b 	bl	800dd2c <LSM303AGR_MAG_I2C_Write>
 800e9f6:	4243      	negs	r3, r0
 800e9f8:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800e9fa:	b2db      	uxtb	r3, r3

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e9fc:	0018      	movs	r0, r3
 800e9fe:	b002      	add	sp, #8
 800ea00:	bd70      	pop	{r4, r5, r6, pc}
 800ea02:	46c0      	nop			; (mov r8, r8)

0800ea04 <LSM6DS3_ACC_GYRO_ReadReg>:
    return MEMS_SUCCESS;
  }
}

status_t LSM6DS3_ACC_GYRO_ReadReg(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800ea04:	b510      	push	{r4, lr}

  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ea06:	f7ff f981 	bl	800dd0c <LSM6DS3_I2C_Read>
 800ea0a:	4243      	negs	r3, r0
 800ea0c:	4158      	adcs	r0, r3
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800ea0e:	b2c0      	uxtb	r0, r0
 800ea10:	bd10      	pop	{r4, pc}
 800ea12:	46c0      	nop			; (mov r8, r8)

0800ea14 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>:
* Input          : Pointer to uint8_t
* Output         : Status of WHO_AM_I_BIT
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_WHO_AM_I(void *handle, uint8_t *value)
{
 800ea14:	000a      	movs	r2, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ea16:	2301      	movs	r3, #1
{
 800ea18:	b510      	push	{r4, lr}
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ea1a:	210f      	movs	r1, #15
 800ea1c:	f7ff f976 	bl	800dd0c <LSM6DS3_I2C_Read>
 800ea20:	4243      	negs	r3, r0
 800ea22:	4158      	adcs	r0, r3

  *value &= LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_MASK; //coerce
  *value = *value >> LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_POSITION; //mask

  return MEMS_SUCCESS;
}
 800ea24:	b2c0      	uxtb	r0, r0
 800ea26:	bd10      	pop	{r4, pc}

0800ea28 <LSM6DS3_ACC_GYRO_W_FS_XL>:
* Input          : LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t newValue)
{
 800ea28:	b570      	push	{r4, r5, r6, lr}
 800ea2a:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ea2c:	466b      	mov	r3, sp
 800ea2e:	1dde      	adds	r6, r3, #7
{
 800ea30:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ea32:	2301      	movs	r3, #1
 800ea34:	0032      	movs	r2, r6
 800ea36:	2110      	movs	r1, #16
{
 800ea38:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ea3a:	f7ff f967 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;
 800ea3e:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d10d      	bne.n	800ea60 <LSM6DS3_ACC_GYRO_W_FS_XL+0x38>

  value &= ~LSM6DS3_ACC_GYRO_FS_XL_MASK;
 800ea44:	7831      	ldrb	r1, [r6, #0]
 800ea46:	330c      	adds	r3, #12
 800ea48:	4399      	bics	r1, r3
  value |= newValue;
 800ea4a:	4329      	orrs	r1, r5
 800ea4c:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ea4e:	3b0b      	subs	r3, #11
 800ea50:	0032      	movs	r2, r6
 800ea52:	2110      	movs	r1, #16
 800ea54:	0020      	movs	r0, r4
 800ea56:	f7ff f949 	bl	800dcec <LSM6DS3_I2C_Write>
 800ea5a:	4243      	negs	r3, r0
 800ea5c:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800ea5e:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800ea60:	0018      	movs	r0, r3
 800ea62:	b002      	add	sp, #8
 800ea64:	bd70      	pop	{r4, r5, r6, pc}
 800ea66:	46c0      	nop			; (mov r8, r8)

0800ea68 <LSM6DS3_ACC_GYRO_GetRawAccData>:
* Input          : pointer to [uint8_t]
* Output         : GetAccData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawAccData(void *handle, uint8_t *buff)
{
 800ea68:	b570      	push	{r4, r5, r6, lr}
 800ea6a:	0006      	movs	r6, r0
 800ea6c:	000c      	movs	r4, r1
 800ea6e:	2528      	movs	r5, #40	; 0x28
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ea70:	2301      	movs	r3, #1
 800ea72:	0022      	movs	r2, r4
 800ea74:	0029      	movs	r1, r5
 800ea76:	0030      	movs	r0, r6
 800ea78:	f7ff f948 	bl	800dd0c <LSM6DS3_I2C_Read>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d108      	bne.n	800ea92 <LSM6DS3_ACC_GYRO_GetRawAccData+0x2a>
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_XL + k, &buff[k], 1))
 800ea80:	1c69      	adds	r1, r5, #1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ea82:	2301      	movs	r3, #1
 800ea84:	0030      	movs	r0, r6
 800ea86:	1c62      	adds	r2, r4, #1
 800ea88:	b2c9      	uxtb	r1, r1
 800ea8a:	f7ff f93f 	bl	800dd0c <LSM6DS3_I2C_Read>
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	d001      	beq.n	800ea96 <LSM6DS3_ACC_GYRO_GetRawAccData+0x2e>
        return MEMS_ERROR;
 800ea92:	2000      	movs	r0, #0
      k++;
    }
  }

  return MEMS_SUCCESS;
}
 800ea94:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < 3; i++ )
 800ea96:	3502      	adds	r5, #2
 800ea98:	b2ed      	uxtb	r5, r5
 800ea9a:	3402      	adds	r4, #2
 800ea9c:	2d2e      	cmp	r5, #46	; 0x2e
 800ea9e:	d1e7      	bne.n	800ea70 <LSM6DS3_ACC_GYRO_GetRawAccData+0x8>
  return MEMS_SUCCESS;
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	e7f7      	b.n	800ea94 <LSM6DS3_ACC_GYRO_GetRawAccData+0x2c>

0800eaa4 <LSM6DS3_ACC_GYRO_W_ODR_XL>:
* Input          : LSM6DS3_ACC_GYRO_ODR_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_XL(void *handle, LSM6DS3_ACC_GYRO_ODR_XL_t newValue)
{
 800eaa4:	b570      	push	{r4, r5, r6, lr}
 800eaa6:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eaa8:	466b      	mov	r3, sp
 800eaaa:	1dde      	adds	r6, r3, #7
{
 800eaac:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eaae:	2301      	movs	r3, #1
 800eab0:	0032      	movs	r2, r6
 800eab2:	2110      	movs	r1, #16
{
 800eab4:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eab6:	f7ff f929 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;
 800eaba:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eabc:	2800      	cmp	r0, #0
 800eabe:	d10d      	bne.n	800eadc <LSM6DS3_ACC_GYRO_W_ODR_XL+0x38>

  value &= ~LSM6DS3_ACC_GYRO_ODR_XL_MASK;
 800eac0:	210f      	movs	r1, #15
 800eac2:	7833      	ldrb	r3, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800eac4:	0032      	movs	r2, r6
  value &= ~LSM6DS3_ACC_GYRO_ODR_XL_MASK;
 800eac6:	4019      	ands	r1, r3
  value |= newValue;
 800eac8:	4329      	orrs	r1, r5
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800eaca:	2301      	movs	r3, #1
  value |= newValue;
 800eacc:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800eace:	0020      	movs	r0, r4
 800ead0:	2110      	movs	r1, #16
 800ead2:	f7ff f90b 	bl	800dcec <LSM6DS3_I2C_Write>
 800ead6:	4243      	negs	r3, r0
 800ead8:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800eada:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800eadc:	0018      	movs	r0, r3
 800eade:	b002      	add	sp, #8
 800eae0:	bd70      	pop	{r4, r5, r6, pc}
 800eae2:	46c0      	nop			; (mov r8, r8)

0800eae4 <LSM6DS3_ACC_GYRO_W_FS_G>:
* Input          : LSM6DS3_ACC_GYRO_FS_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_G(void *handle, LSM6DS3_ACC_GYRO_FS_G_t newValue)
{
 800eae4:	b570      	push	{r4, r5, r6, lr}
 800eae6:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eae8:	466b      	mov	r3, sp
 800eaea:	1dde      	adds	r6, r3, #7
{
 800eaec:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eaee:	2301      	movs	r3, #1
 800eaf0:	0032      	movs	r2, r6
 800eaf2:	2111      	movs	r1, #17
{
 800eaf4:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eaf6:	f7ff f909 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;
 800eafa:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d10d      	bne.n	800eb1c <LSM6DS3_ACC_GYRO_W_FS_G+0x38>

  value &= ~LSM6DS3_ACC_GYRO_FS_G_MASK;
 800eb00:	7831      	ldrb	r1, [r6, #0]
 800eb02:	330c      	adds	r3, #12
 800eb04:	4399      	bics	r1, r3
  value |= newValue;
 800eb06:	4329      	orrs	r1, r5
 800eb08:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800eb0a:	3b0b      	subs	r3, #11
 800eb0c:	0032      	movs	r2, r6
 800eb0e:	2111      	movs	r1, #17
 800eb10:	0020      	movs	r0, r4
 800eb12:	f7ff f8eb 	bl	800dcec <LSM6DS3_I2C_Write>
 800eb16:	4243      	negs	r3, r0
 800eb18:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800eb1a:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800eb1c:	0018      	movs	r0, r3
 800eb1e:	b002      	add	sp, #8
 800eb20:	bd70      	pop	{r4, r5, r6, pc}
 800eb22:	46c0      	nop			; (mov r8, r8)

0800eb24 <LSM6DS3_ACC_GYRO_W_ODR_G>:
* Input          : LSM6DS3_ACC_GYRO_ODR_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_G(void *handle, LSM6DS3_ACC_GYRO_ODR_G_t newValue)
{
 800eb24:	b570      	push	{r4, r5, r6, lr}
 800eb26:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eb28:	466b      	mov	r3, sp
 800eb2a:	1dde      	adds	r6, r3, #7
{
 800eb2c:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eb2e:	2301      	movs	r3, #1
 800eb30:	0032      	movs	r2, r6
 800eb32:	2111      	movs	r1, #17
{
 800eb34:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eb36:	f7ff f8e9 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;
 800eb3a:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d10d      	bne.n	800eb5c <LSM6DS3_ACC_GYRO_W_ODR_G+0x38>

  value &= ~LSM6DS3_ACC_GYRO_ODR_G_MASK;
 800eb40:	210f      	movs	r1, #15
 800eb42:	7833      	ldrb	r3, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800eb44:	0032      	movs	r2, r6
  value &= ~LSM6DS3_ACC_GYRO_ODR_G_MASK;
 800eb46:	4019      	ands	r1, r3
  value |= newValue;
 800eb48:	4329      	orrs	r1, r5
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800eb4a:	2301      	movs	r3, #1
  value |= newValue;
 800eb4c:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800eb4e:	0020      	movs	r0, r4
 800eb50:	2111      	movs	r1, #17
 800eb52:	f7ff f8cb 	bl	800dcec <LSM6DS3_I2C_Write>
 800eb56:	4243      	negs	r3, r0
 800eb58:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800eb5a:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800eb5c:	0018      	movs	r0, r3
 800eb5e:	b002      	add	sp, #8
 800eb60:	bd70      	pop	{r4, r5, r6, pc}
 800eb62:	46c0      	nop			; (mov r8, r8)

0800eb64 <LSM6DS3_ACC_GYRO_GetRawGyroData>:
* Input          : pointer to [uint8_t]
* Output         : GetGyroData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawGyroData(void *handle, uint8_t *buff)
{
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	0006      	movs	r6, r0
 800eb68:	000c      	movs	r4, r1
 800eb6a:	2522      	movs	r5, #34	; 0x22
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	0022      	movs	r2, r4
 800eb70:	0029      	movs	r1, r5
 800eb72:	0030      	movs	r0, r6
 800eb74:	f7ff f8ca 	bl	800dd0c <LSM6DS3_I2C_Read>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d108      	bne.n	800eb8e <LSM6DS3_ACC_GYRO_GetRawGyroData+0x2a>
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_G + k, &buff[k], 1))
 800eb7c:	1c69      	adds	r1, r5, #1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eb7e:	2301      	movs	r3, #1
 800eb80:	0030      	movs	r0, r6
 800eb82:	1c62      	adds	r2, r4, #1
 800eb84:	b2c9      	uxtb	r1, r1
 800eb86:	f7ff f8c1 	bl	800dd0c <LSM6DS3_I2C_Read>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d001      	beq.n	800eb92 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x2e>
        return MEMS_ERROR;
 800eb8e:	2000      	movs	r0, #0
      k++;
    }
  }

  return MEMS_SUCCESS;
}
 800eb90:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < 3; i++ )
 800eb92:	3502      	adds	r5, #2
 800eb94:	b2ed      	uxtb	r5, r5
 800eb96:	3402      	adds	r4, #2
 800eb98:	2d28      	cmp	r5, #40	; 0x28
 800eb9a:	d1e7      	bne.n	800eb6c <LSM6DS3_ACC_GYRO_GetRawGyroData+0x8>
  return MEMS_SUCCESS;
 800eb9c:	3001      	adds	r0, #1
 800eb9e:	e7f7      	b.n	800eb90 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x2c>

0800eba0 <LSM6DS3_ACC_GYRO_W_BW_XL>:
* Input          : LSM6DS3_ACC_GYRO_BW_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_BW_XL(void *handle, LSM6DS3_ACC_GYRO_BW_XL_t newValue)
{
 800eba0:	b570      	push	{r4, r5, r6, lr}
 800eba2:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eba4:	466b      	mov	r3, sp
 800eba6:	1dde      	adds	r6, r3, #7
{
 800eba8:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ebaa:	2301      	movs	r3, #1
 800ebac:	0032      	movs	r2, r6
 800ebae:	2110      	movs	r1, #16
{
 800ebb0:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ebb2:	f7ff f8ab 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;
 800ebb6:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d10d      	bne.n	800ebd8 <LSM6DS3_ACC_GYRO_W_BW_XL+0x38>

  value &= ~LSM6DS3_ACC_GYRO_BW_XL_MASK;
 800ebbc:	7831      	ldrb	r1, [r6, #0]
 800ebbe:	3303      	adds	r3, #3
 800ebc0:	4399      	bics	r1, r3
  value |= newValue;
 800ebc2:	4329      	orrs	r1, r5
 800ebc4:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ebc6:	3b02      	subs	r3, #2
 800ebc8:	0032      	movs	r2, r6
 800ebca:	2110      	movs	r1, #16
 800ebcc:	0020      	movs	r0, r4
 800ebce:	f7ff f88d 	bl	800dcec <LSM6DS3_I2C_Write>
 800ebd2:	4243      	negs	r3, r0
 800ebd4:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800ebd6:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800ebd8:	0018      	movs	r0, r3
 800ebda:	b002      	add	sp, #8
 800ebdc:	bd70      	pop	{r4, r5, r6, pc}
 800ebde:	46c0      	nop			; (mov r8, r8)

0800ebe0 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>:
* Input          : LSM6DS3_ACC_GYRO_FIFO_MODE_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FIFO_MODE(void *handle, LSM6DS3_ACC_GYRO_FIFO_MODE_t newValue)
{
 800ebe0:	b570      	push	{r4, r5, r6, lr}
 800ebe2:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ebe4:	466b      	mov	r3, sp
 800ebe6:	1dde      	adds	r6, r3, #7
{
 800ebe8:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ebea:	2301      	movs	r3, #1
 800ebec:	0032      	movs	r2, r6
 800ebee:	210a      	movs	r1, #10
{
 800ebf0:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ebf2:	f7ff f88b 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
    return MEMS_ERROR;
 800ebf6:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	d10d      	bne.n	800ec18 <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x38>

  value &= ~LSM6DS3_ACC_GYRO_FIFO_MODE_MASK;
 800ebfc:	7831      	ldrb	r1, [r6, #0]
 800ebfe:	3307      	adds	r3, #7
 800ec00:	4399      	bics	r1, r3
  value |= newValue;
 800ec02:	4329      	orrs	r1, r5
 800ec04:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ec06:	3b06      	subs	r3, #6
 800ec08:	0032      	movs	r2, r6
 800ec0a:	210a      	movs	r1, #10
 800ec0c:	0020      	movs	r0, r4
 800ec0e:	f7ff f86d 	bl	800dcec <LSM6DS3_I2C_Write>
 800ec12:	4243      	negs	r3, r0
 800ec14:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800ec16:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800ec18:	0018      	movs	r0, r3
 800ec1a:	b002      	add	sp, #8
 800ec1c:	bd70      	pop	{r4, r5, r6, pc}
 800ec1e:	46c0      	nop			; (mov r8, r8)

0800ec20 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>:
* Input          : LSM6DS3_ACC_GYRO_IF_INC_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(void *handle, LSM6DS3_ACC_GYRO_IF_INC_t newValue)
{
 800ec20:	b570      	push	{r4, r5, r6, lr}
 800ec22:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ec24:	466b      	mov	r3, sp
 800ec26:	1dde      	adds	r6, r3, #7
{
 800ec28:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	0032      	movs	r2, r6
 800ec2e:	2112      	movs	r1, #18
{
 800ec30:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ec32:	f7ff f86b 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
    return MEMS_ERROR;
 800ec36:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	d10d      	bne.n	800ec58 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x38>

  value &= ~LSM6DS3_ACC_GYRO_IF_INC_MASK;
 800ec3c:	7831      	ldrb	r1, [r6, #0]
 800ec3e:	3304      	adds	r3, #4
 800ec40:	4399      	bics	r1, r3
  value |= newValue;
 800ec42:	4329      	orrs	r1, r5
 800ec44:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ec46:	3b03      	subs	r3, #3
 800ec48:	0032      	movs	r2, r6
 800ec4a:	2112      	movs	r1, #18
 800ec4c:	0020      	movs	r0, r4
 800ec4e:	f7ff f84d 	bl	800dcec <LSM6DS3_I2C_Write>
 800ec52:	4243      	negs	r3, r0
 800ec54:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800ec56:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800ec58:	0018      	movs	r0, r3
 800ec5a:	b002      	add	sp, #8
 800ec5c:	bd70      	pop	{r4, r5, r6, pc}
 800ec5e:	46c0      	nop			; (mov r8, r8)

0800ec60 <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR>:
* Input          : LSM6DS3_ACC_GYRO_BW_SCAL_ODR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR(void *handle, LSM6DS3_ACC_GYRO_BW_SCAL_ODR_t newValue)
{
 800ec60:	b570      	push	{r4, r5, r6, lr}
 800ec62:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ec64:	466b      	mov	r3, sp
 800ec66:	1dde      	adds	r6, r3, #7
{
 800ec68:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	0032      	movs	r2, r6
 800ec6e:	2113      	movs	r1, #19
{
 800ec70:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ec72:	f7ff f84b 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
    return MEMS_ERROR;
 800ec76:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	d10d      	bne.n	800ec98 <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR+0x38>

  value &= ~LSM6DS3_ACC_GYRO_BW_SCAL_ODR_MASK;
 800ec7c:	217f      	movs	r1, #127	; 0x7f
 800ec7e:	7833      	ldrb	r3, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ec80:	0032      	movs	r2, r6
  value &= ~LSM6DS3_ACC_GYRO_BW_SCAL_ODR_MASK;
 800ec82:	4019      	ands	r1, r3
  value |= newValue;
 800ec84:	4329      	orrs	r1, r5
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ec86:	2301      	movs	r3, #1
  value |= newValue;
 800ec88:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ec8a:	0020      	movs	r0, r4
 800ec8c:	2113      	movs	r1, #19
 800ec8e:	f7ff f82d 	bl	800dcec <LSM6DS3_I2C_Write>
 800ec92:	4243      	negs	r3, r0
 800ec94:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800ec96:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800ec98:	0018      	movs	r0, r3
 800ec9a:	b002      	add	sp, #8
 800ec9c:	bd70      	pop	{r4, r5, r6, pc}
 800ec9e:	46c0      	nop			; (mov r8, r8)

0800eca0 <LSM6DS3_ACC_GYRO_W_XEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_XEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_XL(void *handle, LSM6DS3_ACC_GYRO_XEN_XL_t newValue)
{
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eca4:	466b      	mov	r3, sp
 800eca6:	1dde      	adds	r6, r3, #7
{
 800eca8:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ecaa:	2301      	movs	r3, #1
 800ecac:	0032      	movs	r2, r6
 800ecae:	2118      	movs	r1, #24
{
 800ecb0:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ecb2:	f7ff f82b 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;
 800ecb6:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d10d      	bne.n	800ecd8 <LSM6DS3_ACC_GYRO_W_XEN_XL+0x38>

  value &= ~LSM6DS3_ACC_GYRO_XEN_XL_MASK;
 800ecbc:	7831      	ldrb	r1, [r6, #0]
 800ecbe:	3308      	adds	r3, #8
 800ecc0:	4399      	bics	r1, r3
  value |= newValue;
 800ecc2:	4329      	orrs	r1, r5
 800ecc4:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ecc6:	3b07      	subs	r3, #7
 800ecc8:	0032      	movs	r2, r6
 800ecca:	2118      	movs	r1, #24
 800eccc:	0020      	movs	r0, r4
 800ecce:	f7ff f80d 	bl	800dcec <LSM6DS3_I2C_Write>
 800ecd2:	4243      	negs	r3, r0
 800ecd4:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800ecd6:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800ecd8:	0018      	movs	r0, r3
 800ecda:	b002      	add	sp, #8
 800ecdc:	bd70      	pop	{r4, r5, r6, pc}
 800ecde:	46c0      	nop			; (mov r8, r8)

0800ece0 <LSM6DS3_ACC_GYRO_W_YEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_YEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_XL(void *handle, LSM6DS3_ACC_GYRO_YEN_XL_t newValue)
{
 800ece0:	b570      	push	{r4, r5, r6, lr}
 800ece2:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ece4:	466b      	mov	r3, sp
 800ece6:	1dde      	adds	r6, r3, #7
{
 800ece8:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ecea:	2301      	movs	r3, #1
 800ecec:	0032      	movs	r2, r6
 800ecee:	2118      	movs	r1, #24
{
 800ecf0:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ecf2:	f7ff f80b 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;
 800ecf6:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	d10d      	bne.n	800ed18 <LSM6DS3_ACC_GYRO_W_YEN_XL+0x38>

  value &= ~LSM6DS3_ACC_GYRO_YEN_XL_MASK;
 800ecfc:	7831      	ldrb	r1, [r6, #0]
 800ecfe:	3310      	adds	r3, #16
 800ed00:	4399      	bics	r1, r3
  value |= newValue;
 800ed02:	4329      	orrs	r1, r5
 800ed04:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ed06:	3b0f      	subs	r3, #15
 800ed08:	0032      	movs	r2, r6
 800ed0a:	2118      	movs	r1, #24
 800ed0c:	0020      	movs	r0, r4
 800ed0e:	f7fe ffed 	bl	800dcec <LSM6DS3_I2C_Write>
 800ed12:	4243      	negs	r3, r0
 800ed14:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800ed16:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800ed18:	0018      	movs	r0, r3
 800ed1a:	b002      	add	sp, #8
 800ed1c:	bd70      	pop	{r4, r5, r6, pc}
 800ed1e:	46c0      	nop			; (mov r8, r8)

0800ed20 <LSM6DS3_ACC_GYRO_W_ZEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_XL(void *handle, LSM6DS3_ACC_GYRO_ZEN_XL_t newValue)
{
 800ed20:	b570      	push	{r4, r5, r6, lr}
 800ed22:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ed24:	466b      	mov	r3, sp
 800ed26:	1dde      	adds	r6, r3, #7
{
 800ed28:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	0032      	movs	r2, r6
 800ed2e:	2118      	movs	r1, #24
{
 800ed30:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ed32:	f7fe ffeb 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;
 800ed36:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d10d      	bne.n	800ed58 <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x38>

  value &= ~LSM6DS3_ACC_GYRO_ZEN_XL_MASK;
 800ed3c:	7831      	ldrb	r1, [r6, #0]
 800ed3e:	3320      	adds	r3, #32
 800ed40:	4399      	bics	r1, r3
  value |= newValue;
 800ed42:	4329      	orrs	r1, r5
 800ed44:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ed46:	3b1f      	subs	r3, #31
 800ed48:	0032      	movs	r2, r6
 800ed4a:	2118      	movs	r1, #24
 800ed4c:	0020      	movs	r0, r4
 800ed4e:	f7fe ffcd 	bl	800dcec <LSM6DS3_I2C_Write>
 800ed52:	4243      	negs	r3, r0
 800ed54:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800ed56:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800ed58:	0018      	movs	r0, r3
 800ed5a:	b002      	add	sp, #8
 800ed5c:	bd70      	pop	{r4, r5, r6, pc}
 800ed5e:	46c0      	nop			; (mov r8, r8)

0800ed60 <LSM6DS3_ACC_GYRO_W_XEN_G>:
* Input          : LSM6DS3_ACC_GYRO_XEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_G(void *handle, LSM6DS3_ACC_GYRO_XEN_G_t newValue)
{
 800ed60:	b570      	push	{r4, r5, r6, lr}
 800ed62:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ed64:	466b      	mov	r3, sp
 800ed66:	1dde      	adds	r6, r3, #7
{
 800ed68:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	0032      	movs	r2, r6
 800ed6e:	2119      	movs	r1, #25
{
 800ed70:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ed72:	f7fe ffcb 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;
 800ed76:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d10d      	bne.n	800ed98 <LSM6DS3_ACC_GYRO_W_XEN_G+0x38>

  value &= ~LSM6DS3_ACC_GYRO_XEN_G_MASK;
 800ed7c:	7831      	ldrb	r1, [r6, #0]
 800ed7e:	3308      	adds	r3, #8
 800ed80:	4399      	bics	r1, r3
  value |= newValue;
 800ed82:	4329      	orrs	r1, r5
 800ed84:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ed86:	3b07      	subs	r3, #7
 800ed88:	0032      	movs	r2, r6
 800ed8a:	2119      	movs	r1, #25
 800ed8c:	0020      	movs	r0, r4
 800ed8e:	f7fe ffad 	bl	800dcec <LSM6DS3_I2C_Write>
 800ed92:	4243      	negs	r3, r0
 800ed94:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800ed96:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800ed98:	0018      	movs	r0, r3
 800ed9a:	b002      	add	sp, #8
 800ed9c:	bd70      	pop	{r4, r5, r6, pc}
 800ed9e:	46c0      	nop			; (mov r8, r8)

0800eda0 <LSM6DS3_ACC_GYRO_W_YEN_G>:
* Input          : LSM6DS3_ACC_GYRO_YEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_G(void *handle, LSM6DS3_ACC_GYRO_YEN_G_t newValue)
{
 800eda0:	b570      	push	{r4, r5, r6, lr}
 800eda2:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800eda4:	466b      	mov	r3, sp
 800eda6:	1dde      	adds	r6, r3, #7
{
 800eda8:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800edaa:	2301      	movs	r3, #1
 800edac:	0032      	movs	r2, r6
 800edae:	2119      	movs	r1, #25
{
 800edb0:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800edb2:	f7fe ffab 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;
 800edb6:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800edb8:	2800      	cmp	r0, #0
 800edba:	d10d      	bne.n	800edd8 <LSM6DS3_ACC_GYRO_W_YEN_G+0x38>

  value &= ~LSM6DS3_ACC_GYRO_YEN_G_MASK;
 800edbc:	7831      	ldrb	r1, [r6, #0]
 800edbe:	3310      	adds	r3, #16
 800edc0:	4399      	bics	r1, r3
  value |= newValue;
 800edc2:	4329      	orrs	r1, r5
 800edc4:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800edc6:	3b0f      	subs	r3, #15
 800edc8:	0032      	movs	r2, r6
 800edca:	2119      	movs	r1, #25
 800edcc:	0020      	movs	r0, r4
 800edce:	f7fe ff8d 	bl	800dcec <LSM6DS3_I2C_Write>
 800edd2:	4243      	negs	r3, r0
 800edd4:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800edd6:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800edd8:	0018      	movs	r0, r3
 800edda:	b002      	add	sp, #8
 800eddc:	bd70      	pop	{r4, r5, r6, pc}
 800edde:	46c0      	nop			; (mov r8, r8)

0800ede0 <LSM6DS3_ACC_GYRO_W_ZEN_G>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_G(void *handle, LSM6DS3_ACC_GYRO_ZEN_G_t newValue)
{
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	b082      	sub	sp, #8
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ede4:	466b      	mov	r3, sp
 800ede6:	1dde      	adds	r6, r3, #7
{
 800ede8:	000d      	movs	r5, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800edea:	2301      	movs	r3, #1
 800edec:	0032      	movs	r2, r6
 800edee:	2119      	movs	r1, #25
{
 800edf0:	0004      	movs	r4, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800edf2:	f7fe ff8b 	bl	800dd0c <LSM6DS3_I2C_Read>
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;
 800edf6:	2300      	movs	r3, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800edf8:	2800      	cmp	r0, #0
 800edfa:	d10d      	bne.n	800ee18 <LSM6DS3_ACC_GYRO_W_ZEN_G+0x38>

  value &= ~LSM6DS3_ACC_GYRO_ZEN_G_MASK;
 800edfc:	7831      	ldrb	r1, [r6, #0]
 800edfe:	3320      	adds	r3, #32
 800ee00:	4399      	bics	r1, r3
  value |= newValue;
 800ee02:	4329      	orrs	r1, r5
 800ee04:	7031      	strb	r1, [r6, #0]
  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800ee06:	3b1f      	subs	r3, #31
 800ee08:	0032      	movs	r2, r6
 800ee0a:	2119      	movs	r1, #25
 800ee0c:	0020      	movs	r0, r4
 800ee0e:	f7fe ff6d 	bl	800dcec <LSM6DS3_I2C_Write>
 800ee12:	4243      	negs	r3, r0
 800ee14:	4143      	adcs	r3, r0
    return MEMS_ERROR;
 800ee16:	b2db      	uxtb	r3, r3

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800ee18:	0018      	movs	r0, r3
 800ee1a:	b002      	add	sp, #8
 800ee1c:	bd70      	pop	{r4, r5, r6, pc}
 800ee1e:	46c0      	nop			; (mov r8, r8)

0800ee20 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>:
* Input          : pointer to [uint8_t]
* Output         : GetFIFOData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_Get_GetFIFOData(void *handle, uint8_t *buff)
{
 800ee20:	b570      	push	{r4, r5, r6, lr}
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ee22:	2301      	movs	r3, #1
 800ee24:	000a      	movs	r2, r1
{
 800ee26:	000c      	movs	r4, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ee28:	213e      	movs	r1, #62	; 0x3e
{
 800ee2a:	0005      	movs	r5, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ee2c:	f7fe ff6e 	bl	800dd0c <LSM6DS3_I2C_Read>
 800ee30:	0003      	movs	r3, r0
  for (i = 0; i < 1; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_DATA_OUT_L + k, &buff[k], 1))
        return MEMS_ERROR;
 800ee32:	2000      	movs	r0, #0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d108      	bne.n	800ee4a <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x2a>
 800ee38:	3301      	adds	r3, #1
 800ee3a:	213f      	movs	r1, #63	; 0x3f
 800ee3c:	0028      	movs	r0, r5
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_DATA_OUT_L + k, &buff[k], 1))
 800ee3e:	1c62      	adds	r2, r4, #1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ee40:	f7fe ff64 	bl	800dd0c <LSM6DS3_I2C_Read>
 800ee44:	4243      	negs	r3, r0
 800ee46:	4158      	adcs	r0, r3
        return MEMS_ERROR;
 800ee48:	b2c0      	uxtb	r0, r0
      k++;
    }
  }

  return MEMS_SUCCESS;
}
 800ee4a:	bd70      	pop	{r4, r5, r6, pc}

0800ee4c <LSM6DS3_ACC_Get_Acceleration>:
{
 800ee4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee4e:	4647      	mov	r7, r8
 800ee50:	46ce      	mov	lr, r9
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b085      	sub	sp, #20
 800ee56:	0017      	movs	r7, r2
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ee58:	466a      	mov	r2, sp
 800ee5a:	2301      	movs	r3, #1
{
 800ee5c:	4688      	mov	r8, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ee5e:	3207      	adds	r2, #7
 800ee60:	2110      	movs	r1, #16
{
 800ee62:	0006      	movs	r6, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ee64:	f7fe ff52 	bl	800dd0c <LSM6DS3_I2C_Read>
  switch(fs)
 800ee68:	466b      	mov	r3, sp
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d156      	bne.n	800ef1c <LSM6DS3_ACC_Get_Acceleration+0xd0>
  *value &= LSM6DS3_ACC_GYRO_FS_XL_MASK; //mask
 800ee6e:	79da      	ldrb	r2, [r3, #7]
 800ee70:	230c      	movs	r3, #12
 800ee72:	4013      	ands	r3, r2
 800ee74:	466a      	mov	r2, sp
 800ee76:	71d3      	strb	r3, [r2, #7]
  switch(fs)
 800ee78:	4a2f      	ldr	r2, [pc, #188]	; (800ef38 <LSM6DS3_ACC_Get_Acceleration+0xec>)
 800ee7a:	00db      	lsls	r3, r3, #3
 800ee7c:	18d3      	adds	r3, r2, r3
 800ee7e:	681c      	ldr	r4, [r3, #0]
 800ee80:	685d      	ldr	r5, [r3, #4]
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800ee82:	ab02      	add	r3, sp, #8
 800ee84:	4699      	mov	r9, r3
 800ee86:	0019      	movs	r1, r3
 800ee88:	0030      	movs	r0, r6
  if (from_fifo)
 800ee8a:	2f00      	cmp	r7, #0
 800ee8c:	d051      	beq.n	800ef32 <LSM6DS3_ACC_Get_Acceleration+0xe6>
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800ee8e:	f7ff ffc7 	bl	800ee20 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800ee92:	210a      	movs	r1, #10
 800ee94:	0030      	movs	r0, r6
 800ee96:	4469      	add	r1, sp
 800ee98:	f7ff ffc2 	bl	800ee20 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800ee9c:	0030      	movs	r0, r6
 800ee9e:	a903      	add	r1, sp, #12
 800eea0:	f7ff ffbe 	bl	800ee20 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
  buff[0] = (raw_data_tmp.i16bit[0] * sensitivity + 500) / 1000;
 800eea4:	464b      	mov	r3, r9
 800eea6:	2000      	movs	r0, #0
 800eea8:	5e18      	ldrsh	r0, [r3, r0]
 800eeaa:	0022      	movs	r2, r4
 800eeac:	002b      	movs	r3, r5
 800eeae:	26fa      	movs	r6, #250	; 0xfa
 800eeb0:	17c1      	asrs	r1, r0, #31
 800eeb2:	f7f1 fb7f 	bl	80005b4 <__aeabi_lmul>
 800eeb6:	2700      	movs	r7, #0
 800eeb8:	22fa      	movs	r2, #250	; 0xfa
 800eeba:	0076      	lsls	r6, r6, #1
 800eebc:	1980      	adds	r0, r0, r6
 800eebe:	4179      	adcs	r1, r7
 800eec0:	2300      	movs	r3, #0
 800eec2:	0092      	lsls	r2, r2, #2
 800eec4:	f7f1 fb32 	bl	800052c <__aeabi_ldivmod>
 800eec8:	4643      	mov	r3, r8
 800eeca:	6018      	str	r0, [r3, #0]
  buff[1] = (raw_data_tmp.i16bit[1] * sensitivity + 500) / 1000;
 800eecc:	464b      	mov	r3, r9
 800eece:	2002      	movs	r0, #2
 800eed0:	5e18      	ldrsh	r0, [r3, r0]
 800eed2:	0022      	movs	r2, r4
 800eed4:	002b      	movs	r3, r5
 800eed6:	17c1      	asrs	r1, r0, #31
 800eed8:	f7f1 fb6c 	bl	80005b4 <__aeabi_lmul>
 800eedc:	22fa      	movs	r2, #250	; 0xfa
 800eede:	1980      	adds	r0, r0, r6
 800eee0:	4179      	adcs	r1, r7
 800eee2:	2300      	movs	r3, #0
 800eee4:	0092      	lsls	r2, r2, #2
 800eee6:	f7f1 fb21 	bl	800052c <__aeabi_ldivmod>
 800eeea:	4643      	mov	r3, r8
 800eeec:	6058      	str	r0, [r3, #4]
  buff[2] = (raw_data_tmp.i16bit[2] * sensitivity + 500) / 1000;
 800eeee:	464b      	mov	r3, r9
 800eef0:	2004      	movs	r0, #4
 800eef2:	5e18      	ldrsh	r0, [r3, r0]
 800eef4:	0022      	movs	r2, r4
 800eef6:	002b      	movs	r3, r5
 800eef8:	17c1      	asrs	r1, r0, #31
 800eefa:	f7f1 fb5b 	bl	80005b4 <__aeabi_lmul>
 800eefe:	22fa      	movs	r2, #250	; 0xfa
 800ef00:	1980      	adds	r0, r0, r6
 800ef02:	4179      	adcs	r1, r7
 800ef04:	2300      	movs	r3, #0
 800ef06:	0092      	lsls	r2, r2, #2
 800ef08:	f7f1 fb10 	bl	800052c <__aeabi_ldivmod>
 800ef0c:	4643      	mov	r3, r8
 800ef0e:	6098      	str	r0, [r3, #8]
}
 800ef10:	2001      	movs	r0, #1
 800ef12:	b005      	add	sp, #20
 800ef14:	bcc0      	pop	{r6, r7}
 800ef16:	46b9      	mov	r9, r7
 800ef18:	46b0      	mov	r8, r6
 800ef1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch(fs)
 800ef1c:	79db      	ldrb	r3, [r3, #7]
 800ef1e:	2400      	movs	r4, #0
 800ef20:	2500      	movs	r5, #0
 800ef22:	2b0c      	cmp	r3, #12
 800ef24:	d9a8      	bls.n	800ee78 <LSM6DS3_ACC_Get_Acceleration+0x2c>
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800ef26:	ab02      	add	r3, sp, #8
 800ef28:	4699      	mov	r9, r3
 800ef2a:	0019      	movs	r1, r3
 800ef2c:	0030      	movs	r0, r6
  if (from_fifo)
 800ef2e:	2f00      	cmp	r7, #0
 800ef30:	d1ad      	bne.n	800ee8e <LSM6DS3_ACC_Get_Acceleration+0x42>
    LSM6DS3_ACC_GYRO_GetRawAccData(handle, raw_data_tmp.u8bit);
 800ef32:	f7ff fd99 	bl	800ea68 <LSM6DS3_ACC_GYRO_GetRawAccData>
 800ef36:	e7b5      	b.n	800eea4 <LSM6DS3_ACC_Get_Acceleration+0x58>
 800ef38:	0801e288 	.word	0x0801e288

0800ef3c <LSM6DS3_ACC_Get_AngularRate>:
{
 800ef3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef3e:	4647      	mov	r7, r8
 800ef40:	46ce      	mov	lr, r9
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b085      	sub	sp, #20
 800ef46:	0017      	movs	r7, r2
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ef48:	466a      	mov	r2, sp
 800ef4a:	2301      	movs	r3, #1
{
 800ef4c:	4688      	mov	r8, r1
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ef4e:	3206      	adds	r2, #6
 800ef50:	2111      	movs	r1, #17
{
 800ef52:	0006      	movs	r6, r0
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800ef54:	f7fe feda 	bl	800dd0c <LSM6DS3_I2C_Read>
 800ef58:	466b      	mov	r3, sp
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	d051      	beq.n	800f002 <LSM6DS3_ACC_Get_AngularRate+0xc6>
 800ef5e:	799b      	ldrb	r3, [r3, #6]
  if (fs_125 == LSM6DS3_ACC_GYRO_FS_125_ENABLED)
 800ef60:	2b02      	cmp	r3, #2
 800ef62:	d155      	bne.n	800f010 <LSM6DS3_ACC_Get_AngularRate+0xd4>
    sensitivity = LSM6DS3_GYRO_Sensitivity_List[0];
 800ef64:	2500      	movs	r5, #0
 800ef66:	4c3c      	ldr	r4, [pc, #240]	; (800f058 <LSM6DS3_ACC_Get_AngularRate+0x11c>)
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800ef68:	ab02      	add	r3, sp, #8
 800ef6a:	4699      	mov	r9, r3
 800ef6c:	0019      	movs	r1, r3
 800ef6e:	0030      	movs	r0, r6
  if (from_fifo)
 800ef70:	2f00      	cmp	r7, #0
 800ef72:	d067      	beq.n	800f044 <LSM6DS3_ACC_Get_AngularRate+0x108>
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800ef74:	f7ff ff54 	bl	800ee20 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800ef78:	210a      	movs	r1, #10
 800ef7a:	0030      	movs	r0, r6
 800ef7c:	4469      	add	r1, sp
 800ef7e:	f7ff ff4f 	bl	800ee20 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800ef82:	0030      	movs	r0, r6
 800ef84:	a903      	add	r1, sp, #12
 800ef86:	f7ff ff4b 	bl	800ee20 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
  buff[0] = (raw_data_tmp.i16bit[0] * sensitivity + 500) / 1000;
 800ef8a:	464b      	mov	r3, r9
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	5e18      	ldrsh	r0, [r3, r0]
 800ef90:	0022      	movs	r2, r4
 800ef92:	002b      	movs	r3, r5
 800ef94:	26fa      	movs	r6, #250	; 0xfa
 800ef96:	17c1      	asrs	r1, r0, #31
 800ef98:	f7f1 fb0c 	bl	80005b4 <__aeabi_lmul>
 800ef9c:	2700      	movs	r7, #0
 800ef9e:	22fa      	movs	r2, #250	; 0xfa
 800efa0:	0076      	lsls	r6, r6, #1
 800efa2:	1980      	adds	r0, r0, r6
 800efa4:	4179      	adcs	r1, r7
 800efa6:	2300      	movs	r3, #0
 800efa8:	0092      	lsls	r2, r2, #2
 800efaa:	f7f1 fabf 	bl	800052c <__aeabi_ldivmod>
 800efae:	4643      	mov	r3, r8
 800efb0:	6018      	str	r0, [r3, #0]
  buff[1] = (raw_data_tmp.i16bit[1] * sensitivity + 500) / 1000;
 800efb2:	464b      	mov	r3, r9
 800efb4:	2002      	movs	r0, #2
 800efb6:	5e18      	ldrsh	r0, [r3, r0]
 800efb8:	0022      	movs	r2, r4
 800efba:	002b      	movs	r3, r5
 800efbc:	17c1      	asrs	r1, r0, #31
 800efbe:	f7f1 faf9 	bl	80005b4 <__aeabi_lmul>
 800efc2:	22fa      	movs	r2, #250	; 0xfa
 800efc4:	1980      	adds	r0, r0, r6
 800efc6:	4179      	adcs	r1, r7
 800efc8:	2300      	movs	r3, #0
 800efca:	0092      	lsls	r2, r2, #2
 800efcc:	f7f1 faae 	bl	800052c <__aeabi_ldivmod>
 800efd0:	4643      	mov	r3, r8
 800efd2:	6058      	str	r0, [r3, #4]
  buff[2] = (raw_data_tmp.i16bit[2] * sensitivity + 500) / 1000;
 800efd4:	464b      	mov	r3, r9
 800efd6:	2004      	movs	r0, #4
 800efd8:	5e18      	ldrsh	r0, [r3, r0]
 800efda:	0022      	movs	r2, r4
 800efdc:	002b      	movs	r3, r5
 800efde:	17c1      	asrs	r1, r0, #31
 800efe0:	f7f1 fae8 	bl	80005b4 <__aeabi_lmul>
 800efe4:	22fa      	movs	r2, #250	; 0xfa
 800efe6:	1980      	adds	r0, r0, r6
 800efe8:	4179      	adcs	r1, r7
 800efea:	2300      	movs	r3, #0
 800efec:	0092      	lsls	r2, r2, #2
 800efee:	f7f1 fa9d 	bl	800052c <__aeabi_ldivmod>
 800eff2:	4643      	mov	r3, r8
 800eff4:	6098      	str	r0, [r3, #8]
}
 800eff6:	2001      	movs	r0, #1
 800eff8:	b005      	add	sp, #20
 800effa:	bcc0      	pop	{r6, r7}
 800effc:	46b9      	mov	r9, r7
 800effe:	46b0      	mov	r8, r6
 800f000:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *value &= LSM6DS3_ACC_GYRO_FS_125_MASK; //mask
 800f002:	799a      	ldrb	r2, [r3, #6]
 800f004:	2302      	movs	r3, #2
 800f006:	4013      	ands	r3, r2
 800f008:	466a      	mov	r2, sp
 800f00a:	7193      	strb	r3, [r2, #6]
  if (fs_125 == LSM6DS3_ACC_GYRO_FS_125_ENABLED)
 800f00c:	2b02      	cmp	r3, #2
 800f00e:	d0a9      	beq.n	800ef64 <LSM6DS3_ACC_Get_AngularRate+0x28>
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800f010:	466a      	mov	r2, sp
 800f012:	2301      	movs	r3, #1
 800f014:	2111      	movs	r1, #17
 800f016:	0030      	movs	r0, r6
 800f018:	3207      	adds	r2, #7
 800f01a:	f7fe fe77 	bl	800dd0c <LSM6DS3_I2C_Read>
    switch(fs)
 800f01e:	466b      	mov	r3, sp
  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800f020:	2800      	cmp	r0, #0
 800f022:	d112      	bne.n	800f04a <LSM6DS3_ACC_Get_AngularRate+0x10e>
  *value &= LSM6DS3_ACC_GYRO_FS_G_MASK; //mask
 800f024:	79da      	ldrb	r2, [r3, #7]
 800f026:	230c      	movs	r3, #12
 800f028:	4013      	ands	r3, r2
 800f02a:	466a      	mov	r2, sp
 800f02c:	71d3      	strb	r3, [r2, #7]
    switch(fs)
 800f02e:	4a0b      	ldr	r2, [pc, #44]	; (800f05c <LSM6DS3_ACC_Get_AngularRate+0x120>)
 800f030:	00db      	lsls	r3, r3, #3
 800f032:	18d3      	adds	r3, r2, r3
 800f034:	681c      	ldr	r4, [r3, #0]
 800f036:	685d      	ldr	r5, [r3, #4]
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800f038:	ab02      	add	r3, sp, #8
 800f03a:	4699      	mov	r9, r3
 800f03c:	0019      	movs	r1, r3
 800f03e:	0030      	movs	r0, r6
  if (from_fifo)
 800f040:	2f00      	cmp	r7, #0
 800f042:	d197      	bne.n	800ef74 <LSM6DS3_ACC_Get_AngularRate+0x38>
    LSM6DS3_ACC_GYRO_GetRawGyroData(handle, raw_data_tmp.u8bit);
 800f044:	f7ff fd8e 	bl	800eb64 <LSM6DS3_ACC_GYRO_GetRawGyroData>
 800f048:	e79f      	b.n	800ef8a <LSM6DS3_ACC_Get_AngularRate+0x4e>
    switch(fs)
 800f04a:	79db      	ldrb	r3, [r3, #7]
 800f04c:	2400      	movs	r4, #0
 800f04e:	2500      	movs	r5, #0
 800f050:	2b0c      	cmp	r3, #12
 800f052:	d900      	bls.n	800f056 <LSM6DS3_ACC_Get_AngularRate+0x11a>
 800f054:	e788      	b.n	800ef68 <LSM6DS3_ACC_Get_AngularRate+0x2c>
 800f056:	e7ea      	b.n	800f02e <LSM6DS3_ACC_Get_AngularRate+0xf2>
 800f058:	00001117 	.word	0x00001117
 800f05c:	0801e2f0 	.word	0x0801e2f0

0800f060 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f060:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800f062:	f000 ffc7 	bl	800fff4 <vTaskStartScheduler>
  
  return osOK;
}
 800f066:	2000      	movs	r0, #0
 800f068:	bd10      	pop	{r4, pc}
 800f06a:	46c0      	nop			; (mov r8, r8)

0800f06c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f06c:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f06e:	2800      	cmp	r0, #0
 800f070:	d100      	bne.n	800f074 <osDelay+0x8>
 800f072:	3001      	adds	r0, #1
 800f074:	f001 f928 	bl	80102c8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f078:	2000      	movs	r0, #0
 800f07a:	bd10      	pop	{r4, pc}

0800f07c <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800f07c:	2300      	movs	r3, #0
{
 800f07e:	b500      	push	{lr}
 800f080:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800f082:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f084:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00a      	beq.n	800f0a2 <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f08c:	a901      	add	r1, sp, #4
 800f08e:	f000 fbe1 	bl	800f854 <xQueueGiveFromISR>
 800f092:	2801      	cmp	r0, #1
 800f094:	d10c      	bne.n	800f0b0 <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f096:	9b01      	ldr	r3, [sp, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d10b      	bne.n	800f0b4 <osMutexRelease+0x38>
  osStatus result = osOK;
 800f09c:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800f09e:	b003      	add	sp, #12
 800f0a0:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	f000 fafa 	bl	800f6a0 <xQueueGenericSend>
 800f0ac:	2801      	cmp	r0, #1
 800f0ae:	d0f5      	beq.n	800f09c <osMutexRelease+0x20>
    result = osErrorOS;
 800f0b0:	20ff      	movs	r0, #255	; 0xff
 800f0b2:	e7f4      	b.n	800f09e <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800f0b4:	2280      	movs	r2, #128	; 0x80
 800f0b6:	4b02      	ldr	r3, [pc, #8]	; (800f0c0 <osMutexRelease+0x44>)
 800f0b8:	0552      	lsls	r2, r2, #21
 800f0ba:	601a      	str	r2, [r3, #0]
 800f0bc:	e7ee      	b.n	800f09c <osMutexRelease+0x20>
 800f0be:	46c0      	nop			; (mov r8, r8)
 800f0c0:	e000ed04 	.word	0xe000ed04

0800f0c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800f0c4:	0008      	movs	r0, r1
 800f0c6:	b510      	push	{r4, lr}
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800f0c8:	2901      	cmp	r1, #1
 800f0ca:	d005      	beq.n	800f0d8 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	f000 fad3 	bl	800f678 <xQueueCreateCountingSemaphore>
 800f0d2:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800f0d4:	0020      	movs	r0, r4
 800f0d6:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800f0d8:	2203      	movs	r2, #3
 800f0da:	2100      	movs	r1, #0
 800f0dc:	f000 fac4 	bl	800f668 <xQueueGenericCreate>
 800f0e0:	1e04      	subs	r4, r0, #0
 800f0e2:	d0f7      	beq.n	800f0d4 <osSemaphoreCreate+0x10>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	f000 fad9 	bl	800f6a0 <xQueueGenericSend>
 800f0ee:	e7f1      	b.n	800f0d4 <osSemaphoreCreate+0x10>

0800f0f0 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f0f0:	2300      	movs	r3, #0
{
 800f0f2:	b500      	push	{lr}
 800f0f4:	b083      	sub	sp, #12
 800f0f6:	000a      	movs	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 800f0f8:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d01c      	beq.n	800f138 <osSemaphoreWait+0x48>
 800f0fe:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00b      	beq.n	800f11e <osSemaphoreWait+0x2e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f106:	2100      	movs	r1, #0
 800f108:	aa01      	add	r2, sp, #4
 800f10a:	f000 fc8f 	bl	800fa2c <xQueueReceiveFromISR>
 800f10e:	2801      	cmp	r0, #1
 800f110:	d10b      	bne.n	800f12a <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f112:	9b01      	ldr	r3, [sp, #4]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d10a      	bne.n	800f12e <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800f118:	2000      	movs	r0, #0
}
 800f11a:	b003      	add	sp, #12
 800f11c:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f11e:	2300      	movs	r3, #0
 800f120:	2100      	movs	r1, #0
 800f122:	f000 fbd1 	bl	800f8c8 <xQueueGenericReceive>
 800f126:	2801      	cmp	r0, #1
 800f128:	d0f6      	beq.n	800f118 <osSemaphoreWait+0x28>
    return osErrorOS;
 800f12a:	20ff      	movs	r0, #255	; 0xff
 800f12c:	e7f5      	b.n	800f11a <osSemaphoreWait+0x2a>
	portEND_SWITCHING_ISR(taskWoken);
 800f12e:	2280      	movs	r2, #128	; 0x80
 800f130:	4b02      	ldr	r3, [pc, #8]	; (800f13c <osSemaphoreWait+0x4c>)
 800f132:	0552      	lsls	r2, r2, #21
 800f134:	601a      	str	r2, [r3, #0]
 800f136:	e7ef      	b.n	800f118 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800f138:	2080      	movs	r0, #128	; 0x80
 800f13a:	e7ee      	b.n	800f11a <osSemaphoreWait+0x2a>
 800f13c:	e000ed04 	.word	0xe000ed04

0800f140 <osSemaphoreRelease>:
 800f140:	b510      	push	{r4, lr}
 800f142:	f7ff ff9b 	bl	800f07c <osMutexRelease>
 800f146:	bd10      	pop	{r4, pc}

0800f148 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800f148:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800f14a:	f001 fa75 	bl	8010638 <xTaskGetSchedulerState>
 800f14e:	2801      	cmp	r0, #1
 800f150:	d001      	beq.n	800f156 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800f152:	f001 fee5 	bl	8010f20 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800f156:	bd10      	pop	{r4, pc}

0800f158 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800f158:	b570      	push	{r4, r5, r6, lr}
 800f15a:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800f15c:	d013      	beq.n	800f186 <FreeRTOS_CLIRegisterCommand+0x2e>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800f15e:	2008      	movs	r0, #8
 800f160:	f001 ff18 	bl	8010f94 <pvPortMalloc>
 800f164:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800f166:	d00c      	beq.n	800f182 <FreeRTOS_CLIRegisterCommand+0x2a>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800f168:	f001 fe94 	bl	8010e94 <vPortEnterCritical>
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800f16c:	2300      	movs	r3, #0
 800f16e:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800f170:	4b06      	ldr	r3, [pc, #24]	; (800f18c <FreeRTOS_CLIRegisterCommand+0x34>)
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800f172:	6025      	str	r5, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800f178:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800f17a:	f001 fe97 	bl	8010eac <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800f17e:	2001      	movs	r0, #1
 800f180:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxNewListItem );
 800f182:	b672      	cpsid	i
 800f184:	e7fe      	b.n	800f184 <FreeRTOS_CLIRegisterCommand+0x2c>
	configASSERT( pxCommandToRegister );
 800f186:	b672      	cpsid	i
 800f188:	e7fe      	b.n	800f188 <FreeRTOS_CLIRegisterCommand+0x30>
 800f18a:	46c0      	nop			; (mov r8, r8)
 800f18c:	20000124 	.word	0x20000124

0800f190 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800f190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f192:	4657      	mov	r7, sl
 800f194:	464e      	mov	r6, r9
 800f196:	4645      	mov	r5, r8
 800f198:	46de      	mov	lr, fp
 800f19a:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800f19c:	4b39      	ldr	r3, [pc, #228]	; (800f284 <FreeRTOS_CLIProcessCommand+0xf4>)
{
 800f19e:	b083      	sub	sp, #12
	if( pxCommand == NULL )
 800f1a0:	4698      	mov	r8, r3
 800f1a2:	681b      	ldr	r3, [r3, #0]
{
 800f1a4:	0006      	movs	r6, r0
 800f1a6:	4692      	mov	sl, r2
 800f1a8:	9101      	str	r1, [sp, #4]
	if( pxCommand == NULL )
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d011      	beq.n	800f1d2 <FreeRTOS_CLIProcessCommand+0x42>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	0032      	movs	r2, r6
 800f1b2:	4651      	mov	r1, sl
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	9801      	ldr	r0, [sp, #4]
 800f1b8:	4798      	blx	r3
 800f1ba:	1e05      	subs	r5, r0, #0

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800f1bc:	d101      	bne.n	800f1c2 <FreeRTOS_CLIProcessCommand+0x32>
		{
			pxCommand = NULL;
 800f1be:	4643      	mov	r3, r8
 800f1c0:	6018      	str	r0, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800f1c2:	0028      	movs	r0, r5
 800f1c4:	b003      	add	sp, #12
 800f1c6:	bcf0      	pop	{r4, r5, r6, r7}
 800f1c8:	46bb      	mov	fp, r7
 800f1ca:	46b2      	mov	sl, r6
 800f1cc:	46a9      	mov	r9, r5
 800f1ce:	46a0      	mov	r8, r4
 800f1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800f1d2:	4643      	mov	r3, r8
 800f1d4:	4c2c      	ldr	r4, [pc, #176]	; (800f288 <FreeRTOS_CLIProcessCommand+0xf8>)
 800f1d6:	601c      	str	r4, [r3, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800f1d8:	2320      	movs	r3, #32
 800f1da:	4699      	mov	r9, r3
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800f1dc:	6827      	ldr	r7, [r4, #0]
 800f1de:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800f1e0:	0028      	movs	r0, r5
 800f1e2:	f7f0 ff99 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800f1e6:	4649      	mov	r1, r9
 800f1e8:	5c33      	ldrb	r3, [r6, r0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800f1ea:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800f1ec:	438b      	bics	r3, r1
 800f1ee:	b259      	sxtb	r1, r3
 800f1f0:	468b      	mov	fp, r1
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d105      	bne.n	800f202 <FreeRTOS_CLIProcessCommand+0x72>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800f1f6:	0029      	movs	r1, r5
 800f1f8:	0030      	movs	r0, r6
 800f1fa:	f006 f978 	bl	80154ee <strncmp>
 800f1fe:	1e05      	subs	r5, r0, #0
 800f200:	d00b      	beq.n	800f21a <FreeRTOS_CLIProcessCommand+0x8a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800f202:	4643      	mov	r3, r8
 800f204:	6864      	ldr	r4, [r4, #4]
 800f206:	601c      	str	r4, [r3, #0]
 800f208:	2c00      	cmp	r4, #0
 800f20a:	d1e7      	bne.n	800f1dc <FreeRTOS_CLIProcessCommand+0x4c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800f20c:	4652      	mov	r2, sl
 800f20e:	491f      	ldr	r1, [pc, #124]	; (800f28c <FreeRTOS_CLIProcessCommand+0xfc>)
 800f210:	9801      	ldr	r0, [sp, #4]
 800f212:	f006 f97d 	bl	8015510 <strncpy>
		xReturn = pdFALSE;
 800f216:	2500      	movs	r5, #0
	return xReturn;
 800f218:	e7d3      	b.n	800f1c2 <FreeRTOS_CLIProcessCommand+0x32>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800f21a:	200c      	movs	r0, #12
 800f21c:	5638      	ldrsb	r0, [r7, r0]
 800f21e:	2800      	cmp	r0, #0
 800f220:	db1e      	blt.n	800f260 <FreeRTOS_CLIProcessCommand+0xd0>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800f222:	2300      	movs	r3, #0
 800f224:	56f3      	ldrsb	r3, [r6, r3]
 800f226:	0032      	movs	r2, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800f228:	2100      	movs	r1, #0
	while( *pcCommandString != 0x00 )
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d106      	bne.n	800f23c <FreeRTOS_CLIProcessCommand+0xac>
 800f22e:	e015      	b.n	800f25c <FreeRTOS_CLIProcessCommand+0xcc>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800f230:	2100      	movs	r1, #0
	while( *pcCommandString != 0x00 )
 800f232:	2300      	movs	r3, #0
		}

		pcCommandString++;
 800f234:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800f236:	56d3      	ldrsb	r3, [r2, r3]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d009      	beq.n	800f250 <FreeRTOS_CLIProcessCommand+0xc0>
		if( ( *pcCommandString ) == ' ' )
 800f23c:	2b20      	cmp	r3, #32
 800f23e:	d1f7      	bne.n	800f230 <FreeRTOS_CLIProcessCommand+0xa0>
			if( xLastCharacterWasSpace != pdTRUE )
 800f240:	2901      	cmp	r1, #1
 800f242:	d0f6      	beq.n	800f232 <FreeRTOS_CLIProcessCommand+0xa2>
				cParameters++;
 800f244:	465b      	mov	r3, fp
 800f246:	3301      	adds	r3, #1
 800f248:	b25b      	sxtb	r3, r3
 800f24a:	469b      	mov	fp, r3
				xLastCharacterWasSpace = pdTRUE;
 800f24c:	2101      	movs	r1, #1
 800f24e:	e7f0      	b.n	800f232 <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800f250:	2901      	cmp	r1, #1
 800f252:	d103      	bne.n	800f25c <FreeRTOS_CLIProcessCommand+0xcc>
	{
		cParameters--;
 800f254:	465b      	mov	r3, fp
 800f256:	3b01      	subs	r3, #1
 800f258:	b25b      	sxtb	r3, r3
 800f25a:	469b      	mov	fp, r3
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800f25c:	4558      	cmp	r0, fp
 800f25e:	d104      	bne.n	800f26a <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800f260:	4643      	mov	r3, r8
 800f262:	681b      	ldr	r3, [r3, #0]
	else if( pxCommand != NULL )
 800f264:	2b00      	cmp	r3, #0
 800f266:	d0d1      	beq.n	800f20c <FreeRTOS_CLIProcessCommand+0x7c>
 800f268:	e7a1      	b.n	800f1ae <FreeRTOS_CLIProcessCommand+0x1e>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800f26a:	4643      	mov	r3, r8
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d0cc      	beq.n	800f20c <FreeRTOS_CLIProcessCommand+0x7c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800f272:	4652      	mov	r2, sl
 800f274:	4906      	ldr	r1, [pc, #24]	; (800f290 <FreeRTOS_CLIProcessCommand+0x100>)
 800f276:	9801      	ldr	r0, [sp, #4]
 800f278:	f006 f94a 	bl	8015510 <strncpy>
		pxCommand = NULL;
 800f27c:	2300      	movs	r3, #0
 800f27e:	4642      	mov	r2, r8
 800f280:	6013      	str	r3, [r2, #0]
 800f282:	e79e      	b.n	800f1c2 <FreeRTOS_CLIProcessCommand+0x32>
 800f284:	20001e3c 	.word	0x20001e3c
 800f288:	20000128 	.word	0x20000128
 800f28c:	0801e3b0 	.word	0x0801e3b0
 800f290:	0801e358 	.word	0x0801e358

0800f294 <FreeRTOS_CLIGetOutputBuffer>:
}
 800f294:	4800      	ldr	r0, [pc, #0]	; (800f298 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800f296:	4770      	bx	lr
 800f298:	20001bd4 	.word	0x20001bd4

0800f29c <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800f29c:	2300      	movs	r3, #0
{
 800f29e:	b510      	push	{r4, lr}
unsigned portBASE_TYPE uxParametersFound = 0;
 800f2a0:	2400      	movs	r4, #0
	*pxParameterStringLength = 0;
 800f2a2:	6013      	str	r3, [r2, #0]
	while( uxParametersFound < uxWantedParameter )
 800f2a4:	428c      	cmp	r4, r1
 800f2a6:	d103      	bne.n	800f2b0 <FreeRTOS_CLIGetParameter+0x14>
 800f2a8:	e006      	b.n	800f2b8 <FreeRTOS_CLIGetParameter+0x1c>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800f2aa:	2b20      	cmp	r3, #32
 800f2ac:	d007      	beq.n	800f2be <FreeRTOS_CLIGetParameter+0x22>
			pcCommandString++;
 800f2ae:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	56c3      	ldrsb	r3, [r0, r3]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d1f8      	bne.n	800f2aa <FreeRTOS_CLIGetParameter+0xe>
const int8_t *pcReturn = NULL;
 800f2b8:	2000      	movs	r0, #0
}
 800f2ba:	bd10      	pop	{r4, pc}
			pcCommandString++;
 800f2bc:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800f2be:	2300      	movs	r3, #0
 800f2c0:	56c3      	ldrsb	r3, [r0, r3]
 800f2c2:	2b20      	cmp	r3, #32
 800f2c4:	d0fa      	beq.n	800f2bc <FreeRTOS_CLIGetParameter+0x20>
		if( *pcCommandString != 0x00 )
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d0f6      	beq.n	800f2b8 <FreeRTOS_CLIGetParameter+0x1c>
			uxParametersFound++;
 800f2ca:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800f2cc:	42a1      	cmp	r1, r4
 800f2ce:	d1e9      	bne.n	800f2a4 <FreeRTOS_CLIGetParameter+0x8>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800f2d0:	2100      	movs	r1, #0
 800f2d2:	5641      	ldrsb	r1, [r0, r1]
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	2900      	cmp	r1, #0
 800f2d8:	d105      	bne.n	800f2e6 <FreeRTOS_CLIGetParameter+0x4a>
 800f2da:	e7ed      	b.n	800f2b8 <FreeRTOS_CLIGetParameter+0x1c>
					( *pxParameterStringLength )++;
 800f2dc:	3301      	adds	r3, #1
 800f2de:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800f2e0:	56c1      	ldrsb	r1, [r0, r3]
 800f2e2:	2900      	cmp	r1, #0
 800f2e4:	d0e9      	beq.n	800f2ba <FreeRTOS_CLIGetParameter+0x1e>
 800f2e6:	2920      	cmp	r1, #32
 800f2e8:	d1f8      	bne.n	800f2dc <FreeRTOS_CLIGetParameter+0x40>
				if( *pxParameterStringLength == 0 )
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1e5      	bne.n	800f2ba <FreeRTOS_CLIGetParameter+0x1e>
 800f2ee:	e7e3      	b.n	800f2b8 <FreeRTOS_CLIGetParameter+0x1c>

0800f2f0 <prvHelpCommand>:
{
 800f2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2f2:	46d6      	mov	lr, sl
 800f2f4:	464f      	mov	r7, r9
 800f2f6:	4646      	mov	r6, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800f2f8:	2300      	movs	r3, #0
{
 800f2fa:	b5c0      	push	{r6, r7, lr}
 800f2fc:	b082      	sub	sp, #8
 800f2fe:	0004      	movs	r4, r0
 800f300:	000d      	movs	r5, r1
 800f302:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800f304:	2101      	movs	r1, #1
 800f306:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800f308:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800f30a:	f7ff ffc7 	bl	800f29c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800f30e:	2800      	cmp	r0, #0
 800f310:	d025      	beq.n	800f35e <prvHelpCommand+0x6e>
 800f312:	2206      	movs	r2, #6
 800f314:	4935      	ldr	r1, [pc, #212]	; (800f3ec <prvHelpCommand+0xfc>)
 800f316:	f006 f8ea 	bl	80154ee <strncmp>
 800f31a:	1e06      	subs	r6, r0, #0
 800f31c:	d118      	bne.n	800f350 <prvHelpCommand+0x60>
		if( str == NumOfParamsHelpStrings )
 800f31e:	4b34      	ldr	r3, [pc, #208]	; (800f3f0 <prvHelpCommand+0x100>)
 800f320:	4698      	mov	r8, r3
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	2b07      	cmp	r3, #7
 800f326:	d044      	beq.n	800f3b2 <prvHelpCommand+0xc2>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800f328:	1c5a      	adds	r2, r3, #1
 800f32a:	b2d2      	uxtb	r2, r2
 800f32c:	4691      	mov	r9, r2
 800f32e:	4642      	mov	r2, r8
 800f330:	4649      	mov	r1, r9
 800f332:	7011      	strb	r1, [r2, #0]
 800f334:	4a2f      	ldr	r2, [pc, #188]	; (800f3f4 <prvHelpCommand+0x104>)
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	5899      	ldr	r1, [r3, r2]
 800f33a:	0020      	movs	r0, r4
 800f33c:	002a      	movs	r2, r5
 800f33e:	f006 f8e7 	bl	8015510 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800f342:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800f344:	2701      	movs	r7, #1
		if( str == NumOfParamsHelpStrings )
 800f346:	2b07      	cmp	r3, #7
 800f348:	d102      	bne.n	800f350 <prvHelpCommand+0x60>
			xReturn = pdFALSE; str = 0;
 800f34a:	4643      	mov	r3, r8
 800f34c:	2700      	movs	r7, #0
 800f34e:	701e      	strb	r6, [r3, #0]
}
 800f350:	0038      	movs	r0, r7
 800f352:	b002      	add	sp, #8
 800f354:	bce0      	pop	{r5, r6, r7}
 800f356:	46ba      	mov	sl, r7
 800f358:	46b1      	mov	r9, r6
 800f35a:	46a8      	mov	r8, r5
 800f35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800f35e:	4b26      	ldr	r3, [pc, #152]	; (800f3f8 <prvHelpCommand+0x108>)
 800f360:	681e      	ldr	r6, [r3, #0]
 800f362:	4699      	mov	r9, r3
 800f364:	2e00      	cmp	r6, #0
 800f366:	d036      	beq.n	800f3d6 <prvHelpCommand+0xe6>
 800f368:	4b24      	ldr	r3, [pc, #144]	; (800f3fc <prvHelpCommand+0x10c>)
 800f36a:	469a      	mov	sl, r3
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	1c5a      	adds	r2, r3, #1
 800f370:	b2d2      	uxtb	r2, r2
 800f372:	4690      	mov	r8, r2
		if (counter > numOfBosCommands) {
 800f374:	4a22      	ldr	r2, [pc, #136]	; (800f400 <prvHelpCommand+0x110>)
 800f376:	7812      	ldrb	r2, [r2, #0]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d225      	bcs.n	800f3c8 <prvHelpCommand+0xd8>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800f37c:	002a      	movs	r2, r5
 800f37e:	0020      	movs	r0, r4
 800f380:	6833      	ldr	r3, [r6, #0]
 800f382:	3a08      	subs	r2, #8
 800f384:	6859      	ldr	r1, [r3, #4]
 800f386:	3008      	adds	r0, #8
 800f388:	f006 f8c2 	bl	8015510 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800f38c:	491d      	ldr	r1, [pc, #116]	; (800f404 <prvHelpCommand+0x114>)
 800f38e:	1c60      	adds	r0, r4, #1
 800f390:	f006 f8a5 	bl	80154de <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800f394:	2328      	movs	r3, #40	; 0x28
 800f396:	7023      	strb	r3, [r4, #0]
 800f398:	3301      	adds	r3, #1
 800f39a:	71a3      	strb	r3, [r4, #6]
 800f39c:	3b09      	subs	r3, #9
 800f39e:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800f3a0:	464b      	mov	r3, r9
 800f3a2:	6877      	ldr	r7, [r6, #4]
		counter++;
 800f3a4:	4642      	mov	r2, r8
		pxCommand = pxCommand->pxNext;
 800f3a6:	601f      	str	r7, [r3, #0]
		counter++;
 800f3a8:	4653      	mov	r3, sl
 800f3aa:	701a      	strb	r2, [r3, #0]
			xReturn = pdTRUE;
 800f3ac:	1e7b      	subs	r3, r7, #1
 800f3ae:	419f      	sbcs	r7, r3
 800f3b0:	e7ce      	b.n	800f350 <prvHelpCommand+0x60>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800f3b2:	4642      	mov	r2, r8
 800f3b4:	3b06      	subs	r3, #6
 800f3b6:	7013      	strb	r3, [r2, #0]
 800f3b8:	4b0e      	ldr	r3, [pc, #56]	; (800f3f4 <prvHelpCommand+0x104>)
 800f3ba:	002a      	movs	r2, r5
 800f3bc:	0020      	movs	r0, r4
 800f3be:	6819      	ldr	r1, [r3, #0]
 800f3c0:	f006 f8a6 	bl	8015510 <strncpy>
			xReturn = pdTRUE;
 800f3c4:	2701      	movs	r7, #1
 800f3c6:	e7c3      	b.n	800f350 <prvHelpCommand+0x60>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800f3c8:	6833      	ldr	r3, [r6, #0]
 800f3ca:	002a      	movs	r2, r5
 800f3cc:	0020      	movs	r0, r4
 800f3ce:	6859      	ldr	r1, [r3, #4]
 800f3d0:	f006 f89e 	bl	8015510 <strncpy>
 800f3d4:	e7e4      	b.n	800f3a0 <prvHelpCommand+0xb0>
			pxCommand = &xRegisteredCommands;
 800f3d6:	4e0c      	ldr	r6, [pc, #48]	; (800f408 <prvHelpCommand+0x118>)
 800f3d8:	601e      	str	r6, [r3, #0]
			counter = 1;
 800f3da:	4b08      	ldr	r3, [pc, #32]	; (800f3fc <prvHelpCommand+0x10c>)
 800f3dc:	469a      	mov	sl, r3
 800f3de:	2301      	movs	r3, #1
 800f3e0:	4652      	mov	r2, sl
 800f3e2:	7013      	strb	r3, [r2, #0]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	4698      	mov	r8, r3
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	e7c3      	b.n	800f374 <prvHelpCommand+0x84>
 800f3ec:	0801c264 	.word	0x0801c264
 800f3f0:	20001e44 	.word	0x20001e44
 800f3f4:	20000054 	.word	0x20000054
 800f3f8:	20001e40 	.word	0x20001e40
 800f3fc:	20001e38 	.word	0x20001e38
 800f400:	20006a34 	.word	0x20006a34
 800f404:	0801b894 	.word	0x0801b894
 800f408:	20000128 	.word	0x20000128

0800f40c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f40c:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f40e:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f410:	3308      	adds	r3, #8
 800f412:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f414:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f416:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f418:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f41a:	4252      	negs	r2, r2
 800f41c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f41e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f420:	4770      	bx	lr
 800f422:	46c0      	nop			; (mov r8, r8)

0800f424 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f424:	2300      	movs	r3, #0
 800f426:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f428:	4770      	bx	lr
 800f42a:	46c0      	nop			; (mov r8, r8)

0800f42c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800f42c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f42e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800f430:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f432:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f434:	689a      	ldr	r2, [r3, #8]
 800f436:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f438:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800f43a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f43c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800f43e:	3301      	adds	r3, #1
 800f440:	6003      	str	r3, [r0, #0]
}
 800f442:	4770      	bx	lr

0800f444 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f444:	0003      	movs	r3, r0
{
 800f446:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f448:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f44a:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800f44c:	1c62      	adds	r2, r4, #1
 800f44e:	d00d      	beq.n	800f46c <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f450:	001a      	movs	r2, r3
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	681d      	ldr	r5, [r3, #0]
 800f456:	42a5      	cmp	r5, r4
 800f458:	d9fa      	bls.n	800f450 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f45a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f45c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800f45e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800f460:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800f462:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800f464:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f466:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800f468:	6003      	str	r3, [r0, #0]
}
 800f46a:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800f46c:	6902      	ldr	r2, [r0, #16]
 800f46e:	6853      	ldr	r3, [r2, #4]
 800f470:	e7f3      	b.n	800f45a <vListInsert+0x16>
 800f472:	46c0      	nop			; (mov r8, r8)

0800f474 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f474:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f476:	6841      	ldr	r1, [r0, #4]
 800f478:	6882      	ldr	r2, [r0, #8]
 800f47a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f47c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f47e:	6859      	ldr	r1, [r3, #4]
 800f480:	4281      	cmp	r1, r0
 800f482:	d005      	beq.n	800f490 <uxListRemove+0x1c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f484:	2200      	movs	r2, #0
 800f486:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	1e50      	subs	r0, r2, #1
 800f48c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800f48e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f490:	605a      	str	r2, [r3, #4]
 800f492:	e7f7      	b.n	800f484 <uxListRemove+0x10>

0800f494 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f494:	b570      	push	{r4, r5, r6, lr}
 800f496:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f498:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800f49a:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f49c:	2a00      	cmp	r2, #0
 800f49e:	d107      	bne.n	800f4b0 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f4a0:	6805      	ldr	r5, [r0, #0]
 800f4a2:	2d00      	cmp	r5, #0
 800f4a4:	d02d      	beq.n	800f502 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800f4a6:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800f4a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800f4ae:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800f4b0:	2d00      	cmp	r5, #0
 800f4b2:	d10e      	bne.n	800f4d2 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f4b4:	6880      	ldr	r0, [r0, #8]
 800f4b6:	f005 fda5 	bl	8015004 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f4ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f4bc:	68a3      	ldr	r3, [r4, #8]
 800f4be:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f4c0:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f4c2:	4463      	add	r3, ip
 800f4c4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d3ed      	bcc.n	800f4a6 <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f4ca:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800f4cc:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f4ce:	60a3      	str	r3, [r4, #8]
 800f4d0:	e7ea      	b.n	800f4a8 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4d2:	68c0      	ldr	r0, [r0, #12]
 800f4d4:	f005 fd96 	bl	8015004 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f4d8:	68e1      	ldr	r1, [r4, #12]
 800f4da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4dc:	425a      	negs	r2, r3
 800f4de:	1acb      	subs	r3, r1, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f4e0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f4e2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f4e4:	428b      	cmp	r3, r1
 800f4e6:	d203      	bcs.n	800f4f0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f4e8:	6863      	ldr	r3, [r4, #4]
 800f4ea:	469c      	mov	ip, r3
 800f4ec:	4462      	add	r2, ip
 800f4ee:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800f4f0:	2d02      	cmp	r5, #2
 800f4f2:	d1d8      	bne.n	800f4a6 <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d0d5      	beq.n	800f4a6 <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800f4fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f4fc:	3b01      	subs	r3, #1
 800f4fe:	63a3      	str	r3, [r4, #56]	; 0x38
 800f500:	e7d1      	b.n	800f4a6 <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f502:	6840      	ldr	r0, [r0, #4]
 800f504:	f001 f8e0 	bl	80106c8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800f508:	6065      	str	r5, [r4, #4]
 800f50a:	e7cd      	b.n	800f4a8 <prvCopyDataToQueue+0x14>

0800f50c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f50c:	0003      	movs	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f50e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800f510:	0008      	movs	r0, r1
 800f512:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f514:	2a00      	cmp	r2, #0
 800f516:	d007      	beq.n	800f528 <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f518:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f51a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f51c:	1889      	adds	r1, r1, r2
 800f51e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f520:	42a1      	cmp	r1, r4
 800f522:	d202      	bcs.n	800f52a <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f524:	f005 fd6e 	bl	8015004 <memcpy>
	}
}
 800f528:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f52a:	6819      	ldr	r1, [r3, #0]
 800f52c:	60d9      	str	r1, [r3, #12]
 800f52e:	e7f9      	b.n	800f524 <prvCopyDataFromQueue+0x18>

0800f530 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f530:	b570      	push	{r4, r5, r6, lr}
 800f532:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f534:	f001 fcae 	bl	8010e94 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f538:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	dd18      	ble.n	800f570 <prvUnlockQueue+0x40>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f53e:	0025      	movs	r5, r4
 800f540:	3524      	adds	r5, #36	; 0x24
 800f542:	e005      	b.n	800f550 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800f544:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f546:	3b01      	subs	r3, #1
 800f548:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f54a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	dd0f      	ble.n	800f570 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00c      	beq.n	800f570 <prvUnlockQueue+0x40>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f556:	0028      	movs	r0, r5
 800f558:	f000 ffe2 	bl	8010520 <xTaskRemoveFromEventList>
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d0f1      	beq.n	800f544 <prvUnlockQueue+0x14>
						vTaskMissedYield();
 800f560:	f001 f864 	bl	801062c <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800f564:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f566:	3b01      	subs	r3, #1
 800f568:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f56a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	dcef      	bgt.n	800f550 <prvUnlockQueue+0x20>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800f570:	2301      	movs	r3, #1
 800f572:	425b      	negs	r3, r3
 800f574:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800f576:	f001 fc99 	bl	8010eac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f57a:	f001 fc8b 	bl	8010e94 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f57e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f580:	2b00      	cmp	r3, #0
 800f582:	dd18      	ble.n	800f5b6 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f584:	0025      	movs	r5, r4
 800f586:	3510      	adds	r5, #16
 800f588:	e005      	b.n	800f596 <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800f58a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f58c:	3b01      	subs	r3, #1
 800f58e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f590:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f592:	2b00      	cmp	r3, #0
 800f594:	dd0f      	ble.n	800f5b6 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f596:	6923      	ldr	r3, [r4, #16]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00c      	beq.n	800f5b6 <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f59c:	0028      	movs	r0, r5
 800f59e:	f000 ffbf 	bl	8010520 <xTaskRemoveFromEventList>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d0f1      	beq.n	800f58a <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 800f5a6:	f001 f841 	bl	801062c <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800f5aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f5b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	dcef      	bgt.n	800f596 <prvUnlockQueue+0x66>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	425b      	negs	r3, r3
 800f5ba:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f5bc:	f001 fc76 	bl	8010eac <vPortExitCritical>
}
 800f5c0:	bd70      	pop	{r4, r5, r6, pc}
 800f5c2:	46c0      	nop			; (mov r8, r8)

0800f5c4 <xQueueGenericReset.part.0>:
BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 800f5c4:	b570      	push	{r4, r5, r6, lr}
 800f5c6:	0004      	movs	r4, r0
 800f5c8:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800f5ca:	f001 fc63 	bl	8010e94 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f5ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f5d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f5d2:	6822      	ldr	r2, [r4, #0]
 800f5d4:	434b      	muls	r3, r1
 800f5d6:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f5d8:	1a5b      	subs	r3, r3, r1
 800f5da:	18d3      	adds	r3, r2, r3
 800f5dc:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800f5de:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f5e0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f5e2:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800f5e4:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f5e6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5e8:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800f5ea:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800f5ec:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800f5ee:	2d00      	cmp	r5, #0
 800f5f0:	d10f      	bne.n	800f612 <xQueueGenericReset.part.0+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5f2:	6923      	ldr	r3, [r4, #16]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d103      	bne.n	800f600 <xQueueGenericReset.part.0+0x3c>
	taskEXIT_CRITICAL();
 800f5f8:	f001 fc58 	bl	8010eac <vPortExitCritical>
}
 800f5fc:	2001      	movs	r0, #1
 800f5fe:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f600:	0020      	movs	r0, r4
 800f602:	3010      	adds	r0, #16
 800f604:	f000 ff8c 	bl	8010520 <xTaskRemoveFromEventList>
 800f608:	2801      	cmp	r0, #1
 800f60a:	d1f5      	bne.n	800f5f8 <xQueueGenericReset.part.0+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800f60c:	f001 fc36 	bl	8010e7c <vPortYield>
 800f610:	e7f2      	b.n	800f5f8 <xQueueGenericReset.part.0+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f612:	0020      	movs	r0, r4
 800f614:	3010      	adds	r0, #16
 800f616:	f7ff fef9 	bl	800f40c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f61a:	0020      	movs	r0, r4
 800f61c:	3024      	adds	r0, #36	; 0x24
 800f61e:	f7ff fef5 	bl	800f40c <vListInitialise>
 800f622:	e7e9      	b.n	800f5f8 <xQueueGenericReset.part.0+0x34>

0800f624 <xQueueGenericCreate.part.0>:
QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 800f624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f626:	0006      	movs	r6, r0
 800f628:	000d      	movs	r5, r1
 800f62a:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f62c:	2900      	cmp	r1, #0
 800f62e:	d014      	beq.n	800f65a <xQueueGenericCreate.part.0+0x36>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f630:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f632:	3055      	adds	r0, #85	; 0x55
 800f634:	f001 fcae 	bl	8010f94 <pvPortMalloc>
 800f638:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f63a:	d00c      	beq.n	800f656 <xQueueGenericCreate.part.0+0x32>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800f63c:	0003      	movs	r3, r0
 800f63e:	3354      	adds	r3, #84	; 0x54
 800f640:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800f642:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800f644:	6425      	str	r5, [r4, #64]	; 0x40
	configASSERT( pxQueue );
 800f646:	2101      	movs	r1, #1
 800f648:	0020      	movs	r0, r4
 800f64a:	f7ff ffbb 	bl	800f5c4 <xQueueGenericReset.part.0>
			pxNewQueue->ucQueueType = ucQueueType;
 800f64e:	2350      	movs	r3, #80	; 0x50
}
 800f650:	0020      	movs	r0, r4
			pxNewQueue->ucQueueType = ucQueueType;
 800f652:	54e7      	strb	r7, [r4, r3]
}
 800f654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( xReturn );
 800f656:	b672      	cpsid	i
 800f658:	e7fe      	b.n	800f658 <xQueueGenericCreate.part.0+0x34>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f65a:	2054      	movs	r0, #84	; 0x54
 800f65c:	f001 fc9a 	bl	8010f94 <pvPortMalloc>
 800f660:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f662:	d0f8      	beq.n	800f656 <xQueueGenericCreate.part.0+0x32>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f664:	6024      	str	r4, [r4, #0]
 800f666:	e7ec      	b.n	800f642 <xQueueGenericCreate.part.0+0x1e>

0800f668 <xQueueGenericCreate>:
{
 800f668:	b510      	push	{r4, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d101      	bne.n	800f672 <xQueueGenericCreate+0xa>
 800f66e:	b672      	cpsid	i
 800f670:	e7fe      	b.n	800f670 <xQueueGenericCreate+0x8>
 800f672:	f7ff ffd7 	bl	800f624 <xQueueGenericCreate.part.0>
}
 800f676:	bd10      	pop	{r4, pc}

0800f678 <xQueueCreateCountingSemaphore>:
	{
 800f678:	b510      	push	{r4, lr}
 800f67a:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d101      	bne.n	800f684 <xQueueCreateCountingSemaphore+0xc>
 800f680:	b672      	cpsid	i
 800f682:	e7fe      	b.n	800f682 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f684:	4288      	cmp	r0, r1
 800f686:	d201      	bcs.n	800f68c <xQueueCreateCountingSemaphore+0x14>
 800f688:	b672      	cpsid	i
 800f68a:	e7fe      	b.n	800f68a <xQueueCreateCountingSemaphore+0x12>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f68c:	2202      	movs	r2, #2
 800f68e:	2100      	movs	r1, #0
 800f690:	f7ff ffc8 	bl	800f624 <xQueueGenericCreate.part.0>
		if( xHandle != NULL )
 800f694:	2800      	cmp	r0, #0
 800f696:	d001      	beq.n	800f69c <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f698:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f69a:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800f69c:	b672      	cpsid	i
 800f69e:	e7fe      	b.n	800f69e <xQueueCreateCountingSemaphore+0x26>

0800f6a0 <xQueueGenericSend>:
{
 800f6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6a2:	46c6      	mov	lr, r8
 800f6a4:	b500      	push	{lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	0004      	movs	r4, r0
 800f6aa:	4688      	mov	r8, r1
 800f6ac:	001e      	movs	r6, r3
 800f6ae:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	d016      	beq.n	800f6e2 <xQueueGenericSend+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6b4:	2900      	cmp	r1, #0
 800f6b6:	d00f      	beq.n	800f6d8 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f6b8:	2e02      	cmp	r6, #2
 800f6ba:	d104      	bne.n	800f6c6 <xQueueGenericSend+0x26>
 800f6bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d001      	beq.n	800f6c6 <xQueueGenericSend+0x26>
 800f6c2:	b672      	cpsid	i
 800f6c4:	e7fe      	b.n	800f6c4 <xQueueGenericSend+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6c6:	f000 ffb7 	bl	8010638 <xTaskGetSchedulerState>
 800f6ca:	1e05      	subs	r5, r0, #0
 800f6cc:	d10b      	bne.n	800f6e6 <xQueueGenericSend+0x46>
 800f6ce:	9b01      	ldr	r3, [sp, #4]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d009      	beq.n	800f6e8 <xQueueGenericSend+0x48>
 800f6d4:	b672      	cpsid	i
 800f6d6:	e7fe      	b.n	800f6d6 <xQueueGenericSend+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d0ec      	beq.n	800f6b8 <xQueueGenericSend+0x18>
 800f6de:	b672      	cpsid	i
 800f6e0:	e7fe      	b.n	800f6e0 <xQueueGenericSend+0x40>
	configASSERT( pxQueue );
 800f6e2:	b672      	cpsid	i
 800f6e4:	e7fe      	b.n	800f6e4 <xQueueGenericSend+0x44>
 800f6e6:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f6e8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800f6ea:	f001 fbd3 	bl	8010e94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f6ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f6f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d341      	bcc.n	800f77a <xQueueGenericSend+0xda>
 800f6f6:	2e02      	cmp	r6, #2
 800f6f8:	d03f      	beq.n	800f77a <xQueueGenericSend+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f6fa:	9b01      	ldr	r3, [sp, #4]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d05d      	beq.n	800f7bc <xQueueGenericSend+0x11c>
				else if( xEntryTimeSet == pdFALSE )
 800f700:	2d00      	cmp	r5, #0
 800f702:	d036      	beq.n	800f772 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800f704:	f001 fbd2 	bl	8010eac <vPortExitCritical>
		vTaskSuspendAll();
 800f708:	f000 fc9e 	bl	8010048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f70c:	f001 fbc2 	bl	8010e94 <vPortEnterCritical>
 800f710:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f712:	3301      	adds	r3, #1
 800f714:	d100      	bne.n	800f718 <xQueueGenericSend+0x78>
 800f716:	6467      	str	r7, [r4, #68]	; 0x44
 800f718:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f71a:	3301      	adds	r3, #1
 800f71c:	d100      	bne.n	800f720 <xQueueGenericSend+0x80>
 800f71e:	64a7      	str	r7, [r4, #72]	; 0x48
 800f720:	f001 fbc4 	bl	8010eac <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f724:	a901      	add	r1, sp, #4
 800f726:	a802      	add	r0, sp, #8
 800f728:	f000 ff4a 	bl	80105c0 <xTaskCheckForTimeOut>
 800f72c:	2800      	cmp	r0, #0
 800f72e:	d13e      	bne.n	800f7ae <xQueueGenericSend+0x10e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f730:	f001 fbb0 	bl	8010e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f736:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f738:	4293      	cmp	r3, r2
 800f73a:	d008      	beq.n	800f74e <xQueueGenericSend+0xae>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f73c:	f001 fbb6 	bl	8010eac <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800f740:	0020      	movs	r0, r4
 800f742:	f7ff fef5 	bl	800f530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f746:	f000 fdb3 	bl	80102b0 <xTaskResumeAll>
 800f74a:	2501      	movs	r5, #1
 800f74c:	e7cd      	b.n	800f6ea <xQueueGenericSend+0x4a>
	taskEXIT_CRITICAL();
 800f74e:	f001 fbad 	bl	8010eac <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f752:	0020      	movs	r0, r4
 800f754:	9901      	ldr	r1, [sp, #4]
 800f756:	3010      	adds	r0, #16
 800f758:	f000 fea4 	bl	80104a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f75c:	0020      	movs	r0, r4
 800f75e:	f7ff fee7 	bl	800f530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f762:	f000 fda5 	bl	80102b0 <xTaskResumeAll>
 800f766:	2800      	cmp	r0, #0
 800f768:	d1ef      	bne.n	800f74a <xQueueGenericSend+0xaa>
					portYIELD_WITHIN_API();
 800f76a:	f001 fb87 	bl	8010e7c <vPortYield>
 800f76e:	2501      	movs	r5, #1
 800f770:	e7bb      	b.n	800f6ea <xQueueGenericSend+0x4a>
					vTaskSetTimeOutState( &xTimeOut );
 800f772:	a802      	add	r0, sp, #8
 800f774:	f000 ff14 	bl	80105a0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f778:	e7c4      	b.n	800f704 <xQueueGenericSend+0x64>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f77a:	0032      	movs	r2, r6
 800f77c:	4641      	mov	r1, r8
 800f77e:	0020      	movs	r0, r4
 800f780:	f7ff fe88 	bl	800f494 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f786:	2b00      	cmp	r3, #0
 800f788:	d108      	bne.n	800f79c <xQueueGenericSend+0xfc>
					else if( xYieldRequired != pdFALSE )
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d10c      	bne.n	800f7a8 <xQueueGenericSend+0x108>
				taskEXIT_CRITICAL();
 800f78e:	f001 fb8d 	bl	8010eac <vPortExitCritical>
				return pdPASS;
 800f792:	2001      	movs	r0, #1
}
 800f794:	b004      	add	sp, #16
 800f796:	bc80      	pop	{r7}
 800f798:	46b8      	mov	r8, r7
 800f79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800f79c:	0020      	movs	r0, r4
 800f79e:	3024      	adds	r0, #36	; 0x24
 800f7a0:	f000 febe 	bl	8010520 <xTaskRemoveFromEventList>
 800f7a4:	2801      	cmp	r0, #1
 800f7a6:	d1f2      	bne.n	800f78e <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
 800f7a8:	f001 fb68 	bl	8010e7c <vPortYield>
 800f7ac:	e7ef      	b.n	800f78e <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 800f7ae:	0020      	movs	r0, r4
 800f7b0:	f7ff febe 	bl	800f530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7b4:	f000 fd7c 	bl	80102b0 <xTaskResumeAll>
			return errQUEUE_FULL;
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	e7eb      	b.n	800f794 <xQueueGenericSend+0xf4>
					taskEXIT_CRITICAL();
 800f7bc:	f001 fb76 	bl	8010eac <vPortExitCritical>
					return errQUEUE_FULL;
 800f7c0:	2000      	movs	r0, #0
 800f7c2:	e7e7      	b.n	800f794 <xQueueGenericSend+0xf4>

0800f7c4 <xQueueGenericSendFromISR>:
{
 800f7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7c6:	46c6      	mov	lr, r8
 800f7c8:	0004      	movs	r4, r0
 800f7ca:	000e      	movs	r6, r1
 800f7cc:	0017      	movs	r7, r2
 800f7ce:	4698      	mov	r8, r3
 800f7d0:	b500      	push	{lr}
	configASSERT( pxQueue );
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	d01d      	beq.n	800f812 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f7d6:	2900      	cmp	r1, #0
 800f7d8:	d016      	beq.n	800f808 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f7da:	4643      	mov	r3, r8
 800f7dc:	2b02      	cmp	r3, #2
 800f7de:	d104      	bne.n	800f7ea <xQueueGenericSendFromISR+0x26>
 800f7e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	d017      	beq.n	800f816 <xQueueGenericSendFromISR+0x52>
 800f7e6:	b672      	cpsid	i
 800f7e8:	e7fe      	b.n	800f7e8 <xQueueGenericSendFromISR+0x24>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7ea:	f001 fb6d 	bl	8010ec8 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f7ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f7f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7f2:	0005      	movs	r5, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d312      	bcc.n	800f81e <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800f7f8:	2600      	movs	r6, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f7fa:	0028      	movs	r0, r5
 800f7fc:	f001 fb6a 	bl	8010ed4 <vClearInterruptMaskFromISR>
}
 800f800:	0030      	movs	r0, r6
 800f802:	bc80      	pop	{r7}
 800f804:	46b8      	mov	r8, r7
 800f806:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f808:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d0e5      	beq.n	800f7da <xQueueGenericSendFromISR+0x16>
 800f80e:	b672      	cpsid	i
 800f810:	e7fe      	b.n	800f810 <xQueueGenericSendFromISR+0x4c>
	configASSERT( pxQueue );
 800f812:	b672      	cpsid	i
 800f814:	e7fe      	b.n	800f814 <xQueueGenericSendFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f816:	f001 fb57 	bl	8010ec8 <ulSetInterruptMaskFromISR>
 800f81a:	0005      	movs	r5, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f81c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f81e:	4642      	mov	r2, r8
 800f820:	0031      	movs	r1, r6
 800f822:	0020      	movs	r0, r4
 800f824:	f7ff fe36 	bl	800f494 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f828:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f82a:	3301      	adds	r3, #1
 800f82c:	d004      	beq.n	800f838 <xQueueGenericSendFromISR+0x74>
				++( pxQueue->xTxLock );
 800f82e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f830:	2601      	movs	r6, #1
				++( pxQueue->xTxLock );
 800f832:	3301      	adds	r3, #1
 800f834:	64a3      	str	r3, [r4, #72]	; 0x48
 800f836:	e7e0      	b.n	800f7fa <xQueueGenericSendFromISR+0x36>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f838:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800f83a:	2601      	movs	r6, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d0dc      	beq.n	800f7fa <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f840:	0020      	movs	r0, r4
 800f842:	3024      	adds	r0, #36	; 0x24
 800f844:	f000 fe6c 	bl	8010520 <xTaskRemoveFromEventList>
 800f848:	2800      	cmp	r0, #0
 800f84a:	d0d6      	beq.n	800f7fa <xQueueGenericSendFromISR+0x36>
							if( pxHigherPriorityTaskWoken != NULL )
 800f84c:	2f00      	cmp	r7, #0
 800f84e:	d0d4      	beq.n	800f7fa <xQueueGenericSendFromISR+0x36>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f850:	603e      	str	r6, [r7, #0]
 800f852:	e7d2      	b.n	800f7fa <xQueueGenericSendFromISR+0x36>

0800f854 <xQueueGiveFromISR>:
{
 800f854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f856:	0004      	movs	r4, r0
 800f858:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d01e      	beq.n	800f89c <xQueueGiveFromISR+0x48>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f85e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f860:	2b00      	cmp	r3, #0
 800f862:	d001      	beq.n	800f868 <xQueueGiveFromISR+0x14>
 800f864:	b672      	cpsid	i
 800f866:	e7fe      	b.n	800f866 <xQueueGiveFromISR+0x12>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f868:	6803      	ldr	r3, [r0, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d018      	beq.n	800f8a0 <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f86e:	f001 fb2b 	bl	8010ec8 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f874:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f876:	0007      	movs	r7, r0
			xReturn = errQUEUE_FULL;
 800f878:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d209      	bcs.n	800f892 <xQueueGiveFromISR+0x3e>
			++( pxQueue->uxMessagesWaiting );
 800f87e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f880:	3301      	adds	r3, #1
 800f882:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f884:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f886:	3301      	adds	r3, #1
 800f888:	d00f      	beq.n	800f8aa <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800f88a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f88c:	3301      	adds	r3, #1
 800f88e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f890:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f892:	0038      	movs	r0, r7
 800f894:	f001 fb1e 	bl	8010ed4 <vClearInterruptMaskFromISR>
}
 800f898:	0028      	movs	r0, r5
 800f89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800f89c:	b672      	cpsid	i
 800f89e:	e7fe      	b.n	800f89e <xQueueGiveFromISR+0x4a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f8a0:	6843      	ldr	r3, [r0, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d0e3      	beq.n	800f86e <xQueueGiveFromISR+0x1a>
 800f8a6:	b672      	cpsid	i
 800f8a8:	e7fe      	b.n	800f8a8 <xQueueGiveFromISR+0x54>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d0ef      	beq.n	800f890 <xQueueGiveFromISR+0x3c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8b0:	0020      	movs	r0, r4
 800f8b2:	3024      	adds	r0, #36	; 0x24
 800f8b4:	f000 fe34 	bl	8010520 <xTaskRemoveFromEventList>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d0e9      	beq.n	800f890 <xQueueGiveFromISR+0x3c>
							if( pxHigherPriorityTaskWoken != NULL )
 800f8bc:	2e00      	cmp	r6, #0
 800f8be:	d0e7      	beq.n	800f890 <xQueueGiveFromISR+0x3c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f8c0:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800f8c2:	2501      	movs	r5, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f8c4:	6033      	str	r3, [r6, #0]
 800f8c6:	e7e4      	b.n	800f892 <xQueueGiveFromISR+0x3e>

0800f8c8 <xQueueGenericReceive>:
{
 800f8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ca:	46c6      	mov	lr, r8
 800f8cc:	b500      	push	{lr}
 800f8ce:	b084      	sub	sp, #16
 800f8d0:	0004      	movs	r4, r0
 800f8d2:	000d      	movs	r5, r1
 800f8d4:	001e      	movs	r6, r3
 800f8d6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d076      	beq.n	800f9ca <xQueueGenericReceive+0x102>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8dc:	2900      	cmp	r1, #0
 800f8de:	d06c      	beq.n	800f9ba <xQueueGenericReceive+0xf2>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8e0:	f000 feaa 	bl	8010638 <xTaskGetSchedulerState>
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	d063      	beq.n	800f9b0 <xQueueGenericReceive+0xe8>
		taskENTER_CRITICAL();
 800f8e8:	f001 fad4 	bl	8010e94 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d14a      	bne.n	800f988 <xQueueGenericReceive+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8f2:	9b01      	ldr	r3, [sp, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d100      	bne.n	800f8fa <xQueueGenericReceive+0x32>
 800f8f8:	e07b      	b.n	800f9f2 <xQueueGenericReceive+0x12a>
					vTaskSetTimeOutState( &xTimeOut );
 800f8fa:	a802      	add	r0, sp, #8
 800f8fc:	f000 fe50 	bl	80105a0 <vTaskSetTimeOutState>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f900:	2324      	movs	r3, #36	; 0x24
 800f902:	4698      	mov	r8, r3
		prvLockQueue( pxQueue );
 800f904:	2700      	movs	r7, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f906:	44a0      	add	r8, r4
 800f908:	e00e      	b.n	800f928 <xQueueGenericReceive+0x60>
	taskEXIT_CRITICAL();
 800f90a:	f001 facf 	bl	8010eac <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800f90e:	0020      	movs	r0, r4
 800f910:	f7ff fe0e 	bl	800f530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f914:	f000 fccc 	bl	80102b0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800f918:	f001 fabc 	bl	8010e94 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f91c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d132      	bne.n	800f988 <xQueueGenericReceive+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f922:	9b01      	ldr	r3, [sp, #4]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d064      	beq.n	800f9f2 <xQueueGenericReceive+0x12a>
		taskEXIT_CRITICAL();
 800f928:	f001 fac0 	bl	8010eac <vPortExitCritical>
		vTaskSuspendAll();
 800f92c:	f000 fb8c 	bl	8010048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f930:	f001 fab0 	bl	8010e94 <vPortEnterCritical>
 800f934:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f936:	3301      	adds	r3, #1
 800f938:	d100      	bne.n	800f93c <xQueueGenericReceive+0x74>
 800f93a:	6467      	str	r7, [r4, #68]	; 0x44
 800f93c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f93e:	3301      	adds	r3, #1
 800f940:	d100      	bne.n	800f944 <xQueueGenericReceive+0x7c>
 800f942:	64a7      	str	r7, [r4, #72]	; 0x48
 800f944:	f001 fab2 	bl	8010eac <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f948:	a901      	add	r1, sp, #4
 800f94a:	a802      	add	r0, sp, #8
 800f94c:	f000 fe38 	bl	80105c0 <xTaskCheckForTimeOut>
 800f950:	2800      	cmp	r0, #0
 800f952:	d144      	bne.n	800f9de <xQueueGenericReceive+0x116>
	taskENTER_CRITICAL();
 800f954:	f001 fa9e 	bl	8010e94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d1d5      	bne.n	800f90a <xQueueGenericReceive+0x42>
	taskEXIT_CRITICAL();
 800f95e:	f001 faa5 	bl	8010eac <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f962:	6823      	ldr	r3, [r4, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d032      	beq.n	800f9ce <xQueueGenericReceive+0x106>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f968:	4640      	mov	r0, r8
 800f96a:	9901      	ldr	r1, [sp, #4]
 800f96c:	f000 fd9a 	bl	80104a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f970:	0020      	movs	r0, r4
 800f972:	f7ff fddd 	bl	800f530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f976:	f000 fc9b 	bl	80102b0 <xTaskResumeAll>
 800f97a:	2800      	cmp	r0, #0
 800f97c:	d022      	beq.n	800f9c4 <xQueueGenericReceive+0xfc>
		taskENTER_CRITICAL();
 800f97e:	f001 fa89 	bl	8010e94 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f982:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f984:	2b00      	cmp	r3, #0
 800f986:	d0cc      	beq.n	800f922 <xQueueGenericReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f988:	0029      	movs	r1, r5
 800f98a:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f98c:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f98e:	f7ff fdbd 	bl	800f50c <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f992:	2e00      	cmp	r6, #0
 800f994:	d131      	bne.n	800f9fa <xQueueGenericReceive+0x132>
					--( pxQueue->uxMessagesWaiting );
 800f996:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f998:	3b01      	subs	r3, #1
 800f99a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f99c:	6823      	ldr	r3, [r4, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d038      	beq.n	800fa14 <xQueueGenericReceive+0x14c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9a2:	6923      	ldr	r3, [r4, #16]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d139      	bne.n	800fa1c <xQueueGenericReceive+0x154>
				taskEXIT_CRITICAL();
 800f9a8:	f001 fa80 	bl	8010eac <vPortExitCritical>
				return pdPASS;
 800f9ac:	2001      	movs	r0, #1
 800f9ae:	e01c      	b.n	800f9ea <xQueueGenericReceive+0x122>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9b0:	9b01      	ldr	r3, [sp, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d098      	beq.n	800f8e8 <xQueueGenericReceive+0x20>
 800f9b6:	b672      	cpsid	i
 800f9b8:	e7fe      	b.n	800f9b8 <xQueueGenericReceive+0xf0>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d08f      	beq.n	800f8e0 <xQueueGenericReceive+0x18>
 800f9c0:	b672      	cpsid	i
 800f9c2:	e7fe      	b.n	800f9c2 <xQueueGenericReceive+0xfa>
					portYIELD_WITHIN_API();
 800f9c4:	f001 fa5a 	bl	8010e7c <vPortYield>
 800f9c8:	e7d9      	b.n	800f97e <xQueueGenericReceive+0xb6>
	configASSERT( pxQueue );
 800f9ca:	b672      	cpsid	i
 800f9cc:	e7fe      	b.n	800f9cc <xQueueGenericReceive+0x104>
						taskENTER_CRITICAL();
 800f9ce:	f001 fa61 	bl	8010e94 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f9d2:	6860      	ldr	r0, [r4, #4]
 800f9d4:	f000 fe40 	bl	8010658 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f9d8:	f001 fa68 	bl	8010eac <vPortExitCritical>
 800f9dc:	e7c4      	b.n	800f968 <xQueueGenericReceive+0xa0>
			prvUnlockQueue( pxQueue );
 800f9de:	0020      	movs	r0, r4
 800f9e0:	f7ff fda6 	bl	800f530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9e4:	f000 fc64 	bl	80102b0 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f9e8:	2000      	movs	r0, #0
}
 800f9ea:	b004      	add	sp, #16
 800f9ec:	bc80      	pop	{r7}
 800f9ee:	46b8      	mov	r8, r7
 800f9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800f9f2:	f001 fa5b 	bl	8010eac <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	e7f7      	b.n	800f9ea <xQueueGenericReceive+0x122>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f9fc:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d0d2      	beq.n	800f9a8 <xQueueGenericReceive+0xe0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa02:	0020      	movs	r0, r4
 800fa04:	3024      	adds	r0, #36	; 0x24
 800fa06:	f000 fd8b 	bl	8010520 <xTaskRemoveFromEventList>
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d0cc      	beq.n	800f9a8 <xQueueGenericReceive+0xe0>
							queueYIELD_IF_USING_PREEMPTION();
 800fa0e:	f001 fa35 	bl	8010e7c <vPortYield>
 800fa12:	e7c9      	b.n	800f9a8 <xQueueGenericReceive+0xe0>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800fa14:	f000 ff54 	bl	80108c0 <pvTaskIncrementMutexHeldCount>
 800fa18:	6060      	str	r0, [r4, #4]
 800fa1a:	e7c2      	b.n	800f9a2 <xQueueGenericReceive+0xda>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800fa1c:	0020      	movs	r0, r4
 800fa1e:	3010      	adds	r0, #16
 800fa20:	f000 fd7e 	bl	8010520 <xTaskRemoveFromEventList>
 800fa24:	2801      	cmp	r0, #1
 800fa26:	d1bf      	bne.n	800f9a8 <xQueueGenericReceive+0xe0>
 800fa28:	e7f1      	b.n	800fa0e <xQueueGenericReceive+0x146>
 800fa2a:	46c0      	nop			; (mov r8, r8)

0800fa2c <xQueueReceiveFromISR>:
{
 800fa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa2e:	46c6      	mov	lr, r8
 800fa30:	0004      	movs	r4, r0
 800fa32:	000f      	movs	r7, r1
 800fa34:	0016      	movs	r6, r2
 800fa36:	b500      	push	{lr}
	configASSERT( pxQueue );
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d014      	beq.n	800fa66 <xQueueReceiveFromISR+0x3a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa3c:	2900      	cmp	r1, #0
 800fa3e:	d00d      	beq.n	800fa5c <xQueueReceiveFromISR+0x30>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa40:	f001 fa42 	bl	8010ec8 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa46:	4680      	mov	r8, r0
			xReturn = pdFAIL;
 800fa48:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10d      	bne.n	800fa6a <xQueueReceiveFromISR+0x3e>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800fa4e:	4640      	mov	r0, r8
 800fa50:	f001 fa40 	bl	8010ed4 <vClearInterruptMaskFromISR>
}
 800fa54:	0028      	movs	r0, r5
 800fa56:	bc80      	pop	{r7}
 800fa58:	46b8      	mov	r8, r7
 800fa5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d0ee      	beq.n	800fa40 <xQueueReceiveFromISR+0x14>
 800fa62:	b672      	cpsid	i
 800fa64:	e7fe      	b.n	800fa64 <xQueueReceiveFromISR+0x38>
	configASSERT( pxQueue );
 800fa66:	b672      	cpsid	i
 800fa68:	e7fe      	b.n	800fa68 <xQueueReceiveFromISR+0x3c>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fa6a:	0039      	movs	r1, r7
 800fa6c:	0020      	movs	r0, r4
 800fa6e:	f7ff fd4d 	bl	800f50c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800fa72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fa74:	3b01      	subs	r3, #1
 800fa76:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800fa78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	d004      	beq.n	800fa88 <xQueueReceiveFromISR+0x5c>
				++( pxQueue->xRxLock );
 800fa7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa80:	3301      	adds	r3, #1
 800fa82:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800fa84:	2501      	movs	r5, #1
 800fa86:	e7e2      	b.n	800fa4e <xQueueReceiveFromISR+0x22>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa88:	6923      	ldr	r3, [r4, #16]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d0fa      	beq.n	800fa84 <xQueueReceiveFromISR+0x58>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa8e:	0020      	movs	r0, r4
 800fa90:	3010      	adds	r0, #16
 800fa92:	f000 fd45 	bl	8010520 <xTaskRemoveFromEventList>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d0f4      	beq.n	800fa84 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 800fa9a:	2e00      	cmp	r6, #0
 800fa9c:	d0f2      	beq.n	800fa84 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fa9e:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800faa0:	2501      	movs	r5, #1
							*pxHigherPriorityTaskWoken = pdTRUE;
 800faa2:	6033      	str	r3, [r6, #0]
 800faa4:	e7d3      	b.n	800fa4e <xQueueReceiveFromISR+0x22>
 800faa6:	46c0      	nop			; (mov r8, r8)

0800faa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800faa8:	b530      	push	{r4, r5, lr}
 800faaa:	4c08      	ldr	r4, [pc, #32]	; (800facc <vQueueAddToRegistry+0x24>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800faac:	2300      	movs	r3, #0
 800faae:	0022      	movs	r2, r4
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fab0:	6815      	ldr	r5, [r2, #0]
 800fab2:	2d00      	cmp	r5, #0
 800fab4:	d004      	beq.n	800fac0 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fab6:	3301      	adds	r3, #1
 800fab8:	3208      	adds	r2, #8
 800faba:	2b08      	cmp	r3, #8
 800fabc:	d1f8      	bne.n	800fab0 <vQueueAddToRegistry+0x8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fabe:	bd30      	pop	{r4, r5, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fac0:	00db      	lsls	r3, r3, #3
 800fac2:	50e1      	str	r1, [r4, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fac4:	18e3      	adds	r3, r4, r3
 800fac6:	6058      	str	r0, [r3, #4]
				break;
 800fac8:	e7f9      	b.n	800fabe <vQueueAddToRegistry+0x16>
 800faca:	46c0      	nop			; (mov r8, r8)
 800facc:	20006f9c 	.word	0x20006f9c

0800fad0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800fad0:	b570      	push	{r4, r5, r6, lr}
 800fad2:	0004      	movs	r4, r0
 800fad4:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fad6:	f001 f9dd 	bl	8010e94 <vPortEnterCritical>
 800fada:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fadc:	3301      	adds	r3, #1
 800fade:	d101      	bne.n	800fae4 <vQueueWaitForMessageRestricted+0x14>
 800fae0:	2300      	movs	r3, #0
 800fae2:	6463      	str	r3, [r4, #68]	; 0x44
 800fae4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fae6:	3301      	adds	r3, #1
 800fae8:	d101      	bne.n	800faee <vQueueWaitForMessageRestricted+0x1e>
 800faea:	2300      	movs	r3, #0
 800faec:	64a3      	str	r3, [r4, #72]	; 0x48
 800faee:	f001 f9dd 	bl	8010eac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800faf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d003      	beq.n	800fb00 <vQueueWaitForMessageRestricted+0x30>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800faf8:	0020      	movs	r0, r4
 800fafa:	f7ff fd19 	bl	800f530 <prvUnlockQueue>
	}
 800fafe:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fb00:	0020      	movs	r0, r4
 800fb02:	0029      	movs	r1, r5
 800fb04:	3024      	adds	r0, #36	; 0x24
 800fb06:	f000 fcf1 	bl	80104ec <vTaskPlaceOnEventListRestricted>
 800fb0a:	e7f5      	b.n	800faf8 <vQueueWaitForMessageRestricted+0x28>

0800fb0c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800fb0c:	b510      	push	{r4, lr}
 800fb0e:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800fb10:	f005 fce5 	bl	80154de <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800fb14:	0020      	movs	r0, r4
 800fb16:	f7f0 faff 	bl	8000118 <strlen>
 800fb1a:	280b      	cmp	r0, #11
 800fb1c:	d808      	bhi.n	800fb30 <prvWriteNameToBuffer+0x24>
 800fb1e:	0021      	movs	r1, r4
		{
			pcBuffer[ x ] = ' ';
 800fb20:	2220      	movs	r2, #32
 800fb22:	1823      	adds	r3, r4, r0
 800fb24:	310c      	adds	r1, #12
 800fb26:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800fb28:	3301      	adds	r3, #1
 800fb2a:	428b      	cmp	r3, r1
 800fb2c:	d1fb      	bne.n	800fb26 <prvWriteNameToBuffer+0x1a>
 800fb2e:	200c      	movs	r0, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800fb30:	2300      	movs	r3, #0
 800fb32:	1820      	adds	r0, r4, r0
 800fb34:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800fb36:	bd10      	pop	{r4, pc}

0800fb38 <prvListTaskWithinSingleList.part.0>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800fb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb3a:	46d6      	mov	lr, sl
 800fb3c:	464f      	mov	r7, r9
 800fb3e:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800fb40:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800fb42:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800fb44:	685f      	ldr	r7, [r3, #4]
 800fb46:	2308      	movs	r3, #8
 800fb48:	469c      	mov	ip, r3
 800fb4a:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800fb4c:	0005      	movs	r5, r0
 800fb4e:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800fb50:	4567      	cmp	r7, ip
 800fb52:	d042      	beq.n	800fbda <prvListTaskWithinSingleList.part.0+0xa2>
 800fb54:	68fb      	ldr	r3, [r7, #12]
	UBaseType_t uxTask = 0;
 800fb56:	2000      	movs	r0, #0
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800fb58:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800fb5a:	2302      	movs	r3, #2
 800fb5c:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800fb5e:	687f      	ldr	r7, [r7, #4]
 800fb60:	604f      	str	r7, [r1, #4]
 800fb62:	45bc      	cmp	ip, r7
 800fb64:	d035      	beq.n	800fbd2 <prvListTaskWithinSingleList.part.0+0x9a>
 800fb66:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800fb68:	0033      	movs	r3, r6
 800fb6a:	3334      	adds	r3, #52	; 0x34
 800fb6c:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800fb6e:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800fb70:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800fb72:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800fb74:	4653      	mov	r3, sl
 800fb76:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800fb78:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800fb7a:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800fb7c:	4653      	mov	r3, sl
 800fb7e:	2b03      	cmp	r3, #3
 800fb80:	d018      	beq.n	800fbb4 <prvListTaskWithinSingleList.part.0+0x7c>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800fb82:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800fb84:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800fb86:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800fb88:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800fb8a:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fb8c:	7813      	ldrb	r3, [r2, #0]
 800fb8e:	2ba5      	cmp	r3, #165	; 0xa5
 800fb90:	d11d      	bne.n	800fbce <prvListTaskWithinSingleList.part.0+0x96>
	uint32_t ulCount = 0U;
 800fb92:	2300      	movs	r3, #0
			ulCount++;
 800fb94:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fb96:	5cd4      	ldrb	r4, [r2, r3]
 800fb98:	2ca5      	cmp	r4, #165	; 0xa5
 800fb9a:	d0fb      	beq.n	800fb94 <prvListTaskWithinSingleList.part.0+0x5c>
 800fb9c:	089b      	lsrs	r3, r3, #2
 800fb9e:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800fba0:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800fba2:	3001      	adds	r0, #1
			} while( pxNextTCB != pxFirstTCB );
 800fba4:	3520      	adds	r5, #32
 800fba6:	45b0      	cmp	r8, r6
 800fba8:	d1d9      	bne.n	800fb5e <prvListTaskWithinSingleList.part.0+0x26>
	}
 800fbaa:	bce0      	pop	{r5, r6, r7}
 800fbac:	46ba      	mov	sl, r7
 800fbae:	46b1      	mov	r9, r6
 800fbb0:	46a8      	mov	r8, r5
 800fbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800fbb4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d0e3      	beq.n	800fb82 <prvListTaskWithinSingleList.part.0+0x4a>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800fbba:	464b      	mov	r3, r9
 800fbbc:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800fbbe:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800fbc0:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800fbc2:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800fbc4:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800fbc6:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fbc8:	7813      	ldrb	r3, [r2, #0]
 800fbca:	2ba5      	cmp	r3, #165	; 0xa5
 800fbcc:	d0e1      	beq.n	800fb92 <prvListTaskWithinSingleList.part.0+0x5a>
 800fbce:	2300      	movs	r3, #0
 800fbd0:	e7e6      	b.n	800fba0 <prvListTaskWithinSingleList.part.0+0x68>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800fbd2:	4663      	mov	r3, ip
 800fbd4:	685f      	ldr	r7, [r3, #4]
 800fbd6:	604f      	str	r7, [r1, #4]
 800fbd8:	e7c5      	b.n	800fb66 <prvListTaskWithinSingleList.part.0+0x2e>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800fbda:	68cf      	ldr	r7, [r1, #12]
 800fbdc:	e7ba      	b.n	800fb54 <prvListTaskWithinSingleList.part.0+0x1c>
 800fbde:	46c0      	nop			; (mov r8, r8)

0800fbe0 <prvResetNextTaskUnblockTime.part.0>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fbe0:	4b03      	ldr	r3, [pc, #12]	; (800fbf0 <prvResetNextTaskUnblockTime.part.0+0x10>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	685a      	ldr	r2, [r3, #4]
 800fbea:	4b02      	ldr	r3, [pc, #8]	; (800fbf4 <prvResetNextTaskUnblockTime.part.0+0x14>)
 800fbec:	601a      	str	r2, [r3, #0]
}
 800fbee:	4770      	bx	lr
 800fbf0:	20001e4c 	.word	0x20001e4c
 800fbf4:	20000130 	.word	0x20000130

0800fbf8 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800fbf8:	4b0d      	ldr	r3, [pc, #52]	; (800fc30 <prvAddCurrentTaskToDelayedList+0x38>)
{
 800fbfa:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800fbfc:	681a      	ldr	r2, [r3, #0]
{
 800fbfe:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800fc00:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800fc02:	4a0c      	ldr	r2, [pc, #48]	; (800fc34 <prvAddCurrentTaskToDelayedList+0x3c>)
 800fc04:	6812      	ldr	r2, [r2, #0]
 800fc06:	4282      	cmp	r2, r0
 800fc08:	d906      	bls.n	800fc18 <prvAddCurrentTaskToDelayedList+0x20>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fc0a:	4a0b      	ldr	r2, [pc, #44]	; (800fc38 <prvAddCurrentTaskToDelayedList+0x40>)
 800fc0c:	6810      	ldr	r0, [r2, #0]
 800fc0e:	6819      	ldr	r1, [r3, #0]
 800fc10:	3104      	adds	r1, #4
 800fc12:	f7ff fc17 	bl	800f444 <vListInsert>
}
 800fc16:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fc18:	4a08      	ldr	r2, [pc, #32]	; (800fc3c <prvAddCurrentTaskToDelayedList+0x44>)
 800fc1a:	6810      	ldr	r0, [r2, #0]
 800fc1c:	6819      	ldr	r1, [r3, #0]
 800fc1e:	3104      	adds	r1, #4
 800fc20:	f7ff fc10 	bl	800f444 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800fc24:	4b06      	ldr	r3, [pc, #24]	; (800fc40 <prvAddCurrentTaskToDelayedList+0x48>)
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	4294      	cmp	r4, r2
 800fc2a:	d2f4      	bcs.n	800fc16 <prvAddCurrentTaskToDelayedList+0x1e>
			xNextTaskUnblockTime = xTimeToWake;
 800fc2c:	601c      	str	r4, [r3, #0]
}
 800fc2e:	e7f2      	b.n	800fc16 <prvAddCurrentTaskToDelayedList+0x1e>
 800fc30:	20001e48 	.word	0x20001e48
 800fc34:	20001f68 	.word	0x20001f68
 800fc38:	20001e50 	.word	0x20001e50
 800fc3c:	20001e4c 	.word	0x20001e4c
 800fc40:	20000130 	.word	0x20000130

0800fc44 <xTaskGenericCreate.part.0>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800fc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc46:	464f      	mov	r7, r9
 800fc48:	4646      	mov	r6, r8
 800fc4a:	46d6      	mov	lr, sl
 800fc4c:	b5c0      	push	{r6, r7, lr}
 800fc4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800fc50:	4680      	mov	r8, r0
 800fc52:	000e      	movs	r6, r1
 800fc54:	0015      	movs	r5, r2
 800fc56:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc58:	2f00      	cmp	r7, #0
 800fc5a:	d100      	bne.n	800fc5e <xTaskGenericCreate.part.0+0x1a>
 800fc5c:	e07c      	b.n	800fd58 <xTaskGenericCreate.part.0+0x114>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800fc5e:	2060      	movs	r0, #96	; 0x60
 800fc60:	f001 f998 	bl	8010f94 <pvPortMalloc>
 800fc64:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800fc66:	d100      	bne.n	800fc6a <xTaskGenericCreate.part.0+0x26>
 800fc68:	e091      	b.n	800fd8e <xTaskGenericCreate.part.0+0x14a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800fc6a:	00ad      	lsls	r5, r5, #2
 800fc6c:	002a      	movs	r2, r5
 800fc6e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->pxStack = pxStack;
 800fc70:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800fc72:	0038      	movs	r0, r7
 800fc74:	f005 f9cf 	bl	8015016 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800fc78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc7a:	0021      	movs	r1, r4
 800fc7c:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800fc7e:	2307      	movs	r3, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc80:	2200      	movs	r2, #0
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800fc82:	3d04      	subs	r5, #4
 800fc84:	4465      	add	r5, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800fc86:	439d      	bics	r5, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc88:	3134      	adds	r1, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800fc8a:	5cb3      	ldrb	r3, [r6, r2]
 800fc8c:	548b      	strb	r3, [r1, r2]
		if( pcName[ x ] == 0x00 )
 800fc8e:	5cb3      	ldrb	r3, [r6, r2]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d002      	beq.n	800fc9a <xTaskGenericCreate.part.0+0x56>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc94:	3201      	adds	r2, #1
 800fc96:	2a0d      	cmp	r2, #13
 800fc98:	d1f7      	bne.n	800fc8a <xTaskGenericCreate.part.0+0x46>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fc9a:	2340      	movs	r3, #64	; 0x40
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fca0:	9b08      	ldr	r3, [sp, #32]
 800fca2:	469a      	mov	sl, r3
 800fca4:	2b06      	cmp	r3, #6
 800fca6:	d854      	bhi.n	800fd52 <xTaskGenericCreate.part.0+0x10e>
	pxTCB->uxPriority = uxPriority;
 800fca8:	4653      	mov	r3, sl
		pxTCB->uxMutexesHeld = 0;
 800fcaa:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800fcac:	1d26      	adds	r6, r4, #4
	pxTCB->uxPriority = uxPriority;
 800fcae:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800fcb0:	64e3      	str	r3, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800fcb2:	0030      	movs	r0, r6
		pxTCB->uxMutexesHeld = 0;
 800fcb4:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800fcb6:	f7ff fbb5 	bl	800f424 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800fcba:	0020      	movs	r0, r4
 800fcbc:	3018      	adds	r0, #24
 800fcbe:	f7ff fbb1 	bl	800f424 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcc2:	4652      	mov	r2, sl
 800fcc4:	2307      	movs	r3, #7
 800fcc6:	1a9b      	subs	r3, r3, r2
 800fcc8:	61a3      	str	r3, [r4, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800fcca:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800fccc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800fcce:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800fcd0:	6567      	str	r7, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800fcd2:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fcd4:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800fcd6:	54e7      	strb	r7, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fcd8:	4641      	mov	r1, r8
 800fcda:	0028      	movs	r0, r5
 800fcdc:	f001 f892 	bl	8010e04 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800fce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fce2:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d000      	beq.n	800fcea <xTaskGenericCreate.part.0+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fce8:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800fcea:	f001 f8d3 	bl	8010e94 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800fcee:	4a45      	ldr	r2, [pc, #276]	; (800fe04 <xTaskGenericCreate.part.0+0x1c0>)
			if( pxCurrentTCB == NULL )
 800fcf0:	4f45      	ldr	r7, [pc, #276]	; (800fe08 <xTaskGenericCreate.part.0+0x1c4>)
			uxCurrentNumberOfTasks++;
 800fcf2:	6813      	ldr	r3, [r2, #0]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d03c      	beq.n	800fd78 <xTaskGenericCreate.part.0+0x134>
				if( xSchedulerRunning == pdFALSE )
 800fcfe:	4b43      	ldr	r3, [pc, #268]	; (800fe0c <xTaskGenericCreate.part.0+0x1c8>)
 800fd00:	4698      	mov	r8, r3
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d030      	beq.n	800fd6a <xTaskGenericCreate.part.0+0x126>
 800fd08:	4d41      	ldr	r5, [pc, #260]	; (800fe10 <xTaskGenericCreate.part.0+0x1cc>)
			uxTaskNumber++;
 800fd0a:	4a42      	ldr	r2, [pc, #264]	; (800fe14 <xTaskGenericCreate.part.0+0x1d0>)
 800fd0c:	6813      	ldr	r3, [r2, #0]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyList( pxNewTCB );
 800fd12:	4a41      	ldr	r2, [pc, #260]	; (800fe18 <xTaskGenericCreate.part.0+0x1d4>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fd14:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800fd16:	6811      	ldr	r1, [r2, #0]
 800fd18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fd1a:	428b      	cmp	r3, r1
 800fd1c:	d900      	bls.n	800fd20 <xTaskGenericCreate.part.0+0xdc>
 800fd1e:	6013      	str	r3, [r2, #0]
 800fd20:	0098      	lsls	r0, r3, #2
 800fd22:	18c0      	adds	r0, r0, r3
 800fd24:	0080      	lsls	r0, r0, #2
 800fd26:	0031      	movs	r1, r6
 800fd28:	1828      	adds	r0, r5, r0
 800fd2a:	f7ff fb7f 	bl	800f42c <vListInsertEnd>
		taskEXIT_CRITICAL();
 800fd2e:	f001 f8bd 	bl	8010eac <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800fd32:	4643      	mov	r3, r8
 800fd34:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800fd36:	2401      	movs	r4, #1
		if( xSchedulerRunning != pdFALSE )
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d004      	beq.n	800fd46 <xTaskGenericCreate.part.0+0x102>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	9a08      	ldr	r2, [sp, #32]
 800fd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d820      	bhi.n	800fd88 <xTaskGenericCreate.part.0+0x144>
}
 800fd46:	0020      	movs	r0, r4
 800fd48:	bce0      	pop	{r5, r6, r7}
 800fd4a:	46ba      	mov	sl, r7
 800fd4c:	46b1      	mov	r9, r6
 800fd4e:	46a8      	mov	r8, r5
 800fd50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd52:	2306      	movs	r3, #6
 800fd54:	469a      	mov	sl, r3
 800fd56:	e7a7      	b.n	800fca8 <xTaskGenericCreate.part.0+0x64>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd58:	0090      	lsls	r0, r2, #2
 800fd5a:	f001 f91b 	bl	8010f94 <pvPortMalloc>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fd5e:	2401      	movs	r4, #1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd60:	0007      	movs	r7, r0
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fd62:	4264      	negs	r4, r4
		if( pxStack != NULL )
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d0ee      	beq.n	800fd46 <xTaskGenericCreate.part.0+0x102>
 800fd68:	e779      	b.n	800fc5e <xTaskGenericCreate.part.0+0x1a>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	9a08      	ldr	r2, [sp, #32]
 800fd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d3c9      	bcc.n	800fd08 <xTaskGenericCreate.part.0+0xc4>
						pxCurrentTCB = pxNewTCB;
 800fd74:	603c      	str	r4, [r7, #0]
 800fd76:	e7c7      	b.n	800fd08 <xTaskGenericCreate.part.0+0xc4>
				pxCurrentTCB =  pxNewTCB;
 800fd78:	603c      	str	r4, [r7, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fd7a:	6813      	ldr	r3, [r2, #0]
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd7c:	4d24      	ldr	r5, [pc, #144]	; (800fe10 <xTaskGenericCreate.part.0+0x1cc>)
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	d00b      	beq.n	800fd9a <xTaskGenericCreate.part.0+0x156>
 800fd82:	4b22      	ldr	r3, [pc, #136]	; (800fe0c <xTaskGenericCreate.part.0+0x1c8>)
 800fd84:	4698      	mov	r8, r3
}
 800fd86:	e7c0      	b.n	800fd0a <xTaskGenericCreate.part.0+0xc6>
				taskYIELD_IF_USING_PREEMPTION();
 800fd88:	f001 f878 	bl	8010e7c <vPortYield>
 800fd8c:	e7db      	b.n	800fd46 <xTaskGenericCreate.part.0+0x102>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fd8e:	2401      	movs	r4, #1
				vPortFree( pxStack );
 800fd90:	0038      	movs	r0, r7
 800fd92:	f001 f989 	bl	80110a8 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fd96:	4264      	negs	r4, r4
 800fd98:	e7d5      	b.n	800fd46 <xTaskGenericCreate.part.0+0x102>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd9a:	0028      	movs	r0, r5
 800fd9c:	f7ff fb36 	bl	800f40c <vListInitialise>
 800fda0:	0028      	movs	r0, r5
 800fda2:	3014      	adds	r0, #20
 800fda4:	f7ff fb32 	bl	800f40c <vListInitialise>
 800fda8:	0028      	movs	r0, r5
 800fdaa:	3028      	adds	r0, #40	; 0x28
 800fdac:	f7ff fb2e 	bl	800f40c <vListInitialise>
 800fdb0:	0028      	movs	r0, r5
 800fdb2:	303c      	adds	r0, #60	; 0x3c
 800fdb4:	f7ff fb2a 	bl	800f40c <vListInitialise>
 800fdb8:	0028      	movs	r0, r5
 800fdba:	3050      	adds	r0, #80	; 0x50
 800fdbc:	f7ff fb26 	bl	800f40c <vListInitialise>
 800fdc0:	0028      	movs	r0, r5
 800fdc2:	3064      	adds	r0, #100	; 0x64
 800fdc4:	f7ff fb22 	bl	800f40c <vListInitialise>
 800fdc8:	0028      	movs	r0, r5
 800fdca:	3078      	adds	r0, #120	; 0x78
 800fdcc:	f7ff fb1e 	bl	800f40c <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 800fdd0:	4b12      	ldr	r3, [pc, #72]	; (800fe1c <xTaskGenericCreate.part.0+0x1d8>)
 800fdd2:	4699      	mov	r9, r3
 800fdd4:	0018      	movs	r0, r3
 800fdd6:	f7ff fb19 	bl	800f40c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fdda:	4b11      	ldr	r3, [pc, #68]	; (800fe20 <xTaskGenericCreate.part.0+0x1dc>)
 800fddc:	0018      	movs	r0, r3
 800fdde:	4698      	mov	r8, r3
 800fde0:	f7ff fb14 	bl	800f40c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fde4:	480f      	ldr	r0, [pc, #60]	; (800fe24 <xTaskGenericCreate.part.0+0x1e0>)
 800fde6:	f7ff fb11 	bl	800f40c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800fdea:	480f      	ldr	r0, [pc, #60]	; (800fe28 <xTaskGenericCreate.part.0+0x1e4>)
 800fdec:	f7ff fb0e 	bl	800f40c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800fdf0:	480e      	ldr	r0, [pc, #56]	; (800fe2c <xTaskGenericCreate.part.0+0x1e8>)
 800fdf2:	f7ff fb0b 	bl	800f40c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800fdf6:	464a      	mov	r2, r9
 800fdf8:	4b0d      	ldr	r3, [pc, #52]	; (800fe30 <xTaskGenericCreate.part.0+0x1ec>)
 800fdfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fdfc:	4642      	mov	r2, r8
 800fdfe:	4b0d      	ldr	r3, [pc, #52]	; (800fe34 <xTaskGenericCreate.part.0+0x1f0>)
 800fe00:	601a      	str	r2, [r3, #0]
 800fe02:	e7be      	b.n	800fd82 <xTaskGenericCreate.part.0+0x13e>
 800fe04:	20001ee4 	.word	0x20001ee4
 800fe08:	20001e48 	.word	0x20001e48
 800fe0c:	20001f3c 	.word	0x20001f3c
 800fe10:	20001e54 	.word	0x20001e54
 800fe14:	20001ef0 	.word	0x20001ef0
 800fe18:	20001ef8 	.word	0x20001ef8
 800fe1c:	20001efc 	.word	0x20001efc
 800fe20:	20001f10 	.word	0x20001f10
 800fe24:	20001f28 	.word	0x20001f28
 800fe28:	20001f54 	.word	0x20001f54
 800fe2c:	20001f40 	.word	0x20001f40
 800fe30:	20001e4c 	.word	0x20001e4c
 800fe34:	20001e50 	.word	0x20001e50

0800fe38 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 800fe38:	2200      	movs	r2, #0
 800fe3a:	4b2b      	ldr	r3, [pc, #172]	; (800fee8 <vTaskSwitchContext.part.0+0xb0>)
void vTaskSwitchContext( void )
 800fe3c:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
 800fe3e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fe40:	f7f8 fc64 	bl	800870c <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fe44:	4a29      	ldr	r2, [pc, #164]	; (800feec <vTaskSwitchContext.part.0+0xb4>)
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fe46:	4c2a      	ldr	r4, [pc, #168]	; (800fef0 <vTaskSwitchContext.part.0+0xb8>)
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fe48:	6813      	ldr	r3, [r2, #0]
 800fe4a:	4298      	cmp	r0, r3
 800fe4c:	d904      	bls.n	800fe58 <vTaskSwitchContext.part.0+0x20>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fe4e:	6821      	ldr	r1, [r4, #0]
 800fe50:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fe52:	1aeb      	subs	r3, r5, r3
 800fe54:	181b      	adds	r3, r3, r0
 800fe56:	654b      	str	r3, [r1, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800fe58:	6010      	str	r0, [r2, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fe5a:	6822      	ldr	r2, [r4, #0]
 800fe5c:	6823      	ldr	r3, [r4, #0]
 800fe5e:	6812      	ldr	r2, [r2, #0]
 800fe60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d927      	bls.n	800feb6 <vTaskSwitchContext.part.0+0x7e>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fe66:	6823      	ldr	r3, [r4, #0]
 800fe68:	2214      	movs	r2, #20
 800fe6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fe6c:	4921      	ldr	r1, [pc, #132]	; (800fef4 <vTaskSwitchContext.part.0+0xbc>)
 800fe6e:	f005 f8bb 	bl	8014fe8 <memcmp>
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d12c      	bne.n	800fed0 <vTaskSwitchContext.part.0+0x98>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fe76:	4a20      	ldr	r2, [pc, #128]	; (800fef8 <vTaskSwitchContext.part.0+0xc0>)
 800fe78:	4820      	ldr	r0, [pc, #128]	; (800fefc <vTaskSwitchContext.part.0+0xc4>)
 800fe7a:	6813      	ldr	r3, [r2, #0]
 800fe7c:	e006      	b.n	800fe8c <vTaskSwitchContext.part.0+0x54>
 800fe7e:	6813      	ldr	r3, [r2, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d02b      	beq.n	800fedc <vTaskSwitchContext.part.0+0xa4>
 800fe84:	6813      	ldr	r3, [r2, #0]
 800fe86:	3b01      	subs	r3, #1
 800fe88:	6013      	str	r3, [r2, #0]
 800fe8a:	6813      	ldr	r3, [r2, #0]
 800fe8c:	0099      	lsls	r1, r3, #2
 800fe8e:	18c9      	adds	r1, r1, r3
 800fe90:	0089      	lsls	r1, r1, #2
 800fe92:	5843      	ldr	r3, [r0, r1]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d0f2      	beq.n	800fe7e <vTaskSwitchContext.part.0+0x46>
 800fe98:	6812      	ldr	r2, [r2, #0]
 800fe9a:	0093      	lsls	r3, r2, #2
 800fe9c:	189b      	adds	r3, r3, r2
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	18c1      	adds	r1, r0, r3
 800fea2:	684a      	ldr	r2, [r1, #4]
 800fea4:	3308      	adds	r3, #8
 800fea6:	6852      	ldr	r2, [r2, #4]
 800fea8:	18c3      	adds	r3, r0, r3
 800feaa:	604a      	str	r2, [r1, #4]
 800feac:	429a      	cmp	r2, r3
 800feae:	d017      	beq.n	800fee0 <vTaskSwitchContext.part.0+0xa8>
 800feb0:	68d3      	ldr	r3, [r2, #12]
 800feb2:	6023      	str	r3, [r4, #0]
}
 800feb4:	bd70      	pop	{r4, r5, r6, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800feb6:	6820      	ldr	r0, [r4, #0]
 800feb8:	6821      	ldr	r1, [r4, #0]
 800feba:	3134      	adds	r1, #52	; 0x34
 800febc:	f7fe f846 	bl	800df4c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fec0:	6823      	ldr	r3, [r4, #0]
 800fec2:	2214      	movs	r2, #20
 800fec4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fec6:	490b      	ldr	r1, [pc, #44]	; (800fef4 <vTaskSwitchContext.part.0+0xbc>)
 800fec8:	f005 f88e 	bl	8014fe8 <memcmp>
 800fecc:	2800      	cmp	r0, #0
 800fece:	d0d2      	beq.n	800fe76 <vTaskSwitchContext.part.0+0x3e>
 800fed0:	6820      	ldr	r0, [r4, #0]
 800fed2:	6821      	ldr	r1, [r4, #0]
 800fed4:	3134      	adds	r1, #52	; 0x34
 800fed6:	f7fe f839 	bl	800df4c <vApplicationStackOverflowHook>
 800feda:	e7cc      	b.n	800fe76 <vTaskSwitchContext.part.0+0x3e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fedc:	b672      	cpsid	i
 800fede:	e7fe      	b.n	800fede <vTaskSwitchContext.part.0+0xa6>
 800fee0:	6852      	ldr	r2, [r2, #4]
 800fee2:	604a      	str	r2, [r1, #4]
 800fee4:	e7e4      	b.n	800feb0 <vTaskSwitchContext.part.0+0x78>
 800fee6:	46c0      	nop			; (mov r8, r8)
 800fee8:	20001f6c 	.word	0x20001f6c
 800feec:	20001ee0 	.word	0x20001ee0
 800fef0:	20001e48 	.word	0x20001e48
 800fef4:	0801e4c8 	.word	0x0801e4c8
 800fef8:	20001ef8 	.word	0x20001ef8
 800fefc:	20001e54 	.word	0x20001e54

0800ff00 <xTaskGenericCreate>:
{
 800ff00:	b530      	push	{r4, r5, lr}
 800ff02:	b085      	sub	sp, #20
 800ff04:	9c08      	ldr	r4, [sp, #32]
	configASSERT( pxTaskCode );
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d003      	beq.n	800ff12 <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800ff0a:	2c06      	cmp	r4, #6
 800ff0c:	d903      	bls.n	800ff16 <xTaskGenericCreate+0x16>
 800ff0e:	b672      	cpsid	i
 800ff10:	e7fe      	b.n	800ff10 <xTaskGenericCreate+0x10>
	configASSERT( pxTaskCode );
 800ff12:	b672      	cpsid	i
 800ff14:	e7fe      	b.n	800ff14 <xTaskGenericCreate+0x14>
 800ff16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ff18:	9400      	str	r4, [sp, #0]
 800ff1a:	9502      	str	r5, [sp, #8]
 800ff1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ff1e:	9501      	str	r5, [sp, #4]
 800ff20:	f7ff fe90 	bl	800fc44 <xTaskGenericCreate.part.0>
}
 800ff24:	b005      	add	sp, #20
 800ff26:	bd30      	pop	{r4, r5, pc}

0800ff28 <uxTaskPriorityGet>:
	{
 800ff28:	b510      	push	{r4, lr}
 800ff2a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800ff2c:	f000 ffb2 	bl	8010e94 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ff30:	2c00      	cmp	r4, #0
 800ff32:	d004      	beq.n	800ff3e <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800ff34:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800ff36:	f000 ffb9 	bl	8010eac <vPortExitCritical>
	}
 800ff3a:	0020      	movs	r0, r4
 800ff3c:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800ff3e:	4b01      	ldr	r3, [pc, #4]	; (800ff44 <uxTaskPriorityGet+0x1c>)
 800ff40:	681c      	ldr	r4, [r3, #0]
 800ff42:	e7f7      	b.n	800ff34 <uxTaskPriorityGet+0xc>
 800ff44:	20001e48 	.word	0x20001e48

0800ff48 <vTaskPrioritySet>:
	{
 800ff48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff4a:	0004      	movs	r4, r0
 800ff4c:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800ff4e:	2906      	cmp	r1, #6
 800ff50:	d901      	bls.n	800ff56 <vTaskPrioritySet+0xe>
 800ff52:	b672      	cpsid	i
 800ff54:	e7fe      	b.n	800ff54 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800ff56:	f000 ff9d 	bl	8010e94 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ff5a:	2c00      	cmp	r4, #0
 800ff5c:	d020      	beq.n	800ffa0 <vTaskPrioritySet+0x58>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800ff5e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800ff60:	428d      	cmp	r5, r1
 800ff62:	d01a      	beq.n	800ff9a <vTaskPrioritySet+0x52>
					if( pxTCB != pxCurrentTCB )
 800ff64:	4b20      	ldr	r3, [pc, #128]	; (800ffe8 <vTaskPrioritySet+0xa0>)
				if( uxNewPriority > uxCurrentBasePriority )
 800ff66:	d81e      	bhi.n	800ffa6 <vTaskPrioritySet+0x5e>
				else if( pxTCB == pxCurrentTCB )
 800ff68:	681e      	ldr	r6, [r3, #0]
 800ff6a:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800ff6c:	4273      	negs	r3, r6
 800ff6e:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ff70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ff72:	4291      	cmp	r1, r2
 800ff74:	d100      	bne.n	800ff78 <vTaskPrioritySet+0x30>
						pxTCB->uxPriority = uxNewPriority;
 800ff76:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff78:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800ff7a:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	db02      	blt.n	800ff86 <vTaskPrioritySet+0x3e>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff80:	2307      	movs	r3, #7
 800ff82:	1b5d      	subs	r5, r3, r5
 800ff84:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ff86:	0093      	lsls	r3, r2, #2
 800ff88:	189b      	adds	r3, r3, r2
 800ff8a:	4d18      	ldr	r5, [pc, #96]	; (800ffec <vTaskPrioritySet+0xa4>)
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	6962      	ldr	r2, [r4, #20]
 800ff90:	18eb      	adds	r3, r5, r3
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d010      	beq.n	800ffb8 <vTaskPrioritySet+0x70>
				if( xYieldRequired == pdTRUE )
 800ff96:	2e01      	cmp	r6, #1
 800ff98:	d022      	beq.n	800ffe0 <vTaskPrioritySet+0x98>
		taskEXIT_CRITICAL();
 800ff9a:	f000 ff87 	bl	8010eac <vPortExitCritical>
	}
 800ff9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800ffa0:	4b11      	ldr	r3, [pc, #68]	; (800ffe8 <vTaskPrioritySet+0xa0>)
 800ffa2:	681c      	ldr	r4, [r3, #0]
 800ffa4:	e7db      	b.n	800ff5e <vTaskPrioritySet+0x16>
					if( pxTCB != pxCurrentTCB )
 800ffa6:	681a      	ldr	r2, [r3, #0]
 800ffa8:	42a2      	cmp	r2, r4
 800ffaa:	d017      	beq.n	800ffdc <vTaskPrioritySet+0x94>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ffac:	2600      	movs	r6, #0
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb2:	429d      	cmp	r5, r3
 800ffb4:	4176      	adcs	r6, r6
 800ffb6:	e7db      	b.n	800ff70 <vTaskPrioritySet+0x28>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ffb8:	1d27      	adds	r7, r4, #4
 800ffba:	0038      	movs	r0, r7
 800ffbc:	f7ff fa5a 	bl	800f474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ffc0:	4a0b      	ldr	r2, [pc, #44]	; (800fff0 <vTaskPrioritySet+0xa8>)
 800ffc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ffc4:	6811      	ldr	r1, [r2, #0]
 800ffc6:	428b      	cmp	r3, r1
 800ffc8:	d900      	bls.n	800ffcc <vTaskPrioritySet+0x84>
 800ffca:	6013      	str	r3, [r2, #0]
 800ffcc:	0098      	lsls	r0, r3, #2
 800ffce:	18c0      	adds	r0, r0, r3
 800ffd0:	0080      	lsls	r0, r0, #2
 800ffd2:	0039      	movs	r1, r7
 800ffd4:	1828      	adds	r0, r5, r0
 800ffd6:	f7ff fa29 	bl	800f42c <vListInsertEnd>
 800ffda:	e7dc      	b.n	800ff96 <vTaskPrioritySet+0x4e>
	BaseType_t xYieldRequired = pdFALSE;
 800ffdc:	2600      	movs	r6, #0
 800ffde:	e7c7      	b.n	800ff70 <vTaskPrioritySet+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800ffe0:	f000 ff4c 	bl	8010e7c <vPortYield>
 800ffe4:	e7d9      	b.n	800ff9a <vTaskPrioritySet+0x52>
 800ffe6:	46c0      	nop			; (mov r8, r8)
 800ffe8:	20001e48 	.word	0x20001e48
 800ffec:	20001e54 	.word	0x20001e54
 800fff0:	20001ef8 	.word	0x20001ef8

0800fff4 <vTaskStartScheduler>:
{
 800fff4:	b510      	push	{r4, lr}
 800fff6:	2400      	movs	r4, #0
 800fff8:	b084      	sub	sp, #16
 800fffa:	2300      	movs	r3, #0
 800fffc:	22a0      	movs	r2, #160	; 0xa0
 800fffe:	490e      	ldr	r1, [pc, #56]	; (8010038 <vTaskStartScheduler+0x44>)
 8010000:	480e      	ldr	r0, [pc, #56]	; (801003c <vTaskStartScheduler+0x48>)
 8010002:	9402      	str	r4, [sp, #8]
 8010004:	9401      	str	r4, [sp, #4]
 8010006:	9400      	str	r4, [sp, #0]
 8010008:	f7ff fe1c 	bl	800fc44 <xTaskGenericCreate.part.0>
		if( xReturn == pdPASS )
 801000c:	2801      	cmp	r0, #1
 801000e:	d003      	beq.n	8010018 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 8010010:	2800      	cmp	r0, #0
 8010012:	d10e      	bne.n	8010032 <vTaskStartScheduler+0x3e>
 8010014:	b672      	cpsid	i
 8010016:	e7fe      	b.n	8010016 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 8010018:	f000 fd50 	bl	8010abc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 801001c:	2801      	cmp	r0, #1
 801001e:	d1f7      	bne.n	8010010 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 8010020:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 8010022:	4b07      	ldr	r3, [pc, #28]	; (8010040 <vTaskStartScheduler+0x4c>)
 8010024:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010026:	4b07      	ldr	r3, [pc, #28]	; (8010044 <vTaskStartScheduler+0x50>)
 8010028:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801002a:	f7f8 fb5f 	bl	80086ec <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 801002e:	f000 fefb 	bl	8010e28 <xPortStartScheduler>
}
 8010032:	b004      	add	sp, #16
 8010034:	bd10      	pop	{r4, pc}
 8010036:	46c0      	nop			; (mov r8, r8)
 8010038:	0801e494 	.word	0x0801e494
 801003c:	0801031d 	.word	0x0801031d
 8010040:	20001f3c 	.word	0x20001f3c
 8010044:	20001f68 	.word	0x20001f68

08010048 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010048:	4a02      	ldr	r2, [pc, #8]	; (8010054 <vTaskSuspendAll+0xc>)
 801004a:	6813      	ldr	r3, [r2, #0]
 801004c:	3301      	adds	r3, #1
 801004e:	6013      	str	r3, [r2, #0]
}
 8010050:	4770      	bx	lr
 8010052:	46c0      	nop			; (mov r8, r8)
 8010054:	20001eec 	.word	0x20001eec

08010058 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010058:	4b01      	ldr	r3, [pc, #4]	; (8010060 <xTaskGetTickCount+0x8>)
 801005a:	6818      	ldr	r0, [r3, #0]
}
 801005c:	4770      	bx	lr
 801005e:	46c0      	nop			; (mov r8, r8)
 8010060:	20001f68 	.word	0x20001f68

08010064 <xTaskGetTickCountFromISR>:
 8010064:	4b01      	ldr	r3, [pc, #4]	; (801006c <xTaskGetTickCountFromISR+0x8>)
 8010066:	6818      	ldr	r0, [r3, #0]
 8010068:	4770      	bx	lr
 801006a:	46c0      	nop			; (mov r8, r8)
 801006c:	20001f68 	.word	0x20001f68

08010070 <xTaskIncrementTick>:
{
 8010070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010072:	46de      	mov	lr, fp
 8010074:	4657      	mov	r7, sl
 8010076:	464e      	mov	r6, r9
 8010078:	4645      	mov	r5, r8
 801007a:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801007c:	4b48      	ldr	r3, [pc, #288]	; (80101a0 <xTaskIncrementTick+0x130>)
{
 801007e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d149      	bne.n	801011a <xTaskIncrementTick+0xaa>
		++xTickCount;
 8010086:	4b47      	ldr	r3, [pc, #284]	; (80101a4 <xTaskIncrementTick+0x134>)
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	3201      	adds	r2, #1
 801008c:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	9301      	str	r3, [sp, #4]
			if( xConstTickCount == ( TickType_t ) 0U )
 8010092:	2b00      	cmp	r3, #0
 8010094:	d053      	beq.n	801013e <xTaskIncrementTick+0xce>
 8010096:	4d44      	ldr	r5, [pc, #272]	; (80101a8 <xTaskIncrementTick+0x138>)
			if( xConstTickCount >= xNextTaskUnblockTime )
 8010098:	682b      	ldr	r3, [r5, #0]
 801009a:	9a01      	ldr	r2, [sp, #4]
 801009c:	4293      	cmp	r3, r2
 801009e:	d864      	bhi.n	801016a <xTaskIncrementTick+0xfa>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100a0:	4b42      	ldr	r3, [pc, #264]	; (80101ac <xTaskIncrementTick+0x13c>)
BaseType_t xSwitchRequired = pdFALSE;
 80100a2:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100a4:	4699      	mov	r9, r3
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4f41      	ldr	r7, [pc, #260]	; (80101b0 <xTaskIncrementTick+0x140>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d06d      	beq.n	801018c <xTaskIncrementTick+0x11c>
 80100b0:	4b40      	ldr	r3, [pc, #256]	; (80101b4 <xTaskIncrementTick+0x144>)
 80100b2:	4698      	mov	r8, r3
						prvAddTaskToReadyList( pxTCB );
 80100b4:	4b40      	ldr	r3, [pc, #256]	; (80101b8 <xTaskIncrementTick+0x148>)
 80100b6:	469a      	mov	sl, r3
 80100b8:	e025      	b.n	8010106 <xTaskIncrementTick+0x96>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80100ba:	1d33      	adds	r3, r6, #4
 80100bc:	0018      	movs	r0, r3
 80100be:	469b      	mov	fp, r3
 80100c0:	f7ff f9d8 	bl	800f474 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80100c4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d003      	beq.n	80100d2 <xTaskIncrementTick+0x62>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100ca:	0030      	movs	r0, r6
 80100cc:	3018      	adds	r0, #24
 80100ce:	f7ff f9d1 	bl	800f474 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80100d2:	4652      	mov	r2, sl
 80100d4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80100d6:	6812      	ldr	r2, [r2, #0]
 80100d8:	4293      	cmp	r3, r2
 80100da:	d901      	bls.n	80100e0 <xTaskIncrementTick+0x70>
 80100dc:	4652      	mov	r2, sl
 80100de:	6013      	str	r3, [r2, #0]
 80100e0:	0098      	lsls	r0, r3, #2
 80100e2:	18c0      	adds	r0, r0, r3
 80100e4:	0080      	lsls	r0, r0, #2
 80100e6:	4659      	mov	r1, fp
 80100e8:	1838      	adds	r0, r7, r0
 80100ea:	f7ff f99f 	bl	800f42c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80100ee:	4643      	mov	r3, r8
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80100f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d300      	bcc.n	80100fc <xTaskIncrementTick+0x8c>
								xSwitchRequired = pdTRUE;
 80100fa:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100fc:	464b      	mov	r3, r9
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d044      	beq.n	8010190 <xTaskIncrementTick+0x120>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010106:	464b      	mov	r3, r9
 8010108:	681b      	ldr	r3, [r3, #0]
						if( xConstTickCount < xItemValue )
 801010a:	9a01      	ldr	r2, [sp, #4]
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801010c:	68db      	ldr	r3, [r3, #12]
 801010e:	68de      	ldr	r6, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8010110:	6873      	ldr	r3, [r6, #4]
						if( xConstTickCount < xItemValue )
 8010112:	429a      	cmp	r2, r3
 8010114:	d2d1      	bcs.n	80100ba <xTaskIncrementTick+0x4a>
							xNextTaskUnblockTime = xItemValue;
 8010116:	602b      	str	r3, [r5, #0]
							break;
 8010118:	e02b      	b.n	8010172 <xTaskIncrementTick+0x102>
BaseType_t xSwitchRequired = pdFALSE;
 801011a:	2400      	movs	r4, #0
		++uxPendedTicks;
 801011c:	4a27      	ldr	r2, [pc, #156]	; (80101bc <xTaskIncrementTick+0x14c>)
 801011e:	6813      	ldr	r3, [r2, #0]
 8010120:	3301      	adds	r3, #1
 8010122:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8010124:	4b26      	ldr	r3, [pc, #152]	; (80101c0 <xTaskIncrementTick+0x150>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d000      	beq.n	801012e <xTaskIncrementTick+0xbe>
			xSwitchRequired = pdTRUE;
 801012c:	2401      	movs	r4, #1
}
 801012e:	0020      	movs	r0, r4
 8010130:	b003      	add	sp, #12
 8010132:	bcf0      	pop	{r4, r5, r6, r7}
 8010134:	46bb      	mov	fp, r7
 8010136:	46b2      	mov	sl, r6
 8010138:	46a9      	mov	r9, r5
 801013a:	46a0      	mov	r8, r4
 801013c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 801013e:	4b1b      	ldr	r3, [pc, #108]	; (80101ac <xTaskIncrementTick+0x13c>)
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	6812      	ldr	r2, [r2, #0]
 8010144:	2a00      	cmp	r2, #0
 8010146:	d11f      	bne.n	8010188 <xTaskIncrementTick+0x118>
 8010148:	4a1e      	ldr	r2, [pc, #120]	; (80101c4 <xTaskIncrementTick+0x154>)
 801014a:	6819      	ldr	r1, [r3, #0]
 801014c:	6810      	ldr	r0, [r2, #0]
 801014e:	6018      	str	r0, [r3, #0]
 8010150:	6011      	str	r1, [r2, #0]
 8010152:	491d      	ldr	r1, [pc, #116]	; (80101c8 <xTaskIncrementTick+0x158>)
 8010154:	680a      	ldr	r2, [r1, #0]
 8010156:	3201      	adds	r2, #1
 8010158:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d11a      	bne.n	8010198 <xTaskIncrementTick+0x128>
		xNextTaskUnblockTime = portMAX_DELAY;
 8010162:	4d11      	ldr	r5, [pc, #68]	; (80101a8 <xTaskIncrementTick+0x138>)
 8010164:	3b01      	subs	r3, #1
 8010166:	602b      	str	r3, [r5, #0]
 8010168:	e796      	b.n	8010098 <xTaskIncrementTick+0x28>
 801016a:	4b12      	ldr	r3, [pc, #72]	; (80101b4 <xTaskIncrementTick+0x144>)
BaseType_t xSwitchRequired = pdFALSE;
 801016c:	2400      	movs	r4, #0
 801016e:	4698      	mov	r8, r3
 8010170:	4f0f      	ldr	r7, [pc, #60]	; (80101b0 <xTaskIncrementTick+0x140>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010172:	4643      	mov	r3, r8
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010178:	0093      	lsls	r3, r2, #2
 801017a:	189b      	adds	r3, r3, r2
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	58fb      	ldr	r3, [r7, r3]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d9cf      	bls.n	8010124 <xTaskIncrementTick+0xb4>
				xSwitchRequired = pdTRUE;
 8010184:	2401      	movs	r4, #1
 8010186:	e7cd      	b.n	8010124 <xTaskIncrementTick+0xb4>
				taskSWITCH_DELAYED_LISTS();
 8010188:	b672      	cpsid	i
 801018a:	e7fe      	b.n	801018a <xTaskIncrementTick+0x11a>
 801018c:	4b09      	ldr	r3, [pc, #36]	; (80101b4 <xTaskIncrementTick+0x144>)
 801018e:	4698      	mov	r8, r3
						xNextTaskUnblockTime = portMAX_DELAY;
 8010190:	2301      	movs	r3, #1
 8010192:	425b      	negs	r3, r3
 8010194:	602b      	str	r3, [r5, #0]
						break;
 8010196:	e7ec      	b.n	8010172 <xTaskIncrementTick+0x102>
 8010198:	f7ff fd22 	bl	800fbe0 <prvResetNextTaskUnblockTime.part.0>
 801019c:	e77b      	b.n	8010096 <xTaskIncrementTick+0x26>
 801019e:	46c0      	nop			; (mov r8, r8)
 80101a0:	20001eec 	.word	0x20001eec
 80101a4:	20001f68 	.word	0x20001f68
 80101a8:	20000130 	.word	0x20000130
 80101ac:	20001e4c 	.word	0x20001e4c
 80101b0:	20001e54 	.word	0x20001e54
 80101b4:	20001e48 	.word	0x20001e48
 80101b8:	20001ef8 	.word	0x20001ef8
 80101bc:	20001ee8 	.word	0x20001ee8
 80101c0:	20001f6c 	.word	0x20001f6c
 80101c4:	20001e50 	.word	0x20001e50
 80101c8:	20001f24 	.word	0x20001f24

080101cc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80101cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ce:	46d6      	mov	lr, sl
 80101d0:	464f      	mov	r7, r9
 80101d2:	4646      	mov	r6, r8
 80101d4:	b5c0      	push	{r6, r7, lr}
	taskENTER_CRITICAL();
 80101d6:	f000 fe5d 	bl	8010e94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80101da:	4b2d      	ldr	r3, [pc, #180]	; (8010290 <xTaskResumeAll.part.0+0xc4>)
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	3a01      	subs	r2, #1
 80101e0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d143      	bne.n	8010270 <xTaskResumeAll.part.0+0xa4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80101e8:	4b2a      	ldr	r3, [pc, #168]	; (8010294 <xTaskResumeAll.part.0+0xc8>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d03f      	beq.n	8010270 <xTaskResumeAll.part.0+0xa4>
 80101f0:	4b29      	ldr	r3, [pc, #164]	; (8010298 <xTaskResumeAll.part.0+0xcc>)
 80101f2:	4e2a      	ldr	r6, [pc, #168]	; (801029c <xTaskResumeAll.part.0+0xd0>)
 80101f4:	469a      	mov	sl, r3
					prvAddTaskToReadyList( pxTCB );
 80101f6:	4b2a      	ldr	r3, [pc, #168]	; (80102a0 <xTaskResumeAll.part.0+0xd4>)
 80101f8:	4f2a      	ldr	r7, [pc, #168]	; (80102a4 <xTaskResumeAll.part.0+0xd8>)
 80101fa:	4699      	mov	r9, r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80101fc:	4b2a      	ldr	r3, [pc, #168]	; (80102a8 <xTaskResumeAll.part.0+0xdc>)
 80101fe:	4698      	mov	r8, r3
 8010200:	e01b      	b.n	801023a <xTaskResumeAll.part.0+0x6e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010202:	68f3      	ldr	r3, [r6, #12]
 8010204:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010206:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010208:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801020a:	3018      	adds	r0, #24
 801020c:	f7ff f932 	bl	800f474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010210:	0028      	movs	r0, r5
 8010212:	f7ff f92f 	bl	800f474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010216:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010218:	683a      	ldr	r2, [r7, #0]
 801021a:	4293      	cmp	r3, r2
 801021c:	d900      	bls.n	8010220 <xTaskResumeAll.part.0+0x54>
 801021e:	603b      	str	r3, [r7, #0]
 8010220:	0098      	lsls	r0, r3, #2
 8010222:	18c0      	adds	r0, r0, r3
 8010224:	0080      	lsls	r0, r0, #2
 8010226:	0029      	movs	r1, r5
 8010228:	4448      	add	r0, r9
 801022a:	f7ff f8ff 	bl	800f42c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801022e:	4643      	mov	r3, r8
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010236:	429a      	cmp	r2, r3
 8010238:	d223      	bcs.n	8010282 <xTaskResumeAll.part.0+0xb6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801023a:	6833      	ldr	r3, [r6, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d1e0      	bne.n	8010202 <xTaskResumeAll.part.0+0x36>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8010240:	4c1a      	ldr	r4, [pc, #104]	; (80102ac <xTaskResumeAll.part.0+0xe0>)
 8010242:	6823      	ldr	r3, [r4, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00f      	beq.n	8010268 <xTaskResumeAll.part.0+0x9c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8010248:	6823      	ldr	r3, [r4, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d00c      	beq.n	8010268 <xTaskResumeAll.part.0+0x9c>
							xYieldPending = pdTRUE;
 801024e:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
 8010250:	f7ff ff0e 	bl	8010070 <xTaskIncrementTick>
 8010254:	2800      	cmp	r0, #0
 8010256:	d001      	beq.n	801025c <xTaskResumeAll.part.0+0x90>
							xYieldPending = pdTRUE;
 8010258:	4653      	mov	r3, sl
 801025a:	601d      	str	r5, [r3, #0]
						--uxPendedTicks;
 801025c:	6823      	ldr	r3, [r4, #0]
 801025e:	3b01      	subs	r3, #1
 8010260:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8010262:	6823      	ldr	r3, [r4, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d1f3      	bne.n	8010250 <xTaskResumeAll.part.0+0x84>
				if( xYieldPending == pdTRUE )
 8010268:	4653      	mov	r3, sl
 801026a:	681c      	ldr	r4, [r3, #0]
 801026c:	2c01      	cmp	r4, #1
 801026e:	d00c      	beq.n	801028a <xTaskResumeAll.part.0+0xbe>
BaseType_t xAlreadyYielded = pdFALSE;
 8010270:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010272:	f000 fe1b 	bl	8010eac <vPortExitCritical>
}
 8010276:	0020      	movs	r0, r4
 8010278:	bce0      	pop	{r5, r6, r7}
 801027a:	46ba      	mov	sl, r7
 801027c:	46b1      	mov	r9, r6
 801027e:	46a8      	mov	r8, r5
 8010280:	bdf0      	pop	{r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 8010282:	2301      	movs	r3, #1
 8010284:	4652      	mov	r2, sl
 8010286:	6013      	str	r3, [r2, #0]
 8010288:	e7d7      	b.n	801023a <xTaskResumeAll.part.0+0x6e>
					taskYIELD_IF_USING_PREEMPTION();
 801028a:	f000 fdf7 	bl	8010e7c <vPortYield>
 801028e:	e7f0      	b.n	8010272 <xTaskResumeAll.part.0+0xa6>
 8010290:	20001eec 	.word	0x20001eec
 8010294:	20001ee4 	.word	0x20001ee4
 8010298:	20001f6c 	.word	0x20001f6c
 801029c:	20001f28 	.word	0x20001f28
 80102a0:	20001e54 	.word	0x20001e54
 80102a4:	20001ef8 	.word	0x20001ef8
 80102a8:	20001e48 	.word	0x20001e48
 80102ac:	20001ee8 	.word	0x20001ee8

080102b0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80102b0:	4b04      	ldr	r3, [pc, #16]	; (80102c4 <xTaskResumeAll+0x14>)
{
 80102b2:	b510      	push	{r4, lr}
	configASSERT( uxSchedulerSuspended );
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d101      	bne.n	80102be <xTaskResumeAll+0xe>
 80102ba:	b672      	cpsid	i
 80102bc:	e7fe      	b.n	80102bc <xTaskResumeAll+0xc>
 80102be:	f7ff ff85 	bl	80101cc <xTaskResumeAll.part.0>
}
 80102c2:	bd10      	pop	{r4, pc}
 80102c4:	20001eec 	.word	0x20001eec

080102c8 <vTaskDelay>:
	{
 80102c8:	b570      	push	{r4, r5, r6, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80102ca:	2800      	cmp	r0, #0
 80102cc:	d01a      	beq.n	8010304 <vTaskDelay+0x3c>
			configASSERT( uxSchedulerSuspended == 0 );
 80102ce:	4c10      	ldr	r4, [pc, #64]	; (8010310 <vTaskDelay+0x48>)
 80102d0:	6823      	ldr	r3, [r4, #0]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d001      	beq.n	80102da <vTaskDelay+0x12>
 80102d6:	b672      	cpsid	i
 80102d8:	e7fe      	b.n	80102d8 <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 80102da:	6823      	ldr	r3, [r4, #0]
 80102dc:	3301      	adds	r3, #1
 80102de:	6023      	str	r3, [r4, #0]
				xTimeToWake = xTickCount + xTicksToDelay;
 80102e0:	4b0c      	ldr	r3, [pc, #48]	; (8010314 <vTaskDelay+0x4c>)
 80102e2:	681d      	ldr	r5, [r3, #0]
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80102e4:	4b0c      	ldr	r3, [pc, #48]	; (8010318 <vTaskDelay+0x50>)
				xTimeToWake = xTickCount + xTicksToDelay;
 80102e6:	182d      	adds	r5, r5, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80102e8:	6818      	ldr	r0, [r3, #0]
 80102ea:	3004      	adds	r0, #4
 80102ec:	f7ff f8c2 	bl	800f474 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80102f0:	0028      	movs	r0, r5
 80102f2:	f7ff fc81 	bl	800fbf8 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 80102f6:	6823      	ldr	r3, [r4, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d006      	beq.n	801030a <vTaskDelay+0x42>
 80102fc:	f7ff ff66 	bl	80101cc <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8010300:	2800      	cmp	r0, #0
 8010302:	d101      	bne.n	8010308 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8010304:	f000 fdba 	bl	8010e7c <vPortYield>
	}
 8010308:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( uxSchedulerSuspended );
 801030a:	b672      	cpsid	i
 801030c:	e7fe      	b.n	801030c <vTaskDelay+0x44>
 801030e:	46c0      	nop			; (mov r8, r8)
 8010310:	20001eec 	.word	0x20001eec
 8010314:	20001f68 	.word	0x20001f68
 8010318:	20001e48 	.word	0x20001e48

0801031c <prvIdleTask>:
{
 801031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801031e:	4b1c      	ldr	r3, [pc, #112]	; (8010390 <prvIdleTask+0x74>)
 8010320:	4647      	mov	r7, r8
 8010322:	46ce      	mov	lr, r9
 8010324:	4698      	mov	r8, r3
 8010326:	4b1b      	ldr	r3, [pc, #108]	; (8010394 <prvIdleTask+0x78>)
 8010328:	b580      	push	{r7, lr}
 801032a:	4699      	mov	r9, r3
 801032c:	4d1a      	ldr	r5, [pc, #104]	; (8010398 <prvIdleTask+0x7c>)
 801032e:	4f1b      	ldr	r7, [pc, #108]	; (801039c <prvIdleTask+0x80>)
 8010330:	4c1b      	ldr	r4, [pc, #108]	; (80103a0 <prvIdleTask+0x84>)
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8010332:	6823      	ldr	r3, [r4, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d024      	beq.n	8010382 <prvIdleTask+0x66>
	++uxSchedulerSuspended;
 8010338:	682b      	ldr	r3, [r5, #0]
 801033a:	3301      	adds	r3, #1
 801033c:	602b      	str	r3, [r5, #0]
	configASSERT( uxSchedulerSuspended );
 801033e:	682b      	ldr	r3, [r5, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d101      	bne.n	8010348 <prvIdleTask+0x2c>
 8010344:	b672      	cpsid	i
 8010346:	e7fe      	b.n	8010346 <prvIdleTask+0x2a>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8010348:	4643      	mov	r3, r8
 801034a:	681e      	ldr	r6, [r3, #0]
 801034c:	f7ff ff3e 	bl	80101cc <xTaskResumeAll.part.0>
			if( xListIsEmpty == pdFALSE )
 8010350:	2e00      	cmp	r6, #0
 8010352:	d0ee      	beq.n	8010332 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
 8010354:	f000 fd9e 	bl	8010e94 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010358:	4643      	mov	r3, r8
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 801035e:	1d30      	adds	r0, r6, #4
 8010360:	f7ff f888 	bl	800f474 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	3b01      	subs	r3, #1
 8010368:	603b      	str	r3, [r7, #0]
					--uxTasksDeleted;
 801036a:	6823      	ldr	r3, [r4, #0]
 801036c:	3b01      	subs	r3, #1
 801036e:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8010370:	f000 fd9c 	bl	8010eac <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 8010374:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8010376:	f000 fe97 	bl	80110a8 <vPortFree>
		vPortFree( pxTCB );
 801037a:	0030      	movs	r0, r6
 801037c:	f000 fe94 	bl	80110a8 <vPortFree>
	}
 8010380:	e7d7      	b.n	8010332 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010382:	464b      	mov	r3, r9
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d9d3      	bls.n	8010332 <prvIdleTask+0x16>
				taskYIELD();
 801038a:	f000 fd77 	bl	8010e7c <vPortYield>
 801038e:	e7d0      	b.n	8010332 <prvIdleTask+0x16>
 8010390:	20001f54 	.word	0x20001f54
 8010394:	20001e54 	.word	0x20001e54
 8010398:	20001eec 	.word	0x20001eec
 801039c:	20001ee4 	.word	0x20001ee4
 80103a0:	20001ef4 	.word	0x20001ef4

080103a4 <uxTaskGetSystemState>:
	{
 80103a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	++uxSchedulerSuspended;
 80103a6:	4b30      	ldr	r3, [pc, #192]	; (8010468 <uxTaskGetSystemState+0xc4>)
	{
 80103a8:	4647      	mov	r7, r8
 80103aa:	46ce      	mov	lr, r9
	++uxSchedulerSuspended;
 80103ac:	4698      	mov	r8, r3
	{
 80103ae:	b580      	push	{r7, lr}
 80103b0:	0017      	movs	r7, r2
	++uxSchedulerSuspended;
 80103b2:	4642      	mov	r2, r8
 80103b4:	681b      	ldr	r3, [r3, #0]
	{
 80103b6:	0005      	movs	r5, r0
	++uxSchedulerSuspended;
 80103b8:	3301      	adds	r3, #1
 80103ba:	6013      	str	r3, [r2, #0]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80103bc:	4b2b      	ldr	r3, [pc, #172]	; (801046c <uxTaskGetSystemState+0xc8>)
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80103be:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	428b      	cmp	r3, r1
 80103c4:	d843      	bhi.n	801044e <uxTaskGetSystemState+0xaa>
 80103c6:	2378      	movs	r3, #120	; 0x78
 80103c8:	425b      	negs	r3, r3
 80103ca:	4699      	mov	r9, r3
 80103cc:	4e28      	ldr	r6, [pc, #160]	; (8010470 <uxTaskGetSystemState+0xcc>)
 80103ce:	2300      	movs	r3, #0
 80103d0:	44b1      	add	r9, r6
 80103d2:	e000      	b.n	80103d6 <uxTaskGetSystemState+0x32>
 80103d4:	0016      	movs	r6, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80103d6:	6832      	ldr	r2, [r6, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80103d8:	18e8      	adds	r0, r5, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80103da:	2a00      	cmp	r2, #0
 80103dc:	d006      	beq.n	80103ec <uxTaskGetSystemState+0x48>
 80103de:	2201      	movs	r2, #1
 80103e0:	0031      	movs	r1, r6
 80103e2:	f7ff fba9 	bl	800fb38 <prvListTaskWithinSingleList.part.0>
 80103e6:	1824      	adds	r4, r4, r0
 80103e8:	0163      	lsls	r3, r4, #5
 80103ea:	18e8      	adds	r0, r5, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103ec:	0032      	movs	r2, r6
 80103ee:	3a14      	subs	r2, #20
 80103f0:	454e      	cmp	r6, r9
 80103f2:	d1ef      	bne.n	80103d4 <uxTaskGetSystemState+0x30>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80103f4:	4b1f      	ldr	r3, [pc, #124]	; (8010474 <uxTaskGetSystemState+0xd0>)
 80103f6:	6819      	ldr	r1, [r3, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80103f8:	680b      	ldr	r3, [r1, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d005      	beq.n	801040a <uxTaskGetSystemState+0x66>
 80103fe:	2202      	movs	r2, #2
 8010400:	f7ff fb9a 	bl	800fb38 <prvListTaskWithinSingleList.part.0>
 8010404:	1824      	adds	r4, r4, r0
 8010406:	0160      	lsls	r0, r4, #5
 8010408:	1828      	adds	r0, r5, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 801040a:	4b1b      	ldr	r3, [pc, #108]	; (8010478 <uxTaskGetSystemState+0xd4>)
 801040c:	6819      	ldr	r1, [r3, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 801040e:	680b      	ldr	r3, [r1, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d005      	beq.n	8010420 <uxTaskGetSystemState+0x7c>
 8010414:	2202      	movs	r2, #2
 8010416:	f7ff fb8f 	bl	800fb38 <prvListTaskWithinSingleList.part.0>
 801041a:	1824      	adds	r4, r4, r0
 801041c:	0160      	lsls	r0, r4, #5
 801041e:	1828      	adds	r0, r5, r0
 8010420:	4916      	ldr	r1, [pc, #88]	; (801047c <uxTaskGetSystemState+0xd8>)
 8010422:	680b      	ldr	r3, [r1, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d005      	beq.n	8010434 <uxTaskGetSystemState+0x90>
 8010428:	2204      	movs	r2, #4
 801042a:	f7ff fb85 	bl	800fb38 <prvListTaskWithinSingleList.part.0>
 801042e:	1824      	adds	r4, r4, r0
 8010430:	0160      	lsls	r0, r4, #5
 8010432:	1828      	adds	r0, r5, r0
 8010434:	4912      	ldr	r1, [pc, #72]	; (8010480 <uxTaskGetSystemState+0xdc>)
 8010436:	680b      	ldr	r3, [r1, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d003      	beq.n	8010444 <uxTaskGetSystemState+0xa0>
 801043c:	2203      	movs	r2, #3
 801043e:	f7ff fb7b 	bl	800fb38 <prvListTaskWithinSingleList.part.0>
 8010442:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 8010444:	2f00      	cmp	r7, #0
 8010446:	d002      	beq.n	801044e <uxTaskGetSystemState+0xaa>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010448:	f7f8 f960 	bl	800870c <ulMainGetRunTimeCounterValue>
 801044c:	6038      	str	r0, [r7, #0]
	configASSERT( uxSchedulerSuspended );
 801044e:	4643      	mov	r3, r8
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d101      	bne.n	801045a <uxTaskGetSystemState+0xb6>
 8010456:	b672      	cpsid	i
 8010458:	e7fe      	b.n	8010458 <uxTaskGetSystemState+0xb4>
 801045a:	f7ff feb7 	bl	80101cc <xTaskResumeAll.part.0>
	}
 801045e:	0020      	movs	r0, r4
 8010460:	bcc0      	pop	{r6, r7}
 8010462:	46b9      	mov	r9, r7
 8010464:	46b0      	mov	r8, r6
 8010466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010468:	20001eec 	.word	0x20001eec
 801046c:	20001ee4 	.word	0x20001ee4
 8010470:	20001ecc 	.word	0x20001ecc
 8010474:	20001e4c 	.word	0x20001e4c
 8010478:	20001e50 	.word	0x20001e50
 801047c:	20001f54 	.word	0x20001f54
 8010480:	20001f40 	.word	0x20001f40

08010484 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010484:	4b05      	ldr	r3, [pc, #20]	; (801049c <vTaskSwitchContext+0x18>)
{
 8010486:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d003      	beq.n	8010496 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 801048e:	2201      	movs	r2, #1
 8010490:	4b03      	ldr	r3, [pc, #12]	; (80104a0 <vTaskSwitchContext+0x1c>)
 8010492:	601a      	str	r2, [r3, #0]
}
 8010494:	bd10      	pop	{r4, pc}
 8010496:	f7ff fccf 	bl	800fe38 <vTaskSwitchContext.part.0>
 801049a:	e7fb      	b.n	8010494 <vTaskSwitchContext+0x10>
 801049c:	20001eec 	.word	0x20001eec
 80104a0:	20001f6c 	.word	0x20001f6c

080104a4 <vTaskPlaceOnEventList>:
{
 80104a4:	b570      	push	{r4, r5, r6, lr}
 80104a6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d010      	beq.n	80104ce <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80104ac:	4d0c      	ldr	r5, [pc, #48]	; (80104e0 <vTaskPlaceOnEventList+0x3c>)
 80104ae:	6829      	ldr	r1, [r5, #0]
 80104b0:	3118      	adds	r1, #24
 80104b2:	f7fe ffc7 	bl	800f444 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80104b6:	6828      	ldr	r0, [r5, #0]
 80104b8:	3004      	adds	r0, #4
 80104ba:	f7fe ffdb 	bl	800f474 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 80104be:	1c63      	adds	r3, r4, #1
 80104c0:	d007      	beq.n	80104d2 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 80104c2:	4b08      	ldr	r3, [pc, #32]	; (80104e4 <vTaskPlaceOnEventList+0x40>)
 80104c4:	6818      	ldr	r0, [r3, #0]
 80104c6:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80104c8:	f7ff fb96 	bl	800fbf8 <prvAddCurrentTaskToDelayedList>
}
 80104cc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 80104ce:	b672      	cpsid	i
 80104d0:	e7fe      	b.n	80104d0 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80104d2:	6829      	ldr	r1, [r5, #0]
 80104d4:	4804      	ldr	r0, [pc, #16]	; (80104e8 <vTaskPlaceOnEventList+0x44>)
 80104d6:	3104      	adds	r1, #4
 80104d8:	f7fe ffa8 	bl	800f42c <vListInsertEnd>
 80104dc:	e7f6      	b.n	80104cc <vTaskPlaceOnEventList+0x28>
 80104de:	46c0      	nop			; (mov r8, r8)
 80104e0:	20001e48 	.word	0x20001e48
 80104e4:	20001f68 	.word	0x20001f68
 80104e8:	20001f40 	.word	0x20001f40

080104ec <vTaskPlaceOnEventListRestricted>:
	{
 80104ec:	b570      	push	{r4, r5, r6, lr}
 80104ee:	000c      	movs	r4, r1
		configASSERT( pxEventList );
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d00e      	beq.n	8010512 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80104f4:	4d08      	ldr	r5, [pc, #32]	; (8010518 <vTaskPlaceOnEventListRestricted+0x2c>)
 80104f6:	6829      	ldr	r1, [r5, #0]
 80104f8:	3118      	adds	r1, #24
 80104fa:	f7fe ff97 	bl	800f42c <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80104fe:	6828      	ldr	r0, [r5, #0]
 8010500:	3004      	adds	r0, #4
 8010502:	f7fe ffb7 	bl	800f474 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 8010506:	4b05      	ldr	r3, [pc, #20]	; (801051c <vTaskPlaceOnEventListRestricted+0x30>)
 8010508:	6818      	ldr	r0, [r3, #0]
 801050a:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 801050c:	f7ff fb74 	bl	800fbf8 <prvAddCurrentTaskToDelayedList>
	}
 8010510:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 8010512:	b672      	cpsid	i
 8010514:	e7fe      	b.n	8010514 <vTaskPlaceOnEventListRestricted+0x28>
 8010516:	46c0      	nop			; (mov r8, r8)
 8010518:	20001e48 	.word	0x20001e48
 801051c:	20001f68 	.word	0x20001f68

08010520 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010520:	68c3      	ldr	r3, [r0, #12]
{
 8010522:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010524:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8010526:	2c00      	cmp	r4, #0
 8010528:	d02b      	beq.n	8010582 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801052a:	0025      	movs	r5, r4
 801052c:	3518      	adds	r5, #24
 801052e:	0028      	movs	r0, r5
 8010530:	f7fe ffa0 	bl	800f474 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010534:	4b14      	ldr	r3, [pc, #80]	; (8010588 <xTaskRemoveFromEventList+0x68>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d00f      	beq.n	801055c <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801053c:	0029      	movs	r1, r5
 801053e:	4813      	ldr	r0, [pc, #76]	; (801058c <xTaskRemoveFromEventList+0x6c>)
 8010540:	f7fe ff74 	bl	800f42c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010544:	4b12      	ldr	r3, [pc, #72]	; (8010590 <xTaskRemoveFromEventList+0x70>)
 8010546:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010548:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 801054a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801054c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054e:	429a      	cmp	r2, r3
 8010550:	d903      	bls.n	801055a <xTaskRemoveFromEventList+0x3a>
		xYieldPending = pdTRUE;
 8010552:	2201      	movs	r2, #1
 8010554:	4b0f      	ldr	r3, [pc, #60]	; (8010594 <xTaskRemoveFromEventList+0x74>)
		xReturn = pdTRUE;
 8010556:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 8010558:	601a      	str	r2, [r3, #0]
}
 801055a:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 801055c:	1d25      	adds	r5, r4, #4
 801055e:	0028      	movs	r0, r5
 8010560:	f7fe ff88 	bl	800f474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010564:	4a0c      	ldr	r2, [pc, #48]	; (8010598 <xTaskRemoveFromEventList+0x78>)
 8010566:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010568:	6811      	ldr	r1, [r2, #0]
 801056a:	428b      	cmp	r3, r1
 801056c:	d900      	bls.n	8010570 <xTaskRemoveFromEventList+0x50>
 801056e:	6013      	str	r3, [r2, #0]
 8010570:	0098      	lsls	r0, r3, #2
 8010572:	18c0      	adds	r0, r0, r3
 8010574:	4b09      	ldr	r3, [pc, #36]	; (801059c <xTaskRemoveFromEventList+0x7c>)
 8010576:	0080      	lsls	r0, r0, #2
 8010578:	0029      	movs	r1, r5
 801057a:	18c0      	adds	r0, r0, r3
 801057c:	f7fe ff56 	bl	800f42c <vListInsertEnd>
 8010580:	e7e0      	b.n	8010544 <xTaskRemoveFromEventList+0x24>
	configASSERT( pxUnblockedTCB );
 8010582:	b672      	cpsid	i
 8010584:	e7fe      	b.n	8010584 <xTaskRemoveFromEventList+0x64>
 8010586:	46c0      	nop			; (mov r8, r8)
 8010588:	20001eec 	.word	0x20001eec
 801058c:	20001f28 	.word	0x20001f28
 8010590:	20001e48 	.word	0x20001e48
 8010594:	20001f6c 	.word	0x20001f6c
 8010598:	20001ef8 	.word	0x20001ef8
 801059c:	20001e54 	.word	0x20001e54

080105a0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 80105a0:	2800      	cmp	r0, #0
 80105a2:	d006      	beq.n	80105b2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80105a4:	4b04      	ldr	r3, [pc, #16]	; (80105b8 <vTaskSetTimeOutState+0x18>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80105aa:	4b04      	ldr	r3, [pc, #16]	; (80105bc <vTaskSetTimeOutState+0x1c>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	6043      	str	r3, [r0, #4]
}
 80105b0:	4770      	bx	lr
	configASSERT( pxTimeOut );
 80105b2:	b672      	cpsid	i
 80105b4:	e7fe      	b.n	80105b4 <vTaskSetTimeOutState+0x14>
 80105b6:	46c0      	nop			; (mov r8, r8)
 80105b8:	20001f24 	.word	0x20001f24
 80105bc:	20001f68 	.word	0x20001f68

080105c0 <xTaskCheckForTimeOut>:
{
 80105c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105c2:	0004      	movs	r4, r0
 80105c4:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 80105c6:	2800      	cmp	r0, #0
 80105c8:	d025      	beq.n	8010616 <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 80105ca:	2900      	cmp	r1, #0
 80105cc:	d021      	beq.n	8010612 <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 80105ce:	f000 fc61 	bl	8010e94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80105d2:	4f14      	ldr	r7, [pc, #80]	; (8010624 <xTaskCheckForTimeOut+0x64>)
			if( *pxTicksToWait == portMAX_DELAY )
 80105d4:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80105d6:	6839      	ldr	r1, [r7, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80105d8:	1c5a      	adds	r2, r3, #1
 80105da:	d01e      	beq.n	801061a <xTaskCheckForTimeOut+0x5a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80105dc:	4a12      	ldr	r2, [pc, #72]	; (8010628 <xTaskCheckForTimeOut+0x68>)
 80105de:	6820      	ldr	r0, [r4, #0]
 80105e0:	4694      	mov	ip, r2
 80105e2:	6812      	ldr	r2, [r2, #0]
 80105e4:	4290      	cmp	r0, r2
 80105e6:	d01a      	beq.n	801061e <xTaskCheckForTimeOut+0x5e>
 80105e8:	6862      	ldr	r2, [r4, #4]
			xReturn = pdTRUE;
 80105ea:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80105ec:	428a      	cmp	r2, r1
 80105ee:	d90c      	bls.n	801060a <xTaskCheckForTimeOut+0x4a>
			xReturn = pdTRUE;
 80105f0:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80105f2:	1a88      	subs	r0, r1, r2
 80105f4:	4283      	cmp	r3, r0
 80105f6:	d908      	bls.n	801060a <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80105f8:	1a5b      	subs	r3, r3, r1
 80105fa:	189b      	adds	r3, r3, r2
 80105fc:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80105fe:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 8010600:	2600      	movs	r6, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 801060a:	f000 fc4f 	bl	8010eac <vPortExitCritical>
}
 801060e:	0030      	movs	r0, r6
 8010610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 8010612:	b672      	cpsid	i
 8010614:	e7fe      	b.n	8010614 <xTaskCheckForTimeOut+0x54>
	configASSERT( pxTimeOut );
 8010616:	b672      	cpsid	i
 8010618:	e7fe      	b.n	8010618 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
 801061a:	2600      	movs	r6, #0
 801061c:	e7f5      	b.n	801060a <xTaskCheckForTimeOut+0x4a>
 801061e:	6862      	ldr	r2, [r4, #4]
 8010620:	e7e6      	b.n	80105f0 <xTaskCheckForTimeOut+0x30>
 8010622:	46c0      	nop			; (mov r8, r8)
 8010624:	20001f68 	.word	0x20001f68
 8010628:	20001f24 	.word	0x20001f24

0801062c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801062c:	2201      	movs	r2, #1
 801062e:	4b01      	ldr	r3, [pc, #4]	; (8010634 <vTaskMissedYield+0x8>)
 8010630:	601a      	str	r2, [r3, #0]
}
 8010632:	4770      	bx	lr
 8010634:	20001f6c 	.word	0x20001f6c

08010638 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010638:	4b05      	ldr	r3, [pc, #20]	; (8010650 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 801063a:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d004      	beq.n	801064c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010642:	4b04      	ldr	r3, [pc, #16]	; (8010654 <xTaskGetSchedulerState+0x1c>)
 8010644:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8010646:	4243      	negs	r3, r0
 8010648:	4158      	adcs	r0, r3
 801064a:	0040      	lsls	r0, r0, #1
	}
 801064c:	4770      	bx	lr
 801064e:	46c0      	nop			; (mov r8, r8)
 8010650:	20001f3c 	.word	0x20001f3c
 8010654:	20001eec 	.word	0x20001eec

08010658 <vTaskPriorityInherit>:
	{
 8010658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 801065c:	d018      	beq.n	8010690 <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 801065e:	4d17      	ldr	r5, [pc, #92]	; (80106bc <vTaskPriorityInherit+0x64>)
 8010660:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010662:	682b      	ldr	r3, [r5, #0]
 8010664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010666:	429a      	cmp	r2, r3
 8010668:	d212      	bcs.n	8010690 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801066a:	6983      	ldr	r3, [r0, #24]
 801066c:	2b00      	cmp	r3, #0
 801066e:	db04      	blt.n	801067a <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010670:	682b      	ldr	r3, [r5, #0]
 8010672:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010674:	2307      	movs	r3, #7
 8010676:	1a5b      	subs	r3, r3, r1
 8010678:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 801067a:	0093      	lsls	r3, r2, #2
 801067c:	189b      	adds	r3, r3, r2
 801067e:	4e10      	ldr	r6, [pc, #64]	; (80106c0 <vTaskPriorityInherit+0x68>)
 8010680:	009b      	lsls	r3, r3, #2
 8010682:	6962      	ldr	r2, [r4, #20]
 8010684:	18f3      	adds	r3, r6, r3
 8010686:	429a      	cmp	r2, r3
 8010688:	d003      	beq.n	8010692 <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801068a:	682b      	ldr	r3, [r5, #0]
 801068c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801068e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8010690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010692:	1d27      	adds	r7, r4, #4
 8010694:	0038      	movs	r0, r7
 8010696:	f7fe feed 	bl	800f474 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801069a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 801069c:	4a09      	ldr	r2, [pc, #36]	; (80106c4 <vTaskPriorityInherit+0x6c>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801069e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80106a0:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80106a2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80106a4:	428b      	cmp	r3, r1
 80106a6:	d900      	bls.n	80106aa <vTaskPriorityInherit+0x52>
 80106a8:	6013      	str	r3, [r2, #0]
 80106aa:	0098      	lsls	r0, r3, #2
 80106ac:	18c0      	adds	r0, r0, r3
 80106ae:	0080      	lsls	r0, r0, #2
 80106b0:	0039      	movs	r1, r7
 80106b2:	1830      	adds	r0, r6, r0
 80106b4:	f7fe feba 	bl	800f42c <vListInsertEnd>
	}
 80106b8:	e7ea      	b.n	8010690 <vTaskPriorityInherit+0x38>
 80106ba:	46c0      	nop			; (mov r8, r8)
 80106bc:	20001e48 	.word	0x20001e48
 80106c0:	20001e54 	.word	0x20001e54
 80106c4:	20001ef8 	.word	0x20001ef8

080106c8 <xTaskPriorityDisinherit>:
	{
 80106c8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80106ca:	2800      	cmp	r0, #0
 80106cc:	d010      	beq.n	80106f0 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB == pxCurrentTCB );
 80106ce:	4b16      	ldr	r3, [pc, #88]	; (8010728 <xTaskPriorityDisinherit+0x60>)
 80106d0:	681c      	ldr	r4, [r3, #0]
 80106d2:	4284      	cmp	r4, r0
 80106d4:	d001      	beq.n	80106da <xTaskPriorityDisinherit+0x12>
 80106d6:	b672      	cpsid	i
 80106d8:	e7fe      	b.n	80106d8 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80106da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d009      	beq.n	80106f4 <xTaskPriorityDisinherit+0x2c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80106e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80106e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80106e4:	3b01      	subs	r3, #1
 80106e6:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80106e8:	428a      	cmp	r2, r1
 80106ea:	d001      	beq.n	80106f0 <xTaskPriorityDisinherit+0x28>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d003      	beq.n	80106f8 <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 80106f0:	2000      	movs	r0, #0
	}
 80106f2:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 80106f4:	b672      	cpsid	i
 80106f6:	e7fe      	b.n	80106f6 <xTaskPriorityDisinherit+0x2e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80106f8:	1d25      	adds	r5, r4, #4
 80106fa:	0028      	movs	r0, r5
 80106fc:	f7fe feba 	bl	800f474 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010700:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010702:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010704:	1ad2      	subs	r2, r2, r3
 8010706:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8010708:	4a08      	ldr	r2, [pc, #32]	; (801072c <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801070a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 801070c:	6811      	ldr	r1, [r2, #0]
 801070e:	428b      	cmp	r3, r1
 8010710:	d900      	bls.n	8010714 <xTaskPriorityDisinherit+0x4c>
 8010712:	6013      	str	r3, [r2, #0]
 8010714:	0098      	lsls	r0, r3, #2
 8010716:	18c0      	adds	r0, r0, r3
 8010718:	4b05      	ldr	r3, [pc, #20]	; (8010730 <xTaskPriorityDisinherit+0x68>)
 801071a:	0080      	lsls	r0, r0, #2
 801071c:	18c0      	adds	r0, r0, r3
 801071e:	0029      	movs	r1, r5
 8010720:	f7fe fe84 	bl	800f42c <vListInsertEnd>
					xReturn = pdTRUE;
 8010724:	2001      	movs	r0, #1
		return xReturn;
 8010726:	e7e4      	b.n	80106f2 <xTaskPriorityDisinherit+0x2a>
 8010728:	20001e48 	.word	0x20001e48
 801072c:	20001ef8 	.word	0x20001ef8
 8010730:	20001e54 	.word	0x20001e54

08010734 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8010734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010736:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8010738:	2600      	movs	r6, #0
	{
 801073a:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801073c:	4b27      	ldr	r3, [pc, #156]	; (80107dc <vTaskList+0xa8>)
	{
 801073e:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 8010740:	681a      	ldr	r2, [r3, #0]
		*pcWriteBuffer = 0x00;
 8010742:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 8010744:	9202      	str	r2, [sp, #8]
	{
 8010746:	0005      	movs	r5, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010748:	6818      	ldr	r0, [r3, #0]
 801074a:	0140      	lsls	r0, r0, #5
 801074c:	f000 fc22 	bl	8010f94 <pvPortMalloc>
 8010750:	1e04      	subs	r4, r0, #0

		if( pxTaskStatusArray != NULL )
 8010752:	d03f      	beq.n	80107d4 <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8010754:	2200      	movs	r2, #0
 8010756:	9902      	ldr	r1, [sp, #8]
 8010758:	f7ff fe24 	bl	80103a4 <uxTaskGetSystemState>
 801075c:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 801075e:	9603      	str	r6, [sp, #12]
 8010760:	9b03      	ldr	r3, [sp, #12]
 8010762:	9a02      	ldr	r2, [sp, #8]
 8010764:	429a      	cmp	r2, r3
 8010766:	d932      	bls.n	80107ce <vTaskList+0x9a>
 8010768:	4b1d      	ldr	r3, [pc, #116]	; (80107e0 <vTaskList+0xac>)
 801076a:	4e1e      	ldr	r6, [pc, #120]	; (80107e4 <vTaskList+0xb0>)
 801076c:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 801076e:	9b03      	ldr	r3, [sp, #12]
 8010770:	2700      	movs	r7, #0
 8010772:	015b      	lsls	r3, r3, #5
 8010774:	18e3      	adds	r3, r4, r3
 8010776:	7b1b      	ldrb	r3, [r3, #12]
 8010778:	3b01      	subs	r3, #1
 801077a:	b2db      	uxtb	r3, r3
 801077c:	2b03      	cmp	r3, #3
 801077e:	d801      	bhi.n	8010784 <vTaskList+0x50>
 8010780:	4642      	mov	r2, r8
 8010782:	5cd7      	ldrb	r7, [r2, r3]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8010784:	9b03      	ldr	r3, [sp, #12]
 8010786:	0028      	movs	r0, r5
 8010788:	015b      	lsls	r3, r3, #5
 801078a:	18e3      	adds	r3, r4, r3
 801078c:	6859      	ldr	r1, [r3, #4]
 801078e:	f7ff f9bd 	bl	800fb0c <prvWriteNameToBuffer>
 8010792:	0005      	movs	r5, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8010794:	9b03      	ldr	r3, [sp, #12]
 8010796:	9a03      	ldr	r2, [sp, #12]
 8010798:	9903      	ldr	r1, [sp, #12]
 801079a:	015b      	lsls	r3, r3, #5
 801079c:	0149      	lsls	r1, r1, #5
 801079e:	1861      	adds	r1, r4, r1
 80107a0:	6889      	ldr	r1, [r1, #8]
 80107a2:	18e3      	adds	r3, r4, r3
 80107a4:	0152      	lsls	r2, r2, #5
 80107a6:	691b      	ldr	r3, [r3, #16]
 80107a8:	18a2      	adds	r2, r4, r2
 80107aa:	9101      	str	r1, [sp, #4]
 80107ac:	8b92      	ldrh	r2, [r2, #28]
 80107ae:	0031      	movs	r1, r6
 80107b0:	9200      	str	r2, [sp, #0]
 80107b2:	003a      	movs	r2, r7
 80107b4:	f004 fe58 	bl	8015468 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 80107b8:	0028      	movs	r0, r5
 80107ba:	f7ef fcad 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 80107be:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 80107c0:	182d      	adds	r5, r5, r0
			for( x = 0; x < uxArraySize; x++ )
 80107c2:	3301      	adds	r3, #1
 80107c4:	9303      	str	r3, [sp, #12]
 80107c6:	9a03      	ldr	r2, [sp, #12]
 80107c8:	9b02      	ldr	r3, [sp, #8]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d3cf      	bcc.n	801076e <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 80107ce:	0020      	movs	r0, r4
 80107d0:	f000 fc6a 	bl	80110a8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80107d4:	b004      	add	sp, #16
 80107d6:	bc80      	pop	{r7}
 80107d8:	46b8      	mov	r8, r7
 80107da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107dc:	20001ee4 	.word	0x20001ee4
 80107e0:	0801e4c4 	.word	0x0801e4c4
 80107e4:	0801e49c 	.word	0x0801e49c

080107e8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80107e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ea:	46d6      	mov	lr, sl
 80107ec:	464f      	mov	r7, r9
 80107ee:	4646      	mov	r6, r8
 80107f0:	b5c0      	push	{r6, r7, lr}
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 80107f2:	2700      	movs	r7, #0

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80107f4:	4b2f      	ldr	r3, [pc, #188]	; (80108b4 <vTaskGetRunTimeStats+0xcc>)
	{
 80107f6:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 80107f8:	681a      	ldr	r2, [r3, #0]
		*pcWriteBuffer = 0x00;
 80107fa:	7007      	strb	r7, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 80107fc:	9201      	str	r2, [sp, #4]
	{
 80107fe:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010800:	6818      	ldr	r0, [r3, #0]
 8010802:	0140      	lsls	r0, r0, #5
 8010804:	f000 fbc6 	bl	8010f94 <pvPortMalloc>
 8010808:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 801080a:	d04c      	beq.n	80108a6 <vTaskGetRunTimeStats+0xbe>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 801080c:	9901      	ldr	r1, [sp, #4]
 801080e:	aa03      	add	r2, sp, #12
 8010810:	f7ff fdc8 	bl	80103a4 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8010814:	9b03      	ldr	r3, [sp, #12]
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8010816:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 8010818:	4698      	mov	r8, r3
 801081a:	0018      	movs	r0, r3
 801081c:	2164      	movs	r1, #100	; 0x64
 801081e:	f7ef fc97 	bl	8000150 <__udivsi3>

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8010822:	4643      	mov	r3, r8
			ulTotalTime /= 100UL;
 8010824:	0006      	movs	r6, r0
 8010826:	9003      	str	r0, [sp, #12]
			if( ulTotalTime > 0 )
 8010828:	2b63      	cmp	r3, #99	; 0x63
 801082a:	d939      	bls.n	80108a0 <vTaskGetRunTimeStats+0xb8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 801082c:	9702      	str	r7, [sp, #8]
 801082e:	9b02      	ldr	r3, [sp, #8]
 8010830:	9a01      	ldr	r2, [sp, #4]
 8010832:	429a      	cmp	r2, r3
 8010834:	d934      	bls.n	80108a0 <vTaskGetRunTimeStats+0xb8>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8010836:	4b20      	ldr	r3, [pc, #128]	; (80108b8 <vTaskGetRunTimeStats+0xd0>)
 8010838:	4699      	mov	r9, r3
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 801083a:	4b20      	ldr	r3, [pc, #128]	; (80108bc <vTaskGetRunTimeStats+0xd4>)
 801083c:	4698      	mov	r8, r3
 801083e:	e019      	b.n	8010874 <vTaskGetRunTimeStats+0x8c>
 8010840:	469a      	mov	sl, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010842:	0031      	movs	r1, r6
 8010844:	0038      	movs	r0, r7
 8010846:	f7ef fc83 	bl	8000150 <__udivsi3>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 801084a:	4652      	mov	r2, sl
 801084c:	0152      	lsls	r2, r2, #5
 801084e:	18aa      	adds	r2, r5, r2
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010850:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8010852:	4641      	mov	r1, r8
 8010854:	0020      	movs	r0, r4
 8010856:	6992      	ldr	r2, [r2, #24]
 8010858:	f004 fe06 	bl	8015468 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 801085c:	0020      	movs	r0, r4
 801085e:	f7ef fc5b 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 8010862:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 8010864:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8010866:	3301      	adds	r3, #1
 8010868:	9302      	str	r3, [sp, #8]
 801086a:	9a02      	ldr	r2, [sp, #8]
 801086c:	9b01      	ldr	r3, [sp, #4]
 801086e:	429a      	cmp	r2, r3
 8010870:	d216      	bcs.n	80108a0 <vTaskGetRunTimeStats+0xb8>
 8010872:	9e03      	ldr	r6, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010874:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8010876:	0020      	movs	r0, r4
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010878:	015b      	lsls	r3, r3, #5
 801087a:	18eb      	adds	r3, r5, r3
 801087c:	699f      	ldr	r7, [r3, #24]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801087e:	9b02      	ldr	r3, [sp, #8]
 8010880:	015b      	lsls	r3, r3, #5
 8010882:	18eb      	adds	r3, r5, r3
 8010884:	6859      	ldr	r1, [r3, #4]
 8010886:	f7ff f941 	bl	800fb0c <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 801088a:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801088c:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 801088e:	42b7      	cmp	r7, r6
 8010890:	d2d6      	bcs.n	8010840 <vTaskGetRunTimeStats+0x58>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8010892:	015b      	lsls	r3, r3, #5
 8010894:	18eb      	adds	r3, r5, r3
 8010896:	4649      	mov	r1, r9
 8010898:	699a      	ldr	r2, [r3, #24]
 801089a:	f004 fde5 	bl	8015468 <sprintf>
 801089e:	e7dd      	b.n	801085c <vTaskGetRunTimeStats+0x74>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 80108a0:	0028      	movs	r0, r5
 80108a2:	f000 fc01 	bl	80110a8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80108a6:	b004      	add	sp, #16
 80108a8:	bce0      	pop	{r5, r6, r7}
 80108aa:	46ba      	mov	sl, r7
 80108ac:	46b1      	mov	r9, r6
 80108ae:	46a8      	mov	r8, r5
 80108b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108b2:	46c0      	nop			; (mov r8, r8)
 80108b4:	20001ee4 	.word	0x20001ee4
 80108b8:	0801e4b8 	.word	0x0801e4b8
 80108bc:	0801e4ac 	.word	0x0801e4ac

080108c0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80108c0:	4b04      	ldr	r3, [pc, #16]	; (80108d4 <pvTaskIncrementMutexHeldCount+0x14>)
 80108c2:	681a      	ldr	r2, [r3, #0]
 80108c4:	2a00      	cmp	r2, #0
 80108c6:	d003      	beq.n	80108d0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80108c8:	6819      	ldr	r1, [r3, #0]
 80108ca:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80108cc:	3201      	adds	r2, #1
 80108ce:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 80108d0:	6818      	ldr	r0, [r3, #0]
	}
 80108d2:	4770      	bx	lr
 80108d4:	20001e48 	.word	0x20001e48

080108d8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80108d8:	b570      	push	{r4, r5, r6, lr}
 80108da:	0006      	movs	r6, r0
 80108dc:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80108de:	f000 fad9 	bl	8010e94 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80108e2:	4c1c      	ldr	r4, [pc, #112]	; (8010954 <ulTaskNotifyTake+0x7c>)
 80108e4:	6823      	ldr	r3, [r4, #0]
 80108e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d105      	bne.n	80108f8 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80108ec:	2101      	movs	r1, #1
 80108ee:	6822      	ldr	r2, [r4, #0]
 80108f0:	335c      	adds	r3, #92	; 0x5c
 80108f2:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 80108f4:	2d00      	cmp	r5, #0
 80108f6:	d119      	bne.n	801092c <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80108f8:	f000 fad8 	bl	8010eac <vPortExitCritical>

		taskENTER_CRITICAL();
 80108fc:	f000 faca 	bl	8010e94 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010900:	6823      	ldr	r3, [r4, #0]
 8010902:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 8010904:	2d00      	cmp	r5, #0
 8010906:	d004      	beq.n	8010912 <ulTaskNotifyTake+0x3a>
			{
				if( xClearCountOnExit != pdFALSE )
 8010908:	2e00      	cmp	r6, #0
 801090a:	d00a      	beq.n	8010922 <ulTaskNotifyTake+0x4a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801090c:	2200      	movs	r2, #0
 801090e:	6823      	ldr	r3, [r4, #0]
 8010910:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 8010912:	235c      	movs	r3, #92	; 0x5c
 8010914:	2100      	movs	r1, #0
 8010916:	6822      	ldr	r2, [r4, #0]
 8010918:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 801091a:	f000 fac7 	bl	8010eac <vPortExitCritical>

		return ulReturn;
	}
 801091e:	0028      	movs	r0, r5
 8010920:	bd70      	pop	{r4, r5, r6, pc}
					( pxCurrentTCB->ulNotifiedValue )--;
 8010922:	6822      	ldr	r2, [r4, #0]
 8010924:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010926:	3b01      	subs	r3, #1
 8010928:	6593      	str	r3, [r2, #88]	; 0x58
 801092a:	e7f2      	b.n	8010912 <ulTaskNotifyTake+0x3a>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 801092c:	6820      	ldr	r0, [r4, #0]
 801092e:	3004      	adds	r0, #4
 8010930:	f7fe fda0 	bl	800f474 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 8010934:	1c6b      	adds	r3, r5, #1
 8010936:	d007      	beq.n	8010948 <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 8010938:	4b07      	ldr	r3, [pc, #28]	; (8010958 <ulTaskNotifyTake+0x80>)
 801093a:	6818      	ldr	r0, [r3, #0]
 801093c:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 801093e:	f7ff f95b 	bl	800fbf8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8010942:	f000 fa9b 	bl	8010e7c <vPortYield>
 8010946:	e7d7      	b.n	80108f8 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8010948:	6821      	ldr	r1, [r4, #0]
 801094a:	4804      	ldr	r0, [pc, #16]	; (801095c <ulTaskNotifyTake+0x84>)
 801094c:	3104      	adds	r1, #4
 801094e:	f7fe fd6d 	bl	800f42c <vListInsertEnd>
 8010952:	e7f6      	b.n	8010942 <ulTaskNotifyTake+0x6a>
 8010954:	20001e48 	.word	0x20001e48
 8010958:	20001f68 	.word	0x20001f68
 801095c:	20001f40 	.word	0x20001f40

08010960 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010962:	0004      	movs	r4, r0
 8010964:	000e      	movs	r6, r1
 8010966:	0015      	movs	r5, r2
 8010968:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 801096a:	2800      	cmp	r0, #0
 801096c:	d023      	beq.n	80109b6 <xTaskGenericNotify+0x56>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 801096e:	f000 fa91 	bl	8010e94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010972:	2f00      	cmp	r7, #0
 8010974:	d001      	beq.n	801097a <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010978:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 801097a:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 801097c:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 801097e:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 8010980:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 8010982:	b2db      	uxtb	r3, r3

			switch( eAction )
 8010984:	2d03      	cmp	r5, #3
 8010986:	d012      	beq.n	80109ae <xTaskGenericNotify+0x4e>
 8010988:	d80d      	bhi.n	80109a6 <xTaskGenericNotify+0x46>
 801098a:	2d01      	cmp	r5, #1
 801098c:	d015      	beq.n	80109ba <xTaskGenericNotify+0x5a>
 801098e:	2d02      	cmp	r5, #2
 8010990:	d102      	bne.n	8010998 <xTaskGenericNotify+0x38>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010992:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010994:	3201      	adds	r2, #1
 8010996:	65a2      	str	r2, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8010998:	2b01      	cmp	r3, #1
 801099a:	d013      	beq.n	80109c4 <xTaskGenericNotify+0x64>
 801099c:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801099e:	f000 fa85 	bl	8010eac <vPortExitCritical>

		return xReturn;
	}
 80109a2:	0020      	movs	r0, r4
 80109a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch( eAction )
 80109a6:	2d04      	cmp	r5, #4
 80109a8:	d1f6      	bne.n	8010998 <xTaskGenericNotify+0x38>
					if( eOriginalNotifyState != eNotified )
 80109aa:	2b02      	cmp	r3, #2
 80109ac:	d02a      	beq.n	8010a04 <xTaskGenericNotify+0xa4>
						pxTCB->ulNotifiedValue = ulValue;
 80109ae:	65a6      	str	r6, [r4, #88]	; 0x58
			if( eOriginalNotifyState == eWaitingNotification )
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d1f3      	bne.n	801099c <xTaskGenericNotify+0x3c>
 80109b4:	e006      	b.n	80109c4 <xTaskGenericNotify+0x64>
		configASSERT( xTaskToNotify );
 80109b6:	b672      	cpsid	i
 80109b8:	e7fe      	b.n	80109b8 <xTaskGenericNotify+0x58>
					pxTCB->ulNotifiedValue |= ulValue;
 80109ba:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80109bc:	4316      	orrs	r6, r2
 80109be:	65a6      	str	r6, [r4, #88]	; 0x58
			if( eOriginalNotifyState == eWaitingNotification )
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d1eb      	bne.n	801099c <xTaskGenericNotify+0x3c>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80109c4:	1d25      	adds	r5, r4, #4
 80109c6:	0028      	movs	r0, r5
 80109c8:	f7fe fd54 	bl	800f474 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80109cc:	4a0e      	ldr	r2, [pc, #56]	; (8010a08 <xTaskGenericNotify+0xa8>)
 80109ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80109d0:	6811      	ldr	r1, [r2, #0]
 80109d2:	428b      	cmp	r3, r1
 80109d4:	d900      	bls.n	80109d8 <xTaskGenericNotify+0x78>
 80109d6:	6013      	str	r3, [r2, #0]
 80109d8:	0098      	lsls	r0, r3, #2
 80109da:	18c0      	adds	r0, r0, r3
 80109dc:	4b0b      	ldr	r3, [pc, #44]	; (8010a0c <xTaskGenericNotify+0xac>)
 80109de:	0080      	lsls	r0, r0, #2
 80109e0:	18c0      	adds	r0, r0, r3
 80109e2:	0029      	movs	r1, r5
 80109e4:	f7fe fd22 	bl	800f42c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80109e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d001      	beq.n	80109f2 <xTaskGenericNotify+0x92>
 80109ee:	b672      	cpsid	i
 80109f0:	e7fe      	b.n	80109f0 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80109f2:	4b07      	ldr	r3, [pc, #28]	; (8010a10 <xTaskGenericNotify+0xb0>)
 80109f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d9ce      	bls.n	801099c <xTaskGenericNotify+0x3c>
					taskYIELD_IF_USING_PREEMPTION();
 80109fe:	f000 fa3d 	bl	8010e7c <vPortYield>
 8010a02:	e7cb      	b.n	801099c <xTaskGenericNotify+0x3c>
						xReturn = pdFAIL;
 8010a04:	2400      	movs	r4, #0
 8010a06:	e7ca      	b.n	801099e <xTaskGenericNotify+0x3e>
 8010a08:	20001ef8 	.word	0x20001ef8
 8010a0c:	20001e54 	.word	0x20001e54
 8010a10:	20001e48 	.word	0x20001e48

08010a14 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010a14:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010a16:	f000 fa3d 	bl	8010e94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010a1a:	4c10      	ldr	r4, [pc, #64]	; (8010a5c <prvCheckForValidListAndQueue+0x48>)
 8010a1c:	6823      	ldr	r3, [r4, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d002      	beq.n	8010a28 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a22:	f000 fa43 	bl	8010eac <vPortExitCritical>
}
 8010a26:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8010a28:	4e0d      	ldr	r6, [pc, #52]	; (8010a60 <prvCheckForValidListAndQueue+0x4c>)
 8010a2a:	0030      	movs	r0, r6
 8010a2c:	f7fe fcee 	bl	800f40c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a30:	4d0c      	ldr	r5, [pc, #48]	; (8010a64 <prvCheckForValidListAndQueue+0x50>)
 8010a32:	0028      	movs	r0, r5
 8010a34:	f7fe fcea 	bl	800f40c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a38:	4b0b      	ldr	r3, [pc, #44]	; (8010a68 <prvCheckForValidListAndQueue+0x54>)
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010a3a:	2200      	movs	r2, #0
			pxCurrentTimerList = &xActiveTimerList1;
 8010a3c:	601e      	str	r6, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a3e:	4b0b      	ldr	r3, [pc, #44]	; (8010a6c <prvCheckForValidListAndQueue+0x58>)
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010a40:	2110      	movs	r1, #16
 8010a42:	2004      	movs	r0, #4
			pxOverflowTimerList = &xActiveTimerList2;
 8010a44:	601d      	str	r5, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010a46:	f7fe fe0f 	bl	800f668 <xQueueGenericCreate>
 8010a4a:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	d003      	beq.n	8010a58 <prvCheckForValidListAndQueue+0x44>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010a50:	4907      	ldr	r1, [pc, #28]	; (8010a70 <prvCheckForValidListAndQueue+0x5c>)
 8010a52:	f7ff f829 	bl	800faa8 <vQueueAddToRegistry>
 8010a56:	e7e4      	b.n	8010a22 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 8010a58:	b672      	cpsid	i
 8010a5a:	e7fe      	b.n	8010a5a <prvCheckForValidListAndQueue+0x46>
 8010a5c:	20001fa4 	.word	0x20001fa4
 8010a60:	20001f78 	.word	0x20001f78
 8010a64:	20001f8c 	.word	0x20001f8c
 8010a68:	20001f70 	.word	0x20001f70
 8010a6c:	20001f74 	.word	0x20001f74
 8010a70:	0801e4dc 	.word	0x0801e4dc

08010a74 <prvInsertTimerInActiveList>:
{
 8010a74:	b510      	push	{r4, lr}
 8010a76:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010a78:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a7a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8010a7c:	4291      	cmp	r1, r2
 8010a7e:	d805      	bhi.n	8010a8c <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010a80:	1ad2      	subs	r2, r2, r3
 8010a82:	69a3      	ldr	r3, [r4, #24]
			xProcessTimerNow = pdTRUE;
 8010a84:	2001      	movs	r0, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d30c      	bcc.n	8010aa4 <prvInsertTimerInActiveList+0x30>
}
 8010a8a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d202      	bcs.n	8010a96 <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 8010a90:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010a92:	4299      	cmp	r1, r3
 8010a94:	d2f9      	bcs.n	8010a8a <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a96:	4b07      	ldr	r3, [pc, #28]	; (8010ab4 <prvInsertTimerInActiveList+0x40>)
 8010a98:	1d21      	adds	r1, r4, #4
 8010a9a:	6818      	ldr	r0, [r3, #0]
 8010a9c:	f7fe fcd2 	bl	800f444 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010aa0:	2000      	movs	r0, #0
 8010aa2:	e7f2      	b.n	8010a8a <prvInsertTimerInActiveList+0x16>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010aa4:	4b04      	ldr	r3, [pc, #16]	; (8010ab8 <prvInsertTimerInActiveList+0x44>)
 8010aa6:	1d21      	adds	r1, r4, #4
 8010aa8:	6818      	ldr	r0, [r3, #0]
 8010aaa:	f7fe fccb 	bl	800f444 <vListInsert>
 8010aae:	2000      	movs	r0, #0
 8010ab0:	e7eb      	b.n	8010a8a <prvInsertTimerInActiveList+0x16>
 8010ab2:	46c0      	nop			; (mov r8, r8)
 8010ab4:	20001f70 	.word	0x20001f70
 8010ab8:	20001f74 	.word	0x20001f74

08010abc <xTimerCreateTimerTask>:
{
 8010abc:	b500      	push	{lr}
 8010abe:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 8010ac0:	f7ff ffa8 	bl	8010a14 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010ac4:	4b0a      	ldr	r3, [pc, #40]	; (8010af0 <xTimerCreateTimerTask+0x34>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d00d      	beq.n	8010ae8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8010acc:	2300      	movs	r3, #0
 8010ace:	9303      	str	r3, [sp, #12]
 8010ad0:	9302      	str	r3, [sp, #8]
 8010ad2:	9301      	str	r3, [sp, #4]
 8010ad4:	3303      	adds	r3, #3
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	22a0      	movs	r2, #160	; 0xa0
 8010ada:	2300      	movs	r3, #0
 8010adc:	4905      	ldr	r1, [pc, #20]	; (8010af4 <xTimerCreateTimerTask+0x38>)
 8010ade:	4806      	ldr	r0, [pc, #24]	; (8010af8 <xTimerCreateTimerTask+0x3c>)
 8010ae0:	f7ff fa0e 	bl	800ff00 <xTaskGenericCreate>
	configASSERT( xReturn );
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d101      	bne.n	8010aec <xTimerCreateTimerTask+0x30>
 8010ae8:	b672      	cpsid	i
 8010aea:	e7fe      	b.n	8010aea <xTimerCreateTimerTask+0x2e>
}
 8010aec:	b005      	add	sp, #20
 8010aee:	bd00      	pop	{pc}
 8010af0:	20001fa4 	.word	0x20001fa4
 8010af4:	0801e4e4 	.word	0x0801e4e4
 8010af8:	08010c09 	.word	0x08010c09

08010afc <xTimerCreate>:
{
 8010afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010afe:	46c6      	mov	lr, r8
 8010b00:	000d      	movs	r5, r1
 8010b02:	4680      	mov	r8, r0
 8010b04:	0017      	movs	r7, r2
 8010b06:	001e      	movs	r6, r3
 8010b08:	b500      	push	{lr}
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8010b0a:	2900      	cmp	r1, #0
 8010b0c:	d014      	beq.n	8010b38 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8010b0e:	202c      	movs	r0, #44	; 0x2c
 8010b10:	f000 fa40 	bl	8010f94 <pvPortMalloc>
 8010b14:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 8010b16:	d00b      	beq.n	8010b30 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 8010b18:	f7ff ff7c 	bl	8010a14 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 8010b1c:	4643      	mov	r3, r8
 8010b1e:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010b20:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010b22:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8010b24:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8010b26:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010b28:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010b2a:	1d20      	adds	r0, r4, #4
 8010b2c:	f7fe fc7a 	bl	800f424 <vListInitialiseItem>
}
 8010b30:	0020      	movs	r0, r4
 8010b32:	bc80      	pop	{r7}
 8010b34:	46b8      	mov	r8, r7
 8010b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010b38:	b672      	cpsid	i
 8010b3a:	e7fe      	b.n	8010b3a <xTimerCreate+0x3e>

08010b3c <xTimerGenericCommand>:
{
 8010b3c:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8010b3e:	4e13      	ldr	r6, [pc, #76]	; (8010b8c <xTimerGenericCommand+0x50>)
{
 8010b40:	001c      	movs	r4, r3
	if( xTimerQueue != NULL )
 8010b42:	6835      	ldr	r5, [r6, #0]
{
 8010b44:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 8010b46:	2d00      	cmp	r5, #0
 8010b48:	d017      	beq.n	8010b7a <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 8010b4a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010b4c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8010b4e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010b50:	2905      	cmp	r1, #5
 8010b52:	dc0a      	bgt.n	8010b6a <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010b54:	f7ff fd70 	bl	8010638 <xTaskGetSchedulerState>
 8010b58:	2802      	cmp	r0, #2
 8010b5a:	d010      	beq.n	8010b7e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	2200      	movs	r2, #0
 8010b60:	4669      	mov	r1, sp
 8010b62:	6830      	ldr	r0, [r6, #0]
 8010b64:	f7fe fd9c 	bl	800f6a0 <xQueueGenericSend>
 8010b68:	e005      	b.n	8010b76 <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	0022      	movs	r2, r4
 8010b6e:	4669      	mov	r1, sp
 8010b70:	0028      	movs	r0, r5
 8010b72:	f7fe fe27 	bl	800f7c4 <xQueueGenericSendFromISR>
}
 8010b76:	b004      	add	sp, #16
 8010b78:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 8010b7a:	2000      	movs	r0, #0
	return xReturn;
 8010b7c:	e7fb      	b.n	8010b76 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010b7e:	2300      	movs	r3, #0
 8010b80:	4669      	mov	r1, sp
 8010b82:	6830      	ldr	r0, [r6, #0]
 8010b84:	9a08      	ldr	r2, [sp, #32]
 8010b86:	f7fe fd8b 	bl	800f6a0 <xQueueGenericSend>
 8010b8a:	e7f4      	b.n	8010b76 <xTimerGenericCommand+0x3a>
 8010b8c:	20001fa4 	.word	0x20001fa4

08010b90 <prvSwitchTimerLists>:
{
 8010b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b92:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010b94:	2300      	movs	r3, #0
{
 8010b96:	b500      	push	{lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010b98:	4698      	mov	r8, r3
 8010b9a:	4e19      	ldr	r6, [pc, #100]	; (8010c00 <prvSwitchTimerLists+0x70>)
{
 8010b9c:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010b9e:	e00c      	b.n	8010bba <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ba0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ba2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ba4:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ba6:	1d25      	adds	r5, r4, #4
 8010ba8:	0028      	movs	r0, r5
 8010baa:	f7fe fc63 	bl	800f474 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bb0:	0020      	movs	r0, r4
 8010bb2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010bb4:	69e3      	ldr	r3, [r4, #28]
 8010bb6:	2b01      	cmp	r3, #1
 8010bb8:	d00b      	beq.n	8010bd2 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010bba:	6833      	ldr	r3, [r6, #0]
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	2a00      	cmp	r2, #0
 8010bc0:	d1ee      	bne.n	8010ba0 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 8010bc2:	4a10      	ldr	r2, [pc, #64]	; (8010c04 <prvSwitchTimerLists+0x74>)
 8010bc4:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010bc6:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8010bc8:	6031      	str	r1, [r6, #0]
}
 8010bca:	b002      	add	sp, #8
 8010bcc:	bc80      	pop	{r7}
 8010bce:	46b8      	mov	r8, r7
 8010bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010bd2:	69a3      	ldr	r3, [r4, #24]
 8010bd4:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 8010bd6:	429f      	cmp	r7, r3
 8010bd8:	d206      	bcs.n	8010be8 <prvSwitchTimerLists+0x58>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010bda:	0029      	movs	r1, r5
 8010bdc:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010bde:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010be0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010be2:	f7fe fc2f 	bl	800f444 <vListInsert>
 8010be6:	e7e8      	b.n	8010bba <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010be8:	4643      	mov	r3, r8
 8010bea:	003a      	movs	r2, r7
 8010bec:	9300      	str	r3, [sp, #0]
 8010bee:	2100      	movs	r1, #0
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	0020      	movs	r0, r4
 8010bf4:	f7ff ffa2 	bl	8010b3c <xTimerGenericCommand>
				configASSERT( xResult );
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d1de      	bne.n	8010bba <prvSwitchTimerLists+0x2a>
 8010bfc:	b672      	cpsid	i
 8010bfe:	e7fe      	b.n	8010bfe <prvSwitchTimerLists+0x6e>
 8010c00:	20001f70 	.word	0x20001f70
 8010c04:	20001f74 	.word	0x20001f74

08010c08 <prvTimerTask>:
{
 8010c08:	4b67      	ldr	r3, [pc, #412]	; (8010da8 <prvTimerTask+0x1a0>)
 8010c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c0c:	4645      	mov	r5, r8
 8010c0e:	4698      	mov	r8, r3
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c10:	2300      	movs	r3, #0
{
 8010c12:	464e      	mov	r6, r9
 8010c14:	4657      	mov	r7, sl
 8010c16:	46de      	mov	lr, fp
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c18:	4699      	mov	r9, r3
{
 8010c1a:	b5e0      	push	{r5, r6, r7, lr}
 8010c1c:	4f63      	ldr	r7, [pc, #396]	; (8010dac <prvTimerTask+0x1a4>)
 8010c1e:	4e64      	ldr	r6, [pc, #400]	; (8010db0 <prvTimerTask+0x1a8>)
 8010c20:	4d64      	ldr	r5, [pc, #400]	; (8010db4 <prvTimerTask+0x1ac>)
 8010c22:	b08b      	sub	sp, #44	; 0x2c
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	681a      	ldr	r2, [r3, #0]
 8010c28:	4692      	mov	sl, r2
	if( *pxListWasEmpty == pdFALSE )
 8010c2a:	2a00      	cmp	r2, #0
 8010c2c:	d07b      	beq.n	8010d26 <prvTimerTask+0x11e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	469a      	mov	sl, r3
	vTaskSuspendAll();
 8010c34:	f7ff fa08 	bl	8010048 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8010c38:	f7ff fa0e 	bl	8010058 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8010c3c:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8010c3e:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8010c40:	4298      	cmp	r0, r3
 8010c42:	d378      	bcc.n	8010d36 <prvTimerTask+0x12e>
	xLastTime = xTimeNow;
 8010c44:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010c46:	4550      	cmp	r0, sl
 8010c48:	d300      	bcc.n	8010c4c <prvTimerTask+0x44>
 8010c4a:	e082      	b.n	8010d52 <prvTimerTask+0x14a>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8010c4c:	4653      	mov	r3, sl
 8010c4e:	6828      	ldr	r0, [r5, #0]
 8010c50:	1b19      	subs	r1, r3, r4
 8010c52:	f7fe ff3d 	bl	800fad0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010c56:	f7ff fb2b 	bl	80102b0 <xTaskResumeAll>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	d076      	beq.n	8010d4c <prvTimerTask+0x144>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010c5e:	2300      	movs	r3, #0
 8010c60:	2200      	movs	r2, #0
 8010c62:	6828      	ldr	r0, [r5, #0]
 8010c64:	a906      	add	r1, sp, #24
 8010c66:	f7fe fe2f 	bl	800f8c8 <xQueueGenericReceive>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	d0da      	beq.n	8010c24 <prvTimerTask+0x1c>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010c6e:	9b06      	ldr	r3, [sp, #24]
 8010c70:	9303      	str	r3, [sp, #12]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	db49      	blt.n	8010d0a <prvTimerTask+0x102>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010c76:	9c08      	ldr	r4, [sp, #32]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8010c78:	6963      	ldr	r3, [r4, #20]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d002      	beq.n	8010c84 <prvTimerTask+0x7c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c7e:	1d20      	adds	r0, r4, #4
 8010c80:	f7fe fbf8 	bl	800f474 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8010c84:	f7ff f9e8 	bl	8010058 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8010c88:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8010c8a:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8010c8c:	4298      	cmp	r0, r3
 8010c8e:	d358      	bcc.n	8010d42 <prvTimerTask+0x13a>
	xLastTime = xTimeNow;
 8010c90:	4653      	mov	r3, sl
 8010c92:	6033      	str	r3, [r6, #0]
			switch( xMessage.xMessageID )
 8010c94:	9b06      	ldr	r3, [sp, #24]
 8010c96:	2b09      	cmp	r3, #9
 8010c98:	d8e1      	bhi.n	8010c5e <prvTimerTask+0x56>
 8010c9a:	4642      	mov	r2, r8
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	58d3      	ldr	r3, [r2, r3]
 8010ca0:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8010ca2:	9b07      	ldr	r3, [sp, #28]
 8010ca4:	0020      	movs	r0, r4
 8010ca6:	9303      	str	r3, [sp, #12]
 8010ca8:	9a03      	ldr	r2, [sp, #12]
 8010caa:	69a3      	ldr	r3, [r4, #24]
 8010cac:	4694      	mov	ip, r2
 8010cae:	4463      	add	r3, ip
 8010cb0:	0019      	movs	r1, r3
 8010cb2:	0013      	movs	r3, r2
 8010cb4:	4652      	mov	r2, sl
 8010cb6:	f7ff fedd 	bl	8010a74 <prvInsertTimerInActiveList>
 8010cba:	2801      	cmp	r0, #1
 8010cbc:	d1cf      	bne.n	8010c5e <prvTimerTask+0x56>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cc0:	0020      	movs	r0, r4
 8010cc2:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010cc4:	69e3      	ldr	r3, [r4, #28]
 8010cc6:	2b01      	cmp	r3, #1
 8010cc8:	d1c9      	bne.n	8010c5e <prvTimerTask+0x56>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010cca:	69a1      	ldr	r1, [r4, #24]
 8010ccc:	9b07      	ldr	r3, [sp, #28]
 8010cce:	468c      	mov	ip, r1
 8010cd0:	9303      	str	r3, [sp, #12]
 8010cd2:	4463      	add	r3, ip
 8010cd4:	001a      	movs	r2, r3
 8010cd6:	464b      	mov	r3, r9
 8010cd8:	2100      	movs	r1, #0
 8010cda:	9300      	str	r3, [sp, #0]
 8010cdc:	0020      	movs	r0, r4
 8010cde:	2300      	movs	r3, #0
 8010ce0:	f7ff ff2c 	bl	8010b3c <xTimerGenericCommand>
							configASSERT( xResult );
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d1ba      	bne.n	8010c5e <prvTimerTask+0x56>
 8010ce8:	b672      	cpsid	i
 8010cea:	e7fe      	b.n	8010cea <prvTimerTask+0xe2>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010cec:	9907      	ldr	r1, [sp, #28]
 8010cee:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010cf0:	2900      	cmp	r1, #0
 8010cf2:	d057      	beq.n	8010da4 <prvTimerTask+0x19c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010cf4:	4653      	mov	r3, sl
 8010cf6:	4652      	mov	r2, sl
 8010cf8:	0020      	movs	r0, r4
 8010cfa:	4451      	add	r1, sl
 8010cfc:	f7ff feba 	bl	8010a74 <prvInsertTimerInActiveList>
					break;
 8010d00:	e7ad      	b.n	8010c5e <prvTimerTask+0x56>
					vPortFree( pxTimer );
 8010d02:	0020      	movs	r0, r4
 8010d04:	f000 f9d0 	bl	80110a8 <vPortFree>
					break;
 8010d08:	e7a9      	b.n	8010c5e <prvTimerTask+0x56>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d0c:	9303      	str	r3, [sp, #12]
 8010d0e:	9b08      	ldr	r3, [sp, #32]
 8010d10:	9903      	ldr	r1, [sp, #12]
 8010d12:	9304      	str	r3, [sp, #16]
 8010d14:	9b07      	ldr	r3, [sp, #28]
 8010d16:	9804      	ldr	r0, [sp, #16]
 8010d18:	9305      	str	r3, [sp, #20]
 8010d1a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010d1c:	9b06      	ldr	r3, [sp, #24]
 8010d1e:	9303      	str	r3, [sp, #12]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	db9c      	blt.n	8010c5e <prvTimerTask+0x56>
 8010d24:	e7a7      	b.n	8010c76 <prvTimerTask+0x6e>
	vTaskSuspendAll();
 8010d26:	f7ff f98f 	bl	8010048 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8010d2a:	f7ff f995 	bl	8010058 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8010d2e:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8010d30:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8010d32:	4298      	cmp	r0, r3
 8010d34:	d208      	bcs.n	8010d48 <prvTimerTask+0x140>
		prvSwitchTimerLists();
 8010d36:	f7ff ff2b 	bl	8010b90 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8010d3a:	6034      	str	r4, [r6, #0]
			( void ) xTaskResumeAll();
 8010d3c:	f7ff fab8 	bl	80102b0 <xTaskResumeAll>
 8010d40:	e78d      	b.n	8010c5e <prvTimerTask+0x56>
		prvSwitchTimerLists();
 8010d42:	f7ff ff25 	bl	8010b90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010d46:	e7a3      	b.n	8010c90 <prvTimerTask+0x88>
	xLastTime = xTimeNow;
 8010d48:	6034      	str	r4, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010d4a:	e77f      	b.n	8010c4c <prvTimerTask+0x44>
					portYIELD_WITHIN_API();
 8010d4c:	f000 f896 	bl	8010e7c <vPortYield>
 8010d50:	e785      	b.n	8010c5e <prvTimerTask+0x56>
				( void ) xTaskResumeAll();
 8010d52:	f7ff faad 	bl	80102b0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	68db      	ldr	r3, [r3, #12]
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	469b      	mov	fp, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d5e:	1d18      	adds	r0, r3, #4
 8010d60:	f7fe fb88 	bl	800f474 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010d64:	465b      	mov	r3, fp
 8010d66:	69db      	ldr	r3, [r3, #28]
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d004      	beq.n	8010d76 <prvTimerTask+0x16e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d6c:	465b      	mov	r3, fp
 8010d6e:	4658      	mov	r0, fp
 8010d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d72:	4798      	blx	r3
}
 8010d74:	e773      	b.n	8010c5e <prvTimerTask+0x56>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8010d76:	465b      	mov	r3, fp
 8010d78:	699b      	ldr	r3, [r3, #24]
 8010d7a:	0022      	movs	r2, r4
 8010d7c:	4453      	add	r3, sl
 8010d7e:	0019      	movs	r1, r3
 8010d80:	4658      	mov	r0, fp
 8010d82:	4653      	mov	r3, sl
 8010d84:	f7ff fe76 	bl	8010a74 <prvInsertTimerInActiveList>
 8010d88:	2801      	cmp	r0, #1
 8010d8a:	d1ef      	bne.n	8010d6c <prvTimerTask+0x164>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010d8c:	464b      	mov	r3, r9
 8010d8e:	9300      	str	r3, [sp, #0]
 8010d90:	2300      	movs	r3, #0
 8010d92:	4652      	mov	r2, sl
 8010d94:	0019      	movs	r1, r3
 8010d96:	4658      	mov	r0, fp
 8010d98:	f7ff fed0 	bl	8010b3c <xTimerGenericCommand>
			configASSERT( xResult );
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	d1e5      	bne.n	8010d6c <prvTimerTask+0x164>
 8010da0:	b672      	cpsid	i
 8010da2:	e7fe      	b.n	8010da2 <prvTimerTask+0x19a>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010da4:	b672      	cpsid	i
 8010da6:	e7fe      	b.n	8010da6 <prvTimerTask+0x19e>
 8010da8:	0801e4ec 	.word	0x0801e4ec
 8010dac:	20001f70 	.word	0x20001f70
 8010db0:	20001fa0 	.word	0x20001fa0
 8010db4:	20001fa4 	.word	0x20001fa4

08010db8 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010db8:	b510      	push	{r4, lr}
 8010dba:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8010dbc:	d006      	beq.n	8010dcc <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8010dbe:	f000 f869 	bl	8010e94 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010dc2:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8010dc4:	f000 f872 	bl	8010eac <vPortExitCritical>

	return pvReturn;
}
 8010dc8:	0020      	movs	r0, r4
 8010dca:	bd10      	pop	{r4, pc}
	configASSERT( xTimer );
 8010dcc:	b672      	cpsid	i
 8010dce:	e7fe      	b.n	8010dce <pvTimerGetTimerID+0x16>

08010dd0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010dd0:	4b03      	ldr	r3, [pc, #12]	; (8010de0 <prvTaskExitError+0x10>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	d001      	beq.n	8010ddc <prvTaskExitError+0xc>
 8010dd8:	b672      	cpsid	i
 8010dda:	e7fe      	b.n	8010dda <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8010ddc:	b672      	cpsid	i
	for( ;; );
 8010dde:	e7fe      	b.n	8010dde <prvTaskExitError+0xe>
 8010de0:	20000134 	.word	0x20000134

08010de4 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010de4:	4a06      	ldr	r2, [pc, #24]	; (8010e00 <pxCurrentTCBConst2>)
 8010de6:	6813      	ldr	r3, [r2, #0]
 8010de8:	6818      	ldr	r0, [r3, #0]
 8010dea:	3020      	adds	r0, #32
 8010dec:	f380 8809 	msr	PSP, r0
 8010df0:	2002      	movs	r0, #2
 8010df2:	f380 8814 	msr	CONTROL, r0
 8010df6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010df8:	46ae      	mov	lr, r5
 8010dfa:	b662      	cpsie	i
 8010dfc:	bd00      	pop	{pc}
 8010dfe:	46c0      	nop			; (mov r8, r8)

08010e00 <pxCurrentTCBConst2>:
 8010e00:	20001e48 	.word	0x20001e48

08010e04 <pxPortInitialiseStack>:
{
 8010e04:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010e06:	2480      	movs	r4, #128	; 0x80
 8010e08:	1f03      	subs	r3, r0, #4
 8010e0a:	0464      	lsls	r4, r4, #17
 8010e0c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8010e0e:	3b04      	subs	r3, #4
 8010e10:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010e12:	4903      	ldr	r1, [pc, #12]	; (8010e20 <pxPortInitialiseStack+0x1c>)
 8010e14:	3b04      	subs	r3, #4
 8010e16:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010e18:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 8010e1a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010e1c:	601a      	str	r2, [r3, #0]
}
 8010e1e:	bd10      	pop	{r4, pc}
 8010e20:	08010dd1 	.word	0x08010dd1

08010e24 <SVC_Handler>:
}
 8010e24:	4770      	bx	lr
 8010e26:	46c0      	nop			; (mov r8, r8)

08010e28 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010e28:	22ff      	movs	r2, #255	; 0xff
 8010e2a:	4b0f      	ldr	r3, [pc, #60]	; (8010e68 <xPortStartScheduler+0x40>)
 8010e2c:	0412      	lsls	r2, r2, #16
 8010e2e:	6819      	ldr	r1, [r3, #0]
{
 8010e30:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010e32:	430a      	orrs	r2, r1
 8010e34:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8010e36:	22ff      	movs	r2, #255	; 0xff
 8010e38:	6819      	ldr	r1, [r3, #0]
 8010e3a:	0612      	lsls	r2, r2, #24
 8010e3c:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e3e:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8010e40:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e42:	4b0a      	ldr	r3, [pc, #40]	; (8010e6c <xPortStartScheduler+0x44>)
 8010e44:	0089      	lsls	r1, r1, #2
 8010e46:	6818      	ldr	r0, [r3, #0]
 8010e48:	f7ef f982 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8010e4c:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e4e:	4b08      	ldr	r3, [pc, #32]	; (8010e70 <xPortStartScheduler+0x48>)
 8010e50:	3801      	subs	r0, #1
 8010e52:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8010e54:	4b07      	ldr	r3, [pc, #28]	; (8010e74 <xPortStartScheduler+0x4c>)
 8010e56:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8010e58:	2200      	movs	r2, #0
 8010e5a:	4b07      	ldr	r3, [pc, #28]	; (8010e78 <xPortStartScheduler+0x50>)
 8010e5c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8010e5e:	f7ff ffc1 	bl	8010de4 <vPortStartFirstTask>
	prvTaskExitError();
 8010e62:	f7ff ffb5 	bl	8010dd0 <prvTaskExitError>
 8010e66:	46c0      	nop			; (mov r8, r8)
 8010e68:	e000ed20 	.word	0xe000ed20
 8010e6c:	20000120 	.word	0x20000120
 8010e70:	e000e014 	.word	0xe000e014
 8010e74:	e000e010 	.word	0xe000e010
 8010e78:	20000134 	.word	0x20000134

08010e7c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010e7c:	2280      	movs	r2, #128	; 0x80
 8010e7e:	4b04      	ldr	r3, [pc, #16]	; (8010e90 <vPortYield+0x14>)
 8010e80:	0552      	lsls	r2, r2, #21
 8010e82:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010e84:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010e88:	f3bf 8f6f 	isb	sy
}
 8010e8c:	4770      	bx	lr
 8010e8e:	46c0      	nop			; (mov r8, r8)
 8010e90:	e000ed04 	.word	0xe000ed04

08010e94 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010e94:	b672      	cpsid	i
    uxCriticalNesting++;
 8010e96:	4a04      	ldr	r2, [pc, #16]	; (8010ea8 <vPortEnterCritical+0x14>)
 8010e98:	6813      	ldr	r3, [r2, #0]
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8010e9e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010ea2:	f3bf 8f6f 	isb	sy
}
 8010ea6:	4770      	bx	lr
 8010ea8:	20000134 	.word	0x20000134

08010eac <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010eac:	4a05      	ldr	r2, [pc, #20]	; (8010ec4 <vPortExitCritical+0x18>)
 8010eae:	6813      	ldr	r3, [r2, #0]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d101      	bne.n	8010eb8 <vPortExitCritical+0xc>
 8010eb4:	b672      	cpsid	i
 8010eb6:	e7fe      	b.n	8010eb6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8010eb8:	3b01      	subs	r3, #1
 8010eba:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d100      	bne.n	8010ec2 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 8010ec0:	b662      	cpsie	i
}
 8010ec2:	4770      	bx	lr
 8010ec4:	20000134 	.word	0x20000134

08010ec8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8010ec8:	f3ef 8010 	mrs	r0, PRIMASK
 8010ecc:	b672      	cpsid	i
 8010ece:	4770      	bx	lr
}
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	46c0      	nop			; (mov r8, r8)

08010ed4 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8010ed4:	f380 8810 	msr	PRIMASK, r0
 8010ed8:	4770      	bx	lr
 8010eda:	46c0      	nop			; (mov r8, r8)

08010edc <PendSV_Handler>:
	__asm volatile
 8010edc:	f3ef 8009 	mrs	r0, PSP
 8010ee0:	4b0e      	ldr	r3, [pc, #56]	; (8010f1c <pxCurrentTCBConst>)
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	3820      	subs	r0, #32
 8010ee6:	6010      	str	r0, [r2, #0]
 8010ee8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010eea:	4644      	mov	r4, r8
 8010eec:	464d      	mov	r5, r9
 8010eee:	4656      	mov	r6, sl
 8010ef0:	465f      	mov	r7, fp
 8010ef2:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010ef4:	b508      	push	{r3, lr}
 8010ef6:	b672      	cpsid	i
 8010ef8:	f7ff fac4 	bl	8010484 <vTaskSwitchContext>
 8010efc:	b662      	cpsie	i
 8010efe:	bc0c      	pop	{r2, r3}
 8010f00:	6811      	ldr	r1, [r2, #0]
 8010f02:	6808      	ldr	r0, [r1, #0]
 8010f04:	3010      	adds	r0, #16
 8010f06:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010f08:	46a0      	mov	r8, r4
 8010f0a:	46a9      	mov	r9, r5
 8010f0c:	46b2      	mov	sl, r6
 8010f0e:	46bb      	mov	fp, r7
 8010f10:	f380 8809 	msr	PSP, r0
 8010f14:	3820      	subs	r0, #32
 8010f16:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010f18:	4718      	bx	r3
 8010f1a:	46c0      	nop			; (mov r8, r8)

08010f1c <pxCurrentTCBConst>:
 8010f1c:	20001e48 	.word	0x20001e48

08010f20 <xPortSysTickHandler>:
{
 8010f20:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f22:	f7ff ffd1 	bl	8010ec8 <ulSetInterruptMaskFromISR>
 8010f26:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8010f28:	f7ff f8a2 	bl	8010070 <xTaskIncrementTick>
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	d003      	beq.n	8010f38 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8010f30:	2280      	movs	r2, #128	; 0x80
 8010f32:	4b03      	ldr	r3, [pc, #12]	; (8010f40 <xPortSysTickHandler+0x20>)
 8010f34:	0552      	lsls	r2, r2, #21
 8010f36:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010f38:	0020      	movs	r0, r4
 8010f3a:	f7ff ffcb 	bl	8010ed4 <vClearInterruptMaskFromISR>
}
 8010f3e:	bd10      	pop	{r4, pc}
 8010f40:	e000ed04 	.word	0xe000ed04

08010f44 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010f44:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010f46:	4b11      	ldr	r3, [pc, #68]	; (8010f8c <prvInsertBlockIntoFreeList+0x48>)
 8010f48:	001a      	movs	r2, r3
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	4283      	cmp	r3, r0
 8010f4e:	d3fb      	bcc.n	8010f48 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010f50:	6851      	ldr	r1, [r2, #4]
 8010f52:	1854      	adds	r4, r2, r1
 8010f54:	42a0      	cmp	r0, r4
 8010f56:	d013      	beq.n	8010f80 <prvInsertBlockIntoFreeList+0x3c>
 8010f58:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010f5a:	1844      	adds	r4, r0, r1
 8010f5c:	42a3      	cmp	r3, r4
 8010f5e:	d004      	beq.n	8010f6a <prvInsertBlockIntoFreeList+0x26>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010f60:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010f62:	4290      	cmp	r0, r2
 8010f64:	d000      	beq.n	8010f68 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f66:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f68:	bd10      	pop	{r4, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010f6a:	4c09      	ldr	r4, [pc, #36]	; (8010f90 <prvInsertBlockIntoFreeList+0x4c>)
 8010f6c:	6824      	ldr	r4, [r4, #0]
 8010f6e:	42a3      	cmp	r3, r4
 8010f70:	d0f6      	beq.n	8010f60 <prvInsertBlockIntoFreeList+0x1c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010f72:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010f74:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010f76:	46a4      	mov	ip, r4
 8010f78:	4461      	add	r1, ip
 8010f7a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010f7c:	6003      	str	r3, [r0, #0]
 8010f7e:	e7f0      	b.n	8010f62 <prvInsertBlockIntoFreeList+0x1e>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010f80:	6840      	ldr	r0, [r0, #4]
 8010f82:	1809      	adds	r1, r1, r0
 8010f84:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8010f86:	0010      	movs	r0, r2
 8010f88:	e7e7      	b.n	8010f5a <prvInsertBlockIntoFreeList+0x16>
 8010f8a:	46c0      	nop			; (mov r8, r8)
 8010f8c:	200069f0 	.word	0x200069f0
 8010f90:	20001fa8 	.word	0x20001fa8

08010f94 <pvPortMalloc>:
{
 8010f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f96:	46c6      	mov	lr, r8
 8010f98:	b500      	push	{lr}
 8010f9a:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010f9c:	f7ff f854 	bl	8010048 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010fa0:	493a      	ldr	r1, [pc, #232]	; (801108c <pvPortMalloc+0xf8>)
 8010fa2:	680b      	ldr	r3, [r1, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d036      	beq.n	8011016 <pvPortMalloc+0x82>
 8010fa8:	4b39      	ldr	r3, [pc, #228]	; (8011090 <pvPortMalloc+0xfc>)
 8010faa:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010fac:	4225      	tst	r5, r4
 8010fae:	d129      	bne.n	8011004 <pvPortMalloc+0x70>
			if( xWantedSize > 0 )
 8010fb0:	2c00      	cmp	r4, #0
 8010fb2:	d027      	beq.n	8011004 <pvPortMalloc+0x70>
				xWantedSize += xHeapStructSize;
 8010fb4:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010fb6:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 8010fb8:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010fba:	421a      	tst	r2, r3
 8010fbc:	d001      	beq.n	8010fc2 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010fbe:	4393      	bics	r3, r2
 8010fc0:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d01e      	beq.n	8011004 <pvPortMalloc+0x70>
 8010fc6:	4f33      	ldr	r7, [pc, #204]	; (8011094 <pvPortMalloc+0x100>)
 8010fc8:	683a      	ldr	r2, [r7, #0]
 8010fca:	4690      	mov	r8, r2
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d319      	bcc.n	8011004 <pvPortMalloc+0x70>
				pxBlock = xStart.pxNextFreeBlock;
 8010fd0:	4831      	ldr	r0, [pc, #196]	; (8011098 <pvPortMalloc+0x104>)
 8010fd2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fd4:	e004      	b.n	8010fe0 <pvPortMalloc+0x4c>
 8010fd6:	6826      	ldr	r6, [r4, #0]
 8010fd8:	2e00      	cmp	r6, #0
 8010fda:	d004      	beq.n	8010fe6 <pvPortMalloc+0x52>
 8010fdc:	0020      	movs	r0, r4
 8010fde:	0034      	movs	r4, r6
 8010fe0:	6862      	ldr	r2, [r4, #4]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d3f7      	bcc.n	8010fd6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8010fe6:	6809      	ldr	r1, [r1, #0]
 8010fe8:	42a1      	cmp	r1, r4
 8010fea:	d00b      	beq.n	8011004 <pvPortMalloc+0x70>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010fec:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010fee:	6821      	ldr	r1, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010ff0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ff2:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ff4:	1ad1      	subs	r1, r2, r3
 8010ff6:	2910      	cmp	r1, #16
 8010ff8:	d92e      	bls.n	8011058 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ffa:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ffc:	0742      	lsls	r2, r0, #29
 8010ffe:	d026      	beq.n	801104e <pvPortMalloc+0xba>
 8011000:	b672      	cpsid	i
 8011002:	e7fe      	b.n	8011002 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 8011004:	f7ff f954 	bl	80102b0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8011008:	2600      	movs	r6, #0
 801100a:	f7fc ffa1 	bl	800df50 <vApplicationMallocFailedHook>
}
 801100e:	0030      	movs	r0, r6
 8011010:	bc80      	pop	{r7}
 8011012:	46b8      	mov	r8, r7
 8011014:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011016:	2207      	movs	r2, #7
	ulAddress = ( uint32_t ) ucHeap;
 8011018:	4820      	ldr	r0, [pc, #128]	; (801109c <pvPortMalloc+0x108>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801101a:	4202      	tst	r2, r0
 801101c:	d12f      	bne.n	801107e <pvPortMalloc+0xea>
 801101e:	4b20      	ldr	r3, [pc, #128]	; (80110a0 <pvPortMalloc+0x10c>)
 8011020:	18c2      	adds	r2, r0, r3
 8011022:	0003      	movs	r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8011024:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011026:	4e1c      	ldr	r6, [pc, #112]	; (8011098 <pvPortMalloc+0x104>)
	ulAddress -= xHeapStructSize;
 8011028:	3a08      	subs	r2, #8
	xStart.xBlockSize = ( size_t ) 0;
 801102a:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801102c:	6030      	str	r0, [r6, #0]
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 801102e:	2607      	movs	r6, #7
 8011030:	43b2      	bics	r2, r6
	pxEnd->pxNextFreeBlock = NULL;
 8011032:	6015      	str	r5, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011034:	6055      	str	r5, [r2, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011036:	2580      	movs	r5, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8011038:	1ad3      	subs	r3, r2, r3
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801103a:	c00c      	stmia	r0!, {r2, r3}
	pxEnd = ( void * ) ulAddress;
 801103c:	600a      	str	r2, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801103e:	4a19      	ldr	r2, [pc, #100]	; (80110a4 <pvPortMalloc+0x110>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011040:	062d      	lsls	r5, r5, #24
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011044:	4a13      	ldr	r2, [pc, #76]	; (8011094 <pvPortMalloc+0x100>)
 8011046:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011048:	4b11      	ldr	r3, [pc, #68]	; (8011090 <pvPortMalloc+0xfc>)
 801104a:	601d      	str	r5, [r3, #0]
}
 801104c:	e7ae      	b.n	8010fac <pvPortMalloc+0x18>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801104e:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011050:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8011052:	f7ff ff77 	bl	8010f44 <prvInsertBlockIntoFreeList>
 8011056:	6862      	ldr	r2, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011058:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801105a:	4912      	ldr	r1, [pc, #72]	; (80110a4 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801105c:	1a9b      	subs	r3, r3, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801105e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011060:	603b      	str	r3, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011062:	4283      	cmp	r3, r0
 8011064:	d309      	bcc.n	801107a <pvPortMalloc+0xe6>
					pxBlock->pxNextFreeBlock = NULL;
 8011066:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011068:	432a      	orrs	r2, r5
					pxBlock->pxNextFreeBlock = NULL;
 801106a:	6023      	str	r3, [r4, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801106c:	6062      	str	r2, [r4, #4]
	( void ) xTaskResumeAll();
 801106e:	f7ff f91f 	bl	80102b0 <xTaskResumeAll>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011072:	0773      	lsls	r3, r6, #29
 8011074:	d0cb      	beq.n	801100e <pvPortMalloc+0x7a>
 8011076:	b672      	cpsid	i
 8011078:	e7fe      	b.n	8011078 <pvPortMalloc+0xe4>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801107a:	600b      	str	r3, [r1, #0]
 801107c:	e7f3      	b.n	8011066 <pvPortMalloc+0xd2>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 801107e:	1dc3      	adds	r3, r0, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8011080:	4393      	bics	r3, r2
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8011082:	4a07      	ldr	r2, [pc, #28]	; (80110a0 <pvPortMalloc+0x10c>)
 8011084:	1882      	adds	r2, r0, r2
 8011086:	0018      	movs	r0, r3
 8011088:	e7cc      	b.n	8011024 <pvPortMalloc+0x90>
 801108a:	46c0      	nop			; (mov r8, r8)
 801108c:	20001fa8 	.word	0x20001fa8
 8011090:	200069e4 	.word	0x200069e4
 8011094:	200069e8 	.word	0x200069e8
 8011098:	200069f0 	.word	0x200069f0
 801109c:	20001fac 	.word	0x20001fac
 80110a0:	00004a38 	.word	0x00004a38
 80110a4:	200069ec 	.word	0x200069ec

080110a8 <vPortFree>:
{
 80110a8:	b510      	push	{r4, lr}
 80110aa:	1e04      	subs	r4, r0, #0
	if( pv != NULL )
 80110ac:	d01b      	beq.n	80110e6 <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80110ae:	4a0e      	ldr	r2, [pc, #56]	; (80110e8 <vPortFree+0x40>)
 80110b0:	3c08      	subs	r4, #8
 80110b2:	6863      	ldr	r3, [r4, #4]
 80110b4:	6812      	ldr	r2, [r2, #0]
 80110b6:	421a      	tst	r2, r3
 80110b8:	d004      	beq.n	80110c4 <vPortFree+0x1c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80110ba:	6821      	ldr	r1, [r4, #0]
 80110bc:	2900      	cmp	r1, #0
 80110be:	d003      	beq.n	80110c8 <vPortFree+0x20>
 80110c0:	b672      	cpsid	i
 80110c2:	e7fe      	b.n	80110c2 <vPortFree+0x1a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80110c4:	b672      	cpsid	i
 80110c6:	e7fe      	b.n	80110c6 <vPortFree+0x1e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80110c8:	4393      	bics	r3, r2
 80110ca:	6063      	str	r3, [r4, #4]
				vTaskSuspendAll();
 80110cc:	f7fe ffbc 	bl	8010048 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80110d0:	4a06      	ldr	r2, [pc, #24]	; (80110ec <vPortFree+0x44>)
 80110d2:	6863      	ldr	r3, [r4, #4]
 80110d4:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80110d6:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 80110d8:	468c      	mov	ip, r1
 80110da:	4463      	add	r3, ip
 80110dc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80110de:	f7ff ff31 	bl	8010f44 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80110e2:	f7ff f8e5 	bl	80102b0 <xTaskResumeAll>
}
 80110e6:	bd10      	pop	{r4, pc}
 80110e8:	200069e4 	.word	0x200069e4
 80110ec:	200069e8 	.word	0x200069e8

080110f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80110f0:	b510      	push	{r4, lr}
 80110f2:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80110f4:	f002 fc56 	bl	80139a4 <HAL_RCC_GetHCLKFreq>
 80110f8:	21fa      	movs	r1, #250	; 0xfa
 80110fa:	0089      	lsls	r1, r1, #2
 80110fc:	f7ef f828 	bl	8000150 <__udivsi3>
 8011100:	f000 fb76 	bl	80117f0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8011104:	2001      	movs	r0, #1
 8011106:	2200      	movs	r2, #0
 8011108:	0021      	movs	r1, r4
 801110a:	4240      	negs	r0, r0
 801110c:	f000 fb2a 	bl	8011764 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8011110:	2000      	movs	r0, #0
 8011112:	bd10      	pop	{r4, pc}

08011114 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011114:	2110      	movs	r1, #16
 8011116:	4a06      	ldr	r2, [pc, #24]	; (8011130 <HAL_Init+0x1c>)
{
 8011118:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801111a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 801111c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801111e:	430b      	orrs	r3, r1
 8011120:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8011122:	f7ff ffe5 	bl	80110f0 <HAL_InitTick>
  HAL_MspInit();
 8011126:	f002 f82f 	bl	8013188 <HAL_MspInit>
}
 801112a:	2000      	movs	r0, #0
 801112c:	bd10      	pop	{r4, pc}
 801112e:	46c0      	nop			; (mov r8, r8)
 8011130:	40022000 	.word	0x40022000

08011134 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8011134:	4a02      	ldr	r2, [pc, #8]	; (8011140 <HAL_IncTick+0xc>)
 8011136:	6813      	ldr	r3, [r2, #0]
 8011138:	3301      	adds	r3, #1
 801113a:	6013      	str	r3, [r2, #0]
}
 801113c:	4770      	bx	lr
 801113e:	46c0      	nop			; (mov r8, r8)
 8011140:	200069f8 	.word	0x200069f8

08011144 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8011144:	4b01      	ldr	r3, [pc, #4]	; (801114c <HAL_GetTick+0x8>)
 8011146:	6818      	ldr	r0, [r3, #0]
}
 8011148:	4770      	bx	lr
 801114a:	46c0      	nop			; (mov r8, r8)
 801114c:	200069f8 	.word	0x200069f8

08011150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8011150:	b510      	push	{r4, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8011156:	f7ff fff5 	bl	8011144 <HAL_GetTick>
 801115a:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 801115c:	f7ff fff2 	bl	8011144 <HAL_GetTick>
 8011160:	9b01      	ldr	r3, [sp, #4]
 8011162:	1b00      	subs	r0, r0, r4
 8011164:	4298      	cmp	r0, r3
 8011166:	d3f9      	bcc.n	801115c <HAL_Delay+0xc>
  {
  }
}
 8011168:	b002      	add	sp, #8
 801116a:	bd10      	pop	{r4, pc}

0801116c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 801116c:	4b01      	ldr	r3, [pc, #4]	; (8011174 <HAL_GetREVID+0x8>)
 801116e:	6818      	ldr	r0, [r3, #0]
 8011170:	0c00      	lsrs	r0, r0, #16
}
 8011172:	4770      	bx	lr
 8011174:	40015800 	.word	0x40015800

08011178 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8011178:	4b02      	ldr	r3, [pc, #8]	; (8011184 <HAL_GetDEVID+0xc>)
 801117a:	6818      	ldr	r0, [r3, #0]
 801117c:	0500      	lsls	r0, r0, #20
 801117e:	0d00      	lsrs	r0, r0, #20
}
 8011180:	4770      	bx	lr
 8011182:	46c0      	nop			; (mov r8, r8)
 8011184:	40015800 	.word	0x40015800

08011188 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8011188:	2303      	movs	r3, #3
 801118a:	6802      	ldr	r2, [r0, #0]
{
 801118c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 801118e:	6891      	ldr	r1, [r2, #8]
{
 8011190:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8011192:	400b      	ands	r3, r1
 8011194:	2b01      	cmp	r3, #1
 8011196:	d001      	beq.n	801119c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8011198:	2000      	movs	r0, #0
}
 801119a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 801119c:	6811      	ldr	r1, [r2, #0]
 801119e:	420b      	tst	r3, r1
 80111a0:	d00e      	beq.n	80111c0 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80111a2:	2305      	movs	r3, #5
 80111a4:	6891      	ldr	r1, [r2, #8]
 80111a6:	400b      	ands	r3, r1
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d00d      	beq.n	80111c8 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80111ac:	2210      	movs	r2, #16
 80111ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80111b0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80111b2:	4313      	orrs	r3, r2
 80111b4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80111b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80111b8:	3a0f      	subs	r2, #15
 80111ba:	4313      	orrs	r3, r2
 80111bc:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80111be:	e7ec      	b.n	801119a <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 80111c0:	68d3      	ldr	r3, [r2, #12]
 80111c2:	041b      	lsls	r3, r3, #16
 80111c4:	d5e8      	bpl.n	8011198 <ADC_Disable+0x10>
 80111c6:	e7ec      	b.n	80111a2 <ADC_Disable+0x1a>
      __HAL_ADC_DISABLE(hadc);
 80111c8:	2102      	movs	r1, #2
 80111ca:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80111cc:	2601      	movs	r6, #1
      __HAL_ADC_DISABLE(hadc);
 80111ce:	430b      	orrs	r3, r1
 80111d0:	6093      	str	r3, [r2, #8]
 80111d2:	2303      	movs	r3, #3
 80111d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80111d6:	f7ff ffb5 	bl	8011144 <HAL_GetTick>
 80111da:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80111dc:	e004      	b.n	80111e8 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80111de:	f7ff ffb1 	bl	8011144 <HAL_GetTick>
 80111e2:	1b40      	subs	r0, r0, r5
 80111e4:	2802      	cmp	r0, #2
 80111e6:	d804      	bhi.n	80111f2 <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80111e8:	6823      	ldr	r3, [r4, #0]
 80111ea:	689b      	ldr	r3, [r3, #8]
 80111ec:	421e      	tst	r6, r3
 80111ee:	d1f6      	bne.n	80111de <ADC_Disable+0x56>
 80111f0:	e7d2      	b.n	8011198 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80111f2:	2210      	movs	r2, #16
 80111f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80111f6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80111f8:	4313      	orrs	r3, r2
 80111fa:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80111fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80111fe:	431e      	orrs	r6, r3
 8011200:	64a6      	str	r6, [r4, #72]	; 0x48
        return HAL_ERROR;
 8011202:	e7ca      	b.n	801119a <ADC_Disable+0x12>

08011204 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8011204:	2300      	movs	r3, #0
{
 8011206:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011208:	6802      	ldr	r2, [r0, #0]
{
 801120a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 801120c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 801120e:	6891      	ldr	r1, [r2, #8]
 8011210:	3303      	adds	r3, #3
{
 8011212:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011214:	400b      	ands	r3, r1
 8011216:	2b01      	cmp	r3, #1
 8011218:	d031      	beq.n	801127e <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801121a:	6891      	ldr	r1, [r2, #8]
 801121c:	4b20      	ldr	r3, [pc, #128]	; (80112a0 <ADC_Enable+0x9c>)
 801121e:	4219      	tst	r1, r3
 8011220:	d123      	bne.n	801126a <ADC_Enable+0x66>
    __HAL_ADC_ENABLE(hadc);
 8011222:	2101      	movs	r1, #1
 8011224:	6893      	ldr	r3, [r2, #8]
 8011226:	430b      	orrs	r3, r1
 8011228:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 801122a:	4b1e      	ldr	r3, [pc, #120]	; (80112a4 <ADC_Enable+0xa0>)
 801122c:	491e      	ldr	r1, [pc, #120]	; (80112a8 <ADC_Enable+0xa4>)
 801122e:	6818      	ldr	r0, [r3, #0]
 8011230:	f7ee ff8e 	bl	8000150 <__udivsi3>
 8011234:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8011236:	9b01      	ldr	r3, [sp, #4]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d005      	beq.n	8011248 <ADC_Enable+0x44>
      wait_loop_index--;
 801123c:	9b01      	ldr	r3, [sp, #4]
 801123e:	3b01      	subs	r3, #1
 8011240:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8011242:	9b01      	ldr	r3, [sp, #4]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d1f9      	bne.n	801123c <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8011248:	f7ff ff7c 	bl	8011144 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801124c:	2601      	movs	r6, #1
    tickstart = HAL_GetTick();
 801124e:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011250:	e004      	b.n	801125c <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8011252:	f7ff ff77 	bl	8011144 <HAL_GetTick>
 8011256:	1b40      	subs	r0, r0, r5
 8011258:	2802      	cmp	r0, #2
 801125a:	d817      	bhi.n	801128c <ADC_Enable+0x88>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801125c:	6823      	ldr	r3, [r4, #0]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	421e      	tst	r6, r3
 8011262:	d0f6      	beq.n	8011252 <ADC_Enable+0x4e>
  return HAL_OK;
 8011264:	2000      	movs	r0, #0
}
 8011266:	b002      	add	sp, #8
 8011268:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801126a:	2210      	movs	r2, #16
 801126c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 801126e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011270:	4313      	orrs	r3, r2
 8011272:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011274:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011276:	3a0f      	subs	r2, #15
 8011278:	4313      	orrs	r3, r2
 801127a:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 801127c:	e7f3      	b.n	8011266 <ADC_Enable+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 801127e:	6811      	ldr	r1, [r2, #0]
 8011280:	420b      	tst	r3, r1
 8011282:	d1ef      	bne.n	8011264 <ADC_Enable+0x60>
 8011284:	68d3      	ldr	r3, [r2, #12]
 8011286:	041b      	lsls	r3, r3, #16
 8011288:	d4ec      	bmi.n	8011264 <ADC_Enable+0x60>
 801128a:	e7c6      	b.n	801121a <ADC_Enable+0x16>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801128c:	2210      	movs	r2, #16
 801128e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8011290:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011292:	4313      	orrs	r3, r2
 8011294:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011296:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011298:	431e      	orrs	r6, r3
 801129a:	64a6      	str	r6, [r4, #72]	; 0x48
        return HAL_ERROR;
 801129c:	e7e3      	b.n	8011266 <ADC_Enable+0x62>
 801129e:	46c0      	nop			; (mov r8, r8)
 80112a0:	80000017 	.word	0x80000017
 80112a4:	20000120 	.word	0x20000120
 80112a8:	000f4240 	.word	0x000f4240

080112ac <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80112ac:	2204      	movs	r2, #4
 80112ae:	6803      	ldr	r3, [r0, #0]
{
 80112b0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80112b2:	6899      	ldr	r1, [r3, #8]
{
 80112b4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80112b6:	420a      	tst	r2, r1
 80112b8:	d010      	beq.n	80112dc <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80112ba:	6899      	ldr	r1, [r3, #8]
 80112bc:	420a      	tst	r2, r1
 80112be:	d10f      	bne.n	80112e0 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80112c0:	f7ff ff40 	bl	8011144 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80112c4:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 80112c6:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80112c8:	e004      	b.n	80112d4 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80112ca:	f7ff ff3b 	bl	8011144 <HAL_GetTick>
 80112ce:	1b40      	subs	r0, r0, r5
 80112d0:	2802      	cmp	r0, #2
 80112d2:	d80d      	bhi.n	80112f0 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80112d4:	6823      	ldr	r3, [r4, #0]
 80112d6:	689b      	ldr	r3, [r3, #8]
 80112d8:	421e      	tst	r6, r3
 80112da:	d1f6      	bne.n	80112ca <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80112dc:	2000      	movs	r0, #0
}
 80112de:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80112e0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80112e2:	0792      	lsls	r2, r2, #30
 80112e4:	d4ec      	bmi.n	80112c0 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80112e6:	2110      	movs	r1, #16
 80112e8:	689a      	ldr	r2, [r3, #8]
 80112ea:	430a      	orrs	r2, r1
 80112ec:	609a      	str	r2, [r3, #8]
 80112ee:	e7e7      	b.n	80112c0 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80112f0:	2210      	movs	r2, #16
 80112f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80112f4:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80112f6:	4313      	orrs	r3, r2
 80112f8:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80112fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80112fc:	3a0f      	subs	r2, #15
 80112fe:	4313      	orrs	r3, r2
 8011300:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8011302:	e7ec      	b.n	80112de <ADC_ConversionStop+0x32>

08011304 <HAL_ADC_Init>:
{
 8011304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011306:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8011308:	d100      	bne.n	801130c <HAL_ADC_Init+0x8>
 801130a:	e083      	b.n	8011414 <HAL_ADC_Init+0x110>
  if (hadc->State == HAL_ADC_STATE_RESET)
 801130c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801130e:	2b00      	cmp	r3, #0
 8011310:	d06a      	beq.n	80113e8 <HAL_ADC_Init+0xe4>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8011312:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011314:	06db      	lsls	r3, r3, #27
 8011316:	d461      	bmi.n	80113dc <HAL_ADC_Init+0xd8>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8011318:	2104      	movs	r1, #4
 801131a:	000d      	movs	r5, r1
 801131c:	6823      	ldr	r3, [r4, #0]
 801131e:	689a      	ldr	r2, [r3, #8]
 8011320:	4015      	ands	r5, r2
      (tmp_hal_status == HAL_OK)                                &&
 8011322:	4211      	tst	r1, r2
 8011324:	d15a      	bne.n	80113dc <HAL_ADC_Init+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 8011326:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011328:	4943      	ldr	r1, [pc, #268]	; (8011438 <HAL_ADC_Init+0x134>)
 801132a:	400a      	ands	r2, r1
 801132c:	3106      	adds	r1, #6
 801132e:	31ff      	adds	r1, #255	; 0xff
 8011330:	430a      	orrs	r2, r1
 8011332:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8011334:	2203      	movs	r2, #3
 8011336:	6899      	ldr	r1, [r3, #8]
 8011338:	400a      	ands	r2, r1
 801133a:	2a01      	cmp	r2, #1
 801133c:	d05a      	beq.n	80113f4 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 801133e:	2118      	movs	r1, #24
 8011340:	68da      	ldr	r2, [r3, #12]
 8011342:	438a      	bics	r2, r1
 8011344:	68a1      	ldr	r1, [r4, #8]
 8011346:	430a      	orrs	r2, r1
 8011348:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 801134a:	691a      	ldr	r2, [r3, #16]
 801134c:	6861      	ldr	r1, [r4, #4]
 801134e:	0092      	lsls	r2, r2, #2
 8011350:	0892      	lsrs	r2, r2, #2
 8011352:	430a      	orrs	r2, r1
 8011354:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8011356:	68da      	ldr	r2, [r3, #12]
 8011358:	4938      	ldr	r1, [pc, #224]	; (801143c <HAL_ADC_Init+0x138>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 801135a:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 801135c:	400a      	ands	r2, r1
 801135e:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8011360:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8011362:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8011364:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8011366:	69e2      	ldr	r2, [r4, #28]
 8011368:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 801136a:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 801136c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801136e:	3a01      	subs	r2, #1
 8011370:	1e50      	subs	r0, r2, #1
 8011372:	4182      	sbcs	r2, r0
 8011374:	0310      	lsls	r0, r2, #12
 8011376:	68e2      	ldr	r2, [r4, #12]
 8011378:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801137a:	6922      	ldr	r2, [r4, #16]
 801137c:	4339      	orrs	r1, r7
 801137e:	2a02      	cmp	r2, #2
 8011380:	d100      	bne.n	8011384 <HAL_ADC_Init+0x80>
 8011382:	2504      	movs	r5, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8011384:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011386:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8011388:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 801138a:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801138c:	4302      	orrs	r2, r0
 801138e:	432a      	orrs	r2, r5
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8011390:	2901      	cmp	r1, #1
 8011392:	d04b      	beq.n	801142c <HAL_ADC_Init+0x128>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011394:	20c2      	movs	r0, #194	; 0xc2
 8011396:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011398:	30ff      	adds	r0, #255	; 0xff
 801139a:	4281      	cmp	r1, r0
 801139c:	d002      	beq.n	80113a4 <HAL_ADC_Init+0xa0>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 801139e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80113a0:	4301      	orrs	r1, r0
 80113a2:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80113a4:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80113a6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80113a8:	4311      	orrs	r1, r2
 80113aa:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80113ac:	2180      	movs	r1, #128	; 0x80
 80113ae:	0549      	lsls	r1, r1, #21
 80113b0:	428d      	cmp	r5, r1
 80113b2:	d026      	beq.n	8011402 <HAL_ADC_Init+0xfe>
 80113b4:	1e69      	subs	r1, r5, #1
 80113b6:	2906      	cmp	r1, #6
 80113b8:	d923      	bls.n	8011402 <HAL_ADC_Init+0xfe>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	4920      	ldr	r1, [pc, #128]	; (8011440 <HAL_ADC_Init+0x13c>)
 80113be:	400b      	ands	r3, r1
 80113c0:	4293      	cmp	r3, r2
 80113c2:	d029      	beq.n	8011418 <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 80113c4:	2212      	movs	r2, #18
 80113c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 80113c8:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80113ca:	4393      	bics	r3, r2
 80113cc:	3a02      	subs	r2, #2
 80113ce:	4313      	orrs	r3, r2
 80113d0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80113d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80113d4:	3a0f      	subs	r2, #15
 80113d6:	4313      	orrs	r3, r2
 80113d8:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80113da:	e004      	b.n	80113e6 <HAL_ADC_Init+0xe2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80113dc:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 80113de:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80113e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80113e2:	4313      	orrs	r3, r2
 80113e4:	6463      	str	r3, [r4, #68]	; 0x44
}
 80113e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 80113e8:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80113ea:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80113ec:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80113ee:	f7f7 fbcf 	bl	8008b90 <HAL_ADC_MspInit>
 80113f2:	e78e      	b.n	8011312 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80113f4:	6819      	ldr	r1, [r3, #0]
 80113f6:	420a      	tst	r2, r1
 80113f8:	d1ad      	bne.n	8011356 <HAL_ADC_Init+0x52>
 80113fa:	68da      	ldr	r2, [r3, #12]
 80113fc:	0412      	lsls	r2, r2, #16
 80113fe:	d4aa      	bmi.n	8011356 <HAL_ADC_Init+0x52>
 8011400:	e79d      	b.n	801133e <HAL_ADC_Init+0x3a>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8011402:	2107      	movs	r1, #7
 8011404:	6958      	ldr	r0, [r3, #20]
 8011406:	4388      	bics	r0, r1
 8011408:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 801140a:	6958      	ldr	r0, [r3, #20]
 801140c:	4029      	ands	r1, r5
 801140e:	4301      	orrs	r1, r0
 8011410:	6159      	str	r1, [r3, #20]
 8011412:	e7d2      	b.n	80113ba <HAL_ADC_Init+0xb6>
    return HAL_ERROR;
 8011414:	2001      	movs	r0, #1
 8011416:	e7e6      	b.n	80113e6 <HAL_ADC_Init+0xe2>
      ADC_CLEAR_ERRORCODE(hadc);
 8011418:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 801141a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 801141c:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 801141e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011420:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8011422:	4393      	bics	r3, r2
 8011424:	3a02      	subs	r2, #2
 8011426:	4313      	orrs	r3, r2
 8011428:	6463      	str	r3, [r4, #68]	; 0x44
 801142a:	e7dc      	b.n	80113e6 <HAL_ADC_Init+0xe2>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 801142c:	2e00      	cmp	r6, #0
 801142e:	d1b1      	bne.n	8011394 <HAL_ADC_Init+0x90>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8011430:	2180      	movs	r1, #128	; 0x80
 8011432:	0249      	lsls	r1, r1, #9
 8011434:	430a      	orrs	r2, r1
 8011436:	e7ad      	b.n	8011394 <HAL_ADC_Init+0x90>
 8011438:	fffffefd 	.word	0xfffffefd
 801143c:	fffe0219 	.word	0xfffe0219
 8011440:	833fffe7 	.word	0x833fffe7

08011444 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011444:	6803      	ldr	r3, [r0, #0]
{
 8011446:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011448:	689a      	ldr	r2, [r3, #8]
{
 801144a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801144c:	0752      	lsls	r2, r2, #29
 801144e:	d421      	bmi.n	8011494 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 8011450:	2240      	movs	r2, #64	; 0x40
 8011452:	5c81      	ldrb	r1, [r0, r2]
 8011454:	2901      	cmp	r1, #1
 8011456:	d01d      	beq.n	8011494 <HAL_ADC_Start+0x50>
 8011458:	2101      	movs	r1, #1
 801145a:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 801145c:	69c2      	ldr	r2, [r0, #28]
 801145e:	2a01      	cmp	r2, #1
 8011460:	d112      	bne.n	8011488 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 8011462:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011464:	490c      	ldr	r1, [pc, #48]	; (8011498 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8011466:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8011468:	4011      	ands	r1, r2
 801146a:	2280      	movs	r2, #128	; 0x80
 801146c:	0052      	lsls	r2, r2, #1
 801146e:	430a      	orrs	r2, r1
 8011470:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8011472:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 8011474:	2200      	movs	r2, #0
 8011476:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8011478:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801147a:	321c      	adds	r2, #28
 801147c:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 801147e:	689a      	ldr	r2, [r3, #8]
 8011480:	393c      	subs	r1, #60	; 0x3c
 8011482:	430a      	orrs	r2, r1
 8011484:	609a      	str	r2, [r3, #8]
}
 8011486:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8011488:	f7ff febc 	bl	8011204 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 801148c:	2800      	cmp	r0, #0
 801148e:	d1fa      	bne.n	8011486 <HAL_ADC_Start+0x42>
 8011490:	6823      	ldr	r3, [r4, #0]
 8011492:	e7e6      	b.n	8011462 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 8011494:	2002      	movs	r0, #2
 8011496:	e7f6      	b.n	8011486 <HAL_ADC_Start+0x42>
 8011498:	fffff0fe 	.word	0xfffff0fe

0801149c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 801149c:	2340      	movs	r3, #64	; 0x40
{ 
 801149e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80114a0:	5cc2      	ldrb	r2, [r0, r3]
{ 
 80114a2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80114a4:	2a01      	cmp	r2, #1
 80114a6:	d014      	beq.n	80114d2 <HAL_ADC_Stop+0x36>
 80114a8:	2501      	movs	r5, #1
 80114aa:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80114ac:	f7ff fefe 	bl	80112ac <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d003      	beq.n	80114bc <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80114b4:	2340      	movs	r3, #64	; 0x40
 80114b6:	2200      	movs	r2, #0
 80114b8:	54e2      	strb	r2, [r4, r3]
}
 80114ba:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80114bc:	0020      	movs	r0, r4
 80114be:	f7ff fe63 	bl	8011188 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80114c2:	2800      	cmp	r0, #0
 80114c4:	d1f6      	bne.n	80114b4 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80114c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80114c8:	4a03      	ldr	r2, [pc, #12]	; (80114d8 <HAL_ADC_Stop+0x3c>)
 80114ca:	4013      	ands	r3, r2
 80114cc:	431d      	orrs	r5, r3
 80114ce:	6465      	str	r5, [r4, #68]	; 0x44
 80114d0:	e7f0      	b.n	80114b4 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80114d2:	2002      	movs	r0, #2
 80114d4:	e7f1      	b.n	80114ba <HAL_ADC_Stop+0x1e>
 80114d6:	46c0      	nop			; (mov r8, r8)
 80114d8:	fffffefe 	.word	0xfffffefe

080114dc <HAL_ADC_PollForConversion>:
{
 80114dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80114de:	6945      	ldr	r5, [r0, #20]
{
 80114e0:	0006      	movs	r6, r0
 80114e2:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80114e4:	2d08      	cmp	r5, #8
 80114e6:	d004      	beq.n	80114f2 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80114e8:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80114ea:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	07db      	lsls	r3, r3, #31
 80114f0:	d43e      	bmi.n	8011570 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 80114f2:	f7ff fe27 	bl	8011144 <HAL_GetTick>
 80114f6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80114f8:	6832      	ldr	r2, [r6, #0]
 80114fa:	e001      	b.n	8011500 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 80114fc:	1c63      	adds	r3, r4, #1
 80114fe:	d127      	bne.n	8011550 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8011500:	6813      	ldr	r3, [r2, #0]
 8011502:	421d      	tst	r5, r3
 8011504:	d0fa      	beq.n	80114fc <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011506:	2380      	movs	r3, #128	; 0x80
 8011508:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	430b      	orrs	r3, r1
 801150e:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8011510:	23c0      	movs	r3, #192	; 0xc0
 8011512:	68d1      	ldr	r1, [r2, #12]
 8011514:	011b      	lsls	r3, r3, #4
 8011516:	4219      	tst	r1, r3
 8011518:	d113      	bne.n	8011542 <HAL_ADC_PollForConversion+0x66>
 801151a:	6a33      	ldr	r3, [r6, #32]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d110      	bne.n	8011542 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8011520:	6813      	ldr	r3, [r2, #0]
 8011522:	071b      	lsls	r3, r3, #28
 8011524:	d50d      	bpl.n	8011542 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011526:	6893      	ldr	r3, [r2, #8]
 8011528:	075b      	lsls	r3, r3, #29
 801152a:	d42a      	bmi.n	8011582 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801152c:	210c      	movs	r1, #12
 801152e:	6853      	ldr	r3, [r2, #4]
 8011530:	438b      	bics	r3, r1
 8011532:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8011534:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8011536:	4917      	ldr	r1, [pc, #92]	; (8011594 <HAL_ADC_PollForConversion+0xb8>)
 8011538:	400b      	ands	r3, r1
 801153a:	3104      	adds	r1, #4
 801153c:	31ff      	adds	r1, #255	; 0xff
 801153e:	430b      	orrs	r3, r1
 8011540:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8011542:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 8011544:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8011546:	2b00      	cmp	r3, #0
 8011548:	d101      	bne.n	801154e <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801154a:	330c      	adds	r3, #12
 801154c:	6013      	str	r3, [r2, #0]
}
 801154e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011550:	2c00      	cmp	r4, #0
 8011552:	d004      	beq.n	801155e <HAL_ADC_PollForConversion+0x82>
 8011554:	f7ff fdf6 	bl	8011144 <HAL_GetTick>
 8011558:	1bc0      	subs	r0, r0, r7
 801155a:	42a0      	cmp	r0, r4
 801155c:	d9cc      	bls.n	80114f8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801155e:	2204      	movs	r2, #4
 8011560:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 8011562:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8011564:	4313      	orrs	r3, r2
 8011566:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8011568:	2200      	movs	r2, #0
 801156a:	2340      	movs	r3, #64	; 0x40
 801156c:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 801156e:	e7ee      	b.n	801154e <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011570:	2220      	movs	r2, #32
 8011572:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011574:	4313      	orrs	r3, r2
 8011576:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8011578:	2200      	movs	r2, #0
 801157a:	2340      	movs	r3, #64	; 0x40
 801157c:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 801157e:	2001      	movs	r0, #1
 8011580:	e7e5      	b.n	801154e <HAL_ADC_PollForConversion+0x72>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011582:	2120      	movs	r1, #32
 8011584:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8011586:	430b      	orrs	r3, r1
 8011588:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801158a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 801158c:	391f      	subs	r1, #31
 801158e:	430b      	orrs	r3, r1
 8011590:	64b3      	str	r3, [r6, #72]	; 0x48
 8011592:	e7d6      	b.n	8011542 <HAL_ADC_PollForConversion+0x66>
 8011594:	fffffefe 	.word	0xfffffefe

08011598 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8011598:	2208      	movs	r2, #8
 801159a:	6803      	ldr	r3, [r0, #0]
 801159c:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 801159e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80115a0:	4770      	bx	lr
 80115a2:	46c0      	nop			; (mov r8, r8)

080115a4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 80115a4:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80115a6:	2240      	movs	r2, #64	; 0x40
{
 80115a8:	b570      	push	{r4, r5, r6, lr}
 80115aa:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80115ac:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80115ae:	5c83      	ldrb	r3, [r0, r2]
{
 80115b0:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80115b2:	6b85      	ldr	r5, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d05f      	beq.n	8011678 <HAL_ADC_ConfigChannel+0xd4>
 80115b8:	2301      	movs	r3, #1
 80115ba:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80115bc:	6802      	ldr	r2, [r0, #0]
 80115be:	6890      	ldr	r0, [r2, #8]
 80115c0:	0740      	lsls	r0, r0, #29
 80115c2:	d509      	bpl.n	80115d8 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80115c4:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 80115c6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80115c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80115ca:	4313      	orrs	r3, r2
 80115cc:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80115ce:	2340      	movs	r3, #64	; 0x40
 80115d0:	2200      	movs	r2, #0
 80115d2:	54e2      	strb	r2, [r4, r3]
}
 80115d4:	b002      	add	sp, #8
 80115d6:	bd70      	pop	{r4, r5, r6, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80115d8:	4835      	ldr	r0, [pc, #212]	; (80116b0 <HAL_ADC_ConfigChannel+0x10c>)
 80115da:	684e      	ldr	r6, [r1, #4]
 80115dc:	4286      	cmp	r6, r0
 80115de:	d02f      	beq.n	8011640 <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80115e0:	6808      	ldr	r0, [r1, #0]
 80115e2:	6a96      	ldr	r6, [r2, #40]	; 0x28
 80115e4:	4083      	lsls	r3, r0
 80115e6:	4333      	orrs	r3, r6
 80115e8:	6293      	str	r3, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80115ea:	2380      	movs	r3, #128	; 0x80
 80115ec:	055b      	lsls	r3, r3, #21
 80115ee:	429d      	cmp	r5, r3
 80115f0:	d00f      	beq.n	8011612 <HAL_ADC_ConfigChannel+0x6e>
 80115f2:	3d01      	subs	r5, #1
 80115f4:	2d06      	cmp	r5, #6
 80115f6:	d90c      	bls.n	8011612 <HAL_ADC_ConfigChannel+0x6e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80115f8:	2307      	movs	r3, #7
 80115fa:	688d      	ldr	r5, [r1, #8]
 80115fc:	6951      	ldr	r1, [r2, #20]
 80115fe:	4019      	ands	r1, r3
 8011600:	428d      	cmp	r5, r1
 8011602:	d006      	beq.n	8011612 <HAL_ADC_ConfigChannel+0x6e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8011604:	6951      	ldr	r1, [r2, #20]
 8011606:	4399      	bics	r1, r3
 8011608:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 801160a:	6951      	ldr	r1, [r2, #20]
 801160c:	402b      	ands	r3, r5
 801160e:	430b      	orrs	r3, r1
 8011610:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8011612:	0003      	movs	r3, r0
 8011614:	3b10      	subs	r3, #16
 8011616:	2b02      	cmp	r3, #2
 8011618:	d810      	bhi.n	801163c <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801161a:	4a26      	ldr	r2, [pc, #152]	; (80116b4 <HAL_ADC_ConfigChannel+0x110>)
 801161c:	6813      	ldr	r3, [r2, #0]
 801161e:	2810      	cmp	r0, #16
 8011620:	d02e      	beq.n	8011680 <HAL_ADC_ConfigChannel+0xdc>
 8011622:	3811      	subs	r0, #17
 8011624:	1e41      	subs	r1, r0, #1
 8011626:	4188      	sbcs	r0, r1
 8011628:	21c0      	movs	r1, #192	; 0xc0
 801162a:	4240      	negs	r0, r0
 801162c:	0409      	lsls	r1, r1, #16
 801162e:	4008      	ands	r0, r1
 8011630:	2180      	movs	r1, #128	; 0x80
 8011632:	03c9      	lsls	r1, r1, #15
 8011634:	468c      	mov	ip, r1
 8011636:	4460      	add	r0, ip
 8011638:	4318      	orrs	r0, r3
 801163a:	6010      	str	r0, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801163c:	2000      	movs	r0, #0
 801163e:	e7c6      	b.n	80115ce <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8011640:	6809      	ldr	r1, [r1, #0]
 8011642:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8011644:	408b      	lsls	r3, r1
 8011646:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8011648:	000b      	movs	r3, r1
 801164a:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 801164c:	6290      	str	r0, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801164e:	2b02      	cmp	r3, #2
 8011650:	d8f4      	bhi.n	801163c <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8011652:	4b18      	ldr	r3, [pc, #96]	; (80116b4 <HAL_ADC_ConfigChannel+0x110>)
 8011654:	681a      	ldr	r2, [r3, #0]
 8011656:	2910      	cmp	r1, #16
 8011658:	d010      	beq.n	801167c <HAL_ADC_ConfigChannel+0xd8>
 801165a:	3911      	subs	r1, #17
 801165c:	424b      	negs	r3, r1
 801165e:	414b      	adcs	r3, r1
 8011660:	21c0      	movs	r1, #192	; 0xc0
 8011662:	425b      	negs	r3, r3
 8011664:	0409      	lsls	r1, r1, #16
 8011666:	4019      	ands	r1, r3
 8011668:	4b13      	ldr	r3, [pc, #76]	; (80116b8 <HAL_ADC_ConfigChannel+0x114>)
 801166a:	469c      	mov	ip, r3
 801166c:	4461      	add	r1, ip
 801166e:	4b11      	ldr	r3, [pc, #68]	; (80116b4 <HAL_ADC_ConfigChannel+0x110>)
 8011670:	4011      	ands	r1, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011672:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8011674:	6019      	str	r1, [r3, #0]
 8011676:	e7aa      	b.n	80115ce <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8011678:	2002      	movs	r0, #2
 801167a:	e7ab      	b.n	80115d4 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801167c:	490f      	ldr	r1, [pc, #60]	; (80116bc <HAL_ADC_ConfigChannel+0x118>)
 801167e:	e7f6      	b.n	801166e <HAL_ADC_ConfigChannel+0xca>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8011680:	2080      	movs	r0, #128	; 0x80
 8011682:	0400      	lsls	r0, r0, #16
 8011684:	4303      	orrs	r3, r0
 8011686:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8011688:	4b0d      	ldr	r3, [pc, #52]	; (80116c0 <HAL_ADC_ConfigChannel+0x11c>)
 801168a:	490e      	ldr	r1, [pc, #56]	; (80116c4 <HAL_ADC_ConfigChannel+0x120>)
 801168c:	6818      	ldr	r0, [r3, #0]
 801168e:	f7ee fd5f 	bl	8000150 <__udivsi3>
 8011692:	0083      	lsls	r3, r0, #2
 8011694:	181b      	adds	r3, r3, r0
 8011696:	005b      	lsls	r3, r3, #1
 8011698:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 801169a:	9b01      	ldr	r3, [sp, #4]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d0cd      	beq.n	801163c <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 80116a0:	9b01      	ldr	r3, [sp, #4]
 80116a2:	3b01      	subs	r3, #1
 80116a4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80116a6:	9b01      	ldr	r3, [sp, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d1f9      	bne.n	80116a0 <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80116ac:	2000      	movs	r0, #0
 80116ae:	e78e      	b.n	80115ce <HAL_ADC_ConfigChannel+0x2a>
 80116b0:	00001001 	.word	0x00001001
 80116b4:	40012708 	.word	0x40012708
 80116b8:	feffffff 	.word	0xfeffffff
 80116bc:	ff7fffff 	.word	0xff7fffff
 80116c0:	20000120 	.word	0x20000120
 80116c4:	000f4240 	.word	0x000f4240

080116c8 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80116c8:	2340      	movs	r3, #64	; 0x40
{
 80116ca:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80116cc:	5cc2      	ldrb	r2, [r0, r3]
{
 80116ce:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80116d0:	2a01      	cmp	r2, #1
 80116d2:	d042      	beq.n	801175a <HAL_ADCEx_Calibration_Start+0x92>
 80116d4:	2201      	movs	r2, #1
 80116d6:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80116d8:	6802      	ldr	r2, [r0, #0]
 80116da:	3b3d      	subs	r3, #61	; 0x3d
 80116dc:	6891      	ldr	r1, [r2, #8]
 80116de:	400b      	ands	r3, r1
 80116e0:	2b01      	cmp	r3, #1
 80116e2:	d105      	bne.n	80116f0 <HAL_ADCEx_Calibration_Start+0x28>
 80116e4:	6811      	ldr	r1, [r2, #0]
 80116e6:	420b      	tst	r3, r1
 80116e8:	d126      	bne.n	8011738 <HAL_ADCEx_Calibration_Start+0x70>
 80116ea:	68d3      	ldr	r3, [r2, #12]
 80116ec:	041b      	lsls	r3, r3, #16
 80116ee:	d423      	bmi.n	8011738 <HAL_ADCEx_Calibration_Start+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80116f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80116f2:	491b      	ldr	r1, [pc, #108]	; (8011760 <HAL_ADCEx_Calibration_Start+0x98>)
 80116f4:	400b      	ands	r3, r1
 80116f6:	3106      	adds	r1, #6
 80116f8:	31ff      	adds	r1, #255	; 0xff
 80116fa:	430b      	orrs	r3, r1
 80116fc:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80116fe:	2380      	movs	r3, #128	; 0x80
 8011700:	6891      	ldr	r1, [r2, #8]
 8011702:	061b      	lsls	r3, r3, #24
 8011704:	430b      	orrs	r3, r1
 8011706:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 8011708:	f7ff fd1c 	bl	8011144 <HAL_GetTick>
 801170c:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 801170e:	e004      	b.n	801171a <HAL_ADCEx_Calibration_Start+0x52>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8011710:	f7ff fd18 	bl	8011144 <HAL_GetTick>
 8011714:	1b40      	subs	r0, r0, r5
 8011716:	2802      	cmp	r0, #2
 8011718:	d814      	bhi.n	8011744 <HAL_ADCEx_Calibration_Start+0x7c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 801171a:	6823      	ldr	r3, [r4, #0]
 801171c:	689b      	ldr	r3, [r3, #8]
 801171e:	2b00      	cmp	r3, #0
 8011720:	dbf6      	blt.n	8011710 <HAL_ADCEx_Calibration_Start+0x48>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011722:	2203      	movs	r2, #3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011724:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8011726:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011728:	4393      	bics	r3, r2
 801172a:	3a02      	subs	r2, #2
 801172c:	4313      	orrs	r3, r2
 801172e:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8011730:	2340      	movs	r3, #64	; 0x40
 8011732:	2200      	movs	r2, #0
 8011734:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8011736:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011738:	2220      	movs	r2, #32
 801173a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 801173c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801173e:	4313      	orrs	r3, r2
 8011740:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8011742:	e7f5      	b.n	8011730 <HAL_ADCEx_Calibration_Start+0x68>
        ADC_STATE_CLR_SET(hadc->State,
 8011744:	2212      	movs	r2, #18
 8011746:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8011748:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 801174a:	4393      	bics	r3, r2
 801174c:	3a02      	subs	r2, #2
 801174e:	4313      	orrs	r3, r2
 8011750:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8011752:	2200      	movs	r2, #0
 8011754:	2340      	movs	r3, #64	; 0x40
 8011756:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8011758:	e7ed      	b.n	8011736 <HAL_ADCEx_Calibration_Start+0x6e>
  __HAL_LOCK(hadc);
 801175a:	2002      	movs	r0, #2
 801175c:	e7eb      	b.n	8011736 <HAL_ADCEx_Calibration_Start+0x6e>
 801175e:	46c0      	nop			; (mov r8, r8)
 8011760:	fffffefd 	.word	0xfffffefd

08011764 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011764:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8011766:	2800      	cmp	r0, #0
 8011768:	db14      	blt.n	8011794 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801176a:	4b15      	ldr	r3, [pc, #84]	; (80117c0 <HAL_NVIC_SetPriority+0x5c>)
 801176c:	2203      	movs	r2, #3
 801176e:	469c      	mov	ip, r3
 8011770:	23ff      	movs	r3, #255	; 0xff
 8011772:	0884      	lsrs	r4, r0, #2
 8011774:	4010      	ands	r0, r2
 8011776:	001a      	movs	r2, r3
 8011778:	26c0      	movs	r6, #192	; 0xc0
 801177a:	00c0      	lsls	r0, r0, #3
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801177c:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801177e:	4082      	lsls	r2, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011780:	400b      	ands	r3, r1
 8011782:	4083      	lsls	r3, r0
 8011784:	00a4      	lsls	r4, r4, #2
 8011786:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011788:	00b6      	lsls	r6, r6, #2
 801178a:	59a5      	ldr	r5, [r4, r6]
 801178c:	4395      	bics	r5, r2
 801178e:	432b      	orrs	r3, r5
 8011790:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8011792:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011794:	4a0b      	ldr	r2, [pc, #44]	; (80117c4 <HAL_NVIC_SetPriority+0x60>)
 8011796:	2403      	movs	r4, #3
 8011798:	4694      	mov	ip, r2
 801179a:	230f      	movs	r3, #15
 801179c:	22ff      	movs	r2, #255	; 0xff
 801179e:	4003      	ands	r3, r0
 80117a0:	4020      	ands	r0, r4
 80117a2:	0014      	movs	r4, r2
 80117a4:	00c0      	lsls	r0, r0, #3
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80117a6:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80117a8:	4084      	lsls	r4, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80117aa:	400a      	ands	r2, r1
 80117ac:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80117ae:	3b08      	subs	r3, #8
 80117b0:	089b      	lsrs	r3, r3, #2
 80117b2:	009b      	lsls	r3, r3, #2
 80117b4:	4463      	add	r3, ip
 80117b6:	69dd      	ldr	r5, [r3, #28]
 80117b8:	43a5      	bics	r5, r4
 80117ba:	432a      	orrs	r2, r5
 80117bc:	61da      	str	r2, [r3, #28]
}
 80117be:	e7e8      	b.n	8011792 <HAL_NVIC_SetPriority+0x2e>
 80117c0:	e000e100 	.word	0xe000e100
 80117c4:	e000ed00 	.word	0xe000ed00

080117c8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80117c8:	231f      	movs	r3, #31
 80117ca:	4018      	ands	r0, r3
 80117cc:	3b1e      	subs	r3, #30
 80117ce:	4083      	lsls	r3, r0
 80117d0:	4a01      	ldr	r2, [pc, #4]	; (80117d8 <HAL_NVIC_EnableIRQ+0x10>)
 80117d2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80117d4:	4770      	bx	lr
 80117d6:	46c0      	nop			; (mov r8, r8)
 80117d8:	e000e100 	.word	0xe000e100

080117dc <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80117dc:	231f      	movs	r3, #31
 80117de:	4018      	ands	r0, r3
 80117e0:	3b1e      	subs	r3, #30
 80117e2:	4083      	lsls	r3, r0
 80117e4:	2280      	movs	r2, #128	; 0x80
 80117e6:	4901      	ldr	r1, [pc, #4]	; (80117ec <HAL_NVIC_DisableIRQ+0x10>)
 80117e8:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80117ea:	4770      	bx	lr
 80117ec:	e000e100 	.word	0xe000e100

080117f0 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80117f0:	2280      	movs	r2, #128	; 0x80
 80117f2:	1e43      	subs	r3, r0, #1
 80117f4:	0452      	lsls	r2, r2, #17
 80117f6:	2001      	movs	r0, #1
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d20e      	bcs.n	801181a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80117fc:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80117fe:	4a07      	ldr	r2, [pc, #28]	; (801181c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011800:	4807      	ldr	r0, [pc, #28]	; (8011820 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011802:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011804:	6a03      	ldr	r3, [r0, #32]
 8011806:	0609      	lsls	r1, r1, #24
 8011808:	021b      	lsls	r3, r3, #8
 801180a:	0a1b      	lsrs	r3, r3, #8
 801180c:	430b      	orrs	r3, r1
 801180e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011810:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011812:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011814:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011816:	3307      	adds	r3, #7
 8011818:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 801181a:	4770      	bx	lr
 801181c:	e000e010 	.word	0xe000e010
 8011820:	e000ed00 	.word	0xe000ed00

08011824 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8011824:	4a05      	ldr	r2, [pc, #20]	; (801183c <HAL_SYSTICK_CLKSourceConfig+0x18>)
 8011826:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8011828:	2804      	cmp	r0, #4
 801182a:	d003      	beq.n	8011834 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 801182c:	2104      	movs	r1, #4
 801182e:	438b      	bics	r3, r1
 8011830:	6013      	str	r3, [r2, #0]
  }
}
 8011832:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8011834:	4318      	orrs	r0, r3
 8011836:	6010      	str	r0, [r2, #0]
 8011838:	e7fb      	b.n	8011832 <HAL_SYSTICK_CLKSourceConfig+0xe>
 801183a:	46c0      	nop			; (mov r8, r8)
 801183c:	e000e010 	.word	0xe000e010

08011840 <CRC_Handle_8>:
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8011840:	0893      	lsrs	r3, r2, #2
{
 8011842:	b5f0      	push	{r4, r5, r6, r7, lr}
   for(i = 0; i < (BufferLength/4); i++)
 8011844:	469c      	mov	ip, r3
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8011846:	6806      	ldr	r6, [r0, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8011848:	2b00      	cmp	r3, #0
 801184a:	d010      	beq.n	801186e <CRC_Handle_8+0x2e>
 801184c:	000c      	movs	r4, r1
 801184e:	009f      	lsls	r7, r3, #2
 8011850:	187f      	adds	r7, r7, r1
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8011852:	7823      	ldrb	r3, [r4, #0]
 8011854:	7865      	ldrb	r5, [r4, #1]
 8011856:	061b      	lsls	r3, r3, #24
 8011858:	042d      	lsls	r5, r5, #16
 801185a:	432b      	orrs	r3, r5
 801185c:	78e5      	ldrb	r5, [r4, #3]
 801185e:	432b      	orrs	r3, r5
 8011860:	78a5      	ldrb	r5, [r4, #2]
 8011862:	3404      	adds	r4, #4
 8011864:	022d      	lsls	r5, r5, #8
 8011866:	432b      	orrs	r3, r5
 8011868:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 801186a:	42a7      	cmp	r7, r4
 801186c:	d1f1      	bne.n	8011852 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 801186e:	2303      	movs	r3, #3
 8011870:	001c      	movs	r4, r3
 8011872:	4014      	ands	r4, r2
 8011874:	4213      	tst	r3, r2
 8011876:	d00b      	beq.n	8011890 <CRC_Handle_8+0x50>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8011878:	4663      	mov	r3, ip
 801187a:	009b      	lsls	r3, r3, #2
     if  (BufferLength%4 == 1)
 801187c:	2c01      	cmp	r4, #1
 801187e:	d009      	beq.n	8011894 <CRC_Handle_8+0x54>
     }
     if  (BufferLength%4 == 2)
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8011880:	5cca      	ldrb	r2, [r1, r3]
 8011882:	18c9      	adds	r1, r1, r3
 8011884:	784b      	ldrb	r3, [r1, #1]
 8011886:	0212      	lsls	r2, r2, #8
 8011888:	4313      	orrs	r3, r2
 801188a:	8033      	strh	r3, [r6, #0]
     if  (BufferLength%4 == 2)
 801188c:	2c02      	cmp	r4, #2
 801188e:	d105      	bne.n	801189c <CRC_Handle_8+0x5c>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8011890:	6830      	ldr	r0, [r6, #0]
}
 8011892:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8011894:	5c5b      	ldrb	r3, [r3, r1]
 8011896:	7033      	strb	r3, [r6, #0]
     if  (BufferLength%4 == 2)
 8011898:	6806      	ldr	r6, [r0, #0]
     if  (BufferLength%4 == 3)
 801189a:	e7f9      	b.n	8011890 <CRC_Handle_8+0x50>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 801189c:	788b      	ldrb	r3, [r1, #2]
 801189e:	7033      	strb	r3, [r6, #0]
 80118a0:	6806      	ldr	r6, [r0, #0]
 80118a2:	e7f5      	b.n	8011890 <CRC_Handle_8+0x50>

080118a4 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80118a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 80118a6:	6806      	ldr	r6, [r0, #0]
  for(i = 0; i < (BufferLength/2); i++)
 80118a8:	0857      	lsrs	r7, r2, #1
 80118aa:	d00a      	beq.n	80118c2 <CRC_Handle_16+0x1e>
 80118ac:	0008      	movs	r0, r1
 80118ae:	00bd      	lsls	r5, r7, #2
 80118b0:	186d      	adds	r5, r5, r1
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 80118b2:	8803      	ldrh	r3, [r0, #0]
 80118b4:	8844      	ldrh	r4, [r0, #2]
 80118b6:	041b      	lsls	r3, r3, #16
 80118b8:	4323      	orrs	r3, r4
 80118ba:	3004      	adds	r0, #4
 80118bc:	6033      	str	r3, [r6, #0]
  for(i = 0; i < (BufferLength/2); i++)
 80118be:	4285      	cmp	r5, r0
 80118c0:	d1f7      	bne.n	80118b2 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 80118c2:	07d3      	lsls	r3, r2, #31
 80118c4:	d502      	bpl.n	80118cc <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 80118c6:	00bf      	lsls	r7, r7, #2
 80118c8:	5a7b      	ldrh	r3, [r7, r1]
 80118ca:	8033      	strh	r3, [r6, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80118cc:	6830      	ldr	r0, [r6, #0]
}
 80118ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118d0 <HAL_CRC_Init>:
{
 80118d0:	b510      	push	{r4, lr}
 80118d2:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 80118d4:	d024      	beq.n	8011920 <HAL_CRC_Init+0x50>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80118d6:	7f43      	ldrb	r3, [r0, #29]
 80118d8:	b2da      	uxtb	r2, r3
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d022      	beq.n	8011924 <HAL_CRC_Init+0x54>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80118de:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80118e0:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80118e2:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80118e4:	f000 f8aa 	bl	8011a3c <HAL_CRCEx_Init>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d119      	bne.n	8011920 <HAL_CRC_Init+0x50>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80118ec:	7963      	ldrb	r3, [r4, #5]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d011      	beq.n	8011916 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80118f2:	6823      	ldr	r3, [r4, #0]
 80118f4:	6922      	ldr	r2, [r4, #16]
 80118f6:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80118f8:	2160      	movs	r1, #96	; 0x60
 80118fa:	689a      	ldr	r2, [r3, #8]
 80118fc:	438a      	bics	r2, r1
 80118fe:	6961      	ldr	r1, [r4, #20]
 8011900:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8011902:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8011904:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8011906:	689a      	ldr	r2, [r3, #8]
 8011908:	438a      	bics	r2, r1
 801190a:	69a1      	ldr	r1, [r4, #24]
 801190c:	430a      	orrs	r2, r1
 801190e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8011910:	2301      	movs	r3, #1
 8011912:	7763      	strb	r3, [r4, #29]
}
 8011914:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8011916:	2201      	movs	r2, #1
 8011918:	6823      	ldr	r3, [r4, #0]
 801191a:	4252      	negs	r2, r2
 801191c:	611a      	str	r2, [r3, #16]
 801191e:	e7eb      	b.n	80118f8 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8011920:	2001      	movs	r0, #1
 8011922:	e7f7      	b.n	8011914 <HAL_CRC_Init+0x44>
    hcrc->Lock = HAL_UNLOCKED;
 8011924:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8011926:	f7fc f803 	bl	800d930 <HAL_CRC_MspInit>
 801192a:	e7d8      	b.n	80118de <HAL_CRC_Init+0xe>

0801192c <HAL_CRC_Accumulate>:
{
 801192c:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 801192e:	7f03      	ldrb	r3, [r0, #28]
{
 8011930:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8011932:	2b01      	cmp	r3, #1
 8011934:	d021      	beq.n	801197a <HAL_CRC_Accumulate+0x4e>
 8011936:	2301      	movs	r3, #1
 8011938:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 801193a:	3301      	adds	r3, #1
 801193c:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 801193e:	6a03      	ldr	r3, [r0, #32]
 8011940:	2b02      	cmp	r3, #2
 8011942:	d009      	beq.n	8011958 <HAL_CRC_Accumulate+0x2c>
 8011944:	2b03      	cmp	r3, #3
 8011946:	d00d      	beq.n	8011964 <HAL_CRC_Accumulate+0x38>
 8011948:	2b01      	cmp	r3, #1
 801194a:	d008      	beq.n	801195e <HAL_CRC_Accumulate+0x32>
 801194c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 801194e:	2301      	movs	r3, #1
 8011950:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8011952:	2300      	movs	r3, #0
 8011954:	7723      	strb	r3, [r4, #28]
}
 8011956:	bd10      	pop	{r4, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8011958:	f7ff ffa4 	bl	80118a4 <CRC_Handle_16>
      break;
 801195c:	e7f7      	b.n	801194e <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 801195e:	f7ff ff6f 	bl	8011840 <CRC_Handle_8>
      break;
 8011962:	e7f4      	b.n	801194e <HAL_CRC_Accumulate+0x22>
        hcrc->Instance->DR = pBuffer[index];
 8011964:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8011966:	2a00      	cmp	r2, #0
 8011968:	d005      	beq.n	8011976 <HAL_CRC_Accumulate+0x4a>
 801196a:	0092      	lsls	r2, r2, #2
 801196c:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 801196e:	c908      	ldmia	r1!, {r3}
 8011970:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8011972:	4291      	cmp	r1, r2
 8011974:	d1fb      	bne.n	801196e <HAL_CRC_Accumulate+0x42>
      temp = hcrc->Instance->DR;
 8011976:	6800      	ldr	r0, [r0, #0]
      break;
 8011978:	e7e9      	b.n	801194e <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 801197a:	2002      	movs	r0, #2
 801197c:	e7eb      	b.n	8011956 <HAL_CRC_Accumulate+0x2a>
 801197e:	46c0      	nop			; (mov r8, r8)

08011980 <HAL_CRC_Calculate>:
{
 8011980:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 8011982:	7f03      	ldrb	r3, [r0, #28]
{
 8011984:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8011986:	2b01      	cmp	r3, #1
 8011988:	d026      	beq.n	80119d8 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 801198a:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 801198c:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 801198e:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8011990:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 8011992:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 8011994:	6898      	ldr	r0, [r3, #8]
 8011996:	4328      	orrs	r0, r5
 8011998:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 801199a:	6a20      	ldr	r0, [r4, #32]
 801199c:	2802      	cmp	r0, #2
 801199e:	d009      	beq.n	80119b4 <HAL_CRC_Calculate+0x34>
 80119a0:	2803      	cmp	r0, #3
 80119a2:	d00f      	beq.n	80119c4 <HAL_CRC_Calculate+0x44>
 80119a4:	2801      	cmp	r0, #1
 80119a6:	d009      	beq.n	80119bc <HAL_CRC_Calculate+0x3c>
 80119a8:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 80119aa:	2301      	movs	r3, #1
 80119ac:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80119ae:	2300      	movs	r3, #0
 80119b0:	7723      	strb	r3, [r4, #28]
}
 80119b2:	bd70      	pop	{r4, r5, r6, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80119b4:	0020      	movs	r0, r4
 80119b6:	f7ff ff75 	bl	80118a4 <CRC_Handle_16>
      break;
 80119ba:	e7f6      	b.n	80119aa <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80119bc:	0020      	movs	r0, r4
 80119be:	f7ff ff3f 	bl	8011840 <CRC_Handle_8>
      break;
 80119c2:	e7f2      	b.n	80119aa <HAL_CRC_Calculate+0x2a>
      for(index = 0; index < BufferLength; index++)
 80119c4:	2a00      	cmp	r2, #0
 80119c6:	d005      	beq.n	80119d4 <HAL_CRC_Calculate+0x54>
 80119c8:	0092      	lsls	r2, r2, #2
 80119ca:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80119cc:	c901      	ldmia	r1!, {r0}
 80119ce:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 80119d0:	4291      	cmp	r1, r2
 80119d2:	d1fb      	bne.n	80119cc <HAL_CRC_Calculate+0x4c>
      temp = hcrc->Instance->DR;
 80119d4:	6818      	ldr	r0, [r3, #0]
      break;
 80119d6:	e7e8      	b.n	80119aa <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 80119d8:	2002      	movs	r0, #2
 80119da:	e7ea      	b.n	80119b2 <HAL_CRC_Calculate+0x32>

080119dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80119dc:	b530      	push	{r4, r5, lr}
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80119de:	2301      	movs	r3, #1
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80119e0:	241f      	movs	r4, #31
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80119e2:	e001      	b.n	80119e8 <HAL_CRCEx_Polynomial_Set+0xc>
 80119e4:	3c01      	subs	r4, #1
 80119e6:	d312      	bcc.n	8011a0e <HAL_CRCEx_Polynomial_Set+0x32>
 80119e8:	001d      	movs	r5, r3
 80119ea:	40a5      	lsls	r5, r4
 80119ec:	4229      	tst	r1, r5
 80119ee:	d0f9      	beq.n	80119e4 <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 80119f0:	2a10      	cmp	r2, #16
 80119f2:	d01c      	beq.n	8011a2e <HAL_CRCEx_Polynomial_Set+0x52>
 80119f4:	2a18      	cmp	r2, #24
 80119f6:	d012      	beq.n	8011a1e <HAL_CRCEx_Polynomial_Set+0x42>
 80119f8:	2a08      	cmp	r2, #8
 80119fa:	d014      	beq.n	8011a26 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80119fc:	6800      	ldr	r0, [r0, #0]
 80119fe:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8011a00:	2118      	movs	r1, #24
 8011a02:	6883      	ldr	r3, [r0, #8]
 8011a04:	438b      	bics	r3, r1
 8011a06:	431a      	orrs	r2, r3
 8011a08:	6082      	str	r2, [r0, #8]
  
  /* Return function status */
  return HAL_OK;
 8011a0a:	2000      	movs	r0, #0
}
 8011a0c:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 8011a0e:	2a18      	cmp	r2, #24
 8011a10:	d8f4      	bhi.n	80119fc <HAL_CRCEx_Polynomial_Set+0x20>
 8011a12:	4093      	lsls	r3, r2
 8011a14:	4c08      	ldr	r4, [pc, #32]	; (8011a38 <HAL_CRCEx_Polynomial_Set+0x5c>)
 8011a16:	4223      	tst	r3, r4
 8011a18:	d0f0      	beq.n	80119fc <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8011a1a:	2001      	movs	r0, #1
 8011a1c:	e7f6      	b.n	8011a0c <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 8011a1e:	2c06      	cmp	r4, #6
 8011a20:	d9ec      	bls.n	80119fc <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8011a22:	2001      	movs	r0, #1
 8011a24:	e7f2      	b.n	8011a0c <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 8011a26:	2c0f      	cmp	r4, #15
 8011a28:	d9e8      	bls.n	80119fc <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8011a2a:	2001      	movs	r0, #1
 8011a2c:	e7ee      	b.n	8011a0c <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 8011a2e:	2c07      	cmp	r4, #7
 8011a30:	d9e4      	bls.n	80119fc <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8011a32:	2001      	movs	r0, #1
 8011a34:	e7ea      	b.n	8011a0c <HAL_CRCEx_Polynomial_Set+0x30>
 8011a36:	46c0      	nop			; (mov r8, r8)
 8011a38:	01010100 	.word	0x01010100

08011a3c <HAL_CRCEx_Init>:
{
 8011a3c:	b510      	push	{r4, lr}
 8011a3e:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8011a40:	7900      	ldrb	r0, [r0, #4]
 8011a42:	2800      	cmp	r0, #0
 8011a44:	d107      	bne.n	8011a56 <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8011a46:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4a07      	ldr	r2, [pc, #28]	; (8011a68 <HAL_CRCEx_Init+0x2c>)
 8011a4c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8011a4e:	689a      	ldr	r2, [r3, #8]
 8011a50:	438a      	bics	r2, r1
 8011a52:	609a      	str	r2, [r3, #8]
}
 8011a54:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8011a56:	0018      	movs	r0, r3
 8011a58:	68da      	ldr	r2, [r3, #12]
 8011a5a:	6899      	ldr	r1, [r3, #8]
 8011a5c:	f7ff ffbe 	bl	80119dc <HAL_CRCEx_Polynomial_Set>
 8011a60:	1e43      	subs	r3, r0, #1
 8011a62:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8011a64:	b2c0      	uxtb	r0, r0
 8011a66:	e7f5      	b.n	8011a54 <HAL_CRCEx_Init+0x18>
 8011a68:	04c11db7 	.word	0x04c11db7

08011a6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8011a6c:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8011a6e:	2800      	cmp	r0, #0
 8011a70:	d023      	beq.n	8011aba <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8011a72:	2321      	movs	r3, #33	; 0x21
 8011a74:	5cc3      	ldrb	r3, [r0, r3]
 8011a76:	b2da      	uxtb	r2, r3
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d01b      	beq.n	8011ab4 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011a7c:	2121      	movs	r1, #33	; 0x21
 8011a7e:	2302      	movs	r3, #2
 8011a80:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8011a82:	6804      	ldr	r4, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8011a84:	4a0e      	ldr	r2, [pc, #56]	; (8011ac0 <HAL_DMA_Init+0x54>)
  tmp = hdma->Instance->CCR;
 8011a86:	6823      	ldr	r3, [r4, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8011a88:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8011a8a:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8011a8c:	6843      	ldr	r3, [r0, #4]
 8011a8e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011a90:	68c5      	ldr	r5, [r0, #12]
 8011a92:	432b      	orrs	r3, r5
 8011a94:	6905      	ldr	r5, [r0, #16]
 8011a96:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011a98:	6945      	ldr	r5, [r0, #20]
 8011a9a:	432b      	orrs	r3, r5
 8011a9c:	6985      	ldr	r5, [r0, #24]
 8011a9e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8011aa0:	69c5      	ldr	r5, [r0, #28]
 8011aa2:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8011aa4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8011aa6:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011aac:	3301      	adds	r3, #1
 8011aae:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8011ab0:	2000      	movs	r0, #0
}  
 8011ab2:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 8011ab4:	3320      	adds	r3, #32
 8011ab6:	54c2      	strb	r2, [r0, r3]
 8011ab8:	e7e0      	b.n	8011a7c <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 8011aba:	2001      	movs	r0, #1
 8011abc:	e7f9      	b.n	8011ab2 <HAL_DMA_Init+0x46>
 8011abe:	46c0      	nop			; (mov r8, r8)
 8011ac0:	ffffc00f 	.word	0xffffc00f

08011ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011ac4:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8011ac6:	2420      	movs	r4, #32
 8011ac8:	5d05      	ldrb	r5, [r0, r4]
 8011aca:	2d01      	cmp	r5, #1
 8011acc:	d023      	beq.n	8011b16 <HAL_DMA_Start_IT+0x52>
 8011ace:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8011ad0:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 8011ad2:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8011ad4:	3401      	adds	r4, #1
 8011ad6:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011ad8:	6804      	ldr	r4, [r0, #0]
 8011ada:	6825      	ldr	r5, [r4, #0]
 8011adc:	43b5      	bics	r5, r6
 8011ade:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8011ae0:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011ae2:	6843      	ldr	r3, [r0, #4]
 8011ae4:	2b10      	cmp	r3, #16
 8011ae6:	d013      	beq.n	8011b10 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8011ae8:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8011aea:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8011aec:	2202      	movs	r2, #2
  return HAL_OK;    
 8011aee:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8011af0:	6823      	ldr	r3, [r4, #0]
 8011af2:	4313      	orrs	r3, r2
 8011af4:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8011af6:	6823      	ldr	r3, [r4, #0]
 8011af8:	3202      	adds	r2, #2
 8011afa:	4313      	orrs	r3, r2
 8011afc:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8011afe:	6823      	ldr	r3, [r4, #0]
 8011b00:	3204      	adds	r2, #4
 8011b02:	4313      	orrs	r3, r2
 8011b04:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 8011b06:	6823      	ldr	r3, [r4, #0]
 8011b08:	3a07      	subs	r2, #7
 8011b0a:	4313      	orrs	r3, r2
 8011b0c:	6023      	str	r3, [r4, #0]
} 
 8011b0e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8011b10:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8011b12:	60e1      	str	r1, [r4, #12]
 8011b14:	e7ea      	b.n	8011aec <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 8011b16:	2002      	movs	r0, #2
 8011b18:	e7f9      	b.n	8011b0e <HAL_DMA_Start_IT+0x4a>
 8011b1a:	46c0      	nop			; (mov r8, r8)

08011b1c <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 8011b1c:	2101      	movs	r1, #1
 8011b1e:	6802      	ldr	r2, [r0, #0]
{
 8011b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 8011b22:	6813      	ldr	r3, [r2, #0]
{
 8011b24:	0005      	movs	r5, r0
  __HAL_DMA_DISABLE(hdma);
 8011b26:	438b      	bics	r3, r1
 8011b28:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8011b2a:	f7ff fb0b 	bl	8011144 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8011b2e:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8011b30:	0006      	movs	r6, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8011b32:	2401      	movs	r4, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8011b34:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8011b36:	e004      	b.n	8011b42 <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8011b38:	f7ff fb04 	bl	8011144 <HAL_GetTick>
 8011b3c:	1b80      	subs	r0, r0, r6
 8011b3e:	42b8      	cmp	r0, r7
 8011b40:	d80b      	bhi.n	8011b5a <HAL_DMA_Abort+0x3e>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8011b42:	0022      	movs	r2, r4
 8011b44:	682b      	ldr	r3, [r5, #0]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	401a      	ands	r2, r3
 8011b4a:	421c      	tst	r4, r3
 8011b4c:	d1f4      	bne.n	8011b38 <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 8011b4e:	2321      	movs	r3, #33	; 0x21
  return HAL_OK; 
 8011b50:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8011b52:	54ec      	strb	r4, [r5, r3]
  __HAL_UNLOCK(hdma);
 8011b54:	3b01      	subs	r3, #1
 8011b56:	54ea      	strb	r2, [r5, r3]
}
 8011b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8011b5a:	2220      	movs	r2, #32
 8011b5c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011b5e:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8011b60:	4313      	orrs	r3, r2
 8011b62:	636b      	str	r3, [r5, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011b64:	2321      	movs	r3, #33	; 0x21
 8011b66:	54e9      	strb	r1, [r5, r3]
      __HAL_UNLOCK(hdma);
 8011b68:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8011b6a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 8011b6c:	54ab      	strb	r3, [r5, r2]
      return HAL_TIMEOUT;
 8011b6e:	e7f3      	b.n	8011b58 <HAL_DMA_Abort+0x3c>

08011b70 <HAL_DMA_IRQHandler>:
{        
 8011b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011b72:	49c5      	ldr	r1, [pc, #788]	; (8011e88 <HAL_DMA_IRQHandler+0x318>)
 8011b74:	6803      	ldr	r3, [r0, #0]
{        
 8011b76:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011b78:	001a      	movs	r2, r3
 8011b7a:	0018      	movs	r0, r3
 8011b7c:	428b      	cmp	r3, r1
 8011b7e:	d936      	bls.n	8011bee <HAL_DMA_IRQHandler+0x7e>
 8011b80:	4dc2      	ldr	r5, [pc, #776]	; (8011e8c <HAL_DMA_IRQHandler+0x31c>)
 8011b82:	4ec3      	ldr	r6, [pc, #780]	; (8011e90 <HAL_DMA_IRQHandler+0x320>)
 8011b84:	682f      	ldr	r7, [r5, #0]
 8011b86:	42b3      	cmp	r3, r6
 8011b88:	d067      	beq.n	8011c5a <HAL_DMA_IRQHandler+0xea>
 8011b8a:	4ec2      	ldr	r6, [pc, #776]	; (8011e94 <HAL_DMA_IRQHandler+0x324>)
 8011b8c:	42b3      	cmp	r3, r6
 8011b8e:	d100      	bne.n	8011b92 <HAL_DMA_IRQHandler+0x22>
 8011b90:	e1b8      	b.n	8011f04 <HAL_DMA_IRQHandler+0x394>
 8011b92:	4ec1      	ldr	r6, [pc, #772]	; (8011e98 <HAL_DMA_IRQHandler+0x328>)
 8011b94:	42b3      	cmp	r3, r6
 8011b96:	d100      	bne.n	8011b9a <HAL_DMA_IRQHandler+0x2a>
 8011b98:	e0a3      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x172>
 8011b9a:	4ec0      	ldr	r6, [pc, #768]	; (8011e9c <HAL_DMA_IRQHandler+0x32c>)
 8011b9c:	42b3      	cmp	r3, r6
 8011b9e:	d100      	bne.n	8011ba2 <HAL_DMA_IRQHandler+0x32>
 8011ba0:	e35d      	b.n	801225e <HAL_DMA_IRQHandler+0x6ee>
 8011ba2:	4ebf      	ldr	r6, [pc, #764]	; (8011ea0 <HAL_DMA_IRQHandler+0x330>)
 8011ba4:	42b3      	cmp	r3, r6
 8011ba6:	d100      	bne.n	8011baa <HAL_DMA_IRQHandler+0x3a>
 8011ba8:	e3a0      	b.n	80122ec <HAL_DMA_IRQHandler+0x77c>
 8011baa:	4ebe      	ldr	r6, [pc, #760]	; (8011ea4 <HAL_DMA_IRQHandler+0x334>)
 8011bac:	42b3      	cmp	r3, r6
 8011bae:	d100      	bne.n	8011bb2 <HAL_DMA_IRQHandler+0x42>
 8011bb0:	e3c3      	b.n	801233a <HAL_DMA_IRQHandler+0x7ca>
 8011bb2:	428b      	cmp	r3, r1
 8011bb4:	d100      	bne.n	8011bb8 <HAL_DMA_IRQHandler+0x48>
 8011bb6:	e384      	b.n	80122c2 <HAL_DMA_IRQHandler+0x752>
 8011bb8:	49bb      	ldr	r1, [pc, #748]	; (8011ea8 <HAL_DMA_IRQHandler+0x338>)
 8011bba:	428b      	cmp	r3, r1
 8011bbc:	d101      	bne.n	8011bc2 <HAL_DMA_IRQHandler+0x52>
 8011bbe:	f000 fbe9 	bl	8012394 <HAL_DMA_IRQHandler+0x824>
 8011bc2:	49ba      	ldr	r1, [pc, #744]	; (8011eac <HAL_DMA_IRQHandler+0x33c>)
 8011bc4:	428b      	cmp	r3, r1
 8011bc6:	d101      	bne.n	8011bcc <HAL_DMA_IRQHandler+0x5c>
 8011bc8:	f000 fc04 	bl	80123d4 <HAL_DMA_IRQHandler+0x864>
 8011bcc:	49b8      	ldr	r1, [pc, #736]	; (8011eb0 <HAL_DMA_IRQHandler+0x340>)
 8011bce:	428b      	cmp	r3, r1
 8011bd0:	d101      	bne.n	8011bd6 <HAL_DMA_IRQHandler+0x66>
 8011bd2:	f000 fc18 	bl	8012406 <HAL_DMA_IRQHandler+0x896>
 8011bd6:	49b7      	ldr	r1, [pc, #732]	; (8011eb4 <HAL_DMA_IRQHandler+0x344>)
 8011bd8:	428b      	cmp	r3, r1
 8011bda:	d100      	bne.n	8011bde <HAL_DMA_IRQHandler+0x6e>
 8011bdc:	e39c      	b.n	8012318 <HAL_DMA_IRQHandler+0x7a8>
 8011bde:	0339      	lsls	r1, r7, #12
 8011be0:	d500      	bpl.n	8011be4 <HAL_DMA_IRQHandler+0x74>
 8011be2:	e3b1      	b.n	8012348 <HAL_DMA_IRQHandler+0x7d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011be4:	49a9      	ldr	r1, [pc, #676]	; (8011e8c <HAL_DMA_IRQHandler+0x31c>)
 8011be6:	680d      	ldr	r5, [r1, #0]
 8011be8:	2180      	movs	r1, #128	; 0x80
 8011bea:	02c9      	lsls	r1, r1, #11
 8011bec:	e18f      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011bee:	4db2      	ldr	r5, [pc, #712]	; (8011eb8 <HAL_DMA_IRQHandler+0x348>)
 8011bf0:	4ea7      	ldr	r6, [pc, #668]	; (8011e90 <HAL_DMA_IRQHandler+0x320>)
 8011bf2:	682f      	ldr	r7, [r5, #0]
 8011bf4:	42b3      	cmp	r3, r6
 8011bf6:	d100      	bne.n	8011bfa <HAL_DMA_IRQHandler+0x8a>
 8011bf8:	e166      	b.n	8011ec8 <HAL_DMA_IRQHandler+0x358>
 8011bfa:	4ea6      	ldr	r6, [pc, #664]	; (8011e94 <HAL_DMA_IRQHandler+0x324>)
 8011bfc:	42b3      	cmp	r3, r6
 8011bfe:	d100      	bne.n	8011c02 <HAL_DMA_IRQHandler+0x92>
 8011c00:	e2e5      	b.n	80121ce <HAL_DMA_IRQHandler+0x65e>
 8011c02:	4ea5      	ldr	r6, [pc, #660]	; (8011e98 <HAL_DMA_IRQHandler+0x328>)
 8011c04:	42b3      	cmp	r3, r6
 8011c06:	d065      	beq.n	8011cd4 <HAL_DMA_IRQHandler+0x164>
 8011c08:	4ea4      	ldr	r6, [pc, #656]	; (8011e9c <HAL_DMA_IRQHandler+0x32c>)
 8011c0a:	42b3      	cmp	r3, r6
 8011c0c:	d100      	bne.n	8011c10 <HAL_DMA_IRQHandler+0xa0>
 8011c0e:	e0f0      	b.n	8011df2 <HAL_DMA_IRQHandler+0x282>
 8011c10:	4ea3      	ldr	r6, [pc, #652]	; (8011ea0 <HAL_DMA_IRQHandler+0x330>)
 8011c12:	42b3      	cmp	r3, r6
 8011c14:	d100      	bne.n	8011c18 <HAL_DMA_IRQHandler+0xa8>
 8011c16:	e346      	b.n	80122a6 <HAL_DMA_IRQHandler+0x736>
 8011c18:	4ea2      	ldr	r6, [pc, #648]	; (8011ea4 <HAL_DMA_IRQHandler+0x334>)
 8011c1a:	42b3      	cmp	r3, r6
 8011c1c:	d100      	bne.n	8011c20 <HAL_DMA_IRQHandler+0xb0>
 8011c1e:	e385      	b.n	801232c <HAL_DMA_IRQHandler+0x7bc>
 8011c20:	428b      	cmp	r3, r1
 8011c22:	d100      	bne.n	8011c26 <HAL_DMA_IRQHandler+0xb6>
 8011c24:	e346      	b.n	80122b4 <HAL_DMA_IRQHandler+0x744>
 8011c26:	49a0      	ldr	r1, [pc, #640]	; (8011ea8 <HAL_DMA_IRQHandler+0x338>)
 8011c28:	428b      	cmp	r3, r1
 8011c2a:	d100      	bne.n	8011c2e <HAL_DMA_IRQHandler+0xbe>
 8011c2c:	e3ab      	b.n	8012386 <HAL_DMA_IRQHandler+0x816>
 8011c2e:	499f      	ldr	r1, [pc, #636]	; (8011eac <HAL_DMA_IRQHandler+0x33c>)
 8011c30:	428b      	cmp	r3, r1
 8011c32:	d100      	bne.n	8011c36 <HAL_DMA_IRQHandler+0xc6>
 8011c34:	e3c7      	b.n	80123c6 <HAL_DMA_IRQHandler+0x856>
 8011c36:	499e      	ldr	r1, [pc, #632]	; (8011eb0 <HAL_DMA_IRQHandler+0x340>)
 8011c38:	428b      	cmp	r3, r1
 8011c3a:	d101      	bne.n	8011c40 <HAL_DMA_IRQHandler+0xd0>
 8011c3c:	f000 fbeb 	bl	8012416 <HAL_DMA_IRQHandler+0x8a6>
 8011c40:	499c      	ldr	r1, [pc, #624]	; (8011eb4 <HAL_DMA_IRQHandler+0x344>)
 8011c42:	428b      	cmp	r3, r1
 8011c44:	d101      	bne.n	8011c4a <HAL_DMA_IRQHandler+0xda>
 8011c46:	f000 fc00 	bl	801244a <HAL_DMA_IRQHandler+0x8da>
 8011c4a:	0339      	lsls	r1, r7, #12
 8011c4c:	d500      	bpl.n	8011c50 <HAL_DMA_IRQHandler+0xe0>
 8011c4e:	e0d3      	b.n	8011df8 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011c50:	4999      	ldr	r1, [pc, #612]	; (8011eb8 <HAL_DMA_IRQHandler+0x348>)
 8011c52:	680d      	ldr	r5, [r1, #0]
 8011c54:	2180      	movs	r1, #128	; 0x80
 8011c56:	02c9      	lsls	r1, r1, #11
 8011c58:	e2be      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011c5a:	2108      	movs	r1, #8
 8011c5c:	4239      	tst	r1, r7
 8011c5e:	d100      	bne.n	8011c62 <HAL_DMA_IRQHandler+0xf2>
 8011c60:	e2c0      	b.n	80121e4 <HAL_DMA_IRQHandler+0x674>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011c62:	681d      	ldr	r5, [r3, #0]
 8011c64:	4229      	tst	r1, r5
 8011c66:	d000      	beq.n	8011c6a <HAL_DMA_IRQHandler+0xfa>
 8011c68:	e2bf      	b.n	80121ea <HAL_DMA_IRQHandler+0x67a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011c6a:	4988      	ldr	r1, [pc, #544]	; (8011e8c <HAL_DMA_IRQHandler+0x31c>)
 8011c6c:	680d      	ldr	r5, [r1, #0]
 8011c6e:	4988      	ldr	r1, [pc, #544]	; (8011e90 <HAL_DMA_IRQHandler+0x320>)
 8011c70:	428b      	cmp	r3, r1
 8011c72:	d100      	bne.n	8011c76 <HAL_DMA_IRQHandler+0x106>
 8011c74:	e2ce      	b.n	8012214 <HAL_DMA_IRQHandler+0x6a4>
 8011c76:	4987      	ldr	r1, [pc, #540]	; (8011e94 <HAL_DMA_IRQHandler+0x324>)
 8011c78:	428b      	cmp	r3, r1
 8011c7a:	d100      	bne.n	8011c7e <HAL_DMA_IRQHandler+0x10e>
 8011c7c:	e146      	b.n	8011f0c <HAL_DMA_IRQHandler+0x39c>
 8011c7e:	4986      	ldr	r1, [pc, #536]	; (8011e98 <HAL_DMA_IRQHandler+0x328>)
 8011c80:	428b      	cmp	r3, r1
 8011c82:	d100      	bne.n	8011c86 <HAL_DMA_IRQHandler+0x116>
 8011c84:	e32f      	b.n	80122e6 <HAL_DMA_IRQHandler+0x776>
 8011c86:	4985      	ldr	r1, [pc, #532]	; (8011e9c <HAL_DMA_IRQHandler+0x32c>)
 8011c88:	428b      	cmp	r3, r1
 8011c8a:	d100      	bne.n	8011c8e <HAL_DMA_IRQHandler+0x11e>
 8011c8c:	e349      	b.n	8012322 <HAL_DMA_IRQHandler+0x7b2>
 8011c8e:	4984      	ldr	r1, [pc, #528]	; (8011ea0 <HAL_DMA_IRQHandler+0x330>)
 8011c90:	428b      	cmp	r3, r1
 8011c92:	d0a9      	beq.n	8011be8 <HAL_DMA_IRQHandler+0x78>
 8011c94:	4983      	ldr	r1, [pc, #524]	; (8011ea4 <HAL_DMA_IRQHandler+0x334>)
 8011c96:	428b      	cmp	r3, r1
 8011c98:	d100      	bne.n	8011c9c <HAL_DMA_IRQHandler+0x12c>
 8011c9a:	e352      	b.n	8012342 <HAL_DMA_IRQHandler+0x7d2>
 8011c9c:	497a      	ldr	r1, [pc, #488]	; (8011e88 <HAL_DMA_IRQHandler+0x318>)
 8011c9e:	428b      	cmp	r3, r1
 8011ca0:	d100      	bne.n	8011ca4 <HAL_DMA_IRQHandler+0x134>
 8011ca2:	e312      	b.n	80122ca <HAL_DMA_IRQHandler+0x75a>
 8011ca4:	4980      	ldr	r1, [pc, #512]	; (8011ea8 <HAL_DMA_IRQHandler+0x338>)
 8011ca6:	428b      	cmp	r3, r1
 8011ca8:	d100      	bne.n	8011cac <HAL_DMA_IRQHandler+0x13c>
 8011caa:	e378      	b.n	801239e <HAL_DMA_IRQHandler+0x82e>
 8011cac:	497f      	ldr	r1, [pc, #508]	; (8011eac <HAL_DMA_IRQHandler+0x33c>)
 8011cae:	428b      	cmp	r3, r1
 8011cb0:	d100      	bne.n	8011cb4 <HAL_DMA_IRQHandler+0x144>
 8011cb2:	e12b      	b.n	8011f0c <HAL_DMA_IRQHandler+0x39c>
 8011cb4:	497e      	ldr	r1, [pc, #504]	; (8011eb0 <HAL_DMA_IRQHandler+0x340>)
 8011cb6:	428b      	cmp	r3, r1
 8011cb8:	d100      	bne.n	8011cbc <HAL_DMA_IRQHandler+0x14c>
 8011cba:	e314      	b.n	80122e6 <HAL_DMA_IRQHandler+0x776>
 8011cbc:	497f      	ldr	r1, [pc, #508]	; (8011ebc <HAL_DMA_IRQHandler+0x34c>)
 8011cbe:	1859      	adds	r1, r3, r1
 8011cc0:	424e      	negs	r6, r1
 8011cc2:	4171      	adcs	r1, r6
 8011cc4:	4e7e      	ldr	r6, [pc, #504]	; (8011ec0 <HAL_DMA_IRQHandler+0x350>)
 8011cc6:	4249      	negs	r1, r1
 8011cc8:	4031      	ands	r1, r6
 8011cca:	2680      	movs	r6, #128	; 0x80
 8011ccc:	02f6      	lsls	r6, r6, #11
 8011cce:	46b4      	mov	ip, r6
 8011cd0:	4461      	add	r1, ip
 8011cd2:	e11c      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011cd4:	0539      	lsls	r1, r7, #20
 8011cd6:	d500      	bpl.n	8011cda <HAL_DMA_IRQHandler+0x16a>
 8011cd8:	e08e      	b.n	8011df8 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011cda:	2180      	movs	r1, #128	; 0x80
 8011cdc:	682d      	ldr	r5, [r5, #0]
 8011cde:	00c9      	lsls	r1, r1, #3
 8011ce0:	e27a      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011ce2:	0539      	lsls	r1, r7, #20
 8011ce4:	d400      	bmi.n	8011ce8 <HAL_DMA_IRQHandler+0x178>
 8011ce6:	e2c8      	b.n	801227a <HAL_DMA_IRQHandler+0x70a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011ce8:	2108      	movs	r1, #8
 8011cea:	681d      	ldr	r5, [r3, #0]
 8011cec:	4229      	tst	r1, r5
 8011cee:	d0bc      	beq.n	8011c6a <HAL_DMA_IRQHandler+0xfa>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8011cf0:	681d      	ldr	r5, [r3, #0]
 8011cf2:	438d      	bics	r5, r1
 8011cf4:	601d      	str	r5, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011cf6:	4967      	ldr	r1, [pc, #412]	; (8011e94 <HAL_DMA_IRQHandler+0x324>)
 8011cf8:	428b      	cmp	r3, r1
 8011cfa:	d100      	bne.n	8011cfe <HAL_DMA_IRQHandler+0x18e>
 8011cfc:	e300      	b.n	8012300 <HAL_DMA_IRQHandler+0x790>
 8011cfe:	4966      	ldr	r1, [pc, #408]	; (8011e98 <HAL_DMA_IRQHandler+0x328>)
 8011d00:	428b      	cmp	r3, r1
 8011d02:	d100      	bne.n	8011d06 <HAL_DMA_IRQHandler+0x196>
 8011d04:	e2c3      	b.n	801228e <HAL_DMA_IRQHandler+0x71e>
 8011d06:	4965      	ldr	r1, [pc, #404]	; (8011e9c <HAL_DMA_IRQHandler+0x32c>)
 8011d08:	428b      	cmp	r3, r1
 8011d0a:	d100      	bne.n	8011d0e <HAL_DMA_IRQHandler+0x19e>
 8011d0c:	e32c      	b.n	8012368 <HAL_DMA_IRQHandler+0x7f8>
 8011d0e:	4964      	ldr	r1, [pc, #400]	; (8011ea0 <HAL_DMA_IRQHandler+0x330>)
 8011d10:	428b      	cmp	r3, r1
 8011d12:	d100      	bne.n	8011d16 <HAL_DMA_IRQHandler+0x1a6>
 8011d14:	e354      	b.n	80123c0 <HAL_DMA_IRQHandler+0x850>
 8011d16:	4963      	ldr	r1, [pc, #396]	; (8011ea4 <HAL_DMA_IRQHandler+0x334>)
 8011d18:	428b      	cmp	r3, r1
 8011d1a:	d100      	bne.n	8011d1e <HAL_DMA_IRQHandler+0x1ae>
 8011d1c:	e364      	b.n	80123e8 <HAL_DMA_IRQHandler+0x878>
 8011d1e:	495a      	ldr	r1, [pc, #360]	; (8011e88 <HAL_DMA_IRQHandler+0x318>)
 8011d20:	428b      	cmp	r3, r1
 8011d22:	d100      	bne.n	8011d26 <HAL_DMA_IRQHandler+0x1b6>
 8011d24:	e382      	b.n	801242c <HAL_DMA_IRQHandler+0x8bc>
 8011d26:	4960      	ldr	r1, [pc, #384]	; (8011ea8 <HAL_DMA_IRQHandler+0x338>)
 8011d28:	428b      	cmp	r3, r1
 8011d2a:	d100      	bne.n	8011d2e <HAL_DMA_IRQHandler+0x1be>
 8011d2c:	e397      	b.n	801245e <HAL_DMA_IRQHandler+0x8ee>
 8011d2e:	495f      	ldr	r1, [pc, #380]	; (8011eac <HAL_DMA_IRQHandler+0x33c>)
 8011d30:	428b      	cmp	r3, r1
 8011d32:	d100      	bne.n	8011d36 <HAL_DMA_IRQHandler+0x1c6>
 8011d34:	e2e4      	b.n	8012300 <HAL_DMA_IRQHandler+0x790>
 8011d36:	495e      	ldr	r1, [pc, #376]	; (8011eb0 <HAL_DMA_IRQHandler+0x340>)
 8011d38:	428b      	cmp	r3, r1
 8011d3a:	d100      	bne.n	8011d3e <HAL_DMA_IRQHandler+0x1ce>
 8011d3c:	e2a7      	b.n	801228e <HAL_DMA_IRQHandler+0x71e>
 8011d3e:	495f      	ldr	r1, [pc, #380]	; (8011ebc <HAL_DMA_IRQHandler+0x34c>)
 8011d40:	1859      	adds	r1, r3, r1
 8011d42:	424d      	negs	r5, r1
 8011d44:	4169      	adcs	r1, r5
 8011d46:	4d5f      	ldr	r5, [pc, #380]	; (8011ec4 <HAL_DMA_IRQHandler+0x354>)
 8011d48:	4249      	negs	r1, r1
 8011d4a:	4029      	ands	r1, r5
 8011d4c:	2580      	movs	r5, #128	; 0x80
 8011d4e:	032d      	lsls	r5, r5, #12
 8011d50:	46ac      	mov	ip, r5
 8011d52:	4461      	add	r1, ip
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011d54:	2601      	movs	r6, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011d56:	4d4d      	ldr	r5, [pc, #308]	; (8011e8c <HAL_DMA_IRQHandler+0x31c>)
 8011d58:	6069      	str	r1, [r5, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d5c:	4331      	orrs	r1, r6
 8011d5e:	6361      	str	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011d60:	2121      	movs	r1, #33	; 0x21
 8011d62:	3603      	adds	r6, #3
 8011d64:	5466      	strb	r6, [r4, r1]
      __HAL_UNLOCK(hdma); 
 8011d66:	2600      	movs	r6, #0
 8011d68:	3901      	subs	r1, #1
 8011d6a:	5466      	strb	r6, [r4, r1]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011d6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011d6e:	2900      	cmp	r1, #0
 8011d70:	d100      	bne.n	8011d74 <HAL_DMA_IRQHandler+0x204>
 8011d72:	e2d9      	b.n	8012328 <HAL_DMA_IRQHandler+0x7b8>
        hdma->XferErrorCallback(hdma);
 8011d74:	0020      	movs	r0, r4
 8011d76:	4788      	blx	r1
 8011d78:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011d7a:	4943      	ldr	r1, [pc, #268]	; (8011e88 <HAL_DMA_IRQHandler+0x318>)
 8011d7c:	001a      	movs	r2, r3
 8011d7e:	0018      	movs	r0, r3
 8011d80:	428b      	cmp	r3, r1
 8011d82:	d900      	bls.n	8011d86 <HAL_DMA_IRQHandler+0x216>
 8011d84:	e771      	b.n	8011c6a <HAL_DMA_IRQHandler+0xfa>
 8011d86:	494c      	ldr	r1, [pc, #304]	; (8011eb8 <HAL_DMA_IRQHandler+0x348>)
 8011d88:	680d      	ldr	r5, [r1, #0]
 8011d8a:	4941      	ldr	r1, [pc, #260]	; (8011e90 <HAL_DMA_IRQHandler+0x320>)
 8011d8c:	428b      	cmp	r3, r1
 8011d8e:	d100      	bne.n	8011d92 <HAL_DMA_IRQHandler+0x222>
 8011d90:	e0b5      	b.n	8011efe <HAL_DMA_IRQHandler+0x38e>
 8011d92:	4940      	ldr	r1, [pc, #256]	; (8011e94 <HAL_DMA_IRQHandler+0x324>)
 8011d94:	428b      	cmp	r3, r1
 8011d96:	d100      	bne.n	8011d9a <HAL_DMA_IRQHandler+0x22a>
 8011d98:	e21d      	b.n	80121d6 <HAL_DMA_IRQHandler+0x666>
 8011d9a:	493f      	ldr	r1, [pc, #252]	; (8011e98 <HAL_DMA_IRQHandler+0x328>)
 8011d9c:	428b      	cmp	r3, r1
 8011d9e:	d100      	bne.n	8011da2 <HAL_DMA_IRQHandler+0x232>
 8011da0:	e29e      	b.n	80122e0 <HAL_DMA_IRQHandler+0x770>
 8011da2:	493e      	ldr	r1, [pc, #248]	; (8011e9c <HAL_DMA_IRQHandler+0x32c>)
 8011da4:	428b      	cmp	r3, r1
 8011da6:	d100      	bne.n	8011daa <HAL_DMA_IRQHandler+0x23a>
 8011da8:	e261      	b.n	801226e <HAL_DMA_IRQHandler+0x6fe>
 8011daa:	493d      	ldr	r1, [pc, #244]	; (8011ea0 <HAL_DMA_IRQHandler+0x330>)
 8011dac:	428b      	cmp	r3, r1
 8011dae:	d100      	bne.n	8011db2 <HAL_DMA_IRQHandler+0x242>
 8011db0:	e27d      	b.n	80122ae <HAL_DMA_IRQHandler+0x73e>
 8011db2:	493c      	ldr	r1, [pc, #240]	; (8011ea4 <HAL_DMA_IRQHandler+0x334>)
 8011db4:	428b      	cmp	r3, r1
 8011db6:	d100      	bne.n	8011dba <HAL_DMA_IRQHandler+0x24a>
 8011db8:	e2bc      	b.n	8012334 <HAL_DMA_IRQHandler+0x7c4>
 8011dba:	4933      	ldr	r1, [pc, #204]	; (8011e88 <HAL_DMA_IRQHandler+0x318>)
 8011dbc:	428b      	cmp	r3, r1
 8011dbe:	d100      	bne.n	8011dc2 <HAL_DMA_IRQHandler+0x252>
 8011dc0:	e27c      	b.n	80122bc <HAL_DMA_IRQHandler+0x74c>
 8011dc2:	4939      	ldr	r1, [pc, #228]	; (8011ea8 <HAL_DMA_IRQHandler+0x338>)
 8011dc4:	428b      	cmp	r3, r1
 8011dc6:	d100      	bne.n	8011dca <HAL_DMA_IRQHandler+0x25a>
 8011dc8:	e2e2      	b.n	8012390 <HAL_DMA_IRQHandler+0x820>
 8011dca:	4938      	ldr	r1, [pc, #224]	; (8011eac <HAL_DMA_IRQHandler+0x33c>)
 8011dcc:	428b      	cmp	r3, r1
 8011dce:	d100      	bne.n	8011dd2 <HAL_DMA_IRQHandler+0x262>
 8011dd0:	e201      	b.n	80121d6 <HAL_DMA_IRQHandler+0x666>
 8011dd2:	4937      	ldr	r1, [pc, #220]	; (8011eb0 <HAL_DMA_IRQHandler+0x340>)
 8011dd4:	428b      	cmp	r3, r1
 8011dd6:	d100      	bne.n	8011dda <HAL_DMA_IRQHandler+0x26a>
 8011dd8:	e282      	b.n	80122e0 <HAL_DMA_IRQHandler+0x770>
 8011dda:	4938      	ldr	r1, [pc, #224]	; (8011ebc <HAL_DMA_IRQHandler+0x34c>)
 8011ddc:	1859      	adds	r1, r3, r1
 8011dde:	424e      	negs	r6, r1
 8011de0:	4171      	adcs	r1, r6
 8011de2:	4e37      	ldr	r6, [pc, #220]	; (8011ec0 <HAL_DMA_IRQHandler+0x350>)
 8011de4:	4249      	negs	r1, r1
 8011de6:	4031      	ands	r1, r6
 8011de8:	2680      	movs	r6, #128	; 0x80
 8011dea:	02f6      	lsls	r6, r6, #11
 8011dec:	46b4      	mov	ip, r6
 8011dee:	4461      	add	r1, ip
 8011df0:	e1f2      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011df2:	0439      	lsls	r1, r7, #16
 8011df4:	d400      	bmi.n	8011df8 <HAL_DMA_IRQHandler+0x288>
 8011df6:	e239      	b.n	801226c <HAL_DMA_IRQHandler+0x6fc>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011df8:	2108      	movs	r1, #8
 8011dfa:	681d      	ldr	r5, [r3, #0]
 8011dfc:	4229      	tst	r1, r5
 8011dfe:	d0c2      	beq.n	8011d86 <HAL_DMA_IRQHandler+0x216>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8011e00:	681d      	ldr	r5, [r3, #0]
 8011e02:	438d      	bics	r5, r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011e04:	4923      	ldr	r1, [pc, #140]	; (8011e94 <HAL_DMA_IRQHandler+0x324>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8011e06:	601d      	str	r5, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011e08:	428b      	cmp	r3, r1
 8011e0a:	d100      	bne.n	8011e0e <HAL_DMA_IRQHandler+0x29e>
 8011e0c:	e27a      	b.n	8012304 <HAL_DMA_IRQHandler+0x794>
 8011e0e:	4922      	ldr	r1, [pc, #136]	; (8011e98 <HAL_DMA_IRQHandler+0x328>)
 8011e10:	428b      	cmp	r3, r1
 8011e12:	d100      	bne.n	8011e16 <HAL_DMA_IRQHandler+0x2a6>
 8011e14:	e23e      	b.n	8012294 <HAL_DMA_IRQHandler+0x724>
 8011e16:	4921      	ldr	r1, [pc, #132]	; (8011e9c <HAL_DMA_IRQHandler+0x32c>)
 8011e18:	428b      	cmp	r3, r1
 8011e1a:	d100      	bne.n	8011e1e <HAL_DMA_IRQHandler+0x2ae>
 8011e1c:	e2a7      	b.n	801236e <HAL_DMA_IRQHandler+0x7fe>
 8011e1e:	4920      	ldr	r1, [pc, #128]	; (8011ea0 <HAL_DMA_IRQHandler+0x330>)
 8011e20:	428b      	cmp	r3, r1
 8011e22:	d100      	bne.n	8011e26 <HAL_DMA_IRQHandler+0x2b6>
 8011e24:	e2bd      	b.n	80123a2 <HAL_DMA_IRQHandler+0x832>
 8011e26:	491f      	ldr	r1, [pc, #124]	; (8011ea4 <HAL_DMA_IRQHandler+0x334>)
 8011e28:	428b      	cmp	r3, r1
 8011e2a:	d100      	bne.n	8011e2e <HAL_DMA_IRQHandler+0x2be>
 8011e2c:	e2e2      	b.n	80123f4 <HAL_DMA_IRQHandler+0x884>
 8011e2e:	4916      	ldr	r1, [pc, #88]	; (8011e88 <HAL_DMA_IRQHandler+0x318>)
 8011e30:	428b      	cmp	r3, r1
 8011e32:	d100      	bne.n	8011e36 <HAL_DMA_IRQHandler+0x2c6>
 8011e34:	e306      	b.n	8012444 <HAL_DMA_IRQHandler+0x8d4>
 8011e36:	491c      	ldr	r1, [pc, #112]	; (8011ea8 <HAL_DMA_IRQHandler+0x338>)
 8011e38:	428b      	cmp	r3, r1
 8011e3a:	d100      	bne.n	8011e3e <HAL_DMA_IRQHandler+0x2ce>
 8011e3c:	e30d      	b.n	801245a <HAL_DMA_IRQHandler+0x8ea>
 8011e3e:	491b      	ldr	r1, [pc, #108]	; (8011eac <HAL_DMA_IRQHandler+0x33c>)
 8011e40:	428b      	cmp	r3, r1
 8011e42:	d100      	bne.n	8011e46 <HAL_DMA_IRQHandler+0x2d6>
 8011e44:	e25e      	b.n	8012304 <HAL_DMA_IRQHandler+0x794>
 8011e46:	491a      	ldr	r1, [pc, #104]	; (8011eb0 <HAL_DMA_IRQHandler+0x340>)
 8011e48:	428b      	cmp	r3, r1
 8011e4a:	d100      	bne.n	8011e4e <HAL_DMA_IRQHandler+0x2de>
 8011e4c:	e222      	b.n	8012294 <HAL_DMA_IRQHandler+0x724>
 8011e4e:	491b      	ldr	r1, [pc, #108]	; (8011ebc <HAL_DMA_IRQHandler+0x34c>)
 8011e50:	1859      	adds	r1, r3, r1
 8011e52:	424d      	negs	r5, r1
 8011e54:	4169      	adcs	r1, r5
 8011e56:	4d1b      	ldr	r5, [pc, #108]	; (8011ec4 <HAL_DMA_IRQHandler+0x354>)
 8011e58:	4249      	negs	r1, r1
 8011e5a:	4029      	ands	r1, r5
 8011e5c:	2580      	movs	r5, #128	; 0x80
 8011e5e:	032d      	lsls	r5, r5, #12
 8011e60:	46ac      	mov	ip, r5
 8011e62:	4461      	add	r1, ip
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011e64:	2601      	movs	r6, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011e66:	4d14      	ldr	r5, [pc, #80]	; (8011eb8 <HAL_DMA_IRQHandler+0x348>)
 8011e68:	6069      	str	r1, [r5, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e6c:	4331      	orrs	r1, r6
 8011e6e:	6361      	str	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011e70:	2121      	movs	r1, #33	; 0x21
 8011e72:	3603      	adds	r6, #3
 8011e74:	5466      	strb	r6, [r4, r1]
      __HAL_UNLOCK(hdma); 
 8011e76:	2600      	movs	r6, #0
 8011e78:	3901      	subs	r1, #1
 8011e7a:	5466      	strb	r6, [r4, r1]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011e7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011e7e:	2900      	cmp	r1, #0
 8011e80:	d000      	beq.n	8011e84 <HAL_DMA_IRQHandler+0x314>
 8011e82:	e777      	b.n	8011d74 <HAL_DMA_IRQHandler+0x204>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011e84:	682d      	ldr	r5, [r5, #0]
 8011e86:	e784      	b.n	8011d92 <HAL_DMA_IRQHandler+0x222>
 8011e88:	40020080 	.word	0x40020080
 8011e8c:	40020400 	.word	0x40020400
 8011e90:	40020008 	.word	0x40020008
 8011e94:	4002001c 	.word	0x4002001c
 8011e98:	40020030 	.word	0x40020030
 8011e9c:	40020044 	.word	0x40020044
 8011ea0:	40020058 	.word	0x40020058
 8011ea4:	4002006c 	.word	0x4002006c
 8011ea8:	40020408 	.word	0x40020408
 8011eac:	4002041c 	.word	0x4002041c
 8011eb0:	40020430 	.word	0x40020430
 8011eb4:	40020444 	.word	0x40020444
 8011eb8:	40020000 	.word	0x40020000
 8011ebc:	bffdfbbc 	.word	0xbffdfbbc
 8011ec0:	fffc4000 	.word	0xfffc4000
 8011ec4:	fff88000 	.word	0xfff88000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011ec8:	2108      	movs	r1, #8
 8011eca:	4239      	tst	r1, r7
 8011ecc:	d100      	bne.n	8011ed0 <HAL_DMA_IRQHandler+0x360>
 8011ece:	e1a4      	b.n	801221a <HAL_DMA_IRQHandler+0x6aa>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011ed0:	681e      	ldr	r6, [r3, #0]
 8011ed2:	4231      	tst	r1, r6
 8011ed4:	d100      	bne.n	8011ed8 <HAL_DMA_IRQHandler+0x368>
 8011ed6:	e756      	b.n	8011d86 <HAL_DMA_IRQHandler+0x216>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8011ed8:	681a      	ldr	r2, [r3, #0]
 8011eda:	438a      	bics	r2, r1
 8011edc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011ede:	6069      	str	r1, [r5, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011ee0:	2101      	movs	r1, #1
 8011ee2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011ee4:	430a      	orrs	r2, r1
 8011ee6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011ee8:	2221      	movs	r2, #33	; 0x21
 8011eea:	3103      	adds	r1, #3
 8011eec:	54a1      	strb	r1, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8011eee:	2100      	movs	r1, #0
 8011ef0:	3a01      	subs	r2, #1
 8011ef2:	54a1      	strb	r1, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011ef4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011ef6:	2900      	cmp	r1, #0
 8011ef8:	d000      	beq.n	8011efc <HAL_DMA_IRQHandler+0x38c>
 8011efa:	e73b      	b.n	8011d74 <HAL_DMA_IRQHandler+0x204>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011efc:	682d      	ldr	r5, [r5, #0]
 8011efe:	2104      	movs	r1, #4
 8011f00:	4ac7      	ldr	r2, [pc, #796]	; (8012220 <HAL_DMA_IRQHandler+0x6b0>)
 8011f02:	e169      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011f04:	0639      	lsls	r1, r7, #24
 8011f06:	d500      	bpl.n	8011f0a <HAL_DMA_IRQHandler+0x39a>
 8011f08:	e6ee      	b.n	8011ce8 <HAL_DMA_IRQHandler+0x178>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011f0a:	682d      	ldr	r5, [r5, #0]
 8011f0c:	2140      	movs	r1, #64	; 0x40
 8011f0e:	420d      	tst	r5, r1
 8011f10:	d04b      	beq.n	8011faa <HAL_DMA_IRQHandler+0x43a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011f12:	2104      	movs	r1, #4
 8011f14:	6815      	ldr	r5, [r2, #0]
 8011f16:	4229      	tst	r1, r5
 8011f18:	d100      	bne.n	8011f1c <HAL_DMA_IRQHandler+0x3ac>
 8011f1a:	e149      	b.n	80121b0 <HAL_DMA_IRQHandler+0x640>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011f1c:	6815      	ldr	r5, [r2, #0]
 8011f1e:	06ad      	lsls	r5, r5, #26
 8011f20:	d402      	bmi.n	8011f28 <HAL_DMA_IRQHandler+0x3b8>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011f22:	6815      	ldr	r5, [r2, #0]
 8011f24:	438d      	bics	r5, r1
 8011f26:	6015      	str	r5, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011f28:	49be      	ldr	r1, [pc, #760]	; (8012224 <HAL_DMA_IRQHandler+0x6b4>)
 8011f2a:	4288      	cmp	r0, r1
 8011f2c:	d800      	bhi.n	8011f30 <HAL_DMA_IRQHandler+0x3c0>
 8011f2e:	e100      	b.n	8012132 <HAL_DMA_IRQHandler+0x5c2>
 8011f30:	48bb      	ldr	r0, [pc, #748]	; (8012220 <HAL_DMA_IRQHandler+0x6b0>)
 8011f32:	4282      	cmp	r2, r0
 8011f34:	d100      	bne.n	8011f38 <HAL_DMA_IRQHandler+0x3c8>
 8011f36:	e1cd      	b.n	80122d4 <HAL_DMA_IRQHandler+0x764>
 8011f38:	48bb      	ldr	r0, [pc, #748]	; (8012228 <HAL_DMA_IRQHandler+0x6b8>)
 8011f3a:	4282      	cmp	r2, r0
 8011f3c:	d100      	bne.n	8011f40 <HAL_DMA_IRQHandler+0x3d0>
 8011f3e:	e1e9      	b.n	8012314 <HAL_DMA_IRQHandler+0x7a4>
 8011f40:	48ba      	ldr	r0, [pc, #744]	; (801222c <HAL_DMA_IRQHandler+0x6bc>)
 8011f42:	4282      	cmp	r2, r0
 8011f44:	d100      	bne.n	8011f48 <HAL_DMA_IRQHandler+0x3d8>
 8011f46:	e19f      	b.n	8012288 <HAL_DMA_IRQHandler+0x718>
 8011f48:	48b9      	ldr	r0, [pc, #740]	; (8012230 <HAL_DMA_IRQHandler+0x6c0>)
 8011f4a:	4282      	cmp	r2, r0
 8011f4c:	d100      	bne.n	8011f50 <HAL_DMA_IRQHandler+0x3e0>
 8011f4e:	e214      	b.n	801237a <HAL_DMA_IRQHandler+0x80a>
 8011f50:	48b8      	ldr	r0, [pc, #736]	; (8012234 <HAL_DMA_IRQHandler+0x6c4>)
 8011f52:	4282      	cmp	r2, r0
 8011f54:	d100      	bne.n	8011f58 <HAL_DMA_IRQHandler+0x3e8>
 8011f56:	e22a      	b.n	80123ae <HAL_DMA_IRQHandler+0x83e>
 8011f58:	48b7      	ldr	r0, [pc, #732]	; (8012238 <HAL_DMA_IRQHandler+0x6c8>)
 8011f5a:	4282      	cmp	r2, r0
 8011f5c:	d100      	bne.n	8011f60 <HAL_DMA_IRQHandler+0x3f0>
 8011f5e:	e24f      	b.n	8012400 <HAL_DMA_IRQHandler+0x890>
 8011f60:	428a      	cmp	r2, r1
 8011f62:	d100      	bne.n	8011f66 <HAL_DMA_IRQHandler+0x3f6>
 8011f64:	e268      	b.n	8012438 <HAL_DMA_IRQHandler+0x8c8>
 8011f66:	49b5      	ldr	r1, [pc, #724]	; (801223c <HAL_DMA_IRQHandler+0x6cc>)
 8011f68:	428a      	cmp	r2, r1
 8011f6a:	d100      	bne.n	8011f6e <HAL_DMA_IRQHandler+0x3fe>
 8011f6c:	e1b2      	b.n	80122d4 <HAL_DMA_IRQHandler+0x764>
 8011f6e:	49b4      	ldr	r1, [pc, #720]	; (8012240 <HAL_DMA_IRQHandler+0x6d0>)
 8011f70:	428a      	cmp	r2, r1
 8011f72:	d100      	bne.n	8011f76 <HAL_DMA_IRQHandler+0x406>
 8011f74:	e1ce      	b.n	8012314 <HAL_DMA_IRQHandler+0x7a4>
 8011f76:	49b3      	ldr	r1, [pc, #716]	; (8012244 <HAL_DMA_IRQHandler+0x6d4>)
 8011f78:	428a      	cmp	r2, r1
 8011f7a:	d100      	bne.n	8011f7e <HAL_DMA_IRQHandler+0x40e>
 8011f7c:	e184      	b.n	8012288 <HAL_DMA_IRQHandler+0x718>
 8011f7e:	49b2      	ldr	r1, [pc, #712]	; (8012248 <HAL_DMA_IRQHandler+0x6d8>)
 8011f80:	468c      	mov	ip, r1
 8011f82:	4462      	add	r2, ip
 8011f84:	1e51      	subs	r1, r2, #1
 8011f86:	418a      	sbcs	r2, r1
 8011f88:	21f0      	movs	r1, #240	; 0xf0
 8011f8a:	4252      	negs	r2, r2
 8011f8c:	0289      	lsls	r1, r1, #10
 8011f8e:	400a      	ands	r2, r1
 8011f90:	2180      	movs	r1, #128	; 0x80
 8011f92:	01c9      	lsls	r1, r1, #7
 8011f94:	468c      	mov	ip, r1
 8011f96:	4462      	add	r2, ip
 8011f98:	49ac      	ldr	r1, [pc, #688]	; (801224c <HAL_DMA_IRQHandler+0x6dc>)
 8011f9a:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8011f9c:	2221      	movs	r2, #33	; 0x21
 8011f9e:	2111      	movs	r1, #17
 8011fa0:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011fa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011fa4:	2a00      	cmp	r2, #0
 8011fa6:	d000      	beq.n	8011faa <HAL_DMA_IRQHandler+0x43a>
 8011fa8:	e0ff      	b.n	80121aa <HAL_DMA_IRQHandler+0x63a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011faa:	4aa8      	ldr	r2, [pc, #672]	; (801224c <HAL_DMA_IRQHandler+0x6dc>)
 8011fac:	6810      	ldr	r0, [r2, #0]
 8011fae:	4a9c      	ldr	r2, [pc, #624]	; (8012220 <HAL_DMA_IRQHandler+0x6b0>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d100      	bne.n	8011fb6 <HAL_DMA_IRQHandler+0x446>
 8011fb4:	e106      	b.n	80121c4 <HAL_DMA_IRQHandler+0x654>
 8011fb6:	4a9c      	ldr	r2, [pc, #624]	; (8012228 <HAL_DMA_IRQHandler+0x6b8>)
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d02a      	beq.n	8012012 <HAL_DMA_IRQHandler+0x4a2>
 8011fbc:	4a9b      	ldr	r2, [pc, #620]	; (801222c <HAL_DMA_IRQHandler+0x6bc>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d100      	bne.n	8011fc4 <HAL_DMA_IRQHandler+0x454>
 8011fc2:	e101      	b.n	80121c8 <HAL_DMA_IRQHandler+0x658>
 8011fc4:	4a9a      	ldr	r2, [pc, #616]	; (8012230 <HAL_DMA_IRQHandler+0x6c0>)
 8011fc6:	4293      	cmp	r3, r2
 8011fc8:	d100      	bne.n	8011fcc <HAL_DMA_IRQHandler+0x45c>
 8011fca:	e108      	b.n	80121de <HAL_DMA_IRQHandler+0x66e>
 8011fcc:	4a99      	ldr	r2, [pc, #612]	; (8012234 <HAL_DMA_IRQHandler+0x6c4>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d100      	bne.n	8011fd4 <HAL_DMA_IRQHandler+0x464>
 8011fd2:	e141      	b.n	8012258 <HAL_DMA_IRQHandler+0x6e8>
 8011fd4:	4a98      	ldr	r2, [pc, #608]	; (8012238 <HAL_DMA_IRQHandler+0x6c8>)
 8011fd6:	4293      	cmp	r3, r2
 8011fd8:	d100      	bne.n	8011fdc <HAL_DMA_IRQHandler+0x46c>
 8011fda:	e14b      	b.n	8012274 <HAL_DMA_IRQHandler+0x704>
 8011fdc:	4a91      	ldr	r2, [pc, #580]	; (8012224 <HAL_DMA_IRQHandler+0x6b4>)
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	d100      	bne.n	8011fe4 <HAL_DMA_IRQHandler+0x474>
 8011fe2:	e18a      	b.n	80122fa <HAL_DMA_IRQHandler+0x78a>
 8011fe4:	4a95      	ldr	r2, [pc, #596]	; (801223c <HAL_DMA_IRQHandler+0x6cc>)
 8011fe6:	4293      	cmp	r3, r2
 8011fe8:	d100      	bne.n	8011fec <HAL_DMA_IRQHandler+0x47c>
 8011fea:	e0eb      	b.n	80121c4 <HAL_DMA_IRQHandler+0x654>
 8011fec:	4a94      	ldr	r2, [pc, #592]	; (8012240 <HAL_DMA_IRQHandler+0x6d0>)
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d00f      	beq.n	8012012 <HAL_DMA_IRQHandler+0x4a2>
 8011ff2:	4a94      	ldr	r2, [pc, #592]	; (8012244 <HAL_DMA_IRQHandler+0x6d4>)
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	d100      	bne.n	8011ffa <HAL_DMA_IRQHandler+0x48a>
 8011ff8:	e0e6      	b.n	80121c8 <HAL_DMA_IRQHandler+0x658>
 8011ffa:	4a93      	ldr	r2, [pc, #588]	; (8012248 <HAL_DMA_IRQHandler+0x6d8>)
 8011ffc:	1899      	adds	r1, r3, r2
 8011ffe:	424a      	negs	r2, r1
 8012000:	4151      	adcs	r1, r2
 8012002:	4a93      	ldr	r2, [pc, #588]	; (8012250 <HAL_DMA_IRQHandler+0x6e0>)
 8012004:	4249      	negs	r1, r1
 8012006:	400a      	ands	r2, r1
 8012008:	2180      	movs	r1, #128	; 0x80
 801200a:	0289      	lsls	r1, r1, #10
 801200c:	468c      	mov	ip, r1
 801200e:	4462      	add	r2, ip
 8012010:	e000      	b.n	8012014 <HAL_DMA_IRQHandler+0x4a4>
 8012012:	2220      	movs	r2, #32
 8012014:	4002      	ands	r2, r0
 8012016:	1e51      	subs	r1, r2, #1
 8012018:	418a      	sbcs	r2, r1
 801201a:	b2d2      	uxtb	r2, r2
 801201c:	2a00      	cmp	r2, #0
 801201e:	d100      	bne.n	8012022 <HAL_DMA_IRQHandler+0x4b2>
 8012020:	e086      	b.n	8012130 <HAL_DMA_IRQHandler+0x5c0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8012022:	2202      	movs	r2, #2
 8012024:	6819      	ldr	r1, [r3, #0]
 8012026:	420a      	tst	r2, r1
 8012028:	d100      	bne.n	801202c <HAL_DMA_IRQHandler+0x4bc>
 801202a:	e081      	b.n	8012130 <HAL_DMA_IRQHandler+0x5c0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801202c:	6819      	ldr	r1, [r3, #0]
 801202e:	0689      	lsls	r1, r1, #26
 8012030:	d402      	bmi.n	8012038 <HAL_DMA_IRQHandler+0x4c8>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8012032:	6819      	ldr	r1, [r3, #0]
 8012034:	4391      	bics	r1, r2
 8012036:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012038:	4a7a      	ldr	r2, [pc, #488]	; (8012224 <HAL_DMA_IRQHandler+0x6b4>)
 801203a:	4979      	ldr	r1, [pc, #484]	; (8012220 <HAL_DMA_IRQHandler+0x6b0>)
 801203c:	4293      	cmp	r3, r2
 801203e:	d935      	bls.n	80120ac <HAL_DMA_IRQHandler+0x53c>
 8012040:	428b      	cmp	r3, r1
 8012042:	d100      	bne.n	8012046 <HAL_DMA_IRQHandler+0x4d6>
 8012044:	e14a      	b.n	80122dc <HAL_DMA_IRQHandler+0x76c>
 8012046:	4978      	ldr	r1, [pc, #480]	; (8012228 <HAL_DMA_IRQHandler+0x6b8>)
 8012048:	428b      	cmp	r3, r1
 801204a:	d100      	bne.n	801204e <HAL_DMA_IRQHandler+0x4de>
 801204c:	e15e      	b.n	801230c <HAL_DMA_IRQHandler+0x79c>
 801204e:	4977      	ldr	r1, [pc, #476]	; (801222c <HAL_DMA_IRQHandler+0x6bc>)
 8012050:	428b      	cmp	r3, r1
 8012052:	d100      	bne.n	8012056 <HAL_DMA_IRQHandler+0x4e6>
 8012054:	e124      	b.n	80122a0 <HAL_DMA_IRQHandler+0x730>
 8012056:	4976      	ldr	r1, [pc, #472]	; (8012230 <HAL_DMA_IRQHandler+0x6c0>)
 8012058:	428b      	cmp	r3, r1
 801205a:	d100      	bne.n	801205e <HAL_DMA_IRQHandler+0x4ee>
 801205c:	e190      	b.n	8012380 <HAL_DMA_IRQHandler+0x810>
 801205e:	4975      	ldr	r1, [pc, #468]	; (8012234 <HAL_DMA_IRQHandler+0x6c4>)
 8012060:	428b      	cmp	r3, r1
 8012062:	d100      	bne.n	8012066 <HAL_DMA_IRQHandler+0x4f6>
 8012064:	e1a6      	b.n	80123b4 <HAL_DMA_IRQHandler+0x844>
 8012066:	4974      	ldr	r1, [pc, #464]	; (8012238 <HAL_DMA_IRQHandler+0x6c8>)
 8012068:	428b      	cmp	r3, r1
 801206a:	d100      	bne.n	801206e <HAL_DMA_IRQHandler+0x4fe>
 801206c:	e1b9      	b.n	80123e2 <HAL_DMA_IRQHandler+0x872>
 801206e:	4293      	cmp	r3, r2
 8012070:	d100      	bne.n	8012074 <HAL_DMA_IRQHandler+0x504>
 8012072:	e1d8      	b.n	8012426 <HAL_DMA_IRQHandler+0x8b6>
 8012074:	4a71      	ldr	r2, [pc, #452]	; (801223c <HAL_DMA_IRQHandler+0x6cc>)
 8012076:	4293      	cmp	r3, r2
 8012078:	d100      	bne.n	801207c <HAL_DMA_IRQHandler+0x50c>
 801207a:	e12f      	b.n	80122dc <HAL_DMA_IRQHandler+0x76c>
 801207c:	4a70      	ldr	r2, [pc, #448]	; (8012240 <HAL_DMA_IRQHandler+0x6d0>)
 801207e:	4293      	cmp	r3, r2
 8012080:	d100      	bne.n	8012084 <HAL_DMA_IRQHandler+0x514>
 8012082:	e143      	b.n	801230c <HAL_DMA_IRQHandler+0x79c>
 8012084:	4a6f      	ldr	r2, [pc, #444]	; (8012244 <HAL_DMA_IRQHandler+0x6d4>)
 8012086:	4293      	cmp	r3, r2
 8012088:	d100      	bne.n	801208c <HAL_DMA_IRQHandler+0x51c>
 801208a:	e109      	b.n	80122a0 <HAL_DMA_IRQHandler+0x730>
 801208c:	4a6e      	ldr	r2, [pc, #440]	; (8012248 <HAL_DMA_IRQHandler+0x6d8>)
 801208e:	4694      	mov	ip, r2
 8012090:	4463      	add	r3, ip
 8012092:	1e5a      	subs	r2, r3, #1
 8012094:	4193      	sbcs	r3, r2
 8012096:	22f0      	movs	r2, #240	; 0xf0
 8012098:	425b      	negs	r3, r3
 801209a:	0252      	lsls	r2, r2, #9
 801209c:	4013      	ands	r3, r2
 801209e:	2280      	movs	r2, #128	; 0x80
 80120a0:	0192      	lsls	r2, r2, #6
 80120a2:	4694      	mov	ip, r2
 80120a4:	4463      	add	r3, ip
 80120a6:	4a69      	ldr	r2, [pc, #420]	; (801224c <HAL_DMA_IRQHandler+0x6dc>)
 80120a8:	6053      	str	r3, [r2, #4]
 80120aa:	e034      	b.n	8012116 <HAL_DMA_IRQHandler+0x5a6>
 80120ac:	428b      	cmp	r3, r1
 80120ae:	d100      	bne.n	80120b2 <HAL_DMA_IRQHandler+0x542>
 80120b0:	e10e      	b.n	80122d0 <HAL_DMA_IRQHandler+0x760>
 80120b2:	495d      	ldr	r1, [pc, #372]	; (8012228 <HAL_DMA_IRQHandler+0x6b8>)
 80120b4:	428b      	cmp	r3, r1
 80120b6:	d100      	bne.n	80120ba <HAL_DMA_IRQHandler+0x54a>
 80120b8:	e12a      	b.n	8012310 <HAL_DMA_IRQHandler+0x7a0>
 80120ba:	495c      	ldr	r1, [pc, #368]	; (801222c <HAL_DMA_IRQHandler+0x6bc>)
 80120bc:	428b      	cmp	r3, r1
 80120be:	d100      	bne.n	80120c2 <HAL_DMA_IRQHandler+0x552>
 80120c0:	e0df      	b.n	8012282 <HAL_DMA_IRQHandler+0x712>
 80120c2:	495b      	ldr	r1, [pc, #364]	; (8012230 <HAL_DMA_IRQHandler+0x6c0>)
 80120c4:	428b      	cmp	r3, r1
 80120c6:	d100      	bne.n	80120ca <HAL_DMA_IRQHandler+0x55a>
 80120c8:	e14b      	b.n	8012362 <HAL_DMA_IRQHandler+0x7f2>
 80120ca:	495a      	ldr	r1, [pc, #360]	; (8012234 <HAL_DMA_IRQHandler+0x6c4>)
 80120cc:	428b      	cmp	r3, r1
 80120ce:	d100      	bne.n	80120d2 <HAL_DMA_IRQHandler+0x562>
 80120d0:	e173      	b.n	80123ba <HAL_DMA_IRQHandler+0x84a>
 80120d2:	4959      	ldr	r1, [pc, #356]	; (8012238 <HAL_DMA_IRQHandler+0x6c8>)
 80120d4:	428b      	cmp	r3, r1
 80120d6:	d100      	bne.n	80120da <HAL_DMA_IRQHandler+0x56a>
 80120d8:	e189      	b.n	80123ee <HAL_DMA_IRQHandler+0x87e>
 80120da:	4293      	cmp	r3, r2
 80120dc:	d100      	bne.n	80120e0 <HAL_DMA_IRQHandler+0x570>
 80120de:	e1ae      	b.n	801243e <HAL_DMA_IRQHandler+0x8ce>
 80120e0:	4a56      	ldr	r2, [pc, #344]	; (801223c <HAL_DMA_IRQHandler+0x6cc>)
 80120e2:	4293      	cmp	r3, r2
 80120e4:	d100      	bne.n	80120e8 <HAL_DMA_IRQHandler+0x578>
 80120e6:	e0f3      	b.n	80122d0 <HAL_DMA_IRQHandler+0x760>
 80120e8:	4a55      	ldr	r2, [pc, #340]	; (8012240 <HAL_DMA_IRQHandler+0x6d0>)
 80120ea:	4293      	cmp	r3, r2
 80120ec:	d100      	bne.n	80120f0 <HAL_DMA_IRQHandler+0x580>
 80120ee:	e10f      	b.n	8012310 <HAL_DMA_IRQHandler+0x7a0>
 80120f0:	4a54      	ldr	r2, [pc, #336]	; (8012244 <HAL_DMA_IRQHandler+0x6d4>)
 80120f2:	4293      	cmp	r3, r2
 80120f4:	d100      	bne.n	80120f8 <HAL_DMA_IRQHandler+0x588>
 80120f6:	e0c4      	b.n	8012282 <HAL_DMA_IRQHandler+0x712>
 80120f8:	4a53      	ldr	r2, [pc, #332]	; (8012248 <HAL_DMA_IRQHandler+0x6d8>)
 80120fa:	4694      	mov	ip, r2
 80120fc:	4463      	add	r3, ip
 80120fe:	1e5a      	subs	r2, r3, #1
 8012100:	4193      	sbcs	r3, r2
 8012102:	22f0      	movs	r2, #240	; 0xf0
 8012104:	425b      	negs	r3, r3
 8012106:	0252      	lsls	r2, r2, #9
 8012108:	4013      	ands	r3, r2
 801210a:	2280      	movs	r2, #128	; 0x80
 801210c:	0192      	lsls	r2, r2, #6
 801210e:	4694      	mov	ip, r2
 8012110:	4463      	add	r3, ip
 8012112:	4a50      	ldr	r2, [pc, #320]	; (8012254 <HAL_DMA_IRQHandler+0x6e4>)
 8012114:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8012116:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8012118:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 801211a:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 801211c:	2321      	movs	r3, #33	; 0x21
 801211e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8012120:	2200      	movs	r2, #0
 8012122:	3b01      	subs	r3, #1
 8012124:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8012126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012128:	2b00      	cmp	r3, #0
 801212a:	d001      	beq.n	8012130 <HAL_DMA_IRQHandler+0x5c0>
        hdma->XferCpltCallback(hdma);
 801212c:	0020      	movs	r0, r4
 801212e:	4798      	blx	r3
}  
 8012130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012132:	483b      	ldr	r0, [pc, #236]	; (8012220 <HAL_DMA_IRQHandler+0x6b0>)
 8012134:	4282      	cmp	r2, r0
 8012136:	d100      	bne.n	801213a <HAL_DMA_IRQHandler+0x5ca>
 8012138:	e0ce      	b.n	80122d8 <HAL_DMA_IRQHandler+0x768>
 801213a:	483b      	ldr	r0, [pc, #236]	; (8012228 <HAL_DMA_IRQHandler+0x6b8>)
 801213c:	4282      	cmp	r2, r0
 801213e:	d100      	bne.n	8012142 <HAL_DMA_IRQHandler+0x5d2>
 8012140:	e0e2      	b.n	8012308 <HAL_DMA_IRQHandler+0x798>
 8012142:	483a      	ldr	r0, [pc, #232]	; (801222c <HAL_DMA_IRQHandler+0x6bc>)
 8012144:	4282      	cmp	r2, r0
 8012146:	d100      	bne.n	801214a <HAL_DMA_IRQHandler+0x5da>
 8012148:	e0a7      	b.n	801229a <HAL_DMA_IRQHandler+0x72a>
 801214a:	4839      	ldr	r0, [pc, #228]	; (8012230 <HAL_DMA_IRQHandler+0x6c0>)
 801214c:	4282      	cmp	r2, r0
 801214e:	d100      	bne.n	8012152 <HAL_DMA_IRQHandler+0x5e2>
 8012150:	e110      	b.n	8012374 <HAL_DMA_IRQHandler+0x804>
 8012152:	4838      	ldr	r0, [pc, #224]	; (8012234 <HAL_DMA_IRQHandler+0x6c4>)
 8012154:	4282      	cmp	r2, r0
 8012156:	d100      	bne.n	801215a <HAL_DMA_IRQHandler+0x5ea>
 8012158:	e126      	b.n	80123a8 <HAL_DMA_IRQHandler+0x838>
 801215a:	4837      	ldr	r0, [pc, #220]	; (8012238 <HAL_DMA_IRQHandler+0x6c8>)
 801215c:	4282      	cmp	r2, r0
 801215e:	d100      	bne.n	8012162 <HAL_DMA_IRQHandler+0x5f2>
 8012160:	e14b      	b.n	80123fa <HAL_DMA_IRQHandler+0x88a>
 8012162:	428a      	cmp	r2, r1
 8012164:	d100      	bne.n	8012168 <HAL_DMA_IRQHandler+0x5f8>
 8012166:	e164      	b.n	8012432 <HAL_DMA_IRQHandler+0x8c2>
 8012168:	4934      	ldr	r1, [pc, #208]	; (801223c <HAL_DMA_IRQHandler+0x6cc>)
 801216a:	428a      	cmp	r2, r1
 801216c:	d100      	bne.n	8012170 <HAL_DMA_IRQHandler+0x600>
 801216e:	e0b3      	b.n	80122d8 <HAL_DMA_IRQHandler+0x768>
 8012170:	4933      	ldr	r1, [pc, #204]	; (8012240 <HAL_DMA_IRQHandler+0x6d0>)
 8012172:	428a      	cmp	r2, r1
 8012174:	d100      	bne.n	8012178 <HAL_DMA_IRQHandler+0x608>
 8012176:	e0c7      	b.n	8012308 <HAL_DMA_IRQHandler+0x798>
 8012178:	4932      	ldr	r1, [pc, #200]	; (8012244 <HAL_DMA_IRQHandler+0x6d4>)
 801217a:	428a      	cmp	r2, r1
 801217c:	d100      	bne.n	8012180 <HAL_DMA_IRQHandler+0x610>
 801217e:	e08c      	b.n	801229a <HAL_DMA_IRQHandler+0x72a>
 8012180:	4931      	ldr	r1, [pc, #196]	; (8012248 <HAL_DMA_IRQHandler+0x6d8>)
 8012182:	468c      	mov	ip, r1
 8012184:	4462      	add	r2, ip
 8012186:	1e51      	subs	r1, r2, #1
 8012188:	418a      	sbcs	r2, r1
 801218a:	21f0      	movs	r1, #240	; 0xf0
 801218c:	4252      	negs	r2, r2
 801218e:	0289      	lsls	r1, r1, #10
 8012190:	400a      	ands	r2, r1
 8012192:	2180      	movs	r1, #128	; 0x80
 8012194:	01c9      	lsls	r1, r1, #7
 8012196:	468c      	mov	ip, r1
 8012198:	4462      	add	r2, ip
 801219a:	492e      	ldr	r1, [pc, #184]	; (8012254 <HAL_DMA_IRQHandler+0x6e4>)
 801219c:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 801219e:	2221      	movs	r2, #33	; 0x21
 80121a0:	2111      	movs	r1, #17
 80121a2:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80121a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80121a6:	2a00      	cmp	r2, #0
 80121a8:	d006      	beq.n	80121b8 <HAL_DMA_IRQHandler+0x648>
        hdma->XferHalfCpltCallback(hdma);
 80121aa:	0020      	movs	r0, r4
 80121ac:	4790      	blx	r2
 80121ae:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80121b0:	4a1c      	ldr	r2, [pc, #112]	; (8012224 <HAL_DMA_IRQHandler+0x6b4>)
 80121b2:	4293      	cmp	r3, r2
 80121b4:	d900      	bls.n	80121b8 <HAL_DMA_IRQHandler+0x648>
 80121b6:	e6f8      	b.n	8011faa <HAL_DMA_IRQHandler+0x43a>
 80121b8:	4a26      	ldr	r2, [pc, #152]	; (8012254 <HAL_DMA_IRQHandler+0x6e4>)
 80121ba:	6810      	ldr	r0, [r2, #0]
 80121bc:	4a18      	ldr	r2, [pc, #96]	; (8012220 <HAL_DMA_IRQHandler+0x6b0>)
 80121be:	4293      	cmp	r3, r2
 80121c0:	d000      	beq.n	80121c4 <HAL_DMA_IRQHandler+0x654>
 80121c2:	e6f8      	b.n	8011fb6 <HAL_DMA_IRQHandler+0x446>
 80121c4:	2202      	movs	r2, #2
 80121c6:	e725      	b.n	8012014 <HAL_DMA_IRQHandler+0x4a4>
 80121c8:	2280      	movs	r2, #128	; 0x80
 80121ca:	0092      	lsls	r2, r2, #2
 80121cc:	e722      	b.n	8012014 <HAL_DMA_IRQHandler+0x4a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80121ce:	0639      	lsls	r1, r7, #24
 80121d0:	d500      	bpl.n	80121d4 <HAL_DMA_IRQHandler+0x664>
 80121d2:	e611      	b.n	8011df8 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80121d4:	682d      	ldr	r5, [r5, #0]
 80121d6:	2140      	movs	r1, #64	; 0x40
 80121d8:	420d      	tst	r5, r1
 80121da:	d0ed      	beq.n	80121b8 <HAL_DMA_IRQHandler+0x648>
 80121dc:	e699      	b.n	8011f12 <HAL_DMA_IRQHandler+0x3a2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80121de:	2280      	movs	r2, #128	; 0x80
 80121e0:	0192      	lsls	r2, r2, #6
 80121e2:	e717      	b.n	8012014 <HAL_DMA_IRQHandler+0x4a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80121e4:	2104      	movs	r1, #4
 80121e6:	682d      	ldr	r5, [r5, #0]
 80121e8:	e691      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80121ea:	681a      	ldr	r2, [r3, #0]
 80121ec:	438a      	bics	r2, r1
 80121ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80121f0:	2208      	movs	r2, #8
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80121f2:	2101      	movs	r1, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80121f4:	4d15      	ldr	r5, [pc, #84]	; (801224c <HAL_DMA_IRQHandler+0x6dc>)
 80121f6:	606a      	str	r2, [r5, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80121f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80121fa:	430a      	orrs	r2, r1
 80121fc:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80121fe:	2221      	movs	r2, #33	; 0x21
 8012200:	3103      	adds	r1, #3
 8012202:	54a1      	strb	r1, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8012204:	2100      	movs	r1, #0
 8012206:	3a01      	subs	r2, #1
 8012208:	54a1      	strb	r1, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801220a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801220c:	2900      	cmp	r1, #0
 801220e:	d000      	beq.n	8012212 <HAL_DMA_IRQHandler+0x6a2>
 8012210:	e5b0      	b.n	8011d74 <HAL_DMA_IRQHandler+0x204>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012212:	682d      	ldr	r5, [r5, #0]
 8012214:	2104      	movs	r1, #4
 8012216:	4a02      	ldr	r2, [pc, #8]	; (8012220 <HAL_DMA_IRQHandler+0x6b0>)
 8012218:	e679      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
 801221a:	2104      	movs	r1, #4
 801221c:	682d      	ldr	r5, [r5, #0]
 801221e:	e7db      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
 8012220:	40020008 	.word	0x40020008
 8012224:	40020080 	.word	0x40020080
 8012228:	4002001c 	.word	0x4002001c
 801222c:	40020030 	.word	0x40020030
 8012230:	40020044 	.word	0x40020044
 8012234:	40020058 	.word	0x40020058
 8012238:	4002006c 	.word	0x4002006c
 801223c:	40020408 	.word	0x40020408
 8012240:	4002041c 	.word	0x4002041c
 8012244:	40020430 	.word	0x40020430
 8012248:	bffdfbbc 	.word	0xbffdfbbc
 801224c:	40020400 	.word	0x40020400
 8012250:	fffe2000 	.word	0xfffe2000
 8012254:	40020000 	.word	0x40020000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012258:	2280      	movs	r2, #128	; 0x80
 801225a:	0292      	lsls	r2, r2, #10
 801225c:	e6da      	b.n	8012014 <HAL_DMA_IRQHandler+0x4a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801225e:	0439      	lsls	r1, r7, #16
 8012260:	d500      	bpl.n	8012264 <HAL_DMA_IRQHandler+0x6f4>
 8012262:	e541      	b.n	8011ce8 <HAL_DMA_IRQHandler+0x178>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012264:	2180      	movs	r1, #128	; 0x80
 8012266:	682d      	ldr	r5, [r5, #0]
 8012268:	01c9      	lsls	r1, r1, #7
 801226a:	e650      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
 801226c:	682d      	ldr	r5, [r5, #0]
 801226e:	2180      	movs	r1, #128	; 0x80
 8012270:	01c9      	lsls	r1, r1, #7
 8012272:	e7b1      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8012274:	2280      	movs	r2, #128	; 0x80
 8012276:	0392      	lsls	r2, r2, #14
 8012278:	e6cc      	b.n	8012014 <HAL_DMA_IRQHandler+0x4a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801227a:	2180      	movs	r1, #128	; 0x80
 801227c:	682d      	ldr	r5, [r5, #0]
 801227e:	00c9      	lsls	r1, r1, #3
 8012280:	e645      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012282:	2380      	movs	r3, #128	; 0x80
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	e744      	b.n	8012112 <HAL_DMA_IRQHandler+0x5a2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012288:	2280      	movs	r2, #128	; 0x80
 801228a:	00d2      	lsls	r2, r2, #3
 801228c:	e684      	b.n	8011f98 <HAL_DMA_IRQHandler+0x428>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801228e:	2180      	movs	r1, #128	; 0x80
 8012290:	0109      	lsls	r1, r1, #4
 8012292:	e55f      	b.n	8011d54 <HAL_DMA_IRQHandler+0x1e4>
 8012294:	2180      	movs	r1, #128	; 0x80
 8012296:	0109      	lsls	r1, r1, #4
 8012298:	e5e4      	b.n	8011e64 <HAL_DMA_IRQHandler+0x2f4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801229a:	2280      	movs	r2, #128	; 0x80
 801229c:	00d2      	lsls	r2, r2, #3
 801229e:	e77c      	b.n	801219a <HAL_DMA_IRQHandler+0x62a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80122a0:	2380      	movs	r3, #128	; 0x80
 80122a2:	009b      	lsls	r3, r3, #2
 80122a4:	e6ff      	b.n	80120a6 <HAL_DMA_IRQHandler+0x536>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80122a6:	0339      	lsls	r1, r7, #12
 80122a8:	d500      	bpl.n	80122ac <HAL_DMA_IRQHandler+0x73c>
 80122aa:	e5a5      	b.n	8011df8 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80122ac:	682d      	ldr	r5, [r5, #0]
 80122ae:	2180      	movs	r1, #128	; 0x80
 80122b0:	02c9      	lsls	r1, r1, #11
 80122b2:	e791      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80122b4:	0139      	lsls	r1, r7, #4
 80122b6:	d500      	bpl.n	80122ba <HAL_DMA_IRQHandler+0x74a>
 80122b8:	e59e      	b.n	8011df8 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80122ba:	682d      	ldr	r5, [r5, #0]
 80122bc:	2180      	movs	r1, #128	; 0x80
 80122be:	04c9      	lsls	r1, r1, #19
 80122c0:	e78a      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80122c2:	0139      	lsls	r1, r7, #4
 80122c4:	d500      	bpl.n	80122c8 <HAL_DMA_IRQHandler+0x758>
 80122c6:	e50f      	b.n	8011ce8 <HAL_DMA_IRQHandler+0x178>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80122c8:	682d      	ldr	r5, [r5, #0]
 80122ca:	2180      	movs	r1, #128	; 0x80
 80122cc:	04c9      	lsls	r1, r1, #19
 80122ce:	e61e      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80122d0:	2302      	movs	r3, #2
 80122d2:	e71e      	b.n	8012112 <HAL_DMA_IRQHandler+0x5a2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80122d4:	2204      	movs	r2, #4
 80122d6:	e65f      	b.n	8011f98 <HAL_DMA_IRQHandler+0x428>
 80122d8:	2204      	movs	r2, #4
 80122da:	e75e      	b.n	801219a <HAL_DMA_IRQHandler+0x62a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80122dc:	2302      	movs	r3, #2
 80122de:	e6e2      	b.n	80120a6 <HAL_DMA_IRQHandler+0x536>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80122e0:	2180      	movs	r1, #128	; 0x80
 80122e2:	00c9      	lsls	r1, r1, #3
 80122e4:	e778      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
 80122e6:	2180      	movs	r1, #128	; 0x80
 80122e8:	00c9      	lsls	r1, r1, #3
 80122ea:	e610      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80122ec:	0339      	lsls	r1, r7, #12
 80122ee:	d500      	bpl.n	80122f2 <HAL_DMA_IRQHandler+0x782>
 80122f0:	e4fa      	b.n	8011ce8 <HAL_DMA_IRQHandler+0x178>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80122f2:	2180      	movs	r1, #128	; 0x80
 80122f4:	682d      	ldr	r5, [r5, #0]
 80122f6:	02c9      	lsls	r1, r1, #11
 80122f8:	e609      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80122fa:	2280      	movs	r2, #128	; 0x80
 80122fc:	0492      	lsls	r2, r2, #18
 80122fe:	e689      	b.n	8012014 <HAL_DMA_IRQHandler+0x4a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8012300:	2180      	movs	r1, #128	; 0x80
 8012302:	e527      	b.n	8011d54 <HAL_DMA_IRQHandler+0x1e4>
 8012304:	2180      	movs	r1, #128	; 0x80
 8012306:	e5ad      	b.n	8011e64 <HAL_DMA_IRQHandler+0x2f4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012308:	2240      	movs	r2, #64	; 0x40
 801230a:	e746      	b.n	801219a <HAL_DMA_IRQHandler+0x62a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801230c:	2320      	movs	r3, #32
 801230e:	e6ca      	b.n	80120a6 <HAL_DMA_IRQHandler+0x536>
 8012310:	2320      	movs	r3, #32
 8012312:	e6fe      	b.n	8012112 <HAL_DMA_IRQHandler+0x5a2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012314:	2240      	movs	r2, #64	; 0x40
 8012316:	e63f      	b.n	8011f98 <HAL_DMA_IRQHandler+0x428>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8012318:	0439      	lsls	r1, r7, #16
 801231a:	d415      	bmi.n	8012348 <HAL_DMA_IRQHandler+0x7d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801231c:	0018      	movs	r0, r3
 801231e:	4951      	ldr	r1, [pc, #324]	; (8012464 <HAL_DMA_IRQHandler+0x8f4>)
 8012320:	680d      	ldr	r5, [r1, #0]
 8012322:	2180      	movs	r1, #128	; 0x80
 8012324:	01c9      	lsls	r1, r1, #7
 8012326:	e5f2      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
 8012328:	682d      	ldr	r5, [r5, #0]
 801232a:	e4a4      	b.n	8011c76 <HAL_DMA_IRQHandler+0x106>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801232c:	0239      	lsls	r1, r7, #8
 801232e:	d500      	bpl.n	8012332 <HAL_DMA_IRQHandler+0x7c2>
 8012330:	e562      	b.n	8011df8 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012332:	682d      	ldr	r5, [r5, #0]
 8012334:	2180      	movs	r1, #128	; 0x80
 8012336:	03c9      	lsls	r1, r1, #15
 8012338:	e74e      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801233a:	0239      	lsls	r1, r7, #8
 801233c:	d500      	bpl.n	8012340 <HAL_DMA_IRQHandler+0x7d0>
 801233e:	e4d3      	b.n	8011ce8 <HAL_DMA_IRQHandler+0x178>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012340:	682d      	ldr	r5, [r5, #0]
 8012342:	2180      	movs	r1, #128	; 0x80
 8012344:	03c9      	lsls	r1, r1, #15
 8012346:	e5e2      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8012348:	2108      	movs	r1, #8
 801234a:	681d      	ldr	r5, [r3, #0]
 801234c:	4229      	tst	r1, r5
 801234e:	d100      	bne.n	8012352 <HAL_DMA_IRQHandler+0x7e2>
 8012350:	e48b      	b.n	8011c6a <HAL_DMA_IRQHandler+0xfa>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8012352:	681d      	ldr	r5, [r3, #0]
 8012354:	438d      	bics	r5, r1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8012356:	4944      	ldr	r1, [pc, #272]	; (8012468 <HAL_DMA_IRQHandler+0x8f8>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8012358:	601d      	str	r5, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801235a:	428b      	cmp	r3, r1
 801235c:	d000      	beq.n	8012360 <HAL_DMA_IRQHandler+0x7f0>
 801235e:	e4ca      	b.n	8011cf6 <HAL_DMA_IRQHandler+0x186>
 8012360:	e746      	b.n	80121f0 <HAL_DMA_IRQHandler+0x680>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012362:	2380      	movs	r3, #128	; 0x80
 8012364:	019b      	lsls	r3, r3, #6
 8012366:	e6d4      	b.n	8012112 <HAL_DMA_IRQHandler+0x5a2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8012368:	2180      	movs	r1, #128	; 0x80
 801236a:	0209      	lsls	r1, r1, #8
 801236c:	e4f2      	b.n	8011d54 <HAL_DMA_IRQHandler+0x1e4>
 801236e:	2180      	movs	r1, #128	; 0x80
 8012370:	0209      	lsls	r1, r1, #8
 8012372:	e577      	b.n	8011e64 <HAL_DMA_IRQHandler+0x2f4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012374:	2280      	movs	r2, #128	; 0x80
 8012376:	01d2      	lsls	r2, r2, #7
 8012378:	e70f      	b.n	801219a <HAL_DMA_IRQHandler+0x62a>
 801237a:	2280      	movs	r2, #128	; 0x80
 801237c:	01d2      	lsls	r2, r2, #7
 801237e:	e60b      	b.n	8011f98 <HAL_DMA_IRQHandler+0x428>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012380:	2380      	movs	r3, #128	; 0x80
 8012382:	019b      	lsls	r3, r3, #6
 8012384:	e68f      	b.n	80120a6 <HAL_DMA_IRQHandler+0x536>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8012386:	0739      	lsls	r1, r7, #28
 8012388:	d500      	bpl.n	801238c <HAL_DMA_IRQHandler+0x81c>
 801238a:	e535      	b.n	8011df8 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801238c:	4937      	ldr	r1, [pc, #220]	; (801246c <HAL_DMA_IRQHandler+0x8fc>)
 801238e:	680d      	ldr	r5, [r1, #0]
 8012390:	2104      	movs	r1, #4
 8012392:	e721      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8012394:	0739      	lsls	r1, r7, #28
 8012396:	d4d7      	bmi.n	8012348 <HAL_DMA_IRQHandler+0x7d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012398:	4932      	ldr	r1, [pc, #200]	; (8012464 <HAL_DMA_IRQHandler+0x8f4>)
 801239a:	4835      	ldr	r0, [pc, #212]	; (8012470 <HAL_DMA_IRQHandler+0x900>)
 801239c:	680d      	ldr	r5, [r1, #0]
 801239e:	2104      	movs	r1, #4
 80123a0:	e5b5      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80123a2:	2180      	movs	r1, #128	; 0x80
 80123a4:	0309      	lsls	r1, r1, #12
 80123a6:	e55d      	b.n	8011e64 <HAL_DMA_IRQHandler+0x2f4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80123a8:	2280      	movs	r2, #128	; 0x80
 80123aa:	02d2      	lsls	r2, r2, #11
 80123ac:	e6f5      	b.n	801219a <HAL_DMA_IRQHandler+0x62a>
 80123ae:	2280      	movs	r2, #128	; 0x80
 80123b0:	02d2      	lsls	r2, r2, #11
 80123b2:	e5f1      	b.n	8011f98 <HAL_DMA_IRQHandler+0x428>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80123b4:	2380      	movs	r3, #128	; 0x80
 80123b6:	029b      	lsls	r3, r3, #10
 80123b8:	e675      	b.n	80120a6 <HAL_DMA_IRQHandler+0x536>
 80123ba:	2380      	movs	r3, #128	; 0x80
 80123bc:	029b      	lsls	r3, r3, #10
 80123be:	e6a8      	b.n	8012112 <HAL_DMA_IRQHandler+0x5a2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80123c0:	2180      	movs	r1, #128	; 0x80
 80123c2:	0309      	lsls	r1, r1, #12
 80123c4:	e4c6      	b.n	8011d54 <HAL_DMA_IRQHandler+0x1e4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80123c6:	0639      	lsls	r1, r7, #24
 80123c8:	d500      	bpl.n	80123cc <HAL_DMA_IRQHandler+0x85c>
 80123ca:	e515      	b.n	8011df8 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80123cc:	4927      	ldr	r1, [pc, #156]	; (801246c <HAL_DMA_IRQHandler+0x8fc>)
 80123ce:	680d      	ldr	r5, [r1, #0]
 80123d0:	2140      	movs	r1, #64	; 0x40
 80123d2:	e701      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80123d4:	0639      	lsls	r1, r7, #24
 80123d6:	d4b7      	bmi.n	8012348 <HAL_DMA_IRQHandler+0x7d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80123d8:	4922      	ldr	r1, [pc, #136]	; (8012464 <HAL_DMA_IRQHandler+0x8f4>)
 80123da:	4826      	ldr	r0, [pc, #152]	; (8012474 <HAL_DMA_IRQHandler+0x904>)
 80123dc:	680d      	ldr	r5, [r1, #0]
 80123de:	2140      	movs	r1, #64	; 0x40
 80123e0:	e595      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80123e2:	2380      	movs	r3, #128	; 0x80
 80123e4:	039b      	lsls	r3, r3, #14
 80123e6:	e65e      	b.n	80120a6 <HAL_DMA_IRQHandler+0x536>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80123e8:	2180      	movs	r1, #128	; 0x80
 80123ea:	0409      	lsls	r1, r1, #16
 80123ec:	e4b2      	b.n	8011d54 <HAL_DMA_IRQHandler+0x1e4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80123ee:	2380      	movs	r3, #128	; 0x80
 80123f0:	039b      	lsls	r3, r3, #14
 80123f2:	e68e      	b.n	8012112 <HAL_DMA_IRQHandler+0x5a2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80123f4:	2180      	movs	r1, #128	; 0x80
 80123f6:	0409      	lsls	r1, r1, #16
 80123f8:	e534      	b.n	8011e64 <HAL_DMA_IRQHandler+0x2f4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80123fa:	2280      	movs	r2, #128	; 0x80
 80123fc:	03d2      	lsls	r2, r2, #15
 80123fe:	e6cc      	b.n	801219a <HAL_DMA_IRQHandler+0x62a>
 8012400:	2280      	movs	r2, #128	; 0x80
 8012402:	03d2      	lsls	r2, r2, #15
 8012404:	e5c8      	b.n	8011f98 <HAL_DMA_IRQHandler+0x428>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8012406:	0539      	lsls	r1, r7, #20
 8012408:	d49e      	bmi.n	8012348 <HAL_DMA_IRQHandler+0x7d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801240a:	4916      	ldr	r1, [pc, #88]	; (8012464 <HAL_DMA_IRQHandler+0x8f4>)
 801240c:	0018      	movs	r0, r3
 801240e:	680d      	ldr	r5, [r1, #0]
 8012410:	2180      	movs	r1, #128	; 0x80
 8012412:	00c9      	lsls	r1, r1, #3
 8012414:	e57b      	b.n	8011f0e <HAL_DMA_IRQHandler+0x39e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8012416:	0539      	lsls	r1, r7, #20
 8012418:	d500      	bpl.n	801241c <HAL_DMA_IRQHandler+0x8ac>
 801241a:	e4ed      	b.n	8011df8 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801241c:	4913      	ldr	r1, [pc, #76]	; (801246c <HAL_DMA_IRQHandler+0x8fc>)
 801241e:	680d      	ldr	r5, [r1, #0]
 8012420:	2180      	movs	r1, #128	; 0x80
 8012422:	00c9      	lsls	r1, r1, #3
 8012424:	e6d8      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8012426:	2380      	movs	r3, #128	; 0x80
 8012428:	049b      	lsls	r3, r3, #18
 801242a:	e63c      	b.n	80120a6 <HAL_DMA_IRQHandler+0x536>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801242c:	2180      	movs	r1, #128	; 0x80
 801242e:	0509      	lsls	r1, r1, #20
 8012430:	e490      	b.n	8011d54 <HAL_DMA_IRQHandler+0x1e4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8012432:	2280      	movs	r2, #128	; 0x80
 8012434:	04d2      	lsls	r2, r2, #19
 8012436:	e6b0      	b.n	801219a <HAL_DMA_IRQHandler+0x62a>
 8012438:	2280      	movs	r2, #128	; 0x80
 801243a:	04d2      	lsls	r2, r2, #19
 801243c:	e5ac      	b.n	8011f98 <HAL_DMA_IRQHandler+0x428>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801243e:	2380      	movs	r3, #128	; 0x80
 8012440:	049b      	lsls	r3, r3, #18
 8012442:	e666      	b.n	8012112 <HAL_DMA_IRQHandler+0x5a2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8012444:	2180      	movs	r1, #128	; 0x80
 8012446:	0509      	lsls	r1, r1, #20
 8012448:	e50c      	b.n	8011e64 <HAL_DMA_IRQHandler+0x2f4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801244a:	0439      	lsls	r1, r7, #16
 801244c:	d500      	bpl.n	8012450 <HAL_DMA_IRQHandler+0x8e0>
 801244e:	e4d3      	b.n	8011df8 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8012450:	4906      	ldr	r1, [pc, #24]	; (801246c <HAL_DMA_IRQHandler+0x8fc>)
 8012452:	680d      	ldr	r5, [r1, #0]
 8012454:	2180      	movs	r1, #128	; 0x80
 8012456:	01c9      	lsls	r1, r1, #7
 8012458:	e6be      	b.n	80121d8 <HAL_DMA_IRQHandler+0x668>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801245a:	2108      	movs	r1, #8
 801245c:	e502      	b.n	8011e64 <HAL_DMA_IRQHandler+0x2f4>
 801245e:	2108      	movs	r1, #8
 8012460:	e478      	b.n	8011d54 <HAL_DMA_IRQHandler+0x1e4>
 8012462:	46c0      	nop			; (mov r8, r8)
 8012464:	40020400 	.word	0x40020400
 8012468:	40020008 	.word	0x40020008
 801246c:	40020000 	.word	0x40020000
 8012470:	40020408 	.word	0x40020408
 8012474:	4002041c 	.word	0x4002041c

08012478 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8012478:	4b05      	ldr	r3, [pc, #20]	; (8012490 <HAL_FLASH_Unlock+0x18>)
 801247a:	691a      	ldr	r2, [r3, #16]
 801247c:	0612      	lsls	r2, r2, #24
 801247e:	d505      	bpl.n	801248c <HAL_FLASH_Unlock+0x14>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK; 
 8012480:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012482:	4a04      	ldr	r2, [pc, #16]	; (8012494 <HAL_FLASH_Unlock+0x1c>)
 8012484:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012486:	4a04      	ldr	r2, [pc, #16]	; (8012498 <HAL_FLASH_Unlock+0x20>)
 8012488:	605a      	str	r2, [r3, #4]
}
 801248a:	4770      	bx	lr
    return HAL_ERROR;
 801248c:	2001      	movs	r0, #1
 801248e:	e7fc      	b.n	801248a <HAL_FLASH_Unlock+0x12>
 8012490:	40022000 	.word	0x40022000
 8012494:	45670123 	.word	0x45670123
 8012498:	cdef89ab 	.word	0xcdef89ab

0801249c <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801249c:	2180      	movs	r1, #128	; 0x80
 801249e:	4a03      	ldr	r2, [pc, #12]	; (80124ac <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 80124a0:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80124a2:	6913      	ldr	r3, [r2, #16]
 80124a4:	430b      	orrs	r3, r1
 80124a6:	6113      	str	r3, [r2, #16]
}
 80124a8:	4770      	bx	lr
 80124aa:	46c0      	nop			; (mov r8, r8)
 80124ac:	40022000 	.word	0x40022000

080124b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80124b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b2:	0004      	movs	r4, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80124b4:	f7fe fe46 	bl	8011144 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80124b8:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 80124ba:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80124bc:	4d1a      	ldr	r5, [pc, #104]	; (8012528 <FLASH_WaitForLastOperation+0x78>)
 80124be:	e001      	b.n	80124c4 <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80124c0:	1c63      	adds	r3, r4, #1
 80124c2:	d126      	bne.n	8012512 <FLASH_WaitForLastOperation+0x62>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80124c4:	68eb      	ldr	r3, [r5, #12]
 80124c6:	421e      	tst	r6, r3
 80124c8:	d1fa      	bne.n	80124c0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80124ca:	2320      	movs	r3, #32
 80124cc:	68ea      	ldr	r2, [r5, #12]
 80124ce:	4213      	tst	r3, r2
 80124d0:	d128      	bne.n	8012524 <FLASH_WaitForLastOperation+0x74>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80124d2:	4b15      	ldr	r3, [pc, #84]	; (8012528 <FLASH_WaitForLastOperation+0x78>)
 80124d4:	68da      	ldr	r2, [r3, #12]
 80124d6:	06d2      	lsls	r2, r2, #27
 80124d8:	d404      	bmi.n	80124e4 <FLASH_WaitForLastOperation+0x34>
 80124da:	68db      	ldr	r3, [r3, #12]
    FLASH_SetErrorCode();
    return HAL_ERROR;
  }

  /* If there is no error flag set */
  return HAL_OK;
 80124dc:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80124de:	075b      	lsls	r3, r3, #29
 80124e0:	d400      	bmi.n	80124e4 <FLASH_WaitForLastOperation+0x34>
  
}
 80124e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80124e4:	4b10      	ldr	r3, [pc, #64]	; (8012528 <FLASH_WaitForLastOperation+0x78>)
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	06db      	lsls	r3, r3, #27
 80124ea:	d504      	bpl.n	80124f6 <FLASH_WaitForLastOperation+0x46>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80124ec:	2102      	movs	r1, #2
 80124ee:	4a0f      	ldr	r2, [pc, #60]	; (801252c <FLASH_WaitForLastOperation+0x7c>)
 80124f0:	69d3      	ldr	r3, [r2, #28]
 80124f2:	430b      	orrs	r3, r1
 80124f4:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80124f6:	4b0c      	ldr	r3, [pc, #48]	; (8012528 <FLASH_WaitForLastOperation+0x78>)
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	075b      	lsls	r3, r3, #29
 80124fc:	d504      	bpl.n	8012508 <FLASH_WaitForLastOperation+0x58>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80124fe:	2101      	movs	r1, #1
 8012500:	4a0a      	ldr	r2, [pc, #40]	; (801252c <FLASH_WaitForLastOperation+0x7c>)
 8012502:	69d3      	ldr	r3, [r2, #28]
 8012504:	430b      	orrs	r3, r1
 8012506:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8012508:	2214      	movs	r2, #20
 801250a:	4b07      	ldr	r3, [pc, #28]	; (8012528 <FLASH_WaitForLastOperation+0x78>)
 801250c:	2001      	movs	r0, #1
 801250e:	60da      	str	r2, [r3, #12]
    return HAL_ERROR;
 8012510:	e7e7      	b.n	80124e2 <FLASH_WaitForLastOperation+0x32>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012512:	2c00      	cmp	r4, #0
 8012514:	d004      	beq.n	8012520 <FLASH_WaitForLastOperation+0x70>
 8012516:	f7fe fe15 	bl	8011144 <HAL_GetTick>
 801251a:	1bc0      	subs	r0, r0, r7
 801251c:	42a0      	cmp	r0, r4
 801251e:	d9d1      	bls.n	80124c4 <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 8012520:	2003      	movs	r0, #3
 8012522:	e7de      	b.n	80124e2 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012524:	60eb      	str	r3, [r5, #12]
 8012526:	e7d4      	b.n	80124d2 <FLASH_WaitForLastOperation+0x22>
 8012528:	40022000 	.word	0x40022000
 801252c:	20006fe0 	.word	0x20006fe0

08012530 <HAL_FLASH_Program>:
{
 8012530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012532:	464e      	mov	r6, r9
 8012534:	4657      	mov	r7, sl
 8012536:	46de      	mov	lr, fp
 8012538:	4645      	mov	r5, r8
 801253a:	b5e0      	push	{r5, r6, r7, lr}
 801253c:	469a      	mov	sl, r3
 801253e:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8012540:	4b2a      	ldr	r3, [pc, #168]	; (80125ec <HAL_FLASH_Program+0xbc>)
{
 8012542:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8012544:	4699      	mov	r9, r3
 8012546:	7e1b      	ldrb	r3, [r3, #24]
{
 8012548:	0004      	movs	r4, r0
 801254a:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 801254c:	2b01      	cmp	r3, #1
 801254e:	d048      	beq.n	80125e2 <HAL_FLASH_Program+0xb2>
 8012550:	2501      	movs	r5, #1
 8012552:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012554:	4826      	ldr	r0, [pc, #152]	; (80125f0 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 8012556:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012558:	f7ff ffaa 	bl	80124b0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801255c:	2800      	cmp	r0, #0
 801255e:	d136      	bne.n	80125ce <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8012560:	2c01      	cmp	r4, #1
 8012562:	d040      	beq.n	80125e6 <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 8012564:	3c02      	subs	r4, #2
 8012566:	4260      	negs	r0, r4
 8012568:	4144      	adcs	r4, r0
 801256a:	2304      	movs	r3, #4
 801256c:	4264      	negs	r4, r4
 801256e:	43ac      	bics	r4, r5
 8012570:	46a0      	mov	r8, r4
 8012572:	469c      	mov	ip, r3
 8012574:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012576:	2300      	movs	r3, #0
      nbiterations = 4;
 8012578:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801257a:	469b      	mov	fp, r3
 801257c:	e018      	b.n	80125b0 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801257e:	4653      	mov	r3, sl
 8012580:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012582:	464a      	mov	r2, r9
 8012584:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8012586:	2701      	movs	r7, #1
 8012588:	4c1a      	ldr	r4, [pc, #104]	; (80125f4 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801258a:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801258c:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801258e:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8012590:	433a      	orrs	r2, r7
 8012592:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012594:	4816      	ldr	r0, [pc, #88]	; (80125f0 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 8012596:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012598:	f7ff ff8a 	bl	80124b0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 801259c:	6923      	ldr	r3, [r4, #16]
 801259e:	43bb      	bics	r3, r7
 80125a0:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80125a2:	2800      	cmp	r0, #0
 80125a4:	d113      	bne.n	80125ce <HAL_FLASH_Program+0x9e>
    for (index = 0; index < nbiterations; index++)
 80125a6:	3501      	adds	r5, #1
 80125a8:	b2eb      	uxtb	r3, r5
 80125aa:	3602      	adds	r6, #2
 80125ac:	4598      	cmp	r8, r3
 80125ae:	d90e      	bls.n	80125ce <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80125b0:	2220      	movs	r2, #32
 80125b2:	012b      	lsls	r3, r5, #4
 80125b4:	4252      	negs	r2, r2
 80125b6:	189a      	adds	r2, r3, r2
 80125b8:	d5e1      	bpl.n	801257e <HAL_FLASH_Program+0x4e>
 80125ba:	2220      	movs	r2, #32
 80125bc:	4651      	mov	r1, sl
 80125be:	1ad2      	subs	r2, r2, r3
 80125c0:	4091      	lsls	r1, r2
 80125c2:	000a      	movs	r2, r1
 80125c4:	9901      	ldr	r1, [sp, #4]
 80125c6:	40d9      	lsrs	r1, r3
 80125c8:	000b      	movs	r3, r1
 80125ca:	4313      	orrs	r3, r2
 80125cc:	e7d9      	b.n	8012582 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 80125ce:	2300      	movs	r3, #0
 80125d0:	464a      	mov	r2, r9
 80125d2:	7613      	strb	r3, [r2, #24]
}
 80125d4:	b003      	add	sp, #12
 80125d6:	bcf0      	pop	{r4, r5, r6, r7}
 80125d8:	46bb      	mov	fp, r7
 80125da:	46b2      	mov	sl, r6
 80125dc:	46a9      	mov	r9, r5
 80125de:	46a0      	mov	r8, r4
 80125e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80125e2:	2002      	movs	r0, #2
 80125e4:	e7f6      	b.n	80125d4 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 80125e6:	2301      	movs	r3, #1
 80125e8:	4698      	mov	r8, r3
 80125ea:	e7c4      	b.n	8012576 <HAL_FLASH_Program+0x46>
 80125ec:	20006fe0 	.word	0x20006fe0
 80125f0:	0000c350 	.word	0x0000c350
 80125f4:	40022000 	.word	0x40022000

080125f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80125f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125fa:	4646      	mov	r6, r8
 80125fc:	464f      	mov	r7, r9
 80125fe:	46d6      	mov	lr, sl
 8012600:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012602:	4f30      	ldr	r7, [pc, #192]	; (80126c4 <HAL_FLASHEx_Erase+0xcc>)
{
 8012604:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8012606:	7e3b      	ldrb	r3, [r7, #24]
{
 8012608:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 801260a:	2b01      	cmp	r3, #1
 801260c:	d057      	beq.n	80126be <HAL_FLASHEx_Erase+0xc6>
 801260e:	2301      	movs	r3, #1
 8012610:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012612:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8012614:	482c      	ldr	r0, [pc, #176]	; (80126c8 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012616:	2b01      	cmp	r3, #1
 8012618:	d034      	beq.n	8012684 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801261a:	f7ff ff49 	bl	80124b0 <FLASH_WaitForLastOperation>
 801261e:	2800      	cmp	r0, #0
 8012620:	d134      	bne.n	801268c <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8012622:	2301      	movs	r3, #1
 8012624:	4642      	mov	r2, r8
 8012626:	425b      	negs	r3, r3
 8012628:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801262a:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 801262c:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801262e:	02db      	lsls	r3, r3, #11
 8012630:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8012632:	429d      	cmp	r5, r3
 8012634:	d22a      	bcs.n	801268c <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012636:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8012638:	4c24      	ldr	r4, [pc, #144]	; (80126cc <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801263a:	4699      	mov	r9, r3
 801263c:	e00a      	b.n	8012654 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 801263e:	2380      	movs	r3, #128	; 0x80
 8012640:	011b      	lsls	r3, r3, #4
 8012642:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8012644:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8012646:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8012648:	4694      	mov	ip, r2
 801264a:	68b3      	ldr	r3, [r6, #8]
 801264c:	02db      	lsls	r3, r3, #11
 801264e:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8012650:	42ab      	cmp	r3, r5
 8012652:	d91c      	bls.n	801268e <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8012654:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012656:	464b      	mov	r3, r9
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8012658:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801265a:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801265c:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801265e:	481a      	ldr	r0, [pc, #104]	; (80126c8 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8012660:	4313      	orrs	r3, r2
 8012662:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8012664:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012666:	6923      	ldr	r3, [r4, #16]
 8012668:	323e      	adds	r2, #62	; 0x3e
 801266a:	4313      	orrs	r3, r2
 801266c:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801266e:	f7ff ff1f 	bl	80124b0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8012672:	4652      	mov	r2, sl
 8012674:	6923      	ldr	r3, [r4, #16]
 8012676:	4393      	bics	r3, r2
 8012678:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 801267a:	2800      	cmp	r0, #0
 801267c:	d0df      	beq.n	801263e <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 801267e:	4643      	mov	r3, r8
 8012680:	601d      	str	r5, [r3, #0]
            break;
 8012682:	e004      	b.n	801268e <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8012684:	f7ff ff14 	bl	80124b0 <FLASH_WaitForLastOperation>
 8012688:	2800      	cmp	r0, #0
 801268a:	d007      	beq.n	801269c <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 801268c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 801268e:	2300      	movs	r3, #0
 8012690:	763b      	strb	r3, [r7, #24]
}
 8012692:	bce0      	pop	{r5, r6, r7}
 8012694:	46ba      	mov	sl, r7
 8012696:	46b1      	mov	r9, r6
 8012698:	46a8      	mov	r8, r5
 801269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801269c:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801269e:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80126a0:	4c0a      	ldr	r4, [pc, #40]	; (80126cc <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80126a2:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80126a4:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80126a6:	4808      	ldr	r0, [pc, #32]	; (80126c8 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80126a8:	432b      	orrs	r3, r5
 80126aa:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80126ac:	6923      	ldr	r3, [r4, #16]
 80126ae:	4313      	orrs	r3, r2
 80126b0:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80126b2:	f7ff fefd 	bl	80124b0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80126b6:	6923      	ldr	r3, [r4, #16]
 80126b8:	43ab      	bics	r3, r5
 80126ba:	6123      	str	r3, [r4, #16]
 80126bc:	e7e7      	b.n	801268e <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 80126be:	2002      	movs	r0, #2
 80126c0:	e7e7      	b.n	8012692 <HAL_FLASHEx_Erase+0x9a>
 80126c2:	46c0      	nop			; (mov r8, r8)
 80126c4:	20006fe0 	.word	0x20006fe0
 80126c8:	0000c350 	.word	0x0000c350
 80126cc:	40022000 	.word	0x40022000

080126d0 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80126d0:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80126d2:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80126d4:	4b05      	ldr	r3, [pc, #20]	; (80126ec <FLASH_PageErase+0x1c>)
 80126d6:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80126d8:	4b05      	ldr	r3, [pc, #20]	; (80126f0 <FLASH_PageErase+0x20>)
 80126da:	691a      	ldr	r2, [r3, #16]
 80126dc:	430a      	orrs	r2, r1
 80126de:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80126e0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80126e2:	691a      	ldr	r2, [r3, #16]
 80126e4:	313e      	adds	r1, #62	; 0x3e
 80126e6:	430a      	orrs	r2, r1
 80126e8:	611a      	str	r2, [r3, #16]
}
 80126ea:	4770      	bx	lr
 80126ec:	20006fe0 	.word	0x20006fe0
 80126f0:	40022000 	.word	0x40022000

080126f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80126f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126f6:	46de      	mov	lr, fp
 80126f8:	4657      	mov	r7, sl
 80126fa:	464e      	mov	r6, r9
 80126fc:	4645      	mov	r5, r8
 80126fe:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8012700:	680c      	ldr	r4, [r1, #0]
  uint32_t position = 0x00;
 8012702:	2300      	movs	r3, #0
{ 
 8012704:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 8012706:	2c00      	cmp	r4, #0
 8012708:	d100      	bne.n	801270c <HAL_GPIO_Init+0x18>
 801270a:	e08b      	b.n	8012824 <HAL_GPIO_Init+0x130>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801270c:	4a7d      	ldr	r2, [pc, #500]	; (8012904 <HAL_GPIO_Init+0x210>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801270e:	468a      	mov	sl, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012710:	4691      	mov	r9, r2
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8012712:	2201      	movs	r2, #1
 8012714:	0021      	movs	r1, r4
 8012716:	409a      	lsls	r2, r3
 8012718:	4011      	ands	r1, r2
 801271a:	9101      	str	r1, [sp, #4]
    if(iocurrent)
 801271c:	4214      	tst	r4, r2
 801271e:	d07c      	beq.n	801281a <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8012720:	4652      	mov	r2, sl
 8012722:	6852      	ldr	r2, [r2, #4]
 8012724:	2510      	movs	r5, #16
 8012726:	0011      	movs	r1, r2
 8012728:	43a9      	bics	r1, r5
 801272a:	468c      	mov	ip, r1
 801272c:	2902      	cmp	r1, #2
 801272e:	d100      	bne.n	8012732 <HAL_GPIO_Init+0x3e>
 8012730:	e07f      	b.n	8012832 <HAL_GPIO_Init+0x13e>
      temp = GPIOx->MODER;
 8012732:	6801      	ldr	r1, [r0, #0]
 8012734:	005d      	lsls	r5, r3, #1
 8012736:	468b      	mov	fp, r1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8012738:	2103      	movs	r1, #3
 801273a:	40a9      	lsls	r1, r5
 801273c:	4688      	mov	r8, r1
 801273e:	465e      	mov	r6, fp
 8012740:	4647      	mov	r7, r8
 8012742:	43be      	bics	r6, r7
 8012744:	46b3      	mov	fp, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8012746:	2603      	movs	r6, #3
 8012748:	4016      	ands	r6, r2
 801274a:	40ae      	lsls	r6, r5
 801274c:	46b0      	mov	r8, r6
 801274e:	465e      	mov	r6, fp
 8012750:	4647      	mov	r7, r8
 8012752:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8012754:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012756:	2601      	movs	r6, #1
 8012758:	4276      	negs	r6, r6
 801275a:	46b0      	mov	r8, r6
 801275c:	44c4      	add	ip, r8
 801275e:	4666      	mov	r6, ip
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8012760:	43c9      	mvns	r1, r1
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012762:	2e01      	cmp	r6, #1
 8012764:	d800      	bhi.n	8012768 <HAL_GPIO_Init+0x74>
 8012766:	e08d      	b.n	8012884 <HAL_GPIO_Init+0x190>
      temp = GPIOx->PUPDR;
 8012768:	68c6      	ldr	r6, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 801276a:	4031      	ands	r1, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 801276c:	4656      	mov	r6, sl
 801276e:	68b6      	ldr	r6, [r6, #8]
 8012770:	40ae      	lsls	r6, r5
 8012772:	4331      	orrs	r1, r6
      GPIOx->PUPDR = temp;
 8012774:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8012776:	2180      	movs	r1, #128	; 0x80
 8012778:	0549      	lsls	r1, r1, #21
 801277a:	420a      	tst	r2, r1
 801277c:	d04d      	beq.n	801281a <HAL_GPIO_Init+0x126>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801277e:	4649      	mov	r1, r9
 8012780:	2601      	movs	r6, #1
 8012782:	464d      	mov	r5, r9
 8012784:	6989      	ldr	r1, [r1, #24]
 8012786:	4331      	orrs	r1, r6
 8012788:	61a9      	str	r1, [r5, #24]
 801278a:	69a9      	ldr	r1, [r5, #24]
 801278c:	4d5e      	ldr	r5, [pc, #376]	; (8012908 <HAL_GPIO_Init+0x214>)
 801278e:	4031      	ands	r1, r6
 8012790:	46ac      	mov	ip, r5
 8012792:	9103      	str	r1, [sp, #12]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012794:	3602      	adds	r6, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012796:	9903      	ldr	r1, [sp, #12]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012798:	401e      	ands	r6, r3
        temp = SYSCFG->EXTICR[position >> 2];
 801279a:	0899      	lsrs	r1, r3, #2
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801279c:	00b6      	lsls	r6, r6, #2
 801279e:	0089      	lsls	r1, r1, #2
 80127a0:	4461      	add	r1, ip
 80127a2:	46b4      	mov	ip, r6
 80127a4:	260f      	movs	r6, #15
 80127a6:	4667      	mov	r7, ip
 80127a8:	40be      	lsls	r6, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80127aa:	688d      	ldr	r5, [r1, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80127ac:	43b5      	bics	r5, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80127ae:	2690      	movs	r6, #144	; 0x90
 80127b0:	05f6      	lsls	r6, r6, #23
 80127b2:	42b0      	cmp	r0, r6
 80127b4:	d015      	beq.n	80127e2 <HAL_GPIO_Init+0xee>
 80127b6:	4e55      	ldr	r6, [pc, #340]	; (801290c <HAL_GPIO_Init+0x218>)
 80127b8:	42b0      	cmp	r0, r6
 80127ba:	d100      	bne.n	80127be <HAL_GPIO_Init+0xca>
 80127bc:	e09d      	b.n	80128fa <HAL_GPIO_Init+0x206>
 80127be:	4e54      	ldr	r6, [pc, #336]	; (8012910 <HAL_GPIO_Init+0x21c>)
 80127c0:	46b0      	mov	r8, r6
 80127c2:	2602      	movs	r6, #2
 80127c4:	4540      	cmp	r0, r8
 80127c6:	d009      	beq.n	80127dc <HAL_GPIO_Init+0xe8>
 80127c8:	4e52      	ldr	r6, [pc, #328]	; (8012914 <HAL_GPIO_Init+0x220>)
 80127ca:	42b0      	cmp	r0, r6
 80127cc:	d100      	bne.n	80127d0 <HAL_GPIO_Init+0xdc>
 80127ce:	e090      	b.n	80128f2 <HAL_GPIO_Init+0x1fe>
 80127d0:	4e51      	ldr	r6, [pc, #324]	; (8012918 <HAL_GPIO_Init+0x224>)
 80127d2:	46b0      	mov	r8, r6
 80127d4:	2604      	movs	r6, #4
 80127d6:	4540      	cmp	r0, r8
 80127d8:	d000      	beq.n	80127dc <HAL_GPIO_Init+0xe8>
 80127da:	2605      	movs	r6, #5
 80127dc:	4667      	mov	r7, ip
 80127de:	40be      	lsls	r6, r7
 80127e0:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80127e2:	608d      	str	r5, [r1, #8]
        temp = EXTI->IMR;
 80127e4:	494d      	ldr	r1, [pc, #308]	; (801291c <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80127e6:	9d01      	ldr	r5, [sp, #4]
        temp = EXTI->IMR;
 80127e8:	6809      	ldr	r1, [r1, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80127ea:	43ed      	mvns	r5, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80127ec:	03d6      	lsls	r6, r2, #15
 80127ee:	d467      	bmi.n	80128c0 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80127f0:	4e4a      	ldr	r6, [pc, #296]	; (801291c <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80127f2:	4029      	ands	r1, r5
        EXTI->IMR = temp;
 80127f4:	6031      	str	r1, [r6, #0]

        temp = EXTI->EMR;
 80127f6:	6871      	ldr	r1, [r6, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80127f8:	0396      	lsls	r6, r2, #14
 80127fa:	d468      	bmi.n	80128ce <HAL_GPIO_Init+0x1da>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80127fc:	4e47      	ldr	r6, [pc, #284]	; (801291c <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80127fe:	4029      	ands	r1, r5
        EXTI->EMR = temp;
 8012800:	6071      	str	r1, [r6, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012802:	68b1      	ldr	r1, [r6, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012804:	02d6      	lsls	r6, r2, #11
 8012806:	d469      	bmi.n	80128dc <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8012808:	4e44      	ldr	r6, [pc, #272]	; (801291c <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801280a:	4029      	ands	r1, r5
        EXTI->RTSR = temp;
 801280c:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 801280e:	68f1      	ldr	r1, [r6, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012810:	0292      	lsls	r2, r2, #10
 8012812:	d46a      	bmi.n	80128ea <HAL_GPIO_Init+0x1f6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8012814:	4029      	ands	r1, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8012816:	4a41      	ldr	r2, [pc, #260]	; (801291c <HAL_GPIO_Init+0x228>)
 8012818:	60d1      	str	r1, [r2, #12]
  while ((GPIO_Init->Pin) >> position)
 801281a:	0022      	movs	r2, r4
      }
    }
    
    position++;
 801281c:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 801281e:	40da      	lsrs	r2, r3
 8012820:	d000      	beq.n	8012824 <HAL_GPIO_Init+0x130>
 8012822:	e776      	b.n	8012712 <HAL_GPIO_Init+0x1e>
  } 
}
 8012824:	b005      	add	sp, #20
 8012826:	bcf0      	pop	{r4, r5, r6, r7}
 8012828:	46bb      	mov	fp, r7
 801282a:	46b2      	mov	sl, r6
 801282c:	46a9      	mov	r9, r5
 801282e:	46a0      	mov	r8, r4
 8012830:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->AFR[position >> 3];
 8012832:	08d9      	lsrs	r1, r3, #3
 8012834:	0089      	lsls	r1, r1, #2
 8012836:	1841      	adds	r1, r0, r1
 8012838:	6a0d      	ldr	r5, [r1, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801283a:	260f      	movs	r6, #15
        temp = GPIOx->AFR[position >> 3];
 801283c:	46ac      	mov	ip, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801283e:	2507      	movs	r5, #7
 8012840:	401d      	ands	r5, r3
 8012842:	00ad      	lsls	r5, r5, #2
 8012844:	40ae      	lsls	r6, r5
 8012846:	46b0      	mov	r8, r6
 8012848:	4666      	mov	r6, ip
 801284a:	4647      	mov	r7, r8
 801284c:	43be      	bics	r6, r7
 801284e:	46b4      	mov	ip, r6
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8012850:	4656      	mov	r6, sl
 8012852:	6936      	ldr	r6, [r6, #16]
 8012854:	40ae      	lsls	r6, r5
 8012856:	0035      	movs	r5, r6
 8012858:	4666      	mov	r6, ip
 801285a:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3] = temp;
 801285c:	620d      	str	r5, [r1, #32]
      temp = GPIOx->MODER;
 801285e:	6801      	ldr	r1, [r0, #0]
 8012860:	005d      	lsls	r5, r3, #1
 8012862:	4688      	mov	r8, r1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8012864:	2103      	movs	r1, #3
 8012866:	40a9      	lsls	r1, r5
 8012868:	468b      	mov	fp, r1
 801286a:	4646      	mov	r6, r8
 801286c:	465f      	mov	r7, fp
 801286e:	43be      	bics	r6, r7
 8012870:	46b0      	mov	r8, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8012872:	2603      	movs	r6, #3
 8012874:	4016      	ands	r6, r2
 8012876:	40ae      	lsls	r6, r5
 8012878:	46b4      	mov	ip, r6
 801287a:	4646      	mov	r6, r8
 801287c:	4667      	mov	r7, ip
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801287e:	43c9      	mvns	r1, r1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8012880:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8012882:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8012884:	6886      	ldr	r6, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8012886:	400e      	ands	r6, r1
 8012888:	46b0      	mov	r8, r6
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 801288a:	4656      	mov	r6, sl
 801288c:	68f6      	ldr	r6, [r6, #12]
 801288e:	40ae      	lsls	r6, r5
 8012890:	46b4      	mov	ip, r6
 8012892:	4646      	mov	r6, r8
 8012894:	4667      	mov	r7, ip
 8012896:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8012898:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 801289a:	6846      	ldr	r6, [r0, #4]
 801289c:	46b4      	mov	ip, r6
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 801289e:	2601      	movs	r6, #1
 80128a0:	409e      	lsls	r6, r3
 80128a2:	46b0      	mov	r8, r6
 80128a4:	4666      	mov	r6, ip
 80128a6:	4647      	mov	r7, r8
 80128a8:	43be      	bics	r6, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80128aa:	2701      	movs	r7, #1
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80128ac:	46b0      	mov	r8, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80128ae:	0916      	lsrs	r6, r2, #4
 80128b0:	403e      	ands	r6, r7
 80128b2:	409e      	lsls	r6, r3
 80128b4:	46b4      	mov	ip, r6
 80128b6:	4646      	mov	r6, r8
 80128b8:	4667      	mov	r7, ip
 80128ba:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80128bc:	6046      	str	r6, [r0, #4]
 80128be:	e753      	b.n	8012768 <HAL_GPIO_Init+0x74>
          SET_BIT(temp, iocurrent); 
 80128c0:	9e01      	ldr	r6, [sp, #4]
 80128c2:	4331      	orrs	r1, r6
        EXTI->IMR = temp;
 80128c4:	4e15      	ldr	r6, [pc, #84]	; (801291c <HAL_GPIO_Init+0x228>)
 80128c6:	6031      	str	r1, [r6, #0]
        temp = EXTI->EMR;
 80128c8:	6871      	ldr	r1, [r6, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80128ca:	0396      	lsls	r6, r2, #14
 80128cc:	d596      	bpl.n	80127fc <HAL_GPIO_Init+0x108>
          SET_BIT(temp, iocurrent); 
 80128ce:	9e01      	ldr	r6, [sp, #4]
 80128d0:	4331      	orrs	r1, r6
        EXTI->EMR = temp;
 80128d2:	4e12      	ldr	r6, [pc, #72]	; (801291c <HAL_GPIO_Init+0x228>)
 80128d4:	6071      	str	r1, [r6, #4]
        temp = EXTI->RTSR;
 80128d6:	68b1      	ldr	r1, [r6, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80128d8:	02d6      	lsls	r6, r2, #11
 80128da:	d595      	bpl.n	8012808 <HAL_GPIO_Init+0x114>
          SET_BIT(temp, iocurrent); 
 80128dc:	9e01      	ldr	r6, [sp, #4]
 80128de:	4331      	orrs	r1, r6
        EXTI->RTSR = temp;
 80128e0:	4e0e      	ldr	r6, [pc, #56]	; (801291c <HAL_GPIO_Init+0x228>)
 80128e2:	60b1      	str	r1, [r6, #8]
        temp = EXTI->FTSR;
 80128e4:	68f1      	ldr	r1, [r6, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80128e6:	0292      	lsls	r2, r2, #10
 80128e8:	d594      	bpl.n	8012814 <HAL_GPIO_Init+0x120>
          SET_BIT(temp, iocurrent); 
 80128ea:	9a01      	ldr	r2, [sp, #4]
 80128ec:	430a      	orrs	r2, r1
 80128ee:	0011      	movs	r1, r2
 80128f0:	e791      	b.n	8012816 <HAL_GPIO_Init+0x122>
 80128f2:	2603      	movs	r6, #3
 80128f4:	40be      	lsls	r6, r7
 80128f6:	4335      	orrs	r5, r6
 80128f8:	e773      	b.n	80127e2 <HAL_GPIO_Init+0xee>
 80128fa:	2601      	movs	r6, #1
 80128fc:	40be      	lsls	r6, r7
 80128fe:	4335      	orrs	r5, r6
 8012900:	e76f      	b.n	80127e2 <HAL_GPIO_Init+0xee>
 8012902:	46c0      	nop			; (mov r8, r8)
 8012904:	40021000 	.word	0x40021000
 8012908:	40010000 	.word	0x40010000
 801290c:	48000400 	.word	0x48000400
 8012910:	48000800 	.word	0x48000800
 8012914:	48000c00 	.word	0x48000c00
 8012918:	48001000 	.word	0x48001000
 801291c:	40010400 	.word	0x40010400

08012920 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012922:	46de      	mov	lr, fp
 8012924:	4657      	mov	r7, sl
 8012926:	464e      	mov	r6, r9
 8012928:	4645      	mov	r5, r8
 801292a:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00;
 801292c:	2300      	movs	r3, #0
{
 801292e:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8012930:	2900      	cmp	r1, #0
 8012932:	d069      	beq.n	8012a08 <HAL_GPIO_DeInit+0xe8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8012934:	2201      	movs	r2, #1
 8012936:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8012938:	3202      	adds	r2, #2
 801293a:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801293c:	320c      	adds	r2, #12
 801293e:	4691      	mov	r9, r2
 8012940:	e025      	b.n	801298e <HAL_GPIO_DeInit+0x6e>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8012942:	4f3d      	ldr	r7, [pc, #244]	; (8012a38 <HAL_GPIO_DeInit+0x118>)
 8012944:	42b8      	cmp	r0, r7
 8012946:	d066      	beq.n	8012a16 <HAL_GPIO_DeInit+0xf6>
 8012948:	4f3c      	ldr	r7, [pc, #240]	; (8012a3c <HAL_GPIO_DeInit+0x11c>)
 801294a:	42b8      	cmp	r0, r7
 801294c:	d067      	beq.n	8012a1e <HAL_GPIO_DeInit+0xfe>
 801294e:	4f3c      	ldr	r7, [pc, #240]	; (8012a40 <HAL_GPIO_DeInit+0x120>)
 8012950:	42b8      	cmp	r0, r7
 8012952:	d068      	beq.n	8012a26 <HAL_GPIO_DeInit+0x106>
 8012954:	4f3b      	ldr	r7, [pc, #236]	; (8012a44 <HAL_GPIO_DeInit+0x124>)
 8012956:	42b8      	cmp	r0, r7
 8012958:	d069      	beq.n	8012a2e <HAL_GPIO_DeInit+0x10e>
 801295a:	2705      	movs	r7, #5
 801295c:	40a7      	lsls	r7, r4
 801295e:	003c      	movs	r4, r7
 8012960:	42a6      	cmp	r6, r4
 8012962:	d110      	bne.n	8012986 <HAL_GPIO_DeInit+0x66>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8012964:	4656      	mov	r6, sl
 8012966:	6894      	ldr	r4, [r2, #8]
 8012968:	43b4      	bics	r4, r6
 801296a:	6094      	str	r4, [r2, #8]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 801296c:	4c36      	ldr	r4, [pc, #216]	; (8012a48 <HAL_GPIO_DeInit+0x128>)
 801296e:	6822      	ldr	r2, [r4, #0]
 8012970:	43aa      	bics	r2, r5
 8012972:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8012974:	6862      	ldr	r2, [r4, #4]
 8012976:	43aa      	bics	r2, r5
 8012978:	6062      	str	r2, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 801297a:	68a2      	ldr	r2, [r4, #8]
 801297c:	43aa      	bics	r2, r5
 801297e:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8012980:	68e2      	ldr	r2, [r4, #12]
 8012982:	43aa      	bics	r2, r5
 8012984:	60e2      	str	r2, [r4, #12]
  while (GPIO_Pin >> position)
 8012986:	000a      	movs	r2, r1
      }
    }
    
    position++;
 8012988:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 801298a:	40da      	lsrs	r2, r3
 801298c:	d03c      	beq.n	8012a08 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1 << position);
 801298e:	4662      	mov	r2, ip
 8012990:	000d      	movs	r5, r1
 8012992:	409a      	lsls	r2, r3
 8012994:	4015      	ands	r5, r2
    if (iocurrent)
 8012996:	4211      	tst	r1, r2
 8012998:	d0f5      	beq.n	8012986 <HAL_GPIO_DeInit+0x66>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 801299a:	4647      	mov	r7, r8
 801299c:	005e      	lsls	r6, r3, #1
 801299e:	40b7      	lsls	r7, r6
 80129a0:	6804      	ldr	r4, [r0, #0]
 80129a2:	003e      	movs	r6, r7
 80129a4:	43bc      	bics	r4, r7
 80129a6:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80129a8:	08dc      	lsrs	r4, r3, #3
 80129aa:	00a4      	lsls	r4, r4, #2
 80129ac:	1907      	adds	r7, r0, r4
 80129ae:	9701      	str	r7, [sp, #4]
 80129b0:	6a3f      	ldr	r7, [r7, #32]
 80129b2:	46ba      	mov	sl, r7
 80129b4:	2707      	movs	r7, #7
 80129b6:	401f      	ands	r7, r3
 80129b8:	00bf      	lsls	r7, r7, #2
 80129ba:	46bb      	mov	fp, r7
 80129bc:	464f      	mov	r7, r9
 80129be:	465c      	mov	r4, fp
 80129c0:	40a7      	lsls	r7, r4
 80129c2:	46bb      	mov	fp, r7
 80129c4:	4657      	mov	r7, sl
 80129c6:	465c      	mov	r4, fp
 80129c8:	43a7      	bics	r7, r4
 80129ca:	003c      	movs	r4, r7
 80129cc:	9f01      	ldr	r7, [sp, #4]
 80129ce:	623c      	str	r4, [r7, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80129d0:	6884      	ldr	r4, [r0, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80129d2:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80129d4:	43b4      	bics	r4, r6
 80129d6:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80129d8:	6844      	ldr	r4, [r0, #4]
 80129da:	4394      	bics	r4, r2
 80129dc:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80129de:	4c1b      	ldr	r4, [pc, #108]	; (8012a4c <HAL_GPIO_DeInit+0x12c>)
 80129e0:	68c2      	ldr	r2, [r0, #12]
 80129e2:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80129e4:	4644      	mov	r4, r8
 80129e6:	401c      	ands	r4, r3
 80129e8:	00a4      	lsls	r4, r4, #2
 80129ea:	40a7      	lsls	r7, r4
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80129ec:	43b2      	bics	r2, r6
 80129ee:	60c2      	str	r2, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 80129f0:	089a      	lsrs	r2, r3, #2
 80129f2:	0092      	lsls	r2, r2, #2
 80129f4:	4452      	add	r2, sl
 80129f6:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80129f8:	46ba      	mov	sl, r7
 80129fa:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80129fc:	2790      	movs	r7, #144	; 0x90
 80129fe:	05ff      	lsls	r7, r7, #23
 8012a00:	42b8      	cmp	r0, r7
 8012a02:	d19e      	bne.n	8012942 <HAL_GPIO_DeInit+0x22>
 8012a04:	2400      	movs	r4, #0
 8012a06:	e7ab      	b.n	8012960 <HAL_GPIO_DeInit+0x40>
  }
}
 8012a08:	b003      	add	sp, #12
 8012a0a:	bcf0      	pop	{r4, r5, r6, r7}
 8012a0c:	46bb      	mov	fp, r7
 8012a0e:	46b2      	mov	sl, r6
 8012a10:	46a9      	mov	r9, r5
 8012a12:	46a0      	mov	r8, r4
 8012a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a16:	4667      	mov	r7, ip
 8012a18:	40a7      	lsls	r7, r4
 8012a1a:	003c      	movs	r4, r7
 8012a1c:	e7a0      	b.n	8012960 <HAL_GPIO_DeInit+0x40>
 8012a1e:	2702      	movs	r7, #2
 8012a20:	40a7      	lsls	r7, r4
 8012a22:	003c      	movs	r4, r7
 8012a24:	e79c      	b.n	8012960 <HAL_GPIO_DeInit+0x40>
 8012a26:	4647      	mov	r7, r8
 8012a28:	40a7      	lsls	r7, r4
 8012a2a:	003c      	movs	r4, r7
 8012a2c:	e798      	b.n	8012960 <HAL_GPIO_DeInit+0x40>
 8012a2e:	2704      	movs	r7, #4
 8012a30:	40a7      	lsls	r7, r4
 8012a32:	003c      	movs	r4, r7
 8012a34:	e794      	b.n	8012960 <HAL_GPIO_DeInit+0x40>
 8012a36:	46c0      	nop			; (mov r8, r8)
 8012a38:	48000400 	.word	0x48000400
 8012a3c:	48000800 	.word	0x48000800
 8012a40:	48000c00 	.word	0x48000c00
 8012a44:	48001000 	.word	0x48001000
 8012a48:	40010400 	.word	0x40010400
 8012a4c:	40010000 	.word	0x40010000

08012a50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012a50:	6900      	ldr	r0, [r0, #16]
 8012a52:	4008      	ands	r0, r1
 8012a54:	1e41      	subs	r1, r0, #1
 8012a56:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8012a58:	b2c0      	uxtb	r0, r0
  }
 8012a5a:	4770      	bx	lr

08012a5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012a5c:	2a00      	cmp	r2, #0
 8012a5e:	d001      	beq.n	8012a64 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012a60:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8012a62:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8012a64:	6281      	str	r1, [r0, #40]	; 0x28
}
 8012a66:	e7fc      	b.n	8012a62 <HAL_GPIO_WritePin+0x6>

08012a68 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8012a68:	6943      	ldr	r3, [r0, #20]
 8012a6a:	4059      	eors	r1, r3
 8012a6c:	6141      	str	r1, [r0, #20]
}
 8012a6e:	4770      	bx	lr

08012a70 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
 8012a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a72:	0006      	movs	r6, r0
 8012a74:	000c      	movs	r4, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8012a76:	f7fe fb65 	bl	8011144 <HAL_GetTick>

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012a7a:	6832      	ldr	r2, [r6, #0]
  tickstart = HAL_GetTick();
 8012a7c:	0007      	movs	r7, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012a7e:	6993      	ldr	r3, [r2, #24]
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;      
 8012a80:	2000      	movs	r0, #0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012a82:	06db      	lsls	r3, r3, #27
 8012a84:	d520      	bpl.n	8012ac8 <I2C_IsAcknowledgeFailed+0x58>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8012a86:	2335      	movs	r3, #53	; 0x35
 8012a88:	5cf1      	ldrb	r1, [r6, r3]
 8012a8a:	2912      	cmp	r1, #18
 8012a8c:	d01d      	beq.n	8012aca <I2C_IsAcknowledgeFailed+0x5a>
 8012a8e:	5cf1      	ldrb	r1, [r6, r3]
 8012a90:	2952      	cmp	r1, #82	; 0x52
 8012a92:	d01a      	beq.n	8012aca <I2C_IsAcknowledgeFailed+0x5a>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8012a94:	5cf3      	ldrb	r3, [r6, r3]
 8012a96:	2b62      	cmp	r3, #98	; 0x62
 8012a98:	d017      	beq.n	8012aca <I2C_IsAcknowledgeFailed+0x5a>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012a9a:	2520      	movs	r5, #32
 8012a9c:	e001      	b.n	8012aa2 <I2C_IsAcknowledgeFailed+0x32>
      if(Timeout != HAL_MAX_DELAY)
 8012a9e:	1c63      	adds	r3, r4, #1
 8012aa0:	d11c      	bne.n	8012adc <I2C_IsAcknowledgeFailed+0x6c>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012aa2:	6993      	ldr	r3, [r2, #24]
 8012aa4:	421d      	tst	r5, r3
 8012aa6:	d0fa      	beq.n	8012a9e <I2C_IsAcknowledgeFailed+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012aa8:	2310      	movs	r3, #16
 8012aaa:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012aac:	61d5      	str	r5, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8012aae:	6853      	ldr	r3, [r2, #4]
 8012ab0:	4913      	ldr	r1, [pc, #76]	; (8012b00 <I2C_IsAcknowledgeFailed+0x90>)
    return HAL_ERROR;
 8012ab2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8012ab4:	400b      	ands	r3, r1
 8012ab6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8012ab8:	2304      	movs	r3, #4
    hi2c->State= HAL_I2C_STATE_READY;
 8012aba:	2201      	movs	r2, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8012abc:	63b3      	str	r3, [r6, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 8012abe:	3331      	adds	r3, #49	; 0x31
 8012ac0:	54f2      	strb	r2, [r6, r3]
    __HAL_UNLOCK(hi2c);
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	3b01      	subs	r3, #1
 8012ac6:	54f2      	strb	r2, [r6, r3]
}
 8012ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8012aca:	6853      	ldr	r3, [r2, #4]
 8012acc:	019b      	lsls	r3, r3, #6
 8012ace:	d4e4      	bmi.n	8012a9a <I2C_IsAcknowledgeFailed+0x2a>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012ad0:	2380      	movs	r3, #128	; 0x80
 8012ad2:	6851      	ldr	r1, [r2, #4]
 8012ad4:	01db      	lsls	r3, r3, #7
 8012ad6:	430b      	orrs	r3, r1
 8012ad8:	6053      	str	r3, [r2, #4]
 8012ada:	e7de      	b.n	8012a9a <I2C_IsAcknowledgeFailed+0x2a>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8012adc:	2c00      	cmp	r4, #0
 8012ade:	d006      	beq.n	8012aee <I2C_IsAcknowledgeFailed+0x7e>
 8012ae0:	f7fe fb30 	bl	8011144 <HAL_GetTick>
 8012ae4:	1bc0      	subs	r0, r0, r7
 8012ae6:	42a0      	cmp	r0, r4
 8012ae8:	d801      	bhi.n	8012aee <I2C_IsAcknowledgeFailed+0x7e>
 8012aea:	6832      	ldr	r2, [r6, #0]
 8012aec:	e7d9      	b.n	8012aa2 <I2C_IsAcknowledgeFailed+0x32>
          hi2c->State= HAL_I2C_STATE_READY;
 8012aee:	2335      	movs	r3, #53	; 0x35
 8012af0:	2201      	movs	r2, #1
 8012af2:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8012af4:	2200      	movs	r2, #0
 8012af6:	3b01      	subs	r3, #1
          return HAL_TIMEOUT;
 8012af8:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 8012afa:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012afc:	e7e4      	b.n	8012ac8 <I2C_IsAcknowledgeFailed+0x58>
 8012afe:	46c0      	nop			; (mov r8, r8)
 8012b00:	fe00e800 	.word	0xfe00e800

08012b04 <I2C_WaitOnFlagUntilTimeout>:
{  
 8012b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b06:	46c6      	mov	lr, r8
 8012b08:	4690      	mov	r8, r2
 8012b0a:	b500      	push	{lr}
 8012b0c:	001c      	movs	r4, r3
 8012b0e:	0006      	movs	r6, r0
 8012b10:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8012b12:	f7fe fb17 	bl	8011144 <HAL_GetTick>
  if(Status == RESET)
 8012b16:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8012b18:	0007      	movs	r7, r0
  if(Status == RESET)
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d112      	bne.n	8012b44 <I2C_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012b1e:	6832      	ldr	r2, [r6, #0]
 8012b20:	e001      	b.n	8012b26 <I2C_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 8012b22:	1c63      	adds	r3, r4, #1
 8012b24:	d117      	bne.n	8012b56 <I2C_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012b26:	0029      	movs	r1, r5
 8012b28:	6993      	ldr	r3, [r2, #24]
 8012b2a:	4399      	bics	r1, r3
 8012b2c:	d1f9      	bne.n	8012b22 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;      
 8012b2e:	2000      	movs	r0, #0
}
 8012b30:	bc80      	pop	{r7}
 8012b32:	46b8      	mov	r8, r7
 8012b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8012b36:	2c00      	cmp	r4, #0
 8012b38:	d014      	beq.n	8012b64 <I2C_WaitOnFlagUntilTimeout+0x60>
 8012b3a:	f7fe fb03 	bl	8011144 <HAL_GetTick>
 8012b3e:	1bc0      	subs	r0, r0, r7
 8012b40:	42a0      	cmp	r0, r4
 8012b42:	d80f      	bhi.n	8012b64 <I2C_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8012b44:	6832      	ldr	r2, [r6, #0]
 8012b46:	e001      	b.n	8012b4c <I2C_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8012b48:	1c63      	adds	r3, r4, #1
 8012b4a:	d1f4      	bne.n	8012b36 <I2C_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8012b4c:	0029      	movs	r1, r5
 8012b4e:	6993      	ldr	r3, [r2, #24]
 8012b50:	4399      	bics	r1, r3
 8012b52:	d0f9      	beq.n	8012b48 <I2C_WaitOnFlagUntilTimeout+0x44>
 8012b54:	e7eb      	b.n	8012b2e <I2C_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8012b56:	2c00      	cmp	r4, #0
 8012b58:	d004      	beq.n	8012b64 <I2C_WaitOnFlagUntilTimeout+0x60>
 8012b5a:	f7fe faf3 	bl	8011144 <HAL_GetTick>
 8012b5e:	1bc0      	subs	r0, r0, r7
 8012b60:	42a0      	cmp	r0, r4
 8012b62:	d9dc      	bls.n	8012b1e <I2C_WaitOnFlagUntilTimeout+0x1a>
          hi2c->State= HAL_I2C_STATE_READY;
 8012b64:	2335      	movs	r3, #53	; 0x35
 8012b66:	2201      	movs	r2, #1
 8012b68:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	3b01      	subs	r3, #1
          return HAL_TIMEOUT;
 8012b6e:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 8012b70:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012b72:	e7dd      	b.n	8012b30 <I2C_WaitOnFlagUntilTimeout+0x2c>

08012b74 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 8012b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b76:	0005      	movs	r5, r0
 8012b78:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 8012b7a:	f7fe fae3 	bl	8011144 <HAL_GetTick>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012b7e:	2720      	movs	r7, #32
  tickstart = HAL_GetTick();
 8012b80:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012b82:	e00c      	b.n	8012b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8012b84:	0021      	movs	r1, r4
 8012b86:	0028      	movs	r0, r5
 8012b88:	f7ff ff72 	bl	8012a70 <I2C_IsAcknowledgeFailed>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	d118      	bne.n	8012bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8012b90:	2c00      	cmp	r4, #0
 8012b92:	d00a      	beq.n	8012baa <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
 8012b94:	f7fe fad6 	bl	8011144 <HAL_GetTick>
 8012b98:	1b80      	subs	r0, r0, r6
 8012b9a:	42a0      	cmp	r0, r4
 8012b9c:	d805      	bhi.n	8012baa <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012b9e:	682b      	ldr	r3, [r5, #0]
 8012ba0:	699b      	ldr	r3, [r3, #24]
 8012ba2:	421f      	tst	r7, r3
 8012ba4:	d0ee      	beq.n	8012b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x10>
  return HAL_OK;
 8012ba6:	2000      	movs	r0, #0
}
 8012ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012baa:	2220      	movs	r2, #32
 8012bac:	6bab      	ldr	r3, [r5, #56]	; 0x38
        __HAL_UNLOCK(hi2c);
 8012bae:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012bb0:	4313      	orrs	r3, r2
 8012bb2:	63ab      	str	r3, [r5, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 8012bb4:	2335      	movs	r3, #53	; 0x35
 8012bb6:	3a1f      	subs	r2, #31
 8012bb8:	54ea      	strb	r2, [r5, r3]
        __HAL_UNLOCK(hi2c);
 8012bba:	2200      	movs	r2, #0
 8012bbc:	3b01      	subs	r3, #1
 8012bbe:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 8012bc0:	e7f2      	b.n	8012ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
      return HAL_ERROR;
 8012bc2:	2001      	movs	r0, #1
 8012bc4:	e7f0      	b.n	8012ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8012bc6:	46c0      	nop			; (mov r8, r8)

08012bc8 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 8012bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bca:	0004      	movs	r4, r0
 8012bcc:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8012bce:	f7fe fab9 	bl	8011144 <HAL_GetTick>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012bd2:	2602      	movs	r6, #2
  uint32_t tickstart = HAL_GetTick();
 8012bd4:	0007      	movs	r7, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012bd6:	e007      	b.n	8012be8 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8012bd8:	0029      	movs	r1, r5
 8012bda:	0020      	movs	r0, r4
 8012bdc:	f7ff ff48 	bl	8012a70 <I2C_IsAcknowledgeFailed>
 8012be0:	2800      	cmp	r0, #0
 8012be2:	d107      	bne.n	8012bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
    if(Timeout != HAL_MAX_DELAY)
 8012be4:	1c6b      	adds	r3, r5, #1
 8012be6:	d107      	bne.n	8012bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	699b      	ldr	r3, [r3, #24]
 8012bec:	421e      	tst	r6, r3
 8012bee:	d0f3      	beq.n	8012bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
  return HAL_OK;      
 8012bf0:	2000      	movs	r0, #0
}
 8012bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8012bf4:	2001      	movs	r0, #1
 8012bf6:	e7fc      	b.n	8012bf2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8012bf8:	2d00      	cmp	r5, #0
 8012bfa:	d004      	beq.n	8012c06 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012bfc:	f7fe faa2 	bl	8011144 <HAL_GetTick>
 8012c00:	1bc0      	subs	r0, r0, r7
 8012c02:	42a8      	cmp	r0, r5
 8012c04:	d9f0      	bls.n	8012be8 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012c06:	2220      	movs	r2, #32
 8012c08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hi2c);
 8012c0a:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012c0c:	4313      	orrs	r3, r2
 8012c0e:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 8012c10:	2335      	movs	r3, #53	; 0x35
 8012c12:	3a1f      	subs	r2, #31
 8012c14:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8012c16:	2200      	movs	r2, #0
 8012c18:	3b01      	subs	r3, #1
 8012c1a:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8012c1c:	e7e9      	b.n	8012bf2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
 8012c1e:	46c0      	nop			; (mov r8, r8)

08012c20 <I2C_RequestMemoryWrite>:
{
 8012c20:	b570      	push	{r4, r5, r6, lr}
 8012c22:	001d      	movs	r5, r3
 8012c24:	0004      	movs	r4, r0
 8012c26:	0016      	movs	r6, r2
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012c28:	0589      	lsls	r1, r1, #22
  tmpreg = hi2c->Instance->CR2;
 8012c2a:	6802      	ldr	r2, [r0, #0]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012c2c:	b2e8      	uxtb	r0, r5
 8012c2e:	0400      	lsls	r0, r0, #16
 8012c30:	0d89      	lsrs	r1, r1, #22
  tmpreg = hi2c->Instance->CR2;
 8012c32:	6853      	ldr	r3, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012c34:	4301      	orrs	r1, r0
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012c36:	4815      	ldr	r0, [pc, #84]	; (8012c8c <I2C_RequestMemoryWrite+0x6c>)
 8012c38:	4003      	ands	r3, r0
 8012c3a:	4319      	orrs	r1, r3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012c3c:	4b14      	ldr	r3, [pc, #80]	; (8012c90 <I2C_RequestMemoryWrite+0x70>)
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8012c3e:	0020      	movs	r0, r4
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012c40:	4319      	orrs	r1, r3
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8012c42:	6051      	str	r1, [r2, #4]
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8012c44:	9904      	ldr	r1, [sp, #16]
 8012c46:	f7ff ffbf 	bl	8012bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	d115      	bne.n	8012c7a <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);    
 8012c4e:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012c50:	2d01      	cmp	r5, #1
 8012c52:	d10a      	bne.n	8012c6a <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8012c54:	b2f6      	uxtb	r6, r6
 8012c56:	629e      	str	r6, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8012c58:	2200      	movs	r2, #0
 8012c5a:	2180      	movs	r1, #128	; 0x80
 8012c5c:	0020      	movs	r0, r4
 8012c5e:	9b04      	ldr	r3, [sp, #16]
 8012c60:	f7ff ff50 	bl	8012b04 <I2C_WaitOnFlagUntilTimeout>
 8012c64:	2800      	cmp	r0, #0
 8012c66:	d10c      	bne.n	8012c82 <I2C_RequestMemoryWrite+0x62>
}
 8012c68:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8012c6a:	0a32      	lsrs	r2, r6, #8
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8012c6c:	0020      	movs	r0, r4
 8012c6e:	9904      	ldr	r1, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8012c70:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8012c72:	f7ff ffa9 	bl	8012bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8012c76:	2800      	cmp	r0, #0
 8012c78:	d005      	beq.n	8012c86 <I2C_RequestMemoryWrite+0x66>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012c7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8012c7c:	2001      	movs	r0, #1
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012c7e:	2b04      	cmp	r3, #4
 8012c80:	d0f2      	beq.n	8012c68 <I2C_RequestMemoryWrite+0x48>
      return HAL_TIMEOUT;
 8012c82:	2003      	movs	r0, #3
 8012c84:	e7f0      	b.n	8012c68 <I2C_RequestMemoryWrite+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8012c86:	6823      	ldr	r3, [r4, #0]
 8012c88:	e7e4      	b.n	8012c54 <I2C_RequestMemoryWrite+0x34>
 8012c8a:	46c0      	nop			; (mov r8, r8)
 8012c8c:	fc009800 	.word	0xfc009800
 8012c90:	01002000 	.word	0x01002000

08012c94 <I2C_RequestMemoryRead>:
{
 8012c94:	b570      	push	{r4, r5, r6, lr}
 8012c96:	001d      	movs	r5, r3
 8012c98:	0004      	movs	r4, r0
 8012c9a:	0016      	movs	r6, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012c9c:	0589      	lsls	r1, r1, #22
  tmpreg = hi2c->Instance->CR2;
 8012c9e:	6802      	ldr	r2, [r0, #0]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012ca0:	b2e8      	uxtb	r0, r5
 8012ca2:	0400      	lsls	r0, r0, #16
 8012ca4:	0d89      	lsrs	r1, r1, #22
  tmpreg = hi2c->Instance->CR2;
 8012ca6:	6853      	ldr	r3, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012ca8:	4301      	orrs	r1, r0
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012caa:	4815      	ldr	r0, [pc, #84]	; (8012d00 <I2C_RequestMemoryRead+0x6c>)
 8012cac:	4003      	ands	r3, r0
 8012cae:	4319      	orrs	r1, r3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012cb0:	2380      	movs	r3, #128	; 0x80
 8012cb2:	019b      	lsls	r3, r3, #6
 8012cb4:	4319      	orrs	r1, r3
  hi2c->Instance->CR2 = tmpreg;  
 8012cb6:	6051      	str	r1, [r2, #4]
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8012cb8:	0020      	movs	r0, r4
 8012cba:	9904      	ldr	r1, [sp, #16]
 8012cbc:	f7ff ff84 	bl	8012bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	d115      	bne.n	8012cf0 <I2C_RequestMemoryRead+0x5c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);    
 8012cc4:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012cc6:	2d01      	cmp	r5, #1
 8012cc8:	d10a      	bne.n	8012ce0 <I2C_RequestMemoryRead+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8012cca:	b2f6      	uxtb	r6, r6
 8012ccc:	629e      	str	r6, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8012cce:	2200      	movs	r2, #0
 8012cd0:	2140      	movs	r1, #64	; 0x40
 8012cd2:	0020      	movs	r0, r4
 8012cd4:	9b04      	ldr	r3, [sp, #16]
 8012cd6:	f7ff ff15 	bl	8012b04 <I2C_WaitOnFlagUntilTimeout>
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	d10c      	bne.n	8012cf8 <I2C_RequestMemoryRead+0x64>
}
 8012cde:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8012ce0:	0a32      	lsrs	r2, r6, #8
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8012ce2:	0020      	movs	r0, r4
 8012ce4:	9904      	ldr	r1, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8012ce6:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8012ce8:	f7ff ff6e 	bl	8012bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8012cec:	2800      	cmp	r0, #0
 8012cee:	d005      	beq.n	8012cfc <I2C_RequestMemoryRead+0x68>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012cf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8012cf2:	2001      	movs	r0, #1
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012cf4:	2b04      	cmp	r3, #4
 8012cf6:	d0f2      	beq.n	8012cde <I2C_RequestMemoryRead+0x4a>
      return HAL_TIMEOUT;
 8012cf8:	2003      	movs	r0, #3
 8012cfa:	e7f0      	b.n	8012cde <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8012cfc:	6823      	ldr	r3, [r4, #0]
 8012cfe:	e7e4      	b.n	8012cca <I2C_RequestMemoryRead+0x36>
 8012d00:	fc009800 	.word	0xfc009800

08012d04 <HAL_I2C_MspInit>:
}
 8012d04:	4770      	bx	lr
 8012d06:	46c0      	nop			; (mov r8, r8)

08012d08 <HAL_I2C_Init>:
{ 
 8012d08:	b510      	push	{r4, lr}
 8012d0a:	1e04      	subs	r4, r0, #0
  if(hi2c == NULL)
 8012d0c:	d042      	beq.n	8012d94 <HAL_I2C_Init+0x8c>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8012d0e:	2335      	movs	r3, #53	; 0x35
 8012d10:	5cc3      	ldrb	r3, [r0, r3]
 8012d12:	b2da      	uxtb	r2, r3
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d038      	beq.n	8012d8a <HAL_I2C_Init+0x82>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8012d18:	2335      	movs	r3, #53	; 0x35
 8012d1a:	2202      	movs	r2, #2
  __HAL_I2C_DISABLE(hi2c);
 8012d1c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8012d1e:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8012d20:	6823      	ldr	r3, [r4, #0]
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	438a      	bics	r2, r1
 8012d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8012d28:	6861      	ldr	r1, [r4, #4]
 8012d2a:	4a1e      	ldr	r2, [pc, #120]	; (8012da4 <HAL_I2C_Init+0x9c>)
 8012d2c:	400a      	ands	r2, r1
 8012d2e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8012d30:	689a      	ldr	r2, [r3, #8]
 8012d32:	491d      	ldr	r1, [pc, #116]	; (8012da8 <HAL_I2C_Init+0xa0>)
 8012d34:	400a      	ands	r2, r1
 8012d36:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8012d38:	68a2      	ldr	r2, [r4, #8]
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012d3a:	68e1      	ldr	r1, [r4, #12]
  if(hi2c->Init.OwnAddress1 != 0)
 8012d3c:	2a00      	cmp	r2, #0
 8012d3e:	d005      	beq.n	8012d4c <HAL_I2C_Init+0x44>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012d40:	2901      	cmp	r1, #1
 8012d42:	d029      	beq.n	8012d98 <HAL_I2C_Init+0x90>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8012d44:	2084      	movs	r0, #132	; 0x84
 8012d46:	0200      	lsls	r0, r0, #8
 8012d48:	4302      	orrs	r2, r0
 8012d4a:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012d4c:	2902      	cmp	r1, #2
 8012d4e:	d018      	beq.n	8012d82 <HAL_I2C_Init+0x7a>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012d50:	6859      	ldr	r1, [r3, #4]
 8012d52:	4a16      	ldr	r2, [pc, #88]	; (8012dac <HAL_I2C_Init+0xa4>)
  return HAL_OK;
 8012d54:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012d56:	430a      	orrs	r2, r1
 8012d58:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8012d5a:	6961      	ldr	r1, [r4, #20]
 8012d5c:	6922      	ldr	r2, [r4, #16]
 8012d5e:	430a      	orrs	r2, r1
 8012d60:	69a1      	ldr	r1, [r4, #24]
 8012d62:	0209      	lsls	r1, r1, #8
 8012d64:	430a      	orrs	r2, r1
 8012d66:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012d68:	6a21      	ldr	r1, [r4, #32]
 8012d6a:	69e2      	ldr	r2, [r4, #28]
 8012d6c:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8012d6e:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012d70:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8012d72:	681a      	ldr	r2, [r3, #0]
 8012d74:	430a      	orrs	r2, r1
 8012d76:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8012d7c:	3335      	adds	r3, #53	; 0x35
 8012d7e:	54e1      	strb	r1, [r4, r3]
}
 8012d80:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8012d82:	2280      	movs	r2, #128	; 0x80
 8012d84:	0112      	lsls	r2, r2, #4
 8012d86:	605a      	str	r2, [r3, #4]
 8012d88:	e7e2      	b.n	8012d50 <HAL_I2C_Init+0x48>
    hi2c->Lock = HAL_UNLOCKED;
 8012d8a:	3334      	adds	r3, #52	; 0x34
 8012d8c:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8012d8e:	f7ff ffb9 	bl	8012d04 <HAL_I2C_MspInit>
 8012d92:	e7c1      	b.n	8012d18 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8012d94:	2001      	movs	r0, #1
 8012d96:	e7f3      	b.n	8012d80 <HAL_I2C_Init+0x78>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012d98:	2180      	movs	r1, #128	; 0x80
 8012d9a:	0209      	lsls	r1, r1, #8
 8012d9c:	430a      	orrs	r2, r1
 8012d9e:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012da0:	e7d6      	b.n	8012d50 <HAL_I2C_Init+0x48>
 8012da2:	46c0      	nop			; (mov r8, r8)
 8012da4:	f0ffffff 	.word	0xf0ffffff
 8012da8:	ffff7fff 	.word	0xffff7fff
 8012dac:	02008000 	.word	0x02008000

08012db0 <HAL_I2C_Mem_Write>:
{
 8012db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012db2:	464f      	mov	r7, r9
 8012db4:	4646      	mov	r6, r8
 8012db6:	46d6      	mov	lr, sl
 8012db8:	b5c0      	push	{r6, r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	0005      	movs	r5, r0
 8012dbe:	a80a      	add	r0, sp, #40	; 0x28
 8012dc0:	c880      	ldmia	r0!, {r7}
 8012dc2:	4688      	mov	r8, r1
 8012dc4:	8804      	ldrh	r4, [r0, #0]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012dc6:	2035      	movs	r0, #53	; 0x35
 8012dc8:	5c29      	ldrb	r1, [r5, r0]
{
 8012dca:	469c      	mov	ip, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012dcc:	b2ce      	uxtb	r6, r1
 8012dce:	46b1      	mov	r9, r6
 8012dd0:	2901      	cmp	r1, #1
 8012dd2:	d153      	bne.n	8012e7c <HAL_I2C_Mem_Write+0xcc>
    if((pData == NULL) || (Size == 0)) 
 8012dd4:	2f00      	cmp	r7, #0
 8012dd6:	d04a      	beq.n	8012e6e <HAL_I2C_Mem_Write+0xbe>
 8012dd8:	2c00      	cmp	r4, #0
 8012dda:	d048      	beq.n	8012e6e <HAL_I2C_Mem_Write+0xbe>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012ddc:	6829      	ldr	r1, [r5, #0]
 8012dde:	698e      	ldr	r6, [r1, #24]
 8012de0:	2180      	movs	r1, #128	; 0x80
 8012de2:	0033      	movs	r3, r6
 8012de4:	0209      	lsls	r1, r1, #8
 8012de6:	400b      	ands	r3, r1
 8012de8:	469a      	mov	sl, r3
 8012dea:	420e      	tst	r6, r1
 8012dec:	d146      	bne.n	8012e7c <HAL_I2C_Mem_Write+0xcc>
    __HAL_LOCK(hi2c);
 8012dee:	2634      	movs	r6, #52	; 0x34
 8012df0:	5da9      	ldrb	r1, [r5, r6]
 8012df2:	2901      	cmp	r1, #1
 8012df4:	d042      	beq.n	8012e7c <HAL_I2C_Mem_Write+0xcc>
 8012df6:	464b      	mov	r3, r9
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8012df8:	2152      	movs	r1, #82	; 0x52
    __HAL_LOCK(hi2c);
 8012dfa:	55ab      	strb	r3, [r5, r6]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012dfc:	4653      	mov	r3, sl
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8012dfe:	5429      	strb	r1, [r5, r0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012e00:	63ab      	str	r3, [r5, #56]	; 0x38
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8012e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e04:	4641      	mov	r1, r8
 8012e06:	9300      	str	r3, [sp, #0]
 8012e08:	0028      	movs	r0, r5
 8012e0a:	4663      	mov	r3, ip
 8012e0c:	f7ff ff08 	bl	8012c20 <I2C_RequestMemoryWrite>
 8012e10:	2800      	cmp	r0, #0
 8012e12:	d136      	bne.n	8012e82 <HAL_I2C_Mem_Write+0xd2>
    if(Size > 255)
 8012e14:	2cff      	cmp	r4, #255	; 0xff
 8012e16:	d968      	bls.n	8012eea <HAL_I2C_Mem_Write+0x13a>
  tmpreg = hi2c->Instance->CR2;
 8012e18:	6828      	ldr	r0, [r5, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012e1a:	4a43      	ldr	r2, [pc, #268]	; (8012f28 <HAL_I2C_Mem_Write+0x178>)
  tmpreg = hi2c->Instance->CR2;
 8012e1c:	6843      	ldr	r3, [r0, #4]
      Sizetmp = 255;
 8012e1e:	26ff      	movs	r6, #255	; 0xff
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012e20:	4013      	ands	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012e22:	4642      	mov	r2, r8
 8012e24:	0591      	lsls	r1, r2, #22
 8012e26:	0d8a      	lsrs	r2, r1, #22
 8012e28:	4313      	orrs	r3, r2
 8012e2a:	4a40      	ldr	r2, [pc, #256]	; (8012f2c <HAL_I2C_Mem_Write+0x17c>)
 8012e2c:	4313      	orrs	r3, r2
  hi2c->Instance->CR2 = tmpreg;  
 8012e2e:	6043      	str	r3, [r0, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012e30:	4b3d      	ldr	r3, [pc, #244]	; (8012f28 <HAL_I2C_Mem_Write+0x178>)
 8012e32:	469a      	mov	sl, r3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012e34:	0d8b      	lsrs	r3, r1, #22
 8012e36:	4698      	mov	r8, r3
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8012e38:	0028      	movs	r0, r5
 8012e3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012e3c:	f7ff fec4 	bl	8012bc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d10f      	bne.n	8012e64 <HAL_I2C_Mem_Write+0xb4>
      hi2c->Instance->TXDR = (*pData++);
 8012e44:	682b      	ldr	r3, [r5, #0]
 8012e46:	783a      	ldrb	r2, [r7, #0]
      Size--;
 8012e48:	3c01      	subs	r4, #1
      Sizetmp--;
 8012e4a:	3e01      	subs	r6, #1
      hi2c->Instance->TXDR = (*pData++);
 8012e4c:	629a      	str	r2, [r3, #40]	; 0x28
      Size--;
 8012e4e:	b2a4      	uxth	r4, r4
      if((Sizetmp == 0)&&(Size!=0))
 8012e50:	2e00      	cmp	r6, #0
 8012e52:	d11c      	bne.n	8012e8e <HAL_I2C_Mem_Write+0xde>
 8012e54:	2c00      	cmp	r4, #0
 8012e56:	d11e      	bne.n	8012e96 <HAL_I2C_Mem_Write+0xe6>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8012e58:	2119      	movs	r1, #25
 8012e5a:	0028      	movs	r0, r5
 8012e5c:	f7ff fe8a 	bl	8012b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012e60:	2800      	cmp	r0, #0
 8012e62:	d052      	beq.n	8012f0a <HAL_I2C_Mem_Write+0x15a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012e64:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012e66:	2b04      	cmp	r3, #4
 8012e68:	d001      	beq.n	8012e6e <HAL_I2C_Mem_Write+0xbe>
          return HAL_TIMEOUT;
 8012e6a:	2303      	movs	r3, #3
 8012e6c:	4699      	mov	r9, r3
}
 8012e6e:	4648      	mov	r0, r9
 8012e70:	b002      	add	sp, #8
 8012e72:	bce0      	pop	{r5, r6, r7}
 8012e74:	46ba      	mov	sl, r7
 8012e76:	46b1      	mov	r9, r6
 8012e78:	46a8      	mov	r8, r5
 8012e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8012e7c:	2302      	movs	r3, #2
 8012e7e:	4699      	mov	r9, r3
 8012e80:	e7f5      	b.n	8012e6e <HAL_I2C_Mem_Write+0xbe>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012e82:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012e84:	2b04      	cmp	r3, #4
 8012e86:	d12b      	bne.n	8012ee0 <HAL_I2C_Mem_Write+0x130>
        __HAL_UNLOCK(hi2c);
 8012e88:	4653      	mov	r3, sl
 8012e8a:	55ab      	strb	r3, [r5, r6]
        return HAL_ERROR;
 8012e8c:	e7ef      	b.n	8012e6e <HAL_I2C_Mem_Write+0xbe>
    }while(Size > 0);
 8012e8e:	2c00      	cmp	r4, #0
 8012e90:	d0e2      	beq.n	8012e58 <HAL_I2C_Mem_Write+0xa8>
 8012e92:	3701      	adds	r7, #1
 8012e94:	e7d0      	b.n	8012e38 <HAL_I2C_Mem_Write+0x88>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8012e96:	2200      	movs	r2, #0
 8012e98:	2180      	movs	r1, #128	; 0x80
 8012e9a:	0028      	movs	r0, r5
 8012e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e9e:	f7ff fe31 	bl	8012b04 <I2C_WaitOnFlagUntilTimeout>
 8012ea2:	2800      	cmp	r0, #0
 8012ea4:	d1e1      	bne.n	8012e6a <HAL_I2C_Mem_Write+0xba>
        if(Size > 255)
 8012ea6:	2cff      	cmp	r4, #255	; 0xff
 8012ea8:	d90b      	bls.n	8012ec2 <HAL_I2C_Mem_Write+0x112>
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012eaa:	4652      	mov	r2, sl
  tmpreg = hi2c->Instance->CR2;
 8012eac:	6829      	ldr	r1, [r5, #0]
          Sizetmp = 255;
 8012eae:	36ff      	adds	r6, #255	; 0xff
  tmpreg = hi2c->Instance->CR2;
 8012eb0:	684b      	ldr	r3, [r1, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012eb2:	3701      	adds	r7, #1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012eb4:	4013      	ands	r3, r2
 8012eb6:	4642      	mov	r2, r8
 8012eb8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012eba:	4a1c      	ldr	r2, [pc, #112]	; (8012f2c <HAL_I2C_Mem_Write+0x17c>)
 8012ebc:	4313      	orrs	r3, r2
  hi2c->Instance->CR2 = tmpreg;  
 8012ebe:	604b      	str	r3, [r1, #4]
          Sizetmp = 255;
 8012ec0:	e7ba      	b.n	8012e38 <HAL_I2C_Mem_Write+0x88>
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012ec2:	4651      	mov	r1, sl
  tmpreg = hi2c->Instance->CR2;
 8012ec4:	682a      	ldr	r2, [r5, #0]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012ec6:	0026      	movs	r6, r4
  tmpreg = hi2c->Instance->CR2;
 8012ec8:	6853      	ldr	r3, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012eca:	3701      	adds	r7, #1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012ecc:	400b      	ands	r3, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012ece:	0421      	lsls	r1, r4, #16
 8012ed0:	430b      	orrs	r3, r1
 8012ed2:	4641      	mov	r1, r8
 8012ed4:	430b      	orrs	r3, r1
 8012ed6:	2180      	movs	r1, #128	; 0x80
 8012ed8:	0489      	lsls	r1, r1, #18
 8012eda:	430b      	orrs	r3, r1
  hi2c->Instance->CR2 = tmpreg;  
 8012edc:	6053      	str	r3, [r2, #4]
          Sizetmp = Size;
 8012ede:	e7ab      	b.n	8012e38 <HAL_I2C_Mem_Write+0x88>
        __HAL_UNLOCK(hi2c);
 8012ee0:	4653      	mov	r3, sl
 8012ee2:	55ab      	strb	r3, [r5, r6]
        return HAL_TIMEOUT;
 8012ee4:	2303      	movs	r3, #3
 8012ee6:	4699      	mov	r9, r3
 8012ee8:	e7c1      	b.n	8012e6e <HAL_I2C_Mem_Write+0xbe>
  tmpreg = hi2c->Instance->CR2;
 8012eea:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012eec:	490e      	ldr	r1, [pc, #56]	; (8012f28 <HAL_I2C_Mem_Write+0x178>)
  tmpreg = hi2c->Instance->CR2;
 8012eee:	6853      	ldr	r3, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012ef0:	0026      	movs	r6, r4
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012ef2:	400b      	ands	r3, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012ef4:	4641      	mov	r1, r8
 8012ef6:	0589      	lsls	r1, r1, #22
 8012ef8:	0d88      	lsrs	r0, r1, #22
 8012efa:	4303      	orrs	r3, r0
 8012efc:	0420      	lsls	r0, r4, #16
 8012efe:	4303      	orrs	r3, r0
 8012f00:	2080      	movs	r0, #128	; 0x80
 8012f02:	0480      	lsls	r0, r0, #18
 8012f04:	4303      	orrs	r3, r0
  hi2c->Instance->CR2 = tmpreg;  
 8012f06:	6053      	str	r3, [r2, #4]
      Sizetmp = Size;
 8012f08:	e792      	b.n	8012e30 <HAL_I2C_Mem_Write+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012f0a:	2220      	movs	r2, #32
 8012f0c:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8012f0e:	4908      	ldr	r1, [pc, #32]	; (8012f30 <HAL_I2C_Mem_Write+0x180>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012f10:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8012f12:	685a      	ldr	r2, [r3, #4]
 8012f14:	400a      	ands	r2, r1
 8012f16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 8012f18:	2335      	movs	r3, #53	; 0x35
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	54ea      	strb	r2, [r5, r3]
    __HAL_UNLOCK(hi2c);
 8012f1e:	3b01      	subs	r3, #1
 8012f20:	54e8      	strb	r0, [r5, r3]
    return HAL_OK;
 8012f22:	2300      	movs	r3, #0
 8012f24:	4699      	mov	r9, r3
 8012f26:	e7a2      	b.n	8012e6e <HAL_I2C_Mem_Write+0xbe>
 8012f28:	fc009800 	.word	0xfc009800
 8012f2c:	01ff0000 	.word	0x01ff0000
 8012f30:	fe00e800 	.word	0xfe00e800

08012f34 <HAL_I2C_Mem_Read>:
{
 8012f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f36:	464f      	mov	r7, r9
 8012f38:	4646      	mov	r6, r8
 8012f3a:	46d6      	mov	lr, sl
 8012f3c:	b5c0      	push	{r6, r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	0005      	movs	r5, r0
 8012f42:	a80a      	add	r0, sp, #40	; 0x28
 8012f44:	c880      	ldmia	r0!, {r7}
 8012f46:	4688      	mov	r8, r1
 8012f48:	8804      	ldrh	r4, [r0, #0]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012f4a:	2035      	movs	r0, #53	; 0x35
 8012f4c:	5c29      	ldrb	r1, [r5, r0]
{
 8012f4e:	469c      	mov	ip, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012f50:	b2ce      	uxtb	r6, r1
 8012f52:	46b1      	mov	r9, r6
 8012f54:	2901      	cmp	r1, #1
 8012f56:	d155      	bne.n	8013004 <HAL_I2C_Mem_Read+0xd0>
    if((pData == NULL) || (Size == 0)) 
 8012f58:	2f00      	cmp	r7, #0
 8012f5a:	d04c      	beq.n	8012ff6 <HAL_I2C_Mem_Read+0xc2>
 8012f5c:	2c00      	cmp	r4, #0
 8012f5e:	d04a      	beq.n	8012ff6 <HAL_I2C_Mem_Read+0xc2>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012f60:	6829      	ldr	r1, [r5, #0]
 8012f62:	698e      	ldr	r6, [r1, #24]
 8012f64:	2180      	movs	r1, #128	; 0x80
 8012f66:	0033      	movs	r3, r6
 8012f68:	0209      	lsls	r1, r1, #8
 8012f6a:	400b      	ands	r3, r1
 8012f6c:	469a      	mov	sl, r3
 8012f6e:	420e      	tst	r6, r1
 8012f70:	d148      	bne.n	8013004 <HAL_I2C_Mem_Read+0xd0>
    __HAL_LOCK(hi2c);
 8012f72:	2634      	movs	r6, #52	; 0x34
 8012f74:	5da9      	ldrb	r1, [r5, r6]
 8012f76:	2901      	cmp	r1, #1
 8012f78:	d044      	beq.n	8013004 <HAL_I2C_Mem_Read+0xd0>
 8012f7a:	464b      	mov	r3, r9
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8012f7c:	2162      	movs	r1, #98	; 0x62
    __HAL_LOCK(hi2c);
 8012f7e:	55ab      	strb	r3, [r5, r6]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012f80:	4653      	mov	r3, sl
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8012f82:	5429      	strb	r1, [r5, r0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012f84:	63ab      	str	r3, [r5, #56]	; 0x38
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8012f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f88:	4641      	mov	r1, r8
 8012f8a:	9300      	str	r3, [sp, #0]
 8012f8c:	0028      	movs	r0, r5
 8012f8e:	4663      	mov	r3, ip
 8012f90:	f7ff fe80 	bl	8012c94 <I2C_RequestMemoryRead>
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d138      	bne.n	801300a <HAL_I2C_Mem_Read+0xd6>
    if(Size > 255)
 8012f98:	2cff      	cmp	r4, #255	; 0xff
 8012f9a:	d96a      	bls.n	8013072 <HAL_I2C_Mem_Read+0x13e>
  tmpreg = hi2c->Instance->CR2;
 8012f9c:	6828      	ldr	r0, [r5, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012f9e:	4a44      	ldr	r2, [pc, #272]	; (80130b0 <HAL_I2C_Mem_Read+0x17c>)
  tmpreg = hi2c->Instance->CR2;
 8012fa0:	6843      	ldr	r3, [r0, #4]
      Sizetmp = 255;
 8012fa2:	26ff      	movs	r6, #255	; 0xff
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012fa4:	4013      	ands	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012fa6:	4642      	mov	r2, r8
 8012fa8:	0591      	lsls	r1, r2, #22
 8012faa:	0d8a      	lsrs	r2, r1, #22
 8012fac:	4313      	orrs	r3, r2
 8012fae:	4a41      	ldr	r2, [pc, #260]	; (80130b4 <HAL_I2C_Mem_Read+0x180>)
 8012fb0:	4313      	orrs	r3, r2
  hi2c->Instance->CR2 = tmpreg;  
 8012fb2:	6043      	str	r3, [r0, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012fb4:	4b3e      	ldr	r3, [pc, #248]	; (80130b0 <HAL_I2C_Mem_Read+0x17c>)
 8012fb6:	469a      	mov	sl, r3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012fb8:	0d8b      	lsrs	r3, r1, #22
 8012fba:	4698      	mov	r8, r3
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	2104      	movs	r1, #4
 8012fc0:	0028      	movs	r0, r5
 8012fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fc4:	f7ff fd9e 	bl	8012b04 <I2C_WaitOnFlagUntilTimeout>
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	d112      	bne.n	8012ff2 <HAL_I2C_Mem_Read+0xbe>
      (*pData++) = hi2c->Instance->RXDR;
 8012fcc:	682b      	ldr	r3, [r5, #0]
      Size--;   
 8012fce:	3c01      	subs	r4, #1
      (*pData++) = hi2c->Instance->RXDR;
 8012fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      Sizetmp--;
 8012fd2:	3e01      	subs	r6, #1
      (*pData++) = hi2c->Instance->RXDR;
 8012fd4:	703b      	strb	r3, [r7, #0]
      Size--;   
 8012fd6:	b2a4      	uxth	r4, r4
      if((Sizetmp == 0)&&(Size!=0))
 8012fd8:	2e00      	cmp	r6, #0
 8012fda:	d11c      	bne.n	8013016 <HAL_I2C_Mem_Read+0xe2>
 8012fdc:	2c00      	cmp	r4, #0
 8012fde:	d11e      	bne.n	801301e <HAL_I2C_Mem_Read+0xea>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8012fe0:	2119      	movs	r1, #25
 8012fe2:	0028      	movs	r0, r5
 8012fe4:	f7ff fdc6 	bl	8012b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	d051      	beq.n	8013090 <HAL_I2C_Mem_Read+0x15c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012fec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012fee:	2b04      	cmp	r3, #4
 8012ff0:	d001      	beq.n	8012ff6 <HAL_I2C_Mem_Read+0xc2>
        return HAL_TIMEOUT;
 8012ff2:	2303      	movs	r3, #3
 8012ff4:	4699      	mov	r9, r3
}
 8012ff6:	4648      	mov	r0, r9
 8012ff8:	b002      	add	sp, #8
 8012ffa:	bce0      	pop	{r5, r6, r7}
 8012ffc:	46ba      	mov	sl, r7
 8012ffe:	46b1      	mov	r9, r6
 8013000:	46a8      	mov	r8, r5
 8013002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8013004:	2302      	movs	r3, #2
 8013006:	4699      	mov	r9, r3
 8013008:	e7f5      	b.n	8012ff6 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801300a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801300c:	2b04      	cmp	r3, #4
 801300e:	d12b      	bne.n	8013068 <HAL_I2C_Mem_Read+0x134>
        __HAL_UNLOCK(hi2c);
 8013010:	4653      	mov	r3, sl
 8013012:	55ab      	strb	r3, [r5, r6]
        return HAL_ERROR;
 8013014:	e7ef      	b.n	8012ff6 <HAL_I2C_Mem_Read+0xc2>
    }while(Size > 0);
 8013016:	2c00      	cmp	r4, #0
 8013018:	d0e2      	beq.n	8012fe0 <HAL_I2C_Mem_Read+0xac>
 801301a:	3701      	adds	r7, #1
 801301c:	e7ce      	b.n	8012fbc <HAL_I2C_Mem_Read+0x88>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 801301e:	2200      	movs	r2, #0
 8013020:	2180      	movs	r1, #128	; 0x80
 8013022:	0028      	movs	r0, r5
 8013024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013026:	f7ff fd6d 	bl	8012b04 <I2C_WaitOnFlagUntilTimeout>
 801302a:	2800      	cmp	r0, #0
 801302c:	d1e1      	bne.n	8012ff2 <HAL_I2C_Mem_Read+0xbe>
        if(Size > 255)
 801302e:	2cff      	cmp	r4, #255	; 0xff
 8013030:	d90b      	bls.n	801304a <HAL_I2C_Mem_Read+0x116>
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8013032:	4652      	mov	r2, sl
  tmpreg = hi2c->Instance->CR2;
 8013034:	6829      	ldr	r1, [r5, #0]
          Sizetmp = 255;
 8013036:	36ff      	adds	r6, #255	; 0xff
  tmpreg = hi2c->Instance->CR2;
 8013038:	684b      	ldr	r3, [r1, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 801303a:	3701      	adds	r7, #1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 801303c:	4013      	ands	r3, r2
 801303e:	4642      	mov	r2, r8
 8013040:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8013042:	4a1d      	ldr	r2, [pc, #116]	; (80130b8 <HAL_I2C_Mem_Read+0x184>)
 8013044:	4313      	orrs	r3, r2
  hi2c->Instance->CR2 = tmpreg;  
 8013046:	604b      	str	r3, [r1, #4]
          Sizetmp = 255;
 8013048:	e7b8      	b.n	8012fbc <HAL_I2C_Mem_Read+0x88>
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 801304a:	4651      	mov	r1, sl
  tmpreg = hi2c->Instance->CR2;
 801304c:	682a      	ldr	r2, [r5, #0]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 801304e:	0026      	movs	r6, r4
  tmpreg = hi2c->Instance->CR2;
 8013050:	6853      	ldr	r3, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8013052:	3701      	adds	r7, #1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8013054:	400b      	ands	r3, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8013056:	0421      	lsls	r1, r4, #16
 8013058:	430b      	orrs	r3, r1
 801305a:	4641      	mov	r1, r8
 801305c:	430b      	orrs	r3, r1
 801305e:	2180      	movs	r1, #128	; 0x80
 8013060:	0489      	lsls	r1, r1, #18
 8013062:	430b      	orrs	r3, r1
  hi2c->Instance->CR2 = tmpreg;  
 8013064:	6053      	str	r3, [r2, #4]
          Sizetmp = Size;
 8013066:	e7a9      	b.n	8012fbc <HAL_I2C_Mem_Read+0x88>
        __HAL_UNLOCK(hi2c);
 8013068:	4653      	mov	r3, sl
 801306a:	55ab      	strb	r3, [r5, r6]
        return HAL_TIMEOUT;
 801306c:	2303      	movs	r3, #3
 801306e:	4699      	mov	r9, r3
 8013070:	e7c1      	b.n	8012ff6 <HAL_I2C_Mem_Read+0xc2>
  tmpreg = hi2c->Instance->CR2;
 8013072:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8013074:	490e      	ldr	r1, [pc, #56]	; (80130b0 <HAL_I2C_Mem_Read+0x17c>)
  tmpreg = hi2c->Instance->CR2;
 8013076:	6853      	ldr	r3, [r2, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8013078:	0026      	movs	r6, r4
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 801307a:	400b      	ands	r3, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 801307c:	4641      	mov	r1, r8
 801307e:	0589      	lsls	r1, r1, #22
 8013080:	0d88      	lsrs	r0, r1, #22
 8013082:	4303      	orrs	r3, r0
 8013084:	0420      	lsls	r0, r4, #16
 8013086:	4303      	orrs	r3, r0
 8013088:	480c      	ldr	r0, [pc, #48]	; (80130bc <HAL_I2C_Mem_Read+0x188>)
 801308a:	4303      	orrs	r3, r0
  hi2c->Instance->CR2 = tmpreg;  
 801308c:	6053      	str	r3, [r2, #4]
      Sizetmp = Size;
 801308e:	e791      	b.n	8012fb4 <HAL_I2C_Mem_Read+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013090:	2220      	movs	r2, #32
 8013092:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8013094:	490a      	ldr	r1, [pc, #40]	; (80130c0 <HAL_I2C_Mem_Read+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013096:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8013098:	685a      	ldr	r2, [r3, #4]
 801309a:	400a      	ands	r2, r1
 801309c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801309e:	2335      	movs	r3, #53	; 0x35
 80130a0:	2201      	movs	r2, #1
 80130a2:	54ea      	strb	r2, [r5, r3]
    __HAL_UNLOCK(hi2c);
 80130a4:	3b01      	subs	r3, #1
 80130a6:	54e8      	strb	r0, [r5, r3]
    return HAL_OK;
 80130a8:	2300      	movs	r3, #0
 80130aa:	4699      	mov	r9, r3
 80130ac:	e7a3      	b.n	8012ff6 <HAL_I2C_Mem_Read+0xc2>
 80130ae:	46c0      	nop			; (mov r8, r8)
 80130b0:	fc009800 	.word	0xfc009800
 80130b4:	01ff2400 	.word	0x01ff2400
 80130b8:	01ff0000 	.word	0x01ff0000
 80130bc:	02002400 	.word	0x02002400
 80130c0:	fe00e800 	.word	0xfe00e800

080130c4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 80130c4:	2235      	movs	r2, #53	; 0x35
{
 80130c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 80130c8:	5c84      	ldrb	r4, [r0, r2]
{
 80130ca:	0003      	movs	r3, r0
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 80130cc:	b2e0      	uxtb	r0, r4
 80130ce:	2c02      	cmp	r4, #2
 80130d0:	d024      	beq.n	801311c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80130d2:	5c98      	ldrb	r0, [r3, r2]
 80130d4:	2812      	cmp	r0, #18
 80130d6:	d022      	beq.n	801311e <HAL_I2CEx_ConfigAnalogFilter+0x5a>
 80130d8:	5c98      	ldrb	r0, [r3, r2]
 80130da:	2822      	cmp	r0, #34	; 0x22
 80130dc:	d01f      	beq.n	801311e <HAL_I2CEx_ConfigAnalogFilter+0x5a>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 80130de:	5c98      	ldrb	r0, [r3, r2]
 80130e0:	2832      	cmp	r0, #50	; 0x32
 80130e2:	d01c      	beq.n	801311e <HAL_I2CEx_ConfigAnalogFilter+0x5a>
 80130e4:	5c98      	ldrb	r0, [r3, r2]
 80130e6:	2842      	cmp	r0, #66	; 0x42
 80130e8:	d019      	beq.n	801311e <HAL_I2CEx_ConfigAnalogFilter+0x5a>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 80130ea:	2634      	movs	r6, #52	; 0x34
 80130ec:	5d98      	ldrb	r0, [r3, r6]
 80130ee:	2801      	cmp	r0, #1
 80130f0:	d015      	beq.n	801311e <HAL_I2CEx_ConfigAnalogFilter+0x5a>

  hi2c->State = HAL_I2C_STATE_BUSY;
 80130f2:	2002      	movs	r0, #2
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);    
 80130f4:	2401      	movs	r4, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80130f6:	5498      	strb	r0, [r3, r2]
  __HAL_I2C_DISABLE(hi2c);    
 80130f8:	6818      	ldr	r0, [r3, #0]
  
  /* Reset I2Cx ANOFF bit */
  hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 80130fa:	4f0a      	ldr	r7, [pc, #40]	; (8013124 <HAL_I2CEx_ConfigAnalogFilter+0x60>)
  __HAL_I2C_DISABLE(hi2c);    
 80130fc:	6805      	ldr	r5, [r0, #0]
 80130fe:	43a5      	bics	r5, r4
 8013100:	6005      	str	r5, [r0, #0]
  hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 8013102:	6805      	ldr	r5, [r0, #0]
 8013104:	403d      	ands	r5, r7
 8013106:	6005      	str	r5, [r0, #0]
  
  /* Set analog filter bit*/
  hi2c->Instance->CR1 |= AnalogFilter;
 8013108:	6805      	ldr	r5, [r0, #0]
 801310a:	4329      	orrs	r1, r5
 801310c:	6001      	str	r1, [r0, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 801310e:	6801      	ldr	r1, [r0, #0]
 8013110:	4321      	orrs	r1, r4
 8013112:	6001      	str	r1, [r0, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 8013114:	549c      	strb	r4, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013116:	2200      	movs	r2, #0

  return HAL_OK; 
 8013118:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 801311a:	559a      	strb	r2, [r3, r6]
}
 801311c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 801311e:	2002      	movs	r0, #2
 8013120:	e7fc      	b.n	801311c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8013122:	46c0      	nop			; (mov r8, r8)
 8013124:	ffffefff 	.word	0xffffefff

08013128 <HAL_I2CEx_ConfigDigitalFilter>:
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 8013128:	2235      	movs	r2, #53	; 0x35
{
 801312a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 801312c:	5c84      	ldrb	r4, [r0, r2]
{
 801312e:	0003      	movs	r3, r0
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 8013130:	b2e0      	uxtb	r0, r4
 8013132:	2c02      	cmp	r4, #2
 8013134:	d023      	beq.n	801317e <HAL_I2CEx_ConfigDigitalFilter+0x56>
 8013136:	5c98      	ldrb	r0, [r3, r2]
 8013138:	2812      	cmp	r0, #18
 801313a:	d021      	beq.n	8013180 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 801313c:	5c98      	ldrb	r0, [r3, r2]
 801313e:	2822      	cmp	r0, #34	; 0x22
 8013140:	d01e      	beq.n	8013180 <HAL_I2CEx_ConfigDigitalFilter+0x58>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 8013142:	5c98      	ldrb	r0, [r3, r2]
 8013144:	2832      	cmp	r0, #50	; 0x32
 8013146:	d01b      	beq.n	8013180 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 8013148:	5c98      	ldrb	r0, [r3, r2]
 801314a:	2842      	cmp	r0, #66	; 0x42
 801314c:	d018      	beq.n	8013180 <HAL_I2CEx_ConfigDigitalFilter+0x58>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 801314e:	2634      	movs	r6, #52	; 0x34
 8013150:	5d98      	ldrb	r0, [r3, r6]
 8013152:	2801      	cmp	r0, #1
 8013154:	d014      	beq.n	8013180 <HAL_I2CEx_ConfigDigitalFilter+0x58>

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013156:	2002      	movs	r0, #2
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);  
 8013158:	2401      	movs	r4, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 801315a:	5498      	strb	r0, [r3, r2]
  __HAL_I2C_DISABLE(hi2c);  
 801315c:	6818      	ldr	r0, [r3, #0]
  
  /* Get the old register value */
  tmpreg = hi2c->Instance->CR1;
  
  /* Reset I2Cx DNF bits [11:8] */
  tmpreg &= ~(I2C_CR1_DFN);
 801315e:	4f09      	ldr	r7, [pc, #36]	; (8013184 <HAL_I2CEx_ConfigDigitalFilter+0x5c>)
  __HAL_I2C_DISABLE(hi2c);  
 8013160:	6805      	ldr	r5, [r0, #0]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= DigitalFilter << 8;
 8013162:	0209      	lsls	r1, r1, #8
  __HAL_I2C_DISABLE(hi2c);  
 8013164:	43a5      	bics	r5, r4
 8013166:	6005      	str	r5, [r0, #0]
  tmpreg = hi2c->Instance->CR1;
 8013168:	6805      	ldr	r5, [r0, #0]
  tmpreg &= ~(I2C_CR1_DFN);
 801316a:	403d      	ands	r5, r7
  tmpreg |= DigitalFilter << 8;
 801316c:	4329      	orrs	r1, r5
  
  /* Store the new register value */
  hi2c->Instance->CR1 = tmpreg;
 801316e:	6001      	str	r1, [r0, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 8013170:	6801      	ldr	r1, [r0, #0]
 8013172:	4321      	orrs	r1, r4
 8013174:	6001      	str	r1, [r0, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 8013176:	549c      	strb	r4, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013178:	2200      	movs	r2, #0

  return HAL_OK; 
 801317a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 801317c:	559a      	strb	r2, [r3, r6]
}  
 801317e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8013180:	2002      	movs	r0, #2
 8013182:	e7fc      	b.n	801317e <HAL_I2CEx_ConfigDigitalFilter+0x56>
 8013184:	fffff0ff 	.word	0xfffff0ff

08013188 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8013188:	4770      	bx	lr
 801318a:	46c0      	nop			; (mov r8, r8)

0801318c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 801318c:	2380      	movs	r3, #128	; 0x80
 801318e:	4a03      	ldr	r2, [pc, #12]	; (801319c <HAL_PWR_EnableBkUpAccess+0x10>)
 8013190:	005b      	lsls	r3, r3, #1
 8013192:	6811      	ldr	r1, [r2, #0]
 8013194:	430b      	orrs	r3, r1
 8013196:	6013      	str	r3, [r2, #0]
}
 8013198:	4770      	bx	lr
 801319a:	46c0      	nop			; (mov r8, r8)
 801319c:	40007000 	.word	0x40007000

080131a0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80131a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131a2:	46c6      	mov	lr, r8
 80131a4:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80131a6:	6803      	ldr	r3, [r0, #0]
{
 80131a8:	0004      	movs	r4, r0
 80131aa:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80131ac:	07da      	lsls	r2, r3, #31
 80131ae:	d54b      	bpl.n	8013248 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80131b0:	210c      	movs	r1, #12
 80131b2:	48c4      	ldr	r0, [pc, #784]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 80131b4:	6842      	ldr	r2, [r0, #4]
 80131b6:	400a      	ands	r2, r1
 80131b8:	2a04      	cmp	r2, #4
 80131ba:	d100      	bne.n	80131be <HAL_RCC_OscConfig+0x1e>
 80131bc:	e154      	b.n	8013468 <HAL_RCC_OscConfig+0x2c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80131be:	6842      	ldr	r2, [r0, #4]
 80131c0:	4011      	ands	r1, r2
 80131c2:	2908      	cmp	r1, #8
 80131c4:	d108      	bne.n	80131d8 <HAL_RCC_OscConfig+0x38>
 80131c6:	21c0      	movs	r1, #192	; 0xc0
 80131c8:	6842      	ldr	r2, [r0, #4]
 80131ca:	0249      	lsls	r1, r1, #9
 80131cc:	400a      	ands	r2, r1
 80131ce:	2180      	movs	r1, #128	; 0x80
 80131d0:	0249      	lsls	r1, r1, #9
 80131d2:	428a      	cmp	r2, r1
 80131d4:	d100      	bne.n	80131d8 <HAL_RCC_OscConfig+0x38>
 80131d6:	e147      	b.n	8013468 <HAL_RCC_OscConfig+0x2c8>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80131d8:	4dba      	ldr	r5, [pc, #744]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 80131da:	4abb      	ldr	r2, [pc, #748]	; (80134c8 <HAL_RCC_OscConfig+0x328>)
 80131dc:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80131de:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80131e0:	4013      	ands	r3, r2
 80131e2:	602b      	str	r3, [r5, #0]
 80131e4:	682b      	ldr	r3, [r5, #0]
 80131e6:	4ab9      	ldr	r2, [pc, #740]	; (80134cc <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80131e8:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80131ea:	4013      	ands	r3, r2
 80131ec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80131ee:	f7fd ffa9 	bl	8011144 <HAL_GetTick>
 80131f2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80131f4:	e005      	b.n	8013202 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80131f6:	f7fd ffa5 	bl	8011144 <HAL_GetTick>
 80131fa:	1b80      	subs	r0, r0, r6
 80131fc:	2864      	cmp	r0, #100	; 0x64
 80131fe:	d900      	bls.n	8013202 <HAL_RCC_OscConfig+0x62>
 8013200:	e13c      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013202:	682b      	ldr	r3, [r5, #0]
 8013204:	423b      	tst	r3, r7
 8013206:	d1f6      	bne.n	80131f6 <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013208:	6863      	ldr	r3, [r4, #4]
 801320a:	2b01      	cmp	r3, #1
 801320c:	d100      	bne.n	8013210 <HAL_RCC_OscConfig+0x70>
 801320e:	e196      	b.n	801353e <HAL_RCC_OscConfig+0x39e>
 8013210:	2b00      	cmp	r3, #0
 8013212:	d000      	beq.n	8013216 <HAL_RCC_OscConfig+0x76>
 8013214:	e1bc      	b.n	8013590 <HAL_RCC_OscConfig+0x3f0>
 8013216:	682b      	ldr	r3, [r5, #0]
 8013218:	4aab      	ldr	r2, [pc, #684]	; (80134c8 <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801321a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801321c:	4013      	ands	r3, r2
 801321e:	602b      	str	r3, [r5, #0]
 8013220:	682b      	ldr	r3, [r5, #0]
 8013222:	4aaa      	ldr	r2, [pc, #680]	; (80134cc <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013224:	4fa7      	ldr	r7, [pc, #668]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013226:	4013      	ands	r3, r2
 8013228:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801322a:	f7fd ff8b 	bl	8011144 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801322e:	02b6      	lsls	r6, r6, #10
        tickstart = HAL_GetTick();
 8013230:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013232:	e005      	b.n	8013240 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013234:	f7fd ff86 	bl	8011144 <HAL_GetTick>
 8013238:	1b40      	subs	r0, r0, r5
 801323a:	2864      	cmp	r0, #100	; 0x64
 801323c:	d900      	bls.n	8013240 <HAL_RCC_OscConfig+0xa0>
 801323e:	e11d      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	4233      	tst	r3, r6
 8013244:	d1f6      	bne.n	8013234 <HAL_RCC_OscConfig+0x94>
 8013246:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013248:	079a      	lsls	r2, r3, #30
 801324a:	d529      	bpl.n	80132a0 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801324c:	220c      	movs	r2, #12
 801324e:	499d      	ldr	r1, [pc, #628]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 8013250:	6848      	ldr	r0, [r1, #4]
 8013252:	4202      	tst	r2, r0
 8013254:	d100      	bne.n	8013258 <HAL_RCC_OscConfig+0xb8>
 8013256:	e0fe      	b.n	8013456 <HAL_RCC_OscConfig+0x2b6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8013258:	6848      	ldr	r0, [r1, #4]
 801325a:	4002      	ands	r2, r0
 801325c:	2a08      	cmp	r2, #8
 801325e:	d100      	bne.n	8013262 <HAL_RCC_OscConfig+0xc2>
 8013260:	e0f0      	b.n	8013444 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8013262:	68e3      	ldr	r3, [r4, #12]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d100      	bne.n	801326a <HAL_RCC_OscConfig+0xca>
 8013268:	e138      	b.n	80134dc <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801326a:	2201      	movs	r2, #1
 801326c:	4e95      	ldr	r6, [pc, #596]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801326e:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8013270:	6833      	ldr	r3, [r6, #0]
 8013272:	4313      	orrs	r3, r2
 8013274:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8013276:	f7fd ff65 	bl	8011144 <HAL_GetTick>
 801327a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801327c:	e005      	b.n	801328a <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801327e:	f7fd ff61 	bl	8011144 <HAL_GetTick>
 8013282:	1b40      	subs	r0, r0, r5
 8013284:	2864      	cmp	r0, #100	; 0x64
 8013286:	d900      	bls.n	801328a <HAL_RCC_OscConfig+0xea>
 8013288:	e0f8      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801328a:	6833      	ldr	r3, [r6, #0]
 801328c:	421f      	tst	r7, r3
 801328e:	d0f6      	beq.n	801327e <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013290:	21f8      	movs	r1, #248	; 0xf8
 8013292:	6832      	ldr	r2, [r6, #0]
 8013294:	6923      	ldr	r3, [r4, #16]
 8013296:	438a      	bics	r2, r1
 8013298:	00db      	lsls	r3, r3, #3
 801329a:	4313      	orrs	r3, r2
 801329c:	6033      	str	r3, [r6, #0]
 801329e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80132a0:	071a      	lsls	r2, r3, #28
 80132a2:	d45e      	bmi.n	8013362 <HAL_RCC_OscConfig+0x1c2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80132a4:	075a      	lsls	r2, r3, #29
 80132a6:	d475      	bmi.n	8013394 <HAL_RCC_OscConfig+0x1f4>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80132a8:	06da      	lsls	r2, r3, #27
 80132aa:	d512      	bpl.n	80132d2 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80132ac:	6962      	ldr	r2, [r4, #20]
 80132ae:	2a01      	cmp	r2, #1
 80132b0:	d100      	bne.n	80132b4 <HAL_RCC_OscConfig+0x114>
 80132b2:	e18c      	b.n	80135ce <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80132b4:	3205      	adds	r2, #5
 80132b6:	d000      	beq.n	80132ba <HAL_RCC_OscConfig+0x11a>
 80132b8:	e124      	b.n	8013504 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80132ba:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80132bc:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80132be:	4981      	ldr	r1, [pc, #516]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 80132c0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80132c2:	4382      	bics	r2, r0
 80132c4:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80132c6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80132c8:	69a2      	ldr	r2, [r4, #24]
 80132ca:	43a8      	bics	r0, r5
 80132cc:	00d2      	lsls	r2, r2, #3
 80132ce:	4302      	orrs	r2, r0
 80132d0:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80132d2:	069b      	lsls	r3, r3, #26
 80132d4:	d522      	bpl.n	801331c <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80132d6:	220c      	movs	r2, #12
 80132d8:	497a      	ldr	r1, [pc, #488]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 80132da:	684b      	ldr	r3, [r1, #4]
 80132dc:	4013      	ands	r3, r2
 80132de:	2b0c      	cmp	r3, #12
 80132e0:	d100      	bne.n	80132e4 <HAL_RCC_OscConfig+0x144>
 80132e2:	e14a      	b.n	801357a <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80132e4:	684b      	ldr	r3, [r1, #4]
 80132e6:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80132e8:	2a08      	cmp	r2, #8
 80132ea:	d100      	bne.n	80132ee <HAL_RCC_OscConfig+0x14e>
 80132ec:	e13e      	b.n	801356c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80132ee:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80132f0:	4d74      	ldr	r5, [pc, #464]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d100      	bne.n	80132f8 <HAL_RCC_OscConfig+0x158>
 80132f6:	e156      	b.n	80135a6 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 80132f8:	2680      	movs	r6, #128	; 0x80
 80132fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80132fc:	0276      	lsls	r6, r6, #9
 80132fe:	4333      	orrs	r3, r6
 8013300:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 8013302:	f7fd ff1f 	bl	8011144 <HAL_GetTick>
 8013306:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013308:	e005      	b.n	8013316 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801330a:	f7fd ff1b 	bl	8011144 <HAL_GetTick>
 801330e:	1bc0      	subs	r0, r0, r7
 8013310:	2864      	cmp	r0, #100	; 0x64
 8013312:	d900      	bls.n	8013316 <HAL_RCC_OscConfig+0x176>
 8013314:	e0b2      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013316:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013318:	4233      	tst	r3, r6
 801331a:	d0f6      	beq.n	801330a <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801331c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801331e:	2b00      	cmp	r3, #0
 8013320:	d01d      	beq.n	801335e <HAL_RCC_OscConfig+0x1be>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013322:	220c      	movs	r2, #12
 8013324:	4d67      	ldr	r5, [pc, #412]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 8013326:	6869      	ldr	r1, [r5, #4]
 8013328:	400a      	ands	r2, r1
 801332a:	2a08      	cmp	r2, #8
 801332c:	d100      	bne.n	8013330 <HAL_RCC_OscConfig+0x190>
 801332e:	e099      	b.n	8013464 <HAL_RCC_OscConfig+0x2c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013330:	2b02      	cmp	r3, #2
 8013332:	d100      	bne.n	8013336 <HAL_RCC_OscConfig+0x196>
 8013334:	e16a      	b.n	801360c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013336:	682b      	ldr	r3, [r5, #0]
 8013338:	4a65      	ldr	r2, [pc, #404]	; (80134d0 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801333a:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 801333c:	4013      	ands	r3, r2
 801333e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8013340:	f7fd ff00 	bl	8011144 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013344:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8013346:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013348:	04ad      	lsls	r5, r5, #18
 801334a:	e005      	b.n	8013358 <HAL_RCC_OscConfig+0x1b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801334c:	f7fd fefa 	bl	8011144 <HAL_GetTick>
 8013350:	1b80      	subs	r0, r0, r6
 8013352:	2864      	cmp	r0, #100	; 0x64
 8013354:	d900      	bls.n	8013358 <HAL_RCC_OscConfig+0x1b8>
 8013356:	e091      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013358:	6823      	ldr	r3, [r4, #0]
 801335a:	422b      	tst	r3, r5
 801335c:	d1f6      	bne.n	801334c <HAL_RCC_OscConfig+0x1ac>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 801335e:	2000      	movs	r0, #0
 8013360:	e08d      	b.n	801347e <HAL_RCC_OscConfig+0x2de>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013362:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8013364:	4d57      	ldr	r5, [pc, #348]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013366:	2b00      	cmp	r3, #0
 8013368:	d100      	bne.n	801336c <HAL_RCC_OscConfig+0x1cc>
 801336a:	e08c      	b.n	8013486 <HAL_RCC_OscConfig+0x2e6>
      __HAL_RCC_LSI_ENABLE();
 801336c:	2201      	movs	r2, #1
 801336e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013370:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8013372:	4313      	orrs	r3, r2
 8013374:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8013376:	f7fd fee5 	bl	8011144 <HAL_GetTick>
 801337a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801337c:	e004      	b.n	8013388 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801337e:	f7fd fee1 	bl	8011144 <HAL_GetTick>
 8013382:	1b80      	subs	r0, r0, r6
 8013384:	2864      	cmp	r0, #100	; 0x64
 8013386:	d879      	bhi.n	801347c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013388:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801338a:	421f      	tst	r7, r3
 801338c:	d0f7      	beq.n	801337e <HAL_RCC_OscConfig+0x1de>
 801338e:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013390:	075a      	lsls	r2, r3, #29
 8013392:	d589      	bpl.n	80132a8 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 8013394:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8013396:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8013398:	4a4a      	ldr	r2, [pc, #296]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 801339a:	0540      	lsls	r0, r0, #21
 801339c:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801339e:	4d4d      	ldr	r5, [pc, #308]	; (80134d4 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80133a0:	4301      	orrs	r1, r0
 80133a2:	61d1      	str	r1, [r2, #28]
 80133a4:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80133a6:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80133a8:	4003      	ands	r3, r0
 80133aa:	9301      	str	r3, [sp, #4]
 80133ac:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80133ae:	682b      	ldr	r3, [r5, #0]
 80133b0:	4333      	orrs	r3, r6
 80133b2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80133b4:	f7fd fec6 	bl	8011144 <HAL_GetTick>
 80133b8:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80133ba:	e004      	b.n	80133c6 <HAL_RCC_OscConfig+0x226>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80133bc:	f7fd fec2 	bl	8011144 <HAL_GetTick>
 80133c0:	1bc0      	subs	r0, r0, r7
 80133c2:	2864      	cmp	r0, #100	; 0x64
 80133c4:	d85a      	bhi.n	801347c <HAL_RCC_OscConfig+0x2dc>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80133c6:	682b      	ldr	r3, [r5, #0]
 80133c8:	4233      	tst	r3, r6
 80133ca:	d0f7      	beq.n	80133bc <HAL_RCC_OscConfig+0x21c>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80133cc:	2201      	movs	r2, #1
 80133ce:	4d3d      	ldr	r5, [pc, #244]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80133d0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80133d2:	6a2b      	ldr	r3, [r5, #32]
 80133d4:	4393      	bics	r3, r2
 80133d6:	622b      	str	r3, [r5, #32]
 80133d8:	6a2b      	ldr	r3, [r5, #32]
 80133da:	3203      	adds	r2, #3
 80133dc:	4393      	bics	r3, r2
 80133de:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 80133e0:	f7fd feb0 	bl	8011144 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80133e4:	4b3c      	ldr	r3, [pc, #240]	; (80134d8 <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 80133e6:	0006      	movs	r6, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80133e8:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80133ea:	e004      	b.n	80133f6 <HAL_RCC_OscConfig+0x256>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80133ec:	f7fd feaa 	bl	8011144 <HAL_GetTick>
 80133f0:	1b80      	subs	r0, r0, r6
 80133f2:	4540      	cmp	r0, r8
 80133f4:	d842      	bhi.n	801347c <HAL_RCC_OscConfig+0x2dc>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80133f6:	6a2b      	ldr	r3, [r5, #32]
 80133f8:	421f      	tst	r7, r3
 80133fa:	d1f7      	bne.n	80133ec <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80133fc:	68a3      	ldr	r3, [r4, #8]
 80133fe:	2b01      	cmp	r3, #1
 8013400:	d100      	bne.n	8013404 <HAL_RCC_OscConfig+0x264>
 8013402:	e156      	b.n	80136b2 <HAL_RCC_OscConfig+0x512>
 8013404:	2b00      	cmp	r3, #0
 8013406:	d100      	bne.n	801340a <HAL_RCC_OscConfig+0x26a>
 8013408:	e138      	b.n	801367c <HAL_RCC_OscConfig+0x4dc>
 801340a:	2b05      	cmp	r3, #5
 801340c:	d100      	bne.n	8013410 <HAL_RCC_OscConfig+0x270>
 801340e:	e154      	b.n	80136ba <HAL_RCC_OscConfig+0x51a>
 8013410:	2201      	movs	r2, #1
 8013412:	6a2b      	ldr	r3, [r5, #32]
 8013414:	4393      	bics	r3, r2
 8013416:	622b      	str	r3, [r5, #32]
 8013418:	6a2b      	ldr	r3, [r5, #32]
 801341a:	3203      	adds	r2, #3
 801341c:	4393      	bics	r3, r2
 801341e:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8013420:	f7fd fe90 	bl	8011144 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013424:	4b2c      	ldr	r3, [pc, #176]	; (80134d8 <HAL_RCC_OscConfig+0x338>)
      tickstart = HAL_GetTick();
 8013426:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013428:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801342a:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801342c:	4f25      	ldr	r7, [pc, #148]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 801342e:	e004      	b.n	801343a <HAL_RCC_OscConfig+0x29a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013430:	f7fd fe88 	bl	8011144 <HAL_GetTick>
 8013434:	1b40      	subs	r0, r0, r5
 8013436:	4540      	cmp	r0, r8
 8013438:	d820      	bhi.n	801347c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801343a:	6a3b      	ldr	r3, [r7, #32]
 801343c:	421e      	tst	r6, r3
 801343e:	d0f7      	beq.n	8013430 <HAL_RCC_OscConfig+0x290>
 8013440:	6823      	ldr	r3, [r4, #0]
 8013442:	e731      	b.n	80132a8 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8013444:	684a      	ldr	r2, [r1, #4]
 8013446:	21c0      	movs	r1, #192	; 0xc0
 8013448:	0249      	lsls	r1, r1, #9
 801344a:	400a      	ands	r2, r1
 801344c:	2180      	movs	r1, #128	; 0x80
 801344e:	0209      	lsls	r1, r1, #8
 8013450:	428a      	cmp	r2, r1
 8013452:	d000      	beq.n	8013456 <HAL_RCC_OscConfig+0x2b6>
 8013454:	e705      	b.n	8013262 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013456:	4a1b      	ldr	r2, [pc, #108]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 8013458:	6812      	ldr	r2, [r2, #0]
 801345a:	0792      	lsls	r2, r2, #30
 801345c:	d526      	bpl.n	80134ac <HAL_RCC_OscConfig+0x30c>
 801345e:	68e2      	ldr	r2, [r4, #12]
 8013460:	2a01      	cmp	r2, #1
 8013462:	d023      	beq.n	80134ac <HAL_RCC_OscConfig+0x30c>
        return HAL_ERROR;
 8013464:	2001      	movs	r0, #1
 8013466:	e00a      	b.n	801347e <HAL_RCC_OscConfig+0x2de>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013468:	4a16      	ldr	r2, [pc, #88]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 801346a:	6812      	ldr	r2, [r2, #0]
 801346c:	0392      	lsls	r2, r2, #14
 801346e:	d400      	bmi.n	8013472 <HAL_RCC_OscConfig+0x2d2>
 8013470:	e6ea      	b.n	8013248 <HAL_RCC_OscConfig+0xa8>
 8013472:	6862      	ldr	r2, [r4, #4]
 8013474:	2a00      	cmp	r2, #0
 8013476:	d000      	beq.n	801347a <HAL_RCC_OscConfig+0x2da>
 8013478:	e6e6      	b.n	8013248 <HAL_RCC_OscConfig+0xa8>
 801347a:	e7f3      	b.n	8013464 <HAL_RCC_OscConfig+0x2c4>
          return HAL_TIMEOUT;
 801347c:	2003      	movs	r0, #3
}
 801347e:	b002      	add	sp, #8
 8013480:	bc80      	pop	{r7}
 8013482:	46b8      	mov	r8, r7
 8013484:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8013486:	2201      	movs	r2, #1
 8013488:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801348a:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 801348c:	4393      	bics	r3, r2
 801348e:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8013490:	f7fd fe58 	bl	8011144 <HAL_GetTick>
 8013494:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013496:	e004      	b.n	80134a2 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013498:	f7fd fe54 	bl	8011144 <HAL_GetTick>
 801349c:	1b80      	subs	r0, r0, r6
 801349e:	2864      	cmp	r0, #100	; 0x64
 80134a0:	d8ec      	bhi.n	801347c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80134a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80134a4:	421f      	tst	r7, r3
 80134a6:	d1f7      	bne.n	8013498 <HAL_RCC_OscConfig+0x2f8>
 80134a8:	6823      	ldr	r3, [r4, #0]
 80134aa:	e771      	b.n	8013390 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80134ac:	25f8      	movs	r5, #248	; 0xf8
 80134ae:	4805      	ldr	r0, [pc, #20]	; (80134c4 <HAL_RCC_OscConfig+0x324>)
 80134b0:	6922      	ldr	r2, [r4, #16]
 80134b2:	6801      	ldr	r1, [r0, #0]
 80134b4:	00d2      	lsls	r2, r2, #3
 80134b6:	43a9      	bics	r1, r5
 80134b8:	430a      	orrs	r2, r1
 80134ba:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80134bc:	071a      	lsls	r2, r3, #28
 80134be:	d400      	bmi.n	80134c2 <HAL_RCC_OscConfig+0x322>
 80134c0:	e6f0      	b.n	80132a4 <HAL_RCC_OscConfig+0x104>
 80134c2:	e74e      	b.n	8013362 <HAL_RCC_OscConfig+0x1c2>
 80134c4:	40021000 	.word	0x40021000
 80134c8:	fffeffff 	.word	0xfffeffff
 80134cc:	fffbffff 	.word	0xfffbffff
 80134d0:	feffffff 	.word	0xfeffffff
 80134d4:	40007000 	.word	0x40007000
 80134d8:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 80134dc:	2201      	movs	r2, #1
 80134de:	4d7b      	ldr	r5, [pc, #492]	; (80136cc <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80134e0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80134e2:	682b      	ldr	r3, [r5, #0]
 80134e4:	4393      	bics	r3, r2
 80134e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80134e8:	f7fd fe2c 	bl	8011144 <HAL_GetTick>
 80134ec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80134ee:	e004      	b.n	80134fa <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80134f0:	f7fd fe28 	bl	8011144 <HAL_GetTick>
 80134f4:	1b80      	subs	r0, r0, r6
 80134f6:	2864      	cmp	r0, #100	; 0x64
 80134f8:	d8c0      	bhi.n	801347c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80134fa:	682b      	ldr	r3, [r5, #0]
 80134fc:	421f      	tst	r7, r3
 80134fe:	d1f7      	bne.n	80134f0 <HAL_RCC_OscConfig+0x350>
 8013500:	6823      	ldr	r3, [r4, #0]
 8013502:	e6cd      	b.n	80132a0 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 8013504:	2204      	movs	r2, #4
 8013506:	4d71      	ldr	r5, [pc, #452]	; (80136cc <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8013508:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 801350a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801350c:	4313      	orrs	r3, r2
 801350e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8013510:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013512:	3a03      	subs	r2, #3
 8013514:	4393      	bics	r3, r2
 8013516:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8013518:	f7fd fe14 	bl	8011144 <HAL_GetTick>
 801351c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801351e:	e004      	b.n	801352a <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8013520:	f7fd fe10 	bl	8011144 <HAL_GetTick>
 8013524:	1b80      	subs	r0, r0, r6
 8013526:	2864      	cmp	r0, #100	; 0x64
 8013528:	d8a8      	bhi.n	801347c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801352a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801352c:	421f      	tst	r7, r3
 801352e:	d1f7      	bne.n	8013520 <HAL_RCC_OscConfig+0x380>
 8013530:	6823      	ldr	r3, [r4, #0]
 8013532:	e6ce      	b.n	80132d2 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013534:	2380      	movs	r3, #128	; 0x80
 8013536:	682a      	ldr	r2, [r5, #0]
 8013538:	02db      	lsls	r3, r3, #11
 801353a:	4313      	orrs	r3, r2
 801353c:	602b      	str	r3, [r5, #0]
 801353e:	2380      	movs	r3, #128	; 0x80
 8013540:	682a      	ldr	r2, [r5, #0]
 8013542:	025b      	lsls	r3, r3, #9
 8013544:	4313      	orrs	r3, r2
 8013546:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8013548:	f7fd fdfc 	bl	8011144 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801354c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 801354e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013550:	4f5e      	ldr	r7, [pc, #376]	; (80136cc <HAL_RCC_OscConfig+0x52c>)
 8013552:	02b6      	lsls	r6, r6, #10
 8013554:	e005      	b.n	8013562 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013556:	f7fd fdf5 	bl	8011144 <HAL_GetTick>
 801355a:	1b40      	subs	r0, r0, r5
 801355c:	2864      	cmp	r0, #100	; 0x64
 801355e:	d900      	bls.n	8013562 <HAL_RCC_OscConfig+0x3c2>
 8013560:	e78c      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	4233      	tst	r3, r6
 8013566:	d0f6      	beq.n	8013556 <HAL_RCC_OscConfig+0x3b6>
 8013568:	6823      	ldr	r3, [r4, #0]
 801356a:	e66d      	b.n	8013248 <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801356c:	22c0      	movs	r2, #192	; 0xc0
 801356e:	684b      	ldr	r3, [r1, #4]
 8013570:	0252      	lsls	r2, r2, #9
 8013572:	4013      	ands	r3, r2
 8013574:	4293      	cmp	r3, r2
 8013576:	d000      	beq.n	801357a <HAL_RCC_OscConfig+0x3da>
 8013578:	e6b9      	b.n	80132ee <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801357a:	4b54      	ldr	r3, [pc, #336]	; (80136cc <HAL_RCC_OscConfig+0x52c>)
 801357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801357e:	03db      	lsls	r3, r3, #15
 8013580:	d400      	bmi.n	8013584 <HAL_RCC_OscConfig+0x3e4>
 8013582:	e6cb      	b.n	801331c <HAL_RCC_OscConfig+0x17c>
 8013584:	69e3      	ldr	r3, [r4, #28]
 8013586:	2b01      	cmp	r3, #1
 8013588:	d100      	bne.n	801358c <HAL_RCC_OscConfig+0x3ec>
 801358a:	e6c7      	b.n	801331c <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 801358c:	2001      	movs	r0, #1
 801358e:	e776      	b.n	801347e <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013590:	2b05      	cmp	r3, #5
 8013592:	d0cf      	beq.n	8013534 <HAL_RCC_OscConfig+0x394>
 8013594:	682b      	ldr	r3, [r5, #0]
 8013596:	4a4e      	ldr	r2, [pc, #312]	; (80136d0 <HAL_RCC_OscConfig+0x530>)
 8013598:	4013      	ands	r3, r2
 801359a:	602b      	str	r3, [r5, #0]
 801359c:	682b      	ldr	r3, [r5, #0]
 801359e:	4a4d      	ldr	r2, [pc, #308]	; (80136d4 <HAL_RCC_OscConfig+0x534>)
 80135a0:	4013      	ands	r3, r2
 80135a2:	602b      	str	r3, [r5, #0]
 80135a4:	e7d0      	b.n	8013548 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 80135a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80135a8:	4a49      	ldr	r2, [pc, #292]	; (80136d0 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80135aa:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80135ac:	4013      	ands	r3, r2
 80135ae:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80135b0:	f7fd fdc8 	bl	8011144 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80135b4:	027f      	lsls	r7, r7, #9
        tickstart = HAL_GetTick();
 80135b6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80135b8:	e005      	b.n	80135c6 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80135ba:	f7fd fdc3 	bl	8011144 <HAL_GetTick>
 80135be:	1b80      	subs	r0, r0, r6
 80135c0:	2864      	cmp	r0, #100	; 0x64
 80135c2:	d900      	bls.n	80135c6 <HAL_RCC_OscConfig+0x426>
 80135c4:	e75a      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80135c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80135c8:	423b      	tst	r3, r7
 80135ca:	d1f6      	bne.n	80135ba <HAL_RCC_OscConfig+0x41a>
 80135cc:	e6a6      	b.n	801331c <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 80135ce:	2104      	movs	r1, #4
 80135d0:	4e3e      	ldr	r6, [pc, #248]	; (80136cc <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80135d2:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80135d4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80135d6:	430b      	orrs	r3, r1
 80135d8:	6373      	str	r3, [r6, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80135da:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80135dc:	431a      	orrs	r2, r3
 80135de:	6372      	str	r2, [r6, #52]	; 0x34
      tickstart = HAL_GetTick();
 80135e0:	f7fd fdb0 	bl	8011144 <HAL_GetTick>
 80135e4:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80135e6:	e005      	b.n	80135f4 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80135e8:	f7fd fdac 	bl	8011144 <HAL_GetTick>
 80135ec:	1b40      	subs	r0, r0, r5
 80135ee:	2864      	cmp	r0, #100	; 0x64
 80135f0:	d900      	bls.n	80135f4 <HAL_RCC_OscConfig+0x454>
 80135f2:	e743      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80135f4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80135f6:	421f      	tst	r7, r3
 80135f8:	d0f6      	beq.n	80135e8 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80135fa:	21f8      	movs	r1, #248	; 0xf8
 80135fc:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80135fe:	69a3      	ldr	r3, [r4, #24]
 8013600:	438a      	bics	r2, r1
 8013602:	00db      	lsls	r3, r3, #3
 8013604:	4313      	orrs	r3, r2
 8013606:	6373      	str	r3, [r6, #52]	; 0x34
 8013608:	6823      	ldr	r3, [r4, #0]
 801360a:	e662      	b.n	80132d2 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 801360c:	682b      	ldr	r3, [r5, #0]
 801360e:	4a32      	ldr	r2, [pc, #200]	; (80136d8 <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013610:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8013612:	4013      	ands	r3, r2
 8013614:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8013616:	f7fd fd95 	bl	8011144 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801361a:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 801361c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801361e:	e005      	b.n	801362c <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013620:	f7fd fd90 	bl	8011144 <HAL_GetTick>
 8013624:	1b80      	subs	r0, r0, r6
 8013626:	2864      	cmp	r0, #100	; 0x64
 8013628:	d900      	bls.n	801362c <HAL_RCC_OscConfig+0x48c>
 801362a:	e727      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801362c:	682b      	ldr	r3, [r5, #0]
 801362e:	423b      	tst	r3, r7
 8013630:	d1f6      	bne.n	8013620 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013632:	220f      	movs	r2, #15
 8013634:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8013636:	4e25      	ldr	r6, [pc, #148]	; (80136cc <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013638:	4393      	bics	r3, r2
 801363a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801363c:	4313      	orrs	r3, r2
 801363e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8013640:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013644:	686a      	ldr	r2, [r5, #4]
 8013646:	430b      	orrs	r3, r1
 8013648:	4924      	ldr	r1, [pc, #144]	; (80136dc <HAL_RCC_OscConfig+0x53c>)
 801364a:	400a      	ands	r2, r1
 801364c:	4313      	orrs	r3, r2
 801364e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8013650:	2380      	movs	r3, #128	; 0x80
 8013652:	682a      	ldr	r2, [r5, #0]
 8013654:	045b      	lsls	r3, r3, #17
 8013656:	4313      	orrs	r3, r2
 8013658:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801365a:	f7fd fd73 	bl	8011144 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801365e:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8013660:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8013662:	04ad      	lsls	r5, r5, #18
 8013664:	e005      	b.n	8013672 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013666:	f7fd fd6d 	bl	8011144 <HAL_GetTick>
 801366a:	1b00      	subs	r0, r0, r4
 801366c:	2864      	cmp	r0, #100	; 0x64
 801366e:	d900      	bls.n	8013672 <HAL_RCC_OscConfig+0x4d2>
 8013670:	e704      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8013672:	6833      	ldr	r3, [r6, #0]
 8013674:	422b      	tst	r3, r5
 8013676:	d0f6      	beq.n	8013666 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8013678:	2000      	movs	r0, #0
 801367a:	e700      	b.n	801347e <HAL_RCC_OscConfig+0x2de>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801367c:	2201      	movs	r2, #1
 801367e:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013680:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013682:	4393      	bics	r3, r2
 8013684:	622b      	str	r3, [r5, #32]
 8013686:	6a2b      	ldr	r3, [r5, #32]
 8013688:	3203      	adds	r2, #3
 801368a:	4393      	bics	r3, r2
 801368c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 801368e:	f7fd fd59 	bl	8011144 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013692:	4b13      	ldr	r3, [pc, #76]	; (80136e0 <HAL_RCC_OscConfig+0x540>)
      tickstart = HAL_GetTick();
 8013694:	0005      	movs	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013696:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013698:	4f0c      	ldr	r7, [pc, #48]	; (80136cc <HAL_RCC_OscConfig+0x52c>)
 801369a:	e005      	b.n	80136a8 <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801369c:	f7fd fd52 	bl	8011144 <HAL_GetTick>
 80136a0:	1b40      	subs	r0, r0, r5
 80136a2:	4540      	cmp	r0, r8
 80136a4:	d900      	bls.n	80136a8 <HAL_RCC_OscConfig+0x508>
 80136a6:	e6e9      	b.n	801347c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80136a8:	6a3b      	ldr	r3, [r7, #32]
 80136aa:	421e      	tst	r6, r3
 80136ac:	d1f6      	bne.n	801369c <HAL_RCC_OscConfig+0x4fc>
 80136ae:	6823      	ldr	r3, [r4, #0]
 80136b0:	e5fa      	b.n	80132a8 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80136b2:	6a2a      	ldr	r2, [r5, #32]
 80136b4:	4313      	orrs	r3, r2
 80136b6:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80136b8:	e6b2      	b.n	8013420 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80136ba:	2204      	movs	r2, #4
 80136bc:	6a2b      	ldr	r3, [r5, #32]
 80136be:	4313      	orrs	r3, r2
 80136c0:	622b      	str	r3, [r5, #32]
 80136c2:	6a2b      	ldr	r3, [r5, #32]
 80136c4:	3a03      	subs	r2, #3
 80136c6:	4313      	orrs	r3, r2
 80136c8:	622b      	str	r3, [r5, #32]
 80136ca:	e6a9      	b.n	8013420 <HAL_RCC_OscConfig+0x280>
 80136cc:	40021000 	.word	0x40021000
 80136d0:	fffeffff 	.word	0xfffeffff
 80136d4:	fffbffff 	.word	0xfffbffff
 80136d8:	feffffff 	.word	0xfeffffff
 80136dc:	ffc27fff 	.word	0xffc27fff
 80136e0:	00001388 	.word	0x00001388

080136e4 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80136e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136e6:	46ce      	mov	lr, r9
 80136e8:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80136ea:	2301      	movs	r3, #1
{
 80136ec:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80136ee:	4985      	ldr	r1, [pc, #532]	; (8013904 <HAL_RCC_ClockConfig+0x220>)
{
 80136f0:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80136f2:	680a      	ldr	r2, [r1, #0]
{
 80136f4:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80136f6:	401a      	ands	r2, r3
 80136f8:	42a2      	cmp	r2, r4
 80136fa:	d20c      	bcs.n	8013716 <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80136fc:	680a      	ldr	r2, [r1, #0]
 80136fe:	439a      	bics	r2, r3
 8013700:	4322      	orrs	r2, r4
 8013702:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8013704:	680a      	ldr	r2, [r1, #0]
 8013706:	4013      	ands	r3, r2
 8013708:	42a3      	cmp	r3, r4
 801370a:	d059      	beq.n	80137c0 <HAL_RCC_ClockConfig+0xdc>
    {
      return HAL_ERROR;
 801370c:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 801370e:	bcc0      	pop	{r6, r7}
 8013710:	46b9      	mov	r9, r7
 8013712:	46b0      	mov	r8, r6
 8013714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013716:	6803      	ldr	r3, [r0, #0]
 8013718:	079a      	lsls	r2, r3, #30
 801371a:	d506      	bpl.n	801372a <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801371c:	20f0      	movs	r0, #240	; 0xf0
 801371e:	497a      	ldr	r1, [pc, #488]	; (8013908 <HAL_RCC_ClockConfig+0x224>)
 8013720:	684a      	ldr	r2, [r1, #4]
 8013722:	4382      	bics	r2, r0
 8013724:	68a8      	ldr	r0, [r5, #8]
 8013726:	4302      	orrs	r2, r0
 8013728:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801372a:	07db      	lsls	r3, r3, #31
 801372c:	d52f      	bpl.n	801378e <HAL_RCC_ClockConfig+0xaa>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801372e:	686a      	ldr	r2, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013730:	4b75      	ldr	r3, [pc, #468]	; (8013908 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013732:	2a01      	cmp	r2, #1
 8013734:	d008      	beq.n	8013748 <HAL_RCC_ClockConfig+0x64>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013736:	2a02      	cmp	r2, #2
 8013738:	d077      	beq.n	801382a <HAL_RCC_ClockConfig+0x146>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801373a:	2a03      	cmp	r2, #3
 801373c:	d100      	bne.n	8013740 <HAL_RCC_ClockConfig+0x5c>
 801373e:	e0a1      	b.n	8013884 <HAL_RCC_ClockConfig+0x1a0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	079b      	lsls	r3, r3, #30
 8013744:	d403      	bmi.n	801374e <HAL_RCC_ClockConfig+0x6a>
 8013746:	e7e1      	b.n	801370c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	039b      	lsls	r3, r3, #14
 801374c:	d5de      	bpl.n	801370c <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801374e:	2103      	movs	r1, #3
 8013750:	4e6d      	ldr	r6, [pc, #436]	; (8013908 <HAL_RCC_ClockConfig+0x224>)
 8013752:	6873      	ldr	r3, [r6, #4]
 8013754:	438b      	bics	r3, r1
 8013756:	4313      	orrs	r3, r2
 8013758:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 801375a:	f7fd fcf3 	bl	8011144 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801375e:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8013760:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013762:	2b01      	cmp	r3, #1
 8013764:	d065      	beq.n	8013832 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013766:	2b02      	cmp	r3, #2
 8013768:	d100      	bne.n	801376c <HAL_RCC_ClockConfig+0x88>
 801376a:	e090      	b.n	801388e <HAL_RCC_ClockConfig+0x1aa>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801376c:	2b03      	cmp	r3, #3
 801376e:	d172      	bne.n	8013856 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013770:	3309      	adds	r3, #9
 8013772:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013774:	4b65      	ldr	r3, [pc, #404]	; (801390c <HAL_RCC_ClockConfig+0x228>)
 8013776:	4699      	mov	r9, r3
 8013778:	e004      	b.n	8013784 <HAL_RCC_ClockConfig+0xa0>
 801377a:	f7fd fce3 	bl	8011144 <HAL_GetTick>
 801377e:	1bc0      	subs	r0, r0, r7
 8013780:	4548      	cmp	r0, r9
 8013782:	d866      	bhi.n	8013852 <HAL_RCC_ClockConfig+0x16e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013784:	4642      	mov	r2, r8
 8013786:	6873      	ldr	r3, [r6, #4]
 8013788:	4013      	ands	r3, r2
 801378a:	2b0c      	cmp	r3, #12
 801378c:	d1f5      	bne.n	801377a <HAL_RCC_ClockConfig+0x96>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801378e:	2201      	movs	r2, #1
 8013790:	495c      	ldr	r1, [pc, #368]	; (8013904 <HAL_RCC_ClockConfig+0x220>)
 8013792:	680b      	ldr	r3, [r1, #0]
 8013794:	4393      	bics	r3, r2
 8013796:	4323      	orrs	r3, r4
 8013798:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801379a:	680b      	ldr	r3, [r1, #0]
 801379c:	401a      	ands	r2, r3
 801379e:	42a2      	cmp	r2, r4
 80137a0:	d1b4      	bne.n	801370c <HAL_RCC_ClockConfig+0x28>
 80137a2:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80137a4:	075b      	lsls	r3, r3, #29
 80137a6:	d506      	bpl.n	80137b6 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80137a8:	4a57      	ldr	r2, [pc, #348]	; (8013908 <HAL_RCC_ClockConfig+0x224>)
 80137aa:	4959      	ldr	r1, [pc, #356]	; (8013910 <HAL_RCC_ClockConfig+0x22c>)
 80137ac:	6853      	ldr	r3, [r2, #4]
 80137ae:	400b      	ands	r3, r1
 80137b0:	68e9      	ldr	r1, [r5, #12]
 80137b2:	430b      	orrs	r3, r1
 80137b4:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 80137b6:	2000      	movs	r0, #0
 80137b8:	f7fd fc9a 	bl	80110f0 <HAL_InitTick>
  return HAL_OK;
 80137bc:	2000      	movs	r0, #0
 80137be:	e7a6      	b.n	801370e <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80137c0:	6803      	ldr	r3, [r0, #0]
 80137c2:	079a      	lsls	r2, r3, #30
 80137c4:	d506      	bpl.n	80137d4 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80137c6:	20f0      	movs	r0, #240	; 0xf0
 80137c8:	494f      	ldr	r1, [pc, #316]	; (8013908 <HAL_RCC_ClockConfig+0x224>)
 80137ca:	684a      	ldr	r2, [r1, #4]
 80137cc:	4382      	bics	r2, r0
 80137ce:	68a8      	ldr	r0, [r5, #8]
 80137d0:	4302      	orrs	r2, r0
 80137d2:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80137d4:	07da      	lsls	r2, r3, #31
 80137d6:	d5e5      	bpl.n	80137a4 <HAL_RCC_ClockConfig+0xc0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80137d8:	686a      	ldr	r2, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80137da:	4b4b      	ldr	r3, [pc, #300]	; (8013908 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80137dc:	2a01      	cmp	r2, #1
 80137de:	d04d      	beq.n	801387c <HAL_RCC_ClockConfig+0x198>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80137e0:	2a02      	cmp	r2, #2
 80137e2:	d064      	beq.n	80138ae <HAL_RCC_ClockConfig+0x1ca>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80137e4:	2a03      	cmp	r2, #3
 80137e6:	d045      	beq.n	8013874 <HAL_RCC_ClockConfig+0x190>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	079b      	lsls	r3, r3, #30
 80137ec:	d400      	bmi.n	80137f0 <HAL_RCC_ClockConfig+0x10c>
 80137ee:	e78d      	b.n	801370c <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80137f0:	2103      	movs	r1, #3
 80137f2:	4c45      	ldr	r4, [pc, #276]	; (8013908 <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80137f4:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80137f6:	6863      	ldr	r3, [r4, #4]
 80137f8:	438b      	bics	r3, r1
 80137fa:	4313      	orrs	r3, r2
 80137fc:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 80137fe:	f7fd fca1 	bl	8011144 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013802:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8013804:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013806:	2b01      	cmp	r3, #1
 8013808:	d055      	beq.n	80138b6 <HAL_RCC_ClockConfig+0x1d2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801380a:	2b02      	cmp	r3, #2
 801380c:	d060      	beq.n	80138d0 <HAL_RCC_ClockConfig+0x1ec>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801380e:	2b03      	cmp	r3, #3
 8013810:	d06b      	beq.n	80138ea <HAL_RCC_ClockConfig+0x206>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013812:	4b3e      	ldr	r3, [pc, #248]	; (801390c <HAL_RCC_ClockConfig+0x228>)
 8013814:	4698      	mov	r8, r3
 8013816:	e004      	b.n	8013822 <HAL_RCC_ClockConfig+0x13e>
 8013818:	f7fd fc94 	bl	8011144 <HAL_GetTick>
 801381c:	1b80      	subs	r0, r0, r6
 801381e:	4540      	cmp	r0, r8
 8013820:	d817      	bhi.n	8013852 <HAL_RCC_ClockConfig+0x16e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013822:	6863      	ldr	r3, [r4, #4]
 8013824:	421f      	tst	r7, r3
 8013826:	d1f7      	bne.n	8013818 <HAL_RCC_ClockConfig+0x134>
 8013828:	e7bb      	b.n	80137a2 <HAL_RCC_ClockConfig+0xbe>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	019b      	lsls	r3, r3, #6
 801382e:	d48e      	bmi.n	801374e <HAL_RCC_ClockConfig+0x6a>
 8013830:	e76c      	b.n	801370c <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013832:	330b      	adds	r3, #11
 8013834:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013836:	4b35      	ldr	r3, [pc, #212]	; (801390c <HAL_RCC_ClockConfig+0x228>)
 8013838:	4699      	mov	r9, r3
 801383a:	e004      	b.n	8013846 <HAL_RCC_ClockConfig+0x162>
 801383c:	f7fd fc82 	bl	8011144 <HAL_GetTick>
 8013840:	1bc0      	subs	r0, r0, r7
 8013842:	4548      	cmp	r0, r9
 8013844:	d805      	bhi.n	8013852 <HAL_RCC_ClockConfig+0x16e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013846:	4642      	mov	r2, r8
 8013848:	6873      	ldr	r3, [r6, #4]
 801384a:	4013      	ands	r3, r2
 801384c:	2b04      	cmp	r3, #4
 801384e:	d1f5      	bne.n	801383c <HAL_RCC_ClockConfig+0x158>
 8013850:	e79d      	b.n	801378e <HAL_RCC_ClockConfig+0xaa>
            return HAL_TIMEOUT;
 8013852:	2003      	movs	r0, #3
 8013854:	e75b      	b.n	801370e <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013856:	230c      	movs	r3, #12
 8013858:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801385a:	4b2c      	ldr	r3, [pc, #176]	; (801390c <HAL_RCC_ClockConfig+0x228>)
 801385c:	4699      	mov	r9, r3
 801385e:	e004      	b.n	801386a <HAL_RCC_ClockConfig+0x186>
 8013860:	f7fd fc70 	bl	8011144 <HAL_GetTick>
 8013864:	1bc0      	subs	r0, r0, r7
 8013866:	4548      	cmp	r0, r9
 8013868:	d8f3      	bhi.n	8013852 <HAL_RCC_ClockConfig+0x16e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801386a:	4642      	mov	r2, r8
 801386c:	6873      	ldr	r3, [r6, #4]
 801386e:	421a      	tst	r2, r3
 8013870:	d1f6      	bne.n	8013860 <HAL_RCC_ClockConfig+0x17c>
 8013872:	e78c      	b.n	801378e <HAL_RCC_ClockConfig+0xaa>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013876:	03db      	lsls	r3, r3, #15
 8013878:	d4ba      	bmi.n	80137f0 <HAL_RCC_ClockConfig+0x10c>
 801387a:	e747      	b.n	801370c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	039b      	lsls	r3, r3, #14
 8013880:	d4b6      	bmi.n	80137f0 <HAL_RCC_ClockConfig+0x10c>
 8013882:	e743      	b.n	801370c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013886:	03db      	lsls	r3, r3, #15
 8013888:	d500      	bpl.n	801388c <HAL_RCC_ClockConfig+0x1a8>
 801388a:	e760      	b.n	801374e <HAL_RCC_ClockConfig+0x6a>
 801388c:	e73e      	b.n	801370c <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801388e:	330a      	adds	r3, #10
 8013890:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013892:	4b1e      	ldr	r3, [pc, #120]	; (801390c <HAL_RCC_ClockConfig+0x228>)
 8013894:	4699      	mov	r9, r3
 8013896:	e004      	b.n	80138a2 <HAL_RCC_ClockConfig+0x1be>
 8013898:	f7fd fc54 	bl	8011144 <HAL_GetTick>
 801389c:	1bc0      	subs	r0, r0, r7
 801389e:	4548      	cmp	r0, r9
 80138a0:	d8d7      	bhi.n	8013852 <HAL_RCC_ClockConfig+0x16e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80138a2:	4642      	mov	r2, r8
 80138a4:	6873      	ldr	r3, [r6, #4]
 80138a6:	4013      	ands	r3, r2
 80138a8:	2b08      	cmp	r3, #8
 80138aa:	d1f5      	bne.n	8013898 <HAL_RCC_ClockConfig+0x1b4>
 80138ac:	e76f      	b.n	801378e <HAL_RCC_ClockConfig+0xaa>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	019b      	lsls	r3, r3, #6
 80138b2:	d49d      	bmi.n	80137f0 <HAL_RCC_ClockConfig+0x10c>
 80138b4:	e72a      	b.n	801370c <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80138b6:	4b15      	ldr	r3, [pc, #84]	; (801390c <HAL_RCC_ClockConfig+0x228>)
 80138b8:	4698      	mov	r8, r3
 80138ba:	e004      	b.n	80138c6 <HAL_RCC_ClockConfig+0x1e2>
 80138bc:	f7fd fc42 	bl	8011144 <HAL_GetTick>
 80138c0:	1b80      	subs	r0, r0, r6
 80138c2:	4540      	cmp	r0, r8
 80138c4:	d8c5      	bhi.n	8013852 <HAL_RCC_ClockConfig+0x16e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80138c6:	6863      	ldr	r3, [r4, #4]
 80138c8:	403b      	ands	r3, r7
 80138ca:	2b04      	cmp	r3, #4
 80138cc:	d1f6      	bne.n	80138bc <HAL_RCC_ClockConfig+0x1d8>
 80138ce:	e768      	b.n	80137a2 <HAL_RCC_ClockConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80138d0:	4b0e      	ldr	r3, [pc, #56]	; (801390c <HAL_RCC_ClockConfig+0x228>)
 80138d2:	4698      	mov	r8, r3
 80138d4:	e004      	b.n	80138e0 <HAL_RCC_ClockConfig+0x1fc>
 80138d6:	f7fd fc35 	bl	8011144 <HAL_GetTick>
 80138da:	1b80      	subs	r0, r0, r6
 80138dc:	4540      	cmp	r0, r8
 80138de:	d8b8      	bhi.n	8013852 <HAL_RCC_ClockConfig+0x16e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80138e0:	6863      	ldr	r3, [r4, #4]
 80138e2:	403b      	ands	r3, r7
 80138e4:	2b08      	cmp	r3, #8
 80138e6:	d1f6      	bne.n	80138d6 <HAL_RCC_ClockConfig+0x1f2>
 80138e8:	e75b      	b.n	80137a2 <HAL_RCC_ClockConfig+0xbe>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80138ea:	4b08      	ldr	r3, [pc, #32]	; (801390c <HAL_RCC_ClockConfig+0x228>)
 80138ec:	4698      	mov	r8, r3
 80138ee:	e004      	b.n	80138fa <HAL_RCC_ClockConfig+0x216>
 80138f0:	f7fd fc28 	bl	8011144 <HAL_GetTick>
 80138f4:	1b80      	subs	r0, r0, r6
 80138f6:	4540      	cmp	r0, r8
 80138f8:	d8ab      	bhi.n	8013852 <HAL_RCC_ClockConfig+0x16e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80138fa:	6863      	ldr	r3, [r4, #4]
 80138fc:	403b      	ands	r3, r7
 80138fe:	2b0c      	cmp	r3, #12
 8013900:	d1f6      	bne.n	80138f0 <HAL_RCC_ClockConfig+0x20c>
 8013902:	e74e      	b.n	80137a2 <HAL_RCC_ClockConfig+0xbe>
 8013904:	40022000 	.word	0x40022000
 8013908:	40021000 	.word	0x40021000
 801390c:	00001388 	.word	0x00001388
 8013910:	fffff8ff 	.word	0xfffff8ff

08013914 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013914:	b570      	push	{r4, r5, r6, lr}
 8013916:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8013918:	4669      	mov	r1, sp
 801391a:	000a      	movs	r2, r1
 801391c:	4b1b      	ldr	r3, [pc, #108]	; (801398c <HAL_RCC_GetSysClockFreq+0x78>)
 801391e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8013920:	c231      	stmia	r2!, {r0, r4, r5}
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8013926:	aa04      	add	r2, sp, #16
 8013928:	0010      	movs	r0, r2
 801392a:	4b19      	ldr	r3, [pc, #100]	; (8013990 <HAL_RCC_GetSysClockFreq+0x7c>)
 801392c:	cb70      	ldmia	r3!, {r4, r5, r6}
 801392e:	c070      	stmia	r0!, {r4, r5, r6}
 8013930:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8013932:	4d18      	ldr	r5, [pc, #96]	; (8013994 <HAL_RCC_GetSysClockFreq+0x80>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8013934:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8013936:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8013938:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 801393a:	4018      	ands	r0, r3
 801393c:	2808      	cmp	r0, #8
 801393e:	d00a      	beq.n	8013956 <HAL_RCC_GetSysClockFreq+0x42>
 8013940:	380c      	subs	r0, #12
 8013942:	1e43      	subs	r3, r0, #1
 8013944:	4198      	sbcs	r0, r3
 8013946:	4b14      	ldr	r3, [pc, #80]	; (8013998 <HAL_RCC_GetSysClockFreq+0x84>)
 8013948:	4240      	negs	r0, r0
 801394a:	4018      	ands	r0, r3
 801394c:	4b13      	ldr	r3, [pc, #76]	; (801399c <HAL_RCC_GetSysClockFreq+0x88>)
 801394e:	469c      	mov	ip, r3
 8013950:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8013952:	b008      	add	sp, #32
 8013954:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8013956:	200f      	movs	r0, #15
 8013958:	0c9c      	lsrs	r4, r3, #18
 801395a:	4004      	ands	r4, r0
 801395c:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 801395e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8013960:	4008      	ands	r0, r1
 8013962:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8013964:	22c0      	movs	r2, #192	; 0xc0
 8013966:	2080      	movs	r0, #128	; 0x80
 8013968:	0252      	lsls	r2, r2, #9
 801396a:	4013      	ands	r3, r2
 801396c:	0240      	lsls	r0, r0, #9
 801396e:	4283      	cmp	r3, r0
 8013970:	d001      	beq.n	8013976 <HAL_RCC_GetSysClockFreq+0x62>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8013972:	4293      	cmp	r3, r2
 8013974:	d004      	beq.n	8013980 <HAL_RCC_GetSysClockFreq+0x6c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8013976:	480a      	ldr	r0, [pc, #40]	; (80139a0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8013978:	f7ec fbea 	bl	8000150 <__udivsi3>
 801397c:	4360      	muls	r0, r4
 801397e:	e7e8      	b.n	8013952 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8013980:	4806      	ldr	r0, [pc, #24]	; (801399c <HAL_RCC_GetSysClockFreq+0x88>)
 8013982:	f7ec fbe5 	bl	8000150 <__udivsi3>
 8013986:	4360      	muls	r0, r4
 8013988:	e7e3      	b.n	8013952 <HAL_RCC_GetSysClockFreq+0x3e>
 801398a:	46c0      	nop			; (mov r8, r8)
 801398c:	0801e514 	.word	0x0801e514
 8013990:	0801e528 	.word	0x0801e528
 8013994:	40021000 	.word	0x40021000
 8013998:	fd9da600 	.word	0xfd9da600
 801399c:	02dc6c00 	.word	0x02dc6c00
 80139a0:	007a1200 	.word	0x007a1200

080139a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80139a4:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80139a6:	f7ff ffb5 	bl	8013914 <HAL_RCC_GetSysClockFreq>
 80139aa:	4b05      	ldr	r3, [pc, #20]	; (80139c0 <HAL_RCC_GetHCLKFreq+0x1c>)
 80139ac:	4a05      	ldr	r2, [pc, #20]	; (80139c4 <HAL_RCC_GetHCLKFreq+0x20>)
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	061b      	lsls	r3, r3, #24
 80139b2:	0f1b      	lsrs	r3, r3, #28
 80139b4:	5cd3      	ldrb	r3, [r2, r3]
 80139b6:	40d8      	lsrs	r0, r3
 80139b8:	4b03      	ldr	r3, [pc, #12]	; (80139c8 <HAL_RCC_GetHCLKFreq+0x24>)
 80139ba:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80139bc:	bd10      	pop	{r4, pc}
 80139be:	46c0      	nop			; (mov r8, r8)
 80139c0:	40021000 	.word	0x40021000
 80139c4:	0801e53c 	.word	0x0801e53c
 80139c8:	20000120 	.word	0x20000120

080139cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80139cc:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80139ce:	f7ff ffa1 	bl	8013914 <HAL_RCC_GetSysClockFreq>
 80139d2:	4907      	ldr	r1, [pc, #28]	; (80139f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80139d4:	4a07      	ldr	r2, [pc, #28]	; (80139f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80139d6:	684b      	ldr	r3, [r1, #4]
 80139d8:	061b      	lsls	r3, r3, #24
 80139da:	0f1b      	lsrs	r3, r3, #28
 80139dc:	5cd3      	ldrb	r3, [r2, r3]
 80139de:	40d8      	lsrs	r0, r3
 80139e0:	4b05      	ldr	r3, [pc, #20]	; (80139f8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80139e2:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 80139e4:	684b      	ldr	r3, [r1, #4]
 80139e6:	055b      	lsls	r3, r3, #21
 80139e8:	0f5b      	lsrs	r3, r3, #29
 80139ea:	5cd3      	ldrb	r3, [r2, r3]
 80139ec:	40d8      	lsrs	r0, r3
}    
 80139ee:	bd10      	pop	{r4, pc}
 80139f0:	40021000 	.word	0x40021000
 80139f4:	0801e53c 	.word	0x0801e53c
 80139f8:	20000120 	.word	0x20000120

080139fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80139fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139fe:	46c6      	mov	lr, r8
 8013a00:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013a02:	6803      	ldr	r3, [r0, #0]
{
 8013a04:	0004      	movs	r4, r0
 8013a06:	b082      	sub	sp, #8
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013a08:	03da      	lsls	r2, r3, #15
 8013a0a:	d507      	bpl.n	8013a1c <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013a0c:	493e      	ldr	r1, [pc, #248]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8013a0e:	6840      	ldr	r0, [r0, #4]
 8013a10:	6a0a      	ldr	r2, [r1, #32]
 8013a12:	4042      	eors	r2, r0
 8013a14:	20c0      	movs	r0, #192	; 0xc0
 8013a16:	0080      	lsls	r0, r0, #2
 8013a18:	4202      	tst	r2, r0
 8013a1a:	d131      	bne.n	8013a80 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013a1c:	07da      	lsls	r2, r3, #31
 8013a1e:	d506      	bpl.n	8013a2e <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013a20:	2003      	movs	r0, #3
 8013a22:	4939      	ldr	r1, [pc, #228]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8013a24:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8013a26:	4382      	bics	r2, r0
 8013a28:	68a0      	ldr	r0, [r4, #8]
 8013a2a:	4302      	orrs	r2, r0
 8013a2c:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013a2e:	079a      	lsls	r2, r3, #30
 8013a30:	d506      	bpl.n	8013a40 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013a32:	4935      	ldr	r1, [pc, #212]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8013a34:	4835      	ldr	r0, [pc, #212]	; (8013b0c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8013a36:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8013a38:	4002      	ands	r2, r0
 8013a3a:	68e0      	ldr	r0, [r4, #12]
 8013a3c:	4302      	orrs	r2, r0
 8013a3e:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8013a40:	035a      	lsls	r2, r3, #13
 8013a42:	d506      	bpl.n	8013a52 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8013a44:	4930      	ldr	r1, [pc, #192]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8013a46:	4832      	ldr	r0, [pc, #200]	; (8013b10 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8013a48:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8013a4a:	4002      	ands	r2, r0
 8013a4c:	6920      	ldr	r0, [r4, #16]
 8013a4e:	4302      	orrs	r2, r0
 8013a50:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013a52:	069a      	lsls	r2, r3, #26
 8013a54:	d506      	bpl.n	8013a64 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013a56:	2010      	movs	r0, #16
 8013a58:	492b      	ldr	r1, [pc, #172]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8013a5a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8013a5c:	4382      	bics	r2, r0
 8013a5e:	6960      	ldr	r0, [r4, #20]
 8013a60:	4302      	orrs	r2, r0
 8013a62:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8013a64:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013a66:	055b      	lsls	r3, r3, #21
 8013a68:	d506      	bpl.n	8013a78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013a6a:	2140      	movs	r1, #64	; 0x40
 8013a6c:	4a26      	ldr	r2, [pc, #152]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8013a6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013a70:	438b      	bics	r3, r1
 8013a72:	69a1      	ldr	r1, [r4, #24]
 8013a74:	430b      	orrs	r3, r1
 8013a76:	6313      	str	r3, [r2, #48]	; 0x30
}
 8013a78:	b002      	add	sp, #8
 8013a7a:	bc80      	pop	{r7}
 8013a7c:	46b8      	mov	r8, r7
 8013a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8013a80:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013a82:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8013a84:	69ca      	ldr	r2, [r1, #28]
 8013a86:	0540      	lsls	r0, r0, #21
 8013a88:	4302      	orrs	r2, r0
 8013a8a:	61ca      	str	r2, [r1, #28]
 8013a8c:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013a8e:	4d21      	ldr	r5, [pc, #132]	; (8013b14 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8013a90:	4003      	ands	r3, r0
 8013a92:	9301      	str	r3, [sp, #4]
 8013a94:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013a96:	682b      	ldr	r3, [r5, #0]
 8013a98:	0076      	lsls	r6, r6, #1
 8013a9a:	4333      	orrs	r3, r6
 8013a9c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8013a9e:	f7fd fb51 	bl	8011144 <HAL_GetTick>
 8013aa2:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8013aa4:	e004      	b.n	8013ab0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013aa6:	f7fd fb4d 	bl	8011144 <HAL_GetTick>
 8013aaa:	1bc0      	subs	r0, r0, r7
 8013aac:	2864      	cmp	r0, #100	; 0x64
 8013aae:	d829      	bhi.n	8013b04 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8013ab0:	682b      	ldr	r3, [r5, #0]
 8013ab2:	4233      	tst	r3, r6
 8013ab4:	d0f7      	beq.n	8013aa6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 8013ab6:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013ab8:	4d13      	ldr	r5, [pc, #76]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8013aba:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013abc:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8013abe:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013ac0:	4b15      	ldr	r3, [pc, #84]	; (8013b18 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8013ac2:	4302      	orrs	r2, r0
 8013ac4:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013ac6:	6a2a      	ldr	r2, [r5, #32]
 8013ac8:	4814      	ldr	r0, [pc, #80]	; (8013b1c <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013aca:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013acc:	4002      	ands	r2, r0
 8013ace:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 8013ad0:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8013ad2:	078b      	lsls	r3, r1, #30
 8013ad4:	d408      	bmi.n	8013ae8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8013ad6:	4a0c      	ldr	r2, [pc, #48]	; (8013b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8013ad8:	490f      	ldr	r1, [pc, #60]	; (8013b18 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8013ada:	6a13      	ldr	r3, [r2, #32]
 8013adc:	400b      	ands	r3, r1
 8013ade:	6861      	ldr	r1, [r4, #4]
 8013ae0:	430b      	orrs	r3, r1
 8013ae2:	6213      	str	r3, [r2, #32]
 8013ae4:	6823      	ldr	r3, [r4, #0]
 8013ae6:	e799      	b.n	8013a1c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8013ae8:	f7fd fb2c 	bl	8011144 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013aec:	4b0c      	ldr	r3, [pc, #48]	; (8013b20 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8013aee:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013af0:	2702      	movs	r7, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013af2:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013af4:	6a2b      	ldr	r3, [r5, #32]
 8013af6:	421f      	tst	r7, r3
 8013af8:	d1ed      	bne.n	8013ad6 <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013afa:	f7fd fb23 	bl	8011144 <HAL_GetTick>
 8013afe:	1b80      	subs	r0, r0, r6
 8013b00:	4540      	cmp	r0, r8
 8013b02:	d9f7      	bls.n	8013af4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8013b04:	2003      	movs	r0, #3
 8013b06:	e7b7      	b.n	8013a78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8013b08:	40021000 	.word	0x40021000
 8013b0c:	fffcffff 	.word	0xfffcffff
 8013b10:	fff3ffff 	.word	0xfff3ffff
 8013b14:	40007000 	.word	0x40007000
 8013b18:	fffffcff 	.word	0xfffffcff
 8013b1c:	fffeffff 	.word	0xfffeffff
 8013b20:	00001388 	.word	0x00001388

08013b24 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8013b24:	4770      	bx	lr
 8013b26:	46c0      	nop			; (mov r8, r8)

08013b28 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013b28:	6803      	ldr	r3, [r0, #0]
{
 8013b2a:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013b2c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8013b2e:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013b30:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8013b32:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8013b34:	681c      	ldr	r4, [r3, #0]
 8013b36:	4b13      	ldr	r3, [pc, #76]	; (8013b84 <HAL_RTC_GetTime+0x5c>)
 8013b38:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8013b3a:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8013b3c:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8013b3e:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8013b40:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8013b42:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8013b44:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8013b46:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8013b48:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8013b4a:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8013b4c:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8013b4e:	2a00      	cmp	r2, #0
 8013b50:	d115      	bne.n	8013b7e <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8013b52:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013b54:	0900      	lsrs	r0, r0, #4
 8013b56:	0082      	lsls	r2, r0, #2
 8013b58:	1810      	adds	r0, r2, r0
 8013b5a:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8013b5c:	4035      	ands	r5, r6
 8013b5e:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013b60:	0918      	lsrs	r0, r3, #4
 8013b62:	0082      	lsls	r2, r0, #2
 8013b64:	1812      	adds	r2, r2, r0
 8013b66:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8013b68:	4033      	ands	r3, r6
 8013b6a:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013b6c:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8013b6e:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013b70:	0093      	lsls	r3, r2, #2
 8013b72:	189b      	adds	r3, r3, r2
 8013b74:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8013b76:	4034      	ands	r4, r6
 8013b78:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8013b7a:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8013b7c:	708c      	strb	r4, [r1, #2]
}
 8013b7e:	2000      	movs	r0, #0
 8013b80:	bd70      	pop	{r4, r5, r6, pc}
 8013b82:	46c0      	nop			; (mov r8, r8)
 8013b84:	007f7f7f 	.word	0x007f7f7f

08013b88 <HAL_RTC_GetDate>:
{
 8013b88:	b5f0      	push	{r4, r5, r6, r7, lr}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8013b8a:	241f      	movs	r4, #31
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8013b8c:	6803      	ldr	r3, [r0, #0]
 8013b8e:	4814      	ldr	r0, [pc, #80]	; (8013be0 <HAL_RTC_GetDate+0x58>)
 8013b90:	685b      	ldr	r3, [r3, #4]
 8013b92:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8013b94:	0a18      	lsrs	r0, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8013b96:	0c1f      	lsrs	r7, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8013b98:	b2c6      	uxtb	r6, r0
 8013b9a:	4020      	ands	r0, r4
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8013b9c:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8013b9e:	041b      	lsls	r3, r3, #16
 8013ba0:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8013ba2:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8013ba4:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8013ba6:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8013ba8:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8013baa:	2a00      	cmp	r2, #0
 8013bac:	d115      	bne.n	8013bda <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 8013bae:	250f      	movs	r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013bb0:	093b      	lsrs	r3, r7, #4
 8013bb2:	009a      	lsls	r2, r3, #2
 8013bb4:	18d2      	adds	r2, r2, r3
 8013bb6:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8013bb8:	402f      	ands	r7, r5
 8013bba:	19d2      	adds	r2, r2, r7
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013bbc:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013bbe:	0902      	lsrs	r2, r0, #4
 8013bc0:	0090      	lsls	r0, r2, #2
 8013bc2:	1880      	adds	r0, r0, r2
 8013bc4:	0922      	lsrs	r2, r4, #4
 8013bc6:	0093      	lsls	r3, r2, #2
 8013bc8:	189b      	adds	r3, r3, r2
 8013bca:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8013bcc:	402e      	ands	r6, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013bce:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8013bd0:	402c      	ands	r4, r5
 8013bd2:	1980      	adds	r0, r0, r6
 8013bd4:	191b      	adds	r3, r3, r4
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8013bd6:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8013bd8:	708b      	strb	r3, [r1, #2]
}
 8013bda:	2000      	movs	r0, #0
 8013bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bde:	46c0      	nop			; (mov r8, r8)
 8013be0:	00ffff3f 	.word	0x00ffff3f

08013be4 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013be4:	21a0      	movs	r1, #160	; 0xa0
 8013be6:	6802      	ldr	r2, [r0, #0]
{
 8013be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013bea:	68d3      	ldr	r3, [r2, #12]
{
 8013bec:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013bee:	438b      	bics	r3, r1
 8013bf0:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8013bf2:	f7fd faa7 	bl	8011144 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013bf6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8013bf8:	0005      	movs	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8013bfa:	2620      	movs	r6, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013bfc:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8013bfe:	e004      	b.n	8013c0a <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013c00:	f7fd faa0 	bl	8011144 <HAL_GetTick>
 8013c04:	1b40      	subs	r0, r0, r5
 8013c06:	42b8      	cmp	r0, r7
 8013c08:	d805      	bhi.n	8013c16 <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8013c0a:	6823      	ldr	r3, [r4, #0]
 8013c0c:	68db      	ldr	r3, [r3, #12]
 8013c0e:	421e      	tst	r6, r3
 8013c10:	d0f6      	beq.n	8013c00 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 8013c12:	2000      	movs	r0, #0
}
 8013c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8013c16:	2003      	movs	r0, #3
 8013c18:	e7fc      	b.n	8013c14 <HAL_RTC_WaitForSynchro+0x30>
 8013c1a:	46c0      	nop			; (mov r8, r8)

08013c1c <RTC_EnterInitMode>:
{
 8013c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013c1e:	6803      	ldr	r3, [r0, #0]
{
 8013c20:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013c22:	68da      	ldr	r2, [r3, #12]
 8013c24:	0652      	lsls	r2, r2, #25
 8013c26:	d501      	bpl.n	8013c2c <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 8013c28:	2000      	movs	r0, #0
}
 8013c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8013c2c:	2201      	movs	r2, #1
 8013c2e:	4252      	negs	r2, r2
 8013c30:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8013c32:	f7fd fa87 	bl	8011144 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013c36:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8013c38:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013c3a:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013c3c:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013c3e:	e004      	b.n	8013c4a <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013c40:	f7fd fa80 	bl	8011144 <HAL_GetTick>
 8013c44:	1b40      	subs	r0, r0, r5
 8013c46:	42b8      	cmp	r0, r7
 8013c48:	d804      	bhi.n	8013c54 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013c4a:	6823      	ldr	r3, [r4, #0]
 8013c4c:	68db      	ldr	r3, [r3, #12]
 8013c4e:	421e      	tst	r6, r3
 8013c50:	d0f6      	beq.n	8013c40 <RTC_EnterInitMode+0x24>
 8013c52:	e7e9      	b.n	8013c28 <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8013c54:	2003      	movs	r0, #3
 8013c56:	e7e8      	b.n	8013c2a <RTC_EnterInitMode+0xe>

08013c58 <HAL_RTC_Init>:
{
 8013c58:	b570      	push	{r4, r5, r6, lr}
 8013c5a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8013c5c:	d03e      	beq.n	8013cdc <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8013c5e:	7f43      	ldrb	r3, [r0, #29]
 8013c60:	b2da      	uxtb	r2, r3
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d036      	beq.n	8013cd4 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8013c66:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013c68:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8013c6a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013c6c:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013c6e:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013c70:	625a      	str	r2, [r3, #36]	; 0x24
 8013c72:	3a77      	subs	r2, #119	; 0x77
 8013c74:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013c76:	f7ff ffd1 	bl	8013c1c <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013c7a:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d123      	bne.n	8013cc8 <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8013c80:	689a      	ldr	r2, [r3, #8]
 8013c82:	4917      	ldr	r1, [pc, #92]	; (8013ce0 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013c84:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8013c86:	400a      	ands	r2, r1
 8013c88:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013c8a:	6862      	ldr	r2, [r4, #4]
 8013c8c:	6899      	ldr	r1, [r3, #8]
 8013c8e:	432a      	orrs	r2, r5
 8013c90:	6965      	ldr	r5, [r4, #20]
 8013c92:	432a      	orrs	r2, r5
 8013c94:	430a      	orrs	r2, r1
 8013c96:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8013c98:	68e2      	ldr	r2, [r4, #12]
 8013c9a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8013c9c:	68a2      	ldr	r2, [r4, #8]
 8013c9e:	6919      	ldr	r1, [r3, #16]
 8013ca0:	0412      	lsls	r2, r2, #16
 8013ca2:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8013ca4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8013ca6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8013ca8:	68da      	ldr	r2, [r3, #12]
 8013caa:	438a      	bics	r2, r1
 8013cac:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8013cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013cb0:	490c      	ldr	r1, [pc, #48]	; (8013ce4 <HAL_RTC_Init+0x8c>)
 8013cb2:	400a      	ands	r2, r1
 8013cb4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8013cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013cb8:	69a1      	ldr	r1, [r4, #24]
 8013cba:	430a      	orrs	r2, r1
 8013cbc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013cbe:	22ff      	movs	r2, #255	; 0xff
 8013cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	7763      	strb	r3, [r4, #29]
}
 8013cc6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013cc8:	22ff      	movs	r2, #255	; 0xff
 8013cca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013ccc:	2304      	movs	r3, #4
    return HAL_ERROR;
 8013cce:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013cd0:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8013cd2:	e7f8      	b.n	8013cc6 <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 8013cd4:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8013cd6:	f7ff ff25 	bl	8013b24 <HAL_RTC_MspInit>
 8013cda:	e7c4      	b.n	8013c66 <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 8013cdc:	2001      	movs	r0, #1
 8013cde:	e7f2      	b.n	8013cc6 <HAL_RTC_Init+0x6e>
 8013ce0:	ff8fffbf 	.word	0xff8fffbf
 8013ce4:	fffbffff 	.word	0xfffbffff

08013ce8 <HAL_RTC_SetTime>:
{
 8013ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8013cea:	7f03      	ldrb	r3, [r0, #28]
{
 8013cec:	0005      	movs	r5, r0
 8013cee:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d100      	bne.n	8013cf6 <HAL_RTC_SetTime+0xe>
 8013cf4:	e089      	b.n	8013e0a <HAL_RTC_SetTime+0x122>
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013cfe:	6800      	ldr	r0, [r0, #0]
  if(Format == RTC_FORMAT_BIN)
 8013d00:	2a00      	cmp	r2, #0
 8013d02:	d03b      	beq.n	8013d7c <HAL_RTC_SetTime+0x94>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013d04:	2140      	movs	r1, #64	; 0x40
 8013d06:	000b      	movs	r3, r1
 8013d08:	6882      	ldr	r2, [r0, #8]
 8013d0a:	4013      	ands	r3, r2
 8013d0c:	4211      	tst	r1, r2
 8013d0e:	d100      	bne.n	8013d12 <HAL_RTC_SetTime+0x2a>
 8013d10:	e077      	b.n	8013e02 <HAL_RTC_SetTime+0x11a>
 8013d12:	7a33      	ldrb	r3, [r6, #8]
 8013d14:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013d16:	7834      	ldrb	r4, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013d18:	7871      	ldrb	r1, [r6, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013d1a:	0424      	lsls	r4, r4, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013d1c:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013d1e:	430c      	orrs	r4, r1
              ((uint32_t)sTime->Seconds) | \
 8013d20:	78b1      	ldrb	r1, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013d22:	430c      	orrs	r4, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013d24:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013d26:	23ca      	movs	r3, #202	; 0xca
 8013d28:	6243      	str	r3, [r0, #36]	; 0x24
 8013d2a:	3b77      	subs	r3, #119	; 0x77
 8013d2c:	6243      	str	r3, [r0, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013d2e:	0028      	movs	r0, r5
 8013d30:	f7ff ff74 	bl	8013c1c <RTC_EnterInitMode>
 8013d34:	1e07      	subs	r7, r0, #0
 8013d36:	d15b      	bne.n	8013df0 <HAL_RTC_SetTime+0x108>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013d38:	4b35      	ldr	r3, [pc, #212]	; (8013e10 <HAL_RTC_SetTime+0x128>)
 8013d3a:	682a      	ldr	r2, [r5, #0]
 8013d3c:	401c      	ands	r4, r3
 8013d3e:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8013d40:	6893      	ldr	r3, [r2, #8]
 8013d42:	4934      	ldr	r1, [pc, #208]	; (8013e14 <HAL_RTC_SetTime+0x12c>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013d44:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8013d46:	400b      	ands	r3, r1
 8013d48:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013d4a:	68f3      	ldr	r3, [r6, #12]
 8013d4c:	6891      	ldr	r1, [r2, #8]
 8013d4e:	4303      	orrs	r3, r0
 8013d50:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013d52:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013d54:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013d56:	68d3      	ldr	r3, [r2, #12]
 8013d58:	438b      	bics	r3, r1
 8013d5a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013d5c:	6893      	ldr	r3, [r2, #8]
 8013d5e:	069b      	lsls	r3, r3, #26
 8013d60:	d43e      	bmi.n	8013de0 <HAL_RTC_SetTime+0xf8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013d62:	0028      	movs	r0, r5
 8013d64:	f7ff ff3e 	bl	8013be4 <HAL_RTC_WaitForSynchro>
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	d038      	beq.n	8013dde <HAL_RTC_SetTime+0xf6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013d6c:	22ff      	movs	r2, #255	; 0xff
 8013d6e:	682b      	ldr	r3, [r5, #0]
 8013d70:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013d72:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8013d74:	772f      	strb	r7, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013d76:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8013d78:	2701      	movs	r7, #1
 8013d7a:	e037      	b.n	8013dec <HAL_RTC_SetTime+0x104>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013d7c:	2140      	movs	r1, #64	; 0x40
 8013d7e:	000f      	movs	r7, r1
 8013d80:	6883      	ldr	r3, [r0, #8]
 8013d82:	401f      	ands	r7, r3
 8013d84:	4219      	tst	r1, r3
 8013d86:	d03e      	beq.n	8013e06 <HAL_RTC_SetTime+0x11e>
 8013d88:	7a37      	ldrb	r7, [r6, #8]
 8013d8a:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013d8c:	7831      	ldrb	r1, [r6, #0]
  while(Value >= 10)
 8013d8e:	2909      	cmp	r1, #9
 8013d90:	d908      	bls.n	8013da4 <HAL_RTC_SetTime+0xbc>
  uint32_t bcdhigh = 0;
 8013d92:	2300      	movs	r3, #0
    Value -= 10;
 8013d94:	390a      	subs	r1, #10
 8013d96:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8013d98:	3301      	adds	r3, #1
  while(Value >= 10)
 8013d9a:	2909      	cmp	r1, #9
 8013d9c:	d8fa      	bhi.n	8013d94 <HAL_RTC_SetTime+0xac>
 8013d9e:	011b      	lsls	r3, r3, #4
 8013da0:	4319      	orrs	r1, r3
 8013da2:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8013da4:	7873      	ldrb	r3, [r6, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013da6:	0409      	lsls	r1, r1, #16
  while(Value >= 10)
 8013da8:	2b09      	cmp	r3, #9
 8013daa:	d908      	bls.n	8013dbe <HAL_RTC_SetTime+0xd6>
  uint32_t bcdhigh = 0;
 8013dac:	2400      	movs	r4, #0
    Value -= 10;
 8013dae:	3b0a      	subs	r3, #10
 8013db0:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8013db2:	3401      	adds	r4, #1
  while(Value >= 10)
 8013db4:	2b09      	cmp	r3, #9
 8013db6:	d8fa      	bhi.n	8013dae <HAL_RTC_SetTime+0xc6>
 8013db8:	0124      	lsls	r4, r4, #4
 8013dba:	4323      	orrs	r3, r4
 8013dbc:	b2db      	uxtb	r3, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8013dbe:	78b4      	ldrb	r4, [r6, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8013dc0:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 8013dc2:	2c09      	cmp	r4, #9
 8013dc4:	d907      	bls.n	8013dd6 <HAL_RTC_SetTime+0xee>
    Value -= 10;
 8013dc6:	3c0a      	subs	r4, #10
 8013dc8:	b2e4      	uxtb	r4, r4
    bcdhigh++;
 8013dca:	3201      	adds	r2, #1
  while(Value >= 10)
 8013dcc:	2c09      	cmp	r4, #9
 8013dce:	d8fa      	bhi.n	8013dc6 <HAL_RTC_SetTime+0xde>
 8013dd0:	0112      	lsls	r2, r2, #4
 8013dd2:	4314      	orrs	r4, r2
 8013dd4:	b2e4      	uxtb	r4, r4
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013dd6:	4339      	orrs	r1, r7
 8013dd8:	430b      	orrs	r3, r1
 8013dda:	431c      	orrs	r4, r3
 8013ddc:	e7a3      	b.n	8013d26 <HAL_RTC_SetTime+0x3e>
 8013dde:	682a      	ldr	r2, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013de0:	23ff      	movs	r3, #255	; 0xff
 8013de2:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8013de4:	3bfe      	subs	r3, #254	; 0xfe
 8013de6:	776b      	strb	r3, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 8013de8:	2300      	movs	r3, #0
 8013dea:	772b      	strb	r3, [r5, #28]
}
 8013dec:	0038      	movs	r0, r7
 8013dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013df0:	22ff      	movs	r2, #255	; 0xff
 8013df2:	682b      	ldr	r3, [r5, #0]
    return HAL_ERROR;
 8013df4:	2701      	movs	r7, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013df6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013df8:	2304      	movs	r3, #4
 8013dfa:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8013e00:	e7f4      	b.n	8013dec <HAL_RTC_SetTime+0x104>
      sTime->TimeFormat = 0x00;
 8013e02:	7233      	strb	r3, [r6, #8]
 8013e04:	e787      	b.n	8013d16 <HAL_RTC_SetTime+0x2e>
      sTime->TimeFormat = 0x00;
 8013e06:	7237      	strb	r7, [r6, #8]
 8013e08:	e7c0      	b.n	8013d8c <HAL_RTC_SetTime+0xa4>
  __HAL_LOCK(hrtc);
 8013e0a:	2702      	movs	r7, #2
 8013e0c:	e7ee      	b.n	8013dec <HAL_RTC_SetTime+0x104>
 8013e0e:	46c0      	nop			; (mov r8, r8)
 8013e10:	007f7f7f 	.word	0x007f7f7f
 8013e14:	fffbffff 	.word	0xfffbffff

08013e18 <HAL_RTC_SetDate>:
{
 8013e18:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8013e1a:	7f03      	ldrb	r3, [r0, #28]
{
 8013e1c:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d100      	bne.n	8013e24 <HAL_RTC_SetDate+0xc>
 8013e22:	e079      	b.n	8013f18 <HAL_RTC_SetDate+0x100>
 8013e24:	2301      	movs	r3, #1
 8013e26:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8013e28:	3301      	adds	r3, #1
 8013e2a:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8013e2c:	2a00      	cmp	r2, #0
 8013e2e:	d02b      	beq.n	8013e88 <HAL_RTC_SetDate+0x70>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013e30:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8013e32:	784c      	ldrb	r4, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013e34:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8013e36:	0224      	lsls	r4, r4, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013e38:	4320      	orrs	r0, r4
                  ((uint32_t)sDate->Date) | \
 8013e3a:	788c      	ldrb	r4, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8013e3c:	4320      	orrs	r0, r4
                  (((uint32_t)sDate->WeekDay) << 13));  
 8013e3e:	780c      	ldrb	r4, [r1, #0]
 8013e40:	0364      	lsls	r4, r4, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013e42:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013e44:	22ca      	movs	r2, #202	; 0xca
 8013e46:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013e48:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013e4a:	625a      	str	r2, [r3, #36]	; 0x24
 8013e4c:	3a77      	subs	r2, #119	; 0x77
 8013e4e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013e50:	f7ff fee4 	bl	8013c1c <RTC_EnterInitMode>
 8013e54:	1e06      	subs	r6, r0, #0
 8013e56:	d152      	bne.n	8013efe <HAL_RTC_SetDate+0xe6>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013e58:	2280      	movs	r2, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8013e5a:	4831      	ldr	r0, [pc, #196]	; (8013f20 <HAL_RTC_SetDate+0x108>)
 8013e5c:	6829      	ldr	r1, [r5, #0]
 8013e5e:	4020      	ands	r0, r4
 8013e60:	6048      	str	r0, [r1, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013e62:	68cb      	ldr	r3, [r1, #12]
 8013e64:	4393      	bics	r3, r2
 8013e66:	60cb      	str	r3, [r1, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013e68:	688b      	ldr	r3, [r1, #8]
 8013e6a:	069b      	lsls	r3, r3, #26
 8013e6c:	d43f      	bmi.n	8013eee <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013e6e:	0028      	movs	r0, r5
 8013e70:	f7ff feb8 	bl	8013be4 <HAL_RTC_WaitForSynchro>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	d039      	beq.n	8013eec <HAL_RTC_SetDate+0xd4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013e78:	22ff      	movs	r2, #255	; 0xff
 8013e7a:	682b      	ldr	r3, [r5, #0]
 8013e7c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013e7e:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8013e80:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013e82:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8013e84:	2601      	movs	r6, #1
 8013e86:	e038      	b.n	8013efa <HAL_RTC_SetDate+0xe2>
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8013e88:	2010      	movs	r0, #16
 8013e8a:	784b      	ldrb	r3, [r1, #1]
 8013e8c:	4218      	tst	r0, r3
 8013e8e:	d03f      	beq.n	8013f10 <HAL_RTC_SetDate+0xf8>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8013e90:	4383      	bics	r3, r0
 8013e92:	330a      	adds	r3, #10
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013e94:	78cc      	ldrb	r4, [r1, #3]
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8013e96:	b2db      	uxtb	r3, r3
 8013e98:	704b      	strb	r3, [r1, #1]
  while(Value >= 10)
 8013e9a:	2c09      	cmp	r4, #9
 8013e9c:	d93e      	bls.n	8013f1c <HAL_RTC_SetDate+0x104>
  uint32_t bcdhigh = 0;
 8013e9e:	2000      	movs	r0, #0
    Value -= 10;
 8013ea0:	3c0a      	subs	r4, #10
 8013ea2:	b2e4      	uxtb	r4, r4
    bcdhigh++;
 8013ea4:	3001      	adds	r0, #1
  while(Value >= 10)
 8013ea6:	2c09      	cmp	r4, #9
 8013ea8:	d8fa      	bhi.n	8013ea0 <HAL_RTC_SetDate+0x88>
 8013eaa:	0100      	lsls	r0, r0, #4
 8013eac:	4304      	orrs	r4, r0
 8013eae:	b2e4      	uxtb	r4, r4
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013eb0:	0424      	lsls	r4, r4, #16
  while(Value >= 10)
 8013eb2:	2b09      	cmp	r3, #9
 8013eb4:	d908      	bls.n	8013ec8 <HAL_RTC_SetDate+0xb0>
  uint32_t bcdhigh = 0;
 8013eb6:	2000      	movs	r0, #0
    Value -= 10;
 8013eb8:	3b0a      	subs	r3, #10
 8013eba:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8013ebc:	3001      	adds	r0, #1
  while(Value >= 10)
 8013ebe:	2b09      	cmp	r3, #9
 8013ec0:	d8fa      	bhi.n	8013eb8 <HAL_RTC_SetDate+0xa0>
 8013ec2:	0100      	lsls	r0, r0, #4
 8013ec4:	4303      	orrs	r3, r0
 8013ec6:	b2db      	uxtb	r3, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8013ec8:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8013eca:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 8013ecc:	2809      	cmp	r0, #9
 8013ece:	d907      	bls.n	8013ee0 <HAL_RTC_SetDate+0xc8>
    Value -= 10;
 8013ed0:	380a      	subs	r0, #10
 8013ed2:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8013ed4:	3201      	adds	r2, #1
  while(Value >= 10)
 8013ed6:	2809      	cmp	r0, #9
 8013ed8:	d8fa      	bhi.n	8013ed0 <HAL_RTC_SetDate+0xb8>
 8013eda:	0112      	lsls	r2, r2, #4
 8013edc:	4310      	orrs	r0, r2
 8013ede:	b2c0      	uxtb	r0, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 8013ee0:	780a      	ldrb	r2, [r1, #0]
 8013ee2:	0352      	lsls	r2, r2, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013ee4:	4314      	orrs	r4, r2
 8013ee6:	431c      	orrs	r4, r3
 8013ee8:	4304      	orrs	r4, r0
 8013eea:	e7ab      	b.n	8013e44 <HAL_RTC_SetDate+0x2c>
 8013eec:	6829      	ldr	r1, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013eee:	23ff      	movs	r3, #255	; 0xff
 8013ef0:	624b      	str	r3, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8013ef2:	3bfe      	subs	r3, #254	; 0xfe
 8013ef4:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	772b      	strb	r3, [r5, #28]
}
 8013efa:	0030      	movs	r0, r6
 8013efc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013efe:	22ff      	movs	r2, #255	; 0xff
 8013f00:	682b      	ldr	r3, [r5, #0]
    return HAL_ERROR;
 8013f02:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013f04:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013f06:	2304      	movs	r3, #4
 8013f08:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8013f0e:	e7f4      	b.n	8013efa <HAL_RTC_SetDate+0xe2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013f10:	78cc      	ldrb	r4, [r1, #3]
  while(Value >= 10)
 8013f12:	2c09      	cmp	r4, #9
 8013f14:	d8c3      	bhi.n	8013e9e <HAL_RTC_SetDate+0x86>
 8013f16:	e7cb      	b.n	8013eb0 <HAL_RTC_SetDate+0x98>
 __HAL_LOCK(hrtc);
 8013f18:	2602      	movs	r6, #2
 8013f1a:	e7ee      	b.n	8013efa <HAL_RTC_SetDate+0xe2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013f1c:	0424      	lsls	r4, r4, #16
  while(Value >= 10)
 8013f1e:	e7ca      	b.n	8013eb6 <HAL_RTC_SetDate+0x9e>
 8013f20:	00ffff3f 	.word	0x00ffff3f

08013f24 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013f24:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8013f26:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013f28:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013f2a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8013f2c:	600a      	str	r2, [r1, #0]
}
 8013f2e:	4770      	bx	lr

08013f30 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013f30:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8013f32:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013f34:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013f36:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8013f38:	6808      	ldr	r0, [r1, #0]
}
 8013f3a:	4770      	bx	lr

08013f3c <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013f3c:	4770      	bx	lr
 8013f3e:	46c0      	nop			; (mov r8, r8)

08013f40 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8013f40:	2239      	movs	r2, #57	; 0x39
 8013f42:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013f44:	2101      	movs	r1, #1
{
 8013f46:	b510      	push	{r4, lr}
  htim->State= HAL_TIM_STATE_BUSY;
 8013f48:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8013f4a:	6804      	ldr	r4, [r0, #0]
 8013f4c:	6823      	ldr	r3, [r4, #0]
 8013f4e:	430b      	orrs	r3, r1
 8013f50:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8013f52:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8013f54:	2000      	movs	r0, #0
 8013f56:	bd10      	pop	{r4, pc}

08013f58 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013f58:	4a1b      	ldr	r2, [pc, #108]	; (8013fc8 <TIM_Base_SetConfig+0x70>)
  tmpcr1 = TIMx->CR1;
 8013f5a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013f5c:	4290      	cmp	r0, r2
 8013f5e:	d023      	beq.n	8013fa8 <TIM_Base_SetConfig+0x50>
 8013f60:	2280      	movs	r2, #128	; 0x80
 8013f62:	05d2      	lsls	r2, r2, #23
 8013f64:	4290      	cmp	r0, r2
 8013f66:	d016      	beq.n	8013f96 <TIM_Base_SetConfig+0x3e>
 8013f68:	4a18      	ldr	r2, [pc, #96]	; (8013fcc <TIM_Base_SetConfig+0x74>)
 8013f6a:	4290      	cmp	r0, r2
 8013f6c:	d013      	beq.n	8013f96 <TIM_Base_SetConfig+0x3e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013f6e:	4a18      	ldr	r2, [pc, #96]	; (8013fd0 <TIM_Base_SetConfig+0x78>)
 8013f70:	4290      	cmp	r0, r2
 8013f72:	d014      	beq.n	8013f9e <TIM_Base_SetConfig+0x46>
 8013f74:	4a17      	ldr	r2, [pc, #92]	; (8013fd4 <TIM_Base_SetConfig+0x7c>)
 8013f76:	4290      	cmp	r0, r2
 8013f78:	d01a      	beq.n	8013fb0 <TIM_Base_SetConfig+0x58>
 8013f7a:	4a17      	ldr	r2, [pc, #92]	; (8013fd8 <TIM_Base_SetConfig+0x80>)
 8013f7c:	4290      	cmp	r0, r2
 8013f7e:	d017      	beq.n	8013fb0 <TIM_Base_SetConfig+0x58>
 8013f80:	4a16      	ldr	r2, [pc, #88]	; (8013fdc <TIM_Base_SetConfig+0x84>)
 8013f82:	4290      	cmp	r0, r2
 8013f84:	d014      	beq.n	8013fb0 <TIM_Base_SetConfig+0x58>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8013f86:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013f88:	688b      	ldr	r3, [r1, #8]
 8013f8a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013f8c:	680b      	ldr	r3, [r1, #0]
 8013f8e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8013f90:	2301      	movs	r3, #1
 8013f92:	6143      	str	r3, [r0, #20]
}
 8013f94:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013f96:	2270      	movs	r2, #112	; 0x70
 8013f98:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013f9a:	684a      	ldr	r2, [r1, #4]
 8013f9c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8013f9e:	4a10      	ldr	r2, [pc, #64]	; (8013fe0 <TIM_Base_SetConfig+0x88>)
 8013fa0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013fa2:	68ca      	ldr	r2, [r1, #12]
 8013fa4:	4313      	orrs	r3, r2
 8013fa6:	e7ee      	b.n	8013f86 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013fa8:	2270      	movs	r2, #112	; 0x70
 8013faa:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013fac:	684a      	ldr	r2, [r1, #4]
 8013fae:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8013fb0:	4a0b      	ldr	r2, [pc, #44]	; (8013fe0 <TIM_Base_SetConfig+0x88>)
 8013fb2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013fb4:	68ca      	ldr	r2, [r1, #12]
 8013fb6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013fb8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013fba:	688b      	ldr	r3, [r1, #8]
 8013fbc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013fbe:	680b      	ldr	r3, [r1, #0]
 8013fc0:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8013fc2:	690b      	ldr	r3, [r1, #16]
 8013fc4:	6303      	str	r3, [r0, #48]	; 0x30
 8013fc6:	e7e3      	b.n	8013f90 <TIM_Base_SetConfig+0x38>
 8013fc8:	40012c00 	.word	0x40012c00
 8013fcc:	40000400 	.word	0x40000400
 8013fd0:	40002000 	.word	0x40002000
 8013fd4:	40014000 	.word	0x40014000
 8013fd8:	40014400 	.word	0x40014400
 8013fdc:	40014800 	.word	0x40014800
 8013fe0:	fffffcff 	.word	0xfffffcff

08013fe4 <HAL_TIM_Base_Init>:
{
 8013fe4:	b570      	push	{r4, r5, r6, lr}
 8013fe6:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8013fe8:	d014      	beq.n	8014014 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8013fea:	2339      	movs	r3, #57	; 0x39
 8013fec:	5cc3      	ldrb	r3, [r0, r3]
 8013fee:	b2da      	uxtb	r2, r3
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d00a      	beq.n	801400a <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8013ff4:	2302      	movs	r3, #2
 8013ff6:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013ff8:	0021      	movs	r1, r4
  htim->State= HAL_TIM_STATE_BUSY;
 8013ffa:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013ffc:	c901      	ldmia	r1!, {r0}
 8013ffe:	f7ff ffab 	bl	8013f58 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8014002:	2301      	movs	r3, #1
  return HAL_OK;
 8014004:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8014006:	5563      	strb	r3, [r4, r5]
}
 8014008:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 801400a:	3338      	adds	r3, #56	; 0x38
 801400c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 801400e:	f7ff ff95 	bl	8013f3c <HAL_TIM_Base_MspInit>
 8014012:	e7ef      	b.n	8013ff4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8014014:	2001      	movs	r0, #1
 8014016:	e7f7      	b.n	8014008 <HAL_TIM_Base_Init+0x24>

08014018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8014018:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801401a:	2438      	movs	r4, #56	; 0x38
 801401c:	5d03      	ldrb	r3, [r0, r4]
 801401e:	2b01      	cmp	r3, #1
 8014020:	d019      	beq.n	8014056 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8014022:	2539      	movs	r5, #57	; 0x39
 8014024:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8014026:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8014028:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801402a:	6803      	ldr	r3, [r0, #0]
 801402c:	685a      	ldr	r2, [r3, #4]
 801402e:	43b2      	bics	r2, r6
 8014030:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8014032:	685a      	ldr	r2, [r3, #4]
 8014034:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8014036:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8014038:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801403a:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 801403c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801403e:	689a      	ldr	r2, [r3, #8]
 8014040:	43b2      	bics	r2, r6
 8014042:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8014044:	689a      	ldr	r2, [r3, #8]
 8014046:	430a      	orrs	r2, r1
 8014048:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 801404a:	2301      	movs	r3, #1
 801404c:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 801404e:	2300      	movs	r3, #0
 8014050:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8014052:	2000      	movs	r0, #0
}
 8014054:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8014056:	2002      	movs	r0, #2
 8014058:	e7fc      	b.n	8014054 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 801405a:	46c0      	nop			; (mov r8, r8)

0801405c <HAL_UART_MspDeInit>:
 801405c:	4770      	bx	lr
 801405e:	46c0      	nop			; (mov r8, r8)

08014060 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8014060:	b570      	push	{r4, r5, r6, lr}
 8014062:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8014064:	d013      	beq.n	801408e <HAL_UART_DeInit+0x2e>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 8014066:	2669      	movs	r6, #105	; 0x69
 8014068:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801406a:	2101      	movs	r1, #1

  huart->Instance->CR1 = 0x0;
 801406c:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 801406e:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8014070:	6803      	ldr	r3, [r0, #0]
 8014072:	681a      	ldr	r2, [r3, #0]
 8014074:	438a      	bics	r2, r1
 8014076:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 8014078:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 801407a:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 801407c:	609d      	str	r5, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801407e:	f7ff ffed 	bl	801405c <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8014082:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8014084:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014086:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8014088:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 801408a:	54e5      	strb	r5, [r4, r3]
}
 801408c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 801408e:	2001      	movs	r0, #1
 8014090:	e7fc      	b.n	801408c <HAL_UART_DeInit+0x2c>
 8014092:	46c0      	nop			; (mov r8, r8)

08014094 <HAL_UART_Transmit_IT>:
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014094:	2369      	movs	r3, #105	; 0x69
{
 8014096:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014098:	5cc4      	ldrb	r4, [r0, r3]
 801409a:	2c01      	cmp	r4, #1
 801409c:	d002      	beq.n	80140a4 <HAL_UART_Transmit_IT+0x10>
 801409e:	5cc3      	ldrb	r3, [r0, r3]
 80140a0:	2b22      	cmp	r3, #34	; 0x22
 80140a2:	d124      	bne.n	80140ee <HAL_UART_Transmit_IT+0x5a>
  {
    if((pData == NULL ) || (Size == 0))
 80140a4:	2900      	cmp	r1, #0
 80140a6:	d024      	beq.n	80140f2 <HAL_UART_Transmit_IT+0x5e>
 80140a8:	2a00      	cmp	r2, #0
 80140aa:	d022      	beq.n	80140f2 <HAL_UART_Transmit_IT+0x5e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80140ac:	2368      	movs	r3, #104	; 0x68
 80140ae:	5cc4      	ldrb	r4, [r0, r3]
 80140b0:	2c01      	cmp	r4, #1
 80140b2:	d01c      	beq.n	80140ee <HAL_UART_Transmit_IT+0x5a>
 80140b4:	2401      	movs	r4, #1
 80140b6:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 80140b8:	3b18      	subs	r3, #24
    huart->pTxBuffPtr = pData;
 80140ba:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80140bc:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80140be:	3302      	adds	r3, #2
 80140c0:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80140c2:	2300      	movs	r3, #0
 80140c4:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80140c6:	3369      	adds	r3, #105	; 0x69
 80140c8:	5cc2      	ldrb	r2, [r0, r3]
 80140ca:	2a22      	cmp	r2, #34	; 0x22
 80140cc:	d013      	beq.n	80140f6 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80140ce:	2212      	movs	r2, #18
 80140d0:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80140d2:	2101      	movs	r1, #1
 80140d4:	6803      	ldr	r3, [r0, #0]
 80140d6:	689a      	ldr	r2, [r3, #8]
 80140d8:	430a      	orrs	r2, r1
 80140da:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80140dc:	2100      	movs	r1, #0
 80140de:	2268      	movs	r2, #104	; 0x68
 80140e0:	5481      	strb	r1, [r0, r2]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);

    return HAL_OK;
 80140e2:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80140e4:	681a      	ldr	r2, [r3, #0]
 80140e6:	3180      	adds	r1, #128	; 0x80
 80140e8:	430a      	orrs	r2, r1
 80140ea:	601a      	str	r2, [r3, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80140ec:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80140ee:	2002      	movs	r0, #2
 80140f0:	e7fc      	b.n	80140ec <HAL_UART_Transmit_IT+0x58>
      return HAL_ERROR;
 80140f2:	2001      	movs	r0, #1
 80140f4:	e7fa      	b.n	80140ec <HAL_UART_Transmit_IT+0x58>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80140f6:	3210      	adds	r2, #16
 80140f8:	54c2      	strb	r2, [r0, r3]
 80140fa:	e7ea      	b.n	80140d2 <HAL_UART_Transmit_IT+0x3e>

080140fc <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80140fc:	2369      	movs	r3, #105	; 0x69
{
 80140fe:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8014100:	5cc4      	ldrb	r4, [r0, r3]
 8014102:	2c01      	cmp	r4, #1
 8014104:	d002      	beq.n	801410c <HAL_UART_Receive_IT+0x10>
 8014106:	5cc3      	ldrb	r3, [r0, r3]
 8014108:	2b12      	cmp	r3, #18
 801410a:	d134      	bne.n	8014176 <HAL_UART_Receive_IT+0x7a>
  {
    if((pData == NULL ) || (Size == 0))
 801410c:	2900      	cmp	r1, #0
 801410e:	d034      	beq.n	801417a <HAL_UART_Receive_IT+0x7e>
 8014110:	2a00      	cmp	r2, #0
 8014112:	d032      	beq.n	801417a <HAL_UART_Receive_IT+0x7e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014114:	2368      	movs	r3, #104	; 0x68
 8014116:	5cc4      	ldrb	r4, [r0, r3]
 8014118:	2c01      	cmp	r4, #1
 801411a:	d02c      	beq.n	8014176 <HAL_UART_Receive_IT+0x7a>
 801411c:	2401      	movs	r4, #1
 801411e:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8014120:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8014122:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8014124:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8014126:	3302      	adds	r3, #2
 8014128:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801412a:	2280      	movs	r2, #128	; 0x80
 801412c:	6883      	ldr	r3, [r0, #8]
 801412e:	0152      	lsls	r2, r2, #5
 8014130:	4293      	cmp	r3, r2
 8014132:	d02b      	beq.n	801418c <HAL_UART_Receive_IT+0x90>
 8014134:	2b00      	cmp	r3, #0
 8014136:	d022      	beq.n	801417e <HAL_UART_Receive_IT+0x82>
 8014138:	2280      	movs	r2, #128	; 0x80
 801413a:	0552      	lsls	r2, r2, #21
 801413c:	4293      	cmp	r3, r2
 801413e:	d033      	beq.n	80141a8 <HAL_UART_Receive_IT+0xac>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014140:	2300      	movs	r3, #0
 8014142:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8014144:	3369      	adds	r3, #105	; 0x69
 8014146:	5cc2      	ldrb	r2, [r0, r3]
 8014148:	2a12      	cmp	r2, #18
 801414a:	d026      	beq.n	801419a <HAL_UART_Receive_IT+0x9e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 801414c:	2222      	movs	r2, #34	; 0x22
 801414e:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8014150:	2280      	movs	r2, #128	; 0x80
 8014152:	6803      	ldr	r3, [r0, #0]
 8014154:	0052      	lsls	r2, r2, #1
 8014156:	6819      	ldr	r1, [r3, #0]
 8014158:	430a      	orrs	r2, r1

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801415a:	2101      	movs	r1, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801415c:	601a      	str	r2, [r3, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801415e:	689a      	ldr	r2, [r3, #8]
 8014160:	430a      	orrs	r2, r1
 8014162:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014164:	2100      	movs	r1, #0
 8014166:	2268      	movs	r2, #104	; 0x68
 8014168:	5481      	strb	r1, [r0, r2]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	3120      	adds	r1, #32
 801416e:	430a      	orrs	r2, r1

    return HAL_OK;
 8014170:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8014172:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8014174:	e000      	b.n	8014178 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8014176:	2002      	movs	r0, #2
  }
}
 8014178:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 801417a:	2001      	movs	r0, #1
 801417c:	e7fc      	b.n	8014178 <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 801417e:	6903      	ldr	r3, [r0, #16]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d00d      	beq.n	80141a0 <HAL_UART_Receive_IT+0xa4>
 8014184:	235c      	movs	r3, #92	; 0x5c
 8014186:	227f      	movs	r2, #127	; 0x7f
 8014188:	52c2      	strh	r2, [r0, r3]
 801418a:	e7d9      	b.n	8014140 <HAL_UART_Receive_IT+0x44>
 801418c:	6903      	ldr	r3, [r0, #16]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d106      	bne.n	80141a0 <HAL_UART_Receive_IT+0xa4>
 8014192:	4a09      	ldr	r2, [pc, #36]	; (80141b8 <HAL_UART_Receive_IT+0xbc>)
 8014194:	335c      	adds	r3, #92	; 0x5c
 8014196:	52c2      	strh	r2, [r0, r3]
 8014198:	e7d2      	b.n	8014140 <HAL_UART_Receive_IT+0x44>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801419a:	3220      	adds	r2, #32
 801419c:	54c2      	strb	r2, [r0, r3]
 801419e:	e7d7      	b.n	8014150 <HAL_UART_Receive_IT+0x54>
    UART_MASK_COMPUTATION(huart);
 80141a0:	235c      	movs	r3, #92	; 0x5c
 80141a2:	22ff      	movs	r2, #255	; 0xff
 80141a4:	52c2      	strh	r2, [r0, r3]
 80141a6:	e7cb      	b.n	8014140 <HAL_UART_Receive_IT+0x44>
 80141a8:	6903      	ldr	r3, [r0, #16]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d0ea      	beq.n	8014184 <HAL_UART_Receive_IT+0x88>
 80141ae:	235c      	movs	r3, #92	; 0x5c
 80141b0:	223f      	movs	r2, #63	; 0x3f
 80141b2:	52c2      	strh	r2, [r0, r3]
 80141b4:	e7c4      	b.n	8014140 <HAL_UART_Receive_IT+0x44>
 80141b6:	46c0      	nop			; (mov r8, r8)
 80141b8:	000001ff 	.word	0x000001ff

080141bc <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80141bc:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80141be:	2269      	movs	r2, #105	; 0x69
{
 80141c0:	b510      	push	{r4, lr}
 80141c2:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80141c4:	5c80      	ldrb	r0, [r0, r2]
 80141c6:	2801      	cmp	r0, #1
 80141c8:	d002      	beq.n	80141d0 <HAL_UART_Transmit_DMA+0x14>
 80141ca:	5ca2      	ldrb	r2, [r4, r2]
 80141cc:	2a22      	cmp	r2, #34	; 0x22
 80141ce:	d12d      	bne.n	801422c <HAL_UART_Transmit_DMA+0x70>
  {
    if((pData == NULL ) || (Size == 0))
 80141d0:	2900      	cmp	r1, #0
 80141d2:	d02d      	beq.n	8014230 <HAL_UART_Transmit_DMA+0x74>
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d02b      	beq.n	8014230 <HAL_UART_Transmit_DMA+0x74>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80141d8:	2268      	movs	r2, #104	; 0x68
 80141da:	5ca0      	ldrb	r0, [r4, r2]
 80141dc:	2801      	cmp	r0, #1
 80141de:	d025      	beq.n	801422c <HAL_UART_Transmit_DMA+0x70>
 80141e0:	2001      	movs	r0, #1
 80141e2:	54a0      	strb	r0, [r4, r2]

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 80141e4:	3a18      	subs	r2, #24
    huart->pTxBuffPtr = pData;
 80141e6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80141e8:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80141ea:	3202      	adds	r2, #2
 80141ec:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80141ee:	2200      	movs	r2, #0
 80141f0:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80141f2:	3269      	adds	r2, #105	; 0x69
 80141f4:	5ca0      	ldrb	r0, [r4, r2]
 80141f6:	2822      	cmp	r0, #34	; 0x22
 80141f8:	d01c      	beq.n	8014234 <HAL_UART_Transmit_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80141fa:	2012      	movs	r0, #18
 80141fc:	54a0      	strb	r0, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80141fe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8014200:	4a0e      	ldr	r2, [pc, #56]	; (801423c <HAL_UART_Transmit_DMA+0x80>)
 8014202:	6282      	str	r2, [r0, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8014204:	4a0e      	ldr	r2, [pc, #56]	; (8014240 <HAL_UART_Transmit_DMA+0x84>)
 8014206:	62c2      	str	r2, [r0, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8014208:	4a0e      	ldr	r2, [pc, #56]	; (8014244 <HAL_UART_Transmit_DMA+0x88>)
 801420a:	6302      	str	r2, [r0, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 801420c:	6822      	ldr	r2, [r4, #0]
 801420e:	3228      	adds	r2, #40	; 0x28
 8014210:	f7fd fc58 	bl	8011ac4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8014214:	2240      	movs	r2, #64	; 0x40

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8014216:	2180      	movs	r1, #128	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8014218:	6823      	ldr	r3, [r4, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    return HAL_OK;
 801421a:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801421c:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 801421e:	689a      	ldr	r2, [r3, #8]
 8014220:	430a      	orrs	r2, r1
 8014222:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8014224:	2368      	movs	r3, #104	; 0x68
 8014226:	2200      	movs	r2, #0
 8014228:	54e2      	strb	r2, [r4, r3]
  }
  else
  {
    return HAL_BUSY;
  }
}
 801422a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 801422c:	2002      	movs	r0, #2
 801422e:	e7fc      	b.n	801422a <HAL_UART_Transmit_DMA+0x6e>
      return HAL_ERROR;
 8014230:	2001      	movs	r0, #1
 8014232:	e7fa      	b.n	801422a <HAL_UART_Transmit_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8014234:	3010      	adds	r0, #16
 8014236:	54a0      	strb	r0, [r4, r2]
 8014238:	e7e1      	b.n	80141fe <HAL_UART_Transmit_DMA+0x42>
 801423a:	46c0      	nop			; (mov r8, r8)
 801423c:	080142d1 	.word	0x080142d1
 8014240:	08014309 	.word	0x08014309
 8014244:	08014361 	.word	0x08014361

08014248 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014248:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801424a:	2269      	movs	r2, #105	; 0x69
{
 801424c:	b570      	push	{r4, r5, r6, lr}
 801424e:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8014250:	5c81      	ldrb	r1, [r0, r2]
{
 8014252:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8014254:	2901      	cmp	r1, #1
 8014256:	d002      	beq.n	801425e <HAL_UART_Receive_DMA+0x16>
 8014258:	5c82      	ldrb	r2, [r0, r2]
 801425a:	2a12      	cmp	r2, #18
 801425c:	d12a      	bne.n	80142b4 <HAL_UART_Receive_DMA+0x6c>
  {
    if((pData == NULL ) || (Size == 0))
 801425e:	2d00      	cmp	r5, #0
 8014260:	d02a      	beq.n	80142b8 <HAL_UART_Receive_DMA+0x70>
 8014262:	2b00      	cmp	r3, #0
 8014264:	d028      	beq.n	80142b8 <HAL_UART_Receive_DMA+0x70>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014266:	2268      	movs	r2, #104	; 0x68
 8014268:	5ca1      	ldrb	r1, [r4, r2]
 801426a:	2901      	cmp	r1, #1
 801426c:	d022      	beq.n	80142b4 <HAL_UART_Receive_DMA+0x6c>
 801426e:	2101      	movs	r1, #1
 8014270:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8014272:	3a10      	subs	r2, #16
    huart->pRxBuffPtr = pData;
 8014274:	6565      	str	r5, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8014276:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014278:	2200      	movs	r2, #0
 801427a:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801427c:	3269      	adds	r2, #105	; 0x69
 801427e:	5ca1      	ldrb	r1, [r4, r2]
 8014280:	2912      	cmp	r1, #18
 8014282:	d01b      	beq.n	80142bc <HAL_UART_Receive_DMA+0x74>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8014284:	2122      	movs	r1, #34	; 0x22
 8014286:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014288:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801428a:	4a0e      	ldr	r2, [pc, #56]	; (80142c4 <HAL_UART_Receive_DMA+0x7c>)
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801428c:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801428e:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014290:	4a0d      	ldr	r2, [pc, #52]	; (80142c8 <HAL_UART_Receive_DMA+0x80>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8014292:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014294:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014296:	4a0d      	ldr	r2, [pc, #52]	; (80142cc <HAL_UART_Receive_DMA+0x84>)
 8014298:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801429a:	002a      	movs	r2, r5
 801429c:	f7fd fc12 	bl	8011ac4 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80142a0:	2140      	movs	r1, #64	; 0x40
 80142a2:	6822      	ldr	r2, [r4, #0]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);

    return HAL_OK;
 80142a4:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80142a6:	6893      	ldr	r3, [r2, #8]
 80142a8:	430b      	orrs	r3, r1
 80142aa:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80142ac:	2368      	movs	r3, #104	; 0x68
 80142ae:	2200      	movs	r2, #0
 80142b0:	54e2      	strb	r2, [r4, r3]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80142b2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80142b4:	2002      	movs	r0, #2
 80142b6:	e7fc      	b.n	80142b2 <HAL_UART_Receive_DMA+0x6a>
      return HAL_ERROR;
 80142b8:	2001      	movs	r0, #1
 80142ba:	e7fa      	b.n	80142b2 <HAL_UART_Receive_DMA+0x6a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80142bc:	3120      	adds	r1, #32
 80142be:	54a1      	strb	r1, [r4, r2]
 80142c0:	e7e2      	b.n	8014288 <HAL_UART_Receive_DMA+0x40>
 80142c2:	46c0      	nop			; (mov r8, r8)
 80142c4:	08014315 	.word	0x08014315
 80142c8:	08014355 	.word	0x08014355
 80142cc:	08014361 	.word	0x08014361

080142d0 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80142d0:	2220      	movs	r2, #32
{
 80142d2:	0003      	movs	r3, r0
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80142d4:	0011      	movs	r1, r2
 80142d6:	681b      	ldr	r3, [r3, #0]
{
 80142d8:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80142da:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80142dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80142de:	4019      	ands	r1, r3
 80142e0:	421a      	tst	r2, r3
 80142e2:	d10b      	bne.n	80142fc <UART_DMATransmitCplt+0x2c>
  {  
    huart->TxXferCount = 0;
 80142e4:	2352      	movs	r3, #82	; 0x52
 80142e6:	52c1      	strh	r1, [r0, r3]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80142e8:	2180      	movs	r1, #128	; 0x80
 80142ea:	6803      	ldr	r3, [r0, #0]
 80142ec:	689a      	ldr	r2, [r3, #8]
 80142ee:	438a      	bics	r2, r1
 80142f0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	3940      	subs	r1, #64	; 0x40
 80142f6:	430a      	orrs	r2, r1
 80142f8:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80142fa:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80142fc:	f7f9 fdb8 	bl	800de70 <HAL_UART_TxCpltCallback>
}
 8014300:	e7fb      	b.n	80142fa <UART_DMATransmitCplt+0x2a>
 8014302:	46c0      	nop			; (mov r8, r8)

08014304 <HAL_UART_TxHalfCpltCallback>:
 8014304:	4770      	bx	lr
 8014306:	46c0      	nop			; (mov r8, r8)

08014308 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014308:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 801430a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801430c:	f7ff fffa 	bl	8014304 <HAL_UART_TxHalfCpltCallback>
}
 8014310:	bd10      	pop	{r4, pc}
 8014312:	46c0      	nop			; (mov r8, r8)

08014314 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8014314:	2220      	movs	r2, #32
{
 8014316:	0003      	movs	r3, r0
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8014318:	0011      	movs	r1, r2
 801431a:	681b      	ldr	r3, [r3, #0]
{
 801431c:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801431e:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8014320:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8014322:	4019      	ands	r1, r3
 8014324:	421a      	tst	r2, r3
 8014326:	d10c      	bne.n	8014342 <UART_DMAReceiveCplt+0x2e>
  {
    huart->RxXferCount = 0;
 8014328:	235a      	movs	r3, #90	; 0x5a
 801432a:	52c1      	strh	r1, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801432c:	2140      	movs	r1, #64	; 0x40
 801432e:	6802      	ldr	r2, [r0, #0]
 8014330:	6893      	ldr	r3, [r2, #8]
 8014332:	438b      	bics	r3, r1
 8014334:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014336:	2369      	movs	r3, #105	; 0x69
 8014338:	5cc2      	ldrb	r2, [r0, r3]
 801433a:	2a32      	cmp	r2, #50	; 0x32
 801433c:	d004      	beq.n	8014348 <UART_DMAReceiveCplt+0x34>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 801433e:	2201      	movs	r2, #1
 8014340:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8014342:	f7f9 fdd1 	bl	800dee8 <HAL_UART_RxCpltCallback>
}
 8014346:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8014348:	3a20      	subs	r2, #32
 801434a:	54c2      	strb	r2, [r0, r3]
 801434c:	e7f9      	b.n	8014342 <UART_DMAReceiveCplt+0x2e>
 801434e:	46c0      	nop			; (mov r8, r8)

08014350 <HAL_UART_RxHalfCpltCallback>:
 8014350:	4770      	bx	lr
 8014352:	46c0      	nop			; (mov r8, r8)

08014354 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014354:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8014356:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8014358:	f7ff fffa 	bl	8014350 <HAL_UART_RxHalfCpltCallback>
}
 801435c:	bd10      	pop	{r4, pc}
 801435e:	46c0      	nop			; (mov r8, r8)

08014360 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8014360:	2300      	movs	r3, #0
 8014362:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8014364:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8014366:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8014368:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801436a:	3a08      	subs	r2, #8
 801436c:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 801436e:	3369      	adds	r3, #105	; 0x69
 8014370:	3a51      	subs	r2, #81	; 0x51
 8014372:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014374:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8014376:	320f      	adds	r2, #15
 8014378:	4313      	orrs	r3, r2
 801437a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801437c:	f7f9 fd90 	bl	800dea0 <HAL_UART_ErrorCallback>
}
 8014380:	bd10      	pop	{r4, pc}
 8014382:	46c0      	nop			; (mov r8, r8)

08014384 <UART_SetConfig>:
{
 8014384:	b570      	push	{r4, r5, r6, lr}
 8014386:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8014388:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801438a:	69c1      	ldr	r1, [r0, #28]
 801438c:	6883      	ldr	r3, [r0, #8]
 801438e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8014390:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014392:	4303      	orrs	r3, r0
 8014394:	6960      	ldr	r0, [r4, #20]
 8014396:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8014398:	4862      	ldr	r0, [pc, #392]	; (8014524 <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801439a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801439c:	4002      	ands	r2, r0
 801439e:	4313      	orrs	r3, r2
 80143a0:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80143a2:	686b      	ldr	r3, [r5, #4]
 80143a4:	4a60      	ldr	r2, [pc, #384]	; (8014528 <UART_SetConfig+0x1a4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80143a6:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80143a8:	4013      	ands	r3, r2
 80143aa:	68e2      	ldr	r2, [r4, #12]
 80143ac:	4313      	orrs	r3, r2
 80143ae:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80143b0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80143b2:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80143b4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80143b6:	485d      	ldr	r0, [pc, #372]	; (801452c <UART_SetConfig+0x1a8>)
 80143b8:	4002      	ands	r2, r0
 80143ba:	4313      	orrs	r3, r2
 80143bc:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80143be:	4b5c      	ldr	r3, [pc, #368]	; (8014530 <UART_SetConfig+0x1ac>)
 80143c0:	429d      	cmp	r5, r3
 80143c2:	d032      	beq.n	801442a <UART_SetConfig+0xa6>
 80143c4:	4b5b      	ldr	r3, [pc, #364]	; (8014534 <UART_SetConfig+0x1b0>)
 80143c6:	429d      	cmp	r5, r3
 80143c8:	d018      	beq.n	80143fc <UART_SetConfig+0x78>
 80143ca:	4b5b      	ldr	r3, [pc, #364]	; (8014538 <UART_SetConfig+0x1b4>)
 80143cc:	429d      	cmp	r5, r3
 80143ce:	d100      	bne.n	80143d2 <UART_SetConfig+0x4e>
 80143d0:	e085      	b.n	80144de <UART_SetConfig+0x15a>
 80143d2:	4b5a      	ldr	r3, [pc, #360]	; (801453c <UART_SetConfig+0x1b8>)
 80143d4:	429d      	cmp	r5, r3
 80143d6:	d02f      	beq.n	8014438 <UART_SetConfig+0xb4>
 80143d8:	4b59      	ldr	r3, [pc, #356]	; (8014540 <UART_SetConfig+0x1bc>)
 80143da:	429d      	cmp	r5, r3
 80143dc:	d02c      	beq.n	8014438 <UART_SetConfig+0xb4>
 80143de:	4b59      	ldr	r3, [pc, #356]	; (8014544 <UART_SetConfig+0x1c0>)
 80143e0:	429d      	cmp	r5, r3
 80143e2:	d029      	beq.n	8014438 <UART_SetConfig+0xb4>
 80143e4:	4b58      	ldr	r3, [pc, #352]	; (8014548 <UART_SetConfig+0x1c4>)
 80143e6:	429d      	cmp	r5, r3
 80143e8:	d026      	beq.n	8014438 <UART_SetConfig+0xb4>
 80143ea:	4b58      	ldr	r3, [pc, #352]	; (801454c <UART_SetConfig+0x1c8>)
 80143ec:	429d      	cmp	r5, r3
 80143ee:	d023      	beq.n	8014438 <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80143f0:	2380      	movs	r3, #128	; 0x80
 80143f2:	021b      	lsls	r3, r3, #8
 80143f4:	4299      	cmp	r1, r3
 80143f6:	d051      	beq.n	801449c <UART_SetConfig+0x118>
    switch (clocksource)
 80143f8:	2001      	movs	r0, #1
 80143fa:	e02b      	b.n	8014454 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80143fc:	22c0      	movs	r2, #192	; 0xc0
 80143fe:	2080      	movs	r0, #128	; 0x80
 8014400:	4b53      	ldr	r3, [pc, #332]	; (8014550 <UART_SetConfig+0x1cc>)
 8014402:	0292      	lsls	r2, r2, #10
 8014404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014406:	0280      	lsls	r0, r0, #10
 8014408:	4013      	ands	r3, r2
 801440a:	4283      	cmp	r3, r0
 801440c:	d04a      	beq.n	80144a4 <UART_SetConfig+0x120>
 801440e:	d822      	bhi.n	8014456 <UART_SetConfig+0xd2>
 8014410:	2b00      	cmp	r3, #0
 8014412:	d011      	beq.n	8014438 <UART_SetConfig+0xb4>
 8014414:	2280      	movs	r2, #128	; 0x80
 8014416:	0252      	lsls	r2, r2, #9
 8014418:	4293      	cmp	r3, r2
 801441a:	d1e9      	bne.n	80143f0 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801441c:	2380      	movs	r3, #128	; 0x80
 801441e:	021b      	lsls	r3, r3, #8
 8014420:	4299      	cmp	r1, r3
 8014422:	d051      	beq.n	80144c8 <UART_SetConfig+0x144>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8014424:	f7ff fa76 	bl	8013914 <HAL_RCC_GetSysClockFreq>
 8014428:	e00c      	b.n	8014444 <UART_SetConfig+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801442a:	4b49      	ldr	r3, [pc, #292]	; (8014550 <UART_SetConfig+0x1cc>)
 801442c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801442e:	2303      	movs	r3, #3
 8014430:	4013      	ands	r3, r2
 8014432:	3b01      	subs	r3, #1
 8014434:	2b02      	cmp	r3, #2
 8014436:	d917      	bls.n	8014468 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014438:	2380      	movs	r3, #128	; 0x80
 801443a:	021b      	lsls	r3, r3, #8
 801443c:	4299      	cmp	r1, r3
 801443e:	d065      	beq.n	801450c <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8014440:	f7ff fac4 	bl	80139cc <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8014444:	6825      	ldr	r5, [r4, #0]
 8014446:	6861      	ldr	r1, [r4, #4]
 8014448:	f7eb fe82 	bl	8000150 <__udivsi3>
 801444c:	0400      	lsls	r0, r0, #16
 801444e:	0c00      	lsrs	r0, r0, #16
 8014450:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8014452:	2000      	movs	r0, #0
}
 8014454:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014456:	4293      	cmp	r3, r2
 8014458:	d1ca      	bne.n	80143f0 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801445a:	2380      	movs	r3, #128	; 0x80
 801445c:	021b      	lsls	r3, r3, #8
 801445e:	4299      	cmp	r1, r3
 8014460:	d03a      	beq.n	80144d8 <UART_SetConfig+0x154>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8014462:	6861      	ldr	r1, [r4, #4]
 8014464:	483b      	ldr	r0, [pc, #236]	; (8014554 <UART_SetConfig+0x1d0>)
 8014466:	e7ef      	b.n	8014448 <UART_SetConfig+0xc4>
 8014468:	4a3b      	ldr	r2, [pc, #236]	; (8014558 <UART_SetConfig+0x1d4>)
 801446a:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801446c:	2280      	movs	r2, #128	; 0x80
 801446e:	0212      	lsls	r2, r2, #8
 8014470:	4291      	cmp	r1, r2
 8014472:	d00c      	beq.n	801448e <UART_SetConfig+0x10a>
    switch (clocksource)
 8014474:	2b04      	cmp	r3, #4
 8014476:	d0d5      	beq.n	8014424 <UART_SetConfig+0xa0>
 8014478:	d943      	bls.n	8014502 <UART_SetConfig+0x17e>
 801447a:	2b08      	cmp	r3, #8
 801447c:	d1bc      	bne.n	80143f8 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 801447e:	2080      	movs	r0, #128	; 0x80
 8014480:	6861      	ldr	r1, [r4, #4]
 8014482:	0200      	lsls	r0, r0, #8
 8014484:	f7eb fe64 	bl	8000150 <__udivsi3>
 8014488:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801448a:	2000      	movs	r0, #0
        break;
 801448c:	e7e2      	b.n	8014454 <UART_SetConfig+0xd0>
    switch (clocksource)
 801448e:	2b04      	cmp	r3, #4
 8014490:	d01a      	beq.n	80144c8 <UART_SetConfig+0x144>
 8014492:	d843      	bhi.n	801451c <UART_SetConfig+0x198>
 8014494:	2b00      	cmp	r3, #0
 8014496:	d039      	beq.n	801450c <UART_SetConfig+0x188>
 8014498:	2b02      	cmp	r3, #2
 801449a:	d01d      	beq.n	80144d8 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801449c:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 801449e:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80144a0:	60eb      	str	r3, [r5, #12]
 80144a2:	e7d7      	b.n	8014454 <UART_SetConfig+0xd0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80144a4:	2380      	movs	r3, #128	; 0x80
 80144a6:	021b      	lsls	r3, r3, #8
 80144a8:	4299      	cmp	r1, r3
 80144aa:	d1e8      	bne.n	801447e <UART_SetConfig+0xfa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80144ac:	2080      	movs	r0, #128	; 0x80
 80144ae:	6861      	ldr	r1, [r4, #4]
 80144b0:	0240      	lsls	r0, r0, #9
 80144b2:	f7eb fe4d 	bl	8000150 <__udivsi3>
        break;
 80144b6:	220f      	movs	r2, #15
 80144b8:	0703      	lsls	r3, r0, #28
 80144ba:	0f5b      	lsrs	r3, r3, #29
 80144bc:	4390      	bics	r0, r2
 80144be:	4303      	orrs	r3, r0
 80144c0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80144c2:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 80144c4:	60eb      	str	r3, [r5, #12]
 80144c6:	e7c5      	b.n	8014454 <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80144c8:	f7ff fa24 	bl	8013914 <HAL_RCC_GetSysClockFreq>
 80144cc:	6861      	ldr	r1, [r4, #4]
 80144ce:	0040      	lsls	r0, r0, #1
 80144d0:	f7eb fe3e 	bl	8000150 <__udivsi3>
        break;
 80144d4:	6825      	ldr	r5, [r4, #0]
 80144d6:	e7ee      	b.n	80144b6 <UART_SetConfig+0x132>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80144d8:	6861      	ldr	r1, [r4, #4]
 80144da:	4820      	ldr	r0, [pc, #128]	; (801455c <UART_SetConfig+0x1d8>)
 80144dc:	e7e9      	b.n	80144b2 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80144de:	22c0      	movs	r2, #192	; 0xc0
 80144e0:	2080      	movs	r0, #128	; 0x80
 80144e2:	4b1b      	ldr	r3, [pc, #108]	; (8014550 <UART_SetConfig+0x1cc>)
 80144e4:	0312      	lsls	r2, r2, #12
 80144e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144e8:	0300      	lsls	r0, r0, #12
 80144ea:	4013      	ands	r3, r2
 80144ec:	4283      	cmp	r3, r0
 80144ee:	d0d9      	beq.n	80144a4 <UART_SetConfig+0x120>
 80144f0:	d8b1      	bhi.n	8014456 <UART_SetConfig+0xd2>
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d0a0      	beq.n	8014438 <UART_SetConfig+0xb4>
 80144f6:	2280      	movs	r2, #128	; 0x80
 80144f8:	02d2      	lsls	r2, r2, #11
 80144fa:	4293      	cmp	r3, r2
 80144fc:	d100      	bne.n	8014500 <UART_SetConfig+0x17c>
 80144fe:	e78d      	b.n	801441c <UART_SetConfig+0x98>
 8014500:	e776      	b.n	80143f0 <UART_SetConfig+0x6c>
    switch (clocksource)
 8014502:	2b00      	cmp	r3, #0
 8014504:	d09c      	beq.n	8014440 <UART_SetConfig+0xbc>
 8014506:	2b02      	cmp	r3, #2
 8014508:	d0ab      	beq.n	8014462 <UART_SetConfig+0xde>
 801450a:	e775      	b.n	80143f8 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801450c:	f7ff fa5e 	bl	80139cc <HAL_RCC_GetPCLK1Freq>
 8014510:	6861      	ldr	r1, [r4, #4]
 8014512:	0040      	lsls	r0, r0, #1
 8014514:	f7eb fe1c 	bl	8000150 <__udivsi3>
        break;
 8014518:	6825      	ldr	r5, [r4, #0]
 801451a:	e7cc      	b.n	80144b6 <UART_SetConfig+0x132>
    switch (clocksource)
 801451c:	2b08      	cmp	r3, #8
 801451e:	d0c5      	beq.n	80144ac <UART_SetConfig+0x128>
 8014520:	e7bc      	b.n	801449c <UART_SetConfig+0x118>
 8014522:	46c0      	nop			; (mov r8, r8)
 8014524:	efff69f3 	.word	0xefff69f3
 8014528:	ffffcfff 	.word	0xffffcfff
 801452c:	fffff4ff 	.word	0xfffff4ff
 8014530:	40013800 	.word	0x40013800
 8014534:	40004400 	.word	0x40004400
 8014538:	40004800 	.word	0x40004800
 801453c:	40004c00 	.word	0x40004c00
 8014540:	40005000 	.word	0x40005000
 8014544:	40011400 	.word	0x40011400
 8014548:	40011800 	.word	0x40011800
 801454c:	40011c00 	.word	0x40011c00
 8014550:	40021000 	.word	0x40021000
 8014554:	007a1200 	.word	0x007a1200
 8014558:	0801e54c 	.word	0x0801e54c
 801455c:	00f42400 	.word	0x00f42400

08014560 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014560:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8014562:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014564:	07da      	lsls	r2, r3, #31
 8014566:	d506      	bpl.n	8014576 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014568:	6801      	ldr	r1, [r0, #0]
 801456a:	4c28      	ldr	r4, [pc, #160]	; (801460c <UART_AdvFeatureConfig+0xac>)
 801456c:	684a      	ldr	r2, [r1, #4]
 801456e:	4022      	ands	r2, r4
 8014570:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014572:	4322      	orrs	r2, r4
 8014574:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014576:	079a      	lsls	r2, r3, #30
 8014578:	d506      	bpl.n	8014588 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801457a:	6801      	ldr	r1, [r0, #0]
 801457c:	4c24      	ldr	r4, [pc, #144]	; (8014610 <UART_AdvFeatureConfig+0xb0>)
 801457e:	684a      	ldr	r2, [r1, #4]
 8014580:	4022      	ands	r2, r4
 8014582:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8014584:	4322      	orrs	r2, r4
 8014586:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014588:	075a      	lsls	r2, r3, #29
 801458a:	d506      	bpl.n	801459a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801458c:	6801      	ldr	r1, [r0, #0]
 801458e:	4c21      	ldr	r4, [pc, #132]	; (8014614 <UART_AdvFeatureConfig+0xb4>)
 8014590:	684a      	ldr	r2, [r1, #4]
 8014592:	4022      	ands	r2, r4
 8014594:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8014596:	4322      	orrs	r2, r4
 8014598:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801459a:	071a      	lsls	r2, r3, #28
 801459c:	d506      	bpl.n	80145ac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801459e:	6801      	ldr	r1, [r0, #0]
 80145a0:	4c1d      	ldr	r4, [pc, #116]	; (8014618 <UART_AdvFeatureConfig+0xb8>)
 80145a2:	684a      	ldr	r2, [r1, #4]
 80145a4:	4022      	ands	r2, r4
 80145a6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80145a8:	4322      	orrs	r2, r4
 80145aa:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80145ac:	06da      	lsls	r2, r3, #27
 80145ae:	d506      	bpl.n	80145be <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80145b0:	6801      	ldr	r1, [r0, #0]
 80145b2:	4c1a      	ldr	r4, [pc, #104]	; (801461c <UART_AdvFeatureConfig+0xbc>)
 80145b4:	688a      	ldr	r2, [r1, #8]
 80145b6:	4022      	ands	r2, r4
 80145b8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80145ba:	4322      	orrs	r2, r4
 80145bc:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80145be:	069a      	lsls	r2, r3, #26
 80145c0:	d506      	bpl.n	80145d0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80145c2:	6801      	ldr	r1, [r0, #0]
 80145c4:	4c16      	ldr	r4, [pc, #88]	; (8014620 <UART_AdvFeatureConfig+0xc0>)
 80145c6:	688a      	ldr	r2, [r1, #8]
 80145c8:	4022      	ands	r2, r4
 80145ca:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80145cc:	4322      	orrs	r2, r4
 80145ce:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80145d0:	065a      	lsls	r2, r3, #25
 80145d2:	d50a      	bpl.n	80145ea <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80145d4:	6801      	ldr	r1, [r0, #0]
 80145d6:	4d13      	ldr	r5, [pc, #76]	; (8014624 <UART_AdvFeatureConfig+0xc4>)
 80145d8:	684a      	ldr	r2, [r1, #4]
 80145da:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80145dc:	402a      	ands	r2, r5
 80145de:	4322      	orrs	r2, r4
 80145e0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80145e2:	2280      	movs	r2, #128	; 0x80
 80145e4:	0352      	lsls	r2, r2, #13
 80145e6:	4294      	cmp	r4, r2
 80145e8:	d009      	beq.n	80145fe <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80145ea:	061b      	lsls	r3, r3, #24
 80145ec:	d506      	bpl.n	80145fc <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80145ee:	6802      	ldr	r2, [r0, #0]
 80145f0:	490d      	ldr	r1, [pc, #52]	; (8014628 <UART_AdvFeatureConfig+0xc8>)
 80145f2:	6853      	ldr	r3, [r2, #4]
 80145f4:	400b      	ands	r3, r1
 80145f6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80145f8:	430b      	orrs	r3, r1
 80145fa:	6053      	str	r3, [r2, #4]
}
 80145fc:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80145fe:	684a      	ldr	r2, [r1, #4]
 8014600:	4c0a      	ldr	r4, [pc, #40]	; (801462c <UART_AdvFeatureConfig+0xcc>)
 8014602:	4022      	ands	r2, r4
 8014604:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8014606:	4322      	orrs	r2, r4
 8014608:	604a      	str	r2, [r1, #4]
 801460a:	e7ee      	b.n	80145ea <UART_AdvFeatureConfig+0x8a>
 801460c:	fffdffff 	.word	0xfffdffff
 8014610:	fffeffff 	.word	0xfffeffff
 8014614:	fffbffff 	.word	0xfffbffff
 8014618:	ffff7fff 	.word	0xffff7fff
 801461c:	ffffefff 	.word	0xffffefff
 8014620:	ffffdfff 	.word	0xffffdfff
 8014624:	ffefffff 	.word	0xffefffff
 8014628:	fff7ffff 	.word	0xfff7ffff
 801462c:	ff9fffff 	.word	0xff9fffff

08014630 <UART_WaitOnFlagUntilTimeout>:
{
 8014630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014632:	46c6      	mov	lr, r8
 8014634:	4690      	mov	r8, r2
 8014636:	b500      	push	{lr}
 8014638:	001d      	movs	r5, r3
 801463a:	0006      	movs	r6, r0
 801463c:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 801463e:	f7fc fd81 	bl	8011144 <HAL_GetTick>
  if(Status == RESET)
 8014642:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8014644:	0007      	movs	r7, r0
  if(Status == RESET)
 8014646:	2b00      	cmp	r3, #0
 8014648:	d112      	bne.n	8014670 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801464a:	6833      	ldr	r3, [r6, #0]
 801464c:	e001      	b.n	8014652 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 801464e:	1c6a      	adds	r2, r5, #1
 8014650:	d117      	bne.n	8014682 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8014652:	69da      	ldr	r2, [r3, #28]
 8014654:	4022      	ands	r2, r4
 8014656:	42a2      	cmp	r2, r4
 8014658:	d1f9      	bne.n	801464e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 801465a:	2000      	movs	r0, #0
}
 801465c:	bc80      	pop	{r7}
 801465e:	46b8      	mov	r8, r7
 8014660:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8014662:	2d00      	cmp	r5, #0
 8014664:	d015      	beq.n	8014692 <UART_WaitOnFlagUntilTimeout+0x62>
 8014666:	f7fc fd6d 	bl	8011144 <HAL_GetTick>
 801466a:	1bc0      	subs	r0, r0, r7
 801466c:	42a8      	cmp	r0, r5
 801466e:	d80f      	bhi.n	8014690 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8014670:	6833      	ldr	r3, [r6, #0]
 8014672:	e001      	b.n	8014678 <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8014674:	1c6a      	adds	r2, r5, #1
 8014676:	d1f4      	bne.n	8014662 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8014678:	69da      	ldr	r2, [r3, #28]
 801467a:	4022      	ands	r2, r4
 801467c:	42a2      	cmp	r2, r4
 801467e:	d0f9      	beq.n	8014674 <UART_WaitOnFlagUntilTimeout+0x44>
 8014680:	e7eb      	b.n	801465a <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8014682:	2d00      	cmp	r5, #0
 8014684:	d005      	beq.n	8014692 <UART_WaitOnFlagUntilTimeout+0x62>
 8014686:	f7fc fd5d 	bl	8011144 <HAL_GetTick>
 801468a:	1bc0      	subs	r0, r0, r7
 801468c:	42a8      	cmp	r0, r5
 801468e:	d9dc      	bls.n	801464a <UART_WaitOnFlagUntilTimeout+0x1a>
 8014690:	6833      	ldr	r3, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014692:	2180      	movs	r1, #128	; 0x80
 8014694:	681a      	ldr	r2, [r3, #0]
          return HAL_TIMEOUT;
 8014696:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014698:	438a      	bics	r2, r1
 801469a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801469c:	681a      	ldr	r2, [r3, #0]
 801469e:	3960      	subs	r1, #96	; 0x60
 80146a0:	438a      	bics	r2, r1
 80146a2:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80146a4:	681a      	ldr	r2, [r3, #0]
 80146a6:	4907      	ldr	r1, [pc, #28]	; (80146c4 <UART_WaitOnFlagUntilTimeout+0x94>)
 80146a8:	400a      	ands	r2, r1
 80146aa:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80146ac:	689a      	ldr	r2, [r3, #8]
 80146ae:	3103      	adds	r1, #3
 80146b0:	31ff      	adds	r1, #255	; 0xff
 80146b2:	438a      	bics	r2, r1
 80146b4:	609a      	str	r2, [r3, #8]
          huart->State = HAL_UART_STATE_READY;
 80146b6:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 80146b8:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 80146ba:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 80146bc:	3b01      	subs	r3, #1
 80146be:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80146c0:	e7cc      	b.n	801465c <UART_WaitOnFlagUntilTimeout+0x2c>
 80146c2:	46c0      	nop			; (mov r8, r8)
 80146c4:	fffffeff 	.word	0xfffffeff

080146c8 <HAL_UART_Transmit>:
{
 80146c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146ca:	46c6      	mov	lr, r8
 80146cc:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80146ce:	2369      	movs	r3, #105	; 0x69
{
 80146d0:	b500      	push	{lr}
 80146d2:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80146d4:	5cc1      	ldrb	r1, [r0, r3]
{
 80146d6:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80146d8:	2901      	cmp	r1, #1
 80146da:	d002      	beq.n	80146e2 <HAL_UART_Transmit+0x1a>
 80146dc:	5cc3      	ldrb	r3, [r0, r3]
 80146de:	2b22      	cmp	r3, #34	; 0x22
 80146e0:	d149      	bne.n	8014776 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0))
 80146e2:	2d00      	cmp	r5, #0
 80146e4:	d04b      	beq.n	801477e <HAL_UART_Transmit+0xb6>
 80146e6:	2a00      	cmp	r2, #0
 80146e8:	d049      	beq.n	801477e <HAL_UART_Transmit+0xb6>
    __HAL_LOCK(huart);
 80146ea:	2368      	movs	r3, #104	; 0x68
 80146ec:	5ce1      	ldrb	r1, [r4, r3]
 80146ee:	2901      	cmp	r1, #1
 80146f0:	d041      	beq.n	8014776 <HAL_UART_Transmit+0xae>
 80146f2:	2101      	movs	r1, #1
 80146f4:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80146f6:	2300      	movs	r3, #0
 80146f8:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80146fa:	3369      	adds	r3, #105	; 0x69
 80146fc:	5ce1      	ldrb	r1, [r4, r3]
 80146fe:	2922      	cmp	r1, #34	; 0x22
 8014700:	d041      	beq.n	8014786 <HAL_UART_Transmit+0xbe>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8014702:	2112      	movs	r1, #18
 8014704:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8014706:	2350      	movs	r3, #80	; 0x50
 8014708:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801470a:	2380      	movs	r3, #128	; 0x80
 801470c:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 801470e:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014710:	4698      	mov	r8, r3
 8014712:	e006      	b.n	8014722 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8014714:	782b      	ldrb	r3, [r5, #0]
 8014716:	6822      	ldr	r2, [r4, #0]
 8014718:	3501      	adds	r5, #1
 801471a:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 801471c:	5ba2      	ldrh	r2, [r4, r6]
 801471e:	2a00      	cmp	r2, #0
 8014720:	d018      	beq.n	8014754 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 8014722:	3a01      	subs	r2, #1
 8014724:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8014726:	003b      	movs	r3, r7
 8014728:	2200      	movs	r2, #0
 801472a:	2180      	movs	r1, #128	; 0x80
 801472c:	0020      	movs	r0, r4
 801472e:	f7ff ff7f 	bl	8014630 <UART_WaitOnFlagUntilTimeout>
 8014732:	2800      	cmp	r0, #0
 8014734:	d125      	bne.n	8014782 <HAL_UART_Transmit+0xba>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014736:	68a3      	ldr	r3, [r4, #8]
 8014738:	4543      	cmp	r3, r8
 801473a:	d1eb      	bne.n	8014714 <HAL_UART_Transmit+0x4c>
 801473c:	6923      	ldr	r3, [r4, #16]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d1e8      	bne.n	8014714 <HAL_UART_Transmit+0x4c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8014742:	882b      	ldrh	r3, [r5, #0]
 8014744:	6822      	ldr	r2, [r4, #0]
 8014746:	05db      	lsls	r3, r3, #23
 8014748:	0ddb      	lsrs	r3, r3, #23
 801474a:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 801474c:	5ba2      	ldrh	r2, [r4, r6]
        pData += 2;
 801474e:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0)
 8014750:	2a00      	cmp	r2, #0
 8014752:	d1e6      	bne.n	8014722 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8014754:	003b      	movs	r3, r7
 8014756:	2140      	movs	r1, #64	; 0x40
 8014758:	0020      	movs	r0, r4
 801475a:	f7ff ff69 	bl	8014630 <UART_WaitOnFlagUntilTimeout>
 801475e:	2800      	cmp	r0, #0
 8014760:	d10f      	bne.n	8014782 <HAL_UART_Transmit+0xba>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014762:	2369      	movs	r3, #105	; 0x69
 8014764:	5ce2      	ldrb	r2, [r4, r3]
 8014766:	2a32      	cmp	r2, #50	; 0x32
 8014768:	d010      	beq.n	801478c <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_READY;
 801476a:	2201      	movs	r2, #1
 801476c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801476e:	2368      	movs	r3, #104	; 0x68
 8014770:	2200      	movs	r2, #0
 8014772:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8014774:	e000      	b.n	8014778 <HAL_UART_Transmit+0xb0>
    return HAL_BUSY;
 8014776:	2002      	movs	r0, #2
}
 8014778:	bc80      	pop	{r7}
 801477a:	46b8      	mov	r8, r7
 801477c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 801477e:	2001      	movs	r0, #1
 8014780:	e7fa      	b.n	8014778 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 8014782:	2003      	movs	r0, #3
 8014784:	e7f8      	b.n	8014778 <HAL_UART_Transmit+0xb0>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8014786:	3110      	adds	r1, #16
 8014788:	54e1      	strb	r1, [r4, r3]
 801478a:	e7bc      	b.n	8014706 <HAL_UART_Transmit+0x3e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801478c:	3a10      	subs	r2, #16
 801478e:	54e2      	strb	r2, [r4, r3]
 8014790:	e7ed      	b.n	801476e <HAL_UART_Transmit+0xa6>
 8014792:	46c0      	nop			; (mov r8, r8)

08014794 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014794:	2300      	movs	r3, #0
{
 8014796:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8014798:	4a1a      	ldr	r2, [pc, #104]	; (8014804 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801479a:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 801479c:	6803      	ldr	r3, [r0, #0]
{
 801479e:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80147a0:	4293      	cmp	r3, r2
 80147a2:	d00d      	beq.n	80147c0 <UART_CheckIdleState+0x2c>
 80147a4:	4a18      	ldr	r2, [pc, #96]	; (8014808 <UART_CheckIdleState+0x74>)
 80147a6:	4293      	cmp	r3, r2
 80147a8:	d00a      	beq.n	80147c0 <UART_CheckIdleState+0x2c>
 80147aa:	4a18      	ldr	r2, [pc, #96]	; (801480c <UART_CheckIdleState+0x78>)
 80147ac:	4293      	cmp	r3, r2
 80147ae:	d007      	beq.n	80147c0 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 80147b0:	2369      	movs	r3, #105	; 0x69
 80147b2:	2201      	movs	r2, #1
 80147b4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80147b6:	2200      	movs	r2, #0
  return HAL_OK;
 80147b8:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80147ba:	3b01      	subs	r3, #1
 80147bc:	54e2      	strb	r2, [r4, r3]
}
 80147be:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80147c0:	681a      	ldr	r2, [r3, #0]
 80147c2:	0712      	lsls	r2, r2, #28
 80147c4:	d40e      	bmi.n	80147e4 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	075b      	lsls	r3, r3, #29
 80147ca:	d5f1      	bpl.n	80147b0 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80147cc:	23fa      	movs	r3, #250	; 0xfa
 80147ce:	2180      	movs	r1, #128	; 0x80
 80147d0:	2200      	movs	r2, #0
 80147d2:	0020      	movs	r0, r4
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	03c9      	lsls	r1, r1, #15
 80147d8:	f7ff ff2a 	bl	8014630 <UART_WaitOnFlagUntilTimeout>
 80147dc:	2800      	cmp	r0, #0
 80147de:	d0e7      	beq.n	80147b0 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 80147e0:	2003      	movs	r0, #3
 80147e2:	e7ec      	b.n	80147be <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80147e4:	23fa      	movs	r3, #250	; 0xfa
 80147e6:	2180      	movs	r1, #128	; 0x80
 80147e8:	2200      	movs	r2, #0
 80147ea:	0020      	movs	r0, r4
 80147ec:	009b      	lsls	r3, r3, #2
 80147ee:	0389      	lsls	r1, r1, #14
 80147f0:	f7ff ff1e 	bl	8014630 <UART_WaitOnFlagUntilTimeout>
 80147f4:	2800      	cmp	r0, #0
 80147f6:	d1f3      	bne.n	80147e0 <UART_CheckIdleState+0x4c>
 80147f8:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	075b      	lsls	r3, r3, #29
 80147fe:	d5d7      	bpl.n	80147b0 <UART_CheckIdleState+0x1c>
 8014800:	e7e4      	b.n	80147cc <UART_CheckIdleState+0x38>
 8014802:	46c0      	nop			; (mov r8, r8)
 8014804:	40013800 	.word	0x40013800
 8014808:	40004400 	.word	0x40004400
 801480c:	40004800 	.word	0x40004800

08014810 <HAL_UART_Init>:
{
 8014810:	b510      	push	{r4, lr}
 8014812:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8014814:	d029      	beq.n	801486a <HAL_UART_Init+0x5a>
  if(huart->State == HAL_UART_STATE_RESET)
 8014816:	2369      	movs	r3, #105	; 0x69
 8014818:	5cc3      	ldrb	r3, [r0, r3]
 801481a:	b2da      	uxtb	r2, r3
 801481c:	2b00      	cmp	r3, #0
 801481e:	d026      	beq.n	801486e <HAL_UART_Init+0x5e>
  huart->State = HAL_UART_STATE_BUSY;
 8014820:	2369      	movs	r3, #105	; 0x69
 8014822:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 8014824:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 8014826:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8014828:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801482a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 801482c:	6813      	ldr	r3, [r2, #0]
 801482e:	438b      	bics	r3, r1
 8014830:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014832:	f7ff fda7 	bl	8014384 <UART_SetConfig>
 8014836:	2801      	cmp	r0, #1
 8014838:	d017      	beq.n	801486a <HAL_UART_Init+0x5a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801483a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801483c:	2b00      	cmp	r3, #0
 801483e:	d110      	bne.n	8014862 <HAL_UART_Init+0x52>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8014840:	6823      	ldr	r3, [r4, #0]
 8014842:	490d      	ldr	r1, [pc, #52]	; (8014878 <HAL_UART_Init+0x68>)
 8014844:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8014846:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8014848:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801484a:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 801484c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801484e:	689a      	ldr	r2, [r3, #8]
 8014850:	438a      	bics	r2, r1
 8014852:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	3929      	subs	r1, #41	; 0x29
 8014858:	430a      	orrs	r2, r1
 801485a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801485c:	f7ff ff9a 	bl	8014794 <UART_CheckIdleState>
}
 8014860:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8014862:	0020      	movs	r0, r4
 8014864:	f7ff fe7c 	bl	8014560 <UART_AdvFeatureConfig>
 8014868:	e7ea      	b.n	8014840 <HAL_UART_Init+0x30>
    return HAL_ERROR;
 801486a:	2001      	movs	r0, #1
 801486c:	e7f8      	b.n	8014860 <HAL_UART_Init+0x50>
    huart->Lock = HAL_UNLOCKED;
 801486e:	3368      	adds	r3, #104	; 0x68
 8014870:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8014872:	f7f9 fdd9 	bl	800e428 <HAL_UART_MspInit>
 8014876:	e7d3      	b.n	8014820 <HAL_UART_Init+0x10>
 8014878:	ffffb7ff 	.word	0xffffb7ff

0801487c <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801487c:	2369      	movs	r3, #105	; 0x69
{
 801487e:	b510      	push	{r4, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014880:	5cc2      	ldrb	r2, [r0, r3]
 8014882:	2a12      	cmp	r2, #18
 8014884:	d002      	beq.n	801488c <UART_Transmit_IT+0x10>
 8014886:	5cc3      	ldrb	r3, [r0, r3]
 8014888:	2b32      	cmp	r3, #50	; 0x32
 801488a:	d11e      	bne.n	80148ca <UART_Transmit_IT+0x4e>
  {

    if(huart->TxXferCount == 0)
 801488c:	2352      	movs	r3, #82	; 0x52
 801488e:	5ac3      	ldrh	r3, [r0, r3]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d00f      	beq.n	80148b4 <UART_Transmit_IT+0x38>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014894:	2280      	movs	r2, #128	; 0x80
 8014896:	6881      	ldr	r1, [r0, #8]
 8014898:	0152      	lsls	r2, r2, #5
 801489a:	4291      	cmp	r1, r2
 801489c:	d017      	beq.n	80148ce <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 801489e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80148a0:	1c51      	adds	r1, r2, #1
 80148a2:	64c1      	str	r1, [r0, #76]	; 0x4c
 80148a4:	7812      	ldrb	r2, [r2, #0]
 80148a6:	6801      	ldr	r1, [r0, #0]
 80148a8:	850a      	strh	r2, [r1, #40]	; 0x28
      }

      huart->TxXferCount--;
 80148aa:	2252      	movs	r2, #82	; 0x52
 80148ac:	3b01      	subs	r3, #1
 80148ae:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 80148b0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80148b2:	bd10      	pop	{r4, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80148b4:	2180      	movs	r1, #128	; 0x80
 80148b6:	6803      	ldr	r3, [r0, #0]
      return HAL_OK;
 80148b8:	2000      	movs	r0, #0
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	438a      	bics	r2, r1
 80148be:	601a      	str	r2, [r3, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80148c0:	681a      	ldr	r2, [r3, #0]
 80148c2:	3940      	subs	r1, #64	; 0x40
 80148c4:	430a      	orrs	r2, r1
 80148c6:	601a      	str	r2, [r3, #0]
      return HAL_OK;
 80148c8:	e7f3      	b.n	80148b2 <UART_Transmit_IT+0x36>
    return HAL_BUSY;
 80148ca:	2002      	movs	r0, #2
 80148cc:	e7f1      	b.n	80148b2 <UART_Transmit_IT+0x36>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80148ce:	6902      	ldr	r2, [r0, #16]
 80148d0:	2a00      	cmp	r2, #0
 80148d2:	d1e4      	bne.n	801489e <UART_Transmit_IT+0x22>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80148d4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80148d6:	6804      	ldr	r4, [r0, #0]
 80148d8:	880a      	ldrh	r2, [r1, #0]
        huart->pTxBuffPtr += 2;
 80148da:	3102      	adds	r1, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80148dc:	05d2      	lsls	r2, r2, #23
 80148de:	0dd2      	lsrs	r2, r2, #23
 80148e0:	8522      	strh	r2, [r4, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80148e2:	64c1      	str	r1, [r0, #76]	; 0x4c
 80148e4:	e7e1      	b.n	80148aa <UART_Transmit_IT+0x2e>
 80148e6:	46c0      	nop			; (mov r8, r8)

080148e8 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80148e8:	2140      	movs	r1, #64	; 0x40
 80148ea:	6803      	ldr	r3, [r0, #0]
{
 80148ec:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80148ee:	681a      	ldr	r2, [r3, #0]
 80148f0:	438a      	bics	r2, r1
 80148f2:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80148f4:	2269      	movs	r2, #105	; 0x69
 80148f6:	5c81      	ldrb	r1, [r0, r2]
 80148f8:	2932      	cmp	r1, #50	; 0x32
 80148fa:	d008      	beq.n	801490e <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80148fc:	2401      	movs	r4, #1
 80148fe:	6899      	ldr	r1, [r3, #8]
 8014900:	43a1      	bics	r1, r4
 8014902:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 8014904:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 8014906:	f7f9 fab3 	bl	800de70 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 801490a:	2000      	movs	r0, #0
 801490c:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 801490e:	2322      	movs	r3, #34	; 0x22
 8014910:	5483      	strb	r3, [r0, r2]
 8014912:	e7f8      	b.n	8014906 <UART_EndTransmit_IT+0x1e>

08014914 <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014914:	2269      	movs	r2, #105	; 0x69
{
 8014916:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014918:	5c81      	ldrb	r1, [r0, r2]
{
 801491a:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801491c:	2922      	cmp	r1, #34	; 0x22
 801491e:	d002      	beq.n	8014926 <UART_Receive_IT+0x12>
 8014920:	5c82      	ldrb	r2, [r0, r2]
 8014922:	2a32      	cmp	r2, #50	; 0x32
 8014924:	d12d      	bne.n	8014982 <UART_Receive_IT+0x6e>
  uint16_t uhMask = huart->Mask;
 8014926:	225c      	movs	r2, #92	; 0x5c
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014928:	2180      	movs	r1, #128	; 0x80
 801492a:	6898      	ldr	r0, [r3, #8]
  uint16_t uhMask = huart->Mask;
 801492c:	5a9a      	ldrh	r2, [r3, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801492e:	0149      	lsls	r1, r1, #5
 8014930:	4288      	cmp	r0, r1
 8014932:	d028      	beq.n	8014986 <UART_Receive_IT+0x72>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014934:	6819      	ldr	r1, [r3, #0]
 8014936:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 8014938:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801493a:	4002      	ands	r2, r0
 801493c:	1c4c      	adds	r4, r1, #1
 801493e:	655c      	str	r4, [r3, #84]	; 0x54
 8014940:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8014942:	215a      	movs	r1, #90	; 0x5a
 8014944:	5a5a      	ldrh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8014946:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 8014948:	3a01      	subs	r2, #1
 801494a:	b292      	uxth	r2, r2
 801494c:	525a      	strh	r2, [r3, r1]
 801494e:	2a00      	cmp	r2, #0
 8014950:	d116      	bne.n	8014980 <UART_Receive_IT+0x6c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	3020      	adds	r0, #32
 8014956:	6811      	ldr	r1, [r2, #0]
 8014958:	4381      	bics	r1, r0
 801495a:	6011      	str	r1, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801495c:	2169      	movs	r1, #105	; 0x69
 801495e:	5c58      	ldrb	r0, [r3, r1]
 8014960:	2832      	cmp	r0, #50	; 0x32
 8014962:	d01b      	beq.n	801499c <UART_Receive_IT+0x88>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014964:	6810      	ldr	r0, [r2, #0]
 8014966:	4c0f      	ldr	r4, [pc, #60]	; (80149a4 <UART_Receive_IT+0x90>)
 8014968:	4020      	ands	r0, r4
 801496a:	6010      	str	r0, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801496c:	6890      	ldr	r0, [r2, #8]
 801496e:	3403      	adds	r4, #3
 8014970:	34ff      	adds	r4, #255	; 0xff
 8014972:	43a0      	bics	r0, r4
 8014974:	6090      	str	r0, [r2, #8]
        huart->State = HAL_UART_STATE_READY;
 8014976:	545c      	strb	r4, [r3, r1]
      HAL_UART_RxCpltCallback(huart);
 8014978:	0018      	movs	r0, r3
 801497a:	f7f9 fab5 	bl	800dee8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 801497e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8014980:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8014982:	2002      	movs	r0, #2
 8014984:	e7fc      	b.n	8014980 <UART_Receive_IT+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014986:	6919      	ldr	r1, [r3, #16]
 8014988:	2900      	cmp	r1, #0
 801498a:	d1d3      	bne.n	8014934 <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801498c:	6818      	ldr	r0, [r3, #0]
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 801498e:	6d59      	ldr	r1, [r3, #84]	; 0x54
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8014990:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8014992:	4002      	ands	r2, r0
 8014994:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 8014996:	3102      	adds	r1, #2
 8014998:	6559      	str	r1, [r3, #84]	; 0x54
 801499a:	e7d2      	b.n	8014942 <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 801499c:	2212      	movs	r2, #18
 801499e:	545a      	strb	r2, [r3, r1]
 80149a0:	e7ea      	b.n	8014978 <UART_Receive_IT+0x64>
 80149a2:	46c0      	nop			; (mov r8, r8)
 80149a4:	fffffeff 	.word	0xfffffeff

080149a8 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80149a8:	4770      	bx	lr
 80149aa:	46c0      	nop			; (mov r8, r8)

080149ac <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80149ac:	2201      	movs	r2, #1
 80149ae:	6803      	ldr	r3, [r0, #0]
{
 80149b0:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80149b2:	69d9      	ldr	r1, [r3, #28]
{
 80149b4:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80149b6:	420a      	tst	r2, r1
 80149b8:	d002      	beq.n	80149c0 <HAL_UART_IRQHandler+0x14>
 80149ba:	6819      	ldr	r1, [r3, #0]
 80149bc:	05c9      	lsls	r1, r1, #23
 80149be:	d456      	bmi.n	8014a6e <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80149c0:	2202      	movs	r2, #2
 80149c2:	69d9      	ldr	r1, [r3, #28]
 80149c4:	420a      	tst	r2, r1
 80149c6:	d003      	beq.n	80149d0 <HAL_UART_IRQHandler+0x24>
 80149c8:	2101      	movs	r1, #1
 80149ca:	6898      	ldr	r0, [r3, #8]
 80149cc:	4201      	tst	r1, r0
 80149ce:	d146      	bne.n	8014a5e <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80149d0:	2204      	movs	r2, #4
 80149d2:	69d9      	ldr	r1, [r3, #28]
 80149d4:	420a      	tst	r2, r1
 80149d6:	d003      	beq.n	80149e0 <HAL_UART_IRQHandler+0x34>
 80149d8:	2101      	movs	r1, #1
 80149da:	6898      	ldr	r0, [r3, #8]
 80149dc:	4201      	tst	r1, r0
 80149de:	d136      	bne.n	8014a4e <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80149e0:	2208      	movs	r2, #8
 80149e2:	69d9      	ldr	r1, [r3, #28]
 80149e4:	420a      	tst	r2, r1
 80149e6:	d003      	beq.n	80149f0 <HAL_UART_IRQHandler+0x44>
 80149e8:	2101      	movs	r1, #1
 80149ea:	6898      	ldr	r0, [r3, #8]
 80149ec:	4201      	tst	r1, r0
 80149ee:	d120      	bne.n	8014a32 <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80149f0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80149f2:	2a00      	cmp	r2, #0
 80149f4:	d126      	bne.n	8014a44 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80149f6:	2280      	movs	r2, #128	; 0x80
 80149f8:	69d9      	ldr	r1, [r3, #28]
 80149fa:	0352      	lsls	r2, r2, #13
 80149fc:	4211      	tst	r1, r2
 80149fe:	d002      	beq.n	8014a06 <HAL_UART_IRQHandler+0x5a>
 8014a00:	6899      	ldr	r1, [r3, #8]
 8014a02:	0249      	lsls	r1, r1, #9
 8014a04:	d43e      	bmi.n	8014a84 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8014a06:	2220      	movs	r2, #32
 8014a08:	69d9      	ldr	r1, [r3, #28]
 8014a0a:	420a      	tst	r2, r1
 8014a0c:	d002      	beq.n	8014a14 <HAL_UART_IRQHandler+0x68>
 8014a0e:	6819      	ldr	r1, [r3, #0]
 8014a10:	420a      	tst	r2, r1
 8014a12:	d140      	bne.n	8014a96 <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8014a14:	2280      	movs	r2, #128	; 0x80
 8014a16:	69d9      	ldr	r1, [r3, #28]
 8014a18:	420a      	tst	r2, r1
 8014a1a:	d002      	beq.n	8014a22 <HAL_UART_IRQHandler+0x76>
 8014a1c:	6819      	ldr	r1, [r3, #0]
 8014a1e:	420a      	tst	r2, r1
 8014a20:	d142      	bne.n	8014aa8 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8014a22:	2240      	movs	r2, #64	; 0x40
 8014a24:	69d9      	ldr	r1, [r3, #28]
 8014a26:	420a      	tst	r2, r1
 8014a28:	d002      	beq.n	8014a30 <HAL_UART_IRQHandler+0x84>
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	421a      	tst	r2, r3
 8014a2e:	d125      	bne.n	8014a7c <HAL_UART_IRQHandler+0xd0>
}
 8014a30:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8014a32:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014a34:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8014a36:	4302      	orrs	r2, r0
 8014a38:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014a3a:	2269      	movs	r2, #105	; 0x69
 8014a3c:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014a3e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8014a40:	2a00      	cmp	r2, #0
 8014a42:	d0d8      	beq.n	80149f6 <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8014a44:	0020      	movs	r0, r4
 8014a46:	f7f9 fa2b 	bl	800dea0 <HAL_UART_ErrorCallback>
 8014a4a:	6823      	ldr	r3, [r4, #0]
 8014a4c:	e7d3      	b.n	80149f6 <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014a4e:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8014a50:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014a52:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8014a54:	4302      	orrs	r2, r0
 8014a56:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014a58:	2269      	movs	r2, #105	; 0x69
 8014a5a:	54a1      	strb	r1, [r4, r2]
 8014a5c:	e7c0      	b.n	80149e0 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014a5e:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8014a60:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014a62:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8014a64:	4302      	orrs	r2, r0
 8014a66:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014a68:	2269      	movs	r2, #105	; 0x69
 8014a6a:	54a1      	strb	r1, [r4, r2]
 8014a6c:	e7b0      	b.n	80149d0 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8014a6e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014a70:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8014a72:	4311      	orrs	r1, r2
 8014a74:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014a76:	2169      	movs	r1, #105	; 0x69
 8014a78:	5442      	strb	r2, [r0, r1]
 8014a7a:	e7a1      	b.n	80149c0 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 8014a7c:	0020      	movs	r0, r4
 8014a7e:	f7ff ff33 	bl	80148e8 <UART_EndTransmit_IT>
}
 8014a82:	e7d5      	b.n	8014a30 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8014a84:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8014a86:	2369      	movs	r3, #105	; 0x69
 8014a88:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 8014a8a:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 8014a8c:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8014a8e:	f7ff ff8b 	bl	80149a8 <HAL_UARTEx_WakeupCallback>
 8014a92:	6823      	ldr	r3, [r4, #0]
 8014a94:	e7b7      	b.n	8014a06 <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8014a96:	0020      	movs	r0, r4
 8014a98:	f7ff ff3c 	bl	8014914 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014a9c:	2108      	movs	r1, #8
 8014a9e:	6823      	ldr	r3, [r4, #0]
 8014aa0:	699a      	ldr	r2, [r3, #24]
 8014aa2:	430a      	orrs	r2, r1
 8014aa4:	619a      	str	r2, [r3, #24]
 8014aa6:	e7b5      	b.n	8014a14 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8014aa8:	0020      	movs	r0, r4
 8014aaa:	f7ff fee7 	bl	801487c <UART_Transmit_IT>
 8014aae:	6823      	ldr	r3, [r4, #0]
 8014ab0:	e7b7      	b.n	8014a22 <HAL_UART_IRQHandler+0x76>
 8014ab2:	46c0      	nop			; (mov r8, r8)

08014ab4 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8014ab4:	b510      	push	{r4, lr}
	
	Module_Init();		//Initialize Module &  BitzOS
 8014ab6:	f7f0 fa7b 	bl	8004fb0 <Module_Init>
	
	//Don't place your code here.
	for(;;){
 8014aba:	e7fe      	b.n	8014aba <main+0x6>

08014abc <UserTask>:

/* User Task */
void UserTask(void *argument){
	
	// put your code here, to run repeatedly.
	while(1){
 8014abc:	e7fe      	b.n	8014abc <UserTask>
 8014abe:	46c0      	nop			; (mov r8, r8)

08014ac0 <atof>:
 8014ac0:	b510      	push	{r4, lr}
 8014ac2:	2100      	movs	r1, #0
 8014ac4:	f001 fb74 	bl	80161b0 <strtod>
 8014ac8:	bd10      	pop	{r4, pc}

08014aca <atoi>:
 8014aca:	b510      	push	{r4, lr}
 8014acc:	220a      	movs	r2, #10
 8014ace:	2100      	movs	r1, #0
 8014ad0:	f001 fc44 	bl	801635c <strtol>
 8014ad4:	bd10      	pop	{r4, pc}

08014ad6 <atol>:
 8014ad6:	b510      	push	{r4, lr}
 8014ad8:	220a      	movs	r2, #10
 8014ada:	2100      	movs	r1, #0
 8014adc:	f001 fc3e 	bl	801635c <strtol>
 8014ae0:	bd10      	pop	{r4, pc}
	...

08014ae4 <calloc>:
 8014ae4:	b510      	push	{r4, lr}
 8014ae6:	4b03      	ldr	r3, [pc, #12]	; (8014af4 <calloc+0x10>)
 8014ae8:	000a      	movs	r2, r1
 8014aea:	0001      	movs	r1, r0
 8014aec:	6818      	ldr	r0, [r3, #0]
 8014aee:	f000 f803 	bl	8014af8 <_calloc_r>
 8014af2:	bd10      	pop	{r4, pc}
 8014af4:	20000138 	.word	0x20000138

08014af8 <_calloc_r>:
 8014af8:	b510      	push	{r4, lr}
 8014afa:	4351      	muls	r1, r2
 8014afc:	f000 f860 	bl	8014bc0 <_malloc_r>
 8014b00:	1e04      	subs	r4, r0, #0
 8014b02:	d01a      	beq.n	8014b3a <_calloc_r+0x42>
 8014b04:	0003      	movs	r3, r0
 8014b06:	3b08      	subs	r3, #8
 8014b08:	685a      	ldr	r2, [r3, #4]
 8014b0a:	2303      	movs	r3, #3
 8014b0c:	439a      	bics	r2, r3
 8014b0e:	3a04      	subs	r2, #4
 8014b10:	2a24      	cmp	r2, #36	; 0x24
 8014b12:	d819      	bhi.n	8014b48 <_calloc_r+0x50>
 8014b14:	0003      	movs	r3, r0
 8014b16:	2a13      	cmp	r2, #19
 8014b18:	d90b      	bls.n	8014b32 <_calloc_r+0x3a>
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	3308      	adds	r3, #8
 8014b1e:	6001      	str	r1, [r0, #0]
 8014b20:	6041      	str	r1, [r0, #4]
 8014b22:	2a1b      	cmp	r2, #27
 8014b24:	d905      	bls.n	8014b32 <_calloc_r+0x3a>
 8014b26:	6081      	str	r1, [r0, #8]
 8014b28:	60c1      	str	r1, [r0, #12]
 8014b2a:	2a24      	cmp	r2, #36	; 0x24
 8014b2c:	d007      	beq.n	8014b3e <_calloc_r+0x46>
 8014b2e:	0003      	movs	r3, r0
 8014b30:	3310      	adds	r3, #16
 8014b32:	2200      	movs	r2, #0
 8014b34:	601a      	str	r2, [r3, #0]
 8014b36:	605a      	str	r2, [r3, #4]
 8014b38:	609a      	str	r2, [r3, #8]
 8014b3a:	0020      	movs	r0, r4
 8014b3c:	bd10      	pop	{r4, pc}
 8014b3e:	0003      	movs	r3, r0
 8014b40:	6101      	str	r1, [r0, #16]
 8014b42:	3318      	adds	r3, #24
 8014b44:	6141      	str	r1, [r0, #20]
 8014b46:	e7f4      	b.n	8014b32 <_calloc_r+0x3a>
 8014b48:	2100      	movs	r1, #0
 8014b4a:	f000 fa64 	bl	8015016 <memset>
 8014b4e:	e7f4      	b.n	8014b3a <_calloc_r+0x42>

08014b50 <__libc_init_array>:
 8014b50:	b570      	push	{r4, r5, r6, lr}
 8014b52:	2600      	movs	r6, #0
 8014b54:	4d0c      	ldr	r5, [pc, #48]	; (8014b88 <__libc_init_array+0x38>)
 8014b56:	4c0d      	ldr	r4, [pc, #52]	; (8014b8c <__libc_init_array+0x3c>)
 8014b58:	1b64      	subs	r4, r4, r5
 8014b5a:	10a4      	asrs	r4, r4, #2
 8014b5c:	42a6      	cmp	r6, r4
 8014b5e:	d109      	bne.n	8014b74 <__libc_init_array+0x24>
 8014b60:	2600      	movs	r6, #0
 8014b62:	f006 fb43 	bl	801b1ec <_init>
 8014b66:	4d0a      	ldr	r5, [pc, #40]	; (8014b90 <__libc_init_array+0x40>)
 8014b68:	4c0a      	ldr	r4, [pc, #40]	; (8014b94 <__libc_init_array+0x44>)
 8014b6a:	1b64      	subs	r4, r4, r5
 8014b6c:	10a4      	asrs	r4, r4, #2
 8014b6e:	42a6      	cmp	r6, r4
 8014b70:	d105      	bne.n	8014b7e <__libc_init_array+0x2e>
 8014b72:	bd70      	pop	{r4, r5, r6, pc}
 8014b74:	00b3      	lsls	r3, r6, #2
 8014b76:	58eb      	ldr	r3, [r5, r3]
 8014b78:	4798      	blx	r3
 8014b7a:	3601      	adds	r6, #1
 8014b7c:	e7ee      	b.n	8014b5c <__libc_init_array+0xc>
 8014b7e:	00b3      	lsls	r3, r6, #2
 8014b80:	58eb      	ldr	r3, [r5, r3]
 8014b82:	4798      	blx	r3
 8014b84:	3601      	adds	r6, #1
 8014b86:	e7f2      	b.n	8014b6e <__libc_init_array+0x1e>
 8014b88:	0801e9b8 	.word	0x0801e9b8
 8014b8c:	0801e9b8 	.word	0x0801e9b8
 8014b90:	0801e9b8 	.word	0x0801e9b8
 8014b94:	0801e9c0 	.word	0x0801e9c0

08014b98 <malloc>:
 8014b98:	b510      	push	{r4, lr}
 8014b9a:	4b03      	ldr	r3, [pc, #12]	; (8014ba8 <malloc+0x10>)
 8014b9c:	0001      	movs	r1, r0
 8014b9e:	6818      	ldr	r0, [r3, #0]
 8014ba0:	f000 f80e 	bl	8014bc0 <_malloc_r>
 8014ba4:	bd10      	pop	{r4, pc}
 8014ba6:	46c0      	nop			; (mov r8, r8)
 8014ba8:	20000138 	.word	0x20000138

08014bac <free>:
 8014bac:	b510      	push	{r4, lr}
 8014bae:	4b03      	ldr	r3, [pc, #12]	; (8014bbc <free+0x10>)
 8014bb0:	0001      	movs	r1, r0
 8014bb2:	6818      	ldr	r0, [r3, #0]
 8014bb4:	f003 fd62 	bl	801867c <_free_r>
 8014bb8:	bd10      	pop	{r4, pc}
 8014bba:	46c0      	nop			; (mov r8, r8)
 8014bbc:	20000138 	.word	0x20000138

08014bc0 <_malloc_r>:
 8014bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bc2:	000d      	movs	r5, r1
 8014bc4:	b087      	sub	sp, #28
 8014bc6:	350b      	adds	r5, #11
 8014bc8:	9001      	str	r0, [sp, #4]
 8014bca:	2d16      	cmp	r5, #22
 8014bcc:	d908      	bls.n	8014be0 <_malloc_r+0x20>
 8014bce:	2207      	movs	r2, #7
 8014bd0:	4395      	bics	r5, r2
 8014bd2:	d506      	bpl.n	8014be2 <_malloc_r+0x22>
 8014bd4:	230c      	movs	r3, #12
 8014bd6:	9a01      	ldr	r2, [sp, #4]
 8014bd8:	6013      	str	r3, [r2, #0]
 8014bda:	2000      	movs	r0, #0
 8014bdc:	b007      	add	sp, #28
 8014bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014be0:	2510      	movs	r5, #16
 8014be2:	42a9      	cmp	r1, r5
 8014be4:	d8f6      	bhi.n	8014bd4 <_malloc_r+0x14>
 8014be6:	9801      	ldr	r0, [sp, #4]
 8014be8:	f000 fa1e 	bl	8015028 <__malloc_lock>
 8014bec:	23fc      	movs	r3, #252	; 0xfc
 8014bee:	48bd      	ldr	r0, [pc, #756]	; (8014ee4 <_malloc_r+0x324>)
 8014bf0:	005b      	lsls	r3, r3, #1
 8014bf2:	429d      	cmp	r5, r3
 8014bf4:	d21a      	bcs.n	8014c2c <_malloc_r+0x6c>
 8014bf6:	002a      	movs	r2, r5
 8014bf8:	3208      	adds	r2, #8
 8014bfa:	1882      	adds	r2, r0, r2
 8014bfc:	0011      	movs	r1, r2
 8014bfe:	6854      	ldr	r4, [r2, #4]
 8014c00:	3908      	subs	r1, #8
 8014c02:	08eb      	lsrs	r3, r5, #3
 8014c04:	428c      	cmp	r4, r1
 8014c06:	d103      	bne.n	8014c10 <_malloc_r+0x50>
 8014c08:	68d4      	ldr	r4, [r2, #12]
 8014c0a:	3302      	adds	r3, #2
 8014c0c:	42a2      	cmp	r2, r4
 8014c0e:	d023      	beq.n	8014c58 <_malloc_r+0x98>
 8014c10:	2303      	movs	r3, #3
 8014c12:	6862      	ldr	r2, [r4, #4]
 8014c14:	68a1      	ldr	r1, [r4, #8]
 8014c16:	439a      	bics	r2, r3
 8014c18:	0013      	movs	r3, r2
 8014c1a:	68e2      	ldr	r2, [r4, #12]
 8014c1c:	18e3      	adds	r3, r4, r3
 8014c1e:	60ca      	str	r2, [r1, #12]
 8014c20:	6091      	str	r1, [r2, #8]
 8014c22:	2201      	movs	r2, #1
 8014c24:	6859      	ldr	r1, [r3, #4]
 8014c26:	430a      	orrs	r2, r1
 8014c28:	605a      	str	r2, [r3, #4]
 8014c2a:	e02b      	b.n	8014c84 <_malloc_r+0xc4>
 8014c2c:	233f      	movs	r3, #63	; 0x3f
 8014c2e:	0a6a      	lsrs	r2, r5, #9
 8014c30:	d003      	beq.n	8014c3a <_malloc_r+0x7a>
 8014c32:	2a04      	cmp	r2, #4
 8014c34:	d82c      	bhi.n	8014c90 <_malloc_r+0xd0>
 8014c36:	09ab      	lsrs	r3, r5, #6
 8014c38:	3338      	adds	r3, #56	; 0x38
 8014c3a:	2203      	movs	r2, #3
 8014c3c:	4694      	mov	ip, r2
 8014c3e:	00d9      	lsls	r1, r3, #3
 8014c40:	1809      	adds	r1, r1, r0
 8014c42:	68cc      	ldr	r4, [r1, #12]
 8014c44:	428c      	cmp	r4, r1
 8014c46:	d006      	beq.n	8014c56 <_malloc_r+0x96>
 8014c48:	4666      	mov	r6, ip
 8014c4a:	6862      	ldr	r2, [r4, #4]
 8014c4c:	43b2      	bics	r2, r6
 8014c4e:	1b57      	subs	r7, r2, r5
 8014c50:	2f0f      	cmp	r7, #15
 8014c52:	dd35      	ble.n	8014cc0 <_malloc_r+0x100>
 8014c54:	3b01      	subs	r3, #1
 8014c56:	3301      	adds	r3, #1
 8014c58:	6904      	ldr	r4, [r0, #16]
 8014c5a:	49a3      	ldr	r1, [pc, #652]	; (8014ee8 <_malloc_r+0x328>)
 8014c5c:	428c      	cmp	r4, r1
 8014c5e:	d056      	beq.n	8014d0e <_malloc_r+0x14e>
 8014c60:	2203      	movs	r2, #3
 8014c62:	6866      	ldr	r6, [r4, #4]
 8014c64:	4396      	bics	r6, r2
 8014c66:	0032      	movs	r2, r6
 8014c68:	1b76      	subs	r6, r6, r5
 8014c6a:	2e0f      	cmp	r6, #15
 8014c6c:	dd36      	ble.n	8014cdc <_malloc_r+0x11c>
 8014c6e:	2701      	movs	r7, #1
 8014c70:	1963      	adds	r3, r4, r5
 8014c72:	433d      	orrs	r5, r7
 8014c74:	4337      	orrs	r7, r6
 8014c76:	6065      	str	r5, [r4, #4]
 8014c78:	6143      	str	r3, [r0, #20]
 8014c7a:	6103      	str	r3, [r0, #16]
 8014c7c:	60d9      	str	r1, [r3, #12]
 8014c7e:	6099      	str	r1, [r3, #8]
 8014c80:	605f      	str	r7, [r3, #4]
 8014c82:	50a6      	str	r6, [r4, r2]
 8014c84:	9801      	ldr	r0, [sp, #4]
 8014c86:	f000 f9d7 	bl	8015038 <__malloc_unlock>
 8014c8a:	0020      	movs	r0, r4
 8014c8c:	3008      	adds	r0, #8
 8014c8e:	e7a5      	b.n	8014bdc <_malloc_r+0x1c>
 8014c90:	2a14      	cmp	r2, #20
 8014c92:	d802      	bhi.n	8014c9a <_malloc_r+0xda>
 8014c94:	0013      	movs	r3, r2
 8014c96:	335b      	adds	r3, #91	; 0x5b
 8014c98:	e7cf      	b.n	8014c3a <_malloc_r+0x7a>
 8014c9a:	2a54      	cmp	r2, #84	; 0x54
 8014c9c:	d802      	bhi.n	8014ca4 <_malloc_r+0xe4>
 8014c9e:	0b2b      	lsrs	r3, r5, #12
 8014ca0:	336e      	adds	r3, #110	; 0x6e
 8014ca2:	e7ca      	b.n	8014c3a <_malloc_r+0x7a>
 8014ca4:	23aa      	movs	r3, #170	; 0xaa
 8014ca6:	005b      	lsls	r3, r3, #1
 8014ca8:	429a      	cmp	r2, r3
 8014caa:	d802      	bhi.n	8014cb2 <_malloc_r+0xf2>
 8014cac:	0beb      	lsrs	r3, r5, #15
 8014cae:	3377      	adds	r3, #119	; 0x77
 8014cb0:	e7c3      	b.n	8014c3a <_malloc_r+0x7a>
 8014cb2:	498e      	ldr	r1, [pc, #568]	; (8014eec <_malloc_r+0x32c>)
 8014cb4:	237e      	movs	r3, #126	; 0x7e
 8014cb6:	428a      	cmp	r2, r1
 8014cb8:	d8bf      	bhi.n	8014c3a <_malloc_r+0x7a>
 8014cba:	0cab      	lsrs	r3, r5, #18
 8014cbc:	337c      	adds	r3, #124	; 0x7c
 8014cbe:	e7bc      	b.n	8014c3a <_malloc_r+0x7a>
 8014cc0:	68e6      	ldr	r6, [r4, #12]
 8014cc2:	2f00      	cmp	r7, #0
 8014cc4:	db08      	blt.n	8014cd8 <_malloc_r+0x118>
 8014cc6:	68a3      	ldr	r3, [r4, #8]
 8014cc8:	60de      	str	r6, [r3, #12]
 8014cca:	60b3      	str	r3, [r6, #8]
 8014ccc:	2301      	movs	r3, #1
 8014cce:	18a2      	adds	r2, r4, r2
 8014cd0:	6851      	ldr	r1, [r2, #4]
 8014cd2:	430b      	orrs	r3, r1
 8014cd4:	6053      	str	r3, [r2, #4]
 8014cd6:	e7d5      	b.n	8014c84 <_malloc_r+0xc4>
 8014cd8:	0034      	movs	r4, r6
 8014cda:	e7b3      	b.n	8014c44 <_malloc_r+0x84>
 8014cdc:	6141      	str	r1, [r0, #20]
 8014cde:	6101      	str	r1, [r0, #16]
 8014ce0:	2e00      	cmp	r6, #0
 8014ce2:	daf3      	bge.n	8014ccc <_malloc_r+0x10c>
 8014ce4:	6841      	ldr	r1, [r0, #4]
 8014ce6:	468c      	mov	ip, r1
 8014ce8:	2180      	movs	r1, #128	; 0x80
 8014cea:	0089      	lsls	r1, r1, #2
 8014cec:	428a      	cmp	r2, r1
 8014cee:	d300      	bcc.n	8014cf2 <_malloc_r+0x132>
 8014cf0:	e089      	b.n	8014e06 <_malloc_r+0x246>
 8014cf2:	0956      	lsrs	r6, r2, #5
 8014cf4:	08d1      	lsrs	r1, r2, #3
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	40b2      	lsls	r2, r6
 8014cfa:	4666      	mov	r6, ip
 8014cfc:	00c9      	lsls	r1, r1, #3
 8014cfe:	4332      	orrs	r2, r6
 8014d00:	6042      	str	r2, [r0, #4]
 8014d02:	1808      	adds	r0, r1, r0
 8014d04:	6882      	ldr	r2, [r0, #8]
 8014d06:	60e0      	str	r0, [r4, #12]
 8014d08:	60a2      	str	r2, [r4, #8]
 8014d0a:	6084      	str	r4, [r0, #8]
 8014d0c:	60d4      	str	r4, [r2, #12]
 8014d0e:	2201      	movs	r2, #1
 8014d10:	4874      	ldr	r0, [pc, #464]	; (8014ee4 <_malloc_r+0x324>)
 8014d12:	1099      	asrs	r1, r3, #2
 8014d14:	408a      	lsls	r2, r1
 8014d16:	6841      	ldr	r1, [r0, #4]
 8014d18:	4291      	cmp	r1, r2
 8014d1a:	d325      	bcc.n	8014d68 <_malloc_r+0x1a8>
 8014d1c:	420a      	tst	r2, r1
 8014d1e:	d105      	bne.n	8014d2c <_malloc_r+0x16c>
 8014d20:	2403      	movs	r4, #3
 8014d22:	43a3      	bics	r3, r4
 8014d24:	0052      	lsls	r2, r2, #1
 8014d26:	3304      	adds	r3, #4
 8014d28:	420a      	tst	r2, r1
 8014d2a:	d0fb      	beq.n	8014d24 <_malloc_r+0x164>
 8014d2c:	00d9      	lsls	r1, r3, #3
 8014d2e:	1841      	adds	r1, r0, r1
 8014d30:	468c      	mov	ip, r1
 8014d32:	9302      	str	r3, [sp, #8]
 8014d34:	68cc      	ldr	r4, [r1, #12]
 8014d36:	428c      	cmp	r4, r1
 8014d38:	d000      	beq.n	8014d3c <_malloc_r+0x17c>
 8014d3a:	e09b      	b.n	8014e74 <_malloc_r+0x2b4>
 8014d3c:	2603      	movs	r6, #3
 8014d3e:	9c02      	ldr	r4, [sp, #8]
 8014d40:	3108      	adds	r1, #8
 8014d42:	3401      	adds	r4, #1
 8014d44:	9402      	str	r4, [sp, #8]
 8014d46:	4234      	tst	r4, r6
 8014d48:	d1f4      	bne.n	8014d34 <_malloc_r+0x174>
 8014d4a:	2103      	movs	r1, #3
 8014d4c:	420b      	tst	r3, r1
 8014d4e:	d000      	beq.n	8014d52 <_malloc_r+0x192>
 8014d50:	e0b7      	b.n	8014ec2 <_malloc_r+0x302>
 8014d52:	6843      	ldr	r3, [r0, #4]
 8014d54:	4393      	bics	r3, r2
 8014d56:	6043      	str	r3, [r0, #4]
 8014d58:	4b62      	ldr	r3, [pc, #392]	; (8014ee4 <_malloc_r+0x324>)
 8014d5a:	0052      	lsls	r2, r2, #1
 8014d5c:	6859      	ldr	r1, [r3, #4]
 8014d5e:	4291      	cmp	r1, r2
 8014d60:	d302      	bcc.n	8014d68 <_malloc_r+0x1a8>
 8014d62:	2a00      	cmp	r2, #0
 8014d64:	d000      	beq.n	8014d68 <_malloc_r+0x1a8>
 8014d66:	e0bb      	b.n	8014ee0 <_malloc_r+0x320>
 8014d68:	2303      	movs	r3, #3
 8014d6a:	6886      	ldr	r6, [r0, #8]
 8014d6c:	6872      	ldr	r2, [r6, #4]
 8014d6e:	439a      	bics	r2, r3
 8014d70:	9202      	str	r2, [sp, #8]
 8014d72:	42aa      	cmp	r2, r5
 8014d74:	d303      	bcc.n	8014d7e <_malloc_r+0x1be>
 8014d76:	1b51      	subs	r1, r2, r5
 8014d78:	290f      	cmp	r1, #15
 8014d7a:	dd00      	ble.n	8014d7e <_malloc_r+0x1be>
 8014d7c:	e125      	b.n	8014fca <_malloc_r+0x40a>
 8014d7e:	9b02      	ldr	r3, [sp, #8]
 8014d80:	2008      	movs	r0, #8
 8014d82:	18f3      	adds	r3, r6, r3
 8014d84:	9303      	str	r3, [sp, #12]
 8014d86:	4b5a      	ldr	r3, [pc, #360]	; (8014ef0 <_malloc_r+0x330>)
 8014d88:	681f      	ldr	r7, [r3, #0]
 8014d8a:	f002 fd77 	bl	801787c <sysconf>
 8014d8e:	4b59      	ldr	r3, [pc, #356]	; (8014ef4 <_malloc_r+0x334>)
 8014d90:	3710      	adds	r7, #16
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	197f      	adds	r7, r7, r5
 8014d96:	9004      	str	r0, [sp, #16]
 8014d98:	3301      	adds	r3, #1
 8014d9a:	d003      	beq.n	8014da4 <_malloc_r+0x1e4>
 8014d9c:	3f01      	subs	r7, #1
 8014d9e:	183f      	adds	r7, r7, r0
 8014da0:	4243      	negs	r3, r0
 8014da2:	401f      	ands	r7, r3
 8014da4:	0039      	movs	r1, r7
 8014da6:	9801      	ldr	r0, [sp, #4]
 8014da8:	f000 fb18 	bl	80153dc <_sbrk_r>
 8014dac:	0004      	movs	r4, r0
 8014dae:	1c43      	adds	r3, r0, #1
 8014db0:	d100      	bne.n	8014db4 <_malloc_r+0x1f4>
 8014db2:	e0de      	b.n	8014f72 <_malloc_r+0x3b2>
 8014db4:	9b03      	ldr	r3, [sp, #12]
 8014db6:	4283      	cmp	r3, r0
 8014db8:	d903      	bls.n	8014dc2 <_malloc_r+0x202>
 8014dba:	4b4a      	ldr	r3, [pc, #296]	; (8014ee4 <_malloc_r+0x324>)
 8014dbc:	429e      	cmp	r6, r3
 8014dbe:	d000      	beq.n	8014dc2 <_malloc_r+0x202>
 8014dc0:	e0d7      	b.n	8014f72 <_malloc_r+0x3b2>
 8014dc2:	4b4d      	ldr	r3, [pc, #308]	; (8014ef8 <_malloc_r+0x338>)
 8014dc4:	9903      	ldr	r1, [sp, #12]
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	18ba      	adds	r2, r7, r2
 8014dca:	601a      	str	r2, [r3, #0]
 8014dcc:	9b04      	ldr	r3, [sp, #16]
 8014dce:	3b01      	subs	r3, #1
 8014dd0:	42a1      	cmp	r1, r4
 8014dd2:	d000      	beq.n	8014dd6 <_malloc_r+0x216>
 8014dd4:	e096      	b.n	8014f04 <_malloc_r+0x344>
 8014dd6:	4219      	tst	r1, r3
 8014dd8:	d000      	beq.n	8014ddc <_malloc_r+0x21c>
 8014dda:	e093      	b.n	8014f04 <_malloc_r+0x344>
 8014ddc:	2601      	movs	r6, #1
 8014dde:	4b41      	ldr	r3, [pc, #260]	; (8014ee4 <_malloc_r+0x324>)
 8014de0:	9a02      	ldr	r2, [sp, #8]
 8014de2:	689b      	ldr	r3, [r3, #8]
 8014de4:	19d7      	adds	r7, r2, r7
 8014de6:	433e      	orrs	r6, r7
 8014de8:	605e      	str	r6, [r3, #4]
 8014dea:	4b43      	ldr	r3, [pc, #268]	; (8014ef8 <_malloc_r+0x338>)
 8014dec:	4a43      	ldr	r2, [pc, #268]	; (8014efc <_malloc_r+0x33c>)
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	6811      	ldr	r1, [r2, #0]
 8014df2:	428b      	cmp	r3, r1
 8014df4:	d900      	bls.n	8014df8 <_malloc_r+0x238>
 8014df6:	6013      	str	r3, [r2, #0]
 8014df8:	4a41      	ldr	r2, [pc, #260]	; (8014f00 <_malloc_r+0x340>)
 8014dfa:	6811      	ldr	r1, [r2, #0]
 8014dfc:	428b      	cmp	r3, r1
 8014dfe:	d800      	bhi.n	8014e02 <_malloc_r+0x242>
 8014e00:	e0b7      	b.n	8014f72 <_malloc_r+0x3b2>
 8014e02:	6013      	str	r3, [r2, #0]
 8014e04:	e0b5      	b.n	8014f72 <_malloc_r+0x3b2>
 8014e06:	0a56      	lsrs	r6, r2, #9
 8014e08:	2e04      	cmp	r6, #4
 8014e0a:	d811      	bhi.n	8014e30 <_malloc_r+0x270>
 8014e0c:	0991      	lsrs	r1, r2, #6
 8014e0e:	3138      	adds	r1, #56	; 0x38
 8014e10:	00cf      	lsls	r7, r1, #3
 8014e12:	183f      	adds	r7, r7, r0
 8014e14:	68be      	ldr	r6, [r7, #8]
 8014e16:	42b7      	cmp	r7, r6
 8014e18:	d125      	bne.n	8014e66 <_malloc_r+0x2a6>
 8014e1a:	2201      	movs	r2, #1
 8014e1c:	1089      	asrs	r1, r1, #2
 8014e1e:	408a      	lsls	r2, r1
 8014e20:	4661      	mov	r1, ip
 8014e22:	430a      	orrs	r2, r1
 8014e24:	6042      	str	r2, [r0, #4]
 8014e26:	60e7      	str	r7, [r4, #12]
 8014e28:	60a6      	str	r6, [r4, #8]
 8014e2a:	60bc      	str	r4, [r7, #8]
 8014e2c:	60f4      	str	r4, [r6, #12]
 8014e2e:	e76e      	b.n	8014d0e <_malloc_r+0x14e>
 8014e30:	2e14      	cmp	r6, #20
 8014e32:	d802      	bhi.n	8014e3a <_malloc_r+0x27a>
 8014e34:	0031      	movs	r1, r6
 8014e36:	315b      	adds	r1, #91	; 0x5b
 8014e38:	e7ea      	b.n	8014e10 <_malloc_r+0x250>
 8014e3a:	2e54      	cmp	r6, #84	; 0x54
 8014e3c:	d802      	bhi.n	8014e44 <_malloc_r+0x284>
 8014e3e:	0b11      	lsrs	r1, r2, #12
 8014e40:	316e      	adds	r1, #110	; 0x6e
 8014e42:	e7e5      	b.n	8014e10 <_malloc_r+0x250>
 8014e44:	21aa      	movs	r1, #170	; 0xaa
 8014e46:	0049      	lsls	r1, r1, #1
 8014e48:	428e      	cmp	r6, r1
 8014e4a:	d802      	bhi.n	8014e52 <_malloc_r+0x292>
 8014e4c:	0bd1      	lsrs	r1, r2, #15
 8014e4e:	3177      	adds	r1, #119	; 0x77
 8014e50:	e7de      	b.n	8014e10 <_malloc_r+0x250>
 8014e52:	4f26      	ldr	r7, [pc, #152]	; (8014eec <_malloc_r+0x32c>)
 8014e54:	217e      	movs	r1, #126	; 0x7e
 8014e56:	42be      	cmp	r6, r7
 8014e58:	d8da      	bhi.n	8014e10 <_malloc_r+0x250>
 8014e5a:	0c91      	lsrs	r1, r2, #18
 8014e5c:	317c      	adds	r1, #124	; 0x7c
 8014e5e:	e7d7      	b.n	8014e10 <_malloc_r+0x250>
 8014e60:	68b6      	ldr	r6, [r6, #8]
 8014e62:	42b7      	cmp	r7, r6
 8014e64:	d004      	beq.n	8014e70 <_malloc_r+0x2b0>
 8014e66:	2003      	movs	r0, #3
 8014e68:	6871      	ldr	r1, [r6, #4]
 8014e6a:	4381      	bics	r1, r0
 8014e6c:	4291      	cmp	r1, r2
 8014e6e:	d8f7      	bhi.n	8014e60 <_malloc_r+0x2a0>
 8014e70:	68f7      	ldr	r7, [r6, #12]
 8014e72:	e7d8      	b.n	8014e26 <_malloc_r+0x266>
 8014e74:	2703      	movs	r7, #3
 8014e76:	6866      	ldr	r6, [r4, #4]
 8014e78:	43be      	bics	r6, r7
 8014e7a:	9603      	str	r6, [sp, #12]
 8014e7c:	1b77      	subs	r7, r6, r5
 8014e7e:	68e6      	ldr	r6, [r4, #12]
 8014e80:	2f0f      	cmp	r7, #15
 8014e82:	dd10      	ble.n	8014ea6 <_malloc_r+0x2e6>
 8014e84:	2201      	movs	r2, #1
 8014e86:	68a1      	ldr	r1, [r4, #8]
 8014e88:	1963      	adds	r3, r4, r5
 8014e8a:	4315      	orrs	r5, r2
 8014e8c:	6065      	str	r5, [r4, #4]
 8014e8e:	60ce      	str	r6, [r1, #12]
 8014e90:	60b1      	str	r1, [r6, #8]
 8014e92:	6143      	str	r3, [r0, #20]
 8014e94:	6103      	str	r3, [r0, #16]
 8014e96:	4814      	ldr	r0, [pc, #80]	; (8014ee8 <_malloc_r+0x328>)
 8014e98:	433a      	orrs	r2, r7
 8014e9a:	60d8      	str	r0, [r3, #12]
 8014e9c:	6098      	str	r0, [r3, #8]
 8014e9e:	605a      	str	r2, [r3, #4]
 8014ea0:	9b03      	ldr	r3, [sp, #12]
 8014ea2:	50e7      	str	r7, [r4, r3]
 8014ea4:	e6ee      	b.n	8014c84 <_malloc_r+0xc4>
 8014ea6:	2f00      	cmp	r7, #0
 8014ea8:	db09      	blt.n	8014ebe <_malloc_r+0x2fe>
 8014eaa:	9b03      	ldr	r3, [sp, #12]
 8014eac:	18e1      	adds	r1, r4, r3
 8014eae:	2301      	movs	r3, #1
 8014eb0:	684a      	ldr	r2, [r1, #4]
 8014eb2:	4313      	orrs	r3, r2
 8014eb4:	604b      	str	r3, [r1, #4]
 8014eb6:	68a3      	ldr	r3, [r4, #8]
 8014eb8:	60de      	str	r6, [r3, #12]
 8014eba:	60b3      	str	r3, [r6, #8]
 8014ebc:	e6e2      	b.n	8014c84 <_malloc_r+0xc4>
 8014ebe:	0034      	movs	r4, r6
 8014ec0:	e739      	b.n	8014d36 <_malloc_r+0x176>
 8014ec2:	2108      	movs	r1, #8
 8014ec4:	4249      	negs	r1, r1
 8014ec6:	448c      	add	ip, r1
 8014ec8:	4661      	mov	r1, ip
 8014eca:	6889      	ldr	r1, [r1, #8]
 8014ecc:	3b01      	subs	r3, #1
 8014ece:	4561      	cmp	r1, ip
 8014ed0:	d100      	bne.n	8014ed4 <_malloc_r+0x314>
 8014ed2:	e73a      	b.n	8014d4a <_malloc_r+0x18a>
 8014ed4:	e740      	b.n	8014d58 <_malloc_r+0x198>
 8014ed6:	3304      	adds	r3, #4
 8014ed8:	0052      	lsls	r2, r2, #1
 8014eda:	420a      	tst	r2, r1
 8014edc:	d0fb      	beq.n	8014ed6 <_malloc_r+0x316>
 8014ede:	e725      	b.n	8014d2c <_malloc_r+0x16c>
 8014ee0:	9b02      	ldr	r3, [sp, #8]
 8014ee2:	e7fa      	b.n	8014eda <_malloc_r+0x31a>
 8014ee4:	20000568 	.word	0x20000568
 8014ee8:	20000570 	.word	0x20000570
 8014eec:	00000554 	.word	0x00000554
 8014ef0:	20006a2c 	.word	0x20006a2c
 8014ef4:	20000970 	.word	0x20000970
 8014ef8:	200069fc 	.word	0x200069fc
 8014efc:	20006a24 	.word	0x20006a24
 8014f00:	20006a28 	.word	0x20006a28
 8014f04:	4935      	ldr	r1, [pc, #212]	; (8014fdc <_malloc_r+0x41c>)
 8014f06:	6808      	ldr	r0, [r1, #0]
 8014f08:	3001      	adds	r0, #1
 8014f0a:	d140      	bne.n	8014f8e <_malloc_r+0x3ce>
 8014f0c:	600c      	str	r4, [r1, #0]
 8014f0e:	2207      	movs	r2, #7
 8014f10:	0021      	movs	r1, r4
 8014f12:	4011      	ands	r1, r2
 8014f14:	2000      	movs	r0, #0
 8014f16:	9103      	str	r1, [sp, #12]
 8014f18:	4214      	tst	r4, r2
 8014f1a:	d002      	beq.n	8014f22 <_malloc_r+0x362>
 8014f1c:	3008      	adds	r0, #8
 8014f1e:	1a40      	subs	r0, r0, r1
 8014f20:	1824      	adds	r4, r4, r0
 8014f22:	19e2      	adds	r2, r4, r7
 8014f24:	9205      	str	r2, [sp, #20]
 8014f26:	9f05      	ldr	r7, [sp, #20]
 8014f28:	9a04      	ldr	r2, [sp, #16]
 8014f2a:	401f      	ands	r7, r3
 8014f2c:	1810      	adds	r0, r2, r0
 8014f2e:	1bc7      	subs	r7, r0, r7
 8014f30:	401f      	ands	r7, r3
 8014f32:	0039      	movs	r1, r7
 8014f34:	9801      	ldr	r0, [sp, #4]
 8014f36:	f000 fa51 	bl	80153dc <_sbrk_r>
 8014f3a:	1c43      	adds	r3, r0, #1
 8014f3c:	d107      	bne.n	8014f4e <_malloc_r+0x38e>
 8014f3e:	9b03      	ldr	r3, [sp, #12]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d02a      	beq.n	8014f9a <_malloc_r+0x3da>
 8014f44:	0018      	movs	r0, r3
 8014f46:	2700      	movs	r7, #0
 8014f48:	9b05      	ldr	r3, [sp, #20]
 8014f4a:	3808      	subs	r0, #8
 8014f4c:	1818      	adds	r0, r3, r0
 8014f4e:	4a24      	ldr	r2, [pc, #144]	; (8014fe0 <_malloc_r+0x420>)
 8014f50:	1b00      	subs	r0, r0, r4
 8014f52:	6813      	ldr	r3, [r2, #0]
 8014f54:	19db      	adds	r3, r3, r7
 8014f56:	6013      	str	r3, [r2, #0]
 8014f58:	2201      	movs	r2, #1
 8014f5a:	4b22      	ldr	r3, [pc, #136]	; (8014fe4 <_malloc_r+0x424>)
 8014f5c:	19c7      	adds	r7, r0, r7
 8014f5e:	4317      	orrs	r7, r2
 8014f60:	609c      	str	r4, [r3, #8]
 8014f62:	6067      	str	r7, [r4, #4]
 8014f64:	429e      	cmp	r6, r3
 8014f66:	d100      	bne.n	8014f6a <_malloc_r+0x3aa>
 8014f68:	e73f      	b.n	8014dea <_malloc_r+0x22a>
 8014f6a:	9b02      	ldr	r3, [sp, #8]
 8014f6c:	2b0f      	cmp	r3, #15
 8014f6e:	d817      	bhi.n	8014fa0 <_malloc_r+0x3e0>
 8014f70:	6062      	str	r2, [r4, #4]
 8014f72:	2203      	movs	r2, #3
 8014f74:	4b1b      	ldr	r3, [pc, #108]	; (8014fe4 <_malloc_r+0x424>)
 8014f76:	689b      	ldr	r3, [r3, #8]
 8014f78:	685b      	ldr	r3, [r3, #4]
 8014f7a:	4393      	bics	r3, r2
 8014f7c:	1b59      	subs	r1, r3, r5
 8014f7e:	42ab      	cmp	r3, r5
 8014f80:	d301      	bcc.n	8014f86 <_malloc_r+0x3c6>
 8014f82:	290f      	cmp	r1, #15
 8014f84:	dc21      	bgt.n	8014fca <_malloc_r+0x40a>
 8014f86:	9801      	ldr	r0, [sp, #4]
 8014f88:	f000 f856 	bl	8015038 <__malloc_unlock>
 8014f8c:	e625      	b.n	8014bda <_malloc_r+0x1a>
 8014f8e:	9903      	ldr	r1, [sp, #12]
 8014f90:	1a61      	subs	r1, r4, r1
 8014f92:	1889      	adds	r1, r1, r2
 8014f94:	4a12      	ldr	r2, [pc, #72]	; (8014fe0 <_malloc_r+0x420>)
 8014f96:	6011      	str	r1, [r2, #0]
 8014f98:	e7b9      	b.n	8014f0e <_malloc_r+0x34e>
 8014f9a:	9805      	ldr	r0, [sp, #20]
 8014f9c:	9f03      	ldr	r7, [sp, #12]
 8014f9e:	e7d6      	b.n	8014f4e <_malloc_r+0x38e>
 8014fa0:	2307      	movs	r3, #7
 8014fa2:	9f02      	ldr	r7, [sp, #8]
 8014fa4:	3f0c      	subs	r7, #12
 8014fa6:	439f      	bics	r7, r3
 8014fa8:	6873      	ldr	r3, [r6, #4]
 8014faa:	401a      	ands	r2, r3
 8014fac:	433a      	orrs	r2, r7
 8014fae:	6072      	str	r2, [r6, #4]
 8014fb0:	2205      	movs	r2, #5
 8014fb2:	19f3      	adds	r3, r6, r7
 8014fb4:	605a      	str	r2, [r3, #4]
 8014fb6:	609a      	str	r2, [r3, #8]
 8014fb8:	2f0f      	cmp	r7, #15
 8014fba:	d800      	bhi.n	8014fbe <_malloc_r+0x3fe>
 8014fbc:	e715      	b.n	8014dea <_malloc_r+0x22a>
 8014fbe:	0031      	movs	r1, r6
 8014fc0:	9801      	ldr	r0, [sp, #4]
 8014fc2:	3108      	adds	r1, #8
 8014fc4:	f003 fb5a 	bl	801867c <_free_r>
 8014fc8:	e70f      	b.n	8014dea <_malloc_r+0x22a>
 8014fca:	2201      	movs	r2, #1
 8014fcc:	0013      	movs	r3, r2
 8014fce:	4805      	ldr	r0, [pc, #20]	; (8014fe4 <_malloc_r+0x424>)
 8014fd0:	432b      	orrs	r3, r5
 8014fd2:	6884      	ldr	r4, [r0, #8]
 8014fd4:	6063      	str	r3, [r4, #4]
 8014fd6:	1963      	adds	r3, r4, r5
 8014fd8:	6083      	str	r3, [r0, #8]
 8014fda:	e624      	b.n	8014c26 <_malloc_r+0x66>
 8014fdc:	20000970 	.word	0x20000970
 8014fe0:	200069fc 	.word	0x200069fc
 8014fe4:	20000568 	.word	0x20000568

08014fe8 <memcmp>:
 8014fe8:	b530      	push	{r4, r5, lr}
 8014fea:	2400      	movs	r4, #0
 8014fec:	3901      	subs	r1, #1
 8014fee:	42a2      	cmp	r2, r4
 8014ff0:	d101      	bne.n	8014ff6 <memcmp+0xe>
 8014ff2:	2000      	movs	r0, #0
 8014ff4:	e005      	b.n	8015002 <memcmp+0x1a>
 8014ff6:	5d03      	ldrb	r3, [r0, r4]
 8014ff8:	3401      	adds	r4, #1
 8014ffa:	5d0d      	ldrb	r5, [r1, r4]
 8014ffc:	42ab      	cmp	r3, r5
 8014ffe:	d0f6      	beq.n	8014fee <memcmp+0x6>
 8015000:	1b58      	subs	r0, r3, r5
 8015002:	bd30      	pop	{r4, r5, pc}

08015004 <memcpy>:
 8015004:	2300      	movs	r3, #0
 8015006:	b510      	push	{r4, lr}
 8015008:	429a      	cmp	r2, r3
 801500a:	d100      	bne.n	801500e <memcpy+0xa>
 801500c:	bd10      	pop	{r4, pc}
 801500e:	5ccc      	ldrb	r4, [r1, r3]
 8015010:	54c4      	strb	r4, [r0, r3]
 8015012:	3301      	adds	r3, #1
 8015014:	e7f8      	b.n	8015008 <memcpy+0x4>

08015016 <memset>:
 8015016:	0003      	movs	r3, r0
 8015018:	1882      	adds	r2, r0, r2
 801501a:	4293      	cmp	r3, r2
 801501c:	d100      	bne.n	8015020 <memset+0xa>
 801501e:	4770      	bx	lr
 8015020:	7019      	strb	r1, [r3, #0]
 8015022:	3301      	adds	r3, #1
 8015024:	e7f9      	b.n	801501a <memset+0x4>
	...

08015028 <__malloc_lock>:
 8015028:	b510      	push	{r4, lr}
 801502a:	4802      	ldr	r0, [pc, #8]	; (8015034 <__malloc_lock+0xc>)
 801502c:	f003 ff58 	bl	8018ee0 <__retarget_lock_acquire_recursive>
 8015030:	bd10      	pop	{r4, pc}
 8015032:	46c0      	nop			; (mov r8, r8)
 8015034:	20007004 	.word	0x20007004

08015038 <__malloc_unlock>:
 8015038:	b510      	push	{r4, lr}
 801503a:	4802      	ldr	r0, [pc, #8]	; (8015044 <__malloc_unlock+0xc>)
 801503c:	f003 ff51 	bl	8018ee2 <__retarget_lock_release_recursive>
 8015040:	bd10      	pop	{r4, pc}
 8015042:	46c0      	nop			; (mov r8, r8)
 8015044:	20007004 	.word	0x20007004

08015048 <rand>:
 8015048:	4b09      	ldr	r3, [pc, #36]	; (8015070 <rand+0x28>)
 801504a:	b510      	push	{r4, lr}
 801504c:	681c      	ldr	r4, [r3, #0]
 801504e:	4a09      	ldr	r2, [pc, #36]	; (8015074 <rand+0x2c>)
 8015050:	34a8      	adds	r4, #168	; 0xa8
 8015052:	6820      	ldr	r0, [r4, #0]
 8015054:	6861      	ldr	r1, [r4, #4]
 8015056:	4b08      	ldr	r3, [pc, #32]	; (8015078 <rand+0x30>)
 8015058:	f7eb faac 	bl	80005b4 <__aeabi_lmul>
 801505c:	2201      	movs	r2, #1
 801505e:	2300      	movs	r3, #0
 8015060:	1880      	adds	r0, r0, r2
 8015062:	4159      	adcs	r1, r3
 8015064:	6020      	str	r0, [r4, #0]
 8015066:	6061      	str	r1, [r4, #4]
 8015068:	0048      	lsls	r0, r1, #1
 801506a:	0840      	lsrs	r0, r0, #1
 801506c:	bd10      	pop	{r4, pc}
 801506e:	46c0      	nop			; (mov r8, r8)
 8015070:	20000138 	.word	0x20000138
 8015074:	4c957f2d 	.word	0x4c957f2d
 8015078:	5851f42d 	.word	0x5851f42d

0801507c <realloc>:
 801507c:	b510      	push	{r4, lr}
 801507e:	4b03      	ldr	r3, [pc, #12]	; (801508c <realloc+0x10>)
 8015080:	000a      	movs	r2, r1
 8015082:	0001      	movs	r1, r0
 8015084:	6818      	ldr	r0, [r3, #0]
 8015086:	f000 f803 	bl	8015090 <_realloc_r>
 801508a:	bd10      	pop	{r4, pc}
 801508c:	20000138 	.word	0x20000138

08015090 <_realloc_r>:
 8015090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015092:	b087      	sub	sp, #28
 8015094:	1e0c      	subs	r4, r1, #0
 8015096:	9002      	str	r0, [sp, #8]
 8015098:	9205      	str	r2, [sp, #20]
 801509a:	d106      	bne.n	80150aa <_realloc_r+0x1a>
 801509c:	0011      	movs	r1, r2
 801509e:	f7ff fd8f 	bl	8014bc0 <_malloc_r>
 80150a2:	0007      	movs	r7, r0
 80150a4:	0038      	movs	r0, r7
 80150a6:	b007      	add	sp, #28
 80150a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150aa:	9802      	ldr	r0, [sp, #8]
 80150ac:	f7ff ffbc 	bl	8015028 <__malloc_lock>
 80150b0:	9e05      	ldr	r6, [sp, #20]
 80150b2:	360b      	adds	r6, #11
 80150b4:	2e16      	cmp	r6, #22
 80150b6:	d908      	bls.n	80150ca <_realloc_r+0x3a>
 80150b8:	2307      	movs	r3, #7
 80150ba:	439e      	bics	r6, r3
 80150bc:	9601      	str	r6, [sp, #4]
 80150be:	d506      	bpl.n	80150ce <_realloc_r+0x3e>
 80150c0:	230c      	movs	r3, #12
 80150c2:	9a02      	ldr	r2, [sp, #8]
 80150c4:	2700      	movs	r7, #0
 80150c6:	6013      	str	r3, [r2, #0]
 80150c8:	e7ec      	b.n	80150a4 <_realloc_r+0x14>
 80150ca:	2310      	movs	r3, #16
 80150cc:	9301      	str	r3, [sp, #4]
 80150ce:	9b01      	ldr	r3, [sp, #4]
 80150d0:	9a05      	ldr	r2, [sp, #20]
 80150d2:	4293      	cmp	r3, r2
 80150d4:	d3f4      	bcc.n	80150c0 <_realloc_r+0x30>
 80150d6:	0023      	movs	r3, r4
 80150d8:	3b08      	subs	r3, #8
 80150da:	685f      	ldr	r7, [r3, #4]
 80150dc:	9304      	str	r3, [sp, #16]
 80150de:	003a      	movs	r2, r7
 80150e0:	2303      	movs	r3, #3
 80150e2:	439a      	bics	r2, r3
 80150e4:	9b01      	ldr	r3, [sp, #4]
 80150e6:	9203      	str	r2, [sp, #12]
 80150e8:	4293      	cmp	r3, r2
 80150ea:	dc00      	bgt.n	80150ee <_realloc_r+0x5e>
 80150ec:	e16b      	b.n	80153c6 <_realloc_r+0x336>
 80150ee:	9b04      	ldr	r3, [sp, #16]
 80150f0:	48b9      	ldr	r0, [pc, #740]	; (80153d8 <_realloc_r+0x348>)
 80150f2:	189b      	adds	r3, r3, r2
 80150f4:	6882      	ldr	r2, [r0, #8]
 80150f6:	4694      	mov	ip, r2
 80150f8:	685a      	ldr	r2, [r3, #4]
 80150fa:	459c      	cmp	ip, r3
 80150fc:	d006      	beq.n	801510c <_realloc_r+0x7c>
 80150fe:	2501      	movs	r5, #1
 8015100:	0011      	movs	r1, r2
 8015102:	43a9      	bics	r1, r5
 8015104:	1859      	adds	r1, r3, r1
 8015106:	6849      	ldr	r1, [r1, #4]
 8015108:	4229      	tst	r1, r5
 801510a:	d126      	bne.n	801515a <_realloc_r+0xca>
 801510c:	2103      	movs	r1, #3
 801510e:	438a      	bics	r2, r1
 8015110:	9903      	ldr	r1, [sp, #12]
 8015112:	188e      	adds	r6, r1, r2
 8015114:	9901      	ldr	r1, [sp, #4]
 8015116:	459c      	cmp	ip, r3
 8015118:	d117      	bne.n	801514a <_realloc_r+0xba>
 801511a:	3110      	adds	r1, #16
 801511c:	42b1      	cmp	r1, r6
 801511e:	dc1e      	bgt.n	801515e <_realloc_r+0xce>
 8015120:	9901      	ldr	r1, [sp, #4]
 8015122:	9b04      	ldr	r3, [sp, #16]
 8015124:	468c      	mov	ip, r1
 8015126:	4463      	add	r3, ip
 8015128:	6083      	str	r3, [r0, #8]
 801512a:	001a      	movs	r2, r3
 801512c:	1a73      	subs	r3, r6, r1
 801512e:	2601      	movs	r6, #1
 8015130:	4333      	orrs	r3, r6
 8015132:	6053      	str	r3, [r2, #4]
 8015134:	0023      	movs	r3, r4
 8015136:	3b08      	subs	r3, #8
 8015138:	685a      	ldr	r2, [r3, #4]
 801513a:	9802      	ldr	r0, [sp, #8]
 801513c:	4016      	ands	r6, r2
 801513e:	430e      	orrs	r6, r1
 8015140:	605e      	str	r6, [r3, #4]
 8015142:	f7ff ff79 	bl	8015038 <__malloc_unlock>
 8015146:	0027      	movs	r7, r4
 8015148:	e7ac      	b.n	80150a4 <_realloc_r+0x14>
 801514a:	42b1      	cmp	r1, r6
 801514c:	dc07      	bgt.n	801515e <_realloc_r+0xce>
 801514e:	68da      	ldr	r2, [r3, #12]
 8015150:	689b      	ldr	r3, [r3, #8]
 8015152:	60da      	str	r2, [r3, #12]
 8015154:	6093      	str	r3, [r2, #8]
 8015156:	9d04      	ldr	r5, [sp, #16]
 8015158:	e07f      	b.n	801525a <_realloc_r+0x1ca>
 801515a:	2200      	movs	r2, #0
 801515c:	0013      	movs	r3, r2
 801515e:	07f9      	lsls	r1, r7, #31
 8015160:	d500      	bpl.n	8015164 <_realloc_r+0xd4>
 8015162:	e0e2      	b.n	801532a <_realloc_r+0x29a>
 8015164:	0021      	movs	r1, r4
 8015166:	3908      	subs	r1, #8
 8015168:	680d      	ldr	r5, [r1, #0]
 801516a:	9904      	ldr	r1, [sp, #16]
 801516c:	1b4d      	subs	r5, r1, r5
 801516e:	2103      	movs	r1, #3
 8015170:	686f      	ldr	r7, [r5, #4]
 8015172:	438f      	bics	r7, r1
 8015174:	9903      	ldr	r1, [sp, #12]
 8015176:	187f      	adds	r7, r7, r1
 8015178:	2b00      	cmp	r3, #0
 801517a:	d100      	bne.n	801517e <_realloc_r+0xee>
 801517c:	e0a0      	b.n	80152c0 <_realloc_r+0x230>
 801517e:	19d6      	adds	r6, r2, r7
 8015180:	459c      	cmp	ip, r3
 8015182:	d149      	bne.n	8015218 <_realloc_r+0x188>
 8015184:	9b01      	ldr	r3, [sp, #4]
 8015186:	3310      	adds	r3, #16
 8015188:	42b3      	cmp	r3, r6
 801518a:	dd00      	ble.n	801518e <_realloc_r+0xfe>
 801518c:	e098      	b.n	80152c0 <_realloc_r+0x230>
 801518e:	68aa      	ldr	r2, [r5, #8]
 8015190:	68eb      	ldr	r3, [r5, #12]
 8015192:	002f      	movs	r7, r5
 8015194:	60d3      	str	r3, [r2, #12]
 8015196:	609a      	str	r2, [r3, #8]
 8015198:	000a      	movs	r2, r1
 801519a:	3a04      	subs	r2, #4
 801519c:	3708      	adds	r7, #8
 801519e:	2a24      	cmp	r2, #36	; 0x24
 80151a0:	d835      	bhi.n	801520e <_realloc_r+0x17e>
 80151a2:	003b      	movs	r3, r7
 80151a4:	2a13      	cmp	r2, #19
 80151a6:	d908      	bls.n	80151ba <_realloc_r+0x12a>
 80151a8:	6823      	ldr	r3, [r4, #0]
 80151aa:	60ab      	str	r3, [r5, #8]
 80151ac:	6863      	ldr	r3, [r4, #4]
 80151ae:	60eb      	str	r3, [r5, #12]
 80151b0:	2a1b      	cmp	r2, #27
 80151b2:	d81a      	bhi.n	80151ea <_realloc_r+0x15a>
 80151b4:	002b      	movs	r3, r5
 80151b6:	3408      	adds	r4, #8
 80151b8:	3310      	adds	r3, #16
 80151ba:	6822      	ldr	r2, [r4, #0]
 80151bc:	601a      	str	r2, [r3, #0]
 80151be:	6862      	ldr	r2, [r4, #4]
 80151c0:	605a      	str	r2, [r3, #4]
 80151c2:	68a2      	ldr	r2, [r4, #8]
 80151c4:	609a      	str	r2, [r3, #8]
 80151c6:	9b01      	ldr	r3, [sp, #4]
 80151c8:	18ea      	adds	r2, r5, r3
 80151ca:	4b83      	ldr	r3, [pc, #524]	; (80153d8 <_realloc_r+0x348>)
 80151cc:	609a      	str	r2, [r3, #8]
 80151ce:	9b01      	ldr	r3, [sp, #4]
 80151d0:	1af3      	subs	r3, r6, r3
 80151d2:	2601      	movs	r6, #1
 80151d4:	4333      	orrs	r3, r6
 80151d6:	6053      	str	r3, [r2, #4]
 80151d8:	686b      	ldr	r3, [r5, #4]
 80151da:	401e      	ands	r6, r3
 80151dc:	9b01      	ldr	r3, [sp, #4]
 80151de:	431e      	orrs	r6, r3
 80151e0:	606e      	str	r6, [r5, #4]
 80151e2:	9802      	ldr	r0, [sp, #8]
 80151e4:	f7ff ff28 	bl	8015038 <__malloc_unlock>
 80151e8:	e75c      	b.n	80150a4 <_realloc_r+0x14>
 80151ea:	68a3      	ldr	r3, [r4, #8]
 80151ec:	612b      	str	r3, [r5, #16]
 80151ee:	68e3      	ldr	r3, [r4, #12]
 80151f0:	616b      	str	r3, [r5, #20]
 80151f2:	2a24      	cmp	r2, #36	; 0x24
 80151f4:	d003      	beq.n	80151fe <_realloc_r+0x16e>
 80151f6:	002b      	movs	r3, r5
 80151f8:	3410      	adds	r4, #16
 80151fa:	3318      	adds	r3, #24
 80151fc:	e7dd      	b.n	80151ba <_realloc_r+0x12a>
 80151fe:	6923      	ldr	r3, [r4, #16]
 8015200:	61ab      	str	r3, [r5, #24]
 8015202:	002b      	movs	r3, r5
 8015204:	6962      	ldr	r2, [r4, #20]
 8015206:	3320      	adds	r3, #32
 8015208:	61ea      	str	r2, [r5, #28]
 801520a:	3418      	adds	r4, #24
 801520c:	e7d5      	b.n	80151ba <_realloc_r+0x12a>
 801520e:	0021      	movs	r1, r4
 8015210:	0038      	movs	r0, r7
 8015212:	f003 fe84 	bl	8018f1e <memmove>
 8015216:	e7d6      	b.n	80151c6 <_realloc_r+0x136>
 8015218:	9a01      	ldr	r2, [sp, #4]
 801521a:	42b2      	cmp	r2, r6
 801521c:	dc50      	bgt.n	80152c0 <_realloc_r+0x230>
 801521e:	0028      	movs	r0, r5
 8015220:	68da      	ldr	r2, [r3, #12]
 8015222:	689b      	ldr	r3, [r3, #8]
 8015224:	3008      	adds	r0, #8
 8015226:	60da      	str	r2, [r3, #12]
 8015228:	6093      	str	r3, [r2, #8]
 801522a:	68aa      	ldr	r2, [r5, #8]
 801522c:	68eb      	ldr	r3, [r5, #12]
 801522e:	60d3      	str	r3, [r2, #12]
 8015230:	609a      	str	r2, [r3, #8]
 8015232:	9a03      	ldr	r2, [sp, #12]
 8015234:	3a04      	subs	r2, #4
 8015236:	2a24      	cmp	r2, #36	; 0x24
 8015238:	d83e      	bhi.n	80152b8 <_realloc_r+0x228>
 801523a:	2a13      	cmp	r2, #19
 801523c:	d907      	bls.n	801524e <_realloc_r+0x1be>
 801523e:	6823      	ldr	r3, [r4, #0]
 8015240:	60ab      	str	r3, [r5, #8]
 8015242:	6863      	ldr	r3, [r4, #4]
 8015244:	60eb      	str	r3, [r5, #12]
 8015246:	2a1b      	cmp	r2, #27
 8015248:	d824      	bhi.n	8015294 <_realloc_r+0x204>
 801524a:	3408      	adds	r4, #8
 801524c:	3008      	adds	r0, #8
 801524e:	6823      	ldr	r3, [r4, #0]
 8015250:	6003      	str	r3, [r0, #0]
 8015252:	6863      	ldr	r3, [r4, #4]
 8015254:	6043      	str	r3, [r0, #4]
 8015256:	68a3      	ldr	r3, [r4, #8]
 8015258:	6083      	str	r3, [r0, #8]
 801525a:	9b01      	ldr	r3, [sp, #4]
 801525c:	6868      	ldr	r0, [r5, #4]
 801525e:	1af4      	subs	r4, r6, r3
 8015260:	2301      	movs	r3, #1
 8015262:	19aa      	adds	r2, r5, r6
 8015264:	4018      	ands	r0, r3
 8015266:	2c0f      	cmp	r4, #15
 8015268:	d800      	bhi.n	801526c <_realloc_r+0x1dc>
 801526a:	e0ae      	b.n	80153ca <_realloc_r+0x33a>
 801526c:	9901      	ldr	r1, [sp, #4]
 801526e:	9e01      	ldr	r6, [sp, #4]
 8015270:	1869      	adds	r1, r5, r1
 8015272:	4330      	orrs	r0, r6
 8015274:	431c      	orrs	r4, r3
 8015276:	6068      	str	r0, [r5, #4]
 8015278:	604c      	str	r4, [r1, #4]
 801527a:	6850      	ldr	r0, [r2, #4]
 801527c:	3108      	adds	r1, #8
 801527e:	4303      	orrs	r3, r0
 8015280:	6053      	str	r3, [r2, #4]
 8015282:	9802      	ldr	r0, [sp, #8]
 8015284:	f003 f9fa 	bl	801867c <_free_r>
 8015288:	9802      	ldr	r0, [sp, #8]
 801528a:	3508      	adds	r5, #8
 801528c:	f7ff fed4 	bl	8015038 <__malloc_unlock>
 8015290:	002f      	movs	r7, r5
 8015292:	e707      	b.n	80150a4 <_realloc_r+0x14>
 8015294:	68a3      	ldr	r3, [r4, #8]
 8015296:	612b      	str	r3, [r5, #16]
 8015298:	68e3      	ldr	r3, [r4, #12]
 801529a:	616b      	str	r3, [r5, #20]
 801529c:	2a24      	cmp	r2, #36	; 0x24
 801529e:	d003      	beq.n	80152a8 <_realloc_r+0x218>
 80152a0:	0028      	movs	r0, r5
 80152a2:	3410      	adds	r4, #16
 80152a4:	3018      	adds	r0, #24
 80152a6:	e7d2      	b.n	801524e <_realloc_r+0x1be>
 80152a8:	0028      	movs	r0, r5
 80152aa:	6923      	ldr	r3, [r4, #16]
 80152ac:	3020      	adds	r0, #32
 80152ae:	61ab      	str	r3, [r5, #24]
 80152b0:	6963      	ldr	r3, [r4, #20]
 80152b2:	3418      	adds	r4, #24
 80152b4:	61eb      	str	r3, [r5, #28]
 80152b6:	e7ca      	b.n	801524e <_realloc_r+0x1be>
 80152b8:	0021      	movs	r1, r4
 80152ba:	f003 fe30 	bl	8018f1e <memmove>
 80152be:	e7cc      	b.n	801525a <_realloc_r+0x1ca>
 80152c0:	9b01      	ldr	r3, [sp, #4]
 80152c2:	42bb      	cmp	r3, r7
 80152c4:	dc31      	bgt.n	801532a <_realloc_r+0x29a>
 80152c6:	0028      	movs	r0, r5
 80152c8:	68aa      	ldr	r2, [r5, #8]
 80152ca:	68eb      	ldr	r3, [r5, #12]
 80152cc:	3008      	adds	r0, #8
 80152ce:	60d3      	str	r3, [r2, #12]
 80152d0:	609a      	str	r2, [r3, #8]
 80152d2:	9a03      	ldr	r2, [sp, #12]
 80152d4:	3a04      	subs	r2, #4
 80152d6:	2a24      	cmp	r2, #36	; 0x24
 80152d8:	d823      	bhi.n	8015322 <_realloc_r+0x292>
 80152da:	2a13      	cmp	r2, #19
 80152dc:	d907      	bls.n	80152ee <_realloc_r+0x25e>
 80152de:	6823      	ldr	r3, [r4, #0]
 80152e0:	60ab      	str	r3, [r5, #8]
 80152e2:	6863      	ldr	r3, [r4, #4]
 80152e4:	60eb      	str	r3, [r5, #12]
 80152e6:	2a1b      	cmp	r2, #27
 80152e8:	d809      	bhi.n	80152fe <_realloc_r+0x26e>
 80152ea:	3408      	adds	r4, #8
 80152ec:	3008      	adds	r0, #8
 80152ee:	6823      	ldr	r3, [r4, #0]
 80152f0:	6003      	str	r3, [r0, #0]
 80152f2:	6863      	ldr	r3, [r4, #4]
 80152f4:	6043      	str	r3, [r0, #4]
 80152f6:	68a3      	ldr	r3, [r4, #8]
 80152f8:	6083      	str	r3, [r0, #8]
 80152fa:	003e      	movs	r6, r7
 80152fc:	e7ad      	b.n	801525a <_realloc_r+0x1ca>
 80152fe:	68a3      	ldr	r3, [r4, #8]
 8015300:	612b      	str	r3, [r5, #16]
 8015302:	68e3      	ldr	r3, [r4, #12]
 8015304:	616b      	str	r3, [r5, #20]
 8015306:	2a24      	cmp	r2, #36	; 0x24
 8015308:	d003      	beq.n	8015312 <_realloc_r+0x282>
 801530a:	0028      	movs	r0, r5
 801530c:	3410      	adds	r4, #16
 801530e:	3018      	adds	r0, #24
 8015310:	e7ed      	b.n	80152ee <_realloc_r+0x25e>
 8015312:	0028      	movs	r0, r5
 8015314:	6923      	ldr	r3, [r4, #16]
 8015316:	3020      	adds	r0, #32
 8015318:	61ab      	str	r3, [r5, #24]
 801531a:	6963      	ldr	r3, [r4, #20]
 801531c:	3418      	adds	r4, #24
 801531e:	61eb      	str	r3, [r5, #28]
 8015320:	e7e5      	b.n	80152ee <_realloc_r+0x25e>
 8015322:	0021      	movs	r1, r4
 8015324:	f003 fdfb 	bl	8018f1e <memmove>
 8015328:	e7e7      	b.n	80152fa <_realloc_r+0x26a>
 801532a:	9905      	ldr	r1, [sp, #20]
 801532c:	9802      	ldr	r0, [sp, #8]
 801532e:	f7ff fc47 	bl	8014bc0 <_malloc_r>
 8015332:	1e07      	subs	r7, r0, #0
 8015334:	d100      	bne.n	8015338 <_realloc_r+0x2a8>
 8015336:	e754      	b.n	80151e2 <_realloc_r+0x152>
 8015338:	0023      	movs	r3, r4
 801533a:	2201      	movs	r2, #1
 801533c:	3b08      	subs	r3, #8
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	4393      	bics	r3, r2
 8015342:	9a04      	ldr	r2, [sp, #16]
 8015344:	18d3      	adds	r3, r2, r3
 8015346:	0002      	movs	r2, r0
 8015348:	3a08      	subs	r2, #8
 801534a:	4293      	cmp	r3, r2
 801534c:	d105      	bne.n	801535a <_realloc_r+0x2ca>
 801534e:	685e      	ldr	r6, [r3, #4]
 8015350:	2303      	movs	r3, #3
 8015352:	439e      	bics	r6, r3
 8015354:	9b03      	ldr	r3, [sp, #12]
 8015356:	18f6      	adds	r6, r6, r3
 8015358:	e6fd      	b.n	8015156 <_realloc_r+0xc6>
 801535a:	9a03      	ldr	r2, [sp, #12]
 801535c:	3a04      	subs	r2, #4
 801535e:	2a24      	cmp	r2, #36	; 0x24
 8015360:	d82d      	bhi.n	80153be <_realloc_r+0x32e>
 8015362:	2a13      	cmp	r2, #19
 8015364:	d928      	bls.n	80153b8 <_realloc_r+0x328>
 8015366:	6823      	ldr	r3, [r4, #0]
 8015368:	6003      	str	r3, [r0, #0]
 801536a:	6863      	ldr	r3, [r4, #4]
 801536c:	6043      	str	r3, [r0, #4]
 801536e:	2a1b      	cmp	r2, #27
 8015370:	d80e      	bhi.n	8015390 <_realloc_r+0x300>
 8015372:	0022      	movs	r2, r4
 8015374:	0003      	movs	r3, r0
 8015376:	3208      	adds	r2, #8
 8015378:	3308      	adds	r3, #8
 801537a:	6811      	ldr	r1, [r2, #0]
 801537c:	6019      	str	r1, [r3, #0]
 801537e:	6851      	ldr	r1, [r2, #4]
 8015380:	6059      	str	r1, [r3, #4]
 8015382:	6892      	ldr	r2, [r2, #8]
 8015384:	609a      	str	r2, [r3, #8]
 8015386:	0021      	movs	r1, r4
 8015388:	9802      	ldr	r0, [sp, #8]
 801538a:	f003 f977 	bl	801867c <_free_r>
 801538e:	e728      	b.n	80151e2 <_realloc_r+0x152>
 8015390:	68a3      	ldr	r3, [r4, #8]
 8015392:	6083      	str	r3, [r0, #8]
 8015394:	68e3      	ldr	r3, [r4, #12]
 8015396:	60c3      	str	r3, [r0, #12]
 8015398:	2a24      	cmp	r2, #36	; 0x24
 801539a:	d004      	beq.n	80153a6 <_realloc_r+0x316>
 801539c:	0022      	movs	r2, r4
 801539e:	0003      	movs	r3, r0
 80153a0:	3210      	adds	r2, #16
 80153a2:	3310      	adds	r3, #16
 80153a4:	e7e9      	b.n	801537a <_realloc_r+0x2ea>
 80153a6:	6923      	ldr	r3, [r4, #16]
 80153a8:	0022      	movs	r2, r4
 80153aa:	6103      	str	r3, [r0, #16]
 80153ac:	0003      	movs	r3, r0
 80153ae:	6961      	ldr	r1, [r4, #20]
 80153b0:	3218      	adds	r2, #24
 80153b2:	3318      	adds	r3, #24
 80153b4:	6141      	str	r1, [r0, #20]
 80153b6:	e7e0      	b.n	801537a <_realloc_r+0x2ea>
 80153b8:	0003      	movs	r3, r0
 80153ba:	0022      	movs	r2, r4
 80153bc:	e7dd      	b.n	801537a <_realloc_r+0x2ea>
 80153be:	0021      	movs	r1, r4
 80153c0:	f003 fdad 	bl	8018f1e <memmove>
 80153c4:	e7df      	b.n	8015386 <_realloc_r+0x2f6>
 80153c6:	9e03      	ldr	r6, [sp, #12]
 80153c8:	e6c5      	b.n	8015156 <_realloc_r+0xc6>
 80153ca:	4306      	orrs	r6, r0
 80153cc:	606e      	str	r6, [r5, #4]
 80153ce:	6851      	ldr	r1, [r2, #4]
 80153d0:	430b      	orrs	r3, r1
 80153d2:	6053      	str	r3, [r2, #4]
 80153d4:	e758      	b.n	8015288 <_realloc_r+0x1f8>
 80153d6:	46c0      	nop			; (mov r8, r8)
 80153d8:	20000568 	.word	0x20000568

080153dc <_sbrk_r>:
 80153dc:	2300      	movs	r3, #0
 80153de:	b570      	push	{r4, r5, r6, lr}
 80153e0:	4d06      	ldr	r5, [pc, #24]	; (80153fc <_sbrk_r+0x20>)
 80153e2:	0004      	movs	r4, r0
 80153e4:	0008      	movs	r0, r1
 80153e6:	602b      	str	r3, [r5, #0]
 80153e8:	f005 fee6 	bl	801b1b8 <_sbrk>
 80153ec:	1c43      	adds	r3, r0, #1
 80153ee:	d103      	bne.n	80153f8 <_sbrk_r+0x1c>
 80153f0:	682b      	ldr	r3, [r5, #0]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d000      	beq.n	80153f8 <_sbrk_r+0x1c>
 80153f6:	6023      	str	r3, [r4, #0]
 80153f8:	bd70      	pop	{r4, r5, r6, pc}
 80153fa:	46c0      	nop			; (mov r8, r8)
 80153fc:	2000700c 	.word	0x2000700c

08015400 <snprintf>:
 8015400:	b40c      	push	{r2, r3}
 8015402:	b530      	push	{r4, r5, lr}
 8015404:	4b17      	ldr	r3, [pc, #92]	; (8015464 <snprintf+0x64>)
 8015406:	000c      	movs	r4, r1
 8015408:	681d      	ldr	r5, [r3, #0]
 801540a:	b09d      	sub	sp, #116	; 0x74
 801540c:	2900      	cmp	r1, #0
 801540e:	da08      	bge.n	8015422 <snprintf+0x22>
 8015410:	238b      	movs	r3, #139	; 0x8b
 8015412:	2001      	movs	r0, #1
 8015414:	602b      	str	r3, [r5, #0]
 8015416:	4240      	negs	r0, r0
 8015418:	b01d      	add	sp, #116	; 0x74
 801541a:	bc30      	pop	{r4, r5}
 801541c:	bc08      	pop	{r3}
 801541e:	b002      	add	sp, #8
 8015420:	4718      	bx	r3
 8015422:	2382      	movs	r3, #130	; 0x82
 8015424:	466a      	mov	r2, sp
 8015426:	009b      	lsls	r3, r3, #2
 8015428:	8293      	strh	r3, [r2, #20]
 801542a:	2300      	movs	r3, #0
 801542c:	9002      	str	r0, [sp, #8]
 801542e:	9006      	str	r0, [sp, #24]
 8015430:	4299      	cmp	r1, r3
 8015432:	d000      	beq.n	8015436 <snprintf+0x36>
 8015434:	1e4b      	subs	r3, r1, #1
 8015436:	9304      	str	r3, [sp, #16]
 8015438:	9307      	str	r3, [sp, #28]
 801543a:	2301      	movs	r3, #1
 801543c:	466a      	mov	r2, sp
 801543e:	425b      	negs	r3, r3
 8015440:	82d3      	strh	r3, [r2, #22]
 8015442:	0028      	movs	r0, r5
 8015444:	ab21      	add	r3, sp, #132	; 0x84
 8015446:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015448:	a902      	add	r1, sp, #8
 801544a:	9301      	str	r3, [sp, #4]
 801544c:	f000 ff92 	bl	8016374 <_svfprintf_r>
 8015450:	1c43      	adds	r3, r0, #1
 8015452:	da01      	bge.n	8015458 <snprintf+0x58>
 8015454:	238b      	movs	r3, #139	; 0x8b
 8015456:	602b      	str	r3, [r5, #0]
 8015458:	2c00      	cmp	r4, #0
 801545a:	d0dd      	beq.n	8015418 <snprintf+0x18>
 801545c:	2300      	movs	r3, #0
 801545e:	9a02      	ldr	r2, [sp, #8]
 8015460:	7013      	strb	r3, [r2, #0]
 8015462:	e7d9      	b.n	8015418 <snprintf+0x18>
 8015464:	20000138 	.word	0x20000138

08015468 <sprintf>:
 8015468:	b40e      	push	{r1, r2, r3}
 801546a:	b500      	push	{lr}
 801546c:	490b      	ldr	r1, [pc, #44]	; (801549c <sprintf+0x34>)
 801546e:	b09c      	sub	sp, #112	; 0x70
 8015470:	ab1d      	add	r3, sp, #116	; 0x74
 8015472:	9002      	str	r0, [sp, #8]
 8015474:	9006      	str	r0, [sp, #24]
 8015476:	9107      	str	r1, [sp, #28]
 8015478:	9104      	str	r1, [sp, #16]
 801547a:	4809      	ldr	r0, [pc, #36]	; (80154a0 <sprintf+0x38>)
 801547c:	4909      	ldr	r1, [pc, #36]	; (80154a4 <sprintf+0x3c>)
 801547e:	cb04      	ldmia	r3!, {r2}
 8015480:	9105      	str	r1, [sp, #20]
 8015482:	6800      	ldr	r0, [r0, #0]
 8015484:	a902      	add	r1, sp, #8
 8015486:	9301      	str	r3, [sp, #4]
 8015488:	f000 ff74 	bl	8016374 <_svfprintf_r>
 801548c:	2300      	movs	r3, #0
 801548e:	9a02      	ldr	r2, [sp, #8]
 8015490:	7013      	strb	r3, [r2, #0]
 8015492:	b01c      	add	sp, #112	; 0x70
 8015494:	bc08      	pop	{r3}
 8015496:	b003      	add	sp, #12
 8015498:	4718      	bx	r3
 801549a:	46c0      	nop			; (mov r8, r8)
 801549c:	7fffffff 	.word	0x7fffffff
 80154a0:	20000138 	.word	0x20000138
 80154a4:	ffff0208 	.word	0xffff0208

080154a8 <strcat>:
 80154a8:	0002      	movs	r2, r0
 80154aa:	b510      	push	{r4, lr}
 80154ac:	7813      	ldrb	r3, [r2, #0]
 80154ae:	0014      	movs	r4, r2
 80154b0:	3201      	adds	r2, #1
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d1fa      	bne.n	80154ac <strcat+0x4>
 80154b6:	5cca      	ldrb	r2, [r1, r3]
 80154b8:	54e2      	strb	r2, [r4, r3]
 80154ba:	3301      	adds	r3, #1
 80154bc:	2a00      	cmp	r2, #0
 80154be:	d1fa      	bne.n	80154b6 <strcat+0xe>
 80154c0:	bd10      	pop	{r4, pc}

080154c2 <strchr>:
 80154c2:	b2c9      	uxtb	r1, r1
 80154c4:	7803      	ldrb	r3, [r0, #0]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d004      	beq.n	80154d4 <strchr+0x12>
 80154ca:	428b      	cmp	r3, r1
 80154cc:	d100      	bne.n	80154d0 <strchr+0xe>
 80154ce:	4770      	bx	lr
 80154d0:	3001      	adds	r0, #1
 80154d2:	e7f7      	b.n	80154c4 <strchr+0x2>
 80154d4:	424b      	negs	r3, r1
 80154d6:	4159      	adcs	r1, r3
 80154d8:	4249      	negs	r1, r1
 80154da:	4008      	ands	r0, r1
 80154dc:	e7f7      	b.n	80154ce <strchr+0xc>

080154de <strcpy>:
 80154de:	0003      	movs	r3, r0
 80154e0:	780a      	ldrb	r2, [r1, #0]
 80154e2:	3101      	adds	r1, #1
 80154e4:	701a      	strb	r2, [r3, #0]
 80154e6:	3301      	adds	r3, #1
 80154e8:	2a00      	cmp	r2, #0
 80154ea:	d1f9      	bne.n	80154e0 <strcpy+0x2>
 80154ec:	4770      	bx	lr

080154ee <strncmp>:
 80154ee:	b530      	push	{r4, r5, lr}
 80154f0:	0005      	movs	r5, r0
 80154f2:	1e10      	subs	r0, r2, #0
 80154f4:	d00b      	beq.n	801550e <strncmp+0x20>
 80154f6:	2400      	movs	r4, #0
 80154f8:	3a01      	subs	r2, #1
 80154fa:	5d2b      	ldrb	r3, [r5, r4]
 80154fc:	5d08      	ldrb	r0, [r1, r4]
 80154fe:	4283      	cmp	r3, r0
 8015500:	d104      	bne.n	801550c <strncmp+0x1e>
 8015502:	4294      	cmp	r4, r2
 8015504:	d002      	beq.n	801550c <strncmp+0x1e>
 8015506:	3401      	adds	r4, #1
 8015508:	2b00      	cmp	r3, #0
 801550a:	d1f6      	bne.n	80154fa <strncmp+0xc>
 801550c:	1a18      	subs	r0, r3, r0
 801550e:	bd30      	pop	{r4, r5, pc}

08015510 <strncpy>:
 8015510:	0003      	movs	r3, r0
 8015512:	b530      	push	{r4, r5, lr}
 8015514:	001d      	movs	r5, r3
 8015516:	2a00      	cmp	r2, #0
 8015518:	d006      	beq.n	8015528 <strncpy+0x18>
 801551a:	780c      	ldrb	r4, [r1, #0]
 801551c:	3a01      	subs	r2, #1
 801551e:	3301      	adds	r3, #1
 8015520:	702c      	strb	r4, [r5, #0]
 8015522:	3101      	adds	r1, #1
 8015524:	2c00      	cmp	r4, #0
 8015526:	d1f5      	bne.n	8015514 <strncpy+0x4>
 8015528:	2100      	movs	r1, #0
 801552a:	189a      	adds	r2, r3, r2
 801552c:	4293      	cmp	r3, r2
 801552e:	d100      	bne.n	8015532 <strncpy+0x22>
 8015530:	bd30      	pop	{r4, r5, pc}
 8015532:	7019      	strb	r1, [r3, #0]
 8015534:	3301      	adds	r3, #1
 8015536:	e7f9      	b.n	801552c <strncpy+0x1c>

08015538 <sulp>:
 8015538:	b570      	push	{r4, r5, r6, lr}
 801553a:	0016      	movs	r6, r2
 801553c:	000d      	movs	r5, r1
 801553e:	f004 f837 	bl	80195b0 <__ulp>
 8015542:	2e00      	cmp	r6, #0
 8015544:	d00d      	beq.n	8015562 <sulp+0x2a>
 8015546:	236b      	movs	r3, #107	; 0x6b
 8015548:	006a      	lsls	r2, r5, #1
 801554a:	0d52      	lsrs	r2, r2, #21
 801554c:	1a9b      	subs	r3, r3, r2
 801554e:	2b00      	cmp	r3, #0
 8015550:	dd07      	ble.n	8015562 <sulp+0x2a>
 8015552:	2400      	movs	r4, #0
 8015554:	4a03      	ldr	r2, [pc, #12]	; (8015564 <sulp+0x2c>)
 8015556:	051b      	lsls	r3, r3, #20
 8015558:	189d      	adds	r5, r3, r2
 801555a:	002b      	movs	r3, r5
 801555c:	0022      	movs	r2, r4
 801555e:	f7ed f81d 	bl	800259c <__aeabi_dmul>
 8015562:	bd70      	pop	{r4, r5, r6, pc}
 8015564:	3ff00000 	.word	0x3ff00000

08015568 <_strtod_l>:
 8015568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801556a:	001d      	movs	r5, r3
 801556c:	2300      	movs	r3, #0
 801556e:	b0a7      	sub	sp, #156	; 0x9c
 8015570:	9322      	str	r3, [sp, #136]	; 0x88
 8015572:	4bae      	ldr	r3, [pc, #696]	; (801582c <_strtod_l+0x2c4>)
 8015574:	9005      	str	r0, [sp, #20]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	9108      	str	r1, [sp, #32]
 801557a:	0018      	movs	r0, r3
 801557c:	9307      	str	r3, [sp, #28]
 801557e:	921d      	str	r2, [sp, #116]	; 0x74
 8015580:	f7ea fdca 	bl	8000118 <strlen>
 8015584:	2600      	movs	r6, #0
 8015586:	0004      	movs	r4, r0
 8015588:	2700      	movs	r7, #0
 801558a:	9b08      	ldr	r3, [sp, #32]
 801558c:	9321      	str	r3, [sp, #132]	; 0x84
 801558e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015590:	7813      	ldrb	r3, [r2, #0]
 8015592:	2b2b      	cmp	r3, #43	; 0x2b
 8015594:	d058      	beq.n	8015648 <_strtod_l+0xe0>
 8015596:	d844      	bhi.n	8015622 <_strtod_l+0xba>
 8015598:	2b0d      	cmp	r3, #13
 801559a:	d83d      	bhi.n	8015618 <_strtod_l+0xb0>
 801559c:	2b08      	cmp	r3, #8
 801559e:	d83d      	bhi.n	801561c <_strtod_l+0xb4>
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d047      	beq.n	8015634 <_strtod_l+0xcc>
 80155a4:	2300      	movs	r3, #0
 80155a6:	9310      	str	r3, [sp, #64]	; 0x40
 80155a8:	2200      	movs	r2, #0
 80155aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80155ac:	920a      	str	r2, [sp, #40]	; 0x28
 80155ae:	9306      	str	r3, [sp, #24]
 80155b0:	781b      	ldrb	r3, [r3, #0]
 80155b2:	2b30      	cmp	r3, #48	; 0x30
 80155b4:	d000      	beq.n	80155b8 <_strtod_l+0x50>
 80155b6:	e083      	b.n	80156c0 <_strtod_l+0x158>
 80155b8:	9b06      	ldr	r3, [sp, #24]
 80155ba:	3220      	adds	r2, #32
 80155bc:	785b      	ldrb	r3, [r3, #1]
 80155be:	4393      	bics	r3, r2
 80155c0:	2b58      	cmp	r3, #88	; 0x58
 80155c2:	d000      	beq.n	80155c6 <_strtod_l+0x5e>
 80155c4:	e072      	b.n	80156ac <_strtod_l+0x144>
 80155c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155c8:	9502      	str	r5, [sp, #8]
 80155ca:	9301      	str	r3, [sp, #4]
 80155cc:	ab22      	add	r3, sp, #136	; 0x88
 80155ce:	9300      	str	r3, [sp, #0]
 80155d0:	4a97      	ldr	r2, [pc, #604]	; (8015830 <_strtod_l+0x2c8>)
 80155d2:	ab23      	add	r3, sp, #140	; 0x8c
 80155d4:	9805      	ldr	r0, [sp, #20]
 80155d6:	a921      	add	r1, sp, #132	; 0x84
 80155d8:	f003 f96c 	bl	80188b4 <__gethex>
 80155dc:	2307      	movs	r3, #7
 80155de:	0005      	movs	r5, r0
 80155e0:	0004      	movs	r4, r0
 80155e2:	401d      	ands	r5, r3
 80155e4:	4218      	tst	r0, r3
 80155e6:	d006      	beq.n	80155f6 <_strtod_l+0x8e>
 80155e8:	2d06      	cmp	r5, #6
 80155ea:	d12f      	bne.n	801564c <_strtod_l+0xe4>
 80155ec:	9b06      	ldr	r3, [sp, #24]
 80155ee:	3301      	adds	r3, #1
 80155f0:	9321      	str	r3, [sp, #132]	; 0x84
 80155f2:	2300      	movs	r3, #0
 80155f4:	9310      	str	r3, [sp, #64]	; 0x40
 80155f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d002      	beq.n	8015602 <_strtod_l+0x9a>
 80155fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80155fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015600:	601a      	str	r2, [r3, #0]
 8015602:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015604:	2b00      	cmp	r3, #0
 8015606:	d01c      	beq.n	8015642 <_strtod_l+0xda>
 8015608:	2380      	movs	r3, #128	; 0x80
 801560a:	0032      	movs	r2, r6
 801560c:	061b      	lsls	r3, r3, #24
 801560e:	18fb      	adds	r3, r7, r3
 8015610:	0010      	movs	r0, r2
 8015612:	0019      	movs	r1, r3
 8015614:	b027      	add	sp, #156	; 0x9c
 8015616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015618:	2b20      	cmp	r3, #32
 801561a:	d1c3      	bne.n	80155a4 <_strtod_l+0x3c>
 801561c:	3201      	adds	r2, #1
 801561e:	9221      	str	r2, [sp, #132]	; 0x84
 8015620:	e7b5      	b.n	801558e <_strtod_l+0x26>
 8015622:	2b2d      	cmp	r3, #45	; 0x2d
 8015624:	d1be      	bne.n	80155a4 <_strtod_l+0x3c>
 8015626:	3b2c      	subs	r3, #44	; 0x2c
 8015628:	9310      	str	r3, [sp, #64]	; 0x40
 801562a:	1c53      	adds	r3, r2, #1
 801562c:	9321      	str	r3, [sp, #132]	; 0x84
 801562e:	7853      	ldrb	r3, [r2, #1]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d1b9      	bne.n	80155a8 <_strtod_l+0x40>
 8015634:	9b08      	ldr	r3, [sp, #32]
 8015636:	9321      	str	r3, [sp, #132]	; 0x84
 8015638:	2300      	movs	r3, #0
 801563a:	9310      	str	r3, [sp, #64]	; 0x40
 801563c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801563e:	2b00      	cmp	r3, #0
 8015640:	d1dc      	bne.n	80155fc <_strtod_l+0x94>
 8015642:	0032      	movs	r2, r6
 8015644:	003b      	movs	r3, r7
 8015646:	e7e3      	b.n	8015610 <_strtod_l+0xa8>
 8015648:	2300      	movs	r3, #0
 801564a:	e7ed      	b.n	8015628 <_strtod_l+0xc0>
 801564c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801564e:	2a00      	cmp	r2, #0
 8015650:	d007      	beq.n	8015662 <_strtod_l+0xfa>
 8015652:	2135      	movs	r1, #53	; 0x35
 8015654:	a824      	add	r0, sp, #144	; 0x90
 8015656:	f004 f8aa 	bl	80197ae <__copybits>
 801565a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801565c:	9805      	ldr	r0, [sp, #20]
 801565e:	f003 fc99 	bl	8018f94 <_Bfree>
 8015662:	1e68      	subs	r0, r5, #1
 8015664:	2805      	cmp	r0, #5
 8015666:	d806      	bhi.n	8015676 <_strtod_l+0x10e>
 8015668:	f7ea fd5e 	bl	8000128 <__gnu_thumb1_case_uqi>
 801566c:	1c190b0e 	.word	0x1c190b0e
 8015670:	030e      	.short	0x030e
 8015672:	2700      	movs	r7, #0
 8015674:	003e      	movs	r6, r7
 8015676:	0723      	lsls	r3, r4, #28
 8015678:	d5bd      	bpl.n	80155f6 <_strtod_l+0x8e>
 801567a:	2380      	movs	r3, #128	; 0x80
 801567c:	061b      	lsls	r3, r3, #24
 801567e:	431f      	orrs	r7, r3
 8015680:	e7b9      	b.n	80155f6 <_strtod_l+0x8e>
 8015682:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015684:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8015686:	e7f6      	b.n	8015676 <_strtod_l+0x10e>
 8015688:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801568a:	4a6a      	ldr	r2, [pc, #424]	; (8015834 <_strtod_l+0x2cc>)
 801568c:	496a      	ldr	r1, [pc, #424]	; (8015838 <_strtod_l+0x2d0>)
 801568e:	401a      	ands	r2, r3
 8015690:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015692:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015694:	185b      	adds	r3, r3, r1
 8015696:	051b      	lsls	r3, r3, #20
 8015698:	431a      	orrs	r2, r3
 801569a:	0017      	movs	r7, r2
 801569c:	e7eb      	b.n	8015676 <_strtod_l+0x10e>
 801569e:	2600      	movs	r6, #0
 80156a0:	4f66      	ldr	r7, [pc, #408]	; (801583c <_strtod_l+0x2d4>)
 80156a2:	e7e8      	b.n	8015676 <_strtod_l+0x10e>
 80156a4:	2601      	movs	r6, #1
 80156a6:	4f66      	ldr	r7, [pc, #408]	; (8015840 <_strtod_l+0x2d8>)
 80156a8:	4276      	negs	r6, r6
 80156aa:	e7e4      	b.n	8015676 <_strtod_l+0x10e>
 80156ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156ae:	1c5a      	adds	r2, r3, #1
 80156b0:	9221      	str	r2, [sp, #132]	; 0x84
 80156b2:	785b      	ldrb	r3, [r3, #1]
 80156b4:	2b30      	cmp	r3, #48	; 0x30
 80156b6:	d0f9      	beq.n	80156ac <_strtod_l+0x144>
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d09c      	beq.n	80155f6 <_strtod_l+0x8e>
 80156bc:	2301      	movs	r3, #1
 80156be:	930a      	str	r3, [sp, #40]	; 0x28
 80156c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156c2:	220a      	movs	r2, #10
 80156c4:	9311      	str	r3, [sp, #68]	; 0x44
 80156c6:	2300      	movs	r3, #0
 80156c8:	930e      	str	r3, [sp, #56]	; 0x38
 80156ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80156cc:	9309      	str	r3, [sp, #36]	; 0x24
 80156ce:	9821      	ldr	r0, [sp, #132]	; 0x84
 80156d0:	7805      	ldrb	r5, [r0, #0]
 80156d2:	002b      	movs	r3, r5
 80156d4:	3b30      	subs	r3, #48	; 0x30
 80156d6:	b2d9      	uxtb	r1, r3
 80156d8:	2909      	cmp	r1, #9
 80156da:	d927      	bls.n	801572c <_strtod_l+0x1c4>
 80156dc:	0022      	movs	r2, r4
 80156de:	9907      	ldr	r1, [sp, #28]
 80156e0:	f7ff ff05 	bl	80154ee <strncmp>
 80156e4:	2800      	cmp	r0, #0
 80156e6:	d033      	beq.n	8015750 <_strtod_l+0x1e8>
 80156e8:	2000      	movs	r0, #0
 80156ea:	002b      	movs	r3, r5
 80156ec:	4684      	mov	ip, r0
 80156ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156f0:	900c      	str	r0, [sp, #48]	; 0x30
 80156f2:	9206      	str	r2, [sp, #24]
 80156f4:	2220      	movs	r2, #32
 80156f6:	0019      	movs	r1, r3
 80156f8:	4391      	bics	r1, r2
 80156fa:	000a      	movs	r2, r1
 80156fc:	2100      	movs	r1, #0
 80156fe:	9107      	str	r1, [sp, #28]
 8015700:	2a45      	cmp	r2, #69	; 0x45
 8015702:	d000      	beq.n	8015706 <_strtod_l+0x19e>
 8015704:	e0c5      	b.n	8015892 <_strtod_l+0x32a>
 8015706:	9b06      	ldr	r3, [sp, #24]
 8015708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801570a:	4303      	orrs	r3, r0
 801570c:	4313      	orrs	r3, r2
 801570e:	428b      	cmp	r3, r1
 8015710:	d090      	beq.n	8015634 <_strtod_l+0xcc>
 8015712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015714:	9308      	str	r3, [sp, #32]
 8015716:	3301      	adds	r3, #1
 8015718:	9321      	str	r3, [sp, #132]	; 0x84
 801571a:	9b08      	ldr	r3, [sp, #32]
 801571c:	785b      	ldrb	r3, [r3, #1]
 801571e:	2b2b      	cmp	r3, #43	; 0x2b
 8015720:	d075      	beq.n	801580e <_strtod_l+0x2a6>
 8015722:	000c      	movs	r4, r1
 8015724:	2b2d      	cmp	r3, #45	; 0x2d
 8015726:	d178      	bne.n	801581a <_strtod_l+0x2b2>
 8015728:	2401      	movs	r4, #1
 801572a:	e071      	b.n	8015810 <_strtod_l+0x2a8>
 801572c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801572e:	2908      	cmp	r1, #8
 8015730:	dc09      	bgt.n	8015746 <_strtod_l+0x1de>
 8015732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015734:	4351      	muls	r1, r2
 8015736:	185b      	adds	r3, r3, r1
 8015738:	930b      	str	r3, [sp, #44]	; 0x2c
 801573a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801573c:	3001      	adds	r0, #1
 801573e:	3301      	adds	r3, #1
 8015740:	9309      	str	r3, [sp, #36]	; 0x24
 8015742:	9021      	str	r0, [sp, #132]	; 0x84
 8015744:	e7c3      	b.n	80156ce <_strtod_l+0x166>
 8015746:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015748:	4351      	muls	r1, r2
 801574a:	185b      	adds	r3, r3, r1
 801574c:	930e      	str	r3, [sp, #56]	; 0x38
 801574e:	e7f4      	b.n	801573a <_strtod_l+0x1d2>
 8015750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015754:	191c      	adds	r4, r3, r4
 8015756:	9421      	str	r4, [sp, #132]	; 0x84
 8015758:	7823      	ldrb	r3, [r4, #0]
 801575a:	2a00      	cmp	r2, #0
 801575c:	d039      	beq.n	80157d2 <_strtod_l+0x26a>
 801575e:	900c      	str	r0, [sp, #48]	; 0x30
 8015760:	9206      	str	r2, [sp, #24]
 8015762:	001a      	movs	r2, r3
 8015764:	3a30      	subs	r2, #48	; 0x30
 8015766:	2a09      	cmp	r2, #9
 8015768:	d912      	bls.n	8015790 <_strtod_l+0x228>
 801576a:	2201      	movs	r2, #1
 801576c:	4694      	mov	ip, r2
 801576e:	e7c1      	b.n	80156f4 <_strtod_l+0x18c>
 8015770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015772:	3001      	adds	r0, #1
 8015774:	1c5a      	adds	r2, r3, #1
 8015776:	9221      	str	r2, [sp, #132]	; 0x84
 8015778:	785b      	ldrb	r3, [r3, #1]
 801577a:	2b30      	cmp	r3, #48	; 0x30
 801577c:	d0f8      	beq.n	8015770 <_strtod_l+0x208>
 801577e:	001a      	movs	r2, r3
 8015780:	3a31      	subs	r2, #49	; 0x31
 8015782:	2a08      	cmp	r2, #8
 8015784:	d83e      	bhi.n	8015804 <_strtod_l+0x29c>
 8015786:	900c      	str	r0, [sp, #48]	; 0x30
 8015788:	2000      	movs	r0, #0
 801578a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801578c:	9006      	str	r0, [sp, #24]
 801578e:	9211      	str	r2, [sp, #68]	; 0x44
 8015790:	001a      	movs	r2, r3
 8015792:	9906      	ldr	r1, [sp, #24]
 8015794:	1c44      	adds	r4, r0, #1
 8015796:	3a30      	subs	r2, #48	; 0x30
 8015798:	2b30      	cmp	r3, #48	; 0x30
 801579a:	d013      	beq.n	80157c4 <_strtod_l+0x25c>
 801579c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801579e:	191b      	adds	r3, r3, r4
 80157a0:	930c      	str	r3, [sp, #48]	; 0x30
 80157a2:	1844      	adds	r4, r0, r1
 80157a4:	000b      	movs	r3, r1
 80157a6:	210a      	movs	r1, #10
 80157a8:	429c      	cmp	r4, r3
 80157aa:	d114      	bne.n	80157d6 <_strtod_l+0x26e>
 80157ac:	9b06      	ldr	r3, [sp, #24]
 80157ae:	1c59      	adds	r1, r3, #1
 80157b0:	1809      	adds	r1, r1, r0
 80157b2:	1818      	adds	r0, r3, r0
 80157b4:	2808      	cmp	r0, #8
 80157b6:	dc1c      	bgt.n	80157f2 <_strtod_l+0x28a>
 80157b8:	230a      	movs	r3, #10
 80157ba:	2400      	movs	r4, #0
 80157bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80157be:	4343      	muls	r3, r0
 80157c0:	18d3      	adds	r3, r2, r3
 80157c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80157c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157c6:	0020      	movs	r0, r4
 80157c8:	1c5a      	adds	r2, r3, #1
 80157ca:	9221      	str	r2, [sp, #132]	; 0x84
 80157cc:	785b      	ldrb	r3, [r3, #1]
 80157ce:	9106      	str	r1, [sp, #24]
 80157d0:	e7c7      	b.n	8015762 <_strtod_l+0x1fa>
 80157d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157d4:	e7d1      	b.n	801577a <_strtod_l+0x212>
 80157d6:	2b08      	cmp	r3, #8
 80157d8:	dc04      	bgt.n	80157e4 <_strtod_l+0x27c>
 80157da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80157dc:	434d      	muls	r5, r1
 80157de:	950b      	str	r5, [sp, #44]	; 0x2c
 80157e0:	3301      	adds	r3, #1
 80157e2:	e7e1      	b.n	80157a8 <_strtod_l+0x240>
 80157e4:	1c5d      	adds	r5, r3, #1
 80157e6:	2d10      	cmp	r5, #16
 80157e8:	dcfa      	bgt.n	80157e0 <_strtod_l+0x278>
 80157ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80157ec:	434d      	muls	r5, r1
 80157ee:	950e      	str	r5, [sp, #56]	; 0x38
 80157f0:	e7f6      	b.n	80157e0 <_strtod_l+0x278>
 80157f2:	2400      	movs	r4, #0
 80157f4:	2910      	cmp	r1, #16
 80157f6:	dce5      	bgt.n	80157c4 <_strtod_l+0x25c>
 80157f8:	230a      	movs	r3, #10
 80157fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80157fc:	4343      	muls	r3, r0
 80157fe:	18d3      	adds	r3, r2, r3
 8015800:	930e      	str	r3, [sp, #56]	; 0x38
 8015802:	e7df      	b.n	80157c4 <_strtod_l+0x25c>
 8015804:	2200      	movs	r2, #0
 8015806:	920c      	str	r2, [sp, #48]	; 0x30
 8015808:	9206      	str	r2, [sp, #24]
 801580a:	3201      	adds	r2, #1
 801580c:	e7ae      	b.n	801576c <_strtod_l+0x204>
 801580e:	2400      	movs	r4, #0
 8015810:	9b08      	ldr	r3, [sp, #32]
 8015812:	3302      	adds	r3, #2
 8015814:	9321      	str	r3, [sp, #132]	; 0x84
 8015816:	9b08      	ldr	r3, [sp, #32]
 8015818:	789b      	ldrb	r3, [r3, #2]
 801581a:	001a      	movs	r2, r3
 801581c:	3a30      	subs	r2, #48	; 0x30
 801581e:	2a09      	cmp	r2, #9
 8015820:	d914      	bls.n	801584c <_strtod_l+0x2e4>
 8015822:	9a08      	ldr	r2, [sp, #32]
 8015824:	9221      	str	r2, [sp, #132]	; 0x84
 8015826:	2200      	movs	r2, #0
 8015828:	e032      	b.n	8015890 <_strtod_l+0x328>
 801582a:	46c0      	nop			; (mov r8, r8)
 801582c:	0801e7e4 	.word	0x0801e7e4
 8015830:	0801e654 	.word	0x0801e654
 8015834:	ffefffff 	.word	0xffefffff
 8015838:	00000433 	.word	0x00000433
 801583c:	7ff00000 	.word	0x7ff00000
 8015840:	7fffffff 	.word	0x7fffffff
 8015844:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015846:	1c5a      	adds	r2, r3, #1
 8015848:	9221      	str	r2, [sp, #132]	; 0x84
 801584a:	785b      	ldrb	r3, [r3, #1]
 801584c:	2b30      	cmp	r3, #48	; 0x30
 801584e:	d0f9      	beq.n	8015844 <_strtod_l+0x2dc>
 8015850:	2200      	movs	r2, #0
 8015852:	9207      	str	r2, [sp, #28]
 8015854:	001a      	movs	r2, r3
 8015856:	3a31      	subs	r2, #49	; 0x31
 8015858:	2a08      	cmp	r2, #8
 801585a:	d81a      	bhi.n	8015892 <_strtod_l+0x32a>
 801585c:	3b30      	subs	r3, #48	; 0x30
 801585e:	001a      	movs	r2, r3
 8015860:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015862:	9307      	str	r3, [sp, #28]
 8015864:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015866:	1c59      	adds	r1, r3, #1
 8015868:	9121      	str	r1, [sp, #132]	; 0x84
 801586a:	785b      	ldrb	r3, [r3, #1]
 801586c:	001d      	movs	r5, r3
 801586e:	3d30      	subs	r5, #48	; 0x30
 8015870:	2d09      	cmp	r5, #9
 8015872:	d939      	bls.n	80158e8 <_strtod_l+0x380>
 8015874:	9d07      	ldr	r5, [sp, #28]
 8015876:	1b49      	subs	r1, r1, r5
 8015878:	4daf      	ldr	r5, [pc, #700]	; (8015b38 <_strtod_l+0x5d0>)
 801587a:	9507      	str	r5, [sp, #28]
 801587c:	2908      	cmp	r1, #8
 801587e:	dc03      	bgt.n	8015888 <_strtod_l+0x320>
 8015880:	9207      	str	r2, [sp, #28]
 8015882:	42aa      	cmp	r2, r5
 8015884:	dd00      	ble.n	8015888 <_strtod_l+0x320>
 8015886:	9507      	str	r5, [sp, #28]
 8015888:	2c00      	cmp	r4, #0
 801588a:	d002      	beq.n	8015892 <_strtod_l+0x32a>
 801588c:	9a07      	ldr	r2, [sp, #28]
 801588e:	4252      	negs	r2, r2
 8015890:	9207      	str	r2, [sp, #28]
 8015892:	9a06      	ldr	r2, [sp, #24]
 8015894:	2a00      	cmp	r2, #0
 8015896:	d14b      	bne.n	8015930 <_strtod_l+0x3c8>
 8015898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801589a:	4310      	orrs	r0, r2
 801589c:	d000      	beq.n	80158a0 <_strtod_l+0x338>
 801589e:	e6aa      	b.n	80155f6 <_strtod_l+0x8e>
 80158a0:	4662      	mov	r2, ip
 80158a2:	2a00      	cmp	r2, #0
 80158a4:	d000      	beq.n	80158a8 <_strtod_l+0x340>
 80158a6:	e6c5      	b.n	8015634 <_strtod_l+0xcc>
 80158a8:	2b69      	cmp	r3, #105	; 0x69
 80158aa:	d025      	beq.n	80158f8 <_strtod_l+0x390>
 80158ac:	dc21      	bgt.n	80158f2 <_strtod_l+0x38a>
 80158ae:	2b49      	cmp	r3, #73	; 0x49
 80158b0:	d022      	beq.n	80158f8 <_strtod_l+0x390>
 80158b2:	2b4e      	cmp	r3, #78	; 0x4e
 80158b4:	d000      	beq.n	80158b8 <_strtod_l+0x350>
 80158b6:	e6bd      	b.n	8015634 <_strtod_l+0xcc>
 80158b8:	49a0      	ldr	r1, [pc, #640]	; (8015b3c <_strtod_l+0x5d4>)
 80158ba:	a821      	add	r0, sp, #132	; 0x84
 80158bc:	f003 fa48 	bl	8018d50 <__match>
 80158c0:	2800      	cmp	r0, #0
 80158c2:	d100      	bne.n	80158c6 <_strtod_l+0x35e>
 80158c4:	e6b6      	b.n	8015634 <_strtod_l+0xcc>
 80158c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158c8:	781b      	ldrb	r3, [r3, #0]
 80158ca:	2b28      	cmp	r3, #40	; 0x28
 80158cc:	d12a      	bne.n	8015924 <_strtod_l+0x3bc>
 80158ce:	499c      	ldr	r1, [pc, #624]	; (8015b40 <_strtod_l+0x5d8>)
 80158d0:	aa24      	add	r2, sp, #144	; 0x90
 80158d2:	a821      	add	r0, sp, #132	; 0x84
 80158d4:	f003 fa50 	bl	8018d78 <__hexnan>
 80158d8:	2805      	cmp	r0, #5
 80158da:	d123      	bne.n	8015924 <_strtod_l+0x3bc>
 80158dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80158de:	4a99      	ldr	r2, [pc, #612]	; (8015b44 <_strtod_l+0x5dc>)
 80158e0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80158e2:	431a      	orrs	r2, r3
 80158e4:	0017      	movs	r7, r2
 80158e6:	e686      	b.n	80155f6 <_strtod_l+0x8e>
 80158e8:	210a      	movs	r1, #10
 80158ea:	434a      	muls	r2, r1
 80158ec:	18d2      	adds	r2, r2, r3
 80158ee:	3a30      	subs	r2, #48	; 0x30
 80158f0:	e7b8      	b.n	8015864 <_strtod_l+0x2fc>
 80158f2:	2b6e      	cmp	r3, #110	; 0x6e
 80158f4:	d0e0      	beq.n	80158b8 <_strtod_l+0x350>
 80158f6:	e69d      	b.n	8015634 <_strtod_l+0xcc>
 80158f8:	4993      	ldr	r1, [pc, #588]	; (8015b48 <_strtod_l+0x5e0>)
 80158fa:	a821      	add	r0, sp, #132	; 0x84
 80158fc:	f003 fa28 	bl	8018d50 <__match>
 8015900:	2800      	cmp	r0, #0
 8015902:	d100      	bne.n	8015906 <_strtod_l+0x39e>
 8015904:	e696      	b.n	8015634 <_strtod_l+0xcc>
 8015906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015908:	4990      	ldr	r1, [pc, #576]	; (8015b4c <_strtod_l+0x5e4>)
 801590a:	3b01      	subs	r3, #1
 801590c:	a821      	add	r0, sp, #132	; 0x84
 801590e:	9321      	str	r3, [sp, #132]	; 0x84
 8015910:	f003 fa1e 	bl	8018d50 <__match>
 8015914:	2800      	cmp	r0, #0
 8015916:	d102      	bne.n	801591e <_strtod_l+0x3b6>
 8015918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801591a:	3301      	adds	r3, #1
 801591c:	9321      	str	r3, [sp, #132]	; 0x84
 801591e:	2600      	movs	r6, #0
 8015920:	4f88      	ldr	r7, [pc, #544]	; (8015b44 <_strtod_l+0x5dc>)
 8015922:	e668      	b.n	80155f6 <_strtod_l+0x8e>
 8015924:	488a      	ldr	r0, [pc, #552]	; (8015b50 <_strtod_l+0x5e8>)
 8015926:	f003 ffb9 	bl	801989c <nan>
 801592a:	0006      	movs	r6, r0
 801592c:	000f      	movs	r7, r1
 801592e:	e662      	b.n	80155f6 <_strtod_l+0x8e>
 8015930:	9b07      	ldr	r3, [sp, #28]
 8015932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015934:	1a9b      	subs	r3, r3, r2
 8015936:	930a      	str	r3, [sp, #40]	; 0x28
 8015938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801593a:	2b00      	cmp	r3, #0
 801593c:	d101      	bne.n	8015942 <_strtod_l+0x3da>
 801593e:	9b06      	ldr	r3, [sp, #24]
 8015940:	9309      	str	r3, [sp, #36]	; 0x24
 8015942:	9c06      	ldr	r4, [sp, #24]
 8015944:	2c10      	cmp	r4, #16
 8015946:	dd00      	ble.n	801594a <_strtod_l+0x3e2>
 8015948:	2410      	movs	r4, #16
 801594a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801594c:	f7ed fca8 	bl	80032a0 <__aeabi_ui2d>
 8015950:	9b06      	ldr	r3, [sp, #24]
 8015952:	0006      	movs	r6, r0
 8015954:	000f      	movs	r7, r1
 8015956:	2b09      	cmp	r3, #9
 8015958:	dd15      	ble.n	8015986 <_strtod_l+0x41e>
 801595a:	0022      	movs	r2, r4
 801595c:	4b7d      	ldr	r3, [pc, #500]	; (8015b54 <_strtod_l+0x5ec>)
 801595e:	3a09      	subs	r2, #9
 8015960:	00d2      	lsls	r2, r2, #3
 8015962:	189b      	adds	r3, r3, r2
 8015964:	681a      	ldr	r2, [r3, #0]
 8015966:	685b      	ldr	r3, [r3, #4]
 8015968:	f7ec fe18 	bl	800259c <__aeabi_dmul>
 801596c:	0006      	movs	r6, r0
 801596e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015970:	000f      	movs	r7, r1
 8015972:	f7ed fc95 	bl	80032a0 <__aeabi_ui2d>
 8015976:	0002      	movs	r2, r0
 8015978:	000b      	movs	r3, r1
 801597a:	0030      	movs	r0, r6
 801597c:	0039      	movs	r1, r7
 801597e:	f7eb fe9d 	bl	80016bc <__aeabi_dadd>
 8015982:	0006      	movs	r6, r0
 8015984:	000f      	movs	r7, r1
 8015986:	9b06      	ldr	r3, [sp, #24]
 8015988:	2b0f      	cmp	r3, #15
 801598a:	dc39      	bgt.n	8015a00 <_strtod_l+0x498>
 801598c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801598e:	2b00      	cmp	r3, #0
 8015990:	d100      	bne.n	8015994 <_strtod_l+0x42c>
 8015992:	e630      	b.n	80155f6 <_strtod_l+0x8e>
 8015994:	dd24      	ble.n	80159e0 <_strtod_l+0x478>
 8015996:	2b16      	cmp	r3, #22
 8015998:	dc09      	bgt.n	80159ae <_strtod_l+0x446>
 801599a:	00dd      	lsls	r5, r3, #3
 801599c:	0032      	movs	r2, r6
 801599e:	003b      	movs	r3, r7
 80159a0:	4c6c      	ldr	r4, [pc, #432]	; (8015b54 <_strtod_l+0x5ec>)
 80159a2:	1964      	adds	r4, r4, r5
 80159a4:	6820      	ldr	r0, [r4, #0]
 80159a6:	6861      	ldr	r1, [r4, #4]
 80159a8:	f7ec fdf8 	bl	800259c <__aeabi_dmul>
 80159ac:	e7bd      	b.n	801592a <_strtod_l+0x3c2>
 80159ae:	2325      	movs	r3, #37	; 0x25
 80159b0:	9a06      	ldr	r2, [sp, #24]
 80159b2:	1a9b      	subs	r3, r3, r2
 80159b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159b6:	4293      	cmp	r3, r2
 80159b8:	db22      	blt.n	8015a00 <_strtod_l+0x498>
 80159ba:	240f      	movs	r4, #15
 80159bc:	9b06      	ldr	r3, [sp, #24]
 80159be:	4d65      	ldr	r5, [pc, #404]	; (8015b54 <_strtod_l+0x5ec>)
 80159c0:	1ae4      	subs	r4, r4, r3
 80159c2:	00e1      	lsls	r1, r4, #3
 80159c4:	1869      	adds	r1, r5, r1
 80159c6:	0032      	movs	r2, r6
 80159c8:	6808      	ldr	r0, [r1, #0]
 80159ca:	6849      	ldr	r1, [r1, #4]
 80159cc:	003b      	movs	r3, r7
 80159ce:	f7ec fde5 	bl	800259c <__aeabi_dmul>
 80159d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159d4:	1b1c      	subs	r4, r3, r4
 80159d6:	00e4      	lsls	r4, r4, #3
 80159d8:	192c      	adds	r4, r5, r4
 80159da:	6822      	ldr	r2, [r4, #0]
 80159dc:	6863      	ldr	r3, [r4, #4]
 80159de:	e7e3      	b.n	80159a8 <_strtod_l+0x440>
 80159e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159e2:	3316      	adds	r3, #22
 80159e4:	db0c      	blt.n	8015a00 <_strtod_l+0x498>
 80159e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159e8:	9a07      	ldr	r2, [sp, #28]
 80159ea:	0030      	movs	r0, r6
 80159ec:	1a9a      	subs	r2, r3, r2
 80159ee:	4b59      	ldr	r3, [pc, #356]	; (8015b54 <_strtod_l+0x5ec>)
 80159f0:	00d2      	lsls	r2, r2, #3
 80159f2:	189b      	adds	r3, r3, r2
 80159f4:	0039      	movs	r1, r7
 80159f6:	681a      	ldr	r2, [r3, #0]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	f7ec f9c9 	bl	8001d90 <__aeabi_ddiv>
 80159fe:	e794      	b.n	801592a <_strtod_l+0x3c2>
 8015a00:	9b06      	ldr	r3, [sp, #24]
 8015a02:	1b1c      	subs	r4, r3, r4
 8015a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a06:	18e4      	adds	r4, r4, r3
 8015a08:	2c00      	cmp	r4, #0
 8015a0a:	dd70      	ble.n	8015aee <_strtod_l+0x586>
 8015a0c:	230f      	movs	r3, #15
 8015a0e:	0021      	movs	r1, r4
 8015a10:	4019      	ands	r1, r3
 8015a12:	421c      	tst	r4, r3
 8015a14:	d00a      	beq.n	8015a2c <_strtod_l+0x4c4>
 8015a16:	00cb      	lsls	r3, r1, #3
 8015a18:	494e      	ldr	r1, [pc, #312]	; (8015b54 <_strtod_l+0x5ec>)
 8015a1a:	0032      	movs	r2, r6
 8015a1c:	18c9      	adds	r1, r1, r3
 8015a1e:	6808      	ldr	r0, [r1, #0]
 8015a20:	6849      	ldr	r1, [r1, #4]
 8015a22:	003b      	movs	r3, r7
 8015a24:	f7ec fdba 	bl	800259c <__aeabi_dmul>
 8015a28:	0006      	movs	r6, r0
 8015a2a:	000f      	movs	r7, r1
 8015a2c:	230f      	movs	r3, #15
 8015a2e:	439c      	bics	r4, r3
 8015a30:	d048      	beq.n	8015ac4 <_strtod_l+0x55c>
 8015a32:	3326      	adds	r3, #38	; 0x26
 8015a34:	33ff      	adds	r3, #255	; 0xff
 8015a36:	429c      	cmp	r4, r3
 8015a38:	dd22      	ble.n	8015a80 <_strtod_l+0x518>
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	9306      	str	r3, [sp, #24]
 8015a3e:	9307      	str	r3, [sp, #28]
 8015a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a42:	9309      	str	r3, [sp, #36]	; 0x24
 8015a44:	2322      	movs	r3, #34	; 0x22
 8015a46:	2600      	movs	r6, #0
 8015a48:	9a05      	ldr	r2, [sp, #20]
 8015a4a:	4f3e      	ldr	r7, [pc, #248]	; (8015b44 <_strtod_l+0x5dc>)
 8015a4c:	6013      	str	r3, [r2, #0]
 8015a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a50:	42b3      	cmp	r3, r6
 8015a52:	d100      	bne.n	8015a56 <_strtod_l+0x4ee>
 8015a54:	e5cf      	b.n	80155f6 <_strtod_l+0x8e>
 8015a56:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015a58:	9805      	ldr	r0, [sp, #20]
 8015a5a:	f003 fa9b 	bl	8018f94 <_Bfree>
 8015a5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a60:	9805      	ldr	r0, [sp, #20]
 8015a62:	f003 fa97 	bl	8018f94 <_Bfree>
 8015a66:	9907      	ldr	r1, [sp, #28]
 8015a68:	9805      	ldr	r0, [sp, #20]
 8015a6a:	f003 fa93 	bl	8018f94 <_Bfree>
 8015a6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a70:	9805      	ldr	r0, [sp, #20]
 8015a72:	f003 fa8f 	bl	8018f94 <_Bfree>
 8015a76:	9906      	ldr	r1, [sp, #24]
 8015a78:	9805      	ldr	r0, [sp, #20]
 8015a7a:	f003 fa8b 	bl	8018f94 <_Bfree>
 8015a7e:	e5ba      	b.n	80155f6 <_strtod_l+0x8e>
 8015a80:	2300      	movs	r3, #0
 8015a82:	0030      	movs	r0, r6
 8015a84:	0039      	movs	r1, r7
 8015a86:	001d      	movs	r5, r3
 8015a88:	1124      	asrs	r4, r4, #4
 8015a8a:	2c01      	cmp	r4, #1
 8015a8c:	dc1d      	bgt.n	8015aca <_strtod_l+0x562>
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d001      	beq.n	8015a96 <_strtod_l+0x52e>
 8015a92:	0006      	movs	r6, r0
 8015a94:	000f      	movs	r7, r1
 8015a96:	4b30      	ldr	r3, [pc, #192]	; (8015b58 <_strtod_l+0x5f0>)
 8015a98:	00ed      	lsls	r5, r5, #3
 8015a9a:	18ff      	adds	r7, r7, r3
 8015a9c:	4b2f      	ldr	r3, [pc, #188]	; (8015b5c <_strtod_l+0x5f4>)
 8015a9e:	0032      	movs	r2, r6
 8015aa0:	195d      	adds	r5, r3, r5
 8015aa2:	6828      	ldr	r0, [r5, #0]
 8015aa4:	6869      	ldr	r1, [r5, #4]
 8015aa6:	003b      	movs	r3, r7
 8015aa8:	f7ec fd78 	bl	800259c <__aeabi_dmul>
 8015aac:	4b25      	ldr	r3, [pc, #148]	; (8015b44 <_strtod_l+0x5dc>)
 8015aae:	4a2c      	ldr	r2, [pc, #176]	; (8015b60 <_strtod_l+0x5f8>)
 8015ab0:	0006      	movs	r6, r0
 8015ab2:	400b      	ands	r3, r1
 8015ab4:	4293      	cmp	r3, r2
 8015ab6:	d8c0      	bhi.n	8015a3a <_strtod_l+0x4d2>
 8015ab8:	4a2a      	ldr	r2, [pc, #168]	; (8015b64 <_strtod_l+0x5fc>)
 8015aba:	4293      	cmp	r3, r2
 8015abc:	d913      	bls.n	8015ae6 <_strtod_l+0x57e>
 8015abe:	2601      	movs	r6, #1
 8015ac0:	4f29      	ldr	r7, [pc, #164]	; (8015b68 <_strtod_l+0x600>)
 8015ac2:	4276      	negs	r6, r6
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	9308      	str	r3, [sp, #32]
 8015ac8:	e087      	b.n	8015bda <_strtod_l+0x672>
 8015aca:	2201      	movs	r2, #1
 8015acc:	4214      	tst	r4, r2
 8015ace:	d007      	beq.n	8015ae0 <_strtod_l+0x578>
 8015ad0:	4a22      	ldr	r2, [pc, #136]	; (8015b5c <_strtod_l+0x5f4>)
 8015ad2:	00eb      	lsls	r3, r5, #3
 8015ad4:	189b      	adds	r3, r3, r2
 8015ad6:	681a      	ldr	r2, [r3, #0]
 8015ad8:	685b      	ldr	r3, [r3, #4]
 8015ada:	f7ec fd5f 	bl	800259c <__aeabi_dmul>
 8015ade:	2301      	movs	r3, #1
 8015ae0:	3501      	adds	r5, #1
 8015ae2:	1064      	asrs	r4, r4, #1
 8015ae4:	e7d1      	b.n	8015a8a <_strtod_l+0x522>
 8015ae6:	23d4      	movs	r3, #212	; 0xd4
 8015ae8:	049b      	lsls	r3, r3, #18
 8015aea:	18cf      	adds	r7, r1, r3
 8015aec:	e7ea      	b.n	8015ac4 <_strtod_l+0x55c>
 8015aee:	2c00      	cmp	r4, #0
 8015af0:	d0e8      	beq.n	8015ac4 <_strtod_l+0x55c>
 8015af2:	4264      	negs	r4, r4
 8015af4:	220f      	movs	r2, #15
 8015af6:	0023      	movs	r3, r4
 8015af8:	4013      	ands	r3, r2
 8015afa:	4214      	tst	r4, r2
 8015afc:	d00a      	beq.n	8015b14 <_strtod_l+0x5ac>
 8015afe:	00da      	lsls	r2, r3, #3
 8015b00:	4b14      	ldr	r3, [pc, #80]	; (8015b54 <_strtod_l+0x5ec>)
 8015b02:	0030      	movs	r0, r6
 8015b04:	189b      	adds	r3, r3, r2
 8015b06:	0039      	movs	r1, r7
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	685b      	ldr	r3, [r3, #4]
 8015b0c:	f7ec f940 	bl	8001d90 <__aeabi_ddiv>
 8015b10:	0006      	movs	r6, r0
 8015b12:	000f      	movs	r7, r1
 8015b14:	1124      	asrs	r4, r4, #4
 8015b16:	d0d5      	beq.n	8015ac4 <_strtod_l+0x55c>
 8015b18:	2c1f      	cmp	r4, #31
 8015b1a:	dd27      	ble.n	8015b6c <_strtod_l+0x604>
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	9306      	str	r3, [sp, #24]
 8015b20:	9307      	str	r3, [sp, #28]
 8015b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b24:	9309      	str	r3, [sp, #36]	; 0x24
 8015b26:	2322      	movs	r3, #34	; 0x22
 8015b28:	9a05      	ldr	r2, [sp, #20]
 8015b2a:	2600      	movs	r6, #0
 8015b2c:	6013      	str	r3, [r2, #0]
 8015b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b30:	2700      	movs	r7, #0
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d18f      	bne.n	8015a56 <_strtod_l+0x4ee>
 8015b36:	e55e      	b.n	80155f6 <_strtod_l+0x8e>
 8015b38:	00004e1f 	.word	0x00004e1f
 8015b3c:	0801e6b5 	.word	0x0801e6b5
 8015b40:	0801e668 	.word	0x0801e668
 8015b44:	7ff00000 	.word	0x7ff00000
 8015b48:	0801e6ad 	.word	0x0801e6ad
 8015b4c:	0801e703 	.word	0x0801e703
 8015b50:	0801e98f 	.word	0x0801e98f
 8015b54:	0801e880 	.word	0x0801e880
 8015b58:	fcb00000 	.word	0xfcb00000
 8015b5c:	0801e858 	.word	0x0801e858
 8015b60:	7ca00000 	.word	0x7ca00000
 8015b64:	7c900000 	.word	0x7c900000
 8015b68:	7fefffff 	.word	0x7fefffff
 8015b6c:	2310      	movs	r3, #16
 8015b6e:	0022      	movs	r2, r4
 8015b70:	401a      	ands	r2, r3
 8015b72:	9208      	str	r2, [sp, #32]
 8015b74:	421c      	tst	r4, r3
 8015b76:	d001      	beq.n	8015b7c <_strtod_l+0x614>
 8015b78:	335a      	adds	r3, #90	; 0x5a
 8015b7a:	9308      	str	r3, [sp, #32]
 8015b7c:	0030      	movs	r0, r6
 8015b7e:	0039      	movs	r1, r7
 8015b80:	2300      	movs	r3, #0
 8015b82:	4dca      	ldr	r5, [pc, #808]	; (8015eac <_strtod_l+0x944>)
 8015b84:	2201      	movs	r2, #1
 8015b86:	4214      	tst	r4, r2
 8015b88:	d004      	beq.n	8015b94 <_strtod_l+0x62c>
 8015b8a:	682a      	ldr	r2, [r5, #0]
 8015b8c:	686b      	ldr	r3, [r5, #4]
 8015b8e:	f7ec fd05 	bl	800259c <__aeabi_dmul>
 8015b92:	2301      	movs	r3, #1
 8015b94:	1064      	asrs	r4, r4, #1
 8015b96:	3508      	adds	r5, #8
 8015b98:	2c00      	cmp	r4, #0
 8015b9a:	d1f3      	bne.n	8015b84 <_strtod_l+0x61c>
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d001      	beq.n	8015ba4 <_strtod_l+0x63c>
 8015ba0:	0006      	movs	r6, r0
 8015ba2:	000f      	movs	r7, r1
 8015ba4:	9b08      	ldr	r3, [sp, #32]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d00f      	beq.n	8015bca <_strtod_l+0x662>
 8015baa:	236b      	movs	r3, #107	; 0x6b
 8015bac:	0079      	lsls	r1, r7, #1
 8015bae:	0d49      	lsrs	r1, r1, #21
 8015bb0:	003a      	movs	r2, r7
 8015bb2:	1a5b      	subs	r3, r3, r1
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	dd08      	ble.n	8015bca <_strtod_l+0x662>
 8015bb8:	2b1f      	cmp	r3, #31
 8015bba:	dc00      	bgt.n	8015bbe <_strtod_l+0x656>
 8015bbc:	e126      	b.n	8015e0c <_strtod_l+0x8a4>
 8015bbe:	2600      	movs	r6, #0
 8015bc0:	2b34      	cmp	r3, #52	; 0x34
 8015bc2:	dc00      	bgt.n	8015bc6 <_strtod_l+0x65e>
 8015bc4:	e11b      	b.n	8015dfe <_strtod_l+0x896>
 8015bc6:	27dc      	movs	r7, #220	; 0xdc
 8015bc8:	04bf      	lsls	r7, r7, #18
 8015bca:	2200      	movs	r2, #0
 8015bcc:	2300      	movs	r3, #0
 8015bce:	0030      	movs	r0, r6
 8015bd0:	0039      	movs	r1, r7
 8015bd2:	f7ea fc43 	bl	800045c <__aeabi_dcmpeq>
 8015bd6:	2800      	cmp	r0, #0
 8015bd8:	d1a0      	bne.n	8015b1c <_strtod_l+0x5b4>
 8015bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bde:	9300      	str	r3, [sp, #0]
 8015be0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015be2:	9b06      	ldr	r3, [sp, #24]
 8015be4:	9805      	ldr	r0, [sp, #20]
 8015be6:	f003 fa23 	bl	8019030 <__s2b>
 8015bea:	900b      	str	r0, [sp, #44]	; 0x2c
 8015bec:	2800      	cmp	r0, #0
 8015bee:	d100      	bne.n	8015bf2 <_strtod_l+0x68a>
 8015bf0:	e723      	b.n	8015a3a <_strtod_l+0x4d2>
 8015bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bf4:	9907      	ldr	r1, [sp, #28]
 8015bf6:	17da      	asrs	r2, r3, #31
 8015bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bfa:	1a5b      	subs	r3, r3, r1
 8015bfc:	401a      	ands	r2, r3
 8015bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c00:	9215      	str	r2, [sp, #84]	; 0x54
 8015c02:	43db      	mvns	r3, r3
 8015c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c06:	17db      	asrs	r3, r3, #31
 8015c08:	401a      	ands	r2, r3
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	921c      	str	r2, [sp, #112]	; 0x70
 8015c0e:	9306      	str	r3, [sp, #24]
 8015c10:	9307      	str	r3, [sp, #28]
 8015c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c14:	9805      	ldr	r0, [sp, #20]
 8015c16:	6859      	ldr	r1, [r3, #4]
 8015c18:	f003 f994 	bl	8018f44 <_Balloc>
 8015c1c:	9009      	str	r0, [sp, #36]	; 0x24
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	d100      	bne.n	8015c24 <_strtod_l+0x6bc>
 8015c22:	e70f      	b.n	8015a44 <_strtod_l+0x4dc>
 8015c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c28:	691b      	ldr	r3, [r3, #16]
 8015c2a:	310c      	adds	r1, #12
 8015c2c:	1c9a      	adds	r2, r3, #2
 8015c2e:	0092      	lsls	r2, r2, #2
 8015c30:	300c      	adds	r0, #12
 8015c32:	930c      	str	r3, [sp, #48]	; 0x30
 8015c34:	f7ff f9e6 	bl	8015004 <memcpy>
 8015c38:	ab24      	add	r3, sp, #144	; 0x90
 8015c3a:	9301      	str	r3, [sp, #4]
 8015c3c:	ab23      	add	r3, sp, #140	; 0x8c
 8015c3e:	9300      	str	r3, [sp, #0]
 8015c40:	0032      	movs	r2, r6
 8015c42:	003b      	movs	r3, r7
 8015c44:	9805      	ldr	r0, [sp, #20]
 8015c46:	960e      	str	r6, [sp, #56]	; 0x38
 8015c48:	970f      	str	r7, [sp, #60]	; 0x3c
 8015c4a:	f003 fd25 	bl	8019698 <__d2b>
 8015c4e:	9022      	str	r0, [sp, #136]	; 0x88
 8015c50:	2800      	cmp	r0, #0
 8015c52:	d100      	bne.n	8015c56 <_strtod_l+0x6ee>
 8015c54:	e6f6      	b.n	8015a44 <_strtod_l+0x4dc>
 8015c56:	2101      	movs	r1, #1
 8015c58:	9805      	ldr	r0, [sp, #20]
 8015c5a:	f003 fa7d 	bl	8019158 <__i2b>
 8015c5e:	9007      	str	r0, [sp, #28]
 8015c60:	2800      	cmp	r0, #0
 8015c62:	d100      	bne.n	8015c66 <_strtod_l+0x6fe>
 8015c64:	e6ee      	b.n	8015a44 <_strtod_l+0x4dc>
 8015c66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	da00      	bge.n	8015c6e <_strtod_l+0x706>
 8015c6c:	e0d3      	b.n	8015e16 <_strtod_l+0x8ae>
 8015c6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015c70:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015c72:	189d      	adds	r5, r3, r2
 8015c74:	9908      	ldr	r1, [sp, #32]
 8015c76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015c78:	1a5b      	subs	r3, r3, r1
 8015c7a:	2136      	movs	r1, #54	; 0x36
 8015c7c:	189b      	adds	r3, r3, r2
 8015c7e:	1a8a      	subs	r2, r1, r2
 8015c80:	498b      	ldr	r1, [pc, #556]	; (8015eb0 <_strtod_l+0x948>)
 8015c82:	3b01      	subs	r3, #1
 8015c84:	2001      	movs	r0, #1
 8015c86:	428b      	cmp	r3, r1
 8015c88:	db00      	blt.n	8015c8c <_strtod_l+0x724>
 8015c8a:	e0cf      	b.n	8015e2c <_strtod_l+0x8c4>
 8015c8c:	1ac9      	subs	r1, r1, r3
 8015c8e:	1a52      	subs	r2, r2, r1
 8015c90:	291f      	cmp	r1, #31
 8015c92:	dd00      	ble.n	8015c96 <_strtod_l+0x72e>
 8015c94:	e0c3      	b.n	8015e1e <_strtod_l+0x8b6>
 8015c96:	4088      	lsls	r0, r1
 8015c98:	2300      	movs	r3, #0
 8015c9a:	9014      	str	r0, [sp, #80]	; 0x50
 8015c9c:	9312      	str	r3, [sp, #72]	; 0x48
 8015c9e:	18ab      	adds	r3, r5, r2
 8015ca0:	930c      	str	r3, [sp, #48]	; 0x30
 8015ca2:	18a4      	adds	r4, r4, r2
 8015ca4:	9b08      	ldr	r3, [sp, #32]
 8015ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015ca8:	191c      	adds	r4, r3, r4
 8015caa:	002b      	movs	r3, r5
 8015cac:	4295      	cmp	r5, r2
 8015cae:	dd00      	ble.n	8015cb2 <_strtod_l+0x74a>
 8015cb0:	0013      	movs	r3, r2
 8015cb2:	42a3      	cmp	r3, r4
 8015cb4:	dd00      	ble.n	8015cb8 <_strtod_l+0x750>
 8015cb6:	0023      	movs	r3, r4
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	dd04      	ble.n	8015cc6 <_strtod_l+0x75e>
 8015cbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015cbe:	1ae4      	subs	r4, r4, r3
 8015cc0:	1ad2      	subs	r2, r2, r3
 8015cc2:	920c      	str	r2, [sp, #48]	; 0x30
 8015cc4:	1aed      	subs	r5, r5, r3
 8015cc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	dd17      	ble.n	8015cfc <_strtod_l+0x794>
 8015ccc:	001a      	movs	r2, r3
 8015cce:	9907      	ldr	r1, [sp, #28]
 8015cd0:	9805      	ldr	r0, [sp, #20]
 8015cd2:	f003 fb07 	bl	80192e4 <__pow5mult>
 8015cd6:	9007      	str	r0, [sp, #28]
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	d100      	bne.n	8015cde <_strtod_l+0x776>
 8015cdc:	e6b2      	b.n	8015a44 <_strtod_l+0x4dc>
 8015cde:	0001      	movs	r1, r0
 8015ce0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015ce2:	9805      	ldr	r0, [sp, #20]
 8015ce4:	f003 fa4e 	bl	8019184 <__multiply>
 8015ce8:	9011      	str	r0, [sp, #68]	; 0x44
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d100      	bne.n	8015cf0 <_strtod_l+0x788>
 8015cee:	e6a9      	b.n	8015a44 <_strtod_l+0x4dc>
 8015cf0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015cf2:	9805      	ldr	r0, [sp, #20]
 8015cf4:	f003 f94e 	bl	8018f94 <_Bfree>
 8015cf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015cfa:	9322      	str	r3, [sp, #136]	; 0x88
 8015cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	dd00      	ble.n	8015d04 <_strtod_l+0x79c>
 8015d02:	e096      	b.n	8015e32 <_strtod_l+0x8ca>
 8015d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	dd08      	ble.n	8015d1c <_strtod_l+0x7b4>
 8015d0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d0e:	9805      	ldr	r0, [sp, #20]
 8015d10:	f003 fae8 	bl	80192e4 <__pow5mult>
 8015d14:	9009      	str	r0, [sp, #36]	; 0x24
 8015d16:	2800      	cmp	r0, #0
 8015d18:	d100      	bne.n	8015d1c <_strtod_l+0x7b4>
 8015d1a:	e693      	b.n	8015a44 <_strtod_l+0x4dc>
 8015d1c:	2c00      	cmp	r4, #0
 8015d1e:	dd08      	ble.n	8015d32 <_strtod_l+0x7ca>
 8015d20:	0022      	movs	r2, r4
 8015d22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d24:	9805      	ldr	r0, [sp, #20]
 8015d26:	f003 fb1f 	bl	8019368 <__lshift>
 8015d2a:	9009      	str	r0, [sp, #36]	; 0x24
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	d100      	bne.n	8015d32 <_strtod_l+0x7ca>
 8015d30:	e688      	b.n	8015a44 <_strtod_l+0x4dc>
 8015d32:	2d00      	cmp	r5, #0
 8015d34:	dd08      	ble.n	8015d48 <_strtod_l+0x7e0>
 8015d36:	002a      	movs	r2, r5
 8015d38:	9907      	ldr	r1, [sp, #28]
 8015d3a:	9805      	ldr	r0, [sp, #20]
 8015d3c:	f003 fb14 	bl	8019368 <__lshift>
 8015d40:	9007      	str	r0, [sp, #28]
 8015d42:	2800      	cmp	r0, #0
 8015d44:	d100      	bne.n	8015d48 <_strtod_l+0x7e0>
 8015d46:	e67d      	b.n	8015a44 <_strtod_l+0x4dc>
 8015d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d4a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015d4c:	9805      	ldr	r0, [sp, #20]
 8015d4e:	f003 fb97 	bl	8019480 <__mdiff>
 8015d52:	9006      	str	r0, [sp, #24]
 8015d54:	2800      	cmp	r0, #0
 8015d56:	d100      	bne.n	8015d5a <_strtod_l+0x7f2>
 8015d58:	e674      	b.n	8015a44 <_strtod_l+0x4dc>
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	68c3      	ldr	r3, [r0, #12]
 8015d5e:	9907      	ldr	r1, [sp, #28]
 8015d60:	60c2      	str	r2, [r0, #12]
 8015d62:	9311      	str	r3, [sp, #68]	; 0x44
 8015d64:	f003 fb70 	bl	8019448 <__mcmp>
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	da6c      	bge.n	8015e46 <_strtod_l+0x8de>
 8015d6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d6e:	4333      	orrs	r3, r6
 8015d70:	d000      	beq.n	8015d74 <_strtod_l+0x80c>
 8015d72:	e097      	b.n	8015ea4 <_strtod_l+0x93c>
 8015d74:	033b      	lsls	r3, r7, #12
 8015d76:	d000      	beq.n	8015d7a <_strtod_l+0x812>
 8015d78:	e094      	b.n	8015ea4 <_strtod_l+0x93c>
 8015d7a:	22d6      	movs	r2, #214	; 0xd6
 8015d7c:	4b4d      	ldr	r3, [pc, #308]	; (8015eb4 <_strtod_l+0x94c>)
 8015d7e:	04d2      	lsls	r2, r2, #19
 8015d80:	403b      	ands	r3, r7
 8015d82:	4293      	cmp	r3, r2
 8015d84:	d800      	bhi.n	8015d88 <_strtod_l+0x820>
 8015d86:	e08d      	b.n	8015ea4 <_strtod_l+0x93c>
 8015d88:	9b06      	ldr	r3, [sp, #24]
 8015d8a:	695b      	ldr	r3, [r3, #20]
 8015d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d105      	bne.n	8015d9e <_strtod_l+0x836>
 8015d92:	9b06      	ldr	r3, [sp, #24]
 8015d94:	691b      	ldr	r3, [r3, #16]
 8015d96:	930a      	str	r3, [sp, #40]	; 0x28
 8015d98:	2b01      	cmp	r3, #1
 8015d9a:	dc00      	bgt.n	8015d9e <_strtod_l+0x836>
 8015d9c:	e082      	b.n	8015ea4 <_strtod_l+0x93c>
 8015d9e:	9906      	ldr	r1, [sp, #24]
 8015da0:	2201      	movs	r2, #1
 8015da2:	9805      	ldr	r0, [sp, #20]
 8015da4:	f003 fae0 	bl	8019368 <__lshift>
 8015da8:	9907      	ldr	r1, [sp, #28]
 8015daa:	9006      	str	r0, [sp, #24]
 8015dac:	f003 fb4c 	bl	8019448 <__mcmp>
 8015db0:	2800      	cmp	r0, #0
 8015db2:	dd77      	ble.n	8015ea4 <_strtod_l+0x93c>
 8015db4:	9908      	ldr	r1, [sp, #32]
 8015db6:	003b      	movs	r3, r7
 8015db8:	4a3e      	ldr	r2, [pc, #248]	; (8015eb4 <_strtod_l+0x94c>)
 8015dba:	2900      	cmp	r1, #0
 8015dbc:	d100      	bne.n	8015dc0 <_strtod_l+0x858>
 8015dbe:	e09e      	b.n	8015efe <_strtod_l+0x996>
 8015dc0:	0011      	movs	r1, r2
 8015dc2:	20d6      	movs	r0, #214	; 0xd6
 8015dc4:	4039      	ands	r1, r7
 8015dc6:	04c0      	lsls	r0, r0, #19
 8015dc8:	4281      	cmp	r1, r0
 8015dca:	dd00      	ble.n	8015dce <_strtod_l+0x866>
 8015dcc:	e097      	b.n	8015efe <_strtod_l+0x996>
 8015dce:	23dc      	movs	r3, #220	; 0xdc
 8015dd0:	049b      	lsls	r3, r3, #18
 8015dd2:	4299      	cmp	r1, r3
 8015dd4:	dc00      	bgt.n	8015dd8 <_strtod_l+0x870>
 8015dd6:	e6a6      	b.n	8015b26 <_strtod_l+0x5be>
 8015dd8:	4b37      	ldr	r3, [pc, #220]	; (8015eb8 <_strtod_l+0x950>)
 8015dda:	0030      	movs	r0, r6
 8015ddc:	931b      	str	r3, [sp, #108]	; 0x6c
 8015dde:	2300      	movs	r3, #0
 8015de0:	931a      	str	r3, [sp, #104]	; 0x68
 8015de2:	0039      	movs	r1, r7
 8015de4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015de6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015de8:	f7ec fbd8 	bl	800259c <__aeabi_dmul>
 8015dec:	0006      	movs	r6, r0
 8015dee:	000f      	movs	r7, r1
 8015df0:	4308      	orrs	r0, r1
 8015df2:	d000      	beq.n	8015df6 <_strtod_l+0x88e>
 8015df4:	e62f      	b.n	8015a56 <_strtod_l+0x4ee>
 8015df6:	2322      	movs	r3, #34	; 0x22
 8015df8:	9a05      	ldr	r2, [sp, #20]
 8015dfa:	6013      	str	r3, [r2, #0]
 8015dfc:	e62b      	b.n	8015a56 <_strtod_l+0x4ee>
 8015dfe:	2101      	movs	r1, #1
 8015e00:	3b20      	subs	r3, #32
 8015e02:	4249      	negs	r1, r1
 8015e04:	4099      	lsls	r1, r3
 8015e06:	400a      	ands	r2, r1
 8015e08:	0017      	movs	r7, r2
 8015e0a:	e6de      	b.n	8015bca <_strtod_l+0x662>
 8015e0c:	2201      	movs	r2, #1
 8015e0e:	4252      	negs	r2, r2
 8015e10:	409a      	lsls	r2, r3
 8015e12:	4016      	ands	r6, r2
 8015e14:	e6d9      	b.n	8015bca <_strtod_l+0x662>
 8015e16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015e18:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015e1a:	1ad4      	subs	r4, r2, r3
 8015e1c:	e72a      	b.n	8015c74 <_strtod_l+0x70c>
 8015e1e:	4927      	ldr	r1, [pc, #156]	; (8015ebc <_strtod_l+0x954>)
 8015e20:	1acb      	subs	r3, r1, r3
 8015e22:	0001      	movs	r1, r0
 8015e24:	4099      	lsls	r1, r3
 8015e26:	9112      	str	r1, [sp, #72]	; 0x48
 8015e28:	9014      	str	r0, [sp, #80]	; 0x50
 8015e2a:	e738      	b.n	8015c9e <_strtod_l+0x736>
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	9312      	str	r3, [sp, #72]	; 0x48
 8015e30:	e7fa      	b.n	8015e28 <_strtod_l+0x8c0>
 8015e32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e34:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015e36:	9805      	ldr	r0, [sp, #20]
 8015e38:	f003 fa96 	bl	8019368 <__lshift>
 8015e3c:	9022      	str	r0, [sp, #136]	; 0x88
 8015e3e:	2800      	cmp	r0, #0
 8015e40:	d000      	beq.n	8015e44 <_strtod_l+0x8dc>
 8015e42:	e75f      	b.n	8015d04 <_strtod_l+0x79c>
 8015e44:	e5fe      	b.n	8015a44 <_strtod_l+0x4dc>
 8015e46:	970c      	str	r7, [sp, #48]	; 0x30
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	d176      	bne.n	8015f3a <_strtod_l+0x9d2>
 8015e4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015e4e:	033b      	lsls	r3, r7, #12
 8015e50:	0b1b      	lsrs	r3, r3, #12
 8015e52:	2a00      	cmp	r2, #0
 8015e54:	d038      	beq.n	8015ec8 <_strtod_l+0x960>
 8015e56:	4a1a      	ldr	r2, [pc, #104]	; (8015ec0 <_strtod_l+0x958>)
 8015e58:	4293      	cmp	r3, r2
 8015e5a:	d138      	bne.n	8015ece <_strtod_l+0x966>
 8015e5c:	2201      	movs	r2, #1
 8015e5e:	9b08      	ldr	r3, [sp, #32]
 8015e60:	4252      	negs	r2, r2
 8015e62:	0031      	movs	r1, r6
 8015e64:	0010      	movs	r0, r2
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d00b      	beq.n	8015e82 <_strtod_l+0x91a>
 8015e6a:	24d4      	movs	r4, #212	; 0xd4
 8015e6c:	4b11      	ldr	r3, [pc, #68]	; (8015eb4 <_strtod_l+0x94c>)
 8015e6e:	0010      	movs	r0, r2
 8015e70:	403b      	ands	r3, r7
 8015e72:	04e4      	lsls	r4, r4, #19
 8015e74:	42a3      	cmp	r3, r4
 8015e76:	d804      	bhi.n	8015e82 <_strtod_l+0x91a>
 8015e78:	306c      	adds	r0, #108	; 0x6c
 8015e7a:	0d1b      	lsrs	r3, r3, #20
 8015e7c:	1ac3      	subs	r3, r0, r3
 8015e7e:	409a      	lsls	r2, r3
 8015e80:	0010      	movs	r0, r2
 8015e82:	4281      	cmp	r1, r0
 8015e84:	d123      	bne.n	8015ece <_strtod_l+0x966>
 8015e86:	4b0f      	ldr	r3, [pc, #60]	; (8015ec4 <_strtod_l+0x95c>)
 8015e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d102      	bne.n	8015e94 <_strtod_l+0x92c>
 8015e8e:	1c4b      	adds	r3, r1, #1
 8015e90:	d100      	bne.n	8015e94 <_strtod_l+0x92c>
 8015e92:	e5d7      	b.n	8015a44 <_strtod_l+0x4dc>
 8015e94:	4b07      	ldr	r3, [pc, #28]	; (8015eb4 <_strtod_l+0x94c>)
 8015e96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e98:	2600      	movs	r6, #0
 8015e9a:	401a      	ands	r2, r3
 8015e9c:	0013      	movs	r3, r2
 8015e9e:	2280      	movs	r2, #128	; 0x80
 8015ea0:	0352      	lsls	r2, r2, #13
 8015ea2:	189f      	adds	r7, r3, r2
 8015ea4:	9b08      	ldr	r3, [sp, #32]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d196      	bne.n	8015dd8 <_strtod_l+0x870>
 8015eaa:	e5d4      	b.n	8015a56 <_strtod_l+0x4ee>
 8015eac:	0801e680 	.word	0x0801e680
 8015eb0:	fffffc02 	.word	0xfffffc02
 8015eb4:	7ff00000 	.word	0x7ff00000
 8015eb8:	39500000 	.word	0x39500000
 8015ebc:	fffffbe2 	.word	0xfffffbe2
 8015ec0:	000fffff 	.word	0x000fffff
 8015ec4:	7fefffff 	.word	0x7fefffff
 8015ec8:	4333      	orrs	r3, r6
 8015eca:	d100      	bne.n	8015ece <_strtod_l+0x966>
 8015ecc:	e772      	b.n	8015db4 <_strtod_l+0x84c>
 8015ece:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d01d      	beq.n	8015f10 <_strtod_l+0x9a8>
 8015ed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ed6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ed8:	4213      	tst	r3, r2
 8015eda:	d0e3      	beq.n	8015ea4 <_strtod_l+0x93c>
 8015edc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ede:	0030      	movs	r0, r6
 8015ee0:	0039      	movs	r1, r7
 8015ee2:	9a08      	ldr	r2, [sp, #32]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d017      	beq.n	8015f18 <_strtod_l+0x9b0>
 8015ee8:	f7ff fb26 	bl	8015538 <sulp>
 8015eec:	0002      	movs	r2, r0
 8015eee:	000b      	movs	r3, r1
 8015ef0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015ef2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015ef4:	f7eb fbe2 	bl	80016bc <__aeabi_dadd>
 8015ef8:	0006      	movs	r6, r0
 8015efa:	000f      	movs	r7, r1
 8015efc:	e7d2      	b.n	8015ea4 <_strtod_l+0x93c>
 8015efe:	2601      	movs	r6, #1
 8015f00:	4013      	ands	r3, r2
 8015f02:	4a9b      	ldr	r2, [pc, #620]	; (8016170 <_strtod_l+0xc08>)
 8015f04:	4276      	negs	r6, r6
 8015f06:	189b      	adds	r3, r3, r2
 8015f08:	4a9a      	ldr	r2, [pc, #616]	; (8016174 <_strtod_l+0xc0c>)
 8015f0a:	431a      	orrs	r2, r3
 8015f0c:	0017      	movs	r7, r2
 8015f0e:	e7c9      	b.n	8015ea4 <_strtod_l+0x93c>
 8015f10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f12:	4233      	tst	r3, r6
 8015f14:	d0c6      	beq.n	8015ea4 <_strtod_l+0x93c>
 8015f16:	e7e1      	b.n	8015edc <_strtod_l+0x974>
 8015f18:	f7ff fb0e 	bl	8015538 <sulp>
 8015f1c:	0002      	movs	r2, r0
 8015f1e:	000b      	movs	r3, r1
 8015f20:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015f22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015f24:	f7ec fda6 	bl	8002a74 <__aeabi_dsub>
 8015f28:	2200      	movs	r2, #0
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	0006      	movs	r6, r0
 8015f2e:	000f      	movs	r7, r1
 8015f30:	f7ea fa94 	bl	800045c <__aeabi_dcmpeq>
 8015f34:	2800      	cmp	r0, #0
 8015f36:	d0b5      	beq.n	8015ea4 <_strtod_l+0x93c>
 8015f38:	e5f5      	b.n	8015b26 <_strtod_l+0x5be>
 8015f3a:	9907      	ldr	r1, [sp, #28]
 8015f3c:	9806      	ldr	r0, [sp, #24]
 8015f3e:	f003 fc0f 	bl	8019760 <__ratio>
 8015f42:	2380      	movs	r3, #128	; 0x80
 8015f44:	2200      	movs	r2, #0
 8015f46:	05db      	lsls	r3, r3, #23
 8015f48:	0004      	movs	r4, r0
 8015f4a:	000d      	movs	r5, r1
 8015f4c:	f7ea fa96 	bl	800047c <__aeabi_dcmple>
 8015f50:	2800      	cmp	r0, #0
 8015f52:	d079      	beq.n	8016048 <_strtod_l+0xae0>
 8015f54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d04b      	beq.n	8015ff2 <_strtod_l+0xa8a>
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	4c86      	ldr	r4, [pc, #536]	; (8016178 <_strtod_l+0xc10>)
 8015f5e:	2500      	movs	r5, #0
 8015f60:	9312      	str	r3, [sp, #72]	; 0x48
 8015f62:	9413      	str	r4, [sp, #76]	; 0x4c
 8015f64:	4c84      	ldr	r4, [pc, #528]	; (8016178 <_strtod_l+0xc10>)
 8015f66:	4a85      	ldr	r2, [pc, #532]	; (801617c <_strtod_l+0xc14>)
 8015f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f6a:	4013      	ands	r3, r2
 8015f6c:	9314      	str	r3, [sp, #80]	; 0x50
 8015f6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015f70:	4b83      	ldr	r3, [pc, #524]	; (8016180 <_strtod_l+0xc18>)
 8015f72:	429a      	cmp	r2, r3
 8015f74:	d000      	beq.n	8015f78 <_strtod_l+0xa10>
 8015f76:	e0b0      	b.n	80160da <_strtod_l+0xb72>
 8015f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f7c:	921a      	str	r2, [sp, #104]	; 0x68
 8015f7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015f80:	4a80      	ldr	r2, [pc, #512]	; (8016184 <_strtod_l+0xc1c>)
 8015f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f84:	4694      	mov	ip, r2
 8015f86:	4463      	add	r3, ip
 8015f88:	001f      	movs	r7, r3
 8015f8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f8e:	0030      	movs	r0, r6
 8015f90:	0039      	movs	r1, r7
 8015f92:	920c      	str	r2, [sp, #48]	; 0x30
 8015f94:	930d      	str	r3, [sp, #52]	; 0x34
 8015f96:	f003 fb0b 	bl	80195b0 <__ulp>
 8015f9a:	0002      	movs	r2, r0
 8015f9c:	000b      	movs	r3, r1
 8015f9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015fa0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015fa2:	f7ec fafb 	bl	800259c <__aeabi_dmul>
 8015fa6:	0032      	movs	r2, r6
 8015fa8:	003b      	movs	r3, r7
 8015faa:	f7eb fb87 	bl	80016bc <__aeabi_dadd>
 8015fae:	4a73      	ldr	r2, [pc, #460]	; (801617c <_strtod_l+0xc14>)
 8015fb0:	4b75      	ldr	r3, [pc, #468]	; (8016188 <_strtod_l+0xc20>)
 8015fb2:	0006      	movs	r6, r0
 8015fb4:	400a      	ands	r2, r1
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d95e      	bls.n	8016078 <_strtod_l+0xb10>
 8015fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fbc:	4a73      	ldr	r2, [pc, #460]	; (801618c <_strtod_l+0xc24>)
 8015fbe:	4293      	cmp	r3, r2
 8015fc0:	d103      	bne.n	8015fca <_strtod_l+0xa62>
 8015fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fc4:	3301      	adds	r3, #1
 8015fc6:	d100      	bne.n	8015fca <_strtod_l+0xa62>
 8015fc8:	e53c      	b.n	8015a44 <_strtod_l+0x4dc>
 8015fca:	2601      	movs	r6, #1
 8015fcc:	4f6f      	ldr	r7, [pc, #444]	; (801618c <_strtod_l+0xc24>)
 8015fce:	4276      	negs	r6, r6
 8015fd0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015fd2:	9805      	ldr	r0, [sp, #20]
 8015fd4:	f002 ffde 	bl	8018f94 <_Bfree>
 8015fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015fda:	9805      	ldr	r0, [sp, #20]
 8015fdc:	f002 ffda 	bl	8018f94 <_Bfree>
 8015fe0:	9907      	ldr	r1, [sp, #28]
 8015fe2:	9805      	ldr	r0, [sp, #20]
 8015fe4:	f002 ffd6 	bl	8018f94 <_Bfree>
 8015fe8:	9906      	ldr	r1, [sp, #24]
 8015fea:	9805      	ldr	r0, [sp, #20]
 8015fec:	f002 ffd2 	bl	8018f94 <_Bfree>
 8015ff0:	e60f      	b.n	8015c12 <_strtod_l+0x6aa>
 8015ff2:	2e00      	cmp	r6, #0
 8015ff4:	d11c      	bne.n	8016030 <_strtod_l+0xac8>
 8015ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ff8:	031b      	lsls	r3, r3, #12
 8015ffa:	d11f      	bne.n	801603c <_strtod_l+0xad4>
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	0020      	movs	r0, r4
 8016000:	0029      	movs	r1, r5
 8016002:	4b5d      	ldr	r3, [pc, #372]	; (8016178 <_strtod_l+0xc10>)
 8016004:	f7ea fa30 	bl	8000468 <__aeabi_dcmplt>
 8016008:	2800      	cmp	r0, #0
 801600a:	d11a      	bne.n	8016042 <_strtod_l+0xada>
 801600c:	0020      	movs	r0, r4
 801600e:	0029      	movs	r1, r5
 8016010:	2200      	movs	r2, #0
 8016012:	4b5f      	ldr	r3, [pc, #380]	; (8016190 <_strtod_l+0xc28>)
 8016014:	f7ec fac2 	bl	800259c <__aeabi_dmul>
 8016018:	0005      	movs	r5, r0
 801601a:	000c      	movs	r4, r1
 801601c:	2380      	movs	r3, #128	; 0x80
 801601e:	061b      	lsls	r3, r3, #24
 8016020:	18e3      	adds	r3, r4, r3
 8016022:	951e      	str	r5, [sp, #120]	; 0x78
 8016024:	931f      	str	r3, [sp, #124]	; 0x7c
 8016026:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016028:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801602a:	9212      	str	r2, [sp, #72]	; 0x48
 801602c:	9313      	str	r3, [sp, #76]	; 0x4c
 801602e:	e79a      	b.n	8015f66 <_strtod_l+0x9fe>
 8016030:	2e01      	cmp	r6, #1
 8016032:	d103      	bne.n	801603c <_strtod_l+0xad4>
 8016034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016036:	2b00      	cmp	r3, #0
 8016038:	d100      	bne.n	801603c <_strtod_l+0xad4>
 801603a:	e574      	b.n	8015b26 <_strtod_l+0x5be>
 801603c:	2300      	movs	r3, #0
 801603e:	4c55      	ldr	r4, [pc, #340]	; (8016194 <_strtod_l+0xc2c>)
 8016040:	e78d      	b.n	8015f5e <_strtod_l+0x9f6>
 8016042:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016044:	4c52      	ldr	r4, [pc, #328]	; (8016190 <_strtod_l+0xc28>)
 8016046:	e7e9      	b.n	801601c <_strtod_l+0xab4>
 8016048:	2200      	movs	r2, #0
 801604a:	0020      	movs	r0, r4
 801604c:	0029      	movs	r1, r5
 801604e:	4b50      	ldr	r3, [pc, #320]	; (8016190 <_strtod_l+0xc28>)
 8016050:	f7ec faa4 	bl	800259c <__aeabi_dmul>
 8016054:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016056:	0005      	movs	r5, r0
 8016058:	000b      	movs	r3, r1
 801605a:	000c      	movs	r4, r1
 801605c:	2a00      	cmp	r2, #0
 801605e:	d107      	bne.n	8016070 <_strtod_l+0xb08>
 8016060:	2280      	movs	r2, #128	; 0x80
 8016062:	0612      	lsls	r2, r2, #24
 8016064:	188b      	adds	r3, r1, r2
 8016066:	9016      	str	r0, [sp, #88]	; 0x58
 8016068:	9317      	str	r3, [sp, #92]	; 0x5c
 801606a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801606c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801606e:	e7dc      	b.n	801602a <_strtod_l+0xac2>
 8016070:	0002      	movs	r2, r0
 8016072:	9216      	str	r2, [sp, #88]	; 0x58
 8016074:	9317      	str	r3, [sp, #92]	; 0x5c
 8016076:	e7f8      	b.n	801606a <_strtod_l+0xb02>
 8016078:	23d4      	movs	r3, #212	; 0xd4
 801607a:	049b      	lsls	r3, r3, #18
 801607c:	18cf      	adds	r7, r1, r3
 801607e:	9b08      	ldr	r3, [sp, #32]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d1a5      	bne.n	8015fd0 <_strtod_l+0xa68>
 8016084:	4b3d      	ldr	r3, [pc, #244]	; (801617c <_strtod_l+0xc14>)
 8016086:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016088:	403b      	ands	r3, r7
 801608a:	429a      	cmp	r2, r3
 801608c:	d1a0      	bne.n	8015fd0 <_strtod_l+0xa68>
 801608e:	0028      	movs	r0, r5
 8016090:	0021      	movs	r1, r4
 8016092:	f7ea faed 	bl	8000670 <__aeabi_d2lz>
 8016096:	f7ea fb27 	bl	80006e8 <__aeabi_l2d>
 801609a:	0002      	movs	r2, r0
 801609c:	000b      	movs	r3, r1
 801609e:	0028      	movs	r0, r5
 80160a0:	0021      	movs	r1, r4
 80160a2:	f7ec fce7 	bl	8002a74 <__aeabi_dsub>
 80160a6:	033b      	lsls	r3, r7, #12
 80160a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80160aa:	0b1b      	lsrs	r3, r3, #12
 80160ac:	4333      	orrs	r3, r6
 80160ae:	4313      	orrs	r3, r2
 80160b0:	0004      	movs	r4, r0
 80160b2:	000d      	movs	r5, r1
 80160b4:	4a38      	ldr	r2, [pc, #224]	; (8016198 <_strtod_l+0xc30>)
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d055      	beq.n	8016166 <_strtod_l+0xbfe>
 80160ba:	4b38      	ldr	r3, [pc, #224]	; (801619c <_strtod_l+0xc34>)
 80160bc:	f7ea f9d4 	bl	8000468 <__aeabi_dcmplt>
 80160c0:	2800      	cmp	r0, #0
 80160c2:	d000      	beq.n	80160c6 <_strtod_l+0xb5e>
 80160c4:	e4c7      	b.n	8015a56 <_strtod_l+0x4ee>
 80160c6:	0020      	movs	r0, r4
 80160c8:	0029      	movs	r1, r5
 80160ca:	4a35      	ldr	r2, [pc, #212]	; (80161a0 <_strtod_l+0xc38>)
 80160cc:	4b30      	ldr	r3, [pc, #192]	; (8016190 <_strtod_l+0xc28>)
 80160ce:	f7ea f9df 	bl	8000490 <__aeabi_dcmpgt>
 80160d2:	2800      	cmp	r0, #0
 80160d4:	d100      	bne.n	80160d8 <_strtod_l+0xb70>
 80160d6:	e77b      	b.n	8015fd0 <_strtod_l+0xa68>
 80160d8:	e4bd      	b.n	8015a56 <_strtod_l+0x4ee>
 80160da:	9b08      	ldr	r3, [sp, #32]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d02b      	beq.n	8016138 <_strtod_l+0xbd0>
 80160e0:	23d4      	movs	r3, #212	; 0xd4
 80160e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80160e4:	04db      	lsls	r3, r3, #19
 80160e6:	429a      	cmp	r2, r3
 80160e8:	d826      	bhi.n	8016138 <_strtod_l+0xbd0>
 80160ea:	0028      	movs	r0, r5
 80160ec:	0021      	movs	r1, r4
 80160ee:	4a2d      	ldr	r2, [pc, #180]	; (80161a4 <_strtod_l+0xc3c>)
 80160f0:	4b2d      	ldr	r3, [pc, #180]	; (80161a8 <_strtod_l+0xc40>)
 80160f2:	f7ea f9c3 	bl	800047c <__aeabi_dcmple>
 80160f6:	2800      	cmp	r0, #0
 80160f8:	d017      	beq.n	801612a <_strtod_l+0xbc2>
 80160fa:	0028      	movs	r0, r5
 80160fc:	0021      	movs	r1, r4
 80160fe:	f7ea fa99 	bl	8000634 <__aeabi_d2uiz>
 8016102:	2800      	cmp	r0, #0
 8016104:	d100      	bne.n	8016108 <_strtod_l+0xba0>
 8016106:	3001      	adds	r0, #1
 8016108:	f7ed f8ca 	bl	80032a0 <__aeabi_ui2d>
 801610c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801610e:	0005      	movs	r5, r0
 8016110:	000b      	movs	r3, r1
 8016112:	000c      	movs	r4, r1
 8016114:	2a00      	cmp	r2, #0
 8016116:	d122      	bne.n	801615e <_strtod_l+0xbf6>
 8016118:	2280      	movs	r2, #128	; 0x80
 801611a:	0612      	lsls	r2, r2, #24
 801611c:	188b      	adds	r3, r1, r2
 801611e:	9018      	str	r0, [sp, #96]	; 0x60
 8016120:	9319      	str	r3, [sp, #100]	; 0x64
 8016122:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016126:	9212      	str	r2, [sp, #72]	; 0x48
 8016128:	9313      	str	r3, [sp, #76]	; 0x4c
 801612a:	22d6      	movs	r2, #214	; 0xd6
 801612c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801612e:	04d2      	lsls	r2, r2, #19
 8016130:	189b      	adds	r3, r3, r2
 8016132:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016134:	1a9b      	subs	r3, r3, r2
 8016136:	9313      	str	r3, [sp, #76]	; 0x4c
 8016138:	980e      	ldr	r0, [sp, #56]	; 0x38
 801613a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801613c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801613e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8016140:	f003 fa36 	bl	80195b0 <__ulp>
 8016144:	0002      	movs	r2, r0
 8016146:	000b      	movs	r3, r1
 8016148:	0030      	movs	r0, r6
 801614a:	0039      	movs	r1, r7
 801614c:	f7ec fa26 	bl	800259c <__aeabi_dmul>
 8016150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016154:	f7eb fab2 	bl	80016bc <__aeabi_dadd>
 8016158:	0006      	movs	r6, r0
 801615a:	000f      	movs	r7, r1
 801615c:	e78f      	b.n	801607e <_strtod_l+0xb16>
 801615e:	0002      	movs	r2, r0
 8016160:	9218      	str	r2, [sp, #96]	; 0x60
 8016162:	9319      	str	r3, [sp, #100]	; 0x64
 8016164:	e7dd      	b.n	8016122 <_strtod_l+0xbba>
 8016166:	4b11      	ldr	r3, [pc, #68]	; (80161ac <_strtod_l+0xc44>)
 8016168:	f7ea f97e 	bl	8000468 <__aeabi_dcmplt>
 801616c:	e7b1      	b.n	80160d2 <_strtod_l+0xb6a>
 801616e:	46c0      	nop			; (mov r8, r8)
 8016170:	fff00000 	.word	0xfff00000
 8016174:	000fffff 	.word	0x000fffff
 8016178:	3ff00000 	.word	0x3ff00000
 801617c:	7ff00000 	.word	0x7ff00000
 8016180:	7fe00000 	.word	0x7fe00000
 8016184:	fcb00000 	.word	0xfcb00000
 8016188:	7c9fffff 	.word	0x7c9fffff
 801618c:	7fefffff 	.word	0x7fefffff
 8016190:	3fe00000 	.word	0x3fe00000
 8016194:	bff00000 	.word	0xbff00000
 8016198:	94a03595 	.word	0x94a03595
 801619c:	3fdfffff 	.word	0x3fdfffff
 80161a0:	35afe535 	.word	0x35afe535
 80161a4:	ffc00000 	.word	0xffc00000
 80161a8:	41dfffff 	.word	0x41dfffff
 80161ac:	3fcfffff 	.word	0x3fcfffff

080161b0 <strtod>:
 80161b0:	b510      	push	{r4, lr}
 80161b2:	000a      	movs	r2, r1
 80161b4:	0001      	movs	r1, r0
 80161b6:	4803      	ldr	r0, [pc, #12]	; (80161c4 <strtod+0x14>)
 80161b8:	4b03      	ldr	r3, [pc, #12]	; (80161c8 <strtod+0x18>)
 80161ba:	6800      	ldr	r0, [r0, #0]
 80161bc:	f7ff f9d4 	bl	8015568 <_strtod_l>
 80161c0:	bd10      	pop	{r4, pc}
 80161c2:	46c0      	nop			; (mov r8, r8)
 80161c4:	20000138 	.word	0x20000138
 80161c8:	20000980 	.word	0x20000980

080161cc <strtok>:
 80161cc:	4b03      	ldr	r3, [pc, #12]	; (80161dc <strtok+0x10>)
 80161ce:	b510      	push	{r4, lr}
 80161d0:	681a      	ldr	r2, [r3, #0]
 80161d2:	2301      	movs	r3, #1
 80161d4:	325c      	adds	r2, #92	; 0x5c
 80161d6:	f000 f803 	bl	80161e0 <__strtok_r>
 80161da:	bd10      	pop	{r4, pc}
 80161dc:	20000138 	.word	0x20000138

080161e0 <__strtok_r>:
 80161e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161e2:	2800      	cmp	r0, #0
 80161e4:	d102      	bne.n	80161ec <__strtok_r+0xc>
 80161e6:	6810      	ldr	r0, [r2, #0]
 80161e8:	2800      	cmp	r0, #0
 80161ea:	d013      	beq.n	8016214 <__strtok_r+0x34>
 80161ec:	0004      	movs	r4, r0
 80161ee:	0020      	movs	r0, r4
 80161f0:	000e      	movs	r6, r1
 80161f2:	7805      	ldrb	r5, [r0, #0]
 80161f4:	3401      	adds	r4, #1
 80161f6:	7837      	ldrb	r7, [r6, #0]
 80161f8:	2f00      	cmp	r7, #0
 80161fa:	d104      	bne.n	8016206 <__strtok_r+0x26>
 80161fc:	2d00      	cmp	r5, #0
 80161fe:	d10f      	bne.n	8016220 <__strtok_r+0x40>
 8016200:	0028      	movs	r0, r5
 8016202:	6015      	str	r5, [r2, #0]
 8016204:	e006      	b.n	8016214 <__strtok_r+0x34>
 8016206:	3601      	adds	r6, #1
 8016208:	42bd      	cmp	r5, r7
 801620a:	d1f4      	bne.n	80161f6 <__strtok_r+0x16>
 801620c:	2b00      	cmp	r3, #0
 801620e:	d1ee      	bne.n	80161ee <__strtok_r+0xe>
 8016210:	6014      	str	r4, [r2, #0]
 8016212:	7003      	strb	r3, [r0, #0]
 8016214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016216:	002f      	movs	r7, r5
 8016218:	e00f      	b.n	801623a <__strtok_r+0x5a>
 801621a:	3301      	adds	r3, #1
 801621c:	2e00      	cmp	r6, #0
 801621e:	d104      	bne.n	801622a <__strtok_r+0x4a>
 8016220:	0023      	movs	r3, r4
 8016222:	3401      	adds	r4, #1
 8016224:	781d      	ldrb	r5, [r3, #0]
 8016226:	0027      	movs	r7, r4
 8016228:	000b      	movs	r3, r1
 801622a:	781e      	ldrb	r6, [r3, #0]
 801622c:	42b5      	cmp	r5, r6
 801622e:	d1f4      	bne.n	801621a <__strtok_r+0x3a>
 8016230:	2d00      	cmp	r5, #0
 8016232:	d0f0      	beq.n	8016216 <__strtok_r+0x36>
 8016234:	2300      	movs	r3, #0
 8016236:	3c01      	subs	r4, #1
 8016238:	7023      	strb	r3, [r4, #0]
 801623a:	6017      	str	r7, [r2, #0]
 801623c:	e7ea      	b.n	8016214 <__strtok_r+0x34>
	...

08016240 <_strtol_l.isra.0>:
 8016240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016242:	b087      	sub	sp, #28
 8016244:	001e      	movs	r6, r3
 8016246:	9005      	str	r0, [sp, #20]
 8016248:	9101      	str	r1, [sp, #4]
 801624a:	9202      	str	r2, [sp, #8]
 801624c:	2b01      	cmp	r3, #1
 801624e:	d045      	beq.n	80162dc <_strtol_l.isra.0+0x9c>
 8016250:	0008      	movs	r0, r1
 8016252:	2b24      	cmp	r3, #36	; 0x24
 8016254:	d842      	bhi.n	80162dc <_strtol_l.isra.0+0x9c>
 8016256:	4b3f      	ldr	r3, [pc, #252]	; (8016354 <_strtol_l.isra.0+0x114>)
 8016258:	2208      	movs	r2, #8
 801625a:	469c      	mov	ip, r3
 801625c:	0003      	movs	r3, r0
 801625e:	4661      	mov	r1, ip
 8016260:	781c      	ldrb	r4, [r3, #0]
 8016262:	1c45      	adds	r5, r0, #1
 8016264:	5d09      	ldrb	r1, [r1, r4]
 8016266:	0028      	movs	r0, r5
 8016268:	000f      	movs	r7, r1
 801626a:	4017      	ands	r7, r2
 801626c:	4211      	tst	r1, r2
 801626e:	d1f5      	bne.n	801625c <_strtol_l.isra.0+0x1c>
 8016270:	2c2d      	cmp	r4, #45	; 0x2d
 8016272:	d13a      	bne.n	80162ea <_strtol_l.isra.0+0xaa>
 8016274:	2701      	movs	r7, #1
 8016276:	782c      	ldrb	r4, [r5, #0]
 8016278:	1c9d      	adds	r5, r3, #2
 801627a:	2e00      	cmp	r6, #0
 801627c:	d065      	beq.n	801634a <_strtol_l.isra.0+0x10a>
 801627e:	2e10      	cmp	r6, #16
 8016280:	d109      	bne.n	8016296 <_strtol_l.isra.0+0x56>
 8016282:	2c30      	cmp	r4, #48	; 0x30
 8016284:	d107      	bne.n	8016296 <_strtol_l.isra.0+0x56>
 8016286:	2220      	movs	r2, #32
 8016288:	782b      	ldrb	r3, [r5, #0]
 801628a:	4393      	bics	r3, r2
 801628c:	2b58      	cmp	r3, #88	; 0x58
 801628e:	d157      	bne.n	8016340 <_strtol_l.isra.0+0x100>
 8016290:	2610      	movs	r6, #16
 8016292:	786c      	ldrb	r4, [r5, #1]
 8016294:	3502      	adds	r5, #2
 8016296:	4b30      	ldr	r3, [pc, #192]	; (8016358 <_strtol_l.isra.0+0x118>)
 8016298:	0031      	movs	r1, r6
 801629a:	18fb      	adds	r3, r7, r3
 801629c:	0018      	movs	r0, r3
 801629e:	9303      	str	r3, [sp, #12]
 80162a0:	f7e9 ffdc 	bl	800025c <__aeabi_uidivmod>
 80162a4:	2300      	movs	r3, #0
 80162a6:	2201      	movs	r2, #1
 80162a8:	4684      	mov	ip, r0
 80162aa:	0018      	movs	r0, r3
 80162ac:	9104      	str	r1, [sp, #16]
 80162ae:	4252      	negs	r2, r2
 80162b0:	0021      	movs	r1, r4
 80162b2:	3930      	subs	r1, #48	; 0x30
 80162b4:	2909      	cmp	r1, #9
 80162b6:	d81d      	bhi.n	80162f4 <_strtol_l.isra.0+0xb4>
 80162b8:	000c      	movs	r4, r1
 80162ba:	42a6      	cmp	r6, r4
 80162bc:	dd28      	ble.n	8016310 <_strtol_l.isra.0+0xd0>
 80162be:	2b00      	cmp	r3, #0
 80162c0:	db24      	blt.n	801630c <_strtol_l.isra.0+0xcc>
 80162c2:	0013      	movs	r3, r2
 80162c4:	4584      	cmp	ip, r0
 80162c6:	d306      	bcc.n	80162d6 <_strtol_l.isra.0+0x96>
 80162c8:	d102      	bne.n	80162d0 <_strtol_l.isra.0+0x90>
 80162ca:	9904      	ldr	r1, [sp, #16]
 80162cc:	42a1      	cmp	r1, r4
 80162ce:	db02      	blt.n	80162d6 <_strtol_l.isra.0+0x96>
 80162d0:	2301      	movs	r3, #1
 80162d2:	4370      	muls	r0, r6
 80162d4:	1820      	adds	r0, r4, r0
 80162d6:	782c      	ldrb	r4, [r5, #0]
 80162d8:	3501      	adds	r5, #1
 80162da:	e7e9      	b.n	80162b0 <_strtol_l.isra.0+0x70>
 80162dc:	f002 f960 	bl	80185a0 <__errno>
 80162e0:	2316      	movs	r3, #22
 80162e2:	6003      	str	r3, [r0, #0]
 80162e4:	2000      	movs	r0, #0
 80162e6:	b007      	add	sp, #28
 80162e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162ea:	2c2b      	cmp	r4, #43	; 0x2b
 80162ec:	d1c5      	bne.n	801627a <_strtol_l.isra.0+0x3a>
 80162ee:	782c      	ldrb	r4, [r5, #0]
 80162f0:	1c9d      	adds	r5, r3, #2
 80162f2:	e7c2      	b.n	801627a <_strtol_l.isra.0+0x3a>
 80162f4:	0021      	movs	r1, r4
 80162f6:	3941      	subs	r1, #65	; 0x41
 80162f8:	2919      	cmp	r1, #25
 80162fa:	d801      	bhi.n	8016300 <_strtol_l.isra.0+0xc0>
 80162fc:	3c37      	subs	r4, #55	; 0x37
 80162fe:	e7dc      	b.n	80162ba <_strtol_l.isra.0+0x7a>
 8016300:	0021      	movs	r1, r4
 8016302:	3961      	subs	r1, #97	; 0x61
 8016304:	2919      	cmp	r1, #25
 8016306:	d803      	bhi.n	8016310 <_strtol_l.isra.0+0xd0>
 8016308:	3c57      	subs	r4, #87	; 0x57
 801630a:	e7d6      	b.n	80162ba <_strtol_l.isra.0+0x7a>
 801630c:	0013      	movs	r3, r2
 801630e:	e7e2      	b.n	80162d6 <_strtol_l.isra.0+0x96>
 8016310:	2b00      	cmp	r3, #0
 8016312:	da09      	bge.n	8016328 <_strtol_l.isra.0+0xe8>
 8016314:	2322      	movs	r3, #34	; 0x22
 8016316:	9a05      	ldr	r2, [sp, #20]
 8016318:	9803      	ldr	r0, [sp, #12]
 801631a:	6013      	str	r3, [r2, #0]
 801631c:	9b02      	ldr	r3, [sp, #8]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d0e1      	beq.n	80162e6 <_strtol_l.isra.0+0xa6>
 8016322:	1e6b      	subs	r3, r5, #1
 8016324:	9301      	str	r3, [sp, #4]
 8016326:	e007      	b.n	8016338 <_strtol_l.isra.0+0xf8>
 8016328:	2f00      	cmp	r7, #0
 801632a:	d000      	beq.n	801632e <_strtol_l.isra.0+0xee>
 801632c:	4240      	negs	r0, r0
 801632e:	9a02      	ldr	r2, [sp, #8]
 8016330:	2a00      	cmp	r2, #0
 8016332:	d0d8      	beq.n	80162e6 <_strtol_l.isra.0+0xa6>
 8016334:	2b00      	cmp	r3, #0
 8016336:	d1f4      	bne.n	8016322 <_strtol_l.isra.0+0xe2>
 8016338:	9b02      	ldr	r3, [sp, #8]
 801633a:	9a01      	ldr	r2, [sp, #4]
 801633c:	601a      	str	r2, [r3, #0]
 801633e:	e7d2      	b.n	80162e6 <_strtol_l.isra.0+0xa6>
 8016340:	2430      	movs	r4, #48	; 0x30
 8016342:	2e00      	cmp	r6, #0
 8016344:	d1a7      	bne.n	8016296 <_strtol_l.isra.0+0x56>
 8016346:	3608      	adds	r6, #8
 8016348:	e7a5      	b.n	8016296 <_strtol_l.isra.0+0x56>
 801634a:	2c30      	cmp	r4, #48	; 0x30
 801634c:	d09b      	beq.n	8016286 <_strtol_l.isra.0+0x46>
 801634e:	260a      	movs	r6, #10
 8016350:	e7a1      	b.n	8016296 <_strtol_l.isra.0+0x56>
 8016352:	46c0      	nop			; (mov r8, r8)
 8016354:	0801e550 	.word	0x0801e550
 8016358:	7fffffff 	.word	0x7fffffff

0801635c <strtol>:
 801635c:	b510      	push	{r4, lr}
 801635e:	0013      	movs	r3, r2
 8016360:	000a      	movs	r2, r1
 8016362:	0001      	movs	r1, r0
 8016364:	4802      	ldr	r0, [pc, #8]	; (8016370 <strtol+0x14>)
 8016366:	6800      	ldr	r0, [r0, #0]
 8016368:	f7ff ff6a 	bl	8016240 <_strtol_l.isra.0>
 801636c:	bd10      	pop	{r4, pc}
 801636e:	46c0      	nop			; (mov r8, r8)
 8016370:	20000138 	.word	0x20000138

08016374 <_svfprintf_r>:
 8016374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016376:	b0d9      	sub	sp, #356	; 0x164
 8016378:	001c      	movs	r4, r3
 801637a:	910b      	str	r1, [sp, #44]	; 0x2c
 801637c:	9208      	str	r2, [sp, #32]
 801637e:	900a      	str	r0, [sp, #40]	; 0x28
 8016380:	f002 fda8 	bl	8018ed4 <_localeconv_r>
 8016384:	6803      	ldr	r3, [r0, #0]
 8016386:	0018      	movs	r0, r3
 8016388:	931c      	str	r3, [sp, #112]	; 0x70
 801638a:	f7e9 fec5 	bl	8000118 <strlen>
 801638e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016390:	9016      	str	r0, [sp, #88]	; 0x58
 8016392:	899b      	ldrh	r3, [r3, #12]
 8016394:	061b      	lsls	r3, r3, #24
 8016396:	d518      	bpl.n	80163ca <_svfprintf_r+0x56>
 8016398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801639a:	691b      	ldr	r3, [r3, #16]
 801639c:	9309      	str	r3, [sp, #36]	; 0x24
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d113      	bne.n	80163ca <_svfprintf_r+0x56>
 80163a2:	2140      	movs	r1, #64	; 0x40
 80163a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163a6:	f7fe fc0b 	bl	8014bc0 <_malloc_r>
 80163aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163ac:	6018      	str	r0, [r3, #0]
 80163ae:	6118      	str	r0, [r3, #16]
 80163b0:	2800      	cmp	r0, #0
 80163b2:	d107      	bne.n	80163c4 <_svfprintf_r+0x50>
 80163b4:	230c      	movs	r3, #12
 80163b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163b8:	6013      	str	r3, [r2, #0]
 80163ba:	3b0d      	subs	r3, #13
 80163bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80163be:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80163c0:	b059      	add	sp, #356	; 0x164
 80163c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163c4:	2340      	movs	r3, #64	; 0x40
 80163c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80163c8:	6153      	str	r3, [r2, #20]
 80163ca:	2300      	movs	r3, #0
 80163cc:	2200      	movs	r2, #0
 80163ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80163d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80163d2:	930d      	str	r3, [sp, #52]	; 0x34
 80163d4:	2300      	movs	r3, #0
 80163d6:	9214      	str	r2, [sp, #80]	; 0x50
 80163d8:	9315      	str	r3, [sp, #84]	; 0x54
 80163da:	2300      	movs	r3, #0
 80163dc:	af2f      	add	r7, sp, #188	; 0xbc
 80163de:	972c      	str	r7, [sp, #176]	; 0xb0
 80163e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80163e2:	931e      	str	r3, [sp, #120]	; 0x78
 80163e4:	9312      	str	r3, [sp, #72]	; 0x48
 80163e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80163e8:	931d      	str	r3, [sp, #116]	; 0x74
 80163ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80163ec:	9d08      	ldr	r5, [sp, #32]
 80163ee:	782b      	ldrb	r3, [r5, #0]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d002      	beq.n	80163fa <_svfprintf_r+0x86>
 80163f4:	2b25      	cmp	r3, #37	; 0x25
 80163f6:	d000      	beq.n	80163fa <_svfprintf_r+0x86>
 80163f8:	e092      	b.n	8016520 <_svfprintf_r+0x1ac>
 80163fa:	9b08      	ldr	r3, [sp, #32]
 80163fc:	1aee      	subs	r6, r5, r3
 80163fe:	429d      	cmp	r5, r3
 8016400:	d017      	beq.n	8016432 <_svfprintf_r+0xbe>
 8016402:	603b      	str	r3, [r7, #0]
 8016404:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016406:	607e      	str	r6, [r7, #4]
 8016408:	199b      	adds	r3, r3, r6
 801640a:	932e      	str	r3, [sp, #184]	; 0xb8
 801640c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801640e:	3708      	adds	r7, #8
 8016410:	9309      	str	r3, [sp, #36]	; 0x24
 8016412:	3301      	adds	r3, #1
 8016414:	932d      	str	r3, [sp, #180]	; 0xb4
 8016416:	2b07      	cmp	r3, #7
 8016418:	dd08      	ble.n	801642c <_svfprintf_r+0xb8>
 801641a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801641c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801641e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016420:	f003 fa42 	bl	80198a8 <__ssprint_r>
 8016424:	2800      	cmp	r0, #0
 8016426:	d000      	beq.n	801642a <_svfprintf_r+0xb6>
 8016428:	e2aa      	b.n	8016980 <_svfprintf_r+0x60c>
 801642a:	af2f      	add	r7, sp, #188	; 0xbc
 801642c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801642e:	199b      	adds	r3, r3, r6
 8016430:	9317      	str	r3, [sp, #92]	; 0x5c
 8016432:	782b      	ldrb	r3, [r5, #0]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d101      	bne.n	801643c <_svfprintf_r+0xc8>
 8016438:	f001 f9d2 	bl	80177e0 <_svfprintf_r+0x146c>
 801643c:	221b      	movs	r2, #27
 801643e:	2300      	movs	r3, #0
 8016440:	a91e      	add	r1, sp, #120	; 0x78
 8016442:	1852      	adds	r2, r2, r1
 8016444:	7013      	strb	r3, [r2, #0]
 8016446:	2201      	movs	r2, #1
 8016448:	001e      	movs	r6, r3
 801644a:	4252      	negs	r2, r2
 801644c:	3501      	adds	r5, #1
 801644e:	9209      	str	r2, [sp, #36]	; 0x24
 8016450:	9318      	str	r3, [sp, #96]	; 0x60
 8016452:	1c6b      	adds	r3, r5, #1
 8016454:	9313      	str	r3, [sp, #76]	; 0x4c
 8016456:	782b      	ldrb	r3, [r5, #0]
 8016458:	930f      	str	r3, [sp, #60]	; 0x3c
 801645a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801645c:	3820      	subs	r0, #32
 801645e:	285a      	cmp	r0, #90	; 0x5a
 8016460:	d901      	bls.n	8016466 <_svfprintf_r+0xf2>
 8016462:	f000 fe2e 	bl	80170c2 <_svfprintf_r+0xd4e>
 8016466:	f7e9 fe69 	bl	800013c <__gnu_thumb1_case_uhi>
 801646a:	0078      	.short	0x0078
 801646c:	062c062c 	.word	0x062c062c
 8016470:	062c0082 	.word	0x062c0082
 8016474:	062c062c 	.word	0x062c062c
 8016478:	062c005d 	.word	0x062c005d
 801647c:	0084062c 	.word	0x0084062c
 8016480:	062c008c 	.word	0x062c008c
 8016484:	0091008a 	.word	0x0091008a
 8016488:	00b2062c 	.word	0x00b2062c
 801648c:	00b400b4 	.word	0x00b400b4
 8016490:	00b400b4 	.word	0x00b400b4
 8016494:	00b400b4 	.word	0x00b400b4
 8016498:	00b400b4 	.word	0x00b400b4
 801649c:	062c00b4 	.word	0x062c00b4
 80164a0:	062c062c 	.word	0x062c062c
 80164a4:	062c062c 	.word	0x062c062c
 80164a8:	062c062c 	.word	0x062c062c
 80164ac:	062c0216 	.word	0x062c0216
 80164b0:	01cf00e0 	.word	0x01cf00e0
 80164b4:	02160216 	.word	0x02160216
 80164b8:	062c0216 	.word	0x062c0216
 80164bc:	062c062c 	.word	0x062c062c
 80164c0:	00c7062c 	.word	0x00c7062c
 80164c4:	062c062c 	.word	0x062c062c
 80164c8:	062c04d6 	.word	0x062c04d6
 80164cc:	062c062c 	.word	0x062c062c
 80164d0:	062c051d 	.word	0x062c051d
 80164d4:	062c053d 	.word	0x062c053d
 80164d8:	056e062c 	.word	0x056e062c
 80164dc:	062c062c 	.word	0x062c062c
 80164e0:	062c062c 	.word	0x062c062c
 80164e4:	062c062c 	.word	0x062c062c
 80164e8:	062c062c 	.word	0x062c062c
 80164ec:	062c0216 	.word	0x062c0216
 80164f0:	01d100e0 	.word	0x01d100e0
 80164f4:	02160216 	.word	0x02160216
 80164f8:	00c90216 	.word	0x00c90216
 80164fc:	00dc01d1 	.word	0x00dc01d1
 8016500:	00d5062c 	.word	0x00d5062c
 8016504:	04b9062c 	.word	0x04b9062c
 8016508:	050d04d8 	.word	0x050d04d8
 801650c:	062c00dc 	.word	0x062c00dc
 8016510:	0080051d 	.word	0x0080051d
 8016514:	062c053f 	.word	0x062c053f
 8016518:	058e062c 	.word	0x058e062c
 801651c:	0080062c 	.word	0x0080062c
 8016520:	3501      	adds	r5, #1
 8016522:	e764      	b.n	80163ee <_svfprintf_r+0x7a>
 8016524:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016526:	f002 fcd5 	bl	8018ed4 <_localeconv_r>
 801652a:	6843      	ldr	r3, [r0, #4]
 801652c:	0018      	movs	r0, r3
 801652e:	931d      	str	r3, [sp, #116]	; 0x74
 8016530:	f7e9 fdf2 	bl	8000118 <strlen>
 8016534:	901b      	str	r0, [sp, #108]	; 0x6c
 8016536:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016538:	f002 fccc 	bl	8018ed4 <_localeconv_r>
 801653c:	6883      	ldr	r3, [r0, #8]
 801653e:	9312      	str	r3, [sp, #72]	; 0x48
 8016540:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016542:	2b00      	cmp	r3, #0
 8016544:	d011      	beq.n	801656a <_svfprintf_r+0x1f6>
 8016546:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016548:	2b00      	cmp	r3, #0
 801654a:	d00e      	beq.n	801656a <_svfprintf_r+0x1f6>
 801654c:	781b      	ldrb	r3, [r3, #0]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d00b      	beq.n	801656a <_svfprintf_r+0x1f6>
 8016552:	2380      	movs	r3, #128	; 0x80
 8016554:	00db      	lsls	r3, r3, #3
 8016556:	431e      	orrs	r6, r3
 8016558:	e007      	b.n	801656a <_svfprintf_r+0x1f6>
 801655a:	231b      	movs	r3, #27
 801655c:	aa1e      	add	r2, sp, #120	; 0x78
 801655e:	189b      	adds	r3, r3, r2
 8016560:	781a      	ldrb	r2, [r3, #0]
 8016562:	2a00      	cmp	r2, #0
 8016564:	d101      	bne.n	801656a <_svfprintf_r+0x1f6>
 8016566:	3220      	adds	r2, #32
 8016568:	701a      	strb	r2, [r3, #0]
 801656a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801656c:	e771      	b.n	8016452 <_svfprintf_r+0xde>
 801656e:	2301      	movs	r3, #1
 8016570:	e7f1      	b.n	8016556 <_svfprintf_r+0x1e2>
 8016572:	cc08      	ldmia	r4!, {r3}
 8016574:	9318      	str	r3, [sp, #96]	; 0x60
 8016576:	2b00      	cmp	r3, #0
 8016578:	daf7      	bge.n	801656a <_svfprintf_r+0x1f6>
 801657a:	425b      	negs	r3, r3
 801657c:	9318      	str	r3, [sp, #96]	; 0x60
 801657e:	2304      	movs	r3, #4
 8016580:	e7e9      	b.n	8016556 <_svfprintf_r+0x1e2>
 8016582:	231b      	movs	r3, #27
 8016584:	aa1e      	add	r2, sp, #120	; 0x78
 8016586:	189b      	adds	r3, r3, r2
 8016588:	222b      	movs	r2, #43	; 0x2b
 801658a:	e7ed      	b.n	8016568 <_svfprintf_r+0x1f4>
 801658c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801658e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016590:	7812      	ldrb	r2, [r2, #0]
 8016592:	3301      	adds	r3, #1
 8016594:	920f      	str	r2, [sp, #60]	; 0x3c
 8016596:	2a2a      	cmp	r2, #42	; 0x2a
 8016598:	d010      	beq.n	80165bc <_svfprintf_r+0x248>
 801659a:	2200      	movs	r2, #0
 801659c:	9209      	str	r2, [sp, #36]	; 0x24
 801659e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80165a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80165a2:	3a30      	subs	r2, #48	; 0x30
 80165a4:	2a09      	cmp	r2, #9
 80165a6:	d900      	bls.n	80165aa <_svfprintf_r+0x236>
 80165a8:	e757      	b.n	801645a <_svfprintf_r+0xe6>
 80165aa:	210a      	movs	r1, #10
 80165ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165ae:	4348      	muls	r0, r1
 80165b0:	1882      	adds	r2, r0, r2
 80165b2:	9209      	str	r2, [sp, #36]	; 0x24
 80165b4:	781a      	ldrb	r2, [r3, #0]
 80165b6:	3301      	adds	r3, #1
 80165b8:	920f      	str	r2, [sp, #60]	; 0x3c
 80165ba:	e7f0      	b.n	801659e <_svfprintf_r+0x22a>
 80165bc:	cc04      	ldmia	r4!, {r2}
 80165be:	9209      	str	r2, [sp, #36]	; 0x24
 80165c0:	2a00      	cmp	r2, #0
 80165c2:	da02      	bge.n	80165ca <_svfprintf_r+0x256>
 80165c4:	2201      	movs	r2, #1
 80165c6:	4252      	negs	r2, r2
 80165c8:	9209      	str	r2, [sp, #36]	; 0x24
 80165ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80165cc:	e7cd      	b.n	801656a <_svfprintf_r+0x1f6>
 80165ce:	2380      	movs	r3, #128	; 0x80
 80165d0:	e7c1      	b.n	8016556 <_svfprintf_r+0x1e2>
 80165d2:	2200      	movs	r2, #0
 80165d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80165d6:	9218      	str	r2, [sp, #96]	; 0x60
 80165d8:	210a      	movs	r1, #10
 80165da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80165dc:	434a      	muls	r2, r1
 80165de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80165e0:	3930      	subs	r1, #48	; 0x30
 80165e2:	188a      	adds	r2, r1, r2
 80165e4:	9218      	str	r2, [sp, #96]	; 0x60
 80165e6:	001a      	movs	r2, r3
 80165e8:	7812      	ldrb	r2, [r2, #0]
 80165ea:	3301      	adds	r3, #1
 80165ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80165ee:	3a30      	subs	r2, #48	; 0x30
 80165f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80165f2:	2a09      	cmp	r2, #9
 80165f4:	d9f0      	bls.n	80165d8 <_svfprintf_r+0x264>
 80165f6:	e730      	b.n	801645a <_svfprintf_r+0xe6>
 80165f8:	2308      	movs	r3, #8
 80165fa:	e7ac      	b.n	8016556 <_svfprintf_r+0x1e2>
 80165fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80165fe:	781b      	ldrb	r3, [r3, #0]
 8016600:	2b68      	cmp	r3, #104	; 0x68
 8016602:	d105      	bne.n	8016610 <_svfprintf_r+0x29c>
 8016604:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016606:	3301      	adds	r3, #1
 8016608:	9313      	str	r3, [sp, #76]	; 0x4c
 801660a:	2380      	movs	r3, #128	; 0x80
 801660c:	009b      	lsls	r3, r3, #2
 801660e:	e7a2      	b.n	8016556 <_svfprintf_r+0x1e2>
 8016610:	2340      	movs	r3, #64	; 0x40
 8016612:	e7a0      	b.n	8016556 <_svfprintf_r+0x1e2>
 8016614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016616:	781b      	ldrb	r3, [r3, #0]
 8016618:	2b6c      	cmp	r3, #108	; 0x6c
 801661a:	d104      	bne.n	8016626 <_svfprintf_r+0x2b2>
 801661c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801661e:	3301      	adds	r3, #1
 8016620:	9313      	str	r3, [sp, #76]	; 0x4c
 8016622:	2320      	movs	r3, #32
 8016624:	e797      	b.n	8016556 <_svfprintf_r+0x1e2>
 8016626:	2310      	movs	r3, #16
 8016628:	e795      	b.n	8016556 <_svfprintf_r+0x1e2>
 801662a:	0022      	movs	r2, r4
 801662c:	ca08      	ldmia	r2!, {r3}
 801662e:	a83f      	add	r0, sp, #252	; 0xfc
 8016630:	920e      	str	r2, [sp, #56]	; 0x38
 8016632:	221b      	movs	r2, #27
 8016634:	7003      	strb	r3, [r0, #0]
 8016636:	2300      	movs	r3, #0
 8016638:	a91e      	add	r1, sp, #120	; 0x78
 801663a:	1852      	adds	r2, r2, r1
 801663c:	7013      	strb	r3, [r2, #0]
 801663e:	930c      	str	r3, [sp, #48]	; 0x30
 8016640:	3301      	adds	r3, #1
 8016642:	9309      	str	r3, [sp, #36]	; 0x24
 8016644:	2300      	movs	r3, #0
 8016646:	001d      	movs	r5, r3
 8016648:	9319      	str	r3, [sp, #100]	; 0x64
 801664a:	9310      	str	r3, [sp, #64]	; 0x40
 801664c:	9311      	str	r3, [sp, #68]	; 0x44
 801664e:	9008      	str	r0, [sp, #32]
 8016650:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016654:	931a      	str	r3, [sp, #104]	; 0x68
 8016656:	4293      	cmp	r3, r2
 8016658:	da00      	bge.n	801665c <_svfprintf_r+0x2e8>
 801665a:	921a      	str	r2, [sp, #104]	; 0x68
 801665c:	231b      	movs	r3, #27
 801665e:	aa1e      	add	r2, sp, #120	; 0x78
 8016660:	189b      	adds	r3, r3, r2
 8016662:	781b      	ldrb	r3, [r3, #0]
 8016664:	1e5a      	subs	r2, r3, #1
 8016666:	4193      	sbcs	r3, r2
 8016668:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801666a:	18d3      	adds	r3, r2, r3
 801666c:	931a      	str	r3, [sp, #104]	; 0x68
 801666e:	0032      	movs	r2, r6
 8016670:	2302      	movs	r3, #2
 8016672:	401a      	ands	r2, r3
 8016674:	9220      	str	r2, [sp, #128]	; 0x80
 8016676:	421e      	tst	r6, r3
 8016678:	d002      	beq.n	8016680 <_svfprintf_r+0x30c>
 801667a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801667c:	3302      	adds	r3, #2
 801667e:	931a      	str	r3, [sp, #104]	; 0x68
 8016680:	2384      	movs	r3, #132	; 0x84
 8016682:	0032      	movs	r2, r6
 8016684:	401a      	ands	r2, r3
 8016686:	9221      	str	r2, [sp, #132]	; 0x84
 8016688:	421e      	tst	r6, r3
 801668a:	d121      	bne.n	80166d0 <_svfprintf_r+0x35c>
 801668c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801668e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016690:	1a9c      	subs	r4, r3, r2
 8016692:	2c00      	cmp	r4, #0
 8016694:	dd1c      	ble.n	80166d0 <_svfprintf_r+0x35c>
 8016696:	0039      	movs	r1, r7
 8016698:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801669a:	48c5      	ldr	r0, [pc, #788]	; (80169b0 <_svfprintf_r+0x63c>)
 801669c:	9322      	str	r3, [sp, #136]	; 0x88
 801669e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80166a0:	3301      	adds	r3, #1
 80166a2:	3108      	adds	r1, #8
 80166a4:	6038      	str	r0, [r7, #0]
 80166a6:	2c10      	cmp	r4, #16
 80166a8:	dd01      	ble.n	80166ae <_svfprintf_r+0x33a>
 80166aa:	f000 fd1d 	bl	80170e8 <_svfprintf_r+0xd74>
 80166ae:	607c      	str	r4, [r7, #4]
 80166b0:	18a4      	adds	r4, r4, r2
 80166b2:	000f      	movs	r7, r1
 80166b4:	942e      	str	r4, [sp, #184]	; 0xb8
 80166b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80166b8:	2b07      	cmp	r3, #7
 80166ba:	dd09      	ble.n	80166d0 <_svfprintf_r+0x35c>
 80166bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80166c2:	f003 f8f1 	bl	80198a8 <__ssprint_r>
 80166c6:	2800      	cmp	r0, #0
 80166c8:	d001      	beq.n	80166ce <_svfprintf_r+0x35a>
 80166ca:	f001 f868 	bl	801779e <_svfprintf_r+0x142a>
 80166ce:	af2f      	add	r7, sp, #188	; 0xbc
 80166d0:	231b      	movs	r3, #27
 80166d2:	aa1e      	add	r2, sp, #120	; 0x78
 80166d4:	189b      	adds	r3, r3, r2
 80166d6:	781a      	ldrb	r2, [r3, #0]
 80166d8:	2a00      	cmp	r2, #0
 80166da:	d017      	beq.n	801670c <_svfprintf_r+0x398>
 80166dc:	603b      	str	r3, [r7, #0]
 80166de:	2301      	movs	r3, #1
 80166e0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80166e2:	607b      	str	r3, [r7, #4]
 80166e4:	0013      	movs	r3, r2
 80166e6:	3301      	adds	r3, #1
 80166e8:	932e      	str	r3, [sp, #184]	; 0xb8
 80166ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166ec:	3708      	adds	r7, #8
 80166ee:	9322      	str	r3, [sp, #136]	; 0x88
 80166f0:	3301      	adds	r3, #1
 80166f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80166f4:	2b07      	cmp	r3, #7
 80166f6:	dd09      	ble.n	801670c <_svfprintf_r+0x398>
 80166f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166fc:	aa2c      	add	r2, sp, #176	; 0xb0
 80166fe:	f003 f8d3 	bl	80198a8 <__ssprint_r>
 8016702:	2800      	cmp	r0, #0
 8016704:	d001      	beq.n	801670a <_svfprintf_r+0x396>
 8016706:	f001 f84a 	bl	801779e <_svfprintf_r+0x142a>
 801670a:	af2f      	add	r7, sp, #188	; 0xbc
 801670c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801670e:	2b00      	cmp	r3, #0
 8016710:	d019      	beq.n	8016746 <_svfprintf_r+0x3d2>
 8016712:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016714:	9320      	str	r3, [sp, #128]	; 0x80
 8016716:	ab25      	add	r3, sp, #148	; 0x94
 8016718:	603b      	str	r3, [r7, #0]
 801671a:	2302      	movs	r3, #2
 801671c:	607b      	str	r3, [r7, #4]
 801671e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016720:	3708      	adds	r7, #8
 8016722:	3302      	adds	r3, #2
 8016724:	932e      	str	r3, [sp, #184]	; 0xb8
 8016726:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016728:	9320      	str	r3, [sp, #128]	; 0x80
 801672a:	3301      	adds	r3, #1
 801672c:	932d      	str	r3, [sp, #180]	; 0xb4
 801672e:	2b07      	cmp	r3, #7
 8016730:	dd09      	ble.n	8016746 <_svfprintf_r+0x3d2>
 8016732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016734:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016736:	aa2c      	add	r2, sp, #176	; 0xb0
 8016738:	f003 f8b6 	bl	80198a8 <__ssprint_r>
 801673c:	2800      	cmp	r0, #0
 801673e:	d001      	beq.n	8016744 <_svfprintf_r+0x3d0>
 8016740:	f001 f82d 	bl	801779e <_svfprintf_r+0x142a>
 8016744:	af2f      	add	r7, sp, #188	; 0xbc
 8016746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016748:	2b80      	cmp	r3, #128	; 0x80
 801674a:	d121      	bne.n	8016790 <_svfprintf_r+0x41c>
 801674c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801674e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016750:	1a9c      	subs	r4, r3, r2
 8016752:	2c00      	cmp	r4, #0
 8016754:	dd1c      	ble.n	8016790 <_svfprintf_r+0x41c>
 8016756:	0039      	movs	r1, r7
 8016758:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801675a:	4896      	ldr	r0, [pc, #600]	; (80169b4 <_svfprintf_r+0x640>)
 801675c:	9320      	str	r3, [sp, #128]	; 0x80
 801675e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016760:	3301      	adds	r3, #1
 8016762:	3108      	adds	r1, #8
 8016764:	6038      	str	r0, [r7, #0]
 8016766:	2c10      	cmp	r4, #16
 8016768:	dd01      	ble.n	801676e <_svfprintf_r+0x3fa>
 801676a:	f000 fcd1 	bl	8017110 <_svfprintf_r+0xd9c>
 801676e:	607c      	str	r4, [r7, #4]
 8016770:	18a4      	adds	r4, r4, r2
 8016772:	000f      	movs	r7, r1
 8016774:	942e      	str	r4, [sp, #184]	; 0xb8
 8016776:	932d      	str	r3, [sp, #180]	; 0xb4
 8016778:	2b07      	cmp	r3, #7
 801677a:	dd09      	ble.n	8016790 <_svfprintf_r+0x41c>
 801677c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801677e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016780:	aa2c      	add	r2, sp, #176	; 0xb0
 8016782:	f003 f891 	bl	80198a8 <__ssprint_r>
 8016786:	2800      	cmp	r0, #0
 8016788:	d001      	beq.n	801678e <_svfprintf_r+0x41a>
 801678a:	f001 f808 	bl	801779e <_svfprintf_r+0x142a>
 801678e:	af2f      	add	r7, sp, #188	; 0xbc
 8016790:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016794:	1a9c      	subs	r4, r3, r2
 8016796:	2c00      	cmp	r4, #0
 8016798:	dd1c      	ble.n	80167d4 <_svfprintf_r+0x460>
 801679a:	0039      	movs	r1, r7
 801679c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801679e:	4885      	ldr	r0, [pc, #532]	; (80169b4 <_svfprintf_r+0x640>)
 80167a0:	9319      	str	r3, [sp, #100]	; 0x64
 80167a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80167a4:	3301      	adds	r3, #1
 80167a6:	3108      	adds	r1, #8
 80167a8:	6038      	str	r0, [r7, #0]
 80167aa:	2c10      	cmp	r4, #16
 80167ac:	dd01      	ble.n	80167b2 <_svfprintf_r+0x43e>
 80167ae:	f000 fcc3 	bl	8017138 <_svfprintf_r+0xdc4>
 80167b2:	1912      	adds	r2, r2, r4
 80167b4:	607c      	str	r4, [r7, #4]
 80167b6:	922e      	str	r2, [sp, #184]	; 0xb8
 80167b8:	000f      	movs	r7, r1
 80167ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80167bc:	2b07      	cmp	r3, #7
 80167be:	dd09      	ble.n	80167d4 <_svfprintf_r+0x460>
 80167c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80167c6:	f003 f86f 	bl	80198a8 <__ssprint_r>
 80167ca:	2800      	cmp	r0, #0
 80167cc:	d001      	beq.n	80167d2 <_svfprintf_r+0x45e>
 80167ce:	f000 ffe6 	bl	801779e <_svfprintf_r+0x142a>
 80167d2:	af2f      	add	r7, sp, #188	; 0xbc
 80167d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80167d6:	9319      	str	r3, [sp, #100]	; 0x64
 80167d8:	05f3      	lsls	r3, r6, #23
 80167da:	d501      	bpl.n	80167e0 <_svfprintf_r+0x46c>
 80167dc:	f000 fcc8 	bl	8017170 <_svfprintf_r+0xdfc>
 80167e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80167e2:	9b08      	ldr	r3, [sp, #32]
 80167e4:	4694      	mov	ip, r2
 80167e6:	603b      	str	r3, [r7, #0]
 80167e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167ea:	607b      	str	r3, [r7, #4]
 80167ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80167ee:	4463      	add	r3, ip
 80167f0:	932e      	str	r3, [sp, #184]	; 0xb8
 80167f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80167f4:	9308      	str	r3, [sp, #32]
 80167f6:	3301      	adds	r3, #1
 80167f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80167fa:	2b07      	cmp	r3, #7
 80167fc:	dd01      	ble.n	8016802 <_svfprintf_r+0x48e>
 80167fe:	f000 fda8 	bl	8017352 <_svfprintf_r+0xfde>
 8016802:	3708      	adds	r7, #8
 8016804:	f000 fcfb 	bl	80171fe <_svfprintf_r+0xe8a>
 8016808:	2310      	movs	r3, #16
 801680a:	431e      	orrs	r6, r3
 801680c:	06b3      	lsls	r3, r6, #26
 801680e:	d530      	bpl.n	8016872 <_svfprintf_r+0x4fe>
 8016810:	2307      	movs	r3, #7
 8016812:	3407      	adds	r4, #7
 8016814:	439c      	bics	r4, r3
 8016816:	0022      	movs	r2, r4
 8016818:	ca18      	ldmia	r2!, {r3, r4}
 801681a:	9306      	str	r3, [sp, #24]
 801681c:	9407      	str	r4, [sp, #28]
 801681e:	920e      	str	r2, [sp, #56]	; 0x38
 8016820:	9a07      	ldr	r2, [sp, #28]
 8016822:	2301      	movs	r3, #1
 8016824:	2a00      	cmp	r2, #0
 8016826:	da0b      	bge.n	8016840 <_svfprintf_r+0x4cc>
 8016828:	9c06      	ldr	r4, [sp, #24]
 801682a:	9d07      	ldr	r5, [sp, #28]
 801682c:	2200      	movs	r2, #0
 801682e:	4261      	negs	r1, r4
 8016830:	41aa      	sbcs	r2, r5
 8016832:	9106      	str	r1, [sp, #24]
 8016834:	9207      	str	r2, [sp, #28]
 8016836:	221b      	movs	r2, #27
 8016838:	a91e      	add	r1, sp, #120	; 0x78
 801683a:	1852      	adds	r2, r2, r1
 801683c:	212d      	movs	r1, #45	; 0x2d
 801683e:	7011      	strb	r1, [r2, #0]
 8016840:	9907      	ldr	r1, [sp, #28]
 8016842:	9a06      	ldr	r2, [sp, #24]
 8016844:	430a      	orrs	r2, r1
 8016846:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016848:	3101      	adds	r1, #1
 801684a:	d101      	bne.n	8016850 <_svfprintf_r+0x4dc>
 801684c:	f000 ffd5 	bl	80177fa <_svfprintf_r+0x1486>
 8016850:	2180      	movs	r1, #128	; 0x80
 8016852:	0035      	movs	r5, r6
 8016854:	438d      	bics	r5, r1
 8016856:	2a00      	cmp	r2, #0
 8016858:	d001      	beq.n	801685e <_svfprintf_r+0x4ea>
 801685a:	f000 ffd3 	bl	8017804 <_svfprintf_r+0x1490>
 801685e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016860:	2a00      	cmp	r2, #0
 8016862:	d101      	bne.n	8016868 <_svfprintf_r+0x4f4>
 8016864:	f000 fc20 	bl	80170a8 <_svfprintf_r+0xd34>
 8016868:	2b01      	cmp	r3, #1
 801686a:	d001      	beq.n	8016870 <_svfprintf_r+0x4fc>
 801686c:	f000 ffce 	bl	801780c <_svfprintf_r+0x1498>
 8016870:	e3b1      	b.n	8016fd6 <_svfprintf_r+0xc62>
 8016872:	1d23      	adds	r3, r4, #4
 8016874:	930e      	str	r3, [sp, #56]	; 0x38
 8016876:	06f3      	lsls	r3, r6, #27
 8016878:	d504      	bpl.n	8016884 <_svfprintf_r+0x510>
 801687a:	6823      	ldr	r3, [r4, #0]
 801687c:	9306      	str	r3, [sp, #24]
 801687e:	17db      	asrs	r3, r3, #31
 8016880:	9307      	str	r3, [sp, #28]
 8016882:	e7cd      	b.n	8016820 <_svfprintf_r+0x4ac>
 8016884:	6823      	ldr	r3, [r4, #0]
 8016886:	0672      	lsls	r2, r6, #25
 8016888:	d501      	bpl.n	801688e <_svfprintf_r+0x51a>
 801688a:	b21b      	sxth	r3, r3
 801688c:	e7f6      	b.n	801687c <_svfprintf_r+0x508>
 801688e:	05b2      	lsls	r2, r6, #22
 8016890:	d5f4      	bpl.n	801687c <_svfprintf_r+0x508>
 8016892:	b25b      	sxtb	r3, r3
 8016894:	e7f2      	b.n	801687c <_svfprintf_r+0x508>
 8016896:	2307      	movs	r3, #7
 8016898:	3407      	adds	r4, #7
 801689a:	439c      	bics	r4, r3
 801689c:	0022      	movs	r2, r4
 801689e:	ca18      	ldmia	r2!, {r3, r4}
 80168a0:	920e      	str	r2, [sp, #56]	; 0x38
 80168a2:	2201      	movs	r2, #1
 80168a4:	9314      	str	r3, [sp, #80]	; 0x50
 80168a6:	9415      	str	r4, [sp, #84]	; 0x54
 80168a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80168aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80168ac:	005c      	lsls	r4, r3, #1
 80168ae:	0864      	lsrs	r4, r4, #1
 80168b0:	0028      	movs	r0, r5
 80168b2:	0021      	movs	r1, r4
 80168b4:	4b40      	ldr	r3, [pc, #256]	; (80169b8 <_svfprintf_r+0x644>)
 80168b6:	4252      	negs	r2, r2
 80168b8:	f7ec fc6e 	bl	8003198 <__aeabi_dcmpun>
 80168bc:	2800      	cmp	r0, #0
 80168be:	d126      	bne.n	801690e <_svfprintf_r+0x59a>
 80168c0:	2201      	movs	r2, #1
 80168c2:	0028      	movs	r0, r5
 80168c4:	0021      	movs	r1, r4
 80168c6:	4b3c      	ldr	r3, [pc, #240]	; (80169b8 <_svfprintf_r+0x644>)
 80168c8:	4252      	negs	r2, r2
 80168ca:	f7e9 fdd7 	bl	800047c <__aeabi_dcmple>
 80168ce:	2800      	cmp	r0, #0
 80168d0:	d11d      	bne.n	801690e <_svfprintf_r+0x59a>
 80168d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80168d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80168d6:	2200      	movs	r2, #0
 80168d8:	2300      	movs	r3, #0
 80168da:	f7e9 fdc5 	bl	8000468 <__aeabi_dcmplt>
 80168de:	2800      	cmp	r0, #0
 80168e0:	d004      	beq.n	80168ec <_svfprintf_r+0x578>
 80168e2:	231b      	movs	r3, #27
 80168e4:	aa1e      	add	r2, sp, #120	; 0x78
 80168e6:	189b      	adds	r3, r3, r2
 80168e8:	222d      	movs	r2, #45	; 0x2d
 80168ea:	701a      	strb	r2, [r3, #0]
 80168ec:	4b33      	ldr	r3, [pc, #204]	; (80169bc <_svfprintf_r+0x648>)
 80168ee:	9308      	str	r3, [sp, #32]
 80168f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168f2:	2b47      	cmp	r3, #71	; 0x47
 80168f4:	dd01      	ble.n	80168fa <_svfprintf_r+0x586>
 80168f6:	4b32      	ldr	r3, [pc, #200]	; (80169c0 <_svfprintf_r+0x64c>)
 80168f8:	9308      	str	r3, [sp, #32]
 80168fa:	2380      	movs	r3, #128	; 0x80
 80168fc:	439e      	bics	r6, r3
 80168fe:	2300      	movs	r3, #0
 8016900:	930c      	str	r3, [sp, #48]	; 0x30
 8016902:	3303      	adds	r3, #3
 8016904:	9309      	str	r3, [sp, #36]	; 0x24
 8016906:	2300      	movs	r3, #0
 8016908:	9319      	str	r3, [sp, #100]	; 0x64
 801690a:	f000 ffae 	bl	801786a <_svfprintf_r+0x14f6>
 801690e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016912:	0010      	movs	r0, r2
 8016914:	0019      	movs	r1, r3
 8016916:	f7ec fc3f 	bl	8003198 <__aeabi_dcmpun>
 801691a:	2800      	cmp	r0, #0
 801691c:	d00e      	beq.n	801693c <_svfprintf_r+0x5c8>
 801691e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016920:	2b00      	cmp	r3, #0
 8016922:	da04      	bge.n	801692e <_svfprintf_r+0x5ba>
 8016924:	231b      	movs	r3, #27
 8016926:	aa1e      	add	r2, sp, #120	; 0x78
 8016928:	189b      	adds	r3, r3, r2
 801692a:	222d      	movs	r2, #45	; 0x2d
 801692c:	701a      	strb	r2, [r3, #0]
 801692e:	4b25      	ldr	r3, [pc, #148]	; (80169c4 <_svfprintf_r+0x650>)
 8016930:	9308      	str	r3, [sp, #32]
 8016932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016934:	2b47      	cmp	r3, #71	; 0x47
 8016936:	dde0      	ble.n	80168fa <_svfprintf_r+0x586>
 8016938:	4b23      	ldr	r3, [pc, #140]	; (80169c8 <_svfprintf_r+0x654>)
 801693a:	e7dd      	b.n	80168f8 <_svfprintf_r+0x584>
 801693c:	2320      	movs	r3, #32
 801693e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016940:	439a      	bics	r2, r3
 8016942:	9210      	str	r2, [sp, #64]	; 0x40
 8016944:	2a41      	cmp	r2, #65	; 0x41
 8016946:	d123      	bne.n	8016990 <_svfprintf_r+0x61c>
 8016948:	2230      	movs	r2, #48	; 0x30
 801694a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801694c:	ab25      	add	r3, sp, #148	; 0x94
 801694e:	701a      	strb	r2, [r3, #0]
 8016950:	3248      	adds	r2, #72	; 0x48
 8016952:	2961      	cmp	r1, #97	; 0x61
 8016954:	d000      	beq.n	8016958 <_svfprintf_r+0x5e4>
 8016956:	3a20      	subs	r2, #32
 8016958:	705a      	strb	r2, [r3, #1]
 801695a:	2302      	movs	r3, #2
 801695c:	431e      	orrs	r6, r3
 801695e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016960:	2b63      	cmp	r3, #99	; 0x63
 8016962:	dd33      	ble.n	80169cc <_svfprintf_r+0x658>
 8016964:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016966:	1c59      	adds	r1, r3, #1
 8016968:	f7fe f92a 	bl	8014bc0 <_malloc_r>
 801696c:	9008      	str	r0, [sp, #32]
 801696e:	2800      	cmp	r0, #0
 8016970:	d000      	beq.n	8016974 <_svfprintf_r+0x600>
 8016972:	e141      	b.n	8016bf8 <_svfprintf_r+0x884>
 8016974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016976:	899a      	ldrh	r2, [r3, #12]
 8016978:	2340      	movs	r3, #64	; 0x40
 801697a:	4313      	orrs	r3, r2
 801697c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801697e:	8193      	strh	r3, [r2, #12]
 8016980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016982:	899b      	ldrh	r3, [r3, #12]
 8016984:	065b      	lsls	r3, r3, #25
 8016986:	d400      	bmi.n	801698a <_svfprintf_r+0x616>
 8016988:	e519      	b.n	80163be <_svfprintf_r+0x4a>
 801698a:	2301      	movs	r3, #1
 801698c:	425b      	negs	r3, r3
 801698e:	e515      	b.n	80163bc <_svfprintf_r+0x48>
 8016990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016992:	900c      	str	r0, [sp, #48]	; 0x30
 8016994:	3301      	adds	r3, #1
 8016996:	d100      	bne.n	801699a <_svfprintf_r+0x626>
 8016998:	e131      	b.n	8016bfe <_svfprintf_r+0x88a>
 801699a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801699c:	2b47      	cmp	r3, #71	; 0x47
 801699e:	d119      	bne.n	80169d4 <_svfprintf_r+0x660>
 80169a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d116      	bne.n	80169d4 <_svfprintf_r+0x660>
 80169a6:	930c      	str	r3, [sp, #48]	; 0x30
 80169a8:	3301      	adds	r3, #1
 80169aa:	9309      	str	r3, [sp, #36]	; 0x24
 80169ac:	e012      	b.n	80169d4 <_svfprintf_r+0x660>
 80169ae:	46c0      	nop			; (mov r8, r8)
 80169b0:	0801e6dc 	.word	0x0801e6dc
 80169b4:	0801e6ec 	.word	0x0801e6ec
 80169b8:	7fefffff 	.word	0x7fefffff
 80169bc:	0801e6a8 	.word	0x0801e6a8
 80169c0:	0801e6ac 	.word	0x0801e6ac
 80169c4:	0801e6b0 	.word	0x0801e6b0
 80169c8:	0801e6b4 	.word	0x0801e6b4
 80169cc:	2300      	movs	r3, #0
 80169ce:	930c      	str	r3, [sp, #48]	; 0x30
 80169d0:	ab3f      	add	r3, sp, #252	; 0xfc
 80169d2:	9308      	str	r3, [sp, #32]
 80169d4:	2380      	movs	r3, #128	; 0x80
 80169d6:	005b      	lsls	r3, r3, #1
 80169d8:	4333      	orrs	r3, r6
 80169da:	9320      	str	r3, [sp, #128]	; 0x80
 80169dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	db00      	blt.n	80169e6 <_svfprintf_r+0x672>
 80169e4:	e10d      	b.n	8016c02 <_svfprintf_r+0x88e>
 80169e6:	2280      	movs	r2, #128	; 0x80
 80169e8:	0612      	lsls	r2, r2, #24
 80169ea:	4694      	mov	ip, r2
 80169ec:	4463      	add	r3, ip
 80169ee:	930d      	str	r3, [sp, #52]	; 0x34
 80169f0:	232d      	movs	r3, #45	; 0x2d
 80169f2:	9322      	str	r3, [sp, #136]	; 0x88
 80169f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169f6:	2b41      	cmp	r3, #65	; 0x41
 80169f8:	d000      	beq.n	80169fc <_svfprintf_r+0x688>
 80169fa:	e11b      	b.n	8016c34 <_svfprintf_r+0x8c0>
 80169fc:	0020      	movs	r0, r4
 80169fe:	aa26      	add	r2, sp, #152	; 0x98
 8016a00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016a02:	f002 ff19 	bl	8019838 <frexp>
 8016a06:	23ff      	movs	r3, #255	; 0xff
 8016a08:	2200      	movs	r2, #0
 8016a0a:	059b      	lsls	r3, r3, #22
 8016a0c:	f7eb fdc6 	bl	800259c <__aeabi_dmul>
 8016a10:	2200      	movs	r2, #0
 8016a12:	2300      	movs	r3, #0
 8016a14:	0004      	movs	r4, r0
 8016a16:	000d      	movs	r5, r1
 8016a18:	f7e9 fd20 	bl	800045c <__aeabi_dcmpeq>
 8016a1c:	2800      	cmp	r0, #0
 8016a1e:	d001      	beq.n	8016a24 <_svfprintf_r+0x6b0>
 8016a20:	2301      	movs	r3, #1
 8016a22:	9326      	str	r3, [sp, #152]	; 0x98
 8016a24:	4bc6      	ldr	r3, [pc, #792]	; (8016d40 <_svfprintf_r+0x9cc>)
 8016a26:	9319      	str	r3, [sp, #100]	; 0x64
 8016a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a2a:	2b61      	cmp	r3, #97	; 0x61
 8016a2c:	d001      	beq.n	8016a32 <_svfprintf_r+0x6be>
 8016a2e:	4bc5      	ldr	r3, [pc, #788]	; (8016d44 <_svfprintf_r+0x9d0>)
 8016a30:	9319      	str	r3, [sp, #100]	; 0x64
 8016a32:	9b08      	ldr	r3, [sp, #32]
 8016a34:	930d      	str	r3, [sp, #52]	; 0x34
 8016a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a38:	3b01      	subs	r3, #1
 8016a3a:	9311      	str	r3, [sp, #68]	; 0x44
 8016a3c:	2200      	movs	r2, #0
 8016a3e:	4bc2      	ldr	r3, [pc, #776]	; (8016d48 <_svfprintf_r+0x9d4>)
 8016a40:	0020      	movs	r0, r4
 8016a42:	0029      	movs	r1, r5
 8016a44:	f7eb fdaa 	bl	800259c <__aeabi_dmul>
 8016a48:	000d      	movs	r5, r1
 8016a4a:	0004      	movs	r4, r0
 8016a4c:	f7ec fbc2 	bl	80031d4 <__aeabi_d2iz>
 8016a50:	9021      	str	r0, [sp, #132]	; 0x84
 8016a52:	f7ec fbf5 	bl	8003240 <__aeabi_i2d>
 8016a56:	0002      	movs	r2, r0
 8016a58:	000b      	movs	r3, r1
 8016a5a:	0020      	movs	r0, r4
 8016a5c:	0029      	movs	r1, r5
 8016a5e:	f7ec f809 	bl	8002a74 <__aeabi_dsub>
 8016a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a64:	000d      	movs	r5, r1
 8016a66:	001a      	movs	r2, r3
 8016a68:	3201      	adds	r2, #1
 8016a6a:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016a6c:	920d      	str	r2, [sp, #52]	; 0x34
 8016a6e:	9223      	str	r2, [sp, #140]	; 0x8c
 8016a70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016a72:	0004      	movs	r4, r0
 8016a74:	5c52      	ldrb	r2, [r2, r1]
 8016a76:	701a      	strb	r2, [r3, #0]
 8016a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	d00a      	beq.n	8016a96 <_svfprintf_r+0x722>
 8016a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016a82:	2200      	movs	r2, #0
 8016a84:	3b01      	subs	r3, #1
 8016a86:	9311      	str	r3, [sp, #68]	; 0x44
 8016a88:	0020      	movs	r0, r4
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	0029      	movs	r1, r5
 8016a8e:	f7e9 fce5 	bl	800045c <__aeabi_dcmpeq>
 8016a92:	2800      	cmp	r0, #0
 8016a94:	d0d2      	beq.n	8016a3c <_svfprintf_r+0x6c8>
 8016a96:	2200      	movs	r2, #0
 8016a98:	0020      	movs	r0, r4
 8016a9a:	0029      	movs	r1, r5
 8016a9c:	4bab      	ldr	r3, [pc, #684]	; (8016d4c <_svfprintf_r+0x9d8>)
 8016a9e:	f7e9 fcf7 	bl	8000490 <__aeabi_dcmpgt>
 8016aa2:	2800      	cmp	r0, #0
 8016aa4:	d10c      	bne.n	8016ac0 <_svfprintf_r+0x74c>
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	0020      	movs	r0, r4
 8016aaa:	0029      	movs	r1, r5
 8016aac:	4ba7      	ldr	r3, [pc, #668]	; (8016d4c <_svfprintf_r+0x9d8>)
 8016aae:	f7e9 fcd5 	bl	800045c <__aeabi_dcmpeq>
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	d100      	bne.n	8016ab8 <_svfprintf_r+0x744>
 8016ab6:	e0b7      	b.n	8016c28 <_svfprintf_r+0x8b4>
 8016ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016aba:	07db      	lsls	r3, r3, #31
 8016abc:	d400      	bmi.n	8016ac0 <_svfprintf_r+0x74c>
 8016abe:	e0b3      	b.n	8016c28 <_svfprintf_r+0x8b4>
 8016ac0:	2030      	movs	r0, #48	; 0x30
 8016ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ac4:	932a      	str	r3, [sp, #168]	; 0xa8
 8016ac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016ac8:	7bdb      	ldrb	r3, [r3, #15]
 8016aca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016acc:	3a01      	subs	r2, #1
 8016ace:	922a      	str	r2, [sp, #168]	; 0xa8
 8016ad0:	7811      	ldrb	r1, [r2, #0]
 8016ad2:	4299      	cmp	r1, r3
 8016ad4:	d100      	bne.n	8016ad8 <_svfprintf_r+0x764>
 8016ad6:	e097      	b.n	8016c08 <_svfprintf_r+0x894>
 8016ad8:	1c4b      	adds	r3, r1, #1
 8016ada:	b2db      	uxtb	r3, r3
 8016adc:	2939      	cmp	r1, #57	; 0x39
 8016ade:	d101      	bne.n	8016ae4 <_svfprintf_r+0x770>
 8016ae0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016ae2:	7a9b      	ldrb	r3, [r3, #10]
 8016ae4:	7013      	strb	r3, [r2, #0]
 8016ae6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016ae8:	9a08      	ldr	r2, [sp, #32]
 8016aea:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8016aec:	1a9b      	subs	r3, r3, r2
 8016aee:	930d      	str	r3, [sp, #52]	; 0x34
 8016af0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016af2:	2b47      	cmp	r3, #71	; 0x47
 8016af4:	d000      	beq.n	8016af8 <_svfprintf_r+0x784>
 8016af6:	e0eb      	b.n	8016cd0 <_svfprintf_r+0x95c>
 8016af8:	1ceb      	adds	r3, r5, #3
 8016afa:	db03      	blt.n	8016b04 <_svfprintf_r+0x790>
 8016afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016afe:	42ab      	cmp	r3, r5
 8016b00:	db00      	blt.n	8016b04 <_svfprintf_r+0x790>
 8016b02:	e113      	b.n	8016d2c <_svfprintf_r+0x9b8>
 8016b04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b06:	3b02      	subs	r3, #2
 8016b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8016b0a:	223c      	movs	r2, #60	; 0x3c
 8016b0c:	466b      	mov	r3, sp
 8016b0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016b10:	189b      	adds	r3, r3, r2
 8016b12:	1e6c      	subs	r4, r5, #1
 8016b14:	3a1c      	subs	r2, #28
 8016b16:	2000      	movs	r0, #0
 8016b18:	781b      	ldrb	r3, [r3, #0]
 8016b1a:	9426      	str	r4, [sp, #152]	; 0x98
 8016b1c:	4391      	bics	r1, r2
 8016b1e:	2941      	cmp	r1, #65	; 0x41
 8016b20:	d102      	bne.n	8016b28 <_svfprintf_r+0x7b4>
 8016b22:	330f      	adds	r3, #15
 8016b24:	b2db      	uxtb	r3, r3
 8016b26:	3001      	adds	r0, #1
 8016b28:	a928      	add	r1, sp, #160	; 0xa0
 8016b2a:	700b      	strb	r3, [r1, #0]
 8016b2c:	232b      	movs	r3, #43	; 0x2b
 8016b2e:	2c00      	cmp	r4, #0
 8016b30:	da02      	bge.n	8016b38 <_svfprintf_r+0x7c4>
 8016b32:	2401      	movs	r4, #1
 8016b34:	3302      	adds	r3, #2
 8016b36:	1b64      	subs	r4, r4, r5
 8016b38:	704b      	strb	r3, [r1, #1]
 8016b3a:	2c09      	cmp	r4, #9
 8016b3c:	dc00      	bgt.n	8016b40 <_svfprintf_r+0x7cc>
 8016b3e:	e0e1      	b.n	8016d04 <_svfprintf_r+0x990>
 8016b40:	2337      	movs	r3, #55	; 0x37
 8016b42:	250a      	movs	r5, #10
 8016b44:	aa1e      	add	r2, sp, #120	; 0x78
 8016b46:	189b      	adds	r3, r3, r2
 8016b48:	9310      	str	r3, [sp, #64]	; 0x40
 8016b4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b4c:	0020      	movs	r0, r4
 8016b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8016b50:	0029      	movs	r1, r5
 8016b52:	3b01      	subs	r3, #1
 8016b54:	9310      	str	r3, [sp, #64]	; 0x40
 8016b56:	f7e9 fc6b 	bl	8000430 <__aeabi_idivmod>
 8016b5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b5c:	3130      	adds	r1, #48	; 0x30
 8016b5e:	7019      	strb	r1, [r3, #0]
 8016b60:	0020      	movs	r0, r4
 8016b62:	0029      	movs	r1, r5
 8016b64:	9411      	str	r4, [sp, #68]	; 0x44
 8016b66:	f7e9 fb7d 	bl	8000264 <__divsi3>
 8016b6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b6c:	0004      	movs	r4, r0
 8016b6e:	2b63      	cmp	r3, #99	; 0x63
 8016b70:	dceb      	bgt.n	8016b4a <_svfprintf_r+0x7d6>
 8016b72:	222a      	movs	r2, #42	; 0x2a
 8016b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b76:	a81e      	add	r0, sp, #120	; 0x78
 8016b78:	1e99      	subs	r1, r3, #2
 8016b7a:	1812      	adds	r2, r2, r0
 8016b7c:	2037      	movs	r0, #55	; 0x37
 8016b7e:	000b      	movs	r3, r1
 8016b80:	3430      	adds	r4, #48	; 0x30
 8016b82:	700c      	strb	r4, [r1, #0]
 8016b84:	ac1e      	add	r4, sp, #120	; 0x78
 8016b86:	1900      	adds	r0, r0, r4
 8016b88:	4283      	cmp	r3, r0
 8016b8a:	d200      	bcs.n	8016b8e <_svfprintf_r+0x81a>
 8016b8c:	e0b5      	b.n	8016cfa <_svfprintf_r+0x986>
 8016b8e:	2300      	movs	r3, #0
 8016b90:	4281      	cmp	r1, r0
 8016b92:	d804      	bhi.n	8016b9e <_svfprintf_r+0x82a>
 8016b94:	aa1e      	add	r2, sp, #120	; 0x78
 8016b96:	3339      	adds	r3, #57	; 0x39
 8016b98:	189b      	adds	r3, r3, r2
 8016b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b9c:	1a9b      	subs	r3, r3, r2
 8016b9e:	222a      	movs	r2, #42	; 0x2a
 8016ba0:	a91e      	add	r1, sp, #120	; 0x78
 8016ba2:	1852      	adds	r2, r2, r1
 8016ba4:	18d3      	adds	r3, r2, r3
 8016ba6:	aa28      	add	r2, sp, #160	; 0xa0
 8016ba8:	1a9b      	subs	r3, r3, r2
 8016baa:	931e      	str	r3, [sp, #120]	; 0x78
 8016bac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bb0:	4694      	mov	ip, r2
 8016bb2:	4463      	add	r3, ip
 8016bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8016bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bb8:	2b01      	cmp	r3, #1
 8016bba:	dc01      	bgt.n	8016bc0 <_svfprintf_r+0x84c>
 8016bbc:	07f3      	lsls	r3, r6, #31
 8016bbe:	d504      	bpl.n	8016bca <_svfprintf_r+0x856>
 8016bc0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bc4:	4694      	mov	ip, r2
 8016bc6:	4463      	add	r3, ip
 8016bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8016bca:	2280      	movs	r2, #128	; 0x80
 8016bcc:	4b60      	ldr	r3, [pc, #384]	; (8016d50 <_svfprintf_r+0x9dc>)
 8016bce:	0052      	lsls	r2, r2, #1
 8016bd0:	4033      	ands	r3, r6
 8016bd2:	431a      	orrs	r2, r3
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	001d      	movs	r5, r3
 8016bd8:	9220      	str	r2, [sp, #128]	; 0x80
 8016bda:	9310      	str	r3, [sp, #64]	; 0x40
 8016bdc:	9311      	str	r3, [sp, #68]	; 0x44
 8016bde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d100      	bne.n	8016be6 <_svfprintf_r+0x872>
 8016be4:	e27b      	b.n	80170de <_svfprintf_r+0xd6a>
 8016be6:	231b      	movs	r3, #27
 8016be8:	aa1e      	add	r2, sp, #120	; 0x78
 8016bea:	189b      	adds	r3, r3, r2
 8016bec:	222d      	movs	r2, #45	; 0x2d
 8016bee:	701a      	strb	r2, [r3, #0]
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016bf4:	9319      	str	r3, [sp, #100]	; 0x64
 8016bf6:	e52b      	b.n	8016650 <_svfprintf_r+0x2dc>
 8016bf8:	9b08      	ldr	r3, [sp, #32]
 8016bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8016bfc:	e6ea      	b.n	80169d4 <_svfprintf_r+0x660>
 8016bfe:	2306      	movs	r3, #6
 8016c00:	e6d3      	b.n	80169aa <_svfprintf_r+0x636>
 8016c02:	930d      	str	r3, [sp, #52]	; 0x34
 8016c04:	2300      	movs	r3, #0
 8016c06:	e6f4      	b.n	80169f2 <_svfprintf_r+0x67e>
 8016c08:	7010      	strb	r0, [r2, #0]
 8016c0a:	e75e      	b.n	8016aca <_svfprintf_r+0x756>
 8016c0c:	7018      	strb	r0, [r3, #0]
 8016c0e:	3301      	adds	r3, #1
 8016c10:	1aca      	subs	r2, r1, r3
 8016c12:	d5fb      	bpl.n	8016c0c <_svfprintf_r+0x898>
 8016c14:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016c16:	2300      	movs	r3, #0
 8016c18:	3201      	adds	r2, #1
 8016c1a:	db01      	blt.n	8016c20 <_svfprintf_r+0x8ac>
 8016c1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016c1e:	3301      	adds	r3, #1
 8016c20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c22:	18d3      	adds	r3, r2, r3
 8016c24:	9323      	str	r3, [sp, #140]	; 0x8c
 8016c26:	e75e      	b.n	8016ae6 <_svfprintf_r+0x772>
 8016c28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016c2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016c2c:	2030      	movs	r0, #48	; 0x30
 8016c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c30:	1851      	adds	r1, r2, r1
 8016c32:	e7ed      	b.n	8016c10 <_svfprintf_r+0x89c>
 8016c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c36:	2b46      	cmp	r3, #70	; 0x46
 8016c38:	d006      	beq.n	8016c48 <_svfprintf_r+0x8d4>
 8016c3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016c3c:	2b45      	cmp	r3, #69	; 0x45
 8016c3e:	d101      	bne.n	8016c44 <_svfprintf_r+0x8d0>
 8016c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c42:	1c5d      	adds	r5, r3, #1
 8016c44:	2302      	movs	r3, #2
 8016c46:	e001      	b.n	8016c4c <_svfprintf_r+0x8d8>
 8016c48:	2303      	movs	r3, #3
 8016c4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016c4c:	aa2a      	add	r2, sp, #168	; 0xa8
 8016c4e:	9204      	str	r2, [sp, #16]
 8016c50:	aa27      	add	r2, sp, #156	; 0x9c
 8016c52:	9203      	str	r2, [sp, #12]
 8016c54:	aa26      	add	r2, sp, #152	; 0x98
 8016c56:	9202      	str	r2, [sp, #8]
 8016c58:	9300      	str	r3, [sp, #0]
 8016c5a:	0022      	movs	r2, r4
 8016c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c60:	9501      	str	r5, [sp, #4]
 8016c62:	f000 feb7 	bl	80179d4 <_dtoa_r>
 8016c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c68:	9008      	str	r0, [sp, #32]
 8016c6a:	2b47      	cmp	r3, #71	; 0x47
 8016c6c:	d103      	bne.n	8016c76 <_svfprintf_r+0x902>
 8016c6e:	07f3      	lsls	r3, r6, #31
 8016c70:	d401      	bmi.n	8016c76 <_svfprintf_r+0x902>
 8016c72:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016c74:	e738      	b.n	8016ae8 <_svfprintf_r+0x774>
 8016c76:	9b08      	ldr	r3, [sp, #32]
 8016c78:	195b      	adds	r3, r3, r5
 8016c7a:	9311      	str	r3, [sp, #68]	; 0x44
 8016c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c7e:	2b46      	cmp	r3, #70	; 0x46
 8016c80:	d113      	bne.n	8016caa <_svfprintf_r+0x936>
 8016c82:	9b08      	ldr	r3, [sp, #32]
 8016c84:	781b      	ldrb	r3, [r3, #0]
 8016c86:	2b30      	cmp	r3, #48	; 0x30
 8016c88:	d10a      	bne.n	8016ca0 <_svfprintf_r+0x92c>
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	0020      	movs	r0, r4
 8016c90:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016c92:	f7e9 fbe3 	bl	800045c <__aeabi_dcmpeq>
 8016c96:	2800      	cmp	r0, #0
 8016c98:	d102      	bne.n	8016ca0 <_svfprintf_r+0x92c>
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	1b5d      	subs	r5, r3, r5
 8016c9e:	9526      	str	r5, [sp, #152]	; 0x98
 8016ca0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ca4:	4694      	mov	ip, r2
 8016ca6:	4463      	add	r3, ip
 8016ca8:	9311      	str	r3, [sp, #68]	; 0x44
 8016caa:	2200      	movs	r2, #0
 8016cac:	2300      	movs	r3, #0
 8016cae:	0020      	movs	r0, r4
 8016cb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016cb2:	f7e9 fbd3 	bl	800045c <__aeabi_dcmpeq>
 8016cb6:	2800      	cmp	r0, #0
 8016cb8:	d001      	beq.n	8016cbe <_svfprintf_r+0x94a>
 8016cba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016cbc:	932a      	str	r3, [sp, #168]	; 0xa8
 8016cbe:	2230      	movs	r2, #48	; 0x30
 8016cc0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016cc2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016cc4:	4299      	cmp	r1, r3
 8016cc6:	d9d4      	bls.n	8016c72 <_svfprintf_r+0x8fe>
 8016cc8:	1c59      	adds	r1, r3, #1
 8016cca:	912a      	str	r1, [sp, #168]	; 0xa8
 8016ccc:	701a      	strb	r2, [r3, #0]
 8016cce:	e7f7      	b.n	8016cc0 <_svfprintf_r+0x94c>
 8016cd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016cd2:	2b46      	cmp	r3, #70	; 0x46
 8016cd4:	d000      	beq.n	8016cd8 <_svfprintf_r+0x964>
 8016cd6:	e718      	b.n	8016b0a <_svfprintf_r+0x796>
 8016cd8:	2201      	movs	r2, #1
 8016cda:	0033      	movs	r3, r6
 8016cdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016cde:	4013      	ands	r3, r2
 8016ce0:	430b      	orrs	r3, r1
 8016ce2:	2d00      	cmp	r5, #0
 8016ce4:	dd1c      	ble.n	8016d20 <_svfprintf_r+0x9ac>
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d04f      	beq.n	8016d8a <_svfprintf_r+0xa16>
 8016cea:	000a      	movs	r2, r1
 8016cec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016cee:	18eb      	adds	r3, r5, r3
 8016cf0:	18d3      	adds	r3, r2, r3
 8016cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8016cf4:	2366      	movs	r3, #102	; 0x66
 8016cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8016cf8:	e039      	b.n	8016d6e <_svfprintf_r+0x9fa>
 8016cfa:	781c      	ldrb	r4, [r3, #0]
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	7014      	strb	r4, [r2, #0]
 8016d00:	3201      	adds	r2, #1
 8016d02:	e741      	b.n	8016b88 <_svfprintf_r+0x814>
 8016d04:	222a      	movs	r2, #42	; 0x2a
 8016d06:	ab1e      	add	r3, sp, #120	; 0x78
 8016d08:	18d2      	adds	r2, r2, r3
 8016d0a:	2800      	cmp	r0, #0
 8016d0c:	d104      	bne.n	8016d18 <_svfprintf_r+0x9a4>
 8016d0e:	2330      	movs	r3, #48	; 0x30
 8016d10:	222b      	movs	r2, #43	; 0x2b
 8016d12:	708b      	strb	r3, [r1, #2]
 8016d14:	ab1e      	add	r3, sp, #120	; 0x78
 8016d16:	18d2      	adds	r2, r2, r3
 8016d18:	3430      	adds	r4, #48	; 0x30
 8016d1a:	1c53      	adds	r3, r2, #1
 8016d1c:	7014      	strb	r4, [r2, #0]
 8016d1e:	e742      	b.n	8016ba6 <_svfprintf_r+0x832>
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d034      	beq.n	8016d8e <_svfprintf_r+0xa1a>
 8016d24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d28:	3301      	adds	r3, #1
 8016d2a:	e7e1      	b.n	8016cf0 <_svfprintf_r+0x97c>
 8016d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d2e:	429d      	cmp	r5, r3
 8016d30:	db10      	blt.n	8016d54 <_svfprintf_r+0x9e0>
 8016d32:	07f3      	lsls	r3, r6, #31
 8016d34:	d52f      	bpl.n	8016d96 <_svfprintf_r+0xa22>
 8016d36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016d38:	18eb      	adds	r3, r5, r3
 8016d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8016d3c:	2367      	movs	r3, #103	; 0x67
 8016d3e:	e7da      	b.n	8016cf6 <_svfprintf_r+0x982>
 8016d40:	0801e6b8 	.word	0x0801e6b8
 8016d44:	0801e6c9 	.word	0x0801e6c9
 8016d48:	40300000 	.word	0x40300000
 8016d4c:	3fe00000 	.word	0x3fe00000
 8016d50:	fffffbff 	.word	0xfffffbff
 8016d54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d58:	4694      	mov	ip, r2
 8016d5a:	4463      	add	r3, ip
 8016d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8016d5e:	2367      	movs	r3, #103	; 0x67
 8016d60:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d62:	2d00      	cmp	r5, #0
 8016d64:	dc03      	bgt.n	8016d6e <_svfprintf_r+0x9fa>
 8016d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d68:	1b58      	subs	r0, r3, r5
 8016d6a:	1c43      	adds	r3, r0, #1
 8016d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8016d6e:	2380      	movs	r3, #128	; 0x80
 8016d70:	0032      	movs	r2, r6
 8016d72:	00db      	lsls	r3, r3, #3
 8016d74:	401a      	ands	r2, r3
 8016d76:	9211      	str	r2, [sp, #68]	; 0x44
 8016d78:	2200      	movs	r2, #0
 8016d7a:	9210      	str	r2, [sp, #64]	; 0x40
 8016d7c:	421e      	tst	r6, r3
 8016d7e:	d100      	bne.n	8016d82 <_svfprintf_r+0xa0e>
 8016d80:	e72d      	b.n	8016bde <_svfprintf_r+0x86a>
 8016d82:	4295      	cmp	r5, r2
 8016d84:	dc27      	bgt.n	8016dd6 <_svfprintf_r+0xa62>
 8016d86:	9211      	str	r2, [sp, #68]	; 0x44
 8016d88:	e729      	b.n	8016bde <_svfprintf_r+0x86a>
 8016d8a:	9509      	str	r5, [sp, #36]	; 0x24
 8016d8c:	e7b2      	b.n	8016cf4 <_svfprintf_r+0x980>
 8016d8e:	2366      	movs	r3, #102	; 0x66
 8016d90:	9209      	str	r2, [sp, #36]	; 0x24
 8016d92:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d94:	e7eb      	b.n	8016d6e <_svfprintf_r+0x9fa>
 8016d96:	9509      	str	r5, [sp, #36]	; 0x24
 8016d98:	e7d0      	b.n	8016d3c <_svfprintf_r+0x9c8>
 8016d9a:	42ab      	cmp	r3, r5
 8016d9c:	da0e      	bge.n	8016dbc <_svfprintf_r+0xa48>
 8016d9e:	1aed      	subs	r5, r5, r3
 8016da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016da2:	785b      	ldrb	r3, [r3, #1]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d012      	beq.n	8016dce <_svfprintf_r+0xa5a>
 8016da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016daa:	3301      	adds	r3, #1
 8016dac:	9311      	str	r3, [sp, #68]	; 0x44
 8016dae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016db0:	3301      	adds	r3, #1
 8016db2:	9312      	str	r3, [sp, #72]	; 0x48
 8016db4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016db6:	781b      	ldrb	r3, [r3, #0]
 8016db8:	2bff      	cmp	r3, #255	; 0xff
 8016dba:	d1ee      	bne.n	8016d9a <_svfprintf_r+0xa26>
 8016dbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016dc0:	189b      	adds	r3, r3, r2
 8016dc2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016dc4:	4353      	muls	r3, r2
 8016dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016dc8:	189b      	adds	r3, r3, r2
 8016dca:	9309      	str	r3, [sp, #36]	; 0x24
 8016dcc:	e707      	b.n	8016bde <_svfprintf_r+0x86a>
 8016dce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016dd0:	3301      	adds	r3, #1
 8016dd2:	9310      	str	r3, [sp, #64]	; 0x40
 8016dd4:	e7ee      	b.n	8016db4 <_svfprintf_r+0xa40>
 8016dd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016dd8:	9311      	str	r3, [sp, #68]	; 0x44
 8016dda:	e7eb      	b.n	8016db4 <_svfprintf_r+0xa40>
 8016ddc:	0022      	movs	r2, r4
 8016dde:	ca08      	ldmia	r2!, {r3}
 8016de0:	920e      	str	r2, [sp, #56]	; 0x38
 8016de2:	06b2      	lsls	r2, r6, #26
 8016de4:	d508      	bpl.n	8016df8 <_svfprintf_r+0xa84>
 8016de6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016de8:	601a      	str	r2, [r3, #0]
 8016dea:	17d2      	asrs	r2, r2, #31
 8016dec:	605a      	str	r2, [r3, #4]
 8016dee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016df0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016df2:	9308      	str	r3, [sp, #32]
 8016df4:	f7ff fafa 	bl	80163ec <_svfprintf_r+0x78>
 8016df8:	06f2      	lsls	r2, r6, #27
 8016dfa:	d502      	bpl.n	8016e02 <_svfprintf_r+0xa8e>
 8016dfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016dfe:	601a      	str	r2, [r3, #0]
 8016e00:	e7f5      	b.n	8016dee <_svfprintf_r+0xa7a>
 8016e02:	0672      	lsls	r2, r6, #25
 8016e04:	d502      	bpl.n	8016e0c <_svfprintf_r+0xa98>
 8016e06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016e08:	801a      	strh	r2, [r3, #0]
 8016e0a:	e7f0      	b.n	8016dee <_svfprintf_r+0xa7a>
 8016e0c:	05b2      	lsls	r2, r6, #22
 8016e0e:	d5f5      	bpl.n	8016dfc <_svfprintf_r+0xa88>
 8016e10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016e12:	701a      	strb	r2, [r3, #0]
 8016e14:	e7eb      	b.n	8016dee <_svfprintf_r+0xa7a>
 8016e16:	2310      	movs	r3, #16
 8016e18:	431e      	orrs	r6, r3
 8016e1a:	2320      	movs	r3, #32
 8016e1c:	0031      	movs	r1, r6
 8016e1e:	4019      	ands	r1, r3
 8016e20:	421e      	tst	r6, r3
 8016e22:	d00f      	beq.n	8016e44 <_svfprintf_r+0xad0>
 8016e24:	3b19      	subs	r3, #25
 8016e26:	3407      	adds	r4, #7
 8016e28:	439c      	bics	r4, r3
 8016e2a:	0022      	movs	r2, r4
 8016e2c:	ca18      	ldmia	r2!, {r3, r4}
 8016e2e:	9306      	str	r3, [sp, #24]
 8016e30:	9407      	str	r4, [sp, #28]
 8016e32:	920e      	str	r2, [sp, #56]	; 0x38
 8016e34:	4bca      	ldr	r3, [pc, #808]	; (8017160 <_svfprintf_r+0xdec>)
 8016e36:	401e      	ands	r6, r3
 8016e38:	2300      	movs	r3, #0
 8016e3a:	221b      	movs	r2, #27
 8016e3c:	a91e      	add	r1, sp, #120	; 0x78
 8016e3e:	1852      	adds	r2, r2, r1
 8016e40:	2100      	movs	r1, #0
 8016e42:	e4fc      	b.n	801683e <_svfprintf_r+0x4ca>
 8016e44:	1d23      	adds	r3, r4, #4
 8016e46:	0032      	movs	r2, r6
 8016e48:	930e      	str	r3, [sp, #56]	; 0x38
 8016e4a:	2310      	movs	r3, #16
 8016e4c:	401a      	ands	r2, r3
 8016e4e:	421e      	tst	r6, r3
 8016e50:	d003      	beq.n	8016e5a <_svfprintf_r+0xae6>
 8016e52:	6823      	ldr	r3, [r4, #0]
 8016e54:	9306      	str	r3, [sp, #24]
 8016e56:	9107      	str	r1, [sp, #28]
 8016e58:	e7ec      	b.n	8016e34 <_svfprintf_r+0xac0>
 8016e5a:	2340      	movs	r3, #64	; 0x40
 8016e5c:	0031      	movs	r1, r6
 8016e5e:	4019      	ands	r1, r3
 8016e60:	421e      	tst	r6, r3
 8016e62:	d004      	beq.n	8016e6e <_svfprintf_r+0xafa>
 8016e64:	6823      	ldr	r3, [r4, #0]
 8016e66:	b29b      	uxth	r3, r3
 8016e68:	9306      	str	r3, [sp, #24]
 8016e6a:	9207      	str	r2, [sp, #28]
 8016e6c:	e7e2      	b.n	8016e34 <_svfprintf_r+0xac0>
 8016e6e:	2380      	movs	r3, #128	; 0x80
 8016e70:	0032      	movs	r2, r6
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	401a      	ands	r2, r3
 8016e76:	421e      	tst	r6, r3
 8016e78:	d002      	beq.n	8016e80 <_svfprintf_r+0xb0c>
 8016e7a:	6823      	ldr	r3, [r4, #0]
 8016e7c:	b2db      	uxtb	r3, r3
 8016e7e:	e7e9      	b.n	8016e54 <_svfprintf_r+0xae0>
 8016e80:	6823      	ldr	r3, [r4, #0]
 8016e82:	e7f1      	b.n	8016e68 <_svfprintf_r+0xaf4>
 8016e84:	0023      	movs	r3, r4
 8016e86:	cb04      	ldmia	r3!, {r2}
 8016e88:	49b6      	ldr	r1, [pc, #728]	; (8017164 <_svfprintf_r+0xdf0>)
 8016e8a:	9206      	str	r2, [sp, #24]
 8016e8c:	aa25      	add	r2, sp, #148	; 0x94
 8016e8e:	8011      	strh	r1, [r2, #0]
 8016e90:	4ab5      	ldr	r2, [pc, #724]	; (8017168 <_svfprintf_r+0xdf4>)
 8016e92:	930e      	str	r3, [sp, #56]	; 0x38
 8016e94:	2300      	movs	r3, #0
 8016e96:	921f      	str	r2, [sp, #124]	; 0x7c
 8016e98:	2278      	movs	r2, #120	; 0x78
 8016e9a:	9307      	str	r3, [sp, #28]
 8016e9c:	3302      	adds	r3, #2
 8016e9e:	431e      	orrs	r6, r3
 8016ea0:	920f      	str	r2, [sp, #60]	; 0x3c
 8016ea2:	e7ca      	b.n	8016e3a <_svfprintf_r+0xac6>
 8016ea4:	0023      	movs	r3, r4
 8016ea6:	cb04      	ldmia	r3!, {r2}
 8016ea8:	2400      	movs	r4, #0
 8016eaa:	930e      	str	r3, [sp, #56]	; 0x38
 8016eac:	231b      	movs	r3, #27
 8016eae:	9208      	str	r2, [sp, #32]
 8016eb0:	aa1e      	add	r2, sp, #120	; 0x78
 8016eb2:	189b      	adds	r3, r3, r2
 8016eb4:	701c      	strb	r4, [r3, #0]
 8016eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eb8:	3301      	adds	r3, #1
 8016eba:	d00e      	beq.n	8016eda <_svfprintf_r+0xb66>
 8016ebc:	0021      	movs	r1, r4
 8016ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ec0:	9808      	ldr	r0, [sp, #32]
 8016ec2:	f002 f821 	bl	8018f08 <memchr>
 8016ec6:	900c      	str	r0, [sp, #48]	; 0x30
 8016ec8:	42a0      	cmp	r0, r4
 8016eca:	d100      	bne.n	8016ece <_svfprintf_r+0xb5a>
 8016ecc:	e10a      	b.n	80170e4 <_svfprintf_r+0xd70>
 8016ece:	9a08      	ldr	r2, [sp, #32]
 8016ed0:	1a83      	subs	r3, r0, r2
 8016ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8016ed4:	0023      	movs	r3, r4
 8016ed6:	940c      	str	r4, [sp, #48]	; 0x30
 8016ed8:	e516      	b.n	8016908 <_svfprintf_r+0x594>
 8016eda:	9808      	ldr	r0, [sp, #32]
 8016edc:	f7e9 f91c 	bl	8000118 <strlen>
 8016ee0:	9009      	str	r0, [sp, #36]	; 0x24
 8016ee2:	e7f7      	b.n	8016ed4 <_svfprintf_r+0xb60>
 8016ee4:	2310      	movs	r3, #16
 8016ee6:	431e      	orrs	r6, r3
 8016ee8:	2320      	movs	r3, #32
 8016eea:	0031      	movs	r1, r6
 8016eec:	4019      	ands	r1, r3
 8016eee:	421e      	tst	r6, r3
 8016ef0:	d009      	beq.n	8016f06 <_svfprintf_r+0xb92>
 8016ef2:	3b19      	subs	r3, #25
 8016ef4:	3407      	adds	r4, #7
 8016ef6:	439c      	bics	r4, r3
 8016ef8:	0022      	movs	r2, r4
 8016efa:	ca18      	ldmia	r2!, {r3, r4}
 8016efc:	9306      	str	r3, [sp, #24]
 8016efe:	9407      	str	r4, [sp, #28]
 8016f00:	920e      	str	r2, [sp, #56]	; 0x38
 8016f02:	2301      	movs	r3, #1
 8016f04:	e799      	b.n	8016e3a <_svfprintf_r+0xac6>
 8016f06:	1d23      	adds	r3, r4, #4
 8016f08:	0032      	movs	r2, r6
 8016f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8016f0c:	2310      	movs	r3, #16
 8016f0e:	401a      	ands	r2, r3
 8016f10:	421e      	tst	r6, r3
 8016f12:	d003      	beq.n	8016f1c <_svfprintf_r+0xba8>
 8016f14:	6823      	ldr	r3, [r4, #0]
 8016f16:	9306      	str	r3, [sp, #24]
 8016f18:	9107      	str	r1, [sp, #28]
 8016f1a:	e7f2      	b.n	8016f02 <_svfprintf_r+0xb8e>
 8016f1c:	2340      	movs	r3, #64	; 0x40
 8016f1e:	0031      	movs	r1, r6
 8016f20:	4019      	ands	r1, r3
 8016f22:	421e      	tst	r6, r3
 8016f24:	d004      	beq.n	8016f30 <_svfprintf_r+0xbbc>
 8016f26:	6823      	ldr	r3, [r4, #0]
 8016f28:	b29b      	uxth	r3, r3
 8016f2a:	9306      	str	r3, [sp, #24]
 8016f2c:	9207      	str	r2, [sp, #28]
 8016f2e:	e7e8      	b.n	8016f02 <_svfprintf_r+0xb8e>
 8016f30:	2380      	movs	r3, #128	; 0x80
 8016f32:	0032      	movs	r2, r6
 8016f34:	009b      	lsls	r3, r3, #2
 8016f36:	401a      	ands	r2, r3
 8016f38:	421e      	tst	r6, r3
 8016f3a:	d002      	beq.n	8016f42 <_svfprintf_r+0xbce>
 8016f3c:	6823      	ldr	r3, [r4, #0]
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	e7e9      	b.n	8016f16 <_svfprintf_r+0xba2>
 8016f42:	6823      	ldr	r3, [r4, #0]
 8016f44:	e7f1      	b.n	8016f2a <_svfprintf_r+0xbb6>
 8016f46:	4b89      	ldr	r3, [pc, #548]	; (801716c <_svfprintf_r+0xdf8>)
 8016f48:	0031      	movs	r1, r6
 8016f4a:	931f      	str	r3, [sp, #124]	; 0x7c
 8016f4c:	2320      	movs	r3, #32
 8016f4e:	4019      	ands	r1, r3
 8016f50:	421e      	tst	r6, r3
 8016f52:	d01a      	beq.n	8016f8a <_svfprintf_r+0xc16>
 8016f54:	3b19      	subs	r3, #25
 8016f56:	3407      	adds	r4, #7
 8016f58:	439c      	bics	r4, r3
 8016f5a:	0022      	movs	r2, r4
 8016f5c:	ca18      	ldmia	r2!, {r3, r4}
 8016f5e:	9306      	str	r3, [sp, #24]
 8016f60:	9407      	str	r4, [sp, #28]
 8016f62:	920e      	str	r2, [sp, #56]	; 0x38
 8016f64:	07f3      	lsls	r3, r6, #31
 8016f66:	d50a      	bpl.n	8016f7e <_svfprintf_r+0xc0a>
 8016f68:	9b06      	ldr	r3, [sp, #24]
 8016f6a:	9a07      	ldr	r2, [sp, #28]
 8016f6c:	4313      	orrs	r3, r2
 8016f6e:	d006      	beq.n	8016f7e <_svfprintf_r+0xc0a>
 8016f70:	2230      	movs	r2, #48	; 0x30
 8016f72:	ab25      	add	r3, sp, #148	; 0x94
 8016f74:	701a      	strb	r2, [r3, #0]
 8016f76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f78:	705a      	strb	r2, [r3, #1]
 8016f7a:	2302      	movs	r3, #2
 8016f7c:	431e      	orrs	r6, r3
 8016f7e:	4b78      	ldr	r3, [pc, #480]	; (8017160 <_svfprintf_r+0xdec>)
 8016f80:	401e      	ands	r6, r3
 8016f82:	2302      	movs	r3, #2
 8016f84:	e759      	b.n	8016e3a <_svfprintf_r+0xac6>
 8016f86:	4b78      	ldr	r3, [pc, #480]	; (8017168 <_svfprintf_r+0xdf4>)
 8016f88:	e7de      	b.n	8016f48 <_svfprintf_r+0xbd4>
 8016f8a:	1d23      	adds	r3, r4, #4
 8016f8c:	0032      	movs	r2, r6
 8016f8e:	930e      	str	r3, [sp, #56]	; 0x38
 8016f90:	2310      	movs	r3, #16
 8016f92:	401a      	ands	r2, r3
 8016f94:	421e      	tst	r6, r3
 8016f96:	d003      	beq.n	8016fa0 <_svfprintf_r+0xc2c>
 8016f98:	6823      	ldr	r3, [r4, #0]
 8016f9a:	9306      	str	r3, [sp, #24]
 8016f9c:	9107      	str	r1, [sp, #28]
 8016f9e:	e7e1      	b.n	8016f64 <_svfprintf_r+0xbf0>
 8016fa0:	2340      	movs	r3, #64	; 0x40
 8016fa2:	0031      	movs	r1, r6
 8016fa4:	4019      	ands	r1, r3
 8016fa6:	421e      	tst	r6, r3
 8016fa8:	d004      	beq.n	8016fb4 <_svfprintf_r+0xc40>
 8016faa:	6823      	ldr	r3, [r4, #0]
 8016fac:	b29b      	uxth	r3, r3
 8016fae:	9306      	str	r3, [sp, #24]
 8016fb0:	9207      	str	r2, [sp, #28]
 8016fb2:	e7d7      	b.n	8016f64 <_svfprintf_r+0xbf0>
 8016fb4:	2380      	movs	r3, #128	; 0x80
 8016fb6:	0032      	movs	r2, r6
 8016fb8:	009b      	lsls	r3, r3, #2
 8016fba:	401a      	ands	r2, r3
 8016fbc:	421e      	tst	r6, r3
 8016fbe:	d002      	beq.n	8016fc6 <_svfprintf_r+0xc52>
 8016fc0:	6823      	ldr	r3, [r4, #0]
 8016fc2:	b2db      	uxtb	r3, r3
 8016fc4:	e7e9      	b.n	8016f9a <_svfprintf_r+0xc26>
 8016fc6:	6823      	ldr	r3, [r4, #0]
 8016fc8:	e7f1      	b.n	8016fae <_svfprintf_r+0xc3a>
 8016fca:	9b07      	ldr	r3, [sp, #28]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d10b      	bne.n	8016fe8 <_svfprintf_r+0xc74>
 8016fd0:	9b06      	ldr	r3, [sp, #24]
 8016fd2:	2b09      	cmp	r3, #9
 8016fd4:	d808      	bhi.n	8016fe8 <_svfprintf_r+0xc74>
 8016fd6:	20e7      	movs	r0, #231	; 0xe7
 8016fd8:	ab1e      	add	r3, sp, #120	; 0x78
 8016fda:	18c0      	adds	r0, r0, r3
 8016fdc:	9b06      	ldr	r3, [sp, #24]
 8016fde:	3330      	adds	r3, #48	; 0x30
 8016fe0:	7003      	strb	r3, [r0, #0]
 8016fe2:	9008      	str	r0, [sp, #32]
 8016fe4:	f000 fc38 	bl	8017858 <_svfprintf_r+0x14e4>
 8016fe8:	2480      	movs	r4, #128	; 0x80
 8016fea:	2300      	movs	r3, #0
 8016fec:	00e4      	lsls	r4, r4, #3
 8016fee:	930d      	str	r3, [sp, #52]	; 0x34
 8016ff0:	a858      	add	r0, sp, #352	; 0x160
 8016ff2:	402c      	ands	r4, r5
 8016ff4:	1e43      	subs	r3, r0, #1
 8016ff6:	9308      	str	r3, [sp, #32]
 8016ff8:	220a      	movs	r2, #10
 8016ffa:	9806      	ldr	r0, [sp, #24]
 8016ffc:	9907      	ldr	r1, [sp, #28]
 8016ffe:	2300      	movs	r3, #0
 8017000:	f7e9 fab8 	bl	8000574 <__aeabi_uldivmod>
 8017004:	9b08      	ldr	r3, [sp, #32]
 8017006:	3230      	adds	r2, #48	; 0x30
 8017008:	701a      	strb	r2, [r3, #0]
 801700a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801700c:	3301      	adds	r3, #1
 801700e:	930d      	str	r3, [sp, #52]	; 0x34
 8017010:	2c00      	cmp	r4, #0
 8017012:	d01d      	beq.n	8017050 <_svfprintf_r+0xcdc>
 8017014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017016:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017018:	781b      	ldrb	r3, [r3, #0]
 801701a:	429a      	cmp	r2, r3
 801701c:	d118      	bne.n	8017050 <_svfprintf_r+0xcdc>
 801701e:	2aff      	cmp	r2, #255	; 0xff
 8017020:	d016      	beq.n	8017050 <_svfprintf_r+0xcdc>
 8017022:	9b07      	ldr	r3, [sp, #28]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d102      	bne.n	801702e <_svfprintf_r+0xcba>
 8017028:	9b06      	ldr	r3, [sp, #24]
 801702a:	2b09      	cmp	r3, #9
 801702c:	d910      	bls.n	8017050 <_svfprintf_r+0xcdc>
 801702e:	9b08      	ldr	r3, [sp, #32]
 8017030:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017032:	991d      	ldr	r1, [sp, #116]	; 0x74
 8017034:	1a9b      	subs	r3, r3, r2
 8017036:	0018      	movs	r0, r3
 8017038:	9308      	str	r3, [sp, #32]
 801703a:	f7fe fa69 	bl	8015510 <strncpy>
 801703e:	2200      	movs	r2, #0
 8017040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017042:	920d      	str	r2, [sp, #52]	; 0x34
 8017044:	785b      	ldrb	r3, [r3, #1]
 8017046:	1e5a      	subs	r2, r3, #1
 8017048:	4193      	sbcs	r3, r2
 801704a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801704c:	18d3      	adds	r3, r2, r3
 801704e:	9312      	str	r3, [sp, #72]	; 0x48
 8017050:	2300      	movs	r3, #0
 8017052:	9806      	ldr	r0, [sp, #24]
 8017054:	9907      	ldr	r1, [sp, #28]
 8017056:	220a      	movs	r2, #10
 8017058:	f7e9 fa8c 	bl	8000574 <__aeabi_uldivmod>
 801705c:	9b07      	ldr	r3, [sp, #28]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d104      	bne.n	801706c <_svfprintf_r+0xcf8>
 8017062:	9b06      	ldr	r3, [sp, #24]
 8017064:	2b09      	cmp	r3, #9
 8017066:	d801      	bhi.n	801706c <_svfprintf_r+0xcf8>
 8017068:	f000 fbf6 	bl	8017858 <_svfprintf_r+0x14e4>
 801706c:	9006      	str	r0, [sp, #24]
 801706e:	9107      	str	r1, [sp, #28]
 8017070:	9808      	ldr	r0, [sp, #32]
 8017072:	e7bf      	b.n	8016ff4 <_svfprintf_r+0xc80>
 8017074:	200f      	movs	r0, #15
 8017076:	ab58      	add	r3, sp, #352	; 0x160
 8017078:	9308      	str	r3, [sp, #32]
 801707a:	9b08      	ldr	r3, [sp, #32]
 801707c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801707e:	3b01      	subs	r3, #1
 8017080:	9308      	str	r3, [sp, #32]
 8017082:	9b06      	ldr	r3, [sp, #24]
 8017084:	4003      	ands	r3, r0
 8017086:	5cd3      	ldrb	r3, [r2, r3]
 8017088:	9a08      	ldr	r2, [sp, #32]
 801708a:	7013      	strb	r3, [r2, #0]
 801708c:	9b07      	ldr	r3, [sp, #28]
 801708e:	0719      	lsls	r1, r3, #28
 8017090:	9b06      	ldr	r3, [sp, #24]
 8017092:	091a      	lsrs	r2, r3, #4
 8017094:	9b07      	ldr	r3, [sp, #28]
 8017096:	4311      	orrs	r1, r2
 8017098:	091b      	lsrs	r3, r3, #4
 801709a:	9307      	str	r3, [sp, #28]
 801709c:	000b      	movs	r3, r1
 801709e:	9a07      	ldr	r2, [sp, #28]
 80170a0:	9106      	str	r1, [sp, #24]
 80170a2:	4313      	orrs	r3, r2
 80170a4:	d1e9      	bne.n	801707a <_svfprintf_r+0xd06>
 80170a6:	e3d7      	b.n	8017858 <_svfprintf_r+0x14e4>
 80170a8:	aa58      	add	r2, sp, #352	; 0x160
 80170aa:	9208      	str	r2, [sp, #32]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d000      	beq.n	80170b2 <_svfprintf_r+0xd3e>
 80170b0:	e3d2      	b.n	8017858 <_svfprintf_r+0x14e4>
 80170b2:	07f3      	lsls	r3, r6, #31
 80170b4:	d400      	bmi.n	80170b8 <_svfprintf_r+0xd44>
 80170b6:	e3cf      	b.n	8017858 <_svfprintf_r+0x14e4>
 80170b8:	20e7      	movs	r0, #231	; 0xe7
 80170ba:	ab1e      	add	r3, sp, #120	; 0x78
 80170bc:	18c0      	adds	r0, r0, r3
 80170be:	2330      	movs	r3, #48	; 0x30
 80170c0:	e78e      	b.n	8016fe0 <_svfprintf_r+0xc6c>
 80170c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d100      	bne.n	80170ca <_svfprintf_r+0xd56>
 80170c8:	e38a      	b.n	80177e0 <_svfprintf_r+0x146c>
 80170ca:	221b      	movs	r2, #27
 80170cc:	a83f      	add	r0, sp, #252	; 0xfc
 80170ce:	7003      	strb	r3, [r0, #0]
 80170d0:	2300      	movs	r3, #0
 80170d2:	a91e      	add	r1, sp, #120	; 0x78
 80170d4:	1852      	adds	r2, r2, r1
 80170d6:	7013      	strb	r3, [r2, #0]
 80170d8:	940e      	str	r4, [sp, #56]	; 0x38
 80170da:	f7ff fab0 	bl	801663e <_svfprintf_r+0x2ca>
 80170de:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80170e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80170e2:	e587      	b.n	8016bf4 <_svfprintf_r+0x880>
 80170e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170e6:	e40f      	b.n	8016908 <_svfprintf_r+0x594>
 80170e8:	2010      	movs	r0, #16
 80170ea:	1812      	adds	r2, r2, r0
 80170ec:	6078      	str	r0, [r7, #4]
 80170ee:	922e      	str	r2, [sp, #184]	; 0xb8
 80170f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80170f2:	2b07      	cmp	r3, #7
 80170f4:	dd08      	ble.n	8017108 <_svfprintf_r+0xd94>
 80170f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80170fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80170fc:	f002 fbd4 	bl	80198a8 <__ssprint_r>
 8017100:	2800      	cmp	r0, #0
 8017102:	d000      	beq.n	8017106 <_svfprintf_r+0xd92>
 8017104:	e34b      	b.n	801779e <_svfprintf_r+0x142a>
 8017106:	a92f      	add	r1, sp, #188	; 0xbc
 8017108:	000f      	movs	r7, r1
 801710a:	3c10      	subs	r4, #16
 801710c:	f7ff fac3 	bl	8016696 <_svfprintf_r+0x322>
 8017110:	2010      	movs	r0, #16
 8017112:	1812      	adds	r2, r2, r0
 8017114:	6078      	str	r0, [r7, #4]
 8017116:	922e      	str	r2, [sp, #184]	; 0xb8
 8017118:	932d      	str	r3, [sp, #180]	; 0xb4
 801711a:	2b07      	cmp	r3, #7
 801711c:	dd08      	ble.n	8017130 <_svfprintf_r+0xdbc>
 801711e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017120:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017122:	aa2c      	add	r2, sp, #176	; 0xb0
 8017124:	f002 fbc0 	bl	80198a8 <__ssprint_r>
 8017128:	2800      	cmp	r0, #0
 801712a:	d000      	beq.n	801712e <_svfprintf_r+0xdba>
 801712c:	e337      	b.n	801779e <_svfprintf_r+0x142a>
 801712e:	a92f      	add	r1, sp, #188	; 0xbc
 8017130:	000f      	movs	r7, r1
 8017132:	3c10      	subs	r4, #16
 8017134:	f7ff fb0f 	bl	8016756 <_svfprintf_r+0x3e2>
 8017138:	2010      	movs	r0, #16
 801713a:	1812      	adds	r2, r2, r0
 801713c:	6078      	str	r0, [r7, #4]
 801713e:	922e      	str	r2, [sp, #184]	; 0xb8
 8017140:	932d      	str	r3, [sp, #180]	; 0xb4
 8017142:	2b07      	cmp	r3, #7
 8017144:	dd08      	ble.n	8017158 <_svfprintf_r+0xde4>
 8017146:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017148:	980a      	ldr	r0, [sp, #40]	; 0x28
 801714a:	aa2c      	add	r2, sp, #176	; 0xb0
 801714c:	f002 fbac 	bl	80198a8 <__ssprint_r>
 8017150:	2800      	cmp	r0, #0
 8017152:	d000      	beq.n	8017156 <_svfprintf_r+0xde2>
 8017154:	e323      	b.n	801779e <_svfprintf_r+0x142a>
 8017156:	a92f      	add	r1, sp, #188	; 0xbc
 8017158:	000f      	movs	r7, r1
 801715a:	3c10      	subs	r4, #16
 801715c:	f7ff fb1d 	bl	801679a <_svfprintf_r+0x426>
 8017160:	fffffbff 	.word	0xfffffbff
 8017164:	00007830 	.word	0x00007830
 8017168:	0801e6b8 	.word	0x0801e6b8
 801716c:	0801e6c9 	.word	0x0801e6c9
 8017170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017172:	2b65      	cmp	r3, #101	; 0x65
 8017174:	dc00      	bgt.n	8017178 <_svfprintf_r+0xe04>
 8017176:	e258      	b.n	801762a <_svfprintf_r+0x12b6>
 8017178:	9814      	ldr	r0, [sp, #80]	; 0x50
 801717a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801717c:	2200      	movs	r2, #0
 801717e:	2300      	movs	r3, #0
 8017180:	f7e9 f96c 	bl	800045c <__aeabi_dcmpeq>
 8017184:	2800      	cmp	r0, #0
 8017186:	d07c      	beq.n	8017282 <_svfprintf_r+0xf0e>
 8017188:	4b80      	ldr	r3, [pc, #512]	; (801738c <_svfprintf_r+0x1018>)
 801718a:	603b      	str	r3, [r7, #0]
 801718c:	2301      	movs	r3, #1
 801718e:	607b      	str	r3, [r7, #4]
 8017190:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017192:	3708      	adds	r7, #8
 8017194:	3301      	adds	r3, #1
 8017196:	932e      	str	r3, [sp, #184]	; 0xb8
 8017198:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801719a:	9308      	str	r3, [sp, #32]
 801719c:	3301      	adds	r3, #1
 801719e:	932d      	str	r3, [sp, #180]	; 0xb4
 80171a0:	2b07      	cmp	r3, #7
 80171a2:	dd08      	ble.n	80171b6 <_svfprintf_r+0xe42>
 80171a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80171a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80171a8:	aa2c      	add	r2, sp, #176	; 0xb0
 80171aa:	f002 fb7d 	bl	80198a8 <__ssprint_r>
 80171ae:	2800      	cmp	r0, #0
 80171b0:	d000      	beq.n	80171b4 <_svfprintf_r+0xe40>
 80171b2:	e2f4      	b.n	801779e <_svfprintf_r+0x142a>
 80171b4:	af2f      	add	r7, sp, #188	; 0xbc
 80171b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80171b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80171ba:	4293      	cmp	r3, r2
 80171bc:	db01      	blt.n	80171c2 <_svfprintf_r+0xe4e>
 80171be:	07f3      	lsls	r3, r6, #31
 80171c0:	d51d      	bpl.n	80171fe <_svfprintf_r+0xe8a>
 80171c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80171c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80171c6:	4694      	mov	ip, r2
 80171c8:	603b      	str	r3, [r7, #0]
 80171ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80171cc:	607b      	str	r3, [r7, #4]
 80171ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80171d0:	3708      	adds	r7, #8
 80171d2:	4463      	add	r3, ip
 80171d4:	932e      	str	r3, [sp, #184]	; 0xb8
 80171d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80171d8:	9308      	str	r3, [sp, #32]
 80171da:	3301      	adds	r3, #1
 80171dc:	932d      	str	r3, [sp, #180]	; 0xb4
 80171de:	2b07      	cmp	r3, #7
 80171e0:	dd08      	ble.n	80171f4 <_svfprintf_r+0xe80>
 80171e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80171e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80171e6:	aa2c      	add	r2, sp, #176	; 0xb0
 80171e8:	f002 fb5e 	bl	80198a8 <__ssprint_r>
 80171ec:	2800      	cmp	r0, #0
 80171ee:	d000      	beq.n	80171f2 <_svfprintf_r+0xe7e>
 80171f0:	e2d5      	b.n	801779e <_svfprintf_r+0x142a>
 80171f2:	af2f      	add	r7, sp, #188	; 0xbc
 80171f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171f6:	2510      	movs	r5, #16
 80171f8:	1e5c      	subs	r4, r3, #1
 80171fa:	2c00      	cmp	r4, #0
 80171fc:	dc2f      	bgt.n	801725e <_svfprintf_r+0xeea>
 80171fe:	0773      	lsls	r3, r6, #29
 8017200:	d500      	bpl.n	8017204 <_svfprintf_r+0xe90>
 8017202:	e2ae      	b.n	8017762 <_svfprintf_r+0x13ee>
 8017204:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017206:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017208:	4293      	cmp	r3, r2
 801720a:	da00      	bge.n	801720e <_svfprintf_r+0xe9a>
 801720c:	0013      	movs	r3, r2
 801720e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017210:	18d3      	adds	r3, r2, r3
 8017212:	9317      	str	r3, [sp, #92]	; 0x5c
 8017214:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017216:	9308      	str	r3, [sp, #32]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d007      	beq.n	801722c <_svfprintf_r+0xeb8>
 801721c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801721e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017220:	aa2c      	add	r2, sp, #176	; 0xb0
 8017222:	f002 fb41 	bl	80198a8 <__ssprint_r>
 8017226:	2800      	cmp	r0, #0
 8017228:	d000      	beq.n	801722c <_svfprintf_r+0xeb8>
 801722a:	e2b8      	b.n	801779e <_svfprintf_r+0x142a>
 801722c:	2300      	movs	r3, #0
 801722e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017232:	2b00      	cmp	r3, #0
 8017234:	d000      	beq.n	8017238 <_svfprintf_r+0xec4>
 8017236:	e2ce      	b.n	80177d6 <_svfprintf_r+0x1462>
 8017238:	af2f      	add	r7, sp, #188	; 0xbc
 801723a:	e5d8      	b.n	8016dee <_svfprintf_r+0xa7a>
 801723c:	3210      	adds	r2, #16
 801723e:	607d      	str	r5, [r7, #4]
 8017240:	922e      	str	r2, [sp, #184]	; 0xb8
 8017242:	932d      	str	r3, [sp, #180]	; 0xb4
 8017244:	2b07      	cmp	r3, #7
 8017246:	dd08      	ble.n	801725a <_svfprintf_r+0xee6>
 8017248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801724a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801724c:	aa2c      	add	r2, sp, #176	; 0xb0
 801724e:	f002 fb2b 	bl	80198a8 <__ssprint_r>
 8017252:	2800      	cmp	r0, #0
 8017254:	d000      	beq.n	8017258 <_svfprintf_r+0xee4>
 8017256:	e2a2      	b.n	801779e <_svfprintf_r+0x142a>
 8017258:	a92f      	add	r1, sp, #188	; 0xbc
 801725a:	000f      	movs	r7, r1
 801725c:	3c10      	subs	r4, #16
 801725e:	0039      	movs	r1, r7
 8017260:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017262:	484b      	ldr	r0, [pc, #300]	; (8017390 <_svfprintf_r+0x101c>)
 8017264:	9308      	str	r3, [sp, #32]
 8017266:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017268:	3301      	adds	r3, #1
 801726a:	3108      	adds	r1, #8
 801726c:	6038      	str	r0, [r7, #0]
 801726e:	2c10      	cmp	r4, #16
 8017270:	dce4      	bgt.n	801723c <_svfprintf_r+0xec8>
 8017272:	607c      	str	r4, [r7, #4]
 8017274:	18a4      	adds	r4, r4, r2
 8017276:	000f      	movs	r7, r1
 8017278:	942e      	str	r4, [sp, #184]	; 0xb8
 801727a:	932d      	str	r3, [sp, #180]	; 0xb4
 801727c:	2b07      	cmp	r3, #7
 801727e:	ddbe      	ble.n	80171fe <_svfprintf_r+0xe8a>
 8017280:	e067      	b.n	8017352 <_svfprintf_r+0xfde>
 8017282:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017284:	2b00      	cmp	r3, #0
 8017286:	dd00      	ble.n	801728a <_svfprintf_r+0xf16>
 8017288:	e084      	b.n	8017394 <_svfprintf_r+0x1020>
 801728a:	4b40      	ldr	r3, [pc, #256]	; (801738c <_svfprintf_r+0x1018>)
 801728c:	603b      	str	r3, [r7, #0]
 801728e:	2301      	movs	r3, #1
 8017290:	607b      	str	r3, [r7, #4]
 8017292:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017294:	3708      	adds	r7, #8
 8017296:	3301      	adds	r3, #1
 8017298:	932e      	str	r3, [sp, #184]	; 0xb8
 801729a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801729c:	9309      	str	r3, [sp, #36]	; 0x24
 801729e:	3301      	adds	r3, #1
 80172a0:	932d      	str	r3, [sp, #180]	; 0xb4
 80172a2:	2b07      	cmp	r3, #7
 80172a4:	dd08      	ble.n	80172b8 <_svfprintf_r+0xf44>
 80172a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80172a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80172aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80172ac:	f002 fafc 	bl	80198a8 <__ssprint_r>
 80172b0:	2800      	cmp	r0, #0
 80172b2:	d000      	beq.n	80172b6 <_svfprintf_r+0xf42>
 80172b4:	e273      	b.n	801779e <_svfprintf_r+0x142a>
 80172b6:	af2f      	add	r7, sp, #188	; 0xbc
 80172b8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80172ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172bc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80172be:	430b      	orrs	r3, r1
 80172c0:	2101      	movs	r1, #1
 80172c2:	4031      	ands	r1, r6
 80172c4:	430b      	orrs	r3, r1
 80172c6:	d09a      	beq.n	80171fe <_svfprintf_r+0xe8a>
 80172c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80172ca:	603b      	str	r3, [r7, #0]
 80172cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80172ce:	607b      	str	r3, [r7, #4]
 80172d0:	189a      	adds	r2, r3, r2
 80172d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80172d4:	922e      	str	r2, [sp, #184]	; 0xb8
 80172d6:	9309      	str	r3, [sp, #36]	; 0x24
 80172d8:	3301      	adds	r3, #1
 80172da:	932d      	str	r3, [sp, #180]	; 0xb4
 80172dc:	3708      	adds	r7, #8
 80172de:	2b07      	cmp	r3, #7
 80172e0:	dd08      	ble.n	80172f4 <_svfprintf_r+0xf80>
 80172e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80172e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80172e6:	aa2c      	add	r2, sp, #176	; 0xb0
 80172e8:	f002 fade 	bl	80198a8 <__ssprint_r>
 80172ec:	2800      	cmp	r0, #0
 80172ee:	d000      	beq.n	80172f2 <_svfprintf_r+0xf7e>
 80172f0:	e255      	b.n	801779e <_svfprintf_r+0x142a>
 80172f2:	af2f      	add	r7, sp, #188	; 0xbc
 80172f4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80172f6:	2c00      	cmp	r4, #0
 80172f8:	da1a      	bge.n	8017330 <_svfprintf_r+0xfbc>
 80172fa:	0039      	movs	r1, r7
 80172fc:	2510      	movs	r5, #16
 80172fe:	4264      	negs	r4, r4
 8017300:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017302:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8017304:	9309      	str	r3, [sp, #36]	; 0x24
 8017306:	1c5a      	adds	r2, r3, #1
 8017308:	4b21      	ldr	r3, [pc, #132]	; (8017390 <_svfprintf_r+0x101c>)
 801730a:	3708      	adds	r7, #8
 801730c:	600b      	str	r3, [r1, #0]
 801730e:	2c10      	cmp	r4, #16
 8017310:	dc29      	bgt.n	8017366 <_svfprintf_r+0xff2>
 8017312:	604c      	str	r4, [r1, #4]
 8017314:	1824      	adds	r4, r4, r0
 8017316:	942e      	str	r4, [sp, #184]	; 0xb8
 8017318:	922d      	str	r2, [sp, #180]	; 0xb4
 801731a:	2a07      	cmp	r2, #7
 801731c:	dd08      	ble.n	8017330 <_svfprintf_r+0xfbc>
 801731e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017320:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017322:	aa2c      	add	r2, sp, #176	; 0xb0
 8017324:	f002 fac0 	bl	80198a8 <__ssprint_r>
 8017328:	2800      	cmp	r0, #0
 801732a:	d000      	beq.n	801732e <_svfprintf_r+0xfba>
 801732c:	e237      	b.n	801779e <_svfprintf_r+0x142a>
 801732e:	af2f      	add	r7, sp, #188	; 0xbc
 8017330:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017332:	9b08      	ldr	r3, [sp, #32]
 8017334:	468c      	mov	ip, r1
 8017336:	603b      	str	r3, [r7, #0]
 8017338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801733a:	607b      	str	r3, [r7, #4]
 801733c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801733e:	4463      	add	r3, ip
 8017340:	932e      	str	r3, [sp, #184]	; 0xb8
 8017342:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017344:	1c5a      	adds	r2, r3, #1
 8017346:	9308      	str	r3, [sp, #32]
 8017348:	922d      	str	r2, [sp, #180]	; 0xb4
 801734a:	2a07      	cmp	r2, #7
 801734c:	dc01      	bgt.n	8017352 <_svfprintf_r+0xfde>
 801734e:	f7ff fa58 	bl	8016802 <_svfprintf_r+0x48e>
 8017352:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017354:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017356:	aa2c      	add	r2, sp, #176	; 0xb0
 8017358:	f002 faa6 	bl	80198a8 <__ssprint_r>
 801735c:	2800      	cmp	r0, #0
 801735e:	d000      	beq.n	8017362 <_svfprintf_r+0xfee>
 8017360:	e21d      	b.n	801779e <_svfprintf_r+0x142a>
 8017362:	af2f      	add	r7, sp, #188	; 0xbc
 8017364:	e74b      	b.n	80171fe <_svfprintf_r+0xe8a>
 8017366:	3010      	adds	r0, #16
 8017368:	604d      	str	r5, [r1, #4]
 801736a:	902e      	str	r0, [sp, #184]	; 0xb8
 801736c:	922d      	str	r2, [sp, #180]	; 0xb4
 801736e:	2a07      	cmp	r2, #7
 8017370:	dd08      	ble.n	8017384 <_svfprintf_r+0x1010>
 8017372:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017374:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017376:	aa2c      	add	r2, sp, #176	; 0xb0
 8017378:	f002 fa96 	bl	80198a8 <__ssprint_r>
 801737c:	2800      	cmp	r0, #0
 801737e:	d000      	beq.n	8017382 <_svfprintf_r+0x100e>
 8017380:	e20d      	b.n	801779e <_svfprintf_r+0x142a>
 8017382:	af2f      	add	r7, sp, #188	; 0xbc
 8017384:	0039      	movs	r1, r7
 8017386:	3c10      	subs	r4, #16
 8017388:	e7ba      	b.n	8017300 <_svfprintf_r+0xf8c>
 801738a:	46c0      	nop			; (mov r8, r8)
 801738c:	0801e6da 	.word	0x0801e6da
 8017390:	0801e6ec 	.word	0x0801e6ec
 8017394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017396:	002c      	movs	r4, r5
 8017398:	429d      	cmp	r5, r3
 801739a:	dd00      	ble.n	801739e <_svfprintf_r+0x102a>
 801739c:	001c      	movs	r4, r3
 801739e:	2c00      	cmp	r4, #0
 80173a0:	dd15      	ble.n	80173ce <_svfprintf_r+0x105a>
 80173a2:	9b08      	ldr	r3, [sp, #32]
 80173a4:	607c      	str	r4, [r7, #4]
 80173a6:	603b      	str	r3, [r7, #0]
 80173a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80173aa:	3708      	adds	r7, #8
 80173ac:	18e3      	adds	r3, r4, r3
 80173ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80173b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80173b2:	9309      	str	r3, [sp, #36]	; 0x24
 80173b4:	3301      	adds	r3, #1
 80173b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80173b8:	2b07      	cmp	r3, #7
 80173ba:	dd08      	ble.n	80173ce <_svfprintf_r+0x105a>
 80173bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80173be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80173c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80173c2:	f002 fa71 	bl	80198a8 <__ssprint_r>
 80173c6:	2800      	cmp	r0, #0
 80173c8:	d000      	beq.n	80173cc <_svfprintf_r+0x1058>
 80173ca:	e1e8      	b.n	801779e <_svfprintf_r+0x142a>
 80173cc:	af2f      	add	r7, sp, #188	; 0xbc
 80173ce:	43e3      	mvns	r3, r4
 80173d0:	17db      	asrs	r3, r3, #31
 80173d2:	401c      	ands	r4, r3
 80173d4:	1b2c      	subs	r4, r5, r4
 80173d6:	2c00      	cmp	r4, #0
 80173d8:	dd1a      	ble.n	8017410 <_svfprintf_r+0x109c>
 80173da:	0039      	movs	r1, r7
 80173dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80173de:	48ca      	ldr	r0, [pc, #808]	; (8017708 <_svfprintf_r+0x1394>)
 80173e0:	9309      	str	r3, [sp, #36]	; 0x24
 80173e2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80173e4:	3301      	adds	r3, #1
 80173e6:	3108      	adds	r1, #8
 80173e8:	6038      	str	r0, [r7, #0]
 80173ea:	2c10      	cmp	r4, #16
 80173ec:	dd00      	ble.n	80173f0 <_svfprintf_r+0x107c>
 80173ee:	e08a      	b.n	8017506 <_svfprintf_r+0x1192>
 80173f0:	607c      	str	r4, [r7, #4]
 80173f2:	18a4      	adds	r4, r4, r2
 80173f4:	000f      	movs	r7, r1
 80173f6:	942e      	str	r4, [sp, #184]	; 0xb8
 80173f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80173fa:	2b07      	cmp	r3, #7
 80173fc:	dd08      	ble.n	8017410 <_svfprintf_r+0x109c>
 80173fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017400:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017402:	aa2c      	add	r2, sp, #176	; 0xb0
 8017404:	f002 fa50 	bl	80198a8 <__ssprint_r>
 8017408:	2800      	cmp	r0, #0
 801740a:	d000      	beq.n	801740e <_svfprintf_r+0x109a>
 801740c:	e1c7      	b.n	801779e <_svfprintf_r+0x142a>
 801740e:	af2f      	add	r7, sp, #188	; 0xbc
 8017410:	9b08      	ldr	r3, [sp, #32]
 8017412:	195d      	adds	r5, r3, r5
 8017414:	0573      	lsls	r3, r6, #21
 8017416:	d50d      	bpl.n	8017434 <_svfprintf_r+0x10c0>
 8017418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801741a:	2b00      	cmp	r3, #0
 801741c:	d000      	beq.n	8017420 <_svfprintf_r+0x10ac>
 801741e:	e085      	b.n	801752c <_svfprintf_r+0x11b8>
 8017420:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017422:	2b00      	cmp	r3, #0
 8017424:	d000      	beq.n	8017428 <_svfprintf_r+0x10b4>
 8017426:	e084      	b.n	8017532 <_svfprintf_r+0x11be>
 8017428:	9b08      	ldr	r3, [sp, #32]
 801742a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801742c:	189b      	adds	r3, r3, r2
 801742e:	429d      	cmp	r5, r3
 8017430:	d900      	bls.n	8017434 <_svfprintf_r+0x10c0>
 8017432:	001d      	movs	r5, r3
 8017434:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017436:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017438:	4293      	cmp	r3, r2
 801743a:	db01      	blt.n	8017440 <_svfprintf_r+0x10cc>
 801743c:	07f3      	lsls	r3, r6, #31
 801743e:	d518      	bpl.n	8017472 <_svfprintf_r+0x10fe>
 8017440:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017442:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017444:	4694      	mov	ip, r2
 8017446:	603b      	str	r3, [r7, #0]
 8017448:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801744a:	607b      	str	r3, [r7, #4]
 801744c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801744e:	3708      	adds	r7, #8
 8017450:	4463      	add	r3, ip
 8017452:	932e      	str	r3, [sp, #184]	; 0xb8
 8017454:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017456:	9309      	str	r3, [sp, #36]	; 0x24
 8017458:	3301      	adds	r3, #1
 801745a:	932d      	str	r3, [sp, #180]	; 0xb4
 801745c:	2b07      	cmp	r3, #7
 801745e:	dd08      	ble.n	8017472 <_svfprintf_r+0x10fe>
 8017460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017462:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017464:	aa2c      	add	r2, sp, #176	; 0xb0
 8017466:	f002 fa1f 	bl	80198a8 <__ssprint_r>
 801746a:	2800      	cmp	r0, #0
 801746c:	d000      	beq.n	8017470 <_svfprintf_r+0x10fc>
 801746e:	e196      	b.n	801779e <_svfprintf_r+0x142a>
 8017470:	af2f      	add	r7, sp, #188	; 0xbc
 8017472:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017474:	9b08      	ldr	r3, [sp, #32]
 8017476:	4694      	mov	ip, r2
 8017478:	4463      	add	r3, ip
 801747a:	1b58      	subs	r0, r3, r5
 801747c:	0013      	movs	r3, r2
 801747e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017480:	1a9c      	subs	r4, r3, r2
 8017482:	4284      	cmp	r4, r0
 8017484:	dd00      	ble.n	8017488 <_svfprintf_r+0x1114>
 8017486:	0004      	movs	r4, r0
 8017488:	2c00      	cmp	r4, #0
 801748a:	dd14      	ble.n	80174b6 <_svfprintf_r+0x1142>
 801748c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801748e:	603d      	str	r5, [r7, #0]
 8017490:	18e3      	adds	r3, r4, r3
 8017492:	932e      	str	r3, [sp, #184]	; 0xb8
 8017494:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017496:	607c      	str	r4, [r7, #4]
 8017498:	9308      	str	r3, [sp, #32]
 801749a:	3301      	adds	r3, #1
 801749c:	932d      	str	r3, [sp, #180]	; 0xb4
 801749e:	3708      	adds	r7, #8
 80174a0:	2b07      	cmp	r3, #7
 80174a2:	dd08      	ble.n	80174b6 <_svfprintf_r+0x1142>
 80174a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80174a8:	aa2c      	add	r2, sp, #176	; 0xb0
 80174aa:	f002 f9fd 	bl	80198a8 <__ssprint_r>
 80174ae:	2800      	cmp	r0, #0
 80174b0:	d000      	beq.n	80174b4 <_svfprintf_r+0x1140>
 80174b2:	e174      	b.n	801779e <_svfprintf_r+0x142a>
 80174b4:	af2f      	add	r7, sp, #188	; 0xbc
 80174b6:	43e3      	mvns	r3, r4
 80174b8:	17db      	asrs	r3, r3, #31
 80174ba:	401c      	ands	r4, r3
 80174bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80174be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174c0:	2510      	movs	r5, #16
 80174c2:	1a9b      	subs	r3, r3, r2
 80174c4:	1b1c      	subs	r4, r3, r4
 80174c6:	2c00      	cmp	r4, #0
 80174c8:	dc00      	bgt.n	80174cc <_svfprintf_r+0x1158>
 80174ca:	e698      	b.n	80171fe <_svfprintf_r+0xe8a>
 80174cc:	0039      	movs	r1, r7
 80174ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80174d0:	488d      	ldr	r0, [pc, #564]	; (8017708 <_svfprintf_r+0x1394>)
 80174d2:	9308      	str	r3, [sp, #32]
 80174d4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80174d6:	3301      	adds	r3, #1
 80174d8:	3108      	adds	r1, #8
 80174da:	6038      	str	r0, [r7, #0]
 80174dc:	2c10      	cmp	r4, #16
 80174de:	dc00      	bgt.n	80174e2 <_svfprintf_r+0x116e>
 80174e0:	e6c7      	b.n	8017272 <_svfprintf_r+0xefe>
 80174e2:	3210      	adds	r2, #16
 80174e4:	607d      	str	r5, [r7, #4]
 80174e6:	922e      	str	r2, [sp, #184]	; 0xb8
 80174e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80174ea:	2b07      	cmp	r3, #7
 80174ec:	dd08      	ble.n	8017500 <_svfprintf_r+0x118c>
 80174ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80174f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80174f4:	f002 f9d8 	bl	80198a8 <__ssprint_r>
 80174f8:	2800      	cmp	r0, #0
 80174fa:	d000      	beq.n	80174fe <_svfprintf_r+0x118a>
 80174fc:	e14f      	b.n	801779e <_svfprintf_r+0x142a>
 80174fe:	a92f      	add	r1, sp, #188	; 0xbc
 8017500:	000f      	movs	r7, r1
 8017502:	3c10      	subs	r4, #16
 8017504:	e7e2      	b.n	80174cc <_svfprintf_r+0x1158>
 8017506:	2010      	movs	r0, #16
 8017508:	1812      	adds	r2, r2, r0
 801750a:	6078      	str	r0, [r7, #4]
 801750c:	922e      	str	r2, [sp, #184]	; 0xb8
 801750e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017510:	2b07      	cmp	r3, #7
 8017512:	dd08      	ble.n	8017526 <_svfprintf_r+0x11b2>
 8017514:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017516:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017518:	aa2c      	add	r2, sp, #176	; 0xb0
 801751a:	f002 f9c5 	bl	80198a8 <__ssprint_r>
 801751e:	2800      	cmp	r0, #0
 8017520:	d000      	beq.n	8017524 <_svfprintf_r+0x11b0>
 8017522:	e13c      	b.n	801779e <_svfprintf_r+0x142a>
 8017524:	a92f      	add	r1, sp, #188	; 0xbc
 8017526:	000f      	movs	r7, r1
 8017528:	3c10      	subs	r4, #16
 801752a:	e756      	b.n	80173da <_svfprintf_r+0x1066>
 801752c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801752e:	2b00      	cmp	r3, #0
 8017530:	d061      	beq.n	80175f6 <_svfprintf_r+0x1282>
 8017532:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017534:	3b01      	subs	r3, #1
 8017536:	9310      	str	r3, [sp, #64]	; 0x40
 8017538:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801753a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801753c:	4694      	mov	ip, r2
 801753e:	603b      	str	r3, [r7, #0]
 8017540:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017542:	607b      	str	r3, [r7, #4]
 8017544:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017546:	3708      	adds	r7, #8
 8017548:	4463      	add	r3, ip
 801754a:	932e      	str	r3, [sp, #184]	; 0xb8
 801754c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801754e:	9309      	str	r3, [sp, #36]	; 0x24
 8017550:	3301      	adds	r3, #1
 8017552:	932d      	str	r3, [sp, #180]	; 0xb4
 8017554:	2b07      	cmp	r3, #7
 8017556:	dd08      	ble.n	801756a <_svfprintf_r+0x11f6>
 8017558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801755a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801755c:	aa2c      	add	r2, sp, #176	; 0xb0
 801755e:	f002 f9a3 	bl	80198a8 <__ssprint_r>
 8017562:	2800      	cmp	r0, #0
 8017564:	d000      	beq.n	8017568 <_svfprintf_r+0x11f4>
 8017566:	e11a      	b.n	801779e <_svfprintf_r+0x142a>
 8017568:	af2f      	add	r7, sp, #188	; 0xbc
 801756a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801756c:	9b08      	ldr	r3, [sp, #32]
 801756e:	189b      	adds	r3, r3, r2
 8017570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017572:	1b5b      	subs	r3, r3, r5
 8017574:	7814      	ldrb	r4, [r2, #0]
 8017576:	429c      	cmp	r4, r3
 8017578:	dd00      	ble.n	801757c <_svfprintf_r+0x1208>
 801757a:	001c      	movs	r4, r3
 801757c:	2c00      	cmp	r4, #0
 801757e:	dd14      	ble.n	80175aa <_svfprintf_r+0x1236>
 8017580:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017582:	603d      	str	r5, [r7, #0]
 8017584:	18e3      	adds	r3, r4, r3
 8017586:	932e      	str	r3, [sp, #184]	; 0xb8
 8017588:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801758a:	607c      	str	r4, [r7, #4]
 801758c:	9309      	str	r3, [sp, #36]	; 0x24
 801758e:	3301      	adds	r3, #1
 8017590:	932d      	str	r3, [sp, #180]	; 0xb4
 8017592:	3708      	adds	r7, #8
 8017594:	2b07      	cmp	r3, #7
 8017596:	dd08      	ble.n	80175aa <_svfprintf_r+0x1236>
 8017598:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801759a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801759c:	aa2c      	add	r2, sp, #176	; 0xb0
 801759e:	f002 f983 	bl	80198a8 <__ssprint_r>
 80175a2:	2800      	cmp	r0, #0
 80175a4:	d000      	beq.n	80175a8 <_svfprintf_r+0x1234>
 80175a6:	e0fa      	b.n	801779e <_svfprintf_r+0x142a>
 80175a8:	af2f      	add	r7, sp, #188	; 0xbc
 80175aa:	43e3      	mvns	r3, r4
 80175ac:	17db      	asrs	r3, r3, #31
 80175ae:	401c      	ands	r4, r3
 80175b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80175b2:	781b      	ldrb	r3, [r3, #0]
 80175b4:	1b1c      	subs	r4, r3, r4
 80175b6:	2c00      	cmp	r4, #0
 80175b8:	dd19      	ble.n	80175ee <_svfprintf_r+0x127a>
 80175ba:	0039      	movs	r1, r7
 80175bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80175be:	4852      	ldr	r0, [pc, #328]	; (8017708 <_svfprintf_r+0x1394>)
 80175c0:	9309      	str	r3, [sp, #36]	; 0x24
 80175c2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80175c4:	3301      	adds	r3, #1
 80175c6:	3108      	adds	r1, #8
 80175c8:	6038      	str	r0, [r7, #0]
 80175ca:	2c10      	cmp	r4, #16
 80175cc:	dc1a      	bgt.n	8017604 <_svfprintf_r+0x1290>
 80175ce:	607c      	str	r4, [r7, #4]
 80175d0:	18a4      	adds	r4, r4, r2
 80175d2:	000f      	movs	r7, r1
 80175d4:	942e      	str	r4, [sp, #184]	; 0xb8
 80175d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80175d8:	2b07      	cmp	r3, #7
 80175da:	dd08      	ble.n	80175ee <_svfprintf_r+0x127a>
 80175dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80175de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80175e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80175e2:	f002 f961 	bl	80198a8 <__ssprint_r>
 80175e6:	2800      	cmp	r0, #0
 80175e8:	d000      	beq.n	80175ec <_svfprintf_r+0x1278>
 80175ea:	e0d8      	b.n	801779e <_svfprintf_r+0x142a>
 80175ec:	af2f      	add	r7, sp, #188	; 0xbc
 80175ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80175f0:	781b      	ldrb	r3, [r3, #0]
 80175f2:	18ed      	adds	r5, r5, r3
 80175f4:	e710      	b.n	8017418 <_svfprintf_r+0x10a4>
 80175f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80175f8:	3b01      	subs	r3, #1
 80175fa:	9312      	str	r3, [sp, #72]	; 0x48
 80175fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175fe:	3b01      	subs	r3, #1
 8017600:	9311      	str	r3, [sp, #68]	; 0x44
 8017602:	e799      	b.n	8017538 <_svfprintf_r+0x11c4>
 8017604:	2010      	movs	r0, #16
 8017606:	1812      	adds	r2, r2, r0
 8017608:	6078      	str	r0, [r7, #4]
 801760a:	922e      	str	r2, [sp, #184]	; 0xb8
 801760c:	932d      	str	r3, [sp, #180]	; 0xb4
 801760e:	2b07      	cmp	r3, #7
 8017610:	dd08      	ble.n	8017624 <_svfprintf_r+0x12b0>
 8017612:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017614:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017616:	aa2c      	add	r2, sp, #176	; 0xb0
 8017618:	f002 f946 	bl	80198a8 <__ssprint_r>
 801761c:	2800      	cmp	r0, #0
 801761e:	d000      	beq.n	8017622 <_svfprintf_r+0x12ae>
 8017620:	e0bd      	b.n	801779e <_svfprintf_r+0x142a>
 8017622:	a92f      	add	r1, sp, #188	; 0xbc
 8017624:	000f      	movs	r7, r1
 8017626:	3c10      	subs	r4, #16
 8017628:	e7c7      	b.n	80175ba <_svfprintf_r+0x1246>
 801762a:	003c      	movs	r4, r7
 801762c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801762e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017632:	9309      	str	r3, [sp, #36]	; 0x24
 8017634:	3101      	adds	r1, #1
 8017636:	3301      	adds	r3, #1
 8017638:	3408      	adds	r4, #8
 801763a:	2a01      	cmp	r2, #1
 801763c:	dc03      	bgt.n	8017646 <_svfprintf_r+0x12d2>
 801763e:	2201      	movs	r2, #1
 8017640:	4216      	tst	r6, r2
 8017642:	d100      	bne.n	8017646 <_svfprintf_r+0x12d2>
 8017644:	e088      	b.n	8017758 <_svfprintf_r+0x13e4>
 8017646:	9a08      	ldr	r2, [sp, #32]
 8017648:	912e      	str	r1, [sp, #184]	; 0xb8
 801764a:	603a      	str	r2, [r7, #0]
 801764c:	2201      	movs	r2, #1
 801764e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017650:	607a      	str	r2, [r7, #4]
 8017652:	2b07      	cmp	r3, #7
 8017654:	dd08      	ble.n	8017668 <_svfprintf_r+0x12f4>
 8017656:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017658:	980a      	ldr	r0, [sp, #40]	; 0x28
 801765a:	aa2c      	add	r2, sp, #176	; 0xb0
 801765c:	f002 f924 	bl	80198a8 <__ssprint_r>
 8017660:	2800      	cmp	r0, #0
 8017662:	d000      	beq.n	8017666 <_svfprintf_r+0x12f2>
 8017664:	e09b      	b.n	801779e <_svfprintf_r+0x142a>
 8017666:	ac2f      	add	r4, sp, #188	; 0xbc
 8017668:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801766a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801766c:	4694      	mov	ip, r2
 801766e:	6023      	str	r3, [r4, #0]
 8017670:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017672:	6063      	str	r3, [r4, #4]
 8017674:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017676:	3408      	adds	r4, #8
 8017678:	4463      	add	r3, ip
 801767a:	932e      	str	r3, [sp, #184]	; 0xb8
 801767c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801767e:	9309      	str	r3, [sp, #36]	; 0x24
 8017680:	3301      	adds	r3, #1
 8017682:	932d      	str	r3, [sp, #180]	; 0xb4
 8017684:	2b07      	cmp	r3, #7
 8017686:	dd08      	ble.n	801769a <_svfprintf_r+0x1326>
 8017688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801768a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801768c:	aa2c      	add	r2, sp, #176	; 0xb0
 801768e:	f002 f90b 	bl	80198a8 <__ssprint_r>
 8017692:	2800      	cmp	r0, #0
 8017694:	d000      	beq.n	8017698 <_svfprintf_r+0x1324>
 8017696:	e082      	b.n	801779e <_svfprintf_r+0x142a>
 8017698:	ac2f      	add	r4, sp, #188	; 0xbc
 801769a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801769c:	2200      	movs	r2, #0
 801769e:	9814      	ldr	r0, [sp, #80]	; 0x50
 80176a0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80176a2:	1e5d      	subs	r5, r3, #1
 80176a4:	2300      	movs	r3, #0
 80176a6:	f7e8 fed9 	bl	800045c <__aeabi_dcmpeq>
 80176aa:	2800      	cmp	r0, #0
 80176ac:	d12e      	bne.n	801770c <_svfprintf_r+0x1398>
 80176ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80176b0:	9808      	ldr	r0, [sp, #32]
 80176b2:	9309      	str	r3, [sp, #36]	; 0x24
 80176b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80176b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80176b8:	1c59      	adds	r1, r3, #1
 80176ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80176bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176be:	3001      	adds	r0, #1
 80176c0:	3b01      	subs	r3, #1
 80176c2:	189b      	adds	r3, r3, r2
 80176c4:	6020      	str	r0, [r4, #0]
 80176c6:	6065      	str	r5, [r4, #4]
 80176c8:	932e      	str	r3, [sp, #184]	; 0xb8
 80176ca:	912d      	str	r1, [sp, #180]	; 0xb4
 80176cc:	3408      	adds	r4, #8
 80176ce:	2907      	cmp	r1, #7
 80176d0:	dd07      	ble.n	80176e2 <_svfprintf_r+0x136e>
 80176d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80176d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80176d6:	aa2c      	add	r2, sp, #176	; 0xb0
 80176d8:	f002 f8e6 	bl	80198a8 <__ssprint_r>
 80176dc:	2800      	cmp	r0, #0
 80176de:	d15e      	bne.n	801779e <_svfprintf_r+0x142a>
 80176e0:	ac2f      	add	r4, sp, #188	; 0xbc
 80176e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80176e4:	ab28      	add	r3, sp, #160	; 0xa0
 80176e6:	4694      	mov	ip, r2
 80176e8:	6023      	str	r3, [r4, #0]
 80176ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80176ec:	6063      	str	r3, [r4, #4]
 80176ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80176f0:	4463      	add	r3, ip
 80176f2:	932e      	str	r3, [sp, #184]	; 0xb8
 80176f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80176f6:	9308      	str	r3, [sp, #32]
 80176f8:	3301      	adds	r3, #1
 80176fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80176fc:	2b07      	cmp	r3, #7
 80176fe:	dd00      	ble.n	8017702 <_svfprintf_r+0x138e>
 8017700:	e627      	b.n	8017352 <_svfprintf_r+0xfde>
 8017702:	3408      	adds	r4, #8
 8017704:	0027      	movs	r7, r4
 8017706:	e57a      	b.n	80171fe <_svfprintf_r+0xe8a>
 8017708:	0801e6ec 	.word	0x0801e6ec
 801770c:	2710      	movs	r7, #16
 801770e:	2d00      	cmp	r5, #0
 8017710:	dde7      	ble.n	80176e2 <_svfprintf_r+0x136e>
 8017712:	0021      	movs	r1, r4
 8017714:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017716:	4857      	ldr	r0, [pc, #348]	; (8017874 <_svfprintf_r+0x1500>)
 8017718:	9308      	str	r3, [sp, #32]
 801771a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801771c:	3301      	adds	r3, #1
 801771e:	3108      	adds	r1, #8
 8017720:	6020      	str	r0, [r4, #0]
 8017722:	2d10      	cmp	r5, #16
 8017724:	dc07      	bgt.n	8017736 <_svfprintf_r+0x13c2>
 8017726:	6065      	str	r5, [r4, #4]
 8017728:	000c      	movs	r4, r1
 801772a:	18ad      	adds	r5, r5, r2
 801772c:	952e      	str	r5, [sp, #184]	; 0xb8
 801772e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017730:	2b07      	cmp	r3, #7
 8017732:	ddd6      	ble.n	80176e2 <_svfprintf_r+0x136e>
 8017734:	e7cd      	b.n	80176d2 <_svfprintf_r+0x135e>
 8017736:	3210      	adds	r2, #16
 8017738:	6067      	str	r7, [r4, #4]
 801773a:	922e      	str	r2, [sp, #184]	; 0xb8
 801773c:	932d      	str	r3, [sp, #180]	; 0xb4
 801773e:	2b07      	cmp	r3, #7
 8017740:	dd07      	ble.n	8017752 <_svfprintf_r+0x13de>
 8017742:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017744:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017746:	aa2c      	add	r2, sp, #176	; 0xb0
 8017748:	f002 f8ae 	bl	80198a8 <__ssprint_r>
 801774c:	2800      	cmp	r0, #0
 801774e:	d126      	bne.n	801779e <_svfprintf_r+0x142a>
 8017750:	a92f      	add	r1, sp, #188	; 0xbc
 8017752:	000c      	movs	r4, r1
 8017754:	3d10      	subs	r5, #16
 8017756:	e7dc      	b.n	8017712 <_svfprintf_r+0x139e>
 8017758:	9808      	ldr	r0, [sp, #32]
 801775a:	912e      	str	r1, [sp, #184]	; 0xb8
 801775c:	c705      	stmia	r7!, {r0, r2}
 801775e:	932d      	str	r3, [sp, #180]	; 0xb4
 8017760:	e7e6      	b.n	8017730 <_svfprintf_r+0x13bc>
 8017762:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017764:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017766:	2510      	movs	r5, #16
 8017768:	1a9c      	subs	r4, r3, r2
 801776a:	2c00      	cmp	r4, #0
 801776c:	dc00      	bgt.n	8017770 <_svfprintf_r+0x13fc>
 801776e:	e549      	b.n	8017204 <_svfprintf_r+0xe90>
 8017770:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017772:	4941      	ldr	r1, [pc, #260]	; (8017878 <_svfprintf_r+0x1504>)
 8017774:	9308      	str	r3, [sp, #32]
 8017776:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017778:	3301      	adds	r3, #1
 801777a:	6039      	str	r1, [r7, #0]
 801777c:	2c10      	cmp	r4, #16
 801777e:	dc19      	bgt.n	80177b4 <_svfprintf_r+0x1440>
 8017780:	607c      	str	r4, [r7, #4]
 8017782:	1914      	adds	r4, r2, r4
 8017784:	942e      	str	r4, [sp, #184]	; 0xb8
 8017786:	932d      	str	r3, [sp, #180]	; 0xb4
 8017788:	2b07      	cmp	r3, #7
 801778a:	dc00      	bgt.n	801778e <_svfprintf_r+0x141a>
 801778c:	e53a      	b.n	8017204 <_svfprintf_r+0xe90>
 801778e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017790:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017792:	aa2c      	add	r2, sp, #176	; 0xb0
 8017794:	f002 f888 	bl	80198a8 <__ssprint_r>
 8017798:	2800      	cmp	r0, #0
 801779a:	d100      	bne.n	801779e <_svfprintf_r+0x142a>
 801779c:	e532      	b.n	8017204 <_svfprintf_r+0xe90>
 801779e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d101      	bne.n	80177a8 <_svfprintf_r+0x1434>
 80177a4:	f7ff f8ec 	bl	8016980 <_svfprintf_r+0x60c>
 80177a8:	0019      	movs	r1, r3
 80177aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80177ac:	f000 ff66 	bl	801867c <_free_r>
 80177b0:	f7ff f8e6 	bl	8016980 <_svfprintf_r+0x60c>
 80177b4:	3210      	adds	r2, #16
 80177b6:	607d      	str	r5, [r7, #4]
 80177b8:	922e      	str	r2, [sp, #184]	; 0xb8
 80177ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80177bc:	3708      	adds	r7, #8
 80177be:	2b07      	cmp	r3, #7
 80177c0:	dd07      	ble.n	80177d2 <_svfprintf_r+0x145e>
 80177c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80177c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80177c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80177c8:	f002 f86e 	bl	80198a8 <__ssprint_r>
 80177cc:	2800      	cmp	r0, #0
 80177ce:	d1e6      	bne.n	801779e <_svfprintf_r+0x142a>
 80177d0:	af2f      	add	r7, sp, #188	; 0xbc
 80177d2:	3c10      	subs	r4, #16
 80177d4:	e7cc      	b.n	8017770 <_svfprintf_r+0x13fc>
 80177d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80177d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80177da:	f000 ff4f 	bl	801867c <_free_r>
 80177de:	e52b      	b.n	8017238 <_svfprintf_r+0xec4>
 80177e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80177e2:	9306      	str	r3, [sp, #24]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d101      	bne.n	80177ec <_svfprintf_r+0x1478>
 80177e8:	f7ff f8ca 	bl	8016980 <_svfprintf_r+0x60c>
 80177ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80177ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80177f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80177f2:	f002 f859 	bl	80198a8 <__ssprint_r>
 80177f6:	f7ff f8c3 	bl	8016980 <_svfprintf_r+0x60c>
 80177fa:	0035      	movs	r5, r6
 80177fc:	2a00      	cmp	r2, #0
 80177fe:	d101      	bne.n	8017804 <_svfprintf_r+0x1490>
 8017800:	f7ff f832 	bl	8016868 <_svfprintf_r+0x4f4>
 8017804:	2b01      	cmp	r3, #1
 8017806:	d101      	bne.n	801780c <_svfprintf_r+0x1498>
 8017808:	f7ff fbdf 	bl	8016fca <_svfprintf_r+0xc56>
 801780c:	2b02      	cmp	r3, #2
 801780e:	d100      	bne.n	8017812 <_svfprintf_r+0x149e>
 8017810:	e430      	b.n	8017074 <_svfprintf_r+0xd00>
 8017812:	2607      	movs	r6, #7
 8017814:	ab58      	add	r3, sp, #352	; 0x160
 8017816:	9308      	str	r3, [sp, #32]
 8017818:	9908      	ldr	r1, [sp, #32]
 801781a:	000b      	movs	r3, r1
 801781c:	3b01      	subs	r3, #1
 801781e:	9308      	str	r3, [sp, #32]
 8017820:	9b06      	ldr	r3, [sp, #24]
 8017822:	9a08      	ldr	r2, [sp, #32]
 8017824:	4033      	ands	r3, r6
 8017826:	3330      	adds	r3, #48	; 0x30
 8017828:	7013      	strb	r3, [r2, #0]
 801782a:	9a07      	ldr	r2, [sp, #28]
 801782c:	0754      	lsls	r4, r2, #29
 801782e:	9a06      	ldr	r2, [sp, #24]
 8017830:	08d0      	lsrs	r0, r2, #3
 8017832:	9a07      	ldr	r2, [sp, #28]
 8017834:	4304      	orrs	r4, r0
 8017836:	08d2      	lsrs	r2, r2, #3
 8017838:	9207      	str	r2, [sp, #28]
 801783a:	0022      	movs	r2, r4
 801783c:	9807      	ldr	r0, [sp, #28]
 801783e:	9406      	str	r4, [sp, #24]
 8017840:	4302      	orrs	r2, r0
 8017842:	d1e9      	bne.n	8017818 <_svfprintf_r+0x14a4>
 8017844:	07ea      	lsls	r2, r5, #31
 8017846:	d507      	bpl.n	8017858 <_svfprintf_r+0x14e4>
 8017848:	2b30      	cmp	r3, #48	; 0x30
 801784a:	d005      	beq.n	8017858 <_svfprintf_r+0x14e4>
 801784c:	2330      	movs	r3, #48	; 0x30
 801784e:	9808      	ldr	r0, [sp, #32]
 8017850:	3801      	subs	r0, #1
 8017852:	7003      	strb	r3, [r0, #0]
 8017854:	1e8b      	subs	r3, r1, #2
 8017856:	9308      	str	r3, [sp, #32]
 8017858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801785a:	9a08      	ldr	r2, [sp, #32]
 801785c:	9319      	str	r3, [sp, #100]	; 0x64
 801785e:	ab58      	add	r3, sp, #352	; 0x160
 8017860:	1a9b      	subs	r3, r3, r2
 8017862:	9309      	str	r3, [sp, #36]	; 0x24
 8017864:	2300      	movs	r3, #0
 8017866:	002e      	movs	r6, r5
 8017868:	930c      	str	r3, [sp, #48]	; 0x30
 801786a:	001d      	movs	r5, r3
 801786c:	9310      	str	r3, [sp, #64]	; 0x40
 801786e:	9311      	str	r3, [sp, #68]	; 0x44
 8017870:	f7fe feee 	bl	8016650 <_svfprintf_r+0x2dc>
 8017874:	0801e6ec 	.word	0x0801e6ec
 8017878:	0801e6dc 	.word	0x0801e6dc

0801787c <sysconf>:
 801787c:	2380      	movs	r3, #128	; 0x80
 801787e:	b510      	push	{r4, lr}
 8017880:	015b      	lsls	r3, r3, #5
 8017882:	2808      	cmp	r0, #8
 8017884:	d004      	beq.n	8017890 <sysconf+0x14>
 8017886:	f000 fe8b 	bl	80185a0 <__errno>
 801788a:	2316      	movs	r3, #22
 801788c:	6003      	str	r3, [r0, #0]
 801788e:	3b17      	subs	r3, #23
 8017890:	0018      	movs	r0, r3
 8017892:	bd10      	pop	{r4, pc}

08017894 <register_fini>:
 8017894:	4b03      	ldr	r3, [pc, #12]	; (80178a4 <register_fini+0x10>)
 8017896:	b510      	push	{r4, lr}
 8017898:	2b00      	cmp	r3, #0
 801789a:	d002      	beq.n	80178a2 <register_fini+0xe>
 801789c:	4802      	ldr	r0, [pc, #8]	; (80178a8 <register_fini+0x14>)
 801789e:	f000 f805 	bl	80178ac <atexit>
 80178a2:	bd10      	pop	{r4, pc}
 80178a4:	00000000 	.word	0x00000000
 80178a8:	080185ad 	.word	0x080185ad

080178ac <atexit>:
 80178ac:	2300      	movs	r3, #0
 80178ae:	b510      	push	{r4, lr}
 80178b0:	0001      	movs	r1, r0
 80178b2:	001a      	movs	r2, r3
 80178b4:	0018      	movs	r0, r3
 80178b6:	f002 f885 	bl	80199c4 <__register_exitproc>
 80178ba:	bd10      	pop	{r4, pc}

080178bc <quorem>:
 80178bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178be:	0006      	movs	r6, r0
 80178c0:	690d      	ldr	r5, [r1, #16]
 80178c2:	6933      	ldr	r3, [r6, #16]
 80178c4:	b087      	sub	sp, #28
 80178c6:	2000      	movs	r0, #0
 80178c8:	9102      	str	r1, [sp, #8]
 80178ca:	42ab      	cmp	r3, r5
 80178cc:	db6b      	blt.n	80179a6 <quorem+0xea>
 80178ce:	000b      	movs	r3, r1
 80178d0:	3d01      	subs	r5, #1
 80178d2:	00ac      	lsls	r4, r5, #2
 80178d4:	3314      	adds	r3, #20
 80178d6:	9305      	str	r3, [sp, #20]
 80178d8:	191b      	adds	r3, r3, r4
 80178da:	9303      	str	r3, [sp, #12]
 80178dc:	0033      	movs	r3, r6
 80178de:	3314      	adds	r3, #20
 80178e0:	9301      	str	r3, [sp, #4]
 80178e2:	191c      	adds	r4, r3, r4
 80178e4:	9b03      	ldr	r3, [sp, #12]
 80178e6:	6827      	ldr	r7, [r4, #0]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	0038      	movs	r0, r7
 80178ec:	9300      	str	r3, [sp, #0]
 80178ee:	3301      	adds	r3, #1
 80178f0:	0019      	movs	r1, r3
 80178f2:	9304      	str	r3, [sp, #16]
 80178f4:	f7e8 fc2c 	bl	8000150 <__udivsi3>
 80178f8:	9b04      	ldr	r3, [sp, #16]
 80178fa:	9000      	str	r0, [sp, #0]
 80178fc:	429f      	cmp	r7, r3
 80178fe:	d329      	bcc.n	8017954 <quorem+0x98>
 8017900:	2300      	movs	r3, #0
 8017902:	469c      	mov	ip, r3
 8017904:	9801      	ldr	r0, [sp, #4]
 8017906:	9f05      	ldr	r7, [sp, #20]
 8017908:	9304      	str	r3, [sp, #16]
 801790a:	cf08      	ldmia	r7!, {r3}
 801790c:	9a00      	ldr	r2, [sp, #0]
 801790e:	b299      	uxth	r1, r3
 8017910:	4351      	muls	r1, r2
 8017912:	0c1b      	lsrs	r3, r3, #16
 8017914:	4353      	muls	r3, r2
 8017916:	4461      	add	r1, ip
 8017918:	0c0a      	lsrs	r2, r1, #16
 801791a:	189b      	adds	r3, r3, r2
 801791c:	0c1a      	lsrs	r2, r3, #16
 801791e:	9305      	str	r3, [sp, #20]
 8017920:	6803      	ldr	r3, [r0, #0]
 8017922:	4694      	mov	ip, r2
 8017924:	b29a      	uxth	r2, r3
 8017926:	9b04      	ldr	r3, [sp, #16]
 8017928:	b289      	uxth	r1, r1
 801792a:	18d2      	adds	r2, r2, r3
 801792c:	6803      	ldr	r3, [r0, #0]
 801792e:	1a52      	subs	r2, r2, r1
 8017930:	0c19      	lsrs	r1, r3, #16
 8017932:	466b      	mov	r3, sp
 8017934:	8a9b      	ldrh	r3, [r3, #20]
 8017936:	1acb      	subs	r3, r1, r3
 8017938:	1411      	asrs	r1, r2, #16
 801793a:	185b      	adds	r3, r3, r1
 801793c:	1419      	asrs	r1, r3, #16
 801793e:	b292      	uxth	r2, r2
 8017940:	041b      	lsls	r3, r3, #16
 8017942:	431a      	orrs	r2, r3
 8017944:	9b03      	ldr	r3, [sp, #12]
 8017946:	9104      	str	r1, [sp, #16]
 8017948:	c004      	stmia	r0!, {r2}
 801794a:	42bb      	cmp	r3, r7
 801794c:	d2dd      	bcs.n	801790a <quorem+0x4e>
 801794e:	6823      	ldr	r3, [r4, #0]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d02e      	beq.n	80179b2 <quorem+0xf6>
 8017954:	0030      	movs	r0, r6
 8017956:	9902      	ldr	r1, [sp, #8]
 8017958:	f001 fd76 	bl	8019448 <__mcmp>
 801795c:	2800      	cmp	r0, #0
 801795e:	db21      	blt.n	80179a4 <quorem+0xe8>
 8017960:	0030      	movs	r0, r6
 8017962:	2400      	movs	r4, #0
 8017964:	9b00      	ldr	r3, [sp, #0]
 8017966:	9902      	ldr	r1, [sp, #8]
 8017968:	3301      	adds	r3, #1
 801796a:	9300      	str	r3, [sp, #0]
 801796c:	3014      	adds	r0, #20
 801796e:	3114      	adds	r1, #20
 8017970:	6802      	ldr	r2, [r0, #0]
 8017972:	c908      	ldmia	r1!, {r3}
 8017974:	b292      	uxth	r2, r2
 8017976:	1914      	adds	r4, r2, r4
 8017978:	b29a      	uxth	r2, r3
 801797a:	1aa2      	subs	r2, r4, r2
 801797c:	6804      	ldr	r4, [r0, #0]
 801797e:	0c1b      	lsrs	r3, r3, #16
 8017980:	0c24      	lsrs	r4, r4, #16
 8017982:	1ae3      	subs	r3, r4, r3
 8017984:	1414      	asrs	r4, r2, #16
 8017986:	191b      	adds	r3, r3, r4
 8017988:	141c      	asrs	r4, r3, #16
 801798a:	b292      	uxth	r2, r2
 801798c:	041b      	lsls	r3, r3, #16
 801798e:	4313      	orrs	r3, r2
 8017990:	c008      	stmia	r0!, {r3}
 8017992:	9b03      	ldr	r3, [sp, #12]
 8017994:	428b      	cmp	r3, r1
 8017996:	d2eb      	bcs.n	8017970 <quorem+0xb4>
 8017998:	9a01      	ldr	r2, [sp, #4]
 801799a:	00ab      	lsls	r3, r5, #2
 801799c:	18d3      	adds	r3, r2, r3
 801799e:	681a      	ldr	r2, [r3, #0]
 80179a0:	2a00      	cmp	r2, #0
 80179a2:	d010      	beq.n	80179c6 <quorem+0x10a>
 80179a4:	9800      	ldr	r0, [sp, #0]
 80179a6:	b007      	add	sp, #28
 80179a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179aa:	6823      	ldr	r3, [r4, #0]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d104      	bne.n	80179ba <quorem+0xfe>
 80179b0:	3d01      	subs	r5, #1
 80179b2:	9b01      	ldr	r3, [sp, #4]
 80179b4:	3c04      	subs	r4, #4
 80179b6:	42a3      	cmp	r3, r4
 80179b8:	d3f7      	bcc.n	80179aa <quorem+0xee>
 80179ba:	6135      	str	r5, [r6, #16]
 80179bc:	e7ca      	b.n	8017954 <quorem+0x98>
 80179be:	681a      	ldr	r2, [r3, #0]
 80179c0:	2a00      	cmp	r2, #0
 80179c2:	d104      	bne.n	80179ce <quorem+0x112>
 80179c4:	3d01      	subs	r5, #1
 80179c6:	9a01      	ldr	r2, [sp, #4]
 80179c8:	3b04      	subs	r3, #4
 80179ca:	429a      	cmp	r2, r3
 80179cc:	d3f7      	bcc.n	80179be <quorem+0x102>
 80179ce:	6135      	str	r5, [r6, #16]
 80179d0:	e7e8      	b.n	80179a4 <quorem+0xe8>
	...

080179d4 <_dtoa_r>:
 80179d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179d6:	0014      	movs	r4, r2
 80179d8:	001d      	movs	r5, r3
 80179da:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80179dc:	b09d      	sub	sp, #116	; 0x74
 80179de:	940a      	str	r4, [sp, #40]	; 0x28
 80179e0:	950b      	str	r5, [sp, #44]	; 0x2c
 80179e2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80179e4:	9003      	str	r0, [sp, #12]
 80179e6:	2900      	cmp	r1, #0
 80179e8:	d009      	beq.n	80179fe <_dtoa_r+0x2a>
 80179ea:	2301      	movs	r3, #1
 80179ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80179ee:	4093      	lsls	r3, r2
 80179f0:	604a      	str	r2, [r1, #4]
 80179f2:	608b      	str	r3, [r1, #8]
 80179f4:	f001 face 	bl	8018f94 <_Bfree>
 80179f8:	2300      	movs	r3, #0
 80179fa:	9a03      	ldr	r2, [sp, #12]
 80179fc:	6413      	str	r3, [r2, #64]	; 0x40
 80179fe:	2d00      	cmp	r5, #0
 8017a00:	da1f      	bge.n	8017a42 <_dtoa_r+0x6e>
 8017a02:	2301      	movs	r3, #1
 8017a04:	6033      	str	r3, [r6, #0]
 8017a06:	006b      	lsls	r3, r5, #1
 8017a08:	085b      	lsrs	r3, r3, #1
 8017a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017a0e:	4bb9      	ldr	r3, [pc, #740]	; (8017cf4 <_dtoa_r+0x320>)
 8017a10:	003a      	movs	r2, r7
 8017a12:	9318      	str	r3, [sp, #96]	; 0x60
 8017a14:	401a      	ands	r2, r3
 8017a16:	429a      	cmp	r2, r3
 8017a18:	d116      	bne.n	8017a48 <_dtoa_r+0x74>
 8017a1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017a1c:	4bb6      	ldr	r3, [pc, #728]	; (8017cf8 <_dtoa_r+0x324>)
 8017a1e:	6013      	str	r3, [r2, #0]
 8017a20:	033a      	lsls	r2, r7, #12
 8017a22:	0b12      	lsrs	r2, r2, #12
 8017a24:	4314      	orrs	r4, r2
 8017a26:	d101      	bne.n	8017a2c <_dtoa_r+0x58>
 8017a28:	f000 fda4 	bl	8018574 <_dtoa_r+0xba0>
 8017a2c:	48b3      	ldr	r0, [pc, #716]	; (8017cfc <_dtoa_r+0x328>)
 8017a2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017a30:	9005      	str	r0, [sp, #20]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d002      	beq.n	8017a3c <_dtoa_r+0x68>
 8017a36:	4bb2      	ldr	r3, [pc, #712]	; (8017d00 <_dtoa_r+0x32c>)
 8017a38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017a3a:	6013      	str	r3, [r2, #0]
 8017a3c:	9805      	ldr	r0, [sp, #20]
 8017a3e:	b01d      	add	sp, #116	; 0x74
 8017a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a42:	2300      	movs	r3, #0
 8017a44:	6033      	str	r3, [r6, #0]
 8017a46:	e7e1      	b.n	8017a0c <_dtoa_r+0x38>
 8017a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a4c:	9210      	str	r2, [sp, #64]	; 0x40
 8017a4e:	9311      	str	r3, [sp, #68]	; 0x44
 8017a50:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017a52:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017a54:	2200      	movs	r2, #0
 8017a56:	2300      	movs	r3, #0
 8017a58:	f7e8 fd00 	bl	800045c <__aeabi_dcmpeq>
 8017a5c:	1e06      	subs	r6, r0, #0
 8017a5e:	d00b      	beq.n	8017a78 <_dtoa_r+0xa4>
 8017a60:	2301      	movs	r3, #1
 8017a62:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017a64:	6013      	str	r3, [r2, #0]
 8017a66:	4ba7      	ldr	r3, [pc, #668]	; (8017d04 <_dtoa_r+0x330>)
 8017a68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017a6a:	9305      	str	r3, [sp, #20]
 8017a6c:	2a00      	cmp	r2, #0
 8017a6e:	d0e5      	beq.n	8017a3c <_dtoa_r+0x68>
 8017a70:	4aa5      	ldr	r2, [pc, #660]	; (8017d08 <_dtoa_r+0x334>)
 8017a72:	9926      	ldr	r1, [sp, #152]	; 0x98
 8017a74:	600a      	str	r2, [r1, #0]
 8017a76:	e7e1      	b.n	8017a3c <_dtoa_r+0x68>
 8017a78:	ab1a      	add	r3, sp, #104	; 0x68
 8017a7a:	9301      	str	r3, [sp, #4]
 8017a7c:	ab1b      	add	r3, sp, #108	; 0x6c
 8017a7e:	9300      	str	r3, [sp, #0]
 8017a80:	9803      	ldr	r0, [sp, #12]
 8017a82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017a84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a86:	f001 fe07 	bl	8019698 <__d2b>
 8017a8a:	007b      	lsls	r3, r7, #1
 8017a8c:	9004      	str	r0, [sp, #16]
 8017a8e:	0d5b      	lsrs	r3, r3, #21
 8017a90:	d100      	bne.n	8017a94 <_dtoa_r+0xc0>
 8017a92:	e07c      	b.n	8017b8e <_dtoa_r+0x1ba>
 8017a94:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017a96:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017a98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017a9a:	4c9c      	ldr	r4, [pc, #624]	; (8017d0c <_dtoa_r+0x338>)
 8017a9c:	0312      	lsls	r2, r2, #12
 8017a9e:	0b12      	lsrs	r2, r2, #12
 8017aa0:	4314      	orrs	r4, r2
 8017aa2:	0021      	movs	r1, r4
 8017aa4:	4a9a      	ldr	r2, [pc, #616]	; (8017d10 <_dtoa_r+0x33c>)
 8017aa6:	9616      	str	r6, [sp, #88]	; 0x58
 8017aa8:	189f      	adds	r7, r3, r2
 8017aaa:	2200      	movs	r2, #0
 8017aac:	4b99      	ldr	r3, [pc, #612]	; (8017d14 <_dtoa_r+0x340>)
 8017aae:	f7ea ffe1 	bl	8002a74 <__aeabi_dsub>
 8017ab2:	4a99      	ldr	r2, [pc, #612]	; (8017d18 <_dtoa_r+0x344>)
 8017ab4:	4b99      	ldr	r3, [pc, #612]	; (8017d1c <_dtoa_r+0x348>)
 8017ab6:	f7ea fd71 	bl	800259c <__aeabi_dmul>
 8017aba:	4a99      	ldr	r2, [pc, #612]	; (8017d20 <_dtoa_r+0x34c>)
 8017abc:	4b99      	ldr	r3, [pc, #612]	; (8017d24 <_dtoa_r+0x350>)
 8017abe:	f7e9 fdfd 	bl	80016bc <__aeabi_dadd>
 8017ac2:	0004      	movs	r4, r0
 8017ac4:	0038      	movs	r0, r7
 8017ac6:	000d      	movs	r5, r1
 8017ac8:	f7eb fbba 	bl	8003240 <__aeabi_i2d>
 8017acc:	4a96      	ldr	r2, [pc, #600]	; (8017d28 <_dtoa_r+0x354>)
 8017ace:	4b97      	ldr	r3, [pc, #604]	; (8017d2c <_dtoa_r+0x358>)
 8017ad0:	f7ea fd64 	bl	800259c <__aeabi_dmul>
 8017ad4:	0002      	movs	r2, r0
 8017ad6:	000b      	movs	r3, r1
 8017ad8:	0020      	movs	r0, r4
 8017ada:	0029      	movs	r1, r5
 8017adc:	f7e9 fdee 	bl	80016bc <__aeabi_dadd>
 8017ae0:	0004      	movs	r4, r0
 8017ae2:	000d      	movs	r5, r1
 8017ae4:	f7eb fb76 	bl	80031d4 <__aeabi_d2iz>
 8017ae8:	2200      	movs	r2, #0
 8017aea:	9002      	str	r0, [sp, #8]
 8017aec:	2300      	movs	r3, #0
 8017aee:	0020      	movs	r0, r4
 8017af0:	0029      	movs	r1, r5
 8017af2:	f7e8 fcb9 	bl	8000468 <__aeabi_dcmplt>
 8017af6:	2800      	cmp	r0, #0
 8017af8:	d00b      	beq.n	8017b12 <_dtoa_r+0x13e>
 8017afa:	9802      	ldr	r0, [sp, #8]
 8017afc:	f7eb fba0 	bl	8003240 <__aeabi_i2d>
 8017b00:	002b      	movs	r3, r5
 8017b02:	0022      	movs	r2, r4
 8017b04:	f7e8 fcaa 	bl	800045c <__aeabi_dcmpeq>
 8017b08:	4243      	negs	r3, r0
 8017b0a:	4158      	adcs	r0, r3
 8017b0c:	9b02      	ldr	r3, [sp, #8]
 8017b0e:	1a1b      	subs	r3, r3, r0
 8017b10:	9302      	str	r3, [sp, #8]
 8017b12:	2301      	movs	r3, #1
 8017b14:	9314      	str	r3, [sp, #80]	; 0x50
 8017b16:	9b02      	ldr	r3, [sp, #8]
 8017b18:	2b16      	cmp	r3, #22
 8017b1a:	d80f      	bhi.n	8017b3c <_dtoa_r+0x168>
 8017b1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017b1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017b20:	00da      	lsls	r2, r3, #3
 8017b22:	4b83      	ldr	r3, [pc, #524]	; (8017d30 <_dtoa_r+0x35c>)
 8017b24:	189b      	adds	r3, r3, r2
 8017b26:	681a      	ldr	r2, [r3, #0]
 8017b28:	685b      	ldr	r3, [r3, #4]
 8017b2a:	f7e8 fc9d 	bl	8000468 <__aeabi_dcmplt>
 8017b2e:	2800      	cmp	r0, #0
 8017b30:	d049      	beq.n	8017bc6 <_dtoa_r+0x1f2>
 8017b32:	9b02      	ldr	r3, [sp, #8]
 8017b34:	3b01      	subs	r3, #1
 8017b36:	9302      	str	r3, [sp, #8]
 8017b38:	2300      	movs	r3, #0
 8017b3a:	9314      	str	r3, [sp, #80]	; 0x50
 8017b3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017b3e:	1bdf      	subs	r7, r3, r7
 8017b40:	2300      	movs	r3, #0
 8017b42:	9309      	str	r3, [sp, #36]	; 0x24
 8017b44:	003b      	movs	r3, r7
 8017b46:	3b01      	subs	r3, #1
 8017b48:	930d      	str	r3, [sp, #52]	; 0x34
 8017b4a:	d504      	bpl.n	8017b56 <_dtoa_r+0x182>
 8017b4c:	2301      	movs	r3, #1
 8017b4e:	1bdb      	subs	r3, r3, r7
 8017b50:	9309      	str	r3, [sp, #36]	; 0x24
 8017b52:	2300      	movs	r3, #0
 8017b54:	930d      	str	r3, [sp, #52]	; 0x34
 8017b56:	9b02      	ldr	r3, [sp, #8]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	db36      	blt.n	8017bca <_dtoa_r+0x1f6>
 8017b5c:	9a02      	ldr	r2, [sp, #8]
 8017b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b60:	4694      	mov	ip, r2
 8017b62:	4463      	add	r3, ip
 8017b64:	930d      	str	r3, [sp, #52]	; 0x34
 8017b66:	2300      	movs	r3, #0
 8017b68:	9213      	str	r2, [sp, #76]	; 0x4c
 8017b6a:	930e      	str	r3, [sp, #56]	; 0x38
 8017b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017b6e:	2401      	movs	r4, #1
 8017b70:	2b09      	cmp	r3, #9
 8017b72:	d865      	bhi.n	8017c40 <_dtoa_r+0x26c>
 8017b74:	2b05      	cmp	r3, #5
 8017b76:	dd02      	ble.n	8017b7e <_dtoa_r+0x1aa>
 8017b78:	2400      	movs	r4, #0
 8017b7a:	3b04      	subs	r3, #4
 8017b7c:	9322      	str	r3, [sp, #136]	; 0x88
 8017b7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017b80:	1e98      	subs	r0, r3, #2
 8017b82:	2803      	cmp	r0, #3
 8017b84:	d865      	bhi.n	8017c52 <_dtoa_r+0x27e>
 8017b86:	f7e8 facf 	bl	8000128 <__gnu_thumb1_case_uqi>
 8017b8a:	3629      	.short	0x3629
 8017b8c:	5934      	.short	0x5934
 8017b8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017b90:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017b92:	189e      	adds	r6, r3, r2
 8017b94:	4b67      	ldr	r3, [pc, #412]	; (8017d34 <_dtoa_r+0x360>)
 8017b96:	18f2      	adds	r2, r6, r3
 8017b98:	2a20      	cmp	r2, #32
 8017b9a:	dd0f      	ble.n	8017bbc <_dtoa_r+0x1e8>
 8017b9c:	2340      	movs	r3, #64	; 0x40
 8017b9e:	0038      	movs	r0, r7
 8017ba0:	1a9b      	subs	r3, r3, r2
 8017ba2:	4098      	lsls	r0, r3
 8017ba4:	4b64      	ldr	r3, [pc, #400]	; (8017d38 <_dtoa_r+0x364>)
 8017ba6:	18f3      	adds	r3, r6, r3
 8017ba8:	40dc      	lsrs	r4, r3
 8017baa:	4320      	orrs	r0, r4
 8017bac:	f7eb fb78 	bl	80032a0 <__aeabi_ui2d>
 8017bb0:	2301      	movs	r3, #1
 8017bb2:	4c62      	ldr	r4, [pc, #392]	; (8017d3c <_dtoa_r+0x368>)
 8017bb4:	1e77      	subs	r7, r6, #1
 8017bb6:	1909      	adds	r1, r1, r4
 8017bb8:	9316      	str	r3, [sp, #88]	; 0x58
 8017bba:	e776      	b.n	8017aaa <_dtoa_r+0xd6>
 8017bbc:	2320      	movs	r3, #32
 8017bbe:	0020      	movs	r0, r4
 8017bc0:	1a9b      	subs	r3, r3, r2
 8017bc2:	4098      	lsls	r0, r3
 8017bc4:	e7f2      	b.n	8017bac <_dtoa_r+0x1d8>
 8017bc6:	9014      	str	r0, [sp, #80]	; 0x50
 8017bc8:	e7b8      	b.n	8017b3c <_dtoa_r+0x168>
 8017bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bcc:	9a02      	ldr	r2, [sp, #8]
 8017bce:	1a9b      	subs	r3, r3, r2
 8017bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8017bd2:	4253      	negs	r3, r2
 8017bd4:	930e      	str	r3, [sp, #56]	; 0x38
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8017bda:	e7c7      	b.n	8017b6c <_dtoa_r+0x198>
 8017bdc:	2300      	movs	r3, #0
 8017bde:	9312      	str	r3, [sp, #72]	; 0x48
 8017be0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	dc39      	bgt.n	8017c5a <_dtoa_r+0x286>
 8017be6:	2301      	movs	r3, #1
 8017be8:	001a      	movs	r2, r3
 8017bea:	930c      	str	r3, [sp, #48]	; 0x30
 8017bec:	9308      	str	r3, [sp, #32]
 8017bee:	9223      	str	r2, [sp, #140]	; 0x8c
 8017bf0:	e00d      	b.n	8017c0e <_dtoa_r+0x23a>
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	e7f3      	b.n	8017bde <_dtoa_r+0x20a>
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017bfa:	9312      	str	r3, [sp, #72]	; 0x48
 8017bfc:	4694      	mov	ip, r2
 8017bfe:	9b02      	ldr	r3, [sp, #8]
 8017c00:	4463      	add	r3, ip
 8017c02:	930c      	str	r3, [sp, #48]	; 0x30
 8017c04:	3301      	adds	r3, #1
 8017c06:	9308      	str	r3, [sp, #32]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	dc00      	bgt.n	8017c0e <_dtoa_r+0x23a>
 8017c0c:	2301      	movs	r3, #1
 8017c0e:	2200      	movs	r2, #0
 8017c10:	9903      	ldr	r1, [sp, #12]
 8017c12:	644a      	str	r2, [r1, #68]	; 0x44
 8017c14:	3204      	adds	r2, #4
 8017c16:	0010      	movs	r0, r2
 8017c18:	9903      	ldr	r1, [sp, #12]
 8017c1a:	3014      	adds	r0, #20
 8017c1c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8017c1e:	4298      	cmp	r0, r3
 8017c20:	d91f      	bls.n	8017c62 <_dtoa_r+0x28e>
 8017c22:	9803      	ldr	r0, [sp, #12]
 8017c24:	f001 f98e 	bl	8018f44 <_Balloc>
 8017c28:	9005      	str	r0, [sp, #20]
 8017c2a:	2800      	cmp	r0, #0
 8017c2c:	d11e      	bne.n	8017c6c <_dtoa_r+0x298>
 8017c2e:	21d5      	movs	r1, #213	; 0xd5
 8017c30:	0002      	movs	r2, r0
 8017c32:	4b43      	ldr	r3, [pc, #268]	; (8017d40 <_dtoa_r+0x36c>)
 8017c34:	0049      	lsls	r1, r1, #1
 8017c36:	4843      	ldr	r0, [pc, #268]	; (8017d44 <_dtoa_r+0x370>)
 8017c38:	f001 ff06 	bl	8019a48 <__assert_func>
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	e7db      	b.n	8017bf8 <_dtoa_r+0x224>
 8017c40:	2300      	movs	r3, #0
 8017c42:	9412      	str	r4, [sp, #72]	; 0x48
 8017c44:	9322      	str	r3, [sp, #136]	; 0x88
 8017c46:	3b01      	subs	r3, #1
 8017c48:	930c      	str	r3, [sp, #48]	; 0x30
 8017c4a:	9308      	str	r3, [sp, #32]
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	3313      	adds	r3, #19
 8017c50:	e7cd      	b.n	8017bee <_dtoa_r+0x21a>
 8017c52:	2301      	movs	r3, #1
 8017c54:	9312      	str	r3, [sp, #72]	; 0x48
 8017c56:	3b02      	subs	r3, #2
 8017c58:	e7f6      	b.n	8017c48 <_dtoa_r+0x274>
 8017c5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8017c5e:	9308      	str	r3, [sp, #32]
 8017c60:	e7d5      	b.n	8017c0e <_dtoa_r+0x23a>
 8017c62:	9803      	ldr	r0, [sp, #12]
 8017c64:	3101      	adds	r1, #1
 8017c66:	6441      	str	r1, [r0, #68]	; 0x44
 8017c68:	0052      	lsls	r2, r2, #1
 8017c6a:	e7d4      	b.n	8017c16 <_dtoa_r+0x242>
 8017c6c:	9b03      	ldr	r3, [sp, #12]
 8017c6e:	9a05      	ldr	r2, [sp, #20]
 8017c70:	641a      	str	r2, [r3, #64]	; 0x40
 8017c72:	9b08      	ldr	r3, [sp, #32]
 8017c74:	2b0e      	cmp	r3, #14
 8017c76:	d900      	bls.n	8017c7a <_dtoa_r+0x2a6>
 8017c78:	e0df      	b.n	8017e3a <_dtoa_r+0x466>
 8017c7a:	2c00      	cmp	r4, #0
 8017c7c:	d100      	bne.n	8017c80 <_dtoa_r+0x2ac>
 8017c7e:	e0dc      	b.n	8017e3a <_dtoa_r+0x466>
 8017c80:	9b02      	ldr	r3, [sp, #8]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	dd62      	ble.n	8017d4c <_dtoa_r+0x378>
 8017c86:	001a      	movs	r2, r3
 8017c88:	210f      	movs	r1, #15
 8017c8a:	4b29      	ldr	r3, [pc, #164]	; (8017d30 <_dtoa_r+0x35c>)
 8017c8c:	400a      	ands	r2, r1
 8017c8e:	00d2      	lsls	r2, r2, #3
 8017c90:	189b      	adds	r3, r3, r2
 8017c92:	681d      	ldr	r5, [r3, #0]
 8017c94:	685e      	ldr	r6, [r3, #4]
 8017c96:	9b02      	ldr	r3, [sp, #8]
 8017c98:	2702      	movs	r7, #2
 8017c9a:	111c      	asrs	r4, r3, #4
 8017c9c:	05db      	lsls	r3, r3, #23
 8017c9e:	d50a      	bpl.n	8017cb6 <_dtoa_r+0x2e2>
 8017ca0:	4b29      	ldr	r3, [pc, #164]	; (8017d48 <_dtoa_r+0x374>)
 8017ca2:	400c      	ands	r4, r1
 8017ca4:	6a1a      	ldr	r2, [r3, #32]
 8017ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ca8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017caa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017cac:	f7ea f870 	bl	8001d90 <__aeabi_ddiv>
 8017cb0:	900a      	str	r0, [sp, #40]	; 0x28
 8017cb2:	910b      	str	r1, [sp, #44]	; 0x2c
 8017cb4:	3701      	adds	r7, #1
 8017cb6:	4b24      	ldr	r3, [pc, #144]	; (8017d48 <_dtoa_r+0x374>)
 8017cb8:	9306      	str	r3, [sp, #24]
 8017cba:	2c00      	cmp	r4, #0
 8017cbc:	d108      	bne.n	8017cd0 <_dtoa_r+0x2fc>
 8017cbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017cc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017cc2:	002a      	movs	r2, r5
 8017cc4:	0033      	movs	r3, r6
 8017cc6:	f7ea f863 	bl	8001d90 <__aeabi_ddiv>
 8017cca:	900a      	str	r0, [sp, #40]	; 0x28
 8017ccc:	910b      	str	r1, [sp, #44]	; 0x2c
 8017cce:	e058      	b.n	8017d82 <_dtoa_r+0x3ae>
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	421c      	tst	r4, r3
 8017cd4:	d009      	beq.n	8017cea <_dtoa_r+0x316>
 8017cd6:	18ff      	adds	r7, r7, r3
 8017cd8:	9b06      	ldr	r3, [sp, #24]
 8017cda:	0028      	movs	r0, r5
 8017cdc:	681a      	ldr	r2, [r3, #0]
 8017cde:	685b      	ldr	r3, [r3, #4]
 8017ce0:	0031      	movs	r1, r6
 8017ce2:	f7ea fc5b 	bl	800259c <__aeabi_dmul>
 8017ce6:	0005      	movs	r5, r0
 8017ce8:	000e      	movs	r6, r1
 8017cea:	9b06      	ldr	r3, [sp, #24]
 8017cec:	1064      	asrs	r4, r4, #1
 8017cee:	3308      	adds	r3, #8
 8017cf0:	e7e2      	b.n	8017cb8 <_dtoa_r+0x2e4>
 8017cf2:	46c0      	nop			; (mov r8, r8)
 8017cf4:	7ff00000 	.word	0x7ff00000
 8017cf8:	0000270f 	.word	0x0000270f
 8017cfc:	0801e6fc 	.word	0x0801e6fc
 8017d00:	0801e6ff 	.word	0x0801e6ff
 8017d04:	0801e6da 	.word	0x0801e6da
 8017d08:	0801e6db 	.word	0x0801e6db
 8017d0c:	3ff00000 	.word	0x3ff00000
 8017d10:	fffffc01 	.word	0xfffffc01
 8017d14:	3ff80000 	.word	0x3ff80000
 8017d18:	636f4361 	.word	0x636f4361
 8017d1c:	3fd287a7 	.word	0x3fd287a7
 8017d20:	8b60c8b3 	.word	0x8b60c8b3
 8017d24:	3fc68a28 	.word	0x3fc68a28
 8017d28:	509f79fb 	.word	0x509f79fb
 8017d2c:	3fd34413 	.word	0x3fd34413
 8017d30:	0801e880 	.word	0x0801e880
 8017d34:	00000432 	.word	0x00000432
 8017d38:	00000412 	.word	0x00000412
 8017d3c:	fe100000 	.word	0xfe100000
 8017d40:	0801e709 	.word	0x0801e709
 8017d44:	0801e71a 	.word	0x0801e71a
 8017d48:	0801e858 	.word	0x0801e858
 8017d4c:	9b02      	ldr	r3, [sp, #8]
 8017d4e:	2702      	movs	r7, #2
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d016      	beq.n	8017d82 <_dtoa_r+0x3ae>
 8017d54:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017d56:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017d58:	425c      	negs	r4, r3
 8017d5a:	230f      	movs	r3, #15
 8017d5c:	4ad4      	ldr	r2, [pc, #848]	; (80180b0 <_dtoa_r+0x6dc>)
 8017d5e:	4023      	ands	r3, r4
 8017d60:	00db      	lsls	r3, r3, #3
 8017d62:	18d3      	adds	r3, r2, r3
 8017d64:	681a      	ldr	r2, [r3, #0]
 8017d66:	685b      	ldr	r3, [r3, #4]
 8017d68:	f7ea fc18 	bl	800259c <__aeabi_dmul>
 8017d6c:	2601      	movs	r6, #1
 8017d6e:	2300      	movs	r3, #0
 8017d70:	900a      	str	r0, [sp, #40]	; 0x28
 8017d72:	910b      	str	r1, [sp, #44]	; 0x2c
 8017d74:	4dcf      	ldr	r5, [pc, #828]	; (80180b4 <_dtoa_r+0x6e0>)
 8017d76:	1124      	asrs	r4, r4, #4
 8017d78:	2c00      	cmp	r4, #0
 8017d7a:	d000      	beq.n	8017d7e <_dtoa_r+0x3aa>
 8017d7c:	e08d      	b.n	8017e9a <_dtoa_r+0x4c6>
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d1a3      	bne.n	8017cca <_dtoa_r+0x2f6>
 8017d82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d100      	bne.n	8017d8a <_dtoa_r+0x3b6>
 8017d88:	e092      	b.n	8017eb0 <_dtoa_r+0x4dc>
 8017d8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017d8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017d8e:	2200      	movs	r2, #0
 8017d90:	0020      	movs	r0, r4
 8017d92:	0029      	movs	r1, r5
 8017d94:	4bc8      	ldr	r3, [pc, #800]	; (80180b8 <_dtoa_r+0x6e4>)
 8017d96:	f7e8 fb67 	bl	8000468 <__aeabi_dcmplt>
 8017d9a:	2800      	cmp	r0, #0
 8017d9c:	d100      	bne.n	8017da0 <_dtoa_r+0x3cc>
 8017d9e:	e087      	b.n	8017eb0 <_dtoa_r+0x4dc>
 8017da0:	9b08      	ldr	r3, [sp, #32]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d100      	bne.n	8017da8 <_dtoa_r+0x3d4>
 8017da6:	e083      	b.n	8017eb0 <_dtoa_r+0x4dc>
 8017da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	dd41      	ble.n	8017e32 <_dtoa_r+0x45e>
 8017dae:	9b02      	ldr	r3, [sp, #8]
 8017db0:	2200      	movs	r2, #0
 8017db2:	3b01      	subs	r3, #1
 8017db4:	930f      	str	r3, [sp, #60]	; 0x3c
 8017db6:	0020      	movs	r0, r4
 8017db8:	0029      	movs	r1, r5
 8017dba:	4bc0      	ldr	r3, [pc, #768]	; (80180bc <_dtoa_r+0x6e8>)
 8017dbc:	f7ea fbee 	bl	800259c <__aeabi_dmul>
 8017dc0:	900a      	str	r0, [sp, #40]	; 0x28
 8017dc2:	910b      	str	r1, [sp, #44]	; 0x2c
 8017dc4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017dc6:	3701      	adds	r7, #1
 8017dc8:	0038      	movs	r0, r7
 8017dca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017dcc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017dce:	f7eb fa37 	bl	8003240 <__aeabi_i2d>
 8017dd2:	0022      	movs	r2, r4
 8017dd4:	002b      	movs	r3, r5
 8017dd6:	f7ea fbe1 	bl	800259c <__aeabi_dmul>
 8017dda:	2200      	movs	r2, #0
 8017ddc:	4bb8      	ldr	r3, [pc, #736]	; (80180c0 <_dtoa_r+0x6ec>)
 8017dde:	f7e9 fc6d 	bl	80016bc <__aeabi_dadd>
 8017de2:	900a      	str	r0, [sp, #40]	; 0x28
 8017de4:	910b      	str	r1, [sp, #44]	; 0x2c
 8017de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dea:	9206      	str	r2, [sp, #24]
 8017dec:	9307      	str	r3, [sp, #28]
 8017dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017df0:	4ab4      	ldr	r2, [pc, #720]	; (80180c4 <_dtoa_r+0x6f0>)
 8017df2:	189f      	adds	r7, r3, r2
 8017df4:	9707      	str	r7, [sp, #28]
 8017df6:	2e00      	cmp	r6, #0
 8017df8:	d15e      	bne.n	8017eb8 <_dtoa_r+0x4e4>
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	0020      	movs	r0, r4
 8017dfe:	0029      	movs	r1, r5
 8017e00:	4bb1      	ldr	r3, [pc, #708]	; (80180c8 <_dtoa_r+0x6f4>)
 8017e02:	f7ea fe37 	bl	8002a74 <__aeabi_dsub>
 8017e06:	003b      	movs	r3, r7
 8017e08:	9a06      	ldr	r2, [sp, #24]
 8017e0a:	0004      	movs	r4, r0
 8017e0c:	000d      	movs	r5, r1
 8017e0e:	f7e8 fb3f 	bl	8000490 <__aeabi_dcmpgt>
 8017e12:	2800      	cmp	r0, #0
 8017e14:	d000      	beq.n	8017e18 <_dtoa_r+0x444>
 8017e16:	e2aa      	b.n	801836e <_dtoa_r+0x99a>
 8017e18:	48ac      	ldr	r0, [pc, #688]	; (80180cc <_dtoa_r+0x6f8>)
 8017e1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017e1c:	4684      	mov	ip, r0
 8017e1e:	4461      	add	r1, ip
 8017e20:	000b      	movs	r3, r1
 8017e22:	0020      	movs	r0, r4
 8017e24:	0029      	movs	r1, r5
 8017e26:	9a06      	ldr	r2, [sp, #24]
 8017e28:	f7e8 fb1e 	bl	8000468 <__aeabi_dcmplt>
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	d000      	beq.n	8017e32 <_dtoa_r+0x45e>
 8017e30:	e29b      	b.n	801836a <_dtoa_r+0x996>
 8017e32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e34:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017e36:	930a      	str	r3, [sp, #40]	; 0x28
 8017e38:	940b      	str	r4, [sp, #44]	; 0x2c
 8017e3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	da00      	bge.n	8017e42 <_dtoa_r+0x46e>
 8017e40:	e16a      	b.n	8018118 <_dtoa_r+0x744>
 8017e42:	9a02      	ldr	r2, [sp, #8]
 8017e44:	2a0e      	cmp	r2, #14
 8017e46:	dd00      	ble.n	8017e4a <_dtoa_r+0x476>
 8017e48:	e166      	b.n	8018118 <_dtoa_r+0x744>
 8017e4a:	4b99      	ldr	r3, [pc, #612]	; (80180b0 <_dtoa_r+0x6dc>)
 8017e4c:	00d2      	lsls	r2, r2, #3
 8017e4e:	189b      	adds	r3, r3, r2
 8017e50:	681e      	ldr	r6, [r3, #0]
 8017e52:	685f      	ldr	r7, [r3, #4]
 8017e54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	db00      	blt.n	8017e5c <_dtoa_r+0x488>
 8017e5a:	e0d7      	b.n	801800c <_dtoa_r+0x638>
 8017e5c:	9b08      	ldr	r3, [sp, #32]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	dd00      	ble.n	8017e64 <_dtoa_r+0x490>
 8017e62:	e0d3      	b.n	801800c <_dtoa_r+0x638>
 8017e64:	d000      	beq.n	8017e68 <_dtoa_r+0x494>
 8017e66:	e27f      	b.n	8018368 <_dtoa_r+0x994>
 8017e68:	2200      	movs	r2, #0
 8017e6a:	0030      	movs	r0, r6
 8017e6c:	0039      	movs	r1, r7
 8017e6e:	4b96      	ldr	r3, [pc, #600]	; (80180c8 <_dtoa_r+0x6f4>)
 8017e70:	f7ea fb94 	bl	800259c <__aeabi_dmul>
 8017e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e78:	f7e8 fb14 	bl	80004a4 <__aeabi_dcmpge>
 8017e7c:	9e08      	ldr	r6, [sp, #32]
 8017e7e:	0037      	movs	r7, r6
 8017e80:	2800      	cmp	r0, #0
 8017e82:	d000      	beq.n	8017e86 <_dtoa_r+0x4b2>
 8017e84:	e256      	b.n	8018334 <_dtoa_r+0x960>
 8017e86:	9b05      	ldr	r3, [sp, #20]
 8017e88:	9a05      	ldr	r2, [sp, #20]
 8017e8a:	3301      	adds	r3, #1
 8017e8c:	9306      	str	r3, [sp, #24]
 8017e8e:	2331      	movs	r3, #49	; 0x31
 8017e90:	7013      	strb	r3, [r2, #0]
 8017e92:	9b02      	ldr	r3, [sp, #8]
 8017e94:	3301      	adds	r3, #1
 8017e96:	9302      	str	r3, [sp, #8]
 8017e98:	e251      	b.n	801833e <_dtoa_r+0x96a>
 8017e9a:	4234      	tst	r4, r6
 8017e9c:	d005      	beq.n	8017eaa <_dtoa_r+0x4d6>
 8017e9e:	682a      	ldr	r2, [r5, #0]
 8017ea0:	686b      	ldr	r3, [r5, #4]
 8017ea2:	f7ea fb7b 	bl	800259c <__aeabi_dmul>
 8017ea6:	0033      	movs	r3, r6
 8017ea8:	3701      	adds	r7, #1
 8017eaa:	1064      	asrs	r4, r4, #1
 8017eac:	3508      	adds	r5, #8
 8017eae:	e763      	b.n	8017d78 <_dtoa_r+0x3a4>
 8017eb0:	9b02      	ldr	r3, [sp, #8]
 8017eb2:	9e08      	ldr	r6, [sp, #32]
 8017eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8017eb6:	e787      	b.n	8017dc8 <_dtoa_r+0x3f4>
 8017eb8:	4b7d      	ldr	r3, [pc, #500]	; (80180b0 <_dtoa_r+0x6dc>)
 8017eba:	1e72      	subs	r2, r6, #1
 8017ebc:	00d2      	lsls	r2, r2, #3
 8017ebe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017ec0:	189b      	adds	r3, r3, r2
 8017ec2:	681a      	ldr	r2, [r3, #0]
 8017ec4:	685b      	ldr	r3, [r3, #4]
 8017ec6:	2900      	cmp	r1, #0
 8017ec8:	d04e      	beq.n	8017f68 <_dtoa_r+0x594>
 8017eca:	2000      	movs	r0, #0
 8017ecc:	4980      	ldr	r1, [pc, #512]	; (80180d0 <_dtoa_r+0x6fc>)
 8017ece:	f7e9 ff5f 	bl	8001d90 <__aeabi_ddiv>
 8017ed2:	9a06      	ldr	r2, [sp, #24]
 8017ed4:	9b07      	ldr	r3, [sp, #28]
 8017ed6:	f7ea fdcd 	bl	8002a74 <__aeabi_dsub>
 8017eda:	9b05      	ldr	r3, [sp, #20]
 8017edc:	900a      	str	r0, [sp, #40]	; 0x28
 8017ede:	910b      	str	r1, [sp, #44]	; 0x2c
 8017ee0:	9315      	str	r3, [sp, #84]	; 0x54
 8017ee2:	18f3      	adds	r3, r6, r3
 8017ee4:	9319      	str	r3, [sp, #100]	; 0x64
 8017ee6:	0020      	movs	r0, r4
 8017ee8:	0029      	movs	r1, r5
 8017eea:	f7eb f973 	bl	80031d4 <__aeabi_d2iz>
 8017eee:	9017      	str	r0, [sp, #92]	; 0x5c
 8017ef0:	f7eb f9a6 	bl	8003240 <__aeabi_i2d>
 8017ef4:	0002      	movs	r2, r0
 8017ef6:	000b      	movs	r3, r1
 8017ef8:	0020      	movs	r0, r4
 8017efa:	0029      	movs	r1, r5
 8017efc:	f7ea fdba 	bl	8002a74 <__aeabi_dsub>
 8017f00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f02:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017f04:	3301      	adds	r3, #1
 8017f06:	9306      	str	r3, [sp, #24]
 8017f08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f0a:	3430      	adds	r4, #48	; 0x30
 8017f0c:	701c      	strb	r4, [r3, #0]
 8017f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f12:	0006      	movs	r6, r0
 8017f14:	000f      	movs	r7, r1
 8017f16:	f7e8 faa7 	bl	8000468 <__aeabi_dcmplt>
 8017f1a:	2800      	cmp	r0, #0
 8017f1c:	d16c      	bne.n	8017ff8 <_dtoa_r+0x624>
 8017f1e:	0032      	movs	r2, r6
 8017f20:	003b      	movs	r3, r7
 8017f22:	2000      	movs	r0, #0
 8017f24:	4964      	ldr	r1, [pc, #400]	; (80180b8 <_dtoa_r+0x6e4>)
 8017f26:	f7ea fda5 	bl	8002a74 <__aeabi_dsub>
 8017f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f2e:	f7e8 fa9b 	bl	8000468 <__aeabi_dcmplt>
 8017f32:	2800      	cmp	r0, #0
 8017f34:	d000      	beq.n	8017f38 <_dtoa_r+0x564>
 8017f36:	e0cf      	b.n	80180d8 <_dtoa_r+0x704>
 8017f38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017f3a:	9a06      	ldr	r2, [sp, #24]
 8017f3c:	4293      	cmp	r3, r2
 8017f3e:	d100      	bne.n	8017f42 <_dtoa_r+0x56e>
 8017f40:	e777      	b.n	8017e32 <_dtoa_r+0x45e>
 8017f42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017f46:	2200      	movs	r2, #0
 8017f48:	4b5c      	ldr	r3, [pc, #368]	; (80180bc <_dtoa_r+0x6e8>)
 8017f4a:	f7ea fb27 	bl	800259c <__aeabi_dmul>
 8017f4e:	4b5b      	ldr	r3, [pc, #364]	; (80180bc <_dtoa_r+0x6e8>)
 8017f50:	900a      	str	r0, [sp, #40]	; 0x28
 8017f52:	910b      	str	r1, [sp, #44]	; 0x2c
 8017f54:	2200      	movs	r2, #0
 8017f56:	0030      	movs	r0, r6
 8017f58:	0039      	movs	r1, r7
 8017f5a:	f7ea fb1f 	bl	800259c <__aeabi_dmul>
 8017f5e:	9b06      	ldr	r3, [sp, #24]
 8017f60:	0004      	movs	r4, r0
 8017f62:	000d      	movs	r5, r1
 8017f64:	9315      	str	r3, [sp, #84]	; 0x54
 8017f66:	e7be      	b.n	8017ee6 <_dtoa_r+0x512>
 8017f68:	9806      	ldr	r0, [sp, #24]
 8017f6a:	9907      	ldr	r1, [sp, #28]
 8017f6c:	f7ea fb16 	bl	800259c <__aeabi_dmul>
 8017f70:	9f05      	ldr	r7, [sp, #20]
 8017f72:	900a      	str	r0, [sp, #40]	; 0x28
 8017f74:	910b      	str	r1, [sp, #44]	; 0x2c
 8017f76:	19bb      	adds	r3, r7, r6
 8017f78:	9315      	str	r3, [sp, #84]	; 0x54
 8017f7a:	0029      	movs	r1, r5
 8017f7c:	0020      	movs	r0, r4
 8017f7e:	f7eb f929 	bl	80031d4 <__aeabi_d2iz>
 8017f82:	9006      	str	r0, [sp, #24]
 8017f84:	f7eb f95c 	bl	8003240 <__aeabi_i2d>
 8017f88:	000b      	movs	r3, r1
 8017f8a:	0002      	movs	r2, r0
 8017f8c:	0029      	movs	r1, r5
 8017f8e:	0020      	movs	r0, r4
 8017f90:	f7ea fd70 	bl	8002a74 <__aeabi_dsub>
 8017f94:	9b06      	ldr	r3, [sp, #24]
 8017f96:	0004      	movs	r4, r0
 8017f98:	3330      	adds	r3, #48	; 0x30
 8017f9a:	703b      	strb	r3, [r7, #0]
 8017f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f9e:	3701      	adds	r7, #1
 8017fa0:	000d      	movs	r5, r1
 8017fa2:	429f      	cmp	r7, r3
 8017fa4:	d12b      	bne.n	8017ffe <_dtoa_r+0x62a>
 8017fa6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017fa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017faa:	9b05      	ldr	r3, [sp, #20]
 8017fac:	2200      	movs	r2, #0
 8017fae:	199b      	adds	r3, r3, r6
 8017fb0:	9306      	str	r3, [sp, #24]
 8017fb2:	4b47      	ldr	r3, [pc, #284]	; (80180d0 <_dtoa_r+0x6fc>)
 8017fb4:	f7e9 fb82 	bl	80016bc <__aeabi_dadd>
 8017fb8:	0002      	movs	r2, r0
 8017fba:	000b      	movs	r3, r1
 8017fbc:	0020      	movs	r0, r4
 8017fbe:	0029      	movs	r1, r5
 8017fc0:	f7e8 fa66 	bl	8000490 <__aeabi_dcmpgt>
 8017fc4:	2800      	cmp	r0, #0
 8017fc6:	d000      	beq.n	8017fca <_dtoa_r+0x5f6>
 8017fc8:	e086      	b.n	80180d8 <_dtoa_r+0x704>
 8017fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fce:	2000      	movs	r0, #0
 8017fd0:	493f      	ldr	r1, [pc, #252]	; (80180d0 <_dtoa_r+0x6fc>)
 8017fd2:	f7ea fd4f 	bl	8002a74 <__aeabi_dsub>
 8017fd6:	0002      	movs	r2, r0
 8017fd8:	000b      	movs	r3, r1
 8017fda:	0020      	movs	r0, r4
 8017fdc:	0029      	movs	r1, r5
 8017fde:	f7e8 fa43 	bl	8000468 <__aeabi_dcmplt>
 8017fe2:	2800      	cmp	r0, #0
 8017fe4:	d100      	bne.n	8017fe8 <_dtoa_r+0x614>
 8017fe6:	e724      	b.n	8017e32 <_dtoa_r+0x45e>
 8017fe8:	9b06      	ldr	r3, [sp, #24]
 8017fea:	001a      	movs	r2, r3
 8017fec:	3a01      	subs	r2, #1
 8017fee:	9206      	str	r2, [sp, #24]
 8017ff0:	7812      	ldrb	r2, [r2, #0]
 8017ff2:	2a30      	cmp	r2, #48	; 0x30
 8017ff4:	d0f8      	beq.n	8017fe8 <_dtoa_r+0x614>
 8017ff6:	9306      	str	r3, [sp, #24]
 8017ff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ffa:	9302      	str	r3, [sp, #8]
 8017ffc:	e046      	b.n	801808c <_dtoa_r+0x6b8>
 8017ffe:	2200      	movs	r2, #0
 8018000:	4b2e      	ldr	r3, [pc, #184]	; (80180bc <_dtoa_r+0x6e8>)
 8018002:	f7ea facb 	bl	800259c <__aeabi_dmul>
 8018006:	0004      	movs	r4, r0
 8018008:	000d      	movs	r5, r1
 801800a:	e7b6      	b.n	8017f7a <_dtoa_r+0x5a6>
 801800c:	9b05      	ldr	r3, [sp, #20]
 801800e:	9a05      	ldr	r2, [sp, #20]
 8018010:	9309      	str	r3, [sp, #36]	; 0x24
 8018012:	9b08      	ldr	r3, [sp, #32]
 8018014:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018016:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8018018:	3b01      	subs	r3, #1
 801801a:	189b      	adds	r3, r3, r2
 801801c:	930a      	str	r3, [sp, #40]	; 0x28
 801801e:	0032      	movs	r2, r6
 8018020:	003b      	movs	r3, r7
 8018022:	0020      	movs	r0, r4
 8018024:	0029      	movs	r1, r5
 8018026:	f7e9 feb3 	bl	8001d90 <__aeabi_ddiv>
 801802a:	f7eb f8d3 	bl	80031d4 <__aeabi_d2iz>
 801802e:	9008      	str	r0, [sp, #32]
 8018030:	f7eb f906 	bl	8003240 <__aeabi_i2d>
 8018034:	0032      	movs	r2, r6
 8018036:	003b      	movs	r3, r7
 8018038:	f7ea fab0 	bl	800259c <__aeabi_dmul>
 801803c:	0002      	movs	r2, r0
 801803e:	000b      	movs	r3, r1
 8018040:	0020      	movs	r0, r4
 8018042:	0029      	movs	r1, r5
 8018044:	f7ea fd16 	bl	8002a74 <__aeabi_dsub>
 8018048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801804a:	001a      	movs	r2, r3
 801804c:	3201      	adds	r2, #1
 801804e:	9209      	str	r2, [sp, #36]	; 0x24
 8018050:	9206      	str	r2, [sp, #24]
 8018052:	9a08      	ldr	r2, [sp, #32]
 8018054:	3230      	adds	r2, #48	; 0x30
 8018056:	701a      	strb	r2, [r3, #0]
 8018058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801805a:	429a      	cmp	r2, r3
 801805c:	d14f      	bne.n	80180fe <_dtoa_r+0x72a>
 801805e:	0002      	movs	r2, r0
 8018060:	000b      	movs	r3, r1
 8018062:	f7e9 fb2b 	bl	80016bc <__aeabi_dadd>
 8018066:	0032      	movs	r2, r6
 8018068:	003b      	movs	r3, r7
 801806a:	0004      	movs	r4, r0
 801806c:	000d      	movs	r5, r1
 801806e:	f7e8 fa0f 	bl	8000490 <__aeabi_dcmpgt>
 8018072:	2800      	cmp	r0, #0
 8018074:	d12e      	bne.n	80180d4 <_dtoa_r+0x700>
 8018076:	0032      	movs	r2, r6
 8018078:	003b      	movs	r3, r7
 801807a:	0020      	movs	r0, r4
 801807c:	0029      	movs	r1, r5
 801807e:	f7e8 f9ed 	bl	800045c <__aeabi_dcmpeq>
 8018082:	2800      	cmp	r0, #0
 8018084:	d002      	beq.n	801808c <_dtoa_r+0x6b8>
 8018086:	9b08      	ldr	r3, [sp, #32]
 8018088:	07db      	lsls	r3, r3, #31
 801808a:	d423      	bmi.n	80180d4 <_dtoa_r+0x700>
 801808c:	9803      	ldr	r0, [sp, #12]
 801808e:	9904      	ldr	r1, [sp, #16]
 8018090:	f000 ff80 	bl	8018f94 <_Bfree>
 8018094:	2300      	movs	r3, #0
 8018096:	9a06      	ldr	r2, [sp, #24]
 8018098:	9802      	ldr	r0, [sp, #8]
 801809a:	7013      	strb	r3, [r2, #0]
 801809c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801809e:	3001      	adds	r0, #1
 80180a0:	6018      	str	r0, [r3, #0]
 80180a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d100      	bne.n	80180aa <_dtoa_r+0x6d6>
 80180a8:	e4c8      	b.n	8017a3c <_dtoa_r+0x68>
 80180aa:	601a      	str	r2, [r3, #0]
 80180ac:	e4c6      	b.n	8017a3c <_dtoa_r+0x68>
 80180ae:	46c0      	nop			; (mov r8, r8)
 80180b0:	0801e880 	.word	0x0801e880
 80180b4:	0801e858 	.word	0x0801e858
 80180b8:	3ff00000 	.word	0x3ff00000
 80180bc:	40240000 	.word	0x40240000
 80180c0:	401c0000 	.word	0x401c0000
 80180c4:	fcc00000 	.word	0xfcc00000
 80180c8:	40140000 	.word	0x40140000
 80180cc:	7cc00000 	.word	0x7cc00000
 80180d0:	3fe00000 	.word	0x3fe00000
 80180d4:	9b02      	ldr	r3, [sp, #8]
 80180d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80180d8:	9b06      	ldr	r3, [sp, #24]
 80180da:	9306      	str	r3, [sp, #24]
 80180dc:	3b01      	subs	r3, #1
 80180de:	781a      	ldrb	r2, [r3, #0]
 80180e0:	2a39      	cmp	r2, #57	; 0x39
 80180e2:	d108      	bne.n	80180f6 <_dtoa_r+0x722>
 80180e4:	9a05      	ldr	r2, [sp, #20]
 80180e6:	429a      	cmp	r2, r3
 80180e8:	d1f7      	bne.n	80180da <_dtoa_r+0x706>
 80180ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80180ec:	9905      	ldr	r1, [sp, #20]
 80180ee:	3201      	adds	r2, #1
 80180f0:	920f      	str	r2, [sp, #60]	; 0x3c
 80180f2:	2230      	movs	r2, #48	; 0x30
 80180f4:	700a      	strb	r2, [r1, #0]
 80180f6:	781a      	ldrb	r2, [r3, #0]
 80180f8:	3201      	adds	r2, #1
 80180fa:	701a      	strb	r2, [r3, #0]
 80180fc:	e77c      	b.n	8017ff8 <_dtoa_r+0x624>
 80180fe:	2200      	movs	r2, #0
 8018100:	4baa      	ldr	r3, [pc, #680]	; (80183ac <_dtoa_r+0x9d8>)
 8018102:	f7ea fa4b 	bl	800259c <__aeabi_dmul>
 8018106:	2200      	movs	r2, #0
 8018108:	2300      	movs	r3, #0
 801810a:	0004      	movs	r4, r0
 801810c:	000d      	movs	r5, r1
 801810e:	f7e8 f9a5 	bl	800045c <__aeabi_dcmpeq>
 8018112:	2800      	cmp	r0, #0
 8018114:	d083      	beq.n	801801e <_dtoa_r+0x64a>
 8018116:	e7b9      	b.n	801808c <_dtoa_r+0x6b8>
 8018118:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801811a:	2a00      	cmp	r2, #0
 801811c:	d100      	bne.n	8018120 <_dtoa_r+0x74c>
 801811e:	e08a      	b.n	8018236 <_dtoa_r+0x862>
 8018120:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018122:	2a01      	cmp	r2, #1
 8018124:	dc6e      	bgt.n	8018204 <_dtoa_r+0x830>
 8018126:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018128:	2a00      	cmp	r2, #0
 801812a:	d067      	beq.n	80181fc <_dtoa_r+0x828>
 801812c:	4aa0      	ldr	r2, [pc, #640]	; (80183b0 <_dtoa_r+0x9dc>)
 801812e:	189b      	adds	r3, r3, r2
 8018130:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018132:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018136:	2101      	movs	r1, #1
 8018138:	18d2      	adds	r2, r2, r3
 801813a:	9209      	str	r2, [sp, #36]	; 0x24
 801813c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801813e:	9803      	ldr	r0, [sp, #12]
 8018140:	18d3      	adds	r3, r2, r3
 8018142:	930d      	str	r3, [sp, #52]	; 0x34
 8018144:	f001 f808 	bl	8019158 <__i2b>
 8018148:	0007      	movs	r7, r0
 801814a:	2c00      	cmp	r4, #0
 801814c:	dd0e      	ble.n	801816c <_dtoa_r+0x798>
 801814e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018150:	2b00      	cmp	r3, #0
 8018152:	dd0b      	ble.n	801816c <_dtoa_r+0x798>
 8018154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018156:	0023      	movs	r3, r4
 8018158:	4294      	cmp	r4, r2
 801815a:	dd00      	ble.n	801815e <_dtoa_r+0x78a>
 801815c:	0013      	movs	r3, r2
 801815e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018160:	1ae4      	subs	r4, r4, r3
 8018162:	1ad2      	subs	r2, r2, r3
 8018164:	9209      	str	r2, [sp, #36]	; 0x24
 8018166:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018168:	1ad3      	subs	r3, r2, r3
 801816a:	930d      	str	r3, [sp, #52]	; 0x34
 801816c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801816e:	2b00      	cmp	r3, #0
 8018170:	d01e      	beq.n	80181b0 <_dtoa_r+0x7dc>
 8018172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018174:	2b00      	cmp	r3, #0
 8018176:	d062      	beq.n	801823e <_dtoa_r+0x86a>
 8018178:	2d00      	cmp	r5, #0
 801817a:	dd10      	ble.n	801819e <_dtoa_r+0x7ca>
 801817c:	0039      	movs	r1, r7
 801817e:	002a      	movs	r2, r5
 8018180:	9803      	ldr	r0, [sp, #12]
 8018182:	f001 f8af 	bl	80192e4 <__pow5mult>
 8018186:	9a04      	ldr	r2, [sp, #16]
 8018188:	0001      	movs	r1, r0
 801818a:	0007      	movs	r7, r0
 801818c:	9803      	ldr	r0, [sp, #12]
 801818e:	f000 fff9 	bl	8019184 <__multiply>
 8018192:	0006      	movs	r6, r0
 8018194:	9904      	ldr	r1, [sp, #16]
 8018196:	9803      	ldr	r0, [sp, #12]
 8018198:	f000 fefc 	bl	8018f94 <_Bfree>
 801819c:	9604      	str	r6, [sp, #16]
 801819e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80181a0:	1b5a      	subs	r2, r3, r5
 80181a2:	42ab      	cmp	r3, r5
 80181a4:	d004      	beq.n	80181b0 <_dtoa_r+0x7dc>
 80181a6:	9904      	ldr	r1, [sp, #16]
 80181a8:	9803      	ldr	r0, [sp, #12]
 80181aa:	f001 f89b 	bl	80192e4 <__pow5mult>
 80181ae:	9004      	str	r0, [sp, #16]
 80181b0:	2101      	movs	r1, #1
 80181b2:	9803      	ldr	r0, [sp, #12]
 80181b4:	f000 ffd0 	bl	8019158 <__i2b>
 80181b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80181ba:	0006      	movs	r6, r0
 80181bc:	2b00      	cmp	r3, #0
 80181be:	dd40      	ble.n	8018242 <_dtoa_r+0x86e>
 80181c0:	001a      	movs	r2, r3
 80181c2:	0001      	movs	r1, r0
 80181c4:	9803      	ldr	r0, [sp, #12]
 80181c6:	f001 f88d 	bl	80192e4 <__pow5mult>
 80181ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80181cc:	0006      	movs	r6, r0
 80181ce:	2500      	movs	r5, #0
 80181d0:	2b01      	cmp	r3, #1
 80181d2:	dc3e      	bgt.n	8018252 <_dtoa_r+0x87e>
 80181d4:	2500      	movs	r5, #0
 80181d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181d8:	42ab      	cmp	r3, r5
 80181da:	d136      	bne.n	801824a <_dtoa_r+0x876>
 80181dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181de:	031b      	lsls	r3, r3, #12
 80181e0:	42ab      	cmp	r3, r5
 80181e2:	d132      	bne.n	801824a <_dtoa_r+0x876>
 80181e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80181e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80181e8:	4213      	tst	r3, r2
 80181ea:	d02e      	beq.n	801824a <_dtoa_r+0x876>
 80181ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181ee:	3501      	adds	r5, #1
 80181f0:	3301      	adds	r3, #1
 80181f2:	9309      	str	r3, [sp, #36]	; 0x24
 80181f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80181f6:	3301      	adds	r3, #1
 80181f8:	930d      	str	r3, [sp, #52]	; 0x34
 80181fa:	e026      	b.n	801824a <_dtoa_r+0x876>
 80181fc:	2336      	movs	r3, #54	; 0x36
 80181fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018200:	1a9b      	subs	r3, r3, r2
 8018202:	e795      	b.n	8018130 <_dtoa_r+0x75c>
 8018204:	9b08      	ldr	r3, [sp, #32]
 8018206:	1e5d      	subs	r5, r3, #1
 8018208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801820a:	42ab      	cmp	r3, r5
 801820c:	db08      	blt.n	8018220 <_dtoa_r+0x84c>
 801820e:	1b5d      	subs	r5, r3, r5
 8018210:	9b08      	ldr	r3, [sp, #32]
 8018212:	2b00      	cmp	r3, #0
 8018214:	da0c      	bge.n	8018230 <_dtoa_r+0x85c>
 8018216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018218:	9a08      	ldr	r2, [sp, #32]
 801821a:	1a9c      	subs	r4, r3, r2
 801821c:	2300      	movs	r3, #0
 801821e:	e789      	b.n	8018134 <_dtoa_r+0x760>
 8018220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018222:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018224:	1aeb      	subs	r3, r5, r3
 8018226:	18d3      	adds	r3, r2, r3
 8018228:	950e      	str	r5, [sp, #56]	; 0x38
 801822a:	9313      	str	r3, [sp, #76]	; 0x4c
 801822c:	2500      	movs	r5, #0
 801822e:	e7ef      	b.n	8018210 <_dtoa_r+0x83c>
 8018230:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018232:	9b08      	ldr	r3, [sp, #32]
 8018234:	e77e      	b.n	8018134 <_dtoa_r+0x760>
 8018236:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018238:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801823a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801823c:	e785      	b.n	801814a <_dtoa_r+0x776>
 801823e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018240:	e7b1      	b.n	80181a6 <_dtoa_r+0x7d2>
 8018242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018244:	2500      	movs	r5, #0
 8018246:	2b01      	cmp	r3, #1
 8018248:	ddc4      	ble.n	80181d4 <_dtoa_r+0x800>
 801824a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801824c:	2001      	movs	r0, #1
 801824e:	2b00      	cmp	r3, #0
 8018250:	d008      	beq.n	8018264 <_dtoa_r+0x890>
 8018252:	6933      	ldr	r3, [r6, #16]
 8018254:	3303      	adds	r3, #3
 8018256:	009b      	lsls	r3, r3, #2
 8018258:	18f3      	adds	r3, r6, r3
 801825a:	6858      	ldr	r0, [r3, #4]
 801825c:	f000 ff34 	bl	80190c8 <__hi0bits>
 8018260:	2320      	movs	r3, #32
 8018262:	1a18      	subs	r0, r3, r0
 8018264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018266:	221f      	movs	r2, #31
 8018268:	1818      	adds	r0, r3, r0
 801826a:	0003      	movs	r3, r0
 801826c:	4013      	ands	r3, r2
 801826e:	4210      	tst	r0, r2
 8018270:	d046      	beq.n	8018300 <_dtoa_r+0x92c>
 8018272:	3201      	adds	r2, #1
 8018274:	1ad2      	subs	r2, r2, r3
 8018276:	2a04      	cmp	r2, #4
 8018278:	dd3f      	ble.n	80182fa <_dtoa_r+0x926>
 801827a:	221c      	movs	r2, #28
 801827c:	1ad3      	subs	r3, r2, r3
 801827e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018280:	18e4      	adds	r4, r4, r3
 8018282:	18d2      	adds	r2, r2, r3
 8018284:	9209      	str	r2, [sp, #36]	; 0x24
 8018286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018288:	18d3      	adds	r3, r2, r3
 801828a:	930d      	str	r3, [sp, #52]	; 0x34
 801828c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801828e:	2b00      	cmp	r3, #0
 8018290:	dd05      	ble.n	801829e <_dtoa_r+0x8ca>
 8018292:	001a      	movs	r2, r3
 8018294:	9904      	ldr	r1, [sp, #16]
 8018296:	9803      	ldr	r0, [sp, #12]
 8018298:	f001 f866 	bl	8019368 <__lshift>
 801829c:	9004      	str	r0, [sp, #16]
 801829e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	dd05      	ble.n	80182b0 <_dtoa_r+0x8dc>
 80182a4:	0031      	movs	r1, r6
 80182a6:	001a      	movs	r2, r3
 80182a8:	9803      	ldr	r0, [sp, #12]
 80182aa:	f001 f85d 	bl	8019368 <__lshift>
 80182ae:	0006      	movs	r6, r0
 80182b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d026      	beq.n	8018304 <_dtoa_r+0x930>
 80182b6:	0031      	movs	r1, r6
 80182b8:	9804      	ldr	r0, [sp, #16]
 80182ba:	f001 f8c5 	bl	8019448 <__mcmp>
 80182be:	2800      	cmp	r0, #0
 80182c0:	da20      	bge.n	8018304 <_dtoa_r+0x930>
 80182c2:	9b02      	ldr	r3, [sp, #8]
 80182c4:	220a      	movs	r2, #10
 80182c6:	3b01      	subs	r3, #1
 80182c8:	9302      	str	r3, [sp, #8]
 80182ca:	9904      	ldr	r1, [sp, #16]
 80182cc:	2300      	movs	r3, #0
 80182ce:	9803      	ldr	r0, [sp, #12]
 80182d0:	f000 fe6a 	bl	8018fa8 <__multadd>
 80182d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80182d6:	9004      	str	r0, [sp, #16]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d100      	bne.n	80182de <_dtoa_r+0x90a>
 80182dc:	e154      	b.n	8018588 <_dtoa_r+0xbb4>
 80182de:	2300      	movs	r3, #0
 80182e0:	0039      	movs	r1, r7
 80182e2:	220a      	movs	r2, #10
 80182e4:	9803      	ldr	r0, [sp, #12]
 80182e6:	f000 fe5f 	bl	8018fa8 <__multadd>
 80182ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182ec:	0007      	movs	r7, r0
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	dc47      	bgt.n	8018382 <_dtoa_r+0x9ae>
 80182f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80182f4:	2b02      	cmp	r3, #2
 80182f6:	dc0d      	bgt.n	8018314 <_dtoa_r+0x940>
 80182f8:	e043      	b.n	8018382 <_dtoa_r+0x9ae>
 80182fa:	2a04      	cmp	r2, #4
 80182fc:	d0c6      	beq.n	801828c <_dtoa_r+0x8b8>
 80182fe:	0013      	movs	r3, r2
 8018300:	331c      	adds	r3, #28
 8018302:	e7bc      	b.n	801827e <_dtoa_r+0x8aa>
 8018304:	9b08      	ldr	r3, [sp, #32]
 8018306:	2b00      	cmp	r3, #0
 8018308:	dc35      	bgt.n	8018376 <_dtoa_r+0x9a2>
 801830a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801830c:	2b02      	cmp	r3, #2
 801830e:	dd32      	ble.n	8018376 <_dtoa_r+0x9a2>
 8018310:	9b08      	ldr	r3, [sp, #32]
 8018312:	930c      	str	r3, [sp, #48]	; 0x30
 8018314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018316:	2b00      	cmp	r3, #0
 8018318:	d10c      	bne.n	8018334 <_dtoa_r+0x960>
 801831a:	0031      	movs	r1, r6
 801831c:	2205      	movs	r2, #5
 801831e:	9803      	ldr	r0, [sp, #12]
 8018320:	f000 fe42 	bl	8018fa8 <__multadd>
 8018324:	0006      	movs	r6, r0
 8018326:	0001      	movs	r1, r0
 8018328:	9804      	ldr	r0, [sp, #16]
 801832a:	f001 f88d 	bl	8019448 <__mcmp>
 801832e:	2800      	cmp	r0, #0
 8018330:	dd00      	ble.n	8018334 <_dtoa_r+0x960>
 8018332:	e5a8      	b.n	8017e86 <_dtoa_r+0x4b2>
 8018334:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018336:	43db      	mvns	r3, r3
 8018338:	9302      	str	r3, [sp, #8]
 801833a:	9b05      	ldr	r3, [sp, #20]
 801833c:	9306      	str	r3, [sp, #24]
 801833e:	2500      	movs	r5, #0
 8018340:	0031      	movs	r1, r6
 8018342:	9803      	ldr	r0, [sp, #12]
 8018344:	f000 fe26 	bl	8018f94 <_Bfree>
 8018348:	2f00      	cmp	r7, #0
 801834a:	d100      	bne.n	801834e <_dtoa_r+0x97a>
 801834c:	e69e      	b.n	801808c <_dtoa_r+0x6b8>
 801834e:	2d00      	cmp	r5, #0
 8018350:	d005      	beq.n	801835e <_dtoa_r+0x98a>
 8018352:	42bd      	cmp	r5, r7
 8018354:	d003      	beq.n	801835e <_dtoa_r+0x98a>
 8018356:	0029      	movs	r1, r5
 8018358:	9803      	ldr	r0, [sp, #12]
 801835a:	f000 fe1b 	bl	8018f94 <_Bfree>
 801835e:	0039      	movs	r1, r7
 8018360:	9803      	ldr	r0, [sp, #12]
 8018362:	f000 fe17 	bl	8018f94 <_Bfree>
 8018366:	e691      	b.n	801808c <_dtoa_r+0x6b8>
 8018368:	2600      	movs	r6, #0
 801836a:	0037      	movs	r7, r6
 801836c:	e7e2      	b.n	8018334 <_dtoa_r+0x960>
 801836e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018370:	0037      	movs	r7, r6
 8018372:	9302      	str	r3, [sp, #8]
 8018374:	e587      	b.n	8017e86 <_dtoa_r+0x4b2>
 8018376:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018378:	2b00      	cmp	r3, #0
 801837a:	d100      	bne.n	801837e <_dtoa_r+0x9aa>
 801837c:	e0bc      	b.n	80184f8 <_dtoa_r+0xb24>
 801837e:	9b08      	ldr	r3, [sp, #32]
 8018380:	930c      	str	r3, [sp, #48]	; 0x30
 8018382:	2c00      	cmp	r4, #0
 8018384:	dd05      	ble.n	8018392 <_dtoa_r+0x9be>
 8018386:	0039      	movs	r1, r7
 8018388:	0022      	movs	r2, r4
 801838a:	9803      	ldr	r0, [sp, #12]
 801838c:	f000 ffec 	bl	8019368 <__lshift>
 8018390:	0007      	movs	r7, r0
 8018392:	0038      	movs	r0, r7
 8018394:	2d00      	cmp	r5, #0
 8018396:	d01e      	beq.n	80183d6 <_dtoa_r+0xa02>
 8018398:	6879      	ldr	r1, [r7, #4]
 801839a:	9803      	ldr	r0, [sp, #12]
 801839c:	f000 fdd2 	bl	8018f44 <_Balloc>
 80183a0:	1e04      	subs	r4, r0, #0
 80183a2:	d10b      	bne.n	80183bc <_dtoa_r+0x9e8>
 80183a4:	0002      	movs	r2, r0
 80183a6:	4b03      	ldr	r3, [pc, #12]	; (80183b4 <_dtoa_r+0x9e0>)
 80183a8:	4903      	ldr	r1, [pc, #12]	; (80183b8 <_dtoa_r+0x9e4>)
 80183aa:	e444      	b.n	8017c36 <_dtoa_r+0x262>
 80183ac:	40240000 	.word	0x40240000
 80183b0:	00000433 	.word	0x00000433
 80183b4:	0801e709 	.word	0x0801e709
 80183b8:	000002ea 	.word	0x000002ea
 80183bc:	0039      	movs	r1, r7
 80183be:	693b      	ldr	r3, [r7, #16]
 80183c0:	310c      	adds	r1, #12
 80183c2:	1c9a      	adds	r2, r3, #2
 80183c4:	0092      	lsls	r2, r2, #2
 80183c6:	300c      	adds	r0, #12
 80183c8:	f7fc fe1c 	bl	8015004 <memcpy>
 80183cc:	2201      	movs	r2, #1
 80183ce:	0021      	movs	r1, r4
 80183d0:	9803      	ldr	r0, [sp, #12]
 80183d2:	f000 ffc9 	bl	8019368 <__lshift>
 80183d6:	003d      	movs	r5, r7
 80183d8:	0007      	movs	r7, r0
 80183da:	9b05      	ldr	r3, [sp, #20]
 80183dc:	9308      	str	r3, [sp, #32]
 80183de:	0031      	movs	r1, r6
 80183e0:	9804      	ldr	r0, [sp, #16]
 80183e2:	f7ff fa6b 	bl	80178bc <quorem>
 80183e6:	0029      	movs	r1, r5
 80183e8:	0004      	movs	r4, r0
 80183ea:	900d      	str	r0, [sp, #52]	; 0x34
 80183ec:	9804      	ldr	r0, [sp, #16]
 80183ee:	f001 f82b 	bl	8019448 <__mcmp>
 80183f2:	003a      	movs	r2, r7
 80183f4:	900e      	str	r0, [sp, #56]	; 0x38
 80183f6:	0031      	movs	r1, r6
 80183f8:	9803      	ldr	r0, [sp, #12]
 80183fa:	f001 f841 	bl	8019480 <__mdiff>
 80183fe:	68c3      	ldr	r3, [r0, #12]
 8018400:	3430      	adds	r4, #48	; 0x30
 8018402:	930f      	str	r3, [sp, #60]	; 0x3c
 8018404:	2301      	movs	r3, #1
 8018406:	9309      	str	r3, [sp, #36]	; 0x24
 8018408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801840a:	9006      	str	r0, [sp, #24]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d104      	bne.n	801841a <_dtoa_r+0xa46>
 8018410:	0001      	movs	r1, r0
 8018412:	9804      	ldr	r0, [sp, #16]
 8018414:	f001 f818 	bl	8019448 <__mcmp>
 8018418:	9009      	str	r0, [sp, #36]	; 0x24
 801841a:	9803      	ldr	r0, [sp, #12]
 801841c:	9906      	ldr	r1, [sp, #24]
 801841e:	f000 fdb9 	bl	8018f94 <_Bfree>
 8018422:	2301      	movs	r3, #1
 8018424:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018428:	4018      	ands	r0, r3
 801842a:	9b08      	ldr	r3, [sp, #32]
 801842c:	3301      	adds	r3, #1
 801842e:	9306      	str	r3, [sp, #24]
 8018430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018432:	4313      	orrs	r3, r2
 8018434:	4303      	orrs	r3, r0
 8018436:	d109      	bne.n	801844c <_dtoa_r+0xa78>
 8018438:	2c39      	cmp	r4, #57	; 0x39
 801843a:	d021      	beq.n	8018480 <_dtoa_r+0xaac>
 801843c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801843e:	2b00      	cmp	r3, #0
 8018440:	dd01      	ble.n	8018446 <_dtoa_r+0xa72>
 8018442:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018444:	3431      	adds	r4, #49	; 0x31
 8018446:	9b08      	ldr	r3, [sp, #32]
 8018448:	701c      	strb	r4, [r3, #0]
 801844a:	e779      	b.n	8018340 <_dtoa_r+0x96c>
 801844c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801844e:	2b00      	cmp	r3, #0
 8018450:	db03      	blt.n	801845a <_dtoa_r+0xa86>
 8018452:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018454:	4313      	orrs	r3, r2
 8018456:	4303      	orrs	r3, r0
 8018458:	d11e      	bne.n	8018498 <_dtoa_r+0xac4>
 801845a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801845c:	2b00      	cmp	r3, #0
 801845e:	ddf2      	ble.n	8018446 <_dtoa_r+0xa72>
 8018460:	9904      	ldr	r1, [sp, #16]
 8018462:	2201      	movs	r2, #1
 8018464:	9803      	ldr	r0, [sp, #12]
 8018466:	f000 ff7f 	bl	8019368 <__lshift>
 801846a:	0031      	movs	r1, r6
 801846c:	9004      	str	r0, [sp, #16]
 801846e:	f000 ffeb 	bl	8019448 <__mcmp>
 8018472:	2800      	cmp	r0, #0
 8018474:	dc02      	bgt.n	801847c <_dtoa_r+0xaa8>
 8018476:	d1e6      	bne.n	8018446 <_dtoa_r+0xa72>
 8018478:	07e3      	lsls	r3, r4, #31
 801847a:	d5e4      	bpl.n	8018446 <_dtoa_r+0xa72>
 801847c:	2c39      	cmp	r4, #57	; 0x39
 801847e:	d1e0      	bne.n	8018442 <_dtoa_r+0xa6e>
 8018480:	2339      	movs	r3, #57	; 0x39
 8018482:	9a08      	ldr	r2, [sp, #32]
 8018484:	7013      	strb	r3, [r2, #0]
 8018486:	9b06      	ldr	r3, [sp, #24]
 8018488:	9306      	str	r3, [sp, #24]
 801848a:	3b01      	subs	r3, #1
 801848c:	781a      	ldrb	r2, [r3, #0]
 801848e:	2a39      	cmp	r2, #57	; 0x39
 8018490:	d067      	beq.n	8018562 <_dtoa_r+0xb8e>
 8018492:	3201      	adds	r2, #1
 8018494:	701a      	strb	r2, [r3, #0]
 8018496:	e753      	b.n	8018340 <_dtoa_r+0x96c>
 8018498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801849a:	2b00      	cmp	r3, #0
 801849c:	dd03      	ble.n	80184a6 <_dtoa_r+0xad2>
 801849e:	2c39      	cmp	r4, #57	; 0x39
 80184a0:	d0ee      	beq.n	8018480 <_dtoa_r+0xaac>
 80184a2:	3401      	adds	r4, #1
 80184a4:	e7cf      	b.n	8018446 <_dtoa_r+0xa72>
 80184a6:	9b08      	ldr	r3, [sp, #32]
 80184a8:	9a05      	ldr	r2, [sp, #20]
 80184aa:	701c      	strb	r4, [r3, #0]
 80184ac:	2301      	movs	r3, #1
 80184ae:	1a9b      	subs	r3, r3, r2
 80184b0:	9a08      	ldr	r2, [sp, #32]
 80184b2:	189b      	adds	r3, r3, r2
 80184b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80184b6:	429a      	cmp	r2, r3
 80184b8:	d03e      	beq.n	8018538 <_dtoa_r+0xb64>
 80184ba:	2300      	movs	r3, #0
 80184bc:	220a      	movs	r2, #10
 80184be:	9904      	ldr	r1, [sp, #16]
 80184c0:	9803      	ldr	r0, [sp, #12]
 80184c2:	f000 fd71 	bl	8018fa8 <__multadd>
 80184c6:	2300      	movs	r3, #0
 80184c8:	9004      	str	r0, [sp, #16]
 80184ca:	220a      	movs	r2, #10
 80184cc:	0029      	movs	r1, r5
 80184ce:	9803      	ldr	r0, [sp, #12]
 80184d0:	42bd      	cmp	r5, r7
 80184d2:	d106      	bne.n	80184e2 <_dtoa_r+0xb0e>
 80184d4:	f000 fd68 	bl	8018fa8 <__multadd>
 80184d8:	0005      	movs	r5, r0
 80184da:	0007      	movs	r7, r0
 80184dc:	9b06      	ldr	r3, [sp, #24]
 80184de:	9308      	str	r3, [sp, #32]
 80184e0:	e77d      	b.n	80183de <_dtoa_r+0xa0a>
 80184e2:	f000 fd61 	bl	8018fa8 <__multadd>
 80184e6:	0039      	movs	r1, r7
 80184e8:	0005      	movs	r5, r0
 80184ea:	2300      	movs	r3, #0
 80184ec:	220a      	movs	r2, #10
 80184ee:	9803      	ldr	r0, [sp, #12]
 80184f0:	f000 fd5a 	bl	8018fa8 <__multadd>
 80184f4:	0007      	movs	r7, r0
 80184f6:	e7f1      	b.n	80184dc <_dtoa_r+0xb08>
 80184f8:	9b08      	ldr	r3, [sp, #32]
 80184fa:	930c      	str	r3, [sp, #48]	; 0x30
 80184fc:	2500      	movs	r5, #0
 80184fe:	0031      	movs	r1, r6
 8018500:	9804      	ldr	r0, [sp, #16]
 8018502:	f7ff f9db 	bl	80178bc <quorem>
 8018506:	9b05      	ldr	r3, [sp, #20]
 8018508:	3030      	adds	r0, #48	; 0x30
 801850a:	5558      	strb	r0, [r3, r5]
 801850c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801850e:	3501      	adds	r5, #1
 8018510:	0004      	movs	r4, r0
 8018512:	42ab      	cmp	r3, r5
 8018514:	dd07      	ble.n	8018526 <_dtoa_r+0xb52>
 8018516:	2300      	movs	r3, #0
 8018518:	220a      	movs	r2, #10
 801851a:	9904      	ldr	r1, [sp, #16]
 801851c:	9803      	ldr	r0, [sp, #12]
 801851e:	f000 fd43 	bl	8018fa8 <__multadd>
 8018522:	9004      	str	r0, [sp, #16]
 8018524:	e7eb      	b.n	80184fe <_dtoa_r+0xb2a>
 8018526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018528:	2001      	movs	r0, #1
 801852a:	2b00      	cmp	r3, #0
 801852c:	dd00      	ble.n	8018530 <_dtoa_r+0xb5c>
 801852e:	0018      	movs	r0, r3
 8018530:	2500      	movs	r5, #0
 8018532:	9b05      	ldr	r3, [sp, #20]
 8018534:	181b      	adds	r3, r3, r0
 8018536:	9306      	str	r3, [sp, #24]
 8018538:	9904      	ldr	r1, [sp, #16]
 801853a:	2201      	movs	r2, #1
 801853c:	9803      	ldr	r0, [sp, #12]
 801853e:	f000 ff13 	bl	8019368 <__lshift>
 8018542:	0031      	movs	r1, r6
 8018544:	9004      	str	r0, [sp, #16]
 8018546:	f000 ff7f 	bl	8019448 <__mcmp>
 801854a:	2800      	cmp	r0, #0
 801854c:	dc9b      	bgt.n	8018486 <_dtoa_r+0xab2>
 801854e:	d101      	bne.n	8018554 <_dtoa_r+0xb80>
 8018550:	07e3      	lsls	r3, r4, #31
 8018552:	d498      	bmi.n	8018486 <_dtoa_r+0xab2>
 8018554:	9b06      	ldr	r3, [sp, #24]
 8018556:	9306      	str	r3, [sp, #24]
 8018558:	3b01      	subs	r3, #1
 801855a:	781a      	ldrb	r2, [r3, #0]
 801855c:	2a30      	cmp	r2, #48	; 0x30
 801855e:	d0fa      	beq.n	8018556 <_dtoa_r+0xb82>
 8018560:	e6ee      	b.n	8018340 <_dtoa_r+0x96c>
 8018562:	9a05      	ldr	r2, [sp, #20]
 8018564:	429a      	cmp	r2, r3
 8018566:	d18f      	bne.n	8018488 <_dtoa_r+0xab4>
 8018568:	9b02      	ldr	r3, [sp, #8]
 801856a:	3301      	adds	r3, #1
 801856c:	9302      	str	r3, [sp, #8]
 801856e:	2331      	movs	r3, #49	; 0x31
 8018570:	7013      	strb	r3, [r2, #0]
 8018572:	e6e5      	b.n	8018340 <_dtoa_r+0x96c>
 8018574:	4b08      	ldr	r3, [pc, #32]	; (8018598 <_dtoa_r+0xbc4>)
 8018576:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8018578:	9305      	str	r3, [sp, #20]
 801857a:	4b08      	ldr	r3, [pc, #32]	; (801859c <_dtoa_r+0xbc8>)
 801857c:	2a00      	cmp	r2, #0
 801857e:	d001      	beq.n	8018584 <_dtoa_r+0xbb0>
 8018580:	f7ff fa5a 	bl	8017a38 <_dtoa_r+0x64>
 8018584:	f7ff fa5a 	bl	8017a3c <_dtoa_r+0x68>
 8018588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801858a:	2b00      	cmp	r3, #0
 801858c:	dcb6      	bgt.n	80184fc <_dtoa_r+0xb28>
 801858e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018590:	2b02      	cmp	r3, #2
 8018592:	dd00      	ble.n	8018596 <_dtoa_r+0xbc2>
 8018594:	e6be      	b.n	8018314 <_dtoa_r+0x940>
 8018596:	e7b1      	b.n	80184fc <_dtoa_r+0xb28>
 8018598:	0801e700 	.word	0x0801e700
 801859c:	0801e708 	.word	0x0801e708

080185a0 <__errno>:
 80185a0:	4b01      	ldr	r3, [pc, #4]	; (80185a8 <__errno+0x8>)
 80185a2:	6818      	ldr	r0, [r3, #0]
 80185a4:	4770      	bx	lr
 80185a6:	46c0      	nop			; (mov r8, r8)
 80185a8:	20000138 	.word	0x20000138

080185ac <__libc_fini_array>:
 80185ac:	b570      	push	{r4, r5, r6, lr}
 80185ae:	4d07      	ldr	r5, [pc, #28]	; (80185cc <__libc_fini_array+0x20>)
 80185b0:	4c07      	ldr	r4, [pc, #28]	; (80185d0 <__libc_fini_array+0x24>)
 80185b2:	1b64      	subs	r4, r4, r5
 80185b4:	10a4      	asrs	r4, r4, #2
 80185b6:	2c00      	cmp	r4, #0
 80185b8:	d102      	bne.n	80185c0 <__libc_fini_array+0x14>
 80185ba:	f002 fe1d 	bl	801b1f8 <_fini>
 80185be:	bd70      	pop	{r4, r5, r6, pc}
 80185c0:	3c01      	subs	r4, #1
 80185c2:	00a3      	lsls	r3, r4, #2
 80185c4:	58eb      	ldr	r3, [r5, r3]
 80185c6:	4798      	blx	r3
 80185c8:	e7f5      	b.n	80185b6 <__libc_fini_array+0xa>
 80185ca:	46c0      	nop			; (mov r8, r8)
 80185cc:	0801e9c0 	.word	0x0801e9c0
 80185d0:	0801e9c4 	.word	0x0801e9c4

080185d4 <_malloc_trim_r>:
 80185d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185d6:	0004      	movs	r4, r0
 80185d8:	2008      	movs	r0, #8
 80185da:	000d      	movs	r5, r1
 80185dc:	f7ff f94e 	bl	801787c <sysconf>
 80185e0:	0006      	movs	r6, r0
 80185e2:	0020      	movs	r0, r4
 80185e4:	f7fc fd20 	bl	8015028 <__malloc_lock>
 80185e8:	2203      	movs	r2, #3
 80185ea:	4f21      	ldr	r7, [pc, #132]	; (8018670 <_malloc_trim_r+0x9c>)
 80185ec:	0031      	movs	r1, r6
 80185ee:	68bb      	ldr	r3, [r7, #8]
 80185f0:	685b      	ldr	r3, [r3, #4]
 80185f2:	4393      	bics	r3, r2
 80185f4:	1b58      	subs	r0, r3, r5
 80185f6:	3811      	subs	r0, #17
 80185f8:	1980      	adds	r0, r0, r6
 80185fa:	9301      	str	r3, [sp, #4]
 80185fc:	f7e7 fda8 	bl	8000150 <__udivsi3>
 8018600:	1e45      	subs	r5, r0, #1
 8018602:	4375      	muls	r5, r6
 8018604:	42ae      	cmp	r6, r5
 8018606:	dd04      	ble.n	8018612 <_malloc_trim_r+0x3e>
 8018608:	0020      	movs	r0, r4
 801860a:	f7fc fd15 	bl	8015038 <__malloc_unlock>
 801860e:	2000      	movs	r0, #0
 8018610:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018612:	2100      	movs	r1, #0
 8018614:	0020      	movs	r0, r4
 8018616:	f7fc fee1 	bl	80153dc <_sbrk_r>
 801861a:	68bb      	ldr	r3, [r7, #8]
 801861c:	9a01      	ldr	r2, [sp, #4]
 801861e:	189b      	adds	r3, r3, r2
 8018620:	4298      	cmp	r0, r3
 8018622:	d1f1      	bne.n	8018608 <_malloc_trim_r+0x34>
 8018624:	0020      	movs	r0, r4
 8018626:	4269      	negs	r1, r5
 8018628:	f7fc fed8 	bl	80153dc <_sbrk_r>
 801862c:	1c43      	adds	r3, r0, #1
 801862e:	d110      	bne.n	8018652 <_malloc_trim_r+0x7e>
 8018630:	2100      	movs	r1, #0
 8018632:	0020      	movs	r0, r4
 8018634:	f7fc fed2 	bl	80153dc <_sbrk_r>
 8018638:	68ba      	ldr	r2, [r7, #8]
 801863a:	1a81      	subs	r1, r0, r2
 801863c:	290f      	cmp	r1, #15
 801863e:	dde3      	ble.n	8018608 <_malloc_trim_r+0x34>
 8018640:	4b0c      	ldr	r3, [pc, #48]	; (8018674 <_malloc_trim_r+0xa0>)
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	1ac0      	subs	r0, r0, r3
 8018646:	4b0c      	ldr	r3, [pc, #48]	; (8018678 <_malloc_trim_r+0xa4>)
 8018648:	6018      	str	r0, [r3, #0]
 801864a:	2301      	movs	r3, #1
 801864c:	430b      	orrs	r3, r1
 801864e:	6053      	str	r3, [r2, #4]
 8018650:	e7da      	b.n	8018608 <_malloc_trim_r+0x34>
 8018652:	2601      	movs	r6, #1
 8018654:	9b01      	ldr	r3, [sp, #4]
 8018656:	68ba      	ldr	r2, [r7, #8]
 8018658:	1b5b      	subs	r3, r3, r5
 801865a:	4333      	orrs	r3, r6
 801865c:	6053      	str	r3, [r2, #4]
 801865e:	4b06      	ldr	r3, [pc, #24]	; (8018678 <_malloc_trim_r+0xa4>)
 8018660:	0020      	movs	r0, r4
 8018662:	681a      	ldr	r2, [r3, #0]
 8018664:	1b55      	subs	r5, r2, r5
 8018666:	601d      	str	r5, [r3, #0]
 8018668:	f7fc fce6 	bl	8015038 <__malloc_unlock>
 801866c:	0030      	movs	r0, r6
 801866e:	e7cf      	b.n	8018610 <_malloc_trim_r+0x3c>
 8018670:	20000568 	.word	0x20000568
 8018674:	20000970 	.word	0x20000970
 8018678:	200069fc 	.word	0x200069fc

0801867c <_free_r>:
 801867c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801867e:	1e0d      	subs	r5, r1, #0
 8018680:	9001      	str	r0, [sp, #4]
 8018682:	d02d      	beq.n	80186e0 <_free_r+0x64>
 8018684:	f7fc fcd0 	bl	8015028 <__malloc_lock>
 8018688:	2301      	movs	r3, #1
 801868a:	0029      	movs	r1, r5
 801868c:	469c      	mov	ip, r3
 801868e:	3908      	subs	r1, #8
 8018690:	684f      	ldr	r7, [r1, #4]
 8018692:	4662      	mov	r2, ip
 8018694:	003b      	movs	r3, r7
 8018696:	4666      	mov	r6, ip
 8018698:	4393      	bics	r3, r2
 801869a:	18c8      	adds	r0, r1, r3
 801869c:	6845      	ldr	r5, [r0, #4]
 801869e:	3202      	adds	r2, #2
 80186a0:	4395      	bics	r5, r2
 80186a2:	4a4a      	ldr	r2, [pc, #296]	; (80187cc <_free_r+0x150>)
 80186a4:	4037      	ands	r7, r6
 80186a6:	6896      	ldr	r6, [r2, #8]
 80186a8:	4286      	cmp	r6, r0
 80186aa:	d11a      	bne.n	80186e2 <_free_r+0x66>
 80186ac:	195b      	adds	r3, r3, r5
 80186ae:	2f00      	cmp	r7, #0
 80186b0:	d106      	bne.n	80186c0 <_free_r+0x44>
 80186b2:	6808      	ldr	r0, [r1, #0]
 80186b4:	1a09      	subs	r1, r1, r0
 80186b6:	688d      	ldr	r5, [r1, #8]
 80186b8:	181b      	adds	r3, r3, r0
 80186ba:	68c8      	ldr	r0, [r1, #12]
 80186bc:	60e8      	str	r0, [r5, #12]
 80186be:	6085      	str	r5, [r0, #8]
 80186c0:	2001      	movs	r0, #1
 80186c2:	4318      	orrs	r0, r3
 80186c4:	6048      	str	r0, [r1, #4]
 80186c6:	6091      	str	r1, [r2, #8]
 80186c8:	4a41      	ldr	r2, [pc, #260]	; (80187d0 <_free_r+0x154>)
 80186ca:	6812      	ldr	r2, [r2, #0]
 80186cc:	429a      	cmp	r2, r3
 80186ce:	d804      	bhi.n	80186da <_free_r+0x5e>
 80186d0:	4b40      	ldr	r3, [pc, #256]	; (80187d4 <_free_r+0x158>)
 80186d2:	9801      	ldr	r0, [sp, #4]
 80186d4:	6819      	ldr	r1, [r3, #0]
 80186d6:	f7ff ff7d 	bl	80185d4 <_malloc_trim_r>
 80186da:	9801      	ldr	r0, [sp, #4]
 80186dc:	f7fc fcac 	bl	8015038 <__malloc_unlock>
 80186e0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80186e2:	2600      	movs	r6, #0
 80186e4:	6045      	str	r5, [r0, #4]
 80186e6:	42b7      	cmp	r7, r6
 80186e8:	d109      	bne.n	80186fe <_free_r+0x82>
 80186ea:	680f      	ldr	r7, [r1, #0]
 80186ec:	4c3a      	ldr	r4, [pc, #232]	; (80187d8 <_free_r+0x15c>)
 80186ee:	1bc9      	subs	r1, r1, r7
 80186f0:	19db      	adds	r3, r3, r7
 80186f2:	688f      	ldr	r7, [r1, #8]
 80186f4:	42a7      	cmp	r7, r4
 80186f6:	d02c      	beq.n	8018752 <_free_r+0xd6>
 80186f8:	68cc      	ldr	r4, [r1, #12]
 80186fa:	60fc      	str	r4, [r7, #12]
 80186fc:	60a7      	str	r7, [r4, #8]
 80186fe:	1947      	adds	r7, r0, r5
 8018700:	687c      	ldr	r4, [r7, #4]
 8018702:	2701      	movs	r7, #1
 8018704:	423c      	tst	r4, r7
 8018706:	d10b      	bne.n	8018720 <_free_r+0xa4>
 8018708:	195b      	adds	r3, r3, r5
 801870a:	6885      	ldr	r5, [r0, #8]
 801870c:	2e00      	cmp	r6, #0
 801870e:	d122      	bne.n	8018756 <_free_r+0xda>
 8018710:	4c31      	ldr	r4, [pc, #196]	; (80187d8 <_free_r+0x15c>)
 8018712:	42a5      	cmp	r5, r4
 8018714:	d11f      	bne.n	8018756 <_free_r+0xda>
 8018716:	003e      	movs	r6, r7
 8018718:	6151      	str	r1, [r2, #20]
 801871a:	6111      	str	r1, [r2, #16]
 801871c:	60cd      	str	r5, [r1, #12]
 801871e:	608d      	str	r5, [r1, #8]
 8018720:	2501      	movs	r5, #1
 8018722:	0028      	movs	r0, r5
 8018724:	4318      	orrs	r0, r3
 8018726:	6048      	str	r0, [r1, #4]
 8018728:	50cb      	str	r3, [r1, r3]
 801872a:	2e00      	cmp	r6, #0
 801872c:	d1d5      	bne.n	80186da <_free_r+0x5e>
 801872e:	2080      	movs	r0, #128	; 0x80
 8018730:	0080      	lsls	r0, r0, #2
 8018732:	4283      	cmp	r3, r0
 8018734:	d213      	bcs.n	801875e <_free_r+0xe2>
 8018736:	08d8      	lsrs	r0, r3, #3
 8018738:	095b      	lsrs	r3, r3, #5
 801873a:	409d      	lsls	r5, r3
 801873c:	6853      	ldr	r3, [r2, #4]
 801873e:	00c0      	lsls	r0, r0, #3
 8018740:	431d      	orrs	r5, r3
 8018742:	6055      	str	r5, [r2, #4]
 8018744:	1882      	adds	r2, r0, r2
 8018746:	6893      	ldr	r3, [r2, #8]
 8018748:	60ca      	str	r2, [r1, #12]
 801874a:	608b      	str	r3, [r1, #8]
 801874c:	6091      	str	r1, [r2, #8]
 801874e:	60d9      	str	r1, [r3, #12]
 8018750:	e7c3      	b.n	80186da <_free_r+0x5e>
 8018752:	4666      	mov	r6, ip
 8018754:	e7d3      	b.n	80186fe <_free_r+0x82>
 8018756:	68c0      	ldr	r0, [r0, #12]
 8018758:	60e8      	str	r0, [r5, #12]
 801875a:	6085      	str	r5, [r0, #8]
 801875c:	e7e0      	b.n	8018720 <_free_r+0xa4>
 801875e:	0a5d      	lsrs	r5, r3, #9
 8018760:	2d04      	cmp	r5, #4
 8018762:	d812      	bhi.n	801878a <_free_r+0x10e>
 8018764:	0998      	lsrs	r0, r3, #6
 8018766:	3038      	adds	r0, #56	; 0x38
 8018768:	00c6      	lsls	r6, r0, #3
 801876a:	18b6      	adds	r6, r6, r2
 801876c:	68b5      	ldr	r5, [r6, #8]
 801876e:	2703      	movs	r7, #3
 8018770:	42ae      	cmp	r6, r5
 8018772:	d125      	bne.n	80187c0 <_free_r+0x144>
 8018774:	2301      	movs	r3, #1
 8018776:	1080      	asrs	r0, r0, #2
 8018778:	4083      	lsls	r3, r0
 801877a:	6850      	ldr	r0, [r2, #4]
 801877c:	4303      	orrs	r3, r0
 801877e:	6053      	str	r3, [r2, #4]
 8018780:	60ce      	str	r6, [r1, #12]
 8018782:	608d      	str	r5, [r1, #8]
 8018784:	60b1      	str	r1, [r6, #8]
 8018786:	60e9      	str	r1, [r5, #12]
 8018788:	e7a7      	b.n	80186da <_free_r+0x5e>
 801878a:	2d14      	cmp	r5, #20
 801878c:	d802      	bhi.n	8018794 <_free_r+0x118>
 801878e:	0028      	movs	r0, r5
 8018790:	305b      	adds	r0, #91	; 0x5b
 8018792:	e7e9      	b.n	8018768 <_free_r+0xec>
 8018794:	2d54      	cmp	r5, #84	; 0x54
 8018796:	d802      	bhi.n	801879e <_free_r+0x122>
 8018798:	0b18      	lsrs	r0, r3, #12
 801879a:	306e      	adds	r0, #110	; 0x6e
 801879c:	e7e4      	b.n	8018768 <_free_r+0xec>
 801879e:	20aa      	movs	r0, #170	; 0xaa
 80187a0:	0040      	lsls	r0, r0, #1
 80187a2:	4285      	cmp	r5, r0
 80187a4:	d802      	bhi.n	80187ac <_free_r+0x130>
 80187a6:	0bd8      	lsrs	r0, r3, #15
 80187a8:	3077      	adds	r0, #119	; 0x77
 80187aa:	e7dd      	b.n	8018768 <_free_r+0xec>
 80187ac:	4e0b      	ldr	r6, [pc, #44]	; (80187dc <_free_r+0x160>)
 80187ae:	207e      	movs	r0, #126	; 0x7e
 80187b0:	42b5      	cmp	r5, r6
 80187b2:	d8d9      	bhi.n	8018768 <_free_r+0xec>
 80187b4:	0c98      	lsrs	r0, r3, #18
 80187b6:	307c      	adds	r0, #124	; 0x7c
 80187b8:	e7d6      	b.n	8018768 <_free_r+0xec>
 80187ba:	68ad      	ldr	r5, [r5, #8]
 80187bc:	42ae      	cmp	r6, r5
 80187be:	d003      	beq.n	80187c8 <_free_r+0x14c>
 80187c0:	686a      	ldr	r2, [r5, #4]
 80187c2:	43ba      	bics	r2, r7
 80187c4:	429a      	cmp	r2, r3
 80187c6:	d8f8      	bhi.n	80187ba <_free_r+0x13e>
 80187c8:	68ee      	ldr	r6, [r5, #12]
 80187ca:	e7d9      	b.n	8018780 <_free_r+0x104>
 80187cc:	20000568 	.word	0x20000568
 80187d0:	20000974 	.word	0x20000974
 80187d4:	20006a2c 	.word	0x20006a2c
 80187d8:	20000570 	.word	0x20000570
 80187dc:	00000554 	.word	0x00000554

080187e0 <rshift>:
 80187e0:	0002      	movs	r2, r0
 80187e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187e4:	6907      	ldr	r7, [r0, #16]
 80187e6:	3214      	adds	r2, #20
 80187e8:	0013      	movs	r3, r2
 80187ea:	b085      	sub	sp, #20
 80187ec:	114e      	asrs	r6, r1, #5
 80187ee:	42b7      	cmp	r7, r6
 80187f0:	dd31      	ble.n	8018856 <rshift+0x76>
 80187f2:	00b3      	lsls	r3, r6, #2
 80187f4:	18d3      	adds	r3, r2, r3
 80187f6:	251f      	movs	r5, #31
 80187f8:	9301      	str	r3, [sp, #4]
 80187fa:	000b      	movs	r3, r1
 80187fc:	00bc      	lsls	r4, r7, #2
 80187fe:	402b      	ands	r3, r5
 8018800:	1914      	adds	r4, r2, r4
 8018802:	9302      	str	r3, [sp, #8]
 8018804:	4229      	tst	r1, r5
 8018806:	d10c      	bne.n	8018822 <rshift+0x42>
 8018808:	0015      	movs	r5, r2
 801880a:	9901      	ldr	r1, [sp, #4]
 801880c:	428c      	cmp	r4, r1
 801880e:	d838      	bhi.n	8018882 <rshift+0xa2>
 8018810:	9901      	ldr	r1, [sp, #4]
 8018812:	2300      	movs	r3, #0
 8018814:	3903      	subs	r1, #3
 8018816:	428c      	cmp	r4, r1
 8018818:	d301      	bcc.n	801881e <rshift+0x3e>
 801881a:	1bbb      	subs	r3, r7, r6
 801881c:	009b      	lsls	r3, r3, #2
 801881e:	18d3      	adds	r3, r2, r3
 8018820:	e019      	b.n	8018856 <rshift+0x76>
 8018822:	2120      	movs	r1, #32
 8018824:	9b02      	ldr	r3, [sp, #8]
 8018826:	9d01      	ldr	r5, [sp, #4]
 8018828:	1acb      	subs	r3, r1, r3
 801882a:	9303      	str	r3, [sp, #12]
 801882c:	cd02      	ldmia	r5!, {r1}
 801882e:	9b02      	ldr	r3, [sp, #8]
 8018830:	4694      	mov	ip, r2
 8018832:	40d9      	lsrs	r1, r3
 8018834:	9100      	str	r1, [sp, #0]
 8018836:	42ac      	cmp	r4, r5
 8018838:	d816      	bhi.n	8018868 <rshift+0x88>
 801883a:	9d01      	ldr	r5, [sp, #4]
 801883c:	2300      	movs	r3, #0
 801883e:	3501      	adds	r5, #1
 8018840:	42ac      	cmp	r4, r5
 8018842:	d302      	bcc.n	801884a <rshift+0x6a>
 8018844:	1bbb      	subs	r3, r7, r6
 8018846:	009b      	lsls	r3, r3, #2
 8018848:	3b04      	subs	r3, #4
 801884a:	9900      	ldr	r1, [sp, #0]
 801884c:	18d3      	adds	r3, r2, r3
 801884e:	6019      	str	r1, [r3, #0]
 8018850:	2900      	cmp	r1, #0
 8018852:	d000      	beq.n	8018856 <rshift+0x76>
 8018854:	3304      	adds	r3, #4
 8018856:	1a99      	subs	r1, r3, r2
 8018858:	1089      	asrs	r1, r1, #2
 801885a:	6101      	str	r1, [r0, #16]
 801885c:	4293      	cmp	r3, r2
 801885e:	d101      	bne.n	8018864 <rshift+0x84>
 8018860:	2300      	movs	r3, #0
 8018862:	6143      	str	r3, [r0, #20]
 8018864:	b005      	add	sp, #20
 8018866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018868:	682b      	ldr	r3, [r5, #0]
 801886a:	9903      	ldr	r1, [sp, #12]
 801886c:	408b      	lsls	r3, r1
 801886e:	9900      	ldr	r1, [sp, #0]
 8018870:	4319      	orrs	r1, r3
 8018872:	4663      	mov	r3, ip
 8018874:	c302      	stmia	r3!, {r1}
 8018876:	469c      	mov	ip, r3
 8018878:	cd02      	ldmia	r5!, {r1}
 801887a:	9b02      	ldr	r3, [sp, #8]
 801887c:	40d9      	lsrs	r1, r3
 801887e:	9100      	str	r1, [sp, #0]
 8018880:	e7d9      	b.n	8018836 <rshift+0x56>
 8018882:	c908      	ldmia	r1!, {r3}
 8018884:	c508      	stmia	r5!, {r3}
 8018886:	e7c1      	b.n	801880c <rshift+0x2c>

08018888 <__hexdig_fun>:
 8018888:	0002      	movs	r2, r0
 801888a:	3a30      	subs	r2, #48	; 0x30
 801888c:	0003      	movs	r3, r0
 801888e:	2a09      	cmp	r2, #9
 8018890:	d802      	bhi.n	8018898 <__hexdig_fun+0x10>
 8018892:	3b20      	subs	r3, #32
 8018894:	b2d8      	uxtb	r0, r3
 8018896:	4770      	bx	lr
 8018898:	0002      	movs	r2, r0
 801889a:	3a61      	subs	r2, #97	; 0x61
 801889c:	2a05      	cmp	r2, #5
 801889e:	d801      	bhi.n	80188a4 <__hexdig_fun+0x1c>
 80188a0:	3b47      	subs	r3, #71	; 0x47
 80188a2:	e7f7      	b.n	8018894 <__hexdig_fun+0xc>
 80188a4:	001a      	movs	r2, r3
 80188a6:	3a41      	subs	r2, #65	; 0x41
 80188a8:	2000      	movs	r0, #0
 80188aa:	2a05      	cmp	r2, #5
 80188ac:	d8f3      	bhi.n	8018896 <__hexdig_fun+0xe>
 80188ae:	3b27      	subs	r3, #39	; 0x27
 80188b0:	e7f0      	b.n	8018894 <__hexdig_fun+0xc>
	...

080188b4 <__gethex>:
 80188b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188b6:	b08d      	sub	sp, #52	; 0x34
 80188b8:	930a      	str	r3, [sp, #40]	; 0x28
 80188ba:	4bbd      	ldr	r3, [pc, #756]	; (8018bb0 <__gethex+0x2fc>)
 80188bc:	9005      	str	r0, [sp, #20]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	9109      	str	r1, [sp, #36]	; 0x24
 80188c2:	0018      	movs	r0, r3
 80188c4:	9202      	str	r2, [sp, #8]
 80188c6:	9307      	str	r3, [sp, #28]
 80188c8:	f7e7 fc26 	bl	8000118 <strlen>
 80188cc:	2202      	movs	r2, #2
 80188ce:	9b07      	ldr	r3, [sp, #28]
 80188d0:	4252      	negs	r2, r2
 80188d2:	181b      	adds	r3, r3, r0
 80188d4:	3b01      	subs	r3, #1
 80188d6:	781b      	ldrb	r3, [r3, #0]
 80188d8:	9003      	str	r0, [sp, #12]
 80188da:	930b      	str	r3, [sp, #44]	; 0x2c
 80188dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188de:	6819      	ldr	r1, [r3, #0]
 80188e0:	1c8b      	adds	r3, r1, #2
 80188e2:	1a52      	subs	r2, r2, r1
 80188e4:	18d1      	adds	r1, r2, r3
 80188e6:	9301      	str	r3, [sp, #4]
 80188e8:	9108      	str	r1, [sp, #32]
 80188ea:	9901      	ldr	r1, [sp, #4]
 80188ec:	3301      	adds	r3, #1
 80188ee:	7808      	ldrb	r0, [r1, #0]
 80188f0:	2830      	cmp	r0, #48	; 0x30
 80188f2:	d0f7      	beq.n	80188e4 <__gethex+0x30>
 80188f4:	f7ff ffc8 	bl	8018888 <__hexdig_fun>
 80188f8:	1e04      	subs	r4, r0, #0
 80188fa:	d13e      	bne.n	801897a <__gethex+0xc6>
 80188fc:	9a03      	ldr	r2, [sp, #12]
 80188fe:	9907      	ldr	r1, [sp, #28]
 8018900:	9801      	ldr	r0, [sp, #4]
 8018902:	f7fc fdf4 	bl	80154ee <strncmp>
 8018906:	1e07      	subs	r7, r0, #0
 8018908:	d000      	beq.n	801890c <__gethex+0x58>
 801890a:	e06f      	b.n	80189ec <__gethex+0x138>
 801890c:	9b01      	ldr	r3, [sp, #4]
 801890e:	9a03      	ldr	r2, [sp, #12]
 8018910:	5c98      	ldrb	r0, [r3, r2]
 8018912:	189d      	adds	r5, r3, r2
 8018914:	f7ff ffb8 	bl	8018888 <__hexdig_fun>
 8018918:	2301      	movs	r3, #1
 801891a:	9304      	str	r3, [sp, #16]
 801891c:	2800      	cmp	r0, #0
 801891e:	d034      	beq.n	801898a <__gethex+0xd6>
 8018920:	9501      	str	r5, [sp, #4]
 8018922:	9b01      	ldr	r3, [sp, #4]
 8018924:	7818      	ldrb	r0, [r3, #0]
 8018926:	2830      	cmp	r0, #48	; 0x30
 8018928:	d009      	beq.n	801893e <__gethex+0x8a>
 801892a:	f7ff ffad 	bl	8018888 <__hexdig_fun>
 801892e:	4243      	negs	r3, r0
 8018930:	4143      	adcs	r3, r0
 8018932:	9304      	str	r3, [sp, #16]
 8018934:	2301      	movs	r3, #1
 8018936:	002c      	movs	r4, r5
 8018938:	9308      	str	r3, [sp, #32]
 801893a:	9d01      	ldr	r5, [sp, #4]
 801893c:	e004      	b.n	8018948 <__gethex+0x94>
 801893e:	9b01      	ldr	r3, [sp, #4]
 8018940:	3301      	adds	r3, #1
 8018942:	9301      	str	r3, [sp, #4]
 8018944:	e7ed      	b.n	8018922 <__gethex+0x6e>
 8018946:	3501      	adds	r5, #1
 8018948:	7828      	ldrb	r0, [r5, #0]
 801894a:	f7ff ff9d 	bl	8018888 <__hexdig_fun>
 801894e:	1e07      	subs	r7, r0, #0
 8018950:	d1f9      	bne.n	8018946 <__gethex+0x92>
 8018952:	0028      	movs	r0, r5
 8018954:	9a03      	ldr	r2, [sp, #12]
 8018956:	9907      	ldr	r1, [sp, #28]
 8018958:	f7fc fdc9 	bl	80154ee <strncmp>
 801895c:	2800      	cmp	r0, #0
 801895e:	d112      	bne.n	8018986 <__gethex+0xd2>
 8018960:	2c00      	cmp	r4, #0
 8018962:	d107      	bne.n	8018974 <__gethex+0xc0>
 8018964:	9b03      	ldr	r3, [sp, #12]
 8018966:	18ed      	adds	r5, r5, r3
 8018968:	002c      	movs	r4, r5
 801896a:	7828      	ldrb	r0, [r5, #0]
 801896c:	f7ff ff8c 	bl	8018888 <__hexdig_fun>
 8018970:	2800      	cmp	r0, #0
 8018972:	d106      	bne.n	8018982 <__gethex+0xce>
 8018974:	1b67      	subs	r7, r4, r5
 8018976:	00bf      	lsls	r7, r7, #2
 8018978:	e007      	b.n	801898a <__gethex+0xd6>
 801897a:	2300      	movs	r3, #0
 801897c:	001c      	movs	r4, r3
 801897e:	9304      	str	r3, [sp, #16]
 8018980:	e7db      	b.n	801893a <__gethex+0x86>
 8018982:	3501      	adds	r5, #1
 8018984:	e7f1      	b.n	801896a <__gethex+0xb6>
 8018986:	2c00      	cmp	r4, #0
 8018988:	d1f4      	bne.n	8018974 <__gethex+0xc0>
 801898a:	2220      	movs	r2, #32
 801898c:	782b      	ldrb	r3, [r5, #0]
 801898e:	002e      	movs	r6, r5
 8018990:	4393      	bics	r3, r2
 8018992:	2b50      	cmp	r3, #80	; 0x50
 8018994:	d11d      	bne.n	80189d2 <__gethex+0x11e>
 8018996:	786b      	ldrb	r3, [r5, #1]
 8018998:	2b2b      	cmp	r3, #43	; 0x2b
 801899a:	d02c      	beq.n	80189f6 <__gethex+0x142>
 801899c:	2b2d      	cmp	r3, #45	; 0x2d
 801899e:	d02e      	beq.n	80189fe <__gethex+0x14a>
 80189a0:	2300      	movs	r3, #0
 80189a2:	1c6e      	adds	r6, r5, #1
 80189a4:	9306      	str	r3, [sp, #24]
 80189a6:	7830      	ldrb	r0, [r6, #0]
 80189a8:	f7ff ff6e 	bl	8018888 <__hexdig_fun>
 80189ac:	1e43      	subs	r3, r0, #1
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	2b18      	cmp	r3, #24
 80189b2:	d82b      	bhi.n	8018a0c <__gethex+0x158>
 80189b4:	3810      	subs	r0, #16
 80189b6:	0004      	movs	r4, r0
 80189b8:	7870      	ldrb	r0, [r6, #1]
 80189ba:	f7ff ff65 	bl	8018888 <__hexdig_fun>
 80189be:	1e43      	subs	r3, r0, #1
 80189c0:	b2db      	uxtb	r3, r3
 80189c2:	3601      	adds	r6, #1
 80189c4:	2b18      	cmp	r3, #24
 80189c6:	d91c      	bls.n	8018a02 <__gethex+0x14e>
 80189c8:	9b06      	ldr	r3, [sp, #24]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d000      	beq.n	80189d0 <__gethex+0x11c>
 80189ce:	4264      	negs	r4, r4
 80189d0:	193f      	adds	r7, r7, r4
 80189d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189d4:	601e      	str	r6, [r3, #0]
 80189d6:	9b04      	ldr	r3, [sp, #16]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d019      	beq.n	8018a10 <__gethex+0x15c>
 80189dc:	2600      	movs	r6, #0
 80189de:	9b08      	ldr	r3, [sp, #32]
 80189e0:	42b3      	cmp	r3, r6
 80189e2:	d100      	bne.n	80189e6 <__gethex+0x132>
 80189e4:	3606      	adds	r6, #6
 80189e6:	0030      	movs	r0, r6
 80189e8:	b00d      	add	sp, #52	; 0x34
 80189ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189ec:	2301      	movs	r3, #1
 80189ee:	0027      	movs	r7, r4
 80189f0:	9d01      	ldr	r5, [sp, #4]
 80189f2:	9304      	str	r3, [sp, #16]
 80189f4:	e7c9      	b.n	801898a <__gethex+0xd6>
 80189f6:	2300      	movs	r3, #0
 80189f8:	9306      	str	r3, [sp, #24]
 80189fa:	1cae      	adds	r6, r5, #2
 80189fc:	e7d3      	b.n	80189a6 <__gethex+0xf2>
 80189fe:	2301      	movs	r3, #1
 8018a00:	e7fa      	b.n	80189f8 <__gethex+0x144>
 8018a02:	230a      	movs	r3, #10
 8018a04:	435c      	muls	r4, r3
 8018a06:	1824      	adds	r4, r4, r0
 8018a08:	3c10      	subs	r4, #16
 8018a0a:	e7d5      	b.n	80189b8 <__gethex+0x104>
 8018a0c:	002e      	movs	r6, r5
 8018a0e:	e7e0      	b.n	80189d2 <__gethex+0x11e>
 8018a10:	9b01      	ldr	r3, [sp, #4]
 8018a12:	9904      	ldr	r1, [sp, #16]
 8018a14:	1aeb      	subs	r3, r5, r3
 8018a16:	3b01      	subs	r3, #1
 8018a18:	2b07      	cmp	r3, #7
 8018a1a:	dc0a      	bgt.n	8018a32 <__gethex+0x17e>
 8018a1c:	9805      	ldr	r0, [sp, #20]
 8018a1e:	f000 fa91 	bl	8018f44 <_Balloc>
 8018a22:	1e04      	subs	r4, r0, #0
 8018a24:	d108      	bne.n	8018a38 <__gethex+0x184>
 8018a26:	0002      	movs	r2, r0
 8018a28:	21de      	movs	r1, #222	; 0xde
 8018a2a:	4b62      	ldr	r3, [pc, #392]	; (8018bb4 <__gethex+0x300>)
 8018a2c:	4862      	ldr	r0, [pc, #392]	; (8018bb8 <__gethex+0x304>)
 8018a2e:	f001 f80b 	bl	8019a48 <__assert_func>
 8018a32:	3101      	adds	r1, #1
 8018a34:	105b      	asrs	r3, r3, #1
 8018a36:	e7ef      	b.n	8018a18 <__gethex+0x164>
 8018a38:	0003      	movs	r3, r0
 8018a3a:	3314      	adds	r3, #20
 8018a3c:	9304      	str	r3, [sp, #16]
 8018a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8018a40:	2300      	movs	r3, #0
 8018a42:	001e      	movs	r6, r3
 8018a44:	9306      	str	r3, [sp, #24]
 8018a46:	9b01      	ldr	r3, [sp, #4]
 8018a48:	42ab      	cmp	r3, r5
 8018a4a:	d340      	bcc.n	8018ace <__gethex+0x21a>
 8018a4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8018a4e:	9b04      	ldr	r3, [sp, #16]
 8018a50:	c540      	stmia	r5!, {r6}
 8018a52:	1aed      	subs	r5, r5, r3
 8018a54:	10ad      	asrs	r5, r5, #2
 8018a56:	0030      	movs	r0, r6
 8018a58:	6125      	str	r5, [r4, #16]
 8018a5a:	f000 fb35 	bl	80190c8 <__hi0bits>
 8018a5e:	9b02      	ldr	r3, [sp, #8]
 8018a60:	016d      	lsls	r5, r5, #5
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	1a2e      	subs	r6, r5, r0
 8018a66:	9301      	str	r3, [sp, #4]
 8018a68:	429e      	cmp	r6, r3
 8018a6a:	dd5a      	ble.n	8018b22 <__gethex+0x26e>
 8018a6c:	1af6      	subs	r6, r6, r3
 8018a6e:	0031      	movs	r1, r6
 8018a70:	0020      	movs	r0, r4
 8018a72:	f000 febe 	bl	80197f2 <__any_on>
 8018a76:	1e05      	subs	r5, r0, #0
 8018a78:	d016      	beq.n	8018aa8 <__gethex+0x1f4>
 8018a7a:	2501      	movs	r5, #1
 8018a7c:	211f      	movs	r1, #31
 8018a7e:	0028      	movs	r0, r5
 8018a80:	1e73      	subs	r3, r6, #1
 8018a82:	4019      	ands	r1, r3
 8018a84:	4088      	lsls	r0, r1
 8018a86:	0001      	movs	r1, r0
 8018a88:	115a      	asrs	r2, r3, #5
 8018a8a:	9804      	ldr	r0, [sp, #16]
 8018a8c:	0092      	lsls	r2, r2, #2
 8018a8e:	5812      	ldr	r2, [r2, r0]
 8018a90:	420a      	tst	r2, r1
 8018a92:	d009      	beq.n	8018aa8 <__gethex+0x1f4>
 8018a94:	42ab      	cmp	r3, r5
 8018a96:	dd06      	ble.n	8018aa6 <__gethex+0x1f2>
 8018a98:	0020      	movs	r0, r4
 8018a9a:	1eb1      	subs	r1, r6, #2
 8018a9c:	f000 fea9 	bl	80197f2 <__any_on>
 8018aa0:	3502      	adds	r5, #2
 8018aa2:	2800      	cmp	r0, #0
 8018aa4:	d100      	bne.n	8018aa8 <__gethex+0x1f4>
 8018aa6:	2502      	movs	r5, #2
 8018aa8:	0031      	movs	r1, r6
 8018aaa:	0020      	movs	r0, r4
 8018aac:	f7ff fe98 	bl	80187e0 <rshift>
 8018ab0:	19bf      	adds	r7, r7, r6
 8018ab2:	9b02      	ldr	r3, [sp, #8]
 8018ab4:	689b      	ldr	r3, [r3, #8]
 8018ab6:	9303      	str	r3, [sp, #12]
 8018ab8:	42bb      	cmp	r3, r7
 8018aba:	da42      	bge.n	8018b42 <__gethex+0x28e>
 8018abc:	0021      	movs	r1, r4
 8018abe:	9805      	ldr	r0, [sp, #20]
 8018ac0:	f000 fa68 	bl	8018f94 <_Bfree>
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018ac8:	26a3      	movs	r6, #163	; 0xa3
 8018aca:	6013      	str	r3, [r2, #0]
 8018acc:	e78b      	b.n	80189e6 <__gethex+0x132>
 8018ace:	1e6b      	subs	r3, r5, #1
 8018ad0:	9308      	str	r3, [sp, #32]
 8018ad2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ad4:	781b      	ldrb	r3, [r3, #0]
 8018ad6:	4293      	cmp	r3, r2
 8018ad8:	d014      	beq.n	8018b04 <__gethex+0x250>
 8018ada:	9b06      	ldr	r3, [sp, #24]
 8018adc:	2b20      	cmp	r3, #32
 8018ade:	d104      	bne.n	8018aea <__gethex+0x236>
 8018ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ae2:	c340      	stmia	r3!, {r6}
 8018ae4:	2600      	movs	r6, #0
 8018ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8018ae8:	9606      	str	r6, [sp, #24]
 8018aea:	9b08      	ldr	r3, [sp, #32]
 8018aec:	7818      	ldrb	r0, [r3, #0]
 8018aee:	f7ff fecb 	bl	8018888 <__hexdig_fun>
 8018af2:	230f      	movs	r3, #15
 8018af4:	4018      	ands	r0, r3
 8018af6:	9b06      	ldr	r3, [sp, #24]
 8018af8:	9d08      	ldr	r5, [sp, #32]
 8018afa:	4098      	lsls	r0, r3
 8018afc:	3304      	adds	r3, #4
 8018afe:	4306      	orrs	r6, r0
 8018b00:	9306      	str	r3, [sp, #24]
 8018b02:	e7a0      	b.n	8018a46 <__gethex+0x192>
 8018b04:	2301      	movs	r3, #1
 8018b06:	9a03      	ldr	r2, [sp, #12]
 8018b08:	1a9d      	subs	r5, r3, r2
 8018b0a:	9b08      	ldr	r3, [sp, #32]
 8018b0c:	195d      	adds	r5, r3, r5
 8018b0e:	9b01      	ldr	r3, [sp, #4]
 8018b10:	429d      	cmp	r5, r3
 8018b12:	d3e2      	bcc.n	8018ada <__gethex+0x226>
 8018b14:	0028      	movs	r0, r5
 8018b16:	9907      	ldr	r1, [sp, #28]
 8018b18:	f7fc fce9 	bl	80154ee <strncmp>
 8018b1c:	2800      	cmp	r0, #0
 8018b1e:	d1dc      	bne.n	8018ada <__gethex+0x226>
 8018b20:	e791      	b.n	8018a46 <__gethex+0x192>
 8018b22:	9b01      	ldr	r3, [sp, #4]
 8018b24:	2500      	movs	r5, #0
 8018b26:	429e      	cmp	r6, r3
 8018b28:	dac3      	bge.n	8018ab2 <__gethex+0x1fe>
 8018b2a:	1b9e      	subs	r6, r3, r6
 8018b2c:	0021      	movs	r1, r4
 8018b2e:	0032      	movs	r2, r6
 8018b30:	9805      	ldr	r0, [sp, #20]
 8018b32:	f000 fc19 	bl	8019368 <__lshift>
 8018b36:	0003      	movs	r3, r0
 8018b38:	3314      	adds	r3, #20
 8018b3a:	0004      	movs	r4, r0
 8018b3c:	1bbf      	subs	r7, r7, r6
 8018b3e:	9304      	str	r3, [sp, #16]
 8018b40:	e7b7      	b.n	8018ab2 <__gethex+0x1fe>
 8018b42:	9b02      	ldr	r3, [sp, #8]
 8018b44:	685e      	ldr	r6, [r3, #4]
 8018b46:	42be      	cmp	r6, r7
 8018b48:	dd71      	ble.n	8018c2e <__gethex+0x37a>
 8018b4a:	9b01      	ldr	r3, [sp, #4]
 8018b4c:	1bf6      	subs	r6, r6, r7
 8018b4e:	42b3      	cmp	r3, r6
 8018b50:	dc38      	bgt.n	8018bc4 <__gethex+0x310>
 8018b52:	9b02      	ldr	r3, [sp, #8]
 8018b54:	68db      	ldr	r3, [r3, #12]
 8018b56:	2b02      	cmp	r3, #2
 8018b58:	d026      	beq.n	8018ba8 <__gethex+0x2f4>
 8018b5a:	2b03      	cmp	r3, #3
 8018b5c:	d02e      	beq.n	8018bbc <__gethex+0x308>
 8018b5e:	2b01      	cmp	r3, #1
 8018b60:	d119      	bne.n	8018b96 <__gethex+0x2e2>
 8018b62:	9b01      	ldr	r3, [sp, #4]
 8018b64:	42b3      	cmp	r3, r6
 8018b66:	d116      	bne.n	8018b96 <__gethex+0x2e2>
 8018b68:	2b01      	cmp	r3, #1
 8018b6a:	d10d      	bne.n	8018b88 <__gethex+0x2d4>
 8018b6c:	9b02      	ldr	r3, [sp, #8]
 8018b6e:	2662      	movs	r6, #98	; 0x62
 8018b70:	685b      	ldr	r3, [r3, #4]
 8018b72:	9301      	str	r3, [sp, #4]
 8018b74:	9a01      	ldr	r2, [sp, #4]
 8018b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b78:	601a      	str	r2, [r3, #0]
 8018b7a:	2301      	movs	r3, #1
 8018b7c:	9a04      	ldr	r2, [sp, #16]
 8018b7e:	6123      	str	r3, [r4, #16]
 8018b80:	6013      	str	r3, [r2, #0]
 8018b82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b84:	601c      	str	r4, [r3, #0]
 8018b86:	e72e      	b.n	80189e6 <__gethex+0x132>
 8018b88:	9901      	ldr	r1, [sp, #4]
 8018b8a:	0020      	movs	r0, r4
 8018b8c:	3901      	subs	r1, #1
 8018b8e:	f000 fe30 	bl	80197f2 <__any_on>
 8018b92:	2800      	cmp	r0, #0
 8018b94:	d1ea      	bne.n	8018b6c <__gethex+0x2b8>
 8018b96:	0021      	movs	r1, r4
 8018b98:	9805      	ldr	r0, [sp, #20]
 8018b9a:	f000 f9fb 	bl	8018f94 <_Bfree>
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018ba2:	2650      	movs	r6, #80	; 0x50
 8018ba4:	6013      	str	r3, [r2, #0]
 8018ba6:	e71e      	b.n	80189e6 <__gethex+0x132>
 8018ba8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d1f3      	bne.n	8018b96 <__gethex+0x2e2>
 8018bae:	e7dd      	b.n	8018b6c <__gethex+0x2b8>
 8018bb0:	0801e7e4 	.word	0x0801e7e4
 8018bb4:	0801e709 	.word	0x0801e709
 8018bb8:	0801e779 	.word	0x0801e779
 8018bbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d1d4      	bne.n	8018b6c <__gethex+0x2b8>
 8018bc2:	e7e8      	b.n	8018b96 <__gethex+0x2e2>
 8018bc4:	1e77      	subs	r7, r6, #1
 8018bc6:	2d00      	cmp	r5, #0
 8018bc8:	d12f      	bne.n	8018c2a <__gethex+0x376>
 8018bca:	2f00      	cmp	r7, #0
 8018bcc:	d004      	beq.n	8018bd8 <__gethex+0x324>
 8018bce:	0039      	movs	r1, r7
 8018bd0:	0020      	movs	r0, r4
 8018bd2:	f000 fe0e 	bl	80197f2 <__any_on>
 8018bd6:	0005      	movs	r5, r0
 8018bd8:	231f      	movs	r3, #31
 8018bda:	117a      	asrs	r2, r7, #5
 8018bdc:	401f      	ands	r7, r3
 8018bde:	3b1e      	subs	r3, #30
 8018be0:	40bb      	lsls	r3, r7
 8018be2:	9904      	ldr	r1, [sp, #16]
 8018be4:	0092      	lsls	r2, r2, #2
 8018be6:	5852      	ldr	r2, [r2, r1]
 8018be8:	421a      	tst	r2, r3
 8018bea:	d001      	beq.n	8018bf0 <__gethex+0x33c>
 8018bec:	2302      	movs	r3, #2
 8018bee:	431d      	orrs	r5, r3
 8018bf0:	9b01      	ldr	r3, [sp, #4]
 8018bf2:	0031      	movs	r1, r6
 8018bf4:	1b9b      	subs	r3, r3, r6
 8018bf6:	2602      	movs	r6, #2
 8018bf8:	0020      	movs	r0, r4
 8018bfa:	9301      	str	r3, [sp, #4]
 8018bfc:	f7ff fdf0 	bl	80187e0 <rshift>
 8018c00:	9b02      	ldr	r3, [sp, #8]
 8018c02:	685f      	ldr	r7, [r3, #4]
 8018c04:	2d00      	cmp	r5, #0
 8018c06:	d041      	beq.n	8018c8c <__gethex+0x3d8>
 8018c08:	9b02      	ldr	r3, [sp, #8]
 8018c0a:	68db      	ldr	r3, [r3, #12]
 8018c0c:	2b02      	cmp	r3, #2
 8018c0e:	d010      	beq.n	8018c32 <__gethex+0x37e>
 8018c10:	2b03      	cmp	r3, #3
 8018c12:	d012      	beq.n	8018c3a <__gethex+0x386>
 8018c14:	2b01      	cmp	r3, #1
 8018c16:	d106      	bne.n	8018c26 <__gethex+0x372>
 8018c18:	07aa      	lsls	r2, r5, #30
 8018c1a:	d504      	bpl.n	8018c26 <__gethex+0x372>
 8018c1c:	9a04      	ldr	r2, [sp, #16]
 8018c1e:	6810      	ldr	r0, [r2, #0]
 8018c20:	4305      	orrs	r5, r0
 8018c22:	421d      	tst	r5, r3
 8018c24:	d10c      	bne.n	8018c40 <__gethex+0x38c>
 8018c26:	2310      	movs	r3, #16
 8018c28:	e02f      	b.n	8018c8a <__gethex+0x3d6>
 8018c2a:	2501      	movs	r5, #1
 8018c2c:	e7d4      	b.n	8018bd8 <__gethex+0x324>
 8018c2e:	2601      	movs	r6, #1
 8018c30:	e7e8      	b.n	8018c04 <__gethex+0x350>
 8018c32:	2301      	movs	r3, #1
 8018c34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018c36:	1a9b      	subs	r3, r3, r2
 8018c38:	9313      	str	r3, [sp, #76]	; 0x4c
 8018c3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d0f2      	beq.n	8018c26 <__gethex+0x372>
 8018c40:	6923      	ldr	r3, [r4, #16]
 8018c42:	2000      	movs	r0, #0
 8018c44:	9303      	str	r3, [sp, #12]
 8018c46:	009b      	lsls	r3, r3, #2
 8018c48:	9304      	str	r3, [sp, #16]
 8018c4a:	0023      	movs	r3, r4
 8018c4c:	9a04      	ldr	r2, [sp, #16]
 8018c4e:	3314      	adds	r3, #20
 8018c50:	1899      	adds	r1, r3, r2
 8018c52:	681a      	ldr	r2, [r3, #0]
 8018c54:	1c55      	adds	r5, r2, #1
 8018c56:	d01e      	beq.n	8018c96 <__gethex+0x3e2>
 8018c58:	3201      	adds	r2, #1
 8018c5a:	601a      	str	r2, [r3, #0]
 8018c5c:	0023      	movs	r3, r4
 8018c5e:	3314      	adds	r3, #20
 8018c60:	2e02      	cmp	r6, #2
 8018c62:	d140      	bne.n	8018ce6 <__gethex+0x432>
 8018c64:	9a02      	ldr	r2, [sp, #8]
 8018c66:	9901      	ldr	r1, [sp, #4]
 8018c68:	6812      	ldr	r2, [r2, #0]
 8018c6a:	3a01      	subs	r2, #1
 8018c6c:	428a      	cmp	r2, r1
 8018c6e:	d10b      	bne.n	8018c88 <__gethex+0x3d4>
 8018c70:	114a      	asrs	r2, r1, #5
 8018c72:	211f      	movs	r1, #31
 8018c74:	9801      	ldr	r0, [sp, #4]
 8018c76:	0092      	lsls	r2, r2, #2
 8018c78:	4001      	ands	r1, r0
 8018c7a:	2001      	movs	r0, #1
 8018c7c:	0005      	movs	r5, r0
 8018c7e:	408d      	lsls	r5, r1
 8018c80:	58d3      	ldr	r3, [r2, r3]
 8018c82:	422b      	tst	r3, r5
 8018c84:	d000      	beq.n	8018c88 <__gethex+0x3d4>
 8018c86:	2601      	movs	r6, #1
 8018c88:	2320      	movs	r3, #32
 8018c8a:	431e      	orrs	r6, r3
 8018c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018c8e:	601c      	str	r4, [r3, #0]
 8018c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c92:	601f      	str	r7, [r3, #0]
 8018c94:	e6a7      	b.n	80189e6 <__gethex+0x132>
 8018c96:	c301      	stmia	r3!, {r0}
 8018c98:	4299      	cmp	r1, r3
 8018c9a:	d8da      	bhi.n	8018c52 <__gethex+0x39e>
 8018c9c:	9b03      	ldr	r3, [sp, #12]
 8018c9e:	68a2      	ldr	r2, [r4, #8]
 8018ca0:	4293      	cmp	r3, r2
 8018ca2:	db17      	blt.n	8018cd4 <__gethex+0x420>
 8018ca4:	6863      	ldr	r3, [r4, #4]
 8018ca6:	9805      	ldr	r0, [sp, #20]
 8018ca8:	1c59      	adds	r1, r3, #1
 8018caa:	f000 f94b 	bl	8018f44 <_Balloc>
 8018cae:	1e05      	subs	r5, r0, #0
 8018cb0:	d103      	bne.n	8018cba <__gethex+0x406>
 8018cb2:	0002      	movs	r2, r0
 8018cb4:	2184      	movs	r1, #132	; 0x84
 8018cb6:	4b1c      	ldr	r3, [pc, #112]	; (8018d28 <__gethex+0x474>)
 8018cb8:	e6b8      	b.n	8018a2c <__gethex+0x178>
 8018cba:	0021      	movs	r1, r4
 8018cbc:	6923      	ldr	r3, [r4, #16]
 8018cbe:	310c      	adds	r1, #12
 8018cc0:	1c9a      	adds	r2, r3, #2
 8018cc2:	0092      	lsls	r2, r2, #2
 8018cc4:	300c      	adds	r0, #12
 8018cc6:	f7fc f99d 	bl	8015004 <memcpy>
 8018cca:	0021      	movs	r1, r4
 8018ccc:	9805      	ldr	r0, [sp, #20]
 8018cce:	f000 f961 	bl	8018f94 <_Bfree>
 8018cd2:	002c      	movs	r4, r5
 8018cd4:	6923      	ldr	r3, [r4, #16]
 8018cd6:	1c5a      	adds	r2, r3, #1
 8018cd8:	6122      	str	r2, [r4, #16]
 8018cda:	2201      	movs	r2, #1
 8018cdc:	3304      	adds	r3, #4
 8018cde:	009b      	lsls	r3, r3, #2
 8018ce0:	18e3      	adds	r3, r4, r3
 8018ce2:	605a      	str	r2, [r3, #4]
 8018ce4:	e7ba      	b.n	8018c5c <__gethex+0x3a8>
 8018ce6:	6922      	ldr	r2, [r4, #16]
 8018ce8:	9903      	ldr	r1, [sp, #12]
 8018cea:	428a      	cmp	r2, r1
 8018cec:	dd09      	ble.n	8018d02 <__gethex+0x44e>
 8018cee:	2101      	movs	r1, #1
 8018cf0:	0020      	movs	r0, r4
 8018cf2:	f7ff fd75 	bl	80187e0 <rshift>
 8018cf6:	9b02      	ldr	r3, [sp, #8]
 8018cf8:	3701      	adds	r7, #1
 8018cfa:	689b      	ldr	r3, [r3, #8]
 8018cfc:	42bb      	cmp	r3, r7
 8018cfe:	dac2      	bge.n	8018c86 <__gethex+0x3d2>
 8018d00:	e6dc      	b.n	8018abc <__gethex+0x208>
 8018d02:	221f      	movs	r2, #31
 8018d04:	9d01      	ldr	r5, [sp, #4]
 8018d06:	9901      	ldr	r1, [sp, #4]
 8018d08:	2601      	movs	r6, #1
 8018d0a:	4015      	ands	r5, r2
 8018d0c:	4211      	tst	r1, r2
 8018d0e:	d0bb      	beq.n	8018c88 <__gethex+0x3d4>
 8018d10:	9a04      	ldr	r2, [sp, #16]
 8018d12:	189b      	adds	r3, r3, r2
 8018d14:	3b04      	subs	r3, #4
 8018d16:	6818      	ldr	r0, [r3, #0]
 8018d18:	f000 f9d6 	bl	80190c8 <__hi0bits>
 8018d1c:	2320      	movs	r3, #32
 8018d1e:	1b5d      	subs	r5, r3, r5
 8018d20:	42a8      	cmp	r0, r5
 8018d22:	dbe4      	blt.n	8018cee <__gethex+0x43a>
 8018d24:	e7b0      	b.n	8018c88 <__gethex+0x3d4>
 8018d26:	46c0      	nop			; (mov r8, r8)
 8018d28:	0801e709 	.word	0x0801e709

08018d2c <L_shift>:
 8018d2c:	2308      	movs	r3, #8
 8018d2e:	b570      	push	{r4, r5, r6, lr}
 8018d30:	2520      	movs	r5, #32
 8018d32:	1a9a      	subs	r2, r3, r2
 8018d34:	0092      	lsls	r2, r2, #2
 8018d36:	1aad      	subs	r5, r5, r2
 8018d38:	6843      	ldr	r3, [r0, #4]
 8018d3a:	6806      	ldr	r6, [r0, #0]
 8018d3c:	001c      	movs	r4, r3
 8018d3e:	40ac      	lsls	r4, r5
 8018d40:	40d3      	lsrs	r3, r2
 8018d42:	4334      	orrs	r4, r6
 8018d44:	6004      	str	r4, [r0, #0]
 8018d46:	6043      	str	r3, [r0, #4]
 8018d48:	3004      	adds	r0, #4
 8018d4a:	4288      	cmp	r0, r1
 8018d4c:	d3f4      	bcc.n	8018d38 <L_shift+0xc>
 8018d4e:	bd70      	pop	{r4, r5, r6, pc}

08018d50 <__match>:
 8018d50:	b530      	push	{r4, r5, lr}
 8018d52:	6803      	ldr	r3, [r0, #0]
 8018d54:	780c      	ldrb	r4, [r1, #0]
 8018d56:	3301      	adds	r3, #1
 8018d58:	2c00      	cmp	r4, #0
 8018d5a:	d102      	bne.n	8018d62 <__match+0x12>
 8018d5c:	6003      	str	r3, [r0, #0]
 8018d5e:	2001      	movs	r0, #1
 8018d60:	bd30      	pop	{r4, r5, pc}
 8018d62:	781a      	ldrb	r2, [r3, #0]
 8018d64:	0015      	movs	r5, r2
 8018d66:	3d41      	subs	r5, #65	; 0x41
 8018d68:	2d19      	cmp	r5, #25
 8018d6a:	d800      	bhi.n	8018d6e <__match+0x1e>
 8018d6c:	3220      	adds	r2, #32
 8018d6e:	3101      	adds	r1, #1
 8018d70:	42a2      	cmp	r2, r4
 8018d72:	d0ef      	beq.n	8018d54 <__match+0x4>
 8018d74:	2000      	movs	r0, #0
 8018d76:	e7f3      	b.n	8018d60 <__match+0x10>

08018d78 <__hexnan>:
 8018d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d7a:	680b      	ldr	r3, [r1, #0]
 8018d7c:	b08b      	sub	sp, #44	; 0x2c
 8018d7e:	115c      	asrs	r4, r3, #5
 8018d80:	00a4      	lsls	r4, r4, #2
 8018d82:	9201      	str	r2, [sp, #4]
 8018d84:	1912      	adds	r2, r2, r4
 8018d86:	0019      	movs	r1, r3
 8018d88:	9202      	str	r2, [sp, #8]
 8018d8a:	221f      	movs	r2, #31
 8018d8c:	4011      	ands	r1, r2
 8018d8e:	9008      	str	r0, [sp, #32]
 8018d90:	9106      	str	r1, [sp, #24]
 8018d92:	4213      	tst	r3, r2
 8018d94:	d002      	beq.n	8018d9c <__hexnan+0x24>
 8018d96:	9b02      	ldr	r3, [sp, #8]
 8018d98:	3304      	adds	r3, #4
 8018d9a:	9302      	str	r3, [sp, #8]
 8018d9c:	9b02      	ldr	r3, [sp, #8]
 8018d9e:	2500      	movs	r5, #0
 8018da0:	1f1e      	subs	r6, r3, #4
 8018da2:	0037      	movs	r7, r6
 8018da4:	0034      	movs	r4, r6
 8018da6:	9b08      	ldr	r3, [sp, #32]
 8018da8:	6035      	str	r5, [r6, #0]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	9507      	str	r5, [sp, #28]
 8018dae:	9305      	str	r3, [sp, #20]
 8018db0:	9503      	str	r5, [sp, #12]
 8018db2:	9b05      	ldr	r3, [sp, #20]
 8018db4:	3301      	adds	r3, #1
 8018db6:	9309      	str	r3, [sp, #36]	; 0x24
 8018db8:	9b05      	ldr	r3, [sp, #20]
 8018dba:	785b      	ldrb	r3, [r3, #1]
 8018dbc:	9304      	str	r3, [sp, #16]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d028      	beq.n	8018e14 <__hexnan+0x9c>
 8018dc2:	9804      	ldr	r0, [sp, #16]
 8018dc4:	f7ff fd60 	bl	8018888 <__hexdig_fun>
 8018dc8:	2800      	cmp	r0, #0
 8018dca:	d154      	bne.n	8018e76 <__hexnan+0xfe>
 8018dcc:	9b04      	ldr	r3, [sp, #16]
 8018dce:	2b20      	cmp	r3, #32
 8018dd0:	d819      	bhi.n	8018e06 <__hexnan+0x8e>
 8018dd2:	9b03      	ldr	r3, [sp, #12]
 8018dd4:	9a07      	ldr	r2, [sp, #28]
 8018dd6:	4293      	cmp	r3, r2
 8018dd8:	dd12      	ble.n	8018e00 <__hexnan+0x88>
 8018dda:	42bc      	cmp	r4, r7
 8018ddc:	d206      	bcs.n	8018dec <__hexnan+0x74>
 8018dde:	2d07      	cmp	r5, #7
 8018de0:	dc04      	bgt.n	8018dec <__hexnan+0x74>
 8018de2:	002a      	movs	r2, r5
 8018de4:	0039      	movs	r1, r7
 8018de6:	0020      	movs	r0, r4
 8018de8:	f7ff ffa0 	bl	8018d2c <L_shift>
 8018dec:	9b01      	ldr	r3, [sp, #4]
 8018dee:	2508      	movs	r5, #8
 8018df0:	429c      	cmp	r4, r3
 8018df2:	d905      	bls.n	8018e00 <__hexnan+0x88>
 8018df4:	1f27      	subs	r7, r4, #4
 8018df6:	2500      	movs	r5, #0
 8018df8:	003c      	movs	r4, r7
 8018dfa:	9b03      	ldr	r3, [sp, #12]
 8018dfc:	603d      	str	r5, [r7, #0]
 8018dfe:	9307      	str	r3, [sp, #28]
 8018e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e02:	9305      	str	r3, [sp, #20]
 8018e04:	e7d5      	b.n	8018db2 <__hexnan+0x3a>
 8018e06:	9b04      	ldr	r3, [sp, #16]
 8018e08:	2b29      	cmp	r3, #41	; 0x29
 8018e0a:	d158      	bne.n	8018ebe <__hexnan+0x146>
 8018e0c:	9b05      	ldr	r3, [sp, #20]
 8018e0e:	9a08      	ldr	r2, [sp, #32]
 8018e10:	3302      	adds	r3, #2
 8018e12:	6013      	str	r3, [r2, #0]
 8018e14:	9b03      	ldr	r3, [sp, #12]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d051      	beq.n	8018ebe <__hexnan+0x146>
 8018e1a:	42bc      	cmp	r4, r7
 8018e1c:	d206      	bcs.n	8018e2c <__hexnan+0xb4>
 8018e1e:	2d07      	cmp	r5, #7
 8018e20:	dc04      	bgt.n	8018e2c <__hexnan+0xb4>
 8018e22:	002a      	movs	r2, r5
 8018e24:	0039      	movs	r1, r7
 8018e26:	0020      	movs	r0, r4
 8018e28:	f7ff ff80 	bl	8018d2c <L_shift>
 8018e2c:	9b01      	ldr	r3, [sp, #4]
 8018e2e:	429c      	cmp	r4, r3
 8018e30:	d935      	bls.n	8018e9e <__hexnan+0x126>
 8018e32:	001a      	movs	r2, r3
 8018e34:	0023      	movs	r3, r4
 8018e36:	cb02      	ldmia	r3!, {r1}
 8018e38:	c202      	stmia	r2!, {r1}
 8018e3a:	429e      	cmp	r6, r3
 8018e3c:	d2fb      	bcs.n	8018e36 <__hexnan+0xbe>
 8018e3e:	9b02      	ldr	r3, [sp, #8]
 8018e40:	1c61      	adds	r1, r4, #1
 8018e42:	1eda      	subs	r2, r3, #3
 8018e44:	2304      	movs	r3, #4
 8018e46:	4291      	cmp	r1, r2
 8018e48:	d805      	bhi.n	8018e56 <__hexnan+0xde>
 8018e4a:	9b02      	ldr	r3, [sp, #8]
 8018e4c:	3b04      	subs	r3, #4
 8018e4e:	1b1c      	subs	r4, r3, r4
 8018e50:	08a4      	lsrs	r4, r4, #2
 8018e52:	3401      	adds	r4, #1
 8018e54:	00a3      	lsls	r3, r4, #2
 8018e56:	9a01      	ldr	r2, [sp, #4]
 8018e58:	18d4      	adds	r4, r2, r3
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	c408      	stmia	r4!, {r3}
 8018e5e:	42a6      	cmp	r6, r4
 8018e60:	d2fc      	bcs.n	8018e5c <__hexnan+0xe4>
 8018e62:	6833      	ldr	r3, [r6, #0]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d104      	bne.n	8018e72 <__hexnan+0xfa>
 8018e68:	9b01      	ldr	r3, [sp, #4]
 8018e6a:	429e      	cmp	r6, r3
 8018e6c:	d125      	bne.n	8018eba <__hexnan+0x142>
 8018e6e:	2301      	movs	r3, #1
 8018e70:	6033      	str	r3, [r6, #0]
 8018e72:	2005      	movs	r0, #5
 8018e74:	e024      	b.n	8018ec0 <__hexnan+0x148>
 8018e76:	9b03      	ldr	r3, [sp, #12]
 8018e78:	3501      	adds	r5, #1
 8018e7a:	3301      	adds	r3, #1
 8018e7c:	9303      	str	r3, [sp, #12]
 8018e7e:	2d08      	cmp	r5, #8
 8018e80:	dd06      	ble.n	8018e90 <__hexnan+0x118>
 8018e82:	9b01      	ldr	r3, [sp, #4]
 8018e84:	429c      	cmp	r4, r3
 8018e86:	d9bb      	bls.n	8018e00 <__hexnan+0x88>
 8018e88:	2300      	movs	r3, #0
 8018e8a:	2501      	movs	r5, #1
 8018e8c:	3c04      	subs	r4, #4
 8018e8e:	6023      	str	r3, [r4, #0]
 8018e90:	220f      	movs	r2, #15
 8018e92:	6823      	ldr	r3, [r4, #0]
 8018e94:	4010      	ands	r0, r2
 8018e96:	011b      	lsls	r3, r3, #4
 8018e98:	4318      	orrs	r0, r3
 8018e9a:	6020      	str	r0, [r4, #0]
 8018e9c:	e7b0      	b.n	8018e00 <__hexnan+0x88>
 8018e9e:	9b06      	ldr	r3, [sp, #24]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d0de      	beq.n	8018e62 <__hexnan+0xea>
 8018ea4:	2220      	movs	r2, #32
 8018ea6:	1ad2      	subs	r2, r2, r3
 8018ea8:	2301      	movs	r3, #1
 8018eaa:	425b      	negs	r3, r3
 8018eac:	40d3      	lsrs	r3, r2
 8018eae:	9c02      	ldr	r4, [sp, #8]
 8018eb0:	3c04      	subs	r4, #4
 8018eb2:	6822      	ldr	r2, [r4, #0]
 8018eb4:	4013      	ands	r3, r2
 8018eb6:	6023      	str	r3, [r4, #0]
 8018eb8:	e7d3      	b.n	8018e62 <__hexnan+0xea>
 8018eba:	3e04      	subs	r6, #4
 8018ebc:	e7d1      	b.n	8018e62 <__hexnan+0xea>
 8018ebe:	2004      	movs	r0, #4
 8018ec0:	b00b      	add	sp, #44	; 0x2c
 8018ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018ec4 <__locale_mb_cur_max>:
 8018ec4:	2394      	movs	r3, #148	; 0x94
 8018ec6:	4a02      	ldr	r2, [pc, #8]	; (8018ed0 <__locale_mb_cur_max+0xc>)
 8018ec8:	005b      	lsls	r3, r3, #1
 8018eca:	5cd0      	ldrb	r0, [r2, r3]
 8018ecc:	4770      	bx	lr
 8018ece:	46c0      	nop			; (mov r8, r8)
 8018ed0:	20000980 	.word	0x20000980

08018ed4 <_localeconv_r>:
 8018ed4:	4800      	ldr	r0, [pc, #0]	; (8018ed8 <_localeconv_r+0x4>)
 8018ed6:	4770      	bx	lr
 8018ed8:	20000a70 	.word	0x20000a70

08018edc <__retarget_lock_init_recursive>:
 8018edc:	4770      	bx	lr

08018ede <__retarget_lock_close_recursive>:
 8018ede:	4770      	bx	lr

08018ee0 <__retarget_lock_acquire_recursive>:
 8018ee0:	4770      	bx	lr

08018ee2 <__retarget_lock_release_recursive>:
 8018ee2:	4770      	bx	lr

08018ee4 <__ascii_mbtowc>:
 8018ee4:	b082      	sub	sp, #8
 8018ee6:	2900      	cmp	r1, #0
 8018ee8:	d100      	bne.n	8018eec <__ascii_mbtowc+0x8>
 8018eea:	a901      	add	r1, sp, #4
 8018eec:	1e10      	subs	r0, r2, #0
 8018eee:	d006      	beq.n	8018efe <__ascii_mbtowc+0x1a>
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d006      	beq.n	8018f02 <__ascii_mbtowc+0x1e>
 8018ef4:	7813      	ldrb	r3, [r2, #0]
 8018ef6:	600b      	str	r3, [r1, #0]
 8018ef8:	7810      	ldrb	r0, [r2, #0]
 8018efa:	1e43      	subs	r3, r0, #1
 8018efc:	4198      	sbcs	r0, r3
 8018efe:	b002      	add	sp, #8
 8018f00:	4770      	bx	lr
 8018f02:	2002      	movs	r0, #2
 8018f04:	4240      	negs	r0, r0
 8018f06:	e7fa      	b.n	8018efe <__ascii_mbtowc+0x1a>

08018f08 <memchr>:
 8018f08:	b2c9      	uxtb	r1, r1
 8018f0a:	1882      	adds	r2, r0, r2
 8018f0c:	4290      	cmp	r0, r2
 8018f0e:	d101      	bne.n	8018f14 <memchr+0xc>
 8018f10:	2000      	movs	r0, #0
 8018f12:	4770      	bx	lr
 8018f14:	7803      	ldrb	r3, [r0, #0]
 8018f16:	428b      	cmp	r3, r1
 8018f18:	d0fb      	beq.n	8018f12 <memchr+0xa>
 8018f1a:	3001      	adds	r0, #1
 8018f1c:	e7f6      	b.n	8018f0c <memchr+0x4>

08018f1e <memmove>:
 8018f1e:	b510      	push	{r4, lr}
 8018f20:	4288      	cmp	r0, r1
 8018f22:	d902      	bls.n	8018f2a <memmove+0xc>
 8018f24:	188b      	adds	r3, r1, r2
 8018f26:	4298      	cmp	r0, r3
 8018f28:	d303      	bcc.n	8018f32 <memmove+0x14>
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	e007      	b.n	8018f3e <memmove+0x20>
 8018f2e:	5c8b      	ldrb	r3, [r1, r2]
 8018f30:	5483      	strb	r3, [r0, r2]
 8018f32:	3a01      	subs	r2, #1
 8018f34:	d2fb      	bcs.n	8018f2e <memmove+0x10>
 8018f36:	bd10      	pop	{r4, pc}
 8018f38:	5ccc      	ldrb	r4, [r1, r3]
 8018f3a:	54c4      	strb	r4, [r0, r3]
 8018f3c:	3301      	adds	r3, #1
 8018f3e:	429a      	cmp	r2, r3
 8018f40:	d1fa      	bne.n	8018f38 <memmove+0x1a>
 8018f42:	e7f8      	b.n	8018f36 <memmove+0x18>

08018f44 <_Balloc>:
 8018f44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018f46:	b570      	push	{r4, r5, r6, lr}
 8018f48:	0006      	movs	r6, r0
 8018f4a:	000c      	movs	r4, r1
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d012      	beq.n	8018f76 <_Balloc+0x32>
 8018f50:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8018f52:	00a3      	lsls	r3, r4, #2
 8018f54:	18d3      	adds	r3, r2, r3
 8018f56:	6818      	ldr	r0, [r3, #0]
 8018f58:	2800      	cmp	r0, #0
 8018f5a:	d115      	bne.n	8018f88 <_Balloc+0x44>
 8018f5c:	2101      	movs	r1, #1
 8018f5e:	000d      	movs	r5, r1
 8018f60:	40a5      	lsls	r5, r4
 8018f62:	1d6a      	adds	r2, r5, #5
 8018f64:	0030      	movs	r0, r6
 8018f66:	0092      	lsls	r2, r2, #2
 8018f68:	f7fb fdc6 	bl	8014af8 <_calloc_r>
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	d009      	beq.n	8018f84 <_Balloc+0x40>
 8018f70:	6044      	str	r4, [r0, #4]
 8018f72:	6085      	str	r5, [r0, #8]
 8018f74:	e00a      	b.n	8018f8c <_Balloc+0x48>
 8018f76:	2221      	movs	r2, #33	; 0x21
 8018f78:	2104      	movs	r1, #4
 8018f7a:	f7fb fdbd 	bl	8014af8 <_calloc_r>
 8018f7e:	64f0      	str	r0, [r6, #76]	; 0x4c
 8018f80:	2800      	cmp	r0, #0
 8018f82:	d1e5      	bne.n	8018f50 <_Balloc+0xc>
 8018f84:	2000      	movs	r0, #0
 8018f86:	bd70      	pop	{r4, r5, r6, pc}
 8018f88:	6802      	ldr	r2, [r0, #0]
 8018f8a:	601a      	str	r2, [r3, #0]
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	6103      	str	r3, [r0, #16]
 8018f90:	60c3      	str	r3, [r0, #12]
 8018f92:	e7f8      	b.n	8018f86 <_Balloc+0x42>

08018f94 <_Bfree>:
 8018f94:	2900      	cmp	r1, #0
 8018f96:	d006      	beq.n	8018fa6 <_Bfree+0x12>
 8018f98:	684b      	ldr	r3, [r1, #4]
 8018f9a:	009a      	lsls	r2, r3, #2
 8018f9c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018f9e:	189b      	adds	r3, r3, r2
 8018fa0:	681a      	ldr	r2, [r3, #0]
 8018fa2:	600a      	str	r2, [r1, #0]
 8018fa4:	6019      	str	r1, [r3, #0]
 8018fa6:	4770      	bx	lr

08018fa8 <__multadd>:
 8018fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018faa:	000e      	movs	r6, r1
 8018fac:	9001      	str	r0, [sp, #4]
 8018fae:	000c      	movs	r4, r1
 8018fb0:	001d      	movs	r5, r3
 8018fb2:	2000      	movs	r0, #0
 8018fb4:	690f      	ldr	r7, [r1, #16]
 8018fb6:	3614      	adds	r6, #20
 8018fb8:	6833      	ldr	r3, [r6, #0]
 8018fba:	3001      	adds	r0, #1
 8018fbc:	b299      	uxth	r1, r3
 8018fbe:	4351      	muls	r1, r2
 8018fc0:	0c1b      	lsrs	r3, r3, #16
 8018fc2:	4353      	muls	r3, r2
 8018fc4:	1949      	adds	r1, r1, r5
 8018fc6:	0c0d      	lsrs	r5, r1, #16
 8018fc8:	195b      	adds	r3, r3, r5
 8018fca:	0c1d      	lsrs	r5, r3, #16
 8018fcc:	b289      	uxth	r1, r1
 8018fce:	041b      	lsls	r3, r3, #16
 8018fd0:	185b      	adds	r3, r3, r1
 8018fd2:	c608      	stmia	r6!, {r3}
 8018fd4:	4287      	cmp	r7, r0
 8018fd6:	dcef      	bgt.n	8018fb8 <__multadd+0x10>
 8018fd8:	2d00      	cmp	r5, #0
 8018fda:	d022      	beq.n	8019022 <__multadd+0x7a>
 8018fdc:	68a3      	ldr	r3, [r4, #8]
 8018fde:	42bb      	cmp	r3, r7
 8018fe0:	dc19      	bgt.n	8019016 <__multadd+0x6e>
 8018fe2:	6863      	ldr	r3, [r4, #4]
 8018fe4:	9801      	ldr	r0, [sp, #4]
 8018fe6:	1c59      	adds	r1, r3, #1
 8018fe8:	f7ff ffac 	bl	8018f44 <_Balloc>
 8018fec:	1e06      	subs	r6, r0, #0
 8018fee:	d105      	bne.n	8018ffc <__multadd+0x54>
 8018ff0:	0002      	movs	r2, r0
 8018ff2:	21b5      	movs	r1, #181	; 0xb5
 8018ff4:	4b0c      	ldr	r3, [pc, #48]	; (8019028 <__multadd+0x80>)
 8018ff6:	480d      	ldr	r0, [pc, #52]	; (801902c <__multadd+0x84>)
 8018ff8:	f000 fd26 	bl	8019a48 <__assert_func>
 8018ffc:	0021      	movs	r1, r4
 8018ffe:	6923      	ldr	r3, [r4, #16]
 8019000:	310c      	adds	r1, #12
 8019002:	1c9a      	adds	r2, r3, #2
 8019004:	0092      	lsls	r2, r2, #2
 8019006:	300c      	adds	r0, #12
 8019008:	f7fb fffc 	bl	8015004 <memcpy>
 801900c:	0021      	movs	r1, r4
 801900e:	9801      	ldr	r0, [sp, #4]
 8019010:	f7ff ffc0 	bl	8018f94 <_Bfree>
 8019014:	0034      	movs	r4, r6
 8019016:	1d3b      	adds	r3, r7, #4
 8019018:	009b      	lsls	r3, r3, #2
 801901a:	18e3      	adds	r3, r4, r3
 801901c:	605d      	str	r5, [r3, #4]
 801901e:	1c7b      	adds	r3, r7, #1
 8019020:	6123      	str	r3, [r4, #16]
 8019022:	0020      	movs	r0, r4
 8019024:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019026:	46c0      	nop			; (mov r8, r8)
 8019028:	0801e709 	.word	0x0801e709
 801902c:	0801e7f8 	.word	0x0801e7f8

08019030 <__s2b>:
 8019030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019032:	0006      	movs	r6, r0
 8019034:	0018      	movs	r0, r3
 8019036:	000c      	movs	r4, r1
 8019038:	3008      	adds	r0, #8
 801903a:	2109      	movs	r1, #9
 801903c:	9301      	str	r3, [sp, #4]
 801903e:	0015      	movs	r5, r2
 8019040:	f7e7 f910 	bl	8000264 <__divsi3>
 8019044:	2301      	movs	r3, #1
 8019046:	2100      	movs	r1, #0
 8019048:	4283      	cmp	r3, r0
 801904a:	db0a      	blt.n	8019062 <__s2b+0x32>
 801904c:	0030      	movs	r0, r6
 801904e:	f7ff ff79 	bl	8018f44 <_Balloc>
 8019052:	1e01      	subs	r1, r0, #0
 8019054:	d108      	bne.n	8019068 <__s2b+0x38>
 8019056:	0002      	movs	r2, r0
 8019058:	4b19      	ldr	r3, [pc, #100]	; (80190c0 <__s2b+0x90>)
 801905a:	481a      	ldr	r0, [pc, #104]	; (80190c4 <__s2b+0x94>)
 801905c:	31ce      	adds	r1, #206	; 0xce
 801905e:	f000 fcf3 	bl	8019a48 <__assert_func>
 8019062:	005b      	lsls	r3, r3, #1
 8019064:	3101      	adds	r1, #1
 8019066:	e7ef      	b.n	8019048 <__s2b+0x18>
 8019068:	9b08      	ldr	r3, [sp, #32]
 801906a:	6143      	str	r3, [r0, #20]
 801906c:	2301      	movs	r3, #1
 801906e:	6103      	str	r3, [r0, #16]
 8019070:	2d09      	cmp	r5, #9
 8019072:	dd18      	ble.n	80190a6 <__s2b+0x76>
 8019074:	0023      	movs	r3, r4
 8019076:	3309      	adds	r3, #9
 8019078:	001f      	movs	r7, r3
 801907a:	9300      	str	r3, [sp, #0]
 801907c:	1964      	adds	r4, r4, r5
 801907e:	783b      	ldrb	r3, [r7, #0]
 8019080:	220a      	movs	r2, #10
 8019082:	0030      	movs	r0, r6
 8019084:	3b30      	subs	r3, #48	; 0x30
 8019086:	f7ff ff8f 	bl	8018fa8 <__multadd>
 801908a:	3701      	adds	r7, #1
 801908c:	0001      	movs	r1, r0
 801908e:	42a7      	cmp	r7, r4
 8019090:	d1f5      	bne.n	801907e <__s2b+0x4e>
 8019092:	002c      	movs	r4, r5
 8019094:	9b00      	ldr	r3, [sp, #0]
 8019096:	3c08      	subs	r4, #8
 8019098:	191c      	adds	r4, r3, r4
 801909a:	002f      	movs	r7, r5
 801909c:	9b01      	ldr	r3, [sp, #4]
 801909e:	429f      	cmp	r7, r3
 80190a0:	db04      	blt.n	80190ac <__s2b+0x7c>
 80190a2:	0008      	movs	r0, r1
 80190a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80190a6:	2509      	movs	r5, #9
 80190a8:	340a      	adds	r4, #10
 80190aa:	e7f6      	b.n	801909a <__s2b+0x6a>
 80190ac:	1b63      	subs	r3, r4, r5
 80190ae:	5ddb      	ldrb	r3, [r3, r7]
 80190b0:	220a      	movs	r2, #10
 80190b2:	0030      	movs	r0, r6
 80190b4:	3b30      	subs	r3, #48	; 0x30
 80190b6:	f7ff ff77 	bl	8018fa8 <__multadd>
 80190ba:	3701      	adds	r7, #1
 80190bc:	0001      	movs	r1, r0
 80190be:	e7ed      	b.n	801909c <__s2b+0x6c>
 80190c0:	0801e709 	.word	0x0801e709
 80190c4:	0801e7f8 	.word	0x0801e7f8

080190c8 <__hi0bits>:
 80190c8:	0003      	movs	r3, r0
 80190ca:	0c02      	lsrs	r2, r0, #16
 80190cc:	2000      	movs	r0, #0
 80190ce:	4282      	cmp	r2, r0
 80190d0:	d101      	bne.n	80190d6 <__hi0bits+0xe>
 80190d2:	041b      	lsls	r3, r3, #16
 80190d4:	3010      	adds	r0, #16
 80190d6:	0e1a      	lsrs	r2, r3, #24
 80190d8:	d101      	bne.n	80190de <__hi0bits+0x16>
 80190da:	3008      	adds	r0, #8
 80190dc:	021b      	lsls	r3, r3, #8
 80190de:	0f1a      	lsrs	r2, r3, #28
 80190e0:	d101      	bne.n	80190e6 <__hi0bits+0x1e>
 80190e2:	3004      	adds	r0, #4
 80190e4:	011b      	lsls	r3, r3, #4
 80190e6:	0f9a      	lsrs	r2, r3, #30
 80190e8:	d101      	bne.n	80190ee <__hi0bits+0x26>
 80190ea:	3002      	adds	r0, #2
 80190ec:	009b      	lsls	r3, r3, #2
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	db03      	blt.n	80190fa <__hi0bits+0x32>
 80190f2:	3001      	adds	r0, #1
 80190f4:	005b      	lsls	r3, r3, #1
 80190f6:	d400      	bmi.n	80190fa <__hi0bits+0x32>
 80190f8:	2020      	movs	r0, #32
 80190fa:	4770      	bx	lr

080190fc <__lo0bits>:
 80190fc:	6803      	ldr	r3, [r0, #0]
 80190fe:	0002      	movs	r2, r0
 8019100:	2107      	movs	r1, #7
 8019102:	0018      	movs	r0, r3
 8019104:	4008      	ands	r0, r1
 8019106:	420b      	tst	r3, r1
 8019108:	d00d      	beq.n	8019126 <__lo0bits+0x2a>
 801910a:	3906      	subs	r1, #6
 801910c:	2000      	movs	r0, #0
 801910e:	420b      	tst	r3, r1
 8019110:	d105      	bne.n	801911e <__lo0bits+0x22>
 8019112:	3002      	adds	r0, #2
 8019114:	4203      	tst	r3, r0
 8019116:	d003      	beq.n	8019120 <__lo0bits+0x24>
 8019118:	40cb      	lsrs	r3, r1
 801911a:	0008      	movs	r0, r1
 801911c:	6013      	str	r3, [r2, #0]
 801911e:	4770      	bx	lr
 8019120:	089b      	lsrs	r3, r3, #2
 8019122:	6013      	str	r3, [r2, #0]
 8019124:	e7fb      	b.n	801911e <__lo0bits+0x22>
 8019126:	b299      	uxth	r1, r3
 8019128:	2900      	cmp	r1, #0
 801912a:	d101      	bne.n	8019130 <__lo0bits+0x34>
 801912c:	2010      	movs	r0, #16
 801912e:	0c1b      	lsrs	r3, r3, #16
 8019130:	b2d9      	uxtb	r1, r3
 8019132:	2900      	cmp	r1, #0
 8019134:	d101      	bne.n	801913a <__lo0bits+0x3e>
 8019136:	3008      	adds	r0, #8
 8019138:	0a1b      	lsrs	r3, r3, #8
 801913a:	0719      	lsls	r1, r3, #28
 801913c:	d101      	bne.n	8019142 <__lo0bits+0x46>
 801913e:	3004      	adds	r0, #4
 8019140:	091b      	lsrs	r3, r3, #4
 8019142:	0799      	lsls	r1, r3, #30
 8019144:	d101      	bne.n	801914a <__lo0bits+0x4e>
 8019146:	3002      	adds	r0, #2
 8019148:	089b      	lsrs	r3, r3, #2
 801914a:	07d9      	lsls	r1, r3, #31
 801914c:	d4e9      	bmi.n	8019122 <__lo0bits+0x26>
 801914e:	3001      	adds	r0, #1
 8019150:	085b      	lsrs	r3, r3, #1
 8019152:	d1e6      	bne.n	8019122 <__lo0bits+0x26>
 8019154:	2020      	movs	r0, #32
 8019156:	e7e2      	b.n	801911e <__lo0bits+0x22>

08019158 <__i2b>:
 8019158:	b510      	push	{r4, lr}
 801915a:	000c      	movs	r4, r1
 801915c:	2101      	movs	r1, #1
 801915e:	f7ff fef1 	bl	8018f44 <_Balloc>
 8019162:	2800      	cmp	r0, #0
 8019164:	d106      	bne.n	8019174 <__i2b+0x1c>
 8019166:	21a0      	movs	r1, #160	; 0xa0
 8019168:	0002      	movs	r2, r0
 801916a:	4b04      	ldr	r3, [pc, #16]	; (801917c <__i2b+0x24>)
 801916c:	4804      	ldr	r0, [pc, #16]	; (8019180 <__i2b+0x28>)
 801916e:	0049      	lsls	r1, r1, #1
 8019170:	f000 fc6a 	bl	8019a48 <__assert_func>
 8019174:	2301      	movs	r3, #1
 8019176:	6144      	str	r4, [r0, #20]
 8019178:	6103      	str	r3, [r0, #16]
 801917a:	bd10      	pop	{r4, pc}
 801917c:	0801e709 	.word	0x0801e709
 8019180:	0801e7f8 	.word	0x0801e7f8

08019184 <__multiply>:
 8019184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019186:	690b      	ldr	r3, [r1, #16]
 8019188:	0014      	movs	r4, r2
 801918a:	6912      	ldr	r2, [r2, #16]
 801918c:	000d      	movs	r5, r1
 801918e:	b089      	sub	sp, #36	; 0x24
 8019190:	4293      	cmp	r3, r2
 8019192:	da01      	bge.n	8019198 <__multiply+0x14>
 8019194:	0025      	movs	r5, r4
 8019196:	000c      	movs	r4, r1
 8019198:	692f      	ldr	r7, [r5, #16]
 801919a:	6926      	ldr	r6, [r4, #16]
 801919c:	6869      	ldr	r1, [r5, #4]
 801919e:	19bb      	adds	r3, r7, r6
 80191a0:	9302      	str	r3, [sp, #8]
 80191a2:	68ab      	ldr	r3, [r5, #8]
 80191a4:	19ba      	adds	r2, r7, r6
 80191a6:	4293      	cmp	r3, r2
 80191a8:	da00      	bge.n	80191ac <__multiply+0x28>
 80191aa:	3101      	adds	r1, #1
 80191ac:	f7ff feca 	bl	8018f44 <_Balloc>
 80191b0:	9001      	str	r0, [sp, #4]
 80191b2:	2800      	cmp	r0, #0
 80191b4:	d106      	bne.n	80191c4 <__multiply+0x40>
 80191b6:	215e      	movs	r1, #94	; 0x5e
 80191b8:	0002      	movs	r2, r0
 80191ba:	4b48      	ldr	r3, [pc, #288]	; (80192dc <__multiply+0x158>)
 80191bc:	4848      	ldr	r0, [pc, #288]	; (80192e0 <__multiply+0x15c>)
 80191be:	31ff      	adds	r1, #255	; 0xff
 80191c0:	f000 fc42 	bl	8019a48 <__assert_func>
 80191c4:	9b01      	ldr	r3, [sp, #4]
 80191c6:	2200      	movs	r2, #0
 80191c8:	3314      	adds	r3, #20
 80191ca:	469c      	mov	ip, r3
 80191cc:	19bb      	adds	r3, r7, r6
 80191ce:	009b      	lsls	r3, r3, #2
 80191d0:	4463      	add	r3, ip
 80191d2:	9303      	str	r3, [sp, #12]
 80191d4:	4663      	mov	r3, ip
 80191d6:	9903      	ldr	r1, [sp, #12]
 80191d8:	428b      	cmp	r3, r1
 80191da:	d32c      	bcc.n	8019236 <__multiply+0xb2>
 80191dc:	002b      	movs	r3, r5
 80191de:	0022      	movs	r2, r4
 80191e0:	3314      	adds	r3, #20
 80191e2:	00bf      	lsls	r7, r7, #2
 80191e4:	3214      	adds	r2, #20
 80191e6:	9306      	str	r3, [sp, #24]
 80191e8:	00b6      	lsls	r6, r6, #2
 80191ea:	19db      	adds	r3, r3, r7
 80191ec:	9304      	str	r3, [sp, #16]
 80191ee:	1993      	adds	r3, r2, r6
 80191f0:	9307      	str	r3, [sp, #28]
 80191f2:	2304      	movs	r3, #4
 80191f4:	9305      	str	r3, [sp, #20]
 80191f6:	002b      	movs	r3, r5
 80191f8:	9904      	ldr	r1, [sp, #16]
 80191fa:	3315      	adds	r3, #21
 80191fc:	9200      	str	r2, [sp, #0]
 80191fe:	4299      	cmp	r1, r3
 8019200:	d305      	bcc.n	801920e <__multiply+0x8a>
 8019202:	1b4b      	subs	r3, r1, r5
 8019204:	3b15      	subs	r3, #21
 8019206:	089b      	lsrs	r3, r3, #2
 8019208:	3301      	adds	r3, #1
 801920a:	009b      	lsls	r3, r3, #2
 801920c:	9305      	str	r3, [sp, #20]
 801920e:	9b07      	ldr	r3, [sp, #28]
 8019210:	9a00      	ldr	r2, [sp, #0]
 8019212:	429a      	cmp	r2, r3
 8019214:	d311      	bcc.n	801923a <__multiply+0xb6>
 8019216:	9b02      	ldr	r3, [sp, #8]
 8019218:	2b00      	cmp	r3, #0
 801921a:	dd06      	ble.n	801922a <__multiply+0xa6>
 801921c:	9b03      	ldr	r3, [sp, #12]
 801921e:	3b04      	subs	r3, #4
 8019220:	9303      	str	r3, [sp, #12]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	9300      	str	r3, [sp, #0]
 8019226:	2b00      	cmp	r3, #0
 8019228:	d054      	beq.n	80192d4 <__multiply+0x150>
 801922a:	9b01      	ldr	r3, [sp, #4]
 801922c:	9a02      	ldr	r2, [sp, #8]
 801922e:	0018      	movs	r0, r3
 8019230:	611a      	str	r2, [r3, #16]
 8019232:	b009      	add	sp, #36	; 0x24
 8019234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019236:	c304      	stmia	r3!, {r2}
 8019238:	e7cd      	b.n	80191d6 <__multiply+0x52>
 801923a:	9b00      	ldr	r3, [sp, #0]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	b298      	uxth	r0, r3
 8019240:	2800      	cmp	r0, #0
 8019242:	d01c      	beq.n	801927e <__multiply+0xfa>
 8019244:	4667      	mov	r7, ip
 8019246:	2400      	movs	r4, #0
 8019248:	9e06      	ldr	r6, [sp, #24]
 801924a:	ce02      	ldmia	r6!, {r1}
 801924c:	683a      	ldr	r2, [r7, #0]
 801924e:	b28b      	uxth	r3, r1
 8019250:	4343      	muls	r3, r0
 8019252:	0c09      	lsrs	r1, r1, #16
 8019254:	4341      	muls	r1, r0
 8019256:	b292      	uxth	r2, r2
 8019258:	189b      	adds	r3, r3, r2
 801925a:	191b      	adds	r3, r3, r4
 801925c:	000c      	movs	r4, r1
 801925e:	683a      	ldr	r2, [r7, #0]
 8019260:	0c11      	lsrs	r1, r2, #16
 8019262:	1861      	adds	r1, r4, r1
 8019264:	0c1c      	lsrs	r4, r3, #16
 8019266:	1909      	adds	r1, r1, r4
 8019268:	0c0c      	lsrs	r4, r1, #16
 801926a:	b29b      	uxth	r3, r3
 801926c:	0409      	lsls	r1, r1, #16
 801926e:	430b      	orrs	r3, r1
 8019270:	c708      	stmia	r7!, {r3}
 8019272:	9b04      	ldr	r3, [sp, #16]
 8019274:	42b3      	cmp	r3, r6
 8019276:	d8e8      	bhi.n	801924a <__multiply+0xc6>
 8019278:	4663      	mov	r3, ip
 801927a:	9a05      	ldr	r2, [sp, #20]
 801927c:	509c      	str	r4, [r3, r2]
 801927e:	9b00      	ldr	r3, [sp, #0]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	0c1e      	lsrs	r6, r3, #16
 8019284:	d020      	beq.n	80192c8 <__multiply+0x144>
 8019286:	4663      	mov	r3, ip
 8019288:	002c      	movs	r4, r5
 801928a:	4660      	mov	r0, ip
 801928c:	2700      	movs	r7, #0
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	3414      	adds	r4, #20
 8019292:	6822      	ldr	r2, [r4, #0]
 8019294:	b29b      	uxth	r3, r3
 8019296:	b291      	uxth	r1, r2
 8019298:	4371      	muls	r1, r6
 801929a:	6802      	ldr	r2, [r0, #0]
 801929c:	0c12      	lsrs	r2, r2, #16
 801929e:	1889      	adds	r1, r1, r2
 80192a0:	19cf      	adds	r7, r1, r7
 80192a2:	0439      	lsls	r1, r7, #16
 80192a4:	430b      	orrs	r3, r1
 80192a6:	6003      	str	r3, [r0, #0]
 80192a8:	cc02      	ldmia	r4!, {r1}
 80192aa:	6843      	ldr	r3, [r0, #4]
 80192ac:	0c09      	lsrs	r1, r1, #16
 80192ae:	4371      	muls	r1, r6
 80192b0:	b29b      	uxth	r3, r3
 80192b2:	0c3f      	lsrs	r7, r7, #16
 80192b4:	18cb      	adds	r3, r1, r3
 80192b6:	9a04      	ldr	r2, [sp, #16]
 80192b8:	19db      	adds	r3, r3, r7
 80192ba:	0c1f      	lsrs	r7, r3, #16
 80192bc:	3004      	adds	r0, #4
 80192be:	42a2      	cmp	r2, r4
 80192c0:	d8e7      	bhi.n	8019292 <__multiply+0x10e>
 80192c2:	4662      	mov	r2, ip
 80192c4:	9905      	ldr	r1, [sp, #20]
 80192c6:	5053      	str	r3, [r2, r1]
 80192c8:	9b00      	ldr	r3, [sp, #0]
 80192ca:	3304      	adds	r3, #4
 80192cc:	9300      	str	r3, [sp, #0]
 80192ce:	2304      	movs	r3, #4
 80192d0:	449c      	add	ip, r3
 80192d2:	e79c      	b.n	801920e <__multiply+0x8a>
 80192d4:	9b02      	ldr	r3, [sp, #8]
 80192d6:	3b01      	subs	r3, #1
 80192d8:	9302      	str	r3, [sp, #8]
 80192da:	e79c      	b.n	8019216 <__multiply+0x92>
 80192dc:	0801e709 	.word	0x0801e709
 80192e0:	0801e7f8 	.word	0x0801e7f8

080192e4 <__pow5mult>:
 80192e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192e6:	2303      	movs	r3, #3
 80192e8:	0015      	movs	r5, r2
 80192ea:	0007      	movs	r7, r0
 80192ec:	000e      	movs	r6, r1
 80192ee:	401a      	ands	r2, r3
 80192f0:	421d      	tst	r5, r3
 80192f2:	d008      	beq.n	8019306 <__pow5mult+0x22>
 80192f4:	491a      	ldr	r1, [pc, #104]	; (8019360 <__pow5mult+0x7c>)
 80192f6:	3a01      	subs	r2, #1
 80192f8:	0092      	lsls	r2, r2, #2
 80192fa:	5852      	ldr	r2, [r2, r1]
 80192fc:	2300      	movs	r3, #0
 80192fe:	0031      	movs	r1, r6
 8019300:	f7ff fe52 	bl	8018fa8 <__multadd>
 8019304:	0006      	movs	r6, r0
 8019306:	10ad      	asrs	r5, r5, #2
 8019308:	d027      	beq.n	801935a <__pow5mult+0x76>
 801930a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801930c:	2c00      	cmp	r4, #0
 801930e:	d107      	bne.n	8019320 <__pow5mult+0x3c>
 8019310:	0038      	movs	r0, r7
 8019312:	4914      	ldr	r1, [pc, #80]	; (8019364 <__pow5mult+0x80>)
 8019314:	f7ff ff20 	bl	8019158 <__i2b>
 8019318:	2300      	movs	r3, #0
 801931a:	0004      	movs	r4, r0
 801931c:	64b8      	str	r0, [r7, #72]	; 0x48
 801931e:	6003      	str	r3, [r0, #0]
 8019320:	2301      	movs	r3, #1
 8019322:	421d      	tst	r5, r3
 8019324:	d00a      	beq.n	801933c <__pow5mult+0x58>
 8019326:	0031      	movs	r1, r6
 8019328:	0022      	movs	r2, r4
 801932a:	0038      	movs	r0, r7
 801932c:	f7ff ff2a 	bl	8019184 <__multiply>
 8019330:	0031      	movs	r1, r6
 8019332:	9001      	str	r0, [sp, #4]
 8019334:	0038      	movs	r0, r7
 8019336:	f7ff fe2d 	bl	8018f94 <_Bfree>
 801933a:	9e01      	ldr	r6, [sp, #4]
 801933c:	106d      	asrs	r5, r5, #1
 801933e:	d00c      	beq.n	801935a <__pow5mult+0x76>
 8019340:	6820      	ldr	r0, [r4, #0]
 8019342:	2800      	cmp	r0, #0
 8019344:	d107      	bne.n	8019356 <__pow5mult+0x72>
 8019346:	0022      	movs	r2, r4
 8019348:	0021      	movs	r1, r4
 801934a:	0038      	movs	r0, r7
 801934c:	f7ff ff1a 	bl	8019184 <__multiply>
 8019350:	2300      	movs	r3, #0
 8019352:	6020      	str	r0, [r4, #0]
 8019354:	6003      	str	r3, [r0, #0]
 8019356:	0004      	movs	r4, r0
 8019358:	e7e2      	b.n	8019320 <__pow5mult+0x3c>
 801935a:	0030      	movs	r0, r6
 801935c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801935e:	46c0      	nop			; (mov r8, r8)
 8019360:	0801e948 	.word	0x0801e948
 8019364:	00000271 	.word	0x00000271

08019368 <__lshift>:
 8019368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801936a:	000c      	movs	r4, r1
 801936c:	0017      	movs	r7, r2
 801936e:	6923      	ldr	r3, [r4, #16]
 8019370:	1155      	asrs	r5, r2, #5
 8019372:	b087      	sub	sp, #28
 8019374:	18eb      	adds	r3, r5, r3
 8019376:	9302      	str	r3, [sp, #8]
 8019378:	3301      	adds	r3, #1
 801937a:	9301      	str	r3, [sp, #4]
 801937c:	6849      	ldr	r1, [r1, #4]
 801937e:	68a3      	ldr	r3, [r4, #8]
 8019380:	9004      	str	r0, [sp, #16]
 8019382:	9a01      	ldr	r2, [sp, #4]
 8019384:	4293      	cmp	r3, r2
 8019386:	db11      	blt.n	80193ac <__lshift+0x44>
 8019388:	9804      	ldr	r0, [sp, #16]
 801938a:	f7ff fddb 	bl	8018f44 <_Balloc>
 801938e:	0002      	movs	r2, r0
 8019390:	2300      	movs	r3, #0
 8019392:	3214      	adds	r2, #20
 8019394:	0006      	movs	r6, r0
 8019396:	0011      	movs	r1, r2
 8019398:	9203      	str	r2, [sp, #12]
 801939a:	4298      	cmp	r0, r3
 801939c:	d10d      	bne.n	80193ba <__lshift+0x52>
 801939e:	21da      	movs	r1, #218	; 0xda
 80193a0:	0002      	movs	r2, r0
 80193a2:	4b27      	ldr	r3, [pc, #156]	; (8019440 <__lshift+0xd8>)
 80193a4:	4827      	ldr	r0, [pc, #156]	; (8019444 <__lshift+0xdc>)
 80193a6:	31ff      	adds	r1, #255	; 0xff
 80193a8:	f000 fb4e 	bl	8019a48 <__assert_func>
 80193ac:	3101      	adds	r1, #1
 80193ae:	005b      	lsls	r3, r3, #1
 80193b0:	e7e7      	b.n	8019382 <__lshift+0x1a>
 80193b2:	2200      	movs	r2, #0
 80193b4:	0098      	lsls	r0, r3, #2
 80193b6:	500a      	str	r2, [r1, r0]
 80193b8:	3301      	adds	r3, #1
 80193ba:	42ab      	cmp	r3, r5
 80193bc:	dbf9      	blt.n	80193b2 <__lshift+0x4a>
 80193be:	43eb      	mvns	r3, r5
 80193c0:	17db      	asrs	r3, r3, #31
 80193c2:	401d      	ands	r5, r3
 80193c4:	9b03      	ldr	r3, [sp, #12]
 80193c6:	00ad      	lsls	r5, r5, #2
 80193c8:	211f      	movs	r1, #31
 80193ca:	0038      	movs	r0, r7
 80193cc:	195d      	adds	r5, r3, r5
 80193ce:	0023      	movs	r3, r4
 80193d0:	6922      	ldr	r2, [r4, #16]
 80193d2:	3314      	adds	r3, #20
 80193d4:	0092      	lsls	r2, r2, #2
 80193d6:	4008      	ands	r0, r1
 80193d8:	4684      	mov	ip, r0
 80193da:	189a      	adds	r2, r3, r2
 80193dc:	420f      	tst	r7, r1
 80193de:	d02a      	beq.n	8019436 <__lshift+0xce>
 80193e0:	3101      	adds	r1, #1
 80193e2:	1a09      	subs	r1, r1, r0
 80193e4:	9105      	str	r1, [sp, #20]
 80193e6:	2100      	movs	r1, #0
 80193e8:	9503      	str	r5, [sp, #12]
 80193ea:	4667      	mov	r7, ip
 80193ec:	6818      	ldr	r0, [r3, #0]
 80193ee:	40b8      	lsls	r0, r7
 80193f0:	4301      	orrs	r1, r0
 80193f2:	9803      	ldr	r0, [sp, #12]
 80193f4:	c002      	stmia	r0!, {r1}
 80193f6:	cb02      	ldmia	r3!, {r1}
 80193f8:	9003      	str	r0, [sp, #12]
 80193fa:	9805      	ldr	r0, [sp, #20]
 80193fc:	40c1      	lsrs	r1, r0
 80193fe:	429a      	cmp	r2, r3
 8019400:	d8f3      	bhi.n	80193ea <__lshift+0x82>
 8019402:	0020      	movs	r0, r4
 8019404:	3015      	adds	r0, #21
 8019406:	2304      	movs	r3, #4
 8019408:	4282      	cmp	r2, r0
 801940a:	d304      	bcc.n	8019416 <__lshift+0xae>
 801940c:	1b13      	subs	r3, r2, r4
 801940e:	3b15      	subs	r3, #21
 8019410:	089b      	lsrs	r3, r3, #2
 8019412:	3301      	adds	r3, #1
 8019414:	009b      	lsls	r3, r3, #2
 8019416:	50e9      	str	r1, [r5, r3]
 8019418:	2900      	cmp	r1, #0
 801941a:	d002      	beq.n	8019422 <__lshift+0xba>
 801941c:	9b02      	ldr	r3, [sp, #8]
 801941e:	3302      	adds	r3, #2
 8019420:	9301      	str	r3, [sp, #4]
 8019422:	9b01      	ldr	r3, [sp, #4]
 8019424:	9804      	ldr	r0, [sp, #16]
 8019426:	3b01      	subs	r3, #1
 8019428:	0021      	movs	r1, r4
 801942a:	6133      	str	r3, [r6, #16]
 801942c:	f7ff fdb2 	bl	8018f94 <_Bfree>
 8019430:	0030      	movs	r0, r6
 8019432:	b007      	add	sp, #28
 8019434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019436:	cb02      	ldmia	r3!, {r1}
 8019438:	c502      	stmia	r5!, {r1}
 801943a:	429a      	cmp	r2, r3
 801943c:	d8fb      	bhi.n	8019436 <__lshift+0xce>
 801943e:	e7f0      	b.n	8019422 <__lshift+0xba>
 8019440:	0801e709 	.word	0x0801e709
 8019444:	0801e7f8 	.word	0x0801e7f8

08019448 <__mcmp>:
 8019448:	6902      	ldr	r2, [r0, #16]
 801944a:	690b      	ldr	r3, [r1, #16]
 801944c:	b530      	push	{r4, r5, lr}
 801944e:	0004      	movs	r4, r0
 8019450:	1ad0      	subs	r0, r2, r3
 8019452:	429a      	cmp	r2, r3
 8019454:	d10d      	bne.n	8019472 <__mcmp+0x2a>
 8019456:	009b      	lsls	r3, r3, #2
 8019458:	3414      	adds	r4, #20
 801945a:	3114      	adds	r1, #20
 801945c:	18e2      	adds	r2, r4, r3
 801945e:	18c9      	adds	r1, r1, r3
 8019460:	3a04      	subs	r2, #4
 8019462:	3904      	subs	r1, #4
 8019464:	6815      	ldr	r5, [r2, #0]
 8019466:	680b      	ldr	r3, [r1, #0]
 8019468:	429d      	cmp	r5, r3
 801946a:	d003      	beq.n	8019474 <__mcmp+0x2c>
 801946c:	2001      	movs	r0, #1
 801946e:	429d      	cmp	r5, r3
 8019470:	d303      	bcc.n	801947a <__mcmp+0x32>
 8019472:	bd30      	pop	{r4, r5, pc}
 8019474:	4294      	cmp	r4, r2
 8019476:	d3f3      	bcc.n	8019460 <__mcmp+0x18>
 8019478:	e7fb      	b.n	8019472 <__mcmp+0x2a>
 801947a:	4240      	negs	r0, r0
 801947c:	e7f9      	b.n	8019472 <__mcmp+0x2a>
	...

08019480 <__mdiff>:
 8019480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019482:	000e      	movs	r6, r1
 8019484:	0007      	movs	r7, r0
 8019486:	0011      	movs	r1, r2
 8019488:	0030      	movs	r0, r6
 801948a:	b087      	sub	sp, #28
 801948c:	0014      	movs	r4, r2
 801948e:	f7ff ffdb 	bl	8019448 <__mcmp>
 8019492:	1e05      	subs	r5, r0, #0
 8019494:	d110      	bne.n	80194b8 <__mdiff+0x38>
 8019496:	0001      	movs	r1, r0
 8019498:	0038      	movs	r0, r7
 801949a:	f7ff fd53 	bl	8018f44 <_Balloc>
 801949e:	1e02      	subs	r2, r0, #0
 80194a0:	d104      	bne.n	80194ac <__mdiff+0x2c>
 80194a2:	4b40      	ldr	r3, [pc, #256]	; (80195a4 <__mdiff+0x124>)
 80194a4:	4940      	ldr	r1, [pc, #256]	; (80195a8 <__mdiff+0x128>)
 80194a6:	4841      	ldr	r0, [pc, #260]	; (80195ac <__mdiff+0x12c>)
 80194a8:	f000 face 	bl	8019a48 <__assert_func>
 80194ac:	2301      	movs	r3, #1
 80194ae:	6145      	str	r5, [r0, #20]
 80194b0:	6103      	str	r3, [r0, #16]
 80194b2:	0010      	movs	r0, r2
 80194b4:	b007      	add	sp, #28
 80194b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194b8:	2301      	movs	r3, #1
 80194ba:	9301      	str	r3, [sp, #4]
 80194bc:	2800      	cmp	r0, #0
 80194be:	db04      	blt.n	80194ca <__mdiff+0x4a>
 80194c0:	0023      	movs	r3, r4
 80194c2:	0034      	movs	r4, r6
 80194c4:	001e      	movs	r6, r3
 80194c6:	2300      	movs	r3, #0
 80194c8:	9301      	str	r3, [sp, #4]
 80194ca:	0038      	movs	r0, r7
 80194cc:	6861      	ldr	r1, [r4, #4]
 80194ce:	f7ff fd39 	bl	8018f44 <_Balloc>
 80194d2:	1e02      	subs	r2, r0, #0
 80194d4:	d103      	bne.n	80194de <__mdiff+0x5e>
 80194d6:	2190      	movs	r1, #144	; 0x90
 80194d8:	4b32      	ldr	r3, [pc, #200]	; (80195a4 <__mdiff+0x124>)
 80194da:	0089      	lsls	r1, r1, #2
 80194dc:	e7e3      	b.n	80194a6 <__mdiff+0x26>
 80194de:	9b01      	ldr	r3, [sp, #4]
 80194e0:	2700      	movs	r7, #0
 80194e2:	60c3      	str	r3, [r0, #12]
 80194e4:	6920      	ldr	r0, [r4, #16]
 80194e6:	3414      	adds	r4, #20
 80194e8:	9401      	str	r4, [sp, #4]
 80194ea:	9b01      	ldr	r3, [sp, #4]
 80194ec:	0084      	lsls	r4, r0, #2
 80194ee:	191b      	adds	r3, r3, r4
 80194f0:	0034      	movs	r4, r6
 80194f2:	9302      	str	r3, [sp, #8]
 80194f4:	6933      	ldr	r3, [r6, #16]
 80194f6:	3414      	adds	r4, #20
 80194f8:	0099      	lsls	r1, r3, #2
 80194fa:	1863      	adds	r3, r4, r1
 80194fc:	9303      	str	r3, [sp, #12]
 80194fe:	0013      	movs	r3, r2
 8019500:	3314      	adds	r3, #20
 8019502:	469c      	mov	ip, r3
 8019504:	9305      	str	r3, [sp, #20]
 8019506:	9b01      	ldr	r3, [sp, #4]
 8019508:	9304      	str	r3, [sp, #16]
 801950a:	9b04      	ldr	r3, [sp, #16]
 801950c:	cc02      	ldmia	r4!, {r1}
 801950e:	cb20      	ldmia	r3!, {r5}
 8019510:	9304      	str	r3, [sp, #16]
 8019512:	b2ab      	uxth	r3, r5
 8019514:	19df      	adds	r7, r3, r7
 8019516:	b28b      	uxth	r3, r1
 8019518:	1afb      	subs	r3, r7, r3
 801951a:	0c2d      	lsrs	r5, r5, #16
 801951c:	0c09      	lsrs	r1, r1, #16
 801951e:	1a69      	subs	r1, r5, r1
 8019520:	141d      	asrs	r5, r3, #16
 8019522:	1949      	adds	r1, r1, r5
 8019524:	140f      	asrs	r7, r1, #16
 8019526:	b29b      	uxth	r3, r3
 8019528:	0409      	lsls	r1, r1, #16
 801952a:	430b      	orrs	r3, r1
 801952c:	4661      	mov	r1, ip
 801952e:	c108      	stmia	r1!, {r3}
 8019530:	9b03      	ldr	r3, [sp, #12]
 8019532:	468c      	mov	ip, r1
 8019534:	42a3      	cmp	r3, r4
 8019536:	d8e8      	bhi.n	801950a <__mdiff+0x8a>
 8019538:	0031      	movs	r1, r6
 801953a:	9c03      	ldr	r4, [sp, #12]
 801953c:	3115      	adds	r1, #21
 801953e:	2304      	movs	r3, #4
 8019540:	428c      	cmp	r4, r1
 8019542:	d304      	bcc.n	801954e <__mdiff+0xce>
 8019544:	1ba3      	subs	r3, r4, r6
 8019546:	3b15      	subs	r3, #21
 8019548:	089b      	lsrs	r3, r3, #2
 801954a:	3301      	adds	r3, #1
 801954c:	009b      	lsls	r3, r3, #2
 801954e:	9901      	ldr	r1, [sp, #4]
 8019550:	18cc      	adds	r4, r1, r3
 8019552:	9905      	ldr	r1, [sp, #20]
 8019554:	0026      	movs	r6, r4
 8019556:	18cb      	adds	r3, r1, r3
 8019558:	469c      	mov	ip, r3
 801955a:	9902      	ldr	r1, [sp, #8]
 801955c:	428e      	cmp	r6, r1
 801955e:	d310      	bcc.n	8019582 <__mdiff+0x102>
 8019560:	9e02      	ldr	r6, [sp, #8]
 8019562:	1ee5      	subs	r5, r4, #3
 8019564:	2100      	movs	r1, #0
 8019566:	42ae      	cmp	r6, r5
 8019568:	d304      	bcc.n	8019574 <__mdiff+0xf4>
 801956a:	0031      	movs	r1, r6
 801956c:	3103      	adds	r1, #3
 801956e:	1b09      	subs	r1, r1, r4
 8019570:	0889      	lsrs	r1, r1, #2
 8019572:	0089      	lsls	r1, r1, #2
 8019574:	185b      	adds	r3, r3, r1
 8019576:	3b04      	subs	r3, #4
 8019578:	6819      	ldr	r1, [r3, #0]
 801957a:	2900      	cmp	r1, #0
 801957c:	d00f      	beq.n	801959e <__mdiff+0x11e>
 801957e:	6110      	str	r0, [r2, #16]
 8019580:	e797      	b.n	80194b2 <__mdiff+0x32>
 8019582:	ce02      	ldmia	r6!, {r1}
 8019584:	b28d      	uxth	r5, r1
 8019586:	19ed      	adds	r5, r5, r7
 8019588:	0c0f      	lsrs	r7, r1, #16
 801958a:	1429      	asrs	r1, r5, #16
 801958c:	1879      	adds	r1, r7, r1
 801958e:	140f      	asrs	r7, r1, #16
 8019590:	b2ad      	uxth	r5, r5
 8019592:	0409      	lsls	r1, r1, #16
 8019594:	430d      	orrs	r5, r1
 8019596:	4661      	mov	r1, ip
 8019598:	c120      	stmia	r1!, {r5}
 801959a:	468c      	mov	ip, r1
 801959c:	e7dd      	b.n	801955a <__mdiff+0xda>
 801959e:	3801      	subs	r0, #1
 80195a0:	e7e9      	b.n	8019576 <__mdiff+0xf6>
 80195a2:	46c0      	nop			; (mov r8, r8)
 80195a4:	0801e709 	.word	0x0801e709
 80195a8:	00000232 	.word	0x00000232
 80195ac:	0801e7f8 	.word	0x0801e7f8

080195b0 <__ulp>:
 80195b0:	4b0f      	ldr	r3, [pc, #60]	; (80195f0 <__ulp+0x40>)
 80195b2:	4019      	ands	r1, r3
 80195b4:	4b0f      	ldr	r3, [pc, #60]	; (80195f4 <__ulp+0x44>)
 80195b6:	18c9      	adds	r1, r1, r3
 80195b8:	2900      	cmp	r1, #0
 80195ba:	dd04      	ble.n	80195c6 <__ulp+0x16>
 80195bc:	2200      	movs	r2, #0
 80195be:	000b      	movs	r3, r1
 80195c0:	0010      	movs	r0, r2
 80195c2:	0019      	movs	r1, r3
 80195c4:	4770      	bx	lr
 80195c6:	4249      	negs	r1, r1
 80195c8:	2200      	movs	r2, #0
 80195ca:	2300      	movs	r3, #0
 80195cc:	1509      	asrs	r1, r1, #20
 80195ce:	2913      	cmp	r1, #19
 80195d0:	dc04      	bgt.n	80195dc <__ulp+0x2c>
 80195d2:	2080      	movs	r0, #128	; 0x80
 80195d4:	0300      	lsls	r0, r0, #12
 80195d6:	4108      	asrs	r0, r1
 80195d8:	0003      	movs	r3, r0
 80195da:	e7f1      	b.n	80195c0 <__ulp+0x10>
 80195dc:	3914      	subs	r1, #20
 80195de:	2001      	movs	r0, #1
 80195e0:	291e      	cmp	r1, #30
 80195e2:	dc02      	bgt.n	80195ea <__ulp+0x3a>
 80195e4:	2080      	movs	r0, #128	; 0x80
 80195e6:	0600      	lsls	r0, r0, #24
 80195e8:	40c8      	lsrs	r0, r1
 80195ea:	0002      	movs	r2, r0
 80195ec:	e7e8      	b.n	80195c0 <__ulp+0x10>
 80195ee:	46c0      	nop			; (mov r8, r8)
 80195f0:	7ff00000 	.word	0x7ff00000
 80195f4:	fcc00000 	.word	0xfcc00000

080195f8 <__b2d>:
 80195f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80195fa:	0006      	movs	r6, r0
 80195fc:	6903      	ldr	r3, [r0, #16]
 80195fe:	3614      	adds	r6, #20
 8019600:	009b      	lsls	r3, r3, #2
 8019602:	18f3      	adds	r3, r6, r3
 8019604:	1f1d      	subs	r5, r3, #4
 8019606:	682c      	ldr	r4, [r5, #0]
 8019608:	000f      	movs	r7, r1
 801960a:	0020      	movs	r0, r4
 801960c:	9301      	str	r3, [sp, #4]
 801960e:	f7ff fd5b 	bl	80190c8 <__hi0bits>
 8019612:	2320      	movs	r3, #32
 8019614:	1a1b      	subs	r3, r3, r0
 8019616:	491f      	ldr	r1, [pc, #124]	; (8019694 <__b2d+0x9c>)
 8019618:	603b      	str	r3, [r7, #0]
 801961a:	280a      	cmp	r0, #10
 801961c:	dc16      	bgt.n	801964c <__b2d+0x54>
 801961e:	230b      	movs	r3, #11
 8019620:	0027      	movs	r7, r4
 8019622:	1a1b      	subs	r3, r3, r0
 8019624:	40df      	lsrs	r7, r3
 8019626:	4339      	orrs	r1, r7
 8019628:	469c      	mov	ip, r3
 801962a:	000b      	movs	r3, r1
 801962c:	2100      	movs	r1, #0
 801962e:	42ae      	cmp	r6, r5
 8019630:	d202      	bcs.n	8019638 <__b2d+0x40>
 8019632:	9901      	ldr	r1, [sp, #4]
 8019634:	3908      	subs	r1, #8
 8019636:	6809      	ldr	r1, [r1, #0]
 8019638:	3015      	adds	r0, #21
 801963a:	4084      	lsls	r4, r0
 801963c:	4660      	mov	r0, ip
 801963e:	40c1      	lsrs	r1, r0
 8019640:	430c      	orrs	r4, r1
 8019642:	0022      	movs	r2, r4
 8019644:	0010      	movs	r0, r2
 8019646:	0019      	movs	r1, r3
 8019648:	b003      	add	sp, #12
 801964a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801964c:	2700      	movs	r7, #0
 801964e:	42ae      	cmp	r6, r5
 8019650:	d202      	bcs.n	8019658 <__b2d+0x60>
 8019652:	9d01      	ldr	r5, [sp, #4]
 8019654:	3d08      	subs	r5, #8
 8019656:	682f      	ldr	r7, [r5, #0]
 8019658:	230b      	movs	r3, #11
 801965a:	425b      	negs	r3, r3
 801965c:	469c      	mov	ip, r3
 801965e:	4484      	add	ip, r0
 8019660:	280b      	cmp	r0, #11
 8019662:	d013      	beq.n	801968c <__b2d+0x94>
 8019664:	4663      	mov	r3, ip
 8019666:	2020      	movs	r0, #32
 8019668:	409c      	lsls	r4, r3
 801966a:	1ac0      	subs	r0, r0, r3
 801966c:	003b      	movs	r3, r7
 801966e:	40c3      	lsrs	r3, r0
 8019670:	431c      	orrs	r4, r3
 8019672:	4321      	orrs	r1, r4
 8019674:	000b      	movs	r3, r1
 8019676:	2100      	movs	r1, #0
 8019678:	42b5      	cmp	r5, r6
 801967a:	d901      	bls.n	8019680 <__b2d+0x88>
 801967c:	3d04      	subs	r5, #4
 801967e:	6829      	ldr	r1, [r5, #0]
 8019680:	4664      	mov	r4, ip
 8019682:	40c1      	lsrs	r1, r0
 8019684:	40a7      	lsls	r7, r4
 8019686:	430f      	orrs	r7, r1
 8019688:	003a      	movs	r2, r7
 801968a:	e7db      	b.n	8019644 <__b2d+0x4c>
 801968c:	4321      	orrs	r1, r4
 801968e:	000b      	movs	r3, r1
 8019690:	e7fa      	b.n	8019688 <__b2d+0x90>
 8019692:	46c0      	nop			; (mov r8, r8)
 8019694:	3ff00000 	.word	0x3ff00000

08019698 <__d2b>:
 8019698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801969a:	2101      	movs	r1, #1
 801969c:	0014      	movs	r4, r2
 801969e:	001e      	movs	r6, r3
 80196a0:	9f08      	ldr	r7, [sp, #32]
 80196a2:	f7ff fc4f 	bl	8018f44 <_Balloc>
 80196a6:	1e05      	subs	r5, r0, #0
 80196a8:	d105      	bne.n	80196b6 <__d2b+0x1e>
 80196aa:	0002      	movs	r2, r0
 80196ac:	4b26      	ldr	r3, [pc, #152]	; (8019748 <__d2b+0xb0>)
 80196ae:	4927      	ldr	r1, [pc, #156]	; (801974c <__d2b+0xb4>)
 80196b0:	4827      	ldr	r0, [pc, #156]	; (8019750 <__d2b+0xb8>)
 80196b2:	f000 f9c9 	bl	8019a48 <__assert_func>
 80196b6:	0333      	lsls	r3, r6, #12
 80196b8:	0076      	lsls	r6, r6, #1
 80196ba:	0b1b      	lsrs	r3, r3, #12
 80196bc:	0d76      	lsrs	r6, r6, #21
 80196be:	d124      	bne.n	801970a <__d2b+0x72>
 80196c0:	9301      	str	r3, [sp, #4]
 80196c2:	2c00      	cmp	r4, #0
 80196c4:	d027      	beq.n	8019716 <__d2b+0x7e>
 80196c6:	4668      	mov	r0, sp
 80196c8:	9400      	str	r4, [sp, #0]
 80196ca:	f7ff fd17 	bl	80190fc <__lo0bits>
 80196ce:	9c00      	ldr	r4, [sp, #0]
 80196d0:	2800      	cmp	r0, #0
 80196d2:	d01e      	beq.n	8019712 <__d2b+0x7a>
 80196d4:	9b01      	ldr	r3, [sp, #4]
 80196d6:	2120      	movs	r1, #32
 80196d8:	001a      	movs	r2, r3
 80196da:	1a09      	subs	r1, r1, r0
 80196dc:	408a      	lsls	r2, r1
 80196de:	40c3      	lsrs	r3, r0
 80196e0:	4322      	orrs	r2, r4
 80196e2:	616a      	str	r2, [r5, #20]
 80196e4:	9301      	str	r3, [sp, #4]
 80196e6:	9c01      	ldr	r4, [sp, #4]
 80196e8:	61ac      	str	r4, [r5, #24]
 80196ea:	1e63      	subs	r3, r4, #1
 80196ec:	419c      	sbcs	r4, r3
 80196ee:	3401      	adds	r4, #1
 80196f0:	612c      	str	r4, [r5, #16]
 80196f2:	2e00      	cmp	r6, #0
 80196f4:	d018      	beq.n	8019728 <__d2b+0x90>
 80196f6:	4b17      	ldr	r3, [pc, #92]	; (8019754 <__d2b+0xbc>)
 80196f8:	18f6      	adds	r6, r6, r3
 80196fa:	2335      	movs	r3, #53	; 0x35
 80196fc:	1836      	adds	r6, r6, r0
 80196fe:	1a18      	subs	r0, r3, r0
 8019700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019702:	603e      	str	r6, [r7, #0]
 8019704:	6018      	str	r0, [r3, #0]
 8019706:	0028      	movs	r0, r5
 8019708:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801970a:	2280      	movs	r2, #128	; 0x80
 801970c:	0352      	lsls	r2, r2, #13
 801970e:	4313      	orrs	r3, r2
 8019710:	e7d6      	b.n	80196c0 <__d2b+0x28>
 8019712:	616c      	str	r4, [r5, #20]
 8019714:	e7e7      	b.n	80196e6 <__d2b+0x4e>
 8019716:	a801      	add	r0, sp, #4
 8019718:	f7ff fcf0 	bl	80190fc <__lo0bits>
 801971c:	2401      	movs	r4, #1
 801971e:	9b01      	ldr	r3, [sp, #4]
 8019720:	612c      	str	r4, [r5, #16]
 8019722:	616b      	str	r3, [r5, #20]
 8019724:	3020      	adds	r0, #32
 8019726:	e7e4      	b.n	80196f2 <__d2b+0x5a>
 8019728:	4b0b      	ldr	r3, [pc, #44]	; (8019758 <__d2b+0xc0>)
 801972a:	18c0      	adds	r0, r0, r3
 801972c:	4b0b      	ldr	r3, [pc, #44]	; (801975c <__d2b+0xc4>)
 801972e:	6038      	str	r0, [r7, #0]
 8019730:	18e3      	adds	r3, r4, r3
 8019732:	009b      	lsls	r3, r3, #2
 8019734:	18eb      	adds	r3, r5, r3
 8019736:	6958      	ldr	r0, [r3, #20]
 8019738:	f7ff fcc6 	bl	80190c8 <__hi0bits>
 801973c:	0164      	lsls	r4, r4, #5
 801973e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019740:	1a24      	subs	r4, r4, r0
 8019742:	601c      	str	r4, [r3, #0]
 8019744:	e7df      	b.n	8019706 <__d2b+0x6e>
 8019746:	46c0      	nop			; (mov r8, r8)
 8019748:	0801e709 	.word	0x0801e709
 801974c:	0000030a 	.word	0x0000030a
 8019750:	0801e7f8 	.word	0x0801e7f8
 8019754:	fffffbcd 	.word	0xfffffbcd
 8019758:	fffffbce 	.word	0xfffffbce
 801975c:	3fffffff 	.word	0x3fffffff

08019760 <__ratio>:
 8019760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019762:	b085      	sub	sp, #20
 8019764:	000d      	movs	r5, r1
 8019766:	a902      	add	r1, sp, #8
 8019768:	0004      	movs	r4, r0
 801976a:	f7ff ff45 	bl	80195f8 <__b2d>
 801976e:	9000      	str	r0, [sp, #0]
 8019770:	9101      	str	r1, [sp, #4]
 8019772:	9e00      	ldr	r6, [sp, #0]
 8019774:	9f01      	ldr	r7, [sp, #4]
 8019776:	0028      	movs	r0, r5
 8019778:	a903      	add	r1, sp, #12
 801977a:	f7ff ff3d 	bl	80195f8 <__b2d>
 801977e:	6924      	ldr	r4, [r4, #16]
 8019780:	692d      	ldr	r5, [r5, #16]
 8019782:	0002      	movs	r2, r0
 8019784:	1b65      	subs	r5, r4, r5
 8019786:	016c      	lsls	r4, r5, #5
 8019788:	46a4      	mov	ip, r4
 801978a:	9d03      	ldr	r5, [sp, #12]
 801978c:	9c02      	ldr	r4, [sp, #8]
 801978e:	000b      	movs	r3, r1
 8019790:	1b64      	subs	r4, r4, r5
 8019792:	4464      	add	r4, ip
 8019794:	0525      	lsls	r5, r4, #20
 8019796:	2c00      	cmp	r4, #0
 8019798:	dd07      	ble.n	80197aa <__ratio+0x4a>
 801979a:	9901      	ldr	r1, [sp, #4]
 801979c:	186f      	adds	r7, r5, r1
 801979e:	0030      	movs	r0, r6
 80197a0:	0039      	movs	r1, r7
 80197a2:	f7e8 faf5 	bl	8001d90 <__aeabi_ddiv>
 80197a6:	b005      	add	sp, #20
 80197a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197aa:	1b4b      	subs	r3, r1, r5
 80197ac:	e7f7      	b.n	801979e <__ratio+0x3e>

080197ae <__copybits>:
 80197ae:	b570      	push	{r4, r5, r6, lr}
 80197b0:	0015      	movs	r5, r2
 80197b2:	6913      	ldr	r3, [r2, #16]
 80197b4:	3514      	adds	r5, #20
 80197b6:	009c      	lsls	r4, r3, #2
 80197b8:	0006      	movs	r6, r0
 80197ba:	002b      	movs	r3, r5
 80197bc:	3901      	subs	r1, #1
 80197be:	1149      	asrs	r1, r1, #5
 80197c0:	3101      	adds	r1, #1
 80197c2:	0089      	lsls	r1, r1, #2
 80197c4:	1841      	adds	r1, r0, r1
 80197c6:	192c      	adds	r4, r5, r4
 80197c8:	429c      	cmp	r4, r3
 80197ca:	d80d      	bhi.n	80197e8 <__copybits+0x3a>
 80197cc:	0015      	movs	r5, r2
 80197ce:	3511      	adds	r5, #17
 80197d0:	2300      	movs	r3, #0
 80197d2:	42a5      	cmp	r5, r4
 80197d4:	d803      	bhi.n	80197de <__copybits+0x30>
 80197d6:	1aa3      	subs	r3, r4, r2
 80197d8:	3b11      	subs	r3, #17
 80197da:	089b      	lsrs	r3, r3, #2
 80197dc:	009b      	lsls	r3, r3, #2
 80197de:	18c0      	adds	r0, r0, r3
 80197e0:	2300      	movs	r3, #0
 80197e2:	4281      	cmp	r1, r0
 80197e4:	d803      	bhi.n	80197ee <__copybits+0x40>
 80197e6:	bd70      	pop	{r4, r5, r6, pc}
 80197e8:	cb20      	ldmia	r3!, {r5}
 80197ea:	c620      	stmia	r6!, {r5}
 80197ec:	e7ec      	b.n	80197c8 <__copybits+0x1a>
 80197ee:	c008      	stmia	r0!, {r3}
 80197f0:	e7f7      	b.n	80197e2 <__copybits+0x34>

080197f2 <__any_on>:
 80197f2:	0002      	movs	r2, r0
 80197f4:	6900      	ldr	r0, [r0, #16]
 80197f6:	b510      	push	{r4, lr}
 80197f8:	3214      	adds	r2, #20
 80197fa:	114b      	asrs	r3, r1, #5
 80197fc:	4298      	cmp	r0, r3
 80197fe:	db13      	blt.n	8019828 <__any_on+0x36>
 8019800:	dd0c      	ble.n	801981c <__any_on+0x2a>
 8019802:	241f      	movs	r4, #31
 8019804:	0008      	movs	r0, r1
 8019806:	4020      	ands	r0, r4
 8019808:	4221      	tst	r1, r4
 801980a:	d007      	beq.n	801981c <__any_on+0x2a>
 801980c:	0099      	lsls	r1, r3, #2
 801980e:	588c      	ldr	r4, [r1, r2]
 8019810:	0021      	movs	r1, r4
 8019812:	40c1      	lsrs	r1, r0
 8019814:	4081      	lsls	r1, r0
 8019816:	2001      	movs	r0, #1
 8019818:	428c      	cmp	r4, r1
 801981a:	d104      	bne.n	8019826 <__any_on+0x34>
 801981c:	009b      	lsls	r3, r3, #2
 801981e:	18d3      	adds	r3, r2, r3
 8019820:	4293      	cmp	r3, r2
 8019822:	d803      	bhi.n	801982c <__any_on+0x3a>
 8019824:	2000      	movs	r0, #0
 8019826:	bd10      	pop	{r4, pc}
 8019828:	0003      	movs	r3, r0
 801982a:	e7f7      	b.n	801981c <__any_on+0x2a>
 801982c:	3b04      	subs	r3, #4
 801982e:	6819      	ldr	r1, [r3, #0]
 8019830:	2900      	cmp	r1, #0
 8019832:	d0f5      	beq.n	8019820 <__any_on+0x2e>
 8019834:	2001      	movs	r0, #1
 8019836:	e7f6      	b.n	8019826 <__any_on+0x34>

08019838 <frexp>:
 8019838:	b570      	push	{r4, r5, r6, lr}
 801983a:	0014      	movs	r4, r2
 801983c:	2500      	movs	r5, #0
 801983e:	6025      	str	r5, [r4, #0]
 8019840:	4d10      	ldr	r5, [pc, #64]	; (8019884 <frexp+0x4c>)
 8019842:	004b      	lsls	r3, r1, #1
 8019844:	000a      	movs	r2, r1
 8019846:	085b      	lsrs	r3, r3, #1
 8019848:	42ab      	cmp	r3, r5
 801984a:	dc1a      	bgt.n	8019882 <frexp+0x4a>
 801984c:	001d      	movs	r5, r3
 801984e:	4305      	orrs	r5, r0
 8019850:	d017      	beq.n	8019882 <frexp+0x4a>
 8019852:	4d0d      	ldr	r5, [pc, #52]	; (8019888 <frexp+0x50>)
 8019854:	4229      	tst	r1, r5
 8019856:	d109      	bne.n	801986c <frexp+0x34>
 8019858:	2200      	movs	r2, #0
 801985a:	4b0c      	ldr	r3, [pc, #48]	; (801988c <frexp+0x54>)
 801985c:	f7e8 fe9e 	bl	800259c <__aeabi_dmul>
 8019860:	2536      	movs	r5, #54	; 0x36
 8019862:	000a      	movs	r2, r1
 8019864:	004b      	lsls	r3, r1, #1
 8019866:	426d      	negs	r5, r5
 8019868:	085b      	lsrs	r3, r3, #1
 801986a:	6025      	str	r5, [r4, #0]
 801986c:	4d08      	ldr	r5, [pc, #32]	; (8019890 <frexp+0x58>)
 801986e:	151b      	asrs	r3, r3, #20
 8019870:	195b      	adds	r3, r3, r5
 8019872:	6825      	ldr	r5, [r4, #0]
 8019874:	18eb      	adds	r3, r5, r3
 8019876:	6023      	str	r3, [r4, #0]
 8019878:	4b06      	ldr	r3, [pc, #24]	; (8019894 <frexp+0x5c>)
 801987a:	401a      	ands	r2, r3
 801987c:	4b06      	ldr	r3, [pc, #24]	; (8019898 <frexp+0x60>)
 801987e:	4313      	orrs	r3, r2
 8019880:	0019      	movs	r1, r3
 8019882:	bd70      	pop	{r4, r5, r6, pc}
 8019884:	7fefffff 	.word	0x7fefffff
 8019888:	7ff00000 	.word	0x7ff00000
 801988c:	43500000 	.word	0x43500000
 8019890:	fffffc02 	.word	0xfffffc02
 8019894:	800fffff 	.word	0x800fffff
 8019898:	3fe00000 	.word	0x3fe00000

0801989c <nan>:
 801989c:	2000      	movs	r0, #0
 801989e:	4901      	ldr	r1, [pc, #4]	; (80198a4 <nan+0x8>)
 80198a0:	4770      	bx	lr
 80198a2:	46c0      	nop			; (mov r8, r8)
 80198a4:	7ff80000 	.word	0x7ff80000

080198a8 <__ssprint_r>:
 80198a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198aa:	6893      	ldr	r3, [r2, #8]
 80198ac:	b087      	sub	sp, #28
 80198ae:	000c      	movs	r4, r1
 80198b0:	0017      	movs	r7, r2
 80198b2:	9002      	str	r0, [sp, #8]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d065      	beq.n	8019984 <__ssprint_r+0xdc>
 80198b8:	6813      	ldr	r3, [r2, #0]
 80198ba:	9303      	str	r3, [sp, #12]
 80198bc:	2300      	movs	r3, #0
 80198be:	9305      	str	r3, [sp, #20]
 80198c0:	9301      	str	r3, [sp, #4]
 80198c2:	9b01      	ldr	r3, [sp, #4]
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d02d      	beq.n	8019924 <__ssprint_r+0x7c>
 80198c8:	68a6      	ldr	r6, [r4, #8]
 80198ca:	42b3      	cmp	r3, r6
 80198cc:	d346      	bcc.n	801995c <__ssprint_r+0xb4>
 80198ce:	2390      	movs	r3, #144	; 0x90
 80198d0:	89a2      	ldrh	r2, [r4, #12]
 80198d2:	00db      	lsls	r3, r3, #3
 80198d4:	421a      	tst	r2, r3
 80198d6:	d041      	beq.n	801995c <__ssprint_r+0xb4>
 80198d8:	6921      	ldr	r1, [r4, #16]
 80198da:	6823      	ldr	r3, [r4, #0]
 80198dc:	6965      	ldr	r5, [r4, #20]
 80198de:	1a5b      	subs	r3, r3, r1
 80198e0:	9304      	str	r3, [sp, #16]
 80198e2:	2303      	movs	r3, #3
 80198e4:	435d      	muls	r5, r3
 80198e6:	0feb      	lsrs	r3, r5, #31
 80198e8:	195d      	adds	r5, r3, r5
 80198ea:	9b04      	ldr	r3, [sp, #16]
 80198ec:	9801      	ldr	r0, [sp, #4]
 80198ee:	3301      	adds	r3, #1
 80198f0:	181b      	adds	r3, r3, r0
 80198f2:	106d      	asrs	r5, r5, #1
 80198f4:	42ab      	cmp	r3, r5
 80198f6:	d900      	bls.n	80198fa <__ssprint_r+0x52>
 80198f8:	001d      	movs	r5, r3
 80198fa:	0553      	lsls	r3, r2, #21
 80198fc:	d546      	bpl.n	801998c <__ssprint_r+0xe4>
 80198fe:	0029      	movs	r1, r5
 8019900:	9802      	ldr	r0, [sp, #8]
 8019902:	f7fb f95d 	bl	8014bc0 <_malloc_r>
 8019906:	1e06      	subs	r6, r0, #0
 8019908:	d116      	bne.n	8019938 <__ssprint_r+0x90>
 801990a:	230c      	movs	r3, #12
 801990c:	9a02      	ldr	r2, [sp, #8]
 801990e:	2001      	movs	r0, #1
 8019910:	6013      	str	r3, [r2, #0]
 8019912:	2340      	movs	r3, #64	; 0x40
 8019914:	89a2      	ldrh	r2, [r4, #12]
 8019916:	4240      	negs	r0, r0
 8019918:	4313      	orrs	r3, r2
 801991a:	81a3      	strh	r3, [r4, #12]
 801991c:	2300      	movs	r3, #0
 801991e:	60bb      	str	r3, [r7, #8]
 8019920:	607b      	str	r3, [r7, #4]
 8019922:	e031      	b.n	8019988 <__ssprint_r+0xe0>
 8019924:	9b03      	ldr	r3, [sp, #12]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	9305      	str	r3, [sp, #20]
 801992a:	9b03      	ldr	r3, [sp, #12]
 801992c:	685b      	ldr	r3, [r3, #4]
 801992e:	9301      	str	r3, [sp, #4]
 8019930:	9b03      	ldr	r3, [sp, #12]
 8019932:	3308      	adds	r3, #8
 8019934:	9303      	str	r3, [sp, #12]
 8019936:	e7c4      	b.n	80198c2 <__ssprint_r+0x1a>
 8019938:	9a04      	ldr	r2, [sp, #16]
 801993a:	6921      	ldr	r1, [r4, #16]
 801993c:	f7fb fb62 	bl	8015004 <memcpy>
 8019940:	89a3      	ldrh	r3, [r4, #12]
 8019942:	4a18      	ldr	r2, [pc, #96]	; (80199a4 <__ssprint_r+0xfc>)
 8019944:	401a      	ands	r2, r3
 8019946:	2380      	movs	r3, #128	; 0x80
 8019948:	4313      	orrs	r3, r2
 801994a:	81a3      	strh	r3, [r4, #12]
 801994c:	9b04      	ldr	r3, [sp, #16]
 801994e:	6126      	str	r6, [r4, #16]
 8019950:	18f6      	adds	r6, r6, r3
 8019952:	6026      	str	r6, [r4, #0]
 8019954:	6165      	str	r5, [r4, #20]
 8019956:	9e01      	ldr	r6, [sp, #4]
 8019958:	1aed      	subs	r5, r5, r3
 801995a:	60a5      	str	r5, [r4, #8]
 801995c:	9b01      	ldr	r3, [sp, #4]
 801995e:	429e      	cmp	r6, r3
 8019960:	d900      	bls.n	8019964 <__ssprint_r+0xbc>
 8019962:	001e      	movs	r6, r3
 8019964:	0032      	movs	r2, r6
 8019966:	9905      	ldr	r1, [sp, #20]
 8019968:	6820      	ldr	r0, [r4, #0]
 801996a:	f7ff fad8 	bl	8018f1e <memmove>
 801996e:	68a3      	ldr	r3, [r4, #8]
 8019970:	9a01      	ldr	r2, [sp, #4]
 8019972:	1b9b      	subs	r3, r3, r6
 8019974:	60a3      	str	r3, [r4, #8]
 8019976:	6823      	ldr	r3, [r4, #0]
 8019978:	199e      	adds	r6, r3, r6
 801997a:	68bb      	ldr	r3, [r7, #8]
 801997c:	6026      	str	r6, [r4, #0]
 801997e:	1a9b      	subs	r3, r3, r2
 8019980:	60bb      	str	r3, [r7, #8]
 8019982:	d1cf      	bne.n	8019924 <__ssprint_r+0x7c>
 8019984:	2000      	movs	r0, #0
 8019986:	6078      	str	r0, [r7, #4]
 8019988:	b007      	add	sp, #28
 801998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801998c:	002a      	movs	r2, r5
 801998e:	9802      	ldr	r0, [sp, #8]
 8019990:	f7fb fb7e 	bl	8015090 <_realloc_r>
 8019994:	1e06      	subs	r6, r0, #0
 8019996:	d1d9      	bne.n	801994c <__ssprint_r+0xa4>
 8019998:	6921      	ldr	r1, [r4, #16]
 801999a:	9802      	ldr	r0, [sp, #8]
 801999c:	f7fe fe6e 	bl	801867c <_free_r>
 80199a0:	e7b3      	b.n	801990a <__ssprint_r+0x62>
 80199a2:	46c0      	nop			; (mov r8, r8)
 80199a4:	fffffb7f 	.word	0xfffffb7f

080199a8 <__ascii_wctomb>:
 80199a8:	0003      	movs	r3, r0
 80199aa:	1e08      	subs	r0, r1, #0
 80199ac:	d005      	beq.n	80199ba <__ascii_wctomb+0x12>
 80199ae:	2aff      	cmp	r2, #255	; 0xff
 80199b0:	d904      	bls.n	80199bc <__ascii_wctomb+0x14>
 80199b2:	228a      	movs	r2, #138	; 0x8a
 80199b4:	2001      	movs	r0, #1
 80199b6:	601a      	str	r2, [r3, #0]
 80199b8:	4240      	negs	r0, r0
 80199ba:	4770      	bx	lr
 80199bc:	2001      	movs	r0, #1
 80199be:	700a      	strb	r2, [r1, #0]
 80199c0:	e7fb      	b.n	80199ba <__ascii_wctomb+0x12>
	...

080199c4 <__register_exitproc>:
 80199c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199c6:	4f1e      	ldr	r7, [pc, #120]	; (8019a40 <__register_exitproc+0x7c>)
 80199c8:	0004      	movs	r4, r0
 80199ca:	6838      	ldr	r0, [r7, #0]
 80199cc:	0016      	movs	r6, r2
 80199ce:	9100      	str	r1, [sp, #0]
 80199d0:	9301      	str	r3, [sp, #4]
 80199d2:	f7ff fa85 	bl	8018ee0 <__retarget_lock_acquire_recursive>
 80199d6:	4b1b      	ldr	r3, [pc, #108]	; (8019a44 <__register_exitproc+0x80>)
 80199d8:	6819      	ldr	r1, [r3, #0]
 80199da:	000b      	movs	r3, r1
 80199dc:	33fc      	adds	r3, #252	; 0xfc
 80199de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80199e0:	2a00      	cmp	r2, #0
 80199e2:	d103      	bne.n	80199ec <__register_exitproc+0x28>
 80199e4:	000a      	movs	r2, r1
 80199e6:	324d      	adds	r2, #77	; 0x4d
 80199e8:	32ff      	adds	r2, #255	; 0xff
 80199ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80199ec:	6853      	ldr	r3, [r2, #4]
 80199ee:	6838      	ldr	r0, [r7, #0]
 80199f0:	2b1f      	cmp	r3, #31
 80199f2:	dd04      	ble.n	80199fe <__register_exitproc+0x3a>
 80199f4:	f7ff fa75 	bl	8018ee2 <__retarget_lock_release_recursive>
 80199f8:	2001      	movs	r0, #1
 80199fa:	4240      	negs	r0, r0
 80199fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80199fe:	2c00      	cmp	r4, #0
 8019a00:	d014      	beq.n	8019a2c <__register_exitproc+0x68>
 8019a02:	0099      	lsls	r1, r3, #2
 8019a04:	1851      	adds	r1, r2, r1
 8019a06:	000f      	movs	r7, r1
 8019a08:	3788      	adds	r7, #136	; 0x88
 8019a0a:	603e      	str	r6, [r7, #0]
 8019a0c:	2701      	movs	r7, #1
 8019a0e:	0016      	movs	r6, r2
 8019a10:	409f      	lsls	r7, r3
 8019a12:	3685      	adds	r6, #133	; 0x85
 8019a14:	36ff      	adds	r6, #255	; 0xff
 8019a16:	6875      	ldr	r5, [r6, #4]
 8019a18:	31fc      	adds	r1, #252	; 0xfc
 8019a1a:	433d      	orrs	r5, r7
 8019a1c:	6075      	str	r5, [r6, #4]
 8019a1e:	9d01      	ldr	r5, [sp, #4]
 8019a20:	60cd      	str	r5, [r1, #12]
 8019a22:	2c02      	cmp	r4, #2
 8019a24:	d102      	bne.n	8019a2c <__register_exitproc+0x68>
 8019a26:	68b1      	ldr	r1, [r6, #8]
 8019a28:	430f      	orrs	r7, r1
 8019a2a:	60b7      	str	r7, [r6, #8]
 8019a2c:	1c59      	adds	r1, r3, #1
 8019a2e:	6051      	str	r1, [r2, #4]
 8019a30:	3302      	adds	r3, #2
 8019a32:	9900      	ldr	r1, [sp, #0]
 8019a34:	009b      	lsls	r3, r3, #2
 8019a36:	5099      	str	r1, [r3, r2]
 8019a38:	f7ff fa53 	bl	8018ee2 <__retarget_lock_release_recursive>
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	e7dd      	b.n	80199fc <__register_exitproc+0x38>
 8019a40:	20000978 	.word	0x20000978
 8019a44:	0801e650 	.word	0x0801e650

08019a48 <__assert_func>:
 8019a48:	b530      	push	{r4, r5, lr}
 8019a4a:	0014      	movs	r4, r2
 8019a4c:	001a      	movs	r2, r3
 8019a4e:	4b09      	ldr	r3, [pc, #36]	; (8019a74 <__assert_func+0x2c>)
 8019a50:	0005      	movs	r5, r0
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	b085      	sub	sp, #20
 8019a56:	68d8      	ldr	r0, [r3, #12]
 8019a58:	4b07      	ldr	r3, [pc, #28]	; (8019a78 <__assert_func+0x30>)
 8019a5a:	2c00      	cmp	r4, #0
 8019a5c:	d101      	bne.n	8019a62 <__assert_func+0x1a>
 8019a5e:	4b07      	ldr	r3, [pc, #28]	; (8019a7c <__assert_func+0x34>)
 8019a60:	001c      	movs	r4, r3
 8019a62:	9301      	str	r3, [sp, #4]
 8019a64:	9100      	str	r1, [sp, #0]
 8019a66:	002b      	movs	r3, r5
 8019a68:	4905      	ldr	r1, [pc, #20]	; (8019a80 <__assert_func+0x38>)
 8019a6a:	9402      	str	r4, [sp, #8]
 8019a6c:	f000 f80a 	bl	8019a84 <fiprintf>
 8019a70:	f000 fdf2 	bl	801a658 <abort>
 8019a74:	20000138 	.word	0x20000138
 8019a78:	0801e954 	.word	0x0801e954
 8019a7c:	0801e98f 	.word	0x0801e98f
 8019a80:	0801e961 	.word	0x0801e961

08019a84 <fiprintf>:
 8019a84:	b40e      	push	{r1, r2, r3}
 8019a86:	b503      	push	{r0, r1, lr}
 8019a88:	0001      	movs	r1, r0
 8019a8a:	ab03      	add	r3, sp, #12
 8019a8c:	4804      	ldr	r0, [pc, #16]	; (8019aa0 <fiprintf+0x1c>)
 8019a8e:	cb04      	ldmia	r3!, {r2}
 8019a90:	6800      	ldr	r0, [r0, #0]
 8019a92:	9301      	str	r3, [sp, #4]
 8019a94:	f000 f83a 	bl	8019b0c <_vfiprintf_r>
 8019a98:	b002      	add	sp, #8
 8019a9a:	bc08      	pop	{r3}
 8019a9c:	b003      	add	sp, #12
 8019a9e:	4718      	bx	r3
 8019aa0:	20000138 	.word	0x20000138

08019aa4 <__sprint_r>:
 8019aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019aa6:	b085      	sub	sp, #20
 8019aa8:	9001      	str	r0, [sp, #4]
 8019aaa:	6890      	ldr	r0, [r2, #8]
 8019aac:	000d      	movs	r5, r1
 8019aae:	0014      	movs	r4, r2
 8019ab0:	2800      	cmp	r0, #0
 8019ab2:	d102      	bne.n	8019aba <__sprint_r+0x16>
 8019ab4:	6050      	str	r0, [r2, #4]
 8019ab6:	b005      	add	sp, #20
 8019ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019aba:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8019abc:	049b      	lsls	r3, r3, #18
 8019abe:	d521      	bpl.n	8019b04 <__sprint_r+0x60>
 8019ac0:	6817      	ldr	r7, [r2, #0]
 8019ac2:	2600      	movs	r6, #0
 8019ac4:	683b      	ldr	r3, [r7, #0]
 8019ac6:	9302      	str	r3, [sp, #8]
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	9300      	str	r3, [sp, #0]
 8019acc:	089b      	lsrs	r3, r3, #2
 8019ace:	9303      	str	r3, [sp, #12]
 8019ad0:	9b03      	ldr	r3, [sp, #12]
 8019ad2:	42b3      	cmp	r3, r6
 8019ad4:	dc0b      	bgt.n	8019aee <__sprint_r+0x4a>
 8019ad6:	2303      	movs	r3, #3
 8019ad8:	9800      	ldr	r0, [sp, #0]
 8019ada:	3708      	adds	r7, #8
 8019adc:	4398      	bics	r0, r3
 8019ade:	68a3      	ldr	r3, [r4, #8]
 8019ae0:	1a18      	subs	r0, r3, r0
 8019ae2:	60a0      	str	r0, [r4, #8]
 8019ae4:	d1ed      	bne.n	8019ac2 <__sprint_r+0x1e>
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	60a3      	str	r3, [r4, #8]
 8019aea:	6063      	str	r3, [r4, #4]
 8019aec:	e7e3      	b.n	8019ab6 <__sprint_r+0x12>
 8019aee:	9902      	ldr	r1, [sp, #8]
 8019af0:	00b3      	lsls	r3, r6, #2
 8019af2:	58c9      	ldr	r1, [r1, r3]
 8019af4:	002a      	movs	r2, r5
 8019af6:	9801      	ldr	r0, [sp, #4]
 8019af8:	f000 ff2c 	bl	801a954 <_fputwc_r>
 8019afc:	1c43      	adds	r3, r0, #1
 8019afe:	d0f2      	beq.n	8019ae6 <__sprint_r+0x42>
 8019b00:	3601      	adds	r6, #1
 8019b02:	e7e5      	b.n	8019ad0 <__sprint_r+0x2c>
 8019b04:	9801      	ldr	r0, [sp, #4]
 8019b06:	f000 ff4f 	bl	801a9a8 <__sfvwrite_r>
 8019b0a:	e7ec      	b.n	8019ae6 <__sprint_r+0x42>

08019b0c <_vfiprintf_r>:
 8019b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b0e:	b0c3      	sub	sp, #268	; 0x10c
 8019b10:	001c      	movs	r4, r3
 8019b12:	001d      	movs	r5, r3
 8019b14:	9006      	str	r0, [sp, #24]
 8019b16:	9103      	str	r1, [sp, #12]
 8019b18:	9207      	str	r2, [sp, #28]
 8019b1a:	2800      	cmp	r0, #0
 8019b1c:	d005      	beq.n	8019b2a <_vfiprintf_r+0x1e>
 8019b1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019b20:	9304      	str	r3, [sp, #16]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d101      	bne.n	8019b2a <_vfiprintf_r+0x1e>
 8019b26:	f000 fead 	bl	801a884 <__sinit>
 8019b2a:	9b03      	ldr	r3, [sp, #12]
 8019b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019b2e:	07db      	lsls	r3, r3, #31
 8019b30:	d407      	bmi.n	8019b42 <_vfiprintf_r+0x36>
 8019b32:	9b03      	ldr	r3, [sp, #12]
 8019b34:	899b      	ldrh	r3, [r3, #12]
 8019b36:	059b      	lsls	r3, r3, #22
 8019b38:	d403      	bmi.n	8019b42 <_vfiprintf_r+0x36>
 8019b3a:	9b03      	ldr	r3, [sp, #12]
 8019b3c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8019b3e:	f7ff f9cf 	bl	8018ee0 <__retarget_lock_acquire_recursive>
 8019b42:	9b03      	ldr	r3, [sp, #12]
 8019b44:	220c      	movs	r2, #12
 8019b46:	5e9a      	ldrsh	r2, [r3, r2]
 8019b48:	2380      	movs	r3, #128	; 0x80
 8019b4a:	019b      	lsls	r3, r3, #6
 8019b4c:	421a      	tst	r2, r3
 8019b4e:	d107      	bne.n	8019b60 <_vfiprintf_r+0x54>
 8019b50:	4313      	orrs	r3, r2
 8019b52:	9a03      	ldr	r2, [sp, #12]
 8019b54:	8193      	strh	r3, [r2, #12]
 8019b56:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8019b58:	4ba7      	ldr	r3, [pc, #668]	; (8019df8 <_vfiprintf_r+0x2ec>)
 8019b5a:	4013      	ands	r3, r2
 8019b5c:	9a03      	ldr	r2, [sp, #12]
 8019b5e:	6653      	str	r3, [r2, #100]	; 0x64
 8019b60:	9b03      	ldr	r3, [sp, #12]
 8019b62:	899b      	ldrh	r3, [r3, #12]
 8019b64:	071b      	lsls	r3, r3, #28
 8019b66:	d503      	bpl.n	8019b70 <_vfiprintf_r+0x64>
 8019b68:	9b03      	ldr	r3, [sp, #12]
 8019b6a:	691b      	ldr	r3, [r3, #16]
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d118      	bne.n	8019ba2 <_vfiprintf_r+0x96>
 8019b70:	9903      	ldr	r1, [sp, #12]
 8019b72:	9806      	ldr	r0, [sp, #24]
 8019b74:	f000 fd0c 	bl	801a590 <__swsetup_r>
 8019b78:	2800      	cmp	r0, #0
 8019b7a:	d012      	beq.n	8019ba2 <_vfiprintf_r+0x96>
 8019b7c:	9b03      	ldr	r3, [sp, #12]
 8019b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019b80:	07db      	lsls	r3, r3, #31
 8019b82:	d505      	bpl.n	8019b90 <_vfiprintf_r+0x84>
 8019b84:	2301      	movs	r3, #1
 8019b86:	425b      	negs	r3, r3
 8019b88:	9308      	str	r3, [sp, #32]
 8019b8a:	9808      	ldr	r0, [sp, #32]
 8019b8c:	b043      	add	sp, #268	; 0x10c
 8019b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b90:	9b03      	ldr	r3, [sp, #12]
 8019b92:	899b      	ldrh	r3, [r3, #12]
 8019b94:	059b      	lsls	r3, r3, #22
 8019b96:	d4f5      	bmi.n	8019b84 <_vfiprintf_r+0x78>
 8019b98:	9b03      	ldr	r3, [sp, #12]
 8019b9a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8019b9c:	f7ff f9a1 	bl	8018ee2 <__retarget_lock_release_recursive>
 8019ba0:	e7f0      	b.n	8019b84 <_vfiprintf_r+0x78>
 8019ba2:	9b03      	ldr	r3, [sp, #12]
 8019ba4:	899a      	ldrh	r2, [r3, #12]
 8019ba6:	231a      	movs	r3, #26
 8019ba8:	4013      	ands	r3, r2
 8019baa:	2b0a      	cmp	r3, #10
 8019bac:	d116      	bne.n	8019bdc <_vfiprintf_r+0xd0>
 8019bae:	9b03      	ldr	r3, [sp, #12]
 8019bb0:	210e      	movs	r1, #14
 8019bb2:	5e5b      	ldrsh	r3, [r3, r1]
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	db11      	blt.n	8019bdc <_vfiprintf_r+0xd0>
 8019bb8:	9b03      	ldr	r3, [sp, #12]
 8019bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019bbc:	07db      	lsls	r3, r3, #31
 8019bbe:	d405      	bmi.n	8019bcc <_vfiprintf_r+0xc0>
 8019bc0:	0593      	lsls	r3, r2, #22
 8019bc2:	d403      	bmi.n	8019bcc <_vfiprintf_r+0xc0>
 8019bc4:	9b03      	ldr	r3, [sp, #12]
 8019bc6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8019bc8:	f7ff f98b 	bl	8018ee2 <__retarget_lock_release_recursive>
 8019bcc:	0023      	movs	r3, r4
 8019bce:	9a07      	ldr	r2, [sp, #28]
 8019bd0:	9903      	ldr	r1, [sp, #12]
 8019bd2:	9806      	ldr	r0, [sp, #24]
 8019bd4:	f000 fc98 	bl	801a508 <__sbprintf>
 8019bd8:	9008      	str	r0, [sp, #32]
 8019bda:	e7d6      	b.n	8019b8a <_vfiprintf_r+0x7e>
 8019bdc:	2300      	movs	r3, #0
 8019bde:	af19      	add	r7, sp, #100	; 0x64
 8019be0:	9716      	str	r7, [sp, #88]	; 0x58
 8019be2:	9318      	str	r3, [sp, #96]	; 0x60
 8019be4:	9317      	str	r3, [sp, #92]	; 0x5c
 8019be6:	930c      	str	r3, [sp, #48]	; 0x30
 8019be8:	930d      	str	r3, [sp, #52]	; 0x34
 8019bea:	930e      	str	r3, [sp, #56]	; 0x38
 8019bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8019bee:	9308      	str	r3, [sp, #32]
 8019bf0:	9c07      	ldr	r4, [sp, #28]
 8019bf2:	7823      	ldrb	r3, [r4, #0]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d002      	beq.n	8019bfe <_vfiprintf_r+0xf2>
 8019bf8:	2b25      	cmp	r3, #37	; 0x25
 8019bfa:	d000      	beq.n	8019bfe <_vfiprintf_r+0xf2>
 8019bfc:	e093      	b.n	8019d26 <_vfiprintf_r+0x21a>
 8019bfe:	9b07      	ldr	r3, [sp, #28]
 8019c00:	1ae3      	subs	r3, r4, r3
 8019c02:	001e      	movs	r6, r3
 8019c04:	9b07      	ldr	r3, [sp, #28]
 8019c06:	429c      	cmp	r4, r3
 8019c08:	d01a      	beq.n	8019c40 <_vfiprintf_r+0x134>
 8019c0a:	46b4      	mov	ip, r6
 8019c0c:	603b      	str	r3, [r7, #0]
 8019c0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019c10:	607e      	str	r6, [r7, #4]
 8019c12:	4463      	add	r3, ip
 8019c14:	9318      	str	r3, [sp, #96]	; 0x60
 8019c16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019c18:	3708      	adds	r7, #8
 8019c1a:	9304      	str	r3, [sp, #16]
 8019c1c:	3301      	adds	r3, #1
 8019c1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019c20:	2b07      	cmp	r3, #7
 8019c22:	dd09      	ble.n	8019c38 <_vfiprintf_r+0x12c>
 8019c24:	9903      	ldr	r1, [sp, #12]
 8019c26:	9806      	ldr	r0, [sp, #24]
 8019c28:	aa16      	add	r2, sp, #88	; 0x58
 8019c2a:	f7ff ff3b 	bl	8019aa4 <__sprint_r>
 8019c2e:	2800      	cmp	r0, #0
 8019c30:	d001      	beq.n	8019c36 <_vfiprintf_r+0x12a>
 8019c32:	f000 fc00 	bl	801a436 <_vfiprintf_r+0x92a>
 8019c36:	af19      	add	r7, sp, #100	; 0x64
 8019c38:	46b4      	mov	ip, r6
 8019c3a:	9b08      	ldr	r3, [sp, #32]
 8019c3c:	4463      	add	r3, ip
 8019c3e:	9308      	str	r3, [sp, #32]
 8019c40:	7823      	ldrb	r3, [r4, #0]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d101      	bne.n	8019c4a <_vfiprintf_r+0x13e>
 8019c46:	f000 fc1b 	bl	801a480 <_vfiprintf_r+0x974>
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	a914      	add	r1, sp, #80	; 0x50
 8019c4e:	70ca      	strb	r2, [r1, #3]
 8019c50:	2101      	movs	r1, #1
 8019c52:	1c63      	adds	r3, r4, #1
 8019c54:	0014      	movs	r4, r2
 8019c56:	4249      	negs	r1, r1
 8019c58:	9105      	str	r1, [sp, #20]
 8019c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8019c5c:	1c5a      	adds	r2, r3, #1
 8019c5e:	781b      	ldrb	r3, [r3, #0]
 8019c60:	9207      	str	r2, [sp, #28]
 8019c62:	0018      	movs	r0, r3
 8019c64:	3820      	subs	r0, #32
 8019c66:	285a      	cmp	r0, #90	; 0x5a
 8019c68:	d900      	bls.n	8019c6c <_vfiprintf_r+0x160>
 8019c6a:	e37c      	b.n	801a366 <_vfiprintf_r+0x85a>
 8019c6c:	f7e6 fa66 	bl	800013c <__gnu_thumb1_case_uhi>
 8019c70:	037b0098 	.word	0x037b0098
 8019c74:	00a1037b 	.word	0x00a1037b
 8019c78:	037b037b 	.word	0x037b037b
 8019c7c:	007d037b 	.word	0x007d037b
 8019c80:	037b037b 	.word	0x037b037b
 8019c84:	00ab00a3 	.word	0x00ab00a3
 8019c88:	00a9037b 	.word	0x00a9037b
 8019c8c:	037b00af 	.word	0x037b00af
 8019c90:	00d500d3 	.word	0x00d500d3
 8019c94:	00d500d5 	.word	0x00d500d5
 8019c98:	00d500d5 	.word	0x00d500d5
 8019c9c:	00d500d5 	.word	0x00d500d5
 8019ca0:	00d500d5 	.word	0x00d500d5
 8019ca4:	037b037b 	.word	0x037b037b
 8019ca8:	037b037b 	.word	0x037b037b
 8019cac:	037b037b 	.word	0x037b037b
 8019cb0:	037b037b 	.word	0x037b037b
 8019cb4:	00fe037b 	.word	0x00fe037b
 8019cb8:	037b01f9 	.word	0x037b01f9
 8019cbc:	037b037b 	.word	0x037b037b
 8019cc0:	037b037b 	.word	0x037b037b
 8019cc4:	037b037b 	.word	0x037b037b
 8019cc8:	037b037b 	.word	0x037b037b
 8019ccc:	0252037b 	.word	0x0252037b
 8019cd0:	037b037b 	.word	0x037b037b
 8019cd4:	0295037b 	.word	0x0295037b
 8019cd8:	02b1037b 	.word	0x02b1037b
 8019cdc:	037b037b 	.word	0x037b037b
 8019ce0:	037b02ec 	.word	0x037b02ec
 8019ce4:	037b037b 	.word	0x037b037b
 8019ce8:	037b037b 	.word	0x037b037b
 8019cec:	037b037b 	.word	0x037b037b
 8019cf0:	037b037b 	.word	0x037b037b
 8019cf4:	00fe037b 	.word	0x00fe037b
 8019cf8:	037b01fb 	.word	0x037b01fb
 8019cfc:	037b037b 	.word	0x037b037b
 8019d00:	01fb00e7 	.word	0x01fb00e7
 8019d04:	037b00fa 	.word	0x037b00fa
 8019d08:	037b00f3 	.word	0x037b00f3
 8019d0c:	0254023b 	.word	0x0254023b
 8019d10:	00fa0287 	.word	0x00fa0287
 8019d14:	0295037b 	.word	0x0295037b
 8019d18:	02b3009f 	.word	0x02b3009f
 8019d1c:	037b037b 	.word	0x037b037b
 8019d20:	037b005d 	.word	0x037b005d
 8019d24:	009f      	.short	0x009f
 8019d26:	3401      	adds	r4, #1
 8019d28:	e763      	b.n	8019bf2 <_vfiprintf_r+0xe6>
 8019d2a:	4a34      	ldr	r2, [pc, #208]	; (8019dfc <_vfiprintf_r+0x2f0>)
 8019d2c:	0020      	movs	r0, r4
 8019d2e:	920c      	str	r2, [sp, #48]	; 0x30
 8019d30:	2220      	movs	r2, #32
 8019d32:	4010      	ands	r0, r2
 8019d34:	4214      	tst	r4, r2
 8019d36:	d100      	bne.n	8019d3a <_vfiprintf_r+0x22e>
 8019d38:	e288      	b.n	801a24c <_vfiprintf_r+0x740>
 8019d3a:	3a19      	subs	r2, #25
 8019d3c:	3507      	adds	r5, #7
 8019d3e:	4395      	bics	r5, r2
 8019d40:	0028      	movs	r0, r5
 8019d42:	c806      	ldmia	r0!, {r1, r2}
 8019d44:	9100      	str	r1, [sp, #0]
 8019d46:	9201      	str	r2, [sp, #4]
 8019d48:	9004      	str	r0, [sp, #16]
 8019d4a:	07e2      	lsls	r2, r4, #31
 8019d4c:	d509      	bpl.n	8019d62 <_vfiprintf_r+0x256>
 8019d4e:	9a00      	ldr	r2, [sp, #0]
 8019d50:	9901      	ldr	r1, [sp, #4]
 8019d52:	430a      	orrs	r2, r1
 8019d54:	d005      	beq.n	8019d62 <_vfiprintf_r+0x256>
 8019d56:	aa15      	add	r2, sp, #84	; 0x54
 8019d58:	2130      	movs	r1, #48	; 0x30
 8019d5a:	7053      	strb	r3, [r2, #1]
 8019d5c:	2302      	movs	r3, #2
 8019d5e:	7011      	strb	r1, [r2, #0]
 8019d60:	431c      	orrs	r4, r3
 8019d62:	4b27      	ldr	r3, [pc, #156]	; (8019e00 <_vfiprintf_r+0x2f4>)
 8019d64:	401c      	ands	r4, r3
 8019d66:	2302      	movs	r3, #2
 8019d68:	e1e6      	b.n	801a138 <_vfiprintf_r+0x62c>
 8019d6a:	9806      	ldr	r0, [sp, #24]
 8019d6c:	f7ff f8b2 	bl	8018ed4 <_localeconv_r>
 8019d70:	6843      	ldr	r3, [r0, #4]
 8019d72:	0018      	movs	r0, r3
 8019d74:	930f      	str	r3, [sp, #60]	; 0x3c
 8019d76:	f7e6 f9cf 	bl	8000118 <strlen>
 8019d7a:	900e      	str	r0, [sp, #56]	; 0x38
 8019d7c:	9806      	ldr	r0, [sp, #24]
 8019d7e:	f7ff f8a9 	bl	8018ed4 <_localeconv_r>
 8019d82:	6883      	ldr	r3, [r0, #8]
 8019d84:	930d      	str	r3, [sp, #52]	; 0x34
 8019d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d010      	beq.n	8019dae <_vfiprintf_r+0x2a2>
 8019d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d00d      	beq.n	8019dae <_vfiprintf_r+0x2a2>
 8019d92:	781b      	ldrb	r3, [r3, #0]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d00a      	beq.n	8019dae <_vfiprintf_r+0x2a2>
 8019d98:	2380      	movs	r3, #128	; 0x80
 8019d9a:	00db      	lsls	r3, r3, #3
 8019d9c:	431c      	orrs	r4, r3
 8019d9e:	e006      	b.n	8019dae <_vfiprintf_r+0x2a2>
 8019da0:	ab14      	add	r3, sp, #80	; 0x50
 8019da2:	78da      	ldrb	r2, [r3, #3]
 8019da4:	3303      	adds	r3, #3
 8019da6:	2a00      	cmp	r2, #0
 8019da8:	d101      	bne.n	8019dae <_vfiprintf_r+0x2a2>
 8019daa:	3220      	adds	r2, #32
 8019dac:	701a      	strb	r2, [r3, #0]
 8019dae:	9b07      	ldr	r3, [sp, #28]
 8019db0:	e754      	b.n	8019c5c <_vfiprintf_r+0x150>
 8019db2:	2301      	movs	r3, #1
 8019db4:	e7f2      	b.n	8019d9c <_vfiprintf_r+0x290>
 8019db6:	cd08      	ldmia	r5!, {r3}
 8019db8:	9309      	str	r3, [sp, #36]	; 0x24
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	daf7      	bge.n	8019dae <_vfiprintf_r+0x2a2>
 8019dbe:	425b      	negs	r3, r3
 8019dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8019dc2:	2304      	movs	r3, #4
 8019dc4:	e7ea      	b.n	8019d9c <_vfiprintf_r+0x290>
 8019dc6:	222b      	movs	r2, #43	; 0x2b
 8019dc8:	ab14      	add	r3, sp, #80	; 0x50
 8019dca:	70da      	strb	r2, [r3, #3]
 8019dcc:	e7ef      	b.n	8019dae <_vfiprintf_r+0x2a2>
 8019dce:	9b07      	ldr	r3, [sp, #28]
 8019dd0:	1c5a      	adds	r2, r3, #1
 8019dd2:	781b      	ldrb	r3, [r3, #0]
 8019dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8019dd6:	d015      	beq.n	8019e04 <_vfiprintf_r+0x2f8>
 8019dd8:	2100      	movs	r1, #0
 8019dda:	9105      	str	r1, [sp, #20]
 8019ddc:	0019      	movs	r1, r3
 8019dde:	3930      	subs	r1, #48	; 0x30
 8019de0:	9207      	str	r2, [sp, #28]
 8019de2:	2909      	cmp	r1, #9
 8019de4:	d900      	bls.n	8019de8 <_vfiprintf_r+0x2dc>
 8019de6:	e73c      	b.n	8019c62 <_vfiprintf_r+0x156>
 8019de8:	230a      	movs	r3, #10
 8019dea:	9805      	ldr	r0, [sp, #20]
 8019dec:	4358      	muls	r0, r3
 8019dee:	1843      	adds	r3, r0, r1
 8019df0:	9305      	str	r3, [sp, #20]
 8019df2:	7813      	ldrb	r3, [r2, #0]
 8019df4:	3201      	adds	r2, #1
 8019df6:	e7f1      	b.n	8019ddc <_vfiprintf_r+0x2d0>
 8019df8:	ffffdfff 	.word	0xffffdfff
 8019dfc:	0801e6b8 	.word	0x0801e6b8
 8019e00:	fffffbff 	.word	0xfffffbff
 8019e04:	cd08      	ldmia	r5!, {r3}
 8019e06:	9305      	str	r3, [sp, #20]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	da02      	bge.n	8019e12 <_vfiprintf_r+0x306>
 8019e0c:	2301      	movs	r3, #1
 8019e0e:	425b      	negs	r3, r3
 8019e10:	9305      	str	r3, [sp, #20]
 8019e12:	9207      	str	r2, [sp, #28]
 8019e14:	e7cb      	b.n	8019dae <_vfiprintf_r+0x2a2>
 8019e16:	2380      	movs	r3, #128	; 0x80
 8019e18:	e7c0      	b.n	8019d9c <_vfiprintf_r+0x290>
 8019e1a:	2100      	movs	r1, #0
 8019e1c:	9a07      	ldr	r2, [sp, #28]
 8019e1e:	9109      	str	r1, [sp, #36]	; 0x24
 8019e20:	200a      	movs	r0, #10
 8019e22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019e24:	3b30      	subs	r3, #48	; 0x30
 8019e26:	4341      	muls	r1, r0
 8019e28:	185b      	adds	r3, r3, r1
 8019e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8019e2c:	0013      	movs	r3, r2
 8019e2e:	781b      	ldrb	r3, [r3, #0]
 8019e30:	3201      	adds	r2, #1
 8019e32:	0019      	movs	r1, r3
 8019e34:	3930      	subs	r1, #48	; 0x30
 8019e36:	9207      	str	r2, [sp, #28]
 8019e38:	2909      	cmp	r1, #9
 8019e3a:	d9f1      	bls.n	8019e20 <_vfiprintf_r+0x314>
 8019e3c:	e711      	b.n	8019c62 <_vfiprintf_r+0x156>
 8019e3e:	9b07      	ldr	r3, [sp, #28]
 8019e40:	781b      	ldrb	r3, [r3, #0]
 8019e42:	2b68      	cmp	r3, #104	; 0x68
 8019e44:	d105      	bne.n	8019e52 <_vfiprintf_r+0x346>
 8019e46:	9b07      	ldr	r3, [sp, #28]
 8019e48:	3301      	adds	r3, #1
 8019e4a:	9307      	str	r3, [sp, #28]
 8019e4c:	2380      	movs	r3, #128	; 0x80
 8019e4e:	009b      	lsls	r3, r3, #2
 8019e50:	e7a4      	b.n	8019d9c <_vfiprintf_r+0x290>
 8019e52:	2340      	movs	r3, #64	; 0x40
 8019e54:	e7a2      	b.n	8019d9c <_vfiprintf_r+0x290>
 8019e56:	9b07      	ldr	r3, [sp, #28]
 8019e58:	781b      	ldrb	r3, [r3, #0]
 8019e5a:	2b6c      	cmp	r3, #108	; 0x6c
 8019e5c:	d104      	bne.n	8019e68 <_vfiprintf_r+0x35c>
 8019e5e:	9b07      	ldr	r3, [sp, #28]
 8019e60:	3301      	adds	r3, #1
 8019e62:	9307      	str	r3, [sp, #28]
 8019e64:	2320      	movs	r3, #32
 8019e66:	e799      	b.n	8019d9c <_vfiprintf_r+0x290>
 8019e68:	2310      	movs	r3, #16
 8019e6a:	e797      	b.n	8019d9c <_vfiprintf_r+0x290>
 8019e6c:	9504      	str	r5, [sp, #16]
 8019e6e:	9a04      	ldr	r2, [sp, #16]
 8019e70:	ad29      	add	r5, sp, #164	; 0xa4
 8019e72:	ca08      	ldmia	r2!, {r3}
 8019e74:	9204      	str	r2, [sp, #16]
 8019e76:	2200      	movs	r2, #0
 8019e78:	702b      	strb	r3, [r5, #0]
 8019e7a:	ab14      	add	r3, sp, #80	; 0x50
 8019e7c:	70da      	strb	r2, [r3, #3]
 8019e7e:	2301      	movs	r3, #1
 8019e80:	920b      	str	r2, [sp, #44]	; 0x2c
 8019e82:	9305      	str	r3, [sp, #20]
 8019e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e86:	9a05      	ldr	r2, [sp, #20]
 8019e88:	930a      	str	r3, [sp, #40]	; 0x28
 8019e8a:	4293      	cmp	r3, r2
 8019e8c:	da00      	bge.n	8019e90 <_vfiprintf_r+0x384>
 8019e8e:	920a      	str	r2, [sp, #40]	; 0x28
 8019e90:	ab14      	add	r3, sp, #80	; 0x50
 8019e92:	3303      	adds	r3, #3
 8019e94:	781b      	ldrb	r3, [r3, #0]
 8019e96:	1e5a      	subs	r2, r3, #1
 8019e98:	4193      	sbcs	r3, r2
 8019e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e9c:	18d3      	adds	r3, r2, r3
 8019e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8019ea0:	0022      	movs	r2, r4
 8019ea2:	2302      	movs	r3, #2
 8019ea4:	401a      	ands	r2, r3
 8019ea6:	9210      	str	r2, [sp, #64]	; 0x40
 8019ea8:	421c      	tst	r4, r3
 8019eaa:	d002      	beq.n	8019eb2 <_vfiprintf_r+0x3a6>
 8019eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019eae:	3302      	adds	r3, #2
 8019eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8019eb2:	2384      	movs	r3, #132	; 0x84
 8019eb4:	0022      	movs	r2, r4
 8019eb6:	401a      	ands	r2, r3
 8019eb8:	9211      	str	r2, [sp, #68]	; 0x44
 8019eba:	421c      	tst	r4, r3
 8019ebc:	d11f      	bne.n	8019efe <_vfiprintf_r+0x3f2>
 8019ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019ec2:	1a9b      	subs	r3, r3, r2
 8019ec4:	1e1e      	subs	r6, r3, #0
 8019ec6:	dd1a      	ble.n	8019efe <_vfiprintf_r+0x3f2>
 8019ec8:	0039      	movs	r1, r7
 8019eca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019ecc:	48c9      	ldr	r0, [pc, #804]	; (801a1f4 <_vfiprintf_r+0x6e8>)
 8019ece:	9312      	str	r3, [sp, #72]	; 0x48
 8019ed0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019ed2:	3301      	adds	r3, #1
 8019ed4:	3108      	adds	r1, #8
 8019ed6:	6038      	str	r0, [r7, #0]
 8019ed8:	2e10      	cmp	r6, #16
 8019eda:	dd00      	ble.n	8019ede <_vfiprintf_r+0x3d2>
 8019edc:	e251      	b.n	801a382 <_vfiprintf_r+0x876>
 8019ede:	18b2      	adds	r2, r6, r2
 8019ee0:	607e      	str	r6, [r7, #4]
 8019ee2:	9218      	str	r2, [sp, #96]	; 0x60
 8019ee4:	000f      	movs	r7, r1
 8019ee6:	9317      	str	r3, [sp, #92]	; 0x5c
 8019ee8:	2b07      	cmp	r3, #7
 8019eea:	dd08      	ble.n	8019efe <_vfiprintf_r+0x3f2>
 8019eec:	9903      	ldr	r1, [sp, #12]
 8019eee:	9806      	ldr	r0, [sp, #24]
 8019ef0:	aa16      	add	r2, sp, #88	; 0x58
 8019ef2:	f7ff fdd7 	bl	8019aa4 <__sprint_r>
 8019ef6:	2800      	cmp	r0, #0
 8019ef8:	d000      	beq.n	8019efc <_vfiprintf_r+0x3f0>
 8019efa:	e29c      	b.n	801a436 <_vfiprintf_r+0x92a>
 8019efc:	af19      	add	r7, sp, #100	; 0x64
 8019efe:	ab14      	add	r3, sp, #80	; 0x50
 8019f00:	1cda      	adds	r2, r3, #3
 8019f02:	78db      	ldrb	r3, [r3, #3]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d017      	beq.n	8019f38 <_vfiprintf_r+0x42c>
 8019f08:	603a      	str	r2, [r7, #0]
 8019f0a:	2201      	movs	r2, #1
 8019f0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019f0e:	607a      	str	r2, [r7, #4]
 8019f10:	9312      	str	r3, [sp, #72]	; 0x48
 8019f12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019f14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019f16:	3201      	adds	r2, #1
 8019f18:	9313      	str	r3, [sp, #76]	; 0x4c
 8019f1a:	3301      	adds	r3, #1
 8019f1c:	9218      	str	r2, [sp, #96]	; 0x60
 8019f1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019f20:	3708      	adds	r7, #8
 8019f22:	2b07      	cmp	r3, #7
 8019f24:	dd08      	ble.n	8019f38 <_vfiprintf_r+0x42c>
 8019f26:	9903      	ldr	r1, [sp, #12]
 8019f28:	9806      	ldr	r0, [sp, #24]
 8019f2a:	aa16      	add	r2, sp, #88	; 0x58
 8019f2c:	f7ff fdba 	bl	8019aa4 <__sprint_r>
 8019f30:	2800      	cmp	r0, #0
 8019f32:	d000      	beq.n	8019f36 <_vfiprintf_r+0x42a>
 8019f34:	e27f      	b.n	801a436 <_vfiprintf_r+0x92a>
 8019f36:	af19      	add	r7, sp, #100	; 0x64
 8019f38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d018      	beq.n	8019f70 <_vfiprintf_r+0x464>
 8019f3e:	aa15      	add	r2, sp, #84	; 0x54
 8019f40:	603a      	str	r2, [r7, #0]
 8019f42:	2202      	movs	r2, #2
 8019f44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019f46:	607a      	str	r2, [r7, #4]
 8019f48:	9310      	str	r3, [sp, #64]	; 0x40
 8019f4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019f4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019f4e:	3202      	adds	r2, #2
 8019f50:	9312      	str	r3, [sp, #72]	; 0x48
 8019f52:	3301      	adds	r3, #1
 8019f54:	9218      	str	r2, [sp, #96]	; 0x60
 8019f56:	9317      	str	r3, [sp, #92]	; 0x5c
 8019f58:	3708      	adds	r7, #8
 8019f5a:	2b07      	cmp	r3, #7
 8019f5c:	dd08      	ble.n	8019f70 <_vfiprintf_r+0x464>
 8019f5e:	9903      	ldr	r1, [sp, #12]
 8019f60:	9806      	ldr	r0, [sp, #24]
 8019f62:	aa16      	add	r2, sp, #88	; 0x58
 8019f64:	f7ff fd9e 	bl	8019aa4 <__sprint_r>
 8019f68:	2800      	cmp	r0, #0
 8019f6a:	d000      	beq.n	8019f6e <_vfiprintf_r+0x462>
 8019f6c:	e263      	b.n	801a436 <_vfiprintf_r+0x92a>
 8019f6e:	af19      	add	r7, sp, #100	; 0x64
 8019f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019f72:	2b80      	cmp	r3, #128	; 0x80
 8019f74:	d11f      	bne.n	8019fb6 <_vfiprintf_r+0x4aa>
 8019f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019f7a:	1a9b      	subs	r3, r3, r2
 8019f7c:	1e1e      	subs	r6, r3, #0
 8019f7e:	dd1a      	ble.n	8019fb6 <_vfiprintf_r+0x4aa>
 8019f80:	0039      	movs	r1, r7
 8019f82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019f84:	489c      	ldr	r0, [pc, #624]	; (801a1f8 <_vfiprintf_r+0x6ec>)
 8019f86:	9310      	str	r3, [sp, #64]	; 0x40
 8019f88:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019f8a:	3301      	adds	r3, #1
 8019f8c:	3108      	adds	r1, #8
 8019f8e:	6038      	str	r0, [r7, #0]
 8019f90:	2e10      	cmp	r6, #16
 8019f92:	dd00      	ble.n	8019f96 <_vfiprintf_r+0x48a>
 8019f94:	e209      	b.n	801a3aa <_vfiprintf_r+0x89e>
 8019f96:	18b2      	adds	r2, r6, r2
 8019f98:	607e      	str	r6, [r7, #4]
 8019f9a:	9218      	str	r2, [sp, #96]	; 0x60
 8019f9c:	000f      	movs	r7, r1
 8019f9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019fa0:	2b07      	cmp	r3, #7
 8019fa2:	dd08      	ble.n	8019fb6 <_vfiprintf_r+0x4aa>
 8019fa4:	9903      	ldr	r1, [sp, #12]
 8019fa6:	9806      	ldr	r0, [sp, #24]
 8019fa8:	aa16      	add	r2, sp, #88	; 0x58
 8019faa:	f7ff fd7b 	bl	8019aa4 <__sprint_r>
 8019fae:	2800      	cmp	r0, #0
 8019fb0:	d000      	beq.n	8019fb4 <_vfiprintf_r+0x4a8>
 8019fb2:	e240      	b.n	801a436 <_vfiprintf_r+0x92a>
 8019fb4:	af19      	add	r7, sp, #100	; 0x64
 8019fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019fb8:	9a05      	ldr	r2, [sp, #20]
 8019fba:	1a9b      	subs	r3, r3, r2
 8019fbc:	1e1e      	subs	r6, r3, #0
 8019fbe:	dd1a      	ble.n	8019ff6 <_vfiprintf_r+0x4ea>
 8019fc0:	0039      	movs	r1, r7
 8019fc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019fc4:	488c      	ldr	r0, [pc, #560]	; (801a1f8 <_vfiprintf_r+0x6ec>)
 8019fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8019fc8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019fca:	3301      	adds	r3, #1
 8019fcc:	3108      	adds	r1, #8
 8019fce:	6038      	str	r0, [r7, #0]
 8019fd0:	2e10      	cmp	r6, #16
 8019fd2:	dd00      	ble.n	8019fd6 <_vfiprintf_r+0x4ca>
 8019fd4:	e1fd      	b.n	801a3d2 <_vfiprintf_r+0x8c6>
 8019fd6:	18b2      	adds	r2, r6, r2
 8019fd8:	607e      	str	r6, [r7, #4]
 8019fda:	9218      	str	r2, [sp, #96]	; 0x60
 8019fdc:	000f      	movs	r7, r1
 8019fde:	9317      	str	r3, [sp, #92]	; 0x5c
 8019fe0:	2b07      	cmp	r3, #7
 8019fe2:	dd08      	ble.n	8019ff6 <_vfiprintf_r+0x4ea>
 8019fe4:	9903      	ldr	r1, [sp, #12]
 8019fe6:	9806      	ldr	r0, [sp, #24]
 8019fe8:	aa16      	add	r2, sp, #88	; 0x58
 8019fea:	f7ff fd5b 	bl	8019aa4 <__sprint_r>
 8019fee:	2800      	cmp	r0, #0
 8019ff0:	d000      	beq.n	8019ff4 <_vfiprintf_r+0x4e8>
 8019ff2:	e220      	b.n	801a436 <_vfiprintf_r+0x92a>
 8019ff4:	af19      	add	r7, sp, #100	; 0x64
 8019ff6:	9b05      	ldr	r3, [sp, #20]
 8019ff8:	603d      	str	r5, [r7, #0]
 8019ffa:	607b      	str	r3, [r7, #4]
 8019ffc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019ffe:	3708      	adds	r7, #8
 801a000:	930b      	str	r3, [sp, #44]	; 0x2c
 801a002:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a004:	9b05      	ldr	r3, [sp, #20]
 801a006:	4694      	mov	ip, r2
 801a008:	4463      	add	r3, ip
 801a00a:	9318      	str	r3, [sp, #96]	; 0x60
 801a00c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a00e:	9305      	str	r3, [sp, #20]
 801a010:	3301      	adds	r3, #1
 801a012:	9317      	str	r3, [sp, #92]	; 0x5c
 801a014:	2b07      	cmp	r3, #7
 801a016:	dd08      	ble.n	801a02a <_vfiprintf_r+0x51e>
 801a018:	9903      	ldr	r1, [sp, #12]
 801a01a:	9806      	ldr	r0, [sp, #24]
 801a01c:	aa16      	add	r2, sp, #88	; 0x58
 801a01e:	f7ff fd41 	bl	8019aa4 <__sprint_r>
 801a022:	2800      	cmp	r0, #0
 801a024:	d000      	beq.n	801a028 <_vfiprintf_r+0x51c>
 801a026:	e206      	b.n	801a436 <_vfiprintf_r+0x92a>
 801a028:	af19      	add	r7, sp, #100	; 0x64
 801a02a:	0763      	lsls	r3, r4, #29
 801a02c:	d500      	bpl.n	801a030 <_vfiprintf_r+0x524>
 801a02e:	e1e4      	b.n	801a3fa <_vfiprintf_r+0x8ee>
 801a030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a034:	4293      	cmp	r3, r2
 801a036:	da00      	bge.n	801a03a <_vfiprintf_r+0x52e>
 801a038:	0013      	movs	r3, r2
 801a03a:	9a08      	ldr	r2, [sp, #32]
 801a03c:	18d3      	adds	r3, r2, r3
 801a03e:	9308      	str	r3, [sp, #32]
 801a040:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a042:	9305      	str	r3, [sp, #20]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d007      	beq.n	801a058 <_vfiprintf_r+0x54c>
 801a048:	9903      	ldr	r1, [sp, #12]
 801a04a:	9806      	ldr	r0, [sp, #24]
 801a04c:	aa16      	add	r2, sp, #88	; 0x58
 801a04e:	f7ff fd29 	bl	8019aa4 <__sprint_r>
 801a052:	2800      	cmp	r0, #0
 801a054:	d000      	beq.n	801a058 <_vfiprintf_r+0x54c>
 801a056:	e1ee      	b.n	801a436 <_vfiprintf_r+0x92a>
 801a058:	2300      	movs	r3, #0
 801a05a:	9d04      	ldr	r5, [sp, #16]
 801a05c:	9317      	str	r3, [sp, #92]	; 0x5c
 801a05e:	af19      	add	r7, sp, #100	; 0x64
 801a060:	e5c6      	b.n	8019bf0 <_vfiprintf_r+0xe4>
 801a062:	2310      	movs	r3, #16
 801a064:	431c      	orrs	r4, r3
 801a066:	06a3      	lsls	r3, r4, #26
 801a068:	d52b      	bpl.n	801a0c2 <_vfiprintf_r+0x5b6>
 801a06a:	2307      	movs	r3, #7
 801a06c:	3507      	adds	r5, #7
 801a06e:	439d      	bics	r5, r3
 801a070:	0029      	movs	r1, r5
 801a072:	c90c      	ldmia	r1!, {r2, r3}
 801a074:	9200      	str	r2, [sp, #0]
 801a076:	9301      	str	r3, [sp, #4]
 801a078:	9104      	str	r1, [sp, #16]
 801a07a:	9a01      	ldr	r2, [sp, #4]
 801a07c:	2301      	movs	r3, #1
 801a07e:	2a00      	cmp	r2, #0
 801a080:	da09      	bge.n	801a096 <_vfiprintf_r+0x58a>
 801a082:	9d00      	ldr	r5, [sp, #0]
 801a084:	9e01      	ldr	r6, [sp, #4]
 801a086:	2200      	movs	r2, #0
 801a088:	4269      	negs	r1, r5
 801a08a:	41b2      	sbcs	r2, r6
 801a08c:	9100      	str	r1, [sp, #0]
 801a08e:	9201      	str	r2, [sp, #4]
 801a090:	212d      	movs	r1, #45	; 0x2d
 801a092:	aa14      	add	r2, sp, #80	; 0x50
 801a094:	70d1      	strb	r1, [r2, #3]
 801a096:	9901      	ldr	r1, [sp, #4]
 801a098:	9a00      	ldr	r2, [sp, #0]
 801a09a:	430a      	orrs	r2, r1
 801a09c:	9905      	ldr	r1, [sp, #20]
 801a09e:	3101      	adds	r1, #1
 801a0a0:	d100      	bne.n	801a0a4 <_vfiprintf_r+0x598>
 801a0a2:	e1fc      	b.n	801a49e <_vfiprintf_r+0x992>
 801a0a4:	2180      	movs	r1, #128	; 0x80
 801a0a6:	0020      	movs	r0, r4
 801a0a8:	4388      	bics	r0, r1
 801a0aa:	0006      	movs	r6, r0
 801a0ac:	2a00      	cmp	r2, #0
 801a0ae:	d000      	beq.n	801a0b2 <_vfiprintf_r+0x5a6>
 801a0b0:	e1f9      	b.n	801a4a6 <_vfiprintf_r+0x99a>
 801a0b2:	9a05      	ldr	r2, [sp, #20]
 801a0b4:	2a00      	cmp	r2, #0
 801a0b6:	d100      	bne.n	801a0ba <_vfiprintf_r+0x5ae>
 801a0b8:	e149      	b.n	801a34e <_vfiprintf_r+0x842>
 801a0ba:	2b01      	cmp	r3, #1
 801a0bc:	d000      	beq.n	801a0c0 <_vfiprintf_r+0x5b4>
 801a0be:	e1f5      	b.n	801a4ac <_vfiprintf_r+0x9a0>
 801a0c0:	e0ea      	b.n	801a298 <_vfiprintf_r+0x78c>
 801a0c2:	1d2b      	adds	r3, r5, #4
 801a0c4:	9304      	str	r3, [sp, #16]
 801a0c6:	06e3      	lsls	r3, r4, #27
 801a0c8:	d504      	bpl.n	801a0d4 <_vfiprintf_r+0x5c8>
 801a0ca:	682b      	ldr	r3, [r5, #0]
 801a0cc:	9300      	str	r3, [sp, #0]
 801a0ce:	17db      	asrs	r3, r3, #31
 801a0d0:	9301      	str	r3, [sp, #4]
 801a0d2:	e7d2      	b.n	801a07a <_vfiprintf_r+0x56e>
 801a0d4:	682b      	ldr	r3, [r5, #0]
 801a0d6:	0662      	lsls	r2, r4, #25
 801a0d8:	d501      	bpl.n	801a0de <_vfiprintf_r+0x5d2>
 801a0da:	b21b      	sxth	r3, r3
 801a0dc:	e7f6      	b.n	801a0cc <_vfiprintf_r+0x5c0>
 801a0de:	05a2      	lsls	r2, r4, #22
 801a0e0:	d5f4      	bpl.n	801a0cc <_vfiprintf_r+0x5c0>
 801a0e2:	b25b      	sxtb	r3, r3
 801a0e4:	e7f2      	b.n	801a0cc <_vfiprintf_r+0x5c0>
 801a0e6:	cd08      	ldmia	r5!, {r3}
 801a0e8:	06a2      	lsls	r2, r4, #26
 801a0ea:	d504      	bpl.n	801a0f6 <_vfiprintf_r+0x5ea>
 801a0ec:	9a08      	ldr	r2, [sp, #32]
 801a0ee:	601a      	str	r2, [r3, #0]
 801a0f0:	17d2      	asrs	r2, r2, #31
 801a0f2:	605a      	str	r2, [r3, #4]
 801a0f4:	e57c      	b.n	8019bf0 <_vfiprintf_r+0xe4>
 801a0f6:	06e2      	lsls	r2, r4, #27
 801a0f8:	d502      	bpl.n	801a100 <_vfiprintf_r+0x5f4>
 801a0fa:	9a08      	ldr	r2, [sp, #32]
 801a0fc:	601a      	str	r2, [r3, #0]
 801a0fe:	e577      	b.n	8019bf0 <_vfiprintf_r+0xe4>
 801a100:	0662      	lsls	r2, r4, #25
 801a102:	d502      	bpl.n	801a10a <_vfiprintf_r+0x5fe>
 801a104:	9a08      	ldr	r2, [sp, #32]
 801a106:	801a      	strh	r2, [r3, #0]
 801a108:	e572      	b.n	8019bf0 <_vfiprintf_r+0xe4>
 801a10a:	05a2      	lsls	r2, r4, #22
 801a10c:	d5f5      	bpl.n	801a0fa <_vfiprintf_r+0x5ee>
 801a10e:	9a08      	ldr	r2, [sp, #32]
 801a110:	701a      	strb	r2, [r3, #0]
 801a112:	e56d      	b.n	8019bf0 <_vfiprintf_r+0xe4>
 801a114:	2310      	movs	r3, #16
 801a116:	431c      	orrs	r4, r3
 801a118:	2320      	movs	r3, #32
 801a11a:	0021      	movs	r1, r4
 801a11c:	4019      	ands	r1, r3
 801a11e:	421c      	tst	r4, r3
 801a120:	d00d      	beq.n	801a13e <_vfiprintf_r+0x632>
 801a122:	3b19      	subs	r3, #25
 801a124:	3507      	adds	r5, #7
 801a126:	439d      	bics	r5, r3
 801a128:	0029      	movs	r1, r5
 801a12a:	c90c      	ldmia	r1!, {r2, r3}
 801a12c:	9200      	str	r2, [sp, #0]
 801a12e:	9301      	str	r3, [sp, #4]
 801a130:	9104      	str	r1, [sp, #16]
 801a132:	4b32      	ldr	r3, [pc, #200]	; (801a1fc <_vfiprintf_r+0x6f0>)
 801a134:	401c      	ands	r4, r3
 801a136:	2300      	movs	r3, #0
 801a138:	2100      	movs	r1, #0
 801a13a:	aa14      	add	r2, sp, #80	; 0x50
 801a13c:	e7aa      	b.n	801a094 <_vfiprintf_r+0x588>
 801a13e:	1d2b      	adds	r3, r5, #4
 801a140:	0022      	movs	r2, r4
 801a142:	9304      	str	r3, [sp, #16]
 801a144:	2310      	movs	r3, #16
 801a146:	401a      	ands	r2, r3
 801a148:	421c      	tst	r4, r3
 801a14a:	d003      	beq.n	801a154 <_vfiprintf_r+0x648>
 801a14c:	682b      	ldr	r3, [r5, #0]
 801a14e:	9300      	str	r3, [sp, #0]
 801a150:	9101      	str	r1, [sp, #4]
 801a152:	e7ee      	b.n	801a132 <_vfiprintf_r+0x626>
 801a154:	2340      	movs	r3, #64	; 0x40
 801a156:	0021      	movs	r1, r4
 801a158:	4019      	ands	r1, r3
 801a15a:	421c      	tst	r4, r3
 801a15c:	d004      	beq.n	801a168 <_vfiprintf_r+0x65c>
 801a15e:	682b      	ldr	r3, [r5, #0]
 801a160:	b29b      	uxth	r3, r3
 801a162:	9300      	str	r3, [sp, #0]
 801a164:	9201      	str	r2, [sp, #4]
 801a166:	e7e4      	b.n	801a132 <_vfiprintf_r+0x626>
 801a168:	2380      	movs	r3, #128	; 0x80
 801a16a:	0022      	movs	r2, r4
 801a16c:	009b      	lsls	r3, r3, #2
 801a16e:	401a      	ands	r2, r3
 801a170:	421c      	tst	r4, r3
 801a172:	d002      	beq.n	801a17a <_vfiprintf_r+0x66e>
 801a174:	682b      	ldr	r3, [r5, #0]
 801a176:	b2db      	uxtb	r3, r3
 801a178:	e7e9      	b.n	801a14e <_vfiprintf_r+0x642>
 801a17a:	682b      	ldr	r3, [r5, #0]
 801a17c:	e7f1      	b.n	801a162 <_vfiprintf_r+0x656>
 801a17e:	002b      	movs	r3, r5
 801a180:	cb04      	ldmia	r3!, {r2}
 801a182:	491f      	ldr	r1, [pc, #124]	; (801a200 <_vfiprintf_r+0x6f4>)
 801a184:	9304      	str	r3, [sp, #16]
 801a186:	2300      	movs	r3, #0
 801a188:	9200      	str	r2, [sp, #0]
 801a18a:	aa15      	add	r2, sp, #84	; 0x54
 801a18c:	8011      	strh	r1, [r2, #0]
 801a18e:	4a1d      	ldr	r2, [pc, #116]	; (801a204 <_vfiprintf_r+0x6f8>)
 801a190:	9301      	str	r3, [sp, #4]
 801a192:	3302      	adds	r3, #2
 801a194:	431c      	orrs	r4, r3
 801a196:	920c      	str	r2, [sp, #48]	; 0x30
 801a198:	e7ce      	b.n	801a138 <_vfiprintf_r+0x62c>
 801a19a:	002b      	movs	r3, r5
 801a19c:	2200      	movs	r2, #0
 801a19e:	cb20      	ldmia	r3!, {r5}
 801a1a0:	9304      	str	r3, [sp, #16]
 801a1a2:	ab14      	add	r3, sp, #80	; 0x50
 801a1a4:	70da      	strb	r2, [r3, #3]
 801a1a6:	9b05      	ldr	r3, [sp, #20]
 801a1a8:	3301      	adds	r3, #1
 801a1aa:	d00d      	beq.n	801a1c8 <_vfiprintf_r+0x6bc>
 801a1ac:	2100      	movs	r1, #0
 801a1ae:	0028      	movs	r0, r5
 801a1b0:	9a05      	ldr	r2, [sp, #20]
 801a1b2:	f7fe fea9 	bl	8018f08 <memchr>
 801a1b6:	900b      	str	r0, [sp, #44]	; 0x2c
 801a1b8:	2800      	cmp	r0, #0
 801a1ba:	d100      	bne.n	801a1be <_vfiprintf_r+0x6b2>
 801a1bc:	e662      	b.n	8019e84 <_vfiprintf_r+0x378>
 801a1be:	1b43      	subs	r3, r0, r5
 801a1c0:	9305      	str	r3, [sp, #20]
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	930b      	str	r3, [sp, #44]	; 0x2c
 801a1c6:	e65d      	b.n	8019e84 <_vfiprintf_r+0x378>
 801a1c8:	0028      	movs	r0, r5
 801a1ca:	f7e5 ffa5 	bl	8000118 <strlen>
 801a1ce:	9005      	str	r0, [sp, #20]
 801a1d0:	e7f7      	b.n	801a1c2 <_vfiprintf_r+0x6b6>
 801a1d2:	2310      	movs	r3, #16
 801a1d4:	431c      	orrs	r4, r3
 801a1d6:	2320      	movs	r3, #32
 801a1d8:	0021      	movs	r1, r4
 801a1da:	4019      	ands	r1, r3
 801a1dc:	421c      	tst	r4, r3
 801a1de:	d013      	beq.n	801a208 <_vfiprintf_r+0x6fc>
 801a1e0:	3b19      	subs	r3, #25
 801a1e2:	3507      	adds	r5, #7
 801a1e4:	439d      	bics	r5, r3
 801a1e6:	0029      	movs	r1, r5
 801a1e8:	c90c      	ldmia	r1!, {r2, r3}
 801a1ea:	9200      	str	r2, [sp, #0]
 801a1ec:	9301      	str	r3, [sp, #4]
 801a1ee:	9104      	str	r1, [sp, #16]
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	e7a1      	b.n	801a138 <_vfiprintf_r+0x62c>
 801a1f4:	0801e990 	.word	0x0801e990
 801a1f8:	0801e9a0 	.word	0x0801e9a0
 801a1fc:	fffffbff 	.word	0xfffffbff
 801a200:	00007830 	.word	0x00007830
 801a204:	0801e6b8 	.word	0x0801e6b8
 801a208:	1d2b      	adds	r3, r5, #4
 801a20a:	0022      	movs	r2, r4
 801a20c:	9304      	str	r3, [sp, #16]
 801a20e:	2310      	movs	r3, #16
 801a210:	401a      	ands	r2, r3
 801a212:	421c      	tst	r4, r3
 801a214:	d003      	beq.n	801a21e <_vfiprintf_r+0x712>
 801a216:	682b      	ldr	r3, [r5, #0]
 801a218:	9300      	str	r3, [sp, #0]
 801a21a:	9101      	str	r1, [sp, #4]
 801a21c:	e7e8      	b.n	801a1f0 <_vfiprintf_r+0x6e4>
 801a21e:	2340      	movs	r3, #64	; 0x40
 801a220:	0021      	movs	r1, r4
 801a222:	4019      	ands	r1, r3
 801a224:	421c      	tst	r4, r3
 801a226:	d004      	beq.n	801a232 <_vfiprintf_r+0x726>
 801a228:	682b      	ldr	r3, [r5, #0]
 801a22a:	b29b      	uxth	r3, r3
 801a22c:	9300      	str	r3, [sp, #0]
 801a22e:	9201      	str	r2, [sp, #4]
 801a230:	e7de      	b.n	801a1f0 <_vfiprintf_r+0x6e4>
 801a232:	2380      	movs	r3, #128	; 0x80
 801a234:	0022      	movs	r2, r4
 801a236:	009b      	lsls	r3, r3, #2
 801a238:	401a      	ands	r2, r3
 801a23a:	421c      	tst	r4, r3
 801a23c:	d002      	beq.n	801a244 <_vfiprintf_r+0x738>
 801a23e:	682b      	ldr	r3, [r5, #0]
 801a240:	b2db      	uxtb	r3, r3
 801a242:	e7e9      	b.n	801a218 <_vfiprintf_r+0x70c>
 801a244:	682b      	ldr	r3, [r5, #0]
 801a246:	e7f1      	b.n	801a22c <_vfiprintf_r+0x720>
 801a248:	4aad      	ldr	r2, [pc, #692]	; (801a500 <_vfiprintf_r+0x9f4>)
 801a24a:	e56f      	b.n	8019d2c <_vfiprintf_r+0x220>
 801a24c:	1d2a      	adds	r2, r5, #4
 801a24e:	0021      	movs	r1, r4
 801a250:	9204      	str	r2, [sp, #16]
 801a252:	2210      	movs	r2, #16
 801a254:	4011      	ands	r1, r2
 801a256:	4214      	tst	r4, r2
 801a258:	d003      	beq.n	801a262 <_vfiprintf_r+0x756>
 801a25a:	682a      	ldr	r2, [r5, #0]
 801a25c:	9200      	str	r2, [sp, #0]
 801a25e:	9001      	str	r0, [sp, #4]
 801a260:	e573      	b.n	8019d4a <_vfiprintf_r+0x23e>
 801a262:	2240      	movs	r2, #64	; 0x40
 801a264:	0020      	movs	r0, r4
 801a266:	4010      	ands	r0, r2
 801a268:	4214      	tst	r4, r2
 801a26a:	d004      	beq.n	801a276 <_vfiprintf_r+0x76a>
 801a26c:	682a      	ldr	r2, [r5, #0]
 801a26e:	b292      	uxth	r2, r2
 801a270:	9200      	str	r2, [sp, #0]
 801a272:	9101      	str	r1, [sp, #4]
 801a274:	e569      	b.n	8019d4a <_vfiprintf_r+0x23e>
 801a276:	2280      	movs	r2, #128	; 0x80
 801a278:	0021      	movs	r1, r4
 801a27a:	0092      	lsls	r2, r2, #2
 801a27c:	4011      	ands	r1, r2
 801a27e:	4214      	tst	r4, r2
 801a280:	d002      	beq.n	801a288 <_vfiprintf_r+0x77c>
 801a282:	682a      	ldr	r2, [r5, #0]
 801a284:	b2d2      	uxtb	r2, r2
 801a286:	e7e9      	b.n	801a25c <_vfiprintf_r+0x750>
 801a288:	682a      	ldr	r2, [r5, #0]
 801a28a:	e7f1      	b.n	801a270 <_vfiprintf_r+0x764>
 801a28c:	9b01      	ldr	r3, [sp, #4]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d109      	bne.n	801a2a6 <_vfiprintf_r+0x79a>
 801a292:	9b00      	ldr	r3, [sp, #0]
 801a294:	2b09      	cmp	r3, #9
 801a296:	d806      	bhi.n	801a2a6 <_vfiprintf_r+0x79a>
 801a298:	25b7      	movs	r5, #183	; 0xb7
 801a29a:	ab14      	add	r3, sp, #80	; 0x50
 801a29c:	18ed      	adds	r5, r5, r3
 801a29e:	9b00      	ldr	r3, [sp, #0]
 801a2a0:	3330      	adds	r3, #48	; 0x30
 801a2a2:	702b      	strb	r3, [r5, #0]
 801a2a4:	e125      	b.n	801a4f2 <_vfiprintf_r+0x9e6>
 801a2a6:	2380      	movs	r3, #128	; 0x80
 801a2a8:	0032      	movs	r2, r6
 801a2aa:	2400      	movs	r4, #0
 801a2ac:	00db      	lsls	r3, r3, #3
 801a2ae:	401a      	ands	r2, r3
 801a2b0:	ad42      	add	r5, sp, #264	; 0x108
 801a2b2:	920a      	str	r2, [sp, #40]	; 0x28
 801a2b4:	220a      	movs	r2, #10
 801a2b6:	9800      	ldr	r0, [sp, #0]
 801a2b8:	9901      	ldr	r1, [sp, #4]
 801a2ba:	2300      	movs	r3, #0
 801a2bc:	f7e6 f95a 	bl	8000574 <__aeabi_uldivmod>
 801a2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2c2:	3d01      	subs	r5, #1
 801a2c4:	3230      	adds	r2, #48	; 0x30
 801a2c6:	702a      	strb	r2, [r5, #0]
 801a2c8:	3401      	adds	r4, #1
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d01a      	beq.n	801a304 <_vfiprintf_r+0x7f8>
 801a2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2d0:	781b      	ldrb	r3, [r3, #0]
 801a2d2:	42a3      	cmp	r3, r4
 801a2d4:	d116      	bne.n	801a304 <_vfiprintf_r+0x7f8>
 801a2d6:	2cff      	cmp	r4, #255	; 0xff
 801a2d8:	d014      	beq.n	801a304 <_vfiprintf_r+0x7f8>
 801a2da:	9b01      	ldr	r3, [sp, #4]
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d102      	bne.n	801a2e6 <_vfiprintf_r+0x7da>
 801a2e0:	9b00      	ldr	r3, [sp, #0]
 801a2e2:	2b09      	cmp	r3, #9
 801a2e4:	d90e      	bls.n	801a304 <_vfiprintf_r+0x7f8>
 801a2e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a2e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a2ea:	1aed      	subs	r5, r5, r3
 801a2ec:	001a      	movs	r2, r3
 801a2ee:	0028      	movs	r0, r5
 801a2f0:	f7fb f90e 	bl	8015510 <strncpy>
 801a2f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2f6:	2400      	movs	r4, #0
 801a2f8:	785b      	ldrb	r3, [r3, #1]
 801a2fa:	1e5a      	subs	r2, r3, #1
 801a2fc:	4193      	sbcs	r3, r2
 801a2fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a300:	18d3      	adds	r3, r2, r3
 801a302:	930d      	str	r3, [sp, #52]	; 0x34
 801a304:	2300      	movs	r3, #0
 801a306:	9800      	ldr	r0, [sp, #0]
 801a308:	9901      	ldr	r1, [sp, #4]
 801a30a:	220a      	movs	r2, #10
 801a30c:	f7e6 f932 	bl	8000574 <__aeabi_uldivmod>
 801a310:	9b01      	ldr	r3, [sp, #4]
 801a312:	2b00      	cmp	r3, #0
 801a314:	d103      	bne.n	801a31e <_vfiprintf_r+0x812>
 801a316:	9b00      	ldr	r3, [sp, #0]
 801a318:	2b09      	cmp	r3, #9
 801a31a:	d800      	bhi.n	801a31e <_vfiprintf_r+0x812>
 801a31c:	e0e9      	b.n	801a4f2 <_vfiprintf_r+0x9e6>
 801a31e:	9000      	str	r0, [sp, #0]
 801a320:	9101      	str	r1, [sp, #4]
 801a322:	e7c7      	b.n	801a2b4 <_vfiprintf_r+0x7a8>
 801a324:	200f      	movs	r0, #15
 801a326:	9b00      	ldr	r3, [sp, #0]
 801a328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a32a:	4003      	ands	r3, r0
 801a32c:	5cd3      	ldrb	r3, [r2, r3]
 801a32e:	3d01      	subs	r5, #1
 801a330:	702b      	strb	r3, [r5, #0]
 801a332:	9b01      	ldr	r3, [sp, #4]
 801a334:	0719      	lsls	r1, r3, #28
 801a336:	9b00      	ldr	r3, [sp, #0]
 801a338:	091a      	lsrs	r2, r3, #4
 801a33a:	9b01      	ldr	r3, [sp, #4]
 801a33c:	4311      	orrs	r1, r2
 801a33e:	091b      	lsrs	r3, r3, #4
 801a340:	9301      	str	r3, [sp, #4]
 801a342:	000b      	movs	r3, r1
 801a344:	9a01      	ldr	r2, [sp, #4]
 801a346:	9100      	str	r1, [sp, #0]
 801a348:	4313      	orrs	r3, r2
 801a34a:	d1ec      	bne.n	801a326 <_vfiprintf_r+0x81a>
 801a34c:	e0d1      	b.n	801a4f2 <_vfiprintf_r+0x9e6>
 801a34e:	ad42      	add	r5, sp, #264	; 0x108
 801a350:	2b00      	cmp	r3, #0
 801a352:	d000      	beq.n	801a356 <_vfiprintf_r+0x84a>
 801a354:	e0cd      	b.n	801a4f2 <_vfiprintf_r+0x9e6>
 801a356:	07e3      	lsls	r3, r4, #31
 801a358:	d400      	bmi.n	801a35c <_vfiprintf_r+0x850>
 801a35a:	e0ca      	b.n	801a4f2 <_vfiprintf_r+0x9e6>
 801a35c:	25b7      	movs	r5, #183	; 0xb7
 801a35e:	ab14      	add	r3, sp, #80	; 0x50
 801a360:	18ed      	adds	r5, r5, r3
 801a362:	2330      	movs	r3, #48	; 0x30
 801a364:	e79d      	b.n	801a2a2 <_vfiprintf_r+0x796>
 801a366:	2b00      	cmp	r3, #0
 801a368:	d100      	bne.n	801a36c <_vfiprintf_r+0x860>
 801a36a:	e089      	b.n	801a480 <_vfiprintf_r+0x974>
 801a36c:	2100      	movs	r1, #0
 801a36e:	aa29      	add	r2, sp, #164	; 0xa4
 801a370:	7013      	strb	r3, [r2, #0]
 801a372:	ab14      	add	r3, sp, #80	; 0x50
 801a374:	70d9      	strb	r1, [r3, #3]
 801a376:	2301      	movs	r3, #1
 801a378:	9504      	str	r5, [sp, #16]
 801a37a:	9305      	str	r3, [sp, #20]
 801a37c:	0015      	movs	r5, r2
 801a37e:	910b      	str	r1, [sp, #44]	; 0x2c
 801a380:	e580      	b.n	8019e84 <_vfiprintf_r+0x378>
 801a382:	2010      	movs	r0, #16
 801a384:	1812      	adds	r2, r2, r0
 801a386:	6078      	str	r0, [r7, #4]
 801a388:	9218      	str	r2, [sp, #96]	; 0x60
 801a38a:	9317      	str	r3, [sp, #92]	; 0x5c
 801a38c:	2b07      	cmp	r3, #7
 801a38e:	dd07      	ble.n	801a3a0 <_vfiprintf_r+0x894>
 801a390:	9903      	ldr	r1, [sp, #12]
 801a392:	9806      	ldr	r0, [sp, #24]
 801a394:	aa16      	add	r2, sp, #88	; 0x58
 801a396:	f7ff fb85 	bl	8019aa4 <__sprint_r>
 801a39a:	2800      	cmp	r0, #0
 801a39c:	d14b      	bne.n	801a436 <_vfiprintf_r+0x92a>
 801a39e:	a919      	add	r1, sp, #100	; 0x64
 801a3a0:	0033      	movs	r3, r6
 801a3a2:	3b10      	subs	r3, #16
 801a3a4:	001e      	movs	r6, r3
 801a3a6:	000f      	movs	r7, r1
 801a3a8:	e58e      	b.n	8019ec8 <_vfiprintf_r+0x3bc>
 801a3aa:	2010      	movs	r0, #16
 801a3ac:	1812      	adds	r2, r2, r0
 801a3ae:	6078      	str	r0, [r7, #4]
 801a3b0:	9218      	str	r2, [sp, #96]	; 0x60
 801a3b2:	9317      	str	r3, [sp, #92]	; 0x5c
 801a3b4:	2b07      	cmp	r3, #7
 801a3b6:	dd07      	ble.n	801a3c8 <_vfiprintf_r+0x8bc>
 801a3b8:	9903      	ldr	r1, [sp, #12]
 801a3ba:	9806      	ldr	r0, [sp, #24]
 801a3bc:	aa16      	add	r2, sp, #88	; 0x58
 801a3be:	f7ff fb71 	bl	8019aa4 <__sprint_r>
 801a3c2:	2800      	cmp	r0, #0
 801a3c4:	d137      	bne.n	801a436 <_vfiprintf_r+0x92a>
 801a3c6:	a919      	add	r1, sp, #100	; 0x64
 801a3c8:	0033      	movs	r3, r6
 801a3ca:	3b10      	subs	r3, #16
 801a3cc:	001e      	movs	r6, r3
 801a3ce:	000f      	movs	r7, r1
 801a3d0:	e5d6      	b.n	8019f80 <_vfiprintf_r+0x474>
 801a3d2:	2010      	movs	r0, #16
 801a3d4:	1812      	adds	r2, r2, r0
 801a3d6:	6078      	str	r0, [r7, #4]
 801a3d8:	9218      	str	r2, [sp, #96]	; 0x60
 801a3da:	9317      	str	r3, [sp, #92]	; 0x5c
 801a3dc:	2b07      	cmp	r3, #7
 801a3de:	dd07      	ble.n	801a3f0 <_vfiprintf_r+0x8e4>
 801a3e0:	9903      	ldr	r1, [sp, #12]
 801a3e2:	9806      	ldr	r0, [sp, #24]
 801a3e4:	aa16      	add	r2, sp, #88	; 0x58
 801a3e6:	f7ff fb5d 	bl	8019aa4 <__sprint_r>
 801a3ea:	2800      	cmp	r0, #0
 801a3ec:	d123      	bne.n	801a436 <_vfiprintf_r+0x92a>
 801a3ee:	a919      	add	r1, sp, #100	; 0x64
 801a3f0:	0033      	movs	r3, r6
 801a3f2:	3b10      	subs	r3, #16
 801a3f4:	001e      	movs	r6, r3
 801a3f6:	000f      	movs	r7, r1
 801a3f8:	e5e2      	b.n	8019fc0 <_vfiprintf_r+0x4b4>
 801a3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3fe:	2510      	movs	r5, #16
 801a400:	1a9c      	subs	r4, r3, r2
 801a402:	2c00      	cmp	r4, #0
 801a404:	dc00      	bgt.n	801a408 <_vfiprintf_r+0x8fc>
 801a406:	e613      	b.n	801a030 <_vfiprintf_r+0x524>
 801a408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a40a:	483e      	ldr	r0, [pc, #248]	; (801a504 <_vfiprintf_r+0x9f8>)
 801a40c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a40e:	9305      	str	r3, [sp, #20]
 801a410:	1c5a      	adds	r2, r3, #1
 801a412:	6038      	str	r0, [r7, #0]
 801a414:	2c10      	cmp	r4, #16
 801a416:	dc22      	bgt.n	801a45e <_vfiprintf_r+0x952>
 801a418:	607c      	str	r4, [r7, #4]
 801a41a:	190c      	adds	r4, r1, r4
 801a41c:	9418      	str	r4, [sp, #96]	; 0x60
 801a41e:	9217      	str	r2, [sp, #92]	; 0x5c
 801a420:	2a07      	cmp	r2, #7
 801a422:	dc00      	bgt.n	801a426 <_vfiprintf_r+0x91a>
 801a424:	e604      	b.n	801a030 <_vfiprintf_r+0x524>
 801a426:	9903      	ldr	r1, [sp, #12]
 801a428:	9806      	ldr	r0, [sp, #24]
 801a42a:	aa16      	add	r2, sp, #88	; 0x58
 801a42c:	f7ff fb3a 	bl	8019aa4 <__sprint_r>
 801a430:	2800      	cmp	r0, #0
 801a432:	d100      	bne.n	801a436 <_vfiprintf_r+0x92a>
 801a434:	e5fc      	b.n	801a030 <_vfiprintf_r+0x524>
 801a436:	9b03      	ldr	r3, [sp, #12]
 801a438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a43a:	07db      	lsls	r3, r3, #31
 801a43c:	d407      	bmi.n	801a44e <_vfiprintf_r+0x942>
 801a43e:	9b03      	ldr	r3, [sp, #12]
 801a440:	899b      	ldrh	r3, [r3, #12]
 801a442:	059b      	lsls	r3, r3, #22
 801a444:	d403      	bmi.n	801a44e <_vfiprintf_r+0x942>
 801a446:	9b03      	ldr	r3, [sp, #12]
 801a448:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801a44a:	f7fe fd4a 	bl	8018ee2 <__retarget_lock_release_recursive>
 801a44e:	9b03      	ldr	r3, [sp, #12]
 801a450:	899b      	ldrh	r3, [r3, #12]
 801a452:	065b      	lsls	r3, r3, #25
 801a454:	d401      	bmi.n	801a45a <_vfiprintf_r+0x94e>
 801a456:	f7ff fb98 	bl	8019b8a <_vfiprintf_r+0x7e>
 801a45a:	f7ff fb93 	bl	8019b84 <_vfiprintf_r+0x78>
 801a45e:	3110      	adds	r1, #16
 801a460:	607d      	str	r5, [r7, #4]
 801a462:	9118      	str	r1, [sp, #96]	; 0x60
 801a464:	9217      	str	r2, [sp, #92]	; 0x5c
 801a466:	3708      	adds	r7, #8
 801a468:	2a07      	cmp	r2, #7
 801a46a:	dd07      	ble.n	801a47c <_vfiprintf_r+0x970>
 801a46c:	9903      	ldr	r1, [sp, #12]
 801a46e:	9806      	ldr	r0, [sp, #24]
 801a470:	aa16      	add	r2, sp, #88	; 0x58
 801a472:	f7ff fb17 	bl	8019aa4 <__sprint_r>
 801a476:	2800      	cmp	r0, #0
 801a478:	d1dd      	bne.n	801a436 <_vfiprintf_r+0x92a>
 801a47a:	af19      	add	r7, sp, #100	; 0x64
 801a47c:	3c10      	subs	r4, #16
 801a47e:	e7c3      	b.n	801a408 <_vfiprintf_r+0x8fc>
 801a480:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a482:	9300      	str	r3, [sp, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d102      	bne.n	801a48e <_vfiprintf_r+0x982>
 801a488:	2300      	movs	r3, #0
 801a48a:	9317      	str	r3, [sp, #92]	; 0x5c
 801a48c:	e7d3      	b.n	801a436 <_vfiprintf_r+0x92a>
 801a48e:	9903      	ldr	r1, [sp, #12]
 801a490:	9806      	ldr	r0, [sp, #24]
 801a492:	aa16      	add	r2, sp, #88	; 0x58
 801a494:	f7ff fb06 	bl	8019aa4 <__sprint_r>
 801a498:	2800      	cmp	r0, #0
 801a49a:	d0f5      	beq.n	801a488 <_vfiprintf_r+0x97c>
 801a49c:	e7cb      	b.n	801a436 <_vfiprintf_r+0x92a>
 801a49e:	0026      	movs	r6, r4
 801a4a0:	2a00      	cmp	r2, #0
 801a4a2:	d100      	bne.n	801a4a6 <_vfiprintf_r+0x99a>
 801a4a4:	e609      	b.n	801a0ba <_vfiprintf_r+0x5ae>
 801a4a6:	2b01      	cmp	r3, #1
 801a4a8:	d100      	bne.n	801a4ac <_vfiprintf_r+0x9a0>
 801a4aa:	e6ef      	b.n	801a28c <_vfiprintf_r+0x780>
 801a4ac:	ad42      	add	r5, sp, #264	; 0x108
 801a4ae:	2b02      	cmp	r3, #2
 801a4b0:	d100      	bne.n	801a4b4 <_vfiprintf_r+0x9a8>
 801a4b2:	e737      	b.n	801a324 <_vfiprintf_r+0x818>
 801a4b4:	2307      	movs	r3, #7
 801a4b6:	469c      	mov	ip, r3
 801a4b8:	4663      	mov	r3, ip
 801a4ba:	9900      	ldr	r1, [sp, #0]
 801a4bc:	002a      	movs	r2, r5
 801a4be:	400b      	ands	r3, r1
 801a4c0:	9901      	ldr	r1, [sp, #4]
 801a4c2:	3d01      	subs	r5, #1
 801a4c4:	074c      	lsls	r4, r1, #29
 801a4c6:	9900      	ldr	r1, [sp, #0]
 801a4c8:	3330      	adds	r3, #48	; 0x30
 801a4ca:	08c8      	lsrs	r0, r1, #3
 801a4cc:	9901      	ldr	r1, [sp, #4]
 801a4ce:	4304      	orrs	r4, r0
 801a4d0:	08c9      	lsrs	r1, r1, #3
 801a4d2:	9101      	str	r1, [sp, #4]
 801a4d4:	0021      	movs	r1, r4
 801a4d6:	9801      	ldr	r0, [sp, #4]
 801a4d8:	702b      	strb	r3, [r5, #0]
 801a4da:	9400      	str	r4, [sp, #0]
 801a4dc:	4301      	orrs	r1, r0
 801a4de:	d1eb      	bne.n	801a4b8 <_vfiprintf_r+0x9ac>
 801a4e0:	0031      	movs	r1, r6
 801a4e2:	07c9      	lsls	r1, r1, #31
 801a4e4:	d505      	bpl.n	801a4f2 <_vfiprintf_r+0x9e6>
 801a4e6:	2b30      	cmp	r3, #48	; 0x30
 801a4e8:	d003      	beq.n	801a4f2 <_vfiprintf_r+0x9e6>
 801a4ea:	2330      	movs	r3, #48	; 0x30
 801a4ec:	3d01      	subs	r5, #1
 801a4ee:	702b      	strb	r3, [r5, #0]
 801a4f0:	1e95      	subs	r5, r2, #2
 801a4f2:	9b05      	ldr	r3, [sp, #20]
 801a4f4:	0034      	movs	r4, r6
 801a4f6:	930b      	str	r3, [sp, #44]	; 0x2c
 801a4f8:	ab42      	add	r3, sp, #264	; 0x108
 801a4fa:	1b5b      	subs	r3, r3, r5
 801a4fc:	9305      	str	r3, [sp, #20]
 801a4fe:	e4c1      	b.n	8019e84 <_vfiprintf_r+0x378>
 801a500:	0801e6c9 	.word	0x0801e6c9
 801a504:	0801e990 	.word	0x0801e990

0801a508 <__sbprintf>:
 801a508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a50a:	0015      	movs	r5, r2
 801a50c:	2202      	movs	r2, #2
 801a50e:	4c1e      	ldr	r4, [pc, #120]	; (801a588 <__sbprintf+0x80>)
 801a510:	001f      	movs	r7, r3
 801a512:	898b      	ldrh	r3, [r1, #12]
 801a514:	44a5      	add	sp, r4
 801a516:	4393      	bics	r3, r2
 801a518:	466a      	mov	r2, sp
 801a51a:	8193      	strh	r3, [r2, #12]
 801a51c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801a51e:	0006      	movs	r6, r0
 801a520:	9319      	str	r3, [sp, #100]	; 0x64
 801a522:	89cb      	ldrh	r3, [r1, #14]
 801a524:	a816      	add	r0, sp, #88	; 0x58
 801a526:	81d3      	strh	r3, [r2, #14]
 801a528:	69cb      	ldr	r3, [r1, #28]
 801a52a:	000c      	movs	r4, r1
 801a52c:	9307      	str	r3, [sp, #28]
 801a52e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801a530:	9309      	str	r3, [sp, #36]	; 0x24
 801a532:	ab1a      	add	r3, sp, #104	; 0x68
 801a534:	9300      	str	r3, [sp, #0]
 801a536:	9304      	str	r3, [sp, #16]
 801a538:	2380      	movs	r3, #128	; 0x80
 801a53a:	00db      	lsls	r3, r3, #3
 801a53c:	9302      	str	r3, [sp, #8]
 801a53e:	9305      	str	r3, [sp, #20]
 801a540:	2300      	movs	r3, #0
 801a542:	9306      	str	r3, [sp, #24]
 801a544:	f7fe fcca 	bl	8018edc <__retarget_lock_init_recursive>
 801a548:	002a      	movs	r2, r5
 801a54a:	003b      	movs	r3, r7
 801a54c:	4669      	mov	r1, sp
 801a54e:	0030      	movs	r0, r6
 801a550:	f7ff fadc 	bl	8019b0c <_vfiprintf_r>
 801a554:	1e05      	subs	r5, r0, #0
 801a556:	db07      	blt.n	801a568 <__sbprintf+0x60>
 801a558:	4669      	mov	r1, sp
 801a55a:	0030      	movs	r0, r6
 801a55c:	f000 f91c 	bl	801a798 <_fflush_r>
 801a560:	2800      	cmp	r0, #0
 801a562:	d001      	beq.n	801a568 <__sbprintf+0x60>
 801a564:	2501      	movs	r5, #1
 801a566:	426d      	negs	r5, r5
 801a568:	466b      	mov	r3, sp
 801a56a:	899a      	ldrh	r2, [r3, #12]
 801a56c:	2340      	movs	r3, #64	; 0x40
 801a56e:	421a      	tst	r2, r3
 801a570:	d002      	beq.n	801a578 <__sbprintf+0x70>
 801a572:	89a2      	ldrh	r2, [r4, #12]
 801a574:	4313      	orrs	r3, r2
 801a576:	81a3      	strh	r3, [r4, #12]
 801a578:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a57a:	f7fe fcb0 	bl	8018ede <__retarget_lock_close_recursive>
 801a57e:	0028      	movs	r0, r5
 801a580:	4b02      	ldr	r3, [pc, #8]	; (801a58c <__sbprintf+0x84>)
 801a582:	449d      	add	sp, r3
 801a584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a586:	46c0      	nop			; (mov r8, r8)
 801a588:	fffffb94 	.word	0xfffffb94
 801a58c:	0000046c 	.word	0x0000046c

0801a590 <__swsetup_r>:
 801a590:	4b30      	ldr	r3, [pc, #192]	; (801a654 <__swsetup_r+0xc4>)
 801a592:	b570      	push	{r4, r5, r6, lr}
 801a594:	0005      	movs	r5, r0
 801a596:	6818      	ldr	r0, [r3, #0]
 801a598:	000c      	movs	r4, r1
 801a59a:	2800      	cmp	r0, #0
 801a59c:	d004      	beq.n	801a5a8 <__swsetup_r+0x18>
 801a59e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d101      	bne.n	801a5a8 <__swsetup_r+0x18>
 801a5a4:	f000 f96e 	bl	801a884 <__sinit>
 801a5a8:	230c      	movs	r3, #12
 801a5aa:	5ee2      	ldrsh	r2, [r4, r3]
 801a5ac:	b293      	uxth	r3, r2
 801a5ae:	0711      	lsls	r1, r2, #28
 801a5b0:	d423      	bmi.n	801a5fa <__swsetup_r+0x6a>
 801a5b2:	06d9      	lsls	r1, r3, #27
 801a5b4:	d407      	bmi.n	801a5c6 <__swsetup_r+0x36>
 801a5b6:	2309      	movs	r3, #9
 801a5b8:	2001      	movs	r0, #1
 801a5ba:	602b      	str	r3, [r5, #0]
 801a5bc:	3337      	adds	r3, #55	; 0x37
 801a5be:	4313      	orrs	r3, r2
 801a5c0:	81a3      	strh	r3, [r4, #12]
 801a5c2:	4240      	negs	r0, r0
 801a5c4:	bd70      	pop	{r4, r5, r6, pc}
 801a5c6:	075b      	lsls	r3, r3, #29
 801a5c8:	d513      	bpl.n	801a5f2 <__swsetup_r+0x62>
 801a5ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a5cc:	2900      	cmp	r1, #0
 801a5ce:	d008      	beq.n	801a5e2 <__swsetup_r+0x52>
 801a5d0:	0023      	movs	r3, r4
 801a5d2:	3340      	adds	r3, #64	; 0x40
 801a5d4:	4299      	cmp	r1, r3
 801a5d6:	d002      	beq.n	801a5de <__swsetup_r+0x4e>
 801a5d8:	0028      	movs	r0, r5
 801a5da:	f7fe f84f 	bl	801867c <_free_r>
 801a5de:	2300      	movs	r3, #0
 801a5e0:	6323      	str	r3, [r4, #48]	; 0x30
 801a5e2:	2224      	movs	r2, #36	; 0x24
 801a5e4:	89a3      	ldrh	r3, [r4, #12]
 801a5e6:	4393      	bics	r3, r2
 801a5e8:	81a3      	strh	r3, [r4, #12]
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	6063      	str	r3, [r4, #4]
 801a5ee:	6923      	ldr	r3, [r4, #16]
 801a5f0:	6023      	str	r3, [r4, #0]
 801a5f2:	2308      	movs	r3, #8
 801a5f4:	89a2      	ldrh	r2, [r4, #12]
 801a5f6:	4313      	orrs	r3, r2
 801a5f8:	81a3      	strh	r3, [r4, #12]
 801a5fa:	6923      	ldr	r3, [r4, #16]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d10b      	bne.n	801a618 <__swsetup_r+0x88>
 801a600:	21a0      	movs	r1, #160	; 0xa0
 801a602:	2280      	movs	r2, #128	; 0x80
 801a604:	89a3      	ldrh	r3, [r4, #12]
 801a606:	0089      	lsls	r1, r1, #2
 801a608:	0092      	lsls	r2, r2, #2
 801a60a:	400b      	ands	r3, r1
 801a60c:	4293      	cmp	r3, r2
 801a60e:	d003      	beq.n	801a618 <__swsetup_r+0x88>
 801a610:	0021      	movs	r1, r4
 801a612:	0028      	movs	r0, r5
 801a614:	f000 fb80 	bl	801ad18 <__smakebuf_r>
 801a618:	220c      	movs	r2, #12
 801a61a:	5ea3      	ldrsh	r3, [r4, r2]
 801a61c:	2001      	movs	r0, #1
 801a61e:	001a      	movs	r2, r3
 801a620:	b299      	uxth	r1, r3
 801a622:	4002      	ands	r2, r0
 801a624:	4203      	tst	r3, r0
 801a626:	d00f      	beq.n	801a648 <__swsetup_r+0xb8>
 801a628:	2200      	movs	r2, #0
 801a62a:	60a2      	str	r2, [r4, #8]
 801a62c:	6962      	ldr	r2, [r4, #20]
 801a62e:	4252      	negs	r2, r2
 801a630:	61a2      	str	r2, [r4, #24]
 801a632:	2000      	movs	r0, #0
 801a634:	6922      	ldr	r2, [r4, #16]
 801a636:	4282      	cmp	r2, r0
 801a638:	d1c4      	bne.n	801a5c4 <__swsetup_r+0x34>
 801a63a:	060a      	lsls	r2, r1, #24
 801a63c:	d5c2      	bpl.n	801a5c4 <__swsetup_r+0x34>
 801a63e:	2240      	movs	r2, #64	; 0x40
 801a640:	4313      	orrs	r3, r2
 801a642:	81a3      	strh	r3, [r4, #12]
 801a644:	3801      	subs	r0, #1
 801a646:	e7bd      	b.n	801a5c4 <__swsetup_r+0x34>
 801a648:	0788      	lsls	r0, r1, #30
 801a64a:	d400      	bmi.n	801a64e <__swsetup_r+0xbe>
 801a64c:	6962      	ldr	r2, [r4, #20]
 801a64e:	60a2      	str	r2, [r4, #8]
 801a650:	e7ef      	b.n	801a632 <__swsetup_r+0xa2>
 801a652:	46c0      	nop			; (mov r8, r8)
 801a654:	20000138 	.word	0x20000138

0801a658 <abort>:
 801a658:	2006      	movs	r0, #6
 801a65a:	b510      	push	{r4, lr}
 801a65c:	f000 fbcc 	bl	801adf8 <raise>
 801a660:	2001      	movs	r0, #1
 801a662:	f000 fdc1 	bl	801b1e8 <_exit>
	...

0801a668 <__sflush_r>:
 801a668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a66a:	230c      	movs	r3, #12
 801a66c:	5eca      	ldrsh	r2, [r1, r3]
 801a66e:	000c      	movs	r4, r1
 801a670:	0005      	movs	r5, r0
 801a672:	b291      	uxth	r1, r2
 801a674:	0713      	lsls	r3, r2, #28
 801a676:	d467      	bmi.n	801a748 <__sflush_r+0xe0>
 801a678:	2380      	movs	r3, #128	; 0x80
 801a67a:	011b      	lsls	r3, r3, #4
 801a67c:	4313      	orrs	r3, r2
 801a67e:	6862      	ldr	r2, [r4, #4]
 801a680:	81a3      	strh	r3, [r4, #12]
 801a682:	2a00      	cmp	r2, #0
 801a684:	dc04      	bgt.n	801a690 <__sflush_r+0x28>
 801a686:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a688:	2a00      	cmp	r2, #0
 801a68a:	dc01      	bgt.n	801a690 <__sflush_r+0x28>
 801a68c:	2000      	movs	r0, #0
 801a68e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a690:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801a692:	2f00      	cmp	r7, #0
 801a694:	d0fa      	beq.n	801a68c <__sflush_r+0x24>
 801a696:	2200      	movs	r2, #0
 801a698:	2180      	movs	r1, #128	; 0x80
 801a69a:	682e      	ldr	r6, [r5, #0]
 801a69c:	602a      	str	r2, [r5, #0]
 801a69e:	001a      	movs	r2, r3
 801a6a0:	0149      	lsls	r1, r1, #5
 801a6a2:	400a      	ands	r2, r1
 801a6a4:	420b      	tst	r3, r1
 801a6a6:	d038      	beq.n	801a71a <__sflush_r+0xb2>
 801a6a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801a6aa:	89a3      	ldrh	r3, [r4, #12]
 801a6ac:	075b      	lsls	r3, r3, #29
 801a6ae:	d506      	bpl.n	801a6be <__sflush_r+0x56>
 801a6b0:	6863      	ldr	r3, [r4, #4]
 801a6b2:	1ac0      	subs	r0, r0, r3
 801a6b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d001      	beq.n	801a6be <__sflush_r+0x56>
 801a6ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a6bc:	1ac0      	subs	r0, r0, r3
 801a6be:	0002      	movs	r2, r0
 801a6c0:	69e1      	ldr	r1, [r4, #28]
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	0028      	movs	r0, r5
 801a6c6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801a6c8:	47b8      	blx	r7
 801a6ca:	89a1      	ldrh	r1, [r4, #12]
 801a6cc:	1c43      	adds	r3, r0, #1
 801a6ce:	d106      	bne.n	801a6de <__sflush_r+0x76>
 801a6d0:	682b      	ldr	r3, [r5, #0]
 801a6d2:	2b1d      	cmp	r3, #29
 801a6d4:	d835      	bhi.n	801a742 <__sflush_r+0xda>
 801a6d6:	4a2e      	ldr	r2, [pc, #184]	; (801a790 <__sflush_r+0x128>)
 801a6d8:	40da      	lsrs	r2, r3
 801a6da:	07d3      	lsls	r3, r2, #31
 801a6dc:	d531      	bpl.n	801a742 <__sflush_r+0xda>
 801a6de:	2200      	movs	r2, #0
 801a6e0:	4b2c      	ldr	r3, [pc, #176]	; (801a794 <__sflush_r+0x12c>)
 801a6e2:	6062      	str	r2, [r4, #4]
 801a6e4:	400b      	ands	r3, r1
 801a6e6:	6922      	ldr	r2, [r4, #16]
 801a6e8:	b21b      	sxth	r3, r3
 801a6ea:	81a3      	strh	r3, [r4, #12]
 801a6ec:	6022      	str	r2, [r4, #0]
 801a6ee:	04db      	lsls	r3, r3, #19
 801a6f0:	d505      	bpl.n	801a6fe <__sflush_r+0x96>
 801a6f2:	1c43      	adds	r3, r0, #1
 801a6f4:	d102      	bne.n	801a6fc <__sflush_r+0x94>
 801a6f6:	682b      	ldr	r3, [r5, #0]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d100      	bne.n	801a6fe <__sflush_r+0x96>
 801a6fc:	6520      	str	r0, [r4, #80]	; 0x50
 801a6fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a700:	602e      	str	r6, [r5, #0]
 801a702:	2900      	cmp	r1, #0
 801a704:	d0c2      	beq.n	801a68c <__sflush_r+0x24>
 801a706:	0023      	movs	r3, r4
 801a708:	3340      	adds	r3, #64	; 0x40
 801a70a:	4299      	cmp	r1, r3
 801a70c:	d002      	beq.n	801a714 <__sflush_r+0xac>
 801a70e:	0028      	movs	r0, r5
 801a710:	f7fd ffb4 	bl	801867c <_free_r>
 801a714:	2000      	movs	r0, #0
 801a716:	6320      	str	r0, [r4, #48]	; 0x30
 801a718:	e7b9      	b.n	801a68e <__sflush_r+0x26>
 801a71a:	2301      	movs	r3, #1
 801a71c:	0028      	movs	r0, r5
 801a71e:	69e1      	ldr	r1, [r4, #28]
 801a720:	47b8      	blx	r7
 801a722:	1c43      	adds	r3, r0, #1
 801a724:	d1c1      	bne.n	801a6aa <__sflush_r+0x42>
 801a726:	682b      	ldr	r3, [r5, #0]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d0be      	beq.n	801a6aa <__sflush_r+0x42>
 801a72c:	2b1d      	cmp	r3, #29
 801a72e:	d001      	beq.n	801a734 <__sflush_r+0xcc>
 801a730:	2b16      	cmp	r3, #22
 801a732:	d101      	bne.n	801a738 <__sflush_r+0xd0>
 801a734:	602e      	str	r6, [r5, #0]
 801a736:	e7a9      	b.n	801a68c <__sflush_r+0x24>
 801a738:	2340      	movs	r3, #64	; 0x40
 801a73a:	89a2      	ldrh	r2, [r4, #12]
 801a73c:	4313      	orrs	r3, r2
 801a73e:	81a3      	strh	r3, [r4, #12]
 801a740:	e7a5      	b.n	801a68e <__sflush_r+0x26>
 801a742:	2340      	movs	r3, #64	; 0x40
 801a744:	430b      	orrs	r3, r1
 801a746:	e7fa      	b.n	801a73e <__sflush_r+0xd6>
 801a748:	6927      	ldr	r7, [r4, #16]
 801a74a:	2f00      	cmp	r7, #0
 801a74c:	d09e      	beq.n	801a68c <__sflush_r+0x24>
 801a74e:	6823      	ldr	r3, [r4, #0]
 801a750:	6027      	str	r7, [r4, #0]
 801a752:	1bdb      	subs	r3, r3, r7
 801a754:	9301      	str	r3, [sp, #4]
 801a756:	2300      	movs	r3, #0
 801a758:	078a      	lsls	r2, r1, #30
 801a75a:	d100      	bne.n	801a75e <__sflush_r+0xf6>
 801a75c:	6963      	ldr	r3, [r4, #20]
 801a75e:	60a3      	str	r3, [r4, #8]
 801a760:	9b01      	ldr	r3, [sp, #4]
 801a762:	2b00      	cmp	r3, #0
 801a764:	dc00      	bgt.n	801a768 <__sflush_r+0x100>
 801a766:	e791      	b.n	801a68c <__sflush_r+0x24>
 801a768:	003a      	movs	r2, r7
 801a76a:	0028      	movs	r0, r5
 801a76c:	9b01      	ldr	r3, [sp, #4]
 801a76e:	69e1      	ldr	r1, [r4, #28]
 801a770:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a772:	47b0      	blx	r6
 801a774:	2800      	cmp	r0, #0
 801a776:	dc06      	bgt.n	801a786 <__sflush_r+0x11e>
 801a778:	2340      	movs	r3, #64	; 0x40
 801a77a:	2001      	movs	r0, #1
 801a77c:	89a2      	ldrh	r2, [r4, #12]
 801a77e:	4240      	negs	r0, r0
 801a780:	4313      	orrs	r3, r2
 801a782:	81a3      	strh	r3, [r4, #12]
 801a784:	e783      	b.n	801a68e <__sflush_r+0x26>
 801a786:	9b01      	ldr	r3, [sp, #4]
 801a788:	183f      	adds	r7, r7, r0
 801a78a:	1a1b      	subs	r3, r3, r0
 801a78c:	9301      	str	r3, [sp, #4]
 801a78e:	e7e7      	b.n	801a760 <__sflush_r+0xf8>
 801a790:	20400001 	.word	0x20400001
 801a794:	fffff7ff 	.word	0xfffff7ff

0801a798 <_fflush_r>:
 801a798:	b570      	push	{r4, r5, r6, lr}
 801a79a:	0005      	movs	r5, r0
 801a79c:	000c      	movs	r4, r1
 801a79e:	2800      	cmp	r0, #0
 801a7a0:	d004      	beq.n	801a7ac <_fflush_r+0x14>
 801a7a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d101      	bne.n	801a7ac <_fflush_r+0x14>
 801a7a8:	f000 f86c 	bl	801a884 <__sinit>
 801a7ac:	220c      	movs	r2, #12
 801a7ae:	5ea3      	ldrsh	r3, [r4, r2]
 801a7b0:	1e1e      	subs	r6, r3, #0
 801a7b2:	d015      	beq.n	801a7e0 <_fflush_r+0x48>
 801a7b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a7b6:	07d2      	lsls	r2, r2, #31
 801a7b8:	d404      	bmi.n	801a7c4 <_fflush_r+0x2c>
 801a7ba:	059b      	lsls	r3, r3, #22
 801a7bc:	d402      	bmi.n	801a7c4 <_fflush_r+0x2c>
 801a7be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a7c0:	f7fe fb8e 	bl	8018ee0 <__retarget_lock_acquire_recursive>
 801a7c4:	0021      	movs	r1, r4
 801a7c6:	0028      	movs	r0, r5
 801a7c8:	f7ff ff4e 	bl	801a668 <__sflush_r>
 801a7cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a7ce:	0006      	movs	r6, r0
 801a7d0:	07db      	lsls	r3, r3, #31
 801a7d2:	d405      	bmi.n	801a7e0 <_fflush_r+0x48>
 801a7d4:	89a3      	ldrh	r3, [r4, #12]
 801a7d6:	059b      	lsls	r3, r3, #22
 801a7d8:	d402      	bmi.n	801a7e0 <_fflush_r+0x48>
 801a7da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a7dc:	f7fe fb81 	bl	8018ee2 <__retarget_lock_release_recursive>
 801a7e0:	0030      	movs	r0, r6
 801a7e2:	bd70      	pop	{r4, r5, r6, pc}

0801a7e4 <std>:
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	b510      	push	{r4, lr}
 801a7e8:	0004      	movs	r4, r0
 801a7ea:	6003      	str	r3, [r0, #0]
 801a7ec:	6043      	str	r3, [r0, #4]
 801a7ee:	6083      	str	r3, [r0, #8]
 801a7f0:	8181      	strh	r1, [r0, #12]
 801a7f2:	6643      	str	r3, [r0, #100]	; 0x64
 801a7f4:	0019      	movs	r1, r3
 801a7f6:	81c2      	strh	r2, [r0, #14]
 801a7f8:	6103      	str	r3, [r0, #16]
 801a7fa:	2208      	movs	r2, #8
 801a7fc:	6143      	str	r3, [r0, #20]
 801a7fe:	6183      	str	r3, [r0, #24]
 801a800:	305c      	adds	r0, #92	; 0x5c
 801a802:	f7fa fc08 	bl	8015016 <memset>
 801a806:	0020      	movs	r0, r4
 801a808:	4b06      	ldr	r3, [pc, #24]	; (801a824 <std+0x40>)
 801a80a:	61e4      	str	r4, [r4, #28]
 801a80c:	6223      	str	r3, [r4, #32]
 801a80e:	4b06      	ldr	r3, [pc, #24]	; (801a828 <std+0x44>)
 801a810:	3058      	adds	r0, #88	; 0x58
 801a812:	6263      	str	r3, [r4, #36]	; 0x24
 801a814:	4b05      	ldr	r3, [pc, #20]	; (801a82c <std+0x48>)
 801a816:	62a3      	str	r3, [r4, #40]	; 0x28
 801a818:	4b05      	ldr	r3, [pc, #20]	; (801a830 <std+0x4c>)
 801a81a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a81c:	f7fe fb5e 	bl	8018edc <__retarget_lock_init_recursive>
 801a820:	bd10      	pop	{r4, pc}
 801a822:	46c0      	nop			; (mov r8, r8)
 801a824:	0801ae39 	.word	0x0801ae39
 801a828:	0801ae61 	.word	0x0801ae61
 801a82c:	0801ae99 	.word	0x0801ae99
 801a830:	0801aec5 	.word	0x0801aec5

0801a834 <_cleanup_r>:
 801a834:	b510      	push	{r4, lr}
 801a836:	4902      	ldr	r1, [pc, #8]	; (801a840 <_cleanup_r+0xc>)
 801a838:	f000 fa1c 	bl	801ac74 <_fwalk_reent>
 801a83c:	bd10      	pop	{r4, pc}
 801a83e:	46c0      	nop			; (mov r8, r8)
 801a840:	0801aff1 	.word	0x0801aff1

0801a844 <__sfp_lock_acquire>:
 801a844:	b510      	push	{r4, lr}
 801a846:	4802      	ldr	r0, [pc, #8]	; (801a850 <__sfp_lock_acquire+0xc>)
 801a848:	f7fe fb4a 	bl	8018ee0 <__retarget_lock_acquire_recursive>
 801a84c:	bd10      	pop	{r4, pc}
 801a84e:	46c0      	nop			; (mov r8, r8)
 801a850:	20007008 	.word	0x20007008

0801a854 <__sfp_lock_release>:
 801a854:	b510      	push	{r4, lr}
 801a856:	4802      	ldr	r0, [pc, #8]	; (801a860 <__sfp_lock_release+0xc>)
 801a858:	f7fe fb43 	bl	8018ee2 <__retarget_lock_release_recursive>
 801a85c:	bd10      	pop	{r4, pc}
 801a85e:	46c0      	nop			; (mov r8, r8)
 801a860:	20007008 	.word	0x20007008

0801a864 <__sinit_lock_acquire>:
 801a864:	b510      	push	{r4, lr}
 801a866:	4802      	ldr	r0, [pc, #8]	; (801a870 <__sinit_lock_acquire+0xc>)
 801a868:	f7fe fb3a 	bl	8018ee0 <__retarget_lock_acquire_recursive>
 801a86c:	bd10      	pop	{r4, pc}
 801a86e:	46c0      	nop			; (mov r8, r8)
 801a870:	20007003 	.word	0x20007003

0801a874 <__sinit_lock_release>:
 801a874:	b510      	push	{r4, lr}
 801a876:	4802      	ldr	r0, [pc, #8]	; (801a880 <__sinit_lock_release+0xc>)
 801a878:	f7fe fb33 	bl	8018ee2 <__retarget_lock_release_recursive>
 801a87c:	bd10      	pop	{r4, pc}
 801a87e:	46c0      	nop			; (mov r8, r8)
 801a880:	20007003 	.word	0x20007003

0801a884 <__sinit>:
 801a884:	b510      	push	{r4, lr}
 801a886:	0004      	movs	r4, r0
 801a888:	f7ff ffec 	bl	801a864 <__sinit_lock_acquire>
 801a88c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801a88e:	2a00      	cmp	r2, #0
 801a890:	d002      	beq.n	801a898 <__sinit+0x14>
 801a892:	f7ff ffef 	bl	801a874 <__sinit_lock_release>
 801a896:	bd10      	pop	{r4, pc}
 801a898:	4b0e      	ldr	r3, [pc, #56]	; (801a8d4 <__sinit+0x50>)
 801a89a:	2103      	movs	r1, #3
 801a89c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801a89e:	23b8      	movs	r3, #184	; 0xb8
 801a8a0:	009b      	lsls	r3, r3, #2
 801a8a2:	50e2      	str	r2, [r4, r3]
 801a8a4:	3304      	adds	r3, #4
 801a8a6:	50e1      	str	r1, [r4, r3]
 801a8a8:	3308      	adds	r3, #8
 801a8aa:	18e1      	adds	r1, r4, r3
 801a8ac:	3b04      	subs	r3, #4
 801a8ae:	50e1      	str	r1, [r4, r3]
 801a8b0:	6860      	ldr	r0, [r4, #4]
 801a8b2:	2104      	movs	r1, #4
 801a8b4:	f7ff ff96 	bl	801a7e4 <std>
 801a8b8:	2201      	movs	r2, #1
 801a8ba:	2109      	movs	r1, #9
 801a8bc:	68a0      	ldr	r0, [r4, #8]
 801a8be:	f7ff ff91 	bl	801a7e4 <std>
 801a8c2:	2202      	movs	r2, #2
 801a8c4:	2112      	movs	r1, #18
 801a8c6:	68e0      	ldr	r0, [r4, #12]
 801a8c8:	f7ff ff8c 	bl	801a7e4 <std>
 801a8cc:	2301      	movs	r3, #1
 801a8ce:	63a3      	str	r3, [r4, #56]	; 0x38
 801a8d0:	e7df      	b.n	801a892 <__sinit+0xe>
 801a8d2:	46c0      	nop			; (mov r8, r8)
 801a8d4:	0801a835 	.word	0x0801a835

0801a8d8 <__fputwc>:
 801a8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8da:	b085      	sub	sp, #20
 801a8dc:	000e      	movs	r6, r1
 801a8de:	0015      	movs	r5, r2
 801a8e0:	9001      	str	r0, [sp, #4]
 801a8e2:	f7fe faef 	bl	8018ec4 <__locale_mb_cur_max>
 801a8e6:	0004      	movs	r4, r0
 801a8e8:	2801      	cmp	r0, #1
 801a8ea:	d119      	bne.n	801a920 <__fputwc+0x48>
 801a8ec:	1e73      	subs	r3, r6, #1
 801a8ee:	2bfe      	cmp	r3, #254	; 0xfe
 801a8f0:	d816      	bhi.n	801a920 <__fputwc+0x48>
 801a8f2:	ab02      	add	r3, sp, #8
 801a8f4:	711e      	strb	r6, [r3, #4]
 801a8f6:	2700      	movs	r7, #0
 801a8f8:	42a7      	cmp	r7, r4
 801a8fa:	d020      	beq.n	801a93e <__fputwc+0x66>
 801a8fc:	ab03      	add	r3, sp, #12
 801a8fe:	5dd9      	ldrb	r1, [r3, r7]
 801a900:	68ab      	ldr	r3, [r5, #8]
 801a902:	3b01      	subs	r3, #1
 801a904:	60ab      	str	r3, [r5, #8]
 801a906:	2b00      	cmp	r3, #0
 801a908:	da04      	bge.n	801a914 <__fputwc+0x3c>
 801a90a:	69aa      	ldr	r2, [r5, #24]
 801a90c:	4293      	cmp	r3, r2
 801a90e:	db19      	blt.n	801a944 <__fputwc+0x6c>
 801a910:	290a      	cmp	r1, #10
 801a912:	d017      	beq.n	801a944 <__fputwc+0x6c>
 801a914:	682b      	ldr	r3, [r5, #0]
 801a916:	1c5a      	adds	r2, r3, #1
 801a918:	602a      	str	r2, [r5, #0]
 801a91a:	7019      	strb	r1, [r3, #0]
 801a91c:	3701      	adds	r7, #1
 801a91e:	e7eb      	b.n	801a8f8 <__fputwc+0x20>
 801a920:	002b      	movs	r3, r5
 801a922:	0032      	movs	r2, r6
 801a924:	9801      	ldr	r0, [sp, #4]
 801a926:	335c      	adds	r3, #92	; 0x5c
 801a928:	a903      	add	r1, sp, #12
 801a92a:	f000 fb23 	bl	801af74 <_wcrtomb_r>
 801a92e:	0004      	movs	r4, r0
 801a930:	1c43      	adds	r3, r0, #1
 801a932:	d1e0      	bne.n	801a8f6 <__fputwc+0x1e>
 801a934:	2340      	movs	r3, #64	; 0x40
 801a936:	0006      	movs	r6, r0
 801a938:	89aa      	ldrh	r2, [r5, #12]
 801a93a:	4313      	orrs	r3, r2
 801a93c:	81ab      	strh	r3, [r5, #12]
 801a93e:	0030      	movs	r0, r6
 801a940:	b005      	add	sp, #20
 801a942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a944:	002a      	movs	r2, r5
 801a946:	9801      	ldr	r0, [sp, #4]
 801a948:	f000 fac2 	bl	801aed0 <__swbuf_r>
 801a94c:	1c43      	adds	r3, r0, #1
 801a94e:	d1e5      	bne.n	801a91c <__fputwc+0x44>
 801a950:	0006      	movs	r6, r0
 801a952:	e7f4      	b.n	801a93e <__fputwc+0x66>

0801a954 <_fputwc_r>:
 801a954:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801a956:	b570      	push	{r4, r5, r6, lr}
 801a958:	0005      	movs	r5, r0
 801a95a:	000e      	movs	r6, r1
 801a95c:	0014      	movs	r4, r2
 801a95e:	07db      	lsls	r3, r3, #31
 801a960:	d405      	bmi.n	801a96e <_fputwc_r+0x1a>
 801a962:	8993      	ldrh	r3, [r2, #12]
 801a964:	059b      	lsls	r3, r3, #22
 801a966:	d402      	bmi.n	801a96e <_fputwc_r+0x1a>
 801a968:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801a96a:	f7fe fab9 	bl	8018ee0 <__retarget_lock_acquire_recursive>
 801a96e:	230c      	movs	r3, #12
 801a970:	5ee2      	ldrsh	r2, [r4, r3]
 801a972:	2380      	movs	r3, #128	; 0x80
 801a974:	019b      	lsls	r3, r3, #6
 801a976:	421a      	tst	r2, r3
 801a978:	d104      	bne.n	801a984 <_fputwc_r+0x30>
 801a97a:	431a      	orrs	r2, r3
 801a97c:	81a2      	strh	r2, [r4, #12]
 801a97e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a980:	4313      	orrs	r3, r2
 801a982:	6663      	str	r3, [r4, #100]	; 0x64
 801a984:	0028      	movs	r0, r5
 801a986:	0022      	movs	r2, r4
 801a988:	0031      	movs	r1, r6
 801a98a:	f7ff ffa5 	bl	801a8d8 <__fputwc>
 801a98e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a990:	0005      	movs	r5, r0
 801a992:	07db      	lsls	r3, r3, #31
 801a994:	d405      	bmi.n	801a9a2 <_fputwc_r+0x4e>
 801a996:	89a3      	ldrh	r3, [r4, #12]
 801a998:	059b      	lsls	r3, r3, #22
 801a99a:	d402      	bmi.n	801a9a2 <_fputwc_r+0x4e>
 801a99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a99e:	f7fe faa0 	bl	8018ee2 <__retarget_lock_release_recursive>
 801a9a2:	0028      	movs	r0, r5
 801a9a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a9a8 <__sfvwrite_r>:
 801a9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9aa:	6893      	ldr	r3, [r2, #8]
 801a9ac:	b087      	sub	sp, #28
 801a9ae:	000c      	movs	r4, r1
 801a9b0:	9002      	str	r0, [sp, #8]
 801a9b2:	9203      	str	r2, [sp, #12]
 801a9b4:	9300      	str	r3, [sp, #0]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d102      	bne.n	801a9c0 <__sfvwrite_r+0x18>
 801a9ba:	2000      	movs	r0, #0
 801a9bc:	b007      	add	sp, #28
 801a9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9c0:	898b      	ldrh	r3, [r1, #12]
 801a9c2:	071b      	lsls	r3, r3, #28
 801a9c4:	d559      	bpl.n	801aa7a <__sfvwrite_r+0xd2>
 801a9c6:	690b      	ldr	r3, [r1, #16]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d056      	beq.n	801aa7a <__sfvwrite_r+0xd2>
 801a9cc:	9b03      	ldr	r3, [sp, #12]
 801a9ce:	2202      	movs	r2, #2
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	9301      	str	r3, [sp, #4]
 801a9d4:	89a3      	ldrh	r3, [r4, #12]
 801a9d6:	001f      	movs	r7, r3
 801a9d8:	4017      	ands	r7, r2
 801a9da:	4213      	tst	r3, r2
 801a9dc:	d173      	bne.n	801aac6 <__sfvwrite_r+0x11e>
 801a9de:	2201      	movs	r2, #1
 801a9e0:	0019      	movs	r1, r3
 801a9e2:	4011      	ands	r1, r2
 801a9e4:	4213      	tst	r3, r2
 801a9e6:	d100      	bne.n	801a9ea <__sfvwrite_r+0x42>
 801a9e8:	e0a8      	b.n	801ab3c <__sfvwrite_r+0x194>
 801a9ea:	0038      	movs	r0, r7
 801a9ec:	003e      	movs	r6, r7
 801a9ee:	9700      	str	r7, [sp, #0]
 801a9f0:	9205      	str	r2, [sp, #20]
 801a9f2:	9b00      	ldr	r3, [sp, #0]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d100      	bne.n	801a9fa <__sfvwrite_r+0x52>
 801a9f8:	e112      	b.n	801ac20 <__sfvwrite_r+0x278>
 801a9fa:	2800      	cmp	r0, #0
 801a9fc:	d10a      	bne.n	801aa14 <__sfvwrite_r+0x6c>
 801a9fe:	001a      	movs	r2, r3
 801aa00:	210a      	movs	r1, #10
 801aa02:	0030      	movs	r0, r6
 801aa04:	f7fe fa80 	bl	8018f08 <memchr>
 801aa08:	9b00      	ldr	r3, [sp, #0]
 801aa0a:	1c5f      	adds	r7, r3, #1
 801aa0c:	2800      	cmp	r0, #0
 801aa0e:	d001      	beq.n	801aa14 <__sfvwrite_r+0x6c>
 801aa10:	3001      	adds	r0, #1
 801aa12:	1b87      	subs	r7, r0, r6
 801aa14:	9b00      	ldr	r3, [sp, #0]
 801aa16:	9704      	str	r7, [sp, #16]
 801aa18:	429f      	cmp	r7, r3
 801aa1a:	d900      	bls.n	801aa1e <__sfvwrite_r+0x76>
 801aa1c:	9304      	str	r3, [sp, #16]
 801aa1e:	6820      	ldr	r0, [r4, #0]
 801aa20:	6922      	ldr	r2, [r4, #16]
 801aa22:	6963      	ldr	r3, [r4, #20]
 801aa24:	4290      	cmp	r0, r2
 801aa26:	d800      	bhi.n	801aa2a <__sfvwrite_r+0x82>
 801aa28:	e103      	b.n	801ac32 <__sfvwrite_r+0x28a>
 801aa2a:	68a2      	ldr	r2, [r4, #8]
 801aa2c:	189d      	adds	r5, r3, r2
 801aa2e:	9a04      	ldr	r2, [sp, #16]
 801aa30:	42aa      	cmp	r2, r5
 801aa32:	dc00      	bgt.n	801aa36 <__sfvwrite_r+0x8e>
 801aa34:	e0fd      	b.n	801ac32 <__sfvwrite_r+0x28a>
 801aa36:	0031      	movs	r1, r6
 801aa38:	002a      	movs	r2, r5
 801aa3a:	f7fe fa70 	bl	8018f1e <memmove>
 801aa3e:	6823      	ldr	r3, [r4, #0]
 801aa40:	0021      	movs	r1, r4
 801aa42:	195b      	adds	r3, r3, r5
 801aa44:	9802      	ldr	r0, [sp, #8]
 801aa46:	6023      	str	r3, [r4, #0]
 801aa48:	f7ff fea6 	bl	801a798 <_fflush_r>
 801aa4c:	2800      	cmp	r0, #0
 801aa4e:	d170      	bne.n	801ab32 <__sfvwrite_r+0x18a>
 801aa50:	9805      	ldr	r0, [sp, #20]
 801aa52:	1b7f      	subs	r7, r7, r5
 801aa54:	d105      	bne.n	801aa62 <__sfvwrite_r+0xba>
 801aa56:	0021      	movs	r1, r4
 801aa58:	9802      	ldr	r0, [sp, #8]
 801aa5a:	f7ff fe9d 	bl	801a798 <_fflush_r>
 801aa5e:	2800      	cmp	r0, #0
 801aa60:	d167      	bne.n	801ab32 <__sfvwrite_r+0x18a>
 801aa62:	9b00      	ldr	r3, [sp, #0]
 801aa64:	1976      	adds	r6, r6, r5
 801aa66:	1b5b      	subs	r3, r3, r5
 801aa68:	9300      	str	r3, [sp, #0]
 801aa6a:	9b03      	ldr	r3, [sp, #12]
 801aa6c:	689b      	ldr	r3, [r3, #8]
 801aa6e:	1b5d      	subs	r5, r3, r5
 801aa70:	9304      	str	r3, [sp, #16]
 801aa72:	9b03      	ldr	r3, [sp, #12]
 801aa74:	609d      	str	r5, [r3, #8]
 801aa76:	d1bc      	bne.n	801a9f2 <__sfvwrite_r+0x4a>
 801aa78:	e79f      	b.n	801a9ba <__sfvwrite_r+0x12>
 801aa7a:	0021      	movs	r1, r4
 801aa7c:	9802      	ldr	r0, [sp, #8]
 801aa7e:	f7ff fd87 	bl	801a590 <__swsetup_r>
 801aa82:	2800      	cmp	r0, #0
 801aa84:	d0a2      	beq.n	801a9cc <__sfvwrite_r+0x24>
 801aa86:	2001      	movs	r0, #1
 801aa88:	4240      	negs	r0, r0
 801aa8a:	e797      	b.n	801a9bc <__sfvwrite_r+0x14>
 801aa8c:	9b01      	ldr	r3, [sp, #4]
 801aa8e:	681e      	ldr	r6, [r3, #0]
 801aa90:	685d      	ldr	r5, [r3, #4]
 801aa92:	3308      	adds	r3, #8
 801aa94:	9301      	str	r3, [sp, #4]
 801aa96:	2d00      	cmp	r5, #0
 801aa98:	d0f8      	beq.n	801aa8c <__sfvwrite_r+0xe4>
 801aa9a:	4a72      	ldr	r2, [pc, #456]	; (801ac64 <__sfvwrite_r+0x2bc>)
 801aa9c:	002b      	movs	r3, r5
 801aa9e:	4295      	cmp	r5, r2
 801aaa0:	d900      	bls.n	801aaa4 <__sfvwrite_r+0xfc>
 801aaa2:	0013      	movs	r3, r2
 801aaa4:	0032      	movs	r2, r6
 801aaa6:	69e1      	ldr	r1, [r4, #28]
 801aaa8:	9802      	ldr	r0, [sp, #8]
 801aaaa:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801aaac:	47b8      	blx	r7
 801aaae:	2800      	cmp	r0, #0
 801aab0:	dd3f      	ble.n	801ab32 <__sfvwrite_r+0x18a>
 801aab2:	9b03      	ldr	r3, [sp, #12]
 801aab4:	1836      	adds	r6, r6, r0
 801aab6:	689b      	ldr	r3, [r3, #8]
 801aab8:	1a2d      	subs	r5, r5, r0
 801aaba:	9300      	str	r3, [sp, #0]
 801aabc:	1a18      	subs	r0, r3, r0
 801aabe:	9b03      	ldr	r3, [sp, #12]
 801aac0:	6098      	str	r0, [r3, #8]
 801aac2:	d1e8      	bne.n	801aa96 <__sfvwrite_r+0xee>
 801aac4:	e779      	b.n	801a9ba <__sfvwrite_r+0x12>
 801aac6:	2600      	movs	r6, #0
 801aac8:	0035      	movs	r5, r6
 801aaca:	e7e4      	b.n	801aa96 <__sfvwrite_r+0xee>
 801aacc:	9b01      	ldr	r3, [sp, #4]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	9304      	str	r3, [sp, #16]
 801aad2:	9b01      	ldr	r3, [sp, #4]
 801aad4:	685b      	ldr	r3, [r3, #4]
 801aad6:	9300      	str	r3, [sp, #0]
 801aad8:	9b01      	ldr	r3, [sp, #4]
 801aada:	3308      	adds	r3, #8
 801aadc:	9301      	str	r3, [sp, #4]
 801aade:	9b00      	ldr	r3, [sp, #0]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d0f3      	beq.n	801aacc <__sfvwrite_r+0x124>
 801aae4:	2380      	movs	r3, #128	; 0x80
 801aae6:	89a2      	ldrh	r2, [r4, #12]
 801aae8:	009b      	lsls	r3, r3, #2
 801aaea:	68a5      	ldr	r5, [r4, #8]
 801aaec:	6820      	ldr	r0, [r4, #0]
 801aaee:	421a      	tst	r2, r3
 801aaf0:	d064      	beq.n	801abbc <__sfvwrite_r+0x214>
 801aaf2:	9b00      	ldr	r3, [sp, #0]
 801aaf4:	429d      	cmp	r5, r3
 801aaf6:	d835      	bhi.n	801ab64 <__sfvwrite_r+0x1bc>
 801aaf8:	2390      	movs	r3, #144	; 0x90
 801aafa:	00db      	lsls	r3, r3, #3
 801aafc:	421a      	tst	r2, r3
 801aafe:	d031      	beq.n	801ab64 <__sfvwrite_r+0x1bc>
 801ab00:	2603      	movs	r6, #3
 801ab02:	6963      	ldr	r3, [r4, #20]
 801ab04:	6921      	ldr	r1, [r4, #16]
 801ab06:	435e      	muls	r6, r3
 801ab08:	1a47      	subs	r7, r0, r1
 801ab0a:	0ff0      	lsrs	r0, r6, #31
 801ab0c:	1986      	adds	r6, r0, r6
 801ab0e:	9800      	ldr	r0, [sp, #0]
 801ab10:	1c7b      	adds	r3, r7, #1
 801ab12:	181b      	adds	r3, r3, r0
 801ab14:	1076      	asrs	r6, r6, #1
 801ab16:	42b3      	cmp	r3, r6
 801ab18:	d900      	bls.n	801ab1c <__sfvwrite_r+0x174>
 801ab1a:	001e      	movs	r6, r3
 801ab1c:	0553      	lsls	r3, r2, #21
 801ab1e:	d53e      	bpl.n	801ab9e <__sfvwrite_r+0x1f6>
 801ab20:	0031      	movs	r1, r6
 801ab22:	9802      	ldr	r0, [sp, #8]
 801ab24:	f7fa f84c 	bl	8014bc0 <_malloc_r>
 801ab28:	1e05      	subs	r5, r0, #0
 801ab2a:	d10a      	bne.n	801ab42 <__sfvwrite_r+0x19a>
 801ab2c:	230c      	movs	r3, #12
 801ab2e:	9a02      	ldr	r2, [sp, #8]
 801ab30:	6013      	str	r3, [r2, #0]
 801ab32:	2340      	movs	r3, #64	; 0x40
 801ab34:	89a2      	ldrh	r2, [r4, #12]
 801ab36:	4313      	orrs	r3, r2
 801ab38:	81a3      	strh	r3, [r4, #12]
 801ab3a:	e7a4      	b.n	801aa86 <__sfvwrite_r+0xde>
 801ab3c:	9104      	str	r1, [sp, #16]
 801ab3e:	9100      	str	r1, [sp, #0]
 801ab40:	e7cd      	b.n	801aade <__sfvwrite_r+0x136>
 801ab42:	003a      	movs	r2, r7
 801ab44:	6921      	ldr	r1, [r4, #16]
 801ab46:	f7fa fa5d 	bl	8015004 <memcpy>
 801ab4a:	89a3      	ldrh	r3, [r4, #12]
 801ab4c:	4a46      	ldr	r2, [pc, #280]	; (801ac68 <__sfvwrite_r+0x2c0>)
 801ab4e:	401a      	ands	r2, r3
 801ab50:	2380      	movs	r3, #128	; 0x80
 801ab52:	4313      	orrs	r3, r2
 801ab54:	81a3      	strh	r3, [r4, #12]
 801ab56:	6125      	str	r5, [r4, #16]
 801ab58:	19ed      	adds	r5, r5, r7
 801ab5a:	6025      	str	r5, [r4, #0]
 801ab5c:	6166      	str	r6, [r4, #20]
 801ab5e:	9d00      	ldr	r5, [sp, #0]
 801ab60:	1bf6      	subs	r6, r6, r7
 801ab62:	60a6      	str	r6, [r4, #8]
 801ab64:	9f00      	ldr	r7, [sp, #0]
 801ab66:	42bd      	cmp	r5, r7
 801ab68:	d900      	bls.n	801ab6c <__sfvwrite_r+0x1c4>
 801ab6a:	003d      	movs	r5, r7
 801ab6c:	002a      	movs	r2, r5
 801ab6e:	9904      	ldr	r1, [sp, #16]
 801ab70:	6820      	ldr	r0, [r4, #0]
 801ab72:	f7fe f9d4 	bl	8018f1e <memmove>
 801ab76:	68a3      	ldr	r3, [r4, #8]
 801ab78:	1b5b      	subs	r3, r3, r5
 801ab7a:	60a3      	str	r3, [r4, #8]
 801ab7c:	6823      	ldr	r3, [r4, #0]
 801ab7e:	195d      	adds	r5, r3, r5
 801ab80:	6025      	str	r5, [r4, #0]
 801ab82:	9b04      	ldr	r3, [sp, #16]
 801ab84:	19db      	adds	r3, r3, r7
 801ab86:	9304      	str	r3, [sp, #16]
 801ab88:	9b00      	ldr	r3, [sp, #0]
 801ab8a:	1bdb      	subs	r3, r3, r7
 801ab8c:	9300      	str	r3, [sp, #0]
 801ab8e:	9b03      	ldr	r3, [sp, #12]
 801ab90:	689b      	ldr	r3, [r3, #8]
 801ab92:	1bdf      	subs	r7, r3, r7
 801ab94:	9305      	str	r3, [sp, #20]
 801ab96:	9b03      	ldr	r3, [sp, #12]
 801ab98:	609f      	str	r7, [r3, #8]
 801ab9a:	d1a0      	bne.n	801aade <__sfvwrite_r+0x136>
 801ab9c:	e70d      	b.n	801a9ba <__sfvwrite_r+0x12>
 801ab9e:	0032      	movs	r2, r6
 801aba0:	9802      	ldr	r0, [sp, #8]
 801aba2:	f7fa fa75 	bl	8015090 <_realloc_r>
 801aba6:	1e05      	subs	r5, r0, #0
 801aba8:	d1d5      	bne.n	801ab56 <__sfvwrite_r+0x1ae>
 801abaa:	6921      	ldr	r1, [r4, #16]
 801abac:	9802      	ldr	r0, [sp, #8]
 801abae:	f7fd fd65 	bl	801867c <_free_r>
 801abb2:	2280      	movs	r2, #128	; 0x80
 801abb4:	89a3      	ldrh	r3, [r4, #12]
 801abb6:	4393      	bics	r3, r2
 801abb8:	81a3      	strh	r3, [r4, #12]
 801abba:	e7b7      	b.n	801ab2c <__sfvwrite_r+0x184>
 801abbc:	6923      	ldr	r3, [r4, #16]
 801abbe:	4283      	cmp	r3, r0
 801abc0:	d303      	bcc.n	801abca <__sfvwrite_r+0x222>
 801abc2:	6967      	ldr	r7, [r4, #20]
 801abc4:	9b00      	ldr	r3, [sp, #0]
 801abc6:	429f      	cmp	r7, r3
 801abc8:	d917      	bls.n	801abfa <__sfvwrite_r+0x252>
 801abca:	9b00      	ldr	r3, [sp, #0]
 801abcc:	429d      	cmp	r5, r3
 801abce:	d900      	bls.n	801abd2 <__sfvwrite_r+0x22a>
 801abd0:	001d      	movs	r5, r3
 801abd2:	002a      	movs	r2, r5
 801abd4:	9904      	ldr	r1, [sp, #16]
 801abd6:	f7fe f9a2 	bl	8018f1e <memmove>
 801abda:	68a3      	ldr	r3, [r4, #8]
 801abdc:	6822      	ldr	r2, [r4, #0]
 801abde:	1b5b      	subs	r3, r3, r5
 801abe0:	1952      	adds	r2, r2, r5
 801abe2:	002f      	movs	r7, r5
 801abe4:	60a3      	str	r3, [r4, #8]
 801abe6:	6022      	str	r2, [r4, #0]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d1ca      	bne.n	801ab82 <__sfvwrite_r+0x1da>
 801abec:	0021      	movs	r1, r4
 801abee:	9802      	ldr	r0, [sp, #8]
 801abf0:	f7ff fdd2 	bl	801a798 <_fflush_r>
 801abf4:	2800      	cmp	r0, #0
 801abf6:	d0c4      	beq.n	801ab82 <__sfvwrite_r+0x1da>
 801abf8:	e79b      	b.n	801ab32 <__sfvwrite_r+0x18a>
 801abfa:	9a00      	ldr	r2, [sp, #0]
 801abfc:	4b1b      	ldr	r3, [pc, #108]	; (801ac6c <__sfvwrite_r+0x2c4>)
 801abfe:	0010      	movs	r0, r2
 801ac00:	429a      	cmp	r2, r3
 801ac02:	d900      	bls.n	801ac06 <__sfvwrite_r+0x25e>
 801ac04:	481a      	ldr	r0, [pc, #104]	; (801ac70 <__sfvwrite_r+0x2c8>)
 801ac06:	0039      	movs	r1, r7
 801ac08:	f7e5 fb2c 	bl	8000264 <__divsi3>
 801ac0c:	003b      	movs	r3, r7
 801ac0e:	9a04      	ldr	r2, [sp, #16]
 801ac10:	4343      	muls	r3, r0
 801ac12:	69e1      	ldr	r1, [r4, #28]
 801ac14:	9802      	ldr	r0, [sp, #8]
 801ac16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801ac18:	47a8      	blx	r5
 801ac1a:	1e07      	subs	r7, r0, #0
 801ac1c:	dcb1      	bgt.n	801ab82 <__sfvwrite_r+0x1da>
 801ac1e:	e788      	b.n	801ab32 <__sfvwrite_r+0x18a>
 801ac20:	9b01      	ldr	r3, [sp, #4]
 801ac22:	2000      	movs	r0, #0
 801ac24:	681e      	ldr	r6, [r3, #0]
 801ac26:	685b      	ldr	r3, [r3, #4]
 801ac28:	9300      	str	r3, [sp, #0]
 801ac2a:	9b01      	ldr	r3, [sp, #4]
 801ac2c:	3308      	adds	r3, #8
 801ac2e:	9301      	str	r3, [sp, #4]
 801ac30:	e6df      	b.n	801a9f2 <__sfvwrite_r+0x4a>
 801ac32:	9a04      	ldr	r2, [sp, #16]
 801ac34:	4293      	cmp	r3, r2
 801ac36:	dc08      	bgt.n	801ac4a <__sfvwrite_r+0x2a2>
 801ac38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801ac3a:	0032      	movs	r2, r6
 801ac3c:	69e1      	ldr	r1, [r4, #28]
 801ac3e:	9802      	ldr	r0, [sp, #8]
 801ac40:	47a8      	blx	r5
 801ac42:	1e05      	subs	r5, r0, #0
 801ac44:	dd00      	ble.n	801ac48 <__sfvwrite_r+0x2a0>
 801ac46:	e703      	b.n	801aa50 <__sfvwrite_r+0xa8>
 801ac48:	e773      	b.n	801ab32 <__sfvwrite_r+0x18a>
 801ac4a:	9a04      	ldr	r2, [sp, #16]
 801ac4c:	0031      	movs	r1, r6
 801ac4e:	f7fe f966 	bl	8018f1e <memmove>
 801ac52:	9a04      	ldr	r2, [sp, #16]
 801ac54:	68a3      	ldr	r3, [r4, #8]
 801ac56:	0015      	movs	r5, r2
 801ac58:	1a9b      	subs	r3, r3, r2
 801ac5a:	60a3      	str	r3, [r4, #8]
 801ac5c:	6823      	ldr	r3, [r4, #0]
 801ac5e:	189b      	adds	r3, r3, r2
 801ac60:	6023      	str	r3, [r4, #0]
 801ac62:	e6f5      	b.n	801aa50 <__sfvwrite_r+0xa8>
 801ac64:	7ffffc00 	.word	0x7ffffc00
 801ac68:	fffffb7f 	.word	0xfffffb7f
 801ac6c:	7ffffffe 	.word	0x7ffffffe
 801ac70:	7fffffff 	.word	0x7fffffff

0801ac74 <_fwalk_reent>:
 801ac74:	23b8      	movs	r3, #184	; 0xb8
 801ac76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac78:	0006      	movs	r6, r0
 801ac7a:	2700      	movs	r7, #0
 801ac7c:	009b      	lsls	r3, r3, #2
 801ac7e:	9101      	str	r1, [sp, #4]
 801ac80:	18c4      	adds	r4, r0, r3
 801ac82:	6863      	ldr	r3, [r4, #4]
 801ac84:	68a5      	ldr	r5, [r4, #8]
 801ac86:	9300      	str	r3, [sp, #0]
 801ac88:	9b00      	ldr	r3, [sp, #0]
 801ac8a:	3b01      	subs	r3, #1
 801ac8c:	9300      	str	r3, [sp, #0]
 801ac8e:	d504      	bpl.n	801ac9a <_fwalk_reent+0x26>
 801ac90:	6824      	ldr	r4, [r4, #0]
 801ac92:	2c00      	cmp	r4, #0
 801ac94:	d1f5      	bne.n	801ac82 <_fwalk_reent+0xe>
 801ac96:	0038      	movs	r0, r7
 801ac98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ac9a:	89ab      	ldrh	r3, [r5, #12]
 801ac9c:	2b01      	cmp	r3, #1
 801ac9e:	d908      	bls.n	801acb2 <_fwalk_reent+0x3e>
 801aca0:	220e      	movs	r2, #14
 801aca2:	5eab      	ldrsh	r3, [r5, r2]
 801aca4:	3301      	adds	r3, #1
 801aca6:	d004      	beq.n	801acb2 <_fwalk_reent+0x3e>
 801aca8:	0029      	movs	r1, r5
 801acaa:	0030      	movs	r0, r6
 801acac:	9b01      	ldr	r3, [sp, #4]
 801acae:	4798      	blx	r3
 801acb0:	4307      	orrs	r7, r0
 801acb2:	3568      	adds	r5, #104	; 0x68
 801acb4:	e7e8      	b.n	801ac88 <_fwalk_reent+0x14>
	...

0801acb8 <__swhatbuf_r>:
 801acb8:	b570      	push	{r4, r5, r6, lr}
 801acba:	000e      	movs	r6, r1
 801acbc:	001d      	movs	r5, r3
 801acbe:	230e      	movs	r3, #14
 801acc0:	5ec9      	ldrsh	r1, [r1, r3]
 801acc2:	0014      	movs	r4, r2
 801acc4:	b096      	sub	sp, #88	; 0x58
 801acc6:	2900      	cmp	r1, #0
 801acc8:	da0b      	bge.n	801ace2 <__swhatbuf_r+0x2a>
 801acca:	2300      	movs	r3, #0
 801accc:	602b      	str	r3, [r5, #0]
 801acce:	89b1      	ldrh	r1, [r6, #12]
 801acd0:	2280      	movs	r2, #128	; 0x80
 801acd2:	0008      	movs	r0, r1
 801acd4:	4010      	ands	r0, r2
 801acd6:	4211      	tst	r1, r2
 801acd8:	d117      	bne.n	801ad0a <__swhatbuf_r+0x52>
 801acda:	2380      	movs	r3, #128	; 0x80
 801acdc:	00db      	lsls	r3, r3, #3
 801acde:	6023      	str	r3, [r4, #0]
 801ace0:	e016      	b.n	801ad10 <__swhatbuf_r+0x58>
 801ace2:	466a      	mov	r2, sp
 801ace4:	f000 f9e4 	bl	801b0b0 <_fstat_r>
 801ace8:	2800      	cmp	r0, #0
 801acea:	dbee      	blt.n	801acca <__swhatbuf_r+0x12>
 801acec:	23f0      	movs	r3, #240	; 0xf0
 801acee:	9901      	ldr	r1, [sp, #4]
 801acf0:	021b      	lsls	r3, r3, #8
 801acf2:	4019      	ands	r1, r3
 801acf4:	4b07      	ldr	r3, [pc, #28]	; (801ad14 <__swhatbuf_r+0x5c>)
 801acf6:	2080      	movs	r0, #128	; 0x80
 801acf8:	18c9      	adds	r1, r1, r3
 801acfa:	424b      	negs	r3, r1
 801acfc:	4159      	adcs	r1, r3
 801acfe:	2380      	movs	r3, #128	; 0x80
 801ad00:	00db      	lsls	r3, r3, #3
 801ad02:	6029      	str	r1, [r5, #0]
 801ad04:	0100      	lsls	r0, r0, #4
 801ad06:	6023      	str	r3, [r4, #0]
 801ad08:	e002      	b.n	801ad10 <__swhatbuf_r+0x58>
 801ad0a:	2240      	movs	r2, #64	; 0x40
 801ad0c:	0018      	movs	r0, r3
 801ad0e:	6022      	str	r2, [r4, #0]
 801ad10:	b016      	add	sp, #88	; 0x58
 801ad12:	bd70      	pop	{r4, r5, r6, pc}
 801ad14:	ffffe000 	.word	0xffffe000

0801ad18 <__smakebuf_r>:
 801ad18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad1a:	2602      	movs	r6, #2
 801ad1c:	898b      	ldrh	r3, [r1, #12]
 801ad1e:	0005      	movs	r5, r0
 801ad20:	000c      	movs	r4, r1
 801ad22:	4233      	tst	r3, r6
 801ad24:	d006      	beq.n	801ad34 <__smakebuf_r+0x1c>
 801ad26:	0023      	movs	r3, r4
 801ad28:	3343      	adds	r3, #67	; 0x43
 801ad2a:	6023      	str	r3, [r4, #0]
 801ad2c:	6123      	str	r3, [r4, #16]
 801ad2e:	2301      	movs	r3, #1
 801ad30:	6163      	str	r3, [r4, #20]
 801ad32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801ad34:	466a      	mov	r2, sp
 801ad36:	ab01      	add	r3, sp, #4
 801ad38:	f7ff ffbe 	bl	801acb8 <__swhatbuf_r>
 801ad3c:	9900      	ldr	r1, [sp, #0]
 801ad3e:	0007      	movs	r7, r0
 801ad40:	0028      	movs	r0, r5
 801ad42:	f7f9 ff3d 	bl	8014bc0 <_malloc_r>
 801ad46:	2800      	cmp	r0, #0
 801ad48:	d108      	bne.n	801ad5c <__smakebuf_r+0x44>
 801ad4a:	220c      	movs	r2, #12
 801ad4c:	5ea3      	ldrsh	r3, [r4, r2]
 801ad4e:	059a      	lsls	r2, r3, #22
 801ad50:	d4ef      	bmi.n	801ad32 <__smakebuf_r+0x1a>
 801ad52:	2203      	movs	r2, #3
 801ad54:	4393      	bics	r3, r2
 801ad56:	431e      	orrs	r6, r3
 801ad58:	81a6      	strh	r6, [r4, #12]
 801ad5a:	e7e4      	b.n	801ad26 <__smakebuf_r+0xe>
 801ad5c:	4b0f      	ldr	r3, [pc, #60]	; (801ad9c <__smakebuf_r+0x84>)
 801ad5e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ad60:	2380      	movs	r3, #128	; 0x80
 801ad62:	89a2      	ldrh	r2, [r4, #12]
 801ad64:	6020      	str	r0, [r4, #0]
 801ad66:	4313      	orrs	r3, r2
 801ad68:	81a3      	strh	r3, [r4, #12]
 801ad6a:	9b00      	ldr	r3, [sp, #0]
 801ad6c:	6120      	str	r0, [r4, #16]
 801ad6e:	6163      	str	r3, [r4, #20]
 801ad70:	9b01      	ldr	r3, [sp, #4]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d00d      	beq.n	801ad92 <__smakebuf_r+0x7a>
 801ad76:	0028      	movs	r0, r5
 801ad78:	230e      	movs	r3, #14
 801ad7a:	5ee1      	ldrsh	r1, [r4, r3]
 801ad7c:	f000 f9aa 	bl	801b0d4 <_isatty_r>
 801ad80:	2800      	cmp	r0, #0
 801ad82:	d006      	beq.n	801ad92 <__smakebuf_r+0x7a>
 801ad84:	2203      	movs	r2, #3
 801ad86:	89a3      	ldrh	r3, [r4, #12]
 801ad88:	4393      	bics	r3, r2
 801ad8a:	001a      	movs	r2, r3
 801ad8c:	2301      	movs	r3, #1
 801ad8e:	4313      	orrs	r3, r2
 801ad90:	81a3      	strh	r3, [r4, #12]
 801ad92:	89a0      	ldrh	r0, [r4, #12]
 801ad94:	4307      	orrs	r7, r0
 801ad96:	81a7      	strh	r7, [r4, #12]
 801ad98:	e7cb      	b.n	801ad32 <__smakebuf_r+0x1a>
 801ad9a:	46c0      	nop			; (mov r8, r8)
 801ad9c:	0801a835 	.word	0x0801a835

0801ada0 <_raise_r>:
 801ada0:	b570      	push	{r4, r5, r6, lr}
 801ada2:	0004      	movs	r4, r0
 801ada4:	000d      	movs	r5, r1
 801ada6:	291f      	cmp	r1, #31
 801ada8:	d904      	bls.n	801adb4 <_raise_r+0x14>
 801adaa:	2316      	movs	r3, #22
 801adac:	6003      	str	r3, [r0, #0]
 801adae:	2001      	movs	r0, #1
 801adb0:	4240      	negs	r0, r0
 801adb2:	bd70      	pop	{r4, r5, r6, pc}
 801adb4:	23b7      	movs	r3, #183	; 0xb7
 801adb6:	009b      	lsls	r3, r3, #2
 801adb8:	58c3      	ldr	r3, [r0, r3]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d004      	beq.n	801adc8 <_raise_r+0x28>
 801adbe:	008a      	lsls	r2, r1, #2
 801adc0:	189b      	adds	r3, r3, r2
 801adc2:	681a      	ldr	r2, [r3, #0]
 801adc4:	2a00      	cmp	r2, #0
 801adc6:	d108      	bne.n	801adda <_raise_r+0x3a>
 801adc8:	0020      	movs	r0, r4
 801adca:	f000 f831 	bl	801ae30 <_getpid_r>
 801adce:	002a      	movs	r2, r5
 801add0:	0001      	movs	r1, r0
 801add2:	0020      	movs	r0, r4
 801add4:	f000 f81a 	bl	801ae0c <_kill_r>
 801add8:	e7eb      	b.n	801adb2 <_raise_r+0x12>
 801adda:	2000      	movs	r0, #0
 801addc:	2a01      	cmp	r2, #1
 801adde:	d0e8      	beq.n	801adb2 <_raise_r+0x12>
 801ade0:	1c51      	adds	r1, r2, #1
 801ade2:	d103      	bne.n	801adec <_raise_r+0x4c>
 801ade4:	2316      	movs	r3, #22
 801ade6:	3001      	adds	r0, #1
 801ade8:	6023      	str	r3, [r4, #0]
 801adea:	e7e2      	b.n	801adb2 <_raise_r+0x12>
 801adec:	2400      	movs	r4, #0
 801adee:	0028      	movs	r0, r5
 801adf0:	601c      	str	r4, [r3, #0]
 801adf2:	4790      	blx	r2
 801adf4:	0020      	movs	r0, r4
 801adf6:	e7dc      	b.n	801adb2 <_raise_r+0x12>

0801adf8 <raise>:
 801adf8:	b510      	push	{r4, lr}
 801adfa:	4b03      	ldr	r3, [pc, #12]	; (801ae08 <raise+0x10>)
 801adfc:	0001      	movs	r1, r0
 801adfe:	6818      	ldr	r0, [r3, #0]
 801ae00:	f7ff ffce 	bl	801ada0 <_raise_r>
 801ae04:	bd10      	pop	{r4, pc}
 801ae06:	46c0      	nop			; (mov r8, r8)
 801ae08:	20000138 	.word	0x20000138

0801ae0c <_kill_r>:
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	b570      	push	{r4, r5, r6, lr}
 801ae10:	4d06      	ldr	r5, [pc, #24]	; (801ae2c <_kill_r+0x20>)
 801ae12:	0004      	movs	r4, r0
 801ae14:	0008      	movs	r0, r1
 801ae16:	0011      	movs	r1, r2
 801ae18:	602b      	str	r3, [r5, #0]
 801ae1a:	f000 f9b5 	bl	801b188 <_kill>
 801ae1e:	1c43      	adds	r3, r0, #1
 801ae20:	d103      	bne.n	801ae2a <_kill_r+0x1e>
 801ae22:	682b      	ldr	r3, [r5, #0]
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d000      	beq.n	801ae2a <_kill_r+0x1e>
 801ae28:	6023      	str	r3, [r4, #0]
 801ae2a:	bd70      	pop	{r4, r5, r6, pc}
 801ae2c:	2000700c 	.word	0x2000700c

0801ae30 <_getpid_r>:
 801ae30:	b510      	push	{r4, lr}
 801ae32:	f000 f999 	bl	801b168 <_getpid>
 801ae36:	bd10      	pop	{r4, pc}

0801ae38 <__sread>:
 801ae38:	b570      	push	{r4, r5, r6, lr}
 801ae3a:	000c      	movs	r4, r1
 801ae3c:	250e      	movs	r5, #14
 801ae3e:	5f49      	ldrsh	r1, [r1, r5]
 801ae40:	f000 f96e 	bl	801b120 <_read_r>
 801ae44:	2800      	cmp	r0, #0
 801ae46:	db03      	blt.n	801ae50 <__sread+0x18>
 801ae48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801ae4a:	181b      	adds	r3, r3, r0
 801ae4c:	6523      	str	r3, [r4, #80]	; 0x50
 801ae4e:	bd70      	pop	{r4, r5, r6, pc}
 801ae50:	89a3      	ldrh	r3, [r4, #12]
 801ae52:	4a02      	ldr	r2, [pc, #8]	; (801ae5c <__sread+0x24>)
 801ae54:	4013      	ands	r3, r2
 801ae56:	81a3      	strh	r3, [r4, #12]
 801ae58:	e7f9      	b.n	801ae4e <__sread+0x16>
 801ae5a:	46c0      	nop			; (mov r8, r8)
 801ae5c:	ffffefff 	.word	0xffffefff

0801ae60 <__swrite>:
 801ae60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae62:	001f      	movs	r7, r3
 801ae64:	898b      	ldrh	r3, [r1, #12]
 801ae66:	0005      	movs	r5, r0
 801ae68:	000c      	movs	r4, r1
 801ae6a:	0016      	movs	r6, r2
 801ae6c:	05db      	lsls	r3, r3, #23
 801ae6e:	d505      	bpl.n	801ae7c <__swrite+0x1c>
 801ae70:	230e      	movs	r3, #14
 801ae72:	5ec9      	ldrsh	r1, [r1, r3]
 801ae74:	2200      	movs	r2, #0
 801ae76:	2302      	movs	r3, #2
 801ae78:	f000 f93e 	bl	801b0f8 <_lseek_r>
 801ae7c:	89a3      	ldrh	r3, [r4, #12]
 801ae7e:	4a05      	ldr	r2, [pc, #20]	; (801ae94 <__swrite+0x34>)
 801ae80:	0028      	movs	r0, r5
 801ae82:	4013      	ands	r3, r2
 801ae84:	81a3      	strh	r3, [r4, #12]
 801ae86:	0032      	movs	r2, r6
 801ae88:	230e      	movs	r3, #14
 801ae8a:	5ee1      	ldrsh	r1, [r4, r3]
 801ae8c:	003b      	movs	r3, r7
 801ae8e:	f000 f889 	bl	801afa4 <_write_r>
 801ae92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae94:	ffffefff 	.word	0xffffefff

0801ae98 <__sseek>:
 801ae98:	b570      	push	{r4, r5, r6, lr}
 801ae9a:	000c      	movs	r4, r1
 801ae9c:	250e      	movs	r5, #14
 801ae9e:	5f49      	ldrsh	r1, [r1, r5]
 801aea0:	f000 f92a 	bl	801b0f8 <_lseek_r>
 801aea4:	89a3      	ldrh	r3, [r4, #12]
 801aea6:	1c42      	adds	r2, r0, #1
 801aea8:	d103      	bne.n	801aeb2 <__sseek+0x1a>
 801aeaa:	4a05      	ldr	r2, [pc, #20]	; (801aec0 <__sseek+0x28>)
 801aeac:	4013      	ands	r3, r2
 801aeae:	81a3      	strh	r3, [r4, #12]
 801aeb0:	bd70      	pop	{r4, r5, r6, pc}
 801aeb2:	2280      	movs	r2, #128	; 0x80
 801aeb4:	0152      	lsls	r2, r2, #5
 801aeb6:	4313      	orrs	r3, r2
 801aeb8:	81a3      	strh	r3, [r4, #12]
 801aeba:	6520      	str	r0, [r4, #80]	; 0x50
 801aebc:	e7f8      	b.n	801aeb0 <__sseek+0x18>
 801aebe:	46c0      	nop			; (mov r8, r8)
 801aec0:	ffffefff 	.word	0xffffefff

0801aec4 <__sclose>:
 801aec4:	b510      	push	{r4, lr}
 801aec6:	230e      	movs	r3, #14
 801aec8:	5ec9      	ldrsh	r1, [r1, r3]
 801aeca:	f000 f87f 	bl	801afcc <_close_r>
 801aece:	bd10      	pop	{r4, pc}

0801aed0 <__swbuf_r>:
 801aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aed2:	0006      	movs	r6, r0
 801aed4:	000d      	movs	r5, r1
 801aed6:	0014      	movs	r4, r2
 801aed8:	2800      	cmp	r0, #0
 801aeda:	d004      	beq.n	801aee6 <__swbuf_r+0x16>
 801aedc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d101      	bne.n	801aee6 <__swbuf_r+0x16>
 801aee2:	f7ff fccf 	bl	801a884 <__sinit>
 801aee6:	69a3      	ldr	r3, [r4, #24]
 801aee8:	60a3      	str	r3, [r4, #8]
 801aeea:	89a3      	ldrh	r3, [r4, #12]
 801aeec:	071b      	lsls	r3, r3, #28
 801aeee:	d52e      	bpl.n	801af4e <__swbuf_r+0x7e>
 801aef0:	6923      	ldr	r3, [r4, #16]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d02b      	beq.n	801af4e <__swbuf_r+0x7e>
 801aef6:	230c      	movs	r3, #12
 801aef8:	5ee2      	ldrsh	r2, [r4, r3]
 801aefa:	2380      	movs	r3, #128	; 0x80
 801aefc:	019b      	lsls	r3, r3, #6
 801aefe:	b2ef      	uxtb	r7, r5
 801af00:	b2ed      	uxtb	r5, r5
 801af02:	421a      	tst	r2, r3
 801af04:	d02c      	beq.n	801af60 <__swbuf_r+0x90>
 801af06:	6823      	ldr	r3, [r4, #0]
 801af08:	6922      	ldr	r2, [r4, #16]
 801af0a:	1a98      	subs	r0, r3, r2
 801af0c:	6963      	ldr	r3, [r4, #20]
 801af0e:	4283      	cmp	r3, r0
 801af10:	dc05      	bgt.n	801af1e <__swbuf_r+0x4e>
 801af12:	0021      	movs	r1, r4
 801af14:	0030      	movs	r0, r6
 801af16:	f7ff fc3f 	bl	801a798 <_fflush_r>
 801af1a:	2800      	cmp	r0, #0
 801af1c:	d11d      	bne.n	801af5a <__swbuf_r+0x8a>
 801af1e:	68a3      	ldr	r3, [r4, #8]
 801af20:	3001      	adds	r0, #1
 801af22:	3b01      	subs	r3, #1
 801af24:	60a3      	str	r3, [r4, #8]
 801af26:	6823      	ldr	r3, [r4, #0]
 801af28:	1c5a      	adds	r2, r3, #1
 801af2a:	6022      	str	r2, [r4, #0]
 801af2c:	701f      	strb	r7, [r3, #0]
 801af2e:	6963      	ldr	r3, [r4, #20]
 801af30:	4283      	cmp	r3, r0
 801af32:	d004      	beq.n	801af3e <__swbuf_r+0x6e>
 801af34:	89a3      	ldrh	r3, [r4, #12]
 801af36:	07db      	lsls	r3, r3, #31
 801af38:	d507      	bpl.n	801af4a <__swbuf_r+0x7a>
 801af3a:	2d0a      	cmp	r5, #10
 801af3c:	d105      	bne.n	801af4a <__swbuf_r+0x7a>
 801af3e:	0021      	movs	r1, r4
 801af40:	0030      	movs	r0, r6
 801af42:	f7ff fc29 	bl	801a798 <_fflush_r>
 801af46:	2800      	cmp	r0, #0
 801af48:	d107      	bne.n	801af5a <__swbuf_r+0x8a>
 801af4a:	0028      	movs	r0, r5
 801af4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af4e:	0021      	movs	r1, r4
 801af50:	0030      	movs	r0, r6
 801af52:	f7ff fb1d 	bl	801a590 <__swsetup_r>
 801af56:	2800      	cmp	r0, #0
 801af58:	d0cd      	beq.n	801aef6 <__swbuf_r+0x26>
 801af5a:	2501      	movs	r5, #1
 801af5c:	426d      	negs	r5, r5
 801af5e:	e7f4      	b.n	801af4a <__swbuf_r+0x7a>
 801af60:	4313      	orrs	r3, r2
 801af62:	81a3      	strh	r3, [r4, #12]
 801af64:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801af66:	4b02      	ldr	r3, [pc, #8]	; (801af70 <__swbuf_r+0xa0>)
 801af68:	4013      	ands	r3, r2
 801af6a:	6663      	str	r3, [r4, #100]	; 0x64
 801af6c:	e7cb      	b.n	801af06 <__swbuf_r+0x36>
 801af6e:	46c0      	nop			; (mov r8, r8)
 801af70:	ffffdfff 	.word	0xffffdfff

0801af74 <_wcrtomb_r>:
 801af74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801af76:	001d      	movs	r5, r3
 801af78:	4b09      	ldr	r3, [pc, #36]	; (801afa0 <_wcrtomb_r+0x2c>)
 801af7a:	0004      	movs	r4, r0
 801af7c:	33e0      	adds	r3, #224	; 0xe0
 801af7e:	681e      	ldr	r6, [r3, #0]
 801af80:	002b      	movs	r3, r5
 801af82:	2900      	cmp	r1, #0
 801af84:	d101      	bne.n	801af8a <_wcrtomb_r+0x16>
 801af86:	000a      	movs	r2, r1
 801af88:	a901      	add	r1, sp, #4
 801af8a:	0020      	movs	r0, r4
 801af8c:	47b0      	blx	r6
 801af8e:	1c43      	adds	r3, r0, #1
 801af90:	d103      	bne.n	801af9a <_wcrtomb_r+0x26>
 801af92:	2300      	movs	r3, #0
 801af94:	602b      	str	r3, [r5, #0]
 801af96:	338a      	adds	r3, #138	; 0x8a
 801af98:	6023      	str	r3, [r4, #0]
 801af9a:	b004      	add	sp, #16
 801af9c:	bd70      	pop	{r4, r5, r6, pc}
 801af9e:	46c0      	nop			; (mov r8, r8)
 801afa0:	20000980 	.word	0x20000980

0801afa4 <_write_r>:
 801afa4:	b570      	push	{r4, r5, r6, lr}
 801afa6:	0004      	movs	r4, r0
 801afa8:	0008      	movs	r0, r1
 801afaa:	0011      	movs	r1, r2
 801afac:	001a      	movs	r2, r3
 801afae:	2300      	movs	r3, #0
 801afb0:	4d05      	ldr	r5, [pc, #20]	; (801afc8 <_write_r+0x24>)
 801afb2:	602b      	str	r3, [r5, #0]
 801afb4:	f000 f910 	bl	801b1d8 <_write>
 801afb8:	1c43      	adds	r3, r0, #1
 801afba:	d103      	bne.n	801afc4 <_write_r+0x20>
 801afbc:	682b      	ldr	r3, [r5, #0]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d000      	beq.n	801afc4 <_write_r+0x20>
 801afc2:	6023      	str	r3, [r4, #0]
 801afc4:	bd70      	pop	{r4, r5, r6, pc}
 801afc6:	46c0      	nop			; (mov r8, r8)
 801afc8:	2000700c 	.word	0x2000700c

0801afcc <_close_r>:
 801afcc:	2300      	movs	r3, #0
 801afce:	b570      	push	{r4, r5, r6, lr}
 801afd0:	4d06      	ldr	r5, [pc, #24]	; (801afec <_close_r+0x20>)
 801afd2:	0004      	movs	r4, r0
 801afd4:	0008      	movs	r0, r1
 801afd6:	602b      	str	r3, [r5, #0]
 801afd8:	f000 f8b6 	bl	801b148 <_close>
 801afdc:	1c43      	adds	r3, r0, #1
 801afde:	d103      	bne.n	801afe8 <_close_r+0x1c>
 801afe0:	682b      	ldr	r3, [r5, #0]
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d000      	beq.n	801afe8 <_close_r+0x1c>
 801afe6:	6023      	str	r3, [r4, #0]
 801afe8:	bd70      	pop	{r4, r5, r6, pc}
 801afea:	46c0      	nop			; (mov r8, r8)
 801afec:	2000700c 	.word	0x2000700c

0801aff0 <_fclose_r>:
 801aff0:	b570      	push	{r4, r5, r6, lr}
 801aff2:	0005      	movs	r5, r0
 801aff4:	1e0c      	subs	r4, r1, #0
 801aff6:	d102      	bne.n	801affe <_fclose_r+0xe>
 801aff8:	2600      	movs	r6, #0
 801affa:	0030      	movs	r0, r6
 801affc:	bd70      	pop	{r4, r5, r6, pc}
 801affe:	2800      	cmp	r0, #0
 801b000:	d004      	beq.n	801b00c <_fclose_r+0x1c>
 801b002:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801b004:	2b00      	cmp	r3, #0
 801b006:	d101      	bne.n	801b00c <_fclose_r+0x1c>
 801b008:	f7ff fc3c 	bl	801a884 <__sinit>
 801b00c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b00e:	07db      	lsls	r3, r3, #31
 801b010:	d405      	bmi.n	801b01e <_fclose_r+0x2e>
 801b012:	89a3      	ldrh	r3, [r4, #12]
 801b014:	059b      	lsls	r3, r3, #22
 801b016:	d402      	bmi.n	801b01e <_fclose_r+0x2e>
 801b018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b01a:	f7fd ff61 	bl	8018ee0 <__retarget_lock_acquire_recursive>
 801b01e:	220c      	movs	r2, #12
 801b020:	5ea3      	ldrsh	r3, [r4, r2]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d109      	bne.n	801b03a <_fclose_r+0x4a>
 801b026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b028:	3301      	adds	r3, #1
 801b02a:	0016      	movs	r6, r2
 801b02c:	401e      	ands	r6, r3
 801b02e:	421a      	tst	r2, r3
 801b030:	d1e2      	bne.n	801aff8 <_fclose_r+0x8>
 801b032:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b034:	f7fd ff55 	bl	8018ee2 <__retarget_lock_release_recursive>
 801b038:	e7df      	b.n	801affa <_fclose_r+0xa>
 801b03a:	0021      	movs	r1, r4
 801b03c:	0028      	movs	r0, r5
 801b03e:	f7ff fb13 	bl	801a668 <__sflush_r>
 801b042:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b044:	0006      	movs	r6, r0
 801b046:	2b00      	cmp	r3, #0
 801b048:	d006      	beq.n	801b058 <_fclose_r+0x68>
 801b04a:	0028      	movs	r0, r5
 801b04c:	69e1      	ldr	r1, [r4, #28]
 801b04e:	4798      	blx	r3
 801b050:	2800      	cmp	r0, #0
 801b052:	da01      	bge.n	801b058 <_fclose_r+0x68>
 801b054:	2601      	movs	r6, #1
 801b056:	4276      	negs	r6, r6
 801b058:	89a3      	ldrh	r3, [r4, #12]
 801b05a:	061b      	lsls	r3, r3, #24
 801b05c:	d503      	bpl.n	801b066 <_fclose_r+0x76>
 801b05e:	0028      	movs	r0, r5
 801b060:	6921      	ldr	r1, [r4, #16]
 801b062:	f7fd fb0b 	bl	801867c <_free_r>
 801b066:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b068:	2900      	cmp	r1, #0
 801b06a:	d008      	beq.n	801b07e <_fclose_r+0x8e>
 801b06c:	0023      	movs	r3, r4
 801b06e:	3340      	adds	r3, #64	; 0x40
 801b070:	4299      	cmp	r1, r3
 801b072:	d002      	beq.n	801b07a <_fclose_r+0x8a>
 801b074:	0028      	movs	r0, r5
 801b076:	f7fd fb01 	bl	801867c <_free_r>
 801b07a:	2300      	movs	r3, #0
 801b07c:	6323      	str	r3, [r4, #48]	; 0x30
 801b07e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801b080:	2900      	cmp	r1, #0
 801b082:	d004      	beq.n	801b08e <_fclose_r+0x9e>
 801b084:	0028      	movs	r0, r5
 801b086:	f7fd faf9 	bl	801867c <_free_r>
 801b08a:	2300      	movs	r3, #0
 801b08c:	6463      	str	r3, [r4, #68]	; 0x44
 801b08e:	f7ff fbd9 	bl	801a844 <__sfp_lock_acquire>
 801b092:	2300      	movs	r3, #0
 801b094:	81a3      	strh	r3, [r4, #12]
 801b096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b098:	07db      	lsls	r3, r3, #31
 801b09a:	d402      	bmi.n	801b0a2 <_fclose_r+0xb2>
 801b09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b09e:	f7fd ff20 	bl	8018ee2 <__retarget_lock_release_recursive>
 801b0a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b0a4:	f7fd ff1b 	bl	8018ede <__retarget_lock_close_recursive>
 801b0a8:	f7ff fbd4 	bl	801a854 <__sfp_lock_release>
 801b0ac:	e7a5      	b.n	801affa <_fclose_r+0xa>
	...

0801b0b0 <_fstat_r>:
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	b570      	push	{r4, r5, r6, lr}
 801b0b4:	4d06      	ldr	r5, [pc, #24]	; (801b0d0 <_fstat_r+0x20>)
 801b0b6:	0004      	movs	r4, r0
 801b0b8:	0008      	movs	r0, r1
 801b0ba:	0011      	movs	r1, r2
 801b0bc:	602b      	str	r3, [r5, #0]
 801b0be:	f000 f84b 	bl	801b158 <_fstat>
 801b0c2:	1c43      	adds	r3, r0, #1
 801b0c4:	d103      	bne.n	801b0ce <_fstat_r+0x1e>
 801b0c6:	682b      	ldr	r3, [r5, #0]
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d000      	beq.n	801b0ce <_fstat_r+0x1e>
 801b0cc:	6023      	str	r3, [r4, #0]
 801b0ce:	bd70      	pop	{r4, r5, r6, pc}
 801b0d0:	2000700c 	.word	0x2000700c

0801b0d4 <_isatty_r>:
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	b570      	push	{r4, r5, r6, lr}
 801b0d8:	4d06      	ldr	r5, [pc, #24]	; (801b0f4 <_isatty_r+0x20>)
 801b0da:	0004      	movs	r4, r0
 801b0dc:	0008      	movs	r0, r1
 801b0de:	602b      	str	r3, [r5, #0]
 801b0e0:	f000 f84a 	bl	801b178 <_isatty>
 801b0e4:	1c43      	adds	r3, r0, #1
 801b0e6:	d103      	bne.n	801b0f0 <_isatty_r+0x1c>
 801b0e8:	682b      	ldr	r3, [r5, #0]
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d000      	beq.n	801b0f0 <_isatty_r+0x1c>
 801b0ee:	6023      	str	r3, [r4, #0]
 801b0f0:	bd70      	pop	{r4, r5, r6, pc}
 801b0f2:	46c0      	nop			; (mov r8, r8)
 801b0f4:	2000700c 	.word	0x2000700c

0801b0f8 <_lseek_r>:
 801b0f8:	b570      	push	{r4, r5, r6, lr}
 801b0fa:	0004      	movs	r4, r0
 801b0fc:	0008      	movs	r0, r1
 801b0fe:	0011      	movs	r1, r2
 801b100:	001a      	movs	r2, r3
 801b102:	2300      	movs	r3, #0
 801b104:	4d05      	ldr	r5, [pc, #20]	; (801b11c <_lseek_r+0x24>)
 801b106:	602b      	str	r3, [r5, #0]
 801b108:	f000 f846 	bl	801b198 <_lseek>
 801b10c:	1c43      	adds	r3, r0, #1
 801b10e:	d103      	bne.n	801b118 <_lseek_r+0x20>
 801b110:	682b      	ldr	r3, [r5, #0]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d000      	beq.n	801b118 <_lseek_r+0x20>
 801b116:	6023      	str	r3, [r4, #0]
 801b118:	bd70      	pop	{r4, r5, r6, pc}
 801b11a:	46c0      	nop			; (mov r8, r8)
 801b11c:	2000700c 	.word	0x2000700c

0801b120 <_read_r>:
 801b120:	b570      	push	{r4, r5, r6, lr}
 801b122:	0004      	movs	r4, r0
 801b124:	0008      	movs	r0, r1
 801b126:	0011      	movs	r1, r2
 801b128:	001a      	movs	r2, r3
 801b12a:	2300      	movs	r3, #0
 801b12c:	4d05      	ldr	r5, [pc, #20]	; (801b144 <_read_r+0x24>)
 801b12e:	602b      	str	r3, [r5, #0]
 801b130:	f000 f83a 	bl	801b1a8 <_read>
 801b134:	1c43      	adds	r3, r0, #1
 801b136:	d103      	bne.n	801b140 <_read_r+0x20>
 801b138:	682b      	ldr	r3, [r5, #0]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d000      	beq.n	801b140 <_read_r+0x20>
 801b13e:	6023      	str	r3, [r4, #0]
 801b140:	bd70      	pop	{r4, r5, r6, pc}
 801b142:	46c0      	nop			; (mov r8, r8)
 801b144:	2000700c 	.word	0x2000700c

0801b148 <_close>:
 801b148:	2258      	movs	r2, #88	; 0x58
 801b14a:	2001      	movs	r0, #1
 801b14c:	4b01      	ldr	r3, [pc, #4]	; (801b154 <_close+0xc>)
 801b14e:	4240      	negs	r0, r0
 801b150:	601a      	str	r2, [r3, #0]
 801b152:	4770      	bx	lr
 801b154:	2000700c 	.word	0x2000700c

0801b158 <_fstat>:
 801b158:	2258      	movs	r2, #88	; 0x58
 801b15a:	2001      	movs	r0, #1
 801b15c:	4b01      	ldr	r3, [pc, #4]	; (801b164 <_fstat+0xc>)
 801b15e:	4240      	negs	r0, r0
 801b160:	601a      	str	r2, [r3, #0]
 801b162:	4770      	bx	lr
 801b164:	2000700c 	.word	0x2000700c

0801b168 <_getpid>:
 801b168:	2258      	movs	r2, #88	; 0x58
 801b16a:	2001      	movs	r0, #1
 801b16c:	4b01      	ldr	r3, [pc, #4]	; (801b174 <_getpid+0xc>)
 801b16e:	4240      	negs	r0, r0
 801b170:	601a      	str	r2, [r3, #0]
 801b172:	4770      	bx	lr
 801b174:	2000700c 	.word	0x2000700c

0801b178 <_isatty>:
 801b178:	2258      	movs	r2, #88	; 0x58
 801b17a:	4b02      	ldr	r3, [pc, #8]	; (801b184 <_isatty+0xc>)
 801b17c:	2000      	movs	r0, #0
 801b17e:	601a      	str	r2, [r3, #0]
 801b180:	4770      	bx	lr
 801b182:	46c0      	nop			; (mov r8, r8)
 801b184:	2000700c 	.word	0x2000700c

0801b188 <_kill>:
 801b188:	2258      	movs	r2, #88	; 0x58
 801b18a:	2001      	movs	r0, #1
 801b18c:	4b01      	ldr	r3, [pc, #4]	; (801b194 <_kill+0xc>)
 801b18e:	4240      	negs	r0, r0
 801b190:	601a      	str	r2, [r3, #0]
 801b192:	4770      	bx	lr
 801b194:	2000700c 	.word	0x2000700c

0801b198 <_lseek>:
 801b198:	2258      	movs	r2, #88	; 0x58
 801b19a:	2001      	movs	r0, #1
 801b19c:	4b01      	ldr	r3, [pc, #4]	; (801b1a4 <_lseek+0xc>)
 801b19e:	4240      	negs	r0, r0
 801b1a0:	601a      	str	r2, [r3, #0]
 801b1a2:	4770      	bx	lr
 801b1a4:	2000700c 	.word	0x2000700c

0801b1a8 <_read>:
 801b1a8:	2258      	movs	r2, #88	; 0x58
 801b1aa:	2001      	movs	r0, #1
 801b1ac:	4b01      	ldr	r3, [pc, #4]	; (801b1b4 <_read+0xc>)
 801b1ae:	4240      	negs	r0, r0
 801b1b0:	601a      	str	r2, [r3, #0]
 801b1b2:	4770      	bx	lr
 801b1b4:	2000700c 	.word	0x2000700c

0801b1b8 <_sbrk>:
 801b1b8:	4a05      	ldr	r2, [pc, #20]	; (801b1d0 <_sbrk+0x18>)
 801b1ba:	0003      	movs	r3, r0
 801b1bc:	6811      	ldr	r1, [r2, #0]
 801b1be:	2900      	cmp	r1, #0
 801b1c0:	d101      	bne.n	801b1c6 <_sbrk+0xe>
 801b1c2:	4904      	ldr	r1, [pc, #16]	; (801b1d4 <_sbrk+0x1c>)
 801b1c4:	6011      	str	r1, [r2, #0]
 801b1c6:	6810      	ldr	r0, [r2, #0]
 801b1c8:	18c3      	adds	r3, r0, r3
 801b1ca:	6013      	str	r3, [r2, #0]
 801b1cc:	4770      	bx	lr
 801b1ce:	46c0      	nop			; (mov r8, r8)
 801b1d0:	20006a30 	.word	0x20006a30
 801b1d4:	20007010 	.word	0x20007010

0801b1d8 <_write>:
 801b1d8:	2258      	movs	r2, #88	; 0x58
 801b1da:	2001      	movs	r0, #1
 801b1dc:	4b01      	ldr	r3, [pc, #4]	; (801b1e4 <_write+0xc>)
 801b1de:	4240      	negs	r0, r0
 801b1e0:	601a      	str	r2, [r3, #0]
 801b1e2:	4770      	bx	lr
 801b1e4:	2000700c 	.word	0x2000700c

0801b1e8 <_exit>:
 801b1e8:	e7fe      	b.n	801b1e8 <_exit>
	...

0801b1ec <_init>:
 801b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1ee:	46c0      	nop			; (mov r8, r8)
 801b1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1f2:	bc08      	pop	{r3}
 801b1f4:	469e      	mov	lr, r3
 801b1f6:	4770      	bx	lr

0801b1f8 <_fini>:
 801b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1fa:	46c0      	nop			; (mov r8, r8)
 801b1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1fe:	bc08      	pop	{r3}
 801b200:	469e      	mov	lr, r3
 801b202:	4770      	bx	lr
