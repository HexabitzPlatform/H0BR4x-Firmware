
H0BR4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018a98  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000320c  08018b58  08018b58  00028b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd64  0801bd64  00030ae8  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd64  0801bd64  0002bd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd6c  0801bd6c  00030ae8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801bd6c  0801bd6c  0002bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bd74  0801bd74  0002bd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ae8  20000000  0801bd78  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006440  20000ae8  0801c860  00030ae8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006f28  0801c860  00036f28  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030ae8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006572c  00000000  00000000  00030b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000937a  00000000  00000000  0009623c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00025f5b  00000000  00000000  0009f5b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002a70  00000000  00000000  000c5518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002ef8  00000000  00000000  000c7f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a1e5  00000000  00000000  000cae80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00012d6e  00000000  00000000  000e5065  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7dd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f48  00000000  00000000  000f7e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ae8 	.word	0x20000ae8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08018b3c 	.word	0x08018b3c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000aec 	.word	0x20000aec
 8000100:	08018b3c 	.word	0x08018b3c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fda3 	bl	8001f98 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fcfb 	bl	8001e58 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd95 	bl	8001f98 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd8b 	bl	8001f98 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd1d 	bl	8001ed0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd13 	bl	8001ed0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fcbf 	bl	8000e44 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc41 	bl	8000d58 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fcb1 	bl	8000e44 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fca7 	bl	8000e44 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc4f 	bl	8000da8 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc45 	bl	8000da8 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d115      	bne.n	800055c <__aeabi_ldivmod+0x30>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d113      	bne.n	800055c <__aeabi_ldivmod+0x30>
 8000534:	2900      	cmp	r1, #0
 8000536:	db06      	blt.n	8000546 <__aeabi_ldivmod+0x1a>
 8000538:	dc01      	bgt.n	800053e <__aeabi_ldivmod+0x12>
 800053a:	2800      	cmp	r0, #0
 800053c:	d006      	beq.n	800054c <__aeabi_ldivmod+0x20>
 800053e:	2000      	movs	r0, #0
 8000540:	43c0      	mvns	r0, r0
 8000542:	0841      	lsrs	r1, r0, #1
 8000544:	e002      	b.n	800054c <__aeabi_ldivmod+0x20>
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	0609      	lsls	r1, r1, #24
 800054a:	2000      	movs	r0, #0
 800054c:	b407      	push	{r0, r1, r2}
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <__aeabi_ldivmod+0x2c>)
 8000550:	a101      	add	r1, pc, #4	; (adr r1, 8000558 <__aeabi_ldivmod+0x2c>)
 8000552:	1840      	adds	r0, r0, r1
 8000554:	9002      	str	r0, [sp, #8]
 8000556:	bd03      	pop	{r0, r1, pc}
 8000558:	fffffee1 	.word	0xfffffee1
 800055c:	b403      	push	{r0, r1}
 800055e:	4668      	mov	r0, sp
 8000560:	b501      	push	{r0, lr}
 8000562:	9802      	ldr	r0, [sp, #8]
 8000564:	f000 f930 	bl	80007c8 <__gnu_ldivmod_helper>
 8000568:	9b01      	ldr	r3, [sp, #4]
 800056a:	469e      	mov	lr, r3
 800056c:	b002      	add	sp, #8
 800056e:	bc0c      	pop	{r2, r3}
 8000570:	4770      	bx	lr
 8000572:	46c0      	nop			; (mov r8, r8)

08000574 <__aeabi_uldivmod>:
 8000574:	2b00      	cmp	r3, #0
 8000576:	d111      	bne.n	800059c <__aeabi_uldivmod+0x28>
 8000578:	2a00      	cmp	r2, #0
 800057a:	d10f      	bne.n	800059c <__aeabi_uldivmod+0x28>
 800057c:	2900      	cmp	r1, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_uldivmod+0xe>
 8000580:	2800      	cmp	r0, #0
 8000582:	d002      	beq.n	800058a <__aeabi_uldivmod+0x16>
 8000584:	2100      	movs	r1, #0
 8000586:	43c9      	mvns	r1, r1
 8000588:	1c08      	adds	r0, r1, #0
 800058a:	b407      	push	{r0, r1, r2}
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <__aeabi_uldivmod+0x24>)
 800058e:	a102      	add	r1, pc, #8	; (adr r1, 8000598 <__aeabi_uldivmod+0x24>)
 8000590:	1840      	adds	r0, r0, r1
 8000592:	9002      	str	r0, [sp, #8]
 8000594:	bd03      	pop	{r0, r1, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	fffffea1 	.word	0xfffffea1
 800059c:	b403      	push	{r0, r1}
 800059e:	4668      	mov	r0, sp
 80005a0:	b501      	push	{r0, lr}
 80005a2:	9802      	ldr	r0, [sp, #8]
 80005a4:	f000 f84e 	bl	8000644 <__udivmoddi4>
 80005a8:	9b01      	ldr	r3, [sp, #4]
 80005aa:	469e      	mov	lr, r3
 80005ac:	b002      	add	sp, #8
 80005ae:	bc0c      	pop	{r2, r3}
 80005b0:	4770      	bx	lr
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__aeabi_lmul>:
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	46ce      	mov	lr, r9
 80005b8:	4647      	mov	r7, r8
 80005ba:	0415      	lsls	r5, r2, #16
 80005bc:	0c2d      	lsrs	r5, r5, #16
 80005be:	002e      	movs	r6, r5
 80005c0:	b580      	push	{r7, lr}
 80005c2:	0407      	lsls	r7, r0, #16
 80005c4:	0c14      	lsrs	r4, r2, #16
 80005c6:	0c3f      	lsrs	r7, r7, #16
 80005c8:	4699      	mov	r9, r3
 80005ca:	0c03      	lsrs	r3, r0, #16
 80005cc:	437e      	muls	r6, r7
 80005ce:	435d      	muls	r5, r3
 80005d0:	4367      	muls	r7, r4
 80005d2:	4363      	muls	r3, r4
 80005d4:	197f      	adds	r7, r7, r5
 80005d6:	0c34      	lsrs	r4, r6, #16
 80005d8:	19e4      	adds	r4, r4, r7
 80005da:	469c      	mov	ip, r3
 80005dc:	42a5      	cmp	r5, r4
 80005de:	d903      	bls.n	80005e8 <__aeabi_lmul+0x34>
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	025b      	lsls	r3, r3, #9
 80005e4:	4698      	mov	r8, r3
 80005e6:	44c4      	add	ip, r8
 80005e8:	464b      	mov	r3, r9
 80005ea:	4343      	muls	r3, r0
 80005ec:	4351      	muls	r1, r2
 80005ee:	0c25      	lsrs	r5, r4, #16
 80005f0:	0436      	lsls	r6, r6, #16
 80005f2:	4465      	add	r5, ip
 80005f4:	0c36      	lsrs	r6, r6, #16
 80005f6:	0424      	lsls	r4, r4, #16
 80005f8:	19a4      	adds	r4, r4, r6
 80005fa:	195b      	adds	r3, r3, r5
 80005fc:	1859      	adds	r1, r3, r1
 80005fe:	0020      	movs	r0, r4
 8000600:	bc0c      	pop	{r2, r3}
 8000602:	4690      	mov	r8, r2
 8000604:	4699      	mov	r9, r3
 8000606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000608 <__aeabi_d2uiz>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	2200      	movs	r2, #0
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__aeabi_d2uiz+0x38>)
 800060e:	0004      	movs	r4, r0
 8000610:	000d      	movs	r5, r1
 8000612:	f7ff ff47 	bl	80004a4 <__aeabi_dcmpge>
 8000616:	2800      	cmp	r0, #0
 8000618:	d104      	bne.n	8000624 <__aeabi_d2uiz+0x1c>
 800061a:	0020      	movs	r0, r4
 800061c:	0029      	movs	r1, r5
 800061e:	f002 faf9 	bl	8002c14 <__aeabi_d2iz>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <__aeabi_d2uiz+0x38>)
 8000626:	2200      	movs	r2, #0
 8000628:	0020      	movs	r0, r4
 800062a:	0029      	movs	r1, r5
 800062c:	f001 ff8e 	bl	800254c <__aeabi_dsub>
 8000630:	f002 faf0 	bl	8002c14 <__aeabi_d2iz>
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	061b      	lsls	r3, r3, #24
 8000638:	469c      	mov	ip, r3
 800063a:	4460      	add	r0, ip
 800063c:	e7f1      	b.n	8000622 <__aeabi_d2uiz+0x1a>
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	41e00000 	.word	0x41e00000

08000644 <__udivmoddi4>:
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	464f      	mov	r7, r9
 8000648:	4646      	mov	r6, r8
 800064a:	46d6      	mov	lr, sl
 800064c:	b5c0      	push	{r6, r7, lr}
 800064e:	0004      	movs	r4, r0
 8000650:	b082      	sub	sp, #8
 8000652:	000d      	movs	r5, r1
 8000654:	4691      	mov	r9, r2
 8000656:	4698      	mov	r8, r3
 8000658:	428b      	cmp	r3, r1
 800065a:	d82f      	bhi.n	80006bc <__udivmoddi4+0x78>
 800065c:	d02c      	beq.n	80006b8 <__udivmoddi4+0x74>
 800065e:	4641      	mov	r1, r8
 8000660:	4648      	mov	r0, r9
 8000662:	f002 fc6d 	bl	8002f40 <__clzdi2>
 8000666:	0029      	movs	r1, r5
 8000668:	0006      	movs	r6, r0
 800066a:	0020      	movs	r0, r4
 800066c:	f002 fc68 	bl	8002f40 <__clzdi2>
 8000670:	1a33      	subs	r3, r6, r0
 8000672:	469c      	mov	ip, r3
 8000674:	3b20      	subs	r3, #32
 8000676:	469a      	mov	sl, r3
 8000678:	d500      	bpl.n	800067c <__udivmoddi4+0x38>
 800067a:	e076      	b.n	800076a <__udivmoddi4+0x126>
 800067c:	464b      	mov	r3, r9
 800067e:	4652      	mov	r2, sl
 8000680:	4093      	lsls	r3, r2
 8000682:	001f      	movs	r7, r3
 8000684:	464b      	mov	r3, r9
 8000686:	4662      	mov	r2, ip
 8000688:	4093      	lsls	r3, r2
 800068a:	001e      	movs	r6, r3
 800068c:	42af      	cmp	r7, r5
 800068e:	d828      	bhi.n	80006e2 <__udivmoddi4+0x9e>
 8000690:	d025      	beq.n	80006de <__udivmoddi4+0x9a>
 8000692:	4653      	mov	r3, sl
 8000694:	1ba4      	subs	r4, r4, r6
 8000696:	41bd      	sbcs	r5, r7
 8000698:	2b00      	cmp	r3, #0
 800069a:	da00      	bge.n	800069e <__udivmoddi4+0x5a>
 800069c:	e07b      	b.n	8000796 <__udivmoddi4+0x152>
 800069e:	2200      	movs	r2, #0
 80006a0:	2300      	movs	r3, #0
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4652      	mov	r2, sl
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4662      	mov	r2, ip
 80006b2:	4093      	lsls	r3, r2
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	e018      	b.n	80006ea <__udivmoddi4+0xa6>
 80006b8:	4282      	cmp	r2, r0
 80006ba:	d9d0      	bls.n	800065e <__udivmoddi4+0x1a>
 80006bc:	2200      	movs	r2, #0
 80006be:	2300      	movs	r3, #0
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <__udivmoddi4+0x8a>
 80006ca:	601c      	str	r4, [r3, #0]
 80006cc:	605d      	str	r5, [r3, #4]
 80006ce:	9800      	ldr	r0, [sp, #0]
 80006d0:	9901      	ldr	r1, [sp, #4]
 80006d2:	b002      	add	sp, #8
 80006d4:	bc1c      	pop	{r2, r3, r4}
 80006d6:	4690      	mov	r8, r2
 80006d8:	4699      	mov	r9, r3
 80006da:	46a2      	mov	sl, r4
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006de:	42a3      	cmp	r3, r4
 80006e0:	d9d7      	bls.n	8000692 <__udivmoddi4+0x4e>
 80006e2:	2200      	movs	r2, #0
 80006e4:	2300      	movs	r3, #0
 80006e6:	9200      	str	r2, [sp, #0]
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	4663      	mov	r3, ip
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0e9      	beq.n	80006c4 <__udivmoddi4+0x80>
 80006f0:	07fb      	lsls	r3, r7, #31
 80006f2:	4698      	mov	r8, r3
 80006f4:	4641      	mov	r1, r8
 80006f6:	0872      	lsrs	r2, r6, #1
 80006f8:	430a      	orrs	r2, r1
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	4666      	mov	r6, ip
 80006fe:	e00e      	b.n	800071e <__udivmoddi4+0xda>
 8000700:	42ab      	cmp	r3, r5
 8000702:	d101      	bne.n	8000708 <__udivmoddi4+0xc4>
 8000704:	42a2      	cmp	r2, r4
 8000706:	d80c      	bhi.n	8000722 <__udivmoddi4+0xde>
 8000708:	1aa4      	subs	r4, r4, r2
 800070a:	419d      	sbcs	r5, r3
 800070c:	2001      	movs	r0, #1
 800070e:	1924      	adds	r4, r4, r4
 8000710:	416d      	adcs	r5, r5
 8000712:	2100      	movs	r1, #0
 8000714:	3e01      	subs	r6, #1
 8000716:	1824      	adds	r4, r4, r0
 8000718:	414d      	adcs	r5, r1
 800071a:	2e00      	cmp	r6, #0
 800071c:	d006      	beq.n	800072c <__udivmoddi4+0xe8>
 800071e:	42ab      	cmp	r3, r5
 8000720:	d9ee      	bls.n	8000700 <__udivmoddi4+0xbc>
 8000722:	3e01      	subs	r6, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2e00      	cmp	r6, #0
 800072a:	d1f8      	bne.n	800071e <__udivmoddi4+0xda>
 800072c:	9800      	ldr	r0, [sp, #0]
 800072e:	9901      	ldr	r1, [sp, #4]
 8000730:	4653      	mov	r3, sl
 8000732:	1900      	adds	r0, r0, r4
 8000734:	4169      	adcs	r1, r5
 8000736:	2b00      	cmp	r3, #0
 8000738:	db23      	blt.n	8000782 <__udivmoddi4+0x13e>
 800073a:	002b      	movs	r3, r5
 800073c:	4652      	mov	r2, sl
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	4664      	mov	r4, ip
 8000744:	40e2      	lsrs	r2, r4
 8000746:	001c      	movs	r4, r3
 8000748:	4653      	mov	r3, sl
 800074a:	0015      	movs	r5, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	db2d      	blt.n	80007ac <__udivmoddi4+0x168>
 8000750:	0026      	movs	r6, r4
 8000752:	4657      	mov	r7, sl
 8000754:	40be      	lsls	r6, r7
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4667      	mov	r7, ip
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e7ac      	b.n	80006c4 <__udivmoddi4+0x80>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	464a      	mov	r2, r9
 8000772:	40da      	lsrs	r2, r3
 8000774:	4661      	mov	r1, ip
 8000776:	0013      	movs	r3, r2
 8000778:	4642      	mov	r2, r8
 800077a:	408a      	lsls	r2, r1
 800077c:	0017      	movs	r7, r2
 800077e:	431f      	orrs	r7, r3
 8000780:	e780      	b.n	8000684 <__udivmoddi4+0x40>
 8000782:	4662      	mov	r2, ip
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4666      	mov	r6, ip
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4313      	orrs	r3, r2
 8000794:	e7d4      	b.n	8000740 <__udivmoddi4+0xfc>
 8000796:	4662      	mov	r2, ip
 8000798:	2320      	movs	r3, #32
 800079a:	2100      	movs	r1, #0
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	2200      	movs	r2, #0
 80007a0:	9100      	str	r1, [sp, #0]
 80007a2:	9201      	str	r2, [sp, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	40da      	lsrs	r2, r3
 80007a8:	9201      	str	r2, [sp, #4]
 80007aa:	e780      	b.n	80006ae <__udivmoddi4+0x6a>
 80007ac:	2320      	movs	r3, #32
 80007ae:	4662      	mov	r2, ip
 80007b0:	0026      	movs	r6, r4
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	002f      	movs	r7, r5
 80007b8:	46b0      	mov	r8, r6
 80007ba:	4666      	mov	r6, ip
 80007bc:	40b7      	lsls	r7, r6
 80007be:	4646      	mov	r6, r8
 80007c0:	003b      	movs	r3, r7
 80007c2:	4333      	orrs	r3, r6
 80007c4:	e7c8      	b.n	8000758 <__udivmoddi4+0x114>
 80007c6:	46c0      	nop			; (mov r8, r8)

080007c8 <__gnu_ldivmod_helper>:
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	b083      	sub	sp, #12
 80007cc:	0016      	movs	r6, r2
 80007ce:	001f      	movs	r7, r3
 80007d0:	9000      	str	r0, [sp, #0]
 80007d2:	9101      	str	r1, [sp, #4]
 80007d4:	f002 fbc0 	bl	8002f58 <__divdi3>
 80007d8:	0004      	movs	r4, r0
 80007da:	000d      	movs	r5, r1
 80007dc:	0002      	movs	r2, r0
 80007de:	000b      	movs	r3, r1
 80007e0:	0030      	movs	r0, r6
 80007e2:	0039      	movs	r1, r7
 80007e4:	f7ff fee6 	bl	80005b4 <__aeabi_lmul>
 80007e8:	9a00      	ldr	r2, [sp, #0]
 80007ea:	9b01      	ldr	r3, [sp, #4]
 80007ec:	1a12      	subs	r2, r2, r0
 80007ee:	418b      	sbcs	r3, r1
 80007f0:	9908      	ldr	r1, [sp, #32]
 80007f2:	0020      	movs	r0, r4
 80007f4:	600a      	str	r2, [r1, #0]
 80007f6:	604b      	str	r3, [r1, #4]
 80007f8:	0029      	movs	r1, r5
 80007fa:	b003      	add	sp, #12
 80007fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__aeabi_fadd>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	4647      	mov	r7, r8
 8000804:	46ce      	mov	lr, r9
 8000806:	0243      	lsls	r3, r0, #9
 8000808:	0a5b      	lsrs	r3, r3, #9
 800080a:	0044      	lsls	r4, r0, #1
 800080c:	0fc2      	lsrs	r2, r0, #31
 800080e:	469c      	mov	ip, r3
 8000810:	0048      	lsls	r0, r1, #1
 8000812:	00dd      	lsls	r5, r3, #3
 8000814:	024b      	lsls	r3, r1, #9
 8000816:	0e24      	lsrs	r4, r4, #24
 8000818:	0a5b      	lsrs	r3, r3, #9
 800081a:	0e00      	lsrs	r0, r0, #24
 800081c:	b580      	push	{r7, lr}
 800081e:	4698      	mov	r8, r3
 8000820:	0026      	movs	r6, r4
 8000822:	4691      	mov	r9, r2
 8000824:	0fc9      	lsrs	r1, r1, #31
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	1a27      	subs	r7, r4, r0
 800082a:	428a      	cmp	r2, r1
 800082c:	d029      	beq.n	8000882 <__aeabi_fadd+0x82>
 800082e:	2f00      	cmp	r7, #0
 8000830:	dd15      	ble.n	800085e <__aeabi_fadd+0x5e>
 8000832:	2800      	cmp	r0, #0
 8000834:	d14a      	bne.n	80008cc <__aeabi_fadd+0xcc>
 8000836:	2b00      	cmp	r3, #0
 8000838:	d000      	beq.n	800083c <__aeabi_fadd+0x3c>
 800083a:	e095      	b.n	8000968 <__aeabi_fadd+0x168>
 800083c:	08ed      	lsrs	r5, r5, #3
 800083e:	2cff      	cmp	r4, #255	; 0xff
 8000840:	d100      	bne.n	8000844 <__aeabi_fadd+0x44>
 8000842:	e088      	b.n	8000956 <__aeabi_fadd+0x156>
 8000844:	026b      	lsls	r3, r5, #9
 8000846:	0a5b      	lsrs	r3, r3, #9
 8000848:	b2e6      	uxtb	r6, r4
 800084a:	025b      	lsls	r3, r3, #9
 800084c:	05f6      	lsls	r6, r6, #23
 800084e:	0a58      	lsrs	r0, r3, #9
 8000850:	4330      	orrs	r0, r6
 8000852:	07d2      	lsls	r2, r2, #31
 8000854:	4310      	orrs	r0, r2
 8000856:	bc0c      	pop	{r2, r3}
 8000858:	4690      	mov	r8, r2
 800085a:	4699      	mov	r9, r3
 800085c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800085e:	2f00      	cmp	r7, #0
 8000860:	d000      	beq.n	8000864 <__aeabi_fadd+0x64>
 8000862:	e087      	b.n	8000974 <__aeabi_fadd+0x174>
 8000864:	1c60      	adds	r0, r4, #1
 8000866:	b2c0      	uxtb	r0, r0
 8000868:	2801      	cmp	r0, #1
 800086a:	dc00      	bgt.n	800086e <__aeabi_fadd+0x6e>
 800086c:	e0b6      	b.n	80009dc <__aeabi_fadd+0x1dc>
 800086e:	1aee      	subs	r6, r5, r3
 8000870:	0172      	lsls	r2, r6, #5
 8000872:	d500      	bpl.n	8000876 <__aeabi_fadd+0x76>
 8000874:	e0c5      	b.n	8000a02 <__aeabi_fadd+0x202>
 8000876:	2e00      	cmp	r6, #0
 8000878:	d13d      	bne.n	80008f6 <__aeabi_fadd+0xf6>
 800087a:	2200      	movs	r2, #0
 800087c:	2600      	movs	r6, #0
 800087e:	2300      	movs	r3, #0
 8000880:	e7e3      	b.n	800084a <__aeabi_fadd+0x4a>
 8000882:	2f00      	cmp	r7, #0
 8000884:	dc00      	bgt.n	8000888 <__aeabi_fadd+0x88>
 8000886:	e096      	b.n	80009b6 <__aeabi_fadd+0x1b6>
 8000888:	2800      	cmp	r0, #0
 800088a:	d05d      	beq.n	8000948 <__aeabi_fadd+0x148>
 800088c:	2cff      	cmp	r4, #255	; 0xff
 800088e:	d060      	beq.n	8000952 <__aeabi_fadd+0x152>
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	04d2      	lsls	r2, r2, #19
 8000894:	4313      	orrs	r3, r2
 8000896:	2f1b      	cmp	r7, #27
 8000898:	dd00      	ble.n	800089c <__aeabi_fadd+0x9c>
 800089a:	e0ec      	b.n	8000a76 <__aeabi_fadd+0x276>
 800089c:	2220      	movs	r2, #32
 800089e:	1bd2      	subs	r2, r2, r7
 80008a0:	0018      	movs	r0, r3
 80008a2:	4093      	lsls	r3, r2
 80008a4:	40f8      	lsrs	r0, r7
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	4193      	sbcs	r3, r2
 80008aa:	4303      	orrs	r3, r0
 80008ac:	18ed      	adds	r5, r5, r3
 80008ae:	016b      	lsls	r3, r5, #5
 80008b0:	d57b      	bpl.n	80009aa <__aeabi_fadd+0x1aa>
 80008b2:	3401      	adds	r4, #1
 80008b4:	2cff      	cmp	r4, #255	; 0xff
 80008b6:	d100      	bne.n	80008ba <__aeabi_fadd+0xba>
 80008b8:	e0b7      	b.n	8000a2a <__aeabi_fadd+0x22a>
 80008ba:	2201      	movs	r2, #1
 80008bc:	2607      	movs	r6, #7
 80008be:	402a      	ands	r2, r5
 80008c0:	086b      	lsrs	r3, r5, #1
 80008c2:	4d9a      	ldr	r5, [pc, #616]	; (8000b2c <__aeabi_fadd+0x32c>)
 80008c4:	401d      	ands	r5, r3
 80008c6:	4315      	orrs	r5, r2
 80008c8:	402e      	ands	r6, r5
 80008ca:	e029      	b.n	8000920 <__aeabi_fadd+0x120>
 80008cc:	2cff      	cmp	r4, #255	; 0xff
 80008ce:	d0b5      	beq.n	800083c <__aeabi_fadd+0x3c>
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	04d2      	lsls	r2, r2, #19
 80008d4:	4313      	orrs	r3, r2
 80008d6:	2f1b      	cmp	r7, #27
 80008d8:	dd00      	ble.n	80008dc <__aeabi_fadd+0xdc>
 80008da:	e0b2      	b.n	8000a42 <__aeabi_fadd+0x242>
 80008dc:	2220      	movs	r2, #32
 80008de:	1bd2      	subs	r2, r2, r7
 80008e0:	0019      	movs	r1, r3
 80008e2:	4093      	lsls	r3, r2
 80008e4:	40f9      	lsrs	r1, r7
 80008e6:	1e5a      	subs	r2, r3, #1
 80008e8:	4193      	sbcs	r3, r2
 80008ea:	430b      	orrs	r3, r1
 80008ec:	1aed      	subs	r5, r5, r3
 80008ee:	016b      	lsls	r3, r5, #5
 80008f0:	d55b      	bpl.n	80009aa <__aeabi_fadd+0x1aa>
 80008f2:	01ad      	lsls	r5, r5, #6
 80008f4:	09ae      	lsrs	r6, r5, #6
 80008f6:	0030      	movs	r0, r6
 80008f8:	f002 fb04 	bl	8002f04 <__clzsi2>
 80008fc:	3805      	subs	r0, #5
 80008fe:	4086      	lsls	r6, r0
 8000900:	4284      	cmp	r4, r0
 8000902:	dc65      	bgt.n	80009d0 <__aeabi_fadd+0x1d0>
 8000904:	1b04      	subs	r4, r0, r4
 8000906:	0033      	movs	r3, r6
 8000908:	2020      	movs	r0, #32
 800090a:	3401      	adds	r4, #1
 800090c:	40e3      	lsrs	r3, r4
 800090e:	1b04      	subs	r4, r0, r4
 8000910:	40a6      	lsls	r6, r4
 8000912:	1e75      	subs	r5, r6, #1
 8000914:	41ae      	sbcs	r6, r5
 8000916:	4333      	orrs	r3, r6
 8000918:	2607      	movs	r6, #7
 800091a:	001d      	movs	r5, r3
 800091c:	2400      	movs	r4, #0
 800091e:	401e      	ands	r6, r3
 8000920:	2201      	movs	r2, #1
 8000922:	464b      	mov	r3, r9
 8000924:	401a      	ands	r2, r3
 8000926:	2e00      	cmp	r6, #0
 8000928:	d004      	beq.n	8000934 <__aeabi_fadd+0x134>
 800092a:	230f      	movs	r3, #15
 800092c:	402b      	ands	r3, r5
 800092e:	2b04      	cmp	r3, #4
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x134>
 8000932:	3504      	adds	r5, #4
 8000934:	016b      	lsls	r3, r5, #5
 8000936:	d400      	bmi.n	800093a <__aeabi_fadd+0x13a>
 8000938:	e780      	b.n	800083c <__aeabi_fadd+0x3c>
 800093a:	3401      	adds	r4, #1
 800093c:	b2e6      	uxtb	r6, r4
 800093e:	2cff      	cmp	r4, #255	; 0xff
 8000940:	d12f      	bne.n	80009a2 <__aeabi_fadd+0x1a2>
 8000942:	26ff      	movs	r6, #255	; 0xff
 8000944:	2300      	movs	r3, #0
 8000946:	e780      	b.n	800084a <__aeabi_fadd+0x4a>
 8000948:	2b00      	cmp	r3, #0
 800094a:	d152      	bne.n	80009f2 <__aeabi_fadd+0x1f2>
 800094c:	2cff      	cmp	r4, #255	; 0xff
 800094e:	d000      	beq.n	8000952 <__aeabi_fadd+0x152>
 8000950:	e774      	b.n	800083c <__aeabi_fadd+0x3c>
 8000952:	000a      	movs	r2, r1
 8000954:	08ed      	lsrs	r5, r5, #3
 8000956:	2d00      	cmp	r5, #0
 8000958:	d0f3      	beq.n	8000942 <__aeabi_fadd+0x142>
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	03db      	lsls	r3, r3, #15
 800095e:	432b      	orrs	r3, r5
 8000960:	025b      	lsls	r3, r3, #9
 8000962:	0a5b      	lsrs	r3, r3, #9
 8000964:	26ff      	movs	r6, #255	; 0xff
 8000966:	e770      	b.n	800084a <__aeabi_fadd+0x4a>
 8000968:	3f01      	subs	r7, #1
 800096a:	2f00      	cmp	r7, #0
 800096c:	d0be      	beq.n	80008ec <__aeabi_fadd+0xec>
 800096e:	2cff      	cmp	r4, #255	; 0xff
 8000970:	d1b1      	bne.n	80008d6 <__aeabi_fadd+0xd6>
 8000972:	e763      	b.n	800083c <__aeabi_fadd+0x3c>
 8000974:	2c00      	cmp	r4, #0
 8000976:	d047      	beq.n	8000a08 <__aeabi_fadd+0x208>
 8000978:	28ff      	cmp	r0, #255	; 0xff
 800097a:	d069      	beq.n	8000a50 <__aeabi_fadd+0x250>
 800097c:	2480      	movs	r4, #128	; 0x80
 800097e:	04e4      	lsls	r4, r4, #19
 8000980:	427a      	negs	r2, r7
 8000982:	4325      	orrs	r5, r4
 8000984:	2a1b      	cmp	r2, #27
 8000986:	dd00      	ble.n	800098a <__aeabi_fadd+0x18a>
 8000988:	e0c5      	b.n	8000b16 <__aeabi_fadd+0x316>
 800098a:	002c      	movs	r4, r5
 800098c:	2620      	movs	r6, #32
 800098e:	40d4      	lsrs	r4, r2
 8000990:	1ab2      	subs	r2, r6, r2
 8000992:	4095      	lsls	r5, r2
 8000994:	1e6a      	subs	r2, r5, #1
 8000996:	4195      	sbcs	r5, r2
 8000998:	4325      	orrs	r5, r4
 800099a:	1b5d      	subs	r5, r3, r5
 800099c:	0004      	movs	r4, r0
 800099e:	4689      	mov	r9, r1
 80009a0:	e7a5      	b.n	80008ee <__aeabi_fadd+0xee>
 80009a2:	01ab      	lsls	r3, r5, #6
 80009a4:	0a5b      	lsrs	r3, r3, #9
 80009a6:	e750      	b.n	800084a <__aeabi_fadd+0x4a>
 80009a8:	2400      	movs	r4, #0
 80009aa:	2201      	movs	r2, #1
 80009ac:	464b      	mov	r3, r9
 80009ae:	401a      	ands	r2, r3
 80009b0:	076b      	lsls	r3, r5, #29
 80009b2:	d1ba      	bne.n	800092a <__aeabi_fadd+0x12a>
 80009b4:	e742      	b.n	800083c <__aeabi_fadd+0x3c>
 80009b6:	2f00      	cmp	r7, #0
 80009b8:	d13b      	bne.n	8000a32 <__aeabi_fadd+0x232>
 80009ba:	3401      	adds	r4, #1
 80009bc:	b2e0      	uxtb	r0, r4
 80009be:	2801      	cmp	r0, #1
 80009c0:	dd4a      	ble.n	8000a58 <__aeabi_fadd+0x258>
 80009c2:	2cff      	cmp	r4, #255	; 0xff
 80009c4:	d0bd      	beq.n	8000942 <__aeabi_fadd+0x142>
 80009c6:	2607      	movs	r6, #7
 80009c8:	18ed      	adds	r5, r5, r3
 80009ca:	086d      	lsrs	r5, r5, #1
 80009cc:	402e      	ands	r6, r5
 80009ce:	e7a7      	b.n	8000920 <__aeabi_fadd+0x120>
 80009d0:	2307      	movs	r3, #7
 80009d2:	4d57      	ldr	r5, [pc, #348]	; (8000b30 <__aeabi_fadd+0x330>)
 80009d4:	1a24      	subs	r4, r4, r0
 80009d6:	4035      	ands	r5, r6
 80009d8:	401e      	ands	r6, r3
 80009da:	e7a1      	b.n	8000920 <__aeabi_fadd+0x120>
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d11b      	bne.n	8000a18 <__aeabi_fadd+0x218>
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d16e      	bne.n	8000ac2 <__aeabi_fadd+0x2c2>
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d100      	bne.n	80009ea <__aeabi_fadd+0x1ea>
 80009e8:	e09a      	b.n	8000b20 <__aeabi_fadd+0x320>
 80009ea:	000a      	movs	r2, r1
 80009ec:	001d      	movs	r5, r3
 80009ee:	003c      	movs	r4, r7
 80009f0:	e724      	b.n	800083c <__aeabi_fadd+0x3c>
 80009f2:	3f01      	subs	r7, #1
 80009f4:	2f00      	cmp	r7, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_fadd+0x1fa>
 80009f8:	e758      	b.n	80008ac <__aeabi_fadd+0xac>
 80009fa:	2cff      	cmp	r4, #255	; 0xff
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fadd+0x200>
 80009fe:	e74a      	b.n	8000896 <__aeabi_fadd+0x96>
 8000a00:	e7a7      	b.n	8000952 <__aeabi_fadd+0x152>
 8000a02:	1b5e      	subs	r6, r3, r5
 8000a04:	4689      	mov	r9, r1
 8000a06:	e776      	b.n	80008f6 <__aeabi_fadd+0xf6>
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d11c      	bne.n	8000a46 <__aeabi_fadd+0x246>
 8000a0c:	000a      	movs	r2, r1
 8000a0e:	28ff      	cmp	r0, #255	; 0xff
 8000a10:	d01f      	beq.n	8000a52 <__aeabi_fadd+0x252>
 8000a12:	0004      	movs	r4, r0
 8000a14:	001d      	movs	r5, r3
 8000a16:	e711      	b.n	800083c <__aeabi_fadd+0x3c>
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d15d      	bne.n	8000ad8 <__aeabi_fadd+0x2d8>
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d117      	bne.n	8000a50 <__aeabi_fadd+0x250>
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	2200      	movs	r2, #0
 8000a24:	03db      	lsls	r3, r3, #15
 8000a26:	26ff      	movs	r6, #255	; 0xff
 8000a28:	e70f      	b.n	800084a <__aeabi_fadd+0x4a>
 8000a2a:	000a      	movs	r2, r1
 8000a2c:	26ff      	movs	r6, #255	; 0xff
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e70b      	b.n	800084a <__aeabi_fadd+0x4a>
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d121      	bne.n	8000a7a <__aeabi_fadd+0x27a>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d166      	bne.n	8000b08 <__aeabi_fadd+0x308>
 8000a3a:	28ff      	cmp	r0, #255	; 0xff
 8000a3c:	d1e9      	bne.n	8000a12 <__aeabi_fadd+0x212>
 8000a3e:	001d      	movs	r5, r3
 8000a40:	e787      	b.n	8000952 <__aeabi_fadd+0x152>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e752      	b.n	80008ec <__aeabi_fadd+0xec>
 8000a46:	1c7a      	adds	r2, r7, #1
 8000a48:	d0a7      	beq.n	800099a <__aeabi_fadd+0x19a>
 8000a4a:	43fa      	mvns	r2, r7
 8000a4c:	28ff      	cmp	r0, #255	; 0xff
 8000a4e:	d199      	bne.n	8000984 <__aeabi_fadd+0x184>
 8000a50:	000a      	movs	r2, r1
 8000a52:	001d      	movs	r5, r3
 8000a54:	24ff      	movs	r4, #255	; 0xff
 8000a56:	e6f1      	b.n	800083c <__aeabi_fadd+0x3c>
 8000a58:	2e00      	cmp	r6, #0
 8000a5a:	d121      	bne.n	8000aa0 <__aeabi_fadd+0x2a0>
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d04f      	beq.n	8000b00 <__aeabi_fadd+0x300>
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d04c      	beq.n	8000afe <__aeabi_fadd+0x2fe>
 8000a64:	18ed      	adds	r5, r5, r3
 8000a66:	016b      	lsls	r3, r5, #5
 8000a68:	d59e      	bpl.n	80009a8 <__aeabi_fadd+0x1a8>
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <__aeabi_fadd+0x330>)
 8000a6c:	3607      	adds	r6, #7
 8000a6e:	402e      	ands	r6, r5
 8000a70:	2401      	movs	r4, #1
 8000a72:	401d      	ands	r5, r3
 8000a74:	e754      	b.n	8000920 <__aeabi_fadd+0x120>
 8000a76:	2301      	movs	r3, #1
 8000a78:	e718      	b.n	80008ac <__aeabi_fadd+0xac>
 8000a7a:	28ff      	cmp	r0, #255	; 0xff
 8000a7c:	d0df      	beq.n	8000a3e <__aeabi_fadd+0x23e>
 8000a7e:	2480      	movs	r4, #128	; 0x80
 8000a80:	04e4      	lsls	r4, r4, #19
 8000a82:	427f      	negs	r7, r7
 8000a84:	4325      	orrs	r5, r4
 8000a86:	2f1b      	cmp	r7, #27
 8000a88:	dc4d      	bgt.n	8000b26 <__aeabi_fadd+0x326>
 8000a8a:	2620      	movs	r6, #32
 8000a8c:	1bf6      	subs	r6, r6, r7
 8000a8e:	002c      	movs	r4, r5
 8000a90:	40b5      	lsls	r5, r6
 8000a92:	40fc      	lsrs	r4, r7
 8000a94:	1e6a      	subs	r2, r5, #1
 8000a96:	4195      	sbcs	r5, r2
 8000a98:	4325      	orrs	r5, r4
 8000a9a:	18ed      	adds	r5, r5, r3
 8000a9c:	0004      	movs	r4, r0
 8000a9e:	e706      	b.n	80008ae <__aeabi_fadd+0xae>
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d0cc      	beq.n	8000a3e <__aeabi_fadd+0x23e>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fadd+0x2aa>
 8000aa8:	e753      	b.n	8000952 <__aeabi_fadd+0x152>
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	4660      	mov	r0, ip
 8000aae:	03c9      	lsls	r1, r1, #15
 8000ab0:	4208      	tst	r0, r1
 8000ab2:	d003      	beq.n	8000abc <__aeabi_fadd+0x2bc>
 8000ab4:	4640      	mov	r0, r8
 8000ab6:	4208      	tst	r0, r1
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fadd+0x2bc>
 8000aba:	001d      	movs	r5, r3
 8000abc:	2101      	movs	r1, #1
 8000abe:	4011      	ands	r1, r2
 8000ac0:	e747      	b.n	8000952 <__aeabi_fadd+0x152>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fadd+0x2c8>
 8000ac6:	e6b9      	b.n	800083c <__aeabi_fadd+0x3c>
 8000ac8:	1aea      	subs	r2, r5, r3
 8000aca:	0150      	lsls	r0, r2, #5
 8000acc:	d525      	bpl.n	8000b1a <__aeabi_fadd+0x31a>
 8000ace:	2607      	movs	r6, #7
 8000ad0:	1b5d      	subs	r5, r3, r5
 8000ad2:	402e      	ands	r6, r5
 8000ad4:	4689      	mov	r9, r1
 8000ad6:	e723      	b.n	8000920 <__aeabi_fadd+0x120>
 8000ad8:	24ff      	movs	r4, #255	; 0xff
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fadd+0x2e0>
 8000ade:	e6ad      	b.n	800083c <__aeabi_fadd+0x3c>
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	4660      	mov	r0, ip
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	4210      	tst	r0, r2
 8000ae8:	d004      	beq.n	8000af4 <__aeabi_fadd+0x2f4>
 8000aea:	4640      	mov	r0, r8
 8000aec:	4210      	tst	r0, r2
 8000aee:	d101      	bne.n	8000af4 <__aeabi_fadd+0x2f4>
 8000af0:	001d      	movs	r5, r3
 8000af2:	4689      	mov	r9, r1
 8000af4:	2201      	movs	r2, #1
 8000af6:	464b      	mov	r3, r9
 8000af8:	24ff      	movs	r4, #255	; 0xff
 8000afa:	401a      	ands	r2, r3
 8000afc:	e69e      	b.n	800083c <__aeabi_fadd+0x3c>
 8000afe:	002b      	movs	r3, r5
 8000b00:	08dd      	lsrs	r5, r3, #3
 8000b02:	000a      	movs	r2, r1
 8000b04:	2400      	movs	r4, #0
 8000b06:	e69d      	b.n	8000844 <__aeabi_fadd+0x44>
 8000b08:	1c7a      	adds	r2, r7, #1
 8000b0a:	d0c6      	beq.n	8000a9a <__aeabi_fadd+0x29a>
 8000b0c:	43ff      	mvns	r7, r7
 8000b0e:	28ff      	cmp	r0, #255	; 0xff
 8000b10:	d1b9      	bne.n	8000a86 <__aeabi_fadd+0x286>
 8000b12:	001d      	movs	r5, r3
 8000b14:	e71d      	b.n	8000952 <__aeabi_fadd+0x152>
 8000b16:	2501      	movs	r5, #1
 8000b18:	e73f      	b.n	800099a <__aeabi_fadd+0x19a>
 8000b1a:	1e15      	subs	r5, r2, #0
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x320>
 8000b1e:	e744      	b.n	80009aa <__aeabi_fadd+0x1aa>
 8000b20:	2200      	movs	r2, #0
 8000b22:	2300      	movs	r3, #0
 8000b24:	e691      	b.n	800084a <__aeabi_fadd+0x4a>
 8000b26:	2501      	movs	r5, #1
 8000b28:	e7b7      	b.n	8000a9a <__aeabi_fadd+0x29a>
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	7dffffff 	.word	0x7dffffff
 8000b30:	fbffffff 	.word	0xfbffffff

08000b34 <__aeabi_fdiv>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	4657      	mov	r7, sl
 8000b38:	464e      	mov	r6, r9
 8000b3a:	4645      	mov	r5, r8
 8000b3c:	46de      	mov	lr, fp
 8000b3e:	0244      	lsls	r4, r0, #9
 8000b40:	b5e0      	push	{r5, r6, r7, lr}
 8000b42:	0046      	lsls	r6, r0, #1
 8000b44:	4688      	mov	r8, r1
 8000b46:	0a64      	lsrs	r4, r4, #9
 8000b48:	0e36      	lsrs	r6, r6, #24
 8000b4a:	0fc7      	lsrs	r7, r0, #31
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d063      	beq.n	8000c18 <__aeabi_fdiv+0xe4>
 8000b50:	2eff      	cmp	r6, #255	; 0xff
 8000b52:	d024      	beq.n	8000b9e <__aeabi_fdiv+0x6a>
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	00e4      	lsls	r4, r4, #3
 8000b58:	04db      	lsls	r3, r3, #19
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	4699      	mov	r9, r3
 8000b60:	469b      	mov	fp, r3
 8000b62:	3e7f      	subs	r6, #127	; 0x7f
 8000b64:	4643      	mov	r3, r8
 8000b66:	4642      	mov	r2, r8
 8000b68:	025d      	lsls	r5, r3, #9
 8000b6a:	0fd2      	lsrs	r2, r2, #31
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	0a6d      	lsrs	r5, r5, #9
 8000b70:	0e1b      	lsrs	r3, r3, #24
 8000b72:	4690      	mov	r8, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	d065      	beq.n	8000c44 <__aeabi_fdiv+0x110>
 8000b78:	2bff      	cmp	r3, #255	; 0xff
 8000b7a:	d055      	beq.n	8000c28 <__aeabi_fdiv+0xf4>
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	2100      	movs	r1, #0
 8000b80:	00ed      	lsls	r5, r5, #3
 8000b82:	04d2      	lsls	r2, r2, #19
 8000b84:	3b7f      	subs	r3, #127	; 0x7f
 8000b86:	4315      	orrs	r5, r2
 8000b88:	1af6      	subs	r6, r6, r3
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	407b      	eors	r3, r7
 8000b90:	2a0f      	cmp	r2, #15
 8000b92:	d900      	bls.n	8000b96 <__aeabi_fdiv+0x62>
 8000b94:	e08d      	b.n	8000cb2 <__aeabi_fdiv+0x17e>
 8000b96:	486d      	ldr	r0, [pc, #436]	; (8000d4c <__aeabi_fdiv+0x218>)
 8000b98:	0092      	lsls	r2, r2, #2
 8000b9a:	5882      	ldr	r2, [r0, r2]
 8000b9c:	4697      	mov	pc, r2
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d154      	bne.n	8000c4c <__aeabi_fdiv+0x118>
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	4699      	mov	r9, r3
 8000ba6:	3b06      	subs	r3, #6
 8000ba8:	26ff      	movs	r6, #255	; 0xff
 8000baa:	469b      	mov	fp, r3
 8000bac:	e7da      	b.n	8000b64 <__aeabi_fdiv+0x30>
 8000bae:	2500      	movs	r5, #0
 8000bb0:	4653      	mov	r3, sl
 8000bb2:	2902      	cmp	r1, #2
 8000bb4:	d01b      	beq.n	8000bee <__aeabi_fdiv+0xba>
 8000bb6:	2903      	cmp	r1, #3
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fdiv+0x88>
 8000bba:	e0bf      	b.n	8000d3c <__aeabi_fdiv+0x208>
 8000bbc:	2901      	cmp	r1, #1
 8000bbe:	d028      	beq.n	8000c12 <__aeabi_fdiv+0xde>
 8000bc0:	0030      	movs	r0, r6
 8000bc2:	307f      	adds	r0, #127	; 0x7f
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	dd20      	ble.n	8000c0a <__aeabi_fdiv+0xd6>
 8000bc8:	076a      	lsls	r2, r5, #29
 8000bca:	d004      	beq.n	8000bd6 <__aeabi_fdiv+0xa2>
 8000bcc:	220f      	movs	r2, #15
 8000bce:	402a      	ands	r2, r5
 8000bd0:	2a04      	cmp	r2, #4
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_fdiv+0xa2>
 8000bd4:	3504      	adds	r5, #4
 8000bd6:	012a      	lsls	r2, r5, #4
 8000bd8:	d503      	bpl.n	8000be2 <__aeabi_fdiv+0xae>
 8000bda:	0030      	movs	r0, r6
 8000bdc:	4a5c      	ldr	r2, [pc, #368]	; (8000d50 <__aeabi_fdiv+0x21c>)
 8000bde:	3080      	adds	r0, #128	; 0x80
 8000be0:	4015      	ands	r5, r2
 8000be2:	28fe      	cmp	r0, #254	; 0xfe
 8000be4:	dc03      	bgt.n	8000bee <__aeabi_fdiv+0xba>
 8000be6:	01ac      	lsls	r4, r5, #6
 8000be8:	0a64      	lsrs	r4, r4, #9
 8000bea:	b2c2      	uxtb	r2, r0
 8000bec:	e001      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000bee:	22ff      	movs	r2, #255	; 0xff
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	0264      	lsls	r4, r4, #9
 8000bf4:	05d2      	lsls	r2, r2, #23
 8000bf6:	0a60      	lsrs	r0, r4, #9
 8000bf8:	07db      	lsls	r3, r3, #31
 8000bfa:	4310      	orrs	r0, r2
 8000bfc:	4318      	orrs	r0, r3
 8000bfe:	bc3c      	pop	{r2, r3, r4, r5}
 8000c00:	4690      	mov	r8, r2
 8000c02:	4699      	mov	r9, r3
 8000c04:	46a2      	mov	sl, r4
 8000c06:	46ab      	mov	fp, r5
 8000c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	1a10      	subs	r0, r2, r0
 8000c0e:	281b      	cmp	r0, #27
 8000c10:	dd7c      	ble.n	8000d0c <__aeabi_fdiv+0x1d8>
 8000c12:	2200      	movs	r2, #0
 8000c14:	2400      	movs	r4, #0
 8000c16:	e7ec      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	d11d      	bne.n	8000c58 <__aeabi_fdiv+0x124>
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	4699      	mov	r9, r3
 8000c20:	3b03      	subs	r3, #3
 8000c22:	2600      	movs	r6, #0
 8000c24:	469b      	mov	fp, r3
 8000c26:	e79d      	b.n	8000b64 <__aeabi_fdiv+0x30>
 8000c28:	3eff      	subs	r6, #255	; 0xff
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d120      	bne.n	8000c70 <__aeabi_fdiv+0x13c>
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4643      	mov	r3, r8
 8000c32:	464a      	mov	r2, r9
 8000c34:	407b      	eors	r3, r7
 8000c36:	430a      	orrs	r2, r1
 8000c38:	2a0f      	cmp	r2, #15
 8000c3a:	d8d8      	bhi.n	8000bee <__aeabi_fdiv+0xba>
 8000c3c:	4845      	ldr	r0, [pc, #276]	; (8000d54 <__aeabi_fdiv+0x220>)
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	5882      	ldr	r2, [r0, r2]
 8000c42:	4697      	mov	pc, r2
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d119      	bne.n	8000c7c <__aeabi_fdiv+0x148>
 8000c48:	2101      	movs	r1, #1
 8000c4a:	e7f1      	b.n	8000c30 <__aeabi_fdiv+0xfc>
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	4699      	mov	r9, r3
 8000c50:	3b09      	subs	r3, #9
 8000c52:	26ff      	movs	r6, #255	; 0xff
 8000c54:	469b      	mov	fp, r3
 8000c56:	e785      	b.n	8000b64 <__aeabi_fdiv+0x30>
 8000c58:	0020      	movs	r0, r4
 8000c5a:	f002 f953 	bl	8002f04 <__clzsi2>
 8000c5e:	2676      	movs	r6, #118	; 0x76
 8000c60:	1f43      	subs	r3, r0, #5
 8000c62:	409c      	lsls	r4, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	4276      	negs	r6, r6
 8000c68:	1a36      	subs	r6, r6, r0
 8000c6a:	4699      	mov	r9, r3
 8000c6c:	469b      	mov	fp, r3
 8000c6e:	e779      	b.n	8000b64 <__aeabi_fdiv+0x30>
 8000c70:	464a      	mov	r2, r9
 8000c72:	2303      	movs	r3, #3
 8000c74:	431a      	orrs	r2, r3
 8000c76:	4691      	mov	r9, r2
 8000c78:	2103      	movs	r1, #3
 8000c7a:	e786      	b.n	8000b8a <__aeabi_fdiv+0x56>
 8000c7c:	0028      	movs	r0, r5
 8000c7e:	f002 f941 	bl	8002f04 <__clzsi2>
 8000c82:	1f43      	subs	r3, r0, #5
 8000c84:	1836      	adds	r6, r6, r0
 8000c86:	409d      	lsls	r5, r3
 8000c88:	3676      	adds	r6, #118	; 0x76
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e77d      	b.n	8000b8a <__aeabi_fdiv+0x56>
 8000c8e:	2480      	movs	r4, #128	; 0x80
 8000c90:	2300      	movs	r3, #0
 8000c92:	03e4      	lsls	r4, r4, #15
 8000c94:	22ff      	movs	r2, #255	; 0xff
 8000c96:	e7ac      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000c98:	2500      	movs	r5, #0
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	03db      	lsls	r3, r3, #15
 8000c9e:	421c      	tst	r4, r3
 8000ca0:	d028      	beq.n	8000cf4 <__aeabi_fdiv+0x1c0>
 8000ca2:	421d      	tst	r5, r3
 8000ca4:	d126      	bne.n	8000cf4 <__aeabi_fdiv+0x1c0>
 8000ca6:	432b      	orrs	r3, r5
 8000ca8:	025c      	lsls	r4, r3, #9
 8000caa:	0a64      	lsrs	r4, r4, #9
 8000cac:	4643      	mov	r3, r8
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	e79f      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000cb2:	0162      	lsls	r2, r4, #5
 8000cb4:	016c      	lsls	r4, r5, #5
 8000cb6:	42a2      	cmp	r2, r4
 8000cb8:	d224      	bcs.n	8000d04 <__aeabi_fdiv+0x1d0>
 8000cba:	211b      	movs	r1, #27
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	3e01      	subs	r6, #1
 8000cc0:	2701      	movs	r7, #1
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	006d      	lsls	r5, r5, #1
 8000cc6:	0052      	lsls	r2, r2, #1
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	db01      	blt.n	8000cd0 <__aeabi_fdiv+0x19c>
 8000ccc:	4294      	cmp	r4, r2
 8000cce:	d801      	bhi.n	8000cd4 <__aeabi_fdiv+0x1a0>
 8000cd0:	1b12      	subs	r2, r2, r4
 8000cd2:	433d      	orrs	r5, r7
 8000cd4:	3901      	subs	r1, #1
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d1f3      	bne.n	8000cc2 <__aeabi_fdiv+0x18e>
 8000cda:	0014      	movs	r4, r2
 8000cdc:	1e62      	subs	r2, r4, #1
 8000cde:	4194      	sbcs	r4, r2
 8000ce0:	4325      	orrs	r5, r4
 8000ce2:	e76d      	b.n	8000bc0 <__aeabi_fdiv+0x8c>
 8000ce4:	46ba      	mov	sl, r7
 8000ce6:	4659      	mov	r1, fp
 8000ce8:	0025      	movs	r5, r4
 8000cea:	4653      	mov	r3, sl
 8000cec:	2902      	cmp	r1, #2
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fdiv+0x1be>
 8000cf0:	e761      	b.n	8000bb6 <__aeabi_fdiv+0x82>
 8000cf2:	e77c      	b.n	8000bee <__aeabi_fdiv+0xba>
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	03db      	lsls	r3, r3, #15
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	0264      	lsls	r4, r4, #9
 8000cfc:	0a64      	lsrs	r4, r4, #9
 8000cfe:	003b      	movs	r3, r7
 8000d00:	22ff      	movs	r2, #255	; 0xff
 8000d02:	e776      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000d04:	1b12      	subs	r2, r2, r4
 8000d06:	211a      	movs	r1, #26
 8000d08:	2501      	movs	r5, #1
 8000d0a:	e7d9      	b.n	8000cc0 <__aeabi_fdiv+0x18c>
 8000d0c:	369e      	adds	r6, #158	; 0x9e
 8000d0e:	002a      	movs	r2, r5
 8000d10:	40b5      	lsls	r5, r6
 8000d12:	002c      	movs	r4, r5
 8000d14:	40c2      	lsrs	r2, r0
 8000d16:	1e65      	subs	r5, r4, #1
 8000d18:	41ac      	sbcs	r4, r5
 8000d1a:	4314      	orrs	r4, r2
 8000d1c:	0762      	lsls	r2, r4, #29
 8000d1e:	d004      	beq.n	8000d2a <__aeabi_fdiv+0x1f6>
 8000d20:	220f      	movs	r2, #15
 8000d22:	4022      	ands	r2, r4
 8000d24:	2a04      	cmp	r2, #4
 8000d26:	d000      	beq.n	8000d2a <__aeabi_fdiv+0x1f6>
 8000d28:	3404      	adds	r4, #4
 8000d2a:	0162      	lsls	r2, r4, #5
 8000d2c:	d403      	bmi.n	8000d36 <__aeabi_fdiv+0x202>
 8000d2e:	01a4      	lsls	r4, r4, #6
 8000d30:	0a64      	lsrs	r4, r4, #9
 8000d32:	2200      	movs	r2, #0
 8000d34:	e75d      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000d36:	2201      	movs	r2, #1
 8000d38:	2400      	movs	r4, #0
 8000d3a:	e75a      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000d3c:	2480      	movs	r4, #128	; 0x80
 8000d3e:	03e4      	lsls	r4, r4, #15
 8000d40:	432c      	orrs	r4, r5
 8000d42:	0264      	lsls	r4, r4, #9
 8000d44:	0a64      	lsrs	r4, r4, #9
 8000d46:	22ff      	movs	r2, #255	; 0xff
 8000d48:	e753      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	08018b8c 	.word	0x08018b8c
 8000d50:	f7ffffff 	.word	0xf7ffffff
 8000d54:	08018bcc 	.word	0x08018bcc

08000d58 <__eqsf2>:
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	0042      	lsls	r2, r0, #1
 8000d5c:	024e      	lsls	r6, r1, #9
 8000d5e:	004c      	lsls	r4, r1, #1
 8000d60:	0245      	lsls	r5, r0, #9
 8000d62:	0a6d      	lsrs	r5, r5, #9
 8000d64:	0e12      	lsrs	r2, r2, #24
 8000d66:	0fc3      	lsrs	r3, r0, #31
 8000d68:	0a76      	lsrs	r6, r6, #9
 8000d6a:	0e24      	lsrs	r4, r4, #24
 8000d6c:	0fc9      	lsrs	r1, r1, #31
 8000d6e:	2aff      	cmp	r2, #255	; 0xff
 8000d70:	d00f      	beq.n	8000d92 <__eqsf2+0x3a>
 8000d72:	2cff      	cmp	r4, #255	; 0xff
 8000d74:	d011      	beq.n	8000d9a <__eqsf2+0x42>
 8000d76:	2001      	movs	r0, #1
 8000d78:	42a2      	cmp	r2, r4
 8000d7a:	d000      	beq.n	8000d7e <__eqsf2+0x26>
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	42b5      	cmp	r5, r6
 8000d80:	d1fc      	bne.n	8000d7c <__eqsf2+0x24>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d00d      	beq.n	8000da2 <__eqsf2+0x4a>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d1f8      	bne.n	8000d7c <__eqsf2+0x24>
 8000d8a:	0028      	movs	r0, r5
 8000d8c:	1e45      	subs	r5, r0, #1
 8000d8e:	41a8      	sbcs	r0, r5
 8000d90:	e7f4      	b.n	8000d7c <__eqsf2+0x24>
 8000d92:	2001      	movs	r0, #1
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	d1f1      	bne.n	8000d7c <__eqsf2+0x24>
 8000d98:	e7eb      	b.n	8000d72 <__eqsf2+0x1a>
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d1ed      	bne.n	8000d7c <__eqsf2+0x24>
 8000da0:	e7e9      	b.n	8000d76 <__eqsf2+0x1e>
 8000da2:	2000      	movs	r0, #0
 8000da4:	e7ea      	b.n	8000d7c <__eqsf2+0x24>
 8000da6:	46c0      	nop			; (mov r8, r8)

08000da8 <__gesf2>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	004a      	lsls	r2, r1, #1
 8000dac:	024e      	lsls	r6, r1, #9
 8000dae:	0245      	lsls	r5, r0, #9
 8000db0:	0044      	lsls	r4, r0, #1
 8000db2:	0a6d      	lsrs	r5, r5, #9
 8000db4:	0e24      	lsrs	r4, r4, #24
 8000db6:	0fc3      	lsrs	r3, r0, #31
 8000db8:	0a76      	lsrs	r6, r6, #9
 8000dba:	0e12      	lsrs	r2, r2, #24
 8000dbc:	0fc9      	lsrs	r1, r1, #31
 8000dbe:	2cff      	cmp	r4, #255	; 0xff
 8000dc0:	d015      	beq.n	8000dee <__gesf2+0x46>
 8000dc2:	2aff      	cmp	r2, #255	; 0xff
 8000dc4:	d00e      	beq.n	8000de4 <__gesf2+0x3c>
 8000dc6:	2c00      	cmp	r4, #0
 8000dc8:	d115      	bne.n	8000df6 <__gesf2+0x4e>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d101      	bne.n	8000dd2 <__gesf2+0x2a>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d01c      	beq.n	8000e0c <__gesf2+0x64>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d014      	beq.n	8000e00 <__gesf2+0x58>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d027      	beq.n	8000e2a <__gesf2+0x82>
 8000dda:	2002      	movs	r0, #2
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	4018      	ands	r0, r3
 8000de0:	3801      	subs	r0, #1
 8000de2:	bd70      	pop	{r4, r5, r6, pc}
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	d0ee      	beq.n	8000dc6 <__gesf2+0x1e>
 8000de8:	2002      	movs	r0, #2
 8000dea:	4240      	negs	r0, r0
 8000dec:	e7f9      	b.n	8000de2 <__gesf2+0x3a>
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d1fa      	bne.n	8000de8 <__gesf2+0x40>
 8000df2:	2aff      	cmp	r2, #255	; 0xff
 8000df4:	d00e      	beq.n	8000e14 <__gesf2+0x6c>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	d10e      	bne.n	8000e18 <__gesf2+0x70>
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d0ed      	beq.n	8000dda <__gesf2+0x32>
 8000dfe:	e00b      	b.n	8000e18 <__gesf2+0x70>
 8000e00:	2301      	movs	r3, #1
 8000e02:	3901      	subs	r1, #1
 8000e04:	4399      	bics	r1, r3
 8000e06:	0008      	movs	r0, r1
 8000e08:	3001      	adds	r0, #1
 8000e0a:	e7ea      	b.n	8000de2 <__gesf2+0x3a>
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	d0e7      	beq.n	8000de2 <__gesf2+0x3a>
 8000e12:	e7e2      	b.n	8000dda <__gesf2+0x32>
 8000e14:	2e00      	cmp	r6, #0
 8000e16:	d1e7      	bne.n	8000de8 <__gesf2+0x40>
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d1de      	bne.n	8000dda <__gesf2+0x32>
 8000e1c:	4294      	cmp	r4, r2
 8000e1e:	dd05      	ble.n	8000e2c <__gesf2+0x84>
 8000e20:	2102      	movs	r1, #2
 8000e22:	1e58      	subs	r0, r3, #1
 8000e24:	4008      	ands	r0, r1
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7db      	b.n	8000de2 <__gesf2+0x3a>
 8000e2a:	2400      	movs	r4, #0
 8000e2c:	42a2      	cmp	r2, r4
 8000e2e:	dc04      	bgt.n	8000e3a <__gesf2+0x92>
 8000e30:	42b5      	cmp	r5, r6
 8000e32:	d8d2      	bhi.n	8000dda <__gesf2+0x32>
 8000e34:	2000      	movs	r0, #0
 8000e36:	42b5      	cmp	r5, r6
 8000e38:	d2d3      	bcs.n	8000de2 <__gesf2+0x3a>
 8000e3a:	1e58      	subs	r0, r3, #1
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	4398      	bics	r0, r3
 8000e40:	3001      	adds	r0, #1
 8000e42:	e7ce      	b.n	8000de2 <__gesf2+0x3a>

08000e44 <__lesf2>:
 8000e44:	b530      	push	{r4, r5, lr}
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0244      	lsls	r4, r0, #9
 8000e4a:	024d      	lsls	r5, r1, #9
 8000e4c:	0fc3      	lsrs	r3, r0, #31
 8000e4e:	0048      	lsls	r0, r1, #1
 8000e50:	0a64      	lsrs	r4, r4, #9
 8000e52:	0e12      	lsrs	r2, r2, #24
 8000e54:	0a6d      	lsrs	r5, r5, #9
 8000e56:	0e00      	lsrs	r0, r0, #24
 8000e58:	0fc9      	lsrs	r1, r1, #31
 8000e5a:	2aff      	cmp	r2, #255	; 0xff
 8000e5c:	d012      	beq.n	8000e84 <__lesf2+0x40>
 8000e5e:	28ff      	cmp	r0, #255	; 0xff
 8000e60:	d00c      	beq.n	8000e7c <__lesf2+0x38>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d112      	bne.n	8000e8c <__lesf2+0x48>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d119      	bne.n	8000e9e <__lesf2+0x5a>
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	d117      	bne.n	8000e9e <__lesf2+0x5a>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d02b      	beq.n	8000eca <__lesf2+0x86>
 8000e72:	2002      	movs	r0, #2
 8000e74:	3b01      	subs	r3, #1
 8000e76:	4018      	ands	r0, r3
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e026      	b.n	8000eca <__lesf2+0x86>
 8000e7c:	2d00      	cmp	r5, #0
 8000e7e:	d0f0      	beq.n	8000e62 <__lesf2+0x1e>
 8000e80:	2002      	movs	r0, #2
 8000e82:	e022      	b.n	8000eca <__lesf2+0x86>
 8000e84:	2c00      	cmp	r4, #0
 8000e86:	d1fb      	bne.n	8000e80 <__lesf2+0x3c>
 8000e88:	28ff      	cmp	r0, #255	; 0xff
 8000e8a:	d01f      	beq.n	8000ecc <__lesf2+0x88>
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	d11f      	bne.n	8000ed0 <__lesf2+0x8c>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d11d      	bne.n	8000ed0 <__lesf2+0x8c>
 8000e94:	2002      	movs	r0, #2
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4018      	ands	r0, r3
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e015      	b.n	8000eca <__lesf2+0x86>
 8000e9e:	2c00      	cmp	r4, #0
 8000ea0:	d00e      	beq.n	8000ec0 <__lesf2+0x7c>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d1e5      	bne.n	8000e72 <__lesf2+0x2e>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4290      	cmp	r0, r2
 8000eaa:	dc04      	bgt.n	8000eb6 <__lesf2+0x72>
 8000eac:	42ac      	cmp	r4, r5
 8000eae:	d8e0      	bhi.n	8000e72 <__lesf2+0x2e>
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	d209      	bcs.n	8000eca <__lesf2+0x86>
 8000eb6:	1e58      	subs	r0, r3, #1
 8000eb8:	2301      	movs	r3, #1
 8000eba:	4398      	bics	r0, r3
 8000ebc:	3001      	adds	r0, #1
 8000ebe:	e004      	b.n	8000eca <__lesf2+0x86>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	3901      	subs	r1, #1
 8000ec4:	4399      	bics	r1, r3
 8000ec6:	0008      	movs	r0, r1
 8000ec8:	3001      	adds	r0, #1
 8000eca:	bd30      	pop	{r4, r5, pc}
 8000ecc:	2d00      	cmp	r5, #0
 8000ece:	d1d7      	bne.n	8000e80 <__lesf2+0x3c>
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d1ce      	bne.n	8000e72 <__lesf2+0x2e>
 8000ed4:	4282      	cmp	r2, r0
 8000ed6:	dde7      	ble.n	8000ea8 <__lesf2+0x64>
 8000ed8:	2102      	movs	r1, #2
 8000eda:	1e58      	subs	r0, r3, #1
 8000edc:	4008      	ands	r0, r1
 8000ede:	3801      	subs	r0, #1
 8000ee0:	e7f3      	b.n	8000eca <__lesf2+0x86>
 8000ee2:	46c0      	nop			; (mov r8, r8)

08000ee4 <__aeabi_fmul>:
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	464e      	mov	r6, r9
 8000ee8:	4657      	mov	r7, sl
 8000eea:	4645      	mov	r5, r8
 8000eec:	46de      	mov	lr, fp
 8000eee:	b5e0      	push	{r5, r6, r7, lr}
 8000ef0:	0243      	lsls	r3, r0, #9
 8000ef2:	0a5b      	lsrs	r3, r3, #9
 8000ef4:	0045      	lsls	r5, r0, #1
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	1c0f      	adds	r7, r1, #0
 8000efa:	4699      	mov	r9, r3
 8000efc:	0e2d      	lsrs	r5, r5, #24
 8000efe:	0fc6      	lsrs	r6, r0, #31
 8000f00:	2d00      	cmp	r5, #0
 8000f02:	d057      	beq.n	8000fb4 <__aeabi_fmul+0xd0>
 8000f04:	2dff      	cmp	r5, #255	; 0xff
 8000f06:	d024      	beq.n	8000f52 <__aeabi_fmul+0x6e>
 8000f08:	2080      	movs	r0, #128	; 0x80
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	04c0      	lsls	r0, r0, #19
 8000f0e:	4318      	orrs	r0, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	4681      	mov	r9, r0
 8000f14:	469a      	mov	sl, r3
 8000f16:	469b      	mov	fp, r3
 8000f18:	3d7f      	subs	r5, #127	; 0x7f
 8000f1a:	027c      	lsls	r4, r7, #9
 8000f1c:	007a      	lsls	r2, r7, #1
 8000f1e:	0ffb      	lsrs	r3, r7, #31
 8000f20:	0a64      	lsrs	r4, r4, #9
 8000f22:	0e12      	lsrs	r2, r2, #24
 8000f24:	4698      	mov	r8, r3
 8000f26:	d023      	beq.n	8000f70 <__aeabi_fmul+0x8c>
 8000f28:	2aff      	cmp	r2, #255	; 0xff
 8000f2a:	d04b      	beq.n	8000fc4 <__aeabi_fmul+0xe0>
 8000f2c:	00e3      	lsls	r3, r4, #3
 8000f2e:	2480      	movs	r4, #128	; 0x80
 8000f30:	2000      	movs	r0, #0
 8000f32:	04e4      	lsls	r4, r4, #19
 8000f34:	3a7f      	subs	r2, #127	; 0x7f
 8000f36:	431c      	orrs	r4, r3
 8000f38:	18ad      	adds	r5, r5, r2
 8000f3a:	1c6b      	adds	r3, r5, #1
 8000f3c:	4647      	mov	r7, r8
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	4653      	mov	r3, sl
 8000f42:	4077      	eors	r7, r6
 8000f44:	003a      	movs	r2, r7
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d848      	bhi.n	8000fdc <__aeabi_fmul+0xf8>
 8000f4a:	497d      	ldr	r1, [pc, #500]	; (8001140 <__aeabi_fmul+0x25c>)
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	58cb      	ldr	r3, [r1, r3]
 8000f50:	469f      	mov	pc, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d000      	beq.n	8000f58 <__aeabi_fmul+0x74>
 8000f56:	e085      	b.n	8001064 <__aeabi_fmul+0x180>
 8000f58:	3308      	adds	r3, #8
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	3b06      	subs	r3, #6
 8000f5e:	469b      	mov	fp, r3
 8000f60:	027c      	lsls	r4, r7, #9
 8000f62:	007a      	lsls	r2, r7, #1
 8000f64:	0ffb      	lsrs	r3, r7, #31
 8000f66:	25ff      	movs	r5, #255	; 0xff
 8000f68:	0a64      	lsrs	r4, r4, #9
 8000f6a:	0e12      	lsrs	r2, r2, #24
 8000f6c:	4698      	mov	r8, r3
 8000f6e:	d1db      	bne.n	8000f28 <__aeabi_fmul+0x44>
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d000      	beq.n	8000f76 <__aeabi_fmul+0x92>
 8000f74:	e090      	b.n	8001098 <__aeabi_fmul+0x1b4>
 8000f76:	4652      	mov	r2, sl
 8000f78:	2301      	movs	r3, #1
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	4692      	mov	sl, r2
 8000f7e:	2001      	movs	r0, #1
 8000f80:	e7db      	b.n	8000f3a <__aeabi_fmul+0x56>
 8000f82:	464c      	mov	r4, r9
 8000f84:	4658      	mov	r0, fp
 8000f86:	0017      	movs	r7, r2
 8000f88:	2802      	cmp	r0, #2
 8000f8a:	d024      	beq.n	8000fd6 <__aeabi_fmul+0xf2>
 8000f8c:	2803      	cmp	r0, #3
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fmul+0xae>
 8000f90:	e0cf      	b.n	8001132 <__aeabi_fmul+0x24e>
 8000f92:	2200      	movs	r2, #0
 8000f94:	2300      	movs	r3, #0
 8000f96:	2801      	cmp	r0, #1
 8000f98:	d14d      	bne.n	8001036 <__aeabi_fmul+0x152>
 8000f9a:	0258      	lsls	r0, r3, #9
 8000f9c:	05d2      	lsls	r2, r2, #23
 8000f9e:	0a40      	lsrs	r0, r0, #9
 8000fa0:	07ff      	lsls	r7, r7, #31
 8000fa2:	4310      	orrs	r0, r2
 8000fa4:	4338      	orrs	r0, r7
 8000fa6:	b003      	add	sp, #12
 8000fa8:	bc3c      	pop	{r2, r3, r4, r5}
 8000faa:	4690      	mov	r8, r2
 8000fac:	4699      	mov	r9, r3
 8000fae:	46a2      	mov	sl, r4
 8000fb0:	46ab      	mov	fp, r5
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d15b      	bne.n	8001070 <__aeabi_fmul+0x18c>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	469a      	mov	sl, r3
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	2500      	movs	r5, #0
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	e7aa      	b.n	8000f1a <__aeabi_fmul+0x36>
 8000fc4:	35ff      	adds	r5, #255	; 0xff
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d160      	bne.n	800108c <__aeabi_fmul+0x1a8>
 8000fca:	4652      	mov	r2, sl
 8000fcc:	2302      	movs	r3, #2
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	4692      	mov	sl, r2
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	e7b1      	b.n	8000f3a <__aeabi_fmul+0x56>
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e7de      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8000fdc:	464b      	mov	r3, r9
 8000fde:	0c1b      	lsrs	r3, r3, #16
 8000fe0:	469c      	mov	ip, r3
 8000fe2:	464b      	mov	r3, r9
 8000fe4:	0426      	lsls	r6, r4, #16
 8000fe6:	0c36      	lsrs	r6, r6, #16
 8000fe8:	0418      	lsls	r0, r3, #16
 8000fea:	4661      	mov	r1, ip
 8000fec:	0033      	movs	r3, r6
 8000fee:	0c22      	lsrs	r2, r4, #16
 8000ff0:	4664      	mov	r4, ip
 8000ff2:	0c00      	lsrs	r0, r0, #16
 8000ff4:	4343      	muls	r3, r0
 8000ff6:	434e      	muls	r6, r1
 8000ff8:	4350      	muls	r0, r2
 8000ffa:	4354      	muls	r4, r2
 8000ffc:	1980      	adds	r0, r0, r6
 8000ffe:	0c1a      	lsrs	r2, r3, #16
 8001000:	1812      	adds	r2, r2, r0
 8001002:	4296      	cmp	r6, r2
 8001004:	d903      	bls.n	800100e <__aeabi_fmul+0x12a>
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	0249      	lsls	r1, r1, #9
 800100a:	468c      	mov	ip, r1
 800100c:	4464      	add	r4, ip
 800100e:	041b      	lsls	r3, r3, #16
 8001010:	0c1b      	lsrs	r3, r3, #16
 8001012:	0410      	lsls	r0, r2, #16
 8001014:	18c0      	adds	r0, r0, r3
 8001016:	0183      	lsls	r3, r0, #6
 8001018:	1e5e      	subs	r6, r3, #1
 800101a:	41b3      	sbcs	r3, r6
 800101c:	0e80      	lsrs	r0, r0, #26
 800101e:	4318      	orrs	r0, r3
 8001020:	0c13      	lsrs	r3, r2, #16
 8001022:	191b      	adds	r3, r3, r4
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	4303      	orrs	r3, r0
 8001028:	001c      	movs	r4, r3
 800102a:	0123      	lsls	r3, r4, #4
 800102c:	d579      	bpl.n	8001122 <__aeabi_fmul+0x23e>
 800102e:	2301      	movs	r3, #1
 8001030:	0862      	lsrs	r2, r4, #1
 8001032:	401c      	ands	r4, r3
 8001034:	4314      	orrs	r4, r2
 8001036:	9a01      	ldr	r2, [sp, #4]
 8001038:	327f      	adds	r2, #127	; 0x7f
 800103a:	2a00      	cmp	r2, #0
 800103c:	dd4d      	ble.n	80010da <__aeabi_fmul+0x1f6>
 800103e:	0763      	lsls	r3, r4, #29
 8001040:	d004      	beq.n	800104c <__aeabi_fmul+0x168>
 8001042:	230f      	movs	r3, #15
 8001044:	4023      	ands	r3, r4
 8001046:	2b04      	cmp	r3, #4
 8001048:	d000      	beq.n	800104c <__aeabi_fmul+0x168>
 800104a:	3404      	adds	r4, #4
 800104c:	0123      	lsls	r3, r4, #4
 800104e:	d503      	bpl.n	8001058 <__aeabi_fmul+0x174>
 8001050:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <__aeabi_fmul+0x260>)
 8001052:	9a01      	ldr	r2, [sp, #4]
 8001054:	401c      	ands	r4, r3
 8001056:	3280      	adds	r2, #128	; 0x80
 8001058:	2afe      	cmp	r2, #254	; 0xfe
 800105a:	dcbc      	bgt.n	8000fd6 <__aeabi_fmul+0xf2>
 800105c:	01a3      	lsls	r3, r4, #6
 800105e:	0a5b      	lsrs	r3, r3, #9
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	e79a      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8001064:	230c      	movs	r3, #12
 8001066:	469a      	mov	sl, r3
 8001068:	3b09      	subs	r3, #9
 800106a:	25ff      	movs	r5, #255	; 0xff
 800106c:	469b      	mov	fp, r3
 800106e:	e754      	b.n	8000f1a <__aeabi_fmul+0x36>
 8001070:	0018      	movs	r0, r3
 8001072:	f001 ff47 	bl	8002f04 <__clzsi2>
 8001076:	464a      	mov	r2, r9
 8001078:	1f43      	subs	r3, r0, #5
 800107a:	2576      	movs	r5, #118	; 0x76
 800107c:	409a      	lsls	r2, r3
 800107e:	2300      	movs	r3, #0
 8001080:	426d      	negs	r5, r5
 8001082:	4691      	mov	r9, r2
 8001084:	1a2d      	subs	r5, r5, r0
 8001086:	469a      	mov	sl, r3
 8001088:	469b      	mov	fp, r3
 800108a:	e746      	b.n	8000f1a <__aeabi_fmul+0x36>
 800108c:	4652      	mov	r2, sl
 800108e:	2303      	movs	r3, #3
 8001090:	431a      	orrs	r2, r3
 8001092:	4692      	mov	sl, r2
 8001094:	2003      	movs	r0, #3
 8001096:	e750      	b.n	8000f3a <__aeabi_fmul+0x56>
 8001098:	0020      	movs	r0, r4
 800109a:	f001 ff33 	bl	8002f04 <__clzsi2>
 800109e:	1f43      	subs	r3, r0, #5
 80010a0:	1a2d      	subs	r5, r5, r0
 80010a2:	409c      	lsls	r4, r3
 80010a4:	3d76      	subs	r5, #118	; 0x76
 80010a6:	2000      	movs	r0, #0
 80010a8:	e747      	b.n	8000f3a <__aeabi_fmul+0x56>
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	2700      	movs	r7, #0
 80010ae:	03db      	lsls	r3, r3, #15
 80010b0:	22ff      	movs	r2, #255	; 0xff
 80010b2:	e772      	b.n	8000f9a <__aeabi_fmul+0xb6>
 80010b4:	4642      	mov	r2, r8
 80010b6:	e766      	b.n	8000f86 <__aeabi_fmul+0xa2>
 80010b8:	464c      	mov	r4, r9
 80010ba:	0032      	movs	r2, r6
 80010bc:	4658      	mov	r0, fp
 80010be:	e762      	b.n	8000f86 <__aeabi_fmul+0xa2>
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	464a      	mov	r2, r9
 80010c4:	03db      	lsls	r3, r3, #15
 80010c6:	421a      	tst	r2, r3
 80010c8:	d022      	beq.n	8001110 <__aeabi_fmul+0x22c>
 80010ca:	421c      	tst	r4, r3
 80010cc:	d120      	bne.n	8001110 <__aeabi_fmul+0x22c>
 80010ce:	4323      	orrs	r3, r4
 80010d0:	025b      	lsls	r3, r3, #9
 80010d2:	0a5b      	lsrs	r3, r3, #9
 80010d4:	4647      	mov	r7, r8
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	e75f      	b.n	8000f9a <__aeabi_fmul+0xb6>
 80010da:	2301      	movs	r3, #1
 80010dc:	1a9a      	subs	r2, r3, r2
 80010de:	2a1b      	cmp	r2, #27
 80010e0:	dc21      	bgt.n	8001126 <__aeabi_fmul+0x242>
 80010e2:	0023      	movs	r3, r4
 80010e4:	9901      	ldr	r1, [sp, #4]
 80010e6:	40d3      	lsrs	r3, r2
 80010e8:	319e      	adds	r1, #158	; 0x9e
 80010ea:	408c      	lsls	r4, r1
 80010ec:	001a      	movs	r2, r3
 80010ee:	0023      	movs	r3, r4
 80010f0:	1e5c      	subs	r4, r3, #1
 80010f2:	41a3      	sbcs	r3, r4
 80010f4:	4313      	orrs	r3, r2
 80010f6:	075a      	lsls	r2, r3, #29
 80010f8:	d004      	beq.n	8001104 <__aeabi_fmul+0x220>
 80010fa:	220f      	movs	r2, #15
 80010fc:	401a      	ands	r2, r3
 80010fe:	2a04      	cmp	r2, #4
 8001100:	d000      	beq.n	8001104 <__aeabi_fmul+0x220>
 8001102:	3304      	adds	r3, #4
 8001104:	015a      	lsls	r2, r3, #5
 8001106:	d411      	bmi.n	800112c <__aeabi_fmul+0x248>
 8001108:	019b      	lsls	r3, r3, #6
 800110a:	0a5b      	lsrs	r3, r3, #9
 800110c:	2200      	movs	r2, #0
 800110e:	e744      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	464a      	mov	r2, r9
 8001114:	03db      	lsls	r3, r3, #15
 8001116:	4313      	orrs	r3, r2
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	0a5b      	lsrs	r3, r3, #9
 800111c:	0037      	movs	r7, r6
 800111e:	22ff      	movs	r2, #255	; 0xff
 8001120:	e73b      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8001122:	9501      	str	r5, [sp, #4]
 8001124:	e787      	b.n	8001036 <__aeabi_fmul+0x152>
 8001126:	2200      	movs	r2, #0
 8001128:	2300      	movs	r3, #0
 800112a:	e736      	b.n	8000f9a <__aeabi_fmul+0xb6>
 800112c:	2201      	movs	r2, #1
 800112e:	2300      	movs	r3, #0
 8001130:	e733      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	03db      	lsls	r3, r3, #15
 8001136:	4323      	orrs	r3, r4
 8001138:	025b      	lsls	r3, r3, #9
 800113a:	0a5b      	lsrs	r3, r3, #9
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	e72c      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8001140:	08018c0c 	.word	0x08018c0c
 8001144:	f7ffffff 	.word	0xf7ffffff

08001148 <__aeabi_f2iz>:
 8001148:	0241      	lsls	r1, r0, #9
 800114a:	0042      	lsls	r2, r0, #1
 800114c:	0fc3      	lsrs	r3, r0, #31
 800114e:	0a49      	lsrs	r1, r1, #9
 8001150:	0e12      	lsrs	r2, r2, #24
 8001152:	2000      	movs	r0, #0
 8001154:	2a7e      	cmp	r2, #126	; 0x7e
 8001156:	d90d      	bls.n	8001174 <__aeabi_f2iz+0x2c>
 8001158:	2a9d      	cmp	r2, #157	; 0x9d
 800115a:	d80c      	bhi.n	8001176 <__aeabi_f2iz+0x2e>
 800115c:	2080      	movs	r0, #128	; 0x80
 800115e:	0400      	lsls	r0, r0, #16
 8001160:	4301      	orrs	r1, r0
 8001162:	2a95      	cmp	r2, #149	; 0x95
 8001164:	dc0a      	bgt.n	800117c <__aeabi_f2iz+0x34>
 8001166:	2096      	movs	r0, #150	; 0x96
 8001168:	1a82      	subs	r2, r0, r2
 800116a:	40d1      	lsrs	r1, r2
 800116c:	4248      	negs	r0, r1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d100      	bne.n	8001174 <__aeabi_f2iz+0x2c>
 8001172:	0008      	movs	r0, r1
 8001174:	4770      	bx	lr
 8001176:	4a03      	ldr	r2, [pc, #12]	; (8001184 <__aeabi_f2iz+0x3c>)
 8001178:	1898      	adds	r0, r3, r2
 800117a:	e7fb      	b.n	8001174 <__aeabi_f2iz+0x2c>
 800117c:	3a96      	subs	r2, #150	; 0x96
 800117e:	4091      	lsls	r1, r2
 8001180:	e7f4      	b.n	800116c <__aeabi_f2iz+0x24>
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	7fffffff 	.word	0x7fffffff

08001188 <__aeabi_i2f>:
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	2800      	cmp	r0, #0
 800118c:	d03d      	beq.n	800120a <__aeabi_i2f+0x82>
 800118e:	17c3      	asrs	r3, r0, #31
 8001190:	18c5      	adds	r5, r0, r3
 8001192:	405d      	eors	r5, r3
 8001194:	0fc4      	lsrs	r4, r0, #31
 8001196:	0028      	movs	r0, r5
 8001198:	f001 feb4 	bl	8002f04 <__clzsi2>
 800119c:	229e      	movs	r2, #158	; 0x9e
 800119e:	1a12      	subs	r2, r2, r0
 80011a0:	2a96      	cmp	r2, #150	; 0x96
 80011a2:	dc07      	bgt.n	80011b4 <__aeabi_i2f+0x2c>
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	2808      	cmp	r0, #8
 80011a8:	dd33      	ble.n	8001212 <__aeabi_i2f+0x8a>
 80011aa:	3808      	subs	r0, #8
 80011ac:	4085      	lsls	r5, r0
 80011ae:	0268      	lsls	r0, r5, #9
 80011b0:	0a40      	lsrs	r0, r0, #9
 80011b2:	e023      	b.n	80011fc <__aeabi_i2f+0x74>
 80011b4:	2a99      	cmp	r2, #153	; 0x99
 80011b6:	dd0b      	ble.n	80011d0 <__aeabi_i2f+0x48>
 80011b8:	2305      	movs	r3, #5
 80011ba:	0029      	movs	r1, r5
 80011bc:	1a1b      	subs	r3, r3, r0
 80011be:	40d9      	lsrs	r1, r3
 80011c0:	0003      	movs	r3, r0
 80011c2:	331b      	adds	r3, #27
 80011c4:	409d      	lsls	r5, r3
 80011c6:	002b      	movs	r3, r5
 80011c8:	1e5d      	subs	r5, r3, #1
 80011ca:	41ab      	sbcs	r3, r5
 80011cc:	4319      	orrs	r1, r3
 80011ce:	000d      	movs	r5, r1
 80011d0:	2805      	cmp	r0, #5
 80011d2:	dd01      	ble.n	80011d8 <__aeabi_i2f+0x50>
 80011d4:	1f43      	subs	r3, r0, #5
 80011d6:	409d      	lsls	r5, r3
 80011d8:	002b      	movs	r3, r5
 80011da:	490f      	ldr	r1, [pc, #60]	; (8001218 <__aeabi_i2f+0x90>)
 80011dc:	400b      	ands	r3, r1
 80011de:	076e      	lsls	r6, r5, #29
 80011e0:	d009      	beq.n	80011f6 <__aeabi_i2f+0x6e>
 80011e2:	260f      	movs	r6, #15
 80011e4:	4035      	ands	r5, r6
 80011e6:	2d04      	cmp	r5, #4
 80011e8:	d005      	beq.n	80011f6 <__aeabi_i2f+0x6e>
 80011ea:	3304      	adds	r3, #4
 80011ec:	015d      	lsls	r5, r3, #5
 80011ee:	d502      	bpl.n	80011f6 <__aeabi_i2f+0x6e>
 80011f0:	229f      	movs	r2, #159	; 0x9f
 80011f2:	400b      	ands	r3, r1
 80011f4:	1a12      	subs	r2, r2, r0
 80011f6:	019b      	lsls	r3, r3, #6
 80011f8:	0a58      	lsrs	r0, r3, #9
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	0240      	lsls	r0, r0, #9
 80011fe:	05d2      	lsls	r2, r2, #23
 8001200:	0a40      	lsrs	r0, r0, #9
 8001202:	07e4      	lsls	r4, r4, #31
 8001204:	4310      	orrs	r0, r2
 8001206:	4320      	orrs	r0, r4
 8001208:	bd70      	pop	{r4, r5, r6, pc}
 800120a:	2400      	movs	r4, #0
 800120c:	2200      	movs	r2, #0
 800120e:	2000      	movs	r0, #0
 8001210:	e7f4      	b.n	80011fc <__aeabi_i2f+0x74>
 8001212:	0268      	lsls	r0, r5, #9
 8001214:	0a40      	lsrs	r0, r0, #9
 8001216:	e7f1      	b.n	80011fc <__aeabi_i2f+0x74>
 8001218:	fbffffff 	.word	0xfbffffff

0800121c <__aeabi_dadd>:
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	464f      	mov	r7, r9
 8001220:	4646      	mov	r6, r8
 8001222:	46d6      	mov	lr, sl
 8001224:	000c      	movs	r4, r1
 8001226:	0309      	lsls	r1, r1, #12
 8001228:	b5c0      	push	{r6, r7, lr}
 800122a:	0a49      	lsrs	r1, r1, #9
 800122c:	0f47      	lsrs	r7, r0, #29
 800122e:	005e      	lsls	r6, r3, #1
 8001230:	4339      	orrs	r1, r7
 8001232:	031f      	lsls	r7, r3, #12
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	469c      	mov	ip, r3
 8001238:	0065      	lsls	r5, r4, #1
 800123a:	0a7b      	lsrs	r3, r7, #9
 800123c:	0f57      	lsrs	r7, r2, #29
 800123e:	431f      	orrs	r7, r3
 8001240:	0d6d      	lsrs	r5, r5, #21
 8001242:	0fe4      	lsrs	r4, r4, #31
 8001244:	0d76      	lsrs	r6, r6, #21
 8001246:	46a1      	mov	r9, r4
 8001248:	00c0      	lsls	r0, r0, #3
 800124a:	46b8      	mov	r8, r7
 800124c:	00d2      	lsls	r2, r2, #3
 800124e:	1bab      	subs	r3, r5, r6
 8001250:	4564      	cmp	r4, ip
 8001252:	d07b      	beq.n	800134c <__aeabi_dadd+0x130>
 8001254:	2b00      	cmp	r3, #0
 8001256:	dd5f      	ble.n	8001318 <__aeabi_dadd+0xfc>
 8001258:	2e00      	cmp	r6, #0
 800125a:	d000      	beq.n	800125e <__aeabi_dadd+0x42>
 800125c:	e0a4      	b.n	80013a8 <__aeabi_dadd+0x18c>
 800125e:	003e      	movs	r6, r7
 8001260:	4316      	orrs	r6, r2
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x4a>
 8001264:	e112      	b.n	800148c <__aeabi_dadd+0x270>
 8001266:	1e5e      	subs	r6, r3, #1
 8001268:	2e00      	cmp	r6, #0
 800126a:	d000      	beq.n	800126e <__aeabi_dadd+0x52>
 800126c:	e19e      	b.n	80015ac <__aeabi_dadd+0x390>
 800126e:	1a87      	subs	r7, r0, r2
 8001270:	4643      	mov	r3, r8
 8001272:	42b8      	cmp	r0, r7
 8001274:	4180      	sbcs	r0, r0
 8001276:	2501      	movs	r5, #1
 8001278:	1ac9      	subs	r1, r1, r3
 800127a:	4240      	negs	r0, r0
 800127c:	1a09      	subs	r1, r1, r0
 800127e:	020b      	lsls	r3, r1, #8
 8001280:	d400      	bmi.n	8001284 <__aeabi_dadd+0x68>
 8001282:	e131      	b.n	80014e8 <__aeabi_dadd+0x2cc>
 8001284:	0249      	lsls	r1, r1, #9
 8001286:	0a4e      	lsrs	r6, r1, #9
 8001288:	2e00      	cmp	r6, #0
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x72>
 800128c:	e16e      	b.n	800156c <__aeabi_dadd+0x350>
 800128e:	0030      	movs	r0, r6
 8001290:	f001 fe38 	bl	8002f04 <__clzsi2>
 8001294:	0003      	movs	r3, r0
 8001296:	3b08      	subs	r3, #8
 8001298:	2b1f      	cmp	r3, #31
 800129a:	dd00      	ble.n	800129e <__aeabi_dadd+0x82>
 800129c:	e161      	b.n	8001562 <__aeabi_dadd+0x346>
 800129e:	2220      	movs	r2, #32
 80012a0:	0039      	movs	r1, r7
 80012a2:	1ad2      	subs	r2, r2, r3
 80012a4:	409e      	lsls	r6, r3
 80012a6:	40d1      	lsrs	r1, r2
 80012a8:	409f      	lsls	r7, r3
 80012aa:	430e      	orrs	r6, r1
 80012ac:	429d      	cmp	r5, r3
 80012ae:	dd00      	ble.n	80012b2 <__aeabi_dadd+0x96>
 80012b0:	e151      	b.n	8001556 <__aeabi_dadd+0x33a>
 80012b2:	1b5d      	subs	r5, r3, r5
 80012b4:	1c6b      	adds	r3, r5, #1
 80012b6:	2b1f      	cmp	r3, #31
 80012b8:	dd00      	ble.n	80012bc <__aeabi_dadd+0xa0>
 80012ba:	e17c      	b.n	80015b6 <__aeabi_dadd+0x39a>
 80012bc:	2120      	movs	r1, #32
 80012be:	1ac9      	subs	r1, r1, r3
 80012c0:	003d      	movs	r5, r7
 80012c2:	0030      	movs	r0, r6
 80012c4:	408f      	lsls	r7, r1
 80012c6:	4088      	lsls	r0, r1
 80012c8:	40dd      	lsrs	r5, r3
 80012ca:	1e79      	subs	r1, r7, #1
 80012cc:	418f      	sbcs	r7, r1
 80012ce:	0031      	movs	r1, r6
 80012d0:	2207      	movs	r2, #7
 80012d2:	4328      	orrs	r0, r5
 80012d4:	40d9      	lsrs	r1, r3
 80012d6:	2500      	movs	r5, #0
 80012d8:	4307      	orrs	r7, r0
 80012da:	403a      	ands	r2, r7
 80012dc:	2a00      	cmp	r2, #0
 80012de:	d009      	beq.n	80012f4 <__aeabi_dadd+0xd8>
 80012e0:	230f      	movs	r3, #15
 80012e2:	403b      	ands	r3, r7
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d005      	beq.n	80012f4 <__aeabi_dadd+0xd8>
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	42bb      	cmp	r3, r7
 80012ec:	41bf      	sbcs	r7, r7
 80012ee:	427f      	negs	r7, r7
 80012f0:	19c9      	adds	r1, r1, r7
 80012f2:	001f      	movs	r7, r3
 80012f4:	020b      	lsls	r3, r1, #8
 80012f6:	d400      	bmi.n	80012fa <__aeabi_dadd+0xde>
 80012f8:	e226      	b.n	8001748 <__aeabi_dadd+0x52c>
 80012fa:	1c6a      	adds	r2, r5, #1
 80012fc:	4bc6      	ldr	r3, [pc, #792]	; (8001618 <__aeabi_dadd+0x3fc>)
 80012fe:	0555      	lsls	r5, r2, #21
 8001300:	0d6d      	lsrs	r5, r5, #21
 8001302:	429a      	cmp	r2, r3
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0xec>
 8001306:	e106      	b.n	8001516 <__aeabi_dadd+0x2fa>
 8001308:	4ac4      	ldr	r2, [pc, #784]	; (800161c <__aeabi_dadd+0x400>)
 800130a:	08ff      	lsrs	r7, r7, #3
 800130c:	400a      	ands	r2, r1
 800130e:	0753      	lsls	r3, r2, #29
 8001310:	0252      	lsls	r2, r2, #9
 8001312:	433b      	orrs	r3, r7
 8001314:	0b12      	lsrs	r2, r2, #12
 8001316:	e08e      	b.n	8001436 <__aeabi_dadd+0x21a>
 8001318:	2b00      	cmp	r3, #0
 800131a:	d000      	beq.n	800131e <__aeabi_dadd+0x102>
 800131c:	e0b8      	b.n	8001490 <__aeabi_dadd+0x274>
 800131e:	1c6b      	adds	r3, r5, #1
 8001320:	055b      	lsls	r3, r3, #21
 8001322:	0d5b      	lsrs	r3, r3, #21
 8001324:	2b01      	cmp	r3, #1
 8001326:	dc00      	bgt.n	800132a <__aeabi_dadd+0x10e>
 8001328:	e130      	b.n	800158c <__aeabi_dadd+0x370>
 800132a:	1a87      	subs	r7, r0, r2
 800132c:	4643      	mov	r3, r8
 800132e:	42b8      	cmp	r0, r7
 8001330:	41b6      	sbcs	r6, r6
 8001332:	1acb      	subs	r3, r1, r3
 8001334:	4276      	negs	r6, r6
 8001336:	1b9e      	subs	r6, r3, r6
 8001338:	0233      	lsls	r3, r6, #8
 800133a:	d500      	bpl.n	800133e <__aeabi_dadd+0x122>
 800133c:	e14c      	b.n	80015d8 <__aeabi_dadd+0x3bc>
 800133e:	003b      	movs	r3, r7
 8001340:	4333      	orrs	r3, r6
 8001342:	d1a1      	bne.n	8001288 <__aeabi_dadd+0x6c>
 8001344:	2200      	movs	r2, #0
 8001346:	2400      	movs	r4, #0
 8001348:	2500      	movs	r5, #0
 800134a:	e070      	b.n	800142e <__aeabi_dadd+0x212>
 800134c:	2b00      	cmp	r3, #0
 800134e:	dc00      	bgt.n	8001352 <__aeabi_dadd+0x136>
 8001350:	e0e5      	b.n	800151e <__aeabi_dadd+0x302>
 8001352:	2e00      	cmp	r6, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x13c>
 8001356:	e083      	b.n	8001460 <__aeabi_dadd+0x244>
 8001358:	4eaf      	ldr	r6, [pc, #700]	; (8001618 <__aeabi_dadd+0x3fc>)
 800135a:	42b5      	cmp	r5, r6
 800135c:	d060      	beq.n	8001420 <__aeabi_dadd+0x204>
 800135e:	2680      	movs	r6, #128	; 0x80
 8001360:	0436      	lsls	r6, r6, #16
 8001362:	4337      	orrs	r7, r6
 8001364:	46b8      	mov	r8, r7
 8001366:	2b38      	cmp	r3, #56	; 0x38
 8001368:	dc00      	bgt.n	800136c <__aeabi_dadd+0x150>
 800136a:	e13e      	b.n	80015ea <__aeabi_dadd+0x3ce>
 800136c:	4643      	mov	r3, r8
 800136e:	4313      	orrs	r3, r2
 8001370:	001f      	movs	r7, r3
 8001372:	1e7a      	subs	r2, r7, #1
 8001374:	4197      	sbcs	r7, r2
 8001376:	183f      	adds	r7, r7, r0
 8001378:	4287      	cmp	r7, r0
 800137a:	4180      	sbcs	r0, r0
 800137c:	4240      	negs	r0, r0
 800137e:	1809      	adds	r1, r1, r0
 8001380:	020b      	lsls	r3, r1, #8
 8001382:	d400      	bmi.n	8001386 <__aeabi_dadd+0x16a>
 8001384:	e0b0      	b.n	80014e8 <__aeabi_dadd+0x2cc>
 8001386:	4ba4      	ldr	r3, [pc, #656]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001388:	3501      	adds	r5, #1
 800138a:	429d      	cmp	r5, r3
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x174>
 800138e:	e0c3      	b.n	8001518 <__aeabi_dadd+0x2fc>
 8001390:	4aa2      	ldr	r2, [pc, #648]	; (800161c <__aeabi_dadd+0x400>)
 8001392:	087b      	lsrs	r3, r7, #1
 8001394:	400a      	ands	r2, r1
 8001396:	2101      	movs	r1, #1
 8001398:	400f      	ands	r7, r1
 800139a:	431f      	orrs	r7, r3
 800139c:	0851      	lsrs	r1, r2, #1
 800139e:	07d3      	lsls	r3, r2, #31
 80013a0:	2207      	movs	r2, #7
 80013a2:	431f      	orrs	r7, r3
 80013a4:	403a      	ands	r2, r7
 80013a6:	e799      	b.n	80012dc <__aeabi_dadd+0xc0>
 80013a8:	4e9b      	ldr	r6, [pc, #620]	; (8001618 <__aeabi_dadd+0x3fc>)
 80013aa:	42b5      	cmp	r5, r6
 80013ac:	d038      	beq.n	8001420 <__aeabi_dadd+0x204>
 80013ae:	2680      	movs	r6, #128	; 0x80
 80013b0:	0436      	lsls	r6, r6, #16
 80013b2:	4337      	orrs	r7, r6
 80013b4:	46b8      	mov	r8, r7
 80013b6:	2b38      	cmp	r3, #56	; 0x38
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x1a0>
 80013ba:	e0dc      	b.n	8001576 <__aeabi_dadd+0x35a>
 80013bc:	2b1f      	cmp	r3, #31
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_dadd+0x1a6>
 80013c0:	e130      	b.n	8001624 <__aeabi_dadd+0x408>
 80013c2:	001e      	movs	r6, r3
 80013c4:	4647      	mov	r7, r8
 80013c6:	3e20      	subs	r6, #32
 80013c8:	40f7      	lsrs	r7, r6
 80013ca:	46bc      	mov	ip, r7
 80013cc:	2b20      	cmp	r3, #32
 80013ce:	d004      	beq.n	80013da <__aeabi_dadd+0x1be>
 80013d0:	2640      	movs	r6, #64	; 0x40
 80013d2:	1af3      	subs	r3, r6, r3
 80013d4:	4646      	mov	r6, r8
 80013d6:	409e      	lsls	r6, r3
 80013d8:	4332      	orrs	r2, r6
 80013da:	0017      	movs	r7, r2
 80013dc:	4663      	mov	r3, ip
 80013de:	1e7a      	subs	r2, r7, #1
 80013e0:	4197      	sbcs	r7, r2
 80013e2:	431f      	orrs	r7, r3
 80013e4:	e0cc      	b.n	8001580 <__aeabi_dadd+0x364>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d100      	bne.n	80013ec <__aeabi_dadd+0x1d0>
 80013ea:	e204      	b.n	80017f6 <__aeabi_dadd+0x5da>
 80013ec:	4643      	mov	r3, r8
 80013ee:	4313      	orrs	r3, r2
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x1d8>
 80013f2:	e159      	b.n	80016a8 <__aeabi_dadd+0x48c>
 80013f4:	074b      	lsls	r3, r1, #29
 80013f6:	08c0      	lsrs	r0, r0, #3
 80013f8:	4318      	orrs	r0, r3
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	08c9      	lsrs	r1, r1, #3
 80013fe:	031b      	lsls	r3, r3, #12
 8001400:	4219      	tst	r1, r3
 8001402:	d008      	beq.n	8001416 <__aeabi_dadd+0x1fa>
 8001404:	4645      	mov	r5, r8
 8001406:	08ed      	lsrs	r5, r5, #3
 8001408:	421d      	tst	r5, r3
 800140a:	d104      	bne.n	8001416 <__aeabi_dadd+0x1fa>
 800140c:	4643      	mov	r3, r8
 800140e:	08d0      	lsrs	r0, r2, #3
 8001410:	0759      	lsls	r1, r3, #29
 8001412:	4308      	orrs	r0, r1
 8001414:	0029      	movs	r1, r5
 8001416:	0f42      	lsrs	r2, r0, #29
 8001418:	00c9      	lsls	r1, r1, #3
 800141a:	4d7f      	ldr	r5, [pc, #508]	; (8001618 <__aeabi_dadd+0x3fc>)
 800141c:	4311      	orrs	r1, r2
 800141e:	00c0      	lsls	r0, r0, #3
 8001420:	074b      	lsls	r3, r1, #29
 8001422:	08ca      	lsrs	r2, r1, #3
 8001424:	497c      	ldr	r1, [pc, #496]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001426:	08c0      	lsrs	r0, r0, #3
 8001428:	4303      	orrs	r3, r0
 800142a:	428d      	cmp	r5, r1
 800142c:	d068      	beq.n	8001500 <__aeabi_dadd+0x2e4>
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	056d      	lsls	r5, r5, #21
 8001432:	0b12      	lsrs	r2, r2, #12
 8001434:	0d6d      	lsrs	r5, r5, #21
 8001436:	2100      	movs	r1, #0
 8001438:	0312      	lsls	r2, r2, #12
 800143a:	0018      	movs	r0, r3
 800143c:	0b13      	lsrs	r3, r2, #12
 800143e:	0d0a      	lsrs	r2, r1, #20
 8001440:	0512      	lsls	r2, r2, #20
 8001442:	431a      	orrs	r2, r3
 8001444:	4b76      	ldr	r3, [pc, #472]	; (8001620 <__aeabi_dadd+0x404>)
 8001446:	052d      	lsls	r5, r5, #20
 8001448:	4013      	ands	r3, r2
 800144a:	432b      	orrs	r3, r5
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	07e4      	lsls	r4, r4, #31
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	4323      	orrs	r3, r4
 8001454:	0019      	movs	r1, r3
 8001456:	bc1c      	pop	{r2, r3, r4}
 8001458:	4690      	mov	r8, r2
 800145a:	4699      	mov	r9, r3
 800145c:	46a2      	mov	sl, r4
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001460:	003e      	movs	r6, r7
 8001462:	4316      	orrs	r6, r2
 8001464:	d012      	beq.n	800148c <__aeabi_dadd+0x270>
 8001466:	1e5e      	subs	r6, r3, #1
 8001468:	2e00      	cmp	r6, #0
 800146a:	d000      	beq.n	800146e <__aeabi_dadd+0x252>
 800146c:	e100      	b.n	8001670 <__aeabi_dadd+0x454>
 800146e:	1887      	adds	r7, r0, r2
 8001470:	4287      	cmp	r7, r0
 8001472:	4180      	sbcs	r0, r0
 8001474:	4441      	add	r1, r8
 8001476:	4240      	negs	r0, r0
 8001478:	1809      	adds	r1, r1, r0
 800147a:	2501      	movs	r5, #1
 800147c:	020b      	lsls	r3, r1, #8
 800147e:	d533      	bpl.n	80014e8 <__aeabi_dadd+0x2cc>
 8001480:	2502      	movs	r5, #2
 8001482:	e785      	b.n	8001390 <__aeabi_dadd+0x174>
 8001484:	4664      	mov	r4, ip
 8001486:	0033      	movs	r3, r6
 8001488:	4641      	mov	r1, r8
 800148a:	0010      	movs	r0, r2
 800148c:	001d      	movs	r5, r3
 800148e:	e7c7      	b.n	8001420 <__aeabi_dadd+0x204>
 8001490:	2d00      	cmp	r5, #0
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x27a>
 8001494:	e0da      	b.n	800164c <__aeabi_dadd+0x430>
 8001496:	000c      	movs	r4, r1
 8001498:	4304      	orrs	r4, r0
 800149a:	d0f3      	beq.n	8001484 <__aeabi_dadd+0x268>
 800149c:	1c5c      	adds	r4, r3, #1
 800149e:	d100      	bne.n	80014a2 <__aeabi_dadd+0x286>
 80014a0:	e19f      	b.n	80017e2 <__aeabi_dadd+0x5c6>
 80014a2:	4c5d      	ldr	r4, [pc, #372]	; (8001618 <__aeabi_dadd+0x3fc>)
 80014a4:	42a6      	cmp	r6, r4
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x28e>
 80014a8:	e12f      	b.n	800170a <__aeabi_dadd+0x4ee>
 80014aa:	43db      	mvns	r3, r3
 80014ac:	2b38      	cmp	r3, #56	; 0x38
 80014ae:	dd00      	ble.n	80014b2 <__aeabi_dadd+0x296>
 80014b0:	e166      	b.n	8001780 <__aeabi_dadd+0x564>
 80014b2:	2b1f      	cmp	r3, #31
 80014b4:	dd00      	ble.n	80014b8 <__aeabi_dadd+0x29c>
 80014b6:	e183      	b.n	80017c0 <__aeabi_dadd+0x5a4>
 80014b8:	2420      	movs	r4, #32
 80014ba:	0005      	movs	r5, r0
 80014bc:	1ae4      	subs	r4, r4, r3
 80014be:	000f      	movs	r7, r1
 80014c0:	40dd      	lsrs	r5, r3
 80014c2:	40d9      	lsrs	r1, r3
 80014c4:	40a0      	lsls	r0, r4
 80014c6:	4643      	mov	r3, r8
 80014c8:	40a7      	lsls	r7, r4
 80014ca:	1a5b      	subs	r3, r3, r1
 80014cc:	1e44      	subs	r4, r0, #1
 80014ce:	41a0      	sbcs	r0, r4
 80014d0:	4698      	mov	r8, r3
 80014d2:	432f      	orrs	r7, r5
 80014d4:	4338      	orrs	r0, r7
 80014d6:	1a17      	subs	r7, r2, r0
 80014d8:	42ba      	cmp	r2, r7
 80014da:	4192      	sbcs	r2, r2
 80014dc:	4643      	mov	r3, r8
 80014de:	4252      	negs	r2, r2
 80014e0:	1a99      	subs	r1, r3, r2
 80014e2:	4664      	mov	r4, ip
 80014e4:	0035      	movs	r5, r6
 80014e6:	e6ca      	b.n	800127e <__aeabi_dadd+0x62>
 80014e8:	2207      	movs	r2, #7
 80014ea:	403a      	ands	r2, r7
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d000      	beq.n	80014f2 <__aeabi_dadd+0x2d6>
 80014f0:	e6f6      	b.n	80012e0 <__aeabi_dadd+0xc4>
 80014f2:	074b      	lsls	r3, r1, #29
 80014f4:	08ca      	lsrs	r2, r1, #3
 80014f6:	4948      	ldr	r1, [pc, #288]	; (8001618 <__aeabi_dadd+0x3fc>)
 80014f8:	08ff      	lsrs	r7, r7, #3
 80014fa:	433b      	orrs	r3, r7
 80014fc:	428d      	cmp	r5, r1
 80014fe:	d196      	bne.n	800142e <__aeabi_dadd+0x212>
 8001500:	0019      	movs	r1, r3
 8001502:	4311      	orrs	r1, r2
 8001504:	d100      	bne.n	8001508 <__aeabi_dadd+0x2ec>
 8001506:	e19e      	b.n	8001846 <__aeabi_dadd+0x62a>
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0309      	lsls	r1, r1, #12
 800150c:	430a      	orrs	r2, r1
 800150e:	0312      	lsls	r2, r2, #12
 8001510:	0b12      	lsrs	r2, r2, #12
 8001512:	4d41      	ldr	r5, [pc, #260]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001514:	e78f      	b.n	8001436 <__aeabi_dadd+0x21a>
 8001516:	0015      	movs	r5, r2
 8001518:	2200      	movs	r2, #0
 800151a:	2300      	movs	r3, #0
 800151c:	e78b      	b.n	8001436 <__aeabi_dadd+0x21a>
 800151e:	2b00      	cmp	r3, #0
 8001520:	d000      	beq.n	8001524 <__aeabi_dadd+0x308>
 8001522:	e0c7      	b.n	80016b4 <__aeabi_dadd+0x498>
 8001524:	1c6b      	adds	r3, r5, #1
 8001526:	055f      	lsls	r7, r3, #21
 8001528:	0d7f      	lsrs	r7, r7, #21
 800152a:	2f01      	cmp	r7, #1
 800152c:	dc00      	bgt.n	8001530 <__aeabi_dadd+0x314>
 800152e:	e0f1      	b.n	8001714 <__aeabi_dadd+0x4f8>
 8001530:	4d39      	ldr	r5, [pc, #228]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001532:	42ab      	cmp	r3, r5
 8001534:	d100      	bne.n	8001538 <__aeabi_dadd+0x31c>
 8001536:	e0b9      	b.n	80016ac <__aeabi_dadd+0x490>
 8001538:	1885      	adds	r5, r0, r2
 800153a:	000a      	movs	r2, r1
 800153c:	4285      	cmp	r5, r0
 800153e:	4189      	sbcs	r1, r1
 8001540:	4442      	add	r2, r8
 8001542:	4249      	negs	r1, r1
 8001544:	1851      	adds	r1, r2, r1
 8001546:	2207      	movs	r2, #7
 8001548:	07cf      	lsls	r7, r1, #31
 800154a:	086d      	lsrs	r5, r5, #1
 800154c:	432f      	orrs	r7, r5
 800154e:	0849      	lsrs	r1, r1, #1
 8001550:	403a      	ands	r2, r7
 8001552:	001d      	movs	r5, r3
 8001554:	e6c2      	b.n	80012dc <__aeabi_dadd+0xc0>
 8001556:	2207      	movs	r2, #7
 8001558:	4930      	ldr	r1, [pc, #192]	; (800161c <__aeabi_dadd+0x400>)
 800155a:	1aed      	subs	r5, r5, r3
 800155c:	4031      	ands	r1, r6
 800155e:	403a      	ands	r2, r7
 8001560:	e6bc      	b.n	80012dc <__aeabi_dadd+0xc0>
 8001562:	003e      	movs	r6, r7
 8001564:	3828      	subs	r0, #40	; 0x28
 8001566:	4086      	lsls	r6, r0
 8001568:	2700      	movs	r7, #0
 800156a:	e69f      	b.n	80012ac <__aeabi_dadd+0x90>
 800156c:	0038      	movs	r0, r7
 800156e:	f001 fcc9 	bl	8002f04 <__clzsi2>
 8001572:	3020      	adds	r0, #32
 8001574:	e68e      	b.n	8001294 <__aeabi_dadd+0x78>
 8001576:	4643      	mov	r3, r8
 8001578:	4313      	orrs	r3, r2
 800157a:	001f      	movs	r7, r3
 800157c:	1e7a      	subs	r2, r7, #1
 800157e:	4197      	sbcs	r7, r2
 8001580:	1bc7      	subs	r7, r0, r7
 8001582:	42b8      	cmp	r0, r7
 8001584:	4180      	sbcs	r0, r0
 8001586:	4240      	negs	r0, r0
 8001588:	1a09      	subs	r1, r1, r0
 800158a:	e678      	b.n	800127e <__aeabi_dadd+0x62>
 800158c:	000e      	movs	r6, r1
 800158e:	003b      	movs	r3, r7
 8001590:	4306      	orrs	r6, r0
 8001592:	4313      	orrs	r3, r2
 8001594:	2d00      	cmp	r5, #0
 8001596:	d161      	bne.n	800165c <__aeabi_dadd+0x440>
 8001598:	2e00      	cmp	r6, #0
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x382>
 800159c:	e0f4      	b.n	8001788 <__aeabi_dadd+0x56c>
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dadd+0x388>
 80015a2:	e11b      	b.n	80017dc <__aeabi_dadd+0x5c0>
 80015a4:	4664      	mov	r4, ip
 80015a6:	0039      	movs	r1, r7
 80015a8:	0010      	movs	r0, r2
 80015aa:	e739      	b.n	8001420 <__aeabi_dadd+0x204>
 80015ac:	4f1a      	ldr	r7, [pc, #104]	; (8001618 <__aeabi_dadd+0x3fc>)
 80015ae:	42bb      	cmp	r3, r7
 80015b0:	d07a      	beq.n	80016a8 <__aeabi_dadd+0x48c>
 80015b2:	0033      	movs	r3, r6
 80015b4:	e6ff      	b.n	80013b6 <__aeabi_dadd+0x19a>
 80015b6:	0030      	movs	r0, r6
 80015b8:	3d1f      	subs	r5, #31
 80015ba:	40e8      	lsrs	r0, r5
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d003      	beq.n	80015c8 <__aeabi_dadd+0x3ac>
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	1acb      	subs	r3, r1, r3
 80015c4:	409e      	lsls	r6, r3
 80015c6:	4337      	orrs	r7, r6
 80015c8:	1e7b      	subs	r3, r7, #1
 80015ca:	419f      	sbcs	r7, r3
 80015cc:	2207      	movs	r2, #7
 80015ce:	4307      	orrs	r7, r0
 80015d0:	403a      	ands	r2, r7
 80015d2:	2100      	movs	r1, #0
 80015d4:	2500      	movs	r5, #0
 80015d6:	e789      	b.n	80014ec <__aeabi_dadd+0x2d0>
 80015d8:	1a17      	subs	r7, r2, r0
 80015da:	4643      	mov	r3, r8
 80015dc:	42ba      	cmp	r2, r7
 80015de:	41b6      	sbcs	r6, r6
 80015e0:	1a59      	subs	r1, r3, r1
 80015e2:	4276      	negs	r6, r6
 80015e4:	1b8e      	subs	r6, r1, r6
 80015e6:	4664      	mov	r4, ip
 80015e8:	e64e      	b.n	8001288 <__aeabi_dadd+0x6c>
 80015ea:	2b1f      	cmp	r3, #31
 80015ec:	dd00      	ble.n	80015f0 <__aeabi_dadd+0x3d4>
 80015ee:	e0ad      	b.n	800174c <__aeabi_dadd+0x530>
 80015f0:	2620      	movs	r6, #32
 80015f2:	4647      	mov	r7, r8
 80015f4:	1af6      	subs	r6, r6, r3
 80015f6:	40b7      	lsls	r7, r6
 80015f8:	46b9      	mov	r9, r7
 80015fa:	0017      	movs	r7, r2
 80015fc:	46b2      	mov	sl, r6
 80015fe:	40df      	lsrs	r7, r3
 8001600:	464e      	mov	r6, r9
 8001602:	433e      	orrs	r6, r7
 8001604:	0037      	movs	r7, r6
 8001606:	4656      	mov	r6, sl
 8001608:	40b2      	lsls	r2, r6
 800160a:	1e56      	subs	r6, r2, #1
 800160c:	41b2      	sbcs	r2, r6
 800160e:	4317      	orrs	r7, r2
 8001610:	4642      	mov	r2, r8
 8001612:	40da      	lsrs	r2, r3
 8001614:	1889      	adds	r1, r1, r2
 8001616:	e6ae      	b.n	8001376 <__aeabi_dadd+0x15a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff
 8001620:	800fffff 	.word	0x800fffff
 8001624:	2620      	movs	r6, #32
 8001626:	4647      	mov	r7, r8
 8001628:	1af6      	subs	r6, r6, r3
 800162a:	40b7      	lsls	r7, r6
 800162c:	46b9      	mov	r9, r7
 800162e:	0017      	movs	r7, r2
 8001630:	46b2      	mov	sl, r6
 8001632:	40df      	lsrs	r7, r3
 8001634:	464e      	mov	r6, r9
 8001636:	433e      	orrs	r6, r7
 8001638:	0037      	movs	r7, r6
 800163a:	4656      	mov	r6, sl
 800163c:	40b2      	lsls	r2, r6
 800163e:	1e56      	subs	r6, r2, #1
 8001640:	41b2      	sbcs	r2, r6
 8001642:	4317      	orrs	r7, r2
 8001644:	4642      	mov	r2, r8
 8001646:	40da      	lsrs	r2, r3
 8001648:	1a89      	subs	r1, r1, r2
 800164a:	e799      	b.n	8001580 <__aeabi_dadd+0x364>
 800164c:	4c7f      	ldr	r4, [pc, #508]	; (800184c <__aeabi_dadd+0x630>)
 800164e:	42a6      	cmp	r6, r4
 8001650:	d05b      	beq.n	800170a <__aeabi_dadd+0x4ee>
 8001652:	2480      	movs	r4, #128	; 0x80
 8001654:	0424      	lsls	r4, r4, #16
 8001656:	425b      	negs	r3, r3
 8001658:	4321      	orrs	r1, r4
 800165a:	e727      	b.n	80014ac <__aeabi_dadd+0x290>
 800165c:	2e00      	cmp	r6, #0
 800165e:	d10c      	bne.n	800167a <__aeabi_dadd+0x45e>
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <__aeabi_dadd+0x44a>
 8001664:	e0cb      	b.n	80017fe <__aeabi_dadd+0x5e2>
 8001666:	4664      	mov	r4, ip
 8001668:	0039      	movs	r1, r7
 800166a:	0010      	movs	r0, r2
 800166c:	4d77      	ldr	r5, [pc, #476]	; (800184c <__aeabi_dadd+0x630>)
 800166e:	e6d7      	b.n	8001420 <__aeabi_dadd+0x204>
 8001670:	4f76      	ldr	r7, [pc, #472]	; (800184c <__aeabi_dadd+0x630>)
 8001672:	42bb      	cmp	r3, r7
 8001674:	d018      	beq.n	80016a8 <__aeabi_dadd+0x48c>
 8001676:	0033      	movs	r3, r6
 8001678:	e675      	b.n	8001366 <__aeabi_dadd+0x14a>
 800167a:	2b00      	cmp	r3, #0
 800167c:	d014      	beq.n	80016a8 <__aeabi_dadd+0x48c>
 800167e:	074b      	lsls	r3, r1, #29
 8001680:	08c0      	lsrs	r0, r0, #3
 8001682:	4318      	orrs	r0, r3
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	08c9      	lsrs	r1, r1, #3
 8001688:	031b      	lsls	r3, r3, #12
 800168a:	4219      	tst	r1, r3
 800168c:	d007      	beq.n	800169e <__aeabi_dadd+0x482>
 800168e:	08fc      	lsrs	r4, r7, #3
 8001690:	421c      	tst	r4, r3
 8001692:	d104      	bne.n	800169e <__aeabi_dadd+0x482>
 8001694:	0779      	lsls	r1, r7, #29
 8001696:	08d0      	lsrs	r0, r2, #3
 8001698:	4308      	orrs	r0, r1
 800169a:	46e1      	mov	r9, ip
 800169c:	0021      	movs	r1, r4
 800169e:	464c      	mov	r4, r9
 80016a0:	0f42      	lsrs	r2, r0, #29
 80016a2:	00c9      	lsls	r1, r1, #3
 80016a4:	4311      	orrs	r1, r2
 80016a6:	00c0      	lsls	r0, r0, #3
 80016a8:	4d68      	ldr	r5, [pc, #416]	; (800184c <__aeabi_dadd+0x630>)
 80016aa:	e6b9      	b.n	8001420 <__aeabi_dadd+0x204>
 80016ac:	001d      	movs	r5, r3
 80016ae:	2200      	movs	r2, #0
 80016b0:	2300      	movs	r3, #0
 80016b2:	e6c0      	b.n	8001436 <__aeabi_dadd+0x21a>
 80016b4:	2d00      	cmp	r5, #0
 80016b6:	d15b      	bne.n	8001770 <__aeabi_dadd+0x554>
 80016b8:	000d      	movs	r5, r1
 80016ba:	4305      	orrs	r5, r0
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x4a4>
 80016be:	e6e2      	b.n	8001486 <__aeabi_dadd+0x26a>
 80016c0:	1c5d      	adds	r5, r3, #1
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dadd+0x4aa>
 80016c4:	e0b0      	b.n	8001828 <__aeabi_dadd+0x60c>
 80016c6:	4d61      	ldr	r5, [pc, #388]	; (800184c <__aeabi_dadd+0x630>)
 80016c8:	42ae      	cmp	r6, r5
 80016ca:	d01f      	beq.n	800170c <__aeabi_dadd+0x4f0>
 80016cc:	43db      	mvns	r3, r3
 80016ce:	2b38      	cmp	r3, #56	; 0x38
 80016d0:	dc71      	bgt.n	80017b6 <__aeabi_dadd+0x59a>
 80016d2:	2b1f      	cmp	r3, #31
 80016d4:	dd00      	ble.n	80016d8 <__aeabi_dadd+0x4bc>
 80016d6:	e096      	b.n	8001806 <__aeabi_dadd+0x5ea>
 80016d8:	2520      	movs	r5, #32
 80016da:	000f      	movs	r7, r1
 80016dc:	1aed      	subs	r5, r5, r3
 80016de:	40af      	lsls	r7, r5
 80016e0:	46b9      	mov	r9, r7
 80016e2:	0007      	movs	r7, r0
 80016e4:	46aa      	mov	sl, r5
 80016e6:	40df      	lsrs	r7, r3
 80016e8:	464d      	mov	r5, r9
 80016ea:	433d      	orrs	r5, r7
 80016ec:	002f      	movs	r7, r5
 80016ee:	4655      	mov	r5, sl
 80016f0:	40a8      	lsls	r0, r5
 80016f2:	40d9      	lsrs	r1, r3
 80016f4:	1e45      	subs	r5, r0, #1
 80016f6:	41a8      	sbcs	r0, r5
 80016f8:	4488      	add	r8, r1
 80016fa:	4307      	orrs	r7, r0
 80016fc:	18bf      	adds	r7, r7, r2
 80016fe:	4297      	cmp	r7, r2
 8001700:	4192      	sbcs	r2, r2
 8001702:	4251      	negs	r1, r2
 8001704:	4441      	add	r1, r8
 8001706:	0035      	movs	r5, r6
 8001708:	e63a      	b.n	8001380 <__aeabi_dadd+0x164>
 800170a:	4664      	mov	r4, ip
 800170c:	0035      	movs	r5, r6
 800170e:	4641      	mov	r1, r8
 8001710:	0010      	movs	r0, r2
 8001712:	e685      	b.n	8001420 <__aeabi_dadd+0x204>
 8001714:	000b      	movs	r3, r1
 8001716:	4303      	orrs	r3, r0
 8001718:	2d00      	cmp	r5, #0
 800171a:	d000      	beq.n	800171e <__aeabi_dadd+0x502>
 800171c:	e663      	b.n	80013e6 <__aeabi_dadd+0x1ca>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f5      	beq.n	800170e <__aeabi_dadd+0x4f2>
 8001722:	4643      	mov	r3, r8
 8001724:	4313      	orrs	r3, r2
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x50e>
 8001728:	e67a      	b.n	8001420 <__aeabi_dadd+0x204>
 800172a:	1887      	adds	r7, r0, r2
 800172c:	4287      	cmp	r7, r0
 800172e:	4180      	sbcs	r0, r0
 8001730:	2207      	movs	r2, #7
 8001732:	4441      	add	r1, r8
 8001734:	4240      	negs	r0, r0
 8001736:	1809      	adds	r1, r1, r0
 8001738:	403a      	ands	r2, r7
 800173a:	020b      	lsls	r3, r1, #8
 800173c:	d400      	bmi.n	8001740 <__aeabi_dadd+0x524>
 800173e:	e6d5      	b.n	80014ec <__aeabi_dadd+0x2d0>
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <__aeabi_dadd+0x634>)
 8001742:	3501      	adds	r5, #1
 8001744:	4019      	ands	r1, r3
 8001746:	e5c9      	b.n	80012dc <__aeabi_dadd+0xc0>
 8001748:	0038      	movs	r0, r7
 800174a:	e669      	b.n	8001420 <__aeabi_dadd+0x204>
 800174c:	001e      	movs	r6, r3
 800174e:	4647      	mov	r7, r8
 8001750:	3e20      	subs	r6, #32
 8001752:	40f7      	lsrs	r7, r6
 8001754:	46bc      	mov	ip, r7
 8001756:	2b20      	cmp	r3, #32
 8001758:	d004      	beq.n	8001764 <__aeabi_dadd+0x548>
 800175a:	2640      	movs	r6, #64	; 0x40
 800175c:	1af3      	subs	r3, r6, r3
 800175e:	4646      	mov	r6, r8
 8001760:	409e      	lsls	r6, r3
 8001762:	4332      	orrs	r2, r6
 8001764:	0017      	movs	r7, r2
 8001766:	4663      	mov	r3, ip
 8001768:	1e7a      	subs	r2, r7, #1
 800176a:	4197      	sbcs	r7, r2
 800176c:	431f      	orrs	r7, r3
 800176e:	e602      	b.n	8001376 <__aeabi_dadd+0x15a>
 8001770:	4d36      	ldr	r5, [pc, #216]	; (800184c <__aeabi_dadd+0x630>)
 8001772:	42ae      	cmp	r6, r5
 8001774:	d0ca      	beq.n	800170c <__aeabi_dadd+0x4f0>
 8001776:	2580      	movs	r5, #128	; 0x80
 8001778:	042d      	lsls	r5, r5, #16
 800177a:	425b      	negs	r3, r3
 800177c:	4329      	orrs	r1, r5
 800177e:	e7a6      	b.n	80016ce <__aeabi_dadd+0x4b2>
 8001780:	4308      	orrs	r0, r1
 8001782:	1e41      	subs	r1, r0, #1
 8001784:	4188      	sbcs	r0, r1
 8001786:	e6a6      	b.n	80014d6 <__aeabi_dadd+0x2ba>
 8001788:	2b00      	cmp	r3, #0
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x572>
 800178c:	e648      	b.n	8001420 <__aeabi_dadd+0x204>
 800178e:	1a87      	subs	r7, r0, r2
 8001790:	4643      	mov	r3, r8
 8001792:	42b8      	cmp	r0, r7
 8001794:	41b6      	sbcs	r6, r6
 8001796:	1acb      	subs	r3, r1, r3
 8001798:	4276      	negs	r6, r6
 800179a:	1b9e      	subs	r6, r3, r6
 800179c:	0233      	lsls	r3, r6, #8
 800179e:	d54b      	bpl.n	8001838 <__aeabi_dadd+0x61c>
 80017a0:	1a17      	subs	r7, r2, r0
 80017a2:	4643      	mov	r3, r8
 80017a4:	42ba      	cmp	r2, r7
 80017a6:	4192      	sbcs	r2, r2
 80017a8:	1a59      	subs	r1, r3, r1
 80017aa:	4252      	negs	r2, r2
 80017ac:	1a89      	subs	r1, r1, r2
 80017ae:	2207      	movs	r2, #7
 80017b0:	4664      	mov	r4, ip
 80017b2:	403a      	ands	r2, r7
 80017b4:	e592      	b.n	80012dc <__aeabi_dadd+0xc0>
 80017b6:	4301      	orrs	r1, r0
 80017b8:	000f      	movs	r7, r1
 80017ba:	1e79      	subs	r1, r7, #1
 80017bc:	418f      	sbcs	r7, r1
 80017be:	e79d      	b.n	80016fc <__aeabi_dadd+0x4e0>
 80017c0:	001c      	movs	r4, r3
 80017c2:	000f      	movs	r7, r1
 80017c4:	3c20      	subs	r4, #32
 80017c6:	40e7      	lsrs	r7, r4
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d003      	beq.n	80017d4 <__aeabi_dadd+0x5b8>
 80017cc:	2440      	movs	r4, #64	; 0x40
 80017ce:	1ae3      	subs	r3, r4, r3
 80017d0:	4099      	lsls	r1, r3
 80017d2:	4308      	orrs	r0, r1
 80017d4:	1e41      	subs	r1, r0, #1
 80017d6:	4188      	sbcs	r0, r1
 80017d8:	4338      	orrs	r0, r7
 80017da:	e67c      	b.n	80014d6 <__aeabi_dadd+0x2ba>
 80017dc:	2200      	movs	r2, #0
 80017de:	2400      	movs	r4, #0
 80017e0:	e625      	b.n	800142e <__aeabi_dadd+0x212>
 80017e2:	1a17      	subs	r7, r2, r0
 80017e4:	4643      	mov	r3, r8
 80017e6:	42ba      	cmp	r2, r7
 80017e8:	4192      	sbcs	r2, r2
 80017ea:	1a59      	subs	r1, r3, r1
 80017ec:	4252      	negs	r2, r2
 80017ee:	1a89      	subs	r1, r1, r2
 80017f0:	4664      	mov	r4, ip
 80017f2:	0035      	movs	r5, r6
 80017f4:	e543      	b.n	800127e <__aeabi_dadd+0x62>
 80017f6:	4641      	mov	r1, r8
 80017f8:	0010      	movs	r0, r2
 80017fa:	4d14      	ldr	r5, [pc, #80]	; (800184c <__aeabi_dadd+0x630>)
 80017fc:	e610      	b.n	8001420 <__aeabi_dadd+0x204>
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	2400      	movs	r4, #0
 8001802:	0312      	lsls	r2, r2, #12
 8001804:	e680      	b.n	8001508 <__aeabi_dadd+0x2ec>
 8001806:	001d      	movs	r5, r3
 8001808:	000f      	movs	r7, r1
 800180a:	3d20      	subs	r5, #32
 800180c:	40ef      	lsrs	r7, r5
 800180e:	46bc      	mov	ip, r7
 8001810:	2b20      	cmp	r3, #32
 8001812:	d003      	beq.n	800181c <__aeabi_dadd+0x600>
 8001814:	2540      	movs	r5, #64	; 0x40
 8001816:	1aeb      	subs	r3, r5, r3
 8001818:	4099      	lsls	r1, r3
 800181a:	4308      	orrs	r0, r1
 800181c:	0007      	movs	r7, r0
 800181e:	4663      	mov	r3, ip
 8001820:	1e78      	subs	r0, r7, #1
 8001822:	4187      	sbcs	r7, r0
 8001824:	431f      	orrs	r7, r3
 8001826:	e769      	b.n	80016fc <__aeabi_dadd+0x4e0>
 8001828:	1887      	adds	r7, r0, r2
 800182a:	4297      	cmp	r7, r2
 800182c:	419b      	sbcs	r3, r3
 800182e:	4441      	add	r1, r8
 8001830:	425b      	negs	r3, r3
 8001832:	18c9      	adds	r1, r1, r3
 8001834:	0035      	movs	r5, r6
 8001836:	e5a3      	b.n	8001380 <__aeabi_dadd+0x164>
 8001838:	003b      	movs	r3, r7
 800183a:	4333      	orrs	r3, r6
 800183c:	d0ce      	beq.n	80017dc <__aeabi_dadd+0x5c0>
 800183e:	2207      	movs	r2, #7
 8001840:	0031      	movs	r1, r6
 8001842:	403a      	ands	r2, r7
 8001844:	e652      	b.n	80014ec <__aeabi_dadd+0x2d0>
 8001846:	2300      	movs	r3, #0
 8001848:	001a      	movs	r2, r3
 800184a:	e5f4      	b.n	8001436 <__aeabi_dadd+0x21a>
 800184c:	000007ff 	.word	0x000007ff
 8001850:	ff7fffff 	.word	0xff7fffff

08001854 <__aeabi_ddiv>:
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	4657      	mov	r7, sl
 8001858:	46de      	mov	lr, fp
 800185a:	464e      	mov	r6, r9
 800185c:	4645      	mov	r5, r8
 800185e:	b5e0      	push	{r5, r6, r7, lr}
 8001860:	4683      	mov	fp, r0
 8001862:	0007      	movs	r7, r0
 8001864:	030e      	lsls	r6, r1, #12
 8001866:	0048      	lsls	r0, r1, #1
 8001868:	b085      	sub	sp, #20
 800186a:	4692      	mov	sl, r2
 800186c:	001c      	movs	r4, r3
 800186e:	0b36      	lsrs	r6, r6, #12
 8001870:	0d40      	lsrs	r0, r0, #21
 8001872:	0fcd      	lsrs	r5, r1, #31
 8001874:	2800      	cmp	r0, #0
 8001876:	d100      	bne.n	800187a <__aeabi_ddiv+0x26>
 8001878:	e09d      	b.n	80019b6 <__aeabi_ddiv+0x162>
 800187a:	4b95      	ldr	r3, [pc, #596]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 800187c:	4298      	cmp	r0, r3
 800187e:	d039      	beq.n	80018f4 <__aeabi_ddiv+0xa0>
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	00f6      	lsls	r6, r6, #3
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	431e      	orrs	r6, r3
 8001888:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <__aeabi_ddiv+0x280>)
 800188a:	0f7b      	lsrs	r3, r7, #29
 800188c:	4333      	orrs	r3, r6
 800188e:	4699      	mov	r9, r3
 8001890:	4694      	mov	ip, r2
 8001892:	0003      	movs	r3, r0
 8001894:	4463      	add	r3, ip
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2300      	movs	r3, #0
 800189a:	2600      	movs	r6, #0
 800189c:	00ff      	lsls	r7, r7, #3
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	0323      	lsls	r3, r4, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4698      	mov	r8, r3
 80018a6:	0063      	lsls	r3, r4, #1
 80018a8:	0fe4      	lsrs	r4, r4, #31
 80018aa:	4652      	mov	r2, sl
 80018ac:	0d5b      	lsrs	r3, r3, #21
 80018ae:	9401      	str	r4, [sp, #4]
 80018b0:	d100      	bne.n	80018b4 <__aeabi_ddiv+0x60>
 80018b2:	e0b3      	b.n	8001a1c <__aeabi_ddiv+0x1c8>
 80018b4:	4986      	ldr	r1, [pc, #536]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 80018b6:	428b      	cmp	r3, r1
 80018b8:	d100      	bne.n	80018bc <__aeabi_ddiv+0x68>
 80018ba:	e09e      	b.n	80019fa <__aeabi_ddiv+0x1a6>
 80018bc:	4642      	mov	r2, r8
 80018be:	00d1      	lsls	r1, r2, #3
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	430a      	orrs	r2, r1
 80018c6:	4651      	mov	r1, sl
 80018c8:	0f49      	lsrs	r1, r1, #29
 80018ca:	4311      	orrs	r1, r2
 80018cc:	468b      	mov	fp, r1
 80018ce:	4981      	ldr	r1, [pc, #516]	; (8001ad4 <__aeabi_ddiv+0x280>)
 80018d0:	4652      	mov	r2, sl
 80018d2:	468c      	mov	ip, r1
 80018d4:	9900      	ldr	r1, [sp, #0]
 80018d6:	4463      	add	r3, ip
 80018d8:	1acb      	subs	r3, r1, r3
 80018da:	2100      	movs	r1, #0
 80018dc:	00d2      	lsls	r2, r2, #3
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	002b      	movs	r3, r5
 80018e2:	4063      	eors	r3, r4
 80018e4:	469a      	mov	sl, r3
 80018e6:	2e0f      	cmp	r6, #15
 80018e8:	d900      	bls.n	80018ec <__aeabi_ddiv+0x98>
 80018ea:	e105      	b.n	8001af8 <__aeabi_ddiv+0x2a4>
 80018ec:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <__aeabi_ddiv+0x284>)
 80018ee:	00b6      	lsls	r6, r6, #2
 80018f0:	599b      	ldr	r3, [r3, r6]
 80018f2:	469f      	mov	pc, r3
 80018f4:	465b      	mov	r3, fp
 80018f6:	4333      	orrs	r3, r6
 80018f8:	4699      	mov	r9, r3
 80018fa:	d000      	beq.n	80018fe <__aeabi_ddiv+0xaa>
 80018fc:	e0b8      	b.n	8001a70 <__aeabi_ddiv+0x21c>
 80018fe:	2302      	movs	r3, #2
 8001900:	2608      	movs	r6, #8
 8001902:	2700      	movs	r7, #0
 8001904:	9000      	str	r0, [sp, #0]
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	e7ca      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 800190a:	46cb      	mov	fp, r9
 800190c:	003a      	movs	r2, r7
 800190e:	9902      	ldr	r1, [sp, #8]
 8001910:	9501      	str	r5, [sp, #4]
 8001912:	9b01      	ldr	r3, [sp, #4]
 8001914:	469a      	mov	sl, r3
 8001916:	2902      	cmp	r1, #2
 8001918:	d027      	beq.n	800196a <__aeabi_ddiv+0x116>
 800191a:	2903      	cmp	r1, #3
 800191c:	d100      	bne.n	8001920 <__aeabi_ddiv+0xcc>
 800191e:	e280      	b.n	8001e22 <__aeabi_ddiv+0x5ce>
 8001920:	2901      	cmp	r1, #1
 8001922:	d044      	beq.n	80019ae <__aeabi_ddiv+0x15a>
 8001924:	496d      	ldr	r1, [pc, #436]	; (8001adc <__aeabi_ddiv+0x288>)
 8001926:	9b00      	ldr	r3, [sp, #0]
 8001928:	468c      	mov	ip, r1
 800192a:	4463      	add	r3, ip
 800192c:	001c      	movs	r4, r3
 800192e:	2c00      	cmp	r4, #0
 8001930:	dd38      	ble.n	80019a4 <__aeabi_ddiv+0x150>
 8001932:	0753      	lsls	r3, r2, #29
 8001934:	d000      	beq.n	8001938 <__aeabi_ddiv+0xe4>
 8001936:	e213      	b.n	8001d60 <__aeabi_ddiv+0x50c>
 8001938:	08d2      	lsrs	r2, r2, #3
 800193a:	465b      	mov	r3, fp
 800193c:	01db      	lsls	r3, r3, #7
 800193e:	d509      	bpl.n	8001954 <__aeabi_ddiv+0x100>
 8001940:	4659      	mov	r1, fp
 8001942:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <__aeabi_ddiv+0x28c>)
 8001944:	4019      	ands	r1, r3
 8001946:	468b      	mov	fp, r1
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	00c9      	lsls	r1, r1, #3
 800194c:	468c      	mov	ip, r1
 800194e:	9b00      	ldr	r3, [sp, #0]
 8001950:	4463      	add	r3, ip
 8001952:	001c      	movs	r4, r3
 8001954:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <__aeabi_ddiv+0x290>)
 8001956:	429c      	cmp	r4, r3
 8001958:	dc07      	bgt.n	800196a <__aeabi_ddiv+0x116>
 800195a:	465b      	mov	r3, fp
 800195c:	0564      	lsls	r4, r4, #21
 800195e:	075f      	lsls	r7, r3, #29
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	4317      	orrs	r7, r2
 8001964:	0b1b      	lsrs	r3, r3, #12
 8001966:	0d62      	lsrs	r2, r4, #21
 8001968:	e002      	b.n	8001970 <__aeabi_ddiv+0x11c>
 800196a:	2300      	movs	r3, #0
 800196c:	2700      	movs	r7, #0
 800196e:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 8001970:	2100      	movs	r1, #0
 8001972:	031b      	lsls	r3, r3, #12
 8001974:	0b1c      	lsrs	r4, r3, #12
 8001976:	0d0b      	lsrs	r3, r1, #20
 8001978:	051b      	lsls	r3, r3, #20
 800197a:	4323      	orrs	r3, r4
 800197c:	0514      	lsls	r4, r2, #20
 800197e:	4a5a      	ldr	r2, [pc, #360]	; (8001ae8 <__aeabi_ddiv+0x294>)
 8001980:	0038      	movs	r0, r7
 8001982:	4013      	ands	r3, r2
 8001984:	431c      	orrs	r4, r3
 8001986:	4653      	mov	r3, sl
 8001988:	0064      	lsls	r4, r4, #1
 800198a:	07db      	lsls	r3, r3, #31
 800198c:	0864      	lsrs	r4, r4, #1
 800198e:	431c      	orrs	r4, r3
 8001990:	0021      	movs	r1, r4
 8001992:	b005      	add	sp, #20
 8001994:	bc3c      	pop	{r2, r3, r4, r5}
 8001996:	4690      	mov	r8, r2
 8001998:	4699      	mov	r9, r3
 800199a:	46a2      	mov	sl, r4
 800199c:	46ab      	mov	fp, r5
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a0:	2201      	movs	r2, #1
 80019a2:	4252      	negs	r2, r2
 80019a4:	2301      	movs	r3, #1
 80019a6:	1b1b      	subs	r3, r3, r4
 80019a8:	2b38      	cmp	r3, #56	; 0x38
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_ddiv+0x15a>
 80019ac:	e1ad      	b.n	8001d0a <__aeabi_ddiv+0x4b6>
 80019ae:	2200      	movs	r2, #0
 80019b0:	2300      	movs	r3, #0
 80019b2:	2700      	movs	r7, #0
 80019b4:	e7dc      	b.n	8001970 <__aeabi_ddiv+0x11c>
 80019b6:	465b      	mov	r3, fp
 80019b8:	4333      	orrs	r3, r6
 80019ba:	4699      	mov	r9, r3
 80019bc:	d05e      	beq.n	8001a7c <__aeabi_ddiv+0x228>
 80019be:	2e00      	cmp	r6, #0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_ddiv+0x170>
 80019c2:	e18a      	b.n	8001cda <__aeabi_ddiv+0x486>
 80019c4:	0030      	movs	r0, r6
 80019c6:	f001 fa9d 	bl	8002f04 <__clzsi2>
 80019ca:	0003      	movs	r3, r0
 80019cc:	3b0b      	subs	r3, #11
 80019ce:	2b1c      	cmp	r3, #28
 80019d0:	dd00      	ble.n	80019d4 <__aeabi_ddiv+0x180>
 80019d2:	e17b      	b.n	8001ccc <__aeabi_ddiv+0x478>
 80019d4:	221d      	movs	r2, #29
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	465a      	mov	r2, fp
 80019da:	0001      	movs	r1, r0
 80019dc:	40da      	lsrs	r2, r3
 80019de:	3908      	subs	r1, #8
 80019e0:	408e      	lsls	r6, r1
 80019e2:	0013      	movs	r3, r2
 80019e4:	465f      	mov	r7, fp
 80019e6:	4333      	orrs	r3, r6
 80019e8:	4699      	mov	r9, r3
 80019ea:	408f      	lsls	r7, r1
 80019ec:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <__aeabi_ddiv+0x298>)
 80019ee:	2600      	movs	r6, #0
 80019f0:	1a1b      	subs	r3, r3, r0
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	e752      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 80019fa:	4641      	mov	r1, r8
 80019fc:	4653      	mov	r3, sl
 80019fe:	430b      	orrs	r3, r1
 8001a00:	493b      	ldr	r1, [pc, #236]	; (8001af0 <__aeabi_ddiv+0x29c>)
 8001a02:	469b      	mov	fp, r3
 8001a04:	468c      	mov	ip, r1
 8001a06:	9b00      	ldr	r3, [sp, #0]
 8001a08:	4463      	add	r3, ip
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	465b      	mov	r3, fp
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d13b      	bne.n	8001a8a <__aeabi_ddiv+0x236>
 8001a12:	2302      	movs	r3, #2
 8001a14:	2200      	movs	r2, #0
 8001a16:	431e      	orrs	r6, r3
 8001a18:	2102      	movs	r1, #2
 8001a1a:	e761      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a1c:	4643      	mov	r3, r8
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	469b      	mov	fp, r3
 8001a22:	d037      	beq.n	8001a94 <__aeabi_ddiv+0x240>
 8001a24:	4643      	mov	r3, r8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_ddiv+0x1d8>
 8001a2a:	e162      	b.n	8001cf2 <__aeabi_ddiv+0x49e>
 8001a2c:	4640      	mov	r0, r8
 8001a2e:	f001 fa69 	bl	8002f04 <__clzsi2>
 8001a32:	0003      	movs	r3, r0
 8001a34:	3b0b      	subs	r3, #11
 8001a36:	2b1c      	cmp	r3, #28
 8001a38:	dd00      	ble.n	8001a3c <__aeabi_ddiv+0x1e8>
 8001a3a:	e153      	b.n	8001ce4 <__aeabi_ddiv+0x490>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	4641      	mov	r1, r8
 8001a40:	3a08      	subs	r2, #8
 8001a42:	4091      	lsls	r1, r2
 8001a44:	4688      	mov	r8, r1
 8001a46:	211d      	movs	r1, #29
 8001a48:	1acb      	subs	r3, r1, r3
 8001a4a:	4651      	mov	r1, sl
 8001a4c:	40d9      	lsrs	r1, r3
 8001a4e:	000b      	movs	r3, r1
 8001a50:	4641      	mov	r1, r8
 8001a52:	430b      	orrs	r3, r1
 8001a54:	469b      	mov	fp, r3
 8001a56:	4653      	mov	r3, sl
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	4925      	ldr	r1, [pc, #148]	; (8001af4 <__aeabi_ddiv+0x2a0>)
 8001a60:	469c      	mov	ip, r3
 8001a62:	4460      	add	r0, ip
 8001a64:	0003      	movs	r3, r0
 8001a66:	468c      	mov	ip, r1
 8001a68:	4463      	add	r3, ip
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	e737      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a70:	2303      	movs	r3, #3
 8001a72:	46b1      	mov	r9, r6
 8001a74:	9000      	str	r0, [sp, #0]
 8001a76:	260c      	movs	r6, #12
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	e711      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	2604      	movs	r6, #4
 8001a84:	2700      	movs	r7, #0
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	e70a      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	46c3      	mov	fp, r8
 8001a8e:	431e      	orrs	r6, r3
 8001a90:	2103      	movs	r1, #3
 8001a92:	e725      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a94:	3301      	adds	r3, #1
 8001a96:	431e      	orrs	r6, r3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	e720      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	469a      	mov	sl, r3
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	2700      	movs	r7, #0
 8001aa6:	031b      	lsls	r3, r3, #12
 8001aa8:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 8001aaa:	e761      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	4649      	mov	r1, r9
 8001ab0:	031b      	lsls	r3, r3, #12
 8001ab2:	4219      	tst	r1, r3
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_ddiv+0x264>
 8001ab6:	e0e2      	b.n	8001c7e <__aeabi_ddiv+0x42a>
 8001ab8:	4659      	mov	r1, fp
 8001aba:	4219      	tst	r1, r3
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_ddiv+0x26c>
 8001abe:	e0de      	b.n	8001c7e <__aeabi_ddiv+0x42a>
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	031b      	lsls	r3, r3, #12
 8001ac4:	0017      	movs	r7, r2
 8001ac6:	0b1b      	lsrs	r3, r3, #12
 8001ac8:	46a2      	mov	sl, r4
 8001aca:	4a01      	ldr	r2, [pc, #4]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 8001acc:	e750      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	fffffc01 	.word	0xfffffc01
 8001ad8:	08018c4c 	.word	0x08018c4c
 8001adc:	000003ff 	.word	0x000003ff
 8001ae0:	feffffff 	.word	0xfeffffff
 8001ae4:	000007fe 	.word	0x000007fe
 8001ae8:	800fffff 	.word	0x800fffff
 8001aec:	fffffc0d 	.word	0xfffffc0d
 8001af0:	fffff801 	.word	0xfffff801
 8001af4:	000003f3 	.word	0x000003f3
 8001af8:	45d9      	cmp	r9, fp
 8001afa:	d900      	bls.n	8001afe <__aeabi_ddiv+0x2aa>
 8001afc:	e0cb      	b.n	8001c96 <__aeabi_ddiv+0x442>
 8001afe:	d100      	bne.n	8001b02 <__aeabi_ddiv+0x2ae>
 8001b00:	e0c6      	b.n	8001c90 <__aeabi_ddiv+0x43c>
 8001b02:	003c      	movs	r4, r7
 8001b04:	4648      	mov	r0, r9
 8001b06:	2700      	movs	r7, #0
 8001b08:	9b00      	ldr	r3, [sp, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	465b      	mov	r3, fp
 8001b10:	0e16      	lsrs	r6, r2, #24
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	431e      	orrs	r6, r3
 8001b16:	0213      	lsls	r3, r2, #8
 8001b18:	4698      	mov	r8, r3
 8001b1a:	0433      	lsls	r3, r6, #16
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	4699      	mov	r9, r3
 8001b20:	0c31      	lsrs	r1, r6, #16
 8001b22:	9101      	str	r1, [sp, #4]
 8001b24:	f7fe fb9a 	bl	800025c <__aeabi_uidivmod>
 8001b28:	464a      	mov	r2, r9
 8001b2a:	4342      	muls	r2, r0
 8001b2c:	040b      	lsls	r3, r1, #16
 8001b2e:	0c21      	lsrs	r1, r4, #16
 8001b30:	0005      	movs	r5, r0
 8001b32:	4319      	orrs	r1, r3
 8001b34:	428a      	cmp	r2, r1
 8001b36:	d907      	bls.n	8001b48 <__aeabi_ddiv+0x2f4>
 8001b38:	1989      	adds	r1, r1, r6
 8001b3a:	3d01      	subs	r5, #1
 8001b3c:	428e      	cmp	r6, r1
 8001b3e:	d803      	bhi.n	8001b48 <__aeabi_ddiv+0x2f4>
 8001b40:	428a      	cmp	r2, r1
 8001b42:	d901      	bls.n	8001b48 <__aeabi_ddiv+0x2f4>
 8001b44:	1e85      	subs	r5, r0, #2
 8001b46:	1989      	adds	r1, r1, r6
 8001b48:	1a88      	subs	r0, r1, r2
 8001b4a:	9901      	ldr	r1, [sp, #4]
 8001b4c:	f7fe fb86 	bl	800025c <__aeabi_uidivmod>
 8001b50:	0409      	lsls	r1, r1, #16
 8001b52:	468c      	mov	ip, r1
 8001b54:	464a      	mov	r2, r9
 8001b56:	0421      	lsls	r1, r4, #16
 8001b58:	4664      	mov	r4, ip
 8001b5a:	4342      	muls	r2, r0
 8001b5c:	0c09      	lsrs	r1, r1, #16
 8001b5e:	0003      	movs	r3, r0
 8001b60:	4321      	orrs	r1, r4
 8001b62:	428a      	cmp	r2, r1
 8001b64:	d904      	bls.n	8001b70 <__aeabi_ddiv+0x31c>
 8001b66:	1989      	adds	r1, r1, r6
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	428e      	cmp	r6, r1
 8001b6c:	d800      	bhi.n	8001b70 <__aeabi_ddiv+0x31c>
 8001b6e:	e0f1      	b.n	8001d54 <__aeabi_ddiv+0x500>
 8001b70:	042d      	lsls	r5, r5, #16
 8001b72:	431d      	orrs	r5, r3
 8001b74:	46ab      	mov	fp, r5
 8001b76:	4643      	mov	r3, r8
 8001b78:	1a89      	subs	r1, r1, r2
 8001b7a:	4642      	mov	r2, r8
 8001b7c:	0c28      	lsrs	r0, r5, #16
 8001b7e:	0412      	lsls	r2, r2, #16
 8001b80:	0c1d      	lsrs	r5, r3, #16
 8001b82:	465b      	mov	r3, fp
 8001b84:	0c14      	lsrs	r4, r2, #16
 8001b86:	0022      	movs	r2, r4
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	435a      	muls	r2, r3
 8001b8e:	9403      	str	r4, [sp, #12]
 8001b90:	436b      	muls	r3, r5
 8001b92:	4344      	muls	r4, r0
 8001b94:	9502      	str	r5, [sp, #8]
 8001b96:	4368      	muls	r0, r5
 8001b98:	191b      	adds	r3, r3, r4
 8001b9a:	0c15      	lsrs	r5, r2, #16
 8001b9c:	18eb      	adds	r3, r5, r3
 8001b9e:	429c      	cmp	r4, r3
 8001ba0:	d903      	bls.n	8001baa <__aeabi_ddiv+0x356>
 8001ba2:	2480      	movs	r4, #128	; 0x80
 8001ba4:	0264      	lsls	r4, r4, #9
 8001ba6:	46a4      	mov	ip, r4
 8001ba8:	4460      	add	r0, ip
 8001baa:	0c1c      	lsrs	r4, r3, #16
 8001bac:	0415      	lsls	r5, r2, #16
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	0c2d      	lsrs	r5, r5, #16
 8001bb2:	1820      	adds	r0, r4, r0
 8001bb4:	195d      	adds	r5, r3, r5
 8001bb6:	4281      	cmp	r1, r0
 8001bb8:	d377      	bcc.n	8001caa <__aeabi_ddiv+0x456>
 8001bba:	d073      	beq.n	8001ca4 <__aeabi_ddiv+0x450>
 8001bbc:	1a0c      	subs	r4, r1, r0
 8001bbe:	4aa2      	ldr	r2, [pc, #648]	; (8001e48 <__aeabi_ddiv+0x5f4>)
 8001bc0:	1b7d      	subs	r5, r7, r5
 8001bc2:	42af      	cmp	r7, r5
 8001bc4:	41bf      	sbcs	r7, r7
 8001bc6:	4694      	mov	ip, r2
 8001bc8:	9b00      	ldr	r3, [sp, #0]
 8001bca:	427f      	negs	r7, r7
 8001bcc:	4463      	add	r3, ip
 8001bce:	1be0      	subs	r0, r4, r7
 8001bd0:	001c      	movs	r4, r3
 8001bd2:	4286      	cmp	r6, r0
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_ddiv+0x384>
 8001bd6:	e0db      	b.n	8001d90 <__aeabi_ddiv+0x53c>
 8001bd8:	9901      	ldr	r1, [sp, #4]
 8001bda:	f7fe fb3f 	bl	800025c <__aeabi_uidivmod>
 8001bde:	464a      	mov	r2, r9
 8001be0:	4342      	muls	r2, r0
 8001be2:	040b      	lsls	r3, r1, #16
 8001be4:	0c29      	lsrs	r1, r5, #16
 8001be6:	0007      	movs	r7, r0
 8001be8:	4319      	orrs	r1, r3
 8001bea:	428a      	cmp	r2, r1
 8001bec:	d907      	bls.n	8001bfe <__aeabi_ddiv+0x3aa>
 8001bee:	1989      	adds	r1, r1, r6
 8001bf0:	3f01      	subs	r7, #1
 8001bf2:	428e      	cmp	r6, r1
 8001bf4:	d803      	bhi.n	8001bfe <__aeabi_ddiv+0x3aa>
 8001bf6:	428a      	cmp	r2, r1
 8001bf8:	d901      	bls.n	8001bfe <__aeabi_ddiv+0x3aa>
 8001bfa:	1e87      	subs	r7, r0, #2
 8001bfc:	1989      	adds	r1, r1, r6
 8001bfe:	1a88      	subs	r0, r1, r2
 8001c00:	9901      	ldr	r1, [sp, #4]
 8001c02:	f7fe fb2b 	bl	800025c <__aeabi_uidivmod>
 8001c06:	0409      	lsls	r1, r1, #16
 8001c08:	464a      	mov	r2, r9
 8001c0a:	4689      	mov	r9, r1
 8001c0c:	0429      	lsls	r1, r5, #16
 8001c0e:	464d      	mov	r5, r9
 8001c10:	4342      	muls	r2, r0
 8001c12:	0c09      	lsrs	r1, r1, #16
 8001c14:	0003      	movs	r3, r0
 8001c16:	4329      	orrs	r1, r5
 8001c18:	428a      	cmp	r2, r1
 8001c1a:	d907      	bls.n	8001c2c <__aeabi_ddiv+0x3d8>
 8001c1c:	1989      	adds	r1, r1, r6
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	428e      	cmp	r6, r1
 8001c22:	d803      	bhi.n	8001c2c <__aeabi_ddiv+0x3d8>
 8001c24:	428a      	cmp	r2, r1
 8001c26:	d901      	bls.n	8001c2c <__aeabi_ddiv+0x3d8>
 8001c28:	1e83      	subs	r3, r0, #2
 8001c2a:	1989      	adds	r1, r1, r6
 8001c2c:	043f      	lsls	r7, r7, #16
 8001c2e:	1a89      	subs	r1, r1, r2
 8001c30:	003a      	movs	r2, r7
 8001c32:	9f03      	ldr	r7, [sp, #12]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	0038      	movs	r0, r7
 8001c38:	0413      	lsls	r3, r2, #16
 8001c3a:	0c1b      	lsrs	r3, r3, #16
 8001c3c:	4358      	muls	r0, r3
 8001c3e:	4681      	mov	r9, r0
 8001c40:	9802      	ldr	r0, [sp, #8]
 8001c42:	0c15      	lsrs	r5, r2, #16
 8001c44:	436f      	muls	r7, r5
 8001c46:	4343      	muls	r3, r0
 8001c48:	4345      	muls	r5, r0
 8001c4a:	4648      	mov	r0, r9
 8001c4c:	0c00      	lsrs	r0, r0, #16
 8001c4e:	4684      	mov	ip, r0
 8001c50:	19db      	adds	r3, r3, r7
 8001c52:	4463      	add	r3, ip
 8001c54:	429f      	cmp	r7, r3
 8001c56:	d903      	bls.n	8001c60 <__aeabi_ddiv+0x40c>
 8001c58:	2080      	movs	r0, #128	; 0x80
 8001c5a:	0240      	lsls	r0, r0, #9
 8001c5c:	4684      	mov	ip, r0
 8001c5e:	4465      	add	r5, ip
 8001c60:	4648      	mov	r0, r9
 8001c62:	0c1f      	lsrs	r7, r3, #16
 8001c64:	0400      	lsls	r0, r0, #16
 8001c66:	041b      	lsls	r3, r3, #16
 8001c68:	0c00      	lsrs	r0, r0, #16
 8001c6a:	197d      	adds	r5, r7, r5
 8001c6c:	1818      	adds	r0, r3, r0
 8001c6e:	42a9      	cmp	r1, r5
 8001c70:	d200      	bcs.n	8001c74 <__aeabi_ddiv+0x420>
 8001c72:	e084      	b.n	8001d7e <__aeabi_ddiv+0x52a>
 8001c74:	d100      	bne.n	8001c78 <__aeabi_ddiv+0x424>
 8001c76:	e07f      	b.n	8001d78 <__aeabi_ddiv+0x524>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	e657      	b.n	800192e <__aeabi_ddiv+0xda>
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	464a      	mov	r2, r9
 8001c82:	031b      	lsls	r3, r3, #12
 8001c84:	4313      	orrs	r3, r2
 8001c86:	031b      	lsls	r3, r3, #12
 8001c88:	0b1b      	lsrs	r3, r3, #12
 8001c8a:	46aa      	mov	sl, r5
 8001c8c:	4a6f      	ldr	r2, [pc, #444]	; (8001e4c <__aeabi_ddiv+0x5f8>)
 8001c8e:	e66f      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001c90:	42ba      	cmp	r2, r7
 8001c92:	d900      	bls.n	8001c96 <__aeabi_ddiv+0x442>
 8001c94:	e735      	b.n	8001b02 <__aeabi_ddiv+0x2ae>
 8001c96:	464b      	mov	r3, r9
 8001c98:	07dc      	lsls	r4, r3, #31
 8001c9a:	0858      	lsrs	r0, r3, #1
 8001c9c:	087b      	lsrs	r3, r7, #1
 8001c9e:	431c      	orrs	r4, r3
 8001ca0:	07ff      	lsls	r7, r7, #31
 8001ca2:	e734      	b.n	8001b0e <__aeabi_ddiv+0x2ba>
 8001ca4:	2400      	movs	r4, #0
 8001ca6:	42af      	cmp	r7, r5
 8001ca8:	d289      	bcs.n	8001bbe <__aeabi_ddiv+0x36a>
 8001caa:	4447      	add	r7, r8
 8001cac:	4547      	cmp	r7, r8
 8001cae:	41a4      	sbcs	r4, r4
 8001cb0:	465b      	mov	r3, fp
 8001cb2:	4264      	negs	r4, r4
 8001cb4:	19a4      	adds	r4, r4, r6
 8001cb6:	1864      	adds	r4, r4, r1
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	42a6      	cmp	r6, r4
 8001cbc:	d21e      	bcs.n	8001cfc <__aeabi_ddiv+0x4a8>
 8001cbe:	42a0      	cmp	r0, r4
 8001cc0:	d86d      	bhi.n	8001d9e <__aeabi_ddiv+0x54a>
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_ddiv+0x472>
 8001cc4:	e0b6      	b.n	8001e34 <__aeabi_ddiv+0x5e0>
 8001cc6:	1a24      	subs	r4, r4, r0
 8001cc8:	469b      	mov	fp, r3
 8001cca:	e778      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	465a      	mov	r2, fp
 8001cd0:	3b28      	subs	r3, #40	; 0x28
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	2700      	movs	r7, #0
 8001cd6:	4691      	mov	r9, r2
 8001cd8:	e688      	b.n	80019ec <__aeabi_ddiv+0x198>
 8001cda:	4658      	mov	r0, fp
 8001cdc:	f001 f912 	bl	8002f04 <__clzsi2>
 8001ce0:	3020      	adds	r0, #32
 8001ce2:	e672      	b.n	80019ca <__aeabi_ddiv+0x176>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	3b28      	subs	r3, #40	; 0x28
 8001cea:	409a      	lsls	r2, r3
 8001cec:	4693      	mov	fp, r2
 8001cee:	2200      	movs	r2, #0
 8001cf0:	e6b4      	b.n	8001a5c <__aeabi_ddiv+0x208>
 8001cf2:	4650      	mov	r0, sl
 8001cf4:	f001 f906 	bl	8002f04 <__clzsi2>
 8001cf8:	3020      	adds	r0, #32
 8001cfa:	e69a      	b.n	8001a32 <__aeabi_ddiv+0x1de>
 8001cfc:	42a6      	cmp	r6, r4
 8001cfe:	d1e2      	bne.n	8001cc6 <__aeabi_ddiv+0x472>
 8001d00:	45b8      	cmp	r8, r7
 8001d02:	d9dc      	bls.n	8001cbe <__aeabi_ddiv+0x46a>
 8001d04:	1a34      	subs	r4, r6, r0
 8001d06:	469b      	mov	fp, r3
 8001d08:	e759      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001d0a:	2b1f      	cmp	r3, #31
 8001d0c:	dc65      	bgt.n	8001dda <__aeabi_ddiv+0x586>
 8001d0e:	4c50      	ldr	r4, [pc, #320]	; (8001e50 <__aeabi_ddiv+0x5fc>)
 8001d10:	9900      	ldr	r1, [sp, #0]
 8001d12:	46a4      	mov	ip, r4
 8001d14:	465c      	mov	r4, fp
 8001d16:	4461      	add	r1, ip
 8001d18:	0008      	movs	r0, r1
 8001d1a:	408c      	lsls	r4, r1
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	4082      	lsls	r2, r0
 8001d20:	40d9      	lsrs	r1, r3
 8001d22:	1e50      	subs	r0, r2, #1
 8001d24:	4182      	sbcs	r2, r0
 8001d26:	430c      	orrs	r4, r1
 8001d28:	4314      	orrs	r4, r2
 8001d2a:	465a      	mov	r2, fp
 8001d2c:	40da      	lsrs	r2, r3
 8001d2e:	0013      	movs	r3, r2
 8001d30:	0762      	lsls	r2, r4, #29
 8001d32:	d009      	beq.n	8001d48 <__aeabi_ddiv+0x4f4>
 8001d34:	220f      	movs	r2, #15
 8001d36:	4022      	ands	r2, r4
 8001d38:	2a04      	cmp	r2, #4
 8001d3a:	d005      	beq.n	8001d48 <__aeabi_ddiv+0x4f4>
 8001d3c:	0022      	movs	r2, r4
 8001d3e:	1d14      	adds	r4, r2, #4
 8001d40:	4294      	cmp	r4, r2
 8001d42:	4189      	sbcs	r1, r1
 8001d44:	4249      	negs	r1, r1
 8001d46:	185b      	adds	r3, r3, r1
 8001d48:	021a      	lsls	r2, r3, #8
 8001d4a:	d562      	bpl.n	8001e12 <__aeabi_ddiv+0x5be>
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2700      	movs	r7, #0
 8001d52:	e60d      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001d54:	428a      	cmp	r2, r1
 8001d56:	d800      	bhi.n	8001d5a <__aeabi_ddiv+0x506>
 8001d58:	e70a      	b.n	8001b70 <__aeabi_ddiv+0x31c>
 8001d5a:	1e83      	subs	r3, r0, #2
 8001d5c:	1989      	adds	r1, r1, r6
 8001d5e:	e707      	b.n	8001b70 <__aeabi_ddiv+0x31c>
 8001d60:	230f      	movs	r3, #15
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d100      	bne.n	8001d6a <__aeabi_ddiv+0x516>
 8001d68:	e5e6      	b.n	8001938 <__aeabi_ddiv+0xe4>
 8001d6a:	1d17      	adds	r7, r2, #4
 8001d6c:	4297      	cmp	r7, r2
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4253      	negs	r3, r2
 8001d72:	449b      	add	fp, r3
 8001d74:	08fa      	lsrs	r2, r7, #3
 8001d76:	e5e0      	b.n	800193a <__aeabi_ddiv+0xe6>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_ddiv+0x52a>
 8001d7c:	e5d7      	b.n	800192e <__aeabi_ddiv+0xda>
 8001d7e:	1871      	adds	r1, r6, r1
 8001d80:	1e53      	subs	r3, r2, #1
 8001d82:	42b1      	cmp	r1, r6
 8001d84:	d327      	bcc.n	8001dd6 <__aeabi_ddiv+0x582>
 8001d86:	42a9      	cmp	r1, r5
 8001d88:	d315      	bcc.n	8001db6 <__aeabi_ddiv+0x562>
 8001d8a:	d058      	beq.n	8001e3e <__aeabi_ddiv+0x5ea>
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	e773      	b.n	8001c78 <__aeabi_ddiv+0x424>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	dc00      	bgt.n	8001d96 <__aeabi_ddiv+0x542>
 8001d94:	e604      	b.n	80019a0 <__aeabi_ddiv+0x14c>
 8001d96:	2301      	movs	r3, #1
 8001d98:	2200      	movs	r2, #0
 8001d9a:	449b      	add	fp, r3
 8001d9c:	e5cd      	b.n	800193a <__aeabi_ddiv+0xe6>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	4447      	add	r7, r8
 8001da2:	4547      	cmp	r7, r8
 8001da4:	4189      	sbcs	r1, r1
 8001da6:	425b      	negs	r3, r3
 8001da8:	469c      	mov	ip, r3
 8001daa:	4249      	negs	r1, r1
 8001dac:	1989      	adds	r1, r1, r6
 8001dae:	190c      	adds	r4, r1, r4
 8001db0:	44e3      	add	fp, ip
 8001db2:	1a24      	subs	r4, r4, r0
 8001db4:	e703      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001db6:	4643      	mov	r3, r8
 8001db8:	005f      	lsls	r7, r3, #1
 8001dba:	4547      	cmp	r7, r8
 8001dbc:	419b      	sbcs	r3, r3
 8001dbe:	46b8      	mov	r8, r7
 8001dc0:	425b      	negs	r3, r3
 8001dc2:	199e      	adds	r6, r3, r6
 8001dc4:	3a02      	subs	r2, #2
 8001dc6:	1989      	adds	r1, r1, r6
 8001dc8:	42a9      	cmp	r1, r5
 8001dca:	d000      	beq.n	8001dce <__aeabi_ddiv+0x57a>
 8001dcc:	e754      	b.n	8001c78 <__aeabi_ddiv+0x424>
 8001dce:	4540      	cmp	r0, r8
 8001dd0:	d000      	beq.n	8001dd4 <__aeabi_ddiv+0x580>
 8001dd2:	e751      	b.n	8001c78 <__aeabi_ddiv+0x424>
 8001dd4:	e5ab      	b.n	800192e <__aeabi_ddiv+0xda>
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	e7f6      	b.n	8001dc8 <__aeabi_ddiv+0x574>
 8001dda:	211f      	movs	r1, #31
 8001ddc:	465f      	mov	r7, fp
 8001dde:	4249      	negs	r1, r1
 8001de0:	1b0c      	subs	r4, r1, r4
 8001de2:	40e7      	lsrs	r7, r4
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d007      	beq.n	8001df8 <__aeabi_ddiv+0x5a4>
 8001de8:	491a      	ldr	r1, [pc, #104]	; (8001e54 <__aeabi_ddiv+0x600>)
 8001dea:	9b00      	ldr	r3, [sp, #0]
 8001dec:	468c      	mov	ip, r1
 8001dee:	4463      	add	r3, ip
 8001df0:	0018      	movs	r0, r3
 8001df2:	465b      	mov	r3, fp
 8001df4:	4083      	lsls	r3, r0
 8001df6:	431a      	orrs	r2, r3
 8001df8:	1e50      	subs	r0, r2, #1
 8001dfa:	4182      	sbcs	r2, r0
 8001dfc:	433a      	orrs	r2, r7
 8001dfe:	2707      	movs	r7, #7
 8001e00:	2300      	movs	r3, #0
 8001e02:	4017      	ands	r7, r2
 8001e04:	d009      	beq.n	8001e1a <__aeabi_ddiv+0x5c6>
 8001e06:	210f      	movs	r1, #15
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4011      	ands	r1, r2
 8001e0c:	0014      	movs	r4, r2
 8001e0e:	2904      	cmp	r1, #4
 8001e10:	d195      	bne.n	8001d3e <__aeabi_ddiv+0x4ea>
 8001e12:	0022      	movs	r2, r4
 8001e14:	075f      	lsls	r7, r3, #29
 8001e16:	025b      	lsls	r3, r3, #9
 8001e18:	0b1b      	lsrs	r3, r3, #12
 8001e1a:	08d2      	lsrs	r2, r2, #3
 8001e1c:	4317      	orrs	r7, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	e5a6      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	4659      	mov	r1, fp
 8001e26:	031b      	lsls	r3, r3, #12
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	031b      	lsls	r3, r3, #12
 8001e2c:	0017      	movs	r7, r2
 8001e2e:	0b1b      	lsrs	r3, r3, #12
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <__aeabi_ddiv+0x5f8>)
 8001e32:	e59d      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001e34:	42bd      	cmp	r5, r7
 8001e36:	d8b2      	bhi.n	8001d9e <__aeabi_ddiv+0x54a>
 8001e38:	469b      	mov	fp, r3
 8001e3a:	2400      	movs	r4, #0
 8001e3c:	e6bf      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001e3e:	4580      	cmp	r8, r0
 8001e40:	d3b9      	bcc.n	8001db6 <__aeabi_ddiv+0x562>
 8001e42:	001a      	movs	r2, r3
 8001e44:	e7c3      	b.n	8001dce <__aeabi_ddiv+0x57a>
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	000003ff 	.word	0x000003ff
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	0000041e 	.word	0x0000041e
 8001e54:	0000043e 	.word	0x0000043e

08001e58 <__eqdf2>:
 8001e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5a:	464f      	mov	r7, r9
 8001e5c:	4646      	mov	r6, r8
 8001e5e:	46d6      	mov	lr, sl
 8001e60:	4684      	mov	ip, r0
 8001e62:	b5c0      	push	{r6, r7, lr}
 8001e64:	4680      	mov	r8, r0
 8001e66:	4e19      	ldr	r6, [pc, #100]	; (8001ecc <__eqdf2+0x74>)
 8001e68:	0318      	lsls	r0, r3, #12
 8001e6a:	030f      	lsls	r7, r1, #12
 8001e6c:	004d      	lsls	r5, r1, #1
 8001e6e:	0b00      	lsrs	r0, r0, #12
 8001e70:	005c      	lsls	r4, r3, #1
 8001e72:	4682      	mov	sl, r0
 8001e74:	0b3f      	lsrs	r7, r7, #12
 8001e76:	0d6d      	lsrs	r5, r5, #21
 8001e78:	0fc9      	lsrs	r1, r1, #31
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	0d64      	lsrs	r4, r4, #21
 8001e7e:	0fdb      	lsrs	r3, r3, #31
 8001e80:	2001      	movs	r0, #1
 8001e82:	42b5      	cmp	r5, r6
 8001e84:	d00a      	beq.n	8001e9c <__eqdf2+0x44>
 8001e86:	42b4      	cmp	r4, r6
 8001e88:	d003      	beq.n	8001e92 <__eqdf2+0x3a>
 8001e8a:	42a5      	cmp	r5, r4
 8001e8c:	d101      	bne.n	8001e92 <__eqdf2+0x3a>
 8001e8e:	4557      	cmp	r7, sl
 8001e90:	d00c      	beq.n	8001eac <__eqdf2+0x54>
 8001e92:	bc1c      	pop	{r2, r3, r4}
 8001e94:	4690      	mov	r8, r2
 8001e96:	4699      	mov	r9, r3
 8001e98:	46a2      	mov	sl, r4
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9c:	4666      	mov	r6, ip
 8001e9e:	433e      	orrs	r6, r7
 8001ea0:	d1f7      	bne.n	8001e92 <__eqdf2+0x3a>
 8001ea2:	42ac      	cmp	r4, r5
 8001ea4:	d1f5      	bne.n	8001e92 <__eqdf2+0x3a>
 8001ea6:	4654      	mov	r4, sl
 8001ea8:	4314      	orrs	r4, r2
 8001eaa:	d1f2      	bne.n	8001e92 <__eqdf2+0x3a>
 8001eac:	2001      	movs	r0, #1
 8001eae:	45c8      	cmp	r8, r9
 8001eb0:	d1ef      	bne.n	8001e92 <__eqdf2+0x3a>
 8001eb2:	4299      	cmp	r1, r3
 8001eb4:	d007      	beq.n	8001ec6 <__eqdf2+0x6e>
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	d1eb      	bne.n	8001e92 <__eqdf2+0x3a>
 8001eba:	4663      	mov	r3, ip
 8001ebc:	431f      	orrs	r7, r3
 8001ebe:	0038      	movs	r0, r7
 8001ec0:	1e47      	subs	r7, r0, #1
 8001ec2:	41b8      	sbcs	r0, r7
 8001ec4:	e7e5      	b.n	8001e92 <__eqdf2+0x3a>
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	e7e3      	b.n	8001e92 <__eqdf2+0x3a>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007ff 	.word	0x000007ff

08001ed0 <__gedf2>:
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	464f      	mov	r7, r9
 8001ed4:	4646      	mov	r6, r8
 8001ed6:	46d6      	mov	lr, sl
 8001ed8:	004d      	lsls	r5, r1, #1
 8001eda:	b5c0      	push	{r6, r7, lr}
 8001edc:	030e      	lsls	r6, r1, #12
 8001ede:	0fc9      	lsrs	r1, r1, #31
 8001ee0:	468a      	mov	sl, r1
 8001ee2:	492c      	ldr	r1, [pc, #176]	; (8001f94 <__gedf2+0xc4>)
 8001ee4:	031f      	lsls	r7, r3, #12
 8001ee6:	005c      	lsls	r4, r3, #1
 8001ee8:	4680      	mov	r8, r0
 8001eea:	0b36      	lsrs	r6, r6, #12
 8001eec:	0d6d      	lsrs	r5, r5, #21
 8001eee:	4691      	mov	r9, r2
 8001ef0:	0b3f      	lsrs	r7, r7, #12
 8001ef2:	0d64      	lsrs	r4, r4, #21
 8001ef4:	0fdb      	lsrs	r3, r3, #31
 8001ef6:	428d      	cmp	r5, r1
 8001ef8:	d01e      	beq.n	8001f38 <__gedf2+0x68>
 8001efa:	428c      	cmp	r4, r1
 8001efc:	d016      	beq.n	8001f2c <__gedf2+0x5c>
 8001efe:	2d00      	cmp	r5, #0
 8001f00:	d11e      	bne.n	8001f40 <__gedf2+0x70>
 8001f02:	4330      	orrs	r0, r6
 8001f04:	4684      	mov	ip, r0
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	d101      	bne.n	8001f0e <__gedf2+0x3e>
 8001f0a:	433a      	orrs	r2, r7
 8001f0c:	d023      	beq.n	8001f56 <__gedf2+0x86>
 8001f0e:	4662      	mov	r2, ip
 8001f10:	2a00      	cmp	r2, #0
 8001f12:	d01a      	beq.n	8001f4a <__gedf2+0x7a>
 8001f14:	459a      	cmp	sl, r3
 8001f16:	d029      	beq.n	8001f6c <__gedf2+0x9c>
 8001f18:	4651      	mov	r1, sl
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	3901      	subs	r1, #1
 8001f1e:	4008      	ands	r0, r1
 8001f20:	3801      	subs	r0, #1
 8001f22:	bc1c      	pop	{r2, r3, r4}
 8001f24:	4690      	mov	r8, r2
 8001f26:	4699      	mov	r9, r3
 8001f28:	46a2      	mov	sl, r4
 8001f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f2c:	0039      	movs	r1, r7
 8001f2e:	4311      	orrs	r1, r2
 8001f30:	d0e5      	beq.n	8001efe <__gedf2+0x2e>
 8001f32:	2002      	movs	r0, #2
 8001f34:	4240      	negs	r0, r0
 8001f36:	e7f4      	b.n	8001f22 <__gedf2+0x52>
 8001f38:	4330      	orrs	r0, r6
 8001f3a:	d1fa      	bne.n	8001f32 <__gedf2+0x62>
 8001f3c:	42ac      	cmp	r4, r5
 8001f3e:	d00f      	beq.n	8001f60 <__gedf2+0x90>
 8001f40:	2c00      	cmp	r4, #0
 8001f42:	d10f      	bne.n	8001f64 <__gedf2+0x94>
 8001f44:	433a      	orrs	r2, r7
 8001f46:	d0e7      	beq.n	8001f18 <__gedf2+0x48>
 8001f48:	e00c      	b.n	8001f64 <__gedf2+0x94>
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	4393      	bics	r3, r2
 8001f50:	0018      	movs	r0, r3
 8001f52:	3001      	adds	r0, #1
 8001f54:	e7e5      	b.n	8001f22 <__gedf2+0x52>
 8001f56:	4663      	mov	r3, ip
 8001f58:	2000      	movs	r0, #0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0e1      	beq.n	8001f22 <__gedf2+0x52>
 8001f5e:	e7db      	b.n	8001f18 <__gedf2+0x48>
 8001f60:	433a      	orrs	r2, r7
 8001f62:	d1e6      	bne.n	8001f32 <__gedf2+0x62>
 8001f64:	459a      	cmp	sl, r3
 8001f66:	d1d7      	bne.n	8001f18 <__gedf2+0x48>
 8001f68:	42a5      	cmp	r5, r4
 8001f6a:	dcd5      	bgt.n	8001f18 <__gedf2+0x48>
 8001f6c:	42a5      	cmp	r5, r4
 8001f6e:	db05      	blt.n	8001f7c <__gedf2+0xac>
 8001f70:	42be      	cmp	r6, r7
 8001f72:	d8d1      	bhi.n	8001f18 <__gedf2+0x48>
 8001f74:	d008      	beq.n	8001f88 <__gedf2+0xb8>
 8001f76:	2000      	movs	r0, #0
 8001f78:	42be      	cmp	r6, r7
 8001f7a:	d2d2      	bcs.n	8001f22 <__gedf2+0x52>
 8001f7c:	4650      	mov	r0, sl
 8001f7e:	2301      	movs	r3, #1
 8001f80:	3801      	subs	r0, #1
 8001f82:	4398      	bics	r0, r3
 8001f84:	3001      	adds	r0, #1
 8001f86:	e7cc      	b.n	8001f22 <__gedf2+0x52>
 8001f88:	45c8      	cmp	r8, r9
 8001f8a:	d8c5      	bhi.n	8001f18 <__gedf2+0x48>
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	45c8      	cmp	r8, r9
 8001f90:	d3f4      	bcc.n	8001f7c <__gedf2+0xac>
 8001f92:	e7c6      	b.n	8001f22 <__gedf2+0x52>
 8001f94:	000007ff 	.word	0x000007ff

08001f98 <__ledf2>:
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	464f      	mov	r7, r9
 8001f9c:	4646      	mov	r6, r8
 8001f9e:	46d6      	mov	lr, sl
 8001fa0:	004d      	lsls	r5, r1, #1
 8001fa2:	b5c0      	push	{r6, r7, lr}
 8001fa4:	030e      	lsls	r6, r1, #12
 8001fa6:	0fc9      	lsrs	r1, r1, #31
 8001fa8:	468a      	mov	sl, r1
 8001faa:	492e      	ldr	r1, [pc, #184]	; (8002064 <__ledf2+0xcc>)
 8001fac:	031f      	lsls	r7, r3, #12
 8001fae:	005c      	lsls	r4, r3, #1
 8001fb0:	4680      	mov	r8, r0
 8001fb2:	0b36      	lsrs	r6, r6, #12
 8001fb4:	0d6d      	lsrs	r5, r5, #21
 8001fb6:	4691      	mov	r9, r2
 8001fb8:	0b3f      	lsrs	r7, r7, #12
 8001fba:	0d64      	lsrs	r4, r4, #21
 8001fbc:	0fdb      	lsrs	r3, r3, #31
 8001fbe:	428d      	cmp	r5, r1
 8001fc0:	d018      	beq.n	8001ff4 <__ledf2+0x5c>
 8001fc2:	428c      	cmp	r4, r1
 8001fc4:	d011      	beq.n	8001fea <__ledf2+0x52>
 8001fc6:	2d00      	cmp	r5, #0
 8001fc8:	d118      	bne.n	8001ffc <__ledf2+0x64>
 8001fca:	4330      	orrs	r0, r6
 8001fcc:	4684      	mov	ip, r0
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	d11e      	bne.n	8002010 <__ledf2+0x78>
 8001fd2:	433a      	orrs	r2, r7
 8001fd4:	d11c      	bne.n	8002010 <__ledf2+0x78>
 8001fd6:	4663      	mov	r3, ip
 8001fd8:	2000      	movs	r0, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d030      	beq.n	8002040 <__ledf2+0xa8>
 8001fde:	4651      	mov	r1, sl
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	3901      	subs	r1, #1
 8001fe4:	4008      	ands	r0, r1
 8001fe6:	3801      	subs	r0, #1
 8001fe8:	e02a      	b.n	8002040 <__ledf2+0xa8>
 8001fea:	0039      	movs	r1, r7
 8001fec:	4311      	orrs	r1, r2
 8001fee:	d0ea      	beq.n	8001fc6 <__ledf2+0x2e>
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	e025      	b.n	8002040 <__ledf2+0xa8>
 8001ff4:	4330      	orrs	r0, r6
 8001ff6:	d1fb      	bne.n	8001ff0 <__ledf2+0x58>
 8001ff8:	42ac      	cmp	r4, r5
 8001ffa:	d026      	beq.n	800204a <__ledf2+0xb2>
 8001ffc:	2c00      	cmp	r4, #0
 8001ffe:	d126      	bne.n	800204e <__ledf2+0xb6>
 8002000:	433a      	orrs	r2, r7
 8002002:	d124      	bne.n	800204e <__ledf2+0xb6>
 8002004:	4651      	mov	r1, sl
 8002006:	2002      	movs	r0, #2
 8002008:	3901      	subs	r1, #1
 800200a:	4008      	ands	r0, r1
 800200c:	3801      	subs	r0, #1
 800200e:	e017      	b.n	8002040 <__ledf2+0xa8>
 8002010:	4662      	mov	r2, ip
 8002012:	2a00      	cmp	r2, #0
 8002014:	d00f      	beq.n	8002036 <__ledf2+0x9e>
 8002016:	459a      	cmp	sl, r3
 8002018:	d1e1      	bne.n	8001fde <__ledf2+0x46>
 800201a:	42a5      	cmp	r5, r4
 800201c:	db05      	blt.n	800202a <__ledf2+0x92>
 800201e:	42be      	cmp	r6, r7
 8002020:	d8dd      	bhi.n	8001fde <__ledf2+0x46>
 8002022:	d019      	beq.n	8002058 <__ledf2+0xc0>
 8002024:	2000      	movs	r0, #0
 8002026:	42be      	cmp	r6, r7
 8002028:	d20a      	bcs.n	8002040 <__ledf2+0xa8>
 800202a:	4650      	mov	r0, sl
 800202c:	2301      	movs	r3, #1
 800202e:	3801      	subs	r0, #1
 8002030:	4398      	bics	r0, r3
 8002032:	3001      	adds	r0, #1
 8002034:	e004      	b.n	8002040 <__ledf2+0xa8>
 8002036:	2201      	movs	r2, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	4393      	bics	r3, r2
 800203c:	0018      	movs	r0, r3
 800203e:	3001      	adds	r0, #1
 8002040:	bc1c      	pop	{r2, r3, r4}
 8002042:	4690      	mov	r8, r2
 8002044:	4699      	mov	r9, r3
 8002046:	46a2      	mov	sl, r4
 8002048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204a:	433a      	orrs	r2, r7
 800204c:	d1d0      	bne.n	8001ff0 <__ledf2+0x58>
 800204e:	459a      	cmp	sl, r3
 8002050:	d1c5      	bne.n	8001fde <__ledf2+0x46>
 8002052:	42a5      	cmp	r5, r4
 8002054:	dcc3      	bgt.n	8001fde <__ledf2+0x46>
 8002056:	e7e0      	b.n	800201a <__ledf2+0x82>
 8002058:	45c8      	cmp	r8, r9
 800205a:	d8c0      	bhi.n	8001fde <__ledf2+0x46>
 800205c:	2000      	movs	r0, #0
 800205e:	45c8      	cmp	r8, r9
 8002060:	d3e3      	bcc.n	800202a <__ledf2+0x92>
 8002062:	e7ed      	b.n	8002040 <__ledf2+0xa8>
 8002064:	000007ff 	.word	0x000007ff

08002068 <__aeabi_dmul>:
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206a:	4657      	mov	r7, sl
 800206c:	46de      	mov	lr, fp
 800206e:	464e      	mov	r6, r9
 8002070:	4645      	mov	r5, r8
 8002072:	b5e0      	push	{r5, r6, r7, lr}
 8002074:	4683      	mov	fp, r0
 8002076:	0006      	movs	r6, r0
 8002078:	030f      	lsls	r7, r1, #12
 800207a:	0048      	lsls	r0, r1, #1
 800207c:	b087      	sub	sp, #28
 800207e:	4692      	mov	sl, r2
 8002080:	001d      	movs	r5, r3
 8002082:	0b3f      	lsrs	r7, r7, #12
 8002084:	0d40      	lsrs	r0, r0, #21
 8002086:	0fcc      	lsrs	r4, r1, #31
 8002088:	2800      	cmp	r0, #0
 800208a:	d100      	bne.n	800208e <__aeabi_dmul+0x26>
 800208c:	e06f      	b.n	800216e <__aeabi_dmul+0x106>
 800208e:	4bde      	ldr	r3, [pc, #888]	; (8002408 <__aeabi_dmul+0x3a0>)
 8002090:	4298      	cmp	r0, r3
 8002092:	d038      	beq.n	8002106 <__aeabi_dmul+0x9e>
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	00ff      	lsls	r7, r7, #3
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	431f      	orrs	r7, r3
 800209c:	0f73      	lsrs	r3, r6, #29
 800209e:	433b      	orrs	r3, r7
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	4bda      	ldr	r3, [pc, #872]	; (800240c <__aeabi_dmul+0x3a4>)
 80020a4:	2700      	movs	r7, #0
 80020a6:	4699      	mov	r9, r3
 80020a8:	2300      	movs	r3, #0
 80020aa:	469b      	mov	fp, r3
 80020ac:	00f6      	lsls	r6, r6, #3
 80020ae:	4481      	add	r9, r0
 80020b0:	032b      	lsls	r3, r5, #12
 80020b2:	0069      	lsls	r1, r5, #1
 80020b4:	0b1b      	lsrs	r3, r3, #12
 80020b6:	4652      	mov	r2, sl
 80020b8:	4698      	mov	r8, r3
 80020ba:	0d49      	lsrs	r1, r1, #21
 80020bc:	0fed      	lsrs	r5, r5, #31
 80020be:	2900      	cmp	r1, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dmul+0x5c>
 80020c2:	e085      	b.n	80021d0 <__aeabi_dmul+0x168>
 80020c4:	4bd0      	ldr	r3, [pc, #832]	; (8002408 <__aeabi_dmul+0x3a0>)
 80020c6:	4299      	cmp	r1, r3
 80020c8:	d100      	bne.n	80020cc <__aeabi_dmul+0x64>
 80020ca:	e073      	b.n	80021b4 <__aeabi_dmul+0x14c>
 80020cc:	4643      	mov	r3, r8
 80020ce:	00da      	lsls	r2, r3, #3
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	4313      	orrs	r3, r2
 80020d6:	4652      	mov	r2, sl
 80020d8:	48cc      	ldr	r0, [pc, #816]	; (800240c <__aeabi_dmul+0x3a4>)
 80020da:	0f52      	lsrs	r2, r2, #29
 80020dc:	4684      	mov	ip, r0
 80020de:	4313      	orrs	r3, r2
 80020e0:	4652      	mov	r2, sl
 80020e2:	2000      	movs	r0, #0
 80020e4:	4461      	add	r1, ip
 80020e6:	00d2      	lsls	r2, r2, #3
 80020e8:	4489      	add	r9, r1
 80020ea:	0021      	movs	r1, r4
 80020ec:	4069      	eors	r1, r5
 80020ee:	9100      	str	r1, [sp, #0]
 80020f0:	468c      	mov	ip, r1
 80020f2:	2101      	movs	r1, #1
 80020f4:	4449      	add	r1, r9
 80020f6:	468a      	mov	sl, r1
 80020f8:	2f0f      	cmp	r7, #15
 80020fa:	d900      	bls.n	80020fe <__aeabi_dmul+0x96>
 80020fc:	e090      	b.n	8002220 <__aeabi_dmul+0x1b8>
 80020fe:	49c4      	ldr	r1, [pc, #784]	; (8002410 <__aeabi_dmul+0x3a8>)
 8002100:	00bf      	lsls	r7, r7, #2
 8002102:	59cf      	ldr	r7, [r1, r7]
 8002104:	46bf      	mov	pc, r7
 8002106:	465b      	mov	r3, fp
 8002108:	433b      	orrs	r3, r7
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	d000      	beq.n	8002110 <__aeabi_dmul+0xa8>
 800210e:	e16a      	b.n	80023e6 <__aeabi_dmul+0x37e>
 8002110:	2302      	movs	r3, #2
 8002112:	2708      	movs	r7, #8
 8002114:	2600      	movs	r6, #0
 8002116:	4681      	mov	r9, r0
 8002118:	469b      	mov	fp, r3
 800211a:	e7c9      	b.n	80020b0 <__aeabi_dmul+0x48>
 800211c:	0032      	movs	r2, r6
 800211e:	4658      	mov	r0, fp
 8002120:	9b01      	ldr	r3, [sp, #4]
 8002122:	4661      	mov	r1, ip
 8002124:	9100      	str	r1, [sp, #0]
 8002126:	2802      	cmp	r0, #2
 8002128:	d100      	bne.n	800212c <__aeabi_dmul+0xc4>
 800212a:	e075      	b.n	8002218 <__aeabi_dmul+0x1b0>
 800212c:	2803      	cmp	r0, #3
 800212e:	d100      	bne.n	8002132 <__aeabi_dmul+0xca>
 8002130:	e1fe      	b.n	8002530 <__aeabi_dmul+0x4c8>
 8002132:	2801      	cmp	r0, #1
 8002134:	d000      	beq.n	8002138 <__aeabi_dmul+0xd0>
 8002136:	e12c      	b.n	8002392 <__aeabi_dmul+0x32a>
 8002138:	2300      	movs	r3, #0
 800213a:	2700      	movs	r7, #0
 800213c:	2600      	movs	r6, #0
 800213e:	2500      	movs	r5, #0
 8002140:	033f      	lsls	r7, r7, #12
 8002142:	0d2a      	lsrs	r2, r5, #20
 8002144:	0b3f      	lsrs	r7, r7, #12
 8002146:	48b3      	ldr	r0, [pc, #716]	; (8002414 <__aeabi_dmul+0x3ac>)
 8002148:	0512      	lsls	r2, r2, #20
 800214a:	433a      	orrs	r2, r7
 800214c:	4002      	ands	r2, r0
 800214e:	051b      	lsls	r3, r3, #20
 8002150:	4313      	orrs	r3, r2
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	07d1      	lsls	r1, r2, #31
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	430b      	orrs	r3, r1
 800215c:	0030      	movs	r0, r6
 800215e:	0019      	movs	r1, r3
 8002160:	b007      	add	sp, #28
 8002162:	bc3c      	pop	{r2, r3, r4, r5}
 8002164:	4690      	mov	r8, r2
 8002166:	4699      	mov	r9, r3
 8002168:	46a2      	mov	sl, r4
 800216a:	46ab      	mov	fp, r5
 800216c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800216e:	465b      	mov	r3, fp
 8002170:	433b      	orrs	r3, r7
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	d100      	bne.n	8002178 <__aeabi_dmul+0x110>
 8002176:	e12f      	b.n	80023d8 <__aeabi_dmul+0x370>
 8002178:	2f00      	cmp	r7, #0
 800217a:	d100      	bne.n	800217e <__aeabi_dmul+0x116>
 800217c:	e1a5      	b.n	80024ca <__aeabi_dmul+0x462>
 800217e:	0038      	movs	r0, r7
 8002180:	f000 fec0 	bl	8002f04 <__clzsi2>
 8002184:	0003      	movs	r3, r0
 8002186:	3b0b      	subs	r3, #11
 8002188:	2b1c      	cmp	r3, #28
 800218a:	dd00      	ble.n	800218e <__aeabi_dmul+0x126>
 800218c:	e196      	b.n	80024bc <__aeabi_dmul+0x454>
 800218e:	221d      	movs	r2, #29
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	465a      	mov	r2, fp
 8002194:	0001      	movs	r1, r0
 8002196:	40da      	lsrs	r2, r3
 8002198:	465e      	mov	r6, fp
 800219a:	3908      	subs	r1, #8
 800219c:	408f      	lsls	r7, r1
 800219e:	0013      	movs	r3, r2
 80021a0:	408e      	lsls	r6, r1
 80021a2:	433b      	orrs	r3, r7
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	4b9c      	ldr	r3, [pc, #624]	; (8002418 <__aeabi_dmul+0x3b0>)
 80021a8:	2700      	movs	r7, #0
 80021aa:	1a1b      	subs	r3, r3, r0
 80021ac:	4699      	mov	r9, r3
 80021ae:	2300      	movs	r3, #0
 80021b0:	469b      	mov	fp, r3
 80021b2:	e77d      	b.n	80020b0 <__aeabi_dmul+0x48>
 80021b4:	4641      	mov	r1, r8
 80021b6:	4653      	mov	r3, sl
 80021b8:	430b      	orrs	r3, r1
 80021ba:	4993      	ldr	r1, [pc, #588]	; (8002408 <__aeabi_dmul+0x3a0>)
 80021bc:	468c      	mov	ip, r1
 80021be:	44e1      	add	r9, ip
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d000      	beq.n	80021c6 <__aeabi_dmul+0x15e>
 80021c4:	e11a      	b.n	80023fc <__aeabi_dmul+0x394>
 80021c6:	2202      	movs	r2, #2
 80021c8:	2002      	movs	r0, #2
 80021ca:	4317      	orrs	r7, r2
 80021cc:	2200      	movs	r2, #0
 80021ce:	e78c      	b.n	80020ea <__aeabi_dmul+0x82>
 80021d0:	4313      	orrs	r3, r2
 80021d2:	d100      	bne.n	80021d6 <__aeabi_dmul+0x16e>
 80021d4:	e10d      	b.n	80023f2 <__aeabi_dmul+0x38a>
 80021d6:	4643      	mov	r3, r8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d100      	bne.n	80021de <__aeabi_dmul+0x176>
 80021dc:	e181      	b.n	80024e2 <__aeabi_dmul+0x47a>
 80021de:	4640      	mov	r0, r8
 80021e0:	f000 fe90 	bl	8002f04 <__clzsi2>
 80021e4:	0002      	movs	r2, r0
 80021e6:	3a0b      	subs	r2, #11
 80021e8:	2a1c      	cmp	r2, #28
 80021ea:	dd00      	ble.n	80021ee <__aeabi_dmul+0x186>
 80021ec:	e172      	b.n	80024d4 <__aeabi_dmul+0x46c>
 80021ee:	0001      	movs	r1, r0
 80021f0:	4643      	mov	r3, r8
 80021f2:	3908      	subs	r1, #8
 80021f4:	408b      	lsls	r3, r1
 80021f6:	4698      	mov	r8, r3
 80021f8:	231d      	movs	r3, #29
 80021fa:	1a9a      	subs	r2, r3, r2
 80021fc:	4653      	mov	r3, sl
 80021fe:	40d3      	lsrs	r3, r2
 8002200:	001a      	movs	r2, r3
 8002202:	4643      	mov	r3, r8
 8002204:	4313      	orrs	r3, r2
 8002206:	4652      	mov	r2, sl
 8002208:	408a      	lsls	r2, r1
 800220a:	4649      	mov	r1, r9
 800220c:	1a08      	subs	r0, r1, r0
 800220e:	4982      	ldr	r1, [pc, #520]	; (8002418 <__aeabi_dmul+0x3b0>)
 8002210:	4689      	mov	r9, r1
 8002212:	4481      	add	r9, r0
 8002214:	2000      	movs	r0, #0
 8002216:	e768      	b.n	80020ea <__aeabi_dmul+0x82>
 8002218:	4b7b      	ldr	r3, [pc, #492]	; (8002408 <__aeabi_dmul+0x3a0>)
 800221a:	2700      	movs	r7, #0
 800221c:	2600      	movs	r6, #0
 800221e:	e78e      	b.n	800213e <__aeabi_dmul+0xd6>
 8002220:	0c14      	lsrs	r4, r2, #16
 8002222:	0412      	lsls	r2, r2, #16
 8002224:	0c12      	lsrs	r2, r2, #16
 8002226:	0011      	movs	r1, r2
 8002228:	0c37      	lsrs	r7, r6, #16
 800222a:	0436      	lsls	r6, r6, #16
 800222c:	0c35      	lsrs	r5, r6, #16
 800222e:	4379      	muls	r1, r7
 8002230:	0028      	movs	r0, r5
 8002232:	468c      	mov	ip, r1
 8002234:	002e      	movs	r6, r5
 8002236:	4360      	muls	r0, r4
 8002238:	4460      	add	r0, ip
 800223a:	4683      	mov	fp, r0
 800223c:	4356      	muls	r6, r2
 800223e:	0021      	movs	r1, r4
 8002240:	0c30      	lsrs	r0, r6, #16
 8002242:	4680      	mov	r8, r0
 8002244:	4658      	mov	r0, fp
 8002246:	4379      	muls	r1, r7
 8002248:	4440      	add	r0, r8
 800224a:	9102      	str	r1, [sp, #8]
 800224c:	4584      	cmp	ip, r0
 800224e:	d906      	bls.n	800225e <__aeabi_dmul+0x1f6>
 8002250:	4688      	mov	r8, r1
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0249      	lsls	r1, r1, #9
 8002256:	468c      	mov	ip, r1
 8002258:	44e0      	add	r8, ip
 800225a:	4641      	mov	r1, r8
 800225c:	9102      	str	r1, [sp, #8]
 800225e:	0436      	lsls	r6, r6, #16
 8002260:	0c01      	lsrs	r1, r0, #16
 8002262:	0c36      	lsrs	r6, r6, #16
 8002264:	0400      	lsls	r0, r0, #16
 8002266:	468b      	mov	fp, r1
 8002268:	1981      	adds	r1, r0, r6
 800226a:	0c1e      	lsrs	r6, r3, #16
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	0c1b      	lsrs	r3, r3, #16
 8002270:	9103      	str	r1, [sp, #12]
 8002272:	0019      	movs	r1, r3
 8002274:	4379      	muls	r1, r7
 8002276:	468c      	mov	ip, r1
 8002278:	0028      	movs	r0, r5
 800227a:	4375      	muls	r5, r6
 800227c:	4465      	add	r5, ip
 800227e:	46a8      	mov	r8, r5
 8002280:	4358      	muls	r0, r3
 8002282:	0c05      	lsrs	r5, r0, #16
 8002284:	4445      	add	r5, r8
 8002286:	4377      	muls	r7, r6
 8002288:	42a9      	cmp	r1, r5
 800228a:	d903      	bls.n	8002294 <__aeabi_dmul+0x22c>
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0249      	lsls	r1, r1, #9
 8002290:	468c      	mov	ip, r1
 8002292:	4467      	add	r7, ip
 8002294:	0c29      	lsrs	r1, r5, #16
 8002296:	468c      	mov	ip, r1
 8002298:	0039      	movs	r1, r7
 800229a:	0400      	lsls	r0, r0, #16
 800229c:	0c00      	lsrs	r0, r0, #16
 800229e:	042d      	lsls	r5, r5, #16
 80022a0:	182d      	adds	r5, r5, r0
 80022a2:	4461      	add	r1, ip
 80022a4:	44ab      	add	fp, r5
 80022a6:	9105      	str	r1, [sp, #20]
 80022a8:	4659      	mov	r1, fp
 80022aa:	9104      	str	r1, [sp, #16]
 80022ac:	9901      	ldr	r1, [sp, #4]
 80022ae:	040f      	lsls	r7, r1, #16
 80022b0:	0c3f      	lsrs	r7, r7, #16
 80022b2:	0c08      	lsrs	r0, r1, #16
 80022b4:	0039      	movs	r1, r7
 80022b6:	4351      	muls	r1, r2
 80022b8:	4342      	muls	r2, r0
 80022ba:	4690      	mov	r8, r2
 80022bc:	0002      	movs	r2, r0
 80022be:	468c      	mov	ip, r1
 80022c0:	0c09      	lsrs	r1, r1, #16
 80022c2:	468b      	mov	fp, r1
 80022c4:	4362      	muls	r2, r4
 80022c6:	437c      	muls	r4, r7
 80022c8:	4444      	add	r4, r8
 80022ca:	445c      	add	r4, fp
 80022cc:	45a0      	cmp	r8, r4
 80022ce:	d903      	bls.n	80022d8 <__aeabi_dmul+0x270>
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	0249      	lsls	r1, r1, #9
 80022d4:	4688      	mov	r8, r1
 80022d6:	4442      	add	r2, r8
 80022d8:	0c21      	lsrs	r1, r4, #16
 80022da:	4688      	mov	r8, r1
 80022dc:	4661      	mov	r1, ip
 80022de:	0409      	lsls	r1, r1, #16
 80022e0:	0c09      	lsrs	r1, r1, #16
 80022e2:	468c      	mov	ip, r1
 80022e4:	0039      	movs	r1, r7
 80022e6:	4359      	muls	r1, r3
 80022e8:	4343      	muls	r3, r0
 80022ea:	4370      	muls	r0, r6
 80022ec:	437e      	muls	r6, r7
 80022ee:	0c0f      	lsrs	r7, r1, #16
 80022f0:	18f6      	adds	r6, r6, r3
 80022f2:	0424      	lsls	r4, r4, #16
 80022f4:	19be      	adds	r6, r7, r6
 80022f6:	4464      	add	r4, ip
 80022f8:	4442      	add	r2, r8
 80022fa:	468c      	mov	ip, r1
 80022fc:	42b3      	cmp	r3, r6
 80022fe:	d903      	bls.n	8002308 <__aeabi_dmul+0x2a0>
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	025b      	lsls	r3, r3, #9
 8002304:	4698      	mov	r8, r3
 8002306:	4440      	add	r0, r8
 8002308:	9b02      	ldr	r3, [sp, #8]
 800230a:	4661      	mov	r1, ip
 800230c:	4698      	mov	r8, r3
 800230e:	9b04      	ldr	r3, [sp, #16]
 8002310:	0437      	lsls	r7, r6, #16
 8002312:	4443      	add	r3, r8
 8002314:	469b      	mov	fp, r3
 8002316:	45ab      	cmp	fp, r5
 8002318:	41ad      	sbcs	r5, r5
 800231a:	426b      	negs	r3, r5
 800231c:	040d      	lsls	r5, r1, #16
 800231e:	9905      	ldr	r1, [sp, #20]
 8002320:	0c2d      	lsrs	r5, r5, #16
 8002322:	468c      	mov	ip, r1
 8002324:	197f      	adds	r7, r7, r5
 8002326:	4467      	add	r7, ip
 8002328:	18fd      	adds	r5, r7, r3
 800232a:	46a8      	mov	r8, r5
 800232c:	465d      	mov	r5, fp
 800232e:	192d      	adds	r5, r5, r4
 8002330:	42a5      	cmp	r5, r4
 8002332:	41a4      	sbcs	r4, r4
 8002334:	4693      	mov	fp, r2
 8002336:	4264      	negs	r4, r4
 8002338:	46a4      	mov	ip, r4
 800233a:	44c3      	add	fp, r8
 800233c:	44dc      	add	ip, fp
 800233e:	428f      	cmp	r7, r1
 8002340:	41bf      	sbcs	r7, r7
 8002342:	4598      	cmp	r8, r3
 8002344:	419b      	sbcs	r3, r3
 8002346:	4593      	cmp	fp, r2
 8002348:	4192      	sbcs	r2, r2
 800234a:	45a4      	cmp	ip, r4
 800234c:	41a4      	sbcs	r4, r4
 800234e:	425b      	negs	r3, r3
 8002350:	427f      	negs	r7, r7
 8002352:	431f      	orrs	r7, r3
 8002354:	0c36      	lsrs	r6, r6, #16
 8002356:	4252      	negs	r2, r2
 8002358:	4264      	negs	r4, r4
 800235a:	19bf      	adds	r7, r7, r6
 800235c:	4322      	orrs	r2, r4
 800235e:	18bf      	adds	r7, r7, r2
 8002360:	4662      	mov	r2, ip
 8002362:	1838      	adds	r0, r7, r0
 8002364:	0243      	lsls	r3, r0, #9
 8002366:	0dd2      	lsrs	r2, r2, #23
 8002368:	9903      	ldr	r1, [sp, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	026a      	lsls	r2, r5, #9
 800236e:	430a      	orrs	r2, r1
 8002370:	1e50      	subs	r0, r2, #1
 8002372:	4182      	sbcs	r2, r0
 8002374:	4661      	mov	r1, ip
 8002376:	0ded      	lsrs	r5, r5, #23
 8002378:	432a      	orrs	r2, r5
 800237a:	024e      	lsls	r6, r1, #9
 800237c:	4332      	orrs	r2, r6
 800237e:	01d9      	lsls	r1, r3, #7
 8002380:	d400      	bmi.n	8002384 <__aeabi_dmul+0x31c>
 8002382:	e0b3      	b.n	80024ec <__aeabi_dmul+0x484>
 8002384:	2601      	movs	r6, #1
 8002386:	0850      	lsrs	r0, r2, #1
 8002388:	4032      	ands	r2, r6
 800238a:	4302      	orrs	r2, r0
 800238c:	07de      	lsls	r6, r3, #31
 800238e:	4332      	orrs	r2, r6
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	4c22      	ldr	r4, [pc, #136]	; (800241c <__aeabi_dmul+0x3b4>)
 8002394:	4454      	add	r4, sl
 8002396:	2c00      	cmp	r4, #0
 8002398:	dd62      	ble.n	8002460 <__aeabi_dmul+0x3f8>
 800239a:	0751      	lsls	r1, r2, #29
 800239c:	d009      	beq.n	80023b2 <__aeabi_dmul+0x34a>
 800239e:	200f      	movs	r0, #15
 80023a0:	4010      	ands	r0, r2
 80023a2:	2804      	cmp	r0, #4
 80023a4:	d005      	beq.n	80023b2 <__aeabi_dmul+0x34a>
 80023a6:	1d10      	adds	r0, r2, #4
 80023a8:	4290      	cmp	r0, r2
 80023aa:	4192      	sbcs	r2, r2
 80023ac:	4252      	negs	r2, r2
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	0002      	movs	r2, r0
 80023b2:	01d9      	lsls	r1, r3, #7
 80023b4:	d504      	bpl.n	80023c0 <__aeabi_dmul+0x358>
 80023b6:	2480      	movs	r4, #128	; 0x80
 80023b8:	4819      	ldr	r0, [pc, #100]	; (8002420 <__aeabi_dmul+0x3b8>)
 80023ba:	00e4      	lsls	r4, r4, #3
 80023bc:	4003      	ands	r3, r0
 80023be:	4454      	add	r4, sl
 80023c0:	4818      	ldr	r0, [pc, #96]	; (8002424 <__aeabi_dmul+0x3bc>)
 80023c2:	4284      	cmp	r4, r0
 80023c4:	dd00      	ble.n	80023c8 <__aeabi_dmul+0x360>
 80023c6:	e727      	b.n	8002218 <__aeabi_dmul+0x1b0>
 80023c8:	075e      	lsls	r6, r3, #29
 80023ca:	025b      	lsls	r3, r3, #9
 80023cc:	08d2      	lsrs	r2, r2, #3
 80023ce:	0b1f      	lsrs	r7, r3, #12
 80023d0:	0563      	lsls	r3, r4, #21
 80023d2:	4316      	orrs	r6, r2
 80023d4:	0d5b      	lsrs	r3, r3, #21
 80023d6:	e6b2      	b.n	800213e <__aeabi_dmul+0xd6>
 80023d8:	2300      	movs	r3, #0
 80023da:	4699      	mov	r9, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	2704      	movs	r7, #4
 80023e0:	2600      	movs	r6, #0
 80023e2:	469b      	mov	fp, r3
 80023e4:	e664      	b.n	80020b0 <__aeabi_dmul+0x48>
 80023e6:	2303      	movs	r3, #3
 80023e8:	9701      	str	r7, [sp, #4]
 80023ea:	4681      	mov	r9, r0
 80023ec:	270c      	movs	r7, #12
 80023ee:	469b      	mov	fp, r3
 80023f0:	e65e      	b.n	80020b0 <__aeabi_dmul+0x48>
 80023f2:	2201      	movs	r2, #1
 80023f4:	2001      	movs	r0, #1
 80023f6:	4317      	orrs	r7, r2
 80023f8:	2200      	movs	r2, #0
 80023fa:	e676      	b.n	80020ea <__aeabi_dmul+0x82>
 80023fc:	2303      	movs	r3, #3
 80023fe:	2003      	movs	r0, #3
 8002400:	431f      	orrs	r7, r3
 8002402:	4643      	mov	r3, r8
 8002404:	e671      	b.n	80020ea <__aeabi_dmul+0x82>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	000007ff 	.word	0x000007ff
 800240c:	fffffc01 	.word	0xfffffc01
 8002410:	08018c8c 	.word	0x08018c8c
 8002414:	800fffff 	.word	0x800fffff
 8002418:	fffffc0d 	.word	0xfffffc0d
 800241c:	000003ff 	.word	0x000003ff
 8002420:	feffffff 	.word	0xfeffffff
 8002424:	000007fe 	.word	0x000007fe
 8002428:	2300      	movs	r3, #0
 800242a:	2780      	movs	r7, #128	; 0x80
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	033f      	lsls	r7, r7, #12
 8002430:	2600      	movs	r6, #0
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <__aeabi_dmul+0x4d8>)
 8002434:	e683      	b.n	800213e <__aeabi_dmul+0xd6>
 8002436:	9b01      	ldr	r3, [sp, #4]
 8002438:	0032      	movs	r2, r6
 800243a:	46a4      	mov	ip, r4
 800243c:	4658      	mov	r0, fp
 800243e:	e670      	b.n	8002122 <__aeabi_dmul+0xba>
 8002440:	46ac      	mov	ip, r5
 8002442:	e66e      	b.n	8002122 <__aeabi_dmul+0xba>
 8002444:	2780      	movs	r7, #128	; 0x80
 8002446:	9901      	ldr	r1, [sp, #4]
 8002448:	033f      	lsls	r7, r7, #12
 800244a:	4239      	tst	r1, r7
 800244c:	d02d      	beq.n	80024aa <__aeabi_dmul+0x442>
 800244e:	423b      	tst	r3, r7
 8002450:	d12b      	bne.n	80024aa <__aeabi_dmul+0x442>
 8002452:	431f      	orrs	r7, r3
 8002454:	033f      	lsls	r7, r7, #12
 8002456:	0b3f      	lsrs	r7, r7, #12
 8002458:	9500      	str	r5, [sp, #0]
 800245a:	0016      	movs	r6, r2
 800245c:	4b38      	ldr	r3, [pc, #224]	; (8002540 <__aeabi_dmul+0x4d8>)
 800245e:	e66e      	b.n	800213e <__aeabi_dmul+0xd6>
 8002460:	2501      	movs	r5, #1
 8002462:	1b2d      	subs	r5, r5, r4
 8002464:	2d38      	cmp	r5, #56	; 0x38
 8002466:	dd00      	ble.n	800246a <__aeabi_dmul+0x402>
 8002468:	e666      	b.n	8002138 <__aeabi_dmul+0xd0>
 800246a:	2d1f      	cmp	r5, #31
 800246c:	dc40      	bgt.n	80024f0 <__aeabi_dmul+0x488>
 800246e:	4835      	ldr	r0, [pc, #212]	; (8002544 <__aeabi_dmul+0x4dc>)
 8002470:	001c      	movs	r4, r3
 8002472:	4450      	add	r0, sl
 8002474:	0016      	movs	r6, r2
 8002476:	4082      	lsls	r2, r0
 8002478:	4084      	lsls	r4, r0
 800247a:	40ee      	lsrs	r6, r5
 800247c:	1e50      	subs	r0, r2, #1
 800247e:	4182      	sbcs	r2, r0
 8002480:	4334      	orrs	r4, r6
 8002482:	4314      	orrs	r4, r2
 8002484:	40eb      	lsrs	r3, r5
 8002486:	0762      	lsls	r2, r4, #29
 8002488:	d009      	beq.n	800249e <__aeabi_dmul+0x436>
 800248a:	220f      	movs	r2, #15
 800248c:	4022      	ands	r2, r4
 800248e:	2a04      	cmp	r2, #4
 8002490:	d005      	beq.n	800249e <__aeabi_dmul+0x436>
 8002492:	0022      	movs	r2, r4
 8002494:	1d14      	adds	r4, r2, #4
 8002496:	4294      	cmp	r4, r2
 8002498:	4180      	sbcs	r0, r0
 800249a:	4240      	negs	r0, r0
 800249c:	181b      	adds	r3, r3, r0
 800249e:	021a      	lsls	r2, r3, #8
 80024a0:	d53e      	bpl.n	8002520 <__aeabi_dmul+0x4b8>
 80024a2:	2301      	movs	r3, #1
 80024a4:	2700      	movs	r7, #0
 80024a6:	2600      	movs	r6, #0
 80024a8:	e649      	b.n	800213e <__aeabi_dmul+0xd6>
 80024aa:	2780      	movs	r7, #128	; 0x80
 80024ac:	9b01      	ldr	r3, [sp, #4]
 80024ae:	033f      	lsls	r7, r7, #12
 80024b0:	431f      	orrs	r7, r3
 80024b2:	033f      	lsls	r7, r7, #12
 80024b4:	0b3f      	lsrs	r7, r7, #12
 80024b6:	9400      	str	r4, [sp, #0]
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <__aeabi_dmul+0x4d8>)
 80024ba:	e640      	b.n	800213e <__aeabi_dmul+0xd6>
 80024bc:	0003      	movs	r3, r0
 80024be:	465a      	mov	r2, fp
 80024c0:	3b28      	subs	r3, #40	; 0x28
 80024c2:	409a      	lsls	r2, r3
 80024c4:	2600      	movs	r6, #0
 80024c6:	9201      	str	r2, [sp, #4]
 80024c8:	e66d      	b.n	80021a6 <__aeabi_dmul+0x13e>
 80024ca:	4658      	mov	r0, fp
 80024cc:	f000 fd1a 	bl	8002f04 <__clzsi2>
 80024d0:	3020      	adds	r0, #32
 80024d2:	e657      	b.n	8002184 <__aeabi_dmul+0x11c>
 80024d4:	0003      	movs	r3, r0
 80024d6:	4652      	mov	r2, sl
 80024d8:	3b28      	subs	r3, #40	; 0x28
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	2200      	movs	r2, #0
 80024e0:	e693      	b.n	800220a <__aeabi_dmul+0x1a2>
 80024e2:	4650      	mov	r0, sl
 80024e4:	f000 fd0e 	bl	8002f04 <__clzsi2>
 80024e8:	3020      	adds	r0, #32
 80024ea:	e67b      	b.n	80021e4 <__aeabi_dmul+0x17c>
 80024ec:	46ca      	mov	sl, r9
 80024ee:	e750      	b.n	8002392 <__aeabi_dmul+0x32a>
 80024f0:	201f      	movs	r0, #31
 80024f2:	001e      	movs	r6, r3
 80024f4:	4240      	negs	r0, r0
 80024f6:	1b04      	subs	r4, r0, r4
 80024f8:	40e6      	lsrs	r6, r4
 80024fa:	2d20      	cmp	r5, #32
 80024fc:	d003      	beq.n	8002506 <__aeabi_dmul+0x49e>
 80024fe:	4c12      	ldr	r4, [pc, #72]	; (8002548 <__aeabi_dmul+0x4e0>)
 8002500:	4454      	add	r4, sl
 8002502:	40a3      	lsls	r3, r4
 8002504:	431a      	orrs	r2, r3
 8002506:	1e50      	subs	r0, r2, #1
 8002508:	4182      	sbcs	r2, r0
 800250a:	4332      	orrs	r2, r6
 800250c:	2607      	movs	r6, #7
 800250e:	2700      	movs	r7, #0
 8002510:	4016      	ands	r6, r2
 8002512:	d009      	beq.n	8002528 <__aeabi_dmul+0x4c0>
 8002514:	200f      	movs	r0, #15
 8002516:	2300      	movs	r3, #0
 8002518:	4010      	ands	r0, r2
 800251a:	0014      	movs	r4, r2
 800251c:	2804      	cmp	r0, #4
 800251e:	d1b9      	bne.n	8002494 <__aeabi_dmul+0x42c>
 8002520:	0022      	movs	r2, r4
 8002522:	075e      	lsls	r6, r3, #29
 8002524:	025b      	lsls	r3, r3, #9
 8002526:	0b1f      	lsrs	r7, r3, #12
 8002528:	08d2      	lsrs	r2, r2, #3
 800252a:	4316      	orrs	r6, r2
 800252c:	2300      	movs	r3, #0
 800252e:	e606      	b.n	800213e <__aeabi_dmul+0xd6>
 8002530:	2780      	movs	r7, #128	; 0x80
 8002532:	033f      	lsls	r7, r7, #12
 8002534:	431f      	orrs	r7, r3
 8002536:	033f      	lsls	r7, r7, #12
 8002538:	0b3f      	lsrs	r7, r7, #12
 800253a:	0016      	movs	r6, r2
 800253c:	4b00      	ldr	r3, [pc, #0]	; (8002540 <__aeabi_dmul+0x4d8>)
 800253e:	e5fe      	b.n	800213e <__aeabi_dmul+0xd6>
 8002540:	000007ff 	.word	0x000007ff
 8002544:	0000041e 	.word	0x0000041e
 8002548:	0000043e 	.word	0x0000043e

0800254c <__aeabi_dsub>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	4657      	mov	r7, sl
 8002550:	464e      	mov	r6, r9
 8002552:	4645      	mov	r5, r8
 8002554:	46de      	mov	lr, fp
 8002556:	000c      	movs	r4, r1
 8002558:	0309      	lsls	r1, r1, #12
 800255a:	b5e0      	push	{r5, r6, r7, lr}
 800255c:	0a49      	lsrs	r1, r1, #9
 800255e:	0f46      	lsrs	r6, r0, #29
 8002560:	005f      	lsls	r7, r3, #1
 8002562:	4331      	orrs	r1, r6
 8002564:	031e      	lsls	r6, r3, #12
 8002566:	0fdb      	lsrs	r3, r3, #31
 8002568:	0a76      	lsrs	r6, r6, #9
 800256a:	469b      	mov	fp, r3
 800256c:	0f53      	lsrs	r3, r2, #29
 800256e:	4333      	orrs	r3, r6
 8002570:	4ec8      	ldr	r6, [pc, #800]	; (8002894 <__aeabi_dsub+0x348>)
 8002572:	0065      	lsls	r5, r4, #1
 8002574:	00c0      	lsls	r0, r0, #3
 8002576:	0fe4      	lsrs	r4, r4, #31
 8002578:	00d2      	lsls	r2, r2, #3
 800257a:	0d6d      	lsrs	r5, r5, #21
 800257c:	46a2      	mov	sl, r4
 800257e:	4681      	mov	r9, r0
 8002580:	0d7f      	lsrs	r7, r7, #21
 8002582:	469c      	mov	ip, r3
 8002584:	4690      	mov	r8, r2
 8002586:	42b7      	cmp	r7, r6
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x40>
 800258a:	e0b9      	b.n	8002700 <__aeabi_dsub+0x1b4>
 800258c:	465b      	mov	r3, fp
 800258e:	2601      	movs	r6, #1
 8002590:	4073      	eors	r3, r6
 8002592:	469b      	mov	fp, r3
 8002594:	1bee      	subs	r6, r5, r7
 8002596:	45a3      	cmp	fp, r4
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x50>
 800259a:	e083      	b.n	80026a4 <__aeabi_dsub+0x158>
 800259c:	2e00      	cmp	r6, #0
 800259e:	dd63      	ble.n	8002668 <__aeabi_dsub+0x11c>
 80025a0:	2f00      	cmp	r7, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x5a>
 80025a4:	e0b1      	b.n	800270a <__aeabi_dsub+0x1be>
 80025a6:	4663      	mov	r3, ip
 80025a8:	4313      	orrs	r3, r2
 80025aa:	d100      	bne.n	80025ae <__aeabi_dsub+0x62>
 80025ac:	e123      	b.n	80027f6 <__aeabi_dsub+0x2aa>
 80025ae:	1e73      	subs	r3, r6, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d000      	beq.n	80025b6 <__aeabi_dsub+0x6a>
 80025b4:	e1ba      	b.n	800292c <__aeabi_dsub+0x3e0>
 80025b6:	1a86      	subs	r6, r0, r2
 80025b8:	4663      	mov	r3, ip
 80025ba:	42b0      	cmp	r0, r6
 80025bc:	4180      	sbcs	r0, r0
 80025be:	2501      	movs	r5, #1
 80025c0:	1ac9      	subs	r1, r1, r3
 80025c2:	4240      	negs	r0, r0
 80025c4:	1a09      	subs	r1, r1, r0
 80025c6:	020b      	lsls	r3, r1, #8
 80025c8:	d400      	bmi.n	80025cc <__aeabi_dsub+0x80>
 80025ca:	e147      	b.n	800285c <__aeabi_dsub+0x310>
 80025cc:	0249      	lsls	r1, r1, #9
 80025ce:	0a4b      	lsrs	r3, r1, #9
 80025d0:	4698      	mov	r8, r3
 80025d2:	4643      	mov	r3, r8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x8e>
 80025d8:	e189      	b.n	80028ee <__aeabi_dsub+0x3a2>
 80025da:	4640      	mov	r0, r8
 80025dc:	f000 fc92 	bl	8002f04 <__clzsi2>
 80025e0:	0003      	movs	r3, r0
 80025e2:	3b08      	subs	r3, #8
 80025e4:	2b1f      	cmp	r3, #31
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x9e>
 80025e8:	e17c      	b.n	80028e4 <__aeabi_dsub+0x398>
 80025ea:	2220      	movs	r2, #32
 80025ec:	0030      	movs	r0, r6
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	4641      	mov	r1, r8
 80025f2:	40d0      	lsrs	r0, r2
 80025f4:	4099      	lsls	r1, r3
 80025f6:	0002      	movs	r2, r0
 80025f8:	409e      	lsls	r6, r3
 80025fa:	430a      	orrs	r2, r1
 80025fc:	429d      	cmp	r5, r3
 80025fe:	dd00      	ble.n	8002602 <__aeabi_dsub+0xb6>
 8002600:	e16a      	b.n	80028d8 <__aeabi_dsub+0x38c>
 8002602:	1b5d      	subs	r5, r3, r5
 8002604:	1c6b      	adds	r3, r5, #1
 8002606:	2b1f      	cmp	r3, #31
 8002608:	dd00      	ble.n	800260c <__aeabi_dsub+0xc0>
 800260a:	e194      	b.n	8002936 <__aeabi_dsub+0x3ea>
 800260c:	2120      	movs	r1, #32
 800260e:	0010      	movs	r0, r2
 8002610:	0035      	movs	r5, r6
 8002612:	1ac9      	subs	r1, r1, r3
 8002614:	408e      	lsls	r6, r1
 8002616:	40da      	lsrs	r2, r3
 8002618:	4088      	lsls	r0, r1
 800261a:	40dd      	lsrs	r5, r3
 800261c:	1e71      	subs	r1, r6, #1
 800261e:	418e      	sbcs	r6, r1
 8002620:	0011      	movs	r1, r2
 8002622:	2207      	movs	r2, #7
 8002624:	4328      	orrs	r0, r5
 8002626:	2500      	movs	r5, #0
 8002628:	4306      	orrs	r6, r0
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d009      	beq.n	8002644 <__aeabi_dsub+0xf8>
 8002630:	230f      	movs	r3, #15
 8002632:	4033      	ands	r3, r6
 8002634:	2b04      	cmp	r3, #4
 8002636:	d005      	beq.n	8002644 <__aeabi_dsub+0xf8>
 8002638:	1d33      	adds	r3, r6, #4
 800263a:	42b3      	cmp	r3, r6
 800263c:	41b6      	sbcs	r6, r6
 800263e:	4276      	negs	r6, r6
 8002640:	1989      	adds	r1, r1, r6
 8002642:	001e      	movs	r6, r3
 8002644:	020b      	lsls	r3, r1, #8
 8002646:	d400      	bmi.n	800264a <__aeabi_dsub+0xfe>
 8002648:	e23d      	b.n	8002ac6 <__aeabi_dsub+0x57a>
 800264a:	1c6a      	adds	r2, r5, #1
 800264c:	4b91      	ldr	r3, [pc, #580]	; (8002894 <__aeabi_dsub+0x348>)
 800264e:	0555      	lsls	r5, r2, #21
 8002650:	0d6d      	lsrs	r5, r5, #21
 8002652:	429a      	cmp	r2, r3
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x10c>
 8002656:	e119      	b.n	800288c <__aeabi_dsub+0x340>
 8002658:	4a8f      	ldr	r2, [pc, #572]	; (8002898 <__aeabi_dsub+0x34c>)
 800265a:	08f6      	lsrs	r6, r6, #3
 800265c:	400a      	ands	r2, r1
 800265e:	0757      	lsls	r7, r2, #29
 8002660:	0252      	lsls	r2, r2, #9
 8002662:	4337      	orrs	r7, r6
 8002664:	0b12      	lsrs	r2, r2, #12
 8002666:	e09b      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002668:	2e00      	cmp	r6, #0
 800266a:	d000      	beq.n	800266e <__aeabi_dsub+0x122>
 800266c:	e0c5      	b.n	80027fa <__aeabi_dsub+0x2ae>
 800266e:	1c6e      	adds	r6, r5, #1
 8002670:	0576      	lsls	r6, r6, #21
 8002672:	0d76      	lsrs	r6, r6, #21
 8002674:	2e01      	cmp	r6, #1
 8002676:	dc00      	bgt.n	800267a <__aeabi_dsub+0x12e>
 8002678:	e148      	b.n	800290c <__aeabi_dsub+0x3c0>
 800267a:	4667      	mov	r7, ip
 800267c:	1a86      	subs	r6, r0, r2
 800267e:	1bcb      	subs	r3, r1, r7
 8002680:	42b0      	cmp	r0, r6
 8002682:	41bf      	sbcs	r7, r7
 8002684:	427f      	negs	r7, r7
 8002686:	46b8      	mov	r8, r7
 8002688:	001f      	movs	r7, r3
 800268a:	4643      	mov	r3, r8
 800268c:	1aff      	subs	r7, r7, r3
 800268e:	003b      	movs	r3, r7
 8002690:	46b8      	mov	r8, r7
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	d500      	bpl.n	8002698 <__aeabi_dsub+0x14c>
 8002696:	e15f      	b.n	8002958 <__aeabi_dsub+0x40c>
 8002698:	4337      	orrs	r7, r6
 800269a:	d19a      	bne.n	80025d2 <__aeabi_dsub+0x86>
 800269c:	2200      	movs	r2, #0
 800269e:	2400      	movs	r4, #0
 80026a0:	2500      	movs	r5, #0
 80026a2:	e079      	b.n	8002798 <__aeabi_dsub+0x24c>
 80026a4:	2e00      	cmp	r6, #0
 80026a6:	dc00      	bgt.n	80026aa <__aeabi_dsub+0x15e>
 80026a8:	e0fa      	b.n	80028a0 <__aeabi_dsub+0x354>
 80026aa:	2f00      	cmp	r7, #0
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x164>
 80026ae:	e08d      	b.n	80027cc <__aeabi_dsub+0x280>
 80026b0:	4b78      	ldr	r3, [pc, #480]	; (8002894 <__aeabi_dsub+0x348>)
 80026b2:	429d      	cmp	r5, r3
 80026b4:	d067      	beq.n	8002786 <__aeabi_dsub+0x23a>
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	4667      	mov	r7, ip
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	431f      	orrs	r7, r3
 80026be:	46bc      	mov	ip, r7
 80026c0:	2e38      	cmp	r6, #56	; 0x38
 80026c2:	dc00      	bgt.n	80026c6 <__aeabi_dsub+0x17a>
 80026c4:	e152      	b.n	800296c <__aeabi_dsub+0x420>
 80026c6:	4663      	mov	r3, ip
 80026c8:	4313      	orrs	r3, r2
 80026ca:	1e5a      	subs	r2, r3, #1
 80026cc:	4193      	sbcs	r3, r2
 80026ce:	181e      	adds	r6, r3, r0
 80026d0:	4286      	cmp	r6, r0
 80026d2:	4180      	sbcs	r0, r0
 80026d4:	4240      	negs	r0, r0
 80026d6:	1809      	adds	r1, r1, r0
 80026d8:	020b      	lsls	r3, r1, #8
 80026da:	d400      	bmi.n	80026de <__aeabi_dsub+0x192>
 80026dc:	e0be      	b.n	800285c <__aeabi_dsub+0x310>
 80026de:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <__aeabi_dsub+0x348>)
 80026e0:	3501      	adds	r5, #1
 80026e2:	429d      	cmp	r5, r3
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x19c>
 80026e6:	e0d2      	b.n	800288e <__aeabi_dsub+0x342>
 80026e8:	4a6b      	ldr	r2, [pc, #428]	; (8002898 <__aeabi_dsub+0x34c>)
 80026ea:	0873      	lsrs	r3, r6, #1
 80026ec:	400a      	ands	r2, r1
 80026ee:	2101      	movs	r1, #1
 80026f0:	400e      	ands	r6, r1
 80026f2:	431e      	orrs	r6, r3
 80026f4:	0851      	lsrs	r1, r2, #1
 80026f6:	07d3      	lsls	r3, r2, #31
 80026f8:	2207      	movs	r2, #7
 80026fa:	431e      	orrs	r6, r3
 80026fc:	4032      	ands	r2, r6
 80026fe:	e795      	b.n	800262c <__aeabi_dsub+0xe0>
 8002700:	001e      	movs	r6, r3
 8002702:	4316      	orrs	r6, r2
 8002704:	d000      	beq.n	8002708 <__aeabi_dsub+0x1bc>
 8002706:	e745      	b.n	8002594 <__aeabi_dsub+0x48>
 8002708:	e740      	b.n	800258c <__aeabi_dsub+0x40>
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <__aeabi_dsub+0x348>)
 800270c:	429d      	cmp	r5, r3
 800270e:	d03a      	beq.n	8002786 <__aeabi_dsub+0x23a>
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	4667      	mov	r7, ip
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	431f      	orrs	r7, r3
 8002718:	46bc      	mov	ip, r7
 800271a:	2e38      	cmp	r6, #56	; 0x38
 800271c:	dd00      	ble.n	8002720 <__aeabi_dsub+0x1d4>
 800271e:	e0eb      	b.n	80028f8 <__aeabi_dsub+0x3ac>
 8002720:	2e1f      	cmp	r6, #31
 8002722:	dc00      	bgt.n	8002726 <__aeabi_dsub+0x1da>
 8002724:	e13a      	b.n	800299c <__aeabi_dsub+0x450>
 8002726:	0033      	movs	r3, r6
 8002728:	4667      	mov	r7, ip
 800272a:	3b20      	subs	r3, #32
 800272c:	40df      	lsrs	r7, r3
 800272e:	003b      	movs	r3, r7
 8002730:	2e20      	cmp	r6, #32
 8002732:	d005      	beq.n	8002740 <__aeabi_dsub+0x1f4>
 8002734:	2740      	movs	r7, #64	; 0x40
 8002736:	1bbf      	subs	r7, r7, r6
 8002738:	4666      	mov	r6, ip
 800273a:	40be      	lsls	r6, r7
 800273c:	4332      	orrs	r2, r6
 800273e:	4690      	mov	r8, r2
 8002740:	4646      	mov	r6, r8
 8002742:	1e72      	subs	r2, r6, #1
 8002744:	4196      	sbcs	r6, r2
 8002746:	4333      	orrs	r3, r6
 8002748:	e0da      	b.n	8002900 <__aeabi_dsub+0x3b4>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x204>
 800274e:	e214      	b.n	8002b7a <__aeabi_dsub+0x62e>
 8002750:	4663      	mov	r3, ip
 8002752:	4313      	orrs	r3, r2
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x20c>
 8002756:	e168      	b.n	8002a2a <__aeabi_dsub+0x4de>
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	074e      	lsls	r6, r1, #29
 800275c:	08c0      	lsrs	r0, r0, #3
 800275e:	08c9      	lsrs	r1, r1, #3
 8002760:	031b      	lsls	r3, r3, #12
 8002762:	4306      	orrs	r6, r0
 8002764:	4219      	tst	r1, r3
 8002766:	d008      	beq.n	800277a <__aeabi_dsub+0x22e>
 8002768:	4660      	mov	r0, ip
 800276a:	08c0      	lsrs	r0, r0, #3
 800276c:	4218      	tst	r0, r3
 800276e:	d104      	bne.n	800277a <__aeabi_dsub+0x22e>
 8002770:	4663      	mov	r3, ip
 8002772:	0001      	movs	r1, r0
 8002774:	08d2      	lsrs	r2, r2, #3
 8002776:	075e      	lsls	r6, r3, #29
 8002778:	4316      	orrs	r6, r2
 800277a:	00f3      	lsls	r3, r6, #3
 800277c:	4699      	mov	r9, r3
 800277e:	00c9      	lsls	r1, r1, #3
 8002780:	0f72      	lsrs	r2, r6, #29
 8002782:	4d44      	ldr	r5, [pc, #272]	; (8002894 <__aeabi_dsub+0x348>)
 8002784:	4311      	orrs	r1, r2
 8002786:	464b      	mov	r3, r9
 8002788:	08de      	lsrs	r6, r3, #3
 800278a:	4b42      	ldr	r3, [pc, #264]	; (8002894 <__aeabi_dsub+0x348>)
 800278c:	074f      	lsls	r7, r1, #29
 800278e:	4337      	orrs	r7, r6
 8002790:	08ca      	lsrs	r2, r1, #3
 8002792:	429d      	cmp	r5, r3
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x24c>
 8002796:	e06e      	b.n	8002876 <__aeabi_dsub+0x32a>
 8002798:	0312      	lsls	r2, r2, #12
 800279a:	056d      	lsls	r5, r5, #21
 800279c:	0b12      	lsrs	r2, r2, #12
 800279e:	0d6d      	lsrs	r5, r5, #21
 80027a0:	2100      	movs	r1, #0
 80027a2:	0312      	lsls	r2, r2, #12
 80027a4:	0b13      	lsrs	r3, r2, #12
 80027a6:	0d0a      	lsrs	r2, r1, #20
 80027a8:	0512      	lsls	r2, r2, #20
 80027aa:	431a      	orrs	r2, r3
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <__aeabi_dsub+0x350>)
 80027ae:	052d      	lsls	r5, r5, #20
 80027b0:	4013      	ands	r3, r2
 80027b2:	432b      	orrs	r3, r5
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	07e4      	lsls	r4, r4, #31
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	4323      	orrs	r3, r4
 80027bc:	0038      	movs	r0, r7
 80027be:	0019      	movs	r1, r3
 80027c0:	bc3c      	pop	{r2, r3, r4, r5}
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	46a2      	mov	sl, r4
 80027c8:	46ab      	mov	fp, r5
 80027ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027cc:	4663      	mov	r3, ip
 80027ce:	4313      	orrs	r3, r2
 80027d0:	d011      	beq.n	80027f6 <__aeabi_dsub+0x2aa>
 80027d2:	1e73      	subs	r3, r6, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d000      	beq.n	80027da <__aeabi_dsub+0x28e>
 80027d8:	e107      	b.n	80029ea <__aeabi_dsub+0x49e>
 80027da:	1886      	adds	r6, r0, r2
 80027dc:	4286      	cmp	r6, r0
 80027de:	4180      	sbcs	r0, r0
 80027e0:	4461      	add	r1, ip
 80027e2:	4240      	negs	r0, r0
 80027e4:	1809      	adds	r1, r1, r0
 80027e6:	2501      	movs	r5, #1
 80027e8:	020b      	lsls	r3, r1, #8
 80027ea:	d537      	bpl.n	800285c <__aeabi_dsub+0x310>
 80027ec:	2502      	movs	r5, #2
 80027ee:	e77b      	b.n	80026e8 <__aeabi_dsub+0x19c>
 80027f0:	003e      	movs	r6, r7
 80027f2:	4661      	mov	r1, ip
 80027f4:	4691      	mov	r9, r2
 80027f6:	0035      	movs	r5, r6
 80027f8:	e7c5      	b.n	8002786 <__aeabi_dsub+0x23a>
 80027fa:	465c      	mov	r4, fp
 80027fc:	2d00      	cmp	r5, #0
 80027fe:	d000      	beq.n	8002802 <__aeabi_dsub+0x2b6>
 8002800:	e0e1      	b.n	80029c6 <__aeabi_dsub+0x47a>
 8002802:	000b      	movs	r3, r1
 8002804:	4303      	orrs	r3, r0
 8002806:	d0f3      	beq.n	80027f0 <__aeabi_dsub+0x2a4>
 8002808:	1c73      	adds	r3, r6, #1
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x2c2>
 800280c:	e1ac      	b.n	8002b68 <__aeabi_dsub+0x61c>
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <__aeabi_dsub+0x348>)
 8002810:	429f      	cmp	r7, r3
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x2ca>
 8002814:	e13a      	b.n	8002a8c <__aeabi_dsub+0x540>
 8002816:	43f3      	mvns	r3, r6
 8002818:	2b38      	cmp	r3, #56	; 0x38
 800281a:	dd00      	ble.n	800281e <__aeabi_dsub+0x2d2>
 800281c:	e16f      	b.n	8002afe <__aeabi_dsub+0x5b2>
 800281e:	2b1f      	cmp	r3, #31
 8002820:	dd00      	ble.n	8002824 <__aeabi_dsub+0x2d8>
 8002822:	e18c      	b.n	8002b3e <__aeabi_dsub+0x5f2>
 8002824:	2520      	movs	r5, #32
 8002826:	000e      	movs	r6, r1
 8002828:	1aed      	subs	r5, r5, r3
 800282a:	40ae      	lsls	r6, r5
 800282c:	46b0      	mov	r8, r6
 800282e:	0006      	movs	r6, r0
 8002830:	46aa      	mov	sl, r5
 8002832:	40de      	lsrs	r6, r3
 8002834:	4645      	mov	r5, r8
 8002836:	4335      	orrs	r5, r6
 8002838:	002e      	movs	r6, r5
 800283a:	4655      	mov	r5, sl
 800283c:	40d9      	lsrs	r1, r3
 800283e:	40a8      	lsls	r0, r5
 8002840:	4663      	mov	r3, ip
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	1a5b      	subs	r3, r3, r1
 8002848:	469c      	mov	ip, r3
 800284a:	4330      	orrs	r0, r6
 800284c:	1a16      	subs	r6, r2, r0
 800284e:	42b2      	cmp	r2, r6
 8002850:	4192      	sbcs	r2, r2
 8002852:	4663      	mov	r3, ip
 8002854:	4252      	negs	r2, r2
 8002856:	1a99      	subs	r1, r3, r2
 8002858:	003d      	movs	r5, r7
 800285a:	e6b4      	b.n	80025c6 <__aeabi_dsub+0x7a>
 800285c:	2207      	movs	r2, #7
 800285e:	4032      	ands	r2, r6
 8002860:	2a00      	cmp	r2, #0
 8002862:	d000      	beq.n	8002866 <__aeabi_dsub+0x31a>
 8002864:	e6e4      	b.n	8002630 <__aeabi_dsub+0xe4>
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <__aeabi_dsub+0x348>)
 8002868:	08f6      	lsrs	r6, r6, #3
 800286a:	074f      	lsls	r7, r1, #29
 800286c:	4337      	orrs	r7, r6
 800286e:	08ca      	lsrs	r2, r1, #3
 8002870:	429d      	cmp	r5, r3
 8002872:	d000      	beq.n	8002876 <__aeabi_dsub+0x32a>
 8002874:	e790      	b.n	8002798 <__aeabi_dsub+0x24c>
 8002876:	003b      	movs	r3, r7
 8002878:	4313      	orrs	r3, r2
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x332>
 800287c:	e1a6      	b.n	8002bcc <__aeabi_dsub+0x680>
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	031b      	lsls	r3, r3, #12
 8002882:	431a      	orrs	r2, r3
 8002884:	0312      	lsls	r2, r2, #12
 8002886:	0b12      	lsrs	r2, r2, #12
 8002888:	4d02      	ldr	r5, [pc, #8]	; (8002894 <__aeabi_dsub+0x348>)
 800288a:	e789      	b.n	80027a0 <__aeabi_dsub+0x254>
 800288c:	0015      	movs	r5, r2
 800288e:	2200      	movs	r2, #0
 8002890:	2700      	movs	r7, #0
 8002892:	e785      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002894:	000007ff 	.word	0x000007ff
 8002898:	ff7fffff 	.word	0xff7fffff
 800289c:	800fffff 	.word	0x800fffff
 80028a0:	2e00      	cmp	r6, #0
 80028a2:	d000      	beq.n	80028a6 <__aeabi_dsub+0x35a>
 80028a4:	e0c7      	b.n	8002a36 <__aeabi_dsub+0x4ea>
 80028a6:	1c6b      	adds	r3, r5, #1
 80028a8:	055e      	lsls	r6, r3, #21
 80028aa:	0d76      	lsrs	r6, r6, #21
 80028ac:	2e01      	cmp	r6, #1
 80028ae:	dc00      	bgt.n	80028b2 <__aeabi_dsub+0x366>
 80028b0:	e0f0      	b.n	8002a94 <__aeabi_dsub+0x548>
 80028b2:	4dc8      	ldr	r5, [pc, #800]	; (8002bd4 <__aeabi_dsub+0x688>)
 80028b4:	42ab      	cmp	r3, r5
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x36e>
 80028b8:	e0b9      	b.n	8002a2e <__aeabi_dsub+0x4e2>
 80028ba:	1885      	adds	r5, r0, r2
 80028bc:	000a      	movs	r2, r1
 80028be:	4285      	cmp	r5, r0
 80028c0:	4189      	sbcs	r1, r1
 80028c2:	4462      	add	r2, ip
 80028c4:	4249      	negs	r1, r1
 80028c6:	1851      	adds	r1, r2, r1
 80028c8:	2207      	movs	r2, #7
 80028ca:	07ce      	lsls	r6, r1, #31
 80028cc:	086d      	lsrs	r5, r5, #1
 80028ce:	432e      	orrs	r6, r5
 80028d0:	0849      	lsrs	r1, r1, #1
 80028d2:	4032      	ands	r2, r6
 80028d4:	001d      	movs	r5, r3
 80028d6:	e6a9      	b.n	800262c <__aeabi_dsub+0xe0>
 80028d8:	49bf      	ldr	r1, [pc, #764]	; (8002bd8 <__aeabi_dsub+0x68c>)
 80028da:	1aed      	subs	r5, r5, r3
 80028dc:	4011      	ands	r1, r2
 80028de:	2207      	movs	r2, #7
 80028e0:	4032      	ands	r2, r6
 80028e2:	e6a3      	b.n	800262c <__aeabi_dsub+0xe0>
 80028e4:	0032      	movs	r2, r6
 80028e6:	3828      	subs	r0, #40	; 0x28
 80028e8:	4082      	lsls	r2, r0
 80028ea:	2600      	movs	r6, #0
 80028ec:	e686      	b.n	80025fc <__aeabi_dsub+0xb0>
 80028ee:	0030      	movs	r0, r6
 80028f0:	f000 fb08 	bl	8002f04 <__clzsi2>
 80028f4:	3020      	adds	r0, #32
 80028f6:	e673      	b.n	80025e0 <__aeabi_dsub+0x94>
 80028f8:	4663      	mov	r3, ip
 80028fa:	4313      	orrs	r3, r2
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	4193      	sbcs	r3, r2
 8002900:	1ac6      	subs	r6, r0, r3
 8002902:	42b0      	cmp	r0, r6
 8002904:	4180      	sbcs	r0, r0
 8002906:	4240      	negs	r0, r0
 8002908:	1a09      	subs	r1, r1, r0
 800290a:	e65c      	b.n	80025c6 <__aeabi_dsub+0x7a>
 800290c:	000e      	movs	r6, r1
 800290e:	4667      	mov	r7, ip
 8002910:	4306      	orrs	r6, r0
 8002912:	4317      	orrs	r7, r2
 8002914:	2d00      	cmp	r5, #0
 8002916:	d15e      	bne.n	80029d6 <__aeabi_dsub+0x48a>
 8002918:	2e00      	cmp	r6, #0
 800291a:	d000      	beq.n	800291e <__aeabi_dsub+0x3d2>
 800291c:	e0f3      	b.n	8002b06 <__aeabi_dsub+0x5ba>
 800291e:	2f00      	cmp	r7, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x3d8>
 8002922:	e11e      	b.n	8002b62 <__aeabi_dsub+0x616>
 8002924:	465c      	mov	r4, fp
 8002926:	4661      	mov	r1, ip
 8002928:	4691      	mov	r9, r2
 800292a:	e72c      	b.n	8002786 <__aeabi_dsub+0x23a>
 800292c:	4fa9      	ldr	r7, [pc, #676]	; (8002bd4 <__aeabi_dsub+0x688>)
 800292e:	42be      	cmp	r6, r7
 8002930:	d07b      	beq.n	8002a2a <__aeabi_dsub+0x4de>
 8002932:	001e      	movs	r6, r3
 8002934:	e6f1      	b.n	800271a <__aeabi_dsub+0x1ce>
 8002936:	0010      	movs	r0, r2
 8002938:	3d1f      	subs	r5, #31
 800293a:	40e8      	lsrs	r0, r5
 800293c:	2b20      	cmp	r3, #32
 800293e:	d003      	beq.n	8002948 <__aeabi_dsub+0x3fc>
 8002940:	2140      	movs	r1, #64	; 0x40
 8002942:	1acb      	subs	r3, r1, r3
 8002944:	409a      	lsls	r2, r3
 8002946:	4316      	orrs	r6, r2
 8002948:	1e73      	subs	r3, r6, #1
 800294a:	419e      	sbcs	r6, r3
 800294c:	2207      	movs	r2, #7
 800294e:	4306      	orrs	r6, r0
 8002950:	4032      	ands	r2, r6
 8002952:	2100      	movs	r1, #0
 8002954:	2500      	movs	r5, #0
 8002956:	e783      	b.n	8002860 <__aeabi_dsub+0x314>
 8002958:	1a16      	subs	r6, r2, r0
 800295a:	4663      	mov	r3, ip
 800295c:	42b2      	cmp	r2, r6
 800295e:	4180      	sbcs	r0, r0
 8002960:	1a59      	subs	r1, r3, r1
 8002962:	4240      	negs	r0, r0
 8002964:	1a0b      	subs	r3, r1, r0
 8002966:	4698      	mov	r8, r3
 8002968:	465c      	mov	r4, fp
 800296a:	e632      	b.n	80025d2 <__aeabi_dsub+0x86>
 800296c:	2e1f      	cmp	r6, #31
 800296e:	dd00      	ble.n	8002972 <__aeabi_dsub+0x426>
 8002970:	e0ab      	b.n	8002aca <__aeabi_dsub+0x57e>
 8002972:	2720      	movs	r7, #32
 8002974:	1bbb      	subs	r3, r7, r6
 8002976:	469a      	mov	sl, r3
 8002978:	4663      	mov	r3, ip
 800297a:	4657      	mov	r7, sl
 800297c:	40bb      	lsls	r3, r7
 800297e:	4699      	mov	r9, r3
 8002980:	0013      	movs	r3, r2
 8002982:	464f      	mov	r7, r9
 8002984:	40f3      	lsrs	r3, r6
 8002986:	431f      	orrs	r7, r3
 8002988:	003b      	movs	r3, r7
 800298a:	4657      	mov	r7, sl
 800298c:	40ba      	lsls	r2, r7
 800298e:	1e57      	subs	r7, r2, #1
 8002990:	41ba      	sbcs	r2, r7
 8002992:	4313      	orrs	r3, r2
 8002994:	4662      	mov	r2, ip
 8002996:	40f2      	lsrs	r2, r6
 8002998:	1889      	adds	r1, r1, r2
 800299a:	e698      	b.n	80026ce <__aeabi_dsub+0x182>
 800299c:	2720      	movs	r7, #32
 800299e:	1bbb      	subs	r3, r7, r6
 80029a0:	469a      	mov	sl, r3
 80029a2:	4663      	mov	r3, ip
 80029a4:	4657      	mov	r7, sl
 80029a6:	40bb      	lsls	r3, r7
 80029a8:	4699      	mov	r9, r3
 80029aa:	0013      	movs	r3, r2
 80029ac:	464f      	mov	r7, r9
 80029ae:	40f3      	lsrs	r3, r6
 80029b0:	431f      	orrs	r7, r3
 80029b2:	003b      	movs	r3, r7
 80029b4:	4657      	mov	r7, sl
 80029b6:	40ba      	lsls	r2, r7
 80029b8:	1e57      	subs	r7, r2, #1
 80029ba:	41ba      	sbcs	r2, r7
 80029bc:	4313      	orrs	r3, r2
 80029be:	4662      	mov	r2, ip
 80029c0:	40f2      	lsrs	r2, r6
 80029c2:	1a89      	subs	r1, r1, r2
 80029c4:	e79c      	b.n	8002900 <__aeabi_dsub+0x3b4>
 80029c6:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <__aeabi_dsub+0x688>)
 80029c8:	429f      	cmp	r7, r3
 80029ca:	d05f      	beq.n	8002a8c <__aeabi_dsub+0x540>
 80029cc:	2580      	movs	r5, #128	; 0x80
 80029ce:	042d      	lsls	r5, r5, #16
 80029d0:	4273      	negs	r3, r6
 80029d2:	4329      	orrs	r1, r5
 80029d4:	e720      	b.n	8002818 <__aeabi_dsub+0x2cc>
 80029d6:	2e00      	cmp	r6, #0
 80029d8:	d10c      	bne.n	80029f4 <__aeabi_dsub+0x4a8>
 80029da:	2f00      	cmp	r7, #0
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x494>
 80029de:	e0d0      	b.n	8002b82 <__aeabi_dsub+0x636>
 80029e0:	465c      	mov	r4, fp
 80029e2:	4661      	mov	r1, ip
 80029e4:	4691      	mov	r9, r2
 80029e6:	4d7b      	ldr	r5, [pc, #492]	; (8002bd4 <__aeabi_dsub+0x688>)
 80029e8:	e6cd      	b.n	8002786 <__aeabi_dsub+0x23a>
 80029ea:	4f7a      	ldr	r7, [pc, #488]	; (8002bd4 <__aeabi_dsub+0x688>)
 80029ec:	42be      	cmp	r6, r7
 80029ee:	d01c      	beq.n	8002a2a <__aeabi_dsub+0x4de>
 80029f0:	001e      	movs	r6, r3
 80029f2:	e665      	b.n	80026c0 <__aeabi_dsub+0x174>
 80029f4:	2f00      	cmp	r7, #0
 80029f6:	d018      	beq.n	8002a2a <__aeabi_dsub+0x4de>
 80029f8:	08c0      	lsrs	r0, r0, #3
 80029fa:	074e      	lsls	r6, r1, #29
 80029fc:	4306      	orrs	r6, r0
 80029fe:	2080      	movs	r0, #128	; 0x80
 8002a00:	08c9      	lsrs	r1, r1, #3
 8002a02:	0300      	lsls	r0, r0, #12
 8002a04:	4201      	tst	r1, r0
 8002a06:	d008      	beq.n	8002a1a <__aeabi_dsub+0x4ce>
 8002a08:	4663      	mov	r3, ip
 8002a0a:	08dc      	lsrs	r4, r3, #3
 8002a0c:	4204      	tst	r4, r0
 8002a0e:	d104      	bne.n	8002a1a <__aeabi_dsub+0x4ce>
 8002a10:	0021      	movs	r1, r4
 8002a12:	46da      	mov	sl, fp
 8002a14:	08d2      	lsrs	r2, r2, #3
 8002a16:	075e      	lsls	r6, r3, #29
 8002a18:	4316      	orrs	r6, r2
 8002a1a:	00f3      	lsls	r3, r6, #3
 8002a1c:	4699      	mov	r9, r3
 8002a1e:	2401      	movs	r4, #1
 8002a20:	4653      	mov	r3, sl
 8002a22:	00c9      	lsls	r1, r1, #3
 8002a24:	0f72      	lsrs	r2, r6, #29
 8002a26:	4311      	orrs	r1, r2
 8002a28:	401c      	ands	r4, r3
 8002a2a:	4d6a      	ldr	r5, [pc, #424]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002a2c:	e6ab      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002a2e:	001d      	movs	r5, r3
 8002a30:	2200      	movs	r2, #0
 8002a32:	2700      	movs	r7, #0
 8002a34:	e6b4      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002a36:	2d00      	cmp	r5, #0
 8002a38:	d159      	bne.n	8002aee <__aeabi_dsub+0x5a2>
 8002a3a:	000b      	movs	r3, r1
 8002a3c:	4303      	orrs	r3, r0
 8002a3e:	d100      	bne.n	8002a42 <__aeabi_dsub+0x4f6>
 8002a40:	e6d6      	b.n	80027f0 <__aeabi_dsub+0x2a4>
 8002a42:	1c73      	adds	r3, r6, #1
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x4fc>
 8002a46:	e0b2      	b.n	8002bae <__aeabi_dsub+0x662>
 8002a48:	4b62      	ldr	r3, [pc, #392]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002a4a:	429f      	cmp	r7, r3
 8002a4c:	d01e      	beq.n	8002a8c <__aeabi_dsub+0x540>
 8002a4e:	43f3      	mvns	r3, r6
 8002a50:	2b38      	cmp	r3, #56	; 0x38
 8002a52:	dc6f      	bgt.n	8002b34 <__aeabi_dsub+0x5e8>
 8002a54:	2b1f      	cmp	r3, #31
 8002a56:	dd00      	ble.n	8002a5a <__aeabi_dsub+0x50e>
 8002a58:	e097      	b.n	8002b8a <__aeabi_dsub+0x63e>
 8002a5a:	2520      	movs	r5, #32
 8002a5c:	000e      	movs	r6, r1
 8002a5e:	1aed      	subs	r5, r5, r3
 8002a60:	40ae      	lsls	r6, r5
 8002a62:	46b0      	mov	r8, r6
 8002a64:	0006      	movs	r6, r0
 8002a66:	46aa      	mov	sl, r5
 8002a68:	40de      	lsrs	r6, r3
 8002a6a:	4645      	mov	r5, r8
 8002a6c:	4335      	orrs	r5, r6
 8002a6e:	002e      	movs	r6, r5
 8002a70:	4655      	mov	r5, sl
 8002a72:	40a8      	lsls	r0, r5
 8002a74:	40d9      	lsrs	r1, r3
 8002a76:	1e45      	subs	r5, r0, #1
 8002a78:	41a8      	sbcs	r0, r5
 8002a7a:	448c      	add	ip, r1
 8002a7c:	4306      	orrs	r6, r0
 8002a7e:	18b6      	adds	r6, r6, r2
 8002a80:	4296      	cmp	r6, r2
 8002a82:	4192      	sbcs	r2, r2
 8002a84:	4251      	negs	r1, r2
 8002a86:	4461      	add	r1, ip
 8002a88:	003d      	movs	r5, r7
 8002a8a:	e625      	b.n	80026d8 <__aeabi_dsub+0x18c>
 8002a8c:	003d      	movs	r5, r7
 8002a8e:	4661      	mov	r1, ip
 8002a90:	4691      	mov	r9, r2
 8002a92:	e678      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002a94:	000b      	movs	r3, r1
 8002a96:	4303      	orrs	r3, r0
 8002a98:	2d00      	cmp	r5, #0
 8002a9a:	d000      	beq.n	8002a9e <__aeabi_dsub+0x552>
 8002a9c:	e655      	b.n	800274a <__aeabi_dsub+0x1fe>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f5      	beq.n	8002a8e <__aeabi_dsub+0x542>
 8002aa2:	4663      	mov	r3, ip
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dsub+0x55e>
 8002aa8:	e66d      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002aaa:	1886      	adds	r6, r0, r2
 8002aac:	4286      	cmp	r6, r0
 8002aae:	4180      	sbcs	r0, r0
 8002ab0:	4461      	add	r1, ip
 8002ab2:	4240      	negs	r0, r0
 8002ab4:	1809      	adds	r1, r1, r0
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	020b      	lsls	r3, r1, #8
 8002aba:	d400      	bmi.n	8002abe <__aeabi_dsub+0x572>
 8002abc:	e6d0      	b.n	8002860 <__aeabi_dsub+0x314>
 8002abe:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <__aeabi_dsub+0x68c>)
 8002ac0:	3501      	adds	r5, #1
 8002ac2:	4019      	ands	r1, r3
 8002ac4:	e5b2      	b.n	800262c <__aeabi_dsub+0xe0>
 8002ac6:	46b1      	mov	r9, r6
 8002ac8:	e65d      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002aca:	0033      	movs	r3, r6
 8002acc:	4667      	mov	r7, ip
 8002ace:	3b20      	subs	r3, #32
 8002ad0:	40df      	lsrs	r7, r3
 8002ad2:	003b      	movs	r3, r7
 8002ad4:	2e20      	cmp	r6, #32
 8002ad6:	d005      	beq.n	8002ae4 <__aeabi_dsub+0x598>
 8002ad8:	2740      	movs	r7, #64	; 0x40
 8002ada:	1bbf      	subs	r7, r7, r6
 8002adc:	4666      	mov	r6, ip
 8002ade:	40be      	lsls	r6, r7
 8002ae0:	4332      	orrs	r2, r6
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4646      	mov	r6, r8
 8002ae6:	1e72      	subs	r2, r6, #1
 8002ae8:	4196      	sbcs	r6, r2
 8002aea:	4333      	orrs	r3, r6
 8002aec:	e5ef      	b.n	80026ce <__aeabi_dsub+0x182>
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002af0:	429f      	cmp	r7, r3
 8002af2:	d0cb      	beq.n	8002a8c <__aeabi_dsub+0x540>
 8002af4:	2580      	movs	r5, #128	; 0x80
 8002af6:	042d      	lsls	r5, r5, #16
 8002af8:	4273      	negs	r3, r6
 8002afa:	4329      	orrs	r1, r5
 8002afc:	e7a8      	b.n	8002a50 <__aeabi_dsub+0x504>
 8002afe:	4308      	orrs	r0, r1
 8002b00:	1e41      	subs	r1, r0, #1
 8002b02:	4188      	sbcs	r0, r1
 8002b04:	e6a2      	b.n	800284c <__aeabi_dsub+0x300>
 8002b06:	2f00      	cmp	r7, #0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x5c0>
 8002b0a:	e63c      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002b0c:	4663      	mov	r3, ip
 8002b0e:	1a86      	subs	r6, r0, r2
 8002b10:	1acf      	subs	r7, r1, r3
 8002b12:	42b0      	cmp	r0, r6
 8002b14:	419b      	sbcs	r3, r3
 8002b16:	425b      	negs	r3, r3
 8002b18:	1afb      	subs	r3, r7, r3
 8002b1a:	4698      	mov	r8, r3
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	d54e      	bpl.n	8002bbe <__aeabi_dsub+0x672>
 8002b20:	1a16      	subs	r6, r2, r0
 8002b22:	4663      	mov	r3, ip
 8002b24:	42b2      	cmp	r2, r6
 8002b26:	4192      	sbcs	r2, r2
 8002b28:	1a59      	subs	r1, r3, r1
 8002b2a:	4252      	negs	r2, r2
 8002b2c:	1a89      	subs	r1, r1, r2
 8002b2e:	465c      	mov	r4, fp
 8002b30:	2200      	movs	r2, #0
 8002b32:	e57b      	b.n	800262c <__aeabi_dsub+0xe0>
 8002b34:	4301      	orrs	r1, r0
 8002b36:	000e      	movs	r6, r1
 8002b38:	1e71      	subs	r1, r6, #1
 8002b3a:	418e      	sbcs	r6, r1
 8002b3c:	e79f      	b.n	8002a7e <__aeabi_dsub+0x532>
 8002b3e:	001d      	movs	r5, r3
 8002b40:	000e      	movs	r6, r1
 8002b42:	3d20      	subs	r5, #32
 8002b44:	40ee      	lsrs	r6, r5
 8002b46:	46b0      	mov	r8, r6
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d004      	beq.n	8002b56 <__aeabi_dsub+0x60a>
 8002b4c:	2540      	movs	r5, #64	; 0x40
 8002b4e:	1aeb      	subs	r3, r5, r3
 8002b50:	4099      	lsls	r1, r3
 8002b52:	4308      	orrs	r0, r1
 8002b54:	4681      	mov	r9, r0
 8002b56:	4648      	mov	r0, r9
 8002b58:	4643      	mov	r3, r8
 8002b5a:	1e41      	subs	r1, r0, #1
 8002b5c:	4188      	sbcs	r0, r1
 8002b5e:	4318      	orrs	r0, r3
 8002b60:	e674      	b.n	800284c <__aeabi_dsub+0x300>
 8002b62:	2200      	movs	r2, #0
 8002b64:	2400      	movs	r4, #0
 8002b66:	e617      	b.n	8002798 <__aeabi_dsub+0x24c>
 8002b68:	1a16      	subs	r6, r2, r0
 8002b6a:	4663      	mov	r3, ip
 8002b6c:	42b2      	cmp	r2, r6
 8002b6e:	4192      	sbcs	r2, r2
 8002b70:	1a59      	subs	r1, r3, r1
 8002b72:	4252      	negs	r2, r2
 8002b74:	1a89      	subs	r1, r1, r2
 8002b76:	003d      	movs	r5, r7
 8002b78:	e525      	b.n	80025c6 <__aeabi_dsub+0x7a>
 8002b7a:	4661      	mov	r1, ip
 8002b7c:	4691      	mov	r9, r2
 8002b7e:	4d15      	ldr	r5, [pc, #84]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002b80:	e601      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002b82:	2280      	movs	r2, #128	; 0x80
 8002b84:	2400      	movs	r4, #0
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	e679      	b.n	800287e <__aeabi_dsub+0x332>
 8002b8a:	001d      	movs	r5, r3
 8002b8c:	000e      	movs	r6, r1
 8002b8e:	3d20      	subs	r5, #32
 8002b90:	40ee      	lsrs	r6, r5
 8002b92:	46b0      	mov	r8, r6
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d004      	beq.n	8002ba2 <__aeabi_dsub+0x656>
 8002b98:	2540      	movs	r5, #64	; 0x40
 8002b9a:	1aeb      	subs	r3, r5, r3
 8002b9c:	4099      	lsls	r1, r3
 8002b9e:	4308      	orrs	r0, r1
 8002ba0:	4681      	mov	r9, r0
 8002ba2:	464e      	mov	r6, r9
 8002ba4:	4643      	mov	r3, r8
 8002ba6:	1e71      	subs	r1, r6, #1
 8002ba8:	418e      	sbcs	r6, r1
 8002baa:	431e      	orrs	r6, r3
 8002bac:	e767      	b.n	8002a7e <__aeabi_dsub+0x532>
 8002bae:	1886      	adds	r6, r0, r2
 8002bb0:	4296      	cmp	r6, r2
 8002bb2:	419b      	sbcs	r3, r3
 8002bb4:	4461      	add	r1, ip
 8002bb6:	425b      	negs	r3, r3
 8002bb8:	18c9      	adds	r1, r1, r3
 8002bba:	003d      	movs	r5, r7
 8002bbc:	e58c      	b.n	80026d8 <__aeabi_dsub+0x18c>
 8002bbe:	4647      	mov	r7, r8
 8002bc0:	4337      	orrs	r7, r6
 8002bc2:	d0ce      	beq.n	8002b62 <__aeabi_dsub+0x616>
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	4641      	mov	r1, r8
 8002bc8:	4032      	ands	r2, r6
 8002bca:	e649      	b.n	8002860 <__aeabi_dsub+0x314>
 8002bcc:	2700      	movs	r7, #0
 8002bce:	003a      	movs	r2, r7
 8002bd0:	e5e6      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	000007ff 	.word	0x000007ff
 8002bd8:	ff7fffff 	.word	0xff7fffff

08002bdc <__aeabi_dcmpun>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4e0c      	ldr	r6, [pc, #48]	; (8002c10 <__aeabi_dcmpun+0x34>)
 8002be0:	030d      	lsls	r5, r1, #12
 8002be2:	031c      	lsls	r4, r3, #12
 8002be4:	0049      	lsls	r1, r1, #1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	0b2d      	lsrs	r5, r5, #12
 8002bea:	0d49      	lsrs	r1, r1, #21
 8002bec:	0b24      	lsrs	r4, r4, #12
 8002bee:	0d5b      	lsrs	r3, r3, #21
 8002bf0:	42b1      	cmp	r1, r6
 8002bf2:	d008      	beq.n	8002c06 <__aeabi_dcmpun+0x2a>
 8002bf4:	4906      	ldr	r1, [pc, #24]	; (8002c10 <__aeabi_dcmpun+0x34>)
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	428b      	cmp	r3, r1
 8002bfa:	d103      	bne.n	8002c04 <__aeabi_dcmpun+0x28>
 8002bfc:	4314      	orrs	r4, r2
 8002bfe:	0020      	movs	r0, r4
 8002c00:	1e44      	subs	r4, r0, #1
 8002c02:	41a0      	sbcs	r0, r4
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
 8002c06:	4305      	orrs	r5, r0
 8002c08:	2001      	movs	r0, #1
 8002c0a:	2d00      	cmp	r5, #0
 8002c0c:	d1fa      	bne.n	8002c04 <__aeabi_dcmpun+0x28>
 8002c0e:	e7f1      	b.n	8002bf4 <__aeabi_dcmpun+0x18>
 8002c10:	000007ff 	.word	0x000007ff

08002c14 <__aeabi_d2iz>:
 8002c14:	b530      	push	{r4, r5, lr}
 8002c16:	4d14      	ldr	r5, [pc, #80]	; (8002c68 <__aeabi_d2iz+0x54>)
 8002c18:	030a      	lsls	r2, r1, #12
 8002c1a:	004b      	lsls	r3, r1, #1
 8002c1c:	0b12      	lsrs	r2, r2, #12
 8002c1e:	0d5b      	lsrs	r3, r3, #21
 8002c20:	0fc9      	lsrs	r1, r1, #31
 8002c22:	2400      	movs	r4, #0
 8002c24:	42ab      	cmp	r3, r5
 8002c26:	dd11      	ble.n	8002c4c <__aeabi_d2iz+0x38>
 8002c28:	4c10      	ldr	r4, [pc, #64]	; (8002c6c <__aeabi_d2iz+0x58>)
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	dc10      	bgt.n	8002c50 <__aeabi_d2iz+0x3c>
 8002c2e:	2480      	movs	r4, #128	; 0x80
 8002c30:	0364      	lsls	r4, r4, #13
 8002c32:	4322      	orrs	r2, r4
 8002c34:	4c0e      	ldr	r4, [pc, #56]	; (8002c70 <__aeabi_d2iz+0x5c>)
 8002c36:	1ae4      	subs	r4, r4, r3
 8002c38:	2c1f      	cmp	r4, #31
 8002c3a:	dd0c      	ble.n	8002c56 <__aeabi_d2iz+0x42>
 8002c3c:	480d      	ldr	r0, [pc, #52]	; (8002c74 <__aeabi_d2iz+0x60>)
 8002c3e:	1ac3      	subs	r3, r0, r3
 8002c40:	40da      	lsrs	r2, r3
 8002c42:	0013      	movs	r3, r2
 8002c44:	425c      	negs	r4, r3
 8002c46:	2900      	cmp	r1, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_d2iz+0x38>
 8002c4a:	001c      	movs	r4, r3
 8002c4c:	0020      	movs	r0, r4
 8002c4e:	bd30      	pop	{r4, r5, pc}
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <__aeabi_d2iz+0x64>)
 8002c52:	18cc      	adds	r4, r1, r3
 8002c54:	e7fa      	b.n	8002c4c <__aeabi_d2iz+0x38>
 8002c56:	4d09      	ldr	r5, [pc, #36]	; (8002c7c <__aeabi_d2iz+0x68>)
 8002c58:	40e0      	lsrs	r0, r4
 8002c5a:	46ac      	mov	ip, r5
 8002c5c:	4463      	add	r3, ip
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	0013      	movs	r3, r2
 8002c62:	4303      	orrs	r3, r0
 8002c64:	e7ee      	b.n	8002c44 <__aeabi_d2iz+0x30>
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	000003fe 	.word	0x000003fe
 8002c6c:	0000041d 	.word	0x0000041d
 8002c70:	00000433 	.word	0x00000433
 8002c74:	00000413 	.word	0x00000413
 8002c78:	7fffffff 	.word	0x7fffffff
 8002c7c:	fffffbed 	.word	0xfffffbed

08002c80 <__aeabi_i2d>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d02d      	beq.n	8002ce2 <__aeabi_i2d+0x62>
 8002c86:	17c3      	asrs	r3, r0, #31
 8002c88:	18c5      	adds	r5, r0, r3
 8002c8a:	405d      	eors	r5, r3
 8002c8c:	0fc4      	lsrs	r4, r0, #31
 8002c8e:	0028      	movs	r0, r5
 8002c90:	f000 f938 	bl	8002f04 <__clzsi2>
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <__aeabi_i2d+0x6c>)
 8002c96:	1a1b      	subs	r3, r3, r0
 8002c98:	055b      	lsls	r3, r3, #21
 8002c9a:	0d5b      	lsrs	r3, r3, #21
 8002c9c:	280a      	cmp	r0, #10
 8002c9e:	dd15      	ble.n	8002ccc <__aeabi_i2d+0x4c>
 8002ca0:	380b      	subs	r0, #11
 8002ca2:	4085      	lsls	r5, r0
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	032d      	lsls	r5, r5, #12
 8002ca8:	0b2d      	lsrs	r5, r5, #12
 8002caa:	2100      	movs	r1, #0
 8002cac:	0010      	movs	r0, r2
 8002cae:	032d      	lsls	r5, r5, #12
 8002cb0:	0d0a      	lsrs	r2, r1, #20
 8002cb2:	0b2d      	lsrs	r5, r5, #12
 8002cb4:	0512      	lsls	r2, r2, #20
 8002cb6:	432a      	orrs	r2, r5
 8002cb8:	4d0d      	ldr	r5, [pc, #52]	; (8002cf0 <__aeabi_i2d+0x70>)
 8002cba:	051b      	lsls	r3, r3, #20
 8002cbc:	402a      	ands	r2, r5
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	07e4      	lsls	r4, r4, #31
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	4323      	orrs	r3, r4
 8002cc8:	0019      	movs	r1, r3
 8002cca:	bd70      	pop	{r4, r5, r6, pc}
 8002ccc:	0002      	movs	r2, r0
 8002cce:	0029      	movs	r1, r5
 8002cd0:	3215      	adds	r2, #21
 8002cd2:	4091      	lsls	r1, r2
 8002cd4:	000a      	movs	r2, r1
 8002cd6:	210b      	movs	r1, #11
 8002cd8:	1a08      	subs	r0, r1, r0
 8002cda:	40c5      	lsrs	r5, r0
 8002cdc:	032d      	lsls	r5, r5, #12
 8002cde:	0b2d      	lsrs	r5, r5, #12
 8002ce0:	e7e3      	b.n	8002caa <__aeabi_i2d+0x2a>
 8002ce2:	2400      	movs	r4, #0
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	2200      	movs	r2, #0
 8002cea:	e7de      	b.n	8002caa <__aeabi_i2d+0x2a>
 8002cec:	0000041e 	.word	0x0000041e
 8002cf0:	800fffff 	.word	0x800fffff

08002cf4 <__aeabi_ui2d>:
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	1e04      	subs	r4, r0, #0
 8002cf8:	d025      	beq.n	8002d46 <__aeabi_ui2d+0x52>
 8002cfa:	f000 f903 	bl	8002f04 <__clzsi2>
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <__aeabi_ui2d+0x5c>)
 8002d00:	1a1b      	subs	r3, r3, r0
 8002d02:	055b      	lsls	r3, r3, #21
 8002d04:	0d5b      	lsrs	r3, r3, #21
 8002d06:	280a      	cmp	r0, #10
 8002d08:	dd12      	ble.n	8002d30 <__aeabi_ui2d+0x3c>
 8002d0a:	380b      	subs	r0, #11
 8002d0c:	4084      	lsls	r4, r0
 8002d0e:	2200      	movs	r2, #0
 8002d10:	0324      	lsls	r4, r4, #12
 8002d12:	0b24      	lsrs	r4, r4, #12
 8002d14:	2100      	movs	r1, #0
 8002d16:	0010      	movs	r0, r2
 8002d18:	0324      	lsls	r4, r4, #12
 8002d1a:	0d0a      	lsrs	r2, r1, #20
 8002d1c:	0b24      	lsrs	r4, r4, #12
 8002d1e:	0512      	lsls	r2, r2, #20
 8002d20:	4322      	orrs	r2, r4
 8002d22:	4c0c      	ldr	r4, [pc, #48]	; (8002d54 <__aeabi_ui2d+0x60>)
 8002d24:	051b      	lsls	r3, r3, #20
 8002d26:	4022      	ands	r2, r4
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	0859      	lsrs	r1, r3, #1
 8002d2e:	bd10      	pop	{r4, pc}
 8002d30:	0002      	movs	r2, r0
 8002d32:	0021      	movs	r1, r4
 8002d34:	3215      	adds	r2, #21
 8002d36:	4091      	lsls	r1, r2
 8002d38:	000a      	movs	r2, r1
 8002d3a:	210b      	movs	r1, #11
 8002d3c:	1a08      	subs	r0, r1, r0
 8002d3e:	40c4      	lsrs	r4, r0
 8002d40:	0324      	lsls	r4, r4, #12
 8002d42:	0b24      	lsrs	r4, r4, #12
 8002d44:	e7e6      	b.n	8002d14 <__aeabi_ui2d+0x20>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2400      	movs	r4, #0
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	e7e2      	b.n	8002d14 <__aeabi_ui2d+0x20>
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	0000041e 	.word	0x0000041e
 8002d54:	800fffff 	.word	0x800fffff

08002d58 <__aeabi_f2d>:
 8002d58:	0041      	lsls	r1, r0, #1
 8002d5a:	0e09      	lsrs	r1, r1, #24
 8002d5c:	1c4b      	adds	r3, r1, #1
 8002d5e:	b570      	push	{r4, r5, r6, lr}
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	0246      	lsls	r6, r0, #9
 8002d64:	0a75      	lsrs	r5, r6, #9
 8002d66:	0fc4      	lsrs	r4, r0, #31
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	dd14      	ble.n	8002d96 <__aeabi_f2d+0x3e>
 8002d6c:	23e0      	movs	r3, #224	; 0xe0
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	076d      	lsls	r5, r5, #29
 8002d72:	0b36      	lsrs	r6, r6, #12
 8002d74:	18cb      	adds	r3, r1, r3
 8002d76:	2100      	movs	r1, #0
 8002d78:	0d0a      	lsrs	r2, r1, #20
 8002d7a:	0028      	movs	r0, r5
 8002d7c:	0512      	lsls	r2, r2, #20
 8002d7e:	4d1c      	ldr	r5, [pc, #112]	; (8002df0 <__aeabi_f2d+0x98>)
 8002d80:	4332      	orrs	r2, r6
 8002d82:	055b      	lsls	r3, r3, #21
 8002d84:	402a      	ands	r2, r5
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	07e4      	lsls	r4, r4, #31
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	4323      	orrs	r3, r4
 8002d92:	0019      	movs	r1, r3
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
 8002d96:	2900      	cmp	r1, #0
 8002d98:	d114      	bne.n	8002dc4 <__aeabi_f2d+0x6c>
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	d01e      	beq.n	8002ddc <__aeabi_f2d+0x84>
 8002d9e:	0028      	movs	r0, r5
 8002da0:	f000 f8b0 	bl	8002f04 <__clzsi2>
 8002da4:	280a      	cmp	r0, #10
 8002da6:	dc1c      	bgt.n	8002de2 <__aeabi_f2d+0x8a>
 8002da8:	230b      	movs	r3, #11
 8002daa:	002a      	movs	r2, r5
 8002dac:	1a1b      	subs	r3, r3, r0
 8002dae:	40da      	lsrs	r2, r3
 8002db0:	0003      	movs	r3, r0
 8002db2:	3315      	adds	r3, #21
 8002db4:	409d      	lsls	r5, r3
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <__aeabi_f2d+0x9c>)
 8002db8:	0312      	lsls	r2, r2, #12
 8002dba:	1a1b      	subs	r3, r3, r0
 8002dbc:	055b      	lsls	r3, r3, #21
 8002dbe:	0b16      	lsrs	r6, r2, #12
 8002dc0:	0d5b      	lsrs	r3, r3, #21
 8002dc2:	e7d8      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002dc4:	2d00      	cmp	r5, #0
 8002dc6:	d006      	beq.n	8002dd6 <__aeabi_f2d+0x7e>
 8002dc8:	0b32      	lsrs	r2, r6, #12
 8002dca:	2680      	movs	r6, #128	; 0x80
 8002dcc:	0336      	lsls	r6, r6, #12
 8002dce:	076d      	lsls	r5, r5, #29
 8002dd0:	4316      	orrs	r6, r2
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <__aeabi_f2d+0xa0>)
 8002dd4:	e7cf      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <__aeabi_f2d+0xa0>)
 8002dd8:	2600      	movs	r6, #0
 8002dda:	e7cc      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2600      	movs	r6, #0
 8002de0:	e7c9      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002de2:	0003      	movs	r3, r0
 8002de4:	002a      	movs	r2, r5
 8002de6:	3b0b      	subs	r3, #11
 8002de8:	409a      	lsls	r2, r3
 8002dea:	2500      	movs	r5, #0
 8002dec:	e7e3      	b.n	8002db6 <__aeabi_f2d+0x5e>
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	800fffff 	.word	0x800fffff
 8002df4:	00000389 	.word	0x00000389
 8002df8:	000007ff 	.word	0x000007ff

08002dfc <__aeabi_d2f>:
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	004c      	lsls	r4, r1, #1
 8002e00:	0d64      	lsrs	r4, r4, #21
 8002e02:	030b      	lsls	r3, r1, #12
 8002e04:	1c62      	adds	r2, r4, #1
 8002e06:	0a5b      	lsrs	r3, r3, #9
 8002e08:	0f46      	lsrs	r6, r0, #29
 8002e0a:	0552      	lsls	r2, r2, #21
 8002e0c:	0fc9      	lsrs	r1, r1, #31
 8002e0e:	431e      	orrs	r6, r3
 8002e10:	00c5      	lsls	r5, r0, #3
 8002e12:	0d52      	lsrs	r2, r2, #21
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	dd29      	ble.n	8002e6c <__aeabi_d2f+0x70>
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <__aeabi_d2f+0xfc>)
 8002e1a:	18e7      	adds	r7, r4, r3
 8002e1c:	2ffe      	cmp	r7, #254	; 0xfe
 8002e1e:	dc1c      	bgt.n	8002e5a <__aeabi_d2f+0x5e>
 8002e20:	2f00      	cmp	r7, #0
 8002e22:	dd3b      	ble.n	8002e9c <__aeabi_d2f+0xa0>
 8002e24:	0180      	lsls	r0, r0, #6
 8002e26:	1e43      	subs	r3, r0, #1
 8002e28:	4198      	sbcs	r0, r3
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	00f3      	lsls	r3, r6, #3
 8002e2e:	0f6d      	lsrs	r5, r5, #29
 8002e30:	4303      	orrs	r3, r0
 8002e32:	432b      	orrs	r3, r5
 8002e34:	401a      	ands	r2, r3
 8002e36:	2a00      	cmp	r2, #0
 8002e38:	d004      	beq.n	8002e44 <__aeabi_d2f+0x48>
 8002e3a:	220f      	movs	r2, #15
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	2a04      	cmp	r2, #4
 8002e40:	d000      	beq.n	8002e44 <__aeabi_d2f+0x48>
 8002e42:	3304      	adds	r3, #4
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	04d2      	lsls	r2, r2, #19
 8002e48:	401a      	ands	r2, r3
 8002e4a:	d024      	beq.n	8002e96 <__aeabi_d2f+0x9a>
 8002e4c:	3701      	adds	r7, #1
 8002e4e:	b2fa      	uxtb	r2, r7
 8002e50:	2fff      	cmp	r7, #255	; 0xff
 8002e52:	d002      	beq.n	8002e5a <__aeabi_d2f+0x5e>
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	0a58      	lsrs	r0, r3, #9
 8002e58:	e001      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e5a:	22ff      	movs	r2, #255	; 0xff
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	0240      	lsls	r0, r0, #9
 8002e60:	05d2      	lsls	r2, r2, #23
 8002e62:	0a40      	lsrs	r0, r0, #9
 8002e64:	07c9      	lsls	r1, r1, #31
 8002e66:	4310      	orrs	r0, r2
 8002e68:	4308      	orrs	r0, r1
 8002e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6c:	4335      	orrs	r5, r6
 8002e6e:	2c00      	cmp	r4, #0
 8002e70:	d104      	bne.n	8002e7c <__aeabi_d2f+0x80>
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	d10a      	bne.n	8002e8c <__aeabi_d2f+0x90>
 8002e76:	2200      	movs	r2, #0
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e7f0      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e7c:	2d00      	cmp	r5, #0
 8002e7e:	d0ec      	beq.n	8002e5a <__aeabi_d2f+0x5e>
 8002e80:	2080      	movs	r0, #128	; 0x80
 8002e82:	03c0      	lsls	r0, r0, #15
 8002e84:	4330      	orrs	r0, r6
 8002e86:	22ff      	movs	r2, #255	; 0xff
 8002e88:	e7e9      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e8a:	2400      	movs	r4, #0
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	025b      	lsls	r3, r3, #9
 8002e90:	0a58      	lsrs	r0, r3, #9
 8002e92:	b2e2      	uxtb	r2, r4
 8002e94:	e7e3      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e96:	08db      	lsrs	r3, r3, #3
 8002e98:	003c      	movs	r4, r7
 8002e9a:	e7f8      	b.n	8002e8e <__aeabi_d2f+0x92>
 8002e9c:	003b      	movs	r3, r7
 8002e9e:	3317      	adds	r3, #23
 8002ea0:	dbf3      	blt.n	8002e8a <__aeabi_d2f+0x8e>
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	4333      	orrs	r3, r6
 8002ea8:	261e      	movs	r6, #30
 8002eaa:	1bf6      	subs	r6, r6, r7
 8002eac:	2e1f      	cmp	r6, #31
 8002eae:	dd14      	ble.n	8002eda <__aeabi_d2f+0xde>
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4252      	negs	r2, r2
 8002eb4:	1bd7      	subs	r7, r2, r7
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	40fa      	lsrs	r2, r7
 8002eba:	0017      	movs	r7, r2
 8002ebc:	2e20      	cmp	r6, #32
 8002ebe:	d004      	beq.n	8002eca <__aeabi_d2f+0xce>
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <__aeabi_d2f+0x100>)
 8002ec2:	4694      	mov	ip, r2
 8002ec4:	4464      	add	r4, ip
 8002ec6:	40a3      	lsls	r3, r4
 8002ec8:	431d      	orrs	r5, r3
 8002eca:	002b      	movs	r3, r5
 8002ecc:	1e5d      	subs	r5, r3, #1
 8002ece:	41ab      	sbcs	r3, r5
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	433b      	orrs	r3, r7
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	2700      	movs	r7, #0
 8002ed8:	e7ad      	b.n	8002e36 <__aeabi_d2f+0x3a>
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <__aeabi_d2f+0x104>)
 8002edc:	0028      	movs	r0, r5
 8002ede:	18a2      	adds	r2, r4, r2
 8002ee0:	4095      	lsls	r5, r2
 8002ee2:	4093      	lsls	r3, r2
 8002ee4:	1e6c      	subs	r4, r5, #1
 8002ee6:	41a5      	sbcs	r5, r4
 8002ee8:	40f0      	lsrs	r0, r6
 8002eea:	2207      	movs	r2, #7
 8002eec:	432b      	orrs	r3, r5
 8002eee:	4303      	orrs	r3, r0
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	2700      	movs	r7, #0
 8002ef4:	e79f      	b.n	8002e36 <__aeabi_d2f+0x3a>
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	fffffc80 	.word	0xfffffc80
 8002efc:	fffffca2 	.word	0xfffffca2
 8002f00:	fffffc82 	.word	0xfffffc82

08002f04 <__clzsi2>:
 8002f04:	211c      	movs	r1, #28
 8002f06:	2301      	movs	r3, #1
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	4298      	cmp	r0, r3
 8002f0c:	d301      	bcc.n	8002f12 <__clzsi2+0xe>
 8002f0e:	0c00      	lsrs	r0, r0, #16
 8002f10:	3910      	subs	r1, #16
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	4298      	cmp	r0, r3
 8002f16:	d301      	bcc.n	8002f1c <__clzsi2+0x18>
 8002f18:	0a00      	lsrs	r0, r0, #8
 8002f1a:	3908      	subs	r1, #8
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	4298      	cmp	r0, r3
 8002f20:	d301      	bcc.n	8002f26 <__clzsi2+0x22>
 8002f22:	0900      	lsrs	r0, r0, #4
 8002f24:	3904      	subs	r1, #4
 8002f26:	a202      	add	r2, pc, #8	; (adr r2, 8002f30 <__clzsi2+0x2c>)
 8002f28:	5c10      	ldrb	r0, [r2, r0]
 8002f2a:	1840      	adds	r0, r0, r1
 8002f2c:	4770      	bx	lr
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	02020304 	.word	0x02020304
 8002f34:	01010101 	.word	0x01010101
	...

08002f40 <__clzdi2>:
 8002f40:	b510      	push	{r4, lr}
 8002f42:	2900      	cmp	r1, #0
 8002f44:	d103      	bne.n	8002f4e <__clzdi2+0xe>
 8002f46:	f7ff ffdd 	bl	8002f04 <__clzsi2>
 8002f4a:	3020      	adds	r0, #32
 8002f4c:	e002      	b.n	8002f54 <__clzdi2+0x14>
 8002f4e:	1c08      	adds	r0, r1, #0
 8002f50:	f7ff ffd8 	bl	8002f04 <__clzsi2>
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)

08002f58 <__divdi3>:
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	464e      	mov	r6, r9
 8002f5c:	4657      	mov	r7, sl
 8002f5e:	46de      	mov	lr, fp
 8002f60:	4645      	mov	r5, r8
 8002f62:	b5e0      	push	{r5, r6, r7, lr}
 8002f64:	000f      	movs	r7, r1
 8002f66:	2100      	movs	r1, #0
 8002f68:	b083      	sub	sp, #12
 8002f6a:	0006      	movs	r6, r0
 8002f6c:	4689      	mov	r9, r1
 8002f6e:	2f00      	cmp	r7, #0
 8002f70:	da06      	bge.n	8002f80 <__divdi3+0x28>
 8002f72:	0039      	movs	r1, r7
 8002f74:	2700      	movs	r7, #0
 8002f76:	4246      	negs	r6, r0
 8002f78:	418f      	sbcs	r7, r1
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4249      	negs	r1, r1
 8002f7e:	4689      	mov	r9, r1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da07      	bge.n	8002f94 <__divdi3+0x3c>
 8002f84:	4649      	mov	r1, r9
 8002f86:	43c9      	mvns	r1, r1
 8002f88:	0010      	movs	r0, r2
 8002f8a:	4689      	mov	r9, r1
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	2300      	movs	r3, #0
 8002f90:	4242      	negs	r2, r0
 8002f92:	418b      	sbcs	r3, r1
 8002f94:	0034      	movs	r4, r6
 8002f96:	003d      	movs	r5, r7
 8002f98:	4692      	mov	sl, r2
 8002f9a:	4698      	mov	r8, r3
 8002f9c:	42bb      	cmp	r3, r7
 8002f9e:	d869      	bhi.n	8003074 <__divdi3+0x11c>
 8002fa0:	d066      	beq.n	8003070 <__divdi3+0x118>
 8002fa2:	4641      	mov	r1, r8
 8002fa4:	4650      	mov	r0, sl
 8002fa6:	f7ff ffcb 	bl	8002f40 <__clzdi2>
 8002faa:	4683      	mov	fp, r0
 8002fac:	0039      	movs	r1, r7
 8002fae:	0030      	movs	r0, r6
 8002fb0:	f7ff ffc6 	bl	8002f40 <__clzdi2>
 8002fb4:	465b      	mov	r3, fp
 8002fb6:	1a1b      	subs	r3, r3, r0
 8002fb8:	469c      	mov	ip, r3
 8002fba:	3b20      	subs	r3, #32
 8002fbc:	469b      	mov	fp, r3
 8002fbe:	d500      	bpl.n	8002fc2 <__divdi3+0x6a>
 8002fc0:	e075      	b.n	80030ae <__divdi3+0x156>
 8002fc2:	4651      	mov	r1, sl
 8002fc4:	4658      	mov	r0, fp
 8002fc6:	4081      	lsls	r1, r0
 8002fc8:	000b      	movs	r3, r1
 8002fca:	4651      	mov	r1, sl
 8002fcc:	4660      	mov	r0, ip
 8002fce:	4081      	lsls	r1, r0
 8002fd0:	000a      	movs	r2, r1
 8002fd2:	42bb      	cmp	r3, r7
 8002fd4:	d861      	bhi.n	800309a <__divdi3+0x142>
 8002fd6:	d05e      	beq.n	8003096 <__divdi3+0x13e>
 8002fd8:	0034      	movs	r4, r6
 8002fda:	003d      	movs	r5, r7
 8002fdc:	4659      	mov	r1, fp
 8002fde:	1aa4      	subs	r4, r4, r2
 8002fe0:	419d      	sbcs	r5, r3
 8002fe2:	2900      	cmp	r1, #0
 8002fe4:	da00      	bge.n	8002fe8 <__divdi3+0x90>
 8002fe6:	e07a      	b.n	80030de <__divdi3+0x186>
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2000      	movs	r0, #0
 8002fec:	2601      	movs	r6, #1
 8002fee:	9000      	str	r0, [sp, #0]
 8002ff0:	9101      	str	r1, [sp, #4]
 8002ff2:	4659      	mov	r1, fp
 8002ff4:	408e      	lsls	r6, r1
 8002ff6:	9601      	str	r6, [sp, #4]
 8002ff8:	4661      	mov	r1, ip
 8002ffa:	2601      	movs	r6, #1
 8002ffc:	408e      	lsls	r6, r1
 8002ffe:	4661      	mov	r1, ip
 8003000:	9600      	str	r6, [sp, #0]
 8003002:	2900      	cmp	r1, #0
 8003004:	d050      	beq.n	80030a8 <__divdi3+0x150>
 8003006:	07d9      	lsls	r1, r3, #31
 8003008:	0856      	lsrs	r6, r2, #1
 800300a:	085f      	lsrs	r7, r3, #1
 800300c:	430e      	orrs	r6, r1
 800300e:	4663      	mov	r3, ip
 8003010:	e00e      	b.n	8003030 <__divdi3+0xd8>
 8003012:	42af      	cmp	r7, r5
 8003014:	d101      	bne.n	800301a <__divdi3+0xc2>
 8003016:	42a6      	cmp	r6, r4
 8003018:	d80c      	bhi.n	8003034 <__divdi3+0xdc>
 800301a:	1ba4      	subs	r4, r4, r6
 800301c:	41bd      	sbcs	r5, r7
 800301e:	2101      	movs	r1, #1
 8003020:	1924      	adds	r4, r4, r4
 8003022:	416d      	adcs	r5, r5
 8003024:	2200      	movs	r2, #0
 8003026:	3b01      	subs	r3, #1
 8003028:	1864      	adds	r4, r4, r1
 800302a:	4155      	adcs	r5, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <__divdi3+0xe6>
 8003030:	42af      	cmp	r7, r5
 8003032:	d9ee      	bls.n	8003012 <__divdi3+0xba>
 8003034:	3b01      	subs	r3, #1
 8003036:	1924      	adds	r4, r4, r4
 8003038:	416d      	adcs	r5, r5
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f8      	bne.n	8003030 <__divdi3+0xd8>
 800303e:	9800      	ldr	r0, [sp, #0]
 8003040:	9901      	ldr	r1, [sp, #4]
 8003042:	465b      	mov	r3, fp
 8003044:	1900      	adds	r0, r0, r4
 8003046:	4169      	adcs	r1, r5
 8003048:	2b00      	cmp	r3, #0
 800304a:	db3d      	blt.n	80030c8 <__divdi3+0x170>
 800304c:	002e      	movs	r6, r5
 800304e:	40de      	lsrs	r6, r3
 8003050:	4663      	mov	r3, ip
 8003052:	002c      	movs	r4, r5
 8003054:	40dc      	lsrs	r4, r3
 8003056:	465b      	mov	r3, fp
 8003058:	2b00      	cmp	r3, #0
 800305a:	db4b      	blt.n	80030f4 <__divdi3+0x19c>
 800305c:	0034      	movs	r4, r6
 800305e:	465d      	mov	r5, fp
 8003060:	40ac      	lsls	r4, r5
 8003062:	0023      	movs	r3, r4
 8003064:	4664      	mov	r4, ip
 8003066:	40a6      	lsls	r6, r4
 8003068:	0032      	movs	r2, r6
 800306a:	1a80      	subs	r0, r0, r2
 800306c:	4199      	sbcs	r1, r3
 800306e:	e003      	b.n	8003078 <__divdi3+0x120>
 8003070:	42b2      	cmp	r2, r6
 8003072:	d996      	bls.n	8002fa2 <__divdi3+0x4a>
 8003074:	2000      	movs	r0, #0
 8003076:	2100      	movs	r1, #0
 8003078:	464b      	mov	r3, r9
 800307a:	2b00      	cmp	r3, #0
 800307c:	d004      	beq.n	8003088 <__divdi3+0x130>
 800307e:	0003      	movs	r3, r0
 8003080:	000c      	movs	r4, r1
 8003082:	2100      	movs	r1, #0
 8003084:	4258      	negs	r0, r3
 8003086:	41a1      	sbcs	r1, r4
 8003088:	b003      	add	sp, #12
 800308a:	bc3c      	pop	{r2, r3, r4, r5}
 800308c:	4690      	mov	r8, r2
 800308e:	4699      	mov	r9, r3
 8003090:	46a2      	mov	sl, r4
 8003092:	46ab      	mov	fp, r5
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003096:	42b1      	cmp	r1, r6
 8003098:	d99e      	bls.n	8002fd8 <__divdi3+0x80>
 800309a:	2100      	movs	r1, #0
 800309c:	2000      	movs	r0, #0
 800309e:	9000      	str	r0, [sp, #0]
 80030a0:	9101      	str	r1, [sp, #4]
 80030a2:	4661      	mov	r1, ip
 80030a4:	2900      	cmp	r1, #0
 80030a6:	d1ae      	bne.n	8003006 <__divdi3+0xae>
 80030a8:	9800      	ldr	r0, [sp, #0]
 80030aa:	9901      	ldr	r1, [sp, #4]
 80030ac:	e7e4      	b.n	8003078 <__divdi3+0x120>
 80030ae:	2320      	movs	r3, #32
 80030b0:	4662      	mov	r2, ip
 80030b2:	4651      	mov	r1, sl
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	40d9      	lsrs	r1, r3
 80030b8:	4640      	mov	r0, r8
 80030ba:	9100      	str	r1, [sp, #0]
 80030bc:	4661      	mov	r1, ip
 80030be:	4088      	lsls	r0, r1
 80030c0:	0003      	movs	r3, r0
 80030c2:	9900      	ldr	r1, [sp, #0]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	e780      	b.n	8002fca <__divdi3+0x72>
 80030c8:	4662      	mov	r2, ip
 80030ca:	2320      	movs	r3, #32
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	002a      	movs	r2, r5
 80030d0:	409a      	lsls	r2, r3
 80030d2:	0026      	movs	r6, r4
 80030d4:	0013      	movs	r3, r2
 80030d6:	4662      	mov	r2, ip
 80030d8:	40d6      	lsrs	r6, r2
 80030da:	431e      	orrs	r6, r3
 80030dc:	e7b8      	b.n	8003050 <__divdi3+0xf8>
 80030de:	4661      	mov	r1, ip
 80030e0:	2620      	movs	r6, #32
 80030e2:	2701      	movs	r7, #1
 80030e4:	1a76      	subs	r6, r6, r1
 80030e6:	2000      	movs	r0, #0
 80030e8:	2100      	movs	r1, #0
 80030ea:	40f7      	lsrs	r7, r6
 80030ec:	9000      	str	r0, [sp, #0]
 80030ee:	9101      	str	r1, [sp, #4]
 80030f0:	9701      	str	r7, [sp, #4]
 80030f2:	e781      	b.n	8002ff8 <__divdi3+0xa0>
 80030f4:	4667      	mov	r7, ip
 80030f6:	2320      	movs	r3, #32
 80030f8:	4662      	mov	r2, ip
 80030fa:	0035      	movs	r5, r6
 80030fc:	40bc      	lsls	r4, r7
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	40dd      	lsrs	r5, r3
 8003102:	0023      	movs	r3, r4
 8003104:	432b      	orrs	r3, r5
 8003106:	e7ad      	b.n	8003064 <__divdi3+0x10c>

08003108 <minArr>:
*/
																															 
/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
*/
uint8_t minArr(uint8_t* arr, uint8_t* Q)
{
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest = 0xFF; uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 800310a:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 800310c:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 800310e:	2b00      	cmp	r3, #0
 8003110:	d100      	bne.n	8003114 <minArr+0xc>
		smallest = arr[0];
 8003112:	7804      	ldrb	r4, [r0, #0]

	for (int i=0 ; i<N ; i++) {
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <minArr+0x38>)
 8003116:	781d      	ldrb	r5, [r3, #0]
 8003118:	2d00      	cmp	r5, #0
 800311a:	dd0e      	ble.n	800313a <minArr+0x32>
 800311c:	2300      	movs	r3, #0
 800311e:	2700      	movs	r7, #0
 8003120:	e002      	b.n	8003128 <minArr+0x20>
 8003122:	3301      	adds	r3, #1
 8003124:	42ab      	cmp	r3, r5
 8003126:	da09      	bge.n	800313c <minArr+0x34>
		if ((arr[i] < smallest) && !Q[i]) {
 8003128:	5cc2      	ldrb	r2, [r0, r3]
 800312a:	42a2      	cmp	r2, r4
 800312c:	d2f9      	bcs.n	8003122 <minArr+0x1a>
 800312e:	5cce      	ldrb	r6, [r1, r3]
 8003130:	2e00      	cmp	r6, #0
 8003132:	d1f6      	bne.n	8003122 <minArr+0x1a>
			smallest = arr[i];
			index = i;
 8003134:	b2df      	uxtb	r7, r3
			smallest = arr[i];
 8003136:	0014      	movs	r4, r2
 8003138:	e7f3      	b.n	8003122 <minArr+0x1a>
	for (int i=0 ; i<N ; i++) {
 800313a:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 800313c:	0038      	movs	r0, r7
 800313e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003140:	2000001c 	.word	0x2000001c

08003144 <QnotEmpty>:
*/
uint8_t QnotEmpty(uint8_t* Q)
{		
	char temp = 1;

	for (int i=0 ; i<N ; i++) {
 8003144:	4b07      	ldr	r3, [pc, #28]	; (8003164 <QnotEmpty+0x20>)
 8003146:	7819      	ldrb	r1, [r3, #0]
 8003148:	2900      	cmp	r1, #0
 800314a:	d008      	beq.n	800315e <QnotEmpty+0x1a>
 800314c:	0003      	movs	r3, r0
 800314e:	1841      	adds	r1, r0, r1
	char temp = 1;
 8003150:	2001      	movs	r0, #1
		temp &= Q[i];
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	4010      	ands	r0, r2
 8003156:	3301      	adds	r3, #1
	for (int i=0 ; i<N ; i++) {
 8003158:	428b      	cmp	r3, r1
 800315a:	d1fa      	bne.n	8003152 <QnotEmpty+0xe>
	}	
	
	return temp;
}
 800315c:	4770      	bx	lr
	char temp = 1;
 800315e:	2001      	movs	r0, #1
 8003160:	e7fc      	b.n	800315c <QnotEmpty+0x18>
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	2000001c 	.word	0x2000001c

08003168 <LoadROsnippets>:
/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
*/
uint8_t LoadROsnippets(void)
{
 8003168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800316a:	46de      	mov	lr, fp
 800316c:	4657      	mov	r7, sl
 800316e:	464e      	mov	r6, r9
 8003170:	b5c0      	push	{r6, r7, lr}
 8003172:	b082      	sub	sp, #8
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 8003174:	2032      	movs	r0, #50	; 0x32
 8003176:	f010 fe6d 	bl	8013e54 <malloc>
 800317a:	1e07      	subs	r7, r0, #0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 800317c:	d100      	bne.n	8003180 <LoadROsnippets+0x18>
 800317e:	e071      	b.n	8003264 <LoadROsnippets+0xfc>
	
	// Exit if no recorded Snippets
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <LoadROsnippets+0x100>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	20ff      	movs	r0, #255	; 0xff
 8003186:	2bfe      	cmp	r3, #254	; 0xfe
 8003188:	d166      	bne.n	8003258 <LoadROsnippets+0xf0>
 800318a:	4e38      	ldr	r6, [pc, #224]	; (800326c <LoadROsnippets+0x104>)
 800318c:	3b9a      	subs	r3, #154	; 0x9a
 800318e:	469b      	mov	fp, r3
 8003190:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 8003192:	4d35      	ldr	r5, [pc, #212]	; (8003268 <LoadROsnippets+0x100>)
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
	{
		// Load conditions starting at RO_MID_ADDRESS
		for(i=0 ; i<sizeof(snippet_t) ; i++)
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8003194:	1c7b      	adds	r3, r7, #1
 8003196:	9301      	str	r3, [sp, #4]
			free(snipBuffer);			
			return BOS_ERR_SNIP_MEM_FULL;
		} else {	
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003198:	4b35      	ldr	r3, [pc, #212]	; (8003270 <LoadROsnippets+0x108>)
 800319a:	4699      	mov	r9, r3
 800319c:	e023      	b.n	80031e6 <LoadROsnippets+0x7e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 800319e:	2400      	movs	r4, #0
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 80031a0:	193b      	adds	r3, r7, r4
 80031a2:	3b01      	subs	r3, #1
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <LoadROsnippets+0x46>
 80031aa:	3401      	adds	r4, #1
 80031ac:	b2e4      	uxtb	r4, r4
		snippets[s].cmd = (char *) malloc(i);
 80031ae:	0020      	movs	r0, r4
 80031b0:	f010 fe50 	bl	8013e54 <malloc>
 80031b4:	4653      	mov	r3, sl
 80031b6:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d03f      	beq.n	800323c <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd, snipBuffer, i);
 80031bc:	0022      	movs	r2, r4
 80031be:	0039      	movs	r1, r7
 80031c0:	f011 f895 	bl	80142ee <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80031c4:	464b      	mov	r3, r9
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	464a      	mov	r2, r9
 80031cc:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 80031ce:	0022      	movs	r2, r4
 80031d0:	2100      	movs	r1, #0
 80031d2:	0038      	movs	r0, r7
 80031d4:	f011 f894 	bl	8014300 <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 80031d8:	9b00      	ldr	r3, [sp, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2bfe      	cmp	r3, #254	; 0xfe
 80031de:	d137      	bne.n	8003250 <LoadROsnippets+0xe8>
 80031e0:	3614      	adds	r6, #20
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 80031e2:	455e      	cmp	r6, fp
 80031e4:	d034      	beq.n	8003250 <LoadROsnippets+0xe8>
 80031e6:	0028      	movs	r0, r5
 80031e8:	3014      	adds	r0, #20
{
 80031ea:	002b      	movs	r3, r5
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 80031ec:	1b79      	subs	r1, r7, r5
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	54ca      	strb	r2, [r1, r3]
 80031f2:	3301      	adds	r3, #1
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 80031f4:	4283      	cmp	r3, r0
 80031f6:	d1fa      	bne.n	80031ee <LoadROsnippets+0x86>
 80031f8:	3514      	adds	r5, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 80031fa:	46b2      	mov	sl, r6
 80031fc:	2214      	movs	r2, #20
 80031fe:	9901      	ldr	r1, [sp, #4]
 8003200:	0030      	movs	r0, r6
 8003202:	f011 f874 	bl	80142ee <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003206:	2214      	movs	r2, #20
 8003208:	2100      	movs	r1, #0
 800320a:	0038      	movs	r0, r7
 800320c:	f011 f878 	bl	8014300 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003210:	9500      	str	r5, [sp, #0]
 8003212:	782a      	ldrb	r2, [r5, #0]
 8003214:	1c93      	adds	r3, r2, #2
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d9c0      	bls.n	800319e <LoadROsnippets+0x36>
 800321c:	0039      	movs	r1, r7
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 800321e:	2400      	movs	r4, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 8003220:	700a      	strb	r2, [r1, #0]
			++currentAdd; ++i;
 8003222:	3501      	adds	r5, #1
 8003224:	3401      	adds	r4, #1
 8003226:	b2e4      	uxtb	r4, r4
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003228:	9500      	str	r5, [sp, #0]
 800322a:	782a      	ldrb	r2, [r5, #0]
 800322c:	1c93      	adds	r3, r2, #2
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d9b5      	bls.n	80031a0 <LoadROsnippets+0x38>
 8003234:	3101      	adds	r1, #1
 8003236:	2c32      	cmp	r4, #50	; 0x32
 8003238:	d1f2      	bne.n	8003220 <LoadROsnippets+0xb8>
 800323a:	e7b1      	b.n	80031a0 <LoadROsnippets+0x38>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 800323c:	2214      	movs	r2, #20
 800323e:	2100      	movs	r1, #0
 8003240:	4650      	mov	r0, sl
 8003242:	f011 f85d 	bl	8014300 <memset>
			free(snipBuffer);			
 8003246:	0038      	movs	r0, r7
 8003248:	f010 fe0e 	bl	8013e68 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 800324c:	200e      	movs	r0, #14
 800324e:	e003      	b.n	8003258 <LoadROsnippets+0xf0>
	}	
	
	free(snipBuffer);
 8003250:	0038      	movs	r0, r7
 8003252:	f010 fe09 	bl	8013e68 <free>
	return BOS_OK;
 8003256:	2000      	movs	r0, #0
}
 8003258:	b002      	add	sp, #8
 800325a:	bc1c      	pop	{r2, r3, r4}
 800325c:	4691      	mov	r9, r2
 800325e:	469a      	mov	sl, r3
 8003260:	46a3      	mov	fp, r4
 8003262:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003264:	20fb      	movs	r0, #251	; 0xfb
 8003266:	e7f7      	b.n	8003258 <LoadROsnippets+0xf0>
 8003268:	0801dc00 	.word	0x0801dc00
 800326c:	20006a34 	.word	0x20006a34
 8003270:	2000128b 	.word	0x2000128b

08003274 <LoadROtopology>:


/* --- Load array topology stored in Flash RO --- 
*/
uint8_t LoadROtopology(void)
{
 8003274:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 2, temp = 0;
	
	/* Load number of modules */
	temp = (*(__IO uint16_t*)(RO_START_ADDRESS));
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <LoadROtopology+0x74>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
	
	if (temp == 0xFFFF)				// Memory has been erased
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <LoadROtopology+0x78>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d025      	beq.n	80032ce <LoadROtopology+0x5a>
		myID = 0;
		return BOS_MEM_ERASED;
	}
	else
	{		
		N = (uint8_t) (temp>>8);
 8003282:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)	N = 1;
 8003284:	d02b      	beq.n	80032de <LoadROtopology+0x6a>
		N = (uint8_t) (temp>>8);
 8003286:	491a      	ldr	r1, [pc, #104]	; (80032f0 <LoadROtopology+0x7c>)
 8003288:	700a      	strb	r2, [r1, #0]
		myID = (uint8_t) temp;
 800328a:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <LoadROtopology+0x80>)
 800328c:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i=1 ; i<=N ; i++)
 800328e:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <LoadROtopology+0x7c>)
 8003290:	781d      	ldrb	r5, [r3, #0]
				add += 2;			
			}
		}	
	}
	
	return result;
 8003292:	2000      	movs	r0, #0
		for(uint8_t i=1 ; i<=N ; i++)
 8003294:	2d00      	cmp	r5, #0
 8003296:	d019      	beq.n	80032cc <LoadROtopology+0x58>
 8003298:	2401      	movs	r4, #1
	uint16_t add = 2, temp = 0;
 800329a:	2302      	movs	r3, #2
 800329c:	2716      	movs	r7, #22
 800329e:	4e16      	ldr	r6, [pc, #88]	; (80032f8 <LoadROtopology+0x84>)
 80032a0:	003a      	movs	r2, r7
 80032a2:	4362      	muls	r2, r4
 80032a4:	3a16      	subs	r2, #22
 80032a6:	1992      	adds	r2, r2, r6
 80032a8:	0018      	movs	r0, r3
 80032aa:	3016      	adds	r0, #22
 80032ac:	b280      	uxth	r0, r0
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 80032ae:	490e      	ldr	r1, [pc, #56]	; (80032e8 <LoadROtopology+0x74>)
 80032b0:	1859      	adds	r1, r3, r1
 80032b2:	8809      	ldrh	r1, [r1, #0]
 80032b4:	8011      	strh	r1, [r2, #0]
				add += 2;			
 80032b6:	3302      	adds	r3, #2
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3202      	adds	r2, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 80032bc:	4283      	cmp	r3, r0
 80032be:	d1f6      	bne.n	80032ae <LoadROtopology+0x3a>
		for(uint8_t i=1 ; i<=N ; i++)
 80032c0:	3401      	adds	r4, #1
 80032c2:	b2e4      	uxtb	r4, r4
				add += 2;			
 80032c4:	0003      	movs	r3, r0
		for(uint8_t i=1 ; i<=N ; i++)
 80032c6:	42ac      	cmp	r4, r5
 80032c8:	d9ea      	bls.n	80032a0 <LoadROtopology+0x2c>
	return result;
 80032ca:	2000      	movs	r0, #0
}
 80032cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N = 1;
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <LoadROtopology+0x7c>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
		myID = 0;
 80032d4:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <LoadROtopology+0x80>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 80032da:	20fa      	movs	r0, #250	; 0xfa
 80032dc:	e7f6      	b.n	80032cc <LoadROtopology+0x58>
		if (N == 0)	N = 1;
 80032de:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <LoadROtopology+0x7c>)
 80032e0:	2101      	movs	r1, #1
 80032e2:	7011      	strb	r1, [r2, #0]
 80032e4:	e7d1      	b.n	800328a <LoadROtopology+0x16>
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	0801d800 	.word	0x0801d800
 80032ec:	0000ffff 	.word	0x0000ffff
 80032f0:	2000001c 	.word	0x2000001c
 80032f4:	200010e4 	.word	0x200010e4
 80032f8:	20000b08 	.word	0x20000b08

080032fc <SaveEEportsDir>:


/* --- Save array ports directions in EEPROM --- 
*/
BOS_Status SaveEEportsDir(void)
{
 80032fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fe:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <SaveEEportsDir+0x4c>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01a      	beq.n	800333e <SaveEEportsDir+0x42>
 8003308:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 800330a:	2300      	movs	r3, #0
 800330c:	9301      	str	r3, [sp, #4]
	{
		if (arrayPortsDir[i-1])
 800330e:	4e0f      	ldr	r6, [pc, #60]	; (800334c <SaveEEportsDir+0x50>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003310:	4f0d      	ldr	r7, [pc, #52]	; (8003348 <SaveEEportsDir+0x4c>)
 8003312:	e008      	b.n	8003326 <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003314:	1c60      	adds	r0, r4, #1
 8003316:	f004 fb79 	bl	8007a0c <EE_WriteVariable>
 800331a:	e00a      	b.n	8003332 <SaveEEportsDir+0x36>
	for(uint8_t i=1 ; i<=N ; i++)
 800331c:	3401      	adds	r4, #1
 800331e:	b2e4      	uxtb	r4, r4
 8003320:	783b      	ldrb	r3, [r7, #0]
 8003322:	42a3      	cmp	r3, r4
 8003324:	d30d      	bcc.n	8003342 <SaveEEportsDir+0x46>
		if (arrayPortsDir[i-1])
 8003326:	0025      	movs	r5, r4
 8003328:	1e63      	subs	r3, r4, #1
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	5b99      	ldrh	r1, [r3, r6]
 800332e:	2900      	cmp	r1, #0
 8003330:	d1f0      	bne.n	8003314 <SaveEEportsDir+0x18>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003332:	3502      	adds	r5, #2
 8003334:	2d1b      	cmp	r5, #27
 8003336:	ddf1      	ble.n	800331c <SaveEEportsDir+0x20>
			result = BOS_ERR_EEPROM;
 8003338:	230a      	movs	r3, #10
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	e7ee      	b.n	800331c <SaveEEportsDir+0x20>
	BOS_Status result = BOS_OK; 
 800333e:	2300      	movs	r3, #0
 8003340:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 8003342:	9801      	ldr	r0, [sp, #4]
 8003344:	b003      	add	sp, #12
 8003346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003348:	2000001c 	.word	0x2000001c
 800334c:	20006e84 	.word	0x20006e84

08003350 <ClearEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
*/
BOS_Status ClearEEportsDir(void)
{
 8003350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003352:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8003354:	2232      	movs	r2, #50	; 0x32
 8003356:	2100      	movs	r1, #0
 8003358:	4813      	ldr	r0, [pc, #76]	; (80033a8 <ClearEEportsDir+0x58>)
 800335a:	f010 ffd1 	bl	8014300 <memset>
	
	for(uint8_t i=1 ; i<=N ; i++)
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <ClearEEportsDir+0x5c>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01a      	beq.n	800339c <ClearEEportsDir+0x4c>
 8003366:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003368:	2300      	movs	r3, #0
 800336a:	9301      	str	r3, [sp, #4]
	{
		if (arrayPortsDir[i-1])
 800336c:	4e0e      	ldr	r6, [pc, #56]	; (80033a8 <ClearEEportsDir+0x58>)
	for(uint8_t i=1 ; i<=N ; i++)
 800336e:	4f0f      	ldr	r7, [pc, #60]	; (80033ac <ClearEEportsDir+0x5c>)
 8003370:	e008      	b.n	8003384 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003372:	1c60      	adds	r0, r4, #1
 8003374:	f004 fb4a 	bl	8007a0c <EE_WriteVariable>
 8003378:	e00a      	b.n	8003390 <ClearEEportsDir+0x40>
	for(uint8_t i=1 ; i<=N ; i++)
 800337a:	3401      	adds	r4, #1
 800337c:	b2e4      	uxtb	r4, r4
 800337e:	783b      	ldrb	r3, [r7, #0]
 8003380:	42a3      	cmp	r3, r4
 8003382:	d30d      	bcc.n	80033a0 <ClearEEportsDir+0x50>
		if (arrayPortsDir[i-1])
 8003384:	0025      	movs	r5, r4
 8003386:	1e63      	subs	r3, r4, #1
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	5b99      	ldrh	r1, [r3, r6]
 800338c:	2900      	cmp	r1, #0
 800338e:	d1f0      	bne.n	8003372 <ClearEEportsDir+0x22>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003390:	3502      	adds	r5, #2
 8003392:	2d1b      	cmp	r5, #27
 8003394:	ddf1      	ble.n	800337a <ClearEEportsDir+0x2a>
			result = BOS_ERR_EEPROM;
 8003396:	230a      	movs	r3, #10
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	e7ee      	b.n	800337a <ClearEEportsDir+0x2a>
	BOS_Status result = BOS_OK; 
 800339c:	2300      	movs	r3, #0
 800339e:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80033a0:	9801      	ldr	r0, [sp, #4]
 80033a2:	b003      	add	sp, #12
 80033a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	20006e84 	.word	0x20006e84
 80033ac:	2000001c 	.word	0x2000001c

080033b0 <LoadEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
*/
BOS_Status LoadEEportsDir(void)
{
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <LoadEEportsDir+0x40>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 80033b6:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d017      	beq.n	80033ec <LoadEEportsDir+0x3c>
	{
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 80033bc:	490d      	ldr	r1, [pc, #52]	; (80033f4 <LoadEEportsDir+0x44>)
 80033be:	2002      	movs	r0, #2
 80033c0:	f004 faf4 	bl	80079ac <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 80033c4:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 80033c6:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 80033c8:	4f09      	ldr	r7, [pc, #36]	; (80033f0 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 80033ca:	4e0a      	ldr	r6, [pc, #40]	; (80033f4 <LoadEEportsDir+0x44>)
	for(uint8_t i=1 ; i<=N ; i++)
 80033cc:	3401      	adds	r4, #1
 80033ce:	b2e4      	uxtb	r4, r4
 80033d0:	783b      	ldrb	r3, [r7, #0]
 80033d2:	42a3      	cmp	r3, r4
 80033d4:	d30a      	bcc.n	80033ec <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 80033d6:	1e61      	subs	r1, r4, #1
 80033d8:	0049      	lsls	r1, r1, #1
 80033da:	1989      	adds	r1, r1, r6
 80033dc:	1c60      	adds	r0, r4, #1
 80033de:	f004 fae5 	bl	80079ac <EE_ReadVariable>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80033e2:	1ca3      	adds	r3, r4, #2
 80033e4:	2b1b      	cmp	r3, #27
 80033e6:	ddf1      	ble.n	80033cc <LoadEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 80033e8:	250a      	movs	r5, #10
 80033ea:	e7ef      	b.n	80033cc <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 80033ec:	0028      	movs	r0, r5
 80033ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f0:	2000001c 	.word	0x2000001c
 80033f4:	20006e84 	.word	0x20006e84

080033f8 <SaveEEalias>:
/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
*/
BOS_Status SaveEEalias(void)
{
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	46d6      	mov	lr, sl
 80033fc:	464f      	mov	r7, r9
 80033fe:	4646      	mov	r6, r8
 8003400:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003402:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	4698      	mov	r8, r3
	{
		if (moduleAlias[i][0]) 				
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <SaveEEalias+0x7c>)
 800340a:	469a      	mov	sl, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <SaveEEalias+0x80>)
 800340e:	4699      	mov	r9, r3
 8003410:	e005      	b.n	800341e <SaveEEalias+0x26>
 8003412:	3601      	adds	r6, #1
 8003414:	b2f6      	uxtb	r6, r6
 8003416:	464b      	mov	r3, r9
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	42b3      	cmp	r3, r6
 800341c:	d324      	bcc.n	8003468 <SaveEEalias+0x70>
		if (moduleAlias[i][0]) 				
 800341e:	00b3      	lsls	r3, r6, #2
 8003420:	199b      	adds	r3, r3, r6
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4652      	mov	r2, sl
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f2      	beq.n	8003412 <SaveEEalias+0x1a>
 800342c:	00b5      	lsls	r5, r6, #2
 800342e:	19ad      	adds	r5, r5, r6
 8003430:	006d      	lsls	r5, r5, #1
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <SaveEEalias+0x7c>)
 8003434:	469c      	mov	ip, r3
 8003436:	4465      	add	r5, ip
 8003438:	4644      	mov	r4, r8
 800343a:	341c      	adds	r4, #28
 800343c:	b2a4      	uxth	r4, r4
 800343e:	4647      	mov	r7, r8
 8003440:	3721      	adds	r7, #33	; 0x21
 8003442:	b2bf      	uxth	r7, r7
		{
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
			{
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 8003444:	782b      	ldrb	r3, [r5, #0]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	7869      	ldrb	r1, [r5, #1]
 800344a:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 800344c:	b289      	uxth	r1, r1
 800344e:	0020      	movs	r0, r4
 8003450:	f004 fadc 	bl	8007a0c <EE_WriteVariable>
 8003454:	3502      	adds	r5, #2
 8003456:	3401      	adds	r4, #1
 8003458:	b2a4      	uxth	r4, r4
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 800345a:	42bc      	cmp	r4, r7
 800345c:	d1f2      	bne.n	8003444 <SaveEEalias+0x4c>
 800345e:	4643      	mov	r3, r8
 8003460:	3305      	adds	r3, #5
 8003462:	b29b      	uxth	r3, r3
 8003464:	4698      	mov	r8, r3
 8003466:	e7d4      	b.n	8003412 <SaveEEalias+0x1a>
			}
		}			
	}
	
	return result;
}
 8003468:	2000      	movs	r0, #0
 800346a:	bc1c      	pop	{r2, r3, r4}
 800346c:	4690      	mov	r8, r2
 800346e:	4699      	mov	r9, r3
 8003470:	46a2      	mov	sl, r4
 8003472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003474:	20000fe0 	.word	0x20000fe0
 8003478:	2000001c 	.word	0x2000001c

0800347c <LoadEEalias>:
/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
*/
BOS_Status LoadEEalias(void)
{
 800347c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347e:	46de      	mov	lr, fp
 8003480:	4657      	mov	r7, sl
 8003482:	464e      	mov	r6, r9
 8003484:	4645      	mov	r5, r8
 8003486:	b5e0      	push	{r5, r6, r7, lr}
 8003488:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
 800348a:	466b      	mov	r3, sp
 800348c:	2200      	movs	r2, #0
 800348e:	80da      	strh	r2, [r3, #6]
 8003490:	241c      	movs	r4, #28
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003492:	2700      	movs	r7, #0
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <LoadEEalias+0x7c>)
 8003496:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8003498:	469b      	mov	fp, r3
 800349a:	e00c      	b.n	80034b6 <LoadEEalias+0x3a>
 800349c:	464b      	mov	r3, r9
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	444b      	add	r3, r9
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	445b      	add	r3, fp
 80034a6:	2200      	movs	r2, #0
 80034a8:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80034aa:	3701      	adds	r7, #1
 80034ac:	b2ff      	uxtb	r7, r7
 80034ae:	4b13      	ldr	r3, [pc, #76]	; (80034fc <LoadEEalias+0x80>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	42bb      	cmp	r3, r7
 80034b4:	d317      	bcc.n	80034e6 <LoadEEalias+0x6a>
 80034b6:	00bd      	lsls	r5, r7, #2
 80034b8:	19ed      	adds	r5, r5, r7
 80034ba:	006d      	lsls	r5, r5, #1
 80034bc:	4455      	add	r5, sl
 80034be:	1d63      	adds	r3, r4, #5
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 80034c4:	466b      	mov	r3, sp
 80034c6:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 80034c8:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 80034ca:	0031      	movs	r1, r6
 80034cc:	0020      	movs	r0, r4
 80034ce:	f004 fa6d 	bl	80079ac <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 80034d2:	8833      	ldrh	r3, [r6, #0]
 80034d4:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	702b      	strb	r3, [r5, #0]
 80034da:	3401      	adds	r4, #1
 80034dc:	b2a4      	uxth	r4, r4
 80034de:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80034e0:	45a0      	cmp	r8, r4
 80034e2:	d1f2      	bne.n	80034ca <LoadEEalias+0x4e>
 80034e4:	e7da      	b.n	800349c <LoadEEalias+0x20>
	}
	
	return result;
}
 80034e6:	2000      	movs	r0, #0
 80034e8:	b003      	add	sp, #12
 80034ea:	bc3c      	pop	{r2, r3, r4, r5}
 80034ec:	4690      	mov	r8, r2
 80034ee:	4699      	mov	r9, r3
 80034f0:	46a2      	mov	sl, r4
 80034f2:	46ab      	mov	fp, r5
 80034f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	20000fe0 	.word	0x20000fe0
 80034fc:	2000001c 	.word	0x2000001c

08003500 <LoadEEgroup>:
/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
*/
BOS_Status LoadEEgroup(void)
{
 8003500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003502:	46d6      	mov	lr, sl
 8003504:	464f      	mov	r7, r9
 8003506:	4646      	mov	r6, r8
 8003508:	b5c0      	push	{r6, r7, lr}
 800350a:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0; uint8_t i=0;
 800350c:	466b      	mov	r3, sp
 800350e:	2200      	movs	r2, #0
 8003510:	80da      	strh	r2, [r3, #6]
	
	/* Load group members */
	for(i=0 ; i<N ; i++)			// N modules
 8003512:	4b22      	ldr	r3, [pc, #136]	; (800359c <LoadEEgroup+0x9c>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01d      	beq.n	8003556 <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 800351a:	2500      	movs	r5, #0
	{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 800351c:	4e20      	ldr	r6, [pc, #128]	; (80035a0 <LoadEEgroup+0xa0>)
	for(i=0 ; i<N ; i++)			// N modules
 800351e:	4c1f      	ldr	r4, [pc, #124]	; (800359c <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 8003520:	b2e9      	uxtb	r1, r5
 8003522:	0049      	lsls	r1, r1, #1
 8003524:	1871      	adds	r1, r6, r1
 8003526:	0028      	movs	r0, r5
 8003528:	30cb      	adds	r0, #203	; 0xcb
 800352a:	b280      	uxth	r0, r0
 800352c:	f004 fa3e 	bl	80079ac <EE_ReadVariable>
		add++;
 8003530:	3501      	adds	r5, #1
 8003532:	b2ad      	uxth	r5, r5
	for(i=0 ; i<N ; i++)			// N modules
 8003534:	7822      	ldrb	r2, [r4, #0]
 8003536:	b2eb      	uxtb	r3, r5
 8003538:	429a      	cmp	r2, r3
 800353a:	d8f1      	bhi.n	8003520 <LoadEEgroup+0x20>
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <LoadEEgroup+0xa4>)
 800353e:	4699      	mov	r9, r3
 8003540:	002c      	movs	r4, r5
 8003542:	3499      	adds	r4, #153	; 0x99
 8003544:	b2a4      	uxth	r4, r4
 8003546:	35cb      	adds	r5, #203	; 0xcb
 8003548:	b2ab      	uxth	r3, r5
 800354a:	4698      	mov	r8, r3
	/* Load group alias */
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
	{
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
		{
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 800354c:	466b      	mov	r3, sp
 800354e:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8003550:	2300      	movs	r3, #0
 8003552:	469a      	mov	sl, r3
 8003554:	e009      	b.n	800356a <LoadEEgroup+0x6a>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8003556:	2500      	movs	r5, #0
 8003558:	e7f0      	b.n	800353c <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 800355a:	464b      	mov	r3, r9
 800355c:	4652      	mov	r2, sl
 800355e:	725a      	strb	r2, [r3, #9]
 8003560:	230a      	movs	r3, #10
 8003562:	469c      	mov	ip, r3
 8003564:	44e1      	add	r9, ip
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8003566:	4544      	cmp	r4, r8
 8003568:	d010      	beq.n	800358c <LoadEEgroup+0x8c>
 800356a:	1d67      	adds	r7, r4, #5
 800356c:	b2bf      	uxth	r7, r7
	uint16_t add = 0, temp = 0; uint8_t i=0;
 800356e:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8003570:	0031      	movs	r1, r6
 8003572:	0020      	movs	r0, r4
 8003574:	f004 fa1a 	bl	80079ac <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8003578:	8833      	ldrh	r3, [r6, #0]
 800357a:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	702b      	strb	r3, [r5, #0]
 8003580:	3401      	adds	r4, #1
 8003582:	b2a4      	uxth	r4, r4
 8003584:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003586:	42bc      	cmp	r4, r7
 8003588:	d1f2      	bne.n	8003570 <LoadEEgroup+0x70>
 800358a:	e7e6      	b.n	800355a <LoadEEgroup+0x5a>
	}
	
	return result;
}
 800358c:	2000      	movs	r0, #0
 800358e:	b002      	add	sp, #8
 8003590:	bc1c      	pop	{r2, r3, r4}
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	46a2      	mov	sl, r4
 8003598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	2000001c 	.word	0x2000001c
 80035a0:	20000f38 	.word	0x20000f38
 80035a4:	20000ed4 	.word	0x20000ed4

080035a8 <LoadEEstreams>:
/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
*/
BOS_Status LoadEEstreams(void)
{
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK; 
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 80035ac:	210e      	movs	r1, #14
 80035ae:	4469      	add	r1, sp
 80035b0:	2300      	movs	r3, #0
 80035b2:	800b      	strh	r3, [r1, #0]
 80035b4:	aa03      	add	r2, sp, #12
 80035b6:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 80035b8:	20e4      	movs	r0, #228	; 0xe4
 80035ba:	f004 f9f7 	bl	80079ac <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 80035be:	2600      	movs	r6, #0
	if (!status1) {
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d102      	bne.n	80035ca <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 80035c4:	230e      	movs	r3, #14
 80035c6:	446b      	add	r3, sp
 80035c8:	781e      	ldrb	r6, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 80035ca:	210e      	movs	r1, #14
 80035cc:	4469      	add	r1, sp
 80035ce:	20e5      	movs	r0, #229	; 0xe5
 80035d0:	f004 f9ec 	bl	80079ac <EE_ReadVariable>
 80035d4:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 80035d6:	a903      	add	r1, sp, #12
 80035d8:	20e6      	movs	r0, #230	; 0xe6
 80035da:	f004 f9e7 	bl	80079ac <EE_ReadVariable>
	if (!status1 && !status2) {
 80035de:	4304      	orrs	r4, r0
 80035e0:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 80035e2:	2500      	movs	r5, #0
	if (!status1 && !status2) {
 80035e4:	2c00      	cmp	r4, #0
 80035e6:	d106      	bne.n	80035f6 <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 80035e8:	230e      	movs	r3, #14
 80035ea:	446b      	add	r3, sp
 80035ec:	881d      	ldrh	r5, [r3, #0]
 80035ee:	042d      	lsls	r5, r5, #16
 80035f0:	ab03      	add	r3, sp, #12
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 80035f6:	210e      	movs	r1, #14
 80035f8:	4469      	add	r1, sp
 80035fa:	20e7      	movs	r0, #231	; 0xe7
 80035fc:	f004 f9d6 	bl	80079ac <EE_ReadVariable>
 8003600:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 8003602:	a903      	add	r1, sp, #12
 8003604:	20e8      	movs	r0, #232	; 0xe8
 8003606:	f004 f9d1 	bl	80079ac <EE_ReadVariable>
	if (!status1 && !status2) {
 800360a:	4320      	orrs	r0, r4
 800360c:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 800360e:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 8003610:	2800      	cmp	r0, #0
 8003612:	d106      	bne.n	8003622 <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 8003614:	230e      	movs	r3, #14
 8003616:	446b      	add	r3, sp
 8003618:	881c      	ldrh	r4, [r3, #0]
 800361a:	0424      	lsls	r4, r4, #16
 800361c:	ab03      	add	r3, sp, #12
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 8003622:	210e      	movs	r1, #14
 8003624:	4469      	add	r1, sp
 8003626:	20e9      	movs	r0, #233	; 0xe9
 8003628:	f004 f9c0 	bl	80079ac <EE_ReadVariable>
	if (!status1) {
 800362c:	2800      	cmp	r0, #0
 800362e:	d107      	bne.n	8003640 <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 8003630:	230e      	movs	r3, #14
 8003632:	446b      	add	r3, sp
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	0a19      	lsrs	r1, r3, #8
 8003638:	4a28      	ldr	r2, [pc, #160]	; (80036dc <LoadEEstreams+0x134>)
 800363a:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 800363c:	4a28      	ldr	r2, [pc, #160]	; (80036e0 <LoadEEstreams+0x138>)
 800363e:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 8003640:	210e      	movs	r1, #14
 8003642:	4469      	add	r1, sp
 8003644:	20ea      	movs	r0, #234	; 0xea
 8003646:	f004 f9b1 	bl	80079ac <EE_ReadVariable>
	if (!status1) {
 800364a:	2800      	cmp	r0, #0
 800364c:	d107      	bne.n	800365e <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 800364e:	230e      	movs	r3, #14
 8003650:	446b      	add	r3, sp
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	0a19      	lsrs	r1, r3, #8
 8003656:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <LoadEEstreams+0x13c>)
 8003658:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 800365a:	4a23      	ldr	r2, [pc, #140]	; (80036e8 <LoadEEstreams+0x140>)
 800365c:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 800365e:	210e      	movs	r1, #14
 8003660:	4469      	add	r1, sp
 8003662:	20eb      	movs	r0, #235	; 0xeb
 8003664:	f004 f9a2 	bl	80079ac <EE_ReadVariable>
	if (!status1) {
 8003668:	2800      	cmp	r0, #0
 800366a:	d107      	bne.n	800367c <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 800366c:	230e      	movs	r3, #14
 800366e:	446b      	add	r3, sp
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	0a19      	lsrs	r1, r3, #8
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <LoadEEstreams+0x144>)
 8003676:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <LoadEEstreams+0x148>)
 800367a:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if (src1 && dst1)
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <LoadEEstreams+0x134>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <LoadEEstreams+0xe4>
 8003684:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <LoadEEstreams+0x138>)
 8003686:	7812      	ldrb	r2, [r2, #0]
 8003688:	2a00      	cmp	r2, #0
 800368a:	d112      	bne.n	80036b2 <LoadEEstreams+0x10a>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 800368c:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <LoadEEstreams+0x13c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <LoadEEstreams+0xf4>
 8003694:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <LoadEEstreams+0x140>)
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	2a00      	cmp	r2, #0
 800369a:	d111      	bne.n	80036c0 <LoadEEstreams+0x118>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 800369c:	4b13      	ldr	r3, [pc, #76]	; (80036ec <LoadEEstreams+0x144>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <LoadEEstreams+0x104>
 80036a4:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <LoadEEstreams+0x148>)
 80036a6:	7812      	ldrb	r2, [r2, #0]
 80036a8:	2a00      	cmp	r2, #0
 80036aa:	d110      	bne.n	80036ce <LoadEEstreams+0x126>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
	
	return result;
}
 80036ac:	2000      	movs	r0, #0
 80036ae:	b004      	add	sp, #16
 80036b0:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 80036b2:	9200      	str	r2, [sp, #0]
 80036b4:	0022      	movs	r2, r4
 80036b6:	0029      	movs	r1, r5
 80036b8:	0030      	movs	r0, r6
 80036ba:	f005 fb33 	bl	8008d24 <SetupDMAStreams>
 80036be:	e7e5      	b.n	800368c <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	0022      	movs	r2, r4
 80036c4:	0029      	movs	r1, r5
 80036c6:	0030      	movs	r0, r6
 80036c8:	f005 fb2c 	bl	8008d24 <SetupDMAStreams>
 80036cc:	e7e6      	b.n	800369c <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 80036ce:	9200      	str	r2, [sp, #0]
 80036d0:	0022      	movs	r2, r4
 80036d2:	0029      	movs	r1, r5
 80036d4:	0030      	movs	r0, r6
 80036d6:	f005 fb25 	bl	8008d24 <SetupDMAStreams>
 80036da:	e7e7      	b.n	80036ac <LoadEEstreams+0x104>
 80036dc:	200011b9 	.word	0x200011b9
 80036e0:	20000ed1 	.word	0x20000ed1
 80036e4:	200011ba 	.word	0x200011ba
 80036e8:	20000ed2 	.word	0x20000ed2
 80036ec:	200011bb 	.word	0x200011bb
 80036f0:	20000ed3 	.word	0x20000ed3

080036f4 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
*/
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout, uint8_t src1, uint8_t dst1, uint8_t src2, \
	uint8_t dst2, uint8_t src3, uint8_t dst3)
{
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	46de      	mov	lr, fp
 80036f8:	4657      	mov	r7, sl
 80036fa:	464e      	mov	r6, r9
 80036fc:	4645      	mov	r5, r8
 80036fe:	b5e0      	push	{r5, r6, r7, lr}
 8003700:	000f      	movs	r7, r1
 8003702:	0016      	movs	r6, r2
 8003704:	4699      	mov	r9, r3
 8003706:	ab0a      	add	r3, sp, #40	; 0x28
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	469b      	mov	fp, r3
 800370c:	ab0b      	add	r3, sp, #44	; 0x2c
 800370e:	781d      	ldrb	r5, [r3, #0]
 8003710:	ab0c      	add	r3, sp, #48	; 0x30
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	469a      	mov	sl, r3
 8003716:	ab0d      	add	r3, sp, #52	; 0x34
 8003718:	781c      	ldrb	r4, [r3, #0]
 800371a:	ab0e      	add	r3, sp, #56	; 0x38
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK; 
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 8003720:	b281      	uxth	r1, r0
 8003722:	20e4      	movs	r0, #228	; 0xe4
 8003724:	f004 f972 	bl	8007a0c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 8003728:	0a39      	lsrs	r1, r7, #8
 800372a:	b289      	uxth	r1, r1
 800372c:	20e5      	movs	r0, #229	; 0xe5
 800372e:	f004 f96d 	bl	8007a0c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 8003732:	b2b9      	uxth	r1, r7
 8003734:	20e6      	movs	r0, #230	; 0xe6
 8003736:	f004 f969 	bl	8007a0c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 800373a:	0a31      	lsrs	r1, r6, #8
 800373c:	b289      	uxth	r1, r1
 800373e:	20e7      	movs	r0, #231	; 0xe7
 8003740:	f004 f964 	bl	8007a0c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 8003744:	b2b1      	uxth	r1, r6
 8003746:	20e8      	movs	r0, #232	; 0xe8
 8003748:	f004 f960 	bl	8007a0c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 800374c:	464b      	mov	r3, r9
 800374e:	0219      	lsls	r1, r3, #8
 8003750:	4459      	add	r1, fp
 8003752:	b289      	uxth	r1, r1
 8003754:	20e9      	movs	r0, #233	; 0xe9
 8003756:	f004 f959 	bl	8007a0c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 800375a:	022d      	lsls	r5, r5, #8
 800375c:	4455      	add	r5, sl
 800375e:	b2a9      	uxth	r1, r5
 8003760:	20ea      	movs	r0, #234	; 0xea
 8003762:	f004 f953 	bl	8007a0c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 8003766:	0224      	lsls	r4, r4, #8
 8003768:	4444      	add	r4, r8
 800376a:	b2a1      	uxth	r1, r4
 800376c:	20eb      	movs	r0, #235	; 0xeb
 800376e:	f004 f94d 	bl	8007a0c <EE_WriteVariable>
	
	return result;
}
 8003772:	2000      	movs	r0, #0
 8003774:	bc3c      	pop	{r2, r3, r4, r5}
 8003776:	4690      	mov	r8, r2
 8003778:	4699      	mov	r9, r3
 800377a:	46a2      	mov	sl, r4
 800377c:	46ab      	mov	fp, r5
 800377e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003780 <LoadEEparams>:
/*-----------------------------------------------------------*/	

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
*/
BOS_Status LoadEEparams(void)
{
 8003780:	b510      	push	{r4, lr}
 8003782:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t temp1, temp2, status1, status2; 
	
	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8003784:	208a      	movs	r0, #138	; 0x8a
 8003786:	466b      	mov	r3, sp
 8003788:	1d99      	adds	r1, r3, #6
 800378a:	0040      	lsls	r0, r0, #1
 800378c:	f004 f90e 	bl	80079ac <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003790:	2800      	cmp	r0, #0
 8003792:	d000      	beq.n	8003796 <LoadEEparams+0x16>
 8003794:	e064      	b.n	8003860 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 8003796:	466b      	mov	r3, sp
 8003798:	3306      	adds	r3, #6
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	4a49      	ldr	r2, [pc, #292]	; (80038c4 <LoadEEparams+0x144>)
 800379e:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}
		
	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 80037a4:	2016      	movs	r0, #22
 80037a6:	466b      	mov	r3, sp
 80037a8:	1d99      	adds	r1, r3, #6
 80037aa:	30ff      	adds	r0, #255	; 0xff
 80037ac:	f004 f8fe 	bl	80079ac <EE_ReadVariable>
	if (!status1) 
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d15c      	bne.n	800386e <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 80037b4:	466b      	mov	r3, sp
 80037b6:	88da      	ldrh	r2, [r3, #6]
 80037b8:	4b42      	ldr	r3, [pc, #264]	; (80038c4 <LoadEEparams+0x144>)
 80037ba:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 80037bc:	208b      	movs	r0, #139	; 0x8b
 80037be:	466b      	mov	r3, sp
 80037c0:	1d99      	adds	r1, r3, #6
 80037c2:	0040      	lsls	r0, r0, #1
 80037c4:	f004 f8f2 	bl	80079ac <EE_ReadVariable>
	if (!status1) 
 80037c8:	2800      	cmp	r0, #0
 80037ca:	d155      	bne.n	8003878 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime = temp1;
 80037cc:	466b      	mov	r3, sp
 80037ce:	88da      	ldrh	r2, [r3, #6]
 80037d0:	4b3c      	ldr	r3, [pc, #240]	; (80038c4 <LoadEEparams+0x144>)
 80037d2:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 80037d4:	2018      	movs	r0, #24
 80037d6:	466b      	mov	r3, sp
 80037d8:	1d99      	adds	r1, r3, #6
 80037da:	30ff      	adds	r0, #255	; 0xff
 80037dc:	f004 f8e6 	bl	80079ac <EE_ReadVariable>
	if (!status1) {
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d14e      	bne.n	8003882 <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 80037e4:	466b      	mov	r3, sp
 80037e6:	3306      	adds	r3, #6
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	4a36      	ldr	r2, [pc, #216]	; (80038c4 <LoadEEparams+0x144>)
 80037ec:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
	}
	
	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 80037f2:	208c      	movs	r0, #140	; 0x8c
 80037f4:	466b      	mov	r3, sp
 80037f6:	1d99      	adds	r1, r3, #6
 80037f8:	0040      	lsls	r0, r0, #1
 80037fa:	f004 f8d7 	bl	80079ac <EE_ReadVariable>
 80037fe:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 8003800:	201a      	movs	r0, #26
 8003802:	a901      	add	r1, sp, #4
 8003804:	30ff      	adds	r0, #255	; 0xff
 8003806:	f004 f8d1 	bl	80079ac <EE_ReadVariable>
	if (!status1 && !status2) 
 800380a:	4304      	orrs	r4, r0
 800380c:	b2a4      	uxth	r4, r4
 800380e:	2c00      	cmp	r4, #0
 8003810:	d13e      	bne.n	8003890 <LoadEEparams+0x110>
	{
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 8003812:	ab01      	add	r3, sp, #4
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	466a      	mov	r2, sp
 800381a:	3206      	adds	r2, #6
 800381c:	8812      	ldrh	r2, [r2, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	4a28      	ldr	r2, [pc, #160]	; (80038c4 <LoadEEparams+0x144>)
 8003822:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8003824:	208d      	movs	r0, #141	; 0x8d
 8003826:	466b      	mov	r3, sp
 8003828:	1d99      	adds	r1, r3, #6
 800382a:	0040      	lsls	r0, r0, #1
 800382c:	f004 f8be 	bl	80079ac <EE_ReadVariable>
	if (!status1) {
 8003830:	2800      	cmp	r0, #0
 8003832:	d13b      	bne.n	80038ac <LoadEEparams+0x12c>
		BOS.daylightsaving = (int8_t)temp1;
 8003834:	466b      	mov	r3, sp
 8003836:	3306      	adds	r3, #6
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <LoadEEparams+0x144>)
 800383c:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}		
	
	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8003842:	201c      	movs	r0, #28
 8003844:	466b      	mov	r3, sp
 8003846:	1d99      	adds	r1, r3, #6
 8003848:	30ff      	adds	r0, #255	; 0xff
 800384a:	f004 f8af 	bl	80079ac <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 800384e:	2800      	cmp	r0, #0
 8003850:	d032      	beq.n	80038b8 <LoadEEparams+0x138>
		BOS.disableCLI = (uint8_t)temp1;
	/* Couldn't find the variable, load default config */
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <LoadEEparams+0x148>)
 8003854:	7eda      	ldrb	r2, [r3, #27]
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <LoadEEparams+0x144>)
 8003858:	76da      	strb	r2, [r3, #27]
	}
	
	return result;
}
 800385a:	2000      	movs	r0, #0
 800385c:	b002      	add	sp, #8
 800385e:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8003860:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <LoadEEparams+0x144>)
 8003862:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <LoadEEparams+0x148>)
 8003864:	7991      	ldrb	r1, [r2, #6]
 8003866:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 8003868:	79d2      	ldrb	r2, [r2, #7]
 800386a:	71da      	strb	r2, [r3, #7]
 800386c:	e79a      	b.n	80037a4 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <LoadEEparams+0x148>)
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <LoadEEparams+0x144>)
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	e7a1      	b.n	80037bc <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <LoadEEparams+0x148>)
 800387a:	885a      	ldrh	r2, [r3, #2]
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <LoadEEparams+0x144>)
 800387e:	805a      	strh	r2, [r3, #2]
 8003880:	e7a8      	b.n	80037d4 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <LoadEEparams+0x144>)
 8003884:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <LoadEEparams+0x148>)
 8003886:	7911      	ldrb	r1, [r2, #4]
 8003888:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 800388a:	7952      	ldrb	r2, [r2, #5]
 800388c:	715a      	strb	r2, [r3, #5]
 800388e:	e7b0      	b.n	80037f2 <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <LoadEEparams+0x14c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <LoadEEparams+0x144>)
 800389a:	22e1      	movs	r2, #225	; 0xe1
 800389c:	0252      	lsls	r2, r2, #9
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	e7c0      	b.n	8003824 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <LoadEEparams+0x148>)
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <LoadEEparams+0x144>)
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	e7bb      	b.n	8003824 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <LoadEEparams+0x144>)
 80038ae:	2218      	movs	r2, #24
 80038b0:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 80038b2:	2200      	movs	r2, #0
 80038b4:	731a      	strb	r2, [r3, #12]
 80038b6:	e7c4      	b.n	8003842 <LoadEEparams+0xc2>
		BOS.disableCLI = (uint8_t)temp1;
 80038b8:	466b      	mov	r3, sp
 80038ba:	88da      	ldrh	r2, [r3, #6]
 80038bc:	4b01      	ldr	r3, [pc, #4]	; (80038c4 <LoadEEparams+0x144>)
 80038be:	76da      	strb	r2, [r3, #27]
 80038c0:	e7cb      	b.n	800385a <LoadEEparams+0xda>
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	20006a18 	.word	0x20006a18
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000b06 	.word	0x20000b06

080038d0 <SaveEEparams>:
/*-----------------------------------------------------------*/	

/* --- Save module parameters to emulated EEPROM. --- 
*/
BOS_Status SaveEEparams(void)
{
 80038d0:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK; 
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 80038d2:	4c1a      	ldr	r4, [pc, #104]	; (800393c <SaveEEparams+0x6c>)
 80038d4:	79e3      	ldrb	r3, [r4, #7]
 80038d6:	015b      	lsls	r3, r3, #5
 80038d8:	79a1      	ldrb	r1, [r4, #6]
 80038da:	4319      	orrs	r1, r3
 80038dc:	208a      	movs	r0, #138	; 0x8a
 80038de:	0040      	lsls	r0, r0, #1
 80038e0:	f004 f894 	bl	8007a0c <EE_WriteVariable>
		
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 80038e4:	8821      	ldrh	r1, [r4, #0]
 80038e6:	2016      	movs	r0, #22
 80038e8:	30ff      	adds	r0, #255	; 0xff
 80038ea:	f004 f88f 	bl	8007a0c <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 80038ee:	8861      	ldrh	r1, [r4, #2]
 80038f0:	208b      	movs	r0, #139	; 0x8b
 80038f2:	0040      	lsls	r0, r0, #1
 80038f4:	f004 f88a 	bl	8007a0c <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 80038f8:	7963      	ldrb	r3, [r4, #5]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	7b21      	ldrb	r1, [r4, #12]
 80038fe:	4319      	orrs	r1, r3
 8003900:	2018      	movs	r0, #24
 8003902:	30ff      	adds	r0, #255	; 0xff
 8003904:	f004 f882 	bl	8007a0c <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8003908:	8921      	ldrh	r1, [r4, #8]
 800390a:	208c      	movs	r0, #140	; 0x8c
 800390c:	0040      	lsls	r0, r0, #1
 800390e:	f004 f87d 	bl	8007a0c <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 8003912:	8961      	ldrh	r1, [r4, #10]
 8003914:	201a      	movs	r0, #26
 8003916:	30ff      	adds	r0, #255	; 0xff
 8003918:	f004 f878 	bl	8007a0c <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800391c:	7b63      	ldrb	r3, [r4, #13]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	7921      	ldrb	r1, [r4, #4]
 8003922:	4319      	orrs	r1, r3
 8003924:	208d      	movs	r0, #141	; 0x8d
 8003926:	0040      	lsls	r0, r0, #1
 8003928:	f004 f870 	bl	8007a0c <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 800392c:	7ee1      	ldrb	r1, [r4, #27]
 800392e:	201c      	movs	r0, #28
 8003930:	30ff      	adds	r0, #255	; 0xff
 8003932:	f004 f86b 	bl	8007a0c <EE_WriteVariable>
	
	return result;
}
 8003936:	2000      	movs	r0, #0
 8003938:	bd10      	pop	{r4, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	20006a18 	.word	0x20006a18

08003940 <LoadEEbuttons>:
/*-----------------------------------------------------------*/	

/* --- Load button definitions and events from EEPROM --- 
*/
BOS_Status LoadEEbuttons(void)
{
 8003940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003942:	46ce      	mov	lr, r9
 8003944:	4647      	mov	r7, r8
 8003946:	b580      	push	{r7, lr}
 8003948:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	uint16_t temp16 = 0, status1 = 0; 
 800394a:	231e      	movs	r3, #30
 800394c:	446b      	add	r3, sp
 800394e:	2200      	movs	r2, #0
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	2501      	movs	r5, #1
 8003954:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 = 0;
	
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
	{
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8003956:	001e      	movs	r6, r3
 8003958:	230f      	movs	r3, #15
 800395a:	4698      	mov	r8, r3
 800395c:	e004      	b.n	8003968 <LoadEEbuttons+0x28>
 800395e:	3404      	adds	r4, #4
 8003960:	b2a4      	uxth	r4, r4
 8003962:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8003964:	2d08      	cmp	r5, #8
 8003966:	d058      	beq.n	8003a1a <LoadEEbuttons+0xda>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8003968:	0031      	movs	r1, r6
 800396a:	0020      	movs	r0, r4
 800396c:	f004 f81e 	bl	80079ac <EE_ReadVariable>
		
		if(!status1)																												// This variable exists
 8003970:	2800      	cmp	r0, #0
 8003972:	d1f4      	bne.n	800395e <LoadEEbuttons+0x1e>
		{
			temp8 = (uint8_t)(temp16 >> 8);
 8003974:	8831      	ldrh	r1, [r6, #0]
 8003976:	0a0b      	lsrs	r3, r1, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 8003978:	091a      	lsrs	r2, r3, #4
 800397a:	42aa      	cmp	r2, r5
 800397c:	d1ef      	bne.n	800395e <LoadEEbuttons+0x1e>
 800397e:	4640      	mov	r0, r8
 8003980:	4003      	ands	r3, r0
 8003982:	d0ec      	beq.n	800395e <LoadEEbuttons+0x1e>
			{
				button[i+1].type = temp8 & 0x0F;
 8003984:	00d0      	lsls	r0, r2, #3
 8003986:	1882      	adds	r2, r0, r2
 8003988:	4827      	ldr	r0, [pc, #156]	; (8003a28 <LoadEEbuttons+0xe8>)
 800398a:	4681      	mov	r9, r0
 800398c:	4491      	add	r9, r2
 800398e:	464a      	mov	r2, r9
 8003990:	7053      	strb	r3, [r2, #1]
				button[i+1].events = (uint8_t)temp16;
 8003992:	7211      	strb	r1, [r2, #8]
 8003994:	00af      	lsls	r7, r5, #2
 8003996:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 8003998:	0038      	movs	r0, r7
 800399a:	30e9      	adds	r0, #233	; 0xe9
 800399c:	b280      	uxth	r0, r0
 800399e:	0031      	movs	r1, r6
 80039a0:	f004 f804 	bl	80079ac <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 80039a4:	8833      	ldrh	r3, [r6, #0]
 80039a6:	0a1a      	lsrs	r2, r3, #8
 80039a8:	4649      	mov	r1, r9
 80039aa:	708a      	strb	r2, [r1, #2]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 80039ac:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 80039ae:	0038      	movs	r0, r7
 80039b0:	30ea      	adds	r0, #234	; 0xea
 80039b2:	b280      	uxth	r0, r0
 80039b4:	0031      	movs	r1, r6
 80039b6:	f003 fff9 	bl	80079ac <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 80039ba:	8833      	ldrh	r3, [r6, #0]
 80039bc:	0a1a      	lsrs	r2, r3, #8
 80039be:	4649      	mov	r1, r9
 80039c0:	70ca      	strb	r2, [r1, #3]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 80039c2:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 80039c4:	37eb      	adds	r7, #235	; 0xeb
 80039c6:	b2b8      	uxth	r0, r7
 80039c8:	0031      	movs	r1, r6
 80039ca:	f003 ffef 	bl	80079ac <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 80039ce:	8833      	ldrh	r3, [r6, #0]
 80039d0:	0a1a      	lsrs	r2, r3, #8
 80039d2:	4649      	mov	r1, r9
 80039d4:	710a      	strb	r2, [r1, #4]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 80039d6:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i+1].type, i+1);
 80039d8:	b2ef      	uxtb	r7, r5
 80039da:	7848      	ldrb	r0, [r1, #1]
 80039dc:	0039      	movs	r1, r7
 80039de:	f004 ff21 	bl	8008824 <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 80039e2:	464b      	mov	r3, r9
 80039e4:	7a19      	ldrb	r1, [r3, #8]
 80039e6:	789b      	ldrb	r3, [r3, #2]
 80039e8:	104a      	asrs	r2, r1, #1
 80039ea:	2001      	movs	r0, #1
 80039ec:	4002      	ands	r2, r0
 80039ee:	4001      	ands	r1, r0
 80039f0:	2000      	movs	r0, #0
 80039f2:	9005      	str	r0, [sp, #20]
 80039f4:	4648      	mov	r0, r9
 80039f6:	79c0      	ldrb	r0, [r0, #7]
 80039f8:	9004      	str	r0, [sp, #16]
 80039fa:	4648      	mov	r0, r9
 80039fc:	7980      	ldrb	r0, [r0, #6]
 80039fe:	9003      	str	r0, [sp, #12]
 8003a00:	4648      	mov	r0, r9
 8003a02:	7940      	ldrb	r0, [r0, #5]
 8003a04:	9002      	str	r0, [sp, #8]
 8003a06:	4648      	mov	r0, r9
 8003a08:	7900      	ldrb	r0, [r0, #4]
 8003a0a:	9001      	str	r0, [sp, #4]
 8003a0c:	4648      	mov	r0, r9
 8003a0e:	78c0      	ldrb	r0, [r0, #3]
 8003a10:	9000      	str	r0, [sp, #0]
 8003a12:	0038      	movs	r0, r7
 8003a14:	f005 f820 	bl	8008a58 <SetButtonEvents>
 8003a18:	e7a1      	b.n	800395e <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	b009      	add	sp, #36	; 0x24
 8003a1e:	bc0c      	pop	{r2, r3}
 8003a20:	4690      	mov	r8, r2
 8003a22:	4699      	mov	r9, r3
 8003a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	20001574 	.word	0x20001574

08003a2c <LoadEEvars>:
{
 8003a2c:	b510      	push	{r4, lr}
	LoadROtopology();
 8003a2e:	f7ff fc21 	bl	8003274 <LoadROtopology>
	LoadEEportsDir();
 8003a32:	f7ff fcbd 	bl	80033b0 <LoadEEportsDir>
	LoadEEalias();
 8003a36:	f7ff fd21 	bl	800347c <LoadEEalias>
	LoadEEgroup();
 8003a3a:	f7ff fd61 	bl	8003500 <LoadEEgroup>
	LoadEEstreams();
 8003a3e:	f7ff fdb3 	bl	80035a8 <LoadEEstreams>
	LoadEEparams();	
 8003a42:	f7ff fe9d 	bl	8003780 <LoadEEparams>
	LoadEEbuttons();	
 8003a46:	f7ff ff7b 	bl	8003940 <LoadEEbuttons>
	LoadROsnippets();
 8003a4a:	f7ff fb8d 	bl	8003168 <LoadROsnippets>
}
 8003a4e:	bd10      	pop	{r4, pc}

08003a50 <IsLowerCLIbaud>:

/* --- Check if booting into lower CLI baudrate:
				- Connect P1 TXD and P2 RXD to boot CLI at 115200
*/
uint8_t IsLowerCLIbaud(void)
{
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8003a54:	2512      	movs	r5, #18
 8003a56:	446d      	add	r5, sp
 8003a58:	ab04      	add	r3, sp, #16
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	ab07      	add	r3, sp, #28
 8003a5e:	002a      	movs	r2, r5
 8003a60:	a908      	add	r1, sp, #32
 8003a62:	2001      	movs	r0, #1
 8003a64:	f009 fc12 	bl	800d28c <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 8003a68:	ac03      	add	r4, sp, #12
 8003a6a:	9400      	str	r4, [sp, #0]
 8003a6c:	ab05      	add	r3, sp, #20
 8003a6e:	220e      	movs	r2, #14
 8003a70:	446a      	add	r2, sp
 8003a72:	a906      	add	r1, sp, #24
 8003a74:	2002      	movs	r0, #2
 8003a76:	f009 fc09 	bl	800d28c <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2600      	movs	r6, #0
 8003a80:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8003a82:	882b      	ldrh	r3, [r5, #0]
 8003a84:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 8003a86:	a909      	add	r1, sp, #36	; 0x24
 8003a88:	9808      	ldr	r0, [sp, #32]
 8003a8a:	f00d ff51 	bl	8011930 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a8e:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8003a90:	2302      	movs	r3, #2
 8003a92:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8003a94:	8823      	ldrh	r3, [r4, #0]
 8003a96:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 8003a98:	a909      	add	r1, sp, #36	; 0x24
 8003a9a:	9805      	ldr	r0, [sp, #20]
 8003a9c:	f00d ff48 	bl	8011930 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003aa0:	8829      	ldrh	r1, [r5, #0]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	9808      	ldr	r0, [sp, #32]
 8003aa6:	f00e f829 	bl	8011afc <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 8003aaa:	2005      	movs	r0, #5
 8003aac:	f00a f82e 	bl	800db0c <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003ab0:	8821      	ldrh	r1, [r4, #0]
 8003ab2:	9805      	ldr	r0, [sp, #20]
 8003ab4:	f00e f81c 	bl	8011af0 <HAL_GPIO_ReadPin>
		{
			return 1;
		}
	}

	return 0;
 8003ab8:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d002      	beq.n	8003ac4 <IsLowerCLIbaud+0x74>
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	b00e      	add	sp, #56	; 0x38
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003ac4:	3312      	adds	r3, #18
 8003ac6:	446b      	add	r3, sp
 8003ac8:	8819      	ldrh	r1, [r3, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	9808      	ldr	r0, [sp, #32]
 8003ace:	f00e f815 	bl	8011afc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 8003ad2:	2005      	movs	r0, #5
 8003ad4:	f00a f81a 	bl	800db0c <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 8003ad8:	ab03      	add	r3, sp, #12
 8003ada:	8819      	ldrh	r1, [r3, #0]
 8003adc:	9805      	ldr	r0, [sp, #20]
 8003ade:	f00e f807 	bl	8011af0 <HAL_GPIO_ReadPin>
 8003ae2:	3801      	subs	r0, #1
 8003ae4:	4243      	negs	r3, r0
 8003ae6:	4143      	adcs	r3, r0
			return 1;
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e7e8      	b.n	8003abe <IsLowerCLIbaud+0x6e>

08003aec <EE_FormatForFactoryReset>:
/*-----------------------------------------------------------*/	

/* --- Format emulated EEPROM for a factory reset
*/
void EE_FormatForFactoryReset(void)
{
 8003aec:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <EE_FormatForFactoryReset+0x1c>)
 8003af0:	4a06      	ldr	r2, [pc, #24]	; (8003b0c <EE_FormatForFactoryReset+0x20>)
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d006      	beq.n	8003b06 <EE_FormatForFactoryReset+0x1a>
	{
		// Do nothing
	}
	else
	{
		if (EE_Format() == HAL_OK) 
 8003af8:	f004 f830 	bl	8007b5c <EE_Format>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d102      	bne.n	8003b06 <EE_FormatForFactoryReset+0x1a>
		{
			/* Set flag for formated EEPROM */
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <EE_FormatForFactoryReset+0x20>)
 8003b02:	4a01      	ldr	r2, [pc, #4]	; (8003b08 <EE_FormatForFactoryReset+0x1c>)
 8003b04:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003b06:	bd10      	pop	{r4, pc}
 8003b08:	beefdead 	.word	0xbeefdead
 8003b0c:	20007ff0 	.word	0x20007ff0

08003b10 <SetupPortForRemoteBootloaderUpdate>:
				- Set baudrate to 57600
				- Enable even parity
				- Set datasize to 9 bits
*/
void SetupPortForRemoteBootloaderUpdate(uint8_t port)
{
 8003b10:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8003b12:	f00a f9d5 	bl	800dec0 <GetUart>
 8003b16:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 8003b18:	23e1      	movs	r3, #225	; 0xe1
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	015b      	lsls	r3, r3, #5
 8003b28:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8003b2a:	f00f ffe9 	bl	8013b00 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	6813      	ldr	r3, [r2, #0]
 8003b32:	2120      	movs	r1, #32
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6013      	str	r3, [r2, #0]
}
 8003b38:	bd10      	pop	{r4, pc}
	...

08003b3c <IsModuleParameter>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
*/
uint8_t IsModuleParameter(char* name)
{
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	0006      	movs	r6, r0
 8003b40:	4d08      	ldr	r5, [pc, #32]	; (8003b64 <IsModuleParameter+0x28>)
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 8003b42:	2400      	movs	r4, #0
  {
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 8003b44:	6829      	ldr	r1, [r5, #0]
 8003b46:	0030      	movs	r0, r6
 8003b48:	f7fc fadc 	bl	8000104 <strcmp>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d006      	beq.n	8003b5e <IsModuleParameter+0x22>
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 8003b50:	3401      	adds	r4, #1
 8003b52:	b2e4      	uxtb	r4, r4
 8003b54:	350c      	adds	r5, #12
 8003b56:	2c0d      	cmp	r4, #13
 8003b58:	d1f4      	bne.n	8003b44 <IsModuleParameter+0x8>
			return i+1;
  }
	return 0;
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	e001      	b.n	8003b62 <IsModuleParameter+0x26>
			return i+1;
 8003b5e:	3401      	adds	r4, #1
 8003b60:	b2e0      	uxtb	r0, r4
}
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	2000008c 	.word	0x2000008c

08003b68 <IsMathOperator>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
*/
uint8_t IsMathOperator(char* string)
{
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	0004      	movs	r4, r0
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
  {
		if (!strcmp(string, "="))
 8003b6c:	491b      	ldr	r1, [pc, #108]	; (8003bdc <IsMathOperator+0x74>)
 8003b6e:	f7fc fac9 	bl	8000104 <strcmp>
 8003b72:	0006      	movs	r6, r0
 8003b74:	2506      	movs	r5, #6
 8003b76:	2e00      	cmp	r6, #0
 8003b78:	d023      	beq.n	8003bc2 <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 8003b7a:	4919      	ldr	r1, [pc, #100]	; (8003be0 <IsMathOperator+0x78>)
 8003b7c:	0020      	movs	r0, r4
 8003b7e:	f7fc fac1 	bl	8000104 <strcmp>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d01f      	beq.n	8003bc6 <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 8003b86:	4917      	ldr	r1, [pc, #92]	; (8003be4 <IsMathOperator+0x7c>)
 8003b88:	0020      	movs	r0, r4
 8003b8a:	f7fc fabb 	bl	8000104 <strcmp>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d01b      	beq.n	8003bca <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 8003b92:	4915      	ldr	r1, [pc, #84]	; (8003be8 <IsMathOperator+0x80>)
 8003b94:	0020      	movs	r0, r4
 8003b96:	f7fc fab5 	bl	8000104 <strcmp>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d017      	beq.n	8003bce <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 8003b9e:	4913      	ldr	r1, [pc, #76]	; (8003bec <IsMathOperator+0x84>)
 8003ba0:	0020      	movs	r0, r4
 8003ba2:	f7fc faaf 	bl	8000104 <strcmp>
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	d013      	beq.n	8003bd2 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 8003baa:	4911      	ldr	r1, [pc, #68]	; (8003bf0 <IsMathOperator+0x88>)
 8003bac:	0020      	movs	r0, r4
 8003bae:	f7fc faa9 	bl	8000104 <strcmp>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d00f      	beq.n	8003bd6 <IsMathOperator+0x6e>
 8003bb6:	3d01      	subs	r5, #1
 8003bb8:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 8003bba:	2d00      	cmp	r5, #0
 8003bbc:	d1db      	bne.n	8003b76 <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
  }
	return 0;
 8003bbe:	2000      	movs	r0, #0
}
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	e7fc      	b.n	8003bc0 <IsMathOperator+0x58>
			return MATH_GREATER;
 8003bc6:	2002      	movs	r0, #2
 8003bc8:	e7fa      	b.n	8003bc0 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003bca:	2003      	movs	r0, #3
 8003bcc:	e7f8      	b.n	8003bc0 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003bce:	2004      	movs	r0, #4
 8003bd0:	e7f6      	b.n	8003bc0 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003bd2:	2005      	movs	r0, #5
 8003bd4:	e7f4      	b.n	8003bc0 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003bd6:	2006      	movs	r0, #6
 8003bd8:	e7f2      	b.n	8003bc0 <IsMathOperator+0x58>
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	08018f38 	.word	0x08018f38
 8003be0:	08018f3c 	.word	0x08018f3c
 8003be4:	08018f40 	.word	0x08018f40
 8003be8:	08018f44 	.word	0x08018f44
 8003bec:	08018f48 	.word	0x08018f48
 8003bf0:	08018f4c 	.word	0x08018f4c

08003bf4 <ExploreNeighbors>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
*/
BOS_Status ExploreNeighbors(uint8_t ignore)
{
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf6:	46c6      	mov	lr, r8
 8003bf8:	b500      	push	{lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	0006      	movs	r6, r0
	BOS_Status result = BOS_OK; 

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8003bfe:	2401      	movs	r4, #1
	{
		if (port != ignore) 
		{
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <ExploreNeighbors+0x4c>)
 8003c02:	4698      	mov	r8, r3
 8003c04:	4d0f      	ldr	r5, [pc, #60]	; (8003c44 <ExploreNeighbors+0x50>)
			messageParams[1] = (uint8_t) myPN;
			messageParams[2] = port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003c06:	2703      	movs	r7, #3
		if (port != ignore) 
 8003c08:	42a6      	cmp	r6, r4
 8003c0a:	d00f      	beq.n	8003c2c <ExploreNeighbors+0x38>
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003c0c:	4643      	mov	r3, r8
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	0a1a      	lsrs	r2, r3, #8
 8003c12:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 8003c14:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 8003c16:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003c18:	9700      	str	r7, [sp, #0]
 8003c1a:	230a      	movs	r3, #10
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2100      	movs	r1, #0
 8003c20:	0020      	movs	r0, r4
 8003c22:	f005 f9a1 	bl	8008f68 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003c26:	200a      	movs	r0, #10
 8003c28:	f00a fe71 	bl	800e90e <osDelay>
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8003c2c:	3401      	adds	r4, #1
 8003c2e:	b2e4      	uxtb	r4, r4
 8003c30:	2c07      	cmp	r4, #7
 8003c32:	d1e9      	bne.n	8003c08 <ExploreNeighbors+0x14>
		}
	}
	
	return result;
}
 8003c34:	2000      	movs	r0, #0
 8003c36:	b002      	add	sp, #8
 8003c38:	bc04      	pop	{r2}
 8003c3a:	4690      	mov	r8, r2
 8003c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20000050 	.word	0x20000050
 8003c44:	20000fb0 	.word	0x20000fb0

08003c48 <FindBroadcastRoutes>:

/* --- Find array broadcast routes starting from a given module 
				(Takes about 50 usec)
*/
BOS_Status FindBroadcastRoutes(uint8_t src)
{
 8003c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4a:	46de      	mov	lr, fp
 8003c4c:	4657      	mov	r7, sl
 8003c4e:	464e      	mov	r6, r9
 8003c50:	4645      	mov	r5, r8
 8003c52:	b5e0      	push	{r5, r6, r7, lr}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK; 
	uint8_t p = 0, m = 0, level = 0, untaged = 0; 
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8003c58:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <FindBroadcastRoutes+0x130>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	469c      	mov	ip, r3
 8003c5e:	3307      	adds	r3, #7
 8003c60:	08db      	lsrs	r3, r3, #3
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	466a      	mov	r2, sp
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	469d      	mov	sp, r3
 8003c6a:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */
	
	for(m=0 ; m<N ; m++)
 8003c6c:	4663      	mov	r3, ip
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <FindBroadcastRoutes+0x46>
 8003c72:	0023      	movs	r3, r4
 8003c74:	4a41      	ldr	r2, [pc, #260]	; (8003d7c <FindBroadcastRoutes+0x134>)
 8003c76:	4661      	mov	r1, ip
 8003c78:	1e4d      	subs	r5, r1, #1
 8003c7a:	b2ed      	uxtb	r5, r5
 8003c7c:	3501      	adds	r5, #1
 8003c7e:	192d      	adds	r5, r5, r4
	{	
		modules[m] = 0;
 8003c80:	2100      	movs	r1, #0
 8003c82:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] = 0;
 8003c84:	8011      	strh	r1, [r2, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	3202      	adds	r2, #2
	for(m=0 ; m<N ; m++)
 8003c8a:	42ab      	cmp	r3, r5
 8003c8c:	d1f9      	bne.n	8003c82 <FindBroadcastRoutes+0x3a>
	}
	modules[src-1] = ++level;					// Tag the source
 8003c8e:	3801      	subs	r0, #1
 8003c90:	2301      	movs	r3, #1
 8003c92:	5423      	strb	r3, [r4, r0]
 8003c94:	2216      	movs	r2, #22
 8003c96:	4342      	muls	r2, r0
 8003c98:	3202      	adds	r2, #2
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <FindBroadcastRoutes+0x138>)
 8003c9c:	18d2      	adds	r2, r2, r3
 8003c9e:	2100      	movs	r1, #0
	
	for(p=1 ; p<=NumOfPorts ; p++)
	{
		if (array[src-1][p]) 
		{
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003ca0:	4d36      	ldr	r5, [pc, #216]	; (8003d7c <FindBroadcastRoutes+0x134>)
 8003ca2:	0040      	lsls	r0, r0, #1
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	4698      	mov	r8, r3
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003ca8:	46a3      	mov	fp, r4
 8003caa:	e003      	b.n	8003cb4 <FindBroadcastRoutes+0x6c>
 8003cac:	3101      	adds	r1, #1
 8003cae:	3202      	adds	r2, #2
	for(p=1 ; p<=NumOfPorts ; p++)
 8003cb0:	2906      	cmp	r1, #6
 8003cb2:	d011      	beq.n	8003cd8 <FindBroadcastRoutes+0x90>
		if (array[src-1][p]) 
 8003cb4:	8813      	ldrh	r3, [r2, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f8      	beq.n	8003cac <FindBroadcastRoutes+0x64>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003cba:	5b46      	ldrh	r6, [r0, r5]
 8003cbc:	46b1      	mov	r9, r6
 8003cbe:	4646      	mov	r6, r8
 8003cc0:	408e      	lsls	r6, r1
 8003cc2:	46b2      	mov	sl, r6
 8003cc4:	464e      	mov	r6, r9
 8003cc6:	4654      	mov	r4, sl
 8003cc8:	4326      	orrs	r6, r4
 8003cca:	5346      	strh	r6, [r0, r5]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	445b      	add	r3, fp
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	2402      	movs	r4, #2
 8003cd4:	701c      	strb	r4, [r3, #0]
 8003cd6:	e7e9      	b.n	8003cac <FindBroadcastRoutes+0x64>
 8003cd8:	465c      	mov	r4, fp
	++level;													// Move one level
 8003cda:	2602      	movs	r6, #2
 8003cdc:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <FindBroadcastRoutes+0x138>)
 8003cde:	3302      	adds	r3, #2
 8003ce0:	607b      	str	r3, [r7, #4]
			{			
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
				{
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
					{
						bcastRoutes[m] |= (0x01 << (p-1));
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	469b      	mov	fp, r3
 8003ce6:	46b0      	mov	r8, r6
 8003ce8:	0026      	movs	r6, r4
		++level;																					// Move one level
 8003cea:	4643      	mov	r3, r8
 8003cec:	3301      	adds	r3, #1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4698      	mov	r8, r3
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003cf2:	4663      	mov	r3, ip
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d035      	beq.n	8003d64 <FindBroadcastRoutes+0x11c>
 8003cf8:	2200      	movs	r2, #0
		untaged = 0;																			// Reset the untaged counter
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	4443      	add	r3, r8
 8003d02:	4699      	mov	r9, r3
 8003d04:	e01e      	b.n	8003d44 <FindBroadcastRoutes+0xfc>
 8003d06:	3001      	adds	r0, #1
 8003d08:	3102      	adds	r1, #2
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 8003d0a:	2806      	cmp	r0, #6
 8003d0c:	d015      	beq.n	8003d3a <FindBroadcastRoutes+0xf2>
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 8003d0e:	880b      	ldrh	r3, [r1, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f8      	beq.n	8003d06 <FindBroadcastRoutes+0xbe>
 8003d14:	08db      	lsrs	r3, r3, #3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	5cf5      	ldrb	r5, [r6, r3]
 8003d1a:	2d00      	cmp	r5, #0
 8003d1c:	d1f3      	bne.n	8003d06 <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |= (0x01 << (p-1));
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <FindBroadcastRoutes+0x134>)
 8003d20:	5aa5      	ldrh	r5, [r4, r2]
 8003d22:	465a      	mov	r2, fp
 8003d24:	4082      	lsls	r2, r0
 8003d26:	4315      	orrs	r5, r2
 8003d28:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <FindBroadcastRoutes+0x134>)
 8003d2a:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3301      	adds	r3, #1
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e7e5      	b.n	8003d06 <FindBroadcastRoutes+0xbe>
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	3201      	adds	r2, #1
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003d3e:	b2d3      	uxtb	r3, r2
 8003d40:	4563      	cmp	r3, ip
 8003d42:	d20c      	bcs.n	8003d5e <FindBroadcastRoutes+0x116>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003d44:	5cb3      	ldrb	r3, [r6, r2]
 8003d46:	454b      	cmp	r3, r9
 8003d48:	d1f8      	bne.n	8003d3c <FindBroadcastRoutes+0xf4>
 8003d4a:	2116      	movs	r1, #22
 8003d4c:	4351      	muls	r1, r2
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	469a      	mov	sl, r3
 8003d52:	4451      	add	r1, sl
 8003d54:	0053      	lsls	r3, r2, #1
 8003d56:	2000      	movs	r0, #0
 8003d58:	60ba      	str	r2, [r7, #8]
 8003d5a:	001c      	movs	r4, r3
 8003d5c:	e7d7      	b.n	8003d0e <FindBroadcastRoutes+0xc6>
					}
				}			
			}
		}
	} 
	while (untaged);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1c2      	bne.n	8003cea <FindBroadcastRoutes+0xa2>

	
	return result;
}
 8003d64:	2000      	movs	r0, #0
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b005      	add	sp, #20
 8003d6a:	bc3c      	pop	{r2, r3, r4, r5}
 8003d6c:	4690      	mov	r8, r2
 8003d6e:	4699      	mov	r9, r3
 8003d70:	46a2      	mov	sl, r4
 8003d72:	46ab      	mov	fp, r5
 8003d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	2000001c 	.word	0x2000001c
 8003d7c:	20000d30 	.word	0x20000d30
 8003d80:	20000b08 	.word	0x20000b08

08003d84 <FindRoute>:
6- Otherwise, select the unvisited node that is marked with the smallest tentative distance, 
set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID)
{
 8003d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d86:	46de      	mov	lr, fp
 8003d88:	4657      	mov	r7, sl
 8003d8a:	464e      	mov	r6, r9
 8003d8c:	4645      	mov	r5, r8
 8003d8e:	b5e0      	push	{r5, r6, r7, lr}
 8003d90:	b08f      	sub	sp, #60	; 0x3c
 8003d92:	0005      	movs	r5, r0
 8003d94:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 8003d96:	2232      	movs	r2, #50	; 0x32
 8003d98:	2100      	movs	r1, #0
 8003d9a:	a801      	add	r0, sp, #4
 8003d9c:	f010 fab0 	bl	8014300 <memset>
#endif
	
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
	
	memset(route,0,sizeof(route));
 8003da0:	2219      	movs	r2, #25
 8003da2:	2100      	movs	r1, #0
 8003da4:	485a      	ldr	r0, [pc, #360]	; (8003f10 <FindRoute+0x18c>)
 8003da6:	f010 faab 	bl	8014300 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 8003daa:	0029      	movs	r1, r5
 8003dac:	1e68      	subs	r0, r5, #1
 8003dae:	2300      	movs	r3, #0
 8003db0:	4a58      	ldr	r2, [pc, #352]	; (8003f14 <FindRoute+0x190>)
 8003db2:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8003db4:	4a58      	ldr	r2, [pc, #352]	; (8003f18 <FindRoute+0x194>)
 8003db6:	5413      	strb	r3, [r2, r0]
 8003db8:	2516      	movs	r5, #22
 8003dba:	4345      	muls	r5, r0
 8003dbc:	3502      	adds	r5, #2
 8003dbe:	4b57      	ldr	r3, [pc, #348]	; (8003f1c <FindRoute+0x198>)
 8003dc0:	18ed      	adds	r5, r5, r3
 8003dc2:	002a      	movs	r2, r5
		
	/* Check adjacent neighbors first! */
	for(int col=1 ; col<=6 ; col++)
 8003dc4:	2001      	movs	r0, #1
	{
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003dc6:	4653      	mov	r3, sl
 8003dc8:	b29c      	uxth	r4, r3
 8003dca:	e003      	b.n	8003dd4 <FindRoute+0x50>
	for(int col=1 ; col<=6 ; col++)
 8003dcc:	3001      	adds	r0, #1
 8003dce:	3202      	adds	r2, #2
 8003dd0:	2807      	cmp	r0, #7
 8003dd2:	d00f      	beq.n	8003df4 <FindRoute+0x70>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003dd4:	8813      	ldrh	r3, [r2, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f8      	beq.n	8003dcc <FindRoute+0x48>
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	d1f5      	bne.n	8003dcc <FindRoute+0x48>
			routeDist[desID-1] = 1;
 8003de0:	4b4c      	ldr	r3, [pc, #304]	; (8003f14 <FindRoute+0x190>)
 8003de2:	4453      	add	r3, sl
 8003de4:	3b01      	subs	r3, #1
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 8003dea:	4b49      	ldr	r3, [pc, #292]	; (8003f10 <FindRoute+0x18c>)
 8003dec:	4652      	mov	r2, sl
 8003dee:	701a      	strb	r2, [r3, #0]
			return col;	
 8003df0:	b2c0      	uxtb	r0, r0
 8003df2:	e085      	b.n	8003f00 <FindRoute+0x17c>
		}
	}						
	
	/* Initialization */
	for (int i=1 ; i<=N ; i++)   					
 8003df4:	4b4a      	ldr	r3, [pc, #296]	; (8003f20 <FindRoute+0x19c>)
 8003df6:	781e      	ldrb	r6, [r3, #0]
 8003df8:	2e00      	cmp	r6, #0
 8003dfa:	dd11      	ble.n	8003e20 <FindRoute+0x9c>
 8003dfc:	2301      	movs	r3, #1
	{
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8003dfe:	24ff      	movs	r4, #255	; 0xff
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003e00:	4f45      	ldr	r7, [pc, #276]	; (8003f18 <FindRoute+0x194>)
 8003e02:	2000      	movs	r0, #0
 8003e04:	46ac      	mov	ip, r5
 8003e06:	e002      	b.n	8003e0e <FindRoute+0x8a>
	for (int i=1 ; i<=N ; i++)   					
 8003e08:	3301      	adds	r3, #1
 8003e0a:	42b3      	cmp	r3, r6
 8003e0c:	dc07      	bgt.n	8003e1e <FindRoute+0x9a>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 8003e0e:	4299      	cmp	r1, r3
 8003e10:	d0fa      	beq.n	8003e08 <FindRoute+0x84>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8003e12:	1e5a      	subs	r2, r3, #1
 8003e14:	4d3f      	ldr	r5, [pc, #252]	; (8003f14 <FindRoute+0x190>)
 8003e16:	54ac      	strb	r4, [r5, r2]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003e18:	18ba      	adds	r2, r7, r2
 8003e1a:	7010      	strb	r0, [r2, #0]
 8003e1c:	e7f4      	b.n	8003e08 <FindRoute+0x84>
 8003e1e:	4665      	mov	r5, ip
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8003e20:	2400      	movs	r4, #0
 8003e22:	4b3e      	ldr	r3, [pc, #248]	; (8003f1c <FindRoute+0x198>)
 8003e24:	4698      	mov	r8, r3
 8003e26:	230e      	movs	r3, #14
 8003e28:	4443      	add	r3, r8
 8003e2a:	4656      	mov	r6, sl
 8003e2c:	469b      	mov	fp, r3
 8003e2e:	46a9      	mov	r9, r5
 8003e30:	e01d      	b.n	8003e6e <FindRoute+0xea>
 8003e32:	464d      	mov	r5, r9
 8003e34:	46b2      	mov	sl, r6
	}
	
	/* Algorithm */
	while (!QnotEmpty(Q))
	{				
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8003e36:	0034      	movs	r4, r6
 8003e38:	e034      	b.n	8003ea4 <FindRoute+0x120>
 8003e3a:	3102      	adds	r1, #2
		}
		else
			Q[u-1] = 1;													// Remove u from Q 
																								
		/* For each neighbor v where v is still in Q. */
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8003e3c:	4281      	cmp	r1, r0
 8003e3e:	d015      	beq.n	8003e6c <FindRoute+0xe8>
		{
			if (array[u-1][n])										// There's a neighbor v at this port n
 8003e40:	880b      	ldrh	r3, [r1, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f9      	beq.n	8003e3a <FindRoute+0xb6>
			{	
				v = (array[u-1][n]>>3);
 8003e46:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	5cd7      	ldrb	r7, [r2, r3]
 8003e4e:	2f00      	cmp	r7, #0
 8003e50:	d1f3      	bne.n	8003e3a <FindRoute+0xb6>
				{
					alt = routeDist[u-1] + 1;					// Add one hop
 8003e52:	4f30      	ldr	r7, [pc, #192]	; (8003f14 <FindRoute+0x190>)
 8003e54:	5d7f      	ldrb	r7, [r7, r5]
 8003e56:	3701      	adds	r7, #1
 8003e58:	b2ff      	uxtb	r7, r7
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 8003e5a:	4e2e      	ldr	r6, [pc, #184]	; (8003f14 <FindRoute+0x190>)
 8003e5c:	5cf6      	ldrb	r6, [r6, r3]
 8003e5e:	42be      	cmp	r6, r7
 8003e60:	d9eb      	bls.n	8003e3a <FindRoute+0xb6>
					{
						routeDist[v-1] = alt; 
 8003e62:	4e2c      	ldr	r6, [pc, #176]	; (8003f14 <FindRoute+0x190>)
 8003e64:	54f7      	strb	r7, [r6, r3]
						routePrev[v-1] = u; 
 8003e66:	4e2c      	ldr	r6, [pc, #176]	; (8003f18 <FindRoute+0x194>)
 8003e68:	54f4      	strb	r4, [r6, r3]
 8003e6a:	e7e6      	b.n	8003e3a <FindRoute+0xb6>
 8003e6c:	4656      	mov	r6, sl
	while (!QnotEmpty(Q))
 8003e6e:	a801      	add	r0, sp, #4
 8003e70:	f7ff f968 	bl	8003144 <QnotEmpty>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d113      	bne.n	8003ea0 <FindRoute+0x11c>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8003e78:	a901      	add	r1, sp, #4
 8003e7a:	4826      	ldr	r0, [pc, #152]	; (8003f14 <FindRoute+0x190>)
 8003e7c:	f7ff f944 	bl	8003108 <minArr>
 8003e80:	3001      	adds	r0, #1
 8003e82:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 8003e84:	42b4      	cmp	r4, r6
 8003e86:	d0d4      	beq.n	8003e32 <FindRoute+0xae>
			Q[u-1] = 1;													// Remove u from Q 
 8003e88:	1e65      	subs	r5, r4, #1
 8003e8a:	ab01      	add	r3, sp, #4
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	555a      	strb	r2, [r3, r5]
 8003e90:	2016      	movs	r0, #22
 8003e92:	4368      	muls	r0, r5
 8003e94:	1c81      	adds	r1, r0, #2
 8003e96:	4441      	add	r1, r8
 8003e98:	4458      	add	r0, fp
				if (!Q[v-1])												// v is still in Q
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	46b2      	mov	sl, r6
 8003e9e:	e7cf      	b.n	8003e40 <FindRoute+0xbc>
 8003ea0:	464d      	mov	r5, r9
 8003ea2:	46b2      	mov	sl, r6
	}	
		
finishedRoute:
		
	/* Build the virtual route */	
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <FindRoute+0x194>)
 8003ea6:	191b      	adds	r3, r3, r4
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	2300      	movs	r3, #0
 8003eae:	2a00      	cmp	r2, #0
 8003eb0:	d00e      	beq.n	8003ed0 <FindRoute+0x14c>
	{
		route[j++] = u;          				// Push the vertex onto the stack
 8003eb2:	4917      	ldr	r1, [pc, #92]	; (8003f10 <FindRoute+0x18c>)
 8003eb4:	468c      	mov	ip, r1
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003eb6:	4e18      	ldr	r6, [pc, #96]	; (8003f18 <FindRoute+0x194>)
 8003eb8:	e000      	b.n	8003ebc <FindRoute+0x138>
 8003eba:	000a      	movs	r2, r1
		route[j++] = u;          				// Push the vertex onto the stack
 8003ebc:	1c58      	adds	r0, r3, #1
 8003ebe:	4661      	mov	r1, ip
 8003ec0:	54cc      	strb	r4, [r1, r3]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003ec2:	18b3      	adds	r3, r6, r2
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	7819      	ldrb	r1, [r3, #0]
 8003ec8:	0014      	movs	r4, r2
		route[j++] = u;          				// Push the vertex onto the stack
 8003eca:	b2c3      	uxtb	r3, r0
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	d1f4      	bne.n	8003eba <FindRoute+0x136>
		u = routePrev[u-1];           	// Traverse from target to source
	}
	
	/* Check which port leads to the correct module */
	for(int col=1 ; col<=6 ; col++)	
 8003ed0:	2001      	movs	r0, #1
	{					
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8003ed2:	490f      	ldr	r1, [pc, #60]	; (8003f10 <FindRoute+0x18c>)
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <FindRoute+0x190>)
 8003ed6:	4453      	add	r3, sl
 8003ed8:	001f      	movs	r7, r3
 8003eda:	3f01      	subs	r7, #1
 8003edc:	e003      	b.n	8003ee6 <FindRoute+0x162>
	for(int col=1 ; col<=6 ; col++)	
 8003ede:	3001      	adds	r0, #1
 8003ee0:	3502      	adds	r5, #2
 8003ee2:	2807      	cmp	r0, #7
 8003ee4:	d00b      	beq.n	8003efe <FindRoute+0x17a>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8003ee6:	882b      	ldrh	r3, [r5, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f8      	beq.n	8003ede <FindRoute+0x15a>
 8003eec:	783a      	ldrb	r2, [r7, #0]
 8003eee:	188a      	adds	r2, r1, r2
 8003ef0:	3a01      	subs	r2, #1
 8003ef2:	7812      	ldrb	r2, [r2, #0]
 8003ef4:	08db      	lsrs	r3, r3, #3
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d1f1      	bne.n	8003ede <FindRoute+0x15a>
			return col;	
 8003efa:	b2c0      	uxtb	r0, r0
 8003efc:	e000      	b.n	8003f00 <FindRoute+0x17c>
		}
	}	

	return 0;			
 8003efe:	2000      	movs	r0, #0
}
 8003f00:	b00f      	add	sp, #60	; 0x3c
 8003f02:	bc3c      	pop	{r2, r3, r4, r5}
 8003f04:	4690      	mov	r8, r2
 8003f06:	4699      	mov	r9, r3
 8003f08:	46a2      	mov	sl, r4
 8003f0a:	46ab      	mov	fp, r5
 8003f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	20006ad0 	.word	0x20006ad0
 8003f14:	20001184 	.word	0x20001184
 8003f18:	200011a0 	.word	0x200011a0
 8003f1c:	20000b08 	.word	0x20000b08
 8003f20:	2000001c 	.word	0x2000001c

08003f24 <remoteBootloaderUpdate>:
{
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	b087      	sub	sp, #28
 8003f28:	0007      	movs	r7, r0
 8003f2a:	000e      	movs	r6, r1
 8003f2c:	9205      	str	r2, [sp, #20]
 8003f2e:	001d      	movs	r5, r3
	myOutport = FindRoute(myID, dst);
 8003f30:	4b37      	ldr	r3, [pc, #220]	; (8004010 <remoteBootloaderUpdate+0xec>)
 8003f32:	7818      	ldrb	r0, [r3, #0]
 8003f34:	f7ff ff26 	bl	8003d84 <FindRoute>
 8003f38:	9004      	str	r0, [sp, #16]
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	d020      	beq.n	8003f80 <remoteBootloaderUpdate+0x5c>
 8003f3e:	4b34      	ldr	r3, [pc, #208]	; (8004010 <remoteBootloaderUpdate+0xec>)
 8003f40:	781c      	ldrb	r4, [r3, #0]
 8003f42:	42b4      	cmp	r4, r6
 8003f44:	d05f      	beq.n	8004006 <remoteBootloaderUpdate+0xe2>
	if (src == myID)
 8003f46:	42bc      	cmp	r4, r7
 8003f48:	d034      	beq.n	8003fb4 <remoteBootloaderUpdate+0x90>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8003f4a:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003f4c:	9805      	ldr	r0, [sp, #20]
 8003f4e:	f7ff fddf 	bl	8003b10 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003f52:	9804      	ldr	r0, [sp, #16]
 8003f54:	f7ff fddc 	bl	8003b10 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 8003f58:	4b2d      	ldr	r3, [pc, #180]	; (8004010 <remoteBootloaderUpdate+0xec>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	42a3      	cmp	r3, r4
 8003f5e:	d046      	beq.n	8003fee <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 8003f60:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <remoteBootloaderUpdate+0xec>)
 8003f62:	7819      	ldrb	r1, [r3, #0]
 8003f64:	2300      	movs	r3, #0
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	9302      	str	r3, [sp, #8]
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	3303      	adds	r3, #3
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	000b      	movs	r3, r1
 8003f74:	9a04      	ldr	r2, [sp, #16]
 8003f76:	9805      	ldr	r0, [sp, #20]
 8003f78:	f005 fa44 	bl	8009404 <StartScastDMAStream>
}
 8003f7c:	b007      	add	sp, #28
 8003f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 8003f80:	4b24      	ldr	r3, [pc, #144]	; (8004014 <remoteBootloaderUpdate+0xf0>)
 8003f82:	199b      	adds	r3, r3, r6
 8003f84:	3b01      	subs	r3, #1
 8003f86:	781a      	ldrb	r2, [r3, #0]
 8003f88:	2a01      	cmp	r2, #1
 8003f8a:	d010      	beq.n	8003fae <remoteBootloaderUpdate+0x8a>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <remoteBootloaderUpdate+0xf4>)
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	3b01      	subs	r3, #1
 8003f92:	781c      	ldrb	r4, [r3, #0]
	if (src == myID)
 8003f94:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <remoteBootloaderUpdate+0xec>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	42bb      	cmp	r3, r7
 8003f9a:	d1d7      	bne.n	8003f4c <remoteBootloaderUpdate+0x28>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003f9c:	f00a fdcc 	bl	800eb38 <FreeRTOS_CLIGetOutputBuffer>
 8003fa0:	0007      	movs	r7, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	; (800401c <remoteBootloaderUpdate+0xf8>)
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	0032      	movs	r2, r6
 8003fa8:	f010 fbd6 	bl	8014758 <sprintf>
 8003fac:	e00d      	b.n	8003fca <remoteBootloaderUpdate+0xa6>
			lastModule = myID;
 8003fae:	4b18      	ldr	r3, [pc, #96]	; (8004010 <remoteBootloaderUpdate+0xec>)
 8003fb0:	781c      	ldrb	r4, [r3, #0]
 8003fb2:	e7ef      	b.n	8003f94 <remoteBootloaderUpdate+0x70>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003fb4:	f00a fdc0 	bl	800eb38 <FreeRTOS_CLIGetOutputBuffer>
 8003fb8:	0007      	movs	r7, r0
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8003fba:	2400      	movs	r4, #0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <remoteBootloaderUpdate+0xfc>)
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	002b      	movs	r3, r5
 8003fc2:	0032      	movs	r2, r6
 8003fc4:	0038      	movs	r0, r7
 8003fc6:	f010 fbc7 	bl	8014758 <sprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 8003fca:	4b16      	ldr	r3, [pc, #88]	; (8004024 <remoteBootloaderUpdate+0x100>)
 8003fcc:	6819      	ldr	r1, [r3, #0]
 8003fce:	0038      	movs	r0, r7
 8003fd0:	f010 fbe2 	bl	8014798 <strcat>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 8003fd4:	0038      	movs	r0, r7
 8003fd6:	f7fc f89f 	bl	8000118 <strlen>
 8003fda:	b282      	uxth	r2, r0
 8003fdc:	2332      	movs	r3, #50	; 0x32
 8003fde:	0039      	movs	r1, r7
 8003fe0:	9805      	ldr	r0, [sp, #20]
 8003fe2:	f009 ffb7 	bl	800df54 <writePxITMutex>
		Delay_ms(100);
 8003fe6:	2064      	movs	r0, #100	; 0x64
 8003fe8:	f00c fcbc 	bl	8010964 <HAL_Delay>
 8003fec:	e7ae      	b.n	8003f4c <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport), REVERSED);
 8003fee:	9804      	ldr	r0, [sp, #16]
 8003ff0:	f009 ff66 	bl	800dec0 <GetUart>
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	f009 fffd 	bl	800dff4 <SwapUartPins>
 8003ffa:	e7b1      	b.n	8003f60 <remoteBootloaderUpdate+0x3c>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003ffc:	f00a fd9c 	bl	800eb38 <FreeRTOS_CLIGetOutputBuffer>
 8004000:	0007      	movs	r7, r0
		myOutport = outport;
 8004002:	9504      	str	r5, [sp, #16]
 8004004:	e7da      	b.n	8003fbc <remoteBootloaderUpdate+0x98>
	if (src == myID)
 8004006:	42bc      	cmp	r4, r7
 8004008:	d0f8      	beq.n	8003ffc <remoteBootloaderUpdate+0xd8>
		myOutport = outport;
 800400a:	9504      	str	r5, [sp, #16]
 800400c:	e79e      	b.n	8003f4c <remoteBootloaderUpdate+0x28>
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	200010e4 	.word	0x200010e4
 8004014:	20001184 	.word	0x20001184
 8004018:	20006ad0 	.word	0x20006ad0
 800401c:	20000078 	.word	0x20000078
 8004020:	2000007c 	.word	0x2000007c
 8004024:	20000080 	.word	0x20000080

08004028 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
*/
void DisplayTopology(uint8_t port)
{
 8004028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402a:	46d6      	mov	lr, sl
 800402c:	464f      	mov	r7, r9
 800402e:	4646      	mov	r6, r8
 8004030:	b5c0      	push	{r6, r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	0005      	movs	r5, r0
 8004036:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8004038:	4c56      	ldr	r4, [pc, #344]	; (8004194 <DisplayTopology+0x16c>)
 800403a:	4b57      	ldr	r3, [pc, #348]	; (8004198 <DisplayTopology+0x170>)
 800403c:	0022      	movs	r2, r4
 800403e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004040:	c243      	stmia	r2!, {r0, r1, r6}
 8004042:	6819      	ldr	r1, [r3, #0]
 8004044:	6011      	str	r1, [r2, #0]
 8004046:	889b      	ldrh	r3, [r3, #4]
 8004048:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800404a:	0020      	movs	r0, r4
 800404c:	f7fc f864 	bl	8000118 <strlen>
 8004050:	b282      	uxth	r2, r0
 8004052:	2301      	movs	r3, #1
 8004054:	425b      	negs	r3, r3
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	3333      	adds	r3, #51	; 0x33
 800405a:	0021      	movs	r1, r4
 800405c:	0028      	movs	r0, r5
 800405e:	f009 ff51 	bl	800df04 <writePxMutex>
 8004062:	2401      	movs	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
	{
		sprintf(pcUserMessage, "P%d\t", i);
 8004064:	4f4d      	ldr	r7, [pc, #308]	; (800419c <DisplayTopology+0x174>)
 8004066:	4d4b      	ldr	r5, [pc, #300]	; (8004194 <DisplayTopology+0x16c>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004068:	2601      	movs	r6, #1
 800406a:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 800406c:	0022      	movs	r2, r4
 800406e:	0039      	movs	r1, r7
 8004070:	0028      	movs	r0, r5
 8004072:	f010 fb71 	bl	8014758 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004076:	0028      	movs	r0, r5
 8004078:	f7fc f84e 	bl	8000118 <strlen>
 800407c:	b282      	uxth	r2, r0
 800407e:	9600      	str	r6, [sp, #0]
 8004080:	2332      	movs	r3, #50	; 0x32
 8004082:	0029      	movs	r1, r5
 8004084:	9803      	ldr	r0, [sp, #12]
 8004086:	f009 ff3d 	bl	800df04 <writePxMutex>
 800408a:	3401      	adds	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 800408c:	2c07      	cmp	r4, #7
 800408e:	d1ed      	bne.n	800406c <DisplayTopology+0x44>
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 8004090:	2301      	movs	r3, #1
 8004092:	425b      	negs	r3, r3
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	3333      	adds	r3, #51	; 0x33
 8004098:	2203      	movs	r2, #3
 800409a:	4941      	ldr	r1, [pc, #260]	; (80041a0 <DisplayTopology+0x178>)
 800409c:	9803      	ldr	r0, [sp, #12]
 800409e:	f009 ff31 	bl	800df04 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row=0 ; row<N ; row++)
 80040a2:	4b40      	ldr	r3, [pc, #256]	; (80041a4 <DisplayTopology+0x17c>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d065      	beq.n	8004176 <DisplayTopology+0x14e>
 80040aa:	2600      	movs	r6, #0
	{
		sprintf(pcUserMessage, "Module %d:\t",row+1);
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80040ac:	2701      	movs	r7, #1
 80040ae:	427f      	negs	r7, r7
		/* Module PN */
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 80040b0:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <DisplayTopology+0x180>)
 80040b2:	4699      	mov	r9, r3
 80040b4:	230e      	movs	r3, #14
 80040b6:	444b      	add	r3, r9
 80040b8:	469a      	mov	sl, r3
 80040ba:	e02a      	b.n	8004112 <DisplayTopology+0xea>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
		{
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t",0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 80040bc:	2307      	movs	r3, #7
 80040be:	4013      	ands	r3, r2
 80040c0:	08d2      	lsrs	r2, r2, #3
 80040c2:	493a      	ldr	r1, [pc, #232]	; (80041ac <DisplayTopology+0x184>)
 80040c4:	4833      	ldr	r0, [pc, #204]	; (8004194 <DisplayTopology+0x16c>)
 80040c6:	f010 fb47 	bl	8014758 <sprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 80040ca:	4d32      	ldr	r5, [pc, #200]	; (8004194 <DisplayTopology+0x16c>)
 80040cc:	0028      	movs	r0, r5
 80040ce:	f7fc f823 	bl	8000118 <strlen>
 80040d2:	b282      	uxth	r2, r0
 80040d4:	9700      	str	r7, [sp, #0]
 80040d6:	2332      	movs	r3, #50	; 0x32
 80040d8:	0029      	movs	r1, r5
 80040da:	9803      	ldr	r0, [sp, #12]
 80040dc:	f009 ff12 	bl	800df04 <writePxMutex>
 80040e0:	3402      	adds	r4, #2
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 80040e2:	42b4      	cmp	r4, r6
 80040e4:	d007      	beq.n	80040f6 <DisplayTopology+0xce>
			if (!array[row][col])
 80040e6:	8822      	ldrh	r2, [r4, #0]
 80040e8:	2a00      	cmp	r2, #0
 80040ea:	d1e7      	bne.n	80040bc <DisplayTopology+0x94>
				sprintf(pcUserMessage, "%d\t",0);
 80040ec:	4930      	ldr	r1, [pc, #192]	; (80041b0 <DisplayTopology+0x188>)
 80040ee:	4829      	ldr	r0, [pc, #164]	; (8004194 <DisplayTopology+0x16c>)
 80040f0:	f010 fb32 	bl	8014758 <sprintf>
 80040f4:	e7e9      	b.n	80040ca <DisplayTopology+0xa2>
 80040f6:	4646      	mov	r6, r8
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 80040f8:	9700      	str	r7, [sp, #0]
 80040fa:	2332      	movs	r3, #50	; 0x32
 80040fc:	2202      	movs	r2, #2
 80040fe:	492d      	ldr	r1, [pc, #180]	; (80041b4 <DisplayTopology+0x18c>)
 8004100:	9803      	ldr	r0, [sp, #12]
 8004102:	f009 feff 	bl	800df04 <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8004106:	3601      	adds	r6, #1
 8004108:	b2f6      	uxtb	r6, r6
 800410a:	4b26      	ldr	r3, [pc, #152]	; (80041a4 <DisplayTopology+0x17c>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	42b3      	cmp	r3, r6
 8004110:	d931      	bls.n	8004176 <DisplayTopology+0x14e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8004112:	1c72      	adds	r2, r6, #1
 8004114:	4c1f      	ldr	r4, [pc, #124]	; (8004194 <DisplayTopology+0x16c>)
 8004116:	4928      	ldr	r1, [pc, #160]	; (80041b8 <DisplayTopology+0x190>)
 8004118:	0020      	movs	r0, r4
 800411a:	f010 fb1d 	bl	8014758 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800411e:	0020      	movs	r0, r4
 8004120:	f7fb fffa 	bl	8000118 <strlen>
 8004124:	b282      	uxth	r2, r0
 8004126:	9700      	str	r7, [sp, #0]
 8004128:	2332      	movs	r3, #50	; 0x32
 800412a:	0021      	movs	r1, r4
 800412c:	9803      	ldr	r0, [sp, #12]
 800412e:	f009 fee9 	bl	800df04 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8004132:	2516      	movs	r5, #22
 8004134:	4375      	muls	r5, r6
 8004136:	464b      	mov	r3, r9
 8004138:	5aeb      	ldrh	r3, [r5, r3]
 800413a:	0059      	lsls	r1, r3, #1
 800413c:	18c9      	adds	r1, r1, r3
 800413e:	0049      	lsls	r1, r1, #1
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <DisplayTopology+0x194>)
 8004142:	1859      	adds	r1, r3, r1
 8004144:	2205      	movs	r2, #5
 8004146:	0020      	movs	r0, r4
 8004148:	f010 fb5b 	bl	8014802 <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 800414c:	9700      	str	r7, [sp, #0]
 800414e:	2332      	movs	r3, #50	; 0x32
 8004150:	2205      	movs	r2, #5
 8004152:	0021      	movs	r1, r4
 8004154:	9c03      	ldr	r4, [sp, #12]
 8004156:	0020      	movs	r0, r4
 8004158:	f009 fed4 	bl	800df04 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 800415c:	9700      	str	r7, [sp, #0]
 800415e:	2332      	movs	r3, #50	; 0x32
 8004160:	2201      	movs	r2, #1
 8004162:	4917      	ldr	r1, [pc, #92]	; (80041c0 <DisplayTopology+0x198>)
 8004164:	0020      	movs	r0, r4
 8004166:	f009 fecd 	bl	800df04 <writePxMutex>
 800416a:	1cac      	adds	r4, r5, #2
 800416c:	444c      	add	r4, r9
 800416e:	4455      	add	r5, sl
				sprintf(pcUserMessage, "%d\t",0);
 8004170:	46b0      	mov	r8, r6
 8004172:	002e      	movs	r6, r5
 8004174:	e7b7      	b.n	80040e6 <DisplayTopology+0xbe>
	}
	
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8004176:	2301      	movs	r3, #1
 8004178:	425b      	negs	r3, r3
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	3333      	adds	r3, #51	; 0x33
 800417e:	2201      	movs	r2, #1
 8004180:	4910      	ldr	r1, [pc, #64]	; (80041c4 <DisplayTopology+0x19c>)
 8004182:	9803      	ldr	r0, [sp, #12]
 8004184:	f009 febe 	bl	800df04 <writePxMutex>
}
 8004188:	b004      	add	sp, #16
 800418a:	bc1c      	pop	{r2, r3, r4}
 800418c:	4690      	mov	r8, r2
 800418e:	4699      	mov	r9, r3
 8004190:	46a2      	mov	sl, r4
 8004192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004194:	20001118 	.word	0x20001118
 8004198:	08018efc 	.word	0x08018efc
 800419c:	08018f10 	.word	0x08018f10
 80041a0:	08019704 	.word	0x08019704
 80041a4:	2000001c 	.word	0x2000001c
 80041a8:	20000b08 	.word	0x20000b08
 80041ac:	08018f28 	.word	0x08018f28
 80041b0:	08018f24 	.word	0x08018f24
 80041b4:	08018da4 	.word	0x08018da4
 80041b8:	08018f18 	.word	0x08018f18
 80041bc:	08018f64 	.word	0x08018f64
 80041c0:	08018f0c 	.word	0x08018f0c
 80041c4:	0801aae0 	.word	0x0801aae0

080041c8 <DisplayPortsDir>:
/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
*/
void DisplayPortsDir(uint8_t port)
{
 80041c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ca:	46c6      	mov	lr, r8
 80041cc:	b500      	push	{lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	0005      	movs	r5, r0
 80041d2:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 80041d4:	4c30      	ldr	r4, [pc, #192]	; (8004298 <DisplayPortsDir+0xd0>)
 80041d6:	4b31      	ldr	r3, [pc, #196]	; (800429c <DisplayPortsDir+0xd4>)
 80041d8:	0022      	movs	r2, r4
 80041da:	cb43      	ldmia	r3!, {r0, r1, r6}
 80041dc:	c243      	stmia	r2!, {r0, r1, r6}
 80041de:	cb43      	ldmia	r3!, {r0, r1, r6}
 80041e0:	c243      	stmia	r2!, {r0, r1, r6}
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80041e6:	0020      	movs	r0, r4
 80041e8:	f7fb ff96 	bl	8000118 <strlen>
 80041ec:	b282      	uxth	r2, r0
 80041ee:	2301      	movs	r3, #1
 80041f0:	425b      	negs	r3, r3
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	3333      	adds	r3, #51	; 0x33
 80041f6:	0021      	movs	r1, r4
 80041f8:	0028      	movs	r0, r5
 80041fa:	f009 fe83 	bl	800df04 <writePxMutex>
	
	for (uint8_t i=1 ; i<=N ; i++) 
 80041fe:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <DisplayPortsDir+0xd8>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2201      	movs	r2, #1
 8004204:	4690      	mov	r8, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d02c      	beq.n	8004264 <DisplayPortsDir+0x9c>
	{
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
		{		
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800420a:	4e26      	ldr	r6, [pc, #152]	; (80042a4 <DisplayPortsDir+0xdc>)
 800420c:	e025      	b.n	800425a <DisplayPortsDir+0x92>
 800420e:	0023      	movs	r3, r4
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 8004210:	2c0a      	cmp	r4, #10
 8004212:	d01a      	beq.n	800424a <DisplayPortsDir+0x82>
 8004214:	1c5c      	adds	r4, r3, #1
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004216:	5ba9      	ldrh	r1, [r5, r6]
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	0212      	lsls	r2, r2, #8
 800421c:	411a      	asrs	r2, r3
 800421e:	420a      	tst	r2, r1
 8004220:	d0f5      	beq.n	800420e <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8004222:	4f1d      	ldr	r7, [pc, #116]	; (8004298 <DisplayPortsDir+0xd0>)
 8004224:	0023      	movs	r3, r4
 8004226:	4642      	mov	r2, r8
 8004228:	491f      	ldr	r1, [pc, #124]	; (80042a8 <DisplayPortsDir+0xe0>)
 800422a:	0038      	movs	r0, r7
 800422c:	f010 fa94 	bl	8014758 <sprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004230:	0038      	movs	r0, r7
 8004232:	f7fb ff71 	bl	8000118 <strlen>
 8004236:	b282      	uxth	r2, r0
 8004238:	2301      	movs	r3, #1
 800423a:	425b      	negs	r3, r3
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	3333      	adds	r3, #51	; 0x33
 8004240:	0039      	movs	r1, r7
 8004242:	9803      	ldr	r0, [sp, #12]
 8004244:	f009 fe5e 	bl	800df04 <writePxMutex>
 8004248:	e7e1      	b.n	800420e <DisplayPortsDir+0x46>
	for (uint8_t i=1 ; i<=N ; i++) 
 800424a:	4643      	mov	r3, r8
 800424c:	3301      	adds	r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	4698      	mov	r8, r3
 8004252:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <DisplayPortsDir+0xd8>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	4543      	cmp	r3, r8
 8004258:	d304      	bcc.n	8004264 <DisplayPortsDir+0x9c>
{
 800425a:	2300      	movs	r3, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800425c:	4642      	mov	r2, r8
 800425e:	1e55      	subs	r5, r2, #1
 8004260:	006d      	lsls	r5, r5, #1
 8004262:	e7d7      	b.n	8004214 <DisplayPortsDir+0x4c>
			}	
		}
	}
	
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 8004264:	4c0c      	ldr	r4, [pc, #48]	; (8004298 <DisplayPortsDir+0xd0>)
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <DisplayPortsDir+0xe4>)
 8004268:	0022      	movs	r2, r4
 800426a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800426c:	c223      	stmia	r2!, {r0, r1, r5}
 800426e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004270:	c223      	stmia	r2!, {r0, r1, r5}
 8004272:	cb03      	ldmia	r3!, {r0, r1}
 8004274:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004276:	0020      	movs	r0, r4
 8004278:	f7fb ff4e 	bl	8000118 <strlen>
 800427c:	b282      	uxth	r2, r0
 800427e:	2301      	movs	r3, #1
 8004280:	425b      	negs	r3, r3
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	3333      	adds	r3, #51	; 0x33
 8004286:	0021      	movs	r1, r4
 8004288:	9803      	ldr	r0, [sp, #12]
 800428a:	f009 fe3b 	bl	800df04 <writePxMutex>
}
 800428e:	b004      	add	sp, #16
 8004290:	bc04      	pop	{r2}
 8004292:	4690      	mov	r8, r2
 8004294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	20001118 	.word	0x20001118
 800429c:	08018eac 	.word	0x08018eac
 80042a0:	2000001c 	.word	0x2000001c
 80042a4:	20006e84 	.word	0x20006e84
 80042a8:	08018ec8 	.word	0x08018ec8
 80042ac:	08018edc 	.word	0x08018edc

080042b0 <DisplayModuleStatus>:
/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
*/
void DisplayModuleStatus(uint8_t port)
{
 80042b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042b2:	46d6      	mov	lr, sl
 80042b4:	b500      	push	{lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp = 0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80042ba:	f00a fc3d 	bl	800eb38 <FreeRTOS_CLIGetOutputBuffer>
 80042be:	0004      	movs	r4, r0
	
	strcpy( (char *) pcOutputString, "");
 80042c0:	2300      	movs	r3, #0
 80042c2:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 80042c4:	4b8d      	ldr	r3, [pc, #564]	; (80044fc <DisplayModuleStatus+0x24c>)
 80042c6:	781a      	ldrb	r2, [r3, #0]
 80042c8:	4d8d      	ldr	r5, [pc, #564]	; (8004500 <DisplayModuleStatus+0x250>)
 80042ca:	498e      	ldr	r1, [pc, #568]	; (8004504 <DisplayModuleStatus+0x254>)
 80042cc:	0028      	movs	r0, r5
 80042ce:	f010 fa43 	bl	8014758 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80042d2:	0029      	movs	r1, r5
 80042d4:	0020      	movs	r0, r4
 80042d6:	f010 fa5f 	bl	8014798 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 80042da:	4b8b      	ldr	r3, [pc, #556]	; (8004508 <DisplayModuleStatus+0x258>)
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	498b      	ldr	r1, [pc, #556]	; (800450c <DisplayModuleStatus+0x25c>)
 80042e0:	0028      	movs	r0, r5
 80042e2:	f010 fa39 	bl	8014758 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80042e6:	0029      	movs	r1, r5
 80042e8:	0020      	movs	r0, r4
 80042ea:	f010 fa55 	bl	8014798 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 80042ee:	2304      	movs	r3, #4
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	3b02      	subs	r3, #2
 80042f4:	2200      	movs	r2, #0
 80042f6:	4986      	ldr	r1, [pc, #536]	; (8004510 <DisplayModuleStatus+0x260>)
 80042f8:	0028      	movs	r0, r5
 80042fa:	f010 fa2d 	bl	8014758 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80042fe:	0029      	movs	r1, r5
 8004300:	0020      	movs	r0, r4
 8004302:	f010 fa49 	bl	8014798 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 8004306:	4a83      	ldr	r2, [pc, #524]	; (8004514 <DisplayModuleStatus+0x264>)
 8004308:	4983      	ldr	r1, [pc, #524]	; (8004518 <DisplayModuleStatus+0x268>)
 800430a:	0028      	movs	r0, r5
 800430c:	f010 fa24 	bl	8014758 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 8004310:	0029      	movs	r1, r5
 8004312:	0020      	movs	r0, r4
 8004314:	f010 fa40 	bl	8014798 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 8004318:	4a80      	ldr	r2, [pc, #512]	; (800451c <DisplayModuleStatus+0x26c>)
 800431a:	4981      	ldr	r1, [pc, #516]	; (8004520 <DisplayModuleStatus+0x270>)
 800431c:	0028      	movs	r0, r5
 800431e:	f010 fa1b 	bl	8014758 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 8004322:	0029      	movs	r1, r5
 8004324:	0020      	movs	r0, r4
 8004326:	f010 fa37 	bl	8014798 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 800432a:	4b7e      	ldr	r3, [pc, #504]	; (8004524 <DisplayModuleStatus+0x274>)
 800432c:	002a      	movs	r2, r5
 800432e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004330:	c243      	stmia	r2!, {r0, r1, r6}
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	6011      	str	r1, [r2, #0]
 8004336:	8899      	ldrh	r1, [r3, #4]
 8004338:	8091      	strh	r1, [r2, #4]
 800433a:	799b      	ldrb	r3, [r3, #6]
 800433c:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 800433e:	0029      	movs	r1, r5
 8004340:	0020      	movs	r0, r4
 8004342:	f010 fa29 	bl	8014798 <strcat>
 8004346:	2701      	movs	r7, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
	{
		sprintf(pcUserMessage, "P%d: ", i);
 8004348:	4d6d      	ldr	r5, [pc, #436]	; (8004500 <DisplayModuleStatus+0x250>)
		strcat( (char *) pcOutputString, pcUserMessage);
		switch (portStatus[i])
 800434a:	4b77      	ldr	r3, [pc, #476]	; (8004528 <DisplayModuleStatus+0x278>)
 800434c:	469a      	mov	sl, r3
 800434e:	e00e      	b.n	800436e <DisplayModuleStatus+0xbe>
		{
				case FREE : 
						sprintf(pcUserMessage, "Free\n\r"); break;
 8004350:	4b6b      	ldr	r3, [pc, #428]	; (8004500 <DisplayModuleStatus+0x250>)
 8004352:	4a76      	ldr	r2, [pc, #472]	; (800452c <DisplayModuleStatus+0x27c>)
 8004354:	6811      	ldr	r1, [r2, #0]
 8004356:	6019      	str	r1, [r3, #0]
 8004358:	8891      	ldrh	r1, [r2, #4]
 800435a:	8099      	strh	r1, [r3, #4]
 800435c:	7992      	ldrb	r2, [r2, #6]
 800435e:	719a      	strb	r2, [r3, #6]
				case PORTBUTTON :
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
				default:
						break;
		}		
		strcat( (char *) pcOutputString, pcUserMessage);
 8004360:	4967      	ldr	r1, [pc, #412]	; (8004500 <DisplayModuleStatus+0x250>)
 8004362:	0020      	movs	r0, r4
 8004364:	f010 fa18 	bl	8014798 <strcat>
 8004368:	3701      	adds	r7, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 800436a:	2f07      	cmp	r7, #7
 800436c:	d039      	beq.n	80043e2 <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage, "P%d: ", i);
 800436e:	003a      	movs	r2, r7
 8004370:	496f      	ldr	r1, [pc, #444]	; (8004530 <DisplayModuleStatus+0x280>)
 8004372:	0028      	movs	r0, r5
 8004374:	f010 f9f0 	bl	8014758 <sprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 8004378:	0029      	movs	r1, r5
 800437a:	0020      	movs	r0, r4
 800437c:	f010 fa0c 	bl	8014798 <strcat>
		switch (portStatus[i])
 8004380:	4653      	mov	r3, sl
 8004382:	5cfb      	ldrb	r3, [r7, r3]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d8eb      	bhi.n	8004360 <DisplayModuleStatus+0xb0>
 8004388:	4653      	mov	r3, sl
 800438a:	5cfb      	ldrb	r3, [r7, r3]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4a69      	ldr	r2, [pc, #420]	; (8004534 <DisplayModuleStatus+0x284>)
 8004390:	58d3      	ldr	r3, [r2, r3]
 8004392:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8004394:	495a      	ldr	r1, [pc, #360]	; (8004500 <DisplayModuleStatus+0x250>)
 8004396:	4b68      	ldr	r3, [pc, #416]	; (8004538 <DisplayModuleStatus+0x288>)
 8004398:	000a      	movs	r2, r1
 800439a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800439c:	c243      	stmia	r2!, {r0, r1, r6}
 800439e:	cb03      	ldmia	r3!, {r0, r1}
 80043a0:	c203      	stmia	r2!, {r0, r1}
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	7013      	strb	r3, [r2, #0]
 80043a6:	e7db      	b.n	8004360 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 80043a8:	4a55      	ldr	r2, [pc, #340]	; (8004500 <DisplayModuleStatus+0x250>)
 80043aa:	4b64      	ldr	r3, [pc, #400]	; (800453c <DisplayModuleStatus+0x28c>)
 80043ac:	cb43      	ldmia	r3!, {r0, r1, r6}
 80043ae:	c243      	stmia	r2!, {r0, r1, r6}
 80043b0:	e7d6      	b.n	8004360 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 80043b2:	4953      	ldr	r1, [pc, #332]	; (8004500 <DisplayModuleStatus+0x250>)
 80043b4:	4b62      	ldr	r3, [pc, #392]	; (8004540 <DisplayModuleStatus+0x290>)
 80043b6:	000a      	movs	r2, r1
 80043b8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80043ba:	c243      	stmia	r2!, {r0, r1, r6}
 80043bc:	cb43      	ldmia	r3!, {r0, r1, r6}
 80043be:	c243      	stmia	r2!, {r0, r1, r6}
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	8013      	strh	r3, [r2, #0]
 80043c4:	e7cc      	b.n	8004360 <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 80043c6:	494e      	ldr	r1, [pc, #312]	; (8004500 <DisplayModuleStatus+0x250>)
 80043c8:	4b5e      	ldr	r3, [pc, #376]	; (8004544 <DisplayModuleStatus+0x294>)
 80043ca:	000a      	movs	r2, r1
 80043cc:	cb43      	ldmia	r3!, {r0, r1, r6}
 80043ce:	c243      	stmia	r2!, {r0, r1, r6}
 80043d0:	cb43      	ldmia	r3!, {r0, r1, r6}
 80043d2:	c243      	stmia	r2!, {r0, r1, r6}
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	6011      	str	r1, [r2, #0]
 80043d8:	8899      	ldrh	r1, [r3, #4]
 80043da:	8091      	strh	r1, [r2, #4]
 80043dc:	799b      	ldrb	r3, [r3, #6]
 80043de:	7193      	strb	r3, [r2, #6]
 80043e0:	e7be      	b.n	8004360 <DisplayModuleStatus+0xb0>
	}	

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 80043e2:	4947      	ldr	r1, [pc, #284]	; (8004500 <DisplayModuleStatus+0x250>)
 80043e4:	4b58      	ldr	r3, [pc, #352]	; (8004548 <DisplayModuleStatus+0x298>)
 80043e6:	000a      	movs	r2, r1
 80043e8:	cb61      	ldmia	r3!, {r0, r5, r6}
 80043ea:	c261      	stmia	r2!, {r0, r5, r6}
 80043ec:	cb61      	ldmia	r3!, {r0, r5, r6}
 80043ee:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 80043f0:	0020      	movs	r0, r4
 80043f2:	f010 f9d1 	bl	8014798 <strcat>
 80043f6:	4f55      	ldr	r7, [pc, #340]	; (800454c <DisplayModuleStatus+0x29c>)
 80043f8:	2601      	movs	r6, #1
 80043fa:	e00d      	b.n	8004418 <DisplayModuleStatus+0x168>
	for (char i=1 ; i<=6 ; i++) {
		if (streamDMA[i-1].Instance == 0) {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 80043fc:	4d40      	ldr	r5, [pc, #256]	; (8004500 <DisplayModuleStatus+0x250>)
 80043fe:	0032      	movs	r2, r6
 8004400:	4953      	ldr	r1, [pc, #332]	; (8004550 <DisplayModuleStatus+0x2a0>)
 8004402:	0028      	movs	r0, r5
 8004404:	f010 f9a8 	bl	8014758 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8004408:	0029      	movs	r1, r5
 800440a:	0020      	movs	r0, r4
 800440c:	f010 f9c4 	bl	8014798 <strcat>
 8004410:	3601      	adds	r6, #1
 8004412:	3738      	adds	r7, #56	; 0x38
	for (char i=1 ; i<=6 ; i++) {
 8004414:	2e07      	cmp	r6, #7
 8004416:	d018      	beq.n	800444a <DisplayModuleStatus+0x19a>
		if (streamDMA[i-1].Instance == 0) {
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0ee      	beq.n	80043fc <DisplayModuleStatus+0x14c>
		} else {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 800441e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004420:	f007 f8e0 	bl	800b5e4 <GetPort>
 8004424:	0005      	movs	r5, r0
 8004426:	00b3      	lsls	r3, r6, #2
 8004428:	3b04      	subs	r3, #4
 800442a:	4a4a      	ldr	r2, [pc, #296]	; (8004554 <DisplayModuleStatus+0x2a4>)
 800442c:	58d0      	ldr	r0, [r2, r3]
 800442e:	f007 f8d9 	bl	800b5e4 <GetPort>
 8004432:	9000      	str	r0, [sp, #0]
 8004434:	002b      	movs	r3, r5
 8004436:	0032      	movs	r2, r6
 8004438:	4947      	ldr	r1, [pc, #284]	; (8004558 <DisplayModuleStatus+0x2a8>)
 800443a:	4831      	ldr	r0, [pc, #196]	; (8004500 <DisplayModuleStatus+0x250>)
 800443c:	f010 f98c 	bl	8014758 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8004440:	492f      	ldr	r1, [pc, #188]	; (8004500 <DisplayModuleStatus+0x250>)
 8004442:	0020      	movs	r0, r4
 8004444:	f010 f9a8 	bl	8014798 <strcat>
 8004448:	e7e2      	b.n	8004410 <DisplayModuleStatus+0x160>
		}
	}
	strcat( (char *) pcOutputString, "\n\r");
 800444a:	0020      	movs	r0, r4
 800444c:	f7fb fe64 	bl	8000118 <strlen>
 8004450:	1820      	adds	r0, r4, r0
 8004452:	2203      	movs	r2, #3
 8004454:	4941      	ldr	r1, [pc, #260]	; (800455c <DisplayModuleStatus+0x2ac>)
 8004456:	f00f ff4a 	bl	80142ee <memcpy>
	
	/* Ports direction */
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 800445a:	0020      	movs	r0, r4
 800445c:	f7fb fe5c 	bl	8000118 <strlen>
 8004460:	1820      	adds	r0, r4, r0
 8004462:	221d      	movs	r2, #29
 8004464:	493e      	ldr	r1, [pc, #248]	; (8004560 <DisplayModuleStatus+0x2b0>)
 8004466:	f00f ff42 	bl	80142ee <memcpy>
	temp = strlen( (char *) pcOutputString);
 800446a:	0020      	movs	r0, r4
 800446c:	f7fb fe54 	bl	8000118 <strlen>
 8004470:	4682      	mov	sl, r0
 8004472:	2200      	movs	r2, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{		
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004474:	4f3b      	ldr	r7, [pc, #236]	; (8004564 <DisplayModuleStatus+0x2b4>)
 8004476:	4e21      	ldr	r6, [pc, #132]	; (80044fc <DisplayModuleStatus+0x24c>)
 8004478:	e002      	b.n	8004480 <DisplayModuleStatus+0x1d0>
 800447a:	002a      	movs	r2, r5
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 800447c:	2d06      	cmp	r5, #6
 800447e:	d013      	beq.n	80044a8 <DisplayModuleStatus+0x1f8>
 8004480:	1c55      	adds	r5, r2, #1
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004482:	7833      	ldrb	r3, [r6, #0]
 8004484:	3b01      	subs	r3, #1
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	5bd9      	ldrh	r1, [r3, r7]
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	4113      	asrs	r3, r2
 8004490:	420b      	tst	r3, r1
 8004492:	d0f2      	beq.n	800447a <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage, "P%d ", p);
 8004494:	002a      	movs	r2, r5
 8004496:	4934      	ldr	r1, [pc, #208]	; (8004568 <DisplayModuleStatus+0x2b8>)
 8004498:	4819      	ldr	r0, [pc, #100]	; (8004500 <DisplayModuleStatus+0x250>)
 800449a:	f010 f95d 	bl	8014758 <sprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 800449e:	4918      	ldr	r1, [pc, #96]	; (8004500 <DisplayModuleStatus+0x250>)
 80044a0:	0020      	movs	r0, r4
 80044a2:	f010 f979 	bl	8014798 <strcat>
 80044a6:	e7e8      	b.n	800447a <DisplayModuleStatus+0x1ca>
		}	
	}
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 80044a8:	0020      	movs	r0, r4
 80044aa:	f7fb fe35 	bl	8000118 <strlen>
 80044ae:	4653      	mov	r3, sl
 80044b0:	041b      	lsls	r3, r3, #16
 80044b2:	0c1b      	lsrs	r3, r3, #16
 80044b4:	4298      	cmp	r0, r3
 80044b6:	d00e      	beq.n	80044d6 <DisplayModuleStatus+0x226>
		strcat( (char *) pcOutputString, "None");
	}
	strcat( (char *) pcOutputString, "\n\r");
 80044b8:	0020      	movs	r0, r4
 80044ba:	f7fb fe2d 	bl	8000118 <strlen>
 80044be:	1820      	adds	r0, r4, r0
 80044c0:	2203      	movs	r2, #3
 80044c2:	4926      	ldr	r1, [pc, #152]	; (800455c <DisplayModuleStatus+0x2ac>)
 80044c4:	f00f ff13 	bl	80142ee <memcpy>
	
	/* Display output */
	if (port)
 80044c8:	9b03      	ldr	r3, [sp, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <DisplayModuleStatus+0x232>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
	
}
 80044ce:	b004      	add	sp, #16
 80044d0:	bc04      	pop	{r2}
 80044d2:	4692      	mov	sl, r2
 80044d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 80044d6:	1820      	adds	r0, r4, r0
 80044d8:	2205      	movs	r2, #5
 80044da:	4924      	ldr	r1, [pc, #144]	; (800456c <DisplayModuleStatus+0x2bc>)
 80044dc:	f00f ff07 	bl	80142ee <memcpy>
 80044e0:	e7ea      	b.n	80044b8 <DisplayModuleStatus+0x208>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 80044e2:	0020      	movs	r0, r4
 80044e4:	f7fb fe18 	bl	8000118 <strlen>
 80044e8:	b282      	uxth	r2, r0
 80044ea:	2301      	movs	r3, #1
 80044ec:	425b      	negs	r3, r3
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	3333      	adds	r3, #51	; 0x33
 80044f2:	0021      	movs	r1, r4
 80044f4:	9803      	ldr	r0, [sp, #12]
 80044f6:	f009 fd05 	bl	800df04 <writePxMutex>
}
 80044fa:	e7e8      	b.n	80044ce <DisplayModuleStatus+0x21e>
 80044fc:	200010e4 	.word	0x200010e4
 8004500:	20001118 	.word	0x20001118
 8004504:	08018cf0 	.word	0x08018cf0
 8004508:	20000b07 	.word	0x20000b07
 800450c:	08018d0c 	.word	0x08018d0c
 8004510:	08018d28 	.word	0x08018d28
 8004514:	08018d48 	.word	0x08018d48
 8004518:	08018d54 	.word	0x08018d54
 800451c:	08018d6c 	.word	0x08018d6c
 8004520:	08018d78 	.word	0x08018d78
 8004524:	08018d94 	.word	0x08018d94
 8004528:	20001168 	.word	0x20001168
 800452c:	08018db0 	.word	0x08018db0
 8004530:	08018da8 	.word	0x08018da8
 8004534:	08018ccc 	.word	0x08018ccc
 8004538:	08018db8 	.word	0x08018db8
 800453c:	08018dd0 	.word	0x08018dd0
 8004540:	08018ddc 	.word	0x08018ddc
 8004544:	08018df8 	.word	0x08018df8
 8004548:	08018e18 	.word	0x08018e18
 800454c:	200019e8 	.word	0x200019e8
 8004550:	08018e30 	.word	0x08018e30
 8004554:	20001514 	.word	0x20001514
 8004558:	08018e4c 	.word	0x08018e4c
 800455c:	08018da4 	.word	0x08018da4
 8004560:	08018e7c 	.word	0x08018e7c
 8004564:	20006e84 	.word	0x20006e84
 8004568:	08018e9c 	.word	0x08018e9c
 800456c:	08018ea4 	.word	0x08018ea4

08004570 <GetID>:
/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
*/
int16_t GetID(char* string)
{
 8004570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004572:	46c6      	mov	lr, r8
 8004574:	b500      	push	{lr}
 8004576:	0005      	movs	r5, r0
	uint8_t id = 0, i = 0;
	
	if(!strcmp(string, "me"))							/* Check keywords */
 8004578:	4929      	ldr	r1, [pc, #164]	; (8004620 <GetID+0xb0>)
 800457a:	f7fb fdc3 	bl	8000104 <strcmp>
 800457e:	2800      	cmp	r0, #0
 8004580:	d010      	beq.n	80045a4 <GetID+0x34>
		return myID;
	else if(!strcmp(string, "all"))							
 8004582:	4928      	ldr	r1, [pc, #160]	; (8004624 <GetID+0xb4>)
 8004584:	0028      	movs	r0, r5
 8004586:	f7fb fdbd 	bl	8000104 <strcmp>
 800458a:	2800      	cmp	r0, #0
 800458c:	d045      	beq.n	800461a <GetID+0xaa>
		return BOS_BROADCAST;				
	else if (string[0] == '#') 						/* Check IDs */
 800458e:	782b      	ldrb	r3, [r5, #0]
 8004590:	4698      	mov	r8, r3
 8004592:	2b23      	cmp	r3, #35	; 0x23
 8004594:	d00b      	beq.n	80045ae <GetID+0x3e>
			return BOS_ERR_WrongID;				
	} 
	else 																	/* Check alias */
	{															
		/* Check module alias */
		for (i=0 ; i<N ; i++) {
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <GetID+0xb8>)
 8004598:	781f      	ldrb	r7, [r3, #0]
 800459a:	2f00      	cmp	r7, #0
 800459c:	d02a      	beq.n	80045f4 <GetID+0x84>
 800459e:	4e23      	ldr	r6, [pc, #140]	; (800462c <GetID+0xbc>)
 80045a0:	2400      	movs	r4, #0
 80045a2:	e01c      	b.n	80045de <GetID+0x6e>
		return myID;
 80045a4:	4b22      	ldr	r3, [pc, #136]	; (8004630 <GetID+0xc0>)
 80045a6:	7818      	ldrb	r0, [r3, #0]
		}			
		
		return BOS_ERR_WrongName;			
	}
	
}
 80045a8:	bc04      	pop	{r2}
 80045aa:	4690      	mov	r8, r2
 80045ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 80045ae:	1c68      	adds	r0, r5, #1
 80045b0:	f00f fc13 	bl	8013dda <atol>
 80045b4:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <GetID+0x52>
 80045ba:	4a1b      	ldr	r2, [pc, #108]	; (8004628 <GetID+0xb8>)
 80045bc:	7812      	ldrb	r2, [r2, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d206      	bcs.n	80045d0 <GetID+0x60>
		else if (id == myID)
 80045c2:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <GetID+0xc0>)
 80045c4:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 80045c6:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1ed      	bne.n	80045a8 <GetID+0x38>
			return myID;
 80045cc:	b210      	sxth	r0, r2
 80045ce:	e7eb      	b.n	80045a8 <GetID+0x38>
			return id;
 80045d0:	b218      	sxth	r0, r3
 80045d2:	e7e9      	b.n	80045a8 <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 80045d4:	3401      	adds	r4, #1
 80045d6:	b2e4      	uxtb	r4, r4
 80045d8:	360a      	adds	r6, #10
 80045da:	42bc      	cmp	r4, r7
 80045dc:	d00a      	beq.n	80045f4 <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 80045de:	0031      	movs	r1, r6
 80045e0:	0028      	movs	r0, r5
 80045e2:	f7fb fd8f 	bl	8000104 <strcmp>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d1f4      	bne.n	80045d4 <GetID+0x64>
 80045ea:	4643      	mov	r3, r8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f1      	beq.n	80045d4 <GetID+0x64>
 80045f0:	b220      	sxth	r0, r4
 80045f2:	e7d9      	b.n	80045a8 <GetID+0x38>
 80045f4:	4f0f      	ldr	r7, [pc, #60]	; (8004634 <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 80045f6:	2600      	movs	r6, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 80045f8:	0039      	movs	r1, r7
 80045fa:	0028      	movs	r0, r5
 80045fc:	f7fb fd82 	bl	8000104 <strcmp>
 8004600:	2800      	cmp	r0, #0
 8004602:	d005      	beq.n	8004610 <GetID+0xa0>
 8004604:	3601      	adds	r6, #1
 8004606:	370a      	adds	r7, #10
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 8004608:	2e0a      	cmp	r6, #10
 800460a:	d1f5      	bne.n	80045f8 <GetID+0x88>
		return BOS_ERR_WrongName;			
 800460c:	2064      	movs	r0, #100	; 0x64
 800460e:	e7cb      	b.n	80045a8 <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 8004610:	0234      	lsls	r4, r6, #8
 8004612:	20fe      	movs	r0, #254	; 0xfe
 8004614:	4320      	orrs	r0, r4
 8004616:	b200      	sxth	r0, r0
 8004618:	e7c6      	b.n	80045a8 <GetID+0x38>
		return BOS_BROADCAST;				
 800461a:	20ff      	movs	r0, #255	; 0xff
 800461c:	e7c4      	b.n	80045a8 <GetID+0x38>
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	08018f30 	.word	0x08018f30
 8004624:	08018f34 	.word	0x08018f34
 8004628:	2000001c 	.word	0x2000001c
 800462c:	20000fe0 	.word	0x20000fe0
 8004630:	200010e4 	.word	0x200010e4
 8004634:	20000ed4 	.word	0x20000ed4

08004638 <NameModule>:
/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
*/
BOS_Status NameModule(uint8_t module, char* alias)
{
 8004638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800463a:	b083      	sub	sp, #12
 800463c:	9001      	str	r0, [sp, #4]
 800463e:	000d      	movs	r5, r1
 8004640:	4c2a      	ldr	r4, [pc, #168]	; (80046ec <NameModule+0xb4>)
 8004642:	0027      	movs	r7, r4
 8004644:	3710      	adds	r7, #16
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for(i=0 ; i<NumOfKeywords ; i++)
	{
		if (!strcmp(alias, BOSkeywords[i]))	
 8004646:	0021      	movs	r1, r4
 8004648:	0028      	movs	r0, r5
 800464a:	f7fb fd5b 	bl	8000104 <strcmp>
 800464e:	2800      	cmp	r0, #0
 8004650:	d043      	beq.n	80046da <NameModule+0xa2>
 8004652:	3404      	adds	r4, #4
	for(i=0 ; i<NumOfKeywords ; i++)
 8004654:	42bc      	cmp	r4, r7
 8004656:	d1f6      	bne.n	8004646 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i=1 ; i<N ; i++)
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <NameModule+0xb8>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d90f      	bls.n	8004680 <NameModule+0x48>
 8004660:	4c24      	ldr	r4, [pc, #144]	; (80046f4 <NameModule+0xbc>)
 8004662:	009f      	lsls	r7, r3, #2
 8004664:	18ff      	adds	r7, r7, r3
 8004666:	007f      	lsls	r7, r7, #1
 8004668:	0023      	movs	r3, r4
 800466a:	3b0a      	subs	r3, #10
 800466c:	18ff      	adds	r7, r7, r3
	{
		if (!strcmp(alias, moduleAlias[i]))	
 800466e:	0021      	movs	r1, r4
 8004670:	0028      	movs	r0, r5
 8004672:	f7fb fd47 	bl	8000104 <strcmp>
 8004676:	2800      	cmp	r0, #0
 8004678:	d031      	beq.n	80046de <NameModule+0xa6>
 800467a:	340a      	adds	r4, #10
	for(i=1 ; i<N ; i++)
 800467c:	42bc      	cmp	r4, r7
 800467e:	d1f6      	bne.n	800466e <NameModule+0x36>
 8004680:	4c1d      	ldr	r4, [pc, #116]	; (80046f8 <NameModule+0xc0>)
 8004682:	0027      	movs	r7, r4
 8004684:	3764      	adds	r7, #100	; 0x64
	}

	/* 3. Check module alias with group aliases */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!strcmp(alias, groupAlias[i]))	
 8004686:	0021      	movs	r1, r4
 8004688:	0028      	movs	r0, r5
 800468a:	f7fb fd3b 	bl	8000104 <strcmp>
 800468e:	2800      	cmp	r0, #0
 8004690:	d028      	beq.n	80046e4 <NameModule+0xac>
 8004692:	340a      	adds	r4, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004694:	42bc      	cmp	r4, r7
 8004696:	d1f6      	bne.n	8004686 <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004698:	4c18      	ldr	r4, [pc, #96]	; (80046fc <NameModule+0xc4>)
 800469a:	4b19      	ldr	r3, [pc, #100]	; (8004700 <NameModule+0xc8>)
 800469c:	601c      	str	r4, [r3, #0]
 800469e:	001e      	movs	r6, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80046a4:	0038      	movs	r0, r7
 80046a6:	f7fb fd37 	bl	8000118 <strlen>
 80046aa:	0002      	movs	r2, r0
		
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 80046ac:	0039      	movs	r1, r7
 80046ae:	0028      	movs	r0, r5
 80046b0:	f010 f896 	bl	80147e0 <strncmp>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d017      	beq.n	80046e8 <NameModule+0xb0>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80046b8:	6864      	ldr	r4, [r4, #4]
 80046ba:	6034      	str	r4, [r6, #0]
 80046bc:	2c00      	cmp	r4, #0
 80046be:	d1ef      	bne.n	80046a0 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 80046c0:	9b01      	ldr	r3, [sp, #4]
 80046c2:	0098      	lsls	r0, r3, #2
 80046c4:	469c      	mov	ip, r3
 80046c6:	4460      	add	r0, ip
 80046c8:	0040      	lsls	r0, r0, #1
 80046ca:	4e0e      	ldr	r6, [pc, #56]	; (8004704 <NameModule+0xcc>)
 80046cc:	1980      	adds	r0, r0, r6
 80046ce:	0029      	movs	r1, r5
 80046d0:	f010 f87e 	bl	80147d0 <strcpy>
	
	/* 6. Share new module alias with other modules */
	
	
	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 80046d4:	f7fe fe90 	bl	80033f8 <SaveEEalias>
	
	return result;
 80046d8:	e002      	b.n	80046e0 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 80046da:	2006      	movs	r0, #6
 80046dc:	e000      	b.n	80046e0 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 80046de:	2007      	movs	r0, #7
}
 80046e0:	b003      	add	sp, #12
 80046e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80046e4:	2007      	movs	r0, #7
 80046e6:	e7fb      	b.n	80046e0 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 80046e8:	2008      	movs	r0, #8
 80046ea:	e7f9      	b.n	80046e0 <NameModule+0xa8>
 80046ec:	08018ce0 	.word	0x08018ce0
 80046f0:	2000001c 	.word	0x2000001c
 80046f4:	20000fea 	.word	0x20000fea
 80046f8:	20000ed4 	.word	0x20000ed4
 80046fc:	20000128 	.word	0x20000128
 8004700:	20001170 	.word	0x20001170
 8004704:	20000fe0 	.word	0x20000fe0

08004708 <AddModuleToGroup>:
/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
*/
BOS_Status AddModuleToGroup(uint8_t module, char* group)
{
 8004708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470a:	46c6      	mov	lr, r8
 800470c:	b500      	push	{lr}
 800470e:	0007      	movs	r7, r0
 8004710:	000e      	movs	r6, r1
 8004712:	4d3a      	ldr	r5, [pc, #232]	; (80047fc <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */
	
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004714:	2400      	movs	r4, #0
	{
		/* This group already exists */
		if (!strcmp(group, groupAlias[i]))	
 8004716:	0029      	movs	r1, r5
 8004718:	0030      	movs	r0, r6
 800471a:	f7fb fcf3 	bl	8000104 <strcmp>
 800471e:	2800      	cmp	r0, #0
 8004720:	d050      	beq.n	80047c4 <AddModuleToGroup+0xbc>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004722:	3401      	adds	r4, #1
 8004724:	350a      	adds	r5, #10
 8004726:	2c0a      	cmp	r4, #10
 8004728:	d1f5      	bne.n	8004716 <AddModuleToGroup+0xe>
 800472a:	4c35      	ldr	r4, [pc, #212]	; (8004800 <AddModuleToGroup+0xf8>)
 800472c:	0025      	movs	r5, r4
 800472e:	3510      	adds	r5, #16
	/* This is a new group - Verify alias and create the group */
	
	/* 1. Check group alias with keywords */
	for(j=0 ; j<NumOfKeywords ; j++)
	{
		if (!strcmp(group, BOSkeywords[j]))	
 8004730:	0021      	movs	r1, r4
 8004732:	0030      	movs	r0, r6
 8004734:	f7fb fce6 	bl	8000104 <strcmp>
 8004738:	2800      	cmp	r0, #0
 800473a:	d058      	beq.n	80047ee <AddModuleToGroup+0xe6>
 800473c:	3404      	adds	r4, #4
	for(j=0 ; j<NumOfKeywords ; j++)
 800473e:	42ac      	cmp	r4, r5
 8004740:	d1f6      	bne.n	8004730 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}	

	/* 2. Check group alias with module aliases */
	for(j=1 ; j<N ; j++)
 8004742:	4b30      	ldr	r3, [pc, #192]	; (8004804 <AddModuleToGroup+0xfc>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d90f      	bls.n	800476a <AddModuleToGroup+0x62>
 800474a:	4c2f      	ldr	r4, [pc, #188]	; (8004808 <AddModuleToGroup+0x100>)
 800474c:	009d      	lsls	r5, r3, #2
 800474e:	18ed      	adds	r5, r5, r3
 8004750:	006d      	lsls	r5, r5, #1
 8004752:	0023      	movs	r3, r4
 8004754:	3b0a      	subs	r3, #10
 8004756:	18ed      	adds	r5, r5, r3
	{
		if (!strcmp(group, moduleAlias[j]))	
 8004758:	0021      	movs	r1, r4
 800475a:	0030      	movs	r0, r6
 800475c:	f7fb fcd2 	bl	8000104 <strcmp>
 8004760:	2800      	cmp	r0, #0
 8004762:	d046      	beq.n	80047f2 <AddModuleToGroup+0xea>
 8004764:	340a      	adds	r4, #10
	for(j=1 ; j<N ; j++)
 8004766:	42ac      	cmp	r4, r5
 8004768:	d1f6      	bne.n	8004758 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}		
	
	/* 3. Check group alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800476a:	4c28      	ldr	r4, [pc, #160]	; (800480c <AddModuleToGroup+0x104>)
 800476c:	4b28      	ldr	r3, [pc, #160]	; (8004810 <AddModuleToGroup+0x108>)
 800476e:	601c      	str	r4, [r3, #0]
 8004770:	4698      	mov	r8, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8004776:	0028      	movs	r0, r5
 8004778:	f7fb fcce 	bl	8000118 <strlen>
 800477c:	0002      	movs	r2, r0
		
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 800477e:	0029      	movs	r1, r5
 8004780:	0030      	movs	r0, r6
 8004782:	f010 f82d 	bl	80147e0 <strncmp>
 8004786:	2800      	cmp	r0, #0
 8004788:	d035      	beq.n	80047f6 <AddModuleToGroup+0xee>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800478a:	6864      	ldr	r4, [r4, #4]
 800478c:	4643      	mov	r3, r8
 800478e:	601c      	str	r4, [r3, #0]
 8004790:	2c00      	cmp	r4, #0
 8004792:	d1ee      	bne.n	8004772 <AddModuleToGroup+0x6a>
	}			
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!groupAlias[i][0]) {	
 8004794:	4b19      	ldr	r3, [pc, #100]	; (80047fc <AddModuleToGroup+0xf4>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01e      	beq.n	80047da <AddModuleToGroup+0xd2>
 800479c:	4b17      	ldr	r3, [pc, #92]	; (80047fc <AddModuleToGroup+0xf4>)
 800479e:	330a      	adds	r3, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80047a0:	3401      	adds	r4, #1
		if (!groupAlias[i][0]) {	
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	d019      	beq.n	80047dc <AddModuleToGroup+0xd4>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80047a8:	3401      	adds	r4, #1
 80047aa:	330a      	adds	r3, #10
 80047ac:	2c0a      	cmp	r4, #10
 80047ae:	d1f8      	bne.n	80047a2 <AddModuleToGroup+0x9a>
			break;
		}
	}		
	
	/* 5. Add this module to the new group */
	groupModules[module-1] |= (0x0001<<i);
 80047b0:	3f01      	subs	r7, #1
 80047b2:	4918      	ldr	r1, [pc, #96]	; (8004814 <AddModuleToGroup+0x10c>)
 80047b4:	007f      	lsls	r7, r7, #1
 80047b6:	2201      	movs	r2, #1
 80047b8:	40a2      	lsls	r2, r4
 80047ba:	5a7b      	ldrh	r3, [r7, r1]
 80047bc:	4313      	orrs	r3, r2
 80047be:	527b      	strh	r3, [r7, r1]


	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	
	return result;
 80047c0:	2000      	movs	r0, #0
 80047c2:	e007      	b.n	80047d4 <AddModuleToGroup+0xcc>
			groupModules[module-1] |= (0x0001<<i);	
 80047c4:	3f01      	subs	r7, #1
 80047c6:	4913      	ldr	r1, [pc, #76]	; (8004814 <AddModuleToGroup+0x10c>)
 80047c8:	007f      	lsls	r7, r7, #1
 80047ca:	2201      	movs	r2, #1
 80047cc:	40a2      	lsls	r2, r4
 80047ce:	5a7b      	ldrh	r3, [r7, r1]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	527b      	strh	r3, [r7, r1]
}
 80047d4:	bc04      	pop	{r2}
 80047d6:	4690      	mov	r8, r2
 80047d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80047da:	2400      	movs	r4, #0
			strcpy(groupAlias[i], group);	
 80047dc:	00a0      	lsls	r0, r4, #2
 80047de:	1900      	adds	r0, r0, r4
 80047e0:	0040      	lsls	r0, r0, #1
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <AddModuleToGroup+0xf4>)
 80047e4:	1818      	adds	r0, r3, r0
 80047e6:	0031      	movs	r1, r6
 80047e8:	f00f fff2 	bl	80147d0 <strcpy>
			break;
 80047ec:	e7e0      	b.n	80047b0 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 80047ee:	2006      	movs	r0, #6
 80047f0:	e7f0      	b.n	80047d4 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 80047f2:	2007      	movs	r0, #7
 80047f4:	e7ee      	b.n	80047d4 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 80047f6:	2008      	movs	r0, #8
 80047f8:	e7ec      	b.n	80047d4 <AddModuleToGroup+0xcc>
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	20000ed4 	.word	0x20000ed4
 8004800:	08018ce0 	.word	0x08018ce0
 8004804:	2000001c 	.word	0x2000001c
 8004808:	20000fea 	.word	0x20000fea
 800480c:	20000128 	.word	0x20000128
 8004810:	20001174 	.word	0x20001174
 8004814:	20000f38 	.word	0x20000f38

08004818 <ReadPortsDir>:
/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
*/
BOS_Status ReadPortsDir(void)
{
 8004818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481a:	46ce      	mov	lr, r9
 800481c:	4647      	mov	r7, r8
 800481e:	b580      	push	{r7, lr}
 8004820:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	
	/* Ask all other modules for their ports directions */
	for (uint8_t i=1 ; i<=N ; i++) 
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <ReadPortsDir+0x9c>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d03c      	beq.n	80048a4 <ReadPortsDir+0x8c>
 800482a:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK; 
 800482c:	2300      	movs	r3, #0
 800482e:	9301      	str	r3, [sp, #4]
	{
		if (i != myID) {
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <ReadPortsDir+0xa0>)
 8004832:	4699      	mov	r9, r3
			} 	
		} else {
			/* Check my own ports */
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8004834:	4b21      	ldr	r3, [pc, #132]	; (80048bc <ReadPortsDir+0xa4>)
 8004836:	4698      	mov	r8, r3
 8004838:	e021      	b.n	800487e <ReadPortsDir+0x66>
 800483a:	2600      	movs	r6, #0
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 800483c:	2401      	movs	r4, #1
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800483e:	2780      	movs	r7, #128	; 0x80
 8004840:	023f      	lsls	r7, r7, #8
 8004842:	e004      	b.n	800484e <ReadPortsDir+0x36>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8004844:	3401      	adds	r4, #1
 8004846:	b2e4      	uxtb	r4, r4
 8004848:	3601      	adds	r6, #1
 800484a:	2c07      	cmp	r4, #7
 800484c:	d011      	beq.n	8004872 <ReadPortsDir+0x5a>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800484e:	0020      	movs	r0, r4
 8004850:	f009 fb36 	bl	800dec0 <GetUart>
 8004854:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004856:	42bb      	cmp	r3, r7
 8004858:	d1f4      	bne.n	8004844 <ReadPortsDir+0x2c>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <ReadPortsDir+0xa0>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	3b01      	subs	r3, #1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4642      	mov	r2, r8
 8004864:	5a9a      	ldrh	r2, [r3, r2]
 8004866:	0039      	movs	r1, r7
 8004868:	4131      	asrs	r1, r6
 800486a:	430a      	orrs	r2, r1
 800486c:	4641      	mov	r1, r8
 800486e:	525a      	strh	r2, [r3, r1]
 8004870:	e7e8      	b.n	8004844 <ReadPortsDir+0x2c>
	for (uint8_t i=1 ; i<=N ; i++) 
 8004872:	3501      	adds	r5, #1
 8004874:	b2ed      	uxtb	r5, r5
 8004876:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <ReadPortsDir+0x9c>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	42ab      	cmp	r3, r5
 800487c:	d314      	bcc.n	80048a8 <ReadPortsDir+0x90>
		if (i != myID) {
 800487e:	464b      	mov	r3, r9
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	42ab      	cmp	r3, r5
 8004884:	d0d9      	beq.n	800483a <ReadPortsDir+0x22>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	2113      	movs	r1, #19
 800488a:	0028      	movs	r0, r5
 800488c:	f004 fd94 	bl	80093b8 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004890:	2032      	movs	r0, #50	; 0x32
 8004892:	f009 f93b 	bl	800db0c <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <ReadPortsDir+0xa8>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0e9      	beq.n	8004872 <ReadPortsDir+0x5a>
				result = BOS_ERR_NoResponse;
 800489e:	2302      	movs	r3, #2
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	e7e6      	b.n	8004872 <ReadPortsDir+0x5a>
	BOS_Status result = BOS_OK; 
 80048a4:	2300      	movs	r3, #0
 80048a6:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 80048a8:	9801      	ldr	r0, [sp, #4]
 80048aa:	b003      	add	sp, #12
 80048ac:	bc0c      	pop	{r2, r3}
 80048ae:	4690      	mov	r8, r2
 80048b0:	4699      	mov	r9, r3
 80048b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b4:	2000001c 	.word	0x2000001c
 80048b8:	200010e4 	.word	0x200010e4
 80048bc:	20006e84 	.word	0x20006e84
 80048c0:	20001180 	.word	0x20001180

080048c4 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
*/
BOS_Status UpdateMyPortsDir(void)
{
 80048c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c6:	46c6      	mov	lr, r8
 80048c8:	b500      	push	{lr}
 80048ca:	2500      	movs	r5, #0
	BOS_Status result = BOS_OK;
	
	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80048cc:	2401      	movs	r4, #1
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <UpdateMyPortsDir+0x54>)
 80048d0:	4698      	mov	r8, r3
 80048d2:	4f12      	ldr	r7, [pc, #72]	; (800491c <UpdateMyPortsDir+0x58>)
 80048d4:	2680      	movs	r6, #128	; 0x80
 80048d6:	0236      	lsls	r6, r6, #8
 80048d8:	e00a      	b.n	80048f0 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);					
 80048da:	0020      	movs	r0, r4
 80048dc:	f009 faf0 	bl	800dec0 <GetUart>
 80048e0:	2101      	movs	r1, #1
 80048e2:	f009 fb87 	bl	800dff4 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80048e6:	3401      	adds	r4, #1
 80048e8:	b2e4      	uxtb	r4, r4
 80048ea:	3501      	adds	r5, #1
 80048ec:	2c07      	cmp	r4, #7
 80048ee:	d00f      	beq.n	8004910 <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 80048f0:	783b      	ldrb	r3, [r7, #0]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4642      	mov	r2, r8
 80048f8:	5a9b      	ldrh	r3, [r3, r2]
 80048fa:	0032      	movs	r2, r6
 80048fc:	412a      	asrs	r2, r5
 80048fe:	421a      	tst	r2, r3
 8004900:	d1eb      	bne.n	80048da <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 8004902:	0020      	movs	r0, r4
 8004904:	f009 fadc 	bl	800dec0 <GetUart>
 8004908:	2100      	movs	r1, #0
 800490a:	f009 fb73 	bl	800dff4 <SwapUartPins>
 800490e:	e7ea      	b.n	80048e6 <UpdateMyPortsDir+0x22>
		}	
	}		
	
	return result;
}
 8004910:	2000      	movs	r0, #0
 8004912:	bc04      	pop	{r2}
 8004914:	4690      	mov	r8, r2
 8004916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004918:	20006e84 	.word	0x20006e84
 800491c:	200010e4 	.word	0x200010e4

08004920 <BOS_Init>:
{
 8004920:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8004922:	f008 ffab 	bl	800d87c <RTC_Init>
	GetTimeDate();
 8004926:	f009 f849 	bl	800d9bc <GetTimeDate>
	EE_Init();
 800492a:	f003 f97b 	bl	8007c24 <EE_Init>
  GPIO_Init();
 800492e:	f008 fc75 	bl	800d21c <GPIO_Init>
	DMA_Init();
 8004932:	f007 fbc3 	bl	800c0bc <DMA_Init>
	TIM_USEC_Init();
 8004936:	f009 f875 	bl	800da24 <TIM_USEC_Init>
	CRC_Init();
 800493a:	f008 fbe9 	bl	800d110 <CRC_Init>
	TIM_MSEC_Init();
 800493e:	f009 f8a3 	bl	800da88 <TIM_MSEC_Init>
	if (IsFactoryReset())
 8004942:	f008 fd0f 	bl	800d364 <IsFactoryReset>
 8004946:	2800      	cmp	r0, #0
 8004948:	d11a      	bne.n	8004980 <BOS_Init+0x60>
	if (IsLowerCLIbaud())
 800494a:	f7ff f881 	bl	8003a50 <IsLowerCLIbaud>
 800494e:	2800      	cmp	r0, #0
 8004950:	d021      	beq.n	8004996 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag = 1;
 8004952:	4b3e      	ldr	r3, [pc, #248]	; (8004a4c <BOS_Init+0x12c>)
 8004954:	2201      	movs	r2, #1
 8004956:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8004958:	2032      	movs	r0, #50	; 0x32
 800495a:	f009 f8d7 	bl	800db0c <StartMilliDelay>
		Module_Init();	
 800495e:	f006 fd8d 	bl	800b47c <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004962:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <BOS_Init+0x130>)
 8004964:	22e1      	movs	r2, #225	; 0xe1
 8004966:	0252      	lsls	r2, r2, #9
 8004968:	609a      	str	r2, [r3, #8]
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800496a:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 800496c:	001d      	movs	r5, r3
 800496e:	68a9      	ldr	r1, [r5, #8]
 8004970:	0020      	movs	r0, r4
 8004972:	f009 fb35 	bl	800dfe0 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8004976:	3401      	adds	r4, #1
 8004978:	b2e4      	uxtb	r4, r4
 800497a:	2c07      	cmp	r4, #7
 800497c:	d1f7      	bne.n	800496e <BOS_Init+0x4e>
 800497e:	e00f      	b.n	80049a0 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 8004980:	f7ff f8b4 	bl	8003aec <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004984:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004988:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <BOS_Init+0x134>)
 800498a:	4a33      	ldr	r2, [pc, #204]	; (8004a58 <BOS_Init+0x138>)
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	e7fd      	b.n	8004992 <BOS_Init+0x72>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8004996:	2032      	movs	r0, #50	; 0x32
 8004998:	f009 f8b8 	bl	800db0c <StartMilliDelay>
		Module_Init();				
 800499c:	f006 fd6e 	bl	800b47c <Module_Init>
	LoadEEvars();
 80049a0:	f7ff f844 	bl	8003a2c <LoadEEvars>
	UpdateMyPortsDir();
 80049a4:	f7ff ff8e 	bl	80048c4 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 80049a8:	f007 fff0 	bl	800c98c <SetupMessagingRxDMAs>
	if (myID == 0)		/* Native module */
 80049ac:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <BOS_Init+0x13c>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d037      	beq.n	8004a24 <BOS_Init+0x104>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 80049b4:	2580      	movs	r5, #128	; 0x80
 80049b6:	012d      	lsls	r5, r5, #4
 80049b8:	2490      	movs	r4, #144	; 0x90
 80049ba:	05e4      	lsls	r4, r4, #23
 80049bc:	2201      	movs	r2, #1
 80049be:	0029      	movs	r1, r5
 80049c0:	0020      	movs	r0, r4
 80049c2:	f00d f89b 	bl	8011afc <HAL_GPIO_WritePin>
 80049c6:	20fa      	movs	r0, #250	; 0xfa
 80049c8:	0040      	lsls	r0, r0, #1
 80049ca:	f009 f89f 	bl	800db0c <StartMilliDelay>
 80049ce:	2200      	movs	r2, #0
 80049d0:	0029      	movs	r1, r5
 80049d2:	0020      	movs	r0, r4
 80049d4:	f00d f892 	bl	8011afc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80049d8:	2064      	movs	r0, #100	; 0x64
 80049da:	f009 f897 	bl	800db0c <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 80049de:	2201      	movs	r2, #1
 80049e0:	0029      	movs	r1, r5
 80049e2:	0020      	movs	r0, r4
 80049e4:	f00d f88a 	bl	8011afc <HAL_GPIO_WritePin>
 80049e8:	2064      	movs	r0, #100	; 0x64
 80049ea:	f009 f88f 	bl	800db0c <StartMilliDelay>
 80049ee:	2200      	movs	r2, #0
 80049f0:	0029      	movs	r1, r5
 80049f2:	0020      	movs	r0, r4
 80049f4:	f00d f882 	bl	8011afc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80049f8:	2064      	movs	r0, #100	; 0x64
 80049fa:	f009 f887 	bl	800db0c <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 80049fe:	2201      	movs	r2, #1
 8004a00:	0029      	movs	r1, r5
 8004a02:	0020      	movs	r0, r4
 8004a04:	f00d f87a 	bl	8011afc <HAL_GPIO_WritePin>
 8004a08:	2064      	movs	r0, #100	; 0x64
 8004a0a:	f009 f87f 	bl	800db0c <StartMilliDelay>
 8004a0e:	2200      	movs	r2, #0
 8004a10:	0029      	movs	r1, r5
 8004a12:	0020      	movs	r0, r4
 8004a14:	f00d f872 	bl	8011afc <HAL_GPIO_WritePin>
	ResetUartORE();
 8004a18:	f002 ff3c 	bl	8007894 <ResetUartORE>
	BOS_initialized = 1;
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <BOS_Init+0x140>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]
}
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8004a24:	2580      	movs	r5, #128	; 0x80
 8004a26:	012d      	lsls	r5, r5, #4
 8004a28:	2490      	movs	r4, #144	; 0x90
 8004a2a:	05e4      	lsls	r4, r4, #23
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	0029      	movs	r1, r5
 8004a30:	0020      	movs	r0, r4
 8004a32:	f00d f863 	bl	8011afc <HAL_GPIO_WritePin>
 8004a36:	20fa      	movs	r0, #250	; 0xfa
 8004a38:	0040      	lsls	r0, r0, #1
 8004a3a:	f009 f867 	bl	800db0c <StartMilliDelay>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	0029      	movs	r1, r5
 8004a42:	0020      	movs	r0, r4
 8004a44:	f00d f85a 	bl	8011afc <HAL_GPIO_WritePin>
 8004a48:	e7e6      	b.n	8004a18 <BOS_Init+0xf8>
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	20000b06 	.word	0x20000b06
 8004a50:	20006a18 	.word	0x20006a18
 8004a54:	e000ed00 	.word	0xe000ed00
 8004a58:	05fa0004 	.word	0x05fa0004
 8004a5c:	200010e4 	.word	0x200010e4
 8004a60:	20000b05 	.word	0x20000b05

08004a64 <GetDateString>:
/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
*/
char *GetDateString(void)
{
 8004a64:	b510      	push	{r4, lr}
 8004a66:	b082      	sub	sp, #8
  static const char formatDateStr[] = "%s %02d/%02d/%04d";
  char *buffer = malloc(30 * sizeof(int8_t));
 8004a68:	201e      	movs	r0, #30
 8004a6a:	f00f f9f3 	bl	8013e54 <malloc>
 8004a6e:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 8004a70:	221e      	movs	r2, #30
 8004a72:	2100      	movs	r1, #0
 8004a74:	f00f fc44 	bl	8014300 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 8004a78:	4908      	ldr	r1, [pc, #32]	; (8004a9c <GetDateString+0x38>)
 8004a7a:	7d8b      	ldrb	r3, [r1, #22]
 8004a7c:	7d0a      	ldrb	r2, [r1, #20]
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	0092      	lsls	r2, r2, #2
 8004a82:	4807      	ldr	r0, [pc, #28]	; (8004aa0 <GetDateString+0x3c>)
 8004a84:	5812      	ldr	r2, [r2, r0]
 8004a86:	8b08      	ldrh	r0, [r1, #24]
 8004a88:	9001      	str	r0, [sp, #4]
 8004a8a:	7d49      	ldrb	r1, [r1, #21]
 8004a8c:	9100      	str	r1, [sp, #0]
 8004a8e:	4905      	ldr	r1, [pc, #20]	; (8004aa4 <GetDateString+0x40>)
 8004a90:	0020      	movs	r0, r4
 8004a92:	f00f fe61 	bl	8014758 <sprintf>
  return buffer;
}
 8004a96:	0020      	movs	r0, r4
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd10      	pop	{r4, pc}
 8004a9c:	20006a18 	.word	0x20006a18
 8004aa0:	08019214 	.word	0x08019214
 8004aa4:	08018f50 	.word	0x08018f50

08004aa8 <Bridge>:
/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
*/
BOS_Status Bridge(uint8_t port1, uint8_t port2)
{
 8004aa8:	b500      	push	{lr}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <Bridge+0x24>)
 8004ab0:	7819      	ldrb	r1, [r3, #0]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	9303      	str	r3, [sp, #12]
 8004ab6:	3b02      	subs	r3, #2
 8004ab8:	9302      	str	r3, [sp, #8]
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	3303      	adds	r3, #3
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	000b      	movs	r3, r1
 8004ac2:	f004 fc9f 	bl	8009404 <StartScastDMAStream>
}
 8004ac6:	b005      	add	sp, #20
 8004ac8:	bd00      	pop	{pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	200010e4 	.word	0x200010e4

08004ad0 <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
*/
BOS_Status Unbridge(uint8_t port1, uint8_t port2)
{		
 8004ad0:	b530      	push	{r4, r5, lr}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	0004      	movs	r4, r0
 8004ad6:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9304      	str	r3, [sp, #16]
 8004adc:	9303      	str	r3, [sp, #12]
 8004ade:	9302      	str	r3, [sp, #8]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f7fe fe03 	bl	80036f4 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 8004aee:	1e62      	subs	r2, r4, #1
 8004af0:	00d3      	lsls	r3, r2, #3
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <Unbridge+0x78>)
 8004af8:	589b      	ldr	r3, [r3, r2]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d015      	beq.n	8004b2a <Unbridge+0x5a>
 8004afe:	1e6a      	subs	r2, r5, #1
 8004b00:	00d3      	lsls	r3, r2, #3
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <Unbridge+0x78>)
 8004b08:	589b      	ldr	r3, [r3, r2]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
	else if (streamDMA[port1-1].Instance != 0)
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 8004b0e:	0020      	movs	r0, r4
 8004b10:	f002 fe34 	bl	800777c <SwitchStreamDMAToMsg>
 8004b14:	2000      	movs	r0, #0
 8004b16:	e006      	b.n	8004b26 <Unbridge+0x56>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8004b18:	0020      	movs	r0, r4
 8004b1a:	f002 fe2f 	bl	800777c <SwitchStreamDMAToMsg>
 8004b1e:	0028      	movs	r0, r5
 8004b20:	f002 fe2c 	bl	800777c <SwitchStreamDMAToMsg>
 8004b24:	2000      	movs	r0, #0
	else if (streamDMA[port2-1].Instance != 0)
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
	else {return BOS_ERR_WrongValue;}
}
 8004b26:	b007      	add	sp, #28
 8004b28:	bd30      	pop	{r4, r5, pc}
	else if (streamDMA[port2-1].Instance != 0)
 8004b2a:	1e6a      	subs	r2, r5, #1
 8004b2c:	00d3      	lsls	r3, r2, #3
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4a05      	ldr	r2, [pc, #20]	; (8004b48 <Unbridge+0x78>)
 8004b34:	589b      	ldr	r3, [r3, r2]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 8004b3a:	0028      	movs	r0, r5
 8004b3c:	f002 fe1e 	bl	800777c <SwitchStreamDMAToMsg>
 8004b40:	2000      	movs	r0, #0
 8004b42:	e7f0      	b.n	8004b26 <Unbridge+0x56>
	else {return BOS_ERR_WrongValue;}
 8004b44:	2068      	movs	r0, #104	; 0x68
 8004b46:	e7ee      	b.n	8004b26 <Unbridge+0x56>
 8004b48:	200019e8 	.word	0x200019e8

08004b4c <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	0005      	movs	r5, r0
	for(int i = 0; string[i]; i++){
 8004b50:	7804      	ldrb	r4, [r0, #0]
 8004b52:	2c00      	cmp	r4, #0
 8004b54:	d010      	beq.n	8004b78 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 8004b56:	2603      	movs	r6, #3
 8004b58:	e004      	b.n	8004b64 <StringToLowerCase+0x18>
 8004b5a:	702a      	strb	r2, [r5, #0]
 8004b5c:	3501      	adds	r5, #1
	for(int i = 0; string[i]; i++){
 8004b5e:	782c      	ldrb	r4, [r5, #0]
 8004b60:	2c00      	cmp	r4, #0
 8004b62:	d009      	beq.n	8004b78 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 8004b64:	f00f f968 	bl	8013e38 <__locale_ctype_ptr>
 8004b68:	1900      	adds	r0, r0, r4
 8004b6a:	7843      	ldrb	r3, [r0, #1]
 8004b6c:	4033      	ands	r3, r6
 8004b6e:	0022      	movs	r2, r4
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d1f2      	bne.n	8004b5a <StringToLowerCase+0xe>
 8004b74:	3220      	adds	r2, #32
 8004b76:	e7f0      	b.n	8004b5a <StringToLowerCase+0xe>
	}
}
 8004b78:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b7c <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8004b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7e:	46c6      	mov	lr, r8
 8004b80:	b500      	push	{lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8004b86:	4bdc      	ldr	r3, [pc, #880]	; (8004ef8 <ParseSnippetCondition+0x37c>)
 8004b88:	781c      	ldrb	r4, [r3, #0]
 8004b8a:	2c05      	cmp	r4, #5
 8004b8c:	d100      	bne.n	8004b90 <ParseSnippetCondition+0x14>
 8004b8e:	e210      	b.n	8004fb2 <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 8004b90:	49da      	ldr	r1, [pc, #872]	; (8004efc <ParseSnippetCondition+0x380>)
 8004b92:	00a3      	lsls	r3, r4, #2
 8004b94:	191a      	adds	r2, r3, r4
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	2000      	movs	r0, #0
 8004b9a:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8004b9c:	191a      	adds	r2, r3, r4
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	188a      	adds	r2, r1, r2
 8004ba2:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8004ba4:	1918      	adds	r0, r3, r4
 8004ba6:	0080      	lsls	r0, r0, #2
 8004ba8:	3002      	adds	r0, #2
 8004baa:	1840      	adds	r0, r0, r1
 8004bac:	2204      	movs	r2, #4
 8004bae:	2100      	movs	r1, #0
 8004bb0:	f00f fba6 	bl	8014300 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8004bb4:	782b      	ldrb	r3, [r5, #0]
 8004bb6:	2b62      	cmp	r3, #98	; 0x62
 8004bb8:	d102      	bne.n	8004bc0 <ParseSnippetCondition+0x44>
 8004bba:	78ab      	ldrb	r3, [r5, #2]
 8004bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8004bbe:	d032      	beq.n	8004c26 <ParseSnippetCondition+0xaa>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 8004bc0:	4ecf      	ldr	r6, [pc, #828]	; (8004f00 <ParseSnippetCondition+0x384>)
 8004bc2:	0029      	movs	r1, r5
 8004bc4:	0030      	movs	r0, r6
 8004bc6:	f00f fe03 	bl	80147d0 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8004bca:	4cce      	ldr	r4, [pc, #824]	; (8004f04 <ParseSnippetCondition+0x388>)
 8004bcc:	0021      	movs	r1, r4
 8004bce:	0030      	movs	r0, r6
 8004bd0:	f010 fc7e 	bl	80154d0 <strtok>
 8004bd4:	0005      	movs	r5, r0
		secondPart = strtok ( NULL, " ");
 8004bd6:	0021      	movs	r1, r4
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f010 fc79 	bl	80154d0 <strtok>
 8004bde:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 8004be0:	0021      	movs	r1, r4
 8004be2:	2000      	movs	r0, #0
 8004be4:	f010 fc74 	bl	80154d0 <strtok>
 8004be8:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 8004bea:	2d00      	cmp	r5, #0
 8004bec:	d100      	bne.n	8004bf0 <ParseSnippetCondition+0x74>
 8004bee:	e1e5      	b.n	8004fbc <ParseSnippetCondition+0x440>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8004bf0:	0028      	movs	r0, r5
 8004bf2:	f7fe ffa3 	bl	8003b3c <IsModuleParameter>
 8004bf6:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004bf8:	d100      	bne.n	8004bfc <ParseSnippetCondition+0x80>
 8004bfa:	e18f      	b.n	8004f1c <ParseSnippetCondition+0x3a0>
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	d000      	beq.n	8004c02 <ParseSnippetCondition+0x86>
 8004c00:	e18e      	b.n	8004f20 <ParseSnippetCondition+0x3a4>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 8004c02:	2067      	movs	r0, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004c04:	2c00      	cmp	r4, #0
 8004c06:	d000      	beq.n	8004c0a <ParseSnippetCondition+0x8e>
 8004c08:	e1d4      	b.n	8004fb4 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 8004c0a:	4cbb      	ldr	r4, [pc, #748]	; (8004ef8 <ParseSnippetCondition+0x37c>)
 8004c0c:	7823      	ldrb	r3, [r4, #0]
 8004c0e:	49bb      	ldr	r1, [pc, #748]	; (8004efc <ParseSnippetCondition+0x380>)
 8004c10:	009a      	lsls	r2, r3, #2
 8004c12:	18d0      	adds	r0, r2, r3
 8004c14:	0080      	lsls	r0, r0, #2
 8004c16:	3602      	adds	r6, #2
 8004c18:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004c1a:	180a      	adds	r2, r1, r0
 8004c1c:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004c1e:	3301      	adds	r3, #1
 8004c20:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 8004c22:	2000      	movs	r0, #0
 8004c24:	e1c6      	b.n	8004fb4 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004c26:	786e      	ldrb	r6, [r5, #1]
 8004c28:	3e30      	subs	r6, #48	; 0x30
 8004c2a:	b2f6      	uxtb	r6, r6
	BOS_Status status = BOS_OK;
 8004c2c:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004c2e:	2e06      	cmp	r6, #6
 8004c30:	d900      	bls.n	8004c34 <ParseSnippetCondition+0xb8>
 8004c32:	e1bf      	b.n	8004fb4 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004c34:	4ab1      	ldr	r2, [pc, #708]	; (8004efc <ParseSnippetCondition+0x380>)
 8004c36:	00a3      	lsls	r3, r4, #2
 8004c38:	1919      	adds	r1, r3, r4
 8004c3a:	0089      	lsls	r1, r1, #2
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 8004c40:	1853      	adds	r3, r2, r1
 8004c42:	2200      	movs	r2, #0
 8004c44:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8004c46:	709e      	strb	r6, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8004c48:	1cef      	adds	r7, r5, #3
 8004c4a:	3207      	adds	r2, #7
 8004c4c:	49ae      	ldr	r1, [pc, #696]	; (8004f08 <ParseSnippetCondition+0x38c>)
 8004c4e:	0038      	movs	r0, r7
 8004c50:	f00f fdc6 	bl	80147e0 <strncmp>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d121      	bne.n	8004c9c <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8004c58:	00a3      	lsls	r3, r4, #2
 8004c5a:	191c      	adds	r4, r3, r4
 8004c5c:	00a4      	lsls	r4, r4, #2
 8004c5e:	4ba7      	ldr	r3, [pc, #668]	; (8004efc <ParseSnippetCondition+0x380>)
 8004c60:	191c      	adds	r4, r3, r4
 8004c62:	2305      	movs	r3, #5
 8004c64:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004c66:	00f2      	lsls	r2, r6, #3
 8004c68:	1992      	adds	r2, r2, r6
 8004c6a:	4ba8      	ldr	r3, [pc, #672]	; (8004f0c <ParseSnippetCondition+0x390>)
 8004c6c:	189b      	adds	r3, r3, r2
 8004c6e:	7a1b      	ldrb	r3, [r3, #8]
 8004c70:	07db      	lsls	r3, r3, #31
 8004c72:	d504      	bpl.n	8004c7e <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004c74:	4aa0      	ldr	r2, [pc, #640]	; (8004ef8 <ParseSnippetCondition+0x37c>)
 8004c76:	7813      	ldrb	r3, [r2, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	7013      	strb	r3, [r2, #0]
 8004c7c:	e19a      	b.n	8004fb4 <ParseSnippetCondition+0x438>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004c7e:	2301      	movs	r3, #1
 8004c80:	9305      	str	r3, [sp, #20]
 8004c82:	2300      	movs	r3, #0
 8004c84:	9304      	str	r3, [sp, #16]
 8004c86:	9303      	str	r3, [sp, #12]
 8004c88:	9302      	str	r3, [sp, #8]
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2101      	movs	r1, #1
 8004c92:	0030      	movs	r0, r6
 8004c94:	f003 fee0 	bl	8008a58 <SetButtonEvents>
				status = BOS_OK;
 8004c98:	2000      	movs	r0, #0
 8004c9a:	e7eb      	b.n	8004c74 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8004c9c:	220e      	movs	r2, #14
 8004c9e:	499c      	ldr	r1, [pc, #624]	; (8004f10 <ParseSnippetCondition+0x394>)
 8004ca0:	0038      	movs	r0, r7
 8004ca2:	f00f fd9d 	bl	80147e0 <strncmp>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d11c      	bne.n	8004ce4 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8004caa:	00a3      	lsls	r3, r4, #2
 8004cac:	191c      	adds	r4, r3, r4
 8004cae:	00a4      	lsls	r4, r4, #2
 8004cb0:	4b92      	ldr	r3, [pc, #584]	; (8004efc <ParseSnippetCondition+0x380>)
 8004cb2:	191c      	adds	r4, r3, r4
 8004cb4:	2306      	movs	r3, #6
 8004cb6:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004cb8:	00f2      	lsls	r2, r6, #3
 8004cba:	1992      	adds	r2, r2, r6
 8004cbc:	4b93      	ldr	r3, [pc, #588]	; (8004f0c <ParseSnippetCondition+0x390>)
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	7a1b      	ldrb	r3, [r3, #8]
 8004cc2:	079b      	lsls	r3, r3, #30
 8004cc4:	d4d6      	bmi.n	8004c74 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	9305      	str	r3, [sp, #20]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9304      	str	r3, [sp, #16]
 8004cce:	9303      	str	r3, [sp, #12]
 8004cd0:	9302      	str	r3, [sp, #8]
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	2100      	movs	r1, #0
 8004cda:	0030      	movs	r0, r6
 8004cdc:	f003 febc 	bl	8008a58 <SetButtonEvents>
				status = BOS_OK;					
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	e7c7      	b.n	8004c74 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8004ce4:	220c      	movs	r2, #12
 8004ce6:	498b      	ldr	r1, [pc, #556]	; (8004f14 <ParseSnippetCondition+0x398>)
 8004ce8:	0038      	movs	r0, r7
 8004cea:	f00f fd79 	bl	80147e0 <strncmp>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d17a      	bne.n	8004de8 <ParseSnippetCondition+0x26c>
				if (!button[port].pressedX1Sec) {	
 8004cf2:	00f2      	lsls	r2, r6, #3
 8004cf4:	1992      	adds	r2, r2, r6
 8004cf6:	4b85      	ldr	r3, [pc, #532]	; (8004f0c <ParseSnippetCondition+0x390>)
 8004cf8:	189b      	adds	r3, r3, r2
 8004cfa:	789b      	ldrb	r3, [r3, #2]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d030      	beq.n	8004d62 <ParseSnippetCondition+0x1e6>
				} else if (!button[port].pressedX2Sec) {	
 8004d00:	00f2      	lsls	r2, r6, #3
 8004d02:	1992      	adds	r2, r2, r6
 8004d04:	4b81      	ldr	r3, [pc, #516]	; (8004f0c <ParseSnippetCondition+0x390>)
 8004d06:	189b      	adds	r3, r3, r2
 8004d08:	78db      	ldrb	r3, [r3, #3]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04a      	beq.n	8004da4 <ParseSnippetCondition+0x228>
				} else if (!button[port].pressedX3Sec) {	
 8004d0e:	00f2      	lsls	r2, r6, #3
 8004d10:	1992      	adds	r2, r2, r6
 8004d12:	4b7e      	ldr	r3, [pc, #504]	; (8004f0c <ParseSnippetCondition+0x390>)
 8004d14:	189b      	adds	r3, r3, r2
 8004d16:	791b      	ldrb	r3, [r3, #4]
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004d18:	200c      	movs	r0, #12
				} else if (!button[port].pressedX3Sec) {	
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1aa      	bne.n	8004c74 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 8004d1e:	4f77      	ldr	r7, [pc, #476]	; (8004efc <ParseSnippetCondition+0x380>)
 8004d20:	00a3      	lsls	r3, r4, #2
 8004d22:	191b      	adds	r3, r3, r4
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	220b      	movs	r2, #11
 8004d2a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004d2c:	0028      	movs	r0, r5
 8004d2e:	300f      	adds	r0, #15
 8004d30:	f00f f84d 	bl	8013dce <atoi>
 8004d34:	b2c0      	uxtb	r0, r0
 8004d36:	4b70      	ldr	r3, [pc, #448]	; (8004ef8 <ParseSnippetCondition+0x37c>)
 8004d38:	781a      	ldrb	r2, [r3, #0]
 8004d3a:	0093      	lsls	r3, r2, #2
 8004d3c:	189b      	adds	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	18ff      	adds	r7, r7, r3
 8004d42:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004d44:	2301      	movs	r3, #1
 8004d46:	9305      	str	r3, [sp, #20]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9304      	str	r3, [sp, #16]
 8004d4c:	9303      	str	r3, [sp, #12]
 8004d4e:	9302      	str	r3, [sp, #8]
 8004d50:	9001      	str	r0, [sp, #4]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2100      	movs	r1, #0
 8004d58:	0030      	movs	r0, r6
 8004d5a:	f003 fe7d 	bl	8008a58 <SetButtonEvents>
					status = BOS_OK;	
 8004d5e:	2000      	movs	r0, #0
 8004d60:	e788      	b.n	8004c74 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8004d62:	4f66      	ldr	r7, [pc, #408]	; (8004efc <ParseSnippetCondition+0x380>)
 8004d64:	00a3      	lsls	r3, r4, #2
 8004d66:	191b      	adds	r3, r3, r4
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2209      	movs	r2, #9
 8004d6e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004d70:	0028      	movs	r0, r5
 8004d72:	300f      	adds	r0, #15
 8004d74:	f00f f82b 	bl	8013dce <atoi>
 8004d78:	b2c3      	uxtb	r3, r0
 8004d7a:	4a5f      	ldr	r2, [pc, #380]	; (8004ef8 <ParseSnippetCondition+0x37c>)
 8004d7c:	7811      	ldrb	r1, [r2, #0]
 8004d7e:	008a      	lsls	r2, r1, #2
 8004d80:	1852      	adds	r2, r2, r1
 8004d82:	0092      	lsls	r2, r2, #2
 8004d84:	18bf      	adds	r7, r7, r2
 8004d86:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004d88:	2201      	movs	r2, #1
 8004d8a:	9205      	str	r2, [sp, #20]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	9204      	str	r2, [sp, #16]
 8004d90:	9203      	str	r2, [sp, #12]
 8004d92:	9202      	str	r2, [sp, #8]
 8004d94:	9201      	str	r2, [sp, #4]
 8004d96:	9200      	str	r2, [sp, #0]
 8004d98:	2100      	movs	r1, #0
 8004d9a:	0030      	movs	r0, r6
 8004d9c:	f003 fe5c 	bl	8008a58 <SetButtonEvents>
					status = BOS_OK;
 8004da0:	2000      	movs	r0, #0
 8004da2:	e767      	b.n	8004c74 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 8004da4:	4f55      	ldr	r7, [pc, #340]	; (8004efc <ParseSnippetCondition+0x380>)
 8004da6:	00a3      	lsls	r3, r4, #2
 8004da8:	191b      	adds	r3, r3, r4
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	220a      	movs	r2, #10
 8004db0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004db2:	0028      	movs	r0, r5
 8004db4:	300f      	adds	r0, #15
 8004db6:	f00f f80a 	bl	8013dce <atoi>
 8004dba:	b2c0      	uxtb	r0, r0
 8004dbc:	4b4e      	ldr	r3, [pc, #312]	; (8004ef8 <ParseSnippetCondition+0x37c>)
 8004dbe:	781a      	ldrb	r2, [r3, #0]
 8004dc0:	0093      	lsls	r3, r2, #2
 8004dc2:	189b      	adds	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	18ff      	adds	r7, r7, r3
 8004dc8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004dca:	2301      	movs	r3, #1
 8004dcc:	9305      	str	r3, [sp, #20]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	9303      	str	r3, [sp, #12]
 8004dd4:	9302      	str	r3, [sp, #8]
 8004dd6:	9301      	str	r3, [sp, #4]
 8004dd8:	9000      	str	r0, [sp, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2100      	movs	r1, #0
 8004dde:	0030      	movs	r0, r6
 8004de0:	f003 fe3a 	bl	8008a58 <SetButtonEvents>
					status = BOS_OK;		
 8004de4:	2000      	movs	r0, #0
 8004de6:	e745      	b.n	8004c74 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004de8:	220d      	movs	r2, #13
 8004dea:	494b      	ldr	r1, [pc, #300]	; (8004f18 <ParseSnippetCondition+0x39c>)
 8004dec:	0038      	movs	r0, r7
 8004dee:	f00f fcf7 	bl	80147e0 <strncmp>
 8004df2:	0003      	movs	r3, r0
	BOS_Status status = BOS_OK;
 8004df4:	2000      	movs	r0, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d000      	beq.n	8004dfc <ParseSnippetCondition+0x280>
 8004dfa:	e73b      	b.n	8004c74 <ParseSnippetCondition+0xf8>
				if (!button[port].releasedY1Sec) {	
 8004dfc:	00f2      	lsls	r2, r6, #3
 8004dfe:	1992      	adds	r2, r2, r6
 8004e00:	4b42      	ldr	r3, [pc, #264]	; (8004f0c <ParseSnippetCondition+0x390>)
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	795b      	ldrb	r3, [r3, #5]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d031      	beq.n	8004e6e <ParseSnippetCondition+0x2f2>
				} else if (!button[port].releasedY2Sec) {	
 8004e0a:	00f2      	lsls	r2, r6, #3
 8004e0c:	1992      	adds	r2, r2, r6
 8004e0e:	4b3f      	ldr	r3, [pc, #252]	; (8004f0c <ParseSnippetCondition+0x390>)
 8004e10:	189b      	adds	r3, r3, r2
 8004e12:	799b      	ldrb	r3, [r3, #6]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d04c      	beq.n	8004eb2 <ParseSnippetCondition+0x336>
				} else if (!button[port].releasedY3Sec) {	
 8004e18:	00f2      	lsls	r2, r6, #3
 8004e1a:	1992      	adds	r2, r2, r6
 8004e1c:	4b3b      	ldr	r3, [pc, #236]	; (8004f0c <ParseSnippetCondition+0x390>)
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	79db      	ldrb	r3, [r3, #7]
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004e22:	200d      	movs	r0, #13
				} else if (!button[port].releasedY3Sec) {	
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d000      	beq.n	8004e2a <ParseSnippetCondition+0x2ae>
 8004e28:	e724      	b.n	8004c74 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8004e2a:	4f34      	ldr	r7, [pc, #208]	; (8004efc <ParseSnippetCondition+0x380>)
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	4698      	mov	r8, r3
 8004e30:	435c      	muls	r4, r3
 8004e32:	193c      	adds	r4, r7, r4
 8004e34:	3b06      	subs	r3, #6
 8004e36:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004e38:	0028      	movs	r0, r5
 8004e3a:	3010      	adds	r0, #16
 8004e3c:	f00e ffc7 	bl	8013dce <atoi>
 8004e40:	b2c0      	uxtb	r0, r0
 8004e42:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <ParseSnippetCondition+0x37c>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	4642      	mov	r2, r8
 8004e48:	4353      	muls	r3, r2
 8004e4a:	18ff      	adds	r7, r7, r3
 8004e4c:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 8004e4e:	2301      	movs	r3, #1
 8004e50:	9305      	str	r3, [sp, #20]
 8004e52:	9004      	str	r0, [sp, #16]
 8004e54:	2400      	movs	r4, #0
 8004e56:	9403      	str	r4, [sp, #12]
 8004e58:	9402      	str	r4, [sp, #8]
 8004e5a:	9401      	str	r4, [sp, #4]
 8004e5c:	9400      	str	r4, [sp, #0]
 8004e5e:	0023      	movs	r3, r4
 8004e60:	0022      	movs	r2, r4
 8004e62:	0021      	movs	r1, r4
 8004e64:	0030      	movs	r0, r6
 8004e66:	f003 fdf7 	bl	8008a58 <SetButtonEvents>
					status = BOS_OK;	
 8004e6a:	0020      	movs	r0, r4
 8004e6c:	e702      	b.n	8004c74 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 8004e6e:	4f23      	ldr	r7, [pc, #140]	; (8004efc <ParseSnippetCondition+0x380>)
 8004e70:	00a3      	lsls	r3, r4, #2
 8004e72:	191b      	adds	r3, r3, r4
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	220c      	movs	r2, #12
 8004e7a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004e7c:	0028      	movs	r0, r5
 8004e7e:	3010      	adds	r0, #16
 8004e80:	f00e ffa5 	bl	8013dce <atoi>
 8004e84:	b2c0      	uxtb	r0, r0
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <ParseSnippetCondition+0x37c>)
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	0093      	lsls	r3, r2, #2
 8004e8c:	189b      	adds	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	18ff      	adds	r7, r7, r3
 8004e92:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8004e94:	2301      	movs	r3, #1
 8004e96:	9305      	str	r3, [sp, #20]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	9303      	str	r3, [sp, #12]
 8004e9e:	9002      	str	r0, [sp, #8]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	0030      	movs	r0, r6
 8004eaa:	f003 fdd5 	bl	8008a58 <SetButtonEvents>
					status = BOS_OK;
 8004eae:	2000      	movs	r0, #0
 8004eb0:	e6e0      	b.n	8004c74 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 8004eb2:	4f12      	ldr	r7, [pc, #72]	; (8004efc <ParseSnippetCondition+0x380>)
 8004eb4:	00a3      	lsls	r3, r4, #2
 8004eb6:	191b      	adds	r3, r3, r4
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	220d      	movs	r2, #13
 8004ebe:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004ec0:	0028      	movs	r0, r5
 8004ec2:	3010      	adds	r0, #16
 8004ec4:	f00e ff83 	bl	8013dce <atoi>
 8004ec8:	b2c0      	uxtb	r0, r0
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <ParseSnippetCondition+0x37c>)
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	0093      	lsls	r3, r2, #2
 8004ed0:	189b      	adds	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	18ff      	adds	r7, r7, r3
 8004ed6:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8004ed8:	2301      	movs	r3, #1
 8004eda:	9305      	str	r3, [sp, #20]
 8004edc:	2300      	movs	r3, #0
 8004ede:	9304      	str	r3, [sp, #16]
 8004ee0:	9003      	str	r0, [sp, #12]
 8004ee2:	9302      	str	r3, [sp, #8]
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2100      	movs	r1, #0
 8004eec:	0030      	movs	r0, r6
 8004eee:	f003 fdb3 	bl	8008a58 <SetButtonEvents>
					status = BOS_OK;		
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	e6be      	b.n	8004c74 <ParseSnippetCondition+0xf8>
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	2000128b 	.word	0x2000128b
 8004efc:	20006a34 	.word	0x20006a34
 8004f00:	200011f0 	.word	0x200011f0
 8004f04:	08018dac 	.word	0x08018dac
 8004f08:	0801a2a8 	.word	0x0801a2a8
 8004f0c:	20001574 	.word	0x20001574
 8004f10:	08019418 	.word	0x08019418
 8004f14:	08019428 	.word	0x08019428
 8004f18:	08019438 	.word	0x08019438
			else if (secondPart != NULL && thirdPart != NULL) 
 8004f1c:	2e00      	cmp	r6, #0
 8004f1e:	d04f      	beq.n	8004fc0 <ParseSnippetCondition+0x444>
 8004f20:	2c00      	cmp	r4, #0
 8004f22:	d04f      	beq.n	8004fc4 <ParseSnippetCondition+0x448>
				modPar2 = IsModuleParameter(thirdPart);
 8004f24:	0020      	movs	r0, r4
 8004f26:	f7fe fe09 	bl	8003b3c <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d024      	beq.n	8004f78 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004f2e:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <ParseSnippetCondition+0x450>)
 8004f30:	781c      	ldrb	r4, [r3, #0]
 8004f32:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <ParseSnippetCondition+0x454>)
 8004f34:	00a3      	lsls	r3, r4, #2
 8004f36:	1919      	adds	r1, r3, r4
 8004f38:	0089      	lsls	r1, r1, #2
 8004f3a:	2704      	movs	r7, #4
 8004f3c:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004f3e:	1919      	adds	r1, r3, r4
 8004f40:	0089      	lsls	r1, r1, #2
 8004f42:	1851      	adds	r1, r2, r1
 8004f44:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8004f46:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8004f48:	4d20      	ldr	r5, [pc, #128]	; (8004fcc <ParseSnippetCondition+0x450>)
 8004f4a:	782c      	ldrb	r4, [r5, #0]
 8004f4c:	0030      	movs	r0, r6
 8004f4e:	f7fe fe0b 	bl	8003b68 <IsMathOperator>
 8004f52:	491f      	ldr	r1, [pc, #124]	; (8004fd0 <ParseSnippetCondition+0x454>)
 8004f54:	00a3      	lsls	r3, r4, #2
 8004f56:	191b      	adds	r3, r3, r4
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	18cb      	adds	r3, r1, r3
 8004f5c:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004f5e:	782a      	ldrb	r2, [r5, #0]
 8004f60:	0093      	lsls	r3, r2, #2
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	18cb      	adds	r3, r1, r3
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d02c      	beq.n	8004fc8 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004f6e:	3201      	adds	r2, #1
 8004f70:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <ParseSnippetCondition+0x450>)
 8004f72:	701a      	strb	r2, [r3, #0]
				return BOS_OK;				
 8004f74:	2000      	movs	r0, #0
 8004f76:	e01d      	b.n	8004fb4 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004f78:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <ParseSnippetCondition+0x450>)
 8004f7a:	4698      	mov	r8, r3
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	4f14      	ldr	r7, [pc, #80]	; (8004fd0 <ParseSnippetCondition+0x454>)
 8004f80:	0093      	lsls	r3, r2, #2
 8004f82:	1899      	adds	r1, r3, r2
 8004f84:	0089      	lsls	r1, r1, #2
 8004f86:	2003      	movs	r0, #3
 8004f88:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	70dd      	strb	r5, [r3, #3]
					float constant = atof(thirdPart);
 8004f8e:	0020      	movs	r0, r4
 8004f90:	f00e ff18 	bl	8013dc4 <atof>
 8004f94:	f7fd ff32 	bl	8002dfc <__aeabi_d2f>
 8004f98:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004f9a:	4643      	mov	r3, r8
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	0098      	lsls	r0, r3, #2
 8004fa0:	18c0      	adds	r0, r0, r3
 8004fa2:	0080      	lsls	r0, r0, #2
 8004fa4:	3006      	adds	r0, #6
 8004fa6:	19c0      	adds	r0, r0, r7
 8004fa8:	2204      	movs	r2, #4
 8004faa:	a907      	add	r1, sp, #28
 8004fac:	f00f f99f 	bl	80142ee <memcpy>
 8004fb0:	e7ca      	b.n	8004f48 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004fb2:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004fb4:	b008      	add	sp, #32
 8004fb6:	bc04      	pop	{r2}
 8004fb8:	4690      	mov	r8, r2
 8004fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004fbc:	2067      	movs	r0, #103	; 0x67
 8004fbe:	e7f9      	b.n	8004fb4 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004fc0:	2067      	movs	r0, #103	; 0x67
 8004fc2:	e7f7      	b.n	8004fb4 <ParseSnippetCondition+0x438>
 8004fc4:	2067      	movs	r0, #103	; 0x67
 8004fc6:	e7f5      	b.n	8004fb4 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004fc8:	2067      	movs	r0, #103	; 0x67
 8004fca:	e7f3      	b.n	8004fb4 <ParseSnippetCondition+0x438>
 8004fcc:	2000128b 	.word	0x2000128b
 8004fd0:	20006a34 	.word	0x20006a34

08004fd4 <AddSnippet>:
{
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	000c      	movs	r4, r1
	switch (code)
 8004fd8:	2802      	cmp	r0, #2
 8004fda:	d017      	beq.n	800500c <AddSnippet+0x38>
 8004fdc:	2803      	cmp	r0, #3
 8004fde:	d003      	beq.n	8004fe8 <AddSnippet+0x14>
 8004fe0:	2801      	cmp	r0, #1
 8004fe2:	d00f      	beq.n	8005004 <AddSnippet+0x30>
	return BOS_OK;
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	e00c      	b.n	8005002 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets-1].state = true;
 8004fe8:	4b35      	ldr	r3, [pc, #212]	; (80050c0 <AddSnippet+0xec>)
 8004fea:	781a      	ldrb	r2, [r3, #0]
 8004fec:	3a01      	subs	r2, #1
 8004fee:	0093      	lsls	r3, r2, #2
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4a33      	ldr	r2, [pc, #204]	; (80050c4 <AddSnippet+0xf0>)
 8004ff6:	18d3      	adds	r3, r2, r3
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004ffc:	f006 ff1c 	bl	800be38 <SaveToRO>
	return BOS_OK;
 8005000:	2000      	movs	r0, #0
}
 8005002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8005004:	0008      	movs	r0, r1
 8005006:	f7ff fdb9 	bl	8004b7c <ParseSnippetCondition>
 800500a:	e7fa      	b.n	8005002 <AddSnippet+0x2e>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 800500c:	4b2c      	ldr	r3, [pc, #176]	; (80050c0 <AddSnippet+0xec>)
 800500e:	781d      	ldrb	r5, [r3, #0]
 8005010:	3d01      	subs	r5, #1
 8005012:	00ab      	lsls	r3, r5, #2
 8005014:	195b      	adds	r3, r3, r5
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4a2a      	ldr	r2, [pc, #168]	; (80050c4 <AddSnippet+0xf0>)
 800501a:	18d3      	adds	r3, r2, r3
 800501c:	68de      	ldr	r6, [r3, #12]
 800501e:	2e00      	cmp	r6, #0
 8005020:	d03d      	beq.n	800509e <AddSnippet+0xca>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8005022:	0030      	movs	r0, r6
 8005024:	f7fb f878 	bl	8000118 <strlen>
 8005028:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 800502a:	0020      	movs	r0, r4
 800502c:	f7fb f874 	bl	8000118 <strlen>
 8005030:	1839      	adds	r1, r7, r0
 8005032:	3102      	adds	r1, #2
 8005034:	0030      	movs	r0, r6
 8005036:	f00f f995 	bl	8014364 <realloc>
 800503a:	4e22      	ldr	r6, [pc, #136]	; (80050c4 <AddSnippet+0xf0>)
 800503c:	00ab      	lsls	r3, r5, #2
 800503e:	195d      	adds	r5, r3, r5
 8005040:	00ad      	lsls	r5, r5, #2
 8005042:	1975      	adds	r5, r6, r5
 8005044:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8005046:	4d1e      	ldr	r5, [pc, #120]	; (80050c0 <AddSnippet+0xec>)
 8005048:	782a      	ldrb	r2, [r5, #0]
 800504a:	3a01      	subs	r2, #1
 800504c:	0093      	lsls	r3, r2, #2
 800504e:	189b      	adds	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	18f3      	adds	r3, r6, r3
 8005054:	1c7a      	adds	r2, r7, #1
 8005056:	68d8      	ldr	r0, [r3, #12]
 8005058:	1880      	adds	r0, r0, r2
 800505a:	0021      	movs	r1, r4
 800505c:	f00f fbb8 	bl	80147d0 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 8005060:	782a      	ldrb	r2, [r5, #0]
 8005062:	3a01      	subs	r2, #1
 8005064:	0093      	lsls	r3, r2, #2
 8005066:	189b      	adds	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	18f6      	adds	r6, r6, r3
 800506c:	68f3      	ldr	r3, [r6, #12]
 800506e:	2213      	movs	r2, #19
 8005070:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8005072:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <AddSnippet+0xec>)
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	3a01      	subs	r2, #1
 8005078:	0093      	lsls	r3, r2, #2
 800507a:	189b      	adds	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4911      	ldr	r1, [pc, #68]	; (80050c4 <AddSnippet+0xf0>)
 8005080:	18cb      	adds	r3, r1, r3
 8005082:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8005084:	2000      	movs	r0, #0
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1bb      	bne.n	8005002 <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 800508a:	0090      	lsls	r0, r2, #2
 800508c:	1880      	adds	r0, r0, r2
 800508e:	0080      	lsls	r0, r0, #2
 8005090:	1840      	adds	r0, r0, r1
 8005092:	2214      	movs	r2, #20
 8005094:	2100      	movs	r1, #0
 8005096:	f00f f933 	bl	8014300 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800509a:	200e      	movs	r0, #14
 800509c:	e7b1      	b.n	8005002 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 800509e:	0008      	movs	r0, r1
 80050a0:	f7fb f83a 	bl	8000118 <strlen>
 80050a4:	3001      	adds	r0, #1
 80050a6:	f00e fed5 	bl	8013e54 <malloc>
 80050aa:	00ab      	lsls	r3, r5, #2
 80050ac:	195d      	adds	r5, r3, r5
 80050ae:	00ad      	lsls	r5, r5, #2
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <AddSnippet+0xf0>)
 80050b2:	195d      	adds	r5, r3, r5
 80050b4:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 80050b6:	0021      	movs	r1, r4
 80050b8:	f00f fb8a 	bl	80147d0 <strcpy>
 80050bc:	e7d9      	b.n	8005072 <AddSnippet+0x9e>
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	2000128b 	.word	0x2000128b
 80050c4:	20006a34 	.word	0x20006a34

080050c8 <CLI_CommandParser>:
{
 80050c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ca:	46de      	mov	lr, fp
 80050cc:	4657      	mov	r7, sl
 80050ce:	464e      	mov	r6, r9
 80050d0:	4645      	mov	r5, r8
 80050d2:	b5e0      	push	{r5, r6, r7, lr}
 80050d4:	b08b      	sub	sp, #44	; 0x2c
 80050d6:	9004      	str	r0, [sp, #16]
 80050d8:	4688      	mov	r8, r1
 80050da:	9203      	str	r2, [sp, #12]
 80050dc:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 80050de:	2209      	movs	r2, #9
 80050e0:	2100      	movs	r1, #0
 80050e2:	a807      	add	r0, sp, #28
 80050e4:	f00f f90c 	bl	8014300 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 80050e8:	4fd5      	ldr	r7, [pc, #852]	; (8005440 <CLI_CommandParser+0x378>)
				if (id == myID) {
 80050ea:	002e      	movs	r6, r5
 80050ec:	e034      	b.n	8005158 <CLI_CommandParser+0x90>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050ee:	2252      	movs	r2, #82	; 0x52
 80050f0:	49d4      	ldr	r1, [pc, #848]	; (8005444 <CLI_CommandParser+0x37c>)
 80050f2:	0020      	movs	r0, r4
 80050f4:	f00f f8fb 	bl	80142ee <memcpy>
				recordSnippet = 0;
 80050f8:	4bd1      	ldr	r3, [pc, #836]	; (8005440 <CLI_CommandParser+0x378>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e044      	b.n	800518a <CLI_CommandParser+0xc2>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 8005100:	2206      	movs	r2, #6
 8005102:	49d1      	ldr	r1, [pc, #836]	; (8005448 <CLI_CommandParser+0x380>)
 8005104:	9803      	ldr	r0, [sp, #12]
 8005106:	f00f fb6b 	bl	80147e0 <strncmp>
 800510a:	2800      	cmp	r0, #0
 800510c:	d053      	beq.n	80051b6 <CLI_CommandParser+0xee>
		else if (recordSnippet == SNIPPET_COMMANDS)
 800510e:	2d02      	cmp	r5, #2
 8005110:	d05e      	beq.n	80051d0 <CLI_CommandParser+0x108>
			loc = strchr( ( char * ) cInputString, '.');
 8005112:	212e      	movs	r1, #46	; 0x2e
 8005114:	9803      	ldr	r0, [sp, #12]
 8005116:	f00f fb4d 	bl	80147b4 <strchr>
 800511a:	1e05      	subs	r5, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 800511c:	d006      	beq.n	800512c <CLI_CommandParser+0x64>
 800511e:	3803      	subs	r0, #3
 8005120:	2203      	movs	r2, #3
 8005122:	49ca      	ldr	r1, [pc, #808]	; (800544c <CLI_CommandParser+0x384>)
 8005124:	f00f fb5c 	bl	80147e0 <strncmp>
 8005128:	2800      	cmp	r0, #0
 800512a:	d160      	bne.n	80051ee <CLI_CommandParser+0x126>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 800512c:	2299      	movs	r2, #153	; 0x99
 800512e:	0092      	lsls	r2, r2, #2
 8005130:	0021      	movs	r1, r4
 8005132:	9803      	ldr	r0, [sp, #12]
 8005134:	f009 fc82 	bl	800ea3c <FreeRTOS_CLIProcessCommand>
 8005138:	0006      	movs	r6, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 800513a:	7823      	ldrb	r3, [r4, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d000      	beq.n	8005142 <CLI_CommandParser+0x7a>
 8005140:	e16f      	b.n	8005422 <CLI_CommandParser+0x35a>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005142:	0020      	movs	r0, r4
 8005144:	f7fa ffe8 	bl	8000118 <strlen>
 8005148:	0002      	movs	r2, r0
 800514a:	2100      	movs	r1, #0
 800514c:	0020      	movs	r0, r4
 800514e:	f00f f8d7 	bl	8014300 <memset>
	} while( xReturned != pdFALSE );
 8005152:	2e00      	cmp	r6, #0
 8005154:	d100      	bne.n	8005158 <CLI_CommandParser+0x90>
 8005156:	e1ab      	b.n	80054b0 <CLI_CommandParser+0x3e8>
		StringToLowerCase(( char * )cInputString);
 8005158:	9803      	ldr	r0, [sp, #12]
 800515a:	f7ff fcf7 	bl	8004b4c <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 800515e:	783d      	ldrb	r5, [r7, #0]
 8005160:	2d00      	cmp	r5, #0
 8005162:	d1cd      	bne.n	8005100 <CLI_CommandParser+0x38>
 8005164:	2203      	movs	r2, #3
 8005166:	49ba      	ldr	r1, [pc, #744]	; (8005450 <CLI_CommandParser+0x388>)
 8005168:	9803      	ldr	r0, [sp, #12]
 800516a:	f00f fb39 	bl	80147e0 <strncmp>
 800516e:	2800      	cmp	r0, #0
 8005170:	d1cf      	bne.n	8005112 <CLI_CommandParser+0x4a>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	1cd9      	adds	r1, r3, #3
 8005176:	3001      	adds	r0, #1
 8005178:	f7ff ff2c 	bl	8004fd4 <AddSnippet>
 800517c:	2800      	cmp	r0, #0
 800517e:	d1b6      	bne.n	80050ee <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8005180:	4baf      	ldr	r3, [pc, #700]	; (8005440 <CLI_CommandParser+0x378>)
 8005182:	2202      	movs	r2, #2
 8005184:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8005186:	230d      	movs	r3, #13
 8005188:	7023      	strb	r3, [r4, #0]
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 800518a:	7823      	ldrb	r3, [r4, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d100      	bne.n	8005192 <CLI_CommandParser+0xca>
 8005190:	e186      	b.n	80054a0 <CLI_CommandParser+0x3d8>
 8005192:	4643      	mov	r3, r8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d100      	bne.n	800519a <CLI_CommandParser+0xd2>
 8005198:	e19d      	b.n	80054d6 <CLI_CommandParser+0x40e>
 800519a:	2600      	movs	r6, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 800519c:	0020      	movs	r0, r4
 800519e:	f7fa ffbb 	bl	8000118 <strlen>
 80051a2:	b282      	uxth	r2, r0
 80051a4:	2301      	movs	r3, #1
 80051a6:	425b      	negs	r3, r3
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	3333      	adds	r3, #51	; 0x33
 80051ac:	0021      	movs	r1, r4
 80051ae:	9804      	ldr	r0, [sp, #16]
 80051b0:	f008 fea8 	bl	800df04 <writePxMutex>
 80051b4:	e7c5      	b.n	8005142 <CLI_CommandParser+0x7a>
			recordSnippet = 0;
 80051b6:	4ba2      	ldr	r3, [pc, #648]	; (8005440 <CLI_CommandParser+0x378>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 80051bc:	49a5      	ldr	r1, [pc, #660]	; (8005454 <CLI_CommandParser+0x38c>)
 80051be:	3003      	adds	r0, #3
 80051c0:	f7ff ff08 	bl	8004fd4 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 80051c4:	2241      	movs	r2, #65	; 0x41
 80051c6:	49a4      	ldr	r1, [pc, #656]	; (8005458 <CLI_CommandParser+0x390>)
 80051c8:	0020      	movs	r0, r4
 80051ca:	f00f f890 	bl	80142ee <memcpy>
			xReturned = pdFALSE;
 80051ce:	e7dc      	b.n	800518a <CLI_CommandParser+0xc2>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 80051d0:	9903      	ldr	r1, [sp, #12]
 80051d2:	2002      	movs	r0, #2
 80051d4:	f7ff fefe 	bl	8004fd4 <AddSnippet>
 80051d8:	2800      	cmp	r0, #0
 80051da:	d102      	bne.n	80051e2 <CLI_CommandParser+0x11a>
				pcOutputString[0] = '\r';
 80051dc:	230d      	movs	r3, #13
 80051de:	7023      	strb	r3, [r4, #0]
 80051e0:	e7d3      	b.n	800518a <CLI_CommandParser+0xc2>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80051e2:	2252      	movs	r2, #82	; 0x52
 80051e4:	4997      	ldr	r1, [pc, #604]	; (8005444 <CLI_CommandParser+0x37c>)
 80051e6:	0020      	movs	r0, r4
 80051e8:	f00f f881 	bl	80142ee <memcpy>
 80051ec:	e7cd      	b.n	800518a <CLI_CommandParser+0xc2>
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 80051ee:	f00e fe23 	bl	8013e38 <__locale_ctype_ptr>
 80051f2:	786b      	ldrb	r3, [r5, #1]
 80051f4:	18c0      	adds	r0, r0, r3
 80051f6:	7843      	ldrb	r3, [r0, #1]
 80051f8:	075b      	lsls	r3, r3, #29
 80051fa:	d497      	bmi.n	800512c <CLI_CommandParser+0x64>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 80051fc:	9903      	ldr	r1, [sp, #12]
 80051fe:	1a6a      	subs	r2, r5, r1
 8005200:	a807      	add	r0, sp, #28
 8005202:	f00f fafe 	bl	8014802 <strncpy>
				id = GetID(idString);
 8005206:	a807      	add	r0, sp, #28
 8005208:	f7ff f9b2 	bl	8004570 <GetID>
 800520c:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 800520e:	4a93      	ldr	r2, [pc, #588]	; (800545c <CLI_CommandParser+0x394>)
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	4693      	mov	fp, r2
 8005214:	4290      	cmp	r0, r2
 8005216:	d03d      	beq.n	8005294 <CLI_CommandParser+0x1cc>
				}	else if (id == BOS_ERR_WrongName) {		
 8005218:	2864      	cmp	r0, #100	; 0x64
 800521a:	d043      	beq.n	80052a4 <CLI_CommandParser+0x1dc>
				}	else if (id == BOS_ERR_WrongID) {
 800521c:	2866      	cmp	r0, #102	; 0x66
 800521e:	d047      	beq.n	80052b0 <CLI_CommandParser+0x1e8>
				}	else if (id == BOS_BROADCAST) {
 8005220:	28ff      	cmp	r0, #255	; 0xff
 8005222:	d04b      	beq.n	80052bc <CLI_CommandParser+0x1f4>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 8005224:	466b      	mov	r3, sp
 8005226:	7d1b      	ldrb	r3, [r3, #20]
 8005228:	469a      	mov	sl, r3
 800522a:	2bfe      	cmp	r3, #254	; 0xfe
 800522c:	d078      	beq.n	8005320 <CLI_CommandParser+0x258>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 800522e:	3501      	adds	r5, #1
 8005230:	2206      	movs	r2, #6
 8005232:	498b      	ldr	r1, [pc, #556]	; (8005460 <CLI_CommandParser+0x398>)
 8005234:	0028      	movs	r0, r5
 8005236:	f00f fad3 	bl	80147e0 <strncmp>
 800523a:	2800      	cmp	r0, #0
 800523c:	d000      	beq.n	8005240 <CLI_CommandParser+0x178>
 800523e:	e0b4      	b.n	80053aa <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;				
 8005240:	4b88      	ldr	r3, [pc, #544]	; (8005464 <CLI_CommandParser+0x39c>)
 8005242:	2200      	movs	r2, #0
 8005244:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 8005246:	2119      	movs	r1, #25
 8005248:	4650      	mov	r0, sl
 800524a:	f004 f8b5 	bl	80093b8 <SendMessageToModule>
						osDelay(100);
 800524e:	2064      	movs	r0, #100	; 0x64
 8005250:	f009 fb5d 	bl	800e90e <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 8005254:	4b84      	ldr	r3, [pc, #528]	; (8005468 <CLI_CommandParser+0x3a0>)
 8005256:	781a      	ldrb	r2, [r3, #0]
 8005258:	4b80      	ldr	r3, [pc, #512]	; (800545c <CLI_CommandParser+0x394>)
 800525a:	7818      	ldrb	r0, [r3, #0]
 800525c:	2300      	movs	r3, #0
 800525e:	4651      	mov	r1, sl
 8005260:	f7fe fe60 	bl	8003f24 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 8005264:	4b7f      	ldr	r3, [pc, #508]	; (8005464 <CLI_CommandParser+0x39c>)
 8005266:	799b      	ldrb	r3, [r3, #6]
 8005268:	2b60      	cmp	r3, #96	; 0x60
 800526a:	d18e      	bne.n	800518a <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 800526c:	21fa      	movs	r1, #250	; 0xfa
 800526e:	0089      	lsls	r1, r1, #2
 8005270:	2001      	movs	r0, #1
 8005272:	f00a ff1f 	bl	80100b4 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 8005276:	4b7d      	ldr	r3, [pc, #500]	; (800546c <CLI_CommandParser+0x3a4>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d085      	beq.n	800518a <CLI_CommandParser+0xc2>
									++timedoutMsg;
 800527e:	4a7c      	ldr	r2, [pc, #496]	; (8005470 <CLI_CommandParser+0x3a8>)
 8005280:	8813      	ldrh	r3, [r2, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 8005286:	9b05      	ldr	r3, [sp, #20]
 8005288:	0022      	movs	r2, r4
 800528a:	497a      	ldr	r1, [pc, #488]	; (8005474 <CLI_CommandParser+0x3ac>)
 800528c:	0020      	movs	r0, r4
 800528e:	f00f fa63 	bl	8014758 <sprintf>
 8005292:	e77a      	b.n	800518a <CLI_CommandParser+0xc2>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8005294:	2299      	movs	r2, #153	; 0x99
 8005296:	1c68      	adds	r0, r5, #1
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	0021      	movs	r1, r4
 800529c:	f009 fbce 	bl	800ea3c <FreeRTOS_CLIProcessCommand>
 80052a0:	0006      	movs	r6, r0
 80052a2:	e74a      	b.n	800513a <CLI_CommandParser+0x72>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 80052a4:	2227      	movs	r2, #39	; 0x27
 80052a6:	4974      	ldr	r1, [pc, #464]	; (8005478 <CLI_CommandParser+0x3b0>)
 80052a8:	0020      	movs	r0, r4
 80052aa:	f00f f820 	bl	80142ee <memcpy>
 80052ae:	e76c      	b.n	800518a <CLI_CommandParser+0xc2>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 80052b0:	2225      	movs	r2, #37	; 0x25
 80052b2:	4972      	ldr	r1, [pc, #456]	; (800547c <CLI_CommandParser+0x3b4>)
 80052b4:	0020      	movs	r0, r4
 80052b6:	f00f f81a 	bl	80142ee <memcpy>
 80052ba:	e766      	b.n	800518a <CLI_CommandParser+0xc2>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 80052bc:	2219      	movs	r2, #25
 80052be:	2100      	movs	r1, #0
 80052c0:	486f      	ldr	r0, [pc, #444]	; (8005480 <CLI_CommandParser+0x3b8>)
 80052c2:	f00f f81d 	bl	8014300 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 80052c6:	3501      	adds	r5, #1
 80052c8:	9803      	ldr	r0, [sp, #12]
 80052ca:	f7fa ff25 	bl	8000118 <strlen>
 80052ce:	0006      	movs	r6, r0
 80052d0:	ab07      	add	r3, sp, #28
 80052d2:	0018      	movs	r0, r3
 80052d4:	f7fa ff20 	bl	8000118 <strlen>
 80052d8:	1e72      	subs	r2, r6, #1
 80052da:	1a12      	subs	r2, r2, r0
 80052dc:	0029      	movs	r1, r5
 80052de:	4869      	ldr	r0, [pc, #420]	; (8005484 <CLI_CommandParser+0x3bc>)
 80052e0:	f00f fa8f 	bl	8014802 <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 80052e4:	9803      	ldr	r0, [sp, #12]
 80052e6:	f7fa ff17 	bl	8000118 <strlen>
 80052ea:	0006      	movs	r6, r0
 80052ec:	a807      	add	r0, sp, #28
 80052ee:	f7fa ff13 	bl	8000118 <strlen>
 80052f2:	1a33      	subs	r3, r6, r0
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2217      	movs	r2, #23
 80052f8:	21ff      	movs	r1, #255	; 0xff
 80052fa:	4658      	mov	r0, fp
 80052fc:	f004 f834 	bl	8009368 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8005300:	2299      	movs	r2, #153	; 0x99
 8005302:	0092      	lsls	r2, r2, #2
 8005304:	0021      	movs	r1, r4
 8005306:	0028      	movs	r0, r5
 8005308:	f009 fb98 	bl	800ea3c <FreeRTOS_CLIProcessCommand>
 800530c:	0006      	movs	r6, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 800530e:	0020      	movs	r0, r4
 8005310:	f7fa ff02 	bl	8000118 <strlen>
 8005314:	1820      	adds	r0, r4, r0
 8005316:	221d      	movs	r2, #29
 8005318:	495b      	ldr	r1, [pc, #364]	; (8005488 <CLI_CommandParser+0x3c0>)
 800531a:	f00e ffe8 	bl	80142ee <memcpy>
 800531e:	e70c      	b.n	800513a <CLI_CommandParser+0x72>
					group = id >> 8;
 8005320:	9b05      	ldr	r3, [sp, #20]
 8005322:	121b      	asrs	r3, r3, #8
 8005324:	b2db      	uxtb	r3, r3
 8005326:	469a      	mov	sl, r3
 8005328:	4b58      	ldr	r3, [pc, #352]	; (800548c <CLI_CommandParser+0x3c4>)
 800532a:	4699      	mov	r9, r3
 800532c:	4652      	mov	r2, sl
 800532e:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8005330:	2219      	movs	r2, #25
 8005332:	2100      	movs	r1, #0
 8005334:	4852      	ldr	r0, [pc, #328]	; (8005480 <CLI_CommandParser+0x3b8>)
 8005336:	f00e ffe3 	bl	8014300 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 800533a:	1c6b      	adds	r3, r5, #1
 800533c:	9305      	str	r3, [sp, #20]
 800533e:	9803      	ldr	r0, [sp, #12]
 8005340:	f7fa feea 	bl	8000118 <strlen>
 8005344:	0005      	movs	r5, r0
 8005346:	aa07      	add	r2, sp, #28
 8005348:	0010      	movs	r0, r2
 800534a:	f7fa fee5 	bl	8000118 <strlen>
 800534e:	3d01      	subs	r5, #1
 8005350:	1a2a      	subs	r2, r5, r0
 8005352:	9905      	ldr	r1, [sp, #20]
 8005354:	484b      	ldr	r0, [pc, #300]	; (8005484 <CLI_CommandParser+0x3bc>)
 8005356:	f00f fa54 	bl	8014802 <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 800535a:	9803      	ldr	r0, [sp, #12]
 800535c:	f7fa fedc 	bl	8000118 <strlen>
 8005360:	0005      	movs	r5, r0
 8005362:	a807      	add	r0, sp, #28
 8005364:	f7fa fed8 	bl	8000118 <strlen>
 8005368:	1a2b      	subs	r3, r5, r0
 800536a:	b29b      	uxth	r3, r3
 800536c:	2217      	movs	r2, #23
 800536e:	4651      	mov	r1, sl
 8005370:	4658      	mov	r0, fp
 8005372:	f003 fff9 	bl	8009368 <BroadcastMessage>
					if (InGroup(myID, group))
 8005376:	4b39      	ldr	r3, [pc, #228]	; (800545c <CLI_CommandParser+0x394>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	3b01      	subs	r3, #1
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4a44      	ldr	r2, [pc, #272]	; (8005490 <CLI_CommandParser+0x3c8>)
 8005380:	5a9b      	ldrh	r3, [r3, r2]
 8005382:	464a      	mov	r2, r9
 8005384:	7812      	ldrb	r2, [r2, #0]
 8005386:	4113      	asrs	r3, r2
 8005388:	07db      	lsls	r3, r3, #31
 800538a:	d406      	bmi.n	800539a <CLI_CommandParser+0x2d2>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 800538c:	ab07      	add	r3, sp, #28
 800538e:	0022      	movs	r2, r4
 8005390:	4940      	ldr	r1, [pc, #256]	; (8005494 <CLI_CommandParser+0x3cc>)
 8005392:	0020      	movs	r0, r4
 8005394:	f00f f9e0 	bl	8014758 <sprintf>
 8005398:	e6cf      	b.n	800513a <CLI_CommandParser+0x72>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800539a:	2299      	movs	r2, #153	; 0x99
 800539c:	0092      	lsls	r2, r2, #2
 800539e:	0021      	movs	r1, r4
 80053a0:	9805      	ldr	r0, [sp, #20]
 80053a2:	f009 fb4b 	bl	800ea3c <FreeRTOS_CLIProcessCommand>
 80053a6:	0006      	movs	r6, r0
 80053a8:	e7f0      	b.n	800538c <CLI_CommandParser+0x2c4>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 80053aa:	9803      	ldr	r0, [sp, #12]
 80053ac:	f7fa feb4 	bl	8000118 <strlen>
 80053b0:	0006      	movs	r6, r0
 80053b2:	ab07      	add	r3, sp, #28
 80053b4:	0018      	movs	r0, r3
 80053b6:	f7fa feaf 	bl	8000118 <strlen>
 80053ba:	1e72      	subs	r2, r6, #1
 80053bc:	1a12      	subs	r2, r2, r0
 80053be:	0029      	movs	r1, r5
 80053c0:	4830      	ldr	r0, [pc, #192]	; (8005484 <CLI_CommandParser+0x3bc>)
 80053c2:	f00f fa1e 	bl	8014802 <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 80053c6:	9803      	ldr	r0, [sp, #12]
 80053c8:	f7fa fea6 	bl	8000118 <strlen>
 80053cc:	0005      	movs	r5, r0
 80053ce:	a807      	add	r0, sp, #28
 80053d0:	f7fa fea2 	bl	8000118 <strlen>
 80053d4:	3d01      	subs	r5, #1
 80053d6:	1a2a      	subs	r2, r5, r0
 80053d8:	b292      	uxth	r2, r2
 80053da:	2117      	movs	r1, #23
 80053dc:	4650      	mov	r0, sl
 80053de:	f003 ffeb 	bl	80093b8 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 80053e2:	9a05      	ldr	r2, [sp, #20]
 80053e4:	492c      	ldr	r1, [pc, #176]	; (8005498 <CLI_CommandParser+0x3d0>)
 80053e6:	0020      	movs	r0, r4
 80053e8:	f00f f9b6 	bl	8014758 <sprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 80053ec:	7823      	ldrb	r3, [r4, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <CLI_CommandParser+0x330>
 80053f2:	4643      	mov	r3, r8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d108      	bne.n	800540a <CLI_CommandParser+0x342>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80053f8:	0020      	movs	r0, r4
 80053fa:	f7fa fe8d 	bl	8000118 <strlen>
 80053fe:	0002      	movs	r2, r0
 8005400:	2100      	movs	r1, #0
 8005402:	0020      	movs	r0, r4
 8005404:	f00e ff7c 	bl	8014300 <memset>
 8005408:	e72c      	b.n	8005264 <CLI_CommandParser+0x19c>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 800540a:	0020      	movs	r0, r4
 800540c:	f7fa fe84 	bl	8000118 <strlen>
 8005410:	b282      	uxth	r2, r0
 8005412:	2301      	movs	r3, #1
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	3331      	adds	r3, #49	; 0x31
 8005418:	0021      	movs	r1, r4
 800541a:	9804      	ldr	r0, [sp, #16]
 800541c:	f008 fd72 	bl	800df04 <writePxMutex>
 8005420:	e7ea      	b.n	80053f8 <CLI_CommandParser+0x330>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8005422:	4643      	mov	r3, r8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d100      	bne.n	800542a <CLI_CommandParser+0x362>
 8005428:	e68b      	b.n	8005142 <CLI_CommandParser+0x7a>
 800542a:	e6b7      	b.n	800519c <CLI_CommandParser+0xd4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 800542c:	2301      	movs	r3, #1
 800542e:	425b      	negs	r3, r3
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	3333      	adds	r3, #51	; 0x33
 8005434:	2238      	movs	r2, #56	; 0x38
 8005436:	4919      	ldr	r1, [pc, #100]	; (800549c <CLI_CommandParser+0x3d4>)
 8005438:	9804      	ldr	r0, [sp, #16]
 800543a:	f008 fd63 	bl	800df04 <writePxMutex>
}
 800543e:	e043      	b.n	80054c8 <CLI_CommandParser+0x400>
 8005440:	200012b8 	.word	0x200012b8
 8005444:	08019250 	.word	0x08019250
 8005448:	080192a4 	.word	0x080192a4
 800544c:	080192f0 	.word	0x080192f0
 8005450:	0801924c 	.word	0x0801924c
 8005454:	08018f14 	.word	0x08018f14
 8005458:	080192ac 	.word	0x080192ac
 800545c:	200010e4 	.word	0x200010e4
 8005460:	08019390 	.word	0x08019390
 8005464:	20006a18 	.word	0x20006a18
 8005468:	20000b07 	.word	0x20000b07
 800546c:	20001180 	.word	0x20001180
 8005470:	2000179a 	.word	0x2000179a
 8005474:	080193bc 	.word	0x080193bc
 8005478:	080192f4 	.word	0x080192f4
 800547c:	0801931c 	.word	0x0801931c
 8005480:	20000d64 	.word	0x20000d64
 8005484:	20000fb0 	.word	0x20000fb0
 8005488:	08019344 	.word	0x08019344
 800548c:	2000128a 	.word	0x2000128a
 8005490:	20000f38 	.word	0x20000f38
 8005494:	08019364 	.word	0x08019364
 8005498:	08019398 	.word	0x08019398
 800549c:	080193dc 	.word	0x080193dc
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80054a0:	0020      	movs	r0, r4
 80054a2:	f7fa fe39 	bl	8000118 <strlen>
 80054a6:	0002      	movs	r2, r0
 80054a8:	2100      	movs	r1, #0
 80054aa:	0020      	movs	r0, r4
 80054ac:	f00e ff28 	bl	8014300 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 80054b0:	2209      	movs	r2, #9
 80054b2:	2100      	movs	r1, #0
 80054b4:	a807      	add	r0, sp, #28
 80054b6:	f00e ff23 	bl	8014300 <memset>
	if(!recordSnippet && enableOutput)
 80054ba:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <CLI_CommandParser+0x420>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <CLI_CommandParser+0x400>
 80054c2:	4643      	mov	r3, r8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1b1      	bne.n	800542c <CLI_CommandParser+0x364>
}
 80054c8:	b00b      	add	sp, #44	; 0x2c
 80054ca:	bc3c      	pop	{r2, r3, r4, r5}
 80054cc:	4690      	mov	r8, r2
 80054ce:	4699      	mov	r9, r3
 80054d0:	46a2      	mov	sl, r4
 80054d2:	46ab      	mov	fp, r5
 80054d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80054d6:	0020      	movs	r0, r4
 80054d8:	f7fa fe1e 	bl	8000118 <strlen>
 80054dc:	0002      	movs	r2, r0
 80054de:	2100      	movs	r1, #0
 80054e0:	0020      	movs	r0, r4
 80054e2:	f00e ff0d 	bl	8014300 <memset>
 80054e6:	e7e3      	b.n	80054b0 <CLI_CommandParser+0x3e8>
 80054e8:	200012b8 	.word	0x200012b8

080054ec <prvCLITask>:
{
 80054ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ee:	46de      	mov	lr, fp
 80054f0:	4657      	mov	r7, sl
 80054f2:	464e      	mov	r6, r9
 80054f4:	b5c0      	push	{r6, r7, lr}
 80054f6:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80054f8:	2101      	movs	r1, #1
 80054fa:	4249      	negs	r1, r1
 80054fc:	2001      	movs	r0, #1
 80054fe:	f00a fdd9 	bl	80100b4 <ulTaskNotifyTake>
	cRxedChar = '\0';
 8005502:	230f      	movs	r3, #15
 8005504:	aa02      	add	r2, sp, #8
 8005506:	4694      	mov	ip, r2
 8005508:	4463      	add	r3, ip
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800550e:	f009 fb13 	bl	800eb38 <FreeRTOS_CLIGetOutputBuffer>
 8005512:	9003      	str	r0, [sp, #12]
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8005514:	23e1      	movs	r3, #225	; 0xe1
 8005516:	031b      	lsls	r3, r3, #12
 8005518:	4a5f      	ldr	r2, [pc, #380]	; (8005698 <prvCLITask+0x1ac>)
 800551a:	6892      	ldr	r2, [r2, #8]
 800551c:	429a      	cmp	r2, r3
 800551e:	d009      	beq.n	8005534 <prvCLITask+0x48>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005520:	2401      	movs	r4, #1
			if (port != PcPort)
 8005522:	4e5e      	ldr	r6, [pc, #376]	; (800569c <prvCLITask+0x1b0>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8005524:	001d      	movs	r5, r3
			if (port != PcPort)
 8005526:	7833      	ldrb	r3, [r6, #0]
 8005528:	42a3      	cmp	r3, r4
 800552a:	d12c      	bne.n	8005586 <prvCLITask+0x9a>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800552c:	3401      	adds	r4, #1
 800552e:	b2e4      	uxtb	r4, r4
 8005530:	2c07      	cmp	r4, #7
 8005532:	d1f8      	bne.n	8005526 <prvCLITask+0x3a>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 8005534:	4b5a      	ldr	r3, [pc, #360]	; (80056a0 <prvCLITask+0x1b4>)
 8005536:	881a      	ldrh	r2, [r3, #0]
 8005538:	0053      	lsls	r3, r2, #1
 800553a:	189b      	adds	r3, r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	4a59      	ldr	r2, [pc, #356]	; (80056a4 <prvCLITask+0x1b8>)
 8005540:	189b      	adds	r3, r3, r2
 8005542:	4a59      	ldr	r2, [pc, #356]	; (80056a8 <prvCLITask+0x1bc>)
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	4c59      	ldr	r4, [pc, #356]	; (80056ac <prvCLITask+0x1c0>)
 8005548:	4d54      	ldr	r5, [pc, #336]	; (800569c <prvCLITask+0x1b0>)
 800554a:	7829      	ldrb	r1, [r5, #0]
 800554c:	9100      	str	r1, [sp, #0]
 800554e:	4958      	ldr	r1, [pc, #352]	; (80056b0 <prvCLITask+0x1c4>)
 8005550:	0020      	movs	r0, r4
 8005552:	f00f f901 	bl	8014758 <sprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 8005556:	7828      	ldrb	r0, [r5, #0]
 8005558:	230a      	movs	r3, #10
 800555a:	4a56      	ldr	r2, [pc, #344]	; (80056b4 <prvCLITask+0x1c8>)
 800555c:	4956      	ldr	r1, [pc, #344]	; (80056b8 <prvCLITask+0x1cc>)
 800555e:	f008 fcf9 	bl	800df54 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 8005562:	0020      	movs	r0, r4
 8005564:	f7fa fdd8 	bl	8000118 <strlen>
 8005568:	b282      	uxth	r2, r0
 800556a:	7828      	ldrb	r0, [r5, #0]
 800556c:	230a      	movs	r3, #10
 800556e:	0021      	movs	r1, r4
 8005570:	f008 fcf0 	bl	800df54 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 8005574:	2300      	movs	r3, #0
 8005576:	469b      	mov	fp, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005578:	4b48      	ldr	r3, [pc, #288]	; (800569c <prvCLITask+0x1b0>)
 800557a:	469a      	mov	sl, r3
 800557c:	4b4f      	ldr	r3, [pc, #316]	; (80056bc <prvCLITask+0x1d0>)
 800557e:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 8005580:	001f      	movs	r7, r3
			if (UARTRxBuf[PcPort-1][chr]) {
 8005582:	4656      	mov	r6, sl
 8005584:	e066      	b.n	8005654 <prvCLITask+0x168>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8005586:	0029      	movs	r1, r5
 8005588:	0020      	movs	r0, r4
 800558a:	f008 fd29 	bl	800dfe0 <UpdateBaudrate>
 800558e:	e7cd      	b.n	800552c <prvCLITask+0x40>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 8005590:	200f      	movs	r0, #15
 8005592:	ad02      	add	r5, sp, #8
 8005594:	46ac      	mov	ip, r5
 8005596:	4460      	add	r0, ip
 8005598:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 800559a:	0198      	lsls	r0, r3, #6
 800559c:	4a48      	ldr	r2, [pc, #288]	; (80056c0 <prvCLITask+0x1d4>)
 800559e:	1812      	adds	r2, r2, r0
 80055a0:	2000      	movs	r0, #0
 80055a2:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort-1] = chr;
 80055a4:	4a45      	ldr	r2, [pc, #276]	; (80056bc <prvCLITask+0x1d0>)
 80055a6:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 80055a8:	240f      	movs	r4, #15
 80055aa:	ab02      	add	r3, sp, #8
 80055ac:	469c      	mov	ip, r3
 80055ae:	4464      	add	r4, ip
 80055b0:	4b3a      	ldr	r3, [pc, #232]	; (800569c <prvCLITask+0x1b0>)
 80055b2:	7818      	ldrb	r0, [r3, #0]
 80055b4:	230a      	movs	r3, #10
 80055b6:	2201      	movs	r2, #1
 80055b8:	0021      	movs	r1, r4
 80055ba:	f008 fccb 	bl	800df54 <writePxITMutex>
		if( cRxedChar == '\r' )
 80055be:	7823      	ldrb	r3, [r4, #0]
 80055c0:	2b0d      	cmp	r3, #13
 80055c2:	d028      	beq.n	8005616 <prvCLITask+0x12a>
			if( cRxedChar == '\n' )
 80055c4:	2b0a      	cmp	r3, #10
 80055c6:	d043      	beq.n	8005650 <prvCLITask+0x164>
			else if( cRxedChar == '\b' )
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d059      	beq.n	8005680 <prvCLITask+0x194>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 80055cc:	001a      	movs	r2, r3
 80055ce:	3a20      	subs	r2, #32
 80055d0:	2a5e      	cmp	r2, #94	; 0x5e
 80055d2:	d83d      	bhi.n	8005650 <prvCLITask+0x164>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 80055d4:	465a      	mov	r2, fp
 80055d6:	2a31      	cmp	r2, #49	; 0x31
 80055d8:	dc3a      	bgt.n	8005650 <prvCLITask+0x164>
						cInputString[ cInputIndex ] = cRxedChar;
 80055da:	4a3a      	ldr	r2, [pc, #232]	; (80056c4 <prvCLITask+0x1d8>)
 80055dc:	4659      	mov	r1, fp
 80055de:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 80055e0:	465b      	mov	r3, fp
 80055e2:	3301      	adds	r3, #1
 80055e4:	b25b      	sxtb	r3, r3
 80055e6:	469b      	mov	fp, r3
 80055e8:	e032      	b.n	8005650 <prvCLITask+0x164>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 80055ea:	2200      	movs	r2, #0
 80055ec:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 80055ee:	f00b f83b 	bl	8010668 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 80055f2:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 80055f4:	7833      	ldrb	r3, [r6, #0]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	0021      	movs	r1, r4
 80055fa:	019a      	lsls	r2, r3, #6
 80055fc:	18aa      	adds	r2, r5, r2
 80055fe:	5d12      	ldrb	r2, [r2, r4]
 8005600:	2a00      	cmp	r2, #0
 8005602:	d1c5      	bne.n	8005590 <prvCLITask+0xa4>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8005604:	2c3f      	cmp	r4, #63	; 0x3f
 8005606:	d0f0      	beq.n	80055ea <prvCLITask+0xfe>
			taskYIELD();
 8005608:	f00b f82e 	bl	8010668 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800560c:	3401      	adds	r4, #1
 800560e:	b2a4      	uxth	r4, r4
 8005610:	2c3f      	cmp	r4, #63	; 0x3f
 8005612:	d9ef      	bls.n	80055f4 <prvCLITask+0x108>
 8005614:	e7c8      	b.n	80055a8 <prvCLITask+0xbc>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 8005616:	4b21      	ldr	r3, [pc, #132]	; (800569c <prvCLITask+0x1b0>)
 8005618:	7818      	ldrb	r0, [r3, #0]
 800561a:	230a      	movs	r3, #10
 800561c:	2202      	movs	r2, #2
 800561e:	492a      	ldr	r1, [pc, #168]	; (80056c8 <prvCLITask+0x1dc>)
 8005620:	f008 fc98 	bl	800df54 <writePxITMutex>
			if( cInputIndex == 0 )
 8005624:	465b      	mov	r3, fp
 8005626:	2b00      	cmp	r3, #0
 8005628:	d025      	beq.n	8005676 <prvCLITask+0x18a>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 800562a:	4c26      	ldr	r4, [pc, #152]	; (80056c4 <prvCLITask+0x1d8>)
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <prvCLITask+0x1b0>)
 800562e:	7818      	ldrb	r0, [r3, #0]
 8005630:	9b03      	ldr	r3, [sp, #12]
 8005632:	0022      	movs	r2, r4
 8005634:	2101      	movs	r1, #1
 8005636:	f7ff fd47 	bl	80050c8 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 800563a:	0021      	movs	r1, r4
 800563c:	4823      	ldr	r0, [pc, #140]	; (80056cc <prvCLITask+0x1e0>)
 800563e:	f00f f8c7 	bl	80147d0 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8005642:	2232      	movs	r2, #50	; 0x32
 8005644:	2100      	movs	r1, #0
 8005646:	0020      	movs	r0, r4
 8005648:	f00e fe5a 	bl	8014300 <memset>
			cInputIndex = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	469b      	mov	fp, r3
		taskYIELD();
 8005650:	f00b f80a 	bl	8010668 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005654:	4653      	mov	r3, sl
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	3b01      	subs	r3, #1
 800565a:	464a      	mov	r2, r9
 800565c:	5cd2      	ldrb	r2, [r2, r3]
 800565e:	b294      	uxth	r4, r2
 8005660:	2c3f      	cmp	r4, #63	; 0x3f
 8005662:	d8a1      	bhi.n	80055a8 <prvCLITask+0xbc>
			if (UARTRxBuf[PcPort-1][chr]) {
 8005664:	0011      	movs	r1, r2
 8005666:	019d      	lsls	r5, r3, #6
 8005668:	4815      	ldr	r0, [pc, #84]	; (80056c0 <prvCLITask+0x1d4>)
 800566a:	1940      	adds	r0, r0, r5
 800566c:	5c82      	ldrb	r2, [r0, r2]
 800566e:	2a00      	cmp	r2, #0
 8005670:	d18e      	bne.n	8005590 <prvCLITask+0xa4>
 8005672:	4d13      	ldr	r5, [pc, #76]	; (80056c0 <prvCLITask+0x1d4>)
 8005674:	e7c6      	b.n	8005604 <prvCLITask+0x118>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 8005676:	4915      	ldr	r1, [pc, #84]	; (80056cc <prvCLITask+0x1e0>)
 8005678:	4812      	ldr	r0, [pc, #72]	; (80056c4 <prvCLITask+0x1d8>)
 800567a:	f00f f8a9 	bl	80147d0 <strcpy>
 800567e:	e7d4      	b.n	800562a <prvCLITask+0x13e>
				if( cInputIndex > 0 )
 8005680:	465b      	mov	r3, fp
 8005682:	2b00      	cmp	r3, #0
 8005684:	dde4      	ble.n	8005650 <prvCLITask+0x164>
					cInputIndex--;
 8005686:	3b01      	subs	r3, #1
 8005688:	b25b      	sxtb	r3, r3
 800568a:	469b      	mov	fp, r3
					cInputString[ cInputIndex ] = '\0';
 800568c:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <prvCLITask+0x1d8>)
 800568e:	2200      	movs	r2, #0
 8005690:	4659      	mov	r1, fp
 8005692:	545a      	strb	r2, [r3, r1]
 8005694:	e7dc      	b.n	8005650 <prvCLITask+0x164>
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	20006a18 	.word	0x20006a18
 800569c:	20000b07 	.word	0x20000b07
 80056a0:	20000050 	.word	0x20000050
 80056a4:	08018f64 	.word	0x08018f64
 80056a8:	200010e4 	.word	0x200010e4
 80056ac:	2000128c 	.word	0x2000128c
 80056b0:	08019448 	.word	0x08019448
 80056b4:	00000293 	.word	0x00000293
 80056b8:	08019474 	.word	0x08019474
 80056bc:	200014bc 	.word	0x200014bc
 80056c0:	2000133c 	.word	0x2000133c
 80056c4:	200011bc 	.word	0x200011bc
 80056c8:	0801a854 	.word	0x0801a854
 80056cc:	20001258 	.word	0x20001258

080056d0 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 80056d4:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <ParseSnippetCommand+0x78>)
 80056d6:	781a      	ldrb	r2, [r3, #0]
 80056d8:	3a01      	subs	r2, #1
 80056da:	0093      	lsls	r3, r2, #2
 80056dc:	189b      	adds	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4a1a      	ldr	r2, [pc, #104]	; (800574c <ParseSnippetCommand+0x7c>)
 80056e2:	18d3      	adds	r3, r2, r3
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d02c      	beq.n	8005744 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 80056ea:	4b19      	ldr	r3, [pc, #100]	; (8005750 <ParseSnippetCommand+0x80>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d014      	beq.n	800571c <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 80056f2:	4b17      	ldr	r3, [pc, #92]	; (8005750 <ParseSnippetCommand+0x80>)
 80056f4:	681d      	ldr	r5, [r3, #0]
 80056f6:	782b      	ldrb	r3, [r5, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d012      	beq.n	8005722 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 80056fc:	2113      	movs	r1, #19
 80056fe:	0028      	movs	r0, r5
 8005700:	f00f f858 	bl	80147b4 <strchr>
 8005704:	1e06      	subs	r6, r0, #0
	if (ptrEnd != NULL)
 8005706:	d011      	beq.n	800572c <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 8005708:	1b42      	subs	r2, r0, r5
 800570a:	0029      	movs	r1, r5
 800570c:	0020      	movs	r0, r4
 800570e:	f00f f878 	bl	8014802 <strncpy>
		ptrStart = ptrEnd+1;
 8005712:	3601      	adds	r6, #1
 8005714:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <ParseSnippetCommand+0x80>)
 8005716:	601e      	str	r6, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 8005718:	2001      	movs	r0, #1
 800571a:	e006      	b.n	800572a <ParseSnippetCommand+0x5a>
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800571c:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <ParseSnippetCommand+0x80>)
 800571e:	6018      	str	r0, [r3, #0]
 8005720:	e7e7      	b.n	80056f2 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <ParseSnippetCommand+0x80>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
		return false;
 8005728:	2000      	movs	r0, #0
}
 800572a:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char *)cliBuffer, ptrStart);
 800572c:	0029      	movs	r1, r5
 800572e:	0020      	movs	r0, r4
 8005730:	f00f f84e 	bl	80147d0 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 8005734:	0020      	movs	r0, r4
 8005736:	f7fa fcef 	bl	8000118 <strlen>
 800573a:	182d      	adds	r5, r5, r0
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <ParseSnippetCommand+0x80>)
 800573e:	601d      	str	r5, [r3, #0]
	return true;
 8005740:	2001      	movs	r0, #1
 8005742:	e7f2      	b.n	800572a <ParseSnippetCommand+0x5a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005744:	2000      	movs	r0, #0
 8005746:	e7f0      	b.n	800572a <ParseSnippetCommand+0x5a>
 8005748:	2000128b 	.word	0x2000128b
 800574c:	20006a34 	.word	0x20006a34
 8005750:	200012b4 	.word	0x200012b4

08005754 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8005754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005756:	b083      	sub	sp, #12
 8005758:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 800575a:	0083      	lsls	r3, r0, #2
 800575c:	181b      	adds	r3, r3, r0
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4a3f      	ldr	r2, [pc, #252]	; (8005860 <CheckSnippetCondition+0x10c>)
 8005762:	5c9b      	ldrb	r3, [r3, r2]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d003      	beq.n	8005770 <CheckSnippetCondition+0x1c>
 8005768:	2b03      	cmp	r3, #3
 800576a:	d015      	beq.n	8005798 <CheckSnippetCondition+0x44>
					
  	default:
  		break;
  }
	
	return false;
 800576c:	2000      	movs	r0, #0
 800576e:	e011      	b.n	8005794 <CheckSnippetCondition+0x40>
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 8005770:	493b      	ldr	r1, [pc, #236]	; (8005860 <CheckSnippetCondition+0x10c>)
 8005772:	0083      	lsls	r3, r0, #2
 8005774:	181a      	adds	r2, r3, r0
 8005776:	0092      	lsls	r2, r2, #2
 8005778:	188a      	adds	r2, r1, r2
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 800577a:	7890      	ldrb	r0, [r2, #2]
 800577c:	00c2      	lsls	r2, r0, #3
 800577e:	1812      	adds	r2, r2, r0
 8005780:	191b      	adds	r3, r3, r4
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	18cb      	adds	r3, r1, r3
 8005786:	4937      	ldr	r1, [pc, #220]	; (8005864 <CheckSnippetCondition+0x110>)
 8005788:	5c50      	ldrb	r0, [r2, r1]
 800578a:	78db      	ldrb	r3, [r3, #3]
 800578c:	1ac0      	subs	r0, r0, r3
 800578e:	4243      	negs	r3, r0
 8005790:	4158      	adcs	r0, r3
 8005792:	b2c0      	uxtb	r0, r0
}
 8005794:	b003      	add	sp, #12
 8005796:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 8005798:	4e31      	ldr	r6, [pc, #196]	; (8005860 <CheckSnippetCondition+0x10c>)
 800579a:	0085      	lsls	r5, r0, #2
 800579c:	182b      	adds	r3, r5, r0
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	18f3      	adds	r3, r6, r3
 80057a2:	78da      	ldrb	r2, [r3, #3]
 80057a4:	3a01      	subs	r2, #1
 80057a6:	0053      	lsls	r3, r2, #1
 80057a8:	189b      	adds	r3, r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4a2e      	ldr	r2, [pc, #184]	; (8005868 <CheckSnippetCondition+0x114>)
 80057ae:	589b      	ldr	r3, [r3, r2]
 80057b0:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80057b2:	1829      	adds	r1, r5, r0
 80057b4:	0089      	lsls	r1, r1, #2
 80057b6:	3106      	adds	r1, #6
 80057b8:	1989      	adds	r1, r1, r6
 80057ba:	2204      	movs	r2, #4
 80057bc:	a801      	add	r0, sp, #4
 80057be:	f00e fd96 	bl	80142ee <memcpy>
			switch (snippets[index].cond.mathOperator)
 80057c2:	192d      	adds	r5, r5, r4
 80057c4:	00ad      	lsls	r5, r5, #2
 80057c6:	1975      	adds	r5, r6, r5
 80057c8:	786b      	ldrb	r3, [r5, #1]
 80057ca:	2b06      	cmp	r3, #6
 80057cc:	d83f      	bhi.n	800584e <CheckSnippetCondition+0xfa>
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4a26      	ldr	r2, [pc, #152]	; (800586c <CheckSnippetCondition+0x118>)
 80057d2:	58d3      	ldr	r3, [r2, r3]
 80057d4:	469f      	mov	pc, r3
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 80057d6:	1c39      	adds	r1, r7, #0
 80057d8:	9801      	ldr	r0, [sp, #4]
 80057da:	f7fa fe79 	bl	80004d0 <__aeabi_fcmpeq>
 80057de:	1e43      	subs	r3, r0, #1
 80057e0:	4198      	sbcs	r0, r3
 80057e2:	e7d7      	b.n	8005794 <CheckSnippetCondition+0x40>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 80057e4:	1c39      	adds	r1, r7, #0
 80057e6:	9801      	ldr	r0, [sp, #4]
 80057e8:	f7fa fe78 	bl	80004dc <__aeabi_fcmplt>
 80057ec:	1e43      	subs	r3, r0, #1
 80057ee:	4198      	sbcs	r0, r3
 80057f0:	e7d0      	b.n	8005794 <CheckSnippetCondition+0x40>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 80057f2:	1c39      	adds	r1, r7, #0
 80057f4:	9801      	ldr	r0, [sp, #4]
 80057f6:	f7fa fe85 	bl	8000504 <__aeabi_fcmpgt>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d029      	beq.n	8005852 <CheckSnippetCondition+0xfe>
 80057fe:	2100      	movs	r1, #0
 8005800:	1c38      	adds	r0, r7, #0
 8005802:	f7fa fe65 	bl	80004d0 <__aeabi_fcmpeq>
 8005806:	4243      	negs	r3, r0
 8005808:	4158      	adcs	r0, r3
 800580a:	e7c3      	b.n	8005794 <CheckSnippetCondition+0x40>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 800580c:	1c39      	adds	r1, r7, #0
 800580e:	9801      	ldr	r0, [sp, #4]
 8005810:	f7fa fe6e 	bl	80004f0 <__aeabi_fcmple>
 8005814:	1e43      	subs	r3, r0, #1
 8005816:	4198      	sbcs	r0, r3
 8005818:	e7bc      	b.n	8005794 <CheckSnippetCondition+0x40>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 800581a:	1c39      	adds	r1, r7, #0
 800581c:	9801      	ldr	r0, [sp, #4]
 800581e:	f7fa fe7b 	bl	8000518 <__aeabi_fcmpge>
 8005822:	2800      	cmp	r0, #0
 8005824:	d017      	beq.n	8005856 <CheckSnippetCondition+0x102>
 8005826:	2100      	movs	r1, #0
 8005828:	1c38      	adds	r0, r7, #0
 800582a:	f7fa fe51 	bl	80004d0 <__aeabi_fcmpeq>
 800582e:	4243      	negs	r3, r0
 8005830:	4158      	adcs	r0, r3
 8005832:	e7af      	b.n	8005794 <CheckSnippetCondition+0x40>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8005834:	1c39      	adds	r1, r7, #0
 8005836:	9801      	ldr	r0, [sp, #4]
 8005838:	f7fa fe4a 	bl	80004d0 <__aeabi_fcmpeq>
 800583c:	2800      	cmp	r0, #0
 800583e:	d10c      	bne.n	800585a <CheckSnippetCondition+0x106>
 8005840:	2100      	movs	r1, #0
 8005842:	1c38      	adds	r0, r7, #0
 8005844:	f7fa fe44 	bl	80004d0 <__aeabi_fcmpeq>
 8005848:	4243      	negs	r3, r0
 800584a:	4158      	adcs	r0, r3
 800584c:	e7a2      	b.n	8005794 <CheckSnippetCondition+0x40>
	return false;
 800584e:	2000      	movs	r0, #0
 8005850:	e7a0      	b.n	8005794 <CheckSnippetCondition+0x40>
 8005852:	2000      	movs	r0, #0
 8005854:	e79e      	b.n	8005794 <CheckSnippetCondition+0x40>
 8005856:	2000      	movs	r0, #0
 8005858:	e79c      	b.n	8005794 <CheckSnippetCondition+0x40>
 800585a:	2000      	movs	r0, #0
 800585c:	e79a      	b.n	8005794 <CheckSnippetCondition+0x40>
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	20006a34 	.word	0x20006a34
 8005864:	20001574 	.word	0x20001574
 8005868:	20000084 	.word	0x20000084
 800586c:	08019230 	.word	0x08019230

08005870 <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 8005872:	f009 f961 	bl	800eb38 <FreeRTOS_CLIGetOutputBuffer>
 8005876:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8005878:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <ExecuteSnippet+0x7c>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d032      	beq.n	80058e6 <ExecuteSnippet+0x76>
 8005880:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 8005882:	4f1b      	ldr	r7, [pc, #108]	; (80058f0 <ExecuteSnippet+0x80>)
 8005884:	e01a      	b.n	80058bc <ExecuteSnippet+0x4c>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 8005886:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <ExecuteSnippet+0x84>)
 8005888:	7818      	ldrb	r0, [r3, #0]
 800588a:	002b      	movs	r3, r5
 800588c:	4a1a      	ldr	r2, [pc, #104]	; (80058f8 <ExecuteSnippet+0x88>)
 800588e:	2100      	movs	r1, #0
 8005890:	f7ff fc1a 	bl	80050c8 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 8005894:	0028      	movs	r0, r5
 8005896:	f7fa fc3f 	bl	8000118 <strlen>
 800589a:	0002      	movs	r2, r0
 800589c:	2100      	movs	r1, #0
 800589e:	0028      	movs	r0, r5
 80058a0:	f00e fd2e 	bl	8014300 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 80058a4:	4914      	ldr	r1, [pc, #80]	; (80058f8 <ExecuteSnippet+0x88>)
 80058a6:	68f0      	ldr	r0, [r6, #12]
 80058a8:	f7ff ff12 	bl	80056d0 <ParseSnippetCommand>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d1ea      	bne.n	8005886 <ExecuteSnippet+0x16>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 80058b0:	3401      	adds	r4, #1
 80058b2:	b2a4      	uxth	r4, r4
 80058b4:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <ExecuteSnippet+0x7c>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d914      	bls.n	80058e6 <ExecuteSnippet+0x76>
		if (snippets[s].state)								// Check for activated Snippets
 80058bc:	00a3      	lsls	r3, r4, #2
 80058be:	191b      	adds	r3, r3, r4
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	18fb      	adds	r3, r7, r3
 80058c4:	7c1b      	ldrb	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f2      	beq.n	80058b0 <ExecuteSnippet+0x40>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 80058ca:	b2e0      	uxtb	r0, r4
 80058cc:	f7ff ff42 	bl	8005754 <CheckSnippetCondition>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d0ed      	beq.n	80058b0 <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80058d4:	4b09      	ldr	r3, [pc, #36]	; (80058fc <ExecuteSnippet+0x8c>)
 80058d6:	2220      	movs	r2, #32
 80058d8:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 80058da:	00a3      	lsls	r3, r4, #2
 80058dc:	191e      	adds	r6, r3, r4
 80058de:	00b6      	lsls	r6, r6, #2
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <ExecuteSnippet+0x80>)
 80058e2:	199e      	adds	r6, r3, r6
 80058e4:	e7de      	b.n	80058a4 <ExecuteSnippet+0x34>
			}
		}
  }
	
	return result;
}
 80058e6:	2000      	movs	r0, #0
 80058e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	2000128b 	.word	0x2000128b
 80058f0:	20006a34 	.word	0x20006a34
 80058f4:	20000b07 	.word	0x20000b07
 80058f8:	20001224 	.word	0x20001224
 80058fc:	20006a18 	.word	0x20006a18

08005900 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 8005900:	2000      	movs	r0, #0
 8005902:	4770      	bx	lr

08005904 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	0004      	movs	r4, r0
 800590a:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8005910:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005912:	2800      	cmp	r0, #0
 8005914:	d101      	bne.n	800591a <setBaudrateCommand+0x16>
 8005916:	b672      	cpsid	i
 8005918:	e7fe      	b.n	8005918 <setBaudrateCommand+0x14>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800591a:	aa01      	add	r2, sp, #4
 800591c:	2101      	movs	r1, #1
 800591e:	0028      	movs	r0, r5
 8005920:	f009 f90e 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005924:	2300      	movs	r3, #0
 8005926:	56c3      	ldrsb	r3, [r0, r3]
 8005928:	2b70      	cmp	r3, #112	; 0x70
 800592a:	d00c      	beq.n	8005946 <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800592c:	466a      	mov	r2, sp
 800592e:	2102      	movs	r1, #2
 8005930:	0028      	movs	r0, r5
 8005932:	f009 f905 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8005936:	f00e fa50 	bl	8013dda <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800593a:	2213      	movs	r2, #19
 800593c:	490f      	ldr	r1, [pc, #60]	; (800597c <setBaudrateCommand+0x78>)
 800593e:	0020      	movs	r0, r4
 8005940:	f00e fcd5 	bl	80142ee <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005944:	e016      	b.n	8005974 <setBaudrateCommand+0x70>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005946:	3001      	adds	r0, #1
 8005948:	f00e fa47 	bl	8013dda <atol>
 800594c:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800594e:	466a      	mov	r2, sp
 8005950:	2102      	movs	r1, #2
 8005952:	0028      	movs	r0, r5
 8005954:	f009 f8f4 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8005958:	f00e fa3f 	bl	8013dda <atol>
 800595c:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 800595e:	b2f0      	uxtb	r0, r6
 8005960:	0029      	movs	r1, r5
 8005962:	f008 fb3d 	bl	800dfe0 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 8005966:	23ff      	movs	r3, #255	; 0xff
 8005968:	4033      	ands	r3, r6
 800596a:	002a      	movs	r2, r5
 800596c:	4904      	ldr	r1, [pc, #16]	; (8005980 <setBaudrateCommand+0x7c>)
 800596e:	0020      	movs	r0, r4
 8005970:	f00e fef2 	bl	8014758 <sprintf>
}
 8005974:	2000      	movs	r0, #0
 8005976:	b002      	add	sp, #8
 8005978:	bd70      	pop	{r4, r5, r6, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	0801a024 	.word	0x0801a024
 8005980:	08019ffc 	.word	0x08019ffc

08005984 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8005984:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8005986:	2800      	cmp	r0, #0
 8005988:	d101      	bne.n	800598e <flashsizeCommand+0xa>
 800598a:	b672      	cpsid	i
 800598c:	e7fe      	b.n	800598c <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 800598e:	4b03      	ldr	r3, [pc, #12]	; (800599c <flashsizeCommand+0x18>)
 8005990:	881a      	ldrh	r2, [r3, #0]
 8005992:	4903      	ldr	r1, [pc, #12]	; (80059a0 <flashsizeCommand+0x1c>)
 8005994:	f00e fee0 	bl	8014758 <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005998:	2000      	movs	r0, #0
 800599a:	bd10      	pop	{r4, pc}
 800599c:	1ffff7cc 	.word	0x1ffff7cc
 80059a0:	080199d4 	.word	0x080199d4

080059a4 <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 80059a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a6:	46d6      	mov	lr, sl
 80059a8:	4647      	mov	r7, r8
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b085      	sub	sp, #20
 80059ae:	0004      	movs	r4, r0
 80059b0:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 80059b6:	4b62      	ldr	r3, [pc, #392]	; (8005b40 <testportCommand+0x19c>)
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	ab02      	add	r3, sp, #8
 80059bc:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80059be:	2c00      	cmp	r4, #0
 80059c0:	d101      	bne.n	80059c6 <testportCommand+0x22>
 80059c2:	b672      	cpsid	i
 80059c4:	e7fe      	b.n	80059c4 <testportCommand+0x20>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80059c6:	aa03      	add	r2, sp, #12
 80059c8:	2101      	movs	r1, #1
 80059ca:	f009 f8b9 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 80059ce:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 80059d0:	495c      	ldr	r1, [pc, #368]	; (8005b44 <testportCommand+0x1a0>)
 80059d2:	f7fa fb97 	bl	8000104 <strcmp>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d173      	bne.n	8005ac2 <testportCommand+0x11e>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 80059da:	4b5b      	ldr	r3, [pc, #364]	; (8005b48 <testportCommand+0x1a4>)
 80059dc:	781a      	ldrb	r2, [r3, #0]
 80059de:	4b5b      	ldr	r3, [pc, #364]	; (8005b4c <testportCommand+0x1a8>)
 80059e0:	189b      	adds	r3, r3, r2
 80059e2:	3b01      	subs	r3, #1
 80059e4:	781e      	ldrb	r6, [r3, #0]
 80059e6:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 80059e8:	4b57      	ldr	r3, [pc, #348]	; (8005b48 <testportCommand+0x1a4>)
 80059ea:	4698      	mov	r8, r3
 80059ec:	e015      	b.n	8005a1a <testportCommand+0x76>
        result = BOS_OK;
      else
        result = BOS_ERR_Keyword;
      
      if (result == BOS_OK){ 
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 80059ee:	002a      	movs	r2, r5
 80059f0:	4957      	ldr	r1, [pc, #348]	; (8005b50 <testportCommand+0x1ac>)
 80059f2:	0020      	movs	r0, r4
 80059f4:	f00e feb0 	bl	8014758 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 80059f8:	0020      	movs	r0, r4
 80059fa:	f7fa fb8d 	bl	8000118 <strlen>
 80059fe:	b282      	uxth	r2, r0
 8005a00:	4b51      	ldr	r3, [pc, #324]	; (8005b48 <testportCommand+0x1a4>)
 8005a02:	7818      	ldrb	r0, [r3, #0]
 8005a04:	2364      	movs	r3, #100	; 0x64
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	3b5a      	subs	r3, #90	; 0x5a
 8005a0a:	0021      	movs	r1, r4
 8005a0c:	f008 fa7a 	bl	800df04 <writePxMutex>
 8005a10:	e02f      	b.n	8005a72 <testportCommand+0xce>
 8005a12:	3501      	adds	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
 8005a14:	2d07      	cmp	r5, #7
 8005a16:	d100      	bne.n	8005a1a <testportCommand+0x76>
 8005a18:	e07f      	b.n	8005b1a <testportCommand+0x176>
 8005a1a:	b2eb      	uxtb	r3, r5
 8005a1c:	469a      	mov	sl, r3
      if(PcPort!=ports)
 8005a1e:	4643      	mov	r3, r8
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	4553      	cmp	r3, sl
 8005a24:	d0f5      	beq.n	8005a12 <testportCommand+0x6e>
        WriteVaule[0]=rand();
 8005a26:	f00e fc83 	bl	8014330 <rand>
 8005a2a:	af02      	add	r7, sp, #8
 8005a2c:	7038      	strb	r0, [r7, #0]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8005a2e:	2364      	movs	r3, #100	; 0x64
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	3b5a      	subs	r3, #90	; 0x5a
 8005a34:	2201      	movs	r2, #1
 8005a36:	0039      	movs	r1, r7
 8005a38:	4650      	mov	r0, sl
 8005a3a:	f008 fa63 	bl	800df04 <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8005a3e:	4650      	mov	r0, sl
 8005a40:	f008 fa3e 	bl	800dec0 <GetUart>
 8005a44:	6803      	ldr	r3, [r0, #0]
 8005a46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 8005a48:	783a      	ldrb	r2, [r7, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d0ce      	beq.n	80059ee <testportCommand+0x4a>
     	else if (result == BOS_ERR_Keyword){
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8005a50:	002a      	movs	r2, r5
 8005a52:	4940      	ldr	r1, [pc, #256]	; (8005b54 <testportCommand+0x1b0>)
 8005a54:	0020      	movs	r0, r4
 8005a56:	f00e fe7f 	bl	8014758 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8005a5a:	0020      	movs	r0, r4
 8005a5c:	f7fa fb5c 	bl	8000118 <strlen>
 8005a60:	b282      	uxth	r2, r0
 8005a62:	4b39      	ldr	r3, [pc, #228]	; (8005b48 <testportCommand+0x1a4>)
 8005a64:	7818      	ldrb	r0, [r3, #0]
 8005a66:	2364      	movs	r3, #100	; 0x64
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	3b5a      	subs	r3, #90	; 0x5a
 8005a6c:	0021      	movs	r1, r4
 8005a6e:	f008 fa49 	bl	800df04 <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8005a72:	2254      	movs	r2, #84	; 0x54
 8005a74:	4938      	ldr	r1, [pc, #224]	; (8005b58 <testportCommand+0x1b4>)
 8005a76:	0020      	movs	r0, r4
 8005a78:	f00e fc39 	bl	80142ee <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 8005a7c:	0020      	movs	r0, r4
 8005a7e:	f7fa fb4b 	bl	8000118 <strlen>
 8005a82:	b282      	uxth	r2, r0
 8005a84:	4b30      	ldr	r3, [pc, #192]	; (8005b48 <testportCommand+0x1a4>)
 8005a86:	7818      	ldrb	r0, [r3, #0]
 8005a88:	2364      	movs	r3, #100	; 0x64
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	3b5a      	subs	r3, #90	; 0x5a
 8005a8e:	0021      	movs	r1, r4
 8005a90:	f008 fa38 	bl	800df04 <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8005a94:	3601      	adds	r6, #1
 8005a96:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <testportCommand+0x1a4>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	4a2f      	ldr	r2, [pc, #188]	; (8005b5c <testportCommand+0x1b8>)
 8005aa0:	18d3      	adds	r3, r2, r3
 8005aa2:	5d9b      	ldrb	r3, [r3, r6]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1b4      	bne.n	8005a12 <testportCommand+0x6e>
 8005aa8:	4692      	mov	sl, r2
 8005aaa:	4f27      	ldr	r7, [pc, #156]	; (8005b48 <testportCommand+0x1a4>)
 8005aac:	2001      	movs	r0, #1
 8005aae:	f00a ff59 	bl	8010964 <HAL_Delay>
 8005ab2:	783b      	ldrb	r3, [r7, #0]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	019b      	lsls	r3, r3, #6
 8005ab8:	4453      	add	r3, sl
 8005aba:	5d9b      	ldrb	r3, [r3, r6]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f5      	beq.n	8005aac <testportCommand+0x108>
 8005ac0:	e7a7      	b.n	8005a12 <testportCommand+0x6e>
       LastEnter++;
        }
      }
    }
	else if (pcParameterString1[0] == 'p') {
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	56eb      	ldrsb	r3, [r5, r3]
 8005ac6:	2b70      	cmp	r3, #112	; 0x70
 8005ac8:	d005      	beq.n	8005ad6 <testportCommand+0x132>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
	else if (result == BOS_ERR_Keyword)  
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
    }
    else {
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005aca:	220f      	movs	r2, #15
 8005acc:	4924      	ldr	r1, [pc, #144]	; (8005b60 <testportCommand+0x1bc>)
 8005ace:	0020      	movs	r0, r4
 8005ad0:	f00e fc0d 	bl	80142ee <memcpy>
 8005ad4:	e021      	b.n	8005b1a <testportCommand+0x176>
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8005ad6:	1c68      	adds	r0, r5, #1
 8005ad8:	f00e f97f 	bl	8013dda <atol>
 8005adc:	0005      	movs	r5, r0
 8005ade:	b2c7      	uxtb	r7, r0
    if(portt>0 && portt<=NumOfPorts)
 8005ae0:	1e7b      	subs	r3, r7, #1
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	d825      	bhi.n	8005b32 <testportCommand+0x18e>
        WriteVaule[0]=rand();
 8005ae6:	f00e fc23 	bl	8014330 <rand>
 8005aea:	ae02      	add	r6, sp, #8
 8005aec:	7030      	strb	r0, [r6, #0]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8005aee:	2364      	movs	r3, #100	; 0x64
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	3b32      	subs	r3, #50	; 0x32
 8005af4:	2201      	movs	r2, #1
 8005af6:	0031      	movs	r1, r6
 8005af8:	0038      	movs	r0, r7
 8005afa:	f008 fa03 	bl	800df04 <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8005afe:	0038      	movs	r0, r7
 8005b00:	f008 f9de 	bl	800dec0 <GetUart>
 8005b04:	6803      	ldr	r3, [r0, #0]
 8005b06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 8005b08:	7832      	ldrb	r2, [r6, #0]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d10a      	bne.n	8005b26 <testportCommand+0x182>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8005b10:	b2ea      	uxtb	r2, r5
 8005b12:	490f      	ldr	r1, [pc, #60]	; (8005b50 <testportCommand+0x1ac>)
 8005b14:	0020      	movs	r0, r4
 8005b16:	f00e fe1f 	bl	8014758 <sprintf>
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	b005      	add	sp, #20
 8005b1e:	bc0c      	pop	{r2, r3}
 8005b20:	4690      	mov	r8, r2
 8005b22:	469a      	mov	sl, r3
 8005b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8005b26:	b2ea      	uxtb	r2, r5
 8005b28:	490a      	ldr	r1, [pc, #40]	; (8005b54 <testportCommand+0x1b0>)
 8005b2a:	0020      	movs	r0, r4
 8005b2c:	f00e fe14 	bl	8014758 <sprintf>
 8005b30:	e7f3      	b.n	8005b1a <testportCommand+0x176>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8005b32:	221b      	movs	r2, #27
 8005b34:	490b      	ldr	r1, [pc, #44]	; (8005b64 <testportCommand+0x1c0>)
 8005b36:	0020      	movs	r0, r4
 8005b38:	f00e fbd9 	bl	80142ee <memcpy>
	return pdFALSE;
 8005b3c:	e7ed      	b.n	8005b1a <testportCommand+0x176>
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	08018b58 	.word	0x08018b58
 8005b44:	08018f34 	.word	0x08018f34
 8005b48:	20000b07 	.word	0x20000b07
 8005b4c:	200014bc 	.word	0x200014bc
 8005b50:	0801b134 	.word	0x0801b134
 8005b54:	0801b150 	.word	0x0801b150
 8005b58:	0801b164 	.word	0x0801b164
 8005b5c:	2000133c 	.word	0x2000133c
 8005b60:	0801b1b8 	.word	0x0801b1b8
 8005b64:	0801b1c8 	.word	0x0801b1c8

08005b68 <unbridgeCommand>:
{	
 8005b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	0004      	movs	r4, r0
 8005b6e:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d101      	bne.n	8005b7e <unbridgeCommand+0x16>
 8005b7a:	b672      	cpsid	i
 8005b7c:	e7fe      	b.n	8005b7c <unbridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005b7e:	aa01      	add	r2, sp, #4
 8005b80:	2101      	movs	r1, #1
 8005b82:	0028      	movs	r0, r5
 8005b84:	f008 ffdc 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005b88:	2300      	movs	r3, #0
 8005b8a:	56c3      	ldrsb	r3, [r0, r3]
 8005b8c:	2b70      	cmp	r3, #112	; 0x70
 8005b8e:	d00e      	beq.n	8005bae <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005b90:	466a      	mov	r2, sp
 8005b92:	2102      	movs	r1, #2
 8005b94:	0028      	movs	r0, r5
 8005b96:	f008 ffd3 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	56c3      	ldrsb	r3, [r0, r3]
 8005b9e:	2b70      	cmp	r3, #112	; 0x70
 8005ba0:	d01e      	beq.n	8005be0 <unbridgeCommand+0x78>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005ba2:	220f      	movs	r2, #15
 8005ba4:	491a      	ldr	r1, [pc, #104]	; (8005c10 <unbridgeCommand+0xa8>)
 8005ba6:	0020      	movs	r0, r4
 8005ba8:	f00e fba1 	bl	80142ee <memcpy>
 8005bac:	e015      	b.n	8005bda <unbridgeCommand+0x72>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f00e f913 	bl	8013dda <atol>
 8005bb4:	0006      	movs	r6, r0
 8005bb6:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005bb8:	466a      	mov	r2, sp
 8005bba:	2102      	movs	r1, #2
 8005bbc:	0028      	movs	r0, r5
 8005bbe:	f008 ffbf 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	56c3      	ldrsb	r3, [r0, r3]
 8005bc6:	2b70      	cmp	r3, #112	; 0x70
 8005bc8:	d00e      	beq.n	8005be8 <unbridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 8005bca:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam) 
 8005bcc:	2867      	cmp	r0, #103	; 0x67
 8005bce:	d0e8      	beq.n	8005ba2 <unbridgeCommand+0x3a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005bd0:	2219      	movs	r2, #25
 8005bd2:	4910      	ldr	r1, [pc, #64]	; (8005c14 <unbridgeCommand+0xac>)
 8005bd4:	0020      	movs	r0, r4
 8005bd6:	f00e fb8a 	bl	80142ee <memcpy>
}
 8005bda:	2000      	movs	r0, #0
 8005bdc:	b003      	add	sp, #12
 8005bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005be0:	3001      	adds	r0, #1
 8005be2:	f00e f8fa 	bl	8013dda <atol>
 8005be6:	e7dc      	b.n	8005ba2 <unbridgeCommand+0x3a>
 8005be8:	3001      	adds	r0, #1
 8005bea:	f00e f8f6 	bl	8013dda <atol>
 8005bee:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 8005bf0:	b2c1      	uxtb	r1, r0
 8005bf2:	0038      	movs	r0, r7
 8005bf4:	f7fe ff6c 	bl	8004ad0 <Unbridge>
	if (result == BOS_OK) 
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d1e7      	bne.n	8005bcc <unbridgeCommand+0x64>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005bfc:	22ff      	movs	r2, #255	; 0xff
 8005bfe:	002b      	movs	r3, r5
 8005c00:	4013      	ands	r3, r2
 8005c02:	4032      	ands	r2, r6
 8005c04:	4904      	ldr	r1, [pc, #16]	; (8005c18 <unbridgeCommand+0xb0>)
 8005c06:	0020      	movs	r0, r4
 8005c08:	f00e fda6 	bl	8014758 <sprintf>
 8005c0c:	e7e5      	b.n	8005bda <unbridgeCommand+0x72>
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	0801b1b8 	.word	0x0801b1b8
 8005c14:	0801b280 	.word	0x0801b280
 8005c18:	0801b260 	.word	0x0801b260

08005c1c <bridgeCommand>:
{	
 8005c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	0004      	movs	r4, r0
 8005c22:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d101      	bne.n	8005c32 <bridgeCommand+0x16>
 8005c2e:	b672      	cpsid	i
 8005c30:	e7fe      	b.n	8005c30 <bridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005c32:	aa01      	add	r2, sp, #4
 8005c34:	2101      	movs	r1, #1
 8005c36:	0028      	movs	r0, r5
 8005c38:	f008 ff82 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	56c3      	ldrsb	r3, [r0, r3]
 8005c40:	2b70      	cmp	r3, #112	; 0x70
 8005c42:	d00e      	beq.n	8005c62 <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005c44:	466a      	mov	r2, sp
 8005c46:	2102      	movs	r1, #2
 8005c48:	0028      	movs	r0, r5
 8005c4a:	f008 ff79 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005c4e:	2300      	movs	r3, #0
 8005c50:	56c3      	ldrsb	r3, [r0, r3]
 8005c52:	2b70      	cmp	r3, #112	; 0x70
 8005c54:	d01e      	beq.n	8005c94 <bridgeCommand+0x78>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005c56:	220f      	movs	r2, #15
 8005c58:	491a      	ldr	r1, [pc, #104]	; (8005cc4 <bridgeCommand+0xa8>)
 8005c5a:	0020      	movs	r0, r4
 8005c5c:	f00e fb47 	bl	80142ee <memcpy>
 8005c60:	e015      	b.n	8005c8e <bridgeCommand+0x72>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005c62:	3001      	adds	r0, #1
 8005c64:	f00e f8b9 	bl	8013dda <atol>
 8005c68:	0006      	movs	r6, r0
 8005c6a:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005c6c:	466a      	mov	r2, sp
 8005c6e:	2102      	movs	r1, #2
 8005c70:	0028      	movs	r0, r5
 8005c72:	f008 ff65 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005c76:	2300      	movs	r3, #0
 8005c78:	56c3      	ldrsb	r3, [r0, r3]
 8005c7a:	2b70      	cmp	r3, #112	; 0x70
 8005c7c:	d00e      	beq.n	8005c9c <bridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 8005c7e:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam) 
 8005c80:	2867      	cmp	r0, #103	; 0x67
 8005c82:	d0e8      	beq.n	8005c56 <bridgeCommand+0x3a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005c84:	2217      	movs	r2, #23
 8005c86:	4910      	ldr	r1, [pc, #64]	; (8005cc8 <bridgeCommand+0xac>)
 8005c88:	0020      	movs	r0, r4
 8005c8a:	f00e fb30 	bl	80142ee <memcpy>
}
 8005c8e:	2000      	movs	r0, #0
 8005c90:	b003      	add	sp, #12
 8005c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005c94:	3001      	adds	r0, #1
 8005c96:	f00e f8a0 	bl	8013dda <atol>
 8005c9a:	e7dc      	b.n	8005c56 <bridgeCommand+0x3a>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	f00e f89c 	bl	8013dda <atol>
 8005ca2:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 8005ca4:	b2c1      	uxtb	r1, r0
 8005ca6:	0038      	movs	r0, r7
 8005ca8:	f7fe fefe 	bl	8004aa8 <Bridge>
	if (result == BOS_OK) 
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d1e7      	bne.n	8005c80 <bridgeCommand+0x64>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	002b      	movs	r3, r5
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	4032      	ands	r2, r6
 8005cb8:	4904      	ldr	r1, [pc, #16]	; (8005ccc <bridgeCommand+0xb0>)
 8005cba:	0020      	movs	r0, r4
 8005cbc:	f00e fd4c 	bl	8014758 <sprintf>
 8005cc0:	e7e5      	b.n	8005c8e <bridgeCommand+0x72>
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	0801b1b8 	.word	0x0801b1b8
 8005cc8:	08019870 	.word	0x08019870
 8005ccc:	0801984c 	.word	0x0801984c

08005cd0 <delSnipCommand>:
{	
 8005cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	0005      	movs	r5, r0
 8005cd6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9303      	str	r3, [sp, #12]
	configASSERT( pcWriteBuffer );
 8005cdc:	2d00      	cmp	r5, #0
 8005cde:	d101      	bne.n	8005ce4 <delSnipCommand+0x14>
 8005ce0:	b672      	cpsid	i
 8005ce2:	e7fe      	b.n	8005ce2 <delSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005ce4:	aa03      	add	r2, sp, #12
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	f008 ff2a 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005cec:	f00e f86f 	bl	8013dce <atoi>
 8005cf0:	9001      	str	r0, [sp, #4]
 8005cf2:	b2c6      	uxtb	r6, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005cf4:	2e00      	cmp	r6, #0
 8005cf6:	d003      	beq.n	8005d00 <delSnipCommand+0x30>
 8005cf8:	4b27      	ldr	r3, [pc, #156]	; (8005d98 <delSnipCommand+0xc8>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	42b3      	cmp	r3, r6
 8005cfe:	d207      	bcs.n	8005d10 <delSnipCommand+0x40>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005d00:	2223      	movs	r2, #35	; 0x23
 8005d02:	4926      	ldr	r1, [pc, #152]	; (8005d9c <delSnipCommand+0xcc>)
 8005d04:	0028      	movs	r0, r5
 8005d06:	f00e faf2 	bl	80142ee <memcpy>
}
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	b005      	add	sp, #20
 8005d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index-1].cond.conditionType = 0;
 8005d10:	466b      	mov	r3, sp
 8005d12:	791a      	ldrb	r2, [r3, #4]
 8005d14:	3a01      	subs	r2, #1
 8005d16:	4822      	ldr	r0, [pc, #136]	; (8005da0 <delSnipCommand+0xd0>)
 8005d18:	2314      	movs	r3, #20
 8005d1a:	4353      	muls	r3, r2
 8005d1c:	2700      	movs	r7, #0
 8005d1e:	541f      	strb	r7, [r3, r0]
		snippets[index-1].cond.mathOperator = 0;
 8005d20:	18c4      	adds	r4, r0, r3
 8005d22:	7067      	strb	r7, [r4, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 8005d24:	3302      	adds	r3, #2
 8005d26:	1818      	adds	r0, r3, r0
 8005d28:	2204      	movs	r2, #4
 8005d2a:	0039      	movs	r1, r7
 8005d2c:	f00e fae8 	bl	8014300 <memset>
		snippets[index-1].state = false;
 8005d30:	7427      	strb	r7, [r4, #16]
		free(snippets[index-1].cmd);
 8005d32:	68e0      	ldr	r0, [r4, #12]
 8005d34:	f00e f898 	bl	8013e68 <free>
		snippets[index-1].cmd = NULL;
 8005d38:	60e7      	str	r7, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8005d3a:	4b17      	ldr	r3, [pc, #92]	; (8005d98 <delSnipCommand+0xc8>)
 8005d3c:	781f      	ldrb	r7, [r3, #0]
 8005d3e:	42be      	cmp	r6, r7
 8005d40:	d213      	bcs.n	8005d6a <delSnipCommand+0x9a>
 8005d42:	466b      	mov	r3, sp
 8005d44:	7919      	ldrb	r1, [r3, #4]
 8005d46:	2214      	movs	r2, #20
 8005d48:	0014      	movs	r4, r2
 8005d4a:	434c      	muls	r4, r1
 8005d4c:	4814      	ldr	r0, [pc, #80]	; (8005da0 <delSnipCommand+0xd0>)
 8005d4e:	1824      	adds	r4, r4, r0
 8005d50:	1e7b      	subs	r3, r7, #1
 8005d52:	1b9b      	subs	r3, r3, r6
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	185b      	adds	r3, r3, r1
 8005d58:	4353      	muls	r3, r2
 8005d5a:	1880      	adds	r0, r0, r2
 8005d5c:	181e      	adds	r6, r3, r0
			if (snippets[s].cond.conditionType) {
 8005d5e:	7823      	ldrb	r3, [r4, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10d      	bne.n	8005d80 <delSnipCommand+0xb0>
 8005d64:	3414      	adds	r4, #20
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8005d66:	42b4      	cmp	r4, r6
 8005d68:	d1f9      	bne.n	8005d5e <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005d6a:	1e7b      	subs	r3, r7, #1
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <delSnipCommand+0xc8>)
 8005d6e:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005d70:	f006 f862 	bl	800be38 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005d74:	2236      	movs	r2, #54	; 0x36
 8005d76:	490b      	ldr	r1, [pc, #44]	; (8005da4 <delSnipCommand+0xd4>)
 8005d78:	0028      	movs	r0, r5
 8005d7a:	f00e fab8 	bl	80142ee <memcpy>
 8005d7e:	e7c4      	b.n	8005d0a <delSnipCommand+0x3a>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 8005d80:	2214      	movs	r2, #20
 8005d82:	0021      	movs	r1, r4
 8005d84:	0020      	movs	r0, r4
 8005d86:	3814      	subs	r0, #20
 8005d88:	f00e fab1 	bl	80142ee <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 8005d8c:	2214      	movs	r2, #20
 8005d8e:	2100      	movs	r1, #0
 8005d90:	0020      	movs	r0, r4
 8005d92:	f00e fab5 	bl	8014300 <memset>
 8005d96:	e7e5      	b.n	8005d64 <delSnipCommand+0x94>
 8005d98:	2000128b 	.word	0x2000128b
 8005d9c:	08019990 	.word	0x08019990
 8005da0:	20006a34 	.word	0x20006a34
 8005da4:	08019958 	.word	0x08019958

08005da8 <pauseSnipCommand>:
{	
 8005da8:	b510      	push	{r4, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	0004      	movs	r4, r0
 8005dae:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005db4:	2c00      	cmp	r4, #0
 8005db6:	d101      	bne.n	8005dbc <pauseSnipCommand+0x14>
 8005db8:	b672      	cpsid	i
 8005dba:	e7fe      	b.n	8005dba <pauseSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005dbc:	aa01      	add	r2, sp, #4
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	f008 febe 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005dc4:	f00e f803 	bl	8013dce <atoi>
 8005dc8:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <pauseSnipCommand+0x2e>
 8005dce:	4a0e      	ldr	r2, [pc, #56]	; (8005e08 <pauseSnipCommand+0x60>)
 8005dd0:	7812      	ldrb	r2, [r2, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d207      	bcs.n	8005de6 <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005dd6:	2223      	movs	r2, #35	; 0x23
 8005dd8:	490c      	ldr	r1, [pc, #48]	; (8005e0c <pauseSnipCommand+0x64>)
 8005dda:	0020      	movs	r0, r4
 8005ddc:	f00e fa87 	bl	80142ee <memcpy>
}
 8005de0:	2000      	movs	r0, #0
 8005de2:	b002      	add	sp, #8
 8005de4:	bd10      	pop	{r4, pc}
		snippets[index-1].state = false;
 8005de6:	b2c0      	uxtb	r0, r0
 8005de8:	3801      	subs	r0, #1
 8005dea:	2314      	movs	r3, #20
 8005dec:	4343      	muls	r3, r0
 8005dee:	4808      	ldr	r0, [pc, #32]	; (8005e10 <pauseSnipCommand+0x68>)
 8005df0:	18c0      	adds	r0, r0, r3
 8005df2:	2300      	movs	r3, #0
 8005df4:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005df6:	f006 f81f 	bl	800be38 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005dfa:	2235      	movs	r2, #53	; 0x35
 8005dfc:	4905      	ldr	r1, [pc, #20]	; (8005e14 <pauseSnipCommand+0x6c>)
 8005dfe:	0020      	movs	r0, r4
 8005e00:	f00e fa75 	bl	80142ee <memcpy>
 8005e04:	e7ec      	b.n	8005de0 <pauseSnipCommand+0x38>
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	2000128b 	.word	0x2000128b
 8005e0c:	08019990 	.word	0x08019990
 8005e10:	20006a34 	.word	0x20006a34
 8005e14:	08019da0 	.word	0x08019da0

08005e18 <actSnipCommand>:
{	
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	0004      	movs	r4, r0
 8005e1e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005e24:	2c00      	cmp	r4, #0
 8005e26:	d101      	bne.n	8005e2c <actSnipCommand+0x14>
 8005e28:	b672      	cpsid	i
 8005e2a:	e7fe      	b.n	8005e2a <actSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005e2c:	aa01      	add	r2, sp, #4
 8005e2e:	2101      	movs	r1, #1
 8005e30:	f008 fe86 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005e34:	f00d ffcb 	bl	8013dce <atoi>
 8005e38:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <actSnipCommand+0x2e>
 8005e3e:	4a0e      	ldr	r2, [pc, #56]	; (8005e78 <actSnipCommand+0x60>)
 8005e40:	7812      	ldrb	r2, [r2, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d207      	bcs.n	8005e56 <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005e46:	2223      	movs	r2, #35	; 0x23
 8005e48:	490c      	ldr	r1, [pc, #48]	; (8005e7c <actSnipCommand+0x64>)
 8005e4a:	0020      	movs	r0, r4
 8005e4c:	f00e fa4f 	bl	80142ee <memcpy>
}
 8005e50:	2000      	movs	r0, #0
 8005e52:	b002      	add	sp, #8
 8005e54:	bd10      	pop	{r4, pc}
		snippets[index-1].state = true;
 8005e56:	b2c0      	uxtb	r0, r0
 8005e58:	3801      	subs	r0, #1
 8005e5a:	2314      	movs	r3, #20
 8005e5c:	4343      	muls	r3, r0
 8005e5e:	4808      	ldr	r0, [pc, #32]	; (8005e80 <actSnipCommand+0x68>)
 8005e60:	18c0      	adds	r0, r0, r3
 8005e62:	2301      	movs	r3, #1
 8005e64:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005e66:	f005 ffe7 	bl	800be38 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005e6a:	2238      	movs	r2, #56	; 0x38
 8005e6c:	4905      	ldr	r1, [pc, #20]	; (8005e84 <actSnipCommand+0x6c>)
 8005e6e:	0020      	movs	r0, r4
 8005e70:	f00e fa3d 	bl	80142ee <memcpy>
 8005e74:	e7ec      	b.n	8005e50 <actSnipCommand+0x38>
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	2000128b 	.word	0x2000128b
 8005e7c:	08019990 	.word	0x08019990
 8005e80:	20006a34 	.word	0x20006a34
 8005e84:	08019754 	.word	0x08019754

08005e88 <snipCommand>:
{	
 8005e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8a:	46d6      	mov	lr, sl
 8005e8c:	464f      	mov	r7, r9
 8005e8e:	4646      	mov	r6, r8
 8005e90:	b5c0      	push	{r6, r7, lr}
 8005e92:	b08a      	sub	sp, #40	; 0x28
 8005e94:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 8005e96:	aa06      	add	r2, sp, #24
 8005e98:	4b7a      	ldr	r3, [pc, #488]	; (8006084 <snipCommand+0x1fc>)
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005e9e:	c223      	stmia	r2!, {r0, r1, r5}
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 8005ea4:	2c00      	cmp	r4, #0
 8005ea6:	d101      	bne.n	8005eac <snipCommand+0x24>
 8005ea8:	b672      	cpsid	i
 8005eaa:	e7fe      	b.n	8005eaa <snipCommand+0x22>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 8005eac:	4b76      	ldr	r3, [pc, #472]	; (8006088 <snipCommand+0x200>)
 8005eae:	7818      	ldrb	r0, [r3, #0]
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	425b      	negs	r3, r3
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	3333      	adds	r3, #51	; 0x33
 8005eb8:	2237      	movs	r2, #55	; 0x37
 8005eba:	4974      	ldr	r1, [pc, #464]	; (800608c <snipCommand+0x204>)
 8005ebc:	f008 f822 	bl	800df04 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005ec0:	4b73      	ldr	r3, [pc, #460]	; (8006090 <snipCommand+0x208>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d100      	bne.n	8005eca <snipCommand+0x42>
 8005ec8:	e0d0      	b.n	800606c <snipCommand+0x1e4>
 8005eca:	2500      	movs	r5, #0
		if (snippets[s].cond.conditionType)
 8005ecc:	4b71      	ldr	r3, [pc, #452]	; (8006094 <snipCommand+0x20c>)
 8005ece:	4698      	mov	r8, r3
 8005ed0:	e0ba      	b.n	8006048 <snipCommand+0x1c0>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 8005ed2:	4b70      	ldr	r3, [pc, #448]	; (8006094 <snipCommand+0x20c>)
 8005ed4:	4699      	mov	r9, r3
 8005ed6:	00ab      	lsls	r3, r5, #2
 8005ed8:	469a      	mov	sl, r3
 8005eda:	195b      	adds	r3, r3, r5
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	444b      	add	r3, r9
 8005ee0:	7c1a      	ldrb	r2, [r3, #16]
 8005ee2:	00d3      	lsls	r3, r2, #3
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	aa06      	add	r2, sp, #24
 8005ee8:	4694      	mov	ip, r2
 8005eea:	4463      	add	r3, ip
 8005eec:	003a      	movs	r2, r7
 8005eee:	496a      	ldr	r1, [pc, #424]	; (8006098 <snipCommand+0x210>)
 8005ef0:	0020      	movs	r0, r4
 8005ef2:	f00e fc31 	bl	8014758 <sprintf>
		switch (snippets[s].cond.conditionType)
 8005ef6:	4653      	mov	r3, sl
 8005ef8:	195b      	adds	r3, r3, r5
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	464a      	mov	r2, r9
 8005efe:	5c9b      	ldrb	r3, [r3, r2]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d02d      	beq.n	8005f60 <snipCommand+0xd8>
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d000      	beq.n	8005f0a <snipCommand+0x82>
 8005f08:	e0a9      	b.n	800605e <snipCommand+0x1d6>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005f0a:	00a9      	lsls	r1, r5, #2
 8005f0c:	1949      	adds	r1, r1, r5
 8005f0e:	0089      	lsls	r1, r1, #2
 8005f10:	3106      	adds	r1, #6
 8005f12:	4b60      	ldr	r3, [pc, #384]	; (8006094 <snipCommand+0x20c>)
 8005f14:	4699      	mov	r9, r3
 8005f16:	4449      	add	r1, r9
 8005f18:	2204      	movs	r2, #4
 8005f1a:	a805      	add	r0, sp, #20
 8005f1c:	f00e f9e7 	bl	80142ee <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 8005f20:	00ad      	lsls	r5, r5, #2
 8005f22:	19ad      	adds	r5, r5, r6
 8005f24:	00ad      	lsls	r5, r5, #2
 8005f26:	444d      	add	r5, r9
 8005f28:	78ea      	ldrb	r2, [r5, #3]
 8005f2a:	3a01      	subs	r2, #1
 8005f2c:	0053      	lsls	r3, r2, #1
 8005f2e:	189b      	adds	r3, r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4a5a      	ldr	r2, [pc, #360]	; (800609c <snipCommand+0x214>)
 8005f34:	18d3      	adds	r3, r2, r3
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4699      	mov	r9, r3
 8005f3a:	9805      	ldr	r0, [sp, #20]
 8005f3c:	f7fc ff0c 	bl	8002d58 <__aeabi_f2d>
 8005f40:	9002      	str	r0, [sp, #8]
 8005f42:	9103      	str	r1, [sp, #12]
 8005f44:	786b      	ldrb	r3, [r5, #1]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	005a      	lsls	r2, r3, #1
 8005f4a:	18d2      	adds	r2, r2, r3
 8005f4c:	4b54      	ldr	r3, [pc, #336]	; (80060a0 <snipCommand+0x218>)
 8005f4e:	189b      	adds	r3, r3, r2
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	464b      	mov	r3, r9
 8005f54:	0022      	movs	r2, r4
 8005f56:	4953      	ldr	r1, [pc, #332]	; (80060a4 <snipCommand+0x21c>)
 8005f58:	0020      	movs	r0, r4
 8005f5a:	f00e fbfd 	bl	8014758 <sprintf>
				break;
 8005f5e:	e07e      	b.n	800605e <snipCommand+0x1d6>
				switch (snippets[s].cond.buffer1[1])
 8005f60:	00ab      	lsls	r3, r5, #2
 8005f62:	195b      	adds	r3, r3, r5
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4a4b      	ldr	r2, [pc, #300]	; (8006094 <snipCommand+0x20c>)
 8005f68:	18d3      	adds	r3, r2, r3
 8005f6a:	78db      	ldrb	r3, [r3, #3]
 8005f6c:	3b05      	subs	r3, #5
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	2a09      	cmp	r2, #9
 8005f72:	d874      	bhi.n	800605e <snipCommand+0x1d6>
 8005f74:	0093      	lsls	r3, r2, #2
 8005f76:	4a4c      	ldr	r2, [pc, #304]	; (80060a8 <snipCommand+0x220>)
 8005f78:	58d3      	ldr	r3, [r2, r3]
 8005f7a:	469f      	mov	pc, r3
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005f7c:	2314      	movs	r3, #20
 8005f7e:	436b      	muls	r3, r5
 8005f80:	4a44      	ldr	r2, [pc, #272]	; (8006094 <snipCommand+0x20c>)
 8005f82:	18d2      	adds	r2, r2, r3
 8005f84:	7893      	ldrb	r3, [r2, #2]
 8005f86:	68d2      	ldr	r2, [r2, #12]
 8005f88:	9200      	str	r2, [sp, #0]
 8005f8a:	0022      	movs	r2, r4
 8005f8c:	4947      	ldr	r1, [pc, #284]	; (80060ac <snipCommand+0x224>)
 8005f8e:	0020      	movs	r0, r4
 8005f90:	f00e fbe2 	bl	8014758 <sprintf>
        		break;
 8005f94:	e063      	b.n	800605e <snipCommand+0x1d6>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005f96:	2314      	movs	r3, #20
 8005f98:	436b      	muls	r3, r5
 8005f9a:	4a3e      	ldr	r2, [pc, #248]	; (8006094 <snipCommand+0x20c>)
 8005f9c:	18d2      	adds	r2, r2, r3
 8005f9e:	7893      	ldrb	r3, [r2, #2]
 8005fa0:	68d2      	ldr	r2, [r2, #12]
 8005fa2:	9200      	str	r2, [sp, #0]
 8005fa4:	0022      	movs	r2, r4
 8005fa6:	4942      	ldr	r1, [pc, #264]	; (80060b0 <snipCommand+0x228>)
 8005fa8:	0020      	movs	r0, r4
 8005faa:	f00e fbd5 	bl	8014758 <sprintf>
        		break;
 8005fae:	e056      	b.n	800605e <snipCommand+0x1d6>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005fb0:	2314      	movs	r3, #20
 8005fb2:	436b      	muls	r3, r5
 8005fb4:	4a37      	ldr	r2, [pc, #220]	; (8006094 <snipCommand+0x20c>)
 8005fb6:	18d2      	adds	r2, r2, r3
 8005fb8:	7893      	ldrb	r3, [r2, #2]
 8005fba:	68d1      	ldr	r1, [r2, #12]
 8005fbc:	9101      	str	r1, [sp, #4]
 8005fbe:	7912      	ldrb	r2, [r2, #4]
 8005fc0:	9200      	str	r2, [sp, #0]
 8005fc2:	0022      	movs	r2, r4
 8005fc4:	493b      	ldr	r1, [pc, #236]	; (80060b4 <snipCommand+0x22c>)
 8005fc6:	0020      	movs	r0, r4
 8005fc8:	f00e fbc6 	bl	8014758 <sprintf>
        		break;
 8005fcc:	e047      	b.n	800605e <snipCommand+0x1d6>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8005fce:	2314      	movs	r3, #20
 8005fd0:	436b      	muls	r3, r5
 8005fd2:	4a30      	ldr	r2, [pc, #192]	; (8006094 <snipCommand+0x20c>)
 8005fd4:	18d2      	adds	r2, r2, r3
 8005fd6:	7893      	ldrb	r3, [r2, #2]
 8005fd8:	68d1      	ldr	r1, [r2, #12]
 8005fda:	9101      	str	r1, [sp, #4]
 8005fdc:	7912      	ldrb	r2, [r2, #4]
 8005fde:	9200      	str	r2, [sp, #0]
 8005fe0:	0022      	movs	r2, r4
 8005fe2:	4935      	ldr	r1, [pc, #212]	; (80060b8 <snipCommand+0x230>)
 8005fe4:	0020      	movs	r0, r4
 8005fe6:	f00e fbb7 	bl	8014758 <sprintf>
        		break;						
 8005fea:	e038      	b.n	800605e <snipCommand+0x1d6>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8005fec:	4b33      	ldr	r3, [pc, #204]	; (80060bc <snipCommand+0x234>)
 8005fee:	0022      	movs	r2, r4
 8005ff0:	4933      	ldr	r1, [pc, #204]	; (80060c0 <snipCommand+0x238>)
 8005ff2:	0020      	movs	r0, r4
 8005ff4:	f00e fbb0 	bl	8014758 <sprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 8005ff8:	4830      	ldr	r0, [pc, #192]	; (80060bc <snipCommand+0x234>)
 8005ffa:	f7fa f88d 	bl	8000118 <strlen>
 8005ffe:	0002      	movs	r2, r0
 8006000:	2100      	movs	r1, #0
 8006002:	482e      	ldr	r0, [pc, #184]	; (80060bc <snipCommand+0x234>)
 8006004:	f00e f97c 	bl	8014300 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8006008:	0029      	movs	r1, r5
 800600a:	68f0      	ldr	r0, [r6, #12]
 800600c:	f7ff fb60 	bl	80056d0 <ParseSnippetCommand>
 8006010:	2800      	cmp	r0, #0
 8006012:	d1eb      	bne.n	8005fec <snipCommand+0x164>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 8006014:	0020      	movs	r0, r4
 8006016:	f7fa f87f 	bl	8000118 <strlen>
 800601a:	1820      	adds	r0, r4, r0
 800601c:	220c      	movs	r2, #12
 800601e:	4929      	ldr	r1, [pc, #164]	; (80060c4 <snipCommand+0x23c>)
 8006020:	f00e f965 	bl	80142ee <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006024:	0020      	movs	r0, r4
 8006026:	f7fa f877 	bl	8000118 <strlen>
 800602a:	b282      	uxth	r2, r0
 800602c:	4b16      	ldr	r3, [pc, #88]	; (8006088 <snipCommand+0x200>)
 800602e:	7818      	ldrb	r0, [r3, #0]
 8006030:	2301      	movs	r3, #1
 8006032:	425b      	negs	r3, r3
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	3333      	adds	r3, #51	; 0x33
 8006038:	0021      	movs	r1, r4
 800603a:	f007 ff63 	bl	800df04 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 800603e:	003d      	movs	r5, r7
 8006040:	4b13      	ldr	r3, [pc, #76]	; (8006090 <snipCommand+0x208>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	42bb      	cmp	r3, r7
 8006046:	d911      	bls.n	800606c <snipCommand+0x1e4>
 8006048:	1c6f      	adds	r7, r5, #1
 800604a:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 800604c:	002e      	movs	r6, r5
 800604e:	00ab      	lsls	r3, r5, #2
 8006050:	195b      	adds	r3, r3, r5
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4642      	mov	r2, r8
 8006056:	5c9b      	ldrb	r3, [r3, r2]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d000      	beq.n	800605e <snipCommand+0x1d6>
 800605c:	e739      	b.n	8005ed2 <snipCommand+0x4a>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 800605e:	4d17      	ldr	r5, [pc, #92]	; (80060bc <snipCommand+0x234>)
 8006060:	00b3      	lsls	r3, r6, #2
 8006062:	199b      	adds	r3, r3, r6
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4e0b      	ldr	r6, [pc, #44]	; (8006094 <snipCommand+0x20c>)
 8006068:	18f6      	adds	r6, r6, r3
 800606a:	e7cd      	b.n	8006008 <snipCommand+0x180>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 800606c:	22a7      	movs	r2, #167	; 0xa7
 800606e:	4916      	ldr	r1, [pc, #88]	; (80060c8 <snipCommand+0x240>)
 8006070:	0020      	movs	r0, r4
 8006072:	f00e f93c 	bl	80142ee <memcpy>
}
 8006076:	2000      	movs	r0, #0
 8006078:	b00a      	add	sp, #40	; 0x28
 800607a:	bc1c      	pop	{r2, r3, r4}
 800607c:	4690      	mov	r8, r2
 800607e:	4699      	mov	r9, r3
 8006080:	46a2      	mov	sl, r4
 8006082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006084:	08018b58 	.word	0x08018b58
 8006088:	20000b07 	.word	0x20000b07
 800608c:	0801a240 	.word	0x0801a240
 8006090:	2000128b 	.word	0x2000128b
 8006094:	20006a34 	.word	0x20006a34
 8006098:	0801a278 	.word	0x0801a278
 800609c:	20000084 	.word	0x20000084
 80060a0:	08019d64 	.word	0x08019d64
 80060a4:	0801a2e4 	.word	0x0801a2e4
 80060a8:	08019708 	.word	0x08019708
 80060ac:	0801a284 	.word	0x0801a284
 80060b0:	0801a298 	.word	0x0801a298
 80060b4:	0801a2b0 	.word	0x0801a2b0
 80060b8:	0801a2c8 	.word	0x0801a2c8
 80060bc:	200012bc 	.word	0x200012bc
 80060c0:	0801a2f4 	.word	0x0801a2f4
 80060c4:	0801a2fc 	.word	0x0801a2fc
 80060c8:	0801a308 	.word	0x0801a308

080060cc <idcodeCommand>:
{	
 80060cc:	b510      	push	{r4, lr}
 80060ce:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80060d0:	d101      	bne.n	80060d6 <idcodeCommand+0xa>
 80060d2:	b672      	cpsid	i
 80060d4:	e7fe      	b.n	80060d4 <idcodeCommand+0x8>
	dev = HAL_GetDEVID();
 80060d6:	f00a fc59 	bl	801098c <HAL_GetDEVID>
	switch (dev)
 80060da:	0403      	lsls	r3, r0, #16
 80060dc:	0c1b      	lsrs	r3, r3, #16
 80060de:	4a1b      	ldr	r2, [pc, #108]	; (800614c <idcodeCommand+0x80>)
 80060e0:	4694      	mov	ip, r2
 80060e2:	4463      	add	r3, ip
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d82a      	bhi.n	800613e <idcodeCommand+0x72>
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4a19      	ldr	r2, [pc, #100]	; (8006150 <idcodeCommand+0x84>)
 80060ec:	58d3      	ldr	r3, [r2, r3]
 80060ee:	469f      	mov	pc, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 80060f0:	4a18      	ldr	r2, [pc, #96]	; (8006154 <idcodeCommand+0x88>)
 80060f2:	4919      	ldr	r1, [pc, #100]	; (8006158 <idcodeCommand+0x8c>)
 80060f4:	0020      	movs	r0, r4
 80060f6:	f00e fb2f 	bl	8014758 <sprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 80060fa:	f00a fc41 	bl	8010980 <HAL_GetREVID>
 80060fe:	0b03      	lsrs	r3, r0, #12
 8006100:	0022      	movs	r2, r4
 8006102:	4916      	ldr	r1, [pc, #88]	; (800615c <idcodeCommand+0x90>)
 8006104:	0020      	movs	r0, r4
 8006106:	f00e fb27 	bl	8014758 <sprintf>
}
 800610a:	2000      	movs	r0, #0
 800610c:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 800610e:	4a14      	ldr	r2, [pc, #80]	; (8006160 <idcodeCommand+0x94>)
 8006110:	4911      	ldr	r1, [pc, #68]	; (8006158 <idcodeCommand+0x8c>)
 8006112:	0020      	movs	r0, r4
 8006114:	f00e fb20 	bl	8014758 <sprintf>
  		break;
 8006118:	e7ef      	b.n	80060fa <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 800611a:	4a12      	ldr	r2, [pc, #72]	; (8006164 <idcodeCommand+0x98>)
 800611c:	490e      	ldr	r1, [pc, #56]	; (8006158 <idcodeCommand+0x8c>)
 800611e:	0020      	movs	r0, r4
 8006120:	f00e fb1a 	bl	8014758 <sprintf>
  		break;
 8006124:	e7e9      	b.n	80060fa <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 8006126:	4a10      	ldr	r2, [pc, #64]	; (8006168 <idcodeCommand+0x9c>)
 8006128:	490b      	ldr	r1, [pc, #44]	; (8006158 <idcodeCommand+0x8c>)
 800612a:	0020      	movs	r0, r4
 800612c:	f00e fb14 	bl	8014758 <sprintf>
  		break;
 8006130:	e7e3      	b.n	80060fa <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 8006132:	4a0e      	ldr	r2, [pc, #56]	; (800616c <idcodeCommand+0xa0>)
 8006134:	4908      	ldr	r1, [pc, #32]	; (8006158 <idcodeCommand+0x8c>)
 8006136:	0020      	movs	r0, r4
 8006138:	f00e fb0e 	bl	8014758 <sprintf>
  		break;
 800613c:	e7dd      	b.n	80060fa <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 800613e:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <idcodeCommand+0xa4>)
 8006140:	4905      	ldr	r1, [pc, #20]	; (8006158 <idcodeCommand+0x8c>)
 8006142:	0020      	movs	r0, r4
 8006144:	f00e fb08 	bl	8014758 <sprintf>
  		break;
 8006148:	e7d7      	b.n	80060fa <idcodeCommand+0x2e>
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	fffffbc0 	.word	0xfffffbc0
 8006150:	08019730 	.word	0x08019730
 8006154:	08019c60 	.word	0x08019c60
 8006158:	08019c6c 	.word	0x08019c6c
 800615c:	08019cb8 	.word	0x08019cb8
 8006160:	08019c80 	.word	0x08019c80
 8006164:	08019c8c 	.word	0x08019c8c
 8006168:	08019c98 	.word	0x08019c98
 800616c:	08019ca4 	.word	0x08019ca4
 8006170:	08019cb0 	.word	0x08019cb0

08006174 <uuidCommand>:
{
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006178:	d101      	bne.n	800617e <uuidCommand+0xa>
 800617a:	b672      	cpsid	i
 800617c:	e7fe      	b.n	800617c <uuidCommand+0x8>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 800617e:	220e      	movs	r2, #14
 8006180:	4911      	ldr	r1, [pc, #68]	; (80061c8 <uuidCommand+0x54>)
 8006182:	f00e f8b4 	bl	80142ee <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <uuidCommand+0x58>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4d11      	ldr	r5, [pc, #68]	; (80061d0 <uuidCommand+0x5c>)
 800618c:	0022      	movs	r2, r4
 800618e:	0029      	movs	r1, r5
 8006190:	0020      	movs	r0, r4
 8006192:	f00e fae1 	bl	8014758 <sprintf>
 8006196:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <uuidCommand+0x60>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	0022      	movs	r2, r4
 800619c:	0029      	movs	r1, r5
 800619e:	0020      	movs	r0, r4
 80061a0:	f00e fada 	bl	8014758 <sprintf>
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <uuidCommand+0x64>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	0022      	movs	r2, r4
 80061aa:	0029      	movs	r1, r5
 80061ac:	0020      	movs	r0, r4
 80061ae:	f00e fad3 	bl	8014758 <sprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 80061b2:	0020      	movs	r0, r4
 80061b4:	f7f9 ffb0 	bl	8000118 <strlen>
 80061b8:	1820      	adds	r0, r4, r0
 80061ba:	2203      	movs	r2, #3
 80061bc:	4907      	ldr	r1, [pc, #28]	; (80061dc <uuidCommand+0x68>)
 80061be:	f00e f896 	bl	80142ee <memcpy>
}
 80061c2:	2000      	movs	r0, #0
 80061c4:	bd70      	pop	{r4, r5, r6, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	0801b2ac 	.word	0x0801b2ac
 80061cc:	1ffff7ac 	.word	0x1ffff7ac
 80061d0:	0801b2bc 	.word	0x0801b2bc
 80061d4:	1ffff7b0 	.word	0x1ffff7b0
 80061d8:	1ffff7b4 	.word	0x1ffff7b4
 80061dc:	0801a854 	.word	0x0801a854

080061e0 <timeCommand>:
{
 80061e0:	b510      	push	{r4, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80061e6:	d101      	bne.n	80061ec <timeCommand+0xc>
 80061e8:	b672      	cpsid	i
 80061ea:	e7fe      	b.n	80061ea <timeCommand+0xa>
	GetTimeDate();
 80061ec:	f007 fbe6 	bl	800d9bc <GetTimeDate>
	if (BOS.hourformat == 24)
 80061f0:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <timeCommand+0x80>)
 80061f2:	7b5b      	ldrb	r3, [r3, #13]
 80061f4:	2b18      	cmp	r3, #24
 80061f6:	d004      	beq.n	8006202 <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 80061f8:	2b0c      	cmp	r3, #12
 80061fa:	d00e      	beq.n	800621a <timeCommand+0x3a>
}
 80061fc:	2000      	movs	r0, #0
 80061fe:	b004      	add	sp, #16
 8006200:	bd10      	pop	{r4, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 8006202:	4917      	ldr	r1, [pc, #92]	; (8006260 <timeCommand+0x80>)
 8006204:	7c4b      	ldrb	r3, [r1, #17]
 8006206:	7c8a      	ldrb	r2, [r1, #18]
 8006208:	89c8      	ldrh	r0, [r1, #14]
 800620a:	9001      	str	r0, [sp, #4]
 800620c:	7c09      	ldrb	r1, [r1, #16]
 800620e:	9100      	str	r1, [sp, #0]
 8006210:	4914      	ldr	r1, [pc, #80]	; (8006264 <timeCommand+0x84>)
 8006212:	0020      	movs	r0, r4
 8006214:	f00e faa0 	bl	8014758 <sprintf>
 8006218:	e7f0      	b.n	80061fc <timeCommand+0x1c>
		if (BOS.time.ampm == RTC_AM)
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <timeCommand+0x80>)
 800621c:	7cdb      	ldrb	r3, [r3, #19]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d10d      	bne.n	800623e <timeCommand+0x5e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 8006222:	490f      	ldr	r1, [pc, #60]	; (8006260 <timeCommand+0x80>)
 8006224:	7c4b      	ldrb	r3, [r1, #17]
 8006226:	7c8a      	ldrb	r2, [r1, #18]
 8006228:	480f      	ldr	r0, [pc, #60]	; (8006268 <timeCommand+0x88>)
 800622a:	9002      	str	r0, [sp, #8]
 800622c:	89c8      	ldrh	r0, [r1, #14]
 800622e:	9001      	str	r0, [sp, #4]
 8006230:	7c09      	ldrb	r1, [r1, #16]
 8006232:	9100      	str	r1, [sp, #0]
 8006234:	490d      	ldr	r1, [pc, #52]	; (800626c <timeCommand+0x8c>)
 8006236:	0020      	movs	r0, r4
 8006238:	f00e fa8e 	bl	8014758 <sprintf>
 800623c:	e7de      	b.n	80061fc <timeCommand+0x1c>
		else if (BOS.time.ampm == RTC_PM)
 800623e:	2b02      	cmp	r3, #2
 8006240:	d1dc      	bne.n	80061fc <timeCommand+0x1c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 8006242:	4907      	ldr	r1, [pc, #28]	; (8006260 <timeCommand+0x80>)
 8006244:	7c4b      	ldrb	r3, [r1, #17]
 8006246:	7c8a      	ldrb	r2, [r1, #18]
 8006248:	4809      	ldr	r0, [pc, #36]	; (8006270 <timeCommand+0x90>)
 800624a:	9002      	str	r0, [sp, #8]
 800624c:	89c8      	ldrh	r0, [r1, #14]
 800624e:	9001      	str	r0, [sp, #4]
 8006250:	7c09      	ldrb	r1, [r1, #16]
 8006252:	9100      	str	r1, [sp, #0]
 8006254:	4905      	ldr	r1, [pc, #20]	; (800626c <timeCommand+0x8c>)
 8006256:	0020      	movs	r0, r4
 8006258:	f00e fa7e 	bl	8014758 <sprintf>
 800625c:	e7ce      	b.n	80061fc <timeCommand+0x1c>
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	20006a18 	.word	0x20006a18
 8006264:	0801b1f4 	.word	0x0801b1f4
 8006268:	0801b248 	.word	0x0801b248
 800626c:	0801b21c 	.word	0x0801b21c
 8006270:	0801b24c 	.word	0x0801b24c

08006274 <dateCommand>:
{
 8006274:	b510      	push	{r4, lr}
 8006276:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006278:	d101      	bne.n	800627e <dateCommand+0xa>
 800627a:	b672      	cpsid	i
 800627c:	e7fe      	b.n	800627c <dateCommand+0x8>
	GetTimeDate();
 800627e:	f007 fb9d 	bl	800d9bc <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 8006282:	f7fe fbef 	bl	8004a64 <GetDateString>
 8006286:	0002      	movs	r2, r0
 8006288:	4902      	ldr	r1, [pc, #8]	; (8006294 <dateCommand+0x20>)
 800628a:	0020      	movs	r0, r4
 800628c:	f00e fa64 	bl	8014758 <sprintf>
}
 8006290:	2000      	movs	r0, #0
 8006292:	bd10      	pop	{r4, pc}
 8006294:	08019898 	.word	0x08019898

08006298 <getCommand>:
{
 8006298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629a:	46c6      	mov	lr, r8
 800629c:	b500      	push	{lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	0004      	movs	r4, r0
 80062a2:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d101      	bne.n	80062b2 <getCommand+0x1a>
 80062ae:	b672      	cpsid	i
 80062b0:	e7fe      	b.n	80062b0 <getCommand+0x18>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80062b2:	aa01      	add	r2, sp, #4
 80062b4:	2101      	movs	r1, #1
 80062b6:	0030      	movs	r0, r6
 80062b8:	f008 fc42 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 80062bc:	0005      	movs	r5, r0
 80062be:	4b74      	ldr	r3, [pc, #464]	; (8006490 <getCommand+0x1f8>)
 80062c0:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 80062c2:	2204      	movs	r2, #4
 80062c4:	4973      	ldr	r1, [pc, #460]	; (8006494 <getCommand+0x1fc>)
 80062c6:	f00e fa8b 	bl	80147e0 <strncmp>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d000      	beq.n	80062d0 <getCommand+0x38>
 80062ce:	e090      	b.n	80063f2 <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 80062d0:	1d2f      	adds	r7, r5, #4
 80062d2:	9b01      	ldr	r3, [sp, #4]
 80062d4:	1f1e      	subs	r6, r3, #4
 80062d6:	0032      	movs	r2, r6
 80062d8:	496f      	ldr	r1, [pc, #444]	; (8006498 <getCommand+0x200>)
 80062da:	0038      	movs	r0, r7
 80062dc:	f00e fa80 	bl	80147e0 <strncmp>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d11e      	bne.n	8006322 <getCommand+0x8a>
			if (BOS.response == BOS_RESPONSE_ALL)
 80062e4:	4b6d      	ldr	r3, [pc, #436]	; (800649c <getCommand+0x204>)
 80062e6:	799b      	ldrb	r3, [r3, #6]
 80062e8:	2b60      	cmp	r3, #96	; 0x60
 80062ea:	d109      	bne.n	8006300 <getCommand+0x68>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80062ec:	4a6c      	ldr	r2, [pc, #432]	; (80064a0 <getCommand+0x208>)
 80062ee:	496d      	ldr	r1, [pc, #436]	; (80064a4 <getCommand+0x20c>)
 80062f0:	0020      	movs	r0, r4
 80062f2:	f00e fa31 	bl	8014758 <sprintf>
}
 80062f6:	2000      	movs	r0, #0
 80062f8:	b002      	add	sp, #8
 80062fa:	bc04      	pop	{r2}
 80062fc:	4690      	mov	r8, r2
 80062fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (BOS.response == BOS_RESPONSE_MSG)
 8006300:	2b20      	cmp	r3, #32
 8006302:	d105      	bne.n	8006310 <getCommand+0x78>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8006304:	4a68      	ldr	r2, [pc, #416]	; (80064a8 <getCommand+0x210>)
 8006306:	4967      	ldr	r1, [pc, #412]	; (80064a4 <getCommand+0x20c>)
 8006308:	0020      	movs	r0, r4
 800630a:	f00e fa25 	bl	8014758 <sprintf>
 800630e:	e7f2      	b.n	80062f6 <getCommand+0x5e>
			else if (BOS.response == BOS_RESPONSE_NONE)
 8006310:	2b00      	cmp	r3, #0
 8006312:	d000      	beq.n	8006316 <getCommand+0x7e>
 8006314:	e0b6      	b.n	8006484 <getCommand+0x1ec>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8006316:	4a65      	ldr	r2, [pc, #404]	; (80064ac <getCommand+0x214>)
 8006318:	4962      	ldr	r1, [pc, #392]	; (80064a4 <getCommand+0x20c>)
 800631a:	0020      	movs	r0, r4
 800631c:	f00e fa1c 	bl	8014758 <sprintf>
 8006320:	e7e9      	b.n	80062f6 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 8006322:	0032      	movs	r2, r6
 8006324:	4962      	ldr	r1, [pc, #392]	; (80064b0 <getCommand+0x218>)
 8006326:	0038      	movs	r0, r7
 8006328:	f00e fa5a 	bl	80147e0 <strncmp>
 800632c:	2800      	cmp	r0, #0
 800632e:	d11a      	bne.n	8006366 <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 8006330:	4b5a      	ldr	r3, [pc, #360]	; (800649c <getCommand+0x204>)
 8006332:	79db      	ldrb	r3, [r3, #7]
 8006334:	2b03      	cmp	r3, #3
 8006336:	d105      	bne.n	8006344 <getCommand+0xac>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8006338:	4a59      	ldr	r2, [pc, #356]	; (80064a0 <getCommand+0x208>)
 800633a:	495a      	ldr	r1, [pc, #360]	; (80064a4 <getCommand+0x20c>)
 800633c:	0020      	movs	r0, r4
 800633e:	f00e fa0b 	bl	8014758 <sprintf>
 8006342:	e7d8      	b.n	80062f6 <getCommand+0x5e>
			else if (BOS.trace == TRACE_MESSAGE)
 8006344:	2b01      	cmp	r3, #1
 8006346:	d105      	bne.n	8006354 <getCommand+0xbc>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8006348:	4a57      	ldr	r2, [pc, #348]	; (80064a8 <getCommand+0x210>)
 800634a:	4956      	ldr	r1, [pc, #344]	; (80064a4 <getCommand+0x20c>)
 800634c:	0020      	movs	r0, r4
 800634e:	f00e fa03 	bl	8014758 <sprintf>
 8006352:	e7d0      	b.n	80062f6 <getCommand+0x5e>
			else if (BOS.trace == TRACE_NONE)
 8006354:	2b00      	cmp	r3, #0
 8006356:	d000      	beq.n	800635a <getCommand+0xc2>
 8006358:	e094      	b.n	8006484 <getCommand+0x1ec>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 800635a:	4a54      	ldr	r2, [pc, #336]	; (80064ac <getCommand+0x214>)
 800635c:	4951      	ldr	r1, [pc, #324]	; (80064a4 <getCommand+0x20c>)
 800635e:	0020      	movs	r0, r4
 8006360:	f00e f9fa 	bl	8014758 <sprintf>
 8006364:	e7c7      	b.n	80062f6 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8006366:	0032      	movs	r2, r6
 8006368:	4952      	ldr	r1, [pc, #328]	; (80064b4 <getCommand+0x21c>)
 800636a:	0038      	movs	r0, r7
 800636c:	f00e fa38 	bl	80147e0 <strncmp>
 8006370:	2800      	cmp	r0, #0
 8006372:	d106      	bne.n	8006382 <getCommand+0xea>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 8006374:	4b49      	ldr	r3, [pc, #292]	; (800649c <getCommand+0x204>)
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	494f      	ldr	r1, [pc, #316]	; (80064b8 <getCommand+0x220>)
 800637a:	0020      	movs	r0, r4
 800637c:	f00e f9ec 	bl	8014758 <sprintf>
 8006380:	e7b9      	b.n	80062f6 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 8006382:	0032      	movs	r2, r6
 8006384:	494d      	ldr	r1, [pc, #308]	; (80064bc <getCommand+0x224>)
 8006386:	0038      	movs	r0, r7
 8006388:	f00e fa2a 	bl	80147e0 <strncmp>
 800638c:	2800      	cmp	r0, #0
 800638e:	d106      	bne.n	800639e <getCommand+0x106>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8006390:	4b42      	ldr	r3, [pc, #264]	; (800649c <getCommand+0x204>)
 8006392:	881a      	ldrh	r2, [r3, #0]
 8006394:	4948      	ldr	r1, [pc, #288]	; (80064b8 <getCommand+0x220>)
 8006396:	0020      	movs	r0, r4
 8006398:	f00e f9de 	bl	8014758 <sprintf>
 800639c:	e7ab      	b.n	80062f6 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 800639e:	0032      	movs	r2, r6
 80063a0:	4947      	ldr	r1, [pc, #284]	; (80064c0 <getCommand+0x228>)
 80063a2:	0038      	movs	r0, r7
 80063a4:	f00e fa1c 	bl	80147e0 <strncmp>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d106      	bne.n	80063ba <getCommand+0x122>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 80063ac:	4b3b      	ldr	r3, [pc, #236]	; (800649c <getCommand+0x204>)
 80063ae:	885a      	ldrh	r2, [r3, #2]
 80063b0:	4941      	ldr	r1, [pc, #260]	; (80064b8 <getCommand+0x220>)
 80063b2:	0020      	movs	r0, r4
 80063b4:	f00e f9d0 	bl	8014758 <sprintf>
 80063b8:	e79d      	b.n	80062f6 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 80063ba:	0032      	movs	r2, r6
 80063bc:	4941      	ldr	r1, [pc, #260]	; (80064c4 <getCommand+0x22c>)
 80063be:	0038      	movs	r0, r7
 80063c0:	f00e fa0e 	bl	80147e0 <strncmp>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d106      	bne.n	80063d6 <getCommand+0x13e>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 80063c8:	4b34      	ldr	r3, [pc, #208]	; (800649c <getCommand+0x204>)
 80063ca:	791a      	ldrb	r2, [r3, #4]
 80063cc:	493a      	ldr	r1, [pc, #232]	; (80064b8 <getCommand+0x220>)
 80063ce:	0020      	movs	r0, r4
 80063d0:	f00e f9c2 	bl	8014758 <sprintf>
 80063d4:	e78f      	b.n	80062f6 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 80063d6:	0032      	movs	r2, r6
 80063d8:	493b      	ldr	r1, [pc, #236]	; (80064c8 <getCommand+0x230>)
 80063da:	0038      	movs	r0, r7
 80063dc:	f00e fa00 	bl	80147e0 <strncmp>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d10d      	bne.n	8006400 <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 80063e4:	4b2d      	ldr	r3, [pc, #180]	; (800649c <getCommand+0x204>)
 80063e6:	795a      	ldrb	r2, [r3, #5]
 80063e8:	4933      	ldr	r1, [pc, #204]	; (80064b8 <getCommand+0x220>)
 80063ea:	0020      	movs	r0, r4
 80063ec:	f00e f9b4 	bl	8014758 <sprintf>
 80063f0:	e781      	b.n	80062f6 <getCommand+0x5e>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 80063f2:	2205      	movs	r2, #5
 80063f4:	4935      	ldr	r1, [pc, #212]	; (80064cc <getCommand+0x234>)
 80063f6:	0028      	movs	r0, r5
 80063f8:	f00e f9f2 	bl	80147e0 <strncmp>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d005      	beq.n	800640c <getCommand+0x174>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8006400:	2213      	movs	r2, #19
 8006402:	4933      	ldr	r1, [pc, #204]	; (80064d0 <getCommand+0x238>)
 8006404:	0020      	movs	r0, r4
 8006406:	f00d ff72 	bl	80142ee <memcpy>
 800640a:	e774      	b.n	80062f6 <getCommand+0x5e>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800640c:	466a      	mov	r2, sp
 800640e:	2102      	movs	r1, #2
 8006410:	0030      	movs	r0, r6
 8006412:	f008 fb95 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8006416:	0005      	movs	r5, r0
 8006418:	4f2e      	ldr	r7, [pc, #184]	; (80064d4 <getCommand+0x23c>)
		for(i=0 ; i<MaxNumOfGroups ; i++)
 800641a:	2600      	movs	r6, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 800641c:	0039      	movs	r1, r7
 800641e:	0028      	movs	r0, r5
 8006420:	f7f9 fe70 	bl	8000104 <strcmp>
 8006424:	2800      	cmp	r0, #0
 8006426:	d011      	beq.n	800644c <getCommand+0x1b4>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8006428:	3601      	adds	r6, #1
 800642a:	b2f6      	uxtb	r6, r6
 800642c:	370a      	adds	r7, #10
 800642e:	2e0a      	cmp	r6, #10
 8006430:	d1f4      	bne.n	800641c <getCommand+0x184>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 8006432:	002a      	movs	r2, r5
 8006434:	4928      	ldr	r1, [pc, #160]	; (80064d8 <getCommand+0x240>)
 8006436:	0020      	movs	r0, r4
 8006438:	f00e f98e 	bl	8014758 <sprintf>
			return pdFALSE;
 800643c:	e75b      	b.n	80062f6 <getCommand+0x5e>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 800643e:	002b      	movs	r3, r5
 8006440:	0022      	movs	r2, r4
 8006442:	4926      	ldr	r1, [pc, #152]	; (80064dc <getCommand+0x244>)
 8006444:	0020      	movs	r0, r4
 8006446:	f00e f987 	bl	8014758 <sprintf>
 800644a:	e015      	b.n	8006478 <getCommand+0x1e0>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 800644c:	002a      	movs	r2, r5
 800644e:	4924      	ldr	r1, [pc, #144]	; (80064e0 <getCommand+0x248>)
 8006450:	0020      	movs	r0, r4
 8006452:	f00e f981 	bl	8014758 <sprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 8006456:	4b23      	ldr	r3, [pc, #140]	; (80064e4 <getCommand+0x24c>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d100      	bne.n	8006460 <getCommand+0x1c8>
 800645e:	e74a      	b.n	80062f6 <getCommand+0x5e>
 8006460:	2501      	movs	r5, #1
 8006462:	002b      	movs	r3, r5
 8006464:	40b3      	lsls	r3, r6
 8006466:	4698      	mov	r8, r3
				if (InGroup(j, i))
 8006468:	4f1f      	ldr	r7, [pc, #124]	; (80064e8 <getCommand+0x250>)
			for(j=1 ; j<=N ; j++)						// N modules
 800646a:	4e1e      	ldr	r6, [pc, #120]	; (80064e4 <getCommand+0x24c>)
				if (InGroup(j, i))
 800646c:	1e6b      	subs	r3, r5, #1
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	5bdb      	ldrh	r3, [r3, r7]
 8006472:	4642      	mov	r2, r8
 8006474:	421a      	tst	r2, r3
 8006476:	d1e2      	bne.n	800643e <getCommand+0x1a6>
			for(j=1 ; j<=N ; j++)						// N modules
 8006478:	3501      	adds	r5, #1
 800647a:	b2ed      	uxtb	r5, r5
 800647c:	7833      	ldrb	r3, [r6, #0]
 800647e:	42ab      	cmp	r3, r5
 8006480:	d2f4      	bcs.n	800646c <getCommand+0x1d4>
 8006482:	e738      	b.n	80062f6 <getCommand+0x5e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 8006484:	002a      	movs	r2, r5
 8006486:	4919      	ldr	r1, [pc, #100]	; (80064ec <getCommand+0x254>)
 8006488:	0020      	movs	r0, r4
 800648a:	f00e f965 	bl	8014758 <sprintf>
 800648e:	e732      	b.n	80062f6 <getCommand+0x5e>
 8006490:	20001300 	.word	0x20001300
 8006494:	08019a04 	.word	0x08019a04
 8006498:	08019a0c 	.word	0x08019a0c
 800649c:	20006a18 	.word	0x20006a18
 80064a0:	08018f34 	.word	0x08018f34
 80064a4:	08018d8c 	.word	0x08018d8c
 80064a8:	08019a18 	.word	0x08019a18
 80064ac:	08019a1c 	.word	0x08019a1c
 80064b0:	08019a24 	.word	0x08019a24
 80064b4:	08019a2c 	.word	0x08019a2c
 80064b8:	080193b4 	.word	0x080193b4
 80064bc:	08019a38 	.word	0x08019a38
 80064c0:	08019a44 	.word	0x08019a44
 80064c4:	08019a54 	.word	0x08019a54
 80064c8:	08019a68 	.word	0x08019a68
 80064cc:	08019a7c 	.word	0x08019a7c
 80064d0:	08019a8c 	.word	0x08019a8c
 80064d4:	20000ed4 	.word	0x20000ed4
 80064d8:	08019aa0 	.word	0x08019aa0
 80064dc:	08019a84 	.word	0x08019a84
 80064e0:	08019abc 	.word	0x08019abc
 80064e4:	2000001c 	.word	0x2000001c
 80064e8:	20000f38 	.word	0x20000f38
 80064ec:	08019ad0 	.word	0x08019ad0

080064f0 <defaultCommand>:
{
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	0004      	movs	r4, r0
 80064f6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 80064fc:	2c00      	cmp	r4, #0
 80064fe:	d101      	bne.n	8006504 <defaultCommand+0x14>
 8006500:	b672      	cpsid	i
 8006502:	e7fe      	b.n	8006502 <defaultCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006504:	aa01      	add	r2, sp, #4
 8006506:	2101      	movs	r1, #1
 8006508:	f008 fb1a 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 800650c:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 800650e:	9e01      	ldr	r6, [sp, #4]
 8006510:	0032      	movs	r2, r6
 8006512:	491e      	ldr	r1, [pc, #120]	; (800658c <defaultCommand+0x9c>)
 8006514:	f00e f964 	bl	80147e0 <strncmp>
 8006518:	2800      	cmp	r0, #0
 800651a:	d01e      	beq.n	800655a <defaultCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 800651c:	0032      	movs	r2, r6
 800651e:	491c      	ldr	r1, [pc, #112]	; (8006590 <defaultCommand+0xa0>)
 8006520:	0028      	movs	r0, r5
 8006522:	f00e f95d 	bl	80147e0 <strncmp>
 8006526:	2800      	cmp	r0, #0
 8006528:	d12a      	bne.n	8006580 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 800652a:	2200      	movs	r2, #0
 800652c:	2116      	movs	r1, #22
 800652e:	20ff      	movs	r0, #255	; 0xff
 8006530:	f002 ff42 	bl	80093b8 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 8006534:	4b17      	ldr	r3, [pc, #92]	; (8006594 <defaultCommand+0xa4>)
 8006536:	2202      	movs	r2, #2
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	2064      	movs	r0, #100	; 0x64
 800653c:	f008 f9e7 	bl	800e90e <osDelay>
		ClearEEportsDir();
 8006540:	f7fc ff06 	bl	8003350 <ClearEEportsDir>
		ClearROtopology();
 8006544:	f005 fd80 	bl	800c048 <ClearROtopology>
		osDelay(100);
 8006548:	2064      	movs	r0, #100	; 0x64
 800654a:	f008 f9e0 	bl	800e90e <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 800654e:	2240      	movs	r2, #64	; 0x40
 8006550:	4911      	ldr	r1, [pc, #68]	; (8006598 <defaultCommand+0xa8>)
 8006552:	0020      	movs	r0, r4
 8006554:	f00d fecb 	bl	80142ee <memcpy>
 8006558:	e00f      	b.n	800657a <defaultCommand+0x8a>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 800655a:	4910      	ldr	r1, [pc, #64]	; (800659c <defaultCommand+0xac>)
 800655c:	4b10      	ldr	r3, [pc, #64]	; (80065a0 <defaultCommand+0xb0>)
 800655e:	000a      	movs	r2, r1
 8006560:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006562:	c223      	stmia	r2!, {r0, r1, r5}
 8006564:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006566:	c223      	stmia	r2!, {r0, r1, r5}
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 800656c:	f7fd f9b0 	bl	80038d0 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 8006570:	2227      	movs	r2, #39	; 0x27
 8006572:	490c      	ldr	r1, [pc, #48]	; (80065a4 <defaultCommand+0xb4>)
 8006574:	0020      	movs	r0, r4
 8006576:	f00d feba 	bl	80142ee <memcpy>
}
 800657a:	2000      	movs	r0, #0
 800657c:	b002      	add	sp, #8
 800657e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8006580:	220f      	movs	r2, #15
 8006582:	4909      	ldr	r1, [pc, #36]	; (80065a8 <defaultCommand+0xb8>)
 8006584:	0020      	movs	r0, r4
 8006586:	f00d feb2 	bl	80142ee <memcpy>
 800658a:	e7f6      	b.n	800657a <defaultCommand+0x8a>
 800658c:	080198c0 	.word	0x080198c0
 8006590:	080198f0 	.word	0x080198f0
 8006594:	20000f6a 	.word	0x20000f6a
 8006598:	08019908 	.word	0x08019908
 800659c:	20006a18 	.word	0x20006a18
 80065a0:	20000000 	.word	0x20000000
 80065a4:	080198c8 	.word	0x080198c8
 80065a8:	080198f8 	.word	0x080198f8

080065ac <setCommand>:
{
 80065ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ae:	46ce      	mov	lr, r9
 80065b0:	4647      	mov	r7, r8
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b08d      	sub	sp, #52	; 0x34
 80065b6:	0005      	movs	r5, r0
 80065b8:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80065be:	930a      	str	r3, [sp, #40]	; 0x28
 80065c0:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 80065c2:	9308      	str	r3, [sp, #32]
 80065c4:	9307      	str	r3, [sp, #28]
	configASSERT( pcWriteBuffer );
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d101      	bne.n	80065ce <setCommand+0x22>
 80065ca:	b672      	cpsid	i
 80065cc:	e7fe      	b.n	80065cc <setCommand+0x20>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80065ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80065d0:	2101      	movs	r1, #1
 80065d2:	0020      	movs	r0, r4
 80065d4:	f008 fab4 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 80065d8:	0006      	movs	r6, r0
 80065da:	4bb3      	ldr	r3, [pc, #716]	; (80068a8 <setCommand+0x2fc>)
 80065dc:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 80065de:	2204      	movs	r2, #4
 80065e0:	49b2      	ldr	r1, [pc, #712]	; (80068ac <setCommand+0x300>)
 80065e2:	f00e f8fd 	bl	80147e0 <strncmp>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d015      	beq.n	8006616 <setCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 80065ea:	2204      	movs	r2, #4
 80065ec:	49b0      	ldr	r1, [pc, #704]	; (80068b0 <setCommand+0x304>)
 80065ee:	0030      	movs	r0, r6
 80065f0:	f00e f8f6 	bl	80147e0 <strncmp>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d100      	bne.n	80065fa <setCommand+0x4e>
 80065f8:	e180      	b.n	80068fc <setCommand+0x350>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 80065fa:	2204      	movs	r2, #4
 80065fc:	49ad      	ldr	r1, [pc, #692]	; (80068b4 <setCommand+0x308>)
 80065fe:	0030      	movs	r0, r6
 8006600:	f00e f8ee 	bl	80147e0 <strncmp>
 8006604:	2800      	cmp	r0, #0
 8006606:	d100      	bne.n	800660a <setCommand+0x5e>
 8006608:	e1e6      	b.n	80069d8 <setCommand+0x42c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800660a:	2213      	movs	r2, #19
 800660c:	49aa      	ldr	r1, [pc, #680]	; (80068b8 <setCommand+0x30c>)
 800660e:	0028      	movs	r0, r5
 8006610:	f00d fe6d 	bl	80142ee <memcpy>
 8006614:	e1d7      	b.n	80069c6 <setCommand+0x41a>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006616:	aa0a      	add	r2, sp, #40	; 0x28
 8006618:	2102      	movs	r1, #2
 800661a:	0020      	movs	r0, r4
 800661c:	f008 fa90 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8006620:	0004      	movs	r4, r0
 8006622:	4ba6      	ldr	r3, [pc, #664]	; (80068bc <setCommand+0x310>)
 8006624:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 8006626:	4ba0      	ldr	r3, [pc, #640]	; (80068a8 <setCommand+0x2fc>)
 8006628:	681e      	ldr	r6, [r3, #0]
 800662a:	3604      	adds	r6, #4
 800662c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800662e:	1f1f      	subs	r7, r3, #4
 8006630:	003a      	movs	r2, r7
 8006632:	49a3      	ldr	r1, [pc, #652]	; (80068c0 <setCommand+0x314>)
 8006634:	0030      	movs	r0, r6
 8006636:	f00e f8d3 	bl	80147e0 <strncmp>
 800663a:	2800      	cmp	r0, #0
 800663c:	d153      	bne.n	80066e6 <setCommand+0x13a>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 800663e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006640:	0032      	movs	r2, r6
 8006642:	49a0      	ldr	r1, [pc, #640]	; (80068c4 <setCommand+0x318>)
 8006644:	0020      	movs	r0, r4
 8006646:	f00e f8cb 	bl	80147e0 <strncmp>
 800664a:	2800      	cmp	r0, #0
 800664c:	d115      	bne.n	800667a <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 800664e:	4b9e      	ldr	r3, [pc, #632]	; (80068c8 <setCommand+0x31c>)
 8006650:	2160      	movs	r1, #96	; 0x60
 8006652:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006654:	79db      	ldrb	r3, [r3, #7]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	4319      	orrs	r1, r3
 800665a:	308a      	adds	r0, #138	; 0x8a
 800665c:	0040      	lsls	r0, r0, #1
 800665e:	f001 f9d5 	bl	8007a0c <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006662:	4b91      	ldr	r3, [pc, #580]	; (80068a8 <setCommand+0x2fc>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	2300      	movs	r3, #0
 8006668:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800666a:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 800666c:	4b93      	ldr	r3, [pc, #588]	; (80068bc <setCommand+0x310>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4996      	ldr	r1, [pc, #600]	; (80068cc <setCommand+0x320>)
 8006672:	0028      	movs	r0, r5
 8006674:	f00e f870 	bl	8014758 <sprintf>
	return pdFALSE;
 8006678:	e1a5      	b.n	80069c6 <setCommand+0x41a>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 800667a:	0032      	movs	r2, r6
 800667c:	4994      	ldr	r1, [pc, #592]	; (80068d0 <setCommand+0x324>)
 800667e:	0020      	movs	r0, r4
 8006680:	f00e f8ae 	bl	80147e0 <strncmp>
 8006684:	2800      	cmp	r0, #0
 8006686:	d10a      	bne.n	800669e <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 8006688:	4b8f      	ldr	r3, [pc, #572]	; (80068c8 <setCommand+0x31c>)
 800668a:	2120      	movs	r1, #32
 800668c:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800668e:	79db      	ldrb	r3, [r3, #7]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	4319      	orrs	r1, r3
 8006694:	308a      	adds	r0, #138	; 0x8a
 8006696:	0040      	lsls	r0, r0, #1
 8006698:	f001 f9b8 	bl	8007a0c <EE_WriteVariable>
 800669c:	e7e1      	b.n	8006662 <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 800669e:	0032      	movs	r2, r6
 80066a0:	498c      	ldr	r1, [pc, #560]	; (80068d4 <setCommand+0x328>)
 80066a2:	0020      	movs	r0, r4
 80066a4:	f00e f89c 	bl	80147e0 <strncmp>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d10a      	bne.n	80066c2 <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 80066ac:	4b86      	ldr	r3, [pc, #536]	; (80068c8 <setCommand+0x31c>)
 80066ae:	2140      	movs	r1, #64	; 0x40
 80066b0:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80066b2:	79db      	ldrb	r3, [r3, #7]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	4319      	orrs	r1, r3
 80066b8:	308a      	adds	r0, #138	; 0x8a
 80066ba:	0040      	lsls	r0, r0, #1
 80066bc:	f001 f9a6 	bl	8007a0c <EE_WriteVariable>
 80066c0:	e7cf      	b.n	8006662 <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 80066c2:	0032      	movs	r2, r6
 80066c4:	4984      	ldr	r1, [pc, #528]	; (80068d8 <setCommand+0x32c>)
 80066c6:	0020      	movs	r0, r4
 80066c8:	f00e f88a 	bl	80147e0 <strncmp>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d000      	beq.n	80066d2 <setCommand+0x126>
 80066d0:	e2a7      	b.n	8006c22 <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 80066d2:	4b7d      	ldr	r3, [pc, #500]	; (80068c8 <setCommand+0x31c>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80066d8:	79d9      	ldrb	r1, [r3, #7]
 80066da:	0209      	lsls	r1, r1, #8
 80066dc:	308a      	adds	r0, #138	; 0x8a
 80066de:	0040      	lsls	r0, r0, #1
 80066e0:	f001 f994 	bl	8007a0c <EE_WriteVariable>
 80066e4:	e7bd      	b.n	8006662 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80066e6:	003a      	movs	r2, r7
 80066e8:	497c      	ldr	r1, [pc, #496]	; (80068dc <setCommand+0x330>)
 80066ea:	0030      	movs	r0, r6
 80066ec:	f00e f878 	bl	80147e0 <strncmp>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d14a      	bne.n	800678a <setCommand+0x1de>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 80066f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80066f6:	0032      	movs	r2, r6
 80066f8:	4972      	ldr	r1, [pc, #456]	; (80068c4 <setCommand+0x318>)
 80066fa:	0020      	movs	r0, r4
 80066fc:	f00e f870 	bl	80147e0 <strncmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	d10b      	bne.n	800671c <setCommand+0x170>
				BOS.trace = TRACE_BOTH;
 8006704:	4b70      	ldr	r3, [pc, #448]	; (80068c8 <setCommand+0x31c>)
 8006706:	2203      	movs	r2, #3
 8006708:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800670a:	799b      	ldrb	r3, [r3, #6]
 800670c:	21c0      	movs	r1, #192	; 0xc0
 800670e:	0089      	lsls	r1, r1, #2
 8006710:	4319      	orrs	r1, r3
 8006712:	308a      	adds	r0, #138	; 0x8a
 8006714:	0040      	lsls	r0, r0, #1
 8006716:	f001 f979 	bl	8007a0c <EE_WriteVariable>
 800671a:	e7a2      	b.n	8006662 <setCommand+0xb6>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 800671c:	0032      	movs	r2, r6
 800671e:	496c      	ldr	r1, [pc, #432]	; (80068d0 <setCommand+0x324>)
 8006720:	0020      	movs	r0, r4
 8006722:	f00e f85d 	bl	80147e0 <strncmp>
 8006726:	2800      	cmp	r0, #0
 8006728:	d10b      	bne.n	8006742 <setCommand+0x196>
				BOS.trace = TRACE_MESSAGE;
 800672a:	4b67      	ldr	r3, [pc, #412]	; (80068c8 <setCommand+0x31c>)
 800672c:	2201      	movs	r2, #1
 800672e:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006730:	799b      	ldrb	r3, [r3, #6]
 8006732:	2180      	movs	r1, #128	; 0x80
 8006734:	0049      	lsls	r1, r1, #1
 8006736:	4319      	orrs	r1, r3
 8006738:	308a      	adds	r0, #138	; 0x8a
 800673a:	4090      	lsls	r0, r2
 800673c:	f001 f966 	bl	8007a0c <EE_WriteVariable>
 8006740:	e78f      	b.n	8006662 <setCommand+0xb6>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8006742:	0032      	movs	r2, r6
 8006744:	495e      	ldr	r1, [pc, #376]	; (80068c0 <setCommand+0x314>)
 8006746:	0020      	movs	r0, r4
 8006748:	f00e f84a 	bl	80147e0 <strncmp>
 800674c:	2800      	cmp	r0, #0
 800674e:	d10b      	bne.n	8006768 <setCommand+0x1bc>
				BOS.trace = TRACE_RESPONSE;
 8006750:	4b5d      	ldr	r3, [pc, #372]	; (80068c8 <setCommand+0x31c>)
 8006752:	2202      	movs	r2, #2
 8006754:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006756:	799b      	ldrb	r3, [r3, #6]
 8006758:	2180      	movs	r1, #128	; 0x80
 800675a:	0089      	lsls	r1, r1, #2
 800675c:	4319      	orrs	r1, r3
 800675e:	308a      	adds	r0, #138	; 0x8a
 8006760:	0040      	lsls	r0, r0, #1
 8006762:	f001 f953 	bl	8007a0c <EE_WriteVariable>
 8006766:	e77c      	b.n	8006662 <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8006768:	0032      	movs	r2, r6
 800676a:	495b      	ldr	r1, [pc, #364]	; (80068d8 <setCommand+0x32c>)
 800676c:	0020      	movs	r0, r4
 800676e:	f00e f837 	bl	80147e0 <strncmp>
 8006772:	2800      	cmp	r0, #0
 8006774:	d000      	beq.n	8006778 <setCommand+0x1cc>
 8006776:	e254      	b.n	8006c22 <setCommand+0x676>
				BOS.trace = TRACE_NONE;
 8006778:	4b53      	ldr	r3, [pc, #332]	; (80068c8 <setCommand+0x31c>)
 800677a:	2200      	movs	r2, #0
 800677c:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800677e:	7999      	ldrb	r1, [r3, #6]
 8006780:	308a      	adds	r0, #138	; 0x8a
 8006782:	0040      	lsls	r0, r0, #1
 8006784:	f001 f942 	bl	8007a0c <EE_WriteVariable>
 8006788:	e76b      	b.n	8006662 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800678a:	003a      	movs	r2, r7
 800678c:	4954      	ldr	r1, [pc, #336]	; (80068e0 <setCommand+0x334>)
 800678e:	0030      	movs	r0, r6
 8006790:	f00e f826 	bl	80147e0 <strncmp>
 8006794:	2800      	cmp	r0, #0
 8006796:	d128      	bne.n	80067ea <setCommand+0x23e>
			temp2 = atoi((const char *)pcParameterString2);
 8006798:	0020      	movs	r0, r4
 800679a:	f00d fb18 	bl	8013dce <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 800679e:	23e1      	movs	r3, #225	; 0xe1
 80067a0:	031b      	lsls	r3, r3, #12
 80067a2:	4298      	cmp	r0, r3
 80067a4:	d900      	bls.n	80067a8 <setCommand+0x1fc>
 80067a6:	e23c      	b.n	8006c22 <setCommand+0x676>
				BOS.clibaudrate = temp2;
 80067a8:	4c47      	ldr	r4, [pc, #284]	; (80068c8 <setCommand+0x31c>)
 80067aa:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 80067ac:	b281      	uxth	r1, r0
 80067ae:	208c      	movs	r0, #140	; 0x8c
 80067b0:	0040      	lsls	r0, r0, #1
 80067b2:	f001 f92b 	bl	8007a0c <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 80067b6:	68a1      	ldr	r1, [r4, #8]
 80067b8:	0c09      	lsrs	r1, r1, #16
 80067ba:	201a      	movs	r0, #26
 80067bc:	30ff      	adds	r0, #255	; 0xff
 80067be:	f001 f925 	bl	8007a0c <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 80067c2:	4b39      	ldr	r3, [pc, #228]	; (80068a8 <setCommand+0x2fc>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	2300      	movs	r3, #0
 80067c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067ca:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 80067cc:	4b3b      	ldr	r3, [pc, #236]	; (80068bc <setCommand+0x310>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	493e      	ldr	r1, [pc, #248]	; (80068cc <setCommand+0x320>)
 80067d2:	0028      	movs	r0, r5
 80067d4:	f00d ffc0 	bl	8014758 <sprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 80067d8:	4942      	ldr	r1, [pc, #264]	; (80068e4 <setCommand+0x338>)
 80067da:	0028      	movs	r0, r5
 80067dc:	f00d ffdc 	bl	8014798 <strcat>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 80067e0:	4941      	ldr	r1, [pc, #260]	; (80068e8 <setCommand+0x33c>)
 80067e2:	0028      	movs	r0, r5
 80067e4:	f00d ffd8 	bl	8014798 <strcat>
 80067e8:	e0ed      	b.n	80069c6 <setCommand+0x41a>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 80067ea:	003a      	movs	r2, r7
 80067ec:	493f      	ldr	r1, [pc, #252]	; (80068ec <setCommand+0x340>)
 80067ee:	0030      	movs	r0, r6
 80067f0:	f00d fff6 	bl	80147e0 <strncmp>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d10d      	bne.n	8006814 <setCommand+0x268>
			temp16 = atoi((const char *)pcParameterString2);
 80067f8:	0020      	movs	r0, r4
 80067fa:	f00d fae8 	bl	8013dce <atoi>
 80067fe:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8006800:	2900      	cmp	r1, #0
 8006802:	d100      	bne.n	8006806 <setCommand+0x25a>
 8006804:	e20d      	b.n	8006c22 <setCommand+0x676>
				BOS.buttons.debounce = temp16;
 8006806:	4b30      	ldr	r3, [pc, #192]	; (80068c8 <setCommand+0x31c>)
 8006808:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 800680a:	2016      	movs	r0, #22
 800680c:	30ff      	adds	r0, #255	; 0xff
 800680e:	f001 f8fd 	bl	8007a0c <EE_WriteVariable>
 8006812:	e726      	b.n	8006662 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8006814:	003a      	movs	r2, r7
 8006816:	4936      	ldr	r1, [pc, #216]	; (80068f0 <setCommand+0x344>)
 8006818:	0030      	movs	r0, r6
 800681a:	f00d ffe1 	bl	80147e0 <strncmp>
 800681e:	2800      	cmp	r0, #0
 8006820:	d10d      	bne.n	800683e <setCommand+0x292>
			temp16 = atoi((const char *)pcParameterString2);
 8006822:	0020      	movs	r0, r4
 8006824:	f00d fad3 	bl	8013dce <atoi>
 8006828:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 800682a:	2900      	cmp	r1, #0
 800682c:	d100      	bne.n	8006830 <setCommand+0x284>
 800682e:	e1f8      	b.n	8006c22 <setCommand+0x676>
				BOS.buttons.singleClickTime = temp16;
 8006830:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <setCommand+0x31c>)
 8006832:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8006834:	208b      	movs	r0, #139	; 0x8b
 8006836:	0040      	lsls	r0, r0, #1
 8006838:	f001 f8e8 	bl	8007a0c <EE_WriteVariable>
 800683c:	e711      	b.n	8006662 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 800683e:	003a      	movs	r2, r7
 8006840:	492c      	ldr	r1, [pc, #176]	; (80068f4 <setCommand+0x348>)
 8006842:	0030      	movs	r0, r6
 8006844:	f00d ffcc 	bl	80147e0 <strncmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	d112      	bne.n	8006872 <setCommand+0x2c6>
			temp16 = atoi((const char *)pcParameterString2);
 800684c:	0020      	movs	r0, r4
 800684e:	f00d fabe 	bl	8013dce <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8006852:	1e43      	subs	r3, r0, #1
 8006854:	b29b      	uxth	r3, r3
 8006856:	2bfe      	cmp	r3, #254	; 0xfe
 8006858:	d900      	bls.n	800685c <setCommand+0x2b0>
 800685a:	e1e2      	b.n	8006c22 <setCommand+0x676>
				BOS.buttons.minInterClickTime = temp16;
 800685c:	b2c0      	uxtb	r0, r0
 800685e:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <setCommand+0x31c>)
 8006860:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8006862:	7959      	ldrb	r1, [r3, #5]
 8006864:	0209      	lsls	r1, r1, #8
 8006866:	4301      	orrs	r1, r0
 8006868:	2018      	movs	r0, #24
 800686a:	30ff      	adds	r0, #255	; 0xff
 800686c:	f001 f8ce 	bl	8007a0c <EE_WriteVariable>
 8006870:	e6f7      	b.n	8006662 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8006872:	003a      	movs	r2, r7
 8006874:	4920      	ldr	r1, [pc, #128]	; (80068f8 <setCommand+0x34c>)
 8006876:	0030      	movs	r0, r6
 8006878:	f00d ffb2 	bl	80147e0 <strncmp>
 800687c:	2800      	cmp	r0, #0
 800687e:	d000      	beq.n	8006882 <setCommand+0x2d6>
 8006880:	e6c3      	b.n	800660a <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 8006882:	0020      	movs	r0, r4
 8006884:	f00d faa3 	bl	8013dce <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8006888:	1e43      	subs	r3, r0, #1
 800688a:	b29b      	uxth	r3, r3
 800688c:	2bfe      	cmp	r3, #254	; 0xfe
 800688e:	d900      	bls.n	8006892 <setCommand+0x2e6>
 8006890:	e1c7      	b.n	8006c22 <setCommand+0x676>
				BOS.buttons.maxInterClickTime = temp16;
 8006892:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <setCommand+0x31c>)
 8006894:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8006896:	0200      	lsls	r0, r0, #8
 8006898:	7919      	ldrb	r1, [r3, #4]
 800689a:	4301      	orrs	r1, r0
 800689c:	b289      	uxth	r1, r1
 800689e:	2018      	movs	r0, #24
 80068a0:	30ff      	adds	r0, #255	; 0xff
 80068a2:	f001 f8b3 	bl	8007a0c <EE_WriteVariable>
 80068a6:	e6dc      	b.n	8006662 <setCommand+0xb6>
 80068a8:	200012fc 	.word	0x200012fc
 80068ac:	08019a04 	.word	0x08019a04
 80068b0:	0801a13c 	.word	0x0801a13c
 80068b4:	0801a148 	.word	0x0801a148
 80068b8:	08019a8c 	.word	0x08019a8c
 80068bc:	20001308 	.word	0x20001308
 80068c0:	08019a0c 	.word	0x08019a0c
 80068c4:	08018f34 	.word	0x08018f34
 80068c8:	20006a18 	.word	0x20006a18
 80068cc:	0801a054 	.word	0x0801a054
 80068d0:	0801a048 	.word	0x0801a048
 80068d4:	0801a050 	.word	0x0801a050
 80068d8:	08019a1c 	.word	0x08019a1c
 80068dc:	08019a24 	.word	0x08019a24
 80068e0:	08019a2c 	.word	0x08019a2c
 80068e4:	0801a068 	.word	0x0801a068
 80068e8:	0801a098 	.word	0x0801a098
 80068ec:	08019a38 	.word	0x08019a38
 80068f0:	08019a44 	.word	0x08019a44
 80068f4:	08019a54 	.word	0x08019a54
 80068f8:	08019a68 	.word	0x08019a68
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80068fc:	aa0a      	add	r2, sp, #40	; 0x28
 80068fe:	2102      	movs	r1, #2
 8006900:	0020      	movs	r0, r4
 8006902:	f008 f91d 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8006906:	4bca      	ldr	r3, [pc, #808]	; (8006c30 <setCommand+0x684>)
 8006908:	4699      	mov	r9, r3
 800690a:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800690c:	aa09      	add	r2, sp, #36	; 0x24
 800690e:	2103      	movs	r1, #3
 8006910:	0020      	movs	r0, r4
 8006912:	f008 f915 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8006916:	4fc7      	ldr	r7, [pc, #796]	; (8006c34 <setCommand+0x688>)
 8006918:	6038      	str	r0, [r7, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 800691a:	aa08      	add	r2, sp, #32
 800691c:	2104      	movs	r1, #4
 800691e:	0020      	movs	r0, r4
 8006920:	f008 f90e 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8006924:	4ec4      	ldr	r6, [pc, #784]	; (8006c38 <setCommand+0x68c>)
 8006926:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006928:	aa07      	add	r2, sp, #28
 800692a:	2105      	movs	r1, #5
 800692c:	0020      	movs	r0, r4
 800692e:	f008 f907 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8006932:	4cc2      	ldr	r4, [pc, #776]	; (8006c3c <setCommand+0x690>)
 8006934:	6020      	str	r0, [r4, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 8006936:	464b      	mov	r3, r9
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	f00d fa48 	bl	8013dce <atoi>
 800693e:	b2c3      	uxtb	r3, r0
 8006940:	4699      	mov	r9, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8006942:	6838      	ldr	r0, [r7, #0]
 8006944:	f00d fa43 	bl	8013dce <atoi>
 8006948:	b2c7      	uxtb	r7, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 800694a:	6830      	ldr	r0, [r6, #0]
 800694c:	f00d fa3f 	bl	8013dce <atoi>
 8006950:	b2c6      	uxtb	r6, r0
		if (pcParameterString5 != NULL) {
 8006952:	6824      	ldr	r4, [r4, #0]
 8006954:	2c00      	cmp	r4, #0
 8006956:	d010      	beq.n	800697a <setCommand+0x3ce>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 8006958:	2202      	movs	r2, #2
 800695a:	49b9      	ldr	r1, [pc, #740]	; (8006c40 <setCommand+0x694>)
 800695c:	0020      	movs	r0, r4
 800695e:	f00d ff3f 	bl	80147e0 <strncmp>
 8006962:	2800      	cmp	r0, #0
 8006964:	d035      	beq.n	80069d2 <setCommand+0x426>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8006966:	2202      	movs	r2, #2
 8006968:	49b6      	ldr	r1, [pc, #728]	; (8006c44 <setCommand+0x698>)
 800696a:	0020      	movs	r0, r4
 800696c:	f00d ff38 	bl	80147e0 <strncmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	d000      	beq.n	8006976 <setCommand+0x3ca>
 8006974:	e155      	b.n	8006c22 <setCommand+0x676>
				temp84 = RTC_PM;
 8006976:	2302      	movs	r3, #2
 8006978:	4698      	mov	r8, r3
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 800697a:	464b      	mov	r3, r9
 800697c:	2b17      	cmp	r3, #23
 800697e:	d900      	bls.n	8006982 <setCommand+0x3d6>
 8006980:	e14f      	b.n	8006c22 <setCommand+0x676>
 8006982:	2f3b      	cmp	r7, #59	; 0x3b
 8006984:	d900      	bls.n	8006988 <setCommand+0x3dc>
 8006986:	e14c      	b.n	8006c22 <setCommand+0x676>
 8006988:	2e3b      	cmp	r6, #59	; 0x3b
 800698a:	d900      	bls.n	800698e <setCommand+0x3e2>
 800698c:	e149      	b.n	8006c22 <setCommand+0x676>
				GetTimeDate();				
 800698e:	f007 f815 	bl	800d9bc <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 8006992:	4cad      	ldr	r4, [pc, #692]	; (8006c48 <setCommand+0x69c>)
 8006994:	7d23      	ldrb	r3, [r4, #20]
 8006996:	8b22      	ldrh	r2, [r4, #24]
 8006998:	7d61      	ldrb	r1, [r4, #21]
 800699a:	7da0      	ldrb	r0, [r4, #22]
 800699c:	7b24      	ldrb	r4, [r4, #12]
 800699e:	b264      	sxtb	r4, r4
 80069a0:	9404      	str	r4, [sp, #16]
 80069a2:	4644      	mov	r4, r8
 80069a4:	9403      	str	r4, [sp, #12]
 80069a6:	464c      	mov	r4, r9
 80069a8:	9402      	str	r4, [sp, #8]
 80069aa:	9701      	str	r7, [sp, #4]
 80069ac:	9600      	str	r6, [sp, #0]
 80069ae:	f006 ffab 	bl	800d908 <BOS_CalendarConfig>
 80069b2:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 80069b4:	2e00      	cmp	r6, #0
 80069b6:	d100      	bne.n	80069ba <setCommand+0x40e>
 80069b8:	e653      	b.n	8006662 <setCommand+0xb6>
	else if (result == BOS_ERR_WrongParam)
 80069ba:	2e67      	cmp	r6, #103	; 0x67
 80069bc:	d100      	bne.n	80069c0 <setCommand+0x414>
 80069be:	e624      	b.n	800660a <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 80069c0:	2e68      	cmp	r6, #104	; 0x68
 80069c2:	d100      	bne.n	80069c6 <setCommand+0x41a>
 80069c4:	e12d      	b.n	8006c22 <setCommand+0x676>
}
 80069c6:	2000      	movs	r0, #0
 80069c8:	b00d      	add	sp, #52	; 0x34
 80069ca:	bc0c      	pop	{r2, r3}
 80069cc:	4690      	mov	r8, r2
 80069ce:	4699      	mov	r9, r3
 80069d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 = RTC_AM;
 80069d2:	2301      	movs	r3, #1
 80069d4:	4698      	mov	r8, r3
 80069d6:	e7d0      	b.n	800697a <setCommand+0x3ce>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80069d8:	aa0a      	add	r2, sp, #40	; 0x28
 80069da:	2102      	movs	r1, #2
 80069dc:	0020      	movs	r0, r4
 80069de:	f008 f8af 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 80069e2:	4e93      	ldr	r6, [pc, #588]	; (8006c30 <setCommand+0x684>)
 80069e4:	6030      	str	r0, [r6, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80069e6:	aa09      	add	r2, sp, #36	; 0x24
 80069e8:	2103      	movs	r1, #3
 80069ea:	0020      	movs	r0, r4
 80069ec:	f008 f8a8 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 80069f0:	4b90      	ldr	r3, [pc, #576]	; (8006c34 <setCommand+0x688>)
 80069f2:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80069f4:	aa08      	add	r2, sp, #32
 80069f6:	2104      	movs	r1, #4
 80069f8:	0020      	movs	r0, r4
 80069fa:	f008 f8a1 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 80069fe:	4b8e      	ldr	r3, [pc, #568]	; (8006c38 <setCommand+0x68c>)
 8006a00:	4698      	mov	r8, r3
 8006a02:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006a04:	aa07      	add	r2, sp, #28
 8006a06:	2105      	movs	r1, #5
 8006a08:	0020      	movs	r0, r4
 8006a0a:	f008 f899 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8006a0e:	4c8b      	ldr	r4, [pc, #556]	; (8006c3c <setCommand+0x690>)
 8006a10:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 8006a12:	4643      	mov	r3, r8
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	f00d f9da 	bl	8013dce <atoi>
 8006a1a:	b2c3      	uxtb	r3, r0
 8006a1c:	4698      	mov	r8, r3
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8006a1e:	6820      	ldr	r0, [r4, #0]
 8006a20:	f00d f9d5 	bl	8013dce <atoi>
 8006a24:	b283      	uxth	r3, r0
 8006a26:	4699      	mov	r9, r3
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8006a28:	6834      	ldr	r4, [r6, #0]
 8006a2a:	2206      	movs	r2, #6
 8006a2c:	4987      	ldr	r1, [pc, #540]	; (8006c4c <setCommand+0x6a0>)
 8006a2e:	0020      	movs	r0, r4
 8006a30:	f00d fed6 	bl	80147e0 <strncmp>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d100      	bne.n	8006a3a <setCommand+0x48e>
 8006a38:	e195      	b.n	8006d66 <setCommand+0x7ba>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 8006a3a:	2207      	movs	r2, #7
 8006a3c:	4984      	ldr	r1, [pc, #528]	; (8006c50 <setCommand+0x6a4>)
 8006a3e:	0020      	movs	r0, r4
 8006a40:	f00d fece 	bl	80147e0 <strncmp>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d100      	bne.n	8006a4a <setCommand+0x49e>
 8006a48:	e19b      	b.n	8006d82 <setCommand+0x7d6>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 8006a4a:	2209      	movs	r2, #9
 8006a4c:	4981      	ldr	r1, [pc, #516]	; (8006c54 <setCommand+0x6a8>)
 8006a4e:	0020      	movs	r0, r4
 8006a50:	f00d fec6 	bl	80147e0 <strncmp>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d100      	bne.n	8006a5a <setCommand+0x4ae>
 8006a58:	e195      	b.n	8006d86 <setCommand+0x7da>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 8006a5a:	2208      	movs	r2, #8
 8006a5c:	497e      	ldr	r1, [pc, #504]	; (8006c58 <setCommand+0x6ac>)
 8006a5e:	0020      	movs	r0, r4
 8006a60:	f00d febe 	bl	80147e0 <strncmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d100      	bne.n	8006a6a <setCommand+0x4be>
 8006a68:	e18f      	b.n	8006d8a <setCommand+0x7de>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 8006a6a:	2206      	movs	r2, #6
 8006a6c:	497b      	ldr	r1, [pc, #492]	; (8006c5c <setCommand+0x6b0>)
 8006a6e:	0020      	movs	r0, r4
 8006a70:	f00d feb6 	bl	80147e0 <strncmp>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d100      	bne.n	8006a7a <setCommand+0x4ce>
 8006a78:	e189      	b.n	8006d8e <setCommand+0x7e2>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	4978      	ldr	r1, [pc, #480]	; (8006c60 <setCommand+0x6b4>)
 8006a7e:	0020      	movs	r0, r4
 8006a80:	f00d feae 	bl	80147e0 <strncmp>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d100      	bne.n	8006a8a <setCommand+0x4de>
 8006a88:	e183      	b.n	8006d92 <setCommand+0x7e6>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 8006a8a:	2206      	movs	r2, #6
 8006a8c:	4975      	ldr	r1, [pc, #468]	; (8006c64 <setCommand+0x6b8>)
 8006a8e:	0020      	movs	r0, r4
 8006a90:	f00d fea6 	bl	80147e0 <strncmp>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d100      	bne.n	8006a9a <setCommand+0x4ee>
 8006a98:	e17d      	b.n	8006d96 <setCommand+0x7ea>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006a9a:	4b66      	ldr	r3, [pc, #408]	; (8006c34 <setCommand+0x688>)
 8006a9c:	681c      	ldr	r4, [r3, #0]
 8006a9e:	2207      	movs	r2, #7
 8006aa0:	4971      	ldr	r1, [pc, #452]	; (8006c68 <setCommand+0x6bc>)
 8006aa2:	0020      	movs	r0, r4
 8006aa4:	f00d fe9c 	bl	80147e0 <strncmp>
			result = BOS_ERR_WrongValue;		
 8006aa8:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d101      	bne.n	8006ab2 <setCommand+0x506>
			result = BOS_ERR_WrongValue;		
 8006aae:	2668      	movs	r6, #104	; 0x68
 8006ab0:	e783      	b.n	80069ba <setCommand+0x40e>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	496d      	ldr	r1, [pc, #436]	; (8006c6c <setCommand+0x6c0>)
 8006ab6:	0020      	movs	r0, r4
 8006ab8:	f00d fe92 	bl	80147e0 <strncmp>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d100      	bne.n	8006ac2 <setCommand+0x516>
 8006ac0:	e104      	b.n	8006ccc <setCommand+0x720>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 8006ac2:	2208      	movs	r2, #8
 8006ac4:	496a      	ldr	r1, [pc, #424]	; (8006c70 <setCommand+0x6c4>)
 8006ac6:	0020      	movs	r0, r4
 8006ac8:	f00d fe8a 	bl	80147e0 <strncmp>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d100      	bne.n	8006ad2 <setCommand+0x526>
 8006ad0:	e11f      	b.n	8006d12 <setCommand+0x766>
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	4967      	ldr	r1, [pc, #412]	; (8006c74 <setCommand+0x6c8>)
 8006ad6:	0020      	movs	r0, r4
 8006ad8:	f00d fe82 	bl	80147e0 <strncmp>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d100      	bne.n	8006ae2 <setCommand+0x536>
 8006ae0:	e119      	b.n	8006d16 <setCommand+0x76a>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 8006ae2:	2205      	movs	r2, #5
 8006ae4:	4964      	ldr	r1, [pc, #400]	; (8006c78 <setCommand+0x6cc>)
 8006ae6:	0020      	movs	r0, r4
 8006ae8:	f00d fe7a 	bl	80147e0 <strncmp>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d100      	bne.n	8006af2 <setCommand+0x546>
 8006af0:	e113      	b.n	8006d1a <setCommand+0x76e>
 8006af2:	2202      	movs	r2, #2
 8006af4:	4961      	ldr	r1, [pc, #388]	; (8006c7c <setCommand+0x6d0>)
 8006af6:	0020      	movs	r0, r4
 8006af8:	f00d fe72 	bl	80147e0 <strncmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d100      	bne.n	8006b02 <setCommand+0x556>
 8006b00:	e10d      	b.n	8006d1e <setCommand+0x772>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 8006b02:	2205      	movs	r2, #5
 8006b04:	495e      	ldr	r1, [pc, #376]	; (8006c80 <setCommand+0x6d4>)
 8006b06:	0020      	movs	r0, r4
 8006b08:	f00d fe6a 	bl	80147e0 <strncmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d100      	bne.n	8006b12 <setCommand+0x566>
 8006b10:	e107      	b.n	8006d22 <setCommand+0x776>
 8006b12:	2202      	movs	r2, #2
 8006b14:	495b      	ldr	r1, [pc, #364]	; (8006c84 <setCommand+0x6d8>)
 8006b16:	0020      	movs	r0, r4
 8006b18:	f00d fe62 	bl	80147e0 <strncmp>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d100      	bne.n	8006b22 <setCommand+0x576>
 8006b20:	e101      	b.n	8006d26 <setCommand+0x77a>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 8006b22:	2203      	movs	r2, #3
 8006b24:	4958      	ldr	r1, [pc, #352]	; (8006c88 <setCommand+0x6dc>)
 8006b26:	0020      	movs	r0, r4
 8006b28:	f00d fe5a 	bl	80147e0 <strncmp>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d100      	bne.n	8006b32 <setCommand+0x586>
 8006b30:	e0fb      	b.n	8006d2a <setCommand+0x77e>
 8006b32:	2202      	movs	r2, #2
 8006b34:	4955      	ldr	r1, [pc, #340]	; (8006c8c <setCommand+0x6e0>)
 8006b36:	0020      	movs	r0, r4
 8006b38:	f00d fe52 	bl	80147e0 <strncmp>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d100      	bne.n	8006b42 <setCommand+0x596>
 8006b40:	e0f5      	b.n	8006d2e <setCommand+0x782>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 8006b42:	2204      	movs	r2, #4
 8006b44:	4952      	ldr	r1, [pc, #328]	; (8006c90 <setCommand+0x6e4>)
 8006b46:	0020      	movs	r0, r4
 8006b48:	f00d fe4a 	bl	80147e0 <strncmp>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d100      	bne.n	8006b52 <setCommand+0x5a6>
 8006b50:	e0ef      	b.n	8006d32 <setCommand+0x786>
 8006b52:	2202      	movs	r2, #2
 8006b54:	494f      	ldr	r1, [pc, #316]	; (8006c94 <setCommand+0x6e8>)
 8006b56:	0020      	movs	r0, r4
 8006b58:	f00d fe42 	bl	80147e0 <strncmp>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d100      	bne.n	8006b62 <setCommand+0x5b6>
 8006b60:	e0e9      	b.n	8006d36 <setCommand+0x78a>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 8006b62:	2204      	movs	r2, #4
 8006b64:	494c      	ldr	r1, [pc, #304]	; (8006c98 <setCommand+0x6ec>)
 8006b66:	0020      	movs	r0, r4
 8006b68:	f00d fe3a 	bl	80147e0 <strncmp>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d100      	bne.n	8006b72 <setCommand+0x5c6>
 8006b70:	e0e3      	b.n	8006d3a <setCommand+0x78e>
 8006b72:	2202      	movs	r2, #2
 8006b74:	4949      	ldr	r1, [pc, #292]	; (8006c9c <setCommand+0x6f0>)
 8006b76:	0020      	movs	r0, r4
 8006b78:	f00d fe32 	bl	80147e0 <strncmp>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d100      	bne.n	8006b82 <setCommand+0x5d6>
 8006b80:	e0dd      	b.n	8006d3e <setCommand+0x792>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 8006b82:	2205      	movs	r2, #5
 8006b84:	4946      	ldr	r1, [pc, #280]	; (8006ca0 <setCommand+0x6f4>)
 8006b86:	0020      	movs	r0, r4
 8006b88:	f00d fe2a 	bl	80147e0 <strncmp>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d100      	bne.n	8006b92 <setCommand+0x5e6>
 8006b90:	e0d7      	b.n	8006d42 <setCommand+0x796>
 8006b92:	2202      	movs	r2, #2
 8006b94:	4943      	ldr	r1, [pc, #268]	; (8006ca4 <setCommand+0x6f8>)
 8006b96:	0020      	movs	r0, r4
 8006b98:	f00d fe22 	bl	80147e0 <strncmp>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d100      	bne.n	8006ba2 <setCommand+0x5f6>
 8006ba0:	e0d1      	b.n	8006d46 <setCommand+0x79a>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8006ba2:	2209      	movs	r2, #9
 8006ba4:	4940      	ldr	r1, [pc, #256]	; (8006ca8 <setCommand+0x6fc>)
 8006ba6:	0020      	movs	r0, r4
 8006ba8:	f00d fe1a 	bl	80147e0 <strncmp>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d100      	bne.n	8006bb2 <setCommand+0x606>
 8006bb0:	e0cb      	b.n	8006d4a <setCommand+0x79e>
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	493d      	ldr	r1, [pc, #244]	; (8006cac <setCommand+0x700>)
 8006bb6:	0020      	movs	r0, r4
 8006bb8:	f00d fe12 	bl	80147e0 <strncmp>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d100      	bne.n	8006bc2 <setCommand+0x616>
 8006bc0:	e0c5      	b.n	8006d4e <setCommand+0x7a2>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 8006bc2:	2207      	movs	r2, #7
 8006bc4:	493a      	ldr	r1, [pc, #232]	; (8006cb0 <setCommand+0x704>)
 8006bc6:	0020      	movs	r0, r4
 8006bc8:	f00d fe0a 	bl	80147e0 <strncmp>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d100      	bne.n	8006bd2 <setCommand+0x626>
 8006bd0:	e0bf      	b.n	8006d52 <setCommand+0x7a6>
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	4937      	ldr	r1, [pc, #220]	; (8006cb4 <setCommand+0x708>)
 8006bd6:	0020      	movs	r0, r4
 8006bd8:	f00d fe02 	bl	80147e0 <strncmp>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d100      	bne.n	8006be2 <setCommand+0x636>
 8006be0:	e0b9      	b.n	8006d56 <setCommand+0x7aa>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 8006be2:	2208      	movs	r2, #8
 8006be4:	4934      	ldr	r1, [pc, #208]	; (8006cb8 <setCommand+0x70c>)
 8006be6:	0020      	movs	r0, r4
 8006be8:	f00d fdfa 	bl	80147e0 <strncmp>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d100      	bne.n	8006bf2 <setCommand+0x646>
 8006bf0:	e0b3      	b.n	8006d5a <setCommand+0x7ae>
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	4931      	ldr	r1, [pc, #196]	; (8006cbc <setCommand+0x710>)
 8006bf6:	0020      	movs	r0, r4
 8006bf8:	f00d fdf2 	bl	80147e0 <strncmp>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d100      	bne.n	8006c02 <setCommand+0x656>
 8006c00:	e0ad      	b.n	8006d5e <setCommand+0x7b2>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006c02:	2208      	movs	r2, #8
 8006c04:	492e      	ldr	r1, [pc, #184]	; (8006cc0 <setCommand+0x714>)
 8006c06:	0020      	movs	r0, r4
 8006c08:	f00d fdea 	bl	80147e0 <strncmp>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d100      	bne.n	8006c12 <setCommand+0x666>
 8006c10:	e0a7      	b.n	8006d62 <setCommand+0x7b6>
 8006c12:	2202      	movs	r2, #2
 8006c14:	492b      	ldr	r1, [pc, #172]	; (8006cc4 <setCommand+0x718>)
 8006c16:	0020      	movs	r0, r4
 8006c18:	f00d fde2 	bl	80147e0 <strncmp>
			temp82 = DECEMBER;
 8006c1c:	240c      	movs	r4, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d055      	beq.n	8006cce <setCommand+0x722>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8006c22:	220f      	movs	r2, #15
 8006c24:	4928      	ldr	r1, [pc, #160]	; (8006cc8 <setCommand+0x71c>)
 8006c26:	0028      	movs	r0, r5
 8006c28:	f00d fb61 	bl	80142ee <memcpy>
 8006c2c:	e6cb      	b.n	80069c6 <setCommand+0x41a>
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	20001308 	.word	0x20001308
 8006c34:	20001310 	.word	0x20001310
 8006c38:	20001314 	.word	0x20001314
 8006c3c:	20001318 	.word	0x20001318
 8006c40:	0801b6b4 	.word	0x0801b6b4
 8006c44:	0801a144 	.word	0x0801a144
 8006c48:	20006a18 	.word	0x20006a18
 8006c4c:	0801a150 	.word	0x0801a150
 8006c50:	0801a158 	.word	0x0801a158
 8006c54:	0801a160 	.word	0x0801a160
 8006c58:	0801a16c 	.word	0x0801a16c
 8006c5c:	0801a178 	.word	0x0801a178
 8006c60:	0801a180 	.word	0x0801a180
 8006c64:	0801a18c 	.word	0x0801a18c
 8006c68:	0801a228 	.word	0x0801a228
 8006c6c:	0801a194 	.word	0x0801a194
 8006c70:	0801a198 	.word	0x0801a198
 8006c74:	0801a1a4 	.word	0x0801a1a4
 8006c78:	0801a1a8 	.word	0x0801a1a8
 8006c7c:	0801a1b0 	.word	0x0801a1b0
 8006c80:	0801a1b4 	.word	0x0801a1b4
 8006c84:	0801a1bc 	.word	0x0801a1bc
 8006c88:	0801a1c0 	.word	0x0801a1c0
 8006c8c:	0801a1c4 	.word	0x0801a1c4
 8006c90:	0801a1c8 	.word	0x0801a1c8
 8006c94:	0801a1d0 	.word	0x0801a1d0
 8006c98:	0801a1d4 	.word	0x0801a1d4
 8006c9c:	0801a1dc 	.word	0x0801a1dc
 8006ca0:	0801a1e0 	.word	0x0801a1e0
 8006ca4:	0801a1e8 	.word	0x0801a1e8
 8006ca8:	0801a1ec 	.word	0x0801a1ec
 8006cac:	0801a1f8 	.word	0x0801a1f8
 8006cb0:	0801a1fc 	.word	0x0801a1fc
 8006cb4:	0801a204 	.word	0x0801a204
 8006cb8:	0801a208 	.word	0x0801a208
 8006cbc:	0801a214 	.word	0x0801a214
 8006cc0:	0801a218 	.word	0x0801a218
 8006cc4:	0801a224 	.word	0x0801a224
 8006cc8:	080198f8 	.word	0x080198f8
			temp82 = JANUARY;
 8006ccc:	2401      	movs	r4, #1
		if (result == BOS_OK) 
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	d000      	beq.n	8006cd4 <setCommand+0x728>
 8006cd2:	e672      	b.n	80069ba <setCommand+0x40e>
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006cd4:	4643      	mov	r3, r8
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	2b1e      	cmp	r3, #30
 8006cda:	d8a2      	bhi.n	8006c22 <setCommand+0x676>
 8006cdc:	4b2f      	ldr	r3, [pc, #188]	; (8006d9c <setCommand+0x7f0>)
 8006cde:	444b      	add	r3, r9
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b64      	cmp	r3, #100	; 0x64
 8006ce4:	d89d      	bhi.n	8006c22 <setCommand+0x676>
				GetTimeDate();
 8006ce6:	f006 fe69 	bl	800d9bc <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 8006cea:	4b2d      	ldr	r3, [pc, #180]	; (8006da0 <setCommand+0x7f4>)
 8006cec:	220c      	movs	r2, #12
 8006cee:	569a      	ldrsb	r2, [r3, r2]
 8006cf0:	9204      	str	r2, [sp, #16]
 8006cf2:	7cda      	ldrb	r2, [r3, #19]
 8006cf4:	9203      	str	r2, [sp, #12]
 8006cf6:	7c9a      	ldrb	r2, [r3, #18]
 8006cf8:	9202      	str	r2, [sp, #8]
 8006cfa:	7c5a      	ldrb	r2, [r3, #17]
 8006cfc:	9201      	str	r2, [sp, #4]
 8006cfe:	7c1b      	ldrb	r3, [r3, #16]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	003b      	movs	r3, r7
 8006d04:	464a      	mov	r2, r9
 8006d06:	4641      	mov	r1, r8
 8006d08:	0020      	movs	r0, r4
 8006d0a:	f006 fdfd 	bl	800d908 <BOS_CalendarConfig>
 8006d0e:	0006      	movs	r6, r0
 8006d10:	e650      	b.n	80069b4 <setCommand+0x408>
			temp82 = FEBRUARY;
 8006d12:	2402      	movs	r4, #2
 8006d14:	e7db      	b.n	8006cce <setCommand+0x722>
 8006d16:	2402      	movs	r4, #2
 8006d18:	e7d9      	b.n	8006cce <setCommand+0x722>
			temp82 = MARCH;
 8006d1a:	2403      	movs	r4, #3
 8006d1c:	e7d7      	b.n	8006cce <setCommand+0x722>
 8006d1e:	2403      	movs	r4, #3
 8006d20:	e7d5      	b.n	8006cce <setCommand+0x722>
			temp82 = APRIL;
 8006d22:	2404      	movs	r4, #4
 8006d24:	e7d3      	b.n	8006cce <setCommand+0x722>
 8006d26:	2404      	movs	r4, #4
 8006d28:	e7d1      	b.n	8006cce <setCommand+0x722>
			temp82 = MAY;
 8006d2a:	2405      	movs	r4, #5
 8006d2c:	e7cf      	b.n	8006cce <setCommand+0x722>
 8006d2e:	2405      	movs	r4, #5
 8006d30:	e7cd      	b.n	8006cce <setCommand+0x722>
			temp82 = JUNE;
 8006d32:	2406      	movs	r4, #6
 8006d34:	e7cb      	b.n	8006cce <setCommand+0x722>
 8006d36:	2406      	movs	r4, #6
 8006d38:	e7c9      	b.n	8006cce <setCommand+0x722>
			temp82 = JULY;
 8006d3a:	2407      	movs	r4, #7
 8006d3c:	e7c7      	b.n	8006cce <setCommand+0x722>
 8006d3e:	2407      	movs	r4, #7
 8006d40:	e7c5      	b.n	8006cce <setCommand+0x722>
			temp82 = AUGUST;
 8006d42:	2408      	movs	r4, #8
 8006d44:	e7c3      	b.n	8006cce <setCommand+0x722>
 8006d46:	2408      	movs	r4, #8
 8006d48:	e7c1      	b.n	8006cce <setCommand+0x722>
			temp82 = SEPTEMBER;
 8006d4a:	2409      	movs	r4, #9
 8006d4c:	e7bf      	b.n	8006cce <setCommand+0x722>
 8006d4e:	2409      	movs	r4, #9
 8006d50:	e7bd      	b.n	8006cce <setCommand+0x722>
			temp82 = OCTOBER;
 8006d52:	240a      	movs	r4, #10
 8006d54:	e7bb      	b.n	8006cce <setCommand+0x722>
 8006d56:	240a      	movs	r4, #10
 8006d58:	e7b9      	b.n	8006cce <setCommand+0x722>
			temp82 = NOVEMBER;
 8006d5a:	240b      	movs	r4, #11
 8006d5c:	e7b7      	b.n	8006cce <setCommand+0x722>
 8006d5e:	240b      	movs	r4, #11
 8006d60:	e7b5      	b.n	8006cce <setCommand+0x722>
			temp82 = DECEMBER;
 8006d62:	240c      	movs	r4, #12
 8006d64:	e7b3      	b.n	8006cce <setCommand+0x722>
			temp81 = MONDAY;
 8006d66:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006d68:	4b0e      	ldr	r3, [pc, #56]	; (8006da4 <setCommand+0x7f8>)
 8006d6a:	681c      	ldr	r4, [r3, #0]
 8006d6c:	2207      	movs	r2, #7
 8006d6e:	490e      	ldr	r1, [pc, #56]	; (8006da8 <setCommand+0x7fc>)
 8006d70:	0020      	movs	r0, r4
 8006d72:	f00d fd35 	bl	80147e0 <strncmp>
 8006d76:	2600      	movs	r6, #0
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d000      	beq.n	8006d7e <setCommand+0x7d2>
 8006d7c:	e699      	b.n	8006ab2 <setCommand+0x506>
			temp82 = JANUARY;
 8006d7e:	2401      	movs	r4, #1
 8006d80:	e7a8      	b.n	8006cd4 <setCommand+0x728>
			temp81 = TUESDAY;
 8006d82:	2702      	movs	r7, #2
 8006d84:	e7f0      	b.n	8006d68 <setCommand+0x7bc>
			temp81 = WEDNESDAY;
 8006d86:	2703      	movs	r7, #3
 8006d88:	e7ee      	b.n	8006d68 <setCommand+0x7bc>
			temp81 = THURSDAY;
 8006d8a:	2704      	movs	r7, #4
 8006d8c:	e7ec      	b.n	8006d68 <setCommand+0x7bc>
			temp81 = FRIDAY;
 8006d8e:	2705      	movs	r7, #5
 8006d90:	e7ea      	b.n	8006d68 <setCommand+0x7bc>
			temp81 = SATURDAY;
 8006d92:	2706      	movs	r7, #6
 8006d94:	e7e8      	b.n	8006d68 <setCommand+0x7bc>
			temp81 = SUNDAY;
 8006d96:	2707      	movs	r7, #7
 8006d98:	e7e6      	b.n	8006d68 <setCommand+0x7bc>
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	fffff830 	.word	0xfffff830
 8006da0:	20006a18 	.word	0x20006a18
 8006da4:	20001310 	.word	0x20001310
 8006da8:	0801a228 	.word	0x0801a228

08006dac <removebuttonCommand>:
{
 8006dac:	b530      	push	{r4, r5, lr}
 8006dae:	b083      	sub	sp, #12
 8006db0:	0005      	movs	r5, r0
 8006db2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8006db4:	2300      	movs	r3, #0
 8006db6:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006db8:	2d00      	cmp	r5, #0
 8006dba:	d101      	bne.n	8006dc0 <removebuttonCommand+0x14>
 8006dbc:	b672      	cpsid	i
 8006dbe:	e7fe      	b.n	8006dbe <removebuttonCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006dc0:	aa01      	add	r2, sp, #4
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	f007 febc 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8006dc8:	2300      	movs	r3, #0
 8006dca:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 8006dcc:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 8006dce:	2b70      	cmp	r3, #112	; 0x70
 8006dd0:	d007      	beq.n	8006de2 <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 8006dd2:	0020      	movs	r0, r4
 8006dd4:	f001 fdb8 	bl	8008948 <RemovePortButton>
	if (result == BOS_OK) 
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d007      	beq.n	8006dec <removebuttonCommand+0x40>
}
 8006ddc:	2000      	movs	r0, #0
 8006dde:	b003      	add	sp, #12
 8006de0:	bd30      	pop	{r4, r5, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8006de2:	3001      	adds	r0, #1
 8006de4:	f00c fff9 	bl	8013dda <atol>
 8006de8:	b2c4      	uxtb	r4, r0
 8006dea:	e7f2      	b.n	8006dd2 <removebuttonCommand+0x26>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 8006dec:	0023      	movs	r3, r4
 8006dee:	0022      	movs	r2, r4
 8006df0:	4902      	ldr	r1, [pc, #8]	; (8006dfc <removebuttonCommand+0x50>)
 8006df2:	0028      	movs	r0, r5
 8006df4:	f00d fcb0 	bl	8014758 <sprintf>
 8006df8:	e7f0      	b.n	8006ddc <removebuttonCommand+0x30>
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	08019ef8 	.word	0x08019ef8

08006e00 <addbuttonCommand>:
{
 8006e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e02:	b087      	sub	sp, #28
 8006e04:	0006      	movs	r6, r0
 8006e06:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9305      	str	r3, [sp, #20]
 8006e0c:	9304      	str	r3, [sp, #16]
	configASSERT( pcWriteBuffer );
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d101      	bne.n	8006e16 <addbuttonCommand+0x16>
 8006e12:	b672      	cpsid	i
 8006e14:	e7fe      	b.n	8006e14 <addbuttonCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006e16:	aa05      	add	r2, sp, #20
 8006e18:	2101      	movs	r1, #1
 8006e1a:	9803      	ldr	r0, [sp, #12]
 8006e1c:	f007 fe90 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8006e20:	0004      	movs	r4, r0
 8006e22:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <addbuttonCommand+0xb0>)
 8006e24:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006e26:	9d05      	ldr	r5, [sp, #20]
 8006e28:	002a      	movs	r2, r5
 8006e2a:	4922      	ldr	r1, [pc, #136]	; (8006eb4 <addbuttonCommand+0xb4>)
 8006e2c:	f00d fcd8 	bl	80147e0 <strncmp>
		type = MOMENTARY_NO;
 8006e30:	2701      	movs	r7, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d017      	beq.n	8006e66 <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006e36:	002a      	movs	r2, r5
 8006e38:	491f      	ldr	r1, [pc, #124]	; (8006eb8 <addbuttonCommand+0xb8>)
 8006e3a:	0020      	movs	r0, r4
 8006e3c:	f00d fcd0 	bl	80147e0 <strncmp>
		type = MOMENTARY_NC;
 8006e40:	3701      	adds	r7, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d00f      	beq.n	8006e66 <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006e46:	002a      	movs	r2, r5
 8006e48:	491c      	ldr	r1, [pc, #112]	; (8006ebc <addbuttonCommand+0xbc>)
 8006e4a:	0020      	movs	r0, r4
 8006e4c:	f00d fcc8 	bl	80147e0 <strncmp>
		type = ONOFF_NO;
 8006e50:	3701      	adds	r7, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d007      	beq.n	8006e66 <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 8006e56:	002a      	movs	r2, r5
 8006e58:	4919      	ldr	r1, [pc, #100]	; (8006ec0 <addbuttonCommand+0xc0>)
 8006e5a:	0020      	movs	r0, r4
 8006e5c:	f00d fcc0 	bl	80147e0 <strncmp>
		type = ONOFF_NC;
 8006e60:	4243      	negs	r3, r0
 8006e62:	4158      	adcs	r0, r3
 8006e64:	0087      	lsls	r7, r0, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006e66:	aa04      	add	r2, sp, #16
 8006e68:	2102      	movs	r1, #2
 8006e6a:	9803      	ldr	r0, [sp, #12]
 8006e6c:	f007 fe68 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8006e70:	2300      	movs	r3, #0
 8006e72:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8006e74:	2400      	movs	r4, #0
	if (pcParameterString2[0] == 'p') {
 8006e76:	2b70      	cmp	r3, #112	; 0x70
 8006e78:	d008      	beq.n	8006e8c <addbuttonCommand+0x8c>
	result = AddPortButton(type, port);
 8006e7a:	0021      	movs	r1, r4
 8006e7c:	0038      	movs	r0, r7
 8006e7e:	f001 fcd1 	bl	8008824 <AddPortButton>
	if (result == BOS_OK) 
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d007      	beq.n	8006e96 <addbuttonCommand+0x96>
}
 8006e86:	2000      	movs	r0, #0
 8006e88:	b007      	add	sp, #28
 8006e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	f00c ffa4 	bl	8013dda <atol>
 8006e92:	b2c4      	uxtb	r4, r0
 8006e94:	e7f1      	b.n	8006e7a <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006e96:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <addbuttonCommand+0xb0>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9905      	ldr	r1, [sp, #20]
 8006e9e:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8006ea0:	9400      	str	r4, [sp, #0]
 8006ea2:	0023      	movs	r3, r4
 8006ea4:	4907      	ldr	r1, [pc, #28]	; (8006ec4 <addbuttonCommand+0xc4>)
 8006ea6:	0030      	movs	r0, r6
 8006ea8:	f00d fc56 	bl	8014758 <sprintf>
 8006eac:	e7eb      	b.n	8006e86 <addbuttonCommand+0x86>
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	200012f8 	.word	0x200012f8
 8006eb4:	0801979c 	.word	0x0801979c
 8006eb8:	080197ac 	.word	0x080197ac
 8006ebc:	080197bc 	.word	0x080197bc
 8006ec0:	080197c8 	.word	0x080197c8
 8006ec4:	080197d4 	.word	0x080197d4

08006ec8 <scastCommand>:
{
 8006ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eca:	46de      	mov	lr, fp
 8006ecc:	4657      	mov	r7, sl
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b09b      	sub	sp, #108	; 0x6c
 8006ed2:	0005      	movs	r5, r0
 8006ed4:	9009      	str	r0, [sp, #36]	; 0x24
 8006ed6:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9319      	str	r3, [sp, #100]	; 0x64
 8006edc:	9318      	str	r3, [sp, #96]	; 0x60
 8006ede:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8006ee0:	9316      	str	r3, [sp, #88]	; 0x58
 8006ee2:	9315      	str	r3, [sp, #84]	; 0x54
 8006ee4:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 = 0;
 8006ee6:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 8006ee8:	220a      	movs	r2, #10
 8006eea:	2100      	movs	r1, #0
 8006eec:	a810      	add	r0, sp, #64	; 0x40
 8006eee:	f00d fa07 	bl	8014300 <memset>
 8006ef2:	220a      	movs	r2, #10
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	a80d      	add	r0, sp, #52	; 0x34
 8006ef8:	f00d fa02 	bl	8014300 <memset>
 8006efc:	220a      	movs	r2, #10
 8006efe:	2100      	movs	r1, #0
 8006f00:	a80a      	add	r0, sp, #40	; 0x28
 8006f02:	f00d f9fd 	bl	8014300 <memset>
	configASSERT( pcWriteBuffer );
 8006f06:	2d00      	cmp	r5, #0
 8006f08:	d101      	bne.n	8006f0e <scastCommand+0x46>
 8006f0a:	b672      	cpsid	i
 8006f0c:	e7fe      	b.n	8006f0c <scastCommand+0x44>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006f0e:	aa19      	add	r2, sp, #100	; 0x64
 8006f10:	2101      	movs	r1, #1
 8006f12:	0020      	movs	r0, r4
 8006f14:	f007 fe14 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8006f18:	2300      	movs	r3, #0
 8006f1a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	9208      	str	r2, [sp, #32]
	if (pcParameterString1[0] == 'P') {
 8006f20:	2b50      	cmp	r3, #80	; 0x50
 8006f22:	d100      	bne.n	8006f26 <scastCommand+0x5e>
 8006f24:	e06d      	b.n	8007002 <scastCommand+0x13a>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006f26:	aa18      	add	r2, sp, #96	; 0x60
 8006f28:	2102      	movs	r1, #2
 8006f2a:	0020      	movs	r0, r4
 8006f2c:	f007 fe08 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8006f30:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 8006f32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f34:	a810      	add	r0, sp, #64	; 0x40
 8006f36:	f00d fc64 	bl	8014802 <strncpy>
	srcM = (uint8_t) GetID(par1);
 8006f3a:	a810      	add	r0, sp, #64	; 0x40
 8006f3c:	f7fd fb18 	bl	8004570 <GetID>
 8006f40:	b2c3      	uxtb	r3, r0
 8006f42:	469a      	mov	sl, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006f44:	aa17      	add	r2, sp, #92	; 0x5c
 8006f46:	2103      	movs	r1, #3
 8006f48:	0020      	movs	r0, r4
 8006f4a:	f007 fdf9 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8006f4e:	2300      	movs	r3, #0
 8006f50:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006f52:	2700      	movs	r7, #0
	if (pcParameterString3[0] == 'p') {
 8006f54:	2b70      	cmp	r3, #112	; 0x70
 8006f56:	d05a      	beq.n	800700e <scastCommand+0x146>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006f58:	aa16      	add	r2, sp, #88	; 0x58
 8006f5a:	2104      	movs	r1, #4
 8006f5c:	0020      	movs	r0, r4
 8006f5e:	f007 fdef 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8006f62:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 8006f64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f66:	a80d      	add	r0, sp, #52	; 0x34
 8006f68:	f00d fc4b 	bl	8014802 <strncpy>
	dstM = (uint8_t) GetID(par2);
 8006f6c:	a80d      	add	r0, sp, #52	; 0x34
 8006f6e:	f7fd faff 	bl	8004570 <GetID>
 8006f72:	b2c3      	uxtb	r3, r0
 8006f74:	469b      	mov	fp, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006f76:	aa15      	add	r2, sp, #84	; 0x54
 8006f78:	2105      	movs	r1, #5
 8006f7a:	0020      	movs	r0, r4
 8006f7c:	f007 fde0 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8006f80:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006f82:	0032      	movs	r2, r6
 8006f84:	492b      	ldr	r1, [pc, #172]	; (8007034 <scastCommand+0x16c>)
 8006f86:	9007      	str	r0, [sp, #28]
 8006f88:	f00d fc2a 	bl	80147e0 <strncmp>
		direction = FORWARD;
 8006f8c:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d00f      	beq.n	8006fb2 <scastCommand+0xea>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006f92:	0032      	movs	r2, r6
 8006f94:	4928      	ldr	r1, [pc, #160]	; (8007038 <scastCommand+0x170>)
 8006f96:	9807      	ldr	r0, [sp, #28]
 8006f98:	f00d fc22 	bl	80147e0 <strncmp>
		direction = BACKWARD;
 8006f9c:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d007      	beq.n	8006fb2 <scastCommand+0xea>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 8006fa2:	0032      	movs	r2, r6
 8006fa4:	4925      	ldr	r1, [pc, #148]	; (800703c <scastCommand+0x174>)
 8006fa6:	9807      	ldr	r0, [sp, #28]
 8006fa8:	f00d fc1a 	bl	80147e0 <strncmp>
		direction = BIDIRECTIONAL;
 8006fac:	4243      	negs	r3, r0
 8006fae:	4158      	adcs	r0, r3
 8006fb0:	0045      	lsls	r5, r0, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 8006fb2:	0032      	movs	r2, r6
 8006fb4:	9907      	ldr	r1, [sp, #28]
 8006fb6:	a80a      	add	r0, sp, #40	; 0x28
 8006fb8:	f00d fc23 	bl	8014802 <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 8006fbc:	aa14      	add	r2, sp, #80	; 0x50
 8006fbe:	2106      	movs	r1, #6
 8006fc0:	0020      	movs	r0, r4
 8006fc2:	f007 fdbd 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8006fc6:	f00c ff08 	bl	8013dda <atol>
 8006fca:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 8006fcc:	aa13      	add	r2, sp, #76	; 0x4c
 8006fce:	2107      	movs	r1, #7
 8006fd0:	0020      	movs	r0, r4
 8006fd2:	f007 fdb5 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8006fd6:	f00c ff00 	bl	8013dda <atol>
 8006fda:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9303      	str	r3, [sp, #12]
 8006fe0:	9002      	str	r0, [sp, #8]
 8006fe2:	9601      	str	r6, [sp, #4]
 8006fe4:	9500      	str	r5, [sp, #0]
 8006fe6:	465b      	mov	r3, fp
 8006fe8:	003a      	movs	r2, r7
 8006fea:	4651      	mov	r1, sl
 8006fec:	9808      	ldr	r0, [sp, #32]
 8006fee:	f002 fa09 	bl	8009404 <StartScastDMAStream>
	if (result == BOS_OK) 
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d010      	beq.n	8007018 <scastCommand+0x150>
}
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	b01b      	add	sp, #108	; 0x6c
 8006ffa:	bc0c      	pop	{r2, r3}
 8006ffc:	4692      	mov	sl, r2
 8006ffe:	469b      	mov	fp, r3
 8007000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8007002:	3001      	adds	r0, #1
 8007004:	f00c fee9 	bl	8013dda <atol>
 8007008:	b2c3      	uxtb	r3, r0
 800700a:	9308      	str	r3, [sp, #32]
 800700c:	e78b      	b.n	8006f26 <scastCommand+0x5e>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 800700e:	3001      	adds	r0, #1
 8007010:	f00c fee3 	bl	8013dda <atol>
 8007014:	b2c7      	uxtb	r7, r0
 8007016:	e79f      	b.n	8006f58 <scastCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 8007018:	9404      	str	r4, [sp, #16]
 800701a:	9603      	str	r6, [sp, #12]
 800701c:	ab0d      	add	r3, sp, #52	; 0x34
 800701e:	9302      	str	r3, [sp, #8]
 8007020:	9701      	str	r7, [sp, #4]
 8007022:	ab10      	add	r3, sp, #64	; 0x40
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	9b08      	ldr	r3, [sp, #32]
 8007028:	aa0a      	add	r2, sp, #40	; 0x28
 800702a:	4905      	ldr	r1, [pc, #20]	; (8007040 <scastCommand+0x178>)
 800702c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800702e:	f00d fb93 	bl	8014758 <sprintf>
 8007032:	e7e0      	b.n	8006ff6 <scastCommand+0x12e>
 8007034:	08019f40 	.word	0x08019f40
 8007038:	08019f48 	.word	0x08019f48
 800703c:	08019f54 	.word	0x08019f54
 8007040:	08019f64 	.word	0x08019f64

08007044 <infoCommand>:
{
 8007044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007046:	b083      	sub	sp, #12
 8007048:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800704a:	d039      	beq.n	80070c0 <infoCommand+0x7c>
	if (N > 1)
 800704c:	4b26      	ldr	r3, [pc, #152]	; (80070e8 <infoCommand+0xa4>)
 800704e:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 8007050:	2500      	movs	r5, #0
	if (N > 1)
 8007052:	2b01      	cmp	r3, #1
 8007054:	d902      	bls.n	800705c <infoCommand+0x18>
		result = ReadPortsDir();
 8007056:	f7fd fbdf 	bl	8004818 <ReadPortsDir>
 800705a:	0005      	movs	r5, r0
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 800705c:	4b22      	ldr	r3, [pc, #136]	; (80070e8 <infoCommand+0xa4>)
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	4922      	ldr	r1, [pc, #136]	; (80070ec <infoCommand+0xa8>)
 8007062:	0020      	movs	r0, r4
 8007064:	f00d fb78 	bl	8014758 <sprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8007068:	0020      	movs	r0, r4
 800706a:	f7f9 f855 	bl	8000118 <strlen>
 800706e:	b282      	uxth	r2, r0
 8007070:	4e1f      	ldr	r6, [pc, #124]	; (80070f0 <infoCommand+0xac>)
 8007072:	7830      	ldrb	r0, [r6, #0]
 8007074:	2701      	movs	r7, #1
 8007076:	427f      	negs	r7, r7
 8007078:	9700      	str	r7, [sp, #0]
 800707a:	2332      	movs	r3, #50	; 0x32
 800707c:	0021      	movs	r1, r4
 800707e:	f006 ff41 	bl	800df04 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 8007082:	2213      	movs	r2, #19
 8007084:	491b      	ldr	r1, [pc, #108]	; (80070f4 <infoCommand+0xb0>)
 8007086:	0020      	movs	r0, r4
 8007088:	f00d f931 	bl	80142ee <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800708c:	0020      	movs	r0, r4
 800708e:	f7f9 f843 	bl	8000118 <strlen>
 8007092:	b282      	uxth	r2, r0
 8007094:	7830      	ldrb	r0, [r6, #0]
 8007096:	9700      	str	r7, [sp, #0]
 8007098:	2332      	movs	r3, #50	; 0x32
 800709a:	0021      	movs	r1, r4
 800709c:	f006 ff32 	bl	800df04 <writePxMutex>
	DisplayTopology(PcPort);
 80070a0:	7830      	ldrb	r0, [r6, #0]
 80070a2:	f7fc ffc1 	bl	8004028 <DisplayTopology>
	DisplayPortsDir(PcPort);
 80070a6:	7830      	ldrb	r0, [r6, #0]
 80070a8:	f7fd f88e 	bl	80041c8 <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 80070ac:	2d02      	cmp	r5, #2
 80070ae:	d009      	beq.n	80070c4 <infoCommand+0x80>
	sprintf( ( char * ) pcWriteBuffer, " ");
 80070b0:	2202      	movs	r2, #2
 80070b2:	4911      	ldr	r1, [pc, #68]	; (80070f8 <infoCommand+0xb4>)
 80070b4:	0020      	movs	r0, r4
 80070b6:	f00d f91a 	bl	80142ee <memcpy>
}
 80070ba:	2000      	movs	r0, #0
 80070bc:	b003      	add	sp, #12
 80070be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80070c0:	b672      	cpsid	i
 80070c2:	e7fe      	b.n	80070c2 <infoCommand+0x7e>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 80070c4:	2244      	movs	r2, #68	; 0x44
 80070c6:	490d      	ldr	r1, [pc, #52]	; (80070fc <infoCommand+0xb8>)
 80070c8:	0020      	movs	r0, r4
 80070ca:	f00d f910 	bl	80142ee <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 80070ce:	0020      	movs	r0, r4
 80070d0:	f7f9 f822 	bl	8000118 <strlen>
 80070d4:	b282      	uxth	r2, r0
 80070d6:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <infoCommand+0xac>)
 80070d8:	7818      	ldrb	r0, [r3, #0]
 80070da:	003b      	movs	r3, r7
 80070dc:	9700      	str	r7, [sp, #0]
 80070de:	3333      	adds	r3, #51	; 0x33
 80070e0:	0021      	movs	r1, r4
 80070e2:	f006 ff0f 	bl	800df04 <writePxMutex>
 80070e6:	e7e3      	b.n	80070b0 <infoCommand+0x6c>
 80070e8:	2000001c 	.word	0x2000001c
 80070ec:	08019ce0 	.word	0x08019ce0
 80070f0:	20000b07 	.word	0x20000b07
 80070f4:	08019cfc 	.word	0x08019cfc
 80070f8:	08018dac 	.word	0x08018dac
 80070fc:	08019d10 	.word	0x08019d10

08007100 <statusCommand>:
{
 8007100:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 8007102:	2800      	cmp	r0, #0
 8007104:	d101      	bne.n	800710a <statusCommand+0xa>
 8007106:	b672      	cpsid	i
 8007108:	e7fe      	b.n	8007108 <statusCommand+0x8>
	DisplayModuleStatus(0);
 800710a:	2000      	movs	r0, #0
 800710c:	f7fd f8d0 	bl	80042b0 <DisplayModuleStatus>
}
 8007110:	2000      	movs	r0, #0
 8007112:	bd10      	pop	{r4, pc}

08007114 <groupCommand>:
{
 8007114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007116:	46ce      	mov	lr, r9
 8007118:	b500      	push	{lr}
 800711a:	b090      	sub	sp, #64	; 0x40
 800711c:	0004      	movs	r4, r0
 800711e:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 8007120:	2227      	movs	r2, #39	; 0x27
 8007122:	2100      	movs	r1, #0
 8007124:	a806      	add	r0, sp, #24
 8007126:	f00d f8eb 	bl	8014300 <memset>
 800712a:	220a      	movs	r2, #10
 800712c:	2100      	movs	r1, #0
 800712e:	a803      	add	r0, sp, #12
 8007130:	f00d f8e6 	bl	8014300 <memset>
	configASSERT( pcWriteBuffer );
 8007134:	2c00      	cmp	r4, #0
 8007136:	d101      	bne.n	800713c <groupCommand+0x28>
 8007138:	b672      	cpsid	i
 800713a:	e7fe      	b.n	800713a <groupCommand+0x26>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800713c:	4d54      	ldr	r5, [pc, #336]	; (8007290 <groupCommand+0x17c>)
 800713e:	002a      	movs	r2, r5
 8007140:	2101      	movs	r1, #1
 8007142:	9801      	ldr	r0, [sp, #4]
 8007144:	f007 fcfc 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8007148:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 800714a:	682a      	ldr	r2, [r5, #0]
 800714c:	a803      	add	r0, sp, #12
 800714e:	f00d fb58 	bl	8014802 <strncpy>
 8007152:	4d50      	ldr	r5, [pc, #320]	; (8007294 <groupCommand+0x180>)
 8007154:	002f      	movs	r7, r5
 8007156:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 8007158:	0029      	movs	r1, r5
 800715a:	a803      	add	r0, sp, #12
 800715c:	f7f8 ffd2 	bl	8000104 <strcmp>
 8007160:	2800      	cmp	r0, #0
 8007162:	d016      	beq.n	8007192 <groupCommand+0x7e>
 8007164:	350a      	adds	r5, #10
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8007166:	42bd      	cmp	r5, r7
 8007168:	d1f6      	bne.n	8007158 <groupCommand+0x44>
	type = 1;
 800716a:	2701      	movs	r7, #1
	count = 2;
 800716c:	4b4a      	ldr	r3, [pc, #296]	; (8007298 <groupCommand+0x184>)
 800716e:	2202      	movs	r2, #2
 8007170:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 8007172:	3208      	adds	r2, #8
 8007174:	4949      	ldr	r1, [pc, #292]	; (800729c <groupCommand+0x188>)
 8007176:	0020      	movs	r0, r4
 8007178:	f00d f8b9 	bl	80142ee <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 800717c:	4a48      	ldr	r2, [pc, #288]	; (80072a0 <groupCommand+0x18c>)
 800717e:	2102      	movs	r1, #2
 8007180:	9801      	ldr	r0, [sp, #4]
 8007182:	f007 fcdd 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 8007186:	4b47      	ldr	r3, [pc, #284]	; (80072a4 <groupCommand+0x190>)
 8007188:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 800718a:	2800      	cmp	r0, #0
 800718c:	d061      	beq.n	8007252 <groupCommand+0x13e>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 800718e:	4e44      	ldr	r6, [pc, #272]	; (80072a0 <groupCommand+0x18c>)
 8007190:	e011      	b.n	80071b6 <groupCommand+0xa2>
			type = 0; break;
 8007192:	2700      	movs	r7, #0
 8007194:	e7ea      	b.n	800716c <groupCommand+0x58>
		strcat( ( char * ) pcWriteBuffer, module);
 8007196:	a906      	add	r1, sp, #24
 8007198:	0020      	movs	r0, r4
 800719a:	f00d fafd 	bl	8014798 <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 800719e:	1c69      	adds	r1, r5, #1
 80071a0:	b249      	sxtb	r1, r1
 80071a2:	4b3d      	ldr	r3, [pc, #244]	; (8007298 <groupCommand+0x184>)
 80071a4:	7019      	strb	r1, [r3, #0]
 80071a6:	4a3e      	ldr	r2, [pc, #248]	; (80072a0 <groupCommand+0x18c>)
 80071a8:	9801      	ldr	r0, [sp, #4]
 80071aa:	f007 fcc9 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 80071ae:	4b3d      	ldr	r3, [pc, #244]	; (80072a4 <groupCommand+0x190>)
 80071b0:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d04d      	beq.n	8007252 <groupCommand+0x13e>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 80071b6:	6833      	ldr	r3, [r6, #0]
 80071b8:	4699      	mov	r9, r3
 80071ba:	ad06      	add	r5, sp, #24
 80071bc:	001a      	movs	r2, r3
 80071be:	0001      	movs	r1, r0
 80071c0:	0028      	movs	r0, r5
 80071c2:	f00d fb1e 	bl	8014802 <strncpy>
 80071c6:	2300      	movs	r3, #0
 80071c8:	464a      	mov	r2, r9
 80071ca:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 80071cc:	0028      	movs	r0, r5
 80071ce:	f7fd f9cf 	bl	8004570 <GetID>
		if (modID < 0)	break;
 80071d2:	2800      	cmp	r0, #0
 80071d4:	db37      	blt.n	8007246 <groupCommand+0x132>
		result = AddModuleToGroup(modID, alias);
 80071d6:	b2c0      	uxtb	r0, r0
 80071d8:	a903      	add	r1, sp, #12
 80071da:	f7fd fa95 	bl	8004708 <AddModuleToGroup>
		if (result != BOS_OK)	break;
 80071de:	2800      	cmp	r0, #0
 80071e0:	d146      	bne.n	8007270 <groupCommand+0x15c>
		if (count > 2)
 80071e2:	4b2d      	ldr	r3, [pc, #180]	; (8007298 <groupCommand+0x184>)
 80071e4:	2500      	movs	r5, #0
 80071e6:	575d      	ldrsb	r5, [r3, r5]
 80071e8:	2d02      	cmp	r5, #2
 80071ea:	ddd4      	ble.n	8007196 <groupCommand+0x82>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 80071ec:	0020      	movs	r0, r4
 80071ee:	f7f8 ff93 	bl	8000118 <strlen>
 80071f2:	1820      	adds	r0, r4, r0
 80071f4:	2203      	movs	r2, #3
 80071f6:	492c      	ldr	r1, [pc, #176]	; (80072a8 <groupCommand+0x194>)
 80071f8:	f00d f879 	bl	80142ee <memcpy>
 80071fc:	e7cb      	b.n	8007196 <groupCommand+0x82>
	else if (result == BOS_OK && type) {
 80071fe:	2f00      	cmp	r7, #0
 8007200:	d009      	beq.n	8007216 <groupCommand+0x102>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8007202:	aa03      	add	r2, sp, #12
 8007204:	4929      	ldr	r1, [pc, #164]	; (80072ac <groupCommand+0x198>)
 8007206:	a806      	add	r0, sp, #24
 8007208:	f00d faa6 	bl	8014758 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800720c:	a906      	add	r1, sp, #24
 800720e:	0020      	movs	r0, r4
 8007210:	f00d fac2 	bl	8014798 <strcat>
 8007214:	e027      	b.n	8007266 <groupCommand+0x152>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 8007216:	aa03      	add	r2, sp, #12
 8007218:	4925      	ldr	r1, [pc, #148]	; (80072b0 <groupCommand+0x19c>)
 800721a:	a806      	add	r0, sp, #24
 800721c:	f00d fa9c 	bl	8014758 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8007220:	a906      	add	r1, sp, #24
 8007222:	0020      	movs	r0, r4
 8007224:	f00d fab8 	bl	8014798 <strcat>
 8007228:	e01d      	b.n	8007266 <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 800722a:	aa03      	add	r2, sp, #12
 800722c:	4921      	ldr	r1, [pc, #132]	; (80072b4 <groupCommand+0x1a0>)
 800722e:	0020      	movs	r0, r4
 8007230:	f00d fa92 	bl	8014758 <sprintf>
 8007234:	e017      	b.n	8007266 <groupCommand+0x152>
	else if (result == BOS_ERR_ExistingCmd)
 8007236:	2808      	cmp	r0, #8
 8007238:	d115      	bne.n	8007266 <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 800723a:	aa03      	add	r2, sp, #12
 800723c:	491e      	ldr	r1, [pc, #120]	; (80072b8 <groupCommand+0x1a4>)
 800723e:	0020      	movs	r0, r4
 8007240:	f00d fa8a 	bl	8014758 <sprintf>
 8007244:	e00f      	b.n	8007266 <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 8007246:	aa06      	add	r2, sp, #24
 8007248:	491c      	ldr	r1, [pc, #112]	; (80072bc <groupCommand+0x1a8>)
 800724a:	0020      	movs	r0, r4
 800724c:	f00d fa84 	bl	8014758 <sprintf>
	return pdFALSE;
 8007250:	e009      	b.n	8007266 <groupCommand+0x152>
	else if (count == 2)
 8007252:	4b11      	ldr	r3, [pc, #68]	; (8007298 <groupCommand+0x184>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b25b      	sxtb	r3, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d1d0      	bne.n	80071fe <groupCommand+0xea>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 800725c:	aa03      	add	r2, sp, #12
 800725e:	4918      	ldr	r1, [pc, #96]	; (80072c0 <groupCommand+0x1ac>)
 8007260:	0020      	movs	r0, r4
 8007262:	f00d fa79 	bl	8014758 <sprintf>
}
 8007266:	2000      	movs	r0, #0
 8007268:	b010      	add	sp, #64	; 0x40
 800726a:	bc04      	pop	{r2}
 800726c:	4691      	mov	r9, r2
 800726e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 8007270:	4b09      	ldr	r3, [pc, #36]	; (8007298 <groupCommand+0x184>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	b25b      	sxtb	r3, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d0f0      	beq.n	800725c <groupCommand+0x148>
	} else if (result == BOS_ERR_Keyword)
 800727a:	2806      	cmp	r0, #6
 800727c:	d0d5      	beq.n	800722a <groupCommand+0x116>
	else if (result == BOS_ERR_ExistingAlias)
 800727e:	2807      	cmp	r0, #7
 8007280:	d1d9      	bne.n	8007236 <groupCommand+0x122>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 8007282:	aa03      	add	r2, sp, #12
 8007284:	490f      	ldr	r1, [pc, #60]	; (80072c4 <groupCommand+0x1b0>)
 8007286:	0020      	movs	r0, r4
 8007288:	f00d fa66 	bl	8014758 <sprintf>
 800728c:	e7eb      	b.n	8007266 <groupCommand+0x152>
 800728e:	46c0      	nop			; (mov r8, r8)
 8007290:	20001328 	.word	0x20001328
 8007294:	20000ed4 	.word	0x20000ed4
 8007298:	200012ee 	.word	0x200012ee
 800729c:	08019b00 	.word	0x08019b00
 80072a0:	2000131c 	.word	0x2000131c
 80072a4:	200012f0 	.word	0x200012f0
 80072a8:	08019b0c 	.word	0x08019b0c
 80072ac:	08019b3c 	.word	0x08019b3c
 80072b0:	08019b58 	.word	0x08019b58
 80072b4:	08019b78 	.word	0x08019b78
 80072b8:	08019bec 	.word	0x08019bec
 80072bc:	08019c2c 	.word	0x08019c2c
 80072c0:	08019b10 	.word	0x08019b10
 80072c4:	08019bb8 	.word	0x08019bb8

080072c8 <nameCommand>:
{
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	0004      	movs	r4, r0
 80072cc:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 80072ce:	2c00      	cmp	r4, #0
 80072d0:	d101      	bne.n	80072d6 <nameCommand+0xe>
 80072d2:	b672      	cpsid	i
 80072d4:	e7fe      	b.n	80072d4 <nameCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80072d6:	4d1c      	ldr	r5, [pc, #112]	; (8007348 <nameCommand+0x80>)
 80072d8:	002a      	movs	r2, r5
 80072da:	2101      	movs	r1, #1
 80072dc:	f007 fc30 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 80072e0:	0001      	movs	r1, r0
 80072e2:	4b1a      	ldr	r3, [pc, #104]	; (800734c <nameCommand+0x84>)
 80072e4:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 80072e6:	682b      	ldr	r3, [r5, #0]
 80072e8:	2b09      	cmp	r3, #9
 80072ea:	dd01      	ble.n	80072f0 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 80072ec:	2300      	movs	r3, #0
 80072ee:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 80072f0:	4b17      	ldr	r3, [pc, #92]	; (8007350 <nameCommand+0x88>)
 80072f2:	7818      	ldrb	r0, [r3, #0]
 80072f4:	f7fd f9a0 	bl	8004638 <NameModule>
	if (result == BOS_OK)
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d007      	beq.n	800730c <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 80072fc:	2806      	cmp	r0, #6
 80072fe:	d00e      	beq.n	800731e <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8007300:	2807      	cmp	r0, #7
 8007302:	d013      	beq.n	800732c <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 8007304:	2808      	cmp	r0, #8
 8007306:	d018      	beq.n	800733a <nameCommand+0x72>
}
 8007308:	2000      	movs	r0, #0
 800730a:	bd70      	pop	{r4, r5, r6, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 800730c:	4b10      	ldr	r3, [pc, #64]	; (8007350 <nameCommand+0x88>)
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	4b0e      	ldr	r3, [pc, #56]	; (800734c <nameCommand+0x84>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	490f      	ldr	r1, [pc, #60]	; (8007354 <nameCommand+0x8c>)
 8007316:	0020      	movs	r0, r4
 8007318:	f00d fa1e 	bl	8014758 <sprintf>
 800731c:	e7f4      	b.n	8007308 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 800731e:	4b0b      	ldr	r3, [pc, #44]	; (800734c <nameCommand+0x84>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	490d      	ldr	r1, [pc, #52]	; (8007358 <nameCommand+0x90>)
 8007324:	0020      	movs	r0, r4
 8007326:	f00d fa17 	bl	8014758 <sprintf>
 800732a:	e7ed      	b.n	8007308 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 800732c:	4b07      	ldr	r3, [pc, #28]	; (800734c <nameCommand+0x84>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	490a      	ldr	r1, [pc, #40]	; (800735c <nameCommand+0x94>)
 8007332:	0020      	movs	r0, r4
 8007334:	f00d fa10 	bl	8014758 <sprintf>
 8007338:	e7e6      	b.n	8007308 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 800733a:	4b04      	ldr	r3, [pc, #16]	; (800734c <nameCommand+0x84>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4908      	ldr	r1, [pc, #32]	; (8007360 <nameCommand+0x98>)
 8007340:	0020      	movs	r0, r4
 8007342:	f00d fa09 	bl	8014758 <sprintf>
 8007346:	e7df      	b.n	8007308 <nameCommand+0x40>
 8007348:	20001324 	.word	0x20001324
 800734c:	200012f4 	.word	0x200012f4
 8007350:	200010e4 	.word	0x200010e4
 8007354:	08019d78 	.word	0x08019d78
 8007358:	08019b78 	.word	0x08019b78
 800735c:	08019bb8 	.word	0x08019bb8
 8007360:	08019bec 	.word	0x08019bec

08007364 <bootloaderUpdateCommand>:
{
 8007364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007366:	b085      	sub	sp, #20
 8007368:	1e04      	subs	r4, r0, #0
 800736a:	9203      	str	r2, [sp, #12]
	configASSERT( pcWriteBuffer );
 800736c:	d101      	bne.n	8007372 <bootloaderUpdateCommand+0xe>
 800736e:	b672      	cpsid	i
 8007370:	e7fe      	b.n	8007370 <bootloaderUpdateCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8007372:	4a4b      	ldr	r2, [pc, #300]	; (80074a0 <bootloaderUpdateCommand+0x13c>)
 8007374:	2101      	movs	r1, #1
 8007376:	9803      	ldr	r0, [sp, #12]
 8007378:	f007 fbe2 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 800737c:	2800      	cmp	r0, #0
 800737e:	d040      	beq.n	8007402 <bootloaderUpdateCommand+0x9e>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 8007380:	4b47      	ldr	r3, [pc, #284]	; (80074a0 <bootloaderUpdateCommand+0x13c>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	4947      	ldr	r1, [pc, #284]	; (80074a4 <bootloaderUpdateCommand+0x140>)
 8007386:	f00d fa2b 	bl	80147e0 <strncmp>
 800738a:	2800      	cmp	r0, #0
 800738c:	d000      	beq.n	8007390 <bootloaderUpdateCommand+0x2c>
 800738e:	e080      	b.n	8007492 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8007390:	4a45      	ldr	r2, [pc, #276]	; (80074a8 <bootloaderUpdateCommand+0x144>)
 8007392:	2102      	movs	r1, #2
 8007394:	9803      	ldr	r0, [sp, #12]
 8007396:	f007 fbd3 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 800739a:	4f44      	ldr	r7, [pc, #272]	; (80074ac <bootloaderUpdateCommand+0x148>)
 800739c:	6038      	str	r0, [r7, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800739e:	4a44      	ldr	r2, [pc, #272]	; (80074b0 <bootloaderUpdateCommand+0x14c>)
 80073a0:	2103      	movs	r1, #3
 80073a2:	9803      	ldr	r0, [sp, #12]
 80073a4:	f007 fbcc 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 80073a8:	4b42      	ldr	r3, [pc, #264]	; (80074b4 <bootloaderUpdateCommand+0x150>)
 80073aa:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 80073ac:	6838      	ldr	r0, [r7, #0]
 80073ae:	2300      	movs	r3, #0
 80073b0:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 80073b2:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 80073b4:	2b23      	cmp	r3, #35	; 0x23
 80073b6:	d04e      	beq.n	8007456 <bootloaderUpdateCommand+0xf2>
			if (pcParameterString3[0] == 'p') {
 80073b8:	4b3e      	ldr	r3, [pc, #248]	; (80074b4 <bootloaderUpdateCommand+0x150>)
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	2300      	movs	r3, #0
 80073be:	56c3      	ldrsb	r3, [r0, r3]
 80073c0:	2b70      	cmp	r3, #112	; 0x70
 80073c2:	d04e      	beq.n	8007462 <bootloaderUpdateCommand+0xfe>
				result = BOS_ERR_WrongValue;		
 80073c4:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 80073c6:	4b3c      	ldr	r3, [pc, #240]	; (80074b8 <bootloaderUpdateCommand+0x154>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	42b3      	cmp	r3, r6
 80073cc:	d04e      	beq.n	800746c <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;							
 80073ce:	4b3b      	ldr	r3, [pc, #236]	; (80074bc <bootloaderUpdateCommand+0x158>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 80073d4:	4b3a      	ldr	r3, [pc, #232]	; (80074c0 <bootloaderUpdateCommand+0x15c>)
 80073d6:	701d      	strb	r5, [r3, #0]
 80073d8:	3201      	adds	r2, #1
 80073da:	211a      	movs	r1, #26
 80073dc:	0030      	movs	r0, r6
 80073de:	f001 ffeb 	bl	80093b8 <SendMessageToModule>
				osDelay(100);			
 80073e2:	2064      	movs	r0, #100	; 0x64
 80073e4:	f007 fa93 	bl	800e90e <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 80073e8:	4b36      	ldr	r3, [pc, #216]	; (80074c4 <bootloaderUpdateCommand+0x160>)
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	4b32      	ldr	r3, [pc, #200]	; (80074b8 <bootloaderUpdateCommand+0x154>)
 80073ee:	7818      	ldrb	r0, [r3, #0]
 80073f0:	002b      	movs	r3, r5
 80073f2:	0031      	movs	r1, r6
 80073f4:	f7fc fd96 	bl	8003f24 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 80073f8:	2f68      	cmp	r7, #104	; 0x68
 80073fa:	d04a      	beq.n	8007492 <bootloaderUpdateCommand+0x12e>
}
 80073fc:	2000      	movs	r0, #0
 80073fe:	b005      	add	sp, #20
 8007400:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8007402:	4b2d      	ldr	r3, [pc, #180]	; (80074b8 <bootloaderUpdateCommand+0x154>)
 8007404:	781a      	ldrb	r2, [r3, #0]
 8007406:	4930      	ldr	r1, [pc, #192]	; (80074c8 <bootloaderUpdateCommand+0x164>)
 8007408:	0020      	movs	r0, r4
 800740a:	f00d f9a5 	bl	8014758 <sprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 800740e:	4b2f      	ldr	r3, [pc, #188]	; (80074cc <bootloaderUpdateCommand+0x168>)
 8007410:	6819      	ldr	r1, [r3, #0]
 8007412:	0020      	movs	r0, r4
 8007414:	f00d f9c0 	bl	8014798 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8007418:	0020      	movs	r0, r4
 800741a:	f7f8 fe7d 	bl	8000118 <strlen>
 800741e:	b282      	uxth	r2, r0
 8007420:	4b28      	ldr	r3, [pc, #160]	; (80074c4 <bootloaderUpdateCommand+0x160>)
 8007422:	7818      	ldrb	r0, [r3, #0]
 8007424:	2301      	movs	r3, #1
 8007426:	425b      	negs	r3, r3
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	3333      	adds	r3, #51	; 0x33
 800742c:	0021      	movs	r1, r4
 800742e:	f006 fd69 	bl	800df04 <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8007432:	4b27      	ldr	r3, [pc, #156]	; (80074d0 <bootloaderUpdateCommand+0x16c>)
 8007434:	4a27      	ldr	r2, [pc, #156]	; (80074d4 <bootloaderUpdateCommand+0x170>)
 8007436:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 8007438:	4b27      	ldr	r3, [pc, #156]	; (80074d8 <bootloaderUpdateCommand+0x174>)
 800743a:	2201      	movs	r2, #1
 800743c:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 800743e:	200a      	movs	r0, #10
 8007440:	f007 fa65 	bl	800e90e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	4b24      	ldr	r3, [pc, #144]	; (80074dc <bootloaderUpdateCommand+0x178>)
 800744a:	4a25      	ldr	r2, [pc, #148]	; (80074e0 <bootloaderUpdateCommand+0x17c>)
 800744c:	60da      	str	r2, [r3, #12]
 800744e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	e7fd      	b.n	8007452 <bootloaderUpdateCommand+0xee>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8007456:	3001      	adds	r0, #1
 8007458:	f00c fcbf 	bl	8013dda <atol>
 800745c:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 800745e:	2700      	movs	r7, #0
 8007460:	e7aa      	b.n	80073b8 <bootloaderUpdateCommand+0x54>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8007462:	3001      	adds	r0, #1
 8007464:	f00c fcb9 	bl	8013dda <atol>
 8007468:	b2c5      	uxtb	r5, r0
 800746a:	e7ac      	b.n	80073c6 <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 800746c:	2100      	movs	r1, #0
 800746e:	9100      	str	r1, [sp, #0]
 8007470:	2319      	movs	r3, #25
 8007472:	000a      	movs	r2, r1
 8007474:	0028      	movs	r0, r5
 8007476:	f001 fd77 	bl	8008f68 <SendMessageFromPort>
				osDelay(100);
 800747a:	2064      	movs	r0, #100	; 0x64
 800747c:	f007 fa47 	bl	800e90e <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 8007480:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <bootloaderUpdateCommand+0x154>)
 8007482:	7818      	ldrb	r0, [r3, #0]
 8007484:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <bootloaderUpdateCommand+0x160>)
 8007486:	781a      	ldrb	r2, [r3, #0]
 8007488:	002b      	movs	r3, r5
 800748a:	0001      	movs	r1, r0
 800748c:	f7fc fd4a 	bl	8003f24 <remoteBootloaderUpdate>
 8007490:	e7b2      	b.n	80073f8 <bootloaderUpdateCommand+0x94>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 8007492:	220f      	movs	r2, #15
 8007494:	4913      	ldr	r1, [pc, #76]	; (80074e4 <bootloaderUpdateCommand+0x180>)
 8007496:	0020      	movs	r0, r4
 8007498:	f00c ff29 	bl	80142ee <memcpy>
 800749c:	e7ae      	b.n	80073fc <bootloaderUpdateCommand+0x98>
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	20001320 	.word	0x20001320
 80074a4:	08019838 	.word	0x08019838
 80074a8:	2000132c 	.word	0x2000132c
 80074ac:	20001304 	.word	0x20001304
 80074b0:	20001330 	.word	0x20001330
 80074b4:	2000130c 	.word	0x2000130c
 80074b8:	200010e4 	.word	0x200010e4
 80074bc:	20006a18 	.word	0x20006a18
 80074c0:	20000fb0 	.word	0x20000fb0
 80074c4:	20000b07 	.word	0x20000b07
 80074c8:	08019818 	.word	0x08019818
 80074cc:	20000074 	.word	0x20000074
 80074d0:	20007ff0 	.word	0x20007ff0
 80074d4:	deadbeef 	.word	0xdeadbeef
 80074d8:	20000f6a 	.word	0x20000f6a
 80074dc:	e000ed00 	.word	0xe000ed00
 80074e0:	05fa0004 	.word	0x05fa0004
 80074e4:	080198f8 	.word	0x080198f8

080074e8 <pingCommand>:
{
 80074e8:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d01e      	beq.n	800752c <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 80074ee:	4b15      	ldr	r3, [pc, #84]	; (8007544 <pingCommand+0x5c>)
 80074f0:	781a      	ldrb	r2, [r3, #0]
 80074f2:	0093      	lsls	r3, r2, #2
 80074f4:	189b      	adds	r3, r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4913      	ldr	r1, [pc, #76]	; (8007548 <pingCommand+0x60>)
 80074fa:	5c5b      	ldrb	r3, [r3, r1]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d117      	bne.n	8007530 <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 8007500:	4912      	ldr	r1, [pc, #72]	; (800754c <pingCommand+0x64>)
 8007502:	f00d f929 	bl	8014758 <sprintf>
	RTOS_IND_blink(200);	
 8007506:	2580      	movs	r5, #128	; 0x80
 8007508:	012d      	lsls	r5, r5, #4
 800750a:	2490      	movs	r4, #144	; 0x90
 800750c:	05e4      	lsls	r4, r4, #23
 800750e:	2201      	movs	r2, #1
 8007510:	0029      	movs	r1, r5
 8007512:	0020      	movs	r0, r4
 8007514:	f00a faf2 	bl	8011afc <HAL_GPIO_WritePin>
 8007518:	20c8      	movs	r0, #200	; 0xc8
 800751a:	f007 f9f8 	bl	800e90e <osDelay>
 800751e:	2200      	movs	r2, #0
 8007520:	0029      	movs	r1, r5
 8007522:	0020      	movs	r0, r4
 8007524:	f00a faea 	bl	8011afc <HAL_GPIO_WritePin>
}
 8007528:	2000      	movs	r0, #0
 800752a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 800752c:	b672      	cpsid	i
 800752e:	e7fe      	b.n	800752e <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8007530:	0093      	lsls	r3, r2, #2
 8007532:	189b      	adds	r3, r3, r2
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	4904      	ldr	r1, [pc, #16]	; (8007548 <pingCommand+0x60>)
 8007538:	185b      	adds	r3, r3, r1
 800753a:	4905      	ldr	r1, [pc, #20]	; (8007550 <pingCommand+0x68>)
 800753c:	f00d f90c 	bl	8014758 <sprintf>
 8007540:	e7e1      	b.n	8007506 <pingCommand+0x1e>
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	200010e4 	.word	0x200010e4
 8007548:	20000fe0 	.word	0x20000fe0
 800754c:	08019de8 	.word	0x08019de8
 8007550:	08019dfc 	.word	0x08019dfc

08007554 <prvRunTimeStatsCommand>:
{
 8007554:	b510      	push	{r4, lr}
 8007556:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8007558:	d101      	bne.n	800755e <prvRunTimeStatsCommand+0xa>
 800755a:	b672      	cpsid	i
 800755c:	e7fe      	b.n	800755c <prvRunTimeStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 800755e:	2251      	movs	r2, #81	; 0x51
 8007560:	4904      	ldr	r1, [pc, #16]	; (8007574 <prvRunTimeStatsCommand+0x20>)
 8007562:	f00c fec4 	bl	80142ee <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 8007566:	0020      	movs	r0, r4
 8007568:	3050      	adds	r0, #80	; 0x50
 800756a:	f008 fd3d 	bl	800ffe8 <vTaskGetRunTimeStats>
}
 800756e:	2000      	movs	r0, #0
 8007570:	bd10      	pop	{r4, pc}
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	08019e28 	.word	0x08019e28

08007578 <prvTaskStatsCommand>:
{
 8007578:	b510      	push	{r4, lr}
 800757a:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800757c:	d101      	bne.n	8007582 <prvTaskStatsCommand+0xa>
 800757e:	b672      	cpsid	i
 8007580:	e7fe      	b.n	8007580 <prvTaskStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 8007582:	225b      	movs	r2, #91	; 0x5b
 8007584:	4904      	ldr	r1, [pc, #16]	; (8007598 <prvTaskStatsCommand+0x20>)
 8007586:	f00c feb2 	bl	80142ee <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 800758a:	0020      	movs	r0, r4
 800758c:	305a      	adds	r0, #90	; 0x5a
 800758e:	f008 fccb 	bl	800ff28 <vTaskList>
}
 8007592:	2000      	movs	r0, #0
 8007594:	bd10      	pop	{r4, pc}
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	08019e8c 	.word	0x08019e8c

0800759c <resetCommand>:
	configASSERT( pcWriteBuffer );
 800759c:	2800      	cmp	r0, #0
 800759e:	d101      	bne.n	80075a4 <resetCommand+0x8>
 80075a0:	b672      	cpsid	i
 80075a2:	e7fe      	b.n	80075a2 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	4b03      	ldr	r3, [pc, #12]	; (80075b8 <resetCommand+0x1c>)
 80075aa:	4a04      	ldr	r2, [pc, #16]	; (80075bc <resetCommand+0x20>)
 80075ac:	60da      	str	r2, [r3, #12]
 80075ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	e7fd      	b.n	80075b2 <resetCommand+0x16>
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	e000ed00 	.word	0xe000ed00
 80075bc:	05fa0004 	.word	0x05fa0004

080075c0 <RegisterUserCLICommands>:
}
 80075c0:	4770      	bx	lr
	...

080075c4 <vRegisterCLICommands>:
{
 80075c4:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 80075c6:	482f      	ldr	r0, [pc, #188]	; (8007684 <vRegisterCLICommands+0xc0>)
 80075c8:	f007 fa1c 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 80075cc:	482e      	ldr	r0, [pc, #184]	; (8007688 <vRegisterCLICommands+0xc4>)
 80075ce:	f007 fa19 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 80075d2:	482e      	ldr	r0, [pc, #184]	; (800768c <vRegisterCLICommands+0xc8>)
 80075d4:	f007 fa16 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 80075d8:	482d      	ldr	r0, [pc, #180]	; (8007690 <vRegisterCLICommands+0xcc>)
 80075da:	f007 fa13 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 80075de:	482d      	ldr	r0, [pc, #180]	; (8007694 <vRegisterCLICommands+0xd0>)
 80075e0:	f007 fa10 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 80075e4:	482c      	ldr	r0, [pc, #176]	; (8007698 <vRegisterCLICommands+0xd4>)
 80075e6:	f007 fa0d 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 80075ea:	482c      	ldr	r0, [pc, #176]	; (800769c <vRegisterCLICommands+0xd8>)
 80075ec:	f007 fa0a 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 80075f0:	482b      	ldr	r0, [pc, #172]	; (80076a0 <vRegisterCLICommands+0xdc>)
 80075f2:	f007 fa07 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 80075f6:	482b      	ldr	r0, [pc, #172]	; (80076a4 <vRegisterCLICommands+0xe0>)
 80075f8:	f007 fa04 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 80075fc:	482a      	ldr	r0, [pc, #168]	; (80076a8 <vRegisterCLICommands+0xe4>)
 80075fe:	f007 fa01 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 8007602:	482a      	ldr	r0, [pc, #168]	; (80076ac <vRegisterCLICommands+0xe8>)
 8007604:	f007 f9fe 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 8007608:	4829      	ldr	r0, [pc, #164]	; (80076b0 <vRegisterCLICommands+0xec>)
 800760a:	f007 f9fb 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 800760e:	4829      	ldr	r0, [pc, #164]	; (80076b4 <vRegisterCLICommands+0xf0>)
 8007610:	f007 f9f8 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 8007614:	4828      	ldr	r0, [pc, #160]	; (80076b8 <vRegisterCLICommands+0xf4>)
 8007616:	f007 f9f5 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 800761a:	4828      	ldr	r0, [pc, #160]	; (80076bc <vRegisterCLICommands+0xf8>)
 800761c:	f007 f9f2 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 8007620:	4827      	ldr	r0, [pc, #156]	; (80076c0 <vRegisterCLICommands+0xfc>)
 8007622:	f007 f9ef 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 8007626:	4827      	ldr	r0, [pc, #156]	; (80076c4 <vRegisterCLICommands+0x100>)
 8007628:	f007 f9ec 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 800762c:	4826      	ldr	r0, [pc, #152]	; (80076c8 <vRegisterCLICommands+0x104>)
 800762e:	f007 f9e9 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 8007632:	4826      	ldr	r0, [pc, #152]	; (80076cc <vRegisterCLICommands+0x108>)
 8007634:	f007 f9e6 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8007638:	4825      	ldr	r0, [pc, #148]	; (80076d0 <vRegisterCLICommands+0x10c>)
 800763a:	f007 f9e3 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 800763e:	4825      	ldr	r0, [pc, #148]	; (80076d4 <vRegisterCLICommands+0x110>)
 8007640:	f007 f9e0 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 8007644:	4824      	ldr	r0, [pc, #144]	; (80076d8 <vRegisterCLICommands+0x114>)
 8007646:	f007 f9dd 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 800764a:	4824      	ldr	r0, [pc, #144]	; (80076dc <vRegisterCLICommands+0x118>)
 800764c:	f007 f9da 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 8007650:	4823      	ldr	r0, [pc, #140]	; (80076e0 <vRegisterCLICommands+0x11c>)
 8007652:	f007 f9d7 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 8007656:	4823      	ldr	r0, [pc, #140]	; (80076e4 <vRegisterCLICommands+0x120>)
 8007658:	f007 f9d4 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 800765c:	4822      	ldr	r0, [pc, #136]	; (80076e8 <vRegisterCLICommands+0x124>)
 800765e:	f007 f9d1 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 8007662:	4822      	ldr	r0, [pc, #136]	; (80076ec <vRegisterCLICommands+0x128>)
 8007664:	f007 f9ce 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 8007668:	4821      	ldr	r0, [pc, #132]	; (80076f0 <vRegisterCLICommands+0x12c>)
 800766a:	f007 f9cb 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 800766e:	4821      	ldr	r0, [pc, #132]	; (80076f4 <vRegisterCLICommands+0x130>)
 8007670:	f007 f9c8 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 8007674:	4b20      	ldr	r3, [pc, #128]	; (80076f8 <vRegisterCLICommands+0x134>)
 8007676:	221d      	movs	r2, #29
 8007678:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800767a:	f003 ffa1 	bl	800b5c0 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800767e:	f7ff ff9f 	bl	80075c0 <RegisterUserCLICommands>
}
 8007682:	bd10      	pop	{r4, pc}
 8007684:	08019ee8 	.word	0x08019ee8
 8007688:	08019e7c 	.word	0x08019e7c
 800768c:	08019e18 	.word	0x08019e18
 8007690:	0801983c 	.word	0x0801983c
 8007694:	080199c4 	.word	0x080199c4
 8007698:	08019f30 	.word	0x08019f30
 800769c:	08019d90 	.word	0x08019d90
 80076a0:	08019c50 	.word	0x08019c50
 80076a4:	0801a3c0 	.word	0x0801a3c0
 80076a8:	08019d54 	.word	0x08019d54
 80076ac:	08019fec 	.word	0x08019fec
 80076b0:	08019808 	.word	0x08019808
 80076b4:	08019f20 	.word	0x08019f20
 80076b8:	0801a230 	.word	0x0801a230
 80076bc:	08019af0 	.word	0x08019af0
 80076c0:	08019948 	.word	0x08019948
 80076c4:	0801b250 	.word	0x0801b250
 80076c8:	080198b0 	.word	0x080198b0
 80076cc:	0801a038 	.word	0x0801a038
 80076d0:	0801b2c4 	.word	0x0801b2c4
 80076d4:	08019cd0 	.word	0x08019cd0
 80076d8:	080199f4 	.word	0x080199f4
 80076dc:	0801a3b0 	.word	0x0801a3b0
 80076e0:	0801978c 	.word	0x0801978c
 80076e4:	08019dd8 	.word	0x08019dd8
 80076e8:	080199b4 	.word	0x080199b4
 80076ec:	08019888 	.word	0x08019888
 80076f0:	0801b29c 	.word	0x0801b29c
 80076f4:	0801b1e4 	.word	0x0801b1e4
 80076f8:	2000699c 	.word	0x2000699c

080076fc <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 80076fc:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 80076fe:	1e45      	subs	r5, r0, #1
 8007700:	00ec      	lsls	r4, r5, #3
 8007702:	1b60      	subs	r0, r4, r5
 8007704:	00c0      	lsls	r0, r0, #3
 8007706:	4e05      	ldr	r6, [pc, #20]	; (800771c <StopMsgDMA+0x20>)
 8007708:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800770a:	f009 fb44 	bl	8010d96 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800770e:	1b64      	subs	r4, r4, r5
 8007710:	00e4      	lsls	r4, r4, #3
 8007712:	59a3      	ldr	r3, [r4, r6]
 8007714:	2200      	movs	r2, #0
 8007716:	605a      	str	r2, [r3, #4]
}
 8007718:	bd70      	pop	{r4, r5, r6, pc}
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	200017f0 	.word	0x200017f0

08007720 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 8007720:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 8007722:	1e44      	subs	r4, r0, #1
 8007724:	00e5      	lsls	r5, r4, #3
 8007726:	1b28      	subs	r0, r5, r4
 8007728:	00c0      	lsls	r0, r0, #3
 800772a:	4e07      	ldr	r6, [pc, #28]	; (8007748 <StopStreamDMA+0x28>)
 800772c:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800772e:	f009 fb32 	bl	8010d96 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8007732:	1b2d      	subs	r5, r5, r4
 8007734:	00ed      	lsls	r5, r5, #3
 8007736:	59aa      	ldr	r2, [r5, r6]
 8007738:	2300      	movs	r3, #0
 800773a:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 800773c:	00a4      	lsls	r4, r4, #2
 800773e:	4a03      	ldr	r2, [pc, #12]	; (800774c <StopStreamDMA+0x2c>)
 8007740:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 8007742:	4a03      	ldr	r2, [pc, #12]	; (8007750 <StopStreamDMA+0x30>)
 8007744:	50a3      	str	r3, [r4, r2]

}
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	200019e8 	.word	0x200019e8
 800774c:	200014fc 	.word	0x200014fc
 8007750:	2000152c 	.word	0x2000152c

08007754 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 8007754:	b510      	push	{r4, lr}
 8007756:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007758:	f7ff ffd0 	bl	80076fc <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 800775c:	3c01      	subs	r4, #1
 800775e:	00e0      	lsls	r0, r4, #3
 8007760:	1b02      	subs	r2, r0, r4
 8007762:	00d2      	lsls	r2, r2, #3
 8007764:	4903      	ldr	r1, [pc, #12]	; (8007774 <SwitchMsgDMAToStream+0x20>)
 8007766:	5851      	ldr	r1, [r2, r1]
 8007768:	4b03      	ldr	r3, [pc, #12]	; (8007778 <SwitchMsgDMAToStream+0x24>)
 800776a:	18d0      	adds	r0, r2, r3
 800776c:	f004 fd02 	bl	800c174 <DMA_STREAM_CH_Init>
}
 8007770:	bd10      	pop	{r4, pc}
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	200017f0 	.word	0x200017f0
 8007778:	200019e8 	.word	0x200019e8

0800777c <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 800777c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777e:	b083      	sub	sp, #12
 8007780:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 8007782:	f7ff ffcd 	bl	8007720 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 8007786:	9401      	str	r4, [sp, #4]
 8007788:	3c01      	subs	r4, #1
 800778a:	00e7      	lsls	r7, r4, #3
 800778c:	1b3d      	subs	r5, r7, r4
 800778e:	00ed      	lsls	r5, r5, #3
 8007790:	4b0f      	ldr	r3, [pc, #60]	; (80077d0 <SwitchStreamDMAToMsg+0x54>)
 8007792:	18ed      	adds	r5, r5, r3
 8007794:	4e0f      	ldr	r6, [pc, #60]	; (80077d4 <SwitchStreamDMAToMsg+0x58>)
 8007796:	1b3b      	subs	r3, r7, r4
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	5999      	ldr	r1, [r3, r6]
 800779c:	0028      	movs	r0, r5
 800779e:	f004 fc6b 	bl	800c078 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 80077a2:	1b3b      	subs	r3, r7, r4
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	18f3      	adds	r3, r6, r3
 80077a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80077aa:	f003 ff1b 	bl	800b5e4 <GetPort>
 80077ae:	2300      	movs	r3, #0
 80077b0:	4a09      	ldr	r2, [pc, #36]	; (80077d8 <SwitchStreamDMAToMsg+0x5c>)
 80077b2:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 80077b4:	1b3f      	subs	r7, r7, r4
 80077b6:	00ff      	lsls	r7, r7, #3
 80077b8:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port-1] = 0;
 80077ba:	00a4      	lsls	r4, r4, #2
 80077bc:	4a07      	ldr	r2, [pc, #28]	; (80077dc <SwitchStreamDMAToMsg+0x60>)
 80077be:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 80077c0:	9801      	ldr	r0, [sp, #4]
 80077c2:	f006 fb7d 	bl	800dec0 <GetUart>
 80077c6:	0029      	movs	r1, r5
 80077c8:	f005 f8c8 	bl	800c95c <DMA_MSG_RX_Setup>
		
}
 80077cc:	b003      	add	sp, #12
 80077ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d0:	200017f0 	.word	0x200017f0
 80077d4:	200019e8 	.word	0x200019e8
 80077d8:	20001168 	.word	0x20001168
 80077dc:	20001514 	.word	0x20001514

080077e0 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	0005      	movs	r5, r0
 80077e4:	000e      	movs	r6, r1
 80077e6:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 80077e8:	f003 fefc 	bl	800b5e4 <GetPort>
 80077ec:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <StartDMAstream+0x44>)
 80077f0:	5c1b      	ldrb	r3, [r3, r0]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d902      	bls.n	80077fc <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80077f6:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d112      	bne.n	8007822 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 80077fc:	0020      	movs	r0, r4
 80077fe:	f7ff ffa9 	bl	8007754 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 8007802:	1e63      	subs	r3, r4, #1
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4a08      	ldr	r2, [pc, #32]	; (8007828 <StartDMAstream+0x48>)
 8007808:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 800780a:	4a06      	ldr	r2, [pc, #24]	; (8007824 <StartDMAstream+0x44>)
 800780c:	2102      	movs	r1, #2
 800780e:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 8007810:	4a06      	ldr	r2, [pc, #24]	; (800782c <StartDMAstream+0x4c>)
 8007812:	2100      	movs	r1, #0
 8007814:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 8007816:	003a      	movs	r2, r7
 8007818:	0031      	movs	r1, r6
 800781a:	0028      	movs	r0, r5
 800781c:	f005 f908 	bl	800ca30 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007820:	2000      	movs	r0, #0
}
 8007822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007824:	20001168 	.word	0x20001168
 8007828:	20001514 	.word	0x20001514
 800782c:	200014fc 	.word	0x200014fc

08007830 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 8007834:	4b12      	ldr	r3, [pc, #72]	; (8007880 <DMA_IRQHandler+0x50>)
 8007836:	5c1b      	ldrb	r3, [r3, r0]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d008      	beq.n	800784e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 800783c:	3c01      	subs	r4, #1
 800783e:	00e0      	lsls	r0, r4, #3
 8007840:	1b00      	subs	r0, r0, r4
 8007842:	00c0      	lsls	r0, r0, #3
 8007844:	4c0f      	ldr	r4, [pc, #60]	; (8007884 <DMA_IRQHandler+0x54>)
 8007846:	1900      	adds	r0, r0, r4
 8007848:	f009 face 	bl	8010de8 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 800784c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 800784e:	1e45      	subs	r5, r0, #1
 8007850:	00e8      	lsls	r0, r5, #3
 8007852:	1b40      	subs	r0, r0, r5
 8007854:	00c0      	lsls	r0, r0, #3
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <DMA_IRQHandler+0x58>)
 8007858:	18c0      	adds	r0, r0, r3
 800785a:	f009 fac5 	bl	8010de8 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 800785e:	00aa      	lsls	r2, r5, #2
 8007860:	4b0a      	ldr	r3, [pc, #40]	; (800788c <DMA_IRQHandler+0x5c>)
 8007862:	58d2      	ldr	r2, [r2, r3]
 8007864:	2a00      	cmp	r2, #0
 8007866:	d006      	beq.n	8007876 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 8007868:	4909      	ldr	r1, [pc, #36]	; (8007890 <DMA_IRQHandler+0x60>)
 800786a:	00ad      	lsls	r5, r5, #2
 800786c:	586b      	ldr	r3, [r5, r1]
 800786e:	3301      	adds	r3, #1
 8007870:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 8007872:	429a      	cmp	r2, r3
 8007874:	d8ea      	bhi.n	800784c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007876:	0020      	movs	r0, r4
 8007878:	f7ff ff52 	bl	8007720 <StopStreamDMA>
}
 800787c:	e7e6      	b.n	800784c <DMA_IRQHandler+0x1c>
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	20001168 	.word	0x20001168
 8007884:	200017f0 	.word	0x200017f0
 8007888:	200019e8 	.word	0x200019e8
 800788c:	2000152c 	.word	0x2000152c
 8007890:	200014fc 	.word	0x200014fc

08007894 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <ResetUartORE+0x28>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	2308      	movs	r3, #8
 800789a:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800789c:	4a08      	ldr	r2, [pc, #32]	; (80078c0 <ResetUartORE+0x2c>)
 800789e:	6812      	ldr	r2, [r2, #0]
 80078a0:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80078a2:	4a08      	ldr	r2, [pc, #32]	; (80078c4 <ResetUartORE+0x30>)
 80078a4:	6812      	ldr	r2, [r2, #0]
 80078a6:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 80078a8:	4a07      	ldr	r2, [pc, #28]	; (80078c8 <ResetUartORE+0x34>)
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80078ae:	4a07      	ldr	r2, [pc, #28]	; (80078cc <ResetUartORE+0x38>)
 80078b0:	6812      	ldr	r2, [r2, #0]
 80078b2:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80078b4:	4a06      	ldr	r2, [pc, #24]	; (80078d0 <ResetUartORE+0x3c>)
 80078b6:	6812      	ldr	r2, [r2, #0]
 80078b8:	6213      	str	r3, [r2, #32]
#endif
}
 80078ba:	4770      	bx	lr
 80078bc:	20006bcc 	.word	0x20006bcc
 80078c0:	20006d1c 	.word	0x20006d1c
 80078c4:	20006aec 	.word	0x20006aec
 80078c8:	20006cac 	.word	0x20006cac
 80078cc:	20006b5c 	.word	0x20006b5c
 80078d0:	20006c3c 	.word	0x20006c3c

080078d4 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	0006      	movs	r6, r0
 80078d8:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 80078da:	f009 fef5 	bl	80116c8 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80078de:	4b2b      	ldr	r3, [pc, #172]	; (800798c <EE_VerifyPageFullWriteVariable+0xb8>)
 80078e0:	881a      	ldrh	r2, [r3, #0]
 80078e2:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80078e4:	4b2a      	ldr	r3, [pc, #168]	; (8007990 <EE_VerifyPageFullWriteVariable+0xbc>)
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d104      	bne.n	80078f8 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 80078ee:	4929      	ldr	r1, [pc, #164]	; (8007994 <EE_VerifyPageFullWriteVariable+0xc0>)
 80078f0:	428a      	cmp	r2, r1
 80078f2:	d007      	beq.n	8007904 <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 80078f4:	3302      	adds	r3, #2
 80078f6:	e005      	b.n	8007904 <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	d143      	bne.n	8007984 <EE_VerifyPageFullWriteVariable+0xb0>
        if (PageStatusB == RECEIVE_DATA)
 80078fc:	4925      	ldr	r1, [pc, #148]	; (8007994 <EE_VerifyPageFullWriteVariable+0xc0>)
 80078fe:	428b      	cmp	r3, r1
 8007900:	d042      	beq.n	8007988 <EE_VerifyPageFullWriteVariable+0xb4>
          return PAGEA;         /* PageA valid */
 8007902:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8007904:	4a24      	ldr	r2, [pc, #144]	; (8007998 <EE_VerifyPageFullWriteVariable+0xc4>)
 8007906:	189c      	adds	r4, r3, r2
 8007908:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 800790a:	02db      	lsls	r3, r3, #11
 800790c:	4a23      	ldr	r2, [pc, #140]	; (800799c <EE_VerifyPageFullWriteVariable+0xc8>)
 800790e:	4694      	mov	ip, r2
 8007910:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8007912:	6822      	ldr	r2, [r4, #0]
 8007914:	3201      	adds	r2, #1
 8007916:	d005      	beq.n	8007924 <EE_VerifyPageFullWriteVariable+0x50>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8007918:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 800791a:	429c      	cmp	r4, r3
 800791c:	d22e      	bcs.n	800797c <EE_VerifyPageFullWriteVariable+0xa8>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800791e:	6822      	ldr	r2, [r4, #0]
 8007920:	3201      	adds	r2, #1
 8007922:	d1f9      	bne.n	8007918 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 8007924:	002a      	movs	r2, r5
 8007926:	2300      	movs	r3, #0
 8007928:	0021      	movs	r1, r4
 800792a:	2001      	movs	r0, #1
 800792c:	f009 ff16 	bl	801175c <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007930:	481b      	ldr	r0, [pc, #108]	; (80079a0 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007932:	f009 fee5 	bl	8011700 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8007936:	2800      	cmp	r0, #0
 8007938:	d003      	beq.n	8007942 <EE_VerifyPageFullWriteVariable+0x6e>
        return pFlash.ErrorCode;
 800793a:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <EE_VerifyPageFullWriteVariable+0xd0>)
 800793c:	69d8      	ldr	r0, [r3, #28]
 800793e:	b280      	uxth	r0, r0
 8007940:	e01f      	b.n	8007982 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007942:	4a19      	ldr	r2, [pc, #100]	; (80079a8 <EE_VerifyPageFullWriteVariable+0xd4>)
 8007944:	6913      	ldr	r3, [r2, #16]
 8007946:	2101      	movs	r1, #1
 8007948:	438b      	bics	r3, r1
 800794a:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 800794c:	1ca1      	adds	r1, r4, #2
 800794e:	0032      	movs	r2, r6
 8007950:	2300      	movs	r3, #0
 8007952:	2001      	movs	r0, #1
 8007954:	f009 ff02 	bl	801175c <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007958:	4811      	ldr	r0, [pc, #68]	; (80079a0 <EE_VerifyPageFullWriteVariable+0xcc>)
 800795a:	f009 fed1 	bl	8011700 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 800795e:	2800      	cmp	r0, #0
 8007960:	d003      	beq.n	800796a <EE_VerifyPageFullWriteVariable+0x96>
        return pFlash.ErrorCode;
 8007962:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007964:	69d8      	ldr	r0, [r3, #28]
 8007966:	b280      	uxth	r0, r0
 8007968:	e00b      	b.n	8007982 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800796a:	4a0f      	ldr	r2, [pc, #60]	; (80079a8 <EE_VerifyPageFullWriteVariable+0xd4>)
 800796c:	6913      	ldr	r3, [r2, #16]
 800796e:	2101      	movs	r1, #1
 8007970:	438b      	bics	r3, r1
 8007972:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 8007974:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007976:	69d8      	ldr	r0, [r3, #28]
 8007978:	b280      	uxth	r0, r0
 800797a:	e002      	b.n	8007982 <EE_VerifyPageFullWriteVariable+0xae>
    }
  }
	
	HAL_FLASH_Lock();
 800797c:	f009 feb6 	bl	80116ec <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8007980:	2080      	movs	r0, #128	; 0x80
}
 8007982:	bd70      	pop	{r4, r5, r6, pc}
    return  NO_VALID_PAGE;
 8007984:	20ab      	movs	r0, #171	; 0xab
 8007986:	e7fc      	b.n	8007982 <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEB;         /* PageB valid */
 8007988:	2302      	movs	r3, #2
 800798a:	e7bb      	b.n	8007904 <EE_VerifyPageFullWriteVariable+0x30>
 800798c:	0801e000 	.word	0x0801e000
 8007990:	0801f000 	.word	0x0801f000
 8007994:	0000eeee 	.word	0x0000eeee
 8007998:	0001003c 	.word	0x0001003c
 800799c:	0801effe 	.word	0x0801effe
 80079a0:	0000c350 	.word	0x0000c350
 80079a4:	20006ef8 	.word	0x20006ef8
 80079a8:	40022000 	.word	0x40022000

080079ac <EE_ReadVariable>:
{
 80079ac:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80079ae:	4b13      	ldr	r3, [pc, #76]	; (80079fc <EE_ReadVariable+0x50>)
 80079b0:	881c      	ldrh	r4, [r3, #0]
 80079b2:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80079b4:	4b12      	ldr	r3, [pc, #72]	; (8007a00 <EE_ReadVariable+0x54>)
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 80079ba:	2c00      	cmp	r4, #0
 80079bc:	d006      	beq.n	80079cc <EE_ReadVariable+0x20>
      else if (PageStatusB == VALID_PAGE)
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <EE_ReadVariable+0x1e>
    return  NO_VALID_PAGE;
 80079c2:	20ab      	movs	r0, #171	; 0xab
 80079c4:	e019      	b.n	80079fa <EE_ReadVariable+0x4e>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80079c6:	2001      	movs	r0, #1
 80079c8:	e017      	b.n	80079fa <EE_ReadVariable+0x4e>
        return PAGEB;           /* PageB valid */
 80079ca:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 80079cc:	02e3      	lsls	r3, r4, #11
 80079ce:	4a0d      	ldr	r2, [pc, #52]	; (8007a04 <EE_ReadVariable+0x58>)
 80079d0:	4694      	mov	ip, r2
 80079d2:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80079d4:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 80079d6:	4a0c      	ldr	r2, [pc, #48]	; (8007a08 <EE_ReadVariable+0x5c>)
 80079d8:	4694      	mov	ip, r2
 80079da:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 80079dc:	881a      	ldrh	r2, [r3, #0]
 80079de:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 80079e0:	4290      	cmp	r0, r2
 80079e2:	d006      	beq.n	80079f2 <EE_ReadVariable+0x46>
      Address = Address - 4;
 80079e4:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 80079e6:	42a3      	cmp	r3, r4
 80079e8:	d9ed      	bls.n	80079c6 <EE_ReadVariable+0x1a>
    AddressValue = (*(__IO uint16_t*)Address);
 80079ea:	881a      	ldrh	r2, [r3, #0]
 80079ec:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 80079ee:	4282      	cmp	r2, r0
 80079f0:	d1f8      	bne.n	80079e4 <EE_ReadVariable+0x38>
      *Data = (*(__IO uint16_t*)(Address - 2));
 80079f2:	3b02      	subs	r3, #2
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 80079f8:	2000      	movs	r0, #0
}
 80079fa:	bd10      	pop	{r4, pc}
 80079fc:	0801e000 	.word	0x0801e000
 8007a00:	0801f000 	.word	0x0801f000
 8007a04:	0801effe 	.word	0x0801effe
 8007a08:	0801e002 	.word	0x0801e002

08007a0c <EE_WriteVariable>:
{
 8007a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a0e:	46de      	mov	lr, fp
 8007a10:	4647      	mov	r7, r8
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b083      	sub	sp, #12
 8007a16:	0005      	movs	r5, r0
 8007a18:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007a1a:	f009 fe55 	bl	80116c8 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007a1e:	0031      	movs	r1, r6
 8007a20:	0028      	movs	r0, r5
 8007a22:	f7ff ff57 	bl	80078d4 <EE_VerifyPageFullWriteVariable>
 8007a26:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 8007a28:	2880      	cmp	r0, #128	; 0x80
 8007a2a:	d007      	beq.n	8007a3c <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007a2c:	f009 fe5e 	bl	80116ec <HAL_FLASH_Lock>
}
 8007a30:	0020      	movs	r0, r4
 8007a32:	b003      	add	sp, #12
 8007a34:	bc0c      	pop	{r2, r3}
 8007a36:	4690      	mov	r8, r2
 8007a38:	469b      	mov	fp, r3
 8007a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 8007a3c:	f009 fe44 	bl	80116c8 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007a40:	4b3e      	ldr	r3, [pc, #248]	; (8007b3c <EE_WriteVariable+0x130>)
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007a46:	4a3e      	ldr	r2, [pc, #248]	; (8007b40 <EE_WriteVariable+0x134>)
 8007a48:	8812      	ldrh	r2, [r2, #0]
 8007a4a:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <EE_WriteVariable+0x54>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8007a50:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	d1ea      	bne.n	8007a2c <EE_WriteVariable+0x20>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007a56:	4b3a      	ldr	r3, [pc, #232]	; (8007b40 <EE_WriteVariable+0x134>)
 8007a58:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007a5a:	4b38      	ldr	r3, [pc, #224]	; (8007b3c <EE_WriteVariable+0x130>)
 8007a5c:	9301      	str	r3, [sp, #4]
 8007a5e:	e003      	b.n	8007a68 <EE_WriteVariable+0x5c>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007a60:	4b36      	ldr	r3, [pc, #216]	; (8007b3c <EE_WriteVariable+0x130>)
 8007a62:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007a64:	4b36      	ldr	r3, [pc, #216]	; (8007b40 <EE_WriteVariable+0x134>)
 8007a66:	9301      	str	r3, [sp, #4]
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8007a68:	4a36      	ldr	r2, [pc, #216]	; (8007b44 <EE_WriteVariable+0x138>)
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9901      	ldr	r1, [sp, #4]
 8007a6e:	2001      	movs	r0, #1
 8007a70:	f009 fe74 	bl	801175c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a74:	4834      	ldr	r0, [pc, #208]	; (8007b48 <EE_WriteVariable+0x13c>)
 8007a76:	f009 fe43 	bl	8011700 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d003      	beq.n	8007a86 <EE_WriteVariable+0x7a>
  {
    return pFlash.ErrorCode;
 8007a7e:	4b33      	ldr	r3, [pc, #204]	; (8007b4c <EE_WriteVariable+0x140>)
 8007a80:	69dc      	ldr	r4, [r3, #28]
 8007a82:	b2a4      	uxth	r4, r4
 8007a84:	e7d2      	b.n	8007a2c <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007a86:	4a32      	ldr	r2, [pc, #200]	; (8007b50 <EE_WriteVariable+0x144>)
 8007a88:	6913      	ldr	r3, [r2, #16]
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	438b      	bics	r3, r1
 8007a8e:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007a90:	0031      	movs	r1, r6
 8007a92:	0028      	movs	r0, r5
 8007a94:	f7ff ff1e 	bl	80078d4 <EE_VerifyPageFullWriteVariable>
 8007a98:	1e04      	subs	r4, r0, #0
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8007a9a:	d1c7      	bne.n	8007a2c <EE_WriteVariable+0x20>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007a9c:	2701      	movs	r7, #1
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007a9e:	4b2d      	ldr	r3, [pc, #180]	; (8007b54 <EE_WriteVariable+0x148>)
 8007aa0:	4698      	mov	r8, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007aa2:	4e2d      	ldr	r6, [pc, #180]	; (8007b58 <EE_WriteVariable+0x14c>)
 8007aa4:	e003      	b.n	8007aae <EE_WriteVariable+0xa2>
 8007aa6:	3701      	adds	r7, #1
 8007aa8:	b2bf      	uxth	r7, r7
 8007aaa:	42b7      	cmp	r7, r6
 8007aac:	d00f      	beq.n	8007ace <EE_WriteVariable+0xc2>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 8007aae:	42bd      	cmp	r5, r7
 8007ab0:	d0f9      	beq.n	8007aa6 <EE_WriteVariable+0x9a>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007ab2:	4928      	ldr	r1, [pc, #160]	; (8007b54 <EE_WriteVariable+0x148>)
 8007ab4:	0038      	movs	r0, r7
 8007ab6:	f7ff ff79 	bl	80079ac <EE_ReadVariable>
      if (ReadStatus != 0x1)
 8007aba:	2801      	cmp	r0, #1
 8007abc:	d0f3      	beq.n	8007aa6 <EE_WriteVariable+0x9a>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007abe:	4643      	mov	r3, r8
 8007ac0:	8819      	ldrh	r1, [r3, #0]
 8007ac2:	0038      	movs	r0, r7
 8007ac4:	f7ff ff06 	bl	80078d4 <EE_VerifyPageFullWriteVariable>
 8007ac8:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8007aca:	d0ec      	beq.n	8007aa6 <EE_WriteVariable+0x9a>
 8007acc:	e7ae      	b.n	8007a2c <EE_WriteVariable+0x20>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 8007ace:	4658      	mov	r0, fp
 8007ad0:	f009 febc 	bl	801184c <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ad4:	481c      	ldr	r0, [pc, #112]	; (8007b48 <EE_WriteVariable+0x13c>)
 8007ad6:	f009 fe13 	bl	8011700 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d003      	beq.n	8007ae6 <EE_WriteVariable+0xda>
  {
    return pFlash.ErrorCode;
 8007ade:	4b1b      	ldr	r3, [pc, #108]	; (8007b4c <EE_WriteVariable+0x140>)
 8007ae0:	69dc      	ldr	r4, [r3, #28]
 8007ae2:	b2a4      	uxth	r4, r4
 8007ae4:	e7a2      	b.n	8007a2c <EE_WriteVariable+0x20>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007ae6:	2080      	movs	r0, #128	; 0x80
 8007ae8:	0100      	lsls	r0, r0, #4
 8007aea:	4458      	add	r0, fp
 8007aec:	f009 feae 	bl	801184c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007af0:	4815      	ldr	r0, [pc, #84]	; (8007b48 <EE_WriteVariable+0x13c>)
 8007af2:	f009 fe05 	bl	8011700 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d003      	beq.n	8007b02 <EE_WriteVariable+0xf6>
		{
			return pFlash.ErrorCode;
 8007afa:	4b14      	ldr	r3, [pc, #80]	; (8007b4c <EE_WriteVariable+0x140>)
 8007afc:	69dc      	ldr	r4, [r3, #28]
 8007afe:	b2a4      	uxth	r4, r4
 8007b00:	e794      	b.n	8007a2c <EE_WriteVariable+0x20>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007b02:	4a13      	ldr	r2, [pc, #76]	; (8007b50 <EE_WriteVariable+0x144>)
 8007b04:	6913      	ldr	r3, [r2, #16]
 8007b06:	2102      	movs	r1, #2
 8007b08:	438b      	bics	r3, r1
 8007b0a:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2300      	movs	r3, #0
 8007b10:	9901      	ldr	r1, [sp, #4]
 8007b12:	2001      	movs	r0, #1
 8007b14:	f009 fe22 	bl	801175c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b18:	480b      	ldr	r0, [pc, #44]	; (8007b48 <EE_WriteVariable+0x13c>)
 8007b1a:	f009 fdf1 	bl	8011700 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d003      	beq.n	8007b2a <EE_WriteVariable+0x11e>
  {
    return pFlash.ErrorCode;
 8007b22:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <EE_WriteVariable+0x140>)
 8007b24:	69dc      	ldr	r4, [r3, #28]
 8007b26:	b2a4      	uxth	r4, r4
 8007b28:	e780      	b.n	8007a2c <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007b2a:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <EE_WriteVariable+0x144>)
 8007b2c:	6913      	ldr	r3, [r2, #16]
 8007b2e:	2101      	movs	r1, #1
 8007b30:	438b      	bics	r3, r1
 8007b32:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 8007b34:	f009 fdda 	bl	80116ec <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 8007b38:	2400      	movs	r4, #0
 8007b3a:	e777      	b.n	8007a2c <EE_WriteVariable+0x20>
 8007b3c:	0801e000 	.word	0x0801e000
 8007b40:	0801f000 	.word	0x0801f000
 8007b44:	0000eeee 	.word	0x0000eeee
 8007b48:	0000c350 	.word	0x0000c350
 8007b4c:	20006ef8 	.word	0x20006ef8
 8007b50:	40022000 	.word	0x40022000
 8007b54:	20001544 	.word	0x20001544
 8007b58:	00000401 	.word	0x00000401

08007b5c <EE_Format>:
{
 8007b5c:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007b5e:	f009 fdb3 	bl	80116c8 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 8007b62:	4829      	ldr	r0, [pc, #164]	; (8007c08 <EE_Format+0xac>)
 8007b64:	f009 fe72 	bl	801184c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b68:	4828      	ldr	r0, [pc, #160]	; (8007c0c <EE_Format+0xb0>)
 8007b6a:	f009 fdc9 	bl	8011700 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d003      	beq.n	8007b7a <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007b72:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <EE_Format+0xb4>)
 8007b74:	69d8      	ldr	r0, [r3, #28]
 8007b76:	b280      	uxth	r0, r0
}
 8007b78:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b7a:	4826      	ldr	r0, [pc, #152]	; (8007c14 <EE_Format+0xb8>)
 8007b7c:	f009 fe66 	bl	801184c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b80:	4822      	ldr	r0, [pc, #136]	; (8007c0c <EE_Format+0xb0>)
 8007b82:	f009 fdbd 	bl	8011700 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d003      	beq.n	8007b92 <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007b8a:	4b21      	ldr	r3, [pc, #132]	; (8007c10 <EE_Format+0xb4>)
 8007b8c:	69d8      	ldr	r0, [r3, #28]
 8007b8e:	b280      	uxth	r0, r0
 8007b90:	e7f2      	b.n	8007b78 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007b92:	4a21      	ldr	r2, [pc, #132]	; (8007c18 <EE_Format+0xbc>)
 8007b94:	6913      	ldr	r3, [r2, #16]
 8007b96:	2102      	movs	r1, #2
 8007b98:	438b      	bics	r3, r1
 8007b9a:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	4919      	ldr	r1, [pc, #100]	; (8007c08 <EE_Format+0xac>)
 8007ba2:	2001      	movs	r0, #1
 8007ba4:	f009 fdda 	bl	801175c <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ba8:	4818      	ldr	r0, [pc, #96]	; (8007c0c <EE_Format+0xb0>)
 8007baa:	f009 fda9 	bl	8011700 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d003      	beq.n	8007bba <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007bb2:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <EE_Format+0xb4>)
 8007bb4:	69d8      	ldr	r0, [r3, #28]
 8007bb6:	b280      	uxth	r0, r0
 8007bb8:	e7de      	b.n	8007b78 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007bba:	4a17      	ldr	r2, [pc, #92]	; (8007c18 <EE_Format+0xbc>)
 8007bbc:	6913      	ldr	r3, [r2, #16]
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	438b      	bics	r3, r1
 8007bc2:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bc4:	4815      	ldr	r0, [pc, #84]	; (8007c1c <EE_Format+0xc0>)
 8007bc6:	f009 fe41 	bl	801184c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bca:	4810      	ldr	r0, [pc, #64]	; (8007c0c <EE_Format+0xb0>)
 8007bcc:	f009 fd98 	bl	8011700 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d003      	beq.n	8007bdc <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007bd4:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <EE_Format+0xb4>)
 8007bd6:	69d8      	ldr	r0, [r3, #28]
 8007bd8:	b280      	uxth	r0, r0
 8007bda:	e7cd      	b.n	8007b78 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007bdc:	4810      	ldr	r0, [pc, #64]	; (8007c20 <EE_Format+0xc4>)
 8007bde:	f009 fe35 	bl	801184c <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007be2:	480a      	ldr	r0, [pc, #40]	; (8007c0c <EE_Format+0xb0>)
 8007be4:	f009 fd8c 	bl	8011700 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d003      	beq.n	8007bf4 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007bec:	4b08      	ldr	r3, [pc, #32]	; (8007c10 <EE_Format+0xb4>)
 8007bee:	69d8      	ldr	r0, [r3, #28]
 8007bf0:	b280      	uxth	r0, r0
 8007bf2:	e7c1      	b.n	8007b78 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007bf4:	4a08      	ldr	r2, [pc, #32]	; (8007c18 <EE_Format+0xbc>)
 8007bf6:	6913      	ldr	r3, [r2, #16]
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	438b      	bics	r3, r1
 8007bfc:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007bfe:	f009 fd75 	bl	80116ec <HAL_FLASH_Lock>
  return FlashStatus;
 8007c02:	2000      	movs	r0, #0
 8007c04:	e7b8      	b.n	8007b78 <EE_Format+0x1c>
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	0801e000 	.word	0x0801e000
 8007c0c:	0000c350 	.word	0x0000c350
 8007c10:	20006ef8 	.word	0x20006ef8
 8007c14:	0801e800 	.word	0x0801e800
 8007c18:	40022000 	.word	0x40022000
 8007c1c:	0801f000 	.word	0x0801f000
 8007c20:	0801f800 	.word	0x0801f800

08007c24 <EE_Init>:
{
 8007c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c26:	46c6      	mov	lr, r8
 8007c28:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 8007c2a:	f009 fd4d 	bl	80116c8 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007c2e:	4bbe      	ldr	r3, [pc, #760]	; (8007f28 <EE_Init+0x304>)
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007c34:	4abd      	ldr	r2, [pc, #756]	; (8007f2c <EE_Init+0x308>)
 8007c36:	8812      	ldrh	r2, [r2, #0]
 8007c38:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8007c3a:	49bd      	ldr	r1, [pc, #756]	; (8007f30 <EE_Init+0x30c>)
 8007c3c:	428b      	cmp	r3, r1
 8007c3e:	d100      	bne.n	8007c42 <EE_Init+0x1e>
 8007c40:	e074      	b.n	8007d2c <EE_Init+0x108>
 8007c42:	49bc      	ldr	r1, [pc, #752]	; (8007f34 <EE_Init+0x310>)
 8007c44:	428b      	cmp	r3, r1
 8007c46:	d011      	beq.n	8007c6c <EE_Init+0x48>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d100      	bne.n	8007c4e <EE_Init+0x2a>
 8007c4c:	e109      	b.n	8007e62 <EE_Init+0x23e>
      FlashStatus = EE_Format();
 8007c4e:	f7ff ff85 	bl	8007b5c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c52:	48b9      	ldr	r0, [pc, #740]	; (8007f38 <EE_Init+0x314>)
 8007c54:	f009 fd54 	bl	8011700 <FLASH_WaitForLastOperation>
 8007c58:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 8007c5a:	2e00      	cmp	r6, #0
 8007c5c:	d102      	bne.n	8007c64 <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007c5e:	f009 fd45 	bl	80116ec <HAL_FLASH_Lock>
  return HAL_OK;
 8007c62:	2600      	movs	r6, #0
}
 8007c64:	0030      	movs	r0, r6
 8007c66:	bc04      	pop	{r2}
 8007c68:	4690      	mov	r8, r2
 8007c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007c6c:	2a00      	cmp	r2, #0
 8007c6e:	d00d      	beq.n	8007c8c <EE_Init+0x68>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007c70:	4baf      	ldr	r3, [pc, #700]	; (8007f30 <EE_Init+0x30c>)
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d028      	beq.n	8007cc8 <EE_Init+0xa4>
        FlashStatus = EE_Format();
 8007c76:	f7ff ff71 	bl	8007b5c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c7a:	48af      	ldr	r0, [pc, #700]	; (8007f38 <EE_Init+0x314>)
 8007c7c:	f009 fd40 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d0ec      	beq.n	8007c5e <EE_Init+0x3a>
          return pFlash.ErrorCode;
 8007c84:	4bad      	ldr	r3, [pc, #692]	; (8007f3c <EE_Init+0x318>)
 8007c86:	69de      	ldr	r6, [r3, #28]
 8007c88:	b2b6      	uxth	r6, r6
 8007c8a:	e7eb      	b.n	8007c64 <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8007c8c:	48a6      	ldr	r0, [pc, #664]	; (8007f28 <EE_Init+0x304>)
 8007c8e:	f009 fddd 	bl	801184c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c92:	48a9      	ldr	r0, [pc, #676]	; (8007f38 <EE_Init+0x314>)
 8007c94:	f009 fd34 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d003      	beq.n	8007ca4 <EE_Init+0x80>
          return pFlash.ErrorCode;
 8007c9c:	4ba7      	ldr	r3, [pc, #668]	; (8007f3c <EE_Init+0x318>)
 8007c9e:	69de      	ldr	r6, [r3, #28]
 8007ca0:	b2b6      	uxth	r6, r6
 8007ca2:	e7df      	b.n	8007c64 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007ca4:	48a6      	ldr	r0, [pc, #664]	; (8007f40 <EE_Init+0x31c>)
 8007ca6:	f009 fdd1 	bl	801184c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007caa:	48a3      	ldr	r0, [pc, #652]	; (8007f38 <EE_Init+0x314>)
 8007cac:	f009 fd28 	bl	8011700 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d105      	bne.n	8007cc0 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007cb4:	4aa3      	ldr	r2, [pc, #652]	; (8007f44 <EE_Init+0x320>)
 8007cb6:	6913      	ldr	r3, [r2, #16]
 8007cb8:	2102      	movs	r1, #2
 8007cba:	438b      	bics	r3, r1
 8007cbc:	6113      	str	r3, [r2, #16]
 8007cbe:	e7ce      	b.n	8007c5e <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007cc0:	4b9e      	ldr	r3, [pc, #632]	; (8007f3c <EE_Init+0x318>)
 8007cc2:	69de      	ldr	r6, [r3, #28]
 8007cc4:	b2b6      	uxth	r6, r6
 8007cc6:	e7cd      	b.n	8007c64 <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007cc8:	4897      	ldr	r0, [pc, #604]	; (8007f28 <EE_Init+0x304>)
 8007cca:	f009 fdbf 	bl	801184c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007cce:	489a      	ldr	r0, [pc, #616]	; (8007f38 <EE_Init+0x314>)
 8007cd0:	f009 fd16 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d003      	beq.n	8007ce0 <EE_Init+0xbc>
          return pFlash.ErrorCode;
 8007cd8:	4b98      	ldr	r3, [pc, #608]	; (8007f3c <EE_Init+0x318>)
 8007cda:	69de      	ldr	r6, [r3, #28]
 8007cdc:	b2b6      	uxth	r6, r6
 8007cde:	e7c1      	b.n	8007c64 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007ce0:	4897      	ldr	r0, [pc, #604]	; (8007f40 <EE_Init+0x31c>)
 8007ce2:	f009 fdb3 	bl	801184c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ce6:	4894      	ldr	r0, [pc, #592]	; (8007f38 <EE_Init+0x314>)
 8007ce8:	f009 fd0a 	bl	8011700 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d003      	beq.n	8007cf8 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007cf0:	4b92      	ldr	r3, [pc, #584]	; (8007f3c <EE_Init+0x318>)
 8007cf2:	69de      	ldr	r6, [r3, #28]
 8007cf4:	b2b6      	uxth	r6, r6
 8007cf6:	e7b5      	b.n	8007c64 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007cf8:	4a92      	ldr	r2, [pc, #584]	; (8007f44 <EE_Init+0x320>)
 8007cfa:	6913      	ldr	r3, [r2, #16]
 8007cfc:	2102      	movs	r1, #2
 8007cfe:	438b      	bics	r3, r1
 8007d00:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007d02:	2200      	movs	r2, #0
 8007d04:	2300      	movs	r3, #0
 8007d06:	4989      	ldr	r1, [pc, #548]	; (8007f2c <EE_Init+0x308>)
 8007d08:	2001      	movs	r0, #1
 8007d0a:	f009 fd27 	bl	801175c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d0e:	488a      	ldr	r0, [pc, #552]	; (8007f38 <EE_Init+0x314>)
 8007d10:	f009 fcf6 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d105      	bne.n	8007d24 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007d18:	4a8a      	ldr	r2, [pc, #552]	; (8007f44 <EE_Init+0x320>)
 8007d1a:	6913      	ldr	r3, [r2, #16]
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	438b      	bics	r3, r1
 8007d20:	6113      	str	r3, [r2, #16]
 8007d22:	e79c      	b.n	8007c5e <EE_Init+0x3a>
          return pFlash.ErrorCode;
 8007d24:	4b85      	ldr	r3, [pc, #532]	; (8007f3c <EE_Init+0x318>)
 8007d26:	69de      	ldr	r6, [r3, #28]
 8007d28:	b2b6      	uxth	r6, r6
 8007d2a:	e79b      	b.n	8007c64 <EE_Init+0x40>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007d2c:	2a00      	cmp	r2, #0
 8007d2e:	d157      	bne.n	8007de0 <EE_Init+0x1bc>
 8007d30:	2401      	movs	r4, #1
  int16_t x = -1;
 8007d32:	2701      	movs	r7, #1
 8007d34:	427f      	negs	r7, r7
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007d36:	4d84      	ldr	r5, [pc, #528]	; (8007f48 <EE_Init+0x324>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007d38:	4b84      	ldr	r3, [pc, #528]	; (8007f4c <EE_Init+0x328>)
 8007d3a:	4698      	mov	r8, r3
 8007d3c:	e005      	b.n	8007d4a <EE_Init+0x126>
            x = VarIdx;
 8007d3e:	b227      	sxth	r7, r4
 8007d40:	e008      	b.n	8007d54 <EE_Init+0x130>
 8007d42:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007d44:	4b82      	ldr	r3, [pc, #520]	; (8007f50 <EE_Init+0x32c>)
 8007d46:	429c      	cmp	r4, r3
 8007d48:	d018      	beq.n	8007d7c <EE_Init+0x158>
 8007d4a:	b2a6      	uxth	r6, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007d4c:	882b      	ldrh	r3, [r5, #0]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	42b3      	cmp	r3, r6
 8007d52:	d0f4      	beq.n	8007d3e <EE_Init+0x11a>
          if (VarIdx != x)
 8007d54:	42bc      	cmp	r4, r7
 8007d56:	d0f4      	beq.n	8007d42 <EE_Init+0x11e>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007d58:	497c      	ldr	r1, [pc, #496]	; (8007f4c <EE_Init+0x328>)
 8007d5a:	0030      	movs	r0, r6
 8007d5c:	f7ff fe26 	bl	80079ac <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007d60:	2801      	cmp	r0, #1
 8007d62:	d0ee      	beq.n	8007d42 <EE_Init+0x11e>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007d64:	4643      	mov	r3, r8
 8007d66:	8819      	ldrh	r1, [r3, #0]
 8007d68:	0030      	movs	r0, r6
 8007d6a:	f7ff fdb3 	bl	80078d4 <EE_VerifyPageFullWriteVariable>
 8007d6e:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d70:	4871      	ldr	r0, [pc, #452]	; (8007f38 <EE_Init+0x314>)
 8007d72:	f009 fcc5 	bl	8011700 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d0e3      	beq.n	8007d42 <EE_Init+0x11e>
 8007d7a:	e773      	b.n	8007c64 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4969      	ldr	r1, [pc, #420]	; (8007f28 <EE_Init+0x304>)
 8007d82:	2001      	movs	r0, #1
 8007d84:	f009 fcea 	bl	801175c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d88:	486b      	ldr	r0, [pc, #428]	; (8007f38 <EE_Init+0x314>)
 8007d8a:	f009 fcb9 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d003      	beq.n	8007d9a <EE_Init+0x176>
          return pFlash.ErrorCode;
 8007d92:	4b6a      	ldr	r3, [pc, #424]	; (8007f3c <EE_Init+0x318>)
 8007d94:	69de      	ldr	r6, [r3, #28]
 8007d96:	b2b6      	uxth	r6, r6
 8007d98:	e764      	b.n	8007c64 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007d9a:	4a6a      	ldr	r2, [pc, #424]	; (8007f44 <EE_Init+0x320>)
 8007d9c:	6913      	ldr	r3, [r2, #16]
 8007d9e:	2101      	movs	r1, #1
 8007da0:	438b      	bics	r3, r1
 8007da2:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007da4:	4861      	ldr	r0, [pc, #388]	; (8007f2c <EE_Init+0x308>)
 8007da6:	f009 fd51 	bl	801184c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007daa:	4863      	ldr	r0, [pc, #396]	; (8007f38 <EE_Init+0x314>)
 8007dac:	f009 fca8 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d003      	beq.n	8007dbc <EE_Init+0x198>
          return pFlash.ErrorCode;
 8007db4:	4b61      	ldr	r3, [pc, #388]	; (8007f3c <EE_Init+0x318>)
 8007db6:	69de      	ldr	r6, [r3, #28]
 8007db8:	b2b6      	uxth	r6, r6
 8007dba:	e753      	b.n	8007c64 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007dbc:	4865      	ldr	r0, [pc, #404]	; (8007f54 <EE_Init+0x330>)
 8007dbe:	f009 fd45 	bl	801184c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007dc2:	485d      	ldr	r0, [pc, #372]	; (8007f38 <EE_Init+0x314>)
 8007dc4:	f009 fc9c 	bl	8011700 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d105      	bne.n	8007dd8 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007dcc:	4a5d      	ldr	r2, [pc, #372]	; (8007f44 <EE_Init+0x320>)
 8007dce:	6913      	ldr	r3, [r2, #16]
 8007dd0:	2102      	movs	r1, #2
 8007dd2:	438b      	bics	r3, r1
 8007dd4:	6113      	str	r3, [r2, #16]
 8007dd6:	e742      	b.n	8007c5e <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007dd8:	4b58      	ldr	r3, [pc, #352]	; (8007f3c <EE_Init+0x318>)
 8007dda:	69de      	ldr	r6, [r3, #28]
 8007ddc:	b2b6      	uxth	r6, r6
 8007dde:	e741      	b.n	8007c64 <EE_Init+0x40>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007de0:	4b54      	ldr	r3, [pc, #336]	; (8007f34 <EE_Init+0x310>)
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d00b      	beq.n	8007dfe <EE_Init+0x1da>
        FlashStatus = EE_Format();
 8007de6:	f7ff feb9 	bl	8007b5c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007dea:	4853      	ldr	r0, [pc, #332]	; (8007f38 <EE_Init+0x314>)
 8007dec:	f009 fc88 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d100      	bne.n	8007df6 <EE_Init+0x1d2>
 8007df4:	e733      	b.n	8007c5e <EE_Init+0x3a>
          return pFlash.ErrorCode;
 8007df6:	4b51      	ldr	r3, [pc, #324]	; (8007f3c <EE_Init+0x318>)
 8007df8:	69de      	ldr	r6, [r3, #28]
 8007dfa:	b2b6      	uxth	r6, r6
 8007dfc:	e732      	b.n	8007c64 <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007dfe:	484b      	ldr	r0, [pc, #300]	; (8007f2c <EE_Init+0x308>)
 8007e00:	f009 fd24 	bl	801184c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e04:	484c      	ldr	r0, [pc, #304]	; (8007f38 <EE_Init+0x314>)
 8007e06:	f009 fc7b 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d003      	beq.n	8007e16 <EE_Init+0x1f2>
          return pFlash.ErrorCode;
 8007e0e:	4b4b      	ldr	r3, [pc, #300]	; (8007f3c <EE_Init+0x318>)
 8007e10:	69de      	ldr	r6, [r3, #28]
 8007e12:	b2b6      	uxth	r6, r6
 8007e14:	e726      	b.n	8007c64 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e16:	484f      	ldr	r0, [pc, #316]	; (8007f54 <EE_Init+0x330>)
 8007e18:	f009 fd18 	bl	801184c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e1c:	4846      	ldr	r0, [pc, #280]	; (8007f38 <EE_Init+0x314>)
 8007e1e:	f009 fc6f 	bl	8011700 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d003      	beq.n	8007e2e <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007e26:	4b45      	ldr	r3, [pc, #276]	; (8007f3c <EE_Init+0x318>)
 8007e28:	69de      	ldr	r6, [r3, #28]
 8007e2a:	b2b6      	uxth	r6, r6
 8007e2c:	e71a      	b.n	8007c64 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007e2e:	4a45      	ldr	r2, [pc, #276]	; (8007f44 <EE_Init+0x320>)
 8007e30:	6913      	ldr	r3, [r2, #16]
 8007e32:	2102      	movs	r1, #2
 8007e34:	438b      	bics	r3, r1
 8007e36:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	493a      	ldr	r1, [pc, #232]	; (8007f28 <EE_Init+0x304>)
 8007e3e:	2001      	movs	r0, #1
 8007e40:	f009 fc8c 	bl	801175c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e44:	483c      	ldr	r0, [pc, #240]	; (8007f38 <EE_Init+0x314>)
 8007e46:	f009 fc5b 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d003      	beq.n	8007e56 <EE_Init+0x232>
          return pFlash.ErrorCode;
 8007e4e:	4b3b      	ldr	r3, [pc, #236]	; (8007f3c <EE_Init+0x318>)
 8007e50:	69de      	ldr	r6, [r3, #28]
 8007e52:	b2b6      	uxth	r6, r6
 8007e54:	e706      	b.n	8007c64 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007e56:	4a3b      	ldr	r2, [pc, #236]	; (8007f44 <EE_Init+0x320>)
 8007e58:	6913      	ldr	r3, [r2, #16]
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	438b      	bics	r3, r1
 8007e5e:	6113      	str	r3, [r2, #16]
 8007e60:	e6fd      	b.n	8007c5e <EE_Init+0x3a>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007e62:	2a00      	cmp	r2, #0
 8007e64:	d009      	beq.n	8007e7a <EE_Init+0x256>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007e66:	4b33      	ldr	r3, [pc, #204]	; (8007f34 <EE_Init+0x310>)
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d010      	beq.n	8007e8e <EE_Init+0x26a>
 8007e6c:	2401      	movs	r4, #1
  int16_t x = -1;
 8007e6e:	2701      	movs	r7, #1
 8007e70:	427f      	negs	r7, r7
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007e72:	4d39      	ldr	r5, [pc, #228]	; (8007f58 <EE_Init+0x334>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007e74:	4b35      	ldr	r3, [pc, #212]	; (8007f4c <EE_Init+0x328>)
 8007e76:	4698      	mov	r8, r3
 8007e78:	e02d      	b.n	8007ed6 <EE_Init+0x2b2>
        FlashStatus = EE_Format();
 8007e7a:	f7ff fe6f 	bl	8007b5c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e7e:	482e      	ldr	r0, [pc, #184]	; (8007f38 <EE_Init+0x314>)
 8007e80:	f009 fc3e 	bl	8011700 <FLASH_WaitForLastOperation>
 8007e84:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 8007e86:	2e00      	cmp	r6, #0
 8007e88:	d100      	bne.n	8007e8c <EE_Init+0x268>
 8007e8a:	e6e8      	b.n	8007c5e <EE_Init+0x3a>
 8007e8c:	e6ea      	b.n	8007c64 <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e8e:	4827      	ldr	r0, [pc, #156]	; (8007f2c <EE_Init+0x308>)
 8007e90:	f009 fcdc 	bl	801184c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e94:	4828      	ldr	r0, [pc, #160]	; (8007f38 <EE_Init+0x314>)
 8007e96:	f009 fc33 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d003      	beq.n	8007ea6 <EE_Init+0x282>
          return pFlash.ErrorCode;
 8007e9e:	4b27      	ldr	r3, [pc, #156]	; (8007f3c <EE_Init+0x318>)
 8007ea0:	69de      	ldr	r6, [r3, #28]
 8007ea2:	b2b6      	uxth	r6, r6
 8007ea4:	e6de      	b.n	8007c64 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007ea6:	482b      	ldr	r0, [pc, #172]	; (8007f54 <EE_Init+0x330>)
 8007ea8:	f009 fcd0 	bl	801184c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007eac:	4822      	ldr	r0, [pc, #136]	; (8007f38 <EE_Init+0x314>)
 8007eae:	f009 fc27 	bl	8011700 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d105      	bne.n	8007ec2 <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007eb6:	4a23      	ldr	r2, [pc, #140]	; (8007f44 <EE_Init+0x320>)
 8007eb8:	6913      	ldr	r3, [r2, #16]
 8007eba:	2102      	movs	r1, #2
 8007ebc:	438b      	bics	r3, r1
 8007ebe:	6113      	str	r3, [r2, #16]
 8007ec0:	e6cd      	b.n	8007c5e <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007ec2:	4b1e      	ldr	r3, [pc, #120]	; (8007f3c <EE_Init+0x318>)
 8007ec4:	69de      	ldr	r6, [r3, #28]
 8007ec6:	b2b6      	uxth	r6, r6
 8007ec8:	e6cc      	b.n	8007c64 <EE_Init+0x40>
            x = VarIdx;
 8007eca:	b227      	sxth	r7, r4
 8007ecc:	e008      	b.n	8007ee0 <EE_Init+0x2bc>
 8007ece:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007ed0:	4b1f      	ldr	r3, [pc, #124]	; (8007f50 <EE_Init+0x32c>)
 8007ed2:	429c      	cmp	r4, r3
 8007ed4:	d018      	beq.n	8007f08 <EE_Init+0x2e4>
 8007ed6:	b2a6      	uxth	r6, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007ed8:	882b      	ldrh	r3, [r5, #0]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	42b3      	cmp	r3, r6
 8007ede:	d0f4      	beq.n	8007eca <EE_Init+0x2a6>
          if (VarIdx != x)
 8007ee0:	42bc      	cmp	r4, r7
 8007ee2:	d0f4      	beq.n	8007ece <EE_Init+0x2aa>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007ee4:	4919      	ldr	r1, [pc, #100]	; (8007f4c <EE_Init+0x328>)
 8007ee6:	0030      	movs	r0, r6
 8007ee8:	f7ff fd60 	bl	80079ac <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007eec:	2801      	cmp	r0, #1
 8007eee:	d0ee      	beq.n	8007ece <EE_Init+0x2aa>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007ef0:	4643      	mov	r3, r8
 8007ef2:	8819      	ldrh	r1, [r3, #0]
 8007ef4:	0030      	movs	r0, r6
 8007ef6:	f7ff fced 	bl	80078d4 <EE_VerifyPageFullWriteVariable>
 8007efa:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007efc:	480e      	ldr	r0, [pc, #56]	; (8007f38 <EE_Init+0x314>)
 8007efe:	f009 fbff 	bl	8011700 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0e3      	beq.n	8007ece <EE_Init+0x2aa>
 8007f06:	e6ad      	b.n	8007c64 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	4907      	ldr	r1, [pc, #28]	; (8007f2c <EE_Init+0x308>)
 8007f0e:	2001      	movs	r0, #1
 8007f10:	f009 fc24 	bl	801175c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f14:	4808      	ldr	r0, [pc, #32]	; (8007f38 <EE_Init+0x314>)
 8007f16:	f009 fbf3 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d01e      	beq.n	8007f5c <EE_Init+0x338>
          return pFlash.ErrorCode;
 8007f1e:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <EE_Init+0x318>)
 8007f20:	69de      	ldr	r6, [r3, #28]
 8007f22:	b2b6      	uxth	r6, r6
 8007f24:	e69e      	b.n	8007c64 <EE_Init+0x40>
 8007f26:	46c0      	nop			; (mov r8, r8)
 8007f28:	0801e000 	.word	0x0801e000
 8007f2c:	0801f000 	.word	0x0801f000
 8007f30:	0000eeee 	.word	0x0000eeee
 8007f34:	0000ffff 	.word	0x0000ffff
 8007f38:	0000c350 	.word	0x0000c350
 8007f3c:	20006ef8 	.word	0x20006ef8
 8007f40:	0801e800 	.word	0x0801e800
 8007f44:	40022000 	.word	0x40022000
 8007f48:	0801e006 	.word	0x0801e006
 8007f4c:	20001544 	.word	0x20001544
 8007f50:	00000401 	.word	0x00000401
 8007f54:	0801f800 	.word	0x0801f800
 8007f58:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007f5c:	4a11      	ldr	r2, [pc, #68]	; (8007fa4 <EE_Init+0x380>)
 8007f5e:	6913      	ldr	r3, [r2, #16]
 8007f60:	2101      	movs	r1, #1
 8007f62:	438b      	bics	r3, r1
 8007f64:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007f66:	4810      	ldr	r0, [pc, #64]	; (8007fa8 <EE_Init+0x384>)
 8007f68:	f009 fc70 	bl	801184c <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f6c:	480f      	ldr	r0, [pc, #60]	; (8007fac <EE_Init+0x388>)
 8007f6e:	f009 fbc7 	bl	8011700 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d003      	beq.n	8007f7e <EE_Init+0x35a>
          return pFlash.ErrorCode;
 8007f76:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <EE_Init+0x38c>)
 8007f78:	69de      	ldr	r6, [r3, #28]
 8007f7a:	b2b6      	uxth	r6, r6
 8007f7c:	e672      	b.n	8007c64 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007f7e:	480d      	ldr	r0, [pc, #52]	; (8007fb4 <EE_Init+0x390>)
 8007f80:	f009 fc64 	bl	801184c <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f84:	4809      	ldr	r0, [pc, #36]	; (8007fac <EE_Init+0x388>)
 8007f86:	f009 fbbb 	bl	8011700 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d105      	bne.n	8007f9a <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007f8e:	4a05      	ldr	r2, [pc, #20]	; (8007fa4 <EE_Init+0x380>)
 8007f90:	6913      	ldr	r3, [r2, #16]
 8007f92:	2102      	movs	r1, #2
 8007f94:	438b      	bics	r3, r1
 8007f96:	6113      	str	r3, [r2, #16]
 8007f98:	e661      	b.n	8007c5e <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <EE_Init+0x38c>)
 8007f9c:	69de      	ldr	r6, [r3, #28]
 8007f9e:	b2b6      	uxth	r6, r6
 8007fa0:	e660      	b.n	8007c64 <EE_Init+0x40>
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	40022000 	.word	0x40022000
 8007fa8:	0801e000 	.word	0x0801e000
 8007fac:	0000c350 	.word	0x0000c350
 8007fb0:	20006ef8 	.word	0x20006ef8
 8007fb4:	0801e800 	.word	0x0801e800

08007fb8 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 8007fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fba:	46c6      	mov	lr, r8
 8007fbc:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 8007fbe:	4c2b      	ldr	r4, [pc, #172]	; (800806c <StartDefaultTask+0xb4>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 8007fc0:	46a0      	mov	r8, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 8007fc2:	0027      	movs	r7, r4
 8007fc4:	e020      	b.n	8008008 <StartDefaultTask+0x50>
				RTOS_IND_blink(200);
 8007fc6:	2680      	movs	r6, #128	; 0x80
 8007fc8:	0136      	lsls	r6, r6, #4
 8007fca:	2590      	movs	r5, #144	; 0x90
 8007fcc:	05ed      	lsls	r5, r5, #23
 8007fce:	2201      	movs	r2, #1
 8007fd0:	0031      	movs	r1, r6
 8007fd2:	0028      	movs	r0, r5
 8007fd4:	f009 fd92 	bl	8011afc <HAL_GPIO_WritePin>
 8007fd8:	20c8      	movs	r0, #200	; 0xc8
 8007fda:	f006 fc98 	bl	800e90e <osDelay>
 8007fde:	2200      	movs	r2, #0
 8007fe0:	0031      	movs	r1, r6
 8007fe2:	0028      	movs	r0, r5
 8007fe4:	f009 fd8a 	bl	8011afc <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007fe8:	4b20      	ldr	r3, [pc, #128]	; (800806c <StartDefaultTask+0xb4>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007fee:	f000 f9f7 	bl	80083e0 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007ff2:	f7fd fc3d 	bl	8005870 <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 8007ff6:	4b1e      	ldr	r3, [pc, #120]	; (8008070 <StartDefaultTask+0xb8>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d102      	bne.n	8008004 <StartDefaultTask+0x4c>
 8007ffe:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <StartDefaultTask+0xbc>)
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8008004:	f008 fb30 	bl	8010668 <vPortYield>
		switch (indMode)
 8008008:	7823      	ldrb	r3, [r4, #0]
 800800a:	2b02      	cmp	r3, #2
 800800c:	d004      	beq.n	8008018 <StartDefaultTask+0x60>
 800800e:	2b03      	cmp	r3, #3
 8008010:	d017      	beq.n	8008042 <StartDefaultTask+0x8a>
 8008012:	2b01      	cmp	r3, #1
 8008014:	d1eb      	bne.n	8007fee <StartDefaultTask+0x36>
 8008016:	e7d6      	b.n	8007fc6 <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 8008018:	2680      	movs	r6, #128	; 0x80
 800801a:	0136      	lsls	r6, r6, #4
 800801c:	2590      	movs	r5, #144	; 0x90
 800801e:	05ed      	lsls	r5, r5, #23
 8008020:	2201      	movs	r2, #1
 8008022:	0031      	movs	r1, r6
 8008024:	0028      	movs	r0, r5
 8008026:	f009 fd69 	bl	8011afc <HAL_GPIO_WritePin>
 800802a:	2064      	movs	r0, #100	; 0x64
 800802c:	f006 fc6f 	bl	800e90e <osDelay>
 8008030:	2200      	movs	r2, #0
 8008032:	0031      	movs	r1, r6
 8008034:	0028      	movs	r0, r5
 8008036:	f009 fd61 	bl	8011afc <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800803a:	2300      	movs	r3, #0
 800803c:	4642      	mov	r2, r8
 800803e:	7013      	strb	r3, [r2, #0]
				break;
 8008040:	e7d5      	b.n	8007fee <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 8008042:	2680      	movs	r6, #128	; 0x80
 8008044:	0136      	lsls	r6, r6, #4
 8008046:	2590      	movs	r5, #144	; 0x90
 8008048:	05ed      	lsls	r5, r5, #23
 800804a:	2201      	movs	r2, #1
 800804c:	0031      	movs	r1, r6
 800804e:	0028      	movs	r0, r5
 8008050:	f009 fd54 	bl	8011afc <HAL_GPIO_WritePin>
 8008054:	201e      	movs	r0, #30
 8008056:	f006 fc5a 	bl	800e90e <osDelay>
 800805a:	2200      	movs	r2, #0
 800805c:	0031      	movs	r1, r6
 800805e:	0028      	movs	r0, r5
 8008060:	f009 fd4c 	bl	8011afc <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8008064:	2300      	movs	r3, #0
 8008066:	703b      	strb	r3, [r7, #0]
				break;
 8008068:	e7c1      	b.n	8007fee <StartDefaultTask+0x36>
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	20000f6a 	.word	0x20000f6a
 8008070:	200015bc 	.word	0x200015bc
 8008074:	200015bb 	.word	0x200015bb

08008078 <MX_FREERTOS_Init>:
{
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	b090      	sub	sp, #64	; 0x40
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 800807c:	25a0      	movs	r5, #160	; 0xa0
 800807e:	006d      	lsls	r5, r5, #1
 8008080:	2400      	movs	r4, #0
 8008082:	9403      	str	r4, [sp, #12]
 8008084:	9402      	str	r4, [sp, #8]
 8008086:	4b5e      	ldr	r3, [pc, #376]	; (8008200 <MX_FREERTOS_Init+0x188>)
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	2603      	movs	r6, #3
 800808c:	9600      	str	r6, [sp, #0]
 800808e:	2300      	movs	r3, #0
 8008090:	002a      	movs	r2, r5
 8008092:	495c      	ldr	r1, [pc, #368]	; (8008204 <MX_FREERTOS_Init+0x18c>)
 8008094:	485c      	ldr	r0, [pc, #368]	; (8008208 <MX_FREERTOS_Init+0x190>)
 8008096:	f007 fa35 	bl	800f504 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 800809a:	9403      	str	r4, [sp, #12]
 800809c:	9402      	str	r4, [sp, #8]
 800809e:	4b5b      	ldr	r3, [pc, #364]	; (800820c <MX_FREERTOS_Init+0x194>)
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	9600      	str	r6, [sp, #0]
 80080a4:	2300      	movs	r3, #0
 80080a6:	002a      	movs	r2, r5
 80080a8:	4959      	ldr	r1, [pc, #356]	; (8008210 <MX_FREERTOS_Init+0x198>)
 80080aa:	485a      	ldr	r0, [pc, #360]	; (8008214 <MX_FREERTOS_Init+0x19c>)
 80080ac:	f007 fa2a 	bl	800f504 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 80080b0:	9403      	str	r4, [sp, #12]
 80080b2:	9402      	str	r4, [sp, #8]
 80080b4:	4b58      	ldr	r3, [pc, #352]	; (8008218 <MX_FREERTOS_Init+0x1a0>)
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	9600      	str	r6, [sp, #0]
 80080ba:	2300      	movs	r3, #0
 80080bc:	002a      	movs	r2, r5
 80080be:	4957      	ldr	r1, [pc, #348]	; (800821c <MX_FREERTOS_Init+0x1a4>)
 80080c0:	4857      	ldr	r0, [pc, #348]	; (8008220 <MX_FREERTOS_Init+0x1a8>)
 80080c2:	f007 fa1f 	bl	800f504 <xTaskGenericCreate>
	vRegisterCLICommands();
 80080c6:	f7ff fa7d 	bl	80075c4 <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 80080ca:	9403      	str	r4, [sp, #12]
 80080cc:	9402      	str	r4, [sp, #8]
 80080ce:	4b55      	ldr	r3, [pc, #340]	; (8008224 <MX_FREERTOS_Init+0x1ac>)
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	9600      	str	r6, [sp, #0]
 80080d4:	2300      	movs	r3, #0
 80080d6:	002a      	movs	r2, r5
 80080d8:	4953      	ldr	r1, [pc, #332]	; (8008228 <MX_FREERTOS_Init+0x1b0>)
 80080da:	4854      	ldr	r0, [pc, #336]	; (800822c <MX_FREERTOS_Init+0x1b4>)
 80080dc:	f007 fa12 	bl	800f504 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 80080e0:	4d53      	ldr	r5, [pc, #332]	; (8008230 <MX_FREERTOS_Init+0x1b8>)
 80080e2:	9403      	str	r4, [sp, #12]
 80080e4:	9402      	str	r4, [sp, #8]
 80080e6:	4b53      	ldr	r3, [pc, #332]	; (8008234 <MX_FREERTOS_Init+0x1bc>)
 80080e8:	9301      	str	r3, [sp, #4]
 80080ea:	3601      	adds	r6, #1
 80080ec:	9600      	str	r6, [sp, #0]
 80080ee:	2301      	movs	r3, #1
 80080f0:	22a0      	movs	r2, #160	; 0xa0
 80080f2:	4951      	ldr	r1, [pc, #324]	; (8008238 <MX_FREERTOS_Init+0x1c0>)
 80080f4:	0028      	movs	r0, r5
 80080f6:	f007 fa05 	bl	800f504 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 80080fa:	9403      	str	r4, [sp, #12]
 80080fc:	9402      	str	r4, [sp, #8]
 80080fe:	4b4f      	ldr	r3, [pc, #316]	; (800823c <MX_FREERTOS_Init+0x1c4>)
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	9600      	str	r6, [sp, #0]
 8008104:	2302      	movs	r3, #2
 8008106:	22a0      	movs	r2, #160	; 0xa0
 8008108:	494d      	ldr	r1, [pc, #308]	; (8008240 <MX_FREERTOS_Init+0x1c8>)
 800810a:	0028      	movs	r0, r5
 800810c:	f007 f9fa 	bl	800f504 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8008110:	9403      	str	r4, [sp, #12]
 8008112:	9402      	str	r4, [sp, #8]
 8008114:	4b4b      	ldr	r3, [pc, #300]	; (8008244 <MX_FREERTOS_Init+0x1cc>)
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	9600      	str	r6, [sp, #0]
 800811a:	2303      	movs	r3, #3
 800811c:	22a0      	movs	r2, #160	; 0xa0
 800811e:	494a      	ldr	r1, [pc, #296]	; (8008248 <MX_FREERTOS_Init+0x1d0>)
 8008120:	0028      	movs	r0, r5
 8008122:	f007 f9ef 	bl	800f504 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 8008126:	9403      	str	r4, [sp, #12]
 8008128:	9402      	str	r4, [sp, #8]
 800812a:	4b48      	ldr	r3, [pc, #288]	; (800824c <MX_FREERTOS_Init+0x1d4>)
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	9600      	str	r6, [sp, #0]
 8008130:	2304      	movs	r3, #4
 8008132:	22a0      	movs	r2, #160	; 0xa0
 8008134:	4946      	ldr	r1, [pc, #280]	; (8008250 <MX_FREERTOS_Init+0x1d8>)
 8008136:	0028      	movs	r0, r5
 8008138:	f007 f9e4 	bl	800f504 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 800813c:	9403      	str	r4, [sp, #12]
 800813e:	9402      	str	r4, [sp, #8]
 8008140:	4b44      	ldr	r3, [pc, #272]	; (8008254 <MX_FREERTOS_Init+0x1dc>)
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	9600      	str	r6, [sp, #0]
 8008146:	2305      	movs	r3, #5
 8008148:	22a0      	movs	r2, #160	; 0xa0
 800814a:	4943      	ldr	r1, [pc, #268]	; (8008258 <MX_FREERTOS_Init+0x1e0>)
 800814c:	0028      	movs	r0, r5
 800814e:	f007 f9d9 	bl	800f504 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P6MsgTask", configMINIMAL_STACK_SIZE, (void *) P6, osPriorityAboveNormal-osPriorityIdle, &P6MsgTaskHandle);
 8008152:	9403      	str	r4, [sp, #12]
 8008154:	9402      	str	r4, [sp, #8]
 8008156:	4b41      	ldr	r3, [pc, #260]	; (800825c <MX_FREERTOS_Init+0x1e4>)
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	9600      	str	r6, [sp, #0]
 800815c:	2306      	movs	r3, #6
 800815e:	22a0      	movs	r2, #160	; 0xa0
 8008160:	493f      	ldr	r1, [pc, #252]	; (8008260 <MX_FREERTOS_Init+0x1e8>)
 8008162:	0028      	movs	r0, r5
 8008164:	f007 f9ce 	bl	800f504 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 8008168:	940f      	str	r4, [sp, #60]	; 0x3c
 800816a:	2101      	movs	r1, #1
 800816c:	a80f      	add	r0, sp, #60	; 0x3c
 800816e:	f006 fbd6 	bl	800e91e <osSemaphoreCreate>
 8008172:	4e3c      	ldr	r6, [pc, #240]	; (8008264 <MX_FREERTOS_Init+0x1ec>)
 8008174:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 8008176:	940e      	str	r4, [sp, #56]	; 0x38
 8008178:	2101      	movs	r1, #1
 800817a:	a80e      	add	r0, sp, #56	; 0x38
 800817c:	f006 fbcf 	bl	800e91e <osSemaphoreCreate>
 8008180:	4d39      	ldr	r5, [pc, #228]	; (8008268 <MX_FREERTOS_Init+0x1f0>)
 8008182:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 8008184:	940d      	str	r4, [sp, #52]	; 0x34
 8008186:	2101      	movs	r1, #1
 8008188:	a80d      	add	r0, sp, #52	; 0x34
 800818a:	f006 fbc8 	bl	800e91e <osSemaphoreCreate>
 800818e:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 8008190:	940c      	str	r4, [sp, #48]	; 0x30
 8008192:	2101      	movs	r1, #1
 8008194:	a80c      	add	r0, sp, #48	; 0x30
 8008196:	f006 fbc2 	bl	800e91e <osSemaphoreCreate>
 800819a:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 800819c:	940b      	str	r4, [sp, #44]	; 0x2c
 800819e:	2101      	movs	r1, #1
 80081a0:	a80b      	add	r0, sp, #44	; 0x2c
 80081a2:	f006 fbbc 	bl	800e91e <osSemaphoreCreate>
 80081a6:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 80081a8:	940a      	str	r4, [sp, #40]	; 0x28
 80081aa:	2101      	movs	r1, #1
 80081ac:	a80a      	add	r0, sp, #40	; 0x28
 80081ae:	f006 fbb6 	bl	800e91e <osSemaphoreCreate>
 80081b2:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 80081b4:	9409      	str	r4, [sp, #36]	; 0x24
 80081b6:	2101      	movs	r1, #1
 80081b8:	a809      	add	r0, sp, #36	; 0x24
 80081ba:	f006 fbb0 	bl	800e91e <osSemaphoreCreate>
 80081be:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 80081c0:	9408      	str	r4, [sp, #32]
 80081c2:	2101      	movs	r1, #1
 80081c4:	a808      	add	r0, sp, #32
 80081c6:	f006 fbaa 	bl	800e91e <osSemaphoreCreate>
 80081ca:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 80081cc:	9407      	str	r4, [sp, #28]
 80081ce:	2101      	movs	r1, #1
 80081d0:	a807      	add	r0, sp, #28
 80081d2:	f006 fba4 	bl	800e91e <osSemaphoreCreate>
 80081d6:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 80081d8:	9406      	str	r4, [sp, #24]
 80081da:	2101      	movs	r1, #1
 80081dc:	a806      	add	r0, sp, #24
 80081de:	f006 fb9e 	bl	800e91e <osSemaphoreCreate>
 80081e2:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11); PxRxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP11), 1);
 80081e4:	9405      	str	r4, [sp, #20]
 80081e6:	2101      	movs	r1, #1
 80081e8:	a805      	add	r0, sp, #20
 80081ea:	f006 fb98 	bl	800e91e <osSemaphoreCreate>
 80081ee:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12); PxTxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP12), 1);
 80081f0:	9404      	str	r4, [sp, #16]
 80081f2:	2101      	movs	r1, #1
 80081f4:	a804      	add	r0, sp, #16
 80081f6:	f006 fb92 	bl	800e91e <osSemaphoreCreate>
 80081fa:	61a8      	str	r0, [r5, #24]
}
 80081fc:	b010      	add	sp, #64	; 0x40
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	20001568 	.word	0x20001568
 8008204:	0801b2d4 	.word	0x0801b2d4
 8008208:	08007fb9 	.word	0x08007fb9
 800820c:	20001548 	.word	0x20001548
 8008210:	0801b2e0 	.word	0x0801b2e0
 8008214:	080095a1 	.word	0x080095a1
 8008218:	20001564 	.word	0x20001564
 800821c:	0801b2ec 	.word	0x0801b2ec
 8008220:	08013dc3 	.word	0x08013dc3
 8008224:	20001570 	.word	0x20001570
 8008228:	0801b2f8 	.word	0x0801b2f8
 800822c:	080054ed 	.word	0x080054ed
 8008230:	08009941 	.word	0x08009941
 8008234:	2000154c 	.word	0x2000154c
 8008238:	0801b300 	.word	0x0801b300
 800823c:	20001550 	.word	0x20001550
 8008240:	0801b30c 	.word	0x0801b30c
 8008244:	20001554 	.word	0x20001554
 8008248:	0801b318 	.word	0x0801b318
 800824c:	20001558 	.word	0x20001558
 8008250:	0801b324 	.word	0x0801b324
 8008254:	2000155c 	.word	0x2000155c
 8008258:	0801b330 	.word	0x0801b330
 800825c:	20001560 	.word	0x20001560
 8008260:	0801b33c 	.word	0x0801b33c
 8008264:	20006ab4 	.word	0x20006ab4
 8008268:	20006a98 	.word	0x20006a98

0800826c <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 800826c:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800826e:	4b04      	ldr	r3, [pc, #16]	; (8008280 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	4904      	ldr	r1, [pc, #16]	; (8008284 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008274:	f7f7 ff6c 	bl	8000150 <__udivsi3>
 8008278:	4b03      	ldr	r3, [pc, #12]	; (8008288 <vMainConfigureTimerForRunTimeStats+0x1c>)
 800827a:	6018      	str	r0, [r3, #0]
}
 800827c:	bd10      	pop	{r4, pc}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	20000120 	.word	0x20000120
 8008284:	00002710 	.word	0x00002710
 8008288:	2000156c 	.word	0x2000156c

0800828c <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 800828c:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800828e:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <ulMainGetRunTimeCounterValue+0x40>)
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	21fa      	movs	r1, #250	; 0xfa
 8008294:	0089      	lsls	r1, r1, #2
 8008296:	f7f7 ff5b 	bl	8000150 <__udivsi3>
 800829a:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800829c:	4b0c      	ldr	r3, [pc, #48]	; (80082d0 <ulMainGetRunTimeCounterValue+0x44>)
 800829e:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 80082a0:	f007 fac2 	bl	800f828 <xTaskGetTickCountFromISR>

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <ulMainGetRunTimeCounterValue+0x48>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	015b      	lsls	r3, r3, #5
 80082aa:	d50d      	bpl.n	80082c8 <ulMainGetRunTimeCounterValue+0x3c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 80082ac:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80082ae:	4b08      	ldr	r3, [pc, #32]	; (80082d0 <ulMainGetRunTimeCounterValue+0x44>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	1aed      	subs	r5, r5, r3
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 80082b4:	0084      	lsls	r4, r0, #2
 80082b6:	1824      	adds	r4, r4, r0
 80082b8:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 80082ba:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <ulMainGetRunTimeCounterValue+0x4c>)
 80082bc:	6819      	ldr	r1, [r3, #0]
 80082be:	0028      	movs	r0, r5
 80082c0:	f7f7 ff46 	bl	8000150 <__udivsi3>
 80082c4:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80082c8:	1b2d      	subs	r5, r5, r4
 80082ca:	e7f3      	b.n	80082b4 <ulMainGetRunTimeCounterValue+0x28>
 80082cc:	20000120 	.word	0x20000120
 80082d0:	e000e018 	.word	0xe000e018
 80082d4:	e000ed04 	.word	0xe000ed04
 80082d8:	2000156c 	.word	0x2000156c

080082dc <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 80082dc:	4770      	bx	lr

080082de <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 80082de:	4770      	bx	lr

080082e0 <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 80082e0:	4770      	bx	lr

080082e2 <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 80082e2:	4770      	bx	lr

080082e4 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 80082e4:	4770      	bx	lr

080082e6 <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 80082e6:	4770      	bx	lr

080082e8 <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 80082e8:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80082ea:	00c2      	lsls	r2, r0, #3
 80082ec:	1812      	adds	r2, r2, r0
 80082ee:	4b1b      	ldr	r3, [pc, #108]	; (800835c <CheckForTimedButtonPress+0x74>)
 80082f0:	189b      	adds	r3, r3, r2
 80082f2:	789c      	ldrb	r4, [r3, #2]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (pressCounter[port] == t1)	
 80082f4:	0082      	lsls	r2, r0, #2
 80082f6:	4b1a      	ldr	r3, [pc, #104]	; (8008360 <CheckForTimedButtonPress+0x78>)
 80082f8:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80082fa:	0163      	lsls	r3, r4, #5
 80082fc:	1b1b      	subs	r3, r3, r4
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	191b      	adds	r3, r3, r4
 8008302:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 8008304:	4299      	cmp	r1, r3
 8008306:	d01c      	beq.n	8008342 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8008308:	00c2      	lsls	r2, r0, #3
 800830a:	1812      	adds	r2, r2, r0
 800830c:	4b13      	ldr	r3, [pc, #76]	; (800835c <CheckForTimedButtonPress+0x74>)
 800830e:	189b      	adds	r3, r3, r2
 8008310:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8008312:	0163      	lsls	r3, r4, #5
 8008314:	1b1b      	subs	r3, r3, r4
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	191b      	adds	r3, r3, r4
 800831a:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 800831c:	4299      	cmp	r1, r3
 800831e:	d017      	beq.n	8008350 <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 8008320:	00c2      	lsls	r2, r0, #3
 8008322:	1812      	adds	r2, r2, r0
 8008324:	4b0d      	ldr	r3, [pc, #52]	; (800835c <CheckForTimedButtonPress+0x74>)
 8008326:	189b      	adds	r3, r3, r2
 8008328:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800832a:	0163      	lsls	r3, r4, #5
 800832c:	1b1b      	subs	r3, r3, r4
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	191b      	adds	r3, r3, r4
 8008332:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 8008334:	4299      	cmp	r1, r3
 8008336:	d109      	bne.n	800834c <CheckForTimedButtonPress+0x64>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 8008338:	0010      	movs	r0, r2
 800833a:	4b08      	ldr	r3, [pc, #32]	; (800835c <CheckForTimedButtonPress+0x74>)
 800833c:	220a      	movs	r2, #10
 800833e:	54c2      	strb	r2, [r0, r3]
 8008340:	e004      	b.n	800834c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 8008342:	00c3      	lsls	r3, r0, #3
 8008344:	1818      	adds	r0, r3, r0
 8008346:	4b05      	ldr	r3, [pc, #20]	; (800835c <CheckForTimedButtonPress+0x74>)
 8008348:	2209      	movs	r2, #9
 800834a:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 800834c:	2000      	movs	r0, #0
 800834e:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8008350:	0010      	movs	r0, r2
 8008352:	4b02      	ldr	r3, [pc, #8]	; (800835c <CheckForTimedButtonPress+0x74>)
 8008354:	220a      	movs	r2, #10
 8008356:	54c2      	strb	r2, [r0, r3]
 8008358:	e7f8      	b.n	800834c <CheckForTimedButtonPress+0x64>
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	20001574 	.word	0x20001574
 8008360:	200015c0 	.word	0x200015c0

08008364 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 8008364:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8008366:	00c2      	lsls	r2, r0, #3
 8008368:	1812      	adds	r2, r2, r0
 800836a:	4b1b      	ldr	r3, [pc, #108]	; (80083d8 <CheckForTimedButtonRelease+0x74>)
 800836c:	189b      	adds	r3, r3, r2
 800836e:	795c      	ldrb	r4, [r3, #5]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (releaseCounter[port] == t1)	
 8008370:	0082      	lsls	r2, r0, #2
 8008372:	4b1a      	ldr	r3, [pc, #104]	; (80083dc <CheckForTimedButtonRelease+0x78>)
 8008374:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8008376:	0163      	lsls	r3, r4, #5
 8008378:	1b1b      	subs	r3, r3, r4
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	191b      	adds	r3, r3, r4
 800837e:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 8008380:	4299      	cmp	r1, r3
 8008382:	d01c      	beq.n	80083be <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8008384:	00c2      	lsls	r2, r0, #3
 8008386:	1812      	adds	r2, r2, r0
 8008388:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <CheckForTimedButtonRelease+0x74>)
 800838a:	189b      	adds	r3, r3, r2
 800838c:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800838e:	0163      	lsls	r3, r4, #5
 8008390:	1b1b      	subs	r3, r3, r4
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	191b      	adds	r3, r3, r4
 8008396:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 8008398:	4299      	cmp	r1, r3
 800839a:	d017      	beq.n	80083cc <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 800839c:	00c2      	lsls	r2, r0, #3
 800839e:	1812      	adds	r2, r2, r0
 80083a0:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <CheckForTimedButtonRelease+0x74>)
 80083a2:	189b      	adds	r3, r3, r2
 80083a4:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80083a6:	0163      	lsls	r3, r4, #5
 80083a8:	1b1b      	subs	r3, r3, r4
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	191b      	adds	r3, r3, r4
 80083ae:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 80083b0:	4299      	cmp	r1, r3
 80083b2:	d109      	bne.n	80083c8 <CheckForTimedButtonRelease+0x64>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 80083b4:	0010      	movs	r0, r2
 80083b6:	4b08      	ldr	r3, [pc, #32]	; (80083d8 <CheckForTimedButtonRelease+0x74>)
 80083b8:	220d      	movs	r2, #13
 80083ba:	54c2      	strb	r2, [r0, r3]
 80083bc:	e004      	b.n	80083c8 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 80083be:	00c3      	lsls	r3, r0, #3
 80083c0:	1818      	adds	r0, r3, r0
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <CheckForTimedButtonRelease+0x74>)
 80083c4:	220c      	movs	r2, #12
 80083c6:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 80083c8:	2000      	movs	r0, #0
 80083ca:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 80083cc:	0010      	movs	r0, r2
 80083ce:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <CheckForTimedButtonRelease+0x74>)
 80083d0:	220d      	movs	r2, #13
 80083d2:	54c2      	strb	r2, [r0, r3]
 80083d4:	e7f8      	b.n	80083c8 <CheckForTimedButtonRelease+0x64>
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	20001574 	.word	0x20001574
 80083dc:	200015dc 	.word	0x200015dc

080083e0 <CheckAttachedButtons>:
{
 80083e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e2:	46de      	mov	lr, fp
 80083e4:	4657      	mov	r7, sl
 80083e6:	464e      	mov	r6, r9
 80083e8:	4645      	mov	r5, r8
 80083ea:	b5e0      	push	{r5, r6, r7, lr}
 80083ec:	b089      	sub	sp, #36	; 0x24
 80083ee:	4dbd      	ldr	r5, [pc, #756]	; (80086e4 <CheckAttachedButtons+0x304>)
 80083f0:	3509      	adds	r5, #9
 80083f2:	2404      	movs	r4, #4
 80083f4:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	469b      	mov	fp, r3
 80083fa:	4699      	mov	r9, r3
 80083fc:	e111      	b.n	8008622 <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 80083fe:	230e      	movs	r3, #14
 8008400:	aa02      	add	r2, sp, #8
 8008402:	4694      	mov	ip, r2
 8008404:	4463      	add	r3, ip
 8008406:	8819      	ldrh	r1, [r3, #0]
 8008408:	2201      	movs	r2, #1
 800840a:	9807      	ldr	r0, [sp, #28]
 800840c:	f009 fb76 	bl	8011afc <HAL_GPIO_WritePin>
 8008410:	200a      	movs	r0, #10
 8008412:	f005 fb69 	bl	800dae8 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 8008416:	ab05      	add	r3, sp, #20
 8008418:	8819      	ldrh	r1, [r3, #0]
 800841a:	9806      	ldr	r0, [sp, #24]
 800841c:	f009 fb68 	bl	8011af0 <HAL_GPIO_ReadPin>
 8008420:	4681      	mov	r9, r0
 8008422:	e126      	b.n	8008672 <CheckAttachedButtons+0x292>
			switch (button[i].type)
 8008424:	2b01      	cmp	r3, #1
 8008426:	d105      	bne.n	8008434 <CheckAttachedButtons+0x54>
					if (connected == GPIO_PIN_SET)	
 8008428:	464b      	mov	r3, r9
 800842a:	2b01      	cmp	r3, #1
 800842c:	d046      	beq.n	80084bc <CheckAttachedButtons+0xdc>
					else if (connected == GPIO_PIN_RESET)
 800842e:	2b00      	cmp	r3, #0
 8008430:	d100      	bne.n	8008434 <CheckAttachedButtons+0x54>
 8008432:	e1c5      	b.n	80087c0 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON)												
 8008434:	465b      	mov	r3, fp
 8008436:	2b04      	cmp	r3, #4
 8008438:	d001      	beq.n	800843e <CheckAttachedButtons+0x5e>
 800843a:	2b02      	cmp	r3, #2
 800843c:	d107      	bne.n	800844e <CheckAttachedButtons+0x6e>
				if (pressCounter[i] < 0xFFFF)	
 800843e:	4baa      	ldr	r3, [pc, #680]	; (80086e8 <CheckAttachedButtons+0x308>)
 8008440:	58e3      	ldr	r3, [r4, r3]
 8008442:	4aaa      	ldr	r2, [pc, #680]	; (80086ec <CheckAttachedButtons+0x30c>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d842      	bhi.n	80084ce <CheckAttachedButtons+0xee>
					++pressCounter[i];																			// Advance the debounce counter
 8008448:	3301      	adds	r3, #1
 800844a:	4aa7      	ldr	r2, [pc, #668]	; (80086e8 <CheckAttachedButtons+0x308>)
 800844c:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF)												
 800844e:	23fd      	movs	r3, #253	; 0xfd
 8008450:	465a      	mov	r2, fp
 8008452:	4013      	ands	r3, r2
 8008454:	2b01      	cmp	r3, #1
 8008456:	d100      	bne.n	800845a <CheckAttachedButtons+0x7a>
 8008458:	e1b6      	b.n	80087c8 <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) 									
 800845a:	4ba3      	ldr	r3, [pc, #652]	; (80086e8 <CheckAttachedButtons+0x308>)
 800845c:	58e3      	ldr	r3, [r4, r3]
 800845e:	4aa4      	ldr	r2, [pc, #656]	; (80086f0 <CheckAttachedButtons+0x310>)
 8008460:	8812      	ldrh	r2, [r2, #0]
 8008462:	4293      	cmp	r3, r2
 8008464:	d36f      	bcc.n	8008546 <CheckAttachedButtons+0x166>
				if (pressCounter[i] == BOS.buttons.debounce)
 8008466:	d045      	beq.n	80084f4 <CheckAttachedButtons+0x114>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008468:	4ba2      	ldr	r3, [pc, #648]	; (80086f4 <CheckAttachedButtons+0x314>)
 800846a:	58e3      	ldr	r3, [r4, r3]
 800846c:	429a      	cmp	r2, r3
 800846e:	d202      	bcs.n	8008476 <CheckAttachedButtons+0x96>
					releaseCounter[i] = 0;					
 8008470:	4ba0      	ldr	r3, [pc, #640]	; (80086f4 <CheckAttachedButtons+0x314>)
 8008472:	2200      	movs	r2, #0
 8008474:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 8008476:	4b9c      	ldr	r3, [pc, #624]	; (80086e8 <CheckAttachedButtons+0x308>)
 8008478:	58e3      	ldr	r3, [r4, r3]
 800847a:	4a9d      	ldr	r2, [pc, #628]	; (80086f0 <CheckAttachedButtons+0x310>)
 800847c:	8852      	ldrh	r2, [r2, #2]
 800847e:	4293      	cmp	r3, r2
 8008480:	d952      	bls.n	8008528 <CheckAttachedButtons+0x148>
 8008482:	22f4      	movs	r2, #244	; 0xf4
 8008484:	32ff      	adds	r2, #255	; 0xff
 8008486:	4293      	cmp	r3, r2
 8008488:	d84e      	bhi.n	8008528 <CheckAttachedButtons+0x148>
					if (clicked == 0)
 800848a:	4b9b      	ldr	r3, [pc, #620]	; (80086f8 <CheckAttachedButtons+0x318>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d137      	bne.n	8008502 <CheckAttachedButtons+0x122>
						clicked = 1;																					// Record a possible single click 
 8008492:	4b99      	ldr	r3, [pc, #612]	; (80086f8 <CheckAttachedButtons+0x318>)
 8008494:	3af3      	subs	r2, #243	; 0xf3
 8008496:	3aff      	subs	r2, #255	; 0xff
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	e054      	b.n	8008546 <CheckAttachedButtons+0x166>
					if (connected == GPIO_PIN_SET)	
 800849c:	464b      	mov	r3, r9
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d00f      	beq.n	80084c2 <CheckAttachedButtons+0xe2>
					else if (connected == GPIO_PIN_RESET) 
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1c6      	bne.n	8008434 <CheckAttachedButtons+0x54>
						state = OPEN;	
 80084a6:	2303      	movs	r3, #3
 80084a8:	469b      	mov	fp, r3
 80084aa:	e18d      	b.n	80087c8 <CheckAttachedButtons+0x3e8>
					if (connected == GPIO_PIN_SET)	
 80084ac:	464b      	mov	r3, r9
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d00a      	beq.n	80084c8 <CheckAttachedButtons+0xe8>
					else if (connected == GPIO_PIN_RESET) 
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1be      	bne.n	8008434 <CheckAttachedButtons+0x54>
						state = OFF;
 80084b6:	2301      	movs	r3, #1
 80084b8:	469b      	mov	fp, r3
 80084ba:	e185      	b.n	80087c8 <CheckAttachedButtons+0x3e8>
						state = CLOSED;
 80084bc:	2304      	movs	r3, #4
 80084be:	469b      	mov	fp, r3
 80084c0:	e7bd      	b.n	800843e <CheckAttachedButtons+0x5e>
						state = CLOSED;
 80084c2:	2304      	movs	r3, #4
 80084c4:	469b      	mov	fp, r3
 80084c6:	e7ba      	b.n	800843e <CheckAttachedButtons+0x5e>
 80084c8:	2302      	movs	r3, #2
 80084ca:	469b      	mov	fp, r3
 80084cc:	e7b7      	b.n	800843e <CheckAttachedButtons+0x5e>
					pressCounter[i] = 0;																		// Reset debounce counter					
 80084ce:	4b86      	ldr	r3, [pc, #536]	; (80086e8 <CheckAttachedButtons+0x308>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	50e2      	str	r2, [r4, r3]
 80084d4:	e7bb      	b.n	800844e <CheckAttachedButtons+0x6e>
					releaseCounter[i] = 0;																	// Reset debounce counter		
 80084d6:	4b87      	ldr	r3, [pc, #540]	; (80086f4 <CheckAttachedButtons+0x314>)
 80084d8:	2200      	movs	r2, #0
 80084da:	50e2      	str	r2, [r4, r3]
 80084dc:	e17d      	b.n	80087da <CheckAttachedButtons+0x3fa>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80084de:	4b87      	ldr	r3, [pc, #540]	; (80086fc <CheckAttachedButtons+0x31c>)
 80084e0:	5cf3      	ldrb	r3, [r6, r3]
 80084e2:	4a83      	ldr	r2, [pc, #524]	; (80086f0 <CheckAttachedButtons+0x310>)
 80084e4:	7952      	ldrb	r2, [r2, #5]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d200      	bcs.n	80084ec <CheckAttachedButtons+0x10c>
 80084ea:	e182      	b.n	80087f2 <CheckAttachedButtons+0x412>
					++dblCounter[i];			
 80084ec:	3301      	adds	r3, #1
 80084ee:	4a83      	ldr	r2, [pc, #524]	; (80086fc <CheckAttachedButtons+0x31c>)
 80084f0:	54b3      	strb	r3, [r6, r2]
 80084f2:	e7b2      	b.n	800845a <CheckAttachedButtons+0x7a>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 80084f4:	2107      	movs	r1, #7
 80084f6:	4640      	mov	r0, r8
 80084f8:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 80084fa:	3301      	adds	r3, #1
 80084fc:	497a      	ldr	r1, [pc, #488]	; (80086e8 <CheckAttachedButtons+0x308>)
 80084fe:	5063      	str	r3, [r4, r1]
 8008500:	e7b2      	b.n	8008468 <CheckAttachedButtons+0x88>
					else if (clicked == 2) {
 8008502:	2b02      	cmp	r3, #2
 8008504:	d11f      	bne.n	8008546 <CheckAttachedButtons+0x166>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 8008506:	4b7d      	ldr	r3, [pc, #500]	; (80086fc <CheckAttachedButtons+0x31c>)
 8008508:	5cf3      	ldrb	r3, [r6, r3]
 800850a:	4a79      	ldr	r2, [pc, #484]	; (80086f0 <CheckAttachedButtons+0x310>)
 800850c:	7912      	ldrb	r2, [r2, #4]
 800850e:	429a      	cmp	r2, r3
 8008510:	d219      	bcs.n	8008546 <CheckAttachedButtons+0x166>
 8008512:	4a77      	ldr	r2, [pc, #476]	; (80086f0 <CheckAttachedButtons+0x310>)
 8008514:	7952      	ldrb	r2, [r2, #5]
 8008516:	429a      	cmp	r2, r3
 8008518:	d915      	bls.n	8008546 <CheckAttachedButtons+0x166>
							clicked = 3;																				// Record a possible double click 
 800851a:	4b77      	ldr	r3, [pc, #476]	; (80086f8 <CheckAttachedButtons+0x318>)
 800851c:	2203      	movs	r2, #3
 800851e:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 8008520:	4b76      	ldr	r3, [pc, #472]	; (80086fc <CheckAttachedButtons+0x31c>)
 8008522:	2200      	movs	r2, #0
 8008524:	54f2      	strb	r2, [r6, r3]
 8008526:	e00e      	b.n	8008546 <CheckAttachedButtons+0x166>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 8008528:	3bf5      	subs	r3, #245	; 0xf5
 800852a:	3bff      	subs	r3, #255	; 0xff
 800852c:	4a74      	ldr	r2, [pc, #464]	; (8008700 <CheckAttachedButtons+0x320>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d809      	bhi.n	8008546 <CheckAttachedButtons+0x166>
					if (clicked)	clicked = 0;															// Cannot be a click
 8008532:	4b71      	ldr	r3, [pc, #452]	; (80086f8 <CheckAttachedButtons+0x318>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <CheckAttachedButtons+0x160>
 800853a:	4b6f      	ldr	r3, [pc, #444]	; (80086f8 <CheckAttachedButtons+0x318>)
 800853c:	2200      	movs	r2, #0
 800853e:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8008540:	9803      	ldr	r0, [sp, #12]
 8008542:	f7ff fed1 	bl	80082e8 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 8008546:	4b6b      	ldr	r3, [pc, #428]	; (80086f4 <CheckAttachedButtons+0x314>)
 8008548:	58e3      	ldr	r3, [r4, r3]
 800854a:	4a69      	ldr	r2, [pc, #420]	; (80086f0 <CheckAttachedButtons+0x310>)
 800854c:	8812      	ldrh	r2, [r2, #0]
 800854e:	4293      	cmp	r3, r2
 8008550:	d34d      	bcc.n	80085ee <CheckAttachedButtons+0x20e>
				if (releaseCounter[i] == BOS.buttons.debounce)
 8008552:	d02b      	beq.n	80085ac <CheckAttachedButtons+0x1cc>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008554:	4b64      	ldr	r3, [pc, #400]	; (80086e8 <CheckAttachedButtons+0x308>)
 8008556:	58e3      	ldr	r3, [r4, r3]
 8008558:	429a      	cmp	r2, r3
 800855a:	d202      	bcs.n	8008562 <CheckAttachedButtons+0x182>
					pressCounter[i] = 0;				
 800855c:	4b62      	ldr	r3, [pc, #392]	; (80086e8 <CheckAttachedButtons+0x308>)
 800855e:	2200      	movs	r2, #0
 8008560:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 8008562:	4b64      	ldr	r3, [pc, #400]	; (80086f4 <CheckAttachedButtons+0x314>)
 8008564:	58e3      	ldr	r3, [r4, r3]
 8008566:	4a62      	ldr	r2, [pc, #392]	; (80086f0 <CheckAttachedButtons+0x310>)
 8008568:	8852      	ldrh	r2, [r2, #2]
 800856a:	4293      	cmp	r3, r2
 800856c:	d93a      	bls.n	80085e4 <CheckAttachedButtons+0x204>
 800856e:	22f4      	movs	r2, #244	; 0xf4
 8008570:	32ff      	adds	r2, #255	; 0xff
 8008572:	4293      	cmp	r3, r2
 8008574:	d836      	bhi.n	80085e4 <CheckAttachedButtons+0x204>
					if (clicked == 1)
 8008576:	4b60      	ldr	r3, [pc, #384]	; (80086f8 <CheckAttachedButtons+0x318>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d01d      	beq.n	80085ba <CheckAttachedButtons+0x1da>
					else if (clicked == 3)
 800857e:	2b03      	cmp	r3, #3
 8008580:	d135      	bne.n	80085ee <CheckAttachedButtons+0x20e>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 8008582:	3303      	adds	r3, #3
 8008584:	4642      	mov	r2, r8
 8008586:	7013      	strb	r3, [r2, #0]
						clicked = 0;																					// Prepare for a single click					
 8008588:	4b5b      	ldr	r3, [pc, #364]	; (80086f8 <CheckAttachedButtons+0x318>)
 800858a:	2200      	movs	r2, #0
 800858c:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 800858e:	4b5d      	ldr	r3, [pc, #372]	; (8008704 <CheckAttachedButtons+0x324>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d13f      	bne.n	8008616 <CheckAttachedButtons+0x236>
 8008596:	4643      	mov	r3, r8
 8008598:	7a1b      	ldrb	r3, [r3, #8]
 800859a:	079b      	lsls	r3, r3, #30
 800859c:	d53b      	bpl.n	8008616 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 800859e:	4b59      	ldr	r3, [pc, #356]	; (8008704 <CheckAttachedButtons+0x324>)
 80085a0:	2201      	movs	r2, #1
 80085a2:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 80085a4:	9803      	ldr	r0, [sp, #12]
 80085a6:	f7ff fe9c 	bl	80082e2 <buttonDblClickedCallback>
 80085aa:	e034      	b.n	8008616 <CheckAttachedButtons+0x236>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 80085ac:	2108      	movs	r1, #8
 80085ae:	4640      	mov	r0, r8
 80085b0:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 80085b2:	3301      	adds	r3, #1
 80085b4:	494f      	ldr	r1, [pc, #316]	; (80086f4 <CheckAttachedButtons+0x314>)
 80085b6:	5063      	str	r3, [r4, r1]
 80085b8:	e7cc      	b.n	8008554 <CheckAttachedButtons+0x174>
						button[i].state = CLICKED;														// Record a single button click event
 80085ba:	3304      	adds	r3, #4
 80085bc:	4642      	mov	r2, r8
 80085be:	7013      	strb	r3, [r2, #0]
						clicked = 2;																					// Prepare for a double click
 80085c0:	4b4d      	ldr	r3, [pc, #308]	; (80086f8 <CheckAttachedButtons+0x318>)
 80085c2:	2202      	movs	r2, #2
 80085c4:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 80085c6:	4b4f      	ldr	r3, [pc, #316]	; (8008704 <CheckAttachedButtons+0x324>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d123      	bne.n	8008616 <CheckAttachedButtons+0x236>
 80085ce:	4643      	mov	r3, r8
 80085d0:	7a1b      	ldrb	r3, [r3, #8]
 80085d2:	07db      	lsls	r3, r3, #31
 80085d4:	d51f      	bpl.n	8008616 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 80085d6:	4b4b      	ldr	r3, [pc, #300]	; (8008704 <CheckAttachedButtons+0x324>)
 80085d8:	2201      	movs	r2, #1
 80085da:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 80085dc:	9803      	ldr	r0, [sp, #12]
 80085de:	f7ff fe7f 	bl	80082e0 <buttonClickedCallback>
 80085e2:	e018      	b.n	8008616 <CheckAttachedButtons+0x236>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 80085e4:	3bf5      	subs	r3, #245	; 0xf5
 80085e6:	3bff      	subs	r3, #255	; 0xff
 80085e8:	4a45      	ldr	r2, [pc, #276]	; (8008700 <CheckAttachedButtons+0x320>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d909      	bls.n	8008602 <CheckAttachedButtons+0x222>
			switch (button[i].state)
 80085ee:	4643      	mov	r3, r8
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	3b05      	subs	r3, #5
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	2a09      	cmp	r2, #9
 80085f8:	d80d      	bhi.n	8008616 <CheckAttachedButtons+0x236>
 80085fa:	0093      	lsls	r3, r2, #2
 80085fc:	4a42      	ldr	r2, [pc, #264]	; (8008708 <CheckAttachedButtons+0x328>)
 80085fe:	58d3      	ldr	r3, [r2, r3]
 8008600:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8008602:	9803      	ldr	r0, [sp, #12]
 8008604:	f7ff feae 	bl	8008364 <CheckForTimedButtonRelease>
 8008608:	e7f1      	b.n	80085ee <CheckAttachedButtons+0x20e>
					buttonPressedCallback(i);
 800860a:	9803      	ldr	r0, [sp, #12]
 800860c:	f7ff fe66 	bl	80082dc <buttonPressedCallback>
					button[i].state = NONE;
 8008610:	2300      	movs	r3, #0
 8008612:	4642      	mov	r2, r8
 8008614:	7013      	strb	r3, [r2, #0]
 8008616:	3601      	adds	r6, #1
 8008618:	3509      	adds	r5, #9
 800861a:	3404      	adds	r4, #4
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 800861c:	2c1c      	cmp	r4, #28
 800861e:	d100      	bne.n	8008622 <CheckAttachedButtons+0x242>
 8008620:	e0ed      	b.n	80087fe <CheckAttachedButtons+0x41e>
 8008622:	b2f3      	uxtb	r3, r6
 8008624:	9303      	str	r3, [sp, #12]
 8008626:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 8008628:	786b      	ldrb	r3, [r5, #1]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0f3      	beq.n	8008616 <CheckAttachedButtons+0x236>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 800862e:	4b35      	ldr	r3, [pc, #212]	; (8008704 <CheckAttachedButtons+0x324>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d100      	bne.n	8008638 <CheckAttachedButtons+0x258>
 8008636:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008638:	230e      	movs	r3, #14
 800863a:	aa02      	add	r2, sp, #8
 800863c:	4694      	mov	ip, r2
 800863e:	4463      	add	r3, ip
 8008640:	469a      	mov	sl, r3
 8008642:	af05      	add	r7, sp, #20
 8008644:	9700      	str	r7, [sp, #0]
 8008646:	ab06      	add	r3, sp, #24
 8008648:	4652      	mov	r2, sl
 800864a:	a907      	add	r1, sp, #28
 800864c:	9803      	ldr	r0, [sp, #12]
 800864e:	f004 fe1d 	bl	800d28c <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8008652:	4653      	mov	r3, sl
 8008654:	8819      	ldrh	r1, [r3, #0]
 8008656:	2200      	movs	r2, #0
 8008658:	9807      	ldr	r0, [sp, #28]
 800865a:	f009 fa4f 	bl	8011afc <HAL_GPIO_WritePin>
 800865e:	200a      	movs	r0, #10
 8008660:	f005 fa42 	bl	800dae8 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8008664:	8839      	ldrh	r1, [r7, #0]
 8008666:	9806      	ldr	r0, [sp, #24]
 8008668:	f009 fa42 	bl	8011af0 <HAL_GPIO_ReadPin>
 800866c:	2800      	cmp	r0, #0
 800866e:	d100      	bne.n	8008672 <CheckAttachedButtons+0x292>
 8008670:	e6c5      	b.n	80083fe <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008672:	230e      	movs	r3, #14
 8008674:	aa02      	add	r2, sp, #8
 8008676:	4694      	mov	ip, r2
 8008678:	4463      	add	r3, ip
 800867a:	8819      	ldrh	r1, [r3, #0]
 800867c:	2200      	movs	r2, #0
 800867e:	9807      	ldr	r0, [sp, #28]
 8008680:	f009 fa3c 	bl	8011afc <HAL_GPIO_WritePin>
			switch (button[i].type)
 8008684:	4643      	mov	r3, r8
 8008686:	785b      	ldrb	r3, [r3, #1]
 8008688:	2b02      	cmp	r3, #2
 800868a:	d100      	bne.n	800868e <CheckAttachedButtons+0x2ae>
 800868c:	e706      	b.n	800849c <CheckAttachedButtons+0xbc>
 800868e:	b2da      	uxtb	r2, r3
 8008690:	2a02      	cmp	r2, #2
 8008692:	d800      	bhi.n	8008696 <CheckAttachedButtons+0x2b6>
 8008694:	e6c6      	b.n	8008424 <CheckAttachedButtons+0x44>
 8008696:	2b03      	cmp	r3, #3
 8008698:	d100      	bne.n	800869c <CheckAttachedButtons+0x2bc>
 800869a:	e707      	b.n	80084ac <CheckAttachedButtons+0xcc>
 800869c:	2b04      	cmp	r3, #4
 800869e:	d000      	beq.n	80086a2 <CheckAttachedButtons+0x2c2>
 80086a0:	e6c8      	b.n	8008434 <CheckAttachedButtons+0x54>
					if (connected == GPIO_PIN_SET)	
 80086a2:	464b      	mov	r3, r9
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d100      	bne.n	80086aa <CheckAttachedButtons+0x2ca>
 80086a8:	e08d      	b.n	80087c6 <CheckAttachedButtons+0x3e6>
					else if (connected == GPIO_PIN_RESET) 
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d000      	beq.n	80086b0 <CheckAttachedButtons+0x2d0>
 80086ae:	e6c1      	b.n	8008434 <CheckAttachedButtons+0x54>
 80086b0:	2302      	movs	r3, #2
 80086b2:	469b      	mov	fp, r3
 80086b4:	e6c3      	b.n	800843e <CheckAttachedButtons+0x5e>
					buttonReleasedCallback(i);
 80086b6:	9803      	ldr	r0, [sp, #12]
 80086b8:	f7ff fe11 	bl	80082de <buttonReleasedCallback>
					button[i].state = NONE;
 80086bc:	2300      	movs	r3, #0
 80086be:	4642      	mov	r2, r8
 80086c0:	7013      	strb	r3, [r2, #0]
      		break;
 80086c2:	e7a8      	b.n	8008616 <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 80086c4:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <CheckAttachedButtons+0x324>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1a4      	bne.n	8008616 <CheckAttachedButtons+0x236>
 80086cc:	4643      	mov	r3, r8
 80086ce:	7a1b      	ldrb	r3, [r3, #8]
 80086d0:	075b      	lsls	r3, r3, #29
 80086d2:	d5a0      	bpl.n	8008616 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 80086d4:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <CheckAttachedButtons+0x324>)
 80086d6:	2201      	movs	r2, #1
 80086d8:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 80086da:	2101      	movs	r1, #1
 80086dc:	9803      	ldr	r0, [sp, #12]
 80086de:	f7ff fe01 	bl	80082e4 <buttonPressedForXCallback>
 80086e2:	e798      	b.n	8008616 <CheckAttachedButtons+0x236>
 80086e4:	20001574 	.word	0x20001574
 80086e8:	200015c0 	.word	0x200015c0
 80086ec:	0000fffe 	.word	0x0000fffe
 80086f0:	20006a18 	.word	0x20006a18
 80086f4:	200015dc 	.word	0x200015dc
 80086f8:	200015b3 	.word	0x200015b3
 80086fc:	200015b4 	.word	0x200015b4
 8008700:	0000fe0a 	.word	0x0000fe0a
 8008704:	200015bb 	.word	0x200015bb
 8008708:	0801b348 	.word	0x0801b348
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 800870c:	4b3f      	ldr	r3, [pc, #252]	; (800880c <CheckAttachedButtons+0x42c>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d000      	beq.n	8008716 <CheckAttachedButtons+0x336>
 8008714:	e77f      	b.n	8008616 <CheckAttachedButtons+0x236>
 8008716:	4643      	mov	r3, r8
 8008718:	7a1b      	ldrb	r3, [r3, #8]
 800871a:	071b      	lsls	r3, r3, #28
 800871c:	d400      	bmi.n	8008720 <CheckAttachedButtons+0x340>
 800871e:	e77a      	b.n	8008616 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008720:	4b3a      	ldr	r3, [pc, #232]	; (800880c <CheckAttachedButtons+0x42c>)
 8008722:	2201      	movs	r2, #1
 8008724:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 8008726:	2102      	movs	r1, #2
 8008728:	9803      	ldr	r0, [sp, #12]
 800872a:	f7ff fddb 	bl	80082e4 <buttonPressedForXCallback>
 800872e:	e772      	b.n	8008616 <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 8008730:	4b36      	ldr	r3, [pc, #216]	; (800880c <CheckAttachedButtons+0x42c>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d000      	beq.n	800873a <CheckAttachedButtons+0x35a>
 8008738:	e76d      	b.n	8008616 <CheckAttachedButtons+0x236>
 800873a:	4643      	mov	r3, r8
 800873c:	7a1b      	ldrb	r3, [r3, #8]
 800873e:	06db      	lsls	r3, r3, #27
 8008740:	d400      	bmi.n	8008744 <CheckAttachedButtons+0x364>
 8008742:	e768      	b.n	8008616 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008744:	4b31      	ldr	r3, [pc, #196]	; (800880c <CheckAttachedButtons+0x42c>)
 8008746:	2201      	movs	r2, #1
 8008748:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 800874a:	2103      	movs	r1, #3
 800874c:	9803      	ldr	r0, [sp, #12]
 800874e:	f7ff fdc9 	bl	80082e4 <buttonPressedForXCallback>
 8008752:	e760      	b.n	8008616 <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8008754:	4b2d      	ldr	r3, [pc, #180]	; (800880c <CheckAttachedButtons+0x42c>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d000      	beq.n	800875e <CheckAttachedButtons+0x37e>
 800875c:	e75b      	b.n	8008616 <CheckAttachedButtons+0x236>
 800875e:	4643      	mov	r3, r8
 8008760:	7a1b      	ldrb	r3, [r3, #8]
 8008762:	069b      	lsls	r3, r3, #26
 8008764:	d400      	bmi.n	8008768 <CheckAttachedButtons+0x388>
 8008766:	e756      	b.n	8008616 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008768:	4b28      	ldr	r3, [pc, #160]	; (800880c <CheckAttachedButtons+0x42c>)
 800876a:	2201      	movs	r2, #1
 800876c:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 800876e:	2101      	movs	r1, #1
 8008770:	9803      	ldr	r0, [sp, #12]
 8008772:	f7ff fdb8 	bl	80082e6 <buttonReleasedForYCallback>
 8008776:	e74e      	b.n	8008616 <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 8008778:	4b24      	ldr	r3, [pc, #144]	; (800880c <CheckAttachedButtons+0x42c>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d000      	beq.n	8008782 <CheckAttachedButtons+0x3a2>
 8008780:	e749      	b.n	8008616 <CheckAttachedButtons+0x236>
 8008782:	4643      	mov	r3, r8
 8008784:	7a1b      	ldrb	r3, [r3, #8]
 8008786:	065b      	lsls	r3, r3, #25
 8008788:	d400      	bmi.n	800878c <CheckAttachedButtons+0x3ac>
 800878a:	e744      	b.n	8008616 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 800878c:	4b1f      	ldr	r3, [pc, #124]	; (800880c <CheckAttachedButtons+0x42c>)
 800878e:	2201      	movs	r2, #1
 8008790:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 8008792:	2102      	movs	r1, #2
 8008794:	9803      	ldr	r0, [sp, #12]
 8008796:	f7ff fda6 	bl	80082e6 <buttonReleasedForYCallback>
 800879a:	e73c      	b.n	8008616 <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 800879c:	4b1b      	ldr	r3, [pc, #108]	; (800880c <CheckAttachedButtons+0x42c>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d000      	beq.n	80087a6 <CheckAttachedButtons+0x3c6>
 80087a4:	e737      	b.n	8008616 <CheckAttachedButtons+0x236>
 80087a6:	4643      	mov	r3, r8
 80087a8:	7a1b      	ldrb	r3, [r3, #8]
 80087aa:	2b7f      	cmp	r3, #127	; 0x7f
 80087ac:	d800      	bhi.n	80087b0 <CheckAttachedButtons+0x3d0>
 80087ae:	e732      	b.n	8008616 <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 80087b0:	4b16      	ldr	r3, [pc, #88]	; (800880c <CheckAttachedButtons+0x42c>)
 80087b2:	2201      	movs	r2, #1
 80087b4:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 80087b6:	2103      	movs	r1, #3
 80087b8:	9803      	ldr	r0, [sp, #12]
 80087ba:	f7ff fd94 	bl	80082e6 <buttonReleasedForYCallback>
 80087be:	e72a      	b.n	8008616 <CheckAttachedButtons+0x236>
						state = OPEN;			
 80087c0:	2303      	movs	r3, #3
 80087c2:	469b      	mov	fp, r3
 80087c4:	e000      	b.n	80087c8 <CheckAttachedButtons+0x3e8>
						state = OFF;
 80087c6:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 80087c8:	4b11      	ldr	r3, [pc, #68]	; (8008810 <CheckAttachedButtons+0x430>)
 80087ca:	58e3      	ldr	r3, [r4, r3]
 80087cc:	4a11      	ldr	r2, [pc, #68]	; (8008814 <CheckAttachedButtons+0x434>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d900      	bls.n	80087d4 <CheckAttachedButtons+0x3f4>
 80087d2:	e680      	b.n	80084d6 <CheckAttachedButtons+0xf6>
					++releaseCounter[i];																		// Advance the debounce counter
 80087d4:	3301      	adds	r3, #1
 80087d6:	4a0e      	ldr	r2, [pc, #56]	; (8008810 <CheckAttachedButtons+0x430>)
 80087d8:	50a3      	str	r3, [r4, r2]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80087da:	4b0f      	ldr	r3, [pc, #60]	; (8008818 <CheckAttachedButtons+0x438>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d100      	bne.n	80087e4 <CheckAttachedButtons+0x404>
 80087e2:	e67c      	b.n	80084de <CheckAttachedButtons+0xfe>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 80087e4:	4b0d      	ldr	r3, [pc, #52]	; (800881c <CheckAttachedButtons+0x43c>)
 80087e6:	5cf2      	ldrb	r2, [r6, r3]
 80087e8:	4b0d      	ldr	r3, [pc, #52]	; (8008820 <CheckAttachedButtons+0x440>)
 80087ea:	795b      	ldrb	r3, [r3, #5]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d800      	bhi.n	80087f2 <CheckAttachedButtons+0x412>
 80087f0:	e633      	b.n	800845a <CheckAttachedButtons+0x7a>
					clicked = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	4a08      	ldr	r2, [pc, #32]	; (8008818 <CheckAttachedButtons+0x438>)
 80087f6:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 80087f8:	4a08      	ldr	r2, [pc, #32]	; (800881c <CheckAttachedButtons+0x43c>)
 80087fa:	54b3      	strb	r3, [r6, r2]
 80087fc:	e62d      	b.n	800845a <CheckAttachedButtons+0x7a>
}
 80087fe:	b009      	add	sp, #36	; 0x24
 8008800:	bc3c      	pop	{r2, r3, r4, r5}
 8008802:	4690      	mov	r8, r2
 8008804:	4699      	mov	r9, r3
 8008806:	46a2      	mov	sl, r4
 8008808:	46ab      	mov	fp, r5
 800880a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800880c:	200015bb 	.word	0x200015bb
 8008810:	200015dc 	.word	0x200015dc
 8008814:	0000fffe 	.word	0x0000fffe
 8008818:	200015b3 	.word	0x200015b3
 800881c:	200015b4 	.word	0x200015b4
 8008820:	20006a18 	.word	0x20006a18

08008824 <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 8008824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008826:	b08d      	sub	sp, #52	; 0x34
 8008828:	0006      	movs	r6, r0
 800882a:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800882c:	4b41      	ldr	r3, [pc, #260]	; (8008934 <AddPortButton+0x110>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d157      	bne.n	80088e4 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 8008834:	4b40      	ldr	r3, [pc, #256]	; (8008938 <AddPortButton+0x114>)
 8008836:	2204      	movs	r2, #4
 8008838:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800883a:	4b3e      	ldr	r3, [pc, #248]	; (8008934 <AddPortButton+0x110>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d15a      	bne.n	80088f8 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 8008842:	2512      	movs	r5, #18
 8008844:	446d      	add	r5, sp
 8008846:	af04      	add	r7, sp, #16
 8008848:	9700      	str	r7, [sp, #0]
 800884a:	ab05      	add	r3, sp, #20
 800884c:	002a      	movs	r2, r5
 800884e:	a906      	add	r1, sp, #24
 8008850:	0020      	movs	r0, r4
 8008852:	f004 fd1b 	bl	800d28c <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 8008856:	882b      	ldrh	r3, [r5, #0]
 8008858:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800885a:	2301      	movs	r3, #1
 800885c:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800885e:	2500      	movs	r5, #0
 8008860:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008862:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 8008864:	a907      	add	r1, sp, #28
 8008866:	9806      	ldr	r0, [sp, #24]
 8008868:	f009 f862 	bl	8011930 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800886c:	883b      	ldrh	r3, [r7, #0]
 800886e:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008870:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008872:	2302      	movs	r3, #2
 8008874:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 8008876:	a907      	add	r1, sp, #28
 8008878:	9805      	ldr	r0, [sp, #20]
 800887a:	f009 f859 	bl	8011930 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 800887e:	00e2      	lsls	r2, r4, #3
 8008880:	1912      	adds	r2, r2, r4
 8008882:	4b2e      	ldr	r3, [pc, #184]	; (800893c <AddPortButton+0x118>)
 8008884:	189b      	adds	r3, r3, r2
 8008886:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008888:	0025      	movs	r5, r4
 800888a:	353a      	adds	r5, #58	; 0x3a
 800888c:	00ad      	lsls	r5, r5, #2
 800888e:	210e      	movs	r1, #14
 8008890:	4469      	add	r1, sp
 8008892:	0028      	movs	r0, r5
 8008894:	f7ff f88a 	bl	80079ac <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008898:	2800      	cmp	r0, #0
 800889a:	d133      	bne.n	8008904 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 800889c:	230e      	movs	r3, #14
 800889e:	446b      	add	r3, sp
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	0a1b      	lsrs	r3, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 80088a4:	091a      	lsrs	r2, r3, #4
 80088a6:	42a2      	cmp	r2, r4
 80088a8:	d103      	bne.n	80088b2 <AddPortButton+0x8e>
 80088aa:	220f      	movs	r2, #15
 80088ac:	4013      	ands	r3, r2
 80088ae:	42b3      	cmp	r3, r6
 80088b0:	d015      	beq.n	80088de <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 80088b2:	0324      	lsls	r4, r4, #12
 80088b4:	0231      	lsls	r1, r6, #8
 80088b6:	4321      	orrs	r1, r4
 80088b8:	b289      	uxth	r1, r1
 80088ba:	230e      	movs	r3, #14
 80088bc:	446b      	add	r3, sp
 80088be:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 80088c0:	0028      	movs	r0, r5
 80088c2:	f7ff f8a3 	bl	8007a0c <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 80088c6:	1c68      	adds	r0, r5, #1
 80088c8:	2100      	movs	r1, #0
 80088ca:	f7ff f89f 	bl	8007a0c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 80088ce:	1ca8      	adds	r0, r5, #2
 80088d0:	2100      	movs	r1, #0
 80088d2:	f7ff f89b 	bl	8007a0c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 80088d6:	1ce8      	adds	r0, r5, #3
 80088d8:	2100      	movs	r1, #0
 80088da:	f7ff f897 	bl	8007a0c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 80088de:	2000      	movs	r0, #0
 80088e0:	b00d      	add	sp, #52	; 0x34
 80088e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 80088e4:	008d      	lsls	r5, r1, #2
 80088e6:	4b16      	ldr	r3, [pc, #88]	; (8008940 <AddPortButton+0x11c>)
 80088e8:	58e8      	ldr	r0, [r5, r3]
 80088ea:	f006 f85b 	bl	800e9a4 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80088ee:	4b15      	ldr	r3, [pc, #84]	; (8008944 <AddPortButton+0x120>)
 80088f0:	58e8      	ldr	r0, [r5, r3]
 80088f2:	f006 f857 	bl	800e9a4 <osSemaphoreRelease>
 80088f6:	e79d      	b.n	8008834 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 80088f8:	0020      	movs	r0, r4
 80088fa:	f005 fae1 	bl	800dec0 <GetUart>
 80088fe:	f00a fca6 	bl	801324e <HAL_UART_DeInit>
 8008902:	e79e      	b.n	8008842 <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8008904:	0324      	lsls	r4, r4, #12
 8008906:	0231      	lsls	r1, r6, #8
 8008908:	4321      	orrs	r1, r4
 800890a:	b289      	uxth	r1, r1
 800890c:	230e      	movs	r3, #14
 800890e:	446b      	add	r3, sp
 8008910:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 8008912:	0028      	movs	r0, r5
 8008914:	f7ff f87a 	bl	8007a0c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008918:	1c68      	adds	r0, r5, #1
 800891a:	2100      	movs	r1, #0
 800891c:	f7ff f876 	bl	8007a0c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008920:	1ca8      	adds	r0, r5, #2
 8008922:	2100      	movs	r1, #0
 8008924:	f7ff f872 	bl	8007a0c <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008928:	1ce8      	adds	r0, r5, #3
 800892a:	2100      	movs	r1, #0
 800892c:	f7ff f86e 	bl	8007a0c <EE_WriteVariable>
 8008930:	e7d5      	b.n	80088de <AddPortButton+0xba>
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	20000b05 	.word	0x20000b05
 8008938:	20001168 	.word	0x20001168
 800893c:	20001574 	.word	0x20001574
 8008940:	20006ab4 	.word	0x20006ab4
 8008944:	20006a98 	.word	0x20006a98

08008948 <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 800894e:	4837      	ldr	r0, [pc, #220]	; (8008a2c <RemovePortButton+0xe4>)
 8008950:	00e9      	lsls	r1, r5, #3
 8008952:	1949      	adds	r1, r1, r5
 8008954:	1842      	adds	r2, r0, r1
 8008956:	2300      	movs	r3, #0
 8008958:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800895a:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 800895c:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 800895e:	7093      	strb	r3, [r2, #2]
 8008960:	70d3      	strb	r3, [r2, #3]
 8008962:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 8008964:	7153      	strb	r3, [r2, #5]
 8008966:	7193      	strb	r3, [r2, #6]
 8008968:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 800896a:	002c      	movs	r4, r5
 800896c:	343a      	adds	r4, #58	; 0x3a
 800896e:	00a4      	lsls	r4, r4, #2
 8008970:	466b      	mov	r3, sp
 8008972:	1d99      	adds	r1, r3, #6
 8008974:	0020      	movs	r0, r4
 8008976:	f7ff f819 	bl	80079ac <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 800897a:	2800      	cmp	r0, #0
 800897c:	d02b      	beq.n	80089d6 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 800897e:	0028      	movs	r0, r5
 8008980:	f005 fa9e 	bl	800dec0 <GetUart>
 8008984:	0006      	movs	r6, r0
	
	if (huart->Instance == USART1) 
 8008986:	6803      	ldr	r3, [r0, #0]
 8008988:	4a29      	ldr	r2, [pc, #164]	; (8008a30 <RemovePortButton+0xe8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d034      	beq.n	80089f8 <RemovePortButton+0xb0>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 800898e:	4a29      	ldr	r2, [pc, #164]	; (8008a34 <RemovePortButton+0xec>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d035      	beq.n	8008a00 <RemovePortButton+0xb8>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 8008994:	4a28      	ldr	r2, [pc, #160]	; (8008a38 <RemovePortButton+0xf0>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d036      	beq.n	8008a08 <RemovePortButton+0xc0>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 800899a:	4a28      	ldr	r2, [pc, #160]	; (8008a3c <RemovePortButton+0xf4>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d037      	beq.n	8008a10 <RemovePortButton+0xc8>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 80089a0:	4a27      	ldr	r2, [pc, #156]	; (8008a40 <RemovePortButton+0xf8>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d038      	beq.n	8008a18 <RemovePortButton+0xd0>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 80089a6:	4a27      	ldr	r2, [pc, #156]	; (8008a44 <RemovePortButton+0xfc>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d039      	beq.n	8008a20 <RemovePortButton+0xd8>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 80089ac:	4a26      	ldr	r2, [pc, #152]	; (8008a48 <RemovePortButton+0x100>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d03a      	beq.n	8008a28 <RemovePortButton+0xe0>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 80089b2:	4a26      	ldr	r2, [pc, #152]	; (8008a4c <RemovePortButton+0x104>)
 80089b4:	4694      	mov	ip, r2
 80089b6:	4463      	add	r3, ip
 80089b8:	1e5c      	subs	r4, r3, #1
 80089ba:	41a3      	sbcs	r3, r4
 80089bc:	425c      	negs	r4, r3
 80089be:	b2e4      	uxtb	r4, r4
	} 
	else
		result = BOS_ERROR;			
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 80089c0:	4b23      	ldr	r3, [pc, #140]	; (8008a50 <RemovePortButton+0x108>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 80089c6:	3201      	adds	r2, #1
 80089c8:	4922      	ldr	r1, [pc, #136]	; (8008a54 <RemovePortButton+0x10c>)
 80089ca:	0030      	movs	r0, r6
 80089cc:	f00a fc98 	bl	8013300 <HAL_UART_Receive_IT>
	
	return result;
}
 80089d0:	0020      	movs	r0, r4
 80089d2:	b002      	add	sp, #8
 80089d4:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 80089d6:	2100      	movs	r1, #0
 80089d8:	0020      	movs	r0, r4
 80089da:	f7ff f817 	bl	8007a0c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 80089de:	1c60      	adds	r0, r4, #1
 80089e0:	2100      	movs	r1, #0
 80089e2:	f7ff f813 	bl	8007a0c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 80089e6:	1ca0      	adds	r0, r4, #2
 80089e8:	2100      	movs	r1, #0
 80089ea:	f7ff f80f 	bl	8007a0c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 80089ee:	1ce0      	adds	r0, r4, #3
 80089f0:	2100      	movs	r1, #0
 80089f2:	f7ff f80b 	bl	8007a0c <EE_WriteVariable>
 80089f6:	e7c2      	b.n	800897e <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 80089f8:	f005 f89a 	bl	800db30 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 80089fc:	2400      	movs	r4, #0
 80089fe:	e7df      	b.n	80089c0 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008a00:	f005 f8ae 	bl	800db60 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8008a04:	2400      	movs	r4, #0
 8008a06:	e7db      	b.n	80089c0 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008a08:	f005 f8c2 	bl	800db90 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008a0c:	2400      	movs	r4, #0
 8008a0e:	e7d7      	b.n	80089c0 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008a10:	f005 f8d6 	bl	800dbc0 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 8008a14:	2400      	movs	r4, #0
 8008a16:	e7d3      	b.n	80089c0 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008a18:	f005 f8ea 	bl	800dbf0 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008a1c:	2400      	movs	r4, #0
 8008a1e:	e7cf      	b.n	80089c0 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8008a20:	f005 f8fe 	bl	800dc20 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008a24:	2400      	movs	r4, #0
 8008a26:	e7cb      	b.n	80089c0 <RemovePortButton+0x78>
 8008a28:	2400      	movs	r4, #0
 8008a2a:	e7c9      	b.n	80089c0 <RemovePortButton+0x78>
 8008a2c:	20001574 	.word	0x20001574
 8008a30:	40013800 	.word	0x40013800
 8008a34:	40004400 	.word	0x40004400
 8008a38:	40004800 	.word	0x40004800
 8008a3c:	40004c00 	.word	0x40004c00
 8008a40:	40005000 	.word	0x40005000
 8008a44:	40011400 	.word	0x40011400
 8008a48:	40011800 	.word	0x40011800
 8008a4c:	bffee400 	.word	0xbffee400
 8008a50:	20001168 	.word	0x20001168
 8008a54:	20000ed0 	.word	0x20000ed0

08008a58 <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 8008a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a5a:	46de      	mov	lr, fp
 8008a5c:	4657      	mov	r7, sl
 8008a5e:	464e      	mov	r6, r9
 8008a60:	4645      	mov	r5, r8
 8008a62:	b5e0      	push	{r5, r6, r7, lr}
 8008a64:	b085      	sub	sp, #20
 8008a66:	0007      	movs	r7, r0
 8008a68:	001e      	movs	r6, r3
 8008a6a:	ab0e      	add	r3, sp, #56	; 0x38
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	4698      	mov	r8, r3
 8008a70:	ab0f      	add	r3, sp, #60	; 0x3c
 8008a72:	781d      	ldrb	r5, [r3, #0]
 8008a74:	ab10      	add	r3, sp, #64	; 0x40
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	469b      	mov	fp, r3
 8008a7a:	ab11      	add	r3, sp, #68	; 0x44
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	469a      	mov	sl, r3
 8008a80:	ab12      	add	r3, sp, #72	; 0x48
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	4699      	mov	r9, r3
 8008a86:	ab13      	add	r3, sp, #76	; 0x4c
 8008a88:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 8008a8a:	00fc      	lsls	r4, r7, #3
 8008a8c:	19e4      	adds	r4, r4, r7
 8008a8e:	4b9e      	ldr	r3, [pc, #632]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008a90:	191b      	adds	r3, r3, r4
 8008a92:	785b      	ldrb	r3, [r3, #1]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d04c      	beq.n	8008b32 <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 8008a98:	00fc      	lsls	r4, r7, #3
 8008a9a:	19e4      	adds	r4, r4, r7
 8008a9c:	4b9a      	ldr	r3, [pc, #616]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008a9e:	191b      	adds	r3, r3, r4
 8008aa0:	709e      	strb	r6, [r3, #2]
 8008aa2:	4644      	mov	r4, r8
 8008aa4:	70dc      	strb	r4, [r3, #3]
 8008aa6:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 8008aa8:	465c      	mov	r4, fp
 8008aaa:	715c      	strb	r4, [r3, #5]
 8008aac:	4654      	mov	r4, sl
 8008aae:	719c      	strb	r4, [r3, #6]
 8008ab0:	464c      	mov	r4, r9
 8008ab2:	71dc      	strb	r4, [r3, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 8008ab4:	2801      	cmp	r0, #1
 8008ab6:	d003      	beq.n	8008ac0 <SetButtonEvents+0x68>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d113      	bne.n	8008ae4 <SetButtonEvents+0x8c>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	d042      	beq.n	8008b46 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008ac0:	00f9      	lsls	r1, r7, #3
 8008ac2:	19c9      	adds	r1, r1, r7
 8008ac4:	4b90      	ldr	r3, [pc, #576]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008ac6:	185b      	adds	r3, r3, r1
 8008ac8:	7a19      	ldrb	r1, [r3, #8]
 8008aca:	2401      	movs	r4, #1
 8008acc:	4321      	orrs	r1, r4
 8008ace:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008ad0:	2801      	cmp	r0, #1
 8008ad2:	d10c      	bne.n	8008aee <SetButtonEvents+0x96>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008ad4:	00fa      	lsls	r2, r7, #3
 8008ad6:	19d2      	adds	r2, r2, r7
 8008ad8:	4b8b      	ldr	r3, [pc, #556]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008ada:	189b      	adds	r3, r3, r2
 8008adc:	7a1a      	ldrb	r2, [r3, #8]
 8008ade:	2102      	movs	r1, #2
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008ae4:	2801      	cmp	r0, #1
 8008ae6:	d042      	beq.n	8008b6e <SetButtonEvents+0x116>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d152      	bne.n	8008b92 <SetButtonEvents+0x13a>
 8008aec:	e03d      	b.n	8008b6a <SetButtonEvents+0x112>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d031      	beq.n	8008b56 <SetButtonEvents+0xfe>
 8008af2:	e044      	b.n	8008b7e <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d059      	beq.n	8008bac <SetButtonEvents+0x154>
 8008af8:	e06d      	b.n	8008bd6 <SetButtonEvents+0x17e>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d100      	bne.n	8008b00 <SetButtonEvents+0xa8>
 8008afe:	e082      	b.n	8008c06 <SetButtonEvents+0x1ae>
 8008b00:	e097      	b.n	8008c32 <SetButtonEvents+0x1da>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d100      	bne.n	8008b08 <SetButtonEvents+0xb0>
 8008b06:	e0f2      	b.n	8008cee <SetButtonEvents+0x296>
 8008b08:	e09f      	b.n	8008c4a <SetButtonEvents+0x1f2>
	if(!res)																														// This variable exists
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008b0a:	0a19      	lsrs	r1, r3, #8
 8008b0c:	0209      	lsls	r1, r1, #8
 8008b0e:	4311      	orrs	r1, r2
 8008b10:	ab02      	add	r3, sp, #8
 8008b12:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008b14:	0020      	movs	r0, r4
 8008b16:	f7fe ff79 	bl	8007a0c <EE_WriteVariable>
 8008b1a:	e0ad      	b.n	8008c78 <SetButtonEvents+0x220>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8008b1c:	0019      	movs	r1, r3
 8008b1e:	9801      	ldr	r0, [sp, #4]
 8008b20:	f7fe ff74 	bl	8007a0c <EE_WriteVariable>
 8008b24:	e0b7      	b.n	8008c96 <SetButtonEvents+0x23e>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 8008b26:	4653      	mov	r3, sl
 8008b28:	4319      	orrs	r1, r3
 8008b2a:	0030      	movs	r0, r6
 8008b2c:	f7fe ff6e 	bl	8007a0c <EE_WriteVariable>
 8008b30:	e0c0      	b.n	8008cb4 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008b32:	200b      	movs	r0, #11
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
}
 8008b34:	b005      	add	sp, #20
 8008b36:	bc3c      	pop	{r2, r3, r4, r5}
 8008b38:	4690      	mov	r8, r2
 8008b3a:	4699      	mov	r9, r3
 8008b3c:	46a2      	mov	sl, r4
 8008b3e:	46ab      	mov	fp, r5
 8008b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 8008b42:	200b      	movs	r0, #11
 8008b44:	e7f6      	b.n	8008b34 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8008b46:	00f9      	lsls	r1, r7, #3
 8008b48:	19c9      	adds	r1, r1, r7
 8008b4a:	4b6f      	ldr	r3, [pc, #444]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008b4c:	185b      	adds	r3, r3, r1
 8008b4e:	7a19      	ldrb	r1, [r3, #8]
 8008b50:	2401      	movs	r4, #1
 8008b52:	43a1      	bics	r1, r4
 8008b54:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008b56:	2a00      	cmp	r2, #0
 8008b58:	d1bc      	bne.n	8008ad4 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 8008b5a:	00fa      	lsls	r2, r7, #3
 8008b5c:	19d2      	adds	r2, r2, r7
 8008b5e:	4b6a      	ldr	r3, [pc, #424]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008b60:	189b      	adds	r3, r3, r2
 8008b62:	7a1a      	ldrb	r2, [r3, #8]
 8008b64:	2102      	movs	r1, #2
 8008b66:	438a      	bics	r2, r1
 8008b68:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	d016      	beq.n	8008b9c <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008b6e:	00fa      	lsls	r2, r7, #3
 8008b70:	19d2      	adds	r2, r2, r7
 8008b72:	4b65      	ldr	r3, [pc, #404]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008b74:	189b      	adds	r3, r3, r2
 8008b76:	7a1a      	ldrb	r2, [r3, #8]
 8008b78:	2104      	movs	r1, #4
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008b7e:	2801      	cmp	r0, #1
 8008b80:	d1b8      	bne.n	8008af4 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008b82:	00fa      	lsls	r2, r7, #3
 8008b84:	19d2      	adds	r2, r2, r7
 8008b86:	4b60      	ldr	r3, [pc, #384]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008b88:	189b      	adds	r3, r3, r2
 8008b8a:	7a1a      	ldrb	r2, [r3, #8]
 8008b8c:	2108      	movs	r1, #8
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008b92:	2801      	cmp	r0, #1
 8008b94:	d017      	beq.n	8008bc6 <SetButtonEvents+0x16e>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d128      	bne.n	8008bec <SetButtonEvents+0x194>
 8008b9a:	e012      	b.n	8008bc2 <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8008b9c:	00fa      	lsls	r2, r7, #3
 8008b9e:	19d2      	adds	r2, r2, r7
 8008ba0:	4b59      	ldr	r3, [pc, #356]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008ba2:	189b      	adds	r3, r3, r2
 8008ba4:	7a1a      	ldrb	r2, [r3, #8]
 8008ba6:	2104      	movs	r1, #4
 8008ba8:	438a      	bics	r2, r1
 8008baa:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008bac:	4643      	mov	r3, r8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e7      	bne.n	8008b82 <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 8008bb2:	00fa      	lsls	r2, r7, #3
 8008bb4:	19d2      	adds	r2, r2, r7
 8008bb6:	4b54      	ldr	r3, [pc, #336]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008bb8:	189b      	adds	r3, r3, r2
 8008bba:	7a1a      	ldrb	r2, [r3, #8]
 8008bbc:	2108      	movs	r1, #8
 8008bbe:	438a      	bics	r2, r1
 8008bc0:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008bc2:	2d00      	cmp	r5, #0
 8008bc4:	d017      	beq.n	8008bf6 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008bc6:	00fa      	lsls	r2, r7, #3
 8008bc8:	19d2      	adds	r2, r2, r7
 8008bca:	4b4f      	ldr	r3, [pc, #316]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008bcc:	189b      	adds	r3, r3, r2
 8008bce:	7a1a      	ldrb	r2, [r3, #8]
 8008bd0:	2110      	movs	r1, #16
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008bd6:	2801      	cmp	r0, #1
 8008bd8:	d000      	beq.n	8008bdc <SetButtonEvents+0x184>
 8008bda:	e78e      	b.n	8008afa <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008bdc:	00fa      	lsls	r2, r7, #3
 8008bde:	19d2      	adds	r2, r2, r7
 8008be0:	4b49      	ldr	r3, [pc, #292]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008be2:	189b      	adds	r3, r3, r2
 8008be4:	7a1a      	ldrb	r2, [r3, #8]
 8008be6:	2120      	movs	r1, #32
 8008be8:	430a      	orrs	r2, r1
 8008bea:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008bec:	2801      	cmp	r0, #1
 8008bee:	d018      	beq.n	8008c22 <SetButtonEvents+0x1ca>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d12a      	bne.n	8008c4a <SetButtonEvents+0x1f2>
 8008bf4:	e012      	b.n	8008c1c <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8008bf6:	00fa      	lsls	r2, r7, #3
 8008bf8:	19d2      	adds	r2, r2, r7
 8008bfa:	4b43      	ldr	r3, [pc, #268]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008bfc:	189b      	adds	r3, r3, r2
 8008bfe:	7a1a      	ldrb	r2, [r3, #8]
 8008c00:	2110      	movs	r1, #16
 8008c02:	438a      	bics	r2, r1
 8008c04:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008c06:	465b      	mov	r3, fp
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e7      	bne.n	8008bdc <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 8008c0c:	00fa      	lsls	r2, r7, #3
 8008c0e:	19d2      	adds	r2, r2, r7
 8008c10:	4b3d      	ldr	r3, [pc, #244]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008c12:	189b      	adds	r3, r3, r2
 8008c14:	7a1a      	ldrb	r2, [r3, #8]
 8008c16:	2120      	movs	r1, #32
 8008c18:	438a      	bics	r2, r1
 8008c1a:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008c1c:	4653      	mov	r3, sl
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d05d      	beq.n	8008cde <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008c22:	00fa      	lsls	r2, r7, #3
 8008c24:	19d2      	adds	r2, r2, r7
 8008c26:	4b38      	ldr	r3, [pc, #224]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008c28:	189b      	adds	r3, r3, r2
 8008c2a:	7a1a      	ldrb	r2, [r3, #8]
 8008c2c:	2140      	movs	r1, #64	; 0x40
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008c32:	2801      	cmp	r0, #1
 8008c34:	d000      	beq.n	8008c38 <SetButtonEvents+0x1e0>
 8008c36:	e764      	b.n	8008b02 <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 8008c38:	00fa      	lsls	r2, r7, #3
 8008c3a:	19d2      	adds	r2, r2, r7
 8008c3c:	4b32      	ldr	r3, [pc, #200]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008c3e:	189b      	adds	r3, r3, r2
 8008c40:	7a19      	ldrb	r1, [r3, #8]
 8008c42:	2280      	movs	r2, #128	; 0x80
 8008c44:	4252      	negs	r2, r2
 8008c46:	430a      	orrs	r2, r1
 8008c48:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008c4a:	003c      	movs	r4, r7
 8008c4c:	343a      	adds	r4, #58	; 0x3a
 8008c4e:	00a4      	lsls	r4, r4, #2
 8008c50:	ab02      	add	r3, sp, #8
 8008c52:	1d99      	adds	r1, r3, #6
 8008c54:	0020      	movs	r0, r4
 8008c56:	f7fe fea9 	bl	80079ac <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d000      	beq.n	8008c60 <SetButtonEvents+0x208>
 8008c5e:	e770      	b.n	8008b42 <SetButtonEvents+0xea>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 8008c60:	ab02      	add	r3, sp, #8
 8008c62:	3306      	adds	r3, #6
 8008c64:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 8008c66:	00fa      	lsls	r2, r7, #3
 8008c68:	19d2      	adds	r2, r2, r7
 8008c6a:	4f27      	ldr	r7, [pc, #156]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008c6c:	18bf      	adds	r7, r7, r2
 8008c6e:	7a3a      	ldrb	r2, [r7, #8]
 8008c70:	b2d9      	uxtb	r1, r3
 8008c72:	4291      	cmp	r1, r2
 8008c74:	d000      	beq.n	8008c78 <SetButtonEvents+0x220>
 8008c76:	e748      	b.n	8008b0a <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 8008c78:	1c63      	adds	r3, r4, #1
 8008c7a:	aa02      	add	r2, sp, #8
 8008c7c:	1d97      	adds	r7, r2, #6
 8008c7e:	0039      	movs	r1, r7
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	0018      	movs	r0, r3
 8008c84:	f7fe fe92 	bl	80079ac <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 8008c88:	0236      	lsls	r6, r6, #8
 8008c8a:	883a      	ldrh	r2, [r7, #0]
 8008c8c:	465b      	mov	r3, fp
 8008c8e:	4333      	orrs	r3, r6
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d000      	beq.n	8008c96 <SetButtonEvents+0x23e>
 8008c94:	e742      	b.n	8008b1c <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 8008c96:	1ca6      	adds	r6, r4, #2
 8008c98:	ab02      	add	r3, sp, #8
 8008c9a:	1d9f      	adds	r7, r3, #6
 8008c9c:	0039      	movs	r1, r7
 8008c9e:	0030      	movs	r0, r6
 8008ca0:	f7fe fe84 	bl	80079ac <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8008ca4:	4643      	mov	r3, r8
 8008ca6:	0219      	lsls	r1, r3, #8
 8008ca8:	883a      	ldrh	r2, [r7, #0]
 8008caa:	4653      	mov	r3, sl
 8008cac:	430b      	orrs	r3, r1
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d000      	beq.n	8008cb4 <SetButtonEvents+0x25c>
 8008cb2:	e738      	b.n	8008b26 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008cb4:	3403      	adds	r4, #3
 8008cb6:	ab02      	add	r3, sp, #8
 8008cb8:	1d9e      	adds	r6, r3, #6
 8008cba:	0031      	movs	r1, r6
 8008cbc:	0020      	movs	r0, r4
 8008cbe:	f7fe fe75 	bl	80079ac <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008cc2:	022d      	lsls	r5, r5, #8
 8008cc4:	8832      	ldrh	r2, [r6, #0]
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	432b      	orrs	r3, r5
	return result;
 8008cca:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d100      	bne.n	8008cd2 <SetButtonEvents+0x27a>
 8008cd0:	e730      	b.n	8008b34 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 8008cd2:	0019      	movs	r1, r3
 8008cd4:	0020      	movs	r0, r4
 8008cd6:	f7fe fe99 	bl	8007a0c <EE_WriteVariable>
	return result;
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e72a      	b.n	8008b34 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008cde:	00fa      	lsls	r2, r7, #3
 8008ce0:	19d2      	adds	r2, r2, r7
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008ce4:	189b      	adds	r3, r3, r2
 8008ce6:	7a1a      	ldrb	r2, [r3, #8]
 8008ce8:	2140      	movs	r1, #64	; 0x40
 8008cea:	438a      	bics	r2, r1
 8008cec:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008cee:	464b      	mov	r3, r9
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1a1      	bne.n	8008c38 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008cf4:	00fa      	lsls	r2, r7, #3
 8008cf6:	19d2      	adds	r2, r2, r7
 8008cf8:	4b03      	ldr	r3, [pc, #12]	; (8008d08 <SetButtonEvents+0x2b0>)
 8008cfa:	189b      	adds	r3, r3, r2
 8008cfc:	7a19      	ldrb	r1, [r3, #8]
 8008cfe:	227f      	movs	r2, #127	; 0x7f
 8008d00:	400a      	ands	r2, r1
 8008d02:	721a      	strb	r2, [r3, #8]
 8008d04:	e7a1      	b.n	8008c4a <SetButtonEvents+0x1f2>
 8008d06:	46c0      	nop			; (mov r8, r8)
 8008d08:	20001574 	.word	0x20001574

08008d0c <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 8008d0c:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8008d0e:	f007 fc49 	bl	80105a4 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8008d12:	b2c4      	uxtb	r4, r0
 8008d14:	0020      	movs	r0, r4
 8008d16:	f7fe fd03 	bl	8007720 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8008d1a:	0020      	movs	r0, r4
 8008d1c:	f7fe fd2e 	bl	800777c <SwitchStreamDMAToMsg>
}
 8008d20:	bd10      	pop	{r4, pc}
	...

08008d24 <SetupDMAStreams>:
{
 8008d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d26:	b085      	sub	sp, #20
 8008d28:	000d      	movs	r5, r1
 8008d2a:	0014      	movs	r4, r2
 8008d2c:	220f      	movs	r2, #15
 8008d2e:	446a      	add	r2, sp
 8008d30:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8008d32:	aa0a      	add	r2, sp, #40	; 0x28
 8008d34:	7812      	ldrb	r2, [r2, #0]
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d058      	beq.n	8008dec <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d100      	bne.n	8008d40 <SetupDMAStreams+0x1c>
 8008d3e:	e0be      	b.n	8008ebe <SetupDMAStreams+0x19a>
 8008d40:	2a00      	cmp	r2, #0
 8008d42:	d100      	bne.n	8008d46 <SetupDMAStreams+0x22>
 8008d44:	e0bf      	b.n	8008ec6 <SetupDMAStreams+0x1a2>
	if (direction == FORWARD) 
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d055      	beq.n	8008df6 <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 8008d4a:	2801      	cmp	r0, #1
 8008d4c:	d100      	bne.n	8008d50 <SetupDMAStreams+0x2c>
 8008d4e:	e08b      	b.n	8008e68 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 8008d50:	2267      	movs	r2, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 8008d52:	2802      	cmp	r0, #2
 8008d54:	d000      	beq.n	8008d58 <SetupDMAStreams+0x34>
 8008d56:	e0b3      	b.n	8008ec0 <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f005 f8b1 	bl	800dec0 <GetUart>
 8008d5e:	0006      	movs	r6, r0
 8008d60:	ab0a      	add	r3, sp, #40	; 0x28
 8008d62:	7818      	ldrb	r0, [r3, #0]
 8008d64:	f005 f8ac 	bl	800dec0 <GetUart>
 8008d68:	0001      	movs	r1, r0
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	0030      	movs	r0, r6
 8008d6e:	f7fe fd37 	bl	80077e0 <StartDMAstream>
 8008d72:	0002      	movs	r2, r0
 8008d74:	2817      	cmp	r0, #23
 8008d76:	d100      	bne.n	8008d7a <SetupDMAStreams+0x56>
 8008d78:	e0a2      	b.n	8008ec0 <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008d7a:	0160      	lsls	r0, r4, #5
 8008d7c:	1b00      	subs	r0, r0, r4
 8008d7e:	0080      	lsls	r0, r0, #2
 8008d80:	1900      	adds	r0, r0, r4
 8008d82:	00c0      	lsls	r0, r0, #3
 8008d84:	21fa      	movs	r1, #250	; 0xfa
 8008d86:	0089      	lsls	r1, r1, #2
 8008d88:	f7f7 f9e2 	bl	8000150 <__udivsi3>
 8008d8c:	0004      	movs	r4, r0
 8008d8e:	260f      	movs	r6, #15
 8008d90:	446e      	add	r6, sp
 8008d92:	4b4e      	ldr	r3, [pc, #312]	; (8008ecc <SetupDMAStreams+0x1a8>)
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	0033      	movs	r3, r6
 8008d98:	2200      	movs	r2, #0
 8008d9a:	0001      	movs	r1, r0
 8008d9c:	484c      	ldr	r0, [pc, #304]	; (8008ed0 <SetupDMAStreams+0x1ac>)
 8008d9e:	f007 faa5 	bl	80102ec <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 8008da2:	7833      	ldrb	r3, [r6, #0]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4a4a      	ldr	r2, [pc, #296]	; (8008ed4 <SetupDMAStreams+0x1b0>)
 8008daa:	509d      	str	r5, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008dac:	ab0a      	add	r3, sp, #40	; 0x28
 8008dae:	7818      	ldrb	r0, [r3, #0]
 8008db0:	f005 f886 	bl	800dec0 <GetUart>
 8008db4:	0007      	movs	r7, r0
 8008db6:	7830      	ldrb	r0, [r6, #0]
 8008db8:	f005 f882 	bl	800dec0 <GetUart>
 8008dbc:	0001      	movs	r1, r0
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	0038      	movs	r0, r7
 8008dc2:	f7fe fd0d 	bl	80077e0 <StartDMAstream>
 8008dc6:	0002      	movs	r2, r0
 8008dc8:	2817      	cmp	r0, #23
 8008dca:	d079      	beq.n	8008ec0 <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008dcc:	4b3f      	ldr	r3, [pc, #252]	; (8008ecc <SetupDMAStreams+0x1a8>)
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	ab0a      	add	r3, sp, #40	; 0x28
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	0021      	movs	r1, r4
 8008dd6:	483e      	ldr	r0, [pc, #248]	; (8008ed0 <SetupDMAStreams+0x1ac>)
 8008dd8:	f007 fa88 	bl	80102ec <xTimerCreate>
 8008ddc:	0004      	movs	r4, r0
		dmaStreamTotal[dst-1] = count;
 8008dde:	ab0a      	add	r3, sp, #40	; 0x28
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4a3b      	ldr	r2, [pc, #236]	; (8008ed4 <SetupDMAStreams+0x1b0>)
 8008de8:	509d      	str	r5, [r3, r2]
 8008dea:	e02d      	b.n	8008e48 <SetupDMAStreams+0x124>
		portStatus[src] = STREAM;
 8008dec:	4a3a      	ldr	r2, [pc, #232]	; (8008ed8 <SetupDMAStreams+0x1b4>)
 8008dee:	2102      	movs	r1, #2
 8008df0:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8008df2:	2267      	movs	r2, #103	; 0x67
 8008df4:	e064      	b.n	8008ec0 <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008df6:	0018      	movs	r0, r3
 8008df8:	f005 f862 	bl	800dec0 <GetUart>
 8008dfc:	0006      	movs	r6, r0
 8008dfe:	ab0a      	add	r3, sp, #40	; 0x28
 8008e00:	7818      	ldrb	r0, [r3, #0]
 8008e02:	f005 f85d 	bl	800dec0 <GetUart>
 8008e06:	0001      	movs	r1, r0
 8008e08:	2201      	movs	r2, #1
 8008e0a:	0030      	movs	r0, r6
 8008e0c:	f7fe fce8 	bl	80077e0 <StartDMAstream>
 8008e10:	0002      	movs	r2, r0
 8008e12:	2817      	cmp	r0, #23
 8008e14:	d054      	beq.n	8008ec0 <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008e16:	260f      	movs	r6, #15
 8008e18:	446e      	add	r6, sp
 8008e1a:	0160      	lsls	r0, r4, #5
 8008e1c:	1b00      	subs	r0, r0, r4
 8008e1e:	0080      	lsls	r0, r0, #2
 8008e20:	1900      	adds	r0, r0, r4
 8008e22:	00c0      	lsls	r0, r0, #3
 8008e24:	21fa      	movs	r1, #250	; 0xfa
 8008e26:	0089      	lsls	r1, r1, #2
 8008e28:	f7f7 f992 	bl	8000150 <__udivsi3>
 8008e2c:	0001      	movs	r1, r0
 8008e2e:	4b27      	ldr	r3, [pc, #156]	; (8008ecc <SetupDMAStreams+0x1a8>)
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	0033      	movs	r3, r6
 8008e34:	2200      	movs	r2, #0
 8008e36:	4826      	ldr	r0, [pc, #152]	; (8008ed0 <SetupDMAStreams+0x1ac>)
 8008e38:	f007 fa58 	bl	80102ec <xTimerCreate>
 8008e3c:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 8008e3e:	7833      	ldrb	r3, [r6, #0]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4a23      	ldr	r2, [pc, #140]	; (8008ed4 <SetupDMAStreams+0x1b0>)
 8008e46:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8008e48:	2200      	movs	r2, #0
	if (xTimerStream != NULL)
 8008e4a:	2c00      	cmp	r4, #0
 8008e4c:	d038      	beq.n	8008ec0 <SetupDMAStreams+0x19c>
		xTimerStart( xTimerStream, portMAX_DELAY );
 8008e4e:	f006 fce5 	bl	800f81c <xTaskGetTickCount>
 8008e52:	0002      	movs	r2, r0
 8008e54:	2301      	movs	r3, #1
 8008e56:	425b      	negs	r3, r3
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	0020      	movs	r0, r4
 8008e60:	f007 fa64 	bl	801032c <xTimerGenericCommand>
	return BOS_OK;
 8008e64:	2200      	movs	r2, #0
 8008e66:	e02b      	b.n	8008ec0 <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008e68:	0010      	movs	r0, r2
 8008e6a:	f005 f829 	bl	800dec0 <GetUart>
 8008e6e:	0006      	movs	r6, r0
 8008e70:	230f      	movs	r3, #15
 8008e72:	446b      	add	r3, sp
 8008e74:	7818      	ldrb	r0, [r3, #0]
 8008e76:	f005 f823 	bl	800dec0 <GetUart>
 8008e7a:	0001      	movs	r1, r0
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	0030      	movs	r0, r6
 8008e80:	f7fe fcae 	bl	80077e0 <StartDMAstream>
 8008e84:	0002      	movs	r2, r0
 8008e86:	2817      	cmp	r0, #23
 8008e88:	d01a      	beq.n	8008ec0 <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008e8a:	0160      	lsls	r0, r4, #5
 8008e8c:	1b00      	subs	r0, r0, r4
 8008e8e:	0080      	lsls	r0, r0, #2
 8008e90:	1900      	adds	r0, r0, r4
 8008e92:	00c0      	lsls	r0, r0, #3
 8008e94:	21fa      	movs	r1, #250	; 0xfa
 8008e96:	0089      	lsls	r1, r1, #2
 8008e98:	f7f7 f95a 	bl	8000150 <__udivsi3>
 8008e9c:	0001      	movs	r1, r0
 8008e9e:	4b0b      	ldr	r3, [pc, #44]	; (8008ecc <SetupDMAStreams+0x1a8>)
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	ab0a      	add	r3, sp, #40	; 0x28
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	480a      	ldr	r0, [pc, #40]	; (8008ed0 <SetupDMAStreams+0x1ac>)
 8008ea8:	f007 fa20 	bl	80102ec <xTimerCreate>
 8008eac:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 8008eae:	230f      	movs	r3, #15
 8008eb0:	446b      	add	r3, sp
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4a06      	ldr	r2, [pc, #24]	; (8008ed4 <SetupDMAStreams+0x1b0>)
 8008eba:	509d      	str	r5, [r3, r2]
 8008ebc:	e7c4      	b.n	8008e48 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 8008ebe:	2267      	movs	r2, #103	; 0x67
}
 8008ec0:	0010      	movs	r0, r2
 8008ec2:	b005      	add	sp, #20
 8008ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8008ec6:	2267      	movs	r2, #103	; 0x67
 8008ec8:	e7fa      	b.n	8008ec0 <SetupDMAStreams+0x19c>
 8008eca:	46c0      	nop			; (mov r8, r8)
 8008ecc:	08008d0d 	.word	0x08008d0d
 8008ed0:	0801b38c 	.word	0x0801b38c
 8008ed4:	2000152c 	.word	0x2000152c
 8008ed8:	20001168 	.word	0x20001168

08008edc <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 8008edc:	b510      	push	{r4, lr}
	switch (port)
 8008ede:	2806      	cmp	r0, #6
 8008ee0:	d80a      	bhi.n	8008ef8 <NotifyMessagingTask+0x1c>
 8008ee2:	0080      	lsls	r0, r0, #2
 8008ee4:	4b19      	ldr	r3, [pc, #100]	; (8008f4c <NotifyMessagingTask+0x70>)
 8008ee6:	581b      	ldr	r3, [r3, r0]
 8008ee8:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 8008eea:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <NotifyMessagingTask+0x74>)
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	f007 f92a 	bl	801014c <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8008ef8:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8008efa:	4b16      	ldr	r3, [pc, #88]	; (8008f54 <NotifyMessagingTask+0x78>)
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	2300      	movs	r3, #0
 8008f00:	2202      	movs	r2, #2
 8008f02:	2100      	movs	r1, #0
 8008f04:	f007 f922 	bl	801014c <xTaskGenericNotify>
 8008f08:	e7f6      	b.n	8008ef8 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8008f0a:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <NotifyMessagingTask+0x7c>)
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	2202      	movs	r2, #2
 8008f12:	2100      	movs	r1, #0
 8008f14:	f007 f91a 	bl	801014c <xTaskGenericNotify>
 8008f18:	e7ee      	b.n	8008ef8 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8008f1a:	4b10      	ldr	r3, [pc, #64]	; (8008f5c <NotifyMessagingTask+0x80>)
 8008f1c:	6818      	ldr	r0, [r3, #0]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	2202      	movs	r2, #2
 8008f22:	2100      	movs	r1, #0
 8008f24:	f007 f912 	bl	801014c <xTaskGenericNotify>
 8008f28:	e7e6      	b.n	8008ef8 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 8008f2a:	4b0d      	ldr	r3, [pc, #52]	; (8008f60 <NotifyMessagingTask+0x84>)
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	2202      	movs	r2, #2
 8008f32:	2100      	movs	r1, #0
 8008f34:	f007 f90a 	bl	801014c <xTaskGenericNotify>
 8008f38:	e7de      	b.n	8008ef8 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle);	break;
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <NotifyMessagingTask+0x88>)
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	2202      	movs	r2, #2
 8008f42:	2100      	movs	r1, #0
 8008f44:	f007 f902 	bl	801014c <xTaskGenericNotify>
}
 8008f48:	e7d6      	b.n	8008ef8 <NotifyMessagingTask+0x1c>
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	0801b370 	.word	0x0801b370
 8008f50:	2000154c 	.word	0x2000154c
 8008f54:	20001550 	.word	0x20001550
 8008f58:	20001554 	.word	0x20001554
 8008f5c:	20001558 	.word	0x20001558
 8008f60:	2000155c 	.word	0x2000155c
 8008f64:	20001560 	.word	0x20001560

08008f68 <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 8008f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f6a:	46de      	mov	lr, fp
 8008f6c:	4657      	mov	r7, sl
 8008f6e:	464e      	mov	r6, r9
 8008f70:	4645      	mov	r5, r8
 8008f72:	b5e0      	push	{r5, r6, r7, lr}
 8008f74:	b085      	sub	sp, #20
 8008f76:	4680      	mov	r8, r0
 8008f78:	468b      	mov	fp, r1
 8008f7a:	0014      	movs	r4, r2
 8008f7c:	469a      	mov	sl, r3
 8008f7e:	ab0e      	add	r3, sp, #56	; 0x38
 8008f80:	881d      	ldrh	r5, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 8008f82:	0003      	movs	r3, r0
 8008f84:	4313      	orrs	r3, r2
 8008f86:	d100      	bne.n	8008f8a <SendMessageFromPort+0x22>
 8008f88:	e170      	b.n	800926c <SendMessageFromPort+0x304>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d147      	bne.n	800901e <SendMessageFromPort+0xb6>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8008f8e:	1c93      	adds	r3, r2, #2
 8008f90:	b2db      	uxtb	r3, r3
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
		return BOS_ERR_WrongParam; 
 8008f92:	2067      	movs	r0, #103	; 0x67
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d900      	bls.n	8008f9a <SendMessageFromPort+0x32>
 8008f98:	e149      	b.n	800922e <SendMessageFromPort+0x2c6>
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	f006 fba6 	bl	800f6ec <uxTaskPriorityGet>
 8008fa0:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8008fa2:	2105      	movs	r1, #5
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	f006 fbb1 	bl	800f70c <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 8008faa:	4bbe      	ldr	r3, [pc, #760]	; (80092a4 <SendMessageFromPort+0x33c>)
 8008fac:	2248      	movs	r2, #72	; 0x48
 8008fae:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8008fb0:	3212      	adds	r2, #18
 8008fb2:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008fb4:	465b      	mov	r3, fp
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d000      	beq.n	8008fbc <SendMessageFromPort+0x54>
 8008fba:	e16d      	b.n	8009298 <SendMessageFromPort+0x330>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 8008fbc:	3d01      	subs	r5, #1
 8008fbe:	4bba      	ldr	r3, [pc, #744]	; (80092a8 <SendMessageFromPort+0x340>)
 8008fc0:	5d5f      	ldrb	r7, [r3, r5]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8008fc2:	4eba      	ldr	r6, [pc, #744]	; (80092ac <SendMessageFromPort+0x344>)
 8008fc4:	00e9      	lsls	r1, r5, #3
 8008fc6:	1b49      	subs	r1, r1, r5
 8008fc8:	00c9      	lsls	r1, r1, #3
 8008fca:	4db9      	ldr	r5, [pc, #740]	; (80092b0 <SendMessageFromPort+0x348>)
 8008fcc:	1949      	adds	r1, r1, r5
 8008fce:	003a      	movs	r2, r7
 8008fd0:	0030      	movs	r0, r6
 8008fd2:	f00b f98c 	bl	80142ee <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 8008fd6:	3e03      	subs	r6, #3
 8008fd8:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 8008fda:	1cfd      	adds	r5, r7, #3
 8008fdc:	002a      	movs	r2, r5
 8008fde:	0031      	movs	r1, r6
 8008fe0:	48b4      	ldr	r0, [pc, #720]	; (80092b4 <SendMessageFromPort+0x34c>)
 8008fe2:	f00b f984 	bl	80142ee <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8008fe6:	b2bf      	uxth	r7, r7
 8008fe8:	1cf9      	adds	r1, r7, #3
 8008fea:	48b2      	ldr	r0, [pc, #712]	; (80092b4 <SendMessageFromPort+0x34c>)
 8008fec:	f004 f8b2 	bl	800d154 <CalculateCRC8>
 8008ff0:	5570      	strb	r0, [r6, r5]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 8008ff2:	2238      	movs	r2, #56	; 0x38
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	48af      	ldr	r0, [pc, #700]	; (80092b4 <SendMessageFromPort+0x34c>)
 8008ff8:	f00b f982 	bl	8014300 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8008ffc:	3402      	adds	r4, #2
 8008ffe:	b2e4      	uxtb	r4, r4
 8009000:	2c01      	cmp	r4, #1
 8009002:	d900      	bls.n	8009006 <SendMessageFromPort+0x9e>
 8009004:	e104      	b.n	8009210 <SendMessageFromPort+0x2a8>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 8009006:	4653      	mov	r3, sl
 8009008:	2b00      	cmp	r3, #0
 800900a:	d000      	beq.n	800900e <SendMessageFromPort+0xa6>
 800900c:	e0f5      	b.n	80091fa <SendMessageFromPort+0x292>
 800900e:	465b      	mov	r3, fp
 8009010:	2b00      	cmp	r3, #0
 8009012:	d000      	beq.n	8009016 <SendMessageFromPort+0xae>
 8009014:	e0f1      	b.n	80091fa <SendMessageFromPort+0x292>
			src = message[4];
 8009016:	4ba3      	ldr	r3, [pc, #652]	; (80092a4 <SendMessageFromPort+0x33c>)
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	469b      	mov	fp, r3
 800901c:	e0ed      	b.n	80091fa <SendMessageFromPort+0x292>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 800901e:	2900      	cmp	r1, #0
 8009020:	d002      	beq.n	8009028 <SendMessageFromPort+0xc0>
 8009022:	2a00      	cmp	r2, #0
 8009024:	d100      	bne.n	8009028 <SendMessageFromPort+0xc0>
 8009026:	e123      	b.n	8009270 <SendMessageFromPort+0x308>
	TaskPriority = uxTaskPriorityGet( NULL );
 8009028:	2000      	movs	r0, #0
 800902a:	f006 fb5f 	bl	800f6ec <uxTaskPriorityGet>
 800902e:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8009030:	2105      	movs	r1, #5
 8009032:	2000      	movs	r0, #0
 8009034:	f006 fb6a 	bl	800f70c <vTaskPrioritySet>
	message[0] = 'H';						
 8009038:	4b9a      	ldr	r3, [pc, #616]	; (80092a4 <SendMessageFromPort+0x33c>)
 800903a:	2248      	movs	r2, #72	; 0x48
 800903c:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 800903e:	3212      	adds	r2, #18
 8009040:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009042:	4653      	mov	r3, sl
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0b9      	beq.n	8008fbc <SendMessageFromPort+0x54>
		if (src == 0)		src = myID;
 8009048:	465b      	mov	r3, fp
 800904a:	2b00      	cmp	r3, #0
 800904c:	d102      	bne.n	8009054 <SendMessageFromPort+0xec>
 800904e:	4b9a      	ldr	r3, [pc, #616]	; (80092b8 <SendMessageFromPort+0x350>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	469b      	mov	fp, r3
		message[2] = length;	
 8009054:	4993      	ldr	r1, [pc, #588]	; (80092a4 <SendMessageFromPort+0x33c>)
 8009056:	2300      	movs	r3, #0
 8009058:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 800905a:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 800905c:	465b      	mov	r3, fp
 800905e:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8009060:	4a96      	ldr	r2, [pc, #600]	; (80092bc <SendMessageFromPort+0x354>)
 8009062:	79d3      	ldrb	r3, [r2, #7]
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	7992      	ldrb	r2, [r2, #6]
 8009068:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 800906a:	22ff      	movs	r2, #255	; 0xff
 800906c:	4552      	cmp	r2, sl
 800906e:	4192      	sbcs	r2, r2
 8009070:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8009072:	0052      	lsls	r2, r2, #1
 8009074:	4313      	orrs	r3, r2
 8009076:	b2db      	uxtb	r3, r3
 8009078:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 800907a:	4652      	mov	r2, sl
 800907c:	718a      	strb	r2, [r1, #6]
 800907e:	2200      	movs	r2, #0
 8009080:	4691      	mov	r9, r2
		if (extendCode == true) {
 8009082:	4652      	mov	r2, sl
 8009084:	2aff      	cmp	r2, #255	; 0xff
 8009086:	d903      	bls.n	8009090 <SendMessageFromPort+0x128>
			message[6+shift] = (uint8_t) (code >> 8);		
 8009088:	0a12      	lsrs	r2, r2, #8
 800908a:	71ca      	strb	r2, [r1, #7]
			++shift;
 800908c:	2201      	movs	r2, #1
 800908e:	4691      	mov	r9, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 8009090:	2d2e      	cmp	r5, #46	; 0x2e
 8009092:	d92f      	bls.n	80090f4 <SendMessageFromPort+0x18c>
			message[5] |= 0x80;		
 8009094:	2280      	movs	r2, #128	; 0x80
 8009096:	4252      	negs	r2, r2
 8009098:	4313      	orrs	r3, r2
 800909a:	4a82      	ldr	r2, [pc, #520]	; (80092a4 <SendMessageFromPort+0x33c>)
 800909c:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 800909e:	4b88      	ldr	r3, [pc, #544]	; (80092c0 <SendMessageFromPort+0x358>)
 80090a0:	801d      	strh	r5, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
 80090a2:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80090a4:	252e      	movs	r5, #46	; 0x2e
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80090a6:	464b      	mov	r3, r9
 80090a8:	3307      	adds	r3, #7
 80090aa:	4694      	mov	ip, r2
 80090ac:	4463      	add	r3, ip
 80090ae:	9303      	str	r3, [sp, #12]
			while (totalNumberOfParams != 0)
 80090b0:	4b83      	ldr	r3, [pc, #524]	; (80092c0 <SendMessageFromPort+0x358>)
 80090b2:	881f      	ldrh	r7, [r3, #0]
 80090b4:	2f00      	cmp	r7, #0
 80090b6:	d02b      	beq.n	8009110 <SendMessageFromPort+0x1a8>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 80090b8:	0029      	movs	r1, r5
 80090ba:	0038      	movs	r0, r7
 80090bc:	f7f7 f848 	bl	8000150 <__udivsi3>
 80090c0:	b280      	uxth	r0, r0
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d140      	bne.n	8009148 <SendMessageFromPort+0x1e0>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 80090c6:	4b77      	ldr	r3, [pc, #476]	; (80092a4 <SendMessageFromPort+0x33c>)
 80090c8:	795a      	ldrb	r2, [r3, #5]
 80090ca:	237f      	movs	r3, #127	; 0x7f
 80090cc:	4013      	ands	r3, r2
 80090ce:	4a75      	ldr	r2, [pc, #468]	; (80092a4 <SendMessageFromPort+0x33c>)
 80090d0:	7153      	strb	r3, [r2, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80090d2:	4d7c      	ldr	r5, [pc, #496]	; (80092c4 <SendMessageFromPort+0x35c>)
 80090d4:	8829      	ldrh	r1, [r5, #0]
 80090d6:	4b7c      	ldr	r3, [pc, #496]	; (80092c8 <SendMessageFromPort+0x360>)
 80090d8:	18c9      	adds	r1, r1, r3
 80090da:	003a      	movs	r2, r7
 80090dc:	9803      	ldr	r0, [sp, #12]
 80090de:	f00b f906 	bl	80142ee <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	802b      	strh	r3, [r5, #0]
 80090e6:	4a76      	ldr	r2, [pc, #472]	; (80092c0 <SendMessageFromPort+0x358>)
 80090e8:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 80090ea:	1d3e      	adds	r6, r7, #4
 80090ec:	444e      	add	r6, r9
 80090ee:	b2f6      	uxtb	r6, r6
					numberOfParams = totalNumberOfParams;
 80090f0:	003d      	movs	r5, r7
 80090f2:	e7dd      	b.n	80090b0 <SendMessageFromPort+0x148>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80090f4:	464b      	mov	r3, r9
 80090f6:	3307      	adds	r3, #7
 80090f8:	486a      	ldr	r0, [pc, #424]	; (80092a4 <SendMessageFromPort+0x33c>)
 80090fa:	1818      	adds	r0, r3, r0
 80090fc:	4b71      	ldr	r3, [pc, #452]	; (80092c4 <SendMessageFromPort+0x35c>)
 80090fe:	8819      	ldrh	r1, [r3, #0]
 8009100:	4b71      	ldr	r3, [pc, #452]	; (80092c8 <SendMessageFromPort+0x360>)
 8009102:	18c9      	adds	r1, r1, r3
 8009104:	002a      	movs	r2, r5
 8009106:	f00b f8f2 	bl	80142ee <memcpy>
			length = numberOfParams + shift + 4;
 800910a:	1d2e      	adds	r6, r5, #4
 800910c:	444e      	add	r6, r9
 800910e:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true)
 8009110:	4b6e      	ldr	r3, [pc, #440]	; (80092cc <SendMessageFromPort+0x364>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d057      	beq.n	80091c8 <SendMessageFromPort+0x260>
			if (dstGroupID < BOS_BROADCAST)
 8009118:	4b6d      	ldr	r3, [pc, #436]	; (80092d0 <SendMessageFromPort+0x368>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2bff      	cmp	r3, #255	; 0xff
 800911e:	d100      	bne.n	8009122 <SendMessageFromPort+0x1ba>
 8009120:	e0aa      	b.n	8009278 <SendMessageFromPort+0x310>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8009122:	4a6c      	ldr	r2, [pc, #432]	; (80092d4 <SendMessageFromPort+0x36c>)
 8009124:	7812      	ldrb	r2, [r2, #0]
 8009126:	4694      	mov	ip, r2
 8009128:	2a00      	cmp	r2, #0
 800912a:	d06f      	beq.n	800920c <SendMessageFromPort+0x2a4>
 800912c:	2701      	movs	r7, #1
 800912e:	409f      	lsls	r7, r3
 8009130:	4869      	ldr	r0, [pc, #420]	; (80092d8 <SendMessageFromPort+0x370>)
 8009132:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 8009134:	2200      	movs	r2, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8009136:	495b      	ldr	r1, [pc, #364]	; (80092a4 <SendMessageFromPort+0x33c>)
 8009138:	468a      	mov	sl, r1
 800913a:	44aa      	add	sl, r5
 800913c:	0021      	movs	r1, r4
 800913e:	4664      	mov	r4, ip
 8009140:	46b4      	mov	ip, r6
 8009142:	464e      	mov	r6, r9
 8009144:	4689      	mov	r9, r1
 8009146:	e017      	b.n	8009178 <SendMessageFromPort+0x210>
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8009148:	9500      	str	r5, [sp, #0]
 800914a:	4653      	mov	r3, sl
 800914c:	0022      	movs	r2, r4
 800914e:	4659      	mov	r1, fp
 8009150:	4640      	mov	r0, r8
 8009152:	f7ff ff09 	bl	8008f68 <SendMessageFromPort>
					osDelay(10);
 8009156:	200a      	movs	r0, #10
 8009158:	f005 fbd9 	bl	800e90e <osDelay>
					totalNumberOfParams -= numberOfParams;
 800915c:	4a58      	ldr	r2, [pc, #352]	; (80092c0 <SendMessageFromPort+0x358>)
 800915e:	8813      	ldrh	r3, [r2, #0]
 8009160:	1b5b      	subs	r3, r3, r5
 8009162:	8013      	strh	r3, [r2, #0]
					ptrShift += numberOfParams;
 8009164:	4a57      	ldr	r2, [pc, #348]	; (80092c4 <SendMessageFromPort+0x35c>)
 8009166:	8813      	ldrh	r3, [r2, #0]
 8009168:	18eb      	adds	r3, r5, r3
 800916a:	8013      	strh	r3, [r2, #0]
 800916c:	e7a0      	b.n	80090b0 <SendMessageFromPort+0x148>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 800916e:	3301      	adds	r3, #1
 8009170:	b29b      	uxth	r3, r3
 8009172:	3002      	adds	r0, #2
 8009174:	42a3      	cmp	r3, r4
 8009176:	d80e      	bhi.n	8009196 <SendMessageFromPort+0x22e>
					if (InGroup(i, dstGroupID))
 8009178:	8801      	ldrh	r1, [r0, #0]
 800917a:	420f      	tst	r7, r1
 800917c:	d0f7      	beq.n	800916e <SendMessageFromPort+0x206>
						++groupMembers;							// Add this member
 800917e:	3201      	adds	r2, #1
 8009180:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 8009182:	18a9      	adds	r1, r5, r2
 8009184:	3101      	adds	r1, #1
 8009186:	292d      	cmp	r1, #45	; 0x2d
 8009188:	dd00      	ble.n	800918c <SendMessageFromPort+0x224>
 800918a:	e073      	b.n	8009274 <SendMessageFromPort+0x30c>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 800918c:	4651      	mov	r1, sl
 800918e:	1889      	adds	r1, r1, r2
 8009190:	1989      	adds	r1, r1, r6
 8009192:	718b      	strb	r3, [r1, #6]
 8009194:	e7eb      	b.n	800916e <SendMessageFromPort+0x206>
 8009196:	464c      	mov	r4, r9
 8009198:	46b1      	mov	r9, r6
 800919a:	4666      	mov	r6, ip
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 800919c:	464b      	mov	r3, r9
 800919e:	3307      	adds	r3, #7
 80091a0:	195b      	adds	r3, r3, r5
 80091a2:	189b      	adds	r3, r3, r2
 80091a4:	493f      	ldr	r1, [pc, #252]	; (80092a4 <SendMessageFromPort+0x33c>)
 80091a6:	54ca      	strb	r2, [r1, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80091a8:	18ad      	adds	r5, r5, r2
 80091aa:	3502      	adds	r5, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80091ac:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80091ae:	2d2d      	cmp	r5, #45	; 0x2d
 80091b0:	dc3d      	bgt.n	800922e <SendMessageFromPort+0x2c6>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 80091b2:	484a      	ldr	r0, [pc, #296]	; (80092dc <SendMessageFromPort+0x374>)
 80091b4:	7801      	ldrb	r1, [r0, #0]
 80091b6:	3101      	adds	r1, #1
 80091b8:	b2c9      	uxtb	r1, r1
 80091ba:	7001      	strb	r1, [r0, #0]
 80091bc:	4839      	ldr	r0, [pc, #228]	; (80092a4 <SendMessageFromPort+0x33c>)
 80091be:	18c3      	adds	r3, r0, r3
 80091c0:	7059      	strb	r1, [r3, #1]
 80091c2:	3602      	adds	r6, #2
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80091c4:	18b6      	adds	r6, r6, r2
 80091c6:	b2f6      	uxtb	r6, r6
	message[2] = length;
 80091c8:	4b36      	ldr	r3, [pc, #216]	; (80092a4 <SendMessageFromPort+0x33c>)
 80091ca:	469a      	mov	sl, r3
 80091cc:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);
 80091ce:	1cf5      	adds	r5, r6, #3
 80091d0:	002a      	movs	r2, r5
 80091d2:	0019      	movs	r1, r3
 80091d4:	4837      	ldr	r0, [pc, #220]	; (80092b4 <SendMessageFromPort+0x34c>)
 80091d6:	f00b f88a 	bl	80142ee <memcpy>
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 80091da:	b2b7      	uxth	r7, r6
 80091dc:	0029      	movs	r1, r5
 80091de:	4835      	ldr	r0, [pc, #212]	; (80092b4 <SendMessageFromPort+0x34c>)
 80091e0:	f003 ffb8 	bl	800d154 <CalculateCRC8>
 80091e4:	4653      	mov	r3, sl
 80091e6:	5558      	strb	r0, [r3, r5]
	memset(crcBuffer, 0, sizeof(crcBuffer));
 80091e8:	2238      	movs	r2, #56	; 0x38
 80091ea:	2100      	movs	r1, #0
 80091ec:	4831      	ldr	r0, [pc, #196]	; (80092b4 <SendMessageFromPort+0x34c>)
 80091ee:	f00b f887 	bl	8014300 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 80091f2:	3402      	adds	r4, #2
 80091f4:	b2e4      	uxtb	r4, r4
 80091f6:	2c01      	cmp	r4, #1
 80091f8:	d80a      	bhi.n	8009210 <SendMessageFromPort+0x2a8>
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 80091fa:	4658      	mov	r0, fp
 80091fc:	f7fa fd24 	bl	8003c48 <FindBroadcastRoutes>
 8009200:	2500      	movs	r5, #0
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8009202:	2401      	movs	r4, #1
		{
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8009204:	4b36      	ldr	r3, [pc, #216]	; (80092e0 <SendMessageFromPort+0x378>)
 8009206:	4698      	mov	r8, r3
 8009208:	4e2b      	ldr	r6, [pc, #172]	; (80092b8 <SendMessageFromPort+0x350>)
 800920a:	e01c      	b.n	8009246 <SendMessageFromPort+0x2de>
			uint8_t groupMembers = 0;
 800920c:	2200      	movs	r2, #0
 800920e:	e7c5      	b.n	800919c <SendMessageFromPort+0x234>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 8009210:	1d3a      	adds	r2, r7, #4
 8009212:	b292      	uxth	r2, r2
 8009214:	2332      	movs	r3, #50	; 0x32
 8009216:	4923      	ldr	r1, [pc, #140]	; (80092a4 <SendMessageFromPort+0x33c>)
 8009218:	4640      	mov	r0, r8
 800921a:	f004 febd 	bl	800df98 <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 800921e:	9902      	ldr	r1, [sp, #8]
 8009220:	2000      	movs	r0, #0
 8009222:	f006 fa73 	bl	800f70c <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 8009226:	4b2f      	ldr	r3, [pc, #188]	; (80092e4 <SendMessageFromPort+0x37c>)
 8009228:	2202      	movs	r2, #2
 800922a:	701a      	strb	r2, [r3, #0]
	
	return result;
 800922c:	2000      	movs	r0, #0
}
 800922e:	b005      	add	sp, #20
 8009230:	bc3c      	pop	{r2, r3, r4, r5}
 8009232:	4690      	mov	r8, r2
 8009234:	4699      	mov	r9, r3
 8009236:	46a2      	mov	sl, r4
 8009238:	46ab      	mov	fp, r5
 800923a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 800923c:	3401      	adds	r4, #1
 800923e:	b2e4      	uxtb	r4, r4
 8009240:	3501      	adds	r5, #1
 8009242:	2c07      	cmp	r4, #7
 8009244:	d0eb      	beq.n	800921e <SendMessageFromPort+0x2b6>
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8009246:	7833      	ldrb	r3, [r6, #0]
 8009248:	3b01      	subs	r3, #1
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	4642      	mov	r2, r8
 800924e:	5a9b      	ldrh	r3, [r3, r2]
 8009250:	412b      	asrs	r3, r5
 8009252:	07db      	lsls	r3, r3, #31
 8009254:	d5f2      	bpl.n	800923c <SendMessageFromPort+0x2d4>
				writePxDMAMutex(p, message, length+4, cmd50ms);
 8009256:	1d3a      	adds	r2, r7, #4
 8009258:	b292      	uxth	r2, r2
 800925a:	2332      	movs	r3, #50	; 0x32
 800925c:	4911      	ldr	r1, [pc, #68]	; (80092a4 <SendMessageFromPort+0x33c>)
 800925e:	0020      	movs	r0, r4
 8009260:	f004 fe9a 	bl	800df98 <writePxDMAMutex>
				Delay_ms(1);
 8009264:	2001      	movs	r0, #1
 8009266:	f007 fb7d 	bl	8010964 <HAL_Delay>
 800926a:	e7e7      	b.n	800923c <SendMessageFromPort+0x2d4>
		return BOS_ERR_WrongParam; 
 800926c:	2067      	movs	r0, #103	; 0x67
 800926e:	e7de      	b.n	800922e <SendMessageFromPort+0x2c6>
 8009270:	2067      	movs	r0, #103	; 0x67
 8009272:	e7dc      	b.n	800922e <SendMessageFromPort+0x2c6>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009274:	2069      	movs	r0, #105	; 0x69
 8009276:	e7da      	b.n	800922e <SendMessageFromPort+0x2c6>
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8009278:	1c6b      	adds	r3, r5, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 800927a:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 800927c:	2b2d      	cmp	r3, #45	; 0x2d
 800927e:	dcd6      	bgt.n	800922e <SendMessageFromPort+0x2c6>
				message[7+shift+numberOfParams] = ++bcastID;
 8009280:	4a16      	ldr	r2, [pc, #88]	; (80092dc <SendMessageFromPort+0x374>)
 8009282:	7813      	ldrb	r3, [r2, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	b2db      	uxtb	r3, r3
 8009288:	7013      	strb	r3, [r2, #0]
 800928a:	4a06      	ldr	r2, [pc, #24]	; (80092a4 <SendMessageFromPort+0x33c>)
 800928c:	1955      	adds	r5, r2, r5
 800928e:	444d      	add	r5, r9
 8009290:	71eb      	strb	r3, [r5, #7]
				length += 1;		// + bcastID
 8009292:	3601      	adds	r6, #1
 8009294:	b2f6      	uxtb	r6, r6
 8009296:	e797      	b.n	80091c8 <SendMessageFromPort+0x260>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009298:	4653      	mov	r3, sl
 800929a:	2b00      	cmp	r3, #0
 800929c:	d100      	bne.n	80092a0 <SendMessageFromPort+0x338>
 800929e:	e68d      	b.n	8008fbc <SendMessageFromPort+0x54>
 80092a0:	e6d8      	b.n	8009054 <SendMessageFromPort+0xec>
 80092a2:	46c0      	nop			; (mov r8, r8)
 80092a4:	20000f70 	.word	0x20000f70
 80092a8:	20000fa8 	.word	0x20000fa8
 80092ac:	20000f73 	.word	0x20000f73
 80092b0:	20000d80 	.word	0x20000d80
 80092b4:	200014c4 	.word	0x200014c4
 80092b8:	200010e4 	.word	0x200010e4
 80092bc:	20006a18 	.word	0x20006a18
 80092c0:	200015fa 	.word	0x200015fa
 80092c4:	200015f8 	.word	0x200015f8
 80092c8:	20000fb0 	.word	0x20000fb0
 80092cc:	20000b04 	.word	0x20000b04
 80092d0:	2000001d 	.word	0x2000001d
 80092d4:	2000001c 	.word	0x2000001c
 80092d8:	20000f38 	.word	0x20000f38
 80092dc:	20000d2e 	.word	0x20000d2e
 80092e0:	20000d30 	.word	0x20000d30
 80092e4:	20001180 	.word	0x20001180

080092e8 <ForwardReceivedMessage>:
{
 80092e8:	b530      	push	{r4, r5, lr}
 80092ea:	b083      	sub	sp, #12
 80092ec:	0005      	movs	r5, r0
	AddBcastPayload = false; 	
 80092ee:	4b0b      	ldr	r3, [pc, #44]	; (800931c <ForwardReceivedMessage+0x34>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 80092f4:	1e42      	subs	r2, r0, #1
 80092f6:	00d3      	lsls	r3, r2, #3
 80092f8:	1a9b      	subs	r3, r3, r2
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	4a08      	ldr	r2, [pc, #32]	; (8009320 <ForwardReceivedMessage+0x38>)
 80092fe:	5c9c      	ldrb	r4, [r3, r2]
	port = FindRoute(myID, dst); 
 8009300:	4b08      	ldr	r3, [pc, #32]	; (8009324 <ForwardReceivedMessage+0x3c>)
 8009302:	7818      	ldrb	r0, [r3, #0]
 8009304:	0021      	movs	r1, r4
 8009306:	f7fa fd3d 	bl	8003d84 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 800930a:	9500      	str	r5, [sp, #0]
 800930c:	2300      	movs	r3, #0
 800930e:	0022      	movs	r2, r4
 8009310:	2100      	movs	r1, #0
 8009312:	f7ff fe29 	bl	8008f68 <SendMessageFromPort>
}
 8009316:	2000      	movs	r0, #0
 8009318:	b003      	add	sp, #12
 800931a:	bd30      	pop	{r4, r5, pc}
 800931c:	20000b04 	.word	0x20000b04
 8009320:	20000d80 	.word	0x20000d80
 8009324:	200010e4 	.word	0x200010e4

08009328 <BroadcastReceivedMessage>:
{
 8009328:	b500      	push	{lr}
 800932a:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 800932c:	4b0c      	ldr	r3, [pc, #48]	; (8009360 <BroadcastReceivedMessage+0x38>)
 800932e:	2200      	movs	r2, #0
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	4b0c      	ldr	r3, [pc, #48]	; (8009364 <BroadcastReceivedMessage+0x3c>)
 8009334:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8009336:	28ff      	cmp	r0, #255	; 0xff
 8009338:	d009      	beq.n	800934e <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 800933a:	9100      	str	r1, [sp, #0]
 800933c:	2300      	movs	r3, #0
 800933e:	22fe      	movs	r2, #254	; 0xfe
 8009340:	2100      	movs	r1, #0
 8009342:	2000      	movs	r0, #0
 8009344:	f7ff fe10 	bl	8008f68 <SendMessageFromPort>
}
 8009348:	2000      	movs	r0, #0
 800934a:	b003      	add	sp, #12
 800934c:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 800934e:	9100      	str	r1, [sp, #0]
 8009350:	2300      	movs	r3, #0
 8009352:	32ff      	adds	r2, #255	; 0xff
 8009354:	2100      	movs	r1, #0
 8009356:	2000      	movs	r0, #0
 8009358:	f7ff fe06 	bl	8008f68 <SendMessageFromPort>
 800935c:	e7f4      	b.n	8009348 <BroadcastReceivedMessage+0x20>
 800935e:	46c0      	nop			; (mov r8, r8)
 8009360:	20000b04 	.word	0x20000b04
 8009364:	2000001d 	.word	0x2000001d

08009368 <BroadcastMessage>:
{
 8009368:	b530      	push	{r4, r5, lr}
 800936a:	b083      	sub	sp, #12
 800936c:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 800936e:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <BroadcastMessage+0x44>)
 8009370:	2501      	movs	r5, #1
 8009372:	701d      	strb	r5, [r3, #0]
 8009374:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <BroadcastMessage+0x48>)
 8009376:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8009378:	29ff      	cmp	r1, #255	; 0xff
 800937a:	d00e      	beq.n	800939a <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 800937c:	9400      	str	r4, [sp, #0]
 800937e:	0013      	movs	r3, r2
 8009380:	22fe      	movs	r2, #254	; 0xfe
 8009382:	0001      	movs	r1, r0
 8009384:	2000      	movs	r0, #0
 8009386:	f7ff fdef 	bl	8008f68 <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 800938a:	0022      	movs	r2, r4
 800938c:	2100      	movs	r1, #0
 800938e:	4809      	ldr	r0, [pc, #36]	; (80093b4 <BroadcastMessage+0x4c>)
 8009390:	f00a ffb6 	bl	8014300 <memset>
}
 8009394:	2000      	movs	r0, #0
 8009396:	b003      	add	sp, #12
 8009398:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 800939a:	9400      	str	r4, [sp, #0]
 800939c:	0013      	movs	r3, r2
 800939e:	22ff      	movs	r2, #255	; 0xff
 80093a0:	0001      	movs	r1, r0
 80093a2:	2000      	movs	r0, #0
 80093a4:	f7ff fde0 	bl	8008f68 <SendMessageFromPort>
 80093a8:	e7ef      	b.n	800938a <BroadcastMessage+0x22>
 80093aa:	46c0      	nop			; (mov r8, r8)
 80093ac:	20000b04 	.word	0x20000b04
 80093b0:	2000001d 	.word	0x2000001d
 80093b4:	20000fb0 	.word	0x20000fb0

080093b8 <SendMessageToModule>:
{
 80093b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ba:	b083      	sub	sp, #12
 80093bc:	0004      	movs	r4, r0
 80093be:	000e      	movs	r6, r1
 80093c0:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 80093c2:	28ff      	cmp	r0, #255	; 0xff
 80093c4:	d012      	beq.n	80093ec <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 80093c6:	4f0d      	ldr	r7, [pc, #52]	; (80093fc <SendMessageToModule+0x44>)
 80093c8:	7838      	ldrb	r0, [r7, #0]
 80093ca:	0021      	movs	r1, r4
 80093cc:	f7fa fcda 	bl	8003d84 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 80093d0:	7839      	ldrb	r1, [r7, #0]
 80093d2:	9500      	str	r5, [sp, #0]
 80093d4:	0033      	movs	r3, r6
 80093d6:	0022      	movs	r2, r4
 80093d8:	f7ff fdc6 	bl	8008f68 <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 80093dc:	002a      	movs	r2, r5
 80093de:	2100      	movs	r1, #0
 80093e0:	4807      	ldr	r0, [pc, #28]	; (8009400 <SendMessageToModule+0x48>)
 80093e2:	f00a ff8d 	bl	8014300 <memset>
}
 80093e6:	2000      	movs	r0, #0
 80093e8:	b003      	add	sp, #12
 80093ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 80093ec:	4b03      	ldr	r3, [pc, #12]	; (80093fc <SendMessageToModule+0x44>)
 80093ee:	7818      	ldrb	r0, [r3, #0]
 80093f0:	0013      	movs	r3, r2
 80093f2:	000a      	movs	r2, r1
 80093f4:	21ff      	movs	r1, #255	; 0xff
 80093f6:	f7ff ffb7 	bl	8009368 <BroadcastMessage>
 80093fa:	e7f4      	b.n	80093e6 <SendMessageToModule+0x2e>
 80093fc:	200010e4 	.word	0x200010e4
 8009400:	20000fb0 	.word	0x20000fb0

08009404 <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 8009404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009406:	46de      	mov	lr, fp
 8009408:	4657      	mov	r7, sl
 800940a:	464e      	mov	r6, r9
 800940c:	4645      	mov	r5, r8
 800940e:	b5e0      	push	{r5, r6, r7, lr}
 8009410:	b091      	sub	sp, #68	; 0x44
 8009412:	900f      	str	r0, [sp, #60]	; 0x3c
 8009414:	000c      	movs	r4, r1
 8009416:	9106      	str	r1, [sp, #24]
 8009418:	0015      	movs	r5, r2
 800941a:	920e      	str	r2, [sp, #56]	; 0x38
 800941c:	001e      	movs	r6, r3
 800941e:	ab1a      	add	r3, sp, #104	; 0x68
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	4698      	mov	r8, r3
 8009424:	ab1d      	add	r3, sp, #116	; 0x74
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	469a      	mov	sl, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 800942a:	4b5a      	ldr	r3, [pc, #360]	; (8009594 <StartScastDMAStream+0x190>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	428b      	cmp	r3, r1
 8009430:	d11d      	bne.n	800946e <StartScastDMAStream+0x6a>
				temp2 = dstP;
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8009432:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009434:	0e1b      	lsrs	r3, r3, #24
 8009436:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 8009438:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800943a:	0c1b      	lsrs	r3, r3, #16
 800943c:	b2db      	uxtb	r3, r3
 800943e:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 8009440:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009442:	0a1b      	lsrs	r3, r3, #8
 8009444:	b2db      	uxtb	r3, r3
 8009446:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] = (uint8_t) count;
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8009448:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800944a:	0e1b      	lsrs	r3, r3, #24
 800944c:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 800944e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009450:	0c1b      	lsrs	r3, r3, #16
 8009452:	b2db      	uxtb	r3, r3
 8009454:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 8009456:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	b2db      	uxtb	r3, r3
 800945c:	469b      	mov	fp, r3
 800945e:	4d4e      	ldr	r5, [pc, #312]	; (8009598 <StartScastDMAStream+0x194>)
 8009460:	2319      	movs	r3, #25
 8009462:	4699      	mov	r9, r3
 8009464:	44a9      	add	r9, r5
				temp2 = dstP;
 8009466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009468:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 800946a:	4c4c      	ldr	r4, [pc, #304]	; (800959c <StartScastDMAStream+0x198>)
 800946c:	e05c      	b.n	8009528 <StartScastDMAStream+0x124>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 800946e:	4b4b      	ldr	r3, [pc, #300]	; (800959c <StartScastDMAStream+0x198>)
 8009470:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009472:	0e12      	lsrs	r2, r2, #24
 8009474:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 8009476:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009478:	0c12      	lsrs	r2, r2, #16
 800947a:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 800947c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800947e:	0a12      	lsrs	r2, r2, #8
 8009480:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 8009482:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009484:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8009486:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009488:	0e12      	lsrs	r2, r2, #24
 800948a:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 800948c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800948e:	0c12      	lsrs	r2, r2, #16
 8009490:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 8009492:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009494:	0a12      	lsrs	r2, r2, #8
 8009496:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 8009498:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800949a:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 800949c:	4642      	mov	r2, r8
 800949e:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 80094a0:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 80094a2:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 80094a4:	72dd      	strb	r5, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 80094a6:	4652      	mov	r2, sl
 80094a8:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 80094aa:	220d      	movs	r2, #13
 80094ac:	211c      	movs	r1, #28
 80094ae:	0020      	movs	r0, r4
 80094b0:	f7ff ff82 	bl	80093b8 <SendMessageToModule>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 80094b4:	2000      	movs	r0, #0
 80094b6:	b011      	add	sp, #68	; 0x44
 80094b8:	bc3c      	pop	{r2, r3, r4, r5}
 80094ba:	4690      	mov	r8, r2
 80094bc:	4699      	mov	r9, r3
 80094be:	46a2      	mov	sl, r4
 80094c0:	46ab      	mov	fp, r5
 80094c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 = FindRoute(route[i], srcM);
 80094c4:	9906      	ldr	r1, [sp, #24]
 80094c6:	f7fa fc5d 	bl	8003d84 <FindRoute>
 80094ca:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 80094cc:	0031      	movs	r1, r6
 80094ce:	9806      	ldr	r0, [sp, #24]
 80094d0:	f7fa fc58 	bl	8003d84 <FindRoute>
			if (route[i] == dstM) {
 80094d4:	7878      	ldrb	r0, [r7, #1]
				temp2 = dstP;
 80094d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 80094d8:	42b0      	cmp	r0, r6
 80094da:	d134      	bne.n	8009546 <StartScastDMAStream+0x142>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80094dc:	9a08      	ldr	r2, [sp, #32]
 80094de:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 80094e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094e2:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 80094e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094e6:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 80094e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80094ea:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80094ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094ee:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 80094f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094f2:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 80094f4:	465a      	mov	r2, fp
 80094f6:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 80094f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80094fa:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 80094fc:	4642      	mov	r2, r8
 80094fe:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8009500:	9a07      	ldr	r2, [sp, #28]
 8009502:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 8009504:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 8009506:	4653      	mov	r3, sl
 8009508:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 800950a:	0031      	movs	r1, r6
 800950c:	9806      	ldr	r0, [sp, #24]
 800950e:	f7fa fc39 	bl	8003d84 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 8009512:	7878      	ldrb	r0, [r7, #1]
 8009514:	220c      	movs	r2, #12
 8009516:	211b      	movs	r1, #27
 8009518:	f7ff ff4e 	bl	80093b8 <SendMessageToModule>
			osDelay(10);
 800951c:	200a      	movs	r0, #10
 800951e:	f005 f9f6 	bl	800e90e <osDelay>
 8009522:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 8009524:	454d      	cmp	r5, r9
 8009526:	d013      	beq.n	8009550 <StartScastDMAStream+0x14c>
		FindRoute(srcM, dstM);
 8009528:	0031      	movs	r1, r6
 800952a:	9806      	ldr	r0, [sp, #24]
 800952c:	f7fa fc2a 	bl	8003d84 <FindRoute>
 8009530:	002f      	movs	r7, r5
		if (route[i]) 
 8009532:	7868      	ldrb	r0, [r5, #1]
 8009534:	2800      	cmp	r0, #0
 8009536:	d0f4      	beq.n	8009522 <StartScastDMAStream+0x11e>
			if (route[i+1]) {
 8009538:	78a9      	ldrb	r1, [r5, #2]
 800953a:	2900      	cmp	r1, #0
 800953c:	d0c2      	beq.n	80094c4 <StartScastDMAStream+0xc0>
				temp1 = FindRoute(route[i], route[i+1]);
 800953e:	f7fa fc21 	bl	8003d84 <FindRoute>
 8009542:	9007      	str	r0, [sp, #28]
 8009544:	e7c2      	b.n	80094cc <StartScastDMAStream+0xc8>
				temp2 = FindRoute(route[i], route[i-1]);
 8009546:	7839      	ldrb	r1, [r7, #0]
 8009548:	f7fa fc1c 	bl	8003d84 <FindRoute>
 800954c:	0003      	movs	r3, r0
 800954e:	e7c5      	b.n	80094dc <StartScastDMAStream+0xd8>
	if (srcM == dstM)
 8009550:	9806      	ldr	r0, [sp, #24]
 8009552:	42b0      	cmp	r0, r6
 8009554:	d118      	bne.n	8009588 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction, count, timeout, srcP, port);
 8009556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800955c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800955e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009560:	4640      	mov	r0, r8
 8009562:	f7ff fbdf 	bl	8008d24 <SetupDMAStreams>
	if (stored) {		
 8009566:	4653      	mov	r3, sl
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0a3      	beq.n	80094b4 <StartScastDMAStream+0xb0>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 800956c:	2300      	movs	r3, #0
 800956e:	9304      	str	r3, [sp, #16]
 8009570:	9303      	str	r3, [sp, #12]
 8009572:	9302      	str	r3, [sp, #8]
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800957c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800957e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009580:	4640      	mov	r0, r8
 8009582:	f7fa f8b7 	bl	80036f4 <SaveEEstreams>
 8009586:	e795      	b.n	80094b4 <StartScastDMAStream+0xb0>
		port = FindRoute(srcM, dstM);
 8009588:	0031      	movs	r1, r6
 800958a:	f7fa fbfb 	bl	8003d84 <FindRoute>
 800958e:	900e      	str	r0, [sp, #56]	; 0x38
 8009590:	e7e1      	b.n	8009556 <StartScastDMAStream+0x152>
 8009592:	46c0      	nop			; (mov r8, r8)
 8009594:	200010e4 	.word	0x200010e4
 8009598:	20006acf 	.word	0x20006acf
 800959c:	20000fb0 	.word	0x20000fb0

080095a0 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 80095a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a2:	46de      	mov	lr, fp
 80095a4:	4657      	mov	r7, sl
 80095a6:	464e      	mov	r6, r9
 80095a8:	4645      	mov	r5, r8
 80095aa:	b5e0      	push	{r5, r6, r7, lr}
 80095ac:	b087      	sub	sp, #28
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	469b      	mov	fp, r3

						/* A.5.1. Copy the packet to message buffer */	
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
						} else {				// Message wraps around
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 80095b2:	4bd5      	ldr	r3, [pc, #852]	; (8009908 <BackEndTask+0x368>)
 80095b4:	3b70      	subs	r3, #112	; 0x70
 80095b6:	9304      	str	r3, [sp, #16]
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 80095b8:	4bd3      	ldr	r3, [pc, #844]	; (8009908 <BackEndTask+0x368>)
 80095ba:	3b70      	subs	r3, #112	; 0x70
 80095bc:	9305      	str	r3, [sp, #20]
 80095be:	e19e      	b.n	80098fe <BackEndTask+0x35e>
 80095c0:	1ebb      	subs	r3, r7, #2
 80095c2:	4698      	mov	r8, r3
 80095c4:	4bd1      	ldr	r3, [pc, #836]	; (800990c <BackEndTask+0x36c>)
 80095c6:	4443      	add	r3, r8
 80095c8:	4699      	mov	r9, r3
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 80095ca:	7819      	ldrb	r1, [r3, #0]
 80095cc:	293f      	cmp	r1, #63	; 0x3f
 80095ce:	dc17      	bgt.n	8009600 <BackEndTask+0x60>
							if (BOS.disableCLI == false)
 80095d0:	4bcf      	ldr	r3, [pc, #828]	; (8009910 <BackEndTask+0x370>)
 80095d2:	7edb      	ldrb	r3, [r3, #27]
 80095d4:	469c      	mov	ip, r3
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 80095d6:	000b      	movs	r3, r1
							if (BOS.disableCLI == false)
 80095d8:	2000      	movs	r0, #0
 80095da:	e004      	b.n	80095e6 <BackEndTask+0x46>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 80095dc:	2b3f      	cmp	r3, #63	; 0x3f
 80095de:	d023      	beq.n	8009628 <BackEndTask+0x88>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 80095e0:	3301      	adds	r3, #1
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d009      	beq.n	80095fa <BackEndTask+0x5a>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 80095e6:	2b3e      	cmp	r3, #62	; 0x3e
 80095e8:	dcf8      	bgt.n	80095dc <BackEndTask+0x3c>
 80095ea:	5cf2      	ldrb	r2, [r6, r3]
 80095ec:	2a48      	cmp	r2, #72	; 0x48
 80095ee:	d1f5      	bne.n	80095dc <BackEndTask+0x3c>
 80095f0:	18f2      	adds	r2, r6, r3
 80095f2:	7852      	ldrb	r2, [r2, #1]
 80095f4:	2a5a      	cmp	r2, #90	; 0x5a
 80095f6:	d1f1      	bne.n	80095dc <BackEndTask+0x3c>
 80095f8:	469b      	mov	fp, r3
				if (emptyBuffer) {	
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d000      	beq.n	8009600 <BackEndTask+0x60>
 80095fe:	e15f      	b.n	80098c0 <BackEndTask+0x320>
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 8009600:	465b      	mov	r3, fp
 8009602:	2b3d      	cmp	r3, #61	; 0x3d
 8009604:	d051      	beq.n	80096aa <BackEndTask+0x10a>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 8009606:	2b3e      	cmp	r3, #62	; 0x3e
 8009608:	d100      	bne.n	800960c <BackEndTask+0x6c>
 800960a:	e090      	b.n	800972e <BackEndTask+0x18e>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 800960c:	2b3f      	cmp	r3, #63	; 0x3f
 800960e:	d100      	bne.n	8009612 <BackEndTask+0x72>
 8009610:	e092      	b.n	8009738 <BackEndTask+0x198>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 8009612:	4643      	mov	r3, r8
 8009614:	019a      	lsls	r2, r3, #6
 8009616:	4bbf      	ldr	r3, [pc, #764]	; (8009914 <BackEndTask+0x374>)
 8009618:	189b      	adds	r3, r3, r2
 800961a:	445b      	add	r3, fp
 800961c:	789b      	ldrb	r3, [r3, #2]
 800961e:	9300      	str	r3, [sp, #0]
					parseStart = packetStart+3;
 8009620:	465b      	mov	r3, fp
 8009622:	3303      	adds	r3, #3
 8009624:	9302      	str	r3, [sp, #8]
 8009626:	e046      	b.n	80096b6 <BackEndTask+0x116>
 8009628:	9600      	str	r6, [sp, #0]
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800962a:	223f      	movs	r2, #63	; 0x3f
 800962c:	4692      	mov	sl, r2
 800962e:	44b2      	add	sl, r6
 8009630:	4652      	mov	r2, sl
 8009632:	7812      	ldrb	r2, [r2, #0]
 8009634:	2a48      	cmp	r2, #72	; 0x48
 8009636:	d005      	beq.n	8009644 <BackEndTask+0xa4>
							if (BOS.disableCLI == false)
 8009638:	4663      	mov	r3, ip
 800963a:	2b00      	cmp	r3, #0
 800963c:	d000      	beq.n	8009640 <BackEndTask+0xa0>
 800963e:	e13f      	b.n	80098c0 <BackEndTask+0x320>
 8009640:	9a00      	ldr	r2, [sp, #0]
 8009642:	e00c      	b.n	800965e <BackEndTask+0xbe>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8009644:	7832      	ldrb	r2, [r6, #0]
 8009646:	2a5a      	cmp	r2, #90	; 0x5a
 8009648:	d1f6      	bne.n	8009638 <BackEndTask+0x98>
				if (emptyBuffer) {	
 800964a:	2800      	cmp	r0, #0
 800964c:	d074      	beq.n	8009738 <BackEndTask+0x198>
						packetStart = MSG_RX_BUF_SIZE-1;	
 800964e:	469b      	mov	fp, r3
 8009650:	e136      	b.n	80098c0 <BackEndTask+0x320>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 8009652:	293f      	cmp	r1, #63	; 0x3f
 8009654:	d024      	beq.n	80096a0 <BackEndTask+0x100>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 8009656:	3101      	adds	r1, #1
 8009658:	2940      	cmp	r1, #64	; 0x40
 800965a:	d100      	bne.n	800965e <BackEndTask+0xbe>
 800965c:	e130      	b.n	80098c0 <BackEndTask+0x320>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800965e:	5c53      	ldrb	r3, [r2, r1]
 8009660:	2b0d      	cmp	r3, #13
 8009662:	d1f8      	bne.n	8009656 <BackEndTask+0xb6>
 8009664:	293e      	cmp	r1, #62	; 0x3e
 8009666:	dcf4      	bgt.n	8009652 <BackEndTask+0xb2>
 8009668:	1850      	adds	r0, r2, r1
 800966a:	7843      	ldrb	r3, [r0, #1]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1f0      	bne.n	8009652 <BackEndTask+0xb2>
										UARTRxBuf[port-1][j] = 0;
 8009670:	4643      	mov	r3, r8
 8009672:	019a      	lsls	r2, r3, #6
 8009674:	4ba7      	ldr	r3, [pc, #668]	; (8009914 <BackEndTask+0x374>)
 8009676:	189b      	adds	r3, r3, r2
 8009678:	2200      	movs	r2, #0
 800967a:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 800967c:	3101      	adds	r1, #1
 800967e:	464b      	mov	r3, r9
 8009680:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 8009682:	4ba5      	ldr	r3, [pc, #660]	; (8009918 <BackEndTask+0x378>)
 8009684:	7819      	ldrb	r1, [r3, #0]
 8009686:	48a5      	ldr	r0, [pc, #660]	; (800991c <BackEndTask+0x37c>)
 8009688:	5442      	strb	r2, [r0, r1]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 800968a:	3203      	adds	r2, #3
 800968c:	7022      	strb	r2, [r4, #0]
										PcPort = port;
 800968e:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 8009690:	4ba3      	ldr	r3, [pc, #652]	; (8009920 <BackEndTask+0x380>)
 8009692:	6818      	ldr	r0, [r3, #0]
 8009694:	2300      	movs	r3, #0
 8009696:	3a01      	subs	r2, #1
 8009698:	2100      	movs	r1, #0
 800969a:	f006 fd57 	bl	801014c <xTaskGenericNotify>
										break;
 800969e:	e10f      	b.n	80098c0 <BackEndTask+0x320>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 80096a0:	7813      	ldrb	r3, [r2, #0]
							emptyBuffer = true;
 80096a2:	2001      	movs	r0, #1
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1a8      	bne.n	80095fa <BackEndTask+0x5a>
 80096a8:	e7e2      	b.n	8009670 <BackEndTask+0xd0>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 80096aa:	0033      	movs	r3, r6
 80096ac:	333f      	adds	r3, #63	; 0x3f
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	9300      	str	r3, [sp, #0]
					parseStart = 0;				
 80096b2:	2300      	movs	r3, #0
 80096b4:	9302      	str	r3, [sp, #8]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 80096b6:	9b00      	ldr	r3, [sp, #0]
 80096b8:	3303      	adds	r3, #3
 80096ba:	9301      	str	r3, [sp, #4]
 80096bc:	445b      	add	r3, fp
 80096be:	469a      	mov	sl, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 80096c0:	2b3f      	cmp	r3, #63	; 0x3f
 80096c2:	dd03      	ble.n	80096cc <BackEndTask+0x12c>
					packetEnd -= MSG_RX_BUF_SIZE;
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	425b      	negs	r3, r3
 80096c8:	469c      	mov	ip, r3
 80096ca:	44e2      	add	sl, ip
				if (packetStart != packetEnd)										// Non-empty packet
 80096cc:	45da      	cmp	sl, fp
 80096ce:	d100      	bne.n	80096d2 <BackEndTask+0x132>
 80096d0:	e0d0      	b.n	8009874 <BackEndTask+0x2d4>
					Delay_ms(1);
 80096d2:	2001      	movs	r0, #1
 80096d4:	f007 f946 	bl	8010964 <HAL_Delay>
					if (packetStart < packetEnd) {
 80096d8:	45da      	cmp	sl, fp
 80096da:	dd34      	ble.n	8009746 <BackEndTask+0x1a6>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 80096dc:	4b91      	ldr	r3, [pc, #580]	; (8009924 <BackEndTask+0x384>)
 80096de:	18fb      	adds	r3, r7, r3
 80096e0:	019b      	lsls	r3, r3, #6
 80096e2:	445b      	add	r3, fp
 80096e4:	4a8b      	ldr	r2, [pc, #556]	; (8009914 <BackEndTask+0x374>)
 80096e6:	4694      	mov	ip, r2
 80096e8:	4463      	add	r3, ip
 80096ea:	9303      	str	r3, [sp, #12]
 80096ec:	9a01      	ldr	r2, [sp, #4]
 80096ee:	0019      	movs	r1, r3
 80096f0:	488d      	ldr	r0, [pc, #564]	; (8009928 <BackEndTask+0x388>)
 80096f2:	f00a fdfc 	bl	80142ee <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 80096f6:	9b00      	ldr	r3, [sp, #0]
 80096f8:	1cd9      	adds	r1, r3, #3
 80096fa:	488b      	ldr	r0, [pc, #556]	; (8009928 <BackEndTask+0x388>)
 80096fc:	f003 fd2a 	bl	800d154 <CalculateCRC8>
 8009700:	9001      	str	r0, [sp, #4]
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8009702:	2238      	movs	r2, #56	; 0x38
 8009704:	2100      	movs	r1, #0
 8009706:	4888      	ldr	r0, [pc, #544]	; (8009928 <BackEndTask+0x388>)
 8009708:	f00a fdfa 	bl	8014300 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 800970c:	4643      	mov	r3, r8
 800970e:	019b      	lsls	r3, r3, #6
 8009710:	4a80      	ldr	r2, [pc, #512]	; (8009914 <BackEndTask+0x374>)
 8009712:	4694      	mov	ip, r2
 8009714:	4463      	add	r3, ip
 8009716:	4652      	mov	r2, sl
 8009718:	5c9b      	ldrb	r3, [r3, r2]
 800971a:	9a01      	ldr	r2, [sp, #4]
 800971c:	4293      	cmp	r3, r2
 800971e:	d040      	beq.n	80097a2 <BackEndTask+0x202>
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */                
				if (packetStart < packetEnd) {
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8009720:	9a00      	ldr	r2, [sp, #0]
 8009722:	3204      	adds	r2, #4
 8009724:	2100      	movs	r1, #0
 8009726:	9803      	ldr	r0, [sp, #12]
 8009728:	f00a fdea 	bl	8014300 <memset>
 800972c:	e0b8      	b.n	80098a0 <BackEndTask+0x300>
					packetLength = UARTRxBuf[port-1][0];
 800972e:	7833      	ldrb	r3, [r6, #0]
 8009730:	9300      	str	r3, [sp, #0]
					parseStart = 1;
 8009732:	2301      	movs	r3, #1
 8009734:	9302      	str	r3, [sp, #8]
 8009736:	e7be      	b.n	80096b6 <BackEndTask+0x116>
					packetLength = UARTRxBuf[port-1][1];
 8009738:	7873      	ldrb	r3, [r6, #1]
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	233f      	movs	r3, #63	; 0x3f
 800973e:	469b      	mov	fp, r3
					parseStart = 2;
 8009740:	3b3d      	subs	r3, #61	; 0x3d
 8009742:	9302      	str	r3, [sp, #8]
 8009744:	e7b7      	b.n	80096b6 <BackEndTask+0x116>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 8009746:	2240      	movs	r2, #64	; 0x40
 8009748:	465b      	mov	r3, fp
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	4a75      	ldr	r2, [pc, #468]	; (8009924 <BackEndTask+0x384>)
 800974e:	18b9      	adds	r1, r7, r2
 8009750:	0189      	lsls	r1, r1, #6
 8009752:	4459      	add	r1, fp
 8009754:	4a6f      	ldr	r2, [pc, #444]	; (8009914 <BackEndTask+0x374>)
 8009756:	4694      	mov	ip, r2
 8009758:	4461      	add	r1, ip
 800975a:	9303      	str	r3, [sp, #12]
 800975c:	001a      	movs	r2, r3
 800975e:	4872      	ldr	r0, [pc, #456]	; (8009928 <BackEndTask+0x388>)
 8009760:	f00a fdc5 	bl	80142ee <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 8009764:	4a70      	ldr	r2, [pc, #448]	; (8009928 <BackEndTask+0x388>)
 8009766:	0010      	movs	r0, r2
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	469c      	mov	ip, r3
 800976c:	4460      	add	r0, ip
 800976e:	9a01      	ldr	r2, [sp, #4]
 8009770:	1ad2      	subs	r2, r2, r3
 8009772:	0031      	movs	r1, r6
 8009774:	f00a fdbb 	bl	80142ee <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8009778:	9b00      	ldr	r3, [sp, #0]
 800977a:	1cd9      	adds	r1, r3, #3
 800977c:	486a      	ldr	r0, [pc, #424]	; (8009928 <BackEndTask+0x388>)
 800977e:	f003 fce9 	bl	800d154 <CalculateCRC8>
 8009782:	9001      	str	r0, [sp, #4]
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8009784:	2238      	movs	r2, #56	; 0x38
 8009786:	2100      	movs	r1, #0
 8009788:	4867      	ldr	r0, [pc, #412]	; (8009928 <BackEndTask+0x388>)
 800978a:	f00a fdb9 	bl	8014300 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 800978e:	4643      	mov	r3, r8
 8009790:	019b      	lsls	r3, r3, #6
 8009792:	4a60      	ldr	r2, [pc, #384]	; (8009914 <BackEndTask+0x374>)
 8009794:	4694      	mov	ip, r2
 8009796:	4463      	add	r3, ip
 8009798:	4652      	mov	r2, sl
 800979a:	5c9b      	ldrb	r3, [r3, r2]
 800979c:	9a01      	ldr	r2, [sp, #4]
 800979e:	4293      	cmp	r3, r2
 80097a0:	d168      	bne.n	8009874 <BackEndTask+0x2d4>
						portStatus[port] = MSG;
 80097a2:	2301      	movs	r3, #1
 80097a4:	7023      	strb	r3, [r4, #0]
						messageLength[port-1] = packetLength;	
 80097a6:	1ebb      	subs	r3, r7, #2
 80097a8:	4a60      	ldr	r2, [pc, #384]	; (800992c <BackEndTask+0x38c>)
 80097aa:	9900      	ldr	r1, [sp, #0]
 80097ac:	54d1      	strb	r1, [r2, r3]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 80097ae:	233f      	movs	r3, #63	; 0x3f
 80097b0:	9c02      	ldr	r4, [sp, #8]
 80097b2:	1b1b      	subs	r3, r3, r4
 80097b4:	000a      	movs	r2, r1
 80097b6:	428b      	cmp	r3, r1
 80097b8:	db27      	blt.n	800980a <BackEndTask+0x26a>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 80097ba:	00f8      	lsls	r0, r7, #3
 80097bc:	1bc0      	subs	r0, r0, r7
 80097be:	00c0      	lsls	r0, r0, #3
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	469c      	mov	ip, r3
 80097c4:	4460      	add	r0, ip
 80097c6:	4b57      	ldr	r3, [pc, #348]	; (8009924 <BackEndTask+0x384>)
 80097c8:	18f9      	adds	r1, r7, r3
 80097ca:	0189      	lsls	r1, r1, #6
 80097cc:	46a4      	mov	ip, r4
 80097ce:	4461      	add	r1, ip
 80097d0:	4b50      	ldr	r3, [pc, #320]	; (8009914 <BackEndTask+0x374>)
 80097d2:	18c9      	adds	r1, r1, r3
 80097d4:	f00a fd8b 	bl	80142ee <memcpy>
						if (packetStart < packetEnd) {
 80097d8:	45da      	cmp	sl, fp
 80097da:	dd36      	ble.n	800984a <BackEndTask+0x2aa>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 80097dc:	9a00      	ldr	r2, [sp, #0]
 80097de:	3204      	adds	r2, #4
 80097e0:	4b50      	ldr	r3, [pc, #320]	; (8009924 <BackEndTask+0x384>)
 80097e2:	18f8      	adds	r0, r7, r3
 80097e4:	0180      	lsls	r0, r0, #6
 80097e6:	4458      	add	r0, fp
 80097e8:	4b4a      	ldr	r3, [pc, #296]	; (8009914 <BackEndTask+0x374>)
 80097ea:	18c0      	adds	r0, r0, r3
 80097ec:	2100      	movs	r1, #0
 80097ee:	f00a fd87 	bl	8014300 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 80097f2:	4653      	mov	r3, sl
 80097f4:	3301      	adds	r3, #1
 80097f6:	464a      	mov	r2, r9
 80097f8:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 80097fa:	4a4d      	ldr	r2, [pc, #308]	; (8009930 <BackEndTask+0x390>)
 80097fc:	8813      	ldrh	r3, [r2, #0]
 80097fe:	3301      	adds	r3, #1
 8009800:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 8009802:	0028      	movs	r0, r5
 8009804:	f7ff fb6a 	bl	8008edc <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 8009808:	e05a      	b.n	80098c0 <BackEndTask+0x320>
 800980a:	00fb      	lsls	r3, r7, #3
 800980c:	1bdb      	subs	r3, r3, r7
 800980e:	00db      	lsls	r3, r3, #3
 8009810:	4698      	mov	r8, r3
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 8009812:	2440      	movs	r4, #64	; 0x40
 8009814:	9b02      	ldr	r3, [sp, #8]
 8009816:	1ae4      	subs	r4, r4, r3
 8009818:	9a04      	ldr	r2, [sp, #16]
 800981a:	4442      	add	r2, r8
 800981c:	0010      	movs	r0, r2
 800981e:	4a41      	ldr	r2, [pc, #260]	; (8009924 <BackEndTask+0x384>)
 8009820:	18b9      	adds	r1, r7, r2
 8009822:	0189      	lsls	r1, r1, #6
 8009824:	469c      	mov	ip, r3
 8009826:	4461      	add	r1, ip
 8009828:	4b3a      	ldr	r3, [pc, #232]	; (8009914 <BackEndTask+0x374>)
 800982a:	18c9      	adds	r1, r1, r3
 800982c:	0022      	movs	r2, r4
 800982e:	f00a fd5e 	bl	80142ee <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 8009832:	4640      	mov	r0, r8
 8009834:	3870      	subs	r0, #112	; 0x70
 8009836:	1900      	adds	r0, r0, r4
 8009838:	4b33      	ldr	r3, [pc, #204]	; (8009908 <BackEndTask+0x368>)
 800983a:	469c      	mov	ip, r3
 800983c:	4460      	add	r0, ip
 800983e:	9b00      	ldr	r3, [sp, #0]
 8009840:	1b1a      	subs	r2, r3, r4
 8009842:	0031      	movs	r1, r6
 8009844:	f00a fd53 	bl	80142ee <memcpy>
 8009848:	e7c6      	b.n	80097d8 <BackEndTask+0x238>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800984a:	2440      	movs	r4, #64	; 0x40
 800984c:	465b      	mov	r3, fp
 800984e:	1ae4      	subs	r4, r4, r3
 8009850:	4b34      	ldr	r3, [pc, #208]	; (8009924 <BackEndTask+0x384>)
 8009852:	18f8      	adds	r0, r7, r3
 8009854:	0180      	lsls	r0, r0, #6
 8009856:	4458      	add	r0, fp
 8009858:	4b2e      	ldr	r3, [pc, #184]	; (8009914 <BackEndTask+0x374>)
 800985a:	18c0      	adds	r0, r0, r3
 800985c:	0022      	movs	r2, r4
 800985e:	2100      	movs	r1, #0
 8009860:	f00a fd4e 	bl	8014300 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8009864:	9a00      	ldr	r2, [sp, #0]
 8009866:	3204      	adds	r2, #4
 8009868:	1b12      	subs	r2, r2, r4
 800986a:	2100      	movs	r1, #0
 800986c:	0030      	movs	r0, r6
 800986e:	f00a fd47 	bl	8014300 <memset>
 8009872:	e7be      	b.n	80097f2 <BackEndTask+0x252>
				} else {                // wrap around
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8009874:	2240      	movs	r2, #64	; 0x40
 8009876:	465b      	mov	r3, fp
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	4698      	mov	r8, r3
 800987c:	4b29      	ldr	r3, [pc, #164]	; (8009924 <BackEndTask+0x384>)
 800987e:	18f8      	adds	r0, r7, r3
 8009880:	0180      	lsls	r0, r0, #6
 8009882:	4458      	add	r0, fp
 8009884:	4b23      	ldr	r3, [pc, #140]	; (8009914 <BackEndTask+0x374>)
 8009886:	18c0      	adds	r0, r0, r3
 8009888:	4642      	mov	r2, r8
 800988a:	2100      	movs	r1, #0
 800988c:	f00a fd38 	bl	8014300 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 8009890:	9a00      	ldr	r2, [sp, #0]
 8009892:	3204      	adds	r2, #4
 8009894:	4643      	mov	r3, r8
 8009896:	1ad2      	subs	r2, r2, r3
 8009898:	2100      	movs	r1, #0
 800989a:	0030      	movs	r0, r6
 800989c:	f00a fd30 	bl	8014300 <memset>
				}    
				
				/* A.6.2 Advance buffer index */				
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 80098a0:	4653      	mov	r3, sl
 80098a2:	3301      	adds	r3, #1
 80098a4:	464a      	mov	r2, r9
 80098a6:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 80098a8:	4a22      	ldr	r2, [pc, #136]	; (8009934 <BackEndTask+0x394>)
 80098aa:	8813      	ldrh	r3, [r2, #0]
 80098ac:	3301      	adds	r3, #1
 80098ae:	8013      	strh	r3, [r2, #0]
 80098b0:	e014      	b.n	80098dc <BackEndTask+0x33c>
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
				MsgDMAStopped[port-1] = false;
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 80098b2:	0028      	movs	r0, r5
 80098b4:	f004 fb04 	bl	800dec0 <GetUart>
 80098b8:	2240      	movs	r2, #64	; 0x40
 80098ba:	0031      	movs	r1, r6
 80098bc:	f009 fde0 	bl	8013480 <HAL_UART_Receive_DMA>
		for (port=1 ; port <= NumOfPorts; port++)
 80098c0:	3501      	adds	r5, #1
 80098c2:	b2ed      	uxtb	r5, r5
 80098c4:	3701      	adds	r7, #1
 80098c6:	3640      	adds	r6, #64	; 0x40
 80098c8:	2d07      	cmp	r5, #7
 80098ca:	d016      	beq.n	80098fa <BackEndTask+0x35a>
 80098cc:	1e7c      	subs	r4, r7, #1
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <BackEndTask+0x37c>)
 80098d0:	469c      	mov	ip, r3
 80098d2:	4464      	add	r4, ip
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 80098d4:	7823      	ldrb	r3, [r4, #0]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d800      	bhi.n	80098dc <BackEndTask+0x33c>
 80098da:	e671      	b.n	80095c0 <BackEndTask+0x20>
 80098dc:	1ebb      	subs	r3, r7, #2
 80098de:	4a16      	ldr	r2, [pc, #88]	; (8009938 <BackEndTask+0x398>)
 80098e0:	4694      	mov	ip, r2
 80098e2:	4463      	add	r3, ip
			if (MsgDMAStopped[port-1] == true) {
 80098e4:	781a      	ldrb	r2, [r3, #0]
 80098e6:	2a00      	cmp	r2, #0
 80098e8:	d0ea      	beq.n	80098c0 <BackEndTask+0x320>
				MsgDMAStopped[port-1] = false;
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 80098ee:	7823      	ldrb	r3, [r4, #0]
 80098f0:	2b05      	cmp	r3, #5
 80098f2:	d1de      	bne.n	80098b2 <BackEndTask+0x312>
 80098f4:	2300      	movs	r3, #0
 80098f6:	7023      	strb	r3, [r4, #0]
 80098f8:	e7db      	b.n	80098b2 <BackEndTask+0x312>
			}				
		}
		
		taskYIELD();
 80098fa:	f006 feb5 	bl	8010668 <vPortYield>
 80098fe:	4e05      	ldr	r6, [pc, #20]	; (8009914 <BackEndTask+0x374>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8009900:	2702      	movs	r7, #2
		for (port=1 ; port <= NumOfPorts; port++)
 8009902:	2501      	movs	r5, #1
 8009904:	e7e2      	b.n	80098cc <BackEndTask+0x32c>
 8009906:	46c0      	nop			; (mov r8, r8)
 8009908:	20000d80 	.word	0x20000d80
 800990c:	200014bc 	.word	0x200014bc
 8009910:	20006a18 	.word	0x20006a18
 8009914:	2000133c 	.word	0x2000133c
 8009918:	20000b07 	.word	0x20000b07
 800991c:	20001168 	.word	0x20001168
 8009920:	20001570 	.word	0x20001570
 8009924:	03fffffe 	.word	0x03fffffe
 8009928:	200014c4 	.word	0x200014c4
 800992c:	20000fa8 	.word	0x20000fa8
 8009930:	200015fc 	.word	0x200015fc
 8009934:	20001798 	.word	0x20001798
 8009938:	20001334 	.word	0x20001334

0800993c <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 800993c:	2001      	movs	r0, #1
 800993e:	4770      	bx	lr

08009940 <PxMessagingTask>:
{
 8009940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009942:	46de      	mov	lr, fp
 8009944:	4657      	mov	r7, sl
 8009946:	464e      	mov	r6, r9
 8009948:	4645      	mov	r5, r8
 800994a:	b5e0      	push	{r5, r6, r7, lr}
 800994c:	b097      	sub	sp, #92	; 0x5c
	port = (int8_t)(unsigned) argument;
 800994e:	b2c3      	uxtb	r3, r0
 8009950:	9308      	str	r3, [sp, #32]
 8009952:	23ff      	movs	r3, #255	; 0xff
 8009954:	4003      	ands	r3, r0
 8009956:	4698      	mov	r8, r3
		if (messageLength[port-1])
 8009958:	1e5d      	subs	r5, r3, #1
 800995a:	00eb      	lsls	r3, r5, #3
 800995c:	1b5b      	subs	r3, r3, r5
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	0019      	movs	r1, r3
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8009962:	4ad8      	ldr	r2, [pc, #864]	; (8009cc4 <PxMessagingTask+0x384>)
 8009964:	18d3      	adds	r3, r2, r3
 8009966:	9307      	str	r3, [sp, #28]
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	930a      	str	r3, [sp, #40]	; 0x28
 800996c:	4699      	mov	r9, r3
			if (cMessage[port-1][2]>>7) {
 800996e:	000e      	movs	r6, r1
 8009970:	1853      	adds	r3, r2, r1
 8009972:	3302      	adds	r3, #2
 8009974:	9309      	str	r3, [sp, #36]	; 0x24
 8009976:	468a      	mov	sl, r1
 8009978:	e025      	b.n	80099c6 <PxMessagingTask+0x86>
				longMessage = 1;
 800997a:	4ad3      	ldr	r2, [pc, #844]	; (8009cc8 <PxMessagingTask+0x388>)
 800997c:	2001      	movs	r0, #1
 800997e:	7010      	strb	r0, [r2, #0]
 8009980:	e032      	b.n	80099e8 <PxMessagingTask+0xa8>
				code = cMessage[port-1][3+shift];
 8009982:	4bd0      	ldr	r3, [pc, #832]	; (8009cc4 <PxMessagingTask+0x384>)
 8009984:	199b      	adds	r3, r3, r6
 8009986:	189a      	adds	r2, r3, r2
 8009988:	78d7      	ldrb	r7, [r2, #3]
 800998a:	e048      	b.n	8009a1e <PxMessagingTask+0xde>
					if (code == CODE_UPDATE) {		// Remote bootloader update
 800998c:	2f19      	cmp	r7, #25
 800998e:	d062      	beq.n	8009a56 <PxMessagingTask+0x116>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8009990:	2f1a      	cmp	r7, #26
 8009992:	d06a      	beq.n	8009a6a <PxMessagingTask+0x12a>
		if (result == BOS_ERR_UnknownMessage) {
 8009994:	464b      	mov	r3, r9
 8009996:	2b01      	cmp	r3, #1
 8009998:	d101      	bne.n	800999e <PxMessagingTask+0x5e>
 800999a:	f001 fa33 	bl	800ae04 <PxMessagingTask+0x14c4>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 800999e:	4ccb      	ldr	r4, [pc, #812]	; (8009ccc <PxMessagingTask+0x38c>)
 80099a0:	5d62      	ldrb	r2, [r4, r5]
 80099a2:	2100      	movs	r1, #0
 80099a4:	9807      	ldr	r0, [sp, #28]
 80099a6:	f00a fcab 	bl	8014300 <memset>
		messageLength[port-1] = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	5563      	strb	r3, [r4, r5]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 80099ae:	4bc8      	ldr	r3, [pc, #800]	; (8009cd0 <PxMessagingTask+0x390>)
 80099b0:	4642      	mov	r2, r8
 80099b2:	5c9b      	ldrb	r3, [r3, r2]
 80099b4:	3b02      	subs	r3, #2
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d903      	bls.n	80099c2 <PxMessagingTask+0x82>
			portStatus[port] = FREE;
 80099ba:	4bc5      	ldr	r3, [pc, #788]	; (8009cd0 <PxMessagingTask+0x390>)
 80099bc:	2200      	movs	r2, #0
 80099be:	4641      	mov	r1, r8
 80099c0:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 80099c2:	f006 fe51 	bl	8010668 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80099c6:	2101      	movs	r1, #1
 80099c8:	4249      	negs	r1, r1
 80099ca:	2001      	movs	r0, #1
 80099cc:	f006 fb72 	bl	80100b4 <ulTaskNotifyTake>
		if (messageLength[port-1])
 80099d0:	4bbe      	ldr	r3, [pc, #760]	; (8009ccc <PxMessagingTask+0x38c>)
 80099d2:	5d59      	ldrb	r1, [r3, r5]
 80099d4:	2900      	cmp	r1, #0
 80099d6:	d0dd      	beq.n	8009994 <PxMessagingTask+0x54>
			if (cMessage[port-1][2]>>7) {
 80099d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	b25a      	sxtb	r2, r3
 80099de:	2a00      	cmp	r2, #0
 80099e0:	dbcb      	blt.n	800997a <PxMessagingTask+0x3a>
				longMessage = 0;
 80099e2:	4ab9      	ldr	r2, [pc, #740]	; (8009cc8 <PxMessagingTask+0x388>)
 80099e4:	2000      	movs	r0, #0
 80099e6:	7010      	strb	r0, [r2, #0]
			dst = cMessage[port-1][0]; 
 80099e8:	4ab6      	ldr	r2, [pc, #728]	; (8009cc4 <PxMessagingTask+0x384>)
 80099ea:	5cb0      	ldrb	r0, [r6, r2]
 80099ec:	4683      	mov	fp, r0
			src = cMessage[port-1][1];	
 80099ee:	1992      	adds	r2, r2, r6
 80099f0:	7852      	ldrb	r2, [r2, #1]
 80099f2:	9204      	str	r2, [sp, #16]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 80099f4:	2201      	movs	r2, #1
 80099f6:	401a      	ands	r2, r3
			shift = 0;
 80099f8:	0014      	movs	r4, r2
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 80099fa:	4fb6      	ldr	r7, [pc, #728]	; (8009cd4 <PxMessagingTask+0x394>)
 80099fc:	0718      	lsls	r0, r3, #28
 80099fe:	0f80      	lsrs	r0, r0, #30
 8009a00:	71f8      	strb	r0, [r7, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 8009a02:	2060      	movs	r0, #96	; 0x60
 8009a04:	4018      	ands	r0, r3
 8009a06:	71b8      	strb	r0, [r7, #6]
			if (extendCode == true) {		
 8009a08:	079b      	lsls	r3, r3, #30
 8009a0a:	d5ba      	bpl.n	8009982 <PxMessagingTask+0x42>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8009a0c:	4bad      	ldr	r3, [pc, #692]	; (8009cc4 <PxMessagingTask+0x384>)
 8009a0e:	199b      	adds	r3, r3, r6
 8009a10:	189b      	adds	r3, r3, r2
 8009a12:	7918      	ldrb	r0, [r3, #4]
 8009a14:	0200      	lsls	r0, r0, #8
 8009a16:	78df      	ldrb	r7, [r3, #3]
 8009a18:	183f      	adds	r7, r7, r0
 8009a1a:	b2bf      	uxth	r7, r7
				++shift;
 8009a1c:	1c54      	adds	r4, r2, #1
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8009a1e:	465b      	mov	r3, fp
 8009a20:	3b01      	subs	r3, #1
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2bfc      	cmp	r3, #252	; 0xfc
 8009a26:	d901      	bls.n	8009a2c <PxMessagingTask+0xec>
 8009a28:	f001 fa0c 	bl	800ae44 <PxMessagingTask+0x1504>
 8009a2c:	4baa      	ldr	r3, [pc, #680]	; (8009cd8 <PxMessagingTask+0x398>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	455b      	cmp	r3, fp
 8009a32:	d101      	bne.n	8009a38 <PxMessagingTask+0xf8>
 8009a34:	f001 fa06 	bl	800ae44 <PxMessagingTask+0x1504>
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d101      	bne.n	8009a40 <PxMessagingTask+0x100>
 8009a3c:	f001 f9fc 	bl	800ae38 <PxMessagingTask+0x14f8>
				ForwardReceivedMessage(port);
 8009a40:	9808      	ldr	r0, [sp, #32]
 8009a42:	f7ff fc51 	bl	80092e8 <ForwardReceivedMessage>
				if (BOS.trace)
 8009a46:	4ba3      	ldr	r3, [pc, #652]	; (8009cd4 <PxMessagingTask+0x394>)
 8009a48:	79db      	ldrb	r3, [r3, #7]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d09e      	beq.n	800998c <PxMessagingTask+0x4c>
					indMode = IND_SHORT_BLINK;
 8009a4e:	4ba3      	ldr	r3, [pc, #652]	; (8009cdc <PxMessagingTask+0x39c>)
 8009a50:	2203      	movs	r2, #3
 8009a52:	701a      	strb	r2, [r3, #0]
 8009a54:	e79a      	b.n	800998c <PxMessagingTask+0x4c>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 8009a56:	2064      	movs	r0, #100	; 0x64
 8009a58:	f006 ff84 	bl	8010964 <HAL_Delay>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9a08      	ldr	r2, [sp, #32]
 8009a60:	4659      	mov	r1, fp
 8009a62:	9804      	ldr	r0, [sp, #16]
 8009a64:	f7fa fa5e 	bl	8003f24 <remoteBootloaderUpdate>
 8009a68:	e794      	b.n	8009994 <PxMessagingTask+0x54>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8009a6a:	2064      	movs	r0, #100	; 0x64
 8009a6c:	f006 ff7a 	bl	8010964 <HAL_Delay>
 8009a70:	4b94      	ldr	r3, [pc, #592]	; (8009cc4 <PxMessagingTask+0x384>)
 8009a72:	199b      	adds	r3, r3, r6
 8009a74:	5d1b      	ldrb	r3, [r3, r4]
 8009a76:	9a08      	ldr	r2, [sp, #32]
 8009a78:	4659      	mov	r1, fp
 8009a7a:	9804      	ldr	r0, [sp, #16]
 8009a7c:	f7fa fa52 	bl	8003f24 <remoteBootloaderUpdate>
 8009a80:	e788      	b.n	8009994 <PxMessagingTask+0x54>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009a82:	4b90      	ldr	r3, [pc, #576]	; (8009cc4 <PxMessagingTask+0x384>)
 8009a84:	199b      	adds	r3, r3, r6
 8009a86:	1859      	adds	r1, r3, r1
 8009a88:	3901      	subs	r1, #1
 8009a8a:	780b      	ldrb	r3, [r1, #0]
 8009a8c:	4a94      	ldr	r2, [pc, #592]	; (8009ce0 <PxMessagingTask+0x3a0>)
 8009a8e:	7812      	ldrb	r2, [r2, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d101      	bne.n	8009a98 <PxMessagingTask+0x158>
 8009a94:	f001 f9c3 	bl	800ae1e <PxMessagingTask+0x14de>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009a98:	4a91      	ldr	r2, [pc, #580]	; (8009ce0 <PxMessagingTask+0x3a0>)
 8009a9a:	7013      	strb	r3, [r2, #0]
 8009a9c:	4a91      	ldr	r2, [pc, #580]	; (8009ce4 <PxMessagingTask+0x3a4>)
 8009a9e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8009aa0:	9908      	ldr	r1, [sp, #32]
 8009aa2:	20ff      	movs	r0, #255	; 0xff
 8009aa4:	f7ff fc40 	bl	8009328 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009aa8:	4b88      	ldr	r3, [pc, #544]	; (8009ccc <PxMessagingTask+0x38c>)
 8009aaa:	5d5a      	ldrb	r2, [r3, r5]
 8009aac:	4b85      	ldr	r3, [pc, #532]	; (8009cc4 <PxMessagingTask+0x384>)
 8009aae:	199b      	adds	r3, r3, r6
 8009ab0:	189b      	adds	r3, r3, r2
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	701a      	strb	r2, [r3, #0]
				if (result == BOS_OK)
 8009ab8:	464b      	mov	r3, r9
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d000      	beq.n	8009ac0 <PxMessagingTask+0x180>
 8009abe:	e769      	b.n	8009994 <PxMessagingTask+0x54>
				shift += 4;
 8009ac0:	3404      	adds	r4, #4
				numOfParams = messageLength[port-1] - shift;
 8009ac2:	4b82      	ldr	r3, [pc, #520]	; (8009ccc <PxMessagingTask+0x38c>)
 8009ac4:	5d59      	ldrb	r1, [r3, r5]
 8009ac6:	1b0a      	subs	r2, r1, r4
 8009ac8:	b2d3      	uxtb	r3, r2
 8009aca:	9306      	str	r3, [sp, #24]
					switch (code)
 8009acc:	2f23      	cmp	r7, #35	; 0x23
 8009ace:	d901      	bls.n	8009ad4 <PxMessagingTask+0x194>
 8009ad0:	f001 f976 	bl	800adc0 <PxMessagingTask+0x1480>
 8009ad4:	00bb      	lsls	r3, r7, #2
 8009ad6:	4a84      	ldr	r2, [pc, #528]	; (8009ce8 <PxMessagingTask+0x3a8>)
 8009ad8:	58d3      	ldr	r3, [r2, r3]
 8009ada:	469f      	mov	pc, r3
							for (p=0 ; p<numOfParams ; p++) 
 8009adc:	9b06      	ldr	r3, [sp, #24]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d01f      	beq.n	8009b22 <PxMessagingTask+0x1e2>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 8009ae2:	9b04      	ldr	r3, [sp, #16]
 8009ae4:	1e58      	subs	r0, r3, #1
 8009ae6:	0042      	lsls	r2, r0, #1
 8009ae8:	4b80      	ldr	r3, [pc, #512]	; (8009cec <PxMessagingTask+0x3ac>)
 8009aea:	5ad3      	ldrh	r3, [r2, r3]
 8009aec:	4652      	mov	r2, sl
 8009aee:	1911      	adds	r1, r2, r4
 8009af0:	4a74      	ldr	r2, [pc, #464]	; (8009cc4 <PxMessagingTask+0x384>)
 8009af2:	1889      	adds	r1, r1, r2
 8009af4:	3201      	adds	r2, #1
 8009af6:	4452      	add	r2, sl
 8009af8:	1914      	adds	r4, r2, r4
 8009afa:	9a06      	ldr	r2, [sp, #24]
 8009afc:	3a01      	subs	r2, #1
 8009afe:	b2d2      	uxtb	r2, r2
 8009b00:	18a4      	adds	r4, r4, r2
 8009b02:	2780      	movs	r7, #128	; 0x80
 8009b04:	023f      	lsls	r7, r7, #8
 8009b06:	4684      	mov	ip, r0
 8009b08:	780a      	ldrb	r2, [r1, #0]
 8009b0a:	3a01      	subs	r2, #1
 8009b0c:	0038      	movs	r0, r7
 8009b0e:	4110      	asrs	r0, r2
 8009b10:	4303      	orrs	r3, r0
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	3101      	adds	r1, #1
							for (p=0 ; p<numOfParams ; p++) 
 8009b16:	42a1      	cmp	r1, r4
 8009b18:	d1f6      	bne.n	8009b08 <PxMessagingTask+0x1c8>
 8009b1a:	4660      	mov	r0, ip
 8009b1c:	0040      	lsls	r0, r0, #1
 8009b1e:	4a73      	ldr	r2, [pc, #460]	; (8009cec <PxMessagingTask+0x3ac>)
 8009b20:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 8009b22:	4b73      	ldr	r3, [pc, #460]	; (8009cf0 <PxMessagingTask+0x3b0>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	701a      	strb	r2, [r3, #0]
							break;		
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4699      	mov	r9, r3
 8009b2c:	e737      	b.n	800999e <PxMessagingTask+0x5e>
							indMode = IND_PING;	osDelay(10);
 8009b2e:	4b6b      	ldr	r3, [pc, #428]	; (8009cdc <PxMessagingTask+0x39c>)
 8009b30:	2201      	movs	r2, #1
 8009b32:	701a      	strb	r2, [r3, #0]
 8009b34:	200a      	movs	r0, #10
 8009b36:	f004 feea 	bl	800e90e <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009b3a:	4b66      	ldr	r3, [pc, #408]	; (8009cd4 <PxMessagingTask+0x394>)
 8009b3c:	799b      	ldrb	r3, [r3, #6]
 8009b3e:	2240      	movs	r2, #64	; 0x40
 8009b40:	4393      	bics	r3, r2
 8009b42:	2200      	movs	r2, #0
 8009b44:	4691      	mov	r9, r2
 8009b46:	2b20      	cmp	r3, #32
 8009b48:	d000      	beq.n	8009b4c <PxMessagingTask+0x20c>
 8009b4a:	e728      	b.n	800999e <PxMessagingTask+0x5e>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 8009b4c:	2102      	movs	r1, #2
 8009b4e:	9804      	ldr	r0, [sp, #16]
 8009b50:	f7ff fc32 	bl	80093b8 <SendMessageToModule>
 8009b54:	e723      	b.n	800999e <PxMessagingTask+0x5e>
							if (!moduleAlias[myID][0])
 8009b56:	4b60      	ldr	r3, [pc, #384]	; (8009cd8 <PxMessagingTask+0x398>)
 8009b58:	781a      	ldrb	r2, [r3, #0]
 8009b5a:	0093      	lsls	r3, r2, #2
 8009b5c:	189b      	adds	r3, r3, r2
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	4a64      	ldr	r2, [pc, #400]	; (8009cf4 <PxMessagingTask+0x3b4>)
 8009b62:	5c9b      	ldrb	r3, [r3, r2]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d118      	bne.n	8009b9a <PxMessagingTask+0x25a>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 8009b68:	9a04      	ldr	r2, [sp, #16]
 8009b6a:	4963      	ldr	r1, [pc, #396]	; (8009cf8 <PxMessagingTask+0x3b8>)
 8009b6c:	4863      	ldr	r0, [pc, #396]	; (8009cfc <PxMessagingTask+0x3bc>)
 8009b6e:	f00a fdf3 	bl	8014758 <sprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8009b72:	4c62      	ldr	r4, [pc, #392]	; (8009cfc <PxMessagingTask+0x3bc>)
 8009b74:	0020      	movs	r0, r4
 8009b76:	f7f6 facf 	bl	8000118 <strlen>
 8009b7a:	b282      	uxth	r2, r0
 8009b7c:	4b60      	ldr	r3, [pc, #384]	; (8009d00 <PxMessagingTask+0x3c0>)
 8009b7e:	7818      	ldrb	r0, [r3, #0]
 8009b80:	2301      	movs	r3, #1
 8009b82:	425b      	negs	r3, r3
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	3333      	adds	r3, #51	; 0x33
 8009b88:	0021      	movs	r1, r4
 8009b8a:	f004 f9bb 	bl	800df04 <writePxMutex>
							responseStatus = BOS_OK;								
 8009b8e:	4b58      	ldr	r3, [pc, #352]	; (8009cf0 <PxMessagingTask+0x3b0>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	701a      	strb	r2, [r3, #0]
							break;
 8009b94:	2300      	movs	r3, #0
 8009b96:	4699      	mov	r9, r3
 8009b98:	e701      	b.n	800999e <PxMessagingTask+0x5e>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8009b9a:	230a      	movs	r3, #10
 8009b9c:	9904      	ldr	r1, [sp, #16]
 8009b9e:	434b      	muls	r3, r1
 8009ba0:	4a54      	ldr	r2, [pc, #336]	; (8009cf4 <PxMessagingTask+0x3b4>)
 8009ba2:	189b      	adds	r3, r3, r2
 8009ba4:	000a      	movs	r2, r1
 8009ba6:	4957      	ldr	r1, [pc, #348]	; (8009d04 <PxMessagingTask+0x3c4>)
 8009ba8:	4854      	ldr	r0, [pc, #336]	; (8009cfc <PxMessagingTask+0x3bc>)
 8009baa:	f00a fdd5 	bl	8014758 <sprintf>
 8009bae:	e7e0      	b.n	8009b72 <PxMessagingTask+0x232>
							IND_ON();
 8009bb0:	2180      	movs	r1, #128	; 0x80
 8009bb2:	2090      	movs	r0, #144	; 0x90
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	0109      	lsls	r1, r1, #4
 8009bb8:	05c0      	lsls	r0, r0, #23
 8009bba:	f007 ff9f 	bl	8011afc <HAL_GPIO_WritePin>
							break;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	4699      	mov	r9, r3
 8009bc2:	e6ec      	b.n	800999e <PxMessagingTask+0x5e>
							IND_OFF();
 8009bc4:	2180      	movs	r1, #128	; 0x80
 8009bc6:	2090      	movs	r0, #144	; 0x90
 8009bc8:	2200      	movs	r2, #0
 8009bca:	0109      	lsls	r1, r1, #4
 8009bcc:	05c0      	lsls	r0, r0, #23
 8009bce:	f007 ff95 	bl	8011afc <HAL_GPIO_WritePin>
							break;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	4699      	mov	r9, r3
 8009bd6:	e6e2      	b.n	800999e <PxMessagingTask+0x5e>
							IND_toggle();
 8009bd8:	2180      	movs	r1, #128	; 0x80
 8009bda:	2090      	movs	r0, #144	; 0x90
 8009bdc:	0109      	lsls	r1, r1, #4
 8009bde:	05c0      	lsls	r0, r0, #23
 8009be0:	f007 ff92 	bl	8011b08 <HAL_GPIO_TogglePin>
							break;
 8009be4:	2300      	movs	r3, #0
 8009be6:	4699      	mov	r9, r3
 8009be8:	e6d9      	b.n	800999e <PxMessagingTask+0x5e>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 8009bea:	4f47      	ldr	r7, [pc, #284]	; (8009d08 <PxMessagingTask+0x3c8>)
 8009bec:	00ab      	lsls	r3, r5, #2
 8009bee:	4a35      	ldr	r2, [pc, #212]	; (8009cc4 <PxMessagingTask+0x384>)
 8009bf0:	1992      	adds	r2, r2, r6
 8009bf2:	1910      	adds	r0, r2, r4
 8009bf4:	7881      	ldrb	r1, [r0, #2]
 8009bf6:	468c      	mov	ip, r1
 8009bf8:	9904      	ldr	r1, [sp, #16]
 8009bfa:	0209      	lsls	r1, r1, #8
 8009bfc:	4461      	add	r1, ip
 8009bfe:	53d9      	strh	r1, [r3, r7]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 8009c00:	18fb      	adds	r3, r7, r3
 8009c02:	5d11      	ldrb	r1, [r2, r4]
 8009c04:	0209      	lsls	r1, r1, #8
 8009c06:	7842      	ldrb	r2, [r0, #1]
 8009c08:	1852      	adds	r2, r2, r1
 8009c0a:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 8009c0c:	4b3f      	ldr	r3, [pc, #252]	; (8009d0c <PxMessagingTask+0x3cc>)
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	4a3f      	ldr	r2, [pc, #252]	; (8009d10 <PxMessagingTask+0x3d0>)
 8009c12:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 8009c14:	0a1b      	lsrs	r3, r3, #8
 8009c16:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 8009c18:	9c08      	ldr	r4, [sp, #32]
 8009c1a:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8009c1c:	2002      	movs	r0, #2
 8009c1e:	f004 fe76 	bl	800e90e <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 8009c22:	2303      	movs	r3, #3
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	3308      	adds	r3, #8
 8009c28:	2200      	movs	r2, #0
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	0020      	movs	r0, r4
 8009c2e:	f7ff f99b 	bl	8008f68 <SendMessageFromPort>
							break;
 8009c32:	2300      	movs	r3, #0
 8009c34:	4699      	mov	r9, r3
 8009c36:	e6b2      	b.n	800999e <PxMessagingTask+0x5e>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8009c38:	4f33      	ldr	r7, [pc, #204]	; (8009d08 <PxMessagingTask+0x3c8>)
 8009c3a:	00ab      	lsls	r3, r5, #2
 8009c3c:	4a21      	ldr	r2, [pc, #132]	; (8009cc4 <PxMessagingTask+0x384>)
 8009c3e:	1992      	adds	r2, r2, r6
 8009c40:	1910      	adds	r0, r2, r4
 8009c42:	7881      	ldrb	r1, [r0, #2]
 8009c44:	468c      	mov	ip, r1
 8009c46:	9904      	ldr	r1, [sp, #16]
 8009c48:	0209      	lsls	r1, r1, #8
 8009c4a:	4461      	add	r1, ip
 8009c4c:	53d9      	strh	r1, [r3, r7]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8009c4e:	18fb      	adds	r3, r7, r3
 8009c50:	5d11      	ldrb	r1, [r2, r4]
 8009c52:	0209      	lsls	r1, r1, #8
 8009c54:	7842      	ldrb	r2, [r0, #1]
 8009c56:	1852      	adds	r2, r2, r1
 8009c58:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8009c5a:	4b25      	ldr	r3, [pc, #148]	; (8009cf0 <PxMessagingTask+0x3b0>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	701a      	strb	r2, [r3, #0]
							break;
 8009c60:	2300      	movs	r3, #0
 8009c62:	4699      	mov	r9, r3
 8009c64:	e69b      	b.n	800999e <PxMessagingTask+0x5e>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 8009c66:	9808      	ldr	r0, [sp, #32]
 8009c68:	f7f9 ffc4 	bl	8003bf4 <ExploreNeighbors>
 8009c6c:	4b1b      	ldr	r3, [pc, #108]	; (8009cdc <PxMessagingTask+0x39c>)
 8009c6e:	2202      	movs	r2, #2
 8009c70:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 8009c72:	200a      	movs	r0, #10
 8009c74:	f004 fe4b 	bl	800e90e <osDelay>
 8009c78:	4f23      	ldr	r7, [pc, #140]	; (8009d08 <PxMessagingTask+0x3c8>)
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8009c7a:	2401      	movs	r4, #1
							osDelay(10); temp = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	e004      	b.n	8009c8c <PxMessagingTask+0x34c>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8009c82:	3401      	adds	r4, #1
 8009c84:	b2e4      	uxtb	r4, r4
 8009c86:	3704      	adds	r7, #4
 8009c88:	2c07      	cmp	r4, #7
 8009c8a:	d011      	beq.n	8009cb0 <PxMessagingTask+0x370>
								if (neighbors[p-1][0])
 8009c8c:	883b      	ldrh	r3, [r7, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0f7      	beq.n	8009c82 <PxMessagingTask+0x342>
									messageParams[temp] = p;
 8009c92:	4a1f      	ldr	r2, [pc, #124]	; (8009d10 <PxMessagingTask+0x3d0>)
 8009c94:	9b05      	ldr	r3, [sp, #20]
 8009c96:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 8009c98:	1c58      	adds	r0, r3, #1
 8009c9a:	4694      	mov	ip, r2
 8009c9c:	4460      	add	r0, ip
 8009c9e:	2204      	movs	r2, #4
 8009ca0:	0039      	movs	r1, r7
 8009ca2:	f00a fb24 	bl	80142ee <memcpy>
									temp += 5;		
 8009ca6:	9b05      	ldr	r3, [sp, #20]
 8009ca8:	3305      	adds	r3, #5
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	9305      	str	r3, [sp, #20]
 8009cae:	e7e8      	b.n	8009c82 <PxMessagingTask+0x342>
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 8009cb0:	466b      	mov	r3, sp
 8009cb2:	8a9a      	ldrh	r2, [r3, #20]
 8009cb4:	210d      	movs	r1, #13
 8009cb6:	9804      	ldr	r0, [sp, #16]
 8009cb8:	f7ff fb7e 	bl	80093b8 <SendMessageToModule>
							break;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4699      	mov	r9, r3
 8009cc0:	e66d      	b.n	800999e <PxMessagingTask+0x5e>
 8009cc2:	46c0      	nop			; (mov r8, r8)
 8009cc4:	20000d80 	.word	0x20000d80
 8009cc8:	20000f6b 	.word	0x20000f6b
 8009ccc:	20000fa8 	.word	0x20000fa8
 8009cd0:	20001168 	.word	0x20001168
 8009cd4:	20006a18 	.word	0x20006a18
 8009cd8:	200010e4 	.word	0x200010e4
 8009cdc:	20000f6a 	.word	0x20000f6a
 8009ce0:	200015fe 	.word	0x200015fe
 8009ce4:	20000d2e 	.word	0x20000d2e
 8009ce8:	0801b398 	.word	0x0801b398
 8009cec:	20006e84 	.word	0x20006e84
 8009cf0:	20001180 	.word	0x20001180
 8009cf4:	20000fe0 	.word	0x20000fe0
 8009cf8:	08019de8 	.word	0x08019de8
 8009cfc:	20001748 	.word	0x20001748
 8009d00:	20000b07 	.word	0x20000b07
 8009d04:	08019dfc 	.word	0x08019dfc
 8009d08:	200010e8 	.word	0x200010e8
 8009d0c:	20000050 	.word	0x20000050
 8009d10:	20000fb0 	.word	0x20000fb0
							temp = numOfParams/5;
 8009d14:	2105      	movs	r1, #5
 8009d16:	9806      	ldr	r0, [sp, #24]
 8009d18:	f7f6 fa1a 	bl	8000150 <__udivsi3>
 8009d1c:	b2c2      	uxtb	r2, r0
 8009d1e:	9205      	str	r2, [sp, #20]
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	d018      	beq.n	8009d56 <PxMessagingTask+0x416>
 8009d24:	4653      	mov	r3, sl
 8009d26:	191f      	adds	r7, r3, r4
 8009d28:	4bdb      	ldr	r3, [pc, #876]	; (800a098 <PxMessagingTask+0x758>)
 8009d2a:	18ff      	adds	r7, r7, r3
 8009d2c:	3305      	adds	r3, #5
 8009d2e:	4453      	add	r3, sl
 8009d30:	191c      	adds	r4, r3, r4
 8009d32:	1e53      	subs	r3, r2, #1
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	009a      	lsls	r2, r3, #2
 8009d38:	18d3      	adds	r3, r2, r3
 8009d3a:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 8009d3c:	4bd7      	ldr	r3, [pc, #860]	; (800a09c <PxMessagingTask+0x75c>)
 8009d3e:	4699      	mov	r9, r3
 8009d40:	7838      	ldrb	r0, [r7, #0]
 8009d42:	3801      	subs	r0, #1
 8009d44:	0080      	lsls	r0, r0, #2
 8009d46:	4448      	add	r0, r9
 8009d48:	1c79      	adds	r1, r7, #1
 8009d4a:	2204      	movs	r2, #4
 8009d4c:	f00a facf 	bl	80142ee <memcpy>
 8009d50:	3705      	adds	r7, #5
							for (uint8_t k=0 ; k<temp ; k++)  {
 8009d52:	42bc      	cmp	r4, r7
 8009d54:	d1f4      	bne.n	8009d40 <PxMessagingTask+0x400>
							responseStatus = BOS_OK;
 8009d56:	4bd2      	ldr	r3, [pc, #840]	; (800a0a0 <PxMessagingTask+0x760>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	701a      	strb	r2, [r3, #0]
							break;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4699      	mov	r9, r3
 8009d60:	e61d      	b.n	800999e <PxMessagingTask+0x5e>
 8009d62:	4653      	mov	r3, sl
 8009d64:	18e3      	adds	r3, r4, r3
 8009d66:	4acc      	ldr	r2, [pc, #816]	; (800a098 <PxMessagingTask+0x758>)
 8009d68:	4699      	mov	r9, r3
 8009d6a:	4491      	add	r9, r2
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009d6c:	2701      	movs	r7, #1
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 8009d6e:	9b08      	ldr	r3, [sp, #32]
 8009d70:	42bb      	cmp	r3, r7
 8009d72:	d006      	beq.n	8009d82 <PxMessagingTask+0x442>
 8009d74:	0038      	movs	r0, r7
 8009d76:	f004 f8a3 	bl	800dec0 <GetUart>
 8009d7a:	464b      	mov	r3, r9
 8009d7c:	7819      	ldrb	r1, [r3, #0]
 8009d7e:	f004 f939 	bl	800dff4 <SwapUartPins>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009d82:	3701      	adds	r7, #1
 8009d84:	b2ff      	uxtb	r7, r7
 8009d86:	2301      	movs	r3, #1
 8009d88:	469c      	mov	ip, r3
 8009d8a:	44e1      	add	r9, ip
 8009d8c:	2f07      	cmp	r7, #7
 8009d8e:	d1ee      	bne.n	8009d6e <PxMessagingTask+0x42e>
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 8009d90:	9808      	ldr	r0, [sp, #32]
 8009d92:	f004 f895 	bl	800dec0 <GetUart>
 8009d96:	4bc0      	ldr	r3, [pc, #768]	; (800a098 <PxMessagingTask+0x758>)
 8009d98:	199b      	adds	r3, r3, r6
 8009d9a:	191c      	adds	r4, r3, r4
 8009d9c:	7aa1      	ldrb	r1, [r4, #10]
 8009d9e:	f004 f929 	bl	800dff4 <SwapUartPins>
							break;
 8009da2:	2300      	movs	r3, #0
 8009da4:	4699      	mov	r9, r3
 8009da6:	e5fa      	b.n	800999e <PxMessagingTask+0x5e>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 8009da8:	0020      	movs	r0, r4
 8009daa:	4bbb      	ldr	r3, [pc, #748]	; (800a098 <PxMessagingTask+0x758>)
 8009dac:	199b      	adds	r3, r3, r6
 8009dae:	5d1b      	ldrb	r3, [r3, r4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <PxMessagingTask+0x48a>
								myID = cMessage[port-1][1+shift];
 8009db4:	2238      	movs	r2, #56	; 0x38
 8009db6:	436a      	muls	r2, r5
 8009db8:	4bb7      	ldr	r3, [pc, #732]	; (800a098 <PxMessagingTask+0x758>)
 8009dba:	189b      	adds	r3, r3, r2
 8009dbc:	191c      	adds	r4, r3, r4
 8009dbe:	7862      	ldrb	r2, [r4, #1]
 8009dc0:	4bb8      	ldr	r3, [pc, #736]	; (800a0a4 <PxMessagingTask+0x764>)
 8009dc2:	701a      	strb	r2, [r3, #0]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4699      	mov	r9, r3
 8009dc8:	e5e9      	b.n	800999e <PxMessagingTask+0x5e>
 8009dca:	2200      	movs	r2, #0
 8009dcc:	4691      	mov	r9, r2
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d000      	beq.n	8009dd4 <PxMessagingTask+0x494>
 8009dd2:	e5e4      	b.n	800999e <PxMessagingTask+0x5e>
								messageParams[0] = 0;											/* change own ID */
 8009dd4:	49b4      	ldr	r1, [pc, #720]	; (800a0a8 <PxMessagingTask+0x768>)
 8009dd6:	700a      	strb	r2, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 8009dd8:	3238      	adds	r2, #56	; 0x38
 8009dda:	436a      	muls	r2, r5
 8009ddc:	4bae      	ldr	r3, [pc, #696]	; (800a098 <PxMessagingTask+0x758>)
 8009dde:	189b      	adds	r3, r3, r2
 8009de0:	181b      	adds	r3, r3, r0
 8009de2:	785a      	ldrb	r2, [r3, #1]
 8009de4:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 8009de6:	7898      	ldrb	r0, [r3, #2]
 8009de8:	2303      	movs	r3, #3
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	330d      	adds	r3, #13
 8009dee:	464a      	mov	r2, r9
 8009df0:	4649      	mov	r1, r9
 8009df2:	f7ff f8b9 	bl	8008f68 <SendMessageFromPort>
 8009df6:	e5d2      	b.n	800999e <PxMessagingTask+0x5e>
							if (longMessage) {
 8009df8:	4bac      	ldr	r3, [pc, #688]	; (800a0ac <PxMessagingTask+0x76c>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d012      	beq.n	8009e26 <PxMessagingTask+0x4e6>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 8009e00:	4bab      	ldr	r3, [pc, #684]	; (800a0b0 <PxMessagingTask+0x770>)
 8009e02:	4699      	mov	r9, r3
 8009e04:	881f      	ldrh	r7, [r3, #0]
 8009e06:	48ab      	ldr	r0, [pc, #684]	; (800a0b4 <PxMessagingTask+0x774>)
 8009e08:	1838      	adds	r0, r7, r0
 8009e0a:	4454      	add	r4, sl
 8009e0c:	49a2      	ldr	r1, [pc, #648]	; (800a098 <PxMessagingTask+0x758>)
 8009e0e:	1861      	adds	r1, r4, r1
 8009e10:	9c06      	ldr	r4, [sp, #24]
 8009e12:	0022      	movs	r2, r4
 8009e14:	f00a fa6b 	bl	80142ee <memcpy>
								longMessageLastPtr += numOfParams;
 8009e18:	46a4      	mov	ip, r4
 8009e1a:	4467      	add	r7, ip
 8009e1c:	464b      	mov	r3, r9
 8009e1e:	801f      	strh	r7, [r3, #0]
 8009e20:	2300      	movs	r3, #0
 8009e22:	4699      	mov	r9, r3
 8009e24:	e5bb      	b.n	800999e <PxMessagingTask+0x5e>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009e26:	4ba2      	ldr	r3, [pc, #648]	; (800a0b0 <PxMessagingTask+0x770>)
 8009e28:	469b      	mov	fp, r3
 8009e2a:	881f      	ldrh	r7, [r3, #0]
 8009e2c:	4ba1      	ldr	r3, [pc, #644]	; (800a0b4 <PxMessagingTask+0x774>)
 8009e2e:	4699      	mov	r9, r3
 8009e30:	18f8      	adds	r0, r7, r3
 8009e32:	4454      	add	r4, sl
 8009e34:	4998      	ldr	r1, [pc, #608]	; (800a098 <PxMessagingTask+0x758>)
 8009e36:	1861      	adds	r1, r4, r1
 8009e38:	9c06      	ldr	r4, [sp, #24]
 8009e3a:	0022      	movs	r2, r4
 8009e3c:	f00a fa57 	bl	80142ee <memcpy>
								longMessageLastPtr += numOfParams;
 8009e40:	193c      	adds	r4, r7, r4
 8009e42:	b2a4      	uxth	r4, r4
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 8009e44:	2116      	movs	r1, #22
 8009e46:	0020      	movs	r0, r4
 8009e48:	f7f6 f982 	bl	8000150 <__udivsi3>
 8009e4c:	4b9a      	ldr	r3, [pc, #616]	; (800a0b8 <PxMessagingTask+0x778>)
 8009e4e:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 8009e50:	0022      	movs	r2, r4
 8009e52:	4649      	mov	r1, r9
 8009e54:	4899      	ldr	r0, [pc, #612]	; (800a0bc <PxMessagingTask+0x77c>)
 8009e56:	f00a fa4a 	bl	80142ee <memcpy>
								longMessageLastPtr = 0;
 8009e5a:	2400      	movs	r4, #0
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	801c      	strh	r4, [r3, #0]
 8009e60:	46a1      	mov	r9, r4
 8009e62:	e59c      	b.n	800999e <PxMessagingTask+0x5e>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8009e64:	2401      	movs	r4, #1
							temp = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	9305      	str	r3, [sp, #20]
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8009e6a:	2780      	movs	r7, #128	; 0x80
 8009e6c:	023f      	lsls	r7, r7, #8
 8009e6e:	e003      	b.n	8009e78 <PxMessagingTask+0x538>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8009e70:	3401      	adds	r4, #1
 8009e72:	b2e4      	uxtb	r4, r4
 8009e74:	2c07      	cmp	r4, #7
 8009e76:	d00c      	beq.n	8009e92 <PxMessagingTask+0x552>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8009e78:	0020      	movs	r0, r4
 8009e7a:	f004 f821 	bl	800dec0 <GetUart>
 8009e7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009e80:	42bb      	cmp	r3, r7
 8009e82:	d1f5      	bne.n	8009e70 <PxMessagingTask+0x530>
									messageParams[temp++] = p;
 8009e84:	9a05      	ldr	r2, [sp, #20]
 8009e86:	1c53      	adds	r3, r2, #1
 8009e88:	4987      	ldr	r1, [pc, #540]	; (800a0a8 <PxMessagingTask+0x768>)
 8009e8a:	548c      	strb	r4, [r1, r2]
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	9305      	str	r3, [sp, #20]
 8009e90:	e7ee      	b.n	8009e70 <PxMessagingTask+0x530>
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 8009e92:	466b      	mov	r3, sp
 8009e94:	8a9a      	ldrh	r2, [r3, #20]
 8009e96:	2114      	movs	r1, #20
 8009e98:	9804      	ldr	r0, [sp, #16]
 8009e9a:	f7ff fa8d 	bl	80093b8 <SendMessageToModule>
							break;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	4699      	mov	r9, r3
 8009ea2:	e57c      	b.n	800999e <PxMessagingTask+0x5e>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 8009ea4:	4b7c      	ldr	r3, [pc, #496]	; (800a098 <PxMessagingTask+0x758>)
 8009ea6:	199b      	adds	r3, r3, r6
 8009ea8:	5d1a      	ldrb	r2, [r3, r4]
 8009eaa:	0612      	lsls	r2, r2, #24
 8009eac:	191b      	adds	r3, r3, r4
 8009eae:	78d9      	ldrb	r1, [r3, #3]
 8009eb0:	1852      	adds	r2, r2, r1
 8009eb2:	7859      	ldrb	r1, [r3, #1]
 8009eb4:	0409      	lsls	r1, r1, #16
 8009eb6:	1852      	adds	r2, r2, r1
 8009eb8:	7899      	ldrb	r1, [r3, #2]
 8009eba:	0209      	lsls	r1, r1, #8
 8009ebc:	1852      	adds	r2, r2, r1
 8009ebe:	920b      	str	r2, [sp, #44]	; 0x2c
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 8009ec0:	791b      	ldrb	r3, [r3, #4]
 8009ec2:	2bff      	cmp	r3, #255	; 0xff
 8009ec4:	d01c      	beq.n	8009f00 <PxMessagingTask+0x5c0>
									for (p=0 ; p<numOfParams ; p++) 
 8009ec6:	9b06      	ldr	r3, [sp, #24]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d016      	beq.n	8009efa <PxMessagingTask+0x5ba>
 8009ecc:	4653      	mov	r3, sl
 8009ece:	1d1f      	adds	r7, r3, #4
 8009ed0:	193f      	adds	r7, r7, r4
 8009ed2:	4b71      	ldr	r3, [pc, #452]	; (800a098 <PxMessagingTask+0x758>)
 8009ed4:	18ff      	adds	r7, r7, r3
 8009ed6:	3305      	adds	r3, #5
 8009ed8:	4453      	add	r3, sl
 8009eda:	191c      	adds	r4, r3, r4
 8009edc:	9b06      	ldr	r3, [sp, #24]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	18e4      	adds	r4, r4, r3
										temp = cMessage[port-1][4+shift+p];
 8009ee4:	783b      	ldrb	r3, [r7, #0]
 8009ee6:	9305      	str	r3, [sp, #20]
										if (temp>0 && temp<=NumOfPorts)	{
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	d915      	bls.n	8009f1a <PxMessagingTask+0x5da>
 8009eee:	3701      	adds	r7, #1
									for (p=0 ; p<numOfParams ; p++) 
 8009ef0:	42a7      	cmp	r7, r4
 8009ef2:	d1f7      	bne.n	8009ee4 <PxMessagingTask+0x5a4>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4699      	mov	r9, r3
 8009ef8:	e551      	b.n	800999e <PxMessagingTask+0x5e>
								temp = temp32 = 0;
 8009efa:	9305      	str	r3, [sp, #20]
									for (p=0 ; p<numOfParams ; p++) 
 8009efc:	4699      	mov	r9, r3
 8009efe:	e54e      	b.n	800999e <PxMessagingTask+0x5e>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009f00:	2401      	movs	r4, #1
										UpdateBaudrate(p, temp32); 
 8009f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f04:	0020      	movs	r0, r4
 8009f06:	f004 f86b 	bl	800dfe0 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 8009f0a:	3401      	adds	r4, #1
 8009f0c:	b2e4      	uxtb	r4, r4
 8009f0e:	2c07      	cmp	r4, #7
 8009f10:	d1f7      	bne.n	8009f02 <PxMessagingTask+0x5c2>
								temp = temp32 = 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	9305      	str	r3, [sp, #20]
 8009f16:	4699      	mov	r9, r3
 8009f18:	e541      	b.n	800999e <PxMessagingTask+0x5e>
											UpdateBaudrate(temp, temp32); 
 8009f1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f1c:	9805      	ldr	r0, [sp, #20]
 8009f1e:	f004 f85f 	bl	800dfe0 <UpdateBaudrate>
 8009f22:	e7e4      	b.n	8009eee <PxMessagingTask+0x5ae>
								SaveToRO();
 8009f24:	f001 ff88 	bl	800be38 <SaveToRO>
							SaveEEportsDir();
 8009f28:	f7f9 f9e8 	bl	80032fc <SaveEEportsDir>
							indMode = IND_PING;
 8009f2c:	4b64      	ldr	r3, [pc, #400]	; (800a0c0 <PxMessagingTask+0x780>)
 8009f2e:	2201      	movs	r2, #1
 8009f30:	701a      	strb	r2, [r3, #0]
							break;
 8009f32:	2300      	movs	r3, #0
 8009f34:	4699      	mov	r9, r3
 8009f36:	e532      	b.n	800999e <PxMessagingTask+0x5e>
							ClearEEportsDir();
 8009f38:	f7f9 fa0a 	bl	8003350 <ClearEEportsDir>
							ClearROtopology();
 8009f3c:	f002 f884 	bl	800c048 <ClearROtopology>
							osDelay(100);
 8009f40:	2064      	movs	r0, #100	; 0x64
 8009f42:	f004 fce4 	bl	800e90e <osDelay>
							indMode = IND_TOPOLOGY;
 8009f46:	4b5e      	ldr	r3, [pc, #376]	; (800a0c0 <PxMessagingTask+0x780>)
 8009f48:	2202      	movs	r2, #2
 8009f4a:	701a      	strb	r2, [r3, #0]
							break;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4699      	mov	r9, r3
 8009f50:	e525      	b.n	800999e <PxMessagingTask+0x5e>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009f52:	f004 fdf1 	bl	800eb38 <FreeRTOS_CLIGetOutputBuffer>
 8009f56:	900b      	str	r0, [sp, #44]	; 0x2c
							if (dst == BOS_BROADCAST)
 8009f58:	465b      	mov	r3, fp
 8009f5a:	2bff      	cmp	r3, #255	; 0xff
 8009f5c:	d028      	beq.n	8009fb0 <PxMessagingTask+0x670>
							else if (dst == BOS_MULTICAST)
 8009f5e:	2bfe      	cmp	r3, #254	; 0xfe
 8009f60:	d02f      	beq.n	8009fc2 <PxMessagingTask+0x682>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 8009f62:	4454      	add	r4, sl
 8009f64:	494c      	ldr	r1, [pc, #304]	; (800a098 <PxMessagingTask+0x758>)
 8009f66:	1861      	adds	r1, r4, r1
 8009f68:	9a06      	ldr	r2, [sp, #24]
 8009f6a:	4856      	ldr	r0, [pc, #344]	; (800a0c4 <PxMessagingTask+0x784>)
 8009f6c:	f00a f9bf 	bl	80142ee <memcpy>
								temp = PcPort; PcPort = port;
 8009f70:	4c55      	ldr	r4, [pc, #340]	; (800a0c8 <PxMessagingTask+0x788>)
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8009f72:	4b54      	ldr	r3, [pc, #336]	; (800a0c4 <PxMessagingTask+0x784>)
 8009f74:	469b      	mov	fp, r3
								if (BOS.response == BOS_RESPONSE_ALL)
 8009f76:	4b55      	ldr	r3, [pc, #340]	; (800a0cc <PxMessagingTask+0x78c>)
 8009f78:	4699      	mov	r9, r3
								temp = PcPort; PcPort = port;
 8009f7a:	7823      	ldrb	r3, [r4, #0]
 8009f7c:	9305      	str	r3, [sp, #20]
 8009f7e:	9a08      	ldr	r2, [sp, #32]
 8009f80:	7022      	strb	r2, [r4, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8009f82:	2299      	movs	r2, #153	; 0x99
 8009f84:	0092      	lsls	r2, r2, #2
 8009f86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f88:	4658      	mov	r0, fp
 8009f8a:	f004 fd57 	bl	800ea3c <FreeRTOS_CLIProcessCommand>
 8009f8e:	0007      	movs	r7, r0
								PcPort = temp;
 8009f90:	9b05      	ldr	r3, [sp, #20]
 8009f92:	7023      	strb	r3, [r4, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 8009f94:	464b      	mov	r3, r9
 8009f96:	799b      	ldrb	r3, [r3, #6]
 8009f98:	2b60      	cmp	r3, #96	; 0x60
 8009f9a:	d01d      	beq.n	8009fd8 <PxMessagingTask+0x698>
							while( xReturned != pdFALSE );								
 8009f9c:	2f00      	cmp	r7, #0
 8009f9e:	d1ec      	bne.n	8009f7a <PxMessagingTask+0x63a>
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 8009fa0:	2232      	movs	r2, #50	; 0x32
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	4847      	ldr	r0, [pc, #284]	; (800a0c4 <PxMessagingTask+0x784>)
 8009fa6:	f00a f9ab 	bl	8014300 <memset>
							break;
 8009faa:	2300      	movs	r3, #0
 8009fac:	4699      	mov	r9, r3
 8009fae:	e4f6      	b.n	800999e <PxMessagingTask+0x5e>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 8009fb0:	9a06      	ldr	r2, [sp, #24]
 8009fb2:	3a01      	subs	r2, #1
 8009fb4:	4454      	add	r4, sl
 8009fb6:	4938      	ldr	r1, [pc, #224]	; (800a098 <PxMessagingTask+0x758>)
 8009fb8:	1861      	adds	r1, r4, r1
 8009fba:	4842      	ldr	r0, [pc, #264]	; (800a0c4 <PxMessagingTask+0x784>)
 8009fbc:	f00a f997 	bl	80142ee <memcpy>
 8009fc0:	e7d6      	b.n	8009f70 <PxMessagingTask+0x630>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 8009fc2:	9b06      	ldr	r3, [sp, #24]
 8009fc4:	9a05      	ldr	r2, [sp, #20]
 8009fc6:	1a9a      	subs	r2, r3, r2
 8009fc8:	3a02      	subs	r2, #2
 8009fca:	4454      	add	r4, sl
 8009fcc:	4932      	ldr	r1, [pc, #200]	; (800a098 <PxMessagingTask+0x758>)
 8009fce:	1861      	adds	r1, r4, r1
 8009fd0:	483c      	ldr	r0, [pc, #240]	; (800a0c4 <PxMessagingTask+0x784>)
 8009fd2:	f00a f98c 	bl	80142ee <memcpy>
 8009fd6:	e7cb      	b.n	8009f70 <PxMessagingTask+0x630>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 8009fd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009fda:	f7f6 f89d 	bl	8000118 <strlen>
 8009fde:	0002      	movs	r2, r0
 8009fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fe2:	4831      	ldr	r0, [pc, #196]	; (800a0a8 <PxMessagingTask+0x768>)
 8009fe4:	f00a f983 	bl	80142ee <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 8009fe8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009fea:	f7f6 f895 	bl	8000118 <strlen>
 8009fee:	b282      	uxth	r2, r0
 8009ff0:	2118      	movs	r1, #24
 8009ff2:	9804      	ldr	r0, [sp, #16]
 8009ff4:	f7ff f9e0 	bl	80093b8 <SendMessageToModule>
									osDelay(10); 
 8009ff8:	200a      	movs	r0, #10
 8009ffa:	f004 fc88 	bl	800e90e <osDelay>
 8009ffe:	e7cd      	b.n	8009f9c <PxMessagingTask+0x65c>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a000:	f004 fd9a 	bl	800eb38 <FreeRTOS_CLIGetOutputBuffer>
 800a004:	0007      	movs	r7, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a006:	f7f6 f887 	bl	8000118 <strlen>
 800a00a:	0002      	movs	r2, r0
 800a00c:	2100      	movs	r1, #0
 800a00e:	0038      	movs	r0, r7
 800a010:	f00a f976 	bl	8014300 <memset>
							if (longMessage) {
 800a014:	4b25      	ldr	r3, [pc, #148]	; (800a0ac <PxMessagingTask+0x76c>)
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d013      	beq.n	800a044 <PxMessagingTask+0x704>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800a01c:	4b24      	ldr	r3, [pc, #144]	; (800a0b0 <PxMessagingTask+0x770>)
 800a01e:	4699      	mov	r9, r3
 800a020:	8818      	ldrh	r0, [r3, #0]
 800a022:	1838      	adds	r0, r7, r0
 800a024:	4454      	add	r4, sl
 800a026:	491c      	ldr	r1, [pc, #112]	; (800a098 <PxMessagingTask+0x758>)
 800a028:	1861      	adds	r1, r4, r1
 800a02a:	9c06      	ldr	r4, [sp, #24]
 800a02c:	0022      	movs	r2, r4
 800a02e:	f00a f95e 	bl	80142ee <memcpy>
								longMessageLastPtr += numOfParams;
 800a032:	464b      	mov	r3, r9
 800a034:	881a      	ldrh	r2, [r3, #0]
 800a036:	46a4      	mov	ip, r4
 800a038:	4462      	add	r2, ip
 800a03a:	464b      	mov	r3, r9
 800a03c:	801a      	strh	r2, [r3, #0]
 800a03e:	2300      	movs	r3, #0
 800a040:	4699      	mov	r9, r3
 800a042:	e4ac      	b.n	800999e <PxMessagingTask+0x5e>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800a044:	4b1a      	ldr	r3, [pc, #104]	; (800a0b0 <PxMessagingTask+0x770>)
 800a046:	4699      	mov	r9, r3
 800a048:	8818      	ldrh	r0, [r3, #0]
 800a04a:	1838      	adds	r0, r7, r0
 800a04c:	4454      	add	r4, sl
 800a04e:	4912      	ldr	r1, [pc, #72]	; (800a098 <PxMessagingTask+0x758>)
 800a050:	1861      	adds	r1, r4, r1
 800a052:	9a06      	ldr	r2, [sp, #24]
 800a054:	f00a f94b 	bl	80142ee <memcpy>
								longMessageLastPtr = 0;
 800a058:	2400      	movs	r4, #0
 800a05a:	464b      	mov	r3, r9
 800a05c:	801c      	strh	r4, [r3, #0]
								responseStatus = BOS_OK;
 800a05e:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <PxMessagingTask+0x760>)
 800a060:	701c      	strb	r4, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 800a062:	0023      	movs	r3, r4
 800a064:	0022      	movs	r2, r4
 800a066:	0021      	movs	r1, r4
 800a068:	4819      	ldr	r0, [pc, #100]	; (800a0d0 <PxMessagingTask+0x790>)
 800a06a:	6800      	ldr	r0, [r0, #0]
 800a06c:	f006 f86e 	bl	801014c <xTaskGenericNotify>
 800a070:	46a1      	mov	r9, r4
 800a072:	e494      	b.n	800999e <PxMessagingTask+0x5e>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 800a074:	4b17      	ldr	r3, [pc, #92]	; (800a0d4 <PxMessagingTask+0x794>)
 800a076:	4a18      	ldr	r2, [pc, #96]	; (800a0d8 <PxMessagingTask+0x798>)
 800a078:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 800a07a:	4b11      	ldr	r3, [pc, #68]	; (800a0c0 <PxMessagingTask+0x780>)
 800a07c:	2201      	movs	r2, #1
 800a07e:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 800a080:	200a      	movs	r0, #10
 800a082:	f004 fc44 	bl	800e90e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	4b14      	ldr	r3, [pc, #80]	; (800a0dc <PxMessagingTask+0x79c>)
 800a08c:	4a14      	ldr	r2, [pc, #80]	; (800a0e0 <PxMessagingTask+0x7a0>)
 800a08e:	60da      	str	r2, [r3, #12]
 800a090:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a094:	46c0      	nop			; (mov r8, r8)
 800a096:	e7fd      	b.n	800a094 <PxMessagingTask+0x754>
 800a098:	20000d80 	.word	0x20000d80
 800a09c:	20001100 	.word	0x20001100
 800a0a0:	20001180 	.word	0x20001180
 800a0a4:	200010e4 	.word	0x200010e4
 800a0a8:	20000fb0 	.word	0x20000fb0
 800a0ac:	20000f6b 	.word	0x20000f6b
 800a0b0:	20000f6c 	.word	0x20000f6c
 800a0b4:	20001634 	.word	0x20001634
 800a0b8:	2000001c 	.word	0x2000001c
 800a0bc:	20000b08 	.word	0x20000b08
 800a0c0:	20000f6a 	.word	0x20000f6a
 800a0c4:	20001600 	.word	0x20001600
 800a0c8:	20000b07 	.word	0x20000b07
 800a0cc:	20006a18 	.word	0x20006a18
 800a0d0:	20001570 	.word	0x20001570
 800a0d4:	20007ff0 	.word	0x20007ff0
 800a0d8:	deadbeef 	.word	0xdeadbeef
 800a0dc:	e000ed00 	.word	0xe000ed00
 800a0e0:	05fa0004 	.word	0x05fa0004
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 800a0e4:	4fec      	ldr	r7, [pc, #944]	; (800a498 <PxMessagingTask+0xb58>)
 800a0e6:	19bf      	adds	r7, r7, r6
 800a0e8:	5d38      	ldrb	r0, [r7, r4]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	3319      	adds	r3, #25
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	f7fe ff38 	bl	8008f68 <SendMessageFromPort>
								osDelay(100);
 800a0f8:	2064      	movs	r0, #100	; 0x64
 800a0fa:	f004 fc08 	bl	800e90e <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 800a0fe:	5d3b      	ldrb	r3, [r7, r4]
 800a100:	4ae6      	ldr	r2, [pc, #920]	; (800a49c <PxMessagingTask+0xb5c>)
 800a102:	7811      	ldrb	r1, [r2, #0]
 800a104:	9a08      	ldr	r2, [sp, #32]
 800a106:	9804      	ldr	r0, [sp, #16]
 800a108:	f7f9 ff0c 	bl	8003f24 <remoteBootloaderUpdate>
								break;
 800a10c:	2300      	movs	r3, #0
 800a10e:	4699      	mov	r9, r3
 800a110:	e445      	b.n	800999e <PxMessagingTask+0x5e>
							temp = cMessage[port-1][11+shift];
 800a112:	46a3      	mov	fp, r4
 800a114:	230b      	movs	r3, #11
 800a116:	4699      	mov	r9, r3
 800a118:	44a1      	add	r9, r4
 800a11a:	4bdf      	ldr	r3, [pc, #892]	; (800a498 <PxMessagingTask+0xb58>)
 800a11c:	199b      	adds	r3, r3, r6
 800a11e:	464a      	mov	r2, r9
 800a120:	5c9b      	ldrb	r3, [r3, r2]
 800a122:	930b      	str	r3, [sp, #44]	; 0x2c
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800a124:	9b06      	ldr	r3, [sp, #24]
 800a126:	2b0f      	cmp	r3, #15
 800a128:	d100      	bne.n	800a12c <PxMessagingTask+0x7ec>
 800a12a:	e088      	b.n	800a23e <PxMessagingTask+0x8fe>
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 800a12c:	9b06      	ldr	r3, [sp, #24]
 800a12e:	2b11      	cmp	r3, #17
 800a130:	d100      	bne.n	800a134 <PxMessagingTask+0x7f4>
 800a132:	e08c      	b.n	800a24e <PxMessagingTask+0x90e>
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800a134:	465b      	mov	r3, fp
 800a136:	1c59      	adds	r1, r3, #1
 800a138:	910c      	str	r1, [sp, #48]	; 0x30
 800a13a:	1c98      	adds	r0, r3, #2
 800a13c:	900d      	str	r0, [sp, #52]	; 0x34
 800a13e:	1cda      	adds	r2, r3, #3
 800a140:	920e      	str	r2, [sp, #56]	; 0x38
 800a142:	4bd5      	ldr	r3, [pc, #852]	; (800a498 <PxMessagingTask+0xb58>)
 800a144:	199b      	adds	r3, r3, r6
 800a146:	465c      	mov	r4, fp
 800a148:	5d1c      	ldrb	r4, [r3, r4]
 800a14a:	0624      	lsls	r4, r4, #24
 800a14c:	5c9a      	ldrb	r2, [r3, r2]
 800a14e:	18a4      	adds	r4, r4, r2
 800a150:	5c5a      	ldrb	r2, [r3, r1]
 800a152:	0412      	lsls	r2, r2, #16
 800a154:	18a4      	adds	r4, r4, r2
 800a156:	5c1a      	ldrb	r2, [r3, r0]
 800a158:	0212      	lsls	r2, r2, #8
 800a15a:	18a4      	adds	r4, r4, r2
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 800a15c:	465a      	mov	r2, fp
 800a15e:	3204      	adds	r2, #4
 800a160:	920f      	str	r2, [sp, #60]	; 0x3c
 800a162:	4659      	mov	r1, fp
 800a164:	3105      	adds	r1, #5
 800a166:	9110      	str	r1, [sp, #64]	; 0x40
 800a168:	4658      	mov	r0, fp
 800a16a:	3006      	adds	r0, #6
 800a16c:	9011      	str	r0, [sp, #68]	; 0x44
 800a16e:	465f      	mov	r7, fp
 800a170:	3707      	adds	r7, #7
 800a172:	9705      	str	r7, [sp, #20]
 800a174:	5c9f      	ldrb	r7, [r3, r2]
 800a176:	063f      	lsls	r7, r7, #24
 800a178:	5c5a      	ldrb	r2, [r3, r1]
 800a17a:	0412      	lsls	r2, r2, #16
 800a17c:	18bf      	adds	r7, r7, r2
 800a17e:	9a05      	ldr	r2, [sp, #20]
 800a180:	5c9a      	ldrb	r2, [r3, r2]
 800a182:	18bf      	adds	r7, r7, r2
 800a184:	5c1b      	ldrb	r3, [r3, r0]
 800a186:	021b      	lsls	r3, r3, #8
 800a188:	18ff      	adds	r7, r7, r3
							if (temp == false)
 800a18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d166      	bne.n	800a25e <PxMessagingTask+0x91e>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 800a190:	4bc1      	ldr	r3, [pc, #772]	; (800a498 <PxMessagingTask+0xb58>)
 800a192:	199b      	adds	r3, r3, r6
 800a194:	445b      	add	r3, fp
 800a196:	7a5b      	ldrb	r3, [r3, #9]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d012      	beq.n	800a1c2 <PxMessagingTask+0x882>
 800a19c:	2138      	movs	r1, #56	; 0x38
 800a19e:	4369      	muls	r1, r5
 800a1a0:	4abd      	ldr	r2, [pc, #756]	; (800a498 <PxMessagingTask+0xb58>)
 800a1a2:	1852      	adds	r2, r2, r1
 800a1a4:	445a      	add	r2, fp
 800a1a6:	7a91      	ldrb	r1, [r2, #10]
 800a1a8:	2900      	cmp	r1, #0
 800a1aa:	d00a      	beq.n	800a1c2 <PxMessagingTask+0x882>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 800a1ac:	2038      	movs	r0, #56	; 0x38
 800a1ae:	4368      	muls	r0, r5
 800a1b0:	4ab9      	ldr	r2, [pc, #740]	; (800a498 <PxMessagingTask+0xb58>)
 800a1b2:	1812      	adds	r2, r2, r0
 800a1b4:	445a      	add	r2, fp
 800a1b6:	7a10      	ldrb	r0, [r2, #8]
 800a1b8:	9100      	str	r1, [sp, #0]
 800a1ba:	003a      	movs	r2, r7
 800a1bc:	0021      	movs	r1, r4
 800a1be:	f7fe fdb1 	bl	8008d24 <SetupDMAStreams>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 800a1c2:	4bb5      	ldr	r3, [pc, #724]	; (800a498 <PxMessagingTask+0xb58>)
 800a1c4:	199b      	adds	r3, r3, r6
 800a1c6:	464a      	mov	r2, r9
 800a1c8:	5c9b      	ldrb	r3, [r3, r2]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d012      	beq.n	800a1f4 <PxMessagingTask+0x8b4>
 800a1ce:	2138      	movs	r1, #56	; 0x38
 800a1d0:	4369      	muls	r1, r5
 800a1d2:	4ab1      	ldr	r2, [pc, #708]	; (800a498 <PxMessagingTask+0xb58>)
 800a1d4:	1852      	adds	r2, r2, r1
 800a1d6:	445a      	add	r2, fp
 800a1d8:	7b11      	ldrb	r1, [r2, #12]
 800a1da:	2900      	cmp	r1, #0
 800a1dc:	d00a      	beq.n	800a1f4 <PxMessagingTask+0x8b4>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 800a1de:	2038      	movs	r0, #56	; 0x38
 800a1e0:	4368      	muls	r0, r5
 800a1e2:	4aad      	ldr	r2, [pc, #692]	; (800a498 <PxMessagingTask+0xb58>)
 800a1e4:	1812      	adds	r2, r2, r0
 800a1e6:	445a      	add	r2, fp
 800a1e8:	7a10      	ldrb	r0, [r2, #8]
 800a1ea:	9100      	str	r1, [sp, #0]
 800a1ec:	003a      	movs	r2, r7
 800a1ee:	0021      	movs	r1, r4
 800a1f0:	f7fe fd98 	bl	8008d24 <SetupDMAStreams>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 800a1f4:	4ba8      	ldr	r3, [pc, #672]	; (800a498 <PxMessagingTask+0xb58>)
 800a1f6:	199b      	adds	r3, r3, r6
 800a1f8:	445b      	add	r3, fp
 800a1fa:	7b5b      	ldrb	r3, [r3, #13]
 800a1fc:	9305      	str	r3, [sp, #20]
 800a1fe:	2200      	movs	r2, #0
 800a200:	4691      	mov	r9, r2
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <PxMessagingTask+0x8ca>
 800a206:	f7ff fbca 	bl	800999e <PxMessagingTask+0x5e>
 800a20a:	3238      	adds	r2, #56	; 0x38
 800a20c:	436a      	muls	r2, r5
 800a20e:	4ba2      	ldr	r3, [pc, #648]	; (800a498 <PxMessagingTask+0xb58>)
 800a210:	189b      	adds	r3, r3, r2
 800a212:	445b      	add	r3, fp
 800a214:	7b9a      	ldrb	r2, [r3, #14]
 800a216:	454a      	cmp	r2, r9
 800a218:	d101      	bne.n	800a21e <PxMessagingTask+0x8de>
 800a21a:	f000 fe04 	bl	800ae26 <PxMessagingTask+0x14e6>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 800a21e:	2138      	movs	r1, #56	; 0x38
 800a220:	4369      	muls	r1, r5
 800a222:	4b9d      	ldr	r3, [pc, #628]	; (800a498 <PxMessagingTask+0xb58>)
 800a224:	185b      	adds	r3, r3, r1
 800a226:	445b      	add	r3, fp
 800a228:	7a18      	ldrb	r0, [r3, #8]
 800a22a:	9200      	str	r2, [sp, #0]
 800a22c:	9b05      	ldr	r3, [sp, #20]
 800a22e:	003a      	movs	r2, r7
 800a230:	0021      	movs	r1, r4
 800a232:	f7fe fd77 	bl	8008d24 <SetupDMAStreams>
 800a236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a238:	9305      	str	r3, [sp, #20]
 800a23a:	f7ff fbb0 	bl	800999e <PxMessagingTask+0x5e>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800a23e:	2238      	movs	r2, #56	; 0x38
 800a240:	436a      	muls	r2, r5
 800a242:	4b95      	ldr	r3, [pc, #596]	; (800a498 <PxMessagingTask+0xb58>)
 800a244:	189b      	adds	r3, r3, r2
 800a246:	191c      	adds	r4, r3, r4
 800a248:	7b63      	ldrb	r3, [r4, #13]
 800a24a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a24c:	e772      	b.n	800a134 <PxMessagingTask+0x7f4>
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 800a24e:	2238      	movs	r2, #56	; 0x38
 800a250:	436a      	muls	r2, r5
 800a252:	4b91      	ldr	r3, [pc, #580]	; (800a498 <PxMessagingTask+0xb58>)
 800a254:	189b      	adds	r3, r3, r2
 800a256:	445b      	add	r3, fp
 800a258:	7bdb      	ldrb	r3, [r3, #15]
 800a25a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a25c:	e76a      	b.n	800a134 <PxMessagingTask+0x7f4>
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 800a25e:	2338      	movs	r3, #56	; 0x38
 800a260:	436b      	muls	r3, r5
 800a262:	4c8d      	ldr	r4, [pc, #564]	; (800a498 <PxMessagingTask+0xb58>)
 800a264:	18e4      	adds	r4, r4, r3
 800a266:	465b      	mov	r3, fp
 800a268:	18e6      	adds	r6, r4, r3
 800a26a:	7a31      	ldrb	r1, [r6, #8]
 800a26c:	20e4      	movs	r0, #228	; 0xe4
 800a26e:	f7fd fbcd 	bl	8007a0c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 800a272:	465b      	mov	r3, fp
 800a274:	5ce3      	ldrb	r3, [r4, r3]
 800a276:	021b      	lsls	r3, r3, #8
 800a278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a27a:	5ca1      	ldrb	r1, [r4, r2]
 800a27c:	18c9      	adds	r1, r1, r3
 800a27e:	b289      	uxth	r1, r1
 800a280:	20e5      	movs	r0, #229	; 0xe5
 800a282:	f7fd fbc3 	bl	8007a0c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 800a286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a288:	5ce3      	ldrb	r3, [r4, r3]
 800a28a:	021b      	lsls	r3, r3, #8
 800a28c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a28e:	5ca1      	ldrb	r1, [r4, r2]
 800a290:	18c9      	adds	r1, r1, r3
 800a292:	b289      	uxth	r1, r1
 800a294:	20e6      	movs	r0, #230	; 0xe6
 800a296:	f7fd fbb9 	bl	8007a0c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 800a29a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a29c:	5ce3      	ldrb	r3, [r4, r3]
 800a29e:	021b      	lsls	r3, r3, #8
 800a2a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2a2:	5ca1      	ldrb	r1, [r4, r2]
 800a2a4:	18c9      	adds	r1, r1, r3
 800a2a6:	b289      	uxth	r1, r1
 800a2a8:	20e7      	movs	r0, #231	; 0xe7
 800a2aa:	f7fd fbaf 	bl	8007a0c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 800a2ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2b0:	5ce3      	ldrb	r3, [r4, r3]
 800a2b2:	021b      	lsls	r3, r3, #8
 800a2b4:	9a05      	ldr	r2, [sp, #20]
 800a2b6:	5ca1      	ldrb	r1, [r4, r2]
 800a2b8:	18c9      	adds	r1, r1, r3
 800a2ba:	b289      	uxth	r1, r1
 800a2bc:	20e8      	movs	r0, #232	; 0xe8
 800a2be:	f7fd fba5 	bl	8007a0c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 800a2c2:	7a73      	ldrb	r3, [r6, #9]
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	7ab1      	ldrb	r1, [r6, #10]
 800a2c8:	18c9      	adds	r1, r1, r3
 800a2ca:	b289      	uxth	r1, r1
 800a2cc:	20e9      	movs	r0, #233	; 0xe9
 800a2ce:	f7fd fb9d 	bl	8007a0c <EE_WriteVariable>
								if (numOfParams == 19)
 800a2d2:	9b06      	ldr	r3, [sp, #24]
 800a2d4:	2b13      	cmp	r3, #19
 800a2d6:	d116      	bne.n	800a306 <PxMessagingTask+0x9c6>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 800a2d8:	3325      	adds	r3, #37	; 0x25
 800a2da:	436b      	muls	r3, r5
 800a2dc:	4d6e      	ldr	r5, [pc, #440]	; (800a498 <PxMessagingTask+0xb58>)
 800a2de:	18ed      	adds	r5, r5, r3
 800a2e0:	464b      	mov	r3, r9
 800a2e2:	5ceb      	ldrb	r3, [r5, r3]
 800a2e4:	021b      	lsls	r3, r3, #8
 800a2e6:	445d      	add	r5, fp
 800a2e8:	7b29      	ldrb	r1, [r5, #12]
 800a2ea:	18c9      	adds	r1, r1, r3
 800a2ec:	b289      	uxth	r1, r1
 800a2ee:	20ea      	movs	r0, #234	; 0xea
 800a2f0:	f7fd fb8c 	bl	8007a0c <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	4b69      	ldr	r3, [pc, #420]	; (800a4a0 <PxMessagingTask+0xb60>)
 800a2fa:	4a6a      	ldr	r2, [pc, #424]	; (800a4a4 <PxMessagingTask+0xb64>)
 800a2fc:	60da      	str	r2, [r3, #12]
 800a2fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	e7fd      	b.n	800a302 <PxMessagingTask+0x9c2>
								if (numOfParams == 21)
 800a306:	9b06      	ldr	r3, [sp, #24]
 800a308:	2b15      	cmp	r3, #21
 800a30a:	d1f3      	bne.n	800a2f4 <PxMessagingTask+0x9b4>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 800a30c:	3323      	adds	r3, #35	; 0x23
 800a30e:	435d      	muls	r5, r3
 800a310:	4b61      	ldr	r3, [pc, #388]	; (800a498 <PxMessagingTask+0xb58>)
 800a312:	195b      	adds	r3, r3, r5
 800a314:	445b      	add	r3, fp
 800a316:	7b5a      	ldrb	r2, [r3, #13]
 800a318:	0212      	lsls	r2, r2, #8
 800a31a:	7b99      	ldrb	r1, [r3, #14]
 800a31c:	1889      	adds	r1, r1, r2
 800a31e:	b289      	uxth	r1, r1
 800a320:	20eb      	movs	r0, #235	; 0xeb
 800a322:	f7fd fb73 	bl	8007a0c <EE_WriteVariable>
 800a326:	e7e5      	b.n	800a2f4 <PxMessagingTask+0x9b4>
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a328:	4f5b      	ldr	r7, [pc, #364]	; (800a498 <PxMessagingTask+0xb58>)
 800a32a:	19bf      	adds	r7, r7, r6
 800a32c:	1939      	adds	r1, r7, r4
 800a32e:	7a8b      	ldrb	r3, [r1, #10]
 800a330:	9306      	str	r3, [sp, #24]
 800a332:	7aca      	ldrb	r2, [r1, #11]
 800a334:	4859      	ldr	r0, [pc, #356]	; (800a49c <PxMessagingTask+0xb5c>)
 800a336:	7803      	ldrb	r3, [r0, #0]
 800a338:	4699      	mov	r9, r3
 800a33a:	7a4b      	ldrb	r3, [r1, #9]
 800a33c:	469b      	mov	fp, r3
 800a33e:	7b08      	ldrb	r0, [r1, #12]
 800a340:	0003      	movs	r3, r0
 800a342:	1e58      	subs	r0, r3, #1
 800a344:	4183      	sbcs	r3, r0
 800a346:	9303      	str	r3, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800a348:	7908      	ldrb	r0, [r1, #4]
 800a34a:	0603      	lsls	r3, r0, #24
 800a34c:	469c      	mov	ip, r3
 800a34e:	7948      	ldrb	r0, [r1, #5]
 800a350:	0400      	lsls	r0, r0, #16
 800a352:	4460      	add	r0, ip
 800a354:	79cb      	ldrb	r3, [r1, #7]
 800a356:	469c      	mov	ip, r3
 800a358:	4460      	add	r0, ip
 800a35a:	798b      	ldrb	r3, [r1, #6]
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	469c      	mov	ip, r3
 800a360:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a362:	9002      	str	r0, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800a364:	5d38      	ldrb	r0, [r7, r4]
 800a366:	0600      	lsls	r0, r0, #24
 800a368:	78cc      	ldrb	r4, [r1, #3]
 800a36a:	1900      	adds	r0, r0, r4
 800a36c:	784c      	ldrb	r4, [r1, #1]
 800a36e:	0424      	lsls	r4, r4, #16
 800a370:	1900      	adds	r0, r0, r4
 800a372:	788c      	ldrb	r4, [r1, #2]
 800a374:	0224      	lsls	r4, r4, #8
 800a376:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a378:	9001      	str	r0, [sp, #4]
 800a37a:	7a09      	ldrb	r1, [r1, #8]
 800a37c:	9100      	str	r1, [sp, #0]
 800a37e:	9b06      	ldr	r3, [sp, #24]
 800a380:	4649      	mov	r1, r9
 800a382:	4658      	mov	r0, fp
 800a384:	f7ff f83e 	bl	8009404 <StartScastDMAStream>
							break;								
 800a388:	2300      	movs	r3, #0
 800a38a:	4699      	mov	r9, r3
 800a38c:	f7ff fb07 	bl	800999e <PxMessagingTask+0x5e>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 800a390:	0023      	movs	r3, r4
 800a392:	4a41      	ldr	r2, [pc, #260]	; (800a498 <PxMessagingTask+0xb58>)
 800a394:	1992      	adds	r2, r2, r6
 800a396:	5d12      	ldrb	r2, [r2, r4]
 800a398:	2a00      	cmp	r2, #0
 800a39a:	d000      	beq.n	800a39e <PxMessagingTask+0xa5e>
 800a39c:	e09a      	b.n	800a4d4 <PxMessagingTask+0xb94>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a39e:	3238      	adds	r2, #56	; 0x38
 800a3a0:	436a      	muls	r2, r5
 800a3a2:	4b3d      	ldr	r3, [pc, #244]	; (800a498 <PxMessagingTask+0xb58>)
 800a3a4:	189b      	adds	r3, r3, r2
 800a3a6:	191c      	adds	r4, r3, r4
 800a3a8:	78a3      	ldrb	r3, [r4, #2]
 800a3aa:	061b      	lsls	r3, r3, #24
 800a3ac:	78e2      	ldrb	r2, [r4, #3]
 800a3ae:	0412      	lsls	r2, r2, #16
 800a3b0:	189b      	adds	r3, r3, r2
 800a3b2:	7962      	ldrb	r2, [r4, #5]
 800a3b4:	189b      	adds	r3, r3, r2
 800a3b6:	7922      	ldrb	r2, [r4, #4]
 800a3b8:	0212      	lsls	r2, r2, #8
 800a3ba:	189b      	adds	r3, r3, r2
									switch (cMessage[port-1][1+shift])											// requested format
 800a3bc:	7862      	ldrb	r2, [r4, #1]
 800a3be:	3a01      	subs	r2, #1
 800a3c0:	b2d1      	uxtb	r1, r2
 800a3c2:	2907      	cmp	r1, #7
 800a3c4:	d901      	bls.n	800a3ca <PxMessagingTask+0xa8a>
 800a3c6:	f000 fd11 	bl	800adec <PxMessagingTask+0x14ac>
 800a3ca:	b2d2      	uxtb	r2, r2
 800a3cc:	0092      	lsls	r2, r2, #2
 800a3ce:	4936      	ldr	r1, [pc, #216]	; (800a4a8 <PxMessagingTask+0xb68>)
 800a3d0:	588a      	ldr	r2, [r1, r2]
 800a3d2:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 800a3d4:	781a      	ldrb	r2, [r3, #0]
 800a3d6:	4b35      	ldr	r3, [pc, #212]	; (800a4ac <PxMessagingTask+0xb6c>)
 800a3d8:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a3da:	2201      	movs	r2, #1
 800a3dc:	211f      	movs	r1, #31
 800a3de:	9804      	ldr	r0, [sp, #16]
 800a3e0:	f7fe ffea 	bl	80093b8 <SendMessageToModule>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4699      	mov	r9, r3
 800a3e8:	f7ff fad9 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[0] = *(__IO int8_t *)temp32; 
 800a3ec:	781a      	ldrb	r2, [r3, #0]
 800a3ee:	4b2f      	ldr	r3, [pc, #188]	; (800a4ac <PxMessagingTask+0xb6c>)
 800a3f0:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	211f      	movs	r1, #31
 800a3f6:	9804      	ldr	r0, [sp, #16]
 800a3f8:	f7fe ffde 	bl	80093b8 <SendMessageToModule>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4699      	mov	r9, r3
 800a400:	f7ff facd 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 800a404:	8819      	ldrh	r1, [r3, #0]
 800a406:	4a29      	ldr	r2, [pc, #164]	; (800a4ac <PxMessagingTask+0xb6c>)
 800a408:	7011      	strb	r1, [r2, #0]
 800a40a:	881b      	ldrh	r3, [r3, #0]
 800a40c:	0a1b      	lsrs	r3, r3, #8
 800a40e:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a410:	2202      	movs	r2, #2
 800a412:	211f      	movs	r1, #31
 800a414:	9804      	ldr	r0, [sp, #16]
 800a416:	f7fe ffcf 	bl	80093b8 <SendMessageToModule>
 800a41a:	2300      	movs	r3, #0
 800a41c:	4699      	mov	r9, r3
 800a41e:	f7ff fabe 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a422:	8819      	ldrh	r1, [r3, #0]
 800a424:	4a21      	ldr	r2, [pc, #132]	; (800a4ac <PxMessagingTask+0xb6c>)
 800a426:	7011      	strb	r1, [r2, #0]
 800a428:	881b      	ldrh	r3, [r3, #0]
 800a42a:	b21b      	sxth	r3, r3
 800a42c:	121b      	asrs	r3, r3, #8
 800a42e:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a430:	2202      	movs	r2, #2
 800a432:	211f      	movs	r1, #31
 800a434:	9804      	ldr	r0, [sp, #16]
 800a436:	f7fe ffbf 	bl	80093b8 <SendMessageToModule>
 800a43a:	2300      	movs	r3, #0
 800a43c:	4699      	mov	r9, r3
 800a43e:	f7ff faae 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a442:	6819      	ldr	r1, [r3, #0]
 800a444:	4a19      	ldr	r2, [pc, #100]	; (800a4ac <PxMessagingTask+0xb6c>)
 800a446:	7011      	strb	r1, [r2, #0]
 800a448:	6819      	ldr	r1, [r3, #0]
 800a44a:	0a09      	lsrs	r1, r1, #8
 800a44c:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a44e:	6819      	ldr	r1, [r3, #0]
 800a450:	0c09      	lsrs	r1, r1, #16
 800a452:	7091      	strb	r1, [r2, #2]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	0e1b      	lsrs	r3, r3, #24
 800a458:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 800a45a:	2204      	movs	r2, #4
 800a45c:	211f      	movs	r1, #31
 800a45e:	9804      	ldr	r0, [sp, #16]
 800a460:	f7fe ffaa 	bl	80093b8 <SendMessageToModule>
 800a464:	2300      	movs	r3, #0
 800a466:	4699      	mov	r9, r3
 800a468:	f7ff fa99 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a46c:	6819      	ldr	r1, [r3, #0]
 800a46e:	4a0f      	ldr	r2, [pc, #60]	; (800a4ac <PxMessagingTask+0xb6c>)
 800a470:	7011      	strb	r1, [r2, #0]
 800a472:	6819      	ldr	r1, [r3, #0]
 800a474:	1209      	asrs	r1, r1, #8
 800a476:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a478:	6819      	ldr	r1, [r3, #0]
 800a47a:	1409      	asrs	r1, r1, #16
 800a47c:	7091      	strb	r1, [r2, #2]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	161b      	asrs	r3, r3, #24
 800a482:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 800a484:	2204      	movs	r2, #4
 800a486:	211f      	movs	r1, #31
 800a488:	9804      	ldr	r0, [sp, #16]
 800a48a:	f7fe ff95 	bl	80093b8 <SendMessageToModule>
 800a48e:	2300      	movs	r3, #0
 800a490:	4699      	mov	r9, r3
 800a492:	f7ff fa84 	bl	800999e <PxMessagingTask+0x5e>
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	20000d80 	.word	0x20000d80
 800a49c:	200010e4 	.word	0x200010e4
 800a4a0:	e000ed00 	.word	0xe000ed00
 800a4a4:	05fa0004 	.word	0x05fa0004
 800a4a8:	0801b428 	.word	0x0801b428
 800a4ac:	20000fb0 	.word	0x20000fb0
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 800a4b0:	7819      	ldrb	r1, [r3, #0]
 800a4b2:	4aee      	ldr	r2, [pc, #952]	; (800a86c <PxMessagingTask+0xf2c>)
 800a4b4:	7011      	strb	r1, [r2, #0]
 800a4b6:	7859      	ldrb	r1, [r3, #1]
 800a4b8:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 800a4ba:	7899      	ldrb	r1, [r3, #2]
 800a4bc:	7091      	strb	r1, [r2, #2]
 800a4be:	78db      	ldrb	r3, [r3, #3]
 800a4c0:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 800a4c2:	2208      	movs	r2, #8
 800a4c4:	211f      	movs	r1, #31
 800a4c6:	9804      	ldr	r0, [sp, #16]
 800a4c8:	f7fe ff76 	bl	80093b8 <SendMessageToModule>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4699      	mov	r9, r3
 800a4d0:	f7ff fa65 	bl	800999e <PxMessagingTask+0x5e>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 800a4d4:	2a02      	cmp	r2, #2
 800a4d6:	d000      	beq.n	800a4da <PxMessagingTask+0xb9a>
 800a4d8:	e09f      	b.n	800a61a <PxMessagingTask+0xcda>
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 800a4da:	48e5      	ldr	r0, [pc, #916]	; (800a870 <PxMessagingTask+0xf30>)
 800a4dc:	3236      	adds	r2, #54	; 0x36
 800a4de:	436a      	muls	r2, r5
 800a4e0:	1882      	adds	r2, r0, r2
 800a4e2:	1851      	adds	r1, r2, r1
 800a4e4:	3901      	subs	r1, #1
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	700a      	strb	r2, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	4453      	add	r3, sl
 800a4ee:	1818      	adds	r0, r3, r0
 800a4f0:	f7f9 fb24 	bl	8003b3c <IsModuleParameter>
 800a4f4:	9005      	str	r0, [sp, #20]
									if (temp == 0) {																					// Parameter does not exist
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d108      	bne.n	800a50c <PxMessagingTask+0xbcc>
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	211f      	movs	r1, #31
 800a4fe:	9804      	ldr	r0, [sp, #16]
 800a500:	f7fe ff5a 	bl	80093b8 <SendMessageToModule>
 800a504:	2300      	movs	r3, #0
 800a506:	4699      	mov	r9, r3
 800a508:	f7ff fa49 	bl	800999e <PxMessagingTask+0x5e>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 800a50c:	3801      	subs	r0, #1
 800a50e:	4ad9      	ldr	r2, [pc, #868]	; (800a874 <PxMessagingTask+0xf34>)
 800a510:	210c      	movs	r1, #12
 800a512:	4341      	muls	r1, r0
 800a514:	588b      	ldr	r3, [r1, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 800a516:	1852      	adds	r2, r2, r1
 800a518:	7912      	ldrb	r2, [r2, #4]
 800a51a:	49d4      	ldr	r1, [pc, #848]	; (800a86c <PxMessagingTask+0xf2c>)
 800a51c:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 800a51e:	3a01      	subs	r2, #1
 800a520:	b2d1      	uxtb	r1, r2
 800a522:	2907      	cmp	r1, #7
 800a524:	d901      	bls.n	800a52a <PxMessagingTask+0xbea>
 800a526:	f000 fc65 	bl	800adf4 <PxMessagingTask+0x14b4>
 800a52a:	b2d2      	uxtb	r2, r2
 800a52c:	0092      	lsls	r2, r2, #2
 800a52e:	49d2      	ldr	r1, [pc, #840]	; (800a878 <PxMessagingTask+0xf38>)
 800a530:	588a      	ldr	r2, [r1, r2]
 800a532:	4697      	mov	pc, r2
											messageParams[1] = *(__IO uint8_t *)temp32; 
 800a534:	781a      	ldrb	r2, [r3, #0]
 800a536:	4bcd      	ldr	r3, [pc, #820]	; (800a86c <PxMessagingTask+0xf2c>)
 800a538:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a53a:	2202      	movs	r2, #2
 800a53c:	211f      	movs	r1, #31
 800a53e:	9804      	ldr	r0, [sp, #16]
 800a540:	f7fe ff3a 	bl	80093b8 <SendMessageToModule>
 800a544:	2300      	movs	r3, #0
 800a546:	4699      	mov	r9, r3
 800a548:	f7ff fa29 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[1] = *(__IO int8_t *)temp32; 
 800a54c:	781a      	ldrb	r2, [r3, #0]
 800a54e:	4bc7      	ldr	r3, [pc, #796]	; (800a86c <PxMessagingTask+0xf2c>)
 800a550:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a552:	2202      	movs	r2, #2
 800a554:	211f      	movs	r1, #31
 800a556:	9804      	ldr	r0, [sp, #16]
 800a558:	f7fe ff2e 	bl	80093b8 <SendMessageToModule>
 800a55c:	2300      	movs	r3, #0
 800a55e:	4699      	mov	r9, r3
 800a560:	f7ff fa1d 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a564:	8819      	ldrh	r1, [r3, #0]
 800a566:	4ac1      	ldr	r2, [pc, #772]	; (800a86c <PxMessagingTask+0xf2c>)
 800a568:	7051      	strb	r1, [r2, #1]
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	0a1b      	lsrs	r3, r3, #8
 800a56e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a570:	2203      	movs	r2, #3
 800a572:	211f      	movs	r1, #31
 800a574:	9804      	ldr	r0, [sp, #16]
 800a576:	f7fe ff1f 	bl	80093b8 <SendMessageToModule>
 800a57a:	2300      	movs	r3, #0
 800a57c:	4699      	mov	r9, r3
 800a57e:	f7ff fa0e 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a582:	8819      	ldrh	r1, [r3, #0]
 800a584:	4ab9      	ldr	r2, [pc, #740]	; (800a86c <PxMessagingTask+0xf2c>)
 800a586:	7051      	strb	r1, [r2, #1]
 800a588:	881b      	ldrh	r3, [r3, #0]
 800a58a:	b21b      	sxth	r3, r3
 800a58c:	121b      	asrs	r3, r3, #8
 800a58e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a590:	2203      	movs	r2, #3
 800a592:	211f      	movs	r1, #31
 800a594:	9804      	ldr	r0, [sp, #16]
 800a596:	f7fe ff0f 	bl	80093b8 <SendMessageToModule>
 800a59a:	2300      	movs	r3, #0
 800a59c:	4699      	mov	r9, r3
 800a59e:	f7ff f9fe 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a5a2:	6819      	ldr	r1, [r3, #0]
 800a5a4:	4ab1      	ldr	r2, [pc, #708]	; (800a86c <PxMessagingTask+0xf2c>)
 800a5a6:	7051      	strb	r1, [r2, #1]
 800a5a8:	6819      	ldr	r1, [r3, #0]
 800a5aa:	0a09      	lsrs	r1, r1, #8
 800a5ac:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a5ae:	6819      	ldr	r1, [r3, #0]
 800a5b0:	0c09      	lsrs	r1, r1, #16
 800a5b2:	70d1      	strb	r1, [r2, #3]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	0e1b      	lsrs	r3, r3, #24
 800a5b8:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a5ba:	2205      	movs	r2, #5
 800a5bc:	211f      	movs	r1, #31
 800a5be:	9804      	ldr	r0, [sp, #16]
 800a5c0:	f7fe fefa 	bl	80093b8 <SendMessageToModule>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4699      	mov	r9, r3
 800a5c8:	f7ff f9e9 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a5cc:	6819      	ldr	r1, [r3, #0]
 800a5ce:	4aa7      	ldr	r2, [pc, #668]	; (800a86c <PxMessagingTask+0xf2c>)
 800a5d0:	7051      	strb	r1, [r2, #1]
 800a5d2:	6819      	ldr	r1, [r3, #0]
 800a5d4:	1209      	asrs	r1, r1, #8
 800a5d6:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a5d8:	6819      	ldr	r1, [r3, #0]
 800a5da:	1409      	asrs	r1, r1, #16
 800a5dc:	70d1      	strb	r1, [r2, #3]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	161b      	asrs	r3, r3, #24
 800a5e2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a5e4:	2205      	movs	r2, #5
 800a5e6:	211f      	movs	r1, #31
 800a5e8:	9804      	ldr	r0, [sp, #16]
 800a5ea:	f7fe fee5 	bl	80093b8 <SendMessageToModule>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	4699      	mov	r9, r3
 800a5f2:	f7ff f9d4 	bl	800999e <PxMessagingTask+0x5e>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 800a5f6:	7819      	ldrb	r1, [r3, #0]
 800a5f8:	4a9c      	ldr	r2, [pc, #624]	; (800a86c <PxMessagingTask+0xf2c>)
 800a5fa:	7051      	strb	r1, [r2, #1]
 800a5fc:	7859      	ldrb	r1, [r3, #1]
 800a5fe:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a600:	7899      	ldrb	r1, [r3, #2]
 800a602:	70d1      	strb	r1, [r2, #3]
 800a604:	78db      	ldrb	r3, [r3, #3]
 800a606:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a608:	2209      	movs	r2, #9
 800a60a:	211f      	movs	r1, #31
 800a60c:	9804      	ldr	r0, [sp, #16]
 800a60e:	f7fe fed3 	bl	80093b8 <SendMessageToModule>
 800a612:	2300      	movs	r3, #0
 800a614:	4699      	mov	r9, r3
 800a616:	f7ff f9c2 	bl	800999e <PxMessagingTask+0x5e>
									}
 800a61a:	2300      	movs	r3, #0
 800a61c:	4699      	mov	r9, r3
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 800a61e:	2a02      	cmp	r2, #2
 800a620:	d801      	bhi.n	800a626 <PxMessagingTask+0xce6>
 800a622:	f7ff f9bc 	bl	800999e <PxMessagingTask+0x5e>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 800a626:	3a04      	subs	r2, #4
 800a628:	0092      	lsls	r2, r2, #2
 800a62a:	4b94      	ldr	r3, [pc, #592]	; (800a87c <PxMessagingTask+0xf3c>)
 800a62c:	58d1      	ldr	r1, [r2, r3]
 800a62e:	220f      	movs	r2, #15
 800a630:	400a      	ands	r2, r1
 800a632:	4b8e      	ldr	r3, [pc, #568]	; (800a86c <PxMessagingTask+0xf2c>)
 800a634:	701a      	strb	r2, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 800a636:	454a      	cmp	r2, r9
 800a638:	d106      	bne.n	800a648 <PxMessagingTask+0xd08>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a63a:	2201      	movs	r2, #1
 800a63c:	211f      	movs	r1, #31
 800a63e:	9804      	ldr	r0, [sp, #16]
 800a640:	f7fe feba 	bl	80093b8 <SendMessageToModule>
 800a644:	f7ff f9ab 	bl	800999e <PxMessagingTask+0x5e>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800a648:	0c09      	lsrs	r1, r1, #16
 800a64a:	2380      	movs	r3, #128	; 0x80
 800a64c:	059b      	lsls	r3, r3, #22
 800a64e:	18cb      	adds	r3, r1, r3
										switch (messageParams[0])											// requested format
 800a650:	3a01      	subs	r2, #1
 800a652:	b2d0      	uxtb	r0, r2
 800a654:	2807      	cmp	r0, #7
 800a656:	d900      	bls.n	800a65a <PxMessagingTask+0xd1a>
 800a658:	e3d0      	b.n	800adfc <PxMessagingTask+0x14bc>
 800a65a:	b2d2      	uxtb	r2, r2
 800a65c:	0092      	lsls	r2, r2, #2
 800a65e:	4888      	ldr	r0, [pc, #544]	; (800a880 <PxMessagingTask+0xf40>)
 800a660:	5882      	ldr	r2, [r0, r2]
 800a662:	4697      	mov	pc, r2
												messageParams[1] = *(__IO uint8_t *)temp32; 
 800a664:	781a      	ldrb	r2, [r3, #0]
 800a666:	4b81      	ldr	r3, [pc, #516]	; (800a86c <PxMessagingTask+0xf2c>)
 800a668:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a66a:	2202      	movs	r2, #2
 800a66c:	211f      	movs	r1, #31
 800a66e:	9804      	ldr	r0, [sp, #16]
 800a670:	f7fe fea2 	bl	80093b8 <SendMessageToModule>
 800a674:	2300      	movs	r3, #0
 800a676:	4699      	mov	r9, r3
 800a678:	f7ff f991 	bl	800999e <PxMessagingTask+0x5e>
												messageParams[1] = *(__IO int8_t *)temp32; 
 800a67c:	781a      	ldrb	r2, [r3, #0]
 800a67e:	4b7b      	ldr	r3, [pc, #492]	; (800a86c <PxMessagingTask+0xf2c>)
 800a680:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a682:	2202      	movs	r2, #2
 800a684:	211f      	movs	r1, #31
 800a686:	9804      	ldr	r0, [sp, #16]
 800a688:	f7fe fe96 	bl	80093b8 <SendMessageToModule>
 800a68c:	2300      	movs	r3, #0
 800a68e:	4699      	mov	r9, r3
 800a690:	f7ff f985 	bl	800999e <PxMessagingTask+0x5e>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a694:	8819      	ldrh	r1, [r3, #0]
 800a696:	4a75      	ldr	r2, [pc, #468]	; (800a86c <PxMessagingTask+0xf2c>)
 800a698:	7051      	strb	r1, [r2, #1]
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	0a1b      	lsrs	r3, r3, #8
 800a69e:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a6a0:	2203      	movs	r2, #3
 800a6a2:	211f      	movs	r1, #31
 800a6a4:	9804      	ldr	r0, [sp, #16]
 800a6a6:	f7fe fe87 	bl	80093b8 <SendMessageToModule>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	4699      	mov	r9, r3
 800a6ae:	f7ff f976 	bl	800999e <PxMessagingTask+0x5e>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a6b2:	8819      	ldrh	r1, [r3, #0]
 800a6b4:	4a6d      	ldr	r2, [pc, #436]	; (800a86c <PxMessagingTask+0xf2c>)
 800a6b6:	7051      	strb	r1, [r2, #1]
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	b21b      	sxth	r3, r3
 800a6bc:	121b      	asrs	r3, r3, #8
 800a6be:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	211f      	movs	r1, #31
 800a6c4:	9804      	ldr	r0, [sp, #16]
 800a6c6:	f7fe fe77 	bl	80093b8 <SendMessageToModule>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	4699      	mov	r9, r3
 800a6ce:	f7ff f966 	bl	800999e <PxMessagingTask+0x5e>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a6d2:	6819      	ldr	r1, [r3, #0]
 800a6d4:	4a65      	ldr	r2, [pc, #404]	; (800a86c <PxMessagingTask+0xf2c>)
 800a6d6:	7051      	strb	r1, [r2, #1]
 800a6d8:	6819      	ldr	r1, [r3, #0]
 800a6da:	0a09      	lsrs	r1, r1, #8
 800a6dc:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a6de:	6819      	ldr	r1, [r3, #0]
 800a6e0:	0c09      	lsrs	r1, r1, #16
 800a6e2:	70d1      	strb	r1, [r2, #3]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	0e1b      	lsrs	r3, r3, #24
 800a6e8:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a6ea:	2205      	movs	r2, #5
 800a6ec:	211f      	movs	r1, #31
 800a6ee:	9804      	ldr	r0, [sp, #16]
 800a6f0:	f7fe fe62 	bl	80093b8 <SendMessageToModule>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4699      	mov	r9, r3
 800a6f8:	f7ff f951 	bl	800999e <PxMessagingTask+0x5e>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a6fc:	6819      	ldr	r1, [r3, #0]
 800a6fe:	4a5b      	ldr	r2, [pc, #364]	; (800a86c <PxMessagingTask+0xf2c>)
 800a700:	7051      	strb	r1, [r2, #1]
 800a702:	6819      	ldr	r1, [r3, #0]
 800a704:	1209      	asrs	r1, r1, #8
 800a706:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a708:	6819      	ldr	r1, [r3, #0]
 800a70a:	1409      	asrs	r1, r1, #16
 800a70c:	70d1      	strb	r1, [r2, #3]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	161b      	asrs	r3, r3, #24
 800a712:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a714:	2205      	movs	r2, #5
 800a716:	211f      	movs	r1, #31
 800a718:	9804      	ldr	r0, [sp, #16]
 800a71a:	f7fe fe4d 	bl	80093b8 <SendMessageToModule>
 800a71e:	2300      	movs	r3, #0
 800a720:	4699      	mov	r9, r3
 800a722:	f7ff f93c 	bl	800999e <PxMessagingTask+0x5e>
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 800a726:	781a      	ldrb	r2, [r3, #0]
 800a728:	4b50      	ldr	r3, [pc, #320]	; (800a86c <PxMessagingTask+0xf2c>)
 800a72a:	705a      	strb	r2, [r3, #1]
 800a72c:	4a55      	ldr	r2, [pc, #340]	; (800a884 <PxMessagingTask+0xf44>)
 800a72e:	188a      	adds	r2, r1, r2
 800a730:	7812      	ldrb	r2, [r2, #0]
 800a732:	709a      	strb	r2, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a734:	4a54      	ldr	r2, [pc, #336]	; (800a888 <PxMessagingTask+0xf48>)
 800a736:	188a      	adds	r2, r1, r2
 800a738:	7812      	ldrb	r2, [r2, #0]
 800a73a:	70da      	strb	r2, [r3, #3]
 800a73c:	4a53      	ldr	r2, [pc, #332]	; (800a88c <PxMessagingTask+0xf4c>)
 800a73e:	4694      	mov	ip, r2
 800a740:	4461      	add	r1, ip
 800a742:	780a      	ldrb	r2, [r1, #0]
 800a744:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a746:	2209      	movs	r2, #9
 800a748:	211f      	movs	r1, #31
 800a74a:	9804      	ldr	r0, [sp, #16]
 800a74c:	f7fe fe34 	bl	80093b8 <SendMessageToModule>
 800a750:	2300      	movs	r3, #0
 800a752:	4699      	mov	r9, r3
 800a754:	f7ff f923 	bl	800999e <PxMessagingTask+0x5e>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a758:	4b4d      	ldr	r3, [pc, #308]	; (800a890 <PxMessagingTask+0xf50>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	2002      	movs	r0, #2
 800a760:	4240      	negs	r0, r0
 800a762:	17c1      	asrs	r1, r0, #31
 800a764:	1812      	adds	r2, r2, r0
 800a766:	414b      	adcs	r3, r1
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00b      	beq.n	800a784 <PxMessagingTask+0xe44>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800a76c:	4b49      	ldr	r3, [pc, #292]	; (800a894 <PxMessagingTask+0xf54>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	2b10      	cmp	r3, #16
 800a772:	d100      	bne.n	800a776 <PxMessagingTask+0xe36>
 800a774:	e35c      	b.n	800ae30 <PxMessagingTask+0x14f0>
 800a776:	4b47      	ldr	r3, [pc, #284]	; (800a894 <PxMessagingTask+0xf54>)
 800a778:	2200      	movs	r2, #0
 800a77a:	701a      	strb	r2, [r3, #0]
 800a77c:	2300      	movs	r3, #0
 800a77e:	4699      	mov	r9, r3
 800a780:	f7ff f90d 	bl	800999e <PxMessagingTask+0x5e>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a784:	2b00      	cmp	r3, #0
 800a786:	d101      	bne.n	800a78c <PxMessagingTask+0xe4c>
 800a788:	2a01      	cmp	r2, #1
 800a78a:	d8ef      	bhi.n	800a76c <PxMessagingTask+0xe2c>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 800a78c:	2138      	movs	r1, #56	; 0x38
 800a78e:	4369      	muls	r1, r5
 800a790:	4a37      	ldr	r2, [pc, #220]	; (800a870 <PxMessagingTask+0xf30>)
 800a792:	1852      	adds	r2, r2, r1
 800a794:	5d12      	ldrb	r2, [r2, r4]
 800a796:	4940      	ldr	r1, [pc, #256]	; (800a898 <PxMessagingTask+0xf58>)
 800a798:	700a      	strb	r2, [r1, #0]
								switch (cMessage[port-1][shift])											// Remote format
 800a79a:	2a08      	cmp	r2, #8
 800a79c:	d8e6      	bhi.n	800a76c <PxMessagingTask+0xe2c>
 800a79e:	0092      	lsls	r2, r2, #2
 800a7a0:	493e      	ldr	r1, [pc, #248]	; (800a89c <PxMessagingTask+0xf5c>)
 800a7a2:	588a      	ldr	r2, [r1, r2]
 800a7a4:	4697      	mov	pc, r2
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 800a7a6:	4b3b      	ldr	r3, [pc, #236]	; (800a894 <PxMessagingTask+0xf54>)
 800a7a8:	2210      	movs	r2, #16
 800a7aa:	701a      	strb	r2, [r3, #0]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4699      	mov	r9, r3
 800a7b0:	f7ff f8f5 	bl	800999e <PxMessagingTask+0x5e>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 800a7b4:	4a36      	ldr	r2, [pc, #216]	; (800a890 <PxMessagingTask+0xf50>)
 800a7b6:	2038      	movs	r0, #56	; 0x38
 800a7b8:	4368      	muls	r0, r5
 800a7ba:	492d      	ldr	r1, [pc, #180]	; (800a870 <PxMessagingTask+0xf30>)
 800a7bc:	1809      	adds	r1, r1, r0
 800a7be:	1909      	adds	r1, r1, r4
 800a7c0:	784b      	ldrb	r3, [r1, #1]
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	6053      	str	r3, [r2, #4]
 800a7c8:	e7d0      	b.n	800a76c <PxMessagingTask+0xe2c>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 800a7ca:	4a31      	ldr	r2, [pc, #196]	; (800a890 <PxMessagingTask+0xf50>)
 800a7cc:	2038      	movs	r0, #56	; 0x38
 800a7ce:	4368      	muls	r0, r5
 800a7d0:	4927      	ldr	r1, [pc, #156]	; (800a870 <PxMessagingTask+0xf30>)
 800a7d2:	1809      	adds	r1, r1, r0
 800a7d4:	1909      	adds	r1, r1, r4
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	56cb      	ldrsb	r3, [r1, r3]
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	17db      	asrs	r3, r3, #31
 800a7de:	6053      	str	r3, [r2, #4]
 800a7e0:	e7c4      	b.n	800a76c <PxMessagingTask+0xe2c>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 800a7e2:	4a2b      	ldr	r2, [pc, #172]	; (800a890 <PxMessagingTask+0xf50>)
 800a7e4:	2038      	movs	r0, #56	; 0x38
 800a7e6:	4368      	muls	r0, r5
 800a7e8:	4921      	ldr	r1, [pc, #132]	; (800a870 <PxMessagingTask+0xf30>)
 800a7ea:	1809      	adds	r1, r1, r0
 800a7ec:	1909      	adds	r1, r1, r4
 800a7ee:	788b      	ldrb	r3, [r1, #2]
 800a7f0:	021b      	lsls	r3, r3, #8
 800a7f2:	7849      	ldrb	r1, [r1, #1]
 800a7f4:	185b      	adds	r3, r3, r1
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	17db      	asrs	r3, r3, #31
 800a7fa:	6053      	str	r3, [r2, #4]
 800a7fc:	e7b6      	b.n	800a76c <PxMessagingTask+0xe2c>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 800a7fe:	4a24      	ldr	r2, [pc, #144]	; (800a890 <PxMessagingTask+0xf50>)
 800a800:	2038      	movs	r0, #56	; 0x38
 800a802:	4368      	muls	r0, r5
 800a804:	491a      	ldr	r1, [pc, #104]	; (800a870 <PxMessagingTask+0xf30>)
 800a806:	1809      	adds	r1, r1, r0
 800a808:	1909      	adds	r1, r1, r4
 800a80a:	788b      	ldrb	r3, [r1, #2]
 800a80c:	021b      	lsls	r3, r3, #8
 800a80e:	7849      	ldrb	r1, [r1, #1]
 800a810:	185b      	adds	r3, r3, r1
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	17db      	asrs	r3, r3, #31
 800a816:	6053      	str	r3, [r2, #4]
 800a818:	e7a8      	b.n	800a76c <PxMessagingTask+0xe2c>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800a81a:	4a1d      	ldr	r2, [pc, #116]	; (800a890 <PxMessagingTask+0xf50>)
 800a81c:	2038      	movs	r0, #56	; 0x38
 800a81e:	4368      	muls	r0, r5
 800a820:	4913      	ldr	r1, [pc, #76]	; (800a870 <PxMessagingTask+0xf30>)
 800a822:	1809      	adds	r1, r1, r0
 800a824:	1909      	adds	r1, r1, r4
 800a826:	788b      	ldrb	r3, [r1, #2]
 800a828:	021b      	lsls	r3, r3, #8
 800a82a:	78c8      	ldrb	r0, [r1, #3]
 800a82c:	0400      	lsls	r0, r0, #16
 800a82e:	181b      	adds	r3, r3, r0
 800a830:	7848      	ldrb	r0, [r1, #1]
 800a832:	181b      	adds	r3, r3, r0
 800a834:	7909      	ldrb	r1, [r1, #4]
 800a836:	0609      	lsls	r1, r1, #24
 800a838:	185b      	adds	r3, r3, r1
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	2300      	movs	r3, #0
 800a83e:	6053      	str	r3, [r2, #4]
 800a840:	e794      	b.n	800a76c <PxMessagingTask+0xe2c>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 800a842:	4a13      	ldr	r2, [pc, #76]	; (800a890 <PxMessagingTask+0xf50>)
 800a844:	2038      	movs	r0, #56	; 0x38
 800a846:	4368      	muls	r0, r5
 800a848:	4909      	ldr	r1, [pc, #36]	; (800a870 <PxMessagingTask+0xf30>)
 800a84a:	1809      	adds	r1, r1, r0
 800a84c:	1909      	adds	r1, r1, r4
 800a84e:	788b      	ldrb	r3, [r1, #2]
 800a850:	021b      	lsls	r3, r3, #8
 800a852:	7848      	ldrb	r0, [r1, #1]
 800a854:	181b      	adds	r3, r3, r0
 800a856:	78c8      	ldrb	r0, [r1, #3]
 800a858:	0400      	lsls	r0, r0, #16
 800a85a:	181b      	adds	r3, r3, r0
 800a85c:	7909      	ldrb	r1, [r1, #4]
 800a85e:	0609      	lsls	r1, r1, #24
 800a860:	185b      	adds	r3, r3, r1
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	17db      	asrs	r3, r3, #31
 800a866:	6053      	str	r3, [r2, #4]
 800a868:	e780      	b.n	800a76c <PxMessagingTask+0xe2c>
 800a86a:	46c0      	nop			; (mov r8, r8)
 800a86c:	20000fb0 	.word	0x20000fb0
 800a870:	20000d80 	.word	0x20000d80
 800a874:	20000084 	.word	0x20000084
 800a878:	0801b448 	.word	0x0801b448
 800a87c:	200069a0 	.word	0x200069a0
 800a880:	0801b468 	.word	0x0801b468
 800a884:	20000001 	.word	0x20000001
 800a888:	20000002 	.word	0x20000002
 800a88c:	20000003 	.word	0x20000003
 800a890:	20001178 	.word	0x20001178
 800a894:	20001180 	.word	0x20001180
 800a898:	20000070 	.word	0x20000070
 800a89c:	0801b488 	.word	0x0801b488
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800a8a0:	4ad7      	ldr	r2, [pc, #860]	; (800ac00 <PxMessagingTask+0x12c0>)
 800a8a2:	2038      	movs	r0, #56	; 0x38
 800a8a4:	4368      	muls	r0, r5
 800a8a6:	49d7      	ldr	r1, [pc, #860]	; (800ac04 <PxMessagingTask+0x12c4>)
 800a8a8:	1809      	adds	r1, r1, r0
 800a8aa:	1909      	adds	r1, r1, r4
 800a8ac:	788b      	ldrb	r3, [r1, #2]
 800a8ae:	021b      	lsls	r3, r3, #8
 800a8b0:	78c8      	ldrb	r0, [r1, #3]
 800a8b2:	0400      	lsls	r0, r0, #16
 800a8b4:	181b      	adds	r3, r3, r0
 800a8b6:	7848      	ldrb	r0, [r1, #1]
 800a8b8:	181b      	adds	r3, r3, r0
 800a8ba:	7909      	ldrb	r1, [r1, #4]
 800a8bc:	0609      	lsls	r1, r1, #24
 800a8be:	185b      	adds	r3, r3, r1
 800a8c0:	6013      	str	r3, [r2, #0]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6053      	str	r3, [r2, #4]
 800a8c6:	e751      	b.n	800a76c <PxMessagingTask+0xe2c>
							responseStatus = BOS_OK;		// Initialize response
 800a8c8:	4bcf      	ldr	r3, [pc, #828]	; (800ac08 <PxMessagingTask+0x12c8>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 800a8ce:	46a1      	mov	r9, r4
 800a8d0:	4bcc      	ldr	r3, [pc, #816]	; (800ac04 <PxMessagingTask+0x12c4>)
 800a8d2:	199b      	adds	r3, r3, r6
 800a8d4:	5d1b      	ldrb	r3, [r3, r4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d100      	bne.n	800a8dc <PxMessagingTask+0xf9c>
 800a8da:	e10b      	b.n	800aaf4 <PxMessagingTask+0x11b4>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 800a8dc:	2b1e      	cmp	r3, #30
 800a8de:	d900      	bls.n	800a8e2 <PxMessagingTask+0xfa2>
 800a8e0:	e104      	b.n	800aaec <PxMessagingTask+0x11ac>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 800a8e2:	1e5c      	subs	r4, r3, #1
 800a8e4:	00a2      	lsls	r2, r4, #2
 800a8e6:	4bc9      	ldr	r3, [pc, #804]	; (800ac0c <PxMessagingTask+0x12cc>)
 800a8e8:	58d1      	ldr	r1, [r2, r3]
 800a8ea:	0c0b      	lsrs	r3, r1, #16
 800a8ec:	2280      	movs	r2, #128	; 0x80
 800a8ee:	0592      	lsls	r2, r2, #22
 800a8f0:	4694      	mov	ip, r2
 800a8f2:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 800a8f4:	464a      	mov	r2, r9
 800a8f6:	1c57      	adds	r7, r2, #1
 800a8f8:	2038      	movs	r0, #56	; 0x38
 800a8fa:	4368      	muls	r0, r5
 800a8fc:	4ac1      	ldr	r2, [pc, #772]	; (800ac04 <PxMessagingTask+0x12c4>)
 800a8fe:	1812      	adds	r2, r2, r0
 800a900:	5dd2      	ldrb	r2, [r2, r7]
 800a902:	4693      	mov	fp, r2
 800a904:	3a01      	subs	r2, #1
 800a906:	b2d0      	uxtb	r0, r2
 800a908:	2807      	cmp	r0, #7
 800a90a:	d81b      	bhi.n	800a944 <PxMessagingTask+0x1004>
 800a90c:	b2d2      	uxtb	r2, r2
 800a90e:	0092      	lsls	r2, r2, #2
 800a910:	48bf      	ldr	r0, [pc, #764]	; (800ac10 <PxMessagingTask+0x12d0>)
 800a912:	5882      	ldr	r2, [r0, r2]
 800a914:	4697      	mov	pc, r2
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a916:	070a      	lsls	r2, r1, #28
 800a918:	d109      	bne.n	800a92e <PxMessagingTask+0xfee>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 800a91a:	2001      	movs	r0, #1
 800a91c:	f009 fa9a 	bl	8013e54 <malloc>
 800a920:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a922:	d00c      	beq.n	800a93e <PxMessagingTask+0xffe>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a924:	00a4      	lsls	r4, r4, #2
 800a926:	0400      	lsls	r0, r0, #16
 800a928:	4458      	add	r0, fp
 800a92a:	4ab8      	ldr	r2, [pc, #736]	; (800ac0c <PxMessagingTask+0x12cc>)
 800a92c:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 800a92e:	2138      	movs	r1, #56	; 0x38
 800a930:	4369      	muls	r1, r5
 800a932:	4ab4      	ldr	r2, [pc, #720]	; (800ac04 <PxMessagingTask+0x12c4>)
 800a934:	1852      	adds	r2, r2, r1
 800a936:	444a      	add	r2, r9
 800a938:	7892      	ldrb	r2, [r2, #2]
 800a93a:	701a      	strb	r2, [r3, #0]
 800a93c:	e002      	b.n	800a944 <PxMessagingTask+0x1004>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a93e:	4bb2      	ldr	r3, [pc, #712]	; (800ac08 <PxMessagingTask+0x12c8>)
 800a940:	2212      	movs	r2, #18
 800a942:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800a944:	2338      	movs	r3, #56	; 0x38
 800a946:	436b      	muls	r3, r5
 800a948:	4aae      	ldr	r2, [pc, #696]	; (800ac04 <PxMessagingTask+0x12c4>)
 800a94a:	18d2      	adds	r2, r2, r3
 800a94c:	464b      	mov	r3, r9
 800a94e:	5cd3      	ldrb	r3, [r2, r3]
 800a950:	3b01      	subs	r3, #1
 800a952:	0098      	lsls	r0, r3, #2
 800a954:	49ad      	ldr	r1, [pc, #692]	; (800ac0c <PxMessagingTask+0x12cc>)
 800a956:	5841      	ldr	r1, [r0, r1]
 800a958:	5dd2      	ldrb	r2, [r2, r7]
 800a95a:	200f      	movs	r0, #15
 800a95c:	4008      	ands	r0, r1
 800a95e:	4290      	cmp	r0, r2
 800a960:	d009      	beq.n	800a976 <PxMessagingTask+0x1036>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	48ab      	ldr	r0, [pc, #684]	; (800ac14 <PxMessagingTask+0x12d4>)
 800a966:	4684      	mov	ip, r0
 800a968:	4462      	add	r2, ip
 800a96a:	400a      	ands	r2, r1
 800a96c:	49a7      	ldr	r1, [pc, #668]	; (800ac0c <PxMessagingTask+0x12cc>)
 800a96e:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 800a970:	4ba5      	ldr	r3, [pc, #660]	; (800ac08 <PxMessagingTask+0x12c8>)
 800a972:	2214      	movs	r2, #20
 800a974:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 800a976:	4ba8      	ldr	r3, [pc, #672]	; (800ac18 <PxMessagingTask+0x12d8>)
 800a978:	799b      	ldrb	r3, [r3, #6]
 800a97a:	2240      	movs	r2, #64	; 0x40
 800a97c:	4393      	bics	r3, r2
 800a97e:	2200      	movs	r2, #0
 800a980:	4691      	mov	r9, r2
 800a982:	2b20      	cmp	r3, #32
 800a984:	d001      	beq.n	800a98a <PxMessagingTask+0x104a>
 800a986:	f7ff f80a 	bl	800999e <PxMessagingTask+0x5e>
								messageParams[0] = responseStatus;
 800a98a:	4b9f      	ldr	r3, [pc, #636]	; (800ac08 <PxMessagingTask+0x12c8>)
 800a98c:	781a      	ldrb	r2, [r3, #0]
 800a98e:	4ba3      	ldr	r3, [pc, #652]	; (800ac1c <PxMessagingTask+0x12dc>)
 800a990:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 800a992:	2201      	movs	r2, #1
 800a994:	2121      	movs	r1, #33	; 0x21
 800a996:	9804      	ldr	r0, [sp, #16]
 800a998:	f7fe fd0e 	bl	80093b8 <SendMessageToModule>
 800a99c:	f7fe ffff 	bl	800999e <PxMessagingTask+0x5e>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a9a0:	070a      	lsls	r2, r1, #28
 800a9a2:	d10a      	bne.n	800a9ba <PxMessagingTask+0x107a>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	f009 fa55 	bl	8013e54 <malloc>
 800a9aa:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a9ac:	d100      	bne.n	800a9b0 <PxMessagingTask+0x1070>
 800a9ae:	e29c      	b.n	800aeea <PxMessagingTask+0x15aa>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a9b0:	00a4      	lsls	r4, r4, #2
 800a9b2:	0400      	lsls	r0, r0, #16
 800a9b4:	3002      	adds	r0, #2
 800a9b6:	4a95      	ldr	r2, [pc, #596]	; (800ac0c <PxMessagingTask+0x12cc>)
 800a9b8:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 800a9ba:	2138      	movs	r1, #56	; 0x38
 800a9bc:	4369      	muls	r1, r5
 800a9be:	4a91      	ldr	r2, [pc, #580]	; (800ac04 <PxMessagingTask+0x12c4>)
 800a9c0:	1852      	adds	r2, r2, r1
 800a9c2:	444a      	add	r2, r9
 800a9c4:	7892      	ldrb	r2, [r2, #2]
 800a9c6:	b252      	sxtb	r2, r2
 800a9c8:	701a      	strb	r2, [r3, #0]
 800a9ca:	e7bb      	b.n	800a944 <PxMessagingTask+0x1004>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a9cc:	070a      	lsls	r2, r1, #28
 800a9ce:	d10a      	bne.n	800a9e6 <PxMessagingTask+0x10a6>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 800a9d0:	2002      	movs	r0, #2
 800a9d2:	f009 fa3f 	bl	8013e54 <malloc>
 800a9d6:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800a9d8:	d100      	bne.n	800a9dc <PxMessagingTask+0x109c>
 800a9da:	e286      	b.n	800aeea <PxMessagingTask+0x15aa>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800a9dc:	00a4      	lsls	r4, r4, #2
 800a9de:	0400      	lsls	r0, r0, #16
 800a9e0:	3003      	adds	r0, #3
 800a9e2:	4a8a      	ldr	r2, [pc, #552]	; (800ac0c <PxMessagingTask+0x12cc>)
 800a9e4:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 800a9e6:	2138      	movs	r1, #56	; 0x38
 800a9e8:	4369      	muls	r1, r5
 800a9ea:	4a86      	ldr	r2, [pc, #536]	; (800ac04 <PxMessagingTask+0x12c4>)
 800a9ec:	1852      	adds	r2, r2, r1
 800a9ee:	444a      	add	r2, r9
 800a9f0:	78d1      	ldrb	r1, [r2, #3]
 800a9f2:	0209      	lsls	r1, r1, #8
 800a9f4:	7892      	ldrb	r2, [r2, #2]
 800a9f6:	1852      	adds	r2, r2, r1
 800a9f8:	b292      	uxth	r2, r2
 800a9fa:	801a      	strh	r2, [r3, #0]
 800a9fc:	e7a2      	b.n	800a944 <PxMessagingTask+0x1004>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800a9fe:	070a      	lsls	r2, r1, #28
 800aa00:	d10a      	bne.n	800aa18 <PxMessagingTask+0x10d8>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 800aa02:	2002      	movs	r0, #2
 800aa04:	f009 fa26 	bl	8013e54 <malloc>
 800aa08:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800aa0a:	d100      	bne.n	800aa0e <PxMessagingTask+0x10ce>
 800aa0c:	e26d      	b.n	800aeea <PxMessagingTask+0x15aa>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800aa0e:	00a4      	lsls	r4, r4, #2
 800aa10:	0400      	lsls	r0, r0, #16
 800aa12:	3004      	adds	r0, #4
 800aa14:	4a7d      	ldr	r2, [pc, #500]	; (800ac0c <PxMessagingTask+0x12cc>)
 800aa16:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 800aa18:	2138      	movs	r1, #56	; 0x38
 800aa1a:	4369      	muls	r1, r5
 800aa1c:	4a79      	ldr	r2, [pc, #484]	; (800ac04 <PxMessagingTask+0x12c4>)
 800aa1e:	1852      	adds	r2, r2, r1
 800aa20:	444a      	add	r2, r9
 800aa22:	78d1      	ldrb	r1, [r2, #3]
 800aa24:	0209      	lsls	r1, r1, #8
 800aa26:	7892      	ldrb	r2, [r2, #2]
 800aa28:	1852      	adds	r2, r2, r1
 800aa2a:	b212      	sxth	r2, r2
 800aa2c:	801a      	strh	r2, [r3, #0]
 800aa2e:	e789      	b.n	800a944 <PxMessagingTask+0x1004>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800aa30:	070a      	lsls	r2, r1, #28
 800aa32:	d10a      	bne.n	800aa4a <PxMessagingTask+0x110a>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 800aa34:	2004      	movs	r0, #4
 800aa36:	f009 fa0d 	bl	8013e54 <malloc>
 800aa3a:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800aa3c:	d100      	bne.n	800aa40 <PxMessagingTask+0x1100>
 800aa3e:	e254      	b.n	800aeea <PxMessagingTask+0x15aa>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800aa40:	00a4      	lsls	r4, r4, #2
 800aa42:	0400      	lsls	r0, r0, #16
 800aa44:	3005      	adds	r0, #5
 800aa46:	4a71      	ldr	r2, [pc, #452]	; (800ac0c <PxMessagingTask+0x12cc>)
 800aa48:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 800aa4a:	2238      	movs	r2, #56	; 0x38
 800aa4c:	436a      	muls	r2, r5
 800aa4e:	496d      	ldr	r1, [pc, #436]	; (800ac04 <PxMessagingTask+0x12c4>)
 800aa50:	1889      	adds	r1, r1, r2
 800aa52:	4449      	add	r1, r9
 800aa54:	78ca      	ldrb	r2, [r1, #3]
 800aa56:	0212      	lsls	r2, r2, #8
 800aa58:	7908      	ldrb	r0, [r1, #4]
 800aa5a:	0400      	lsls	r0, r0, #16
 800aa5c:	1812      	adds	r2, r2, r0
 800aa5e:	7888      	ldrb	r0, [r1, #2]
 800aa60:	1812      	adds	r2, r2, r0
 800aa62:	7949      	ldrb	r1, [r1, #5]
 800aa64:	0609      	lsls	r1, r1, #24
 800aa66:	1852      	adds	r2, r2, r1
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	e76b      	b.n	800a944 <PxMessagingTask+0x1004>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800aa6c:	070a      	lsls	r2, r1, #28
 800aa6e:	d10a      	bne.n	800aa86 <PxMessagingTask+0x1146>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800aa70:	2004      	movs	r0, #4
 800aa72:	f009 f9ef 	bl	8013e54 <malloc>
 800aa76:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800aa78:	d100      	bne.n	800aa7c <PxMessagingTask+0x113c>
 800aa7a:	e236      	b.n	800aeea <PxMessagingTask+0x15aa>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800aa7c:	00a4      	lsls	r4, r4, #2
 800aa7e:	0400      	lsls	r0, r0, #16
 800aa80:	3006      	adds	r0, #6
 800aa82:	4a62      	ldr	r2, [pc, #392]	; (800ac0c <PxMessagingTask+0x12cc>)
 800aa84:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 800aa86:	2238      	movs	r2, #56	; 0x38
 800aa88:	436a      	muls	r2, r5
 800aa8a:	495e      	ldr	r1, [pc, #376]	; (800ac04 <PxMessagingTask+0x12c4>)
 800aa8c:	1889      	adds	r1, r1, r2
 800aa8e:	4449      	add	r1, r9
 800aa90:	78ca      	ldrb	r2, [r1, #3]
 800aa92:	0212      	lsls	r2, r2, #8
 800aa94:	7888      	ldrb	r0, [r1, #2]
 800aa96:	1812      	adds	r2, r2, r0
 800aa98:	7908      	ldrb	r0, [r1, #4]
 800aa9a:	0400      	lsls	r0, r0, #16
 800aa9c:	1812      	adds	r2, r2, r0
 800aa9e:	7949      	ldrb	r1, [r1, #5]
 800aaa0:	0609      	lsls	r1, r1, #24
 800aaa2:	1852      	adds	r2, r2, r1
 800aaa4:	601a      	str	r2, [r3, #0]
 800aaa6:	e74d      	b.n	800a944 <PxMessagingTask+0x1004>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800aaa8:	070a      	lsls	r2, r1, #28
 800aaaa:	d10a      	bne.n	800aac2 <PxMessagingTask+0x1182>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800aaac:	2004      	movs	r0, #4
 800aaae:	f009 f9d1 	bl	8013e54 <malloc>
 800aab2:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800aab4:	d100      	bne.n	800aab8 <PxMessagingTask+0x1178>
 800aab6:	e218      	b.n	800aeea <PxMessagingTask+0x15aa>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800aab8:	00a4      	lsls	r4, r4, #2
 800aaba:	0400      	lsls	r0, r0, #16
 800aabc:	3007      	adds	r0, #7
 800aabe:	4a53      	ldr	r2, [pc, #332]	; (800ac0c <PxMessagingTask+0x12cc>)
 800aac0:	50a0      	str	r0, [r4, r2]
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 800aac2:	2238      	movs	r2, #56	; 0x38
 800aac4:	436a      	muls	r2, r5
 800aac6:	494f      	ldr	r1, [pc, #316]	; (800ac04 <PxMessagingTask+0x12c4>)
 800aac8:	1889      	adds	r1, r1, r2
 800aaca:	4449      	add	r1, r9
 800aacc:	78ca      	ldrb	r2, [r1, #3]
 800aace:	0212      	lsls	r2, r2, #8
 800aad0:	7908      	ldrb	r0, [r1, #4]
 800aad2:	0400      	lsls	r0, r0, #16
 800aad4:	1812      	adds	r2, r2, r0
 800aad6:	7888      	ldrb	r0, [r1, #2]
 800aad8:	1812      	adds	r2, r2, r0
 800aada:	7949      	ldrb	r1, [r1, #5]
 800aadc:	0609      	lsls	r1, r1, #24
 800aade:	1852      	adds	r2, r2, r1
 800aae0:	4947      	ldr	r1, [pc, #284]	; (800ac00 <PxMessagingTask+0x12c0>)
 800aae2:	600a      	str	r2, [r1, #0]
 800aae4:	2000      	movs	r0, #0
 800aae6:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	e72b      	b.n	800a944 <PxMessagingTask+0x1004>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 800aaec:	4b46      	ldr	r3, [pc, #280]	; (800ac08 <PxMessagingTask+0x12c8>)
 800aaee:	2213      	movs	r2, #19
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	e740      	b.n	800a976 <PxMessagingTask+0x1036>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800aaf4:	2238      	movs	r2, #56	; 0x38
 800aaf6:	436a      	muls	r2, r5
 800aaf8:	4b42      	ldr	r3, [pc, #264]	; (800ac04 <PxMessagingTask+0x12c4>)
 800aafa:	189b      	adds	r3, r3, r2
 800aafc:	191b      	adds	r3, r3, r4
 800aafe:	789c      	ldrb	r4, [r3, #2]
 800ab00:	0624      	lsls	r4, r4, #24
 800ab02:	78da      	ldrb	r2, [r3, #3]
 800ab04:	0412      	lsls	r2, r2, #16
 800ab06:	18a4      	adds	r4, r4, r2
 800ab08:	795a      	ldrb	r2, [r3, #5]
 800ab0a:	18a4      	adds	r4, r4, r2
 800ab0c:	791b      	ldrb	r3, [r3, #4]
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	18e4      	adds	r4, r4, r3
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 800ab12:	23e0      	movs	r3, #224	; 0xe0
 800ab14:	061b      	lsls	r3, r3, #24
 800ab16:	18e2      	adds	r2, r4, r3
 800ab18:	4b41      	ldr	r3, [pc, #260]	; (800ac20 <PxMessagingTask+0x12e0>)
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d900      	bls.n	800ab20 <PxMessagingTask+0x11e0>
 800ab1e:	e083      	b.n	800ac28 <PxMessagingTask+0x12e8>
									switch (cMessage[port-1][1+shift])															// Requested format
 800ab20:	2238      	movs	r2, #56	; 0x38
 800ab22:	436a      	muls	r2, r5
 800ab24:	4b37      	ldr	r3, [pc, #220]	; (800ac04 <PxMessagingTask+0x12c4>)
 800ab26:	189b      	adds	r3, r3, r2
 800ab28:	444b      	add	r3, r9
 800ab2a:	785b      	ldrb	r3, [r3, #1]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	2a07      	cmp	r2, #7
 800ab32:	d900      	bls.n	800ab36 <PxMessagingTask+0x11f6>
 800ab34:	e71f      	b.n	800a976 <PxMessagingTask+0x1036>
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4a3a      	ldr	r2, [pc, #232]	; (800ac24 <PxMessagingTask+0x12e4>)
 800ab3c:	58d3      	ldr	r3, [r2, r3]
 800ab3e:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 800ab40:	2238      	movs	r2, #56	; 0x38
 800ab42:	436a      	muls	r2, r5
 800ab44:	4b2f      	ldr	r3, [pc, #188]	; (800ac04 <PxMessagingTask+0x12c4>)
 800ab46:	189b      	adds	r3, r3, r2
 800ab48:	444b      	add	r3, r9
 800ab4a:	799b      	ldrb	r3, [r3, #6]
 800ab4c:	7023      	strb	r3, [r4, #0]
 800ab4e:	e712      	b.n	800a976 <PxMessagingTask+0x1036>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 800ab50:	2238      	movs	r2, #56	; 0x38
 800ab52:	436a      	muls	r2, r5
 800ab54:	4b2b      	ldr	r3, [pc, #172]	; (800ac04 <PxMessagingTask+0x12c4>)
 800ab56:	189b      	adds	r3, r3, r2
 800ab58:	444b      	add	r3, r9
 800ab5a:	799b      	ldrb	r3, [r3, #6]
 800ab5c:	b25b      	sxtb	r3, r3
 800ab5e:	7023      	strb	r3, [r4, #0]
 800ab60:	e709      	b.n	800a976 <PxMessagingTask+0x1036>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 800ab62:	2238      	movs	r2, #56	; 0x38
 800ab64:	436a      	muls	r2, r5
 800ab66:	4b27      	ldr	r3, [pc, #156]	; (800ac04 <PxMessagingTask+0x12c4>)
 800ab68:	189b      	adds	r3, r3, r2
 800ab6a:	444b      	add	r3, r9
 800ab6c:	79da      	ldrb	r2, [r3, #7]
 800ab6e:	0212      	lsls	r2, r2, #8
 800ab70:	799b      	ldrb	r3, [r3, #6]
 800ab72:	189b      	adds	r3, r3, r2
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	8023      	strh	r3, [r4, #0]
 800ab78:	e6fd      	b.n	800a976 <PxMessagingTask+0x1036>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 800ab7a:	2238      	movs	r2, #56	; 0x38
 800ab7c:	436a      	muls	r2, r5
 800ab7e:	4b21      	ldr	r3, [pc, #132]	; (800ac04 <PxMessagingTask+0x12c4>)
 800ab80:	189b      	adds	r3, r3, r2
 800ab82:	444b      	add	r3, r9
 800ab84:	79da      	ldrb	r2, [r3, #7]
 800ab86:	0212      	lsls	r2, r2, #8
 800ab88:	799b      	ldrb	r3, [r3, #6]
 800ab8a:	189b      	adds	r3, r3, r2
 800ab8c:	b21b      	sxth	r3, r3
 800ab8e:	8023      	strh	r3, [r4, #0]
 800ab90:	e6f1      	b.n	800a976 <PxMessagingTask+0x1036>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 800ab92:	2338      	movs	r3, #56	; 0x38
 800ab94:	436b      	muls	r3, r5
 800ab96:	4a1b      	ldr	r2, [pc, #108]	; (800ac04 <PxMessagingTask+0x12c4>)
 800ab98:	18d2      	adds	r2, r2, r3
 800ab9a:	444a      	add	r2, r9
 800ab9c:	79d3      	ldrb	r3, [r2, #7]
 800ab9e:	021b      	lsls	r3, r3, #8
 800aba0:	7a11      	ldrb	r1, [r2, #8]
 800aba2:	0409      	lsls	r1, r1, #16
 800aba4:	185b      	adds	r3, r3, r1
 800aba6:	7991      	ldrb	r1, [r2, #6]
 800aba8:	185b      	adds	r3, r3, r1
 800abaa:	7a52      	ldrb	r2, [r2, #9]
 800abac:	0612      	lsls	r2, r2, #24
 800abae:	189b      	adds	r3, r3, r2
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	e6e0      	b.n	800a976 <PxMessagingTask+0x1036>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800abb4:	2338      	movs	r3, #56	; 0x38
 800abb6:	436b      	muls	r3, r5
 800abb8:	4a12      	ldr	r2, [pc, #72]	; (800ac04 <PxMessagingTask+0x12c4>)
 800abba:	18d2      	adds	r2, r2, r3
 800abbc:	444a      	add	r2, r9
 800abbe:	79d3      	ldrb	r3, [r2, #7]
 800abc0:	021b      	lsls	r3, r3, #8
 800abc2:	7991      	ldrb	r1, [r2, #6]
 800abc4:	185b      	adds	r3, r3, r1
 800abc6:	7a11      	ldrb	r1, [r2, #8]
 800abc8:	0409      	lsls	r1, r1, #16
 800abca:	185b      	adds	r3, r3, r1
 800abcc:	7a52      	ldrb	r2, [r2, #9]
 800abce:	0612      	lsls	r2, r2, #24
 800abd0:	189b      	adds	r3, r3, r2
 800abd2:	6023      	str	r3, [r4, #0]
 800abd4:	e6cf      	b.n	800a976 <PxMessagingTask+0x1036>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800abd6:	2338      	movs	r3, #56	; 0x38
 800abd8:	436b      	muls	r3, r5
 800abda:	4a0a      	ldr	r2, [pc, #40]	; (800ac04 <PxMessagingTask+0x12c4>)
 800abdc:	18d2      	adds	r2, r2, r3
 800abde:	444a      	add	r2, r9
 800abe0:	79d3      	ldrb	r3, [r2, #7]
 800abe2:	021b      	lsls	r3, r3, #8
 800abe4:	7a11      	ldrb	r1, [r2, #8]
 800abe6:	0409      	lsls	r1, r1, #16
 800abe8:	185b      	adds	r3, r3, r1
 800abea:	7991      	ldrb	r1, [r2, #6]
 800abec:	185b      	adds	r3, r3, r1
 800abee:	7a52      	ldrb	r2, [r2, #9]
 800abf0:	0612      	lsls	r2, r2, #24
 800abf2:	189b      	adds	r3, r3, r2
 800abf4:	4a02      	ldr	r2, [pc, #8]	; (800ac00 <PxMessagingTask+0x12c0>)
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	2100      	movs	r1, #0
 800abfa:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	e6ba      	b.n	800a976 <PxMessagingTask+0x1036>
 800ac00:	20001178 	.word	0x20001178
 800ac04:	20000d80 	.word	0x20000d80
 800ac08:	20001180 	.word	0x20001180
 800ac0c:	200069a0 	.word	0x200069a0
 800ac10:	0801b4ac 	.word	0x0801b4ac
 800ac14:	0000fff0 	.word	0x0000fff0
 800ac18:	20006a18 	.word	0x20006a18
 800ac1c:	20000fb0 	.word	0x20000fb0
 800ac20:	00007fff 	.word	0x00007fff
 800ac24:	0801b4cc 	.word	0x0801b4cc
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800ac28:	4ab8      	ldr	r2, [pc, #736]	; (800af0c <PxMessagingTask+0x15cc>)
 800ac2a:	23f8      	movs	r3, #248	; 0xf8
 800ac2c:	061b      	lsls	r3, r3, #24
 800ac2e:	18e3      	adds	r3, r4, r3
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d900      	bls.n	800ac36 <PxMessagingTask+0x12f6>
 800ac34:	e0a6      	b.n	800ad84 <PxMessagingTask+0x1444>
									HAL_FLASH_Unlock();
 800ac36:	f006 fd47 	bl	80116c8 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800ac3a:	2f22      	cmp	r7, #34	; 0x22
 800ac3c:	d111      	bne.n	800ac62 <PxMessagingTask+0x1322>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress = temp32;
 800ac42:	9414      	str	r4, [sp, #80]	; 0x50
										erase.NbPages = 1;
 800ac44:	3301      	adds	r3, #1
 800ac46:	9315      	str	r3, [sp, #84]	; 0x54
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800ac48:	a912      	add	r1, sp, #72	; 0x48
 800ac4a:	a813      	add	r0, sp, #76	; 0x4c
 800ac4c:	f006 fe10 	bl	8011870 <HAL_FLASHEx_Erase>
 800ac50:	900a      	str	r0, [sp, #40]	; 0x28
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d102      	bne.n	800ac5c <PxMessagingTask+0x131c>
 800ac56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac58:	3301      	adds	r3, #1
 800ac5a:	d002      	beq.n	800ac62 <PxMessagingTask+0x1322>
 800ac5c:	4bac      	ldr	r3, [pc, #688]	; (800af10 <PxMessagingTask+0x15d0>)
 800ac5e:	2216      	movs	r2, #22
 800ac60:	701a      	strb	r2, [r3, #0]
									if (responseStatus == BOS_OK)
 800ac62:	4bab      	ldr	r3, [pc, #684]	; (800af10 <PxMessagingTask+0x15d0>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d116      	bne.n	800ac98 <PxMessagingTask+0x1358>
										switch (cMessage[port-1][1+shift])															// Requested format
 800ac6a:	2238      	movs	r2, #56	; 0x38
 800ac6c:	436a      	muls	r2, r5
 800ac6e:	4ba9      	ldr	r3, [pc, #676]	; (800af14 <PxMessagingTask+0x15d4>)
 800ac70:	189b      	adds	r3, r3, r2
 800ac72:	444b      	add	r3, r9
 800ac74:	785b      	ldrb	r3, [r3, #1]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	2a07      	cmp	r2, #7
 800ac7c:	d80c      	bhi.n	800ac98 <PxMessagingTask+0x1358>
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	4aa5      	ldr	r2, [pc, #660]	; (800af18 <PxMessagingTask+0x15d8>)
 800ac84:	58d3      	ldr	r3, [r2, r3]
 800ac86:	469f      	mov	pc, r3
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800ac88:	8823      	ldrh	r3, [r4, #0]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	4aa3      	ldr	r2, [pc, #652]	; (800af1c <PxMessagingTask+0x15dc>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d00c      	beq.n	800acac <PxMessagingTask+0x136c>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800ac92:	4b9f      	ldr	r3, [pc, #636]	; (800af10 <PxMessagingTask+0x15d0>)
 800ac94:	2216      	movs	r2, #22
 800ac96:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800ac98:	f006 fd28 	bl	80116ec <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800ac9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d100      	bne.n	800aca4 <PxMessagingTask+0x1364>
 800aca2:	e668      	b.n	800a976 <PxMessagingTask+0x1036>
 800aca4:	4b9a      	ldr	r3, [pc, #616]	; (800af10 <PxMessagingTask+0x15d0>)
 800aca6:	2216      	movs	r2, #22
 800aca8:	701a      	strb	r2, [r3, #0]
 800acaa:	e664      	b.n	800a976 <PxMessagingTask+0x1036>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800acac:	2238      	movs	r2, #56	; 0x38
 800acae:	436a      	muls	r2, r5
 800acb0:	4b98      	ldr	r3, [pc, #608]	; (800af14 <PxMessagingTask+0x15d4>)
 800acb2:	189b      	adds	r3, r3, r2
 800acb4:	444b      	add	r3, r9
 800acb6:	799a      	ldrb	r2, [r3, #6]
 800acb8:	2300      	movs	r3, #0
 800acba:	4999      	ldr	r1, [pc, #612]	; (800af20 <PxMessagingTask+0x15e0>)
 800acbc:	600a      	str	r2, [r1, #0]
 800acbe:	604b      	str	r3, [r1, #4]
 800acc0:	0021      	movs	r1, r4
 800acc2:	2001      	movs	r0, #1
 800acc4:	f006 fd4a 	bl	801175c <HAL_FLASH_Program>
 800acc8:	900a      	str	r0, [sp, #40]	; 0x28
 800acca:	e7e5      	b.n	800ac98 <PxMessagingTask+0x1358>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800accc:	8823      	ldrh	r3, [r4, #0]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	4a92      	ldr	r2, [pc, #584]	; (800af1c <PxMessagingTask+0x15dc>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d003      	beq.n	800acde <PxMessagingTask+0x139e>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800acd6:	4b8e      	ldr	r3, [pc, #568]	; (800af10 <PxMessagingTask+0x15d0>)
 800acd8:	2216      	movs	r2, #22
 800acda:	701a      	strb	r2, [r3, #0]
 800acdc:	e7dc      	b.n	800ac98 <PxMessagingTask+0x1358>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800acde:	2238      	movs	r2, #56	; 0x38
 800ace0:	436a      	muls	r2, r5
 800ace2:	4b8c      	ldr	r3, [pc, #560]	; (800af14 <PxMessagingTask+0x15d4>)
 800ace4:	189b      	adds	r3, r3, r2
 800ace6:	444b      	add	r3, r9
 800ace8:	79da      	ldrb	r2, [r3, #7]
 800acea:	0212      	lsls	r2, r2, #8
 800acec:	799b      	ldrb	r3, [r3, #6]
 800acee:	18d2      	adds	r2, r2, r3
 800acf0:	17d3      	asrs	r3, r2, #31
 800acf2:	498b      	ldr	r1, [pc, #556]	; (800af20 <PxMessagingTask+0x15e0>)
 800acf4:	600a      	str	r2, [r1, #0]
 800acf6:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800acf8:	0021      	movs	r1, r4
 800acfa:	2001      	movs	r0, #1
 800acfc:	f006 fd2e 	bl	801175c <HAL_FLASH_Program>
 800ad00:	900a      	str	r0, [sp, #40]	; 0x28
 800ad02:	e7c9      	b.n	800ac98 <PxMessagingTask+0x1358>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800ad04:	6823      	ldr	r3, [r4, #0]
 800ad06:	3301      	adds	r3, #1
 800ad08:	d003      	beq.n	800ad12 <PxMessagingTask+0x13d2>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800ad0a:	4b81      	ldr	r3, [pc, #516]	; (800af10 <PxMessagingTask+0x15d0>)
 800ad0c:	2216      	movs	r2, #22
 800ad0e:	701a      	strb	r2, [r3, #0]
 800ad10:	e7c2      	b.n	800ac98 <PxMessagingTask+0x1358>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800ad12:	2238      	movs	r2, #56	; 0x38
 800ad14:	436a      	muls	r2, r5
 800ad16:	4b7f      	ldr	r3, [pc, #508]	; (800af14 <PxMessagingTask+0x15d4>)
 800ad18:	189b      	adds	r3, r3, r2
 800ad1a:	444b      	add	r3, r9
 800ad1c:	79da      	ldrb	r2, [r3, #7]
 800ad1e:	0212      	lsls	r2, r2, #8
 800ad20:	7a19      	ldrb	r1, [r3, #8]
 800ad22:	0409      	lsls	r1, r1, #16
 800ad24:	1852      	adds	r2, r2, r1
 800ad26:	7999      	ldrb	r1, [r3, #6]
 800ad28:	1852      	adds	r2, r2, r1
 800ad2a:	7a5b      	ldrb	r3, [r3, #9]
 800ad2c:	061b      	lsls	r3, r3, #24
 800ad2e:	18d2      	adds	r2, r2, r3
 800ad30:	2300      	movs	r3, #0
 800ad32:	497b      	ldr	r1, [pc, #492]	; (800af20 <PxMessagingTask+0x15e0>)
 800ad34:	600a      	str	r2, [r1, #0]
 800ad36:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800ad38:	0021      	movs	r1, r4
 800ad3a:	2002      	movs	r0, #2
 800ad3c:	f006 fd0e 	bl	801175c <HAL_FLASH_Program>
 800ad40:	900a      	str	r0, [sp, #40]	; 0x28
 800ad42:	e7a9      	b.n	800ac98 <PxMessagingTask+0x1358>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	3301      	adds	r3, #1
 800ad48:	d003      	beq.n	800ad52 <PxMessagingTask+0x1412>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800ad4a:	4b71      	ldr	r3, [pc, #452]	; (800af10 <PxMessagingTask+0x15d0>)
 800ad4c:	2216      	movs	r2, #22
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e7a2      	b.n	800ac98 <PxMessagingTask+0x1358>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800ad52:	2238      	movs	r2, #56	; 0x38
 800ad54:	436a      	muls	r2, r5
 800ad56:	4b6f      	ldr	r3, [pc, #444]	; (800af14 <PxMessagingTask+0x15d4>)
 800ad58:	189b      	adds	r3, r3, r2
 800ad5a:	444b      	add	r3, r9
 800ad5c:	79da      	ldrb	r2, [r3, #7]
 800ad5e:	0212      	lsls	r2, r2, #8
 800ad60:	7a19      	ldrb	r1, [r3, #8]
 800ad62:	0409      	lsls	r1, r1, #16
 800ad64:	1852      	adds	r2, r2, r1
 800ad66:	7999      	ldrb	r1, [r3, #6]
 800ad68:	1852      	adds	r2, r2, r1
 800ad6a:	7a5b      	ldrb	r3, [r3, #9]
 800ad6c:	061b      	lsls	r3, r3, #24
 800ad6e:	18d2      	adds	r2, r2, r3
 800ad70:	2300      	movs	r3, #0
 800ad72:	496b      	ldr	r1, [pc, #428]	; (800af20 <PxMessagingTask+0x15e0>)
 800ad74:	600a      	str	r2, [r1, #0]
 800ad76:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800ad78:	0021      	movs	r1, r4
 800ad7a:	2003      	movs	r0, #3
 800ad7c:	f006 fcee 	bl	801175c <HAL_FLASH_Program>
 800ad80:	900a      	str	r0, [sp, #40]	; 0x28
 800ad82:	e789      	b.n	800ac98 <PxMessagingTask+0x1358>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800ad84:	4b62      	ldr	r3, [pc, #392]	; (800af10 <PxMessagingTask+0x15d0>)
 800ad86:	2215      	movs	r2, #21
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	e5f4      	b.n	800a976 <PxMessagingTask+0x1036>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800ad8c:	4b61      	ldr	r3, [pc, #388]	; (800af14 <PxMessagingTask+0x15d4>)
 800ad8e:	199b      	adds	r3, r3, r6
 800ad90:	5d1a      	ldrb	r2, [r3, r4]
 800ad92:	4b5f      	ldr	r3, [pc, #380]	; (800af10 <PxMessagingTask+0x15d0>)
 800ad94:	701a      	strb	r2, [r3, #0]
							break;	
 800ad96:	2300      	movs	r3, #0
 800ad98:	4699      	mov	r9, r3
 800ad9a:	f7fe fe00 	bl	800999e <PxMessagingTask+0x5e>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800ad9e:	9a06      	ldr	r2, [sp, #24]
 800ada0:	3a01      	subs	r2, #1
 800ada2:	b292      	uxth	r2, r2
 800ada4:	1c61      	adds	r1, r4, #1
 800ada6:	4451      	add	r1, sl
 800ada8:	4b5a      	ldr	r3, [pc, #360]	; (800af14 <PxMessagingTask+0x15d4>)
 800adaa:	18c9      	adds	r1, r1, r3
 800adac:	199b      	adds	r3, r3, r6
 800adae:	5d18      	ldrb	r0, [r3, r4]
 800adb0:	230a      	movs	r3, #10
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	f003 f8a6 	bl	800df04 <writePxMutex>
							break;
 800adb8:	2300      	movs	r3, #0
 800adba:	4699      	mov	r9, r3
 800adbc:	f7fe fdef 	bl	800999e <PxMessagingTask+0x5e>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800adc0:	9400      	str	r4, [sp, #0]
 800adc2:	465b      	mov	r3, fp
 800adc4:	9a04      	ldr	r2, [sp, #16]
 800adc6:	9908      	ldr	r1, [sp, #32]
 800adc8:	0038      	movs	r0, r7
 800adca:	f7fe fdb7 	bl	800993c <User_MessagingParser>
 800adce:	4681      	mov	r9, r0
							if (result == BOS_ERR_UnknownMessage) {
 800add0:	2801      	cmp	r0, #1
 800add2:	d001      	beq.n	800add8 <PxMessagingTask+0x1498>
 800add4:	f7fe fde3 	bl	800999e <PxMessagingTask+0x5e>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800add8:	9400      	str	r4, [sp, #0]
 800adda:	465b      	mov	r3, fp
 800addc:	9a04      	ldr	r2, [sp, #16]
 800adde:	9908      	ldr	r1, [sp, #32]
 800ade0:	0038      	movs	r0, r7
 800ade2:	f000 fe4b 	bl	800ba7c <Module_MessagingTask>
 800ade6:	4681      	mov	r9, r0
 800ade8:	f7fe fdd4 	bl	8009994 <PxMessagingTask+0x54>
									switch (cMessage[port-1][1+shift])											// requested format
 800adec:	2300      	movs	r3, #0
 800adee:	4699      	mov	r9, r3
 800adf0:	f7fe fdd0 	bl	8009994 <PxMessagingTask+0x54>
									switch (messageParams[0])											// requested format
 800adf4:	2300      	movs	r3, #0
 800adf6:	4699      	mov	r9, r3
 800adf8:	f7fe fdcc 	bl	8009994 <PxMessagingTask+0x54>
										switch (messageParams[0])											// requested format
 800adfc:	2300      	movs	r3, #0
 800adfe:	4699      	mov	r9, r3
 800ae00:	f7fe fdc8 	bl	8009994 <PxMessagingTask+0x54>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800ae04:	2200      	movs	r2, #0
 800ae06:	2100      	movs	r1, #0
 800ae08:	9804      	ldr	r0, [sp, #16]
 800ae0a:	f7fe fad5 	bl	80093b8 <SendMessageToModule>
			result = BOS_OK;			
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4699      	mov	r9, r3
 800ae12:	f7fe fdc4 	bl	800999e <PxMessagingTask+0x5e>
					switch (code)
 800ae16:	2300      	movs	r3, #0
 800ae18:	4699      	mov	r9, r3
 800ae1a:	f7fe fdc0 	bl	800999e <PxMessagingTask+0x5e>
					result = BOS_ERR_MSG_Reflection;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	4699      	mov	r9, r3
 800ae22:	f7fe fe49 	bl	8009ab8 <PxMessagingTask+0x178>
 800ae26:	9205      	str	r2, [sp, #20]
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4699      	mov	r9, r3
 800ae2c:	f7fe fdb7 	bl	800999e <PxMessagingTask+0x5e>
 800ae30:	2300      	movs	r3, #0
 800ae32:	4699      	mov	r9, r3
 800ae34:	f7fe fdb3 	bl	800999e <PxMessagingTask+0x5e>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 800ae38:	455b      	cmp	r3, fp
 800ae3a:	d003      	beq.n	800ae44 <PxMessagingTask+0x1504>
 800ae3c:	2f10      	cmp	r7, #16
 800ae3e:	d001      	beq.n	800ae44 <PxMessagingTask+0x1504>
 800ae40:	f7fe fdfe 	bl	8009a40 <PxMessagingTask+0x100>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800ae44:	465b      	mov	r3, fp
 800ae46:	2bff      	cmp	r3, #255	; 0xff
 800ae48:	d101      	bne.n	800ae4e <PxMessagingTask+0x150e>
 800ae4a:	f7fe fe1a 	bl	8009a82 <PxMessagingTask+0x142>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800ae4e:	2bfe      	cmp	r3, #254	; 0xfe
 800ae50:	d001      	beq.n	800ae56 <PxMessagingTask+0x1516>
 800ae52:	f7fe fe31 	bl	8009ab8 <PxMessagingTask+0x178>
 800ae56:	4b2f      	ldr	r3, [pc, #188]	; (800af14 <PxMessagingTask+0x15d4>)
 800ae58:	199b      	adds	r3, r3, r6
 800ae5a:	1859      	adds	r1, r3, r1
 800ae5c:	3901      	subs	r1, #1
 800ae5e:	780b      	ldrb	r3, [r1, #0]
 800ae60:	4a30      	ldr	r2, [pc, #192]	; (800af24 <PxMessagingTask+0x15e4>)
 800ae62:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 800ae64:	2103      	movs	r1, #3
 800ae66:	4689      	mov	r9, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d101      	bne.n	800ae70 <PxMessagingTask+0x1530>
 800ae6c:	f7fe fd92 	bl	8009994 <PxMessagingTask+0x54>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 800ae70:	4a2c      	ldr	r2, [pc, #176]	; (800af24 <PxMessagingTask+0x15e4>)
 800ae72:	7013      	strb	r3, [r2, #0]
 800ae74:	4a2c      	ldr	r2, [pc, #176]	; (800af28 <PxMessagingTask+0x15e8>)
 800ae76:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 800ae78:	9908      	ldr	r1, [sp, #32]
 800ae7a:	20fe      	movs	r0, #254	; 0xfe
 800ae7c:	f7fe fa54 	bl	8009328 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 800ae80:	4b2a      	ldr	r3, [pc, #168]	; (800af2c <PxMessagingTask+0x15ec>)
 800ae82:	5d59      	ldrb	r1, [r3, r5]
 800ae84:	4b23      	ldr	r3, [pc, #140]	; (800af14 <PxMessagingTask+0x15d4>)
 800ae86:	199b      	adds	r3, r3, r6
 800ae88:	185a      	adds	r2, r3, r1
 800ae8a:	3a01      	subs	r2, #1
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800ae90:	1e8a      	subs	r2, r1, #2
 800ae92:	5c9b      	ldrb	r3, [r3, r2]
 800ae94:	9305      	str	r3, [sp, #20]
					for(i=0 ; i<temp ; i++)
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d033      	beq.n	800af02 <PxMessagingTask+0x15c2>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 800ae9a:	1ad2      	subs	r2, r2, r3
 800ae9c:	4691      	mov	r9, r2
 800ae9e:	4b24      	ldr	r3, [pc, #144]	; (800af30 <PxMessagingTask+0x15f0>)
 800aea0:	7818      	ldrb	r0, [r3, #0]
 800aea2:	4b1c      	ldr	r3, [pc, #112]	; (800af14 <PxMessagingTask+0x15d4>)
 800aea4:	199b      	adds	r3, r3, r6
 800aea6:	5c9b      	ldrb	r3, [r3, r2]
 800aea8:	4283      	cmp	r3, r0
 800aeaa:	d018      	beq.n	800aede <PxMessagingTask+0x159e>
 800aeac:	4652      	mov	r2, sl
 800aeae:	1c53      	adds	r3, r2, #1
 800aeb0:	444b      	add	r3, r9
 800aeb2:	4a18      	ldr	r2, [pc, #96]	; (800af14 <PxMessagingTask+0x15d4>)
 800aeb4:	189b      	adds	r3, r3, r2
 800aeb6:	9306      	str	r3, [sp, #24]
 800aeb8:	3201      	adds	r2, #1
 800aeba:	4452      	add	r2, sl
 800aebc:	9b05      	ldr	r3, [sp, #20]
 800aebe:	3b01      	subs	r3, #1
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	469c      	mov	ip, r3
 800aec4:	4462      	add	r2, ip
 800aec6:	444a      	add	r2, r9
 800aec8:	468c      	mov	ip, r1
 800aeca:	9b06      	ldr	r3, [sp, #24]
 800aecc:	0011      	movs	r1, r2
					for(i=0 ; i<temp ; i++)
 800aece:	428b      	cmp	r3, r1
 800aed0:	d017      	beq.n	800af02 <PxMessagingTask+0x15c2>
 800aed2:	3301      	adds	r3, #1
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 800aed4:	1e5a      	subs	r2, r3, #1
 800aed6:	7812      	ldrb	r2, [r2, #0]
 800aed8:	4282      	cmp	r2, r0
 800aeda:	d1f8      	bne.n	800aece <PxMessagingTask+0x158e>
 800aedc:	4661      	mov	r1, ip
				shift += 4;
 800aede:	3404      	adds	r4, #4
				numOfParams = messageLength[port-1] - shift;
 800aee0:	1b0a      	subs	r2, r1, r4
 800aee2:	b2d3      	uxtb	r3, r2
 800aee4:	9306      	str	r3, [sp, #24]
 800aee6:	f7fe fdf1 	bl	8009acc <PxMessagingTask+0x18c>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800aeea:	2338      	movs	r3, #56	; 0x38
 800aeec:	436b      	muls	r3, r5
 800aeee:	4a09      	ldr	r2, [pc, #36]	; (800af14 <PxMessagingTask+0x15d4>)
 800aef0:	18d2      	adds	r2, r2, r3
 800aef2:	464b      	mov	r3, r9
 800aef4:	5cd3      	ldrb	r3, [r2, r3]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	0098      	lsls	r0, r3, #2
 800aefa:	490e      	ldr	r1, [pc, #56]	; (800af34 <PxMessagingTask+0x15f4>)
 800aefc:	5841      	ldr	r1, [r0, r1]
 800aefe:	5dd2      	ldrb	r2, [r2, r7]
 800af00:	e52f      	b.n	800a962 <PxMessagingTask+0x1022>
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 800af02:	2366      	movs	r3, #102	; 0x66
 800af04:	4699      	mov	r9, r3
 800af06:	f7fe fd4a 	bl	800999e <PxMessagingTask+0x5e>
 800af0a:	46c0      	nop			; (mov r8, r8)
 800af0c:	0001ffff 	.word	0x0001ffff
 800af10:	20001180 	.word	0x20001180
 800af14:	20000d80 	.word	0x20000d80
 800af18:	0801b4ec 	.word	0x0801b4ec
 800af1c:	0000ffff 	.word	0x0000ffff
 800af20:	20001178 	.word	0x20001178
 800af24:	200015fe 	.word	0x200015fe
 800af28:	20000d2e 	.word	0x20000d2e
 800af2c:	20000fa8 	.word	0x20000fa8
 800af30:	200010e4 	.word	0x200010e4
 800af34:	200069a0 	.word	0x200069a0

0800af38 <LSM303SampleMagRaw>:
//	
//	return LSM303MagDisable();
//}

static Module_Status LSM303SampleMagRaw(int16_t *magX, int16_t *magY, int16_t *magZ)
{
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	0006      	movs	r6, r0
 800af3e:	000d      	movs	r5, r1
 800af40:	0014      	movs	r4, r2
	int16_t *pData;
	uint8_t data[6];
	
	memset(data, 0, sizeof(data));
 800af42:	2206      	movs	r2, #6
 800af44:	2100      	movs	r1, #0
 800af46:	4668      	mov	r0, sp
 800af48:	f009 f9da 	bl	8014300 <memset>
	
	if (LSM303AGR_MAG_Get_Raw_Magnetic(&hi2c2, data) != MEMS_SUCCESS)
 800af4c:	4669      	mov	r1, sp
 800af4e:	4809      	ldr	r0, [pc, #36]	; (800af74 <LSM303SampleMagRaw+0x3c>)
 800af50:	f003 f954 	bl	800e1fc <LSM303AGR_MAG_Get_Raw_Magnetic>
		return H0BR4_ERR_LSM303;
 800af54:	2306      	movs	r3, #6
	if (LSM303AGR_MAG_Get_Raw_Magnetic(&hi2c2, data) != MEMS_SUCCESS)
 800af56:	2801      	cmp	r0, #1
 800af58:	d109      	bne.n	800af6e <LSM303SampleMagRaw+0x36>
	
	pData = (int16_t *)data;
	*magX = pData[0];
 800af5a:	466b      	mov	r3, sp
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	8033      	strh	r3, [r6, #0]
	*magY = pData[1];
 800af60:	466b      	mov	r3, sp
 800af62:	885b      	ldrh	r3, [r3, #2]
 800af64:	802b      	strh	r3, [r5, #0]
	*magZ = pData[2];
 800af66:	466b      	mov	r3, sp
 800af68:	889b      	ldrh	r3, [r3, #4]
 800af6a:	8023      	strh	r3, [r4, #0]
	
	return H0BR4_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	0018      	movs	r0, r3
 800af70:	b002      	add	sp, #8
 800af72:	bd70      	pop	{r4, r5, r6, pc}
 800af74:	20006db0 	.word	0x20006db0

0800af78 <LSM303SampleMagMGauss>:

static Module_Status LSM303SampleMagMGauss(int *magX, int *magY, int *magZ)
{
 800af78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af7a:	b083      	sub	sp, #12
 800af7c:	0007      	movs	r7, r0
 800af7e:	000e      	movs	r6, r1
 800af80:	0015      	movs	r5, r2
	Module_Status status = H0BR4_OK;
  int16_t rawMagX, rawMagY, rawMagZ;

  /* Read raw data from LSM303AGR output register. */
  if ((status = LSM303SampleMagRaw(&rawMagX, &rawMagY, &rawMagZ)) != H0BR4_OK)
 800af82:	466b      	mov	r3, sp
 800af84:	1c9a      	adds	r2, r3, #2
 800af86:	a901      	add	r1, sp, #4
 800af88:	1d98      	adds	r0, r3, #6
 800af8a:	f7ff ffd5 	bl	800af38 <LSM303SampleMagRaw>
 800af8e:	1e04      	subs	r4, r0, #0
 800af90:	d125      	bne.n	800afde <LSM303SampleMagMGauss+0x66>
    return status;

  /* Set the raw data. */
  *magX = rawMagX * (float)LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800af92:	466b      	mov	r3, sp
 800af94:	3306      	adds	r3, #6
 800af96:	2000      	movs	r0, #0
 800af98:	5e18      	ldrsh	r0, [r3, r0]
 800af9a:	f7f6 f8f5 	bl	8001188 <__aeabi_i2f>
 800af9e:	21ff      	movs	r1, #255	; 0xff
 800afa0:	0589      	lsls	r1, r1, #22
 800afa2:	f7f5 ff9f 	bl	8000ee4 <__aeabi_fmul>
 800afa6:	f7f6 f8cf 	bl	8001148 <__aeabi_f2iz>
 800afaa:	6038      	str	r0, [r7, #0]
  *magY = rawMagY * (float)LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800afac:	ab01      	add	r3, sp, #4
 800afae:	2000      	movs	r0, #0
 800afb0:	5e18      	ldrsh	r0, [r3, r0]
 800afb2:	f7f6 f8e9 	bl	8001188 <__aeabi_i2f>
 800afb6:	21ff      	movs	r1, #255	; 0xff
 800afb8:	0589      	lsls	r1, r1, #22
 800afba:	f7f5 ff93 	bl	8000ee4 <__aeabi_fmul>
 800afbe:	f7f6 f8c3 	bl	8001148 <__aeabi_f2iz>
 800afc2:	6030      	str	r0, [r6, #0]
  *magZ = rawMagZ * (float)LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800afc4:	466b      	mov	r3, sp
 800afc6:	3302      	adds	r3, #2
 800afc8:	2000      	movs	r0, #0
 800afca:	5e18      	ldrsh	r0, [r3, r0]
 800afcc:	f7f6 f8dc 	bl	8001188 <__aeabi_i2f>
 800afd0:	21ff      	movs	r1, #255	; 0xff
 800afd2:	0589      	lsls	r1, r1, #22
 800afd4:	f7f5 ff86 	bl	8000ee4 <__aeabi_fmul>
 800afd8:	f7f6 f8b6 	bl	8001148 <__aeabi_f2iz>
 800afdc:	6028      	str	r0, [r5, #0]
  return status;
}
 800afde:	0020      	movs	r0, r4
 800afe0:	b003      	add	sp, #12
 800afe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afe4 <SampleMagMGaussToString>:
					}
	return status;
}

Module_Status SampleMagMGaussToString(char *cstring, size_t maxLen)
{
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	0005      	movs	r5, r0
 800afea:	000e      	movs	r6, r1
	Module_Status status = H0BR4_OK;
	int x = 0, y = 0, z = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	9305      	str	r3, [sp, #20]
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	9303      	str	r3, [sp, #12]
	
	if ((status = LSM303SampleMagMGauss(&x, &y, &z)) != H0BR4_OK)
 800aff4:	aa03      	add	r2, sp, #12
 800aff6:	a904      	add	r1, sp, #16
 800aff8:	a805      	add	r0, sp, #20
 800affa:	f7ff ffbd 	bl	800af78 <LSM303SampleMagMGauss>
 800affe:	1e04      	subs	r4, r0, #0
 800b000:	d002      	beq.n	800b008 <SampleMagMGaussToString+0x24>
		return status;
	
	snprintf(cstring, maxLen, "Mag(mGauss) | X: %d, Y: %d, Z: %d\r\n", x, y, z);
	return status;
}
 800b002:	0020      	movs	r0, r4
 800b004:	b006      	add	sp, #24
 800b006:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Mag(mGauss) | X: %d, Y: %d, Z: %d\r\n", x, y, z);
 800b008:	9b03      	ldr	r3, [sp, #12]
 800b00a:	9301      	str	r3, [sp, #4]
 800b00c:	9b04      	ldr	r3, [sp, #16]
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	9b05      	ldr	r3, [sp, #20]
 800b012:	4a03      	ldr	r2, [pc, #12]	; (800b020 <SampleMagMGaussToString+0x3c>)
 800b014:	0031      	movs	r1, r6
 800b016:	0028      	movs	r0, r5
 800b018:	f009 fb6c 	bl	80146f4 <snprintf>
	return status;
 800b01c:	e7f1      	b.n	800b002 <SampleMagMGaussToString+0x1e>
 800b01e:	46c0      	nop			; (mov r8, r8)
 800b020:	0801b5a0 	.word	0x0801b5a0

0800b024 <SampleMagMGaussToBuf>:

Module_Status SampleMagMGaussToBuf(float *buffer)
{
 800b024:	b530      	push	{r4, r5, lr}
 800b026:	b085      	sub	sp, #20
 800b028:	0004      	movs	r4, r0
	int iMagMGauss[3];
	Module_Status status = LSM303SampleMagMGauss(iMagMGauss, iMagMGauss + 1, iMagMGauss + 2);
 800b02a:	aa03      	add	r2, sp, #12
 800b02c:	a902      	add	r1, sp, #8
 800b02e:	a801      	add	r0, sp, #4
 800b030:	f7ff ffa2 	bl	800af78 <LSM303SampleMagMGauss>
 800b034:	0005      	movs	r5, r0
	
	buffer[0] = iMagMGauss[0];
 800b036:	9801      	ldr	r0, [sp, #4]
 800b038:	f7f6 f8a6 	bl	8001188 <__aeabi_i2f>
 800b03c:	6020      	str	r0, [r4, #0]
	buffer[1] = iMagMGauss[1];
 800b03e:	9802      	ldr	r0, [sp, #8]
 800b040:	f7f6 f8a2 	bl	8001188 <__aeabi_i2f>
 800b044:	6060      	str	r0, [r4, #4]
	buffer[2] = iMagMGauss[2];
 800b046:	9803      	ldr	r0, [sp, #12]
 800b048:	f7f6 f89e 	bl	8001188 <__aeabi_i2f>
 800b04c:	60a0      	str	r0, [r4, #8]
	
	return status;
}
 800b04e:	0028      	movs	r0, r5
 800b050:	b005      	add	sp, #20
 800b052:	bd30      	pop	{r4, r5, pc}

0800b054 <SampleMagMGaussToPort>:
{
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	0006      	movs	r6, r0
 800b05a:	000d      	movs	r5, r1
	if ((status = SampleMagMGaussToBuf(buffer)) != H0BR4_OK)
 800b05c:	a801      	add	r0, sp, #4
 800b05e:	f7ff ffe1 	bl	800b024 <SampleMagMGaussToBuf>
 800b062:	1e04      	subs	r4, r0, #0
 800b064:	d123      	bne.n	800b0ae <SampleMagMGaussToPort+0x5a>
	if (module==myID){
 800b066:	4b23      	ldr	r3, [pc, #140]	; (800b0f4 <SampleMagMGaussToPort+0xa0>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	42ab      	cmp	r3, r5
 800b06c:	d022      	beq.n	800b0b4 <SampleMagMGaussToPort+0x60>
						messageParams[0]=port;
 800b06e:	4b22      	ldr	r3, [pc, #136]	; (800b0f8 <SampleMagMGaussToPort+0xa4>)
 800b070:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&buffer[0])+3);  messageParams[2] = *((__IO uint8_t *)(&buffer[0])+2);
 800b072:	aa01      	add	r2, sp, #4
 800b074:	78d1      	ldrb	r1, [r2, #3]
 800b076:	7059      	strb	r1, [r3, #1]
 800b078:	7891      	ldrb	r1, [r2, #2]
 800b07a:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&buffer[0])+1);  messageParams[4] = *((__IO uint8_t *)(&buffer[0])+0);
 800b07c:	7851      	ldrb	r1, [r2, #1]
 800b07e:	70d9      	strb	r1, [r3, #3]
 800b080:	7811      	ldrb	r1, [r2, #0]
 800b082:	7119      	strb	r1, [r3, #4]
					  messageParams[5] = *((__IO uint8_t *)(&buffer[1])+3);  messageParams[6] = *((__IO uint8_t *)(&buffer[1])+2);
 800b084:	79d1      	ldrb	r1, [r2, #7]
 800b086:	7159      	strb	r1, [r3, #5]
 800b088:	7991      	ldrb	r1, [r2, #6]
 800b08a:	7199      	strb	r1, [r3, #6]
						messageParams[7] = *((__IO uint8_t *)(&buffer[1])+1);  messageParams[8] = *((__IO uint8_t *)(&buffer[1])+0);
 800b08c:	7951      	ldrb	r1, [r2, #5]
 800b08e:	71d9      	strb	r1, [r3, #7]
 800b090:	7911      	ldrb	r1, [r2, #4]
 800b092:	7219      	strb	r1, [r3, #8]
					  messageParams[9] = *((__IO uint8_t *)(&buffer[2])+3);  messageParams[10] = *((__IO uint8_t *)(&buffer[2])+2);
 800b094:	7ad1      	ldrb	r1, [r2, #11]
 800b096:	7259      	strb	r1, [r3, #9]
 800b098:	7a91      	ldrb	r1, [r2, #10]
 800b09a:	7299      	strb	r1, [r3, #10]
						messageParams[11] = *((__IO uint8_t *)(&buffer[2])+1); messageParams[12] = *((__IO uint8_t *)(&buffer[2])+0);
 800b09c:	7a51      	ldrb	r1, [r2, #9]
 800b09e:	72d9      	strb	r1, [r3, #11]
 800b0a0:	7a12      	ldrb	r2, [r2, #8]
 800b0a2:	731a      	strb	r2, [r3, #12]
						SendMessageToModule(module, CODE_PORT_FORWARD, (sizeof(float)*3)+1);
 800b0a4:	220d      	movs	r2, #13
 800b0a6:	2123      	movs	r1, #35	; 0x23
 800b0a8:	0028      	movs	r0, r5
 800b0aa:	f7fe f985 	bl	80093b8 <SendMessageToModule>
}
 800b0ae:	0020      	movs	r0, r4
 800b0b0:	b004      	add	sp, #16
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}
						temp[0] = *((__IO uint8_t *)(&buffer[0])+3);  temp[1] = *((__IO uint8_t *)(&buffer[0])+2);
 800b0b4:	ab01      	add	r3, sp, #4
 800b0b6:	78da      	ldrb	r2, [r3, #3]
 800b0b8:	4910      	ldr	r1, [pc, #64]	; (800b0fc <SampleMagMGaussToPort+0xa8>)
 800b0ba:	700a      	strb	r2, [r1, #0]
 800b0bc:	789a      	ldrb	r2, [r3, #2]
 800b0be:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&buffer[0])+1);  temp[3] = *((__IO uint8_t *)(&buffer[0])+0);
 800b0c0:	785a      	ldrb	r2, [r3, #1]
 800b0c2:	708a      	strb	r2, [r1, #2]
 800b0c4:	781a      	ldrb	r2, [r3, #0]
 800b0c6:	70ca      	strb	r2, [r1, #3]
		        temp[4] = *((__IO uint8_t *)(&buffer[1])+3);  temp[5] = *((__IO uint8_t *)(&buffer[1])+2);
 800b0c8:	79da      	ldrb	r2, [r3, #7]
 800b0ca:	710a      	strb	r2, [r1, #4]
 800b0cc:	799a      	ldrb	r2, [r3, #6]
 800b0ce:	714a      	strb	r2, [r1, #5]
						temp[6] = *((__IO uint8_t *)(&buffer[1])+1);  temp[7] = *((__IO uint8_t *)(&buffer[1])+0);
 800b0d0:	795a      	ldrb	r2, [r3, #5]
 800b0d2:	718a      	strb	r2, [r1, #6]
 800b0d4:	791a      	ldrb	r2, [r3, #4]
 800b0d6:	71ca      	strb	r2, [r1, #7]
		        temp[8] = *((__IO uint8_t *)(&buffer[2])+3);  temp[9] = *((__IO uint8_t *)(&buffer[2])+2);
 800b0d8:	7ada      	ldrb	r2, [r3, #11]
 800b0da:	720a      	strb	r2, [r1, #8]
 800b0dc:	7a9a      	ldrb	r2, [r3, #10]
 800b0de:	724a      	strb	r2, [r1, #9]
						temp[10] = *((__IO uint8_t *)(&buffer[2])+1); temp[11] = *((__IO uint8_t *)(&buffer[2])+0);
 800b0e0:	7a5a      	ldrb	r2, [r3, #9]
 800b0e2:	728a      	strb	r2, [r1, #10]
 800b0e4:	7a1b      	ldrb	r3, [r3, #8]
 800b0e6:	72cb      	strb	r3, [r1, #11]
						writePxITMutex(port, (char *)&temp[0], 12*sizeof(uint8_t), 10);
 800b0e8:	230a      	movs	r3, #10
 800b0ea:	220c      	movs	r2, #12
 800b0ec:	0030      	movs	r0, r6
 800b0ee:	f002 ff31 	bl	800df54 <writePxITMutex>
 800b0f2:	e7dc      	b.n	800b0ae <SampleMagMGaussToPort+0x5a>
 800b0f4:	200010e4 	.word	0x200010e4
 800b0f8:	20000fb0 	.word	0x20000fb0
 800b0fc:	200017e0 	.word	0x200017e0

0800b100 <LSM6DS3SampleTempCelsius>:
{
 800b100:	b510      	push	{r4, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	0004      	movs	r4, r0
	if (LSM6DS3_ACC_GYRO_ReadReg(&hi2c2, LSM6DS3_ACC_GYRO_OUT_TEMP_L, buff, 2) != MEMS_SUCCESS)
 800b106:	2302      	movs	r3, #2
 800b108:	aa01      	add	r2, sp, #4
 800b10a:	2120      	movs	r1, #32
 800b10c:	480c      	ldr	r0, [pc, #48]	; (800b140 <LSM6DS3SampleTempCelsius+0x40>)
 800b10e:	f003 f8c2 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
		return H0BR4_ERR_LSM6DS3;
 800b112:	2305      	movs	r3, #5
	if (LSM6DS3_ACC_GYRO_ReadReg(&hi2c2, LSM6DS3_ACC_GYRO_OUT_TEMP_L, buff, 2) != MEMS_SUCCESS)
 800b114:	2801      	cmp	r0, #1
 800b116:	d110      	bne.n	800b13a <LSM6DS3SampleTempCelsius+0x3a>
	int16_t rawTemp = concatBytes(buff[0], buff[1]);
 800b118:	aa01      	add	r2, sp, #4
 800b11a:	7853      	ldrb	r3, [r2, #1]
 800b11c:	021b      	lsls	r3, r3, #8
 800b11e:	7810      	ldrb	r0, [r2, #0]
 800b120:	4318      	orrs	r0, r3
	*temp = (((float)rawTemp)/16) + 25;
 800b122:	b200      	sxth	r0, r0
 800b124:	f7f6 f830 	bl	8001188 <__aeabi_i2f>
 800b128:	21f6      	movs	r1, #246	; 0xf6
 800b12a:	0589      	lsls	r1, r1, #22
 800b12c:	f7f5 feda 	bl	8000ee4 <__aeabi_fmul>
 800b130:	4904      	ldr	r1, [pc, #16]	; (800b144 <LSM6DS3SampleTempCelsius+0x44>)
 800b132:	f7f5 fb65 	bl	8000800 <__aeabi_fadd>
 800b136:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	0018      	movs	r0, r3
 800b13c:	b002      	add	sp, #8
 800b13e:	bd10      	pop	{r4, pc}
 800b140:	20006db0 	.word	0x20006db0
 800b144:	41c80000 	.word	0x41c80000

0800b148 <SampleTempCelsius>:

Module_Status SampleTempCelsius(float *temp)
{
 800b148:	b510      	push	{r4, lr}
	return LSM6DS3SampleTempCelsius(temp);
 800b14a:	f7ff ffd9 	bl	800b100 <LSM6DS3SampleTempCelsius>
}
 800b14e:	bd10      	pop	{r4, pc}

0800b150 <SampleTempCToString>:
					}
	return status;
}

Module_Status SampleTempCToString(char *cstring, size_t maxLen)
{
 800b150:	b570      	push	{r4, r5, r6, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	0005      	movs	r5, r0
 800b156:	000e      	movs	r6, r1
	Module_Status status = H0BR4_OK;
	float temp;
	
	if ((status = LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800b158:	a803      	add	r0, sp, #12
 800b15a:	f7ff ffd1 	bl	800b100 <LSM6DS3SampleTempCelsius>
 800b15e:	1e04      	subs	r4, r0, #0
 800b160:	d002      	beq.n	800b168 <SampleTempCToString+0x18>
		return status;
	
	snprintf(cstring, maxLen, "Temp(Celsius) | %0.2f\r\n", temp);
	return status;
}
 800b162:	0020      	movs	r0, r4
 800b164:	b004      	add	sp, #16
 800b166:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Temp(Celsius) | %0.2f\r\n", temp);
 800b168:	9803      	ldr	r0, [sp, #12]
 800b16a:	f7f7 fdf5 	bl	8002d58 <__aeabi_f2d>
 800b16e:	9000      	str	r0, [sp, #0]
 800b170:	9101      	str	r1, [sp, #4]
 800b172:	4a03      	ldr	r2, [pc, #12]	; (800b180 <SampleTempCToString+0x30>)
 800b174:	0031      	movs	r1, r6
 800b176:	0028      	movs	r0, r5
 800b178:	f009 fabc 	bl	80146f4 <snprintf>
	return status;
 800b17c:	e7f1      	b.n	800b162 <SampleTempCToString+0x12>
 800b17e:	46c0      	nop			; (mov r8, r8)
 800b180:	0801b608 	.word	0x0801b608

0800b184 <SampleTempCToPort>:
{
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	0006      	movs	r6, r0
 800b18a:	000d      	movs	r5, r1
	if ((status = LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800b18c:	a803      	add	r0, sp, #12
 800b18e:	f7ff ffb7 	bl	800b100 <LSM6DS3SampleTempCelsius>
 800b192:	1e04      	subs	r4, r0, #0
 800b194:	d113      	bne.n	800b1be <SampleTempCToPort+0x3a>
if (module==myID){
 800b196:	4b14      	ldr	r3, [pc, #80]	; (800b1e8 <SampleTempCToPort+0x64>)
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	42ab      	cmp	r3, r5
 800b19c:	d012      	beq.n	800b1c4 <SampleTempCToPort+0x40>
						messageParams[0]=port;
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <SampleTempCToPort+0x68>)
 800b1a0:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&temp)+3);
 800b1a2:	aa03      	add	r2, sp, #12
 800b1a4:	78d1      	ldrb	r1, [r2, #3]
 800b1a6:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&temp)+2);
 800b1a8:	7891      	ldrb	r1, [r2, #2]
 800b1aa:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&temp)+1);
 800b1ac:	7851      	ldrb	r1, [r2, #1]
 800b1ae:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&temp)+0);
 800b1b0:	7812      	ldrb	r2, [r2, #0]
 800b1b2:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(module, CODE_PORT_FORWARD, sizeof(float)+1);
 800b1b4:	2205      	movs	r2, #5
 800b1b6:	2123      	movs	r1, #35	; 0x23
 800b1b8:	0028      	movs	r0, r5
 800b1ba:	f7fe f8fd 	bl	80093b8 <SendMessageToModule>
}
 800b1be:	0020      	movs	r0, r4
 800b1c0:	b004      	add	sp, #16
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
						tempD[0] = *((__IO uint8_t *)(&temp)+3);
 800b1c4:	ab03      	add	r3, sp, #12
 800b1c6:	78da      	ldrb	r2, [r3, #3]
 800b1c8:	4909      	ldr	r1, [pc, #36]	; (800b1f0 <SampleTempCToPort+0x6c>)
 800b1ca:	700a      	strb	r2, [r1, #0]
						tempD[1] = *((__IO uint8_t *)(&temp)+2);
 800b1cc:	789a      	ldrb	r2, [r3, #2]
 800b1ce:	704a      	strb	r2, [r1, #1]
						tempD[2] = *((__IO uint8_t *)(&temp)+1);
 800b1d0:	785a      	ldrb	r2, [r3, #1]
 800b1d2:	708a      	strb	r2, [r1, #2]
						tempD[3] = *((__IO uint8_t *)(&temp)+0);
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	70cb      	strb	r3, [r1, #3]
						writePxMutex(port, (char *)&tempD[0], 4*sizeof(uint8_t), 10, 10);
 800b1d8:	230a      	movs	r3, #10
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	2204      	movs	r2, #4
 800b1de:	0030      	movs	r0, r6
 800b1e0:	f002 fe90 	bl	800df04 <writePxMutex>
 800b1e4:	e7eb      	b.n	800b1be <SampleTempCToPort+0x3a>
 800b1e6:	46c0      	nop			; (mov r8, r8)
 800b1e8:	200010e4 	.word	0x200010e4
 800b1ec:	20000fb0 	.word	0x20000fb0
 800b1f0:	200017ec 	.word	0x200017ec

0800b1f4 <StreamMemsToPort>:
{
 800b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	0004      	movs	r4, r0
 800b1fa:	9101      	str	r1, [sp, #4]
 800b1fc:	0017      	movs	r7, r2
 800b1fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	if (period < MIN_MEMS_PERIOD_MS)
 800b200:	2ac7      	cmp	r2, #199	; 0xc7
 800b202:	d931      	bls.n	800b268 <StreamMemsToPort+0x74>
	if (port == 0)
 800b204:	2800      	cmp	r0, #0
 800b206:	d032      	beq.n	800b26e <StreamMemsToPort+0x7a>
	if (port == PcPort) // Check if CLI is not enabled at that port!
 800b208:	4a1b      	ldr	r2, [pc, #108]	; (800b278 <StreamMemsToPort+0x84>)
 800b20a:	7812      	ldrb	r2, [r2, #0]
 800b20c:	4282      	cmp	r2, r0
 800b20e:	d030      	beq.n	800b272 <StreamMemsToPort+0x7e>
 800b210:	9703      	str	r7, [sp, #12]
 800b212:	429f      	cmp	r7, r3
 800b214:	d200      	bcs.n	800b218 <StreamMemsToPort+0x24>
 800b216:	9303      	str	r3, [sp, #12]
	long numTimes = timeout / period;
 800b218:	0039      	movs	r1, r7
 800b21a:	9803      	ldr	r0, [sp, #12]
 800b21c:	f7f4 ff98 	bl	8000150 <__udivsi3>
 800b220:	0005      	movs	r5, r0
	stopStream = false;
 800b222:	4b16      	ldr	r3, [pc, #88]	; (800b27c <StreamMemsToPort+0x88>)
 800b224:	2200      	movs	r2, #0
 800b226:	701a      	strb	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(period));
 800b228:	0178      	lsls	r0, r7, #5
 800b22a:	1bc0      	subs	r0, r0, r7
 800b22c:	0080      	lsls	r0, r0, #2
 800b22e:	19c0      	adds	r0, r0, r7
 800b230:	00c0      	lsls	r0, r0, #3
 800b232:	21fa      	movs	r1, #250	; 0xfa
 800b234:	0089      	lsls	r1, r1, #2
 800b236:	f7f4 ff8b 	bl	8000150 <__udivsi3>
 800b23a:	9002      	str	r0, [sp, #8]
		if (stopStream) {
 800b23c:	4f0f      	ldr	r7, [pc, #60]	; (800b27c <StreamMemsToPort+0x88>)
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b23e:	2d00      	cmp	r5, #0
 800b240:	dd0d      	ble.n	800b25e <StreamMemsToPort+0x6a>
		if ((status = function(port, module)) != H0BR4_OK)
 800b242:	9901      	ldr	r1, [sp, #4]
 800b244:	0020      	movs	r0, r4
 800b246:	47b0      	blx	r6
 800b248:	2800      	cmp	r0, #0
 800b24a:	d10e      	bne.n	800b26a <StreamMemsToPort+0x76>
		vTaskDelay(pdMS_TO_TICKS(period));
 800b24c:	9802      	ldr	r0, [sp, #8]
 800b24e:	f004 fbed 	bl	800fa2c <vTaskDelay>
 800b252:	3d01      	subs	r5, #1
		if (stopStream) {
 800b254:	783b      	ldrb	r3, [r7, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0f1      	beq.n	800b23e <StreamMemsToPort+0x4a>
			status = H0BR4_ERR_TERMINATED;
 800b25a:	200a      	movs	r0, #10
 800b25c:	e005      	b.n	800b26a <StreamMemsToPort+0x76>
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b25e:	9b03      	ldr	r3, [sp, #12]
 800b260:	3301      	adds	r3, #1
 800b262:	d0ee      	beq.n	800b242 <StreamMemsToPort+0x4e>
 800b264:	2000      	movs	r0, #0
 800b266:	e000      	b.n	800b26a <StreamMemsToPort+0x76>
		return H0BR4_ERR_WrongParams;
 800b268:	200b      	movs	r0, #11
}
 800b26a:	b005      	add	sp, #20
 800b26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return H0BR4_ERR_WrongParams;
 800b26e:	200b      	movs	r0, #11
 800b270:	e7fb      	b.n	800b26a <StreamMemsToPort+0x76>
		return H0BR4_ERR_BUSY;
 800b272:	2007      	movs	r0, #7
 800b274:	e7f9      	b.n	800b26a <StreamMemsToPort+0x76>
 800b276:	46c0      	nop			; (mov r8, r8)
 800b278:	20000b07 	.word	0x20000b07
 800b27c:	200017c4 	.word	0x200017c4

0800b280 <StreamMemsToCLI>:
{
 800b280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b282:	46de      	mov	lr, fp
 800b284:	4657      	mov	r7, sl
 800b286:	464e      	mov	r6, r9
 800b288:	4645      	mov	r5, r8
 800b28a:	b5e0      	push	{r5, r6, r7, lr}
 800b28c:	b087      	sub	sp, #28
 800b28e:	0004      	movs	r4, r0
 800b290:	4692      	mov	sl, r2
	if (period < MIN_MEMS_PERIOD_MS)
 800b292:	28c7      	cmp	r0, #199	; 0xc7
 800b294:	d800      	bhi.n	800b298 <StreamMemsToCLI+0x18>
 800b296:	e07f      	b.n	800b398 <StreamMemsToCLI+0x118>
 800b298:	9004      	str	r0, [sp, #16]
 800b29a:	4288      	cmp	r0, r1
 800b29c:	d200      	bcs.n	800b2a0 <StreamMemsToCLI+0x20>
 800b29e:	9104      	str	r1, [sp, #16]
	long numTimes = timeout / period;
 800b2a0:	0021      	movs	r1, r4
 800b2a2:	9804      	ldr	r0, [sp, #16]
 800b2a4:	f7f4 ff54 	bl	8000150 <__udivsi3>
 800b2a8:	0007      	movs	r7, r0
	stopStream = false;
 800b2aa:	4b3c      	ldr	r3, [pc, #240]	; (800b39c <StreamMemsToCLI+0x11c>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	701a      	strb	r2, [r3, #0]
	long numDeltaDelay =  period / DELTA_SLEEP_MS;
 800b2b0:	2164      	movs	r1, #100	; 0x64
 800b2b2:	0020      	movs	r0, r4
 800b2b4:	f7f4 ff4c 	bl	8000150 <__udivsi3>
 800b2b8:	9003      	str	r0, [sp, #12]
	unsigned lastDelayMS = period % DELTA_SLEEP_MS;
 800b2ba:	2164      	movs	r1, #100	; 0x64
 800b2bc:	0020      	movs	r0, r4
 800b2be:	f7f4 ffcd 	bl	800025c <__aeabi_uidivmod>
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800b2c2:	0148      	lsls	r0, r1, #5
 800b2c4:	1a40      	subs	r0, r0, r1
 800b2c6:	0080      	lsls	r0, r0, #2
 800b2c8:	1840      	adds	r0, r0, r1
 800b2ca:	00c0      	lsls	r0, r0, #3
 800b2cc:	21fa      	movs	r1, #250	; 0xfa
 800b2ce:	0089      	lsls	r1, r1, #2
 800b2d0:	f7f4 ff3e 	bl	8000150 <__udivsi3>
 800b2d4:	9005      	str	r0, [sp, #20]
	int8_t *pcOutputString = NULL;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	9302      	str	r3, [sp, #8]
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800b2da:	4b31      	ldr	r3, [pc, #196]	; (800b3a0 <StreamMemsToCLI+0x120>)
 800b2dc:	4699      	mov	r9, r3
 800b2de:	4b31      	ldr	r3, [pc, #196]	; (800b3a4 <StreamMemsToCLI+0x124>)
 800b2e0:	4698      	mov	r8, r3
 800b2e2:	469b      	mov	fp, r3
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b2e4:	2f00      	cmp	r7, #0
 800b2e6:	dd52      	ble.n	800b38e <StreamMemsToCLI+0x10e>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800b2e8:	f003 fc26 	bl	800eb38 <FreeRTOS_CLIGetOutputBuffer>
 800b2ec:	0004      	movs	r4, r0
 800b2ee:	9002      	str	r0, [sp, #8]
		if ((status = function((char *)pcOutputString, 100)) != H0BR4_OK)
 800b2f0:	2164      	movs	r1, #100	; 0x64
 800b2f2:	47d0      	blx	sl
 800b2f4:	1e05      	subs	r5, r0, #0
 800b2f6:	d131      	bne.n	800b35c <StreamMemsToCLI+0xdc>
		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800b2f8:	0020      	movs	r0, r4
 800b2fa:	f7f4 ff0d 	bl	8000118 <strlen>
 800b2fe:	23fa      	movs	r3, #250	; 0xfa
 800b300:	b282      	uxth	r2, r0
 800b302:	4927      	ldr	r1, [pc, #156]	; (800b3a0 <StreamMemsToCLI+0x120>)
 800b304:	7808      	ldrb	r0, [r1, #0]
 800b306:	2101      	movs	r1, #1
 800b308:	4249      	negs	r1, r1
 800b30a:	9100      	str	r1, [sp, #0]
 800b30c:	005b      	lsls	r3, r3, #1
 800b30e:	0021      	movs	r1, r4
 800b310:	f002 fdf8 	bl	800df04 <writePxMutex>
 800b314:	9e03      	ldr	r6, [sp, #12]
	while (numDeltaDelay-- > 0) {
 800b316:	2e00      	cmp	r6, #0
 800b318:	dd34      	ble.n	800b384 <StreamMemsToCLI+0x104>
		vTaskDelay(pdMS_TO_TICKS(DELTA_SLEEP_MS));
 800b31a:	2064      	movs	r0, #100	; 0x64
 800b31c:	f004 fb86 	bl	800fa2c <vTaskDelay>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800b320:	464b      	mov	r3, r9
 800b322:	781c      	ldrb	r4, [r3, #0]
 800b324:	3c01      	subs	r4, #1
 800b326:	01a3      	lsls	r3, r4, #6
 800b328:	4642      	mov	r2, r8
 800b32a:	5c9b      	ldrb	r3, [r3, r2]
 800b32c:	2b0d      	cmp	r3, #13
 800b32e:	d00f      	beq.n	800b350 <StreamMemsToCLI+0xd0>
 800b330:	01a1      	lsls	r1, r4, #6
 800b332:	4459      	add	r1, fp
 800b334:	2301      	movs	r3, #1
 800b336:	0018      	movs	r0, r3
 800b338:	5cca      	ldrb	r2, [r1, r3]
 800b33a:	2a0d      	cmp	r2, #13
 800b33c:	d009      	beq.n	800b352 <StreamMemsToCLI+0xd2>
 800b33e:	3301      	adds	r3, #1
		for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800b340:	2b40      	cmp	r3, #64	; 0x40
 800b342:	d1f8      	bne.n	800b336 <StreamMemsToCLI+0xb6>
 800b344:	3e01      	subs	r6, #1
		if (stopStream)
 800b346:	4b15      	ldr	r3, [pc, #84]	; (800b39c <StreamMemsToCLI+0x11c>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0e3      	beq.n	800b316 <StreamMemsToCLI+0x96>
 800b34e:	e005      	b.n	800b35c <StreamMemsToCLI+0xdc>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800b350:	2000      	movs	r0, #0
				UARTRxBuf[PcPort-1][chr] = 0;
 800b352:	01a3      	lsls	r3, r4, #6
 800b354:	4a13      	ldr	r2, [pc, #76]	; (800b3a4 <StreamMemsToCLI+0x124>)
 800b356:	18d3      	adds	r3, r2, r3
 800b358:	2200      	movs	r2, #0
 800b35a:	541a      	strb	r2, [r3, r0]
	memset((char *) pcOutputString, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800b35c:	2299      	movs	r2, #153	; 0x99
 800b35e:	0092      	lsls	r2, r2, #2
 800b360:	2100      	movs	r1, #0
 800b362:	9c02      	ldr	r4, [sp, #8]
 800b364:	0020      	movs	r0, r4
 800b366:	f008 ffcb 	bl	8014300 <memset>
  sprintf((char *)pcOutputString, "\r\n");
 800b36a:	2203      	movs	r2, #3
 800b36c:	490e      	ldr	r1, [pc, #56]	; (800b3a8 <StreamMemsToCLI+0x128>)
 800b36e:	0020      	movs	r0, r4
 800b370:	f008 ffbd 	bl	80142ee <memcpy>
}
 800b374:	0028      	movs	r0, r5
 800b376:	b007      	add	sp, #28
 800b378:	bc3c      	pop	{r2, r3, r4, r5}
 800b37a:	4690      	mov	r8, r2
 800b37c:	4699      	mov	r9, r3
 800b37e:	46a2      	mov	sl, r4
 800b380:	46ab      	mov	fp, r5
 800b382:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b384:	3f01      	subs	r7, #1
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800b386:	9805      	ldr	r0, [sp, #20]
 800b388:	f004 fb50 	bl	800fa2c <vTaskDelay>
 800b38c:	e7aa      	b.n	800b2e4 <StreamMemsToCLI+0x64>
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b38e:	9b04      	ldr	r3, [sp, #16]
 800b390:	3301      	adds	r3, #1
 800b392:	d0a9      	beq.n	800b2e8 <StreamMemsToCLI+0x68>
 800b394:	2500      	movs	r5, #0
 800b396:	e7e1      	b.n	800b35c <StreamMemsToCLI+0xdc>
		return H0BR4_ERR_WrongParams;
 800b398:	250b      	movs	r5, #11
 800b39a:	e7eb      	b.n	800b374 <StreamMemsToCLI+0xf4>
 800b39c:	200017c4 	.word	0x200017c4
 800b3a0:	20000b07 	.word	0x20000b07
 800b3a4:	2000133c 	.word	0x2000133c
 800b3a8:	0801a854 	.word	0x0801a854

0800b3ac <StopStreamCommand>:
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
	return pdFALSE;
}

static portBASE_TYPE StopStreamCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 800b3ac:	b510      	push	{r4, lr}
	// Make sure we return something
	pcWriteBuffer[0] = '\0';
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	7003      	strb	r3, [r0, #0]
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Stopping Streaming MEMS...\r\n");
 800b3b2:	4a04      	ldr	r2, [pc, #16]	; (800b3c4 <StopStreamCommand+0x18>)
 800b3b4:	f009 f99e 	bl	80146f4 <snprintf>
	stopStream = true;
 800b3b8:	4b03      	ldr	r3, [pc, #12]	; (800b3c8 <StopStreamCommand+0x1c>)
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	701a      	strb	r2, [r3, #0]
	
	stopStreamMems();
	return pdFALSE;
}
 800b3be:	2000      	movs	r0, #0
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	46c0      	nop			; (mov r8, r8)
 800b3c4:	0801b630 	.word	0x0801b630
 800b3c8:	200017c4 	.word	0x200017c4

0800b3cc <SystemClock_Config>:
{
 800b3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ce:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b3d0:	2401      	movs	r4, #1
 800b3d2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b3d4:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b3d6:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b3d8:	2310      	movs	r3, #16
 800b3da:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b3dc:	2702      	movs	r7, #2
 800b3de:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b3e0:	2680      	movs	r6, #128	; 0x80
 800b3e2:	0276      	lsls	r6, r6, #9
 800b3e4:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b3e6:	2380      	movs	r3, #128	; 0x80
 800b3e8:	035b      	lsls	r3, r3, #13
 800b3ea:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b3ec:	2500      	movs	r5, #0
 800b3ee:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b3f0:	a80d      	add	r0, sp, #52	; 0x34
 800b3f2:	f006 ff65 	bl	80122c0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b3f6:	2307      	movs	r3, #7
 800b3f8:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b3fa:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b3fc:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b3fe:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b400:	2101      	movs	r1, #1
 800b402:	a809      	add	r0, sp, #36	; 0x24
 800b404:	f007 fa1e 	bl	8012844 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b408:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <SystemClock_Config+0xa8>)
 800b40a:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b40c:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b40e:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b410:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b412:	a802      	add	r0, sp, #8
 800b414:	f007 fbc4 	bl	8012ba0 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b418:	4d17      	ldr	r5, [pc, #92]	; (800b478 <SystemClock_Config+0xac>)
 800b41a:	69ea      	ldr	r2, [r5, #28]
 800b41c:	2180      	movs	r1, #128	; 0x80
 800b41e:	0549      	lsls	r1, r1, #21
 800b420:	430a      	orrs	r2, r1
 800b422:	61ea      	str	r2, [r5, #28]
 800b424:	69eb      	ldr	r3, [r5, #28]
 800b426:	400b      	ands	r3, r1
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b42c:	f006 ff3e 	bl	80122ac <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b430:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b432:	23c0      	movs	r3, #192	; 0xc0
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b438:	a802      	add	r0, sp, #8
 800b43a:	f007 fbb1 	bl	8012ba0 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b43e:	f007 fb8b 	bl	8012b58 <HAL_RCC_GetHCLKFreq>
 800b442:	21fa      	movs	r1, #250	; 0xfa
 800b444:	0089      	lsls	r1, r1, #2
 800b446:	f7f4 fe83 	bl	8000150 <__udivsi3>
 800b44a:	f005 faef 	bl	8010a2c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b44e:	2004      	movs	r0, #4
 800b450:	f005 fb08 	bl	8010a64 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800b454:	69ab      	ldr	r3, [r5, #24]
 800b456:	4323      	orrs	r3, r4
 800b458:	61ab      	str	r3, [r5, #24]
 800b45a:	69ab      	ldr	r3, [r5, #24]
 800b45c:	401c      	ands	r4, r3
 800b45e:	9401      	str	r4, [sp, #4]
 800b460:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b462:	2001      	movs	r0, #1
 800b464:	2200      	movs	r2, #0
 800b466:	2100      	movs	r1, #0
 800b468:	4240      	negs	r0, r0
 800b46a:	f005 fa97 	bl	801099c <HAL_NVIC_SetPriority>
}
 800b46e:	b01b      	add	sp, #108	; 0x6c
 800b470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b472:	46c0      	nop			; (mov r8, r8)
 800b474:	00040003 	.word	0x00040003
 800b478:	40021000 	.word	0x40021000

0800b47c <Module_Init>:
{
 800b47c:	b500      	push	{lr}
 800b47e:	b083      	sub	sp, #12
  MX_USART1_UART_Init();
 800b480:	f002 fb56 	bl	800db30 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b484:	f002 fb6c 	bl	800db60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b488:	f002 fb82 	bl	800db90 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800b48c:	f002 fb98 	bl	800dbc0 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800b490:	f002 fbae 	bl	800dbf0 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b494:	f002 fbc4 	bl	800dc20 <MX_USART6_UART_Init>
	MX_I2C_Init();
 800b498:	f002 f800 	bl	800d49c <MX_I2C_Init>
	uint8_t who_am_i = 0;
 800b49c:	466b      	mov	r3, sp
 800b49e:	1dd9      	adds	r1, r3, #7
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	700b      	strb	r3, [r1, #0]
	if (LSM6DS3_ACC_GYRO_R_WHO_AM_I(&hi2c2, &who_am_i) != MEMS_SUCCESS)
 800b4a4:	4845      	ldr	r0, [pc, #276]	; (800b5bc <Module_Init+0x140>)
 800b4a6:	f002 fefd 	bl	800e2a4 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 800b4aa:	2801      	cmp	r0, #1
 800b4ac:	d104      	bne.n	800b4b8 <Module_Init+0x3c>
	if (who_am_i != LSM6DS3_ACC_GYRO_WHO_AM_I)
 800b4ae:	466b      	mov	r3, sp
 800b4b0:	3307      	adds	r3, #7
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	2b69      	cmp	r3, #105	; 0x69
 800b4b6:	d00f      	beq.n	800b4d8 <Module_Init+0x5c>
	uint8_t who_am_i = 0x00;
 800b4b8:	466b      	mov	r3, sp
 800b4ba:	1dd9      	adds	r1, r3, #7
 800b4bc:	2300      	movs	r3, #0
 800b4be:	700b      	strb	r3, [r1, #0]
  if (LSM303AGR_MAG_R_WHO_AM_I(&hi2c2, &who_am_i ) != MEMS_SUCCESS)
 800b4c0:	483e      	ldr	r0, [pc, #248]	; (800b5bc <Module_Init+0x140>)
 800b4c2:	f002 fe55 	bl	800e170 <LSM303AGR_MAG_R_WHO_AM_I>
 800b4c6:	2801      	cmp	r0, #1
 800b4c8:	d104      	bne.n	800b4d4 <Module_Init+0x58>
  if (who_am_i != LSM303AGR_MAG_WHO_AM_I)
 800b4ca:	466b      	mov	r3, sp
 800b4cc:	3307      	adds	r3, #7
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b40      	cmp	r3, #64	; 0x40
 800b4d2:	d054      	beq.n	800b57e <Module_Init+0x102>
}
 800b4d4:	b003      	add	sp, #12
 800b4d6:	bd00      	pop	{pc}
	if (LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(&hi2c2, LSM6DS3_ACC_GYRO_IF_INC_ENABLED) != MEMS_SUCCESS)
 800b4d8:	2104      	movs	r1, #4
 800b4da:	4838      	ldr	r0, [pc, #224]	; (800b5bc <Module_Init+0x140>)
 800b4dc:	f003 f805 	bl	800e4ea <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>
 800b4e0:	2801      	cmp	r0, #1
 800b4e2:	d1e9      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_FIFO_MODE(&hi2c2, LSM6DS3_ACC_GYRO_FIFO_MODE_BYPASS) != MEMS_SUCCESS)
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	4835      	ldr	r0, [pc, #212]	; (800b5bc <Module_Init+0x140>)
 800b4e8:	f002 ffe1 	bl	800e4ae <LSM6DS3_ACC_GYRO_W_FIFO_MODE>
 800b4ec:	2801      	cmp	r0, #1
 800b4ee:	d1e3      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ODR_G(&hi2c2, LSM6DS3_ACC_GYRO_ODR_G_13Hz) != MEMS_SUCCESS)
 800b4f0:	2110      	movs	r1, #16
 800b4f2:	4832      	ldr	r0, [pc, #200]	; (800b5bc <Module_Init+0x140>)
 800b4f4:	f002 ff74 	bl	800e3e0 <LSM6DS3_ACC_GYRO_W_ODR_G>
 800b4f8:	2801      	cmp	r0, #1
 800b4fa:	d1dd      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_FS_G(&hi2c2, LSM6DS3_ACC_GYRO_FS_G_2000dps) != MEMS_SUCCESS)
 800b4fc:	210c      	movs	r1, #12
 800b4fe:	482f      	ldr	r0, [pc, #188]	; (800b5bc <Module_Init+0x140>)
 800b500:	f002 ff41 	bl	800e386 <LSM6DS3_ACC_GYRO_W_FS_G>
 800b504:	2801      	cmp	r0, #1
 800b506:	d1d7      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_XEN_G(&hi2c2, LSM6DS3_ACC_GYRO_XEN_G_ENABLED) != MEMS_SUCCESS)
 800b508:	2108      	movs	r1, #8
 800b50a:	482c      	ldr	r0, [pc, #176]	; (800b5bc <Module_Init+0x140>)
 800b50c:	f003 f883 	bl	800e616 <LSM6DS3_ACC_GYRO_W_XEN_G>
 800b510:	2801      	cmp	r0, #1
 800b512:	d1d1      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_YEN_G(&hi2c2, LSM6DS3_ACC_GYRO_YEN_G_ENABLED) != MEMS_SUCCESS)
 800b514:	2110      	movs	r1, #16
 800b516:	4829      	ldr	r0, [pc, #164]	; (800b5bc <Module_Init+0x140>)
 800b518:	f003 f89b 	bl	800e652 <LSM6DS3_ACC_GYRO_W_YEN_G>
 800b51c:	2801      	cmp	r0, #1
 800b51e:	d1cb      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ZEN_G(&hi2c2, LSM6DS3_ACC_GYRO_ZEN_G_ENABLED) != MEMS_SUCCESS)
 800b520:	2120      	movs	r1, #32
 800b522:	4826      	ldr	r0, [pc, #152]	; (800b5bc <Module_Init+0x140>)
 800b524:	f003 f8b3 	bl	800e68e <LSM6DS3_ACC_GYRO_W_ZEN_G>
 800b528:	2801      	cmp	r0, #1
 800b52a:	d1c5      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ODR_XL(&hi2c2, LSM6DS3_ACC_GYRO_ODR_XL_104Hz) != MEMS_SUCCESS)
 800b52c:	2140      	movs	r1, #64	; 0x40
 800b52e:	4823      	ldr	r0, [pc, #140]	; (800b5bc <Module_Init+0x140>)
 800b530:	f002 ff0b 	bl	800e34a <LSM6DS3_ACC_GYRO_W_ODR_XL>
 800b534:	2801      	cmp	r0, #1
 800b536:	d1bf      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_BW_XL(&hi2c2, LSM6DS3_ACC_GYRO_BW_XL_50Hz) != MEMS_SUCCESS)
 800b538:	2103      	movs	r1, #3
 800b53a:	4820      	ldr	r0, [pc, #128]	; (800b5bc <Module_Init+0x140>)
 800b53c:	f002 ff8a 	bl	800e454 <LSM6DS3_ACC_GYRO_W_BW_XL>
 800b540:	2801      	cmp	r0, #1
 800b542:	d1b9      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_FS_XL(&hi2c2, LSM6DS3_ACC_GYRO_FS_XL_16g) != MEMS_SUCCESS)
 800b544:	2104      	movs	r1, #4
 800b546:	481d      	ldr	r0, [pc, #116]	; (800b5bc <Module_Init+0x140>)
 800b548:	f002 feb6 	bl	800e2b8 <LSM6DS3_ACC_GYRO_W_FS_XL>
 800b54c:	2801      	cmp	r0, #1
 800b54e:	d1b3      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_XEN_XL(&hi2c2, LSM6DS3_ACC_GYRO_XEN_XL_ENABLED) != MEMS_SUCCESS)
 800b550:	2108      	movs	r1, #8
 800b552:	481a      	ldr	r0, [pc, #104]	; (800b5bc <Module_Init+0x140>)
 800b554:	f003 f805 	bl	800e562 <LSM6DS3_ACC_GYRO_W_XEN_XL>
 800b558:	2801      	cmp	r0, #1
 800b55a:	d1ad      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_YEN_XL(&hi2c2, LSM6DS3_ACC_GYRO_YEN_XL_ENABLED) != MEMS_SUCCESS)
 800b55c:	2110      	movs	r1, #16
 800b55e:	4817      	ldr	r0, [pc, #92]	; (800b5bc <Module_Init+0x140>)
 800b560:	f003 f81d 	bl	800e59e <LSM6DS3_ACC_GYRO_W_YEN_XL>
 800b564:	2801      	cmp	r0, #1
 800b566:	d1a7      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ZEN_XL(&hi2c2, LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED) != MEMS_SUCCESS)
 800b568:	2120      	movs	r1, #32
 800b56a:	4814      	ldr	r0, [pc, #80]	; (800b5bc <Module_Init+0x140>)
 800b56c:	f003 f835 	bl	800e5da <LSM6DS3_ACC_GYRO_W_ZEN_XL>
 800b570:	2801      	cmp	r0, #1
 800b572:	d1a1      	bne.n	800b4b8 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR(&hi2c2, LSM6DS3_ACC_GYRO_BW_SCAL_ODR_ENABLED) != MEMS_ERROR)
 800b574:	2180      	movs	r1, #128	; 0x80
 800b576:	4811      	ldr	r0, [pc, #68]	; (800b5bc <Module_Init+0x140>)
 800b578:	f002 ffd5 	bl	800e526 <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR>
 800b57c:	e79c      	b.n	800b4b8 <Module_Init+0x3c>
	if (LSM303AGR_MAG_W_MD(&hi2c2, LSM303AGR_MAG_MD_IDLE1_MODE) != MEMS_SUCCESS)
 800b57e:	2102      	movs	r1, #2
 800b580:	480e      	ldr	r0, [pc, #56]	; (800b5bc <Module_Init+0x140>)
 800b582:	f002 fe1d 	bl	800e1c0 <LSM303AGR_MAG_W_MD>
 800b586:	2801      	cmp	r0, #1
 800b588:	d1a4      	bne.n	800b4d4 <Module_Init+0x58>
  if (LSM303AGR_MAG_W_BDU(&hi2c2, LSM303AGR_MAG_BDU_ENABLED ) != MEMS_SUCCESS)
 800b58a:	2110      	movs	r1, #16
 800b58c:	480b      	ldr	r0, [pc, #44]	; (800b5bc <Module_Init+0x140>)
 800b58e:	f002 fdf9 	bl	800e184 <LSM303AGR_MAG_W_BDU>
 800b592:	2801      	cmp	r0, #1
 800b594:	d19e      	bne.n	800b4d4 <Module_Init+0x58>
	if (LSM303AGR_MAG_W_ODR(&hi2c2, LSM303AGR_MAG_ODR_10Hz) != MEMS_SUCCESS)
 800b596:	2100      	movs	r1, #0
 800b598:	4808      	ldr	r0, [pc, #32]	; (800b5bc <Module_Init+0x140>)
 800b59a:	f002 fe39 	bl	800e210 <LSM303AGR_MAG_W_ODR>
 800b59e:	2801      	cmp	r0, #1
 800b5a0:	d198      	bne.n	800b4d4 <Module_Init+0x58>
	if (LSM303AGR_MAG_W_ST(&hi2c2, LSM303AGR_MAG_ST_DISABLED) != MEMS_SUCCESS)
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	4805      	ldr	r0, [pc, #20]	; (800b5bc <Module_Init+0x140>)
 800b5a6:	f002 fe51 	bl	800e24c <LSM303AGR_MAG_W_ST>
 800b5aa:	2801      	cmp	r0, #1
 800b5ac:	d000      	beq.n	800b5b0 <Module_Init+0x134>
 800b5ae:	e791      	b.n	800b4d4 <Module_Init+0x58>
	if (LSM303AGR_MAG_W_MD(&hi2c2, LSM303AGR_MAG_MD_CONTINUOS_MODE) != MEMS_SUCCESS)
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	4802      	ldr	r0, [pc, #8]	; (800b5bc <Module_Init+0x140>)
 800b5b4:	f002 fe04 	bl	800e1c0 <LSM303AGR_MAG_W_MD>
}
 800b5b8:	e78c      	b.n	800b4d4 <Module_Init+0x58>
 800b5ba:	46c0      	nop			; (mov r8, r8)
 800b5bc:	20006db0 	.word	0x20006db0

0800b5c0 <RegisterModuleCLICommands>:
{
 800b5c0:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&SampleCommandDefinition);
 800b5c2:	4805      	ldr	r0, [pc, #20]	; (800b5d8 <RegisterModuleCLICommands+0x18>)
 800b5c4:	f003 fa1e 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&StreamCommandDefinition);
 800b5c8:	4804      	ldr	r0, [pc, #16]	; (800b5dc <RegisterModuleCLICommands+0x1c>)
 800b5ca:	f003 fa1b 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&StopCommandDefinition);
 800b5ce:	4804      	ldr	r0, [pc, #16]	; (800b5e0 <RegisterModuleCLICommands+0x20>)
 800b5d0:	f003 fa18 	bl	800ea04 <FreeRTOS_CLIRegisterCommand>
}
 800b5d4:	bd10      	pop	{r4, pc}
 800b5d6:	46c0      	nop			; (mov r8, r8)
 800b5d8:	0801b568 	.word	0x0801b568
 800b5dc:	0801b650 	.word	0x0801b650
 800b5e0:	0801b620 	.word	0x0801b620

0800b5e4 <GetPort>:
	if (huart->Instance == USART4)
 800b5e4:	6800      	ldr	r0, [r0, #0]
 800b5e6:	4b11      	ldr	r3, [pc, #68]	; (800b62c <GetPort+0x48>)
 800b5e8:	4298      	cmp	r0, r3
 800b5ea:	d014      	beq.n	800b616 <GetPort+0x32>
	else if (huart->Instance == USART2)
 800b5ec:	4b10      	ldr	r3, [pc, #64]	; (800b630 <GetPort+0x4c>)
 800b5ee:	4298      	cmp	r0, r3
 800b5f0:	d013      	beq.n	800b61a <GetPort+0x36>
	else if (huart->Instance == USART6)
 800b5f2:	4b10      	ldr	r3, [pc, #64]	; (800b634 <GetPort+0x50>)
 800b5f4:	4298      	cmp	r0, r3
 800b5f6:	d012      	beq.n	800b61e <GetPort+0x3a>
	else if (huart->Instance == USART3)
 800b5f8:	4b0f      	ldr	r3, [pc, #60]	; (800b638 <GetPort+0x54>)
 800b5fa:	4298      	cmp	r0, r3
 800b5fc:	d011      	beq.n	800b622 <GetPort+0x3e>
	else if (huart->Instance == USART1)
 800b5fe:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <GetPort+0x58>)
 800b600:	4298      	cmp	r0, r3
 800b602:	d010      	beq.n	800b626 <GetPort+0x42>
	return 0;
 800b604:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <GetPort+0x5c>)
 800b606:	469c      	mov	ip, r3
 800b608:	4460      	add	r0, ip
 800b60a:	4243      	negs	r3, r0
 800b60c:	4158      	adcs	r0, r3
 800b60e:	4240      	negs	r0, r0
 800b610:	2306      	movs	r3, #6
 800b612:	4018      	ands	r0, r3
}
 800b614:	4770      	bx	lr
		return P1;
 800b616:	2001      	movs	r0, #1
 800b618:	e7fc      	b.n	800b614 <GetPort+0x30>
		return P2;
 800b61a:	2002      	movs	r0, #2
 800b61c:	e7fa      	b.n	800b614 <GetPort+0x30>
		return P3;
 800b61e:	2003      	movs	r0, #3
 800b620:	e7f8      	b.n	800b614 <GetPort+0x30>
		return P4;
 800b622:	2004      	movs	r0, #4
 800b624:	e7f6      	b.n	800b614 <GetPort+0x30>
		return P5;
 800b626:	2005      	movs	r0, #5
 800b628:	e7f4      	b.n	800b614 <GetPort+0x30>
 800b62a:	46c0      	nop			; (mov r8, r8)
 800b62c:	40004c00 	.word	0x40004c00
 800b630:	40004400 	.word	0x40004400
 800b634:	40011400 	.word	0x40011400
 800b638:	40004800 	.word	0x40004800
 800b63c:	40013800 	.word	0x40013800
 800b640:	bfffb000 	.word	0xbfffb000

0800b644 <SampleGyroDPS>:
{
 800b644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b646:	46c6      	mov	lr, r8
 800b648:	b500      	push	{lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	0006      	movs	r6, r0
 800b64e:	000d      	movs	r5, r1
 800b650:	0014      	movs	r4, r2
	if (LSM6DS3_ACC_Get_AngularRate(&hi2c2, buff, 0) != MEMS_SUCCESS)
 800b652:	2200      	movs	r2, #0
 800b654:	a901      	add	r1, sp, #4
 800b656:	4812      	ldr	r0, [pc, #72]	; (800b6a0 <SampleGyroDPS+0x5c>)
 800b658:	f003 f8c2 	bl	800e7e0 <LSM6DS3_ACC_Get_AngularRate>
		return H0BR4_ERR_LSM6DS3;
 800b65c:	2305      	movs	r3, #5
	if (LSM6DS3_ACC_Get_AngularRate(&hi2c2, buff, 0) != MEMS_SUCCESS)
 800b65e:	2801      	cmp	r0, #1
 800b660:	d118      	bne.n	800b694 <SampleGyroDPS+0x50>
	*gyroY = buff[1];
 800b662:	9b02      	ldr	r3, [sp, #8]
 800b664:	4698      	mov	r8, r3
	*gyroZ = buff[2];
 800b666:	9f03      	ldr	r7, [sp, #12]
	*x = ((float)xInMDPS) / 1000;
 800b668:	9801      	ldr	r0, [sp, #4]
 800b66a:	f7f5 fd8d 	bl	8001188 <__aeabi_i2f>
 800b66e:	490d      	ldr	r1, [pc, #52]	; (800b6a4 <SampleGyroDPS+0x60>)
 800b670:	f7f5 fa60 	bl	8000b34 <__aeabi_fdiv>
 800b674:	6030      	str	r0, [r6, #0]
	*y = ((float)yInMDPS) / 1000;
 800b676:	4640      	mov	r0, r8
 800b678:	f7f5 fd86 	bl	8001188 <__aeabi_i2f>
 800b67c:	4909      	ldr	r1, [pc, #36]	; (800b6a4 <SampleGyroDPS+0x60>)
 800b67e:	f7f5 fa59 	bl	8000b34 <__aeabi_fdiv>
 800b682:	6028      	str	r0, [r5, #0]
	*z = ((float)zInMDPS) / 1000;
 800b684:	0038      	movs	r0, r7
 800b686:	f7f5 fd7f 	bl	8001188 <__aeabi_i2f>
 800b68a:	4906      	ldr	r1, [pc, #24]	; (800b6a4 <SampleGyroDPS+0x60>)
 800b68c:	f7f5 fa52 	bl	8000b34 <__aeabi_fdiv>
 800b690:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	0018      	movs	r0, r3
 800b696:	b004      	add	sp, #16
 800b698:	bc04      	pop	{r2}
 800b69a:	4690      	mov	r8, r2
 800b69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b69e:	46c0      	nop			; (mov r8, r8)
 800b6a0:	20006db0 	.word	0x20006db0
 800b6a4:	447a0000 	.word	0x447a0000

0800b6a8 <SampleGyroDPSToString>:
{
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	b08a      	sub	sp, #40	; 0x28
 800b6ac:	0005      	movs	r5, r0
 800b6ae:	000e      	movs	r6, r1
	float x = 0, y = 0, z = 0;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b4:	9308      	str	r3, [sp, #32]
 800b6b6:	9307      	str	r3, [sp, #28]
	if ((status = SampleGyroDPS(&x, &y, &z)) != H0BR4_OK)
 800b6b8:	aa07      	add	r2, sp, #28
 800b6ba:	a908      	add	r1, sp, #32
 800b6bc:	a809      	add	r0, sp, #36	; 0x24
 800b6be:	f7ff ffc1 	bl	800b644 <SampleGyroDPS>
 800b6c2:	1e04      	subs	r4, r0, #0
 800b6c4:	d002      	beq.n	800b6cc <SampleGyroDPSToString+0x24>
}
 800b6c6:	0020      	movs	r0, r4
 800b6c8:	b00a      	add	sp, #40	; 0x28
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Gyro(DPS) | X: %.2f, Y: %.2f, Z: %.2f\r\n", x, y, z);
 800b6cc:	9807      	ldr	r0, [sp, #28]
 800b6ce:	f7f7 fb43 	bl	8002d58 <__aeabi_f2d>
 800b6d2:	9004      	str	r0, [sp, #16]
 800b6d4:	9105      	str	r1, [sp, #20]
 800b6d6:	9808      	ldr	r0, [sp, #32]
 800b6d8:	f7f7 fb3e 	bl	8002d58 <__aeabi_f2d>
 800b6dc:	9002      	str	r0, [sp, #8]
 800b6de:	9103      	str	r1, [sp, #12]
 800b6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6e2:	f7f7 fb39 	bl	8002d58 <__aeabi_f2d>
 800b6e6:	9000      	str	r0, [sp, #0]
 800b6e8:	9101      	str	r1, [sp, #4]
 800b6ea:	4a03      	ldr	r2, [pc, #12]	; (800b6f8 <SampleGyroDPSToString+0x50>)
 800b6ec:	0031      	movs	r1, r6
 800b6ee:	0028      	movs	r0, r5
 800b6f0:	f009 f800 	bl	80146f4 <snprintf>
	return status;
 800b6f4:	e7e7      	b.n	800b6c6 <SampleGyroDPSToString+0x1e>
 800b6f6:	46c0      	nop			; (mov r8, r8)
 800b6f8:	0801b578 	.word	0x0801b578

0800b6fc <SampleGyroDPSToBuf>:
{
 800b6fc:	b510      	push	{r4, lr}
	return SampleGyroDPS(buffer, buffer + 1, buffer + 2);
 800b6fe:	0002      	movs	r2, r0
 800b700:	3208      	adds	r2, #8
 800b702:	1d01      	adds	r1, r0, #4
 800b704:	f7ff ff9e 	bl	800b644 <SampleGyroDPS>
}
 800b708:	bd10      	pop	{r4, pc}
	...

0800b70c <SampleGyroDPSToPort>:
{
 800b70c:	b570      	push	{r4, r5, r6, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	0006      	movs	r6, r0
 800b712:	000d      	movs	r5, r1
	if ((status = SampleGyroDPSToBuf(buffer)) != H0BR4_OK)
 800b714:	a801      	add	r0, sp, #4
 800b716:	f7ff fff1 	bl	800b6fc <SampleGyroDPSToBuf>
 800b71a:	1e04      	subs	r4, r0, #0
 800b71c:	d123      	bne.n	800b766 <SampleGyroDPSToPort+0x5a>
	if (module==myID){
 800b71e:	4b23      	ldr	r3, [pc, #140]	; (800b7ac <SampleGyroDPSToPort+0xa0>)
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	42ab      	cmp	r3, r5
 800b724:	d022      	beq.n	800b76c <SampleGyroDPSToPort+0x60>
						messageParams[0]=port;
 800b726:	4b22      	ldr	r3, [pc, #136]	; (800b7b0 <SampleGyroDPSToPort+0xa4>)
 800b728:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&buffer[0])+3);  messageParams[2] = *((__IO uint8_t *)(&buffer[0])+2);
 800b72a:	aa01      	add	r2, sp, #4
 800b72c:	78d1      	ldrb	r1, [r2, #3]
 800b72e:	7059      	strb	r1, [r3, #1]
 800b730:	7891      	ldrb	r1, [r2, #2]
 800b732:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&buffer[0])+1);  messageParams[4] = *((__IO uint8_t *)(&buffer[0])+0);
 800b734:	7851      	ldrb	r1, [r2, #1]
 800b736:	70d9      	strb	r1, [r3, #3]
 800b738:	7811      	ldrb	r1, [r2, #0]
 800b73a:	7119      	strb	r1, [r3, #4]
					  messageParams[5] = *((__IO uint8_t *)(&buffer[1])+3);  messageParams[6] = *((__IO uint8_t *)(&buffer[1])+2);
 800b73c:	79d1      	ldrb	r1, [r2, #7]
 800b73e:	7159      	strb	r1, [r3, #5]
 800b740:	7991      	ldrb	r1, [r2, #6]
 800b742:	7199      	strb	r1, [r3, #6]
						messageParams[7] = *((__IO uint8_t *)(&buffer[1])+1);  messageParams[8] = *((__IO uint8_t *)(&buffer[1])+0);
 800b744:	7951      	ldrb	r1, [r2, #5]
 800b746:	71d9      	strb	r1, [r3, #7]
 800b748:	7911      	ldrb	r1, [r2, #4]
 800b74a:	7219      	strb	r1, [r3, #8]
					  messageParams[9] = *((__IO uint8_t *)(&buffer[2])+3);  messageParams[10] = *((__IO uint8_t *)(&buffer[2])+2);
 800b74c:	7ad1      	ldrb	r1, [r2, #11]
 800b74e:	7259      	strb	r1, [r3, #9]
 800b750:	7a91      	ldrb	r1, [r2, #10]
 800b752:	7299      	strb	r1, [r3, #10]
						messageParams[11] = *((__IO uint8_t *)(&buffer[2])+1); messageParams[12] = *((__IO uint8_t *)(&buffer[2])+0);
 800b754:	7a51      	ldrb	r1, [r2, #9]
 800b756:	72d9      	strb	r1, [r3, #11]
 800b758:	7a12      	ldrb	r2, [r2, #8]
 800b75a:	731a      	strb	r2, [r3, #12]
						SendMessageToModule(module, CODE_PORT_FORWARD, (sizeof(float)*3)+1);
 800b75c:	220d      	movs	r2, #13
 800b75e:	2123      	movs	r1, #35	; 0x23
 800b760:	0028      	movs	r0, r5
 800b762:	f7fd fe29 	bl	80093b8 <SendMessageToModule>
}
 800b766:	0020      	movs	r0, r4
 800b768:	b004      	add	sp, #16
 800b76a:	bd70      	pop	{r4, r5, r6, pc}
						temp[0] = *((__IO uint8_t *)(&buffer[0])+3);  temp[1] = *((__IO uint8_t *)(&buffer[0])+2);
 800b76c:	ab01      	add	r3, sp, #4
 800b76e:	78da      	ldrb	r2, [r3, #3]
 800b770:	4910      	ldr	r1, [pc, #64]	; (800b7b4 <SampleGyroDPSToPort+0xa8>)
 800b772:	700a      	strb	r2, [r1, #0]
 800b774:	789a      	ldrb	r2, [r3, #2]
 800b776:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&buffer[0])+1);  temp[3] = *((__IO uint8_t *)(&buffer[0])+0);
 800b778:	785a      	ldrb	r2, [r3, #1]
 800b77a:	708a      	strb	r2, [r1, #2]
 800b77c:	781a      	ldrb	r2, [r3, #0]
 800b77e:	70ca      	strb	r2, [r1, #3]
		        temp[4] = *((__IO uint8_t *)(&buffer[1])+3);  temp[5] = *((__IO uint8_t *)(&buffer[1])+2);
 800b780:	79da      	ldrb	r2, [r3, #7]
 800b782:	710a      	strb	r2, [r1, #4]
 800b784:	799a      	ldrb	r2, [r3, #6]
 800b786:	714a      	strb	r2, [r1, #5]
						temp[6] = *((__IO uint8_t *)(&buffer[1])+1);  temp[7] = *((__IO uint8_t *)(&buffer[1])+0);
 800b788:	795a      	ldrb	r2, [r3, #5]
 800b78a:	718a      	strb	r2, [r1, #6]
 800b78c:	791a      	ldrb	r2, [r3, #4]
 800b78e:	71ca      	strb	r2, [r1, #7]
		        temp[8] = *((__IO uint8_t *)(&buffer[2])+3);  temp[9] = *((__IO uint8_t *)(&buffer[2])+2);
 800b790:	7ada      	ldrb	r2, [r3, #11]
 800b792:	720a      	strb	r2, [r1, #8]
 800b794:	7a9a      	ldrb	r2, [r3, #10]
 800b796:	724a      	strb	r2, [r1, #9]
						temp[10] = *((__IO uint8_t *)(&buffer[2])+1); temp[11] = *((__IO uint8_t *)(&buffer[2])+0);
 800b798:	7a5a      	ldrb	r2, [r3, #9]
 800b79a:	728a      	strb	r2, [r1, #10]
 800b79c:	7a1b      	ldrb	r3, [r3, #8]
 800b79e:	72cb      	strb	r3, [r1, #11]
						writePxITMutex(port, (char *)&temp[0],12*sizeof(uint8_t), 10);
 800b7a0:	230a      	movs	r3, #10
 800b7a2:	220c      	movs	r2, #12
 800b7a4:	0030      	movs	r0, r6
 800b7a6:	f002 fbd5 	bl	800df54 <writePxITMutex>
 800b7aa:	e7dc      	b.n	800b766 <SampleGyroDPSToPort+0x5a>
 800b7ac:	200010e4 	.word	0x200010e4
 800b7b0:	20000fb0 	.word	0x20000fb0
 800b7b4:	200017c8 	.word	0x200017c8

0800b7b8 <SampleAccG>:
{
 800b7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ba:	46c6      	mov	lr, r8
 800b7bc:	b500      	push	{lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	0006      	movs	r6, r0
 800b7c2:	000d      	movs	r5, r1
 800b7c4:	0014      	movs	r4, r2
	if (LSM6DS3_ACC_Get_Acceleration(&hi2c2, buff, 0) != MEMS_SUCCESS)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	a901      	add	r1, sp, #4
 800b7ca:	4812      	ldr	r0, [pc, #72]	; (800b814 <SampleAccG+0x5c>)
 800b7cc:	f002 ff91 	bl	800e6f2 <LSM6DS3_ACC_Get_Acceleration>
		return H0BR4_ERR_LSM6DS3;
 800b7d0:	2305      	movs	r3, #5
	if (LSM6DS3_ACC_Get_Acceleration(&hi2c2, buff, 0) != MEMS_SUCCESS)
 800b7d2:	2801      	cmp	r0, #1
 800b7d4:	d118      	bne.n	800b808 <SampleAccG+0x50>
	*accY = buff[1];
 800b7d6:	9b02      	ldr	r3, [sp, #8]
 800b7d8:	4698      	mov	r8, r3
	*accZ = buff[2];
 800b7da:	9f03      	ldr	r7, [sp, #12]
	*x = ((float)xInMG) / 1000;
 800b7dc:	9801      	ldr	r0, [sp, #4]
 800b7de:	f7f5 fcd3 	bl	8001188 <__aeabi_i2f>
 800b7e2:	490d      	ldr	r1, [pc, #52]	; (800b818 <SampleAccG+0x60>)
 800b7e4:	f7f5 f9a6 	bl	8000b34 <__aeabi_fdiv>
 800b7e8:	6030      	str	r0, [r6, #0]
	*y = ((float)yInMG) / 1000;
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	f7f5 fccc 	bl	8001188 <__aeabi_i2f>
 800b7f0:	4909      	ldr	r1, [pc, #36]	; (800b818 <SampleAccG+0x60>)
 800b7f2:	f7f5 f99f 	bl	8000b34 <__aeabi_fdiv>
 800b7f6:	6028      	str	r0, [r5, #0]
	*z = ((float)zInMG) / 1000;
 800b7f8:	0038      	movs	r0, r7
 800b7fa:	f7f5 fcc5 	bl	8001188 <__aeabi_i2f>
 800b7fe:	4906      	ldr	r1, [pc, #24]	; (800b818 <SampleAccG+0x60>)
 800b800:	f7f5 f998 	bl	8000b34 <__aeabi_fdiv>
 800b804:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	0018      	movs	r0, r3
 800b80a:	b004      	add	sp, #16
 800b80c:	bc04      	pop	{r2}
 800b80e:	4690      	mov	r8, r2
 800b810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b812:	46c0      	nop			; (mov r8, r8)
 800b814:	20006db0 	.word	0x20006db0
 800b818:	447a0000 	.word	0x447a0000

0800b81c <SampleAccGToString>:
{
 800b81c:	b570      	push	{r4, r5, r6, lr}
 800b81e:	b08a      	sub	sp, #40	; 0x28
 800b820:	0005      	movs	r5, r0
 800b822:	000e      	movs	r6, r1
	float x = 0, y = 0, z = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	9309      	str	r3, [sp, #36]	; 0x24
 800b828:	9308      	str	r3, [sp, #32]
 800b82a:	9307      	str	r3, [sp, #28]
	if ((status = SampleAccG(&x, &y, &z)) != H0BR4_OK)
 800b82c:	aa07      	add	r2, sp, #28
 800b82e:	a908      	add	r1, sp, #32
 800b830:	a809      	add	r0, sp, #36	; 0x24
 800b832:	f7ff ffc1 	bl	800b7b8 <SampleAccG>
 800b836:	1e04      	subs	r4, r0, #0
 800b838:	d002      	beq.n	800b840 <SampleAccGToString+0x24>
}
 800b83a:	0020      	movs	r0, r4
 800b83c:	b00a      	add	sp, #40	; 0x28
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Acc(G) | X: %.2f, Y: %.2f, Z: %.2f\r\n", x, y, z);
 800b840:	9807      	ldr	r0, [sp, #28]
 800b842:	f7f7 fa89 	bl	8002d58 <__aeabi_f2d>
 800b846:	9004      	str	r0, [sp, #16]
 800b848:	9105      	str	r1, [sp, #20]
 800b84a:	9808      	ldr	r0, [sp, #32]
 800b84c:	f7f7 fa84 	bl	8002d58 <__aeabi_f2d>
 800b850:	9002      	str	r0, [sp, #8]
 800b852:	9103      	str	r1, [sp, #12]
 800b854:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b856:	f7f7 fa7f 	bl	8002d58 <__aeabi_f2d>
 800b85a:	9000      	str	r0, [sp, #0]
 800b85c:	9101      	str	r1, [sp, #4]
 800b85e:	4a03      	ldr	r2, [pc, #12]	; (800b86c <SampleAccGToString+0x50>)
 800b860:	0031      	movs	r1, r6
 800b862:	0028      	movs	r0, r5
 800b864:	f008 ff46 	bl	80146f4 <snprintf>
	return status;
 800b868:	e7e7      	b.n	800b83a <SampleAccGToString+0x1e>
 800b86a:	46c0      	nop			; (mov r8, r8)
 800b86c:	0801b540 	.word	0x0801b540

0800b870 <SampleSensorCommand>:
{
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	0005      	movs	r5, r0
 800b876:	000e      	movs	r6, r1
 800b878:	0010      	movs	r0, r2
	portBASE_TYPE sensNameLen = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	9301      	str	r3, [sp, #4]
	*pcWriteBuffer = '\0';
 800b87e:	702b      	strb	r3, [r5, #0]
	pSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &sensNameLen);
 800b880:	aa01      	add	r2, sp, #4
 800b882:	2101      	movs	r1, #1
 800b884:	f003 f95c 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 800b888:	1e04      	subs	r4, r0, #0
	if (pSensName == NULL) {
 800b88a:	d021      	beq.n	800b8d0 <SampleSensorCommand+0x60>
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800b88c:	2204      	movs	r2, #4
 800b88e:	4924      	ldr	r1, [pc, #144]	; (800b920 <SampleSensorCommand+0xb0>)
 800b890:	f008 ffa6 	bl	80147e0 <strncmp>
 800b894:	2800      	cmp	r0, #0
 800b896:	d021      	beq.n	800b8dc <SampleSensorCommand+0x6c>
		} else if (!strncmp(pSensName, accCmdName, strlen(accCmdName))) {
 800b898:	2203      	movs	r2, #3
 800b89a:	4922      	ldr	r1, [pc, #136]	; (800b924 <SampleSensorCommand+0xb4>)
 800b89c:	0020      	movs	r0, r4
 800b89e:	f008 ff9f 	bl	80147e0 <strncmp>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d028      	beq.n	800b8f8 <SampleSensorCommand+0x88>
		} else if (!strncmp(pSensName, magCmdName, strlen(magCmdName))) {
 800b8a6:	2203      	movs	r2, #3
 800b8a8:	491f      	ldr	r1, [pc, #124]	; (800b928 <SampleSensorCommand+0xb8>)
 800b8aa:	0020      	movs	r0, r4
 800b8ac:	f008 ff98 	bl	80147e0 <strncmp>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d028      	beq.n	800b906 <SampleSensorCommand+0x96>
		} else if (!strncmp(pSensName, tempCmdName, strlen(tempCmdName))) {
 800b8b4:	2204      	movs	r2, #4
 800b8b6:	491d      	ldr	r1, [pc, #116]	; (800b92c <SampleSensorCommand+0xbc>)
 800b8b8:	0020      	movs	r0, r4
 800b8ba:	f008 ff91 	bl	80147e0 <strncmp>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d128      	bne.n	800b914 <SampleSensorCommand+0xa4>
			if (SampleTempCToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800b8c2:	0031      	movs	r1, r6
 800b8c4:	0028      	movs	r0, r5
 800b8c6:	f7ff fc43 	bl	800b150 <SampleTempCToString>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d10c      	bne.n	800b8e8 <SampleSensorCommand+0x78>
 800b8ce:	e010      	b.n	800b8f2 <SampleSensorCommand+0x82>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800b8d0:	4a17      	ldr	r2, [pc, #92]	; (800b930 <SampleSensorCommand+0xc0>)
 800b8d2:	0031      	movs	r1, r6
 800b8d4:	0028      	movs	r0, r5
 800b8d6:	f008 ff0d 	bl	80146f4 <snprintf>
		return pdFALSE;
 800b8da:	e00a      	b.n	800b8f2 <SampleSensorCommand+0x82>
			if (SampleGyroDPSToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800b8dc:	0031      	movs	r1, r6
 800b8de:	0028      	movs	r0, r5
 800b8e0:	f7ff fee2 	bl	800b6a8 <SampleGyroDPSToString>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d004      	beq.n	800b8f2 <SampleSensorCommand+0x82>
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
 800b8e8:	4a12      	ldr	r2, [pc, #72]	; (800b934 <SampleSensorCommand+0xc4>)
 800b8ea:	0031      	movs	r1, r6
 800b8ec:	0028      	movs	r0, r5
 800b8ee:	f008 ff01 	bl	80146f4 <snprintf>
}
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	b002      	add	sp, #8
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
			if (SampleAccGToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800b8f8:	0031      	movs	r1, r6
 800b8fa:	0028      	movs	r0, r5
 800b8fc:	f7ff ff8e 	bl	800b81c <SampleAccGToString>
 800b900:	2800      	cmp	r0, #0
 800b902:	d1f1      	bne.n	800b8e8 <SampleSensorCommand+0x78>
 800b904:	e7f5      	b.n	800b8f2 <SampleSensorCommand+0x82>
			if (SampleMagMGaussToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800b906:	0031      	movs	r1, r6
 800b908:	0028      	movs	r0, r5
 800b90a:	f7ff fb6b 	bl	800afe4 <SampleMagMGaussToString>
 800b90e:	2800      	cmp	r0, #0
 800b910:	d1ea      	bne.n	800b8e8 <SampleSensorCommand+0x78>
 800b912:	e7ee      	b.n	800b8f2 <SampleSensorCommand+0x82>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800b914:	4a06      	ldr	r2, [pc, #24]	; (800b930 <SampleSensorCommand+0xc0>)
 800b916:	0031      	movs	r1, r6
 800b918:	0028      	movs	r0, r5
 800b91a:	f008 feeb 	bl	80146f4 <snprintf>
 800b91e:	e7e8      	b.n	800b8f2 <SampleSensorCommand+0x82>
 800b920:	0801b5d8 	.word	0x0801b5d8
 800b924:	0801b5e0 	.word	0x0801b5e0
 800b928:	0801b5e4 	.word	0x0801b5e4
 800b92c:	0801b5e8 	.word	0x0801b5e8
 800b930:	0801b5c4 	.word	0x0801b5c4
 800b934:	0801b5f0 	.word	0x0801b5f0

0800b938 <SampleAccGToBuf>:
{
 800b938:	b510      	push	{r4, lr}
	return SampleAccG(buffer, buffer + 1, buffer + 2);
 800b93a:	0002      	movs	r2, r0
 800b93c:	3208      	adds	r2, #8
 800b93e:	1d01      	adds	r1, r0, #4
 800b940:	f7ff ff3a 	bl	800b7b8 <SampleAccG>
}
 800b944:	bd10      	pop	{r4, pc}
	...

0800b948 <SampleAccGToPort>:
{
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	0006      	movs	r6, r0
 800b94e:	000d      	movs	r5, r1
	if ((status = SampleAccGToBuf(buffer)) != H0BR4_OK)
 800b950:	a801      	add	r0, sp, #4
 800b952:	f7ff fff1 	bl	800b938 <SampleAccGToBuf>
 800b956:	1e04      	subs	r4, r0, #0
 800b958:	d123      	bne.n	800b9a2 <SampleAccGToPort+0x5a>
	if (module==myID){
 800b95a:	4b23      	ldr	r3, [pc, #140]	; (800b9e8 <SampleAccGToPort+0xa0>)
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	42ab      	cmp	r3, r5
 800b960:	d022      	beq.n	800b9a8 <SampleAccGToPort+0x60>
						messageParams[0]=port;
 800b962:	4b22      	ldr	r3, [pc, #136]	; (800b9ec <SampleAccGToPort+0xa4>)
 800b964:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&buffer[0])+3);  messageParams[2] = *((__IO uint8_t *)(&buffer[0])+2);
 800b966:	aa01      	add	r2, sp, #4
 800b968:	78d1      	ldrb	r1, [r2, #3]
 800b96a:	7059      	strb	r1, [r3, #1]
 800b96c:	7891      	ldrb	r1, [r2, #2]
 800b96e:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&buffer[0])+1);  messageParams[4] = *((__IO uint8_t *)(&buffer[0])+0);
 800b970:	7851      	ldrb	r1, [r2, #1]
 800b972:	70d9      	strb	r1, [r3, #3]
 800b974:	7811      	ldrb	r1, [r2, #0]
 800b976:	7119      	strb	r1, [r3, #4]
					  messageParams[5] = *((__IO uint8_t *)(&buffer[1])+3);  messageParams[6] = *((__IO uint8_t *)(&buffer[1])+2);
 800b978:	79d1      	ldrb	r1, [r2, #7]
 800b97a:	7159      	strb	r1, [r3, #5]
 800b97c:	7991      	ldrb	r1, [r2, #6]
 800b97e:	7199      	strb	r1, [r3, #6]
						messageParams[7] = *((__IO uint8_t *)(&buffer[1])+1);  messageParams[8] = *((__IO uint8_t *)(&buffer[1])+0);
 800b980:	7951      	ldrb	r1, [r2, #5]
 800b982:	71d9      	strb	r1, [r3, #7]
 800b984:	7911      	ldrb	r1, [r2, #4]
 800b986:	7219      	strb	r1, [r3, #8]
					  messageParams[9] = *((__IO uint8_t *)(&buffer[2])+3);  messageParams[10] = *((__IO uint8_t *)(&buffer[2])+2);
 800b988:	7ad1      	ldrb	r1, [r2, #11]
 800b98a:	7259      	strb	r1, [r3, #9]
 800b98c:	7a91      	ldrb	r1, [r2, #10]
 800b98e:	7299      	strb	r1, [r3, #10]
						messageParams[11] = *((__IO uint8_t *)(&buffer[2])+1); messageParams[12] = *((__IO uint8_t *)(&buffer[2])+0);
 800b990:	7a51      	ldrb	r1, [r2, #9]
 800b992:	72d9      	strb	r1, [r3, #11]
 800b994:	7a12      	ldrb	r2, [r2, #8]
 800b996:	731a      	strb	r2, [r3, #12]
						SendMessageToModule(module, CODE_PORT_FORWARD, (sizeof(float)*3)+1);
 800b998:	220d      	movs	r2, #13
 800b99a:	2123      	movs	r1, #35	; 0x23
 800b99c:	0028      	movs	r0, r5
 800b99e:	f7fd fd0b 	bl	80093b8 <SendMessageToModule>
}
 800b9a2:	0020      	movs	r0, r4
 800b9a4:	b004      	add	sp, #16
 800b9a6:	bd70      	pop	{r4, r5, r6, pc}
						temp[0] = *((__IO uint8_t *)(&buffer[0])+3);  temp[1] = *((__IO uint8_t *)(&buffer[0])+2);
 800b9a8:	ab01      	add	r3, sp, #4
 800b9aa:	78da      	ldrb	r2, [r3, #3]
 800b9ac:	4910      	ldr	r1, [pc, #64]	; (800b9f0 <SampleAccGToPort+0xa8>)
 800b9ae:	700a      	strb	r2, [r1, #0]
 800b9b0:	789a      	ldrb	r2, [r3, #2]
 800b9b2:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&buffer[0])+1);  temp[3] = *((__IO uint8_t *)(&buffer[0])+0);
 800b9b4:	785a      	ldrb	r2, [r3, #1]
 800b9b6:	708a      	strb	r2, [r1, #2]
 800b9b8:	781a      	ldrb	r2, [r3, #0]
 800b9ba:	70ca      	strb	r2, [r1, #3]
		        temp[4] = *((__IO uint8_t *)(&buffer[1])+3);  temp[5] = *((__IO uint8_t *)(&buffer[1])+2);
 800b9bc:	79da      	ldrb	r2, [r3, #7]
 800b9be:	710a      	strb	r2, [r1, #4]
 800b9c0:	799a      	ldrb	r2, [r3, #6]
 800b9c2:	714a      	strb	r2, [r1, #5]
						temp[6] = *((__IO uint8_t *)(&buffer[1])+1);  temp[7] = *((__IO uint8_t *)(&buffer[1])+0);
 800b9c4:	795a      	ldrb	r2, [r3, #5]
 800b9c6:	718a      	strb	r2, [r1, #6]
 800b9c8:	791a      	ldrb	r2, [r3, #4]
 800b9ca:	71ca      	strb	r2, [r1, #7]
		        temp[8] = *((__IO uint8_t *)(&buffer[2])+3);  temp[9] = *((__IO uint8_t *)(&buffer[2])+2);
 800b9cc:	7ada      	ldrb	r2, [r3, #11]
 800b9ce:	720a      	strb	r2, [r1, #8]
 800b9d0:	7a9a      	ldrb	r2, [r3, #10]
 800b9d2:	724a      	strb	r2, [r1, #9]
						temp[10] = *((__IO uint8_t *)(&buffer[2])+1); temp[11] = *((__IO uint8_t *)(&buffer[2])+0);
 800b9d4:	7a5a      	ldrb	r2, [r3, #9]
 800b9d6:	728a      	strb	r2, [r1, #10]
 800b9d8:	7a1b      	ldrb	r3, [r3, #8]
 800b9da:	72cb      	strb	r3, [r1, #11]
						writePxITMutex(port, (char *)&temp[0], 12*sizeof(uint8_t), 10);
 800b9dc:	230a      	movs	r3, #10
 800b9de:	220c      	movs	r2, #12
 800b9e0:	0030      	movs	r0, r6
 800b9e2:	f002 fab7 	bl	800df54 <writePxITMutex>
 800b9e6:	e7dc      	b.n	800b9a2 <SampleAccGToPort+0x5a>
 800b9e8:	200010e4 	.word	0x200010e4
 800b9ec:	20000fb0 	.word	0x20000fb0
 800b9f0:	200017d4 	.word	0x200017d4

0800b9f4 <SampleMagMGauss>:
{
 800b9f4:	b510      	push	{r4, lr}
	return LSM303SampleMagMGauss(magX, magY, magZ);
 800b9f6:	f7ff fabf 	bl	800af78 <LSM303SampleMagMGauss>
}
 800b9fa:	bd10      	pop	{r4, pc}

0800b9fc <StreamGyroDPSToPort>:
{
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleGyroDPSToPort);
 800ba00:	4c02      	ldr	r4, [pc, #8]	; (800ba0c <StreamGyroDPSToPort+0x10>)
 800ba02:	9400      	str	r4, [sp, #0]
 800ba04:	f7ff fbf6 	bl	800b1f4 <StreamMemsToPort>
}
 800ba08:	b002      	add	sp, #8
 800ba0a:	bd10      	pop	{r4, pc}
 800ba0c:	0800b70d 	.word	0x0800b70d

0800ba10 <StreamGyroDPSToCLI>:
{
 800ba10:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleGyroDPSToString);
 800ba12:	4a02      	ldr	r2, [pc, #8]	; (800ba1c <StreamGyroDPSToCLI+0xc>)
 800ba14:	f7ff fc34 	bl	800b280 <StreamMemsToCLI>
}
 800ba18:	bd10      	pop	{r4, pc}
 800ba1a:	46c0      	nop			; (mov r8, r8)
 800ba1c:	0800b6a9 	.word	0x0800b6a9

0800ba20 <StreamAccGToPort>:
{
 800ba20:	b510      	push	{r4, lr}
 800ba22:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleAccGToPort);
 800ba24:	4c02      	ldr	r4, [pc, #8]	; (800ba30 <StreamAccGToPort+0x10>)
 800ba26:	9400      	str	r4, [sp, #0]
 800ba28:	f7ff fbe4 	bl	800b1f4 <StreamMemsToPort>
}
 800ba2c:	b002      	add	sp, #8
 800ba2e:	bd10      	pop	{r4, pc}
 800ba30:	0800b949 	.word	0x0800b949

0800ba34 <StreamAccGToCLI>:
{
 800ba34:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleAccGToString);
 800ba36:	4a02      	ldr	r2, [pc, #8]	; (800ba40 <StreamAccGToCLI+0xc>)
 800ba38:	f7ff fc22 	bl	800b280 <StreamMemsToCLI>
}
 800ba3c:	bd10      	pop	{r4, pc}
 800ba3e:	46c0      	nop			; (mov r8, r8)
 800ba40:	0800b81d 	.word	0x0800b81d

0800ba44 <StreamMagMGaussToPort>:
{
 800ba44:	b510      	push	{r4, lr}
 800ba46:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleMagMGaussToPort);
 800ba48:	4c02      	ldr	r4, [pc, #8]	; (800ba54 <StreamMagMGaussToPort+0x10>)
 800ba4a:	9400      	str	r4, [sp, #0]
 800ba4c:	f7ff fbd2 	bl	800b1f4 <StreamMemsToPort>
}
 800ba50:	b002      	add	sp, #8
 800ba52:	bd10      	pop	{r4, pc}
 800ba54:	0800b055 	.word	0x0800b055

0800ba58 <StreamMagMGaussToCLI>:
{
 800ba58:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleMagMGaussToString);
 800ba5a:	4a02      	ldr	r2, [pc, #8]	; (800ba64 <StreamMagMGaussToCLI+0xc>)
 800ba5c:	f7ff fc10 	bl	800b280 <StreamMemsToCLI>
}
 800ba60:	bd10      	pop	{r4, pc}
 800ba62:	46c0      	nop			; (mov r8, r8)
 800ba64:	0800afe5 	.word	0x0800afe5

0800ba68 <StreamTempCToPort>:
{
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleTempCToPort);
 800ba6c:	4c02      	ldr	r4, [pc, #8]	; (800ba78 <StreamTempCToPort+0x10>)
 800ba6e:	9400      	str	r4, [sp, #0]
 800ba70:	f7ff fbc0 	bl	800b1f4 <StreamMemsToPort>
}
 800ba74:	b002      	add	sp, #8
 800ba76:	bd10      	pop	{r4, pc}
 800ba78:	0800b185 	.word	0x0800b185

0800ba7c <Module_MessagingTask>:
{
 800ba7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba7e:	46c6      	mov	lr, r8
 800ba80:	b500      	push	{lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	000c      	movs	r4, r1
 800ba86:	9301      	str	r3, [sp, #4]
 800ba88:	ab08      	add	r3, sp, #32
 800ba8a:	781d      	ldrb	r5, [r3, #0]
	switch (code)
 800ba8c:	4b6a      	ldr	r3, [pc, #424]	; (800bc38 <Module_MessagingTask+0x1bc>)
 800ba8e:	18c3      	adds	r3, r0, r3
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	2a0c      	cmp	r2, #12
 800ba94:	d900      	bls.n	800ba98 <Module_MessagingTask+0x1c>
 800ba96:	e0cd      	b.n	800bc34 <Module_MessagingTask+0x1b8>
 800ba98:	0093      	lsls	r3, r2, #2
 800ba9a:	4a68      	ldr	r2, [pc, #416]	; (800bc3c <Module_MessagingTask+0x1c0>)
 800ba9c:	58d3      	ldr	r3, [r2, r3]
 800ba9e:	469f      	mov	pc, r3
			SampleGyroDPS(&H0BR4_gyroX, &H0BR4_gyroY, &H0BR4_gyroZ);
 800baa0:	4a67      	ldr	r2, [pc, #412]	; (800bc40 <Module_MessagingTask+0x1c4>)
 800baa2:	4968      	ldr	r1, [pc, #416]	; (800bc44 <Module_MessagingTask+0x1c8>)
 800baa4:	4868      	ldr	r0, [pc, #416]	; (800bc48 <Module_MessagingTask+0x1cc>)
 800baa6:	f7ff fdcd 	bl	800b644 <SampleGyroDPS>
	Module_Status result = H0BR4_OK;
 800baaa:	2000      	movs	r0, #0
}
 800baac:	b002      	add	sp, #8
 800baae:	bc04      	pop	{r2}
 800bab0:	4690      	mov	r8, r2
 800bab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SampleAccG(&H0BR4_accX, &H0BR4_accY, &H0BR4_accZ);
 800bab4:	4a65      	ldr	r2, [pc, #404]	; (800bc4c <Module_MessagingTask+0x1d0>)
 800bab6:	4966      	ldr	r1, [pc, #408]	; (800bc50 <Module_MessagingTask+0x1d4>)
 800bab8:	4866      	ldr	r0, [pc, #408]	; (800bc54 <Module_MessagingTask+0x1d8>)
 800baba:	f7ff fe7d 	bl	800b7b8 <SampleAccG>
	Module_Status result = H0BR4_OK;
 800babe:	2000      	movs	r0, #0
			break;
 800bac0:	e7f4      	b.n	800baac <Module_MessagingTask+0x30>
			SampleMagMGauss(&H0BR4_magX, &H0BR4_magY, &H0BR4_magZ);
 800bac2:	4a65      	ldr	r2, [pc, #404]	; (800bc58 <Module_MessagingTask+0x1dc>)
 800bac4:	4965      	ldr	r1, [pc, #404]	; (800bc5c <Module_MessagingTask+0x1e0>)
 800bac6:	4866      	ldr	r0, [pc, #408]	; (800bc60 <Module_MessagingTask+0x1e4>)
 800bac8:	f7ff ff94 	bl	800b9f4 <SampleMagMGauss>
	Module_Status result = H0BR4_OK;
 800bacc:	2000      	movs	r0, #0
			break;
 800bace:	e7ed      	b.n	800baac <Module_MessagingTask+0x30>
			SampleTempCelsius(&H0BR4_temp);
 800bad0:	4864      	ldr	r0, [pc, #400]	; (800bc64 <Module_MessagingTask+0x1e8>)
 800bad2:	f7ff fb39 	bl	800b148 <SampleTempCelsius>
	Module_Status result = H0BR4_OK;
 800bad6:	2000      	movs	r0, #0
			break;
 800bad8:	e7e8      	b.n	800baac <Module_MessagingTask+0x30>
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bada:	1e4b      	subs	r3, r1, #1
 800badc:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][7+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][5+shift] << 8 ) + cMessage[port-1][4+shift];
 800bade:	4e62      	ldr	r6, [pc, #392]	; (800bc68 <Module_MessagingTask+0x1ec>)
 800bae0:	00d8      	lsls	r0, r3, #3
 800bae2:	1ac7      	subs	r7, r0, r3
 800bae4:	00ff      	lsls	r7, r7, #3
 800bae6:	19f7      	adds	r7, r6, r7
 800bae8:	197a      	adds	r2, r7, r5
 800baea:	79d3      	ldrb	r3, [r2, #7]
 800baec:	061b      	lsls	r3, r3, #24
 800baee:	7991      	ldrb	r1, [r2, #6]
 800baf0:	0409      	lsls	r1, r1, #16
 800baf2:	4688      	mov	r8, r1
 800baf4:	4443      	add	r3, r8
 800baf6:	7911      	ldrb	r1, [r2, #4]
 800baf8:	4688      	mov	r8, r1
 800bafa:	4443      	add	r3, r8
 800bafc:	7951      	ldrb	r1, [r2, #5]
 800bafe:	0209      	lsls	r1, r1, #8
 800bb00:	4688      	mov	r8, r1
 800bb02:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bb04:	78d1      	ldrb	r1, [r2, #3]
 800bb06:	0609      	lsls	r1, r1, #24
 800bb08:	4688      	mov	r8, r1
 800bb0a:	7892      	ldrb	r2, [r2, #2]
 800bb0c:	0412      	lsls	r2, r2, #16
 800bb0e:	4442      	add	r2, r8
 800bb10:	5d7f      	ldrb	r7, [r7, r5]
 800bb12:	19d2      	adds	r2, r2, r7
 800bb14:	4661      	mov	r1, ip
 800bb16:	1a40      	subs	r0, r0, r1
 800bb18:	00c0      	lsls	r0, r0, #3
 800bb1a:	1830      	adds	r0, r6, r0
 800bb1c:	1945      	adds	r5, r0, r5
 800bb1e:	7868      	ldrb	r0, [r5, #1]
 800bb20:	0200      	lsls	r0, r0, #8
 800bb22:	1812      	adds	r2, r2, r0
			if ((result = StreamGyroDPSToPort(port, dst, period, timeout)) != H0BR4_OK)
 800bb24:	9901      	ldr	r1, [sp, #4]
 800bb26:	0020      	movs	r0, r4
 800bb28:	f7ff ff68 	bl	800b9fc <StreamGyroDPSToPort>
	return result;	
 800bb2c:	e7be      	b.n	800baac <Module_MessagingTask+0x30>
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bb2e:	1e4b      	subs	r3, r1, #1
 800bb30:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][7+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][5+shift] << 8 ) + cMessage[port-1][4+shift];
 800bb32:	4e4d      	ldr	r6, [pc, #308]	; (800bc68 <Module_MessagingTask+0x1ec>)
 800bb34:	00d8      	lsls	r0, r3, #3
 800bb36:	1ac7      	subs	r7, r0, r3
 800bb38:	00ff      	lsls	r7, r7, #3
 800bb3a:	19f7      	adds	r7, r6, r7
 800bb3c:	197a      	adds	r2, r7, r5
 800bb3e:	79d3      	ldrb	r3, [r2, #7]
 800bb40:	061b      	lsls	r3, r3, #24
 800bb42:	7991      	ldrb	r1, [r2, #6]
 800bb44:	0409      	lsls	r1, r1, #16
 800bb46:	4688      	mov	r8, r1
 800bb48:	4443      	add	r3, r8
 800bb4a:	7911      	ldrb	r1, [r2, #4]
 800bb4c:	4688      	mov	r8, r1
 800bb4e:	4443      	add	r3, r8
 800bb50:	7951      	ldrb	r1, [r2, #5]
 800bb52:	0209      	lsls	r1, r1, #8
 800bb54:	4688      	mov	r8, r1
 800bb56:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bb58:	78d1      	ldrb	r1, [r2, #3]
 800bb5a:	0609      	lsls	r1, r1, #24
 800bb5c:	4688      	mov	r8, r1
 800bb5e:	7892      	ldrb	r2, [r2, #2]
 800bb60:	0412      	lsls	r2, r2, #16
 800bb62:	4442      	add	r2, r8
 800bb64:	5d7f      	ldrb	r7, [r7, r5]
 800bb66:	19d2      	adds	r2, r2, r7
 800bb68:	4661      	mov	r1, ip
 800bb6a:	1a40      	subs	r0, r0, r1
 800bb6c:	00c0      	lsls	r0, r0, #3
 800bb6e:	1830      	adds	r0, r6, r0
 800bb70:	1945      	adds	r5, r0, r5
 800bb72:	7868      	ldrb	r0, [r5, #1]
 800bb74:	0200      	lsls	r0, r0, #8
 800bb76:	1812      	adds	r2, r2, r0
			if ((result = StreamAccGToPort(port, dst, period, timeout)) != H0BR4_OK)
 800bb78:	9901      	ldr	r1, [sp, #4]
 800bb7a:	0020      	movs	r0, r4
 800bb7c:	f7ff ff50 	bl	800ba20 <StreamAccGToPort>
	return result;	
 800bb80:	e794      	b.n	800baac <Module_MessagingTask+0x30>
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bb82:	1e4b      	subs	r3, r1, #1
 800bb84:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][7+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][5+shift] << 8 ) + cMessage[port-1][4+shift];
 800bb86:	4e38      	ldr	r6, [pc, #224]	; (800bc68 <Module_MessagingTask+0x1ec>)
 800bb88:	00d8      	lsls	r0, r3, #3
 800bb8a:	1ac7      	subs	r7, r0, r3
 800bb8c:	00ff      	lsls	r7, r7, #3
 800bb8e:	19f7      	adds	r7, r6, r7
 800bb90:	197a      	adds	r2, r7, r5
 800bb92:	79d3      	ldrb	r3, [r2, #7]
 800bb94:	061b      	lsls	r3, r3, #24
 800bb96:	7991      	ldrb	r1, [r2, #6]
 800bb98:	0409      	lsls	r1, r1, #16
 800bb9a:	4688      	mov	r8, r1
 800bb9c:	4443      	add	r3, r8
 800bb9e:	7911      	ldrb	r1, [r2, #4]
 800bba0:	4688      	mov	r8, r1
 800bba2:	4443      	add	r3, r8
 800bba4:	7951      	ldrb	r1, [r2, #5]
 800bba6:	0209      	lsls	r1, r1, #8
 800bba8:	4688      	mov	r8, r1
 800bbaa:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bbac:	78d1      	ldrb	r1, [r2, #3]
 800bbae:	0609      	lsls	r1, r1, #24
 800bbb0:	4688      	mov	r8, r1
 800bbb2:	7892      	ldrb	r2, [r2, #2]
 800bbb4:	0412      	lsls	r2, r2, #16
 800bbb6:	4442      	add	r2, r8
 800bbb8:	5d7f      	ldrb	r7, [r7, r5]
 800bbba:	19d2      	adds	r2, r2, r7
 800bbbc:	4661      	mov	r1, ip
 800bbbe:	1a40      	subs	r0, r0, r1
 800bbc0:	00c0      	lsls	r0, r0, #3
 800bbc2:	1830      	adds	r0, r6, r0
 800bbc4:	1945      	adds	r5, r0, r5
 800bbc6:	7868      	ldrb	r0, [r5, #1]
 800bbc8:	0200      	lsls	r0, r0, #8
 800bbca:	1812      	adds	r2, r2, r0
			if ((result = StreamMagMGaussToPort(port, dst, period, timeout)) != H0BR4_OK)
 800bbcc:	9901      	ldr	r1, [sp, #4]
 800bbce:	0020      	movs	r0, r4
 800bbd0:	f7ff ff38 	bl	800ba44 <StreamMagMGaussToPort>
	return result;	
 800bbd4:	e76a      	b.n	800baac <Module_MessagingTask+0x30>
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bbd6:	1e4b      	subs	r3, r1, #1
 800bbd8:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][7+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][5+shift] << 8 ) + cMessage[port-1][4+shift];
 800bbda:	4e23      	ldr	r6, [pc, #140]	; (800bc68 <Module_MessagingTask+0x1ec>)
 800bbdc:	00d8      	lsls	r0, r3, #3
 800bbde:	1ac7      	subs	r7, r0, r3
 800bbe0:	00ff      	lsls	r7, r7, #3
 800bbe2:	19f7      	adds	r7, r6, r7
 800bbe4:	197a      	adds	r2, r7, r5
 800bbe6:	79d3      	ldrb	r3, [r2, #7]
 800bbe8:	061b      	lsls	r3, r3, #24
 800bbea:	7991      	ldrb	r1, [r2, #6]
 800bbec:	0409      	lsls	r1, r1, #16
 800bbee:	4688      	mov	r8, r1
 800bbf0:	4443      	add	r3, r8
 800bbf2:	7911      	ldrb	r1, [r2, #4]
 800bbf4:	4688      	mov	r8, r1
 800bbf6:	4443      	add	r3, r8
 800bbf8:	7951      	ldrb	r1, [r2, #5]
 800bbfa:	0209      	lsls	r1, r1, #8
 800bbfc:	4688      	mov	r8, r1
 800bbfe:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bc00:	78d1      	ldrb	r1, [r2, #3]
 800bc02:	0609      	lsls	r1, r1, #24
 800bc04:	4688      	mov	r8, r1
 800bc06:	7892      	ldrb	r2, [r2, #2]
 800bc08:	0412      	lsls	r2, r2, #16
 800bc0a:	4442      	add	r2, r8
 800bc0c:	5d7f      	ldrb	r7, [r7, r5]
 800bc0e:	19d2      	adds	r2, r2, r7
 800bc10:	4661      	mov	r1, ip
 800bc12:	1a40      	subs	r0, r0, r1
 800bc14:	00c0      	lsls	r0, r0, #3
 800bc16:	1830      	adds	r0, r6, r0
 800bc18:	1945      	adds	r5, r0, r5
 800bc1a:	7868      	ldrb	r0, [r5, #1]
 800bc1c:	0200      	lsls	r0, r0, #8
 800bc1e:	1812      	adds	r2, r2, r0
			if ((result = StreamTempCToPort(port, dst, period, timeout)) != H0BR4_OK)
 800bc20:	9901      	ldr	r1, [sp, #4]
 800bc22:	0020      	movs	r0, r4
 800bc24:	f7ff ff20 	bl	800ba68 <StreamTempCToPort>
	return result;	
 800bc28:	e740      	b.n	800baac <Module_MessagingTask+0x30>
	stopStream = true;
 800bc2a:	4b10      	ldr	r3, [pc, #64]	; (800bc6c <Module_MessagingTask+0x1f0>)
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	701a      	strb	r2, [r3, #0]
			result = H0BR4_OK;
 800bc30:	2000      	movs	r0, #0
 800bc32:	e73b      	b.n	800baac <Module_MessagingTask+0x30>
			result = H0BR4_ERR_UnknownMessage;
 800bc34:	2001      	movs	r0, #1
 800bc36:	e739      	b.n	800baac <Module_MessagingTask+0x30>
 800bc38:	fffffdda 	.word	0xfffffdda
 800bc3c:	0801b50c 	.word	0x0801b50c
 800bc40:	200017b0 	.word	0x200017b0
 800bc44:	200017ac 	.word	0x200017ac
 800bc48:	200017a8 	.word	0x200017a8
 800bc4c:	200017a4 	.word	0x200017a4
 800bc50:	200017a0 	.word	0x200017a0
 800bc54:	2000179c 	.word	0x2000179c
 800bc58:	200017bc 	.word	0x200017bc
 800bc5c:	200017b8 	.word	0x200017b8
 800bc60:	200017b4 	.word	0x200017b4
 800bc64:	200017c0 	.word	0x200017c0
 800bc68:	20000d80 	.word	0x20000d80
 800bc6c:	200017c4 	.word	0x200017c4

0800bc70 <StreamTempCToCLI>:
{
 800bc70:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleTempCToString);
 800bc72:	4a02      	ldr	r2, [pc, #8]	; (800bc7c <StreamTempCToCLI+0xc>)
 800bc74:	f7ff fb04 	bl	800b280 <StreamMemsToCLI>
}
 800bc78:	bd10      	pop	{r4, pc}
 800bc7a:	46c0      	nop			; (mov r8, r8)
 800bc7c:	0800b151 	.word	0x0800b151

0800bc80 <StreamSensorCommand>:
{
 800bc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc82:	b08b      	sub	sp, #44	; 0x2c
 800bc84:	0005      	movs	r5, r0
 800bc86:	9100      	str	r1, [sp, #0]
 800bc88:	0014      	movs	r4, r2
	portBASE_TYPE sensNameLen = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9309      	str	r3, [sp, #36]	; 0x24
	*pcWriteBuffer = '\0';
 800bc8e:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800bc90:	9305      	str	r3, [sp, #20]
	portBASE_TYPE timeoutStrLen = 0;
 800bc92:	9306      	str	r3, [sp, #24]
	portBASE_TYPE portStrLen = 0;
 800bc94:	9307      	str	r3, [sp, #28]
	portBASE_TYPE modStrLen = 0;
 800bc96:	9308      	str	r3, [sp, #32]
	*ppSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, pSensNameLen);
 800bc98:	aa09      	add	r2, sp, #36	; 0x24
 800bc9a:	2101      	movs	r1, #1
 800bc9c:	0020      	movs	r0, r4
 800bc9e:	f002 ff4f 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 800bca2:	0006      	movs	r6, r0
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &periodStrLen);
 800bca4:	aa05      	add	r2, sp, #20
 800bca6:	2102      	movs	r1, #2
 800bca8:	0020      	movs	r0, r4
 800bcaa:	f002 ff49 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 800bcae:	0007      	movs	r7, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &timeoutStrLen);
 800bcb0:	aa06      	add	r2, sp, #24
 800bcb2:	2103      	movs	r1, #3
 800bcb4:	9401      	str	r4, [sp, #4]
 800bcb6:	0020      	movs	r0, r4
 800bcb8:	f002 ff42 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 800bcbc:	0004      	movs	r4, r0
	if ((*ppSensName == NULL) || (pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	d03d      	beq.n	800bd3e <StreamSensorCommand+0xbe>
 800bcc2:	2f00      	cmp	r7, #0
 800bcc4:	d03b      	beq.n	800bd3e <StreamSensorCommand+0xbe>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d039      	beq.n	800bd3e <StreamSensorCommand+0xbe>
	*pPeriod = atoi(pPeriodMSStr);
 800bcca:	0038      	movs	r0, r7
 800bccc:	f008 f87f 	bl	8013dce <atoi>
 800bcd0:	9002      	str	r0, [sp, #8]
	*pTimeout = atoi(pTimeoutMSStr);
 800bcd2:	0020      	movs	r0, r4
 800bcd4:	f008 f87b 	bl	8013dce <atoi>
 800bcd8:	9003      	str	r0, [sp, #12]
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &portStrLen);
 800bcda:	aa07      	add	r2, sp, #28
 800bcdc:	2104      	movs	r1, #4
 800bcde:	9c01      	ldr	r4, [sp, #4]
 800bce0:	0020      	movs	r0, r4
 800bce2:	f002 ff2d 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 800bce6:	0007      	movs	r7, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 5, &modStrLen);
 800bce8:	aa08      	add	r2, sp, #32
 800bcea:	2105      	movs	r1, #5
 800bcec:	0020      	movs	r0, r4
 800bcee:	f002 ff27 	bl	800eb40 <FreeRTOS_CLIGetParameter>
 800bcf2:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800bcf4:	d021      	beq.n	800bd3a <StreamSensorCommand+0xba>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800bcf6:	2f00      	cmp	r7, #0
 800bcf8:	d021      	beq.n	800bd3e <StreamSensorCommand+0xbe>
	*pPort = atoi(pPortStr);
 800bcfa:	0038      	movs	r0, r7
 800bcfc:	f008 f867 	bl	8013dce <atoi>
 800bd00:	b2c3      	uxtb	r3, r0
 800bd02:	9301      	str	r3, [sp, #4]
	*pModule = atoi(pModStr);
 800bd04:	0020      	movs	r0, r4
 800bd06:	f008 f862 	bl	8013dce <atoi>
 800bd0a:	b2c4      	uxtb	r4, r0
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800bd0c:	2204      	movs	r2, #4
 800bd0e:	4943      	ldr	r1, [pc, #268]	; (800be1c <StreamSensorCommand+0x19c>)
 800bd10:	0030      	movs	r0, r6
 800bd12:	f008 fd65 	bl	80147e0 <strncmp>
	*pPortOrCLI = false;
 800bd16:	2700      	movs	r7, #0
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d000      	beq.n	800bd1e <StreamSensorCommand+0x9e>
 800bd1c:	e06e      	b.n	800bdfc <StreamSensorCommand+0x17c>
				if (StreamGyroDPSToPort(port, module, period, timeout) != H0BR4_OK)
 800bd1e:	9b03      	ldr	r3, [sp, #12]
 800bd20:	9a02      	ldr	r2, [sp, #8]
 800bd22:	0021      	movs	r1, r4
 800bd24:	9801      	ldr	r0, [sp, #4]
 800bd26:	f7ff fe69 	bl	800b9fc <StreamGyroDPSToPort>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d15b      	bne.n	800bde6 <StreamSensorCommand+0x166>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800bd2e:	4a3c      	ldr	r2, [pc, #240]	; (800be20 <StreamSensorCommand+0x1a0>)
 800bd30:	9900      	ldr	r1, [sp, #0]
 800bd32:	0028      	movs	r0, r5
 800bd34:	f008 fcde 	bl	80146f4 <snprintf>
		return pdFALSE;
 800bd38:	e05a      	b.n	800bdf0 <StreamSensorCommand+0x170>
	if ((pModStr == NULL) && (pPortStr == NULL))
 800bd3a:	2f00      	cmp	r7, #0
 800bd3c:	d046      	beq.n	800bdcc <StreamSensorCommand+0x14c>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800bd3e:	4a39      	ldr	r2, [pc, #228]	; (800be24 <StreamSensorCommand+0x1a4>)
 800bd40:	9900      	ldr	r1, [sp, #0]
 800bd42:	0028      	movs	r0, r5
 800bd44:	f008 fcd6 	bl	80146f4 <snprintf>
		return pdFALSE;
 800bd48:	e052      	b.n	800bdf0 <StreamSensorCommand+0x170>
				if (StreamAccGToPort(port, module, period, timeout) != H0BR4_OK)
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	9a02      	ldr	r2, [sp, #8]
 800bd4e:	0021      	movs	r1, r4
 800bd50:	9801      	ldr	r0, [sp, #4]
 800bd52:	f7ff fe65 	bl	800ba20 <StreamAccGToPort>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d145      	bne.n	800bde6 <StreamSensorCommand+0x166>
 800bd5a:	e7e8      	b.n	800bd2e <StreamSensorCommand+0xae>
		} else if (!strncmp(pSensName, magCmdName, strlen(magCmdName))) {
 800bd5c:	2203      	movs	r2, #3
 800bd5e:	4932      	ldr	r1, [pc, #200]	; (800be28 <StreamSensorCommand+0x1a8>)
 800bd60:	0030      	movs	r0, r6
 800bd62:	f008 fd3d 	bl	80147e0 <strncmp>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d111      	bne.n	800bd8e <StreamSensorCommand+0x10e>
			if (portOrCLI) {
 800bd6a:	2f00      	cmp	r7, #0
 800bd6c:	d006      	beq.n	800bd7c <StreamSensorCommand+0xfc>
				if (StreamMagMGaussToCLI(period, timeout) != H0BR4_OK)
 800bd6e:	9903      	ldr	r1, [sp, #12]
 800bd70:	9802      	ldr	r0, [sp, #8]
 800bd72:	f7ff fe71 	bl	800ba58 <StreamMagMGaussToCLI>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d135      	bne.n	800bde6 <StreamSensorCommand+0x166>
 800bd7a:	e7d8      	b.n	800bd2e <StreamSensorCommand+0xae>
				if (StreamMagMGaussToPort(port, module, period, timeout) != H0BR4_OK)
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	9a02      	ldr	r2, [sp, #8]
 800bd80:	0021      	movs	r1, r4
 800bd82:	9801      	ldr	r0, [sp, #4]
 800bd84:	f7ff fe5e 	bl	800ba44 <StreamMagMGaussToPort>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d12c      	bne.n	800bde6 <StreamSensorCommand+0x166>
 800bd8c:	e7cf      	b.n	800bd2e <StreamSensorCommand+0xae>
		} else if (!strncmp(pSensName, tempCmdName, strlen(tempCmdName))) {
 800bd8e:	2204      	movs	r2, #4
 800bd90:	4926      	ldr	r1, [pc, #152]	; (800be2c <StreamSensorCommand+0x1ac>)
 800bd92:	0030      	movs	r0, r6
 800bd94:	f008 fd24 	bl	80147e0 <strncmp>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d111      	bne.n	800bdc0 <StreamSensorCommand+0x140>
			if (portOrCLI) {
 800bd9c:	2f00      	cmp	r7, #0
 800bd9e:	d006      	beq.n	800bdae <StreamSensorCommand+0x12e>
				if (StreamTempCToCLI(period, timeout) != H0BR4_OK)
 800bda0:	9903      	ldr	r1, [sp, #12]
 800bda2:	9802      	ldr	r0, [sp, #8]
 800bda4:	f7ff ff64 	bl	800bc70 <StreamTempCToCLI>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d11c      	bne.n	800bde6 <StreamSensorCommand+0x166>
 800bdac:	e7bf      	b.n	800bd2e <StreamSensorCommand+0xae>
				if (StreamTempCToPort(port, module, period, timeout) != H0BR4_OK)
 800bdae:	9b03      	ldr	r3, [sp, #12]
 800bdb0:	9a02      	ldr	r2, [sp, #8]
 800bdb2:	0021      	movs	r1, r4
 800bdb4:	9801      	ldr	r0, [sp, #4]
 800bdb6:	f7ff fe57 	bl	800ba68 <StreamTempCToPort>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d113      	bne.n	800bde6 <StreamSensorCommand+0x166>
 800bdbe:	e7b6      	b.n	800bd2e <StreamSensorCommand+0xae>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800bdc0:	4a18      	ldr	r2, [pc, #96]	; (800be24 <StreamSensorCommand+0x1a4>)
 800bdc2:	9900      	ldr	r1, [sp, #0]
 800bdc4:	0028      	movs	r0, r5
 800bdc6:	f008 fc95 	bl	80146f4 <snprintf>
 800bdca:	e7b0      	b.n	800bd2e <StreamSensorCommand+0xae>
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800bdcc:	2204      	movs	r2, #4
 800bdce:	4913      	ldr	r1, [pc, #76]	; (800be1c <StreamSensorCommand+0x19c>)
 800bdd0:	0030      	movs	r0, r6
 800bdd2:	f008 fd05 	bl	80147e0 <strncmp>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d10d      	bne.n	800bdf6 <StreamSensorCommand+0x176>
				if (StreamGyroDPSToCLI(period, timeout) != H0BR4_OK)
 800bdda:	9903      	ldr	r1, [sp, #12]
 800bddc:	9802      	ldr	r0, [sp, #8]
 800bdde:	f7ff fe17 	bl	800ba10 <StreamGyroDPSToCLI>
 800bde2:	2800      	cmp	r0, #0
 800bde4:	d0a3      	beq.n	800bd2e <StreamSensorCommand+0xae>
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
 800bde6:	4a12      	ldr	r2, [pc, #72]	; (800be30 <StreamSensorCommand+0x1b0>)
 800bde8:	9900      	ldr	r1, [sp, #0]
 800bdea:	0028      	movs	r0, r5
 800bdec:	f008 fc82 	bl	80146f4 <snprintf>
}
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	b00b      	add	sp, #44	; 0x2c
 800bdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pPortOrCLI = true;
 800bdf6:	2701      	movs	r7, #1
	uint8_t module = 0;
 800bdf8:	2400      	movs	r4, #0
	uint8_t port = 0;
 800bdfa:	9401      	str	r4, [sp, #4]
		} else if (!strncmp(pSensName, accCmdName, strlen(accCmdName))) {
 800bdfc:	2203      	movs	r2, #3
 800bdfe:	490d      	ldr	r1, [pc, #52]	; (800be34 <StreamSensorCommand+0x1b4>)
 800be00:	0030      	movs	r0, r6
 800be02:	f008 fced 	bl	80147e0 <strncmp>
 800be06:	2800      	cmp	r0, #0
 800be08:	d1a8      	bne.n	800bd5c <StreamSensorCommand+0xdc>
			if (portOrCLI) {
 800be0a:	2f00      	cmp	r7, #0
 800be0c:	d09d      	beq.n	800bd4a <StreamSensorCommand+0xca>
				if (StreamAccGToCLI(period, timeout) != H0BR4_OK)
 800be0e:	9903      	ldr	r1, [sp, #12]
 800be10:	9802      	ldr	r0, [sp, #8]
 800be12:	f7ff fe0f 	bl	800ba34 <StreamAccGToCLI>
 800be16:	2800      	cmp	r0, #0
 800be18:	d1e5      	bne.n	800bde6 <StreamSensorCommand+0x166>
 800be1a:	e788      	b.n	800bd2e <StreamSensorCommand+0xae>
 800be1c:	0801b5d8 	.word	0x0801b5d8
 800be20:	0801a854 	.word	0x0801a854
 800be24:	0801b5c4 	.word	0x0801b5c4
 800be28:	0801b5e4 	.word	0x0801b5e4
 800be2c:	0801b5e8 	.word	0x0801b5e8
 800be30:	0801b5f0 	.word	0x0801b5f0
 800be34:	0801b5e0 	.word	0x0801b5e0

0800be38 <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800be38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be3a:	46de      	mov	lr, fp
 800be3c:	4657      	mov	r7, sl
 800be3e:	464e      	mov	r6, r9
 800be40:	4645      	mov	r5, r8
 800be42:	b5e0      	push	{r5, r6, r7, lr}
 800be44:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800be46:	2215      	movs	r2, #21
 800be48:	2100      	movs	r1, #0
 800be4a:	a802      	add	r0, sp, #8
 800be4c:	f008 fa58 	bl	8014300 <memset>
	
	HAL_FLASH_Unlock();
 800be50:	f005 fc3a 	bl	80116c8 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800be54:	4872      	ldr	r0, [pc, #456]	; (800c020 <SaveToRO+0x1e8>)
 800be56:	f005 fcf9 	bl	801184c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800be5a:	4872      	ldr	r0, [pc, #456]	; (800c024 <SaveToRO+0x1ec>)
 800be5c:	f005 fc50 	bl	8011700 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800be60:	2800      	cmp	r0, #0
 800be62:	d112      	bne.n	800be8a <SaveToRO+0x52>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800be64:	4a70      	ldr	r2, [pc, #448]	; (800c028 <SaveToRO+0x1f0>)
 800be66:	6913      	ldr	r3, [r2, #16]
 800be68:	2102      	movs	r1, #2
 800be6a:	438b      	bics	r3, r1
 800be6c:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800be6e:	4b6f      	ldr	r3, [pc, #444]	; (800c02c <SaveToRO+0x1f4>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d113      	bne.n	800be9e <SaveToRO+0x66>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800be76:	4b6e      	ldr	r3, [pc, #440]	; (800c030 <SaveToRO+0x1f8>)
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d100      	bne.n	800be80 <SaveToRO+0x48>
 800be7e:	e0ca      	b.n	800c016 <SaveToRO+0x1de>
 800be80:	2500      	movs	r5, #0
 800be82:	4c6c      	ldr	r4, [pc, #432]	; (800c034 <SaveToRO+0x1fc>)
	{
		if (snippets[s].cond.conditionType) 
 800be84:	4b6c      	ldr	r3, [pc, #432]	; (800c038 <SaveToRO+0x200>)
 800be86:	4698      	mov	r8, r3
 800be88:	e06e      	b.n	800bf68 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800be8a:	4b6c      	ldr	r3, [pc, #432]	; (800c03c <SaveToRO+0x204>)
 800be8c:	69d8      	ldr	r0, [r3, #28]
 800be8e:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800be90:	b009      	add	sp, #36	; 0x24
 800be92:	bc3c      	pop	{r2, r3, r4, r5}
 800be94:	4690      	mov	r8, r2
 800be96:	4699      	mov	r9, r3
 800be98:	46a2      	mov	sl, r4
 800be9a:	46ab      	mov	fp, r5
 800be9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800be9e:	4a68      	ldr	r2, [pc, #416]	; (800c040 <SaveToRO+0x208>)
 800bea0:	7812      	ldrb	r2, [r2, #0]
 800bea2:	0212      	lsls	r2, r2, #8
 800bea4:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800bea6:	b292      	uxth	r2, r2
 800bea8:	2300      	movs	r3, #0
 800beaa:	495d      	ldr	r1, [pc, #372]	; (800c020 <SaveToRO+0x1e8>)
 800beac:	2001      	movs	r0, #1
 800beae:	f005 fc55 	bl	801175c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800beb2:	485c      	ldr	r0, [pc, #368]	; (800c024 <SaveToRO+0x1ec>)
 800beb4:	f005 fc24 	bl	8011700 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800beb8:	2800      	cmp	r0, #0
 800beba:	d111      	bne.n	800bee0 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bebc:	4a5a      	ldr	r2, [pc, #360]	; (800c028 <SaveToRO+0x1f0>)
 800bebe:	6913      	ldr	r3, [r2, #16]
 800bec0:	2101      	movs	r1, #1
 800bec2:	438b      	bics	r3, r1
 800bec4:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800bec6:	4b5e      	ldr	r3, [pc, #376]	; (800c040 <SaveToRO+0x208>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	2201      	movs	r2, #1
 800becc:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800bece:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d0d0      	beq.n	800be76 <SaveToRO+0x3e>
 800bed4:	2316      	movs	r3, #22
 800bed6:	469b      	mov	fp, r3
 800bed8:	4b5a      	ldr	r3, [pc, #360]	; (800c044 <SaveToRO+0x20c>)
 800beda:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800bedc:	4698      	mov	r8, r3
 800bede:	e02a      	b.n	800bf36 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800bee0:	4b56      	ldr	r3, [pc, #344]	; (800c03c <SaveToRO+0x204>)
 800bee2:	69d8      	ldr	r0, [r3, #28]
 800bee4:	b2c0      	uxtb	r0, r0
 800bee6:	e7d3      	b.n	800be90 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800bee8:	4b54      	ldr	r3, [pc, #336]	; (800c03c <SaveToRO+0x204>)
 800beea:	69d8      	ldr	r0, [r3, #28]
 800beec:	b2c0      	uxtb	r0, r0
 800beee:	e7cf      	b.n	800be90 <SaveToRO+0x58>
 800bef0:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800bef2:	42b4      	cmp	r4, r6
 800bef4:	d017      	beq.n	800bf26 <SaveToRO+0xee>
				if (array[i-1][0]) {
 800bef6:	4643      	mov	r3, r8
 800bef8:	5afb      	ldrh	r3, [r7, r3]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d0f8      	beq.n	800bef0 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800befe:	8822      	ldrh	r2, [r4, #0]
 800bf00:	4b47      	ldr	r3, [pc, #284]	; (800c020 <SaveToRO+0x1e8>)
 800bf02:	18e9      	adds	r1, r5, r3
 800bf04:	2300      	movs	r3, #0
 800bf06:	2001      	movs	r0, #1
 800bf08:	f005 fc28 	bl	801175c <HAL_FLASH_Program>
					add += 2;
 800bf0c:	3502      	adds	r5, #2
 800bf0e:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bf10:	4844      	ldr	r0, [pc, #272]	; (800c024 <SaveToRO+0x1ec>)
 800bf12:	f005 fbf5 	bl	8011700 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d1e6      	bne.n	800bee8 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bf1a:	4a43      	ldr	r2, [pc, #268]	; (800c028 <SaveToRO+0x1f0>)
 800bf1c:	6913      	ldr	r3, [r2, #16]
 800bf1e:	2101      	movs	r1, #1
 800bf20:	438b      	bics	r3, r1
 800bf22:	6113      	str	r3, [r2, #16]
 800bf24:	e7e4      	b.n	800bef0 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800bf26:	464b      	mov	r3, r9
 800bf28:	3301      	adds	r3, #1
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	4699      	mov	r9, r3
 800bf2e:	4b44      	ldr	r3, [pc, #272]	; (800c040 <SaveToRO+0x208>)
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	454b      	cmp	r3, r9
 800bf34:	d39f      	bcc.n	800be76 <SaveToRO+0x3e>
 800bf36:	465e      	mov	r6, fp
 800bf38:	464b      	mov	r3, r9
 800bf3a:	435e      	muls	r6, r3
 800bf3c:	0034      	movs	r4, r6
 800bf3e:	3c16      	subs	r4, #22
 800bf40:	4454      	add	r4, sl
 800bf42:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800bf44:	1e5f      	subs	r7, r3, #1
 800bf46:	465b      	mov	r3, fp
 800bf48:	435f      	muls	r7, r3
 800bf4a:	e7d4      	b.n	800bef6 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800bf4c:	4b3b      	ldr	r3, [pc, #236]	; (800c03c <SaveToRO+0x204>)
 800bf4e:	69d8      	ldr	r0, [r3, #28]
 800bf50:	b2c0      	uxtb	r0, r0
 800bf52:	e79d      	b.n	800be90 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800bf54:	4b39      	ldr	r3, [pc, #228]	; (800c03c <SaveToRO+0x204>)
 800bf56:	69d8      	ldr	r0, [r3, #28]
 800bf58:	b2c0      	uxtb	r0, r0
 800bf5a:	e799      	b.n	800be90 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800bf5c:	3501      	adds	r5, #1
 800bf5e:	b2ed      	uxtb	r5, r5
 800bf60:	4b33      	ldr	r3, [pc, #204]	; (800c030 <SaveToRO+0x1f8>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	42ab      	cmp	r3, r5
 800bf66:	d956      	bls.n	800c016 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) 
 800bf68:	9501      	str	r5, [sp, #4]
 800bf6a:	00ab      	lsls	r3, r5, #2
 800bf6c:	195b      	adds	r3, r3, r5
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4642      	mov	r2, r8
 800bf72:	5c9b      	ldrb	r3, [r3, r2]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d0f1      	beq.n	800bf5c <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800bf78:	23fe      	movs	r3, #254	; 0xfe
 800bf7a:	aa02      	add	r2, sp, #8
 800bf7c:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800bf7e:	00a9      	lsls	r1, r5, #2
 800bf80:	1949      	adds	r1, r1, r5
 800bf82:	0089      	lsls	r1, r1, #2
 800bf84:	4b2c      	ldr	r3, [pc, #176]	; (800c038 <SaveToRO+0x200>)
 800bf86:	469c      	mov	ip, r3
 800bf88:	4461      	add	r1, ip
 800bf8a:	2214      	movs	r2, #20
 800bf8c:	ab02      	add	r3, sp, #8
 800bf8e:	1c58      	adds	r0, r3, #1
 800bf90:	f008 f9ad 	bl	80142ee <memcpy>
 800bf94:	2314      	movs	r3, #20
 800bf96:	469b      	mov	fp, r3
 800bf98:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800bf9a:	ae02      	add	r6, sp, #8
 800bf9c:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bf9e:	4f22      	ldr	r7, [pc, #136]	; (800c028 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800bfa0:	5b32      	ldrh	r2, [r6, r4]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	0021      	movs	r1, r4
 800bfa6:	2001      	movs	r0, #1
 800bfa8:	f005 fbd8 	bl	801175c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bfac:	481d      	ldr	r0, [pc, #116]	; (800c024 <SaveToRO+0x1ec>)
 800bfae:	f005 fba7 	bl	8011700 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d1ca      	bne.n	800bf4c <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	4393      	bics	r3, r2
 800bfbc:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800bfbe:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800bfc0:	455c      	cmp	r4, fp
 800bfc2:	d1ed      	bne.n	800bfa0 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800bfc4:	2700      	movs	r7, #0
 800bfc6:	9a01      	ldr	r2, [sp, #4]
 800bfc8:	0093      	lsls	r3, r2, #2
 800bfca:	189e      	adds	r6, r3, r2
 800bfcc:	00b6      	lsls	r6, r6, #2
 800bfce:	4b1a      	ldr	r3, [pc, #104]	; (800c038 <SaveToRO+0x200>)
 800bfd0:	469a      	mov	sl, r3
 800bfd2:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800bfd4:	4b14      	ldr	r3, [pc, #80]	; (800c028 <SaveToRO+0x1f0>)
 800bfd6:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800bfd8:	4653      	mov	r3, sl
 800bfda:	68de      	ldr	r6, [r3, #12]
 800bfdc:	0030      	movs	r0, r6
 800bfde:	f7f4 f89b 	bl	8000118 <strlen>
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	0840      	lsrs	r0, r0, #1
 800bfe6:	4287      	cmp	r7, r0
 800bfe8:	d2b8      	bcs.n	800bf5c <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800bfea:	007b      	lsls	r3, r7, #1
 800bfec:	5af2      	ldrh	r2, [r6, r3]
 800bfee:	2300      	movs	r3, #0
 800bff0:	0021      	movs	r1, r4
 800bff2:	2001      	movs	r0, #1
 800bff4:	f005 fbb2 	bl	801175c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bff8:	480a      	ldr	r0, [pc, #40]	; (800c024 <SaveToRO+0x1ec>)
 800bffa:	f005 fb81 	bl	8011700 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800bffe:	2800      	cmp	r0, #0
 800c000:	d1a8      	bne.n	800bf54 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c002:	465b      	mov	r3, fp
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	2201      	movs	r2, #1
 800c008:	4393      	bics	r3, r2
 800c00a:	465a      	mov	r2, fp
 800c00c:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800c00e:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c010:	3701      	adds	r7, #1
 800c012:	b2ff      	uxtb	r7, r7
 800c014:	e7e0      	b.n	800bfd8 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800c016:	f005 fb69 	bl	80116ec <HAL_FLASH_Lock>
	return result;
 800c01a:	2000      	movs	r0, #0
 800c01c:	e738      	b.n	800be90 <SaveToRO+0x58>
 800c01e:	46c0      	nop			; (mov r8, r8)
 800c020:	0801d800 	.word	0x0801d800
 800c024:	0000c350 	.word	0x0000c350
 800c028:	40022000 	.word	0x40022000
 800c02c:	200010e4 	.word	0x200010e4
 800c030:	2000128b 	.word	0x2000128b
 800c034:	0801dc00 	.word	0x0801dc00
 800c038:	20006a34 	.word	0x20006a34
 800c03c:	20006ef8 	.word	0x20006ef8
 800c040:	2000001c 	.word	0x2000001c
 800c044:	20000b08 	.word	0x20000b08

0800c048 <ClearROtopology>:
/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
 800c048:	b510      	push	{r4, lr}
	// Clear the array 
	memset(array, 0, sizeof(array));
 800c04a:	4a07      	ldr	r2, [pc, #28]	; (800c068 <ClearROtopology+0x20>)
 800c04c:	2100      	movs	r1, #0
 800c04e:	4807      	ldr	r0, [pc, #28]	; (800c06c <ClearROtopology+0x24>)
 800c050:	f008 f956 	bl	8014300 <memset>
	N = 1; myID = 0;
 800c054:	4b06      	ldr	r3, [pc, #24]	; (800c070 <ClearROtopology+0x28>)
 800c056:	2201      	movs	r2, #1
 800c058:	701a      	strb	r2, [r3, #0]
 800c05a:	4b06      	ldr	r3, [pc, #24]	; (800c074 <ClearROtopology+0x2c>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800c060:	f7ff feea 	bl	800be38 <SaveToRO>
}
 800c064:	bd10      	pop	{r4, pc}
 800c066:	46c0      	nop			; (mov r8, r8)
 800c068:	00000226 	.word	0x00000226
 800c06c:	20000b08 	.word	0x20000b08
 800c070:	2000001c 	.word	0x2000001c
 800c074:	200010e4 	.word	0x200010e4

0800c078 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c078:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c07a:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c07c:	2300      	movs	r3, #0
 800c07e:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c080:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c082:	2280      	movs	r2, #128	; 0x80
 800c084:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c086:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c088:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c08a:	3320      	adds	r3, #32
 800c08c:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c08e:	2380      	movs	r3, #128	; 0x80
 800c090:	019b      	lsls	r3, r3, #6
 800c092:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c094:	f004 fe20 	bl	8010cd8 <HAL_DMA_Init>
}
 800c098:	bd10      	pop	{r4, pc}

0800c09a <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c09a:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c09c:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c09e:	2310      	movs	r3, #16
 800c0a0:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c0a6:	2280      	movs	r2, #128	; 0x80
 800c0a8:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c0aa:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c0ac:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c0ae:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c0b0:	2380      	movs	r3, #128	; 0x80
 800c0b2:	019b      	lsls	r3, r3, #6
 800c0b4:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c0b6:	f004 fe0f 	bl	8010cd8 <HAL_DMA_Init>
}
 800c0ba:	bd10      	pop	{r4, pc}

0800c0bc <DMA_Init>:
{
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800c0c0:	4b20      	ldr	r3, [pc, #128]	; (800c144 <DMA_Init+0x88>)
 800c0c2:	6959      	ldr	r1, [r3, #20]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	4311      	orrs	r1, r2
 800c0c8:	6159      	str	r1, [r3, #20]
 800c0ca:	6959      	ldr	r1, [r3, #20]
 800c0cc:	400a      	ands	r2, r1
 800c0ce:	9200      	str	r2, [sp, #0]
 800c0d0:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800c0d2:	6959      	ldr	r1, [r3, #20]
 800c0d4:	2202      	movs	r2, #2
 800c0d6:	4311      	orrs	r1, r2
 800c0d8:	6159      	str	r1, [r3, #20]
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	401a      	ands	r2, r3
 800c0de:	9201      	str	r2, [sp, #4]
 800c0e0:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800c0e2:	4c19      	ldr	r4, [pc, #100]	; (800c148 <DMA_Init+0x8c>)
 800c0e4:	4919      	ldr	r1, [pc, #100]	; (800c14c <DMA_Init+0x90>)
 800c0e6:	0020      	movs	r0, r4
 800c0e8:	f7ff ffc6 	bl	800c078 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800c0ec:	0020      	movs	r0, r4
 800c0ee:	3038      	adds	r0, #56	; 0x38
 800c0f0:	4917      	ldr	r1, [pc, #92]	; (800c150 <DMA_Init+0x94>)
 800c0f2:	f7ff ffc1 	bl	800c078 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800c0f6:	0020      	movs	r0, r4
 800c0f8:	3070      	adds	r0, #112	; 0x70
 800c0fa:	4916      	ldr	r1, [pc, #88]	; (800c154 <DMA_Init+0x98>)
 800c0fc:	f7ff ffbc 	bl	800c078 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800c100:	0020      	movs	r0, r4
 800c102:	30a8      	adds	r0, #168	; 0xa8
 800c104:	4914      	ldr	r1, [pc, #80]	; (800c158 <DMA_Init+0x9c>)
 800c106:	f7ff ffb7 	bl	800c078 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800c10a:	0020      	movs	r0, r4
 800c10c:	30e0      	adds	r0, #224	; 0xe0
 800c10e:	4913      	ldr	r1, [pc, #76]	; (800c15c <DMA_Init+0xa0>)
 800c110:	f7ff ffb2 	bl	800c078 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800c114:	0020      	movs	r0, r4
 800c116:	3019      	adds	r0, #25
 800c118:	30ff      	adds	r0, #255	; 0xff
 800c11a:	4911      	ldr	r1, [pc, #68]	; (800c160 <DMA_Init+0xa4>)
 800c11c:	f7ff ffac 	bl	800c078 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800c120:	4c10      	ldr	r4, [pc, #64]	; (800c164 <DMA_Init+0xa8>)
 800c122:	4911      	ldr	r1, [pc, #68]	; (800c168 <DMA_Init+0xac>)
 800c124:	0020      	movs	r0, r4
 800c126:	f7ff ffb8 	bl	800c09a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800c12a:	0020      	movs	r0, r4
 800c12c:	3038      	adds	r0, #56	; 0x38
 800c12e:	490f      	ldr	r1, [pc, #60]	; (800c16c <DMA_Init+0xb0>)
 800c130:	f7ff ffb3 	bl	800c09a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800c134:	0020      	movs	r0, r4
 800c136:	3070      	adds	r0, #112	; 0x70
 800c138:	490d      	ldr	r1, [pc, #52]	; (800c170 <DMA_Init+0xb4>)
 800c13a:	f7ff ffae 	bl	800c09a <DMA_MSG_TX_CH_Init>
}
 800c13e:	b002      	add	sp, #8
 800c140:	bd10      	pop	{r4, pc}
 800c142:	46c0      	nop			; (mov r8, r8)
 800c144:	40021000 	.word	0x40021000
 800c148:	200017f0 	.word	0x200017f0
 800c14c:	40020008 	.word	0x40020008
 800c150:	40020030 	.word	0x40020030
 800c154:	40020058 	.word	0x40020058
 800c158:	4002006c 	.word	0x4002006c
 800c15c:	4002041c 	.word	0x4002041c
 800c160:	40020430 	.word	0x40020430
 800c164:	20001940 	.word	0x20001940
 800c168:	4002001c 	.word	0x4002001c
 800c16c:	40020044 	.word	0x40020044
 800c170:	40020080 	.word	0x40020080

0800c174 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c174:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c176:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c178:	2300      	movs	r3, #0
 800c17a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c17c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800c17e:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c180:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c182:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c184:	3320      	adds	r3, #32
 800c186:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800c188:	2380      	movs	r3, #128	; 0x80
 800c18a:	015b      	lsls	r3, r3, #5
 800c18c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c18e:	f004 fda3 	bl	8010cd8 <HAL_DMA_Init>
}
 800c192:	bd10      	pop	{r4, pc}

0800c194 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800c194:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c196:	6803      	ldr	r3, [r0, #0]
 800c198:	4a20      	ldr	r2, [pc, #128]	; (800c21c <SetupDMAInterrupts+0x88>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d020      	beq.n	800c1e0 <SetupDMAInterrupts+0x4c>
 800c19e:	d827      	bhi.n	800c1f0 <SetupDMAInterrupts+0x5c>
 800c1a0:	4a1f      	ldr	r2, [pc, #124]	; (800c220 <SetupDMAInterrupts+0x8c>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d00e      	beq.n	800c1c4 <SetupDMAInterrupts+0x30>
 800c1a6:	d815      	bhi.n	800c1d4 <SetupDMAInterrupts+0x40>
 800c1a8:	4a1e      	ldr	r2, [pc, #120]	; (800c224 <SetupDMAInterrupts+0x90>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d107      	bne.n	800c1be <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	2009      	movs	r0, #9
 800c1b2:	f004 fbf3 	bl	801099c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800c1b6:	2009      	movs	r0, #9
 800c1b8:	f004 fc24 	bl	8010a04 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c1bc:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c1be:	4a1a      	ldr	r2, [pc, #104]	; (800c228 <SetupDMAInterrupts+0x94>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d1fb      	bne.n	800c1bc <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	200a      	movs	r0, #10
 800c1c8:	f004 fbe8 	bl	801099c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c1cc:	200a      	movs	r0, #10
 800c1ce:	f004 fc19 	bl	8010a04 <HAL_NVIC_EnableIRQ>
			break;
 800c1d2:	e7f3      	b.n	800c1bc <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800c1d4:	4a15      	ldr	r2, [pc, #84]	; (800c22c <SetupDMAInterrupts+0x98>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d002      	beq.n	800c1e0 <SetupDMAInterrupts+0x4c>
 800c1da:	4a15      	ldr	r2, [pc, #84]	; (800c230 <SetupDMAInterrupts+0x9c>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d1ed      	bne.n	800c1bc <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	200b      	movs	r0, #11
 800c1e4:	f004 fbda 	bl	801099c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c1e8:	200b      	movs	r0, #11
 800c1ea:	f004 fc0b 	bl	8010a04 <HAL_NVIC_EnableIRQ>
}
 800c1ee:	e7e5      	b.n	800c1bc <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800c1f0:	4a10      	ldr	r2, [pc, #64]	; (800c234 <SetupDMAInterrupts+0xa0>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d0e6      	beq.n	800c1c4 <SetupDMAInterrupts+0x30>
 800c1f6:	d909      	bls.n	800c20c <SetupDMAInterrupts+0x78>
 800c1f8:	4a0f      	ldr	r2, [pc, #60]	; (800c238 <SetupDMAInterrupts+0xa4>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d0f0      	beq.n	800c1e0 <SetupDMAInterrupts+0x4c>
 800c1fe:	4a0f      	ldr	r2, [pc, #60]	; (800c23c <SetupDMAInterrupts+0xa8>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d0ed      	beq.n	800c1e0 <SetupDMAInterrupts+0x4c>
 800c204:	4a0e      	ldr	r2, [pc, #56]	; (800c240 <SetupDMAInterrupts+0xac>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d1d8      	bne.n	800c1bc <SetupDMAInterrupts+0x28>
 800c20a:	e7e9      	b.n	800c1e0 <SetupDMAInterrupts+0x4c>
 800c20c:	4a0d      	ldr	r2, [pc, #52]	; (800c244 <SetupDMAInterrupts+0xb0>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d0e6      	beq.n	800c1e0 <SetupDMAInterrupts+0x4c>
 800c212:	4a0d      	ldr	r2, [pc, #52]	; (800c248 <SetupDMAInterrupts+0xb4>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d0d5      	beq.n	800c1c4 <SetupDMAInterrupts+0x30>
 800c218:	e7d0      	b.n	800c1bc <SetupDMAInterrupts+0x28>
 800c21a:	46c0      	nop			; (mov r8, r8)
 800c21c:	4002006c 	.word	0x4002006c
 800c220:	40020030 	.word	0x40020030
 800c224:	40020008 	.word	0x40020008
 800c228:	4002001c 	.word	0x4002001c
 800c22c:	40020044 	.word	0x40020044
 800c230:	40020058 	.word	0x40020058
 800c234:	4002041c 	.word	0x4002041c
 800c238:	40020444 	.word	0x40020444
 800c23c:	40020458 	.word	0x40020458
 800c240:	40020430 	.word	0x40020430
 800c244:	40020080 	.word	0x40020080
 800c248:	40020408 	.word	0x40020408

0800c24c <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800c24c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c24e:	6803      	ldr	r3, [r0, #0]
 800c250:	4a1a      	ldr	r2, [pc, #104]	; (800c2bc <UnSetupDMAInterrupts+0x70>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d018      	beq.n	800c288 <UnSetupDMAInterrupts+0x3c>
 800c256:	d81b      	bhi.n	800c290 <UnSetupDMAInterrupts+0x44>
 800c258:	4a19      	ldr	r2, [pc, #100]	; (800c2c0 <UnSetupDMAInterrupts+0x74>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d00a      	beq.n	800c274 <UnSetupDMAInterrupts+0x28>
 800c25e:	d80d      	bhi.n	800c27c <UnSetupDMAInterrupts+0x30>
 800c260:	4a18      	ldr	r2, [pc, #96]	; (800c2c4 <UnSetupDMAInterrupts+0x78>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d103      	bne.n	800c26e <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800c266:	2009      	movs	r0, #9
 800c268:	f004 fbd6 	bl	8010a18 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c26c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c26e:	4a16      	ldr	r2, [pc, #88]	; (800c2c8 <UnSetupDMAInterrupts+0x7c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d1fb      	bne.n	800c26c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c274:	200a      	movs	r0, #10
 800c276:	f004 fbcf 	bl	8010a18 <HAL_NVIC_DisableIRQ>
			break;
 800c27a:	e7f7      	b.n	800c26c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800c27c:	4a13      	ldr	r2, [pc, #76]	; (800c2cc <UnSetupDMAInterrupts+0x80>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d002      	beq.n	800c288 <UnSetupDMAInterrupts+0x3c>
 800c282:	4a13      	ldr	r2, [pc, #76]	; (800c2d0 <UnSetupDMAInterrupts+0x84>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d1f1      	bne.n	800c26c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c288:	200b      	movs	r0, #11
 800c28a:	f004 fbc5 	bl	8010a18 <HAL_NVIC_DisableIRQ>
}
 800c28e:	e7ed      	b.n	800c26c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800c290:	4a10      	ldr	r2, [pc, #64]	; (800c2d4 <UnSetupDMAInterrupts+0x88>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d0ee      	beq.n	800c274 <UnSetupDMAInterrupts+0x28>
 800c296:	d909      	bls.n	800c2ac <UnSetupDMAInterrupts+0x60>
 800c298:	4a0f      	ldr	r2, [pc, #60]	; (800c2d8 <UnSetupDMAInterrupts+0x8c>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d0f4      	beq.n	800c288 <UnSetupDMAInterrupts+0x3c>
 800c29e:	4a0f      	ldr	r2, [pc, #60]	; (800c2dc <UnSetupDMAInterrupts+0x90>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d0f1      	beq.n	800c288 <UnSetupDMAInterrupts+0x3c>
 800c2a4:	4a0e      	ldr	r2, [pc, #56]	; (800c2e0 <UnSetupDMAInterrupts+0x94>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d1e0      	bne.n	800c26c <UnSetupDMAInterrupts+0x20>
 800c2aa:	e7ed      	b.n	800c288 <UnSetupDMAInterrupts+0x3c>
 800c2ac:	4a0d      	ldr	r2, [pc, #52]	; (800c2e4 <UnSetupDMAInterrupts+0x98>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d0ea      	beq.n	800c288 <UnSetupDMAInterrupts+0x3c>
 800c2b2:	4a0d      	ldr	r2, [pc, #52]	; (800c2e8 <UnSetupDMAInterrupts+0x9c>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d0dd      	beq.n	800c274 <UnSetupDMAInterrupts+0x28>
 800c2b8:	e7d8      	b.n	800c26c <UnSetupDMAInterrupts+0x20>
 800c2ba:	46c0      	nop			; (mov r8, r8)
 800c2bc:	4002006c 	.word	0x4002006c
 800c2c0:	40020030 	.word	0x40020030
 800c2c4:	40020008 	.word	0x40020008
 800c2c8:	4002001c 	.word	0x4002001c
 800c2cc:	40020044 	.word	0x40020044
 800c2d0:	40020058 	.word	0x40020058
 800c2d4:	4002041c 	.word	0x4002041c
 800c2d8:	40020444 	.word	0x40020444
 800c2dc:	40020458 	.word	0x40020458
 800c2e0:	40020430 	.word	0x40020430
 800c2e4:	40020080 	.word	0x40020080
 800c2e8:	40020408 	.word	0x40020408

0800c2ec <DMA_MSG_TX_UnSetup>:
{	
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800c2f0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c2f2:	f7ff ffab 	bl	800c24c <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800c2f6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800c2fc:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c2fe:	bd10      	pop	{r4, pc}

0800c300 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c300:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c302:	6803      	ldr	r3, [r0, #0]
 800c304:	4abd      	ldr	r2, [pc, #756]	; (800c5fc <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d02f      	beq.n	800c36a <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c30a:	4abd      	ldr	r2, [pc, #756]	; (800c600 <RemapAndLinkDMAtoUARTRx+0x300>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d100      	bne.n	800c312 <RemapAndLinkDMAtoUARTRx+0x12>
 800c310:	e087      	b.n	800c422 <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c312:	4abc      	ldr	r2, [pc, #752]	; (800c604 <RemapAndLinkDMAtoUARTRx+0x304>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d100      	bne.n	800c31a <RemapAndLinkDMAtoUARTRx+0x1a>
 800c318:	e0dc      	b.n	800c4d4 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c31a:	4abb      	ldr	r2, [pc, #748]	; (800c608 <RemapAndLinkDMAtoUARTRx+0x308>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d000      	beq.n	800c322 <RemapAndLinkDMAtoUARTRx+0x22>
 800c320:	e18a      	b.n	800c638 <RemapAndLinkDMAtoUARTRx+0x338>
 800c322:	680b      	ldr	r3, [r1, #0]
 800c324:	4ab9      	ldr	r2, [pc, #740]	; (800c60c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d100      	bne.n	800c32c <RemapAndLinkDMAtoUARTRx+0x2c>
 800c32a:	e12d      	b.n	800c588 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c32c:	4ab8      	ldr	r2, [pc, #736]	; (800c610 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d100      	bne.n	800c334 <RemapAndLinkDMAtoUARTRx+0x34>
 800c332:	e134      	b.n	800c59e <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c334:	4ab7      	ldr	r2, [pc, #732]	; (800c614 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d100      	bne.n	800c33c <RemapAndLinkDMAtoUARTRx+0x3c>
 800c33a:	e13c      	b.n	800c5b6 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c33c:	4ab6      	ldr	r2, [pc, #728]	; (800c618 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d100      	bne.n	800c344 <RemapAndLinkDMAtoUARTRx+0x44>
 800c342:	e144      	b.n	800c5ce <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c344:	4ab5      	ldr	r2, [pc, #724]	; (800c61c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d100      	bne.n	800c34c <RemapAndLinkDMAtoUARTRx+0x4c>
 800c34a:	e14c      	b.n	800c5e6 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c34c:	4ab4      	ldr	r2, [pc, #720]	; (800c620 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d11e      	bne.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c352:	4ab4      	ldr	r2, [pc, #720]	; (800c624 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c354:	23a8      	movs	r3, #168	; 0xa8
 800c356:	58d4      	ldr	r4, [r2, r3]
 800c358:	4db3      	ldr	r5, [pc, #716]	; (800c628 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c35a:	402c      	ands	r4, r5
 800c35c:	50d4      	str	r4, [r2, r3]
 800c35e:	58d5      	ldr	r5, [r2, r3]
 800c360:	24b0      	movs	r4, #176	; 0xb0
 800c362:	0124      	lsls	r4, r4, #4
 800c364:	432c      	orrs	r4, r5
 800c366:	50d4      	str	r4, [r2, r3]
 800c368:	e012      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c36a:	680b      	ldr	r3, [r1, #0]
 800c36c:	4aa7      	ldr	r2, [pc, #668]	; (800c60c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d011      	beq.n	800c396 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c372:	4aa7      	ldr	r2, [pc, #668]	; (800c610 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d019      	beq.n	800c3ac <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c378:	4aa6      	ldr	r2, [pc, #664]	; (800c614 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d022      	beq.n	800c3c4 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c37e:	4aa6      	ldr	r2, [pc, #664]	; (800c618 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d02b      	beq.n	800c3dc <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c384:	4aa5      	ldr	r2, [pc, #660]	; (800c61c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d034      	beq.n	800c3f4 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c38a:	4aa5      	ldr	r2, [pc, #660]	; (800c620 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d03c      	beq.n	800c40a <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c390:	6641      	str	r1, [r0, #100]	; 0x64
 800c392:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c394:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c396:	4aa5      	ldr	r2, [pc, #660]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c398:	23a8      	movs	r3, #168	; 0xa8
 800c39a:	58d4      	ldr	r4, [r2, r3]
 800c39c:	250f      	movs	r5, #15
 800c39e:	43ac      	bics	r4, r5
 800c3a0:	50d4      	str	r4, [r2, r3]
 800c3a2:	58d4      	ldr	r4, [r2, r3]
 800c3a4:	3d07      	subs	r5, #7
 800c3a6:	432c      	orrs	r4, r5
 800c3a8:	50d4      	str	r4, [r2, r3]
 800c3aa:	e7f1      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c3ac:	4a9f      	ldr	r2, [pc, #636]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c3ae:	23a8      	movs	r3, #168	; 0xa8
 800c3b0:	58d4      	ldr	r4, [r2, r3]
 800c3b2:	4d9d      	ldr	r5, [pc, #628]	; (800c628 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c3b4:	402c      	ands	r4, r5
 800c3b6:	50d4      	str	r4, [r2, r3]
 800c3b8:	58d5      	ldr	r5, [r2, r3]
 800c3ba:	2480      	movs	r4, #128	; 0x80
 800c3bc:	0124      	lsls	r4, r4, #4
 800c3be:	432c      	orrs	r4, r5
 800c3c0:	50d4      	str	r4, [r2, r3]
 800c3c2:	e7e5      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c3c4:	4a99      	ldr	r2, [pc, #612]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c3c6:	23a8      	movs	r3, #168	; 0xa8
 800c3c8:	58d4      	ldr	r4, [r2, r3]
 800c3ca:	4d99      	ldr	r5, [pc, #612]	; (800c630 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c3cc:	402c      	ands	r4, r5
 800c3ce:	50d4      	str	r4, [r2, r3]
 800c3d0:	58d5      	ldr	r5, [r2, r3]
 800c3d2:	2480      	movs	r4, #128	; 0x80
 800c3d4:	0324      	lsls	r4, r4, #12
 800c3d6:	432c      	orrs	r4, r5
 800c3d8:	50d4      	str	r4, [r2, r3]
 800c3da:	e7d9      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c3dc:	4a93      	ldr	r2, [pc, #588]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c3de:	23a8      	movs	r3, #168	; 0xa8
 800c3e0:	58d4      	ldr	r4, [r2, r3]
 800c3e2:	4d94      	ldr	r5, [pc, #592]	; (800c634 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c3e4:	402c      	ands	r4, r5
 800c3e6:	50d4      	str	r4, [r2, r3]
 800c3e8:	58d5      	ldr	r5, [r2, r3]
 800c3ea:	2480      	movs	r4, #128	; 0x80
 800c3ec:	0424      	lsls	r4, r4, #16
 800c3ee:	432c      	orrs	r4, r5
 800c3f0:	50d4      	str	r4, [r2, r3]
 800c3f2:	e7cd      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c3f4:	4a8b      	ldr	r2, [pc, #556]	; (800c624 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c3f6:	23a8      	movs	r3, #168	; 0xa8
 800c3f8:	58d4      	ldr	r4, [r2, r3]
 800c3fa:	25f0      	movs	r5, #240	; 0xf0
 800c3fc:	43ac      	bics	r4, r5
 800c3fe:	50d4      	str	r4, [r2, r3]
 800c400:	58d4      	ldr	r4, [r2, r3]
 800c402:	3d70      	subs	r5, #112	; 0x70
 800c404:	432c      	orrs	r4, r5
 800c406:	50d4      	str	r4, [r2, r3]
 800c408:	e7c2      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c40a:	4a86      	ldr	r2, [pc, #536]	; (800c624 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c40c:	23a8      	movs	r3, #168	; 0xa8
 800c40e:	58d4      	ldr	r4, [r2, r3]
 800c410:	4d85      	ldr	r5, [pc, #532]	; (800c628 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c412:	402c      	ands	r4, r5
 800c414:	50d4      	str	r4, [r2, r3]
 800c416:	58d5      	ldr	r5, [r2, r3]
 800c418:	2480      	movs	r4, #128	; 0x80
 800c41a:	0124      	lsls	r4, r4, #4
 800c41c:	432c      	orrs	r4, r5
 800c41e:	50d4      	str	r4, [r2, r3]
 800c420:	e7b6      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c422:	680b      	ldr	r3, [r1, #0]
 800c424:	4a79      	ldr	r2, [pc, #484]	; (800c60c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d01a      	beq.n	800c460 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c42a:	4a79      	ldr	r2, [pc, #484]	; (800c610 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d022      	beq.n	800c476 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c430:	4a78      	ldr	r2, [pc, #480]	; (800c614 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d02b      	beq.n	800c48e <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c436:	4a78      	ldr	r2, [pc, #480]	; (800c618 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d034      	beq.n	800c4a6 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c43c:	4a77      	ldr	r2, [pc, #476]	; (800c61c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d03d      	beq.n	800c4be <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c442:	4a77      	ldr	r2, [pc, #476]	; (800c620 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d1a3      	bne.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c448:	4a76      	ldr	r2, [pc, #472]	; (800c624 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c44a:	23a8      	movs	r3, #168	; 0xa8
 800c44c:	58d4      	ldr	r4, [r2, r3]
 800c44e:	4d76      	ldr	r5, [pc, #472]	; (800c628 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c450:	402c      	ands	r4, r5
 800c452:	50d4      	str	r4, [r2, r3]
 800c454:	58d5      	ldr	r5, [r2, r3]
 800c456:	2490      	movs	r4, #144	; 0x90
 800c458:	0124      	lsls	r4, r4, #4
 800c45a:	432c      	orrs	r4, r5
 800c45c:	50d4      	str	r4, [r2, r3]
 800c45e:	e797      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800c460:	4a72      	ldr	r2, [pc, #456]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c462:	23a8      	movs	r3, #168	; 0xa8
 800c464:	58d4      	ldr	r4, [r2, r3]
 800c466:	250f      	movs	r5, #15
 800c468:	43ac      	bics	r4, r5
 800c46a:	50d4      	str	r4, [r2, r3]
 800c46c:	58d4      	ldr	r4, [r2, r3]
 800c46e:	3d06      	subs	r5, #6
 800c470:	432c      	orrs	r4, r5
 800c472:	50d4      	str	r4, [r2, r3]
 800c474:	e78c      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800c476:	4a6d      	ldr	r2, [pc, #436]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c478:	23a8      	movs	r3, #168	; 0xa8
 800c47a:	58d4      	ldr	r4, [r2, r3]
 800c47c:	4d6a      	ldr	r5, [pc, #424]	; (800c628 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c47e:	402c      	ands	r4, r5
 800c480:	50d4      	str	r4, [r2, r3]
 800c482:	58d5      	ldr	r5, [r2, r3]
 800c484:	2490      	movs	r4, #144	; 0x90
 800c486:	0124      	lsls	r4, r4, #4
 800c488:	432c      	orrs	r4, r5
 800c48a:	50d4      	str	r4, [r2, r3]
 800c48c:	e780      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800c48e:	4a67      	ldr	r2, [pc, #412]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c490:	23a8      	movs	r3, #168	; 0xa8
 800c492:	58d4      	ldr	r4, [r2, r3]
 800c494:	4d66      	ldr	r5, [pc, #408]	; (800c630 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c496:	402c      	ands	r4, r5
 800c498:	50d4      	str	r4, [r2, r3]
 800c49a:	58d5      	ldr	r5, [r2, r3]
 800c49c:	2490      	movs	r4, #144	; 0x90
 800c49e:	0324      	lsls	r4, r4, #12
 800c4a0:	432c      	orrs	r4, r5
 800c4a2:	50d4      	str	r4, [r2, r3]
 800c4a4:	e774      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800c4a6:	4a61      	ldr	r2, [pc, #388]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c4a8:	23a8      	movs	r3, #168	; 0xa8
 800c4aa:	58d4      	ldr	r4, [r2, r3]
 800c4ac:	4d61      	ldr	r5, [pc, #388]	; (800c634 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c4ae:	402c      	ands	r4, r5
 800c4b0:	50d4      	str	r4, [r2, r3]
 800c4b2:	58d5      	ldr	r5, [r2, r3]
 800c4b4:	2490      	movs	r4, #144	; 0x90
 800c4b6:	0424      	lsls	r4, r4, #16
 800c4b8:	432c      	orrs	r4, r5
 800c4ba:	50d4      	str	r4, [r2, r3]
 800c4bc:	e768      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800c4be:	4a59      	ldr	r2, [pc, #356]	; (800c624 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c4c0:	23a8      	movs	r3, #168	; 0xa8
 800c4c2:	58d4      	ldr	r4, [r2, r3]
 800c4c4:	25f0      	movs	r5, #240	; 0xf0
 800c4c6:	43ac      	bics	r4, r5
 800c4c8:	50d4      	str	r4, [r2, r3]
 800c4ca:	58d4      	ldr	r4, [r2, r3]
 800c4cc:	3d60      	subs	r5, #96	; 0x60
 800c4ce:	432c      	orrs	r4, r5
 800c4d0:	50d4      	str	r4, [r2, r3]
 800c4d2:	e75d      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c4d4:	680b      	ldr	r3, [r1, #0]
 800c4d6:	4a4d      	ldr	r2, [pc, #308]	; (800c60c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d01b      	beq.n	800c514 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c4dc:	4a4c      	ldr	r2, [pc, #304]	; (800c610 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d023      	beq.n	800c52a <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c4e2:	4a4c      	ldr	r2, [pc, #304]	; (800c614 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d02c      	beq.n	800c542 <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c4e8:	4a4b      	ldr	r2, [pc, #300]	; (800c618 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d035      	beq.n	800c55a <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c4ee:	4a4b      	ldr	r2, [pc, #300]	; (800c61c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d03e      	beq.n	800c572 <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c4f4:	4a4a      	ldr	r2, [pc, #296]	; (800c620 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d000      	beq.n	800c4fc <RemapAndLinkDMAtoUARTRx+0x1fc>
 800c4fa:	e749      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c4fc:	4a49      	ldr	r2, [pc, #292]	; (800c624 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c4fe:	23a8      	movs	r3, #168	; 0xa8
 800c500:	58d4      	ldr	r4, [r2, r3]
 800c502:	4d49      	ldr	r5, [pc, #292]	; (800c628 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c504:	402c      	ands	r4, r5
 800c506:	50d4      	str	r4, [r2, r3]
 800c508:	58d5      	ldr	r5, [r2, r3]
 800c50a:	24a0      	movs	r4, #160	; 0xa0
 800c50c:	0124      	lsls	r4, r4, #4
 800c50e:	432c      	orrs	r4, r5
 800c510:	50d4      	str	r4, [r2, r3]
 800c512:	e73d      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800c514:	4a45      	ldr	r2, [pc, #276]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c516:	23a8      	movs	r3, #168	; 0xa8
 800c518:	58d4      	ldr	r4, [r2, r3]
 800c51a:	250f      	movs	r5, #15
 800c51c:	43ac      	bics	r4, r5
 800c51e:	50d4      	str	r4, [r2, r3]
 800c520:	58d4      	ldr	r4, [r2, r3]
 800c522:	3d05      	subs	r5, #5
 800c524:	432c      	orrs	r4, r5
 800c526:	50d4      	str	r4, [r2, r3]
 800c528:	e732      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c52a:	4a40      	ldr	r2, [pc, #256]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c52c:	23a8      	movs	r3, #168	; 0xa8
 800c52e:	58d4      	ldr	r4, [r2, r3]
 800c530:	4d3d      	ldr	r5, [pc, #244]	; (800c628 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c532:	402c      	ands	r4, r5
 800c534:	50d4      	str	r4, [r2, r3]
 800c536:	58d5      	ldr	r5, [r2, r3]
 800c538:	24a0      	movs	r4, #160	; 0xa0
 800c53a:	0124      	lsls	r4, r4, #4
 800c53c:	432c      	orrs	r4, r5
 800c53e:	50d4      	str	r4, [r2, r3]
 800c540:	e726      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c542:	4a3a      	ldr	r2, [pc, #232]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c544:	23a8      	movs	r3, #168	; 0xa8
 800c546:	58d4      	ldr	r4, [r2, r3]
 800c548:	4d39      	ldr	r5, [pc, #228]	; (800c630 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c54a:	402c      	ands	r4, r5
 800c54c:	50d4      	str	r4, [r2, r3]
 800c54e:	58d5      	ldr	r5, [r2, r3]
 800c550:	24a0      	movs	r4, #160	; 0xa0
 800c552:	0324      	lsls	r4, r4, #12
 800c554:	432c      	orrs	r4, r5
 800c556:	50d4      	str	r4, [r2, r3]
 800c558:	e71a      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c55a:	4a34      	ldr	r2, [pc, #208]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c55c:	23a8      	movs	r3, #168	; 0xa8
 800c55e:	58d4      	ldr	r4, [r2, r3]
 800c560:	4d34      	ldr	r5, [pc, #208]	; (800c634 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c562:	402c      	ands	r4, r5
 800c564:	50d4      	str	r4, [r2, r3]
 800c566:	58d5      	ldr	r5, [r2, r3]
 800c568:	24a0      	movs	r4, #160	; 0xa0
 800c56a:	0424      	lsls	r4, r4, #16
 800c56c:	432c      	orrs	r4, r5
 800c56e:	50d4      	str	r4, [r2, r3]
 800c570:	e70e      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c572:	4a2c      	ldr	r2, [pc, #176]	; (800c624 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c574:	23a8      	movs	r3, #168	; 0xa8
 800c576:	58d4      	ldr	r4, [r2, r3]
 800c578:	25f0      	movs	r5, #240	; 0xf0
 800c57a:	43ac      	bics	r4, r5
 800c57c:	50d4      	str	r4, [r2, r3]
 800c57e:	58d4      	ldr	r4, [r2, r3]
 800c580:	3d50      	subs	r5, #80	; 0x50
 800c582:	432c      	orrs	r4, r5
 800c584:	50d4      	str	r4, [r2, r3]
 800c586:	e703      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c588:	4a28      	ldr	r2, [pc, #160]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c58a:	23a8      	movs	r3, #168	; 0xa8
 800c58c:	58d4      	ldr	r4, [r2, r3]
 800c58e:	250f      	movs	r5, #15
 800c590:	43ac      	bics	r4, r5
 800c592:	50d4      	str	r4, [r2, r3]
 800c594:	58d4      	ldr	r4, [r2, r3]
 800c596:	3d04      	subs	r5, #4
 800c598:	432c      	orrs	r4, r5
 800c59a:	50d4      	str	r4, [r2, r3]
 800c59c:	e6f8      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c59e:	4a23      	ldr	r2, [pc, #140]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c5a0:	23a8      	movs	r3, #168	; 0xa8
 800c5a2:	58d4      	ldr	r4, [r2, r3]
 800c5a4:	4d20      	ldr	r5, [pc, #128]	; (800c628 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c5a6:	402c      	ands	r4, r5
 800c5a8:	50d4      	str	r4, [r2, r3]
 800c5aa:	58d5      	ldr	r5, [r2, r3]
 800c5ac:	24b0      	movs	r4, #176	; 0xb0
 800c5ae:	0124      	lsls	r4, r4, #4
 800c5b0:	432c      	orrs	r4, r5
 800c5b2:	50d4      	str	r4, [r2, r3]
 800c5b4:	e6ec      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c5b6:	4a1d      	ldr	r2, [pc, #116]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c5b8:	23a8      	movs	r3, #168	; 0xa8
 800c5ba:	58d4      	ldr	r4, [r2, r3]
 800c5bc:	4d1c      	ldr	r5, [pc, #112]	; (800c630 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c5be:	402c      	ands	r4, r5
 800c5c0:	50d4      	str	r4, [r2, r3]
 800c5c2:	58d5      	ldr	r5, [r2, r3]
 800c5c4:	24b0      	movs	r4, #176	; 0xb0
 800c5c6:	0324      	lsls	r4, r4, #12
 800c5c8:	432c      	orrs	r4, r5
 800c5ca:	50d4      	str	r4, [r2, r3]
 800c5cc:	e6e0      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c5ce:	4a17      	ldr	r2, [pc, #92]	; (800c62c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c5d0:	23a8      	movs	r3, #168	; 0xa8
 800c5d2:	58d4      	ldr	r4, [r2, r3]
 800c5d4:	4d17      	ldr	r5, [pc, #92]	; (800c634 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c5d6:	402c      	ands	r4, r5
 800c5d8:	50d4      	str	r4, [r2, r3]
 800c5da:	58d5      	ldr	r5, [r2, r3]
 800c5dc:	24b0      	movs	r4, #176	; 0xb0
 800c5de:	0424      	lsls	r4, r4, #16
 800c5e0:	432c      	orrs	r4, r5
 800c5e2:	50d4      	str	r4, [r2, r3]
 800c5e4:	e6d4      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800c5e6:	4a0f      	ldr	r2, [pc, #60]	; (800c624 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c5e8:	23a8      	movs	r3, #168	; 0xa8
 800c5ea:	58d4      	ldr	r4, [r2, r3]
 800c5ec:	25f0      	movs	r5, #240	; 0xf0
 800c5ee:	43ac      	bics	r4, r5
 800c5f0:	50d4      	str	r4, [r2, r3]
 800c5f2:	58d4      	ldr	r4, [r2, r3]
 800c5f4:	3d40      	subs	r5, #64	; 0x40
 800c5f6:	432c      	orrs	r4, r5
 800c5f8:	50d4      	str	r4, [r2, r3]
 800c5fa:	e6c9      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
 800c5fc:	40013800 	.word	0x40013800
 800c600:	40004400 	.word	0x40004400
 800c604:	40004800 	.word	0x40004800
 800c608:	40004c00 	.word	0x40004c00
 800c60c:	40020008 	.word	0x40020008
 800c610:	40020030 	.word	0x40020030
 800c614:	40020058 	.word	0x40020058
 800c618:	4002006c 	.word	0x4002006c
 800c61c:	4002041c 	.word	0x4002041c
 800c620:	40020430 	.word	0x40020430
 800c624:	40020400 	.word	0x40020400
 800c628:	fffff0ff 	.word	0xfffff0ff
 800c62c:	40020000 	.word	0x40020000
 800c630:	fff0ffff 	.word	0xfff0ffff
 800c634:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c638:	4ab9      	ldr	r2, [pc, #740]	; (800c920 <RemapAndLinkDMAtoUARTRx+0x620>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d159      	bne.n	800c6f2 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800c63e:	680b      	ldr	r3, [r1, #0]
 800c640:	4ab8      	ldr	r2, [pc, #736]	; (800c924 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d01b      	beq.n	800c67e <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c646:	4ab8      	ldr	r2, [pc, #736]	; (800c928 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d023      	beq.n	800c694 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c64c:	4ab7      	ldr	r2, [pc, #732]	; (800c92c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d02c      	beq.n	800c6ac <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c652:	4ab7      	ldr	r2, [pc, #732]	; (800c930 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d035      	beq.n	800c6c4 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c658:	4ab6      	ldr	r2, [pc, #728]	; (800c934 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d03e      	beq.n	800c6dc <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c65e:	4ab6      	ldr	r2, [pc, #728]	; (800c938 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d000      	beq.n	800c666 <RemapAndLinkDMAtoUARTRx+0x366>
 800c664:	e694      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800c666:	4ab5      	ldr	r2, [pc, #724]	; (800c93c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c668:	23a8      	movs	r3, #168	; 0xa8
 800c66a:	58d4      	ldr	r4, [r2, r3]
 800c66c:	4db4      	ldr	r5, [pc, #720]	; (800c940 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c66e:	402c      	ands	r4, r5
 800c670:	50d4      	str	r4, [r2, r3]
 800c672:	58d5      	ldr	r5, [r2, r3]
 800c674:	24c0      	movs	r4, #192	; 0xc0
 800c676:	0124      	lsls	r4, r4, #4
 800c678:	432c      	orrs	r4, r5
 800c67a:	50d4      	str	r4, [r2, r3]
 800c67c:	e688      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800c67e:	4ab1      	ldr	r2, [pc, #708]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c680:	23a8      	movs	r3, #168	; 0xa8
 800c682:	58d4      	ldr	r4, [r2, r3]
 800c684:	250f      	movs	r5, #15
 800c686:	43ac      	bics	r4, r5
 800c688:	50d4      	str	r4, [r2, r3]
 800c68a:	58d4      	ldr	r4, [r2, r3]
 800c68c:	3d03      	subs	r5, #3
 800c68e:	432c      	orrs	r4, r5
 800c690:	50d4      	str	r4, [r2, r3]
 800c692:	e67d      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800c694:	4aab      	ldr	r2, [pc, #684]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c696:	23a8      	movs	r3, #168	; 0xa8
 800c698:	58d4      	ldr	r4, [r2, r3]
 800c69a:	4da9      	ldr	r5, [pc, #676]	; (800c940 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c69c:	402c      	ands	r4, r5
 800c69e:	50d4      	str	r4, [r2, r3]
 800c6a0:	58d5      	ldr	r5, [r2, r3]
 800c6a2:	24c0      	movs	r4, #192	; 0xc0
 800c6a4:	0124      	lsls	r4, r4, #4
 800c6a6:	432c      	orrs	r4, r5
 800c6a8:	50d4      	str	r4, [r2, r3]
 800c6aa:	e671      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800c6ac:	4aa5      	ldr	r2, [pc, #660]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c6ae:	23a8      	movs	r3, #168	; 0xa8
 800c6b0:	58d4      	ldr	r4, [r2, r3]
 800c6b2:	4da5      	ldr	r5, [pc, #660]	; (800c948 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c6b4:	402c      	ands	r4, r5
 800c6b6:	50d4      	str	r4, [r2, r3]
 800c6b8:	58d5      	ldr	r5, [r2, r3]
 800c6ba:	24c0      	movs	r4, #192	; 0xc0
 800c6bc:	0324      	lsls	r4, r4, #12
 800c6be:	432c      	orrs	r4, r5
 800c6c0:	50d4      	str	r4, [r2, r3]
 800c6c2:	e665      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800c6c4:	4a9f      	ldr	r2, [pc, #636]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c6c6:	23a8      	movs	r3, #168	; 0xa8
 800c6c8:	58d4      	ldr	r4, [r2, r3]
 800c6ca:	4da0      	ldr	r5, [pc, #640]	; (800c94c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c6cc:	402c      	ands	r4, r5
 800c6ce:	50d4      	str	r4, [r2, r3]
 800c6d0:	58d5      	ldr	r5, [r2, r3]
 800c6d2:	24c0      	movs	r4, #192	; 0xc0
 800c6d4:	0424      	lsls	r4, r4, #16
 800c6d6:	432c      	orrs	r4, r5
 800c6d8:	50d4      	str	r4, [r2, r3]
 800c6da:	e659      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800c6dc:	4a97      	ldr	r2, [pc, #604]	; (800c93c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c6de:	23a8      	movs	r3, #168	; 0xa8
 800c6e0:	58d4      	ldr	r4, [r2, r3]
 800c6e2:	25f0      	movs	r5, #240	; 0xf0
 800c6e4:	43ac      	bics	r4, r5
 800c6e6:	50d4      	str	r4, [r2, r3]
 800c6e8:	58d4      	ldr	r4, [r2, r3]
 800c6ea:	3d30      	subs	r5, #48	; 0x30
 800c6ec:	432c      	orrs	r4, r5
 800c6ee:	50d4      	str	r4, [r2, r3]
 800c6f0:	e64e      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c6f2:	4a97      	ldr	r2, [pc, #604]	; (800c950 <RemapAndLinkDMAtoUARTRx+0x650>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d159      	bne.n	800c7ac <RemapAndLinkDMAtoUARTRx+0x4ac>
 800c6f8:	680b      	ldr	r3, [r1, #0]
 800c6fa:	4a8a      	ldr	r2, [pc, #552]	; (800c924 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d01b      	beq.n	800c738 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c700:	4a89      	ldr	r2, [pc, #548]	; (800c928 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d023      	beq.n	800c74e <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c706:	4a89      	ldr	r2, [pc, #548]	; (800c92c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d02c      	beq.n	800c766 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c70c:	4a88      	ldr	r2, [pc, #544]	; (800c930 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d035      	beq.n	800c77e <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c712:	4a88      	ldr	r2, [pc, #544]	; (800c934 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d03e      	beq.n	800c796 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c718:	4a87      	ldr	r2, [pc, #540]	; (800c938 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d000      	beq.n	800c720 <RemapAndLinkDMAtoUARTRx+0x420>
 800c71e:	e637      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800c720:	4a86      	ldr	r2, [pc, #536]	; (800c93c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c722:	23a8      	movs	r3, #168	; 0xa8
 800c724:	58d4      	ldr	r4, [r2, r3]
 800c726:	4d86      	ldr	r5, [pc, #536]	; (800c940 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c728:	402c      	ands	r4, r5
 800c72a:	50d4      	str	r4, [r2, r3]
 800c72c:	58d5      	ldr	r5, [r2, r3]
 800c72e:	24d0      	movs	r4, #208	; 0xd0
 800c730:	0124      	lsls	r4, r4, #4
 800c732:	432c      	orrs	r4, r5
 800c734:	50d4      	str	r4, [r2, r3]
 800c736:	e62b      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800c738:	4a82      	ldr	r2, [pc, #520]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c73a:	23a8      	movs	r3, #168	; 0xa8
 800c73c:	58d4      	ldr	r4, [r2, r3]
 800c73e:	250f      	movs	r5, #15
 800c740:	43ac      	bics	r4, r5
 800c742:	50d4      	str	r4, [r2, r3]
 800c744:	58d4      	ldr	r4, [r2, r3]
 800c746:	3d02      	subs	r5, #2
 800c748:	432c      	orrs	r4, r5
 800c74a:	50d4      	str	r4, [r2, r3]
 800c74c:	e620      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800c74e:	4a7d      	ldr	r2, [pc, #500]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c750:	23a8      	movs	r3, #168	; 0xa8
 800c752:	58d4      	ldr	r4, [r2, r3]
 800c754:	4d7a      	ldr	r5, [pc, #488]	; (800c940 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c756:	402c      	ands	r4, r5
 800c758:	50d4      	str	r4, [r2, r3]
 800c75a:	58d5      	ldr	r5, [r2, r3]
 800c75c:	24d0      	movs	r4, #208	; 0xd0
 800c75e:	0124      	lsls	r4, r4, #4
 800c760:	432c      	orrs	r4, r5
 800c762:	50d4      	str	r4, [r2, r3]
 800c764:	e614      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800c766:	4a77      	ldr	r2, [pc, #476]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c768:	23a8      	movs	r3, #168	; 0xa8
 800c76a:	58d4      	ldr	r4, [r2, r3]
 800c76c:	4d76      	ldr	r5, [pc, #472]	; (800c948 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c76e:	402c      	ands	r4, r5
 800c770:	50d4      	str	r4, [r2, r3]
 800c772:	58d5      	ldr	r5, [r2, r3]
 800c774:	24d0      	movs	r4, #208	; 0xd0
 800c776:	0324      	lsls	r4, r4, #12
 800c778:	432c      	orrs	r4, r5
 800c77a:	50d4      	str	r4, [r2, r3]
 800c77c:	e608      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c77e:	4a71      	ldr	r2, [pc, #452]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c780:	23a8      	movs	r3, #168	; 0xa8
 800c782:	58d4      	ldr	r4, [r2, r3]
 800c784:	4d71      	ldr	r5, [pc, #452]	; (800c94c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c786:	402c      	ands	r4, r5
 800c788:	50d4      	str	r4, [r2, r3]
 800c78a:	58d5      	ldr	r5, [r2, r3]
 800c78c:	24d0      	movs	r4, #208	; 0xd0
 800c78e:	0424      	lsls	r4, r4, #16
 800c790:	432c      	orrs	r4, r5
 800c792:	50d4      	str	r4, [r2, r3]
 800c794:	e5fc      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c796:	4a69      	ldr	r2, [pc, #420]	; (800c93c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c798:	23a8      	movs	r3, #168	; 0xa8
 800c79a:	58d4      	ldr	r4, [r2, r3]
 800c79c:	25f0      	movs	r5, #240	; 0xf0
 800c79e:	43ac      	bics	r4, r5
 800c7a0:	50d4      	str	r4, [r2, r3]
 800c7a2:	58d4      	ldr	r4, [r2, r3]
 800c7a4:	3d20      	subs	r5, #32
 800c7a6:	432c      	orrs	r4, r5
 800c7a8:	50d4      	str	r4, [r2, r3]
 800c7aa:	e5f1      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c7ac:	4a69      	ldr	r2, [pc, #420]	; (800c954 <RemapAndLinkDMAtoUARTRx+0x654>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d159      	bne.n	800c866 <RemapAndLinkDMAtoUARTRx+0x566>
 800c7b2:	680b      	ldr	r3, [r1, #0]
 800c7b4:	4a5b      	ldr	r2, [pc, #364]	; (800c924 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d01b      	beq.n	800c7f2 <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c7ba:	4a5b      	ldr	r2, [pc, #364]	; (800c928 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d023      	beq.n	800c808 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c7c0:	4a5a      	ldr	r2, [pc, #360]	; (800c92c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d02c      	beq.n	800c820 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c7c6:	4a5a      	ldr	r2, [pc, #360]	; (800c930 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d035      	beq.n	800c838 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c7cc:	4a59      	ldr	r2, [pc, #356]	; (800c934 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d03e      	beq.n	800c850 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c7d2:	4a59      	ldr	r2, [pc, #356]	; (800c938 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d000      	beq.n	800c7da <RemapAndLinkDMAtoUARTRx+0x4da>
 800c7d8:	e5da      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800c7da:	4a58      	ldr	r2, [pc, #352]	; (800c93c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c7dc:	23a8      	movs	r3, #168	; 0xa8
 800c7de:	58d4      	ldr	r4, [r2, r3]
 800c7e0:	4d57      	ldr	r5, [pc, #348]	; (800c940 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c7e2:	402c      	ands	r4, r5
 800c7e4:	50d4      	str	r4, [r2, r3]
 800c7e6:	58d5      	ldr	r5, [r2, r3]
 800c7e8:	24e0      	movs	r4, #224	; 0xe0
 800c7ea:	0124      	lsls	r4, r4, #4
 800c7ec:	432c      	orrs	r4, r5
 800c7ee:	50d4      	str	r4, [r2, r3]
 800c7f0:	e5ce      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c7f2:	4a54      	ldr	r2, [pc, #336]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c7f4:	23a8      	movs	r3, #168	; 0xa8
 800c7f6:	58d4      	ldr	r4, [r2, r3]
 800c7f8:	250f      	movs	r5, #15
 800c7fa:	43ac      	bics	r4, r5
 800c7fc:	50d4      	str	r4, [r2, r3]
 800c7fe:	58d4      	ldr	r4, [r2, r3]
 800c800:	3d01      	subs	r5, #1
 800c802:	432c      	orrs	r4, r5
 800c804:	50d4      	str	r4, [r2, r3]
 800c806:	e5c3      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800c808:	4a4e      	ldr	r2, [pc, #312]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c80a:	23a8      	movs	r3, #168	; 0xa8
 800c80c:	58d4      	ldr	r4, [r2, r3]
 800c80e:	4d4c      	ldr	r5, [pc, #304]	; (800c940 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c810:	402c      	ands	r4, r5
 800c812:	50d4      	str	r4, [r2, r3]
 800c814:	58d5      	ldr	r5, [r2, r3]
 800c816:	24e0      	movs	r4, #224	; 0xe0
 800c818:	0124      	lsls	r4, r4, #4
 800c81a:	432c      	orrs	r4, r5
 800c81c:	50d4      	str	r4, [r2, r3]
 800c81e:	e5b7      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800c820:	4a48      	ldr	r2, [pc, #288]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c822:	23a8      	movs	r3, #168	; 0xa8
 800c824:	58d4      	ldr	r4, [r2, r3]
 800c826:	4d48      	ldr	r5, [pc, #288]	; (800c948 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c828:	402c      	ands	r4, r5
 800c82a:	50d4      	str	r4, [r2, r3]
 800c82c:	58d5      	ldr	r5, [r2, r3]
 800c82e:	24e0      	movs	r4, #224	; 0xe0
 800c830:	0324      	lsls	r4, r4, #12
 800c832:	432c      	orrs	r4, r5
 800c834:	50d4      	str	r4, [r2, r3]
 800c836:	e5ab      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800c838:	4a42      	ldr	r2, [pc, #264]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c83a:	23a8      	movs	r3, #168	; 0xa8
 800c83c:	58d4      	ldr	r4, [r2, r3]
 800c83e:	4d43      	ldr	r5, [pc, #268]	; (800c94c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c840:	402c      	ands	r4, r5
 800c842:	50d4      	str	r4, [r2, r3]
 800c844:	58d5      	ldr	r5, [r2, r3]
 800c846:	24e0      	movs	r4, #224	; 0xe0
 800c848:	0424      	lsls	r4, r4, #16
 800c84a:	432c      	orrs	r4, r5
 800c84c:	50d4      	str	r4, [r2, r3]
 800c84e:	e59f      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800c850:	4a3a      	ldr	r2, [pc, #232]	; (800c93c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c852:	23a8      	movs	r3, #168	; 0xa8
 800c854:	58d4      	ldr	r4, [r2, r3]
 800c856:	25f0      	movs	r5, #240	; 0xf0
 800c858:	43ac      	bics	r4, r5
 800c85a:	50d4      	str	r4, [r2, r3]
 800c85c:	58d4      	ldr	r4, [r2, r3]
 800c85e:	3d10      	subs	r5, #16
 800c860:	432c      	orrs	r4, r5
 800c862:	50d4      	str	r4, [r2, r3]
 800c864:	e594      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c866:	4a3c      	ldr	r2, [pc, #240]	; (800c958 <RemapAndLinkDMAtoUARTRx+0x658>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d000      	beq.n	800c86e <RemapAndLinkDMAtoUARTRx+0x56e>
 800c86c:	e590      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
 800c86e:	680b      	ldr	r3, [r1, #0]
 800c870:	4a2c      	ldr	r2, [pc, #176]	; (800c924 <RemapAndLinkDMAtoUARTRx+0x624>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d01b      	beq.n	800c8ae <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c876:	4a2c      	ldr	r2, [pc, #176]	; (800c928 <RemapAndLinkDMAtoUARTRx+0x628>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d022      	beq.n	800c8c2 <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c87c:	4a2b      	ldr	r2, [pc, #172]	; (800c92c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d02b      	beq.n	800c8da <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c882:	4a2b      	ldr	r2, [pc, #172]	; (800c930 <RemapAndLinkDMAtoUARTRx+0x630>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d034      	beq.n	800c8f2 <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c888:	4a2a      	ldr	r2, [pc, #168]	; (800c934 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d03d      	beq.n	800c90a <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c88e:	4a2a      	ldr	r2, [pc, #168]	; (800c938 <RemapAndLinkDMAtoUARTRx+0x638>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d000      	beq.n	800c896 <RemapAndLinkDMAtoUARTRx+0x596>
 800c894:	e57c      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c896:	4a29      	ldr	r2, [pc, #164]	; (800c93c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c898:	23a8      	movs	r3, #168	; 0xa8
 800c89a:	58d4      	ldr	r4, [r2, r3]
 800c89c:	4d28      	ldr	r5, [pc, #160]	; (800c940 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c89e:	402c      	ands	r4, r5
 800c8a0:	50d4      	str	r4, [r2, r3]
 800c8a2:	58d5      	ldr	r5, [r2, r3]
 800c8a4:	24f0      	movs	r4, #240	; 0xf0
 800c8a6:	0124      	lsls	r4, r4, #4
 800c8a8:	432c      	orrs	r4, r5
 800c8aa:	50d4      	str	r4, [r2, r3]
 800c8ac:	e570      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800c8ae:	4a25      	ldr	r2, [pc, #148]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c8b0:	23a8      	movs	r3, #168	; 0xa8
 800c8b2:	58d5      	ldr	r5, [r2, r3]
 800c8b4:	260f      	movs	r6, #15
 800c8b6:	43b5      	bics	r5, r6
 800c8b8:	50d5      	str	r5, [r2, r3]
 800c8ba:	58d4      	ldr	r4, [r2, r3]
 800c8bc:	4334      	orrs	r4, r6
 800c8be:	50d4      	str	r4, [r2, r3]
 800c8c0:	e566      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c8c2:	4a20      	ldr	r2, [pc, #128]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c8c4:	23a8      	movs	r3, #168	; 0xa8
 800c8c6:	58d4      	ldr	r4, [r2, r3]
 800c8c8:	4d1d      	ldr	r5, [pc, #116]	; (800c940 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c8ca:	402c      	ands	r4, r5
 800c8cc:	50d4      	str	r4, [r2, r3]
 800c8ce:	58d5      	ldr	r5, [r2, r3]
 800c8d0:	24f0      	movs	r4, #240	; 0xf0
 800c8d2:	0124      	lsls	r4, r4, #4
 800c8d4:	432c      	orrs	r4, r5
 800c8d6:	50d4      	str	r4, [r2, r3]
 800c8d8:	e55a      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c8da:	4a1a      	ldr	r2, [pc, #104]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c8dc:	23a8      	movs	r3, #168	; 0xa8
 800c8de:	58d4      	ldr	r4, [r2, r3]
 800c8e0:	4d19      	ldr	r5, [pc, #100]	; (800c948 <RemapAndLinkDMAtoUARTRx+0x648>)
 800c8e2:	402c      	ands	r4, r5
 800c8e4:	50d4      	str	r4, [r2, r3]
 800c8e6:	58d5      	ldr	r5, [r2, r3]
 800c8e8:	24f0      	movs	r4, #240	; 0xf0
 800c8ea:	0324      	lsls	r4, r4, #12
 800c8ec:	432c      	orrs	r4, r5
 800c8ee:	50d4      	str	r4, [r2, r3]
 800c8f0:	e54e      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c8f2:	4a14      	ldr	r2, [pc, #80]	; (800c944 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c8f4:	23a8      	movs	r3, #168	; 0xa8
 800c8f6:	58d4      	ldr	r4, [r2, r3]
 800c8f8:	4d14      	ldr	r5, [pc, #80]	; (800c94c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c8fa:	402c      	ands	r4, r5
 800c8fc:	50d4      	str	r4, [r2, r3]
 800c8fe:	58d5      	ldr	r5, [r2, r3]
 800c900:	24f0      	movs	r4, #240	; 0xf0
 800c902:	0424      	lsls	r4, r4, #16
 800c904:	432c      	orrs	r4, r5
 800c906:	50d4      	str	r4, [r2, r3]
 800c908:	e542      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c90a:	4a0c      	ldr	r2, [pc, #48]	; (800c93c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c90c:	23a8      	movs	r3, #168	; 0xa8
 800c90e:	58d5      	ldr	r5, [r2, r3]
 800c910:	26f0      	movs	r6, #240	; 0xf0
 800c912:	43b5      	bics	r5, r6
 800c914:	50d5      	str	r5, [r2, r3]
 800c916:	58d4      	ldr	r4, [r2, r3]
 800c918:	4334      	orrs	r4, r6
 800c91a:	50d4      	str	r4, [r2, r3]
 800c91c:	e538      	b.n	800c390 <RemapAndLinkDMAtoUARTRx+0x90>
 800c91e:	46c0      	nop			; (mov r8, r8)
 800c920:	40005000 	.word	0x40005000
 800c924:	40020008 	.word	0x40020008
 800c928:	40020030 	.word	0x40020030
 800c92c:	40020058 	.word	0x40020058
 800c930:	4002006c 	.word	0x4002006c
 800c934:	4002041c 	.word	0x4002041c
 800c938:	40020430 	.word	0x40020430
 800c93c:	40020400 	.word	0x40020400
 800c940:	fffff0ff 	.word	0xfffff0ff
 800c944:	40020000 	.word	0x40020000
 800c948:	fff0ffff 	.word	0xfff0ffff
 800c94c:	ff0fffff 	.word	0xff0fffff
 800c950:	40011400 	.word	0x40011400
 800c954:	40011800 	.word	0x40011800
 800c958:	40011c00 	.word	0x40011c00

0800c95c <DMA_MSG_RX_Setup>:
{	
 800c95c:	b570      	push	{r4, r5, r6, lr}
 800c95e:	0004      	movs	r4, r0
 800c960:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c962:	f7ff fccd 	bl	800c300 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c966:	2100      	movs	r1, #0
 800c968:	0028      	movs	r0, r5
 800c96a:	f7ff fc13 	bl	800c194 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c96e:	0020      	movs	r0, r4
 800c970:	f7fe fe38 	bl	800b5e4 <GetPort>
 800c974:	1e41      	subs	r1, r0, #1
 800c976:	0189      	lsls	r1, r1, #6
 800c978:	4803      	ldr	r0, [pc, #12]	; (800c988 <DMA_MSG_RX_Setup+0x2c>)
 800c97a:	1809      	adds	r1, r1, r0
 800c97c:	2240      	movs	r2, #64	; 0x40
 800c97e:	0020      	movs	r0, r4
 800c980:	f006 fd7e 	bl	8013480 <HAL_UART_Receive_DMA>
}
 800c984:	bd70      	pop	{r4, r5, r6, pc}
 800c986:	46c0      	nop			; (mov r8, r8)
 800c988:	2000133c 	.word	0x2000133c

0800c98c <SetupMessagingRxDMAs>:
{	
 800c98c:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c98e:	4b1b      	ldr	r3, [pc, #108]	; (800c9fc <SetupMessagingRxDMAs+0x70>)
 800c990:	785b      	ldrb	r3, [r3, #1]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d014      	beq.n	800c9c0 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800c996:	4b19      	ldr	r3, [pc, #100]	; (800c9fc <SetupMessagingRxDMAs+0x70>)
 800c998:	789b      	ldrb	r3, [r3, #2]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d015      	beq.n	800c9ca <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800c99e:	4b17      	ldr	r3, [pc, #92]	; (800c9fc <SetupMessagingRxDMAs+0x70>)
 800c9a0:	78db      	ldrb	r3, [r3, #3]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d016      	beq.n	800c9d4 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800c9a6:	4b15      	ldr	r3, [pc, #84]	; (800c9fc <SetupMessagingRxDMAs+0x70>)
 800c9a8:	791b      	ldrb	r3, [r3, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d017      	beq.n	800c9de <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800c9ae:	4b13      	ldr	r3, [pc, #76]	; (800c9fc <SetupMessagingRxDMAs+0x70>)
 800c9b0:	795b      	ldrb	r3, [r3, #5]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d018      	beq.n	800c9e8 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800c9b6:	4b11      	ldr	r3, [pc, #68]	; (800c9fc <SetupMessagingRxDMAs+0x70>)
 800c9b8:	799b      	ldrb	r3, [r3, #6]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d019      	beq.n	800c9f2 <SetupMessagingRxDMAs+0x66>
}
 800c9be:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c9c0:	490f      	ldr	r1, [pc, #60]	; (800ca00 <SetupMessagingRxDMAs+0x74>)
 800c9c2:	4810      	ldr	r0, [pc, #64]	; (800ca04 <SetupMessagingRxDMAs+0x78>)
 800c9c4:	f7ff ffca 	bl	800c95c <DMA_MSG_RX_Setup>
 800c9c8:	e7e5      	b.n	800c996 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c9ca:	490f      	ldr	r1, [pc, #60]	; (800ca08 <SetupMessagingRxDMAs+0x7c>)
 800c9cc:	480f      	ldr	r0, [pc, #60]	; (800ca0c <SetupMessagingRxDMAs+0x80>)
 800c9ce:	f7ff ffc5 	bl	800c95c <DMA_MSG_RX_Setup>
 800c9d2:	e7e4      	b.n	800c99e <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c9d4:	490e      	ldr	r1, [pc, #56]	; (800ca10 <SetupMessagingRxDMAs+0x84>)
 800c9d6:	480f      	ldr	r0, [pc, #60]	; (800ca14 <SetupMessagingRxDMAs+0x88>)
 800c9d8:	f7ff ffc0 	bl	800c95c <DMA_MSG_RX_Setup>
 800c9dc:	e7e3      	b.n	800c9a6 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c9de:	490e      	ldr	r1, [pc, #56]	; (800ca18 <SetupMessagingRxDMAs+0x8c>)
 800c9e0:	480e      	ldr	r0, [pc, #56]	; (800ca1c <SetupMessagingRxDMAs+0x90>)
 800c9e2:	f7ff ffbb 	bl	800c95c <DMA_MSG_RX_Setup>
 800c9e6:	e7e2      	b.n	800c9ae <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c9e8:	490d      	ldr	r1, [pc, #52]	; (800ca20 <SetupMessagingRxDMAs+0x94>)
 800c9ea:	480e      	ldr	r0, [pc, #56]	; (800ca24 <SetupMessagingRxDMAs+0x98>)
 800c9ec:	f7ff ffb6 	bl	800c95c <DMA_MSG_RX_Setup>
 800c9f0:	e7e1      	b.n	800c9b6 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800c9f2:	490d      	ldr	r1, [pc, #52]	; (800ca28 <SetupMessagingRxDMAs+0x9c>)
 800c9f4:	480d      	ldr	r0, [pc, #52]	; (800ca2c <SetupMessagingRxDMAs+0xa0>)
 800c9f6:	f7ff ffb1 	bl	800c95c <DMA_MSG_RX_Setup>
}
 800c9fa:	e7e0      	b.n	800c9be <SetupMessagingRxDMAs+0x32>
 800c9fc:	20001168 	.word	0x20001168
 800ca00:	200017f0 	.word	0x200017f0
 800ca04:	20006cac 	.word	0x20006cac
 800ca08:	20001828 	.word	0x20001828
 800ca0c:	20006d1c 	.word	0x20006d1c
 800ca10:	20001860 	.word	0x20001860
 800ca14:	20006c3c 	.word	0x20006c3c
 800ca18:	20001898 	.word	0x20001898
 800ca1c:	20006aec 	.word	0x20006aec
 800ca20:	200018d0 	.word	0x200018d0
 800ca24:	20006bcc 	.word	0x20006bcc
 800ca28:	20001908 	.word	0x20001908
 800ca2c:	20006b5c 	.word	0x20006b5c

0800ca30 <DMA_STREAM_Setup>:
{	
 800ca30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca32:	0005      	movs	r5, r0
 800ca34:	000f      	movs	r7, r1
 800ca36:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800ca38:	f7fe fdd4 	bl	800b5e4 <GetPort>
	hDMA = &streamDMA[port-1];
 800ca3c:	3801      	subs	r0, #1
 800ca3e:	00c4      	lsls	r4, r0, #3
 800ca40:	1a24      	subs	r4, r4, r0
 800ca42:	00e4      	lsls	r4, r4, #3
 800ca44:	4809      	ldr	r0, [pc, #36]	; (800ca6c <DMA_STREAM_Setup+0x3c>)
 800ca46:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800ca48:	0021      	movs	r1, r4
 800ca4a:	0028      	movs	r0, r5
 800ca4c:	f7ff fc58 	bl	800c300 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800ca50:	2101      	movs	r1, #1
 800ca52:	0020      	movs	r0, r4
 800ca54:	f7ff fb9e 	bl	800c194 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800ca58:	2369      	movs	r3, #105	; 0x69
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800ca5e:	6839      	ldr	r1, [r7, #0]
 800ca60:	3128      	adds	r1, #40	; 0x28
 800ca62:	0032      	movs	r2, r6
 800ca64:	0028      	movs	r0, r5
 800ca66:	f006 fd0b 	bl	8013480 <HAL_UART_Receive_DMA>
}
 800ca6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca6c:	200019e8 	.word	0x200019e8

0800ca70 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800ca70:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800ca72:	6803      	ldr	r3, [r0, #0]
 800ca74:	4abd      	ldr	r2, [pc, #756]	; (800cd6c <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d02f      	beq.n	800cada <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800ca7a:	4abd      	ldr	r2, [pc, #756]	; (800cd70 <RemapAndLinkDMAtoUARTTx+0x300>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d100      	bne.n	800ca82 <RemapAndLinkDMAtoUARTTx+0x12>
 800ca80:	e087      	b.n	800cb92 <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800ca82:	4abc      	ldr	r2, [pc, #752]	; (800cd74 <RemapAndLinkDMAtoUARTTx+0x304>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d100      	bne.n	800ca8a <RemapAndLinkDMAtoUARTTx+0x1a>
 800ca88:	e0dc      	b.n	800cc44 <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800ca8a:	4abb      	ldr	r2, [pc, #748]	; (800cd78 <RemapAndLinkDMAtoUARTTx+0x308>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d000      	beq.n	800ca92 <RemapAndLinkDMAtoUARTTx+0x22>
 800ca90:	e18a      	b.n	800cda8 <RemapAndLinkDMAtoUARTTx+0x338>
 800ca92:	680b      	ldr	r3, [r1, #0]
 800ca94:	4ab9      	ldr	r2, [pc, #740]	; (800cd7c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d100      	bne.n	800ca9c <RemapAndLinkDMAtoUARTTx+0x2c>
 800ca9a:	e12d      	b.n	800ccf8 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800ca9c:	4ab8      	ldr	r2, [pc, #736]	; (800cd80 <RemapAndLinkDMAtoUARTTx+0x310>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d100      	bne.n	800caa4 <RemapAndLinkDMAtoUARTTx+0x34>
 800caa2:	e134      	b.n	800cd0e <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800caa4:	4ab7      	ldr	r2, [pc, #732]	; (800cd84 <RemapAndLinkDMAtoUARTTx+0x314>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d100      	bne.n	800caac <RemapAndLinkDMAtoUARTTx+0x3c>
 800caaa:	e13c      	b.n	800cd26 <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800caac:	4ab6      	ldr	r2, [pc, #728]	; (800cd88 <RemapAndLinkDMAtoUARTTx+0x318>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d100      	bne.n	800cab4 <RemapAndLinkDMAtoUARTTx+0x44>
 800cab2:	e144      	b.n	800cd3e <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800cab4:	4ab5      	ldr	r2, [pc, #724]	; (800cd8c <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d100      	bne.n	800cabc <RemapAndLinkDMAtoUARTTx+0x4c>
 800caba:	e14b      	b.n	800cd54 <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800cabc:	4ab4      	ldr	r2, [pc, #720]	; (800cd90 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d11e      	bne.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800cac2:	4ab4      	ldr	r2, [pc, #720]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cac4:	23a8      	movs	r3, #168	; 0xa8
 800cac6:	58d4      	ldr	r4, [r2, r3]
 800cac8:	4db3      	ldr	r5, [pc, #716]	; (800cd98 <RemapAndLinkDMAtoUARTTx+0x328>)
 800caca:	402c      	ands	r4, r5
 800cacc:	50d4      	str	r4, [r2, r3]
 800cace:	58d5      	ldr	r5, [r2, r3]
 800cad0:	24b0      	movs	r4, #176	; 0xb0
 800cad2:	0324      	lsls	r4, r4, #12
 800cad4:	432c      	orrs	r4, r5
 800cad6:	50d4      	str	r4, [r2, r3]
 800cad8:	e012      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800cada:	680b      	ldr	r3, [r1, #0]
 800cadc:	4aa7      	ldr	r2, [pc, #668]	; (800cd7c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d011      	beq.n	800cb06 <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800cae2:	4aa7      	ldr	r2, [pc, #668]	; (800cd80 <RemapAndLinkDMAtoUARTTx+0x310>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d019      	beq.n	800cb1c <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800cae8:	4aa6      	ldr	r2, [pc, #664]	; (800cd84 <RemapAndLinkDMAtoUARTTx+0x314>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d022      	beq.n	800cb34 <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800caee:	4aa6      	ldr	r2, [pc, #664]	; (800cd88 <RemapAndLinkDMAtoUARTTx+0x318>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d02b      	beq.n	800cb4c <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800caf4:	4aa5      	ldr	r2, [pc, #660]	; (800cd8c <RemapAndLinkDMAtoUARTTx+0x31c>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d033      	beq.n	800cb62 <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800cafa:	4aa5      	ldr	r2, [pc, #660]	; (800cd90 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d03c      	beq.n	800cb7a <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800cb00:	6601      	str	r1, [r0, #96]	; 0x60
 800cb02:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cb04:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800cb06:	4aa5      	ldr	r2, [pc, #660]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cb08:	23a8      	movs	r3, #168	; 0xa8
 800cb0a:	58d4      	ldr	r4, [r2, r3]
 800cb0c:	25f0      	movs	r5, #240	; 0xf0
 800cb0e:	43ac      	bics	r4, r5
 800cb10:	50d4      	str	r4, [r2, r3]
 800cb12:	58d4      	ldr	r4, [r2, r3]
 800cb14:	3d70      	subs	r5, #112	; 0x70
 800cb16:	432c      	orrs	r4, r5
 800cb18:	50d4      	str	r4, [r2, r3]
 800cb1a:	e7f1      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800cb1c:	4a9f      	ldr	r2, [pc, #636]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cb1e:	23a8      	movs	r3, #168	; 0xa8
 800cb20:	58d4      	ldr	r4, [r2, r3]
 800cb22:	4d9f      	ldr	r5, [pc, #636]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cb24:	402c      	ands	r4, r5
 800cb26:	50d4      	str	r4, [r2, r3]
 800cb28:	58d5      	ldr	r5, [r2, r3]
 800cb2a:	2480      	movs	r4, #128	; 0x80
 800cb2c:	0224      	lsls	r4, r4, #8
 800cb2e:	432c      	orrs	r4, r5
 800cb30:	50d4      	str	r4, [r2, r3]
 800cb32:	e7e5      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800cb34:	4a99      	ldr	r2, [pc, #612]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cb36:	23a8      	movs	r3, #168	; 0xa8
 800cb38:	58d4      	ldr	r4, [r2, r3]
 800cb3a:	4d9a      	ldr	r5, [pc, #616]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800cb3c:	402c      	ands	r4, r5
 800cb3e:	50d4      	str	r4, [r2, r3]
 800cb40:	58d5      	ldr	r5, [r2, r3]
 800cb42:	2480      	movs	r4, #128	; 0x80
 800cb44:	0524      	lsls	r4, r4, #20
 800cb46:	432c      	orrs	r4, r5
 800cb48:	50d4      	str	r4, [r2, r3]
 800cb4a:	e7d9      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800cb4c:	4a91      	ldr	r2, [pc, #580]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cb4e:	23a8      	movs	r3, #168	; 0xa8
 800cb50:	58d4      	ldr	r4, [r2, r3]
 800cb52:	250f      	movs	r5, #15
 800cb54:	43ac      	bics	r4, r5
 800cb56:	50d4      	str	r4, [r2, r3]
 800cb58:	58d4      	ldr	r4, [r2, r3]
 800cb5a:	3d07      	subs	r5, #7
 800cb5c:	432c      	orrs	r4, r5
 800cb5e:	50d4      	str	r4, [r2, r3]
 800cb60:	e7ce      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800cb62:	4a8c      	ldr	r2, [pc, #560]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cb64:	23a8      	movs	r3, #168	; 0xa8
 800cb66:	58d4      	ldr	r4, [r2, r3]
 800cb68:	4d8d      	ldr	r5, [pc, #564]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cb6a:	402c      	ands	r4, r5
 800cb6c:	50d4      	str	r4, [r2, r3]
 800cb6e:	58d5      	ldr	r5, [r2, r3]
 800cb70:	2480      	movs	r4, #128	; 0x80
 800cb72:	0224      	lsls	r4, r4, #8
 800cb74:	432c      	orrs	r4, r5
 800cb76:	50d4      	str	r4, [r2, r3]
 800cb78:	e7c2      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800cb7a:	4a86      	ldr	r2, [pc, #536]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cb7c:	23a8      	movs	r3, #168	; 0xa8
 800cb7e:	58d4      	ldr	r4, [r2, r3]
 800cb80:	4d85      	ldr	r5, [pc, #532]	; (800cd98 <RemapAndLinkDMAtoUARTTx+0x328>)
 800cb82:	402c      	ands	r4, r5
 800cb84:	50d4      	str	r4, [r2, r3]
 800cb86:	58d5      	ldr	r5, [r2, r3]
 800cb88:	2480      	movs	r4, #128	; 0x80
 800cb8a:	0324      	lsls	r4, r4, #12
 800cb8c:	432c      	orrs	r4, r5
 800cb8e:	50d4      	str	r4, [r2, r3]
 800cb90:	e7b6      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800cb92:	680b      	ldr	r3, [r1, #0]
 800cb94:	4a79      	ldr	r2, [pc, #484]	; (800cd7c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d01a      	beq.n	800cbd0 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800cb9a:	4a79      	ldr	r2, [pc, #484]	; (800cd80 <RemapAndLinkDMAtoUARTTx+0x310>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d022      	beq.n	800cbe6 <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800cba0:	4a78      	ldr	r2, [pc, #480]	; (800cd84 <RemapAndLinkDMAtoUARTTx+0x314>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d02b      	beq.n	800cbfe <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800cba6:	4a78      	ldr	r2, [pc, #480]	; (800cd88 <RemapAndLinkDMAtoUARTTx+0x318>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d034      	beq.n	800cc16 <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800cbac:	4a77      	ldr	r2, [pc, #476]	; (800cd8c <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d03c      	beq.n	800cc2c <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800cbb2:	4a77      	ldr	r2, [pc, #476]	; (800cd90 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d1a3      	bne.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800cbb8:	4a76      	ldr	r2, [pc, #472]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cbba:	23a8      	movs	r3, #168	; 0xa8
 800cbbc:	58d4      	ldr	r4, [r2, r3]
 800cbbe:	4d76      	ldr	r5, [pc, #472]	; (800cd98 <RemapAndLinkDMAtoUARTTx+0x328>)
 800cbc0:	402c      	ands	r4, r5
 800cbc2:	50d4      	str	r4, [r2, r3]
 800cbc4:	58d5      	ldr	r5, [r2, r3]
 800cbc6:	2490      	movs	r4, #144	; 0x90
 800cbc8:	0324      	lsls	r4, r4, #12
 800cbca:	432c      	orrs	r4, r5
 800cbcc:	50d4      	str	r4, [r2, r3]
 800cbce:	e797      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800cbd0:	4a72      	ldr	r2, [pc, #456]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cbd2:	23a8      	movs	r3, #168	; 0xa8
 800cbd4:	58d4      	ldr	r4, [r2, r3]
 800cbd6:	25f0      	movs	r5, #240	; 0xf0
 800cbd8:	43ac      	bics	r4, r5
 800cbda:	50d4      	str	r4, [r2, r3]
 800cbdc:	58d4      	ldr	r4, [r2, r3]
 800cbde:	3d60      	subs	r5, #96	; 0x60
 800cbe0:	432c      	orrs	r4, r5
 800cbe2:	50d4      	str	r4, [r2, r3]
 800cbe4:	e78c      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800cbe6:	4a6d      	ldr	r2, [pc, #436]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cbe8:	23a8      	movs	r3, #168	; 0xa8
 800cbea:	58d4      	ldr	r4, [r2, r3]
 800cbec:	4d6c      	ldr	r5, [pc, #432]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cbee:	402c      	ands	r4, r5
 800cbf0:	50d4      	str	r4, [r2, r3]
 800cbf2:	58d5      	ldr	r5, [r2, r3]
 800cbf4:	2490      	movs	r4, #144	; 0x90
 800cbf6:	0224      	lsls	r4, r4, #8
 800cbf8:	432c      	orrs	r4, r5
 800cbfa:	50d4      	str	r4, [r2, r3]
 800cbfc:	e780      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800cbfe:	4a67      	ldr	r2, [pc, #412]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cc00:	23a8      	movs	r3, #168	; 0xa8
 800cc02:	58d4      	ldr	r4, [r2, r3]
 800cc04:	4d67      	ldr	r5, [pc, #412]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800cc06:	402c      	ands	r4, r5
 800cc08:	50d4      	str	r4, [r2, r3]
 800cc0a:	58d5      	ldr	r5, [r2, r3]
 800cc0c:	2490      	movs	r4, #144	; 0x90
 800cc0e:	0524      	lsls	r4, r4, #20
 800cc10:	432c      	orrs	r4, r5
 800cc12:	50d4      	str	r4, [r2, r3]
 800cc14:	e774      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800cc16:	4a5f      	ldr	r2, [pc, #380]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cc18:	23a8      	movs	r3, #168	; 0xa8
 800cc1a:	58d4      	ldr	r4, [r2, r3]
 800cc1c:	250f      	movs	r5, #15
 800cc1e:	43ac      	bics	r4, r5
 800cc20:	50d4      	str	r4, [r2, r3]
 800cc22:	58d4      	ldr	r4, [r2, r3]
 800cc24:	3d06      	subs	r5, #6
 800cc26:	432c      	orrs	r4, r5
 800cc28:	50d4      	str	r4, [r2, r3]
 800cc2a:	e769      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800cc2c:	4a59      	ldr	r2, [pc, #356]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cc2e:	23a8      	movs	r3, #168	; 0xa8
 800cc30:	58d4      	ldr	r4, [r2, r3]
 800cc32:	4d5b      	ldr	r5, [pc, #364]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cc34:	402c      	ands	r4, r5
 800cc36:	50d4      	str	r4, [r2, r3]
 800cc38:	58d5      	ldr	r5, [r2, r3]
 800cc3a:	2490      	movs	r4, #144	; 0x90
 800cc3c:	0224      	lsls	r4, r4, #8
 800cc3e:	432c      	orrs	r4, r5
 800cc40:	50d4      	str	r4, [r2, r3]
 800cc42:	e75d      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800cc44:	680b      	ldr	r3, [r1, #0]
 800cc46:	4a4d      	ldr	r2, [pc, #308]	; (800cd7c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d01b      	beq.n	800cc84 <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800cc4c:	4a4c      	ldr	r2, [pc, #304]	; (800cd80 <RemapAndLinkDMAtoUARTTx+0x310>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d023      	beq.n	800cc9a <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800cc52:	4a4c      	ldr	r2, [pc, #304]	; (800cd84 <RemapAndLinkDMAtoUARTTx+0x314>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d02c      	beq.n	800ccb2 <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800cc58:	4a4b      	ldr	r2, [pc, #300]	; (800cd88 <RemapAndLinkDMAtoUARTTx+0x318>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d035      	beq.n	800ccca <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800cc5e:	4a4b      	ldr	r2, [pc, #300]	; (800cd8c <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d03d      	beq.n	800cce0 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800cc64:	4a4a      	ldr	r2, [pc, #296]	; (800cd90 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d000      	beq.n	800cc6c <RemapAndLinkDMAtoUARTTx+0x1fc>
 800cc6a:	e749      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800cc6c:	4a49      	ldr	r2, [pc, #292]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cc6e:	23a8      	movs	r3, #168	; 0xa8
 800cc70:	58d4      	ldr	r4, [r2, r3]
 800cc72:	4d49      	ldr	r5, [pc, #292]	; (800cd98 <RemapAndLinkDMAtoUARTTx+0x328>)
 800cc74:	402c      	ands	r4, r5
 800cc76:	50d4      	str	r4, [r2, r3]
 800cc78:	58d5      	ldr	r5, [r2, r3]
 800cc7a:	24a0      	movs	r4, #160	; 0xa0
 800cc7c:	0324      	lsls	r4, r4, #12
 800cc7e:	432c      	orrs	r4, r5
 800cc80:	50d4      	str	r4, [r2, r3]
 800cc82:	e73d      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800cc84:	4a45      	ldr	r2, [pc, #276]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cc86:	23a8      	movs	r3, #168	; 0xa8
 800cc88:	58d4      	ldr	r4, [r2, r3]
 800cc8a:	25f0      	movs	r5, #240	; 0xf0
 800cc8c:	43ac      	bics	r4, r5
 800cc8e:	50d4      	str	r4, [r2, r3]
 800cc90:	58d4      	ldr	r4, [r2, r3]
 800cc92:	3d50      	subs	r5, #80	; 0x50
 800cc94:	432c      	orrs	r4, r5
 800cc96:	50d4      	str	r4, [r2, r3]
 800cc98:	e732      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800cc9a:	4a40      	ldr	r2, [pc, #256]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cc9c:	23a8      	movs	r3, #168	; 0xa8
 800cc9e:	58d4      	ldr	r4, [r2, r3]
 800cca0:	4d3f      	ldr	r5, [pc, #252]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cca2:	402c      	ands	r4, r5
 800cca4:	50d4      	str	r4, [r2, r3]
 800cca6:	58d5      	ldr	r5, [r2, r3]
 800cca8:	24a0      	movs	r4, #160	; 0xa0
 800ccaa:	0224      	lsls	r4, r4, #8
 800ccac:	432c      	orrs	r4, r5
 800ccae:	50d4      	str	r4, [r2, r3]
 800ccb0:	e726      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800ccb2:	4a3a      	ldr	r2, [pc, #232]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ccb4:	23a8      	movs	r3, #168	; 0xa8
 800ccb6:	58d4      	ldr	r4, [r2, r3]
 800ccb8:	4d3a      	ldr	r5, [pc, #232]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800ccba:	402c      	ands	r4, r5
 800ccbc:	50d4      	str	r4, [r2, r3]
 800ccbe:	58d5      	ldr	r5, [r2, r3]
 800ccc0:	24a0      	movs	r4, #160	; 0xa0
 800ccc2:	0524      	lsls	r4, r4, #20
 800ccc4:	432c      	orrs	r4, r5
 800ccc6:	50d4      	str	r4, [r2, r3]
 800ccc8:	e71a      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800ccca:	4a32      	ldr	r2, [pc, #200]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cccc:	23a8      	movs	r3, #168	; 0xa8
 800ccce:	58d4      	ldr	r4, [r2, r3]
 800ccd0:	250f      	movs	r5, #15
 800ccd2:	43ac      	bics	r4, r5
 800ccd4:	50d4      	str	r4, [r2, r3]
 800ccd6:	58d4      	ldr	r4, [r2, r3]
 800ccd8:	3d05      	subs	r5, #5
 800ccda:	432c      	orrs	r4, r5
 800ccdc:	50d4      	str	r4, [r2, r3]
 800ccde:	e70f      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800cce0:	4a2c      	ldr	r2, [pc, #176]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cce2:	23a8      	movs	r3, #168	; 0xa8
 800cce4:	58d4      	ldr	r4, [r2, r3]
 800cce6:	4d2e      	ldr	r5, [pc, #184]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cce8:	402c      	ands	r4, r5
 800ccea:	50d4      	str	r4, [r2, r3]
 800ccec:	58d5      	ldr	r5, [r2, r3]
 800ccee:	24a0      	movs	r4, #160	; 0xa0
 800ccf0:	0224      	lsls	r4, r4, #8
 800ccf2:	432c      	orrs	r4, r5
 800ccf4:	50d4      	str	r4, [r2, r3]
 800ccf6:	e703      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800ccf8:	4a28      	ldr	r2, [pc, #160]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ccfa:	23a8      	movs	r3, #168	; 0xa8
 800ccfc:	58d4      	ldr	r4, [r2, r3]
 800ccfe:	25f0      	movs	r5, #240	; 0xf0
 800cd00:	43ac      	bics	r4, r5
 800cd02:	50d4      	str	r4, [r2, r3]
 800cd04:	58d4      	ldr	r4, [r2, r3]
 800cd06:	3d40      	subs	r5, #64	; 0x40
 800cd08:	432c      	orrs	r4, r5
 800cd0a:	50d4      	str	r4, [r2, r3]
 800cd0c:	e6f8      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800cd0e:	4a23      	ldr	r2, [pc, #140]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cd10:	23a8      	movs	r3, #168	; 0xa8
 800cd12:	58d4      	ldr	r4, [r2, r3]
 800cd14:	4d22      	ldr	r5, [pc, #136]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cd16:	402c      	ands	r4, r5
 800cd18:	50d4      	str	r4, [r2, r3]
 800cd1a:	58d5      	ldr	r5, [r2, r3]
 800cd1c:	24b0      	movs	r4, #176	; 0xb0
 800cd1e:	0224      	lsls	r4, r4, #8
 800cd20:	432c      	orrs	r4, r5
 800cd22:	50d4      	str	r4, [r2, r3]
 800cd24:	e6ec      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800cd26:	4a1d      	ldr	r2, [pc, #116]	; (800cd9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cd28:	23a8      	movs	r3, #168	; 0xa8
 800cd2a:	58d4      	ldr	r4, [r2, r3]
 800cd2c:	4d1d      	ldr	r5, [pc, #116]	; (800cda4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800cd2e:	402c      	ands	r4, r5
 800cd30:	50d4      	str	r4, [r2, r3]
 800cd32:	58d5      	ldr	r5, [r2, r3]
 800cd34:	24b0      	movs	r4, #176	; 0xb0
 800cd36:	0524      	lsls	r4, r4, #20
 800cd38:	432c      	orrs	r4, r5
 800cd3a:	50d4      	str	r4, [r2, r3]
 800cd3c:	e6e0      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800cd3e:	4a15      	ldr	r2, [pc, #84]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cd40:	23a8      	movs	r3, #168	; 0xa8
 800cd42:	58d4      	ldr	r4, [r2, r3]
 800cd44:	250f      	movs	r5, #15
 800cd46:	43ac      	bics	r4, r5
 800cd48:	50d4      	str	r4, [r2, r3]
 800cd4a:	58d4      	ldr	r4, [r2, r3]
 800cd4c:	3d04      	subs	r5, #4
 800cd4e:	432c      	orrs	r4, r5
 800cd50:	50d4      	str	r4, [r2, r3]
 800cd52:	e6d5      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800cd54:	4a0f      	ldr	r2, [pc, #60]	; (800cd94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800cd56:	23a8      	movs	r3, #168	; 0xa8
 800cd58:	58d4      	ldr	r4, [r2, r3]
 800cd5a:	4d11      	ldr	r5, [pc, #68]	; (800cda0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cd5c:	402c      	ands	r4, r5
 800cd5e:	50d4      	str	r4, [r2, r3]
 800cd60:	58d5      	ldr	r5, [r2, r3]
 800cd62:	24b0      	movs	r4, #176	; 0xb0
 800cd64:	0224      	lsls	r4, r4, #8
 800cd66:	432c      	orrs	r4, r5
 800cd68:	50d4      	str	r4, [r2, r3]
 800cd6a:	e6c9      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
 800cd6c:	40013800 	.word	0x40013800
 800cd70:	40004400 	.word	0x40004400
 800cd74:	40004800 	.word	0x40004800
 800cd78:	40004c00 	.word	0x40004c00
 800cd7c:	4002001c 	.word	0x4002001c
 800cd80:	40020044 	.word	0x40020044
 800cd84:	40020080 	.word	0x40020080
 800cd88:	40020408 	.word	0x40020408
 800cd8c:	40020444 	.word	0x40020444
 800cd90:	40020458 	.word	0x40020458
 800cd94:	40020400 	.word	0x40020400
 800cd98:	fff0ffff 	.word	0xfff0ffff
 800cd9c:	40020000 	.word	0x40020000
 800cda0:	ffff0fff 	.word	0xffff0fff
 800cda4:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800cda8:	4ab9      	ldr	r2, [pc, #740]	; (800d090 <RemapAndLinkDMAtoUARTTx+0x620>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d159      	bne.n	800ce62 <RemapAndLinkDMAtoUARTTx+0x3f2>
 800cdae:	680b      	ldr	r3, [r1, #0]
 800cdb0:	4ab8      	ldr	r2, [pc, #736]	; (800d094 <RemapAndLinkDMAtoUARTTx+0x624>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d01b      	beq.n	800cdee <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800cdb6:	4ab8      	ldr	r2, [pc, #736]	; (800d098 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d023      	beq.n	800ce04 <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800cdbc:	4ab7      	ldr	r2, [pc, #732]	; (800d09c <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d02c      	beq.n	800ce1c <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800cdc2:	4ab7      	ldr	r2, [pc, #732]	; (800d0a0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d035      	beq.n	800ce34 <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800cdc8:	4ab6      	ldr	r2, [pc, #728]	; (800d0a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d03d      	beq.n	800ce4a <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800cdce:	4ab6      	ldr	r2, [pc, #728]	; (800d0a8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d000      	beq.n	800cdd6 <RemapAndLinkDMAtoUARTTx+0x366>
 800cdd4:	e694      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800cdd6:	4ab5      	ldr	r2, [pc, #724]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cdd8:	23a8      	movs	r3, #168	; 0xa8
 800cdda:	58d4      	ldr	r4, [r2, r3]
 800cddc:	4db4      	ldr	r5, [pc, #720]	; (800d0b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cdde:	402c      	ands	r4, r5
 800cde0:	50d4      	str	r4, [r2, r3]
 800cde2:	58d5      	ldr	r5, [r2, r3]
 800cde4:	24c0      	movs	r4, #192	; 0xc0
 800cde6:	0324      	lsls	r4, r4, #12
 800cde8:	432c      	orrs	r4, r5
 800cdea:	50d4      	str	r4, [r2, r3]
 800cdec:	e688      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800cdee:	4ab1      	ldr	r2, [pc, #708]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800cdf0:	23a8      	movs	r3, #168	; 0xa8
 800cdf2:	58d4      	ldr	r4, [r2, r3]
 800cdf4:	25f0      	movs	r5, #240	; 0xf0
 800cdf6:	43ac      	bics	r4, r5
 800cdf8:	50d4      	str	r4, [r2, r3]
 800cdfa:	58d4      	ldr	r4, [r2, r3]
 800cdfc:	3d30      	subs	r5, #48	; 0x30
 800cdfe:	432c      	orrs	r4, r5
 800ce00:	50d4      	str	r4, [r2, r3]
 800ce02:	e67d      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800ce04:	4aab      	ldr	r2, [pc, #684]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800ce06:	23a8      	movs	r3, #168	; 0xa8
 800ce08:	58d4      	ldr	r4, [r2, r3]
 800ce0a:	4dab      	ldr	r5, [pc, #684]	; (800d0b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800ce0c:	402c      	ands	r4, r5
 800ce0e:	50d4      	str	r4, [r2, r3]
 800ce10:	58d5      	ldr	r5, [r2, r3]
 800ce12:	24c0      	movs	r4, #192	; 0xc0
 800ce14:	0224      	lsls	r4, r4, #8
 800ce16:	432c      	orrs	r4, r5
 800ce18:	50d4      	str	r4, [r2, r3]
 800ce1a:	e671      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800ce1c:	4aa5      	ldr	r2, [pc, #660]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800ce1e:	23a8      	movs	r3, #168	; 0xa8
 800ce20:	58d4      	ldr	r4, [r2, r3]
 800ce22:	4da6      	ldr	r5, [pc, #664]	; (800d0bc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800ce24:	402c      	ands	r4, r5
 800ce26:	50d4      	str	r4, [r2, r3]
 800ce28:	58d5      	ldr	r5, [r2, r3]
 800ce2a:	24c0      	movs	r4, #192	; 0xc0
 800ce2c:	0524      	lsls	r4, r4, #20
 800ce2e:	432c      	orrs	r4, r5
 800ce30:	50d4      	str	r4, [r2, r3]
 800ce32:	e665      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800ce34:	4a9d      	ldr	r2, [pc, #628]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ce36:	23a8      	movs	r3, #168	; 0xa8
 800ce38:	58d4      	ldr	r4, [r2, r3]
 800ce3a:	250f      	movs	r5, #15
 800ce3c:	43ac      	bics	r4, r5
 800ce3e:	50d4      	str	r4, [r2, r3]
 800ce40:	58d4      	ldr	r4, [r2, r3]
 800ce42:	3d03      	subs	r5, #3
 800ce44:	432c      	orrs	r4, r5
 800ce46:	50d4      	str	r4, [r2, r3]
 800ce48:	e65a      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800ce4a:	4a98      	ldr	r2, [pc, #608]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ce4c:	23a8      	movs	r3, #168	; 0xa8
 800ce4e:	58d4      	ldr	r4, [r2, r3]
 800ce50:	4d99      	ldr	r5, [pc, #612]	; (800d0b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800ce52:	402c      	ands	r4, r5
 800ce54:	50d4      	str	r4, [r2, r3]
 800ce56:	58d5      	ldr	r5, [r2, r3]
 800ce58:	24c0      	movs	r4, #192	; 0xc0
 800ce5a:	0224      	lsls	r4, r4, #8
 800ce5c:	432c      	orrs	r4, r5
 800ce5e:	50d4      	str	r4, [r2, r3]
 800ce60:	e64e      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800ce62:	4a97      	ldr	r2, [pc, #604]	; (800d0c0 <RemapAndLinkDMAtoUARTTx+0x650>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d159      	bne.n	800cf1c <RemapAndLinkDMAtoUARTTx+0x4ac>
 800ce68:	680b      	ldr	r3, [r1, #0]
 800ce6a:	4a8a      	ldr	r2, [pc, #552]	; (800d094 <RemapAndLinkDMAtoUARTTx+0x624>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d01b      	beq.n	800cea8 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800ce70:	4a89      	ldr	r2, [pc, #548]	; (800d098 <RemapAndLinkDMAtoUARTTx+0x628>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d023      	beq.n	800cebe <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800ce76:	4a89      	ldr	r2, [pc, #548]	; (800d09c <RemapAndLinkDMAtoUARTTx+0x62c>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d02c      	beq.n	800ced6 <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800ce7c:	4a88      	ldr	r2, [pc, #544]	; (800d0a0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d035      	beq.n	800ceee <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800ce82:	4a88      	ldr	r2, [pc, #544]	; (800d0a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d03d      	beq.n	800cf04 <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800ce88:	4a87      	ldr	r2, [pc, #540]	; (800d0a8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d000      	beq.n	800ce90 <RemapAndLinkDMAtoUARTTx+0x420>
 800ce8e:	e637      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800ce90:	4a86      	ldr	r2, [pc, #536]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800ce92:	23a8      	movs	r3, #168	; 0xa8
 800ce94:	58d4      	ldr	r4, [r2, r3]
 800ce96:	4d86      	ldr	r5, [pc, #536]	; (800d0b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800ce98:	402c      	ands	r4, r5
 800ce9a:	50d4      	str	r4, [r2, r3]
 800ce9c:	58d5      	ldr	r5, [r2, r3]
 800ce9e:	24d0      	movs	r4, #208	; 0xd0
 800cea0:	0324      	lsls	r4, r4, #12
 800cea2:	432c      	orrs	r4, r5
 800cea4:	50d4      	str	r4, [r2, r3]
 800cea6:	e62b      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800cea8:	4a82      	ldr	r2, [pc, #520]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800ceaa:	23a8      	movs	r3, #168	; 0xa8
 800ceac:	58d4      	ldr	r4, [r2, r3]
 800ceae:	25f0      	movs	r5, #240	; 0xf0
 800ceb0:	43ac      	bics	r4, r5
 800ceb2:	50d4      	str	r4, [r2, r3]
 800ceb4:	58d4      	ldr	r4, [r2, r3]
 800ceb6:	3d20      	subs	r5, #32
 800ceb8:	432c      	orrs	r4, r5
 800ceba:	50d4      	str	r4, [r2, r3]
 800cebc:	e620      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800cebe:	4a7d      	ldr	r2, [pc, #500]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800cec0:	23a8      	movs	r3, #168	; 0xa8
 800cec2:	58d4      	ldr	r4, [r2, r3]
 800cec4:	4d7c      	ldr	r5, [pc, #496]	; (800d0b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cec6:	402c      	ands	r4, r5
 800cec8:	50d4      	str	r4, [r2, r3]
 800ceca:	58d5      	ldr	r5, [r2, r3]
 800cecc:	24d0      	movs	r4, #208	; 0xd0
 800cece:	0224      	lsls	r4, r4, #8
 800ced0:	432c      	orrs	r4, r5
 800ced2:	50d4      	str	r4, [r2, r3]
 800ced4:	e614      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800ced6:	4a77      	ldr	r2, [pc, #476]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800ced8:	23a8      	movs	r3, #168	; 0xa8
 800ceda:	58d4      	ldr	r4, [r2, r3]
 800cedc:	4d77      	ldr	r5, [pc, #476]	; (800d0bc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cede:	402c      	ands	r4, r5
 800cee0:	50d4      	str	r4, [r2, r3]
 800cee2:	58d5      	ldr	r5, [r2, r3]
 800cee4:	24d0      	movs	r4, #208	; 0xd0
 800cee6:	0524      	lsls	r4, r4, #20
 800cee8:	432c      	orrs	r4, r5
 800ceea:	50d4      	str	r4, [r2, r3]
 800ceec:	e608      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800ceee:	4a6f      	ldr	r2, [pc, #444]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cef0:	23a8      	movs	r3, #168	; 0xa8
 800cef2:	58d4      	ldr	r4, [r2, r3]
 800cef4:	250f      	movs	r5, #15
 800cef6:	43ac      	bics	r4, r5
 800cef8:	50d4      	str	r4, [r2, r3]
 800cefa:	58d4      	ldr	r4, [r2, r3]
 800cefc:	3d02      	subs	r5, #2
 800cefe:	432c      	orrs	r4, r5
 800cf00:	50d4      	str	r4, [r2, r3]
 800cf02:	e5fd      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800cf04:	4a69      	ldr	r2, [pc, #420]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cf06:	23a8      	movs	r3, #168	; 0xa8
 800cf08:	58d4      	ldr	r4, [r2, r3]
 800cf0a:	4d6b      	ldr	r5, [pc, #428]	; (800d0b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cf0c:	402c      	ands	r4, r5
 800cf0e:	50d4      	str	r4, [r2, r3]
 800cf10:	58d5      	ldr	r5, [r2, r3]
 800cf12:	24d0      	movs	r4, #208	; 0xd0
 800cf14:	0224      	lsls	r4, r4, #8
 800cf16:	432c      	orrs	r4, r5
 800cf18:	50d4      	str	r4, [r2, r3]
 800cf1a:	e5f1      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800cf1c:	4a69      	ldr	r2, [pc, #420]	; (800d0c4 <RemapAndLinkDMAtoUARTTx+0x654>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d159      	bne.n	800cfd6 <RemapAndLinkDMAtoUARTTx+0x566>
 800cf22:	680b      	ldr	r3, [r1, #0]
 800cf24:	4a5b      	ldr	r2, [pc, #364]	; (800d094 <RemapAndLinkDMAtoUARTTx+0x624>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d01b      	beq.n	800cf62 <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800cf2a:	4a5b      	ldr	r2, [pc, #364]	; (800d098 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d023      	beq.n	800cf78 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800cf30:	4a5a      	ldr	r2, [pc, #360]	; (800d09c <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d02c      	beq.n	800cf90 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800cf36:	4a5a      	ldr	r2, [pc, #360]	; (800d0a0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d035      	beq.n	800cfa8 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800cf3c:	4a59      	ldr	r2, [pc, #356]	; (800d0a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d03d      	beq.n	800cfbe <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800cf42:	4a59      	ldr	r2, [pc, #356]	; (800d0a8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d000      	beq.n	800cf4a <RemapAndLinkDMAtoUARTTx+0x4da>
 800cf48:	e5da      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800cf4a:	4a58      	ldr	r2, [pc, #352]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cf4c:	23a8      	movs	r3, #168	; 0xa8
 800cf4e:	58d4      	ldr	r4, [r2, r3]
 800cf50:	4d57      	ldr	r5, [pc, #348]	; (800d0b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cf52:	402c      	ands	r4, r5
 800cf54:	50d4      	str	r4, [r2, r3]
 800cf56:	58d5      	ldr	r5, [r2, r3]
 800cf58:	24e0      	movs	r4, #224	; 0xe0
 800cf5a:	0324      	lsls	r4, r4, #12
 800cf5c:	432c      	orrs	r4, r5
 800cf5e:	50d4      	str	r4, [r2, r3]
 800cf60:	e5ce      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800cf62:	4a54      	ldr	r2, [pc, #336]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800cf64:	23a8      	movs	r3, #168	; 0xa8
 800cf66:	58d4      	ldr	r4, [r2, r3]
 800cf68:	25f0      	movs	r5, #240	; 0xf0
 800cf6a:	43ac      	bics	r4, r5
 800cf6c:	50d4      	str	r4, [r2, r3]
 800cf6e:	58d4      	ldr	r4, [r2, r3]
 800cf70:	3d10      	subs	r5, #16
 800cf72:	432c      	orrs	r4, r5
 800cf74:	50d4      	str	r4, [r2, r3]
 800cf76:	e5c3      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800cf78:	4a4e      	ldr	r2, [pc, #312]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800cf7a:	23a8      	movs	r3, #168	; 0xa8
 800cf7c:	58d4      	ldr	r4, [r2, r3]
 800cf7e:	4d4e      	ldr	r5, [pc, #312]	; (800d0b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cf80:	402c      	ands	r4, r5
 800cf82:	50d4      	str	r4, [r2, r3]
 800cf84:	58d5      	ldr	r5, [r2, r3]
 800cf86:	24e0      	movs	r4, #224	; 0xe0
 800cf88:	0224      	lsls	r4, r4, #8
 800cf8a:	432c      	orrs	r4, r5
 800cf8c:	50d4      	str	r4, [r2, r3]
 800cf8e:	e5b7      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800cf90:	4a48      	ldr	r2, [pc, #288]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800cf92:	23a8      	movs	r3, #168	; 0xa8
 800cf94:	58d4      	ldr	r4, [r2, r3]
 800cf96:	4d49      	ldr	r5, [pc, #292]	; (800d0bc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cf98:	402c      	ands	r4, r5
 800cf9a:	50d4      	str	r4, [r2, r3]
 800cf9c:	58d5      	ldr	r5, [r2, r3]
 800cf9e:	24e0      	movs	r4, #224	; 0xe0
 800cfa0:	0524      	lsls	r4, r4, #20
 800cfa2:	432c      	orrs	r4, r5
 800cfa4:	50d4      	str	r4, [r2, r3]
 800cfa6:	e5ab      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800cfa8:	4a40      	ldr	r2, [pc, #256]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cfaa:	23a8      	movs	r3, #168	; 0xa8
 800cfac:	58d4      	ldr	r4, [r2, r3]
 800cfae:	250f      	movs	r5, #15
 800cfb0:	43ac      	bics	r4, r5
 800cfb2:	50d4      	str	r4, [r2, r3]
 800cfb4:	58d4      	ldr	r4, [r2, r3]
 800cfb6:	3d01      	subs	r5, #1
 800cfb8:	432c      	orrs	r4, r5
 800cfba:	50d4      	str	r4, [r2, r3]
 800cfbc:	e5a0      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800cfbe:	4a3b      	ldr	r2, [pc, #236]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cfc0:	23a8      	movs	r3, #168	; 0xa8
 800cfc2:	58d4      	ldr	r4, [r2, r3]
 800cfc4:	4d3c      	ldr	r5, [pc, #240]	; (800d0b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cfc6:	402c      	ands	r4, r5
 800cfc8:	50d4      	str	r4, [r2, r3]
 800cfca:	58d5      	ldr	r5, [r2, r3]
 800cfcc:	24e0      	movs	r4, #224	; 0xe0
 800cfce:	0224      	lsls	r4, r4, #8
 800cfd0:	432c      	orrs	r4, r5
 800cfd2:	50d4      	str	r4, [r2, r3]
 800cfd4:	e594      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800cfd6:	4a3c      	ldr	r2, [pc, #240]	; (800d0c8 <RemapAndLinkDMAtoUARTTx+0x658>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d000      	beq.n	800cfde <RemapAndLinkDMAtoUARTTx+0x56e>
 800cfdc:	e590      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
 800cfde:	680b      	ldr	r3, [r1, #0]
 800cfe0:	4a2c      	ldr	r2, [pc, #176]	; (800d094 <RemapAndLinkDMAtoUARTTx+0x624>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d01b      	beq.n	800d01e <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800cfe6:	4a2c      	ldr	r2, [pc, #176]	; (800d098 <RemapAndLinkDMAtoUARTTx+0x628>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d022      	beq.n	800d032 <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800cfec:	4a2b      	ldr	r2, [pc, #172]	; (800d09c <RemapAndLinkDMAtoUARTTx+0x62c>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d02b      	beq.n	800d04a <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800cff2:	4a2b      	ldr	r2, [pc, #172]	; (800d0a0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d034      	beq.n	800d062 <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800cff8:	4a2a      	ldr	r2, [pc, #168]	; (800d0a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d03b      	beq.n	800d076 <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800cffe:	4a2a      	ldr	r2, [pc, #168]	; (800d0a8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d000      	beq.n	800d006 <RemapAndLinkDMAtoUARTTx+0x596>
 800d004:	e57c      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800d006:	4a29      	ldr	r2, [pc, #164]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d008:	23a8      	movs	r3, #168	; 0xa8
 800d00a:	58d4      	ldr	r4, [r2, r3]
 800d00c:	4d28      	ldr	r5, [pc, #160]	; (800d0b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d00e:	402c      	ands	r4, r5
 800d010:	50d4      	str	r4, [r2, r3]
 800d012:	58d5      	ldr	r5, [r2, r3]
 800d014:	24f0      	movs	r4, #240	; 0xf0
 800d016:	0324      	lsls	r4, r4, #12
 800d018:	432c      	orrs	r4, r5
 800d01a:	50d4      	str	r4, [r2, r3]
 800d01c:	e570      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d01e:	4a25      	ldr	r2, [pc, #148]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d020:	23a8      	movs	r3, #168	; 0xa8
 800d022:	58d5      	ldr	r5, [r2, r3]
 800d024:	26f0      	movs	r6, #240	; 0xf0
 800d026:	43b5      	bics	r5, r6
 800d028:	50d5      	str	r5, [r2, r3]
 800d02a:	58d4      	ldr	r4, [r2, r3]
 800d02c:	4334      	orrs	r4, r6
 800d02e:	50d4      	str	r4, [r2, r3]
 800d030:	e566      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d032:	4a20      	ldr	r2, [pc, #128]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d034:	23a8      	movs	r3, #168	; 0xa8
 800d036:	58d4      	ldr	r4, [r2, r3]
 800d038:	4d1f      	ldr	r5, [pc, #124]	; (800d0b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d03a:	402c      	ands	r4, r5
 800d03c:	50d4      	str	r4, [r2, r3]
 800d03e:	58d5      	ldr	r5, [r2, r3]
 800d040:	24f0      	movs	r4, #240	; 0xf0
 800d042:	0224      	lsls	r4, r4, #8
 800d044:	432c      	orrs	r4, r5
 800d046:	50d4      	str	r4, [r2, r3]
 800d048:	e55a      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d04a:	4a1a      	ldr	r2, [pc, #104]	; (800d0b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d04c:	23a8      	movs	r3, #168	; 0xa8
 800d04e:	58d4      	ldr	r4, [r2, r3]
 800d050:	4d1a      	ldr	r5, [pc, #104]	; (800d0bc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d052:	402c      	ands	r4, r5
 800d054:	50d4      	str	r4, [r2, r3]
 800d056:	58d5      	ldr	r5, [r2, r3]
 800d058:	24f0      	movs	r4, #240	; 0xf0
 800d05a:	0524      	lsls	r4, r4, #20
 800d05c:	432c      	orrs	r4, r5
 800d05e:	50d4      	str	r4, [r2, r3]
 800d060:	e54e      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d062:	4a12      	ldr	r2, [pc, #72]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d064:	23a8      	movs	r3, #168	; 0xa8
 800d066:	58d5      	ldr	r5, [r2, r3]
 800d068:	260f      	movs	r6, #15
 800d06a:	43b5      	bics	r5, r6
 800d06c:	50d5      	str	r5, [r2, r3]
 800d06e:	58d4      	ldr	r4, [r2, r3]
 800d070:	4334      	orrs	r4, r6
 800d072:	50d4      	str	r4, [r2, r3]
 800d074:	e544      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d076:	4a0d      	ldr	r2, [pc, #52]	; (800d0ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d078:	23a8      	movs	r3, #168	; 0xa8
 800d07a:	58d4      	ldr	r4, [r2, r3]
 800d07c:	4d0e      	ldr	r5, [pc, #56]	; (800d0b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d07e:	402c      	ands	r4, r5
 800d080:	50d4      	str	r4, [r2, r3]
 800d082:	58d5      	ldr	r5, [r2, r3]
 800d084:	24f0      	movs	r4, #240	; 0xf0
 800d086:	0224      	lsls	r4, r4, #8
 800d088:	432c      	orrs	r4, r5
 800d08a:	50d4      	str	r4, [r2, r3]
 800d08c:	e538      	b.n	800cb00 <RemapAndLinkDMAtoUARTTx+0x90>
 800d08e:	46c0      	nop			; (mov r8, r8)
 800d090:	40005000 	.word	0x40005000
 800d094:	4002001c 	.word	0x4002001c
 800d098:	40020044 	.word	0x40020044
 800d09c:	40020080 	.word	0x40020080
 800d0a0:	40020408 	.word	0x40020408
 800d0a4:	40020444 	.word	0x40020444
 800d0a8:	40020458 	.word	0x40020458
 800d0ac:	40020400 	.word	0x40020400
 800d0b0:	fff0ffff 	.word	0xfff0ffff
 800d0b4:	40020000 	.word	0x40020000
 800d0b8:	ffff0fff 	.word	0xffff0fff
 800d0bc:	f0ffffff 	.word	0xf0ffffff
 800d0c0:	40011400 	.word	0x40011400
 800d0c4:	40011800 	.word	0x40011800
 800d0c8:	40011c00 	.word	0x40011c00

0800d0cc <DMA_MSG_TX_Setup>:
{	
 800d0cc:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d0ce:	4b0d      	ldr	r3, [pc, #52]	; (800d104 <DMA_MSG_TX_Setup+0x38>)
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d012      	beq.n	800d0fc <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800d0d6:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <DMA_MSG_TX_Setup+0x38>)
 800d0d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d010      	beq.n	800d100 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800d0de:	4a09      	ldr	r2, [pc, #36]	; (800d104 <DMA_MSG_TX_Setup+0x38>)
 800d0e0:	2394      	movs	r3, #148	; 0x94
 800d0e2:	58d3      	ldr	r3, [r2, r3]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d007      	beq.n	800d0f8 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d0e8:	0021      	movs	r1, r4
 800d0ea:	f7ff fcc1 	bl	800ca70 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	0020      	movs	r0, r4
 800d0f2:	f7ff f84f 	bl	800c194 <SetupDMAInterrupts>
}
 800d0f6:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800d0f8:	4c03      	ldr	r4, [pc, #12]	; (800d108 <DMA_MSG_TX_Setup+0x3c>)
 800d0fa:	e7f5      	b.n	800d0e8 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800d0fc:	4c01      	ldr	r4, [pc, #4]	; (800d104 <DMA_MSG_TX_Setup+0x38>)
 800d0fe:	e7f3      	b.n	800d0e8 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800d100:	4c02      	ldr	r4, [pc, #8]	; (800d10c <DMA_MSG_TX_Setup+0x40>)
 800d102:	e7f1      	b.n	800d0e8 <DMA_MSG_TX_Setup+0x1c>
 800d104:	20001940 	.word	0x20001940
 800d108:	200019b0 	.word	0x200019b0
 800d10c:	20001978 	.word	0x20001978

0800d110 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800d110:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800d112:	4807      	ldr	r0, [pc, #28]	; (800d130 <CRC_Init+0x20>)
 800d114:	4b07      	ldr	r3, [pc, #28]	; (800d134 <CRC_Init+0x24>)
 800d116:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d118:	2310      	movs	r3, #16
 800d11a:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800d11c:	2300      	movs	r3, #0
 800d11e:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d120:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800d122:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800d124:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d126:	3303      	adds	r3, #3
 800d128:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d12a:	f003 fd01 	bl	8010b30 <HAL_CRC_Init>
}
 800d12e:	bd10      	pop	{r4, pc}
 800d130:	20006d8c 	.word	0x20006d8c
 800d134:	40023000 	.word	0x40023000

0800d138 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d138:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d13a:	4a05      	ldr	r2, [pc, #20]	; (800d150 <HAL_CRC_MspInit+0x18>)
 800d13c:	6951      	ldr	r1, [r2, #20]
 800d13e:	2340      	movs	r3, #64	; 0x40
 800d140:	4319      	orrs	r1, r3
 800d142:	6151      	str	r1, [r2, #20]
 800d144:	6952      	ldr	r2, [r2, #20]
 800d146:	4013      	ands	r3, r2
 800d148:	9301      	str	r3, [sp, #4]
 800d14a:	9b01      	ldr	r3, [sp, #4]
}
 800d14c:	b002      	add	sp, #8
 800d14e:	4770      	bx	lr
 800d150:	40021000 	.word	0x40021000

0800d154 <CalculateCRC8>:
/*-----------------------------------------------------------*/
/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800d154:	b570      	push	{r4, r5, r6, lr}
 800d156:	0004      	movs	r4, r0
 800d158:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800d15a:	2800      	cmp	r0, #0
 800d15c:	d015      	beq.n	800d18a <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800d15e:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800d160:	2900      	cmp	r1, #0
 800d162:	d100      	bne.n	800d166 <CalculateCRC8+0x12>
}
 800d164:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d166:	088e      	lsrs	r6, r1, #2
 800d168:	0032      	movs	r2, r6
 800d16a:	0021      	movs	r1, r4
 800d16c:	4808      	ldr	r0, [pc, #32]	; (800d190 <CalculateCRC8+0x3c>)
 800d16e:	f003 fd3c 	bl	8010bea <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800d172:	07ab      	lsls	r3, r5, #30
 800d174:	d101      	bne.n	800d17a <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d176:	b2c0      	uxtb	r0, r0
 800d178:	e7f4      	b.n	800d164 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800d17a:	0131      	lsls	r1, r6, #4
 800d17c:	1861      	adds	r1, r4, r1
 800d17e:	2201      	movs	r2, #1
 800d180:	4803      	ldr	r0, [pc, #12]	; (800d190 <CalculateCRC8+0x3c>)
 800d182:	f003 fd06 	bl	8010b92 <HAL_CRC_Accumulate>
 800d186:	b2c0      	uxtb	r0, r0
 800d188:	e7ec      	b.n	800d164 <CalculateCRC8+0x10>
	return 0;
 800d18a:	2000      	movs	r0, #0
 800d18c:	e7ea      	b.n	800d164 <CalculateCRC8+0x10>
 800d18e:	46c0      	nop			; (mov r8, r8)
 800d190:	20006d8c 	.word	0x20006d8c

0800d194 <IND_LED_Init>:
	MEMS_GPIO_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800d194:	b500      	push	{lr}
 800d196:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800d198:	2380      	movs	r3, #128	; 0x80
 800d19a:	011b      	lsls	r3, r3, #4
 800d19c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1a6:	3303      	adds	r3, #3
 800d1a8:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d1aa:	2090      	movs	r0, #144	; 0x90
 800d1ac:	a901      	add	r1, sp, #4
 800d1ae:	05c0      	lsls	r0, r0, #23
 800d1b0:	f004 fbbe 	bl	8011930 <HAL_GPIO_Init>
}
 800d1b4:	b007      	add	sp, #28
 800d1b6:	bd00      	pop	{pc}

0800d1b8 <MEMS_GPIO_Init>:

void MEMS_GPIO_Init(void)
{
 800d1b8:	b510      	push	{r4, lr}
 800d1ba:	b086      	sub	sp, #24
  /**I2C2 GPIO Configuration
  PB13     ------> I2C2_SCL
  PB14     ------> I2C2_SDA
  */
	
  GPIO_InitStruct.Pin = _MEMS_I2C2_SCL_PIN;
 800d1bc:	2380      	movs	r3, #128	; 0x80
 800d1be:	019b      	lsls	r3, r3, #6
 800d1c0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d1c2:	2312      	movs	r3, #18
 800d1c4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1c6:	3b11      	subs	r3, #17
 800d1c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1ca:	3302      	adds	r3, #2
 800d1cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800d1ce:	3302      	adds	r3, #2
 800d1d0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(_MEMS_I2C2_SCL_PORT, &GPIO_InitStruct);
 800d1d2:	4c10      	ldr	r4, [pc, #64]	; (800d214 <MEMS_GPIO_Init+0x5c>)
 800d1d4:	a901      	add	r1, sp, #4
 800d1d6:	0020      	movs	r0, r4
 800d1d8:	f004 fbaa 	bl	8011930 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = _MEMS_I2C2_SDA_PIN;
 800d1dc:	2380      	movs	r3, #128	; 0x80
 800d1de:	01db      	lsls	r3, r3, #7
 800d1e0:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(_MEMS_I2C2_SDA_PORT, &GPIO_InitStruct);
 800d1e2:	a901      	add	r1, sp, #4
 800d1e4:	0020      	movs	r0, r4
 800d1e6:	f004 fba3 	bl	8011930 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C2_CLK_ENABLE();
 800d1ea:	4a0b      	ldr	r2, [pc, #44]	; (800d218 <MEMS_GPIO_Init+0x60>)
 800d1ec:	69d1      	ldr	r1, [r2, #28]
 800d1ee:	2080      	movs	r0, #128	; 0x80
 800d1f0:	03c0      	lsls	r0, r0, #15
 800d1f2:	4301      	orrs	r1, r0
 800d1f4:	61d1      	str	r1, [r2, #28]
 800d1f6:	69d3      	ldr	r3, [r2, #28]
 800d1f8:	4003      	ands	r3, r0
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	9b00      	ldr	r3, [sp, #0]
	
  /* I2C2 interrupt Init */
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 800d1fe:	2200      	movs	r2, #0
 800d200:	2101      	movs	r1, #1
 800d202:	2018      	movs	r0, #24
 800d204:	f003 fbca 	bl	801099c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800d208:	2018      	movs	r0, #24
 800d20a:	f003 fbfb 	bl	8010a04 <HAL_NVIC_EnableIRQ>
}
 800d20e:	b006      	add	sp, #24
 800d210:	bd10      	pop	{r4, pc}
 800d212:	46c0      	nop			; (mov r8, r8)
 800d214:	48000400 	.word	0x48000400
 800d218:	40021000 	.word	0x40021000

0800d21c <GPIO_Init>:
{
 800d21c:	b500      	push	{lr}
 800d21e:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d220:	4b19      	ldr	r3, [pc, #100]	; (800d288 <GPIO_Init+0x6c>)
 800d222:	6959      	ldr	r1, [r3, #20]
 800d224:	2080      	movs	r0, #128	; 0x80
 800d226:	0300      	lsls	r0, r0, #12
 800d228:	4301      	orrs	r1, r0
 800d22a:	6159      	str	r1, [r3, #20]
 800d22c:	695a      	ldr	r2, [r3, #20]
 800d22e:	4002      	ands	r2, r0
 800d230:	9201      	str	r2, [sp, #4]
 800d232:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d234:	6959      	ldr	r1, [r3, #20]
 800d236:	2080      	movs	r0, #128	; 0x80
 800d238:	0280      	lsls	r0, r0, #10
 800d23a:	4301      	orrs	r1, r0
 800d23c:	6159      	str	r1, [r3, #20]
 800d23e:	695a      	ldr	r2, [r3, #20]
 800d240:	4002      	ands	r2, r0
 800d242:	9202      	str	r2, [sp, #8]
 800d244:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d246:	6959      	ldr	r1, [r3, #20]
 800d248:	2080      	movs	r0, #128	; 0x80
 800d24a:	0340      	lsls	r0, r0, #13
 800d24c:	4301      	orrs	r1, r0
 800d24e:	6159      	str	r1, [r3, #20]
 800d250:	695a      	ldr	r2, [r3, #20]
 800d252:	4002      	ands	r2, r0
 800d254:	9203      	str	r2, [sp, #12]
 800d256:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800d258:	6959      	ldr	r1, [r3, #20]
 800d25a:	2080      	movs	r0, #128	; 0x80
 800d25c:	02c0      	lsls	r0, r0, #11
 800d25e:	4301      	orrs	r1, r0
 800d260:	6159      	str	r1, [r3, #20]
 800d262:	695a      	ldr	r2, [r3, #20]
 800d264:	4002      	ands	r2, r0
 800d266:	9204      	str	r2, [sp, #16]
 800d268:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d26a:	695a      	ldr	r2, [r3, #20]
 800d26c:	2180      	movs	r1, #128	; 0x80
 800d26e:	03c9      	lsls	r1, r1, #15
 800d270:	430a      	orrs	r2, r1
 800d272:	615a      	str	r2, [r3, #20]
 800d274:	695b      	ldr	r3, [r3, #20]
 800d276:	400b      	ands	r3, r1
 800d278:	9305      	str	r3, [sp, #20]
 800d27a:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800d27c:	f7ff ff8a 	bl	800d194 <IND_LED_Init>
	MEMS_GPIO_Init();
 800d280:	f7ff ff9a 	bl	800d1b8 <MEMS_GPIO_Init>
}
 800d284:	b007      	add	sp, #28
 800d286:	bd00      	pop	{pc}
 800d288:	40021000 	.word	0x40021000

0800d28c <GetPortGPIOs>:
/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	000e      	movs	r6, r1
 800d290:	0015      	movs	r5, r2
 800d292:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800d294:	f000 fe14 	bl	800dec0 <GetUart>
	
	if (huart == &huart1) 
 800d298:	4b2b      	ldr	r3, [pc, #172]	; (800d348 <GetPortGPIOs+0xbc>)
 800d29a:	4298      	cmp	r0, r3
 800d29c:	d01a      	beq.n	800d2d4 <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800d29e:	4b2b      	ldr	r3, [pc, #172]	; (800d34c <GetPortGPIOs+0xc0>)
 800d2a0:	4298      	cmp	r0, r3
 800d2a2:	d025      	beq.n	800d2f0 <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800d2a4:	4b2a      	ldr	r3, [pc, #168]	; (800d350 <GetPortGPIOs+0xc4>)
 800d2a6:	4298      	cmp	r0, r3
 800d2a8:	d02d      	beq.n	800d306 <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800d2aa:	4b2a      	ldr	r3, [pc, #168]	; (800d354 <GetPortGPIOs+0xc8>)
 800d2ac:	4298      	cmp	r0, r3
 800d2ae:	d036      	beq.n	800d31e <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800d2b0:	4b29      	ldr	r3, [pc, #164]	; (800d358 <GetPortGPIOs+0xcc>)
 800d2b2:	4298      	cmp	r0, r3
 800d2b4:	d03e      	beq.n	800d334 <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800d2b6:	4a29      	ldr	r2, [pc, #164]	; (800d35c <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800d2b8:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800d2ba:	4290      	cmp	r0, r2
 800d2bc:	d116      	bne.n	800d2ec <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800d2be:	2390      	movs	r3, #144	; 0x90
 800d2c0:	05db      	lsls	r3, r3, #23
 800d2c2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800d2c4:	2210      	movs	r2, #16
 800d2c6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800d2c8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800d2ca:	2320      	movs	r3, #32
 800d2cc:	9a04      	ldr	r2, [sp, #16]
 800d2ce:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	e00b      	b.n	800d2ec <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800d2d4:	2390      	movs	r3, #144	; 0x90
 800d2d6:	05db      	lsls	r3, r3, #23
 800d2d8:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800d2da:	2280      	movs	r2, #128	; 0x80
 800d2dc:	0092      	lsls	r2, r2, #2
 800d2de:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800d2e0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800d2e2:	2380      	movs	r3, #128	; 0x80
 800d2e4:	00db      	lsls	r3, r3, #3
 800d2e6:	9a04      	ldr	r2, [sp, #16]
 800d2e8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d2ea:	2300      	movs	r3, #0
	
	return result;	
}
 800d2ec:	0018      	movs	r0, r3
 800d2ee:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800d2f0:	2390      	movs	r3, #144	; 0x90
 800d2f2:	05db      	lsls	r3, r3, #23
 800d2f4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800d2f6:	2204      	movs	r2, #4
 800d2f8:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800d2fa:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800d2fc:	2308      	movs	r3, #8
 800d2fe:	9a04      	ldr	r2, [sp, #16]
 800d300:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	e7f2      	b.n	800d2ec <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800d306:	4b16      	ldr	r3, [pc, #88]	; (800d360 <GetPortGPIOs+0xd4>)
 800d308:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800d30a:	2280      	movs	r2, #128	; 0x80
 800d30c:	00d2      	lsls	r2, r2, #3
 800d30e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800d310:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800d312:	2380      	movs	r3, #128	; 0x80
 800d314:	011b      	lsls	r3, r3, #4
 800d316:	9a04      	ldr	r2, [sp, #16]
 800d318:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d31a:	2300      	movs	r3, #0
 800d31c:	e7e6      	b.n	800d2ec <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800d31e:	2390      	movs	r3, #144	; 0x90
 800d320:	05db      	lsls	r3, r3, #23
 800d322:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800d324:	2201      	movs	r2, #1
 800d326:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800d328:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800d32a:	2302      	movs	r3, #2
 800d32c:	9a04      	ldr	r2, [sp, #16]
 800d32e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d330:	2300      	movs	r3, #0
 800d332:	e7db      	b.n	800d2ec <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800d334:	4b0a      	ldr	r3, [pc, #40]	; (800d360 <GetPortGPIOs+0xd4>)
 800d336:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800d338:	2208      	movs	r2, #8
 800d33a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800d33c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800d33e:	2310      	movs	r3, #16
 800d340:	9a04      	ldr	r2, [sp, #16]
 800d342:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	e7d1      	b.n	800d2ec <GetPortGPIOs+0x60>
 800d348:	20006bcc 	.word	0x20006bcc
 800d34c:	20006d1c 	.word	0x20006d1c
 800d350:	20006aec 	.word	0x20006aec
 800d354:	20006cac 	.word	0x20006cac
 800d358:	20006b5c 	.word	0x20006b5c
 800d35c:	20006c3c 	.word	0x20006c3c
 800d360:	48000400 	.word	0x48000400

0800d364 <IsFactoryReset>:
/* --- Check for factory reset condition: 
				- P1 TXD is connected to last port RXD    
*/
uint8_t IsFactoryReset(void)
{
 800d364:	b570      	push	{r4, r5, r6, lr}
 800d366:	b092      	sub	sp, #72	; 0x48
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800d368:	4b39      	ldr	r3, [pc, #228]	; (800d450 <IsFactoryReset+0xec>)
 800d36a:	6959      	ldr	r1, [r3, #20]
 800d36c:	2080      	movs	r0, #128	; 0x80
 800d36e:	0280      	lsls	r0, r0, #10
 800d370:	4301      	orrs	r1, r0
 800d372:	6159      	str	r1, [r3, #20]
 800d374:	695a      	ldr	r2, [r3, #20]
 800d376:	4002      	ands	r2, r0
 800d378:	9203      	str	r2, [sp, #12]
 800d37a:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d37c:	6959      	ldr	r1, [r3, #20]
 800d37e:	2080      	movs	r0, #128	; 0x80
 800d380:	02c0      	lsls	r0, r0, #11
 800d382:	4301      	orrs	r1, r0
 800d384:	6159      	str	r1, [r3, #20]
 800d386:	695a      	ldr	r2, [r3, #20]
 800d388:	4002      	ands	r2, r0
 800d38a:	9204      	str	r2, [sp, #16]
 800d38c:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800d38e:	6959      	ldr	r1, [r3, #20]
 800d390:	2080      	movs	r0, #128	; 0x80
 800d392:	0300      	lsls	r0, r0, #12
 800d394:	4301      	orrs	r1, r0
 800d396:	6159      	str	r1, [r3, #20]
 800d398:	695a      	ldr	r2, [r3, #20]
 800d39a:	4002      	ands	r2, r0
 800d39c:	9205      	str	r2, [sp, #20]
 800d39e:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800d3a0:	695a      	ldr	r2, [r3, #20]
 800d3a2:	2180      	movs	r1, #128	; 0x80
 800d3a4:	0349      	lsls	r1, r1, #13
 800d3a6:	430a      	orrs	r2, r1
 800d3a8:	615a      	str	r2, [r3, #20]
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	400b      	ands	r3, r1
 800d3ae:	9306      	str	r3, [sp, #24]
 800d3b0:	9b06      	ldr	r3, [sp, #24]
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d3b2:	2522      	movs	r5, #34	; 0x22
 800d3b4:	446d      	add	r5, sp
 800d3b6:	ab08      	add	r3, sp, #32
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	ab0b      	add	r3, sp, #44	; 0x2c
 800d3bc:	002a      	movs	r2, r5
 800d3be:	a90c      	add	r1, sp, #48	; 0x30
 800d3c0:	2001      	movs	r0, #1
 800d3c2:	f7ff ff63 	bl	800d28c <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d3c6:	ac07      	add	r4, sp, #28
 800d3c8:	9400      	str	r4, [sp, #0]
 800d3ca:	ab09      	add	r3, sp, #36	; 0x24
 800d3cc:	221e      	movs	r2, #30
 800d3ce:	446a      	add	r2, sp
 800d3d0:	a90a      	add	r1, sp, #40	; 0x28
 800d3d2:	2006      	movs	r0, #6
 800d3d4:	f7ff ff5a 	bl	800d28c <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3dc:	2600      	movs	r6, #0
 800d3de:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d3e0:	882b      	ldrh	r3, [r5, #0]
 800d3e2:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d3e4:	a90d      	add	r1, sp, #52	; 0x34
 800d3e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d3e8:	f004 faa2 	bl	8011930 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d3ec:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800d3ee:	2302      	movs	r3, #2
 800d3f0:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d3f2:	8823      	ldrh	r3, [r4, #0]
 800d3f4:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d3f6:	a90d      	add	r1, sp, #52	; 0x34
 800d3f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3fa:	f004 fa99 	bl	8011930 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800d3fe:	8829      	ldrh	r1, [r5, #0]
 800d400:	2200      	movs	r2, #0
 800d402:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d404:	f004 fb7a 	bl	8011afc <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800d408:	2005      	movs	r0, #5
 800d40a:	f000 fb7f 	bl	800db0c <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800d40e:	8821      	ldrh	r1, [r4, #0]
 800d410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d412:	f004 fb6d 	bl	8011af0 <HAL_GPIO_ReadPin>
 800d416:	2800      	cmp	r0, #0
 800d418:	d006      	beq.n	800d428 <IsFactoryReset+0xc4>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d41a:	4b0e      	ldr	r3, [pc, #56]	; (800d454 <IsFactoryReset+0xf0>)
 800d41c:	2201      	movs	r2, #1
 800d41e:	4252      	negs	r2, r2
 800d420:	601a      	str	r2, [r3, #0]
	
	return 0;
 800d422:	2000      	movs	r0, #0
}
 800d424:	b012      	add	sp, #72	; 0x48
 800d426:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800d428:	2322      	movs	r3, #34	; 0x22
 800d42a:	446b      	add	r3, sp
 800d42c:	8819      	ldrh	r1, [r3, #0]
 800d42e:	2201      	movs	r2, #1
 800d430:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d432:	f004 fb63 	bl	8011afc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800d436:	2005      	movs	r0, #5
 800d438:	f000 fb68 	bl	800db0c <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800d43c:	ab07      	add	r3, sp, #28
 800d43e:	8819      	ldrh	r1, [r3, #0]
 800d440:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d442:	f004 fb55 	bl	8011af0 <HAL_GPIO_ReadPin>
 800d446:	2801      	cmp	r0, #1
 800d448:	d1e7      	bne.n	800d41a <IsFactoryReset+0xb6>
			return 1;
 800d44a:	2001      	movs	r0, #1
 800d44c:	e7ea      	b.n	800d424 <IsFactoryReset+0xc0>
 800d44e:	46c0      	nop			; (mov r8, r8)
 800d450:	40021000 	.word	0x40021000
 800d454:	20007ff0 	.word	0x20007ff0

0800d458 <MX_I2C2_Init>:
  MX_I2C2_Init();
}

//-- Configure indicator LED
 void MX_I2C2_Init(void)
{
 800d458:	b510      	push	{r4, lr}

  hi2c2.Instance = I2C2;
 800d45a:	4c0d      	ldr	r4, [pc, #52]	; (800d490 <MX_I2C2_Init+0x38>)
 800d45c:	4b0d      	ldr	r3, [pc, #52]	; (800d494 <MX_I2C2_Init+0x3c>)
 800d45e:	6023      	str	r3, [r4, #0]
  /* hi2c2.Init.Timing = 0x2010091A; */ /* fast mode: 400 KHz */
  hi2c2.Init.Timing = 0x20303E5D; /* Standard mode: 100 KHz */
 800d460:	4b0d      	ldr	r3, [pc, #52]	; (800d498 <MX_I2C2_Init+0x40>)
 800d462:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	60a3      	str	r3, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d468:	2201      	movs	r2, #1
 800d46a:	60e2      	str	r2, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d46c:	6123      	str	r3, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800d46e:	6163      	str	r3, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d470:	61a3      	str	r3, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d472:	61e3      	str	r3, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d474:	6223      	str	r3, [r4, #32]
  HAL_I2C_Init(&hi2c2);
 800d476:	0020      	movs	r0, r4
 800d478:	f004 fcc4 	bl	8011e04 <HAL_I2C_Init>

  /** Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 800d47c:	2100      	movs	r1, #0
 800d47e:	0020      	movs	r0, r4
 800d480:	f004 fe8c 	bl	801219c <HAL_I2CEx_ConfigAnalogFilter>

  /** Configure Digital filter */
  HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 800d484:	2100      	movs	r1, #0
 800d486:	0020      	movs	r0, r4
 800d488:	f004 fecc 	bl	8012224 <HAL_I2CEx_ConfigDigitalFilter>
}
 800d48c:	bd10      	pop	{r4, pc}
 800d48e:	46c0      	nop			; (mov r8, r8)
 800d490:	20006db0 	.word	0x20006db0
 800d494:	40005800 	.word	0x40005800
 800d498:	20303e5d 	.word	0x20303e5d

0800d49c <MX_I2C_Init>:
{
 800d49c:	b500      	push	{lr}
 800d49e:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d4a0:	4b18      	ldr	r3, [pc, #96]	; (800d504 <MX_I2C_Init+0x68>)
 800d4a2:	6959      	ldr	r1, [r3, #20]
 800d4a4:	2080      	movs	r0, #128	; 0x80
 800d4a6:	0300      	lsls	r0, r0, #12
 800d4a8:	4301      	orrs	r1, r0
 800d4aa:	6159      	str	r1, [r3, #20]
 800d4ac:	695a      	ldr	r2, [r3, #20]
 800d4ae:	4002      	ands	r2, r0
 800d4b0:	9201      	str	r2, [sp, #4]
 800d4b2:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d4b4:	6959      	ldr	r1, [r3, #20]
 800d4b6:	2080      	movs	r0, #128	; 0x80
 800d4b8:	0280      	lsls	r0, r0, #10
 800d4ba:	4301      	orrs	r1, r0
 800d4bc:	6159      	str	r1, [r3, #20]
 800d4be:	695a      	ldr	r2, [r3, #20]
 800d4c0:	4002      	ands	r2, r0
 800d4c2:	9202      	str	r2, [sp, #8]
 800d4c4:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d4c6:	6959      	ldr	r1, [r3, #20]
 800d4c8:	2080      	movs	r0, #128	; 0x80
 800d4ca:	0340      	lsls	r0, r0, #13
 800d4cc:	4301      	orrs	r1, r0
 800d4ce:	6159      	str	r1, [r3, #20]
 800d4d0:	695a      	ldr	r2, [r3, #20]
 800d4d2:	4002      	ands	r2, r0
 800d4d4:	9203      	str	r2, [sp, #12]
 800d4d6:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d4d8:	6959      	ldr	r1, [r3, #20]
 800d4da:	2080      	movs	r0, #128	; 0x80
 800d4dc:	02c0      	lsls	r0, r0, #11
 800d4de:	4301      	orrs	r1, r0
 800d4e0:	6159      	str	r1, [r3, #20]
 800d4e2:	695a      	ldr	r2, [r3, #20]
 800d4e4:	4002      	ands	r2, r0
 800d4e6:	9204      	str	r2, [sp, #16]
 800d4e8:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();   // for HSE and Boot0
 800d4ea:	695a      	ldr	r2, [r3, #20]
 800d4ec:	2180      	movs	r1, #128	; 0x80
 800d4ee:	03c9      	lsls	r1, r1, #15
 800d4f0:	430a      	orrs	r2, r1
 800d4f2:	615a      	str	r2, [r3, #20]
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	400b      	ands	r3, r1
 800d4f8:	9305      	str	r3, [sp, #20]
 800d4fa:	9b05      	ldr	r3, [sp, #20]
  MX_I2C2_Init();
 800d4fc:	f7ff ffac 	bl	800d458 <MX_I2C2_Init>
}
 800d500:	b007      	add	sp, #28
 800d502:	bd00      	pop	{pc}
 800d504:	40021000 	.word	0x40021000

0800d508 <LSM6DS3_I2C_Write>:

uint8_t LSM6DS3_I2C_Write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer, uint16_t nBytesToWrite)
{
 800d508:	b510      	push	{r4, lr}
 800d50a:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Write(handle, LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH, WriteAddr, sizeof(WriteAddr), 
 800d50c:	b289      	uxth	r1, r1
 800d50e:	2464      	movs	r4, #100	; 0x64
 800d510:	9402      	str	r4, [sp, #8]
 800d512:	9301      	str	r3, [sp, #4]
 800d514:	9200      	str	r2, [sp, #0]
 800d516:	2301      	movs	r3, #1
 800d518:	000a      	movs	r2, r1
 800d51a:	21d6      	movs	r1, #214	; 0xd6
 800d51c:	f004 fcd0 	bl	8011ec0 <HAL_I2C_Mem_Write>
 800d520:	1e43      	subs	r3, r0, #1
 800d522:	4198      	sbcs	r0, r3
 800d524:	b2c0      	uxtb	r0, r0
																							pBuffer, nBytesToWrite, 100) != HAL_OK) {
		return 1;
	}
	return 0;
}
 800d526:	b004      	add	sp, #16
 800d528:	bd10      	pop	{r4, pc}

0800d52a <LSM6DS3_I2C_Read>:

uint8_t LSM6DS3_I2C_Read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer, uint16_t nBytesToRead)
{
 800d52a:	b510      	push	{r4, lr}
 800d52c:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Read(handle, LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH, ReadAddr, sizeof(ReadAddr), 
 800d52e:	b289      	uxth	r1, r1
 800d530:	2464      	movs	r4, #100	; 0x64
 800d532:	9402      	str	r4, [sp, #8]
 800d534:	9301      	str	r3, [sp, #4]
 800d536:	9200      	str	r2, [sp, #0]
 800d538:	2301      	movs	r3, #1
 800d53a:	000a      	movs	r2, r1
 800d53c:	21d6      	movs	r1, #214	; 0xd6
 800d53e:	f004 fd77 	bl	8012030 <HAL_I2C_Mem_Read>
 800d542:	1e43      	subs	r3, r0, #1
 800d544:	4198      	sbcs	r0, r3
 800d546:	b2c0      	uxtb	r0, r0
		pBuffer, nBytesToRead, 100) != HAL_OK) {
			return 1;
	}
	return 0;
}
 800d548:	b004      	add	sp, #16
 800d54a:	bd10      	pop	{r4, pc}

0800d54c <LSM303AGR_MAG_I2C_Write>:
	}
	return 0;
}

uint8_t LSM303AGR_MAG_I2C_Write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer, uint16_t nBytesToWrite)
{
 800d54c:	b510      	push	{r4, lr}
 800d54e:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Write(handle, LSM303AGR_MAG_I2C_ADDRESS, WriteAddr, sizeof(WriteAddr), 
 800d550:	b289      	uxth	r1, r1
 800d552:	2464      	movs	r4, #100	; 0x64
 800d554:	9402      	str	r4, [sp, #8]
 800d556:	9301      	str	r3, [sp, #4]
 800d558:	9200      	str	r2, [sp, #0]
 800d55a:	2301      	movs	r3, #1
 800d55c:	000a      	movs	r2, r1
 800d55e:	213c      	movs	r1, #60	; 0x3c
 800d560:	f004 fcae 	bl	8011ec0 <HAL_I2C_Mem_Write>
 800d564:	1e43      	subs	r3, r0, #1
 800d566:	4198      	sbcs	r0, r3
 800d568:	b2c0      	uxtb	r0, r0
																							pBuffer, nBytesToWrite, 100) != HAL_OK) {
		return 1;
	}
	return 0;
}
 800d56a:	b004      	add	sp, #16
 800d56c:	bd10      	pop	{r4, pc}

0800d56e <LSM303AGR_MAG_I2C_Read>:

uint8_t LSM303AGR_MAG_I2C_Read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer, uint16_t nBytesToRead)
{
 800d56e:	b510      	push	{r4, lr}
 800d570:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Read(handle, LSM303AGR_MAG_I2C_ADDRESS, ReadAddr, sizeof(ReadAddr), 
 800d572:	b289      	uxth	r1, r1
 800d574:	2464      	movs	r4, #100	; 0x64
 800d576:	9402      	str	r4, [sp, #8]
 800d578:	9301      	str	r3, [sp, #4]
 800d57a:	9200      	str	r2, [sp, #0]
 800d57c:	2301      	movs	r3, #1
 800d57e:	000a      	movs	r2, r1
 800d580:	213c      	movs	r1, #60	; 0x3c
 800d582:	f004 fd55 	bl	8012030 <HAL_I2C_Mem_Read>
 800d586:	1e43      	subs	r3, r0, #1
 800d588:	4198      	sbcs	r0, r3
 800d58a:	b2c0      	uxtb	r0, r0
		pBuffer, nBytesToRead, 100) != HAL_OK) {
			return 1;
	}
	return 0;
}
 800d58c:	b004      	add	sp, #16
 800d58e:	bd10      	pop	{r4, pc}

0800d590 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d590:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d592:	f003 f9d9 	bl	8010948 <HAL_IncTick>
  osSystickHandler();  
 800d596:	f001 fa2d 	bl	800e9f4 <osSystickHandler>

}
 800d59a:	bd10      	pop	{r4, pc}

0800d59c <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d59c:	e7fe      	b.n	800d59c <HardFault_Handler>
	...

0800d5a0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d5a0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d5a2:	4802      	ldr	r0, [pc, #8]	; (800d5ac <USART1_IRQHandler+0xc>)
 800d5a4:	f006 fb83 	bl	8013cae <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d5a8:	bd10      	pop	{r4, pc}
 800d5aa:	46c0      	nop			; (mov r8, r8)
 800d5ac:	20006bcc 	.word	0x20006bcc

0800d5b0 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d5b0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d5b2:	4802      	ldr	r0, [pc, #8]	; (800d5bc <USART2_IRQHandler+0xc>)
 800d5b4:	f006 fb7b 	bl	8013cae <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d5b8:	bd10      	pop	{r4, pc}
 800d5ba:	46c0      	nop			; (mov r8, r8)
 800d5bc:	20006d1c 	.word	0x20006d1c

0800d5c0 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d5c0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d5c2:	4806      	ldr	r0, [pc, #24]	; (800d5dc <USART3_8_IRQHandler+0x1c>)
 800d5c4:	f006 fb73 	bl	8013cae <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d5c8:	4805      	ldr	r0, [pc, #20]	; (800d5e0 <USART3_8_IRQHandler+0x20>)
 800d5ca:	f006 fb70 	bl	8013cae <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d5ce:	4805      	ldr	r0, [pc, #20]	; (800d5e4 <USART3_8_IRQHandler+0x24>)
 800d5d0:	f006 fb6d 	bl	8013cae <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d5d4:	4804      	ldr	r0, [pc, #16]	; (800d5e8 <USART3_8_IRQHandler+0x28>)
 800d5d6:	f006 fb6a 	bl	8013cae <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d5da:	bd10      	pop	{r4, pc}
 800d5dc:	20006aec 	.word	0x20006aec
 800d5e0:	20006cac 	.word	0x20006cac
 800d5e4:	20006b5c 	.word	0x20006b5c
 800d5e8:	20006c3c 	.word	0x20006c3c

0800d5ec <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800d5ec:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800d5ee:	2001      	movs	r0, #1
 800d5f0:	f7fa f91e 	bl	8007830 <DMA_IRQHandler>
	
}
 800d5f4:	bd10      	pop	{r4, pc}
	...

0800d5f8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d5f8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d5fa:	4b0c      	ldr	r3, [pc, #48]	; (800d62c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	06db      	lsls	r3, r3, #27
 800d600:	d408      	bmi.n	800d614 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d602:	4b0b      	ldr	r3, [pc, #44]	; (800d630 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	05db      	lsls	r3, r3, #23
 800d608:	d408      	bmi.n	800d61c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d60a:	4b09      	ldr	r3, [pc, #36]	; (800d630 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	06db      	lsls	r3, r3, #27
 800d610:	d408      	bmi.n	800d624 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800d612:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800d614:	2005      	movs	r0, #5
 800d616:	f7fa f90b 	bl	8007830 <DMA_IRQHandler>
 800d61a:	e7fa      	b.n	800d612 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800d61c:	2002      	movs	r0, #2
 800d61e:	f7fa f907 	bl	8007830 <DMA_IRQHandler>
 800d622:	e7f6      	b.n	800d612 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d624:	4803      	ldr	r0, [pc, #12]	; (800d634 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d626:	f003 fbdf 	bl	8010de8 <HAL_DMA_IRQHandler>
}
 800d62a:	e7f2      	b.n	800d612 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800d62c:	40020400 	.word	0x40020400
 800d630:	40020000 	.word	0x40020000
 800d634:	20001940 	.word	0x20001940

0800d638 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d638:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d63a:	4b14      	ldr	r3, [pc, #80]	; (800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	03db      	lsls	r3, r3, #15
 800d640:	d413      	bmi.n	800d66a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d642:	4b12      	ldr	r3, [pc, #72]	; (800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	02db      	lsls	r3, r3, #11
 800d648:	d413      	bmi.n	800d672 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d64a:	4b11      	ldr	r3, [pc, #68]	; (800d690 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	05db      	lsls	r3, r3, #23
 800d650:	d413      	bmi.n	800d67a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d652:	4b0e      	ldr	r3, [pc, #56]	; (800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	04db      	lsls	r3, r3, #19
 800d658:	d413      	bmi.n	800d682 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d65a:	4b0c      	ldr	r3, [pc, #48]	; (800d68c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	01db      	lsls	r3, r3, #7
 800d660:	d506      	bpl.n	800d670 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d662:	480c      	ldr	r0, [pc, #48]	; (800d694 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800d664:	f003 fbc0 	bl	8010de8 <HAL_DMA_IRQHandler>
	}
}
 800d668:	e002      	b.n	800d670 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800d66a:	2003      	movs	r0, #3
 800d66c:	f7fa f8e0 	bl	8007830 <DMA_IRQHandler>
}
 800d670:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d672:	2004      	movs	r0, #4
 800d674:	f7fa f8dc 	bl	8007830 <DMA_IRQHandler>
 800d678:	e7fa      	b.n	800d670 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800d67a:	2006      	movs	r0, #6
 800d67c:	f7fa f8d8 	bl	8007830 <DMA_IRQHandler>
 800d680:	e7f6      	b.n	800d670 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d682:	4805      	ldr	r0, [pc, #20]	; (800d698 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800d684:	f003 fbb0 	bl	8010de8 <HAL_DMA_IRQHandler>
 800d688:	e7f2      	b.n	800d670 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800d68a:	46c0      	nop			; (mov r8, r8)
 800d68c:	40020000 	.word	0x40020000
 800d690:	40020400 	.word	0x40020400
 800d694:	200019b0 	.word	0x200019b0
 800d698:	20001978 	.word	0x20001978

0800d69c <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d69c:	b510      	push	{r4, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d6a6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d001      	beq.n	800d6b0 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d6ac:	f7fe fe1e 	bl	800c2ec <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d6b0:	0020      	movs	r0, r4
 800d6b2:	f7fd ff97 	bl	800b5e4 <GetPort>
 800d6b6:	0080      	lsls	r0, r0, #2
 800d6b8:	4b03      	ldr	r3, [pc, #12]	; (800d6c8 <HAL_UART_TxCpltCallback+0x2c>)
 800d6ba:	58c0      	ldr	r0, [r0, r3]
 800d6bc:	a901      	add	r1, sp, #4
 800d6be:	f001 fd1d 	bl	800f0fc <xQueueGiveFromISR>
}
 800d6c2:	b002      	add	sp, #8
 800d6c4:	bd10      	pop	{r4, pc}
 800d6c6:	46c0      	nop			; (mov r8, r8)
 800d6c8:	20006a98 	.word	0x20006a98

0800d6cc <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d6cc:	b510      	push	{r4, lr}
 800d6ce:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d6d0:	2369      	movs	r3, #105	; 0x69
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d6d6:	f7fd ff85 	bl	800b5e4 <GetPort>
	if (portStatus[port] == STREAM) {
 800d6da:	4b0c      	ldr	r3, [pc, #48]	; (800d70c <HAL_UART_ErrorCallback+0x40>)
 800d6dc:	5c1b      	ldrb	r3, [r3, r0]
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d005      	beq.n	800d6ee <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d6e2:	4b0b      	ldr	r3, [pc, #44]	; (800d710 <HAL_UART_ErrorCallback+0x44>)
 800d6e4:	1818      	adds	r0, r3, r0
 800d6e6:	3801      	subs	r0, #1
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	7003      	strb	r3, [r0, #0]
	}	
}
 800d6ec:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d6ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	685a      	ldr	r2, [r3, #4]
 800d6f4:	b292      	uxth	r2, r2
 800d6f6:	3801      	subs	r0, #1
 800d6f8:	0080      	lsls	r0, r0, #2
 800d6fa:	4b06      	ldr	r3, [pc, #24]	; (800d714 <HAL_UART_ErrorCallback+0x48>)
 800d6fc:	58c3      	ldr	r3, [r0, r3]
 800d6fe:	6819      	ldr	r1, [r3, #0]
 800d700:	3128      	adds	r1, #40	; 0x28
 800d702:	0020      	movs	r0, r4
 800d704:	f005 febc 	bl	8013480 <HAL_UART_Receive_DMA>
 800d708:	e7f0      	b.n	800d6ec <HAL_UART_ErrorCallback+0x20>
 800d70a:	46c0      	nop			; (mov r8, r8)
 800d70c:	20001168 	.word	0x20001168
 800d710:	20001334 	.word	0x20001334
 800d714:	20001514 	.word	0x20001514

0800d718 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d718:	b510      	push	{r4, lr}
 800d71a:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800d71c:	f7fd ff62 	bl	800b5e4 <GetPort>
 800d720:	4b13      	ldr	r3, [pc, #76]	; (800d770 <HAL_UART_RxCpltCallback+0x58>)
 800d722:	5c1b      	ldrb	r3, [r3, r0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d006      	beq.n	800d736 <HAL_UART_RxCpltCallback+0x1e>
 800d728:	0020      	movs	r0, r4
 800d72a:	f7fd ff5b 	bl	800b5e4 <GetPort>
 800d72e:	4b10      	ldr	r3, [pc, #64]	; (800d770 <HAL_UART_RxCpltCallback+0x58>)
 800d730:	5c1b      	ldrb	r3, [r3, r0]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d11a      	bne.n	800d76c <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800d736:	0020      	movs	r0, r4
 800d738:	f7fd ff54 	bl	800b5e4 <GetPort>
 800d73c:	4b0d      	ldr	r3, [pc, #52]	; (800d774 <HAL_UART_RxCpltCallback+0x5c>)
 800d73e:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800d740:	0020      	movs	r0, r4
 800d742:	f7fd ff4f 	bl	800b5e4 <GetPort>
 800d746:	4b0a      	ldr	r3, [pc, #40]	; (800d770 <HAL_UART_RxCpltCallback+0x58>)
 800d748:	2205      	movs	r2, #5
 800d74a:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800d74c:	0020      	movs	r0, r4
 800d74e:	f7fd ff49 	bl	800b5e4 <GetPort>
 800d752:	4b09      	ldr	r3, [pc, #36]	; (800d778 <HAL_UART_RxCpltCallback+0x60>)
 800d754:	1818      	adds	r0, r3, r0
 800d756:	3801      	subs	r0, #1
 800d758:	2300      	movs	r3, #0
 800d75a:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800d75c:	0020      	movs	r0, r4
 800d75e:	f7fd ff41 	bl	800b5e4 <GetPort>
 800d762:	4b06      	ldr	r3, [pc, #24]	; (800d77c <HAL_UART_RxCpltCallback+0x64>)
 800d764:	1818      	adds	r0, r3, r0
 800d766:	3801      	subs	r0, #1
 800d768:	2301      	movs	r3, #1
 800d76a:	7003      	strb	r3, [r0, #0]
	}
}
 800d76c:	bd10      	pop	{r4, pc}
 800d76e:	46c0      	nop			; (mov r8, r8)
 800d770:	20001168 	.word	0x20001168
 800d774:	20006a18 	.word	0x20006a18
 800d778:	200014bc 	.word	0x200014bc
 800d77c:	20001334 	.word	0x20001334

0800d780 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800d780:	b672      	cpsid	i
 800d782:	e7fe      	b.n	800d782 <vApplicationStackOverflowHook+0x2>

0800d784 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800d784:	b672      	cpsid	i
 800d786:	e7fe      	b.n	800d786 <vApplicationMallocFailedHook+0x2>

0800d788 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d78a:	46ce      	mov	lr, r9
 800d78c:	b500      	push	{lr}
 800d78e:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d790:	ac05      	add	r4, sp, #20
 800d792:	4b34      	ldr	r3, [pc, #208]	; (800d864 <RTC_CalendarConfig+0xdc>)
 800d794:	0022      	movs	r2, r4
 800d796:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d798:	c243      	stmia	r2!, {r0, r1, r6}
 800d79a:	aa02      	add	r2, sp, #8
 800d79c:	4b32      	ldr	r3, [pc, #200]	; (800d868 <RTC_CalendarConfig+0xe0>)
 800d79e:	cb03      	ldmia	r3!, {r0, r1}
 800d7a0:	c203      	stmia	r2!, {r0, r1}
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d7a6:	2015      	movs	r0, #21
 800d7a8:	ab02      	add	r3, sp, #8
 800d7aa:	469c      	mov	ip, r3
 800d7ac:	4460      	add	r0, ip
 800d7ae:	f006 fb0e 	bl	8013dce <atoi>
 800d7b2:	b2c3      	uxtb	r3, r0
 800d7b4:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800d7b6:	2600      	movs	r6, #0
 800d7b8:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800d7ba:	a806      	add	r0, sp, #24
 800d7bc:	f006 fb07 	bl	8013dce <atoi>
 800d7c0:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800d7c2:	70e6      	strb	r6, [r4, #3]
 800d7c4:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d7c6:	4e29      	ldr	r6, [pc, #164]	; (800d86c <RTC_CalendarConfig+0xe4>)
 800d7c8:	e002      	b.n	800d7d0 <RTC_CalendarConfig+0x48>
 800d7ca:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800d7cc:	2c0d      	cmp	r4, #13
 800d7ce:	d009      	beq.n	800d7e4 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d7d0:	00a3      	lsls	r3, r4, #2
 800d7d2:	3b04      	subs	r3, #4
 800d7d4:	58f1      	ldr	r1, [r6, r3]
 800d7d6:	a805      	add	r0, sp, #20
 800d7d8:	f7f2 fc94 	bl	8000104 <strcmp>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d1f4      	bne.n	800d7ca <RTC_CalendarConfig+0x42>
			month = i + 1;
 800d7e0:	b2e5      	uxtb	r5, r4
 800d7e2:	e7f2      	b.n	800d7ca <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d7e4:	ab02      	add	r3, sp, #8
 800d7e6:	1d98      	adds	r0, r3, #6
 800d7e8:	f006 faf1 	bl	8013dce <atoi>
 800d7ec:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800d7ee:	ac05      	add	r4, sp, #20
 800d7f0:	2600      	movs	r6, #0
 800d7f2:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800d7f4:	ab02      	add	r3, sp, #8
 800d7f6:	1cd8      	adds	r0, r3, #3
 800d7f8:	f006 fae9 	bl	8013dce <atoi>
 800d7fc:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800d7fe:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800d800:	a802      	add	r0, sp, #8
 800d802:	f006 fae4 	bl	8013dce <atoi>
 800d806:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d808:	a90d      	add	r1, sp, #52	; 0x34
 800d80a:	464b      	mov	r3, r9
 800d80c:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800d80e:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d810:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d812:	2301      	movs	r3, #1
 800d814:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d816:	2200      	movs	r2, #0
 800d818:	4815      	ldr	r0, [pc, #84]	; (800d870 <RTC_CalendarConfig+0xe8>)
 800d81a:	f005 fb7d 	bl	8012f18 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800d81e:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d820:	2800      	cmp	r0, #0
 800d822:	d119      	bne.n	800d858 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800d824:	a908      	add	r1, sp, #32
 800d826:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800d828:	9b01      	ldr	r3, [sp, #4]
 800d82a:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800d82c:	9b00      	ldr	r3, [sp, #0]
 800d82e:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d830:	2300      	movs	r3, #0
 800d832:	720b      	strb	r3, [r1, #8]
 800d834:	4a0f      	ldr	r2, [pc, #60]	; (800d874 <RTC_CalendarConfig+0xec>)
 800d836:	3018      	adds	r0, #24
 800d838:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d83a:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d83c:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d83e:	2200      	movs	r2, #0
 800d840:	480b      	ldr	r0, [pc, #44]	; (800d870 <RTC_CalendarConfig+0xe8>)
 800d842:	f005 fae3 	bl	8012e0c <HAL_RTC_SetTime>
		return BOS_ERROR;
 800d846:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d848:	2800      	cmp	r0, #0
 800d84a:	d105      	bne.n	800d858 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d84c:	4a0a      	ldr	r2, [pc, #40]	; (800d878 <RTC_CalendarConfig+0xf0>)
 800d84e:	2101      	movs	r1, #1
 800d850:	4807      	ldr	r0, [pc, #28]	; (800d870 <RTC_CalendarConfig+0xe8>)
 800d852:	f005 fc25 	bl	80130a0 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	0018      	movs	r0, r3
 800d85a:	b00e      	add	sp, #56	; 0x38
 800d85c:	bc04      	pop	{r2}
 800d85e:	4691      	mov	r9, r2
 800d860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d862:	46c0      	nop			; (mov r8, r8)
 800d864:	08018d48 	.word	0x08018d48
 800d868:	08018d6c 	.word	0x08018d6c
 800d86c:	20000020 	.word	0x20000020
 800d870:	20006dec 	.word	0x20006dec
 800d874:	20006a18 	.word	0x20006a18
 800d878:	000032f2 	.word	0x000032f2

0800d87c <RTC_Init>:
{
 800d87c:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d87e:	4a1c      	ldr	r2, [pc, #112]	; (800d8f0 <RTC_Init+0x74>)
 800d880:	6a11      	ldr	r1, [r2, #32]
 800d882:	2380      	movs	r3, #128	; 0x80
 800d884:	021b      	lsls	r3, r3, #8
 800d886:	430b      	orrs	r3, r1
 800d888:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800d88a:	481a      	ldr	r0, [pc, #104]	; (800d8f4 <RTC_Init+0x78>)
 800d88c:	4b1a      	ldr	r3, [pc, #104]	; (800d8f8 <RTC_Init+0x7c>)
 800d88e:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d890:	2300      	movs	r3, #0
 800d892:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d894:	227c      	movs	r2, #124	; 0x7c
 800d896:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d898:	4a18      	ldr	r2, [pc, #96]	; (800d8fc <RTC_Init+0x80>)
 800d89a:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d89c:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d89e:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d8a0:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d8a2:	f005 fa55 	bl	8012d50 <HAL_RTC_Init>
 800d8a6:	23ff      	movs	r3, #255	; 0xff
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d11e      	bne.n	800d8ea <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	4811      	ldr	r0, [pc, #68]	; (800d8f4 <RTC_Init+0x78>)
 800d8b0:	f005 fbfc 	bl	80130ac <HAL_RTCEx_BKUPRead>
 800d8b4:	4b12      	ldr	r3, [pc, #72]	; (800d900 <RTC_Init+0x84>)
 800d8b6:	4298      	cmp	r0, r3
 800d8b8:	d10e      	bne.n	800d8d8 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d8ba:	4b0d      	ldr	r3, [pc, #52]	; (800d8f0 <RTC_Init+0x74>)
 800d8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8be:	011b      	lsls	r3, r3, #4
 800d8c0:	d502      	bpl.n	800d8c8 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800d8c2:	4b10      	ldr	r3, [pc, #64]	; (800d904 <RTC_Init+0x88>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d8c8:	4b09      	ldr	r3, [pc, #36]	; (800d8f0 <RTC_Init+0x74>)
 800d8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8cc:	015b      	lsls	r3, r3, #5
 800d8ce:	d505      	bpl.n	800d8dc <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800d8d0:	4b0c      	ldr	r3, [pc, #48]	; (800d904 <RTC_Init+0x88>)
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	701a      	strb	r2, [r3, #0]
 800d8d6:	e001      	b.n	800d8dc <RTC_Init+0x60>
    RTC_CalendarConfig();
 800d8d8:	f7ff ff56 	bl	800d788 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d8dc:	4a04      	ldr	r2, [pc, #16]	; (800d8f0 <RTC_Init+0x74>)
 800d8de:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d8e0:	2380      	movs	r3, #128	; 0x80
 800d8e2:	045b      	lsls	r3, r3, #17
 800d8e4:	430b      	orrs	r3, r1
 800d8e6:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	0018      	movs	r0, r3
 800d8ec:	bd10      	pop	{r4, pc}
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	40021000 	.word	0x40021000
 800d8f4:	20006dec 	.word	0x20006dec
 800d8f8:	40002800 	.word	0x40002800
 800d8fc:	000007cf 	.word	0x000007cf
 800d900:	000032f2 	.word	0x000032f2
 800d904:	20001b38 	.word	0x20001b38

0800d908 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d90a:	46c6      	mov	lr, r8
 800d90c:	b500      	push	{lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	ac0c      	add	r4, sp, #48	; 0x30
 800d912:	7827      	ldrb	r7, [r4, #0]
 800d914:	ac0d      	add	r4, sp, #52	; 0x34
 800d916:	7824      	ldrb	r4, [r4, #0]
 800d918:	46a0      	mov	r8, r4
 800d91a:	ac0e      	add	r4, sp, #56	; 0x38
 800d91c:	7825      	ldrb	r5, [r4, #0]
 800d91e:	ac0f      	add	r4, sp, #60	; 0x3c
 800d920:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d922:	ac05      	add	r4, sp, #20
 800d924:	3230      	adds	r2, #48	; 0x30
 800d926:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d928:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d92a:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d92c:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d92e:	2200      	movs	r2, #0
 800d930:	0021      	movs	r1, r4
 800d932:	481f      	ldr	r0, [pc, #124]	; (800d9b0 <BOS_CalendarConfig+0xa8>)
 800d934:	f005 faf0 	bl	8012f18 <HAL_RTC_SetDate>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d136      	bne.n	800d9aa <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d93c:	466b      	mov	r3, sp
 800d93e:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d940:	4642      	mov	r2, r8
 800d942:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d944:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d946:	2300      	movs	r3, #0
 800d948:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800d94a:	2e01      	cmp	r6, #1
 800d94c:	d020      	beq.n	800d990 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d94e:	2e02      	cmp	r6, #2
 800d950:	d024      	beq.n	800d99c <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d952:	4b18      	ldr	r3, [pc, #96]	; (800d9b4 <BOS_CalendarConfig+0xac>)
 800d954:	2218      	movs	r2, #24
 800d956:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d958:	2200      	movs	r2, #0
 800d95a:	4669      	mov	r1, sp
 800d95c:	4814      	ldr	r0, [pc, #80]	; (800d9b0 <BOS_CalendarConfig+0xa8>)
 800d95e:	f005 fa55 	bl	8012e0c <HAL_RTC_SetTime>
		return BOS_ERROR;
 800d962:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d964:	2800      	cmp	r0, #0
 800d966:	d10e      	bne.n	800d986 <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d968:	4a12      	ldr	r2, [pc, #72]	; (800d9b4 <BOS_CalendarConfig+0xac>)
 800d96a:	7b53      	ldrb	r3, [r2, #13]
 800d96c:	021b      	lsls	r3, r3, #8
 800d96e:	7911      	ldrb	r1, [r2, #4]
 800d970:	4319      	orrs	r1, r3
 800d972:	308d      	adds	r0, #141	; 0x8d
 800d974:	0040      	lsls	r0, r0, #1
 800d976:	f7fa f849 	bl	8007a0c <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d97a:	4a0f      	ldr	r2, [pc, #60]	; (800d9b8 <BOS_CalendarConfig+0xb0>)
 800d97c:	2101      	movs	r1, #1
 800d97e:	480c      	ldr	r0, [pc, #48]	; (800d9b0 <BOS_CalendarConfig+0xa8>)
 800d980:	f005 fb8e 	bl	80130a0 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d984:	2300      	movs	r3, #0
}
 800d986:	0018      	movs	r0, r3
 800d988:	b006      	add	sp, #24
 800d98a:	bc04      	pop	{r2}
 800d98c:	4690      	mov	r8, r2
 800d98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d990:	466a      	mov	r2, sp
 800d992:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d994:	4b07      	ldr	r3, [pc, #28]	; (800d9b4 <BOS_CalendarConfig+0xac>)
 800d996:	220c      	movs	r2, #12
 800d998:	735a      	strb	r2, [r3, #13]
 800d99a:	e7dd      	b.n	800d958 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d99c:	2340      	movs	r3, #64	; 0x40
 800d99e:	466a      	mov	r2, sp
 800d9a0:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d9a2:	4b04      	ldr	r3, [pc, #16]	; (800d9b4 <BOS_CalendarConfig+0xac>)
 800d9a4:	220c      	movs	r2, #12
 800d9a6:	735a      	strb	r2, [r3, #13]
 800d9a8:	e7d6      	b.n	800d958 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800d9aa:	23ff      	movs	r3, #255	; 0xff
 800d9ac:	e7eb      	b.n	800d986 <BOS_CalendarConfig+0x7e>
 800d9ae:	46c0      	nop			; (mov r8, r8)
 800d9b0:	20006dec 	.word	0x20006dec
 800d9b4:	20006a18 	.word	0x20006a18
 800d9b8:	000032f2 	.word	0x000032f2

0800d9bc <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d9bc:	b530      	push	{r4, r5, lr}
 800d9be:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d9c0:	4d16      	ldr	r5, [pc, #88]	; (800da1c <GetTimeDate+0x60>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	a902      	add	r1, sp, #8
 800d9c6:	0028      	movs	r0, r5
 800d9c8:	f005 fb22 	bl	8013010 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d9cc:	ac07      	add	r4, sp, #28
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	0021      	movs	r1, r4
 800d9d2:	0028      	movs	r0, r5
 800d9d4:	f005 fb42 	bl	801305c <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d9d8:	4b11      	ldr	r3, [pc, #68]	; (800da20 <GetTimeDate+0x64>)
 800d9da:	aa02      	add	r2, sp, #8
 800d9dc:	7a12      	ldrb	r2, [r2, #8]
 800d9de:	09d2      	lsrs	r2, r2, #7
 800d9e0:	3201      	adds	r2, #1
 800d9e2:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d9e4:	9a03      	ldr	r2, [sp, #12]
 800d9e6:	9201      	str	r2, [sp, #4]
 800d9e8:	0852      	lsrs	r2, r2, #1
 800d9ea:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d9ec:	aa02      	add	r2, sp, #8
 800d9ee:	7892      	ldrb	r2, [r2, #2]
 800d9f0:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d9f2:	aa02      	add	r2, sp, #8
 800d9f4:	7852      	ldrb	r2, [r2, #1]
 800d9f6:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d9f8:	aa02      	add	r2, sp, #8
 800d9fa:	7812      	ldrb	r2, [r2, #0]
 800d9fc:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d9fe:	78a2      	ldrb	r2, [r4, #2]
 800da00:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800da02:	7862      	ldrb	r2, [r4, #1]
 800da04:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800da06:	7822      	ldrb	r2, [r4, #0]
 800da08:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800da0a:	78e2      	ldrb	r2, [r4, #3]
 800da0c:	21fa      	movs	r1, #250	; 0xfa
 800da0e:	00c9      	lsls	r1, r1, #3
 800da10:	468c      	mov	ip, r1
 800da12:	4462      	add	r2, ip
 800da14:	831a      	strh	r2, [r3, #24]
}
 800da16:	b009      	add	sp, #36	; 0x24
 800da18:	bd30      	pop	{r4, r5, pc}
 800da1a:	46c0      	nop			; (mov r8, r8)
 800da1c:	20006dec 	.word	0x20006dec
 800da20:	20006a18 	.word	0x20006a18

0800da24 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800da24:	b530      	push	{r4, r5, lr}
 800da26:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800da28:	4a12      	ldr	r2, [pc, #72]	; (800da74 <TIM_USEC_Init+0x50>)
 800da2a:	69d1      	ldr	r1, [r2, #28]
 800da2c:	2080      	movs	r0, #128	; 0x80
 800da2e:	0040      	lsls	r0, r0, #1
 800da30:	4301      	orrs	r1, r0
 800da32:	61d1      	str	r1, [r2, #28]
 800da34:	69d3      	ldr	r3, [r2, #28]
 800da36:	4003      	ands	r3, r0
 800da38:	9301      	str	r3, [sp, #4]
 800da3a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800da3c:	4c0e      	ldr	r4, [pc, #56]	; (800da78 <TIM_USEC_Init+0x54>)
 800da3e:	4b0f      	ldr	r3, [pc, #60]	; (800da7c <TIM_USEC_Init+0x58>)
 800da40:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800da42:	f005 f89d 	bl	8012b80 <HAL_RCC_GetPCLK1Freq>
 800da46:	490e      	ldr	r1, [pc, #56]	; (800da80 <TIM_USEC_Init+0x5c>)
 800da48:	f7f2 fb82 	bl	8000150 <__udivsi3>
 800da4c:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800da4e:	2500      	movs	r5, #0
 800da50:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800da52:	4b0c      	ldr	r3, [pc, #48]	; (800da84 <TIM_USEC_Init+0x60>)
 800da54:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800da56:	0020      	movs	r0, r4
 800da58:	f005 fbb8 	bl	80131cc <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800da5c:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800da5e:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800da60:	a902      	add	r1, sp, #8
 800da62:	0020      	movs	r0, r4
 800da64:	f005 fbcc 	bl	8013200 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800da68:	0020      	movs	r0, r4
 800da6a:	f005 fb26 	bl	80130ba <HAL_TIM_Base_Start>
}
 800da6e:	b005      	add	sp, #20
 800da70:	bd30      	pop	{r4, r5, pc}
 800da72:	46c0      	nop			; (mov r8, r8)
 800da74:	40021000 	.word	0x40021000
 800da78:	20006e48 	.word	0x20006e48
 800da7c:	40002000 	.word	0x40002000
 800da80:	000f4240 	.word	0x000f4240
 800da84:	0000ffff 	.word	0x0000ffff

0800da88 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800da88:	b530      	push	{r4, r5, lr}
 800da8a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800da8c:	4a12      	ldr	r2, [pc, #72]	; (800dad8 <TIM_MSEC_Init+0x50>)
 800da8e:	6991      	ldr	r1, [r2, #24]
 800da90:	2080      	movs	r0, #128	; 0x80
 800da92:	0240      	lsls	r0, r0, #9
 800da94:	4301      	orrs	r1, r0
 800da96:	6191      	str	r1, [r2, #24]
 800da98:	6993      	ldr	r3, [r2, #24]
 800da9a:	4003      	ands	r3, r0
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800daa0:	4c0e      	ldr	r4, [pc, #56]	; (800dadc <TIM_MSEC_Init+0x54>)
 800daa2:	4b0f      	ldr	r3, [pc, #60]	; (800dae0 <TIM_MSEC_Init+0x58>)
 800daa4:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800daa6:	f005 f86b 	bl	8012b80 <HAL_RCC_GetPCLK1Freq>
 800daaa:	21fa      	movs	r1, #250	; 0xfa
 800daac:	0089      	lsls	r1, r1, #2
 800daae:	f7f2 fb4f 	bl	8000150 <__udivsi3>
 800dab2:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dab4:	2500      	movs	r5, #0
 800dab6:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800dab8:	4b0a      	ldr	r3, [pc, #40]	; (800dae4 <TIM_MSEC_Init+0x5c>)
 800daba:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800dabc:	0020      	movs	r0, r4
 800dabe:	f005 fb85 	bl	80131cc <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dac2:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dac4:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800dac6:	a902      	add	r1, sp, #8
 800dac8:	0020      	movs	r0, r4
 800daca:	f005 fb99 	bl	8013200 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800dace:	0020      	movs	r0, r4
 800dad0:	f005 faf3 	bl	80130ba <HAL_TIM_Base_Start>
}
 800dad4:	b005      	add	sp, #20
 800dad6:	bd30      	pop	{r4, r5, pc}
 800dad8:	40021000 	.word	0x40021000
 800dadc:	20006e0c 	.word	0x20006e0c
 800dae0:	40014000 	.word	0x40014000
 800dae4:	0000ffff 	.word	0x0000ffff

0800dae8 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800dae8:	b510      	push	{r4, lr}
 800daea:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800daec:	f002 fdc8 	bl	8010680 <vPortEnterCritical>
	
	if (Delay)
 800daf0:	2c00      	cmp	r4, #0
 800daf2:	d006      	beq.n	800db02 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800daf4:	4b04      	ldr	r3, [pc, #16]	; (800db08 <StartMicroDelay+0x20>)
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800dafa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dafc:	1a5b      	subs	r3, r3, r1
 800dafe:	42a3      	cmp	r3, r4
 800db00:	d9fb      	bls.n	800dafa <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800db02:	f002 fdc9 	bl	8010698 <vPortExitCritical>
}
 800db06:	bd10      	pop	{r4, pc}
 800db08:	20006e48 	.word	0x20006e48

0800db0c <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800db0c:	b510      	push	{r4, lr}
 800db0e:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800db10:	f002 fdb6 	bl	8010680 <vPortEnterCritical>
	
	if (Delay)
 800db14:	2c00      	cmp	r4, #0
 800db16:	d006      	beq.n	800db26 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800db18:	4b04      	ldr	r3, [pc, #16]	; (800db2c <StartMilliDelay+0x20>)
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800db1e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800db20:	1a5b      	subs	r3, r3, r1
 800db22:	42a3      	cmp	r3, r4
 800db24:	d9fb      	bls.n	800db1e <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800db26:	f002 fdb7 	bl	8010698 <vPortExitCritical>
}
 800db2a:	bd10      	pop	{r4, pc}
 800db2c:	20006e0c 	.word	0x20006e0c

0800db30 <MX_USART1_UART_Init>:
FlagStatus UartTxReady = RESET;

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800db30:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800db32:	4809      	ldr	r0, [pc, #36]	; (800db58 <MX_USART1_UART_Init+0x28>)
 800db34:	4b09      	ldr	r3, [pc, #36]	; (800db5c <MX_USART1_UART_Init+0x2c>)
 800db36:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db38:	23e1      	movs	r3, #225	; 0xe1
 800db3a:	031b      	lsls	r3, r3, #12
 800db3c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800db3e:	2300      	movs	r3, #0
 800db40:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800db42:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800db44:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800db46:	220c      	movs	r2, #12
 800db48:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db4a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800db4c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800db4e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db50:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800db52:	f005 ffd5 	bl	8013b00 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800db56:	bd10      	pop	{r4, pc}
 800db58:	20006bcc 	.word	0x20006bcc
 800db5c:	40013800 	.word	0x40013800

0800db60 <MX_USART2_UART_Init>:

/*-----------------------------------------------------------*/	
/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800db60:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800db62:	4809      	ldr	r0, [pc, #36]	; (800db88 <MX_USART2_UART_Init+0x28>)
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <MX_USART2_UART_Init+0x2c>)
 800db66:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db68:	23e1      	movs	r3, #225	; 0xe1
 800db6a:	031b      	lsls	r3, r3, #12
 800db6c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800db6e:	2300      	movs	r3, #0
 800db70:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800db72:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800db74:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800db76:	220c      	movs	r2, #12
 800db78:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db7a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800db7c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800db7e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db80:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800db82:	f005 ffbd 	bl	8013b00 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800db86:	bd10      	pop	{r4, pc}
 800db88:	20006d1c 	.word	0x20006d1c
 800db8c:	40004400 	.word	0x40004400

0800db90 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800db90:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800db92:	4809      	ldr	r0, [pc, #36]	; (800dbb8 <MX_USART3_UART_Init+0x28>)
 800db94:	4b09      	ldr	r3, [pc, #36]	; (800dbbc <MX_USART3_UART_Init+0x2c>)
 800db96:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db98:	23e1      	movs	r3, #225	; 0xe1
 800db9a:	031b      	lsls	r3, r3, #12
 800db9c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800db9e:	2300      	movs	r3, #0
 800dba0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800dba2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800dba4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800dba6:	220c      	movs	r2, #12
 800dba8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dbaa:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dbac:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dbae:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dbb0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dbb2:	f005 ffa5 	bl	8013b00 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800dbb6:	bd10      	pop	{r4, pc}
 800dbb8:	20006aec 	.word	0x20006aec
 800dbbc:	40004800 	.word	0x40004800

0800dbc0 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800dbc0:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800dbc2:	4809      	ldr	r0, [pc, #36]	; (800dbe8 <MX_USART4_UART_Init+0x28>)
 800dbc4:	4b09      	ldr	r3, [pc, #36]	; (800dbec <MX_USART4_UART_Init+0x2c>)
 800dbc6:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dbc8:	23e1      	movs	r3, #225	; 0xe1
 800dbca:	031b      	lsls	r3, r3, #12
 800dbcc:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dbd2:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dbd4:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800dbd6:	220c      	movs	r2, #12
 800dbd8:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dbda:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dbdc:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dbde:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dbe0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800dbe2:	f005 ff8d 	bl	8013b00 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800dbe6:	bd10      	pop	{r4, pc}
 800dbe8:	20006cac 	.word	0x20006cac
 800dbec:	40004c00 	.word	0x40004c00

0800dbf0 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800dbf0:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800dbf2:	4809      	ldr	r0, [pc, #36]	; (800dc18 <MX_USART5_UART_Init+0x28>)
 800dbf4:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <MX_USART5_UART_Init+0x2c>)
 800dbf6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dbf8:	23e1      	movs	r3, #225	; 0xe1
 800dbfa:	031b      	lsls	r3, r3, #12
 800dbfc:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800dc02:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800dc04:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800dc06:	220c      	movs	r2, #12
 800dc08:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc0a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc0c:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc0e:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc10:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800dc12:	f005 ff75 	bl	8013b00 <HAL_UART_Init>
	#if _P6pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800dc16:	bd10      	pop	{r4, pc}
 800dc18:	20006b5c 	.word	0x20006b5c
 800dc1c:	40005000 	.word	0x40005000

0800dc20 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800dc20:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800dc22:	4809      	ldr	r0, [pc, #36]	; (800dc48 <MX_USART6_UART_Init+0x28>)
 800dc24:	4b09      	ldr	r3, [pc, #36]	; (800dc4c <MX_USART6_UART_Init+0x2c>)
 800dc26:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dc28:	23e1      	movs	r3, #225	; 0xe1
 800dc2a:	031b      	lsls	r3, r3, #12
 800dc2c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800dc32:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800dc34:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800dc36:	220c      	movs	r2, #12
 800dc38:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc3a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc3c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc3e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc40:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800dc42:	f005 ff5d 	bl	8013b00 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800dc46:	bd10      	pop	{r4, pc}
 800dc48:	20006c3c 	.word	0x20006c3c
 800dc4c:	40011400 	.word	0x40011400

0800dc50 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc52:	46ce      	mov	lr, r9
 800dc54:	b500      	push	{lr}
 800dc56:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800dc58:	6803      	ldr	r3, [r0, #0]
 800dc5a:	4a91      	ldr	r2, [pc, #580]	; (800dea0 <HAL_UART_MspInit+0x250>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d015      	beq.n	800dc8c <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800dc60:	4a90      	ldr	r2, [pc, #576]	; (800dea4 <HAL_UART_MspInit+0x254>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d040      	beq.n	800dce8 <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800dc66:	4a90      	ldr	r2, [pc, #576]	; (800dea8 <HAL_UART_MspInit+0x258>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d069      	beq.n	800dd40 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800dc6c:	4a8f      	ldr	r2, [pc, #572]	; (800deac <HAL_UART_MspInit+0x25c>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d100      	bne.n	800dc74 <HAL_UART_MspInit+0x24>
 800dc72:	e092      	b.n	800dd9a <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800dc74:	4a8e      	ldr	r2, [pc, #568]	; (800deb0 <HAL_UART_MspInit+0x260>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d100      	bne.n	800dc7c <HAL_UART_MspInit+0x2c>
 800dc7a:	e0b9      	b.n	800ddf0 <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800dc7c:	4a8d      	ldr	r2, [pc, #564]	; (800deb4 <HAL_UART_MspInit+0x264>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d100      	bne.n	800dc84 <HAL_UART_MspInit+0x34>
 800dc82:	e0e0      	b.n	800de46 <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800dc84:	b00c      	add	sp, #48	; 0x30
 800dc86:	bc04      	pop	{r2}
 800dc88:	4691      	mov	r9, r2
 800dc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800dc8c:	4a8a      	ldr	r2, [pc, #552]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800dc8e:	6991      	ldr	r1, [r2, #24]
 800dc90:	2080      	movs	r0, #128	; 0x80
 800dc92:	01c0      	lsls	r0, r0, #7
 800dc94:	4301      	orrs	r1, r0
 800dc96:	6191      	str	r1, [r2, #24]
 800dc98:	6993      	ldr	r3, [r2, #24]
 800dc9a:	4003      	ands	r3, r0
 800dc9c:	9301      	str	r3, [sp, #4]
 800dc9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800dca0:	2380      	movs	r3, #128	; 0x80
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dca6:	2702      	movs	r7, #2
 800dca8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dcaa:	2401      	movs	r4, #1
 800dcac:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dcae:	2603      	movs	r6, #3
 800dcb0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800dcb2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800dcb4:	2590      	movs	r5, #144	; 0x90
 800dcb6:	05ed      	lsls	r5, r5, #23
 800dcb8:	a907      	add	r1, sp, #28
 800dcba:	0028      	movs	r0, r5
 800dcbc:	f003 fe38 	bl	8011930 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800dcc0:	2380      	movs	r3, #128	; 0x80
 800dcc2:	00db      	lsls	r3, r3, #3
 800dcc4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcc6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dcc8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dcca:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800dccc:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800dcce:	a907      	add	r1, sp, #28
 800dcd0:	0028      	movs	r0, r5
 800dcd2:	f003 fe2d 	bl	8011930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	2101      	movs	r1, #1
 800dcda:	201b      	movs	r0, #27
 800dcdc:	f002 fe5e 	bl	801099c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800dce0:	201b      	movs	r0, #27
 800dce2:	f002 fe8f 	bl	8010a04 <HAL_NVIC_EnableIRQ>
 800dce6:	e7cd      	b.n	800dc84 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800dce8:	4a73      	ldr	r2, [pc, #460]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800dcea:	69d1      	ldr	r1, [r2, #28]
 800dcec:	2080      	movs	r0, #128	; 0x80
 800dcee:	0280      	lsls	r0, r0, #10
 800dcf0:	4301      	orrs	r1, r0
 800dcf2:	61d1      	str	r1, [r2, #28]
 800dcf4:	69d3      	ldr	r3, [r2, #28]
 800dcf6:	4003      	ands	r3, r0
 800dcf8:	9302      	str	r3, [sp, #8]
 800dcfa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800dcfc:	2304      	movs	r3, #4
 800dcfe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd00:	2702      	movs	r7, #2
 800dd02:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd04:	2401      	movs	r4, #1
 800dd06:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd08:	2603      	movs	r6, #3
 800dd0a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800dd0c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800dd0e:	2590      	movs	r5, #144	; 0x90
 800dd10:	05ed      	lsls	r5, r5, #23
 800dd12:	a907      	add	r1, sp, #28
 800dd14:	0028      	movs	r0, r5
 800dd16:	f003 fe0b 	bl	8011930 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800dd1a:	2308      	movs	r3, #8
 800dd1c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd1e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd20:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd22:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800dd24:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800dd26:	a907      	add	r1, sp, #28
 800dd28:	0028      	movs	r0, r5
 800dd2a:	f003 fe01 	bl	8011930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800dd2e:	2200      	movs	r2, #0
 800dd30:	2101      	movs	r1, #1
 800dd32:	201c      	movs	r0, #28
 800dd34:	f002 fe32 	bl	801099c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800dd38:	201c      	movs	r0, #28
 800dd3a:	f002 fe63 	bl	8010a04 <HAL_NVIC_EnableIRQ>
 800dd3e:	e7a1      	b.n	800dc84 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800dd40:	4a5d      	ldr	r2, [pc, #372]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800dd42:	69d1      	ldr	r1, [r2, #28]
 800dd44:	2080      	movs	r0, #128	; 0x80
 800dd46:	02c0      	lsls	r0, r0, #11
 800dd48:	4301      	orrs	r1, r0
 800dd4a:	61d1      	str	r1, [r2, #28]
 800dd4c:	69d3      	ldr	r3, [r2, #28]
 800dd4e:	4003      	ands	r3, r0
 800dd50:	9303      	str	r3, [sp, #12]
 800dd52:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800dd54:	2380      	movs	r3, #128	; 0x80
 800dd56:	00db      	lsls	r3, r3, #3
 800dd58:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd5a:	2402      	movs	r4, #2
 800dd5c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd5e:	2701      	movs	r7, #1
 800dd60:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd62:	2603      	movs	r6, #3
 800dd64:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800dd66:	2504      	movs	r5, #4
 800dd68:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800dd6a:	a907      	add	r1, sp, #28
 800dd6c:	4853      	ldr	r0, [pc, #332]	; (800debc <HAL_UART_MspInit+0x26c>)
 800dd6e:	f003 fddf 	bl	8011930 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800dd72:	2380      	movs	r3, #128	; 0x80
 800dd74:	011b      	lsls	r3, r3, #4
 800dd76:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd78:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd7a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd7c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800dd7e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800dd80:	a907      	add	r1, sp, #28
 800dd82:	484e      	ldr	r0, [pc, #312]	; (800debc <HAL_UART_MspInit+0x26c>)
 800dd84:	f003 fdd4 	bl	8011930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dd88:	2200      	movs	r2, #0
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	201d      	movs	r0, #29
 800dd8e:	f002 fe05 	bl	801099c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dd92:	201d      	movs	r0, #29
 800dd94:	f002 fe36 	bl	8010a04 <HAL_NVIC_EnableIRQ>
 800dd98:	e774      	b.n	800dc84 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800dd9a:	4a47      	ldr	r2, [pc, #284]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800dd9c:	69d1      	ldr	r1, [r2, #28]
 800dd9e:	2080      	movs	r0, #128	; 0x80
 800dda0:	0300      	lsls	r0, r0, #12
 800dda2:	4301      	orrs	r1, r0
 800dda4:	61d1      	str	r1, [r2, #28]
 800dda6:	69d3      	ldr	r3, [r2, #28]
 800dda8:	4003      	ands	r3, r0
 800ddaa:	9304      	str	r3, [sp, #16]
 800ddac:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800ddae:	2401      	movs	r4, #1
 800ddb0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddb2:	2502      	movs	r5, #2
 800ddb4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddb6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ddb8:	2603      	movs	r6, #3
 800ddba:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800ddbc:	2704      	movs	r7, #4
 800ddbe:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800ddc0:	a907      	add	r1, sp, #28
 800ddc2:	2090      	movs	r0, #144	; 0x90
 800ddc4:	05c0      	lsls	r0, r0, #23
 800ddc6:	f003 fdb3 	bl	8011930 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800ddca:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddcc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddce:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ddd0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800ddd2:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800ddd4:	a907      	add	r1, sp, #28
 800ddd6:	2090      	movs	r0, #144	; 0x90
 800ddd8:	05c0      	lsls	r0, r0, #23
 800ddda:	f003 fda9 	bl	8011930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800ddde:	2200      	movs	r2, #0
 800dde0:	2101      	movs	r1, #1
 800dde2:	201d      	movs	r0, #29
 800dde4:	f002 fdda 	bl	801099c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dde8:	201d      	movs	r0, #29
 800ddea:	f002 fe0b 	bl	8010a04 <HAL_NVIC_EnableIRQ>
 800ddee:	e749      	b.n	800dc84 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800ddf0:	4a31      	ldr	r2, [pc, #196]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800ddf2:	69d1      	ldr	r1, [r2, #28]
 800ddf4:	2080      	movs	r0, #128	; 0x80
 800ddf6:	0340      	lsls	r0, r0, #13
 800ddf8:	4301      	orrs	r1, r0
 800ddfa:	61d1      	str	r1, [r2, #28]
 800ddfc:	69d3      	ldr	r3, [r2, #28]
 800ddfe:	4003      	ands	r3, r0
 800de00:	9305      	str	r3, [sp, #20]
 800de02:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800de04:	2308      	movs	r3, #8
 800de06:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de08:	2402      	movs	r4, #2
 800de0a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de0c:	2701      	movs	r7, #1
 800de0e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de10:	2603      	movs	r6, #3
 800de12:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800de14:	2504      	movs	r5, #4
 800de16:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800de18:	a907      	add	r1, sp, #28
 800de1a:	4828      	ldr	r0, [pc, #160]	; (800debc <HAL_UART_MspInit+0x26c>)
 800de1c:	f003 fd88 	bl	8011930 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800de20:	2310      	movs	r3, #16
 800de22:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de24:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de26:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de28:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800de2a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800de2c:	a907      	add	r1, sp, #28
 800de2e:	4823      	ldr	r0, [pc, #140]	; (800debc <HAL_UART_MspInit+0x26c>)
 800de30:	f003 fd7e 	bl	8011930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800de34:	2200      	movs	r2, #0
 800de36:	2101      	movs	r1, #1
 800de38:	201d      	movs	r0, #29
 800de3a:	f002 fdaf 	bl	801099c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800de3e:	201d      	movs	r0, #29
 800de40:	f002 fde0 	bl	8010a04 <HAL_NVIC_EnableIRQ>
 800de44:	e71e      	b.n	800dc84 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800de46:	4b1c      	ldr	r3, [pc, #112]	; (800deb8 <HAL_UART_MspInit+0x268>)
 800de48:	699a      	ldr	r2, [r3, #24]
 800de4a:	2420      	movs	r4, #32
 800de4c:	4322      	orrs	r2, r4
 800de4e:	619a      	str	r2, [r3, #24]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	4023      	ands	r3, r4
 800de54:	9306      	str	r3, [sp, #24]
 800de56:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800de58:	2310      	movs	r3, #16
 800de5a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de5c:	3b0e      	subs	r3, #14
 800de5e:	4699      	mov	r9, r3
 800de60:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de62:	2501      	movs	r5, #1
 800de64:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de66:	2703      	movs	r7, #3
 800de68:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800de6a:	2605      	movs	r6, #5
 800de6c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800de6e:	a907      	add	r1, sp, #28
 800de70:	2090      	movs	r0, #144	; 0x90
 800de72:	05c0      	lsls	r0, r0, #23
 800de74:	f003 fd5c 	bl	8011930 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800de78:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de7a:	464b      	mov	r3, r9
 800de7c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de7e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de80:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800de82:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800de84:	a907      	add	r1, sp, #28
 800de86:	2090      	movs	r0, #144	; 0x90
 800de88:	05c0      	lsls	r0, r0, #23
 800de8a:	f003 fd51 	bl	8011930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800de8e:	2200      	movs	r2, #0
 800de90:	2101      	movs	r1, #1
 800de92:	201d      	movs	r0, #29
 800de94:	f002 fd82 	bl	801099c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800de98:	201d      	movs	r0, #29
 800de9a:	f002 fdb3 	bl	8010a04 <HAL_NVIC_EnableIRQ>
}
 800de9e:	e6f1      	b.n	800dc84 <HAL_UART_MspInit+0x34>
 800dea0:	40013800 	.word	0x40013800
 800dea4:	40004400 	.word	0x40004400
 800dea8:	40004800 	.word	0x40004800
 800deac:	40004c00 	.word	0x40004c00
 800deb0:	40005000 	.word	0x40005000
 800deb4:	40011400 	.word	0x40011400
 800deb8:	40021000 	.word	0x40021000
 800debc:	48000400 	.word	0x48000400

0800dec0 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800dec0:	2806      	cmp	r0, #6
 800dec2:	d80d      	bhi.n	800dee0 <GetUart+0x20>
 800dec4:	0080      	lsls	r0, r0, #2
 800dec6:	4b08      	ldr	r3, [pc, #32]	; (800dee8 <GetUart+0x28>)
 800dec8:	581b      	ldr	r3, [r3, r0]
 800deca:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800decc:	4807      	ldr	r0, [pc, #28]	; (800deec <GetUart+0x2c>)
 800dece:	e00a      	b.n	800dee6 <GetUart+0x26>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800ded0:	4807      	ldr	r0, [pc, #28]	; (800def0 <GetUart+0x30>)
 800ded2:	e008      	b.n	800dee6 <GetUart+0x26>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800ded4:	4807      	ldr	r0, [pc, #28]	; (800def4 <GetUart+0x34>)
 800ded6:	e006      	b.n	800dee6 <GetUart+0x26>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800ded8:	4807      	ldr	r0, [pc, #28]	; (800def8 <GetUart+0x38>)
 800deda:	e004      	b.n	800dee6 <GetUart+0x26>
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800dedc:	4807      	ldr	r0, [pc, #28]	; (800defc <GetUart+0x3c>)
 800dede:	e002      	b.n	800dee6 <GetUart+0x26>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800dee0:	2000      	movs	r0, #0
 800dee2:	e000      	b.n	800dee6 <GetUart+0x26>
			return P1uart;	
 800dee4:	4806      	ldr	r0, [pc, #24]	; (800df00 <GetUart+0x40>)
	}		
}
 800dee6:	4770      	bx	lr
 800dee8:	0801b8b8 	.word	0x0801b8b8
 800deec:	20006d1c 	.word	0x20006d1c
 800def0:	20006c3c 	.word	0x20006c3c
 800def4:	20006aec 	.word	0x20006aec
 800def8:	20006bcc 	.word	0x20006bcc
 800defc:	20006b5c 	.word	0x20006b5c
 800df00:	20006cac 	.word	0x20006cac

0800df04 <writePxMutex>:
{
 800df04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df06:	b083      	sub	sp, #12
 800df08:	0005      	movs	r5, r0
 800df0a:	9100      	str	r1, [sp, #0]
 800df0c:	0017      	movs	r7, r2
 800df0e:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800df10:	f7ff ffd6 	bl	800dec0 <GetUart>
 800df14:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800df16:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800df18:	2800      	cmp	r0, #0
 800df1a:	d016      	beq.n	800df4a <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df1c:	00ab      	lsls	r3, r5, #2
 800df1e:	4a0c      	ldr	r2, [pc, #48]	; (800df50 <writePxMutex+0x4c>)
 800df20:	5898      	ldr	r0, [r3, r2]
 800df22:	9901      	ldr	r1, [sp, #4]
 800df24:	f000 fd12 	bl	800e94c <osSemaphoreWait>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d10e      	bne.n	800df4a <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800df2c:	9b08      	ldr	r3, [sp, #32]
 800df2e:	003a      	movs	r2, r7
 800df30:	9900      	ldr	r1, [sp, #0]
 800df32:	0020      	movs	r0, r4
 800df34:	f005 fd3e 	bl	80139b4 <HAL_UART_Transmit>
 800df38:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800df3a:	d001      	beq.n	800df40 <writePxMutex+0x3c>
 800df3c:	2803      	cmp	r0, #3
 800df3e:	d1f5      	bne.n	800df2c <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800df40:	00ad      	lsls	r5, r5, #2
 800df42:	4b03      	ldr	r3, [pc, #12]	; (800df50 <writePxMutex+0x4c>)
 800df44:	58e8      	ldr	r0, [r5, r3]
 800df46:	f000 fd2d 	bl	800e9a4 <osSemaphoreRelease>
}
 800df4a:	0030      	movs	r0, r6
 800df4c:	b003      	add	sp, #12
 800df4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df50:	20006a98 	.word	0x20006a98

0800df54 <writePxITMutex>:
{
 800df54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df56:	b083      	sub	sp, #12
 800df58:	0004      	movs	r4, r0
 800df5a:	9101      	str	r1, [sp, #4]
 800df5c:	0017      	movs	r7, r2
 800df5e:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800df60:	f7ff ffae 	bl	800dec0 <GetUart>
 800df64:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800df66:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800df68:	2800      	cmp	r0, #0
 800df6a:	d008      	beq.n	800df7e <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df6c:	00a4      	lsls	r4, r4, #2
 800df6e:	4b09      	ldr	r3, [pc, #36]	; (800df94 <writePxITMutex+0x40>)
 800df70:	58e0      	ldr	r0, [r4, r3]
 800df72:	0029      	movs	r1, r5
 800df74:	f000 fcea 	bl	800e94c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800df78:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df7a:	2800      	cmp	r0, #0
 800df7c:	d002      	beq.n	800df84 <writePxITMutex+0x30>
}
 800df7e:	0018      	movs	r0, r3
 800df80:	b003      	add	sp, #12
 800df82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800df84:	003a      	movs	r2, r7
 800df86:	9901      	ldr	r1, [sp, #4]
 800df88:	0030      	movs	r0, r6
 800df8a:	f005 f97d 	bl	8013288 <HAL_UART_Transmit_IT>
 800df8e:	0003      	movs	r3, r0
 800df90:	e7f5      	b.n	800df7e <writePxITMutex+0x2a>
 800df92:	46c0      	nop			; (mov r8, r8)
 800df94:	20006a98 	.word	0x20006a98

0800df98 <writePxDMAMutex>:
{
 800df98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df9a:	b083      	sub	sp, #12
 800df9c:	0004      	movs	r4, r0
 800df9e:	000f      	movs	r7, r1
 800dfa0:	9201      	str	r2, [sp, #4]
 800dfa2:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800dfa4:	f7ff ff8c 	bl	800dec0 <GetUart>
 800dfa8:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dfaa:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d008      	beq.n	800dfc2 <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dfb0:	00a4      	lsls	r4, r4, #2
 800dfb2:	4b0a      	ldr	r3, [pc, #40]	; (800dfdc <writePxDMAMutex+0x44>)
 800dfb4:	58e0      	ldr	r0, [r4, r3]
 800dfb6:	0031      	movs	r1, r6
 800dfb8:	f000 fcc8 	bl	800e94c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dfbc:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d002      	beq.n	800dfc8 <writePxDMAMutex+0x30>
}
 800dfc2:	0018      	movs	r0, r3
 800dfc4:	b003      	add	sp, #12
 800dfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800dfc8:	0028      	movs	r0, r5
 800dfca:	f7ff f87f 	bl	800d0cc <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800dfce:	9a01      	ldr	r2, [sp, #4]
 800dfd0:	0039      	movs	r1, r7
 800dfd2:	0028      	movs	r0, r5
 800dfd4:	f005 fa04 	bl	80133e0 <HAL_UART_Transmit_DMA>
 800dfd8:	0003      	movs	r3, r0
 800dfda:	e7f2      	b.n	800dfc2 <writePxDMAMutex+0x2a>
 800dfdc:	20006a98 	.word	0x20006a98

0800dfe0 <UpdateBaudrate>:
{
 800dfe0:	b510      	push	{r4, lr}
 800dfe2:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800dfe4:	f7ff ff6c 	bl	800dec0 <GetUart>
	huart->Init.BaudRate = baudrate;
 800dfe8:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800dfea:	f005 fd89 	bl	8013b00 <HAL_UART_Init>
}
 800dfee:	2000      	movs	r0, #0
 800dff0:	bd10      	pop	{r4, pc}
	...

0800dff4 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800dff4:	b570      	push	{r4, r5, r6, lr}
 800dff6:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800dff8:	d003      	beq.n	800e002 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800dffa:	2901      	cmp	r1, #1
 800dffc:	d002      	beq.n	800e004 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800dffe:	2900      	cmp	r1, #0
 800e000:	d016      	beq.n	800e030 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e002:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e004:	f7fd faee 	bl	800b5e4 <GetPort>
 800e008:	4b14      	ldr	r3, [pc, #80]	; (800e05c <SwapUartPins+0x68>)
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	4d14      	ldr	r5, [pc, #80]	; (800e060 <SwapUartPins+0x6c>)
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	3801      	subs	r0, #1
 800e014:	2180      	movs	r1, #128	; 0x80
 800e016:	0209      	lsls	r1, r1, #8
 800e018:	000a      	movs	r2, r1
 800e01a:	4102      	asrs	r2, r0
 800e01c:	5b58      	ldrh	r0, [r3, r5]
 800e01e:	4302      	orrs	r2, r0
 800e020:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e022:	2308      	movs	r3, #8
 800e024:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e026:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e028:	0020      	movs	r0, r4
 800e02a:	f005 fd69 	bl	8013b00 <HAL_UART_Init>
 800e02e:	e7e8      	b.n	800e002 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e030:	f7fd fad8 	bl	800b5e4 <GetPort>
 800e034:	4b09      	ldr	r3, [pc, #36]	; (800e05c <SwapUartPins+0x68>)
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	3b01      	subs	r3, #1
 800e03a:	4d09      	ldr	r5, [pc, #36]	; (800e060 <SwapUartPins+0x6c>)
 800e03c:	005b      	lsls	r3, r3, #1
 800e03e:	3801      	subs	r0, #1
 800e040:	2180      	movs	r1, #128	; 0x80
 800e042:	0209      	lsls	r1, r1, #8
 800e044:	4101      	asrs	r1, r0
 800e046:	5b5a      	ldrh	r2, [r3, r5]
 800e048:	438a      	bics	r2, r1
 800e04a:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e04c:	2308      	movs	r3, #8
 800e04e:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e050:	2300      	movs	r3, #0
 800e052:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e054:	0020      	movs	r0, r4
 800e056:	f005 fd53 	bl	8013b00 <HAL_UART_Init>
}
 800e05a:	e7d2      	b.n	800e002 <SwapUartPins+0xe>
 800e05c:	200010e4 	.word	0x200010e4
 800e060:	20006e84 	.word	0x20006e84

0800e064 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e064:	4816      	ldr	r0, [pc, #88]	; (800e0c0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e066:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e068:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e06a:	e003      	b.n	800e074 <LoopCopyDataInit>

0800e06c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e06c:	4b15      	ldr	r3, [pc, #84]	; (800e0c4 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e06e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e070:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e072:	3104      	adds	r1, #4

0800e074 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e074:	4814      	ldr	r0, [pc, #80]	; (800e0c8 <LoopForever+0xc>)
  ldr r3, =_edata
 800e076:	4b15      	ldr	r3, [pc, #84]	; (800e0cc <LoopForever+0x10>)
  adds r2, r0, r1
 800e078:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e07a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e07c:	d3f6      	bcc.n	800e06c <CopyDataInit>
  ldr r2, =_sbss
 800e07e:	4a14      	ldr	r2, [pc, #80]	; (800e0d0 <LoopForever+0x14>)
  b LoopFillZerobss
 800e080:	e002      	b.n	800e088 <LoopFillZerobss>

0800e082 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e082:	2300      	movs	r3, #0
  str  r3, [r2]
 800e084:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e086:	3204      	adds	r2, #4

0800e088 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e088:	4b12      	ldr	r3, [pc, #72]	; (800e0d4 <LoopForever+0x18>)
  cmp r2, r3
 800e08a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e08c:	d3f9      	bcc.n	800e082 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e08e:	4812      	ldr	r0, [pc, #72]	; (800e0d8 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e090:	4912      	ldr	r1, [pc, #72]	; (800e0dc <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e092:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e094:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e096:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e098:	d005      	beq.n	800e0a6 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e09a:	f000 f82b 	bl	800e0f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e09e:	f005 fea3 	bl	8013de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e0a2:	f005 fe82 	bl	8013daa <main>

0800e0a6 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e0a6:	480e      	ldr	r0, [pc, #56]	; (800e0e0 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e0a8:	490e      	ldr	r1, [pc, #56]	; (800e0e4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e0aa:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e0ac:	480e      	ldr	r0, [pc, #56]	; (800e0e8 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e0ae:	490d      	ldr	r1, [pc, #52]	; (800e0e4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e0b0:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e0b2:	480e      	ldr	r0, [pc, #56]	; (800e0ec <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e0b4:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e0b6:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e0b8:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e0ba:	4700      	bx	r0

0800e0bc <LoopForever>:


LoopForever:
    b LoopForever
 800e0bc:	e7fe      	b.n	800e0bc <LoopForever>
 800e0be:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e0c0:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e0c4:	0801bd78 	.word	0x0801bd78
  ldr r0, =_sdata
 800e0c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e0cc:	20000ae8 	.word	0x20000ae8
  ldr r2, =_sbss
 800e0d0:	20000ae8 	.word	0x20000ae8
  ldr r3, = _ebss
 800e0d4:	20006f28 	.word	0x20006f28
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e0d8:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e0dc:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e0e0:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e0e4:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e0e8:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e0ec:	1fffd800 	.word	0x1fffd800

0800e0f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e0f0:	e7fe      	b.n	800e0f0 <ADC1_COMP_IRQHandler>
	...

0800e0f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e0f4:	4b11      	ldr	r3, [pc, #68]	; (800e13c <SystemInit+0x48>)
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	2101      	movs	r1, #1
 800e0fa:	430a      	orrs	r2, r1
 800e0fc:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	480f      	ldr	r0, [pc, #60]	; (800e140 <SystemInit+0x4c>)
 800e102:	4002      	ands	r2, r0
 800e104:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	480e      	ldr	r0, [pc, #56]	; (800e144 <SystemInit+0x50>)
 800e10a:	4002      	ands	r2, r0
 800e10c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	480d      	ldr	r0, [pc, #52]	; (800e148 <SystemInit+0x54>)
 800e112:	4002      	ands	r2, r0
 800e114:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e116:	685a      	ldr	r2, [r3, #4]
 800e118:	480c      	ldr	r0, [pc, #48]	; (800e14c <SystemInit+0x58>)
 800e11a:	4002      	ands	r2, r0
 800e11c:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e120:	200f      	movs	r0, #15
 800e122:	4382      	bics	r2, r0
 800e124:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e128:	4809      	ldr	r0, [pc, #36]	; (800e150 <SystemInit+0x5c>)
 800e12a:	4002      	ands	r2, r0
 800e12c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e12e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e130:	438a      	bics	r2, r1
 800e132:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e134:	2200      	movs	r2, #0
 800e136:	609a      	str	r2, [r3, #8]

}
 800e138:	4770      	bx	lr
 800e13a:	46c0      	nop			; (mov r8, r8)
 800e13c:	40021000 	.word	0x40021000
 800e140:	08ffb80c 	.word	0x08ffb80c
 800e144:	fef6ffff 	.word	0xfef6ffff
 800e148:	fffbffff 	.word	0xfffbffff
 800e14c:	ffc0ffff 	.word	0xffc0ffff
 800e150:	fff0feac 	.word	0xfff0feac

0800e154 <LSM303AGR_MAG_WriteReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM303AGR_MAG_WriteReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 800e154:	b510      	push	{r4, lr}

  if (LSM303AGR_MAG_I2C_Write(handle, Reg, Bufp, len))
 800e156:	f7ff f9f9 	bl	800d54c <LSM303AGR_MAG_I2C_Write>
 800e15a:	4243      	negs	r3, r0
 800e15c:	4158      	adcs	r0, r3
 800e15e:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e160:	bd10      	pop	{r4, pc}

0800e162 <LSM303AGR_MAG_ReadReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM303AGR_MAG_ReadReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 800e162:	b510      	push	{r4, lr}

  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e164:	f7ff fa03 	bl	800d56e <LSM303AGR_MAG_I2C_Read>
 800e168:	4243      	negs	r3, r0
 800e16a:	4158      	adcs	r0, r3
 800e16c:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e16e:	bd10      	pop	{r4, pc}

0800e170 <LSM303AGR_MAG_R_WHO_AM_I>:
* Input          : Pointer to u8_t
* Output         : Status of WHO_AM_I
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM303AGR_MAG_R_WHO_AM_I(void *handle, u8_t *value)
{
 800e170:	b510      	push	{r4, lr}
 800e172:	000a      	movs	r2, r1
  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_WHO_AM_I_REG, (u8_t *)value, 1) )
 800e174:	2301      	movs	r3, #1
 800e176:	214f      	movs	r1, #79	; 0x4f
 800e178:	f7ff fff3 	bl	800e162 <LSM303AGR_MAG_ReadReg>
 800e17c:	1e43      	subs	r3, r0, #1
 800e17e:	4198      	sbcs	r0, r3
 800e180:	b2c0      	uxtb	r0, r0

  *value &= LSM303AGR_MAG_WHO_AM_I_MASK; //coerce
  *value = *value >> LSM303AGR_MAG_WHO_AM_I_POSITION; //mask

  return MEMS_SUCCESS;
}
 800e182:	bd10      	pop	{r4, pc}

0800e184 <LSM303AGR_MAG_W_BDU>:
* Input          : LSM303AGR_MAG_BDU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_BDU(void *handle, LSM303AGR_MAG_BDU_t newValue)
{
 800e184:	b530      	push	{r4, r5, lr}
 800e186:	b083      	sub	sp, #12
 800e188:	0004      	movs	r4, r0
 800e18a:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e18c:	2301      	movs	r3, #1
 800e18e:	466a      	mov	r2, sp
 800e190:	3207      	adds	r2, #7
 800e192:	2162      	movs	r1, #98	; 0x62
 800e194:	f7ff ffe5 	bl	800e162 <LSM303AGR_MAG_ReadReg>
 800e198:	2800      	cmp	r0, #0
 800e19a:	d101      	bne.n	800e1a0 <LSM303AGR_MAG_W_BDU+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e19c:	b003      	add	sp, #12
 800e19e:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e1a0:	466b      	mov	r3, sp
 800e1a2:	1dda      	adds	r2, r3, #7
  value &= ~LSM303AGR_MAG_BDU_MASK;
 800e1a4:	7813      	ldrb	r3, [r2, #0]
 800e1a6:	2110      	movs	r1, #16
 800e1a8:	438b      	bics	r3, r1
  value |= newValue;
 800e1aa:	431d      	orrs	r5, r3
 800e1ac:	7015      	strb	r5, [r2, #0]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	3152      	adds	r1, #82	; 0x52
 800e1b2:	0020      	movs	r0, r4
 800e1b4:	f7ff ffce 	bl	800e154 <LSM303AGR_MAG_WriteReg>
 800e1b8:	1e43      	subs	r3, r0, #1
 800e1ba:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e1bc:	b2c0      	uxtb	r0, r0
 800e1be:	e7ed      	b.n	800e19c <LSM303AGR_MAG_W_BDU+0x18>

0800e1c0 <LSM303AGR_MAG_W_MD>:
* Input          : LSM303AGR_MAG_MD_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_MD(void *handle, LSM303AGR_MAG_MD_t newValue)
{
 800e1c0:	b530      	push	{r4, r5, lr}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	0004      	movs	r4, r0
 800e1c6:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	466a      	mov	r2, sp
 800e1cc:	3207      	adds	r2, #7
 800e1ce:	2160      	movs	r1, #96	; 0x60
 800e1d0:	f7ff ffc7 	bl	800e162 <LSM303AGR_MAG_ReadReg>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d101      	bne.n	800e1dc <LSM303AGR_MAG_W_MD+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e1d8:	b003      	add	sp, #12
 800e1da:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e1dc:	466b      	mov	r3, sp
 800e1de:	1dda      	adds	r2, r3, #7
  value &= ~LSM303AGR_MAG_MD_MASK;
 800e1e0:	7813      	ldrb	r3, [r2, #0]
 800e1e2:	2103      	movs	r1, #3
 800e1e4:	438b      	bics	r3, r1
  value |= newValue;
 800e1e6:	431d      	orrs	r5, r3
 800e1e8:	7015      	strb	r5, [r2, #0]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	315d      	adds	r1, #93	; 0x5d
 800e1ee:	0020      	movs	r0, r4
 800e1f0:	f7ff ffb0 	bl	800e154 <LSM303AGR_MAG_WriteReg>
 800e1f4:	1e43      	subs	r3, r0, #1
 800e1f6:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e1f8:	b2c0      	uxtb	r0, r0
 800e1fa:	e7ed      	b.n	800e1d8 <LSM303AGR_MAG_W_MD+0x18>

0800e1fc <LSM303AGR_MAG_Get_Raw_Magnetic>:
* Input          : pointer to [u8_t]
* Output         : Magnetic buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM303AGR_MAG_Get_Raw_Magnetic(void *handle, u8_t *buff)
{
 800e1fc:	b510      	push	{r4, lr}
 800e1fe:	000a      	movs	r2, r1
  if( !LSM303AGR_MAG_ReadReg( handle, LSM303AGR_MAG_OUTX_L_REG, buff, 6 ) )
 800e200:	2306      	movs	r3, #6
 800e202:	2168      	movs	r1, #104	; 0x68
 800e204:	f7ff ffad 	bl	800e162 <LSM303AGR_MAG_ReadReg>
 800e208:	1e43      	subs	r3, r0, #1
 800e20a:	4198      	sbcs	r0, r3
 800e20c:	b2c0      	uxtb	r0, r0
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e20e:	bd10      	pop	{r4, pc}

0800e210 <LSM303AGR_MAG_W_ODR>:
* Input          : LSM303AGR_MAG_ODR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_ODR(void *handle, LSM303AGR_MAG_ODR_t newValue)
{
 800e210:	b530      	push	{r4, r5, lr}
 800e212:	b083      	sub	sp, #12
 800e214:	0004      	movs	r4, r0
 800e216:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e218:	2301      	movs	r3, #1
 800e21a:	466a      	mov	r2, sp
 800e21c:	3207      	adds	r2, #7
 800e21e:	2160      	movs	r1, #96	; 0x60
 800e220:	f7ff ff9f 	bl	800e162 <LSM303AGR_MAG_ReadReg>
 800e224:	2800      	cmp	r0, #0
 800e226:	d101      	bne.n	800e22c <LSM303AGR_MAG_W_ODR+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e228:	b003      	add	sp, #12
 800e22a:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e22c:	466b      	mov	r3, sp
 800e22e:	1dda      	adds	r2, r3, #7
  value &= ~LSM303AGR_MAG_ODR_MASK;
 800e230:	7813      	ldrb	r3, [r2, #0]
 800e232:	210c      	movs	r1, #12
 800e234:	438b      	bics	r3, r1
  value |= newValue;
 800e236:	431d      	orrs	r5, r3
 800e238:	7015      	strb	r5, [r2, #0]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e23a:	2301      	movs	r3, #1
 800e23c:	3154      	adds	r1, #84	; 0x54
 800e23e:	0020      	movs	r0, r4
 800e240:	f7ff ff88 	bl	800e154 <LSM303AGR_MAG_WriteReg>
 800e244:	1e43      	subs	r3, r0, #1
 800e246:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e248:	b2c0      	uxtb	r0, r0
 800e24a:	e7ed      	b.n	800e228 <LSM303AGR_MAG_W_ODR+0x18>

0800e24c <LSM303AGR_MAG_W_ST>:
* Input          : LSM303AGR_MAG_ST_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_ST(void *handle, LSM303AGR_MAG_ST_t newValue)
{
 800e24c:	b530      	push	{r4, r5, lr}
 800e24e:	b083      	sub	sp, #12
 800e250:	0004      	movs	r4, r0
 800e252:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e254:	2301      	movs	r3, #1
 800e256:	466a      	mov	r2, sp
 800e258:	3207      	adds	r2, #7
 800e25a:	2162      	movs	r1, #98	; 0x62
 800e25c:	f7ff ff81 	bl	800e162 <LSM303AGR_MAG_ReadReg>
 800e260:	2800      	cmp	r0, #0
 800e262:	d101      	bne.n	800e268 <LSM303AGR_MAG_W_ST+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e264:	b003      	add	sp, #12
 800e266:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e268:	466b      	mov	r3, sp
 800e26a:	1dda      	adds	r2, r3, #7
  value &= ~LSM303AGR_MAG_ST_MASK;
 800e26c:	7813      	ldrb	r3, [r2, #0]
 800e26e:	2102      	movs	r1, #2
 800e270:	438b      	bics	r3, r1
  value |= newValue;
 800e272:	431d      	orrs	r5, r3
 800e274:	7015      	strb	r5, [r2, #0]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e276:	2301      	movs	r3, #1
 800e278:	3160      	adds	r1, #96	; 0x60
 800e27a:	0020      	movs	r0, r4
 800e27c:	f7ff ff6a 	bl	800e154 <LSM303AGR_MAG_WriteReg>
 800e280:	1e43      	subs	r3, r0, #1
 800e282:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e284:	b2c0      	uxtb	r0, r0
 800e286:	e7ed      	b.n	800e264 <LSM303AGR_MAG_W_ST+0x18>

0800e288 <LSM6DS3_ACC_GYRO_WriteReg>:
/* Private functions ---------------------------------------------------------*/

/************** Generic Function  *******************/

status_t LSM6DS3_ACC_GYRO_WriteReg(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800e288:	b510      	push	{r4, lr}

  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800e28a:	f7ff f93d 	bl	800d508 <LSM6DS3_I2C_Write>
 800e28e:	4243      	negs	r3, r0
 800e290:	4158      	adcs	r0, r3
 800e292:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e294:	bd10      	pop	{r4, pc}

0800e296 <LSM6DS3_ACC_GYRO_ReadReg>:

status_t LSM6DS3_ACC_GYRO_ReadReg(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800e296:	b510      	push	{r4, lr}

  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800e298:	f7ff f947 	bl	800d52a <LSM6DS3_I2C_Read>
 800e29c:	4243      	negs	r3, r0
 800e29e:	4158      	adcs	r0, r3
 800e2a0:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e2a2:	bd10      	pop	{r4, pc}

0800e2a4 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>:
* Input          : Pointer to uint8_t
* Output         : Status of WHO_AM_I_BIT
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_WHO_AM_I(void *handle, uint8_t *value)
{
 800e2a4:	b510      	push	{r4, lr}
 800e2a6:	000a      	movs	r2, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WHO_AM_I_REG, (uint8_t *)value, 1) )
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	210f      	movs	r1, #15
 800e2ac:	f7ff fff3 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e2b0:	1e43      	subs	r3, r0, #1
 800e2b2:	4198      	sbcs	r0, r3
 800e2b4:	b2c0      	uxtb	r0, r0

  *value &= LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_MASK; //coerce
  *value = *value >> LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_POSITION; //mask

  return MEMS_SUCCESS;
}
 800e2b6:	bd10      	pop	{r4, pc}

0800e2b8 <LSM6DS3_ACC_GYRO_W_FS_XL>:
* Input          : LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t newValue)
{
 800e2b8:	b530      	push	{r4, r5, lr}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	0004      	movs	r4, r0
 800e2be:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	466a      	mov	r2, sp
 800e2c4:	3207      	adds	r2, #7
 800e2c6:	2110      	movs	r1, #16
 800e2c8:	f7ff ffe5 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d101      	bne.n	800e2d4 <LSM6DS3_ACC_GYRO_W_FS_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e2d0:	b003      	add	sp, #12
 800e2d2:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e2d4:	466b      	mov	r3, sp
 800e2d6:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_FS_XL_MASK;
 800e2d8:	7813      	ldrb	r3, [r2, #0]
 800e2da:	210c      	movs	r1, #12
 800e2dc:	438b      	bics	r3, r1
  value |= newValue;
 800e2de:	431d      	orrs	r5, r3
 800e2e0:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	3104      	adds	r1, #4
 800e2e6:	0020      	movs	r0, r4
 800e2e8:	f7ff ffce 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e2ec:	1e43      	subs	r3, r0, #1
 800e2ee:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e2f0:	b2c0      	uxtb	r0, r0
 800e2f2:	e7ed      	b.n	800e2d0 <LSM6DS3_ACC_GYRO_W_FS_XL+0x18>

0800e2f4 <LSM6DS3_ACC_GYRO_R_FS_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : Status of FS_XL see LSM6DS3_ACC_GYRO_FS_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t *value)
{
 800e2f4:	b510      	push	{r4, lr}
 800e2f6:	000c      	movs	r4, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, (uint8_t *)value, 1) )
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	000a      	movs	r2, r1
 800e2fc:	2110      	movs	r1, #16
 800e2fe:	f7ff ffca 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e302:	2800      	cmp	r0, #0
 800e304:	d004      	beq.n	800e310 <LSM6DS3_ACC_GYRO_R_FS_XL+0x1c>
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_XL_MASK; //mask
 800e306:	7822      	ldrb	r2, [r4, #0]
 800e308:	230c      	movs	r3, #12
 800e30a:	4013      	ands	r3, r2
 800e30c:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800e30e:	2001      	movs	r0, #1
}
 800e310:	bd10      	pop	{r4, pc}

0800e312 <LSM6DS3_ACC_GYRO_GetRawAccData>:
* Input          : pointer to [uint8_t]
* Output         : GetAccData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawAccData(void *handle, uint8_t *buff)
{
 800e312:	b570      	push	{r4, r5, r6, lr}
 800e314:	0004      	movs	r4, r0
 800e316:	000e      	movs	r6, r1
 800e318:	2528      	movs	r5, #40	; 0x28
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_XL + k, &buff[k], 1))
 800e31a:	2301      	movs	r3, #1
 800e31c:	0032      	movs	r2, r6
 800e31e:	0029      	movs	r1, r5
 800e320:	0020      	movs	r0, r4
 800e322:	f7ff ffb8 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e326:	2800      	cmp	r0, #0
 800e328:	d00e      	beq.n	800e348 <LSM6DS3_ACC_GYRO_GetRawAccData+0x36>
 800e32a:	1c72      	adds	r2, r6, #1
 800e32c:	1c69      	adds	r1, r5, #1
 800e32e:	b2c9      	uxtb	r1, r1
 800e330:	2301      	movs	r3, #1
 800e332:	0020      	movs	r0, r4
 800e334:	f7ff ffaf 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e338:	2800      	cmp	r0, #0
 800e33a:	d005      	beq.n	800e348 <LSM6DS3_ACC_GYRO_GetRawAccData+0x36>
 800e33c:	3502      	adds	r5, #2
 800e33e:	b2ed      	uxtb	r5, r5
 800e340:	3602      	adds	r6, #2
  for (i = 0; i < 3; i++ )
 800e342:	2d2e      	cmp	r5, #46	; 0x2e
 800e344:	d1e9      	bne.n	800e31a <LSM6DS3_ACC_GYRO_GetRawAccData+0x8>
        return MEMS_ERROR;
      k++;
    }
  }

  return MEMS_SUCCESS;
 800e346:	2001      	movs	r0, #1
}
 800e348:	bd70      	pop	{r4, r5, r6, pc}

0800e34a <LSM6DS3_ACC_GYRO_W_ODR_XL>:
* Input          : LSM6DS3_ACC_GYRO_ODR_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_XL(void *handle, LSM6DS3_ACC_GYRO_ODR_XL_t newValue)
{
 800e34a:	b530      	push	{r4, r5, lr}
 800e34c:	b083      	sub	sp, #12
 800e34e:	0004      	movs	r4, r0
 800e350:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e352:	2301      	movs	r3, #1
 800e354:	466a      	mov	r2, sp
 800e356:	3207      	adds	r2, #7
 800e358:	2110      	movs	r1, #16
 800e35a:	f7ff ff9c 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d101      	bne.n	800e366 <LSM6DS3_ACC_GYRO_W_ODR_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e362:	b003      	add	sp, #12
 800e364:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e366:	466b      	mov	r3, sp
 800e368:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_ODR_XL_MASK;
 800e36a:	7811      	ldrb	r1, [r2, #0]
 800e36c:	230f      	movs	r3, #15
 800e36e:	400b      	ands	r3, r1
  value |= newValue;
 800e370:	431d      	orrs	r5, r3
 800e372:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e374:	2301      	movs	r3, #1
 800e376:	2110      	movs	r1, #16
 800e378:	0020      	movs	r0, r4
 800e37a:	f7ff ff85 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e37e:	1e43      	subs	r3, r0, #1
 800e380:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e382:	b2c0      	uxtb	r0, r0
 800e384:	e7ed      	b.n	800e362 <LSM6DS3_ACC_GYRO_W_ODR_XL+0x18>

0800e386 <LSM6DS3_ACC_GYRO_W_FS_G>:
* Input          : LSM6DS3_ACC_GYRO_FS_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_G(void *handle, LSM6DS3_ACC_GYRO_FS_G_t newValue)
{
 800e386:	b530      	push	{r4, r5, lr}
 800e388:	b083      	sub	sp, #12
 800e38a:	0004      	movs	r4, r0
 800e38c:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e38e:	2301      	movs	r3, #1
 800e390:	466a      	mov	r2, sp
 800e392:	3207      	adds	r2, #7
 800e394:	2111      	movs	r1, #17
 800e396:	f7ff ff7e 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d101      	bne.n	800e3a2 <LSM6DS3_ACC_GYRO_W_FS_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e39e:	b003      	add	sp, #12
 800e3a0:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e3a2:	466b      	mov	r3, sp
 800e3a4:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_FS_G_MASK;
 800e3a6:	7813      	ldrb	r3, [r2, #0]
 800e3a8:	210c      	movs	r1, #12
 800e3aa:	438b      	bics	r3, r1
  value |= newValue;
 800e3ac:	431d      	orrs	r5, r3
 800e3ae:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	3105      	adds	r1, #5
 800e3b4:	0020      	movs	r0, r4
 800e3b6:	f7ff ff67 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e3ba:	1e43      	subs	r3, r0, #1
 800e3bc:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e3be:	b2c0      	uxtb	r0, r0
 800e3c0:	e7ed      	b.n	800e39e <LSM6DS3_ACC_GYRO_W_FS_G+0x18>

0800e3c2 <LSM6DS3_ACC_GYRO_R_FS_G>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_G_t
* Output         : Status of FS_G see LSM6DS3_ACC_GYRO_FS_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_G(void *handle, LSM6DS3_ACC_GYRO_FS_G_t *value)
{
 800e3c2:	b510      	push	{r4, lr}
 800e3c4:	000c      	movs	r4, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, (uint8_t *)value, 1) )
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	000a      	movs	r2, r1
 800e3ca:	2111      	movs	r1, #17
 800e3cc:	f7ff ff63 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d004      	beq.n	800e3de <LSM6DS3_ACC_GYRO_R_FS_G+0x1c>
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_G_MASK; //mask
 800e3d4:	7822      	ldrb	r2, [r4, #0]
 800e3d6:	230c      	movs	r3, #12
 800e3d8:	4013      	ands	r3, r2
 800e3da:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800e3dc:	2001      	movs	r0, #1
}
 800e3de:	bd10      	pop	{r4, pc}

0800e3e0 <LSM6DS3_ACC_GYRO_W_ODR_G>:
* Input          : LSM6DS3_ACC_GYRO_ODR_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_G(void *handle, LSM6DS3_ACC_GYRO_ODR_G_t newValue)
{
 800e3e0:	b530      	push	{r4, r5, lr}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	0004      	movs	r4, r0
 800e3e6:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	466a      	mov	r2, sp
 800e3ec:	3207      	adds	r2, #7
 800e3ee:	2111      	movs	r1, #17
 800e3f0:	f7ff ff51 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d101      	bne.n	800e3fc <LSM6DS3_ACC_GYRO_W_ODR_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e3f8:	b003      	add	sp, #12
 800e3fa:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e3fc:	466b      	mov	r3, sp
 800e3fe:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_ODR_G_MASK;
 800e400:	7811      	ldrb	r1, [r2, #0]
 800e402:	230f      	movs	r3, #15
 800e404:	400b      	ands	r3, r1
  value |= newValue;
 800e406:	431d      	orrs	r5, r3
 800e408:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e40a:	2301      	movs	r3, #1
 800e40c:	2111      	movs	r1, #17
 800e40e:	0020      	movs	r0, r4
 800e410:	f7ff ff3a 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e414:	1e43      	subs	r3, r0, #1
 800e416:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e418:	b2c0      	uxtb	r0, r0
 800e41a:	e7ed      	b.n	800e3f8 <LSM6DS3_ACC_GYRO_W_ODR_G+0x18>

0800e41c <LSM6DS3_ACC_GYRO_GetRawGyroData>:
* Input          : pointer to [uint8_t]
* Output         : GetGyroData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawGyroData(void *handle, uint8_t *buff)
{
 800e41c:	b570      	push	{r4, r5, r6, lr}
 800e41e:	0004      	movs	r4, r0
 800e420:	000e      	movs	r6, r1
 800e422:	2522      	movs	r5, #34	; 0x22
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_G + k, &buff[k], 1))
 800e424:	2301      	movs	r3, #1
 800e426:	0032      	movs	r2, r6
 800e428:	0029      	movs	r1, r5
 800e42a:	0020      	movs	r0, r4
 800e42c:	f7ff ff33 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e430:	2800      	cmp	r0, #0
 800e432:	d00e      	beq.n	800e452 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x36>
 800e434:	1c72      	adds	r2, r6, #1
 800e436:	1c69      	adds	r1, r5, #1
 800e438:	b2c9      	uxtb	r1, r1
 800e43a:	2301      	movs	r3, #1
 800e43c:	0020      	movs	r0, r4
 800e43e:	f7ff ff2a 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e442:	2800      	cmp	r0, #0
 800e444:	d005      	beq.n	800e452 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x36>
 800e446:	3502      	adds	r5, #2
 800e448:	b2ed      	uxtb	r5, r5
 800e44a:	3602      	adds	r6, #2
  for (i = 0; i < 3; i++ )
 800e44c:	2d28      	cmp	r5, #40	; 0x28
 800e44e:	d1e9      	bne.n	800e424 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x8>
        return MEMS_ERROR;
      k++;
    }
  }

  return MEMS_SUCCESS;
 800e450:	2001      	movs	r0, #1
}
 800e452:	bd70      	pop	{r4, r5, r6, pc}

0800e454 <LSM6DS3_ACC_GYRO_W_BW_XL>:
* Input          : LSM6DS3_ACC_GYRO_BW_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_BW_XL(void *handle, LSM6DS3_ACC_GYRO_BW_XL_t newValue)
{
 800e454:	b530      	push	{r4, r5, lr}
 800e456:	b083      	sub	sp, #12
 800e458:	0004      	movs	r4, r0
 800e45a:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e45c:	2301      	movs	r3, #1
 800e45e:	466a      	mov	r2, sp
 800e460:	3207      	adds	r2, #7
 800e462:	2110      	movs	r1, #16
 800e464:	f7ff ff17 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e468:	2800      	cmp	r0, #0
 800e46a:	d101      	bne.n	800e470 <LSM6DS3_ACC_GYRO_W_BW_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e46c:	b003      	add	sp, #12
 800e46e:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e470:	466b      	mov	r3, sp
 800e472:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_BW_XL_MASK;
 800e474:	7813      	ldrb	r3, [r2, #0]
 800e476:	2103      	movs	r1, #3
 800e478:	438b      	bics	r3, r1
  value |= newValue;
 800e47a:	431d      	orrs	r5, r3
 800e47c:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e47e:	2301      	movs	r3, #1
 800e480:	310d      	adds	r1, #13
 800e482:	0020      	movs	r0, r4
 800e484:	f7ff ff00 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e488:	1e43      	subs	r3, r0, #1
 800e48a:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e48c:	b2c0      	uxtb	r0, r0
 800e48e:	e7ed      	b.n	800e46c <LSM6DS3_ACC_GYRO_W_BW_XL+0x18>

0800e490 <LSM6DS3_ACC_GYRO_R_FS_125>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_125_t
* Output         : Status of FS_125 see LSM6DS3_ACC_GYRO_FS_125_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_125(void *handle, LSM6DS3_ACC_GYRO_FS_125_t *value)
{
 800e490:	b510      	push	{r4, lr}
 800e492:	000c      	movs	r4, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, (uint8_t *)value, 1) )
 800e494:	2301      	movs	r3, #1
 800e496:	000a      	movs	r2, r1
 800e498:	2111      	movs	r1, #17
 800e49a:	f7ff fefc 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d004      	beq.n	800e4ac <LSM6DS3_ACC_GYRO_R_FS_125+0x1c>
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_125_MASK; //mask
 800e4a2:	7822      	ldrb	r2, [r4, #0]
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800e4aa:	2001      	movs	r0, #1
}
 800e4ac:	bd10      	pop	{r4, pc}

0800e4ae <LSM6DS3_ACC_GYRO_W_FIFO_MODE>:
* Input          : LSM6DS3_ACC_GYRO_FIFO_MODE_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FIFO_MODE(void *handle, LSM6DS3_ACC_GYRO_FIFO_MODE_t newValue)
{
 800e4ae:	b530      	push	{r4, r5, lr}
 800e4b0:	b083      	sub	sp, #12
 800e4b2:	0004      	movs	r4, r0
 800e4b4:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	466a      	mov	r2, sp
 800e4ba:	3207      	adds	r2, #7
 800e4bc:	210a      	movs	r1, #10
 800e4be:	f7ff feea 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d101      	bne.n	800e4ca <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e4c6:	b003      	add	sp, #12
 800e4c8:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e4ca:	466b      	mov	r3, sp
 800e4cc:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_FIFO_MODE_MASK;
 800e4ce:	7813      	ldrb	r3, [r2, #0]
 800e4d0:	2107      	movs	r1, #7
 800e4d2:	438b      	bics	r3, r1
  value |= newValue;
 800e4d4:	431d      	orrs	r5, r3
 800e4d6:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
 800e4d8:	2301      	movs	r3, #1
 800e4da:	3103      	adds	r1, #3
 800e4dc:	0020      	movs	r0, r4
 800e4de:	f7ff fed3 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e4e2:	1e43      	subs	r3, r0, #1
 800e4e4:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e4e6:	b2c0      	uxtb	r0, r0
 800e4e8:	e7ed      	b.n	800e4c6 <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x18>

0800e4ea <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>:
* Input          : LSM6DS3_ACC_GYRO_IF_INC_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(void *handle, LSM6DS3_ACC_GYRO_IF_INC_t newValue)
{
 800e4ea:	b530      	push	{r4, r5, lr}
 800e4ec:	b083      	sub	sp, #12
 800e4ee:	0004      	movs	r4, r0
 800e4f0:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	466a      	mov	r2, sp
 800e4f6:	3207      	adds	r2, #7
 800e4f8:	2112      	movs	r1, #18
 800e4fa:	f7ff fecc 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e4fe:	2800      	cmp	r0, #0
 800e500:	d101      	bne.n	800e506 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e502:	b003      	add	sp, #12
 800e504:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e506:	466b      	mov	r3, sp
 800e508:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_IF_INC_MASK;
 800e50a:	7813      	ldrb	r3, [r2, #0]
 800e50c:	2104      	movs	r1, #4
 800e50e:	438b      	bics	r3, r1
  value |= newValue;
 800e510:	431d      	orrs	r5, r3
 800e512:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
 800e514:	2301      	movs	r3, #1
 800e516:	310e      	adds	r1, #14
 800e518:	0020      	movs	r0, r4
 800e51a:	f7ff feb5 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e51e:	1e43      	subs	r3, r0, #1
 800e520:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e522:	b2c0      	uxtb	r0, r0
 800e524:	e7ed      	b.n	800e502 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x18>

0800e526 <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR>:
* Input          : LSM6DS3_ACC_GYRO_BW_SCAL_ODR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR(void *handle, LSM6DS3_ACC_GYRO_BW_SCAL_ODR_t newValue)
{
 800e526:	b530      	push	{r4, r5, lr}
 800e528:	b083      	sub	sp, #12
 800e52a:	0004      	movs	r4, r0
 800e52c:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
 800e52e:	2301      	movs	r3, #1
 800e530:	466a      	mov	r2, sp
 800e532:	3207      	adds	r2, #7
 800e534:	2113      	movs	r1, #19
 800e536:	f7ff feae 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d101      	bne.n	800e542 <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e53e:	b003      	add	sp, #12
 800e540:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e542:	466b      	mov	r3, sp
 800e544:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_BW_SCAL_ODR_MASK;
 800e546:	7811      	ldrb	r1, [r2, #0]
 800e548:	237f      	movs	r3, #127	; 0x7f
 800e54a:	400b      	ands	r3, r1
  value |= newValue;
 800e54c:	431d      	orrs	r5, r3
 800e54e:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
 800e550:	2301      	movs	r3, #1
 800e552:	2113      	movs	r1, #19
 800e554:	0020      	movs	r0, r4
 800e556:	f7ff fe97 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e55a:	1e43      	subs	r3, r0, #1
 800e55c:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e55e:	b2c0      	uxtb	r0, r0
 800e560:	e7ed      	b.n	800e53e <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR+0x18>

0800e562 <LSM6DS3_ACC_GYRO_W_XEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_XEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_XL(void *handle, LSM6DS3_ACC_GYRO_XEN_XL_t newValue)
{
 800e562:	b530      	push	{r4, r5, lr}
 800e564:	b083      	sub	sp, #12
 800e566:	0004      	movs	r4, r0
 800e568:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e56a:	2301      	movs	r3, #1
 800e56c:	466a      	mov	r2, sp
 800e56e:	3207      	adds	r2, #7
 800e570:	2118      	movs	r1, #24
 800e572:	f7ff fe90 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e576:	2800      	cmp	r0, #0
 800e578:	d101      	bne.n	800e57e <LSM6DS3_ACC_GYRO_W_XEN_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e57a:	b003      	add	sp, #12
 800e57c:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e57e:	466b      	mov	r3, sp
 800e580:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_XEN_XL_MASK;
 800e582:	7813      	ldrb	r3, [r2, #0]
 800e584:	2108      	movs	r1, #8
 800e586:	438b      	bics	r3, r1
  value |= newValue;
 800e588:	431d      	orrs	r5, r3
 800e58a:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e58c:	2301      	movs	r3, #1
 800e58e:	3110      	adds	r1, #16
 800e590:	0020      	movs	r0, r4
 800e592:	f7ff fe79 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e596:	1e43      	subs	r3, r0, #1
 800e598:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e59a:	b2c0      	uxtb	r0, r0
 800e59c:	e7ed      	b.n	800e57a <LSM6DS3_ACC_GYRO_W_XEN_XL+0x18>

0800e59e <LSM6DS3_ACC_GYRO_W_YEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_YEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_XL(void *handle, LSM6DS3_ACC_GYRO_YEN_XL_t newValue)
{
 800e59e:	b530      	push	{r4, r5, lr}
 800e5a0:	b083      	sub	sp, #12
 800e5a2:	0004      	movs	r4, r0
 800e5a4:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	466a      	mov	r2, sp
 800e5aa:	3207      	adds	r2, #7
 800e5ac:	2118      	movs	r1, #24
 800e5ae:	f7ff fe72 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	d101      	bne.n	800e5ba <LSM6DS3_ACC_GYRO_W_YEN_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e5b6:	b003      	add	sp, #12
 800e5b8:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e5ba:	466b      	mov	r3, sp
 800e5bc:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_YEN_XL_MASK;
 800e5be:	7813      	ldrb	r3, [r2, #0]
 800e5c0:	2110      	movs	r1, #16
 800e5c2:	438b      	bics	r3, r1
  value |= newValue;
 800e5c4:	431d      	orrs	r5, r3
 800e5c6:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	3108      	adds	r1, #8
 800e5cc:	0020      	movs	r0, r4
 800e5ce:	f7ff fe5b 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e5d2:	1e43      	subs	r3, r0, #1
 800e5d4:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e5d6:	b2c0      	uxtb	r0, r0
 800e5d8:	e7ed      	b.n	800e5b6 <LSM6DS3_ACC_GYRO_W_YEN_XL+0x18>

0800e5da <LSM6DS3_ACC_GYRO_W_ZEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_XL(void *handle, LSM6DS3_ACC_GYRO_ZEN_XL_t newValue)
{
 800e5da:	b530      	push	{r4, r5, lr}
 800e5dc:	b083      	sub	sp, #12
 800e5de:	0004      	movs	r4, r0
 800e5e0:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	466a      	mov	r2, sp
 800e5e6:	3207      	adds	r2, #7
 800e5e8:	2118      	movs	r1, #24
 800e5ea:	f7ff fe54 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d101      	bne.n	800e5f6 <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e5f2:	b003      	add	sp, #12
 800e5f4:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e5f6:	466b      	mov	r3, sp
 800e5f8:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_ZEN_XL_MASK;
 800e5fa:	7813      	ldrb	r3, [r2, #0]
 800e5fc:	2120      	movs	r1, #32
 800e5fe:	438b      	bics	r3, r1
  value |= newValue;
 800e600:	431d      	orrs	r5, r3
 800e602:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e604:	2301      	movs	r3, #1
 800e606:	3908      	subs	r1, #8
 800e608:	0020      	movs	r0, r4
 800e60a:	f7ff fe3d 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e60e:	1e43      	subs	r3, r0, #1
 800e610:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e612:	b2c0      	uxtb	r0, r0
 800e614:	e7ed      	b.n	800e5f2 <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x18>

0800e616 <LSM6DS3_ACC_GYRO_W_XEN_G>:
* Input          : LSM6DS3_ACC_GYRO_XEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_G(void *handle, LSM6DS3_ACC_GYRO_XEN_G_t newValue)
{
 800e616:	b530      	push	{r4, r5, lr}
 800e618:	b083      	sub	sp, #12
 800e61a:	0004      	movs	r4, r0
 800e61c:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e61e:	2301      	movs	r3, #1
 800e620:	466a      	mov	r2, sp
 800e622:	3207      	adds	r2, #7
 800e624:	2119      	movs	r1, #25
 800e626:	f7ff fe36 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e62a:	2800      	cmp	r0, #0
 800e62c:	d101      	bne.n	800e632 <LSM6DS3_ACC_GYRO_W_XEN_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e62e:	b003      	add	sp, #12
 800e630:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e632:	466b      	mov	r3, sp
 800e634:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_XEN_G_MASK;
 800e636:	7813      	ldrb	r3, [r2, #0]
 800e638:	2108      	movs	r1, #8
 800e63a:	438b      	bics	r3, r1
  value |= newValue;
 800e63c:	431d      	orrs	r5, r3
 800e63e:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e640:	2301      	movs	r3, #1
 800e642:	3111      	adds	r1, #17
 800e644:	0020      	movs	r0, r4
 800e646:	f7ff fe1f 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e64a:	1e43      	subs	r3, r0, #1
 800e64c:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e64e:	b2c0      	uxtb	r0, r0
 800e650:	e7ed      	b.n	800e62e <LSM6DS3_ACC_GYRO_W_XEN_G+0x18>

0800e652 <LSM6DS3_ACC_GYRO_W_YEN_G>:
* Input          : LSM6DS3_ACC_GYRO_YEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_G(void *handle, LSM6DS3_ACC_GYRO_YEN_G_t newValue)
{
 800e652:	b530      	push	{r4, r5, lr}
 800e654:	b083      	sub	sp, #12
 800e656:	0004      	movs	r4, r0
 800e658:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e65a:	2301      	movs	r3, #1
 800e65c:	466a      	mov	r2, sp
 800e65e:	3207      	adds	r2, #7
 800e660:	2119      	movs	r1, #25
 800e662:	f7ff fe18 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e666:	2800      	cmp	r0, #0
 800e668:	d101      	bne.n	800e66e <LSM6DS3_ACC_GYRO_W_YEN_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e66a:	b003      	add	sp, #12
 800e66c:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e66e:	466b      	mov	r3, sp
 800e670:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_YEN_G_MASK;
 800e672:	7813      	ldrb	r3, [r2, #0]
 800e674:	2110      	movs	r1, #16
 800e676:	438b      	bics	r3, r1
  value |= newValue;
 800e678:	431d      	orrs	r5, r3
 800e67a:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e67c:	2301      	movs	r3, #1
 800e67e:	3109      	adds	r1, #9
 800e680:	0020      	movs	r0, r4
 800e682:	f7ff fe01 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e686:	1e43      	subs	r3, r0, #1
 800e688:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e68a:	b2c0      	uxtb	r0, r0
 800e68c:	e7ed      	b.n	800e66a <LSM6DS3_ACC_GYRO_W_YEN_G+0x18>

0800e68e <LSM6DS3_ACC_GYRO_W_ZEN_G>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_G(void *handle, LSM6DS3_ACC_GYRO_ZEN_G_t newValue)
{
 800e68e:	b530      	push	{r4, r5, lr}
 800e690:	b083      	sub	sp, #12
 800e692:	0004      	movs	r4, r0
 800e694:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e696:	2301      	movs	r3, #1
 800e698:	466a      	mov	r2, sp
 800e69a:	3207      	adds	r2, #7
 800e69c:	2119      	movs	r1, #25
 800e69e:	f7ff fdfa 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d101      	bne.n	800e6aa <LSM6DS3_ACC_GYRO_W_ZEN_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e6a6:	b003      	add	sp, #12
 800e6a8:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e6aa:	466b      	mov	r3, sp
 800e6ac:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_ZEN_G_MASK;
 800e6ae:	7813      	ldrb	r3, [r2, #0]
 800e6b0:	2120      	movs	r1, #32
 800e6b2:	438b      	bics	r3, r1
  value |= newValue;
 800e6b4:	431d      	orrs	r5, r3
 800e6b6:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	3907      	subs	r1, #7
 800e6bc:	0020      	movs	r0, r4
 800e6be:	f7ff fde3 	bl	800e288 <LSM6DS3_ACC_GYRO_WriteReg>
 800e6c2:	1e43      	subs	r3, r0, #1
 800e6c4:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e6c6:	b2c0      	uxtb	r0, r0
 800e6c8:	e7ed      	b.n	800e6a6 <LSM6DS3_ACC_GYRO_W_ZEN_G+0x18>

0800e6ca <LSM6DS3_ACC_GYRO_Get_GetFIFOData>:
* Input          : pointer to [uint8_t]
* Output         : GetFIFOData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_Get_GetFIFOData(void *handle, uint8_t *buff)
{
 800e6ca:	b570      	push	{r4, r5, r6, lr}
 800e6cc:	0005      	movs	r5, r0
 800e6ce:	000c      	movs	r4, r1
  k = 0;
  for (i = 0; i < 1; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_DATA_OUT_L + k, &buff[k], 1))
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	000a      	movs	r2, r1
 800e6d4:	213e      	movs	r1, #62	; 0x3e
 800e6d6:	f7ff fdde 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d008      	beq.n	800e6f0 <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x26>
 800e6de:	1c62      	adds	r2, r4, #1
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	213f      	movs	r1, #63	; 0x3f
 800e6e4:	0028      	movs	r0, r5
 800e6e6:	f7ff fdd6 	bl	800e296 <LSM6DS3_ACC_GYRO_ReadReg>
 800e6ea:	1e43      	subs	r3, r0, #1
 800e6ec:	4198      	sbcs	r0, r3
        return MEMS_ERROR;
 800e6ee:	b2c0      	uxtb	r0, r0
      k++;
    }
  }

  return MEMS_SUCCESS;
}
 800e6f0:	bd70      	pop	{r4, r5, r6, pc}

0800e6f2 <LSM6DS3_ACC_Get_Acceleration>:
{
 800e6f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6f4:	b085      	sub	sp, #20
 800e6f6:	0004      	movs	r4, r0
 800e6f8:	000e      	movs	r6, r1
 800e6fa:	0017      	movs	r7, r2
  LSM6DS3_ACC_GYRO_R_FS_XL(handle, &fs);
 800e6fc:	ab02      	add	r3, sp, #8
 800e6fe:	1ddd      	adds	r5, r3, #7
 800e700:	0029      	movs	r1, r5
 800e702:	f7ff fdf7 	bl	800e2f4 <LSM6DS3_ACC_GYRO_R_FS_XL>
  switch(fs)
 800e706:	782b      	ldrb	r3, [r5, #0]
 800e708:	2b04      	cmp	r3, #4
 800e70a:	d05e      	beq.n	800e7ca <LSM6DS3_ACC_Get_Acceleration+0xd8>
 800e70c:	b2da      	uxtb	r2, r3
 800e70e:	2a04      	cmp	r2, #4
 800e710:	d950      	bls.n	800e7b4 <LSM6DS3_ACC_Get_Acceleration+0xc2>
      sensitivity = LSM6DS3_ACC_Sensitivity_List[1];
 800e712:	217a      	movs	r1, #122	; 0x7a
 800e714:	2200      	movs	r2, #0
 800e716:	9100      	str	r1, [sp, #0]
 800e718:	9201      	str	r2, [sp, #4]
  switch(fs)
 800e71a:	2b08      	cmp	r3, #8
 800e71c:	d005      	beq.n	800e72a <LSM6DS3_ACC_Get_Acceleration+0x38>
      sensitivity = LSM6DS3_ACC_Sensitivity_List[2];
 800e71e:	21f4      	movs	r1, #244	; 0xf4
 800e720:	2200      	movs	r2, #0
 800e722:	9100      	str	r1, [sp, #0]
 800e724:	9201      	str	r2, [sp, #4]
  switch(fs)
 800e726:	2b0c      	cmp	r3, #12
 800e728:	d14a      	bne.n	800e7c0 <LSM6DS3_ACC_Get_Acceleration+0xce>
  if (from_fifo)
 800e72a:	2f00      	cmp	r7, #0
 800e72c:	d053      	beq.n	800e7d6 <LSM6DS3_ACC_Get_Acceleration+0xe4>
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800e72e:	a902      	add	r1, sp, #8
 800e730:	0020      	movs	r0, r4
 800e732:	f7ff ffca 	bl	800e6ca <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800e736:	ab02      	add	r3, sp, #8
 800e738:	1c99      	adds	r1, r3, #2
 800e73a:	0020      	movs	r0, r4
 800e73c:	f7ff ffc5 	bl	800e6ca <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800e740:	a903      	add	r1, sp, #12
 800e742:	0020      	movs	r0, r4
 800e744:	f7ff ffc1 	bl	800e6ca <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
  buff[0] = (raw_data_tmp.i16bit[0] * sensitivity + 500) / 1000;
 800e748:	ab02      	add	r3, sp, #8
 800e74a:	2000      	movs	r0, #0
 800e74c:	5e18      	ldrsh	r0, [r3, r0]
 800e74e:	17c1      	asrs	r1, r0, #31
 800e750:	9a00      	ldr	r2, [sp, #0]
 800e752:	9b01      	ldr	r3, [sp, #4]
 800e754:	f7f1 ff2e 	bl	80005b4 <__aeabi_lmul>
 800e758:	24fa      	movs	r4, #250	; 0xfa
 800e75a:	0064      	lsls	r4, r4, #1
 800e75c:	2500      	movs	r5, #0
 800e75e:	1900      	adds	r0, r0, r4
 800e760:	4169      	adcs	r1, r5
 800e762:	22fa      	movs	r2, #250	; 0xfa
 800e764:	0092      	lsls	r2, r2, #2
 800e766:	2300      	movs	r3, #0
 800e768:	f7f1 fee0 	bl	800052c <__aeabi_ldivmod>
 800e76c:	6030      	str	r0, [r6, #0]
  buff[1] = (raw_data_tmp.i16bit[1] * sensitivity + 500) / 1000;
 800e76e:	ab02      	add	r3, sp, #8
 800e770:	2002      	movs	r0, #2
 800e772:	5e18      	ldrsh	r0, [r3, r0]
 800e774:	17c1      	asrs	r1, r0, #31
 800e776:	9a00      	ldr	r2, [sp, #0]
 800e778:	9b01      	ldr	r3, [sp, #4]
 800e77a:	f7f1 ff1b 	bl	80005b4 <__aeabi_lmul>
 800e77e:	1900      	adds	r0, r0, r4
 800e780:	4169      	adcs	r1, r5
 800e782:	22fa      	movs	r2, #250	; 0xfa
 800e784:	0092      	lsls	r2, r2, #2
 800e786:	2300      	movs	r3, #0
 800e788:	f7f1 fed0 	bl	800052c <__aeabi_ldivmod>
 800e78c:	6070      	str	r0, [r6, #4]
  buff[2] = (raw_data_tmp.i16bit[2] * sensitivity + 500) / 1000;
 800e78e:	ab02      	add	r3, sp, #8
 800e790:	2004      	movs	r0, #4
 800e792:	5e18      	ldrsh	r0, [r3, r0]
 800e794:	17c1      	asrs	r1, r0, #31
 800e796:	9a00      	ldr	r2, [sp, #0]
 800e798:	9b01      	ldr	r3, [sp, #4]
 800e79a:	f7f1 ff0b 	bl	80005b4 <__aeabi_lmul>
 800e79e:	1900      	adds	r0, r0, r4
 800e7a0:	4169      	adcs	r1, r5
 800e7a2:	22fa      	movs	r2, #250	; 0xfa
 800e7a4:	0092      	lsls	r2, r2, #2
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	f7f1 fec0 	bl	800052c <__aeabi_ldivmod>
 800e7ac:	60b0      	str	r0, [r6, #8]
}
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	b005      	add	sp, #20
 800e7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      sensitivity = LSM6DS3_ACC_Sensitivity_List[0];
 800e7b4:	213d      	movs	r1, #61	; 0x3d
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	9100      	str	r1, [sp, #0]
 800e7ba:	9201      	str	r2, [sp, #4]
  switch(fs)
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d0b4      	beq.n	800e72a <LSM6DS3_ACC_Get_Acceleration+0x38>
  long long sensitivity = 0;
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	9200      	str	r2, [sp, #0]
 800e7c6:	9301      	str	r3, [sp, #4]
 800e7c8:	e7af      	b.n	800e72a <LSM6DS3_ACC_Get_Acceleration+0x38>
      sensitivity = LSM6DS3_ACC_Sensitivity_List[3];
 800e7ca:	22f4      	movs	r2, #244	; 0xf4
 800e7cc:	0052      	lsls	r2, r2, #1
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	9200      	str	r2, [sp, #0]
 800e7d2:	9301      	str	r3, [sp, #4]
      break;
 800e7d4:	e7a9      	b.n	800e72a <LSM6DS3_ACC_Get_Acceleration+0x38>
    LSM6DS3_ACC_GYRO_GetRawAccData(handle, raw_data_tmp.u8bit);
 800e7d6:	a902      	add	r1, sp, #8
 800e7d8:	0020      	movs	r0, r4
 800e7da:	f7ff fd9a 	bl	800e312 <LSM6DS3_ACC_GYRO_GetRawAccData>
 800e7de:	e7b3      	b.n	800e748 <LSM6DS3_ACC_Get_Acceleration+0x56>

0800e7e0 <LSM6DS3_ACC_Get_AngularRate>:
{
 800e7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	0004      	movs	r4, r0
 800e7e6:	000e      	movs	r6, r1
 800e7e8:	0017      	movs	r7, r2
  LSM6DS3_ACC_GYRO_R_FS_125(handle, &fs_125);
 800e7ea:	ab02      	add	r3, sp, #8
 800e7ec:	1ddd      	adds	r5, r3, #7
 800e7ee:	0029      	movs	r1, r5
 800e7f0:	f7ff fe4e 	bl	800e490 <LSM6DS3_ACC_GYRO_R_FS_125>
  if (fs_125 == LSM6DS3_ACC_GYRO_FS_125_ENABLED)
 800e7f4:	782b      	ldrb	r3, [r5, #0]
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d149      	bne.n	800e88e <LSM6DS3_ACC_Get_AngularRate+0xae>
    sensitivity = LSM6DS3_GYRO_Sensitivity_List[0];
 800e7fa:	4a3d      	ldr	r2, [pc, #244]	; (800e8f0 <LSM6DS3_ACC_Get_AngularRate+0x110>)
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	9200      	str	r2, [sp, #0]
 800e800:	9301      	str	r3, [sp, #4]
  if (from_fifo)
 800e802:	2f00      	cmp	r7, #0
 800e804:	d100      	bne.n	800e808 <LSM6DS3_ACC_Get_AngularRate+0x28>
 800e806:	e06d      	b.n	800e8e4 <LSM6DS3_ACC_Get_AngularRate+0x104>
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800e808:	a902      	add	r1, sp, #8
 800e80a:	0020      	movs	r0, r4
 800e80c:	f7ff ff5d 	bl	800e6ca <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800e810:	ab02      	add	r3, sp, #8
 800e812:	1c99      	adds	r1, r3, #2
 800e814:	0020      	movs	r0, r4
 800e816:	f7ff ff58 	bl	800e6ca <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800e81a:	a903      	add	r1, sp, #12
 800e81c:	0020      	movs	r0, r4
 800e81e:	f7ff ff54 	bl	800e6ca <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
  buff[0] = (raw_data_tmp.i16bit[0] * sensitivity + 500) / 1000;
 800e822:	ab02      	add	r3, sp, #8
 800e824:	2000      	movs	r0, #0
 800e826:	5e18      	ldrsh	r0, [r3, r0]
 800e828:	17c1      	asrs	r1, r0, #31
 800e82a:	9a00      	ldr	r2, [sp, #0]
 800e82c:	9b01      	ldr	r3, [sp, #4]
 800e82e:	f7f1 fec1 	bl	80005b4 <__aeabi_lmul>
 800e832:	24fa      	movs	r4, #250	; 0xfa
 800e834:	0064      	lsls	r4, r4, #1
 800e836:	2500      	movs	r5, #0
 800e838:	1900      	adds	r0, r0, r4
 800e83a:	4169      	adcs	r1, r5
 800e83c:	22fa      	movs	r2, #250	; 0xfa
 800e83e:	0092      	lsls	r2, r2, #2
 800e840:	2300      	movs	r3, #0
 800e842:	f7f1 fe73 	bl	800052c <__aeabi_ldivmod>
 800e846:	6030      	str	r0, [r6, #0]
  buff[1] = (raw_data_tmp.i16bit[1] * sensitivity + 500) / 1000;
 800e848:	ab02      	add	r3, sp, #8
 800e84a:	2002      	movs	r0, #2
 800e84c:	5e18      	ldrsh	r0, [r3, r0]
 800e84e:	17c1      	asrs	r1, r0, #31
 800e850:	9a00      	ldr	r2, [sp, #0]
 800e852:	9b01      	ldr	r3, [sp, #4]
 800e854:	f7f1 feae 	bl	80005b4 <__aeabi_lmul>
 800e858:	1900      	adds	r0, r0, r4
 800e85a:	4169      	adcs	r1, r5
 800e85c:	22fa      	movs	r2, #250	; 0xfa
 800e85e:	0092      	lsls	r2, r2, #2
 800e860:	2300      	movs	r3, #0
 800e862:	f7f1 fe63 	bl	800052c <__aeabi_ldivmod>
 800e866:	6070      	str	r0, [r6, #4]
  buff[2] = (raw_data_tmp.i16bit[2] * sensitivity + 500) / 1000;
 800e868:	ab02      	add	r3, sp, #8
 800e86a:	2004      	movs	r0, #4
 800e86c:	5e18      	ldrsh	r0, [r3, r0]
 800e86e:	17c1      	asrs	r1, r0, #31
 800e870:	9a00      	ldr	r2, [sp, #0]
 800e872:	9b01      	ldr	r3, [sp, #4]
 800e874:	f7f1 fe9e 	bl	80005b4 <__aeabi_lmul>
 800e878:	1900      	adds	r0, r0, r4
 800e87a:	4169      	adcs	r1, r5
 800e87c:	22fa      	movs	r2, #250	; 0xfa
 800e87e:	0092      	lsls	r2, r2, #2
 800e880:	2300      	movs	r3, #0
 800e882:	f7f1 fe53 	bl	800052c <__aeabi_ldivmod>
 800e886:	60b0      	str	r0, [r6, #8]
}
 800e888:	2001      	movs	r0, #1
 800e88a:	b005      	add	sp, #20
 800e88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LSM6DS3_ACC_GYRO_R_FS_G(handle, &fs);
 800e88e:	ab02      	add	r3, sp, #8
 800e890:	1d9d      	adds	r5, r3, #6
 800e892:	0029      	movs	r1, r5
 800e894:	0020      	movs	r0, r4
 800e896:	f7ff fd94 	bl	800e3c2 <LSM6DS3_ACC_GYRO_R_FS_G>
    switch(fs)
 800e89a:	782b      	ldrb	r3, [r5, #0]
 800e89c:	2b04      	cmp	r3, #4
 800e89e:	d012      	beq.n	800e8c6 <LSM6DS3_ACC_Get_AngularRate+0xe6>
 800e8a0:	b2da      	uxtb	r2, r3
 800e8a2:	2a04      	cmp	r2, #4
 800e8a4:	d908      	bls.n	800e8b8 <LSM6DS3_ACC_Get_AngularRate+0xd8>
 800e8a6:	2b08      	cmp	r3, #8
 800e8a8:	d012      	beq.n	800e8d0 <LSM6DS3_ACC_Get_AngularRate+0xf0>
 800e8aa:	2b0c      	cmp	r3, #12
 800e8ac:	d115      	bne.n	800e8da <LSM6DS3_ACC_Get_AngularRate+0xfa>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[4];
 800e8ae:	4a11      	ldr	r2, [pc, #68]	; (800e8f4 <LSM6DS3_ACC_Get_AngularRate+0x114>)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	9200      	str	r2, [sp, #0]
 800e8b4:	9301      	str	r3, [sp, #4]
        break;
 800e8b6:	e7a4      	b.n	800e802 <LSM6DS3_ACC_Get_AngularRate+0x22>
    switch(fs)
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d10e      	bne.n	800e8da <LSM6DS3_ACC_Get_AngularRate+0xfa>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[1];
 800e8bc:	4a0e      	ldr	r2, [pc, #56]	; (800e8f8 <LSM6DS3_ACC_Get_AngularRate+0x118>)
 800e8be:	2300      	movs	r3, #0
 800e8c0:	9200      	str	r2, [sp, #0]
 800e8c2:	9301      	str	r3, [sp, #4]
 800e8c4:	e79d      	b.n	800e802 <LSM6DS3_ACC_Get_AngularRate+0x22>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[2];
 800e8c6:	4a0d      	ldr	r2, [pc, #52]	; (800e8fc <LSM6DS3_ACC_Get_AngularRate+0x11c>)
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	9200      	str	r2, [sp, #0]
 800e8cc:	9301      	str	r3, [sp, #4]
        break;
 800e8ce:	e798      	b.n	800e802 <LSM6DS3_ACC_Get_AngularRate+0x22>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[3];
 800e8d0:	4a0b      	ldr	r2, [pc, #44]	; (800e900 <LSM6DS3_ACC_Get_AngularRate+0x120>)
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	9200      	str	r2, [sp, #0]
 800e8d6:	9301      	str	r3, [sp, #4]
        break;
 800e8d8:	e793      	b.n	800e802 <LSM6DS3_ACC_Get_AngularRate+0x22>
  long long sensitivity = 0;
 800e8da:	2200      	movs	r2, #0
 800e8dc:	2300      	movs	r3, #0
 800e8de:	9200      	str	r2, [sp, #0]
 800e8e0:	9301      	str	r3, [sp, #4]
 800e8e2:	e78e      	b.n	800e802 <LSM6DS3_ACC_Get_AngularRate+0x22>
    LSM6DS3_ACC_GYRO_GetRawGyroData(handle, raw_data_tmp.u8bit);
 800e8e4:	a902      	add	r1, sp, #8
 800e8e6:	0020      	movs	r0, r4
 800e8e8:	f7ff fd98 	bl	800e41c <LSM6DS3_ACC_GYRO_GetRawGyroData>
 800e8ec:	e799      	b.n	800e822 <LSM6DS3_ACC_Get_AngularRate+0x42>
 800e8ee:	46c0      	nop			; (mov r8, r8)
 800e8f0:	00001117 	.word	0x00001117
 800e8f4:	00011170 	.word	0x00011170
 800e8f8:	0000222e 	.word	0x0000222e
 800e8fc:	0000445c 	.word	0x0000445c
 800e900:	000088b8 	.word	0x000088b8

0800e904 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e904:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e906:	f000 ff55 	bl	800f7b4 <vTaskStartScheduler>
  
  return osOK;
}
 800e90a:	2000      	movs	r0, #0
 800e90c:	bd10      	pop	{r4, pc}

0800e90e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e90e:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e910:	2800      	cmp	r0, #0
 800e912:	d100      	bne.n	800e916 <osDelay+0x8>
 800e914:	3001      	adds	r0, #1
 800e916:	f001 f889 	bl	800fa2c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e91a:	2000      	movs	r0, #0
 800e91c:	bd10      	pop	{r4, pc}

0800e91e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e91e:	b510      	push	{r4, lr}
 800e920:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e922:	2901      	cmp	r1, #1
 800e924:	d005      	beq.n	800e932 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e926:	2100      	movs	r1, #0
 800e928:	f000 faf6 	bl	800ef18 <xQueueCreateCountingSemaphore>
 800e92c:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e92e:	0020      	movs	r0, r4
 800e930:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e932:	2203      	movs	r2, #3
 800e934:	2100      	movs	r1, #0
 800e936:	f000 fac8 	bl	800eeca <xQueueGenericCreate>
 800e93a:	1e04      	subs	r4, r0, #0
 800e93c:	d0f7      	beq.n	800e92e <osSemaphoreCreate+0x10>
 800e93e:	2300      	movs	r3, #0
 800e940:	2200      	movs	r2, #0
 800e942:	2100      	movs	r1, #0
 800e944:	f000 fafc 	bl	800ef40 <xQueueGenericSend>
 800e948:	e7f1      	b.n	800e92e <osSemaphoreCreate+0x10>
	...

0800e94c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e94c:	b500      	push	{lr}
 800e94e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e950:	2300      	movs	r3, #0
 800e952:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e954:	2800      	cmp	r0, #0
 800e956:	d021      	beq.n	800e99c <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e958:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d010      	beq.n	800e982 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e960:	aa01      	add	r2, sp, #4
 800e962:	2100      	movs	r1, #0
 800e964:	f000 fcae 	bl	800f2c4 <xQueueReceiveFromISR>
 800e968:	0003      	movs	r3, r0
      return osErrorOS;
 800e96a:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d113      	bne.n	800e998 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e970:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800e972:	9b01      	ldr	r3, [sp, #4]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00f      	beq.n	800e998 <osSemaphoreWait+0x4c>
 800e978:	4b09      	ldr	r3, [pc, #36]	; (800e9a0 <osSemaphoreWait+0x54>)
 800e97a:	2280      	movs	r2, #128	; 0x80
 800e97c:	0552      	lsls	r2, r2, #21
 800e97e:	601a      	str	r2, [r3, #0]
 800e980:	e00a      	b.n	800e998 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e982:	2300      	movs	r3, #0
 800e984:	000a      	movs	r2, r1
 800e986:	2100      	movs	r1, #0
 800e988:	f000 fbf3 	bl	800f172 <xQueueGenericReceive>
  return osOK;
 800e98c:	3801      	subs	r0, #1
 800e98e:	1e43      	subs	r3, r0, #1
 800e990:	4198      	sbcs	r0, r3
 800e992:	4240      	negs	r0, r0
 800e994:	23ff      	movs	r3, #255	; 0xff
 800e996:	4018      	ands	r0, r3
}
 800e998:	b003      	add	sp, #12
 800e99a:	bd00      	pop	{pc}
    return osErrorParameter;
 800e99c:	2080      	movs	r0, #128	; 0x80
 800e99e:	e7fb      	b.n	800e998 <osSemaphoreWait+0x4c>
 800e9a0:	e000ed04 	.word	0xe000ed04

0800e9a4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e9a4:	b500      	push	{lr}
 800e9a6:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	9301      	str	r3, [sp, #4]
 800e9ac:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00f      	beq.n	800e9d4 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e9b4:	a901      	add	r1, sp, #4
 800e9b6:	f000 fba1 	bl	800f0fc <xQueueGiveFromISR>
 800e9ba:	0003      	movs	r3, r0
      return osErrorOS;
 800e9bc:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d114      	bne.n	800e9ec <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800e9c2:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e9c4:	9b01      	ldr	r3, [sp, #4]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d010      	beq.n	800e9ec <osSemaphoreRelease+0x48>
 800e9ca:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <osSemaphoreRelease+0x4c>)
 800e9cc:	2280      	movs	r2, #128	; 0x80
 800e9ce:	0552      	lsls	r2, r2, #21
 800e9d0:	601a      	str	r2, [r3, #0]
 800e9d2:	e00b      	b.n	800e9ec <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	2100      	movs	r1, #0
 800e9da:	f000 fab1 	bl	800ef40 <xQueueGenericSend>
      result = osErrorOS;
 800e9de:	3801      	subs	r0, #1
 800e9e0:	4243      	negs	r3, r0
 800e9e2:	4158      	adcs	r0, r3
 800e9e4:	4240      	negs	r0, r0
 800e9e6:	23fe      	movs	r3, #254	; 0xfe
 800e9e8:	4398      	bics	r0, r3
 800e9ea:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e9ec:	b003      	add	sp, #12
 800e9ee:	bd00      	pop	{pc}
 800e9f0:	e000ed04 	.word	0xe000ed04

0800e9f4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e9f4:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e9f6:	f001 fa0f 	bl	800fe18 <xTaskGetSchedulerState>
 800e9fa:	2801      	cmp	r0, #1
 800e9fc:	d001      	beq.n	800ea02 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800e9fe:	f001 fe85 	bl	801070c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800ea02:	bd10      	pop	{r4, pc}

0800ea04 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800ea04:	b570      	push	{r4, r5, r6, lr}
 800ea06:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800ea08:	d101      	bne.n	800ea0e <FreeRTOS_CLIRegisterCommand+0xa>
 800ea0a:	b672      	cpsid	i
 800ea0c:	e7fe      	b.n	800ea0c <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800ea0e:	2008      	movs	r0, #8
 800ea10:	f001 feb8 	bl	8010784 <pvPortMalloc>
 800ea14:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800ea16:	d101      	bne.n	800ea1c <FreeRTOS_CLIRegisterCommand+0x18>
 800ea18:	b672      	cpsid	i
 800ea1a:	e7fe      	b.n	800ea1a <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800ea1c:	f001 fe30 	bl	8010680 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800ea20:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800ea22:	2300      	movs	r3, #0
 800ea24:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800ea26:	4b04      	ldr	r3, [pc, #16]	; (800ea38 <FreeRTOS_CLIRegisterCommand+0x34>)
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800ea2c:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800ea2e:	f001 fe33 	bl	8010698 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800ea32:	2001      	movs	r0, #1
 800ea34:	bd70      	pop	{r4, r5, r6, pc}
 800ea36:	46c0      	nop			; (mov r8, r8)
 800ea38:	20000124 	.word	0x20000124

0800ea3c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800ea3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea3e:	46d6      	mov	lr, sl
 800ea40:	b500      	push	{lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	9001      	str	r0, [sp, #4]
 800ea46:	9102      	str	r1, [sp, #8]
 800ea48:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800ea4a:	4b37      	ldr	r3, [pc, #220]	; (800eb28 <FreeRTOS_CLIProcessCommand+0xec>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00e      	beq.n	800ea70 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	689b      	ldr	r3, [r3, #8]
 800ea56:	9a01      	ldr	r2, [sp, #4]
 800ea58:	9903      	ldr	r1, [sp, #12]
 800ea5a:	9802      	ldr	r0, [sp, #8]
 800ea5c:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d102      	bne.n	800ea68 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800ea62:	4b31      	ldr	r3, [pc, #196]	; (800eb28 <FreeRTOS_CLIProcessCommand+0xec>)
 800ea64:	2200      	movs	r2, #0
 800ea66:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800ea68:	b004      	add	sp, #16
 800ea6a:	bc04      	pop	{r2}
 800ea6c:	4692      	mov	sl, r2
 800ea6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ea70:	4d2e      	ldr	r5, [pc, #184]	; (800eb2c <FreeRTOS_CLIProcessCommand+0xf0>)
 800ea72:	4a2d      	ldr	r2, [pc, #180]	; (800eb28 <FreeRTOS_CLIProcessCommand+0xec>)
 800ea74:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ea76:	3320      	adds	r3, #32
 800ea78:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ea7a:	0017      	movs	r7, r2
 800ea7c:	e00a      	b.n	800ea94 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800ea7e:	0002      	movs	r2, r0
 800ea80:	0021      	movs	r1, r4
 800ea82:	9801      	ldr	r0, [sp, #4]
 800ea84:	f005 feac 	bl	80147e0 <strncmp>
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	d00e      	beq.n	800eaaa <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ea8c:	686d      	ldr	r5, [r5, #4]
 800ea8e:	603d      	str	r5, [r7, #0]
 800ea90:	2d00      	cmp	r5, #0
 800ea92:	d012      	beq.n	800eaba <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800ea94:	682e      	ldr	r6, [r5, #0]
 800ea96:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800ea98:	0020      	movs	r0, r4
 800ea9a:	f7f1 fb3d 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ea9e:	9b01      	ldr	r3, [sp, #4]
 800eaa0:	5c1b      	ldrb	r3, [r3, r0]
 800eaa2:	4652      	mov	r2, sl
 800eaa4:	4393      	bics	r3, r2
 800eaa6:	d1f1      	bne.n	800ea8c <FreeRTOS_CLIProcessCommand+0x50>
 800eaa8:	e7e9      	b.n	800ea7e <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800eaaa:	200c      	movs	r0, #12
 800eaac:	5630      	ldrsb	r0, [r6, r0]
 800eaae:	2800      	cmp	r0, #0
 800eab0:	da0a      	bge.n	800eac8 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800eab2:	4b1d      	ldr	r3, [pc, #116]	; (800eb28 <FreeRTOS_CLIProcessCommand+0xec>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1cb      	bne.n	800ea52 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800eaba:	9a03      	ldr	r2, [sp, #12]
 800eabc:	491c      	ldr	r1, [pc, #112]	; (800eb30 <FreeRTOS_CLIProcessCommand+0xf4>)
 800eabe:	9802      	ldr	r0, [sp, #8]
 800eac0:	f005 fe9f 	bl	8014802 <strncpy>
		xReturn = pdFALSE;
 800eac4:	2000      	movs	r0, #0
	return xReturn;
 800eac6:	e7cf      	b.n	800ea68 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800eac8:	9a01      	ldr	r2, [sp, #4]
 800eaca:	2300      	movs	r3, #0
 800eacc:	56d3      	ldrsb	r3, [r2, r3]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d027      	beq.n	800eb22 <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800ead2:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800ead4:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800ead6:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800ead8:	2501      	movs	r5, #1
 800eada:	e009      	b.n	800eaf0 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800eadc:	2901      	cmp	r1, #1
 800eade:	d002      	beq.n	800eae6 <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800eae0:	3401      	adds	r4, #1
 800eae2:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800eae4:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800eae6:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800eae8:	2300      	movs	r3, #0
 800eaea:	56d3      	ldrsb	r3, [r2, r3]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d003      	beq.n	800eaf8 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800eaf0:	2b20      	cmp	r3, #32
 800eaf2:	d0f3      	beq.n	800eadc <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800eaf4:	0031      	movs	r1, r6
 800eaf6:	e7f6      	b.n	800eae6 <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800eaf8:	2901      	cmp	r1, #1
 800eafa:	d00f      	beq.n	800eb1c <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800eafc:	4b0a      	ldr	r3, [pc, #40]	; (800eb28 <FreeRTOS_CLIProcessCommand+0xec>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d0da      	beq.n	800eaba <FreeRTOS_CLIProcessCommand+0x7e>
 800eb04:	42a0      	cmp	r0, r4
 800eb06:	d0a4      	beq.n	800ea52 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800eb08:	9a03      	ldr	r2, [sp, #12]
 800eb0a:	490a      	ldr	r1, [pc, #40]	; (800eb34 <FreeRTOS_CLIProcessCommand+0xf8>)
 800eb0c:	9802      	ldr	r0, [sp, #8]
 800eb0e:	f005 fe78 	bl	8014802 <strncpy>
		pxCommand = NULL;
 800eb12:	4b05      	ldr	r3, [pc, #20]	; (800eb28 <FreeRTOS_CLIProcessCommand+0xec>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	601a      	str	r2, [r3, #0]
 800eb18:	2000      	movs	r0, #0
 800eb1a:	e7a5      	b.n	800ea68 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800eb1c:	3c01      	subs	r4, #1
 800eb1e:	b264      	sxtb	r4, r4
 800eb20:	e7ec      	b.n	800eafc <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800eb22:	2400      	movs	r4, #0
 800eb24:	e7ea      	b.n	800eafc <FreeRTOS_CLIProcessCommand+0xc0>
 800eb26:	46c0      	nop			; (mov r8, r8)
 800eb28:	20001da4 	.word	0x20001da4
 800eb2c:	20000128 	.word	0x20000128
 800eb30:	0801b92c 	.word	0x0801b92c
 800eb34:	0801b8d4 	.word	0x0801b8d4

0800eb38 <FreeRTOS_CLIGetOutputBuffer>:
}
 800eb38:	4800      	ldr	r0, [pc, #0]	; (800eb3c <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800eb3a:	4770      	bx	lr
 800eb3c:	20001b3c 	.word	0x20001b3c

0800eb40 <FreeRTOS_CLIGetParameter>:
{
 800eb40:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800eb46:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800eb48:	2900      	cmp	r1, #0
 800eb4a:	d10b      	bne.n	800eb64 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	e02a      	b.n	800eba6 <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800eb50:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800eb52:	2300      	movs	r3, #0
 800eb54:	56c3      	ldrsb	r3, [r0, r3]
 800eb56:	2b20      	cmp	r3, #32
 800eb58:	d0fa      	beq.n	800eb50 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d022      	beq.n	800eba4 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800eb5e:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800eb60:	42a1      	cmp	r1, r4
 800eb62:	d00d      	beq.n	800eb80 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eb64:	2300      	movs	r3, #0
 800eb66:	56c3      	ldrsb	r3, [r0, r3]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d01f      	beq.n	800ebac <FreeRTOS_CLIGetParameter+0x6c>
 800eb6c:	2b20      	cmp	r3, #32
 800eb6e:	d0ef      	beq.n	800eb50 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800eb70:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eb72:	2300      	movs	r3, #0
 800eb74:	56c3      	ldrsb	r3, [r0, r3]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d018      	beq.n	800ebac <FreeRTOS_CLIGetParameter+0x6c>
 800eb7a:	2b20      	cmp	r3, #32
 800eb7c:	d1f8      	bne.n	800eb70 <FreeRTOS_CLIGetParameter+0x30>
 800eb7e:	e7e7      	b.n	800eb50 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eb80:	7803      	ldrb	r3, [r0, #0]
 800eb82:	2120      	movs	r1, #32
 800eb84:	438b      	bics	r3, r1
 800eb86:	d00f      	beq.n	800eba8 <FreeRTOS_CLIGetParameter+0x68>
 800eb88:	0004      	movs	r4, r0
 800eb8a:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800eb8c:	6813      	ldr	r3, [r2, #0]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800eb92:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eb94:	7821      	ldrb	r1, [r4, #0]
 800eb96:	43a9      	bics	r1, r5
 800eb98:	d1f8      	bne.n	800eb8c <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800eb9a:	1e5a      	subs	r2, r3, #1
 800eb9c:	4193      	sbcs	r3, r2
 800eb9e:	425b      	negs	r3, r3
 800eba0:	4018      	ands	r0, r3
 800eba2:	e000      	b.n	800eba6 <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800eba4:	2000      	movs	r0, #0
}
 800eba6:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800eba8:	2000      	movs	r0, #0
 800ebaa:	e7fc      	b.n	800eba6 <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ebac:	2300      	movs	r3, #0
 800ebae:	56c3      	ldrsb	r3, [r0, r3]
 800ebb0:	e7d3      	b.n	800eb5a <FreeRTOS_CLIGetParameter+0x1a>
	...

0800ebb4 <prvHelpCommand>:
{
 800ebb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	0004      	movs	r4, r0
 800ebba:	000d      	movs	r5, r1
 800ebbc:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800ebc2:	aa01      	add	r2, sp, #4
 800ebc4:	2101      	movs	r1, #1
 800ebc6:	f7ff ffbb 	bl	800eb40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d027      	beq.n	800ec1e <prvHelpCommand+0x6a>
 800ebce:	2206      	movs	r2, #6
 800ebd0:	4930      	ldr	r1, [pc, #192]	; (800ec94 <prvHelpCommand+0xe0>)
 800ebd2:	f005 fe05 	bl	80147e0 <strncmp>
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	d149      	bne.n	800ec6e <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800ebda:	4b2f      	ldr	r3, [pc, #188]	; (800ec98 <prvHelpCommand+0xe4>)
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	2b07      	cmp	r3, #7
 800ebe0:	d012      	beq.n	800ec08 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ebe2:	1c5f      	adds	r7, r3, #1
 800ebe4:	b2ff      	uxtb	r7, r7
 800ebe6:	4a2c      	ldr	r2, [pc, #176]	; (800ec98 <prvHelpCommand+0xe4>)
 800ebe8:	7017      	strb	r7, [r2, #0]
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	4a2b      	ldr	r2, [pc, #172]	; (800ec9c <prvHelpCommand+0xe8>)
 800ebee:	5899      	ldr	r1, [r3, r2]
 800ebf0:	002a      	movs	r2, r5
 800ebf2:	0020      	movs	r0, r4
 800ebf4:	f005 fe05 	bl	8014802 <strncpy>
			xReturn = pdTRUE;
 800ebf8:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800ebfa:	2f07      	cmp	r7, #7
 800ebfc:	d137      	bne.n	800ec6e <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800ebfe:	4b26      	ldr	r3, [pc, #152]	; (800ec98 <prvHelpCommand+0xe4>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	701a      	strb	r2, [r3, #0]
 800ec04:	2600      	movs	r6, #0
 800ec06:	e032      	b.n	800ec6e <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ec08:	4b23      	ldr	r3, [pc, #140]	; (800ec98 <prvHelpCommand+0xe4>)
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	701a      	strb	r2, [r3, #0]
 800ec0e:	4b23      	ldr	r3, [pc, #140]	; (800ec9c <prvHelpCommand+0xe8>)
 800ec10:	6819      	ldr	r1, [r3, #0]
 800ec12:	002a      	movs	r2, r5
 800ec14:	0020      	movs	r0, r4
 800ec16:	f005 fdf4 	bl	8014802 <strncpy>
			xReturn = pdTRUE;
 800ec1a:	2601      	movs	r6, #1
 800ec1c:	e027      	b.n	800ec6e <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800ec1e:	4b20      	ldr	r3, [pc, #128]	; (800eca0 <prvHelpCommand+0xec>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d026      	beq.n	800ec74 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800ec26:	4b1f      	ldr	r3, [pc, #124]	; (800eca4 <prvHelpCommand+0xf0>)
 800ec28:	781a      	ldrb	r2, [r3, #0]
 800ec2a:	4b1f      	ldr	r3, [pc, #124]	; (800eca8 <prvHelpCommand+0xf4>)
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d927      	bls.n	800ec82 <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800ec32:	002a      	movs	r2, r5
 800ec34:	3a08      	subs	r2, #8
 800ec36:	4b1a      	ldr	r3, [pc, #104]	; (800eca0 <prvHelpCommand+0xec>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	6859      	ldr	r1, [r3, #4]
 800ec3e:	0020      	movs	r0, r4
 800ec40:	3008      	adds	r0, #8
 800ec42:	f005 fdde 	bl	8014802 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800ec46:	1c60      	adds	r0, r4, #1
 800ec48:	4918      	ldr	r1, [pc, #96]	; (800ecac <prvHelpCommand+0xf8>)
 800ec4a:	f005 fdc1 	bl	80147d0 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800ec4e:	2328      	movs	r3, #40	; 0x28
 800ec50:	7023      	strb	r3, [r4, #0]
 800ec52:	3301      	adds	r3, #1
 800ec54:	71a3      	strb	r3, [r4, #6]
 800ec56:	3b09      	subs	r3, #9
 800ec58:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800ec5a:	4b11      	ldr	r3, [pc, #68]	; (800eca0 <prvHelpCommand+0xec>)
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	6856      	ldr	r6, [r2, #4]
 800ec60:	601e      	str	r6, [r3, #0]
		counter++;
 800ec62:	4a10      	ldr	r2, [pc, #64]	; (800eca4 <prvHelpCommand+0xf0>)
 800ec64:	7813      	ldrb	r3, [r2, #0]
 800ec66:	3301      	adds	r3, #1
 800ec68:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800ec6a:	1e73      	subs	r3, r6, #1
 800ec6c:	419e      	sbcs	r6, r3
}
 800ec6e:	0030      	movs	r0, r6
 800ec70:	b003      	add	sp, #12
 800ec72:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800ec74:	4b0a      	ldr	r3, [pc, #40]	; (800eca0 <prvHelpCommand+0xec>)
 800ec76:	4a0e      	ldr	r2, [pc, #56]	; (800ecb0 <prvHelpCommand+0xfc>)
 800ec78:	601a      	str	r2, [r3, #0]
			counter = 1;
 800ec7a:	4b0a      	ldr	r3, [pc, #40]	; (800eca4 <prvHelpCommand+0xf0>)
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	701a      	strb	r2, [r3, #0]
 800ec80:	e7d1      	b.n	800ec26 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800ec82:	4b07      	ldr	r3, [pc, #28]	; (800eca0 <prvHelpCommand+0xec>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	6859      	ldr	r1, [r3, #4]
 800ec8a:	002a      	movs	r2, r5
 800ec8c:	0020      	movs	r0, r4
 800ec8e:	f005 fdb8 	bl	8014802 <strncpy>
 800ec92:	e7e2      	b.n	800ec5a <prvHelpCommand+0xa6>
 800ec94:	080198c0 	.word	0x080198c0
 800ec98:	20001dac 	.word	0x20001dac
 800ec9c:	20000054 	.word	0x20000054
 800eca0:	20001da8 	.word	0x20001da8
 800eca4:	20001da0 	.word	0x20001da0
 800eca8:	2000699c 	.word	0x2000699c
 800ecac:	08018fd0 	.word	0x08018fd0
 800ecb0:	20000128 	.word	0x20000128

0800ecb4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecb4:	0003      	movs	r3, r0
 800ecb6:	3308      	adds	r3, #8
 800ecb8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ecba:	2201      	movs	r2, #1
 800ecbc:	4252      	negs	r2, r2
 800ecbe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecc0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecc2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ecc8:	4770      	bx	lr

0800ecca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ecca:	2300      	movs	r3, #0
 800eccc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ecce:	4770      	bx	lr

0800ecd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ecd0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ecd2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ecd4:	689a      	ldr	r2, [r3, #8]
 800ecd6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ecd8:	689a      	ldr	r2, [r3, #8]
 800ecda:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ecdc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ecde:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ece0:	6803      	ldr	r3, [r0, #0]
 800ece2:	3301      	adds	r3, #1
 800ece4:	6003      	str	r3, [r0, #0]
}
 800ece6:	4770      	bx	lr

0800ece8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ece8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ecea:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecec:	0002      	movs	r2, r0
 800ecee:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800ecf0:	1c63      	adds	r3, r4, #1
 800ecf2:	d102      	bne.n	800ecfa <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800ecf4:	6902      	ldr	r2, [r0, #16]
 800ecf6:	e004      	b.n	800ed02 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecf8:	001a      	movs	r2, r3
 800ecfa:	6853      	ldr	r3, [r2, #4]
 800ecfc:	681d      	ldr	r5, [r3, #0]
 800ecfe:	42a5      	cmp	r5, r4
 800ed00:	d9fa      	bls.n	800ecf8 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed02:	6853      	ldr	r3, [r2, #4]
 800ed04:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ed06:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ed08:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ed0a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ed0c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ed0e:	6803      	ldr	r3, [r0, #0]
 800ed10:	3301      	adds	r3, #1
 800ed12:	6003      	str	r3, [r0, #0]
}
 800ed14:	bd30      	pop	{r4, r5, pc}

0800ed16 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ed16:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ed18:	6842      	ldr	r2, [r0, #4]
 800ed1a:	6881      	ldr	r1, [r0, #8]
 800ed1c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ed1e:	6882      	ldr	r2, [r0, #8]
 800ed20:	6841      	ldr	r1, [r0, #4]
 800ed22:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ed24:	685a      	ldr	r2, [r3, #4]
 800ed26:	4282      	cmp	r2, r0
 800ed28:	d005      	beq.n	800ed36 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	1e50      	subs	r0, r2, #1
 800ed32:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800ed34:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ed36:	6882      	ldr	r2, [r0, #8]
 800ed38:	605a      	str	r2, [r3, #4]
 800ed3a:	e7f6      	b.n	800ed2a <uxListRemove+0x14>

0800ed3c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ed3c:	b570      	push	{r4, r5, r6, lr}
 800ed3e:	0004      	movs	r4, r0
 800ed40:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ed42:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ed44:	2a00      	cmp	r2, #0
 800ed46:	d10d      	bne.n	800ed64 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800ed48:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d003      	beq.n	800ed58 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ed50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed52:	3301      	adds	r3, #1
 800ed54:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800ed56:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ed58:	6860      	ldr	r0, [r4, #4]
 800ed5a:	f001 f8ab 	bl	800feb4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	6063      	str	r3, [r4, #4]
 800ed62:	e7f5      	b.n	800ed50 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ed64:	2d00      	cmp	r5, #0
 800ed66:	d10e      	bne.n	800ed86 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ed68:	6880      	ldr	r0, [r0, #8]
 800ed6a:	f005 fac0 	bl	80142ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ed6e:	68a3      	ldr	r3, [r4, #8]
 800ed70:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ed72:	4694      	mov	ip, r2
 800ed74:	4463      	add	r3, ip
 800ed76:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800ed78:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed7a:	6862      	ldr	r2, [r4, #4]
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d3e7      	bcc.n	800ed50 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed80:	6823      	ldr	r3, [r4, #0]
 800ed82:	60a3      	str	r3, [r4, #8]
 800ed84:	e7e4      	b.n	800ed50 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed86:	68c0      	ldr	r0, [r0, #12]
 800ed88:	f005 fab1 	bl	80142ee <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ed8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed8e:	425a      	negs	r2, r3
 800ed90:	68e3      	ldr	r3, [r4, #12]
 800ed92:	189b      	adds	r3, r3, r2
 800ed94:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed96:	6821      	ldr	r1, [r4, #0]
 800ed98:	428b      	cmp	r3, r1
 800ed9a:	d203      	bcs.n	800eda4 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ed9c:	6863      	ldr	r3, [r4, #4]
 800ed9e:	469c      	mov	ip, r3
 800eda0:	4462      	add	r2, ip
 800eda2:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800eda4:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800eda6:	2d02      	cmp	r5, #2
 800eda8:	d1d2      	bne.n	800ed50 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800edaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800edac:	2b00      	cmp	r3, #0
 800edae:	d0cf      	beq.n	800ed50 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800edb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800edb2:	3b01      	subs	r3, #1
 800edb4:	63a3      	str	r3, [r4, #56]	; 0x38
 800edb6:	e7cb      	b.n	800ed50 <prvCopyDataToQueue+0x14>

0800edb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800edb8:	b510      	push	{r4, lr}
 800edba:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800edbc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800edbe:	2a00      	cmp	r2, #0
 800edc0:	d00b      	beq.n	800edda <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800edc2:	68c3      	ldr	r3, [r0, #12]
 800edc4:	189b      	adds	r3, r3, r2
 800edc6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800edc8:	6841      	ldr	r1, [r0, #4]
 800edca:	428b      	cmp	r3, r1
 800edcc:	d301      	bcc.n	800edd2 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800edce:	6803      	ldr	r3, [r0, #0]
 800edd0:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800edd2:	68c1      	ldr	r1, [r0, #12]
 800edd4:	0020      	movs	r0, r4
 800edd6:	f005 fa8a 	bl	80142ee <memcpy>
	}
}
 800edda:	bd10      	pop	{r4, pc}

0800eddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ede0:	f001 fc4e 	bl	8010680 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ede4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	dd04      	ble.n	800edf4 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800edea:	0025      	movs	r5, r4
 800edec:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d11f      	bne.n	800ee34 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800edf4:	2301      	movs	r3, #1
 800edf6:	425b      	negs	r3, r3
 800edf8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800edfa:	f001 fc4d 	bl	8010698 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800edfe:	f001 fc3f 	bl	8010680 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ee02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	dd04      	ble.n	800ee12 <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee08:	0025      	movs	r5, r4
 800ee0a:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee0c:	6923      	ldr	r3, [r4, #16]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d121      	bne.n	800ee56 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800ee12:	2301      	movs	r3, #1
 800ee14:	425b      	negs	r3, r3
 800ee16:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ee18:	f001 fc3e 	bl	8010698 <vPortExitCritical>
}
 800ee1c:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800ee1e:	f000 fff5 	bl	800fe0c <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800ee22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee24:	3b01      	subs	r3, #1
 800ee26:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ee28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	dde2      	ble.n	800edf4 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d0df      	beq.n	800edf4 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee34:	0028      	movs	r0, r5
 800ee36:	f000 ff67 	bl	800fd08 <xTaskRemoveFromEventList>
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	d0f1      	beq.n	800ee22 <prvUnlockQueue+0x46>
 800ee3e:	e7ee      	b.n	800ee1e <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800ee40:	f000 ffe4 	bl	800fe0c <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800ee44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee46:	3b01      	subs	r3, #1
 800ee48:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ee4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	dde0      	ble.n	800ee12 <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee50:	6923      	ldr	r3, [r4, #16]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d0dd      	beq.n	800ee12 <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee56:	0028      	movs	r0, r5
 800ee58:	f000 ff56 	bl	800fd08 <xTaskRemoveFromEventList>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d0f1      	beq.n	800ee44 <prvUnlockQueue+0x68>
 800ee60:	e7ee      	b.n	800ee40 <prvUnlockQueue+0x64>

0800ee62 <xQueueGenericReset>:
{
 800ee62:	b570      	push	{r4, r5, r6, lr}
 800ee64:	0004      	movs	r4, r0
 800ee66:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d101      	bne.n	800ee70 <xQueueGenericReset+0xe>
 800ee6c:	b672      	cpsid	i
 800ee6e:	e7fe      	b.n	800ee6e <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800ee70:	f001 fc06 	bl	8010680 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ee74:	6822      	ldr	r2, [r4, #0]
 800ee76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ee78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ee7a:	434b      	muls	r3, r1
 800ee7c:	18d0      	adds	r0, r2, r3
 800ee7e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ee80:	2000      	movs	r0, #0
 800ee82:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee84:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ee86:	1a5b      	subs	r3, r3, r1
 800ee88:	18d3      	adds	r3, r2, r3
 800ee8a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	425b      	negs	r3, r3
 800ee90:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800ee92:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800ee94:	2d00      	cmp	r5, #0
 800ee96:	d10f      	bne.n	800eeb8 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee98:	6923      	ldr	r3, [r4, #16]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d103      	bne.n	800eea6 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800ee9e:	f001 fbfb 	bl	8010698 <vPortExitCritical>
}
 800eea2:	2001      	movs	r0, #1
 800eea4:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800eea6:	0020      	movs	r0, r4
 800eea8:	3010      	adds	r0, #16
 800eeaa:	f000 ff2d 	bl	800fd08 <xTaskRemoveFromEventList>
 800eeae:	2801      	cmp	r0, #1
 800eeb0:	d1f5      	bne.n	800ee9e <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800eeb2:	f001 fbd9 	bl	8010668 <vPortYield>
 800eeb6:	e7f2      	b.n	800ee9e <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eeb8:	0020      	movs	r0, r4
 800eeba:	3010      	adds	r0, #16
 800eebc:	f7ff fefa 	bl	800ecb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eec0:	0020      	movs	r0, r4
 800eec2:	3024      	adds	r0, #36	; 0x24
 800eec4:	f7ff fef6 	bl	800ecb4 <vListInitialise>
 800eec8:	e7e9      	b.n	800ee9e <xQueueGenericReset+0x3c>

0800eeca <xQueueGenericCreate>:
{
 800eeca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eecc:	0005      	movs	r5, r0
 800eece:	000e      	movs	r6, r1
 800eed0:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d101      	bne.n	800eeda <xQueueGenericCreate+0x10>
 800eed6:	b672      	cpsid	i
 800eed8:	e7fe      	b.n	800eed8 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800eeda:	2900      	cmp	r1, #0
 800eedc:	d00c      	beq.n	800eef8 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eede:	0008      	movs	r0, r1
 800eee0:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800eee2:	3055      	adds	r0, #85	; 0x55
 800eee4:	f001 fc4e 	bl	8010784 <pvPortMalloc>
 800eee8:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800eeea:	d101      	bne.n	800eef0 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800eeec:	b672      	cpsid	i
 800eeee:	e7fe      	b.n	800eeee <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800eef0:	0003      	movs	r3, r0
 800eef2:	3354      	adds	r3, #84	; 0x54
 800eef4:	6003      	str	r3, [r0, #0]
 800eef6:	e005      	b.n	800ef04 <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800eef8:	2054      	movs	r0, #84	; 0x54
 800eefa:	f001 fc43 	bl	8010784 <pvPortMalloc>
 800eefe:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800ef00:	d0f4      	beq.n	800eeec <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef02:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800ef04:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800ef06:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ef08:	2101      	movs	r1, #1
 800ef0a:	0020      	movs	r0, r4
 800ef0c:	f7ff ffa9 	bl	800ee62 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800ef10:	2350      	movs	r3, #80	; 0x50
 800ef12:	54e7      	strb	r7, [r4, r3]
}
 800ef14:	0020      	movs	r0, r4
 800ef16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef18 <xQueueCreateCountingSemaphore>:
	{
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d101      	bne.n	800ef24 <xQueueCreateCountingSemaphore+0xc>
 800ef20:	b672      	cpsid	i
 800ef22:	e7fe      	b.n	800ef22 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ef24:	4288      	cmp	r0, r1
 800ef26:	d201      	bcs.n	800ef2c <xQueueCreateCountingSemaphore+0x14>
 800ef28:	b672      	cpsid	i
 800ef2a:	e7fe      	b.n	800ef2a <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ef2c:	2202      	movs	r2, #2
 800ef2e:	2100      	movs	r1, #0
 800ef30:	f7ff ffcb 	bl	800eeca <xQueueGenericCreate>
		if( xHandle != NULL )
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d001      	beq.n	800ef3c <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ef38:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ef3a:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800ef3c:	b672      	cpsid	i
 800ef3e:	e7fe      	b.n	800ef3e <xQueueCreateCountingSemaphore+0x26>

0800ef40 <xQueueGenericSend>:
{
 800ef40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef42:	46ce      	mov	lr, r9
 800ef44:	b500      	push	{lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	0004      	movs	r4, r0
 800ef4a:	9100      	str	r1, [sp, #0]
 800ef4c:	9201      	str	r2, [sp, #4]
 800ef4e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800ef50:	2800      	cmp	r0, #0
 800ef52:	d007      	beq.n	800ef64 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef54:	9b00      	ldr	r3, [sp, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d106      	bne.n	800ef68 <xQueueGenericSend+0x28>
 800ef5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d003      	beq.n	800ef68 <xQueueGenericSend+0x28>
 800ef60:	b672      	cpsid	i
 800ef62:	e7fe      	b.n	800ef62 <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800ef64:	b672      	cpsid	i
 800ef66:	e7fe      	b.n	800ef66 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef68:	2d02      	cmp	r5, #2
 800ef6a:	d104      	bne.n	800ef76 <xQueueGenericSend+0x36>
 800ef6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d001      	beq.n	800ef76 <xQueueGenericSend+0x36>
 800ef72:	b672      	cpsid	i
 800ef74:	e7fe      	b.n	800ef74 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef76:	f000 ff4f 	bl	800fe18 <xTaskGetSchedulerState>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d104      	bne.n	800ef88 <xQueueGenericSend+0x48>
 800ef7e:	9b01      	ldr	r3, [sp, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d004      	beq.n	800ef8e <xQueueGenericSend+0x4e>
 800ef84:	b672      	cpsid	i
 800ef86:	e7fe      	b.n	800ef86 <xQueueGenericSend+0x46>
 800ef88:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800ef8a:	2700      	movs	r7, #0
 800ef8c:	e02f      	b.n	800efee <xQueueGenericSend+0xae>
 800ef8e:	2600      	movs	r6, #0
 800ef90:	e7fb      	b.n	800ef8a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef92:	002a      	movs	r2, r5
 800ef94:	9900      	ldr	r1, [sp, #0]
 800ef96:	0020      	movs	r0, r4
 800ef98:	f7ff fed0 	bl	800ed3c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d104      	bne.n	800efac <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800efa2:	2800      	cmp	r0, #0
 800efa4:	d00a      	beq.n	800efbc <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800efa6:	f001 fb5f 	bl	8010668 <vPortYield>
 800efaa:	e007      	b.n	800efbc <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800efac:	0020      	movs	r0, r4
 800efae:	3024      	adds	r0, #36	; 0x24
 800efb0:	f000 feaa 	bl	800fd08 <xTaskRemoveFromEventList>
 800efb4:	2801      	cmp	r0, #1
 800efb6:	d101      	bne.n	800efbc <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800efb8:	f001 fb56 	bl	8010668 <vPortYield>
				taskEXIT_CRITICAL();
 800efbc:	f001 fb6c 	bl	8010698 <vPortExitCritical>
				return pdPASS;
 800efc0:	2001      	movs	r0, #1
}
 800efc2:	b004      	add	sp, #16
 800efc4:	bc04      	pop	{r2}
 800efc6:	4691      	mov	r9, r2
 800efc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800efca:	f001 fb65 	bl	8010698 <vPortExitCritical>
					return errQUEUE_FULL;
 800efce:	2000      	movs	r0, #0
 800efd0:	e7f7      	b.n	800efc2 <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800efd2:	a802      	add	r0, sp, #8
 800efd4:	f000 fed8 	bl	800fd88 <vTaskSetTimeOutState>
 800efd8:	e016      	b.n	800f008 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800efda:	6467      	str	r7, [r4, #68]	; 0x44
 800efdc:	e01d      	b.n	800f01a <xQueueGenericSend+0xda>
 800efde:	64a7      	str	r7, [r4, #72]	; 0x48
 800efe0:	e01e      	b.n	800f020 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800efe2:	0020      	movs	r0, r4
 800efe4:	f7ff fefa 	bl	800eddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efe8:	f000 fcb0 	bl	800f94c <xTaskResumeAll>
 800efec:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800efee:	f001 fb47 	bl	8010680 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eff4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d3cb      	bcc.n	800ef92 <xQueueGenericSend+0x52>
 800effa:	2d02      	cmp	r5, #2
 800effc:	d0c9      	beq.n	800ef92 <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800effe:	9b01      	ldr	r3, [sp, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d0e2      	beq.n	800efca <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800f004:	2e00      	cmp	r6, #0
 800f006:	d0e4      	beq.n	800efd2 <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800f008:	f001 fb46 	bl	8010698 <vPortExitCritical>
		vTaskSuspendAll();
 800f00c:	f000 fbfe 	bl	800f80c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f010:	f001 fb36 	bl	8010680 <vPortEnterCritical>
 800f014:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f016:	3301      	adds	r3, #1
 800f018:	d0df      	beq.n	800efda <xQueueGenericSend+0x9a>
 800f01a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f01c:	3301      	adds	r3, #1
 800f01e:	d0de      	beq.n	800efde <xQueueGenericSend+0x9e>
 800f020:	f001 fb3a 	bl	8010698 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f024:	a901      	add	r1, sp, #4
 800f026:	a802      	add	r0, sp, #8
 800f028:	f000 febe 	bl	800fda8 <xTaskCheckForTimeOut>
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d117      	bne.n	800f060 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f030:	f001 fb26 	bl	8010680 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f036:	4699      	mov	r9, r3
 800f038:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f03a:	f001 fb2d 	bl	8010698 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f03e:	45b1      	cmp	r9, r6
 800f040:	d1cf      	bne.n	800efe2 <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f042:	0020      	movs	r0, r4
 800f044:	3010      	adds	r0, #16
 800f046:	9901      	ldr	r1, [sp, #4]
 800f048:	f000 fe20 	bl	800fc8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f04c:	0020      	movs	r0, r4
 800f04e:	f7ff fec5 	bl	800eddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f052:	f000 fc7b 	bl	800f94c <xTaskResumeAll>
 800f056:	2800      	cmp	r0, #0
 800f058:	d1c8      	bne.n	800efec <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800f05a:	f001 fb05 	bl	8010668 <vPortYield>
 800f05e:	e7c5      	b.n	800efec <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800f060:	0020      	movs	r0, r4
 800f062:	f7ff febb 	bl	800eddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f066:	f000 fc71 	bl	800f94c <xTaskResumeAll>
			return errQUEUE_FULL;
 800f06a:	2000      	movs	r0, #0
 800f06c:	e7a9      	b.n	800efc2 <xQueueGenericSend+0x82>

0800f06e <xQueueGenericSendFromISR>:
{
 800f06e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f070:	b083      	sub	sp, #12
 800f072:	0004      	movs	r4, r0
 800f074:	000d      	movs	r5, r1
 800f076:	0016      	movs	r6, r2
 800f078:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800f07a:	2800      	cmp	r0, #0
 800f07c:	d006      	beq.n	800f08c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f07e:	2900      	cmp	r1, #0
 800f080:	d106      	bne.n	800f090 <xQueueGenericSendFromISR+0x22>
 800f082:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f084:	2b00      	cmp	r3, #0
 800f086:	d003      	beq.n	800f090 <xQueueGenericSendFromISR+0x22>
 800f088:	b672      	cpsid	i
 800f08a:	e7fe      	b.n	800f08a <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800f08c:	b672      	cpsid	i
 800f08e:	e7fe      	b.n	800f08e <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f090:	2f02      	cmp	r7, #2
 800f092:	d12a      	bne.n	800f0ea <xQueueGenericSendFromISR+0x7c>
 800f094:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f096:	2b01      	cmp	r3, #1
 800f098:	d011      	beq.n	800f0be <xQueueGenericSendFromISR+0x50>
 800f09a:	b672      	cpsid	i
 800f09c:	e7fe      	b.n	800f09c <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800f09e:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d01b      	beq.n	800f0de <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0a6:	0020      	movs	r0, r4
 800f0a8:	3024      	adds	r0, #36	; 0x24
 800f0aa:	f000 fe2d 	bl	800fd08 <xTaskRemoveFromEventList>
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d015      	beq.n	800f0de <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800f0b2:	2e00      	cmp	r6, #0
 800f0b4:	d001      	beq.n	800f0ba <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f0b6:	6035      	str	r5, [r6, #0]
 800f0b8:	e011      	b.n	800f0de <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800f0ba:	2501      	movs	r5, #1
 800f0bc:	e00f      	b.n	800f0de <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0be:	f001 fafb 	bl	80106b8 <ulSetInterruptMaskFromISR>
 800f0c2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f0c6:	003a      	movs	r2, r7
 800f0c8:	0029      	movs	r1, r5
 800f0ca:	0020      	movs	r0, r4
 800f0cc:	f7ff fe36 	bl	800ed3c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f0d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	d0e3      	beq.n	800f09e <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800f0d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f0d8:	3301      	adds	r3, #1
 800f0da:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f0dc:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f0de:	9801      	ldr	r0, [sp, #4]
 800f0e0:	f001 faef 	bl	80106c2 <vClearInterruptMaskFromISR>
}
 800f0e4:	0028      	movs	r0, r5
 800f0e6:	b003      	add	sp, #12
 800f0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0ea:	f001 fae5 	bl	80106b8 <ulSetInterruptMaskFromISR>
 800f0ee:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f0f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d3e6      	bcc.n	800f0c6 <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800f0f8:	2500      	movs	r5, #0
 800f0fa:	e7f0      	b.n	800f0de <xQueueGenericSendFromISR+0x70>

0800f0fc <xQueueGiveFromISR>:
{
 800f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fe:	0004      	movs	r4, r0
 800f100:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800f102:	2800      	cmp	r0, #0
 800f104:	d004      	beq.n	800f110 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f106:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d003      	beq.n	800f114 <xQueueGiveFromISR+0x18>
 800f10c:	b672      	cpsid	i
 800f10e:	e7fe      	b.n	800f10e <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800f110:	b672      	cpsid	i
 800f112:	e7fe      	b.n	800f112 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f114:	6803      	ldr	r3, [r0, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d01f      	beq.n	800f15a <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f11a:	f001 facd 	bl	80106b8 <ulSetInterruptMaskFromISR>
 800f11e:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800f122:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f124:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f126:	4293      	cmp	r3, r2
 800f128:	d212      	bcs.n	800f150 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800f12a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f12c:	3301      	adds	r3, #1
 800f12e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f130:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f132:	3301      	adds	r3, #1
 800f134:	d116      	bne.n	800f164 <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800f136:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d008      	beq.n	800f150 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f13e:	0020      	movs	r0, r4
 800f140:	3024      	adds	r0, #36	; 0x24
 800f142:	f000 fde1 	bl	800fd08 <xTaskRemoveFromEventList>
 800f146:	2800      	cmp	r0, #0
 800f148:	d002      	beq.n	800f150 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800f14a:	2f00      	cmp	r7, #0
 800f14c:	d00f      	beq.n	800f16e <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f14e:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f150:	0030      	movs	r0, r6
 800f152:	f001 fab6 	bl	80106c2 <vClearInterruptMaskFromISR>
}
 800f156:	0028      	movs	r0, r5
 800f158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f15a:	6843      	ldr	r3, [r0, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d0dc      	beq.n	800f11a <xQueueGiveFromISR+0x1e>
 800f160:	b672      	cpsid	i
 800f162:	e7fe      	b.n	800f162 <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800f164:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f166:	3301      	adds	r3, #1
 800f168:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f16a:	2501      	movs	r5, #1
 800f16c:	e7f0      	b.n	800f150 <xQueueGiveFromISR+0x54>
 800f16e:	2501      	movs	r5, #1
 800f170:	e7ee      	b.n	800f150 <xQueueGiveFromISR+0x54>

0800f172 <xQueueGenericReceive>:
{
 800f172:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f174:	46c6      	mov	lr, r8
 800f176:	b500      	push	{lr}
 800f178:	b084      	sub	sp, #16
 800f17a:	0004      	movs	r4, r0
 800f17c:	000e      	movs	r6, r1
 800f17e:	9201      	str	r2, [sp, #4]
 800f180:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800f182:	2800      	cmp	r0, #0
 800f184:	d006      	beq.n	800f194 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f186:	2900      	cmp	r1, #0
 800f188:	d106      	bne.n	800f198 <xQueueGenericReceive+0x26>
 800f18a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d003      	beq.n	800f198 <xQueueGenericReceive+0x26>
 800f190:	b672      	cpsid	i
 800f192:	e7fe      	b.n	800f192 <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800f194:	b672      	cpsid	i
 800f196:	e7fe      	b.n	800f196 <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f198:	f000 fe3e 	bl	800fe18 <xTaskGetSchedulerState>
 800f19c:	2800      	cmp	r0, #0
 800f19e:	d104      	bne.n	800f1aa <xQueueGenericReceive+0x38>
 800f1a0:	9b01      	ldr	r3, [sp, #4]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d004      	beq.n	800f1b0 <xQueueGenericReceive+0x3e>
 800f1a6:	b672      	cpsid	i
 800f1a8:	e7fe      	b.n	800f1a8 <xQueueGenericReceive+0x36>
 800f1aa:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f1ac:	2700      	movs	r7, #0
 800f1ae:	e04b      	b.n	800f248 <xQueueGenericReceive+0xd6>
 800f1b0:	2500      	movs	r5, #0
 800f1b2:	e7fb      	b.n	800f1ac <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f1b4:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1b6:	0031      	movs	r1, r6
 800f1b8:	0020      	movs	r0, r4
 800f1ba:	f7ff fdfd 	bl	800edb8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f1be:	4643      	mov	r3, r8
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d11a      	bne.n	800f1fa <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800f1c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1ca:	6823      	ldr	r3, [r4, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d102      	bne.n	800f1d6 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f1d0:	f000 ff62 	bl	8010098 <pvTaskIncrementMutexHeldCount>
 800f1d4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1d6:	6923      	ldr	r3, [r4, #16]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d007      	beq.n	800f1ec <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f1dc:	0020      	movs	r0, r4
 800f1de:	3010      	adds	r0, #16
 800f1e0:	f000 fd92 	bl	800fd08 <xTaskRemoveFromEventList>
 800f1e4:	2801      	cmp	r0, #1
 800f1e6:	d101      	bne.n	800f1ec <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800f1e8:	f001 fa3e 	bl	8010668 <vPortYield>
				taskEXIT_CRITICAL();
 800f1ec:	f001 fa54 	bl	8010698 <vPortExitCritical>
				return pdPASS;
 800f1f0:	2001      	movs	r0, #1
}
 800f1f2:	b004      	add	sp, #16
 800f1f4:	bc04      	pop	{r2}
 800f1f6:	4690      	mov	r8, r2
 800f1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f1fa:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d0f4      	beq.n	800f1ec <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f202:	0020      	movs	r0, r4
 800f204:	3024      	adds	r0, #36	; 0x24
 800f206:	f000 fd7f 	bl	800fd08 <xTaskRemoveFromEventList>
 800f20a:	2800      	cmp	r0, #0
 800f20c:	d0ee      	beq.n	800f1ec <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800f20e:	f001 fa2b 	bl	8010668 <vPortYield>
 800f212:	e7eb      	b.n	800f1ec <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800f214:	f001 fa40 	bl	8010698 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f218:	2000      	movs	r0, #0
 800f21a:	e7ea      	b.n	800f1f2 <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800f21c:	a802      	add	r0, sp, #8
 800f21e:	f000 fdb3 	bl	800fd88 <vTaskSetTimeOutState>
 800f222:	e01b      	b.n	800f25c <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800f224:	6467      	str	r7, [r4, #68]	; 0x44
 800f226:	e022      	b.n	800f26e <xQueueGenericReceive+0xfc>
 800f228:	64a7      	str	r7, [r4, #72]	; 0x48
 800f22a:	e023      	b.n	800f274 <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800f22c:	f001 fa28 	bl	8010680 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f230:	6860      	ldr	r0, [r4, #4]
 800f232:	f000 fe01 	bl	800fe38 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f236:	f001 fa2f 	bl	8010698 <vPortExitCritical>
 800f23a:	e02d      	b.n	800f298 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800f23c:	0020      	movs	r0, r4
 800f23e:	f7ff fdcd 	bl	800eddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f242:	f000 fb83 	bl	800f94c <xTaskResumeAll>
 800f246:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800f248:	f001 fa1a 	bl	8010680 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f24c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1b0      	bne.n	800f1b4 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f252:	9b01      	ldr	r3, [sp, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d0dd      	beq.n	800f214 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800f258:	2d00      	cmp	r5, #0
 800f25a:	d0df      	beq.n	800f21c <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800f25c:	f001 fa1c 	bl	8010698 <vPortExitCritical>
		vTaskSuspendAll();
 800f260:	f000 fad4 	bl	800f80c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f264:	f001 fa0c 	bl	8010680 <vPortEnterCritical>
 800f268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f26a:	3301      	adds	r3, #1
 800f26c:	d0da      	beq.n	800f224 <xQueueGenericReceive+0xb2>
 800f26e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f270:	3301      	adds	r3, #1
 800f272:	d0d9      	beq.n	800f228 <xQueueGenericReceive+0xb6>
 800f274:	f001 fa10 	bl	8010698 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f278:	a901      	add	r1, sp, #4
 800f27a:	a802      	add	r0, sp, #8
 800f27c:	f000 fd94 	bl	800fda8 <xTaskCheckForTimeOut>
 800f280:	2800      	cmp	r0, #0
 800f282:	d118      	bne.n	800f2b6 <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800f284:	f001 f9fc 	bl	8010680 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f288:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800f28a:	f001 fa05 	bl	8010698 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f28e:	2d00      	cmp	r5, #0
 800f290:	d1d4      	bne.n	800f23c <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f292:	6823      	ldr	r3, [r4, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d0c9      	beq.n	800f22c <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f298:	0020      	movs	r0, r4
 800f29a:	3024      	adds	r0, #36	; 0x24
 800f29c:	9901      	ldr	r1, [sp, #4]
 800f29e:	f000 fcf5 	bl	800fc8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2a2:	0020      	movs	r0, r4
 800f2a4:	f7ff fd9a 	bl	800eddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2a8:	f000 fb50 	bl	800f94c <xTaskResumeAll>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d1ca      	bne.n	800f246 <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800f2b0:	f001 f9da 	bl	8010668 <vPortYield>
 800f2b4:	e7c7      	b.n	800f246 <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800f2b6:	0020      	movs	r0, r4
 800f2b8:	f7ff fd90 	bl	800eddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2bc:	f000 fb46 	bl	800f94c <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f2c0:	2000      	movs	r0, #0
 800f2c2:	e796      	b.n	800f1f2 <xQueueGenericReceive+0x80>

0800f2c4 <xQueueReceiveFromISR>:
{
 800f2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	0004      	movs	r4, r0
 800f2ca:	000f      	movs	r7, r1
 800f2cc:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d006      	beq.n	800f2e0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2d2:	2900      	cmp	r1, #0
 800f2d4:	d106      	bne.n	800f2e4 <xQueueReceiveFromISR+0x20>
 800f2d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d003      	beq.n	800f2e4 <xQueueReceiveFromISR+0x20>
 800f2dc:	b672      	cpsid	i
 800f2de:	e7fe      	b.n	800f2de <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800f2e0:	b672      	cpsid	i
 800f2e2:	e7fe      	b.n	800f2e2 <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2e4:	f001 f9e8 	bl	80106b8 <ulSetInterruptMaskFromISR>
 800f2e8:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800f2ec:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d01b      	beq.n	800f32a <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f2f2:	0039      	movs	r1, r7
 800f2f4:	0020      	movs	r0, r4
 800f2f6:	f7ff fd5f 	bl	800edb8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800f2fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800f300:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f302:	3301      	adds	r3, #1
 800f304:	d004      	beq.n	800f310 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800f306:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f308:	3301      	adds	r3, #1
 800f30a:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f30c:	2501      	movs	r5, #1
 800f30e:	e00c      	b.n	800f32a <xQueueReceiveFromISR+0x66>
 800f310:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f312:	6923      	ldr	r3, [r4, #16]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d008      	beq.n	800f32a <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f318:	0020      	movs	r0, r4
 800f31a:	3010      	adds	r0, #16
 800f31c:	f000 fcf4 	bl	800fd08 <xTaskRemoveFromEventList>
 800f320:	2800      	cmp	r0, #0
 800f322:	d002      	beq.n	800f32a <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800f324:	2e00      	cmp	r6, #0
 800f326:	d006      	beq.n	800f336 <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f328:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f32a:	9801      	ldr	r0, [sp, #4]
 800f32c:	f001 f9c9 	bl	80106c2 <vClearInterruptMaskFromISR>
}
 800f330:	0028      	movs	r0, r5
 800f332:	b003      	add	sp, #12
 800f334:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800f336:	2501      	movs	r5, #1
 800f338:	e7f7      	b.n	800f32a <xQueueReceiveFromISR+0x66>
	...

0800f33c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f33c:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f33e:	4b0a      	ldr	r3, [pc, #40]	; (800f368 <vQueueAddToRegistry+0x2c>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d009      	beq.n	800f35a <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f346:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f348:	4c07      	ldr	r4, [pc, #28]	; (800f368 <vQueueAddToRegistry+0x2c>)
 800f34a:	00da      	lsls	r2, r3, #3
 800f34c:	58a2      	ldr	r2, [r4, r2]
 800f34e:	2a00      	cmp	r2, #0
 800f350:	d004      	beq.n	800f35c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f352:	3301      	adds	r3, #1
 800f354:	2b08      	cmp	r3, #8
 800f356:	d1f8      	bne.n	800f34a <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f358:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f35a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f35c:	4a02      	ldr	r2, [pc, #8]	; (800f368 <vQueueAddToRegistry+0x2c>)
 800f35e:	00db      	lsls	r3, r3, #3
 800f360:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f362:	18d3      	adds	r3, r2, r3
 800f364:	6058      	str	r0, [r3, #4]
				break;
 800f366:	e7f7      	b.n	800f358 <vQueueAddToRegistry+0x1c>
 800f368:	20006eb8 	.word	0x20006eb8

0800f36c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f36c:	b570      	push	{r4, r5, r6, lr}
 800f36e:	0004      	movs	r4, r0
 800f370:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f372:	f001 f985 	bl	8010680 <vPortEnterCritical>
 800f376:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f378:	3301      	adds	r3, #1
 800f37a:	d00b      	beq.n	800f394 <vQueueWaitForMessageRestricted+0x28>
 800f37c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f37e:	3301      	adds	r3, #1
 800f380:	d00b      	beq.n	800f39a <vQueueWaitForMessageRestricted+0x2e>
 800f382:	f001 f989 	bl	8010698 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d009      	beq.n	800f3a0 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f38c:	0020      	movs	r0, r4
 800f38e:	f7ff fd25 	bl	800eddc <prvUnlockQueue>
	}
 800f392:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f394:	2300      	movs	r3, #0
 800f396:	6463      	str	r3, [r4, #68]	; 0x44
 800f398:	e7f0      	b.n	800f37c <vQueueWaitForMessageRestricted+0x10>
 800f39a:	2300      	movs	r3, #0
 800f39c:	64a3      	str	r3, [r4, #72]	; 0x48
 800f39e:	e7f0      	b.n	800f382 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f3a0:	0020      	movs	r0, r4
 800f3a2:	3024      	adds	r0, #36	; 0x24
 800f3a4:	0029      	movs	r1, r5
 800f3a6:	f000 fc95 	bl	800fcd4 <vTaskPlaceOnEventListRestricted>
 800f3aa:	e7ef      	b.n	800f38c <vQueueWaitForMessageRestricted+0x20>

0800f3ac <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ae:	46d6      	mov	lr, sl
 800f3b0:	464f      	mov	r7, r9
 800f3b2:	4646      	mov	r6, r8
 800f3b4:	b5c0      	push	{r6, r7, lr}
 800f3b6:	0006      	movs	r6, r0
 800f3b8:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f3ba:	6808      	ldr	r0, [r1, #0]
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	d044      	beq.n	800f44a <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f3c0:	684b      	ldr	r3, [r1, #4]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	604b      	str	r3, [r1, #4]
 800f3c6:	2208      	movs	r2, #8
 800f3c8:	4690      	mov	r8, r2
 800f3ca:	4488      	add	r8, r1
 800f3cc:	4543      	cmp	r3, r8
 800f3ce:	d006      	beq.n	800f3de <prvListTaskWithinSingleList+0x32>
 800f3d0:	684b      	ldr	r3, [r1, #4]
 800f3d2:	68db      	ldr	r3, [r3, #12]
 800f3d4:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800f3d6:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f3d8:	2302      	movs	r3, #2
 800f3da:	469a      	mov	sl, r3
 800f3dc:	e018      	b.n	800f410 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f3de:	68cb      	ldr	r3, [r1, #12]
 800f3e0:	604b      	str	r3, [r1, #4]
 800f3e2:	e7f5      	b.n	800f3d0 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f3e4:	68cb      	ldr	r3, [r1, #12]
 800f3e6:	604b      	str	r3, [r1, #4]
 800f3e8:	e017      	b.n	800f41a <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f3ea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f3ec:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f3ee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800f3f0:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f3f2:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f3f4:	783b      	ldrb	r3, [r7, #0]
 800f3f6:	2ba5      	cmp	r3, #165	; 0xa5
 800f3f8:	d125      	bne.n	800f446 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800f3fa:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800f3fc:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f3fe:	5cfc      	ldrb	r4, [r7, r3]
 800f400:	2ca5      	cmp	r4, #165	; 0xa5
 800f402:	d0fb      	beq.n	800f3fc <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f404:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800f406:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800f408:	3001      	adds	r0, #1
 800f40a:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800f40c:	45a9      	cmp	r9, r5
 800f40e:	d01c      	beq.n	800f44a <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f410:	684b      	ldr	r3, [r1, #4]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	604b      	str	r3, [r1, #4]
 800f416:	4598      	cmp	r8, r3
 800f418:	d0e4      	beq.n	800f3e4 <prvListTaskWithinSingleList+0x38>
 800f41a:	684b      	ldr	r3, [r1, #4]
 800f41c:	68dd      	ldr	r5, [r3, #12]
 800f41e:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800f420:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800f422:	002b      	movs	r3, r5
 800f424:	3334      	adds	r3, #52	; 0x34
 800f426:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800f428:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800f42a:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800f42c:	4663      	mov	r3, ip
 800f42e:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800f430:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f432:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800f434:	4663      	mov	r3, ip
 800f436:	2b03      	cmp	r3, #3
 800f438:	d1d7      	bne.n	800f3ea <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800f43a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d0d4      	beq.n	800f3ea <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f440:	4653      	mov	r3, sl
 800f442:	7333      	strb	r3, [r6, #12]
 800f444:	e7d1      	b.n	800f3ea <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800f446:	2300      	movs	r3, #0
 800f448:	e7dc      	b.n	800f404 <prvListTaskWithinSingleList+0x58>
	}
 800f44a:	bc1c      	pop	{r2, r3, r4}
 800f44c:	4690      	mov	r8, r2
 800f44e:	4699      	mov	r9, r3
 800f450:	46a2      	mov	sl, r4
 800f452:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f454 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f454:	4b08      	ldr	r3, [pc, #32]	; (800f478 <prvResetNextTaskUnblockTime+0x24>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d007      	beq.n	800f46e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f45e:	4b06      	ldr	r3, [pc, #24]	; (800f478 <prvResetNextTaskUnblockTime+0x24>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	685a      	ldr	r2, [r3, #4]
 800f468:	4b04      	ldr	r3, [pc, #16]	; (800f47c <prvResetNextTaskUnblockTime+0x28>)
 800f46a:	601a      	str	r2, [r3, #0]
	}
}
 800f46c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800f46e:	4b03      	ldr	r3, [pc, #12]	; (800f47c <prvResetNextTaskUnblockTime+0x28>)
 800f470:	2201      	movs	r2, #1
 800f472:	4252      	negs	r2, r2
 800f474:	601a      	str	r2, [r3, #0]
 800f476:	e7f9      	b.n	800f46c <prvResetNextTaskUnblockTime+0x18>
 800f478:	20001db4 	.word	0x20001db4
 800f47c:	20000130 	.word	0x20000130

0800f480 <prvAddCurrentTaskToDelayedList>:
{
 800f480:	b510      	push	{r4, lr}
 800f482:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f484:	4b0e      	ldr	r3, [pc, #56]	; (800f4c0 <prvAddCurrentTaskToDelayedList+0x40>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f48a:	4b0e      	ldr	r3, [pc, #56]	; (800f4c4 <prvAddCurrentTaskToDelayedList+0x44>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4283      	cmp	r3, r0
 800f490:	d80d      	bhi.n	800f4ae <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f492:	4b0d      	ldr	r3, [pc, #52]	; (800f4c8 <prvAddCurrentTaskToDelayedList+0x48>)
 800f494:	6818      	ldr	r0, [r3, #0]
 800f496:	4b0a      	ldr	r3, [pc, #40]	; (800f4c0 <prvAddCurrentTaskToDelayedList+0x40>)
 800f498:	6819      	ldr	r1, [r3, #0]
 800f49a:	3104      	adds	r1, #4
 800f49c:	f7ff fc24 	bl	800ece8 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f4a0:	4b0a      	ldr	r3, [pc, #40]	; (800f4cc <prvAddCurrentTaskToDelayedList+0x4c>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	42a3      	cmp	r3, r4
 800f4a6:	d909      	bls.n	800f4bc <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800f4a8:	4b08      	ldr	r3, [pc, #32]	; (800f4cc <prvAddCurrentTaskToDelayedList+0x4c>)
 800f4aa:	601c      	str	r4, [r3, #0]
}
 800f4ac:	e006      	b.n	800f4bc <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f4ae:	4b08      	ldr	r3, [pc, #32]	; (800f4d0 <prvAddCurrentTaskToDelayedList+0x50>)
 800f4b0:	6818      	ldr	r0, [r3, #0]
 800f4b2:	4b03      	ldr	r3, [pc, #12]	; (800f4c0 <prvAddCurrentTaskToDelayedList+0x40>)
 800f4b4:	6819      	ldr	r1, [r3, #0]
 800f4b6:	3104      	adds	r1, #4
 800f4b8:	f7ff fc16 	bl	800ece8 <vListInsert>
}
 800f4bc:	bd10      	pop	{r4, pc}
 800f4be:	46c0      	nop			; (mov r8, r8)
 800f4c0:	20001db0 	.word	0x20001db0
 800f4c4:	20001ed0 	.word	0x20001ed0
 800f4c8:	20001db4 	.word	0x20001db4
 800f4cc:	20000130 	.word	0x20000130
 800f4d0:	20001db8 	.word	0x20001db8

0800f4d4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f4d4:	b510      	push	{r4, lr}
 800f4d6:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f4d8:	f005 f97a 	bl	80147d0 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f4dc:	0020      	movs	r0, r4
 800f4de:	f7f0 fe1b 	bl	8000118 <strlen>
 800f4e2:	0003      	movs	r3, r0
 800f4e4:	280b      	cmp	r0, #11
 800f4e6:	dc08      	bgt.n	800f4fa <prvWriteNameToBuffer+0x26>
 800f4e8:	1820      	adds	r0, r4, r0
 800f4ea:	0022      	movs	r2, r4
 800f4ec:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800f4ee:	2320      	movs	r3, #32
 800f4f0:	7003      	strb	r3, [r0, #0]
 800f4f2:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f4f4:	4290      	cmp	r0, r2
 800f4f6:	d1fb      	bne.n	800f4f0 <prvWriteNameToBuffer+0x1c>
 800f4f8:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f4fa:	18e0      	adds	r0, r4, r3
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f500:	bd10      	pop	{r4, pc}
	...

0800f504 <xTaskGenericCreate>:
{
 800f504:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f506:	46d6      	mov	lr, sl
 800f508:	4647      	mov	r7, r8
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b085      	sub	sp, #20
 800f50e:	9002      	str	r0, [sp, #8]
 800f510:	000d      	movs	r5, r1
 800f512:	0016      	movs	r6, r2
 800f514:	9303      	str	r3, [sp, #12]
 800f516:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800f518:	2800      	cmp	r0, #0
 800f51a:	d101      	bne.n	800f520 <xTaskGenericCreate+0x1c>
 800f51c:	b672      	cpsid	i
 800f51e:	e7fe      	b.n	800f51e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800f520:	2f06      	cmp	r7, #6
 800f522:	d901      	bls.n	800f528 <xTaskGenericCreate+0x24>
 800f524:	b672      	cpsid	i
 800f526:	e7fe      	b.n	800f526 <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d106      	bne.n	800f53c <xTaskGenericCreate+0x38>
 800f52e:	0090      	lsls	r0, r2, #2
 800f530:	f001 f928 	bl	8010784 <pvPortMalloc>
 800f534:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800f536:	2800      	cmp	r0, #0
 800f538:	d100      	bne.n	800f53c <xTaskGenericCreate+0x38>
 800f53a:	e0b7      	b.n	800f6ac <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f53c:	2060      	movs	r0, #96	; 0x60
 800f53e:	f001 f921 	bl	8010784 <pvPortMalloc>
 800f542:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800f544:	d100      	bne.n	800f548 <xTaskGenericCreate+0x44>
 800f546:	e08b      	b.n	800f660 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800f548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f54a:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f54c:	00b2      	lsls	r2, r6, #2
 800f54e:	21a5      	movs	r1, #165	; 0xa5
 800f550:	0018      	movs	r0, r3
 800f552:	f004 fed5 	bl	8014300 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f556:	4b57      	ldr	r3, [pc, #348]	; (800f6b4 <xTaskGenericCreate+0x1b0>)
 800f558:	18f3      	adds	r3, r6, r3
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f55e:	4694      	mov	ip, r2
 800f560:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f562:	2207      	movs	r2, #7
 800f564:	4393      	bics	r3, r2
 800f566:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f568:	782a      	ldrb	r2, [r5, #0]
 800f56a:	2334      	movs	r3, #52	; 0x34
 800f56c:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800f56e:	782b      	ldrb	r3, [r5, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d000      	beq.n	800f576 <xTaskGenericCreate+0x72>
 800f574:	e07e      	b.n	800f674 <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f576:	2500      	movs	r5, #0
 800f578:	2340      	movs	r3, #64	; 0x40
 800f57a:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800f57c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f57e:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f580:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f582:	1d23      	adds	r3, r4, #4
 800f584:	9301      	str	r3, [sp, #4]
 800f586:	0018      	movs	r0, r3
 800f588:	f7ff fb9f 	bl	800ecca <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f58c:	0020      	movs	r0, r4
 800f58e:	3018      	adds	r0, #24
 800f590:	f7ff fb9b 	bl	800ecca <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f594:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f596:	2307      	movs	r3, #7
 800f598:	1bdb      	subs	r3, r3, r7
 800f59a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f59c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f59e:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f5a0:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f5a2:	235c      	movs	r3, #92	; 0x5c
 800f5a4:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f5a6:	9a03      	ldr	r2, [sp, #12]
 800f5a8:	9902      	ldr	r1, [sp, #8]
 800f5aa:	4650      	mov	r0, sl
 800f5ac:	f001 f820 	bl	80105f0 <pxPortInitialiseStack>
 800f5b0:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5b4:	42ab      	cmp	r3, r5
 800f5b6:	d000      	beq.n	800f5ba <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f5b8:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f5ba:	f001 f861 	bl	8010680 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f5be:	4a3e      	ldr	r2, [pc, #248]	; (800f6b8 <xTaskGenericCreate+0x1b4>)
 800f5c0:	6813      	ldr	r3, [r2, #0]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f5c6:	4b3d      	ldr	r3, [pc, #244]	; (800f6bc <xTaskGenericCreate+0x1b8>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d162      	bne.n	800f694 <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800f5ce:	4b3b      	ldr	r3, [pc, #236]	; (800f6bc <xTaskGenericCreate+0x1b8>)
 800f5d0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f5d2:	6813      	ldr	r3, [r2, #0]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d120      	bne.n	800f61a <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f5d8:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f5da:	3313      	adds	r3, #19
 800f5dc:	4698      	mov	r8, r3
 800f5de:	4e38      	ldr	r6, [pc, #224]	; (800f6c0 <xTaskGenericCreate+0x1bc>)
 800f5e0:	4640      	mov	r0, r8
 800f5e2:	4368      	muls	r0, r5
 800f5e4:	1980      	adds	r0, r0, r6
 800f5e6:	f7ff fb65 	bl	800ecb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f5ea:	3501      	adds	r5, #1
 800f5ec:	2d07      	cmp	r5, #7
 800f5ee:	d1f7      	bne.n	800f5e0 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800f5f0:	4e34      	ldr	r6, [pc, #208]	; (800f6c4 <xTaskGenericCreate+0x1c0>)
 800f5f2:	0030      	movs	r0, r6
 800f5f4:	f7ff fb5e 	bl	800ecb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f5f8:	4d33      	ldr	r5, [pc, #204]	; (800f6c8 <xTaskGenericCreate+0x1c4>)
 800f5fa:	0028      	movs	r0, r5
 800f5fc:	f7ff fb5a 	bl	800ecb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f600:	4832      	ldr	r0, [pc, #200]	; (800f6cc <xTaskGenericCreate+0x1c8>)
 800f602:	f7ff fb57 	bl	800ecb4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f606:	4832      	ldr	r0, [pc, #200]	; (800f6d0 <xTaskGenericCreate+0x1cc>)
 800f608:	f7ff fb54 	bl	800ecb4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f60c:	4831      	ldr	r0, [pc, #196]	; (800f6d4 <xTaskGenericCreate+0x1d0>)
 800f60e:	f7ff fb51 	bl	800ecb4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f612:	4b31      	ldr	r3, [pc, #196]	; (800f6d8 <xTaskGenericCreate+0x1d4>)
 800f614:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f616:	4b31      	ldr	r3, [pc, #196]	; (800f6dc <xTaskGenericCreate+0x1d8>)
 800f618:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800f61a:	4a31      	ldr	r2, [pc, #196]	; (800f6e0 <xTaskGenericCreate+0x1dc>)
 800f61c:	6813      	ldr	r3, [r2, #0]
 800f61e:	3301      	adds	r3, #1
 800f620:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f622:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f626:	4a2f      	ldr	r2, [pc, #188]	; (800f6e4 <xTaskGenericCreate+0x1e0>)
 800f628:	6812      	ldr	r2, [r2, #0]
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d901      	bls.n	800f632 <xTaskGenericCreate+0x12e>
 800f62e:	4a2d      	ldr	r2, [pc, #180]	; (800f6e4 <xTaskGenericCreate+0x1e0>)
 800f630:	6013      	str	r3, [r2, #0]
 800f632:	2014      	movs	r0, #20
 800f634:	4358      	muls	r0, r3
 800f636:	4b22      	ldr	r3, [pc, #136]	; (800f6c0 <xTaskGenericCreate+0x1bc>)
 800f638:	18c0      	adds	r0, r0, r3
 800f63a:	9901      	ldr	r1, [sp, #4]
 800f63c:	f7ff fb48 	bl	800ecd0 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f640:	f001 f82a 	bl	8010698 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f644:	4b28      	ldr	r3, [pc, #160]	; (800f6e8 <xTaskGenericCreate+0x1e4>)
 800f646:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f648:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00d      	beq.n	800f66a <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f64e:	4b1b      	ldr	r3, [pc, #108]	; (800f6bc <xTaskGenericCreate+0x1b8>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f654:	42bb      	cmp	r3, r7
 800f656:	d208      	bcs.n	800f66a <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800f658:	f001 f806 	bl	8010668 <vPortYield>
			xReturn = pdPASS;
 800f65c:	2001      	movs	r0, #1
 800f65e:	e004      	b.n	800f66a <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800f660:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f662:	f001 f925 	bl	80108b0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f666:	2001      	movs	r0, #1
 800f668:	4240      	negs	r0, r0
}
 800f66a:	b005      	add	sp, #20
 800f66c:	bc0c      	pop	{r2, r3}
 800f66e:	4690      	mov	r8, r2
 800f670:	469a      	mov	sl, r3
 800f672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f674:	1c6b      	adds	r3, r5, #1
 800f676:	0022      	movs	r2, r4
 800f678:	3235      	adds	r2, #53	; 0x35
 800f67a:	0021      	movs	r1, r4
 800f67c:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f67e:	7818      	ldrb	r0, [r3, #0]
 800f680:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800f682:	7818      	ldrb	r0, [r3, #0]
 800f684:	2800      	cmp	r0, #0
 800f686:	d100      	bne.n	800f68a <xTaskGenericCreate+0x186>
 800f688:	e775      	b.n	800f576 <xTaskGenericCreate+0x72>
 800f68a:	3301      	adds	r3, #1
 800f68c:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f68e:	4291      	cmp	r1, r2
 800f690:	d1f5      	bne.n	800f67e <xTaskGenericCreate+0x17a>
 800f692:	e770      	b.n	800f576 <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800f694:	4b14      	ldr	r3, [pc, #80]	; (800f6e8 <xTaskGenericCreate+0x1e4>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d1be      	bne.n	800f61a <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f69c:	4b07      	ldr	r3, [pc, #28]	; (800f6bc <xTaskGenericCreate+0x1b8>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a2:	42bb      	cmp	r3, r7
 800f6a4:	d8b9      	bhi.n	800f61a <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800f6a6:	4b05      	ldr	r3, [pc, #20]	; (800f6bc <xTaskGenericCreate+0x1b8>)
 800f6a8:	601c      	str	r4, [r3, #0]
 800f6aa:	e7b6      	b.n	800f61a <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f6ac:	2001      	movs	r0, #1
 800f6ae:	4240      	negs	r0, r0
 800f6b0:	e7db      	b.n	800f66a <xTaskGenericCreate+0x166>
 800f6b2:	46c0      	nop			; (mov r8, r8)
 800f6b4:	3fffffff 	.word	0x3fffffff
 800f6b8:	20001e4c 	.word	0x20001e4c
 800f6bc:	20001db0 	.word	0x20001db0
 800f6c0:	20001dbc 	.word	0x20001dbc
 800f6c4:	20001e64 	.word	0x20001e64
 800f6c8:	20001e78 	.word	0x20001e78
 800f6cc:	20001e90 	.word	0x20001e90
 800f6d0:	20001ebc 	.word	0x20001ebc
 800f6d4:	20001ea8 	.word	0x20001ea8
 800f6d8:	20001db4 	.word	0x20001db4
 800f6dc:	20001db8 	.word	0x20001db8
 800f6e0:	20001e58 	.word	0x20001e58
 800f6e4:	20001e60 	.word	0x20001e60
 800f6e8:	20001ea4 	.word	0x20001ea4

0800f6ec <uxTaskPriorityGet>:
	{
 800f6ec:	b510      	push	{r4, lr}
 800f6ee:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f6f0:	f000 ffc6 	bl	8010680 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f6f4:	2c00      	cmp	r4, #0
 800f6f6:	d004      	beq.n	800f702 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f6f8:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f6fa:	f000 ffcd 	bl	8010698 <vPortExitCritical>
	}
 800f6fe:	0020      	movs	r0, r4
 800f700:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f702:	4b01      	ldr	r3, [pc, #4]	; (800f708 <uxTaskPriorityGet+0x1c>)
 800f704:	681c      	ldr	r4, [r3, #0]
 800f706:	e7f7      	b.n	800f6f8 <uxTaskPriorityGet+0xc>
 800f708:	20001db0 	.word	0x20001db0

0800f70c <vTaskPrioritySet>:
	{
 800f70c:	b570      	push	{r4, r5, r6, lr}
 800f70e:	0004      	movs	r4, r0
 800f710:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f712:	2906      	cmp	r1, #6
 800f714:	d901      	bls.n	800f71a <vTaskPrioritySet+0xe>
 800f716:	b672      	cpsid	i
 800f718:	e7fe      	b.n	800f718 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f71a:	f000 ffb1 	bl	8010680 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f71e:	2c00      	cmp	r4, #0
 800f720:	d101      	bne.n	800f726 <vTaskPrioritySet+0x1a>
 800f722:	4b21      	ldr	r3, [pc, #132]	; (800f7a8 <vTaskPrioritySet+0x9c>)
 800f724:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f726:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f728:	4295      	cmp	r5, r2
 800f72a:	d032      	beq.n	800f792 <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800f72c:	d934      	bls.n	800f798 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800f72e:	4b1e      	ldr	r3, [pc, #120]	; (800f7a8 <vTaskPrioritySet+0x9c>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	42a3      	cmp	r3, r4
 800f734:	d036      	beq.n	800f7a4 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f736:	4b1c      	ldr	r3, [pc, #112]	; (800f7a8 <vTaskPrioritySet+0x9c>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73c:	2600      	movs	r6, #0
 800f73e:	429d      	cmp	r5, r3
 800f740:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f742:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f744:	428a      	cmp	r2, r1
 800f746:	d100      	bne.n	800f74a <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800f748:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800f74a:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f74c:	69a3      	ldr	r3, [r4, #24]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	db02      	blt.n	800f758 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f752:	2207      	movs	r2, #7
 800f754:	1b55      	subs	r5, r2, r5
 800f756:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f758:	2314      	movs	r3, #20
 800f75a:	434b      	muls	r3, r1
 800f75c:	4a13      	ldr	r2, [pc, #76]	; (800f7ac <vTaskPrioritySet+0xa0>)
 800f75e:	189b      	adds	r3, r3, r2
 800f760:	6962      	ldr	r2, [r4, #20]
 800f762:	429a      	cmp	r2, r3
 800f764:	d111      	bne.n	800f78a <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f766:	1d25      	adds	r5, r4, #4
 800f768:	0028      	movs	r0, r5
 800f76a:	f7ff fad4 	bl	800ed16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f76e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f770:	4a0f      	ldr	r2, [pc, #60]	; (800f7b0 <vTaskPrioritySet+0xa4>)
 800f772:	6812      	ldr	r2, [r2, #0]
 800f774:	4293      	cmp	r3, r2
 800f776:	d901      	bls.n	800f77c <vTaskPrioritySet+0x70>
 800f778:	4a0d      	ldr	r2, [pc, #52]	; (800f7b0 <vTaskPrioritySet+0xa4>)
 800f77a:	6013      	str	r3, [r2, #0]
 800f77c:	2014      	movs	r0, #20
 800f77e:	4358      	muls	r0, r3
 800f780:	4b0a      	ldr	r3, [pc, #40]	; (800f7ac <vTaskPrioritySet+0xa0>)
 800f782:	18c0      	adds	r0, r0, r3
 800f784:	0029      	movs	r1, r5
 800f786:	f7ff faa3 	bl	800ecd0 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800f78a:	2e01      	cmp	r6, #1
 800f78c:	d101      	bne.n	800f792 <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800f78e:	f000 ff6b 	bl	8010668 <vPortYield>
		taskEXIT_CRITICAL();
 800f792:	f000 ff81 	bl	8010698 <vPortExitCritical>
	}
 800f796:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800f798:	4b03      	ldr	r3, [pc, #12]	; (800f7a8 <vTaskPrioritySet+0x9c>)
 800f79a:	681e      	ldr	r6, [r3, #0]
 800f79c:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f79e:	4273      	negs	r3, r6
 800f7a0:	415e      	adcs	r6, r3
 800f7a2:	e7ce      	b.n	800f742 <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800f7a4:	2600      	movs	r6, #0
 800f7a6:	e7cc      	b.n	800f742 <vTaskPrioritySet+0x36>
 800f7a8:	20001db0 	.word	0x20001db0
 800f7ac:	20001dbc 	.word	0x20001dbc
 800f7b0:	20001e60 	.word	0x20001e60

0800f7b4 <vTaskStartScheduler>:
{
 800f7b4:	b500      	push	{lr}
 800f7b6:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	9303      	str	r3, [sp, #12]
 800f7bc:	9302      	str	r3, [sp, #8]
 800f7be:	9301      	str	r3, [sp, #4]
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	22a0      	movs	r2, #160	; 0xa0
 800f7c4:	490d      	ldr	r1, [pc, #52]	; (800f7fc <vTaskStartScheduler+0x48>)
 800f7c6:	480e      	ldr	r0, [pc, #56]	; (800f800 <vTaskStartScheduler+0x4c>)
 800f7c8:	f7ff fe9c 	bl	800f504 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f7cc:	2801      	cmp	r0, #1
 800f7ce:	d003      	beq.n	800f7d8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d110      	bne.n	800f7f6 <vTaskStartScheduler+0x42>
 800f7d4:	b672      	cpsid	i
 800f7d6:	e7fe      	b.n	800f7d6 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800f7d8:	f000 fd68 	bl	80102ac <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f7dc:	2801      	cmp	r0, #1
 800f7de:	d1f7      	bne.n	800f7d0 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f7e0:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f7e2:	4b08      	ldr	r3, [pc, #32]	; (800f804 <vTaskStartScheduler+0x50>)
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f7e8:	4b07      	ldr	r3, [pc, #28]	; (800f808 <vTaskStartScheduler+0x54>)
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f7ee:	f7f8 fd3d 	bl	800826c <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f7f2:	f000 ff0f 	bl	8010614 <xPortStartScheduler>
}
 800f7f6:	b005      	add	sp, #20
 800f7f8:	bd00      	pop	{pc}
 800f7fa:	46c0      	nop			; (mov r8, r8)
 800f7fc:	0801ba4c 	.word	0x0801ba4c
 800f800:	0800fa75 	.word	0x0800fa75
 800f804:	20001ea4 	.word	0x20001ea4
 800f808:	20001ed0 	.word	0x20001ed0

0800f80c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f80c:	4a02      	ldr	r2, [pc, #8]	; (800f818 <vTaskSuspendAll+0xc>)
 800f80e:	6813      	ldr	r3, [r2, #0]
 800f810:	3301      	adds	r3, #1
 800f812:	6013      	str	r3, [r2, #0]
}
 800f814:	4770      	bx	lr
 800f816:	46c0      	nop			; (mov r8, r8)
 800f818:	20001e54 	.word	0x20001e54

0800f81c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f81c:	4b01      	ldr	r3, [pc, #4]	; (800f824 <xTaskGetTickCount+0x8>)
 800f81e:	6818      	ldr	r0, [r3, #0]
}
 800f820:	4770      	bx	lr
 800f822:	46c0      	nop			; (mov r8, r8)
 800f824:	20001ed0 	.word	0x20001ed0

0800f828 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f828:	4b01      	ldr	r3, [pc, #4]	; (800f830 <xTaskGetTickCountFromISR+0x8>)
 800f82a:	6818      	ldr	r0, [r3, #0]
}
 800f82c:	4770      	bx	lr
 800f82e:	46c0      	nop			; (mov r8, r8)
 800f830:	20001ed0 	.word	0x20001ed0

0800f834 <xTaskIncrementTick>:
{
 800f834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f836:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f838:	4b39      	ldr	r3, [pc, #228]	; (800f920 <xTaskIncrementTick+0xec>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d161      	bne.n	800f904 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800f840:	4b38      	ldr	r3, [pc, #224]	; (800f924 <xTaskIncrementTick+0xf0>)
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	3201      	adds	r2, #1
 800f846:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f848:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f84a:	2e00      	cmp	r6, #0
 800f84c:	d112      	bne.n	800f874 <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800f84e:	4b36      	ldr	r3, [pc, #216]	; (800f928 <xTaskIncrementTick+0xf4>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <xTaskIncrementTick+0x28>
 800f858:	b672      	cpsid	i
 800f85a:	e7fe      	b.n	800f85a <xTaskIncrementTick+0x26>
 800f85c:	4a32      	ldr	r2, [pc, #200]	; (800f928 <xTaskIncrementTick+0xf4>)
 800f85e:	6811      	ldr	r1, [r2, #0]
 800f860:	4b32      	ldr	r3, [pc, #200]	; (800f92c <xTaskIncrementTick+0xf8>)
 800f862:	6818      	ldr	r0, [r3, #0]
 800f864:	6010      	str	r0, [r2, #0]
 800f866:	6019      	str	r1, [r3, #0]
 800f868:	4a31      	ldr	r2, [pc, #196]	; (800f930 <xTaskIncrementTick+0xfc>)
 800f86a:	6813      	ldr	r3, [r2, #0]
 800f86c:	3301      	adds	r3, #1
 800f86e:	6013      	str	r3, [r2, #0]
 800f870:	f7ff fdf0 	bl	800f454 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f874:	4b2f      	ldr	r3, [pc, #188]	; (800f934 <xTaskIncrementTick+0x100>)
 800f876:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f878:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f87a:	42b3      	cmp	r3, r6
 800f87c:	d833      	bhi.n	800f8e6 <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800f87e:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f880:	4d29      	ldr	r5, [pc, #164]	; (800f928 <xTaskIncrementTick+0xf4>)
 800f882:	682b      	ldr	r3, [r5, #0]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d029      	beq.n	800f8de <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f88a:	4b27      	ldr	r3, [pc, #156]	; (800f928 <xTaskIncrementTick+0xf4>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f892:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f894:	429e      	cmp	r6, r3
 800f896:	d332      	bcc.n	800f8fe <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f898:	1d23      	adds	r3, r4, #4
 800f89a:	9301      	str	r3, [sp, #4]
 800f89c:	0018      	movs	r0, r3
 800f89e:	f7ff fa3a 	bl	800ed16 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f8a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d003      	beq.n	800f8b0 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f8a8:	0020      	movs	r0, r4
 800f8aa:	3018      	adds	r0, #24
 800f8ac:	f7ff fa33 	bl	800ed16 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f8b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f8b2:	4a21      	ldr	r2, [pc, #132]	; (800f938 <xTaskIncrementTick+0x104>)
 800f8b4:	6812      	ldr	r2, [r2, #0]
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d901      	bls.n	800f8be <xTaskIncrementTick+0x8a>
 800f8ba:	4a1f      	ldr	r2, [pc, #124]	; (800f938 <xTaskIncrementTick+0x104>)
 800f8bc:	6013      	str	r3, [r2, #0]
 800f8be:	0098      	lsls	r0, r3, #2
 800f8c0:	18c0      	adds	r0, r0, r3
 800f8c2:	0080      	lsls	r0, r0, #2
 800f8c4:	4b1d      	ldr	r3, [pc, #116]	; (800f93c <xTaskIncrementTick+0x108>)
 800f8c6:	18c0      	adds	r0, r0, r3
 800f8c8:	9901      	ldr	r1, [sp, #4]
 800f8ca:	f7ff fa01 	bl	800ecd0 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8ce:	4b1c      	ldr	r3, [pc, #112]	; (800f940 <xTaskIncrementTick+0x10c>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d3d3      	bcc.n	800f882 <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800f8da:	2701      	movs	r7, #1
 800f8dc:	e7d1      	b.n	800f882 <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f8de:	4b15      	ldr	r3, [pc, #84]	; (800f934 <xTaskIncrementTick+0x100>)
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	4252      	negs	r2, r2
 800f8e4:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f8e6:	4b16      	ldr	r3, [pc, #88]	; (800f940 <xTaskIncrementTick+0x10c>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ec:	0093      	lsls	r3, r2, #2
 800f8ee:	189b      	adds	r3, r3, r2
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	4a12      	ldr	r2, [pc, #72]	; (800f93c <xTaskIncrementTick+0x108>)
 800f8f4:	589b      	ldr	r3, [r3, r2]
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d909      	bls.n	800f90e <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800f8fa:	2701      	movs	r7, #1
 800f8fc:	e007      	b.n	800f90e <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800f8fe:	4a0d      	ldr	r2, [pc, #52]	; (800f934 <xTaskIncrementTick+0x100>)
 800f900:	6013      	str	r3, [r2, #0]
							break;
 800f902:	e7f0      	b.n	800f8e6 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800f904:	4a0f      	ldr	r2, [pc, #60]	; (800f944 <xTaskIncrementTick+0x110>)
 800f906:	6813      	ldr	r3, [r2, #0]
 800f908:	3301      	adds	r3, #1
 800f90a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f90c:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800f90e:	4b0e      	ldr	r3, [pc, #56]	; (800f948 <xTaskIncrementTick+0x114>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d000      	beq.n	800f918 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800f916:	2701      	movs	r7, #1
}
 800f918:	0038      	movs	r0, r7
 800f91a:	b003      	add	sp, #12
 800f91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f91e:	46c0      	nop			; (mov r8, r8)
 800f920:	20001e54 	.word	0x20001e54
 800f924:	20001ed0 	.word	0x20001ed0
 800f928:	20001db4 	.word	0x20001db4
 800f92c:	20001db8 	.word	0x20001db8
 800f930:	20001e8c 	.word	0x20001e8c
 800f934:	20000130 	.word	0x20000130
 800f938:	20001e60 	.word	0x20001e60
 800f93c:	20001dbc 	.word	0x20001dbc
 800f940:	20001db0 	.word	0x20001db0
 800f944:	20001e50 	.word	0x20001e50
 800f948:	20001ed4 	.word	0x20001ed4

0800f94c <xTaskResumeAll>:
{
 800f94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800f94e:	4b2f      	ldr	r3, [pc, #188]	; (800fa0c <xTaskResumeAll+0xc0>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d101      	bne.n	800f95a <xTaskResumeAll+0xe>
 800f956:	b672      	cpsid	i
 800f958:	e7fe      	b.n	800f958 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800f95a:	f000 fe91 	bl	8010680 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f95e:	4b2b      	ldr	r3, [pc, #172]	; (800fa0c <xTaskResumeAll+0xc0>)
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	3a01      	subs	r2, #1
 800f964:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f966:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f968:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f96a:	42a3      	cmp	r3, r4
 800f96c:	d105      	bne.n	800f97a <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f96e:	4b28      	ldr	r3, [pc, #160]	; (800fa10 <xTaskResumeAll+0xc4>)
 800f970:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f972:	4d28      	ldr	r5, [pc, #160]	; (800fa14 <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f974:	42a3      	cmp	r3, r4
 800f976:	d12a      	bne.n	800f9ce <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800f978:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f97a:	f000 fe8d 	bl	8010698 <vPortExitCritical>
}
 800f97e:	0020      	movs	r0, r4
 800f980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800f982:	0098      	lsls	r0, r3, #2
 800f984:	18c0      	adds	r0, r0, r3
 800f986:	0080      	lsls	r0, r0, #2
 800f988:	4b23      	ldr	r3, [pc, #140]	; (800fa18 <xTaskResumeAll+0xcc>)
 800f98a:	18c0      	adds	r0, r0, r3
 800f98c:	0021      	movs	r1, r4
 800f98e:	f7ff f99f 	bl	800ecd0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f992:	4b22      	ldr	r3, [pc, #136]	; (800fa1c <xTaskResumeAll+0xd0>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d214      	bcs.n	800f9c8 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f99e:	6833      	ldr	r3, [r6, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d016      	beq.n	800f9d2 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f9a4:	68eb      	ldr	r3, [r5, #12]
 800f9a6:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9a8:	0038      	movs	r0, r7
 800f9aa:	3018      	adds	r0, #24
 800f9ac:	f7ff f9b3 	bl	800ed16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f9b0:	1d3c      	adds	r4, r7, #4
 800f9b2:	0020      	movs	r0, r4
 800f9b4:	f7ff f9af 	bl	800ed16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ba:	4a19      	ldr	r2, [pc, #100]	; (800fa20 <xTaskResumeAll+0xd4>)
 800f9bc:	6812      	ldr	r2, [r2, #0]
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d9df      	bls.n	800f982 <xTaskResumeAll+0x36>
 800f9c2:	4a17      	ldr	r2, [pc, #92]	; (800fa20 <xTaskResumeAll+0xd4>)
 800f9c4:	6013      	str	r3, [r2, #0]
 800f9c6:	e7dc      	b.n	800f982 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800f9c8:	4b16      	ldr	r3, [pc, #88]	; (800fa24 <xTaskResumeAll+0xd8>)
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9ce:	4e11      	ldr	r6, [pc, #68]	; (800fa14 <xTaskResumeAll+0xc8>)
 800f9d0:	e7e5      	b.n	800f99e <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f9d2:	4b15      	ldr	r3, [pc, #84]	; (800fa28 <xTaskResumeAll+0xdc>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d005      	beq.n	800f9e6 <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f9da:	4e13      	ldr	r6, [pc, #76]	; (800fa28 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800f9dc:	4c11      	ldr	r4, [pc, #68]	; (800fa24 <xTaskResumeAll+0xd8>)
 800f9de:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f9e0:	6833      	ldr	r3, [r6, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d108      	bne.n	800f9f8 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800f9e6:	4b0f      	ldr	r3, [pc, #60]	; (800fa24 <xTaskResumeAll+0xd8>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f9ea:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d1c4      	bne.n	800f97a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800f9f0:	f000 fe3a 	bl	8010668 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800f9f4:	3401      	adds	r4, #1
 800f9f6:	e7c0      	b.n	800f97a <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800f9f8:	f7ff ff1c 	bl	800f834 <xTaskIncrementTick>
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	d000      	beq.n	800fa02 <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800fa00:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800fa02:	4a09      	ldr	r2, [pc, #36]	; (800fa28 <xTaskResumeAll+0xdc>)
 800fa04:	6813      	ldr	r3, [r2, #0]
 800fa06:	3b01      	subs	r3, #1
 800fa08:	6013      	str	r3, [r2, #0]
 800fa0a:	e7e9      	b.n	800f9e0 <xTaskResumeAll+0x94>
 800fa0c:	20001e54 	.word	0x20001e54
 800fa10:	20001e4c 	.word	0x20001e4c
 800fa14:	20001e90 	.word	0x20001e90
 800fa18:	20001dbc 	.word	0x20001dbc
 800fa1c:	20001db0 	.word	0x20001db0
 800fa20:	20001e60 	.word	0x20001e60
 800fa24:	20001ed4 	.word	0x20001ed4
 800fa28:	20001e50 	.word	0x20001e50

0800fa2c <vTaskDelay>:
	{
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa30:	d016      	beq.n	800fa60 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800fa32:	4b0d      	ldr	r3, [pc, #52]	; (800fa68 <vTaskDelay+0x3c>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d001      	beq.n	800fa3e <vTaskDelay+0x12>
 800fa3a:	b672      	cpsid	i
 800fa3c:	e7fe      	b.n	800fa3c <vTaskDelay+0x10>
			vTaskSuspendAll();
 800fa3e:	f7ff fee5 	bl	800f80c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800fa42:	4b0a      	ldr	r3, [pc, #40]	; (800fa6c <vTaskDelay+0x40>)
 800fa44:	681c      	ldr	r4, [r3, #0]
 800fa46:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fa48:	4b09      	ldr	r3, [pc, #36]	; (800fa70 <vTaskDelay+0x44>)
 800fa4a:	6818      	ldr	r0, [r3, #0]
 800fa4c:	3004      	adds	r0, #4
 800fa4e:	f7ff f962 	bl	800ed16 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fa52:	0020      	movs	r0, r4
 800fa54:	f7ff fd14 	bl	800f480 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800fa58:	f7ff ff78 	bl	800f94c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	d101      	bne.n	800fa64 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800fa60:	f000 fe02 	bl	8010668 <vPortYield>
	}
 800fa64:	bd70      	pop	{r4, r5, r6, pc}
 800fa66:	46c0      	nop			; (mov r8, r8)
 800fa68:	20001e54 	.word	0x20001e54
 800fa6c:	20001ed0 	.word	0x20001ed0
 800fa70:	20001db0 	.word	0x20001db0

0800fa74 <prvIdleTask>:
{
 800fa74:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fa76:	4d16      	ldr	r5, [pc, #88]	; (800fad0 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fa78:	4e16      	ldr	r6, [pc, #88]	; (800fad4 <prvIdleTask+0x60>)
 800fa7a:	e003      	b.n	800fa84 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa7c:	4b16      	ldr	r3, [pc, #88]	; (800fad8 <prvIdleTask+0x64>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d822      	bhi.n	800faca <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fa84:	682b      	ldr	r3, [r5, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d0f8      	beq.n	800fa7c <prvIdleTask+0x8>
			vTaskSuspendAll();
 800fa8a:	f7ff febf 	bl	800f80c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fa8e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800fa90:	f7ff ff5c 	bl	800f94c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800fa94:	2c00      	cmp	r4, #0
 800fa96:	d0f5      	beq.n	800fa84 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800fa98:	f000 fdf2 	bl	8010680 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fa9c:	4b0d      	ldr	r3, [pc, #52]	; (800fad4 <prvIdleTask+0x60>)
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800faa2:	1d20      	adds	r0, r4, #4
 800faa4:	f7ff f937 	bl	800ed16 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800faa8:	4a0c      	ldr	r2, [pc, #48]	; (800fadc <prvIdleTask+0x68>)
 800faaa:	6813      	ldr	r3, [r2, #0]
 800faac:	3b01      	subs	r3, #1
 800faae:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800fab0:	4a07      	ldr	r2, [pc, #28]	; (800fad0 <prvIdleTask+0x5c>)
 800fab2:	6813      	ldr	r3, [r2, #0]
 800fab4:	3b01      	subs	r3, #1
 800fab6:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800fab8:	f000 fdee 	bl	8010698 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800fabc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fabe:	f000 fef7 	bl	80108b0 <vPortFree>
		vPortFree( pxTCB );
 800fac2:	0020      	movs	r0, r4
 800fac4:	f000 fef4 	bl	80108b0 <vPortFree>
 800fac8:	e7dc      	b.n	800fa84 <prvIdleTask+0x10>
				taskYIELD();
 800faca:	f000 fdcd 	bl	8010668 <vPortYield>
 800face:	e7d9      	b.n	800fa84 <prvIdleTask+0x10>
 800fad0:	20001e5c 	.word	0x20001e5c
 800fad4:	20001ebc 	.word	0x20001ebc
 800fad8:	20001dbc 	.word	0x20001dbc
 800fadc:	20001e4c 	.word	0x20001e4c

0800fae0 <uxTaskGetSystemState>:
	{
 800fae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fae2:	46c6      	mov	lr, r8
 800fae4:	b500      	push	{lr}
 800fae6:	0006      	movs	r6, r0
 800fae8:	000d      	movs	r5, r1
 800faea:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800faec:	f7ff fe8e 	bl	800f80c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800faf0:	4b1e      	ldr	r3, [pc, #120]	; (800fb6c <uxTaskGetSystemState+0x8c>)
 800faf2:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800faf4:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800faf6:	42ab      	cmp	r3, r5
 800faf8:	d831      	bhi.n	800fb5e <uxTaskGetSystemState+0x7e>
 800fafa:	4d1d      	ldr	r5, [pc, #116]	; (800fb70 <uxTaskGetSystemState+0x90>)
 800fafc:	002f      	movs	r7, r5
 800fafe:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800fb00:	0160      	lsls	r0, r4, #5
 800fb02:	1830      	adds	r0, r6, r0
 800fb04:	2201      	movs	r2, #1
 800fb06:	0029      	movs	r1, r5
 800fb08:	f7ff fc50 	bl	800f3ac <prvListTaskWithinSingleList>
 800fb0c:	1824      	adds	r4, r4, r0
 800fb0e:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb10:	42bd      	cmp	r5, r7
 800fb12:	d1f5      	bne.n	800fb00 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800fb14:	4b17      	ldr	r3, [pc, #92]	; (800fb74 <uxTaskGetSystemState+0x94>)
 800fb16:	6819      	ldr	r1, [r3, #0]
 800fb18:	0160      	lsls	r0, r4, #5
 800fb1a:	1830      	adds	r0, r6, r0
 800fb1c:	2202      	movs	r2, #2
 800fb1e:	f7ff fc45 	bl	800f3ac <prvListTaskWithinSingleList>
 800fb22:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800fb24:	4b14      	ldr	r3, [pc, #80]	; (800fb78 <uxTaskGetSystemState+0x98>)
 800fb26:	6819      	ldr	r1, [r3, #0]
 800fb28:	0160      	lsls	r0, r4, #5
 800fb2a:	1830      	adds	r0, r6, r0
 800fb2c:	2202      	movs	r2, #2
 800fb2e:	f7ff fc3d 	bl	800f3ac <prvListTaskWithinSingleList>
 800fb32:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800fb34:	0160      	lsls	r0, r4, #5
 800fb36:	1830      	adds	r0, r6, r0
 800fb38:	2204      	movs	r2, #4
 800fb3a:	4910      	ldr	r1, [pc, #64]	; (800fb7c <uxTaskGetSystemState+0x9c>)
 800fb3c:	f7ff fc36 	bl	800f3ac <prvListTaskWithinSingleList>
 800fb40:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800fb42:	0160      	lsls	r0, r4, #5
 800fb44:	1830      	adds	r0, r6, r0
 800fb46:	2203      	movs	r2, #3
 800fb48:	490d      	ldr	r1, [pc, #52]	; (800fb80 <uxTaskGetSystemState+0xa0>)
 800fb4a:	f7ff fc2f 	bl	800f3ac <prvListTaskWithinSingleList>
 800fb4e:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800fb50:	4643      	mov	r3, r8
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d003      	beq.n	800fb5e <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fb56:	f7f8 fb99 	bl	800828c <ulMainGetRunTimeCounterValue>
 800fb5a:	4643      	mov	r3, r8
 800fb5c:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800fb5e:	f7ff fef5 	bl	800f94c <xTaskResumeAll>
	}
 800fb62:	0020      	movs	r0, r4
 800fb64:	bc04      	pop	{r2}
 800fb66:	4690      	mov	r8, r2
 800fb68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb6a:	46c0      	nop			; (mov r8, r8)
 800fb6c:	20001e4c 	.word	0x20001e4c
 800fb70:	20001e34 	.word	0x20001e34
 800fb74:	20001db4 	.word	0x20001db4
 800fb78:	20001db8 	.word	0x20001db8
 800fb7c:	20001ebc 	.word	0x20001ebc
 800fb80:	20001ea8 	.word	0x20001ea8

0800fb84 <vTaskSwitchContext>:
{
 800fb84:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fb86:	4b3a      	ldr	r3, [pc, #232]	; (800fc70 <vTaskSwitchContext+0xec>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d003      	beq.n	800fb96 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800fb8e:	4b39      	ldr	r3, [pc, #228]	; (800fc74 <vTaskSwitchContext+0xf0>)
 800fb90:	2201      	movs	r2, #1
 800fb92:	601a      	str	r2, [r3, #0]
}
 800fb94:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800fb96:	4b37      	ldr	r3, [pc, #220]	; (800fc74 <vTaskSwitchContext+0xf0>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fb9c:	f7f8 fb76 	bl	800828c <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fba0:	4b35      	ldr	r3, [pc, #212]	; (800fc78 <vTaskSwitchContext+0xf4>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4298      	cmp	r0, r3
 800fba6:	d905      	bls.n	800fbb4 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fba8:	4a34      	ldr	r2, [pc, #208]	; (800fc7c <vTaskSwitchContext+0xf8>)
 800fbaa:	6812      	ldr	r2, [r2, #0]
 800fbac:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fbae:	1acb      	subs	r3, r1, r3
 800fbb0:	181b      	adds	r3, r3, r0
 800fbb2:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800fbb4:	4b30      	ldr	r3, [pc, #192]	; (800fc78 <vTaskSwitchContext+0xf4>)
 800fbb6:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fbb8:	4b30      	ldr	r3, [pc, #192]	; (800fc7c <vTaskSwitchContext+0xf8>)
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	6812      	ldr	r2, [r2, #0]
 800fbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d805      	bhi.n	800fbd2 <vTaskSwitchContext+0x4e>
 800fbc6:	4b2d      	ldr	r3, [pc, #180]	; (800fc7c <vTaskSwitchContext+0xf8>)
 800fbc8:	6818      	ldr	r0, [r3, #0]
 800fbca:	6819      	ldr	r1, [r3, #0]
 800fbcc:	3134      	adds	r1, #52	; 0x34
 800fbce:	f7fd fdd7 	bl	800d780 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fbd2:	4b2a      	ldr	r3, [pc, #168]	; (800fc7c <vTaskSwitchContext+0xf8>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fbd8:	2214      	movs	r2, #20
 800fbda:	4929      	ldr	r1, [pc, #164]	; (800fc80 <vTaskSwitchContext+0xfc>)
 800fbdc:	f004 fb78 	bl	80142d0 <memcmp>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	d005      	beq.n	800fbf0 <vTaskSwitchContext+0x6c>
 800fbe4:	4b25      	ldr	r3, [pc, #148]	; (800fc7c <vTaskSwitchContext+0xf8>)
 800fbe6:	6818      	ldr	r0, [r3, #0]
 800fbe8:	6819      	ldr	r1, [r3, #0]
 800fbea:	3134      	adds	r1, #52	; 0x34
 800fbec:	f7fd fdc8 	bl	800d780 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fbf0:	4b24      	ldr	r3, [pc, #144]	; (800fc84 <vTaskSwitchContext+0x100>)
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	0093      	lsls	r3, r2, #2
 800fbf6:	189b      	adds	r3, r3, r2
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	4a23      	ldr	r2, [pc, #140]	; (800fc88 <vTaskSwitchContext+0x104>)
 800fbfc:	589b      	ldr	r3, [r3, r2]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d115      	bne.n	800fc2e <vTaskSwitchContext+0xaa>
 800fc02:	4b20      	ldr	r3, [pc, #128]	; (800fc84 <vTaskSwitchContext+0x100>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00f      	beq.n	800fc2a <vTaskSwitchContext+0xa6>
 800fc0a:	4a1e      	ldr	r2, [pc, #120]	; (800fc84 <vTaskSwitchContext+0x100>)
 800fc0c:	4c1e      	ldr	r4, [pc, #120]	; (800fc88 <vTaskSwitchContext+0x104>)
 800fc0e:	0010      	movs	r0, r2
 800fc10:	6813      	ldr	r3, [r2, #0]
 800fc12:	3b01      	subs	r3, #1
 800fc14:	6013      	str	r3, [r2, #0]
 800fc16:	6811      	ldr	r1, [r2, #0]
 800fc18:	008b      	lsls	r3, r1, #2
 800fc1a:	185b      	adds	r3, r3, r1
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	591b      	ldr	r3, [r3, r4]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d104      	bne.n	800fc2e <vTaskSwitchContext+0xaa>
 800fc24:	6803      	ldr	r3, [r0, #0]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1f2      	bne.n	800fc10 <vTaskSwitchContext+0x8c>
 800fc2a:	b672      	cpsid	i
 800fc2c:	e7fe      	b.n	800fc2c <vTaskSwitchContext+0xa8>
 800fc2e:	4b15      	ldr	r3, [pc, #84]	; (800fc84 <vTaskSwitchContext+0x100>)
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	4c15      	ldr	r4, [pc, #84]	; (800fc88 <vTaskSwitchContext+0x104>)
 800fc34:	0093      	lsls	r3, r2, #2
 800fc36:	1899      	adds	r1, r3, r2
 800fc38:	0089      	lsls	r1, r1, #2
 800fc3a:	1861      	adds	r1, r4, r1
 800fc3c:	6848      	ldr	r0, [r1, #4]
 800fc3e:	6840      	ldr	r0, [r0, #4]
 800fc40:	6048      	str	r0, [r1, #4]
 800fc42:	189b      	adds	r3, r3, r2
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	3308      	adds	r3, #8
 800fc48:	191b      	adds	r3, r3, r4
 800fc4a:	4298      	cmp	r0, r3
 800fc4c:	d009      	beq.n	800fc62 <vTaskSwitchContext+0xde>
 800fc4e:	0093      	lsls	r3, r2, #2
 800fc50:	189a      	adds	r2, r3, r2
 800fc52:	0092      	lsls	r2, r2, #2
 800fc54:	4b0c      	ldr	r3, [pc, #48]	; (800fc88 <vTaskSwitchContext+0x104>)
 800fc56:	189a      	adds	r2, r3, r2
 800fc58:	6853      	ldr	r3, [r2, #4]
 800fc5a:	68da      	ldr	r2, [r3, #12]
 800fc5c:	4b07      	ldr	r3, [pc, #28]	; (800fc7c <vTaskSwitchContext+0xf8>)
 800fc5e:	601a      	str	r2, [r3, #0]
}
 800fc60:	e798      	b.n	800fb94 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fc62:	6840      	ldr	r0, [r0, #4]
 800fc64:	2114      	movs	r1, #20
 800fc66:	4351      	muls	r1, r2
 800fc68:	1863      	adds	r3, r4, r1
 800fc6a:	6058      	str	r0, [r3, #4]
 800fc6c:	e7ef      	b.n	800fc4e <vTaskSwitchContext+0xca>
 800fc6e:	46c0      	nop			; (mov r8, r8)
 800fc70:	20001e54 	.word	0x20001e54
 800fc74:	20001ed4 	.word	0x20001ed4
 800fc78:	20001e48 	.word	0x20001e48
 800fc7c:	20001db0 	.word	0x20001db0
 800fc80:	0801ba10 	.word	0x0801ba10
 800fc84:	20001e60 	.word	0x20001e60
 800fc88:	20001dbc 	.word	0x20001dbc

0800fc8c <vTaskPlaceOnEventList>:
{
 800fc8c:	b570      	push	{r4, r5, r6, lr}
 800fc8e:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d101      	bne.n	800fc98 <vTaskPlaceOnEventList+0xc>
 800fc94:	b672      	cpsid	i
 800fc96:	e7fe      	b.n	800fc96 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc98:	4d0b      	ldr	r5, [pc, #44]	; (800fcc8 <vTaskPlaceOnEventList+0x3c>)
 800fc9a:	6829      	ldr	r1, [r5, #0]
 800fc9c:	3118      	adds	r1, #24
 800fc9e:	f7ff f823 	bl	800ece8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fca2:	6828      	ldr	r0, [r5, #0]
 800fca4:	3004      	adds	r0, #4
 800fca6:	f7ff f836 	bl	800ed16 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800fcaa:	1c63      	adds	r3, r4, #1
 800fcac:	d005      	beq.n	800fcba <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800fcae:	4b07      	ldr	r3, [pc, #28]	; (800fccc <vTaskPlaceOnEventList+0x40>)
 800fcb0:	6818      	ldr	r0, [r3, #0]
 800fcb2:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fcb4:	f7ff fbe4 	bl	800f480 <prvAddCurrentTaskToDelayedList>
}
 800fcb8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fcba:	4b03      	ldr	r3, [pc, #12]	; (800fcc8 <vTaskPlaceOnEventList+0x3c>)
 800fcbc:	6819      	ldr	r1, [r3, #0]
 800fcbe:	3104      	adds	r1, #4
 800fcc0:	4803      	ldr	r0, [pc, #12]	; (800fcd0 <vTaskPlaceOnEventList+0x44>)
 800fcc2:	f7ff f805 	bl	800ecd0 <vListInsertEnd>
 800fcc6:	e7f7      	b.n	800fcb8 <vTaskPlaceOnEventList+0x2c>
 800fcc8:	20001db0 	.word	0x20001db0
 800fccc:	20001ed0 	.word	0x20001ed0
 800fcd0:	20001ea8 	.word	0x20001ea8

0800fcd4 <vTaskPlaceOnEventListRestricted>:
	{
 800fcd4:	b570      	push	{r4, r5, r6, lr}
 800fcd6:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	d101      	bne.n	800fce0 <vTaskPlaceOnEventListRestricted+0xc>
 800fcdc:	b672      	cpsid	i
 800fcde:	e7fe      	b.n	800fcde <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fce0:	4c07      	ldr	r4, [pc, #28]	; (800fd00 <vTaskPlaceOnEventListRestricted+0x2c>)
 800fce2:	6821      	ldr	r1, [r4, #0]
 800fce4:	3118      	adds	r1, #24
 800fce6:	f7fe fff3 	bl	800ecd0 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fcea:	6820      	ldr	r0, [r4, #0]
 800fcec:	3004      	adds	r0, #4
 800fcee:	f7ff f812 	bl	800ed16 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800fcf2:	4b04      	ldr	r3, [pc, #16]	; (800fd04 <vTaskPlaceOnEventListRestricted+0x30>)
 800fcf4:	6818      	ldr	r0, [r3, #0]
 800fcf6:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fcf8:	f7ff fbc2 	bl	800f480 <prvAddCurrentTaskToDelayedList>
	}
 800fcfc:	bd70      	pop	{r4, r5, r6, pc}
 800fcfe:	46c0      	nop			; (mov r8, r8)
 800fd00:	20001db0 	.word	0x20001db0
 800fd04:	20001ed0 	.word	0x20001ed0

0800fd08 <xTaskRemoveFromEventList>:
{
 800fd08:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fd0a:	68c3      	ldr	r3, [r0, #12]
 800fd0c:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800fd0e:	2d00      	cmp	r5, #0
 800fd10:	d101      	bne.n	800fd16 <xTaskRemoveFromEventList+0xe>
 800fd12:	b672      	cpsid	i
 800fd14:	e7fe      	b.n	800fd14 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fd16:	002c      	movs	r4, r5
 800fd18:	3418      	adds	r4, #24
 800fd1a:	0020      	movs	r0, r4
 800fd1c:	f7fe fffb 	bl	800ed16 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd20:	4b13      	ldr	r3, [pc, #76]	; (800fd70 <xTaskRemoveFromEventList+0x68>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d11e      	bne.n	800fd66 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800fd28:	1d2c      	adds	r4, r5, #4
 800fd2a:	0020      	movs	r0, r4
 800fd2c:	f7fe fff3 	bl	800ed16 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fd30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fd32:	4a10      	ldr	r2, [pc, #64]	; (800fd74 <xTaskRemoveFromEventList+0x6c>)
 800fd34:	6812      	ldr	r2, [r2, #0]
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d901      	bls.n	800fd3e <xTaskRemoveFromEventList+0x36>
 800fd3a:	4a0e      	ldr	r2, [pc, #56]	; (800fd74 <xTaskRemoveFromEventList+0x6c>)
 800fd3c:	6013      	str	r3, [r2, #0]
 800fd3e:	0098      	lsls	r0, r3, #2
 800fd40:	18c0      	adds	r0, r0, r3
 800fd42:	0080      	lsls	r0, r0, #2
 800fd44:	4b0c      	ldr	r3, [pc, #48]	; (800fd78 <xTaskRemoveFromEventList+0x70>)
 800fd46:	18c0      	adds	r0, r0, r3
 800fd48:	0021      	movs	r1, r4
 800fd4a:	f7fe ffc1 	bl	800ecd0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd4e:	4b0b      	ldr	r3, [pc, #44]	; (800fd7c <xTaskRemoveFromEventList+0x74>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800fd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800fd56:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d903      	bls.n	800fd64 <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800fd5c:	4b08      	ldr	r3, [pc, #32]	; (800fd80 <xTaskRemoveFromEventList+0x78>)
 800fd5e:	2201      	movs	r2, #1
 800fd60:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800fd62:	3001      	adds	r0, #1
}
 800fd64:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fd66:	0021      	movs	r1, r4
 800fd68:	4806      	ldr	r0, [pc, #24]	; (800fd84 <xTaskRemoveFromEventList+0x7c>)
 800fd6a:	f7fe ffb1 	bl	800ecd0 <vListInsertEnd>
 800fd6e:	e7ee      	b.n	800fd4e <xTaskRemoveFromEventList+0x46>
 800fd70:	20001e54 	.word	0x20001e54
 800fd74:	20001e60 	.word	0x20001e60
 800fd78:	20001dbc 	.word	0x20001dbc
 800fd7c:	20001db0 	.word	0x20001db0
 800fd80:	20001ed4 	.word	0x20001ed4
 800fd84:	20001e90 	.word	0x20001e90

0800fd88 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d006      	beq.n	800fd9a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd8c:	4b04      	ldr	r3, [pc, #16]	; (800fda0 <vTaskSetTimeOutState+0x18>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd92:	4b04      	ldr	r3, [pc, #16]	; (800fda4 <vTaskSetTimeOutState+0x1c>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	6043      	str	r3, [r0, #4]
}
 800fd98:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800fd9a:	b672      	cpsid	i
 800fd9c:	e7fe      	b.n	800fd9c <vTaskSetTimeOutState+0x14>
 800fd9e:	46c0      	nop			; (mov r8, r8)
 800fda0:	20001e8c 	.word	0x20001e8c
 800fda4:	20001ed0 	.word	0x20001ed0

0800fda8 <xTaskCheckForTimeOut>:
{
 800fda8:	b570      	push	{r4, r5, r6, lr}
 800fdaa:	0004      	movs	r4, r0
 800fdac:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	d003      	beq.n	800fdba <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800fdb2:	2900      	cmp	r1, #0
 800fdb4:	d103      	bne.n	800fdbe <xTaskCheckForTimeOut+0x16>
 800fdb6:	b672      	cpsid	i
 800fdb8:	e7fe      	b.n	800fdb8 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800fdba:	b672      	cpsid	i
 800fdbc:	e7fe      	b.n	800fdbc <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800fdbe:	f000 fc5f 	bl	8010680 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fdc2:	4b10      	ldr	r3, [pc, #64]	; (800fe04 <xTaskCheckForTimeOut+0x5c>)
 800fdc4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800fdc6:	6833      	ldr	r3, [r6, #0]
 800fdc8:	1c59      	adds	r1, r3, #1
 800fdca:	d019      	beq.n	800fe00 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fdcc:	490e      	ldr	r1, [pc, #56]	; (800fe08 <xTaskCheckForTimeOut+0x60>)
 800fdce:	6809      	ldr	r1, [r1, #0]
 800fdd0:	6820      	ldr	r0, [r4, #0]
 800fdd2:	4288      	cmp	r0, r1
 800fdd4:	d003      	beq.n	800fdde <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800fdd6:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fdd8:	6861      	ldr	r1, [r4, #4]
 800fdda:	4291      	cmp	r1, r2
 800fddc:	d904      	bls.n	800fde8 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800fdde:	6861      	ldr	r1, [r4, #4]
 800fde0:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800fde2:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800fde4:	4283      	cmp	r3, r0
 800fde6:	d803      	bhi.n	800fdf0 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800fde8:	f000 fc56 	bl	8010698 <vPortExitCritical>
}
 800fdec:	0028      	movs	r0, r5
 800fdee:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800fdf0:	1a9b      	subs	r3, r3, r2
 800fdf2:	185b      	adds	r3, r3, r1
 800fdf4:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800fdf6:	0020      	movs	r0, r4
 800fdf8:	f7ff ffc6 	bl	800fd88 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800fdfc:	2500      	movs	r5, #0
 800fdfe:	e7f3      	b.n	800fde8 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800fe00:	2500      	movs	r5, #0
 800fe02:	e7f1      	b.n	800fde8 <xTaskCheckForTimeOut+0x40>
 800fe04:	20001ed0 	.word	0x20001ed0
 800fe08:	20001e8c 	.word	0x20001e8c

0800fe0c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800fe0c:	4b01      	ldr	r3, [pc, #4]	; (800fe14 <vTaskMissedYield+0x8>)
 800fe0e:	2201      	movs	r2, #1
 800fe10:	601a      	str	r2, [r3, #0]
}
 800fe12:	4770      	bx	lr
 800fe14:	20001ed4 	.word	0x20001ed4

0800fe18 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800fe18:	4b05      	ldr	r3, [pc, #20]	; (800fe30 <xTaskGetSchedulerState+0x18>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fe1c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d004      	beq.n	800fe2c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe22:	4b04      	ldr	r3, [pc, #16]	; (800fe34 <xTaskGetSchedulerState+0x1c>)
 800fe24:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe26:	4243      	negs	r3, r0
 800fe28:	4158      	adcs	r0, r3
 800fe2a:	0040      	lsls	r0, r0, #1
	}
 800fe2c:	4770      	bx	lr
 800fe2e:	46c0      	nop			; (mov r8, r8)
 800fe30:	20001ea4 	.word	0x20001ea4
 800fe34:	20001e54 	.word	0x20001e54

0800fe38 <vTaskPriorityInherit>:
	{
 800fe38:	b570      	push	{r4, r5, r6, lr}
 800fe3a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fe3c:	d01a      	beq.n	800fe74 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fe3e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fe40:	4b19      	ldr	r3, [pc, #100]	; (800fea8 <vTaskPriorityInherit+0x70>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d214      	bcs.n	800fe74 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe4a:	6983      	ldr	r3, [r0, #24]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	db05      	blt.n	800fe5c <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe50:	4b15      	ldr	r3, [pc, #84]	; (800fea8 <vTaskPriorityInherit+0x70>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fe56:	2307      	movs	r3, #7
 800fe58:	1a5b      	subs	r3, r3, r1
 800fe5a:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800fe5c:	0093      	lsls	r3, r2, #2
 800fe5e:	189b      	adds	r3, r3, r2
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	4a12      	ldr	r2, [pc, #72]	; (800feac <vTaskPriorityInherit+0x74>)
 800fe64:	189b      	adds	r3, r3, r2
 800fe66:	6962      	ldr	r2, [r4, #20]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d004      	beq.n	800fe76 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe6c:	4b0e      	ldr	r3, [pc, #56]	; (800fea8 <vTaskPriorityInherit+0x70>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe72:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800fe74:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fe76:	1d25      	adds	r5, r4, #4
 800fe78:	0028      	movs	r0, r5
 800fe7a:	f7fe ff4c 	bl	800ed16 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe7e:	4b0a      	ldr	r3, [pc, #40]	; (800fea8 <vTaskPriorityInherit+0x70>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe84:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800fe86:	4a0a      	ldr	r2, [pc, #40]	; (800feb0 <vTaskPriorityInherit+0x78>)
 800fe88:	6812      	ldr	r2, [r2, #0]
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d808      	bhi.n	800fea0 <vTaskPriorityInherit+0x68>
 800fe8e:	0098      	lsls	r0, r3, #2
 800fe90:	18c0      	adds	r0, r0, r3
 800fe92:	0080      	lsls	r0, r0, #2
 800fe94:	4b05      	ldr	r3, [pc, #20]	; (800feac <vTaskPriorityInherit+0x74>)
 800fe96:	18c0      	adds	r0, r0, r3
 800fe98:	0029      	movs	r1, r5
 800fe9a:	f7fe ff19 	bl	800ecd0 <vListInsertEnd>
	}
 800fe9e:	e7e9      	b.n	800fe74 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800fea0:	4a03      	ldr	r2, [pc, #12]	; (800feb0 <vTaskPriorityInherit+0x78>)
 800fea2:	6013      	str	r3, [r2, #0]
 800fea4:	e7f3      	b.n	800fe8e <vTaskPriorityInherit+0x56>
 800fea6:	46c0      	nop			; (mov r8, r8)
 800fea8:	20001db0 	.word	0x20001db0
 800feac:	20001dbc 	.word	0x20001dbc
 800feb0:	20001e60 	.word	0x20001e60

0800feb4 <xTaskPriorityDisinherit>:
	{
 800feb4:	b570      	push	{r4, r5, r6, lr}
 800feb6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800feb8:	d02b      	beq.n	800ff12 <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800feba:	4b18      	ldr	r3, [pc, #96]	; (800ff1c <xTaskPriorityDisinherit+0x68>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	4283      	cmp	r3, r0
 800fec0:	d001      	beq.n	800fec6 <xTaskPriorityDisinherit+0x12>
 800fec2:	b672      	cpsid	i
 800fec4:	e7fe      	b.n	800fec4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800fec6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d101      	bne.n	800fed0 <xTaskPriorityDisinherit+0x1c>
 800fecc:	b672      	cpsid	i
 800fece:	e7fe      	b.n	800fece <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800fed0:	3b01      	subs	r3, #1
 800fed2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fed4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fed6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800fed8:	428a      	cmp	r2, r1
 800feda:	d01c      	beq.n	800ff16 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800fedc:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fede:	4283      	cmp	r3, r0
 800fee0:	d118      	bne.n	800ff14 <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fee2:	1d25      	adds	r5, r4, #4
 800fee4:	0028      	movs	r0, r5
 800fee6:	f7fe ff16 	bl	800ed16 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800feea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800feec:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800feee:	2207      	movs	r2, #7
 800fef0:	1ad2      	subs	r2, r2, r3
 800fef2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800fef4:	4a0a      	ldr	r2, [pc, #40]	; (800ff20 <xTaskPriorityDisinherit+0x6c>)
 800fef6:	6812      	ldr	r2, [r2, #0]
 800fef8:	4293      	cmp	r3, r2
 800fefa:	d901      	bls.n	800ff00 <xTaskPriorityDisinherit+0x4c>
 800fefc:	4a08      	ldr	r2, [pc, #32]	; (800ff20 <xTaskPriorityDisinherit+0x6c>)
 800fefe:	6013      	str	r3, [r2, #0]
 800ff00:	2014      	movs	r0, #20
 800ff02:	4358      	muls	r0, r3
 800ff04:	4b07      	ldr	r3, [pc, #28]	; (800ff24 <xTaskPriorityDisinherit+0x70>)
 800ff06:	18c0      	adds	r0, r0, r3
 800ff08:	0029      	movs	r1, r5
 800ff0a:	f7fe fee1 	bl	800ecd0 <vListInsertEnd>
					xReturn = pdTRUE;
 800ff0e:	2001      	movs	r0, #1
 800ff10:	e000      	b.n	800ff14 <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800ff12:	2000      	movs	r0, #0
	}
 800ff14:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800ff16:	2000      	movs	r0, #0
 800ff18:	e7fc      	b.n	800ff14 <xTaskPriorityDisinherit+0x60>
 800ff1a:	46c0      	nop			; (mov r8, r8)
 800ff1c:	20001db0 	.word	0x20001db0
 800ff20:	20001e60 	.word	0x20001e60
 800ff24:	20001dbc 	.word	0x20001dbc

0800ff28 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ff28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff2a:	b085      	sub	sp, #20
 800ff2c:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ff32:	4b2b      	ldr	r3, [pc, #172]	; (800ffe0 <vTaskList+0xb8>)
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ff38:	6818      	ldr	r0, [r3, #0]
 800ff3a:	0140      	lsls	r0, r0, #5
 800ff3c:	f000 fc22 	bl	8010784 <pvPortMalloc>
 800ff40:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800ff42:	d04a      	beq.n	800ffda <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ff44:	9903      	ldr	r1, [sp, #12]
 800ff46:	2200      	movs	r2, #0
 800ff48:	f7ff fdca 	bl	800fae0 <uxTaskGetSystemState>
 800ff4c:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ff4e:	2300      	movs	r3, #0
 800ff50:	9302      	str	r3, [sp, #8]
 800ff52:	9a02      	ldr	r2, [sp, #8]
 800ff54:	9b03      	ldr	r3, [sp, #12]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d23c      	bcs.n	800ffd4 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ff5a:	4e22      	ldr	r6, [pc, #136]	; (800ffe4 <vTaskList+0xbc>)
 800ff5c:	e027      	b.n	800ffae <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800ff5e:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d133      	bne.n	800ffcc <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ff64:	9b02      	ldr	r3, [sp, #8]
 800ff66:	015b      	lsls	r3, r3, #5
 800ff68:	18fb      	adds	r3, r7, r3
 800ff6a:	6859      	ldr	r1, [r3, #4]
 800ff6c:	0020      	movs	r0, r4
 800ff6e:	f7ff fab1 	bl	800f4d4 <prvWriteNameToBuffer>
 800ff72:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ff74:	9b02      	ldr	r3, [sp, #8]
 800ff76:	9a02      	ldr	r2, [sp, #8]
 800ff78:	9902      	ldr	r1, [sp, #8]
 800ff7a:	015b      	lsls	r3, r3, #5
 800ff7c:	18fb      	adds	r3, r7, r3
 800ff7e:	691b      	ldr	r3, [r3, #16]
 800ff80:	0149      	lsls	r1, r1, #5
 800ff82:	1879      	adds	r1, r7, r1
 800ff84:	6889      	ldr	r1, [r1, #8]
 800ff86:	9101      	str	r1, [sp, #4]
 800ff88:	0152      	lsls	r2, r2, #5
 800ff8a:	18ba      	adds	r2, r7, r2
 800ff8c:	8b92      	ldrh	r2, [r2, #28]
 800ff8e:	9200      	str	r2, [sp, #0]
 800ff90:	002a      	movs	r2, r5
 800ff92:	0031      	movs	r1, r6
 800ff94:	f004 fbe0 	bl	8014758 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ff98:	0020      	movs	r0, r4
 800ff9a:	f7f0 f8bd 	bl	8000118 <strlen>
 800ff9e:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ffa0:	9b02      	ldr	r3, [sp, #8]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	9302      	str	r3, [sp, #8]
 800ffa6:	9a02      	ldr	r2, [sp, #8]
 800ffa8:	9b03      	ldr	r3, [sp, #12]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d212      	bcs.n	800ffd4 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ffae:	9b02      	ldr	r3, [sp, #8]
 800ffb0:	015b      	lsls	r3, r3, #5
 800ffb2:	18fb      	adds	r3, r7, r3
 800ffb4:	7b1b      	ldrb	r3, [r3, #12]
 800ffb6:	2b02      	cmp	r3, #2
 800ffb8:	d00a      	beq.n	800ffd0 <vTaskList+0xa8>
 800ffba:	b2da      	uxtb	r2, r3
 800ffbc:	2a02      	cmp	r2, #2
 800ffbe:	d9ce      	bls.n	800ff5e <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ffc0:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ffc2:	2b03      	cmp	r3, #3
 800ffc4:	d0ce      	beq.n	800ff64 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ffc6:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ffc8:	2b04      	cmp	r3, #4
 800ffca:	d0cb      	beq.n	800ff64 <vTaskList+0x3c>
										cStatus = 0x00;
 800ffcc:	2500      	movs	r5, #0
										break;
 800ffce:	e7c9      	b.n	800ff64 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ffd0:	2542      	movs	r5, #66	; 0x42
 800ffd2:	e7c7      	b.n	800ff64 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ffd4:	0038      	movs	r0, r7
 800ffd6:	f000 fc6b 	bl	80108b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ffda:	b005      	add	sp, #20
 800ffdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffde:	46c0      	nop			; (mov r8, r8)
 800ffe0:	20001e4c 	.word	0x20001e4c
 800ffe4:	0801ba3c 	.word	0x0801ba3c

0800ffe8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ffe8:	b570      	push	{r4, r5, r6, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ffee:	2300      	movs	r3, #0
 800fff0:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fff2:	4b26      	ldr	r3, [pc, #152]	; (801008c <vTaskGetRunTimeStats+0xa4>)
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fff8:	6818      	ldr	r0, [r3, #0]
 800fffa:	0140      	lsls	r0, r0, #5
 800fffc:	f000 fbc2 	bl	8010784 <pvPortMalloc>
 8010000:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 8010002:	d014      	beq.n	801002e <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8010004:	9903      	ldr	r1, [sp, #12]
 8010006:	aa01      	add	r2, sp, #4
 8010008:	f7ff fd6a 	bl	800fae0 <uxTaskGetSystemState>
 801000c:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 801000e:	2164      	movs	r1, #100	; 0x64
 8010010:	9801      	ldr	r0, [sp, #4]
 8010012:	f7f0 f89d 	bl	8000150 <__udivsi3>
 8010016:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8010018:	2800      	cmp	r0, #0
 801001a:	d005      	beq.n	8010028 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 801001c:	2300      	movs	r3, #0
 801001e:	9302      	str	r3, [sp, #8]
 8010020:	9a02      	ldr	r2, [sp, #8]
 8010022:	9b03      	ldr	r3, [sp, #12]
 8010024:	429a      	cmp	r2, r3
 8010026:	d316      	bcc.n	8010056 <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8010028:	0030      	movs	r0, r6
 801002a:	f000 fc41 	bl	80108b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801002e:	b004      	add	sp, #16
 8010030:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8010032:	9b02      	ldr	r3, [sp, #8]
 8010034:	015b      	lsls	r3, r3, #5
 8010036:	18f3      	adds	r3, r6, r3
 8010038:	699a      	ldr	r2, [r3, #24]
 801003a:	4915      	ldr	r1, [pc, #84]	; (8010090 <vTaskGetRunTimeStats+0xa8>)
 801003c:	f004 fb8c 	bl	8014758 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 8010040:	0020      	movs	r0, r4
 8010042:	f7f0 f869 	bl	8000118 <strlen>
 8010046:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8010048:	9b02      	ldr	r3, [sp, #8]
 801004a:	3301      	adds	r3, #1
 801004c:	9302      	str	r3, [sp, #8]
 801004e:	9a02      	ldr	r2, [sp, #8]
 8010050:	9b03      	ldr	r3, [sp, #12]
 8010052:	429a      	cmp	r2, r3
 8010054:	d2e8      	bcs.n	8010028 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010056:	9b02      	ldr	r3, [sp, #8]
 8010058:	015b      	lsls	r3, r3, #5
 801005a:	18f3      	adds	r3, r6, r3
 801005c:	9901      	ldr	r1, [sp, #4]
 801005e:	6998      	ldr	r0, [r3, #24]
 8010060:	f7f0 f876 	bl	8000150 <__udivsi3>
 8010064:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8010066:	9b02      	ldr	r3, [sp, #8]
 8010068:	015b      	lsls	r3, r3, #5
 801006a:	18f3      	adds	r3, r6, r3
 801006c:	6859      	ldr	r1, [r3, #4]
 801006e:	0020      	movs	r0, r4
 8010070:	f7ff fa30 	bl	800f4d4 <prvWriteNameToBuffer>
 8010074:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 8010076:	2d00      	cmp	r5, #0
 8010078:	d0db      	beq.n	8010032 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 801007a:	9b02      	ldr	r3, [sp, #8]
 801007c:	015b      	lsls	r3, r3, #5
 801007e:	18f3      	adds	r3, r6, r3
 8010080:	699a      	ldr	r2, [r3, #24]
 8010082:	002b      	movs	r3, r5
 8010084:	4903      	ldr	r1, [pc, #12]	; (8010094 <vTaskGetRunTimeStats+0xac>)
 8010086:	f004 fb67 	bl	8014758 <sprintf>
 801008a:	e7d9      	b.n	8010040 <vTaskGetRunTimeStats+0x58>
 801008c:	20001e4c 	.word	0x20001e4c
 8010090:	0801ba30 	.word	0x0801ba30
 8010094:	0801ba24 	.word	0x0801ba24

08010098 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010098:	4b05      	ldr	r3, [pc, #20]	; (80100b0 <pvTaskIncrementMutexHeldCount+0x18>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d004      	beq.n	80100aa <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80100a0:	4b03      	ldr	r3, [pc, #12]	; (80100b0 <pvTaskIncrementMutexHeldCount+0x18>)
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80100a6:	3301      	adds	r3, #1
 80100a8:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 80100aa:	4b01      	ldr	r3, [pc, #4]	; (80100b0 <pvTaskIncrementMutexHeldCount+0x18>)
 80100ac:	6818      	ldr	r0, [r3, #0]
	}
 80100ae:	4770      	bx	lr
 80100b0:	20001db0 	.word	0x20001db0

080100b4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80100b4:	b570      	push	{r4, r5, r6, lr}
 80100b6:	0005      	movs	r5, r0
 80100b8:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80100ba:	f000 fae1 	bl	8010680 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80100be:	4b20      	ldr	r3, [pc, #128]	; (8010140 <ulTaskNotifyTake+0x8c>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d106      	bne.n	80100d6 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80100c8:	4b1d      	ldr	r3, [pc, #116]	; (8010140 <ulTaskNotifyTake+0x8c>)
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	235c      	movs	r3, #92	; 0x5c
 80100ce:	2101      	movs	r1, #1
 80100d0:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 80100d2:	2c00      	cmp	r4, #0
 80100d4:	d118      	bne.n	8010108 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80100d6:	f000 fadf 	bl	8010698 <vPortExitCritical>

		taskENTER_CRITICAL();
 80100da:	f000 fad1 	bl	8010680 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80100de:	4b18      	ldr	r3, [pc, #96]	; (8010140 <ulTaskNotifyTake+0x8c>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 80100e4:	2c00      	cmp	r4, #0
 80100e6:	d006      	beq.n	80100f6 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 80100e8:	2d00      	cmp	r5, #0
 80100ea:	d123      	bne.n	8010134 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 80100ec:	4b14      	ldr	r3, [pc, #80]	; (8010140 <ulTaskNotifyTake+0x8c>)
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80100f2:	3b01      	subs	r3, #1
 80100f4:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80100f6:	4b12      	ldr	r3, [pc, #72]	; (8010140 <ulTaskNotifyTake+0x8c>)
 80100f8:	681a      	ldr	r2, [r3, #0]
 80100fa:	235c      	movs	r3, #92	; 0x5c
 80100fc:	2100      	movs	r1, #0
 80100fe:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 8010100:	f000 faca 	bl	8010698 <vPortExitCritical>

		return ulReturn;
	}
 8010104:	0020      	movs	r0, r4
 8010106:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010108:	4b0d      	ldr	r3, [pc, #52]	; (8010140 <ulTaskNotifyTake+0x8c>)
 801010a:	6818      	ldr	r0, [r3, #0]
 801010c:	3004      	adds	r0, #4
 801010e:	f7fe fe02 	bl	800ed16 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 8010112:	1c63      	adds	r3, r4, #1
 8010114:	d007      	beq.n	8010126 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 8010116:	4b0b      	ldr	r3, [pc, #44]	; (8010144 <ulTaskNotifyTake+0x90>)
 8010118:	6818      	ldr	r0, [r3, #0]
 801011a:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 801011c:	f7ff f9b0 	bl	800f480 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8010120:	f000 faa2 	bl	8010668 <vPortYield>
 8010124:	e7d7      	b.n	80100d6 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8010126:	4b06      	ldr	r3, [pc, #24]	; (8010140 <ulTaskNotifyTake+0x8c>)
 8010128:	6819      	ldr	r1, [r3, #0]
 801012a:	3104      	adds	r1, #4
 801012c:	4806      	ldr	r0, [pc, #24]	; (8010148 <ulTaskNotifyTake+0x94>)
 801012e:	f7fe fdcf 	bl	800ecd0 <vListInsertEnd>
 8010132:	e7f5      	b.n	8010120 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010134:	4b02      	ldr	r3, [pc, #8]	; (8010140 <ulTaskNotifyTake+0x8c>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2200      	movs	r2, #0
 801013a:	659a      	str	r2, [r3, #88]	; 0x58
 801013c:	e7db      	b.n	80100f6 <ulTaskNotifyTake+0x42>
 801013e:	46c0      	nop			; (mov r8, r8)
 8010140:	20001db0 	.word	0x20001db0
 8010144:	20001ed0 	.word	0x20001ed0
 8010148:	20001ea8 	.word	0x20001ea8

0801014c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801014c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014e:	0004      	movs	r4, r0
 8010150:	000e      	movs	r6, r1
 8010152:	0015      	movs	r5, r2
 8010154:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 8010156:	2800      	cmp	r0, #0
 8010158:	d101      	bne.n	801015e <xTaskGenericNotify+0x12>
 801015a:	b672      	cpsid	i
 801015c:	e7fe      	b.n	801015c <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 801015e:	f000 fa8f 	bl	8010680 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010162:	2f00      	cmp	r7, #0
 8010164:	d001      	beq.n	801016a <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010168:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 801016a:	225c      	movs	r2, #92	; 0x5c
 801016c:	5ca3      	ldrb	r3, [r4, r2]
 801016e:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 8010170:	2102      	movs	r1, #2
 8010172:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 8010174:	2d02      	cmp	r5, #2
 8010176:	d015      	beq.n	80101a4 <xTaskGenericNotify+0x58>
 8010178:	d907      	bls.n	801018a <xTaskGenericNotify+0x3e>
 801017a:	2d03      	cmp	r5, #3
 801017c:	d016      	beq.n	80101ac <xTaskGenericNotify+0x60>
 801017e:	2d04      	cmp	r5, #4
 8010180:	d105      	bne.n	801018e <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8010182:	2b02      	cmp	r3, #2
 8010184:	d035      	beq.n	80101f2 <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010186:	65a6      	str	r6, [r4, #88]	; 0x58
 8010188:	e001      	b.n	801018e <xTaskGenericNotify+0x42>
			switch( eAction )
 801018a:	2d01      	cmp	r5, #1
 801018c:	d006      	beq.n	801019c <xTaskGenericNotify+0x50>
 801018e:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8010190:	2b01      	cmp	r3, #1
 8010192:	d00d      	beq.n	80101b0 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010194:	f000 fa80 	bl	8010698 <vPortExitCritical>

		return xReturn;
	}
 8010198:	0028      	movs	r0, r5
 801019a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 801019c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801019e:	4316      	orrs	r6, r2
 80101a0:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 80101a2:	e7f4      	b.n	801018e <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 80101a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80101a6:	3201      	adds	r2, #1
 80101a8:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 80101aa:	e7f0      	b.n	801018e <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 80101ac:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 80101ae:	e7ee      	b.n	801018e <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80101b0:	1d25      	adds	r5, r4, #4
 80101b2:	0028      	movs	r0, r5
 80101b4:	f7fe fdaf 	bl	800ed16 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80101b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80101ba:	4a0f      	ldr	r2, [pc, #60]	; (80101f8 <xTaskGenericNotify+0xac>)
 80101bc:	6812      	ldr	r2, [r2, #0]
 80101be:	4293      	cmp	r3, r2
 80101c0:	d901      	bls.n	80101c6 <xTaskGenericNotify+0x7a>
 80101c2:	4a0d      	ldr	r2, [pc, #52]	; (80101f8 <xTaskGenericNotify+0xac>)
 80101c4:	6013      	str	r3, [r2, #0]
 80101c6:	2014      	movs	r0, #20
 80101c8:	4358      	muls	r0, r3
 80101ca:	4b0c      	ldr	r3, [pc, #48]	; (80101fc <xTaskGenericNotify+0xb0>)
 80101cc:	18c0      	adds	r0, r0, r3
 80101ce:	0029      	movs	r1, r5
 80101d0:	f7fe fd7e 	bl	800ecd0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80101d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d001      	beq.n	80101de <xTaskGenericNotify+0x92>
 80101da:	b672      	cpsid	i
 80101dc:	e7fe      	b.n	80101dc <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80101de:	4b08      	ldr	r3, [pc, #32]	; (8010200 <xTaskGenericNotify+0xb4>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80101e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e6:	2501      	movs	r5, #1
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d9d3      	bls.n	8010194 <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 80101ec:	f000 fa3c 	bl	8010668 <vPortYield>
 80101f0:	e7d0      	b.n	8010194 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 80101f2:	2500      	movs	r5, #0
 80101f4:	e7ce      	b.n	8010194 <xTaskGenericNotify+0x48>
 80101f6:	46c0      	nop			; (mov r8, r8)
 80101f8:	20001e60 	.word	0x20001e60
 80101fc:	20001dbc 	.word	0x20001dbc
 8010200:	20001db0 	.word	0x20001db0

08010204 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010204:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010206:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010208:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801020a:	4291      	cmp	r1, r2
 801020c:	d80b      	bhi.n	8010226 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 801020e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010210:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010212:	6983      	ldr	r3, [r0, #24]
 8010214:	429a      	cmp	r2, r3
 8010216:	d211      	bcs.n	801023c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010218:	1d01      	adds	r1, r0, #4
 801021a:	4b09      	ldr	r3, [pc, #36]	; (8010240 <prvInsertTimerInActiveList+0x3c>)
 801021c:	6818      	ldr	r0, [r3, #0]
 801021e:	f7fe fd63 	bl	800ece8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010222:	2400      	movs	r4, #0
 8010224:	e00a      	b.n	801023c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010226:	429a      	cmp	r2, r3
 8010228:	d202      	bcs.n	8010230 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801022a:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801022c:	4299      	cmp	r1, r3
 801022e:	d205      	bcs.n	801023c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010230:	1d01      	adds	r1, r0, #4
 8010232:	4b04      	ldr	r3, [pc, #16]	; (8010244 <prvInsertTimerInActiveList+0x40>)
 8010234:	6818      	ldr	r0, [r3, #0]
 8010236:	f7fe fd57 	bl	800ece8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801023a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 801023c:	0020      	movs	r0, r4
 801023e:	bd10      	pop	{r4, pc}
 8010240:	20001edc 	.word	0x20001edc
 8010244:	20001ed8 	.word	0x20001ed8

08010248 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010248:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801024a:	f000 fa19 	bl	8010680 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801024e:	4b11      	ldr	r3, [pc, #68]	; (8010294 <prvCheckForValidListAndQueue+0x4c>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d002      	beq.n	801025c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010256:	f000 fa1f 	bl	8010698 <vPortExitCritical>
}
 801025a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 801025c:	4d0e      	ldr	r5, [pc, #56]	; (8010298 <prvCheckForValidListAndQueue+0x50>)
 801025e:	0028      	movs	r0, r5
 8010260:	f7fe fd28 	bl	800ecb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010264:	4c0d      	ldr	r4, [pc, #52]	; (801029c <prvCheckForValidListAndQueue+0x54>)
 8010266:	0020      	movs	r0, r4
 8010268:	f7fe fd24 	bl	800ecb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801026c:	4b0c      	ldr	r3, [pc, #48]	; (80102a0 <prvCheckForValidListAndQueue+0x58>)
 801026e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010270:	4b0c      	ldr	r3, [pc, #48]	; (80102a4 <prvCheckForValidListAndQueue+0x5c>)
 8010272:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010274:	2200      	movs	r2, #0
 8010276:	2110      	movs	r1, #16
 8010278:	2004      	movs	r0, #4
 801027a:	f7fe fe26 	bl	800eeca <xQueueGenericCreate>
 801027e:	4b05      	ldr	r3, [pc, #20]	; (8010294 <prvCheckForValidListAndQueue+0x4c>)
 8010280:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 8010282:	2800      	cmp	r0, #0
 8010284:	d101      	bne.n	801028a <prvCheckForValidListAndQueue+0x42>
 8010286:	b672      	cpsid	i
 8010288:	e7fe      	b.n	8010288 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801028a:	4907      	ldr	r1, [pc, #28]	; (80102a8 <prvCheckForValidListAndQueue+0x60>)
 801028c:	f7ff f856 	bl	800f33c <vQueueAddToRegistry>
 8010290:	e7e1      	b.n	8010256 <prvCheckForValidListAndQueue+0xe>
 8010292:	46c0      	nop			; (mov r8, r8)
 8010294:	20001f0c 	.word	0x20001f0c
 8010298:	20001ee0 	.word	0x20001ee0
 801029c:	20001ef4 	.word	0x20001ef4
 80102a0:	20001ed8 	.word	0x20001ed8
 80102a4:	20001edc 	.word	0x20001edc
 80102a8:	0801ba7c 	.word	0x0801ba7c

080102ac <xTimerCreateTimerTask>:
{
 80102ac:	b500      	push	{lr}
 80102ae:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 80102b0:	f7ff ffca 	bl	8010248 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80102b4:	4b0a      	ldr	r3, [pc, #40]	; (80102e0 <xTimerCreateTimerTask+0x34>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d00d      	beq.n	80102d8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 80102bc:	2300      	movs	r3, #0
 80102be:	9303      	str	r3, [sp, #12]
 80102c0:	9302      	str	r3, [sp, #8]
 80102c2:	9301      	str	r3, [sp, #4]
 80102c4:	3303      	adds	r3, #3
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	2300      	movs	r3, #0
 80102ca:	22a0      	movs	r2, #160	; 0xa0
 80102cc:	4905      	ldr	r1, [pc, #20]	; (80102e4 <xTimerCreateTimerTask+0x38>)
 80102ce:	4806      	ldr	r0, [pc, #24]	; (80102e8 <xTimerCreateTimerTask+0x3c>)
 80102d0:	f7ff f918 	bl	800f504 <xTaskGenericCreate>
	configASSERT( xReturn );
 80102d4:	2800      	cmp	r0, #0
 80102d6:	d101      	bne.n	80102dc <xTimerCreateTimerTask+0x30>
 80102d8:	b672      	cpsid	i
 80102da:	e7fe      	b.n	80102da <xTimerCreateTimerTask+0x2e>
}
 80102dc:	b005      	add	sp, #20
 80102de:	bd00      	pop	{pc}
 80102e0:	20001f0c 	.word	0x20001f0c
 80102e4:	0801ba84 	.word	0x0801ba84
 80102e8:	08010435 	.word	0x08010435

080102ec <xTimerCreate>:
{
 80102ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ee:	46c6      	mov	lr, r8
 80102f0:	b500      	push	{lr}
 80102f2:	4680      	mov	r8, r0
 80102f4:	000d      	movs	r5, r1
 80102f6:	0017      	movs	r7, r2
 80102f8:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 80102fa:	2900      	cmp	r1, #0
 80102fc:	d014      	beq.n	8010328 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80102fe:	202c      	movs	r0, #44	; 0x2c
 8010300:	f000 fa40 	bl	8010784 <pvPortMalloc>
 8010304:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 8010306:	d00b      	beq.n	8010320 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 8010308:	f7ff ff9e 	bl	8010248 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 801030c:	4643      	mov	r3, r8
 801030e:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010310:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8010312:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8010314:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010316:	9b06      	ldr	r3, [sp, #24]
 8010318:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801031a:	1d20      	adds	r0, r4, #4
 801031c:	f7fe fcd5 	bl	800ecca <vListInitialiseItem>
}
 8010320:	0020      	movs	r0, r4
 8010322:	bc04      	pop	{r2}
 8010324:	4690      	mov	r8, r2
 8010326:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010328:	b672      	cpsid	i
 801032a:	e7fe      	b.n	801032a <xTimerCreate+0x3e>

0801032c <xTimerGenericCommand>:
{
 801032c:	b530      	push	{r4, r5, lr}
 801032e:	b085      	sub	sp, #20
 8010330:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 8010332:	4b13      	ldr	r3, [pc, #76]	; (8010380 <xTimerGenericCommand+0x54>)
 8010334:	681c      	ldr	r4, [r3, #0]
 8010336:	2c00      	cmp	r4, #0
 8010338:	d020      	beq.n	801037c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 801033a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801033c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801033e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010340:	2905      	cmp	r1, #5
 8010342:	dc13      	bgt.n	801036c <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010344:	f7ff fd68 	bl	800fe18 <xTaskGetSchedulerState>
 8010348:	2802      	cmp	r0, #2
 801034a:	d007      	beq.n	801035c <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801034c:	4b0c      	ldr	r3, [pc, #48]	; (8010380 <xTimerGenericCommand+0x54>)
 801034e:	6818      	ldr	r0, [r3, #0]
 8010350:	2300      	movs	r3, #0
 8010352:	2200      	movs	r2, #0
 8010354:	4669      	mov	r1, sp
 8010356:	f7fe fdf3 	bl	800ef40 <xQueueGenericSend>
 801035a:	e00d      	b.n	8010378 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801035c:	4b08      	ldr	r3, [pc, #32]	; (8010380 <xTimerGenericCommand+0x54>)
 801035e:	6818      	ldr	r0, [r3, #0]
 8010360:	2300      	movs	r3, #0
 8010362:	9a08      	ldr	r2, [sp, #32]
 8010364:	4669      	mov	r1, sp
 8010366:	f7fe fdeb 	bl	800ef40 <xQueueGenericSend>
 801036a:	e005      	b.n	8010378 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801036c:	2300      	movs	r3, #0
 801036e:	002a      	movs	r2, r5
 8010370:	4669      	mov	r1, sp
 8010372:	0020      	movs	r0, r4
 8010374:	f7fe fe7b 	bl	800f06e <xQueueGenericSendFromISR>
}
 8010378:	b005      	add	sp, #20
 801037a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 801037c:	2000      	movs	r0, #0
	return xReturn;
 801037e:	e7fb      	b.n	8010378 <xTimerGenericCommand+0x4c>
 8010380:	20001f0c 	.word	0x20001f0c

08010384 <prvSampleTimeNow>:
{
 8010384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010386:	46d6      	mov	lr, sl
 8010388:	464f      	mov	r7, r9
 801038a:	4646      	mov	r6, r8
 801038c:	b5c0      	push	{r6, r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 8010392:	f7ff fa43 	bl	800f81c <xTaskGetTickCount>
 8010396:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 8010398:	4b23      	ldr	r3, [pc, #140]	; (8010428 <prvSampleTimeNow+0xa4>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4283      	cmp	r3, r0
 801039e:	d80b      	bhi.n	80103b8 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 80103a0:	2300      	movs	r3, #0
 80103a2:	4642      	mov	r2, r8
 80103a4:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 80103a6:	4b20      	ldr	r3, [pc, #128]	; (8010428 <prvSampleTimeNow+0xa4>)
 80103a8:	601f      	str	r7, [r3, #0]
}
 80103aa:	0038      	movs	r0, r7
 80103ac:	b004      	add	sp, #16
 80103ae:	bc1c      	pop	{r2, r3, r4}
 80103b0:	4690      	mov	r8, r2
 80103b2:	4699      	mov	r9, r3
 80103b4:	46a2      	mov	sl, r4
 80103b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80103b8:	4e1c      	ldr	r6, [pc, #112]	; (801042c <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103ba:	2300      	movs	r3, #0
 80103bc:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80103be:	6833      	ldr	r3, [r6, #0]
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	2a00      	cmp	r2, #0
 80103c4:	d026      	beq.n	8010414 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103cc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103ce:	1d25      	adds	r5, r4, #4
 80103d0:	0028      	movs	r0, r5
 80103d2:	f7fe fca0 	bl	800ed16 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80103d6:	0020      	movs	r0, r4
 80103d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103da:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80103dc:	69e3      	ldr	r3, [r4, #28]
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d1ed      	bne.n	80103be <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80103e2:	69a3      	ldr	r3, [r4, #24]
 80103e4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80103e6:	459a      	cmp	sl, r3
 80103e8:	d209      	bcs.n	80103fe <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80103ea:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80103ec:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103ee:	4b0f      	ldr	r3, [pc, #60]	; (801042c <prvSampleTimeNow+0xa8>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	9303      	str	r3, [sp, #12]
 80103f4:	0029      	movs	r1, r5
 80103f6:	0018      	movs	r0, r3
 80103f8:	f7fe fc76 	bl	800ece8 <vListInsert>
 80103fc:	e7df      	b.n	80103be <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103fe:	464b      	mov	r3, r9
 8010400:	9300      	str	r3, [sp, #0]
 8010402:	4652      	mov	r2, sl
 8010404:	4649      	mov	r1, r9
 8010406:	0020      	movs	r0, r4
 8010408:	f7ff ff90 	bl	801032c <xTimerGenericCommand>
				configASSERT( xResult );
 801040c:	2800      	cmp	r0, #0
 801040e:	d1d6      	bne.n	80103be <prvSampleTimeNow+0x3a>
 8010410:	b672      	cpsid	i
 8010412:	e7fe      	b.n	8010412 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 8010414:	4a06      	ldr	r2, [pc, #24]	; (8010430 <prvSampleTimeNow+0xac>)
 8010416:	4905      	ldr	r1, [pc, #20]	; (801042c <prvSampleTimeNow+0xa8>)
 8010418:	6810      	ldr	r0, [r2, #0]
 801041a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801041c:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 801041e:	2301      	movs	r3, #1
 8010420:	4642      	mov	r2, r8
 8010422:	6013      	str	r3, [r2, #0]
 8010424:	e7bf      	b.n	80103a6 <prvSampleTimeNow+0x22>
 8010426:	46c0      	nop			; (mov r8, r8)
 8010428:	20001f08 	.word	0x20001f08
 801042c:	20001ed8 	.word	0x20001ed8
 8010430:	20001edc 	.word	0x20001edc

08010434 <prvTimerTask>:
{
 8010434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010436:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 8010438:	4e57      	ldr	r6, [pc, #348]	; (8010598 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801043a:	4b58      	ldr	r3, [pc, #352]	; (801059c <prvTimerTask+0x168>)
 801043c:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	2a00      	cmp	r2, #0
 8010442:	d100      	bne.n	8010446 <prvTimerTask+0x12>
 8010444:	e09c      	b.n	8010580 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 801044a:	f7ff f9df 	bl	800f80c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801044e:	a808      	add	r0, sp, #32
 8010450:	f7ff ff98 	bl	8010384 <prvSampleTimeNow>
 8010454:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010456:	9b08      	ldr	r3, [sp, #32]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d000      	beq.n	801045e <prvTimerTask+0x2a>
 801045c:	e099      	b.n	8010592 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801045e:	42a0      	cmp	r0, r4
 8010460:	d233      	bcs.n	80104ca <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8010462:	1b61      	subs	r1, r4, r5
 8010464:	4b4e      	ldr	r3, [pc, #312]	; (80105a0 <prvTimerTask+0x16c>)
 8010466:	6818      	ldr	r0, [r3, #0]
 8010468:	f7fe ff80 	bl	800f36c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801046c:	f7ff fa6e 	bl	800f94c <xTaskResumeAll>
 8010470:	2800      	cmp	r0, #0
 8010472:	d050      	beq.n	8010516 <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010474:	4c4a      	ldr	r4, [pc, #296]	; (80105a0 <prvTimerTask+0x16c>)
 8010476:	2300      	movs	r3, #0
 8010478:	2200      	movs	r2, #0
 801047a:	a908      	add	r1, sp, #32
 801047c:	6820      	ldr	r0, [r4, #0]
 801047e:	f7fe fe78 	bl	800f172 <xQueueGenericReceive>
 8010482:	2800      	cmp	r0, #0
 8010484:	d0d9      	beq.n	801043a <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010486:	9b08      	ldr	r3, [sp, #32]
 8010488:	9303      	str	r3, [sp, #12]
 801048a:	2b00      	cmp	r3, #0
 801048c:	da0c      	bge.n	80104a8 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801048e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010490:	9303      	str	r3, [sp, #12]
 8010492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010494:	9304      	str	r3, [sp, #16]
 8010496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010498:	9305      	str	r3, [sp, #20]
 801049a:	9903      	ldr	r1, [sp, #12]
 801049c:	9804      	ldr	r0, [sp, #16]
 801049e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80104a0:	9b08      	ldr	r3, [sp, #32]
 80104a2:	9303      	str	r3, [sp, #12]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	dbe6      	blt.n	8010476 <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80104a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80104aa:	696b      	ldr	r3, [r5, #20]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d002      	beq.n	80104b6 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80104b0:	1d28      	adds	r0, r5, #4
 80104b2:	f7fe fc30 	bl	800ed16 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104b6:	a807      	add	r0, sp, #28
 80104b8:	f7ff ff64 	bl	8010384 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80104bc:	9b08      	ldr	r3, [sp, #32]
 80104be:	9303      	str	r3, [sp, #12]
 80104c0:	2b09      	cmp	r3, #9
 80104c2:	d8d8      	bhi.n	8010476 <prvTimerTask+0x42>
 80104c4:	009b      	lsls	r3, r3, #2
 80104c6:	58f3      	ldr	r3, [r6, r3]
 80104c8:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 80104ca:	f7ff fa3f 	bl	800f94c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80104ce:	4b33      	ldr	r3, [pc, #204]	; (801059c <prvTimerTask+0x168>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80104d6:	1d38      	adds	r0, r7, #4
 80104d8:	f7fe fc1d 	bl	800ed16 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d003      	beq.n	80104ea <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80104e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e4:	0038      	movs	r0, r7
 80104e6:	4798      	blx	r3
 80104e8:	e7c4      	b.n	8010474 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	18e1      	adds	r1, r4, r3
 80104ee:	0023      	movs	r3, r4
 80104f0:	002a      	movs	r2, r5
 80104f2:	0038      	movs	r0, r7
 80104f4:	f7ff fe86 	bl	8010204 <prvInsertTimerInActiveList>
 80104f8:	2801      	cmp	r0, #1
 80104fa:	d1f2      	bne.n	80104e2 <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80104fc:	2100      	movs	r1, #0
 80104fe:	9100      	str	r1, [sp, #0]
 8010500:	000b      	movs	r3, r1
 8010502:	0022      	movs	r2, r4
 8010504:	0038      	movs	r0, r7
 8010506:	f7ff ff11 	bl	801032c <xTimerGenericCommand>
			configASSERT( xResult );
 801050a:	2800      	cmp	r0, #0
 801050c:	d1e9      	bne.n	80104e2 <prvTimerTask+0xae>
 801050e:	b672      	cpsid	i
 8010510:	e7fe      	b.n	8010510 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 8010512:	2400      	movs	r4, #0
 8010514:	e7a5      	b.n	8010462 <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 8010516:	f000 f8a7 	bl	8010668 <vPortYield>
 801051a:	e7ab      	b.n	8010474 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 801051c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801051e:	69aa      	ldr	r2, [r5, #24]
 8010520:	4694      	mov	ip, r2
 8010522:	4463      	add	r3, ip
 8010524:	0019      	movs	r1, r3
 8010526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010528:	0002      	movs	r2, r0
 801052a:	0028      	movs	r0, r5
 801052c:	f7ff fe6a 	bl	8010204 <prvInsertTimerInActiveList>
 8010530:	2801      	cmp	r0, #1
 8010532:	d1a0      	bne.n	8010476 <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010534:	0028      	movs	r0, r5
 8010536:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010538:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801053a:	69eb      	ldr	r3, [r5, #28]
 801053c:	2b01      	cmp	r3, #1
 801053e:	d19a      	bne.n	8010476 <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010542:	69a9      	ldr	r1, [r5, #24]
 8010544:	468c      	mov	ip, r1
 8010546:	4463      	add	r3, ip
 8010548:	001a      	movs	r2, r3
 801054a:	2300      	movs	r3, #0
 801054c:	9300      	str	r3, [sp, #0]
 801054e:	2100      	movs	r1, #0
 8010550:	0028      	movs	r0, r5
 8010552:	f7ff feeb 	bl	801032c <xTimerGenericCommand>
							configASSERT( xResult );
 8010556:	2800      	cmp	r0, #0
 8010558:	d18d      	bne.n	8010476 <prvTimerTask+0x42>
 801055a:	b672      	cpsid	i
 801055c:	e7fe      	b.n	801055c <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801055e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010560:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010562:	2900      	cmp	r1, #0
 8010564:	d006      	beq.n	8010574 <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010566:	1841      	adds	r1, r0, r1
 8010568:	0003      	movs	r3, r0
 801056a:	0002      	movs	r2, r0
 801056c:	0028      	movs	r0, r5
 801056e:	f7ff fe49 	bl	8010204 <prvInsertTimerInActiveList>
 8010572:	e780      	b.n	8010476 <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010574:	b672      	cpsid	i
 8010576:	e7fe      	b.n	8010576 <prvTimerTask+0x142>
					vPortFree( pxTimer );
 8010578:	0028      	movs	r0, r5
 801057a:	f000 f999 	bl	80108b0 <vPortFree>
 801057e:	e77a      	b.n	8010476 <prvTimerTask+0x42>
	vTaskSuspendAll();
 8010580:	f7ff f944 	bl	800f80c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010584:	a808      	add	r0, sp, #32
 8010586:	f7ff fefd 	bl	8010384 <prvSampleTimeNow>
 801058a:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 801058c:	9b08      	ldr	r3, [sp, #32]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d0bf      	beq.n	8010512 <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 8010592:	f7ff f9db 	bl	800f94c <xTaskResumeAll>
 8010596:	e76d      	b.n	8010474 <prvTimerTask+0x40>
 8010598:	0801ba54 	.word	0x0801ba54
 801059c:	20001ed8 	.word	0x20001ed8
 80105a0:	20001f0c 	.word	0x20001f0c

080105a4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80105a4:	b510      	push	{r4, lr}
 80105a6:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 80105a8:	d101      	bne.n	80105ae <pvTimerGetTimerID+0xa>
 80105aa:	b672      	cpsid	i
 80105ac:	e7fe      	b.n	80105ac <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 80105ae:	f000 f867 	bl	8010680 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80105b2:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 80105b4:	f000 f870 	bl	8010698 <vPortExitCritical>

	return pvReturn;
}
 80105b8:	0020      	movs	r0, r4
 80105ba:	bd10      	pop	{r4, pc}

080105bc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80105bc:	4b03      	ldr	r3, [pc, #12]	; (80105cc <prvTaskExitError+0x10>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	3301      	adds	r3, #1
 80105c2:	d001      	beq.n	80105c8 <prvTaskExitError+0xc>
 80105c4:	b672      	cpsid	i
 80105c6:	e7fe      	b.n	80105c6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 80105c8:	b672      	cpsid	i
 80105ca:	e7fe      	b.n	80105ca <prvTaskExitError+0xe>
 80105cc:	20000134 	.word	0x20000134

080105d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80105d0:	4a06      	ldr	r2, [pc, #24]	; (80105ec <pxCurrentTCBConst2>)
 80105d2:	6813      	ldr	r3, [r2, #0]
 80105d4:	6818      	ldr	r0, [r3, #0]
 80105d6:	3020      	adds	r0, #32
 80105d8:	f380 8809 	msr	PSP, r0
 80105dc:	2002      	movs	r0, #2
 80105de:	f380 8814 	msr	CONTROL, r0
 80105e2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80105e4:	46ae      	mov	lr, r5
 80105e6:	b662      	cpsie	i
 80105e8:	bd00      	pop	{pc}
 80105ea:	46c0      	nop			; (mov r8, r8)

080105ec <pxCurrentTCBConst2>:
 80105ec:	20001db0 	.word	0x20001db0

080105f0 <pxPortInitialiseStack>:
{
 80105f0:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80105f2:	1f03      	subs	r3, r0, #4
 80105f4:	2480      	movs	r4, #128	; 0x80
 80105f6:	0464      	lsls	r4, r4, #17
 80105f8:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80105fa:	3b04      	subs	r3, #4
 80105fc:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80105fe:	3b04      	subs	r3, #4
 8010600:	4902      	ldr	r1, [pc, #8]	; (801060c <pxPortInitialiseStack+0x1c>)
 8010602:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010604:	3b14      	subs	r3, #20
 8010606:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010608:	3840      	subs	r0, #64	; 0x40
}
 801060a:	bd10      	pop	{r4, pc}
 801060c:	080105bd 	.word	0x080105bd

08010610 <SVC_Handler>:
}
 8010610:	4770      	bx	lr
	...

08010614 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010614:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010616:	4b0f      	ldr	r3, [pc, #60]	; (8010654 <xPortStartScheduler+0x40>)
 8010618:	6819      	ldr	r1, [r3, #0]
 801061a:	22ff      	movs	r2, #255	; 0xff
 801061c:	0412      	lsls	r2, r2, #16
 801061e:	430a      	orrs	r2, r1
 8010620:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8010622:	6819      	ldr	r1, [r3, #0]
 8010624:	22ff      	movs	r2, #255	; 0xff
 8010626:	0612      	lsls	r2, r2, #24
 8010628:	430a      	orrs	r2, r1
 801062a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801062c:	4b0a      	ldr	r3, [pc, #40]	; (8010658 <xPortStartScheduler+0x44>)
 801062e:	6818      	ldr	r0, [r3, #0]
 8010630:	21fa      	movs	r1, #250	; 0xfa
 8010632:	0089      	lsls	r1, r1, #2
 8010634:	f7ef fd8c 	bl	8000150 <__udivsi3>
 8010638:	3801      	subs	r0, #1
 801063a:	4b08      	ldr	r3, [pc, #32]	; (801065c <xPortStartScheduler+0x48>)
 801063c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801063e:	4b08      	ldr	r3, [pc, #32]	; (8010660 <xPortStartScheduler+0x4c>)
 8010640:	2207      	movs	r2, #7
 8010642:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8010644:	4b07      	ldr	r3, [pc, #28]	; (8010664 <xPortStartScheduler+0x50>)
 8010646:	2200      	movs	r2, #0
 8010648:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 801064a:	f7ff ffc1 	bl	80105d0 <vPortStartFirstTask>
	prvTaskExitError();
 801064e:	f7ff ffb5 	bl	80105bc <prvTaskExitError>
 8010652:	46c0      	nop			; (mov r8, r8)
 8010654:	e000ed20 	.word	0xe000ed20
 8010658:	20000120 	.word	0x20000120
 801065c:	e000e014 	.word	0xe000e014
 8010660:	e000e010 	.word	0xe000e010
 8010664:	20000134 	.word	0x20000134

08010668 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010668:	4b04      	ldr	r3, [pc, #16]	; (801067c <vPortYield+0x14>)
 801066a:	2280      	movs	r2, #128	; 0x80
 801066c:	0552      	lsls	r2, r2, #21
 801066e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010670:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010674:	f3bf 8f6f 	isb	sy
}
 8010678:	4770      	bx	lr
 801067a:	46c0      	nop			; (mov r8, r8)
 801067c:	e000ed04 	.word	0xe000ed04

08010680 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010680:	b672      	cpsid	i
    uxCriticalNesting++;
 8010682:	4a04      	ldr	r2, [pc, #16]	; (8010694 <vPortEnterCritical+0x14>)
 8010684:	6813      	ldr	r3, [r2, #0]
 8010686:	3301      	adds	r3, #1
 8010688:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 801068a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801068e:	f3bf 8f6f 	isb	sy
}
 8010692:	4770      	bx	lr
 8010694:	20000134 	.word	0x20000134

08010698 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010698:	4b06      	ldr	r3, [pc, #24]	; (80106b4 <vPortExitCritical+0x1c>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d101      	bne.n	80106a4 <vPortExitCritical+0xc>
 80106a0:	b672      	cpsid	i
 80106a2:	e7fe      	b.n	80106a2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80106a4:	3b01      	subs	r3, #1
 80106a6:	4a03      	ldr	r2, [pc, #12]	; (80106b4 <vPortExitCritical+0x1c>)
 80106a8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d100      	bne.n	80106b0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 80106ae:	b662      	cpsie	i
}
 80106b0:	4770      	bx	lr
 80106b2:	46c0      	nop			; (mov r8, r8)
 80106b4:	20000134 	.word	0x20000134

080106b8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80106b8:	f3ef 8010 	mrs	r0, PRIMASK
 80106bc:	b672      	cpsid	i
 80106be:	4770      	bx	lr
}
 80106c0:	2000      	movs	r0, #0

080106c2 <vClearInterruptMaskFromISR>:
	__asm volatile(
 80106c2:	f380 8810 	msr	PRIMASK, r0
 80106c6:	4770      	bx	lr

080106c8 <PendSV_Handler>:
	__asm volatile
 80106c8:	f3ef 8009 	mrs	r0, PSP
 80106cc:	4b0e      	ldr	r3, [pc, #56]	; (8010708 <pxCurrentTCBConst>)
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	3820      	subs	r0, #32
 80106d2:	6010      	str	r0, [r2, #0]
 80106d4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80106d6:	4644      	mov	r4, r8
 80106d8:	464d      	mov	r5, r9
 80106da:	4656      	mov	r6, sl
 80106dc:	465f      	mov	r7, fp
 80106de:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80106e0:	b508      	push	{r3, lr}
 80106e2:	b672      	cpsid	i
 80106e4:	f7ff fa4e 	bl	800fb84 <vTaskSwitchContext>
 80106e8:	b662      	cpsie	i
 80106ea:	bc0c      	pop	{r2, r3}
 80106ec:	6811      	ldr	r1, [r2, #0]
 80106ee:	6808      	ldr	r0, [r1, #0]
 80106f0:	3010      	adds	r0, #16
 80106f2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80106f4:	46a0      	mov	r8, r4
 80106f6:	46a9      	mov	r9, r5
 80106f8:	46b2      	mov	sl, r6
 80106fa:	46bb      	mov	fp, r7
 80106fc:	f380 8809 	msr	PSP, r0
 8010700:	3820      	subs	r0, #32
 8010702:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010704:	4718      	bx	r3
 8010706:	46c0      	nop			; (mov r8, r8)

08010708 <pxCurrentTCBConst>:
 8010708:	20001db0 	.word	0x20001db0

0801070c <xPortSysTickHandler>:
{
 801070c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801070e:	f7ff ffd3 	bl	80106b8 <ulSetInterruptMaskFromISR>
 8010712:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8010714:	f7ff f88e 	bl	800f834 <xTaskIncrementTick>
 8010718:	2800      	cmp	r0, #0
 801071a:	d003      	beq.n	8010724 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801071c:	4b03      	ldr	r3, [pc, #12]	; (801072c <xPortSysTickHandler+0x20>)
 801071e:	2280      	movs	r2, #128	; 0x80
 8010720:	0552      	lsls	r2, r2, #21
 8010722:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010724:	0020      	movs	r0, r4
 8010726:	f7ff ffcc 	bl	80106c2 <vClearInterruptMaskFromISR>
}
 801072a:	bd10      	pop	{r4, pc}
 801072c:	e000ed04 	.word	0xe000ed04

08010730 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010730:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010732:	4b12      	ldr	r3, [pc, #72]	; (801077c <prvInsertBlockIntoFreeList+0x4c>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	4282      	cmp	r2, r0
 8010738:	d319      	bcc.n	801076e <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801073a:	685c      	ldr	r4, [r3, #4]
 801073c:	1919      	adds	r1, r3, r4
 801073e:	4288      	cmp	r0, r1
 8010740:	d103      	bne.n	801074a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010742:	6841      	ldr	r1, [r0, #4]
 8010744:	1909      	adds	r1, r1, r4
 8010746:	6059      	str	r1, [r3, #4]
 8010748:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801074a:	6841      	ldr	r1, [r0, #4]
 801074c:	1844      	adds	r4, r0, r1
 801074e:	42a2      	cmp	r2, r4
 8010750:	d111      	bne.n	8010776 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010752:	4c0b      	ldr	r4, [pc, #44]	; (8010780 <prvInsertBlockIntoFreeList+0x50>)
 8010754:	6824      	ldr	r4, [r4, #0]
 8010756:	42a2      	cmp	r2, r4
 8010758:	d00b      	beq.n	8010772 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801075a:	6852      	ldr	r2, [r2, #4]
 801075c:	1852      	adds	r2, r2, r1
 801075e:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	6812      	ldr	r2, [r2, #0]
 8010764:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010766:	4298      	cmp	r0, r3
 8010768:	d000      	beq.n	801076c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801076a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801076c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801076e:	0013      	movs	r3, r2
 8010770:	e7e0      	b.n	8010734 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010772:	6002      	str	r2, [r0, #0]
 8010774:	e7f7      	b.n	8010766 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010776:	6002      	str	r2, [r0, #0]
 8010778:	e7f5      	b.n	8010766 <prvInsertBlockIntoFreeList+0x36>
 801077a:	46c0      	nop			; (mov r8, r8)
 801077c:	20006958 	.word	0x20006958
 8010780:	20001f10 	.word	0x20001f10

08010784 <pvPortMalloc>:
{
 8010784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010786:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010788:	f7ff f840 	bl	800f80c <vTaskSuspendAll>
		if( pxEnd == NULL )
 801078c:	4b41      	ldr	r3, [pc, #260]	; (8010894 <pvPortMalloc+0x110>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d00a      	beq.n	80107aa <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010794:	4b40      	ldr	r3, [pc, #256]	; (8010898 <pvPortMalloc+0x114>)
 8010796:	681f      	ldr	r7, [r3, #0]
 8010798:	423c      	tst	r4, r7
 801079a:	d02a      	beq.n	80107f2 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 801079c:	f7ff f8d6 	bl	800f94c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80107a0:	f7fc fff0 	bl	800d784 <vApplicationMallocFailedHook>
 80107a4:	2500      	movs	r5, #0
}
 80107a6:	0028      	movs	r0, r5
 80107a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 80107aa:	4a3c      	ldr	r2, [pc, #240]	; (801089c <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80107ac:	0753      	lsls	r3, r2, #29
 80107ae:	d01e      	beq.n	80107ee <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 80107b0:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80107b2:	2307      	movs	r3, #7
 80107b4:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80107b6:	4b3a      	ldr	r3, [pc, #232]	; (80108a0 <pvPortMalloc+0x11c>)
 80107b8:	18d3      	adds	r3, r2, r3
 80107ba:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80107bc:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80107be:	4839      	ldr	r0, [pc, #228]	; (80108a4 <pvPortMalloc+0x120>)
 80107c0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80107c2:	2100      	movs	r1, #0
 80107c4:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107c6:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 80107c8:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80107ca:	2007      	movs	r0, #7
 80107cc:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 80107ce:	4831      	ldr	r0, [pc, #196]	; (8010894 <pvPortMalloc+0x110>)
 80107d0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80107d2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107d4:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80107d6:	1a99      	subs	r1, r3, r2
 80107d8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80107da:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107dc:	4b32      	ldr	r3, [pc, #200]	; (80108a8 <pvPortMalloc+0x124>)
 80107de:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107e0:	4b32      	ldr	r3, [pc, #200]	; (80108ac <pvPortMalloc+0x128>)
 80107e2:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80107e4:	4b2c      	ldr	r3, [pc, #176]	; (8010898 <pvPortMalloc+0x114>)
 80107e6:	2280      	movs	r2, #128	; 0x80
 80107e8:	0612      	lsls	r2, r2, #24
 80107ea:	601a      	str	r2, [r3, #0]
 80107ec:	e7d2      	b.n	8010794 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80107ee:	4b2c      	ldr	r3, [pc, #176]	; (80108a0 <pvPortMalloc+0x11c>)
 80107f0:	e7e5      	b.n	80107be <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 80107f2:	2c00      	cmp	r4, #0
 80107f4:	d008      	beq.n	8010808 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 80107f6:	0023      	movs	r3, r4
 80107f8:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80107fa:	075a      	lsls	r2, r3, #29
 80107fc:	d002      	beq.n	8010804 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80107fe:	2207      	movs	r2, #7
 8010800:	4393      	bics	r3, r2
 8010802:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010804:	2b00      	cmp	r3, #0
 8010806:	d102      	bne.n	801080e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 8010808:	f7ff f8a0 	bl	800f94c <xTaskResumeAll>
 801080c:	e7c8      	b.n	80107a0 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801080e:	4a27      	ldr	r2, [pc, #156]	; (80108ac <pvPortMalloc+0x128>)
 8010810:	6816      	ldr	r6, [r2, #0]
 8010812:	429e      	cmp	r6, r3
 8010814:	d302      	bcc.n	801081c <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 8010816:	4a23      	ldr	r2, [pc, #140]	; (80108a4 <pvPortMalloc+0x120>)
 8010818:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801081a:	e004      	b.n	8010826 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 801081c:	f7ff f896 	bl	800f94c <xTaskResumeAll>
 8010820:	e7be      	b.n	80107a0 <pvPortMalloc+0x1c>
 8010822:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8010824:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010826:	6861      	ldr	r1, [r4, #4]
 8010828:	4299      	cmp	r1, r3
 801082a:	d202      	bcs.n	8010832 <pvPortMalloc+0xae>
 801082c:	6821      	ldr	r1, [r4, #0]
 801082e:	2900      	cmp	r1, #0
 8010830:	d1f7      	bne.n	8010822 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 8010832:	4918      	ldr	r1, [pc, #96]	; (8010894 <pvPortMalloc+0x110>)
 8010834:	6809      	ldr	r1, [r1, #0]
 8010836:	42a1      	cmp	r1, r4
 8010838:	d00b      	beq.n	8010852 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801083a:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801083c:	6821      	ldr	r1, [r4, #0]
 801083e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010840:	6862      	ldr	r2, [r4, #4]
 8010842:	1ad2      	subs	r2, r2, r3
 8010844:	2a10      	cmp	r2, #16
 8010846:	d90b      	bls.n	8010860 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010848:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801084a:	0741      	lsls	r1, r0, #29
 801084c:	d004      	beq.n	8010858 <pvPortMalloc+0xd4>
 801084e:	b672      	cpsid	i
 8010850:	e7fe      	b.n	8010850 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 8010852:	f7ff f87b 	bl	800f94c <xTaskResumeAll>
 8010856:	e7a3      	b.n	80107a0 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010858:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801085a:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 801085c:	f7ff ff68 	bl	8010730 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010860:	6862      	ldr	r2, [r4, #4]
 8010862:	1ab6      	subs	r6, r6, r2
 8010864:	4911      	ldr	r1, [pc, #68]	; (80108ac <pvPortMalloc+0x128>)
 8010866:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010868:	490f      	ldr	r1, [pc, #60]	; (80108a8 <pvPortMalloc+0x124>)
 801086a:	6809      	ldr	r1, [r1, #0]
 801086c:	428e      	cmp	r6, r1
 801086e:	d201      	bcs.n	8010874 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010870:	490d      	ldr	r1, [pc, #52]	; (80108a8 <pvPortMalloc+0x124>)
 8010872:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010874:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010876:	4317      	orrs	r7, r2
 8010878:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801087a:	2300      	movs	r3, #0
 801087c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 801087e:	f7ff f865 	bl	800f94c <xTaskResumeAll>
		if( pvReturn == NULL )
 8010882:	2d00      	cmp	r5, #0
 8010884:	d100      	bne.n	8010888 <pvPortMalloc+0x104>
 8010886:	e78b      	b.n	80107a0 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010888:	076b      	lsls	r3, r5, #29
 801088a:	d100      	bne.n	801088e <pvPortMalloc+0x10a>
 801088c:	e78b      	b.n	80107a6 <pvPortMalloc+0x22>
 801088e:	b672      	cpsid	i
 8010890:	e7fe      	b.n	8010890 <pvPortMalloc+0x10c>
 8010892:	46c0      	nop			; (mov r8, r8)
 8010894:	20001f10 	.word	0x20001f10
 8010898:	2000694c 	.word	0x2000694c
 801089c:	20001f14 	.word	0x20001f14
 80108a0:	00004a38 	.word	0x00004a38
 80108a4:	20006958 	.word	0x20006958
 80108a8:	20006954 	.word	0x20006954
 80108ac:	20006950 	.word	0x20006950

080108b0 <vPortFree>:
{
 80108b0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80108b2:	2800      	cmp	r0, #0
 80108b4:	d020      	beq.n	80108f8 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80108b6:	0003      	movs	r3, r0
 80108b8:	3b08      	subs	r3, #8
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	4a0f      	ldr	r2, [pc, #60]	; (80108fc <vPortFree+0x4c>)
 80108be:	6812      	ldr	r2, [r2, #0]
 80108c0:	421a      	tst	r2, r3
 80108c2:	d101      	bne.n	80108c8 <vPortFree+0x18>
 80108c4:	b672      	cpsid	i
 80108c6:	e7fe      	b.n	80108c6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80108c8:	0001      	movs	r1, r0
 80108ca:	3908      	subs	r1, #8
 80108cc:	6809      	ldr	r1, [r1, #0]
 80108ce:	2900      	cmp	r1, #0
 80108d0:	d001      	beq.n	80108d6 <vPortFree+0x26>
 80108d2:	b672      	cpsid	i
 80108d4:	e7fe      	b.n	80108d4 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80108d6:	3808      	subs	r0, #8
 80108d8:	0004      	movs	r4, r0
 80108da:	4393      	bics	r3, r2
 80108dc:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80108de:	f7fe ff95 	bl	800f80c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80108e2:	4a07      	ldr	r2, [pc, #28]	; (8010900 <vPortFree+0x50>)
 80108e4:	6863      	ldr	r3, [r4, #4]
 80108e6:	6811      	ldr	r1, [r2, #0]
 80108e8:	468c      	mov	ip, r1
 80108ea:	4463      	add	r3, ip
 80108ec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80108ee:	0020      	movs	r0, r4
 80108f0:	f7ff ff1e 	bl	8010730 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80108f4:	f7ff f82a 	bl	800f94c <xTaskResumeAll>
}
 80108f8:	bd10      	pop	{r4, pc}
 80108fa:	46c0      	nop			; (mov r8, r8)
 80108fc:	2000694c 	.word	0x2000694c
 8010900:	20006950 	.word	0x20006950

08010904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010904:	b510      	push	{r4, lr}
 8010906:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8010908:	f002 f926 	bl	8012b58 <HAL_RCC_GetHCLKFreq>
 801090c:	21fa      	movs	r1, #250	; 0xfa
 801090e:	0089      	lsls	r1, r1, #2
 8010910:	f7ef fc1e 	bl	8000150 <__udivsi3>
 8010914:	f000 f88a 	bl	8010a2c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8010918:	2001      	movs	r0, #1
 801091a:	2200      	movs	r2, #0
 801091c:	0021      	movs	r1, r4
 801091e:	4240      	negs	r0, r0
 8010920:	f000 f83c 	bl	801099c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8010924:	2000      	movs	r0, #0
 8010926:	bd10      	pop	{r4, pc}

08010928 <HAL_Init>:
{
 8010928:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801092a:	4a06      	ldr	r2, [pc, #24]	; (8010944 <HAL_Init+0x1c>)
 801092c:	6813      	ldr	r3, [r2, #0]
 801092e:	2110      	movs	r1, #16
 8010930:	430b      	orrs	r3, r1
 8010932:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010934:	2000      	movs	r0, #0
 8010936:	f7ff ffe5 	bl	8010904 <HAL_InitTick>
  HAL_MspInit();
 801093a:	f001 fcb5 	bl	80122a8 <HAL_MspInit>
}
 801093e:	2000      	movs	r0, #0
 8010940:	bd10      	pop	{r4, pc}
 8010942:	46c0      	nop			; (mov r8, r8)
 8010944:	40022000 	.word	0x40022000

08010948 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010948:	4a02      	ldr	r2, [pc, #8]	; (8010954 <HAL_IncTick+0xc>)
 801094a:	6813      	ldr	r3, [r2, #0]
 801094c:	3301      	adds	r3, #1
 801094e:	6013      	str	r3, [r2, #0]
}
 8010950:	4770      	bx	lr
 8010952:	46c0      	nop			; (mov r8, r8)
 8010954:	20006960 	.word	0x20006960

08010958 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010958:	4b01      	ldr	r3, [pc, #4]	; (8010960 <HAL_GetTick+0x8>)
 801095a:	6818      	ldr	r0, [r3, #0]
}
 801095c:	4770      	bx	lr
 801095e:	46c0      	nop			; (mov r8, r8)
 8010960:	20006960 	.word	0x20006960

08010964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010964:	b510      	push	{r4, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 801096a:	f7ff fff5 	bl	8010958 <HAL_GetTick>
 801096e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010970:	f7ff fff2 	bl	8010958 <HAL_GetTick>
 8010974:	9b01      	ldr	r3, [sp, #4]
 8010976:	1b00      	subs	r0, r0, r4
 8010978:	4298      	cmp	r0, r3
 801097a:	d3f9      	bcc.n	8010970 <HAL_Delay+0xc>
  {
  }
}
 801097c:	b002      	add	sp, #8
 801097e:	bd10      	pop	{r4, pc}

08010980 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010980:	4b01      	ldr	r3, [pc, #4]	; (8010988 <HAL_GetREVID+0x8>)
 8010982:	6818      	ldr	r0, [r3, #0]
 8010984:	0c00      	lsrs	r0, r0, #16
}
 8010986:	4770      	bx	lr
 8010988:	40015800 	.word	0x40015800

0801098c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 801098c:	4b02      	ldr	r3, [pc, #8]	; (8010998 <HAL_GetDEVID+0xc>)
 801098e:	6818      	ldr	r0, [r3, #0]
 8010990:	0500      	lsls	r0, r0, #20
 8010992:	0d00      	lsrs	r0, r0, #20
}
 8010994:	4770      	bx	lr
 8010996:	46c0      	nop			; (mov r8, r8)
 8010998:	40015800 	.word	0x40015800

0801099c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801099c:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 801099e:	2800      	cmp	r0, #0
 80109a0:	db14      	blt.n	80109cc <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80109a2:	0883      	lsrs	r3, r0, #2
 80109a4:	009b      	lsls	r3, r3, #2
 80109a6:	4a15      	ldr	r2, [pc, #84]	; (80109fc <HAL_NVIC_SetPriority+0x60>)
 80109a8:	4694      	mov	ip, r2
 80109aa:	4463      	add	r3, ip
 80109ac:	26c0      	movs	r6, #192	; 0xc0
 80109ae:	00b6      	lsls	r6, r6, #2
 80109b0:	599d      	ldr	r5, [r3, r6]
 80109b2:	2403      	movs	r4, #3
 80109b4:	4020      	ands	r0, r4
 80109b6:	00c0      	lsls	r0, r0, #3
 80109b8:	22ff      	movs	r2, #255	; 0xff
 80109ba:	0014      	movs	r4, r2
 80109bc:	4084      	lsls	r4, r0
 80109be:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80109c0:	0189      	lsls	r1, r1, #6
 80109c2:	400a      	ands	r2, r1
 80109c4:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80109c6:	432a      	orrs	r2, r5
 80109c8:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80109ca:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80109cc:	b2c0      	uxtb	r0, r0
 80109ce:	230f      	movs	r3, #15
 80109d0:	4003      	ands	r3, r0
 80109d2:	3b08      	subs	r3, #8
 80109d4:	089b      	lsrs	r3, r3, #2
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	4a09      	ldr	r2, [pc, #36]	; (8010a00 <HAL_NVIC_SetPriority+0x64>)
 80109da:	4694      	mov	ip, r2
 80109dc:	4463      	add	r3, ip
 80109de:	69dd      	ldr	r5, [r3, #28]
 80109e0:	2203      	movs	r2, #3
 80109e2:	4010      	ands	r0, r2
 80109e4:	00c0      	lsls	r0, r0, #3
 80109e6:	24ff      	movs	r4, #255	; 0xff
 80109e8:	0022      	movs	r2, r4
 80109ea:	4082      	lsls	r2, r0
 80109ec:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80109ee:	0189      	lsls	r1, r1, #6
 80109f0:	400c      	ands	r4, r1
 80109f2:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80109f4:	432c      	orrs	r4, r5
 80109f6:	61dc      	str	r4, [r3, #28]
 80109f8:	e7e7      	b.n	80109ca <HAL_NVIC_SetPriority+0x2e>
 80109fa:	46c0      	nop			; (mov r8, r8)
 80109fc:	e000e100 	.word	0xe000e100
 8010a00:	e000ed00 	.word	0xe000ed00

08010a04 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010a04:	231f      	movs	r3, #31
 8010a06:	4018      	ands	r0, r3
 8010a08:	3b1e      	subs	r3, #30
 8010a0a:	4083      	lsls	r3, r0
 8010a0c:	4a01      	ldr	r2, [pc, #4]	; (8010a14 <HAL_NVIC_EnableIRQ+0x10>)
 8010a0e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010a10:	4770      	bx	lr
 8010a12:	46c0      	nop			; (mov r8, r8)
 8010a14:	e000e100 	.word	0xe000e100

08010a18 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010a18:	231f      	movs	r3, #31
 8010a1a:	4018      	ands	r0, r3
 8010a1c:	3b1e      	subs	r3, #30
 8010a1e:	4083      	lsls	r3, r0
 8010a20:	4901      	ldr	r1, [pc, #4]	; (8010a28 <HAL_NVIC_DisableIRQ+0x10>)
 8010a22:	2280      	movs	r2, #128	; 0x80
 8010a24:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010a26:	4770      	bx	lr
 8010a28:	e000e100 	.word	0xe000e100

08010a2c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010a2c:	1e43      	subs	r3, r0, #1
 8010a2e:	4a0a      	ldr	r2, [pc, #40]	; (8010a58 <HAL_SYSTICK_Config+0x2c>)
 8010a30:	2001      	movs	r0, #1
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d80e      	bhi.n	8010a54 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010a36:	4a09      	ldr	r2, [pc, #36]	; (8010a5c <HAL_SYSTICK_Config+0x30>)
 8010a38:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010a3a:	4809      	ldr	r0, [pc, #36]	; (8010a60 <HAL_SYSTICK_Config+0x34>)
 8010a3c:	6a03      	ldr	r3, [r0, #32]
 8010a3e:	021b      	lsls	r3, r3, #8
 8010a40:	0a1b      	lsrs	r3, r3, #8
 8010a42:	21c0      	movs	r1, #192	; 0xc0
 8010a44:	0609      	lsls	r1, r1, #24
 8010a46:	430b      	orrs	r3, r1
 8010a48:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010a4e:	3307      	adds	r3, #7
 8010a50:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010a52:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010a54:	4770      	bx	lr
 8010a56:	46c0      	nop			; (mov r8, r8)
 8010a58:	00ffffff 	.word	0x00ffffff
 8010a5c:	e000e010 	.word	0xe000e010
 8010a60:	e000ed00 	.word	0xe000ed00

08010a64 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010a64:	2804      	cmp	r0, #4
 8010a66:	d005      	beq.n	8010a74 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010a68:	4a05      	ldr	r2, [pc, #20]	; (8010a80 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010a6a:	6813      	ldr	r3, [r2, #0]
 8010a6c:	2104      	movs	r1, #4
 8010a6e:	438b      	bics	r3, r1
 8010a70:	6013      	str	r3, [r2, #0]
  }
}
 8010a72:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010a74:	4a02      	ldr	r2, [pc, #8]	; (8010a80 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010a76:	6813      	ldr	r3, [r2, #0]
 8010a78:	2104      	movs	r1, #4
 8010a7a:	430b      	orrs	r3, r1
 8010a7c:	6013      	str	r3, [r2, #0]
 8010a7e:	e7f8      	b.n	8010a72 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010a80:	e000e010 	.word	0xe000e010

08010a84 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a86:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010a88:	0891      	lsrs	r1, r2, #2
 8010a8a:	d013      	beq.n	8010ab4 <CRC_Handle_8+0x30>
 8010a8c:	0034      	movs	r4, r6
 8010a8e:	2303      	movs	r3, #3
 8010a90:	0017      	movs	r7, r2
 8010a92:	439f      	bics	r7, r3
 8010a94:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010a96:	7823      	ldrb	r3, [r4, #0]
 8010a98:	061b      	lsls	r3, r3, #24
 8010a9a:	7865      	ldrb	r5, [r4, #1]
 8010a9c:	042d      	lsls	r5, r5, #16
 8010a9e:	432b      	orrs	r3, r5
 8010aa0:	78e5      	ldrb	r5, [r4, #3]
 8010aa2:	432b      	orrs	r3, r5
 8010aa4:	78a5      	ldrb	r5, [r4, #2]
 8010aa6:	022d      	lsls	r5, r5, #8
 8010aa8:	432b      	orrs	r3, r5
 8010aaa:	6805      	ldr	r5, [r0, #0]
 8010aac:	602b      	str	r3, [r5, #0]
 8010aae:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 8010ab0:	42bc      	cmp	r4, r7
 8010ab2:	d1f0      	bne.n	8010a96 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010ab4:	2303      	movs	r3, #3
 8010ab6:	401a      	ands	r2, r3
 8010ab8:	d01e      	beq.n	8010af8 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 8010aba:	2a01      	cmp	r2, #1
 8010abc:	d00a      	beq.n	8010ad4 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010abe:	2a02      	cmp	r2, #2
 8010ac0:	d10d      	bne.n	8010ade <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010ac2:	0089      	lsls	r1, r1, #2
 8010ac4:	5c72      	ldrb	r2, [r6, r1]
 8010ac6:	0212      	lsls	r2, r2, #8
 8010ac8:	1871      	adds	r1, r6, r1
 8010aca:	784b      	ldrb	r3, [r1, #1]
 8010acc:	4313      	orrs	r3, r2
 8010ace:	6802      	ldr	r2, [r0, #0]
 8010ad0:	8013      	strh	r3, [r2, #0]
 8010ad2:	e011      	b.n	8010af8 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010ad4:	0089      	lsls	r1, r1, #2
 8010ad6:	5d8b      	ldrb	r3, [r1, r6]
 8010ad8:	6802      	ldr	r2, [r0, #0]
 8010ada:	7013      	strb	r3, [r2, #0]
 8010adc:	e00c      	b.n	8010af8 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 8010ade:	2a03      	cmp	r2, #3
 8010ae0:	d10a      	bne.n	8010af8 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010ae2:	0089      	lsls	r1, r1, #2
 8010ae4:	5c72      	ldrb	r2, [r6, r1]
 8010ae6:	0212      	lsls	r2, r2, #8
 8010ae8:	1871      	adds	r1, r6, r1
 8010aea:	784b      	ldrb	r3, [r1, #1]
 8010aec:	4313      	orrs	r3, r2
 8010aee:	6802      	ldr	r2, [r0, #0]
 8010af0:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010af2:	788b      	ldrb	r3, [r1, #2]
 8010af4:	6802      	ldr	r2, [r0, #0]
 8010af6:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010af8:	6803      	ldr	r3, [r0, #0]
 8010afa:	6818      	ldr	r0, [r3, #0]
}
 8010afc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010afe <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b00:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010b02:	0852      	lsrs	r2, r2, #1
 8010b04:	d00b      	beq.n	8010b1e <CRC_Handle_16+0x20>
 8010b06:	000c      	movs	r4, r1
 8010b08:	0097      	lsls	r7, r2, #2
 8010b0a:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010b0c:	8823      	ldrh	r3, [r4, #0]
 8010b0e:	041b      	lsls	r3, r3, #16
 8010b10:	8866      	ldrh	r6, [r4, #2]
 8010b12:	4333      	orrs	r3, r6
 8010b14:	6806      	ldr	r6, [r0, #0]
 8010b16:	6033      	str	r3, [r6, #0]
 8010b18:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 8010b1a:	42bc      	cmp	r4, r7
 8010b1c:	d1f6      	bne.n	8010b0c <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 8010b1e:	07eb      	lsls	r3, r5, #31
 8010b20:	d503      	bpl.n	8010b2a <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010b22:	0092      	lsls	r2, r2, #2
 8010b24:	5a53      	ldrh	r3, [r2, r1]
 8010b26:	6802      	ldr	r2, [r0, #0]
 8010b28:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010b2a:	6803      	ldr	r3, [r0, #0]
 8010b2c:	6818      	ldr	r0, [r3, #0]
}
 8010b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b30 <HAL_CRC_Init>:
{
 8010b30:	b510      	push	{r4, lr}
 8010b32:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010b34:	d029      	beq.n	8010b8a <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010b36:	7f43      	ldrb	r3, [r0, #29]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d01e      	beq.n	8010b7a <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010b3c:	2302      	movs	r3, #2
 8010b3e:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010b40:	0020      	movs	r0, r4
 8010b42:	f000 f8b1 	bl	8010ca8 <HAL_CRCEx_Init>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d121      	bne.n	8010b8e <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010b4a:	7963      	ldrb	r3, [r4, #5]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d118      	bne.n	8010b82 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010b50:	6823      	ldr	r3, [r4, #0]
 8010b52:	2201      	movs	r2, #1
 8010b54:	4252      	negs	r2, r2
 8010b56:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010b58:	6822      	ldr	r2, [r4, #0]
 8010b5a:	6893      	ldr	r3, [r2, #8]
 8010b5c:	2160      	movs	r1, #96	; 0x60
 8010b5e:	438b      	bics	r3, r1
 8010b60:	6961      	ldr	r1, [r4, #20]
 8010b62:	430b      	orrs	r3, r1
 8010b64:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010b66:	6822      	ldr	r2, [r4, #0]
 8010b68:	6893      	ldr	r3, [r2, #8]
 8010b6a:	2180      	movs	r1, #128	; 0x80
 8010b6c:	438b      	bics	r3, r1
 8010b6e:	69a1      	ldr	r1, [r4, #24]
 8010b70:	430b      	orrs	r3, r1
 8010b72:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010b74:	2301      	movs	r3, #1
 8010b76:	7763      	strb	r3, [r4, #29]
}
 8010b78:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010b7a:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010b7c:	f7fc fadc 	bl	800d138 <HAL_CRC_MspInit>
 8010b80:	e7dc      	b.n	8010b3c <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010b82:	6823      	ldr	r3, [r4, #0]
 8010b84:	6922      	ldr	r2, [r4, #16]
 8010b86:	611a      	str	r2, [r3, #16]
 8010b88:	e7e6      	b.n	8010b58 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010b8a:	2001      	movs	r0, #1
 8010b8c:	e7f4      	b.n	8010b78 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010b8e:	2001      	movs	r0, #1
 8010b90:	e7f2      	b.n	8010b78 <HAL_CRC_Init+0x48>

08010b92 <HAL_CRC_Accumulate>:
{
 8010b92:	b510      	push	{r4, lr}
 8010b94:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010b96:	7f03      	ldrb	r3, [r0, #28]
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d024      	beq.n	8010be6 <HAL_CRC_Accumulate+0x54>
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010ba4:	6a03      	ldr	r3, [r0, #32]
 8010ba6:	2b02      	cmp	r3, #2
 8010ba8:	d01a      	beq.n	8010be0 <HAL_CRC_Accumulate+0x4e>
 8010baa:	2b03      	cmp	r3, #3
 8010bac:	d007      	beq.n	8010bbe <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010bae:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d011      	beq.n	8010bd8 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010bb8:	2300      	movs	r3, #0
 8010bba:	7723      	strb	r3, [r4, #28]
}
 8010bbc:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8010bbe:	2a00      	cmp	r2, #0
 8010bc0:	d007      	beq.n	8010bd2 <HAL_CRC_Accumulate+0x40>
 8010bc2:	000b      	movs	r3, r1
 8010bc4:	0092      	lsls	r2, r2, #2
 8010bc6:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010bc8:	6822      	ldr	r2, [r4, #0]
 8010bca:	cb01      	ldmia	r3!, {r0}
 8010bcc:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010bce:	428b      	cmp	r3, r1
 8010bd0:	d1fa      	bne.n	8010bc8 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010bd2:	6823      	ldr	r3, [r4, #0]
 8010bd4:	6818      	ldr	r0, [r3, #0]
      break;
 8010bd6:	e7ed      	b.n	8010bb4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010bd8:	0020      	movs	r0, r4
 8010bda:	f7ff ff53 	bl	8010a84 <CRC_Handle_8>
      break;
 8010bde:	e7e9      	b.n	8010bb4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010be0:	f7ff ff8d 	bl	8010afe <CRC_Handle_16>
      break;
 8010be4:	e7e6      	b.n	8010bb4 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010be6:	2002      	movs	r0, #2
 8010be8:	e7e8      	b.n	8010bbc <HAL_CRC_Accumulate+0x2a>

08010bea <HAL_CRC_Calculate>:
{
 8010bea:	b570      	push	{r4, r5, r6, lr}
 8010bec:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010bee:	7f03      	ldrb	r3, [r0, #28]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d029      	beq.n	8010c48 <HAL_CRC_Calculate+0x5e>
 8010bf4:	2501      	movs	r5, #1
 8010bf6:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010bf8:	2302      	movs	r3, #2
 8010bfa:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010bfc:	6800      	ldr	r0, [r0, #0]
 8010bfe:	6883      	ldr	r3, [r0, #8]
 8010c00:	432b      	orrs	r3, r5
 8010c02:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010c04:	6a23      	ldr	r3, [r4, #32]
 8010c06:	2b02      	cmp	r3, #2
 8010c08:	d01a      	beq.n	8010c40 <HAL_CRC_Calculate+0x56>
 8010c0a:	2b03      	cmp	r3, #3
 8010c0c:	d007      	beq.n	8010c1e <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010c0e:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d011      	beq.n	8010c38 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010c14:	2301      	movs	r3, #1
 8010c16:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010c18:	2300      	movs	r3, #0
 8010c1a:	7723      	strb	r3, [r4, #28]
}
 8010c1c:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010c1e:	2a00      	cmp	r2, #0
 8010c20:	d007      	beq.n	8010c32 <HAL_CRC_Calculate+0x48>
 8010c22:	000b      	movs	r3, r1
 8010c24:	0092      	lsls	r2, r2, #2
 8010c26:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010c28:	6820      	ldr	r0, [r4, #0]
 8010c2a:	cb20      	ldmia	r3!, {r5}
 8010c2c:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010c2e:	428b      	cmp	r3, r1
 8010c30:	d1fa      	bne.n	8010c28 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8010c32:	6823      	ldr	r3, [r4, #0]
 8010c34:	6818      	ldr	r0, [r3, #0]
      break;
 8010c36:	e7ed      	b.n	8010c14 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010c38:	0020      	movs	r0, r4
 8010c3a:	f7ff ff23 	bl	8010a84 <CRC_Handle_8>
      break;
 8010c3e:	e7e9      	b.n	8010c14 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010c40:	0020      	movs	r0, r4
 8010c42:	f7ff ff5c 	bl	8010afe <CRC_Handle_16>
      break;
 8010c46:	e7e5      	b.n	8010c14 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010c48:	2002      	movs	r0, #2
 8010c4a:	e7e7      	b.n	8010c1c <HAL_CRC_Calculate+0x32>

08010c4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010c4c:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010c4e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010c50:	2501      	movs	r5, #1
 8010c52:	002c      	movs	r4, r5
 8010c54:	409c      	lsls	r4, r3
 8010c56:	4221      	tst	r1, r4
 8010c58:	d10b      	bne.n	8010c72 <HAL_CRCEx_Polynomial_Set+0x26>
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	d2f9      	bcs.n	8010c52 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8010c5e:	2a10      	cmp	r2, #16
 8010c60:	d01c      	beq.n	8010c9c <HAL_CRCEx_Polynomial_Set+0x50>
 8010c62:	2a18      	cmp	r2, #24
 8010c64:	d01e      	beq.n	8010ca4 <HAL_CRCEx_Polynomial_Set+0x58>
 8010c66:	2a08      	cmp	r2, #8
 8010c68:	d109      	bne.n	8010c7e <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 8010c6a:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8010c6c:	2b0f      	cmp	r3, #15
 8010c6e:	d906      	bls.n	8010c7e <HAL_CRCEx_Polynomial_Set+0x32>
 8010c70:	e00e      	b.n	8010c90 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8010c72:	2a10      	cmp	r2, #16
 8010c74:	d012      	beq.n	8010c9c <HAL_CRCEx_Polynomial_Set+0x50>
 8010c76:	2a18      	cmp	r2, #24
 8010c78:	d00c      	beq.n	8010c94 <HAL_CRCEx_Polynomial_Set+0x48>
 8010c7a:	2a08      	cmp	r2, #8
 8010c7c:	d0f5      	beq.n	8010c6a <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010c7e:	6803      	ldr	r3, [r0, #0]
 8010c80:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010c82:	6801      	ldr	r1, [r0, #0]
 8010c84:	688b      	ldr	r3, [r1, #8]
 8010c86:	2018      	movs	r0, #24
 8010c88:	4383      	bics	r3, r0
 8010c8a:	431a      	orrs	r2, r3
 8010c8c:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010c8e:	2400      	movs	r4, #0
}
 8010c90:	0020      	movs	r0, r4
 8010c92:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010c94:	2b06      	cmp	r3, #6
 8010c96:	d9f2      	bls.n	8010c7e <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 8010c98:	2401      	movs	r4, #1
 8010c9a:	e7f9      	b.n	8010c90 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010c9c:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 8010c9e:	2b07      	cmp	r3, #7
 8010ca0:	d9ed      	bls.n	8010c7e <HAL_CRCEx_Polynomial_Set+0x32>
 8010ca2:	e7f5      	b.n	8010c90 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010ca4:	2401      	movs	r4, #1
 8010ca6:	e7f3      	b.n	8010c90 <HAL_CRCEx_Polynomial_Set+0x44>

08010ca8 <HAL_CRCEx_Init>:
{
 8010ca8:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010caa:	7903      	ldrb	r3, [r0, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d109      	bne.n	8010cc4 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010cb0:	6803      	ldr	r3, [r0, #0]
 8010cb2:	4a08      	ldr	r2, [pc, #32]	; (8010cd4 <HAL_CRCEx_Init+0x2c>)
 8010cb4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010cb6:	6802      	ldr	r2, [r0, #0]
 8010cb8:	6893      	ldr	r3, [r2, #8]
 8010cba:	2118      	movs	r1, #24
 8010cbc:	438b      	bics	r3, r1
 8010cbe:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010cc0:	2000      	movs	r0, #0
}
 8010cc2:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010cc4:	68c2      	ldr	r2, [r0, #12]
 8010cc6:	6881      	ldr	r1, [r0, #8]
 8010cc8:	f7ff ffc0 	bl	8010c4c <HAL_CRCEx_Polynomial_Set>
 8010ccc:	1e43      	subs	r3, r0, #1
 8010cce:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010cd0:	b2c0      	uxtb	r0, r0
 8010cd2:	e7f6      	b.n	8010cc2 <HAL_CRCEx_Init+0x1a>
 8010cd4:	04c11db7 	.word	0x04c11db7

08010cd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010cd8:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	d022      	beq.n	8010d24 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010cde:	2321      	movs	r3, #33	; 0x21
 8010ce0:	5cc3      	ldrb	r3, [r0, r3]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d102      	bne.n	8010cec <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8010ce6:	3320      	adds	r3, #32
 8010ce8:	2200      	movs	r2, #0
 8010cea:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010cec:	2121      	movs	r1, #33	; 0x21
 8010cee:	2302      	movs	r3, #2
 8010cf0:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010cf2:	6804      	ldr	r4, [r0, #0]
 8010cf4:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010cf6:	4a0c      	ldr	r2, [pc, #48]	; (8010d28 <HAL_DMA_Init+0x50>)
 8010cf8:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010cfa:	6843      	ldr	r3, [r0, #4]
 8010cfc:	6885      	ldr	r5, [r0, #8]
 8010cfe:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010d00:	68c5      	ldr	r5, [r0, #12]
 8010d02:	432b      	orrs	r3, r5
 8010d04:	6905      	ldr	r5, [r0, #16]
 8010d06:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010d08:	6945      	ldr	r5, [r0, #20]
 8010d0a:	432b      	orrs	r3, r5
 8010d0c:	6985      	ldr	r5, [r0, #24]
 8010d0e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010d10:	69c5      	ldr	r5, [r0, #28]
 8010d12:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010d14:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010d16:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010d20:	2000      	movs	r0, #0
}  
 8010d22:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010d24:	2001      	movs	r0, #1
 8010d26:	e7fc      	b.n	8010d22 <HAL_DMA_Init+0x4a>
 8010d28:	ffffc00f 	.word	0xffffc00f

08010d2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010d2c:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010d2e:	2420      	movs	r4, #32
 8010d30:	5d04      	ldrb	r4, [r0, r4]
 8010d32:	2c01      	cmp	r4, #1
 8010d34:	d02d      	beq.n	8010d92 <HAL_DMA_Start_IT+0x66>
 8010d36:	2601      	movs	r6, #1
 8010d38:	2420      	movs	r4, #32
 8010d3a:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010d3c:	3401      	adds	r4, #1
 8010d3e:	2502      	movs	r5, #2
 8010d40:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010d42:	6805      	ldr	r5, [r0, #0]
 8010d44:	682c      	ldr	r4, [r5, #0]
 8010d46:	43b4      	bics	r4, r6
 8010d48:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010d4a:	6804      	ldr	r4, [r0, #0]
 8010d4c:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010d4e:	6843      	ldr	r3, [r0, #4]
 8010d50:	2b10      	cmp	r3, #16
 8010d52:	d019      	beq.n	8010d88 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010d54:	6803      	ldr	r3, [r0, #0]
 8010d56:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010d58:	6803      	ldr	r3, [r0, #0]
 8010d5a:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010d5c:	6802      	ldr	r2, [r0, #0]
 8010d5e:	6813      	ldr	r3, [r2, #0]
 8010d60:	2102      	movs	r1, #2
 8010d62:	430b      	orrs	r3, r1
 8010d64:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010d66:	6802      	ldr	r2, [r0, #0]
 8010d68:	6813      	ldr	r3, [r2, #0]
 8010d6a:	3102      	adds	r1, #2
 8010d6c:	430b      	orrs	r3, r1
 8010d6e:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010d70:	6802      	ldr	r2, [r0, #0]
 8010d72:	6813      	ldr	r3, [r2, #0]
 8010d74:	3104      	adds	r1, #4
 8010d76:	430b      	orrs	r3, r1
 8010d78:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010d7a:	6802      	ldr	r2, [r0, #0]
 8010d7c:	6813      	ldr	r3, [r2, #0]
 8010d7e:	3907      	subs	r1, #7
 8010d80:	430b      	orrs	r3, r1
 8010d82:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010d84:	2000      	movs	r0, #0
} 
 8010d86:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010d88:	6803      	ldr	r3, [r0, #0]
 8010d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010d8c:	6803      	ldr	r3, [r0, #0]
 8010d8e:	60d9      	str	r1, [r3, #12]
 8010d90:	e7e4      	b.n	8010d5c <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8010d92:	2002      	movs	r0, #2
 8010d94:	e7f7      	b.n	8010d86 <HAL_DMA_Start_IT+0x5a>

08010d96 <HAL_DMA_Abort>:
{
 8010d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d98:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010d9a:	6802      	ldr	r2, [r0, #0]
 8010d9c:	6813      	ldr	r3, [r2, #0]
 8010d9e:	2101      	movs	r1, #1
 8010da0:	438b      	bics	r3, r1
 8010da2:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010da4:	f7ff fdd8 	bl	8010958 <HAL_GetTick>
 8010da8:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010daa:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010dac:	26fa      	movs	r6, #250	; 0xfa
 8010dae:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010db0:	6823      	ldr	r3, [r4, #0]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	421d      	tst	r5, r3
 8010db6:	d00f      	beq.n	8010dd8 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010db8:	f7ff fdce 	bl	8010958 <HAL_GetTick>
 8010dbc:	1bc0      	subs	r0, r0, r7
 8010dbe:	42b0      	cmp	r0, r6
 8010dc0:	d9f6      	bls.n	8010db0 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010dc4:	2220      	movs	r2, #32
 8010dc6:	4313      	orrs	r3, r2
 8010dc8:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010dca:	2321      	movs	r3, #33	; 0x21
 8010dcc:	2103      	movs	r1, #3
 8010dce:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010dd4:	2003      	movs	r0, #3
 8010dd6:	e006      	b.n	8010de6 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010dd8:	2321      	movs	r3, #33	; 0x21
 8010dda:	2201      	movs	r2, #1
 8010ddc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010dde:	3b01      	subs	r3, #1
 8010de0:	2200      	movs	r2, #0
 8010de2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010de4:	2000      	movs	r0, #0
}
 8010de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010de8 <HAL_DMA_IRQHandler>:
{        
 8010de8:	b510      	push	{r4, lr}
 8010dea:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010dec:	6803      	ldr	r3, [r0, #0]
 8010dee:	4ab4      	ldr	r2, [pc, #720]	; (80110c0 <HAL_DMA_IRQHandler+0x2d8>)
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d94d      	bls.n	8010e90 <HAL_DMA_IRQHandler+0xa8>
 8010df4:	4ab3      	ldr	r2, [pc, #716]	; (80110c4 <HAL_DMA_IRQHandler+0x2dc>)
 8010df6:	6811      	ldr	r1, [r2, #0]
 8010df8:	4ab3      	ldr	r2, [pc, #716]	; (80110c8 <HAL_DMA_IRQHandler+0x2e0>)
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d026      	beq.n	8010e4c <HAL_DMA_IRQHandler+0x64>
 8010dfe:	4ab3      	ldr	r2, [pc, #716]	; (80110cc <HAL_DMA_IRQHandler+0x2e4>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d02d      	beq.n	8010e60 <HAL_DMA_IRQHandler+0x78>
 8010e04:	4ab2      	ldr	r2, [pc, #712]	; (80110d0 <HAL_DMA_IRQHandler+0x2e8>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d02c      	beq.n	8010e64 <HAL_DMA_IRQHandler+0x7c>
 8010e0a:	4ab2      	ldr	r2, [pc, #712]	; (80110d4 <HAL_DMA_IRQHandler+0x2ec>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d02c      	beq.n	8010e6a <HAL_DMA_IRQHandler+0x82>
 8010e10:	4ab1      	ldr	r2, [pc, #708]	; (80110d8 <HAL_DMA_IRQHandler+0x2f0>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d02c      	beq.n	8010e70 <HAL_DMA_IRQHandler+0x88>
 8010e16:	4ab1      	ldr	r2, [pc, #708]	; (80110dc <HAL_DMA_IRQHandler+0x2f4>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d02c      	beq.n	8010e76 <HAL_DMA_IRQHandler+0x8e>
 8010e1c:	4aa8      	ldr	r2, [pc, #672]	; (80110c0 <HAL_DMA_IRQHandler+0x2d8>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d02c      	beq.n	8010e7c <HAL_DMA_IRQHandler+0x94>
 8010e22:	4aaf      	ldr	r2, [pc, #700]	; (80110e0 <HAL_DMA_IRQHandler+0x2f8>)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d02c      	beq.n	8010e82 <HAL_DMA_IRQHandler+0x9a>
 8010e28:	4aae      	ldr	r2, [pc, #696]	; (80110e4 <HAL_DMA_IRQHandler+0x2fc>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d02b      	beq.n	8010e86 <HAL_DMA_IRQHandler+0x9e>
 8010e2e:	4aae      	ldr	r2, [pc, #696]	; (80110e8 <HAL_DMA_IRQHandler+0x300>)
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d02a      	beq.n	8010e8a <HAL_DMA_IRQHandler+0xa2>
 8010e34:	4aad      	ldr	r2, [pc, #692]	; (80110ec <HAL_DMA_IRQHandler+0x304>)
 8010e36:	189a      	adds	r2, r3, r2
 8010e38:	4250      	negs	r0, r2
 8010e3a:	4142      	adcs	r2, r0
 8010e3c:	4252      	negs	r2, r2
 8010e3e:	48ac      	ldr	r0, [pc, #688]	; (80110f0 <HAL_DMA_IRQHandler+0x308>)
 8010e40:	4002      	ands	r2, r0
 8010e42:	2080      	movs	r0, #128	; 0x80
 8010e44:	0300      	lsls	r0, r0, #12
 8010e46:	4684      	mov	ip, r0
 8010e48:	4462      	add	r2, ip
 8010e4a:	e000      	b.n	8010e4e <HAL_DMA_IRQHandler+0x66>
 8010e4c:	2208      	movs	r2, #8
 8010e4e:	420a      	tst	r2, r1
 8010e50:	d100      	bne.n	8010e54 <HAL_DMA_IRQHandler+0x6c>
 8010e52:	e0e6      	b.n	8011022 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	0712      	lsls	r2, r2, #28
 8010e58:	d500      	bpl.n	8010e5c <HAL_DMA_IRQHandler+0x74>
 8010e5a:	e097      	b.n	8010f8c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e5c:	6823      	ldr	r3, [r4, #0]
 8010e5e:	e0e0      	b.n	8011022 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010e60:	2280      	movs	r2, #128	; 0x80
 8010e62:	e7f4      	b.n	8010e4e <HAL_DMA_IRQHandler+0x66>
 8010e64:	2280      	movs	r2, #128	; 0x80
 8010e66:	0112      	lsls	r2, r2, #4
 8010e68:	e7f1      	b.n	8010e4e <HAL_DMA_IRQHandler+0x66>
 8010e6a:	2280      	movs	r2, #128	; 0x80
 8010e6c:	0212      	lsls	r2, r2, #8
 8010e6e:	e7ee      	b.n	8010e4e <HAL_DMA_IRQHandler+0x66>
 8010e70:	2280      	movs	r2, #128	; 0x80
 8010e72:	0312      	lsls	r2, r2, #12
 8010e74:	e7eb      	b.n	8010e4e <HAL_DMA_IRQHandler+0x66>
 8010e76:	2280      	movs	r2, #128	; 0x80
 8010e78:	0412      	lsls	r2, r2, #16
 8010e7a:	e7e8      	b.n	8010e4e <HAL_DMA_IRQHandler+0x66>
 8010e7c:	2280      	movs	r2, #128	; 0x80
 8010e7e:	0512      	lsls	r2, r2, #20
 8010e80:	e7e5      	b.n	8010e4e <HAL_DMA_IRQHandler+0x66>
 8010e82:	2208      	movs	r2, #8
 8010e84:	e7e3      	b.n	8010e4e <HAL_DMA_IRQHandler+0x66>
 8010e86:	2280      	movs	r2, #128	; 0x80
 8010e88:	e7e1      	b.n	8010e4e <HAL_DMA_IRQHandler+0x66>
 8010e8a:	2280      	movs	r2, #128	; 0x80
 8010e8c:	0112      	lsls	r2, r2, #4
 8010e8e:	e7de      	b.n	8010e4e <HAL_DMA_IRQHandler+0x66>
 8010e90:	4a98      	ldr	r2, [pc, #608]	; (80110f4 <HAL_DMA_IRQHandler+0x30c>)
 8010e92:	6811      	ldr	r1, [r2, #0]
 8010e94:	4a8c      	ldr	r2, [pc, #560]	; (80110c8 <HAL_DMA_IRQHandler+0x2e0>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d026      	beq.n	8010ee8 <HAL_DMA_IRQHandler+0x100>
 8010e9a:	4a8c      	ldr	r2, [pc, #560]	; (80110cc <HAL_DMA_IRQHandler+0x2e4>)
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d05d      	beq.n	8010f5c <HAL_DMA_IRQHandler+0x174>
 8010ea0:	4a8b      	ldr	r2, [pc, #556]	; (80110d0 <HAL_DMA_IRQHandler+0x2e8>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d05c      	beq.n	8010f60 <HAL_DMA_IRQHandler+0x178>
 8010ea6:	4a8b      	ldr	r2, [pc, #556]	; (80110d4 <HAL_DMA_IRQHandler+0x2ec>)
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d05c      	beq.n	8010f66 <HAL_DMA_IRQHandler+0x17e>
 8010eac:	4a8a      	ldr	r2, [pc, #552]	; (80110d8 <HAL_DMA_IRQHandler+0x2f0>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d05c      	beq.n	8010f6c <HAL_DMA_IRQHandler+0x184>
 8010eb2:	4a8a      	ldr	r2, [pc, #552]	; (80110dc <HAL_DMA_IRQHandler+0x2f4>)
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	d05c      	beq.n	8010f72 <HAL_DMA_IRQHandler+0x18a>
 8010eb8:	4a81      	ldr	r2, [pc, #516]	; (80110c0 <HAL_DMA_IRQHandler+0x2d8>)
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	d05c      	beq.n	8010f78 <HAL_DMA_IRQHandler+0x190>
 8010ebe:	4a88      	ldr	r2, [pc, #544]	; (80110e0 <HAL_DMA_IRQHandler+0x2f8>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d05c      	beq.n	8010f7e <HAL_DMA_IRQHandler+0x196>
 8010ec4:	4a87      	ldr	r2, [pc, #540]	; (80110e4 <HAL_DMA_IRQHandler+0x2fc>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d05b      	beq.n	8010f82 <HAL_DMA_IRQHandler+0x19a>
 8010eca:	4a87      	ldr	r2, [pc, #540]	; (80110e8 <HAL_DMA_IRQHandler+0x300>)
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d05a      	beq.n	8010f86 <HAL_DMA_IRQHandler+0x19e>
 8010ed0:	4a86      	ldr	r2, [pc, #536]	; (80110ec <HAL_DMA_IRQHandler+0x304>)
 8010ed2:	189a      	adds	r2, r3, r2
 8010ed4:	4250      	negs	r0, r2
 8010ed6:	4142      	adcs	r2, r0
 8010ed8:	4252      	negs	r2, r2
 8010eda:	4885      	ldr	r0, [pc, #532]	; (80110f0 <HAL_DMA_IRQHandler+0x308>)
 8010edc:	4002      	ands	r2, r0
 8010ede:	2080      	movs	r0, #128	; 0x80
 8010ee0:	0300      	lsls	r0, r0, #12
 8010ee2:	4684      	mov	ip, r0
 8010ee4:	4462      	add	r2, ip
 8010ee6:	e000      	b.n	8010eea <HAL_DMA_IRQHandler+0x102>
 8010ee8:	2208      	movs	r2, #8
 8010eea:	420a      	tst	r2, r1
 8010eec:	d000      	beq.n	8010ef0 <HAL_DMA_IRQHandler+0x108>
 8010eee:	e3ad      	b.n	801164c <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ef0:	4a80      	ldr	r2, [pc, #512]	; (80110f4 <HAL_DMA_IRQHandler+0x30c>)
 8010ef2:	6811      	ldr	r1, [r2, #0]
 8010ef4:	4a74      	ldr	r2, [pc, #464]	; (80110c8 <HAL_DMA_IRQHandler+0x2e0>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d100      	bne.n	8010efc <HAL_DMA_IRQHandler+0x114>
 8010efa:	e198      	b.n	801122e <HAL_DMA_IRQHandler+0x446>
 8010efc:	4a73      	ldr	r2, [pc, #460]	; (80110cc <HAL_DMA_IRQHandler+0x2e4>)
 8010efe:	4293      	cmp	r3, r2
 8010f00:	d100      	bne.n	8010f04 <HAL_DMA_IRQHandler+0x11c>
 8010f02:	e1da      	b.n	80112ba <HAL_DMA_IRQHandler+0x4d2>
 8010f04:	4a72      	ldr	r2, [pc, #456]	; (80110d0 <HAL_DMA_IRQHandler+0x2e8>)
 8010f06:	4293      	cmp	r3, r2
 8010f08:	d100      	bne.n	8010f0c <HAL_DMA_IRQHandler+0x124>
 8010f0a:	e1d8      	b.n	80112be <HAL_DMA_IRQHandler+0x4d6>
 8010f0c:	4a71      	ldr	r2, [pc, #452]	; (80110d4 <HAL_DMA_IRQHandler+0x2ec>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d100      	bne.n	8010f14 <HAL_DMA_IRQHandler+0x12c>
 8010f12:	e1d7      	b.n	80112c4 <HAL_DMA_IRQHandler+0x4dc>
 8010f14:	4a70      	ldr	r2, [pc, #448]	; (80110d8 <HAL_DMA_IRQHandler+0x2f0>)
 8010f16:	4293      	cmp	r3, r2
 8010f18:	d100      	bne.n	8010f1c <HAL_DMA_IRQHandler+0x134>
 8010f1a:	e1d6      	b.n	80112ca <HAL_DMA_IRQHandler+0x4e2>
 8010f1c:	4a6f      	ldr	r2, [pc, #444]	; (80110dc <HAL_DMA_IRQHandler+0x2f4>)
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d100      	bne.n	8010f24 <HAL_DMA_IRQHandler+0x13c>
 8010f22:	e1d5      	b.n	80112d0 <HAL_DMA_IRQHandler+0x4e8>
 8010f24:	4a66      	ldr	r2, [pc, #408]	; (80110c0 <HAL_DMA_IRQHandler+0x2d8>)
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d100      	bne.n	8010f2c <HAL_DMA_IRQHandler+0x144>
 8010f2a:	e1d4      	b.n	80112d6 <HAL_DMA_IRQHandler+0x4ee>
 8010f2c:	4a6c      	ldr	r2, [pc, #432]	; (80110e0 <HAL_DMA_IRQHandler+0x2f8>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d100      	bne.n	8010f34 <HAL_DMA_IRQHandler+0x14c>
 8010f32:	e1d3      	b.n	80112dc <HAL_DMA_IRQHandler+0x4f4>
 8010f34:	4a6b      	ldr	r2, [pc, #428]	; (80110e4 <HAL_DMA_IRQHandler+0x2fc>)
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d100      	bne.n	8010f3c <HAL_DMA_IRQHandler+0x154>
 8010f3a:	e1d1      	b.n	80112e0 <HAL_DMA_IRQHandler+0x4f8>
 8010f3c:	4a6a      	ldr	r2, [pc, #424]	; (80110e8 <HAL_DMA_IRQHandler+0x300>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d100      	bne.n	8010f44 <HAL_DMA_IRQHandler+0x15c>
 8010f42:	e1cf      	b.n	80112e4 <HAL_DMA_IRQHandler+0x4fc>
 8010f44:	4a69      	ldr	r2, [pc, #420]	; (80110ec <HAL_DMA_IRQHandler+0x304>)
 8010f46:	189a      	adds	r2, r3, r2
 8010f48:	4250      	negs	r0, r2
 8010f4a:	4142      	adcs	r2, r0
 8010f4c:	4252      	negs	r2, r2
 8010f4e:	486a      	ldr	r0, [pc, #424]	; (80110f8 <HAL_DMA_IRQHandler+0x310>)
 8010f50:	4002      	ands	r2, r0
 8010f52:	2080      	movs	r0, #128	; 0x80
 8010f54:	02c0      	lsls	r0, r0, #11
 8010f56:	4684      	mov	ip, r0
 8010f58:	4462      	add	r2, ip
 8010f5a:	e169      	b.n	8011230 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010f5c:	2280      	movs	r2, #128	; 0x80
 8010f5e:	e7c4      	b.n	8010eea <HAL_DMA_IRQHandler+0x102>
 8010f60:	2280      	movs	r2, #128	; 0x80
 8010f62:	0112      	lsls	r2, r2, #4
 8010f64:	e7c1      	b.n	8010eea <HAL_DMA_IRQHandler+0x102>
 8010f66:	2280      	movs	r2, #128	; 0x80
 8010f68:	0212      	lsls	r2, r2, #8
 8010f6a:	e7be      	b.n	8010eea <HAL_DMA_IRQHandler+0x102>
 8010f6c:	2280      	movs	r2, #128	; 0x80
 8010f6e:	0312      	lsls	r2, r2, #12
 8010f70:	e7bb      	b.n	8010eea <HAL_DMA_IRQHandler+0x102>
 8010f72:	2280      	movs	r2, #128	; 0x80
 8010f74:	0412      	lsls	r2, r2, #16
 8010f76:	e7b8      	b.n	8010eea <HAL_DMA_IRQHandler+0x102>
 8010f78:	2280      	movs	r2, #128	; 0x80
 8010f7a:	0512      	lsls	r2, r2, #20
 8010f7c:	e7b5      	b.n	8010eea <HAL_DMA_IRQHandler+0x102>
 8010f7e:	2208      	movs	r2, #8
 8010f80:	e7b3      	b.n	8010eea <HAL_DMA_IRQHandler+0x102>
 8010f82:	2280      	movs	r2, #128	; 0x80
 8010f84:	e7b1      	b.n	8010eea <HAL_DMA_IRQHandler+0x102>
 8010f86:	2280      	movs	r2, #128	; 0x80
 8010f88:	0112      	lsls	r2, r2, #4
 8010f8a:	e7ae      	b.n	8010eea <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	2108      	movs	r1, #8
 8010f90:	438a      	bics	r2, r1
 8010f92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010f94:	6823      	ldr	r3, [r4, #0]
 8010f96:	4a4a      	ldr	r2, [pc, #296]	; (80110c0 <HAL_DMA_IRQHandler+0x2d8>)
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d800      	bhi.n	8010f9e <HAL_DMA_IRQHandler+0x1b6>
 8010f9c:	e0ae      	b.n	80110fc <HAL_DMA_IRQHandler+0x314>
 8010f9e:	4a4a      	ldr	r2, [pc, #296]	; (80110c8 <HAL_DMA_IRQHandler+0x2e0>)
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d027      	beq.n	8010ff4 <HAL_DMA_IRQHandler+0x20c>
 8010fa4:	4a49      	ldr	r2, [pc, #292]	; (80110cc <HAL_DMA_IRQHandler+0x2e4>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d071      	beq.n	801108e <HAL_DMA_IRQHandler+0x2a6>
 8010faa:	4a49      	ldr	r2, [pc, #292]	; (80110d0 <HAL_DMA_IRQHandler+0x2e8>)
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d070      	beq.n	8011092 <HAL_DMA_IRQHandler+0x2aa>
 8010fb0:	4a48      	ldr	r2, [pc, #288]	; (80110d4 <HAL_DMA_IRQHandler+0x2ec>)
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d070      	beq.n	8011098 <HAL_DMA_IRQHandler+0x2b0>
 8010fb6:	4a48      	ldr	r2, [pc, #288]	; (80110d8 <HAL_DMA_IRQHandler+0x2f0>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d070      	beq.n	801109e <HAL_DMA_IRQHandler+0x2b6>
 8010fbc:	4a47      	ldr	r2, [pc, #284]	; (80110dc <HAL_DMA_IRQHandler+0x2f4>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d070      	beq.n	80110a4 <HAL_DMA_IRQHandler+0x2bc>
 8010fc2:	4a3f      	ldr	r2, [pc, #252]	; (80110c0 <HAL_DMA_IRQHandler+0x2d8>)
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d070      	beq.n	80110aa <HAL_DMA_IRQHandler+0x2c2>
 8010fc8:	4a45      	ldr	r2, [pc, #276]	; (80110e0 <HAL_DMA_IRQHandler+0x2f8>)
 8010fca:	4293      	cmp	r3, r2
 8010fcc:	d070      	beq.n	80110b0 <HAL_DMA_IRQHandler+0x2c8>
 8010fce:	4a45      	ldr	r2, [pc, #276]	; (80110e4 <HAL_DMA_IRQHandler+0x2fc>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d06f      	beq.n	80110b4 <HAL_DMA_IRQHandler+0x2cc>
 8010fd4:	4a44      	ldr	r2, [pc, #272]	; (80110e8 <HAL_DMA_IRQHandler+0x300>)
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	d06e      	beq.n	80110b8 <HAL_DMA_IRQHandler+0x2d0>
 8010fda:	4a44      	ldr	r2, [pc, #272]	; (80110ec <HAL_DMA_IRQHandler+0x304>)
 8010fdc:	4694      	mov	ip, r2
 8010fde:	4463      	add	r3, ip
 8010fe0:	425a      	negs	r2, r3
 8010fe2:	4153      	adcs	r3, r2
 8010fe4:	425b      	negs	r3, r3
 8010fe6:	4a42      	ldr	r2, [pc, #264]	; (80110f0 <HAL_DMA_IRQHandler+0x308>)
 8010fe8:	4013      	ands	r3, r2
 8010fea:	2280      	movs	r2, #128	; 0x80
 8010fec:	0312      	lsls	r2, r2, #12
 8010fee:	4694      	mov	ip, r2
 8010ff0:	4463      	add	r3, ip
 8010ff2:	e000      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x20e>
 8010ff4:	2308      	movs	r3, #8
 8010ff6:	4a33      	ldr	r2, [pc, #204]	; (80110c4 <HAL_DMA_IRQHandler+0x2dc>)
 8010ff8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010ffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	4313      	orrs	r3, r2
 8011000:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011002:	2321      	movs	r3, #33	; 0x21
 8011004:	3203      	adds	r2, #3
 8011006:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8011008:	3b01      	subs	r3, #1
 801100a:	2200      	movs	r2, #0
 801100c:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801100e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011010:	2b00      	cmp	r3, #0
 8011012:	d001      	beq.n	8011018 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 8011014:	0020      	movs	r0, r4
 8011016:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011018:	6823      	ldr	r3, [r4, #0]
 801101a:	4a29      	ldr	r2, [pc, #164]	; (80110c0 <HAL_DMA_IRQHandler+0x2d8>)
 801101c:	4293      	cmp	r3, r2
 801101e:	d800      	bhi.n	8011022 <HAL_DMA_IRQHandler+0x23a>
 8011020:	e766      	b.n	8010ef0 <HAL_DMA_IRQHandler+0x108>
 8011022:	4a28      	ldr	r2, [pc, #160]	; (80110c4 <HAL_DMA_IRQHandler+0x2dc>)
 8011024:	6811      	ldr	r1, [r2, #0]
 8011026:	4a28      	ldr	r2, [pc, #160]	; (80110c8 <HAL_DMA_IRQHandler+0x2e0>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d100      	bne.n	801102e <HAL_DMA_IRQHandler+0x246>
 801102c:	e0ad      	b.n	801118a <HAL_DMA_IRQHandler+0x3a2>
 801102e:	4a27      	ldr	r2, [pc, #156]	; (80110cc <HAL_DMA_IRQHandler+0x2e4>)
 8011030:	4293      	cmp	r3, r2
 8011032:	d100      	bne.n	8011036 <HAL_DMA_IRQHandler+0x24e>
 8011034:	e0e3      	b.n	80111fe <HAL_DMA_IRQHandler+0x416>
 8011036:	4a26      	ldr	r2, [pc, #152]	; (80110d0 <HAL_DMA_IRQHandler+0x2e8>)
 8011038:	4293      	cmp	r3, r2
 801103a:	d100      	bne.n	801103e <HAL_DMA_IRQHandler+0x256>
 801103c:	e0e1      	b.n	8011202 <HAL_DMA_IRQHandler+0x41a>
 801103e:	4a25      	ldr	r2, [pc, #148]	; (80110d4 <HAL_DMA_IRQHandler+0x2ec>)
 8011040:	4293      	cmp	r3, r2
 8011042:	d100      	bne.n	8011046 <HAL_DMA_IRQHandler+0x25e>
 8011044:	e0e0      	b.n	8011208 <HAL_DMA_IRQHandler+0x420>
 8011046:	4a24      	ldr	r2, [pc, #144]	; (80110d8 <HAL_DMA_IRQHandler+0x2f0>)
 8011048:	4293      	cmp	r3, r2
 801104a:	d100      	bne.n	801104e <HAL_DMA_IRQHandler+0x266>
 801104c:	e0df      	b.n	801120e <HAL_DMA_IRQHandler+0x426>
 801104e:	4a23      	ldr	r2, [pc, #140]	; (80110dc <HAL_DMA_IRQHandler+0x2f4>)
 8011050:	4293      	cmp	r3, r2
 8011052:	d100      	bne.n	8011056 <HAL_DMA_IRQHandler+0x26e>
 8011054:	e0de      	b.n	8011214 <HAL_DMA_IRQHandler+0x42c>
 8011056:	4a1a      	ldr	r2, [pc, #104]	; (80110c0 <HAL_DMA_IRQHandler+0x2d8>)
 8011058:	4293      	cmp	r3, r2
 801105a:	d100      	bne.n	801105e <HAL_DMA_IRQHandler+0x276>
 801105c:	e0dd      	b.n	801121a <HAL_DMA_IRQHandler+0x432>
 801105e:	4a20      	ldr	r2, [pc, #128]	; (80110e0 <HAL_DMA_IRQHandler+0x2f8>)
 8011060:	4293      	cmp	r3, r2
 8011062:	d100      	bne.n	8011066 <HAL_DMA_IRQHandler+0x27e>
 8011064:	e0dc      	b.n	8011220 <HAL_DMA_IRQHandler+0x438>
 8011066:	4a1f      	ldr	r2, [pc, #124]	; (80110e4 <HAL_DMA_IRQHandler+0x2fc>)
 8011068:	4293      	cmp	r3, r2
 801106a:	d100      	bne.n	801106e <HAL_DMA_IRQHandler+0x286>
 801106c:	e0da      	b.n	8011224 <HAL_DMA_IRQHandler+0x43c>
 801106e:	4a1e      	ldr	r2, [pc, #120]	; (80110e8 <HAL_DMA_IRQHandler+0x300>)
 8011070:	4293      	cmp	r3, r2
 8011072:	d100      	bne.n	8011076 <HAL_DMA_IRQHandler+0x28e>
 8011074:	e0d8      	b.n	8011228 <HAL_DMA_IRQHandler+0x440>
 8011076:	4a1d      	ldr	r2, [pc, #116]	; (80110ec <HAL_DMA_IRQHandler+0x304>)
 8011078:	189a      	adds	r2, r3, r2
 801107a:	4250      	negs	r0, r2
 801107c:	4142      	adcs	r2, r0
 801107e:	4252      	negs	r2, r2
 8011080:	481d      	ldr	r0, [pc, #116]	; (80110f8 <HAL_DMA_IRQHandler+0x310>)
 8011082:	4002      	ands	r2, r0
 8011084:	2080      	movs	r0, #128	; 0x80
 8011086:	02c0      	lsls	r0, r0, #11
 8011088:	4684      	mov	ip, r0
 801108a:	4462      	add	r2, ip
 801108c:	e07e      	b.n	801118c <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801108e:	2380      	movs	r3, #128	; 0x80
 8011090:	e7b1      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x20e>
 8011092:	2380      	movs	r3, #128	; 0x80
 8011094:	011b      	lsls	r3, r3, #4
 8011096:	e7ae      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x20e>
 8011098:	2380      	movs	r3, #128	; 0x80
 801109a:	021b      	lsls	r3, r3, #8
 801109c:	e7ab      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x20e>
 801109e:	2380      	movs	r3, #128	; 0x80
 80110a0:	031b      	lsls	r3, r3, #12
 80110a2:	e7a8      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x20e>
 80110a4:	2380      	movs	r3, #128	; 0x80
 80110a6:	041b      	lsls	r3, r3, #16
 80110a8:	e7a5      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x20e>
 80110aa:	2380      	movs	r3, #128	; 0x80
 80110ac:	051b      	lsls	r3, r3, #20
 80110ae:	e7a2      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x20e>
 80110b0:	2308      	movs	r3, #8
 80110b2:	e7a0      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x20e>
 80110b4:	2380      	movs	r3, #128	; 0x80
 80110b6:	e79e      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x20e>
 80110b8:	2380      	movs	r3, #128	; 0x80
 80110ba:	011b      	lsls	r3, r3, #4
 80110bc:	e79b      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x20e>
 80110be:	46c0      	nop			; (mov r8, r8)
 80110c0:	40020080 	.word	0x40020080
 80110c4:	40020400 	.word	0x40020400
 80110c8:	40020008 	.word	0x40020008
 80110cc:	4002001c 	.word	0x4002001c
 80110d0:	40020030 	.word	0x40020030
 80110d4:	40020044 	.word	0x40020044
 80110d8:	40020058 	.word	0x40020058
 80110dc:	4002006c 	.word	0x4002006c
 80110e0:	40020408 	.word	0x40020408
 80110e4:	4002041c 	.word	0x4002041c
 80110e8:	40020430 	.word	0x40020430
 80110ec:	bffdfbbc 	.word	0xbffdfbbc
 80110f0:	fff88000 	.word	0xfff88000
 80110f4:	40020000 	.word	0x40020000
 80110f8:	fffc4000 	.word	0xfffc4000
 80110fc:	4aaa      	ldr	r2, [pc, #680]	; (80113a8 <HAL_DMA_IRQHandler+0x5c0>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d027      	beq.n	8011152 <HAL_DMA_IRQHandler+0x36a>
 8011102:	4aaa      	ldr	r2, [pc, #680]	; (80113ac <HAL_DMA_IRQHandler+0x5c4>)
 8011104:	4293      	cmp	r3, r2
 8011106:	d028      	beq.n	801115a <HAL_DMA_IRQHandler+0x372>
 8011108:	4aa9      	ldr	r2, [pc, #676]	; (80113b0 <HAL_DMA_IRQHandler+0x5c8>)
 801110a:	4293      	cmp	r3, r2
 801110c:	d027      	beq.n	801115e <HAL_DMA_IRQHandler+0x376>
 801110e:	4aa9      	ldr	r2, [pc, #676]	; (80113b4 <HAL_DMA_IRQHandler+0x5cc>)
 8011110:	4293      	cmp	r3, r2
 8011112:	d027      	beq.n	8011164 <HAL_DMA_IRQHandler+0x37c>
 8011114:	4aa8      	ldr	r2, [pc, #672]	; (80113b8 <HAL_DMA_IRQHandler+0x5d0>)
 8011116:	4293      	cmp	r3, r2
 8011118:	d027      	beq.n	801116a <HAL_DMA_IRQHandler+0x382>
 801111a:	4aa8      	ldr	r2, [pc, #672]	; (80113bc <HAL_DMA_IRQHandler+0x5d4>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d027      	beq.n	8011170 <HAL_DMA_IRQHandler+0x388>
 8011120:	4aa7      	ldr	r2, [pc, #668]	; (80113c0 <HAL_DMA_IRQHandler+0x5d8>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d027      	beq.n	8011176 <HAL_DMA_IRQHandler+0x38e>
 8011126:	4aa7      	ldr	r2, [pc, #668]	; (80113c4 <HAL_DMA_IRQHandler+0x5dc>)
 8011128:	4293      	cmp	r3, r2
 801112a:	d027      	beq.n	801117c <HAL_DMA_IRQHandler+0x394>
 801112c:	4aa6      	ldr	r2, [pc, #664]	; (80113c8 <HAL_DMA_IRQHandler+0x5e0>)
 801112e:	4293      	cmp	r3, r2
 8011130:	d026      	beq.n	8011180 <HAL_DMA_IRQHandler+0x398>
 8011132:	4aa6      	ldr	r2, [pc, #664]	; (80113cc <HAL_DMA_IRQHandler+0x5e4>)
 8011134:	4293      	cmp	r3, r2
 8011136:	d025      	beq.n	8011184 <HAL_DMA_IRQHandler+0x39c>
 8011138:	4aa5      	ldr	r2, [pc, #660]	; (80113d0 <HAL_DMA_IRQHandler+0x5e8>)
 801113a:	4694      	mov	ip, r2
 801113c:	4463      	add	r3, ip
 801113e:	425a      	negs	r2, r3
 8011140:	4153      	adcs	r3, r2
 8011142:	425b      	negs	r3, r3
 8011144:	4aa3      	ldr	r2, [pc, #652]	; (80113d4 <HAL_DMA_IRQHandler+0x5ec>)
 8011146:	4013      	ands	r3, r2
 8011148:	2280      	movs	r2, #128	; 0x80
 801114a:	0312      	lsls	r2, r2, #12
 801114c:	4694      	mov	ip, r2
 801114e:	4463      	add	r3, ip
 8011150:	e000      	b.n	8011154 <HAL_DMA_IRQHandler+0x36c>
 8011152:	2308      	movs	r3, #8
 8011154:	4aa0      	ldr	r2, [pc, #640]	; (80113d8 <HAL_DMA_IRQHandler+0x5f0>)
 8011156:	6053      	str	r3, [r2, #4]
 8011158:	e74f      	b.n	8010ffa <HAL_DMA_IRQHandler+0x212>
 801115a:	2380      	movs	r3, #128	; 0x80
 801115c:	e7fa      	b.n	8011154 <HAL_DMA_IRQHandler+0x36c>
 801115e:	2380      	movs	r3, #128	; 0x80
 8011160:	011b      	lsls	r3, r3, #4
 8011162:	e7f7      	b.n	8011154 <HAL_DMA_IRQHandler+0x36c>
 8011164:	2380      	movs	r3, #128	; 0x80
 8011166:	021b      	lsls	r3, r3, #8
 8011168:	e7f4      	b.n	8011154 <HAL_DMA_IRQHandler+0x36c>
 801116a:	2380      	movs	r3, #128	; 0x80
 801116c:	031b      	lsls	r3, r3, #12
 801116e:	e7f1      	b.n	8011154 <HAL_DMA_IRQHandler+0x36c>
 8011170:	2380      	movs	r3, #128	; 0x80
 8011172:	041b      	lsls	r3, r3, #16
 8011174:	e7ee      	b.n	8011154 <HAL_DMA_IRQHandler+0x36c>
 8011176:	2380      	movs	r3, #128	; 0x80
 8011178:	051b      	lsls	r3, r3, #20
 801117a:	e7eb      	b.n	8011154 <HAL_DMA_IRQHandler+0x36c>
 801117c:	2308      	movs	r3, #8
 801117e:	e7e9      	b.n	8011154 <HAL_DMA_IRQHandler+0x36c>
 8011180:	2380      	movs	r3, #128	; 0x80
 8011182:	e7e7      	b.n	8011154 <HAL_DMA_IRQHandler+0x36c>
 8011184:	2380      	movs	r3, #128	; 0x80
 8011186:	011b      	lsls	r3, r3, #4
 8011188:	e7e4      	b.n	8011154 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801118a:	2204      	movs	r2, #4
 801118c:	420a      	tst	r2, r1
 801118e:	d152      	bne.n	8011236 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011190:	6821      	ldr	r1, [r4, #0]
 8011192:	4b92      	ldr	r3, [pc, #584]	; (80113dc <HAL_DMA_IRQHandler+0x5f4>)
 8011194:	6818      	ldr	r0, [r3, #0]
 8011196:	4a84      	ldr	r2, [pc, #528]	; (80113a8 <HAL_DMA_IRQHandler+0x5c0>)
 8011198:	4291      	cmp	r1, r2
 801119a:	d100      	bne.n	801119e <HAL_DMA_IRQHandler+0x3b6>
 801119c:	e16b      	b.n	8011476 <HAL_DMA_IRQHandler+0x68e>
 801119e:	4a83      	ldr	r2, [pc, #524]	; (80113ac <HAL_DMA_IRQHandler+0x5c4>)
 80111a0:	4291      	cmp	r1, r2
 80111a2:	d100      	bne.n	80111a6 <HAL_DMA_IRQHandler+0x3be>
 80111a4:	e1aa      	b.n	80114fc <HAL_DMA_IRQHandler+0x714>
 80111a6:	4a82      	ldr	r2, [pc, #520]	; (80113b0 <HAL_DMA_IRQHandler+0x5c8>)
 80111a8:	4291      	cmp	r1, r2
 80111aa:	d100      	bne.n	80111ae <HAL_DMA_IRQHandler+0x3c6>
 80111ac:	e1a8      	b.n	8011500 <HAL_DMA_IRQHandler+0x718>
 80111ae:	4a81      	ldr	r2, [pc, #516]	; (80113b4 <HAL_DMA_IRQHandler+0x5cc>)
 80111b0:	4291      	cmp	r1, r2
 80111b2:	d100      	bne.n	80111b6 <HAL_DMA_IRQHandler+0x3ce>
 80111b4:	e1a7      	b.n	8011506 <HAL_DMA_IRQHandler+0x71e>
 80111b6:	4b80      	ldr	r3, [pc, #512]	; (80113b8 <HAL_DMA_IRQHandler+0x5d0>)
 80111b8:	4299      	cmp	r1, r3
 80111ba:	d100      	bne.n	80111be <HAL_DMA_IRQHandler+0x3d6>
 80111bc:	e1a6      	b.n	801150c <HAL_DMA_IRQHandler+0x724>
 80111be:	4b7f      	ldr	r3, [pc, #508]	; (80113bc <HAL_DMA_IRQHandler+0x5d4>)
 80111c0:	4299      	cmp	r1, r3
 80111c2:	d100      	bne.n	80111c6 <HAL_DMA_IRQHandler+0x3de>
 80111c4:	e1a5      	b.n	8011512 <HAL_DMA_IRQHandler+0x72a>
 80111c6:	4b7e      	ldr	r3, [pc, #504]	; (80113c0 <HAL_DMA_IRQHandler+0x5d8>)
 80111c8:	4299      	cmp	r1, r3
 80111ca:	d100      	bne.n	80111ce <HAL_DMA_IRQHandler+0x3e6>
 80111cc:	e1a4      	b.n	8011518 <HAL_DMA_IRQHandler+0x730>
 80111ce:	4b7d      	ldr	r3, [pc, #500]	; (80113c4 <HAL_DMA_IRQHandler+0x5dc>)
 80111d0:	4299      	cmp	r1, r3
 80111d2:	d100      	bne.n	80111d6 <HAL_DMA_IRQHandler+0x3ee>
 80111d4:	e1a3      	b.n	801151e <HAL_DMA_IRQHandler+0x736>
 80111d6:	4b7c      	ldr	r3, [pc, #496]	; (80113c8 <HAL_DMA_IRQHandler+0x5e0>)
 80111d8:	4299      	cmp	r1, r3
 80111da:	d100      	bne.n	80111de <HAL_DMA_IRQHandler+0x3f6>
 80111dc:	e1a1      	b.n	8011522 <HAL_DMA_IRQHandler+0x73a>
 80111de:	4b7b      	ldr	r3, [pc, #492]	; (80113cc <HAL_DMA_IRQHandler+0x5e4>)
 80111e0:	4299      	cmp	r1, r3
 80111e2:	d100      	bne.n	80111e6 <HAL_DMA_IRQHandler+0x3fe>
 80111e4:	e19f      	b.n	8011526 <HAL_DMA_IRQHandler+0x73e>
 80111e6:	4b7a      	ldr	r3, [pc, #488]	; (80113d0 <HAL_DMA_IRQHandler+0x5e8>)
 80111e8:	18ca      	adds	r2, r1, r3
 80111ea:	4253      	negs	r3, r2
 80111ec:	415a      	adcs	r2, r3
 80111ee:	4252      	negs	r2, r2
 80111f0:	4b7b      	ldr	r3, [pc, #492]	; (80113e0 <HAL_DMA_IRQHandler+0x5f8>)
 80111f2:	4013      	ands	r3, r2
 80111f4:	2280      	movs	r2, #128	; 0x80
 80111f6:	0292      	lsls	r2, r2, #10
 80111f8:	4694      	mov	ip, r2
 80111fa:	4463      	add	r3, ip
 80111fc:	e13c      	b.n	8011478 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80111fe:	2240      	movs	r2, #64	; 0x40
 8011200:	e7c4      	b.n	801118c <HAL_DMA_IRQHandler+0x3a4>
 8011202:	2280      	movs	r2, #128	; 0x80
 8011204:	00d2      	lsls	r2, r2, #3
 8011206:	e7c1      	b.n	801118c <HAL_DMA_IRQHandler+0x3a4>
 8011208:	2280      	movs	r2, #128	; 0x80
 801120a:	01d2      	lsls	r2, r2, #7
 801120c:	e7be      	b.n	801118c <HAL_DMA_IRQHandler+0x3a4>
 801120e:	2280      	movs	r2, #128	; 0x80
 8011210:	02d2      	lsls	r2, r2, #11
 8011212:	e7bb      	b.n	801118c <HAL_DMA_IRQHandler+0x3a4>
 8011214:	2280      	movs	r2, #128	; 0x80
 8011216:	03d2      	lsls	r2, r2, #15
 8011218:	e7b8      	b.n	801118c <HAL_DMA_IRQHandler+0x3a4>
 801121a:	2280      	movs	r2, #128	; 0x80
 801121c:	04d2      	lsls	r2, r2, #19
 801121e:	e7b5      	b.n	801118c <HAL_DMA_IRQHandler+0x3a4>
 8011220:	2204      	movs	r2, #4
 8011222:	e7b3      	b.n	801118c <HAL_DMA_IRQHandler+0x3a4>
 8011224:	2240      	movs	r2, #64	; 0x40
 8011226:	e7b1      	b.n	801118c <HAL_DMA_IRQHandler+0x3a4>
 8011228:	2280      	movs	r2, #128	; 0x80
 801122a:	00d2      	lsls	r2, r2, #3
 801122c:	e7ae      	b.n	801118c <HAL_DMA_IRQHandler+0x3a4>
 801122e:	2204      	movs	r2, #4
 8011230:	420a      	tst	r2, r1
 8011232:	d100      	bne.n	8011236 <HAL_DMA_IRQHandler+0x44e>
 8011234:	e208      	b.n	8011648 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	0752      	lsls	r2, r2, #29
 801123a:	d561      	bpl.n	8011300 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801123c:	681a      	ldr	r2, [r3, #0]
 801123e:	0692      	lsls	r2, r2, #26
 8011240:	d403      	bmi.n	801124a <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011242:	681a      	ldr	r2, [r3, #0]
 8011244:	2104      	movs	r1, #4
 8011246:	438a      	bics	r2, r1
 8011248:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801124a:	6823      	ldr	r3, [r4, #0]
 801124c:	4a5c      	ldr	r2, [pc, #368]	; (80113c0 <HAL_DMA_IRQHandler+0x5d8>)
 801124e:	4293      	cmp	r3, r2
 8011250:	d800      	bhi.n	8011254 <HAL_DMA_IRQHandler+0x46c>
 8011252:	e0c9      	b.n	80113e8 <HAL_DMA_IRQHandler+0x600>
 8011254:	4a54      	ldr	r2, [pc, #336]	; (80113a8 <HAL_DMA_IRQHandler+0x5c0>)
 8011256:	4293      	cmp	r3, r2
 8011258:	d047      	beq.n	80112ea <HAL_DMA_IRQHandler+0x502>
 801125a:	4a54      	ldr	r2, [pc, #336]	; (80113ac <HAL_DMA_IRQHandler+0x5c4>)
 801125c:	4293      	cmp	r3, r2
 801125e:	d100      	bne.n	8011262 <HAL_DMA_IRQHandler+0x47a>
 8011260:	e089      	b.n	8011376 <HAL_DMA_IRQHandler+0x58e>
 8011262:	4a53      	ldr	r2, [pc, #332]	; (80113b0 <HAL_DMA_IRQHandler+0x5c8>)
 8011264:	4293      	cmp	r3, r2
 8011266:	d100      	bne.n	801126a <HAL_DMA_IRQHandler+0x482>
 8011268:	e087      	b.n	801137a <HAL_DMA_IRQHandler+0x592>
 801126a:	4a52      	ldr	r2, [pc, #328]	; (80113b4 <HAL_DMA_IRQHandler+0x5cc>)
 801126c:	4293      	cmp	r3, r2
 801126e:	d100      	bne.n	8011272 <HAL_DMA_IRQHandler+0x48a>
 8011270:	e086      	b.n	8011380 <HAL_DMA_IRQHandler+0x598>
 8011272:	4a51      	ldr	r2, [pc, #324]	; (80113b8 <HAL_DMA_IRQHandler+0x5d0>)
 8011274:	4293      	cmp	r3, r2
 8011276:	d100      	bne.n	801127a <HAL_DMA_IRQHandler+0x492>
 8011278:	e085      	b.n	8011386 <HAL_DMA_IRQHandler+0x59e>
 801127a:	4a50      	ldr	r2, [pc, #320]	; (80113bc <HAL_DMA_IRQHandler+0x5d4>)
 801127c:	4293      	cmp	r3, r2
 801127e:	d100      	bne.n	8011282 <HAL_DMA_IRQHandler+0x49a>
 8011280:	e084      	b.n	801138c <HAL_DMA_IRQHandler+0x5a4>
 8011282:	4a4f      	ldr	r2, [pc, #316]	; (80113c0 <HAL_DMA_IRQHandler+0x5d8>)
 8011284:	4293      	cmp	r3, r2
 8011286:	d100      	bne.n	801128a <HAL_DMA_IRQHandler+0x4a2>
 8011288:	e083      	b.n	8011392 <HAL_DMA_IRQHandler+0x5aa>
 801128a:	4a4e      	ldr	r2, [pc, #312]	; (80113c4 <HAL_DMA_IRQHandler+0x5dc>)
 801128c:	4293      	cmp	r3, r2
 801128e:	d100      	bne.n	8011292 <HAL_DMA_IRQHandler+0x4aa>
 8011290:	e082      	b.n	8011398 <HAL_DMA_IRQHandler+0x5b0>
 8011292:	4a4d      	ldr	r2, [pc, #308]	; (80113c8 <HAL_DMA_IRQHandler+0x5e0>)
 8011294:	4293      	cmp	r3, r2
 8011296:	d100      	bne.n	801129a <HAL_DMA_IRQHandler+0x4b2>
 8011298:	e080      	b.n	801139c <HAL_DMA_IRQHandler+0x5b4>
 801129a:	4a4c      	ldr	r2, [pc, #304]	; (80113cc <HAL_DMA_IRQHandler+0x5e4>)
 801129c:	4293      	cmp	r3, r2
 801129e:	d07f      	beq.n	80113a0 <HAL_DMA_IRQHandler+0x5b8>
 80112a0:	4a4b      	ldr	r2, [pc, #300]	; (80113d0 <HAL_DMA_IRQHandler+0x5e8>)
 80112a2:	4694      	mov	ip, r2
 80112a4:	4463      	add	r3, ip
 80112a6:	425a      	negs	r2, r3
 80112a8:	4153      	adcs	r3, r2
 80112aa:	425b      	negs	r3, r3
 80112ac:	4a4d      	ldr	r2, [pc, #308]	; (80113e4 <HAL_DMA_IRQHandler+0x5fc>)
 80112ae:	4013      	ands	r3, r2
 80112b0:	2280      	movs	r2, #128	; 0x80
 80112b2:	02d2      	lsls	r2, r2, #11
 80112b4:	4694      	mov	ip, r2
 80112b6:	4463      	add	r3, ip
 80112b8:	e018      	b.n	80112ec <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80112ba:	2240      	movs	r2, #64	; 0x40
 80112bc:	e7b8      	b.n	8011230 <HAL_DMA_IRQHandler+0x448>
 80112be:	2280      	movs	r2, #128	; 0x80
 80112c0:	00d2      	lsls	r2, r2, #3
 80112c2:	e7b5      	b.n	8011230 <HAL_DMA_IRQHandler+0x448>
 80112c4:	2280      	movs	r2, #128	; 0x80
 80112c6:	01d2      	lsls	r2, r2, #7
 80112c8:	e7b2      	b.n	8011230 <HAL_DMA_IRQHandler+0x448>
 80112ca:	2280      	movs	r2, #128	; 0x80
 80112cc:	02d2      	lsls	r2, r2, #11
 80112ce:	e7af      	b.n	8011230 <HAL_DMA_IRQHandler+0x448>
 80112d0:	2280      	movs	r2, #128	; 0x80
 80112d2:	03d2      	lsls	r2, r2, #15
 80112d4:	e7ac      	b.n	8011230 <HAL_DMA_IRQHandler+0x448>
 80112d6:	2280      	movs	r2, #128	; 0x80
 80112d8:	04d2      	lsls	r2, r2, #19
 80112da:	e7a9      	b.n	8011230 <HAL_DMA_IRQHandler+0x448>
 80112dc:	2204      	movs	r2, #4
 80112de:	e7a7      	b.n	8011230 <HAL_DMA_IRQHandler+0x448>
 80112e0:	2240      	movs	r2, #64	; 0x40
 80112e2:	e7a5      	b.n	8011230 <HAL_DMA_IRQHandler+0x448>
 80112e4:	2280      	movs	r2, #128	; 0x80
 80112e6:	00d2      	lsls	r2, r2, #3
 80112e8:	e7a2      	b.n	8011230 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80112ea:	2304      	movs	r3, #4
 80112ec:	4a3b      	ldr	r2, [pc, #236]	; (80113dc <HAL_DMA_IRQHandler+0x5f4>)
 80112ee:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80112f0:	2321      	movs	r3, #33	; 0x21
 80112f2:	2211      	movs	r2, #17
 80112f4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80112f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d001      	beq.n	8011300 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 80112fc:	0020      	movs	r0, r4
 80112fe:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011300:	6821      	ldr	r1, [r4, #0]
 8011302:	4b2f      	ldr	r3, [pc, #188]	; (80113c0 <HAL_DMA_IRQHandler+0x5d8>)
 8011304:	4299      	cmp	r1, r3
 8011306:	d900      	bls.n	801130a <HAL_DMA_IRQHandler+0x522>
 8011308:	e743      	b.n	8011192 <HAL_DMA_IRQHandler+0x3aa>
 801130a:	4b33      	ldr	r3, [pc, #204]	; (80113d8 <HAL_DMA_IRQHandler+0x5f0>)
 801130c:	6818      	ldr	r0, [r3, #0]
 801130e:	4a26      	ldr	r2, [pc, #152]	; (80113a8 <HAL_DMA_IRQHandler+0x5c0>)
 8011310:	4291      	cmp	r1, r2
 8011312:	d100      	bne.n	8011316 <HAL_DMA_IRQHandler+0x52e>
 8011314:	e10a      	b.n	801152c <HAL_DMA_IRQHandler+0x744>
 8011316:	4a25      	ldr	r2, [pc, #148]	; (80113ac <HAL_DMA_IRQHandler+0x5c4>)
 8011318:	4291      	cmp	r1, r2
 801131a:	d100      	bne.n	801131e <HAL_DMA_IRQHandler+0x536>
 801131c:	e10c      	b.n	8011538 <HAL_DMA_IRQHandler+0x750>
 801131e:	4a24      	ldr	r2, [pc, #144]	; (80113b0 <HAL_DMA_IRQHandler+0x5c8>)
 8011320:	4291      	cmp	r1, r2
 8011322:	d100      	bne.n	8011326 <HAL_DMA_IRQHandler+0x53e>
 8011324:	e10a      	b.n	801153c <HAL_DMA_IRQHandler+0x754>
 8011326:	4a23      	ldr	r2, [pc, #140]	; (80113b4 <HAL_DMA_IRQHandler+0x5cc>)
 8011328:	4291      	cmp	r1, r2
 801132a:	d100      	bne.n	801132e <HAL_DMA_IRQHandler+0x546>
 801132c:	e109      	b.n	8011542 <HAL_DMA_IRQHandler+0x75a>
 801132e:	4b22      	ldr	r3, [pc, #136]	; (80113b8 <HAL_DMA_IRQHandler+0x5d0>)
 8011330:	4299      	cmp	r1, r3
 8011332:	d100      	bne.n	8011336 <HAL_DMA_IRQHandler+0x54e>
 8011334:	e108      	b.n	8011548 <HAL_DMA_IRQHandler+0x760>
 8011336:	4b21      	ldr	r3, [pc, #132]	; (80113bc <HAL_DMA_IRQHandler+0x5d4>)
 8011338:	4299      	cmp	r1, r3
 801133a:	d100      	bne.n	801133e <HAL_DMA_IRQHandler+0x556>
 801133c:	e107      	b.n	801154e <HAL_DMA_IRQHandler+0x766>
 801133e:	4b20      	ldr	r3, [pc, #128]	; (80113c0 <HAL_DMA_IRQHandler+0x5d8>)
 8011340:	4299      	cmp	r1, r3
 8011342:	d100      	bne.n	8011346 <HAL_DMA_IRQHandler+0x55e>
 8011344:	e106      	b.n	8011554 <HAL_DMA_IRQHandler+0x76c>
 8011346:	4b1f      	ldr	r3, [pc, #124]	; (80113c4 <HAL_DMA_IRQHandler+0x5dc>)
 8011348:	4299      	cmp	r1, r3
 801134a:	d100      	bne.n	801134e <HAL_DMA_IRQHandler+0x566>
 801134c:	e105      	b.n	801155a <HAL_DMA_IRQHandler+0x772>
 801134e:	4b1e      	ldr	r3, [pc, #120]	; (80113c8 <HAL_DMA_IRQHandler+0x5e0>)
 8011350:	4299      	cmp	r1, r3
 8011352:	d100      	bne.n	8011356 <HAL_DMA_IRQHandler+0x56e>
 8011354:	e103      	b.n	801155e <HAL_DMA_IRQHandler+0x776>
 8011356:	4b1d      	ldr	r3, [pc, #116]	; (80113cc <HAL_DMA_IRQHandler+0x5e4>)
 8011358:	4299      	cmp	r1, r3
 801135a:	d100      	bne.n	801135e <HAL_DMA_IRQHandler+0x576>
 801135c:	e101      	b.n	8011562 <HAL_DMA_IRQHandler+0x77a>
 801135e:	4b1c      	ldr	r3, [pc, #112]	; (80113d0 <HAL_DMA_IRQHandler+0x5e8>)
 8011360:	18ca      	adds	r2, r1, r3
 8011362:	4253      	negs	r3, r2
 8011364:	415a      	adcs	r2, r3
 8011366:	4252      	negs	r2, r2
 8011368:	4b1d      	ldr	r3, [pc, #116]	; (80113e0 <HAL_DMA_IRQHandler+0x5f8>)
 801136a:	4013      	ands	r3, r2
 801136c:	2280      	movs	r2, #128	; 0x80
 801136e:	0292      	lsls	r2, r2, #10
 8011370:	4694      	mov	ip, r2
 8011372:	4463      	add	r3, ip
 8011374:	e0db      	b.n	801152e <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011376:	2340      	movs	r3, #64	; 0x40
 8011378:	e7b8      	b.n	80112ec <HAL_DMA_IRQHandler+0x504>
 801137a:	2380      	movs	r3, #128	; 0x80
 801137c:	00db      	lsls	r3, r3, #3
 801137e:	e7b5      	b.n	80112ec <HAL_DMA_IRQHandler+0x504>
 8011380:	2380      	movs	r3, #128	; 0x80
 8011382:	01db      	lsls	r3, r3, #7
 8011384:	e7b2      	b.n	80112ec <HAL_DMA_IRQHandler+0x504>
 8011386:	2380      	movs	r3, #128	; 0x80
 8011388:	02db      	lsls	r3, r3, #11
 801138a:	e7af      	b.n	80112ec <HAL_DMA_IRQHandler+0x504>
 801138c:	2380      	movs	r3, #128	; 0x80
 801138e:	03db      	lsls	r3, r3, #15
 8011390:	e7ac      	b.n	80112ec <HAL_DMA_IRQHandler+0x504>
 8011392:	2380      	movs	r3, #128	; 0x80
 8011394:	04db      	lsls	r3, r3, #19
 8011396:	e7a9      	b.n	80112ec <HAL_DMA_IRQHandler+0x504>
 8011398:	2304      	movs	r3, #4
 801139a:	e7a7      	b.n	80112ec <HAL_DMA_IRQHandler+0x504>
 801139c:	2340      	movs	r3, #64	; 0x40
 801139e:	e7a5      	b.n	80112ec <HAL_DMA_IRQHandler+0x504>
 80113a0:	2380      	movs	r3, #128	; 0x80
 80113a2:	00db      	lsls	r3, r3, #3
 80113a4:	e7a2      	b.n	80112ec <HAL_DMA_IRQHandler+0x504>
 80113a6:	46c0      	nop			; (mov r8, r8)
 80113a8:	40020008 	.word	0x40020008
 80113ac:	4002001c 	.word	0x4002001c
 80113b0:	40020030 	.word	0x40020030
 80113b4:	40020044 	.word	0x40020044
 80113b8:	40020058 	.word	0x40020058
 80113bc:	4002006c 	.word	0x4002006c
 80113c0:	40020080 	.word	0x40020080
 80113c4:	40020408 	.word	0x40020408
 80113c8:	4002041c 	.word	0x4002041c
 80113cc:	40020430 	.word	0x40020430
 80113d0:	bffdfbbc 	.word	0xbffdfbbc
 80113d4:	fff88000 	.word	0xfff88000
 80113d8:	40020000 	.word	0x40020000
 80113dc:	40020400 	.word	0x40020400
 80113e0:	fffe2000 	.word	0xfffe2000
 80113e4:	fffc4000 	.word	0xfffc4000
 80113e8:	4a9b      	ldr	r2, [pc, #620]	; (8011658 <HAL_DMA_IRQHandler+0x870>)
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d027      	beq.n	801143e <HAL_DMA_IRQHandler+0x656>
 80113ee:	4a9b      	ldr	r2, [pc, #620]	; (801165c <HAL_DMA_IRQHandler+0x874>)
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d028      	beq.n	8011446 <HAL_DMA_IRQHandler+0x65e>
 80113f4:	4a9a      	ldr	r2, [pc, #616]	; (8011660 <HAL_DMA_IRQHandler+0x878>)
 80113f6:	4293      	cmp	r3, r2
 80113f8:	d027      	beq.n	801144a <HAL_DMA_IRQHandler+0x662>
 80113fa:	4a9a      	ldr	r2, [pc, #616]	; (8011664 <HAL_DMA_IRQHandler+0x87c>)
 80113fc:	4293      	cmp	r3, r2
 80113fe:	d027      	beq.n	8011450 <HAL_DMA_IRQHandler+0x668>
 8011400:	4a99      	ldr	r2, [pc, #612]	; (8011668 <HAL_DMA_IRQHandler+0x880>)
 8011402:	4293      	cmp	r3, r2
 8011404:	d027      	beq.n	8011456 <HAL_DMA_IRQHandler+0x66e>
 8011406:	4a99      	ldr	r2, [pc, #612]	; (801166c <HAL_DMA_IRQHandler+0x884>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d027      	beq.n	801145c <HAL_DMA_IRQHandler+0x674>
 801140c:	4a98      	ldr	r2, [pc, #608]	; (8011670 <HAL_DMA_IRQHandler+0x888>)
 801140e:	4293      	cmp	r3, r2
 8011410:	d027      	beq.n	8011462 <HAL_DMA_IRQHandler+0x67a>
 8011412:	4a98      	ldr	r2, [pc, #608]	; (8011674 <HAL_DMA_IRQHandler+0x88c>)
 8011414:	4293      	cmp	r3, r2
 8011416:	d027      	beq.n	8011468 <HAL_DMA_IRQHandler+0x680>
 8011418:	4a97      	ldr	r2, [pc, #604]	; (8011678 <HAL_DMA_IRQHandler+0x890>)
 801141a:	4293      	cmp	r3, r2
 801141c:	d026      	beq.n	801146c <HAL_DMA_IRQHandler+0x684>
 801141e:	4a97      	ldr	r2, [pc, #604]	; (801167c <HAL_DMA_IRQHandler+0x894>)
 8011420:	4293      	cmp	r3, r2
 8011422:	d025      	beq.n	8011470 <HAL_DMA_IRQHandler+0x688>
 8011424:	4a96      	ldr	r2, [pc, #600]	; (8011680 <HAL_DMA_IRQHandler+0x898>)
 8011426:	4694      	mov	ip, r2
 8011428:	4463      	add	r3, ip
 801142a:	425a      	negs	r2, r3
 801142c:	4153      	adcs	r3, r2
 801142e:	425b      	negs	r3, r3
 8011430:	4a94      	ldr	r2, [pc, #592]	; (8011684 <HAL_DMA_IRQHandler+0x89c>)
 8011432:	4013      	ands	r3, r2
 8011434:	2280      	movs	r2, #128	; 0x80
 8011436:	02d2      	lsls	r2, r2, #11
 8011438:	4694      	mov	ip, r2
 801143a:	4463      	add	r3, ip
 801143c:	e000      	b.n	8011440 <HAL_DMA_IRQHandler+0x658>
 801143e:	2304      	movs	r3, #4
 8011440:	4a91      	ldr	r2, [pc, #580]	; (8011688 <HAL_DMA_IRQHandler+0x8a0>)
 8011442:	6053      	str	r3, [r2, #4]
 8011444:	e754      	b.n	80112f0 <HAL_DMA_IRQHandler+0x508>
 8011446:	2340      	movs	r3, #64	; 0x40
 8011448:	e7fa      	b.n	8011440 <HAL_DMA_IRQHandler+0x658>
 801144a:	2380      	movs	r3, #128	; 0x80
 801144c:	00db      	lsls	r3, r3, #3
 801144e:	e7f7      	b.n	8011440 <HAL_DMA_IRQHandler+0x658>
 8011450:	2380      	movs	r3, #128	; 0x80
 8011452:	01db      	lsls	r3, r3, #7
 8011454:	e7f4      	b.n	8011440 <HAL_DMA_IRQHandler+0x658>
 8011456:	2380      	movs	r3, #128	; 0x80
 8011458:	02db      	lsls	r3, r3, #11
 801145a:	e7f1      	b.n	8011440 <HAL_DMA_IRQHandler+0x658>
 801145c:	2380      	movs	r3, #128	; 0x80
 801145e:	03db      	lsls	r3, r3, #15
 8011460:	e7ee      	b.n	8011440 <HAL_DMA_IRQHandler+0x658>
 8011462:	2380      	movs	r3, #128	; 0x80
 8011464:	04db      	lsls	r3, r3, #19
 8011466:	e7eb      	b.n	8011440 <HAL_DMA_IRQHandler+0x658>
 8011468:	2304      	movs	r3, #4
 801146a:	e7e9      	b.n	8011440 <HAL_DMA_IRQHandler+0x658>
 801146c:	2340      	movs	r3, #64	; 0x40
 801146e:	e7e7      	b.n	8011440 <HAL_DMA_IRQHandler+0x658>
 8011470:	2380      	movs	r3, #128	; 0x80
 8011472:	00db      	lsls	r3, r3, #3
 8011474:	e7e4      	b.n	8011440 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011476:	2302      	movs	r3, #2
 8011478:	4003      	ands	r3, r0
 801147a:	1e5a      	subs	r2, r3, #1
 801147c:	4193      	sbcs	r3, r2
 801147e:	b2db      	uxtb	r3, r3
 8011480:	2b00      	cmp	r3, #0
 8011482:	d100      	bne.n	8011486 <HAL_DMA_IRQHandler+0x69e>
 8011484:	e080      	b.n	8011588 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011486:	680b      	ldr	r3, [r1, #0]
 8011488:	079b      	lsls	r3, r3, #30
 801148a:	d57d      	bpl.n	8011588 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801148c:	680b      	ldr	r3, [r1, #0]
 801148e:	069b      	lsls	r3, r3, #26
 8011490:	d403      	bmi.n	801149a <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011492:	680b      	ldr	r3, [r1, #0]
 8011494:	2202      	movs	r2, #2
 8011496:	4393      	bics	r3, r2
 8011498:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801149a:	6823      	ldr	r3, [r4, #0]
 801149c:	4a74      	ldr	r2, [pc, #464]	; (8011670 <HAL_DMA_IRQHandler+0x888>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d800      	bhi.n	80114a4 <HAL_DMA_IRQHandler+0x6bc>
 80114a2:	e08a      	b.n	80115ba <HAL_DMA_IRQHandler+0x7d2>
 80114a4:	4a6c      	ldr	r2, [pc, #432]	; (8011658 <HAL_DMA_IRQHandler+0x870>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d05e      	beq.n	8011568 <HAL_DMA_IRQHandler+0x780>
 80114aa:	4a6c      	ldr	r2, [pc, #432]	; (801165c <HAL_DMA_IRQHandler+0x874>)
 80114ac:	4293      	cmp	r3, r2
 80114ae:	d100      	bne.n	80114b2 <HAL_DMA_IRQHandler+0x6ca>
 80114b0:	e06b      	b.n	801158a <HAL_DMA_IRQHandler+0x7a2>
 80114b2:	4a6b      	ldr	r2, [pc, #428]	; (8011660 <HAL_DMA_IRQHandler+0x878>)
 80114b4:	4293      	cmp	r3, r2
 80114b6:	d06a      	beq.n	801158e <HAL_DMA_IRQHandler+0x7a6>
 80114b8:	4a6a      	ldr	r2, [pc, #424]	; (8011664 <HAL_DMA_IRQHandler+0x87c>)
 80114ba:	4293      	cmp	r3, r2
 80114bc:	d06a      	beq.n	8011594 <HAL_DMA_IRQHandler+0x7ac>
 80114be:	4a6a      	ldr	r2, [pc, #424]	; (8011668 <HAL_DMA_IRQHandler+0x880>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d06a      	beq.n	801159a <HAL_DMA_IRQHandler+0x7b2>
 80114c4:	4a69      	ldr	r2, [pc, #420]	; (801166c <HAL_DMA_IRQHandler+0x884>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d06a      	beq.n	80115a0 <HAL_DMA_IRQHandler+0x7b8>
 80114ca:	4a69      	ldr	r2, [pc, #420]	; (8011670 <HAL_DMA_IRQHandler+0x888>)
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d06a      	beq.n	80115a6 <HAL_DMA_IRQHandler+0x7be>
 80114d0:	4a68      	ldr	r2, [pc, #416]	; (8011674 <HAL_DMA_IRQHandler+0x88c>)
 80114d2:	4293      	cmp	r3, r2
 80114d4:	d06a      	beq.n	80115ac <HAL_DMA_IRQHandler+0x7c4>
 80114d6:	4a68      	ldr	r2, [pc, #416]	; (8011678 <HAL_DMA_IRQHandler+0x890>)
 80114d8:	4293      	cmp	r3, r2
 80114da:	d069      	beq.n	80115b0 <HAL_DMA_IRQHandler+0x7c8>
 80114dc:	4a67      	ldr	r2, [pc, #412]	; (801167c <HAL_DMA_IRQHandler+0x894>)
 80114de:	4293      	cmp	r3, r2
 80114e0:	d068      	beq.n	80115b4 <HAL_DMA_IRQHandler+0x7cc>
 80114e2:	4a67      	ldr	r2, [pc, #412]	; (8011680 <HAL_DMA_IRQHandler+0x898>)
 80114e4:	4694      	mov	ip, r2
 80114e6:	4463      	add	r3, ip
 80114e8:	425a      	negs	r2, r3
 80114ea:	4153      	adcs	r3, r2
 80114ec:	425b      	negs	r3, r3
 80114ee:	4a67      	ldr	r2, [pc, #412]	; (801168c <HAL_DMA_IRQHandler+0x8a4>)
 80114f0:	4013      	ands	r3, r2
 80114f2:	2280      	movs	r2, #128	; 0x80
 80114f4:	0292      	lsls	r2, r2, #10
 80114f6:	4694      	mov	ip, r2
 80114f8:	4463      	add	r3, ip
 80114fa:	e036      	b.n	801156a <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80114fc:	2320      	movs	r3, #32
 80114fe:	e7bb      	b.n	8011478 <HAL_DMA_IRQHandler+0x690>
 8011500:	2380      	movs	r3, #128	; 0x80
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	e7b8      	b.n	8011478 <HAL_DMA_IRQHandler+0x690>
 8011506:	2380      	movs	r3, #128	; 0x80
 8011508:	019b      	lsls	r3, r3, #6
 801150a:	e7b5      	b.n	8011478 <HAL_DMA_IRQHandler+0x690>
 801150c:	2380      	movs	r3, #128	; 0x80
 801150e:	029b      	lsls	r3, r3, #10
 8011510:	e7b2      	b.n	8011478 <HAL_DMA_IRQHandler+0x690>
 8011512:	2380      	movs	r3, #128	; 0x80
 8011514:	039b      	lsls	r3, r3, #14
 8011516:	e7af      	b.n	8011478 <HAL_DMA_IRQHandler+0x690>
 8011518:	2380      	movs	r3, #128	; 0x80
 801151a:	049b      	lsls	r3, r3, #18
 801151c:	e7ac      	b.n	8011478 <HAL_DMA_IRQHandler+0x690>
 801151e:	2302      	movs	r3, #2
 8011520:	e7aa      	b.n	8011478 <HAL_DMA_IRQHandler+0x690>
 8011522:	2320      	movs	r3, #32
 8011524:	e7a8      	b.n	8011478 <HAL_DMA_IRQHandler+0x690>
 8011526:	2380      	movs	r3, #128	; 0x80
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	e7a5      	b.n	8011478 <HAL_DMA_IRQHandler+0x690>
 801152c:	2302      	movs	r3, #2
 801152e:	4003      	ands	r3, r0
 8011530:	1e5a      	subs	r2, r3, #1
 8011532:	4193      	sbcs	r3, r2
 8011534:	b2db      	uxtb	r3, r3
 8011536:	e7a3      	b.n	8011480 <HAL_DMA_IRQHandler+0x698>
 8011538:	2320      	movs	r3, #32
 801153a:	e7f8      	b.n	801152e <HAL_DMA_IRQHandler+0x746>
 801153c:	2380      	movs	r3, #128	; 0x80
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	e7f5      	b.n	801152e <HAL_DMA_IRQHandler+0x746>
 8011542:	2380      	movs	r3, #128	; 0x80
 8011544:	019b      	lsls	r3, r3, #6
 8011546:	e7f2      	b.n	801152e <HAL_DMA_IRQHandler+0x746>
 8011548:	2380      	movs	r3, #128	; 0x80
 801154a:	029b      	lsls	r3, r3, #10
 801154c:	e7ef      	b.n	801152e <HAL_DMA_IRQHandler+0x746>
 801154e:	2380      	movs	r3, #128	; 0x80
 8011550:	039b      	lsls	r3, r3, #14
 8011552:	e7ec      	b.n	801152e <HAL_DMA_IRQHandler+0x746>
 8011554:	2380      	movs	r3, #128	; 0x80
 8011556:	049b      	lsls	r3, r3, #18
 8011558:	e7e9      	b.n	801152e <HAL_DMA_IRQHandler+0x746>
 801155a:	2302      	movs	r3, #2
 801155c:	e7e7      	b.n	801152e <HAL_DMA_IRQHandler+0x746>
 801155e:	2320      	movs	r3, #32
 8011560:	e7e5      	b.n	801152e <HAL_DMA_IRQHandler+0x746>
 8011562:	2380      	movs	r3, #128	; 0x80
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	e7e2      	b.n	801152e <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011568:	2302      	movs	r3, #2
 801156a:	4a49      	ldr	r2, [pc, #292]	; (8011690 <HAL_DMA_IRQHandler+0x8a8>)
 801156c:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 801156e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011570:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011572:	2321      	movs	r3, #33	; 0x21
 8011574:	2201      	movs	r2, #1
 8011576:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011578:	3b01      	subs	r3, #1
 801157a:	2200      	movs	r2, #0
 801157c:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801157e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011580:	2b00      	cmp	r3, #0
 8011582:	d001      	beq.n	8011588 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 8011584:	0020      	movs	r0, r4
 8011586:	4798      	blx	r3
}  
 8011588:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801158a:	2320      	movs	r3, #32
 801158c:	e7ed      	b.n	801156a <HAL_DMA_IRQHandler+0x782>
 801158e:	2380      	movs	r3, #128	; 0x80
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	e7ea      	b.n	801156a <HAL_DMA_IRQHandler+0x782>
 8011594:	2380      	movs	r3, #128	; 0x80
 8011596:	019b      	lsls	r3, r3, #6
 8011598:	e7e7      	b.n	801156a <HAL_DMA_IRQHandler+0x782>
 801159a:	2380      	movs	r3, #128	; 0x80
 801159c:	029b      	lsls	r3, r3, #10
 801159e:	e7e4      	b.n	801156a <HAL_DMA_IRQHandler+0x782>
 80115a0:	2380      	movs	r3, #128	; 0x80
 80115a2:	039b      	lsls	r3, r3, #14
 80115a4:	e7e1      	b.n	801156a <HAL_DMA_IRQHandler+0x782>
 80115a6:	2380      	movs	r3, #128	; 0x80
 80115a8:	049b      	lsls	r3, r3, #18
 80115aa:	e7de      	b.n	801156a <HAL_DMA_IRQHandler+0x782>
 80115ac:	2302      	movs	r3, #2
 80115ae:	e7dc      	b.n	801156a <HAL_DMA_IRQHandler+0x782>
 80115b0:	2320      	movs	r3, #32
 80115b2:	e7da      	b.n	801156a <HAL_DMA_IRQHandler+0x782>
 80115b4:	2380      	movs	r3, #128	; 0x80
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	e7d7      	b.n	801156a <HAL_DMA_IRQHandler+0x782>
 80115ba:	4a27      	ldr	r2, [pc, #156]	; (8011658 <HAL_DMA_IRQHandler+0x870>)
 80115bc:	4293      	cmp	r3, r2
 80115be:	d027      	beq.n	8011610 <HAL_DMA_IRQHandler+0x828>
 80115c0:	4a26      	ldr	r2, [pc, #152]	; (801165c <HAL_DMA_IRQHandler+0x874>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d028      	beq.n	8011618 <HAL_DMA_IRQHandler+0x830>
 80115c6:	4a26      	ldr	r2, [pc, #152]	; (8011660 <HAL_DMA_IRQHandler+0x878>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d027      	beq.n	801161c <HAL_DMA_IRQHandler+0x834>
 80115cc:	4a25      	ldr	r2, [pc, #148]	; (8011664 <HAL_DMA_IRQHandler+0x87c>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d027      	beq.n	8011622 <HAL_DMA_IRQHandler+0x83a>
 80115d2:	4a25      	ldr	r2, [pc, #148]	; (8011668 <HAL_DMA_IRQHandler+0x880>)
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d027      	beq.n	8011628 <HAL_DMA_IRQHandler+0x840>
 80115d8:	4a24      	ldr	r2, [pc, #144]	; (801166c <HAL_DMA_IRQHandler+0x884>)
 80115da:	4293      	cmp	r3, r2
 80115dc:	d027      	beq.n	801162e <HAL_DMA_IRQHandler+0x846>
 80115de:	4a24      	ldr	r2, [pc, #144]	; (8011670 <HAL_DMA_IRQHandler+0x888>)
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d027      	beq.n	8011634 <HAL_DMA_IRQHandler+0x84c>
 80115e4:	4a23      	ldr	r2, [pc, #140]	; (8011674 <HAL_DMA_IRQHandler+0x88c>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d027      	beq.n	801163a <HAL_DMA_IRQHandler+0x852>
 80115ea:	4a23      	ldr	r2, [pc, #140]	; (8011678 <HAL_DMA_IRQHandler+0x890>)
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d026      	beq.n	801163e <HAL_DMA_IRQHandler+0x856>
 80115f0:	4a22      	ldr	r2, [pc, #136]	; (801167c <HAL_DMA_IRQHandler+0x894>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d025      	beq.n	8011642 <HAL_DMA_IRQHandler+0x85a>
 80115f6:	4a22      	ldr	r2, [pc, #136]	; (8011680 <HAL_DMA_IRQHandler+0x898>)
 80115f8:	4694      	mov	ip, r2
 80115fa:	4463      	add	r3, ip
 80115fc:	425a      	negs	r2, r3
 80115fe:	4153      	adcs	r3, r2
 8011600:	425b      	negs	r3, r3
 8011602:	4a22      	ldr	r2, [pc, #136]	; (801168c <HAL_DMA_IRQHandler+0x8a4>)
 8011604:	4013      	ands	r3, r2
 8011606:	2280      	movs	r2, #128	; 0x80
 8011608:	0292      	lsls	r2, r2, #10
 801160a:	4694      	mov	ip, r2
 801160c:	4463      	add	r3, ip
 801160e:	e000      	b.n	8011612 <HAL_DMA_IRQHandler+0x82a>
 8011610:	2302      	movs	r3, #2
 8011612:	4a1d      	ldr	r2, [pc, #116]	; (8011688 <HAL_DMA_IRQHandler+0x8a0>)
 8011614:	6053      	str	r3, [r2, #4]
 8011616:	e7aa      	b.n	801156e <HAL_DMA_IRQHandler+0x786>
 8011618:	2320      	movs	r3, #32
 801161a:	e7fa      	b.n	8011612 <HAL_DMA_IRQHandler+0x82a>
 801161c:	2380      	movs	r3, #128	; 0x80
 801161e:	009b      	lsls	r3, r3, #2
 8011620:	e7f7      	b.n	8011612 <HAL_DMA_IRQHandler+0x82a>
 8011622:	2380      	movs	r3, #128	; 0x80
 8011624:	019b      	lsls	r3, r3, #6
 8011626:	e7f4      	b.n	8011612 <HAL_DMA_IRQHandler+0x82a>
 8011628:	2380      	movs	r3, #128	; 0x80
 801162a:	029b      	lsls	r3, r3, #10
 801162c:	e7f1      	b.n	8011612 <HAL_DMA_IRQHandler+0x82a>
 801162e:	2380      	movs	r3, #128	; 0x80
 8011630:	039b      	lsls	r3, r3, #14
 8011632:	e7ee      	b.n	8011612 <HAL_DMA_IRQHandler+0x82a>
 8011634:	2380      	movs	r3, #128	; 0x80
 8011636:	049b      	lsls	r3, r3, #18
 8011638:	e7eb      	b.n	8011612 <HAL_DMA_IRQHandler+0x82a>
 801163a:	2302      	movs	r3, #2
 801163c:	e7e9      	b.n	8011612 <HAL_DMA_IRQHandler+0x82a>
 801163e:	2320      	movs	r3, #32
 8011640:	e7e7      	b.n	8011612 <HAL_DMA_IRQHandler+0x82a>
 8011642:	2380      	movs	r3, #128	; 0x80
 8011644:	009b      	lsls	r3, r3, #2
 8011646:	e7e4      	b.n	8011612 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011648:	6821      	ldr	r1, [r4, #0]
 801164a:	e65e      	b.n	801130a <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801164c:	681a      	ldr	r2, [r3, #0]
 801164e:	0712      	lsls	r2, r2, #28
 8011650:	d500      	bpl.n	8011654 <HAL_DMA_IRQHandler+0x86c>
 8011652:	e49b      	b.n	8010f8c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011654:	6823      	ldr	r3, [r4, #0]
 8011656:	e44b      	b.n	8010ef0 <HAL_DMA_IRQHandler+0x108>
 8011658:	40020008 	.word	0x40020008
 801165c:	4002001c 	.word	0x4002001c
 8011660:	40020030 	.word	0x40020030
 8011664:	40020044 	.word	0x40020044
 8011668:	40020058 	.word	0x40020058
 801166c:	4002006c 	.word	0x4002006c
 8011670:	40020080 	.word	0x40020080
 8011674:	40020408 	.word	0x40020408
 8011678:	4002041c 	.word	0x4002041c
 801167c:	40020430 	.word	0x40020430
 8011680:	bffdfbbc 	.word	0xbffdfbbc
 8011684:	fffc4000 	.word	0xfffc4000
 8011688:	40020000 	.word	0x40020000
 801168c:	fffe2000 	.word	0xfffe2000
 8011690:	40020400 	.word	0x40020400

08011694 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011694:	4b0a      	ldr	r3, [pc, #40]	; (80116c0 <FLASH_SetErrorCode+0x2c>)
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	06db      	lsls	r3, r3, #27
 801169a:	d504      	bpl.n	80116a6 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801169c:	4a09      	ldr	r2, [pc, #36]	; (80116c4 <FLASH_SetErrorCode+0x30>)
 801169e:	69d3      	ldr	r3, [r2, #28]
 80116a0:	2102      	movs	r1, #2
 80116a2:	430b      	orrs	r3, r1
 80116a4:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80116a6:	4b06      	ldr	r3, [pc, #24]	; (80116c0 <FLASH_SetErrorCode+0x2c>)
 80116a8:	68db      	ldr	r3, [r3, #12]
 80116aa:	075b      	lsls	r3, r3, #29
 80116ac:	d504      	bpl.n	80116b8 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80116ae:	4a05      	ldr	r2, [pc, #20]	; (80116c4 <FLASH_SetErrorCode+0x30>)
 80116b0:	69d3      	ldr	r3, [r2, #28]
 80116b2:	2101      	movs	r1, #1
 80116b4:	430b      	orrs	r3, r1
 80116b6:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80116b8:	4b01      	ldr	r3, [pc, #4]	; (80116c0 <FLASH_SetErrorCode+0x2c>)
 80116ba:	2214      	movs	r2, #20
 80116bc:	60da      	str	r2, [r3, #12]
}  
 80116be:	4770      	bx	lr
 80116c0:	40022000 	.word	0x40022000
 80116c4:	20006ef8 	.word	0x20006ef8

080116c8 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80116c8:	4b05      	ldr	r3, [pc, #20]	; (80116e0 <HAL_FLASH_Unlock+0x18>)
 80116ca:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 80116cc:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80116ce:	061b      	lsls	r3, r3, #24
 80116d0:	d505      	bpl.n	80116de <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80116d2:	4b03      	ldr	r3, [pc, #12]	; (80116e0 <HAL_FLASH_Unlock+0x18>)
 80116d4:	4a03      	ldr	r2, [pc, #12]	; (80116e4 <HAL_FLASH_Unlock+0x1c>)
 80116d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80116d8:	4a03      	ldr	r2, [pc, #12]	; (80116e8 <HAL_FLASH_Unlock+0x20>)
 80116da:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80116dc:	2000      	movs	r0, #0
}
 80116de:	4770      	bx	lr
 80116e0:	40022000 	.word	0x40022000
 80116e4:	45670123 	.word	0x45670123
 80116e8:	cdef89ab 	.word	0xcdef89ab

080116ec <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80116ec:	4a03      	ldr	r2, [pc, #12]	; (80116fc <HAL_FLASH_Lock+0x10>)
 80116ee:	6913      	ldr	r3, [r2, #16]
 80116f0:	2180      	movs	r1, #128	; 0x80
 80116f2:	430b      	orrs	r3, r1
 80116f4:	6113      	str	r3, [r2, #16]
}
 80116f6:	2000      	movs	r0, #0
 80116f8:	4770      	bx	lr
 80116fa:	46c0      	nop			; (mov r8, r8)
 80116fc:	40022000 	.word	0x40022000

08011700 <FLASH_WaitForLastOperation>:
{
 8011700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011702:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011704:	f7ff f928 	bl	8010958 <HAL_GetTick>
 8011708:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801170a:	4e13      	ldr	r6, [pc, #76]	; (8011758 <FLASH_WaitForLastOperation+0x58>)
 801170c:	2501      	movs	r5, #1
 801170e:	68f3      	ldr	r3, [r6, #12]
 8011710:	421d      	tst	r5, r3
 8011712:	d00a      	beq.n	801172a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011714:	1c63      	adds	r3, r4, #1
 8011716:	d0fa      	beq.n	801170e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011718:	2c00      	cmp	r4, #0
 801171a:	d01a      	beq.n	8011752 <FLASH_WaitForLastOperation+0x52>
 801171c:	f7ff f91c 	bl	8010958 <HAL_GetTick>
 8011720:	1bc0      	subs	r0, r0, r7
 8011722:	42a0      	cmp	r0, r4
 8011724:	d9f3      	bls.n	801170e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8011726:	2003      	movs	r0, #3
 8011728:	e012      	b.n	8011750 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801172a:	4b0b      	ldr	r3, [pc, #44]	; (8011758 <FLASH_WaitForLastOperation+0x58>)
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	069b      	lsls	r3, r3, #26
 8011730:	d502      	bpl.n	8011738 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011732:	4b09      	ldr	r3, [pc, #36]	; (8011758 <FLASH_WaitForLastOperation+0x58>)
 8011734:	2220      	movs	r2, #32
 8011736:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011738:	4b07      	ldr	r3, [pc, #28]	; (8011758 <FLASH_WaitForLastOperation+0x58>)
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	06db      	lsls	r3, r3, #27
 801173e:	d404      	bmi.n	801174a <FLASH_WaitForLastOperation+0x4a>
 8011740:	4b05      	ldr	r3, [pc, #20]	; (8011758 <FLASH_WaitForLastOperation+0x58>)
 8011742:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011744:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011746:	075b      	lsls	r3, r3, #29
 8011748:	d502      	bpl.n	8011750 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 801174a:	f7ff ffa3 	bl	8011694 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801174e:	2001      	movs	r0, #1
}
 8011750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8011752:	2003      	movs	r0, #3
 8011754:	e7fc      	b.n	8011750 <FLASH_WaitForLastOperation+0x50>
 8011756:	46c0      	nop			; (mov r8, r8)
 8011758:	40022000 	.word	0x40022000

0801175c <HAL_FLASH_Program>:
{
 801175c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801175e:	46de      	mov	lr, fp
 8011760:	4657      	mov	r7, sl
 8011762:	464e      	mov	r6, r9
 8011764:	4645      	mov	r5, r8
 8011766:	b5e0      	push	{r5, r6, r7, lr}
 8011768:	b083      	sub	sp, #12
 801176a:	0004      	movs	r4, r0
 801176c:	000e      	movs	r6, r1
 801176e:	9201      	str	r2, [sp, #4]
 8011770:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011772:	4b2a      	ldr	r3, [pc, #168]	; (801181c <HAL_FLASH_Program+0xc0>)
 8011774:	7e1b      	ldrb	r3, [r3, #24]
 8011776:	2b01      	cmp	r3, #1
 8011778:	d04b      	beq.n	8011812 <HAL_FLASH_Program+0xb6>
 801177a:	4b28      	ldr	r3, [pc, #160]	; (801181c <HAL_FLASH_Program+0xc0>)
 801177c:	2201      	movs	r2, #1
 801177e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011780:	4827      	ldr	r0, [pc, #156]	; (8011820 <HAL_FLASH_Program+0xc4>)
 8011782:	f7ff ffbd 	bl	8011700 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011786:	2800      	cmp	r0, #0
 8011788:	d139      	bne.n	80117fe <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801178a:	2c01      	cmp	r4, #1
 801178c:	d043      	beq.n	8011816 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 801178e:	3c02      	subs	r4, #2
 8011790:	4263      	negs	r3, r4
 8011792:	415c      	adcs	r4, r3
 8011794:	4264      	negs	r4, r4
 8011796:	2301      	movs	r3, #1
 8011798:	439c      	bics	r4, r3
 801179a:	46a0      	mov	r8, r4
 801179c:	3303      	adds	r3, #3
 801179e:	469c      	mov	ip, r3
 80117a0:	44e0      	add	r8, ip
{
 80117a2:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80117a4:	4b1d      	ldr	r3, [pc, #116]	; (801181c <HAL_FLASH_Program+0xc0>)
 80117a6:	469b      	mov	fp, r3
 80117a8:	2300      	movs	r3, #0
 80117aa:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80117ac:	4c1d      	ldr	r4, [pc, #116]	; (8011824 <HAL_FLASH_Program+0xc8>)
 80117ae:	e01e      	b.n	80117ee <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80117b0:	2220      	movs	r2, #32
 80117b2:	1ad2      	subs	r2, r2, r3
 80117b4:	4649      	mov	r1, r9
 80117b6:	4091      	lsls	r1, r2
 80117b8:	000a      	movs	r2, r1
 80117ba:	9901      	ldr	r1, [sp, #4]
 80117bc:	40d9      	lsrs	r1, r3
 80117be:	000b      	movs	r3, r1
 80117c0:	4313      	orrs	r3, r2
 80117c2:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80117c4:	465a      	mov	r2, fp
 80117c6:	4651      	mov	r1, sl
 80117c8:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80117ca:	6922      	ldr	r2, [r4, #16]
 80117cc:	2701      	movs	r7, #1
 80117ce:	433a      	orrs	r2, r7
 80117d0:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 80117d2:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80117d4:	4812      	ldr	r0, [pc, #72]	; (8011820 <HAL_FLASH_Program+0xc4>)
 80117d6:	f7ff ff93 	bl	8011700 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80117da:	6923      	ldr	r3, [r4, #16]
 80117dc:	43bb      	bics	r3, r7
 80117de:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d10c      	bne.n	80117fe <HAL_FLASH_Program+0xa2>
 80117e4:	3501      	adds	r5, #1
 80117e6:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 80117e8:	b2eb      	uxtb	r3, r5
 80117ea:	4598      	cmp	r8, r3
 80117ec:	d907      	bls.n	80117fe <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80117ee:	012b      	lsls	r3, r5, #4
 80117f0:	2220      	movs	r2, #32
 80117f2:	4252      	negs	r2, r2
 80117f4:	189a      	adds	r2, r3, r2
 80117f6:	d4db      	bmi.n	80117b0 <HAL_FLASH_Program+0x54>
 80117f8:	464b      	mov	r3, r9
 80117fa:	40d3      	lsrs	r3, r2
 80117fc:	e7e1      	b.n	80117c2 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 80117fe:	4b07      	ldr	r3, [pc, #28]	; (801181c <HAL_FLASH_Program+0xc0>)
 8011800:	2200      	movs	r2, #0
 8011802:	761a      	strb	r2, [r3, #24]
}
 8011804:	b003      	add	sp, #12
 8011806:	bc3c      	pop	{r2, r3, r4, r5}
 8011808:	4690      	mov	r8, r2
 801180a:	4699      	mov	r9, r3
 801180c:	46a2      	mov	sl, r4
 801180e:	46ab      	mov	fp, r5
 8011810:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011812:	2002      	movs	r0, #2
 8011814:	e7f6      	b.n	8011804 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8011816:	2301      	movs	r3, #1
 8011818:	4698      	mov	r8, r3
 801181a:	e7c2      	b.n	80117a2 <HAL_FLASH_Program+0x46>
 801181c:	20006ef8 	.word	0x20006ef8
 8011820:	0000c350 	.word	0x0000c350
 8011824:	40022000 	.word	0x40022000

08011828 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011828:	4b06      	ldr	r3, [pc, #24]	; (8011844 <FLASH_MassErase+0x1c>)
 801182a:	2200      	movs	r2, #0
 801182c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 801182e:	4b06      	ldr	r3, [pc, #24]	; (8011848 <FLASH_MassErase+0x20>)
 8011830:	691a      	ldr	r2, [r3, #16]
 8011832:	2104      	movs	r1, #4
 8011834:	430a      	orrs	r2, r1
 8011836:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011838:	691a      	ldr	r2, [r3, #16]
 801183a:	313c      	adds	r1, #60	; 0x3c
 801183c:	430a      	orrs	r2, r1
 801183e:	611a      	str	r2, [r3, #16]
}
 8011840:	4770      	bx	lr
 8011842:	46c0      	nop			; (mov r8, r8)
 8011844:	20006ef8 	.word	0x20006ef8
 8011848:	40022000 	.word	0x40022000

0801184c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801184c:	4b06      	ldr	r3, [pc, #24]	; (8011868 <FLASH_PageErase+0x1c>)
 801184e:	2200      	movs	r2, #0
 8011850:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011852:	4b06      	ldr	r3, [pc, #24]	; (801186c <FLASH_PageErase+0x20>)
 8011854:	691a      	ldr	r2, [r3, #16]
 8011856:	2102      	movs	r1, #2
 8011858:	430a      	orrs	r2, r1
 801185a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 801185c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801185e:	691a      	ldr	r2, [r3, #16]
 8011860:	313e      	adds	r1, #62	; 0x3e
 8011862:	430a      	orrs	r2, r1
 8011864:	611a      	str	r2, [r3, #16]
}
 8011866:	4770      	bx	lr
 8011868:	20006ef8 	.word	0x20006ef8
 801186c:	40022000 	.word	0x40022000

08011870 <HAL_FLASHEx_Erase>:
{
 8011870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011872:	46c6      	mov	lr, r8
 8011874:	b500      	push	{lr}
 8011876:	0006      	movs	r6, r0
 8011878:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 801187a:	4b2a      	ldr	r3, [pc, #168]	; (8011924 <HAL_FLASHEx_Erase+0xb4>)
 801187c:	7e1b      	ldrb	r3, [r3, #24]
 801187e:	2b01      	cmp	r3, #1
 8011880:	d04d      	beq.n	801191e <HAL_FLASHEx_Erase+0xae>
 8011882:	4b28      	ldr	r3, [pc, #160]	; (8011924 <HAL_FLASHEx_Erase+0xb4>)
 8011884:	2201      	movs	r2, #1
 8011886:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011888:	6803      	ldr	r3, [r0, #0]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d029      	beq.n	80118e2 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801188e:	4826      	ldr	r0, [pc, #152]	; (8011928 <HAL_FLASHEx_Erase+0xb8>)
 8011890:	f7ff ff36 	bl	8011700 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011894:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011896:	2800      	cmp	r0, #0
 8011898:	d129      	bne.n	80118ee <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 801189a:	2301      	movs	r3, #1
 801189c:	425b      	negs	r3, r3
 801189e:	4642      	mov	r2, r8
 80118a0:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 80118a2:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80118a4:	68b3      	ldr	r3, [r6, #8]
 80118a6:	02db      	lsls	r3, r3, #11
 80118a8:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 80118aa:	429c      	cmp	r4, r3
 80118ac:	d235      	bcs.n	801191a <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80118ae:	4f1f      	ldr	r7, [pc, #124]	; (801192c <HAL_FLASHEx_Erase+0xbc>)
 80118b0:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 80118b2:	0020      	movs	r0, r4
 80118b4:	f7ff ffca 	bl	801184c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80118b8:	481b      	ldr	r0, [pc, #108]	; (8011928 <HAL_FLASHEx_Erase+0xb8>)
 80118ba:	f7ff ff21 	bl	8011700 <FLASH_WaitForLastOperation>
 80118be:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	43ab      	bics	r3, r5
 80118c4:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 80118c6:	2800      	cmp	r0, #0
 80118c8:	d124      	bne.n	8011914 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 80118ca:	2380      	movs	r3, #128	; 0x80
 80118cc:	011b      	lsls	r3, r3, #4
 80118ce:	469c      	mov	ip, r3
 80118d0:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80118d2:	68b3      	ldr	r3, [r6, #8]
 80118d4:	02db      	lsls	r3, r3, #11
 80118d6:	6871      	ldr	r1, [r6, #4]
 80118d8:	468c      	mov	ip, r1
 80118da:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80118dc:	42a3      	cmp	r3, r4
 80118de:	d8e8      	bhi.n	80118b2 <HAL_FLASHEx_Erase+0x42>
 80118e0:	e005      	b.n	80118ee <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80118e2:	4811      	ldr	r0, [pc, #68]	; (8011928 <HAL_FLASHEx_Erase+0xb8>)
 80118e4:	f7ff ff0c 	bl	8011700 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 80118e8:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d006      	beq.n	80118fc <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 80118ee:	4b0d      	ldr	r3, [pc, #52]	; (8011924 <HAL_FLASHEx_Erase+0xb4>)
 80118f0:	2100      	movs	r1, #0
 80118f2:	7619      	strb	r1, [r3, #24]
}
 80118f4:	0010      	movs	r0, r2
 80118f6:	bc04      	pop	{r2}
 80118f8:	4690      	mov	r8, r2
 80118fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 80118fc:	f7ff ff94 	bl	8011828 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011900:	4809      	ldr	r0, [pc, #36]	; (8011928 <HAL_FLASHEx_Erase+0xb8>)
 8011902:	f7ff fefd 	bl	8011700 <FLASH_WaitForLastOperation>
 8011906:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011908:	4908      	ldr	r1, [pc, #32]	; (801192c <HAL_FLASHEx_Erase+0xbc>)
 801190a:	690b      	ldr	r3, [r1, #16]
 801190c:	2004      	movs	r0, #4
 801190e:	4383      	bics	r3, r0
 8011910:	610b      	str	r3, [r1, #16]
 8011912:	e7ec      	b.n	80118ee <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8011914:	4643      	mov	r3, r8
 8011916:	601c      	str	r4, [r3, #0]
            break;
 8011918:	e7e9      	b.n	80118ee <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 801191a:	2201      	movs	r2, #1
 801191c:	e7e7      	b.n	80118ee <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 801191e:	2202      	movs	r2, #2
 8011920:	e7e8      	b.n	80118f4 <HAL_FLASHEx_Erase+0x84>
 8011922:	46c0      	nop			; (mov r8, r8)
 8011924:	20006ef8 	.word	0x20006ef8
 8011928:	0000c350 	.word	0x0000c350
 801192c:	40022000 	.word	0x40022000

08011930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011932:	46de      	mov	lr, fp
 8011934:	4657      	mov	r7, sl
 8011936:	464e      	mov	r6, r9
 8011938:	4645      	mov	r5, r8
 801193a:	b5e0      	push	{r5, r6, r7, lr}
 801193c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 801193e:	680a      	ldr	r2, [r1, #0]
 8011940:	2a00      	cmp	r2, #0
 8011942:	d100      	bne.n	8011946 <HAL_GPIO_Init+0x16>
 8011944:	e0bf      	b.n	8011ac6 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 8011946:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011948:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801194a:	2410      	movs	r4, #16
 801194c:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801194e:	3c0d      	subs	r4, #13
 8011950:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011952:	2480      	movs	r4, #128	; 0x80
 8011954:	0564      	lsls	r4, r4, #21
 8011956:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011958:	4c5e      	ldr	r4, [pc, #376]	; (8011ad4 <HAL_GPIO_Init+0x1a4>)
 801195a:	1904      	adds	r4, r0, r4
 801195c:	1e65      	subs	r5, r4, #1
 801195e:	41ac      	sbcs	r4, r5
 8011960:	3404      	adds	r4, #4
 8011962:	46a1      	mov	r9, r4
 8011964:	e03b      	b.n	80119de <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 8011966:	08dc      	lsrs	r4, r3, #3
 8011968:	00a4      	lsls	r4, r4, #2
 801196a:	1904      	adds	r4, r0, r4
 801196c:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801196e:	2507      	movs	r5, #7
 8011970:	401d      	ands	r5, r3
 8011972:	00ad      	lsls	r5, r5, #2
 8011974:	220f      	movs	r2, #15
 8011976:	40aa      	lsls	r2, r5
 8011978:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 801197a:	690a      	ldr	r2, [r1, #16]
 801197c:	40aa      	lsls	r2, r5
 801197e:	0015      	movs	r5, r2
 8011980:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8011982:	6225      	str	r5, [r4, #32]
 8011984:	e035      	b.n	80119f2 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011986:	2500      	movs	r5, #0
 8011988:	465a      	mov	r2, fp
 801198a:	4095      	lsls	r5, r2
 801198c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 801198e:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011990:	4c51      	ldr	r4, [pc, #324]	; (8011ad8 <HAL_GPIO_Init+0x1a8>)
 8011992:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011994:	9a01      	ldr	r2, [sp, #4]
 8011996:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011998:	684a      	ldr	r2, [r1, #4]
 801199a:	03d2      	lsls	r2, r2, #15
 801199c:	d500      	bpl.n	80119a0 <HAL_GPIO_Init+0x70>
 801199e:	e086      	b.n	8011aae <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80119a0:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80119a2:	4f4d      	ldr	r7, [pc, #308]	; (8011ad8 <HAL_GPIO_Init+0x1a8>)
 80119a4:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 80119a6:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80119a8:	684a      	ldr	r2, [r1, #4]
 80119aa:	0392      	lsls	r2, r2, #14
 80119ac:	d500      	bpl.n	80119b0 <HAL_GPIO_Init+0x80>
 80119ae:	e081      	b.n	8011ab4 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80119b0:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80119b2:	4f49      	ldr	r7, [pc, #292]	; (8011ad8 <HAL_GPIO_Init+0x1a8>)
 80119b4:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80119b6:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80119b8:	684a      	ldr	r2, [r1, #4]
 80119ba:	02d2      	lsls	r2, r2, #11
 80119bc:	d47d      	bmi.n	8011aba <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80119be:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 80119c0:	4f45      	ldr	r7, [pc, #276]	; (8011ad8 <HAL_GPIO_Init+0x1a8>)
 80119c2:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 80119c4:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80119c6:	684a      	ldr	r2, [r1, #4]
 80119c8:	0292      	lsls	r2, r2, #10
 80119ca:	d479      	bmi.n	8011ac0 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80119cc:	0022      	movs	r2, r4
 80119ce:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80119d0:	4c41      	ldr	r4, [pc, #260]	; (8011ad8 <HAL_GPIO_Init+0x1a8>)
 80119d2:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 80119d4:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 80119d6:	680a      	ldr	r2, [r1, #0]
 80119d8:	0014      	movs	r4, r2
 80119da:	40dc      	lsrs	r4, r3
 80119dc:	d073      	beq.n	8011ac6 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80119de:	0034      	movs	r4, r6
 80119e0:	409c      	lsls	r4, r3
 80119e2:	4022      	ands	r2, r4
 80119e4:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 80119e6:	d0f5      	beq.n	80119d4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80119e8:	684c      	ldr	r4, [r1, #4]
 80119ea:	4642      	mov	r2, r8
 80119ec:	4394      	bics	r4, r2
 80119ee:	2c02      	cmp	r4, #2
 80119f0:	d0b9      	beq.n	8011966 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80119f2:	6804      	ldr	r4, [r0, #0]
 80119f4:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80119f6:	4665      	mov	r5, ip
 80119f8:	40bd      	lsls	r5, r7
 80119fa:	43ed      	mvns	r5, r5
 80119fc:	402c      	ands	r4, r5
 80119fe:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011a00:	684c      	ldr	r4, [r1, #4]
 8011a02:	4662      	mov	r2, ip
 8011a04:	4014      	ands	r4, r2
 8011a06:	40bc      	lsls	r4, r7
 8011a08:	465a      	mov	r2, fp
 8011a0a:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8011a0c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011a0e:	684c      	ldr	r4, [r1, #4]
 8011a10:	4642      	mov	r2, r8
 8011a12:	4394      	bics	r4, r2
 8011a14:	3c01      	subs	r4, #1
 8011a16:	2c01      	cmp	r4, #1
 8011a18:	d813      	bhi.n	8011a42 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8011a1a:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011a1c:	402c      	ands	r4, r5
 8011a1e:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011a20:	68cc      	ldr	r4, [r1, #12]
 8011a22:	40bc      	lsls	r4, r7
 8011a24:	465a      	mov	r2, fp
 8011a26:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8011a28:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8011a2a:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011a2c:	0032      	movs	r2, r6
 8011a2e:	409a      	lsls	r2, r3
 8011a30:	4394      	bics	r4, r2
 8011a32:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011a34:	684a      	ldr	r2, [r1, #4]
 8011a36:	0914      	lsrs	r4, r2, #4
 8011a38:	4034      	ands	r4, r6
 8011a3a:	409c      	lsls	r4, r3
 8011a3c:	465a      	mov	r2, fp
 8011a3e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8011a40:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8011a42:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011a44:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011a46:	688d      	ldr	r5, [r1, #8]
 8011a48:	40bd      	lsls	r5, r7
 8011a4a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8011a4c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011a4e:	684a      	ldr	r2, [r1, #4]
 8011a50:	4654      	mov	r4, sl
 8011a52:	4222      	tst	r2, r4
 8011a54:	d0be      	beq.n	80119d4 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011a56:	4c21      	ldr	r4, [pc, #132]	; (8011adc <HAL_GPIO_Init+0x1ac>)
 8011a58:	69a5      	ldr	r5, [r4, #24]
 8011a5a:	4335      	orrs	r5, r6
 8011a5c:	61a5      	str	r5, [r4, #24]
 8011a5e:	69a4      	ldr	r4, [r4, #24]
 8011a60:	4034      	ands	r4, r6
 8011a62:	9403      	str	r4, [sp, #12]
 8011a64:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011a66:	089c      	lsrs	r4, r3, #2
 8011a68:	00a4      	lsls	r4, r4, #2
 8011a6a:	4a1d      	ldr	r2, [pc, #116]	; (8011ae0 <HAL_GPIO_Init+0x1b0>)
 8011a6c:	4693      	mov	fp, r2
 8011a6e:	445c      	add	r4, fp
 8011a70:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011a72:	4667      	mov	r7, ip
 8011a74:	401f      	ands	r7, r3
 8011a76:	00ba      	lsls	r2, r7, #2
 8011a78:	4693      	mov	fp, r2
 8011a7a:	270f      	movs	r7, #15
 8011a7c:	4097      	lsls	r7, r2
 8011a7e:	43bd      	bics	r5, r7
 8011a80:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011a82:	2590      	movs	r5, #144	; 0x90
 8011a84:	05ed      	lsls	r5, r5, #23
 8011a86:	42a8      	cmp	r0, r5
 8011a88:	d100      	bne.n	8011a8c <HAL_GPIO_Init+0x15c>
 8011a8a:	e77c      	b.n	8011986 <HAL_GPIO_Init+0x56>
 8011a8c:	4d15      	ldr	r5, [pc, #84]	; (8011ae4 <HAL_GPIO_Init+0x1b4>)
 8011a8e:	42a8      	cmp	r0, r5
 8011a90:	d007      	beq.n	8011aa2 <HAL_GPIO_Init+0x172>
 8011a92:	4d15      	ldr	r5, [pc, #84]	; (8011ae8 <HAL_GPIO_Init+0x1b8>)
 8011a94:	42a8      	cmp	r0, r5
 8011a96:	d006      	beq.n	8011aa6 <HAL_GPIO_Init+0x176>
 8011a98:	4d14      	ldr	r5, [pc, #80]	; (8011aec <HAL_GPIO_Init+0x1bc>)
 8011a9a:	42a8      	cmp	r0, r5
 8011a9c:	d005      	beq.n	8011aaa <HAL_GPIO_Init+0x17a>
 8011a9e:	464d      	mov	r5, r9
 8011aa0:	e772      	b.n	8011988 <HAL_GPIO_Init+0x58>
 8011aa2:	0035      	movs	r5, r6
 8011aa4:	e770      	b.n	8011988 <HAL_GPIO_Init+0x58>
 8011aa6:	2502      	movs	r5, #2
 8011aa8:	e76e      	b.n	8011988 <HAL_GPIO_Init+0x58>
 8011aaa:	4665      	mov	r5, ip
 8011aac:	e76c      	b.n	8011988 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8011aae:	9a01      	ldr	r2, [sp, #4]
 8011ab0:	4314      	orrs	r4, r2
 8011ab2:	e776      	b.n	80119a2 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8011ab4:	9a01      	ldr	r2, [sp, #4]
 8011ab6:	4314      	orrs	r4, r2
 8011ab8:	e77b      	b.n	80119b2 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 8011aba:	9a01      	ldr	r2, [sp, #4]
 8011abc:	4314      	orrs	r4, r2
 8011abe:	e77f      	b.n	80119c0 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8011ac0:	9a01      	ldr	r2, [sp, #4]
 8011ac2:	4322      	orrs	r2, r4
 8011ac4:	e784      	b.n	80119d0 <HAL_GPIO_Init+0xa0>
  } 
}
 8011ac6:	b005      	add	sp, #20
 8011ac8:	bc3c      	pop	{r2, r3, r4, r5}
 8011aca:	4690      	mov	r8, r2
 8011acc:	4699      	mov	r9, r3
 8011ace:	46a2      	mov	sl, r4
 8011ad0:	46ab      	mov	fp, r5
 8011ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ad4:	b7fff000 	.word	0xb7fff000
 8011ad8:	40010400 	.word	0x40010400
 8011adc:	40021000 	.word	0x40021000
 8011ae0:	40010000 	.word	0x40010000
 8011ae4:	48000400 	.word	0x48000400
 8011ae8:	48000800 	.word	0x48000800
 8011aec:	48000c00 	.word	0x48000c00

08011af0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011af0:	6900      	ldr	r0, [r0, #16]
 8011af2:	4008      	ands	r0, r1
 8011af4:	1e41      	subs	r1, r0, #1
 8011af6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011af8:	b2c0      	uxtb	r0, r0
  }
 8011afa:	4770      	bx	lr

08011afc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011afc:	2a00      	cmp	r2, #0
 8011afe:	d101      	bne.n	8011b04 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011b00:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8011b02:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011b04:	6181      	str	r1, [r0, #24]
 8011b06:	e7fc      	b.n	8011b02 <HAL_GPIO_WritePin+0x6>

08011b08 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011b08:	6943      	ldr	r3, [r0, #20]
 8011b0a:	4059      	eors	r1, r3
 8011b0c:	6141      	str	r1, [r0, #20]
}
 8011b0e:	4770      	bx	lr

08011b10 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8011b10:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8011b12:	6804      	ldr	r4, [r0, #0]
 8011b14:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8011b16:	4d06      	ldr	r5, [pc, #24]	; (8011b30 <I2C_TransferConfig+0x20>)
 8011b18:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8011b1a:	0412      	lsls	r2, r2, #16
 8011b1c:	9d03      	ldr	r5, [sp, #12]
 8011b1e:	432b      	orrs	r3, r5
 8011b20:	431a      	orrs	r2, r3
 8011b22:	0589      	lsls	r1, r1, #22
 8011b24:	0d89      	lsrs	r1, r1, #22
 8011b26:	430a      	orrs	r2, r1
 8011b28:	4302      	orrs	r2, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8011b2a:	6062      	str	r2, [r4, #4]
}  
 8011b2c:	bd30      	pop	{r4, r5, pc}
 8011b2e:	46c0      	nop			; (mov r8, r8)
 8011b30:	fc009800 	.word	0xfc009800

08011b34 <I2C_IsAcknowledgeFailed>:
{
 8011b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b36:	0007      	movs	r7, r0
 8011b38:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 8011b3a:	f7fe ff0d 	bl	8010958 <HAL_GetTick>
 8011b3e:	0005      	movs	r5, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	699a      	ldr	r2, [r3, #24]
  return HAL_OK;      
 8011b44:	2000      	movs	r0, #0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011b46:	06d2      	lsls	r2, r2, #27
 8011b48:	d53c      	bpl.n	8011bc4 <I2C_IsAcknowledgeFailed+0x90>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8011b4a:	2235      	movs	r2, #53	; 0x35
 8011b4c:	5cba      	ldrb	r2, [r7, r2]
 8011b4e:	2a12      	cmp	r2, #18
 8011b50:	d007      	beq.n	8011b62 <I2C_IsAcknowledgeFailed+0x2e>
 8011b52:	2235      	movs	r2, #53	; 0x35
 8011b54:	5cba      	ldrb	r2, [r7, r2]
 8011b56:	2a52      	cmp	r2, #82	; 0x52
 8011b58:	d003      	beq.n	8011b62 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8011b5a:	2235      	movs	r2, #53	; 0x35
 8011b5c:	5cba      	ldrb	r2, [r7, r2]
 8011b5e:	2a62      	cmp	r2, #98	; 0x62
 8011b60:	d107      	bne.n	8011b72 <I2C_IsAcknowledgeFailed+0x3e>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8011b62:	685a      	ldr	r2, [r3, #4]
 8011b64:	0192      	lsls	r2, r2, #6
 8011b66:	d404      	bmi.n	8011b72 <I2C_IsAcknowledgeFailed+0x3e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011b68:	6859      	ldr	r1, [r3, #4]
 8011b6a:	2280      	movs	r2, #128	; 0x80
 8011b6c:	01d2      	lsls	r2, r2, #7
 8011b6e:	430a      	orrs	r2, r1
 8011b70:	605a      	str	r2, [r3, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011b72:	2620      	movs	r6, #32
 8011b74:	683a      	ldr	r2, [r7, #0]
 8011b76:	6993      	ldr	r3, [r2, #24]
 8011b78:	421e      	tst	r6, r3
 8011b7a:	d110      	bne.n	8011b9e <I2C_IsAcknowledgeFailed+0x6a>
      if(Timeout != HAL_MAX_DELAY)
 8011b7c:	1c63      	adds	r3, r4, #1
 8011b7e:	d0fa      	beq.n	8011b76 <I2C_IsAcknowledgeFailed+0x42>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011b80:	2c00      	cmp	r4, #0
 8011b82:	d004      	beq.n	8011b8e <I2C_IsAcknowledgeFailed+0x5a>
 8011b84:	f7fe fee8 	bl	8010958 <HAL_GetTick>
 8011b88:	1b40      	subs	r0, r0, r5
 8011b8a:	42a0      	cmp	r0, r4
 8011b8c:	d9f2      	bls.n	8011b74 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->State= HAL_I2C_STATE_READY;
 8011b8e:	2335      	movs	r3, #53	; 0x35
 8011b90:	2201      	movs	r2, #1
 8011b92:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 8011b94:	3b01      	subs	r3, #1
 8011b96:	2200      	movs	r2, #0
 8011b98:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8011b9a:	2003      	movs	r0, #3
 8011b9c:	e012      	b.n	8011bc4 <I2C_IsAcknowledgeFailed+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b9e:	2310      	movs	r3, #16
 8011ba0:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	2220      	movs	r2, #32
 8011ba6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8011ba8:	683a      	ldr	r2, [r7, #0]
 8011baa:	6853      	ldr	r3, [r2, #4]
 8011bac:	4906      	ldr	r1, [pc, #24]	; (8011bc8 <I2C_IsAcknowledgeFailed+0x94>)
 8011bae:	400b      	ands	r3, r1
 8011bb0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011bb2:	2304      	movs	r3, #4
 8011bb4:	63bb      	str	r3, [r7, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 8011bb6:	3331      	adds	r3, #49	; 0x31
 8011bb8:	2201      	movs	r2, #1
 8011bba:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 8011bbc:	3b01      	subs	r3, #1
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	54fa      	strb	r2, [r7, r3]
    return HAL_ERROR;
 8011bc2:	2001      	movs	r0, #1
}
 8011bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bc6:	46c0      	nop			; (mov r8, r8)
 8011bc8:	fe00e800 	.word	0xfe00e800

08011bcc <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 8011bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bce:	0004      	movs	r4, r0
 8011bd0:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8011bd2:	f7fe fec1 	bl	8010958 <HAL_GetTick>
 8011bd6:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011bd8:	2702      	movs	r7, #2
 8011bda:	6823      	ldr	r3, [r4, #0]
 8011bdc:	699b      	ldr	r3, [r3, #24]
 8011bde:	421f      	tst	r7, r3
 8011be0:	d11a      	bne.n	8011c18 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8011be2:	0029      	movs	r1, r5
 8011be4:	0020      	movs	r0, r4
 8011be6:	f7ff ffa5 	bl	8011b34 <I2C_IsAcknowledgeFailed>
 8011bea:	2800      	cmp	r0, #0
 8011bec:	d116      	bne.n	8011c1c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8011bee:	1c6b      	adds	r3, r5, #1
 8011bf0:	d0f3      	beq.n	8011bda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011bf2:	2d00      	cmp	r5, #0
 8011bf4:	d004      	beq.n	8011c00 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 8011bf6:	f7fe feaf 	bl	8010958 <HAL_GetTick>
 8011bfa:	1b80      	subs	r0, r0, r6
 8011bfc:	42a8      	cmp	r0, r5
 8011bfe:	d9ec      	bls.n	8011bda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011c00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011c02:	2220      	movs	r2, #32
 8011c04:	4313      	orrs	r3, r2
 8011c06:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 8011c08:	2335      	movs	r3, #53	; 0x35
 8011c0a:	3a1f      	subs	r2, #31
 8011c0c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8011c0e:	3b01      	subs	r3, #1
 8011c10:	2200      	movs	r2, #0
 8011c12:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8011c14:	2003      	movs	r0, #3
 8011c16:	e000      	b.n	8011c1a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;      
 8011c18:	2000      	movs	r0, #0
}
 8011c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011c1c:	2001      	movs	r0, #1
 8011c1e:	e7fc      	b.n	8011c1a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08011c20 <I2C_WaitOnFlagUntilTimeout>:
{  
 8011c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c22:	46c6      	mov	lr, r8
 8011c24:	b500      	push	{lr}
 8011c26:	0006      	movs	r6, r0
 8011c28:	000c      	movs	r4, r1
 8011c2a:	0017      	movs	r7, r2
 8011c2c:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8011c2e:	f7fe fe93 	bl	8010958 <HAL_GetTick>
 8011c32:	4680      	mov	r8, r0
  if(Status == RESET)
 8011c34:	2f00      	cmp	r7, #0
 8011c36:	d118      	bne.n	8011c6a <I2C_WaitOnFlagUntilTimeout+0x4a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011c38:	03e4      	lsls	r4, r4, #15
 8011c3a:	0be4      	lsrs	r4, r4, #15
 8011c3c:	6832      	ldr	r2, [r6, #0]
 8011c3e:	6993      	ldr	r3, [r2, #24]
 8011c40:	0021      	movs	r1, r4
 8011c42:	4399      	bics	r1, r3
 8011c44:	d02a      	beq.n	8011c9c <I2C_WaitOnFlagUntilTimeout+0x7c>
      if(Timeout != HAL_MAX_DELAY)
 8011c46:	1c6b      	adds	r3, r5, #1
 8011c48:	d0f9      	beq.n	8011c3e <I2C_WaitOnFlagUntilTimeout+0x1e>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011c4a:	2d00      	cmp	r5, #0
 8011c4c:	d005      	beq.n	8011c5a <I2C_WaitOnFlagUntilTimeout+0x3a>
 8011c4e:	f7fe fe83 	bl	8010958 <HAL_GetTick>
 8011c52:	4643      	mov	r3, r8
 8011c54:	1ac0      	subs	r0, r0, r3
 8011c56:	42a8      	cmp	r0, r5
 8011c58:	d9f0      	bls.n	8011c3c <I2C_WaitOnFlagUntilTimeout+0x1c>
          hi2c->State= HAL_I2C_STATE_READY;
 8011c5a:	2335      	movs	r3, #53	; 0x35
 8011c5c:	2201      	movs	r2, #1
 8011c5e:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8011c60:	3b01      	subs	r3, #1
 8011c62:	2200      	movs	r2, #0
 8011c64:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011c66:	2003      	movs	r0, #3
 8011c68:	e019      	b.n	8011c9e <I2C_WaitOnFlagUntilTimeout+0x7e>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8011c6a:	03e4      	lsls	r4, r4, #15
 8011c6c:	0be4      	lsrs	r4, r4, #15
 8011c6e:	6832      	ldr	r2, [r6, #0]
 8011c70:	6993      	ldr	r3, [r2, #24]
 8011c72:	0021      	movs	r1, r4
 8011c74:	4399      	bics	r1, r3
 8011c76:	d115      	bne.n	8011ca4 <I2C_WaitOnFlagUntilTimeout+0x84>
      if(Timeout != HAL_MAX_DELAY)
 8011c78:	1c6b      	adds	r3, r5, #1
 8011c7a:	d0f9      	beq.n	8011c70 <I2C_WaitOnFlagUntilTimeout+0x50>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011c7c:	2d00      	cmp	r5, #0
 8011c7e:	d005      	beq.n	8011c8c <I2C_WaitOnFlagUntilTimeout+0x6c>
 8011c80:	f7fe fe6a 	bl	8010958 <HAL_GetTick>
 8011c84:	4643      	mov	r3, r8
 8011c86:	1ac0      	subs	r0, r0, r3
 8011c88:	42a8      	cmp	r0, r5
 8011c8a:	d9f0      	bls.n	8011c6e <I2C_WaitOnFlagUntilTimeout+0x4e>
          hi2c->State= HAL_I2C_STATE_READY;
 8011c8c:	2335      	movs	r3, #53	; 0x35
 8011c8e:	2201      	movs	r2, #1
 8011c90:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8011c92:	3b01      	subs	r3, #1
 8011c94:	2200      	movs	r2, #0
 8011c96:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011c98:	2003      	movs	r0, #3
 8011c9a:	e000      	b.n	8011c9e <I2C_WaitOnFlagUntilTimeout+0x7e>
  return HAL_OK;      
 8011c9c:	2000      	movs	r0, #0
}
 8011c9e:	bc04      	pop	{r2}
 8011ca0:	4690      	mov	r8, r2
 8011ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;      
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	e7fa      	b.n	8011c9e <I2C_WaitOnFlagUntilTimeout+0x7e>

08011ca8 <I2C_RequestMemoryWrite>:
{
 8011ca8:	b570      	push	{r4, r5, r6, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	0004      	movs	r4, r0
 8011cae:	0016      	movs	r6, r2
 8011cb0:	001d      	movs	r5, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8011cb2:	2380      	movs	r3, #128	; 0x80
 8011cb4:	b2ea      	uxtb	r2, r5
 8011cb6:	2080      	movs	r0, #128	; 0x80
 8011cb8:	0180      	lsls	r0, r0, #6
 8011cba:	9000      	str	r0, [sp, #0]
 8011cbc:	045b      	lsls	r3, r3, #17
 8011cbe:	0020      	movs	r0, r4
 8011cc0:	f7ff ff26 	bl	8011b10 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011cc4:	9906      	ldr	r1, [sp, #24]
 8011cc6:	0020      	movs	r0, r4
 8011cc8:	f7ff ff80 	bl	8011bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d009      	beq.n	8011ce4 <I2C_RequestMemoryWrite+0x3c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011cd0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8011cd2:	3804      	subs	r0, #4
 8011cd4:	4243      	negs	r3, r0
 8011cd6:	4158      	adcs	r0, r3
 8011cd8:	4240      	negs	r0, r0
 8011cda:	2301      	movs	r3, #1
 8011cdc:	4398      	bics	r0, r3
 8011cde:	3003      	adds	r0, #3
}
 8011ce0:	b002      	add	sp, #8
 8011ce2:	bd70      	pop	{r4, r5, r6, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011ce4:	2d01      	cmp	r5, #1
 8011ce6:	d10c      	bne.n	8011d02 <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);    
 8011ce8:	6823      	ldr	r3, [r4, #0]
 8011cea:	b2f6      	uxtb	r6, r6
 8011cec:	629e      	str	r6, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8011cee:	9b06      	ldr	r3, [sp, #24]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	2180      	movs	r1, #128	; 0x80
 8011cf4:	0020      	movs	r0, r4
 8011cf6:	f7ff ff93 	bl	8011c20 <I2C_WaitOnFlagUntilTimeout>
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	d0f0      	beq.n	8011ce0 <I2C_RequestMemoryWrite+0x38>
    return HAL_TIMEOUT;
 8011cfe:	2003      	movs	r0, #3
 8011d00:	e7ee      	b.n	8011ce0 <I2C_RequestMemoryWrite+0x38>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8011d02:	6823      	ldr	r3, [r4, #0]
 8011d04:	0a32      	lsrs	r2, r6, #8
 8011d06:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011d08:	9906      	ldr	r1, [sp, #24]
 8011d0a:	0020      	movs	r0, r4
 8011d0c:	f7ff ff5e 	bl	8011bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d008      	beq.n	8011d26 <I2C_RequestMemoryWrite+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011d14:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 8011d16:	3804      	subs	r0, #4
 8011d18:	4243      	negs	r3, r0
 8011d1a:	4158      	adcs	r0, r3
 8011d1c:	4240      	negs	r0, r0
 8011d1e:	2301      	movs	r3, #1
 8011d20:	4398      	bics	r0, r3
 8011d22:	3003      	adds	r0, #3
 8011d24:	e7dc      	b.n	8011ce0 <I2C_RequestMemoryWrite+0x38>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8011d26:	6823      	ldr	r3, [r4, #0]
 8011d28:	b2f6      	uxtb	r6, r6
 8011d2a:	629e      	str	r6, [r3, #40]	; 0x28
 8011d2c:	e7df      	b.n	8011cee <I2C_RequestMemoryWrite+0x46>

08011d2e <I2C_RequestMemoryRead>:
{
 8011d2e:	b570      	push	{r4, r5, r6, lr}
 8011d30:	b082      	sub	sp, #8
 8011d32:	0004      	movs	r4, r0
 8011d34:	0016      	movs	r6, r2
 8011d36:	001d      	movs	r5, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8011d38:	b2da      	uxtb	r2, r3
 8011d3a:	2380      	movs	r3, #128	; 0x80
 8011d3c:	019b      	lsls	r3, r3, #6
 8011d3e:	9300      	str	r3, [sp, #0]
 8011d40:	2300      	movs	r3, #0
 8011d42:	f7ff fee5 	bl	8011b10 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011d46:	9906      	ldr	r1, [sp, #24]
 8011d48:	0020      	movs	r0, r4
 8011d4a:	f7ff ff3f 	bl	8011bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	d009      	beq.n	8011d66 <I2C_RequestMemoryRead+0x38>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011d52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8011d54:	3804      	subs	r0, #4
 8011d56:	4243      	negs	r3, r0
 8011d58:	4158      	adcs	r0, r3
 8011d5a:	4240      	negs	r0, r0
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	4398      	bics	r0, r3
 8011d60:	3003      	adds	r0, #3
}
 8011d62:	b002      	add	sp, #8
 8011d64:	bd70      	pop	{r4, r5, r6, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011d66:	2d01      	cmp	r5, #1
 8011d68:	d10c      	bne.n	8011d84 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);    
 8011d6a:	6823      	ldr	r3, [r4, #0]
 8011d6c:	b2f6      	uxtb	r6, r6
 8011d6e:	629e      	str	r6, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8011d70:	9b06      	ldr	r3, [sp, #24]
 8011d72:	2200      	movs	r2, #0
 8011d74:	2140      	movs	r1, #64	; 0x40
 8011d76:	0020      	movs	r0, r4
 8011d78:	f7ff ff52 	bl	8011c20 <I2C_WaitOnFlagUntilTimeout>
 8011d7c:	2800      	cmp	r0, #0
 8011d7e:	d0f0      	beq.n	8011d62 <I2C_RequestMemoryRead+0x34>
    return HAL_TIMEOUT;
 8011d80:	2003      	movs	r0, #3
 8011d82:	e7ee      	b.n	8011d62 <I2C_RequestMemoryRead+0x34>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8011d84:	6823      	ldr	r3, [r4, #0]
 8011d86:	0a32      	lsrs	r2, r6, #8
 8011d88:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011d8a:	9906      	ldr	r1, [sp, #24]
 8011d8c:	0020      	movs	r0, r4
 8011d8e:	f7ff ff1d 	bl	8011bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d008      	beq.n	8011da8 <I2C_RequestMemoryRead+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011d96:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 8011d98:	3804      	subs	r0, #4
 8011d9a:	4243      	negs	r3, r0
 8011d9c:	4158      	adcs	r0, r3
 8011d9e:	4240      	negs	r0, r0
 8011da0:	2301      	movs	r3, #1
 8011da2:	4398      	bics	r0, r3
 8011da4:	3003      	adds	r0, #3
 8011da6:	e7dc      	b.n	8011d62 <I2C_RequestMemoryRead+0x34>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8011da8:	6823      	ldr	r3, [r4, #0]
 8011daa:	b2f6      	uxtb	r6, r6
 8011dac:	629e      	str	r6, [r3, #40]	; 0x28
 8011dae:	e7df      	b.n	8011d70 <I2C_RequestMemoryRead+0x42>

08011db0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 8011db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011db2:	0005      	movs	r5, r0
 8011db4:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 8011db6:	f7fe fdcf 	bl	8010958 <HAL_GetTick>
 8011dba:	0007      	movs	r7, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011dbc:	2620      	movs	r6, #32
 8011dbe:	682b      	ldr	r3, [r5, #0]
 8011dc0:	699b      	ldr	r3, [r3, #24]
 8011dc2:	421e      	tst	r6, r3
 8011dc4:	d118      	bne.n	8011df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8011dc6:	0021      	movs	r1, r4
 8011dc8:	0028      	movs	r0, r5
 8011dca:	f7ff feb3 	bl	8011b34 <I2C_IsAcknowledgeFailed>
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	d114      	bne.n	8011dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011dd2:	2c00      	cmp	r4, #0
 8011dd4:	d004      	beq.n	8011de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
 8011dd6:	f7fe fdbf 	bl	8010958 <HAL_GetTick>
 8011dda:	1bc0      	subs	r0, r0, r7
 8011ddc:	42a0      	cmp	r0, r4
 8011dde:	d9ee      	bls.n	8011dbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011de0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011de2:	2220      	movs	r2, #32
 8011de4:	4313      	orrs	r3, r2
 8011de6:	63ab      	str	r3, [r5, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8011de8:	2335      	movs	r3, #53	; 0x35
 8011dea:	3a1f      	subs	r2, #31
 8011dec:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 8011dee:	3b01      	subs	r3, #1
 8011df0:	2200      	movs	r2, #0
 8011df2:	54ea      	strb	r2, [r5, r3]
      return HAL_TIMEOUT;
 8011df4:	2003      	movs	r0, #3
}
 8011df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8011df8:	2000      	movs	r0, #0
 8011dfa:	e7fc      	b.n	8011df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8011dfc:	2001      	movs	r0, #1
 8011dfe:	e7fa      	b.n	8011df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08011e00 <HAL_I2C_MspInit>:
}
 8011e00:	4770      	bx	lr
	...

08011e04 <HAL_I2C_Init>:
{ 
 8011e04:	b510      	push	{r4, lr}
 8011e06:	1e04      	subs	r4, r0, #0
  if(hi2c == NULL)
 8011e08:	d051      	beq.n	8011eae <HAL_I2C_Init+0xaa>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8011e0a:	2335      	movs	r3, #53	; 0x35
 8011e0c:	5cc3      	ldrb	r3, [r0, r3]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d03c      	beq.n	8011e8c <HAL_I2C_Init+0x88>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8011e12:	2335      	movs	r3, #53	; 0x35
 8011e14:	2202      	movs	r2, #2
 8011e16:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8011e18:	6822      	ldr	r2, [r4, #0]
 8011e1a:	6813      	ldr	r3, [r2, #0]
 8011e1c:	2101      	movs	r1, #1
 8011e1e:	438b      	bics	r3, r1
 8011e20:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011e22:	6822      	ldr	r2, [r4, #0]
 8011e24:	4b23      	ldr	r3, [pc, #140]	; (8011eb4 <HAL_I2C_Init+0xb0>)
 8011e26:	6861      	ldr	r1, [r4, #4]
 8011e28:	400b      	ands	r3, r1
 8011e2a:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011e2c:	6822      	ldr	r2, [r4, #0]
 8011e2e:	6893      	ldr	r3, [r2, #8]
 8011e30:	4921      	ldr	r1, [pc, #132]	; (8011eb8 <HAL_I2C_Init+0xb4>)
 8011e32:	400b      	ands	r3, r1
 8011e34:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8011e36:	68a3      	ldr	r3, [r4, #8]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d007      	beq.n	8011e4c <HAL_I2C_Init+0x48>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011e3c:	68e2      	ldr	r2, [r4, #12]
 8011e3e:	2a01      	cmp	r2, #1
 8011e40:	d02a      	beq.n	8011e98 <HAL_I2C_Init+0x94>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011e42:	6821      	ldr	r1, [r4, #0]
 8011e44:	2284      	movs	r2, #132	; 0x84
 8011e46:	0212      	lsls	r2, r2, #8
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	608b      	str	r3, [r1, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011e4c:	68e3      	ldr	r3, [r4, #12]
 8011e4e:	2b02      	cmp	r3, #2
 8011e50:	d028      	beq.n	8011ea4 <HAL_I2C_Init+0xa0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011e52:	6822      	ldr	r2, [r4, #0]
 8011e54:	6851      	ldr	r1, [r2, #4]
 8011e56:	4b19      	ldr	r3, [pc, #100]	; (8011ebc <HAL_I2C_Init+0xb8>)
 8011e58:	430b      	orrs	r3, r1
 8011e5a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8011e5c:	6821      	ldr	r1, [r4, #0]
 8011e5e:	6923      	ldr	r3, [r4, #16]
 8011e60:	6962      	ldr	r2, [r4, #20]
 8011e62:	4313      	orrs	r3, r2
 8011e64:	69a2      	ldr	r2, [r4, #24]
 8011e66:	0212      	lsls	r2, r2, #8
 8011e68:	4313      	orrs	r3, r2
 8011e6a:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011e6c:	6822      	ldr	r2, [r4, #0]
 8011e6e:	69e3      	ldr	r3, [r4, #28]
 8011e70:	6a21      	ldr	r1, [r4, #32]
 8011e72:	430b      	orrs	r3, r1
 8011e74:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8011e76:	6821      	ldr	r1, [r4, #0]
 8011e78:	680b      	ldr	r3, [r1, #0]
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	4313      	orrs	r3, r2
 8011e7e:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011e80:	2300      	movs	r3, #0
 8011e82:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8011e84:	3335      	adds	r3, #53	; 0x35
 8011e86:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8011e88:	2000      	movs	r0, #0
}
 8011e8a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8011e8c:	3334      	adds	r3, #52	; 0x34
 8011e8e:	2200      	movs	r2, #0
 8011e90:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8011e92:	f7ff ffb5 	bl	8011e00 <HAL_I2C_MspInit>
 8011e96:	e7bc      	b.n	8011e12 <HAL_I2C_Init+0xe>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011e98:	6821      	ldr	r1, [r4, #0]
 8011e9a:	2280      	movs	r2, #128	; 0x80
 8011e9c:	0212      	lsls	r2, r2, #8
 8011e9e:	4313      	orrs	r3, r2
 8011ea0:	608b      	str	r3, [r1, #8]
 8011ea2:	e7d3      	b.n	8011e4c <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011ea4:	6823      	ldr	r3, [r4, #0]
 8011ea6:	2280      	movs	r2, #128	; 0x80
 8011ea8:	0112      	lsls	r2, r2, #4
 8011eaa:	605a      	str	r2, [r3, #4]
 8011eac:	e7d1      	b.n	8011e52 <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8011eae:	2001      	movs	r0, #1
 8011eb0:	e7eb      	b.n	8011e8a <HAL_I2C_Init+0x86>
 8011eb2:	46c0      	nop			; (mov r8, r8)
 8011eb4:	f0ffffff 	.word	0xf0ffffff
 8011eb8:	ffff7fff 	.word	0xffff7fff
 8011ebc:	02008000 	.word	0x02008000

08011ec0 <HAL_I2C_Mem_Write>:
{
 8011ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ec2:	b085      	sub	sp, #20
 8011ec4:	0004      	movs	r4, r0
 8011ec6:	000f      	movs	r7, r1
 8011ec8:	9103      	str	r1, [sp, #12]
 8011eca:	a90a      	add	r1, sp, #40	; 0x28
 8011ecc:	c940      	ldmia	r1!, {r6}
 8011ece:	880d      	ldrh	r5, [r1, #0]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8011ed0:	2135      	movs	r1, #53	; 0x35
 8011ed2:	5c41      	ldrb	r1, [r0, r1]
    return HAL_BUSY;
 8011ed4:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8011ed6:	2901      	cmp	r1, #1
 8011ed8:	d000      	beq.n	8011edc <HAL_I2C_Mem_Write+0x1c>
 8011eda:	e09f      	b.n	801201c <HAL_I2C_Mem_Write+0x15c>
    if((pData == NULL) || (Size == 0)) 
 8011edc:	2e00      	cmp	r6, #0
 8011ede:	d100      	bne.n	8011ee2 <HAL_I2C_Mem_Write+0x22>
 8011ee0:	e09b      	b.n	801201a <HAL_I2C_Mem_Write+0x15a>
      return  HAL_ERROR;                                    
 8011ee2:	3801      	subs	r0, #1
    if((pData == NULL) || (Size == 0)) 
 8011ee4:	2d00      	cmp	r5, #0
 8011ee6:	d100      	bne.n	8011eea <HAL_I2C_Mem_Write+0x2a>
 8011ee8:	e098      	b.n	801201c <HAL_I2C_Mem_Write+0x15c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8011eea:	6821      	ldr	r1, [r4, #0]
 8011eec:	6989      	ldr	r1, [r1, #24]
 8011eee:	0409      	lsls	r1, r1, #16
 8011ef0:	d500      	bpl.n	8011ef4 <HAL_I2C_Mem_Write+0x34>
 8011ef2:	e095      	b.n	8012020 <HAL_I2C_Mem_Write+0x160>
    __HAL_LOCK(hi2c);
 8011ef4:	2134      	movs	r1, #52	; 0x34
 8011ef6:	5c61      	ldrb	r1, [r4, r1]
 8011ef8:	2901      	cmp	r1, #1
 8011efa:	d100      	bne.n	8011efe <HAL_I2C_Mem_Write+0x3e>
 8011efc:	e092      	b.n	8012024 <HAL_I2C_Mem_Write+0x164>
 8011efe:	2134      	movs	r1, #52	; 0x34
 8011f00:	5460      	strb	r0, [r4, r1]
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8011f02:	3101      	adds	r1, #1
 8011f04:	3051      	adds	r0, #81	; 0x51
 8011f06:	5460      	strb	r0, [r4, r1]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011f08:	2100      	movs	r1, #0
 8011f0a:	63a1      	str	r1, [r4, #56]	; 0x38
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8011f0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f0e:	9100      	str	r1, [sp, #0]
 8011f10:	0039      	movs	r1, r7
 8011f12:	0020      	movs	r0, r4
 8011f14:	f7ff fec8 	bl	8011ca8 <I2C_RequestMemoryWrite>
 8011f18:	2800      	cmp	r0, #0
 8011f1a:	d00c      	beq.n	8011f36 <HAL_I2C_Mem_Write+0x76>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011f1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011f1e:	2b04      	cmp	r3, #4
 8011f20:	d104      	bne.n	8011f2c <HAL_I2C_Mem_Write+0x6c>
        __HAL_UNLOCK(hi2c);
 8011f22:	3330      	adds	r3, #48	; 0x30
 8011f24:	2200      	movs	r2, #0
 8011f26:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8011f28:	2001      	movs	r0, #1
 8011f2a:	e077      	b.n	801201c <HAL_I2C_Mem_Write+0x15c>
        __HAL_UNLOCK(hi2c);
 8011f2c:	2334      	movs	r3, #52	; 0x34
 8011f2e:	2200      	movs	r2, #0
 8011f30:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8011f32:	2003      	movs	r0, #3
 8011f34:	e072      	b.n	801201c <HAL_I2C_Mem_Write+0x15c>
    if(Size > 255)
 8011f36:	2dff      	cmp	r5, #255	; 0xff
 8011f38:	d90a      	bls.n	8011f50 <HAL_I2C_Mem_Write+0x90>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011f3a:	2380      	movs	r3, #128	; 0x80
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	9200      	str	r2, [sp, #0]
 8011f40:	045b      	lsls	r3, r3, #17
 8011f42:	32ff      	adds	r2, #255	; 0xff
 8011f44:	9903      	ldr	r1, [sp, #12]
 8011f46:	0020      	movs	r0, r4
 8011f48:	f7ff fde2 	bl	8011b10 <I2C_TransferConfig>
      Sizetmp = 255;
 8011f4c:	27ff      	movs	r7, #255	; 0xff
 8011f4e:	e036      	b.n	8011fbe <HAL_I2C_Mem_Write+0xfe>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011f50:	2380      	movs	r3, #128	; 0x80
 8011f52:	b2ea      	uxtb	r2, r5
 8011f54:	2100      	movs	r1, #0
 8011f56:	9100      	str	r1, [sp, #0]
 8011f58:	049b      	lsls	r3, r3, #18
 8011f5a:	9903      	ldr	r1, [sp, #12]
 8011f5c:	0020      	movs	r0, r4
 8011f5e:	f7ff fdd7 	bl	8011b10 <I2C_TransferConfig>
      Sizetmp = Size;
 8011f62:	002f      	movs	r7, r5
 8011f64:	e02b      	b.n	8011fbe <HAL_I2C_Mem_Write+0xfe>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011f66:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8011f68:	3804      	subs	r0, #4
 8011f6a:	4243      	negs	r3, r0
 8011f6c:	4158      	adcs	r0, r3
 8011f6e:	4240      	negs	r0, r0
 8011f70:	2301      	movs	r3, #1
 8011f72:	4398      	bics	r0, r3
 8011f74:	3003      	adds	r0, #3
 8011f76:	e051      	b.n	801201c <HAL_I2C_Mem_Write+0x15c>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8011f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	2180      	movs	r1, #128	; 0x80
 8011f7e:	0020      	movs	r0, r4
 8011f80:	f7ff fe4e 	bl	8011c20 <I2C_WaitOnFlagUntilTimeout>
 8011f84:	2800      	cmp	r0, #0
 8011f86:	d14f      	bne.n	8012028 <HAL_I2C_Mem_Write+0x168>
        if(Size > 255)
 8011f88:	2dff      	cmp	r5, #255	; 0xff
 8011f8a:	d90a      	bls.n	8011fa2 <HAL_I2C_Mem_Write+0xe2>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	2380      	movs	r3, #128	; 0x80
 8011f92:	045b      	lsls	r3, r3, #17
 8011f94:	22ff      	movs	r2, #255	; 0xff
 8011f96:	9903      	ldr	r1, [sp, #12]
 8011f98:	0020      	movs	r0, r4
 8011f9a:	f7ff fdb9 	bl	8011b10 <I2C_TransferConfig>
          Sizetmp = 255;
 8011f9e:	37ff      	adds	r7, #255	; 0xff
 8011fa0:	e00c      	b.n	8011fbc <HAL_I2C_Mem_Write+0xfc>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011fa2:	b2ea      	uxtb	r2, r5
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	9300      	str	r3, [sp, #0]
 8011fa8:	2380      	movs	r3, #128	; 0x80
 8011faa:	049b      	lsls	r3, r3, #18
 8011fac:	9903      	ldr	r1, [sp, #12]
 8011fae:	0020      	movs	r0, r4
 8011fb0:	f7ff fdae 	bl	8011b10 <I2C_TransferConfig>
          Sizetmp = Size;
 8011fb4:	002f      	movs	r7, r5
 8011fb6:	e001      	b.n	8011fbc <HAL_I2C_Mem_Write+0xfc>
    }while(Size > 0);
 8011fb8:	2d00      	cmp	r5, #0
 8011fba:	d010      	beq.n	8011fde <HAL_I2C_Mem_Write+0x11e>
 8011fbc:	3601      	adds	r6, #1
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011fbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011fc0:	0020      	movs	r0, r4
 8011fc2:	f7ff fe03 	bl	8011bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	d1cd      	bne.n	8011f66 <HAL_I2C_Mem_Write+0xa6>
      hi2c->Instance->TXDR = (*pData++);
 8011fca:	6823      	ldr	r3, [r4, #0]
 8011fcc:	7832      	ldrb	r2, [r6, #0]
 8011fce:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
 8011fd0:	3f01      	subs	r7, #1
      Size--;
 8011fd2:	3d01      	subs	r5, #1
 8011fd4:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 8011fd6:	2f00      	cmp	r7, #0
 8011fd8:	d1ee      	bne.n	8011fb8 <HAL_I2C_Mem_Write+0xf8>
 8011fda:	2d00      	cmp	r5, #0
 8011fdc:	d1cc      	bne.n	8011f78 <HAL_I2C_Mem_Write+0xb8>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8011fde:	2119      	movs	r1, #25
 8011fe0:	0020      	movs	r0, r4
 8011fe2:	f7ff fee5 	bl	8011db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	d008      	beq.n	8011ffc <HAL_I2C_Mem_Write+0x13c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011fea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 8011fec:	3804      	subs	r0, #4
 8011fee:	4243      	negs	r3, r0
 8011ff0:	4158      	adcs	r0, r3
 8011ff2:	4240      	negs	r0, r0
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	4398      	bics	r0, r3
 8011ff8:	3003      	adds	r0, #3
 8011ffa:	e00f      	b.n	801201c <HAL_I2C_Mem_Write+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ffc:	6823      	ldr	r3, [r4, #0]
 8011ffe:	2220      	movs	r2, #32
 8012000:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8012002:	6822      	ldr	r2, [r4, #0]
 8012004:	6853      	ldr	r3, [r2, #4]
 8012006:	4909      	ldr	r1, [pc, #36]	; (801202c <HAL_I2C_Mem_Write+0x16c>)
 8012008:	400b      	ands	r3, r1
 801200a:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 801200c:	2335      	movs	r3, #53	; 0x35
 801200e:	2201      	movs	r2, #1
 8012010:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8012012:	3b01      	subs	r3, #1
 8012014:	2200      	movs	r2, #0
 8012016:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012018:	e000      	b.n	801201c <HAL_I2C_Mem_Write+0x15c>
      return  HAL_ERROR;                                    
 801201a:	2001      	movs	r0, #1
}
 801201c:	b005      	add	sp, #20
 801201e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8012020:	2002      	movs	r0, #2
 8012022:	e7fb      	b.n	801201c <HAL_I2C_Mem_Write+0x15c>
    __HAL_LOCK(hi2c);
 8012024:	2002      	movs	r0, #2
 8012026:	e7f9      	b.n	801201c <HAL_I2C_Mem_Write+0x15c>
          return HAL_TIMEOUT;
 8012028:	2003      	movs	r0, #3
 801202a:	e7f7      	b.n	801201c <HAL_I2C_Mem_Write+0x15c>
 801202c:	fe00e800 	.word	0xfe00e800

08012030 <HAL_I2C_Mem_Read>:
{
 8012030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012032:	b085      	sub	sp, #20
 8012034:	0004      	movs	r4, r0
 8012036:	000f      	movs	r7, r1
 8012038:	9103      	str	r1, [sp, #12]
 801203a:	a90a      	add	r1, sp, #40	; 0x28
 801203c:	c940      	ldmia	r1!, {r6}
 801203e:	880d      	ldrh	r5, [r1, #0]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012040:	2135      	movs	r1, #53	; 0x35
 8012042:	5c41      	ldrb	r1, [r0, r1]
    return HAL_BUSY;
 8012044:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012046:	2901      	cmp	r1, #1
 8012048:	d000      	beq.n	801204c <HAL_I2C_Mem_Read+0x1c>
 801204a:	e09a      	b.n	8012182 <HAL_I2C_Mem_Read+0x152>
    if((pData == NULL) || (Size == 0)) 
 801204c:	2e00      	cmp	r6, #0
 801204e:	d100      	bne.n	8012052 <HAL_I2C_Mem_Read+0x22>
 8012050:	e096      	b.n	8012180 <HAL_I2C_Mem_Read+0x150>
      return  HAL_ERROR;                                    
 8012052:	3801      	subs	r0, #1
    if((pData == NULL) || (Size == 0)) 
 8012054:	2d00      	cmp	r5, #0
 8012056:	d100      	bne.n	801205a <HAL_I2C_Mem_Read+0x2a>
 8012058:	e093      	b.n	8012182 <HAL_I2C_Mem_Read+0x152>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801205a:	6821      	ldr	r1, [r4, #0]
 801205c:	6989      	ldr	r1, [r1, #24]
 801205e:	0409      	lsls	r1, r1, #16
 8012060:	d500      	bpl.n	8012064 <HAL_I2C_Mem_Read+0x34>
 8012062:	e090      	b.n	8012186 <HAL_I2C_Mem_Read+0x156>
    __HAL_LOCK(hi2c);
 8012064:	2134      	movs	r1, #52	; 0x34
 8012066:	5c61      	ldrb	r1, [r4, r1]
 8012068:	2901      	cmp	r1, #1
 801206a:	d100      	bne.n	801206e <HAL_I2C_Mem_Read+0x3e>
 801206c:	e08d      	b.n	801218a <HAL_I2C_Mem_Read+0x15a>
 801206e:	2134      	movs	r1, #52	; 0x34
 8012070:	5460      	strb	r0, [r4, r1]
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8012072:	3101      	adds	r1, #1
 8012074:	3061      	adds	r0, #97	; 0x61
 8012076:	5460      	strb	r0, [r4, r1]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012078:	2100      	movs	r1, #0
 801207a:	63a1      	str	r1, [r4, #56]	; 0x38
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 801207c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801207e:	9100      	str	r1, [sp, #0]
 8012080:	0039      	movs	r1, r7
 8012082:	0020      	movs	r0, r4
 8012084:	f7ff fe53 	bl	8011d2e <I2C_RequestMemoryRead>
 8012088:	2800      	cmp	r0, #0
 801208a:	d00c      	beq.n	80120a6 <HAL_I2C_Mem_Read+0x76>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801208c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801208e:	2b04      	cmp	r3, #4
 8012090:	d104      	bne.n	801209c <HAL_I2C_Mem_Read+0x6c>
        __HAL_UNLOCK(hi2c);
 8012092:	3330      	adds	r3, #48	; 0x30
 8012094:	2200      	movs	r2, #0
 8012096:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8012098:	2001      	movs	r0, #1
 801209a:	e072      	b.n	8012182 <HAL_I2C_Mem_Read+0x152>
        __HAL_UNLOCK(hi2c);
 801209c:	2334      	movs	r3, #52	; 0x34
 801209e:	2200      	movs	r2, #0
 80120a0:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80120a2:	2003      	movs	r0, #3
 80120a4:	e06d      	b.n	8012182 <HAL_I2C_Mem_Read+0x152>
    if(Size > 255)
 80120a6:	2dff      	cmp	r5, #255	; 0xff
 80120a8:	d90b      	bls.n	80120c2 <HAL_I2C_Mem_Read+0x92>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80120aa:	2380      	movs	r3, #128	; 0x80
 80120ac:	2290      	movs	r2, #144	; 0x90
 80120ae:	0192      	lsls	r2, r2, #6
 80120b0:	9200      	str	r2, [sp, #0]
 80120b2:	045b      	lsls	r3, r3, #17
 80120b4:	22ff      	movs	r2, #255	; 0xff
 80120b6:	9903      	ldr	r1, [sp, #12]
 80120b8:	0020      	movs	r0, r4
 80120ba:	f7ff fd29 	bl	8011b10 <I2C_TransferConfig>
      Sizetmp = 255;
 80120be:	27ff      	movs	r7, #255	; 0xff
 80120c0:	e02e      	b.n	8012120 <HAL_I2C_Mem_Read+0xf0>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80120c2:	2380      	movs	r3, #128	; 0x80
 80120c4:	b2ea      	uxtb	r2, r5
 80120c6:	2190      	movs	r1, #144	; 0x90
 80120c8:	0189      	lsls	r1, r1, #6
 80120ca:	9100      	str	r1, [sp, #0]
 80120cc:	049b      	lsls	r3, r3, #18
 80120ce:	9903      	ldr	r1, [sp, #12]
 80120d0:	0020      	movs	r0, r4
 80120d2:	f7ff fd1d 	bl	8011b10 <I2C_TransferConfig>
      Sizetmp = Size;
 80120d6:	002f      	movs	r7, r5
 80120d8:	e022      	b.n	8012120 <HAL_I2C_Mem_Read+0xf0>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80120da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120dc:	2200      	movs	r2, #0
 80120de:	2180      	movs	r1, #128	; 0x80
 80120e0:	0020      	movs	r0, r4
 80120e2:	f7ff fd9d 	bl	8011c20 <I2C_WaitOnFlagUntilTimeout>
 80120e6:	2800      	cmp	r0, #0
 80120e8:	d153      	bne.n	8012192 <HAL_I2C_Mem_Read+0x162>
        if(Size > 255)
 80120ea:	2dff      	cmp	r5, #255	; 0xff
 80120ec:	d90a      	bls.n	8012104 <HAL_I2C_Mem_Read+0xd4>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80120ee:	2300      	movs	r3, #0
 80120f0:	9300      	str	r3, [sp, #0]
 80120f2:	2380      	movs	r3, #128	; 0x80
 80120f4:	045b      	lsls	r3, r3, #17
 80120f6:	22ff      	movs	r2, #255	; 0xff
 80120f8:	9903      	ldr	r1, [sp, #12]
 80120fa:	0020      	movs	r0, r4
 80120fc:	f7ff fd08 	bl	8011b10 <I2C_TransferConfig>
          Sizetmp = 255;
 8012100:	37ff      	adds	r7, #255	; 0xff
 8012102:	e00c      	b.n	801211e <HAL_I2C_Mem_Read+0xee>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8012104:	b2ea      	uxtb	r2, r5
 8012106:	2300      	movs	r3, #0
 8012108:	9300      	str	r3, [sp, #0]
 801210a:	2380      	movs	r3, #128	; 0x80
 801210c:	049b      	lsls	r3, r3, #18
 801210e:	9903      	ldr	r1, [sp, #12]
 8012110:	0020      	movs	r0, r4
 8012112:	f7ff fcfd 	bl	8011b10 <I2C_TransferConfig>
          Sizetmp = Size;
 8012116:	002f      	movs	r7, r5
 8012118:	e001      	b.n	801211e <HAL_I2C_Mem_Read+0xee>
    }while(Size > 0);
 801211a:	2d00      	cmp	r5, #0
 801211c:	d012      	beq.n	8012144 <HAL_I2C_Mem_Read+0x114>
 801211e:	3601      	adds	r6, #1
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8012120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012122:	2200      	movs	r2, #0
 8012124:	2104      	movs	r1, #4
 8012126:	0020      	movs	r0, r4
 8012128:	f7ff fd7a 	bl	8011c20 <I2C_WaitOnFlagUntilTimeout>
 801212c:	2800      	cmp	r0, #0
 801212e:	d12e      	bne.n	801218e <HAL_I2C_Mem_Read+0x15e>
      (*pData++) = hi2c->Instance->RXDR;
 8012130:	6823      	ldr	r3, [r4, #0]
 8012132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012134:	7033      	strb	r3, [r6, #0]
      Sizetmp--;
 8012136:	3f01      	subs	r7, #1
      Size--;   
 8012138:	3d01      	subs	r5, #1
 801213a:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 801213c:	2f00      	cmp	r7, #0
 801213e:	d1ec      	bne.n	801211a <HAL_I2C_Mem_Read+0xea>
 8012140:	2d00      	cmp	r5, #0
 8012142:	d1ca      	bne.n	80120da <HAL_I2C_Mem_Read+0xaa>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8012144:	2119      	movs	r1, #25
 8012146:	0020      	movs	r0, r4
 8012148:	f7ff fe32 	bl	8011db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 801214c:	2800      	cmp	r0, #0
 801214e:	d008      	beq.n	8012162 <HAL_I2C_Mem_Read+0x132>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012150:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 8012152:	3804      	subs	r0, #4
 8012154:	4243      	negs	r3, r0
 8012156:	4158      	adcs	r0, r3
 8012158:	4240      	negs	r0, r0
 801215a:	2301      	movs	r3, #1
 801215c:	4398      	bics	r0, r3
 801215e:	3003      	adds	r0, #3
 8012160:	e00f      	b.n	8012182 <HAL_I2C_Mem_Read+0x152>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012162:	6823      	ldr	r3, [r4, #0]
 8012164:	2220      	movs	r2, #32
 8012166:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8012168:	6822      	ldr	r2, [r4, #0]
 801216a:	6853      	ldr	r3, [r2, #4]
 801216c:	490a      	ldr	r1, [pc, #40]	; (8012198 <HAL_I2C_Mem_Read+0x168>)
 801216e:	400b      	ands	r3, r1
 8012170:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8012172:	2335      	movs	r3, #53	; 0x35
 8012174:	2201      	movs	r2, #1
 8012176:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8012178:	3b01      	subs	r3, #1
 801217a:	2200      	movs	r2, #0
 801217c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801217e:	e000      	b.n	8012182 <HAL_I2C_Mem_Read+0x152>
      return  HAL_ERROR;                                    
 8012180:	2001      	movs	r0, #1
}
 8012182:	b005      	add	sp, #20
 8012184:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8012186:	2002      	movs	r0, #2
 8012188:	e7fb      	b.n	8012182 <HAL_I2C_Mem_Read+0x152>
    __HAL_LOCK(hi2c);
 801218a:	2002      	movs	r0, #2
 801218c:	e7f9      	b.n	8012182 <HAL_I2C_Mem_Read+0x152>
        return HAL_TIMEOUT;
 801218e:	2003      	movs	r0, #3
 8012190:	e7f7      	b.n	8012182 <HAL_I2C_Mem_Read+0x152>
          return HAL_TIMEOUT;
 8012192:	2003      	movs	r0, #3
 8012194:	e7f5      	b.n	8012182 <HAL_I2C_Mem_Read+0x152>
 8012196:	46c0      	nop			; (mov r8, r8)
 8012198:	fe00e800 	.word	0xfe00e800

0801219c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter : new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801219c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 801219e:	2335      	movs	r3, #53	; 0x35
 80121a0:	5cc3      	ldrb	r3, [r0, r3]
 80121a2:	2b02      	cmp	r3, #2
 80121a4:	d02f      	beq.n	8012206 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80121a6:	2335      	movs	r3, #53	; 0x35
 80121a8:	5cc3      	ldrb	r3, [r0, r3]
 80121aa:	2b12      	cmp	r3, #18
 80121ac:	d02d      	beq.n	801220a <HAL_I2CEx_ConfigAnalogFilter+0x6e>
 80121ae:	2335      	movs	r3, #53	; 0x35
 80121b0:	5cc3      	ldrb	r3, [r0, r3]
 80121b2:	2b22      	cmp	r3, #34	; 0x22
 80121b4:	d02b      	beq.n	801220e <HAL_I2CEx_ConfigAnalogFilter+0x72>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 80121b6:	2335      	movs	r3, #53	; 0x35
 80121b8:	5cc3      	ldrb	r3, [r0, r3]
 80121ba:	2b32      	cmp	r3, #50	; 0x32
 80121bc:	d029      	beq.n	8012212 <HAL_I2CEx_ConfigAnalogFilter+0x76>
 80121be:	2335      	movs	r3, #53	; 0x35
 80121c0:	5cc3      	ldrb	r3, [r0, r3]
 80121c2:	2b42      	cmp	r3, #66	; 0x42
 80121c4:	d027      	beq.n	8012216 <HAL_I2CEx_ConfigAnalogFilter+0x7a>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 80121c6:	2334      	movs	r3, #52	; 0x34
 80121c8:	5cc3      	ldrb	r3, [r0, r3]
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d025      	beq.n	801221a <HAL_I2CEx_ConfigAnalogFilter+0x7e>
 80121ce:	2434      	movs	r4, #52	; 0x34
 80121d0:	2301      	movs	r3, #1
 80121d2:	5503      	strb	r3, [r0, r4]

  hi2c->State = HAL_I2C_STATE_BUSY;
 80121d4:	2535      	movs	r5, #53	; 0x35
 80121d6:	2202      	movs	r2, #2
 80121d8:	5542      	strb	r2, [r0, r5]
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);    
 80121da:	6806      	ldr	r6, [r0, #0]
 80121dc:	6832      	ldr	r2, [r6, #0]
 80121de:	439a      	bics	r2, r3
 80121e0:	6032      	str	r2, [r6, #0]
  
  /* Reset I2Cx ANOFF bit */
  hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 80121e2:	6806      	ldr	r6, [r0, #0]
 80121e4:	6832      	ldr	r2, [r6, #0]
 80121e6:	4f0e      	ldr	r7, [pc, #56]	; (8012220 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 80121e8:	403a      	ands	r2, r7
 80121ea:	6032      	str	r2, [r6, #0]
  
  /* Set analog filter bit*/
  hi2c->Instance->CR1 |= AnalogFilter;
 80121ec:	6806      	ldr	r6, [r0, #0]
 80121ee:	6832      	ldr	r2, [r6, #0]
 80121f0:	4311      	orrs	r1, r2
 80121f2:	6031      	str	r1, [r6, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 80121f4:	6801      	ldr	r1, [r0, #0]
 80121f6:	680a      	ldr	r2, [r1, #0]
 80121f8:	431a      	orrs	r2, r3
 80121fa:	600a      	str	r2, [r1, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 80121fc:	5543      	strb	r3, [r0, r5]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80121fe:	2300      	movs	r3, #0
 8012200:	5503      	strb	r3, [r0, r4]

  return HAL_OK; 
 8012202:	2000      	movs	r0, #0
}
 8012204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8012206:	2002      	movs	r0, #2
 8012208:	e7fc      	b.n	8012204 <HAL_I2CEx_ConfigAnalogFilter+0x68>
 801220a:	2002      	movs	r0, #2
 801220c:	e7fa      	b.n	8012204 <HAL_I2CEx_ConfigAnalogFilter+0x68>
 801220e:	2002      	movs	r0, #2
 8012210:	e7f8      	b.n	8012204 <HAL_I2CEx_ConfigAnalogFilter+0x68>
 8012212:	2002      	movs	r0, #2
 8012214:	e7f6      	b.n	8012204 <HAL_I2CEx_ConfigAnalogFilter+0x68>
 8012216:	2002      	movs	r0, #2
 8012218:	e7f4      	b.n	8012204 <HAL_I2CEx_ConfigAnalogFilter+0x68>
  __HAL_LOCK(hi2c);
 801221a:	2002      	movs	r0, #2
 801221c:	e7f2      	b.n	8012204 <HAL_I2CEx_ConfigAnalogFilter+0x68>
 801221e:	46c0      	nop			; (mov r8, r8)
 8012220:	ffffefff 	.word	0xffffefff

08012224 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter : Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012224:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 8012226:	2335      	movs	r3, #53	; 0x35
 8012228:	5cc3      	ldrb	r3, [r0, r3]
 801222a:	2b02      	cmp	r3, #2
 801222c:	d02d      	beq.n	801228a <HAL_I2CEx_ConfigDigitalFilter+0x66>
 801222e:	2335      	movs	r3, #53	; 0x35
 8012230:	5cc3      	ldrb	r3, [r0, r3]
 8012232:	2b12      	cmp	r3, #18
 8012234:	d02b      	beq.n	801228e <HAL_I2CEx_ConfigDigitalFilter+0x6a>
 8012236:	2335      	movs	r3, #53	; 0x35
 8012238:	5cc3      	ldrb	r3, [r0, r3]
 801223a:	2b22      	cmp	r3, #34	; 0x22
 801223c:	d029      	beq.n	8012292 <HAL_I2CEx_ConfigDigitalFilter+0x6e>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 801223e:	2335      	movs	r3, #53	; 0x35
 8012240:	5cc3      	ldrb	r3, [r0, r3]
 8012242:	2b32      	cmp	r3, #50	; 0x32
 8012244:	d027      	beq.n	8012296 <HAL_I2CEx_ConfigDigitalFilter+0x72>
 8012246:	2335      	movs	r3, #53	; 0x35
 8012248:	5cc3      	ldrb	r3, [r0, r3]
 801224a:	2b42      	cmp	r3, #66	; 0x42
 801224c:	d025      	beq.n	801229a <HAL_I2CEx_ConfigDigitalFilter+0x76>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 801224e:	2334      	movs	r3, #52	; 0x34
 8012250:	5cc3      	ldrb	r3, [r0, r3]
 8012252:	2b01      	cmp	r3, #1
 8012254:	d023      	beq.n	801229e <HAL_I2CEx_ConfigDigitalFilter+0x7a>
 8012256:	2434      	movs	r4, #52	; 0x34
 8012258:	2301      	movs	r3, #1
 801225a:	5503      	strb	r3, [r0, r4]

  hi2c->State = HAL_I2C_STATE_BUSY;
 801225c:	2535      	movs	r5, #53	; 0x35
 801225e:	2202      	movs	r2, #2
 8012260:	5542      	strb	r2, [r0, r5]
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);  
 8012262:	6806      	ldr	r6, [r0, #0]
 8012264:	6832      	ldr	r2, [r6, #0]
 8012266:	439a      	bics	r2, r3
 8012268:	6032      	str	r2, [r6, #0]
  
  /* Get the old register value */
  tmpreg = hi2c->Instance->CR1;
 801226a:	6806      	ldr	r6, [r0, #0]
 801226c:	6832      	ldr	r2, [r6, #0]
  
  /* Reset I2Cx DNF bits [11:8] */
  tmpreg &= ~(I2C_CR1_DFN);
 801226e:	4f0d      	ldr	r7, [pc, #52]	; (80122a4 <HAL_I2CEx_ConfigDigitalFilter+0x80>)
 8012270:	403a      	ands	r2, r7
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= DigitalFilter << 8;
 8012272:	0209      	lsls	r1, r1, #8
 8012274:	4311      	orrs	r1, r2
  
  /* Store the new register value */
  hi2c->Instance->CR1 = tmpreg;
 8012276:	6031      	str	r1, [r6, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 8012278:	6801      	ldr	r1, [r0, #0]
 801227a:	680a      	ldr	r2, [r1, #0]
 801227c:	431a      	orrs	r2, r3
 801227e:	600a      	str	r2, [r1, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 8012280:	5543      	strb	r3, [r0, r5]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012282:	2300      	movs	r3, #0
 8012284:	5503      	strb	r3, [r0, r4]

  return HAL_OK; 
 8012286:	2000      	movs	r0, #0
}  
 8012288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 801228a:	2002      	movs	r0, #2
 801228c:	e7fc      	b.n	8012288 <HAL_I2CEx_ConfigDigitalFilter+0x64>
 801228e:	2002      	movs	r0, #2
 8012290:	e7fa      	b.n	8012288 <HAL_I2CEx_ConfigDigitalFilter+0x64>
 8012292:	2002      	movs	r0, #2
 8012294:	e7f8      	b.n	8012288 <HAL_I2CEx_ConfigDigitalFilter+0x64>
 8012296:	2002      	movs	r0, #2
 8012298:	e7f6      	b.n	8012288 <HAL_I2CEx_ConfigDigitalFilter+0x64>
 801229a:	2002      	movs	r0, #2
 801229c:	e7f4      	b.n	8012288 <HAL_I2CEx_ConfigDigitalFilter+0x64>
  __HAL_LOCK(hi2c);
 801229e:	2002      	movs	r0, #2
 80122a0:	e7f2      	b.n	8012288 <HAL_I2CEx_ConfigDigitalFilter+0x64>
 80122a2:	46c0      	nop			; (mov r8, r8)
 80122a4:	fffff0ff 	.word	0xfffff0ff

080122a8 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 80122a8:	4770      	bx	lr
	...

080122ac <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80122ac:	4a03      	ldr	r2, [pc, #12]	; (80122bc <HAL_PWR_EnableBkUpAccess+0x10>)
 80122ae:	6811      	ldr	r1, [r2, #0]
 80122b0:	2380      	movs	r3, #128	; 0x80
 80122b2:	005b      	lsls	r3, r3, #1
 80122b4:	430b      	orrs	r3, r1
 80122b6:	6013      	str	r3, [r2, #0]
}
 80122b8:	4770      	bx	lr
 80122ba:	46c0      	nop			; (mov r8, r8)
 80122bc:	40007000 	.word	0x40007000

080122c0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80122c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122c2:	46c6      	mov	lr, r8
 80122c4:	b500      	push	{lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80122ca:	6803      	ldr	r3, [r0, #0]
 80122cc:	07db      	lsls	r3, r3, #31
 80122ce:	d538      	bpl.n	8012342 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80122d0:	4bbd      	ldr	r3, [pc, #756]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80122d2:	685a      	ldr	r2, [r3, #4]
 80122d4:	230c      	movs	r3, #12
 80122d6:	4013      	ands	r3, r2
 80122d8:	2b04      	cmp	r3, #4
 80122da:	d02a      	beq.n	8012332 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80122dc:	4bba      	ldr	r3, [pc, #744]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80122de:	685a      	ldr	r2, [r3, #4]
 80122e0:	230c      	movs	r3, #12
 80122e2:	4013      	ands	r3, r2
 80122e4:	2b08      	cmp	r3, #8
 80122e6:	d108      	bne.n	80122fa <HAL_RCC_OscConfig+0x3a>
 80122e8:	4bb7      	ldr	r3, [pc, #732]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	22c0      	movs	r2, #192	; 0xc0
 80122ee:	0252      	lsls	r2, r2, #9
 80122f0:	4013      	ands	r3, r2
 80122f2:	2280      	movs	r2, #128	; 0x80
 80122f4:	0252      	lsls	r2, r2, #9
 80122f6:	4293      	cmp	r3, r2
 80122f8:	d01b      	beq.n	8012332 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80122fa:	4bb3      	ldr	r3, [pc, #716]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80122fc:	681a      	ldr	r2, [r3, #0]
 80122fe:	49b3      	ldr	r1, [pc, #716]	; (80125cc <HAL_RCC_OscConfig+0x30c>)
 8012300:	400a      	ands	r2, r1
 8012302:	601a      	str	r2, [r3, #0]
 8012304:	681a      	ldr	r2, [r3, #0]
 8012306:	49b2      	ldr	r1, [pc, #712]	; (80125d0 <HAL_RCC_OscConfig+0x310>)
 8012308:	400a      	ands	r2, r1
 801230a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801230c:	f7fe fb24 	bl	8010958 <HAL_GetTick>
 8012310:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012312:	4ead      	ldr	r6, [pc, #692]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012314:	2580      	movs	r5, #128	; 0x80
 8012316:	02ad      	lsls	r5, r5, #10
 8012318:	6833      	ldr	r3, [r6, #0]
 801231a:	422b      	tst	r3, r5
 801231c:	d039      	beq.n	8012392 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801231e:	f7fe fb1b 	bl	8010958 <HAL_GetTick>
 8012322:	1bc0      	subs	r0, r0, r7
 8012324:	2864      	cmp	r0, #100	; 0x64
 8012326:	d9f7      	bls.n	8012318 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8012328:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 801232a:	b002      	add	sp, #8
 801232c:	bc04      	pop	{r2}
 801232e:	4690      	mov	r8, r2
 8012330:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012332:	4ba5      	ldr	r3, [pc, #660]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	039b      	lsls	r3, r3, #14
 8012338:	d503      	bpl.n	8012342 <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 801233a:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801233c:	6863      	ldr	r3, [r4, #4]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d0f3      	beq.n	801232a <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012342:	6823      	ldr	r3, [r4, #0]
 8012344:	079b      	lsls	r3, r3, #30
 8012346:	d400      	bmi.n	801234a <HAL_RCC_OscConfig+0x8a>
 8012348:	e08d      	b.n	8012466 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801234a:	4b9f      	ldr	r3, [pc, #636]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	220c      	movs	r2, #12
 8012350:	421a      	tst	r2, r3
 8012352:	d077      	beq.n	8012444 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012354:	4b9c      	ldr	r3, [pc, #624]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012356:	685a      	ldr	r2, [r3, #4]
 8012358:	230c      	movs	r3, #12
 801235a:	4013      	ands	r3, r2
 801235c:	2b08      	cmp	r3, #8
 801235e:	d068      	beq.n	8012432 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012360:	68e3      	ldr	r3, [r4, #12]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d100      	bne.n	8012368 <HAL_RCC_OscConfig+0xa8>
 8012366:	e0a1      	b.n	80124ac <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8012368:	4a97      	ldr	r2, [pc, #604]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 801236a:	6813      	ldr	r3, [r2, #0]
 801236c:	2101      	movs	r1, #1
 801236e:	430b      	orrs	r3, r1
 8012370:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012372:	f7fe faf1 	bl	8010958 <HAL_GetTick>
 8012376:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012378:	4e93      	ldr	r6, [pc, #588]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 801237a:	2502      	movs	r5, #2
 801237c:	6833      	ldr	r3, [r6, #0]
 801237e:	421d      	tst	r5, r3
 8012380:	d000      	beq.n	8012384 <HAL_RCC_OscConfig+0xc4>
 8012382:	e08a      	b.n	801249a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012384:	f7fe fae8 	bl	8010958 <HAL_GetTick>
 8012388:	1bc0      	subs	r0, r0, r7
 801238a:	2864      	cmp	r0, #100	; 0x64
 801238c:	d9f6      	bls.n	801237c <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 801238e:	2003      	movs	r0, #3
 8012390:	e7cb      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012392:	6863      	ldr	r3, [r4, #4]
 8012394:	2b01      	cmp	r3, #1
 8012396:	d00b      	beq.n	80123b0 <HAL_RCC_OscConfig+0xf0>
 8012398:	2b00      	cmp	r3, #0
 801239a:	d122      	bne.n	80123e2 <HAL_RCC_OscConfig+0x122>
 801239c:	4b8a      	ldr	r3, [pc, #552]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 801239e:	681a      	ldr	r2, [r3, #0]
 80123a0:	498a      	ldr	r1, [pc, #552]	; (80125cc <HAL_RCC_OscConfig+0x30c>)
 80123a2:	400a      	ands	r2, r1
 80123a4:	601a      	str	r2, [r3, #0]
 80123a6:	681a      	ldr	r2, [r3, #0]
 80123a8:	4989      	ldr	r1, [pc, #548]	; (80125d0 <HAL_RCC_OscConfig+0x310>)
 80123aa:	400a      	ands	r2, r1
 80123ac:	601a      	str	r2, [r3, #0]
 80123ae:	e005      	b.n	80123bc <HAL_RCC_OscConfig+0xfc>
 80123b0:	4a85      	ldr	r2, [pc, #532]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80123b2:	6811      	ldr	r1, [r2, #0]
 80123b4:	2380      	movs	r3, #128	; 0x80
 80123b6:	025b      	lsls	r3, r3, #9
 80123b8:	430b      	orrs	r3, r1
 80123ba:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80123bc:	6863      	ldr	r3, [r4, #4]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d027      	beq.n	8012412 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 80123c2:	f7fe fac9 	bl	8010958 <HAL_GetTick>
 80123c6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80123c8:	4e7f      	ldr	r6, [pc, #508]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80123ca:	2580      	movs	r5, #128	; 0x80
 80123cc:	02ad      	lsls	r5, r5, #10
 80123ce:	6833      	ldr	r3, [r6, #0]
 80123d0:	422b      	tst	r3, r5
 80123d2:	d1b6      	bne.n	8012342 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80123d4:	f7fe fac0 	bl	8010958 <HAL_GetTick>
 80123d8:	1bc0      	subs	r0, r0, r7
 80123da:	2864      	cmp	r0, #100	; 0x64
 80123dc:	d9f7      	bls.n	80123ce <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80123de:	2003      	movs	r0, #3
 80123e0:	e7a3      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80123e2:	2b05      	cmp	r3, #5
 80123e4:	d009      	beq.n	80123fa <HAL_RCC_OscConfig+0x13a>
 80123e6:	4b78      	ldr	r3, [pc, #480]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	4978      	ldr	r1, [pc, #480]	; (80125cc <HAL_RCC_OscConfig+0x30c>)
 80123ec:	400a      	ands	r2, r1
 80123ee:	601a      	str	r2, [r3, #0]
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	4977      	ldr	r1, [pc, #476]	; (80125d0 <HAL_RCC_OscConfig+0x310>)
 80123f4:	400a      	ands	r2, r1
 80123f6:	601a      	str	r2, [r3, #0]
 80123f8:	e7e0      	b.n	80123bc <HAL_RCC_OscConfig+0xfc>
 80123fa:	4b73      	ldr	r3, [pc, #460]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80123fc:	6819      	ldr	r1, [r3, #0]
 80123fe:	2280      	movs	r2, #128	; 0x80
 8012400:	02d2      	lsls	r2, r2, #11
 8012402:	430a      	orrs	r2, r1
 8012404:	601a      	str	r2, [r3, #0]
 8012406:	6819      	ldr	r1, [r3, #0]
 8012408:	2280      	movs	r2, #128	; 0x80
 801240a:	0252      	lsls	r2, r2, #9
 801240c:	430a      	orrs	r2, r1
 801240e:	601a      	str	r2, [r3, #0]
 8012410:	e7d4      	b.n	80123bc <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8012412:	f7fe faa1 	bl	8010958 <HAL_GetTick>
 8012416:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012418:	4e6b      	ldr	r6, [pc, #428]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 801241a:	2580      	movs	r5, #128	; 0x80
 801241c:	02ad      	lsls	r5, r5, #10
 801241e:	6833      	ldr	r3, [r6, #0]
 8012420:	422b      	tst	r3, r5
 8012422:	d08e      	beq.n	8012342 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012424:	f7fe fa98 	bl	8010958 <HAL_GetTick>
 8012428:	1bc0      	subs	r0, r0, r7
 801242a:	2864      	cmp	r0, #100	; 0x64
 801242c:	d9f7      	bls.n	801241e <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 801242e:	2003      	movs	r0, #3
 8012430:	e77b      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012432:	4b65      	ldr	r3, [pc, #404]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	22c0      	movs	r2, #192	; 0xc0
 8012438:	0252      	lsls	r2, r2, #9
 801243a:	4013      	ands	r3, r2
 801243c:	2280      	movs	r2, #128	; 0x80
 801243e:	0212      	lsls	r2, r2, #8
 8012440:	4293      	cmp	r3, r2
 8012442:	d18d      	bne.n	8012360 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012444:	4b60      	ldr	r3, [pc, #384]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	079b      	lsls	r3, r3, #30
 801244a:	d504      	bpl.n	8012456 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 801244c:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801244e:	68e3      	ldr	r3, [r4, #12]
 8012450:	2b01      	cmp	r3, #1
 8012452:	d000      	beq.n	8012456 <HAL_RCC_OscConfig+0x196>
 8012454:	e769      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012456:	495c      	ldr	r1, [pc, #368]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012458:	680a      	ldr	r2, [r1, #0]
 801245a:	6923      	ldr	r3, [r4, #16]
 801245c:	00db      	lsls	r3, r3, #3
 801245e:	20f8      	movs	r0, #248	; 0xf8
 8012460:	4382      	bics	r2, r0
 8012462:	4313      	orrs	r3, r2
 8012464:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012466:	6823      	ldr	r3, [r4, #0]
 8012468:	071b      	lsls	r3, r3, #28
 801246a:	d547      	bpl.n	80124fc <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801246c:	6a23      	ldr	r3, [r4, #32]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d030      	beq.n	80124d4 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8012472:	4a55      	ldr	r2, [pc, #340]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012474:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012476:	2101      	movs	r1, #1
 8012478:	430b      	orrs	r3, r1
 801247a:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801247c:	f7fe fa6c 	bl	8010958 <HAL_GetTick>
 8012480:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012482:	4e51      	ldr	r6, [pc, #324]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012484:	2502      	movs	r5, #2
 8012486:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012488:	421d      	tst	r5, r3
 801248a:	d137      	bne.n	80124fc <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801248c:	f7fe fa64 	bl	8010958 <HAL_GetTick>
 8012490:	1bc0      	subs	r0, r0, r7
 8012492:	2864      	cmp	r0, #100	; 0x64
 8012494:	d9f7      	bls.n	8012486 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8012496:	2003      	movs	r0, #3
 8012498:	e747      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801249a:	494b      	ldr	r1, [pc, #300]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 801249c:	680a      	ldr	r2, [r1, #0]
 801249e:	6923      	ldr	r3, [r4, #16]
 80124a0:	00db      	lsls	r3, r3, #3
 80124a2:	20f8      	movs	r0, #248	; 0xf8
 80124a4:	4382      	bics	r2, r0
 80124a6:	4313      	orrs	r3, r2
 80124a8:	600b      	str	r3, [r1, #0]
 80124aa:	e7dc      	b.n	8012466 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 80124ac:	4a46      	ldr	r2, [pc, #280]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80124ae:	6813      	ldr	r3, [r2, #0]
 80124b0:	2101      	movs	r1, #1
 80124b2:	438b      	bics	r3, r1
 80124b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80124b6:	f7fe fa4f 	bl	8010958 <HAL_GetTick>
 80124ba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80124bc:	4e42      	ldr	r6, [pc, #264]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80124be:	2502      	movs	r5, #2
 80124c0:	6833      	ldr	r3, [r6, #0]
 80124c2:	421d      	tst	r5, r3
 80124c4:	d0cf      	beq.n	8012466 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80124c6:	f7fe fa47 	bl	8010958 <HAL_GetTick>
 80124ca:	1bc0      	subs	r0, r0, r7
 80124cc:	2864      	cmp	r0, #100	; 0x64
 80124ce:	d9f7      	bls.n	80124c0 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 80124d0:	2003      	movs	r0, #3
 80124d2:	e72a      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 80124d4:	4a3c      	ldr	r2, [pc, #240]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80124d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80124d8:	2101      	movs	r1, #1
 80124da:	438b      	bics	r3, r1
 80124dc:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80124de:	f7fe fa3b 	bl	8010958 <HAL_GetTick>
 80124e2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80124e4:	4e38      	ldr	r6, [pc, #224]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 80124e6:	2502      	movs	r5, #2
 80124e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80124ea:	421d      	tst	r5, r3
 80124ec:	d006      	beq.n	80124fc <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80124ee:	f7fe fa33 	bl	8010958 <HAL_GetTick>
 80124f2:	1bc0      	subs	r0, r0, r7
 80124f4:	2864      	cmp	r0, #100	; 0x64
 80124f6:	d9f7      	bls.n	80124e8 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80124f8:	2003      	movs	r0, #3
 80124fa:	e716      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80124fc:	6823      	ldr	r3, [r4, #0]
 80124fe:	075b      	lsls	r3, r3, #29
 8012500:	d442      	bmi.n	8012588 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8012502:	6823      	ldr	r3, [r4, #0]
 8012504:	06db      	lsls	r3, r3, #27
 8012506:	d512      	bpl.n	801252e <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8012508:	6963      	ldr	r3, [r4, #20]
 801250a:	2b01      	cmp	r3, #1
 801250c:	d100      	bne.n	8012510 <HAL_RCC_OscConfig+0x250>
 801250e:	e0ce      	b.n	80126ae <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8012510:	3305      	adds	r3, #5
 8012512:	d000      	beq.n	8012516 <HAL_RCC_OscConfig+0x256>
 8012514:	e0ec      	b.n	80126f0 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 8012516:	4a2c      	ldr	r2, [pc, #176]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012518:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801251a:	2104      	movs	r1, #4
 801251c:	438b      	bics	r3, r1
 801251e:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012520:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012522:	69a3      	ldr	r3, [r4, #24]
 8012524:	00db      	lsls	r3, r3, #3
 8012526:	20f8      	movs	r0, #248	; 0xf8
 8012528:	4381      	bics	r1, r0
 801252a:	430b      	orrs	r3, r1
 801252c:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801252e:	6823      	ldr	r3, [r4, #0]
 8012530:	069b      	lsls	r3, r3, #26
 8012532:	d400      	bmi.n	8012536 <HAL_RCC_OscConfig+0x276>
 8012534:	e106      	b.n	8012744 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012536:	4b24      	ldr	r3, [pc, #144]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012538:	685a      	ldr	r2, [r3, #4]
 801253a:	230c      	movs	r3, #12
 801253c:	4013      	ands	r3, r2
 801253e:	2b0c      	cmp	r3, #12
 8012540:	d100      	bne.n	8012544 <HAL_RCC_OscConfig+0x284>
 8012542:	e0f6      	b.n	8012732 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012544:	4b20      	ldr	r3, [pc, #128]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 8012546:	685a      	ldr	r2, [r3, #4]
 8012548:	230c      	movs	r3, #12
 801254a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801254c:	2b08      	cmp	r3, #8
 801254e:	d100      	bne.n	8012552 <HAL_RCC_OscConfig+0x292>
 8012550:	e0e7      	b.n	8012722 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012552:	69e3      	ldr	r3, [r4, #28]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d100      	bne.n	801255a <HAL_RCC_OscConfig+0x29a>
 8012558:	e116      	b.n	8012788 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801255a:	4a1b      	ldr	r2, [pc, #108]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 801255c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801255e:	2380      	movs	r3, #128	; 0x80
 8012560:	025b      	lsls	r3, r3, #9
 8012562:	430b      	orrs	r3, r1
 8012564:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012566:	f7fe f9f7 	bl	8010958 <HAL_GetTick>
 801256a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801256c:	4e16      	ldr	r6, [pc, #88]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 801256e:	2580      	movs	r5, #128	; 0x80
 8012570:	026d      	lsls	r5, r5, #9
 8012572:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012574:	422b      	tst	r3, r5
 8012576:	d000      	beq.n	801257a <HAL_RCC_OscConfig+0x2ba>
 8012578:	e0e4      	b.n	8012744 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801257a:	f7fe f9ed 	bl	8010958 <HAL_GetTick>
 801257e:	1bc0      	subs	r0, r0, r7
 8012580:	2864      	cmp	r0, #100	; 0x64
 8012582:	d9f6      	bls.n	8012572 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8012584:	2003      	movs	r0, #3
 8012586:	e6d0      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012588:	4a0f      	ldr	r2, [pc, #60]	; (80125c8 <HAL_RCC_OscConfig+0x308>)
 801258a:	69d1      	ldr	r1, [r2, #28]
 801258c:	2080      	movs	r0, #128	; 0x80
 801258e:	0540      	lsls	r0, r0, #21
 8012590:	4301      	orrs	r1, r0
 8012592:	61d1      	str	r1, [r2, #28]
 8012594:	69d3      	ldr	r3, [r2, #28]
 8012596:	4003      	ands	r3, r0
 8012598:	9301      	str	r3, [sp, #4]
 801259a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801259c:	4a0d      	ldr	r2, [pc, #52]	; (80125d4 <HAL_RCC_OscConfig+0x314>)
 801259e:	6811      	ldr	r1, [r2, #0]
 80125a0:	2380      	movs	r3, #128	; 0x80
 80125a2:	005b      	lsls	r3, r3, #1
 80125a4:	430b      	orrs	r3, r1
 80125a6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80125a8:	f7fe f9d6 	bl	8010958 <HAL_GetTick>
 80125ac:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80125ae:	4e09      	ldr	r6, [pc, #36]	; (80125d4 <HAL_RCC_OscConfig+0x314>)
 80125b0:	2580      	movs	r5, #128	; 0x80
 80125b2:	006d      	lsls	r5, r5, #1
 80125b4:	6833      	ldr	r3, [r6, #0]
 80125b6:	422b      	tst	r3, r5
 80125b8:	d10e      	bne.n	80125d8 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80125ba:	f7fe f9cd 	bl	8010958 <HAL_GetTick>
 80125be:	1bc0      	subs	r0, r0, r7
 80125c0:	2864      	cmp	r0, #100	; 0x64
 80125c2:	d9f7      	bls.n	80125b4 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 80125c4:	2003      	movs	r0, #3
 80125c6:	e6b0      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
 80125c8:	40021000 	.word	0x40021000
 80125cc:	fffeffff 	.word	0xfffeffff
 80125d0:	fffbffff 	.word	0xfffbffff
 80125d4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80125d8:	4b95      	ldr	r3, [pc, #596]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 80125da:	6a1a      	ldr	r2, [r3, #32]
 80125dc:	2101      	movs	r1, #1
 80125de:	438a      	bics	r2, r1
 80125e0:	621a      	str	r2, [r3, #32]
 80125e2:	6a1a      	ldr	r2, [r3, #32]
 80125e4:	3103      	adds	r1, #3
 80125e6:	438a      	bics	r2, r1
 80125e8:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80125ea:	f7fe f9b5 	bl	8010958 <HAL_GetTick>
 80125ee:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80125f0:	4e8f      	ldr	r6, [pc, #572]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 80125f2:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80125f4:	4f8f      	ldr	r7, [pc, #572]	; (8012834 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80125f6:	6a33      	ldr	r3, [r6, #32]
 80125f8:	421d      	tst	r5, r3
 80125fa:	d007      	beq.n	801260c <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80125fc:	f7fe f9ac 	bl	8010958 <HAL_GetTick>
 8012600:	4643      	mov	r3, r8
 8012602:	1ac0      	subs	r0, r0, r3
 8012604:	42b8      	cmp	r0, r7
 8012606:	d9f6      	bls.n	80125f6 <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 8012608:	2003      	movs	r0, #3
 801260a:	e68e      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801260c:	68a3      	ldr	r3, [r4, #8]
 801260e:	2b01      	cmp	r3, #1
 8012610:	d00b      	beq.n	801262a <HAL_RCC_OscConfig+0x36a>
 8012612:	2b00      	cmp	r3, #0
 8012614:	d123      	bne.n	801265e <HAL_RCC_OscConfig+0x39e>
 8012616:	4b86      	ldr	r3, [pc, #536]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 8012618:	6a1a      	ldr	r2, [r3, #32]
 801261a:	2101      	movs	r1, #1
 801261c:	438a      	bics	r2, r1
 801261e:	621a      	str	r2, [r3, #32]
 8012620:	6a1a      	ldr	r2, [r3, #32]
 8012622:	3103      	adds	r1, #3
 8012624:	438a      	bics	r2, r1
 8012626:	621a      	str	r2, [r3, #32]
 8012628:	e004      	b.n	8012634 <HAL_RCC_OscConfig+0x374>
 801262a:	4a81      	ldr	r2, [pc, #516]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 801262c:	6a13      	ldr	r3, [r2, #32]
 801262e:	2101      	movs	r1, #1
 8012630:	430b      	orrs	r3, r1
 8012632:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012634:	68a3      	ldr	r3, [r4, #8]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d027      	beq.n	801268a <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 801263a:	f7fe f98d 	bl	8010958 <HAL_GetTick>
 801263e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012640:	4e7b      	ldr	r6, [pc, #492]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 8012642:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012644:	4f7b      	ldr	r7, [pc, #492]	; (8012834 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012646:	6a33      	ldr	r3, [r6, #32]
 8012648:	421d      	tst	r5, r3
 801264a:	d000      	beq.n	801264e <HAL_RCC_OscConfig+0x38e>
 801264c:	e759      	b.n	8012502 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801264e:	f7fe f983 	bl	8010958 <HAL_GetTick>
 8012652:	4643      	mov	r3, r8
 8012654:	1ac0      	subs	r0, r0, r3
 8012656:	42b8      	cmp	r0, r7
 8012658:	d9f5      	bls.n	8012646 <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 801265a:	2003      	movs	r0, #3
 801265c:	e665      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801265e:	2b05      	cmp	r3, #5
 8012660:	d009      	beq.n	8012676 <HAL_RCC_OscConfig+0x3b6>
 8012662:	4b73      	ldr	r3, [pc, #460]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 8012664:	6a1a      	ldr	r2, [r3, #32]
 8012666:	2101      	movs	r1, #1
 8012668:	438a      	bics	r2, r1
 801266a:	621a      	str	r2, [r3, #32]
 801266c:	6a1a      	ldr	r2, [r3, #32]
 801266e:	3103      	adds	r1, #3
 8012670:	438a      	bics	r2, r1
 8012672:	621a      	str	r2, [r3, #32]
 8012674:	e7de      	b.n	8012634 <HAL_RCC_OscConfig+0x374>
 8012676:	4b6e      	ldr	r3, [pc, #440]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 8012678:	6a1a      	ldr	r2, [r3, #32]
 801267a:	2104      	movs	r1, #4
 801267c:	430a      	orrs	r2, r1
 801267e:	621a      	str	r2, [r3, #32]
 8012680:	6a1a      	ldr	r2, [r3, #32]
 8012682:	3903      	subs	r1, #3
 8012684:	430a      	orrs	r2, r1
 8012686:	621a      	str	r2, [r3, #32]
 8012688:	e7d4      	b.n	8012634 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 801268a:	f7fe f965 	bl	8010958 <HAL_GetTick>
 801268e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012690:	4e67      	ldr	r6, [pc, #412]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 8012692:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012694:	4f67      	ldr	r7, [pc, #412]	; (8012834 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012696:	6a33      	ldr	r3, [r6, #32]
 8012698:	421d      	tst	r5, r3
 801269a:	d100      	bne.n	801269e <HAL_RCC_OscConfig+0x3de>
 801269c:	e731      	b.n	8012502 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801269e:	f7fe f95b 	bl	8010958 <HAL_GetTick>
 80126a2:	4643      	mov	r3, r8
 80126a4:	1ac0      	subs	r0, r0, r3
 80126a6:	42b8      	cmp	r0, r7
 80126a8:	d9f5      	bls.n	8012696 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 80126aa:	2003      	movs	r0, #3
 80126ac:	e63d      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 80126ae:	4b60      	ldr	r3, [pc, #384]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 80126b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126b2:	2104      	movs	r1, #4
 80126b4:	430a      	orrs	r2, r1
 80126b6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80126b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126ba:	3903      	subs	r1, #3
 80126bc:	430a      	orrs	r2, r1
 80126be:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80126c0:	f7fe f94a 	bl	8010958 <HAL_GetTick>
 80126c4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80126c6:	4e5a      	ldr	r6, [pc, #360]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 80126c8:	2502      	movs	r5, #2
 80126ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80126cc:	421d      	tst	r5, r3
 80126ce:	d106      	bne.n	80126de <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80126d0:	f7fe f942 	bl	8010958 <HAL_GetTick>
 80126d4:	1bc0      	subs	r0, r0, r7
 80126d6:	2864      	cmp	r0, #100	; 0x64
 80126d8:	d9f7      	bls.n	80126ca <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80126da:	2003      	movs	r0, #3
 80126dc:	e625      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80126de:	4954      	ldr	r1, [pc, #336]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 80126e0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80126e2:	69a3      	ldr	r3, [r4, #24]
 80126e4:	00db      	lsls	r3, r3, #3
 80126e6:	20f8      	movs	r0, #248	; 0xf8
 80126e8:	4382      	bics	r2, r0
 80126ea:	4313      	orrs	r3, r2
 80126ec:	634b      	str	r3, [r1, #52]	; 0x34
 80126ee:	e71e      	b.n	801252e <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80126f0:	4b4f      	ldr	r3, [pc, #316]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 80126f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126f4:	2104      	movs	r1, #4
 80126f6:	430a      	orrs	r2, r1
 80126f8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80126fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126fc:	3903      	subs	r1, #3
 80126fe:	438a      	bics	r2, r1
 8012700:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012702:	f7fe f929 	bl	8010958 <HAL_GetTick>
 8012706:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8012708:	4e49      	ldr	r6, [pc, #292]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 801270a:	2502      	movs	r5, #2
 801270c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801270e:	421d      	tst	r5, r3
 8012710:	d100      	bne.n	8012714 <HAL_RCC_OscConfig+0x454>
 8012712:	e70c      	b.n	801252e <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012714:	f7fe f920 	bl	8010958 <HAL_GetTick>
 8012718:	1bc0      	subs	r0, r0, r7
 801271a:	2864      	cmp	r0, #100	; 0x64
 801271c:	d9f6      	bls.n	801270c <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 801271e:	2003      	movs	r0, #3
 8012720:	e603      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012722:	4b43      	ldr	r3, [pc, #268]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	22c0      	movs	r2, #192	; 0xc0
 8012728:	0252      	lsls	r2, r2, #9
 801272a:	4013      	ands	r3, r2
 801272c:	4293      	cmp	r3, r2
 801272e:	d000      	beq.n	8012732 <HAL_RCC_OscConfig+0x472>
 8012730:	e70f      	b.n	8012552 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012732:	4b3f      	ldr	r3, [pc, #252]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 8012734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012736:	03db      	lsls	r3, r3, #15
 8012738:	d504      	bpl.n	8012744 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 801273a:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801273c:	69e3      	ldr	r3, [r4, #28]
 801273e:	2b01      	cmp	r3, #1
 8012740:	d000      	beq.n	8012744 <HAL_RCC_OscConfig+0x484>
 8012742:	e5f2      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012744:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8012746:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012748:	2b00      	cmp	r3, #0
 801274a:	d100      	bne.n	801274e <HAL_RCC_OscConfig+0x48e>
 801274c:	e5ed      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801274e:	4a38      	ldr	r2, [pc, #224]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 8012750:	6851      	ldr	r1, [r2, #4]
 8012752:	220c      	movs	r2, #12
 8012754:	400a      	ands	r2, r1
 8012756:	2a08      	cmp	r2, #8
 8012758:	d068      	beq.n	801282c <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801275a:	2b02      	cmp	r3, #2
 801275c:	d029      	beq.n	80127b2 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 801275e:	4a34      	ldr	r2, [pc, #208]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 8012760:	6813      	ldr	r3, [r2, #0]
 8012762:	4935      	ldr	r1, [pc, #212]	; (8012838 <HAL_RCC_OscConfig+0x578>)
 8012764:	400b      	ands	r3, r1
 8012766:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012768:	f7fe f8f6 	bl	8010958 <HAL_GetTick>
 801276c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801276e:	4d30      	ldr	r5, [pc, #192]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 8012770:	2480      	movs	r4, #128	; 0x80
 8012772:	04a4      	lsls	r4, r4, #18
 8012774:	682b      	ldr	r3, [r5, #0]
 8012776:	4223      	tst	r3, r4
 8012778:	d056      	beq.n	8012828 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801277a:	f7fe f8ed 	bl	8010958 <HAL_GetTick>
 801277e:	1b80      	subs	r0, r0, r6
 8012780:	2864      	cmp	r0, #100	; 0x64
 8012782:	d9f7      	bls.n	8012774 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012784:	2003      	movs	r0, #3
 8012786:	e5d0      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012788:	4a29      	ldr	r2, [pc, #164]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 801278a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801278c:	492b      	ldr	r1, [pc, #172]	; (801283c <HAL_RCC_OscConfig+0x57c>)
 801278e:	400b      	ands	r3, r1
 8012790:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012792:	f7fe f8e1 	bl	8010958 <HAL_GetTick>
 8012796:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012798:	4e25      	ldr	r6, [pc, #148]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 801279a:	2580      	movs	r5, #128	; 0x80
 801279c:	026d      	lsls	r5, r5, #9
 801279e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80127a0:	422b      	tst	r3, r5
 80127a2:	d0cf      	beq.n	8012744 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80127a4:	f7fe f8d8 	bl	8010958 <HAL_GetTick>
 80127a8:	1bc0      	subs	r0, r0, r7
 80127aa:	2864      	cmp	r0, #100	; 0x64
 80127ac:	d9f7      	bls.n	801279e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 80127ae:	2003      	movs	r0, #3
 80127b0:	e5bb      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 80127b2:	4a1f      	ldr	r2, [pc, #124]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 80127b4:	6813      	ldr	r3, [r2, #0]
 80127b6:	4920      	ldr	r1, [pc, #128]	; (8012838 <HAL_RCC_OscConfig+0x578>)
 80127b8:	400b      	ands	r3, r1
 80127ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80127bc:	f7fe f8cc 	bl	8010958 <HAL_GetTick>
 80127c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80127c2:	4e1b      	ldr	r6, [pc, #108]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 80127c4:	2580      	movs	r5, #128	; 0x80
 80127c6:	04ad      	lsls	r5, r5, #18
 80127c8:	6833      	ldr	r3, [r6, #0]
 80127ca:	422b      	tst	r3, r5
 80127cc:	d006      	beq.n	80127dc <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80127ce:	f7fe f8c3 	bl	8010958 <HAL_GetTick>
 80127d2:	1bc0      	subs	r0, r0, r7
 80127d4:	2864      	cmp	r0, #100	; 0x64
 80127d6:	d9f7      	bls.n	80127c8 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80127d8:	2003      	movs	r0, #3
 80127da:	e5a6      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80127dc:	4b14      	ldr	r3, [pc, #80]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 80127de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127e0:	210f      	movs	r1, #15
 80127e2:	438a      	bics	r2, r1
 80127e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80127e6:	430a      	orrs	r2, r1
 80127e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80127ea:	6859      	ldr	r1, [r3, #4]
 80127ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80127ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80127f0:	4302      	orrs	r2, r0
 80127f2:	4813      	ldr	r0, [pc, #76]	; (8012840 <HAL_RCC_OscConfig+0x580>)
 80127f4:	4001      	ands	r1, r0
 80127f6:	430a      	orrs	r2, r1
 80127f8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80127fa:	6819      	ldr	r1, [r3, #0]
 80127fc:	2280      	movs	r2, #128	; 0x80
 80127fe:	0452      	lsls	r2, r2, #17
 8012800:	430a      	orrs	r2, r1
 8012802:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8012804:	f7fe f8a8 	bl	8010958 <HAL_GetTick>
 8012808:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801280a:	4d09      	ldr	r5, [pc, #36]	; (8012830 <HAL_RCC_OscConfig+0x570>)
 801280c:	2480      	movs	r4, #128	; 0x80
 801280e:	04a4      	lsls	r4, r4, #18
 8012810:	682b      	ldr	r3, [r5, #0]
 8012812:	4223      	tst	r3, r4
 8012814:	d106      	bne.n	8012824 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012816:	f7fe f89f 	bl	8010958 <HAL_GetTick>
 801281a:	1b80      	subs	r0, r0, r6
 801281c:	2864      	cmp	r0, #100	; 0x64
 801281e:	d9f7      	bls.n	8012810 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8012820:	2003      	movs	r0, #3
 8012822:	e582      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8012824:	2000      	movs	r0, #0
 8012826:	e580      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
 8012828:	2000      	movs	r0, #0
 801282a:	e57e      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 801282c:	2001      	movs	r0, #1
 801282e:	e57c      	b.n	801232a <HAL_RCC_OscConfig+0x6a>
 8012830:	40021000 	.word	0x40021000
 8012834:	00001388 	.word	0x00001388
 8012838:	feffffff 	.word	0xfeffffff
 801283c:	fffeffff 	.word	0xfffeffff
 8012840:	ffc27fff 	.word	0xffc27fff

08012844 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012846:	46ce      	mov	lr, r9
 8012848:	4647      	mov	r7, r8
 801284a:	b580      	push	{r7, lr}
 801284c:	0005      	movs	r5, r0
 801284e:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012850:	4b95      	ldr	r3, [pc, #596]	; (8012aa8 <HAL_RCC_ClockConfig+0x264>)
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	2301      	movs	r3, #1
 8012856:	4013      	ands	r3, r2
 8012858:	428b      	cmp	r3, r1
 801285a:	d300      	bcc.n	801285e <HAL_RCC_ClockConfig+0x1a>
 801285c:	e089      	b.n	8012972 <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801285e:	4992      	ldr	r1, [pc, #584]	; (8012aa8 <HAL_RCC_ClockConfig+0x264>)
 8012860:	680b      	ldr	r3, [r1, #0]
 8012862:	2201      	movs	r2, #1
 8012864:	4393      	bics	r3, r2
 8012866:	4323      	orrs	r3, r4
 8012868:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801286a:	680b      	ldr	r3, [r1, #0]
 801286c:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801286e:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012870:	42a2      	cmp	r2, r4
 8012872:	d003      	beq.n	801287c <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8012874:	bc0c      	pop	{r2, r3}
 8012876:	4690      	mov	r8, r2
 8012878:	4699      	mov	r9, r3
 801287a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801287c:	682b      	ldr	r3, [r5, #0]
 801287e:	079b      	lsls	r3, r3, #30
 8012880:	d506      	bpl.n	8012890 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012882:	4a8a      	ldr	r2, [pc, #552]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 8012884:	6853      	ldr	r3, [r2, #4]
 8012886:	21f0      	movs	r1, #240	; 0xf0
 8012888:	438b      	bics	r3, r1
 801288a:	68a9      	ldr	r1, [r5, #8]
 801288c:	430b      	orrs	r3, r1
 801288e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012890:	682b      	ldr	r3, [r5, #0]
 8012892:	07db      	lsls	r3, r3, #31
 8012894:	d400      	bmi.n	8012898 <HAL_RCC_ClockConfig+0x54>
 8012896:	e0f7      	b.n	8012a88 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012898:	686b      	ldr	r3, [r5, #4]
 801289a:	2b01      	cmp	r3, #1
 801289c:	d009      	beq.n	80128b2 <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801289e:	2b02      	cmp	r3, #2
 80128a0:	d02b      	beq.n	80128fa <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80128a2:	2b03      	cmp	r3, #3
 80128a4:	d02f      	beq.n	8012906 <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80128a6:	4a81      	ldr	r2, [pc, #516]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 80128a8:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80128aa:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80128ac:	0792      	lsls	r2, r2, #30
 80128ae:	d405      	bmi.n	80128bc <HAL_RCC_ClockConfig+0x78>
 80128b0:	e7e0      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80128b2:	4a7e      	ldr	r2, [pc, #504]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 80128b4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80128b6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80128b8:	0392      	lsls	r2, r2, #14
 80128ba:	d5db      	bpl.n	8012874 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80128bc:	497b      	ldr	r1, [pc, #492]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 80128be:	684a      	ldr	r2, [r1, #4]
 80128c0:	2003      	movs	r0, #3
 80128c2:	4382      	bics	r2, r0
 80128c4:	4313      	orrs	r3, r2
 80128c6:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80128c8:	f7fe f846 	bl	8010958 <HAL_GetTick>
 80128cc:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80128ce:	686b      	ldr	r3, [r5, #4]
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d01e      	beq.n	8012912 <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80128d4:	2b02      	cmp	r3, #2
 80128d6:	d02c      	beq.n	8012932 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80128d8:	2b03      	cmp	r3, #3
 80128da:	d03a      	beq.n	8012952 <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80128dc:	4f73      	ldr	r7, [pc, #460]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 80128de:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128e0:	4b73      	ldr	r3, [pc, #460]	; (8012ab0 <HAL_RCC_ClockConfig+0x26c>)
 80128e2:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	421e      	tst	r6, r3
 80128e8:	d100      	bne.n	80128ec <HAL_RCC_ClockConfig+0xa8>
 80128ea:	e0cd      	b.n	8012a88 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128ec:	f7fe f834 	bl	8010958 <HAL_GetTick>
 80128f0:	1b00      	subs	r0, r0, r4
 80128f2:	4540      	cmp	r0, r8
 80128f4:	d9f6      	bls.n	80128e4 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 80128f6:	2003      	movs	r0, #3
 80128f8:	e7bc      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80128fa:	4a6c      	ldr	r2, [pc, #432]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 80128fc:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80128fe:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012900:	0192      	lsls	r2, r2, #6
 8012902:	d4db      	bmi.n	80128bc <HAL_RCC_ClockConfig+0x78>
 8012904:	e7b6      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012906:	4a69      	ldr	r2, [pc, #420]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 8012908:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 801290a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801290c:	03d2      	lsls	r2, r2, #15
 801290e:	d4d5      	bmi.n	80128bc <HAL_RCC_ClockConfig+0x78>
 8012910:	e7b0      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012912:	4f66      	ldr	r7, [pc, #408]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 8012914:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012916:	4b66      	ldr	r3, [pc, #408]	; (8012ab0 <HAL_RCC_ClockConfig+0x26c>)
 8012918:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	4033      	ands	r3, r6
 801291e:	2b04      	cmp	r3, #4
 8012920:	d100      	bne.n	8012924 <HAL_RCC_ClockConfig+0xe0>
 8012922:	e0b1      	b.n	8012a88 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012924:	f7fe f818 	bl	8010958 <HAL_GetTick>
 8012928:	1b00      	subs	r0, r0, r4
 801292a:	4540      	cmp	r0, r8
 801292c:	d9f5      	bls.n	801291a <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 801292e:	2003      	movs	r0, #3
 8012930:	e7a0      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012932:	4f5e      	ldr	r7, [pc, #376]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 8012934:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012936:	4b5e      	ldr	r3, [pc, #376]	; (8012ab0 <HAL_RCC_ClockConfig+0x26c>)
 8012938:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	4033      	ands	r3, r6
 801293e:	2b08      	cmp	r3, #8
 8012940:	d100      	bne.n	8012944 <HAL_RCC_ClockConfig+0x100>
 8012942:	e0a1      	b.n	8012a88 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012944:	f7fe f808 	bl	8010958 <HAL_GetTick>
 8012948:	1b00      	subs	r0, r0, r4
 801294a:	4540      	cmp	r0, r8
 801294c:	d9f5      	bls.n	801293a <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 801294e:	2003      	movs	r0, #3
 8012950:	e790      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012952:	4f56      	ldr	r7, [pc, #344]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 8012954:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012956:	4b56      	ldr	r3, [pc, #344]	; (8012ab0 <HAL_RCC_ClockConfig+0x26c>)
 8012958:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	4033      	ands	r3, r6
 801295e:	2b0c      	cmp	r3, #12
 8012960:	d100      	bne.n	8012964 <HAL_RCC_ClockConfig+0x120>
 8012962:	e091      	b.n	8012a88 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012964:	f7fd fff8 	bl	8010958 <HAL_GetTick>
 8012968:	1b00      	subs	r0, r0, r4
 801296a:	4540      	cmp	r0, r8
 801296c:	d9f5      	bls.n	801295a <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 801296e:	2003      	movs	r0, #3
 8012970:	e780      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012972:	6803      	ldr	r3, [r0, #0]
 8012974:	079b      	lsls	r3, r3, #30
 8012976:	d506      	bpl.n	8012986 <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012978:	4a4c      	ldr	r2, [pc, #304]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 801297a:	6853      	ldr	r3, [r2, #4]
 801297c:	21f0      	movs	r1, #240	; 0xf0
 801297e:	438b      	bics	r3, r1
 8012980:	6881      	ldr	r1, [r0, #8]
 8012982:	430b      	orrs	r3, r1
 8012984:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012986:	682b      	ldr	r3, [r5, #0]
 8012988:	07db      	lsls	r3, r3, #31
 801298a:	d571      	bpl.n	8012a70 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801298c:	686b      	ldr	r3, [r5, #4]
 801298e:	2b01      	cmp	r3, #1
 8012990:	d009      	beq.n	80129a6 <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012992:	2b02      	cmp	r3, #2
 8012994:	d02d      	beq.n	80129f2 <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012996:	2b03      	cmp	r3, #3
 8012998:	d031      	beq.n	80129fe <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801299a:	4a44      	ldr	r2, [pc, #272]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 801299c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801299e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80129a0:	0792      	lsls	r2, r2, #30
 80129a2:	d406      	bmi.n	80129b2 <HAL_RCC_ClockConfig+0x16e>
 80129a4:	e766      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80129a6:	4a41      	ldr	r2, [pc, #260]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 80129a8:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80129aa:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80129ac:	0392      	lsls	r2, r2, #14
 80129ae:	d400      	bmi.n	80129b2 <HAL_RCC_ClockConfig+0x16e>
 80129b0:	e760      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80129b2:	493e      	ldr	r1, [pc, #248]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 80129b4:	684a      	ldr	r2, [r1, #4]
 80129b6:	2003      	movs	r0, #3
 80129b8:	4382      	bics	r2, r0
 80129ba:	4313      	orrs	r3, r2
 80129bc:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80129be:	f7fd ffcb 	bl	8010958 <HAL_GetTick>
 80129c2:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80129c4:	686b      	ldr	r3, [r5, #4]
 80129c6:	2b01      	cmp	r3, #1
 80129c8:	d01f      	beq.n	8012a0a <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80129ca:	2b02      	cmp	r3, #2
 80129cc:	d02e      	beq.n	8012a2c <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80129ce:	2b03      	cmp	r3, #3
 80129d0:	d03d      	beq.n	8012a4e <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80129d2:	4b36      	ldr	r3, [pc, #216]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 80129d4:	4698      	mov	r8, r3
 80129d6:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129d8:	4b35      	ldr	r3, [pc, #212]	; (8012ab0 <HAL_RCC_ClockConfig+0x26c>)
 80129da:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80129dc:	4643      	mov	r3, r8
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	421f      	tst	r7, r3
 80129e2:	d045      	beq.n	8012a70 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129e4:	f7fd ffb8 	bl	8010958 <HAL_GetTick>
 80129e8:	1b80      	subs	r0, r0, r6
 80129ea:	4548      	cmp	r0, r9
 80129ec:	d9f6      	bls.n	80129dc <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 80129ee:	2003      	movs	r0, #3
 80129f0:	e740      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80129f2:	4a2e      	ldr	r2, [pc, #184]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 80129f4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80129f6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80129f8:	0192      	lsls	r2, r2, #6
 80129fa:	d4da      	bmi.n	80129b2 <HAL_RCC_ClockConfig+0x16e>
 80129fc:	e73a      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80129fe:	4a2b      	ldr	r2, [pc, #172]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 8012a00:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8012a02:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012a04:	03d2      	lsls	r2, r2, #15
 8012a06:	d4d4      	bmi.n	80129b2 <HAL_RCC_ClockConfig+0x16e>
 8012a08:	e734      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012a0a:	4b28      	ldr	r3, [pc, #160]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 8012a0c:	4698      	mov	r8, r3
 8012a0e:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a10:	4b27      	ldr	r3, [pc, #156]	; (8012ab0 <HAL_RCC_ClockConfig+0x26c>)
 8012a12:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012a14:	4643      	mov	r3, r8
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	403b      	ands	r3, r7
 8012a1a:	2b04      	cmp	r3, #4
 8012a1c:	d028      	beq.n	8012a70 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a1e:	f7fd ff9b 	bl	8010958 <HAL_GetTick>
 8012a22:	1b80      	subs	r0, r0, r6
 8012a24:	4548      	cmp	r0, r9
 8012a26:	d9f5      	bls.n	8012a14 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 8012a28:	2003      	movs	r0, #3
 8012a2a:	e723      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012a2c:	4b1f      	ldr	r3, [pc, #124]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 8012a2e:	4698      	mov	r8, r3
 8012a30:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a32:	4b1f      	ldr	r3, [pc, #124]	; (8012ab0 <HAL_RCC_ClockConfig+0x26c>)
 8012a34:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012a36:	4643      	mov	r3, r8
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	403b      	ands	r3, r7
 8012a3c:	2b08      	cmp	r3, #8
 8012a3e:	d017      	beq.n	8012a70 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a40:	f7fd ff8a 	bl	8010958 <HAL_GetTick>
 8012a44:	1b80      	subs	r0, r0, r6
 8012a46:	4548      	cmp	r0, r9
 8012a48:	d9f5      	bls.n	8012a36 <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 8012a4a:	2003      	movs	r0, #3
 8012a4c:	e712      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012a4e:	4b17      	ldr	r3, [pc, #92]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 8012a50:	4698      	mov	r8, r3
 8012a52:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a54:	4b16      	ldr	r3, [pc, #88]	; (8012ab0 <HAL_RCC_ClockConfig+0x26c>)
 8012a56:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012a58:	4643      	mov	r3, r8
 8012a5a:	685b      	ldr	r3, [r3, #4]
 8012a5c:	403b      	ands	r3, r7
 8012a5e:	2b0c      	cmp	r3, #12
 8012a60:	d006      	beq.n	8012a70 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a62:	f7fd ff79 	bl	8010958 <HAL_GetTick>
 8012a66:	1b80      	subs	r0, r0, r6
 8012a68:	4548      	cmp	r0, r9
 8012a6a:	d9f5      	bls.n	8012a58 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8012a6c:	2003      	movs	r0, #3
 8012a6e:	e701      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012a70:	490d      	ldr	r1, [pc, #52]	; (8012aa8 <HAL_RCC_ClockConfig+0x264>)
 8012a72:	680b      	ldr	r3, [r1, #0]
 8012a74:	2201      	movs	r2, #1
 8012a76:	4393      	bics	r3, r2
 8012a78:	4323      	orrs	r3, r4
 8012a7a:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012a7c:	680b      	ldr	r3, [r1, #0]
 8012a7e:	401a      	ands	r2, r3
      return HAL_ERROR;
 8012a80:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012a82:	42a2      	cmp	r2, r4
 8012a84:	d000      	beq.n	8012a88 <HAL_RCC_ClockConfig+0x244>
 8012a86:	e6f5      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012a88:	682b      	ldr	r3, [r5, #0]
 8012a8a:	075b      	lsls	r3, r3, #29
 8012a8c:	d506      	bpl.n	8012a9c <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012a8e:	4a07      	ldr	r2, [pc, #28]	; (8012aac <HAL_RCC_ClockConfig+0x268>)
 8012a90:	6853      	ldr	r3, [r2, #4]
 8012a92:	4908      	ldr	r1, [pc, #32]	; (8012ab4 <HAL_RCC_ClockConfig+0x270>)
 8012a94:	400b      	ands	r3, r1
 8012a96:	68e9      	ldr	r1, [r5, #12]
 8012a98:	430b      	orrs	r3, r1
 8012a9a:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	f7fd ff31 	bl	8010904 <HAL_InitTick>
  return HAL_OK;
 8012aa2:	2000      	movs	r0, #0
 8012aa4:	e6e6      	b.n	8012874 <HAL_RCC_ClockConfig+0x30>
 8012aa6:	46c0      	nop			; (mov r8, r8)
 8012aa8:	40022000 	.word	0x40022000
 8012aac:	40021000 	.word	0x40021000
 8012ab0:	00001388 	.word	0x00001388
 8012ab4:	fffff8ff 	.word	0xfffff8ff

08012ab8 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012ab8:	b530      	push	{r4, r5, lr}
 8012aba:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012abc:	aa04      	add	r2, sp, #16
 8012abe:	4b21      	ldr	r3, [pc, #132]	; (8012b44 <HAL_RCC_GetSysClockFreq+0x8c>)
 8012ac0:	0018      	movs	r0, r3
 8012ac2:	c832      	ldmia	r0!, {r1, r4, r5}
 8012ac4:	c232      	stmia	r2!, {r1, r4, r5}
 8012ac6:	0011      	movs	r1, r2
 8012ac8:	6802      	ldr	r2, [r0, #0]
 8012aca:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012acc:	466a      	mov	r2, sp
 8012ace:	3310      	adds	r3, #16
 8012ad0:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012ad2:	c213      	stmia	r2!, {r0, r1, r4}
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012ad8:	4b1b      	ldr	r3, [pc, #108]	; (8012b48 <HAL_RCC_GetSysClockFreq+0x90>)
 8012ada:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012adc:	200c      	movs	r0, #12
 8012ade:	4018      	ands	r0, r3
 8012ae0:	2808      	cmp	r0, #8
 8012ae2:	d00a      	beq.n	8012afa <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012ae4:	380c      	subs	r0, #12
 8012ae6:	4243      	negs	r3, r0
 8012ae8:	4158      	adcs	r0, r3
 8012aea:	4240      	negs	r0, r0
 8012aec:	4b17      	ldr	r3, [pc, #92]	; (8012b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8012aee:	4018      	ands	r0, r3
 8012af0:	4b17      	ldr	r3, [pc, #92]	; (8012b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8012af2:	469c      	mov	ip, r3
 8012af4:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8012af6:	b009      	add	sp, #36	; 0x24
 8012af8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8012afa:	0c99      	lsrs	r1, r3, #18
 8012afc:	220f      	movs	r2, #15
 8012afe:	4011      	ands	r1, r2
 8012b00:	a804      	add	r0, sp, #16
 8012b02:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012b04:	4910      	ldr	r1, [pc, #64]	; (8012b48 <HAL_RCC_GetSysClockFreq+0x90>)
 8012b06:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012b08:	400a      	ands	r2, r1
 8012b0a:	4669      	mov	r1, sp
 8012b0c:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012b0e:	22c0      	movs	r2, #192	; 0xc0
 8012b10:	0252      	lsls	r2, r2, #9
 8012b12:	4013      	ands	r3, r2
 8012b14:	2280      	movs	r2, #128	; 0x80
 8012b16:	0252      	lsls	r2, r2, #9
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d008      	beq.n	8012b2e <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8012b1c:	22c0      	movs	r2, #192	; 0xc0
 8012b1e:	0252      	lsls	r2, r2, #9
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d009      	beq.n	8012b38 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012b24:	480a      	ldr	r0, [pc, #40]	; (8012b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8012b26:	f7ed fb13 	bl	8000150 <__udivsi3>
 8012b2a:	4360      	muls	r0, r4
 8012b2c:	e7e3      	b.n	8012af6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8012b2e:	4808      	ldr	r0, [pc, #32]	; (8012b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8012b30:	f7ed fb0e 	bl	8000150 <__udivsi3>
 8012b34:	4360      	muls	r0, r4
 8012b36:	e7de      	b.n	8012af6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8012b38:	4806      	ldr	r0, [pc, #24]	; (8012b54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012b3a:	f7ed fb09 	bl	8000150 <__udivsi3>
 8012b3e:	4360      	muls	r0, r4
 8012b40:	e7d9      	b.n	8012af6 <HAL_RCC_GetSysClockFreq+0x3e>
 8012b42:	46c0      	nop			; (mov r8, r8)
 8012b44:	08018b6c 	.word	0x08018b6c
 8012b48:	40021000 	.word	0x40021000
 8012b4c:	02625a00 	.word	0x02625a00
 8012b50:	007a1200 	.word	0x007a1200
 8012b54:	02dc6c00 	.word	0x02dc6c00

08012b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012b58:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012b5a:	f7ff ffad 	bl	8012ab8 <HAL_RCC_GetSysClockFreq>
 8012b5e:	4b05      	ldr	r3, [pc, #20]	; (8012b74 <HAL_RCC_GetHCLKFreq+0x1c>)
 8012b60:	685b      	ldr	r3, [r3, #4]
 8012b62:	061b      	lsls	r3, r3, #24
 8012b64:	0f1b      	lsrs	r3, r3, #28
 8012b66:	4a04      	ldr	r2, [pc, #16]	; (8012b78 <HAL_RCC_GetHCLKFreq+0x20>)
 8012b68:	5cd3      	ldrb	r3, [r2, r3]
 8012b6a:	40d8      	lsrs	r0, r3
 8012b6c:	4b03      	ldr	r3, [pc, #12]	; (8012b7c <HAL_RCC_GetHCLKFreq+0x24>)
 8012b6e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012b70:	bd10      	pop	{r4, pc}
 8012b72:	46c0      	nop			; (mov r8, r8)
 8012b74:	40021000 	.word	0x40021000
 8012b78:	0801ba8c 	.word	0x0801ba8c
 8012b7c:	20000120 	.word	0x20000120

08012b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012b80:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012b82:	f7ff ffe9 	bl	8012b58 <HAL_RCC_GetHCLKFreq>
 8012b86:	4b04      	ldr	r3, [pc, #16]	; (8012b98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	055b      	lsls	r3, r3, #21
 8012b8c:	0f5b      	lsrs	r3, r3, #29
 8012b8e:	4a03      	ldr	r2, [pc, #12]	; (8012b9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012b90:	5cd3      	ldrb	r3, [r2, r3]
 8012b92:	40d8      	lsrs	r0, r3
}    
 8012b94:	bd10      	pop	{r4, pc}
 8012b96:	46c0      	nop			; (mov r8, r8)
 8012b98:	40021000 	.word	0x40021000
 8012b9c:	0801ba8c 	.word	0x0801ba8c

08012ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ba2:	46c6      	mov	lr, r8
 8012ba4:	b500      	push	{lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012baa:	6803      	ldr	r3, [r0, #0]
 8012bac:	03db      	lsls	r3, r3, #15
 8012bae:	d507      	bpl.n	8012bc0 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012bb0:	4b43      	ldr	r3, [pc, #268]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012bb2:	6a1b      	ldr	r3, [r3, #32]
 8012bb4:	6842      	ldr	r2, [r0, #4]
 8012bb6:	4053      	eors	r3, r2
 8012bb8:	22c0      	movs	r2, #192	; 0xc0
 8012bba:	0092      	lsls	r2, r2, #2
 8012bbc:	4213      	tst	r3, r2
 8012bbe:	d136      	bne.n	8012c2e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	07db      	lsls	r3, r3, #31
 8012bc4:	d506      	bpl.n	8012bd4 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012bc6:	4a3e      	ldr	r2, [pc, #248]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012bc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012bca:	2103      	movs	r1, #3
 8012bcc:	438b      	bics	r3, r1
 8012bce:	68a1      	ldr	r1, [r4, #8]
 8012bd0:	430b      	orrs	r3, r1
 8012bd2:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012bd4:	6823      	ldr	r3, [r4, #0]
 8012bd6:	079b      	lsls	r3, r3, #30
 8012bd8:	d506      	bpl.n	8012be8 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012bda:	4a39      	ldr	r2, [pc, #228]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012bdc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012bde:	4939      	ldr	r1, [pc, #228]	; (8012cc4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012be0:	400b      	ands	r3, r1
 8012be2:	68e1      	ldr	r1, [r4, #12]
 8012be4:	430b      	orrs	r3, r1
 8012be6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	035b      	lsls	r3, r3, #13
 8012bec:	d506      	bpl.n	8012bfc <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012bee:	4a34      	ldr	r2, [pc, #208]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012bf0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012bf2:	4935      	ldr	r1, [pc, #212]	; (8012cc8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012bf4:	400b      	ands	r3, r1
 8012bf6:	6921      	ldr	r1, [r4, #16]
 8012bf8:	430b      	orrs	r3, r1
 8012bfa:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012bfc:	6823      	ldr	r3, [r4, #0]
 8012bfe:	069b      	lsls	r3, r3, #26
 8012c00:	d506      	bpl.n	8012c10 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012c02:	4a2f      	ldr	r2, [pc, #188]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012c06:	2110      	movs	r1, #16
 8012c08:	438b      	bics	r3, r1
 8012c0a:	6961      	ldr	r1, [r4, #20]
 8012c0c:	430b      	orrs	r3, r1
 8012c0e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012c10:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012c12:	6823      	ldr	r3, [r4, #0]
 8012c14:	055b      	lsls	r3, r3, #21
 8012c16:	d506      	bpl.n	8012c26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012c18:	4a29      	ldr	r2, [pc, #164]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012c1c:	2140      	movs	r1, #64	; 0x40
 8012c1e:	438b      	bics	r3, r1
 8012c20:	69a1      	ldr	r1, [r4, #24]
 8012c22:	430b      	orrs	r3, r1
 8012c24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8012c26:	b002      	add	sp, #8
 8012c28:	bc04      	pop	{r2}
 8012c2a:	4690      	mov	r8, r2
 8012c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8012c2e:	4a24      	ldr	r2, [pc, #144]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c30:	69d1      	ldr	r1, [r2, #28]
 8012c32:	2080      	movs	r0, #128	; 0x80
 8012c34:	0540      	lsls	r0, r0, #21
 8012c36:	4301      	orrs	r1, r0
 8012c38:	61d1      	str	r1, [r2, #28]
 8012c3a:	69d3      	ldr	r3, [r2, #28]
 8012c3c:	4003      	ands	r3, r0
 8012c3e:	9301      	str	r3, [sp, #4]
 8012c40:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012c42:	4a22      	ldr	r2, [pc, #136]	; (8012ccc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012c44:	6811      	ldr	r1, [r2, #0]
 8012c46:	2380      	movs	r3, #128	; 0x80
 8012c48:	005b      	lsls	r3, r3, #1
 8012c4a:	430b      	orrs	r3, r1
 8012c4c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012c4e:	f7fd fe83 	bl	8010958 <HAL_GetTick>
 8012c52:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012c54:	4e1d      	ldr	r6, [pc, #116]	; (8012ccc <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012c56:	2580      	movs	r5, #128	; 0x80
 8012c58:	006d      	lsls	r5, r5, #1
 8012c5a:	6833      	ldr	r3, [r6, #0]
 8012c5c:	422b      	tst	r3, r5
 8012c5e:	d106      	bne.n	8012c6e <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012c60:	f7fd fe7a 	bl	8010958 <HAL_GetTick>
 8012c64:	1bc0      	subs	r0, r0, r7
 8012c66:	2864      	cmp	r0, #100	; 0x64
 8012c68:	d9f7      	bls.n	8012c5a <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8012c6a:	2003      	movs	r0, #3
 8012c6c:	e7db      	b.n	8012c26 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012c6e:	4b14      	ldr	r3, [pc, #80]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c70:	6a18      	ldr	r0, [r3, #32]
 8012c72:	4a17      	ldr	r2, [pc, #92]	; (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012c74:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8012c76:	6a1d      	ldr	r5, [r3, #32]
 8012c78:	2180      	movs	r1, #128	; 0x80
 8012c7a:	0249      	lsls	r1, r1, #9
 8012c7c:	4329      	orrs	r1, r5
 8012c7e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012c80:	6a19      	ldr	r1, [r3, #32]
 8012c82:	4d14      	ldr	r5, [pc, #80]	; (8012cd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012c84:	4029      	ands	r1, r5
 8012c86:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012c88:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012c8a:	0783      	lsls	r3, r0, #30
 8012c8c:	d407      	bmi.n	8012c9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012c8e:	4a0c      	ldr	r2, [pc, #48]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c90:	6a13      	ldr	r3, [r2, #32]
 8012c92:	490f      	ldr	r1, [pc, #60]	; (8012cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012c94:	400b      	ands	r3, r1
 8012c96:	6861      	ldr	r1, [r4, #4]
 8012c98:	430b      	orrs	r3, r1
 8012c9a:	6213      	str	r3, [r2, #32]
 8012c9c:	e790      	b.n	8012bc0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8012c9e:	f7fd fe5b 	bl	8010958 <HAL_GetTick>
 8012ca2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012ca4:	4e06      	ldr	r6, [pc, #24]	; (8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012ca6:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012ca8:	4f0b      	ldr	r7, [pc, #44]	; (8012cd8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012caa:	6a33      	ldr	r3, [r6, #32]
 8012cac:	421d      	tst	r5, r3
 8012cae:	d1ee      	bne.n	8012c8e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012cb0:	f7fd fe52 	bl	8010958 <HAL_GetTick>
 8012cb4:	4643      	mov	r3, r8
 8012cb6:	1ac0      	subs	r0, r0, r3
 8012cb8:	42b8      	cmp	r0, r7
 8012cba:	d9f6      	bls.n	8012caa <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8012cbc:	2003      	movs	r0, #3
 8012cbe:	e7b2      	b.n	8012c26 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8012cc0:	40021000 	.word	0x40021000
 8012cc4:	fffcffff 	.word	0xfffcffff
 8012cc8:	fff3ffff 	.word	0xfff3ffff
 8012ccc:	40007000 	.word	0x40007000
 8012cd0:	fffffcff 	.word	0xfffffcff
 8012cd4:	fffeffff 	.word	0xfffeffff
 8012cd8:	00001388 	.word	0x00001388

08012cdc <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012cdc:	4770      	bx	lr

08012cde <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce0:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012ce2:	6802      	ldr	r2, [r0, #0]
 8012ce4:	68d3      	ldr	r3, [r2, #12]
 8012ce6:	21a0      	movs	r1, #160	; 0xa0
 8012ce8:	438b      	bics	r3, r1
 8012cea:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012cec:	f7fd fe34 	bl	8010958 <HAL_GetTick>
 8012cf0:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012cf2:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012cf4:	26fa      	movs	r6, #250	; 0xfa
 8012cf6:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012cf8:	6823      	ldr	r3, [r4, #0]
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	421d      	tst	r5, r3
 8012cfe:	d106      	bne.n	8012d0e <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012d00:	f7fd fe2a 	bl	8010958 <HAL_GetTick>
 8012d04:	1bc0      	subs	r0, r0, r7
 8012d06:	42b0      	cmp	r0, r6
 8012d08:	d9f6      	bls.n	8012cf8 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8012d0a:	2003      	movs	r0, #3
 8012d0c:	e000      	b.n	8012d10 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8012d0e:	2000      	movs	r0, #0
}
 8012d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012d12 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d14:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012d16:	6803      	ldr	r3, [r0, #0]
 8012d18:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012d1a:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012d1c:	0652      	lsls	r2, r2, #25
 8012d1e:	d500      	bpl.n	8012d22 <RTC_EnterInitMode+0x10>
}
 8012d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012d22:	2201      	movs	r2, #1
 8012d24:	4252      	negs	r2, r2
 8012d26:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012d28:	f7fd fe16 	bl	8010958 <HAL_GetTick>
 8012d2c:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012d2e:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012d30:	26fa      	movs	r6, #250	; 0xfa
 8012d32:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012d34:	6823      	ldr	r3, [r4, #0]
 8012d36:	68db      	ldr	r3, [r3, #12]
 8012d38:	421d      	tst	r5, r3
 8012d3a:	d106      	bne.n	8012d4a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012d3c:	f7fd fe0c 	bl	8010958 <HAL_GetTick>
 8012d40:	1bc0      	subs	r0, r0, r7
 8012d42:	42b0      	cmp	r0, r6
 8012d44:	d9f6      	bls.n	8012d34 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8012d46:	2003      	movs	r0, #3
 8012d48:	e7ea      	b.n	8012d20 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012d4a:	2000      	movs	r0, #0
 8012d4c:	e7e8      	b.n	8012d20 <RTC_EnterInitMode+0xe>
	...

08012d50 <HAL_RTC_Init>:
{
 8012d50:	b570      	push	{r4, r5, r6, lr}
 8012d52:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012d54:	d046      	beq.n	8012de4 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012d56:	7f43      	ldrb	r3, [r0, #29]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d038      	beq.n	8012dce <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012d60:	6823      	ldr	r3, [r4, #0]
 8012d62:	22ca      	movs	r2, #202	; 0xca
 8012d64:	625a      	str	r2, [r3, #36]	; 0x24
 8012d66:	6823      	ldr	r3, [r4, #0]
 8012d68:	3a77      	subs	r2, #119	; 0x77
 8012d6a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012d6c:	0020      	movs	r0, r4
 8012d6e:	f7ff ffd0 	bl	8012d12 <RTC_EnterInitMode>
 8012d72:	2800      	cmp	r0, #0
 8012d74:	d12f      	bne.n	8012dd6 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012d76:	6822      	ldr	r2, [r4, #0]
 8012d78:	6893      	ldr	r3, [r2, #8]
 8012d7a:	491b      	ldr	r1, [pc, #108]	; (8012de8 <HAL_RTC_Init+0x98>)
 8012d7c:	400b      	ands	r3, r1
 8012d7e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012d80:	6822      	ldr	r2, [r4, #0]
 8012d82:	6891      	ldr	r1, [r2, #8]
 8012d84:	6863      	ldr	r3, [r4, #4]
 8012d86:	6925      	ldr	r5, [r4, #16]
 8012d88:	432b      	orrs	r3, r5
 8012d8a:	6965      	ldr	r5, [r4, #20]
 8012d8c:	432b      	orrs	r3, r5
 8012d8e:	430b      	orrs	r3, r1
 8012d90:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012d92:	6823      	ldr	r3, [r4, #0]
 8012d94:	68e2      	ldr	r2, [r4, #12]
 8012d96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012d98:	6822      	ldr	r2, [r4, #0]
 8012d9a:	6911      	ldr	r1, [r2, #16]
 8012d9c:	68a3      	ldr	r3, [r4, #8]
 8012d9e:	041b      	lsls	r3, r3, #16
 8012da0:	430b      	orrs	r3, r1
 8012da2:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012da4:	6822      	ldr	r2, [r4, #0]
 8012da6:	68d3      	ldr	r3, [r2, #12]
 8012da8:	2180      	movs	r1, #128	; 0x80
 8012daa:	438b      	bics	r3, r1
 8012dac:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012dae:	6822      	ldr	r2, [r4, #0]
 8012db0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012db2:	490e      	ldr	r1, [pc, #56]	; (8012dec <HAL_RTC_Init+0x9c>)
 8012db4:	400b      	ands	r3, r1
 8012db6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012db8:	6822      	ldr	r2, [r4, #0]
 8012dba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012dbc:	69a1      	ldr	r1, [r4, #24]
 8012dbe:	430b      	orrs	r3, r1
 8012dc0:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012dc2:	6823      	ldr	r3, [r4, #0]
 8012dc4:	22ff      	movs	r2, #255	; 0xff
 8012dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	7763      	strb	r3, [r4, #29]
}
 8012dcc:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012dce:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012dd0:	f7ff ff84 	bl	8012cdc <HAL_RTC_MspInit>
 8012dd4:	e7c2      	b.n	8012d5c <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012dd6:	6823      	ldr	r3, [r4, #0]
 8012dd8:	22ff      	movs	r2, #255	; 0xff
 8012dda:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012ddc:	2304      	movs	r3, #4
 8012dde:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012de0:	2001      	movs	r0, #1
 8012de2:	e7f3      	b.n	8012dcc <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8012de4:	2001      	movs	r0, #1
 8012de6:	e7f1      	b.n	8012dcc <HAL_RTC_Init+0x7c>
 8012de8:	ff8fffbf 	.word	0xff8fffbf
 8012dec:	fffbffff 	.word	0xfffbffff

08012df0 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8012df0:	2809      	cmp	r0, #9
 8012df2:	d909      	bls.n	8012e08 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8012df4:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8012df6:	3301      	adds	r3, #1
    Value -= 10;
 8012df8:	380a      	subs	r0, #10
 8012dfa:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012dfc:	2809      	cmp	r0, #9
 8012dfe:	d8fa      	bhi.n	8012df6 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012e00:	011b      	lsls	r3, r3, #4
 8012e02:	4318      	orrs	r0, r3
 8012e04:	b2c0      	uxtb	r0, r0
}
 8012e06:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	e7f9      	b.n	8012e00 <RTC_ByteToBcd2+0x10>

08012e0c <HAL_RTC_SetTime>:
{
 8012e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e0e:	46c6      	mov	lr, r8
 8012e10:	b500      	push	{lr}
 8012e12:	0004      	movs	r4, r0
 8012e14:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012e16:	7f03      	ldrb	r3, [r0, #28]
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d100      	bne.n	8012e1e <HAL_RTC_SetTime+0x12>
 8012e1c:	e075      	b.n	8012f0a <HAL_RTC_SetTime+0xfe>
 8012e1e:	2301      	movs	r3, #1
 8012e20:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012e22:	3301      	adds	r3, #1
 8012e24:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012e26:	2a00      	cmp	r2, #0
 8012e28:	d144      	bne.n	8012eb4 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012e2a:	6803      	ldr	r3, [r0, #0]
 8012e2c:	689b      	ldr	r3, [r3, #8]
 8012e2e:	065b      	lsls	r3, r3, #25
 8012e30:	d401      	bmi.n	8012e36 <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8012e32:	2300      	movs	r3, #0
 8012e34:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012e36:	7830      	ldrb	r0, [r6, #0]
 8012e38:	f7ff ffda 	bl	8012df0 <RTC_ByteToBcd2>
 8012e3c:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012e3e:	7870      	ldrb	r0, [r6, #1]
 8012e40:	f7ff ffd6 	bl	8012df0 <RTC_ByteToBcd2>
 8012e44:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012e46:	78b0      	ldrb	r0, [r6, #2]
 8012e48:	f7ff ffd2 	bl	8012df0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012e4c:	7a35      	ldrb	r5, [r6, #8]
 8012e4e:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012e50:	4305      	orrs	r5, r0
 8012e52:	4643      	mov	r3, r8
 8012e54:	0418      	lsls	r0, r3, #16
 8012e56:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012e58:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012e5a:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012e5c:	6823      	ldr	r3, [r4, #0]
 8012e5e:	22ca      	movs	r2, #202	; 0xca
 8012e60:	625a      	str	r2, [r3, #36]	; 0x24
 8012e62:	6823      	ldr	r3, [r4, #0]
 8012e64:	3a77      	subs	r2, #119	; 0x77
 8012e66:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012e68:	0020      	movs	r0, r4
 8012e6a:	f7ff ff52 	bl	8012d12 <RTC_EnterInitMode>
 8012e6e:	1e07      	subs	r7, r0, #0
 8012e70:	d131      	bne.n	8012ed6 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012e72:	6823      	ldr	r3, [r4, #0]
 8012e74:	4826      	ldr	r0, [pc, #152]	; (8012f10 <HAL_RTC_SetTime+0x104>)
 8012e76:	4005      	ands	r5, r0
 8012e78:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012e7a:	6822      	ldr	r2, [r4, #0]
 8012e7c:	6893      	ldr	r3, [r2, #8]
 8012e7e:	4925      	ldr	r1, [pc, #148]	; (8012f14 <HAL_RTC_SetTime+0x108>)
 8012e80:	400b      	ands	r3, r1
 8012e82:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012e84:	6822      	ldr	r2, [r4, #0]
 8012e86:	6891      	ldr	r1, [r2, #8]
 8012e88:	68f3      	ldr	r3, [r6, #12]
 8012e8a:	6930      	ldr	r0, [r6, #16]
 8012e8c:	4303      	orrs	r3, r0
 8012e8e:	430b      	orrs	r3, r1
 8012e90:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012e92:	6822      	ldr	r2, [r4, #0]
 8012e94:	68d3      	ldr	r3, [r2, #12]
 8012e96:	2180      	movs	r1, #128	; 0x80
 8012e98:	438b      	bics	r3, r1
 8012e9a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012e9c:	6823      	ldr	r3, [r4, #0]
 8012e9e:	689b      	ldr	r3, [r3, #8]
 8012ea0:	069b      	lsls	r3, r3, #26
 8012ea2:	d524      	bpl.n	8012eee <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012ea4:	6823      	ldr	r3, [r4, #0]
 8012ea6:	22ff      	movs	r2, #255	; 0xff
 8012ea8:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012eae:	2300      	movs	r3, #0
 8012eb0:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8012eb2:	e018      	b.n	8012ee6 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012eb4:	6803      	ldr	r3, [r0, #0]
 8012eb6:	689b      	ldr	r3, [r3, #8]
 8012eb8:	065b      	lsls	r3, r3, #25
 8012eba:	d401      	bmi.n	8012ec0 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012ec0:	7835      	ldrb	r5, [r6, #0]
 8012ec2:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012ec4:	7870      	ldrb	r0, [r6, #1]
 8012ec6:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012ec8:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012eca:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012ecc:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012ece:	7a30      	ldrb	r0, [r6, #8]
 8012ed0:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012ed2:	4305      	orrs	r5, r0
 8012ed4:	e7c2      	b.n	8012e5c <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012ed6:	6823      	ldr	r3, [r4, #0]
 8012ed8:	22ff      	movs	r2, #255	; 0xff
 8012eda:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012edc:	2304      	movs	r3, #4
 8012ede:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012ee4:	2701      	movs	r7, #1
}
 8012ee6:	0038      	movs	r0, r7
 8012ee8:	bc04      	pop	{r2}
 8012eea:	4690      	mov	r8, r2
 8012eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012eee:	0020      	movs	r0, r4
 8012ef0:	f7ff fef5 	bl	8012cde <HAL_RTC_WaitForSynchro>
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	d0d5      	beq.n	8012ea4 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012ef8:	6823      	ldr	r3, [r4, #0]
 8012efa:	22ff      	movs	r2, #255	; 0xff
 8012efc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012efe:	2304      	movs	r3, #4
 8012f00:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012f02:	2300      	movs	r3, #0
 8012f04:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012f06:	2701      	movs	r7, #1
 8012f08:	e7ed      	b.n	8012ee6 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8012f0a:	2702      	movs	r7, #2
 8012f0c:	e7eb      	b.n	8012ee6 <HAL_RTC_SetTime+0xda>
 8012f0e:	46c0      	nop			; (mov r8, r8)
 8012f10:	007f7f7f 	.word	0x007f7f7f
 8012f14:	fffbffff 	.word	0xfffbffff

08012f18 <HAL_RTC_SetDate>:
{
 8012f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f1a:	46c6      	mov	lr, r8
 8012f1c:	b500      	push	{lr}
 8012f1e:	0004      	movs	r4, r0
 8012f20:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012f22:	7f03      	ldrb	r3, [r0, #28]
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d03a      	beq.n	8012f9e <HAL_RTC_SetDate+0x86>
 8012f28:	2301      	movs	r3, #1
 8012f2a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012f30:	2a00      	cmp	r2, #0
 8012f32:	d136      	bne.n	8012fa2 <HAL_RTC_SetDate+0x8a>
 8012f34:	784b      	ldrb	r3, [r1, #1]
 8012f36:	06da      	lsls	r2, r3, #27
 8012f38:	d503      	bpl.n	8012f42 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012f3a:	2210      	movs	r2, #16
 8012f3c:	4393      	bics	r3, r2
 8012f3e:	330a      	adds	r3, #10
 8012f40:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012f42:	78f0      	ldrb	r0, [r6, #3]
 8012f44:	f7ff ff54 	bl	8012df0 <RTC_ByteToBcd2>
 8012f48:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012f4a:	7870      	ldrb	r0, [r6, #1]
 8012f4c:	f7ff ff50 	bl	8012df0 <RTC_ByteToBcd2>
 8012f50:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012f52:	78b0      	ldrb	r0, [r6, #2]
 8012f54:	f7ff ff4c 	bl	8012df0 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012f58:	7835      	ldrb	r5, [r6, #0]
 8012f5a:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012f5c:	4305      	orrs	r5, r0
 8012f5e:	4643      	mov	r3, r8
 8012f60:	0418      	lsls	r0, r3, #16
 8012f62:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012f64:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012f66:	433d      	orrs	r5, r7
 8012f68:	e025      	b.n	8012fb6 <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012f6a:	6823      	ldr	r3, [r4, #0]
 8012f6c:	22ff      	movs	r2, #255	; 0xff
 8012f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012f70:	2304      	movs	r3, #4
 8012f72:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012f74:	2300      	movs	r3, #0
 8012f76:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012f78:	2601      	movs	r6, #1
}
 8012f7a:	0030      	movs	r0, r6
 8012f7c:	bc04      	pop	{r2}
 8012f7e:	4690      	mov	r8, r2
 8012f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012f82:	0020      	movs	r0, r4
 8012f84:	f7ff feab 	bl	8012cde <HAL_RTC_WaitForSynchro>
 8012f88:	2800      	cmp	r0, #0
 8012f8a:	d02c      	beq.n	8012fe6 <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012f8c:	6823      	ldr	r3, [r4, #0]
 8012f8e:	22ff      	movs	r2, #255	; 0xff
 8012f90:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012f92:	2304      	movs	r3, #4
 8012f94:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012f96:	2300      	movs	r3, #0
 8012f98:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012f9a:	2601      	movs	r6, #1
 8012f9c:	e7ed      	b.n	8012f7a <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8012f9e:	2602      	movs	r6, #2
 8012fa0:	e7eb      	b.n	8012f7a <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012fa2:	78cd      	ldrb	r5, [r1, #3]
 8012fa4:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012fa6:	7848      	ldrb	r0, [r1, #1]
 8012fa8:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012faa:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8012fac:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8012fae:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012fb0:	7808      	ldrb	r0, [r1, #0]
 8012fb2:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012fb4:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012fb6:	6823      	ldr	r3, [r4, #0]
 8012fb8:	22ca      	movs	r2, #202	; 0xca
 8012fba:	625a      	str	r2, [r3, #36]	; 0x24
 8012fbc:	6823      	ldr	r3, [r4, #0]
 8012fbe:	3a77      	subs	r2, #119	; 0x77
 8012fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012fc2:	0020      	movs	r0, r4
 8012fc4:	f7ff fea5 	bl	8012d12 <RTC_EnterInitMode>
 8012fc8:	1e06      	subs	r6, r0, #0
 8012fca:	d1ce      	bne.n	8012f6a <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012fcc:	6823      	ldr	r3, [r4, #0]
 8012fce:	480a      	ldr	r0, [pc, #40]	; (8012ff8 <HAL_RTC_SetDate+0xe0>)
 8012fd0:	4005      	ands	r5, r0
 8012fd2:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012fd4:	6822      	ldr	r2, [r4, #0]
 8012fd6:	68d3      	ldr	r3, [r2, #12]
 8012fd8:	2180      	movs	r1, #128	; 0x80
 8012fda:	438b      	bics	r3, r1
 8012fdc:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012fde:	6823      	ldr	r3, [r4, #0]
 8012fe0:	689b      	ldr	r3, [r3, #8]
 8012fe2:	069b      	lsls	r3, r3, #26
 8012fe4:	d5cd      	bpl.n	8012f82 <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012fe6:	6823      	ldr	r3, [r4, #0]
 8012fe8:	22ff      	movs	r2, #255	; 0xff
 8012fea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012fec:	2301      	movs	r3, #1
 8012fee:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8012ff4:	e7c1      	b.n	8012f7a <HAL_RTC_SetDate+0x62>
 8012ff6:	46c0      	nop			; (mov r8, r8)
 8012ff8:	00ffff3f 	.word	0x00ffff3f

08012ffc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012ffc:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012ffe:	0900      	lsrs	r0, r0, #4
 8013000:	0083      	lsls	r3, r0, #2
 8013002:	181b      	adds	r3, r3, r0
 8013004:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8013006:	200f      	movs	r0, #15
 8013008:	4010      	ands	r0, r2
 801300a:	1818      	adds	r0, r3, r0
 801300c:	b2c0      	uxtb	r0, r0
}
 801300e:	4770      	bx	lr

08013010 <HAL_RTC_GetTime>:
{
 8013010:	b570      	push	{r4, r5, r6, lr}
 8013012:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013014:	6803      	ldr	r3, [r0, #0]
 8013016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013018:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 801301a:	6803      	ldr	r3, [r0, #0]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	490e      	ldr	r1, [pc, #56]	; (8013058 <HAL_RTC_GetTime+0x48>)
 8013020:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8013022:	0c19      	lsrs	r1, r3, #16
 8013024:	203f      	movs	r0, #63	; 0x3f
 8013026:	4008      	ands	r0, r1
 8013028:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801302a:	0a1e      	lsrs	r6, r3, #8
 801302c:	b2f6      	uxtb	r6, r6
 801302e:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8013030:	b2dc      	uxtb	r4, r3
 8013032:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8013034:	2340      	movs	r3, #64	; 0x40
 8013036:	400b      	ands	r3, r1
 8013038:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 801303a:	2a00      	cmp	r2, #0
 801303c:	d10a      	bne.n	8013054 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801303e:	f7ff ffdd 	bl	8012ffc <RTC_Bcd2ToByte>
 8013042:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8013044:	0030      	movs	r0, r6
 8013046:	f7ff ffd9 	bl	8012ffc <RTC_Bcd2ToByte>
 801304a:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 801304c:	0020      	movs	r0, r4
 801304e:	f7ff ffd5 	bl	8012ffc <RTC_Bcd2ToByte>
 8013052:	70a8      	strb	r0, [r5, #2]
}
 8013054:	2000      	movs	r0, #0
 8013056:	bd70      	pop	{r4, r5, r6, pc}
 8013058:	007f7f7f 	.word	0x007f7f7f

0801305c <HAL_RTC_GetDate>:
{
 801305c:	b570      	push	{r4, r5, r6, lr}
 801305e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8013060:	6803      	ldr	r3, [r0, #0]
 8013062:	685b      	ldr	r3, [r3, #4]
 8013064:	490d      	ldr	r1, [pc, #52]	; (801309c <HAL_RTC_GetDate+0x40>)
 8013066:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8013068:	0c18      	lsrs	r0, r3, #16
 801306a:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801306c:	04dd      	lsls	r5, r3, #19
 801306e:	0eed      	lsrs	r5, r5, #27
 8013070:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8013072:	b2de      	uxtb	r6, r3
 8013074:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8013076:	041b      	lsls	r3, r3, #16
 8013078:	0f5b      	lsrs	r3, r3, #29
 801307a:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 801307c:	2a00      	cmp	r2, #0
 801307e:	d10a      	bne.n	8013096 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013080:	f7ff ffbc 	bl	8012ffc <RTC_Bcd2ToByte>
 8013084:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8013086:	0028      	movs	r0, r5
 8013088:	f7ff ffb8 	bl	8012ffc <RTC_Bcd2ToByte>
 801308c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 801308e:	0030      	movs	r0, r6
 8013090:	f7ff ffb4 	bl	8012ffc <RTC_Bcd2ToByte>
 8013094:	70a0      	strb	r0, [r4, #2]
}
 8013096:	2000      	movs	r0, #0
 8013098:	bd70      	pop	{r4, r5, r6, pc}
 801309a:	46c0      	nop			; (mov r8, r8)
 801309c:	00ffff3f 	.word	0x00ffff3f

080130a0 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80130a0:	6803      	ldr	r3, [r0, #0]
 80130a2:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80130a4:	0089      	lsls	r1, r1, #2
 80130a6:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80130a8:	600a      	str	r2, [r1, #0]
}
 80130aa:	4770      	bx	lr

080130ac <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80130ac:	6803      	ldr	r3, [r0, #0]
 80130ae:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80130b0:	0089      	lsls	r1, r1, #2
 80130b2:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80130b4:	6808      	ldr	r0, [r1, #0]
}
 80130b6:	4770      	bx	lr

080130b8 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80130b8:	4770      	bx	lr

080130ba <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80130ba:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80130bc:	2239      	movs	r2, #57	; 0x39
 80130be:	2302      	movs	r3, #2
 80130c0:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80130c2:	6804      	ldr	r4, [r0, #0]
 80130c4:	6823      	ldr	r3, [r4, #0]
 80130c6:	2101      	movs	r1, #1
 80130c8:	430b      	orrs	r3, r1
 80130ca:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80130cc:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 80130ce:	2000      	movs	r0, #0
 80130d0:	bd10      	pop	{r4, pc}
	...

080130d4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80130d4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80130d6:	4a36      	ldr	r2, [pc, #216]	; (80131b0 <TIM_Base_SetConfig+0xdc>)
 80130d8:	4290      	cmp	r0, r2
 80130da:	d022      	beq.n	8013122 <TIM_Base_SetConfig+0x4e>
 80130dc:	2280      	movs	r2, #128	; 0x80
 80130de:	05d2      	lsls	r2, r2, #23
 80130e0:	4290      	cmp	r0, r2
 80130e2:	d014      	beq.n	801310e <TIM_Base_SetConfig+0x3a>
 80130e4:	4a33      	ldr	r2, [pc, #204]	; (80131b4 <TIM_Base_SetConfig+0xe0>)
 80130e6:	4290      	cmp	r0, r2
 80130e8:	d016      	beq.n	8013118 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80130ea:	4a33      	ldr	r2, [pc, #204]	; (80131b8 <TIM_Base_SetConfig+0xe4>)
 80130ec:	4290      	cmp	r0, r2
 80130ee:	d040      	beq.n	8013172 <TIM_Base_SetConfig+0x9e>
 80130f0:	4a32      	ldr	r2, [pc, #200]	; (80131bc <TIM_Base_SetConfig+0xe8>)
 80130f2:	4290      	cmp	r0, r2
 80130f4:	d047      	beq.n	8013186 <TIM_Base_SetConfig+0xb2>
 80130f6:	4a32      	ldr	r2, [pc, #200]	; (80131c0 <TIM_Base_SetConfig+0xec>)
 80130f8:	4290      	cmp	r0, r2
 80130fa:	d04e      	beq.n	801319a <TIM_Base_SetConfig+0xc6>
 80130fc:	4a31      	ldr	r2, [pc, #196]	; (80131c4 <TIM_Base_SetConfig+0xf0>)
 80130fe:	4290      	cmp	r0, r2
 8013100:	d02d      	beq.n	801315e <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8013102:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013104:	688b      	ldr	r3, [r1, #8]
 8013106:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013108:	680b      	ldr	r3, [r1, #0]
 801310a:	6283      	str	r3, [r0, #40]	; 0x28
 801310c:	e024      	b.n	8013158 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801310e:	2270      	movs	r2, #112	; 0x70
 8013110:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013112:	684a      	ldr	r2, [r1, #4]
 8013114:	4313      	orrs	r3, r2
 8013116:	e008      	b.n	801312a <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013118:	2270      	movs	r2, #112	; 0x70
 801311a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801311c:	684a      	ldr	r2, [r1, #4]
 801311e:	4313      	orrs	r3, r2
 8013120:	e003      	b.n	801312a <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013122:	2270      	movs	r2, #112	; 0x70
 8013124:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013126:	684a      	ldr	r2, [r1, #4]
 8013128:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 801312a:	4a27      	ldr	r2, [pc, #156]	; (80131c8 <TIM_Base_SetConfig+0xf4>)
 801312c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801312e:	68ca      	ldr	r2, [r1, #12]
 8013130:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013132:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013134:	688b      	ldr	r3, [r1, #8]
 8013136:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013138:	680b      	ldr	r3, [r1, #0]
 801313a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801313c:	4b1c      	ldr	r3, [pc, #112]	; (80131b0 <TIM_Base_SetConfig+0xdc>)
 801313e:	4298      	cmp	r0, r3
 8013140:	d008      	beq.n	8013154 <TIM_Base_SetConfig+0x80>
 8013142:	4b1e      	ldr	r3, [pc, #120]	; (80131bc <TIM_Base_SetConfig+0xe8>)
 8013144:	4298      	cmp	r0, r3
 8013146:	d005      	beq.n	8013154 <TIM_Base_SetConfig+0x80>
 8013148:	4b1d      	ldr	r3, [pc, #116]	; (80131c0 <TIM_Base_SetConfig+0xec>)
 801314a:	4298      	cmp	r0, r3
 801314c:	d002      	beq.n	8013154 <TIM_Base_SetConfig+0x80>
 801314e:	4b1d      	ldr	r3, [pc, #116]	; (80131c4 <TIM_Base_SetConfig+0xf0>)
 8013150:	4298      	cmp	r0, r3
 8013152:	d101      	bne.n	8013158 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013154:	690b      	ldr	r3, [r1, #16]
 8013156:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8013158:	2301      	movs	r3, #1
 801315a:	6143      	str	r3, [r0, #20]
}
 801315c:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 801315e:	4a1a      	ldr	r2, [pc, #104]	; (80131c8 <TIM_Base_SetConfig+0xf4>)
 8013160:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013162:	68ca      	ldr	r2, [r1, #12]
 8013164:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013166:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013168:	688b      	ldr	r3, [r1, #8]
 801316a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801316c:	680b      	ldr	r3, [r1, #0]
 801316e:	6283      	str	r3, [r0, #40]	; 0x28
 8013170:	e7f0      	b.n	8013154 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8013172:	4a15      	ldr	r2, [pc, #84]	; (80131c8 <TIM_Base_SetConfig+0xf4>)
 8013174:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013176:	68ca      	ldr	r2, [r1, #12]
 8013178:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801317a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801317c:	688b      	ldr	r3, [r1, #8]
 801317e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013180:	680b      	ldr	r3, [r1, #0]
 8013182:	6283      	str	r3, [r0, #40]	; 0x28
 8013184:	e7e8      	b.n	8013158 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8013186:	4a10      	ldr	r2, [pc, #64]	; (80131c8 <TIM_Base_SetConfig+0xf4>)
 8013188:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801318a:	68ca      	ldr	r2, [r1, #12]
 801318c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801318e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013190:	688b      	ldr	r3, [r1, #8]
 8013192:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013194:	680b      	ldr	r3, [r1, #0]
 8013196:	6283      	str	r3, [r0, #40]	; 0x28
 8013198:	e7dc      	b.n	8013154 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 801319a:	4a0b      	ldr	r2, [pc, #44]	; (80131c8 <TIM_Base_SetConfig+0xf4>)
 801319c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801319e:	68ca      	ldr	r2, [r1, #12]
 80131a0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80131a2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80131a4:	688b      	ldr	r3, [r1, #8]
 80131a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80131a8:	680b      	ldr	r3, [r1, #0]
 80131aa:	6283      	str	r3, [r0, #40]	; 0x28
 80131ac:	e7d2      	b.n	8013154 <TIM_Base_SetConfig+0x80>
 80131ae:	46c0      	nop			; (mov r8, r8)
 80131b0:	40012c00 	.word	0x40012c00
 80131b4:	40000400 	.word	0x40000400
 80131b8:	40002000 	.word	0x40002000
 80131bc:	40014000 	.word	0x40014000
 80131c0:	40014400 	.word	0x40014400
 80131c4:	40014800 	.word	0x40014800
 80131c8:	fffffcff 	.word	0xfffffcff

080131cc <HAL_TIM_Base_Init>:
{
 80131cc:	b570      	push	{r4, r5, r6, lr}
 80131ce:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80131d0:	d014      	beq.n	80131fc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80131d2:	2339      	movs	r3, #57	; 0x39
 80131d4:	5cc3      	ldrb	r3, [r0, r3]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d00a      	beq.n	80131f0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80131da:	2539      	movs	r5, #57	; 0x39
 80131dc:	2302      	movs	r3, #2
 80131de:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80131e0:	1d21      	adds	r1, r4, #4
 80131e2:	6820      	ldr	r0, [r4, #0]
 80131e4:	f7ff ff76 	bl	80130d4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80131e8:	2301      	movs	r3, #1
 80131ea:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80131ec:	2000      	movs	r0, #0
}
 80131ee:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80131f0:	3338      	adds	r3, #56	; 0x38
 80131f2:	2200      	movs	r2, #0
 80131f4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80131f6:	f7ff ff5f 	bl	80130b8 <HAL_TIM_Base_MspInit>
 80131fa:	e7ee      	b.n	80131da <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80131fc:	2001      	movs	r0, #1
 80131fe:	e7f6      	b.n	80131ee <HAL_TIM_Base_Init+0x22>

08013200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8013200:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8013202:	2338      	movs	r3, #56	; 0x38
 8013204:	5cc3      	ldrb	r3, [r0, r3]
 8013206:	2b01      	cmp	r3, #1
 8013208:	d01e      	beq.n	8013248 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 801320a:	2238      	movs	r2, #56	; 0x38
 801320c:	2501      	movs	r5, #1
 801320e:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8013210:	2439      	movs	r4, #57	; 0x39
 8013212:	2302      	movs	r3, #2
 8013214:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8013216:	6806      	ldr	r6, [r0, #0]
 8013218:	6873      	ldr	r3, [r6, #4]
 801321a:	2770      	movs	r7, #112	; 0x70
 801321c:	43bb      	bics	r3, r7
 801321e:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8013220:	6806      	ldr	r6, [r0, #0]
 8013222:	6873      	ldr	r3, [r6, #4]
 8013224:	680f      	ldr	r7, [r1, #0]
 8013226:	433b      	orrs	r3, r7
 8013228:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801322a:	6806      	ldr	r6, [r0, #0]
 801322c:	68b3      	ldr	r3, [r6, #8]
 801322e:	2780      	movs	r7, #128	; 0x80
 8013230:	43bb      	bics	r3, r7
 8013232:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8013234:	6806      	ldr	r6, [r0, #0]
 8013236:	68b3      	ldr	r3, [r6, #8]
 8013238:	6849      	ldr	r1, [r1, #4]
 801323a:	430b      	orrs	r3, r1
 801323c:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 801323e:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8013240:	2300      	movs	r3, #0
 8013242:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8013244:	2000      	movs	r0, #0
}
 8013246:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8013248:	2002      	movs	r0, #2
 801324a:	e7fc      	b.n	8013246 <HAL_TIMEx_MasterConfigSynchronization+0x46>

0801324c <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 801324c:	4770      	bx	lr

0801324e <HAL_UART_DeInit>:
{
 801324e:	b570      	push	{r4, r5, r6, lr}
 8013250:	0004      	movs	r4, r0
    return HAL_ERROR;
 8013252:	2001      	movs	r0, #1
  if(huart == NULL)
 8013254:	2c00      	cmp	r4, #0
 8013256:	d016      	beq.n	8013286 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8013258:	2669      	movs	r6, #105	; 0x69
 801325a:	2302      	movs	r3, #2
 801325c:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 801325e:	6822      	ldr	r2, [r4, #0]
 8013260:	6813      	ldr	r3, [r2, #0]
 8013262:	2101      	movs	r1, #1
 8013264:	438b      	bics	r3, r1
 8013266:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8013268:	6823      	ldr	r3, [r4, #0]
 801326a:	2500      	movs	r5, #0
 801326c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 801326e:	6823      	ldr	r3, [r4, #0]
 8013270:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8013272:	6823      	ldr	r3, [r4, #0]
 8013274:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8013276:	0020      	movs	r0, r4
 8013278:	f7ff ffe8 	bl	801324c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801327c:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 801327e:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8013280:	2368      	movs	r3, #104	; 0x68
 8013282:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8013284:	2000      	movs	r0, #0
}
 8013286:	bd70      	pop	{r4, r5, r6, pc}

08013288 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013288:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801328a:	2369      	movs	r3, #105	; 0x69
 801328c:	5cc3      	ldrb	r3, [r0, r3]
 801328e:	2b01      	cmp	r3, #1
 8013290:	d004      	beq.n	801329c <HAL_UART_Transmit_IT+0x14>
 8013292:	2369      	movs	r3, #105	; 0x69
 8013294:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013296:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013298:	2c22      	cmp	r4, #34	; 0x22
 801329a:	d127      	bne.n	80132ec <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 801329c:	2900      	cmp	r1, #0
 801329e:	d02b      	beq.n	80132f8 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 80132a0:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 80132a2:	2a00      	cmp	r2, #0
 80132a4:	d022      	beq.n	80132ec <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 80132a6:	3367      	adds	r3, #103	; 0x67
 80132a8:	5cc3      	ldrb	r3, [r0, r3]
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	d026      	beq.n	80132fc <HAL_UART_Transmit_IT+0x74>
 80132ae:	2368      	movs	r3, #104	; 0x68
 80132b0:	2401      	movs	r4, #1
 80132b2:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 80132b4:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80132b6:	3b18      	subs	r3, #24
 80132b8:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80132ba:	3302      	adds	r3, #2
 80132bc:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132be:	2300      	movs	r3, #0
 80132c0:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80132c2:	3369      	adds	r3, #105	; 0x69
 80132c4:	5cc3      	ldrb	r3, [r0, r3]
 80132c6:	2b22      	cmp	r3, #34	; 0x22
 80132c8:	d012      	beq.n	80132f0 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80132ca:	2369      	movs	r3, #105	; 0x69
 80132cc:	2212      	movs	r2, #18
 80132ce:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80132d0:	6802      	ldr	r2, [r0, #0]
 80132d2:	6893      	ldr	r3, [r2, #8]
 80132d4:	2101      	movs	r1, #1
 80132d6:	430b      	orrs	r3, r1
 80132d8:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 80132da:	2368      	movs	r3, #104	; 0x68
 80132dc:	2200      	movs	r2, #0
 80132de:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80132e0:	6802      	ldr	r2, [r0, #0]
 80132e2:	6813      	ldr	r3, [r2, #0]
 80132e4:	317f      	adds	r1, #127	; 0x7f
 80132e6:	430b      	orrs	r3, r1
 80132e8:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80132ea:	2300      	movs	r3, #0
  }
}
 80132ec:	0018      	movs	r0, r3
 80132ee:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80132f0:	3347      	adds	r3, #71	; 0x47
 80132f2:	2232      	movs	r2, #50	; 0x32
 80132f4:	54c2      	strb	r2, [r0, r3]
 80132f6:	e7eb      	b.n	80132d0 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 80132f8:	2301      	movs	r3, #1
 80132fa:	e7f7      	b.n	80132ec <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 80132fc:	2302      	movs	r3, #2
 80132fe:	e7f5      	b.n	80132ec <HAL_UART_Transmit_IT+0x64>

08013300 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013300:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013302:	2369      	movs	r3, #105	; 0x69
 8013304:	5cc3      	ldrb	r3, [r0, r3]
 8013306:	2b01      	cmp	r3, #1
 8013308:	d004      	beq.n	8013314 <HAL_UART_Receive_IT+0x14>
 801330a:	2369      	movs	r3, #105	; 0x69
 801330c:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801330e:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013310:	2c12      	cmp	r4, #18
 8013312:	d14e      	bne.n	80133b2 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8013314:	2900      	cmp	r1, #0
 8013316:	d05d      	beq.n	80133d4 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8013318:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 801331a:	2a00      	cmp	r2, #0
 801331c:	d049      	beq.n	80133b2 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 801331e:	3367      	adds	r3, #103	; 0x67
 8013320:	5cc3      	ldrb	r3, [r0, r3]
 8013322:	2b01      	cmp	r3, #1
 8013324:	d058      	beq.n	80133d8 <HAL_UART_Receive_IT+0xd8>
 8013326:	2368      	movs	r3, #104	; 0x68
 8013328:	2401      	movs	r4, #1
 801332a:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 801332c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 801332e:	3b10      	subs	r3, #16
 8013330:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8013332:	3302      	adds	r3, #2
 8013334:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8013336:	6883      	ldr	r3, [r0, #8]
 8013338:	2280      	movs	r2, #128	; 0x80
 801333a:	0152      	lsls	r2, r2, #5
 801333c:	4293      	cmp	r3, r2
 801333e:	d008      	beq.n	8013352 <HAL_UART_Receive_IT+0x52>
 8013340:	2b00      	cmp	r3, #0
 8013342:	d115      	bne.n	8013370 <HAL_UART_Receive_IT+0x70>
 8013344:	6903      	ldr	r3, [r0, #16]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d10e      	bne.n	8013368 <HAL_UART_Receive_IT+0x68>
 801334a:	335c      	adds	r3, #92	; 0x5c
 801334c:	22ff      	movs	r2, #255	; 0xff
 801334e:	52c2      	strh	r2, [r0, r3]
 8013350:	e012      	b.n	8013378 <HAL_UART_Receive_IT+0x78>
 8013352:	6903      	ldr	r3, [r0, #16]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d103      	bne.n	8013360 <HAL_UART_Receive_IT+0x60>
 8013358:	335c      	adds	r3, #92	; 0x5c
 801335a:	4a20      	ldr	r2, [pc, #128]	; (80133dc <HAL_UART_Receive_IT+0xdc>)
 801335c:	52c2      	strh	r2, [r0, r3]
 801335e:	e00b      	b.n	8013378 <HAL_UART_Receive_IT+0x78>
 8013360:	235c      	movs	r3, #92	; 0x5c
 8013362:	22ff      	movs	r2, #255	; 0xff
 8013364:	52c2      	strh	r2, [r0, r3]
 8013366:	e007      	b.n	8013378 <HAL_UART_Receive_IT+0x78>
 8013368:	235c      	movs	r3, #92	; 0x5c
 801336a:	227f      	movs	r2, #127	; 0x7f
 801336c:	52c2      	strh	r2, [r0, r3]
 801336e:	e003      	b.n	8013378 <HAL_UART_Receive_IT+0x78>
 8013370:	2280      	movs	r2, #128	; 0x80
 8013372:	0552      	lsls	r2, r2, #21
 8013374:	4293      	cmp	r3, r2
 8013376:	d01e      	beq.n	80133b6 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013378:	2300      	movs	r3, #0
 801337a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801337c:	3369      	adds	r3, #105	; 0x69
 801337e:	5cc3      	ldrb	r3, [r0, r3]
 8013380:	2b12      	cmp	r3, #18
 8013382:	d023      	beq.n	80133cc <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013384:	2369      	movs	r3, #105	; 0x69
 8013386:	2222      	movs	r2, #34	; 0x22
 8013388:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801338a:	6802      	ldr	r2, [r0, #0]
 801338c:	6811      	ldr	r1, [r2, #0]
 801338e:	2380      	movs	r3, #128	; 0x80
 8013390:	005b      	lsls	r3, r3, #1
 8013392:	430b      	orrs	r3, r1
 8013394:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013396:	6802      	ldr	r2, [r0, #0]
 8013398:	6893      	ldr	r3, [r2, #8]
 801339a:	2101      	movs	r1, #1
 801339c:	430b      	orrs	r3, r1
 801339e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 80133a0:	2368      	movs	r3, #104	; 0x68
 80133a2:	2200      	movs	r2, #0
 80133a4:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80133a6:	6802      	ldr	r2, [r0, #0]
 80133a8:	6813      	ldr	r3, [r2, #0]
 80133aa:	311f      	adds	r1, #31
 80133ac:	430b      	orrs	r3, r1
 80133ae:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80133b0:	2300      	movs	r3, #0
  }
}
 80133b2:	0018      	movs	r0, r3
 80133b4:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 80133b6:	6903      	ldr	r3, [r0, #16]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d103      	bne.n	80133c4 <HAL_UART_Receive_IT+0xc4>
 80133bc:	335c      	adds	r3, #92	; 0x5c
 80133be:	227f      	movs	r2, #127	; 0x7f
 80133c0:	52c2      	strh	r2, [r0, r3]
 80133c2:	e7d9      	b.n	8013378 <HAL_UART_Receive_IT+0x78>
 80133c4:	235c      	movs	r3, #92	; 0x5c
 80133c6:	223f      	movs	r2, #63	; 0x3f
 80133c8:	52c2      	strh	r2, [r0, r3]
 80133ca:	e7d5      	b.n	8013378 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80133cc:	3357      	adds	r3, #87	; 0x57
 80133ce:	2232      	movs	r2, #50	; 0x32
 80133d0:	54c2      	strb	r2, [r0, r3]
 80133d2:	e7da      	b.n	801338a <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 80133d4:	2301      	movs	r3, #1
 80133d6:	e7ec      	b.n	80133b2 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80133d8:	2302      	movs	r3, #2
 80133da:	e7ea      	b.n	80133b2 <HAL_UART_Receive_IT+0xb2>
 80133dc:	000001ff 	.word	0x000001ff

080133e0 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80133e0:	b510      	push	{r4, lr}
 80133e2:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80133e4:	2369      	movs	r3, #105	; 0x69
 80133e6:	5cc3      	ldrb	r3, [r0, r3]
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	d004      	beq.n	80133f6 <HAL_UART_Transmit_DMA+0x16>
 80133ec:	2369      	movs	r3, #105	; 0x69
 80133ee:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80133f0:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80133f2:	2b22      	cmp	r3, #34	; 0x22
 80133f4:	d134      	bne.n	8013460 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 80133f6:	2900      	cmp	r1, #0
 80133f8:	d037      	beq.n	801346a <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 80133fa:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80133fc:	2a00      	cmp	r2, #0
 80133fe:	d02f      	beq.n	8013460 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8013400:	2368      	movs	r3, #104	; 0x68
 8013402:	5ce3      	ldrb	r3, [r4, r3]
 8013404:	2b01      	cmp	r3, #1
 8013406:	d032      	beq.n	801346e <HAL_UART_Transmit_DMA+0x8e>
 8013408:	2368      	movs	r3, #104	; 0x68
 801340a:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 801340c:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 801340e:	3b18      	subs	r3, #24
 8013410:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8013412:	3302      	adds	r3, #2
 8013414:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013416:	2300      	movs	r3, #0
 8013418:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801341a:	3369      	adds	r3, #105	; 0x69
 801341c:	5ce3      	ldrb	r3, [r4, r3]
 801341e:	2b22      	cmp	r3, #34	; 0x22
 8013420:	d01f      	beq.n	8013462 <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013422:	2369      	movs	r3, #105	; 0x69
 8013424:	2012      	movs	r0, #18
 8013426:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013428:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801342a:	4812      	ldr	r0, [pc, #72]	; (8013474 <HAL_UART_Transmit_DMA+0x94>)
 801342c:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801342e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013430:	4811      	ldr	r0, [pc, #68]	; (8013478 <HAL_UART_Transmit_DMA+0x98>)
 8013432:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013434:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013436:	4811      	ldr	r0, [pc, #68]	; (801347c <HAL_UART_Transmit_DMA+0x9c>)
 8013438:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 801343a:	6820      	ldr	r0, [r4, #0]
 801343c:	3028      	adds	r0, #40	; 0x28
 801343e:	0013      	movs	r3, r2
 8013440:	0002      	movs	r2, r0
 8013442:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8013444:	f7fd fc72 	bl	8010d2c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013448:	6823      	ldr	r3, [r4, #0]
 801344a:	2240      	movs	r2, #64	; 0x40
 801344c:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 801344e:	6822      	ldr	r2, [r4, #0]
 8013450:	6893      	ldr	r3, [r2, #8]
 8013452:	2180      	movs	r1, #128	; 0x80
 8013454:	430b      	orrs	r3, r1
 8013456:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013458:	2368      	movs	r3, #104	; 0x68
 801345a:	2200      	movs	r2, #0
 801345c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801345e:	2000      	movs	r0, #0
  }
}
 8013460:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013462:	3347      	adds	r3, #71	; 0x47
 8013464:	3031      	adds	r0, #49	; 0x31
 8013466:	54e0      	strb	r0, [r4, r3]
 8013468:	e7de      	b.n	8013428 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 801346a:	2001      	movs	r0, #1
 801346c:	e7f8      	b.n	8013460 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 801346e:	2002      	movs	r0, #2
 8013470:	e7f6      	b.n	8013460 <HAL_UART_Transmit_DMA+0x80>
 8013472:	46c0      	nop			; (mov r8, r8)
 8013474:	08013519 	.word	0x08013519
 8013478:	0801354b 	.word	0x0801354b
 801347c:	0801359b 	.word	0x0801359b

08013480 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013480:	b510      	push	{r4, lr}
 8013482:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013484:	2069      	movs	r0, #105	; 0x69
 8013486:	5c20      	ldrb	r0, [r4, r0]
 8013488:	2801      	cmp	r0, #1
 801348a:	d004      	beq.n	8013496 <HAL_UART_Receive_DMA+0x16>
 801348c:	2369      	movs	r3, #105	; 0x69
 801348e:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013490:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013492:	2b12      	cmp	r3, #18
 8013494:	d130      	bne.n	80134f8 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8013496:	2900      	cmp	r1, #0
 8013498:	d033      	beq.n	8013502 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 801349a:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801349c:	2a00      	cmp	r2, #0
 801349e:	d02b      	beq.n	80134f8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80134a0:	2368      	movs	r3, #104	; 0x68
 80134a2:	5ce3      	ldrb	r3, [r4, r3]
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d02e      	beq.n	8013506 <HAL_UART_Receive_DMA+0x86>
 80134a8:	2368      	movs	r3, #104	; 0x68
 80134aa:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 80134ac:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80134ae:	3b10      	subs	r3, #16
 80134b0:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134b2:	2300      	movs	r3, #0
 80134b4:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80134b6:	3369      	adds	r3, #105	; 0x69
 80134b8:	5ce3      	ldrb	r3, [r4, r3]
 80134ba:	2b12      	cmp	r3, #18
 80134bc:	d01d      	beq.n	80134fa <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80134be:	2369      	movs	r3, #105	; 0x69
 80134c0:	2022      	movs	r0, #34	; 0x22
 80134c2:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80134c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80134c6:	4811      	ldr	r0, [pc, #68]	; (801350c <HAL_UART_Receive_DMA+0x8c>)
 80134c8:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80134ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80134cc:	4810      	ldr	r0, [pc, #64]	; (8013510 <HAL_UART_Receive_DMA+0x90>)
 80134ce:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80134d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80134d2:	4810      	ldr	r0, [pc, #64]	; (8013514 <HAL_UART_Receive_DMA+0x94>)
 80134d4:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80134d6:	6820      	ldr	r0, [r4, #0]
 80134d8:	3024      	adds	r0, #36	; 0x24
 80134da:	0013      	movs	r3, r2
 80134dc:	000a      	movs	r2, r1
 80134de:	0001      	movs	r1, r0
 80134e0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80134e2:	f7fd fc23 	bl	8010d2c <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80134e6:	6822      	ldr	r2, [r4, #0]
 80134e8:	6893      	ldr	r3, [r2, #8]
 80134ea:	2140      	movs	r1, #64	; 0x40
 80134ec:	430b      	orrs	r3, r1
 80134ee:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80134f0:	2368      	movs	r3, #104	; 0x68
 80134f2:	2200      	movs	r2, #0
 80134f4:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80134f6:	2000      	movs	r0, #0
  }
}
 80134f8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80134fa:	3357      	adds	r3, #87	; 0x57
 80134fc:	3031      	adds	r0, #49	; 0x31
 80134fe:	54e0      	strb	r0, [r4, r3]
 8013500:	e7e0      	b.n	80134c4 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8013502:	2001      	movs	r0, #1
 8013504:	e7f8      	b.n	80134f8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013506:	2002      	movs	r0, #2
 8013508:	e7f6      	b.n	80134f8 <HAL_UART_Receive_DMA+0x78>
 801350a:	46c0      	nop			; (mov r8, r8)
 801350c:	08013555 	.word	0x08013555
 8013510:	08013591 	.word	0x08013591
 8013514:	0801359b 	.word	0x0801359b

08013518 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013518:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801351a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801351c:	6802      	ldr	r2, [r0, #0]
 801351e:	6812      	ldr	r2, [r2, #0]
 8013520:	0692      	lsls	r2, r2, #26
 8013522:	d40d      	bmi.n	8013540 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8013524:	2252      	movs	r2, #82	; 0x52
 8013526:	2100      	movs	r1, #0
 8013528:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 801352a:	6819      	ldr	r1, [r3, #0]
 801352c:	688a      	ldr	r2, [r1, #8]
 801352e:	2080      	movs	r0, #128	; 0x80
 8013530:	4382      	bics	r2, r0
 8013532:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013534:	681a      	ldr	r2, [r3, #0]
 8013536:	6813      	ldr	r3, [r2, #0]
 8013538:	2140      	movs	r1, #64	; 0x40
 801353a:	430b      	orrs	r3, r1
 801353c:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 801353e:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8013540:	0018      	movs	r0, r3
 8013542:	f7fa f8ab 	bl	800d69c <HAL_UART_TxCpltCallback>
}
 8013546:	e7fa      	b.n	801353e <UART_DMATransmitCplt+0x26>

08013548 <HAL_UART_TxHalfCpltCallback>:
}
 8013548:	4770      	bx	lr

0801354a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801354a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 801354c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801354e:	f7ff fffb 	bl	8013548 <HAL_UART_TxHalfCpltCallback>
}
 8013552:	bd10      	pop	{r4, pc}

08013554 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013554:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013556:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013558:	6802      	ldr	r2, [r0, #0]
 801355a:	6812      	ldr	r2, [r2, #0]
 801355c:	0692      	lsls	r2, r2, #26
 801355e:	d40e      	bmi.n	801357e <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8013560:	225a      	movs	r2, #90	; 0x5a
 8013562:	2100      	movs	r1, #0
 8013564:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8013566:	6819      	ldr	r1, [r3, #0]
 8013568:	688a      	ldr	r2, [r1, #8]
 801356a:	2040      	movs	r0, #64	; 0x40
 801356c:	4382      	bics	r2, r0
 801356e:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013570:	2269      	movs	r2, #105	; 0x69
 8013572:	5c9a      	ldrb	r2, [r3, r2]
 8013574:	2a32      	cmp	r2, #50	; 0x32
 8013576:	d006      	beq.n	8013586 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013578:	2269      	movs	r2, #105	; 0x69
 801357a:	2101      	movs	r1, #1
 801357c:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801357e:	0018      	movs	r0, r3
 8013580:	f7fa f8ca 	bl	800d718 <HAL_UART_RxCpltCallback>
}
 8013584:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013586:	3237      	adds	r2, #55	; 0x37
 8013588:	2112      	movs	r1, #18
 801358a:	5499      	strb	r1, [r3, r2]
 801358c:	e7f7      	b.n	801357e <UART_DMAReceiveCplt+0x2a>

0801358e <HAL_UART_RxHalfCpltCallback>:
}
 801358e:	4770      	bx	lr

08013590 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013590:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013592:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013594:	f7ff fffb 	bl	801358e <HAL_UART_RxHalfCpltCallback>
}
 8013598:	bd10      	pop	{r4, pc}

0801359a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801359a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801359c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801359e:	2300      	movs	r3, #0
 80135a0:	225a      	movs	r2, #90	; 0x5a
 80135a2:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80135a4:	3a08      	subs	r2, #8
 80135a6:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80135a8:	3369      	adds	r3, #105	; 0x69
 80135aa:	3a51      	subs	r2, #81	; 0x51
 80135ac:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80135ae:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80135b0:	320f      	adds	r2, #15
 80135b2:	4313      	orrs	r3, r2
 80135b4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80135b6:	f7fa f889 	bl	800d6cc <HAL_UART_ErrorCallback>
}
 80135ba:	bd10      	pop	{r4, pc}

080135bc <UART_SetConfig>:
{
 80135bc:	b570      	push	{r4, r5, r6, lr}
 80135be:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80135c0:	6801      	ldr	r1, [r0, #0]
 80135c2:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80135c4:	6883      	ldr	r3, [r0, #8]
 80135c6:	6900      	ldr	r0, [r0, #16]
 80135c8:	4303      	orrs	r3, r0
 80135ca:	6960      	ldr	r0, [r4, #20]
 80135cc:	4303      	orrs	r3, r0
 80135ce:	69e0      	ldr	r0, [r4, #28]
 80135d0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80135d2:	487e      	ldr	r0, [pc, #504]	; (80137cc <UART_SetConfig+0x210>)
 80135d4:	4002      	ands	r2, r0
 80135d6:	4313      	orrs	r3, r2
 80135d8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80135da:	6822      	ldr	r2, [r4, #0]
 80135dc:	6853      	ldr	r3, [r2, #4]
 80135de:	497c      	ldr	r1, [pc, #496]	; (80137d0 <UART_SetConfig+0x214>)
 80135e0:	400b      	ands	r3, r1
 80135e2:	68e1      	ldr	r1, [r4, #12]
 80135e4:	430b      	orrs	r3, r1
 80135e6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80135e8:	6821      	ldr	r1, [r4, #0]
 80135ea:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80135ec:	69a3      	ldr	r3, [r4, #24]
 80135ee:	6a20      	ldr	r0, [r4, #32]
 80135f0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80135f2:	4878      	ldr	r0, [pc, #480]	; (80137d4 <UART_SetConfig+0x218>)
 80135f4:	4002      	ands	r2, r0
 80135f6:	4313      	orrs	r3, r2
 80135f8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80135fa:	6825      	ldr	r5, [r4, #0]
 80135fc:	4b76      	ldr	r3, [pc, #472]	; (80137d8 <UART_SetConfig+0x21c>)
 80135fe:	429d      	cmp	r5, r3
 8013600:	d022      	beq.n	8013648 <UART_SetConfig+0x8c>
 8013602:	4b76      	ldr	r3, [pc, #472]	; (80137dc <UART_SetConfig+0x220>)
 8013604:	429d      	cmp	r5, r3
 8013606:	d034      	beq.n	8013672 <UART_SetConfig+0xb6>
 8013608:	4b75      	ldr	r3, [pc, #468]	; (80137e0 <UART_SetConfig+0x224>)
 801360a:	429d      	cmp	r5, r3
 801360c:	d100      	bne.n	8013610 <UART_SetConfig+0x54>
 801360e:	e06b      	b.n	80136e8 <UART_SetConfig+0x12c>
 8013610:	4b74      	ldr	r3, [pc, #464]	; (80137e4 <UART_SetConfig+0x228>)
 8013612:	429d      	cmp	r5, r3
 8013614:	d100      	bne.n	8013618 <UART_SetConfig+0x5c>
 8013616:	e08e      	b.n	8013736 <UART_SetConfig+0x17a>
 8013618:	4b73      	ldr	r3, [pc, #460]	; (80137e8 <UART_SetConfig+0x22c>)
 801361a:	429d      	cmp	r5, r3
 801361c:	d100      	bne.n	8013620 <UART_SetConfig+0x64>
 801361e:	e08a      	b.n	8013736 <UART_SetConfig+0x17a>
 8013620:	4b72      	ldr	r3, [pc, #456]	; (80137ec <UART_SetConfig+0x230>)
 8013622:	429d      	cmp	r5, r3
 8013624:	d100      	bne.n	8013628 <UART_SetConfig+0x6c>
 8013626:	e086      	b.n	8013736 <UART_SetConfig+0x17a>
 8013628:	4b71      	ldr	r3, [pc, #452]	; (80137f0 <UART_SetConfig+0x234>)
 801362a:	429d      	cmp	r5, r3
 801362c:	d100      	bne.n	8013630 <UART_SetConfig+0x74>
 801362e:	e082      	b.n	8013736 <UART_SetConfig+0x17a>
 8013630:	4b70      	ldr	r3, [pc, #448]	; (80137f4 <UART_SetConfig+0x238>)
 8013632:	429d      	cmp	r5, r3
 8013634:	d100      	bne.n	8013638 <UART_SetConfig+0x7c>
 8013636:	e07e      	b.n	8013736 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013638:	2380      	movs	r3, #128	; 0x80
 801363a:	021b      	lsls	r3, r3, #8
 801363c:	69e2      	ldr	r2, [r4, #28]
 801363e:	429a      	cmp	r2, r3
 8013640:	d100      	bne.n	8013644 <UART_SetConfig+0x88>
 8013642:	e072      	b.n	801372a <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8013644:	2001      	movs	r0, #1
 8013646:	e04e      	b.n	80136e6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013648:	4b6b      	ldr	r3, [pc, #428]	; (80137f8 <UART_SetConfig+0x23c>)
 801364a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801364c:	2303      	movs	r3, #3
 801364e:	4013      	ands	r3, r2
 8013650:	2b01      	cmp	r3, #1
 8013652:	d100      	bne.n	8013656 <UART_SetConfig+0x9a>
 8013654:	e09a      	b.n	801378c <UART_SetConfig+0x1d0>
 8013656:	2b00      	cmp	r3, #0
 8013658:	d02f      	beq.n	80136ba <UART_SetConfig+0xfe>
 801365a:	2b02      	cmp	r3, #2
 801365c:	d100      	bne.n	8013660 <UART_SetConfig+0xa4>
 801365e:	e0a5      	b.n	80137ac <UART_SetConfig+0x1f0>
 8013660:	2b03      	cmp	r3, #3
 8013662:	d01a      	beq.n	801369a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013664:	2380      	movs	r3, #128	; 0x80
 8013666:	021b      	lsls	r3, r3, #8
 8013668:	69e2      	ldr	r2, [r4, #28]
 801366a:	429a      	cmp	r2, r3
 801366c:	d060      	beq.n	8013730 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 801366e:	2001      	movs	r0, #1
 8013670:	e039      	b.n	80136e6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013672:	4b61      	ldr	r3, [pc, #388]	; (80137f8 <UART_SetConfig+0x23c>)
 8013674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013676:	22c0      	movs	r2, #192	; 0xc0
 8013678:	0292      	lsls	r2, r2, #10
 801367a:	4013      	ands	r3, r2
 801367c:	2280      	movs	r2, #128	; 0x80
 801367e:	0252      	lsls	r2, r2, #9
 8013680:	4293      	cmp	r3, r2
 8013682:	d100      	bne.n	8013686 <UART_SetConfig+0xca>
 8013684:	e082      	b.n	801378c <UART_SetConfig+0x1d0>
 8013686:	d916      	bls.n	80136b6 <UART_SetConfig+0xfa>
 8013688:	2280      	movs	r2, #128	; 0x80
 801368a:	0292      	lsls	r2, r2, #10
 801368c:	4293      	cmp	r3, r2
 801368e:	d100      	bne.n	8013692 <UART_SetConfig+0xd6>
 8013690:	e08c      	b.n	80137ac <UART_SetConfig+0x1f0>
 8013692:	22c0      	movs	r2, #192	; 0xc0
 8013694:	0292      	lsls	r2, r2, #10
 8013696:	4293      	cmp	r3, r2
 8013698:	d1e4      	bne.n	8013664 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801369a:	2380      	movs	r3, #128	; 0x80
 801369c:	021b      	lsls	r3, r3, #8
 801369e:	69e2      	ldr	r2, [r4, #28]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d038      	beq.n	8013716 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80136a4:	6861      	ldr	r1, [r4, #4]
 80136a6:	4855      	ldr	r0, [pc, #340]	; (80137fc <UART_SetConfig+0x240>)
 80136a8:	f7ec fd52 	bl	8000150 <__udivsi3>
 80136ac:	0400      	lsls	r0, r0, #16
 80136ae:	0c00      	lsrs	r0, r0, #16
 80136b0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80136b2:	2000      	movs	r0, #0
        break;
 80136b4:	e017      	b.n	80136e6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d1d4      	bne.n	8013664 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80136ba:	2380      	movs	r3, #128	; 0x80
 80136bc:	021b      	lsls	r3, r3, #8
 80136be:	69e2      	ldr	r2, [r4, #28]
 80136c0:	429a      	cmp	r2, r3
 80136c2:	d13d      	bne.n	8013740 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80136c4:	f7ff fa5c 	bl	8012b80 <HAL_RCC_GetPCLK1Freq>
 80136c8:	0040      	lsls	r0, r0, #1
 80136ca:	6861      	ldr	r1, [r4, #4]
 80136cc:	f7ec fd40 	bl	8000150 <__udivsi3>
 80136d0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80136d2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80136d4:	220f      	movs	r2, #15
 80136d6:	0019      	movs	r1, r3
 80136d8:	4391      	bics	r1, r2
 80136da:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80136dc:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80136de:	071b      	lsls	r3, r3, #28
 80136e0:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80136e2:	4313      	orrs	r3, r2
 80136e4:	60cb      	str	r3, [r1, #12]
}
 80136e6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80136e8:	4b43      	ldr	r3, [pc, #268]	; (80137f8 <UART_SetConfig+0x23c>)
 80136ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136ec:	22c0      	movs	r2, #192	; 0xc0
 80136ee:	0312      	lsls	r2, r2, #12
 80136f0:	4013      	ands	r3, r2
 80136f2:	2280      	movs	r2, #128	; 0x80
 80136f4:	02d2      	lsls	r2, r2, #11
 80136f6:	4293      	cmp	r3, r2
 80136f8:	d02d      	beq.n	8013756 <UART_SetConfig+0x19a>
 80136fa:	d913      	bls.n	8013724 <UART_SetConfig+0x168>
 80136fc:	2280      	movs	r2, #128	; 0x80
 80136fe:	0312      	lsls	r2, r2, #12
 8013700:	4293      	cmp	r3, r2
 8013702:	d036      	beq.n	8013772 <UART_SetConfig+0x1b6>
 8013704:	22c0      	movs	r2, #192	; 0xc0
 8013706:	0312      	lsls	r2, r2, #12
 8013708:	4293      	cmp	r3, r2
 801370a:	d1ab      	bne.n	8013664 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801370c:	2380      	movs	r3, #128	; 0x80
 801370e:	021b      	lsls	r3, r3, #8
 8013710:	69e2      	ldr	r2, [r4, #28]
 8013712:	429a      	cmp	r2, r3
 8013714:	d1c6      	bne.n	80136a4 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8013716:	6861      	ldr	r1, [r4, #4]
 8013718:	4839      	ldr	r0, [pc, #228]	; (8013800 <UART_SetConfig+0x244>)
 801371a:	f7ec fd19 	bl	8000150 <__udivsi3>
 801371e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013720:	2000      	movs	r0, #0
        break;
 8013722:	e7d7      	b.n	80136d4 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013724:	2b00      	cmp	r3, #0
 8013726:	d0c8      	beq.n	80136ba <UART_SetConfig+0xfe>
 8013728:	e79c      	b.n	8013664 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 801372a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 801372c:	2300      	movs	r3, #0
 801372e:	e7d1      	b.n	80136d4 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8013730:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013732:	2300      	movs	r3, #0
 8013734:	e7ce      	b.n	80136d4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013736:	2380      	movs	r3, #128	; 0x80
 8013738:	021b      	lsls	r3, r3, #8
 801373a:	69e2      	ldr	r2, [r4, #28]
 801373c:	429a      	cmp	r2, r3
 801373e:	d0c1      	beq.n	80136c4 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013740:	f7ff fa1e 	bl	8012b80 <HAL_RCC_GetPCLK1Freq>
 8013744:	6825      	ldr	r5, [r4, #0]
 8013746:	6861      	ldr	r1, [r4, #4]
 8013748:	f7ec fd02 	bl	8000150 <__udivsi3>
 801374c:	0400      	lsls	r0, r0, #16
 801374e:	0c00      	lsrs	r0, r0, #16
 8013750:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013752:	2000      	movs	r0, #0
  return ret;
 8013754:	e7c7      	b.n	80136e6 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013756:	2380      	movs	r3, #128	; 0x80
 8013758:	021b      	lsls	r3, r3, #8
 801375a:	69e2      	ldr	r2, [r4, #28]
 801375c:	429a      	cmp	r2, r3
 801375e:	d11a      	bne.n	8013796 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013760:	f7ff f9aa 	bl	8012ab8 <HAL_RCC_GetSysClockFreq>
 8013764:	0040      	lsls	r0, r0, #1
 8013766:	6861      	ldr	r1, [r4, #4]
 8013768:	f7ec fcf2 	bl	8000150 <__udivsi3>
 801376c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801376e:	2000      	movs	r0, #0
        break;
 8013770:	e7b0      	b.n	80136d4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013772:	2380      	movs	r3, #128	; 0x80
 8013774:	021b      	lsls	r3, r3, #8
 8013776:	69e2      	ldr	r2, [r4, #28]
 8013778:	429a      	cmp	r2, r3
 801377a:	d11c      	bne.n	80137b6 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801377c:	6861      	ldr	r1, [r4, #4]
 801377e:	2080      	movs	r0, #128	; 0x80
 8013780:	0240      	lsls	r0, r0, #9
 8013782:	f7ec fce5 	bl	8000150 <__udivsi3>
 8013786:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013788:	2000      	movs	r0, #0
        break;
 801378a:	e7a3      	b.n	80136d4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801378c:	2380      	movs	r3, #128	; 0x80
 801378e:	021b      	lsls	r3, r3, #8
 8013790:	69e2      	ldr	r2, [r4, #28]
 8013792:	429a      	cmp	r2, r3
 8013794:	d0e4      	beq.n	8013760 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013796:	f7ff f98f 	bl	8012ab8 <HAL_RCC_GetSysClockFreq>
 801379a:	6825      	ldr	r5, [r4, #0]
 801379c:	6861      	ldr	r1, [r4, #4]
 801379e:	f7ec fcd7 	bl	8000150 <__udivsi3>
 80137a2:	0400      	lsls	r0, r0, #16
 80137a4:	0c00      	lsrs	r0, r0, #16
 80137a6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80137a8:	2000      	movs	r0, #0
        break;
 80137aa:	e79c      	b.n	80136e6 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80137ac:	2380      	movs	r3, #128	; 0x80
 80137ae:	021b      	lsls	r3, r3, #8
 80137b0:	69e2      	ldr	r2, [r4, #28]
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d0e2      	beq.n	801377c <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80137b6:	6861      	ldr	r1, [r4, #4]
 80137b8:	2080      	movs	r0, #128	; 0x80
 80137ba:	0200      	lsls	r0, r0, #8
 80137bc:	f7ec fcc8 	bl	8000150 <__udivsi3>
 80137c0:	0400      	lsls	r0, r0, #16
 80137c2:	0c00      	lsrs	r0, r0, #16
 80137c4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80137c6:	2000      	movs	r0, #0
        break;
 80137c8:	e78d      	b.n	80136e6 <UART_SetConfig+0x12a>
 80137ca:	46c0      	nop			; (mov r8, r8)
 80137cc:	efff69f3 	.word	0xefff69f3
 80137d0:	ffffcfff 	.word	0xffffcfff
 80137d4:	fffff4ff 	.word	0xfffff4ff
 80137d8:	40013800 	.word	0x40013800
 80137dc:	40004400 	.word	0x40004400
 80137e0:	40004800 	.word	0x40004800
 80137e4:	40004c00 	.word	0x40004c00
 80137e8:	40005000 	.word	0x40005000
 80137ec:	40011400 	.word	0x40011400
 80137f0:	40011800 	.word	0x40011800
 80137f4:	40011c00 	.word	0x40011c00
 80137f8:	40021000 	.word	0x40021000
 80137fc:	007a1200 	.word	0x007a1200
 8013800:	00f42400 	.word	0x00f42400

08013804 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013804:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013806:	07db      	lsls	r3, r3, #31
 8013808:	d506      	bpl.n	8013818 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801380a:	6802      	ldr	r2, [r0, #0]
 801380c:	6853      	ldr	r3, [r2, #4]
 801380e:	492c      	ldr	r1, [pc, #176]	; (80138c0 <UART_AdvFeatureConfig+0xbc>)
 8013810:	400b      	ands	r3, r1
 8013812:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013814:	430b      	orrs	r3, r1
 8013816:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013818:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801381a:	079b      	lsls	r3, r3, #30
 801381c:	d506      	bpl.n	801382c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801381e:	6802      	ldr	r2, [r0, #0]
 8013820:	6853      	ldr	r3, [r2, #4]
 8013822:	4928      	ldr	r1, [pc, #160]	; (80138c4 <UART_AdvFeatureConfig+0xc0>)
 8013824:	400b      	ands	r3, r1
 8013826:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013828:	430b      	orrs	r3, r1
 801382a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801382c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801382e:	075b      	lsls	r3, r3, #29
 8013830:	d506      	bpl.n	8013840 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013832:	6802      	ldr	r2, [r0, #0]
 8013834:	6853      	ldr	r3, [r2, #4]
 8013836:	4924      	ldr	r1, [pc, #144]	; (80138c8 <UART_AdvFeatureConfig+0xc4>)
 8013838:	400b      	ands	r3, r1
 801383a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801383c:	430b      	orrs	r3, r1
 801383e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013840:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013842:	071b      	lsls	r3, r3, #28
 8013844:	d506      	bpl.n	8013854 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013846:	6802      	ldr	r2, [r0, #0]
 8013848:	6853      	ldr	r3, [r2, #4]
 801384a:	4920      	ldr	r1, [pc, #128]	; (80138cc <UART_AdvFeatureConfig+0xc8>)
 801384c:	400b      	ands	r3, r1
 801384e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013850:	430b      	orrs	r3, r1
 8013852:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013854:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013856:	06db      	lsls	r3, r3, #27
 8013858:	d506      	bpl.n	8013868 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801385a:	6802      	ldr	r2, [r0, #0]
 801385c:	6893      	ldr	r3, [r2, #8]
 801385e:	491c      	ldr	r1, [pc, #112]	; (80138d0 <UART_AdvFeatureConfig+0xcc>)
 8013860:	400b      	ands	r3, r1
 8013862:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8013864:	430b      	orrs	r3, r1
 8013866:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013868:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801386a:	069b      	lsls	r3, r3, #26
 801386c:	d506      	bpl.n	801387c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801386e:	6802      	ldr	r2, [r0, #0]
 8013870:	6893      	ldr	r3, [r2, #8]
 8013872:	4918      	ldr	r1, [pc, #96]	; (80138d4 <UART_AdvFeatureConfig+0xd0>)
 8013874:	400b      	ands	r3, r1
 8013876:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013878:	430b      	orrs	r3, r1
 801387a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801387c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801387e:	065b      	lsls	r3, r3, #25
 8013880:	d50b      	bpl.n	801389a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013882:	6802      	ldr	r2, [r0, #0]
 8013884:	6853      	ldr	r3, [r2, #4]
 8013886:	4914      	ldr	r1, [pc, #80]	; (80138d8 <UART_AdvFeatureConfig+0xd4>)
 8013888:	400b      	ands	r3, r1
 801388a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801388c:	430b      	orrs	r3, r1
 801388e:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013890:	2380      	movs	r3, #128	; 0x80
 8013892:	035b      	lsls	r3, r3, #13
 8013894:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013896:	429a      	cmp	r2, r3
 8013898:	d00a      	beq.n	80138b0 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801389a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801389c:	061b      	lsls	r3, r3, #24
 801389e:	d506      	bpl.n	80138ae <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80138a0:	6802      	ldr	r2, [r0, #0]
 80138a2:	6853      	ldr	r3, [r2, #4]
 80138a4:	490d      	ldr	r1, [pc, #52]	; (80138dc <UART_AdvFeatureConfig+0xd8>)
 80138a6:	400b      	ands	r3, r1
 80138a8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80138aa:	430b      	orrs	r3, r1
 80138ac:	6053      	str	r3, [r2, #4]
}
 80138ae:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80138b0:	6802      	ldr	r2, [r0, #0]
 80138b2:	6853      	ldr	r3, [r2, #4]
 80138b4:	490a      	ldr	r1, [pc, #40]	; (80138e0 <UART_AdvFeatureConfig+0xdc>)
 80138b6:	400b      	ands	r3, r1
 80138b8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80138ba:	430b      	orrs	r3, r1
 80138bc:	6053      	str	r3, [r2, #4]
 80138be:	e7ec      	b.n	801389a <UART_AdvFeatureConfig+0x96>
 80138c0:	fffdffff 	.word	0xfffdffff
 80138c4:	fffeffff 	.word	0xfffeffff
 80138c8:	fffbffff 	.word	0xfffbffff
 80138cc:	ffff7fff 	.word	0xffff7fff
 80138d0:	ffffefff 	.word	0xffffefff
 80138d4:	ffffdfff 	.word	0xffffdfff
 80138d8:	ffefffff 	.word	0xffefffff
 80138dc:	fff7ffff 	.word	0xfff7ffff
 80138e0:	ff9fffff 	.word	0xff9fffff

080138e4 <UART_WaitOnFlagUntilTimeout>:
{
 80138e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138e6:	46c6      	mov	lr, r8
 80138e8:	b500      	push	{lr}
 80138ea:	0006      	movs	r6, r0
 80138ec:	000c      	movs	r4, r1
 80138ee:	0017      	movs	r7, r2
 80138f0:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80138f2:	f7fd f831 	bl	8010958 <HAL_GetTick>
 80138f6:	4680      	mov	r8, r0
  if(Status == RESET)
 80138f8:	2f00      	cmp	r7, #0
 80138fa:	d029      	beq.n	8013950 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80138fc:	6832      	ldr	r2, [r6, #0]
 80138fe:	69d3      	ldr	r3, [r2, #28]
 8013900:	4023      	ands	r3, r4
 8013902:	42a3      	cmp	r3, r4
 8013904:	d152      	bne.n	80139ac <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8013906:	1c6b      	adds	r3, r5, #1
 8013908:	d0f9      	beq.n	80138fe <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801390a:	2d00      	cmp	r5, #0
 801390c:	d005      	beq.n	801391a <UART_WaitOnFlagUntilTimeout+0x36>
 801390e:	f7fd f823 	bl	8010958 <HAL_GetTick>
 8013912:	4643      	mov	r3, r8
 8013914:	1ac0      	subs	r0, r0, r3
 8013916:	42a8      	cmp	r0, r5
 8013918:	d9f0      	bls.n	80138fc <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801391a:	6832      	ldr	r2, [r6, #0]
 801391c:	6813      	ldr	r3, [r2, #0]
 801391e:	2180      	movs	r1, #128	; 0x80
 8013920:	438b      	bics	r3, r1
 8013922:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013924:	6832      	ldr	r2, [r6, #0]
 8013926:	6813      	ldr	r3, [r2, #0]
 8013928:	3960      	subs	r1, #96	; 0x60
 801392a:	438b      	bics	r3, r1
 801392c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801392e:	6832      	ldr	r2, [r6, #0]
 8013930:	6813      	ldr	r3, [r2, #0]
 8013932:	491f      	ldr	r1, [pc, #124]	; (80139b0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013934:	400b      	ands	r3, r1
 8013936:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013938:	6831      	ldr	r1, [r6, #0]
 801393a:	688b      	ldr	r3, [r1, #8]
 801393c:	2201      	movs	r2, #1
 801393e:	4393      	bics	r3, r2
 8013940:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013942:	2369      	movs	r3, #105	; 0x69
 8013944:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013946:	3b01      	subs	r3, #1
 8013948:	2200      	movs	r2, #0
 801394a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801394c:	2003      	movs	r0, #3
 801394e:	e02a      	b.n	80139a6 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013950:	6832      	ldr	r2, [r6, #0]
 8013952:	69d3      	ldr	r3, [r2, #28]
 8013954:	4023      	ands	r3, r4
 8013956:	42a3      	cmp	r3, r4
 8013958:	d024      	beq.n	80139a4 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801395a:	1c6b      	adds	r3, r5, #1
 801395c:	d0f9      	beq.n	8013952 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801395e:	2d00      	cmp	r5, #0
 8013960:	d005      	beq.n	801396e <UART_WaitOnFlagUntilTimeout+0x8a>
 8013962:	f7fc fff9 	bl	8010958 <HAL_GetTick>
 8013966:	4643      	mov	r3, r8
 8013968:	1ac0      	subs	r0, r0, r3
 801396a:	42a8      	cmp	r0, r5
 801396c:	d9f0      	bls.n	8013950 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801396e:	6832      	ldr	r2, [r6, #0]
 8013970:	6813      	ldr	r3, [r2, #0]
 8013972:	2180      	movs	r1, #128	; 0x80
 8013974:	438b      	bics	r3, r1
 8013976:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013978:	6832      	ldr	r2, [r6, #0]
 801397a:	6813      	ldr	r3, [r2, #0]
 801397c:	3960      	subs	r1, #96	; 0x60
 801397e:	438b      	bics	r3, r1
 8013980:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013982:	6832      	ldr	r2, [r6, #0]
 8013984:	6813      	ldr	r3, [r2, #0]
 8013986:	490a      	ldr	r1, [pc, #40]	; (80139b0 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013988:	400b      	ands	r3, r1
 801398a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801398c:	6831      	ldr	r1, [r6, #0]
 801398e:	688b      	ldr	r3, [r1, #8]
 8013990:	2201      	movs	r2, #1
 8013992:	4393      	bics	r3, r2
 8013994:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013996:	2369      	movs	r3, #105	; 0x69
 8013998:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801399a:	3b01      	subs	r3, #1
 801399c:	2200      	movs	r2, #0
 801399e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80139a0:	2003      	movs	r0, #3
 80139a2:	e000      	b.n	80139a6 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 80139a4:	2000      	movs	r0, #0
}
 80139a6:	bc04      	pop	{r2}
 80139a8:	4690      	mov	r8, r2
 80139aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 80139ac:	2000      	movs	r0, #0
 80139ae:	e7fa      	b.n	80139a6 <UART_WaitOnFlagUntilTimeout+0xc2>
 80139b0:	fffffeff 	.word	0xfffffeff

080139b4 <HAL_UART_Transmit>:
{
 80139b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139b6:	b083      	sub	sp, #12
 80139b8:	0004      	movs	r4, r0
 80139ba:	000e      	movs	r6, r1
 80139bc:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80139be:	2369      	movs	r3, #105	; 0x69
 80139c0:	5cc3      	ldrb	r3, [r0, r3]
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	d004      	beq.n	80139d0 <HAL_UART_Transmit+0x1c>
 80139c6:	2369      	movs	r3, #105	; 0x69
 80139c8:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 80139ca:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80139cc:	2b22      	cmp	r3, #34	; 0x22
 80139ce:	d153      	bne.n	8013a78 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 80139d0:	2e00      	cmp	r6, #0
 80139d2:	d050      	beq.n	8013a76 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 80139d4:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80139d6:	2a00      	cmp	r2, #0
 80139d8:	d04e      	beq.n	8013a78 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80139da:	2368      	movs	r3, #104	; 0x68
 80139dc:	5ce3      	ldrb	r3, [r4, r3]
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d04c      	beq.n	8013a7c <HAL_UART_Transmit+0xc8>
 80139e2:	2368      	movs	r3, #104	; 0x68
 80139e4:	2101      	movs	r1, #1
 80139e6:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139e8:	2300      	movs	r3, #0
 80139ea:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80139ec:	3369      	adds	r3, #105	; 0x69
 80139ee:	5ce3      	ldrb	r3, [r4, r3]
 80139f0:	2b22      	cmp	r3, #34	; 0x22
 80139f2:	d008      	beq.n	8013a06 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80139f4:	2369      	movs	r3, #105	; 0x69
 80139f6:	2112      	movs	r1, #18
 80139f8:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80139fa:	2350      	movs	r3, #80	; 0x50
 80139fc:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80139fe:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a00:	2580      	movs	r5, #128	; 0x80
 8013a02:	016d      	lsls	r5, r5, #5
 8013a04:	e00a      	b.n	8013a1c <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013a06:	3347      	adds	r3, #71	; 0x47
 8013a08:	3131      	adds	r1, #49	; 0x31
 8013a0a:	54e1      	strb	r1, [r4, r3]
 8013a0c:	e7f5      	b.n	80139fa <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8013a0e:	7833      	ldrb	r3, [r6, #0]
 8013a10:	6822      	ldr	r2, [r4, #0]
 8013a12:	8513      	strh	r3, [r2, #40]	; 0x28
 8013a14:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8013a16:	5be2      	ldrh	r2, [r4, r7]
 8013a18:	2a00      	cmp	r2, #0
 8013a1a:	d016      	beq.n	8013a4a <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013a1c:	3a01      	subs	r2, #1
 8013a1e:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013a20:	9b01      	ldr	r3, [sp, #4]
 8013a22:	2200      	movs	r2, #0
 8013a24:	2180      	movs	r1, #128	; 0x80
 8013a26:	0020      	movs	r0, r4
 8013a28:	f7ff ff5c 	bl	80138e4 <UART_WaitOnFlagUntilTimeout>
 8013a2c:	2800      	cmp	r0, #0
 8013a2e:	d127      	bne.n	8013a80 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a30:	68a3      	ldr	r3, [r4, #8]
 8013a32:	42ab      	cmp	r3, r5
 8013a34:	d1eb      	bne.n	8013a0e <HAL_UART_Transmit+0x5a>
 8013a36:	6923      	ldr	r3, [r4, #16]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d1e8      	bne.n	8013a0e <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013a3c:	8833      	ldrh	r3, [r6, #0]
 8013a3e:	05db      	lsls	r3, r3, #23
 8013a40:	0ddb      	lsrs	r3, r3, #23
 8013a42:	6822      	ldr	r2, [r4, #0]
 8013a44:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8013a46:	3602      	adds	r6, #2
 8013a48:	e7e5      	b.n	8013a16 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8013a4a:	9b01      	ldr	r3, [sp, #4]
 8013a4c:	2140      	movs	r1, #64	; 0x40
 8013a4e:	0020      	movs	r0, r4
 8013a50:	f7ff ff48 	bl	80138e4 <UART_WaitOnFlagUntilTimeout>
 8013a54:	2800      	cmp	r0, #0
 8013a56:	d115      	bne.n	8013a84 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013a58:	2369      	movs	r3, #105	; 0x69
 8013a5a:	5ce3      	ldrb	r3, [r4, r3]
 8013a5c:	2b32      	cmp	r3, #50	; 0x32
 8013a5e:	d006      	beq.n	8013a6e <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8013a60:	2369      	movs	r3, #105	; 0x69
 8013a62:	2201      	movs	r2, #1
 8013a64:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8013a66:	2368      	movs	r3, #104	; 0x68
 8013a68:	2200      	movs	r2, #0
 8013a6a:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013a6c:	e004      	b.n	8013a78 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013a6e:	3337      	adds	r3, #55	; 0x37
 8013a70:	2222      	movs	r2, #34	; 0x22
 8013a72:	54e2      	strb	r2, [r4, r3]
 8013a74:	e7f7      	b.n	8013a66 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8013a76:	2001      	movs	r0, #1
}
 8013a78:	b003      	add	sp, #12
 8013a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8013a7c:	2002      	movs	r0, #2
 8013a7e:	e7fb      	b.n	8013a78 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8013a80:	2003      	movs	r0, #3
 8013a82:	e7f9      	b.n	8013a78 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8013a84:	2003      	movs	r0, #3
 8013a86:	e7f7      	b.n	8013a78 <HAL_UART_Transmit+0xc4>

08013a88 <UART_CheckIdleState>:
{
 8013a88:	b510      	push	{r4, lr}
 8013a8a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013a90:	6803      	ldr	r3, [r0, #0]
 8013a92:	4a18      	ldr	r2, [pc, #96]	; (8013af4 <UART_CheckIdleState+0x6c>)
 8013a94:	4293      	cmp	r3, r2
 8013a96:	d005      	beq.n	8013aa4 <UART_CheckIdleState+0x1c>
 8013a98:	4a17      	ldr	r2, [pc, #92]	; (8013af8 <UART_CheckIdleState+0x70>)
 8013a9a:	4293      	cmp	r3, r2
 8013a9c:	d002      	beq.n	8013aa4 <UART_CheckIdleState+0x1c>
 8013a9e:	4a17      	ldr	r2, [pc, #92]	; (8013afc <UART_CheckIdleState+0x74>)
 8013aa0:	4293      	cmp	r3, r2
 8013aa2:	d106      	bne.n	8013ab2 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	071b      	lsls	r3, r3, #28
 8013aa8:	d40b      	bmi.n	8013ac2 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013aaa:	6823      	ldr	r3, [r4, #0]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	075b      	lsls	r3, r3, #29
 8013ab0:	d413      	bmi.n	8013ada <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8013ab2:	2369      	movs	r3, #105	; 0x69
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8013ab8:	3b01      	subs	r3, #1
 8013aba:	2200      	movs	r2, #0
 8013abc:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8013abe:	2000      	movs	r0, #0
}
 8013ac0:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013ac2:	23fa      	movs	r3, #250	; 0xfa
 8013ac4:	2180      	movs	r1, #128	; 0x80
 8013ac6:	009b      	lsls	r3, r3, #2
 8013ac8:	2200      	movs	r2, #0
 8013aca:	0389      	lsls	r1, r1, #14
 8013acc:	0020      	movs	r0, r4
 8013ace:	f7ff ff09 	bl	80138e4 <UART_WaitOnFlagUntilTimeout>
 8013ad2:	2800      	cmp	r0, #0
 8013ad4:	d0e9      	beq.n	8013aaa <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8013ad6:	2003      	movs	r0, #3
 8013ad8:	e7f2      	b.n	8013ac0 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013ada:	23fa      	movs	r3, #250	; 0xfa
 8013adc:	2180      	movs	r1, #128	; 0x80
 8013ade:	009b      	lsls	r3, r3, #2
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	03c9      	lsls	r1, r1, #15
 8013ae4:	0020      	movs	r0, r4
 8013ae6:	f7ff fefd 	bl	80138e4 <UART_WaitOnFlagUntilTimeout>
 8013aea:	2800      	cmp	r0, #0
 8013aec:	d0e1      	beq.n	8013ab2 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8013aee:	2003      	movs	r0, #3
 8013af0:	e7e6      	b.n	8013ac0 <UART_CheckIdleState+0x38>
 8013af2:	46c0      	nop			; (mov r8, r8)
 8013af4:	40013800 	.word	0x40013800
 8013af8:	40004400 	.word	0x40004400
 8013afc:	40004800 	.word	0x40004800

08013b00 <HAL_UART_Init>:
{
 8013b00:	b510      	push	{r4, lr}
 8013b02:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013b04:	d030      	beq.n	8013b68 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8013b06:	2369      	movs	r3, #105	; 0x69
 8013b08:	5cc3      	ldrb	r3, [r0, r3]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d022      	beq.n	8013b54 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8013b0e:	2369      	movs	r3, #105	; 0x69
 8013b10:	2202      	movs	r2, #2
 8013b12:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013b14:	6822      	ldr	r2, [r4, #0]
 8013b16:	6813      	ldr	r3, [r2, #0]
 8013b18:	2101      	movs	r1, #1
 8013b1a:	438b      	bics	r3, r1
 8013b1c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013b1e:	0020      	movs	r0, r4
 8013b20:	f7ff fd4c 	bl	80135bc <UART_SetConfig>
 8013b24:	2801      	cmp	r0, #1
 8013b26:	d014      	beq.n	8013b52 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d118      	bne.n	8013b60 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013b2e:	6822      	ldr	r2, [r4, #0]
 8013b30:	6853      	ldr	r3, [r2, #4]
 8013b32:	490e      	ldr	r1, [pc, #56]	; (8013b6c <HAL_UART_Init+0x6c>)
 8013b34:	400b      	ands	r3, r1
 8013b36:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013b38:	6822      	ldr	r2, [r4, #0]
 8013b3a:	6893      	ldr	r3, [r2, #8]
 8013b3c:	212a      	movs	r1, #42	; 0x2a
 8013b3e:	438b      	bics	r3, r1
 8013b40:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013b42:	6822      	ldr	r2, [r4, #0]
 8013b44:	6813      	ldr	r3, [r2, #0]
 8013b46:	3929      	subs	r1, #41	; 0x29
 8013b48:	430b      	orrs	r3, r1
 8013b4a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013b4c:	0020      	movs	r0, r4
 8013b4e:	f7ff ff9b 	bl	8013a88 <UART_CheckIdleState>
}
 8013b52:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013b54:	3368      	adds	r3, #104	; 0x68
 8013b56:	2200      	movs	r2, #0
 8013b58:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8013b5a:	f7fa f879 	bl	800dc50 <HAL_UART_MspInit>
 8013b5e:	e7d6      	b.n	8013b0e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013b60:	0020      	movs	r0, r4
 8013b62:	f7ff fe4f 	bl	8013804 <UART_AdvFeatureConfig>
 8013b66:	e7e2      	b.n	8013b2e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013b68:	2001      	movs	r0, #1
 8013b6a:	e7f2      	b.n	8013b52 <HAL_UART_Init+0x52>
 8013b6c:	ffffb7ff 	.word	0xffffb7ff

08013b70 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013b70:	2369      	movs	r3, #105	; 0x69
 8013b72:	5cc3      	ldrb	r3, [r0, r3]
 8013b74:	2b12      	cmp	r3, #18
 8013b76:	d004      	beq.n	8013b82 <UART_Transmit_IT+0x12>
 8013b78:	2369      	movs	r3, #105	; 0x69
 8013b7a:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8013b7c:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013b7e:	2a32      	cmp	r2, #50	; 0x32
 8013b80:	d113      	bne.n	8013baa <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8013b82:	2352      	movs	r3, #82	; 0x52
 8013b84:	5ac3      	ldrh	r3, [r0, r3]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d011      	beq.n	8013bae <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b8a:	2380      	movs	r3, #128	; 0x80
 8013b8c:	015b      	lsls	r3, r3, #5
 8013b8e:	6882      	ldr	r2, [r0, #8]
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d018      	beq.n	8013bc6 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013b94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013b96:	1c5a      	adds	r2, r3, #1
 8013b98:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	6802      	ldr	r2, [r0, #0]
 8013b9e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8013ba0:	2252      	movs	r2, #82	; 0x52
 8013ba2:	5a83      	ldrh	r3, [r0, r2]
 8013ba4:	3b01      	subs	r3, #1
 8013ba6:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8013ba8:	2300      	movs	r3, #0
  }
}
 8013baa:	0018      	movs	r0, r3
 8013bac:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013bae:	6802      	ldr	r2, [r0, #0]
 8013bb0:	6813      	ldr	r3, [r2, #0]
 8013bb2:	2180      	movs	r1, #128	; 0x80
 8013bb4:	438b      	bics	r3, r1
 8013bb6:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013bb8:	6802      	ldr	r2, [r0, #0]
 8013bba:	6813      	ldr	r3, [r2, #0]
 8013bbc:	3940      	subs	r1, #64	; 0x40
 8013bbe:	430b      	orrs	r3, r1
 8013bc0:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	e7f1      	b.n	8013baa <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013bc6:	6903      	ldr	r3, [r0, #16]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d1e3      	bne.n	8013b94 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013bcc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013bce:	881b      	ldrh	r3, [r3, #0]
 8013bd0:	05db      	lsls	r3, r3, #23
 8013bd2:	0ddb      	lsrs	r3, r3, #23
 8013bd4:	6802      	ldr	r2, [r0, #0]
 8013bd6:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8013bd8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013bda:	3302      	adds	r3, #2
 8013bdc:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013bde:	e7df      	b.n	8013ba0 <UART_Transmit_IT+0x30>

08013be0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013be0:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013be2:	6802      	ldr	r2, [r0, #0]
 8013be4:	6813      	ldr	r3, [r2, #0]
 8013be6:	2140      	movs	r1, #64	; 0x40
 8013be8:	438b      	bics	r3, r1
 8013bea:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013bec:	2369      	movs	r3, #105	; 0x69
 8013bee:	5cc3      	ldrb	r3, [r0, r3]
 8013bf0:	2b32      	cmp	r3, #50	; 0x32
 8013bf2:	d00a      	beq.n	8013c0a <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013bf4:	6801      	ldr	r1, [r0, #0]
 8013bf6:	688b      	ldr	r3, [r1, #8]
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	4393      	bics	r3, r2
 8013bfc:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8013bfe:	2369      	movs	r3, #105	; 0x69
 8013c00:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8013c02:	f7f9 fd4b 	bl	800d69c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8013c06:	2000      	movs	r0, #0
 8013c08:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013c0a:	3337      	adds	r3, #55	; 0x37
 8013c0c:	2222      	movs	r2, #34	; 0x22
 8013c0e:	54c2      	strb	r2, [r0, r3]
 8013c10:	e7f7      	b.n	8013c02 <UART_EndTransmit_IT+0x22>
	...

08013c14 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013c14:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013c16:	2369      	movs	r3, #105	; 0x69
 8013c18:	5cc3      	ldrb	r3, [r0, r3]
 8013c1a:	2b22      	cmp	r3, #34	; 0x22
 8013c1c:	d004      	beq.n	8013c28 <UART_Receive_IT+0x14>
 8013c1e:	2369      	movs	r3, #105	; 0x69
 8013c20:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013c22:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013c24:	2b32      	cmp	r3, #50	; 0x32
 8013c26:	d12d      	bne.n	8013c84 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8013c28:	235c      	movs	r3, #92	; 0x5c
 8013c2a:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c2c:	2280      	movs	r2, #128	; 0x80
 8013c2e:	0152      	lsls	r2, r2, #5
 8013c30:	6883      	ldr	r3, [r0, #8]
 8013c32:	4293      	cmp	r3, r2
 8013c34:	d028      	beq.n	8013c88 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013c36:	6803      	ldr	r3, [r0, #0]
 8013c38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c3a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013c3c:	1c54      	adds	r4, r2, #1
 8013c3e:	6544      	str	r4, [r0, #84]	; 0x54
 8013c40:	400b      	ands	r3, r1
 8013c42:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8013c44:	225a      	movs	r2, #90	; 0x5a
 8013c46:	5a83      	ldrh	r3, [r0, r2]
 8013c48:	3b01      	subs	r3, #1
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8013c4e:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d117      	bne.n	8013c84 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013c54:	6802      	ldr	r2, [r0, #0]
 8013c56:	6813      	ldr	r3, [r2, #0]
 8013c58:	2120      	movs	r1, #32
 8013c5a:	438b      	bics	r3, r1
 8013c5c:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013c5e:	2369      	movs	r3, #105	; 0x69
 8013c60:	5cc3      	ldrb	r3, [r0, r3]
 8013c62:	2b32      	cmp	r3, #50	; 0x32
 8013c64:	d01c      	beq.n	8013ca0 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013c66:	6802      	ldr	r2, [r0, #0]
 8013c68:	6813      	ldr	r3, [r2, #0]
 8013c6a:	490f      	ldr	r1, [pc, #60]	; (8013ca8 <UART_Receive_IT+0x94>)
 8013c6c:	400b      	ands	r3, r1
 8013c6e:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013c70:	6801      	ldr	r1, [r0, #0]
 8013c72:	688b      	ldr	r3, [r1, #8]
 8013c74:	2201      	movs	r2, #1
 8013c76:	4393      	bics	r3, r2
 8013c78:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 8013c7a:	2369      	movs	r3, #105	; 0x69
 8013c7c:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8013c7e:	f7f9 fd4b 	bl	800d718 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8013c82:	2200      	movs	r2, #0
  }
}
 8013c84:	0010      	movs	r0, r2
 8013c86:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c88:	6903      	ldr	r3, [r0, #16]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d1d3      	bne.n	8013c36 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013c8e:	6803      	ldr	r3, [r0, #0]
 8013c90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c92:	400b      	ands	r3, r1
 8013c94:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013c96:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8013c98:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8013c9a:	3302      	adds	r3, #2
 8013c9c:	6543      	str	r3, [r0, #84]	; 0x54
 8013c9e:	e7d1      	b.n	8013c44 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013ca0:	3337      	adds	r3, #55	; 0x37
 8013ca2:	2212      	movs	r2, #18
 8013ca4:	54c2      	strb	r2, [r0, r3]
 8013ca6:	e7ea      	b.n	8013c7e <UART_Receive_IT+0x6a>
 8013ca8:	fffffeff 	.word	0xfffffeff

08013cac <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013cac:	4770      	bx	lr

08013cae <HAL_UART_IRQHandler>:
{
 8013cae:	b510      	push	{r4, lr}
 8013cb0:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8013cb2:	6803      	ldr	r3, [r0, #0]
 8013cb4:	69da      	ldr	r2, [r3, #28]
 8013cb6:	07d2      	lsls	r2, r2, #31
 8013cb8:	d509      	bpl.n	8013cce <HAL_UART_IRQHandler+0x20>
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	05d2      	lsls	r2, r2, #23
 8013cbe:	d506      	bpl.n	8013cce <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013cc4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013cc6:	4313      	orrs	r3, r2
 8013cc8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013cca:	2369      	movs	r3, #105	; 0x69
 8013ccc:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013cce:	6823      	ldr	r3, [r4, #0]
 8013cd0:	69da      	ldr	r2, [r3, #28]
 8013cd2:	0792      	lsls	r2, r2, #30
 8013cd4:	d50b      	bpl.n	8013cee <HAL_UART_IRQHandler+0x40>
 8013cd6:	689a      	ldr	r2, [r3, #8]
 8013cd8:	07d2      	lsls	r2, r2, #31
 8013cda:	d508      	bpl.n	8013cee <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013cdc:	2202      	movs	r2, #2
 8013cde:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013ce0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013ce2:	3202      	adds	r2, #2
 8013ce4:	4313      	orrs	r3, r2
 8013ce6:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013ce8:	2369      	movs	r3, #105	; 0x69
 8013cea:	3a03      	subs	r2, #3
 8013cec:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013cee:	6823      	ldr	r3, [r4, #0]
 8013cf0:	69da      	ldr	r2, [r3, #28]
 8013cf2:	0752      	lsls	r2, r2, #29
 8013cf4:	d50b      	bpl.n	8013d0e <HAL_UART_IRQHandler+0x60>
 8013cf6:	689a      	ldr	r2, [r3, #8]
 8013cf8:	07d2      	lsls	r2, r2, #31
 8013cfa:	d508      	bpl.n	8013d0e <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013cfc:	2204      	movs	r2, #4
 8013cfe:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013d00:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013d02:	3a02      	subs	r2, #2
 8013d04:	4313      	orrs	r3, r2
 8013d06:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013d08:	2369      	movs	r3, #105	; 0x69
 8013d0a:	3a01      	subs	r2, #1
 8013d0c:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013d0e:	6823      	ldr	r3, [r4, #0]
 8013d10:	69da      	ldr	r2, [r3, #28]
 8013d12:	0712      	lsls	r2, r2, #28
 8013d14:	d50a      	bpl.n	8013d2c <HAL_UART_IRQHandler+0x7e>
 8013d16:	689a      	ldr	r2, [r3, #8]
 8013d18:	07d2      	lsls	r2, r2, #31
 8013d1a:	d507      	bpl.n	8013d2c <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013d1c:	2208      	movs	r2, #8
 8013d1e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013d20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013d22:	4313      	orrs	r3, r2
 8013d24:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013d26:	2369      	movs	r3, #105	; 0x69
 8013d28:	3a07      	subs	r2, #7
 8013d2a:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013d2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d11c      	bne.n	8013d6c <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013d32:	6823      	ldr	r3, [r4, #0]
 8013d34:	69da      	ldr	r2, [r3, #28]
 8013d36:	02d2      	lsls	r2, r2, #11
 8013d38:	d502      	bpl.n	8013d40 <HAL_UART_IRQHandler+0x92>
 8013d3a:	689a      	ldr	r2, [r3, #8]
 8013d3c:	0252      	lsls	r2, r2, #9
 8013d3e:	d419      	bmi.n	8013d74 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013d40:	6823      	ldr	r3, [r4, #0]
 8013d42:	69da      	ldr	r2, [r3, #28]
 8013d44:	0692      	lsls	r2, r2, #26
 8013d46:	d502      	bpl.n	8013d4e <HAL_UART_IRQHandler+0xa0>
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	069b      	lsls	r3, r3, #26
 8013d4c:	d41c      	bmi.n	8013d88 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013d4e:	6823      	ldr	r3, [r4, #0]
 8013d50:	69da      	ldr	r2, [r3, #28]
 8013d52:	0612      	lsls	r2, r2, #24
 8013d54:	d502      	bpl.n	8013d5c <HAL_UART_IRQHandler+0xae>
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	061b      	lsls	r3, r3, #24
 8013d5a:	d41e      	bmi.n	8013d9a <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	69da      	ldr	r2, [r3, #28]
 8013d60:	0652      	lsls	r2, r2, #25
 8013d62:	d502      	bpl.n	8013d6a <HAL_UART_IRQHandler+0xbc>
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	065b      	lsls	r3, r3, #25
 8013d68:	d41b      	bmi.n	8013da2 <HAL_UART_IRQHandler+0xf4>
}
 8013d6a:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013d6c:	0020      	movs	r0, r4
 8013d6e:	f7f9 fcad 	bl	800d6cc <HAL_UART_ErrorCallback>
 8013d72:	e7de      	b.n	8013d32 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013d74:	2280      	movs	r2, #128	; 0x80
 8013d76:	0352      	lsls	r2, r2, #13
 8013d78:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013d7a:	2369      	movs	r3, #105	; 0x69
 8013d7c:	2201      	movs	r2, #1
 8013d7e:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013d80:	0020      	movs	r0, r4
 8013d82:	f7ff ff93 	bl	8013cac <HAL_UARTEx_WakeupCallback>
 8013d86:	e7db      	b.n	8013d40 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013d88:	0020      	movs	r0, r4
 8013d8a:	f7ff ff43 	bl	8013c14 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013d8e:	6822      	ldr	r2, [r4, #0]
 8013d90:	6993      	ldr	r3, [r2, #24]
 8013d92:	2108      	movs	r1, #8
 8013d94:	430b      	orrs	r3, r1
 8013d96:	6193      	str	r3, [r2, #24]
 8013d98:	e7d9      	b.n	8013d4e <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013d9a:	0020      	movs	r0, r4
 8013d9c:	f7ff fee8 	bl	8013b70 <UART_Transmit_IT>
 8013da0:	e7dc      	b.n	8013d5c <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8013da2:	0020      	movs	r0, r4
 8013da4:	f7ff ff1c 	bl	8013be0 <UART_EndTransmit_IT>
}
 8013da8:	e7df      	b.n	8013d6a <HAL_UART_IRQHandler+0xbc>

08013daa <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 8013daa:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013dac:	f7fc fdbc 	bl	8010928 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8013db0:	f7f7 fb0c 	bl	800b3cc <SystemClock_Config>

  /* Initialize all user peripherals */

	/* Initialize BitzOS */
	BOS_Init();
 8013db4:	f7f0 fdb4 	bl	8004920 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8013db8:	f7f4 f95e 	bl	8008078 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8013dbc:	f7fa fda2 	bl	800e904 <osKernelStart>
 8013dc0:	e7fe      	b.n	8013dc0 <main+0x16>

08013dc2 <UserTask>:

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void * argument)
{
 8013dc2:	e7fe      	b.n	8013dc2 <UserTask>

08013dc4 <atof>:
 8013dc4:	b510      	push	{r4, lr}
 8013dc6:	2100      	movs	r1, #0
 8013dc8:	f001 fb70 	bl	80154ac <strtod>
 8013dcc:	bd10      	pop	{r4, pc}

08013dce <atoi>:
 8013dce:	b510      	push	{r4, lr}
 8013dd0:	220a      	movs	r2, #10
 8013dd2:	2100      	movs	r1, #0
 8013dd4:	f001 fc36 	bl	8015644 <strtol>
 8013dd8:	bd10      	pop	{r4, pc}

08013dda <atol>:
 8013dda:	b510      	push	{r4, lr}
 8013ddc:	220a      	movs	r2, #10
 8013dde:	2100      	movs	r1, #0
 8013de0:	f001 fc30 	bl	8015644 <strtol>
 8013de4:	bd10      	pop	{r4, pc}
	...

08013de8 <__libc_init_array>:
 8013de8:	b570      	push	{r4, r5, r6, lr}
 8013dea:	2600      	movs	r6, #0
 8013dec:	4d0c      	ldr	r5, [pc, #48]	; (8013e20 <__libc_init_array+0x38>)
 8013dee:	4c0d      	ldr	r4, [pc, #52]	; (8013e24 <__libc_init_array+0x3c>)
 8013df0:	1b64      	subs	r4, r4, r5
 8013df2:	10a4      	asrs	r4, r4, #2
 8013df4:	42a6      	cmp	r6, r4
 8013df6:	d109      	bne.n	8013e0c <__libc_init_array+0x24>
 8013df8:	2600      	movs	r6, #0
 8013dfa:	f004 fe9f 	bl	8018b3c <_init>
 8013dfe:	4d0a      	ldr	r5, [pc, #40]	; (8013e28 <__libc_init_array+0x40>)
 8013e00:	4c0a      	ldr	r4, [pc, #40]	; (8013e2c <__libc_init_array+0x44>)
 8013e02:	1b64      	subs	r4, r4, r5
 8013e04:	10a4      	asrs	r4, r4, #2
 8013e06:	42a6      	cmp	r6, r4
 8013e08:	d105      	bne.n	8013e16 <__libc_init_array+0x2e>
 8013e0a:	bd70      	pop	{r4, r5, r6, pc}
 8013e0c:	00b3      	lsls	r3, r6, #2
 8013e0e:	58eb      	ldr	r3, [r5, r3]
 8013e10:	4798      	blx	r3
 8013e12:	3601      	adds	r6, #1
 8013e14:	e7ee      	b.n	8013df4 <__libc_init_array+0xc>
 8013e16:	00b3      	lsls	r3, r6, #2
 8013e18:	58eb      	ldr	r3, [r5, r3]
 8013e1a:	4798      	blx	r3
 8013e1c:	3601      	adds	r6, #1
 8013e1e:	e7f2      	b.n	8013e06 <__libc_init_array+0x1e>
 8013e20:	0801bd6c 	.word	0x0801bd6c
 8013e24:	0801bd6c 	.word	0x0801bd6c
 8013e28:	0801bd6c 	.word	0x0801bd6c
 8013e2c:	0801bd74 	.word	0x0801bd74

08013e30 <__locale_ctype_ptr_l>:
 8013e30:	30ec      	adds	r0, #236	; 0xec
 8013e32:	6800      	ldr	r0, [r0, #0]
 8013e34:	4770      	bx	lr
	...

08013e38 <__locale_ctype_ptr>:
 8013e38:	4b04      	ldr	r3, [pc, #16]	; (8013e4c <__locale_ctype_ptr+0x14>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d100      	bne.n	8013e44 <__locale_ctype_ptr+0xc>
 8013e42:	4b03      	ldr	r3, [pc, #12]	; (8013e50 <__locale_ctype_ptr+0x18>)
 8013e44:	33ec      	adds	r3, #236	; 0xec
 8013e46:	6818      	ldr	r0, [r3, #0]
 8013e48:	4770      	bx	lr
 8013e4a:	46c0      	nop			; (mov r8, r8)
 8013e4c:	20000138 	.word	0x20000138
 8013e50:	20000568 	.word	0x20000568

08013e54 <malloc>:
 8013e54:	b510      	push	{r4, lr}
 8013e56:	4b03      	ldr	r3, [pc, #12]	; (8013e64 <malloc+0x10>)
 8013e58:	0001      	movs	r1, r0
 8013e5a:	6818      	ldr	r0, [r3, #0]
 8013e5c:	f000 f80e 	bl	8013e7c <_malloc_r>
 8013e60:	bd10      	pop	{r4, pc}
 8013e62:	46c0      	nop			; (mov r8, r8)
 8013e64:	20000138 	.word	0x20000138

08013e68 <free>:
 8013e68:	b510      	push	{r4, lr}
 8013e6a:	4b03      	ldr	r3, [pc, #12]	; (8013e78 <free+0x10>)
 8013e6c:	0001      	movs	r1, r0
 8013e6e:	6818      	ldr	r0, [r3, #0]
 8013e70:	f003 fd42 	bl	80178f8 <_free_r>
 8013e74:	bd10      	pop	{r4, pc}
 8013e76:	46c0      	nop			; (mov r8, r8)
 8013e78:	20000138 	.word	0x20000138

08013e7c <_malloc_r>:
 8013e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e7e:	000d      	movs	r5, r1
 8013e80:	b085      	sub	sp, #20
 8013e82:	350b      	adds	r5, #11
 8013e84:	9001      	str	r0, [sp, #4]
 8013e86:	2d16      	cmp	r5, #22
 8013e88:	d908      	bls.n	8013e9c <_malloc_r+0x20>
 8013e8a:	2307      	movs	r3, #7
 8013e8c:	439d      	bics	r5, r3
 8013e8e:	d506      	bpl.n	8013e9e <_malloc_r+0x22>
 8013e90:	230c      	movs	r3, #12
 8013e92:	9a01      	ldr	r2, [sp, #4]
 8013e94:	6013      	str	r3, [r2, #0]
 8013e96:	2000      	movs	r0, #0
 8013e98:	b005      	add	sp, #20
 8013e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e9c:	2510      	movs	r5, #16
 8013e9e:	428d      	cmp	r5, r1
 8013ea0:	d3f6      	bcc.n	8013e90 <_malloc_r+0x14>
 8013ea2:	9801      	ldr	r0, [sp, #4]
 8013ea4:	f000 fa34 	bl	8014310 <__malloc_lock>
 8013ea8:	23f8      	movs	r3, #248	; 0xf8
 8013eaa:	33ff      	adds	r3, #255	; 0xff
 8013eac:	4ac4      	ldr	r2, [pc, #784]	; (80141c0 <_malloc_r+0x344>)
 8013eae:	429d      	cmp	r5, r3
 8013eb0:	d820      	bhi.n	8013ef4 <_malloc_r+0x78>
 8013eb2:	0029      	movs	r1, r5
 8013eb4:	3108      	adds	r1, #8
 8013eb6:	1851      	adds	r1, r2, r1
 8013eb8:	0008      	movs	r0, r1
 8013eba:	684c      	ldr	r4, [r1, #4]
 8013ebc:	3808      	subs	r0, #8
 8013ebe:	08eb      	lsrs	r3, r5, #3
 8013ec0:	4284      	cmp	r4, r0
 8013ec2:	d104      	bne.n	8013ece <_malloc_r+0x52>
 8013ec4:	68cc      	ldr	r4, [r1, #12]
 8013ec6:	3302      	adds	r3, #2
 8013ec8:	469c      	mov	ip, r3
 8013eca:	42a1      	cmp	r1, r4
 8013ecc:	d02a      	beq.n	8013f24 <_malloc_r+0xa8>
 8013ece:	2303      	movs	r3, #3
 8013ed0:	6862      	ldr	r2, [r4, #4]
 8013ed2:	68a1      	ldr	r1, [r4, #8]
 8013ed4:	439a      	bics	r2, r3
 8013ed6:	0013      	movs	r3, r2
 8013ed8:	68e2      	ldr	r2, [r4, #12]
 8013eda:	18e3      	adds	r3, r4, r3
 8013edc:	60ca      	str	r2, [r1, #12]
 8013ede:	6091      	str	r1, [r2, #8]
 8013ee0:	2201      	movs	r2, #1
 8013ee2:	6859      	ldr	r1, [r3, #4]
 8013ee4:	430a      	orrs	r2, r1
 8013ee6:	605a      	str	r2, [r3, #4]
 8013ee8:	9801      	ldr	r0, [sp, #4]
 8013eea:	f000 fa19 	bl	8014320 <__malloc_unlock>
 8013eee:	0020      	movs	r0, r4
 8013ef0:	3008      	adds	r0, #8
 8013ef2:	e7d1      	b.n	8013e98 <_malloc_r+0x1c>
 8013ef4:	0a69      	lsrs	r1, r5, #9
 8013ef6:	233f      	movs	r3, #63	; 0x3f
 8013ef8:	2900      	cmp	r1, #0
 8013efa:	d003      	beq.n	8013f04 <_malloc_r+0x88>
 8013efc:	2904      	cmp	r1, #4
 8013efe:	d828      	bhi.n	8013f52 <_malloc_r+0xd6>
 8013f00:	09ab      	lsrs	r3, r5, #6
 8013f02:	3338      	adds	r3, #56	; 0x38
 8013f04:	2103      	movs	r1, #3
 8013f06:	468c      	mov	ip, r1
 8013f08:	00d8      	lsls	r0, r3, #3
 8013f0a:	1880      	adds	r0, r0, r2
 8013f0c:	68c4      	ldr	r4, [r0, #12]
 8013f0e:	4284      	cmp	r4, r0
 8013f10:	d006      	beq.n	8013f20 <_malloc_r+0xa4>
 8013f12:	4666      	mov	r6, ip
 8013f14:	6861      	ldr	r1, [r4, #4]
 8013f16:	43b1      	bics	r1, r6
 8013f18:	1b4f      	subs	r7, r1, r5
 8013f1a:	2f0f      	cmp	r7, #15
 8013f1c:	dd31      	ble.n	8013f82 <_malloc_r+0x106>
 8013f1e:	3b01      	subs	r3, #1
 8013f20:	3301      	adds	r3, #1
 8013f22:	469c      	mov	ip, r3
 8013f24:	6914      	ldr	r4, [r2, #16]
 8013f26:	49a7      	ldr	r1, [pc, #668]	; (80141c4 <_malloc_r+0x348>)
 8013f28:	428c      	cmp	r4, r1
 8013f2a:	d055      	beq.n	8013fd8 <_malloc_r+0x15c>
 8013f2c:	2303      	movs	r3, #3
 8013f2e:	6860      	ldr	r0, [r4, #4]
 8013f30:	4398      	bics	r0, r3
 8013f32:	0003      	movs	r3, r0
 8013f34:	1b46      	subs	r6, r0, r5
 8013f36:	2e0f      	cmp	r6, #15
 8013f38:	dd31      	ble.n	8013f9e <_malloc_r+0x122>
 8013f3a:	2701      	movs	r7, #1
 8013f3c:	1960      	adds	r0, r4, r5
 8013f3e:	433d      	orrs	r5, r7
 8013f40:	4337      	orrs	r7, r6
 8013f42:	6065      	str	r5, [r4, #4]
 8013f44:	6150      	str	r0, [r2, #20]
 8013f46:	6110      	str	r0, [r2, #16]
 8013f48:	60c1      	str	r1, [r0, #12]
 8013f4a:	6081      	str	r1, [r0, #8]
 8013f4c:	6047      	str	r7, [r0, #4]
 8013f4e:	50e6      	str	r6, [r4, r3]
 8013f50:	e7ca      	b.n	8013ee8 <_malloc_r+0x6c>
 8013f52:	2914      	cmp	r1, #20
 8013f54:	d802      	bhi.n	8013f5c <_malloc_r+0xe0>
 8013f56:	000b      	movs	r3, r1
 8013f58:	335b      	adds	r3, #91	; 0x5b
 8013f5a:	e7d3      	b.n	8013f04 <_malloc_r+0x88>
 8013f5c:	2954      	cmp	r1, #84	; 0x54
 8013f5e:	d802      	bhi.n	8013f66 <_malloc_r+0xea>
 8013f60:	0b2b      	lsrs	r3, r5, #12
 8013f62:	336e      	adds	r3, #110	; 0x6e
 8013f64:	e7ce      	b.n	8013f04 <_malloc_r+0x88>
 8013f66:	23aa      	movs	r3, #170	; 0xaa
 8013f68:	005b      	lsls	r3, r3, #1
 8013f6a:	4299      	cmp	r1, r3
 8013f6c:	d802      	bhi.n	8013f74 <_malloc_r+0xf8>
 8013f6e:	0beb      	lsrs	r3, r5, #15
 8013f70:	3377      	adds	r3, #119	; 0x77
 8013f72:	e7c7      	b.n	8013f04 <_malloc_r+0x88>
 8013f74:	4894      	ldr	r0, [pc, #592]	; (80141c8 <_malloc_r+0x34c>)
 8013f76:	237e      	movs	r3, #126	; 0x7e
 8013f78:	4281      	cmp	r1, r0
 8013f7a:	d8c3      	bhi.n	8013f04 <_malloc_r+0x88>
 8013f7c:	0cab      	lsrs	r3, r5, #18
 8013f7e:	337c      	adds	r3, #124	; 0x7c
 8013f80:	e7c0      	b.n	8013f04 <_malloc_r+0x88>
 8013f82:	68e6      	ldr	r6, [r4, #12]
 8013f84:	2f00      	cmp	r7, #0
 8013f86:	db08      	blt.n	8013f9a <_malloc_r+0x11e>
 8013f88:	68a3      	ldr	r3, [r4, #8]
 8013f8a:	1861      	adds	r1, r4, r1
 8013f8c:	60de      	str	r6, [r3, #12]
 8013f8e:	60b3      	str	r3, [r6, #8]
 8013f90:	2301      	movs	r3, #1
 8013f92:	684a      	ldr	r2, [r1, #4]
 8013f94:	4313      	orrs	r3, r2
 8013f96:	604b      	str	r3, [r1, #4]
 8013f98:	e7a6      	b.n	8013ee8 <_malloc_r+0x6c>
 8013f9a:	0034      	movs	r4, r6
 8013f9c:	e7b7      	b.n	8013f0e <_malloc_r+0x92>
 8013f9e:	6151      	str	r1, [r2, #20]
 8013fa0:	6111      	str	r1, [r2, #16]
 8013fa2:	2e00      	cmp	r6, #0
 8013fa4:	db05      	blt.n	8013fb2 <_malloc_r+0x136>
 8013fa6:	2101      	movs	r1, #1
 8013fa8:	1823      	adds	r3, r4, r0
 8013faa:	685a      	ldr	r2, [r3, #4]
 8013fac:	4311      	orrs	r1, r2
 8013fae:	6059      	str	r1, [r3, #4]
 8013fb0:	e79a      	b.n	8013ee8 <_malloc_r+0x6c>
 8013fb2:	4986      	ldr	r1, [pc, #536]	; (80141cc <_malloc_r+0x350>)
 8013fb4:	6857      	ldr	r7, [r2, #4]
 8013fb6:	4288      	cmp	r0, r1
 8013fb8:	d900      	bls.n	8013fbc <_malloc_r+0x140>
 8013fba:	e090      	b.n	80140de <_malloc_r+0x262>
 8013fbc:	08c3      	lsrs	r3, r0, #3
 8013fbe:	39ff      	subs	r1, #255	; 0xff
 8013fc0:	1098      	asrs	r0, r3, #2
 8013fc2:	39ff      	subs	r1, #255	; 0xff
 8013fc4:	4081      	lsls	r1, r0
 8013fc6:	00db      	lsls	r3, r3, #3
 8013fc8:	4339      	orrs	r1, r7
 8013fca:	6051      	str	r1, [r2, #4]
 8013fcc:	189a      	adds	r2, r3, r2
 8013fce:	6893      	ldr	r3, [r2, #8]
 8013fd0:	60e2      	str	r2, [r4, #12]
 8013fd2:	60a3      	str	r3, [r4, #8]
 8013fd4:	6094      	str	r4, [r2, #8]
 8013fd6:	60dc      	str	r4, [r3, #12]
 8013fd8:	4663      	mov	r3, ip
 8013fda:	2201      	movs	r2, #1
 8013fdc:	4978      	ldr	r1, [pc, #480]	; (80141c0 <_malloc_r+0x344>)
 8013fde:	109b      	asrs	r3, r3, #2
 8013fe0:	6848      	ldr	r0, [r1, #4]
 8013fe2:	409a      	lsls	r2, r3
 8013fe4:	4290      	cmp	r0, r2
 8013fe6:	d32d      	bcc.n	8014044 <_malloc_r+0x1c8>
 8013fe8:	4202      	tst	r2, r0
 8013fea:	d109      	bne.n	8014000 <_malloc_r+0x184>
 8013fec:	2303      	movs	r3, #3
 8013fee:	4664      	mov	r4, ip
 8013ff0:	439c      	bics	r4, r3
 8013ff2:	0023      	movs	r3, r4
 8013ff4:	3304      	adds	r3, #4
 8013ff6:	469c      	mov	ip, r3
 8013ff8:	0052      	lsls	r2, r2, #1
 8013ffa:	4202      	tst	r2, r0
 8013ffc:	d100      	bne.n	8014000 <_malloc_r+0x184>
 8013ffe:	e0a4      	b.n	801414a <_malloc_r+0x2ce>
 8014000:	4663      	mov	r3, ip
 8014002:	00db      	lsls	r3, r3, #3
 8014004:	18cb      	adds	r3, r1, r3
 8014006:	9303      	str	r3, [sp, #12]
 8014008:	001f      	movs	r7, r3
 801400a:	4663      	mov	r3, ip
 801400c:	9302      	str	r3, [sp, #8]
 801400e:	68fc      	ldr	r4, [r7, #12]
 8014010:	42bc      	cmp	r4, r7
 8014012:	d000      	beq.n	8014016 <_malloc_r+0x19a>
 8014014:	e09c      	b.n	8014150 <_malloc_r+0x2d4>
 8014016:	2003      	movs	r0, #3
 8014018:	9b02      	ldr	r3, [sp, #8]
 801401a:	3708      	adds	r7, #8
 801401c:	3301      	adds	r3, #1
 801401e:	9302      	str	r3, [sp, #8]
 8014020:	4203      	tst	r3, r0
 8014022:	d1f4      	bne.n	801400e <_malloc_r+0x192>
 8014024:	4663      	mov	r3, ip
 8014026:	2003      	movs	r0, #3
 8014028:	4203      	tst	r3, r0
 801402a:	d000      	beq.n	801402e <_malloc_r+0x1b2>
 801402c:	e0b3      	b.n	8014196 <_malloc_r+0x31a>
 801402e:	684b      	ldr	r3, [r1, #4]
 8014030:	4393      	bics	r3, r2
 8014032:	604b      	str	r3, [r1, #4]
 8014034:	4b62      	ldr	r3, [pc, #392]	; (80141c0 <_malloc_r+0x344>)
 8014036:	0052      	lsls	r2, r2, #1
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	4293      	cmp	r3, r2
 801403c:	d302      	bcc.n	8014044 <_malloc_r+0x1c8>
 801403e:	2a00      	cmp	r2, #0
 8014040:	d000      	beq.n	8014044 <_malloc_r+0x1c8>
 8014042:	e0b9      	b.n	80141b8 <_malloc_r+0x33c>
 8014044:	2303      	movs	r3, #3
 8014046:	688f      	ldr	r7, [r1, #8]
 8014048:	687a      	ldr	r2, [r7, #4]
 801404a:	439a      	bics	r2, r3
 801404c:	9202      	str	r2, [sp, #8]
 801404e:	42aa      	cmp	r2, r5
 8014050:	d303      	bcc.n	801405a <_malloc_r+0x1de>
 8014052:	1b52      	subs	r2, r2, r5
 8014054:	2a0f      	cmp	r2, #15
 8014056:	dd00      	ble.n	801405a <_malloc_r+0x1de>
 8014058:	e116      	b.n	8014288 <_malloc_r+0x40c>
 801405a:	4b5d      	ldr	r3, [pc, #372]	; (80141d0 <_malloc_r+0x354>)
 801405c:	2008      	movs	r0, #8
 801405e:	681e      	ldr	r6, [r3, #0]
 8014060:	f002 fd58 	bl	8016b14 <sysconf>
 8014064:	4b5b      	ldr	r3, [pc, #364]	; (80141d4 <_malloc_r+0x358>)
 8014066:	3610      	adds	r6, #16
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	1976      	adds	r6, r6, r5
 801406c:	9003      	str	r0, [sp, #12]
 801406e:	3301      	adds	r3, #1
 8014070:	d003      	beq.n	801407a <_malloc_r+0x1fe>
 8014072:	3e01      	subs	r6, #1
 8014074:	1836      	adds	r6, r6, r0
 8014076:	4243      	negs	r3, r0
 8014078:	401e      	ands	r6, r3
 801407a:	0031      	movs	r1, r6
 801407c:	9801      	ldr	r0, [sp, #4]
 801407e:	f000 fb27 	bl	80146d0 <_sbrk_r>
 8014082:	0004      	movs	r4, r0
 8014084:	1c43      	adds	r3, r0, #1
 8014086:	d100      	bne.n	801408a <_malloc_r+0x20e>
 8014088:	e0d6      	b.n	8014238 <_malloc_r+0x3bc>
 801408a:	9b02      	ldr	r3, [sp, #8]
 801408c:	18fb      	adds	r3, r7, r3
 801408e:	4283      	cmp	r3, r0
 8014090:	d903      	bls.n	801409a <_malloc_r+0x21e>
 8014092:	4a4b      	ldr	r2, [pc, #300]	; (80141c0 <_malloc_r+0x344>)
 8014094:	4297      	cmp	r7, r2
 8014096:	d000      	beq.n	801409a <_malloc_r+0x21e>
 8014098:	e0ce      	b.n	8014238 <_malloc_r+0x3bc>
 801409a:	494f      	ldr	r1, [pc, #316]	; (80141d8 <_malloc_r+0x35c>)
 801409c:	680a      	ldr	r2, [r1, #0]
 801409e:	18b2      	adds	r2, r6, r2
 80140a0:	600a      	str	r2, [r1, #0]
 80140a2:	9903      	ldr	r1, [sp, #12]
 80140a4:	4694      	mov	ip, r2
 80140a6:	1e48      	subs	r0, r1, #1
 80140a8:	42a3      	cmp	r3, r4
 80140aa:	d000      	beq.n	80140ae <_malloc_r+0x232>
 80140ac:	e09a      	b.n	80141e4 <_malloc_r+0x368>
 80140ae:	4203      	tst	r3, r0
 80140b0:	d000      	beq.n	80140b4 <_malloc_r+0x238>
 80140b2:	e097      	b.n	80141e4 <_malloc_r+0x368>
 80140b4:	9a02      	ldr	r2, [sp, #8]
 80140b6:	4b42      	ldr	r3, [pc, #264]	; (80141c0 <_malloc_r+0x344>)
 80140b8:	1992      	adds	r2, r2, r6
 80140ba:	2601      	movs	r6, #1
 80140bc:	689b      	ldr	r3, [r3, #8]
 80140be:	4316      	orrs	r6, r2
 80140c0:	605e      	str	r6, [r3, #4]
 80140c2:	4b45      	ldr	r3, [pc, #276]	; (80141d8 <_malloc_r+0x35c>)
 80140c4:	4a45      	ldr	r2, [pc, #276]	; (80141dc <_malloc_r+0x360>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	6811      	ldr	r1, [r2, #0]
 80140ca:	428b      	cmp	r3, r1
 80140cc:	d900      	bls.n	80140d0 <_malloc_r+0x254>
 80140ce:	6013      	str	r3, [r2, #0]
 80140d0:	4a43      	ldr	r2, [pc, #268]	; (80141e0 <_malloc_r+0x364>)
 80140d2:	6811      	ldr	r1, [r2, #0]
 80140d4:	428b      	cmp	r3, r1
 80140d6:	d800      	bhi.n	80140da <_malloc_r+0x25e>
 80140d8:	e0ae      	b.n	8014238 <_malloc_r+0x3bc>
 80140da:	6013      	str	r3, [r2, #0]
 80140dc:	e0ac      	b.n	8014238 <_malloc_r+0x3bc>
 80140de:	0a40      	lsrs	r0, r0, #9
 80140e0:	2804      	cmp	r0, #4
 80140e2:	d810      	bhi.n	8014106 <_malloc_r+0x28a>
 80140e4:	0999      	lsrs	r1, r3, #6
 80140e6:	3138      	adds	r1, #56	; 0x38
 80140e8:	00ce      	lsls	r6, r1, #3
 80140ea:	18b6      	adds	r6, r6, r2
 80140ec:	68b0      	ldr	r0, [r6, #8]
 80140ee:	4286      	cmp	r6, r0
 80140f0:	d124      	bne.n	801413c <_malloc_r+0x2c0>
 80140f2:	2301      	movs	r3, #1
 80140f4:	1089      	asrs	r1, r1, #2
 80140f6:	408b      	lsls	r3, r1
 80140f8:	433b      	orrs	r3, r7
 80140fa:	6053      	str	r3, [r2, #4]
 80140fc:	60e6      	str	r6, [r4, #12]
 80140fe:	60a0      	str	r0, [r4, #8]
 8014100:	60b4      	str	r4, [r6, #8]
 8014102:	60c4      	str	r4, [r0, #12]
 8014104:	e768      	b.n	8013fd8 <_malloc_r+0x15c>
 8014106:	2814      	cmp	r0, #20
 8014108:	d802      	bhi.n	8014110 <_malloc_r+0x294>
 801410a:	0001      	movs	r1, r0
 801410c:	315b      	adds	r1, #91	; 0x5b
 801410e:	e7eb      	b.n	80140e8 <_malloc_r+0x26c>
 8014110:	2854      	cmp	r0, #84	; 0x54
 8014112:	d802      	bhi.n	801411a <_malloc_r+0x29e>
 8014114:	0b19      	lsrs	r1, r3, #12
 8014116:	316e      	adds	r1, #110	; 0x6e
 8014118:	e7e6      	b.n	80140e8 <_malloc_r+0x26c>
 801411a:	21aa      	movs	r1, #170	; 0xaa
 801411c:	0049      	lsls	r1, r1, #1
 801411e:	4288      	cmp	r0, r1
 8014120:	d802      	bhi.n	8014128 <_malloc_r+0x2ac>
 8014122:	0bd9      	lsrs	r1, r3, #15
 8014124:	3177      	adds	r1, #119	; 0x77
 8014126:	e7df      	b.n	80140e8 <_malloc_r+0x26c>
 8014128:	4e27      	ldr	r6, [pc, #156]	; (80141c8 <_malloc_r+0x34c>)
 801412a:	217e      	movs	r1, #126	; 0x7e
 801412c:	42b0      	cmp	r0, r6
 801412e:	d8db      	bhi.n	80140e8 <_malloc_r+0x26c>
 8014130:	0c99      	lsrs	r1, r3, #18
 8014132:	317c      	adds	r1, #124	; 0x7c
 8014134:	e7d8      	b.n	80140e8 <_malloc_r+0x26c>
 8014136:	6880      	ldr	r0, [r0, #8]
 8014138:	4286      	cmp	r6, r0
 801413a:	d004      	beq.n	8014146 <_malloc_r+0x2ca>
 801413c:	2103      	movs	r1, #3
 801413e:	6842      	ldr	r2, [r0, #4]
 8014140:	438a      	bics	r2, r1
 8014142:	429a      	cmp	r2, r3
 8014144:	d8f7      	bhi.n	8014136 <_malloc_r+0x2ba>
 8014146:	68c6      	ldr	r6, [r0, #12]
 8014148:	e7d8      	b.n	80140fc <_malloc_r+0x280>
 801414a:	2304      	movs	r3, #4
 801414c:	449c      	add	ip, r3
 801414e:	e753      	b.n	8013ff8 <_malloc_r+0x17c>
 8014150:	2003      	movs	r0, #3
 8014152:	6863      	ldr	r3, [r4, #4]
 8014154:	4383      	bics	r3, r0
 8014156:	1b5e      	subs	r6, r3, r5
 8014158:	68e0      	ldr	r0, [r4, #12]
 801415a:	2e0f      	cmp	r6, #15
 801415c:	dd0e      	ble.n	801417c <_malloc_r+0x300>
 801415e:	2701      	movs	r7, #1
 8014160:	1962      	adds	r2, r4, r5
 8014162:	433d      	orrs	r5, r7
 8014164:	6065      	str	r5, [r4, #4]
 8014166:	68a5      	ldr	r5, [r4, #8]
 8014168:	4337      	orrs	r7, r6
 801416a:	60e8      	str	r0, [r5, #12]
 801416c:	6085      	str	r5, [r0, #8]
 801416e:	614a      	str	r2, [r1, #20]
 8014170:	610a      	str	r2, [r1, #16]
 8014172:	4914      	ldr	r1, [pc, #80]	; (80141c4 <_malloc_r+0x348>)
 8014174:	6057      	str	r7, [r2, #4]
 8014176:	60d1      	str	r1, [r2, #12]
 8014178:	6091      	str	r1, [r2, #8]
 801417a:	e6e8      	b.n	8013f4e <_malloc_r+0xd2>
 801417c:	2e00      	cmp	r6, #0
 801417e:	db08      	blt.n	8014192 <_malloc_r+0x316>
 8014180:	2201      	movs	r2, #1
 8014182:	18e3      	adds	r3, r4, r3
 8014184:	6859      	ldr	r1, [r3, #4]
 8014186:	430a      	orrs	r2, r1
 8014188:	605a      	str	r2, [r3, #4]
 801418a:	68a3      	ldr	r3, [r4, #8]
 801418c:	60d8      	str	r0, [r3, #12]
 801418e:	6083      	str	r3, [r0, #8]
 8014190:	e6aa      	b.n	8013ee8 <_malloc_r+0x6c>
 8014192:	0004      	movs	r4, r0
 8014194:	e73c      	b.n	8014010 <_malloc_r+0x194>
 8014196:	2301      	movs	r3, #1
 8014198:	425b      	negs	r3, r3
 801419a:	449c      	add	ip, r3
 801419c:	9b03      	ldr	r3, [sp, #12]
 801419e:	6818      	ldr	r0, [r3, #0]
 80141a0:	3b08      	subs	r3, #8
 80141a2:	9003      	str	r0, [sp, #12]
 80141a4:	4298      	cmp	r0, r3
 80141a6:	d100      	bne.n	80141aa <_malloc_r+0x32e>
 80141a8:	e73c      	b.n	8014024 <_malloc_r+0x1a8>
 80141aa:	e743      	b.n	8014034 <_malloc_r+0x1b8>
 80141ac:	2004      	movs	r0, #4
 80141ae:	0052      	lsls	r2, r2, #1
 80141b0:	4484      	add	ip, r0
 80141b2:	421a      	tst	r2, r3
 80141b4:	d0fa      	beq.n	80141ac <_malloc_r+0x330>
 80141b6:	e723      	b.n	8014000 <_malloc_r+0x184>
 80141b8:	9802      	ldr	r0, [sp, #8]
 80141ba:	4684      	mov	ip, r0
 80141bc:	e7f9      	b.n	80141b2 <_malloc_r+0x336>
 80141be:	46c0      	nop			; (mov r8, r8)
 80141c0:	200006d4 	.word	0x200006d4
 80141c4:	200006dc 	.word	0x200006dc
 80141c8:	00000554 	.word	0x00000554
 80141cc:	000001ff 	.word	0x000001ff
 80141d0:	20006994 	.word	0x20006994
 80141d4:	20000adc 	.word	0x20000adc
 80141d8:	20006964 	.word	0x20006964
 80141dc:	2000698c 	.word	0x2000698c
 80141e0:	20006990 	.word	0x20006990
 80141e4:	492e      	ldr	r1, [pc, #184]	; (80142a0 <_malloc_r+0x424>)
 80141e6:	680a      	ldr	r2, [r1, #0]
 80141e8:	3201      	adds	r2, #1
 80141ea:	d133      	bne.n	8014254 <_malloc_r+0x3d8>
 80141ec:	600c      	str	r4, [r1, #0]
 80141ee:	2307      	movs	r3, #7
 80141f0:	4023      	ands	r3, r4
 80141f2:	d002      	beq.n	80141fa <_malloc_r+0x37e>
 80141f4:	2208      	movs	r2, #8
 80141f6:	1ad3      	subs	r3, r2, r3
 80141f8:	18e4      	adds	r4, r4, r3
 80141fa:	9a03      	ldr	r2, [sp, #12]
 80141fc:	19a6      	adds	r6, r4, r6
 80141fe:	18d3      	adds	r3, r2, r3
 8014200:	4006      	ands	r6, r0
 8014202:	1b9e      	subs	r6, r3, r6
 8014204:	0031      	movs	r1, r6
 8014206:	9801      	ldr	r0, [sp, #4]
 8014208:	f000 fa62 	bl	80146d0 <_sbrk_r>
 801420c:	1c43      	adds	r3, r0, #1
 801420e:	d101      	bne.n	8014214 <_malloc_r+0x398>
 8014210:	0020      	movs	r0, r4
 8014212:	2600      	movs	r6, #0
 8014214:	4a23      	ldr	r2, [pc, #140]	; (80142a4 <_malloc_r+0x428>)
 8014216:	1b00      	subs	r0, r0, r4
 8014218:	6813      	ldr	r3, [r2, #0]
 801421a:	199b      	adds	r3, r3, r6
 801421c:	6013      	str	r3, [r2, #0]
 801421e:	2301      	movs	r3, #1
 8014220:	4a21      	ldr	r2, [pc, #132]	; (80142a8 <_malloc_r+0x42c>)
 8014222:	1986      	adds	r6, r0, r6
 8014224:	431e      	orrs	r6, r3
 8014226:	6094      	str	r4, [r2, #8]
 8014228:	6066      	str	r6, [r4, #4]
 801422a:	4297      	cmp	r7, r2
 801422c:	d100      	bne.n	8014230 <_malloc_r+0x3b4>
 801422e:	e748      	b.n	80140c2 <_malloc_r+0x246>
 8014230:	9a02      	ldr	r2, [sp, #8]
 8014232:	2a0f      	cmp	r2, #15
 8014234:	d813      	bhi.n	801425e <_malloc_r+0x3e2>
 8014236:	6063      	str	r3, [r4, #4]
 8014238:	2203      	movs	r2, #3
 801423a:	4b1b      	ldr	r3, [pc, #108]	; (80142a8 <_malloc_r+0x42c>)
 801423c:	689b      	ldr	r3, [r3, #8]
 801423e:	685b      	ldr	r3, [r3, #4]
 8014240:	4393      	bics	r3, r2
 8014242:	1b5a      	subs	r2, r3, r5
 8014244:	42ab      	cmp	r3, r5
 8014246:	d301      	bcc.n	801424c <_malloc_r+0x3d0>
 8014248:	2a0f      	cmp	r2, #15
 801424a:	dc1d      	bgt.n	8014288 <_malloc_r+0x40c>
 801424c:	9801      	ldr	r0, [sp, #4]
 801424e:	f000 f867 	bl	8014320 <__malloc_unlock>
 8014252:	e620      	b.n	8013e96 <_malloc_r+0x1a>
 8014254:	1ae3      	subs	r3, r4, r3
 8014256:	4a13      	ldr	r2, [pc, #76]	; (80142a4 <_malloc_r+0x428>)
 8014258:	4463      	add	r3, ip
 801425a:	6013      	str	r3, [r2, #0]
 801425c:	e7c7      	b.n	80141ee <_malloc_r+0x372>
 801425e:	2207      	movs	r2, #7
 8014260:	9e02      	ldr	r6, [sp, #8]
 8014262:	3e0c      	subs	r6, #12
 8014264:	4396      	bics	r6, r2
 8014266:	687a      	ldr	r2, [r7, #4]
 8014268:	4013      	ands	r3, r2
 801426a:	2205      	movs	r2, #5
 801426c:	4333      	orrs	r3, r6
 801426e:	607b      	str	r3, [r7, #4]
 8014270:	19bb      	adds	r3, r7, r6
 8014272:	605a      	str	r2, [r3, #4]
 8014274:	609a      	str	r2, [r3, #8]
 8014276:	2e0f      	cmp	r6, #15
 8014278:	d800      	bhi.n	801427c <_malloc_r+0x400>
 801427a:	e722      	b.n	80140c2 <_malloc_r+0x246>
 801427c:	0039      	movs	r1, r7
 801427e:	9801      	ldr	r0, [sp, #4]
 8014280:	3108      	adds	r1, #8
 8014282:	f003 fb39 	bl	80178f8 <_free_r>
 8014286:	e71c      	b.n	80140c2 <_malloc_r+0x246>
 8014288:	2301      	movs	r3, #1
 801428a:	0018      	movs	r0, r3
 801428c:	4906      	ldr	r1, [pc, #24]	; (80142a8 <_malloc_r+0x42c>)
 801428e:	4328      	orrs	r0, r5
 8014290:	688c      	ldr	r4, [r1, #8]
 8014292:	4313      	orrs	r3, r2
 8014294:	1965      	adds	r5, r4, r5
 8014296:	6060      	str	r0, [r4, #4]
 8014298:	608d      	str	r5, [r1, #8]
 801429a:	606b      	str	r3, [r5, #4]
 801429c:	e624      	b.n	8013ee8 <_malloc_r+0x6c>
 801429e:	46c0      	nop			; (mov r8, r8)
 80142a0:	20000adc 	.word	0x20000adc
 80142a4:	20006964 	.word	0x20006964
 80142a8:	200006d4 	.word	0x200006d4

080142ac <__ascii_mbtowc>:
 80142ac:	b082      	sub	sp, #8
 80142ae:	2900      	cmp	r1, #0
 80142b0:	d100      	bne.n	80142b4 <__ascii_mbtowc+0x8>
 80142b2:	a901      	add	r1, sp, #4
 80142b4:	1e10      	subs	r0, r2, #0
 80142b6:	d006      	beq.n	80142c6 <__ascii_mbtowc+0x1a>
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d006      	beq.n	80142ca <__ascii_mbtowc+0x1e>
 80142bc:	7813      	ldrb	r3, [r2, #0]
 80142be:	600b      	str	r3, [r1, #0]
 80142c0:	7810      	ldrb	r0, [r2, #0]
 80142c2:	1e43      	subs	r3, r0, #1
 80142c4:	4198      	sbcs	r0, r3
 80142c6:	b002      	add	sp, #8
 80142c8:	4770      	bx	lr
 80142ca:	2002      	movs	r0, #2
 80142cc:	4240      	negs	r0, r0
 80142ce:	e7fa      	b.n	80142c6 <__ascii_mbtowc+0x1a>

080142d0 <memcmp>:
 80142d0:	b530      	push	{r4, r5, lr}
 80142d2:	2400      	movs	r4, #0
 80142d4:	42a2      	cmp	r2, r4
 80142d6:	d101      	bne.n	80142dc <memcmp+0xc>
 80142d8:	2000      	movs	r0, #0
 80142da:	e005      	b.n	80142e8 <memcmp+0x18>
 80142dc:	5d03      	ldrb	r3, [r0, r4]
 80142de:	1c65      	adds	r5, r4, #1
 80142e0:	5d0c      	ldrb	r4, [r1, r4]
 80142e2:	42a3      	cmp	r3, r4
 80142e4:	d001      	beq.n	80142ea <memcmp+0x1a>
 80142e6:	1b18      	subs	r0, r3, r4
 80142e8:	bd30      	pop	{r4, r5, pc}
 80142ea:	002c      	movs	r4, r5
 80142ec:	e7f2      	b.n	80142d4 <memcmp+0x4>

080142ee <memcpy>:
 80142ee:	2300      	movs	r3, #0
 80142f0:	b510      	push	{r4, lr}
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d100      	bne.n	80142f8 <memcpy+0xa>
 80142f6:	bd10      	pop	{r4, pc}
 80142f8:	5ccc      	ldrb	r4, [r1, r3]
 80142fa:	54c4      	strb	r4, [r0, r3]
 80142fc:	3301      	adds	r3, #1
 80142fe:	e7f8      	b.n	80142f2 <memcpy+0x4>

08014300 <memset>:
 8014300:	0003      	movs	r3, r0
 8014302:	1812      	adds	r2, r2, r0
 8014304:	4293      	cmp	r3, r2
 8014306:	d100      	bne.n	801430a <memset+0xa>
 8014308:	4770      	bx	lr
 801430a:	7019      	strb	r1, [r3, #0]
 801430c:	3301      	adds	r3, #1
 801430e:	e7f9      	b.n	8014304 <memset+0x4>

08014310 <__malloc_lock>:
 8014310:	b510      	push	{r4, lr}
 8014312:	4802      	ldr	r0, [pc, #8]	; (801431c <__malloc_lock+0xc>)
 8014314:	f003 fee4 	bl	80180e0 <__retarget_lock_acquire_recursive>
 8014318:	bd10      	pop	{r4, pc}
 801431a:	46c0      	nop			; (mov r8, r8)
 801431c:	20006f1c 	.word	0x20006f1c

08014320 <__malloc_unlock>:
 8014320:	b510      	push	{r4, lr}
 8014322:	4802      	ldr	r0, [pc, #8]	; (801432c <__malloc_unlock+0xc>)
 8014324:	f003 fedd 	bl	80180e2 <__retarget_lock_release_recursive>
 8014328:	bd10      	pop	{r4, pc}
 801432a:	46c0      	nop			; (mov r8, r8)
 801432c:	20006f1c 	.word	0x20006f1c

08014330 <rand>:
 8014330:	4b09      	ldr	r3, [pc, #36]	; (8014358 <rand+0x28>)
 8014332:	b510      	push	{r4, lr}
 8014334:	681c      	ldr	r4, [r3, #0]
 8014336:	4a09      	ldr	r2, [pc, #36]	; (801435c <rand+0x2c>)
 8014338:	34a8      	adds	r4, #168	; 0xa8
 801433a:	6820      	ldr	r0, [r4, #0]
 801433c:	6861      	ldr	r1, [r4, #4]
 801433e:	4b08      	ldr	r3, [pc, #32]	; (8014360 <rand+0x30>)
 8014340:	f7ec f938 	bl	80005b4 <__aeabi_lmul>
 8014344:	2201      	movs	r2, #1
 8014346:	2300      	movs	r3, #0
 8014348:	1880      	adds	r0, r0, r2
 801434a:	4159      	adcs	r1, r3
 801434c:	6020      	str	r0, [r4, #0]
 801434e:	6061      	str	r1, [r4, #4]
 8014350:	0048      	lsls	r0, r1, #1
 8014352:	0840      	lsrs	r0, r0, #1
 8014354:	bd10      	pop	{r4, pc}
 8014356:	46c0      	nop			; (mov r8, r8)
 8014358:	20000138 	.word	0x20000138
 801435c:	4c957f2d 	.word	0x4c957f2d
 8014360:	5851f42d 	.word	0x5851f42d

08014364 <realloc>:
 8014364:	b510      	push	{r4, lr}
 8014366:	4b03      	ldr	r3, [pc, #12]	; (8014374 <realloc+0x10>)
 8014368:	000a      	movs	r2, r1
 801436a:	0001      	movs	r1, r0
 801436c:	6818      	ldr	r0, [r3, #0]
 801436e:	f000 f803 	bl	8014378 <_realloc_r>
 8014372:	bd10      	pop	{r4, pc}
 8014374:	20000138 	.word	0x20000138

08014378 <_realloc_r>:
 8014378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801437a:	b087      	sub	sp, #28
 801437c:	9003      	str	r0, [sp, #12]
 801437e:	1e0c      	subs	r4, r1, #0
 8014380:	9205      	str	r2, [sp, #20]
 8014382:	d106      	bne.n	8014392 <_realloc_r+0x1a>
 8014384:	0011      	movs	r1, r2
 8014386:	f7ff fd79 	bl	8013e7c <_malloc_r>
 801438a:	0007      	movs	r7, r0
 801438c:	0038      	movs	r0, r7
 801438e:	b007      	add	sp, #28
 8014390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014392:	9803      	ldr	r0, [sp, #12]
 8014394:	f7ff ffbc 	bl	8014310 <__malloc_lock>
 8014398:	0023      	movs	r3, r4
 801439a:	3b08      	subs	r3, #8
 801439c:	685f      	ldr	r7, [r3, #4]
 801439e:	9302      	str	r3, [sp, #8]
 80143a0:	003a      	movs	r2, r7
 80143a2:	2303      	movs	r3, #3
 80143a4:	9e05      	ldr	r6, [sp, #20]
 80143a6:	439a      	bics	r2, r3
 80143a8:	360b      	adds	r6, #11
 80143aa:	9204      	str	r2, [sp, #16]
 80143ac:	2e16      	cmp	r6, #22
 80143ae:	d908      	bls.n	80143c2 <_realloc_r+0x4a>
 80143b0:	3304      	adds	r3, #4
 80143b2:	439e      	bics	r6, r3
 80143b4:	9601      	str	r6, [sp, #4]
 80143b6:	d506      	bpl.n	80143c6 <_realloc_r+0x4e>
 80143b8:	230c      	movs	r3, #12
 80143ba:	9a03      	ldr	r2, [sp, #12]
 80143bc:	2700      	movs	r7, #0
 80143be:	6013      	str	r3, [r2, #0]
 80143c0:	e7e4      	b.n	801438c <_realloc_r+0x14>
 80143c2:	2310      	movs	r3, #16
 80143c4:	9301      	str	r3, [sp, #4]
 80143c6:	9b01      	ldr	r3, [sp, #4]
 80143c8:	9a05      	ldr	r2, [sp, #20]
 80143ca:	4293      	cmp	r3, r2
 80143cc:	d3f4      	bcc.n	80143b8 <_realloc_r+0x40>
 80143ce:	9b01      	ldr	r3, [sp, #4]
 80143d0:	9a04      	ldr	r2, [sp, #16]
 80143d2:	4293      	cmp	r3, r2
 80143d4:	dc00      	bgt.n	80143d8 <_realloc_r+0x60>
 80143d6:	e16f      	b.n	80146b8 <_realloc_r+0x340>
 80143d8:	9b02      	ldr	r3, [sp, #8]
 80143da:	48bc      	ldr	r0, [pc, #752]	; (80146cc <_realloc_r+0x354>)
 80143dc:	189b      	adds	r3, r3, r2
 80143de:	6882      	ldr	r2, [r0, #8]
 80143e0:	4694      	mov	ip, r2
 80143e2:	685a      	ldr	r2, [r3, #4]
 80143e4:	459c      	cmp	ip, r3
 80143e6:	d006      	beq.n	80143f6 <_realloc_r+0x7e>
 80143e8:	2501      	movs	r5, #1
 80143ea:	0011      	movs	r1, r2
 80143ec:	43a9      	bics	r1, r5
 80143ee:	1859      	adds	r1, r3, r1
 80143f0:	6849      	ldr	r1, [r1, #4]
 80143f2:	4229      	tst	r1, r5
 80143f4:	d146      	bne.n	8014484 <_realloc_r+0x10c>
 80143f6:	2103      	movs	r1, #3
 80143f8:	438a      	bics	r2, r1
 80143fa:	9904      	ldr	r1, [sp, #16]
 80143fc:	188e      	adds	r6, r1, r2
 80143fe:	9901      	ldr	r1, [sp, #4]
 8014400:	459c      	cmp	ip, r3
 8014402:	d117      	bne.n	8014434 <_realloc_r+0xbc>
 8014404:	3110      	adds	r1, #16
 8014406:	42b1      	cmp	r1, r6
 8014408:	dc3e      	bgt.n	8014488 <_realloc_r+0x110>
 801440a:	9901      	ldr	r1, [sp, #4]
 801440c:	9b02      	ldr	r3, [sp, #8]
 801440e:	468c      	mov	ip, r1
 8014410:	4463      	add	r3, ip
 8014412:	6083      	str	r3, [r0, #8]
 8014414:	001a      	movs	r2, r3
 8014416:	1a73      	subs	r3, r6, r1
 8014418:	2601      	movs	r6, #1
 801441a:	4333      	orrs	r3, r6
 801441c:	6053      	str	r3, [r2, #4]
 801441e:	0023      	movs	r3, r4
 8014420:	3b08      	subs	r3, #8
 8014422:	685a      	ldr	r2, [r3, #4]
 8014424:	9803      	ldr	r0, [sp, #12]
 8014426:	4016      	ands	r6, r2
 8014428:	430e      	orrs	r6, r1
 801442a:	605e      	str	r6, [r3, #4]
 801442c:	f7ff ff78 	bl	8014320 <__malloc_unlock>
 8014430:	0027      	movs	r7, r4
 8014432:	e7ab      	b.n	801438c <_realloc_r+0x14>
 8014434:	42b1      	cmp	r1, r6
 8014436:	dc27      	bgt.n	8014488 <_realloc_r+0x110>
 8014438:	68da      	ldr	r2, [r3, #12]
 801443a:	689b      	ldr	r3, [r3, #8]
 801443c:	60da      	str	r2, [r3, #12]
 801443e:	6093      	str	r3, [r2, #8]
 8014440:	9b01      	ldr	r3, [sp, #4]
 8014442:	9a02      	ldr	r2, [sp, #8]
 8014444:	1af4      	subs	r4, r6, r3
 8014446:	9b02      	ldr	r3, [sp, #8]
 8014448:	1992      	adds	r2, r2, r6
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	9304      	str	r3, [sp, #16]
 801444e:	2301      	movs	r3, #1
 8014450:	9804      	ldr	r0, [sp, #16]
 8014452:	4018      	ands	r0, r3
 8014454:	2c0f      	cmp	r4, #15
 8014456:	d800      	bhi.n	801445a <_realloc_r+0xe2>
 8014458:	e130      	b.n	80146bc <_realloc_r+0x344>
 801445a:	9d01      	ldr	r5, [sp, #4]
 801445c:	9902      	ldr	r1, [sp, #8]
 801445e:	4328      	orrs	r0, r5
 8014460:	1949      	adds	r1, r1, r5
 8014462:	9d02      	ldr	r5, [sp, #8]
 8014464:	431c      	orrs	r4, r3
 8014466:	6068      	str	r0, [r5, #4]
 8014468:	604c      	str	r4, [r1, #4]
 801446a:	6850      	ldr	r0, [r2, #4]
 801446c:	3108      	adds	r1, #8
 801446e:	4303      	orrs	r3, r0
 8014470:	6053      	str	r3, [r2, #4]
 8014472:	9803      	ldr	r0, [sp, #12]
 8014474:	f003 fa40 	bl	80178f8 <_free_r>
 8014478:	9803      	ldr	r0, [sp, #12]
 801447a:	f7ff ff51 	bl	8014320 <__malloc_unlock>
 801447e:	9f02      	ldr	r7, [sp, #8]
 8014480:	3708      	adds	r7, #8
 8014482:	e783      	b.n	801438c <_realloc_r+0x14>
 8014484:	2200      	movs	r2, #0
 8014486:	0013      	movs	r3, r2
 8014488:	07f9      	lsls	r1, r7, #31
 801448a:	d500      	bpl.n	801448e <_realloc_r+0x116>
 801448c:	e0c6      	b.n	801461c <_realloc_r+0x2a4>
 801448e:	0021      	movs	r1, r4
 8014490:	3908      	subs	r1, #8
 8014492:	680d      	ldr	r5, [r1, #0]
 8014494:	9902      	ldr	r1, [sp, #8]
 8014496:	1b4d      	subs	r5, r1, r5
 8014498:	2103      	movs	r1, #3
 801449a:	686f      	ldr	r7, [r5, #4]
 801449c:	438f      	bics	r7, r1
 801449e:	9904      	ldr	r1, [sp, #16]
 80144a0:	187f      	adds	r7, r7, r1
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d100      	bne.n	80144a8 <_realloc_r+0x130>
 80144a6:	e084      	b.n	80145b2 <_realloc_r+0x23a>
 80144a8:	19d6      	adds	r6, r2, r7
 80144aa:	459c      	cmp	ip, r3
 80144ac:	d148      	bne.n	8014540 <_realloc_r+0x1c8>
 80144ae:	9b01      	ldr	r3, [sp, #4]
 80144b0:	3310      	adds	r3, #16
 80144b2:	42b3      	cmp	r3, r6
 80144b4:	dc7d      	bgt.n	80145b2 <_realloc_r+0x23a>
 80144b6:	68aa      	ldr	r2, [r5, #8]
 80144b8:	68eb      	ldr	r3, [r5, #12]
 80144ba:	002f      	movs	r7, r5
 80144bc:	60d3      	str	r3, [r2, #12]
 80144be:	609a      	str	r2, [r3, #8]
 80144c0:	000a      	movs	r2, r1
 80144c2:	3a04      	subs	r2, #4
 80144c4:	3708      	adds	r7, #8
 80144c6:	2a24      	cmp	r2, #36	; 0x24
 80144c8:	d835      	bhi.n	8014536 <_realloc_r+0x1be>
 80144ca:	003b      	movs	r3, r7
 80144cc:	2a13      	cmp	r2, #19
 80144ce:	d908      	bls.n	80144e2 <_realloc_r+0x16a>
 80144d0:	6823      	ldr	r3, [r4, #0]
 80144d2:	60ab      	str	r3, [r5, #8]
 80144d4:	6863      	ldr	r3, [r4, #4]
 80144d6:	60eb      	str	r3, [r5, #12]
 80144d8:	2a1b      	cmp	r2, #27
 80144da:	d81a      	bhi.n	8014512 <_realloc_r+0x19a>
 80144dc:	002b      	movs	r3, r5
 80144de:	3408      	adds	r4, #8
 80144e0:	3310      	adds	r3, #16
 80144e2:	6822      	ldr	r2, [r4, #0]
 80144e4:	601a      	str	r2, [r3, #0]
 80144e6:	6862      	ldr	r2, [r4, #4]
 80144e8:	605a      	str	r2, [r3, #4]
 80144ea:	68a2      	ldr	r2, [r4, #8]
 80144ec:	609a      	str	r2, [r3, #8]
 80144ee:	9b01      	ldr	r3, [sp, #4]
 80144f0:	18ea      	adds	r2, r5, r3
 80144f2:	4b76      	ldr	r3, [pc, #472]	; (80146cc <_realloc_r+0x354>)
 80144f4:	609a      	str	r2, [r3, #8]
 80144f6:	9b01      	ldr	r3, [sp, #4]
 80144f8:	1af3      	subs	r3, r6, r3
 80144fa:	2601      	movs	r6, #1
 80144fc:	4333      	orrs	r3, r6
 80144fe:	6053      	str	r3, [r2, #4]
 8014500:	686b      	ldr	r3, [r5, #4]
 8014502:	401e      	ands	r6, r3
 8014504:	9b01      	ldr	r3, [sp, #4]
 8014506:	431e      	orrs	r6, r3
 8014508:	606e      	str	r6, [r5, #4]
 801450a:	9803      	ldr	r0, [sp, #12]
 801450c:	f7ff ff08 	bl	8014320 <__malloc_unlock>
 8014510:	e73c      	b.n	801438c <_realloc_r+0x14>
 8014512:	68a3      	ldr	r3, [r4, #8]
 8014514:	612b      	str	r3, [r5, #16]
 8014516:	68e3      	ldr	r3, [r4, #12]
 8014518:	616b      	str	r3, [r5, #20]
 801451a:	2a24      	cmp	r2, #36	; 0x24
 801451c:	d003      	beq.n	8014526 <_realloc_r+0x1ae>
 801451e:	002b      	movs	r3, r5
 8014520:	3410      	adds	r4, #16
 8014522:	3318      	adds	r3, #24
 8014524:	e7dd      	b.n	80144e2 <_realloc_r+0x16a>
 8014526:	6923      	ldr	r3, [r4, #16]
 8014528:	61ab      	str	r3, [r5, #24]
 801452a:	002b      	movs	r3, r5
 801452c:	6962      	ldr	r2, [r4, #20]
 801452e:	3320      	adds	r3, #32
 8014530:	61ea      	str	r2, [r5, #28]
 8014532:	3418      	adds	r4, #24
 8014534:	e7d5      	b.n	80144e2 <_realloc_r+0x16a>
 8014536:	0021      	movs	r1, r4
 8014538:	0038      	movs	r0, r7
 801453a:	f003 fdde 	bl	80180fa <memmove>
 801453e:	e7d6      	b.n	80144ee <_realloc_r+0x176>
 8014540:	9a01      	ldr	r2, [sp, #4]
 8014542:	42b2      	cmp	r2, r6
 8014544:	dc35      	bgt.n	80145b2 <_realloc_r+0x23a>
 8014546:	0028      	movs	r0, r5
 8014548:	68da      	ldr	r2, [r3, #12]
 801454a:	689b      	ldr	r3, [r3, #8]
 801454c:	3008      	adds	r0, #8
 801454e:	60da      	str	r2, [r3, #12]
 8014550:	6093      	str	r3, [r2, #8]
 8014552:	68aa      	ldr	r2, [r5, #8]
 8014554:	68eb      	ldr	r3, [r5, #12]
 8014556:	60d3      	str	r3, [r2, #12]
 8014558:	609a      	str	r2, [r3, #8]
 801455a:	9a04      	ldr	r2, [sp, #16]
 801455c:	3a04      	subs	r2, #4
 801455e:	2a24      	cmp	r2, #36	; 0x24
 8014560:	d823      	bhi.n	80145aa <_realloc_r+0x232>
 8014562:	2a13      	cmp	r2, #19
 8014564:	d907      	bls.n	8014576 <_realloc_r+0x1fe>
 8014566:	6823      	ldr	r3, [r4, #0]
 8014568:	60ab      	str	r3, [r5, #8]
 801456a:	6863      	ldr	r3, [r4, #4]
 801456c:	60eb      	str	r3, [r5, #12]
 801456e:	2a1b      	cmp	r2, #27
 8014570:	d809      	bhi.n	8014586 <_realloc_r+0x20e>
 8014572:	3408      	adds	r4, #8
 8014574:	3008      	adds	r0, #8
 8014576:	6823      	ldr	r3, [r4, #0]
 8014578:	6003      	str	r3, [r0, #0]
 801457a:	6863      	ldr	r3, [r4, #4]
 801457c:	6043      	str	r3, [r0, #4]
 801457e:	68a3      	ldr	r3, [r4, #8]
 8014580:	6083      	str	r3, [r0, #8]
 8014582:	9502      	str	r5, [sp, #8]
 8014584:	e75c      	b.n	8014440 <_realloc_r+0xc8>
 8014586:	68a3      	ldr	r3, [r4, #8]
 8014588:	612b      	str	r3, [r5, #16]
 801458a:	68e3      	ldr	r3, [r4, #12]
 801458c:	616b      	str	r3, [r5, #20]
 801458e:	2a24      	cmp	r2, #36	; 0x24
 8014590:	d003      	beq.n	801459a <_realloc_r+0x222>
 8014592:	0028      	movs	r0, r5
 8014594:	3410      	adds	r4, #16
 8014596:	3018      	adds	r0, #24
 8014598:	e7ed      	b.n	8014576 <_realloc_r+0x1fe>
 801459a:	0028      	movs	r0, r5
 801459c:	6923      	ldr	r3, [r4, #16]
 801459e:	3020      	adds	r0, #32
 80145a0:	61ab      	str	r3, [r5, #24]
 80145a2:	6963      	ldr	r3, [r4, #20]
 80145a4:	3418      	adds	r4, #24
 80145a6:	61eb      	str	r3, [r5, #28]
 80145a8:	e7e5      	b.n	8014576 <_realloc_r+0x1fe>
 80145aa:	0021      	movs	r1, r4
 80145ac:	f003 fda5 	bl	80180fa <memmove>
 80145b0:	e7e7      	b.n	8014582 <_realloc_r+0x20a>
 80145b2:	9b01      	ldr	r3, [sp, #4]
 80145b4:	42bb      	cmp	r3, r7
 80145b6:	dc31      	bgt.n	801461c <_realloc_r+0x2a4>
 80145b8:	0028      	movs	r0, r5
 80145ba:	68aa      	ldr	r2, [r5, #8]
 80145bc:	68eb      	ldr	r3, [r5, #12]
 80145be:	3008      	adds	r0, #8
 80145c0:	60d3      	str	r3, [r2, #12]
 80145c2:	609a      	str	r2, [r3, #8]
 80145c4:	9a04      	ldr	r2, [sp, #16]
 80145c6:	3a04      	subs	r2, #4
 80145c8:	2a24      	cmp	r2, #36	; 0x24
 80145ca:	d823      	bhi.n	8014614 <_realloc_r+0x29c>
 80145cc:	2a13      	cmp	r2, #19
 80145ce:	d907      	bls.n	80145e0 <_realloc_r+0x268>
 80145d0:	6823      	ldr	r3, [r4, #0]
 80145d2:	60ab      	str	r3, [r5, #8]
 80145d4:	6863      	ldr	r3, [r4, #4]
 80145d6:	60eb      	str	r3, [r5, #12]
 80145d8:	2a1b      	cmp	r2, #27
 80145da:	d809      	bhi.n	80145f0 <_realloc_r+0x278>
 80145dc:	3408      	adds	r4, #8
 80145de:	3008      	adds	r0, #8
 80145e0:	6823      	ldr	r3, [r4, #0]
 80145e2:	6003      	str	r3, [r0, #0]
 80145e4:	6863      	ldr	r3, [r4, #4]
 80145e6:	6043      	str	r3, [r0, #4]
 80145e8:	68a3      	ldr	r3, [r4, #8]
 80145ea:	6083      	str	r3, [r0, #8]
 80145ec:	003e      	movs	r6, r7
 80145ee:	e7c8      	b.n	8014582 <_realloc_r+0x20a>
 80145f0:	68a3      	ldr	r3, [r4, #8]
 80145f2:	612b      	str	r3, [r5, #16]
 80145f4:	68e3      	ldr	r3, [r4, #12]
 80145f6:	616b      	str	r3, [r5, #20]
 80145f8:	2a24      	cmp	r2, #36	; 0x24
 80145fa:	d003      	beq.n	8014604 <_realloc_r+0x28c>
 80145fc:	0028      	movs	r0, r5
 80145fe:	3410      	adds	r4, #16
 8014600:	3018      	adds	r0, #24
 8014602:	e7ed      	b.n	80145e0 <_realloc_r+0x268>
 8014604:	0028      	movs	r0, r5
 8014606:	6923      	ldr	r3, [r4, #16]
 8014608:	3020      	adds	r0, #32
 801460a:	61ab      	str	r3, [r5, #24]
 801460c:	6963      	ldr	r3, [r4, #20]
 801460e:	3418      	adds	r4, #24
 8014610:	61eb      	str	r3, [r5, #28]
 8014612:	e7e5      	b.n	80145e0 <_realloc_r+0x268>
 8014614:	0021      	movs	r1, r4
 8014616:	f003 fd70 	bl	80180fa <memmove>
 801461a:	e7e7      	b.n	80145ec <_realloc_r+0x274>
 801461c:	9905      	ldr	r1, [sp, #20]
 801461e:	9803      	ldr	r0, [sp, #12]
 8014620:	f7ff fc2c 	bl	8013e7c <_malloc_r>
 8014624:	1e07      	subs	r7, r0, #0
 8014626:	d100      	bne.n	801462a <_realloc_r+0x2b2>
 8014628:	e76f      	b.n	801450a <_realloc_r+0x192>
 801462a:	0023      	movs	r3, r4
 801462c:	2201      	movs	r2, #1
 801462e:	3b08      	subs	r3, #8
 8014630:	685b      	ldr	r3, [r3, #4]
 8014632:	4393      	bics	r3, r2
 8014634:	9a02      	ldr	r2, [sp, #8]
 8014636:	18d3      	adds	r3, r2, r3
 8014638:	0002      	movs	r2, r0
 801463a:	3a08      	subs	r2, #8
 801463c:	4293      	cmp	r3, r2
 801463e:	d105      	bne.n	801464c <_realloc_r+0x2d4>
 8014640:	685e      	ldr	r6, [r3, #4]
 8014642:	2303      	movs	r3, #3
 8014644:	439e      	bics	r6, r3
 8014646:	9b04      	ldr	r3, [sp, #16]
 8014648:	18f6      	adds	r6, r6, r3
 801464a:	e6f9      	b.n	8014440 <_realloc_r+0xc8>
 801464c:	9a04      	ldr	r2, [sp, #16]
 801464e:	3a04      	subs	r2, #4
 8014650:	2a24      	cmp	r2, #36	; 0x24
 8014652:	d82d      	bhi.n	80146b0 <_realloc_r+0x338>
 8014654:	2a13      	cmp	r2, #19
 8014656:	d928      	bls.n	80146aa <_realloc_r+0x332>
 8014658:	6823      	ldr	r3, [r4, #0]
 801465a:	6003      	str	r3, [r0, #0]
 801465c:	6863      	ldr	r3, [r4, #4]
 801465e:	6043      	str	r3, [r0, #4]
 8014660:	2a1b      	cmp	r2, #27
 8014662:	d80e      	bhi.n	8014682 <_realloc_r+0x30a>
 8014664:	0022      	movs	r2, r4
 8014666:	0003      	movs	r3, r0
 8014668:	3208      	adds	r2, #8
 801466a:	3308      	adds	r3, #8
 801466c:	6811      	ldr	r1, [r2, #0]
 801466e:	6019      	str	r1, [r3, #0]
 8014670:	6851      	ldr	r1, [r2, #4]
 8014672:	6059      	str	r1, [r3, #4]
 8014674:	6892      	ldr	r2, [r2, #8]
 8014676:	609a      	str	r2, [r3, #8]
 8014678:	0021      	movs	r1, r4
 801467a:	9803      	ldr	r0, [sp, #12]
 801467c:	f003 f93c 	bl	80178f8 <_free_r>
 8014680:	e743      	b.n	801450a <_realloc_r+0x192>
 8014682:	68a3      	ldr	r3, [r4, #8]
 8014684:	6083      	str	r3, [r0, #8]
 8014686:	68e3      	ldr	r3, [r4, #12]
 8014688:	60c3      	str	r3, [r0, #12]
 801468a:	2a24      	cmp	r2, #36	; 0x24
 801468c:	d004      	beq.n	8014698 <_realloc_r+0x320>
 801468e:	0022      	movs	r2, r4
 8014690:	0003      	movs	r3, r0
 8014692:	3210      	adds	r2, #16
 8014694:	3310      	adds	r3, #16
 8014696:	e7e9      	b.n	801466c <_realloc_r+0x2f4>
 8014698:	6923      	ldr	r3, [r4, #16]
 801469a:	0022      	movs	r2, r4
 801469c:	6103      	str	r3, [r0, #16]
 801469e:	0003      	movs	r3, r0
 80146a0:	6961      	ldr	r1, [r4, #20]
 80146a2:	3218      	adds	r2, #24
 80146a4:	3318      	adds	r3, #24
 80146a6:	6141      	str	r1, [r0, #20]
 80146a8:	e7e0      	b.n	801466c <_realloc_r+0x2f4>
 80146aa:	0003      	movs	r3, r0
 80146ac:	0022      	movs	r2, r4
 80146ae:	e7dd      	b.n	801466c <_realloc_r+0x2f4>
 80146b0:	0021      	movs	r1, r4
 80146b2:	f003 fd22 	bl	80180fa <memmove>
 80146b6:	e7df      	b.n	8014678 <_realloc_r+0x300>
 80146b8:	9e04      	ldr	r6, [sp, #16]
 80146ba:	e6c1      	b.n	8014440 <_realloc_r+0xc8>
 80146bc:	9902      	ldr	r1, [sp, #8]
 80146be:	4306      	orrs	r6, r0
 80146c0:	604e      	str	r6, [r1, #4]
 80146c2:	6851      	ldr	r1, [r2, #4]
 80146c4:	430b      	orrs	r3, r1
 80146c6:	6053      	str	r3, [r2, #4]
 80146c8:	e6d6      	b.n	8014478 <_realloc_r+0x100>
 80146ca:	46c0      	nop			; (mov r8, r8)
 80146cc:	200006d4 	.word	0x200006d4

080146d0 <_sbrk_r>:
 80146d0:	2300      	movs	r3, #0
 80146d2:	b570      	push	{r4, r5, r6, lr}
 80146d4:	4c06      	ldr	r4, [pc, #24]	; (80146f0 <_sbrk_r+0x20>)
 80146d6:	0005      	movs	r5, r0
 80146d8:	0008      	movs	r0, r1
 80146da:	6023      	str	r3, [r4, #0]
 80146dc:	f004 fa1e 	bl	8018b1c <_sbrk>
 80146e0:	1c43      	adds	r3, r0, #1
 80146e2:	d103      	bne.n	80146ec <_sbrk_r+0x1c>
 80146e4:	6823      	ldr	r3, [r4, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d000      	beq.n	80146ec <_sbrk_r+0x1c>
 80146ea:	602b      	str	r3, [r5, #0]
 80146ec:	bd70      	pop	{r4, r5, r6, pc}
 80146ee:	46c0      	nop			; (mov r8, r8)
 80146f0:	20006f24 	.word	0x20006f24

080146f4 <snprintf>:
 80146f4:	b40c      	push	{r2, r3}
 80146f6:	b530      	push	{r4, r5, lr}
 80146f8:	4b16      	ldr	r3, [pc, #88]	; (8014754 <snprintf+0x60>)
 80146fa:	b09d      	sub	sp, #116	; 0x74
 80146fc:	1e0c      	subs	r4, r1, #0
 80146fe:	681d      	ldr	r5, [r3, #0]
 8014700:	da08      	bge.n	8014714 <snprintf+0x20>
 8014702:	238b      	movs	r3, #139	; 0x8b
 8014704:	2001      	movs	r0, #1
 8014706:	602b      	str	r3, [r5, #0]
 8014708:	4240      	negs	r0, r0
 801470a:	b01d      	add	sp, #116	; 0x74
 801470c:	bc30      	pop	{r4, r5}
 801470e:	bc08      	pop	{r3}
 8014710:	b002      	add	sp, #8
 8014712:	4718      	bx	r3
 8014714:	2382      	movs	r3, #130	; 0x82
 8014716:	a902      	add	r1, sp, #8
 8014718:	009b      	lsls	r3, r3, #2
 801471a:	818b      	strh	r3, [r1, #12]
 801471c:	2300      	movs	r3, #0
 801471e:	9002      	str	r0, [sp, #8]
 8014720:	6108      	str	r0, [r1, #16]
 8014722:	429c      	cmp	r4, r3
 8014724:	d000      	beq.n	8014728 <snprintf+0x34>
 8014726:	1e63      	subs	r3, r4, #1
 8014728:	608b      	str	r3, [r1, #8]
 801472a:	614b      	str	r3, [r1, #20]
 801472c:	2301      	movs	r3, #1
 801472e:	425b      	negs	r3, r3
 8014730:	81cb      	strh	r3, [r1, #14]
 8014732:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014734:	ab21      	add	r3, sp, #132	; 0x84
 8014736:	0028      	movs	r0, r5
 8014738:	9301      	str	r3, [sp, #4]
 801473a:	f000 ff97 	bl	801566c <_svfprintf_r>
 801473e:	1c43      	adds	r3, r0, #1
 8014740:	da01      	bge.n	8014746 <snprintf+0x52>
 8014742:	238b      	movs	r3, #139	; 0x8b
 8014744:	602b      	str	r3, [r5, #0]
 8014746:	2c00      	cmp	r4, #0
 8014748:	d0df      	beq.n	801470a <snprintf+0x16>
 801474a:	2300      	movs	r3, #0
 801474c:	9a02      	ldr	r2, [sp, #8]
 801474e:	7013      	strb	r3, [r2, #0]
 8014750:	e7db      	b.n	801470a <snprintf+0x16>
 8014752:	46c0      	nop			; (mov r8, r8)
 8014754:	20000138 	.word	0x20000138

08014758 <sprintf>:
 8014758:	b40e      	push	{r1, r2, r3}
 801475a:	b500      	push	{lr}
 801475c:	490b      	ldr	r1, [pc, #44]	; (801478c <sprintf+0x34>)
 801475e:	b09c      	sub	sp, #112	; 0x70
 8014760:	ab1d      	add	r3, sp, #116	; 0x74
 8014762:	9002      	str	r0, [sp, #8]
 8014764:	9006      	str	r0, [sp, #24]
 8014766:	9107      	str	r1, [sp, #28]
 8014768:	9104      	str	r1, [sp, #16]
 801476a:	4809      	ldr	r0, [pc, #36]	; (8014790 <sprintf+0x38>)
 801476c:	4909      	ldr	r1, [pc, #36]	; (8014794 <sprintf+0x3c>)
 801476e:	cb04      	ldmia	r3!, {r2}
 8014770:	9105      	str	r1, [sp, #20]
 8014772:	6800      	ldr	r0, [r0, #0]
 8014774:	a902      	add	r1, sp, #8
 8014776:	9301      	str	r3, [sp, #4]
 8014778:	f000 ff78 	bl	801566c <_svfprintf_r>
 801477c:	2300      	movs	r3, #0
 801477e:	9a02      	ldr	r2, [sp, #8]
 8014780:	7013      	strb	r3, [r2, #0]
 8014782:	b01c      	add	sp, #112	; 0x70
 8014784:	bc08      	pop	{r3}
 8014786:	b003      	add	sp, #12
 8014788:	4718      	bx	r3
 801478a:	46c0      	nop			; (mov r8, r8)
 801478c:	7fffffff 	.word	0x7fffffff
 8014790:	20000138 	.word	0x20000138
 8014794:	ffff0208 	.word	0xffff0208

08014798 <strcat>:
 8014798:	0002      	movs	r2, r0
 801479a:	b510      	push	{r4, lr}
 801479c:	7813      	ldrb	r3, [r2, #0]
 801479e:	1c54      	adds	r4, r2, #1
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d105      	bne.n	80147b0 <strcat+0x18>
 80147a4:	5ccc      	ldrb	r4, [r1, r3]
 80147a6:	54d4      	strb	r4, [r2, r3]
 80147a8:	3301      	adds	r3, #1
 80147aa:	2c00      	cmp	r4, #0
 80147ac:	d1fa      	bne.n	80147a4 <strcat+0xc>
 80147ae:	bd10      	pop	{r4, pc}
 80147b0:	0022      	movs	r2, r4
 80147b2:	e7f3      	b.n	801479c <strcat+0x4>

080147b4 <strchr>:
 80147b4:	b2c9      	uxtb	r1, r1
 80147b6:	7803      	ldrb	r3, [r0, #0]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d004      	beq.n	80147c6 <strchr+0x12>
 80147bc:	428b      	cmp	r3, r1
 80147be:	d100      	bne.n	80147c2 <strchr+0xe>
 80147c0:	4770      	bx	lr
 80147c2:	3001      	adds	r0, #1
 80147c4:	e7f7      	b.n	80147b6 <strchr+0x2>
 80147c6:	424b      	negs	r3, r1
 80147c8:	4159      	adcs	r1, r3
 80147ca:	4249      	negs	r1, r1
 80147cc:	4008      	ands	r0, r1
 80147ce:	e7f7      	b.n	80147c0 <strchr+0xc>

080147d0 <strcpy>:
 80147d0:	0003      	movs	r3, r0
 80147d2:	780a      	ldrb	r2, [r1, #0]
 80147d4:	3101      	adds	r1, #1
 80147d6:	701a      	strb	r2, [r3, #0]
 80147d8:	3301      	adds	r3, #1
 80147da:	2a00      	cmp	r2, #0
 80147dc:	d1f9      	bne.n	80147d2 <strcpy+0x2>
 80147de:	4770      	bx	lr

080147e0 <strncmp>:
 80147e0:	2300      	movs	r3, #0
 80147e2:	b530      	push	{r4, r5, lr}
 80147e4:	429a      	cmp	r2, r3
 80147e6:	d00a      	beq.n	80147fe <strncmp+0x1e>
 80147e8:	3a01      	subs	r2, #1
 80147ea:	5cc4      	ldrb	r4, [r0, r3]
 80147ec:	5ccd      	ldrb	r5, [r1, r3]
 80147ee:	42ac      	cmp	r4, r5
 80147f0:	d104      	bne.n	80147fc <strncmp+0x1c>
 80147f2:	4293      	cmp	r3, r2
 80147f4:	d002      	beq.n	80147fc <strncmp+0x1c>
 80147f6:	3301      	adds	r3, #1
 80147f8:	2c00      	cmp	r4, #0
 80147fa:	d1f6      	bne.n	80147ea <strncmp+0xa>
 80147fc:	1b63      	subs	r3, r4, r5
 80147fe:	0018      	movs	r0, r3
 8014800:	bd30      	pop	{r4, r5, pc}

08014802 <strncpy>:
 8014802:	b530      	push	{r4, r5, lr}
 8014804:	0005      	movs	r5, r0
 8014806:	2a00      	cmp	r2, #0
 8014808:	d100      	bne.n	801480c <strncpy+0xa>
 801480a:	bd30      	pop	{r4, r5, pc}
 801480c:	780c      	ldrb	r4, [r1, #0]
 801480e:	3a01      	subs	r2, #1
 8014810:	1c6b      	adds	r3, r5, #1
 8014812:	702c      	strb	r4, [r5, #0]
 8014814:	3101      	adds	r1, #1
 8014816:	2c00      	cmp	r4, #0
 8014818:	d105      	bne.n	8014826 <strncpy+0x24>
 801481a:	189a      	adds	r2, r3, r2
 801481c:	429a      	cmp	r2, r3
 801481e:	d0f4      	beq.n	801480a <strncpy+0x8>
 8014820:	701c      	strb	r4, [r3, #0]
 8014822:	3301      	adds	r3, #1
 8014824:	e7fa      	b.n	801481c <strncpy+0x1a>
 8014826:	001d      	movs	r5, r3
 8014828:	e7ed      	b.n	8014806 <strncpy+0x4>
	...

0801482c <sulp>:
 801482c:	b570      	push	{r4, r5, r6, lr}
 801482e:	0016      	movs	r6, r2
 8014830:	000d      	movs	r5, r1
 8014832:	f003 ff17 	bl	8018664 <__ulp>
 8014836:	2e00      	cmp	r6, #0
 8014838:	d00d      	beq.n	8014856 <sulp+0x2a>
 801483a:	236b      	movs	r3, #107	; 0x6b
 801483c:	006a      	lsls	r2, r5, #1
 801483e:	0d52      	lsrs	r2, r2, #21
 8014840:	1a9b      	subs	r3, r3, r2
 8014842:	2b00      	cmp	r3, #0
 8014844:	dd07      	ble.n	8014856 <sulp+0x2a>
 8014846:	2400      	movs	r4, #0
 8014848:	4a03      	ldr	r2, [pc, #12]	; (8014858 <sulp+0x2c>)
 801484a:	051b      	lsls	r3, r3, #20
 801484c:	189d      	adds	r5, r3, r2
 801484e:	002b      	movs	r3, r5
 8014850:	0022      	movs	r2, r4
 8014852:	f7ed fc09 	bl	8002068 <__aeabi_dmul>
 8014856:	bd70      	pop	{r4, r5, r6, pc}
 8014858:	3ff00000 	.word	0x3ff00000

0801485c <_strtod_l>:
 801485c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801485e:	b0a7      	sub	sp, #156	; 0x9c
 8014860:	9307      	str	r3, [sp, #28]
 8014862:	2300      	movs	r3, #0
 8014864:	9004      	str	r0, [sp, #16]
 8014866:	9807      	ldr	r0, [sp, #28]
 8014868:	9322      	str	r3, [sp, #136]	; 0x88
 801486a:	9106      	str	r1, [sp, #24]
 801486c:	921d      	str	r2, [sp, #116]	; 0x74
 801486e:	f003 fc28 	bl	80180c2 <__localeconv_l>
 8014872:	0005      	movs	r5, r0
 8014874:	6800      	ldr	r0, [r0, #0]
 8014876:	f7eb fc4f 	bl	8000118 <strlen>
 801487a:	2600      	movs	r6, #0
 801487c:	2700      	movs	r7, #0
 801487e:	9b06      	ldr	r3, [sp, #24]
 8014880:	9005      	str	r0, [sp, #20]
 8014882:	9321      	str	r3, [sp, #132]	; 0x84
 8014884:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014886:	781a      	ldrb	r2, [r3, #0]
 8014888:	2a0d      	cmp	r2, #13
 801488a:	d839      	bhi.n	8014900 <_strtod_l+0xa4>
 801488c:	2a09      	cmp	r2, #9
 801488e:	d23d      	bcs.n	801490c <_strtod_l+0xb0>
 8014890:	2a00      	cmp	r2, #0
 8014892:	d044      	beq.n	801491e <_strtod_l+0xc2>
 8014894:	2300      	movs	r3, #0
 8014896:	9313      	str	r3, [sp, #76]	; 0x4c
 8014898:	2200      	movs	r2, #0
 801489a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801489c:	920c      	str	r2, [sp, #48]	; 0x30
 801489e:	7823      	ldrb	r3, [r4, #0]
 80148a0:	2b30      	cmp	r3, #48	; 0x30
 80148a2:	d000      	beq.n	80148a6 <_strtod_l+0x4a>
 80148a4:	e07e      	b.n	80149a4 <_strtod_l+0x148>
 80148a6:	7863      	ldrb	r3, [r4, #1]
 80148a8:	2b58      	cmp	r3, #88	; 0x58
 80148aa:	d002      	beq.n	80148b2 <_strtod_l+0x56>
 80148ac:	2b78      	cmp	r3, #120	; 0x78
 80148ae:	d000      	beq.n	80148b2 <_strtod_l+0x56>
 80148b0:	e06e      	b.n	8014990 <_strtod_l+0x134>
 80148b2:	9b07      	ldr	r3, [sp, #28]
 80148b4:	4a96      	ldr	r2, [pc, #600]	; (8014b10 <_strtod_l+0x2b4>)
 80148b6:	9302      	str	r3, [sp, #8]
 80148b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80148ba:	a921      	add	r1, sp, #132	; 0x84
 80148bc:	9301      	str	r3, [sp, #4]
 80148be:	ab22      	add	r3, sp, #136	; 0x88
 80148c0:	9300      	str	r3, [sp, #0]
 80148c2:	9804      	ldr	r0, [sp, #16]
 80148c4:	ab23      	add	r3, sp, #140	; 0x8c
 80148c6:	f003 f914 	bl	8017af2 <__gethex>
 80148ca:	2507      	movs	r5, #7
 80148cc:	9005      	str	r0, [sp, #20]
 80148ce:	4005      	ands	r5, r0
 80148d0:	d005      	beq.n	80148de <_strtod_l+0x82>
 80148d2:	2d06      	cmp	r5, #6
 80148d4:	d12f      	bne.n	8014936 <_strtod_l+0xda>
 80148d6:	2300      	movs	r3, #0
 80148d8:	3401      	adds	r4, #1
 80148da:	9421      	str	r4, [sp, #132]	; 0x84
 80148dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80148de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d002      	beq.n	80148ea <_strtod_l+0x8e>
 80148e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80148e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80148e8:	601a      	str	r2, [r3, #0]
 80148ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d01d      	beq.n	801492c <_strtod_l+0xd0>
 80148f0:	2380      	movs	r3, #128	; 0x80
 80148f2:	0032      	movs	r2, r6
 80148f4:	061b      	lsls	r3, r3, #24
 80148f6:	18fb      	adds	r3, r7, r3
 80148f8:	0010      	movs	r0, r2
 80148fa:	0019      	movs	r1, r3
 80148fc:	b027      	add	sp, #156	; 0x9c
 80148fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014900:	2a2b      	cmp	r2, #43	; 0x2b
 8014902:	d016      	beq.n	8014932 <_strtod_l+0xd6>
 8014904:	2a2d      	cmp	r2, #45	; 0x2d
 8014906:	d003      	beq.n	8014910 <_strtod_l+0xb4>
 8014908:	2a20      	cmp	r2, #32
 801490a:	d1c3      	bne.n	8014894 <_strtod_l+0x38>
 801490c:	3301      	adds	r3, #1
 801490e:	e7b8      	b.n	8014882 <_strtod_l+0x26>
 8014910:	2201      	movs	r2, #1
 8014912:	9213      	str	r2, [sp, #76]	; 0x4c
 8014914:	1c5a      	adds	r2, r3, #1
 8014916:	9221      	str	r2, [sp, #132]	; 0x84
 8014918:	785b      	ldrb	r3, [r3, #1]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d1bc      	bne.n	8014898 <_strtod_l+0x3c>
 801491e:	9b06      	ldr	r3, [sp, #24]
 8014920:	9321      	str	r3, [sp, #132]	; 0x84
 8014922:	2300      	movs	r3, #0
 8014924:	9313      	str	r3, [sp, #76]	; 0x4c
 8014926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014928:	2b00      	cmp	r3, #0
 801492a:	d1db      	bne.n	80148e4 <_strtod_l+0x88>
 801492c:	0032      	movs	r2, r6
 801492e:	003b      	movs	r3, r7
 8014930:	e7e2      	b.n	80148f8 <_strtod_l+0x9c>
 8014932:	2200      	movs	r2, #0
 8014934:	e7ed      	b.n	8014912 <_strtod_l+0xb6>
 8014936:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014938:	2a00      	cmp	r2, #0
 801493a:	d007      	beq.n	801494c <_strtod_l+0xf0>
 801493c:	2135      	movs	r1, #53	; 0x35
 801493e:	a824      	add	r0, sp, #144	; 0x90
 8014940:	f003 ff7d 	bl	801883e <__copybits>
 8014944:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014946:	9804      	ldr	r0, [sp, #16]
 8014948:	f003 fc12 	bl	8018170 <_Bfree>
 801494c:	1e68      	subs	r0, r5, #1
 801494e:	2804      	cmp	r0, #4
 8014950:	d806      	bhi.n	8014960 <_strtod_l+0x104>
 8014952:	f7eb fbe9 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014956:	030c      	.short	0x030c
 8014958:	1917      	.short	0x1917
 801495a:	0c          	.byte	0x0c
 801495b:	00          	.byte	0x00
 801495c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801495e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8014960:	9b05      	ldr	r3, [sp, #20]
 8014962:	071b      	lsls	r3, r3, #28
 8014964:	d5bb      	bpl.n	80148de <_strtod_l+0x82>
 8014966:	2380      	movs	r3, #128	; 0x80
 8014968:	061b      	lsls	r3, r3, #24
 801496a:	431f      	orrs	r7, r3
 801496c:	e7b7      	b.n	80148de <_strtod_l+0x82>
 801496e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014970:	4a68      	ldr	r2, [pc, #416]	; (8014b14 <_strtod_l+0x2b8>)
 8014972:	4969      	ldr	r1, [pc, #420]	; (8014b18 <_strtod_l+0x2bc>)
 8014974:	401a      	ands	r2, r3
 8014976:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014978:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801497a:	185b      	adds	r3, r3, r1
 801497c:	051b      	lsls	r3, r3, #20
 801497e:	431a      	orrs	r2, r3
 8014980:	0017      	movs	r7, r2
 8014982:	e7ed      	b.n	8014960 <_strtod_l+0x104>
 8014984:	4f65      	ldr	r7, [pc, #404]	; (8014b1c <_strtod_l+0x2c0>)
 8014986:	e7eb      	b.n	8014960 <_strtod_l+0x104>
 8014988:	2601      	movs	r6, #1
 801498a:	4f65      	ldr	r7, [pc, #404]	; (8014b20 <_strtod_l+0x2c4>)
 801498c:	4276      	negs	r6, r6
 801498e:	e7e7      	b.n	8014960 <_strtod_l+0x104>
 8014990:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014992:	1c5a      	adds	r2, r3, #1
 8014994:	9221      	str	r2, [sp, #132]	; 0x84
 8014996:	785b      	ldrb	r3, [r3, #1]
 8014998:	2b30      	cmp	r3, #48	; 0x30
 801499a:	d0f9      	beq.n	8014990 <_strtod_l+0x134>
 801499c:	2b00      	cmp	r3, #0
 801499e:	d09e      	beq.n	80148de <_strtod_l+0x82>
 80149a0:	2301      	movs	r3, #1
 80149a2:	930c      	str	r3, [sp, #48]	; 0x30
 80149a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149a6:	220a      	movs	r2, #10
 80149a8:	9312      	str	r3, [sp, #72]	; 0x48
 80149aa:	2300      	movs	r3, #0
 80149ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80149ae:	9308      	str	r3, [sp, #32]
 80149b0:	930a      	str	r3, [sp, #40]	; 0x28
 80149b2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80149b4:	7804      	ldrb	r4, [r0, #0]
 80149b6:	0023      	movs	r3, r4
 80149b8:	3b30      	subs	r3, #48	; 0x30
 80149ba:	b2d9      	uxtb	r1, r3
 80149bc:	2909      	cmp	r1, #9
 80149be:	d934      	bls.n	8014a2a <_strtod_l+0x1ce>
 80149c0:	9a05      	ldr	r2, [sp, #20]
 80149c2:	6829      	ldr	r1, [r5, #0]
 80149c4:	f7ff ff0c 	bl	80147e0 <strncmp>
 80149c8:	2800      	cmp	r0, #0
 80149ca:	d040      	beq.n	8014a4e <_strtod_l+0x1f2>
 80149cc:	2000      	movs	r0, #0
 80149ce:	0023      	movs	r3, r4
 80149d0:	4684      	mov	ip, r0
 80149d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149d4:	9007      	str	r0, [sp, #28]
 80149d6:	9205      	str	r2, [sp, #20]
 80149d8:	2220      	movs	r2, #32
 80149da:	0019      	movs	r1, r3
 80149dc:	4391      	bics	r1, r2
 80149de:	000a      	movs	r2, r1
 80149e0:	2100      	movs	r1, #0
 80149e2:	2a45      	cmp	r2, #69	; 0x45
 80149e4:	d000      	beq.n	80149e8 <_strtod_l+0x18c>
 80149e6:	e0bf      	b.n	8014b68 <_strtod_l+0x30c>
 80149e8:	9b05      	ldr	r3, [sp, #20]
 80149ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80149ec:	4303      	orrs	r3, r0
 80149ee:	4313      	orrs	r3, r2
 80149f0:	428b      	cmp	r3, r1
 80149f2:	d094      	beq.n	801491e <_strtod_l+0xc2>
 80149f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149f6:	9306      	str	r3, [sp, #24]
 80149f8:	3301      	adds	r3, #1
 80149fa:	9321      	str	r3, [sp, #132]	; 0x84
 80149fc:	9b06      	ldr	r3, [sp, #24]
 80149fe:	785b      	ldrb	r3, [r3, #1]
 8014a00:	2b2b      	cmp	r3, #43	; 0x2b
 8014a02:	d100      	bne.n	8014a06 <_strtod_l+0x1aa>
 8014a04:	e082      	b.n	8014b0c <_strtod_l+0x2b0>
 8014a06:	000c      	movs	r4, r1
 8014a08:	2b2d      	cmp	r3, #45	; 0x2d
 8014a0a:	d105      	bne.n	8014a18 <_strtod_l+0x1bc>
 8014a0c:	2401      	movs	r4, #1
 8014a0e:	9b06      	ldr	r3, [sp, #24]
 8014a10:	3302      	adds	r3, #2
 8014a12:	9321      	str	r3, [sp, #132]	; 0x84
 8014a14:	9b06      	ldr	r3, [sp, #24]
 8014a16:	789b      	ldrb	r3, [r3, #2]
 8014a18:	001a      	movs	r2, r3
 8014a1a:	3a30      	subs	r2, #48	; 0x30
 8014a1c:	2a09      	cmp	r2, #9
 8014a1e:	d800      	bhi.n	8014a22 <_strtod_l+0x1c6>
 8014a20:	e084      	b.n	8014b2c <_strtod_l+0x2d0>
 8014a22:	9a06      	ldr	r2, [sp, #24]
 8014a24:	2100      	movs	r1, #0
 8014a26:	9221      	str	r2, [sp, #132]	; 0x84
 8014a28:	e09e      	b.n	8014b68 <_strtod_l+0x30c>
 8014a2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014a2c:	2908      	cmp	r1, #8
 8014a2e:	dc09      	bgt.n	8014a44 <_strtod_l+0x1e8>
 8014a30:	9908      	ldr	r1, [sp, #32]
 8014a32:	4351      	muls	r1, r2
 8014a34:	18cb      	adds	r3, r1, r3
 8014a36:	9308      	str	r3, [sp, #32]
 8014a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a3a:	3001      	adds	r0, #1
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8014a40:	9021      	str	r0, [sp, #132]	; 0x84
 8014a42:	e7b6      	b.n	80149b2 <_strtod_l+0x156>
 8014a44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a46:	4351      	muls	r1, r2
 8014a48:	18cb      	adds	r3, r1, r3
 8014a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a4c:	e7f4      	b.n	8014a38 <_strtod_l+0x1dc>
 8014a4e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a50:	9b05      	ldr	r3, [sp, #20]
 8014a52:	4694      	mov	ip, r2
 8014a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a56:	4463      	add	r3, ip
 8014a58:	9321      	str	r3, [sp, #132]	; 0x84
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	2a00      	cmp	r2, #0
 8014a5e:	d036      	beq.n	8014ace <_strtod_l+0x272>
 8014a60:	4684      	mov	ip, r0
 8014a62:	9205      	str	r2, [sp, #20]
 8014a64:	001a      	movs	r2, r3
 8014a66:	3a30      	subs	r2, #48	; 0x30
 8014a68:	2a09      	cmp	r2, #9
 8014a6a:	d912      	bls.n	8014a92 <_strtod_l+0x236>
 8014a6c:	2201      	movs	r2, #1
 8014a6e:	9207      	str	r2, [sp, #28]
 8014a70:	e7b2      	b.n	80149d8 <_strtod_l+0x17c>
 8014a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a74:	3001      	adds	r0, #1
 8014a76:	1c5a      	adds	r2, r3, #1
 8014a78:	9221      	str	r2, [sp, #132]	; 0x84
 8014a7a:	785b      	ldrb	r3, [r3, #1]
 8014a7c:	2b30      	cmp	r3, #48	; 0x30
 8014a7e:	d0f8      	beq.n	8014a72 <_strtod_l+0x216>
 8014a80:	001a      	movs	r2, r3
 8014a82:	3a31      	subs	r2, #49	; 0x31
 8014a84:	2a08      	cmp	r2, #8
 8014a86:	d83c      	bhi.n	8014b02 <_strtod_l+0x2a6>
 8014a88:	4684      	mov	ip, r0
 8014a8a:	2000      	movs	r0, #0
 8014a8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a8e:	9005      	str	r0, [sp, #20]
 8014a90:	9212      	str	r2, [sp, #72]	; 0x48
 8014a92:	3b30      	subs	r3, #48	; 0x30
 8014a94:	1c42      	adds	r2, r0, #1
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d013      	beq.n	8014ac2 <_strtod_l+0x266>
 8014a9a:	210a      	movs	r1, #10
 8014a9c:	4494      	add	ip, r2
 8014a9e:	9a05      	ldr	r2, [sp, #20]
 8014aa0:	1885      	adds	r5, r0, r2
 8014aa2:	42aa      	cmp	r2, r5
 8014aa4:	d115      	bne.n	8014ad2 <_strtod_l+0x276>
 8014aa6:	9905      	ldr	r1, [sp, #20]
 8014aa8:	9a05      	ldr	r2, [sp, #20]
 8014aaa:	3101      	adds	r1, #1
 8014aac:	1809      	adds	r1, r1, r0
 8014aae:	1812      	adds	r2, r2, r0
 8014ab0:	9105      	str	r1, [sp, #20]
 8014ab2:	2a08      	cmp	r2, #8
 8014ab4:	dc1b      	bgt.n	8014aee <_strtod_l+0x292>
 8014ab6:	220a      	movs	r2, #10
 8014ab8:	9908      	ldr	r1, [sp, #32]
 8014aba:	434a      	muls	r2, r1
 8014abc:	189b      	adds	r3, r3, r2
 8014abe:	2200      	movs	r2, #0
 8014ac0:	9308      	str	r3, [sp, #32]
 8014ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ac4:	0010      	movs	r0, r2
 8014ac6:	1c59      	adds	r1, r3, #1
 8014ac8:	9121      	str	r1, [sp, #132]	; 0x84
 8014aca:	785b      	ldrb	r3, [r3, #1]
 8014acc:	e7ca      	b.n	8014a64 <_strtod_l+0x208>
 8014ace:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ad0:	e7d4      	b.n	8014a7c <_strtod_l+0x220>
 8014ad2:	1c54      	adds	r4, r2, #1
 8014ad4:	2a08      	cmp	r2, #8
 8014ad6:	dc04      	bgt.n	8014ae2 <_strtod_l+0x286>
 8014ad8:	9a08      	ldr	r2, [sp, #32]
 8014ada:	434a      	muls	r2, r1
 8014adc:	9208      	str	r2, [sp, #32]
 8014ade:	0022      	movs	r2, r4
 8014ae0:	e7df      	b.n	8014aa2 <_strtod_l+0x246>
 8014ae2:	2c10      	cmp	r4, #16
 8014ae4:	dcfb      	bgt.n	8014ade <_strtod_l+0x282>
 8014ae6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ae8:	434a      	muls	r2, r1
 8014aea:	920b      	str	r2, [sp, #44]	; 0x2c
 8014aec:	e7f7      	b.n	8014ade <_strtod_l+0x282>
 8014aee:	9905      	ldr	r1, [sp, #20]
 8014af0:	2200      	movs	r2, #0
 8014af2:	2910      	cmp	r1, #16
 8014af4:	dce5      	bgt.n	8014ac2 <_strtod_l+0x266>
 8014af6:	210a      	movs	r1, #10
 8014af8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014afa:	4341      	muls	r1, r0
 8014afc:	185b      	adds	r3, r3, r1
 8014afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b00:	e7df      	b.n	8014ac2 <_strtod_l+0x266>
 8014b02:	2200      	movs	r2, #0
 8014b04:	4694      	mov	ip, r2
 8014b06:	9205      	str	r2, [sp, #20]
 8014b08:	3201      	adds	r2, #1
 8014b0a:	e7b0      	b.n	8014a6e <_strtod_l+0x212>
 8014b0c:	000c      	movs	r4, r1
 8014b0e:	e77e      	b.n	8014a0e <_strtod_l+0x1b2>
 8014b10:	0801baac 	.word	0x0801baac
 8014b14:	ffefffff 	.word	0xffefffff
 8014b18:	00000433 	.word	0x00000433
 8014b1c:	7ff00000 	.word	0x7ff00000
 8014b20:	7fffffff 	.word	0x7fffffff
 8014b24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b26:	1c5a      	adds	r2, r3, #1
 8014b28:	9221      	str	r2, [sp, #132]	; 0x84
 8014b2a:	785b      	ldrb	r3, [r3, #1]
 8014b2c:	2b30      	cmp	r3, #48	; 0x30
 8014b2e:	d0f9      	beq.n	8014b24 <_strtod_l+0x2c8>
 8014b30:	001a      	movs	r2, r3
 8014b32:	3a31      	subs	r2, #49	; 0x31
 8014b34:	2100      	movs	r1, #0
 8014b36:	2a08      	cmp	r2, #8
 8014b38:	d816      	bhi.n	8014b68 <_strtod_l+0x30c>
 8014b3a:	3b30      	subs	r3, #48	; 0x30
 8014b3c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8014b3e:	930e      	str	r3, [sp, #56]	; 0x38
 8014b40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b42:	1c59      	adds	r1, r3, #1
 8014b44:	9121      	str	r1, [sp, #132]	; 0x84
 8014b46:	785b      	ldrb	r3, [r3, #1]
 8014b48:	001a      	movs	r2, r3
 8014b4a:	3a30      	subs	r2, #48	; 0x30
 8014b4c:	2a09      	cmp	r2, #9
 8014b4e:	d932      	bls.n	8014bb6 <_strtod_l+0x35a>
 8014b50:	1b4a      	subs	r2, r1, r5
 8014b52:	4dad      	ldr	r5, [pc, #692]	; (8014e08 <_strtod_l+0x5ac>)
 8014b54:	0029      	movs	r1, r5
 8014b56:	2a08      	cmp	r2, #8
 8014b58:	dc03      	bgt.n	8014b62 <_strtod_l+0x306>
 8014b5a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014b5c:	42a9      	cmp	r1, r5
 8014b5e:	dd00      	ble.n	8014b62 <_strtod_l+0x306>
 8014b60:	0029      	movs	r1, r5
 8014b62:	2c00      	cmp	r4, #0
 8014b64:	d000      	beq.n	8014b68 <_strtod_l+0x30c>
 8014b66:	4249      	negs	r1, r1
 8014b68:	9a05      	ldr	r2, [sp, #20]
 8014b6a:	2a00      	cmp	r2, #0
 8014b6c:	d149      	bne.n	8014c02 <_strtod_l+0x3a6>
 8014b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b70:	4310      	orrs	r0, r2
 8014b72:	d000      	beq.n	8014b76 <_strtod_l+0x31a>
 8014b74:	e6b3      	b.n	80148de <_strtod_l+0x82>
 8014b76:	9a07      	ldr	r2, [sp, #28]
 8014b78:	2a00      	cmp	r2, #0
 8014b7a:	d000      	beq.n	8014b7e <_strtod_l+0x322>
 8014b7c:	e6cf      	b.n	801491e <_strtod_l+0xc2>
 8014b7e:	2b4e      	cmp	r3, #78	; 0x4e
 8014b80:	d025      	beq.n	8014bce <_strtod_l+0x372>
 8014b82:	dc1f      	bgt.n	8014bc4 <_strtod_l+0x368>
 8014b84:	2b49      	cmp	r3, #73	; 0x49
 8014b86:	d000      	beq.n	8014b8a <_strtod_l+0x32e>
 8014b88:	e6c9      	b.n	801491e <_strtod_l+0xc2>
 8014b8a:	49a0      	ldr	r1, [pc, #640]	; (8014e0c <_strtod_l+0x5b0>)
 8014b8c:	a821      	add	r0, sp, #132	; 0x84
 8014b8e:	f003 f9ed 	bl	8017f6c <__match>
 8014b92:	2800      	cmp	r0, #0
 8014b94:	d100      	bne.n	8014b98 <_strtod_l+0x33c>
 8014b96:	e6c2      	b.n	801491e <_strtod_l+0xc2>
 8014b98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b9a:	499d      	ldr	r1, [pc, #628]	; (8014e10 <_strtod_l+0x5b4>)
 8014b9c:	3b01      	subs	r3, #1
 8014b9e:	a821      	add	r0, sp, #132	; 0x84
 8014ba0:	9321      	str	r3, [sp, #132]	; 0x84
 8014ba2:	f003 f9e3 	bl	8017f6c <__match>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	d102      	bne.n	8014bb0 <_strtod_l+0x354>
 8014baa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bac:	3301      	adds	r3, #1
 8014bae:	9321      	str	r3, [sp, #132]	; 0x84
 8014bb0:	4f98      	ldr	r7, [pc, #608]	; (8014e14 <_strtod_l+0x5b8>)
 8014bb2:	2600      	movs	r6, #0
 8014bb4:	e693      	b.n	80148de <_strtod_l+0x82>
 8014bb6:	220a      	movs	r2, #10
 8014bb8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014bba:	434a      	muls	r2, r1
 8014bbc:	18d2      	adds	r2, r2, r3
 8014bbe:	3a30      	subs	r2, #48	; 0x30
 8014bc0:	920e      	str	r2, [sp, #56]	; 0x38
 8014bc2:	e7bd      	b.n	8014b40 <_strtod_l+0x2e4>
 8014bc4:	2b69      	cmp	r3, #105	; 0x69
 8014bc6:	d0e0      	beq.n	8014b8a <_strtod_l+0x32e>
 8014bc8:	2b6e      	cmp	r3, #110	; 0x6e
 8014bca:	d000      	beq.n	8014bce <_strtod_l+0x372>
 8014bcc:	e6a7      	b.n	801491e <_strtod_l+0xc2>
 8014bce:	4992      	ldr	r1, [pc, #584]	; (8014e18 <_strtod_l+0x5bc>)
 8014bd0:	a821      	add	r0, sp, #132	; 0x84
 8014bd2:	f003 f9cb 	bl	8017f6c <__match>
 8014bd6:	2800      	cmp	r0, #0
 8014bd8:	d100      	bne.n	8014bdc <_strtod_l+0x380>
 8014bda:	e6a0      	b.n	801491e <_strtod_l+0xc2>
 8014bdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bde:	781b      	ldrb	r3, [r3, #0]
 8014be0:	2b28      	cmp	r3, #40	; 0x28
 8014be2:	d10c      	bne.n	8014bfe <_strtod_l+0x3a2>
 8014be4:	aa24      	add	r2, sp, #144	; 0x90
 8014be6:	498d      	ldr	r1, [pc, #564]	; (8014e1c <_strtod_l+0x5c0>)
 8014be8:	a821      	add	r0, sp, #132	; 0x84
 8014bea:	f003 f9d3 	bl	8017f94 <__hexnan>
 8014bee:	2805      	cmp	r0, #5
 8014bf0:	d105      	bne.n	8014bfe <_strtod_l+0x3a2>
 8014bf2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014bf4:	4a87      	ldr	r2, [pc, #540]	; (8014e14 <_strtod_l+0x5b8>)
 8014bf6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014bf8:	431a      	orrs	r2, r3
 8014bfa:	0017      	movs	r7, r2
 8014bfc:	e66f      	b.n	80148de <_strtod_l+0x82>
 8014bfe:	4f88      	ldr	r7, [pc, #544]	; (8014e20 <_strtod_l+0x5c4>)
 8014c00:	e7d7      	b.n	8014bb2 <_strtod_l+0x356>
 8014c02:	4663      	mov	r3, ip
 8014c04:	1acb      	subs	r3, r1, r3
 8014c06:	9307      	str	r3, [sp, #28]
 8014c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d101      	bne.n	8014c12 <_strtod_l+0x3b6>
 8014c0e:	9b05      	ldr	r3, [sp, #20]
 8014c10:	930a      	str	r3, [sp, #40]	; 0x28
 8014c12:	9c05      	ldr	r4, [sp, #20]
 8014c14:	2c10      	cmp	r4, #16
 8014c16:	dd00      	ble.n	8014c1a <_strtod_l+0x3be>
 8014c18:	2410      	movs	r4, #16
 8014c1a:	9808      	ldr	r0, [sp, #32]
 8014c1c:	f7ee f86a 	bl	8002cf4 <__aeabi_ui2d>
 8014c20:	9b05      	ldr	r3, [sp, #20]
 8014c22:	0006      	movs	r6, r0
 8014c24:	000f      	movs	r7, r1
 8014c26:	2b09      	cmp	r3, #9
 8014c28:	dc15      	bgt.n	8014c56 <_strtod_l+0x3fa>
 8014c2a:	9b07      	ldr	r3, [sp, #28]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d100      	bne.n	8014c32 <_strtod_l+0x3d6>
 8014c30:	e655      	b.n	80148de <_strtod_l+0x82>
 8014c32:	9b07      	ldr	r3, [sp, #28]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	dc00      	bgt.n	8014c3a <_strtod_l+0x3de>
 8014c38:	e07d      	b.n	8014d36 <_strtod_l+0x4da>
 8014c3a:	2b16      	cmp	r3, #22
 8014c3c:	dc62      	bgt.n	8014d04 <_strtod_l+0x4a8>
 8014c3e:	00dc      	lsls	r4, r3, #3
 8014c40:	4b78      	ldr	r3, [pc, #480]	; (8014e24 <_strtod_l+0x5c8>)
 8014c42:	0032      	movs	r2, r6
 8014c44:	1919      	adds	r1, r3, r4
 8014c46:	003b      	movs	r3, r7
 8014c48:	6808      	ldr	r0, [r1, #0]
 8014c4a:	6849      	ldr	r1, [r1, #4]
 8014c4c:	f7ed fa0c 	bl	8002068 <__aeabi_dmul>
 8014c50:	0006      	movs	r6, r0
 8014c52:	000f      	movs	r7, r1
 8014c54:	e643      	b.n	80148de <_strtod_l+0x82>
 8014c56:	0022      	movs	r2, r4
 8014c58:	4b72      	ldr	r3, [pc, #456]	; (8014e24 <_strtod_l+0x5c8>)
 8014c5a:	3a09      	subs	r2, #9
 8014c5c:	00d2      	lsls	r2, r2, #3
 8014c5e:	189b      	adds	r3, r3, r2
 8014c60:	681a      	ldr	r2, [r3, #0]
 8014c62:	685b      	ldr	r3, [r3, #4]
 8014c64:	f7ed fa00 	bl	8002068 <__aeabi_dmul>
 8014c68:	0006      	movs	r6, r0
 8014c6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014c6c:	000f      	movs	r7, r1
 8014c6e:	f7ee f841 	bl	8002cf4 <__aeabi_ui2d>
 8014c72:	000b      	movs	r3, r1
 8014c74:	0002      	movs	r2, r0
 8014c76:	0039      	movs	r1, r7
 8014c78:	0030      	movs	r0, r6
 8014c7a:	f7ec facf 	bl	800121c <__aeabi_dadd>
 8014c7e:	9b05      	ldr	r3, [sp, #20]
 8014c80:	0006      	movs	r6, r0
 8014c82:	000f      	movs	r7, r1
 8014c84:	2b0f      	cmp	r3, #15
 8014c86:	ddd0      	ble.n	8014c2a <_strtod_l+0x3ce>
 8014c88:	9b05      	ldr	r3, [sp, #20]
 8014c8a:	1b1c      	subs	r4, r3, r4
 8014c8c:	9b07      	ldr	r3, [sp, #28]
 8014c8e:	18e4      	adds	r4, r4, r3
 8014c90:	2c00      	cmp	r4, #0
 8014c92:	dc00      	bgt.n	8014c96 <_strtod_l+0x43a>
 8014c94:	e094      	b.n	8014dc0 <_strtod_l+0x564>
 8014c96:	230f      	movs	r3, #15
 8014c98:	4023      	ands	r3, r4
 8014c9a:	d00a      	beq.n	8014cb2 <_strtod_l+0x456>
 8014c9c:	4961      	ldr	r1, [pc, #388]	; (8014e24 <_strtod_l+0x5c8>)
 8014c9e:	00db      	lsls	r3, r3, #3
 8014ca0:	18c9      	adds	r1, r1, r3
 8014ca2:	0032      	movs	r2, r6
 8014ca4:	6808      	ldr	r0, [r1, #0]
 8014ca6:	6849      	ldr	r1, [r1, #4]
 8014ca8:	003b      	movs	r3, r7
 8014caa:	f7ed f9dd 	bl	8002068 <__aeabi_dmul>
 8014cae:	0006      	movs	r6, r0
 8014cb0:	000f      	movs	r7, r1
 8014cb2:	230f      	movs	r3, #15
 8014cb4:	439c      	bics	r4, r3
 8014cb6:	d06e      	beq.n	8014d96 <_strtod_l+0x53a>
 8014cb8:	3326      	adds	r3, #38	; 0x26
 8014cba:	33ff      	adds	r3, #255	; 0xff
 8014cbc:	429c      	cmp	r4, r3
 8014cbe:	dd48      	ble.n	8014d52 <_strtod_l+0x4f6>
 8014cc0:	2400      	movs	r4, #0
 8014cc2:	9405      	str	r4, [sp, #20]
 8014cc4:	940b      	str	r4, [sp, #44]	; 0x2c
 8014cc6:	940a      	str	r4, [sp, #40]	; 0x28
 8014cc8:	2322      	movs	r3, #34	; 0x22
 8014cca:	2600      	movs	r6, #0
 8014ccc:	9a04      	ldr	r2, [sp, #16]
 8014cce:	4f51      	ldr	r7, [pc, #324]	; (8014e14 <_strtod_l+0x5b8>)
 8014cd0:	6013      	str	r3, [r2, #0]
 8014cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cd4:	42b3      	cmp	r3, r6
 8014cd6:	d100      	bne.n	8014cda <_strtod_l+0x47e>
 8014cd8:	e601      	b.n	80148de <_strtod_l+0x82>
 8014cda:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014cdc:	9804      	ldr	r0, [sp, #16]
 8014cde:	f003 fa47 	bl	8018170 <_Bfree>
 8014ce2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014ce4:	9804      	ldr	r0, [sp, #16]
 8014ce6:	f003 fa43 	bl	8018170 <_Bfree>
 8014cea:	9905      	ldr	r1, [sp, #20]
 8014cec:	9804      	ldr	r0, [sp, #16]
 8014cee:	f003 fa3f 	bl	8018170 <_Bfree>
 8014cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014cf4:	9804      	ldr	r0, [sp, #16]
 8014cf6:	f003 fa3b 	bl	8018170 <_Bfree>
 8014cfa:	0021      	movs	r1, r4
 8014cfc:	9804      	ldr	r0, [sp, #16]
 8014cfe:	f003 fa37 	bl	8018170 <_Bfree>
 8014d02:	e5ec      	b.n	80148de <_strtod_l+0x82>
 8014d04:	2325      	movs	r3, #37	; 0x25
 8014d06:	9a05      	ldr	r2, [sp, #20]
 8014d08:	1a9b      	subs	r3, r3, r2
 8014d0a:	9a07      	ldr	r2, [sp, #28]
 8014d0c:	4293      	cmp	r3, r2
 8014d0e:	dbbb      	blt.n	8014c88 <_strtod_l+0x42c>
 8014d10:	230f      	movs	r3, #15
 8014d12:	9a05      	ldr	r2, [sp, #20]
 8014d14:	4c43      	ldr	r4, [pc, #268]	; (8014e24 <_strtod_l+0x5c8>)
 8014d16:	1a9d      	subs	r5, r3, r2
 8014d18:	00e9      	lsls	r1, r5, #3
 8014d1a:	1861      	adds	r1, r4, r1
 8014d1c:	0032      	movs	r2, r6
 8014d1e:	6808      	ldr	r0, [r1, #0]
 8014d20:	6849      	ldr	r1, [r1, #4]
 8014d22:	003b      	movs	r3, r7
 8014d24:	f7ed f9a0 	bl	8002068 <__aeabi_dmul>
 8014d28:	9b07      	ldr	r3, [sp, #28]
 8014d2a:	1b5e      	subs	r6, r3, r5
 8014d2c:	00f6      	lsls	r6, r6, #3
 8014d2e:	19a6      	adds	r6, r4, r6
 8014d30:	6832      	ldr	r2, [r6, #0]
 8014d32:	6873      	ldr	r3, [r6, #4]
 8014d34:	e78a      	b.n	8014c4c <_strtod_l+0x3f0>
 8014d36:	9b07      	ldr	r3, [sp, #28]
 8014d38:	3316      	adds	r3, #22
 8014d3a:	dba5      	blt.n	8014c88 <_strtod_l+0x42c>
 8014d3c:	9b07      	ldr	r3, [sp, #28]
 8014d3e:	0030      	movs	r0, r6
 8014d40:	00da      	lsls	r2, r3, #3
 8014d42:	4b38      	ldr	r3, [pc, #224]	; (8014e24 <_strtod_l+0x5c8>)
 8014d44:	0039      	movs	r1, r7
 8014d46:	1a9b      	subs	r3, r3, r2
 8014d48:	681a      	ldr	r2, [r3, #0]
 8014d4a:	685b      	ldr	r3, [r3, #4]
 8014d4c:	f7ec fd82 	bl	8001854 <__aeabi_ddiv>
 8014d50:	e77e      	b.n	8014c50 <_strtod_l+0x3f4>
 8014d52:	2300      	movs	r3, #0
 8014d54:	0030      	movs	r0, r6
 8014d56:	0039      	movs	r1, r7
 8014d58:	001d      	movs	r5, r3
 8014d5a:	1124      	asrs	r4, r4, #4
 8014d5c:	2c01      	cmp	r4, #1
 8014d5e:	dc1d      	bgt.n	8014d9c <_strtod_l+0x540>
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d001      	beq.n	8014d68 <_strtod_l+0x50c>
 8014d64:	0006      	movs	r6, r0
 8014d66:	000f      	movs	r7, r1
 8014d68:	4b2f      	ldr	r3, [pc, #188]	; (8014e28 <_strtod_l+0x5cc>)
 8014d6a:	00ed      	lsls	r5, r5, #3
 8014d6c:	18ff      	adds	r7, r7, r3
 8014d6e:	4b2f      	ldr	r3, [pc, #188]	; (8014e2c <_strtod_l+0x5d0>)
 8014d70:	0032      	movs	r2, r6
 8014d72:	195d      	adds	r5, r3, r5
 8014d74:	6828      	ldr	r0, [r5, #0]
 8014d76:	6869      	ldr	r1, [r5, #4]
 8014d78:	003b      	movs	r3, r7
 8014d7a:	f7ed f975 	bl	8002068 <__aeabi_dmul>
 8014d7e:	4b25      	ldr	r3, [pc, #148]	; (8014e14 <_strtod_l+0x5b8>)
 8014d80:	4a2b      	ldr	r2, [pc, #172]	; (8014e30 <_strtod_l+0x5d4>)
 8014d82:	0006      	movs	r6, r0
 8014d84:	400b      	ands	r3, r1
 8014d86:	4293      	cmp	r3, r2
 8014d88:	d89a      	bhi.n	8014cc0 <_strtod_l+0x464>
 8014d8a:	4a2a      	ldr	r2, [pc, #168]	; (8014e34 <_strtod_l+0x5d8>)
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	d913      	bls.n	8014db8 <_strtod_l+0x55c>
 8014d90:	2601      	movs	r6, #1
 8014d92:	4f29      	ldr	r7, [pc, #164]	; (8014e38 <_strtod_l+0x5dc>)
 8014d94:	4276      	negs	r6, r6
 8014d96:	2300      	movs	r3, #0
 8014d98:	9306      	str	r3, [sp, #24]
 8014d9a:	e07b      	b.n	8014e94 <_strtod_l+0x638>
 8014d9c:	2201      	movs	r2, #1
 8014d9e:	4214      	tst	r4, r2
 8014da0:	d007      	beq.n	8014db2 <_strtod_l+0x556>
 8014da2:	4a22      	ldr	r2, [pc, #136]	; (8014e2c <_strtod_l+0x5d0>)
 8014da4:	00eb      	lsls	r3, r5, #3
 8014da6:	189b      	adds	r3, r3, r2
 8014da8:	681a      	ldr	r2, [r3, #0]
 8014daa:	685b      	ldr	r3, [r3, #4]
 8014dac:	f7ed f95c 	bl	8002068 <__aeabi_dmul>
 8014db0:	2301      	movs	r3, #1
 8014db2:	3501      	adds	r5, #1
 8014db4:	1064      	asrs	r4, r4, #1
 8014db6:	e7d1      	b.n	8014d5c <_strtod_l+0x500>
 8014db8:	23d4      	movs	r3, #212	; 0xd4
 8014dba:	049b      	lsls	r3, r3, #18
 8014dbc:	18cf      	adds	r7, r1, r3
 8014dbe:	e7ea      	b.n	8014d96 <_strtod_l+0x53a>
 8014dc0:	2c00      	cmp	r4, #0
 8014dc2:	d0e8      	beq.n	8014d96 <_strtod_l+0x53a>
 8014dc4:	230f      	movs	r3, #15
 8014dc6:	4264      	negs	r4, r4
 8014dc8:	4023      	ands	r3, r4
 8014dca:	d00a      	beq.n	8014de2 <_strtod_l+0x586>
 8014dcc:	4a15      	ldr	r2, [pc, #84]	; (8014e24 <_strtod_l+0x5c8>)
 8014dce:	00db      	lsls	r3, r3, #3
 8014dd0:	18d3      	adds	r3, r2, r3
 8014dd2:	0030      	movs	r0, r6
 8014dd4:	681a      	ldr	r2, [r3, #0]
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	0039      	movs	r1, r7
 8014dda:	f7ec fd3b 	bl	8001854 <__aeabi_ddiv>
 8014dde:	0006      	movs	r6, r0
 8014de0:	000f      	movs	r7, r1
 8014de2:	1124      	asrs	r4, r4, #4
 8014de4:	d0d7      	beq.n	8014d96 <_strtod_l+0x53a>
 8014de6:	2c1f      	cmp	r4, #31
 8014de8:	dd28      	ble.n	8014e3c <_strtod_l+0x5e0>
 8014dea:	2400      	movs	r4, #0
 8014dec:	9405      	str	r4, [sp, #20]
 8014dee:	940b      	str	r4, [sp, #44]	; 0x2c
 8014df0:	940a      	str	r4, [sp, #40]	; 0x28
 8014df2:	2322      	movs	r3, #34	; 0x22
 8014df4:	9a04      	ldr	r2, [sp, #16]
 8014df6:	2600      	movs	r6, #0
 8014df8:	6013      	str	r3, [r2, #0]
 8014dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dfc:	2700      	movs	r7, #0
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d000      	beq.n	8014e04 <_strtod_l+0x5a8>
 8014e02:	e76a      	b.n	8014cda <_strtod_l+0x47e>
 8014e04:	e56b      	b.n	80148de <_strtod_l+0x82>
 8014e06:	46c0      	nop			; (mov r8, r8)
 8014e08:	00004e1f 	.word	0x00004e1f
 8014e0c:	0801bb05 	.word	0x0801bb05
 8014e10:	0801bc58 	.word	0x0801bc58
 8014e14:	7ff00000 	.word	0x7ff00000
 8014e18:	0801bb0d 	.word	0x0801bb0d
 8014e1c:	0801bac0 	.word	0x0801bac0
 8014e20:	fff80000 	.word	0xfff80000
 8014e24:	0801bc90 	.word	0x0801bc90
 8014e28:	fcb00000 	.word	0xfcb00000
 8014e2c:	0801bc68 	.word	0x0801bc68
 8014e30:	7ca00000 	.word	0x7ca00000
 8014e34:	7c900000 	.word	0x7c900000
 8014e38:	7fefffff 	.word	0x7fefffff
 8014e3c:	2310      	movs	r3, #16
 8014e3e:	4023      	ands	r3, r4
 8014e40:	9306      	str	r3, [sp, #24]
 8014e42:	d001      	beq.n	8014e48 <_strtod_l+0x5ec>
 8014e44:	236a      	movs	r3, #106	; 0x6a
 8014e46:	9306      	str	r3, [sp, #24]
 8014e48:	2300      	movs	r3, #0
 8014e4a:	0030      	movs	r0, r6
 8014e4c:	0039      	movs	r1, r7
 8014e4e:	001d      	movs	r5, r3
 8014e50:	2c00      	cmp	r4, #0
 8014e52:	dd00      	ble.n	8014e56 <_strtod_l+0x5fa>
 8014e54:	e10e      	b.n	8015074 <_strtod_l+0x818>
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d001      	beq.n	8014e5e <_strtod_l+0x602>
 8014e5a:	0006      	movs	r6, r0
 8014e5c:	000f      	movs	r7, r1
 8014e5e:	9b06      	ldr	r3, [sp, #24]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d00f      	beq.n	8014e84 <_strtod_l+0x628>
 8014e64:	236b      	movs	r3, #107	; 0x6b
 8014e66:	0079      	lsls	r1, r7, #1
 8014e68:	0d49      	lsrs	r1, r1, #21
 8014e6a:	003a      	movs	r2, r7
 8014e6c:	1a5b      	subs	r3, r3, r1
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	dd08      	ble.n	8014e84 <_strtod_l+0x628>
 8014e72:	2b1f      	cmp	r3, #31
 8014e74:	dc00      	bgt.n	8014e78 <_strtod_l+0x61c>
 8014e76:	e112      	b.n	801509e <_strtod_l+0x842>
 8014e78:	2600      	movs	r6, #0
 8014e7a:	2b34      	cmp	r3, #52	; 0x34
 8014e7c:	dc00      	bgt.n	8014e80 <_strtod_l+0x624>
 8014e7e:	e107      	b.n	8015090 <_strtod_l+0x834>
 8014e80:	27dc      	movs	r7, #220	; 0xdc
 8014e82:	04bf      	lsls	r7, r7, #18
 8014e84:	2200      	movs	r2, #0
 8014e86:	2300      	movs	r3, #0
 8014e88:	0030      	movs	r0, r6
 8014e8a:	0039      	movs	r1, r7
 8014e8c:	f7eb fae6 	bl	800045c <__aeabi_dcmpeq>
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d1aa      	bne.n	8014dea <_strtod_l+0x58e>
 8014e94:	9b08      	ldr	r3, [sp, #32]
 8014e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e98:	9300      	str	r3, [sp, #0]
 8014e9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014e9c:	9b05      	ldr	r3, [sp, #20]
 8014e9e:	9804      	ldr	r0, [sp, #16]
 8014ea0:	f003 f9ae 	bl	8018200 <__s2b>
 8014ea4:	900b      	str	r0, [sp, #44]	; 0x2c
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	d100      	bne.n	8014eac <_strtod_l+0x650>
 8014eaa:	e709      	b.n	8014cc0 <_strtod_l+0x464>
 8014eac:	9b07      	ldr	r3, [sp, #28]
 8014eae:	9a07      	ldr	r2, [sp, #28]
 8014eb0:	17db      	asrs	r3, r3, #31
 8014eb2:	4252      	negs	r2, r2
 8014eb4:	4013      	ands	r3, r2
 8014eb6:	9315      	str	r3, [sp, #84]	; 0x54
 8014eb8:	9b07      	ldr	r3, [sp, #28]
 8014eba:	2400      	movs	r4, #0
 8014ebc:	43db      	mvns	r3, r3
 8014ebe:	9a07      	ldr	r2, [sp, #28]
 8014ec0:	17db      	asrs	r3, r3, #31
 8014ec2:	401a      	ands	r2, r3
 8014ec4:	921c      	str	r2, [sp, #112]	; 0x70
 8014ec6:	9405      	str	r4, [sp, #20]
 8014ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eca:	9804      	ldr	r0, [sp, #16]
 8014ecc:	6859      	ldr	r1, [r3, #4]
 8014ece:	f003 f927 	bl	8018120 <_Balloc>
 8014ed2:	900a      	str	r0, [sp, #40]	; 0x28
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	d100      	bne.n	8014eda <_strtod_l+0x67e>
 8014ed8:	e6f6      	b.n	8014cc8 <_strtod_l+0x46c>
 8014eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014edc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ede:	691b      	ldr	r3, [r3, #16]
 8014ee0:	310c      	adds	r1, #12
 8014ee2:	1c9a      	adds	r2, r3, #2
 8014ee4:	0092      	lsls	r2, r2, #2
 8014ee6:	300c      	adds	r0, #12
 8014ee8:	9308      	str	r3, [sp, #32]
 8014eea:	f7ff fa00 	bl	80142ee <memcpy>
 8014eee:	ab24      	add	r3, sp, #144	; 0x90
 8014ef0:	9301      	str	r3, [sp, #4]
 8014ef2:	ab23      	add	r3, sp, #140	; 0x8c
 8014ef4:	9300      	str	r3, [sp, #0]
 8014ef6:	0032      	movs	r2, r6
 8014ef8:	003b      	movs	r3, r7
 8014efa:	9804      	ldr	r0, [sp, #16]
 8014efc:	960e      	str	r6, [sp, #56]	; 0x38
 8014efe:	970f      	str	r7, [sp, #60]	; 0x3c
 8014f00:	f003 fc22 	bl	8018748 <__d2b>
 8014f04:	9022      	str	r0, [sp, #136]	; 0x88
 8014f06:	2800      	cmp	r0, #0
 8014f08:	d100      	bne.n	8014f0c <_strtod_l+0x6b0>
 8014f0a:	e6dd      	b.n	8014cc8 <_strtod_l+0x46c>
 8014f0c:	2101      	movs	r1, #1
 8014f0e:	9804      	ldr	r0, [sp, #16]
 8014f10:	f003 f9fd 	bl	801830e <__i2b>
 8014f14:	9005      	str	r0, [sp, #20]
 8014f16:	2800      	cmp	r0, #0
 8014f18:	d100      	bne.n	8014f1c <_strtod_l+0x6c0>
 8014f1a:	e6d5      	b.n	8014cc8 <_strtod_l+0x46c>
 8014f1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	da00      	bge.n	8014f24 <_strtod_l+0x6c8>
 8014f22:	e0c1      	b.n	80150a8 <_strtod_l+0x84c>
 8014f24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014f26:	189d      	adds	r5, r3, r2
 8014f28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014f2a:	4694      	mov	ip, r2
 8014f2c:	9906      	ldr	r1, [sp, #24]
 8014f2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f30:	1a5b      	subs	r3, r3, r1
 8014f32:	2136      	movs	r1, #54	; 0x36
 8014f34:	189b      	adds	r3, r3, r2
 8014f36:	1a8a      	subs	r2, r1, r2
 8014f38:	49b2      	ldr	r1, [pc, #712]	; (8015204 <_strtod_l+0x9a8>)
 8014f3a:	3b01      	subs	r3, #1
 8014f3c:	2001      	movs	r0, #1
 8014f3e:	428b      	cmp	r3, r1
 8014f40:	db00      	blt.n	8014f44 <_strtod_l+0x6e8>
 8014f42:	e0bd      	b.n	80150c0 <_strtod_l+0x864>
 8014f44:	1ac9      	subs	r1, r1, r3
 8014f46:	1a52      	subs	r2, r2, r1
 8014f48:	291f      	cmp	r1, #31
 8014f4a:	dd00      	ble.n	8014f4e <_strtod_l+0x6f2>
 8014f4c:	e0b1      	b.n	80150b2 <_strtod_l+0x856>
 8014f4e:	4088      	lsls	r0, r1
 8014f50:	2300      	movs	r3, #0
 8014f52:	9014      	str	r0, [sp, #80]	; 0x50
 8014f54:	9310      	str	r3, [sp, #64]	; 0x40
 8014f56:	18ab      	adds	r3, r5, r2
 8014f58:	9308      	str	r3, [sp, #32]
 8014f5a:	0013      	movs	r3, r2
 8014f5c:	9a06      	ldr	r2, [sp, #24]
 8014f5e:	4463      	add	r3, ip
 8014f60:	18d3      	adds	r3, r2, r3
 8014f62:	9a08      	ldr	r2, [sp, #32]
 8014f64:	930c      	str	r3, [sp, #48]	; 0x30
 8014f66:	002b      	movs	r3, r5
 8014f68:	4295      	cmp	r5, r2
 8014f6a:	dd00      	ble.n	8014f6e <_strtod_l+0x712>
 8014f6c:	0013      	movs	r3, r2
 8014f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f70:	4293      	cmp	r3, r2
 8014f72:	dd00      	ble.n	8014f76 <_strtod_l+0x71a>
 8014f74:	0013      	movs	r3, r2
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	dd06      	ble.n	8014f88 <_strtod_l+0x72c>
 8014f7a:	9a08      	ldr	r2, [sp, #32]
 8014f7c:	1aed      	subs	r5, r5, r3
 8014f7e:	1ad2      	subs	r2, r2, r3
 8014f80:	9208      	str	r2, [sp, #32]
 8014f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f84:	1ad2      	subs	r2, r2, r3
 8014f86:	920c      	str	r2, [sp, #48]	; 0x30
 8014f88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d017      	beq.n	8014fbe <_strtod_l+0x762>
 8014f8e:	001a      	movs	r2, r3
 8014f90:	9905      	ldr	r1, [sp, #20]
 8014f92:	9804      	ldr	r0, [sp, #16]
 8014f94:	f003 fa54 	bl	8018440 <__pow5mult>
 8014f98:	9005      	str	r0, [sp, #20]
 8014f9a:	2800      	cmp	r0, #0
 8014f9c:	d100      	bne.n	8014fa0 <_strtod_l+0x744>
 8014f9e:	e693      	b.n	8014cc8 <_strtod_l+0x46c>
 8014fa0:	0001      	movs	r1, r0
 8014fa2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014fa4:	9804      	ldr	r0, [sp, #16]
 8014fa6:	f003 f9bb 	bl	8018320 <__multiply>
 8014faa:	9012      	str	r0, [sp, #72]	; 0x48
 8014fac:	2800      	cmp	r0, #0
 8014fae:	d100      	bne.n	8014fb2 <_strtod_l+0x756>
 8014fb0:	e68a      	b.n	8014cc8 <_strtod_l+0x46c>
 8014fb2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014fb4:	9804      	ldr	r0, [sp, #16]
 8014fb6:	f003 f8db 	bl	8018170 <_Bfree>
 8014fba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014fbc:	9322      	str	r3, [sp, #136]	; 0x88
 8014fbe:	9b08      	ldr	r3, [sp, #32]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	dd00      	ble.n	8014fc6 <_strtod_l+0x76a>
 8014fc4:	e07f      	b.n	80150c6 <_strtod_l+0x86a>
 8014fc6:	9b07      	ldr	r3, [sp, #28]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	dd08      	ble.n	8014fde <_strtod_l+0x782>
 8014fcc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014fce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014fd0:	9804      	ldr	r0, [sp, #16]
 8014fd2:	f003 fa35 	bl	8018440 <__pow5mult>
 8014fd6:	900a      	str	r0, [sp, #40]	; 0x28
 8014fd8:	2800      	cmp	r0, #0
 8014fda:	d100      	bne.n	8014fde <_strtod_l+0x782>
 8014fdc:	e674      	b.n	8014cc8 <_strtod_l+0x46c>
 8014fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	dd08      	ble.n	8014ff6 <_strtod_l+0x79a>
 8014fe4:	001a      	movs	r2, r3
 8014fe6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014fe8:	9804      	ldr	r0, [sp, #16]
 8014fea:	f003 fa6b 	bl	80184c4 <__lshift>
 8014fee:	900a      	str	r0, [sp, #40]	; 0x28
 8014ff0:	2800      	cmp	r0, #0
 8014ff2:	d100      	bne.n	8014ff6 <_strtod_l+0x79a>
 8014ff4:	e668      	b.n	8014cc8 <_strtod_l+0x46c>
 8014ff6:	2d00      	cmp	r5, #0
 8014ff8:	dd08      	ble.n	801500c <_strtod_l+0x7b0>
 8014ffa:	002a      	movs	r2, r5
 8014ffc:	9905      	ldr	r1, [sp, #20]
 8014ffe:	9804      	ldr	r0, [sp, #16]
 8015000:	f003 fa60 	bl	80184c4 <__lshift>
 8015004:	9005      	str	r0, [sp, #20]
 8015006:	2800      	cmp	r0, #0
 8015008:	d100      	bne.n	801500c <_strtod_l+0x7b0>
 801500a:	e65d      	b.n	8014cc8 <_strtod_l+0x46c>
 801500c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801500e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015010:	9804      	ldr	r0, [sp, #16]
 8015012:	f003 fac3 	bl	801859c <__mdiff>
 8015016:	1e04      	subs	r4, r0, #0
 8015018:	d100      	bne.n	801501c <_strtod_l+0x7c0>
 801501a:	e655      	b.n	8014cc8 <_strtod_l+0x46c>
 801501c:	2500      	movs	r5, #0
 801501e:	68c3      	ldr	r3, [r0, #12]
 8015020:	9905      	ldr	r1, [sp, #20]
 8015022:	60c5      	str	r5, [r0, #12]
 8015024:	9312      	str	r3, [sp, #72]	; 0x48
 8015026:	f003 fa9f 	bl	8018568 <__mcmp>
 801502a:	42a8      	cmp	r0, r5
 801502c:	da55      	bge.n	80150da <_strtod_l+0x87e>
 801502e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015030:	42ab      	cmp	r3, r5
 8015032:	d11b      	bne.n	801506c <_strtod_l+0x810>
 8015034:	42ae      	cmp	r6, r5
 8015036:	d119      	bne.n	801506c <_strtod_l+0x810>
 8015038:	033b      	lsls	r3, r7, #12
 801503a:	42ab      	cmp	r3, r5
 801503c:	d116      	bne.n	801506c <_strtod_l+0x810>
 801503e:	22d6      	movs	r2, #214	; 0xd6
 8015040:	4b71      	ldr	r3, [pc, #452]	; (8015208 <_strtod_l+0x9ac>)
 8015042:	04d2      	lsls	r2, r2, #19
 8015044:	403b      	ands	r3, r7
 8015046:	4293      	cmp	r3, r2
 8015048:	d910      	bls.n	801506c <_strtod_l+0x810>
 801504a:	6963      	ldr	r3, [r4, #20]
 801504c:	42ab      	cmp	r3, r5
 801504e:	d102      	bne.n	8015056 <_strtod_l+0x7fa>
 8015050:	6923      	ldr	r3, [r4, #16]
 8015052:	2b01      	cmp	r3, #1
 8015054:	dd0a      	ble.n	801506c <_strtod_l+0x810>
 8015056:	0021      	movs	r1, r4
 8015058:	2201      	movs	r2, #1
 801505a:	9804      	ldr	r0, [sp, #16]
 801505c:	f003 fa32 	bl	80184c4 <__lshift>
 8015060:	9905      	ldr	r1, [sp, #20]
 8015062:	0004      	movs	r4, r0
 8015064:	f003 fa80 	bl	8018568 <__mcmp>
 8015068:	2800      	cmp	r0, #0
 801506a:	dc6b      	bgt.n	8015144 <_strtod_l+0x8e8>
 801506c:	9b06      	ldr	r3, [sp, #24]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d178      	bne.n	8015164 <_strtod_l+0x908>
 8015072:	e632      	b.n	8014cda <_strtod_l+0x47e>
 8015074:	2201      	movs	r2, #1
 8015076:	4214      	tst	r4, r2
 8015078:	d007      	beq.n	801508a <_strtod_l+0x82e>
 801507a:	4a64      	ldr	r2, [pc, #400]	; (801520c <_strtod_l+0x9b0>)
 801507c:	00eb      	lsls	r3, r5, #3
 801507e:	18d3      	adds	r3, r2, r3
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	f7ec fff0 	bl	8002068 <__aeabi_dmul>
 8015088:	2301      	movs	r3, #1
 801508a:	3501      	adds	r5, #1
 801508c:	1064      	asrs	r4, r4, #1
 801508e:	e6df      	b.n	8014e50 <_strtod_l+0x5f4>
 8015090:	2101      	movs	r1, #1
 8015092:	3b20      	subs	r3, #32
 8015094:	4249      	negs	r1, r1
 8015096:	4099      	lsls	r1, r3
 8015098:	400a      	ands	r2, r1
 801509a:	0017      	movs	r7, r2
 801509c:	e6f2      	b.n	8014e84 <_strtod_l+0x628>
 801509e:	2201      	movs	r2, #1
 80150a0:	4252      	negs	r2, r2
 80150a2:	409a      	lsls	r2, r3
 80150a4:	4016      	ands	r6, r2
 80150a6:	e6ed      	b.n	8014e84 <_strtod_l+0x628>
 80150a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80150aa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80150ac:	1ad2      	subs	r2, r2, r3
 80150ae:	4694      	mov	ip, r2
 80150b0:	e73c      	b.n	8014f2c <_strtod_l+0x6d0>
 80150b2:	4957      	ldr	r1, [pc, #348]	; (8015210 <_strtod_l+0x9b4>)
 80150b4:	1acb      	subs	r3, r1, r3
 80150b6:	0001      	movs	r1, r0
 80150b8:	4099      	lsls	r1, r3
 80150ba:	9110      	str	r1, [sp, #64]	; 0x40
 80150bc:	9014      	str	r0, [sp, #80]	; 0x50
 80150be:	e74a      	b.n	8014f56 <_strtod_l+0x6fa>
 80150c0:	2300      	movs	r3, #0
 80150c2:	9310      	str	r3, [sp, #64]	; 0x40
 80150c4:	e7fa      	b.n	80150bc <_strtod_l+0x860>
 80150c6:	9a08      	ldr	r2, [sp, #32]
 80150c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80150ca:	9804      	ldr	r0, [sp, #16]
 80150cc:	f003 f9fa 	bl	80184c4 <__lshift>
 80150d0:	9022      	str	r0, [sp, #136]	; 0x88
 80150d2:	2800      	cmp	r0, #0
 80150d4:	d000      	beq.n	80150d8 <_strtod_l+0x87c>
 80150d6:	e776      	b.n	8014fc6 <_strtod_l+0x76a>
 80150d8:	e5f6      	b.n	8014cc8 <_strtod_l+0x46c>
 80150da:	970c      	str	r7, [sp, #48]	; 0x30
 80150dc:	2800      	cmp	r0, #0
 80150de:	d000      	beq.n	80150e2 <_strtod_l+0x886>
 80150e0:	e0a0      	b.n	8015224 <_strtod_l+0x9c8>
 80150e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80150e4:	033b      	lsls	r3, r7, #12
 80150e6:	0b1b      	lsrs	r3, r3, #12
 80150e8:	2a00      	cmp	r2, #0
 80150ea:	d027      	beq.n	801513c <_strtod_l+0x8e0>
 80150ec:	4a49      	ldr	r2, [pc, #292]	; (8015214 <_strtod_l+0x9b8>)
 80150ee:	4293      	cmp	r3, r2
 80150f0:	d157      	bne.n	80151a2 <_strtod_l+0x946>
 80150f2:	2201      	movs	r2, #1
 80150f4:	9b06      	ldr	r3, [sp, #24]
 80150f6:	4252      	negs	r2, r2
 80150f8:	0031      	movs	r1, r6
 80150fa:	0010      	movs	r0, r2
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d00b      	beq.n	8015118 <_strtod_l+0x8bc>
 8015100:	25d4      	movs	r5, #212	; 0xd4
 8015102:	4b41      	ldr	r3, [pc, #260]	; (8015208 <_strtod_l+0x9ac>)
 8015104:	04ed      	lsls	r5, r5, #19
 8015106:	403b      	ands	r3, r7
 8015108:	0010      	movs	r0, r2
 801510a:	42ab      	cmp	r3, r5
 801510c:	d804      	bhi.n	8015118 <_strtod_l+0x8bc>
 801510e:	306c      	adds	r0, #108	; 0x6c
 8015110:	0d1b      	lsrs	r3, r3, #20
 8015112:	1ac3      	subs	r3, r0, r3
 8015114:	409a      	lsls	r2, r3
 8015116:	0010      	movs	r0, r2
 8015118:	4281      	cmp	r1, r0
 801511a:	d142      	bne.n	80151a2 <_strtod_l+0x946>
 801511c:	4b3e      	ldr	r3, [pc, #248]	; (8015218 <_strtod_l+0x9bc>)
 801511e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015120:	429a      	cmp	r2, r3
 8015122:	d102      	bne.n	801512a <_strtod_l+0x8ce>
 8015124:	1c4b      	adds	r3, r1, #1
 8015126:	d100      	bne.n	801512a <_strtod_l+0x8ce>
 8015128:	e5ce      	b.n	8014cc8 <_strtod_l+0x46c>
 801512a:	4b37      	ldr	r3, [pc, #220]	; (8015208 <_strtod_l+0x9ac>)
 801512c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801512e:	2600      	movs	r6, #0
 8015130:	401a      	ands	r2, r3
 8015132:	0013      	movs	r3, r2
 8015134:	2280      	movs	r2, #128	; 0x80
 8015136:	0352      	lsls	r2, r2, #13
 8015138:	189f      	adds	r7, r3, r2
 801513a:	e797      	b.n	801506c <_strtod_l+0x810>
 801513c:	2b00      	cmp	r3, #0
 801513e:	d130      	bne.n	80151a2 <_strtod_l+0x946>
 8015140:	2e00      	cmp	r6, #0
 8015142:	d12e      	bne.n	80151a2 <_strtod_l+0x946>
 8015144:	9906      	ldr	r1, [sp, #24]
 8015146:	003b      	movs	r3, r7
 8015148:	4a2f      	ldr	r2, [pc, #188]	; (8015208 <_strtod_l+0x9ac>)
 801514a:	2900      	cmp	r1, #0
 801514c:	d020      	beq.n	8015190 <_strtod_l+0x934>
 801514e:	0011      	movs	r1, r2
 8015150:	20d6      	movs	r0, #214	; 0xd6
 8015152:	4039      	ands	r1, r7
 8015154:	04c0      	lsls	r0, r0, #19
 8015156:	4281      	cmp	r1, r0
 8015158:	dc1a      	bgt.n	8015190 <_strtod_l+0x934>
 801515a:	23dc      	movs	r3, #220	; 0xdc
 801515c:	049b      	lsls	r3, r3, #18
 801515e:	4299      	cmp	r1, r3
 8015160:	dc00      	bgt.n	8015164 <_strtod_l+0x908>
 8015162:	e646      	b.n	8014df2 <_strtod_l+0x596>
 8015164:	4b2d      	ldr	r3, [pc, #180]	; (801521c <_strtod_l+0x9c0>)
 8015166:	0030      	movs	r0, r6
 8015168:	931b      	str	r3, [sp, #108]	; 0x6c
 801516a:	2300      	movs	r3, #0
 801516c:	931a      	str	r3, [sp, #104]	; 0x68
 801516e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015170:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015172:	0039      	movs	r1, r7
 8015174:	f7ec ff78 	bl	8002068 <__aeabi_dmul>
 8015178:	0006      	movs	r6, r0
 801517a:	000f      	movs	r7, r1
 801517c:	1e0b      	subs	r3, r1, #0
 801517e:	d000      	beq.n	8015182 <_strtod_l+0x926>
 8015180:	e5ab      	b.n	8014cda <_strtod_l+0x47e>
 8015182:	2800      	cmp	r0, #0
 8015184:	d000      	beq.n	8015188 <_strtod_l+0x92c>
 8015186:	e5a8      	b.n	8014cda <_strtod_l+0x47e>
 8015188:	9a04      	ldr	r2, [sp, #16]
 801518a:	3322      	adds	r3, #34	; 0x22
 801518c:	6013      	str	r3, [r2, #0]
 801518e:	e5a4      	b.n	8014cda <_strtod_l+0x47e>
 8015190:	2601      	movs	r6, #1
 8015192:	4013      	ands	r3, r2
 8015194:	4a22      	ldr	r2, [pc, #136]	; (8015220 <_strtod_l+0x9c4>)
 8015196:	4276      	negs	r6, r6
 8015198:	189b      	adds	r3, r3, r2
 801519a:	4a1e      	ldr	r2, [pc, #120]	; (8015214 <_strtod_l+0x9b8>)
 801519c:	431a      	orrs	r2, r3
 801519e:	0017      	movs	r7, r2
 80151a0:	e764      	b.n	801506c <_strtod_l+0x810>
 80151a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d015      	beq.n	80151d4 <_strtod_l+0x978>
 80151a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80151ac:	4213      	tst	r3, r2
 80151ae:	d100      	bne.n	80151b2 <_strtod_l+0x956>
 80151b0:	e75c      	b.n	801506c <_strtod_l+0x810>
 80151b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151b4:	9a06      	ldr	r2, [sp, #24]
 80151b6:	0030      	movs	r0, r6
 80151b8:	0039      	movs	r1, r7
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d00f      	beq.n	80151de <_strtod_l+0x982>
 80151be:	f7ff fb35 	bl	801482c <sulp>
 80151c2:	0002      	movs	r2, r0
 80151c4:	000b      	movs	r3, r1
 80151c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80151c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80151ca:	f7ec f827 	bl	800121c <__aeabi_dadd>
 80151ce:	0006      	movs	r6, r0
 80151d0:	000f      	movs	r7, r1
 80151d2:	e74b      	b.n	801506c <_strtod_l+0x810>
 80151d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151d6:	4233      	tst	r3, r6
 80151d8:	d100      	bne.n	80151dc <_strtod_l+0x980>
 80151da:	e747      	b.n	801506c <_strtod_l+0x810>
 80151dc:	e7e9      	b.n	80151b2 <_strtod_l+0x956>
 80151de:	f7ff fb25 	bl	801482c <sulp>
 80151e2:	0002      	movs	r2, r0
 80151e4:	000b      	movs	r3, r1
 80151e6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80151e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80151ea:	f7ed f9af 	bl	800254c <__aeabi_dsub>
 80151ee:	2200      	movs	r2, #0
 80151f0:	2300      	movs	r3, #0
 80151f2:	0006      	movs	r6, r0
 80151f4:	000f      	movs	r7, r1
 80151f6:	f7eb f931 	bl	800045c <__aeabi_dcmpeq>
 80151fa:	2800      	cmp	r0, #0
 80151fc:	d000      	beq.n	8015200 <_strtod_l+0x9a4>
 80151fe:	e5f8      	b.n	8014df2 <_strtod_l+0x596>
 8015200:	e734      	b.n	801506c <_strtod_l+0x810>
 8015202:	46c0      	nop			; (mov r8, r8)
 8015204:	fffffc02 	.word	0xfffffc02
 8015208:	7ff00000 	.word	0x7ff00000
 801520c:	0801bad8 	.word	0x0801bad8
 8015210:	fffffbe2 	.word	0xfffffbe2
 8015214:	000fffff 	.word	0x000fffff
 8015218:	7fefffff 	.word	0x7fefffff
 801521c:	39500000 	.word	0x39500000
 8015220:	fff00000 	.word	0xfff00000
 8015224:	9905      	ldr	r1, [sp, #20]
 8015226:	0020      	movs	r0, r4
 8015228:	f003 fae2 	bl	80187f0 <__ratio>
 801522c:	2380      	movs	r3, #128	; 0x80
 801522e:	2200      	movs	r2, #0
 8015230:	05db      	lsls	r3, r3, #23
 8015232:	9008      	str	r0, [sp, #32]
 8015234:	9109      	str	r1, [sp, #36]	; 0x24
 8015236:	f7eb f921 	bl	800047c <__aeabi_dcmple>
 801523a:	2800      	cmp	r0, #0
 801523c:	d100      	bne.n	8015240 <_strtod_l+0x9e4>
 801523e:	e07f      	b.n	8015340 <_strtod_l+0xae4>
 8015240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015242:	2b00      	cmp	r3, #0
 8015244:	d04b      	beq.n	80152de <_strtod_l+0xa82>
 8015246:	2200      	movs	r2, #0
 8015248:	4b8a      	ldr	r3, [pc, #552]	; (8015474 <_strtod_l+0xc18>)
 801524a:	9210      	str	r2, [sp, #64]	; 0x40
 801524c:	9311      	str	r3, [sp, #68]	; 0x44
 801524e:	4b89      	ldr	r3, [pc, #548]	; (8015474 <_strtod_l+0xc18>)
 8015250:	9308      	str	r3, [sp, #32]
 8015252:	4a89      	ldr	r2, [pc, #548]	; (8015478 <_strtod_l+0xc1c>)
 8015254:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015256:	4013      	ands	r3, r2
 8015258:	9314      	str	r3, [sp, #80]	; 0x50
 801525a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801525c:	4b87      	ldr	r3, [pc, #540]	; (801547c <_strtod_l+0xc20>)
 801525e:	429a      	cmp	r2, r3
 8015260:	d000      	beq.n	8015264 <_strtod_l+0xa08>
 8015262:	e0ba      	b.n	80153da <_strtod_l+0xb7e>
 8015264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015268:	921a      	str	r2, [sp, #104]	; 0x68
 801526a:	931b      	str	r3, [sp, #108]	; 0x6c
 801526c:	4a84      	ldr	r2, [pc, #528]	; (8015480 <_strtod_l+0xc24>)
 801526e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015270:	4694      	mov	ip, r2
 8015272:	4463      	add	r3, ip
 8015274:	001f      	movs	r7, r3
 8015276:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801527a:	0030      	movs	r0, r6
 801527c:	0039      	movs	r1, r7
 801527e:	920c      	str	r2, [sp, #48]	; 0x30
 8015280:	930d      	str	r3, [sp, #52]	; 0x34
 8015282:	f003 f9ef 	bl	8018664 <__ulp>
 8015286:	0002      	movs	r2, r0
 8015288:	000b      	movs	r3, r1
 801528a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801528c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801528e:	f7ec feeb 	bl	8002068 <__aeabi_dmul>
 8015292:	0032      	movs	r2, r6
 8015294:	003b      	movs	r3, r7
 8015296:	f7eb ffc1 	bl	800121c <__aeabi_dadd>
 801529a:	4a77      	ldr	r2, [pc, #476]	; (8015478 <_strtod_l+0xc1c>)
 801529c:	4b79      	ldr	r3, [pc, #484]	; (8015484 <_strtod_l+0xc28>)
 801529e:	0006      	movs	r6, r0
 80152a0:	400a      	ands	r2, r1
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d964      	bls.n	8015370 <_strtod_l+0xb14>
 80152a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152a8:	4a77      	ldr	r2, [pc, #476]	; (8015488 <_strtod_l+0xc2c>)
 80152aa:	4293      	cmp	r3, r2
 80152ac:	d103      	bne.n	80152b6 <_strtod_l+0xa5a>
 80152ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152b0:	3301      	adds	r3, #1
 80152b2:	d100      	bne.n	80152b6 <_strtod_l+0xa5a>
 80152b4:	e508      	b.n	8014cc8 <_strtod_l+0x46c>
 80152b6:	2601      	movs	r6, #1
 80152b8:	4f73      	ldr	r7, [pc, #460]	; (8015488 <_strtod_l+0xc2c>)
 80152ba:	4276      	negs	r6, r6
 80152bc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80152be:	9804      	ldr	r0, [sp, #16]
 80152c0:	f002 ff56 	bl	8018170 <_Bfree>
 80152c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80152c6:	9804      	ldr	r0, [sp, #16]
 80152c8:	f002 ff52 	bl	8018170 <_Bfree>
 80152cc:	9905      	ldr	r1, [sp, #20]
 80152ce:	9804      	ldr	r0, [sp, #16]
 80152d0:	f002 ff4e 	bl	8018170 <_Bfree>
 80152d4:	0021      	movs	r1, r4
 80152d6:	9804      	ldr	r0, [sp, #16]
 80152d8:	f002 ff4a 	bl	8018170 <_Bfree>
 80152dc:	e5f4      	b.n	8014ec8 <_strtod_l+0x66c>
 80152de:	2e00      	cmp	r6, #0
 80152e0:	d11e      	bne.n	8015320 <_strtod_l+0xac4>
 80152e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152e4:	031b      	lsls	r3, r3, #12
 80152e6:	d121      	bne.n	801532c <_strtod_l+0xad0>
 80152e8:	9808      	ldr	r0, [sp, #32]
 80152ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152ec:	2200      	movs	r2, #0
 80152ee:	4b61      	ldr	r3, [pc, #388]	; (8015474 <_strtod_l+0xc18>)
 80152f0:	f7eb f8ba 	bl	8000468 <__aeabi_dcmplt>
 80152f4:	2800      	cmp	r0, #0
 80152f6:	d11f      	bne.n	8015338 <_strtod_l+0xadc>
 80152f8:	9808      	ldr	r0, [sp, #32]
 80152fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152fc:	2200      	movs	r2, #0
 80152fe:	4b63      	ldr	r3, [pc, #396]	; (801548c <_strtod_l+0xc30>)
 8015300:	f7ec feb2 	bl	8002068 <__aeabi_dmul>
 8015304:	0005      	movs	r5, r0
 8015306:	9108      	str	r1, [sp, #32]
 8015308:	2280      	movs	r2, #128	; 0x80
 801530a:	0612      	lsls	r2, r2, #24
 801530c:	4694      	mov	ip, r2
 801530e:	9b08      	ldr	r3, [sp, #32]
 8015310:	951e      	str	r5, [sp, #120]	; 0x78
 8015312:	4463      	add	r3, ip
 8015314:	931f      	str	r3, [sp, #124]	; 0x7c
 8015316:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015318:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801531a:	9210      	str	r2, [sp, #64]	; 0x40
 801531c:	9311      	str	r3, [sp, #68]	; 0x44
 801531e:	e798      	b.n	8015252 <_strtod_l+0x9f6>
 8015320:	2e01      	cmp	r6, #1
 8015322:	d103      	bne.n	801532c <_strtod_l+0xad0>
 8015324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015326:	2b00      	cmp	r3, #0
 8015328:	d100      	bne.n	801532c <_strtod_l+0xad0>
 801532a:	e562      	b.n	8014df2 <_strtod_l+0x596>
 801532c:	2200      	movs	r2, #0
 801532e:	4b58      	ldr	r3, [pc, #352]	; (8015490 <_strtod_l+0xc34>)
 8015330:	2500      	movs	r5, #0
 8015332:	9210      	str	r2, [sp, #64]	; 0x40
 8015334:	9311      	str	r3, [sp, #68]	; 0x44
 8015336:	e78a      	b.n	801524e <_strtod_l+0x9f2>
 8015338:	4b54      	ldr	r3, [pc, #336]	; (801548c <_strtod_l+0xc30>)
 801533a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801533c:	9308      	str	r3, [sp, #32]
 801533e:	e7e3      	b.n	8015308 <_strtod_l+0xaac>
 8015340:	4b52      	ldr	r3, [pc, #328]	; (801548c <_strtod_l+0xc30>)
 8015342:	9808      	ldr	r0, [sp, #32]
 8015344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015346:	2200      	movs	r2, #0
 8015348:	f7ec fe8e 	bl	8002068 <__aeabi_dmul>
 801534c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801534e:	0005      	movs	r5, r0
 8015350:	9108      	str	r1, [sp, #32]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d107      	bne.n	8015366 <_strtod_l+0xb0a>
 8015356:	2380      	movs	r3, #128	; 0x80
 8015358:	061b      	lsls	r3, r3, #24
 801535a:	18cb      	adds	r3, r1, r3
 801535c:	9016      	str	r0, [sp, #88]	; 0x58
 801535e:	9317      	str	r3, [sp, #92]	; 0x5c
 8015360:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015362:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015364:	e7d9      	b.n	801531a <_strtod_l+0xabe>
 8015366:	0002      	movs	r2, r0
 8015368:	9b08      	ldr	r3, [sp, #32]
 801536a:	9216      	str	r2, [sp, #88]	; 0x58
 801536c:	9317      	str	r3, [sp, #92]	; 0x5c
 801536e:	e7f7      	b.n	8015360 <_strtod_l+0xb04>
 8015370:	23d4      	movs	r3, #212	; 0xd4
 8015372:	049b      	lsls	r3, r3, #18
 8015374:	18cf      	adds	r7, r1, r3
 8015376:	9b06      	ldr	r3, [sp, #24]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d19f      	bne.n	80152bc <_strtod_l+0xa60>
 801537c:	4b3e      	ldr	r3, [pc, #248]	; (8015478 <_strtod_l+0xc1c>)
 801537e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015380:	970c      	str	r7, [sp, #48]	; 0x30
 8015382:	403b      	ands	r3, r7
 8015384:	429a      	cmp	r2, r3
 8015386:	d199      	bne.n	80152bc <_strtod_l+0xa60>
 8015388:	9908      	ldr	r1, [sp, #32]
 801538a:	0028      	movs	r0, r5
 801538c:	f7ed fc42 	bl	8002c14 <__aeabi_d2iz>
 8015390:	f7ed fc76 	bl	8002c80 <__aeabi_i2d>
 8015394:	000b      	movs	r3, r1
 8015396:	0002      	movs	r2, r0
 8015398:	9908      	ldr	r1, [sp, #32]
 801539a:	0028      	movs	r0, r5
 801539c:	f7ed f8d6 	bl	800254c <__aeabi_dsub>
 80153a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80153a2:	9008      	str	r0, [sp, #32]
 80153a4:	9109      	str	r1, [sp, #36]	; 0x24
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d104      	bne.n	80153b4 <_strtod_l+0xb58>
 80153aa:	2e00      	cmp	r6, #0
 80153ac:	d102      	bne.n	80153b4 <_strtod_l+0xb58>
 80153ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153b0:	031b      	lsls	r3, r3, #12
 80153b2:	d058      	beq.n	8015466 <_strtod_l+0xc0a>
 80153b4:	9808      	ldr	r0, [sp, #32]
 80153b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153b8:	4a36      	ldr	r2, [pc, #216]	; (8015494 <_strtod_l+0xc38>)
 80153ba:	4b37      	ldr	r3, [pc, #220]	; (8015498 <_strtod_l+0xc3c>)
 80153bc:	f7eb f854 	bl	8000468 <__aeabi_dcmplt>
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d000      	beq.n	80153c6 <_strtod_l+0xb6a>
 80153c4:	e489      	b.n	8014cda <_strtod_l+0x47e>
 80153c6:	9808      	ldr	r0, [sp, #32]
 80153c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153ca:	4a34      	ldr	r2, [pc, #208]	; (801549c <_strtod_l+0xc40>)
 80153cc:	4b2f      	ldr	r3, [pc, #188]	; (801548c <_strtod_l+0xc30>)
 80153ce:	f7eb f85f 	bl	8000490 <__aeabi_dcmpgt>
 80153d2:	2800      	cmp	r0, #0
 80153d4:	d100      	bne.n	80153d8 <_strtod_l+0xb7c>
 80153d6:	e771      	b.n	80152bc <_strtod_l+0xa60>
 80153d8:	e47f      	b.n	8014cda <_strtod_l+0x47e>
 80153da:	9b06      	ldr	r3, [sp, #24]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d02a      	beq.n	8015436 <_strtod_l+0xbda>
 80153e0:	23d4      	movs	r3, #212	; 0xd4
 80153e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153e4:	04db      	lsls	r3, r3, #19
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d825      	bhi.n	8015436 <_strtod_l+0xbda>
 80153ea:	4a2d      	ldr	r2, [pc, #180]	; (80154a0 <_strtod_l+0xc44>)
 80153ec:	4b2d      	ldr	r3, [pc, #180]	; (80154a4 <_strtod_l+0xc48>)
 80153ee:	0028      	movs	r0, r5
 80153f0:	9908      	ldr	r1, [sp, #32]
 80153f2:	f7eb f843 	bl	800047c <__aeabi_dcmple>
 80153f6:	2800      	cmp	r0, #0
 80153f8:	d016      	beq.n	8015428 <_strtod_l+0xbcc>
 80153fa:	0028      	movs	r0, r5
 80153fc:	9908      	ldr	r1, [sp, #32]
 80153fe:	f7eb f903 	bl	8000608 <__aeabi_d2uiz>
 8015402:	2800      	cmp	r0, #0
 8015404:	d100      	bne.n	8015408 <_strtod_l+0xbac>
 8015406:	3001      	adds	r0, #1
 8015408:	f7ed fc74 	bl	8002cf4 <__aeabi_ui2d>
 801540c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801540e:	0005      	movs	r5, r0
 8015410:	9108      	str	r1, [sp, #32]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d122      	bne.n	801545c <_strtod_l+0xc00>
 8015416:	2380      	movs	r3, #128	; 0x80
 8015418:	061b      	lsls	r3, r3, #24
 801541a:	18cb      	adds	r3, r1, r3
 801541c:	9018      	str	r0, [sp, #96]	; 0x60
 801541e:	9319      	str	r3, [sp, #100]	; 0x64
 8015420:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015422:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015424:	9210      	str	r2, [sp, #64]	; 0x40
 8015426:	9311      	str	r3, [sp, #68]	; 0x44
 8015428:	22d6      	movs	r2, #214	; 0xd6
 801542a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801542c:	04d2      	lsls	r2, r2, #19
 801542e:	189b      	adds	r3, r3, r2
 8015430:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015432:	1a9b      	subs	r3, r3, r2
 8015434:	9311      	str	r3, [sp, #68]	; 0x44
 8015436:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015438:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801543a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801543c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801543e:	f003 f911 	bl	8018664 <__ulp>
 8015442:	0002      	movs	r2, r0
 8015444:	000b      	movs	r3, r1
 8015446:	0030      	movs	r0, r6
 8015448:	0039      	movs	r1, r7
 801544a:	f7ec fe0d 	bl	8002068 <__aeabi_dmul>
 801544e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015452:	f7eb fee3 	bl	800121c <__aeabi_dadd>
 8015456:	0006      	movs	r6, r0
 8015458:	000f      	movs	r7, r1
 801545a:	e78c      	b.n	8015376 <_strtod_l+0xb1a>
 801545c:	0002      	movs	r2, r0
 801545e:	9b08      	ldr	r3, [sp, #32]
 8015460:	9218      	str	r2, [sp, #96]	; 0x60
 8015462:	9319      	str	r3, [sp, #100]	; 0x64
 8015464:	e7dc      	b.n	8015420 <_strtod_l+0xbc4>
 8015466:	4a0b      	ldr	r2, [pc, #44]	; (8015494 <_strtod_l+0xc38>)
 8015468:	4b0f      	ldr	r3, [pc, #60]	; (80154a8 <_strtod_l+0xc4c>)
 801546a:	9808      	ldr	r0, [sp, #32]
 801546c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801546e:	f7ea fffb 	bl	8000468 <__aeabi_dcmplt>
 8015472:	e7ae      	b.n	80153d2 <_strtod_l+0xb76>
 8015474:	3ff00000 	.word	0x3ff00000
 8015478:	7ff00000 	.word	0x7ff00000
 801547c:	7fe00000 	.word	0x7fe00000
 8015480:	fcb00000 	.word	0xfcb00000
 8015484:	7c9fffff 	.word	0x7c9fffff
 8015488:	7fefffff 	.word	0x7fefffff
 801548c:	3fe00000 	.word	0x3fe00000
 8015490:	bff00000 	.word	0xbff00000
 8015494:	94a03595 	.word	0x94a03595
 8015498:	3fdfffff 	.word	0x3fdfffff
 801549c:	35afe535 	.word	0x35afe535
 80154a0:	ffc00000 	.word	0xffc00000
 80154a4:	41dfffff 	.word	0x41dfffff
 80154a8:	3fcfffff 	.word	0x3fcfffff

080154ac <strtod>:
 80154ac:	4b06      	ldr	r3, [pc, #24]	; (80154c8 <strtod+0x1c>)
 80154ae:	b510      	push	{r4, lr}
 80154b0:	0004      	movs	r4, r0
 80154b2:	6818      	ldr	r0, [r3, #0]
 80154b4:	000a      	movs	r2, r1
 80154b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d100      	bne.n	80154be <strtod+0x12>
 80154bc:	4b03      	ldr	r3, [pc, #12]	; (80154cc <strtod+0x20>)
 80154be:	0021      	movs	r1, r4
 80154c0:	f7ff f9cc 	bl	801485c <_strtod_l>
 80154c4:	bd10      	pop	{r4, pc}
 80154c6:	46c0      	nop			; (mov r8, r8)
 80154c8:	20000138 	.word	0x20000138
 80154cc:	20000568 	.word	0x20000568

080154d0 <strtok>:
 80154d0:	4b03      	ldr	r3, [pc, #12]	; (80154e0 <strtok+0x10>)
 80154d2:	b510      	push	{r4, lr}
 80154d4:	681a      	ldr	r2, [r3, #0]
 80154d6:	2301      	movs	r3, #1
 80154d8:	325c      	adds	r2, #92	; 0x5c
 80154da:	f000 f803 	bl	80154e4 <__strtok_r>
 80154de:	bd10      	pop	{r4, pc}
 80154e0:	20000138 	.word	0x20000138

080154e4 <__strtok_r>:
 80154e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154e6:	2800      	cmp	r0, #0
 80154e8:	d104      	bne.n	80154f4 <__strtok_r+0x10>
 80154ea:	6810      	ldr	r0, [r2, #0]
 80154ec:	2800      	cmp	r0, #0
 80154ee:	d101      	bne.n	80154f4 <__strtok_r+0x10>
 80154f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154f2:	0020      	movs	r0, r4
 80154f4:	000e      	movs	r6, r1
 80154f6:	7805      	ldrb	r5, [r0, #0]
 80154f8:	1c44      	adds	r4, r0, #1
 80154fa:	7837      	ldrb	r7, [r6, #0]
 80154fc:	2f00      	cmp	r7, #0
 80154fe:	d104      	bne.n	801550a <__strtok_r+0x26>
 8015500:	2d00      	cmp	r5, #0
 8015502:	d110      	bne.n	8015526 <__strtok_r+0x42>
 8015504:	6015      	str	r5, [r2, #0]
 8015506:	0028      	movs	r0, r5
 8015508:	e7f2      	b.n	80154f0 <__strtok_r+0xc>
 801550a:	3601      	adds	r6, #1
 801550c:	42bd      	cmp	r5, r7
 801550e:	d1f4      	bne.n	80154fa <__strtok_r+0x16>
 8015510:	2b00      	cmp	r3, #0
 8015512:	d1ee      	bne.n	80154f2 <__strtok_r+0xe>
 8015514:	6014      	str	r4, [r2, #0]
 8015516:	7003      	strb	r3, [r0, #0]
 8015518:	e7ea      	b.n	80154f0 <__strtok_r+0xc>
 801551a:	0033      	movs	r3, r6
 801551c:	e00d      	b.n	801553a <__strtok_r+0x56>
 801551e:	3501      	adds	r5, #1
 8015520:	2f00      	cmp	r7, #0
 8015522:	d103      	bne.n	801552c <__strtok_r+0x48>
 8015524:	001c      	movs	r4, r3
 8015526:	000d      	movs	r5, r1
 8015528:	7826      	ldrb	r6, [r4, #0]
 801552a:	1c63      	adds	r3, r4, #1
 801552c:	782f      	ldrb	r7, [r5, #0]
 801552e:	42be      	cmp	r6, r7
 8015530:	d1f5      	bne.n	801551e <__strtok_r+0x3a>
 8015532:	2e00      	cmp	r6, #0
 8015534:	d0f1      	beq.n	801551a <__strtok_r+0x36>
 8015536:	2100      	movs	r1, #0
 8015538:	7021      	strb	r1, [r4, #0]
 801553a:	6013      	str	r3, [r2, #0]
 801553c:	e7d8      	b.n	80154f0 <__strtok_r+0xc>
	...

08015540 <_strtol_l.isra.0>:
 8015540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015542:	001f      	movs	r7, r3
 8015544:	000e      	movs	r6, r1
 8015546:	b087      	sub	sp, #28
 8015548:	9005      	str	r0, [sp, #20]
 801554a:	9101      	str	r1, [sp, #4]
 801554c:	9202      	str	r2, [sp, #8]
 801554e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015550:	7834      	ldrb	r4, [r6, #0]
 8015552:	f7fe fc6d 	bl	8013e30 <__locale_ctype_ptr_l>
 8015556:	2208      	movs	r2, #8
 8015558:	1900      	adds	r0, r0, r4
 801555a:	7843      	ldrb	r3, [r0, #1]
 801555c:	1c75      	adds	r5, r6, #1
 801555e:	4013      	ands	r3, r2
 8015560:	d136      	bne.n	80155d0 <_strtol_l.isra.0+0x90>
 8015562:	2c2d      	cmp	r4, #45	; 0x2d
 8015564:	d136      	bne.n	80155d4 <_strtol_l.isra.0+0x94>
 8015566:	1cb5      	adds	r5, r6, #2
 8015568:	7874      	ldrb	r4, [r6, #1]
 801556a:	2601      	movs	r6, #1
 801556c:	2f00      	cmp	r7, #0
 801556e:	d062      	beq.n	8015636 <_strtol_l.isra.0+0xf6>
 8015570:	2f10      	cmp	r7, #16
 8015572:	d109      	bne.n	8015588 <_strtol_l.isra.0+0x48>
 8015574:	2c30      	cmp	r4, #48	; 0x30
 8015576:	d107      	bne.n	8015588 <_strtol_l.isra.0+0x48>
 8015578:	2220      	movs	r2, #32
 801557a:	782b      	ldrb	r3, [r5, #0]
 801557c:	4393      	bics	r3, r2
 801557e:	2b58      	cmp	r3, #88	; 0x58
 8015580:	d154      	bne.n	801562c <_strtol_l.isra.0+0xec>
 8015582:	2710      	movs	r7, #16
 8015584:	786c      	ldrb	r4, [r5, #1]
 8015586:	3502      	adds	r5, #2
 8015588:	4b2d      	ldr	r3, [pc, #180]	; (8015640 <_strtol_l.isra.0+0x100>)
 801558a:	0039      	movs	r1, r7
 801558c:	18f3      	adds	r3, r6, r3
 801558e:	0018      	movs	r0, r3
 8015590:	9303      	str	r3, [sp, #12]
 8015592:	f7ea fe63 	bl	800025c <__aeabi_uidivmod>
 8015596:	9104      	str	r1, [sp, #16]
 8015598:	2101      	movs	r1, #1
 801559a:	2300      	movs	r3, #0
 801559c:	4249      	negs	r1, r1
 801559e:	0002      	movs	r2, r0
 80155a0:	468c      	mov	ip, r1
 80155a2:	0018      	movs	r0, r3
 80155a4:	0021      	movs	r1, r4
 80155a6:	3930      	subs	r1, #48	; 0x30
 80155a8:	2909      	cmp	r1, #9
 80155aa:	d81a      	bhi.n	80155e2 <_strtol_l.isra.0+0xa2>
 80155ac:	000c      	movs	r4, r1
 80155ae:	42a7      	cmp	r7, r4
 80155b0:	dd23      	ble.n	80155fa <_strtol_l.isra.0+0xba>
 80155b2:	1c59      	adds	r1, r3, #1
 80155b4:	d009      	beq.n	80155ca <_strtol_l.isra.0+0x8a>
 80155b6:	4663      	mov	r3, ip
 80155b8:	4282      	cmp	r2, r0
 80155ba:	d306      	bcc.n	80155ca <_strtol_l.isra.0+0x8a>
 80155bc:	d102      	bne.n	80155c4 <_strtol_l.isra.0+0x84>
 80155be:	9904      	ldr	r1, [sp, #16]
 80155c0:	42a1      	cmp	r1, r4
 80155c2:	db02      	blt.n	80155ca <_strtol_l.isra.0+0x8a>
 80155c4:	2301      	movs	r3, #1
 80155c6:	4378      	muls	r0, r7
 80155c8:	1820      	adds	r0, r4, r0
 80155ca:	782c      	ldrb	r4, [r5, #0]
 80155cc:	3501      	adds	r5, #1
 80155ce:	e7e9      	b.n	80155a4 <_strtol_l.isra.0+0x64>
 80155d0:	002e      	movs	r6, r5
 80155d2:	e7bc      	b.n	801554e <_strtol_l.isra.0+0xe>
 80155d4:	2c2b      	cmp	r4, #43	; 0x2b
 80155d6:	d001      	beq.n	80155dc <_strtol_l.isra.0+0x9c>
 80155d8:	001e      	movs	r6, r3
 80155da:	e7c7      	b.n	801556c <_strtol_l.isra.0+0x2c>
 80155dc:	1cb5      	adds	r5, r6, #2
 80155de:	7874      	ldrb	r4, [r6, #1]
 80155e0:	e7fa      	b.n	80155d8 <_strtol_l.isra.0+0x98>
 80155e2:	0021      	movs	r1, r4
 80155e4:	3941      	subs	r1, #65	; 0x41
 80155e6:	2919      	cmp	r1, #25
 80155e8:	d801      	bhi.n	80155ee <_strtol_l.isra.0+0xae>
 80155ea:	3c37      	subs	r4, #55	; 0x37
 80155ec:	e7df      	b.n	80155ae <_strtol_l.isra.0+0x6e>
 80155ee:	0021      	movs	r1, r4
 80155f0:	3961      	subs	r1, #97	; 0x61
 80155f2:	2919      	cmp	r1, #25
 80155f4:	d801      	bhi.n	80155fa <_strtol_l.isra.0+0xba>
 80155f6:	3c57      	subs	r4, #87	; 0x57
 80155f8:	e7d9      	b.n	80155ae <_strtol_l.isra.0+0x6e>
 80155fa:	1c5a      	adds	r2, r3, #1
 80155fc:	d108      	bne.n	8015610 <_strtol_l.isra.0+0xd0>
 80155fe:	9a05      	ldr	r2, [sp, #20]
 8015600:	3323      	adds	r3, #35	; 0x23
 8015602:	6013      	str	r3, [r2, #0]
 8015604:	9b02      	ldr	r3, [sp, #8]
 8015606:	9803      	ldr	r0, [sp, #12]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d109      	bne.n	8015620 <_strtol_l.isra.0+0xe0>
 801560c:	b007      	add	sp, #28
 801560e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015610:	2e00      	cmp	r6, #0
 8015612:	d000      	beq.n	8015616 <_strtol_l.isra.0+0xd6>
 8015614:	4240      	negs	r0, r0
 8015616:	9a02      	ldr	r2, [sp, #8]
 8015618:	2a00      	cmp	r2, #0
 801561a:	d0f7      	beq.n	801560c <_strtol_l.isra.0+0xcc>
 801561c:	2b00      	cmp	r3, #0
 801561e:	d001      	beq.n	8015624 <_strtol_l.isra.0+0xe4>
 8015620:	1e6b      	subs	r3, r5, #1
 8015622:	9301      	str	r3, [sp, #4]
 8015624:	9b02      	ldr	r3, [sp, #8]
 8015626:	9a01      	ldr	r2, [sp, #4]
 8015628:	601a      	str	r2, [r3, #0]
 801562a:	e7ef      	b.n	801560c <_strtol_l.isra.0+0xcc>
 801562c:	2430      	movs	r4, #48	; 0x30
 801562e:	2f00      	cmp	r7, #0
 8015630:	d1aa      	bne.n	8015588 <_strtol_l.isra.0+0x48>
 8015632:	2708      	movs	r7, #8
 8015634:	e7a8      	b.n	8015588 <_strtol_l.isra.0+0x48>
 8015636:	2c30      	cmp	r4, #48	; 0x30
 8015638:	d09e      	beq.n	8015578 <_strtol_l.isra.0+0x38>
 801563a:	270a      	movs	r7, #10
 801563c:	e7a4      	b.n	8015588 <_strtol_l.isra.0+0x48>
 801563e:	46c0      	nop			; (mov r8, r8)
 8015640:	7fffffff 	.word	0x7fffffff

08015644 <strtol>:
 8015644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015646:	0013      	movs	r3, r2
 8015648:	4a06      	ldr	r2, [pc, #24]	; (8015664 <strtol+0x20>)
 801564a:	0005      	movs	r5, r0
 801564c:	6810      	ldr	r0, [r2, #0]
 801564e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8015650:	2c00      	cmp	r4, #0
 8015652:	d100      	bne.n	8015656 <strtol+0x12>
 8015654:	4c04      	ldr	r4, [pc, #16]	; (8015668 <strtol+0x24>)
 8015656:	000a      	movs	r2, r1
 8015658:	9400      	str	r4, [sp, #0]
 801565a:	0029      	movs	r1, r5
 801565c:	f7ff ff70 	bl	8015540 <_strtol_l.isra.0>
 8015660:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8015662:	46c0      	nop			; (mov r8, r8)
 8015664:	20000138 	.word	0x20000138
 8015668:	20000568 	.word	0x20000568

0801566c <_svfprintf_r>:
 801566c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801566e:	b0d9      	sub	sp, #356	; 0x164
 8015670:	910b      	str	r1, [sp, #44]	; 0x2c
 8015672:	9209      	str	r2, [sp, #36]	; 0x24
 8015674:	001c      	movs	r4, r3
 8015676:	900a      	str	r0, [sp, #40]	; 0x28
 8015678:	f002 fd26 	bl	80180c8 <_localeconv_r>
 801567c:	6803      	ldr	r3, [r0, #0]
 801567e:	0018      	movs	r0, r3
 8015680:	931c      	str	r3, [sp, #112]	; 0x70
 8015682:	f7ea fd49 	bl	8000118 <strlen>
 8015686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015688:	9014      	str	r0, [sp, #80]	; 0x50
 801568a:	899b      	ldrh	r3, [r3, #12]
 801568c:	061b      	lsls	r3, r3, #24
 801568e:	d518      	bpl.n	80156c2 <_svfprintf_r+0x56>
 8015690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015692:	691b      	ldr	r3, [r3, #16]
 8015694:	9308      	str	r3, [sp, #32]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d113      	bne.n	80156c2 <_svfprintf_r+0x56>
 801569a:	2140      	movs	r1, #64	; 0x40
 801569c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801569e:	f7fe fbed 	bl	8013e7c <_malloc_r>
 80156a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156a4:	6018      	str	r0, [r3, #0]
 80156a6:	6118      	str	r0, [r3, #16]
 80156a8:	2800      	cmp	r0, #0
 80156aa:	d107      	bne.n	80156bc <_svfprintf_r+0x50>
 80156ac:	230c      	movs	r3, #12
 80156ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156b0:	6013      	str	r3, [r2, #0]
 80156b2:	3b0d      	subs	r3, #13
 80156b4:	9315      	str	r3, [sp, #84]	; 0x54
 80156b6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80156b8:	b059      	add	sp, #356	; 0x164
 80156ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156bc:	2340      	movs	r3, #64	; 0x40
 80156be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80156c0:	6153      	str	r3, [r2, #20]
 80156c2:	2600      	movs	r6, #0
 80156c4:	af2f      	add	r7, sp, #188	; 0xbc
 80156c6:	972c      	str	r7, [sp, #176]	; 0xb0
 80156c8:	962e      	str	r6, [sp, #184]	; 0xb8
 80156ca:	962d      	str	r6, [sp, #180]	; 0xb4
 80156cc:	960d      	str	r6, [sp, #52]	; 0x34
 80156ce:	961a      	str	r6, [sp, #104]	; 0x68
 80156d0:	9619      	str	r6, [sp, #100]	; 0x64
 80156d2:	961e      	str	r6, [sp, #120]	; 0x78
 80156d4:	961d      	str	r6, [sp, #116]	; 0x74
 80156d6:	9613      	str	r6, [sp, #76]	; 0x4c
 80156d8:	961b      	str	r6, [sp, #108]	; 0x6c
 80156da:	961f      	str	r6, [sp, #124]	; 0x7c
 80156dc:	9615      	str	r6, [sp, #84]	; 0x54
 80156de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80156e0:	782b      	ldrb	r3, [r5, #0]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d002      	beq.n	80156ec <_svfprintf_r+0x80>
 80156e6:	2b25      	cmp	r3, #37	; 0x25
 80156e8:	d000      	beq.n	80156ec <_svfprintf_r+0x80>
 80156ea:	e095      	b.n	8015818 <_svfprintf_r+0x1ac>
 80156ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156ee:	1aee      	subs	r6, r5, r3
 80156f0:	d017      	beq.n	8015722 <_svfprintf_r+0xb6>
 80156f2:	603b      	str	r3, [r7, #0]
 80156f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80156f6:	607e      	str	r6, [r7, #4]
 80156f8:	199b      	adds	r3, r3, r6
 80156fa:	932e      	str	r3, [sp, #184]	; 0xb8
 80156fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156fe:	3708      	adds	r7, #8
 8015700:	9308      	str	r3, [sp, #32]
 8015702:	3301      	adds	r3, #1
 8015704:	932d      	str	r3, [sp, #180]	; 0xb4
 8015706:	2b07      	cmp	r3, #7
 8015708:	dd08      	ble.n	801571c <_svfprintf_r+0xb0>
 801570a:	aa2c      	add	r2, sp, #176	; 0xb0
 801570c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801570e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015710:	f003 f900 	bl	8018914 <__ssprint_r>
 8015714:	2800      	cmp	r0, #0
 8015716:	d000      	beq.n	801571a <_svfprintf_r+0xae>
 8015718:	e2d9      	b.n	8015cce <_svfprintf_r+0x662>
 801571a:	af2f      	add	r7, sp, #188	; 0xbc
 801571c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801571e:	199b      	adds	r3, r3, r6
 8015720:	9315      	str	r3, [sp, #84]	; 0x54
 8015722:	782b      	ldrb	r3, [r5, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d101      	bne.n	801572c <_svfprintf_r+0xc0>
 8015728:	f001 f9e5 	bl	8016af6 <_svfprintf_r+0x148a>
 801572c:	1c6b      	adds	r3, r5, #1
 801572e:	221b      	movs	r2, #27
 8015730:	9311      	str	r3, [sp, #68]	; 0x44
 8015732:	2300      	movs	r3, #0
 8015734:	a91e      	add	r1, sp, #120	; 0x78
 8015736:	1852      	adds	r2, r2, r1
 8015738:	7013      	strb	r3, [r2, #0]
 801573a:	2201      	movs	r2, #1
 801573c:	001e      	movs	r6, r3
 801573e:	2520      	movs	r5, #32
 8015740:	4252      	negs	r2, r2
 8015742:	9208      	str	r2, [sp, #32]
 8015744:	9316      	str	r3, [sp, #88]	; 0x58
 8015746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015748:	781b      	ldrb	r3, [r3, #0]
 801574a:	930e      	str	r3, [sp, #56]	; 0x38
 801574c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801574e:	3301      	adds	r3, #1
 8015750:	9311      	str	r3, [sp, #68]	; 0x44
 8015752:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015754:	3820      	subs	r0, #32
 8015756:	285a      	cmp	r0, #90	; 0x5a
 8015758:	d901      	bls.n	801575e <_svfprintf_r+0xf2>
 801575a:	f000 fe3d 	bl	80163d8 <_svfprintf_r+0xd6c>
 801575e:	f7ea fced 	bl	800013c <__gnu_thumb1_case_shi>
 8015762:	009e      	.short	0x009e
 8015764:	063b063b 	.word	0x063b063b
 8015768:	063b00a7 	.word	0x063b00a7
 801576c:	063b063b 	.word	0x063b063b
 8015770:	063b0080 	.word	0x063b0080
 8015774:	00a9063b 	.word	0x00a9063b
 8015778:	063b00b3 	.word	0x063b00b3
 801577c:	00b900b1 	.word	0x00b900b1
 8015780:	00dd063b 	.word	0x00dd063b
 8015784:	00df00df 	.word	0x00df00df
 8015788:	00df00df 	.word	0x00df00df
 801578c:	00df00df 	.word	0x00df00df
 8015790:	00df00df 	.word	0x00df00df
 8015794:	063b00df 	.word	0x063b00df
 8015798:	063b063b 	.word	0x063b063b
 801579c:	063b063b 	.word	0x063b063b
 80157a0:	063b063b 	.word	0x063b063b
 80157a4:	063b0240 	.word	0x063b0240
 80157a8:	01fd010a 	.word	0x01fd010a
 80157ac:	02400240 	.word	0x02400240
 80157b0:	063b0240 	.word	0x063b0240
 80157b4:	063b063b 	.word	0x063b063b
 80157b8:	00f1063b 	.word	0x00f1063b
 80157bc:	063b063b 	.word	0x063b063b
 80157c0:	063b04e2 	.word	0x063b04e2
 80157c4:	063b063b 	.word	0x063b063b
 80157c8:	063b0537 	.word	0x063b0537
 80157cc:	063b0557 	.word	0x063b0557
 80157d0:	005d063b 	.word	0x005d063b
 80157d4:	063b063b 	.word	0x063b063b
 80157d8:	063b063b 	.word	0x063b063b
 80157dc:	063b063b 	.word	0x063b063b
 80157e0:	063b063b 	.word	0x063b063b
 80157e4:	063b0240 	.word	0x063b0240
 80157e8:	01ff010a 	.word	0x01ff010a
 80157ec:	02400240 	.word	0x02400240
 80157f0:	00f30240 	.word	0x00f30240
 80157f4:	010601ff 	.word	0x010601ff
 80157f8:	00ff063b 	.word	0x00ff063b
 80157fc:	04c5063b 	.word	0x04c5063b
 8015800:	052704e4 	.word	0x052704e4
 8015804:	063b0106 	.word	0x063b0106
 8015808:	fff20537 	.word	0xfff20537
 801580c:	063b0559 	.word	0x063b0559
 8015810:	0582063b 	.word	0x0582063b
 8015814:	fff2063b 	.word	0xfff2063b
 8015818:	3501      	adds	r5, #1
 801581a:	e761      	b.n	80156e0 <_svfprintf_r+0x74>
 801581c:	4bcb      	ldr	r3, [pc, #812]	; (8015b4c <_svfprintf_r+0x4e0>)
 801581e:	2220      	movs	r2, #32
 8015820:	931e      	str	r3, [sp, #120]	; 0x78
 8015822:	4032      	ands	r2, r6
 8015824:	d101      	bne.n	801582a <_svfprintf_r+0x1be>
 8015826:	f000 fd21 	bl	801626c <_svfprintf_r+0xc00>
 801582a:	2307      	movs	r3, #7
 801582c:	3407      	adds	r4, #7
 801582e:	439c      	bics	r4, r3
 8015830:	0023      	movs	r3, r4
 8015832:	3308      	adds	r3, #8
 8015834:	9312      	str	r3, [sp, #72]	; 0x48
 8015836:	6823      	ldr	r3, [r4, #0]
 8015838:	6864      	ldr	r4, [r4, #4]
 801583a:	9306      	str	r3, [sp, #24]
 801583c:	9407      	str	r4, [sp, #28]
 801583e:	07f3      	lsls	r3, r6, #31
 8015840:	d50a      	bpl.n	8015858 <_svfprintf_r+0x1ec>
 8015842:	9b06      	ldr	r3, [sp, #24]
 8015844:	9a07      	ldr	r2, [sp, #28]
 8015846:	4313      	orrs	r3, r2
 8015848:	d006      	beq.n	8015858 <_svfprintf_r+0x1ec>
 801584a:	2230      	movs	r2, #48	; 0x30
 801584c:	ab25      	add	r3, sp, #148	; 0x94
 801584e:	701a      	strb	r2, [r3, #0]
 8015850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015852:	705a      	strb	r2, [r3, #1]
 8015854:	2302      	movs	r3, #2
 8015856:	431e      	orrs	r6, r3
 8015858:	4bbd      	ldr	r3, [pc, #756]	; (8015b50 <_svfprintf_r+0x4e4>)
 801585a:	401e      	ands	r6, r3
 801585c:	2302      	movs	r3, #2
 801585e:	f000 fc74 	bl	801614a <_svfprintf_r+0xade>
 8015862:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015864:	f002 fc30 	bl	80180c8 <_localeconv_r>
 8015868:	6843      	ldr	r3, [r0, #4]
 801586a:	0018      	movs	r0, r3
 801586c:	931f      	str	r3, [sp, #124]	; 0x7c
 801586e:	f7ea fc53 	bl	8000118 <strlen>
 8015872:	901b      	str	r0, [sp, #108]	; 0x6c
 8015874:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015876:	f002 fc27 	bl	80180c8 <_localeconv_r>
 801587a:	6883      	ldr	r3, [r0, #8]
 801587c:	9313      	str	r3, [sp, #76]	; 0x4c
 801587e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015880:	2b00      	cmp	r3, #0
 8015882:	d100      	bne.n	8015886 <_svfprintf_r+0x21a>
 8015884:	e75f      	b.n	8015746 <_svfprintf_r+0xda>
 8015886:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015888:	2b00      	cmp	r3, #0
 801588a:	d100      	bne.n	801588e <_svfprintf_r+0x222>
 801588c:	e75b      	b.n	8015746 <_svfprintf_r+0xda>
 801588e:	781b      	ldrb	r3, [r3, #0]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d100      	bne.n	8015896 <_svfprintf_r+0x22a>
 8015894:	e757      	b.n	8015746 <_svfprintf_r+0xda>
 8015896:	2380      	movs	r3, #128	; 0x80
 8015898:	00db      	lsls	r3, r3, #3
 801589a:	431e      	orrs	r6, r3
 801589c:	e753      	b.n	8015746 <_svfprintf_r+0xda>
 801589e:	231b      	movs	r3, #27
 80158a0:	aa1e      	add	r2, sp, #120	; 0x78
 80158a2:	189b      	adds	r3, r3, r2
 80158a4:	781a      	ldrb	r2, [r3, #0]
 80158a6:	2a00      	cmp	r2, #0
 80158a8:	d000      	beq.n	80158ac <_svfprintf_r+0x240>
 80158aa:	e74c      	b.n	8015746 <_svfprintf_r+0xda>
 80158ac:	701d      	strb	r5, [r3, #0]
 80158ae:	e74a      	b.n	8015746 <_svfprintf_r+0xda>
 80158b0:	2301      	movs	r3, #1
 80158b2:	e7f2      	b.n	801589a <_svfprintf_r+0x22e>
 80158b4:	6823      	ldr	r3, [r4, #0]
 80158b6:	3404      	adds	r4, #4
 80158b8:	9316      	str	r3, [sp, #88]	; 0x58
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	db00      	blt.n	80158c0 <_svfprintf_r+0x254>
 80158be:	e742      	b.n	8015746 <_svfprintf_r+0xda>
 80158c0:	425b      	negs	r3, r3
 80158c2:	9316      	str	r3, [sp, #88]	; 0x58
 80158c4:	2304      	movs	r3, #4
 80158c6:	e7e8      	b.n	801589a <_svfprintf_r+0x22e>
 80158c8:	231b      	movs	r3, #27
 80158ca:	aa1e      	add	r2, sp, #120	; 0x78
 80158cc:	189b      	adds	r3, r3, r2
 80158ce:	222b      	movs	r2, #43	; 0x2b
 80158d0:	701a      	strb	r2, [r3, #0]
 80158d2:	e738      	b.n	8015746 <_svfprintf_r+0xda>
 80158d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80158d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158d8:	7812      	ldrb	r2, [r2, #0]
 80158da:	3301      	adds	r3, #1
 80158dc:	920e      	str	r2, [sp, #56]	; 0x38
 80158de:	2a2a      	cmp	r2, #42	; 0x2a
 80158e0:	d008      	beq.n	80158f4 <_svfprintf_r+0x288>
 80158e2:	2200      	movs	r2, #0
 80158e4:	9208      	str	r2, [sp, #32]
 80158e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80158e8:	001a      	movs	r2, r3
 80158ea:	3930      	subs	r1, #48	; 0x30
 80158ec:	2909      	cmp	r1, #9
 80158ee:	d90c      	bls.n	801590a <_svfprintf_r+0x29e>
 80158f0:	9211      	str	r2, [sp, #68]	; 0x44
 80158f2:	e72e      	b.n	8015752 <_svfprintf_r+0xe6>
 80158f4:	6821      	ldr	r1, [r4, #0]
 80158f6:	1d22      	adds	r2, r4, #4
 80158f8:	9108      	str	r1, [sp, #32]
 80158fa:	2900      	cmp	r1, #0
 80158fc:	da02      	bge.n	8015904 <_svfprintf_r+0x298>
 80158fe:	2101      	movs	r1, #1
 8015900:	4249      	negs	r1, r1
 8015902:	9108      	str	r1, [sp, #32]
 8015904:	0014      	movs	r4, r2
 8015906:	9311      	str	r3, [sp, #68]	; 0x44
 8015908:	e71d      	b.n	8015746 <_svfprintf_r+0xda>
 801590a:	200a      	movs	r0, #10
 801590c:	9a08      	ldr	r2, [sp, #32]
 801590e:	4342      	muls	r2, r0
 8015910:	1852      	adds	r2, r2, r1
 8015912:	9208      	str	r2, [sp, #32]
 8015914:	781a      	ldrb	r2, [r3, #0]
 8015916:	3301      	adds	r3, #1
 8015918:	920e      	str	r2, [sp, #56]	; 0x38
 801591a:	e7e4      	b.n	80158e6 <_svfprintf_r+0x27a>
 801591c:	2380      	movs	r3, #128	; 0x80
 801591e:	e7bc      	b.n	801589a <_svfprintf_r+0x22e>
 8015920:	2300      	movs	r3, #0
 8015922:	9316      	str	r3, [sp, #88]	; 0x58
 8015924:	220a      	movs	r2, #10
 8015926:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015928:	4353      	muls	r3, r2
 801592a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801592c:	3a30      	subs	r2, #48	; 0x30
 801592e:	18d3      	adds	r3, r2, r3
 8015930:	9316      	str	r3, [sp, #88]	; 0x58
 8015932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015934:	1c5a      	adds	r2, r3, #1
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	9211      	str	r2, [sp, #68]	; 0x44
 801593a:	930e      	str	r3, [sp, #56]	; 0x38
 801593c:	3b30      	subs	r3, #48	; 0x30
 801593e:	2b09      	cmp	r3, #9
 8015940:	d9f0      	bls.n	8015924 <_svfprintf_r+0x2b8>
 8015942:	e7d5      	b.n	80158f0 <_svfprintf_r+0x284>
 8015944:	2308      	movs	r3, #8
 8015946:	e7a8      	b.n	801589a <_svfprintf_r+0x22e>
 8015948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	2b68      	cmp	r3, #104	; 0x68
 801594e:	d105      	bne.n	801595c <_svfprintf_r+0x2f0>
 8015950:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015952:	3301      	adds	r3, #1
 8015954:	9311      	str	r3, [sp, #68]	; 0x44
 8015956:	2380      	movs	r3, #128	; 0x80
 8015958:	009b      	lsls	r3, r3, #2
 801595a:	e79e      	b.n	801589a <_svfprintf_r+0x22e>
 801595c:	2340      	movs	r3, #64	; 0x40
 801595e:	e79c      	b.n	801589a <_svfprintf_r+0x22e>
 8015960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	2b6c      	cmp	r3, #108	; 0x6c
 8015966:	d104      	bne.n	8015972 <_svfprintf_r+0x306>
 8015968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801596a:	3301      	adds	r3, #1
 801596c:	9311      	str	r3, [sp, #68]	; 0x44
 801596e:	432e      	orrs	r6, r5
 8015970:	e6e9      	b.n	8015746 <_svfprintf_r+0xda>
 8015972:	2310      	movs	r3, #16
 8015974:	e791      	b.n	801589a <_svfprintf_r+0x22e>
 8015976:	1d23      	adds	r3, r4, #4
 8015978:	6822      	ldr	r2, [r4, #0]
 801597a:	9312      	str	r3, [sp, #72]	; 0x48
 801597c:	ab3f      	add	r3, sp, #252	; 0xfc
 801597e:	701a      	strb	r2, [r3, #0]
 8015980:	221b      	movs	r2, #27
 8015982:	2000      	movs	r0, #0
 8015984:	a91e      	add	r1, sp, #120	; 0x78
 8015986:	1852      	adds	r2, r2, r1
 8015988:	7010      	strb	r0, [r2, #0]
 801598a:	2201      	movs	r2, #1
 801598c:	0005      	movs	r5, r0
 801598e:	900c      	str	r0, [sp, #48]	; 0x30
 8015990:	9208      	str	r2, [sp, #32]
 8015992:	9017      	str	r0, [sp, #92]	; 0x5c
 8015994:	9010      	str	r0, [sp, #64]	; 0x40
 8015996:	900f      	str	r0, [sp, #60]	; 0x3c
 8015998:	9309      	str	r3, [sp, #36]	; 0x24
 801599a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801599c:	9a08      	ldr	r2, [sp, #32]
 801599e:	9318      	str	r3, [sp, #96]	; 0x60
 80159a0:	4293      	cmp	r3, r2
 80159a2:	da00      	bge.n	80159a6 <_svfprintf_r+0x33a>
 80159a4:	9218      	str	r2, [sp, #96]	; 0x60
 80159a6:	231b      	movs	r3, #27
 80159a8:	aa1e      	add	r2, sp, #120	; 0x78
 80159aa:	189b      	adds	r3, r3, r2
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	1e5a      	subs	r2, r3, #1
 80159b0:	4193      	sbcs	r3, r2
 80159b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80159b4:	18d3      	adds	r3, r2, r3
 80159b6:	9318      	str	r3, [sp, #96]	; 0x60
 80159b8:	2302      	movs	r3, #2
 80159ba:	4033      	ands	r3, r6
 80159bc:	9320      	str	r3, [sp, #128]	; 0x80
 80159be:	d002      	beq.n	80159c6 <_svfprintf_r+0x35a>
 80159c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80159c2:	3302      	adds	r3, #2
 80159c4:	9318      	str	r3, [sp, #96]	; 0x60
 80159c6:	2384      	movs	r3, #132	; 0x84
 80159c8:	4033      	ands	r3, r6
 80159ca:	9321      	str	r3, [sp, #132]	; 0x84
 80159cc:	d121      	bne.n	8015a12 <_svfprintf_r+0x3a6>
 80159ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80159d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80159d2:	1a9c      	subs	r4, r3, r2
 80159d4:	2c00      	cmp	r4, #0
 80159d6:	dd1c      	ble.n	8015a12 <_svfprintf_r+0x3a6>
 80159d8:	0039      	movs	r1, r7
 80159da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80159dc:	485d      	ldr	r0, [pc, #372]	; (8015b54 <_svfprintf_r+0x4e8>)
 80159de:	9322      	str	r3, [sp, #136]	; 0x88
 80159e0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80159e2:	3301      	adds	r3, #1
 80159e4:	3108      	adds	r1, #8
 80159e6:	6038      	str	r0, [r7, #0]
 80159e8:	2c10      	cmp	r4, #16
 80159ea:	dd01      	ble.n	80159f0 <_svfprintf_r+0x384>
 80159ec:	f000 fd08 	bl	8016400 <_svfprintf_r+0xd94>
 80159f0:	607c      	str	r4, [r7, #4]
 80159f2:	18a4      	adds	r4, r4, r2
 80159f4:	942e      	str	r4, [sp, #184]	; 0xb8
 80159f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80159f8:	000f      	movs	r7, r1
 80159fa:	2b07      	cmp	r3, #7
 80159fc:	dd09      	ble.n	8015a12 <_svfprintf_r+0x3a6>
 80159fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a04:	f002 ff86 	bl	8018914 <__ssprint_r>
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	d001      	beq.n	8015a10 <_svfprintf_r+0x3a4>
 8015a0c:	f001 f852 	bl	8016ab4 <_svfprintf_r+0x1448>
 8015a10:	af2f      	add	r7, sp, #188	; 0xbc
 8015a12:	231b      	movs	r3, #27
 8015a14:	aa1e      	add	r2, sp, #120	; 0x78
 8015a16:	189b      	adds	r3, r3, r2
 8015a18:	781a      	ldrb	r2, [r3, #0]
 8015a1a:	2a00      	cmp	r2, #0
 8015a1c:	d017      	beq.n	8015a4e <_svfprintf_r+0x3e2>
 8015a1e:	603b      	str	r3, [r7, #0]
 8015a20:	2301      	movs	r3, #1
 8015a22:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015a24:	607b      	str	r3, [r7, #4]
 8015a26:	0013      	movs	r3, r2
 8015a28:	3301      	adds	r3, #1
 8015a2a:	932e      	str	r3, [sp, #184]	; 0xb8
 8015a2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a2e:	3708      	adds	r7, #8
 8015a30:	9322      	str	r3, [sp, #136]	; 0x88
 8015a32:	3301      	adds	r3, #1
 8015a34:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a36:	2b07      	cmp	r3, #7
 8015a38:	dd09      	ble.n	8015a4e <_svfprintf_r+0x3e2>
 8015a3a:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a40:	f002 ff68 	bl	8018914 <__ssprint_r>
 8015a44:	2800      	cmp	r0, #0
 8015a46:	d001      	beq.n	8015a4c <_svfprintf_r+0x3e0>
 8015a48:	f001 f834 	bl	8016ab4 <_svfprintf_r+0x1448>
 8015a4c:	af2f      	add	r7, sp, #188	; 0xbc
 8015a4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d019      	beq.n	8015a88 <_svfprintf_r+0x41c>
 8015a54:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015a56:	9320      	str	r3, [sp, #128]	; 0x80
 8015a58:	ab25      	add	r3, sp, #148	; 0x94
 8015a5a:	603b      	str	r3, [r7, #0]
 8015a5c:	2302      	movs	r3, #2
 8015a5e:	607b      	str	r3, [r7, #4]
 8015a60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a62:	3708      	adds	r7, #8
 8015a64:	3302      	adds	r3, #2
 8015a66:	932e      	str	r3, [sp, #184]	; 0xb8
 8015a68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a6a:	9320      	str	r3, [sp, #128]	; 0x80
 8015a6c:	3301      	adds	r3, #1
 8015a6e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a70:	2b07      	cmp	r3, #7
 8015a72:	dd09      	ble.n	8015a88 <_svfprintf_r+0x41c>
 8015a74:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a7a:	f002 ff4b 	bl	8018914 <__ssprint_r>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d001      	beq.n	8015a86 <_svfprintf_r+0x41a>
 8015a82:	f001 f817 	bl	8016ab4 <_svfprintf_r+0x1448>
 8015a86:	af2f      	add	r7, sp, #188	; 0xbc
 8015a88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a8a:	2b80      	cmp	r3, #128	; 0x80
 8015a8c:	d121      	bne.n	8015ad2 <_svfprintf_r+0x466>
 8015a8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015a90:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015a92:	1a9c      	subs	r4, r3, r2
 8015a94:	2c00      	cmp	r4, #0
 8015a96:	dd1c      	ble.n	8015ad2 <_svfprintf_r+0x466>
 8015a98:	0039      	movs	r1, r7
 8015a9a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a9c:	482e      	ldr	r0, [pc, #184]	; (8015b58 <_svfprintf_r+0x4ec>)
 8015a9e:	9320      	str	r3, [sp, #128]	; 0x80
 8015aa0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	3108      	adds	r1, #8
 8015aa6:	6038      	str	r0, [r7, #0]
 8015aa8:	2c10      	cmp	r4, #16
 8015aaa:	dd01      	ble.n	8015ab0 <_svfprintf_r+0x444>
 8015aac:	f000 fcbc 	bl	8016428 <_svfprintf_r+0xdbc>
 8015ab0:	607c      	str	r4, [r7, #4]
 8015ab2:	18a4      	adds	r4, r4, r2
 8015ab4:	942e      	str	r4, [sp, #184]	; 0xb8
 8015ab6:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ab8:	000f      	movs	r7, r1
 8015aba:	2b07      	cmp	r3, #7
 8015abc:	dd09      	ble.n	8015ad2 <_svfprintf_r+0x466>
 8015abe:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ac2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ac4:	f002 ff26 	bl	8018914 <__ssprint_r>
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	d001      	beq.n	8015ad0 <_svfprintf_r+0x464>
 8015acc:	f000 fff2 	bl	8016ab4 <_svfprintf_r+0x1448>
 8015ad0:	af2f      	add	r7, sp, #188	; 0xbc
 8015ad2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ad4:	9a08      	ldr	r2, [sp, #32]
 8015ad6:	1a9c      	subs	r4, r3, r2
 8015ad8:	2c00      	cmp	r4, #0
 8015ada:	dd1c      	ble.n	8015b16 <_svfprintf_r+0x4aa>
 8015adc:	0039      	movs	r1, r7
 8015ade:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015ae0:	481d      	ldr	r0, [pc, #116]	; (8015b58 <_svfprintf_r+0x4ec>)
 8015ae2:	9317      	str	r3, [sp, #92]	; 0x5c
 8015ae4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	3108      	adds	r1, #8
 8015aea:	6038      	str	r0, [r7, #0]
 8015aec:	2c10      	cmp	r4, #16
 8015aee:	dd01      	ble.n	8015af4 <_svfprintf_r+0x488>
 8015af0:	f000 fcb4 	bl	801645c <_svfprintf_r+0xdf0>
 8015af4:	18a2      	adds	r2, r4, r2
 8015af6:	607c      	str	r4, [r7, #4]
 8015af8:	922e      	str	r2, [sp, #184]	; 0xb8
 8015afa:	932d      	str	r3, [sp, #180]	; 0xb4
 8015afc:	000f      	movs	r7, r1
 8015afe:	2b07      	cmp	r3, #7
 8015b00:	dd09      	ble.n	8015b16 <_svfprintf_r+0x4aa>
 8015b02:	aa2c      	add	r2, sp, #176	; 0xb0
 8015b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b08:	f002 ff04 	bl	8018914 <__ssprint_r>
 8015b0c:	2800      	cmp	r0, #0
 8015b0e:	d001      	beq.n	8015b14 <_svfprintf_r+0x4a8>
 8015b10:	f000 ffd0 	bl	8016ab4 <_svfprintf_r+0x1448>
 8015b14:	af2f      	add	r7, sp, #188	; 0xbc
 8015b16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015b18:	9317      	str	r3, [sp, #92]	; 0x5c
 8015b1a:	05f3      	lsls	r3, r6, #23
 8015b1c:	d501      	bpl.n	8015b22 <_svfprintf_r+0x4b6>
 8015b1e:	f000 fcb1 	bl	8016484 <_svfprintf_r+0xe18>
 8015b22:	9a08      	ldr	r2, [sp, #32]
 8015b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b26:	4694      	mov	ip, r2
 8015b28:	603b      	str	r3, [r7, #0]
 8015b2a:	9b08      	ldr	r3, [sp, #32]
 8015b2c:	607b      	str	r3, [r7, #4]
 8015b2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015b30:	4463      	add	r3, ip
 8015b32:	932e      	str	r3, [sp, #184]	; 0xb8
 8015b34:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015b36:	9308      	str	r3, [sp, #32]
 8015b38:	3301      	adds	r3, #1
 8015b3a:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b3c:	2b07      	cmp	r3, #7
 8015b3e:	dd01      	ble.n	8015b44 <_svfprintf_r+0x4d8>
 8015b40:	f000 fd94 	bl	801666c <_svfprintf_r+0x1000>
 8015b44:	3708      	adds	r7, #8
 8015b46:	f000 fce4 	bl	8016512 <_svfprintf_r+0xea6>
 8015b4a:	46c0      	nop			; (mov r8, r8)
 8015b4c:	0801bb21 	.word	0x0801bb21
 8015b50:	fffffbff 	.word	0xfffffbff
 8015b54:	0801bb34 	.word	0x0801bb34
 8015b58:	0801bb44 	.word	0x0801bb44
 8015b5c:	2310      	movs	r3, #16
 8015b5e:	431e      	orrs	r6, r3
 8015b60:	06b3      	lsls	r3, r6, #26
 8015b62:	d52c      	bpl.n	8015bbe <_svfprintf_r+0x552>
 8015b64:	2307      	movs	r3, #7
 8015b66:	3407      	adds	r4, #7
 8015b68:	439c      	bics	r4, r3
 8015b6a:	0023      	movs	r3, r4
 8015b6c:	3308      	adds	r3, #8
 8015b6e:	9312      	str	r3, [sp, #72]	; 0x48
 8015b70:	6823      	ldr	r3, [r4, #0]
 8015b72:	6864      	ldr	r4, [r4, #4]
 8015b74:	9306      	str	r3, [sp, #24]
 8015b76:	9407      	str	r4, [sp, #28]
 8015b78:	9b07      	ldr	r3, [sp, #28]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	da0b      	bge.n	8015b96 <_svfprintf_r+0x52a>
 8015b7e:	9906      	ldr	r1, [sp, #24]
 8015b80:	9a07      	ldr	r2, [sp, #28]
 8015b82:	2400      	movs	r4, #0
 8015b84:	424b      	negs	r3, r1
 8015b86:	4194      	sbcs	r4, r2
 8015b88:	9306      	str	r3, [sp, #24]
 8015b8a:	9407      	str	r4, [sp, #28]
 8015b8c:	231b      	movs	r3, #27
 8015b8e:	aa1e      	add	r2, sp, #120	; 0x78
 8015b90:	189b      	adds	r3, r3, r2
 8015b92:	222d      	movs	r2, #45	; 0x2d
 8015b94:	701a      	strb	r2, [r3, #0]
 8015b96:	9b08      	ldr	r3, [sp, #32]
 8015b98:	3301      	adds	r3, #1
 8015b9a:	d000      	beq.n	8015b9e <_svfprintf_r+0x532>
 8015b9c:	e382      	b.n	80162a4 <_svfprintf_r+0xc38>
 8015b9e:	9b07      	ldr	r3, [sp, #28]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d000      	beq.n	8015ba6 <_svfprintf_r+0x53a>
 8015ba4:	e3b0      	b.n	8016308 <_svfprintf_r+0xc9c>
 8015ba6:	9b06      	ldr	r3, [sp, #24]
 8015ba8:	2b09      	cmp	r3, #9
 8015baa:	d900      	bls.n	8015bae <_svfprintf_r+0x542>
 8015bac:	e3ac      	b.n	8016308 <_svfprintf_r+0xc9c>
 8015bae:	23e7      	movs	r3, #231	; 0xe7
 8015bb0:	aa1e      	add	r2, sp, #120	; 0x78
 8015bb2:	189b      	adds	r3, r3, r2
 8015bb4:	9a06      	ldr	r2, [sp, #24]
 8015bb6:	3230      	adds	r2, #48	; 0x30
 8015bb8:	701a      	strb	r2, [r3, #0]
 8015bba:	9309      	str	r3, [sp, #36]	; 0x24
 8015bbc:	e395      	b.n	80162ea <_svfprintf_r+0xc7e>
 8015bbe:	1d23      	adds	r3, r4, #4
 8015bc0:	9312      	str	r3, [sp, #72]	; 0x48
 8015bc2:	06f3      	lsls	r3, r6, #27
 8015bc4:	d504      	bpl.n	8015bd0 <_svfprintf_r+0x564>
 8015bc6:	6823      	ldr	r3, [r4, #0]
 8015bc8:	9306      	str	r3, [sp, #24]
 8015bca:	17db      	asrs	r3, r3, #31
 8015bcc:	9307      	str	r3, [sp, #28]
 8015bce:	e7d3      	b.n	8015b78 <_svfprintf_r+0x50c>
 8015bd0:	6823      	ldr	r3, [r4, #0]
 8015bd2:	0672      	lsls	r2, r6, #25
 8015bd4:	d501      	bpl.n	8015bda <_svfprintf_r+0x56e>
 8015bd6:	b21b      	sxth	r3, r3
 8015bd8:	e7f6      	b.n	8015bc8 <_svfprintf_r+0x55c>
 8015bda:	05b2      	lsls	r2, r6, #22
 8015bdc:	d5f4      	bpl.n	8015bc8 <_svfprintf_r+0x55c>
 8015bde:	b25b      	sxtb	r3, r3
 8015be0:	e7f2      	b.n	8015bc8 <_svfprintf_r+0x55c>
 8015be2:	2307      	movs	r3, #7
 8015be4:	3407      	adds	r4, #7
 8015be6:	439c      	bics	r4, r3
 8015be8:	0023      	movs	r3, r4
 8015bea:	2201      	movs	r2, #1
 8015bec:	3308      	adds	r3, #8
 8015bee:	9312      	str	r3, [sp, #72]	; 0x48
 8015bf0:	6823      	ldr	r3, [r4, #0]
 8015bf2:	4252      	negs	r2, r2
 8015bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8015bf6:	6863      	ldr	r3, [r4, #4]
 8015bf8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8015bfa:	005c      	lsls	r4, r3, #1
 8015bfc:	0864      	lsrs	r4, r4, #1
 8015bfe:	9319      	str	r3, [sp, #100]	; 0x64
 8015c00:	0028      	movs	r0, r5
 8015c02:	4bcf      	ldr	r3, [pc, #828]	; (8015f40 <_svfprintf_r+0x8d4>)
 8015c04:	0021      	movs	r1, r4
 8015c06:	f7ec ffe9 	bl	8002bdc <__aeabi_dcmpun>
 8015c0a:	2800      	cmp	r0, #0
 8015c0c:	d125      	bne.n	8015c5a <_svfprintf_r+0x5ee>
 8015c0e:	2201      	movs	r2, #1
 8015c10:	4bcb      	ldr	r3, [pc, #812]	; (8015f40 <_svfprintf_r+0x8d4>)
 8015c12:	4252      	negs	r2, r2
 8015c14:	0028      	movs	r0, r5
 8015c16:	0021      	movs	r1, r4
 8015c18:	f7ea fc30 	bl	800047c <__aeabi_dcmple>
 8015c1c:	2800      	cmp	r0, #0
 8015c1e:	d11c      	bne.n	8015c5a <_svfprintf_r+0x5ee>
 8015c20:	2200      	movs	r2, #0
 8015c22:	2300      	movs	r3, #0
 8015c24:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015c26:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015c28:	f7ea fc1e 	bl	8000468 <__aeabi_dcmplt>
 8015c2c:	2800      	cmp	r0, #0
 8015c2e:	d004      	beq.n	8015c3a <_svfprintf_r+0x5ce>
 8015c30:	231b      	movs	r3, #27
 8015c32:	aa1e      	add	r2, sp, #120	; 0x78
 8015c34:	189b      	adds	r3, r3, r2
 8015c36:	222d      	movs	r2, #45	; 0x2d
 8015c38:	701a      	strb	r2, [r3, #0]
 8015c3a:	4bc2      	ldr	r3, [pc, #776]	; (8015f44 <_svfprintf_r+0x8d8>)
 8015c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8015c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c40:	2b47      	cmp	r3, #71	; 0x47
 8015c42:	dc01      	bgt.n	8015c48 <_svfprintf_r+0x5dc>
 8015c44:	4bc0      	ldr	r3, [pc, #768]	; (8015f48 <_svfprintf_r+0x8dc>)
 8015c46:	9309      	str	r3, [sp, #36]	; 0x24
 8015c48:	2380      	movs	r3, #128	; 0x80
 8015c4a:	439e      	bics	r6, r3
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8015c50:	3303      	adds	r3, #3
 8015c52:	9308      	str	r3, [sp, #32]
 8015c54:	2300      	movs	r3, #0
 8015c56:	9317      	str	r3, [sp, #92]	; 0x5c
 8015c58:	e34f      	b.n	80162fa <_svfprintf_r+0xc8e>
 8015c5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c5e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015c60:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015c62:	f7ec ffbb 	bl	8002bdc <__aeabi_dcmpun>
 8015c66:	2800      	cmp	r0, #0
 8015c68:	d00e      	beq.n	8015c88 <_svfprintf_r+0x61c>
 8015c6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	da04      	bge.n	8015c7a <_svfprintf_r+0x60e>
 8015c70:	231b      	movs	r3, #27
 8015c72:	aa1e      	add	r2, sp, #120	; 0x78
 8015c74:	189b      	adds	r3, r3, r2
 8015c76:	222d      	movs	r2, #45	; 0x2d
 8015c78:	701a      	strb	r2, [r3, #0]
 8015c7a:	4bb4      	ldr	r3, [pc, #720]	; (8015f4c <_svfprintf_r+0x8e0>)
 8015c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8015c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c80:	2b47      	cmp	r3, #71	; 0x47
 8015c82:	dce1      	bgt.n	8015c48 <_svfprintf_r+0x5dc>
 8015c84:	4bb2      	ldr	r3, [pc, #712]	; (8015f50 <_svfprintf_r+0x8e4>)
 8015c86:	e7de      	b.n	8015c46 <_svfprintf_r+0x5da>
 8015c88:	2320      	movs	r3, #32
 8015c8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c8c:	439a      	bics	r2, r3
 8015c8e:	920f      	str	r2, [sp, #60]	; 0x3c
 8015c90:	2a41      	cmp	r2, #65	; 0x41
 8015c92:	d124      	bne.n	8015cde <_svfprintf_r+0x672>
 8015c94:	2230      	movs	r2, #48	; 0x30
 8015c96:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015c98:	ab25      	add	r3, sp, #148	; 0x94
 8015c9a:	701a      	strb	r2, [r3, #0]
 8015c9c:	3228      	adds	r2, #40	; 0x28
 8015c9e:	2961      	cmp	r1, #97	; 0x61
 8015ca0:	d100      	bne.n	8015ca4 <_svfprintf_r+0x638>
 8015ca2:	3220      	adds	r2, #32
 8015ca4:	705a      	strb	r2, [r3, #1]
 8015ca6:	2302      	movs	r3, #2
 8015ca8:	431e      	orrs	r6, r3
 8015caa:	9b08      	ldr	r3, [sp, #32]
 8015cac:	2b63      	cmp	r3, #99	; 0x63
 8015cae:	dc00      	bgt.n	8015cb2 <_svfprintf_r+0x646>
 8015cb0:	e09e      	b.n	8015df0 <_svfprintf_r+0x784>
 8015cb2:	1c59      	adds	r1, r3, #1
 8015cb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015cb6:	f7fe f8e1 	bl	8013e7c <_malloc_r>
 8015cba:	9009      	str	r0, [sp, #36]	; 0x24
 8015cbc:	2800      	cmp	r0, #0
 8015cbe:	d000      	beq.n	8015cc2 <_svfprintf_r+0x656>
 8015cc0:	e09b      	b.n	8015dfa <_svfprintf_r+0x78e>
 8015cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cc4:	899a      	ldrh	r2, [r3, #12]
 8015cc6:	2340      	movs	r3, #64	; 0x40
 8015cc8:	4313      	orrs	r3, r2
 8015cca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ccc:	8193      	strh	r3, [r2, #12]
 8015cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cd0:	899b      	ldrh	r3, [r3, #12]
 8015cd2:	065b      	lsls	r3, r3, #25
 8015cd4:	d400      	bmi.n	8015cd8 <_svfprintf_r+0x66c>
 8015cd6:	e4ee      	b.n	80156b6 <_svfprintf_r+0x4a>
 8015cd8:	2301      	movs	r3, #1
 8015cda:	425b      	negs	r3, r3
 8015cdc:	e4ea      	b.n	80156b4 <_svfprintf_r+0x48>
 8015cde:	9b08      	ldr	r3, [sp, #32]
 8015ce0:	900c      	str	r0, [sp, #48]	; 0x30
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	d100      	bne.n	8015ce8 <_svfprintf_r+0x67c>
 8015ce6:	e08b      	b.n	8015e00 <_svfprintf_r+0x794>
 8015ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cea:	2b47      	cmp	r3, #71	; 0x47
 8015cec:	d103      	bne.n	8015cf6 <_svfprintf_r+0x68a>
 8015cee:	9b08      	ldr	r3, [sp, #32]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d100      	bne.n	8015cf6 <_svfprintf_r+0x68a>
 8015cf4:	e087      	b.n	8015e06 <_svfprintf_r+0x79a>
 8015cf6:	2380      	movs	r3, #128	; 0x80
 8015cf8:	005b      	lsls	r3, r3, #1
 8015cfa:	4333      	orrs	r3, r6
 8015cfc:	9320      	str	r3, [sp, #128]	; 0x80
 8015cfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d00:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	db00      	blt.n	8015d08 <_svfprintf_r+0x69c>
 8015d06:	e082      	b.n	8015e0e <_svfprintf_r+0x7a2>
 8015d08:	2280      	movs	r2, #128	; 0x80
 8015d0a:	0612      	lsls	r2, r2, #24
 8015d0c:	4694      	mov	ip, r2
 8015d0e:	4463      	add	r3, ip
 8015d10:	930d      	str	r3, [sp, #52]	; 0x34
 8015d12:	232d      	movs	r3, #45	; 0x2d
 8015d14:	9322      	str	r3, [sp, #136]	; 0x88
 8015d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d18:	2b41      	cmp	r3, #65	; 0x41
 8015d1a:	d000      	beq.n	8015d1e <_svfprintf_r+0x6b2>
 8015d1c:	e105      	b.n	8015f2a <_svfprintf_r+0x8be>
 8015d1e:	aa26      	add	r2, sp, #152	; 0x98
 8015d20:	0020      	movs	r0, r4
 8015d22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015d24:	f002 fdc4 	bl	80188b0 <frexp>
 8015d28:	23ff      	movs	r3, #255	; 0xff
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	059b      	lsls	r3, r3, #22
 8015d2e:	f7ec f99b 	bl	8002068 <__aeabi_dmul>
 8015d32:	2200      	movs	r2, #0
 8015d34:	2300      	movs	r3, #0
 8015d36:	0004      	movs	r4, r0
 8015d38:	000d      	movs	r5, r1
 8015d3a:	f7ea fb8f 	bl	800045c <__aeabi_dcmpeq>
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	d001      	beq.n	8015d46 <_svfprintf_r+0x6da>
 8015d42:	2301      	movs	r3, #1
 8015d44:	9326      	str	r3, [sp, #152]	; 0x98
 8015d46:	4b83      	ldr	r3, [pc, #524]	; (8015f54 <_svfprintf_r+0x8e8>)
 8015d48:	9317      	str	r3, [sp, #92]	; 0x5c
 8015d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d4c:	2b61      	cmp	r3, #97	; 0x61
 8015d4e:	d101      	bne.n	8015d54 <_svfprintf_r+0x6e8>
 8015d50:	4b81      	ldr	r3, [pc, #516]	; (8015f58 <_svfprintf_r+0x8ec>)
 8015d52:	9317      	str	r3, [sp, #92]	; 0x5c
 8015d54:	9b08      	ldr	r3, [sp, #32]
 8015d56:	3b01      	subs	r3, #1
 8015d58:	9310      	str	r3, [sp, #64]	; 0x40
 8015d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d5c:	9318      	str	r3, [sp, #96]	; 0x60
 8015d5e:	2200      	movs	r2, #0
 8015d60:	4b7e      	ldr	r3, [pc, #504]	; (8015f5c <_svfprintf_r+0x8f0>)
 8015d62:	0020      	movs	r0, r4
 8015d64:	0029      	movs	r1, r5
 8015d66:	f7ec f97f 	bl	8002068 <__aeabi_dmul>
 8015d6a:	000d      	movs	r5, r1
 8015d6c:	0004      	movs	r4, r0
 8015d6e:	f7ec ff51 	bl	8002c14 <__aeabi_d2iz>
 8015d72:	9021      	str	r0, [sp, #132]	; 0x84
 8015d74:	f7ec ff84 	bl	8002c80 <__aeabi_i2d>
 8015d78:	0002      	movs	r2, r0
 8015d7a:	000b      	movs	r3, r1
 8015d7c:	0020      	movs	r0, r4
 8015d7e:	0029      	movs	r1, r5
 8015d80:	f7ec fbe4 	bl	800254c <__aeabi_dsub>
 8015d84:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015d86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d88:	3301      	adds	r3, #1
 8015d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8015d8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d8e:	0004      	movs	r4, r0
 8015d90:	5c9b      	ldrb	r3, [r3, r2]
 8015d92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015d94:	000d      	movs	r5, r1
 8015d96:	7013      	strb	r3, [r2, #0]
 8015d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d9a:	9323      	str	r3, [sp, #140]	; 0x8c
 8015d9c:	3301      	adds	r3, #1
 8015d9e:	d00a      	beq.n	8015db6 <_svfprintf_r+0x74a>
 8015da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015da2:	2200      	movs	r2, #0
 8015da4:	3b01      	subs	r3, #1
 8015da6:	9310      	str	r3, [sp, #64]	; 0x40
 8015da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015daa:	9318      	str	r3, [sp, #96]	; 0x60
 8015dac:	2300      	movs	r3, #0
 8015dae:	f7ea fb55 	bl	800045c <__aeabi_dcmpeq>
 8015db2:	2800      	cmp	r0, #0
 8015db4:	d0d3      	beq.n	8015d5e <_svfprintf_r+0x6f2>
 8015db6:	2200      	movs	r2, #0
 8015db8:	4b69      	ldr	r3, [pc, #420]	; (8015f60 <_svfprintf_r+0x8f4>)
 8015dba:	0020      	movs	r0, r4
 8015dbc:	0029      	movs	r1, r5
 8015dbe:	f7ea fb67 	bl	8000490 <__aeabi_dcmpgt>
 8015dc2:	2800      	cmp	r0, #0
 8015dc4:	d126      	bne.n	8015e14 <_svfprintf_r+0x7a8>
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	4b65      	ldr	r3, [pc, #404]	; (8015f60 <_svfprintf_r+0x8f4>)
 8015dca:	0020      	movs	r0, r4
 8015dcc:	0029      	movs	r1, r5
 8015dce:	f7ea fb45 	bl	800045c <__aeabi_dcmpeq>
 8015dd2:	2800      	cmp	r0, #0
 8015dd4:	d002      	beq.n	8015ddc <_svfprintf_r+0x770>
 8015dd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015dd8:	07db      	lsls	r3, r3, #31
 8015dda:	d41b      	bmi.n	8015e14 <_svfprintf_r+0x7a8>
 8015ddc:	2130      	movs	r1, #48	; 0x30
 8015dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015de0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015de2:	1898      	adds	r0, r3, r2
 8015de4:	930d      	str	r3, [sp, #52]	; 0x34
 8015de6:	1ac2      	subs	r2, r0, r3
 8015de8:	d426      	bmi.n	8015e38 <_svfprintf_r+0x7cc>
 8015dea:	7019      	strb	r1, [r3, #0]
 8015dec:	3301      	adds	r3, #1
 8015dee:	e7f9      	b.n	8015de4 <_svfprintf_r+0x778>
 8015df0:	2300      	movs	r3, #0
 8015df2:	930c      	str	r3, [sp, #48]	; 0x30
 8015df4:	ab3f      	add	r3, sp, #252	; 0xfc
 8015df6:	9309      	str	r3, [sp, #36]	; 0x24
 8015df8:	e77d      	b.n	8015cf6 <_svfprintf_r+0x68a>
 8015dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8015dfe:	e77a      	b.n	8015cf6 <_svfprintf_r+0x68a>
 8015e00:	2306      	movs	r3, #6
 8015e02:	9308      	str	r3, [sp, #32]
 8015e04:	e777      	b.n	8015cf6 <_svfprintf_r+0x68a>
 8015e06:	9b08      	ldr	r3, [sp, #32]
 8015e08:	930c      	str	r3, [sp, #48]	; 0x30
 8015e0a:	2301      	movs	r3, #1
 8015e0c:	e7f9      	b.n	8015e02 <_svfprintf_r+0x796>
 8015e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8015e10:	2300      	movs	r3, #0
 8015e12:	e77f      	b.n	8015d14 <_svfprintf_r+0x6a8>
 8015e14:	2030      	movs	r0, #48	; 0x30
 8015e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e18:	932a      	str	r3, [sp, #168]	; 0xa8
 8015e1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e1c:	7bda      	ldrb	r2, [r3, #15]
 8015e1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015e20:	3b01      	subs	r3, #1
 8015e22:	932a      	str	r3, [sp, #168]	; 0xa8
 8015e24:	7819      	ldrb	r1, [r3, #0]
 8015e26:	4291      	cmp	r1, r2
 8015e28:	d07d      	beq.n	8015f26 <_svfprintf_r+0x8ba>
 8015e2a:	1c4a      	adds	r2, r1, #1
 8015e2c:	b2d2      	uxtb	r2, r2
 8015e2e:	2939      	cmp	r1, #57	; 0x39
 8015e30:	d101      	bne.n	8015e36 <_svfprintf_r+0x7ca>
 8015e32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015e34:	7a92      	ldrb	r2, [r2, #10]
 8015e36:	701a      	strb	r2, [r3, #0]
 8015e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e3c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015e3e:	1a9b      	subs	r3, r3, r2
 8015e40:	930d      	str	r3, [sp, #52]	; 0x34
 8015e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e44:	2b47      	cmp	r3, #71	; 0x47
 8015e46:	d000      	beq.n	8015e4a <_svfprintf_r+0x7de>
 8015e48:	e0d2      	b.n	8015ff0 <_svfprintf_r+0x984>
 8015e4a:	1ceb      	adds	r3, r5, #3
 8015e4c:	db03      	blt.n	8015e56 <_svfprintf_r+0x7ea>
 8015e4e:	9b08      	ldr	r3, [sp, #32]
 8015e50:	42ab      	cmp	r3, r5
 8015e52:	db00      	blt.n	8015e56 <_svfprintf_r+0x7ea>
 8015e54:	e0fd      	b.n	8016052 <_svfprintf_r+0x9e6>
 8015e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e58:	3b02      	subs	r3, #2
 8015e5a:	930e      	str	r3, [sp, #56]	; 0x38
 8015e5c:	2238      	movs	r2, #56	; 0x38
 8015e5e:	466b      	mov	r3, sp
 8015e60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015e62:	189b      	adds	r3, r3, r2
 8015e64:	3a18      	subs	r2, #24
 8015e66:	4391      	bics	r1, r2
 8015e68:	1e6c      	subs	r4, r5, #1
 8015e6a:	000a      	movs	r2, r1
 8015e6c:	9426      	str	r4, [sp, #152]	; 0x98
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	2100      	movs	r1, #0
 8015e72:	2a41      	cmp	r2, #65	; 0x41
 8015e74:	d102      	bne.n	8015e7c <_svfprintf_r+0x810>
 8015e76:	330f      	adds	r3, #15
 8015e78:	b2db      	uxtb	r3, r3
 8015e7a:	3101      	adds	r1, #1
 8015e7c:	aa28      	add	r2, sp, #160	; 0xa0
 8015e7e:	7013      	strb	r3, [r2, #0]
 8015e80:	232b      	movs	r3, #43	; 0x2b
 8015e82:	2c00      	cmp	r4, #0
 8015e84:	da02      	bge.n	8015e8c <_svfprintf_r+0x820>
 8015e86:	2401      	movs	r4, #1
 8015e88:	232d      	movs	r3, #45	; 0x2d
 8015e8a:	1b64      	subs	r4, r4, r5
 8015e8c:	7053      	strb	r3, [r2, #1]
 8015e8e:	2c09      	cmp	r4, #9
 8015e90:	dc00      	bgt.n	8015e94 <_svfprintf_r+0x828>
 8015e92:	e0c7      	b.n	8016024 <_svfprintf_r+0x9b8>
 8015e94:	2537      	movs	r5, #55	; 0x37
 8015e96:	ab1e      	add	r3, sp, #120	; 0x78
 8015e98:	18ed      	adds	r5, r5, r3
 8015e9a:	1e6b      	subs	r3, r5, #1
 8015e9c:	0020      	movs	r0, r4
 8015e9e:	210a      	movs	r1, #10
 8015ea0:	9308      	str	r3, [sp, #32]
 8015ea2:	f7ea fac5 	bl	8000430 <__aeabi_idivmod>
 8015ea6:	1e6b      	subs	r3, r5, #1
 8015ea8:	3130      	adds	r1, #48	; 0x30
 8015eaa:	7019      	strb	r1, [r3, #0]
 8015eac:	0020      	movs	r0, r4
 8015eae:	210a      	movs	r1, #10
 8015eb0:	f7ea f9d8 	bl	8000264 <__divsi3>
 8015eb4:	0004      	movs	r4, r0
 8015eb6:	2809      	cmp	r0, #9
 8015eb8:	dd00      	ble.n	8015ebc <_svfprintf_r+0x850>
 8015eba:	e0ac      	b.n	8016016 <_svfprintf_r+0x9aa>
 8015ebc:	232a      	movs	r3, #42	; 0x2a
 8015ebe:	2137      	movs	r1, #55	; 0x37
 8015ec0:	aa1e      	add	r2, sp, #120	; 0x78
 8015ec2:	3d02      	subs	r5, #2
 8015ec4:	3430      	adds	r4, #48	; 0x30
 8015ec6:	702c      	strb	r4, [r5, #0]
 8015ec8:	189b      	adds	r3, r3, r2
 8015eca:	1889      	adds	r1, r1, r2
 8015ecc:	001a      	movs	r2, r3
 8015ece:	428d      	cmp	r5, r1
 8015ed0:	d200      	bcs.n	8015ed4 <_svfprintf_r+0x868>
 8015ed2:	e0a2      	b.n	801601a <_svfprintf_r+0x9ae>
 8015ed4:	ab28      	add	r3, sp, #160	; 0xa0
 8015ed6:	1ad3      	subs	r3, r2, r3
 8015ed8:	931d      	str	r3, [sp, #116]	; 0x74
 8015eda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ede:	4694      	mov	ip, r2
 8015ee0:	4463      	add	r3, ip
 8015ee2:	9308      	str	r3, [sp, #32]
 8015ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ee6:	2b01      	cmp	r3, #1
 8015ee8:	dc01      	bgt.n	8015eee <_svfprintf_r+0x882>
 8015eea:	07f3      	lsls	r3, r6, #31
 8015eec:	d504      	bpl.n	8015ef8 <_svfprintf_r+0x88c>
 8015eee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ef0:	9b08      	ldr	r3, [sp, #32]
 8015ef2:	4694      	mov	ip, r2
 8015ef4:	4463      	add	r3, ip
 8015ef6:	9308      	str	r3, [sp, #32]
 8015ef8:	2280      	movs	r2, #128	; 0x80
 8015efa:	4b1a      	ldr	r3, [pc, #104]	; (8015f64 <_svfprintf_r+0x8f8>)
 8015efc:	0052      	lsls	r2, r2, #1
 8015efe:	4033      	ands	r3, r6
 8015f00:	431a      	orrs	r2, r3
 8015f02:	2300      	movs	r3, #0
 8015f04:	001d      	movs	r5, r3
 8015f06:	9220      	str	r2, [sp, #128]	; 0x80
 8015f08:	9310      	str	r3, [sp, #64]	; 0x40
 8015f0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d100      	bne.n	8015f14 <_svfprintf_r+0x8a8>
 8015f12:	e270      	b.n	80163f6 <_svfprintf_r+0xd8a>
 8015f14:	231b      	movs	r3, #27
 8015f16:	aa1e      	add	r2, sp, #120	; 0x78
 8015f18:	189b      	adds	r3, r3, r2
 8015f1a:	222d      	movs	r2, #45	; 0x2d
 8015f1c:	701a      	strb	r2, [r3, #0]
 8015f1e:	2300      	movs	r3, #0
 8015f20:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015f22:	9317      	str	r3, [sp, #92]	; 0x5c
 8015f24:	e539      	b.n	801599a <_svfprintf_r+0x32e>
 8015f26:	7018      	strb	r0, [r3, #0]
 8015f28:	e779      	b.n	8015e1e <_svfprintf_r+0x7b2>
 8015f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f2c:	2b46      	cmp	r3, #70	; 0x46
 8015f2e:	d01b      	beq.n	8015f68 <_svfprintf_r+0x8fc>
 8015f30:	9d08      	ldr	r5, [sp, #32]
 8015f32:	2b45      	cmp	r3, #69	; 0x45
 8015f34:	d101      	bne.n	8015f3a <_svfprintf_r+0x8ce>
 8015f36:	9b08      	ldr	r3, [sp, #32]
 8015f38:	1c5d      	adds	r5, r3, #1
 8015f3a:	2302      	movs	r3, #2
 8015f3c:	e016      	b.n	8015f6c <_svfprintf_r+0x900>
 8015f3e:	46c0      	nop			; (mov r8, r8)
 8015f40:	7fefffff 	.word	0x7fefffff
 8015f44:	0801bb04 	.word	0x0801bb04
 8015f48:	0801bb00 	.word	0x0801bb00
 8015f4c:	0801bb0c 	.word	0x0801bb0c
 8015f50:	0801bb08 	.word	0x0801bb08
 8015f54:	0801bb21 	.word	0x0801bb21
 8015f58:	0801bb10 	.word	0x0801bb10
 8015f5c:	40300000 	.word	0x40300000
 8015f60:	3fe00000 	.word	0x3fe00000
 8015f64:	fffffbff 	.word	0xfffffbff
 8015f68:	2303      	movs	r3, #3
 8015f6a:	9d08      	ldr	r5, [sp, #32]
 8015f6c:	aa2a      	add	r2, sp, #168	; 0xa8
 8015f6e:	9204      	str	r2, [sp, #16]
 8015f70:	aa27      	add	r2, sp, #156	; 0x9c
 8015f72:	9203      	str	r2, [sp, #12]
 8015f74:	aa26      	add	r2, sp, #152	; 0x98
 8015f76:	9202      	str	r2, [sp, #8]
 8015f78:	9300      	str	r3, [sp, #0]
 8015f7a:	9501      	str	r5, [sp, #4]
 8015f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f7e:	0022      	movs	r2, r4
 8015f80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f82:	f000 fe79 	bl	8016c78 <_dtoa_r>
 8015f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f88:	9009      	str	r0, [sp, #36]	; 0x24
 8015f8a:	2b47      	cmp	r3, #71	; 0x47
 8015f8c:	d101      	bne.n	8015f92 <_svfprintf_r+0x926>
 8015f8e:	07f3      	lsls	r3, r6, #31
 8015f90:	d524      	bpl.n	8015fdc <_svfprintf_r+0x970>
 8015f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f94:	195b      	adds	r3, r3, r5
 8015f96:	9310      	str	r3, [sp, #64]	; 0x40
 8015f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f9a:	2b46      	cmp	r3, #70	; 0x46
 8015f9c:	d113      	bne.n	8015fc6 <_svfprintf_r+0x95a>
 8015f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	2b30      	cmp	r3, #48	; 0x30
 8015fa4:	d10a      	bne.n	8015fbc <_svfprintf_r+0x950>
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	2300      	movs	r3, #0
 8015faa:	0020      	movs	r0, r4
 8015fac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015fae:	f7ea fa55 	bl	800045c <__aeabi_dcmpeq>
 8015fb2:	2800      	cmp	r0, #0
 8015fb4:	d102      	bne.n	8015fbc <_svfprintf_r+0x950>
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	1b5d      	subs	r5, r3, r5
 8015fba:	9526      	str	r5, [sp, #152]	; 0x98
 8015fbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015fbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fc0:	4694      	mov	ip, r2
 8015fc2:	4463      	add	r3, ip
 8015fc4:	9310      	str	r3, [sp, #64]	; 0x40
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	2300      	movs	r3, #0
 8015fca:	0020      	movs	r0, r4
 8015fcc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015fce:	f7ea fa45 	bl	800045c <__aeabi_dcmpeq>
 8015fd2:	2230      	movs	r2, #48	; 0x30
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	d006      	beq.n	8015fe6 <_svfprintf_r+0x97a>
 8015fd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fda:	932a      	str	r3, [sp, #168]	; 0xa8
 8015fdc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015fde:	e72c      	b.n	8015e3a <_svfprintf_r+0x7ce>
 8015fe0:	1c59      	adds	r1, r3, #1
 8015fe2:	912a      	str	r1, [sp, #168]	; 0xa8
 8015fe4:	701a      	strb	r2, [r3, #0]
 8015fe6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015fe8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015fea:	4299      	cmp	r1, r3
 8015fec:	d8f8      	bhi.n	8015fe0 <_svfprintf_r+0x974>
 8015fee:	e7f5      	b.n	8015fdc <_svfprintf_r+0x970>
 8015ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ff2:	2b46      	cmp	r3, #70	; 0x46
 8015ff4:	d000      	beq.n	8015ff8 <_svfprintf_r+0x98c>
 8015ff6:	e731      	b.n	8015e5c <_svfprintf_r+0x7f0>
 8015ff8:	9b08      	ldr	r3, [sp, #32]
 8015ffa:	2d00      	cmp	r5, #0
 8015ffc:	dd21      	ble.n	8016042 <_svfprintf_r+0x9d6>
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d101      	bne.n	8016006 <_svfprintf_r+0x99a>
 8016002:	07f3      	lsls	r3, r6, #31
 8016004:	d54a      	bpl.n	801609c <_svfprintf_r+0xa30>
 8016006:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016008:	18eb      	adds	r3, r5, r3
 801600a:	9a08      	ldr	r2, [sp, #32]
 801600c:	18d3      	adds	r3, r2, r3
 801600e:	9308      	str	r3, [sp, #32]
 8016010:	2366      	movs	r3, #102	; 0x66
 8016012:	930e      	str	r3, [sp, #56]	; 0x38
 8016014:	e034      	b.n	8016080 <_svfprintf_r+0xa14>
 8016016:	9d08      	ldr	r5, [sp, #32]
 8016018:	e73f      	b.n	8015e9a <_svfprintf_r+0x82e>
 801601a:	782a      	ldrb	r2, [r5, #0]
 801601c:	3501      	adds	r5, #1
 801601e:	701a      	strb	r2, [r3, #0]
 8016020:	3301      	adds	r3, #1
 8016022:	e753      	b.n	8015ecc <_svfprintf_r+0x860>
 8016024:	232a      	movs	r3, #42	; 0x2a
 8016026:	aa1e      	add	r2, sp, #120	; 0x78
 8016028:	189b      	adds	r3, r3, r2
 801602a:	2900      	cmp	r1, #0
 801602c:	d105      	bne.n	801603a <_svfprintf_r+0x9ce>
 801602e:	2230      	movs	r2, #48	; 0x30
 8016030:	ab28      	add	r3, sp, #160	; 0xa0
 8016032:	709a      	strb	r2, [r3, #2]
 8016034:	232b      	movs	r3, #43	; 0x2b
 8016036:	aa1e      	add	r2, sp, #120	; 0x78
 8016038:	189b      	adds	r3, r3, r2
 801603a:	3430      	adds	r4, #48	; 0x30
 801603c:	1c5a      	adds	r2, r3, #1
 801603e:	701c      	strb	r4, [r3, #0]
 8016040:	e748      	b.n	8015ed4 <_svfprintf_r+0x868>
 8016042:	2b00      	cmp	r3, #0
 8016044:	d102      	bne.n	801604c <_svfprintf_r+0x9e0>
 8016046:	3301      	adds	r3, #1
 8016048:	421e      	tst	r6, r3
 801604a:	d029      	beq.n	80160a0 <_svfprintf_r+0xa34>
 801604c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801604e:	3301      	adds	r3, #1
 8016050:	e7db      	b.n	801600a <_svfprintf_r+0x99e>
 8016052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016054:	42ab      	cmp	r3, r5
 8016056:	dc06      	bgt.n	8016066 <_svfprintf_r+0x9fa>
 8016058:	07f3      	lsls	r3, r6, #31
 801605a:	d524      	bpl.n	80160a6 <_svfprintf_r+0xa3a>
 801605c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801605e:	18eb      	adds	r3, r5, r3
 8016060:	9308      	str	r3, [sp, #32]
 8016062:	2367      	movs	r3, #103	; 0x67
 8016064:	e7d5      	b.n	8016012 <_svfprintf_r+0x9a6>
 8016066:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801606a:	4694      	mov	ip, r2
 801606c:	4463      	add	r3, ip
 801606e:	9308      	str	r3, [sp, #32]
 8016070:	2367      	movs	r3, #103	; 0x67
 8016072:	930e      	str	r3, [sp, #56]	; 0x38
 8016074:	2d00      	cmp	r5, #0
 8016076:	dc03      	bgt.n	8016080 <_svfprintf_r+0xa14>
 8016078:	9b08      	ldr	r3, [sp, #32]
 801607a:	1b5b      	subs	r3, r3, r5
 801607c:	3301      	adds	r3, #1
 801607e:	9308      	str	r3, [sp, #32]
 8016080:	2380      	movs	r3, #128	; 0x80
 8016082:	00db      	lsls	r3, r3, #3
 8016084:	401e      	ands	r6, r3
 8016086:	2300      	movs	r3, #0
 8016088:	960f      	str	r6, [sp, #60]	; 0x3c
 801608a:	9310      	str	r3, [sp, #64]	; 0x40
 801608c:	2e00      	cmp	r6, #0
 801608e:	d100      	bne.n	8016092 <_svfprintf_r+0xa26>
 8016090:	e73c      	b.n	8015f0c <_svfprintf_r+0x8a0>
 8016092:	2d00      	cmp	r5, #0
 8016094:	dc27      	bgt.n	80160e6 <_svfprintf_r+0xa7a>
 8016096:	2300      	movs	r3, #0
 8016098:	930f      	str	r3, [sp, #60]	; 0x3c
 801609a:	e737      	b.n	8015f0c <_svfprintf_r+0x8a0>
 801609c:	9508      	str	r5, [sp, #32]
 801609e:	e7b7      	b.n	8016010 <_svfprintf_r+0x9a4>
 80160a0:	2266      	movs	r2, #102	; 0x66
 80160a2:	920e      	str	r2, [sp, #56]	; 0x38
 80160a4:	e7eb      	b.n	801607e <_svfprintf_r+0xa12>
 80160a6:	9508      	str	r5, [sp, #32]
 80160a8:	e7db      	b.n	8016062 <_svfprintf_r+0x9f6>
 80160aa:	42ab      	cmp	r3, r5
 80160ac:	da0e      	bge.n	80160cc <_svfprintf_r+0xa60>
 80160ae:	1aed      	subs	r5, r5, r3
 80160b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80160b2:	785b      	ldrb	r3, [r3, #1]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d012      	beq.n	80160de <_svfprintf_r+0xa72>
 80160b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160ba:	3301      	adds	r3, #1
 80160bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80160be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80160c0:	3301      	adds	r3, #1
 80160c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80160c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	2bff      	cmp	r3, #255	; 0xff
 80160ca:	d1ee      	bne.n	80160aa <_svfprintf_r+0xa3e>
 80160cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80160ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160d0:	189b      	adds	r3, r3, r2
 80160d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80160d4:	4353      	muls	r3, r2
 80160d6:	9a08      	ldr	r2, [sp, #32]
 80160d8:	189b      	adds	r3, r3, r2
 80160da:	9308      	str	r3, [sp, #32]
 80160dc:	e716      	b.n	8015f0c <_svfprintf_r+0x8a0>
 80160de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160e0:	3301      	adds	r3, #1
 80160e2:	9310      	str	r3, [sp, #64]	; 0x40
 80160e4:	e7ee      	b.n	80160c4 <_svfprintf_r+0xa58>
 80160e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80160ea:	e7eb      	b.n	80160c4 <_svfprintf_r+0xa58>
 80160ec:	0022      	movs	r2, r4
 80160ee:	ca08      	ldmia	r2!, {r3}
 80160f0:	9212      	str	r2, [sp, #72]	; 0x48
 80160f2:	06b2      	lsls	r2, r6, #26
 80160f4:	d508      	bpl.n	8016108 <_svfprintf_r+0xa9c>
 80160f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80160f8:	601a      	str	r2, [r3, #0]
 80160fa:	17d2      	asrs	r2, r2, #31
 80160fc:	605a      	str	r2, [r3, #4]
 80160fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016100:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016102:	9309      	str	r3, [sp, #36]	; 0x24
 8016104:	f7ff faeb 	bl	80156de <_svfprintf_r+0x72>
 8016108:	06f2      	lsls	r2, r6, #27
 801610a:	d502      	bpl.n	8016112 <_svfprintf_r+0xaa6>
 801610c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801610e:	601a      	str	r2, [r3, #0]
 8016110:	e7f5      	b.n	80160fe <_svfprintf_r+0xa92>
 8016112:	0672      	lsls	r2, r6, #25
 8016114:	d502      	bpl.n	801611c <_svfprintf_r+0xab0>
 8016116:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016118:	801a      	strh	r2, [r3, #0]
 801611a:	e7f0      	b.n	80160fe <_svfprintf_r+0xa92>
 801611c:	05b2      	lsls	r2, r6, #22
 801611e:	d5f5      	bpl.n	801610c <_svfprintf_r+0xaa0>
 8016120:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016122:	701a      	strb	r2, [r3, #0]
 8016124:	e7eb      	b.n	80160fe <_svfprintf_r+0xa92>
 8016126:	2310      	movs	r3, #16
 8016128:	431e      	orrs	r6, r3
 801612a:	2220      	movs	r2, #32
 801612c:	4032      	ands	r2, r6
 801612e:	d025      	beq.n	801617c <_svfprintf_r+0xb10>
 8016130:	2307      	movs	r3, #7
 8016132:	3407      	adds	r4, #7
 8016134:	439c      	bics	r4, r3
 8016136:	0023      	movs	r3, r4
 8016138:	3308      	adds	r3, #8
 801613a:	9312      	str	r3, [sp, #72]	; 0x48
 801613c:	6823      	ldr	r3, [r4, #0]
 801613e:	6864      	ldr	r4, [r4, #4]
 8016140:	9306      	str	r3, [sp, #24]
 8016142:	9407      	str	r4, [sp, #28]
 8016144:	4bc2      	ldr	r3, [pc, #776]	; (8016450 <_svfprintf_r+0xde4>)
 8016146:	401e      	ands	r6, r3
 8016148:	2300      	movs	r3, #0
 801614a:	221b      	movs	r2, #27
 801614c:	a91e      	add	r1, sp, #120	; 0x78
 801614e:	1852      	adds	r2, r2, r1
 8016150:	2100      	movs	r1, #0
 8016152:	7011      	strb	r1, [r2, #0]
 8016154:	9a08      	ldr	r2, [sp, #32]
 8016156:	3201      	adds	r2, #1
 8016158:	d100      	bne.n	801615c <_svfprintf_r+0xaf0>
 801615a:	e0a6      	b.n	80162aa <_svfprintf_r+0xc3e>
 801615c:	0032      	movs	r2, r6
 801615e:	2180      	movs	r1, #128	; 0x80
 8016160:	9807      	ldr	r0, [sp, #28]
 8016162:	438e      	bics	r6, r1
 8016164:	9906      	ldr	r1, [sp, #24]
 8016166:	4301      	orrs	r1, r0
 8016168:	d000      	beq.n	801616c <_svfprintf_r+0xb00>
 801616a:	e09e      	b.n	80162aa <_svfprintf_r+0xc3e>
 801616c:	9908      	ldr	r1, [sp, #32]
 801616e:	2900      	cmp	r1, #0
 8016170:	d100      	bne.n	8016174 <_svfprintf_r+0xb08>
 8016172:	e125      	b.n	80163c0 <_svfprintf_r+0xd54>
 8016174:	2b01      	cmp	r3, #1
 8016176:	d000      	beq.n	801617a <_svfprintf_r+0xb0e>
 8016178:	e09a      	b.n	80162b0 <_svfprintf_r+0xc44>
 801617a:	e518      	b.n	8015bae <_svfprintf_r+0x542>
 801617c:	1d23      	adds	r3, r4, #4
 801617e:	9312      	str	r3, [sp, #72]	; 0x48
 8016180:	2310      	movs	r3, #16
 8016182:	4033      	ands	r3, r6
 8016184:	d003      	beq.n	801618e <_svfprintf_r+0xb22>
 8016186:	6823      	ldr	r3, [r4, #0]
 8016188:	9306      	str	r3, [sp, #24]
 801618a:	9207      	str	r2, [sp, #28]
 801618c:	e7da      	b.n	8016144 <_svfprintf_r+0xad8>
 801618e:	2240      	movs	r2, #64	; 0x40
 8016190:	4032      	ands	r2, r6
 8016192:	d004      	beq.n	801619e <_svfprintf_r+0xb32>
 8016194:	6822      	ldr	r2, [r4, #0]
 8016196:	b292      	uxth	r2, r2
 8016198:	9206      	str	r2, [sp, #24]
 801619a:	9307      	str	r3, [sp, #28]
 801619c:	e7d2      	b.n	8016144 <_svfprintf_r+0xad8>
 801619e:	2380      	movs	r3, #128	; 0x80
 80161a0:	009b      	lsls	r3, r3, #2
 80161a2:	4033      	ands	r3, r6
 80161a4:	d002      	beq.n	80161ac <_svfprintf_r+0xb40>
 80161a6:	6823      	ldr	r3, [r4, #0]
 80161a8:	b2db      	uxtb	r3, r3
 80161aa:	e7ed      	b.n	8016188 <_svfprintf_r+0xb1c>
 80161ac:	6822      	ldr	r2, [r4, #0]
 80161ae:	e7f3      	b.n	8016198 <_svfprintf_r+0xb2c>
 80161b0:	1d23      	adds	r3, r4, #4
 80161b2:	49a8      	ldr	r1, [pc, #672]	; (8016454 <_svfprintf_r+0xde8>)
 80161b4:	aa25      	add	r2, sp, #148	; 0x94
 80161b6:	9312      	str	r3, [sp, #72]	; 0x48
 80161b8:	6823      	ldr	r3, [r4, #0]
 80161ba:	8011      	strh	r1, [r2, #0]
 80161bc:	4aa6      	ldr	r2, [pc, #664]	; (8016458 <_svfprintf_r+0xdec>)
 80161be:	9306      	str	r3, [sp, #24]
 80161c0:	2300      	movs	r3, #0
 80161c2:	921e      	str	r2, [sp, #120]	; 0x78
 80161c4:	2278      	movs	r2, #120	; 0x78
 80161c6:	9307      	str	r3, [sp, #28]
 80161c8:	3302      	adds	r3, #2
 80161ca:	431e      	orrs	r6, r3
 80161cc:	920e      	str	r2, [sp, #56]	; 0x38
 80161ce:	e7bc      	b.n	801614a <_svfprintf_r+0xade>
 80161d0:	1d23      	adds	r3, r4, #4
 80161d2:	9312      	str	r3, [sp, #72]	; 0x48
 80161d4:	6823      	ldr	r3, [r4, #0]
 80161d6:	2400      	movs	r4, #0
 80161d8:	9309      	str	r3, [sp, #36]	; 0x24
 80161da:	231b      	movs	r3, #27
 80161dc:	aa1e      	add	r2, sp, #120	; 0x78
 80161de:	189b      	adds	r3, r3, r2
 80161e0:	701c      	strb	r4, [r3, #0]
 80161e2:	9b08      	ldr	r3, [sp, #32]
 80161e4:	3301      	adds	r3, #1
 80161e6:	d00e      	beq.n	8016206 <_svfprintf_r+0xb9a>
 80161e8:	9a08      	ldr	r2, [sp, #32]
 80161ea:	0021      	movs	r1, r4
 80161ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161ee:	f001 ff79 	bl	80180e4 <memchr>
 80161f2:	900c      	str	r0, [sp, #48]	; 0x30
 80161f4:	42a0      	cmp	r0, r4
 80161f6:	d100      	bne.n	80161fa <_svfprintf_r+0xb8e>
 80161f8:	e100      	b.n	80163fc <_svfprintf_r+0xd90>
 80161fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80161fc:	1a83      	subs	r3, r0, r2
 80161fe:	9308      	str	r3, [sp, #32]
 8016200:	940c      	str	r4, [sp, #48]	; 0x30
 8016202:	0023      	movs	r3, r4
 8016204:	e527      	b.n	8015c56 <_svfprintf_r+0x5ea>
 8016206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016208:	f7e9 ff86 	bl	8000118 <strlen>
 801620c:	9008      	str	r0, [sp, #32]
 801620e:	e7f7      	b.n	8016200 <_svfprintf_r+0xb94>
 8016210:	2310      	movs	r3, #16
 8016212:	431e      	orrs	r6, r3
 8016214:	2220      	movs	r2, #32
 8016216:	4032      	ands	r2, r6
 8016218:	d00b      	beq.n	8016232 <_svfprintf_r+0xbc6>
 801621a:	2307      	movs	r3, #7
 801621c:	3407      	adds	r4, #7
 801621e:	439c      	bics	r4, r3
 8016220:	0023      	movs	r3, r4
 8016222:	3308      	adds	r3, #8
 8016224:	9312      	str	r3, [sp, #72]	; 0x48
 8016226:	6823      	ldr	r3, [r4, #0]
 8016228:	6864      	ldr	r4, [r4, #4]
 801622a:	9306      	str	r3, [sp, #24]
 801622c:	9407      	str	r4, [sp, #28]
 801622e:	2301      	movs	r3, #1
 8016230:	e78b      	b.n	801614a <_svfprintf_r+0xade>
 8016232:	1d23      	adds	r3, r4, #4
 8016234:	9312      	str	r3, [sp, #72]	; 0x48
 8016236:	2310      	movs	r3, #16
 8016238:	4033      	ands	r3, r6
 801623a:	d003      	beq.n	8016244 <_svfprintf_r+0xbd8>
 801623c:	6823      	ldr	r3, [r4, #0]
 801623e:	9306      	str	r3, [sp, #24]
 8016240:	9207      	str	r2, [sp, #28]
 8016242:	e7f4      	b.n	801622e <_svfprintf_r+0xbc2>
 8016244:	2240      	movs	r2, #64	; 0x40
 8016246:	4032      	ands	r2, r6
 8016248:	d004      	beq.n	8016254 <_svfprintf_r+0xbe8>
 801624a:	6822      	ldr	r2, [r4, #0]
 801624c:	b292      	uxth	r2, r2
 801624e:	9206      	str	r2, [sp, #24]
 8016250:	9307      	str	r3, [sp, #28]
 8016252:	e7ec      	b.n	801622e <_svfprintf_r+0xbc2>
 8016254:	2380      	movs	r3, #128	; 0x80
 8016256:	009b      	lsls	r3, r3, #2
 8016258:	4033      	ands	r3, r6
 801625a:	d002      	beq.n	8016262 <_svfprintf_r+0xbf6>
 801625c:	6823      	ldr	r3, [r4, #0]
 801625e:	b2db      	uxtb	r3, r3
 8016260:	e7ed      	b.n	801623e <_svfprintf_r+0xbd2>
 8016262:	6822      	ldr	r2, [r4, #0]
 8016264:	e7f3      	b.n	801624e <_svfprintf_r+0xbe2>
 8016266:	4b7c      	ldr	r3, [pc, #496]	; (8016458 <_svfprintf_r+0xdec>)
 8016268:	f7ff fad9 	bl	801581e <_svfprintf_r+0x1b2>
 801626c:	1d23      	adds	r3, r4, #4
 801626e:	9312      	str	r3, [sp, #72]	; 0x48
 8016270:	2310      	movs	r3, #16
 8016272:	4033      	ands	r3, r6
 8016274:	d004      	beq.n	8016280 <_svfprintf_r+0xc14>
 8016276:	6823      	ldr	r3, [r4, #0]
 8016278:	9306      	str	r3, [sp, #24]
 801627a:	9207      	str	r2, [sp, #28]
 801627c:	f7ff fadf 	bl	801583e <_svfprintf_r+0x1d2>
 8016280:	2240      	movs	r2, #64	; 0x40
 8016282:	4032      	ands	r2, r6
 8016284:	d005      	beq.n	8016292 <_svfprintf_r+0xc26>
 8016286:	6822      	ldr	r2, [r4, #0]
 8016288:	b292      	uxth	r2, r2
 801628a:	9206      	str	r2, [sp, #24]
 801628c:	9307      	str	r3, [sp, #28]
 801628e:	f7ff fad6 	bl	801583e <_svfprintf_r+0x1d2>
 8016292:	2380      	movs	r3, #128	; 0x80
 8016294:	009b      	lsls	r3, r3, #2
 8016296:	4033      	ands	r3, r6
 8016298:	d002      	beq.n	80162a0 <_svfprintf_r+0xc34>
 801629a:	6823      	ldr	r3, [r4, #0]
 801629c:	b2db      	uxtb	r3, r3
 801629e:	e7eb      	b.n	8016278 <_svfprintf_r+0xc0c>
 80162a0:	6822      	ldr	r2, [r4, #0]
 80162a2:	e7f2      	b.n	801628a <_svfprintf_r+0xc1e>
 80162a4:	0032      	movs	r2, r6
 80162a6:	2301      	movs	r3, #1
 80162a8:	e759      	b.n	801615e <_svfprintf_r+0xaf2>
 80162aa:	2b01      	cmp	r3, #1
 80162ac:	d100      	bne.n	80162b0 <_svfprintf_r+0xc44>
 80162ae:	e476      	b.n	8015b9e <_svfprintf_r+0x532>
 80162b0:	2b02      	cmp	r3, #2
 80162b2:	d06b      	beq.n	801638c <_svfprintf_r+0xd20>
 80162b4:	2507      	movs	r5, #7
 80162b6:	ab58      	add	r3, sp, #352	; 0x160
 80162b8:	1e5a      	subs	r2, r3, #1
 80162ba:	9209      	str	r2, [sp, #36]	; 0x24
 80162bc:	9a06      	ldr	r2, [sp, #24]
 80162be:	1e59      	subs	r1, r3, #1
 80162c0:	402a      	ands	r2, r5
 80162c2:	3230      	adds	r2, #48	; 0x30
 80162c4:	700a      	strb	r2, [r1, #0]
 80162c6:	9907      	ldr	r1, [sp, #28]
 80162c8:	074c      	lsls	r4, r1, #29
 80162ca:	9906      	ldr	r1, [sp, #24]
 80162cc:	08c8      	lsrs	r0, r1, #3
 80162ce:	9907      	ldr	r1, [sp, #28]
 80162d0:	4304      	orrs	r4, r0
 80162d2:	08c9      	lsrs	r1, r1, #3
 80162d4:	9107      	str	r1, [sp, #28]
 80162d6:	0021      	movs	r1, r4
 80162d8:	9807      	ldr	r0, [sp, #28]
 80162da:	9406      	str	r4, [sp, #24]
 80162dc:	4301      	orrs	r1, r0
 80162de:	d111      	bne.n	8016304 <_svfprintf_r+0xc98>
 80162e0:	07f1      	lsls	r1, r6, #31
 80162e2:	d502      	bpl.n	80162ea <_svfprintf_r+0xc7e>
 80162e4:	3b02      	subs	r3, #2
 80162e6:	2a30      	cmp	r2, #48	; 0x30
 80162e8:	d173      	bne.n	80163d2 <_svfprintf_r+0xd66>
 80162ea:	9b08      	ldr	r3, [sp, #32]
 80162ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80162f0:	ab58      	add	r3, sp, #352	; 0x160
 80162f2:	1a9b      	subs	r3, r3, r2
 80162f4:	9308      	str	r3, [sp, #32]
 80162f6:	2300      	movs	r3, #0
 80162f8:	930c      	str	r3, [sp, #48]	; 0x30
 80162fa:	9310      	str	r3, [sp, #64]	; 0x40
 80162fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80162fe:	001d      	movs	r5, r3
 8016300:	f7ff fb4b 	bl	801599a <_svfprintf_r+0x32e>
 8016304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016306:	e7d7      	b.n	80162b8 <_svfprintf_r+0xc4c>
 8016308:	2480      	movs	r4, #128	; 0x80
 801630a:	2300      	movs	r3, #0
 801630c:	00e4      	lsls	r4, r4, #3
 801630e:	930d      	str	r3, [sp, #52]	; 0x34
 8016310:	4034      	ands	r4, r6
 8016312:	ab58      	add	r3, sp, #352	; 0x160
 8016314:	3b01      	subs	r3, #1
 8016316:	9309      	str	r3, [sp, #36]	; 0x24
 8016318:	220a      	movs	r2, #10
 801631a:	9806      	ldr	r0, [sp, #24]
 801631c:	9907      	ldr	r1, [sp, #28]
 801631e:	2300      	movs	r3, #0
 8016320:	f7ea f928 	bl	8000574 <__aeabi_uldivmod>
 8016324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016326:	3230      	adds	r2, #48	; 0x30
 8016328:	701a      	strb	r2, [r3, #0]
 801632a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801632c:	3301      	adds	r3, #1
 801632e:	930d      	str	r3, [sp, #52]	; 0x34
 8016330:	2c00      	cmp	r4, #0
 8016332:	d01d      	beq.n	8016370 <_svfprintf_r+0xd04>
 8016334:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	429a      	cmp	r2, r3
 801633c:	d118      	bne.n	8016370 <_svfprintf_r+0xd04>
 801633e:	2aff      	cmp	r2, #255	; 0xff
 8016340:	d016      	beq.n	8016370 <_svfprintf_r+0xd04>
 8016342:	9b07      	ldr	r3, [sp, #28]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d102      	bne.n	801634e <_svfprintf_r+0xce2>
 8016348:	9b06      	ldr	r3, [sp, #24]
 801634a:	2b09      	cmp	r3, #9
 801634c:	d910      	bls.n	8016370 <_svfprintf_r+0xd04>
 801634e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016350:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016352:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8016354:	1a9b      	subs	r3, r3, r2
 8016356:	0018      	movs	r0, r3
 8016358:	9309      	str	r3, [sp, #36]	; 0x24
 801635a:	f7fe fa52 	bl	8014802 <strncpy>
 801635e:	2200      	movs	r2, #0
 8016360:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016362:	920d      	str	r2, [sp, #52]	; 0x34
 8016364:	785b      	ldrb	r3, [r3, #1]
 8016366:	1e5a      	subs	r2, r3, #1
 8016368:	4193      	sbcs	r3, r2
 801636a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801636c:	18d3      	adds	r3, r2, r3
 801636e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016370:	220a      	movs	r2, #10
 8016372:	9806      	ldr	r0, [sp, #24]
 8016374:	9907      	ldr	r1, [sp, #28]
 8016376:	2300      	movs	r3, #0
 8016378:	f7ea f8fc 	bl	8000574 <__aeabi_uldivmod>
 801637c:	9006      	str	r0, [sp, #24]
 801637e:	9107      	str	r1, [sp, #28]
 8016380:	9b06      	ldr	r3, [sp, #24]
 8016382:	9a07      	ldr	r2, [sp, #28]
 8016384:	4313      	orrs	r3, r2
 8016386:	d0b0      	beq.n	80162ea <_svfprintf_r+0xc7e>
 8016388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801638a:	e7c3      	b.n	8016314 <_svfprintf_r+0xca8>
 801638c:	200f      	movs	r0, #15
 801638e:	ab58      	add	r3, sp, #352	; 0x160
 8016390:	9309      	str	r3, [sp, #36]	; 0x24
 8016392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016394:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016396:	3b01      	subs	r3, #1
 8016398:	9309      	str	r3, [sp, #36]	; 0x24
 801639a:	9b06      	ldr	r3, [sp, #24]
 801639c:	4003      	ands	r3, r0
 801639e:	5cd3      	ldrb	r3, [r2, r3]
 80163a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163a2:	7013      	strb	r3, [r2, #0]
 80163a4:	9b07      	ldr	r3, [sp, #28]
 80163a6:	0719      	lsls	r1, r3, #28
 80163a8:	9b06      	ldr	r3, [sp, #24]
 80163aa:	091a      	lsrs	r2, r3, #4
 80163ac:	9b07      	ldr	r3, [sp, #28]
 80163ae:	4311      	orrs	r1, r2
 80163b0:	091b      	lsrs	r3, r3, #4
 80163b2:	9307      	str	r3, [sp, #28]
 80163b4:	000b      	movs	r3, r1
 80163b6:	9a07      	ldr	r2, [sp, #28]
 80163b8:	9106      	str	r1, [sp, #24]
 80163ba:	4313      	orrs	r3, r2
 80163bc:	d1e9      	bne.n	8016392 <_svfprintf_r+0xd26>
 80163be:	e794      	b.n	80162ea <_svfprintf_r+0xc7e>
 80163c0:	a958      	add	r1, sp, #352	; 0x160
 80163c2:	9109      	str	r1, [sp, #36]	; 0x24
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d190      	bne.n	80162ea <_svfprintf_r+0xc7e>
 80163c8:	07d3      	lsls	r3, r2, #31
 80163ca:	d58e      	bpl.n	80162ea <_svfprintf_r+0xc7e>
 80163cc:	23e7      	movs	r3, #231	; 0xe7
 80163ce:	aa1e      	add	r2, sp, #120	; 0x78
 80163d0:	189b      	adds	r3, r3, r2
 80163d2:	2230      	movs	r2, #48	; 0x30
 80163d4:	f7ff fbf0 	bl	8015bb8 <_svfprintf_r+0x54c>
 80163d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d100      	bne.n	80163e0 <_svfprintf_r+0xd74>
 80163de:	e38a      	b.n	8016af6 <_svfprintf_r+0x148a>
 80163e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80163e2:	ab3f      	add	r3, sp, #252	; 0xfc
 80163e4:	701a      	strb	r2, [r3, #0]
 80163e6:	221b      	movs	r2, #27
 80163e8:	2000      	movs	r0, #0
 80163ea:	a91e      	add	r1, sp, #120	; 0x78
 80163ec:	1852      	adds	r2, r2, r1
 80163ee:	7010      	strb	r0, [r2, #0]
 80163f0:	9412      	str	r4, [sp, #72]	; 0x48
 80163f2:	f7ff faca 	bl	801598a <_svfprintf_r+0x31e>
 80163f6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80163f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80163fa:	e592      	b.n	8015f22 <_svfprintf_r+0x8b6>
 80163fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163fe:	e42a      	b.n	8015c56 <_svfprintf_r+0x5ea>
 8016400:	2010      	movs	r0, #16
 8016402:	1812      	adds	r2, r2, r0
 8016404:	6078      	str	r0, [r7, #4]
 8016406:	922e      	str	r2, [sp, #184]	; 0xb8
 8016408:	932d      	str	r3, [sp, #180]	; 0xb4
 801640a:	2b07      	cmp	r3, #7
 801640c:	dd08      	ble.n	8016420 <_svfprintf_r+0xdb4>
 801640e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016412:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016414:	f002 fa7e 	bl	8018914 <__ssprint_r>
 8016418:	2800      	cmp	r0, #0
 801641a:	d000      	beq.n	801641e <_svfprintf_r+0xdb2>
 801641c:	e34a      	b.n	8016ab4 <_svfprintf_r+0x1448>
 801641e:	a92f      	add	r1, sp, #188	; 0xbc
 8016420:	3c10      	subs	r4, #16
 8016422:	000f      	movs	r7, r1
 8016424:	f7ff fad8 	bl	80159d8 <_svfprintf_r+0x36c>
 8016428:	2010      	movs	r0, #16
 801642a:	1812      	adds	r2, r2, r0
 801642c:	6078      	str	r0, [r7, #4]
 801642e:	922e      	str	r2, [sp, #184]	; 0xb8
 8016430:	932d      	str	r3, [sp, #180]	; 0xb4
 8016432:	2b07      	cmp	r3, #7
 8016434:	dd08      	ble.n	8016448 <_svfprintf_r+0xddc>
 8016436:	aa2c      	add	r2, sp, #176	; 0xb0
 8016438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801643a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801643c:	f002 fa6a 	bl	8018914 <__ssprint_r>
 8016440:	2800      	cmp	r0, #0
 8016442:	d000      	beq.n	8016446 <_svfprintf_r+0xdda>
 8016444:	e336      	b.n	8016ab4 <_svfprintf_r+0x1448>
 8016446:	a92f      	add	r1, sp, #188	; 0xbc
 8016448:	3c10      	subs	r4, #16
 801644a:	000f      	movs	r7, r1
 801644c:	f7ff fb24 	bl	8015a98 <_svfprintf_r+0x42c>
 8016450:	fffffbff 	.word	0xfffffbff
 8016454:	00007830 	.word	0x00007830
 8016458:	0801bb10 	.word	0x0801bb10
 801645c:	2010      	movs	r0, #16
 801645e:	1812      	adds	r2, r2, r0
 8016460:	6078      	str	r0, [r7, #4]
 8016462:	922e      	str	r2, [sp, #184]	; 0xb8
 8016464:	932d      	str	r3, [sp, #180]	; 0xb4
 8016466:	2b07      	cmp	r3, #7
 8016468:	dd08      	ble.n	801647c <_svfprintf_r+0xe10>
 801646a:	aa2c      	add	r2, sp, #176	; 0xb0
 801646c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801646e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016470:	f002 fa50 	bl	8018914 <__ssprint_r>
 8016474:	2800      	cmp	r0, #0
 8016476:	d000      	beq.n	801647a <_svfprintf_r+0xe0e>
 8016478:	e31c      	b.n	8016ab4 <_svfprintf_r+0x1448>
 801647a:	a92f      	add	r1, sp, #188	; 0xbc
 801647c:	3c10      	subs	r4, #16
 801647e:	000f      	movs	r7, r1
 8016480:	f7ff fb2c 	bl	8015adc <_svfprintf_r+0x470>
 8016484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016486:	2b65      	cmp	r3, #101	; 0x65
 8016488:	dc00      	bgt.n	801648c <_svfprintf_r+0xe20>
 801648a:	e259      	b.n	8016940 <_svfprintf_r+0x12d4>
 801648c:	2200      	movs	r2, #0
 801648e:	2300      	movs	r3, #0
 8016490:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016492:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016494:	f7e9 ffe2 	bl	800045c <__aeabi_dcmpeq>
 8016498:	2800      	cmp	r0, #0
 801649a:	d07c      	beq.n	8016596 <_svfprintf_r+0xf2a>
 801649c:	4b81      	ldr	r3, [pc, #516]	; (80166a4 <_svfprintf_r+0x1038>)
 801649e:	603b      	str	r3, [r7, #0]
 80164a0:	2301      	movs	r3, #1
 80164a2:	607b      	str	r3, [r7, #4]
 80164a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80164a6:	3708      	adds	r7, #8
 80164a8:	3301      	adds	r3, #1
 80164aa:	932e      	str	r3, [sp, #184]	; 0xb8
 80164ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80164ae:	9308      	str	r3, [sp, #32]
 80164b0:	3301      	adds	r3, #1
 80164b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80164b4:	2b07      	cmp	r3, #7
 80164b6:	dd08      	ble.n	80164ca <_svfprintf_r+0xe5e>
 80164b8:	aa2c      	add	r2, sp, #176	; 0xb0
 80164ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164be:	f002 fa29 	bl	8018914 <__ssprint_r>
 80164c2:	2800      	cmp	r0, #0
 80164c4:	d000      	beq.n	80164c8 <_svfprintf_r+0xe5c>
 80164c6:	e2f5      	b.n	8016ab4 <_svfprintf_r+0x1448>
 80164c8:	af2f      	add	r7, sp, #188	; 0xbc
 80164ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80164cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80164ce:	4293      	cmp	r3, r2
 80164d0:	db01      	blt.n	80164d6 <_svfprintf_r+0xe6a>
 80164d2:	07f3      	lsls	r3, r6, #31
 80164d4:	d51d      	bpl.n	8016512 <_svfprintf_r+0xea6>
 80164d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80164d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80164da:	4694      	mov	ip, r2
 80164dc:	603b      	str	r3, [r7, #0]
 80164de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80164e0:	607b      	str	r3, [r7, #4]
 80164e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80164e4:	3708      	adds	r7, #8
 80164e6:	4463      	add	r3, ip
 80164e8:	932e      	str	r3, [sp, #184]	; 0xb8
 80164ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80164ec:	9308      	str	r3, [sp, #32]
 80164ee:	3301      	adds	r3, #1
 80164f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80164f2:	2b07      	cmp	r3, #7
 80164f4:	dd08      	ble.n	8016508 <_svfprintf_r+0xe9c>
 80164f6:	aa2c      	add	r2, sp, #176	; 0xb0
 80164f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164fc:	f002 fa0a 	bl	8018914 <__ssprint_r>
 8016500:	2800      	cmp	r0, #0
 8016502:	d000      	beq.n	8016506 <_svfprintf_r+0xe9a>
 8016504:	e2d6      	b.n	8016ab4 <_svfprintf_r+0x1448>
 8016506:	af2f      	add	r7, sp, #188	; 0xbc
 8016508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801650a:	2510      	movs	r5, #16
 801650c:	1e5c      	subs	r4, r3, #1
 801650e:	2c00      	cmp	r4, #0
 8016510:	dc2f      	bgt.n	8016572 <_svfprintf_r+0xf06>
 8016512:	0773      	lsls	r3, r6, #29
 8016514:	d500      	bpl.n	8016518 <_svfprintf_r+0xeac>
 8016516:	e2af      	b.n	8016a78 <_svfprintf_r+0x140c>
 8016518:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801651a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801651c:	4293      	cmp	r3, r2
 801651e:	da00      	bge.n	8016522 <_svfprintf_r+0xeb6>
 8016520:	0013      	movs	r3, r2
 8016522:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016524:	18d3      	adds	r3, r2, r3
 8016526:	9315      	str	r3, [sp, #84]	; 0x54
 8016528:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801652a:	9308      	str	r3, [sp, #32]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d007      	beq.n	8016540 <_svfprintf_r+0xed4>
 8016530:	aa2c      	add	r2, sp, #176	; 0xb0
 8016532:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016534:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016536:	f002 f9ed 	bl	8018914 <__ssprint_r>
 801653a:	2800      	cmp	r0, #0
 801653c:	d000      	beq.n	8016540 <_svfprintf_r+0xed4>
 801653e:	e2b9      	b.n	8016ab4 <_svfprintf_r+0x1448>
 8016540:	2300      	movs	r3, #0
 8016542:	932d      	str	r3, [sp, #180]	; 0xb4
 8016544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016546:	2b00      	cmp	r3, #0
 8016548:	d000      	beq.n	801654c <_svfprintf_r+0xee0>
 801654a:	e2cf      	b.n	8016aec <_svfprintf_r+0x1480>
 801654c:	af2f      	add	r7, sp, #188	; 0xbc
 801654e:	e5d6      	b.n	80160fe <_svfprintf_r+0xa92>
 8016550:	3210      	adds	r2, #16
 8016552:	607d      	str	r5, [r7, #4]
 8016554:	922e      	str	r2, [sp, #184]	; 0xb8
 8016556:	932d      	str	r3, [sp, #180]	; 0xb4
 8016558:	2b07      	cmp	r3, #7
 801655a:	dd08      	ble.n	801656e <_svfprintf_r+0xf02>
 801655c:	aa2c      	add	r2, sp, #176	; 0xb0
 801655e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016560:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016562:	f002 f9d7 	bl	8018914 <__ssprint_r>
 8016566:	2800      	cmp	r0, #0
 8016568:	d000      	beq.n	801656c <_svfprintf_r+0xf00>
 801656a:	e2a3      	b.n	8016ab4 <_svfprintf_r+0x1448>
 801656c:	a92f      	add	r1, sp, #188	; 0xbc
 801656e:	000f      	movs	r7, r1
 8016570:	3c10      	subs	r4, #16
 8016572:	0039      	movs	r1, r7
 8016574:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016576:	484c      	ldr	r0, [pc, #304]	; (80166a8 <_svfprintf_r+0x103c>)
 8016578:	9308      	str	r3, [sp, #32]
 801657a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801657c:	3301      	adds	r3, #1
 801657e:	3108      	adds	r1, #8
 8016580:	6038      	str	r0, [r7, #0]
 8016582:	2c10      	cmp	r4, #16
 8016584:	dce4      	bgt.n	8016550 <_svfprintf_r+0xee4>
 8016586:	607c      	str	r4, [r7, #4]
 8016588:	18a4      	adds	r4, r4, r2
 801658a:	942e      	str	r4, [sp, #184]	; 0xb8
 801658c:	932d      	str	r3, [sp, #180]	; 0xb4
 801658e:	000f      	movs	r7, r1
 8016590:	2b07      	cmp	r3, #7
 8016592:	ddbe      	ble.n	8016512 <_svfprintf_r+0xea6>
 8016594:	e06a      	b.n	801666c <_svfprintf_r+0x1000>
 8016596:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016598:	2b00      	cmp	r3, #0
 801659a:	dd00      	ble.n	801659e <_svfprintf_r+0xf32>
 801659c:	e086      	b.n	80166ac <_svfprintf_r+0x1040>
 801659e:	4b41      	ldr	r3, [pc, #260]	; (80166a4 <_svfprintf_r+0x1038>)
 80165a0:	603b      	str	r3, [r7, #0]
 80165a2:	2301      	movs	r3, #1
 80165a4:	607b      	str	r3, [r7, #4]
 80165a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80165a8:	3708      	adds	r7, #8
 80165aa:	3301      	adds	r3, #1
 80165ac:	932e      	str	r3, [sp, #184]	; 0xb8
 80165ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165b0:	9308      	str	r3, [sp, #32]
 80165b2:	3301      	adds	r3, #1
 80165b4:	932d      	str	r3, [sp, #180]	; 0xb4
 80165b6:	2b07      	cmp	r3, #7
 80165b8:	dd08      	ble.n	80165cc <_svfprintf_r+0xf60>
 80165ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80165bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165c0:	f002 f9a8 	bl	8018914 <__ssprint_r>
 80165c4:	2800      	cmp	r0, #0
 80165c6:	d000      	beq.n	80165ca <_svfprintf_r+0xf5e>
 80165c8:	e274      	b.n	8016ab4 <_svfprintf_r+0x1448>
 80165ca:	af2f      	add	r7, sp, #188	; 0xbc
 80165cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d104      	bne.n	80165dc <_svfprintf_r+0xf70>
 80165d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d101      	bne.n	80165dc <_svfprintf_r+0xf70>
 80165d8:	07f3      	lsls	r3, r6, #31
 80165da:	d59a      	bpl.n	8016512 <_svfprintf_r+0xea6>
 80165dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80165de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80165e0:	4694      	mov	ip, r2
 80165e2:	603b      	str	r3, [r7, #0]
 80165e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80165e6:	607b      	str	r3, [r7, #4]
 80165e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80165ea:	3708      	adds	r7, #8
 80165ec:	4463      	add	r3, ip
 80165ee:	932e      	str	r3, [sp, #184]	; 0xb8
 80165f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165f2:	9308      	str	r3, [sp, #32]
 80165f4:	3301      	adds	r3, #1
 80165f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80165f8:	2b07      	cmp	r3, #7
 80165fa:	dd08      	ble.n	801660e <_svfprintf_r+0xfa2>
 80165fc:	aa2c      	add	r2, sp, #176	; 0xb0
 80165fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016600:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016602:	f002 f987 	bl	8018914 <__ssprint_r>
 8016606:	2800      	cmp	r0, #0
 8016608:	d000      	beq.n	801660c <_svfprintf_r+0xfa0>
 801660a:	e253      	b.n	8016ab4 <_svfprintf_r+0x1448>
 801660c:	af2f      	add	r7, sp, #188	; 0xbc
 801660e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8016610:	2c00      	cmp	r4, #0
 8016612:	da1a      	bge.n	801664a <_svfprintf_r+0xfde>
 8016614:	0039      	movs	r1, r7
 8016616:	2510      	movs	r5, #16
 8016618:	4264      	negs	r4, r4
 801661a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801661c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801661e:	9308      	str	r3, [sp, #32]
 8016620:	1c5a      	adds	r2, r3, #1
 8016622:	4b21      	ldr	r3, [pc, #132]	; (80166a8 <_svfprintf_r+0x103c>)
 8016624:	3708      	adds	r7, #8
 8016626:	600b      	str	r3, [r1, #0]
 8016628:	2c10      	cmp	r4, #16
 801662a:	dc29      	bgt.n	8016680 <_svfprintf_r+0x1014>
 801662c:	604c      	str	r4, [r1, #4]
 801662e:	1824      	adds	r4, r4, r0
 8016630:	942e      	str	r4, [sp, #184]	; 0xb8
 8016632:	922d      	str	r2, [sp, #180]	; 0xb4
 8016634:	2a07      	cmp	r2, #7
 8016636:	dd08      	ble.n	801664a <_svfprintf_r+0xfde>
 8016638:	aa2c      	add	r2, sp, #176	; 0xb0
 801663a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801663c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801663e:	f002 f969 	bl	8018914 <__ssprint_r>
 8016642:	2800      	cmp	r0, #0
 8016644:	d000      	beq.n	8016648 <_svfprintf_r+0xfdc>
 8016646:	e235      	b.n	8016ab4 <_svfprintf_r+0x1448>
 8016648:	af2f      	add	r7, sp, #188	; 0xbc
 801664a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801664c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801664e:	468c      	mov	ip, r1
 8016650:	603b      	str	r3, [r7, #0]
 8016652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016654:	607b      	str	r3, [r7, #4]
 8016656:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016658:	4463      	add	r3, ip
 801665a:	932e      	str	r3, [sp, #184]	; 0xb8
 801665c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801665e:	1c5a      	adds	r2, r3, #1
 8016660:	9308      	str	r3, [sp, #32]
 8016662:	922d      	str	r2, [sp, #180]	; 0xb4
 8016664:	2a07      	cmp	r2, #7
 8016666:	dc01      	bgt.n	801666c <_svfprintf_r+0x1000>
 8016668:	f7ff fa6c 	bl	8015b44 <_svfprintf_r+0x4d8>
 801666c:	aa2c      	add	r2, sp, #176	; 0xb0
 801666e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016670:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016672:	f002 f94f 	bl	8018914 <__ssprint_r>
 8016676:	2800      	cmp	r0, #0
 8016678:	d000      	beq.n	801667c <_svfprintf_r+0x1010>
 801667a:	e21b      	b.n	8016ab4 <_svfprintf_r+0x1448>
 801667c:	af2f      	add	r7, sp, #188	; 0xbc
 801667e:	e748      	b.n	8016512 <_svfprintf_r+0xea6>
 8016680:	3010      	adds	r0, #16
 8016682:	604d      	str	r5, [r1, #4]
 8016684:	902e      	str	r0, [sp, #184]	; 0xb8
 8016686:	922d      	str	r2, [sp, #180]	; 0xb4
 8016688:	2a07      	cmp	r2, #7
 801668a:	dd08      	ble.n	801669e <_svfprintf_r+0x1032>
 801668c:	aa2c      	add	r2, sp, #176	; 0xb0
 801668e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016690:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016692:	f002 f93f 	bl	8018914 <__ssprint_r>
 8016696:	2800      	cmp	r0, #0
 8016698:	d000      	beq.n	801669c <_svfprintf_r+0x1030>
 801669a:	e20b      	b.n	8016ab4 <_svfprintf_r+0x1448>
 801669c:	af2f      	add	r7, sp, #188	; 0xbc
 801669e:	3c10      	subs	r4, #16
 80166a0:	0039      	movs	r1, r7
 80166a2:	e7ba      	b.n	801661a <_svfprintf_r+0xfae>
 80166a4:	0801bb32 	.word	0x0801bb32
 80166a8:	0801bb44 	.word	0x0801bb44
 80166ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166ae:	002c      	movs	r4, r5
 80166b0:	429d      	cmp	r5, r3
 80166b2:	dd00      	ble.n	80166b6 <_svfprintf_r+0x104a>
 80166b4:	001c      	movs	r4, r3
 80166b6:	2c00      	cmp	r4, #0
 80166b8:	dd15      	ble.n	80166e6 <_svfprintf_r+0x107a>
 80166ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166bc:	607c      	str	r4, [r7, #4]
 80166be:	603b      	str	r3, [r7, #0]
 80166c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166c2:	3708      	adds	r7, #8
 80166c4:	18e3      	adds	r3, r4, r3
 80166c6:	932e      	str	r3, [sp, #184]	; 0xb8
 80166c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166ca:	9308      	str	r3, [sp, #32]
 80166cc:	3301      	adds	r3, #1
 80166ce:	932d      	str	r3, [sp, #180]	; 0xb4
 80166d0:	2b07      	cmp	r3, #7
 80166d2:	dd08      	ble.n	80166e6 <_svfprintf_r+0x107a>
 80166d4:	aa2c      	add	r2, sp, #176	; 0xb0
 80166d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166da:	f002 f91b 	bl	8018914 <__ssprint_r>
 80166de:	2800      	cmp	r0, #0
 80166e0:	d000      	beq.n	80166e4 <_svfprintf_r+0x1078>
 80166e2:	e1e7      	b.n	8016ab4 <_svfprintf_r+0x1448>
 80166e4:	af2f      	add	r7, sp, #188	; 0xbc
 80166e6:	43e3      	mvns	r3, r4
 80166e8:	17db      	asrs	r3, r3, #31
 80166ea:	401c      	ands	r4, r3
 80166ec:	1b2c      	subs	r4, r5, r4
 80166ee:	2c00      	cmp	r4, #0
 80166f0:	dd1a      	ble.n	8016728 <_svfprintf_r+0x10bc>
 80166f2:	0039      	movs	r1, r7
 80166f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166f6:	48d4      	ldr	r0, [pc, #848]	; (8016a48 <_svfprintf_r+0x13dc>)
 80166f8:	9308      	str	r3, [sp, #32]
 80166fa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80166fc:	3301      	adds	r3, #1
 80166fe:	3108      	adds	r1, #8
 8016700:	6038      	str	r0, [r7, #0]
 8016702:	2c10      	cmp	r4, #16
 8016704:	dd00      	ble.n	8016708 <_svfprintf_r+0x109c>
 8016706:	e089      	b.n	801681c <_svfprintf_r+0x11b0>
 8016708:	607c      	str	r4, [r7, #4]
 801670a:	18a4      	adds	r4, r4, r2
 801670c:	942e      	str	r4, [sp, #184]	; 0xb8
 801670e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016710:	000f      	movs	r7, r1
 8016712:	2b07      	cmp	r3, #7
 8016714:	dd08      	ble.n	8016728 <_svfprintf_r+0x10bc>
 8016716:	aa2c      	add	r2, sp, #176	; 0xb0
 8016718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801671a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801671c:	f002 f8fa 	bl	8018914 <__ssprint_r>
 8016720:	2800      	cmp	r0, #0
 8016722:	d000      	beq.n	8016726 <_svfprintf_r+0x10ba>
 8016724:	e1c6      	b.n	8016ab4 <_svfprintf_r+0x1448>
 8016726:	af2f      	add	r7, sp, #188	; 0xbc
 8016728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801672a:	195d      	adds	r5, r3, r5
 801672c:	0573      	lsls	r3, r6, #21
 801672e:	d50d      	bpl.n	801674c <_svfprintf_r+0x10e0>
 8016730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016732:	2b00      	cmp	r3, #0
 8016734:	d000      	beq.n	8016738 <_svfprintf_r+0x10cc>
 8016736:	e084      	b.n	8016842 <_svfprintf_r+0x11d6>
 8016738:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801673a:	2b00      	cmp	r3, #0
 801673c:	d000      	beq.n	8016740 <_svfprintf_r+0x10d4>
 801673e:	e083      	b.n	8016848 <_svfprintf_r+0x11dc>
 8016740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016742:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016744:	189b      	adds	r3, r3, r2
 8016746:	429d      	cmp	r5, r3
 8016748:	d900      	bls.n	801674c <_svfprintf_r+0x10e0>
 801674a:	001d      	movs	r5, r3
 801674c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801674e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016750:	4293      	cmp	r3, r2
 8016752:	db01      	blt.n	8016758 <_svfprintf_r+0x10ec>
 8016754:	07f3      	lsls	r3, r6, #31
 8016756:	d518      	bpl.n	801678a <_svfprintf_r+0x111e>
 8016758:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801675a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801675c:	4694      	mov	ip, r2
 801675e:	603b      	str	r3, [r7, #0]
 8016760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016762:	607b      	str	r3, [r7, #4]
 8016764:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016766:	3708      	adds	r7, #8
 8016768:	4463      	add	r3, ip
 801676a:	932e      	str	r3, [sp, #184]	; 0xb8
 801676c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801676e:	9308      	str	r3, [sp, #32]
 8016770:	3301      	adds	r3, #1
 8016772:	932d      	str	r3, [sp, #180]	; 0xb4
 8016774:	2b07      	cmp	r3, #7
 8016776:	dd08      	ble.n	801678a <_svfprintf_r+0x111e>
 8016778:	aa2c      	add	r2, sp, #176	; 0xb0
 801677a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801677c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801677e:	f002 f8c9 	bl	8018914 <__ssprint_r>
 8016782:	2800      	cmp	r0, #0
 8016784:	d000      	beq.n	8016788 <_svfprintf_r+0x111c>
 8016786:	e195      	b.n	8016ab4 <_svfprintf_r+0x1448>
 8016788:	af2f      	add	r7, sp, #188	; 0xbc
 801678a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801678c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801678e:	4694      	mov	ip, r2
 8016790:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016792:	4463      	add	r3, ip
 8016794:	1b5b      	subs	r3, r3, r5
 8016796:	1a54      	subs	r4, r2, r1
 8016798:	429c      	cmp	r4, r3
 801679a:	dd00      	ble.n	801679e <_svfprintf_r+0x1132>
 801679c:	001c      	movs	r4, r3
 801679e:	2c00      	cmp	r4, #0
 80167a0:	dd14      	ble.n	80167cc <_svfprintf_r+0x1160>
 80167a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80167a4:	603d      	str	r5, [r7, #0]
 80167a6:	18e3      	adds	r3, r4, r3
 80167a8:	932e      	str	r3, [sp, #184]	; 0xb8
 80167aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80167ac:	607c      	str	r4, [r7, #4]
 80167ae:	9308      	str	r3, [sp, #32]
 80167b0:	3301      	adds	r3, #1
 80167b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80167b4:	3708      	adds	r7, #8
 80167b6:	2b07      	cmp	r3, #7
 80167b8:	dd08      	ble.n	80167cc <_svfprintf_r+0x1160>
 80167ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80167bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167c0:	f002 f8a8 	bl	8018914 <__ssprint_r>
 80167c4:	2800      	cmp	r0, #0
 80167c6:	d000      	beq.n	80167ca <_svfprintf_r+0x115e>
 80167c8:	e174      	b.n	8016ab4 <_svfprintf_r+0x1448>
 80167ca:	af2f      	add	r7, sp, #188	; 0xbc
 80167cc:	43e3      	mvns	r3, r4
 80167ce:	17db      	asrs	r3, r3, #31
 80167d0:	401c      	ands	r4, r3
 80167d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80167d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167d6:	2510      	movs	r5, #16
 80167d8:	1a9b      	subs	r3, r3, r2
 80167da:	1b1c      	subs	r4, r3, r4
 80167dc:	2c00      	cmp	r4, #0
 80167de:	dc00      	bgt.n	80167e2 <_svfprintf_r+0x1176>
 80167e0:	e697      	b.n	8016512 <_svfprintf_r+0xea6>
 80167e2:	0039      	movs	r1, r7
 80167e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80167e6:	4898      	ldr	r0, [pc, #608]	; (8016a48 <_svfprintf_r+0x13dc>)
 80167e8:	9308      	str	r3, [sp, #32]
 80167ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80167ec:	3301      	adds	r3, #1
 80167ee:	3108      	adds	r1, #8
 80167f0:	6038      	str	r0, [r7, #0]
 80167f2:	2c10      	cmp	r4, #16
 80167f4:	dc00      	bgt.n	80167f8 <_svfprintf_r+0x118c>
 80167f6:	e6c6      	b.n	8016586 <_svfprintf_r+0xf1a>
 80167f8:	3210      	adds	r2, #16
 80167fa:	607d      	str	r5, [r7, #4]
 80167fc:	922e      	str	r2, [sp, #184]	; 0xb8
 80167fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8016800:	2b07      	cmp	r3, #7
 8016802:	dd08      	ble.n	8016816 <_svfprintf_r+0x11aa>
 8016804:	aa2c      	add	r2, sp, #176	; 0xb0
 8016806:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016808:	980a      	ldr	r0, [sp, #40]	; 0x28
 801680a:	f002 f883 	bl	8018914 <__ssprint_r>
 801680e:	2800      	cmp	r0, #0
 8016810:	d000      	beq.n	8016814 <_svfprintf_r+0x11a8>
 8016812:	e14f      	b.n	8016ab4 <_svfprintf_r+0x1448>
 8016814:	a92f      	add	r1, sp, #188	; 0xbc
 8016816:	3c10      	subs	r4, #16
 8016818:	000f      	movs	r7, r1
 801681a:	e7e2      	b.n	80167e2 <_svfprintf_r+0x1176>
 801681c:	2010      	movs	r0, #16
 801681e:	1812      	adds	r2, r2, r0
 8016820:	6078      	str	r0, [r7, #4]
 8016822:	922e      	str	r2, [sp, #184]	; 0xb8
 8016824:	932d      	str	r3, [sp, #180]	; 0xb4
 8016826:	2b07      	cmp	r3, #7
 8016828:	dd08      	ble.n	801683c <_svfprintf_r+0x11d0>
 801682a:	aa2c      	add	r2, sp, #176	; 0xb0
 801682c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801682e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016830:	f002 f870 	bl	8018914 <__ssprint_r>
 8016834:	2800      	cmp	r0, #0
 8016836:	d000      	beq.n	801683a <_svfprintf_r+0x11ce>
 8016838:	e13c      	b.n	8016ab4 <_svfprintf_r+0x1448>
 801683a:	a92f      	add	r1, sp, #188	; 0xbc
 801683c:	3c10      	subs	r4, #16
 801683e:	000f      	movs	r7, r1
 8016840:	e757      	b.n	80166f2 <_svfprintf_r+0x1086>
 8016842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016844:	2b00      	cmp	r3, #0
 8016846:	d061      	beq.n	801690c <_svfprintf_r+0x12a0>
 8016848:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801684a:	3b01      	subs	r3, #1
 801684c:	9310      	str	r3, [sp, #64]	; 0x40
 801684e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016850:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016852:	4694      	mov	ip, r2
 8016854:	603b      	str	r3, [r7, #0]
 8016856:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016858:	607b      	str	r3, [r7, #4]
 801685a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801685c:	3708      	adds	r7, #8
 801685e:	4463      	add	r3, ip
 8016860:	932e      	str	r3, [sp, #184]	; 0xb8
 8016862:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016864:	9308      	str	r3, [sp, #32]
 8016866:	3301      	adds	r3, #1
 8016868:	932d      	str	r3, [sp, #180]	; 0xb4
 801686a:	2b07      	cmp	r3, #7
 801686c:	dd08      	ble.n	8016880 <_svfprintf_r+0x1214>
 801686e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016870:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016872:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016874:	f002 f84e 	bl	8018914 <__ssprint_r>
 8016878:	2800      	cmp	r0, #0
 801687a:	d000      	beq.n	801687e <_svfprintf_r+0x1212>
 801687c:	e11a      	b.n	8016ab4 <_svfprintf_r+0x1448>
 801687e:	af2f      	add	r7, sp, #188	; 0xbc
 8016880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016884:	189b      	adds	r3, r3, r2
 8016886:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016888:	1b5b      	subs	r3, r3, r5
 801688a:	7814      	ldrb	r4, [r2, #0]
 801688c:	429c      	cmp	r4, r3
 801688e:	dd00      	ble.n	8016892 <_svfprintf_r+0x1226>
 8016890:	001c      	movs	r4, r3
 8016892:	2c00      	cmp	r4, #0
 8016894:	dd14      	ble.n	80168c0 <_svfprintf_r+0x1254>
 8016896:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016898:	603d      	str	r5, [r7, #0]
 801689a:	18e3      	adds	r3, r4, r3
 801689c:	932e      	str	r3, [sp, #184]	; 0xb8
 801689e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80168a0:	607c      	str	r4, [r7, #4]
 80168a2:	9308      	str	r3, [sp, #32]
 80168a4:	3301      	adds	r3, #1
 80168a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80168a8:	3708      	adds	r7, #8
 80168aa:	2b07      	cmp	r3, #7
 80168ac:	dd08      	ble.n	80168c0 <_svfprintf_r+0x1254>
 80168ae:	aa2c      	add	r2, sp, #176	; 0xb0
 80168b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168b4:	f002 f82e 	bl	8018914 <__ssprint_r>
 80168b8:	2800      	cmp	r0, #0
 80168ba:	d000      	beq.n	80168be <_svfprintf_r+0x1252>
 80168bc:	e0fa      	b.n	8016ab4 <_svfprintf_r+0x1448>
 80168be:	af2f      	add	r7, sp, #188	; 0xbc
 80168c0:	43e3      	mvns	r3, r4
 80168c2:	17db      	asrs	r3, r3, #31
 80168c4:	401c      	ands	r4, r3
 80168c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	1b1c      	subs	r4, r3, r4
 80168cc:	2c00      	cmp	r4, #0
 80168ce:	dd19      	ble.n	8016904 <_svfprintf_r+0x1298>
 80168d0:	0039      	movs	r1, r7
 80168d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80168d4:	485c      	ldr	r0, [pc, #368]	; (8016a48 <_svfprintf_r+0x13dc>)
 80168d6:	9308      	str	r3, [sp, #32]
 80168d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80168da:	3301      	adds	r3, #1
 80168dc:	3108      	adds	r1, #8
 80168de:	6038      	str	r0, [r7, #0]
 80168e0:	2c10      	cmp	r4, #16
 80168e2:	dc1a      	bgt.n	801691a <_svfprintf_r+0x12ae>
 80168e4:	607c      	str	r4, [r7, #4]
 80168e6:	18a4      	adds	r4, r4, r2
 80168e8:	942e      	str	r4, [sp, #184]	; 0xb8
 80168ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80168ec:	000f      	movs	r7, r1
 80168ee:	2b07      	cmp	r3, #7
 80168f0:	dd08      	ble.n	8016904 <_svfprintf_r+0x1298>
 80168f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80168f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168f8:	f002 f80c 	bl	8018914 <__ssprint_r>
 80168fc:	2800      	cmp	r0, #0
 80168fe:	d000      	beq.n	8016902 <_svfprintf_r+0x1296>
 8016900:	e0d8      	b.n	8016ab4 <_svfprintf_r+0x1448>
 8016902:	af2f      	add	r7, sp, #188	; 0xbc
 8016904:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016906:	781b      	ldrb	r3, [r3, #0]
 8016908:	18ed      	adds	r5, r5, r3
 801690a:	e711      	b.n	8016730 <_svfprintf_r+0x10c4>
 801690c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801690e:	3b01      	subs	r3, #1
 8016910:	9313      	str	r3, [sp, #76]	; 0x4c
 8016912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016914:	3b01      	subs	r3, #1
 8016916:	930f      	str	r3, [sp, #60]	; 0x3c
 8016918:	e799      	b.n	801684e <_svfprintf_r+0x11e2>
 801691a:	2010      	movs	r0, #16
 801691c:	1812      	adds	r2, r2, r0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	922e      	str	r2, [sp, #184]	; 0xb8
 8016922:	932d      	str	r3, [sp, #180]	; 0xb4
 8016924:	2b07      	cmp	r3, #7
 8016926:	dd08      	ble.n	801693a <_svfprintf_r+0x12ce>
 8016928:	aa2c      	add	r2, sp, #176	; 0xb0
 801692a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801692c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801692e:	f001 fff1 	bl	8018914 <__ssprint_r>
 8016932:	2800      	cmp	r0, #0
 8016934:	d000      	beq.n	8016938 <_svfprintf_r+0x12cc>
 8016936:	e0bd      	b.n	8016ab4 <_svfprintf_r+0x1448>
 8016938:	a92f      	add	r1, sp, #188	; 0xbc
 801693a:	3c10      	subs	r4, #16
 801693c:	000f      	movs	r7, r1
 801693e:	e7c7      	b.n	80168d0 <_svfprintf_r+0x1264>
 8016940:	003c      	movs	r4, r7
 8016942:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016944:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016948:	9308      	str	r3, [sp, #32]
 801694a:	3101      	adds	r1, #1
 801694c:	3301      	adds	r3, #1
 801694e:	3408      	adds	r4, #8
 8016950:	2a01      	cmp	r2, #1
 8016952:	dc03      	bgt.n	801695c <_svfprintf_r+0x12f0>
 8016954:	2201      	movs	r2, #1
 8016956:	4216      	tst	r6, r2
 8016958:	d100      	bne.n	801695c <_svfprintf_r+0x12f0>
 801695a:	e088      	b.n	8016a6e <_svfprintf_r+0x1402>
 801695c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801695e:	912e      	str	r1, [sp, #184]	; 0xb8
 8016960:	603a      	str	r2, [r7, #0]
 8016962:	2201      	movs	r2, #1
 8016964:	932d      	str	r3, [sp, #180]	; 0xb4
 8016966:	607a      	str	r2, [r7, #4]
 8016968:	2b07      	cmp	r3, #7
 801696a:	dd08      	ble.n	801697e <_svfprintf_r+0x1312>
 801696c:	aa2c      	add	r2, sp, #176	; 0xb0
 801696e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016970:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016972:	f001 ffcf 	bl	8018914 <__ssprint_r>
 8016976:	2800      	cmp	r0, #0
 8016978:	d000      	beq.n	801697c <_svfprintf_r+0x1310>
 801697a:	e09b      	b.n	8016ab4 <_svfprintf_r+0x1448>
 801697c:	ac2f      	add	r4, sp, #188	; 0xbc
 801697e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016980:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016982:	4694      	mov	ip, r2
 8016984:	6023      	str	r3, [r4, #0]
 8016986:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016988:	6063      	str	r3, [r4, #4]
 801698a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801698c:	3408      	adds	r4, #8
 801698e:	4463      	add	r3, ip
 8016990:	932e      	str	r3, [sp, #184]	; 0xb8
 8016992:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016994:	9308      	str	r3, [sp, #32]
 8016996:	3301      	adds	r3, #1
 8016998:	932d      	str	r3, [sp, #180]	; 0xb4
 801699a:	2b07      	cmp	r3, #7
 801699c:	dd08      	ble.n	80169b0 <_svfprintf_r+0x1344>
 801699e:	aa2c      	add	r2, sp, #176	; 0xb0
 80169a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169a4:	f001 ffb6 	bl	8018914 <__ssprint_r>
 80169a8:	2800      	cmp	r0, #0
 80169aa:	d000      	beq.n	80169ae <_svfprintf_r+0x1342>
 80169ac:	e082      	b.n	8016ab4 <_svfprintf_r+0x1448>
 80169ae:	ac2f      	add	r4, sp, #188	; 0xbc
 80169b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169b2:	2200      	movs	r2, #0
 80169b4:	1e5d      	subs	r5, r3, #1
 80169b6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80169b8:	2300      	movs	r3, #0
 80169ba:	9919      	ldr	r1, [sp, #100]	; 0x64
 80169bc:	f7e9 fd4e 	bl	800045c <__aeabi_dcmpeq>
 80169c0:	2800      	cmp	r0, #0
 80169c2:	d12c      	bne.n	8016a1e <_svfprintf_r+0x13b2>
 80169c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80169c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80169c8:	9308      	str	r3, [sp, #32]
 80169ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169cc:	6065      	str	r5, [r4, #4]
 80169ce:	1c5a      	adds	r2, r3, #1
 80169d0:	930e      	str	r3, [sp, #56]	; 0x38
 80169d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169d4:	922d      	str	r2, [sp, #180]	; 0xb4
 80169d6:	3301      	adds	r3, #1
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	9b08      	ldr	r3, [sp, #32]
 80169dc:	3408      	adds	r4, #8
 80169de:	3b01      	subs	r3, #1
 80169e0:	185b      	adds	r3, r3, r1
 80169e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80169e4:	2a07      	cmp	r2, #7
 80169e6:	dd07      	ble.n	80169f8 <_svfprintf_r+0x138c>
 80169e8:	aa2c      	add	r2, sp, #176	; 0xb0
 80169ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169ee:	f001 ff91 	bl	8018914 <__ssprint_r>
 80169f2:	2800      	cmp	r0, #0
 80169f4:	d15e      	bne.n	8016ab4 <_svfprintf_r+0x1448>
 80169f6:	ac2f      	add	r4, sp, #188	; 0xbc
 80169f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80169fa:	ab28      	add	r3, sp, #160	; 0xa0
 80169fc:	4694      	mov	ip, r2
 80169fe:	6023      	str	r3, [r4, #0]
 8016a00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016a02:	6063      	str	r3, [r4, #4]
 8016a04:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016a06:	4463      	add	r3, ip
 8016a08:	932e      	str	r3, [sp, #184]	; 0xb8
 8016a0a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a0c:	9308      	str	r3, [sp, #32]
 8016a0e:	3301      	adds	r3, #1
 8016a10:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a12:	2b07      	cmp	r3, #7
 8016a14:	dd00      	ble.n	8016a18 <_svfprintf_r+0x13ac>
 8016a16:	e629      	b.n	801666c <_svfprintf_r+0x1000>
 8016a18:	3408      	adds	r4, #8
 8016a1a:	0027      	movs	r7, r4
 8016a1c:	e579      	b.n	8016512 <_svfprintf_r+0xea6>
 8016a1e:	2710      	movs	r7, #16
 8016a20:	2d00      	cmp	r5, #0
 8016a22:	dde9      	ble.n	80169f8 <_svfprintf_r+0x138c>
 8016a24:	0021      	movs	r1, r4
 8016a26:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a28:	4807      	ldr	r0, [pc, #28]	; (8016a48 <_svfprintf_r+0x13dc>)
 8016a2a:	9308      	str	r3, [sp, #32]
 8016a2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016a2e:	3301      	adds	r3, #1
 8016a30:	3108      	adds	r1, #8
 8016a32:	6020      	str	r0, [r4, #0]
 8016a34:	2d10      	cmp	r5, #16
 8016a36:	dc09      	bgt.n	8016a4c <_svfprintf_r+0x13e0>
 8016a38:	6065      	str	r5, [r4, #4]
 8016a3a:	000c      	movs	r4, r1
 8016a3c:	18ad      	adds	r5, r5, r2
 8016a3e:	952e      	str	r5, [sp, #184]	; 0xb8
 8016a40:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a42:	2b07      	cmp	r3, #7
 8016a44:	ddd8      	ble.n	80169f8 <_svfprintf_r+0x138c>
 8016a46:	e7cf      	b.n	80169e8 <_svfprintf_r+0x137c>
 8016a48:	0801bb44 	.word	0x0801bb44
 8016a4c:	3210      	adds	r2, #16
 8016a4e:	6067      	str	r7, [r4, #4]
 8016a50:	922e      	str	r2, [sp, #184]	; 0xb8
 8016a52:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a54:	2b07      	cmp	r3, #7
 8016a56:	dd07      	ble.n	8016a68 <_svfprintf_r+0x13fc>
 8016a58:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a5e:	f001 ff59 	bl	8018914 <__ssprint_r>
 8016a62:	2800      	cmp	r0, #0
 8016a64:	d126      	bne.n	8016ab4 <_svfprintf_r+0x1448>
 8016a66:	a92f      	add	r1, sp, #188	; 0xbc
 8016a68:	3d10      	subs	r5, #16
 8016a6a:	000c      	movs	r4, r1
 8016a6c:	e7da      	b.n	8016a24 <_svfprintf_r+0x13b8>
 8016a6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a70:	912e      	str	r1, [sp, #184]	; 0xb8
 8016a72:	c705      	stmia	r7!, {r0, r2}
 8016a74:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a76:	e7e4      	b.n	8016a42 <_svfprintf_r+0x13d6>
 8016a78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016a7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016a7c:	2510      	movs	r5, #16
 8016a7e:	1a9c      	subs	r4, r3, r2
 8016a80:	2c00      	cmp	r4, #0
 8016a82:	dc00      	bgt.n	8016a86 <_svfprintf_r+0x141a>
 8016a84:	e548      	b.n	8016518 <_svfprintf_r+0xeac>
 8016a86:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a88:	4921      	ldr	r1, [pc, #132]	; (8016b10 <_svfprintf_r+0x14a4>)
 8016a8a:	9308      	str	r3, [sp, #32]
 8016a8c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016a8e:	3301      	adds	r3, #1
 8016a90:	6039      	str	r1, [r7, #0]
 8016a92:	2c10      	cmp	r4, #16
 8016a94:	dc19      	bgt.n	8016aca <_svfprintf_r+0x145e>
 8016a96:	607c      	str	r4, [r7, #4]
 8016a98:	18a4      	adds	r4, r4, r2
 8016a9a:	942e      	str	r4, [sp, #184]	; 0xb8
 8016a9c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a9e:	2b07      	cmp	r3, #7
 8016aa0:	dc00      	bgt.n	8016aa4 <_svfprintf_r+0x1438>
 8016aa2:	e539      	b.n	8016518 <_svfprintf_r+0xeac>
 8016aa4:	aa2c      	add	r2, sp, #176	; 0xb0
 8016aa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016aa8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016aaa:	f001 ff33 	bl	8018914 <__ssprint_r>
 8016aae:	2800      	cmp	r0, #0
 8016ab0:	d100      	bne.n	8016ab4 <_svfprintf_r+0x1448>
 8016ab2:	e531      	b.n	8016518 <_svfprintf_r+0xeac>
 8016ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d101      	bne.n	8016abe <_svfprintf_r+0x1452>
 8016aba:	f7ff f908 	bl	8015cce <_svfprintf_r+0x662>
 8016abe:	0019      	movs	r1, r3
 8016ac0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ac2:	f000 ff19 	bl	80178f8 <_free_r>
 8016ac6:	f7ff f902 	bl	8015cce <_svfprintf_r+0x662>
 8016aca:	3210      	adds	r2, #16
 8016acc:	607d      	str	r5, [r7, #4]
 8016ace:	922e      	str	r2, [sp, #184]	; 0xb8
 8016ad0:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ad2:	3708      	adds	r7, #8
 8016ad4:	2b07      	cmp	r3, #7
 8016ad6:	dd07      	ble.n	8016ae8 <_svfprintf_r+0x147c>
 8016ad8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ada:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016adc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ade:	f001 ff19 	bl	8018914 <__ssprint_r>
 8016ae2:	2800      	cmp	r0, #0
 8016ae4:	d1e6      	bne.n	8016ab4 <_svfprintf_r+0x1448>
 8016ae6:	af2f      	add	r7, sp, #188	; 0xbc
 8016ae8:	3c10      	subs	r4, #16
 8016aea:	e7cc      	b.n	8016a86 <_svfprintf_r+0x141a>
 8016aec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016aee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016af0:	f000 ff02 	bl	80178f8 <_free_r>
 8016af4:	e52a      	b.n	801654c <_svfprintf_r+0xee0>
 8016af6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016af8:	9306      	str	r3, [sp, #24]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d101      	bne.n	8016b02 <_svfprintf_r+0x1496>
 8016afe:	f7ff f8e6 	bl	8015cce <_svfprintf_r+0x662>
 8016b02:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b08:	f001 ff04 	bl	8018914 <__ssprint_r>
 8016b0c:	f7ff f8df 	bl	8015cce <_svfprintf_r+0x662>
 8016b10:	0801bb34 	.word	0x0801bb34

08016b14 <sysconf>:
 8016b14:	2380      	movs	r3, #128	; 0x80
 8016b16:	b510      	push	{r4, lr}
 8016b18:	015b      	lsls	r3, r3, #5
 8016b1a:	2808      	cmp	r0, #8
 8016b1c:	d004      	beq.n	8016b28 <sysconf+0x14>
 8016b1e:	f000 fe7d 	bl	801781c <__errno>
 8016b22:	2316      	movs	r3, #22
 8016b24:	6003      	str	r3, [r0, #0]
 8016b26:	3b17      	subs	r3, #23
 8016b28:	0018      	movs	r0, r3
 8016b2a:	bd10      	pop	{r4, pc}

08016b2c <__ascii_wctomb>:
 8016b2c:	1e0b      	subs	r3, r1, #0
 8016b2e:	d004      	beq.n	8016b3a <__ascii_wctomb+0xe>
 8016b30:	2aff      	cmp	r2, #255	; 0xff
 8016b32:	d904      	bls.n	8016b3e <__ascii_wctomb+0x12>
 8016b34:	238a      	movs	r3, #138	; 0x8a
 8016b36:	6003      	str	r3, [r0, #0]
 8016b38:	3b8b      	subs	r3, #139	; 0x8b
 8016b3a:	0018      	movs	r0, r3
 8016b3c:	4770      	bx	lr
 8016b3e:	700a      	strb	r2, [r1, #0]
 8016b40:	2301      	movs	r3, #1
 8016b42:	e7fa      	b.n	8016b3a <__ascii_wctomb+0xe>

08016b44 <register_fini>:
 8016b44:	4b03      	ldr	r3, [pc, #12]	; (8016b54 <register_fini+0x10>)
 8016b46:	b510      	push	{r4, lr}
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d002      	beq.n	8016b52 <register_fini+0xe>
 8016b4c:	4802      	ldr	r0, [pc, #8]	; (8016b58 <register_fini+0x14>)
 8016b4e:	f000 f805 	bl	8016b5c <atexit>
 8016b52:	bd10      	pop	{r4, pc}
 8016b54:	00000000 	.word	0x00000000
 8016b58:	08017829 	.word	0x08017829

08016b5c <atexit>:
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	b510      	push	{r4, lr}
 8016b60:	0001      	movs	r1, r0
 8016b62:	001a      	movs	r2, r3
 8016b64:	0018      	movs	r0, r3
 8016b66:	f001 ff53 	bl	8018a10 <__register_exitproc>
 8016b6a:	bd10      	pop	{r4, pc}

08016b6c <quorem>:
 8016b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b6e:	6903      	ldr	r3, [r0, #16]
 8016b70:	690c      	ldr	r4, [r1, #16]
 8016b72:	b089      	sub	sp, #36	; 0x24
 8016b74:	0007      	movs	r7, r0
 8016b76:	9105      	str	r1, [sp, #20]
 8016b78:	2600      	movs	r6, #0
 8016b7a:	42a3      	cmp	r3, r4
 8016b7c:	db65      	blt.n	8016c4a <quorem+0xde>
 8016b7e:	000b      	movs	r3, r1
 8016b80:	3c01      	subs	r4, #1
 8016b82:	3314      	adds	r3, #20
 8016b84:	00a5      	lsls	r5, r4, #2
 8016b86:	9303      	str	r3, [sp, #12]
 8016b88:	195b      	adds	r3, r3, r5
 8016b8a:	9304      	str	r3, [sp, #16]
 8016b8c:	0003      	movs	r3, r0
 8016b8e:	3314      	adds	r3, #20
 8016b90:	9302      	str	r3, [sp, #8]
 8016b92:	195d      	adds	r5, r3, r5
 8016b94:	9b04      	ldr	r3, [sp, #16]
 8016b96:	6828      	ldr	r0, [r5, #0]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	1c59      	adds	r1, r3, #1
 8016b9c:	9301      	str	r3, [sp, #4]
 8016b9e:	f7e9 fad7 	bl	8000150 <__udivsi3>
 8016ba2:	9001      	str	r0, [sp, #4]
 8016ba4:	42b0      	cmp	r0, r6
 8016ba6:	d029      	beq.n	8016bfc <quorem+0x90>
 8016ba8:	9b03      	ldr	r3, [sp, #12]
 8016baa:	9802      	ldr	r0, [sp, #8]
 8016bac:	469c      	mov	ip, r3
 8016bae:	9606      	str	r6, [sp, #24]
 8016bb0:	4662      	mov	r2, ip
 8016bb2:	ca08      	ldmia	r2!, {r3}
 8016bb4:	4694      	mov	ip, r2
 8016bb6:	9a01      	ldr	r2, [sp, #4]
 8016bb8:	b299      	uxth	r1, r3
 8016bba:	4351      	muls	r1, r2
 8016bbc:	0c1b      	lsrs	r3, r3, #16
 8016bbe:	4353      	muls	r3, r2
 8016bc0:	1989      	adds	r1, r1, r6
 8016bc2:	0c0a      	lsrs	r2, r1, #16
 8016bc4:	189b      	adds	r3, r3, r2
 8016bc6:	9307      	str	r3, [sp, #28]
 8016bc8:	0c1e      	lsrs	r6, r3, #16
 8016bca:	6803      	ldr	r3, [r0, #0]
 8016bcc:	b289      	uxth	r1, r1
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	9b06      	ldr	r3, [sp, #24]
 8016bd2:	18d2      	adds	r2, r2, r3
 8016bd4:	6803      	ldr	r3, [r0, #0]
 8016bd6:	1a52      	subs	r2, r2, r1
 8016bd8:	0c19      	lsrs	r1, r3, #16
 8016bda:	466b      	mov	r3, sp
 8016bdc:	8b9b      	ldrh	r3, [r3, #28]
 8016bde:	1acb      	subs	r3, r1, r3
 8016be0:	1411      	asrs	r1, r2, #16
 8016be2:	185b      	adds	r3, r3, r1
 8016be4:	1419      	asrs	r1, r3, #16
 8016be6:	b292      	uxth	r2, r2
 8016be8:	041b      	lsls	r3, r3, #16
 8016bea:	431a      	orrs	r2, r3
 8016bec:	9b04      	ldr	r3, [sp, #16]
 8016bee:	9106      	str	r1, [sp, #24]
 8016bf0:	c004      	stmia	r0!, {r2}
 8016bf2:	4563      	cmp	r3, ip
 8016bf4:	d2dc      	bcs.n	8016bb0 <quorem+0x44>
 8016bf6:	682b      	ldr	r3, [r5, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d02d      	beq.n	8016c58 <quorem+0xec>
 8016bfc:	9905      	ldr	r1, [sp, #20]
 8016bfe:	0038      	movs	r0, r7
 8016c00:	f001 fcb2 	bl	8018568 <__mcmp>
 8016c04:	2800      	cmp	r0, #0
 8016c06:	db1f      	blt.n	8016c48 <quorem+0xdc>
 8016c08:	2500      	movs	r5, #0
 8016c0a:	9b01      	ldr	r3, [sp, #4]
 8016c0c:	9802      	ldr	r0, [sp, #8]
 8016c0e:	3301      	adds	r3, #1
 8016c10:	9903      	ldr	r1, [sp, #12]
 8016c12:	9301      	str	r3, [sp, #4]
 8016c14:	6802      	ldr	r2, [r0, #0]
 8016c16:	c908      	ldmia	r1!, {r3}
 8016c18:	b292      	uxth	r2, r2
 8016c1a:	1955      	adds	r5, r2, r5
 8016c1c:	b29a      	uxth	r2, r3
 8016c1e:	1aaa      	subs	r2, r5, r2
 8016c20:	6805      	ldr	r5, [r0, #0]
 8016c22:	0c1b      	lsrs	r3, r3, #16
 8016c24:	0c2d      	lsrs	r5, r5, #16
 8016c26:	1aeb      	subs	r3, r5, r3
 8016c28:	1415      	asrs	r5, r2, #16
 8016c2a:	195b      	adds	r3, r3, r5
 8016c2c:	141d      	asrs	r5, r3, #16
 8016c2e:	b292      	uxth	r2, r2
 8016c30:	041b      	lsls	r3, r3, #16
 8016c32:	4313      	orrs	r3, r2
 8016c34:	c008      	stmia	r0!, {r3}
 8016c36:	9b04      	ldr	r3, [sp, #16]
 8016c38:	428b      	cmp	r3, r1
 8016c3a:	d2eb      	bcs.n	8016c14 <quorem+0xa8>
 8016c3c:	9a02      	ldr	r2, [sp, #8]
 8016c3e:	00a3      	lsls	r3, r4, #2
 8016c40:	18d3      	adds	r3, r2, r3
 8016c42:	681a      	ldr	r2, [r3, #0]
 8016c44:	2a00      	cmp	r2, #0
 8016c46:	d011      	beq.n	8016c6c <quorem+0x100>
 8016c48:	9e01      	ldr	r6, [sp, #4]
 8016c4a:	0030      	movs	r0, r6
 8016c4c:	b009      	add	sp, #36	; 0x24
 8016c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c50:	682b      	ldr	r3, [r5, #0]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d104      	bne.n	8016c60 <quorem+0xf4>
 8016c56:	3c01      	subs	r4, #1
 8016c58:	9b02      	ldr	r3, [sp, #8]
 8016c5a:	3d04      	subs	r5, #4
 8016c5c:	42ab      	cmp	r3, r5
 8016c5e:	d3f7      	bcc.n	8016c50 <quorem+0xe4>
 8016c60:	613c      	str	r4, [r7, #16]
 8016c62:	e7cb      	b.n	8016bfc <quorem+0x90>
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	2a00      	cmp	r2, #0
 8016c68:	d104      	bne.n	8016c74 <quorem+0x108>
 8016c6a:	3c01      	subs	r4, #1
 8016c6c:	9a02      	ldr	r2, [sp, #8]
 8016c6e:	3b04      	subs	r3, #4
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d3f7      	bcc.n	8016c64 <quorem+0xf8>
 8016c74:	613c      	str	r4, [r7, #16]
 8016c76:	e7e7      	b.n	8016c48 <quorem+0xdc>

08016c78 <_dtoa_r>:
 8016c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c7a:	0014      	movs	r4, r2
 8016c7c:	001d      	movs	r5, r3
 8016c7e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016c80:	b09b      	sub	sp, #108	; 0x6c
 8016c82:	9002      	str	r0, [sp, #8]
 8016c84:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8016c86:	9406      	str	r4, [sp, #24]
 8016c88:	9507      	str	r5, [sp, #28]
 8016c8a:	2900      	cmp	r1, #0
 8016c8c:	d009      	beq.n	8016ca2 <_dtoa_r+0x2a>
 8016c8e:	2301      	movs	r3, #1
 8016c90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016c92:	4093      	lsls	r3, r2
 8016c94:	604a      	str	r2, [r1, #4]
 8016c96:	608b      	str	r3, [r1, #8]
 8016c98:	f001 fa6a 	bl	8018170 <_Bfree>
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	9a02      	ldr	r2, [sp, #8]
 8016ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8016ca2:	2d00      	cmp	r5, #0
 8016ca4:	da20      	bge.n	8016ce8 <_dtoa_r+0x70>
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	6033      	str	r3, [r6, #0]
 8016caa:	006b      	lsls	r3, r5, #1
 8016cac:	085b      	lsrs	r3, r3, #1
 8016cae:	9307      	str	r3, [sp, #28]
 8016cb0:	9c07      	ldr	r4, [sp, #28]
 8016cb2:	4bb2      	ldr	r3, [pc, #712]	; (8016f7c <_dtoa_r+0x304>)
 8016cb4:	0022      	movs	r2, r4
 8016cb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8016cb8:	401a      	ands	r2, r3
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d117      	bne.n	8016cee <_dtoa_r+0x76>
 8016cbe:	4bb0      	ldr	r3, [pc, #704]	; (8016f80 <_dtoa_r+0x308>)
 8016cc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016cc2:	6013      	str	r3, [r2, #0]
 8016cc4:	9b06      	ldr	r3, [sp, #24]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d103      	bne.n	8016cd2 <_dtoa_r+0x5a>
 8016cca:	0324      	lsls	r4, r4, #12
 8016ccc:	d101      	bne.n	8016cd2 <_dtoa_r+0x5a>
 8016cce:	f000 fd89 	bl	80177e4 <_dtoa_r+0xb6c>
 8016cd2:	4bac      	ldr	r3, [pc, #688]	; (8016f84 <_dtoa_r+0x30c>)
 8016cd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016cd6:	9308      	str	r3, [sp, #32]
 8016cd8:	2a00      	cmp	r2, #0
 8016cda:	d002      	beq.n	8016ce2 <_dtoa_r+0x6a>
 8016cdc:	4baa      	ldr	r3, [pc, #680]	; (8016f88 <_dtoa_r+0x310>)
 8016cde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016ce0:	6013      	str	r3, [r2, #0]
 8016ce2:	9808      	ldr	r0, [sp, #32]
 8016ce4:	b01b      	add	sp, #108	; 0x6c
 8016ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ce8:	2300      	movs	r3, #0
 8016cea:	6033      	str	r3, [r6, #0]
 8016cec:	e7e0      	b.n	8016cb0 <_dtoa_r+0x38>
 8016cee:	9e06      	ldr	r6, [sp, #24]
 8016cf0:	9f07      	ldr	r7, [sp, #28]
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	0030      	movs	r0, r6
 8016cf8:	0039      	movs	r1, r7
 8016cfa:	f7e9 fbaf 	bl	800045c <__aeabi_dcmpeq>
 8016cfe:	1e05      	subs	r5, r0, #0
 8016d00:	d00b      	beq.n	8016d1a <_dtoa_r+0xa2>
 8016d02:	2301      	movs	r3, #1
 8016d04:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016d06:	6013      	str	r3, [r2, #0]
 8016d08:	4ba0      	ldr	r3, [pc, #640]	; (8016f8c <_dtoa_r+0x314>)
 8016d0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016d0c:	9308      	str	r3, [sp, #32]
 8016d0e:	2a00      	cmp	r2, #0
 8016d10:	d0e7      	beq.n	8016ce2 <_dtoa_r+0x6a>
 8016d12:	4a9f      	ldr	r2, [pc, #636]	; (8016f90 <_dtoa_r+0x318>)
 8016d14:	9924      	ldr	r1, [sp, #144]	; 0x90
 8016d16:	600a      	str	r2, [r1, #0]
 8016d18:	e7e3      	b.n	8016ce2 <_dtoa_r+0x6a>
 8016d1a:	ab18      	add	r3, sp, #96	; 0x60
 8016d1c:	9301      	str	r3, [sp, #4]
 8016d1e:	ab19      	add	r3, sp, #100	; 0x64
 8016d20:	9300      	str	r3, [sp, #0]
 8016d22:	0032      	movs	r2, r6
 8016d24:	003b      	movs	r3, r7
 8016d26:	9802      	ldr	r0, [sp, #8]
 8016d28:	f001 fd0e 	bl	8018748 <__d2b>
 8016d2c:	0063      	lsls	r3, r4, #1
 8016d2e:	9003      	str	r0, [sp, #12]
 8016d30:	0d5b      	lsrs	r3, r3, #21
 8016d32:	d074      	beq.n	8016e1e <_dtoa_r+0x1a6>
 8016d34:	033a      	lsls	r2, r7, #12
 8016d36:	4c97      	ldr	r4, [pc, #604]	; (8016f94 <_dtoa_r+0x31c>)
 8016d38:	0b12      	lsrs	r2, r2, #12
 8016d3a:	4314      	orrs	r4, r2
 8016d3c:	0021      	movs	r1, r4
 8016d3e:	4a96      	ldr	r2, [pc, #600]	; (8016f98 <_dtoa_r+0x320>)
 8016d40:	0030      	movs	r0, r6
 8016d42:	9516      	str	r5, [sp, #88]	; 0x58
 8016d44:	189e      	adds	r6, r3, r2
 8016d46:	2200      	movs	r2, #0
 8016d48:	4b94      	ldr	r3, [pc, #592]	; (8016f9c <_dtoa_r+0x324>)
 8016d4a:	f7eb fbff 	bl	800254c <__aeabi_dsub>
 8016d4e:	4a94      	ldr	r2, [pc, #592]	; (8016fa0 <_dtoa_r+0x328>)
 8016d50:	4b94      	ldr	r3, [pc, #592]	; (8016fa4 <_dtoa_r+0x32c>)
 8016d52:	f7eb f989 	bl	8002068 <__aeabi_dmul>
 8016d56:	4a94      	ldr	r2, [pc, #592]	; (8016fa8 <_dtoa_r+0x330>)
 8016d58:	4b94      	ldr	r3, [pc, #592]	; (8016fac <_dtoa_r+0x334>)
 8016d5a:	f7ea fa5f 	bl	800121c <__aeabi_dadd>
 8016d5e:	0004      	movs	r4, r0
 8016d60:	0030      	movs	r0, r6
 8016d62:	000d      	movs	r5, r1
 8016d64:	f7eb ff8c 	bl	8002c80 <__aeabi_i2d>
 8016d68:	4a91      	ldr	r2, [pc, #580]	; (8016fb0 <_dtoa_r+0x338>)
 8016d6a:	4b92      	ldr	r3, [pc, #584]	; (8016fb4 <_dtoa_r+0x33c>)
 8016d6c:	f7eb f97c 	bl	8002068 <__aeabi_dmul>
 8016d70:	0002      	movs	r2, r0
 8016d72:	000b      	movs	r3, r1
 8016d74:	0020      	movs	r0, r4
 8016d76:	0029      	movs	r1, r5
 8016d78:	f7ea fa50 	bl	800121c <__aeabi_dadd>
 8016d7c:	0004      	movs	r4, r0
 8016d7e:	000d      	movs	r5, r1
 8016d80:	f7eb ff48 	bl	8002c14 <__aeabi_d2iz>
 8016d84:	2200      	movs	r2, #0
 8016d86:	0007      	movs	r7, r0
 8016d88:	2300      	movs	r3, #0
 8016d8a:	0020      	movs	r0, r4
 8016d8c:	0029      	movs	r1, r5
 8016d8e:	f7e9 fb6b 	bl	8000468 <__aeabi_dcmplt>
 8016d92:	2800      	cmp	r0, #0
 8016d94:	d009      	beq.n	8016daa <_dtoa_r+0x132>
 8016d96:	0038      	movs	r0, r7
 8016d98:	f7eb ff72 	bl	8002c80 <__aeabi_i2d>
 8016d9c:	002b      	movs	r3, r5
 8016d9e:	0022      	movs	r2, r4
 8016da0:	f7e9 fb5c 	bl	800045c <__aeabi_dcmpeq>
 8016da4:	4243      	negs	r3, r0
 8016da6:	4158      	adcs	r0, r3
 8016da8:	1a3f      	subs	r7, r7, r0
 8016daa:	2301      	movs	r3, #1
 8016dac:	9314      	str	r3, [sp, #80]	; 0x50
 8016dae:	2f16      	cmp	r7, #22
 8016db0:	d80d      	bhi.n	8016dce <_dtoa_r+0x156>
 8016db2:	4981      	ldr	r1, [pc, #516]	; (8016fb8 <_dtoa_r+0x340>)
 8016db4:	00fb      	lsls	r3, r7, #3
 8016db6:	18c9      	adds	r1, r1, r3
 8016db8:	6808      	ldr	r0, [r1, #0]
 8016dba:	6849      	ldr	r1, [r1, #4]
 8016dbc:	9a06      	ldr	r2, [sp, #24]
 8016dbe:	9b07      	ldr	r3, [sp, #28]
 8016dc0:	f7e9 fb66 	bl	8000490 <__aeabi_dcmpgt>
 8016dc4:	2800      	cmp	r0, #0
 8016dc6:	d046      	beq.n	8016e56 <_dtoa_r+0x1de>
 8016dc8:	2300      	movs	r3, #0
 8016dca:	3f01      	subs	r7, #1
 8016dcc:	9314      	str	r3, [sp, #80]	; 0x50
 8016dce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016dd0:	1b9e      	subs	r6, r3, r6
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8016dd6:	0033      	movs	r3, r6
 8016dd8:	3b01      	subs	r3, #1
 8016dda:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ddc:	d504      	bpl.n	8016de8 <_dtoa_r+0x170>
 8016dde:	2301      	movs	r3, #1
 8016de0:	1b9b      	subs	r3, r3, r6
 8016de2:	930a      	str	r3, [sp, #40]	; 0x28
 8016de4:	2300      	movs	r3, #0
 8016de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016de8:	2f00      	cmp	r7, #0
 8016dea:	db36      	blt.n	8016e5a <_dtoa_r+0x1e2>
 8016dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dee:	9711      	str	r7, [sp, #68]	; 0x44
 8016df0:	19db      	adds	r3, r3, r7
 8016df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8016df4:	2300      	movs	r3, #0
 8016df6:	9304      	str	r3, [sp, #16]
 8016df8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016dfa:	2401      	movs	r4, #1
 8016dfc:	2b09      	cmp	r3, #9
 8016dfe:	d900      	bls.n	8016e02 <_dtoa_r+0x18a>
 8016e00:	e082      	b.n	8016f08 <_dtoa_r+0x290>
 8016e02:	2b05      	cmp	r3, #5
 8016e04:	dd02      	ble.n	8016e0c <_dtoa_r+0x194>
 8016e06:	2400      	movs	r4, #0
 8016e08:	3b04      	subs	r3, #4
 8016e0a:	9320      	str	r3, [sp, #128]	; 0x80
 8016e0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016e0e:	1e98      	subs	r0, r3, #2
 8016e10:	2803      	cmp	r0, #3
 8016e12:	d900      	bls.n	8016e16 <_dtoa_r+0x19e>
 8016e14:	e082      	b.n	8016f1c <_dtoa_r+0x2a4>
 8016e16:	f7e9 f987 	bl	8000128 <__gnu_thumb1_case_uqi>
 8016e1a:	7573      	.short	0x7573
 8016e1c:	6828      	.short	0x6828
 8016e1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016e20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016e22:	189e      	adds	r6, r3, r2
 8016e24:	4b65      	ldr	r3, [pc, #404]	; (8016fbc <_dtoa_r+0x344>)
 8016e26:	18f2      	adds	r2, r6, r3
 8016e28:	2a20      	cmp	r2, #32
 8016e2a:	dd0f      	ble.n	8016e4c <_dtoa_r+0x1d4>
 8016e2c:	2340      	movs	r3, #64	; 0x40
 8016e2e:	1a9b      	subs	r3, r3, r2
 8016e30:	409c      	lsls	r4, r3
 8016e32:	4b63      	ldr	r3, [pc, #396]	; (8016fc0 <_dtoa_r+0x348>)
 8016e34:	9806      	ldr	r0, [sp, #24]
 8016e36:	18f3      	adds	r3, r6, r3
 8016e38:	40d8      	lsrs	r0, r3
 8016e3a:	4320      	orrs	r0, r4
 8016e3c:	f7eb ff5a 	bl	8002cf4 <__aeabi_ui2d>
 8016e40:	2301      	movs	r3, #1
 8016e42:	4c60      	ldr	r4, [pc, #384]	; (8016fc4 <_dtoa_r+0x34c>)
 8016e44:	3e01      	subs	r6, #1
 8016e46:	1909      	adds	r1, r1, r4
 8016e48:	9316      	str	r3, [sp, #88]	; 0x58
 8016e4a:	e77c      	b.n	8016d46 <_dtoa_r+0xce>
 8016e4c:	2320      	movs	r3, #32
 8016e4e:	9806      	ldr	r0, [sp, #24]
 8016e50:	1a9b      	subs	r3, r3, r2
 8016e52:	4098      	lsls	r0, r3
 8016e54:	e7f2      	b.n	8016e3c <_dtoa_r+0x1c4>
 8016e56:	9014      	str	r0, [sp, #80]	; 0x50
 8016e58:	e7b9      	b.n	8016dce <_dtoa_r+0x156>
 8016e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e5c:	1bdb      	subs	r3, r3, r7
 8016e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8016e60:	427b      	negs	r3, r7
 8016e62:	9304      	str	r3, [sp, #16]
 8016e64:	2300      	movs	r3, #0
 8016e66:	9311      	str	r3, [sp, #68]	; 0x44
 8016e68:	e7c6      	b.n	8016df8 <_dtoa_r+0x180>
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	930d      	str	r3, [sp, #52]	; 0x34
 8016e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	dd57      	ble.n	8016f24 <_dtoa_r+0x2ac>
 8016e74:	930c      	str	r3, [sp, #48]	; 0x30
 8016e76:	9309      	str	r3, [sp, #36]	; 0x24
 8016e78:	2200      	movs	r2, #0
 8016e7a:	9902      	ldr	r1, [sp, #8]
 8016e7c:	644a      	str	r2, [r1, #68]	; 0x44
 8016e7e:	3204      	adds	r2, #4
 8016e80:	0010      	movs	r0, r2
 8016e82:	9902      	ldr	r1, [sp, #8]
 8016e84:	3014      	adds	r0, #20
 8016e86:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8016e88:	4298      	cmp	r0, r3
 8016e8a:	d950      	bls.n	8016f2e <_dtoa_r+0x2b6>
 8016e8c:	9802      	ldr	r0, [sp, #8]
 8016e8e:	f001 f947 	bl	8018120 <_Balloc>
 8016e92:	9b02      	ldr	r3, [sp, #8]
 8016e94:	9008      	str	r0, [sp, #32]
 8016e96:	6418      	str	r0, [r3, #64]	; 0x40
 8016e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e9a:	2b0e      	cmp	r3, #14
 8016e9c:	d900      	bls.n	8016ea0 <_dtoa_r+0x228>
 8016e9e:	e10c      	b.n	80170ba <_dtoa_r+0x442>
 8016ea0:	2c00      	cmp	r4, #0
 8016ea2:	d100      	bne.n	8016ea6 <_dtoa_r+0x22e>
 8016ea4:	e109      	b.n	80170ba <_dtoa_r+0x442>
 8016ea6:	9b06      	ldr	r3, [sp, #24]
 8016ea8:	9c07      	ldr	r4, [sp, #28]
 8016eaa:	9312      	str	r3, [sp, #72]	; 0x48
 8016eac:	9413      	str	r4, [sp, #76]	; 0x4c
 8016eae:	2f00      	cmp	r7, #0
 8016eb0:	dc00      	bgt.n	8016eb4 <_dtoa_r+0x23c>
 8016eb2:	e08b      	b.n	8016fcc <_dtoa_r+0x354>
 8016eb4:	210f      	movs	r1, #15
 8016eb6:	003a      	movs	r2, r7
 8016eb8:	4b3f      	ldr	r3, [pc, #252]	; (8016fb8 <_dtoa_r+0x340>)
 8016eba:	400a      	ands	r2, r1
 8016ebc:	00d2      	lsls	r2, r2, #3
 8016ebe:	189b      	adds	r3, r3, r2
 8016ec0:	681d      	ldr	r5, [r3, #0]
 8016ec2:	685e      	ldr	r6, [r3, #4]
 8016ec4:	2302      	movs	r3, #2
 8016ec6:	113c      	asrs	r4, r7, #4
 8016ec8:	930e      	str	r3, [sp, #56]	; 0x38
 8016eca:	06e3      	lsls	r3, r4, #27
 8016ecc:	d50b      	bpl.n	8016ee6 <_dtoa_r+0x26e>
 8016ece:	4b3e      	ldr	r3, [pc, #248]	; (8016fc8 <_dtoa_r+0x350>)
 8016ed0:	400c      	ands	r4, r1
 8016ed2:	6a1a      	ldr	r2, [r3, #32]
 8016ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ed6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016ed8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016eda:	f7ea fcbb 	bl	8001854 <__aeabi_ddiv>
 8016ede:	2303      	movs	r3, #3
 8016ee0:	9006      	str	r0, [sp, #24]
 8016ee2:	9107      	str	r1, [sp, #28]
 8016ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	e03b      	b.n	8016f62 <_dtoa_r+0x2ea>
 8016eea:	2301      	movs	r3, #1
 8016eec:	930d      	str	r3, [sp, #52]	; 0x34
 8016eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ef0:	18fb      	adds	r3, r7, r3
 8016ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8016ef4:	3301      	adds	r3, #1
 8016ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	dcbd      	bgt.n	8016e78 <_dtoa_r+0x200>
 8016efc:	2301      	movs	r3, #1
 8016efe:	e7bb      	b.n	8016e78 <_dtoa_r+0x200>
 8016f00:	2300      	movs	r3, #0
 8016f02:	e7b3      	b.n	8016e6c <_dtoa_r+0x1f4>
 8016f04:	2300      	movs	r3, #0
 8016f06:	e7f1      	b.n	8016eec <_dtoa_r+0x274>
 8016f08:	2300      	movs	r3, #0
 8016f0a:	940d      	str	r4, [sp, #52]	; 0x34
 8016f0c:	9320      	str	r3, [sp, #128]	; 0x80
 8016f0e:	3b01      	subs	r3, #1
 8016f10:	2200      	movs	r2, #0
 8016f12:	930c      	str	r3, [sp, #48]	; 0x30
 8016f14:	9309      	str	r3, [sp, #36]	; 0x24
 8016f16:	3313      	adds	r3, #19
 8016f18:	9221      	str	r2, [sp, #132]	; 0x84
 8016f1a:	e7ad      	b.n	8016e78 <_dtoa_r+0x200>
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8016f20:	3b02      	subs	r3, #2
 8016f22:	e7f5      	b.n	8016f10 <_dtoa_r+0x298>
 8016f24:	2301      	movs	r3, #1
 8016f26:	930c      	str	r3, [sp, #48]	; 0x30
 8016f28:	9309      	str	r3, [sp, #36]	; 0x24
 8016f2a:	001a      	movs	r2, r3
 8016f2c:	e7f4      	b.n	8016f18 <_dtoa_r+0x2a0>
 8016f2e:	9802      	ldr	r0, [sp, #8]
 8016f30:	3101      	adds	r1, #1
 8016f32:	6441      	str	r1, [r0, #68]	; 0x44
 8016f34:	0052      	lsls	r2, r2, #1
 8016f36:	e7a3      	b.n	8016e80 <_dtoa_r+0x208>
 8016f38:	2301      	movs	r3, #1
 8016f3a:	421c      	tst	r4, r3
 8016f3c:	d00e      	beq.n	8016f5c <_dtoa_r+0x2e4>
 8016f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f40:	4a21      	ldr	r2, [pc, #132]	; (8016fc8 <_dtoa_r+0x350>)
 8016f42:	3301      	adds	r3, #1
 8016f44:	930e      	str	r3, [sp, #56]	; 0x38
 8016f46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f48:	0028      	movs	r0, r5
 8016f4a:	00db      	lsls	r3, r3, #3
 8016f4c:	189b      	adds	r3, r3, r2
 8016f4e:	0031      	movs	r1, r6
 8016f50:	681a      	ldr	r2, [r3, #0]
 8016f52:	685b      	ldr	r3, [r3, #4]
 8016f54:	f7eb f888 	bl	8002068 <__aeabi_dmul>
 8016f58:	0005      	movs	r5, r0
 8016f5a:	000e      	movs	r6, r1
 8016f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f5e:	1064      	asrs	r4, r4, #1
 8016f60:	3301      	adds	r3, #1
 8016f62:	9310      	str	r3, [sp, #64]	; 0x40
 8016f64:	2c00      	cmp	r4, #0
 8016f66:	d1e7      	bne.n	8016f38 <_dtoa_r+0x2c0>
 8016f68:	9806      	ldr	r0, [sp, #24]
 8016f6a:	9907      	ldr	r1, [sp, #28]
 8016f6c:	002a      	movs	r2, r5
 8016f6e:	0033      	movs	r3, r6
 8016f70:	f7ea fc70 	bl	8001854 <__aeabi_ddiv>
 8016f74:	9006      	str	r0, [sp, #24]
 8016f76:	9107      	str	r1, [sp, #28]
 8016f78:	e043      	b.n	8017002 <_dtoa_r+0x38a>
 8016f7a:	46c0      	nop			; (mov r8, r8)
 8016f7c:	7ff00000 	.word	0x7ff00000
 8016f80:	0000270f 	.word	0x0000270f
 8016f84:	0801bc5e 	.word	0x0801bc5e
 8016f88:	0801bc61 	.word	0x0801bc61
 8016f8c:	0801bb32 	.word	0x0801bb32
 8016f90:	0801bb33 	.word	0x0801bb33
 8016f94:	3ff00000 	.word	0x3ff00000
 8016f98:	fffffc01 	.word	0xfffffc01
 8016f9c:	3ff80000 	.word	0x3ff80000
 8016fa0:	636f4361 	.word	0x636f4361
 8016fa4:	3fd287a7 	.word	0x3fd287a7
 8016fa8:	8b60c8b3 	.word	0x8b60c8b3
 8016fac:	3fc68a28 	.word	0x3fc68a28
 8016fb0:	509f79fb 	.word	0x509f79fb
 8016fb4:	3fd34413 	.word	0x3fd34413
 8016fb8:	0801bc90 	.word	0x0801bc90
 8016fbc:	00000432 	.word	0x00000432
 8016fc0:	00000412 	.word	0x00000412
 8016fc4:	fe100000 	.word	0xfe100000
 8016fc8:	0801bc68 	.word	0x0801bc68
 8016fcc:	2302      	movs	r3, #2
 8016fce:	930e      	str	r3, [sp, #56]	; 0x38
 8016fd0:	2f00      	cmp	r7, #0
 8016fd2:	d016      	beq.n	8017002 <_dtoa_r+0x38a>
 8016fd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016fd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016fd8:	427c      	negs	r4, r7
 8016fda:	330d      	adds	r3, #13
 8016fdc:	4023      	ands	r3, r4
 8016fde:	4acf      	ldr	r2, [pc, #828]	; (801731c <_dtoa_r+0x6a4>)
 8016fe0:	00db      	lsls	r3, r3, #3
 8016fe2:	18d3      	adds	r3, r2, r3
 8016fe4:	681a      	ldr	r2, [r3, #0]
 8016fe6:	685b      	ldr	r3, [r3, #4]
 8016fe8:	f7eb f83e 	bl	8002068 <__aeabi_dmul>
 8016fec:	2300      	movs	r3, #0
 8016fee:	2601      	movs	r6, #1
 8016ff0:	001d      	movs	r5, r3
 8016ff2:	9006      	str	r0, [sp, #24]
 8016ff4:	9107      	str	r1, [sp, #28]
 8016ff6:	1124      	asrs	r4, r4, #4
 8016ff8:	2c00      	cmp	r4, #0
 8016ffa:	d000      	beq.n	8016ffe <_dtoa_r+0x386>
 8016ffc:	e08c      	b.n	8017118 <_dtoa_r+0x4a0>
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d1b8      	bne.n	8016f74 <_dtoa_r+0x2fc>
 8017002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017004:	2b00      	cmp	r3, #0
 8017006:	d100      	bne.n	801700a <_dtoa_r+0x392>
 8017008:	e096      	b.n	8017138 <_dtoa_r+0x4c0>
 801700a:	9c06      	ldr	r4, [sp, #24]
 801700c:	9d07      	ldr	r5, [sp, #28]
 801700e:	2200      	movs	r2, #0
 8017010:	4bc3      	ldr	r3, [pc, #780]	; (8017320 <_dtoa_r+0x6a8>)
 8017012:	0020      	movs	r0, r4
 8017014:	0029      	movs	r1, r5
 8017016:	f7e9 fa27 	bl	8000468 <__aeabi_dcmplt>
 801701a:	2800      	cmp	r0, #0
 801701c:	d100      	bne.n	8017020 <_dtoa_r+0x3a8>
 801701e:	e08b      	b.n	8017138 <_dtoa_r+0x4c0>
 8017020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017022:	2b00      	cmp	r3, #0
 8017024:	d100      	bne.n	8017028 <_dtoa_r+0x3b0>
 8017026:	e087      	b.n	8017138 <_dtoa_r+0x4c0>
 8017028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801702a:	2b00      	cmp	r3, #0
 801702c:	dd41      	ble.n	80170b2 <_dtoa_r+0x43a>
 801702e:	4bbd      	ldr	r3, [pc, #756]	; (8017324 <_dtoa_r+0x6ac>)
 8017030:	2200      	movs	r2, #0
 8017032:	0020      	movs	r0, r4
 8017034:	0029      	movs	r1, r5
 8017036:	f7eb f817 	bl	8002068 <__aeabi_dmul>
 801703a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801703c:	9006      	str	r0, [sp, #24]
 801703e:	9107      	str	r1, [sp, #28]
 8017040:	3301      	adds	r3, #1
 8017042:	930e      	str	r3, [sp, #56]	; 0x38
 8017044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017046:	1e7e      	subs	r6, r7, #1
 8017048:	980e      	ldr	r0, [sp, #56]	; 0x38
 801704a:	9310      	str	r3, [sp, #64]	; 0x40
 801704c:	f7eb fe18 	bl	8002c80 <__aeabi_i2d>
 8017050:	9a06      	ldr	r2, [sp, #24]
 8017052:	9b07      	ldr	r3, [sp, #28]
 8017054:	f7eb f808 	bl	8002068 <__aeabi_dmul>
 8017058:	2200      	movs	r2, #0
 801705a:	4bb3      	ldr	r3, [pc, #716]	; (8017328 <_dtoa_r+0x6b0>)
 801705c:	f7ea f8de 	bl	800121c <__aeabi_dadd>
 8017060:	4ab2      	ldr	r2, [pc, #712]	; (801732c <_dtoa_r+0x6b4>)
 8017062:	900e      	str	r0, [sp, #56]	; 0x38
 8017064:	910f      	str	r1, [sp, #60]	; 0x3c
 8017066:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017068:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801706a:	4694      	mov	ip, r2
 801706c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801706e:	4463      	add	r3, ip
 8017070:	9315      	str	r3, [sp, #84]	; 0x54
 8017072:	001d      	movs	r5, r3
 8017074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017076:	2b00      	cmp	r3, #0
 8017078:	d161      	bne.n	801713e <_dtoa_r+0x4c6>
 801707a:	9806      	ldr	r0, [sp, #24]
 801707c:	9907      	ldr	r1, [sp, #28]
 801707e:	2200      	movs	r2, #0
 8017080:	4bab      	ldr	r3, [pc, #684]	; (8017330 <_dtoa_r+0x6b8>)
 8017082:	f7eb fa63 	bl	800254c <__aeabi_dsub>
 8017086:	0022      	movs	r2, r4
 8017088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801708a:	9006      	str	r0, [sp, #24]
 801708c:	9107      	str	r1, [sp, #28]
 801708e:	f7e9 f9ff 	bl	8000490 <__aeabi_dcmpgt>
 8017092:	2800      	cmp	r0, #0
 8017094:	d000      	beq.n	8017098 <_dtoa_r+0x420>
 8017096:	e2aa      	b.n	80175ee <_dtoa_r+0x976>
 8017098:	48a6      	ldr	r0, [pc, #664]	; (8017334 <_dtoa_r+0x6bc>)
 801709a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801709c:	4684      	mov	ip, r0
 801709e:	4461      	add	r1, ip
 80170a0:	000b      	movs	r3, r1
 80170a2:	9806      	ldr	r0, [sp, #24]
 80170a4:	9907      	ldr	r1, [sp, #28]
 80170a6:	0022      	movs	r2, r4
 80170a8:	f7e9 f9de 	bl	8000468 <__aeabi_dcmplt>
 80170ac:	2800      	cmp	r0, #0
 80170ae:	d000      	beq.n	80170b2 <_dtoa_r+0x43a>
 80170b0:	e297      	b.n	80175e2 <_dtoa_r+0x96a>
 80170b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80170b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80170b6:	9306      	str	r3, [sp, #24]
 80170b8:	9407      	str	r4, [sp, #28]
 80170ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80170bc:	2b00      	cmp	r3, #0
 80170be:	da00      	bge.n	80170c2 <_dtoa_r+0x44a>
 80170c0:	e15e      	b.n	8017380 <_dtoa_r+0x708>
 80170c2:	2f0e      	cmp	r7, #14
 80170c4:	dd00      	ble.n	80170c8 <_dtoa_r+0x450>
 80170c6:	e15b      	b.n	8017380 <_dtoa_r+0x708>
 80170c8:	4b94      	ldr	r3, [pc, #592]	; (801731c <_dtoa_r+0x6a4>)
 80170ca:	00fa      	lsls	r2, r7, #3
 80170cc:	189b      	adds	r3, r3, r2
 80170ce:	685c      	ldr	r4, [r3, #4]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	9304      	str	r3, [sp, #16]
 80170d4:	9405      	str	r4, [sp, #20]
 80170d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170d8:	2b00      	cmp	r3, #0
 80170da:	db00      	blt.n	80170de <_dtoa_r+0x466>
 80170dc:	e0da      	b.n	8017294 <_dtoa_r+0x61c>
 80170de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	dd00      	ble.n	80170e6 <_dtoa_r+0x46e>
 80170e4:	e0d6      	b.n	8017294 <_dtoa_r+0x61c>
 80170e6:	d000      	beq.n	80170ea <_dtoa_r+0x472>
 80170e8:	e27f      	b.n	80175ea <_dtoa_r+0x972>
 80170ea:	9804      	ldr	r0, [sp, #16]
 80170ec:	9905      	ldr	r1, [sp, #20]
 80170ee:	2200      	movs	r2, #0
 80170f0:	4b8f      	ldr	r3, [pc, #572]	; (8017330 <_dtoa_r+0x6b8>)
 80170f2:	f7ea ffb9 	bl	8002068 <__aeabi_dmul>
 80170f6:	9a06      	ldr	r2, [sp, #24]
 80170f8:	9b07      	ldr	r3, [sp, #28]
 80170fa:	f7e9 f9d3 	bl	80004a4 <__aeabi_dcmpge>
 80170fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017100:	9304      	str	r3, [sp, #16]
 8017102:	001e      	movs	r6, r3
 8017104:	2800      	cmp	r0, #0
 8017106:	d000      	beq.n	801710a <_dtoa_r+0x492>
 8017108:	e251      	b.n	80175ae <_dtoa_r+0x936>
 801710a:	9b08      	ldr	r3, [sp, #32]
 801710c:	9a08      	ldr	r2, [sp, #32]
 801710e:	1c5d      	adds	r5, r3, #1
 8017110:	2331      	movs	r3, #49	; 0x31
 8017112:	3701      	adds	r7, #1
 8017114:	7013      	strb	r3, [r2, #0]
 8017116:	e24d      	b.n	80175b4 <_dtoa_r+0x93c>
 8017118:	4234      	tst	r4, r6
 801711a:	d00a      	beq.n	8017132 <_dtoa_r+0x4ba>
 801711c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801711e:	4a86      	ldr	r2, [pc, #536]	; (8017338 <_dtoa_r+0x6c0>)
 8017120:	3301      	adds	r3, #1
 8017122:	930e      	str	r3, [sp, #56]	; 0x38
 8017124:	00eb      	lsls	r3, r5, #3
 8017126:	189b      	adds	r3, r3, r2
 8017128:	681a      	ldr	r2, [r3, #0]
 801712a:	685b      	ldr	r3, [r3, #4]
 801712c:	f7ea ff9c 	bl	8002068 <__aeabi_dmul>
 8017130:	0033      	movs	r3, r6
 8017132:	1064      	asrs	r4, r4, #1
 8017134:	3501      	adds	r5, #1
 8017136:	e75f      	b.n	8016ff8 <_dtoa_r+0x380>
 8017138:	003e      	movs	r6, r7
 801713a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801713c:	e784      	b.n	8017048 <_dtoa_r+0x3d0>
 801713e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017140:	1e5a      	subs	r2, r3, #1
 8017142:	4b76      	ldr	r3, [pc, #472]	; (801731c <_dtoa_r+0x6a4>)
 8017144:	00d2      	lsls	r2, r2, #3
 8017146:	189b      	adds	r3, r3, r2
 8017148:	6818      	ldr	r0, [r3, #0]
 801714a:	6859      	ldr	r1, [r3, #4]
 801714c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801714e:	2b00      	cmp	r3, #0
 8017150:	d04b      	beq.n	80171ea <_dtoa_r+0x572>
 8017152:	0002      	movs	r2, r0
 8017154:	000b      	movs	r3, r1
 8017156:	2000      	movs	r0, #0
 8017158:	4978      	ldr	r1, [pc, #480]	; (801733c <_dtoa_r+0x6c4>)
 801715a:	f7ea fb7b 	bl	8001854 <__aeabi_ddiv>
 801715e:	002b      	movs	r3, r5
 8017160:	0022      	movs	r2, r4
 8017162:	f7eb f9f3 	bl	800254c <__aeabi_dsub>
 8017166:	9b08      	ldr	r3, [sp, #32]
 8017168:	900e      	str	r0, [sp, #56]	; 0x38
 801716a:	910f      	str	r1, [sp, #60]	; 0x3c
 801716c:	9315      	str	r3, [sp, #84]	; 0x54
 801716e:	9806      	ldr	r0, [sp, #24]
 8017170:	9907      	ldr	r1, [sp, #28]
 8017172:	f7eb fd4f 	bl	8002c14 <__aeabi_d2iz>
 8017176:	0004      	movs	r4, r0
 8017178:	f7eb fd82 	bl	8002c80 <__aeabi_i2d>
 801717c:	0002      	movs	r2, r0
 801717e:	000b      	movs	r3, r1
 8017180:	9806      	ldr	r0, [sp, #24]
 8017182:	9907      	ldr	r1, [sp, #28]
 8017184:	f7eb f9e2 	bl	800254c <__aeabi_dsub>
 8017188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801718a:	3430      	adds	r4, #48	; 0x30
 801718c:	1c5d      	adds	r5, r3, #1
 801718e:	701c      	strb	r4, [r3, #0]
 8017190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017194:	9006      	str	r0, [sp, #24]
 8017196:	9107      	str	r1, [sp, #28]
 8017198:	f7e9 f966 	bl	8000468 <__aeabi_dcmplt>
 801719c:	2800      	cmp	r0, #0
 801719e:	d16c      	bne.n	801727a <_dtoa_r+0x602>
 80171a0:	9a06      	ldr	r2, [sp, #24]
 80171a2:	9b07      	ldr	r3, [sp, #28]
 80171a4:	2000      	movs	r0, #0
 80171a6:	495e      	ldr	r1, [pc, #376]	; (8017320 <_dtoa_r+0x6a8>)
 80171a8:	f7eb f9d0 	bl	800254c <__aeabi_dsub>
 80171ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80171ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171b0:	f7e9 f95a 	bl	8000468 <__aeabi_dcmplt>
 80171b4:	2800      	cmp	r0, #0
 80171b6:	d000      	beq.n	80171ba <_dtoa_r+0x542>
 80171b8:	e0c3      	b.n	8017342 <_dtoa_r+0x6ca>
 80171ba:	9b08      	ldr	r3, [sp, #32]
 80171bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80171be:	1aeb      	subs	r3, r5, r3
 80171c0:	429a      	cmp	r2, r3
 80171c2:	dc00      	bgt.n	80171c6 <_dtoa_r+0x54e>
 80171c4:	e775      	b.n	80170b2 <_dtoa_r+0x43a>
 80171c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80171c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80171ca:	2200      	movs	r2, #0
 80171cc:	4b55      	ldr	r3, [pc, #340]	; (8017324 <_dtoa_r+0x6ac>)
 80171ce:	f7ea ff4b 	bl	8002068 <__aeabi_dmul>
 80171d2:	2200      	movs	r2, #0
 80171d4:	900e      	str	r0, [sp, #56]	; 0x38
 80171d6:	910f      	str	r1, [sp, #60]	; 0x3c
 80171d8:	9806      	ldr	r0, [sp, #24]
 80171da:	9907      	ldr	r1, [sp, #28]
 80171dc:	4b51      	ldr	r3, [pc, #324]	; (8017324 <_dtoa_r+0x6ac>)
 80171de:	f7ea ff43 	bl	8002068 <__aeabi_dmul>
 80171e2:	9515      	str	r5, [sp, #84]	; 0x54
 80171e4:	9006      	str	r0, [sp, #24]
 80171e6:	9107      	str	r1, [sp, #28]
 80171e8:	e7c1      	b.n	801716e <_dtoa_r+0x4f6>
 80171ea:	0022      	movs	r2, r4
 80171ec:	002b      	movs	r3, r5
 80171ee:	f7ea ff3b 	bl	8002068 <__aeabi_dmul>
 80171f2:	9c08      	ldr	r4, [sp, #32]
 80171f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80171f6:	0023      	movs	r3, r4
 80171f8:	4694      	mov	ip, r2
 80171fa:	900e      	str	r0, [sp, #56]	; 0x38
 80171fc:	910f      	str	r1, [sp, #60]	; 0x3c
 80171fe:	4463      	add	r3, ip
 8017200:	9315      	str	r3, [sp, #84]	; 0x54
 8017202:	9806      	ldr	r0, [sp, #24]
 8017204:	9907      	ldr	r1, [sp, #28]
 8017206:	f7eb fd05 	bl	8002c14 <__aeabi_d2iz>
 801720a:	0005      	movs	r5, r0
 801720c:	f7eb fd38 	bl	8002c80 <__aeabi_i2d>
 8017210:	000b      	movs	r3, r1
 8017212:	0002      	movs	r2, r0
 8017214:	9806      	ldr	r0, [sp, #24]
 8017216:	9907      	ldr	r1, [sp, #28]
 8017218:	f7eb f998 	bl	800254c <__aeabi_dsub>
 801721c:	3530      	adds	r5, #48	; 0x30
 801721e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017220:	7025      	strb	r5, [r4, #0]
 8017222:	3401      	adds	r4, #1
 8017224:	9006      	str	r0, [sp, #24]
 8017226:	9107      	str	r1, [sp, #28]
 8017228:	42a3      	cmp	r3, r4
 801722a:	d12a      	bne.n	8017282 <_dtoa_r+0x60a>
 801722c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801722e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017230:	9a08      	ldr	r2, [sp, #32]
 8017232:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017234:	4694      	mov	ip, r2
 8017236:	4463      	add	r3, ip
 8017238:	2200      	movs	r2, #0
 801723a:	001d      	movs	r5, r3
 801723c:	4b3f      	ldr	r3, [pc, #252]	; (801733c <_dtoa_r+0x6c4>)
 801723e:	f7e9 ffed 	bl	800121c <__aeabi_dadd>
 8017242:	0002      	movs	r2, r0
 8017244:	000b      	movs	r3, r1
 8017246:	9806      	ldr	r0, [sp, #24]
 8017248:	9907      	ldr	r1, [sp, #28]
 801724a:	f7e9 f921 	bl	8000490 <__aeabi_dcmpgt>
 801724e:	2800      	cmp	r0, #0
 8017250:	d000      	beq.n	8017254 <_dtoa_r+0x5dc>
 8017252:	e076      	b.n	8017342 <_dtoa_r+0x6ca>
 8017254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017258:	2000      	movs	r0, #0
 801725a:	4938      	ldr	r1, [pc, #224]	; (801733c <_dtoa_r+0x6c4>)
 801725c:	f7eb f976 	bl	800254c <__aeabi_dsub>
 8017260:	0002      	movs	r2, r0
 8017262:	000b      	movs	r3, r1
 8017264:	9806      	ldr	r0, [sp, #24]
 8017266:	9907      	ldr	r1, [sp, #28]
 8017268:	f7e9 f8fe 	bl	8000468 <__aeabi_dcmplt>
 801726c:	2800      	cmp	r0, #0
 801726e:	d100      	bne.n	8017272 <_dtoa_r+0x5fa>
 8017270:	e71f      	b.n	80170b2 <_dtoa_r+0x43a>
 8017272:	1e6b      	subs	r3, r5, #1
 8017274:	781a      	ldrb	r2, [r3, #0]
 8017276:	2a30      	cmp	r2, #48	; 0x30
 8017278:	d001      	beq.n	801727e <_dtoa_r+0x606>
 801727a:	0037      	movs	r7, r6
 801727c:	e03f      	b.n	80172fe <_dtoa_r+0x686>
 801727e:	001d      	movs	r5, r3
 8017280:	e7f7      	b.n	8017272 <_dtoa_r+0x5fa>
 8017282:	9806      	ldr	r0, [sp, #24]
 8017284:	9907      	ldr	r1, [sp, #28]
 8017286:	2200      	movs	r2, #0
 8017288:	4b26      	ldr	r3, [pc, #152]	; (8017324 <_dtoa_r+0x6ac>)
 801728a:	f7ea feed 	bl	8002068 <__aeabi_dmul>
 801728e:	9006      	str	r0, [sp, #24]
 8017290:	9107      	str	r1, [sp, #28]
 8017292:	e7b6      	b.n	8017202 <_dtoa_r+0x58a>
 8017294:	9e08      	ldr	r6, [sp, #32]
 8017296:	9a04      	ldr	r2, [sp, #16]
 8017298:	9b05      	ldr	r3, [sp, #20]
 801729a:	9806      	ldr	r0, [sp, #24]
 801729c:	9907      	ldr	r1, [sp, #28]
 801729e:	f7ea fad9 	bl	8001854 <__aeabi_ddiv>
 80172a2:	f7eb fcb7 	bl	8002c14 <__aeabi_d2iz>
 80172a6:	0004      	movs	r4, r0
 80172a8:	f7eb fcea 	bl	8002c80 <__aeabi_i2d>
 80172ac:	9a04      	ldr	r2, [sp, #16]
 80172ae:	9b05      	ldr	r3, [sp, #20]
 80172b0:	f7ea feda 	bl	8002068 <__aeabi_dmul>
 80172b4:	0002      	movs	r2, r0
 80172b6:	000b      	movs	r3, r1
 80172b8:	9806      	ldr	r0, [sp, #24]
 80172ba:	9907      	ldr	r1, [sp, #28]
 80172bc:	f7eb f946 	bl	800254c <__aeabi_dsub>
 80172c0:	0023      	movs	r3, r4
 80172c2:	3330      	adds	r3, #48	; 0x30
 80172c4:	7033      	strb	r3, [r6, #0]
 80172c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172c8:	9b08      	ldr	r3, [sp, #32]
 80172ca:	1c75      	adds	r5, r6, #1
 80172cc:	1aeb      	subs	r3, r5, r3
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d148      	bne.n	8017364 <_dtoa_r+0x6ec>
 80172d2:	0002      	movs	r2, r0
 80172d4:	000b      	movs	r3, r1
 80172d6:	f7e9 ffa1 	bl	800121c <__aeabi_dadd>
 80172da:	9a04      	ldr	r2, [sp, #16]
 80172dc:	9b05      	ldr	r3, [sp, #20]
 80172de:	9006      	str	r0, [sp, #24]
 80172e0:	9107      	str	r1, [sp, #28]
 80172e2:	f7e9 f8d5 	bl	8000490 <__aeabi_dcmpgt>
 80172e6:	2800      	cmp	r0, #0
 80172e8:	d12a      	bne.n	8017340 <_dtoa_r+0x6c8>
 80172ea:	9a04      	ldr	r2, [sp, #16]
 80172ec:	9b05      	ldr	r3, [sp, #20]
 80172ee:	9806      	ldr	r0, [sp, #24]
 80172f0:	9907      	ldr	r1, [sp, #28]
 80172f2:	f7e9 f8b3 	bl	800045c <__aeabi_dcmpeq>
 80172f6:	2800      	cmp	r0, #0
 80172f8:	d001      	beq.n	80172fe <_dtoa_r+0x686>
 80172fa:	07e3      	lsls	r3, r4, #31
 80172fc:	d420      	bmi.n	8017340 <_dtoa_r+0x6c8>
 80172fe:	9903      	ldr	r1, [sp, #12]
 8017300:	9802      	ldr	r0, [sp, #8]
 8017302:	f000 ff35 	bl	8018170 <_Bfree>
 8017306:	2300      	movs	r3, #0
 8017308:	702b      	strb	r3, [r5, #0]
 801730a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801730c:	3701      	adds	r7, #1
 801730e:	601f      	str	r7, [r3, #0]
 8017310:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017312:	2b00      	cmp	r3, #0
 8017314:	d100      	bne.n	8017318 <_dtoa_r+0x6a0>
 8017316:	e4e4      	b.n	8016ce2 <_dtoa_r+0x6a>
 8017318:	601d      	str	r5, [r3, #0]
 801731a:	e4e2      	b.n	8016ce2 <_dtoa_r+0x6a>
 801731c:	0801bc90 	.word	0x0801bc90
 8017320:	3ff00000 	.word	0x3ff00000
 8017324:	40240000 	.word	0x40240000
 8017328:	401c0000 	.word	0x401c0000
 801732c:	fcc00000 	.word	0xfcc00000
 8017330:	40140000 	.word	0x40140000
 8017334:	7cc00000 	.word	0x7cc00000
 8017338:	0801bc68 	.word	0x0801bc68
 801733c:	3fe00000 	.word	0x3fe00000
 8017340:	003e      	movs	r6, r7
 8017342:	1e6b      	subs	r3, r5, #1
 8017344:	781a      	ldrb	r2, [r3, #0]
 8017346:	2a39      	cmp	r2, #57	; 0x39
 8017348:	d106      	bne.n	8017358 <_dtoa_r+0x6e0>
 801734a:	9a08      	ldr	r2, [sp, #32]
 801734c:	429a      	cmp	r2, r3
 801734e:	d107      	bne.n	8017360 <_dtoa_r+0x6e8>
 8017350:	2330      	movs	r3, #48	; 0x30
 8017352:	7013      	strb	r3, [r2, #0]
 8017354:	0013      	movs	r3, r2
 8017356:	3601      	adds	r6, #1
 8017358:	781a      	ldrb	r2, [r3, #0]
 801735a:	3201      	adds	r2, #1
 801735c:	701a      	strb	r2, [r3, #0]
 801735e:	e78c      	b.n	801727a <_dtoa_r+0x602>
 8017360:	001d      	movs	r5, r3
 8017362:	e7ee      	b.n	8017342 <_dtoa_r+0x6ca>
 8017364:	2200      	movs	r2, #0
 8017366:	4ba4      	ldr	r3, [pc, #656]	; (80175f8 <_dtoa_r+0x980>)
 8017368:	f7ea fe7e 	bl	8002068 <__aeabi_dmul>
 801736c:	2200      	movs	r2, #0
 801736e:	2300      	movs	r3, #0
 8017370:	9006      	str	r0, [sp, #24]
 8017372:	9107      	str	r1, [sp, #28]
 8017374:	002e      	movs	r6, r5
 8017376:	f7e9 f871 	bl	800045c <__aeabi_dcmpeq>
 801737a:	2800      	cmp	r0, #0
 801737c:	d08b      	beq.n	8017296 <_dtoa_r+0x61e>
 801737e:	e7be      	b.n	80172fe <_dtoa_r+0x686>
 8017380:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017382:	2a00      	cmp	r2, #0
 8017384:	d100      	bne.n	8017388 <_dtoa_r+0x710>
 8017386:	e0da      	b.n	801753e <_dtoa_r+0x8c6>
 8017388:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801738a:	2a01      	cmp	r2, #1
 801738c:	dd00      	ble.n	8017390 <_dtoa_r+0x718>
 801738e:	e0bd      	b.n	801750c <_dtoa_r+0x894>
 8017390:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017392:	2a00      	cmp	r2, #0
 8017394:	d100      	bne.n	8017398 <_dtoa_r+0x720>
 8017396:	e0b5      	b.n	8017504 <_dtoa_r+0x88c>
 8017398:	4a98      	ldr	r2, [pc, #608]	; (80175fc <_dtoa_r+0x984>)
 801739a:	189b      	adds	r3, r3, r2
 801739c:	9d04      	ldr	r5, [sp, #16]
 801739e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80173a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173a2:	2101      	movs	r1, #1
 80173a4:	18d2      	adds	r2, r2, r3
 80173a6:	920a      	str	r2, [sp, #40]	; 0x28
 80173a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80173aa:	9802      	ldr	r0, [sp, #8]
 80173ac:	18d3      	adds	r3, r2, r3
 80173ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80173b0:	f000 ffad 	bl	801830e <__i2b>
 80173b4:	0006      	movs	r6, r0
 80173b6:	2c00      	cmp	r4, #0
 80173b8:	dd0e      	ble.n	80173d8 <_dtoa_r+0x760>
 80173ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173bc:	2b00      	cmp	r3, #0
 80173be:	dd0b      	ble.n	80173d8 <_dtoa_r+0x760>
 80173c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80173c2:	0023      	movs	r3, r4
 80173c4:	4294      	cmp	r4, r2
 80173c6:	dd00      	ble.n	80173ca <_dtoa_r+0x752>
 80173c8:	0013      	movs	r3, r2
 80173ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173cc:	1ae4      	subs	r4, r4, r3
 80173ce:	1ad2      	subs	r2, r2, r3
 80173d0:	920a      	str	r2, [sp, #40]	; 0x28
 80173d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80173d4:	1ad3      	subs	r3, r2, r3
 80173d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80173d8:	9b04      	ldr	r3, [sp, #16]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d01f      	beq.n	801741e <_dtoa_r+0x7a6>
 80173de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d100      	bne.n	80173e6 <_dtoa_r+0x76e>
 80173e4:	e0af      	b.n	8017546 <_dtoa_r+0x8ce>
 80173e6:	2d00      	cmp	r5, #0
 80173e8:	d011      	beq.n	801740e <_dtoa_r+0x796>
 80173ea:	0031      	movs	r1, r6
 80173ec:	002a      	movs	r2, r5
 80173ee:	9802      	ldr	r0, [sp, #8]
 80173f0:	f001 f826 	bl	8018440 <__pow5mult>
 80173f4:	9a03      	ldr	r2, [sp, #12]
 80173f6:	0001      	movs	r1, r0
 80173f8:	0006      	movs	r6, r0
 80173fa:	9802      	ldr	r0, [sp, #8]
 80173fc:	f000 ff90 	bl	8018320 <__multiply>
 8017400:	9903      	ldr	r1, [sp, #12]
 8017402:	9010      	str	r0, [sp, #64]	; 0x40
 8017404:	9802      	ldr	r0, [sp, #8]
 8017406:	f000 feb3 	bl	8018170 <_Bfree>
 801740a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801740c:	9303      	str	r3, [sp, #12]
 801740e:	9b04      	ldr	r3, [sp, #16]
 8017410:	1b5a      	subs	r2, r3, r5
 8017412:	d004      	beq.n	801741e <_dtoa_r+0x7a6>
 8017414:	9903      	ldr	r1, [sp, #12]
 8017416:	9802      	ldr	r0, [sp, #8]
 8017418:	f001 f812 	bl	8018440 <__pow5mult>
 801741c:	9003      	str	r0, [sp, #12]
 801741e:	2101      	movs	r1, #1
 8017420:	9802      	ldr	r0, [sp, #8]
 8017422:	f000 ff74 	bl	801830e <__i2b>
 8017426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017428:	9004      	str	r0, [sp, #16]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d100      	bne.n	8017430 <_dtoa_r+0x7b8>
 801742e:	e1e3      	b.n	80177f8 <_dtoa_r+0xb80>
 8017430:	001a      	movs	r2, r3
 8017432:	0001      	movs	r1, r0
 8017434:	9802      	ldr	r0, [sp, #8]
 8017436:	f001 f803 	bl	8018440 <__pow5mult>
 801743a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801743c:	9004      	str	r0, [sp, #16]
 801743e:	2b01      	cmp	r3, #1
 8017440:	dd00      	ble.n	8017444 <_dtoa_r+0x7cc>
 8017442:	e082      	b.n	801754a <_dtoa_r+0x8d2>
 8017444:	2500      	movs	r5, #0
 8017446:	9b06      	ldr	r3, [sp, #24]
 8017448:	42ab      	cmp	r3, r5
 801744a:	d10e      	bne.n	801746a <_dtoa_r+0x7f2>
 801744c:	9b07      	ldr	r3, [sp, #28]
 801744e:	031b      	lsls	r3, r3, #12
 8017450:	42ab      	cmp	r3, r5
 8017452:	d10a      	bne.n	801746a <_dtoa_r+0x7f2>
 8017454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017456:	9a07      	ldr	r2, [sp, #28]
 8017458:	4213      	tst	r3, r2
 801745a:	d006      	beq.n	801746a <_dtoa_r+0x7f2>
 801745c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801745e:	3501      	adds	r5, #1
 8017460:	3301      	adds	r3, #1
 8017462:	930a      	str	r3, [sp, #40]	; 0x28
 8017464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017466:	3301      	adds	r3, #1
 8017468:	930b      	str	r3, [sp, #44]	; 0x2c
 801746a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801746c:	2001      	movs	r0, #1
 801746e:	2b00      	cmp	r3, #0
 8017470:	d16c      	bne.n	801754c <_dtoa_r+0x8d4>
 8017472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017474:	1818      	adds	r0, r3, r0
 8017476:	231f      	movs	r3, #31
 8017478:	4018      	ands	r0, r3
 801747a:	d07e      	beq.n	801757a <_dtoa_r+0x902>
 801747c:	3301      	adds	r3, #1
 801747e:	1a1b      	subs	r3, r3, r0
 8017480:	2b04      	cmp	r3, #4
 8017482:	dd70      	ble.n	8017566 <_dtoa_r+0x8ee>
 8017484:	231c      	movs	r3, #28
 8017486:	1a18      	subs	r0, r3, r0
 8017488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801748a:	1824      	adds	r4, r4, r0
 801748c:	181b      	adds	r3, r3, r0
 801748e:	930a      	str	r3, [sp, #40]	; 0x28
 8017490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017492:	181b      	adds	r3, r3, r0
 8017494:	930b      	str	r3, [sp, #44]	; 0x2c
 8017496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017498:	2b00      	cmp	r3, #0
 801749a:	dd05      	ble.n	80174a8 <_dtoa_r+0x830>
 801749c:	001a      	movs	r2, r3
 801749e:	9903      	ldr	r1, [sp, #12]
 80174a0:	9802      	ldr	r0, [sp, #8]
 80174a2:	f001 f80f 	bl	80184c4 <__lshift>
 80174a6:	9003      	str	r0, [sp, #12]
 80174a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	dd05      	ble.n	80174ba <_dtoa_r+0x842>
 80174ae:	001a      	movs	r2, r3
 80174b0:	9904      	ldr	r1, [sp, #16]
 80174b2:	9802      	ldr	r0, [sp, #8]
 80174b4:	f001 f806 	bl	80184c4 <__lshift>
 80174b8:	9004      	str	r0, [sp, #16]
 80174ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d05e      	beq.n	801757e <_dtoa_r+0x906>
 80174c0:	9904      	ldr	r1, [sp, #16]
 80174c2:	9803      	ldr	r0, [sp, #12]
 80174c4:	f001 f850 	bl	8018568 <__mcmp>
 80174c8:	2800      	cmp	r0, #0
 80174ca:	da58      	bge.n	801757e <_dtoa_r+0x906>
 80174cc:	2300      	movs	r3, #0
 80174ce:	220a      	movs	r2, #10
 80174d0:	9903      	ldr	r1, [sp, #12]
 80174d2:	9802      	ldr	r0, [sp, #8]
 80174d4:	f000 fe56 	bl	8018184 <__multadd>
 80174d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174da:	3f01      	subs	r7, #1
 80174dc:	9003      	str	r0, [sp, #12]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d100      	bne.n	80174e4 <_dtoa_r+0x86c>
 80174e2:	e190      	b.n	8017806 <_dtoa_r+0xb8e>
 80174e4:	2300      	movs	r3, #0
 80174e6:	0031      	movs	r1, r6
 80174e8:	220a      	movs	r2, #10
 80174ea:	9802      	ldr	r0, [sp, #8]
 80174ec:	f000 fe4a 	bl	8018184 <__multadd>
 80174f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174f2:	0006      	movs	r6, r0
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	dd00      	ble.n	80174fa <_dtoa_r+0x882>
 80174f8:	e088      	b.n	801760c <_dtoa_r+0x994>
 80174fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174fc:	2b02      	cmp	r3, #2
 80174fe:	dc00      	bgt.n	8017502 <_dtoa_r+0x88a>
 8017500:	e084      	b.n	801760c <_dtoa_r+0x994>
 8017502:	e044      	b.n	801758e <_dtoa_r+0x916>
 8017504:	2336      	movs	r3, #54	; 0x36
 8017506:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017508:	1a9b      	subs	r3, r3, r2
 801750a:	e747      	b.n	801739c <_dtoa_r+0x724>
 801750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801750e:	1e5d      	subs	r5, r3, #1
 8017510:	9b04      	ldr	r3, [sp, #16]
 8017512:	42ab      	cmp	r3, r5
 8017514:	db08      	blt.n	8017528 <_dtoa_r+0x8b0>
 8017516:	1b5d      	subs	r5, r3, r5
 8017518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801751a:	2b00      	cmp	r3, #0
 801751c:	da0c      	bge.n	8017538 <_dtoa_r+0x8c0>
 801751e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017522:	1a9c      	subs	r4, r3, r2
 8017524:	2300      	movs	r3, #0
 8017526:	e73b      	b.n	80173a0 <_dtoa_r+0x728>
 8017528:	9b04      	ldr	r3, [sp, #16]
 801752a:	9504      	str	r5, [sp, #16]
 801752c:	1aea      	subs	r2, r5, r3
 801752e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017530:	2500      	movs	r5, #0
 8017532:	189b      	adds	r3, r3, r2
 8017534:	9311      	str	r3, [sp, #68]	; 0x44
 8017536:	e7ef      	b.n	8017518 <_dtoa_r+0x8a0>
 8017538:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801753a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801753c:	e730      	b.n	80173a0 <_dtoa_r+0x728>
 801753e:	9d04      	ldr	r5, [sp, #16]
 8017540:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017542:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017544:	e737      	b.n	80173b6 <_dtoa_r+0x73e>
 8017546:	9a04      	ldr	r2, [sp, #16]
 8017548:	e764      	b.n	8017414 <_dtoa_r+0x79c>
 801754a:	2500      	movs	r5, #0
 801754c:	9b04      	ldr	r3, [sp, #16]
 801754e:	9a04      	ldr	r2, [sp, #16]
 8017550:	691b      	ldr	r3, [r3, #16]
 8017552:	9310      	str	r3, [sp, #64]	; 0x40
 8017554:	3303      	adds	r3, #3
 8017556:	009b      	lsls	r3, r3, #2
 8017558:	18d3      	adds	r3, r2, r3
 801755a:	6858      	ldr	r0, [r3, #4]
 801755c:	f000 fe8e 	bl	801827c <__hi0bits>
 8017560:	2320      	movs	r3, #32
 8017562:	1a18      	subs	r0, r3, r0
 8017564:	e785      	b.n	8017472 <_dtoa_r+0x7fa>
 8017566:	2b04      	cmp	r3, #4
 8017568:	d095      	beq.n	8017496 <_dtoa_r+0x81e>
 801756a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801756c:	331c      	adds	r3, #28
 801756e:	18d2      	adds	r2, r2, r3
 8017570:	920a      	str	r2, [sp, #40]	; 0x28
 8017572:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017574:	18e4      	adds	r4, r4, r3
 8017576:	18d3      	adds	r3, r2, r3
 8017578:	e78c      	b.n	8017494 <_dtoa_r+0x81c>
 801757a:	0003      	movs	r3, r0
 801757c:	e7f5      	b.n	801756a <_dtoa_r+0x8f2>
 801757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017580:	2b00      	cmp	r3, #0
 8017582:	dc3d      	bgt.n	8017600 <_dtoa_r+0x988>
 8017584:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017586:	2b02      	cmp	r3, #2
 8017588:	dd3a      	ble.n	8017600 <_dtoa_r+0x988>
 801758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801758c:	930c      	str	r3, [sp, #48]	; 0x30
 801758e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017590:	2b00      	cmp	r3, #0
 8017592:	d10c      	bne.n	80175ae <_dtoa_r+0x936>
 8017594:	9904      	ldr	r1, [sp, #16]
 8017596:	2205      	movs	r2, #5
 8017598:	9802      	ldr	r0, [sp, #8]
 801759a:	f000 fdf3 	bl	8018184 <__multadd>
 801759e:	9004      	str	r0, [sp, #16]
 80175a0:	0001      	movs	r1, r0
 80175a2:	9803      	ldr	r0, [sp, #12]
 80175a4:	f000 ffe0 	bl	8018568 <__mcmp>
 80175a8:	2800      	cmp	r0, #0
 80175aa:	dd00      	ble.n	80175ae <_dtoa_r+0x936>
 80175ac:	e5ad      	b.n	801710a <_dtoa_r+0x492>
 80175ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175b0:	9d08      	ldr	r5, [sp, #32]
 80175b2:	43df      	mvns	r7, r3
 80175b4:	2300      	movs	r3, #0
 80175b6:	9309      	str	r3, [sp, #36]	; 0x24
 80175b8:	9904      	ldr	r1, [sp, #16]
 80175ba:	9802      	ldr	r0, [sp, #8]
 80175bc:	f000 fdd8 	bl	8018170 <_Bfree>
 80175c0:	2e00      	cmp	r6, #0
 80175c2:	d100      	bne.n	80175c6 <_dtoa_r+0x94e>
 80175c4:	e69b      	b.n	80172fe <_dtoa_r+0x686>
 80175c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d005      	beq.n	80175d8 <_dtoa_r+0x960>
 80175cc:	42b3      	cmp	r3, r6
 80175ce:	d003      	beq.n	80175d8 <_dtoa_r+0x960>
 80175d0:	0019      	movs	r1, r3
 80175d2:	9802      	ldr	r0, [sp, #8]
 80175d4:	f000 fdcc 	bl	8018170 <_Bfree>
 80175d8:	0031      	movs	r1, r6
 80175da:	9802      	ldr	r0, [sp, #8]
 80175dc:	f000 fdc8 	bl	8018170 <_Bfree>
 80175e0:	e68d      	b.n	80172fe <_dtoa_r+0x686>
 80175e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80175e4:	9304      	str	r3, [sp, #16]
 80175e6:	001e      	movs	r6, r3
 80175e8:	e7e1      	b.n	80175ae <_dtoa_r+0x936>
 80175ea:	2300      	movs	r3, #0
 80175ec:	e7fa      	b.n	80175e4 <_dtoa_r+0x96c>
 80175ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80175f0:	0037      	movs	r7, r6
 80175f2:	9304      	str	r3, [sp, #16]
 80175f4:	001e      	movs	r6, r3
 80175f6:	e588      	b.n	801710a <_dtoa_r+0x492>
 80175f8:	40240000 	.word	0x40240000
 80175fc:	00000433 	.word	0x00000433
 8017600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017602:	2b00      	cmp	r3, #0
 8017604:	d100      	bne.n	8017608 <_dtoa_r+0x990>
 8017606:	e0b2      	b.n	801776e <_dtoa_r+0xaf6>
 8017608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801760a:	930c      	str	r3, [sp, #48]	; 0x30
 801760c:	2c00      	cmp	r4, #0
 801760e:	dd05      	ble.n	801761c <_dtoa_r+0x9a4>
 8017610:	0031      	movs	r1, r6
 8017612:	0022      	movs	r2, r4
 8017614:	9802      	ldr	r0, [sp, #8]
 8017616:	f000 ff55 	bl	80184c4 <__lshift>
 801761a:	0006      	movs	r6, r0
 801761c:	0030      	movs	r0, r6
 801761e:	2d00      	cmp	r5, #0
 8017620:	d011      	beq.n	8017646 <_dtoa_r+0x9ce>
 8017622:	6871      	ldr	r1, [r6, #4]
 8017624:	9802      	ldr	r0, [sp, #8]
 8017626:	f000 fd7b 	bl	8018120 <_Balloc>
 801762a:	0031      	movs	r1, r6
 801762c:	0004      	movs	r4, r0
 801762e:	6933      	ldr	r3, [r6, #16]
 8017630:	310c      	adds	r1, #12
 8017632:	1c9a      	adds	r2, r3, #2
 8017634:	0092      	lsls	r2, r2, #2
 8017636:	300c      	adds	r0, #12
 8017638:	f7fc fe59 	bl	80142ee <memcpy>
 801763c:	2201      	movs	r2, #1
 801763e:	0021      	movs	r1, r4
 8017640:	9802      	ldr	r0, [sp, #8]
 8017642:	f000 ff3f 	bl	80184c4 <__lshift>
 8017646:	9609      	str	r6, [sp, #36]	; 0x24
 8017648:	0006      	movs	r6, r0
 801764a:	9b08      	ldr	r3, [sp, #32]
 801764c:	930a      	str	r3, [sp, #40]	; 0x28
 801764e:	9904      	ldr	r1, [sp, #16]
 8017650:	9803      	ldr	r0, [sp, #12]
 8017652:	f7ff fa8b 	bl	8016b6c <quorem>
 8017656:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017658:	900d      	str	r0, [sp, #52]	; 0x34
 801765a:	0004      	movs	r4, r0
 801765c:	9803      	ldr	r0, [sp, #12]
 801765e:	f000 ff83 	bl	8018568 <__mcmp>
 8017662:	0032      	movs	r2, r6
 8017664:	9010      	str	r0, [sp, #64]	; 0x40
 8017666:	9904      	ldr	r1, [sp, #16]
 8017668:	9802      	ldr	r0, [sp, #8]
 801766a:	f000 ff97 	bl	801859c <__mdiff>
 801766e:	2301      	movs	r3, #1
 8017670:	930b      	str	r3, [sp, #44]	; 0x2c
 8017672:	68c3      	ldr	r3, [r0, #12]
 8017674:	3430      	adds	r4, #48	; 0x30
 8017676:	0005      	movs	r5, r0
 8017678:	2b00      	cmp	r3, #0
 801767a:	d104      	bne.n	8017686 <_dtoa_r+0xa0e>
 801767c:	0001      	movs	r1, r0
 801767e:	9803      	ldr	r0, [sp, #12]
 8017680:	f000 ff72 	bl	8018568 <__mcmp>
 8017684:	900b      	str	r0, [sp, #44]	; 0x2c
 8017686:	0029      	movs	r1, r5
 8017688:	9802      	ldr	r0, [sp, #8]
 801768a:	f000 fd71 	bl	8018170 <_Bfree>
 801768e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017690:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017692:	4313      	orrs	r3, r2
 8017694:	d10e      	bne.n	80176b4 <_dtoa_r+0xa3c>
 8017696:	9a06      	ldr	r2, [sp, #24]
 8017698:	3301      	adds	r3, #1
 801769a:	4213      	tst	r3, r2
 801769c:	d10a      	bne.n	80176b4 <_dtoa_r+0xa3c>
 801769e:	2c39      	cmp	r4, #57	; 0x39
 80176a0:	d026      	beq.n	80176f0 <_dtoa_r+0xa78>
 80176a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	dd01      	ble.n	80176ac <_dtoa_r+0xa34>
 80176a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80176aa:	3431      	adds	r4, #49	; 0x31
 80176ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176ae:	1c5d      	adds	r5, r3, #1
 80176b0:	701c      	strb	r4, [r3, #0]
 80176b2:	e781      	b.n	80175b8 <_dtoa_r+0x940>
 80176b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	db07      	blt.n	80176ca <_dtoa_r+0xa52>
 80176ba:	001d      	movs	r5, r3
 80176bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80176be:	431d      	orrs	r5, r3
 80176c0:	d122      	bne.n	8017708 <_dtoa_r+0xa90>
 80176c2:	2301      	movs	r3, #1
 80176c4:	9a06      	ldr	r2, [sp, #24]
 80176c6:	4213      	tst	r3, r2
 80176c8:	d11e      	bne.n	8017708 <_dtoa_r+0xa90>
 80176ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	dded      	ble.n	80176ac <_dtoa_r+0xa34>
 80176d0:	9903      	ldr	r1, [sp, #12]
 80176d2:	2201      	movs	r2, #1
 80176d4:	9802      	ldr	r0, [sp, #8]
 80176d6:	f000 fef5 	bl	80184c4 <__lshift>
 80176da:	9904      	ldr	r1, [sp, #16]
 80176dc:	9003      	str	r0, [sp, #12]
 80176de:	f000 ff43 	bl	8018568 <__mcmp>
 80176e2:	2800      	cmp	r0, #0
 80176e4:	dc02      	bgt.n	80176ec <_dtoa_r+0xa74>
 80176e6:	d1e1      	bne.n	80176ac <_dtoa_r+0xa34>
 80176e8:	07e3      	lsls	r3, r4, #31
 80176ea:	d5df      	bpl.n	80176ac <_dtoa_r+0xa34>
 80176ec:	2c39      	cmp	r4, #57	; 0x39
 80176ee:	d1db      	bne.n	80176a8 <_dtoa_r+0xa30>
 80176f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80176f4:	1c5d      	adds	r5, r3, #1
 80176f6:	2339      	movs	r3, #57	; 0x39
 80176f8:	7013      	strb	r3, [r2, #0]
 80176fa:	1e6b      	subs	r3, r5, #1
 80176fc:	781a      	ldrb	r2, [r3, #0]
 80176fe:	2a39      	cmp	r2, #57	; 0x39
 8017700:	d067      	beq.n	80177d2 <_dtoa_r+0xb5a>
 8017702:	3201      	adds	r2, #1
 8017704:	701a      	strb	r2, [r3, #0]
 8017706:	e757      	b.n	80175b8 <_dtoa_r+0x940>
 8017708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801770a:	1c5d      	adds	r5, r3, #1
 801770c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801770e:	2b00      	cmp	r3, #0
 8017710:	dd04      	ble.n	801771c <_dtoa_r+0xaa4>
 8017712:	2c39      	cmp	r4, #57	; 0x39
 8017714:	d0ec      	beq.n	80176f0 <_dtoa_r+0xa78>
 8017716:	3401      	adds	r4, #1
 8017718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801771a:	e7c9      	b.n	80176b0 <_dtoa_r+0xa38>
 801771c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801771e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017720:	701c      	strb	r4, [r3, #0]
 8017722:	9b08      	ldr	r3, [sp, #32]
 8017724:	1aeb      	subs	r3, r5, r3
 8017726:	4293      	cmp	r3, r2
 8017728:	d03e      	beq.n	80177a8 <_dtoa_r+0xb30>
 801772a:	2300      	movs	r3, #0
 801772c:	220a      	movs	r2, #10
 801772e:	9903      	ldr	r1, [sp, #12]
 8017730:	9802      	ldr	r0, [sp, #8]
 8017732:	f000 fd27 	bl	8018184 <__multadd>
 8017736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017738:	9003      	str	r0, [sp, #12]
 801773a:	42b3      	cmp	r3, r6
 801773c:	d109      	bne.n	8017752 <_dtoa_r+0xada>
 801773e:	2300      	movs	r3, #0
 8017740:	220a      	movs	r2, #10
 8017742:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017744:	9802      	ldr	r0, [sp, #8]
 8017746:	f000 fd1d 	bl	8018184 <__multadd>
 801774a:	9009      	str	r0, [sp, #36]	; 0x24
 801774c:	0006      	movs	r6, r0
 801774e:	950a      	str	r5, [sp, #40]	; 0x28
 8017750:	e77d      	b.n	801764e <_dtoa_r+0x9d6>
 8017752:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017754:	2300      	movs	r3, #0
 8017756:	220a      	movs	r2, #10
 8017758:	9802      	ldr	r0, [sp, #8]
 801775a:	f000 fd13 	bl	8018184 <__multadd>
 801775e:	2300      	movs	r3, #0
 8017760:	9009      	str	r0, [sp, #36]	; 0x24
 8017762:	220a      	movs	r2, #10
 8017764:	0031      	movs	r1, r6
 8017766:	9802      	ldr	r0, [sp, #8]
 8017768:	f000 fd0c 	bl	8018184 <__multadd>
 801776c:	e7ee      	b.n	801774c <_dtoa_r+0xad4>
 801776e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017770:	930c      	str	r3, [sp, #48]	; 0x30
 8017772:	9b08      	ldr	r3, [sp, #32]
 8017774:	9306      	str	r3, [sp, #24]
 8017776:	9904      	ldr	r1, [sp, #16]
 8017778:	9803      	ldr	r0, [sp, #12]
 801777a:	f7ff f9f7 	bl	8016b6c <quorem>
 801777e:	9b06      	ldr	r3, [sp, #24]
 8017780:	3030      	adds	r0, #48	; 0x30
 8017782:	1c5d      	adds	r5, r3, #1
 8017784:	7018      	strb	r0, [r3, #0]
 8017786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017788:	9b08      	ldr	r3, [sp, #32]
 801778a:	0004      	movs	r4, r0
 801778c:	1aeb      	subs	r3, r5, r3
 801778e:	429a      	cmp	r2, r3
 8017790:	dd08      	ble.n	80177a4 <_dtoa_r+0xb2c>
 8017792:	2300      	movs	r3, #0
 8017794:	220a      	movs	r2, #10
 8017796:	9903      	ldr	r1, [sp, #12]
 8017798:	9802      	ldr	r0, [sp, #8]
 801779a:	f000 fcf3 	bl	8018184 <__multadd>
 801779e:	9506      	str	r5, [sp, #24]
 80177a0:	9003      	str	r0, [sp, #12]
 80177a2:	e7e8      	b.n	8017776 <_dtoa_r+0xafe>
 80177a4:	2300      	movs	r3, #0
 80177a6:	9309      	str	r3, [sp, #36]	; 0x24
 80177a8:	9903      	ldr	r1, [sp, #12]
 80177aa:	2201      	movs	r2, #1
 80177ac:	9802      	ldr	r0, [sp, #8]
 80177ae:	f000 fe89 	bl	80184c4 <__lshift>
 80177b2:	9904      	ldr	r1, [sp, #16]
 80177b4:	9003      	str	r0, [sp, #12]
 80177b6:	f000 fed7 	bl	8018568 <__mcmp>
 80177ba:	2800      	cmp	r0, #0
 80177bc:	dc9d      	bgt.n	80176fa <_dtoa_r+0xa82>
 80177be:	d101      	bne.n	80177c4 <_dtoa_r+0xb4c>
 80177c0:	07e3      	lsls	r3, r4, #31
 80177c2:	d49a      	bmi.n	80176fa <_dtoa_r+0xa82>
 80177c4:	1e6b      	subs	r3, r5, #1
 80177c6:	781a      	ldrb	r2, [r3, #0]
 80177c8:	2a30      	cmp	r2, #48	; 0x30
 80177ca:	d000      	beq.n	80177ce <_dtoa_r+0xb56>
 80177cc:	e6f4      	b.n	80175b8 <_dtoa_r+0x940>
 80177ce:	001d      	movs	r5, r3
 80177d0:	e7f8      	b.n	80177c4 <_dtoa_r+0xb4c>
 80177d2:	9a08      	ldr	r2, [sp, #32]
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d103      	bne.n	80177e0 <_dtoa_r+0xb68>
 80177d8:	2331      	movs	r3, #49	; 0x31
 80177da:	3701      	adds	r7, #1
 80177dc:	7013      	strb	r3, [r2, #0]
 80177de:	e6eb      	b.n	80175b8 <_dtoa_r+0x940>
 80177e0:	001d      	movs	r5, r3
 80177e2:	e78a      	b.n	80176fa <_dtoa_r+0xa82>
 80177e4:	4b0b      	ldr	r3, [pc, #44]	; (8017814 <_dtoa_r+0xb9c>)
 80177e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80177e8:	9308      	str	r3, [sp, #32]
 80177ea:	4b0b      	ldr	r3, [pc, #44]	; (8017818 <_dtoa_r+0xba0>)
 80177ec:	2a00      	cmp	r2, #0
 80177ee:	d001      	beq.n	80177f4 <_dtoa_r+0xb7c>
 80177f0:	f7ff fa75 	bl	8016cde <_dtoa_r+0x66>
 80177f4:	f7ff fa75 	bl	8016ce2 <_dtoa_r+0x6a>
 80177f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80177fa:	2b01      	cmp	r3, #1
 80177fc:	dc00      	bgt.n	8017800 <_dtoa_r+0xb88>
 80177fe:	e621      	b.n	8017444 <_dtoa_r+0x7cc>
 8017800:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017802:	2001      	movs	r0, #1
 8017804:	e635      	b.n	8017472 <_dtoa_r+0x7fa>
 8017806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017808:	2b00      	cmp	r3, #0
 801780a:	dcb2      	bgt.n	8017772 <_dtoa_r+0xafa>
 801780c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801780e:	2b02      	cmp	r3, #2
 8017810:	ddaf      	ble.n	8017772 <_dtoa_r+0xafa>
 8017812:	e6bc      	b.n	801758e <_dtoa_r+0x916>
 8017814:	0801bc55 	.word	0x0801bc55
 8017818:	0801bc5d 	.word	0x0801bc5d

0801781c <__errno>:
 801781c:	4b01      	ldr	r3, [pc, #4]	; (8017824 <__errno+0x8>)
 801781e:	6818      	ldr	r0, [r3, #0]
 8017820:	4770      	bx	lr
 8017822:	46c0      	nop			; (mov r8, r8)
 8017824:	20000138 	.word	0x20000138

08017828 <__libc_fini_array>:
 8017828:	b570      	push	{r4, r5, r6, lr}
 801782a:	4d07      	ldr	r5, [pc, #28]	; (8017848 <__libc_fini_array+0x20>)
 801782c:	4c07      	ldr	r4, [pc, #28]	; (801784c <__libc_fini_array+0x24>)
 801782e:	1b64      	subs	r4, r4, r5
 8017830:	10a4      	asrs	r4, r4, #2
 8017832:	2c00      	cmp	r4, #0
 8017834:	d102      	bne.n	801783c <__libc_fini_array+0x14>
 8017836:	f001 f987 	bl	8018b48 <_fini>
 801783a:	bd70      	pop	{r4, r5, r6, pc}
 801783c:	3c01      	subs	r4, #1
 801783e:	00a3      	lsls	r3, r4, #2
 8017840:	58eb      	ldr	r3, [r5, r3]
 8017842:	4798      	blx	r3
 8017844:	e7f5      	b.n	8017832 <__libc_fini_array+0xa>
 8017846:	46c0      	nop			; (mov r8, r8)
 8017848:	0801bd74 	.word	0x0801bd74
 801784c:	0801bd78 	.word	0x0801bd78

08017850 <_malloc_trim_r>:
 8017850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017852:	0005      	movs	r5, r0
 8017854:	2008      	movs	r0, #8
 8017856:	000c      	movs	r4, r1
 8017858:	f7ff f95c 	bl	8016b14 <sysconf>
 801785c:	0007      	movs	r7, r0
 801785e:	0028      	movs	r0, r5
 8017860:	f7fc fd56 	bl	8014310 <__malloc_lock>
 8017864:	2203      	movs	r2, #3
 8017866:	4e21      	ldr	r6, [pc, #132]	; (80178ec <_malloc_trim_r+0x9c>)
 8017868:	0039      	movs	r1, r7
 801786a:	68b3      	ldr	r3, [r6, #8]
 801786c:	685b      	ldr	r3, [r3, #4]
 801786e:	4393      	bics	r3, r2
 8017870:	1b18      	subs	r0, r3, r4
 8017872:	3811      	subs	r0, #17
 8017874:	19c0      	adds	r0, r0, r7
 8017876:	9301      	str	r3, [sp, #4]
 8017878:	f7e8 fc6a 	bl	8000150 <__udivsi3>
 801787c:	1e44      	subs	r4, r0, #1
 801787e:	437c      	muls	r4, r7
 8017880:	42a7      	cmp	r7, r4
 8017882:	dd04      	ble.n	801788e <_malloc_trim_r+0x3e>
 8017884:	0028      	movs	r0, r5
 8017886:	f7fc fd4b 	bl	8014320 <__malloc_unlock>
 801788a:	2000      	movs	r0, #0
 801788c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801788e:	2100      	movs	r1, #0
 8017890:	0028      	movs	r0, r5
 8017892:	f7fc ff1d 	bl	80146d0 <_sbrk_r>
 8017896:	68b3      	ldr	r3, [r6, #8]
 8017898:	9a01      	ldr	r2, [sp, #4]
 801789a:	189b      	adds	r3, r3, r2
 801789c:	4298      	cmp	r0, r3
 801789e:	d1f1      	bne.n	8017884 <_malloc_trim_r+0x34>
 80178a0:	4261      	negs	r1, r4
 80178a2:	0028      	movs	r0, r5
 80178a4:	f7fc ff14 	bl	80146d0 <_sbrk_r>
 80178a8:	1c43      	adds	r3, r0, #1
 80178aa:	d110      	bne.n	80178ce <_malloc_trim_r+0x7e>
 80178ac:	2100      	movs	r1, #0
 80178ae:	0028      	movs	r0, r5
 80178b0:	f7fc ff0e 	bl	80146d0 <_sbrk_r>
 80178b4:	68b2      	ldr	r2, [r6, #8]
 80178b6:	1a81      	subs	r1, r0, r2
 80178b8:	290f      	cmp	r1, #15
 80178ba:	dde3      	ble.n	8017884 <_malloc_trim_r+0x34>
 80178bc:	4b0c      	ldr	r3, [pc, #48]	; (80178f0 <_malloc_trim_r+0xa0>)
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	1ac0      	subs	r0, r0, r3
 80178c2:	4b0c      	ldr	r3, [pc, #48]	; (80178f4 <_malloc_trim_r+0xa4>)
 80178c4:	6018      	str	r0, [r3, #0]
 80178c6:	2301      	movs	r3, #1
 80178c8:	430b      	orrs	r3, r1
 80178ca:	6053      	str	r3, [r2, #4]
 80178cc:	e7da      	b.n	8017884 <_malloc_trim_r+0x34>
 80178ce:	68b2      	ldr	r2, [r6, #8]
 80178d0:	2601      	movs	r6, #1
 80178d2:	9b01      	ldr	r3, [sp, #4]
 80178d4:	0028      	movs	r0, r5
 80178d6:	1b1b      	subs	r3, r3, r4
 80178d8:	4333      	orrs	r3, r6
 80178da:	6053      	str	r3, [r2, #4]
 80178dc:	4b05      	ldr	r3, [pc, #20]	; (80178f4 <_malloc_trim_r+0xa4>)
 80178de:	681a      	ldr	r2, [r3, #0]
 80178e0:	1b14      	subs	r4, r2, r4
 80178e2:	601c      	str	r4, [r3, #0]
 80178e4:	f7fc fd1c 	bl	8014320 <__malloc_unlock>
 80178e8:	0030      	movs	r0, r6
 80178ea:	e7cf      	b.n	801788c <_malloc_trim_r+0x3c>
 80178ec:	200006d4 	.word	0x200006d4
 80178f0:	20000adc 	.word	0x20000adc
 80178f4:	20006964 	.word	0x20006964

080178f8 <_free_r>:
 80178f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80178fa:	1e0d      	subs	r5, r1, #0
 80178fc:	9001      	str	r0, [sp, #4]
 80178fe:	d02d      	beq.n	801795c <_free_r+0x64>
 8017900:	f7fc fd06 	bl	8014310 <__malloc_lock>
 8017904:	2301      	movs	r3, #1
 8017906:	0029      	movs	r1, r5
 8017908:	469c      	mov	ip, r3
 801790a:	3908      	subs	r1, #8
 801790c:	684f      	ldr	r7, [r1, #4]
 801790e:	4662      	mov	r2, ip
 8017910:	003b      	movs	r3, r7
 8017912:	4666      	mov	r6, ip
 8017914:	4393      	bics	r3, r2
 8017916:	18c8      	adds	r0, r1, r3
 8017918:	6845      	ldr	r5, [r0, #4]
 801791a:	3202      	adds	r2, #2
 801791c:	4395      	bics	r5, r2
 801791e:	4a4a      	ldr	r2, [pc, #296]	; (8017a48 <_free_r+0x150>)
 8017920:	4037      	ands	r7, r6
 8017922:	6896      	ldr	r6, [r2, #8]
 8017924:	4286      	cmp	r6, r0
 8017926:	d11a      	bne.n	801795e <_free_r+0x66>
 8017928:	195b      	adds	r3, r3, r5
 801792a:	2f00      	cmp	r7, #0
 801792c:	d106      	bne.n	801793c <_free_r+0x44>
 801792e:	6808      	ldr	r0, [r1, #0]
 8017930:	1a09      	subs	r1, r1, r0
 8017932:	688d      	ldr	r5, [r1, #8]
 8017934:	181b      	adds	r3, r3, r0
 8017936:	68c8      	ldr	r0, [r1, #12]
 8017938:	60e8      	str	r0, [r5, #12]
 801793a:	6085      	str	r5, [r0, #8]
 801793c:	2001      	movs	r0, #1
 801793e:	4318      	orrs	r0, r3
 8017940:	6048      	str	r0, [r1, #4]
 8017942:	6091      	str	r1, [r2, #8]
 8017944:	4a41      	ldr	r2, [pc, #260]	; (8017a4c <_free_r+0x154>)
 8017946:	6812      	ldr	r2, [r2, #0]
 8017948:	429a      	cmp	r2, r3
 801794a:	d804      	bhi.n	8017956 <_free_r+0x5e>
 801794c:	4b40      	ldr	r3, [pc, #256]	; (8017a50 <_free_r+0x158>)
 801794e:	9801      	ldr	r0, [sp, #4]
 8017950:	6819      	ldr	r1, [r3, #0]
 8017952:	f7ff ff7d 	bl	8017850 <_malloc_trim_r>
 8017956:	9801      	ldr	r0, [sp, #4]
 8017958:	f7fc fce2 	bl	8014320 <__malloc_unlock>
 801795c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801795e:	2600      	movs	r6, #0
 8017960:	6045      	str	r5, [r0, #4]
 8017962:	42b7      	cmp	r7, r6
 8017964:	d109      	bne.n	801797a <_free_r+0x82>
 8017966:	680f      	ldr	r7, [r1, #0]
 8017968:	4c3a      	ldr	r4, [pc, #232]	; (8017a54 <_free_r+0x15c>)
 801796a:	1bc9      	subs	r1, r1, r7
 801796c:	19db      	adds	r3, r3, r7
 801796e:	688f      	ldr	r7, [r1, #8]
 8017970:	42a7      	cmp	r7, r4
 8017972:	d02b      	beq.n	80179cc <_free_r+0xd4>
 8017974:	68cc      	ldr	r4, [r1, #12]
 8017976:	60fc      	str	r4, [r7, #12]
 8017978:	60a7      	str	r7, [r4, #8]
 801797a:	1947      	adds	r7, r0, r5
 801797c:	687c      	ldr	r4, [r7, #4]
 801797e:	2701      	movs	r7, #1
 8017980:	423c      	tst	r4, r7
 8017982:	d10b      	bne.n	801799c <_free_r+0xa4>
 8017984:	195b      	adds	r3, r3, r5
 8017986:	6885      	ldr	r5, [r0, #8]
 8017988:	2e00      	cmp	r6, #0
 801798a:	d121      	bne.n	80179d0 <_free_r+0xd8>
 801798c:	4c31      	ldr	r4, [pc, #196]	; (8017a54 <_free_r+0x15c>)
 801798e:	42a5      	cmp	r5, r4
 8017990:	d11e      	bne.n	80179d0 <_free_r+0xd8>
 8017992:	003e      	movs	r6, r7
 8017994:	6151      	str	r1, [r2, #20]
 8017996:	6111      	str	r1, [r2, #16]
 8017998:	60cd      	str	r5, [r1, #12]
 801799a:	608d      	str	r5, [r1, #8]
 801799c:	2001      	movs	r0, #1
 801799e:	0005      	movs	r5, r0
 80179a0:	431d      	orrs	r5, r3
 80179a2:	604d      	str	r5, [r1, #4]
 80179a4:	50cb      	str	r3, [r1, r3]
 80179a6:	2e00      	cmp	r6, #0
 80179a8:	d1d5      	bne.n	8017956 <_free_r+0x5e>
 80179aa:	4d2b      	ldr	r5, [pc, #172]	; (8017a58 <_free_r+0x160>)
 80179ac:	42ab      	cmp	r3, r5
 80179ae:	d813      	bhi.n	80179d8 <_free_r+0xe0>
 80179b0:	08db      	lsrs	r3, r3, #3
 80179b2:	109d      	asrs	r5, r3, #2
 80179b4:	40a8      	lsls	r0, r5
 80179b6:	6854      	ldr	r4, [r2, #4]
 80179b8:	00db      	lsls	r3, r3, #3
 80179ba:	4320      	orrs	r0, r4
 80179bc:	6050      	str	r0, [r2, #4]
 80179be:	189a      	adds	r2, r3, r2
 80179c0:	6893      	ldr	r3, [r2, #8]
 80179c2:	60ca      	str	r2, [r1, #12]
 80179c4:	608b      	str	r3, [r1, #8]
 80179c6:	6091      	str	r1, [r2, #8]
 80179c8:	60d9      	str	r1, [r3, #12]
 80179ca:	e7c4      	b.n	8017956 <_free_r+0x5e>
 80179cc:	4666      	mov	r6, ip
 80179ce:	e7d4      	b.n	801797a <_free_r+0x82>
 80179d0:	68c0      	ldr	r0, [r0, #12]
 80179d2:	60e8      	str	r0, [r5, #12]
 80179d4:	6085      	str	r5, [r0, #8]
 80179d6:	e7e1      	b.n	801799c <_free_r+0xa4>
 80179d8:	0a5d      	lsrs	r5, r3, #9
 80179da:	2d04      	cmp	r5, #4
 80179dc:	d812      	bhi.n	8017a04 <_free_r+0x10c>
 80179de:	0998      	lsrs	r0, r3, #6
 80179e0:	3038      	adds	r0, #56	; 0x38
 80179e2:	00c6      	lsls	r6, r0, #3
 80179e4:	18b6      	adds	r6, r6, r2
 80179e6:	68b5      	ldr	r5, [r6, #8]
 80179e8:	2703      	movs	r7, #3
 80179ea:	42ae      	cmp	r6, r5
 80179ec:	d125      	bne.n	8017a3a <_free_r+0x142>
 80179ee:	2301      	movs	r3, #1
 80179f0:	1080      	asrs	r0, r0, #2
 80179f2:	4083      	lsls	r3, r0
 80179f4:	6850      	ldr	r0, [r2, #4]
 80179f6:	4303      	orrs	r3, r0
 80179f8:	6053      	str	r3, [r2, #4]
 80179fa:	60ce      	str	r6, [r1, #12]
 80179fc:	608d      	str	r5, [r1, #8]
 80179fe:	60b1      	str	r1, [r6, #8]
 8017a00:	60e9      	str	r1, [r5, #12]
 8017a02:	e7a8      	b.n	8017956 <_free_r+0x5e>
 8017a04:	2d14      	cmp	r5, #20
 8017a06:	d802      	bhi.n	8017a0e <_free_r+0x116>
 8017a08:	0028      	movs	r0, r5
 8017a0a:	305b      	adds	r0, #91	; 0x5b
 8017a0c:	e7e9      	b.n	80179e2 <_free_r+0xea>
 8017a0e:	2d54      	cmp	r5, #84	; 0x54
 8017a10:	d802      	bhi.n	8017a18 <_free_r+0x120>
 8017a12:	0b18      	lsrs	r0, r3, #12
 8017a14:	306e      	adds	r0, #110	; 0x6e
 8017a16:	e7e4      	b.n	80179e2 <_free_r+0xea>
 8017a18:	20aa      	movs	r0, #170	; 0xaa
 8017a1a:	0040      	lsls	r0, r0, #1
 8017a1c:	4285      	cmp	r5, r0
 8017a1e:	d802      	bhi.n	8017a26 <_free_r+0x12e>
 8017a20:	0bd8      	lsrs	r0, r3, #15
 8017a22:	3077      	adds	r0, #119	; 0x77
 8017a24:	e7dd      	b.n	80179e2 <_free_r+0xea>
 8017a26:	4e0d      	ldr	r6, [pc, #52]	; (8017a5c <_free_r+0x164>)
 8017a28:	207e      	movs	r0, #126	; 0x7e
 8017a2a:	42b5      	cmp	r5, r6
 8017a2c:	d8d9      	bhi.n	80179e2 <_free_r+0xea>
 8017a2e:	0c98      	lsrs	r0, r3, #18
 8017a30:	307c      	adds	r0, #124	; 0x7c
 8017a32:	e7d6      	b.n	80179e2 <_free_r+0xea>
 8017a34:	68ad      	ldr	r5, [r5, #8]
 8017a36:	42ae      	cmp	r6, r5
 8017a38:	d003      	beq.n	8017a42 <_free_r+0x14a>
 8017a3a:	686a      	ldr	r2, [r5, #4]
 8017a3c:	43ba      	bics	r2, r7
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	d8f8      	bhi.n	8017a34 <_free_r+0x13c>
 8017a42:	68ee      	ldr	r6, [r5, #12]
 8017a44:	e7d9      	b.n	80179fa <_free_r+0x102>
 8017a46:	46c0      	nop			; (mov r8, r8)
 8017a48:	200006d4 	.word	0x200006d4
 8017a4c:	20000ae0 	.word	0x20000ae0
 8017a50:	20006994 	.word	0x20006994
 8017a54:	200006dc 	.word	0x200006dc
 8017a58:	000001ff 	.word	0x000001ff
 8017a5c:	00000554 	.word	0x00000554

08017a60 <rshift>:
 8017a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a62:	0004      	movs	r4, r0
 8017a64:	6905      	ldr	r5, [r0, #16]
 8017a66:	3414      	adds	r4, #20
 8017a68:	114b      	asrs	r3, r1, #5
 8017a6a:	0026      	movs	r6, r4
 8017a6c:	429d      	cmp	r5, r3
 8017a6e:	dd14      	ble.n	8017a9a <rshift+0x3a>
 8017a70:	221f      	movs	r2, #31
 8017a72:	00ad      	lsls	r5, r5, #2
 8017a74:	009b      	lsls	r3, r3, #2
 8017a76:	4011      	ands	r1, r2
 8017a78:	1965      	adds	r5, r4, r5
 8017a7a:	18e3      	adds	r3, r4, r3
 8017a7c:	0022      	movs	r2, r4
 8017a7e:	2900      	cmp	r1, #0
 8017a80:	d01e      	beq.n	8017ac0 <rshift+0x60>
 8017a82:	cb04      	ldmia	r3!, {r2}
 8017a84:	2720      	movs	r7, #32
 8017a86:	40ca      	lsrs	r2, r1
 8017a88:	46a4      	mov	ip, r4
 8017a8a:	1a7f      	subs	r7, r7, r1
 8017a8c:	4666      	mov	r6, ip
 8017a8e:	429d      	cmp	r5, r3
 8017a90:	d80b      	bhi.n	8017aaa <rshift+0x4a>
 8017a92:	6032      	str	r2, [r6, #0]
 8017a94:	2a00      	cmp	r2, #0
 8017a96:	d000      	beq.n	8017a9a <rshift+0x3a>
 8017a98:	3604      	adds	r6, #4
 8017a9a:	1b33      	subs	r3, r6, r4
 8017a9c:	109b      	asrs	r3, r3, #2
 8017a9e:	6103      	str	r3, [r0, #16]
 8017aa0:	42a6      	cmp	r6, r4
 8017aa2:	d101      	bne.n	8017aa8 <rshift+0x48>
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	6143      	str	r3, [r0, #20]
 8017aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017aaa:	681e      	ldr	r6, [r3, #0]
 8017aac:	40be      	lsls	r6, r7
 8017aae:	4332      	orrs	r2, r6
 8017ab0:	4666      	mov	r6, ip
 8017ab2:	c604      	stmia	r6!, {r2}
 8017ab4:	cb04      	ldmia	r3!, {r2}
 8017ab6:	46b4      	mov	ip, r6
 8017ab8:	40ca      	lsrs	r2, r1
 8017aba:	e7e7      	b.n	8017a8c <rshift+0x2c>
 8017abc:	cb02      	ldmia	r3!, {r1}
 8017abe:	c202      	stmia	r2!, {r1}
 8017ac0:	0016      	movs	r6, r2
 8017ac2:	429d      	cmp	r5, r3
 8017ac4:	d8fa      	bhi.n	8017abc <rshift+0x5c>
 8017ac6:	e7e8      	b.n	8017a9a <rshift+0x3a>

08017ac8 <__hexdig_fun>:
 8017ac8:	0003      	movs	r3, r0
 8017aca:	3b30      	subs	r3, #48	; 0x30
 8017acc:	2b09      	cmp	r3, #9
 8017ace:	d803      	bhi.n	8017ad8 <__hexdig_fun+0x10>
 8017ad0:	3820      	subs	r0, #32
 8017ad2:	b2c3      	uxtb	r3, r0
 8017ad4:	0018      	movs	r0, r3
 8017ad6:	4770      	bx	lr
 8017ad8:	0003      	movs	r3, r0
 8017ada:	3b61      	subs	r3, #97	; 0x61
 8017adc:	2b05      	cmp	r3, #5
 8017ade:	d801      	bhi.n	8017ae4 <__hexdig_fun+0x1c>
 8017ae0:	3847      	subs	r0, #71	; 0x47
 8017ae2:	e7f6      	b.n	8017ad2 <__hexdig_fun+0xa>
 8017ae4:	0002      	movs	r2, r0
 8017ae6:	3a41      	subs	r2, #65	; 0x41
 8017ae8:	2300      	movs	r3, #0
 8017aea:	2a05      	cmp	r2, #5
 8017aec:	d8f2      	bhi.n	8017ad4 <__hexdig_fun+0xc>
 8017aee:	3827      	subs	r0, #39	; 0x27
 8017af0:	e7ef      	b.n	8017ad2 <__hexdig_fun+0xa>

08017af2 <__gethex>:
 8017af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017af4:	b08d      	sub	sp, #52	; 0x34
 8017af6:	9005      	str	r0, [sp, #20]
 8017af8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017afa:	9109      	str	r1, [sp, #36]	; 0x24
 8017afc:	9202      	str	r2, [sp, #8]
 8017afe:	930a      	str	r3, [sp, #40]	; 0x28
 8017b00:	f000 fadf 	bl	80180c2 <__localeconv_l>
 8017b04:	6803      	ldr	r3, [r0, #0]
 8017b06:	0018      	movs	r0, r3
 8017b08:	9307      	str	r3, [sp, #28]
 8017b0a:	f7e8 fb05 	bl	8000118 <strlen>
 8017b0e:	2202      	movs	r2, #2
 8017b10:	9b07      	ldr	r3, [sp, #28]
 8017b12:	4252      	negs	r2, r2
 8017b14:	181b      	adds	r3, r3, r0
 8017b16:	3b01      	subs	r3, #1
 8017b18:	781b      	ldrb	r3, [r3, #0]
 8017b1a:	9004      	str	r0, [sp, #16]
 8017b1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b20:	6819      	ldr	r1, [r3, #0]
 8017b22:	1c8b      	adds	r3, r1, #2
 8017b24:	1a52      	subs	r2, r2, r1
 8017b26:	18d1      	adds	r1, r2, r3
 8017b28:	9301      	str	r3, [sp, #4]
 8017b2a:	9108      	str	r1, [sp, #32]
 8017b2c:	9901      	ldr	r1, [sp, #4]
 8017b2e:	3301      	adds	r3, #1
 8017b30:	7808      	ldrb	r0, [r1, #0]
 8017b32:	2830      	cmp	r0, #48	; 0x30
 8017b34:	d0f7      	beq.n	8017b26 <__gethex+0x34>
 8017b36:	f7ff ffc7 	bl	8017ac8 <__hexdig_fun>
 8017b3a:	1e07      	subs	r7, r0, #0
 8017b3c:	d000      	beq.n	8017b40 <__gethex+0x4e>
 8017b3e:	e06f      	b.n	8017c20 <__gethex+0x12e>
 8017b40:	9a04      	ldr	r2, [sp, #16]
 8017b42:	9907      	ldr	r1, [sp, #28]
 8017b44:	9801      	ldr	r0, [sp, #4]
 8017b46:	f7fc fe4b 	bl	80147e0 <strncmp>
 8017b4a:	2800      	cmp	r0, #0
 8017b4c:	d000      	beq.n	8017b50 <__gethex+0x5e>
 8017b4e:	e06d      	b.n	8017c2c <__gethex+0x13a>
 8017b50:	9b01      	ldr	r3, [sp, #4]
 8017b52:	9a04      	ldr	r2, [sp, #16]
 8017b54:	189c      	adds	r4, r3, r2
 8017b56:	7820      	ldrb	r0, [r4, #0]
 8017b58:	f7ff ffb6 	bl	8017ac8 <__hexdig_fun>
 8017b5c:	2800      	cmp	r0, #0
 8017b5e:	d069      	beq.n	8017c34 <__gethex+0x142>
 8017b60:	9401      	str	r4, [sp, #4]
 8017b62:	9b01      	ldr	r3, [sp, #4]
 8017b64:	7818      	ldrb	r0, [r3, #0]
 8017b66:	2830      	cmp	r0, #48	; 0x30
 8017b68:	d009      	beq.n	8017b7e <__gethex+0x8c>
 8017b6a:	f7ff ffad 	bl	8017ac8 <__hexdig_fun>
 8017b6e:	4243      	negs	r3, r0
 8017b70:	4143      	adcs	r3, r0
 8017b72:	9303      	str	r3, [sp, #12]
 8017b74:	2301      	movs	r3, #1
 8017b76:	0026      	movs	r6, r4
 8017b78:	9308      	str	r3, [sp, #32]
 8017b7a:	9c01      	ldr	r4, [sp, #4]
 8017b7c:	e004      	b.n	8017b88 <__gethex+0x96>
 8017b7e:	9b01      	ldr	r3, [sp, #4]
 8017b80:	3301      	adds	r3, #1
 8017b82:	9301      	str	r3, [sp, #4]
 8017b84:	e7ed      	b.n	8017b62 <__gethex+0x70>
 8017b86:	3401      	adds	r4, #1
 8017b88:	7820      	ldrb	r0, [r4, #0]
 8017b8a:	f7ff ff9d 	bl	8017ac8 <__hexdig_fun>
 8017b8e:	2800      	cmp	r0, #0
 8017b90:	d1f9      	bne.n	8017b86 <__gethex+0x94>
 8017b92:	9a04      	ldr	r2, [sp, #16]
 8017b94:	9907      	ldr	r1, [sp, #28]
 8017b96:	0020      	movs	r0, r4
 8017b98:	f7fc fe22 	bl	80147e0 <strncmp>
 8017b9c:	2800      	cmp	r0, #0
 8017b9e:	d109      	bne.n	8017bb4 <__gethex+0xc2>
 8017ba0:	2e00      	cmp	r6, #0
 8017ba2:	d10a      	bne.n	8017bba <__gethex+0xc8>
 8017ba4:	9b04      	ldr	r3, [sp, #16]
 8017ba6:	18e4      	adds	r4, r4, r3
 8017ba8:	0026      	movs	r6, r4
 8017baa:	7820      	ldrb	r0, [r4, #0]
 8017bac:	f7ff ff8c 	bl	8017ac8 <__hexdig_fun>
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	d139      	bne.n	8017c28 <__gethex+0x136>
 8017bb4:	2700      	movs	r7, #0
 8017bb6:	42be      	cmp	r6, r7
 8017bb8:	d001      	beq.n	8017bbe <__gethex+0xcc>
 8017bba:	1b37      	subs	r7, r6, r4
 8017bbc:	00bf      	lsls	r7, r7, #2
 8017bbe:	7823      	ldrb	r3, [r4, #0]
 8017bc0:	2b50      	cmp	r3, #80	; 0x50
 8017bc2:	d001      	beq.n	8017bc8 <__gethex+0xd6>
 8017bc4:	2b70      	cmp	r3, #112	; 0x70
 8017bc6:	d142      	bne.n	8017c4e <__gethex+0x15c>
 8017bc8:	7863      	ldrb	r3, [r4, #1]
 8017bca:	2b2b      	cmp	r3, #43	; 0x2b
 8017bcc:	d034      	beq.n	8017c38 <__gethex+0x146>
 8017bce:	2b2d      	cmp	r3, #45	; 0x2d
 8017bd0:	d036      	beq.n	8017c40 <__gethex+0x14e>
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	1c66      	adds	r6, r4, #1
 8017bd6:	9306      	str	r3, [sp, #24]
 8017bd8:	7830      	ldrb	r0, [r6, #0]
 8017bda:	f7ff ff75 	bl	8017ac8 <__hexdig_fun>
 8017bde:	1e43      	subs	r3, r0, #1
 8017be0:	b2db      	uxtb	r3, r3
 8017be2:	2b18      	cmp	r3, #24
 8017be4:	d833      	bhi.n	8017c4e <__gethex+0x15c>
 8017be6:	3810      	subs	r0, #16
 8017be8:	0005      	movs	r5, r0
 8017bea:	3601      	adds	r6, #1
 8017bec:	7830      	ldrb	r0, [r6, #0]
 8017bee:	f7ff ff6b 	bl	8017ac8 <__hexdig_fun>
 8017bf2:	1e43      	subs	r3, r0, #1
 8017bf4:	b2db      	uxtb	r3, r3
 8017bf6:	2b18      	cmp	r3, #24
 8017bf8:	d924      	bls.n	8017c44 <__gethex+0x152>
 8017bfa:	9b06      	ldr	r3, [sp, #24]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d000      	beq.n	8017c02 <__gethex+0x110>
 8017c00:	426d      	negs	r5, r5
 8017c02:	197f      	adds	r7, r7, r5
 8017c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c06:	601e      	str	r6, [r3, #0]
 8017c08:	9b03      	ldr	r3, [sp, #12]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d021      	beq.n	8017c52 <__gethex+0x160>
 8017c0e:	9b08      	ldr	r3, [sp, #32]
 8017c10:	2606      	movs	r6, #6
 8017c12:	425a      	negs	r2, r3
 8017c14:	4153      	adcs	r3, r2
 8017c16:	425b      	negs	r3, r3
 8017c18:	401e      	ands	r6, r3
 8017c1a:	0030      	movs	r0, r6
 8017c1c:	b00d      	add	sp, #52	; 0x34
 8017c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c20:	2300      	movs	r3, #0
 8017c22:	9303      	str	r3, [sp, #12]
 8017c24:	001e      	movs	r6, r3
 8017c26:	e7a8      	b.n	8017b7a <__gethex+0x88>
 8017c28:	3401      	adds	r4, #1
 8017c2a:	e7be      	b.n	8017baa <__gethex+0xb8>
 8017c2c:	9c01      	ldr	r4, [sp, #4]
 8017c2e:	2301      	movs	r3, #1
 8017c30:	9303      	str	r3, [sp, #12]
 8017c32:	e7c4      	b.n	8017bbe <__gethex+0xcc>
 8017c34:	0007      	movs	r7, r0
 8017c36:	e7fa      	b.n	8017c2e <__gethex+0x13c>
 8017c38:	2300      	movs	r3, #0
 8017c3a:	9306      	str	r3, [sp, #24]
 8017c3c:	1ca6      	adds	r6, r4, #2
 8017c3e:	e7cb      	b.n	8017bd8 <__gethex+0xe6>
 8017c40:	2301      	movs	r3, #1
 8017c42:	e7fa      	b.n	8017c3a <__gethex+0x148>
 8017c44:	230a      	movs	r3, #10
 8017c46:	435d      	muls	r5, r3
 8017c48:	182d      	adds	r5, r5, r0
 8017c4a:	3d10      	subs	r5, #16
 8017c4c:	e7cd      	b.n	8017bea <__gethex+0xf8>
 8017c4e:	0026      	movs	r6, r4
 8017c50:	e7d8      	b.n	8017c04 <__gethex+0x112>
 8017c52:	9b01      	ldr	r3, [sp, #4]
 8017c54:	9903      	ldr	r1, [sp, #12]
 8017c56:	1ae3      	subs	r3, r4, r3
 8017c58:	3b01      	subs	r3, #1
 8017c5a:	2b07      	cmp	r3, #7
 8017c5c:	dc47      	bgt.n	8017cee <__gethex+0x1fc>
 8017c5e:	9805      	ldr	r0, [sp, #20]
 8017c60:	f000 fa5e 	bl	8018120 <_Balloc>
 8017c64:	0003      	movs	r3, r0
 8017c66:	3314      	adds	r3, #20
 8017c68:	9303      	str	r3, [sp, #12]
 8017c6a:	9308      	str	r3, [sp, #32]
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	0005      	movs	r5, r0
 8017c70:	001e      	movs	r6, r3
 8017c72:	9306      	str	r3, [sp, #24]
 8017c74:	9b01      	ldr	r3, [sp, #4]
 8017c76:	42a3      	cmp	r3, r4
 8017c78:	d33c      	bcc.n	8017cf4 <__gethex+0x202>
 8017c7a:	9c08      	ldr	r4, [sp, #32]
 8017c7c:	9b03      	ldr	r3, [sp, #12]
 8017c7e:	c440      	stmia	r4!, {r6}
 8017c80:	1ae4      	subs	r4, r4, r3
 8017c82:	10a4      	asrs	r4, r4, #2
 8017c84:	612c      	str	r4, [r5, #16]
 8017c86:	0030      	movs	r0, r6
 8017c88:	f000 faf8 	bl	801827c <__hi0bits>
 8017c8c:	9b02      	ldr	r3, [sp, #8]
 8017c8e:	0164      	lsls	r4, r4, #5
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	1a26      	subs	r6, r4, r0
 8017c94:	9301      	str	r3, [sp, #4]
 8017c96:	429e      	cmp	r6, r3
 8017c98:	dd5f      	ble.n	8017d5a <__gethex+0x268>
 8017c9a:	1af6      	subs	r6, r6, r3
 8017c9c:	0031      	movs	r1, r6
 8017c9e:	0028      	movs	r0, r5
 8017ca0:	f000 fde3 	bl	801886a <__any_on>
 8017ca4:	1e04      	subs	r4, r0, #0
 8017ca6:	d00f      	beq.n	8017cc8 <__gethex+0x1d6>
 8017ca8:	2401      	movs	r4, #1
 8017caa:	211f      	movs	r1, #31
 8017cac:	0020      	movs	r0, r4
 8017cae:	1e73      	subs	r3, r6, #1
 8017cb0:	4019      	ands	r1, r3
 8017cb2:	4088      	lsls	r0, r1
 8017cb4:	0001      	movs	r1, r0
 8017cb6:	115a      	asrs	r2, r3, #5
 8017cb8:	9803      	ldr	r0, [sp, #12]
 8017cba:	0092      	lsls	r2, r2, #2
 8017cbc:	5812      	ldr	r2, [r2, r0]
 8017cbe:	420a      	tst	r2, r1
 8017cc0:	d002      	beq.n	8017cc8 <__gethex+0x1d6>
 8017cc2:	42a3      	cmp	r3, r4
 8017cc4:	dc41      	bgt.n	8017d4a <__gethex+0x258>
 8017cc6:	2402      	movs	r4, #2
 8017cc8:	0031      	movs	r1, r6
 8017cca:	0028      	movs	r0, r5
 8017ccc:	f7ff fec8 	bl	8017a60 <rshift>
 8017cd0:	19bf      	adds	r7, r7, r6
 8017cd2:	9b02      	ldr	r3, [sp, #8]
 8017cd4:	689b      	ldr	r3, [r3, #8]
 8017cd6:	9304      	str	r3, [sp, #16]
 8017cd8:	42bb      	cmp	r3, r7
 8017cda:	da4e      	bge.n	8017d7a <__gethex+0x288>
 8017cdc:	0029      	movs	r1, r5
 8017cde:	9805      	ldr	r0, [sp, #20]
 8017ce0:	f000 fa46 	bl	8018170 <_Bfree>
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017ce8:	26a3      	movs	r6, #163	; 0xa3
 8017cea:	6013      	str	r3, [r2, #0]
 8017cec:	e795      	b.n	8017c1a <__gethex+0x128>
 8017cee:	3101      	adds	r1, #1
 8017cf0:	105b      	asrs	r3, r3, #1
 8017cf2:	e7b2      	b.n	8017c5a <__gethex+0x168>
 8017cf4:	1e63      	subs	r3, r4, #1
 8017cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8017cf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017cfa:	781b      	ldrb	r3, [r3, #0]
 8017cfc:	4293      	cmp	r3, r2
 8017cfe:	d015      	beq.n	8017d2c <__gethex+0x23a>
 8017d00:	9b06      	ldr	r3, [sp, #24]
 8017d02:	2b20      	cmp	r3, #32
 8017d04:	d105      	bne.n	8017d12 <__gethex+0x220>
 8017d06:	9b08      	ldr	r3, [sp, #32]
 8017d08:	601e      	str	r6, [r3, #0]
 8017d0a:	2600      	movs	r6, #0
 8017d0c:	3304      	adds	r3, #4
 8017d0e:	9308      	str	r3, [sp, #32]
 8017d10:	9606      	str	r6, [sp, #24]
 8017d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d14:	7818      	ldrb	r0, [r3, #0]
 8017d16:	f7ff fed7 	bl	8017ac8 <__hexdig_fun>
 8017d1a:	230f      	movs	r3, #15
 8017d1c:	4018      	ands	r0, r3
 8017d1e:	9b06      	ldr	r3, [sp, #24]
 8017d20:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017d22:	4098      	lsls	r0, r3
 8017d24:	3304      	adds	r3, #4
 8017d26:	4306      	orrs	r6, r0
 8017d28:	9306      	str	r3, [sp, #24]
 8017d2a:	e7a3      	b.n	8017c74 <__gethex+0x182>
 8017d2c:	2301      	movs	r3, #1
 8017d2e:	9a04      	ldr	r2, [sp, #16]
 8017d30:	1a9c      	subs	r4, r3, r2
 8017d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d34:	191c      	adds	r4, r3, r4
 8017d36:	9b01      	ldr	r3, [sp, #4]
 8017d38:	429c      	cmp	r4, r3
 8017d3a:	d3e1      	bcc.n	8017d00 <__gethex+0x20e>
 8017d3c:	9907      	ldr	r1, [sp, #28]
 8017d3e:	0020      	movs	r0, r4
 8017d40:	f7fc fd4e 	bl	80147e0 <strncmp>
 8017d44:	2800      	cmp	r0, #0
 8017d46:	d1db      	bne.n	8017d00 <__gethex+0x20e>
 8017d48:	e794      	b.n	8017c74 <__gethex+0x182>
 8017d4a:	1eb1      	subs	r1, r6, #2
 8017d4c:	0028      	movs	r0, r5
 8017d4e:	f000 fd8c 	bl	801886a <__any_on>
 8017d52:	2800      	cmp	r0, #0
 8017d54:	d0b7      	beq.n	8017cc6 <__gethex+0x1d4>
 8017d56:	2403      	movs	r4, #3
 8017d58:	e7b6      	b.n	8017cc8 <__gethex+0x1d6>
 8017d5a:	9b01      	ldr	r3, [sp, #4]
 8017d5c:	2400      	movs	r4, #0
 8017d5e:	429e      	cmp	r6, r3
 8017d60:	dab7      	bge.n	8017cd2 <__gethex+0x1e0>
 8017d62:	1b9e      	subs	r6, r3, r6
 8017d64:	0029      	movs	r1, r5
 8017d66:	0032      	movs	r2, r6
 8017d68:	9805      	ldr	r0, [sp, #20]
 8017d6a:	f000 fbab 	bl	80184c4 <__lshift>
 8017d6e:	0003      	movs	r3, r0
 8017d70:	3314      	adds	r3, #20
 8017d72:	0005      	movs	r5, r0
 8017d74:	1bbf      	subs	r7, r7, r6
 8017d76:	9303      	str	r3, [sp, #12]
 8017d78:	e7ab      	b.n	8017cd2 <__gethex+0x1e0>
 8017d7a:	9b02      	ldr	r3, [sp, #8]
 8017d7c:	685e      	ldr	r6, [r3, #4]
 8017d7e:	42be      	cmp	r6, r7
 8017d80:	dd6b      	ble.n	8017e5a <__gethex+0x368>
 8017d82:	9b01      	ldr	r3, [sp, #4]
 8017d84:	1bf6      	subs	r6, r6, r7
 8017d86:	42b3      	cmp	r3, r6
 8017d88:	dc32      	bgt.n	8017df0 <__gethex+0x2fe>
 8017d8a:	9b02      	ldr	r3, [sp, #8]
 8017d8c:	68db      	ldr	r3, [r3, #12]
 8017d8e:	2b02      	cmp	r3, #2
 8017d90:	d026      	beq.n	8017de0 <__gethex+0x2ee>
 8017d92:	2b03      	cmp	r3, #3
 8017d94:	d028      	beq.n	8017de8 <__gethex+0x2f6>
 8017d96:	2b01      	cmp	r3, #1
 8017d98:	d119      	bne.n	8017dce <__gethex+0x2dc>
 8017d9a:	9b01      	ldr	r3, [sp, #4]
 8017d9c:	42b3      	cmp	r3, r6
 8017d9e:	d116      	bne.n	8017dce <__gethex+0x2dc>
 8017da0:	2b01      	cmp	r3, #1
 8017da2:	dc0d      	bgt.n	8017dc0 <__gethex+0x2ce>
 8017da4:	9b02      	ldr	r3, [sp, #8]
 8017da6:	2662      	movs	r6, #98	; 0x62
 8017da8:	685b      	ldr	r3, [r3, #4]
 8017daa:	9301      	str	r3, [sp, #4]
 8017dac:	9a01      	ldr	r2, [sp, #4]
 8017dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017db0:	601a      	str	r2, [r3, #0]
 8017db2:	2301      	movs	r3, #1
 8017db4:	9a03      	ldr	r2, [sp, #12]
 8017db6:	612b      	str	r3, [r5, #16]
 8017db8:	6013      	str	r3, [r2, #0]
 8017dba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017dbc:	601d      	str	r5, [r3, #0]
 8017dbe:	e72c      	b.n	8017c1a <__gethex+0x128>
 8017dc0:	9901      	ldr	r1, [sp, #4]
 8017dc2:	0028      	movs	r0, r5
 8017dc4:	3901      	subs	r1, #1
 8017dc6:	f000 fd50 	bl	801886a <__any_on>
 8017dca:	2800      	cmp	r0, #0
 8017dcc:	d1ea      	bne.n	8017da4 <__gethex+0x2b2>
 8017dce:	0029      	movs	r1, r5
 8017dd0:	9805      	ldr	r0, [sp, #20]
 8017dd2:	f000 f9cd 	bl	8018170 <_Bfree>
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017dda:	2650      	movs	r6, #80	; 0x50
 8017ddc:	6013      	str	r3, [r2, #0]
 8017dde:	e71c      	b.n	8017c1a <__gethex+0x128>
 8017de0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d0de      	beq.n	8017da4 <__gethex+0x2b2>
 8017de6:	e7f2      	b.n	8017dce <__gethex+0x2dc>
 8017de8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d1da      	bne.n	8017da4 <__gethex+0x2b2>
 8017dee:	e7ee      	b.n	8017dce <__gethex+0x2dc>
 8017df0:	1e77      	subs	r7, r6, #1
 8017df2:	2c00      	cmp	r4, #0
 8017df4:	d12f      	bne.n	8017e56 <__gethex+0x364>
 8017df6:	2f00      	cmp	r7, #0
 8017df8:	d004      	beq.n	8017e04 <__gethex+0x312>
 8017dfa:	0039      	movs	r1, r7
 8017dfc:	0028      	movs	r0, r5
 8017dfe:	f000 fd34 	bl	801886a <__any_on>
 8017e02:	0004      	movs	r4, r0
 8017e04:	231f      	movs	r3, #31
 8017e06:	117a      	asrs	r2, r7, #5
 8017e08:	401f      	ands	r7, r3
 8017e0a:	3b1e      	subs	r3, #30
 8017e0c:	40bb      	lsls	r3, r7
 8017e0e:	9903      	ldr	r1, [sp, #12]
 8017e10:	0092      	lsls	r2, r2, #2
 8017e12:	5852      	ldr	r2, [r2, r1]
 8017e14:	421a      	tst	r2, r3
 8017e16:	d001      	beq.n	8017e1c <__gethex+0x32a>
 8017e18:	2302      	movs	r3, #2
 8017e1a:	431c      	orrs	r4, r3
 8017e1c:	9b01      	ldr	r3, [sp, #4]
 8017e1e:	0031      	movs	r1, r6
 8017e20:	1b9b      	subs	r3, r3, r6
 8017e22:	2602      	movs	r6, #2
 8017e24:	0028      	movs	r0, r5
 8017e26:	9301      	str	r3, [sp, #4]
 8017e28:	f7ff fe1a 	bl	8017a60 <rshift>
 8017e2c:	9b02      	ldr	r3, [sp, #8]
 8017e2e:	685f      	ldr	r7, [r3, #4]
 8017e30:	2c00      	cmp	r4, #0
 8017e32:	d040      	beq.n	8017eb6 <__gethex+0x3c4>
 8017e34:	9b02      	ldr	r3, [sp, #8]
 8017e36:	68db      	ldr	r3, [r3, #12]
 8017e38:	2b02      	cmp	r3, #2
 8017e3a:	d010      	beq.n	8017e5e <__gethex+0x36c>
 8017e3c:	2b03      	cmp	r3, #3
 8017e3e:	d012      	beq.n	8017e66 <__gethex+0x374>
 8017e40:	2b01      	cmp	r3, #1
 8017e42:	d106      	bne.n	8017e52 <__gethex+0x360>
 8017e44:	07a2      	lsls	r2, r4, #30
 8017e46:	d504      	bpl.n	8017e52 <__gethex+0x360>
 8017e48:	9a03      	ldr	r2, [sp, #12]
 8017e4a:	6812      	ldr	r2, [r2, #0]
 8017e4c:	4314      	orrs	r4, r2
 8017e4e:	421c      	tst	r4, r3
 8017e50:	d10c      	bne.n	8017e6c <__gethex+0x37a>
 8017e52:	2310      	movs	r3, #16
 8017e54:	e02e      	b.n	8017eb4 <__gethex+0x3c2>
 8017e56:	2401      	movs	r4, #1
 8017e58:	e7d4      	b.n	8017e04 <__gethex+0x312>
 8017e5a:	2601      	movs	r6, #1
 8017e5c:	e7e8      	b.n	8017e30 <__gethex+0x33e>
 8017e5e:	2301      	movs	r3, #1
 8017e60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017e62:	1a9b      	subs	r3, r3, r2
 8017e64:	9313      	str	r3, [sp, #76]	; 0x4c
 8017e66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d0f2      	beq.n	8017e52 <__gethex+0x360>
 8017e6c:	692c      	ldr	r4, [r5, #16]
 8017e6e:	00a3      	lsls	r3, r4, #2
 8017e70:	9304      	str	r3, [sp, #16]
 8017e72:	002b      	movs	r3, r5
 8017e74:	00a2      	lsls	r2, r4, #2
 8017e76:	3314      	adds	r3, #20
 8017e78:	1899      	adds	r1, r3, r2
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	4694      	mov	ip, r2
 8017e7e:	681a      	ldr	r2, [r3, #0]
 8017e80:	1c50      	adds	r0, r2, #1
 8017e82:	d01d      	beq.n	8017ec0 <__gethex+0x3ce>
 8017e84:	3201      	adds	r2, #1
 8017e86:	601a      	str	r2, [r3, #0]
 8017e88:	002b      	movs	r3, r5
 8017e8a:	3314      	adds	r3, #20
 8017e8c:	2e02      	cmp	r6, #2
 8017e8e:	d13a      	bne.n	8017f06 <__gethex+0x414>
 8017e90:	9a02      	ldr	r2, [sp, #8]
 8017e92:	9901      	ldr	r1, [sp, #4]
 8017e94:	6812      	ldr	r2, [r2, #0]
 8017e96:	3a01      	subs	r2, #1
 8017e98:	428a      	cmp	r2, r1
 8017e9a:	d10a      	bne.n	8017eb2 <__gethex+0x3c0>
 8017e9c:	114a      	asrs	r2, r1, #5
 8017e9e:	211f      	movs	r1, #31
 8017ea0:	9801      	ldr	r0, [sp, #4]
 8017ea2:	0092      	lsls	r2, r2, #2
 8017ea4:	4001      	ands	r1, r0
 8017ea6:	2001      	movs	r0, #1
 8017ea8:	0004      	movs	r4, r0
 8017eaa:	408c      	lsls	r4, r1
 8017eac:	58d3      	ldr	r3, [r2, r3]
 8017eae:	4223      	tst	r3, r4
 8017eb0:	d148      	bne.n	8017f44 <__gethex+0x452>
 8017eb2:	2320      	movs	r3, #32
 8017eb4:	431e      	orrs	r6, r3
 8017eb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017eb8:	601d      	str	r5, [r3, #0]
 8017eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ebc:	601f      	str	r7, [r3, #0]
 8017ebe:	e6ac      	b.n	8017c1a <__gethex+0x128>
 8017ec0:	4662      	mov	r2, ip
 8017ec2:	c304      	stmia	r3!, {r2}
 8017ec4:	4299      	cmp	r1, r3
 8017ec6:	d8da      	bhi.n	8017e7e <__gethex+0x38c>
 8017ec8:	68ab      	ldr	r3, [r5, #8]
 8017eca:	429c      	cmp	r4, r3
 8017ecc:	db12      	blt.n	8017ef4 <__gethex+0x402>
 8017ece:	686b      	ldr	r3, [r5, #4]
 8017ed0:	9805      	ldr	r0, [sp, #20]
 8017ed2:	1c59      	adds	r1, r3, #1
 8017ed4:	f000 f924 	bl	8018120 <_Balloc>
 8017ed8:	0029      	movs	r1, r5
 8017eda:	692b      	ldr	r3, [r5, #16]
 8017edc:	9003      	str	r0, [sp, #12]
 8017ede:	1c9a      	adds	r2, r3, #2
 8017ee0:	0092      	lsls	r2, r2, #2
 8017ee2:	310c      	adds	r1, #12
 8017ee4:	300c      	adds	r0, #12
 8017ee6:	f7fc fa02 	bl	80142ee <memcpy>
 8017eea:	0029      	movs	r1, r5
 8017eec:	9805      	ldr	r0, [sp, #20]
 8017eee:	f000 f93f 	bl	8018170 <_Bfree>
 8017ef2:	9d03      	ldr	r5, [sp, #12]
 8017ef4:	692b      	ldr	r3, [r5, #16]
 8017ef6:	1c5a      	adds	r2, r3, #1
 8017ef8:	612a      	str	r2, [r5, #16]
 8017efa:	2201      	movs	r2, #1
 8017efc:	3304      	adds	r3, #4
 8017efe:	009b      	lsls	r3, r3, #2
 8017f00:	18eb      	adds	r3, r5, r3
 8017f02:	605a      	str	r2, [r3, #4]
 8017f04:	e7c0      	b.n	8017e88 <__gethex+0x396>
 8017f06:	692a      	ldr	r2, [r5, #16]
 8017f08:	42a2      	cmp	r2, r4
 8017f0a:	dd0a      	ble.n	8017f22 <__gethex+0x430>
 8017f0c:	2101      	movs	r1, #1
 8017f0e:	0028      	movs	r0, r5
 8017f10:	f7ff fda6 	bl	8017a60 <rshift>
 8017f14:	9b02      	ldr	r3, [sp, #8]
 8017f16:	3701      	adds	r7, #1
 8017f18:	689b      	ldr	r3, [r3, #8]
 8017f1a:	2601      	movs	r6, #1
 8017f1c:	42bb      	cmp	r3, r7
 8017f1e:	dac8      	bge.n	8017eb2 <__gethex+0x3c0>
 8017f20:	e6dc      	b.n	8017cdc <__gethex+0x1ea>
 8017f22:	241f      	movs	r4, #31
 8017f24:	9a01      	ldr	r2, [sp, #4]
 8017f26:	2601      	movs	r6, #1
 8017f28:	4022      	ands	r2, r4
 8017f2a:	1e14      	subs	r4, r2, #0
 8017f2c:	d0c1      	beq.n	8017eb2 <__gethex+0x3c0>
 8017f2e:	9a04      	ldr	r2, [sp, #16]
 8017f30:	189b      	adds	r3, r3, r2
 8017f32:	3b04      	subs	r3, #4
 8017f34:	6818      	ldr	r0, [r3, #0]
 8017f36:	f000 f9a1 	bl	801827c <__hi0bits>
 8017f3a:	2120      	movs	r1, #32
 8017f3c:	1b0c      	subs	r4, r1, r4
 8017f3e:	42a0      	cmp	r0, r4
 8017f40:	dbe4      	blt.n	8017f0c <__gethex+0x41a>
 8017f42:	e7b6      	b.n	8017eb2 <__gethex+0x3c0>
 8017f44:	0006      	movs	r6, r0
 8017f46:	e7b4      	b.n	8017eb2 <__gethex+0x3c0>

08017f48 <L_shift>:
 8017f48:	2308      	movs	r3, #8
 8017f4a:	b570      	push	{r4, r5, r6, lr}
 8017f4c:	2520      	movs	r5, #32
 8017f4e:	1a9a      	subs	r2, r3, r2
 8017f50:	0092      	lsls	r2, r2, #2
 8017f52:	1aad      	subs	r5, r5, r2
 8017f54:	6843      	ldr	r3, [r0, #4]
 8017f56:	6806      	ldr	r6, [r0, #0]
 8017f58:	001c      	movs	r4, r3
 8017f5a:	40ac      	lsls	r4, r5
 8017f5c:	40d3      	lsrs	r3, r2
 8017f5e:	4334      	orrs	r4, r6
 8017f60:	6004      	str	r4, [r0, #0]
 8017f62:	6043      	str	r3, [r0, #4]
 8017f64:	3004      	adds	r0, #4
 8017f66:	4288      	cmp	r0, r1
 8017f68:	d3f4      	bcc.n	8017f54 <L_shift+0xc>
 8017f6a:	bd70      	pop	{r4, r5, r6, pc}

08017f6c <__match>:
 8017f6c:	b530      	push	{r4, r5, lr}
 8017f6e:	6803      	ldr	r3, [r0, #0]
 8017f70:	780c      	ldrb	r4, [r1, #0]
 8017f72:	3301      	adds	r3, #1
 8017f74:	2c00      	cmp	r4, #0
 8017f76:	d102      	bne.n	8017f7e <__match+0x12>
 8017f78:	6003      	str	r3, [r0, #0]
 8017f7a:	2001      	movs	r0, #1
 8017f7c:	bd30      	pop	{r4, r5, pc}
 8017f7e:	781a      	ldrb	r2, [r3, #0]
 8017f80:	0015      	movs	r5, r2
 8017f82:	3d41      	subs	r5, #65	; 0x41
 8017f84:	2d19      	cmp	r5, #25
 8017f86:	d800      	bhi.n	8017f8a <__match+0x1e>
 8017f88:	3220      	adds	r2, #32
 8017f8a:	3101      	adds	r1, #1
 8017f8c:	42a2      	cmp	r2, r4
 8017f8e:	d0ef      	beq.n	8017f70 <__match+0x4>
 8017f90:	2000      	movs	r0, #0
 8017f92:	e7f3      	b.n	8017f7c <__match+0x10>

08017f94 <__hexnan>:
 8017f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f96:	b08b      	sub	sp, #44	; 0x2c
 8017f98:	9201      	str	r2, [sp, #4]
 8017f9a:	680a      	ldr	r2, [r1, #0]
 8017f9c:	9901      	ldr	r1, [sp, #4]
 8017f9e:	1153      	asrs	r3, r2, #5
 8017fa0:	009b      	lsls	r3, r3, #2
 8017fa2:	18cb      	adds	r3, r1, r3
 8017fa4:	9304      	str	r3, [sp, #16]
 8017fa6:	231f      	movs	r3, #31
 8017fa8:	401a      	ands	r2, r3
 8017faa:	9008      	str	r0, [sp, #32]
 8017fac:	9206      	str	r2, [sp, #24]
 8017fae:	d002      	beq.n	8017fb6 <__hexnan+0x22>
 8017fb0:	9b04      	ldr	r3, [sp, #16]
 8017fb2:	3304      	adds	r3, #4
 8017fb4:	9304      	str	r3, [sp, #16]
 8017fb6:	9b04      	ldr	r3, [sp, #16]
 8017fb8:	2500      	movs	r5, #0
 8017fba:	1f1e      	subs	r6, r3, #4
 8017fbc:	0037      	movs	r7, r6
 8017fbe:	0034      	movs	r4, r6
 8017fc0:	9b08      	ldr	r3, [sp, #32]
 8017fc2:	6035      	str	r5, [r6, #0]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	9507      	str	r5, [sp, #28]
 8017fc8:	9305      	str	r3, [sp, #20]
 8017fca:	9502      	str	r5, [sp, #8]
 8017fcc:	9b05      	ldr	r3, [sp, #20]
 8017fce:	3301      	adds	r3, #1
 8017fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8017fd2:	9b05      	ldr	r3, [sp, #20]
 8017fd4:	785b      	ldrb	r3, [r3, #1]
 8017fd6:	9303      	str	r3, [sp, #12]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d028      	beq.n	801802e <__hexnan+0x9a>
 8017fdc:	9803      	ldr	r0, [sp, #12]
 8017fde:	f7ff fd73 	bl	8017ac8 <__hexdig_fun>
 8017fe2:	2800      	cmp	r0, #0
 8017fe4:	d145      	bne.n	8018072 <__hexnan+0xde>
 8017fe6:	9b03      	ldr	r3, [sp, #12]
 8017fe8:	2b20      	cmp	r3, #32
 8017fea:	d819      	bhi.n	8018020 <__hexnan+0x8c>
 8017fec:	9b02      	ldr	r3, [sp, #8]
 8017fee:	9a07      	ldr	r2, [sp, #28]
 8017ff0:	4293      	cmp	r3, r2
 8017ff2:	dd12      	ble.n	801801a <__hexnan+0x86>
 8017ff4:	42bc      	cmp	r4, r7
 8017ff6:	d206      	bcs.n	8018006 <__hexnan+0x72>
 8017ff8:	2d07      	cmp	r5, #7
 8017ffa:	dc04      	bgt.n	8018006 <__hexnan+0x72>
 8017ffc:	002a      	movs	r2, r5
 8017ffe:	0039      	movs	r1, r7
 8018000:	0020      	movs	r0, r4
 8018002:	f7ff ffa1 	bl	8017f48 <L_shift>
 8018006:	9b01      	ldr	r3, [sp, #4]
 8018008:	2508      	movs	r5, #8
 801800a:	429c      	cmp	r4, r3
 801800c:	d905      	bls.n	801801a <__hexnan+0x86>
 801800e:	1f27      	subs	r7, r4, #4
 8018010:	2500      	movs	r5, #0
 8018012:	003c      	movs	r4, r7
 8018014:	9b02      	ldr	r3, [sp, #8]
 8018016:	603d      	str	r5, [r7, #0]
 8018018:	9307      	str	r3, [sp, #28]
 801801a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801801c:	9305      	str	r3, [sp, #20]
 801801e:	e7d5      	b.n	8017fcc <__hexnan+0x38>
 8018020:	9b03      	ldr	r3, [sp, #12]
 8018022:	2b29      	cmp	r3, #41	; 0x29
 8018024:	d14a      	bne.n	80180bc <__hexnan+0x128>
 8018026:	9b05      	ldr	r3, [sp, #20]
 8018028:	9a08      	ldr	r2, [sp, #32]
 801802a:	3302      	adds	r3, #2
 801802c:	6013      	str	r3, [r2, #0]
 801802e:	9b02      	ldr	r3, [sp, #8]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d043      	beq.n	80180bc <__hexnan+0x128>
 8018034:	42bc      	cmp	r4, r7
 8018036:	d206      	bcs.n	8018046 <__hexnan+0xb2>
 8018038:	2d07      	cmp	r5, #7
 801803a:	dc04      	bgt.n	8018046 <__hexnan+0xb2>
 801803c:	002a      	movs	r2, r5
 801803e:	0039      	movs	r1, r7
 8018040:	0020      	movs	r0, r4
 8018042:	f7ff ff81 	bl	8017f48 <L_shift>
 8018046:	9b01      	ldr	r3, [sp, #4]
 8018048:	429c      	cmp	r4, r3
 801804a:	d926      	bls.n	801809a <__hexnan+0x106>
 801804c:	cc04      	ldmia	r4!, {r2}
 801804e:	601a      	str	r2, [r3, #0]
 8018050:	3304      	adds	r3, #4
 8018052:	42a6      	cmp	r6, r4
 8018054:	d2fa      	bcs.n	801804c <__hexnan+0xb8>
 8018056:	2200      	movs	r2, #0
 8018058:	c304      	stmia	r3!, {r2}
 801805a:	429e      	cmp	r6, r3
 801805c:	d2fc      	bcs.n	8018058 <__hexnan+0xc4>
 801805e:	6833      	ldr	r3, [r6, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d104      	bne.n	801806e <__hexnan+0xda>
 8018064:	9b01      	ldr	r3, [sp, #4]
 8018066:	429e      	cmp	r6, r3
 8018068:	d126      	bne.n	80180b8 <__hexnan+0x124>
 801806a:	2301      	movs	r3, #1
 801806c:	6033      	str	r3, [r6, #0]
 801806e:	2005      	movs	r0, #5
 8018070:	e025      	b.n	80180be <__hexnan+0x12a>
 8018072:	9b02      	ldr	r3, [sp, #8]
 8018074:	3501      	adds	r5, #1
 8018076:	3301      	adds	r3, #1
 8018078:	9302      	str	r3, [sp, #8]
 801807a:	2d08      	cmp	r5, #8
 801807c:	dd06      	ble.n	801808c <__hexnan+0xf8>
 801807e:	9b01      	ldr	r3, [sp, #4]
 8018080:	429c      	cmp	r4, r3
 8018082:	d9ca      	bls.n	801801a <__hexnan+0x86>
 8018084:	2300      	movs	r3, #0
 8018086:	2501      	movs	r5, #1
 8018088:	3c04      	subs	r4, #4
 801808a:	6023      	str	r3, [r4, #0]
 801808c:	220f      	movs	r2, #15
 801808e:	6823      	ldr	r3, [r4, #0]
 8018090:	4010      	ands	r0, r2
 8018092:	011b      	lsls	r3, r3, #4
 8018094:	4318      	orrs	r0, r3
 8018096:	6020      	str	r0, [r4, #0]
 8018098:	e7bf      	b.n	801801a <__hexnan+0x86>
 801809a:	9b06      	ldr	r3, [sp, #24]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d0de      	beq.n	801805e <__hexnan+0xca>
 80180a0:	2120      	movs	r1, #32
 80180a2:	9a06      	ldr	r2, [sp, #24]
 80180a4:	9b04      	ldr	r3, [sp, #16]
 80180a6:	1a89      	subs	r1, r1, r2
 80180a8:	2201      	movs	r2, #1
 80180aa:	4252      	negs	r2, r2
 80180ac:	40ca      	lsrs	r2, r1
 80180ae:	3b04      	subs	r3, #4
 80180b0:	6819      	ldr	r1, [r3, #0]
 80180b2:	400a      	ands	r2, r1
 80180b4:	601a      	str	r2, [r3, #0]
 80180b6:	e7d2      	b.n	801805e <__hexnan+0xca>
 80180b8:	3e04      	subs	r6, #4
 80180ba:	e7d0      	b.n	801805e <__hexnan+0xca>
 80180bc:	2004      	movs	r0, #4
 80180be:	b00b      	add	sp, #44	; 0x2c
 80180c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080180c2 <__localeconv_l>:
 80180c2:	30f0      	adds	r0, #240	; 0xf0
 80180c4:	4770      	bx	lr
	...

080180c8 <_localeconv_r>:
 80180c8:	4b03      	ldr	r3, [pc, #12]	; (80180d8 <_localeconv_r+0x10>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80180ce:	2800      	cmp	r0, #0
 80180d0:	d100      	bne.n	80180d4 <_localeconv_r+0xc>
 80180d2:	4802      	ldr	r0, [pc, #8]	; (80180dc <_localeconv_r+0x14>)
 80180d4:	30f0      	adds	r0, #240	; 0xf0
 80180d6:	4770      	bx	lr
 80180d8:	20000138 	.word	0x20000138
 80180dc:	20000568 	.word	0x20000568

080180e0 <__retarget_lock_acquire_recursive>:
 80180e0:	4770      	bx	lr

080180e2 <__retarget_lock_release_recursive>:
 80180e2:	4770      	bx	lr

080180e4 <memchr>:
 80180e4:	b2c9      	uxtb	r1, r1
 80180e6:	1882      	adds	r2, r0, r2
 80180e8:	4290      	cmp	r0, r2
 80180ea:	d101      	bne.n	80180f0 <memchr+0xc>
 80180ec:	2000      	movs	r0, #0
 80180ee:	4770      	bx	lr
 80180f0:	7803      	ldrb	r3, [r0, #0]
 80180f2:	428b      	cmp	r3, r1
 80180f4:	d0fb      	beq.n	80180ee <memchr+0xa>
 80180f6:	3001      	adds	r0, #1
 80180f8:	e7f6      	b.n	80180e8 <memchr+0x4>

080180fa <memmove>:
 80180fa:	b510      	push	{r4, lr}
 80180fc:	4288      	cmp	r0, r1
 80180fe:	d902      	bls.n	8018106 <memmove+0xc>
 8018100:	188b      	adds	r3, r1, r2
 8018102:	4298      	cmp	r0, r3
 8018104:	d303      	bcc.n	801810e <memmove+0x14>
 8018106:	2300      	movs	r3, #0
 8018108:	e007      	b.n	801811a <memmove+0x20>
 801810a:	5c8b      	ldrb	r3, [r1, r2]
 801810c:	5483      	strb	r3, [r0, r2]
 801810e:	3a01      	subs	r2, #1
 8018110:	d2fb      	bcs.n	801810a <memmove+0x10>
 8018112:	bd10      	pop	{r4, pc}
 8018114:	5ccc      	ldrb	r4, [r1, r3]
 8018116:	54c4      	strb	r4, [r0, r3]
 8018118:	3301      	adds	r3, #1
 801811a:	429a      	cmp	r2, r3
 801811c:	d1fa      	bne.n	8018114 <memmove+0x1a>
 801811e:	e7f8      	b.n	8018112 <memmove+0x18>

08018120 <_Balloc>:
 8018120:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018122:	b570      	push	{r4, r5, r6, lr}
 8018124:	0004      	movs	r4, r0
 8018126:	000d      	movs	r5, r1
 8018128:	2b00      	cmp	r3, #0
 801812a:	d012      	beq.n	8018152 <_Balloc+0x32>
 801812c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801812e:	00ab      	lsls	r3, r5, #2
 8018130:	18d3      	adds	r3, r2, r3
 8018132:	6818      	ldr	r0, [r3, #0]
 8018134:	2800      	cmp	r0, #0
 8018136:	d115      	bne.n	8018164 <_Balloc+0x44>
 8018138:	2101      	movs	r1, #1
 801813a:	000e      	movs	r6, r1
 801813c:	40ae      	lsls	r6, r5
 801813e:	1d72      	adds	r2, r6, #5
 8018140:	0092      	lsls	r2, r2, #2
 8018142:	0020      	movs	r0, r4
 8018144:	f000 fcbe 	bl	8018ac4 <_calloc_r>
 8018148:	2800      	cmp	r0, #0
 801814a:	d009      	beq.n	8018160 <_Balloc+0x40>
 801814c:	6045      	str	r5, [r0, #4]
 801814e:	6086      	str	r6, [r0, #8]
 8018150:	e00a      	b.n	8018168 <_Balloc+0x48>
 8018152:	2221      	movs	r2, #33	; 0x21
 8018154:	2104      	movs	r1, #4
 8018156:	f000 fcb5 	bl	8018ac4 <_calloc_r>
 801815a:	64e0      	str	r0, [r4, #76]	; 0x4c
 801815c:	2800      	cmp	r0, #0
 801815e:	d1e5      	bne.n	801812c <_Balloc+0xc>
 8018160:	2000      	movs	r0, #0
 8018162:	bd70      	pop	{r4, r5, r6, pc}
 8018164:	6802      	ldr	r2, [r0, #0]
 8018166:	601a      	str	r2, [r3, #0]
 8018168:	2300      	movs	r3, #0
 801816a:	6103      	str	r3, [r0, #16]
 801816c:	60c3      	str	r3, [r0, #12]
 801816e:	e7f8      	b.n	8018162 <_Balloc+0x42>

08018170 <_Bfree>:
 8018170:	2900      	cmp	r1, #0
 8018172:	d006      	beq.n	8018182 <_Bfree+0x12>
 8018174:	684b      	ldr	r3, [r1, #4]
 8018176:	009a      	lsls	r2, r3, #2
 8018178:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801817a:	189b      	adds	r3, r3, r2
 801817c:	681a      	ldr	r2, [r3, #0]
 801817e:	600a      	str	r2, [r1, #0]
 8018180:	6019      	str	r1, [r3, #0]
 8018182:	4770      	bx	lr

08018184 <__multadd>:
 8018184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018186:	001e      	movs	r6, r3
 8018188:	2314      	movs	r3, #20
 801818a:	469c      	mov	ip, r3
 801818c:	0007      	movs	r7, r0
 801818e:	000c      	movs	r4, r1
 8018190:	2000      	movs	r0, #0
 8018192:	690d      	ldr	r5, [r1, #16]
 8018194:	448c      	add	ip, r1
 8018196:	4663      	mov	r3, ip
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	3001      	adds	r0, #1
 801819c:	b299      	uxth	r1, r3
 801819e:	4663      	mov	r3, ip
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	4351      	muls	r1, r2
 80181a4:	0c1b      	lsrs	r3, r3, #16
 80181a6:	4353      	muls	r3, r2
 80181a8:	1989      	adds	r1, r1, r6
 80181aa:	0c0e      	lsrs	r6, r1, #16
 80181ac:	199b      	adds	r3, r3, r6
 80181ae:	b289      	uxth	r1, r1
 80181b0:	0c1e      	lsrs	r6, r3, #16
 80181b2:	041b      	lsls	r3, r3, #16
 80181b4:	185b      	adds	r3, r3, r1
 80181b6:	4661      	mov	r1, ip
 80181b8:	c108      	stmia	r1!, {r3}
 80181ba:	468c      	mov	ip, r1
 80181bc:	4285      	cmp	r5, r0
 80181be:	dcea      	bgt.n	8018196 <__multadd+0x12>
 80181c0:	2e00      	cmp	r6, #0
 80181c2:	d01b      	beq.n	80181fc <__multadd+0x78>
 80181c4:	68a3      	ldr	r3, [r4, #8]
 80181c6:	42ab      	cmp	r3, r5
 80181c8:	dc12      	bgt.n	80181f0 <__multadd+0x6c>
 80181ca:	6863      	ldr	r3, [r4, #4]
 80181cc:	0038      	movs	r0, r7
 80181ce:	1c59      	adds	r1, r3, #1
 80181d0:	f7ff ffa6 	bl	8018120 <_Balloc>
 80181d4:	0021      	movs	r1, r4
 80181d6:	6923      	ldr	r3, [r4, #16]
 80181d8:	9001      	str	r0, [sp, #4]
 80181da:	1c9a      	adds	r2, r3, #2
 80181dc:	0092      	lsls	r2, r2, #2
 80181de:	310c      	adds	r1, #12
 80181e0:	300c      	adds	r0, #12
 80181e2:	f7fc f884 	bl	80142ee <memcpy>
 80181e6:	0021      	movs	r1, r4
 80181e8:	0038      	movs	r0, r7
 80181ea:	f7ff ffc1 	bl	8018170 <_Bfree>
 80181ee:	9c01      	ldr	r4, [sp, #4]
 80181f0:	1d2b      	adds	r3, r5, #4
 80181f2:	009b      	lsls	r3, r3, #2
 80181f4:	18e3      	adds	r3, r4, r3
 80181f6:	3501      	adds	r5, #1
 80181f8:	605e      	str	r6, [r3, #4]
 80181fa:	6125      	str	r5, [r4, #16]
 80181fc:	0020      	movs	r0, r4
 80181fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08018200 <__s2b>:
 8018200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018202:	0006      	movs	r6, r0
 8018204:	0018      	movs	r0, r3
 8018206:	000c      	movs	r4, r1
 8018208:	3008      	adds	r0, #8
 801820a:	2109      	movs	r1, #9
 801820c:	9301      	str	r3, [sp, #4]
 801820e:	0015      	movs	r5, r2
 8018210:	f7e8 f828 	bl	8000264 <__divsi3>
 8018214:	2301      	movs	r3, #1
 8018216:	2100      	movs	r1, #0
 8018218:	4283      	cmp	r3, r0
 801821a:	db1f      	blt.n	801825c <__s2b+0x5c>
 801821c:	0030      	movs	r0, r6
 801821e:	f7ff ff7f 	bl	8018120 <_Balloc>
 8018222:	9b08      	ldr	r3, [sp, #32]
 8018224:	6143      	str	r3, [r0, #20]
 8018226:	2301      	movs	r3, #1
 8018228:	6103      	str	r3, [r0, #16]
 801822a:	2d09      	cmp	r5, #9
 801822c:	dd19      	ble.n	8018262 <__s2b+0x62>
 801822e:	0023      	movs	r3, r4
 8018230:	3309      	adds	r3, #9
 8018232:	001f      	movs	r7, r3
 8018234:	9300      	str	r3, [sp, #0]
 8018236:	1964      	adds	r4, r4, r5
 8018238:	783b      	ldrb	r3, [r7, #0]
 801823a:	0001      	movs	r1, r0
 801823c:	3b30      	subs	r3, #48	; 0x30
 801823e:	220a      	movs	r2, #10
 8018240:	0030      	movs	r0, r6
 8018242:	3701      	adds	r7, #1
 8018244:	f7ff ff9e 	bl	8018184 <__multadd>
 8018248:	42a7      	cmp	r7, r4
 801824a:	d1f5      	bne.n	8018238 <__s2b+0x38>
 801824c:	9b00      	ldr	r3, [sp, #0]
 801824e:	195c      	adds	r4, r3, r5
 8018250:	3c08      	subs	r4, #8
 8018252:	002f      	movs	r7, r5
 8018254:	9b01      	ldr	r3, [sp, #4]
 8018256:	429f      	cmp	r7, r3
 8018258:	db06      	blt.n	8018268 <__s2b+0x68>
 801825a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801825c:	005b      	lsls	r3, r3, #1
 801825e:	3101      	adds	r1, #1
 8018260:	e7da      	b.n	8018218 <__s2b+0x18>
 8018262:	340a      	adds	r4, #10
 8018264:	2509      	movs	r5, #9
 8018266:	e7f4      	b.n	8018252 <__s2b+0x52>
 8018268:	1b63      	subs	r3, r4, r5
 801826a:	5ddb      	ldrb	r3, [r3, r7]
 801826c:	0001      	movs	r1, r0
 801826e:	3b30      	subs	r3, #48	; 0x30
 8018270:	220a      	movs	r2, #10
 8018272:	0030      	movs	r0, r6
 8018274:	f7ff ff86 	bl	8018184 <__multadd>
 8018278:	3701      	adds	r7, #1
 801827a:	e7eb      	b.n	8018254 <__s2b+0x54>

0801827c <__hi0bits>:
 801827c:	0003      	movs	r3, r0
 801827e:	0c02      	lsrs	r2, r0, #16
 8018280:	2000      	movs	r0, #0
 8018282:	4282      	cmp	r2, r0
 8018284:	d101      	bne.n	801828a <__hi0bits+0xe>
 8018286:	041b      	lsls	r3, r3, #16
 8018288:	3010      	adds	r0, #16
 801828a:	0e1a      	lsrs	r2, r3, #24
 801828c:	d101      	bne.n	8018292 <__hi0bits+0x16>
 801828e:	3008      	adds	r0, #8
 8018290:	021b      	lsls	r3, r3, #8
 8018292:	0f1a      	lsrs	r2, r3, #28
 8018294:	d101      	bne.n	801829a <__hi0bits+0x1e>
 8018296:	3004      	adds	r0, #4
 8018298:	011b      	lsls	r3, r3, #4
 801829a:	0f9a      	lsrs	r2, r3, #30
 801829c:	d101      	bne.n	80182a2 <__hi0bits+0x26>
 801829e:	3002      	adds	r0, #2
 80182a0:	009b      	lsls	r3, r3, #2
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	db03      	blt.n	80182ae <__hi0bits+0x32>
 80182a6:	3001      	adds	r0, #1
 80182a8:	005b      	lsls	r3, r3, #1
 80182aa:	d400      	bmi.n	80182ae <__hi0bits+0x32>
 80182ac:	2020      	movs	r0, #32
 80182ae:	4770      	bx	lr

080182b0 <__lo0bits>:
 80182b0:	2207      	movs	r2, #7
 80182b2:	6803      	ldr	r3, [r0, #0]
 80182b4:	b510      	push	{r4, lr}
 80182b6:	0001      	movs	r1, r0
 80182b8:	401a      	ands	r2, r3
 80182ba:	d00d      	beq.n	80182d8 <__lo0bits+0x28>
 80182bc:	2401      	movs	r4, #1
 80182be:	2000      	movs	r0, #0
 80182c0:	4223      	tst	r3, r4
 80182c2:	d105      	bne.n	80182d0 <__lo0bits+0x20>
 80182c4:	3002      	adds	r0, #2
 80182c6:	4203      	tst	r3, r0
 80182c8:	d003      	beq.n	80182d2 <__lo0bits+0x22>
 80182ca:	40e3      	lsrs	r3, r4
 80182cc:	0020      	movs	r0, r4
 80182ce:	600b      	str	r3, [r1, #0]
 80182d0:	bd10      	pop	{r4, pc}
 80182d2:	089b      	lsrs	r3, r3, #2
 80182d4:	600b      	str	r3, [r1, #0]
 80182d6:	e7fb      	b.n	80182d0 <__lo0bits+0x20>
 80182d8:	b29c      	uxth	r4, r3
 80182da:	0010      	movs	r0, r2
 80182dc:	2c00      	cmp	r4, #0
 80182de:	d101      	bne.n	80182e4 <__lo0bits+0x34>
 80182e0:	2010      	movs	r0, #16
 80182e2:	0c1b      	lsrs	r3, r3, #16
 80182e4:	b2da      	uxtb	r2, r3
 80182e6:	2a00      	cmp	r2, #0
 80182e8:	d101      	bne.n	80182ee <__lo0bits+0x3e>
 80182ea:	3008      	adds	r0, #8
 80182ec:	0a1b      	lsrs	r3, r3, #8
 80182ee:	071a      	lsls	r2, r3, #28
 80182f0:	d101      	bne.n	80182f6 <__lo0bits+0x46>
 80182f2:	3004      	adds	r0, #4
 80182f4:	091b      	lsrs	r3, r3, #4
 80182f6:	079a      	lsls	r2, r3, #30
 80182f8:	d101      	bne.n	80182fe <__lo0bits+0x4e>
 80182fa:	3002      	adds	r0, #2
 80182fc:	089b      	lsrs	r3, r3, #2
 80182fe:	07da      	lsls	r2, r3, #31
 8018300:	d4e8      	bmi.n	80182d4 <__lo0bits+0x24>
 8018302:	085b      	lsrs	r3, r3, #1
 8018304:	d001      	beq.n	801830a <__lo0bits+0x5a>
 8018306:	3001      	adds	r0, #1
 8018308:	e7e4      	b.n	80182d4 <__lo0bits+0x24>
 801830a:	2020      	movs	r0, #32
 801830c:	e7e0      	b.n	80182d0 <__lo0bits+0x20>

0801830e <__i2b>:
 801830e:	b510      	push	{r4, lr}
 8018310:	000c      	movs	r4, r1
 8018312:	2101      	movs	r1, #1
 8018314:	f7ff ff04 	bl	8018120 <_Balloc>
 8018318:	2301      	movs	r3, #1
 801831a:	6144      	str	r4, [r0, #20]
 801831c:	6103      	str	r3, [r0, #16]
 801831e:	bd10      	pop	{r4, pc}

08018320 <__multiply>:
 8018320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018322:	690b      	ldr	r3, [r1, #16]
 8018324:	0014      	movs	r4, r2
 8018326:	6912      	ldr	r2, [r2, #16]
 8018328:	b089      	sub	sp, #36	; 0x24
 801832a:	000d      	movs	r5, r1
 801832c:	4293      	cmp	r3, r2
 801832e:	da01      	bge.n	8018334 <__multiply+0x14>
 8018330:	0025      	movs	r5, r4
 8018332:	000c      	movs	r4, r1
 8018334:	692f      	ldr	r7, [r5, #16]
 8018336:	6926      	ldr	r6, [r4, #16]
 8018338:	6869      	ldr	r1, [r5, #4]
 801833a:	19bb      	adds	r3, r7, r6
 801833c:	9302      	str	r3, [sp, #8]
 801833e:	68ab      	ldr	r3, [r5, #8]
 8018340:	19ba      	adds	r2, r7, r6
 8018342:	4293      	cmp	r3, r2
 8018344:	da00      	bge.n	8018348 <__multiply+0x28>
 8018346:	3101      	adds	r1, #1
 8018348:	f7ff feea 	bl	8018120 <_Balloc>
 801834c:	0002      	movs	r2, r0
 801834e:	19bb      	adds	r3, r7, r6
 8018350:	3214      	adds	r2, #20
 8018352:	009b      	lsls	r3, r3, #2
 8018354:	18d3      	adds	r3, r2, r3
 8018356:	469c      	mov	ip, r3
 8018358:	2100      	movs	r1, #0
 801835a:	0013      	movs	r3, r2
 801835c:	9004      	str	r0, [sp, #16]
 801835e:	4563      	cmp	r3, ip
 8018360:	d31d      	bcc.n	801839e <__multiply+0x7e>
 8018362:	3514      	adds	r5, #20
 8018364:	00bf      	lsls	r7, r7, #2
 8018366:	19eb      	adds	r3, r5, r7
 8018368:	3414      	adds	r4, #20
 801836a:	00b6      	lsls	r6, r6, #2
 801836c:	9305      	str	r3, [sp, #20]
 801836e:	19a3      	adds	r3, r4, r6
 8018370:	9503      	str	r5, [sp, #12]
 8018372:	9401      	str	r4, [sp, #4]
 8018374:	9307      	str	r3, [sp, #28]
 8018376:	9b07      	ldr	r3, [sp, #28]
 8018378:	9901      	ldr	r1, [sp, #4]
 801837a:	4299      	cmp	r1, r3
 801837c:	d311      	bcc.n	80183a2 <__multiply+0x82>
 801837e:	9b02      	ldr	r3, [sp, #8]
 8018380:	2b00      	cmp	r3, #0
 8018382:	dd06      	ble.n	8018392 <__multiply+0x72>
 8018384:	2304      	movs	r3, #4
 8018386:	425b      	negs	r3, r3
 8018388:	449c      	add	ip, r3
 801838a:	4663      	mov	r3, ip
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d051      	beq.n	8018436 <__multiply+0x116>
 8018392:	9b04      	ldr	r3, [sp, #16]
 8018394:	9a02      	ldr	r2, [sp, #8]
 8018396:	0018      	movs	r0, r3
 8018398:	611a      	str	r2, [r3, #16]
 801839a:	b009      	add	sp, #36	; 0x24
 801839c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801839e:	c302      	stmia	r3!, {r1}
 80183a0:	e7dd      	b.n	801835e <__multiply+0x3e>
 80183a2:	9b01      	ldr	r3, [sp, #4]
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	b298      	uxth	r0, r3
 80183a8:	2800      	cmp	r0, #0
 80183aa:	d01c      	beq.n	80183e6 <__multiply+0xc6>
 80183ac:	0015      	movs	r5, r2
 80183ae:	2600      	movs	r6, #0
 80183b0:	9f03      	ldr	r7, [sp, #12]
 80183b2:	cf02      	ldmia	r7!, {r1}
 80183b4:	682c      	ldr	r4, [r5, #0]
 80183b6:	b28b      	uxth	r3, r1
 80183b8:	4343      	muls	r3, r0
 80183ba:	0c09      	lsrs	r1, r1, #16
 80183bc:	4341      	muls	r1, r0
 80183be:	b2a4      	uxth	r4, r4
 80183c0:	191b      	adds	r3, r3, r4
 80183c2:	199b      	adds	r3, r3, r6
 80183c4:	000e      	movs	r6, r1
 80183c6:	6829      	ldr	r1, [r5, #0]
 80183c8:	9506      	str	r5, [sp, #24]
 80183ca:	0c09      	lsrs	r1, r1, #16
 80183cc:	1871      	adds	r1, r6, r1
 80183ce:	0c1e      	lsrs	r6, r3, #16
 80183d0:	1989      	adds	r1, r1, r6
 80183d2:	0c0e      	lsrs	r6, r1, #16
 80183d4:	b29b      	uxth	r3, r3
 80183d6:	0409      	lsls	r1, r1, #16
 80183d8:	430b      	orrs	r3, r1
 80183da:	c508      	stmia	r5!, {r3}
 80183dc:	9b05      	ldr	r3, [sp, #20]
 80183de:	42bb      	cmp	r3, r7
 80183e0:	d8e7      	bhi.n	80183b2 <__multiply+0x92>
 80183e2:	9b06      	ldr	r3, [sp, #24]
 80183e4:	605e      	str	r6, [r3, #4]
 80183e6:	9b01      	ldr	r3, [sp, #4]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	0c1d      	lsrs	r5, r3, #16
 80183ec:	d01e      	beq.n	801842c <__multiply+0x10c>
 80183ee:	0010      	movs	r0, r2
 80183f0:	2700      	movs	r7, #0
 80183f2:	6813      	ldr	r3, [r2, #0]
 80183f4:	9e03      	ldr	r6, [sp, #12]
 80183f6:	6831      	ldr	r1, [r6, #0]
 80183f8:	6804      	ldr	r4, [r0, #0]
 80183fa:	b289      	uxth	r1, r1
 80183fc:	4369      	muls	r1, r5
 80183fe:	0c24      	lsrs	r4, r4, #16
 8018400:	1909      	adds	r1, r1, r4
 8018402:	19c9      	adds	r1, r1, r7
 8018404:	040f      	lsls	r7, r1, #16
 8018406:	b29b      	uxth	r3, r3
 8018408:	433b      	orrs	r3, r7
 801840a:	6003      	str	r3, [r0, #0]
 801840c:	ce80      	ldmia	r6!, {r7}
 801840e:	6843      	ldr	r3, [r0, #4]
 8018410:	0c3f      	lsrs	r7, r7, #16
 8018412:	436f      	muls	r7, r5
 8018414:	b29b      	uxth	r3, r3
 8018416:	18fb      	adds	r3, r7, r3
 8018418:	0c09      	lsrs	r1, r1, #16
 801841a:	185b      	adds	r3, r3, r1
 801841c:	9905      	ldr	r1, [sp, #20]
 801841e:	9006      	str	r0, [sp, #24]
 8018420:	0c1f      	lsrs	r7, r3, #16
 8018422:	3004      	adds	r0, #4
 8018424:	42b1      	cmp	r1, r6
 8018426:	d8e6      	bhi.n	80183f6 <__multiply+0xd6>
 8018428:	9906      	ldr	r1, [sp, #24]
 801842a:	604b      	str	r3, [r1, #4]
 801842c:	9b01      	ldr	r3, [sp, #4]
 801842e:	3204      	adds	r2, #4
 8018430:	3304      	adds	r3, #4
 8018432:	9301      	str	r3, [sp, #4]
 8018434:	e79f      	b.n	8018376 <__multiply+0x56>
 8018436:	9b02      	ldr	r3, [sp, #8]
 8018438:	3b01      	subs	r3, #1
 801843a:	9302      	str	r3, [sp, #8]
 801843c:	e79f      	b.n	801837e <__multiply+0x5e>
	...

08018440 <__pow5mult>:
 8018440:	2303      	movs	r3, #3
 8018442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018444:	4013      	ands	r3, r2
 8018446:	0006      	movs	r6, r0
 8018448:	000f      	movs	r7, r1
 801844a:	0015      	movs	r5, r2
 801844c:	2b00      	cmp	r3, #0
 801844e:	d008      	beq.n	8018462 <__pow5mult+0x22>
 8018450:	491a      	ldr	r1, [pc, #104]	; (80184bc <__pow5mult+0x7c>)
 8018452:	3b01      	subs	r3, #1
 8018454:	009a      	lsls	r2, r3, #2
 8018456:	5852      	ldr	r2, [r2, r1]
 8018458:	2300      	movs	r3, #0
 801845a:	0039      	movs	r1, r7
 801845c:	f7ff fe92 	bl	8018184 <__multadd>
 8018460:	0007      	movs	r7, r0
 8018462:	10ad      	asrs	r5, r5, #2
 8018464:	d027      	beq.n	80184b6 <__pow5mult+0x76>
 8018466:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018468:	2c00      	cmp	r4, #0
 801846a:	d107      	bne.n	801847c <__pow5mult+0x3c>
 801846c:	4914      	ldr	r1, [pc, #80]	; (80184c0 <__pow5mult+0x80>)
 801846e:	0030      	movs	r0, r6
 8018470:	f7ff ff4d 	bl	801830e <__i2b>
 8018474:	2300      	movs	r3, #0
 8018476:	0004      	movs	r4, r0
 8018478:	64b0      	str	r0, [r6, #72]	; 0x48
 801847a:	6003      	str	r3, [r0, #0]
 801847c:	2301      	movs	r3, #1
 801847e:	421d      	tst	r5, r3
 8018480:	d00a      	beq.n	8018498 <__pow5mult+0x58>
 8018482:	0039      	movs	r1, r7
 8018484:	0022      	movs	r2, r4
 8018486:	0030      	movs	r0, r6
 8018488:	f7ff ff4a 	bl	8018320 <__multiply>
 801848c:	0039      	movs	r1, r7
 801848e:	9001      	str	r0, [sp, #4]
 8018490:	0030      	movs	r0, r6
 8018492:	f7ff fe6d 	bl	8018170 <_Bfree>
 8018496:	9f01      	ldr	r7, [sp, #4]
 8018498:	106d      	asrs	r5, r5, #1
 801849a:	d00c      	beq.n	80184b6 <__pow5mult+0x76>
 801849c:	6820      	ldr	r0, [r4, #0]
 801849e:	2800      	cmp	r0, #0
 80184a0:	d107      	bne.n	80184b2 <__pow5mult+0x72>
 80184a2:	0022      	movs	r2, r4
 80184a4:	0021      	movs	r1, r4
 80184a6:	0030      	movs	r0, r6
 80184a8:	f7ff ff3a 	bl	8018320 <__multiply>
 80184ac:	2300      	movs	r3, #0
 80184ae:	6020      	str	r0, [r4, #0]
 80184b0:	6003      	str	r3, [r0, #0]
 80184b2:	0004      	movs	r4, r0
 80184b4:	e7e2      	b.n	801847c <__pow5mult+0x3c>
 80184b6:	0038      	movs	r0, r7
 80184b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80184ba:	46c0      	nop			; (mov r8, r8)
 80184bc:	0801bd58 	.word	0x0801bd58
 80184c0:	00000271 	.word	0x00000271

080184c4 <__lshift>:
 80184c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184c6:	000d      	movs	r5, r1
 80184c8:	0017      	movs	r7, r2
 80184ca:	692b      	ldr	r3, [r5, #16]
 80184cc:	1154      	asrs	r4, r2, #5
 80184ce:	b085      	sub	sp, #20
 80184d0:	18e3      	adds	r3, r4, r3
 80184d2:	9301      	str	r3, [sp, #4]
 80184d4:	3301      	adds	r3, #1
 80184d6:	9300      	str	r3, [sp, #0]
 80184d8:	6849      	ldr	r1, [r1, #4]
 80184da:	68ab      	ldr	r3, [r5, #8]
 80184dc:	9002      	str	r0, [sp, #8]
 80184de:	9a00      	ldr	r2, [sp, #0]
 80184e0:	4293      	cmp	r3, r2
 80184e2:	db35      	blt.n	8018550 <__lshift+0x8c>
 80184e4:	9802      	ldr	r0, [sp, #8]
 80184e6:	f7ff fe1b 	bl	8018120 <_Balloc>
 80184ea:	2300      	movs	r3, #0
 80184ec:	0002      	movs	r2, r0
 80184ee:	0006      	movs	r6, r0
 80184f0:	0019      	movs	r1, r3
 80184f2:	3214      	adds	r2, #20
 80184f4:	42a3      	cmp	r3, r4
 80184f6:	db2e      	blt.n	8018556 <__lshift+0x92>
 80184f8:	43e3      	mvns	r3, r4
 80184fa:	17db      	asrs	r3, r3, #31
 80184fc:	401c      	ands	r4, r3
 80184fe:	002b      	movs	r3, r5
 8018500:	00a4      	lsls	r4, r4, #2
 8018502:	1914      	adds	r4, r2, r4
 8018504:	692a      	ldr	r2, [r5, #16]
 8018506:	3314      	adds	r3, #20
 8018508:	0092      	lsls	r2, r2, #2
 801850a:	189a      	adds	r2, r3, r2
 801850c:	4694      	mov	ip, r2
 801850e:	221f      	movs	r2, #31
 8018510:	4017      	ands	r7, r2
 8018512:	d024      	beq.n	801855e <__lshift+0x9a>
 8018514:	3201      	adds	r2, #1
 8018516:	1bd2      	subs	r2, r2, r7
 8018518:	9203      	str	r2, [sp, #12]
 801851a:	2200      	movs	r2, #0
 801851c:	6819      	ldr	r1, [r3, #0]
 801851e:	0020      	movs	r0, r4
 8018520:	40b9      	lsls	r1, r7
 8018522:	430a      	orrs	r2, r1
 8018524:	c404      	stmia	r4!, {r2}
 8018526:	cb04      	ldmia	r3!, {r2}
 8018528:	9903      	ldr	r1, [sp, #12]
 801852a:	40ca      	lsrs	r2, r1
 801852c:	459c      	cmp	ip, r3
 801852e:	d8f5      	bhi.n	801851c <__lshift+0x58>
 8018530:	6042      	str	r2, [r0, #4]
 8018532:	2a00      	cmp	r2, #0
 8018534:	d002      	beq.n	801853c <__lshift+0x78>
 8018536:	9b01      	ldr	r3, [sp, #4]
 8018538:	3302      	adds	r3, #2
 801853a:	9300      	str	r3, [sp, #0]
 801853c:	9b00      	ldr	r3, [sp, #0]
 801853e:	9802      	ldr	r0, [sp, #8]
 8018540:	3b01      	subs	r3, #1
 8018542:	6133      	str	r3, [r6, #16]
 8018544:	0029      	movs	r1, r5
 8018546:	f7ff fe13 	bl	8018170 <_Bfree>
 801854a:	0030      	movs	r0, r6
 801854c:	b005      	add	sp, #20
 801854e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018550:	3101      	adds	r1, #1
 8018552:	005b      	lsls	r3, r3, #1
 8018554:	e7c3      	b.n	80184de <__lshift+0x1a>
 8018556:	0098      	lsls	r0, r3, #2
 8018558:	5011      	str	r1, [r2, r0]
 801855a:	3301      	adds	r3, #1
 801855c:	e7ca      	b.n	80184f4 <__lshift+0x30>
 801855e:	cb04      	ldmia	r3!, {r2}
 8018560:	c404      	stmia	r4!, {r2}
 8018562:	459c      	cmp	ip, r3
 8018564:	d8fb      	bhi.n	801855e <__lshift+0x9a>
 8018566:	e7e9      	b.n	801853c <__lshift+0x78>

08018568 <__mcmp>:
 8018568:	690a      	ldr	r2, [r1, #16]
 801856a:	6903      	ldr	r3, [r0, #16]
 801856c:	b530      	push	{r4, r5, lr}
 801856e:	1a9b      	subs	r3, r3, r2
 8018570:	d10d      	bne.n	801858e <__mcmp+0x26>
 8018572:	0092      	lsls	r2, r2, #2
 8018574:	3014      	adds	r0, #20
 8018576:	3114      	adds	r1, #20
 8018578:	1884      	adds	r4, r0, r2
 801857a:	1889      	adds	r1, r1, r2
 801857c:	3c04      	subs	r4, #4
 801857e:	3904      	subs	r1, #4
 8018580:	6825      	ldr	r5, [r4, #0]
 8018582:	680a      	ldr	r2, [r1, #0]
 8018584:	4295      	cmp	r5, r2
 8018586:	d004      	beq.n	8018592 <__mcmp+0x2a>
 8018588:	2301      	movs	r3, #1
 801858a:	4295      	cmp	r5, r2
 801858c:	d304      	bcc.n	8018598 <__mcmp+0x30>
 801858e:	0018      	movs	r0, r3
 8018590:	bd30      	pop	{r4, r5, pc}
 8018592:	42a0      	cmp	r0, r4
 8018594:	d3f2      	bcc.n	801857c <__mcmp+0x14>
 8018596:	e7fa      	b.n	801858e <__mcmp+0x26>
 8018598:	425b      	negs	r3, r3
 801859a:	e7f8      	b.n	801858e <__mcmp+0x26>

0801859c <__mdiff>:
 801859c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801859e:	000d      	movs	r5, r1
 80185a0:	b085      	sub	sp, #20
 80185a2:	0007      	movs	r7, r0
 80185a4:	0011      	movs	r1, r2
 80185a6:	0028      	movs	r0, r5
 80185a8:	0014      	movs	r4, r2
 80185aa:	f7ff ffdd 	bl	8018568 <__mcmp>
 80185ae:	1e06      	subs	r6, r0, #0
 80185b0:	d108      	bne.n	80185c4 <__mdiff+0x28>
 80185b2:	0001      	movs	r1, r0
 80185b4:	0038      	movs	r0, r7
 80185b6:	f7ff fdb3 	bl	8018120 <_Balloc>
 80185ba:	2301      	movs	r3, #1
 80185bc:	6146      	str	r6, [r0, #20]
 80185be:	6103      	str	r3, [r0, #16]
 80185c0:	b005      	add	sp, #20
 80185c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185c4:	2301      	movs	r3, #1
 80185c6:	9301      	str	r3, [sp, #4]
 80185c8:	2800      	cmp	r0, #0
 80185ca:	db04      	blt.n	80185d6 <__mdiff+0x3a>
 80185cc:	0023      	movs	r3, r4
 80185ce:	002c      	movs	r4, r5
 80185d0:	001d      	movs	r5, r3
 80185d2:	2300      	movs	r3, #0
 80185d4:	9301      	str	r3, [sp, #4]
 80185d6:	6861      	ldr	r1, [r4, #4]
 80185d8:	0038      	movs	r0, r7
 80185da:	f7ff fda1 	bl	8018120 <_Balloc>
 80185de:	002f      	movs	r7, r5
 80185e0:	2200      	movs	r2, #0
 80185e2:	9b01      	ldr	r3, [sp, #4]
 80185e4:	6926      	ldr	r6, [r4, #16]
 80185e6:	60c3      	str	r3, [r0, #12]
 80185e8:	3414      	adds	r4, #20
 80185ea:	00b3      	lsls	r3, r6, #2
 80185ec:	18e3      	adds	r3, r4, r3
 80185ee:	9302      	str	r3, [sp, #8]
 80185f0:	692b      	ldr	r3, [r5, #16]
 80185f2:	3714      	adds	r7, #20
 80185f4:	009b      	lsls	r3, r3, #2
 80185f6:	18fb      	adds	r3, r7, r3
 80185f8:	9303      	str	r3, [sp, #12]
 80185fa:	0003      	movs	r3, r0
 80185fc:	4694      	mov	ip, r2
 80185fe:	3314      	adds	r3, #20
 8018600:	cc20      	ldmia	r4!, {r5}
 8018602:	cf04      	ldmia	r7!, {r2}
 8018604:	9201      	str	r2, [sp, #4]
 8018606:	b2aa      	uxth	r2, r5
 8018608:	4494      	add	ip, r2
 801860a:	466a      	mov	r2, sp
 801860c:	4661      	mov	r1, ip
 801860e:	8892      	ldrh	r2, [r2, #4]
 8018610:	0c2d      	lsrs	r5, r5, #16
 8018612:	1a8a      	subs	r2, r1, r2
 8018614:	9901      	ldr	r1, [sp, #4]
 8018616:	0c09      	lsrs	r1, r1, #16
 8018618:	1a69      	subs	r1, r5, r1
 801861a:	1415      	asrs	r5, r2, #16
 801861c:	1949      	adds	r1, r1, r5
 801861e:	140d      	asrs	r5, r1, #16
 8018620:	b292      	uxth	r2, r2
 8018622:	0409      	lsls	r1, r1, #16
 8018624:	430a      	orrs	r2, r1
 8018626:	601a      	str	r2, [r3, #0]
 8018628:	9a03      	ldr	r2, [sp, #12]
 801862a:	46ac      	mov	ip, r5
 801862c:	3304      	adds	r3, #4
 801862e:	42ba      	cmp	r2, r7
 8018630:	d8e6      	bhi.n	8018600 <__mdiff+0x64>
 8018632:	9902      	ldr	r1, [sp, #8]
 8018634:	001a      	movs	r2, r3
 8018636:	428c      	cmp	r4, r1
 8018638:	d305      	bcc.n	8018646 <__mdiff+0xaa>
 801863a:	3a04      	subs	r2, #4
 801863c:	6813      	ldr	r3, [r2, #0]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d00e      	beq.n	8018660 <__mdiff+0xc4>
 8018642:	6106      	str	r6, [r0, #16]
 8018644:	e7bc      	b.n	80185c0 <__mdiff+0x24>
 8018646:	cc04      	ldmia	r4!, {r2}
 8018648:	b291      	uxth	r1, r2
 801864a:	4461      	add	r1, ip
 801864c:	140d      	asrs	r5, r1, #16
 801864e:	0c12      	lsrs	r2, r2, #16
 8018650:	1952      	adds	r2, r2, r5
 8018652:	1415      	asrs	r5, r2, #16
 8018654:	b289      	uxth	r1, r1
 8018656:	0412      	lsls	r2, r2, #16
 8018658:	430a      	orrs	r2, r1
 801865a:	46ac      	mov	ip, r5
 801865c:	c304      	stmia	r3!, {r2}
 801865e:	e7e8      	b.n	8018632 <__mdiff+0x96>
 8018660:	3e01      	subs	r6, #1
 8018662:	e7ea      	b.n	801863a <__mdiff+0x9e>

08018664 <__ulp>:
 8018664:	000b      	movs	r3, r1
 8018666:	4910      	ldr	r1, [pc, #64]	; (80186a8 <__ulp+0x44>)
 8018668:	b510      	push	{r4, lr}
 801866a:	4019      	ands	r1, r3
 801866c:	4b0f      	ldr	r3, [pc, #60]	; (80186ac <__ulp+0x48>)
 801866e:	18c9      	adds	r1, r1, r3
 8018670:	2900      	cmp	r1, #0
 8018672:	dd04      	ble.n	801867e <__ulp+0x1a>
 8018674:	2200      	movs	r2, #0
 8018676:	000b      	movs	r3, r1
 8018678:	0010      	movs	r0, r2
 801867a:	0019      	movs	r1, r3
 801867c:	bd10      	pop	{r4, pc}
 801867e:	4249      	negs	r1, r1
 8018680:	1509      	asrs	r1, r1, #20
 8018682:	2200      	movs	r2, #0
 8018684:	2300      	movs	r3, #0
 8018686:	2913      	cmp	r1, #19
 8018688:	dc04      	bgt.n	8018694 <__ulp+0x30>
 801868a:	2080      	movs	r0, #128	; 0x80
 801868c:	0300      	lsls	r0, r0, #12
 801868e:	4108      	asrs	r0, r1
 8018690:	0003      	movs	r3, r0
 8018692:	e7f1      	b.n	8018678 <__ulp+0x14>
 8018694:	3914      	subs	r1, #20
 8018696:	2001      	movs	r0, #1
 8018698:	291e      	cmp	r1, #30
 801869a:	dc02      	bgt.n	80186a2 <__ulp+0x3e>
 801869c:	241f      	movs	r4, #31
 801869e:	1a61      	subs	r1, r4, r1
 80186a0:	4088      	lsls	r0, r1
 80186a2:	0002      	movs	r2, r0
 80186a4:	e7e8      	b.n	8018678 <__ulp+0x14>
 80186a6:	46c0      	nop			; (mov r8, r8)
 80186a8:	7ff00000 	.word	0x7ff00000
 80186ac:	fcc00000 	.word	0xfcc00000

080186b0 <__b2d>:
 80186b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80186b2:	0006      	movs	r6, r0
 80186b4:	6903      	ldr	r3, [r0, #16]
 80186b6:	3614      	adds	r6, #20
 80186b8:	009b      	lsls	r3, r3, #2
 80186ba:	18f3      	adds	r3, r6, r3
 80186bc:	1f1d      	subs	r5, r3, #4
 80186be:	682c      	ldr	r4, [r5, #0]
 80186c0:	000f      	movs	r7, r1
 80186c2:	0020      	movs	r0, r4
 80186c4:	9301      	str	r3, [sp, #4]
 80186c6:	f7ff fdd9 	bl	801827c <__hi0bits>
 80186ca:	2320      	movs	r3, #32
 80186cc:	1a1b      	subs	r3, r3, r0
 80186ce:	603b      	str	r3, [r7, #0]
 80186d0:	491c      	ldr	r1, [pc, #112]	; (8018744 <__b2d+0x94>)
 80186d2:	280a      	cmp	r0, #10
 80186d4:	dc16      	bgt.n	8018704 <__b2d+0x54>
 80186d6:	230b      	movs	r3, #11
 80186d8:	0027      	movs	r7, r4
 80186da:	1a1b      	subs	r3, r3, r0
 80186dc:	40df      	lsrs	r7, r3
 80186de:	4339      	orrs	r1, r7
 80186e0:	469c      	mov	ip, r3
 80186e2:	000b      	movs	r3, r1
 80186e4:	2100      	movs	r1, #0
 80186e6:	42ae      	cmp	r6, r5
 80186e8:	d202      	bcs.n	80186f0 <__b2d+0x40>
 80186ea:	9901      	ldr	r1, [sp, #4]
 80186ec:	3908      	subs	r1, #8
 80186ee:	6809      	ldr	r1, [r1, #0]
 80186f0:	3015      	adds	r0, #21
 80186f2:	4084      	lsls	r4, r0
 80186f4:	4660      	mov	r0, ip
 80186f6:	40c1      	lsrs	r1, r0
 80186f8:	430c      	orrs	r4, r1
 80186fa:	0022      	movs	r2, r4
 80186fc:	0010      	movs	r0, r2
 80186fe:	0019      	movs	r1, r3
 8018700:	b003      	add	sp, #12
 8018702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018704:	2700      	movs	r7, #0
 8018706:	42ae      	cmp	r6, r5
 8018708:	d202      	bcs.n	8018710 <__b2d+0x60>
 801870a:	9d01      	ldr	r5, [sp, #4]
 801870c:	3d08      	subs	r5, #8
 801870e:	682f      	ldr	r7, [r5, #0]
 8018710:	380b      	subs	r0, #11
 8018712:	4684      	mov	ip, r0
 8018714:	1e03      	subs	r3, r0, #0
 8018716:	d012      	beq.n	801873e <__b2d+0x8e>
 8018718:	409c      	lsls	r4, r3
 801871a:	2020      	movs	r0, #32
 801871c:	4321      	orrs	r1, r4
 801871e:	003c      	movs	r4, r7
 8018720:	1ac0      	subs	r0, r0, r3
 8018722:	40c4      	lsrs	r4, r0
 8018724:	4321      	orrs	r1, r4
 8018726:	000b      	movs	r3, r1
 8018728:	2100      	movs	r1, #0
 801872a:	42b5      	cmp	r5, r6
 801872c:	d901      	bls.n	8018732 <__b2d+0x82>
 801872e:	3d04      	subs	r5, #4
 8018730:	6829      	ldr	r1, [r5, #0]
 8018732:	4664      	mov	r4, ip
 8018734:	40c1      	lsrs	r1, r0
 8018736:	40a7      	lsls	r7, r4
 8018738:	430f      	orrs	r7, r1
 801873a:	003a      	movs	r2, r7
 801873c:	e7de      	b.n	80186fc <__b2d+0x4c>
 801873e:	4321      	orrs	r1, r4
 8018740:	000b      	movs	r3, r1
 8018742:	e7fa      	b.n	801873a <__b2d+0x8a>
 8018744:	3ff00000 	.word	0x3ff00000

08018748 <__d2b>:
 8018748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801874a:	001d      	movs	r5, r3
 801874c:	2101      	movs	r1, #1
 801874e:	0014      	movs	r4, r2
 8018750:	9f08      	ldr	r7, [sp, #32]
 8018752:	f7ff fce5 	bl	8018120 <_Balloc>
 8018756:	032b      	lsls	r3, r5, #12
 8018758:	006d      	lsls	r5, r5, #1
 801875a:	0006      	movs	r6, r0
 801875c:	0b1b      	lsrs	r3, r3, #12
 801875e:	0d6d      	lsrs	r5, r5, #21
 8018760:	d124      	bne.n	80187ac <__d2b+0x64>
 8018762:	9301      	str	r3, [sp, #4]
 8018764:	2c00      	cmp	r4, #0
 8018766:	d027      	beq.n	80187b8 <__d2b+0x70>
 8018768:	4668      	mov	r0, sp
 801876a:	9400      	str	r4, [sp, #0]
 801876c:	f7ff fda0 	bl	80182b0 <__lo0bits>
 8018770:	9c00      	ldr	r4, [sp, #0]
 8018772:	2800      	cmp	r0, #0
 8018774:	d01e      	beq.n	80187b4 <__d2b+0x6c>
 8018776:	9b01      	ldr	r3, [sp, #4]
 8018778:	2120      	movs	r1, #32
 801877a:	001a      	movs	r2, r3
 801877c:	1a09      	subs	r1, r1, r0
 801877e:	408a      	lsls	r2, r1
 8018780:	40c3      	lsrs	r3, r0
 8018782:	4322      	orrs	r2, r4
 8018784:	6172      	str	r2, [r6, #20]
 8018786:	9301      	str	r3, [sp, #4]
 8018788:	9c01      	ldr	r4, [sp, #4]
 801878a:	61b4      	str	r4, [r6, #24]
 801878c:	1e63      	subs	r3, r4, #1
 801878e:	419c      	sbcs	r4, r3
 8018790:	3401      	adds	r4, #1
 8018792:	6134      	str	r4, [r6, #16]
 8018794:	2d00      	cmp	r5, #0
 8018796:	d018      	beq.n	80187ca <__d2b+0x82>
 8018798:	4b12      	ldr	r3, [pc, #72]	; (80187e4 <__d2b+0x9c>)
 801879a:	18ed      	adds	r5, r5, r3
 801879c:	2335      	movs	r3, #53	; 0x35
 801879e:	182d      	adds	r5, r5, r0
 80187a0:	603d      	str	r5, [r7, #0]
 80187a2:	1a18      	subs	r0, r3, r0
 80187a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187a6:	6018      	str	r0, [r3, #0]
 80187a8:	0030      	movs	r0, r6
 80187aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80187ac:	2280      	movs	r2, #128	; 0x80
 80187ae:	0352      	lsls	r2, r2, #13
 80187b0:	4313      	orrs	r3, r2
 80187b2:	e7d6      	b.n	8018762 <__d2b+0x1a>
 80187b4:	6174      	str	r4, [r6, #20]
 80187b6:	e7e7      	b.n	8018788 <__d2b+0x40>
 80187b8:	a801      	add	r0, sp, #4
 80187ba:	f7ff fd79 	bl	80182b0 <__lo0bits>
 80187be:	2401      	movs	r4, #1
 80187c0:	9b01      	ldr	r3, [sp, #4]
 80187c2:	6134      	str	r4, [r6, #16]
 80187c4:	6173      	str	r3, [r6, #20]
 80187c6:	3020      	adds	r0, #32
 80187c8:	e7e4      	b.n	8018794 <__d2b+0x4c>
 80187ca:	4b07      	ldr	r3, [pc, #28]	; (80187e8 <__d2b+0xa0>)
 80187cc:	18c0      	adds	r0, r0, r3
 80187ce:	4b07      	ldr	r3, [pc, #28]	; (80187ec <__d2b+0xa4>)
 80187d0:	6038      	str	r0, [r7, #0]
 80187d2:	18e3      	adds	r3, r4, r3
 80187d4:	009b      	lsls	r3, r3, #2
 80187d6:	18f3      	adds	r3, r6, r3
 80187d8:	6958      	ldr	r0, [r3, #20]
 80187da:	f7ff fd4f 	bl	801827c <__hi0bits>
 80187de:	0164      	lsls	r4, r4, #5
 80187e0:	1a20      	subs	r0, r4, r0
 80187e2:	e7df      	b.n	80187a4 <__d2b+0x5c>
 80187e4:	fffffbcd 	.word	0xfffffbcd
 80187e8:	fffffbce 	.word	0xfffffbce
 80187ec:	3fffffff 	.word	0x3fffffff

080187f0 <__ratio>:
 80187f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187f2:	b085      	sub	sp, #20
 80187f4:	000f      	movs	r7, r1
 80187f6:	a902      	add	r1, sp, #8
 80187f8:	0006      	movs	r6, r0
 80187fa:	f7ff ff59 	bl	80186b0 <__b2d>
 80187fe:	0004      	movs	r4, r0
 8018800:	000d      	movs	r5, r1
 8018802:	0038      	movs	r0, r7
 8018804:	a903      	add	r1, sp, #12
 8018806:	9400      	str	r4, [sp, #0]
 8018808:	9501      	str	r5, [sp, #4]
 801880a:	f7ff ff51 	bl	80186b0 <__b2d>
 801880e:	6936      	ldr	r6, [r6, #16]
 8018810:	693f      	ldr	r7, [r7, #16]
 8018812:	0002      	movs	r2, r0
 8018814:	1bf7      	subs	r7, r6, r7
 8018816:	017e      	lsls	r6, r7, #5
 8018818:	46b4      	mov	ip, r6
 801881a:	9f03      	ldr	r7, [sp, #12]
 801881c:	9e02      	ldr	r6, [sp, #8]
 801881e:	000b      	movs	r3, r1
 8018820:	1bf6      	subs	r6, r6, r7
 8018822:	4466      	add	r6, ip
 8018824:	0537      	lsls	r7, r6, #20
 8018826:	2e00      	cmp	r6, #0
 8018828:	dd07      	ble.n	801883a <__ratio+0x4a>
 801882a:	1979      	adds	r1, r7, r5
 801882c:	9101      	str	r1, [sp, #4]
 801882e:	9800      	ldr	r0, [sp, #0]
 8018830:	9901      	ldr	r1, [sp, #4]
 8018832:	f7e9 f80f 	bl	8001854 <__aeabi_ddiv>
 8018836:	b005      	add	sp, #20
 8018838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801883a:	1bcb      	subs	r3, r1, r7
 801883c:	e7f7      	b.n	801882e <__ratio+0x3e>

0801883e <__copybits>:
 801883e:	0013      	movs	r3, r2
 8018840:	3901      	subs	r1, #1
 8018842:	b510      	push	{r4, lr}
 8018844:	1149      	asrs	r1, r1, #5
 8018846:	6912      	ldr	r2, [r2, #16]
 8018848:	3101      	adds	r1, #1
 801884a:	0089      	lsls	r1, r1, #2
 801884c:	3314      	adds	r3, #20
 801884e:	0092      	lsls	r2, r2, #2
 8018850:	1841      	adds	r1, r0, r1
 8018852:	189a      	adds	r2, r3, r2
 8018854:	429a      	cmp	r2, r3
 8018856:	d803      	bhi.n	8018860 <__copybits+0x22>
 8018858:	2300      	movs	r3, #0
 801885a:	4281      	cmp	r1, r0
 801885c:	d803      	bhi.n	8018866 <__copybits+0x28>
 801885e:	bd10      	pop	{r4, pc}
 8018860:	cb10      	ldmia	r3!, {r4}
 8018862:	c010      	stmia	r0!, {r4}
 8018864:	e7f6      	b.n	8018854 <__copybits+0x16>
 8018866:	c008      	stmia	r0!, {r3}
 8018868:	e7f7      	b.n	801885a <__copybits+0x1c>

0801886a <__any_on>:
 801886a:	0002      	movs	r2, r0
 801886c:	6900      	ldr	r0, [r0, #16]
 801886e:	b510      	push	{r4, lr}
 8018870:	3214      	adds	r2, #20
 8018872:	114b      	asrs	r3, r1, #5
 8018874:	4298      	cmp	r0, r3
 8018876:	db12      	blt.n	801889e <__any_on+0x34>
 8018878:	dd0b      	ble.n	8018892 <__any_on+0x28>
 801887a:	201f      	movs	r0, #31
 801887c:	4001      	ands	r1, r0
 801887e:	d008      	beq.n	8018892 <__any_on+0x28>
 8018880:	0098      	lsls	r0, r3, #2
 8018882:	5884      	ldr	r4, [r0, r2]
 8018884:	0020      	movs	r0, r4
 8018886:	40c8      	lsrs	r0, r1
 8018888:	4088      	lsls	r0, r1
 801888a:	0001      	movs	r1, r0
 801888c:	2001      	movs	r0, #1
 801888e:	428c      	cmp	r4, r1
 8018890:	d104      	bne.n	801889c <__any_on+0x32>
 8018892:	009b      	lsls	r3, r3, #2
 8018894:	18d3      	adds	r3, r2, r3
 8018896:	4293      	cmp	r3, r2
 8018898:	d803      	bhi.n	80188a2 <__any_on+0x38>
 801889a:	2000      	movs	r0, #0
 801889c:	bd10      	pop	{r4, pc}
 801889e:	0003      	movs	r3, r0
 80188a0:	e7f7      	b.n	8018892 <__any_on+0x28>
 80188a2:	3b04      	subs	r3, #4
 80188a4:	6819      	ldr	r1, [r3, #0]
 80188a6:	2900      	cmp	r1, #0
 80188a8:	d0f5      	beq.n	8018896 <__any_on+0x2c>
 80188aa:	2001      	movs	r0, #1
 80188ac:	e7f6      	b.n	801889c <__any_on+0x32>
	...

080188b0 <frexp>:
 80188b0:	b570      	push	{r4, r5, r6, lr}
 80188b2:	0014      	movs	r4, r2
 80188b4:	2500      	movs	r5, #0
 80188b6:	6025      	str	r5, [r4, #0]
 80188b8:	4d10      	ldr	r5, [pc, #64]	; (80188fc <frexp+0x4c>)
 80188ba:	004b      	lsls	r3, r1, #1
 80188bc:	000a      	movs	r2, r1
 80188be:	085b      	lsrs	r3, r3, #1
 80188c0:	42ab      	cmp	r3, r5
 80188c2:	dc1a      	bgt.n	80188fa <frexp+0x4a>
 80188c4:	001d      	movs	r5, r3
 80188c6:	4305      	orrs	r5, r0
 80188c8:	d017      	beq.n	80188fa <frexp+0x4a>
 80188ca:	4d0d      	ldr	r5, [pc, #52]	; (8018900 <frexp+0x50>)
 80188cc:	42ab      	cmp	r3, r5
 80188ce:	dc09      	bgt.n	80188e4 <frexp+0x34>
 80188d0:	2200      	movs	r2, #0
 80188d2:	4b0c      	ldr	r3, [pc, #48]	; (8018904 <frexp+0x54>)
 80188d4:	f7e9 fbc8 	bl	8002068 <__aeabi_dmul>
 80188d8:	2536      	movs	r5, #54	; 0x36
 80188da:	000a      	movs	r2, r1
 80188dc:	004b      	lsls	r3, r1, #1
 80188de:	426d      	negs	r5, r5
 80188e0:	085b      	lsrs	r3, r3, #1
 80188e2:	6025      	str	r5, [r4, #0]
 80188e4:	4d08      	ldr	r5, [pc, #32]	; (8018908 <frexp+0x58>)
 80188e6:	151b      	asrs	r3, r3, #20
 80188e8:	195b      	adds	r3, r3, r5
 80188ea:	6825      	ldr	r5, [r4, #0]
 80188ec:	18eb      	adds	r3, r5, r3
 80188ee:	6023      	str	r3, [r4, #0]
 80188f0:	4b06      	ldr	r3, [pc, #24]	; (801890c <frexp+0x5c>)
 80188f2:	401a      	ands	r2, r3
 80188f4:	4b06      	ldr	r3, [pc, #24]	; (8018910 <frexp+0x60>)
 80188f6:	4313      	orrs	r3, r2
 80188f8:	0019      	movs	r1, r3
 80188fa:	bd70      	pop	{r4, r5, r6, pc}
 80188fc:	7fefffff 	.word	0x7fefffff
 8018900:	000fffff 	.word	0x000fffff
 8018904:	43500000 	.word	0x43500000
 8018908:	fffffc02 	.word	0xfffffc02
 801890c:	800fffff 	.word	0x800fffff
 8018910:	3fe00000 	.word	0x3fe00000

08018914 <__ssprint_r>:
 8018914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018916:	6893      	ldr	r3, [r2, #8]
 8018918:	b087      	sub	sp, #28
 801891a:	9002      	str	r0, [sp, #8]
 801891c:	000c      	movs	r4, r1
 801891e:	0016      	movs	r6, r2
 8018920:	2b00      	cmp	r3, #0
 8018922:	d063      	beq.n	80189ec <__ssprint_r+0xd8>
 8018924:	6813      	ldr	r3, [r2, #0]
 8018926:	9303      	str	r3, [sp, #12]
 8018928:	2300      	movs	r3, #0
 801892a:	001f      	movs	r7, r3
 801892c:	9305      	str	r3, [sp, #20]
 801892e:	2f00      	cmp	r7, #0
 8018930:	d02e      	beq.n	8018990 <__ssprint_r+0x7c>
 8018932:	68a5      	ldr	r5, [r4, #8]
 8018934:	42af      	cmp	r7, r5
 8018936:	d347      	bcc.n	80189c8 <__ssprint_r+0xb4>
 8018938:	2390      	movs	r3, #144	; 0x90
 801893a:	89a2      	ldrh	r2, [r4, #12]
 801893c:	00db      	lsls	r3, r3, #3
 801893e:	421a      	tst	r2, r3
 8018940:	d042      	beq.n	80189c8 <__ssprint_r+0xb4>
 8018942:	2003      	movs	r0, #3
 8018944:	6921      	ldr	r1, [r4, #16]
 8018946:	6823      	ldr	r3, [r4, #0]
 8018948:	1a5b      	subs	r3, r3, r1
 801894a:	9304      	str	r3, [sp, #16]
 801894c:	6963      	ldr	r3, [r4, #20]
 801894e:	4343      	muls	r3, r0
 8018950:	0fd8      	lsrs	r0, r3, #31
 8018952:	18c3      	adds	r3, r0, r3
 8018954:	105b      	asrs	r3, r3, #1
 8018956:	9301      	str	r3, [sp, #4]
 8018958:	9b04      	ldr	r3, [sp, #16]
 801895a:	9801      	ldr	r0, [sp, #4]
 801895c:	3301      	adds	r3, #1
 801895e:	19db      	adds	r3, r3, r7
 8018960:	4283      	cmp	r3, r0
 8018962:	d900      	bls.n	8018966 <__ssprint_r+0x52>
 8018964:	9301      	str	r3, [sp, #4]
 8018966:	0553      	lsls	r3, r2, #21
 8018968:	d544      	bpl.n	80189f4 <__ssprint_r+0xe0>
 801896a:	9901      	ldr	r1, [sp, #4]
 801896c:	9802      	ldr	r0, [sp, #8]
 801896e:	f7fb fa85 	bl	8013e7c <_malloc_r>
 8018972:	1e05      	subs	r5, r0, #0
 8018974:	d114      	bne.n	80189a0 <__ssprint_r+0x8c>
 8018976:	230c      	movs	r3, #12
 8018978:	9a02      	ldr	r2, [sp, #8]
 801897a:	2001      	movs	r0, #1
 801897c:	6013      	str	r3, [r2, #0]
 801897e:	2340      	movs	r3, #64	; 0x40
 8018980:	89a2      	ldrh	r2, [r4, #12]
 8018982:	4240      	negs	r0, r0
 8018984:	4313      	orrs	r3, r2
 8018986:	81a3      	strh	r3, [r4, #12]
 8018988:	2300      	movs	r3, #0
 801898a:	60b3      	str	r3, [r6, #8]
 801898c:	6073      	str	r3, [r6, #4]
 801898e:	e02f      	b.n	80189f0 <__ssprint_r+0xdc>
 8018990:	9b03      	ldr	r3, [sp, #12]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	9305      	str	r3, [sp, #20]
 8018996:	9b03      	ldr	r3, [sp, #12]
 8018998:	685f      	ldr	r7, [r3, #4]
 801899a:	3308      	adds	r3, #8
 801899c:	9303      	str	r3, [sp, #12]
 801899e:	e7c6      	b.n	801892e <__ssprint_r+0x1a>
 80189a0:	9a04      	ldr	r2, [sp, #16]
 80189a2:	6921      	ldr	r1, [r4, #16]
 80189a4:	f7fb fca3 	bl	80142ee <memcpy>
 80189a8:	89a3      	ldrh	r3, [r4, #12]
 80189aa:	4a18      	ldr	r2, [pc, #96]	; (8018a0c <__ssprint_r+0xf8>)
 80189ac:	401a      	ands	r2, r3
 80189ae:	2380      	movs	r3, #128	; 0x80
 80189b0:	4313      	orrs	r3, r2
 80189b2:	81a3      	strh	r3, [r4, #12]
 80189b4:	9b04      	ldr	r3, [sp, #16]
 80189b6:	6125      	str	r5, [r4, #16]
 80189b8:	18ed      	adds	r5, r5, r3
 80189ba:	6025      	str	r5, [r4, #0]
 80189bc:	003d      	movs	r5, r7
 80189be:	9b01      	ldr	r3, [sp, #4]
 80189c0:	9a04      	ldr	r2, [sp, #16]
 80189c2:	6163      	str	r3, [r4, #20]
 80189c4:	1a9b      	subs	r3, r3, r2
 80189c6:	60a3      	str	r3, [r4, #8]
 80189c8:	42bd      	cmp	r5, r7
 80189ca:	d900      	bls.n	80189ce <__ssprint_r+0xba>
 80189cc:	003d      	movs	r5, r7
 80189ce:	002a      	movs	r2, r5
 80189d0:	9905      	ldr	r1, [sp, #20]
 80189d2:	6820      	ldr	r0, [r4, #0]
 80189d4:	f7ff fb91 	bl	80180fa <memmove>
 80189d8:	68a3      	ldr	r3, [r4, #8]
 80189da:	1b5b      	subs	r3, r3, r5
 80189dc:	60a3      	str	r3, [r4, #8]
 80189de:	6823      	ldr	r3, [r4, #0]
 80189e0:	195d      	adds	r5, r3, r5
 80189e2:	68b3      	ldr	r3, [r6, #8]
 80189e4:	6025      	str	r5, [r4, #0]
 80189e6:	1bdb      	subs	r3, r3, r7
 80189e8:	60b3      	str	r3, [r6, #8]
 80189ea:	d1d1      	bne.n	8018990 <__ssprint_r+0x7c>
 80189ec:	2000      	movs	r0, #0
 80189ee:	6070      	str	r0, [r6, #4]
 80189f0:	b007      	add	sp, #28
 80189f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189f4:	9a01      	ldr	r2, [sp, #4]
 80189f6:	9802      	ldr	r0, [sp, #8]
 80189f8:	f7fb fcbe 	bl	8014378 <_realloc_r>
 80189fc:	1e05      	subs	r5, r0, #0
 80189fe:	d1d9      	bne.n	80189b4 <__ssprint_r+0xa0>
 8018a00:	6921      	ldr	r1, [r4, #16]
 8018a02:	9802      	ldr	r0, [sp, #8]
 8018a04:	f7fe ff78 	bl	80178f8 <_free_r>
 8018a08:	e7b5      	b.n	8018976 <__ssprint_r+0x62>
 8018a0a:	46c0      	nop			; (mov r8, r8)
 8018a0c:	fffffb7f 	.word	0xfffffb7f

08018a10 <__register_exitproc>:
 8018a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a12:	4d29      	ldr	r5, [pc, #164]	; (8018ab8 <__register_exitproc+0xa8>)
 8018a14:	0006      	movs	r6, r0
 8018a16:	6828      	ldr	r0, [r5, #0]
 8018a18:	9301      	str	r3, [sp, #4]
 8018a1a:	9100      	str	r1, [sp, #0]
 8018a1c:	0017      	movs	r7, r2
 8018a1e:	f7ff fb5f 	bl	80180e0 <__retarget_lock_acquire_recursive>
 8018a22:	4b26      	ldr	r3, [pc, #152]	; (8018abc <__register_exitproc+0xac>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	001c      	movs	r4, r3
 8018a28:	34fc      	adds	r4, #252	; 0xfc
 8018a2a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018a2c:	2800      	cmp	r0, #0
 8018a2e:	d103      	bne.n	8018a38 <__register_exitproc+0x28>
 8018a30:	334d      	adds	r3, #77	; 0x4d
 8018a32:	33ff      	adds	r3, #255	; 0xff
 8018a34:	0018      	movs	r0, r3
 8018a36:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018a38:	6843      	ldr	r3, [r0, #4]
 8018a3a:	2b1f      	cmp	r3, #31
 8018a3c:	dd18      	ble.n	8018a70 <__register_exitproc+0x60>
 8018a3e:	4b20      	ldr	r3, [pc, #128]	; (8018ac0 <__register_exitproc+0xb0>)
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d105      	bne.n	8018a50 <__register_exitproc+0x40>
 8018a44:	6828      	ldr	r0, [r5, #0]
 8018a46:	f7ff fb4c 	bl	80180e2 <__retarget_lock_release_recursive>
 8018a4a:	2001      	movs	r0, #1
 8018a4c:	4240      	negs	r0, r0
 8018a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018a50:	20c8      	movs	r0, #200	; 0xc8
 8018a52:	0040      	lsls	r0, r0, #1
 8018a54:	f7fb f9fe 	bl	8013e54 <malloc>
 8018a58:	2800      	cmp	r0, #0
 8018a5a:	d0f3      	beq.n	8018a44 <__register_exitproc+0x34>
 8018a5c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8018a5e:	2300      	movs	r3, #0
 8018a60:	6002      	str	r2, [r0, #0]
 8018a62:	22c4      	movs	r2, #196	; 0xc4
 8018a64:	0052      	lsls	r2, r2, #1
 8018a66:	6043      	str	r3, [r0, #4]
 8018a68:	64e0      	str	r0, [r4, #76]	; 0x4c
 8018a6a:	5083      	str	r3, [r0, r2]
 8018a6c:	3204      	adds	r2, #4
 8018a6e:	5083      	str	r3, [r0, r2]
 8018a70:	6843      	ldr	r3, [r0, #4]
 8018a72:	2e00      	cmp	r6, #0
 8018a74:	d014      	beq.n	8018aa0 <__register_exitproc+0x90>
 8018a76:	009a      	lsls	r2, r3, #2
 8018a78:	1882      	adds	r2, r0, r2
 8018a7a:	0011      	movs	r1, r2
 8018a7c:	3188      	adds	r1, #136	; 0x88
 8018a7e:	600f      	str	r7, [r1, #0]
 8018a80:	2101      	movs	r1, #1
 8018a82:	0004      	movs	r4, r0
 8018a84:	4099      	lsls	r1, r3
 8018a86:	3485      	adds	r4, #133	; 0x85
 8018a88:	34ff      	adds	r4, #255	; 0xff
 8018a8a:	6865      	ldr	r5, [r4, #4]
 8018a8c:	32fc      	adds	r2, #252	; 0xfc
 8018a8e:	430d      	orrs	r5, r1
 8018a90:	6065      	str	r5, [r4, #4]
 8018a92:	9d01      	ldr	r5, [sp, #4]
 8018a94:	60d5      	str	r5, [r2, #12]
 8018a96:	2e02      	cmp	r6, #2
 8018a98:	d102      	bne.n	8018aa0 <__register_exitproc+0x90>
 8018a9a:	68a2      	ldr	r2, [r4, #8]
 8018a9c:	4311      	orrs	r1, r2
 8018a9e:	60a1      	str	r1, [r4, #8]
 8018aa0:	1c5a      	adds	r2, r3, #1
 8018aa2:	6042      	str	r2, [r0, #4]
 8018aa4:	3302      	adds	r3, #2
 8018aa6:	9a00      	ldr	r2, [sp, #0]
 8018aa8:	009b      	lsls	r3, r3, #2
 8018aaa:	501a      	str	r2, [r3, r0]
 8018aac:	4b02      	ldr	r3, [pc, #8]	; (8018ab8 <__register_exitproc+0xa8>)
 8018aae:	6818      	ldr	r0, [r3, #0]
 8018ab0:	f7ff fb17 	bl	80180e2 <__retarget_lock_release_recursive>
 8018ab4:	2000      	movs	r0, #0
 8018ab6:	e7ca      	b.n	8018a4e <__register_exitproc+0x3e>
 8018ab8:	20000ae4 	.word	0x20000ae4
 8018abc:	0801ba9c 	.word	0x0801ba9c
 8018ac0:	08013e55 	.word	0x08013e55

08018ac4 <_calloc_r>:
 8018ac4:	b510      	push	{r4, lr}
 8018ac6:	4351      	muls	r1, r2
 8018ac8:	f7fb f9d8 	bl	8013e7c <_malloc_r>
 8018acc:	1e04      	subs	r4, r0, #0
 8018ace:	d01a      	beq.n	8018b06 <_calloc_r+0x42>
 8018ad0:	0003      	movs	r3, r0
 8018ad2:	3b08      	subs	r3, #8
 8018ad4:	685a      	ldr	r2, [r3, #4]
 8018ad6:	2303      	movs	r3, #3
 8018ad8:	439a      	bics	r2, r3
 8018ada:	3a04      	subs	r2, #4
 8018adc:	2a24      	cmp	r2, #36	; 0x24
 8018ade:	d819      	bhi.n	8018b14 <_calloc_r+0x50>
 8018ae0:	0003      	movs	r3, r0
 8018ae2:	2a13      	cmp	r2, #19
 8018ae4:	d90b      	bls.n	8018afe <_calloc_r+0x3a>
 8018ae6:	2100      	movs	r1, #0
 8018ae8:	3308      	adds	r3, #8
 8018aea:	6001      	str	r1, [r0, #0]
 8018aec:	6041      	str	r1, [r0, #4]
 8018aee:	2a1b      	cmp	r2, #27
 8018af0:	d905      	bls.n	8018afe <_calloc_r+0x3a>
 8018af2:	6081      	str	r1, [r0, #8]
 8018af4:	60c1      	str	r1, [r0, #12]
 8018af6:	2a24      	cmp	r2, #36	; 0x24
 8018af8:	d007      	beq.n	8018b0a <_calloc_r+0x46>
 8018afa:	0003      	movs	r3, r0
 8018afc:	3310      	adds	r3, #16
 8018afe:	2200      	movs	r2, #0
 8018b00:	601a      	str	r2, [r3, #0]
 8018b02:	605a      	str	r2, [r3, #4]
 8018b04:	609a      	str	r2, [r3, #8]
 8018b06:	0020      	movs	r0, r4
 8018b08:	bd10      	pop	{r4, pc}
 8018b0a:	0003      	movs	r3, r0
 8018b0c:	6101      	str	r1, [r0, #16]
 8018b0e:	3318      	adds	r3, #24
 8018b10:	6141      	str	r1, [r0, #20]
 8018b12:	e7f4      	b.n	8018afe <_calloc_r+0x3a>
 8018b14:	2100      	movs	r1, #0
 8018b16:	f7fb fbf3 	bl	8014300 <memset>
 8018b1a:	e7f4      	b.n	8018b06 <_calloc_r+0x42>

08018b1c <_sbrk>:
 8018b1c:	4b05      	ldr	r3, [pc, #20]	; (8018b34 <_sbrk+0x18>)
 8018b1e:	0002      	movs	r2, r0
 8018b20:	6819      	ldr	r1, [r3, #0]
 8018b22:	2900      	cmp	r1, #0
 8018b24:	d101      	bne.n	8018b2a <_sbrk+0xe>
 8018b26:	4904      	ldr	r1, [pc, #16]	; (8018b38 <_sbrk+0x1c>)
 8018b28:	6019      	str	r1, [r3, #0]
 8018b2a:	6818      	ldr	r0, [r3, #0]
 8018b2c:	1882      	adds	r2, r0, r2
 8018b2e:	601a      	str	r2, [r3, #0]
 8018b30:	4770      	bx	lr
 8018b32:	46c0      	nop			; (mov r8, r8)
 8018b34:	20006998 	.word	0x20006998
 8018b38:	20006f28 	.word	0x20006f28

08018b3c <_init>:
 8018b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b3e:	46c0      	nop			; (mov r8, r8)
 8018b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b42:	bc08      	pop	{r3}
 8018b44:	469e      	mov	lr, r3
 8018b46:	4770      	bx	lr

08018b48 <_fini>:
 8018b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b4a:	46c0      	nop			; (mov r8, r8)
 8018b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b4e:	bc08      	pop	{r3}
 8018b50:	469e      	mov	lr, r3
 8018b52:	4770      	bx	lr
