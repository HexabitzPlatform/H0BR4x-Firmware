
H0BR4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018a50  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000323c  08018b10  08018b10  00028b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd4c  0801bd4c  00030aa0  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd4c  0801bd4c  0002bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd54  0801bd54  00030aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801bd54  0801bd54  0002bd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bd5c  0801bd5c  0002bd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000aa0  20000000  0801bd60  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063f8  20000aa0  0801c800  00030aa0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006e98  0801c800  00036e98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005aaa0  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007ee2  00000000  00000000  0008b568  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002641d  00000000  00000000  0009344a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000029e0  00000000  00000000  000b9868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002ec0  00000000  00000000  000bc248  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017d08  00000000  00000000  000bf108  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00012bad  00000000  00000000  000d6e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e99bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ee8  00000000  00000000  000e9a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000aa0 	.word	0x20000aa0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08018af4 	.word	0x08018af4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000aa4 	.word	0x20000aa4
 8000100:	08018af4 	.word	0x08018af4

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fda3 	bl	8001f98 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fcfb 	bl	8001e58 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd95 	bl	8001f98 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd8b 	bl	8001f98 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd1d 	bl	8001ed0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd13 	bl	8001ed0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fcbf 	bl	8000e44 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc41 	bl	8000d58 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fcb1 	bl	8000e44 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fca7 	bl	8000e44 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc4f 	bl	8000da8 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc45 	bl	8000da8 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d115      	bne.n	800055c <__aeabi_ldivmod+0x30>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d113      	bne.n	800055c <__aeabi_ldivmod+0x30>
 8000534:	2900      	cmp	r1, #0
 8000536:	db06      	blt.n	8000546 <__aeabi_ldivmod+0x1a>
 8000538:	dc01      	bgt.n	800053e <__aeabi_ldivmod+0x12>
 800053a:	2800      	cmp	r0, #0
 800053c:	d006      	beq.n	800054c <__aeabi_ldivmod+0x20>
 800053e:	2000      	movs	r0, #0
 8000540:	43c0      	mvns	r0, r0
 8000542:	0841      	lsrs	r1, r0, #1
 8000544:	e002      	b.n	800054c <__aeabi_ldivmod+0x20>
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	0609      	lsls	r1, r1, #24
 800054a:	2000      	movs	r0, #0
 800054c:	b407      	push	{r0, r1, r2}
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <__aeabi_ldivmod+0x2c>)
 8000550:	a101      	add	r1, pc, #4	; (adr r1, 8000558 <__aeabi_ldivmod+0x2c>)
 8000552:	1840      	adds	r0, r0, r1
 8000554:	9002      	str	r0, [sp, #8]
 8000556:	bd03      	pop	{r0, r1, pc}
 8000558:	fffffee1 	.word	0xfffffee1
 800055c:	b403      	push	{r0, r1}
 800055e:	4668      	mov	r0, sp
 8000560:	b501      	push	{r0, lr}
 8000562:	9802      	ldr	r0, [sp, #8]
 8000564:	f000 f930 	bl	80007c8 <__gnu_ldivmod_helper>
 8000568:	9b01      	ldr	r3, [sp, #4]
 800056a:	469e      	mov	lr, r3
 800056c:	b002      	add	sp, #8
 800056e:	bc0c      	pop	{r2, r3}
 8000570:	4770      	bx	lr
 8000572:	46c0      	nop			; (mov r8, r8)

08000574 <__aeabi_uldivmod>:
 8000574:	2b00      	cmp	r3, #0
 8000576:	d111      	bne.n	800059c <__aeabi_uldivmod+0x28>
 8000578:	2a00      	cmp	r2, #0
 800057a:	d10f      	bne.n	800059c <__aeabi_uldivmod+0x28>
 800057c:	2900      	cmp	r1, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_uldivmod+0xe>
 8000580:	2800      	cmp	r0, #0
 8000582:	d002      	beq.n	800058a <__aeabi_uldivmod+0x16>
 8000584:	2100      	movs	r1, #0
 8000586:	43c9      	mvns	r1, r1
 8000588:	1c08      	adds	r0, r1, #0
 800058a:	b407      	push	{r0, r1, r2}
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <__aeabi_uldivmod+0x24>)
 800058e:	a102      	add	r1, pc, #8	; (adr r1, 8000598 <__aeabi_uldivmod+0x24>)
 8000590:	1840      	adds	r0, r0, r1
 8000592:	9002      	str	r0, [sp, #8]
 8000594:	bd03      	pop	{r0, r1, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	fffffea1 	.word	0xfffffea1
 800059c:	b403      	push	{r0, r1}
 800059e:	4668      	mov	r0, sp
 80005a0:	b501      	push	{r0, lr}
 80005a2:	9802      	ldr	r0, [sp, #8]
 80005a4:	f000 f84e 	bl	8000644 <__udivmoddi4>
 80005a8:	9b01      	ldr	r3, [sp, #4]
 80005aa:	469e      	mov	lr, r3
 80005ac:	b002      	add	sp, #8
 80005ae:	bc0c      	pop	{r2, r3}
 80005b0:	4770      	bx	lr
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__aeabi_lmul>:
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	46ce      	mov	lr, r9
 80005b8:	4647      	mov	r7, r8
 80005ba:	0415      	lsls	r5, r2, #16
 80005bc:	0c2d      	lsrs	r5, r5, #16
 80005be:	002e      	movs	r6, r5
 80005c0:	b580      	push	{r7, lr}
 80005c2:	0407      	lsls	r7, r0, #16
 80005c4:	0c14      	lsrs	r4, r2, #16
 80005c6:	0c3f      	lsrs	r7, r7, #16
 80005c8:	4699      	mov	r9, r3
 80005ca:	0c03      	lsrs	r3, r0, #16
 80005cc:	437e      	muls	r6, r7
 80005ce:	435d      	muls	r5, r3
 80005d0:	4367      	muls	r7, r4
 80005d2:	4363      	muls	r3, r4
 80005d4:	197f      	adds	r7, r7, r5
 80005d6:	0c34      	lsrs	r4, r6, #16
 80005d8:	19e4      	adds	r4, r4, r7
 80005da:	469c      	mov	ip, r3
 80005dc:	42a5      	cmp	r5, r4
 80005de:	d903      	bls.n	80005e8 <__aeabi_lmul+0x34>
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	025b      	lsls	r3, r3, #9
 80005e4:	4698      	mov	r8, r3
 80005e6:	44c4      	add	ip, r8
 80005e8:	464b      	mov	r3, r9
 80005ea:	4343      	muls	r3, r0
 80005ec:	4351      	muls	r1, r2
 80005ee:	0c25      	lsrs	r5, r4, #16
 80005f0:	0436      	lsls	r6, r6, #16
 80005f2:	4465      	add	r5, ip
 80005f4:	0c36      	lsrs	r6, r6, #16
 80005f6:	0424      	lsls	r4, r4, #16
 80005f8:	19a4      	adds	r4, r4, r6
 80005fa:	195b      	adds	r3, r3, r5
 80005fc:	1859      	adds	r1, r3, r1
 80005fe:	0020      	movs	r0, r4
 8000600:	bc0c      	pop	{r2, r3}
 8000602:	4690      	mov	r8, r2
 8000604:	4699      	mov	r9, r3
 8000606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000608 <__aeabi_d2uiz>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	2200      	movs	r2, #0
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__aeabi_d2uiz+0x38>)
 800060e:	0004      	movs	r4, r0
 8000610:	000d      	movs	r5, r1
 8000612:	f7ff ff47 	bl	80004a4 <__aeabi_dcmpge>
 8000616:	2800      	cmp	r0, #0
 8000618:	d104      	bne.n	8000624 <__aeabi_d2uiz+0x1c>
 800061a:	0020      	movs	r0, r4
 800061c:	0029      	movs	r1, r5
 800061e:	f002 faf9 	bl	8002c14 <__aeabi_d2iz>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <__aeabi_d2uiz+0x38>)
 8000626:	2200      	movs	r2, #0
 8000628:	0020      	movs	r0, r4
 800062a:	0029      	movs	r1, r5
 800062c:	f001 ff8e 	bl	800254c <__aeabi_dsub>
 8000630:	f002 faf0 	bl	8002c14 <__aeabi_d2iz>
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	061b      	lsls	r3, r3, #24
 8000638:	469c      	mov	ip, r3
 800063a:	4460      	add	r0, ip
 800063c:	e7f1      	b.n	8000622 <__aeabi_d2uiz+0x1a>
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	41e00000 	.word	0x41e00000

08000644 <__udivmoddi4>:
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	464f      	mov	r7, r9
 8000648:	4646      	mov	r6, r8
 800064a:	46d6      	mov	lr, sl
 800064c:	b5c0      	push	{r6, r7, lr}
 800064e:	0004      	movs	r4, r0
 8000650:	b082      	sub	sp, #8
 8000652:	000d      	movs	r5, r1
 8000654:	4691      	mov	r9, r2
 8000656:	4698      	mov	r8, r3
 8000658:	428b      	cmp	r3, r1
 800065a:	d82f      	bhi.n	80006bc <__udivmoddi4+0x78>
 800065c:	d02c      	beq.n	80006b8 <__udivmoddi4+0x74>
 800065e:	4641      	mov	r1, r8
 8000660:	4648      	mov	r0, r9
 8000662:	f002 fc6d 	bl	8002f40 <__clzdi2>
 8000666:	0029      	movs	r1, r5
 8000668:	0006      	movs	r6, r0
 800066a:	0020      	movs	r0, r4
 800066c:	f002 fc68 	bl	8002f40 <__clzdi2>
 8000670:	1a33      	subs	r3, r6, r0
 8000672:	469c      	mov	ip, r3
 8000674:	3b20      	subs	r3, #32
 8000676:	469a      	mov	sl, r3
 8000678:	d500      	bpl.n	800067c <__udivmoddi4+0x38>
 800067a:	e076      	b.n	800076a <__udivmoddi4+0x126>
 800067c:	464b      	mov	r3, r9
 800067e:	4652      	mov	r2, sl
 8000680:	4093      	lsls	r3, r2
 8000682:	001f      	movs	r7, r3
 8000684:	464b      	mov	r3, r9
 8000686:	4662      	mov	r2, ip
 8000688:	4093      	lsls	r3, r2
 800068a:	001e      	movs	r6, r3
 800068c:	42af      	cmp	r7, r5
 800068e:	d828      	bhi.n	80006e2 <__udivmoddi4+0x9e>
 8000690:	d025      	beq.n	80006de <__udivmoddi4+0x9a>
 8000692:	4653      	mov	r3, sl
 8000694:	1ba4      	subs	r4, r4, r6
 8000696:	41bd      	sbcs	r5, r7
 8000698:	2b00      	cmp	r3, #0
 800069a:	da00      	bge.n	800069e <__udivmoddi4+0x5a>
 800069c:	e07b      	b.n	8000796 <__udivmoddi4+0x152>
 800069e:	2200      	movs	r2, #0
 80006a0:	2300      	movs	r3, #0
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4652      	mov	r2, sl
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4662      	mov	r2, ip
 80006b2:	4093      	lsls	r3, r2
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	e018      	b.n	80006ea <__udivmoddi4+0xa6>
 80006b8:	4282      	cmp	r2, r0
 80006ba:	d9d0      	bls.n	800065e <__udivmoddi4+0x1a>
 80006bc:	2200      	movs	r2, #0
 80006be:	2300      	movs	r3, #0
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <__udivmoddi4+0x8a>
 80006ca:	601c      	str	r4, [r3, #0]
 80006cc:	605d      	str	r5, [r3, #4]
 80006ce:	9800      	ldr	r0, [sp, #0]
 80006d0:	9901      	ldr	r1, [sp, #4]
 80006d2:	b002      	add	sp, #8
 80006d4:	bc1c      	pop	{r2, r3, r4}
 80006d6:	4690      	mov	r8, r2
 80006d8:	4699      	mov	r9, r3
 80006da:	46a2      	mov	sl, r4
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006de:	42a3      	cmp	r3, r4
 80006e0:	d9d7      	bls.n	8000692 <__udivmoddi4+0x4e>
 80006e2:	2200      	movs	r2, #0
 80006e4:	2300      	movs	r3, #0
 80006e6:	9200      	str	r2, [sp, #0]
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	4663      	mov	r3, ip
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0e9      	beq.n	80006c4 <__udivmoddi4+0x80>
 80006f0:	07fb      	lsls	r3, r7, #31
 80006f2:	4698      	mov	r8, r3
 80006f4:	4641      	mov	r1, r8
 80006f6:	0872      	lsrs	r2, r6, #1
 80006f8:	430a      	orrs	r2, r1
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	4666      	mov	r6, ip
 80006fe:	e00e      	b.n	800071e <__udivmoddi4+0xda>
 8000700:	42ab      	cmp	r3, r5
 8000702:	d101      	bne.n	8000708 <__udivmoddi4+0xc4>
 8000704:	42a2      	cmp	r2, r4
 8000706:	d80c      	bhi.n	8000722 <__udivmoddi4+0xde>
 8000708:	1aa4      	subs	r4, r4, r2
 800070a:	419d      	sbcs	r5, r3
 800070c:	2001      	movs	r0, #1
 800070e:	1924      	adds	r4, r4, r4
 8000710:	416d      	adcs	r5, r5
 8000712:	2100      	movs	r1, #0
 8000714:	3e01      	subs	r6, #1
 8000716:	1824      	adds	r4, r4, r0
 8000718:	414d      	adcs	r5, r1
 800071a:	2e00      	cmp	r6, #0
 800071c:	d006      	beq.n	800072c <__udivmoddi4+0xe8>
 800071e:	42ab      	cmp	r3, r5
 8000720:	d9ee      	bls.n	8000700 <__udivmoddi4+0xbc>
 8000722:	3e01      	subs	r6, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2e00      	cmp	r6, #0
 800072a:	d1f8      	bne.n	800071e <__udivmoddi4+0xda>
 800072c:	9800      	ldr	r0, [sp, #0]
 800072e:	9901      	ldr	r1, [sp, #4]
 8000730:	4653      	mov	r3, sl
 8000732:	1900      	adds	r0, r0, r4
 8000734:	4169      	adcs	r1, r5
 8000736:	2b00      	cmp	r3, #0
 8000738:	db23      	blt.n	8000782 <__udivmoddi4+0x13e>
 800073a:	002b      	movs	r3, r5
 800073c:	4652      	mov	r2, sl
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	4664      	mov	r4, ip
 8000744:	40e2      	lsrs	r2, r4
 8000746:	001c      	movs	r4, r3
 8000748:	4653      	mov	r3, sl
 800074a:	0015      	movs	r5, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	db2d      	blt.n	80007ac <__udivmoddi4+0x168>
 8000750:	0026      	movs	r6, r4
 8000752:	4657      	mov	r7, sl
 8000754:	40be      	lsls	r6, r7
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4667      	mov	r7, ip
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e7ac      	b.n	80006c4 <__udivmoddi4+0x80>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	464a      	mov	r2, r9
 8000772:	40da      	lsrs	r2, r3
 8000774:	4661      	mov	r1, ip
 8000776:	0013      	movs	r3, r2
 8000778:	4642      	mov	r2, r8
 800077a:	408a      	lsls	r2, r1
 800077c:	0017      	movs	r7, r2
 800077e:	431f      	orrs	r7, r3
 8000780:	e780      	b.n	8000684 <__udivmoddi4+0x40>
 8000782:	4662      	mov	r2, ip
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4666      	mov	r6, ip
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4313      	orrs	r3, r2
 8000794:	e7d4      	b.n	8000740 <__udivmoddi4+0xfc>
 8000796:	4662      	mov	r2, ip
 8000798:	2320      	movs	r3, #32
 800079a:	2100      	movs	r1, #0
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	2200      	movs	r2, #0
 80007a0:	9100      	str	r1, [sp, #0]
 80007a2:	9201      	str	r2, [sp, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	40da      	lsrs	r2, r3
 80007a8:	9201      	str	r2, [sp, #4]
 80007aa:	e780      	b.n	80006ae <__udivmoddi4+0x6a>
 80007ac:	2320      	movs	r3, #32
 80007ae:	4662      	mov	r2, ip
 80007b0:	0026      	movs	r6, r4
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	002f      	movs	r7, r5
 80007b8:	46b0      	mov	r8, r6
 80007ba:	4666      	mov	r6, ip
 80007bc:	40b7      	lsls	r7, r6
 80007be:	4646      	mov	r6, r8
 80007c0:	003b      	movs	r3, r7
 80007c2:	4333      	orrs	r3, r6
 80007c4:	e7c8      	b.n	8000758 <__udivmoddi4+0x114>
 80007c6:	46c0      	nop			; (mov r8, r8)

080007c8 <__gnu_ldivmod_helper>:
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	b083      	sub	sp, #12
 80007cc:	0016      	movs	r6, r2
 80007ce:	001f      	movs	r7, r3
 80007d0:	9000      	str	r0, [sp, #0]
 80007d2:	9101      	str	r1, [sp, #4]
 80007d4:	f002 fbc0 	bl	8002f58 <__divdi3>
 80007d8:	0004      	movs	r4, r0
 80007da:	000d      	movs	r5, r1
 80007dc:	0002      	movs	r2, r0
 80007de:	000b      	movs	r3, r1
 80007e0:	0030      	movs	r0, r6
 80007e2:	0039      	movs	r1, r7
 80007e4:	f7ff fee6 	bl	80005b4 <__aeabi_lmul>
 80007e8:	9a00      	ldr	r2, [sp, #0]
 80007ea:	9b01      	ldr	r3, [sp, #4]
 80007ec:	1a12      	subs	r2, r2, r0
 80007ee:	418b      	sbcs	r3, r1
 80007f0:	9908      	ldr	r1, [sp, #32]
 80007f2:	0020      	movs	r0, r4
 80007f4:	600a      	str	r2, [r1, #0]
 80007f6:	604b      	str	r3, [r1, #4]
 80007f8:	0029      	movs	r1, r5
 80007fa:	b003      	add	sp, #12
 80007fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__aeabi_fadd>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	4647      	mov	r7, r8
 8000804:	46ce      	mov	lr, r9
 8000806:	0243      	lsls	r3, r0, #9
 8000808:	0a5b      	lsrs	r3, r3, #9
 800080a:	0044      	lsls	r4, r0, #1
 800080c:	0fc2      	lsrs	r2, r0, #31
 800080e:	469c      	mov	ip, r3
 8000810:	0048      	lsls	r0, r1, #1
 8000812:	00dd      	lsls	r5, r3, #3
 8000814:	024b      	lsls	r3, r1, #9
 8000816:	0e24      	lsrs	r4, r4, #24
 8000818:	0a5b      	lsrs	r3, r3, #9
 800081a:	0e00      	lsrs	r0, r0, #24
 800081c:	b580      	push	{r7, lr}
 800081e:	4698      	mov	r8, r3
 8000820:	0026      	movs	r6, r4
 8000822:	4691      	mov	r9, r2
 8000824:	0fc9      	lsrs	r1, r1, #31
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	1a27      	subs	r7, r4, r0
 800082a:	428a      	cmp	r2, r1
 800082c:	d029      	beq.n	8000882 <__aeabi_fadd+0x82>
 800082e:	2f00      	cmp	r7, #0
 8000830:	dd15      	ble.n	800085e <__aeabi_fadd+0x5e>
 8000832:	2800      	cmp	r0, #0
 8000834:	d14a      	bne.n	80008cc <__aeabi_fadd+0xcc>
 8000836:	2b00      	cmp	r3, #0
 8000838:	d000      	beq.n	800083c <__aeabi_fadd+0x3c>
 800083a:	e095      	b.n	8000968 <__aeabi_fadd+0x168>
 800083c:	08ed      	lsrs	r5, r5, #3
 800083e:	2cff      	cmp	r4, #255	; 0xff
 8000840:	d100      	bne.n	8000844 <__aeabi_fadd+0x44>
 8000842:	e088      	b.n	8000956 <__aeabi_fadd+0x156>
 8000844:	026b      	lsls	r3, r5, #9
 8000846:	0a5b      	lsrs	r3, r3, #9
 8000848:	b2e6      	uxtb	r6, r4
 800084a:	025b      	lsls	r3, r3, #9
 800084c:	05f6      	lsls	r6, r6, #23
 800084e:	0a58      	lsrs	r0, r3, #9
 8000850:	4330      	orrs	r0, r6
 8000852:	07d2      	lsls	r2, r2, #31
 8000854:	4310      	orrs	r0, r2
 8000856:	bc0c      	pop	{r2, r3}
 8000858:	4690      	mov	r8, r2
 800085a:	4699      	mov	r9, r3
 800085c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800085e:	2f00      	cmp	r7, #0
 8000860:	d000      	beq.n	8000864 <__aeabi_fadd+0x64>
 8000862:	e087      	b.n	8000974 <__aeabi_fadd+0x174>
 8000864:	1c60      	adds	r0, r4, #1
 8000866:	b2c0      	uxtb	r0, r0
 8000868:	2801      	cmp	r0, #1
 800086a:	dc00      	bgt.n	800086e <__aeabi_fadd+0x6e>
 800086c:	e0b6      	b.n	80009dc <__aeabi_fadd+0x1dc>
 800086e:	1aee      	subs	r6, r5, r3
 8000870:	0172      	lsls	r2, r6, #5
 8000872:	d500      	bpl.n	8000876 <__aeabi_fadd+0x76>
 8000874:	e0c5      	b.n	8000a02 <__aeabi_fadd+0x202>
 8000876:	2e00      	cmp	r6, #0
 8000878:	d13d      	bne.n	80008f6 <__aeabi_fadd+0xf6>
 800087a:	2200      	movs	r2, #0
 800087c:	2600      	movs	r6, #0
 800087e:	2300      	movs	r3, #0
 8000880:	e7e3      	b.n	800084a <__aeabi_fadd+0x4a>
 8000882:	2f00      	cmp	r7, #0
 8000884:	dc00      	bgt.n	8000888 <__aeabi_fadd+0x88>
 8000886:	e096      	b.n	80009b6 <__aeabi_fadd+0x1b6>
 8000888:	2800      	cmp	r0, #0
 800088a:	d05d      	beq.n	8000948 <__aeabi_fadd+0x148>
 800088c:	2cff      	cmp	r4, #255	; 0xff
 800088e:	d060      	beq.n	8000952 <__aeabi_fadd+0x152>
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	04d2      	lsls	r2, r2, #19
 8000894:	4313      	orrs	r3, r2
 8000896:	2f1b      	cmp	r7, #27
 8000898:	dd00      	ble.n	800089c <__aeabi_fadd+0x9c>
 800089a:	e0ec      	b.n	8000a76 <__aeabi_fadd+0x276>
 800089c:	2220      	movs	r2, #32
 800089e:	1bd2      	subs	r2, r2, r7
 80008a0:	0018      	movs	r0, r3
 80008a2:	4093      	lsls	r3, r2
 80008a4:	40f8      	lsrs	r0, r7
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	4193      	sbcs	r3, r2
 80008aa:	4303      	orrs	r3, r0
 80008ac:	18ed      	adds	r5, r5, r3
 80008ae:	016b      	lsls	r3, r5, #5
 80008b0:	d57b      	bpl.n	80009aa <__aeabi_fadd+0x1aa>
 80008b2:	3401      	adds	r4, #1
 80008b4:	2cff      	cmp	r4, #255	; 0xff
 80008b6:	d100      	bne.n	80008ba <__aeabi_fadd+0xba>
 80008b8:	e0b7      	b.n	8000a2a <__aeabi_fadd+0x22a>
 80008ba:	2201      	movs	r2, #1
 80008bc:	2607      	movs	r6, #7
 80008be:	402a      	ands	r2, r5
 80008c0:	086b      	lsrs	r3, r5, #1
 80008c2:	4d9a      	ldr	r5, [pc, #616]	; (8000b2c <__aeabi_fadd+0x32c>)
 80008c4:	401d      	ands	r5, r3
 80008c6:	4315      	orrs	r5, r2
 80008c8:	402e      	ands	r6, r5
 80008ca:	e029      	b.n	8000920 <__aeabi_fadd+0x120>
 80008cc:	2cff      	cmp	r4, #255	; 0xff
 80008ce:	d0b5      	beq.n	800083c <__aeabi_fadd+0x3c>
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	04d2      	lsls	r2, r2, #19
 80008d4:	4313      	orrs	r3, r2
 80008d6:	2f1b      	cmp	r7, #27
 80008d8:	dd00      	ble.n	80008dc <__aeabi_fadd+0xdc>
 80008da:	e0b2      	b.n	8000a42 <__aeabi_fadd+0x242>
 80008dc:	2220      	movs	r2, #32
 80008de:	1bd2      	subs	r2, r2, r7
 80008e0:	0019      	movs	r1, r3
 80008e2:	4093      	lsls	r3, r2
 80008e4:	40f9      	lsrs	r1, r7
 80008e6:	1e5a      	subs	r2, r3, #1
 80008e8:	4193      	sbcs	r3, r2
 80008ea:	430b      	orrs	r3, r1
 80008ec:	1aed      	subs	r5, r5, r3
 80008ee:	016b      	lsls	r3, r5, #5
 80008f0:	d55b      	bpl.n	80009aa <__aeabi_fadd+0x1aa>
 80008f2:	01ad      	lsls	r5, r5, #6
 80008f4:	09ae      	lsrs	r6, r5, #6
 80008f6:	0030      	movs	r0, r6
 80008f8:	f002 fb04 	bl	8002f04 <__clzsi2>
 80008fc:	3805      	subs	r0, #5
 80008fe:	4086      	lsls	r6, r0
 8000900:	4284      	cmp	r4, r0
 8000902:	dc65      	bgt.n	80009d0 <__aeabi_fadd+0x1d0>
 8000904:	1b04      	subs	r4, r0, r4
 8000906:	0033      	movs	r3, r6
 8000908:	2020      	movs	r0, #32
 800090a:	3401      	adds	r4, #1
 800090c:	40e3      	lsrs	r3, r4
 800090e:	1b04      	subs	r4, r0, r4
 8000910:	40a6      	lsls	r6, r4
 8000912:	1e75      	subs	r5, r6, #1
 8000914:	41ae      	sbcs	r6, r5
 8000916:	4333      	orrs	r3, r6
 8000918:	2607      	movs	r6, #7
 800091a:	001d      	movs	r5, r3
 800091c:	2400      	movs	r4, #0
 800091e:	401e      	ands	r6, r3
 8000920:	2201      	movs	r2, #1
 8000922:	464b      	mov	r3, r9
 8000924:	401a      	ands	r2, r3
 8000926:	2e00      	cmp	r6, #0
 8000928:	d004      	beq.n	8000934 <__aeabi_fadd+0x134>
 800092a:	230f      	movs	r3, #15
 800092c:	402b      	ands	r3, r5
 800092e:	2b04      	cmp	r3, #4
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x134>
 8000932:	3504      	adds	r5, #4
 8000934:	016b      	lsls	r3, r5, #5
 8000936:	d400      	bmi.n	800093a <__aeabi_fadd+0x13a>
 8000938:	e780      	b.n	800083c <__aeabi_fadd+0x3c>
 800093a:	3401      	adds	r4, #1
 800093c:	b2e6      	uxtb	r6, r4
 800093e:	2cff      	cmp	r4, #255	; 0xff
 8000940:	d12f      	bne.n	80009a2 <__aeabi_fadd+0x1a2>
 8000942:	26ff      	movs	r6, #255	; 0xff
 8000944:	2300      	movs	r3, #0
 8000946:	e780      	b.n	800084a <__aeabi_fadd+0x4a>
 8000948:	2b00      	cmp	r3, #0
 800094a:	d152      	bne.n	80009f2 <__aeabi_fadd+0x1f2>
 800094c:	2cff      	cmp	r4, #255	; 0xff
 800094e:	d000      	beq.n	8000952 <__aeabi_fadd+0x152>
 8000950:	e774      	b.n	800083c <__aeabi_fadd+0x3c>
 8000952:	000a      	movs	r2, r1
 8000954:	08ed      	lsrs	r5, r5, #3
 8000956:	2d00      	cmp	r5, #0
 8000958:	d0f3      	beq.n	8000942 <__aeabi_fadd+0x142>
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	03db      	lsls	r3, r3, #15
 800095e:	432b      	orrs	r3, r5
 8000960:	025b      	lsls	r3, r3, #9
 8000962:	0a5b      	lsrs	r3, r3, #9
 8000964:	26ff      	movs	r6, #255	; 0xff
 8000966:	e770      	b.n	800084a <__aeabi_fadd+0x4a>
 8000968:	3f01      	subs	r7, #1
 800096a:	2f00      	cmp	r7, #0
 800096c:	d0be      	beq.n	80008ec <__aeabi_fadd+0xec>
 800096e:	2cff      	cmp	r4, #255	; 0xff
 8000970:	d1b1      	bne.n	80008d6 <__aeabi_fadd+0xd6>
 8000972:	e763      	b.n	800083c <__aeabi_fadd+0x3c>
 8000974:	2c00      	cmp	r4, #0
 8000976:	d047      	beq.n	8000a08 <__aeabi_fadd+0x208>
 8000978:	28ff      	cmp	r0, #255	; 0xff
 800097a:	d069      	beq.n	8000a50 <__aeabi_fadd+0x250>
 800097c:	2480      	movs	r4, #128	; 0x80
 800097e:	04e4      	lsls	r4, r4, #19
 8000980:	427a      	negs	r2, r7
 8000982:	4325      	orrs	r5, r4
 8000984:	2a1b      	cmp	r2, #27
 8000986:	dd00      	ble.n	800098a <__aeabi_fadd+0x18a>
 8000988:	e0c5      	b.n	8000b16 <__aeabi_fadd+0x316>
 800098a:	002c      	movs	r4, r5
 800098c:	2620      	movs	r6, #32
 800098e:	40d4      	lsrs	r4, r2
 8000990:	1ab2      	subs	r2, r6, r2
 8000992:	4095      	lsls	r5, r2
 8000994:	1e6a      	subs	r2, r5, #1
 8000996:	4195      	sbcs	r5, r2
 8000998:	4325      	orrs	r5, r4
 800099a:	1b5d      	subs	r5, r3, r5
 800099c:	0004      	movs	r4, r0
 800099e:	4689      	mov	r9, r1
 80009a0:	e7a5      	b.n	80008ee <__aeabi_fadd+0xee>
 80009a2:	01ab      	lsls	r3, r5, #6
 80009a4:	0a5b      	lsrs	r3, r3, #9
 80009a6:	e750      	b.n	800084a <__aeabi_fadd+0x4a>
 80009a8:	2400      	movs	r4, #0
 80009aa:	2201      	movs	r2, #1
 80009ac:	464b      	mov	r3, r9
 80009ae:	401a      	ands	r2, r3
 80009b0:	076b      	lsls	r3, r5, #29
 80009b2:	d1ba      	bne.n	800092a <__aeabi_fadd+0x12a>
 80009b4:	e742      	b.n	800083c <__aeabi_fadd+0x3c>
 80009b6:	2f00      	cmp	r7, #0
 80009b8:	d13b      	bne.n	8000a32 <__aeabi_fadd+0x232>
 80009ba:	3401      	adds	r4, #1
 80009bc:	b2e0      	uxtb	r0, r4
 80009be:	2801      	cmp	r0, #1
 80009c0:	dd4a      	ble.n	8000a58 <__aeabi_fadd+0x258>
 80009c2:	2cff      	cmp	r4, #255	; 0xff
 80009c4:	d0bd      	beq.n	8000942 <__aeabi_fadd+0x142>
 80009c6:	2607      	movs	r6, #7
 80009c8:	18ed      	adds	r5, r5, r3
 80009ca:	086d      	lsrs	r5, r5, #1
 80009cc:	402e      	ands	r6, r5
 80009ce:	e7a7      	b.n	8000920 <__aeabi_fadd+0x120>
 80009d0:	2307      	movs	r3, #7
 80009d2:	4d57      	ldr	r5, [pc, #348]	; (8000b30 <__aeabi_fadd+0x330>)
 80009d4:	1a24      	subs	r4, r4, r0
 80009d6:	4035      	ands	r5, r6
 80009d8:	401e      	ands	r6, r3
 80009da:	e7a1      	b.n	8000920 <__aeabi_fadd+0x120>
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d11b      	bne.n	8000a18 <__aeabi_fadd+0x218>
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d16e      	bne.n	8000ac2 <__aeabi_fadd+0x2c2>
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d100      	bne.n	80009ea <__aeabi_fadd+0x1ea>
 80009e8:	e09a      	b.n	8000b20 <__aeabi_fadd+0x320>
 80009ea:	000a      	movs	r2, r1
 80009ec:	001d      	movs	r5, r3
 80009ee:	003c      	movs	r4, r7
 80009f0:	e724      	b.n	800083c <__aeabi_fadd+0x3c>
 80009f2:	3f01      	subs	r7, #1
 80009f4:	2f00      	cmp	r7, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_fadd+0x1fa>
 80009f8:	e758      	b.n	80008ac <__aeabi_fadd+0xac>
 80009fa:	2cff      	cmp	r4, #255	; 0xff
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fadd+0x200>
 80009fe:	e74a      	b.n	8000896 <__aeabi_fadd+0x96>
 8000a00:	e7a7      	b.n	8000952 <__aeabi_fadd+0x152>
 8000a02:	1b5e      	subs	r6, r3, r5
 8000a04:	4689      	mov	r9, r1
 8000a06:	e776      	b.n	80008f6 <__aeabi_fadd+0xf6>
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d11c      	bne.n	8000a46 <__aeabi_fadd+0x246>
 8000a0c:	000a      	movs	r2, r1
 8000a0e:	28ff      	cmp	r0, #255	; 0xff
 8000a10:	d01f      	beq.n	8000a52 <__aeabi_fadd+0x252>
 8000a12:	0004      	movs	r4, r0
 8000a14:	001d      	movs	r5, r3
 8000a16:	e711      	b.n	800083c <__aeabi_fadd+0x3c>
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d15d      	bne.n	8000ad8 <__aeabi_fadd+0x2d8>
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d117      	bne.n	8000a50 <__aeabi_fadd+0x250>
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	2200      	movs	r2, #0
 8000a24:	03db      	lsls	r3, r3, #15
 8000a26:	26ff      	movs	r6, #255	; 0xff
 8000a28:	e70f      	b.n	800084a <__aeabi_fadd+0x4a>
 8000a2a:	000a      	movs	r2, r1
 8000a2c:	26ff      	movs	r6, #255	; 0xff
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e70b      	b.n	800084a <__aeabi_fadd+0x4a>
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d121      	bne.n	8000a7a <__aeabi_fadd+0x27a>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d166      	bne.n	8000b08 <__aeabi_fadd+0x308>
 8000a3a:	28ff      	cmp	r0, #255	; 0xff
 8000a3c:	d1e9      	bne.n	8000a12 <__aeabi_fadd+0x212>
 8000a3e:	001d      	movs	r5, r3
 8000a40:	e787      	b.n	8000952 <__aeabi_fadd+0x152>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e752      	b.n	80008ec <__aeabi_fadd+0xec>
 8000a46:	1c7a      	adds	r2, r7, #1
 8000a48:	d0a7      	beq.n	800099a <__aeabi_fadd+0x19a>
 8000a4a:	43fa      	mvns	r2, r7
 8000a4c:	28ff      	cmp	r0, #255	; 0xff
 8000a4e:	d199      	bne.n	8000984 <__aeabi_fadd+0x184>
 8000a50:	000a      	movs	r2, r1
 8000a52:	001d      	movs	r5, r3
 8000a54:	24ff      	movs	r4, #255	; 0xff
 8000a56:	e6f1      	b.n	800083c <__aeabi_fadd+0x3c>
 8000a58:	2e00      	cmp	r6, #0
 8000a5a:	d121      	bne.n	8000aa0 <__aeabi_fadd+0x2a0>
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d04f      	beq.n	8000b00 <__aeabi_fadd+0x300>
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d04c      	beq.n	8000afe <__aeabi_fadd+0x2fe>
 8000a64:	18ed      	adds	r5, r5, r3
 8000a66:	016b      	lsls	r3, r5, #5
 8000a68:	d59e      	bpl.n	80009a8 <__aeabi_fadd+0x1a8>
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <__aeabi_fadd+0x330>)
 8000a6c:	3607      	adds	r6, #7
 8000a6e:	402e      	ands	r6, r5
 8000a70:	2401      	movs	r4, #1
 8000a72:	401d      	ands	r5, r3
 8000a74:	e754      	b.n	8000920 <__aeabi_fadd+0x120>
 8000a76:	2301      	movs	r3, #1
 8000a78:	e718      	b.n	80008ac <__aeabi_fadd+0xac>
 8000a7a:	28ff      	cmp	r0, #255	; 0xff
 8000a7c:	d0df      	beq.n	8000a3e <__aeabi_fadd+0x23e>
 8000a7e:	2480      	movs	r4, #128	; 0x80
 8000a80:	04e4      	lsls	r4, r4, #19
 8000a82:	427f      	negs	r7, r7
 8000a84:	4325      	orrs	r5, r4
 8000a86:	2f1b      	cmp	r7, #27
 8000a88:	dc4d      	bgt.n	8000b26 <__aeabi_fadd+0x326>
 8000a8a:	2620      	movs	r6, #32
 8000a8c:	1bf6      	subs	r6, r6, r7
 8000a8e:	002c      	movs	r4, r5
 8000a90:	40b5      	lsls	r5, r6
 8000a92:	40fc      	lsrs	r4, r7
 8000a94:	1e6a      	subs	r2, r5, #1
 8000a96:	4195      	sbcs	r5, r2
 8000a98:	4325      	orrs	r5, r4
 8000a9a:	18ed      	adds	r5, r5, r3
 8000a9c:	0004      	movs	r4, r0
 8000a9e:	e706      	b.n	80008ae <__aeabi_fadd+0xae>
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d0cc      	beq.n	8000a3e <__aeabi_fadd+0x23e>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fadd+0x2aa>
 8000aa8:	e753      	b.n	8000952 <__aeabi_fadd+0x152>
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	4660      	mov	r0, ip
 8000aae:	03c9      	lsls	r1, r1, #15
 8000ab0:	4208      	tst	r0, r1
 8000ab2:	d003      	beq.n	8000abc <__aeabi_fadd+0x2bc>
 8000ab4:	4640      	mov	r0, r8
 8000ab6:	4208      	tst	r0, r1
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fadd+0x2bc>
 8000aba:	001d      	movs	r5, r3
 8000abc:	2101      	movs	r1, #1
 8000abe:	4011      	ands	r1, r2
 8000ac0:	e747      	b.n	8000952 <__aeabi_fadd+0x152>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fadd+0x2c8>
 8000ac6:	e6b9      	b.n	800083c <__aeabi_fadd+0x3c>
 8000ac8:	1aea      	subs	r2, r5, r3
 8000aca:	0150      	lsls	r0, r2, #5
 8000acc:	d525      	bpl.n	8000b1a <__aeabi_fadd+0x31a>
 8000ace:	2607      	movs	r6, #7
 8000ad0:	1b5d      	subs	r5, r3, r5
 8000ad2:	402e      	ands	r6, r5
 8000ad4:	4689      	mov	r9, r1
 8000ad6:	e723      	b.n	8000920 <__aeabi_fadd+0x120>
 8000ad8:	24ff      	movs	r4, #255	; 0xff
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fadd+0x2e0>
 8000ade:	e6ad      	b.n	800083c <__aeabi_fadd+0x3c>
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	4660      	mov	r0, ip
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	4210      	tst	r0, r2
 8000ae8:	d004      	beq.n	8000af4 <__aeabi_fadd+0x2f4>
 8000aea:	4640      	mov	r0, r8
 8000aec:	4210      	tst	r0, r2
 8000aee:	d101      	bne.n	8000af4 <__aeabi_fadd+0x2f4>
 8000af0:	001d      	movs	r5, r3
 8000af2:	4689      	mov	r9, r1
 8000af4:	2201      	movs	r2, #1
 8000af6:	464b      	mov	r3, r9
 8000af8:	24ff      	movs	r4, #255	; 0xff
 8000afa:	401a      	ands	r2, r3
 8000afc:	e69e      	b.n	800083c <__aeabi_fadd+0x3c>
 8000afe:	002b      	movs	r3, r5
 8000b00:	08dd      	lsrs	r5, r3, #3
 8000b02:	000a      	movs	r2, r1
 8000b04:	2400      	movs	r4, #0
 8000b06:	e69d      	b.n	8000844 <__aeabi_fadd+0x44>
 8000b08:	1c7a      	adds	r2, r7, #1
 8000b0a:	d0c6      	beq.n	8000a9a <__aeabi_fadd+0x29a>
 8000b0c:	43ff      	mvns	r7, r7
 8000b0e:	28ff      	cmp	r0, #255	; 0xff
 8000b10:	d1b9      	bne.n	8000a86 <__aeabi_fadd+0x286>
 8000b12:	001d      	movs	r5, r3
 8000b14:	e71d      	b.n	8000952 <__aeabi_fadd+0x152>
 8000b16:	2501      	movs	r5, #1
 8000b18:	e73f      	b.n	800099a <__aeabi_fadd+0x19a>
 8000b1a:	1e15      	subs	r5, r2, #0
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x320>
 8000b1e:	e744      	b.n	80009aa <__aeabi_fadd+0x1aa>
 8000b20:	2200      	movs	r2, #0
 8000b22:	2300      	movs	r3, #0
 8000b24:	e691      	b.n	800084a <__aeabi_fadd+0x4a>
 8000b26:	2501      	movs	r5, #1
 8000b28:	e7b7      	b.n	8000a9a <__aeabi_fadd+0x29a>
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	7dffffff 	.word	0x7dffffff
 8000b30:	fbffffff 	.word	0xfbffffff

08000b34 <__aeabi_fdiv>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	4657      	mov	r7, sl
 8000b38:	464e      	mov	r6, r9
 8000b3a:	4645      	mov	r5, r8
 8000b3c:	46de      	mov	lr, fp
 8000b3e:	0244      	lsls	r4, r0, #9
 8000b40:	b5e0      	push	{r5, r6, r7, lr}
 8000b42:	0046      	lsls	r6, r0, #1
 8000b44:	4688      	mov	r8, r1
 8000b46:	0a64      	lsrs	r4, r4, #9
 8000b48:	0e36      	lsrs	r6, r6, #24
 8000b4a:	0fc7      	lsrs	r7, r0, #31
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d063      	beq.n	8000c18 <__aeabi_fdiv+0xe4>
 8000b50:	2eff      	cmp	r6, #255	; 0xff
 8000b52:	d024      	beq.n	8000b9e <__aeabi_fdiv+0x6a>
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	00e4      	lsls	r4, r4, #3
 8000b58:	04db      	lsls	r3, r3, #19
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	4699      	mov	r9, r3
 8000b60:	469b      	mov	fp, r3
 8000b62:	3e7f      	subs	r6, #127	; 0x7f
 8000b64:	4643      	mov	r3, r8
 8000b66:	4642      	mov	r2, r8
 8000b68:	025d      	lsls	r5, r3, #9
 8000b6a:	0fd2      	lsrs	r2, r2, #31
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	0a6d      	lsrs	r5, r5, #9
 8000b70:	0e1b      	lsrs	r3, r3, #24
 8000b72:	4690      	mov	r8, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	d065      	beq.n	8000c44 <__aeabi_fdiv+0x110>
 8000b78:	2bff      	cmp	r3, #255	; 0xff
 8000b7a:	d055      	beq.n	8000c28 <__aeabi_fdiv+0xf4>
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	2100      	movs	r1, #0
 8000b80:	00ed      	lsls	r5, r5, #3
 8000b82:	04d2      	lsls	r2, r2, #19
 8000b84:	3b7f      	subs	r3, #127	; 0x7f
 8000b86:	4315      	orrs	r5, r2
 8000b88:	1af6      	subs	r6, r6, r3
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	407b      	eors	r3, r7
 8000b90:	2a0f      	cmp	r2, #15
 8000b92:	d900      	bls.n	8000b96 <__aeabi_fdiv+0x62>
 8000b94:	e08d      	b.n	8000cb2 <__aeabi_fdiv+0x17e>
 8000b96:	486d      	ldr	r0, [pc, #436]	; (8000d4c <__aeabi_fdiv+0x218>)
 8000b98:	0092      	lsls	r2, r2, #2
 8000b9a:	5882      	ldr	r2, [r0, r2]
 8000b9c:	4697      	mov	pc, r2
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d154      	bne.n	8000c4c <__aeabi_fdiv+0x118>
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	4699      	mov	r9, r3
 8000ba6:	3b06      	subs	r3, #6
 8000ba8:	26ff      	movs	r6, #255	; 0xff
 8000baa:	469b      	mov	fp, r3
 8000bac:	e7da      	b.n	8000b64 <__aeabi_fdiv+0x30>
 8000bae:	2500      	movs	r5, #0
 8000bb0:	4653      	mov	r3, sl
 8000bb2:	2902      	cmp	r1, #2
 8000bb4:	d01b      	beq.n	8000bee <__aeabi_fdiv+0xba>
 8000bb6:	2903      	cmp	r1, #3
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fdiv+0x88>
 8000bba:	e0bf      	b.n	8000d3c <__aeabi_fdiv+0x208>
 8000bbc:	2901      	cmp	r1, #1
 8000bbe:	d028      	beq.n	8000c12 <__aeabi_fdiv+0xde>
 8000bc0:	0030      	movs	r0, r6
 8000bc2:	307f      	adds	r0, #127	; 0x7f
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	dd20      	ble.n	8000c0a <__aeabi_fdiv+0xd6>
 8000bc8:	076a      	lsls	r2, r5, #29
 8000bca:	d004      	beq.n	8000bd6 <__aeabi_fdiv+0xa2>
 8000bcc:	220f      	movs	r2, #15
 8000bce:	402a      	ands	r2, r5
 8000bd0:	2a04      	cmp	r2, #4
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_fdiv+0xa2>
 8000bd4:	3504      	adds	r5, #4
 8000bd6:	012a      	lsls	r2, r5, #4
 8000bd8:	d503      	bpl.n	8000be2 <__aeabi_fdiv+0xae>
 8000bda:	0030      	movs	r0, r6
 8000bdc:	4a5c      	ldr	r2, [pc, #368]	; (8000d50 <__aeabi_fdiv+0x21c>)
 8000bde:	3080      	adds	r0, #128	; 0x80
 8000be0:	4015      	ands	r5, r2
 8000be2:	28fe      	cmp	r0, #254	; 0xfe
 8000be4:	dc03      	bgt.n	8000bee <__aeabi_fdiv+0xba>
 8000be6:	01ac      	lsls	r4, r5, #6
 8000be8:	0a64      	lsrs	r4, r4, #9
 8000bea:	b2c2      	uxtb	r2, r0
 8000bec:	e001      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000bee:	22ff      	movs	r2, #255	; 0xff
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	0264      	lsls	r4, r4, #9
 8000bf4:	05d2      	lsls	r2, r2, #23
 8000bf6:	0a60      	lsrs	r0, r4, #9
 8000bf8:	07db      	lsls	r3, r3, #31
 8000bfa:	4310      	orrs	r0, r2
 8000bfc:	4318      	orrs	r0, r3
 8000bfe:	bc3c      	pop	{r2, r3, r4, r5}
 8000c00:	4690      	mov	r8, r2
 8000c02:	4699      	mov	r9, r3
 8000c04:	46a2      	mov	sl, r4
 8000c06:	46ab      	mov	fp, r5
 8000c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	1a10      	subs	r0, r2, r0
 8000c0e:	281b      	cmp	r0, #27
 8000c10:	dd7c      	ble.n	8000d0c <__aeabi_fdiv+0x1d8>
 8000c12:	2200      	movs	r2, #0
 8000c14:	2400      	movs	r4, #0
 8000c16:	e7ec      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	d11d      	bne.n	8000c58 <__aeabi_fdiv+0x124>
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	4699      	mov	r9, r3
 8000c20:	3b03      	subs	r3, #3
 8000c22:	2600      	movs	r6, #0
 8000c24:	469b      	mov	fp, r3
 8000c26:	e79d      	b.n	8000b64 <__aeabi_fdiv+0x30>
 8000c28:	3eff      	subs	r6, #255	; 0xff
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d120      	bne.n	8000c70 <__aeabi_fdiv+0x13c>
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4643      	mov	r3, r8
 8000c32:	464a      	mov	r2, r9
 8000c34:	407b      	eors	r3, r7
 8000c36:	430a      	orrs	r2, r1
 8000c38:	2a0f      	cmp	r2, #15
 8000c3a:	d8d8      	bhi.n	8000bee <__aeabi_fdiv+0xba>
 8000c3c:	4845      	ldr	r0, [pc, #276]	; (8000d54 <__aeabi_fdiv+0x220>)
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	5882      	ldr	r2, [r0, r2]
 8000c42:	4697      	mov	pc, r2
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d119      	bne.n	8000c7c <__aeabi_fdiv+0x148>
 8000c48:	2101      	movs	r1, #1
 8000c4a:	e7f1      	b.n	8000c30 <__aeabi_fdiv+0xfc>
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	4699      	mov	r9, r3
 8000c50:	3b09      	subs	r3, #9
 8000c52:	26ff      	movs	r6, #255	; 0xff
 8000c54:	469b      	mov	fp, r3
 8000c56:	e785      	b.n	8000b64 <__aeabi_fdiv+0x30>
 8000c58:	0020      	movs	r0, r4
 8000c5a:	f002 f953 	bl	8002f04 <__clzsi2>
 8000c5e:	2676      	movs	r6, #118	; 0x76
 8000c60:	1f43      	subs	r3, r0, #5
 8000c62:	409c      	lsls	r4, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	4276      	negs	r6, r6
 8000c68:	1a36      	subs	r6, r6, r0
 8000c6a:	4699      	mov	r9, r3
 8000c6c:	469b      	mov	fp, r3
 8000c6e:	e779      	b.n	8000b64 <__aeabi_fdiv+0x30>
 8000c70:	464a      	mov	r2, r9
 8000c72:	2303      	movs	r3, #3
 8000c74:	431a      	orrs	r2, r3
 8000c76:	4691      	mov	r9, r2
 8000c78:	2103      	movs	r1, #3
 8000c7a:	e786      	b.n	8000b8a <__aeabi_fdiv+0x56>
 8000c7c:	0028      	movs	r0, r5
 8000c7e:	f002 f941 	bl	8002f04 <__clzsi2>
 8000c82:	1f43      	subs	r3, r0, #5
 8000c84:	1836      	adds	r6, r6, r0
 8000c86:	409d      	lsls	r5, r3
 8000c88:	3676      	adds	r6, #118	; 0x76
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e77d      	b.n	8000b8a <__aeabi_fdiv+0x56>
 8000c8e:	2480      	movs	r4, #128	; 0x80
 8000c90:	2300      	movs	r3, #0
 8000c92:	03e4      	lsls	r4, r4, #15
 8000c94:	22ff      	movs	r2, #255	; 0xff
 8000c96:	e7ac      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000c98:	2500      	movs	r5, #0
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	03db      	lsls	r3, r3, #15
 8000c9e:	421c      	tst	r4, r3
 8000ca0:	d028      	beq.n	8000cf4 <__aeabi_fdiv+0x1c0>
 8000ca2:	421d      	tst	r5, r3
 8000ca4:	d126      	bne.n	8000cf4 <__aeabi_fdiv+0x1c0>
 8000ca6:	432b      	orrs	r3, r5
 8000ca8:	025c      	lsls	r4, r3, #9
 8000caa:	0a64      	lsrs	r4, r4, #9
 8000cac:	4643      	mov	r3, r8
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	e79f      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000cb2:	0162      	lsls	r2, r4, #5
 8000cb4:	016c      	lsls	r4, r5, #5
 8000cb6:	42a2      	cmp	r2, r4
 8000cb8:	d224      	bcs.n	8000d04 <__aeabi_fdiv+0x1d0>
 8000cba:	211b      	movs	r1, #27
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	3e01      	subs	r6, #1
 8000cc0:	2701      	movs	r7, #1
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	006d      	lsls	r5, r5, #1
 8000cc6:	0052      	lsls	r2, r2, #1
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	db01      	blt.n	8000cd0 <__aeabi_fdiv+0x19c>
 8000ccc:	4294      	cmp	r4, r2
 8000cce:	d801      	bhi.n	8000cd4 <__aeabi_fdiv+0x1a0>
 8000cd0:	1b12      	subs	r2, r2, r4
 8000cd2:	433d      	orrs	r5, r7
 8000cd4:	3901      	subs	r1, #1
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d1f3      	bne.n	8000cc2 <__aeabi_fdiv+0x18e>
 8000cda:	0014      	movs	r4, r2
 8000cdc:	1e62      	subs	r2, r4, #1
 8000cde:	4194      	sbcs	r4, r2
 8000ce0:	4325      	orrs	r5, r4
 8000ce2:	e76d      	b.n	8000bc0 <__aeabi_fdiv+0x8c>
 8000ce4:	46ba      	mov	sl, r7
 8000ce6:	4659      	mov	r1, fp
 8000ce8:	0025      	movs	r5, r4
 8000cea:	4653      	mov	r3, sl
 8000cec:	2902      	cmp	r1, #2
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fdiv+0x1be>
 8000cf0:	e761      	b.n	8000bb6 <__aeabi_fdiv+0x82>
 8000cf2:	e77c      	b.n	8000bee <__aeabi_fdiv+0xba>
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	03db      	lsls	r3, r3, #15
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	0264      	lsls	r4, r4, #9
 8000cfc:	0a64      	lsrs	r4, r4, #9
 8000cfe:	003b      	movs	r3, r7
 8000d00:	22ff      	movs	r2, #255	; 0xff
 8000d02:	e776      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000d04:	1b12      	subs	r2, r2, r4
 8000d06:	211a      	movs	r1, #26
 8000d08:	2501      	movs	r5, #1
 8000d0a:	e7d9      	b.n	8000cc0 <__aeabi_fdiv+0x18c>
 8000d0c:	369e      	adds	r6, #158	; 0x9e
 8000d0e:	002a      	movs	r2, r5
 8000d10:	40b5      	lsls	r5, r6
 8000d12:	002c      	movs	r4, r5
 8000d14:	40c2      	lsrs	r2, r0
 8000d16:	1e65      	subs	r5, r4, #1
 8000d18:	41ac      	sbcs	r4, r5
 8000d1a:	4314      	orrs	r4, r2
 8000d1c:	0762      	lsls	r2, r4, #29
 8000d1e:	d004      	beq.n	8000d2a <__aeabi_fdiv+0x1f6>
 8000d20:	220f      	movs	r2, #15
 8000d22:	4022      	ands	r2, r4
 8000d24:	2a04      	cmp	r2, #4
 8000d26:	d000      	beq.n	8000d2a <__aeabi_fdiv+0x1f6>
 8000d28:	3404      	adds	r4, #4
 8000d2a:	0162      	lsls	r2, r4, #5
 8000d2c:	d403      	bmi.n	8000d36 <__aeabi_fdiv+0x202>
 8000d2e:	01a4      	lsls	r4, r4, #6
 8000d30:	0a64      	lsrs	r4, r4, #9
 8000d32:	2200      	movs	r2, #0
 8000d34:	e75d      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000d36:	2201      	movs	r2, #1
 8000d38:	2400      	movs	r4, #0
 8000d3a:	e75a      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000d3c:	2480      	movs	r4, #128	; 0x80
 8000d3e:	03e4      	lsls	r4, r4, #15
 8000d40:	432c      	orrs	r4, r5
 8000d42:	0264      	lsls	r4, r4, #9
 8000d44:	0a64      	lsrs	r4, r4, #9
 8000d46:	22ff      	movs	r2, #255	; 0xff
 8000d48:	e753      	b.n	8000bf2 <__aeabi_fdiv+0xbe>
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	08018b44 	.word	0x08018b44
 8000d50:	f7ffffff 	.word	0xf7ffffff
 8000d54:	08018b84 	.word	0x08018b84

08000d58 <__eqsf2>:
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	0042      	lsls	r2, r0, #1
 8000d5c:	024e      	lsls	r6, r1, #9
 8000d5e:	004c      	lsls	r4, r1, #1
 8000d60:	0245      	lsls	r5, r0, #9
 8000d62:	0a6d      	lsrs	r5, r5, #9
 8000d64:	0e12      	lsrs	r2, r2, #24
 8000d66:	0fc3      	lsrs	r3, r0, #31
 8000d68:	0a76      	lsrs	r6, r6, #9
 8000d6a:	0e24      	lsrs	r4, r4, #24
 8000d6c:	0fc9      	lsrs	r1, r1, #31
 8000d6e:	2aff      	cmp	r2, #255	; 0xff
 8000d70:	d00f      	beq.n	8000d92 <__eqsf2+0x3a>
 8000d72:	2cff      	cmp	r4, #255	; 0xff
 8000d74:	d011      	beq.n	8000d9a <__eqsf2+0x42>
 8000d76:	2001      	movs	r0, #1
 8000d78:	42a2      	cmp	r2, r4
 8000d7a:	d000      	beq.n	8000d7e <__eqsf2+0x26>
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	42b5      	cmp	r5, r6
 8000d80:	d1fc      	bne.n	8000d7c <__eqsf2+0x24>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d00d      	beq.n	8000da2 <__eqsf2+0x4a>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d1f8      	bne.n	8000d7c <__eqsf2+0x24>
 8000d8a:	0028      	movs	r0, r5
 8000d8c:	1e45      	subs	r5, r0, #1
 8000d8e:	41a8      	sbcs	r0, r5
 8000d90:	e7f4      	b.n	8000d7c <__eqsf2+0x24>
 8000d92:	2001      	movs	r0, #1
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	d1f1      	bne.n	8000d7c <__eqsf2+0x24>
 8000d98:	e7eb      	b.n	8000d72 <__eqsf2+0x1a>
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d1ed      	bne.n	8000d7c <__eqsf2+0x24>
 8000da0:	e7e9      	b.n	8000d76 <__eqsf2+0x1e>
 8000da2:	2000      	movs	r0, #0
 8000da4:	e7ea      	b.n	8000d7c <__eqsf2+0x24>
 8000da6:	46c0      	nop			; (mov r8, r8)

08000da8 <__gesf2>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	004a      	lsls	r2, r1, #1
 8000dac:	024e      	lsls	r6, r1, #9
 8000dae:	0245      	lsls	r5, r0, #9
 8000db0:	0044      	lsls	r4, r0, #1
 8000db2:	0a6d      	lsrs	r5, r5, #9
 8000db4:	0e24      	lsrs	r4, r4, #24
 8000db6:	0fc3      	lsrs	r3, r0, #31
 8000db8:	0a76      	lsrs	r6, r6, #9
 8000dba:	0e12      	lsrs	r2, r2, #24
 8000dbc:	0fc9      	lsrs	r1, r1, #31
 8000dbe:	2cff      	cmp	r4, #255	; 0xff
 8000dc0:	d015      	beq.n	8000dee <__gesf2+0x46>
 8000dc2:	2aff      	cmp	r2, #255	; 0xff
 8000dc4:	d00e      	beq.n	8000de4 <__gesf2+0x3c>
 8000dc6:	2c00      	cmp	r4, #0
 8000dc8:	d115      	bne.n	8000df6 <__gesf2+0x4e>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d101      	bne.n	8000dd2 <__gesf2+0x2a>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d01c      	beq.n	8000e0c <__gesf2+0x64>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d014      	beq.n	8000e00 <__gesf2+0x58>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d027      	beq.n	8000e2a <__gesf2+0x82>
 8000dda:	2002      	movs	r0, #2
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	4018      	ands	r0, r3
 8000de0:	3801      	subs	r0, #1
 8000de2:	bd70      	pop	{r4, r5, r6, pc}
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	d0ee      	beq.n	8000dc6 <__gesf2+0x1e>
 8000de8:	2002      	movs	r0, #2
 8000dea:	4240      	negs	r0, r0
 8000dec:	e7f9      	b.n	8000de2 <__gesf2+0x3a>
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d1fa      	bne.n	8000de8 <__gesf2+0x40>
 8000df2:	2aff      	cmp	r2, #255	; 0xff
 8000df4:	d00e      	beq.n	8000e14 <__gesf2+0x6c>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	d10e      	bne.n	8000e18 <__gesf2+0x70>
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d0ed      	beq.n	8000dda <__gesf2+0x32>
 8000dfe:	e00b      	b.n	8000e18 <__gesf2+0x70>
 8000e00:	2301      	movs	r3, #1
 8000e02:	3901      	subs	r1, #1
 8000e04:	4399      	bics	r1, r3
 8000e06:	0008      	movs	r0, r1
 8000e08:	3001      	adds	r0, #1
 8000e0a:	e7ea      	b.n	8000de2 <__gesf2+0x3a>
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	d0e7      	beq.n	8000de2 <__gesf2+0x3a>
 8000e12:	e7e2      	b.n	8000dda <__gesf2+0x32>
 8000e14:	2e00      	cmp	r6, #0
 8000e16:	d1e7      	bne.n	8000de8 <__gesf2+0x40>
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d1de      	bne.n	8000dda <__gesf2+0x32>
 8000e1c:	4294      	cmp	r4, r2
 8000e1e:	dd05      	ble.n	8000e2c <__gesf2+0x84>
 8000e20:	2102      	movs	r1, #2
 8000e22:	1e58      	subs	r0, r3, #1
 8000e24:	4008      	ands	r0, r1
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7db      	b.n	8000de2 <__gesf2+0x3a>
 8000e2a:	2400      	movs	r4, #0
 8000e2c:	42a2      	cmp	r2, r4
 8000e2e:	dc04      	bgt.n	8000e3a <__gesf2+0x92>
 8000e30:	42b5      	cmp	r5, r6
 8000e32:	d8d2      	bhi.n	8000dda <__gesf2+0x32>
 8000e34:	2000      	movs	r0, #0
 8000e36:	42b5      	cmp	r5, r6
 8000e38:	d2d3      	bcs.n	8000de2 <__gesf2+0x3a>
 8000e3a:	1e58      	subs	r0, r3, #1
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	4398      	bics	r0, r3
 8000e40:	3001      	adds	r0, #1
 8000e42:	e7ce      	b.n	8000de2 <__gesf2+0x3a>

08000e44 <__lesf2>:
 8000e44:	b530      	push	{r4, r5, lr}
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0244      	lsls	r4, r0, #9
 8000e4a:	024d      	lsls	r5, r1, #9
 8000e4c:	0fc3      	lsrs	r3, r0, #31
 8000e4e:	0048      	lsls	r0, r1, #1
 8000e50:	0a64      	lsrs	r4, r4, #9
 8000e52:	0e12      	lsrs	r2, r2, #24
 8000e54:	0a6d      	lsrs	r5, r5, #9
 8000e56:	0e00      	lsrs	r0, r0, #24
 8000e58:	0fc9      	lsrs	r1, r1, #31
 8000e5a:	2aff      	cmp	r2, #255	; 0xff
 8000e5c:	d012      	beq.n	8000e84 <__lesf2+0x40>
 8000e5e:	28ff      	cmp	r0, #255	; 0xff
 8000e60:	d00c      	beq.n	8000e7c <__lesf2+0x38>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d112      	bne.n	8000e8c <__lesf2+0x48>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d119      	bne.n	8000e9e <__lesf2+0x5a>
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	d117      	bne.n	8000e9e <__lesf2+0x5a>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d02b      	beq.n	8000eca <__lesf2+0x86>
 8000e72:	2002      	movs	r0, #2
 8000e74:	3b01      	subs	r3, #1
 8000e76:	4018      	ands	r0, r3
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e026      	b.n	8000eca <__lesf2+0x86>
 8000e7c:	2d00      	cmp	r5, #0
 8000e7e:	d0f0      	beq.n	8000e62 <__lesf2+0x1e>
 8000e80:	2002      	movs	r0, #2
 8000e82:	e022      	b.n	8000eca <__lesf2+0x86>
 8000e84:	2c00      	cmp	r4, #0
 8000e86:	d1fb      	bne.n	8000e80 <__lesf2+0x3c>
 8000e88:	28ff      	cmp	r0, #255	; 0xff
 8000e8a:	d01f      	beq.n	8000ecc <__lesf2+0x88>
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	d11f      	bne.n	8000ed0 <__lesf2+0x8c>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d11d      	bne.n	8000ed0 <__lesf2+0x8c>
 8000e94:	2002      	movs	r0, #2
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4018      	ands	r0, r3
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e015      	b.n	8000eca <__lesf2+0x86>
 8000e9e:	2c00      	cmp	r4, #0
 8000ea0:	d00e      	beq.n	8000ec0 <__lesf2+0x7c>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d1e5      	bne.n	8000e72 <__lesf2+0x2e>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4290      	cmp	r0, r2
 8000eaa:	dc04      	bgt.n	8000eb6 <__lesf2+0x72>
 8000eac:	42ac      	cmp	r4, r5
 8000eae:	d8e0      	bhi.n	8000e72 <__lesf2+0x2e>
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	d209      	bcs.n	8000eca <__lesf2+0x86>
 8000eb6:	1e58      	subs	r0, r3, #1
 8000eb8:	2301      	movs	r3, #1
 8000eba:	4398      	bics	r0, r3
 8000ebc:	3001      	adds	r0, #1
 8000ebe:	e004      	b.n	8000eca <__lesf2+0x86>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	3901      	subs	r1, #1
 8000ec4:	4399      	bics	r1, r3
 8000ec6:	0008      	movs	r0, r1
 8000ec8:	3001      	adds	r0, #1
 8000eca:	bd30      	pop	{r4, r5, pc}
 8000ecc:	2d00      	cmp	r5, #0
 8000ece:	d1d7      	bne.n	8000e80 <__lesf2+0x3c>
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d1ce      	bne.n	8000e72 <__lesf2+0x2e>
 8000ed4:	4282      	cmp	r2, r0
 8000ed6:	dde7      	ble.n	8000ea8 <__lesf2+0x64>
 8000ed8:	2102      	movs	r1, #2
 8000eda:	1e58      	subs	r0, r3, #1
 8000edc:	4008      	ands	r0, r1
 8000ede:	3801      	subs	r0, #1
 8000ee0:	e7f3      	b.n	8000eca <__lesf2+0x86>
 8000ee2:	46c0      	nop			; (mov r8, r8)

08000ee4 <__aeabi_fmul>:
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	464e      	mov	r6, r9
 8000ee8:	4657      	mov	r7, sl
 8000eea:	4645      	mov	r5, r8
 8000eec:	46de      	mov	lr, fp
 8000eee:	b5e0      	push	{r5, r6, r7, lr}
 8000ef0:	0243      	lsls	r3, r0, #9
 8000ef2:	0a5b      	lsrs	r3, r3, #9
 8000ef4:	0045      	lsls	r5, r0, #1
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	1c0f      	adds	r7, r1, #0
 8000efa:	4699      	mov	r9, r3
 8000efc:	0e2d      	lsrs	r5, r5, #24
 8000efe:	0fc6      	lsrs	r6, r0, #31
 8000f00:	2d00      	cmp	r5, #0
 8000f02:	d057      	beq.n	8000fb4 <__aeabi_fmul+0xd0>
 8000f04:	2dff      	cmp	r5, #255	; 0xff
 8000f06:	d024      	beq.n	8000f52 <__aeabi_fmul+0x6e>
 8000f08:	2080      	movs	r0, #128	; 0x80
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	04c0      	lsls	r0, r0, #19
 8000f0e:	4318      	orrs	r0, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	4681      	mov	r9, r0
 8000f14:	469a      	mov	sl, r3
 8000f16:	469b      	mov	fp, r3
 8000f18:	3d7f      	subs	r5, #127	; 0x7f
 8000f1a:	027c      	lsls	r4, r7, #9
 8000f1c:	007a      	lsls	r2, r7, #1
 8000f1e:	0ffb      	lsrs	r3, r7, #31
 8000f20:	0a64      	lsrs	r4, r4, #9
 8000f22:	0e12      	lsrs	r2, r2, #24
 8000f24:	4698      	mov	r8, r3
 8000f26:	d023      	beq.n	8000f70 <__aeabi_fmul+0x8c>
 8000f28:	2aff      	cmp	r2, #255	; 0xff
 8000f2a:	d04b      	beq.n	8000fc4 <__aeabi_fmul+0xe0>
 8000f2c:	00e3      	lsls	r3, r4, #3
 8000f2e:	2480      	movs	r4, #128	; 0x80
 8000f30:	2000      	movs	r0, #0
 8000f32:	04e4      	lsls	r4, r4, #19
 8000f34:	3a7f      	subs	r2, #127	; 0x7f
 8000f36:	431c      	orrs	r4, r3
 8000f38:	18ad      	adds	r5, r5, r2
 8000f3a:	1c6b      	adds	r3, r5, #1
 8000f3c:	4647      	mov	r7, r8
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	4653      	mov	r3, sl
 8000f42:	4077      	eors	r7, r6
 8000f44:	003a      	movs	r2, r7
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d848      	bhi.n	8000fdc <__aeabi_fmul+0xf8>
 8000f4a:	497d      	ldr	r1, [pc, #500]	; (8001140 <__aeabi_fmul+0x25c>)
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	58cb      	ldr	r3, [r1, r3]
 8000f50:	469f      	mov	pc, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d000      	beq.n	8000f58 <__aeabi_fmul+0x74>
 8000f56:	e085      	b.n	8001064 <__aeabi_fmul+0x180>
 8000f58:	3308      	adds	r3, #8
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	3b06      	subs	r3, #6
 8000f5e:	469b      	mov	fp, r3
 8000f60:	027c      	lsls	r4, r7, #9
 8000f62:	007a      	lsls	r2, r7, #1
 8000f64:	0ffb      	lsrs	r3, r7, #31
 8000f66:	25ff      	movs	r5, #255	; 0xff
 8000f68:	0a64      	lsrs	r4, r4, #9
 8000f6a:	0e12      	lsrs	r2, r2, #24
 8000f6c:	4698      	mov	r8, r3
 8000f6e:	d1db      	bne.n	8000f28 <__aeabi_fmul+0x44>
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d000      	beq.n	8000f76 <__aeabi_fmul+0x92>
 8000f74:	e090      	b.n	8001098 <__aeabi_fmul+0x1b4>
 8000f76:	4652      	mov	r2, sl
 8000f78:	2301      	movs	r3, #1
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	4692      	mov	sl, r2
 8000f7e:	2001      	movs	r0, #1
 8000f80:	e7db      	b.n	8000f3a <__aeabi_fmul+0x56>
 8000f82:	464c      	mov	r4, r9
 8000f84:	4658      	mov	r0, fp
 8000f86:	0017      	movs	r7, r2
 8000f88:	2802      	cmp	r0, #2
 8000f8a:	d024      	beq.n	8000fd6 <__aeabi_fmul+0xf2>
 8000f8c:	2803      	cmp	r0, #3
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fmul+0xae>
 8000f90:	e0cf      	b.n	8001132 <__aeabi_fmul+0x24e>
 8000f92:	2200      	movs	r2, #0
 8000f94:	2300      	movs	r3, #0
 8000f96:	2801      	cmp	r0, #1
 8000f98:	d14d      	bne.n	8001036 <__aeabi_fmul+0x152>
 8000f9a:	0258      	lsls	r0, r3, #9
 8000f9c:	05d2      	lsls	r2, r2, #23
 8000f9e:	0a40      	lsrs	r0, r0, #9
 8000fa0:	07ff      	lsls	r7, r7, #31
 8000fa2:	4310      	orrs	r0, r2
 8000fa4:	4338      	orrs	r0, r7
 8000fa6:	b003      	add	sp, #12
 8000fa8:	bc3c      	pop	{r2, r3, r4, r5}
 8000faa:	4690      	mov	r8, r2
 8000fac:	4699      	mov	r9, r3
 8000fae:	46a2      	mov	sl, r4
 8000fb0:	46ab      	mov	fp, r5
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d15b      	bne.n	8001070 <__aeabi_fmul+0x18c>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	469a      	mov	sl, r3
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	2500      	movs	r5, #0
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	e7aa      	b.n	8000f1a <__aeabi_fmul+0x36>
 8000fc4:	35ff      	adds	r5, #255	; 0xff
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d160      	bne.n	800108c <__aeabi_fmul+0x1a8>
 8000fca:	4652      	mov	r2, sl
 8000fcc:	2302      	movs	r3, #2
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	4692      	mov	sl, r2
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	e7b1      	b.n	8000f3a <__aeabi_fmul+0x56>
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e7de      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8000fdc:	464b      	mov	r3, r9
 8000fde:	0c1b      	lsrs	r3, r3, #16
 8000fe0:	469c      	mov	ip, r3
 8000fe2:	464b      	mov	r3, r9
 8000fe4:	0426      	lsls	r6, r4, #16
 8000fe6:	0c36      	lsrs	r6, r6, #16
 8000fe8:	0418      	lsls	r0, r3, #16
 8000fea:	4661      	mov	r1, ip
 8000fec:	0033      	movs	r3, r6
 8000fee:	0c22      	lsrs	r2, r4, #16
 8000ff0:	4664      	mov	r4, ip
 8000ff2:	0c00      	lsrs	r0, r0, #16
 8000ff4:	4343      	muls	r3, r0
 8000ff6:	434e      	muls	r6, r1
 8000ff8:	4350      	muls	r0, r2
 8000ffa:	4354      	muls	r4, r2
 8000ffc:	1980      	adds	r0, r0, r6
 8000ffe:	0c1a      	lsrs	r2, r3, #16
 8001000:	1812      	adds	r2, r2, r0
 8001002:	4296      	cmp	r6, r2
 8001004:	d903      	bls.n	800100e <__aeabi_fmul+0x12a>
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	0249      	lsls	r1, r1, #9
 800100a:	468c      	mov	ip, r1
 800100c:	4464      	add	r4, ip
 800100e:	041b      	lsls	r3, r3, #16
 8001010:	0c1b      	lsrs	r3, r3, #16
 8001012:	0410      	lsls	r0, r2, #16
 8001014:	18c0      	adds	r0, r0, r3
 8001016:	0183      	lsls	r3, r0, #6
 8001018:	1e5e      	subs	r6, r3, #1
 800101a:	41b3      	sbcs	r3, r6
 800101c:	0e80      	lsrs	r0, r0, #26
 800101e:	4318      	orrs	r0, r3
 8001020:	0c13      	lsrs	r3, r2, #16
 8001022:	191b      	adds	r3, r3, r4
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	4303      	orrs	r3, r0
 8001028:	001c      	movs	r4, r3
 800102a:	0123      	lsls	r3, r4, #4
 800102c:	d579      	bpl.n	8001122 <__aeabi_fmul+0x23e>
 800102e:	2301      	movs	r3, #1
 8001030:	0862      	lsrs	r2, r4, #1
 8001032:	401c      	ands	r4, r3
 8001034:	4314      	orrs	r4, r2
 8001036:	9a01      	ldr	r2, [sp, #4]
 8001038:	327f      	adds	r2, #127	; 0x7f
 800103a:	2a00      	cmp	r2, #0
 800103c:	dd4d      	ble.n	80010da <__aeabi_fmul+0x1f6>
 800103e:	0763      	lsls	r3, r4, #29
 8001040:	d004      	beq.n	800104c <__aeabi_fmul+0x168>
 8001042:	230f      	movs	r3, #15
 8001044:	4023      	ands	r3, r4
 8001046:	2b04      	cmp	r3, #4
 8001048:	d000      	beq.n	800104c <__aeabi_fmul+0x168>
 800104a:	3404      	adds	r4, #4
 800104c:	0123      	lsls	r3, r4, #4
 800104e:	d503      	bpl.n	8001058 <__aeabi_fmul+0x174>
 8001050:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <__aeabi_fmul+0x260>)
 8001052:	9a01      	ldr	r2, [sp, #4]
 8001054:	401c      	ands	r4, r3
 8001056:	3280      	adds	r2, #128	; 0x80
 8001058:	2afe      	cmp	r2, #254	; 0xfe
 800105a:	dcbc      	bgt.n	8000fd6 <__aeabi_fmul+0xf2>
 800105c:	01a3      	lsls	r3, r4, #6
 800105e:	0a5b      	lsrs	r3, r3, #9
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	e79a      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8001064:	230c      	movs	r3, #12
 8001066:	469a      	mov	sl, r3
 8001068:	3b09      	subs	r3, #9
 800106a:	25ff      	movs	r5, #255	; 0xff
 800106c:	469b      	mov	fp, r3
 800106e:	e754      	b.n	8000f1a <__aeabi_fmul+0x36>
 8001070:	0018      	movs	r0, r3
 8001072:	f001 ff47 	bl	8002f04 <__clzsi2>
 8001076:	464a      	mov	r2, r9
 8001078:	1f43      	subs	r3, r0, #5
 800107a:	2576      	movs	r5, #118	; 0x76
 800107c:	409a      	lsls	r2, r3
 800107e:	2300      	movs	r3, #0
 8001080:	426d      	negs	r5, r5
 8001082:	4691      	mov	r9, r2
 8001084:	1a2d      	subs	r5, r5, r0
 8001086:	469a      	mov	sl, r3
 8001088:	469b      	mov	fp, r3
 800108a:	e746      	b.n	8000f1a <__aeabi_fmul+0x36>
 800108c:	4652      	mov	r2, sl
 800108e:	2303      	movs	r3, #3
 8001090:	431a      	orrs	r2, r3
 8001092:	4692      	mov	sl, r2
 8001094:	2003      	movs	r0, #3
 8001096:	e750      	b.n	8000f3a <__aeabi_fmul+0x56>
 8001098:	0020      	movs	r0, r4
 800109a:	f001 ff33 	bl	8002f04 <__clzsi2>
 800109e:	1f43      	subs	r3, r0, #5
 80010a0:	1a2d      	subs	r5, r5, r0
 80010a2:	409c      	lsls	r4, r3
 80010a4:	3d76      	subs	r5, #118	; 0x76
 80010a6:	2000      	movs	r0, #0
 80010a8:	e747      	b.n	8000f3a <__aeabi_fmul+0x56>
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	2700      	movs	r7, #0
 80010ae:	03db      	lsls	r3, r3, #15
 80010b0:	22ff      	movs	r2, #255	; 0xff
 80010b2:	e772      	b.n	8000f9a <__aeabi_fmul+0xb6>
 80010b4:	4642      	mov	r2, r8
 80010b6:	e766      	b.n	8000f86 <__aeabi_fmul+0xa2>
 80010b8:	464c      	mov	r4, r9
 80010ba:	0032      	movs	r2, r6
 80010bc:	4658      	mov	r0, fp
 80010be:	e762      	b.n	8000f86 <__aeabi_fmul+0xa2>
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	464a      	mov	r2, r9
 80010c4:	03db      	lsls	r3, r3, #15
 80010c6:	421a      	tst	r2, r3
 80010c8:	d022      	beq.n	8001110 <__aeabi_fmul+0x22c>
 80010ca:	421c      	tst	r4, r3
 80010cc:	d120      	bne.n	8001110 <__aeabi_fmul+0x22c>
 80010ce:	4323      	orrs	r3, r4
 80010d0:	025b      	lsls	r3, r3, #9
 80010d2:	0a5b      	lsrs	r3, r3, #9
 80010d4:	4647      	mov	r7, r8
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	e75f      	b.n	8000f9a <__aeabi_fmul+0xb6>
 80010da:	2301      	movs	r3, #1
 80010dc:	1a9a      	subs	r2, r3, r2
 80010de:	2a1b      	cmp	r2, #27
 80010e0:	dc21      	bgt.n	8001126 <__aeabi_fmul+0x242>
 80010e2:	0023      	movs	r3, r4
 80010e4:	9901      	ldr	r1, [sp, #4]
 80010e6:	40d3      	lsrs	r3, r2
 80010e8:	319e      	adds	r1, #158	; 0x9e
 80010ea:	408c      	lsls	r4, r1
 80010ec:	001a      	movs	r2, r3
 80010ee:	0023      	movs	r3, r4
 80010f0:	1e5c      	subs	r4, r3, #1
 80010f2:	41a3      	sbcs	r3, r4
 80010f4:	4313      	orrs	r3, r2
 80010f6:	075a      	lsls	r2, r3, #29
 80010f8:	d004      	beq.n	8001104 <__aeabi_fmul+0x220>
 80010fa:	220f      	movs	r2, #15
 80010fc:	401a      	ands	r2, r3
 80010fe:	2a04      	cmp	r2, #4
 8001100:	d000      	beq.n	8001104 <__aeabi_fmul+0x220>
 8001102:	3304      	adds	r3, #4
 8001104:	015a      	lsls	r2, r3, #5
 8001106:	d411      	bmi.n	800112c <__aeabi_fmul+0x248>
 8001108:	019b      	lsls	r3, r3, #6
 800110a:	0a5b      	lsrs	r3, r3, #9
 800110c:	2200      	movs	r2, #0
 800110e:	e744      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	464a      	mov	r2, r9
 8001114:	03db      	lsls	r3, r3, #15
 8001116:	4313      	orrs	r3, r2
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	0a5b      	lsrs	r3, r3, #9
 800111c:	0037      	movs	r7, r6
 800111e:	22ff      	movs	r2, #255	; 0xff
 8001120:	e73b      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8001122:	9501      	str	r5, [sp, #4]
 8001124:	e787      	b.n	8001036 <__aeabi_fmul+0x152>
 8001126:	2200      	movs	r2, #0
 8001128:	2300      	movs	r3, #0
 800112a:	e736      	b.n	8000f9a <__aeabi_fmul+0xb6>
 800112c:	2201      	movs	r2, #1
 800112e:	2300      	movs	r3, #0
 8001130:	e733      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	03db      	lsls	r3, r3, #15
 8001136:	4323      	orrs	r3, r4
 8001138:	025b      	lsls	r3, r3, #9
 800113a:	0a5b      	lsrs	r3, r3, #9
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	e72c      	b.n	8000f9a <__aeabi_fmul+0xb6>
 8001140:	08018bc4 	.word	0x08018bc4
 8001144:	f7ffffff 	.word	0xf7ffffff

08001148 <__aeabi_f2iz>:
 8001148:	0241      	lsls	r1, r0, #9
 800114a:	0042      	lsls	r2, r0, #1
 800114c:	0fc3      	lsrs	r3, r0, #31
 800114e:	0a49      	lsrs	r1, r1, #9
 8001150:	0e12      	lsrs	r2, r2, #24
 8001152:	2000      	movs	r0, #0
 8001154:	2a7e      	cmp	r2, #126	; 0x7e
 8001156:	d90d      	bls.n	8001174 <__aeabi_f2iz+0x2c>
 8001158:	2a9d      	cmp	r2, #157	; 0x9d
 800115a:	d80c      	bhi.n	8001176 <__aeabi_f2iz+0x2e>
 800115c:	2080      	movs	r0, #128	; 0x80
 800115e:	0400      	lsls	r0, r0, #16
 8001160:	4301      	orrs	r1, r0
 8001162:	2a95      	cmp	r2, #149	; 0x95
 8001164:	dc0a      	bgt.n	800117c <__aeabi_f2iz+0x34>
 8001166:	2096      	movs	r0, #150	; 0x96
 8001168:	1a82      	subs	r2, r0, r2
 800116a:	40d1      	lsrs	r1, r2
 800116c:	4248      	negs	r0, r1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d100      	bne.n	8001174 <__aeabi_f2iz+0x2c>
 8001172:	0008      	movs	r0, r1
 8001174:	4770      	bx	lr
 8001176:	4a03      	ldr	r2, [pc, #12]	; (8001184 <__aeabi_f2iz+0x3c>)
 8001178:	1898      	adds	r0, r3, r2
 800117a:	e7fb      	b.n	8001174 <__aeabi_f2iz+0x2c>
 800117c:	3a96      	subs	r2, #150	; 0x96
 800117e:	4091      	lsls	r1, r2
 8001180:	e7f4      	b.n	800116c <__aeabi_f2iz+0x24>
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	7fffffff 	.word	0x7fffffff

08001188 <__aeabi_i2f>:
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	2800      	cmp	r0, #0
 800118c:	d03d      	beq.n	800120a <__aeabi_i2f+0x82>
 800118e:	17c3      	asrs	r3, r0, #31
 8001190:	18c5      	adds	r5, r0, r3
 8001192:	405d      	eors	r5, r3
 8001194:	0fc4      	lsrs	r4, r0, #31
 8001196:	0028      	movs	r0, r5
 8001198:	f001 feb4 	bl	8002f04 <__clzsi2>
 800119c:	229e      	movs	r2, #158	; 0x9e
 800119e:	1a12      	subs	r2, r2, r0
 80011a0:	2a96      	cmp	r2, #150	; 0x96
 80011a2:	dc07      	bgt.n	80011b4 <__aeabi_i2f+0x2c>
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	2808      	cmp	r0, #8
 80011a8:	dd33      	ble.n	8001212 <__aeabi_i2f+0x8a>
 80011aa:	3808      	subs	r0, #8
 80011ac:	4085      	lsls	r5, r0
 80011ae:	0268      	lsls	r0, r5, #9
 80011b0:	0a40      	lsrs	r0, r0, #9
 80011b2:	e023      	b.n	80011fc <__aeabi_i2f+0x74>
 80011b4:	2a99      	cmp	r2, #153	; 0x99
 80011b6:	dd0b      	ble.n	80011d0 <__aeabi_i2f+0x48>
 80011b8:	2305      	movs	r3, #5
 80011ba:	0029      	movs	r1, r5
 80011bc:	1a1b      	subs	r3, r3, r0
 80011be:	40d9      	lsrs	r1, r3
 80011c0:	0003      	movs	r3, r0
 80011c2:	331b      	adds	r3, #27
 80011c4:	409d      	lsls	r5, r3
 80011c6:	002b      	movs	r3, r5
 80011c8:	1e5d      	subs	r5, r3, #1
 80011ca:	41ab      	sbcs	r3, r5
 80011cc:	4319      	orrs	r1, r3
 80011ce:	000d      	movs	r5, r1
 80011d0:	2805      	cmp	r0, #5
 80011d2:	dd01      	ble.n	80011d8 <__aeabi_i2f+0x50>
 80011d4:	1f43      	subs	r3, r0, #5
 80011d6:	409d      	lsls	r5, r3
 80011d8:	002b      	movs	r3, r5
 80011da:	490f      	ldr	r1, [pc, #60]	; (8001218 <__aeabi_i2f+0x90>)
 80011dc:	400b      	ands	r3, r1
 80011de:	076e      	lsls	r6, r5, #29
 80011e0:	d009      	beq.n	80011f6 <__aeabi_i2f+0x6e>
 80011e2:	260f      	movs	r6, #15
 80011e4:	4035      	ands	r5, r6
 80011e6:	2d04      	cmp	r5, #4
 80011e8:	d005      	beq.n	80011f6 <__aeabi_i2f+0x6e>
 80011ea:	3304      	adds	r3, #4
 80011ec:	015d      	lsls	r5, r3, #5
 80011ee:	d502      	bpl.n	80011f6 <__aeabi_i2f+0x6e>
 80011f0:	229f      	movs	r2, #159	; 0x9f
 80011f2:	400b      	ands	r3, r1
 80011f4:	1a12      	subs	r2, r2, r0
 80011f6:	019b      	lsls	r3, r3, #6
 80011f8:	0a58      	lsrs	r0, r3, #9
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	0240      	lsls	r0, r0, #9
 80011fe:	05d2      	lsls	r2, r2, #23
 8001200:	0a40      	lsrs	r0, r0, #9
 8001202:	07e4      	lsls	r4, r4, #31
 8001204:	4310      	orrs	r0, r2
 8001206:	4320      	orrs	r0, r4
 8001208:	bd70      	pop	{r4, r5, r6, pc}
 800120a:	2400      	movs	r4, #0
 800120c:	2200      	movs	r2, #0
 800120e:	2000      	movs	r0, #0
 8001210:	e7f4      	b.n	80011fc <__aeabi_i2f+0x74>
 8001212:	0268      	lsls	r0, r5, #9
 8001214:	0a40      	lsrs	r0, r0, #9
 8001216:	e7f1      	b.n	80011fc <__aeabi_i2f+0x74>
 8001218:	fbffffff 	.word	0xfbffffff

0800121c <__aeabi_dadd>:
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	464f      	mov	r7, r9
 8001220:	4646      	mov	r6, r8
 8001222:	46d6      	mov	lr, sl
 8001224:	000c      	movs	r4, r1
 8001226:	0309      	lsls	r1, r1, #12
 8001228:	b5c0      	push	{r6, r7, lr}
 800122a:	0a49      	lsrs	r1, r1, #9
 800122c:	0f47      	lsrs	r7, r0, #29
 800122e:	005e      	lsls	r6, r3, #1
 8001230:	4339      	orrs	r1, r7
 8001232:	031f      	lsls	r7, r3, #12
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	469c      	mov	ip, r3
 8001238:	0065      	lsls	r5, r4, #1
 800123a:	0a7b      	lsrs	r3, r7, #9
 800123c:	0f57      	lsrs	r7, r2, #29
 800123e:	431f      	orrs	r7, r3
 8001240:	0d6d      	lsrs	r5, r5, #21
 8001242:	0fe4      	lsrs	r4, r4, #31
 8001244:	0d76      	lsrs	r6, r6, #21
 8001246:	46a1      	mov	r9, r4
 8001248:	00c0      	lsls	r0, r0, #3
 800124a:	46b8      	mov	r8, r7
 800124c:	00d2      	lsls	r2, r2, #3
 800124e:	1bab      	subs	r3, r5, r6
 8001250:	4564      	cmp	r4, ip
 8001252:	d07b      	beq.n	800134c <__aeabi_dadd+0x130>
 8001254:	2b00      	cmp	r3, #0
 8001256:	dd5f      	ble.n	8001318 <__aeabi_dadd+0xfc>
 8001258:	2e00      	cmp	r6, #0
 800125a:	d000      	beq.n	800125e <__aeabi_dadd+0x42>
 800125c:	e0a4      	b.n	80013a8 <__aeabi_dadd+0x18c>
 800125e:	003e      	movs	r6, r7
 8001260:	4316      	orrs	r6, r2
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x4a>
 8001264:	e112      	b.n	800148c <__aeabi_dadd+0x270>
 8001266:	1e5e      	subs	r6, r3, #1
 8001268:	2e00      	cmp	r6, #0
 800126a:	d000      	beq.n	800126e <__aeabi_dadd+0x52>
 800126c:	e19e      	b.n	80015ac <__aeabi_dadd+0x390>
 800126e:	1a87      	subs	r7, r0, r2
 8001270:	4643      	mov	r3, r8
 8001272:	42b8      	cmp	r0, r7
 8001274:	4180      	sbcs	r0, r0
 8001276:	2501      	movs	r5, #1
 8001278:	1ac9      	subs	r1, r1, r3
 800127a:	4240      	negs	r0, r0
 800127c:	1a09      	subs	r1, r1, r0
 800127e:	020b      	lsls	r3, r1, #8
 8001280:	d400      	bmi.n	8001284 <__aeabi_dadd+0x68>
 8001282:	e131      	b.n	80014e8 <__aeabi_dadd+0x2cc>
 8001284:	0249      	lsls	r1, r1, #9
 8001286:	0a4e      	lsrs	r6, r1, #9
 8001288:	2e00      	cmp	r6, #0
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x72>
 800128c:	e16e      	b.n	800156c <__aeabi_dadd+0x350>
 800128e:	0030      	movs	r0, r6
 8001290:	f001 fe38 	bl	8002f04 <__clzsi2>
 8001294:	0003      	movs	r3, r0
 8001296:	3b08      	subs	r3, #8
 8001298:	2b1f      	cmp	r3, #31
 800129a:	dd00      	ble.n	800129e <__aeabi_dadd+0x82>
 800129c:	e161      	b.n	8001562 <__aeabi_dadd+0x346>
 800129e:	2220      	movs	r2, #32
 80012a0:	0039      	movs	r1, r7
 80012a2:	1ad2      	subs	r2, r2, r3
 80012a4:	409e      	lsls	r6, r3
 80012a6:	40d1      	lsrs	r1, r2
 80012a8:	409f      	lsls	r7, r3
 80012aa:	430e      	orrs	r6, r1
 80012ac:	429d      	cmp	r5, r3
 80012ae:	dd00      	ble.n	80012b2 <__aeabi_dadd+0x96>
 80012b0:	e151      	b.n	8001556 <__aeabi_dadd+0x33a>
 80012b2:	1b5d      	subs	r5, r3, r5
 80012b4:	1c6b      	adds	r3, r5, #1
 80012b6:	2b1f      	cmp	r3, #31
 80012b8:	dd00      	ble.n	80012bc <__aeabi_dadd+0xa0>
 80012ba:	e17c      	b.n	80015b6 <__aeabi_dadd+0x39a>
 80012bc:	2120      	movs	r1, #32
 80012be:	1ac9      	subs	r1, r1, r3
 80012c0:	003d      	movs	r5, r7
 80012c2:	0030      	movs	r0, r6
 80012c4:	408f      	lsls	r7, r1
 80012c6:	4088      	lsls	r0, r1
 80012c8:	40dd      	lsrs	r5, r3
 80012ca:	1e79      	subs	r1, r7, #1
 80012cc:	418f      	sbcs	r7, r1
 80012ce:	0031      	movs	r1, r6
 80012d0:	2207      	movs	r2, #7
 80012d2:	4328      	orrs	r0, r5
 80012d4:	40d9      	lsrs	r1, r3
 80012d6:	2500      	movs	r5, #0
 80012d8:	4307      	orrs	r7, r0
 80012da:	403a      	ands	r2, r7
 80012dc:	2a00      	cmp	r2, #0
 80012de:	d009      	beq.n	80012f4 <__aeabi_dadd+0xd8>
 80012e0:	230f      	movs	r3, #15
 80012e2:	403b      	ands	r3, r7
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d005      	beq.n	80012f4 <__aeabi_dadd+0xd8>
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	42bb      	cmp	r3, r7
 80012ec:	41bf      	sbcs	r7, r7
 80012ee:	427f      	negs	r7, r7
 80012f0:	19c9      	adds	r1, r1, r7
 80012f2:	001f      	movs	r7, r3
 80012f4:	020b      	lsls	r3, r1, #8
 80012f6:	d400      	bmi.n	80012fa <__aeabi_dadd+0xde>
 80012f8:	e226      	b.n	8001748 <__aeabi_dadd+0x52c>
 80012fa:	1c6a      	adds	r2, r5, #1
 80012fc:	4bc6      	ldr	r3, [pc, #792]	; (8001618 <__aeabi_dadd+0x3fc>)
 80012fe:	0555      	lsls	r5, r2, #21
 8001300:	0d6d      	lsrs	r5, r5, #21
 8001302:	429a      	cmp	r2, r3
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0xec>
 8001306:	e106      	b.n	8001516 <__aeabi_dadd+0x2fa>
 8001308:	4ac4      	ldr	r2, [pc, #784]	; (800161c <__aeabi_dadd+0x400>)
 800130a:	08ff      	lsrs	r7, r7, #3
 800130c:	400a      	ands	r2, r1
 800130e:	0753      	lsls	r3, r2, #29
 8001310:	0252      	lsls	r2, r2, #9
 8001312:	433b      	orrs	r3, r7
 8001314:	0b12      	lsrs	r2, r2, #12
 8001316:	e08e      	b.n	8001436 <__aeabi_dadd+0x21a>
 8001318:	2b00      	cmp	r3, #0
 800131a:	d000      	beq.n	800131e <__aeabi_dadd+0x102>
 800131c:	e0b8      	b.n	8001490 <__aeabi_dadd+0x274>
 800131e:	1c6b      	adds	r3, r5, #1
 8001320:	055b      	lsls	r3, r3, #21
 8001322:	0d5b      	lsrs	r3, r3, #21
 8001324:	2b01      	cmp	r3, #1
 8001326:	dc00      	bgt.n	800132a <__aeabi_dadd+0x10e>
 8001328:	e130      	b.n	800158c <__aeabi_dadd+0x370>
 800132a:	1a87      	subs	r7, r0, r2
 800132c:	4643      	mov	r3, r8
 800132e:	42b8      	cmp	r0, r7
 8001330:	41b6      	sbcs	r6, r6
 8001332:	1acb      	subs	r3, r1, r3
 8001334:	4276      	negs	r6, r6
 8001336:	1b9e      	subs	r6, r3, r6
 8001338:	0233      	lsls	r3, r6, #8
 800133a:	d500      	bpl.n	800133e <__aeabi_dadd+0x122>
 800133c:	e14c      	b.n	80015d8 <__aeabi_dadd+0x3bc>
 800133e:	003b      	movs	r3, r7
 8001340:	4333      	orrs	r3, r6
 8001342:	d1a1      	bne.n	8001288 <__aeabi_dadd+0x6c>
 8001344:	2200      	movs	r2, #0
 8001346:	2400      	movs	r4, #0
 8001348:	2500      	movs	r5, #0
 800134a:	e070      	b.n	800142e <__aeabi_dadd+0x212>
 800134c:	2b00      	cmp	r3, #0
 800134e:	dc00      	bgt.n	8001352 <__aeabi_dadd+0x136>
 8001350:	e0e5      	b.n	800151e <__aeabi_dadd+0x302>
 8001352:	2e00      	cmp	r6, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x13c>
 8001356:	e083      	b.n	8001460 <__aeabi_dadd+0x244>
 8001358:	4eaf      	ldr	r6, [pc, #700]	; (8001618 <__aeabi_dadd+0x3fc>)
 800135a:	42b5      	cmp	r5, r6
 800135c:	d060      	beq.n	8001420 <__aeabi_dadd+0x204>
 800135e:	2680      	movs	r6, #128	; 0x80
 8001360:	0436      	lsls	r6, r6, #16
 8001362:	4337      	orrs	r7, r6
 8001364:	46b8      	mov	r8, r7
 8001366:	2b38      	cmp	r3, #56	; 0x38
 8001368:	dc00      	bgt.n	800136c <__aeabi_dadd+0x150>
 800136a:	e13e      	b.n	80015ea <__aeabi_dadd+0x3ce>
 800136c:	4643      	mov	r3, r8
 800136e:	4313      	orrs	r3, r2
 8001370:	001f      	movs	r7, r3
 8001372:	1e7a      	subs	r2, r7, #1
 8001374:	4197      	sbcs	r7, r2
 8001376:	183f      	adds	r7, r7, r0
 8001378:	4287      	cmp	r7, r0
 800137a:	4180      	sbcs	r0, r0
 800137c:	4240      	negs	r0, r0
 800137e:	1809      	adds	r1, r1, r0
 8001380:	020b      	lsls	r3, r1, #8
 8001382:	d400      	bmi.n	8001386 <__aeabi_dadd+0x16a>
 8001384:	e0b0      	b.n	80014e8 <__aeabi_dadd+0x2cc>
 8001386:	4ba4      	ldr	r3, [pc, #656]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001388:	3501      	adds	r5, #1
 800138a:	429d      	cmp	r5, r3
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x174>
 800138e:	e0c3      	b.n	8001518 <__aeabi_dadd+0x2fc>
 8001390:	4aa2      	ldr	r2, [pc, #648]	; (800161c <__aeabi_dadd+0x400>)
 8001392:	087b      	lsrs	r3, r7, #1
 8001394:	400a      	ands	r2, r1
 8001396:	2101      	movs	r1, #1
 8001398:	400f      	ands	r7, r1
 800139a:	431f      	orrs	r7, r3
 800139c:	0851      	lsrs	r1, r2, #1
 800139e:	07d3      	lsls	r3, r2, #31
 80013a0:	2207      	movs	r2, #7
 80013a2:	431f      	orrs	r7, r3
 80013a4:	403a      	ands	r2, r7
 80013a6:	e799      	b.n	80012dc <__aeabi_dadd+0xc0>
 80013a8:	4e9b      	ldr	r6, [pc, #620]	; (8001618 <__aeabi_dadd+0x3fc>)
 80013aa:	42b5      	cmp	r5, r6
 80013ac:	d038      	beq.n	8001420 <__aeabi_dadd+0x204>
 80013ae:	2680      	movs	r6, #128	; 0x80
 80013b0:	0436      	lsls	r6, r6, #16
 80013b2:	4337      	orrs	r7, r6
 80013b4:	46b8      	mov	r8, r7
 80013b6:	2b38      	cmp	r3, #56	; 0x38
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x1a0>
 80013ba:	e0dc      	b.n	8001576 <__aeabi_dadd+0x35a>
 80013bc:	2b1f      	cmp	r3, #31
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_dadd+0x1a6>
 80013c0:	e130      	b.n	8001624 <__aeabi_dadd+0x408>
 80013c2:	001e      	movs	r6, r3
 80013c4:	4647      	mov	r7, r8
 80013c6:	3e20      	subs	r6, #32
 80013c8:	40f7      	lsrs	r7, r6
 80013ca:	46bc      	mov	ip, r7
 80013cc:	2b20      	cmp	r3, #32
 80013ce:	d004      	beq.n	80013da <__aeabi_dadd+0x1be>
 80013d0:	2640      	movs	r6, #64	; 0x40
 80013d2:	1af3      	subs	r3, r6, r3
 80013d4:	4646      	mov	r6, r8
 80013d6:	409e      	lsls	r6, r3
 80013d8:	4332      	orrs	r2, r6
 80013da:	0017      	movs	r7, r2
 80013dc:	4663      	mov	r3, ip
 80013de:	1e7a      	subs	r2, r7, #1
 80013e0:	4197      	sbcs	r7, r2
 80013e2:	431f      	orrs	r7, r3
 80013e4:	e0cc      	b.n	8001580 <__aeabi_dadd+0x364>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d100      	bne.n	80013ec <__aeabi_dadd+0x1d0>
 80013ea:	e204      	b.n	80017f6 <__aeabi_dadd+0x5da>
 80013ec:	4643      	mov	r3, r8
 80013ee:	4313      	orrs	r3, r2
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x1d8>
 80013f2:	e159      	b.n	80016a8 <__aeabi_dadd+0x48c>
 80013f4:	074b      	lsls	r3, r1, #29
 80013f6:	08c0      	lsrs	r0, r0, #3
 80013f8:	4318      	orrs	r0, r3
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	08c9      	lsrs	r1, r1, #3
 80013fe:	031b      	lsls	r3, r3, #12
 8001400:	4219      	tst	r1, r3
 8001402:	d008      	beq.n	8001416 <__aeabi_dadd+0x1fa>
 8001404:	4645      	mov	r5, r8
 8001406:	08ed      	lsrs	r5, r5, #3
 8001408:	421d      	tst	r5, r3
 800140a:	d104      	bne.n	8001416 <__aeabi_dadd+0x1fa>
 800140c:	4643      	mov	r3, r8
 800140e:	08d0      	lsrs	r0, r2, #3
 8001410:	0759      	lsls	r1, r3, #29
 8001412:	4308      	orrs	r0, r1
 8001414:	0029      	movs	r1, r5
 8001416:	0f42      	lsrs	r2, r0, #29
 8001418:	00c9      	lsls	r1, r1, #3
 800141a:	4d7f      	ldr	r5, [pc, #508]	; (8001618 <__aeabi_dadd+0x3fc>)
 800141c:	4311      	orrs	r1, r2
 800141e:	00c0      	lsls	r0, r0, #3
 8001420:	074b      	lsls	r3, r1, #29
 8001422:	08ca      	lsrs	r2, r1, #3
 8001424:	497c      	ldr	r1, [pc, #496]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001426:	08c0      	lsrs	r0, r0, #3
 8001428:	4303      	orrs	r3, r0
 800142a:	428d      	cmp	r5, r1
 800142c:	d068      	beq.n	8001500 <__aeabi_dadd+0x2e4>
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	056d      	lsls	r5, r5, #21
 8001432:	0b12      	lsrs	r2, r2, #12
 8001434:	0d6d      	lsrs	r5, r5, #21
 8001436:	2100      	movs	r1, #0
 8001438:	0312      	lsls	r2, r2, #12
 800143a:	0018      	movs	r0, r3
 800143c:	0b13      	lsrs	r3, r2, #12
 800143e:	0d0a      	lsrs	r2, r1, #20
 8001440:	0512      	lsls	r2, r2, #20
 8001442:	431a      	orrs	r2, r3
 8001444:	4b76      	ldr	r3, [pc, #472]	; (8001620 <__aeabi_dadd+0x404>)
 8001446:	052d      	lsls	r5, r5, #20
 8001448:	4013      	ands	r3, r2
 800144a:	432b      	orrs	r3, r5
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	07e4      	lsls	r4, r4, #31
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	4323      	orrs	r3, r4
 8001454:	0019      	movs	r1, r3
 8001456:	bc1c      	pop	{r2, r3, r4}
 8001458:	4690      	mov	r8, r2
 800145a:	4699      	mov	r9, r3
 800145c:	46a2      	mov	sl, r4
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001460:	003e      	movs	r6, r7
 8001462:	4316      	orrs	r6, r2
 8001464:	d012      	beq.n	800148c <__aeabi_dadd+0x270>
 8001466:	1e5e      	subs	r6, r3, #1
 8001468:	2e00      	cmp	r6, #0
 800146a:	d000      	beq.n	800146e <__aeabi_dadd+0x252>
 800146c:	e100      	b.n	8001670 <__aeabi_dadd+0x454>
 800146e:	1887      	adds	r7, r0, r2
 8001470:	4287      	cmp	r7, r0
 8001472:	4180      	sbcs	r0, r0
 8001474:	4441      	add	r1, r8
 8001476:	4240      	negs	r0, r0
 8001478:	1809      	adds	r1, r1, r0
 800147a:	2501      	movs	r5, #1
 800147c:	020b      	lsls	r3, r1, #8
 800147e:	d533      	bpl.n	80014e8 <__aeabi_dadd+0x2cc>
 8001480:	2502      	movs	r5, #2
 8001482:	e785      	b.n	8001390 <__aeabi_dadd+0x174>
 8001484:	4664      	mov	r4, ip
 8001486:	0033      	movs	r3, r6
 8001488:	4641      	mov	r1, r8
 800148a:	0010      	movs	r0, r2
 800148c:	001d      	movs	r5, r3
 800148e:	e7c7      	b.n	8001420 <__aeabi_dadd+0x204>
 8001490:	2d00      	cmp	r5, #0
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x27a>
 8001494:	e0da      	b.n	800164c <__aeabi_dadd+0x430>
 8001496:	000c      	movs	r4, r1
 8001498:	4304      	orrs	r4, r0
 800149a:	d0f3      	beq.n	8001484 <__aeabi_dadd+0x268>
 800149c:	1c5c      	adds	r4, r3, #1
 800149e:	d100      	bne.n	80014a2 <__aeabi_dadd+0x286>
 80014a0:	e19f      	b.n	80017e2 <__aeabi_dadd+0x5c6>
 80014a2:	4c5d      	ldr	r4, [pc, #372]	; (8001618 <__aeabi_dadd+0x3fc>)
 80014a4:	42a6      	cmp	r6, r4
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x28e>
 80014a8:	e12f      	b.n	800170a <__aeabi_dadd+0x4ee>
 80014aa:	43db      	mvns	r3, r3
 80014ac:	2b38      	cmp	r3, #56	; 0x38
 80014ae:	dd00      	ble.n	80014b2 <__aeabi_dadd+0x296>
 80014b0:	e166      	b.n	8001780 <__aeabi_dadd+0x564>
 80014b2:	2b1f      	cmp	r3, #31
 80014b4:	dd00      	ble.n	80014b8 <__aeabi_dadd+0x29c>
 80014b6:	e183      	b.n	80017c0 <__aeabi_dadd+0x5a4>
 80014b8:	2420      	movs	r4, #32
 80014ba:	0005      	movs	r5, r0
 80014bc:	1ae4      	subs	r4, r4, r3
 80014be:	000f      	movs	r7, r1
 80014c0:	40dd      	lsrs	r5, r3
 80014c2:	40d9      	lsrs	r1, r3
 80014c4:	40a0      	lsls	r0, r4
 80014c6:	4643      	mov	r3, r8
 80014c8:	40a7      	lsls	r7, r4
 80014ca:	1a5b      	subs	r3, r3, r1
 80014cc:	1e44      	subs	r4, r0, #1
 80014ce:	41a0      	sbcs	r0, r4
 80014d0:	4698      	mov	r8, r3
 80014d2:	432f      	orrs	r7, r5
 80014d4:	4338      	orrs	r0, r7
 80014d6:	1a17      	subs	r7, r2, r0
 80014d8:	42ba      	cmp	r2, r7
 80014da:	4192      	sbcs	r2, r2
 80014dc:	4643      	mov	r3, r8
 80014de:	4252      	negs	r2, r2
 80014e0:	1a99      	subs	r1, r3, r2
 80014e2:	4664      	mov	r4, ip
 80014e4:	0035      	movs	r5, r6
 80014e6:	e6ca      	b.n	800127e <__aeabi_dadd+0x62>
 80014e8:	2207      	movs	r2, #7
 80014ea:	403a      	ands	r2, r7
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d000      	beq.n	80014f2 <__aeabi_dadd+0x2d6>
 80014f0:	e6f6      	b.n	80012e0 <__aeabi_dadd+0xc4>
 80014f2:	074b      	lsls	r3, r1, #29
 80014f4:	08ca      	lsrs	r2, r1, #3
 80014f6:	4948      	ldr	r1, [pc, #288]	; (8001618 <__aeabi_dadd+0x3fc>)
 80014f8:	08ff      	lsrs	r7, r7, #3
 80014fa:	433b      	orrs	r3, r7
 80014fc:	428d      	cmp	r5, r1
 80014fe:	d196      	bne.n	800142e <__aeabi_dadd+0x212>
 8001500:	0019      	movs	r1, r3
 8001502:	4311      	orrs	r1, r2
 8001504:	d100      	bne.n	8001508 <__aeabi_dadd+0x2ec>
 8001506:	e19e      	b.n	8001846 <__aeabi_dadd+0x62a>
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0309      	lsls	r1, r1, #12
 800150c:	430a      	orrs	r2, r1
 800150e:	0312      	lsls	r2, r2, #12
 8001510:	0b12      	lsrs	r2, r2, #12
 8001512:	4d41      	ldr	r5, [pc, #260]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001514:	e78f      	b.n	8001436 <__aeabi_dadd+0x21a>
 8001516:	0015      	movs	r5, r2
 8001518:	2200      	movs	r2, #0
 800151a:	2300      	movs	r3, #0
 800151c:	e78b      	b.n	8001436 <__aeabi_dadd+0x21a>
 800151e:	2b00      	cmp	r3, #0
 8001520:	d000      	beq.n	8001524 <__aeabi_dadd+0x308>
 8001522:	e0c7      	b.n	80016b4 <__aeabi_dadd+0x498>
 8001524:	1c6b      	adds	r3, r5, #1
 8001526:	055f      	lsls	r7, r3, #21
 8001528:	0d7f      	lsrs	r7, r7, #21
 800152a:	2f01      	cmp	r7, #1
 800152c:	dc00      	bgt.n	8001530 <__aeabi_dadd+0x314>
 800152e:	e0f1      	b.n	8001714 <__aeabi_dadd+0x4f8>
 8001530:	4d39      	ldr	r5, [pc, #228]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001532:	42ab      	cmp	r3, r5
 8001534:	d100      	bne.n	8001538 <__aeabi_dadd+0x31c>
 8001536:	e0b9      	b.n	80016ac <__aeabi_dadd+0x490>
 8001538:	1885      	adds	r5, r0, r2
 800153a:	000a      	movs	r2, r1
 800153c:	4285      	cmp	r5, r0
 800153e:	4189      	sbcs	r1, r1
 8001540:	4442      	add	r2, r8
 8001542:	4249      	negs	r1, r1
 8001544:	1851      	adds	r1, r2, r1
 8001546:	2207      	movs	r2, #7
 8001548:	07cf      	lsls	r7, r1, #31
 800154a:	086d      	lsrs	r5, r5, #1
 800154c:	432f      	orrs	r7, r5
 800154e:	0849      	lsrs	r1, r1, #1
 8001550:	403a      	ands	r2, r7
 8001552:	001d      	movs	r5, r3
 8001554:	e6c2      	b.n	80012dc <__aeabi_dadd+0xc0>
 8001556:	2207      	movs	r2, #7
 8001558:	4930      	ldr	r1, [pc, #192]	; (800161c <__aeabi_dadd+0x400>)
 800155a:	1aed      	subs	r5, r5, r3
 800155c:	4031      	ands	r1, r6
 800155e:	403a      	ands	r2, r7
 8001560:	e6bc      	b.n	80012dc <__aeabi_dadd+0xc0>
 8001562:	003e      	movs	r6, r7
 8001564:	3828      	subs	r0, #40	; 0x28
 8001566:	4086      	lsls	r6, r0
 8001568:	2700      	movs	r7, #0
 800156a:	e69f      	b.n	80012ac <__aeabi_dadd+0x90>
 800156c:	0038      	movs	r0, r7
 800156e:	f001 fcc9 	bl	8002f04 <__clzsi2>
 8001572:	3020      	adds	r0, #32
 8001574:	e68e      	b.n	8001294 <__aeabi_dadd+0x78>
 8001576:	4643      	mov	r3, r8
 8001578:	4313      	orrs	r3, r2
 800157a:	001f      	movs	r7, r3
 800157c:	1e7a      	subs	r2, r7, #1
 800157e:	4197      	sbcs	r7, r2
 8001580:	1bc7      	subs	r7, r0, r7
 8001582:	42b8      	cmp	r0, r7
 8001584:	4180      	sbcs	r0, r0
 8001586:	4240      	negs	r0, r0
 8001588:	1a09      	subs	r1, r1, r0
 800158a:	e678      	b.n	800127e <__aeabi_dadd+0x62>
 800158c:	000e      	movs	r6, r1
 800158e:	003b      	movs	r3, r7
 8001590:	4306      	orrs	r6, r0
 8001592:	4313      	orrs	r3, r2
 8001594:	2d00      	cmp	r5, #0
 8001596:	d161      	bne.n	800165c <__aeabi_dadd+0x440>
 8001598:	2e00      	cmp	r6, #0
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x382>
 800159c:	e0f4      	b.n	8001788 <__aeabi_dadd+0x56c>
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dadd+0x388>
 80015a2:	e11b      	b.n	80017dc <__aeabi_dadd+0x5c0>
 80015a4:	4664      	mov	r4, ip
 80015a6:	0039      	movs	r1, r7
 80015a8:	0010      	movs	r0, r2
 80015aa:	e739      	b.n	8001420 <__aeabi_dadd+0x204>
 80015ac:	4f1a      	ldr	r7, [pc, #104]	; (8001618 <__aeabi_dadd+0x3fc>)
 80015ae:	42bb      	cmp	r3, r7
 80015b0:	d07a      	beq.n	80016a8 <__aeabi_dadd+0x48c>
 80015b2:	0033      	movs	r3, r6
 80015b4:	e6ff      	b.n	80013b6 <__aeabi_dadd+0x19a>
 80015b6:	0030      	movs	r0, r6
 80015b8:	3d1f      	subs	r5, #31
 80015ba:	40e8      	lsrs	r0, r5
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d003      	beq.n	80015c8 <__aeabi_dadd+0x3ac>
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	1acb      	subs	r3, r1, r3
 80015c4:	409e      	lsls	r6, r3
 80015c6:	4337      	orrs	r7, r6
 80015c8:	1e7b      	subs	r3, r7, #1
 80015ca:	419f      	sbcs	r7, r3
 80015cc:	2207      	movs	r2, #7
 80015ce:	4307      	orrs	r7, r0
 80015d0:	403a      	ands	r2, r7
 80015d2:	2100      	movs	r1, #0
 80015d4:	2500      	movs	r5, #0
 80015d6:	e789      	b.n	80014ec <__aeabi_dadd+0x2d0>
 80015d8:	1a17      	subs	r7, r2, r0
 80015da:	4643      	mov	r3, r8
 80015dc:	42ba      	cmp	r2, r7
 80015de:	41b6      	sbcs	r6, r6
 80015e0:	1a59      	subs	r1, r3, r1
 80015e2:	4276      	negs	r6, r6
 80015e4:	1b8e      	subs	r6, r1, r6
 80015e6:	4664      	mov	r4, ip
 80015e8:	e64e      	b.n	8001288 <__aeabi_dadd+0x6c>
 80015ea:	2b1f      	cmp	r3, #31
 80015ec:	dd00      	ble.n	80015f0 <__aeabi_dadd+0x3d4>
 80015ee:	e0ad      	b.n	800174c <__aeabi_dadd+0x530>
 80015f0:	2620      	movs	r6, #32
 80015f2:	4647      	mov	r7, r8
 80015f4:	1af6      	subs	r6, r6, r3
 80015f6:	40b7      	lsls	r7, r6
 80015f8:	46b9      	mov	r9, r7
 80015fa:	0017      	movs	r7, r2
 80015fc:	46b2      	mov	sl, r6
 80015fe:	40df      	lsrs	r7, r3
 8001600:	464e      	mov	r6, r9
 8001602:	433e      	orrs	r6, r7
 8001604:	0037      	movs	r7, r6
 8001606:	4656      	mov	r6, sl
 8001608:	40b2      	lsls	r2, r6
 800160a:	1e56      	subs	r6, r2, #1
 800160c:	41b2      	sbcs	r2, r6
 800160e:	4317      	orrs	r7, r2
 8001610:	4642      	mov	r2, r8
 8001612:	40da      	lsrs	r2, r3
 8001614:	1889      	adds	r1, r1, r2
 8001616:	e6ae      	b.n	8001376 <__aeabi_dadd+0x15a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff
 8001620:	800fffff 	.word	0x800fffff
 8001624:	2620      	movs	r6, #32
 8001626:	4647      	mov	r7, r8
 8001628:	1af6      	subs	r6, r6, r3
 800162a:	40b7      	lsls	r7, r6
 800162c:	46b9      	mov	r9, r7
 800162e:	0017      	movs	r7, r2
 8001630:	46b2      	mov	sl, r6
 8001632:	40df      	lsrs	r7, r3
 8001634:	464e      	mov	r6, r9
 8001636:	433e      	orrs	r6, r7
 8001638:	0037      	movs	r7, r6
 800163a:	4656      	mov	r6, sl
 800163c:	40b2      	lsls	r2, r6
 800163e:	1e56      	subs	r6, r2, #1
 8001640:	41b2      	sbcs	r2, r6
 8001642:	4317      	orrs	r7, r2
 8001644:	4642      	mov	r2, r8
 8001646:	40da      	lsrs	r2, r3
 8001648:	1a89      	subs	r1, r1, r2
 800164a:	e799      	b.n	8001580 <__aeabi_dadd+0x364>
 800164c:	4c7f      	ldr	r4, [pc, #508]	; (800184c <__aeabi_dadd+0x630>)
 800164e:	42a6      	cmp	r6, r4
 8001650:	d05b      	beq.n	800170a <__aeabi_dadd+0x4ee>
 8001652:	2480      	movs	r4, #128	; 0x80
 8001654:	0424      	lsls	r4, r4, #16
 8001656:	425b      	negs	r3, r3
 8001658:	4321      	orrs	r1, r4
 800165a:	e727      	b.n	80014ac <__aeabi_dadd+0x290>
 800165c:	2e00      	cmp	r6, #0
 800165e:	d10c      	bne.n	800167a <__aeabi_dadd+0x45e>
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <__aeabi_dadd+0x44a>
 8001664:	e0cb      	b.n	80017fe <__aeabi_dadd+0x5e2>
 8001666:	4664      	mov	r4, ip
 8001668:	0039      	movs	r1, r7
 800166a:	0010      	movs	r0, r2
 800166c:	4d77      	ldr	r5, [pc, #476]	; (800184c <__aeabi_dadd+0x630>)
 800166e:	e6d7      	b.n	8001420 <__aeabi_dadd+0x204>
 8001670:	4f76      	ldr	r7, [pc, #472]	; (800184c <__aeabi_dadd+0x630>)
 8001672:	42bb      	cmp	r3, r7
 8001674:	d018      	beq.n	80016a8 <__aeabi_dadd+0x48c>
 8001676:	0033      	movs	r3, r6
 8001678:	e675      	b.n	8001366 <__aeabi_dadd+0x14a>
 800167a:	2b00      	cmp	r3, #0
 800167c:	d014      	beq.n	80016a8 <__aeabi_dadd+0x48c>
 800167e:	074b      	lsls	r3, r1, #29
 8001680:	08c0      	lsrs	r0, r0, #3
 8001682:	4318      	orrs	r0, r3
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	08c9      	lsrs	r1, r1, #3
 8001688:	031b      	lsls	r3, r3, #12
 800168a:	4219      	tst	r1, r3
 800168c:	d007      	beq.n	800169e <__aeabi_dadd+0x482>
 800168e:	08fc      	lsrs	r4, r7, #3
 8001690:	421c      	tst	r4, r3
 8001692:	d104      	bne.n	800169e <__aeabi_dadd+0x482>
 8001694:	0779      	lsls	r1, r7, #29
 8001696:	08d0      	lsrs	r0, r2, #3
 8001698:	4308      	orrs	r0, r1
 800169a:	46e1      	mov	r9, ip
 800169c:	0021      	movs	r1, r4
 800169e:	464c      	mov	r4, r9
 80016a0:	0f42      	lsrs	r2, r0, #29
 80016a2:	00c9      	lsls	r1, r1, #3
 80016a4:	4311      	orrs	r1, r2
 80016a6:	00c0      	lsls	r0, r0, #3
 80016a8:	4d68      	ldr	r5, [pc, #416]	; (800184c <__aeabi_dadd+0x630>)
 80016aa:	e6b9      	b.n	8001420 <__aeabi_dadd+0x204>
 80016ac:	001d      	movs	r5, r3
 80016ae:	2200      	movs	r2, #0
 80016b0:	2300      	movs	r3, #0
 80016b2:	e6c0      	b.n	8001436 <__aeabi_dadd+0x21a>
 80016b4:	2d00      	cmp	r5, #0
 80016b6:	d15b      	bne.n	8001770 <__aeabi_dadd+0x554>
 80016b8:	000d      	movs	r5, r1
 80016ba:	4305      	orrs	r5, r0
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x4a4>
 80016be:	e6e2      	b.n	8001486 <__aeabi_dadd+0x26a>
 80016c0:	1c5d      	adds	r5, r3, #1
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dadd+0x4aa>
 80016c4:	e0b0      	b.n	8001828 <__aeabi_dadd+0x60c>
 80016c6:	4d61      	ldr	r5, [pc, #388]	; (800184c <__aeabi_dadd+0x630>)
 80016c8:	42ae      	cmp	r6, r5
 80016ca:	d01f      	beq.n	800170c <__aeabi_dadd+0x4f0>
 80016cc:	43db      	mvns	r3, r3
 80016ce:	2b38      	cmp	r3, #56	; 0x38
 80016d0:	dc71      	bgt.n	80017b6 <__aeabi_dadd+0x59a>
 80016d2:	2b1f      	cmp	r3, #31
 80016d4:	dd00      	ble.n	80016d8 <__aeabi_dadd+0x4bc>
 80016d6:	e096      	b.n	8001806 <__aeabi_dadd+0x5ea>
 80016d8:	2520      	movs	r5, #32
 80016da:	000f      	movs	r7, r1
 80016dc:	1aed      	subs	r5, r5, r3
 80016de:	40af      	lsls	r7, r5
 80016e0:	46b9      	mov	r9, r7
 80016e2:	0007      	movs	r7, r0
 80016e4:	46aa      	mov	sl, r5
 80016e6:	40df      	lsrs	r7, r3
 80016e8:	464d      	mov	r5, r9
 80016ea:	433d      	orrs	r5, r7
 80016ec:	002f      	movs	r7, r5
 80016ee:	4655      	mov	r5, sl
 80016f0:	40a8      	lsls	r0, r5
 80016f2:	40d9      	lsrs	r1, r3
 80016f4:	1e45      	subs	r5, r0, #1
 80016f6:	41a8      	sbcs	r0, r5
 80016f8:	4488      	add	r8, r1
 80016fa:	4307      	orrs	r7, r0
 80016fc:	18bf      	adds	r7, r7, r2
 80016fe:	4297      	cmp	r7, r2
 8001700:	4192      	sbcs	r2, r2
 8001702:	4251      	negs	r1, r2
 8001704:	4441      	add	r1, r8
 8001706:	0035      	movs	r5, r6
 8001708:	e63a      	b.n	8001380 <__aeabi_dadd+0x164>
 800170a:	4664      	mov	r4, ip
 800170c:	0035      	movs	r5, r6
 800170e:	4641      	mov	r1, r8
 8001710:	0010      	movs	r0, r2
 8001712:	e685      	b.n	8001420 <__aeabi_dadd+0x204>
 8001714:	000b      	movs	r3, r1
 8001716:	4303      	orrs	r3, r0
 8001718:	2d00      	cmp	r5, #0
 800171a:	d000      	beq.n	800171e <__aeabi_dadd+0x502>
 800171c:	e663      	b.n	80013e6 <__aeabi_dadd+0x1ca>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f5      	beq.n	800170e <__aeabi_dadd+0x4f2>
 8001722:	4643      	mov	r3, r8
 8001724:	4313      	orrs	r3, r2
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x50e>
 8001728:	e67a      	b.n	8001420 <__aeabi_dadd+0x204>
 800172a:	1887      	adds	r7, r0, r2
 800172c:	4287      	cmp	r7, r0
 800172e:	4180      	sbcs	r0, r0
 8001730:	2207      	movs	r2, #7
 8001732:	4441      	add	r1, r8
 8001734:	4240      	negs	r0, r0
 8001736:	1809      	adds	r1, r1, r0
 8001738:	403a      	ands	r2, r7
 800173a:	020b      	lsls	r3, r1, #8
 800173c:	d400      	bmi.n	8001740 <__aeabi_dadd+0x524>
 800173e:	e6d5      	b.n	80014ec <__aeabi_dadd+0x2d0>
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <__aeabi_dadd+0x634>)
 8001742:	3501      	adds	r5, #1
 8001744:	4019      	ands	r1, r3
 8001746:	e5c9      	b.n	80012dc <__aeabi_dadd+0xc0>
 8001748:	0038      	movs	r0, r7
 800174a:	e669      	b.n	8001420 <__aeabi_dadd+0x204>
 800174c:	001e      	movs	r6, r3
 800174e:	4647      	mov	r7, r8
 8001750:	3e20      	subs	r6, #32
 8001752:	40f7      	lsrs	r7, r6
 8001754:	46bc      	mov	ip, r7
 8001756:	2b20      	cmp	r3, #32
 8001758:	d004      	beq.n	8001764 <__aeabi_dadd+0x548>
 800175a:	2640      	movs	r6, #64	; 0x40
 800175c:	1af3      	subs	r3, r6, r3
 800175e:	4646      	mov	r6, r8
 8001760:	409e      	lsls	r6, r3
 8001762:	4332      	orrs	r2, r6
 8001764:	0017      	movs	r7, r2
 8001766:	4663      	mov	r3, ip
 8001768:	1e7a      	subs	r2, r7, #1
 800176a:	4197      	sbcs	r7, r2
 800176c:	431f      	orrs	r7, r3
 800176e:	e602      	b.n	8001376 <__aeabi_dadd+0x15a>
 8001770:	4d36      	ldr	r5, [pc, #216]	; (800184c <__aeabi_dadd+0x630>)
 8001772:	42ae      	cmp	r6, r5
 8001774:	d0ca      	beq.n	800170c <__aeabi_dadd+0x4f0>
 8001776:	2580      	movs	r5, #128	; 0x80
 8001778:	042d      	lsls	r5, r5, #16
 800177a:	425b      	negs	r3, r3
 800177c:	4329      	orrs	r1, r5
 800177e:	e7a6      	b.n	80016ce <__aeabi_dadd+0x4b2>
 8001780:	4308      	orrs	r0, r1
 8001782:	1e41      	subs	r1, r0, #1
 8001784:	4188      	sbcs	r0, r1
 8001786:	e6a6      	b.n	80014d6 <__aeabi_dadd+0x2ba>
 8001788:	2b00      	cmp	r3, #0
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x572>
 800178c:	e648      	b.n	8001420 <__aeabi_dadd+0x204>
 800178e:	1a87      	subs	r7, r0, r2
 8001790:	4643      	mov	r3, r8
 8001792:	42b8      	cmp	r0, r7
 8001794:	41b6      	sbcs	r6, r6
 8001796:	1acb      	subs	r3, r1, r3
 8001798:	4276      	negs	r6, r6
 800179a:	1b9e      	subs	r6, r3, r6
 800179c:	0233      	lsls	r3, r6, #8
 800179e:	d54b      	bpl.n	8001838 <__aeabi_dadd+0x61c>
 80017a0:	1a17      	subs	r7, r2, r0
 80017a2:	4643      	mov	r3, r8
 80017a4:	42ba      	cmp	r2, r7
 80017a6:	4192      	sbcs	r2, r2
 80017a8:	1a59      	subs	r1, r3, r1
 80017aa:	4252      	negs	r2, r2
 80017ac:	1a89      	subs	r1, r1, r2
 80017ae:	2207      	movs	r2, #7
 80017b0:	4664      	mov	r4, ip
 80017b2:	403a      	ands	r2, r7
 80017b4:	e592      	b.n	80012dc <__aeabi_dadd+0xc0>
 80017b6:	4301      	orrs	r1, r0
 80017b8:	000f      	movs	r7, r1
 80017ba:	1e79      	subs	r1, r7, #1
 80017bc:	418f      	sbcs	r7, r1
 80017be:	e79d      	b.n	80016fc <__aeabi_dadd+0x4e0>
 80017c0:	001c      	movs	r4, r3
 80017c2:	000f      	movs	r7, r1
 80017c4:	3c20      	subs	r4, #32
 80017c6:	40e7      	lsrs	r7, r4
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d003      	beq.n	80017d4 <__aeabi_dadd+0x5b8>
 80017cc:	2440      	movs	r4, #64	; 0x40
 80017ce:	1ae3      	subs	r3, r4, r3
 80017d0:	4099      	lsls	r1, r3
 80017d2:	4308      	orrs	r0, r1
 80017d4:	1e41      	subs	r1, r0, #1
 80017d6:	4188      	sbcs	r0, r1
 80017d8:	4338      	orrs	r0, r7
 80017da:	e67c      	b.n	80014d6 <__aeabi_dadd+0x2ba>
 80017dc:	2200      	movs	r2, #0
 80017de:	2400      	movs	r4, #0
 80017e0:	e625      	b.n	800142e <__aeabi_dadd+0x212>
 80017e2:	1a17      	subs	r7, r2, r0
 80017e4:	4643      	mov	r3, r8
 80017e6:	42ba      	cmp	r2, r7
 80017e8:	4192      	sbcs	r2, r2
 80017ea:	1a59      	subs	r1, r3, r1
 80017ec:	4252      	negs	r2, r2
 80017ee:	1a89      	subs	r1, r1, r2
 80017f0:	4664      	mov	r4, ip
 80017f2:	0035      	movs	r5, r6
 80017f4:	e543      	b.n	800127e <__aeabi_dadd+0x62>
 80017f6:	4641      	mov	r1, r8
 80017f8:	0010      	movs	r0, r2
 80017fa:	4d14      	ldr	r5, [pc, #80]	; (800184c <__aeabi_dadd+0x630>)
 80017fc:	e610      	b.n	8001420 <__aeabi_dadd+0x204>
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	2400      	movs	r4, #0
 8001802:	0312      	lsls	r2, r2, #12
 8001804:	e680      	b.n	8001508 <__aeabi_dadd+0x2ec>
 8001806:	001d      	movs	r5, r3
 8001808:	000f      	movs	r7, r1
 800180a:	3d20      	subs	r5, #32
 800180c:	40ef      	lsrs	r7, r5
 800180e:	46bc      	mov	ip, r7
 8001810:	2b20      	cmp	r3, #32
 8001812:	d003      	beq.n	800181c <__aeabi_dadd+0x600>
 8001814:	2540      	movs	r5, #64	; 0x40
 8001816:	1aeb      	subs	r3, r5, r3
 8001818:	4099      	lsls	r1, r3
 800181a:	4308      	orrs	r0, r1
 800181c:	0007      	movs	r7, r0
 800181e:	4663      	mov	r3, ip
 8001820:	1e78      	subs	r0, r7, #1
 8001822:	4187      	sbcs	r7, r0
 8001824:	431f      	orrs	r7, r3
 8001826:	e769      	b.n	80016fc <__aeabi_dadd+0x4e0>
 8001828:	1887      	adds	r7, r0, r2
 800182a:	4297      	cmp	r7, r2
 800182c:	419b      	sbcs	r3, r3
 800182e:	4441      	add	r1, r8
 8001830:	425b      	negs	r3, r3
 8001832:	18c9      	adds	r1, r1, r3
 8001834:	0035      	movs	r5, r6
 8001836:	e5a3      	b.n	8001380 <__aeabi_dadd+0x164>
 8001838:	003b      	movs	r3, r7
 800183a:	4333      	orrs	r3, r6
 800183c:	d0ce      	beq.n	80017dc <__aeabi_dadd+0x5c0>
 800183e:	2207      	movs	r2, #7
 8001840:	0031      	movs	r1, r6
 8001842:	403a      	ands	r2, r7
 8001844:	e652      	b.n	80014ec <__aeabi_dadd+0x2d0>
 8001846:	2300      	movs	r3, #0
 8001848:	001a      	movs	r2, r3
 800184a:	e5f4      	b.n	8001436 <__aeabi_dadd+0x21a>
 800184c:	000007ff 	.word	0x000007ff
 8001850:	ff7fffff 	.word	0xff7fffff

08001854 <__aeabi_ddiv>:
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	4657      	mov	r7, sl
 8001858:	46de      	mov	lr, fp
 800185a:	464e      	mov	r6, r9
 800185c:	4645      	mov	r5, r8
 800185e:	b5e0      	push	{r5, r6, r7, lr}
 8001860:	4683      	mov	fp, r0
 8001862:	0007      	movs	r7, r0
 8001864:	030e      	lsls	r6, r1, #12
 8001866:	0048      	lsls	r0, r1, #1
 8001868:	b085      	sub	sp, #20
 800186a:	4692      	mov	sl, r2
 800186c:	001c      	movs	r4, r3
 800186e:	0b36      	lsrs	r6, r6, #12
 8001870:	0d40      	lsrs	r0, r0, #21
 8001872:	0fcd      	lsrs	r5, r1, #31
 8001874:	2800      	cmp	r0, #0
 8001876:	d100      	bne.n	800187a <__aeabi_ddiv+0x26>
 8001878:	e09d      	b.n	80019b6 <__aeabi_ddiv+0x162>
 800187a:	4b95      	ldr	r3, [pc, #596]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 800187c:	4298      	cmp	r0, r3
 800187e:	d039      	beq.n	80018f4 <__aeabi_ddiv+0xa0>
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	00f6      	lsls	r6, r6, #3
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	431e      	orrs	r6, r3
 8001888:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <__aeabi_ddiv+0x280>)
 800188a:	0f7b      	lsrs	r3, r7, #29
 800188c:	4333      	orrs	r3, r6
 800188e:	4699      	mov	r9, r3
 8001890:	4694      	mov	ip, r2
 8001892:	0003      	movs	r3, r0
 8001894:	4463      	add	r3, ip
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2300      	movs	r3, #0
 800189a:	2600      	movs	r6, #0
 800189c:	00ff      	lsls	r7, r7, #3
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	0323      	lsls	r3, r4, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4698      	mov	r8, r3
 80018a6:	0063      	lsls	r3, r4, #1
 80018a8:	0fe4      	lsrs	r4, r4, #31
 80018aa:	4652      	mov	r2, sl
 80018ac:	0d5b      	lsrs	r3, r3, #21
 80018ae:	9401      	str	r4, [sp, #4]
 80018b0:	d100      	bne.n	80018b4 <__aeabi_ddiv+0x60>
 80018b2:	e0b3      	b.n	8001a1c <__aeabi_ddiv+0x1c8>
 80018b4:	4986      	ldr	r1, [pc, #536]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 80018b6:	428b      	cmp	r3, r1
 80018b8:	d100      	bne.n	80018bc <__aeabi_ddiv+0x68>
 80018ba:	e09e      	b.n	80019fa <__aeabi_ddiv+0x1a6>
 80018bc:	4642      	mov	r2, r8
 80018be:	00d1      	lsls	r1, r2, #3
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	430a      	orrs	r2, r1
 80018c6:	4651      	mov	r1, sl
 80018c8:	0f49      	lsrs	r1, r1, #29
 80018ca:	4311      	orrs	r1, r2
 80018cc:	468b      	mov	fp, r1
 80018ce:	4981      	ldr	r1, [pc, #516]	; (8001ad4 <__aeabi_ddiv+0x280>)
 80018d0:	4652      	mov	r2, sl
 80018d2:	468c      	mov	ip, r1
 80018d4:	9900      	ldr	r1, [sp, #0]
 80018d6:	4463      	add	r3, ip
 80018d8:	1acb      	subs	r3, r1, r3
 80018da:	2100      	movs	r1, #0
 80018dc:	00d2      	lsls	r2, r2, #3
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	002b      	movs	r3, r5
 80018e2:	4063      	eors	r3, r4
 80018e4:	469a      	mov	sl, r3
 80018e6:	2e0f      	cmp	r6, #15
 80018e8:	d900      	bls.n	80018ec <__aeabi_ddiv+0x98>
 80018ea:	e105      	b.n	8001af8 <__aeabi_ddiv+0x2a4>
 80018ec:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <__aeabi_ddiv+0x284>)
 80018ee:	00b6      	lsls	r6, r6, #2
 80018f0:	599b      	ldr	r3, [r3, r6]
 80018f2:	469f      	mov	pc, r3
 80018f4:	465b      	mov	r3, fp
 80018f6:	4333      	orrs	r3, r6
 80018f8:	4699      	mov	r9, r3
 80018fa:	d000      	beq.n	80018fe <__aeabi_ddiv+0xaa>
 80018fc:	e0b8      	b.n	8001a70 <__aeabi_ddiv+0x21c>
 80018fe:	2302      	movs	r3, #2
 8001900:	2608      	movs	r6, #8
 8001902:	2700      	movs	r7, #0
 8001904:	9000      	str	r0, [sp, #0]
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	e7ca      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 800190a:	46cb      	mov	fp, r9
 800190c:	003a      	movs	r2, r7
 800190e:	9902      	ldr	r1, [sp, #8]
 8001910:	9501      	str	r5, [sp, #4]
 8001912:	9b01      	ldr	r3, [sp, #4]
 8001914:	469a      	mov	sl, r3
 8001916:	2902      	cmp	r1, #2
 8001918:	d027      	beq.n	800196a <__aeabi_ddiv+0x116>
 800191a:	2903      	cmp	r1, #3
 800191c:	d100      	bne.n	8001920 <__aeabi_ddiv+0xcc>
 800191e:	e280      	b.n	8001e22 <__aeabi_ddiv+0x5ce>
 8001920:	2901      	cmp	r1, #1
 8001922:	d044      	beq.n	80019ae <__aeabi_ddiv+0x15a>
 8001924:	496d      	ldr	r1, [pc, #436]	; (8001adc <__aeabi_ddiv+0x288>)
 8001926:	9b00      	ldr	r3, [sp, #0]
 8001928:	468c      	mov	ip, r1
 800192a:	4463      	add	r3, ip
 800192c:	001c      	movs	r4, r3
 800192e:	2c00      	cmp	r4, #0
 8001930:	dd38      	ble.n	80019a4 <__aeabi_ddiv+0x150>
 8001932:	0753      	lsls	r3, r2, #29
 8001934:	d000      	beq.n	8001938 <__aeabi_ddiv+0xe4>
 8001936:	e213      	b.n	8001d60 <__aeabi_ddiv+0x50c>
 8001938:	08d2      	lsrs	r2, r2, #3
 800193a:	465b      	mov	r3, fp
 800193c:	01db      	lsls	r3, r3, #7
 800193e:	d509      	bpl.n	8001954 <__aeabi_ddiv+0x100>
 8001940:	4659      	mov	r1, fp
 8001942:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <__aeabi_ddiv+0x28c>)
 8001944:	4019      	ands	r1, r3
 8001946:	468b      	mov	fp, r1
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	00c9      	lsls	r1, r1, #3
 800194c:	468c      	mov	ip, r1
 800194e:	9b00      	ldr	r3, [sp, #0]
 8001950:	4463      	add	r3, ip
 8001952:	001c      	movs	r4, r3
 8001954:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <__aeabi_ddiv+0x290>)
 8001956:	429c      	cmp	r4, r3
 8001958:	dc07      	bgt.n	800196a <__aeabi_ddiv+0x116>
 800195a:	465b      	mov	r3, fp
 800195c:	0564      	lsls	r4, r4, #21
 800195e:	075f      	lsls	r7, r3, #29
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	4317      	orrs	r7, r2
 8001964:	0b1b      	lsrs	r3, r3, #12
 8001966:	0d62      	lsrs	r2, r4, #21
 8001968:	e002      	b.n	8001970 <__aeabi_ddiv+0x11c>
 800196a:	2300      	movs	r3, #0
 800196c:	2700      	movs	r7, #0
 800196e:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 8001970:	2100      	movs	r1, #0
 8001972:	031b      	lsls	r3, r3, #12
 8001974:	0b1c      	lsrs	r4, r3, #12
 8001976:	0d0b      	lsrs	r3, r1, #20
 8001978:	051b      	lsls	r3, r3, #20
 800197a:	4323      	orrs	r3, r4
 800197c:	0514      	lsls	r4, r2, #20
 800197e:	4a5a      	ldr	r2, [pc, #360]	; (8001ae8 <__aeabi_ddiv+0x294>)
 8001980:	0038      	movs	r0, r7
 8001982:	4013      	ands	r3, r2
 8001984:	431c      	orrs	r4, r3
 8001986:	4653      	mov	r3, sl
 8001988:	0064      	lsls	r4, r4, #1
 800198a:	07db      	lsls	r3, r3, #31
 800198c:	0864      	lsrs	r4, r4, #1
 800198e:	431c      	orrs	r4, r3
 8001990:	0021      	movs	r1, r4
 8001992:	b005      	add	sp, #20
 8001994:	bc3c      	pop	{r2, r3, r4, r5}
 8001996:	4690      	mov	r8, r2
 8001998:	4699      	mov	r9, r3
 800199a:	46a2      	mov	sl, r4
 800199c:	46ab      	mov	fp, r5
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a0:	2201      	movs	r2, #1
 80019a2:	4252      	negs	r2, r2
 80019a4:	2301      	movs	r3, #1
 80019a6:	1b1b      	subs	r3, r3, r4
 80019a8:	2b38      	cmp	r3, #56	; 0x38
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_ddiv+0x15a>
 80019ac:	e1ad      	b.n	8001d0a <__aeabi_ddiv+0x4b6>
 80019ae:	2200      	movs	r2, #0
 80019b0:	2300      	movs	r3, #0
 80019b2:	2700      	movs	r7, #0
 80019b4:	e7dc      	b.n	8001970 <__aeabi_ddiv+0x11c>
 80019b6:	465b      	mov	r3, fp
 80019b8:	4333      	orrs	r3, r6
 80019ba:	4699      	mov	r9, r3
 80019bc:	d05e      	beq.n	8001a7c <__aeabi_ddiv+0x228>
 80019be:	2e00      	cmp	r6, #0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_ddiv+0x170>
 80019c2:	e18a      	b.n	8001cda <__aeabi_ddiv+0x486>
 80019c4:	0030      	movs	r0, r6
 80019c6:	f001 fa9d 	bl	8002f04 <__clzsi2>
 80019ca:	0003      	movs	r3, r0
 80019cc:	3b0b      	subs	r3, #11
 80019ce:	2b1c      	cmp	r3, #28
 80019d0:	dd00      	ble.n	80019d4 <__aeabi_ddiv+0x180>
 80019d2:	e17b      	b.n	8001ccc <__aeabi_ddiv+0x478>
 80019d4:	221d      	movs	r2, #29
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	465a      	mov	r2, fp
 80019da:	0001      	movs	r1, r0
 80019dc:	40da      	lsrs	r2, r3
 80019de:	3908      	subs	r1, #8
 80019e0:	408e      	lsls	r6, r1
 80019e2:	0013      	movs	r3, r2
 80019e4:	465f      	mov	r7, fp
 80019e6:	4333      	orrs	r3, r6
 80019e8:	4699      	mov	r9, r3
 80019ea:	408f      	lsls	r7, r1
 80019ec:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <__aeabi_ddiv+0x298>)
 80019ee:	2600      	movs	r6, #0
 80019f0:	1a1b      	subs	r3, r3, r0
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	e752      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 80019fa:	4641      	mov	r1, r8
 80019fc:	4653      	mov	r3, sl
 80019fe:	430b      	orrs	r3, r1
 8001a00:	493b      	ldr	r1, [pc, #236]	; (8001af0 <__aeabi_ddiv+0x29c>)
 8001a02:	469b      	mov	fp, r3
 8001a04:	468c      	mov	ip, r1
 8001a06:	9b00      	ldr	r3, [sp, #0]
 8001a08:	4463      	add	r3, ip
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	465b      	mov	r3, fp
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d13b      	bne.n	8001a8a <__aeabi_ddiv+0x236>
 8001a12:	2302      	movs	r3, #2
 8001a14:	2200      	movs	r2, #0
 8001a16:	431e      	orrs	r6, r3
 8001a18:	2102      	movs	r1, #2
 8001a1a:	e761      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a1c:	4643      	mov	r3, r8
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	469b      	mov	fp, r3
 8001a22:	d037      	beq.n	8001a94 <__aeabi_ddiv+0x240>
 8001a24:	4643      	mov	r3, r8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_ddiv+0x1d8>
 8001a2a:	e162      	b.n	8001cf2 <__aeabi_ddiv+0x49e>
 8001a2c:	4640      	mov	r0, r8
 8001a2e:	f001 fa69 	bl	8002f04 <__clzsi2>
 8001a32:	0003      	movs	r3, r0
 8001a34:	3b0b      	subs	r3, #11
 8001a36:	2b1c      	cmp	r3, #28
 8001a38:	dd00      	ble.n	8001a3c <__aeabi_ddiv+0x1e8>
 8001a3a:	e153      	b.n	8001ce4 <__aeabi_ddiv+0x490>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	4641      	mov	r1, r8
 8001a40:	3a08      	subs	r2, #8
 8001a42:	4091      	lsls	r1, r2
 8001a44:	4688      	mov	r8, r1
 8001a46:	211d      	movs	r1, #29
 8001a48:	1acb      	subs	r3, r1, r3
 8001a4a:	4651      	mov	r1, sl
 8001a4c:	40d9      	lsrs	r1, r3
 8001a4e:	000b      	movs	r3, r1
 8001a50:	4641      	mov	r1, r8
 8001a52:	430b      	orrs	r3, r1
 8001a54:	469b      	mov	fp, r3
 8001a56:	4653      	mov	r3, sl
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	4925      	ldr	r1, [pc, #148]	; (8001af4 <__aeabi_ddiv+0x2a0>)
 8001a60:	469c      	mov	ip, r3
 8001a62:	4460      	add	r0, ip
 8001a64:	0003      	movs	r3, r0
 8001a66:	468c      	mov	ip, r1
 8001a68:	4463      	add	r3, ip
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	e737      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a70:	2303      	movs	r3, #3
 8001a72:	46b1      	mov	r9, r6
 8001a74:	9000      	str	r0, [sp, #0]
 8001a76:	260c      	movs	r6, #12
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	e711      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	2604      	movs	r6, #4
 8001a84:	2700      	movs	r7, #0
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	e70a      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	46c3      	mov	fp, r8
 8001a8e:	431e      	orrs	r6, r3
 8001a90:	2103      	movs	r1, #3
 8001a92:	e725      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a94:	3301      	adds	r3, #1
 8001a96:	431e      	orrs	r6, r3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	e720      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	469a      	mov	sl, r3
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	2700      	movs	r7, #0
 8001aa6:	031b      	lsls	r3, r3, #12
 8001aa8:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 8001aaa:	e761      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	4649      	mov	r1, r9
 8001ab0:	031b      	lsls	r3, r3, #12
 8001ab2:	4219      	tst	r1, r3
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_ddiv+0x264>
 8001ab6:	e0e2      	b.n	8001c7e <__aeabi_ddiv+0x42a>
 8001ab8:	4659      	mov	r1, fp
 8001aba:	4219      	tst	r1, r3
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_ddiv+0x26c>
 8001abe:	e0de      	b.n	8001c7e <__aeabi_ddiv+0x42a>
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	031b      	lsls	r3, r3, #12
 8001ac4:	0017      	movs	r7, r2
 8001ac6:	0b1b      	lsrs	r3, r3, #12
 8001ac8:	46a2      	mov	sl, r4
 8001aca:	4a01      	ldr	r2, [pc, #4]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 8001acc:	e750      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	fffffc01 	.word	0xfffffc01
 8001ad8:	08018c04 	.word	0x08018c04
 8001adc:	000003ff 	.word	0x000003ff
 8001ae0:	feffffff 	.word	0xfeffffff
 8001ae4:	000007fe 	.word	0x000007fe
 8001ae8:	800fffff 	.word	0x800fffff
 8001aec:	fffffc0d 	.word	0xfffffc0d
 8001af0:	fffff801 	.word	0xfffff801
 8001af4:	000003f3 	.word	0x000003f3
 8001af8:	45d9      	cmp	r9, fp
 8001afa:	d900      	bls.n	8001afe <__aeabi_ddiv+0x2aa>
 8001afc:	e0cb      	b.n	8001c96 <__aeabi_ddiv+0x442>
 8001afe:	d100      	bne.n	8001b02 <__aeabi_ddiv+0x2ae>
 8001b00:	e0c6      	b.n	8001c90 <__aeabi_ddiv+0x43c>
 8001b02:	003c      	movs	r4, r7
 8001b04:	4648      	mov	r0, r9
 8001b06:	2700      	movs	r7, #0
 8001b08:	9b00      	ldr	r3, [sp, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	465b      	mov	r3, fp
 8001b10:	0e16      	lsrs	r6, r2, #24
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	431e      	orrs	r6, r3
 8001b16:	0213      	lsls	r3, r2, #8
 8001b18:	4698      	mov	r8, r3
 8001b1a:	0433      	lsls	r3, r6, #16
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	4699      	mov	r9, r3
 8001b20:	0c31      	lsrs	r1, r6, #16
 8001b22:	9101      	str	r1, [sp, #4]
 8001b24:	f7fe fb9a 	bl	800025c <__aeabi_uidivmod>
 8001b28:	464a      	mov	r2, r9
 8001b2a:	4342      	muls	r2, r0
 8001b2c:	040b      	lsls	r3, r1, #16
 8001b2e:	0c21      	lsrs	r1, r4, #16
 8001b30:	0005      	movs	r5, r0
 8001b32:	4319      	orrs	r1, r3
 8001b34:	428a      	cmp	r2, r1
 8001b36:	d907      	bls.n	8001b48 <__aeabi_ddiv+0x2f4>
 8001b38:	1989      	adds	r1, r1, r6
 8001b3a:	3d01      	subs	r5, #1
 8001b3c:	428e      	cmp	r6, r1
 8001b3e:	d803      	bhi.n	8001b48 <__aeabi_ddiv+0x2f4>
 8001b40:	428a      	cmp	r2, r1
 8001b42:	d901      	bls.n	8001b48 <__aeabi_ddiv+0x2f4>
 8001b44:	1e85      	subs	r5, r0, #2
 8001b46:	1989      	adds	r1, r1, r6
 8001b48:	1a88      	subs	r0, r1, r2
 8001b4a:	9901      	ldr	r1, [sp, #4]
 8001b4c:	f7fe fb86 	bl	800025c <__aeabi_uidivmod>
 8001b50:	0409      	lsls	r1, r1, #16
 8001b52:	468c      	mov	ip, r1
 8001b54:	464a      	mov	r2, r9
 8001b56:	0421      	lsls	r1, r4, #16
 8001b58:	4664      	mov	r4, ip
 8001b5a:	4342      	muls	r2, r0
 8001b5c:	0c09      	lsrs	r1, r1, #16
 8001b5e:	0003      	movs	r3, r0
 8001b60:	4321      	orrs	r1, r4
 8001b62:	428a      	cmp	r2, r1
 8001b64:	d904      	bls.n	8001b70 <__aeabi_ddiv+0x31c>
 8001b66:	1989      	adds	r1, r1, r6
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	428e      	cmp	r6, r1
 8001b6c:	d800      	bhi.n	8001b70 <__aeabi_ddiv+0x31c>
 8001b6e:	e0f1      	b.n	8001d54 <__aeabi_ddiv+0x500>
 8001b70:	042d      	lsls	r5, r5, #16
 8001b72:	431d      	orrs	r5, r3
 8001b74:	46ab      	mov	fp, r5
 8001b76:	4643      	mov	r3, r8
 8001b78:	1a89      	subs	r1, r1, r2
 8001b7a:	4642      	mov	r2, r8
 8001b7c:	0c28      	lsrs	r0, r5, #16
 8001b7e:	0412      	lsls	r2, r2, #16
 8001b80:	0c1d      	lsrs	r5, r3, #16
 8001b82:	465b      	mov	r3, fp
 8001b84:	0c14      	lsrs	r4, r2, #16
 8001b86:	0022      	movs	r2, r4
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	435a      	muls	r2, r3
 8001b8e:	9403      	str	r4, [sp, #12]
 8001b90:	436b      	muls	r3, r5
 8001b92:	4344      	muls	r4, r0
 8001b94:	9502      	str	r5, [sp, #8]
 8001b96:	4368      	muls	r0, r5
 8001b98:	191b      	adds	r3, r3, r4
 8001b9a:	0c15      	lsrs	r5, r2, #16
 8001b9c:	18eb      	adds	r3, r5, r3
 8001b9e:	429c      	cmp	r4, r3
 8001ba0:	d903      	bls.n	8001baa <__aeabi_ddiv+0x356>
 8001ba2:	2480      	movs	r4, #128	; 0x80
 8001ba4:	0264      	lsls	r4, r4, #9
 8001ba6:	46a4      	mov	ip, r4
 8001ba8:	4460      	add	r0, ip
 8001baa:	0c1c      	lsrs	r4, r3, #16
 8001bac:	0415      	lsls	r5, r2, #16
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	0c2d      	lsrs	r5, r5, #16
 8001bb2:	1820      	adds	r0, r4, r0
 8001bb4:	195d      	adds	r5, r3, r5
 8001bb6:	4281      	cmp	r1, r0
 8001bb8:	d377      	bcc.n	8001caa <__aeabi_ddiv+0x456>
 8001bba:	d073      	beq.n	8001ca4 <__aeabi_ddiv+0x450>
 8001bbc:	1a0c      	subs	r4, r1, r0
 8001bbe:	4aa2      	ldr	r2, [pc, #648]	; (8001e48 <__aeabi_ddiv+0x5f4>)
 8001bc0:	1b7d      	subs	r5, r7, r5
 8001bc2:	42af      	cmp	r7, r5
 8001bc4:	41bf      	sbcs	r7, r7
 8001bc6:	4694      	mov	ip, r2
 8001bc8:	9b00      	ldr	r3, [sp, #0]
 8001bca:	427f      	negs	r7, r7
 8001bcc:	4463      	add	r3, ip
 8001bce:	1be0      	subs	r0, r4, r7
 8001bd0:	001c      	movs	r4, r3
 8001bd2:	4286      	cmp	r6, r0
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_ddiv+0x384>
 8001bd6:	e0db      	b.n	8001d90 <__aeabi_ddiv+0x53c>
 8001bd8:	9901      	ldr	r1, [sp, #4]
 8001bda:	f7fe fb3f 	bl	800025c <__aeabi_uidivmod>
 8001bde:	464a      	mov	r2, r9
 8001be0:	4342      	muls	r2, r0
 8001be2:	040b      	lsls	r3, r1, #16
 8001be4:	0c29      	lsrs	r1, r5, #16
 8001be6:	0007      	movs	r7, r0
 8001be8:	4319      	orrs	r1, r3
 8001bea:	428a      	cmp	r2, r1
 8001bec:	d907      	bls.n	8001bfe <__aeabi_ddiv+0x3aa>
 8001bee:	1989      	adds	r1, r1, r6
 8001bf0:	3f01      	subs	r7, #1
 8001bf2:	428e      	cmp	r6, r1
 8001bf4:	d803      	bhi.n	8001bfe <__aeabi_ddiv+0x3aa>
 8001bf6:	428a      	cmp	r2, r1
 8001bf8:	d901      	bls.n	8001bfe <__aeabi_ddiv+0x3aa>
 8001bfa:	1e87      	subs	r7, r0, #2
 8001bfc:	1989      	adds	r1, r1, r6
 8001bfe:	1a88      	subs	r0, r1, r2
 8001c00:	9901      	ldr	r1, [sp, #4]
 8001c02:	f7fe fb2b 	bl	800025c <__aeabi_uidivmod>
 8001c06:	0409      	lsls	r1, r1, #16
 8001c08:	464a      	mov	r2, r9
 8001c0a:	4689      	mov	r9, r1
 8001c0c:	0429      	lsls	r1, r5, #16
 8001c0e:	464d      	mov	r5, r9
 8001c10:	4342      	muls	r2, r0
 8001c12:	0c09      	lsrs	r1, r1, #16
 8001c14:	0003      	movs	r3, r0
 8001c16:	4329      	orrs	r1, r5
 8001c18:	428a      	cmp	r2, r1
 8001c1a:	d907      	bls.n	8001c2c <__aeabi_ddiv+0x3d8>
 8001c1c:	1989      	adds	r1, r1, r6
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	428e      	cmp	r6, r1
 8001c22:	d803      	bhi.n	8001c2c <__aeabi_ddiv+0x3d8>
 8001c24:	428a      	cmp	r2, r1
 8001c26:	d901      	bls.n	8001c2c <__aeabi_ddiv+0x3d8>
 8001c28:	1e83      	subs	r3, r0, #2
 8001c2a:	1989      	adds	r1, r1, r6
 8001c2c:	043f      	lsls	r7, r7, #16
 8001c2e:	1a89      	subs	r1, r1, r2
 8001c30:	003a      	movs	r2, r7
 8001c32:	9f03      	ldr	r7, [sp, #12]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	0038      	movs	r0, r7
 8001c38:	0413      	lsls	r3, r2, #16
 8001c3a:	0c1b      	lsrs	r3, r3, #16
 8001c3c:	4358      	muls	r0, r3
 8001c3e:	4681      	mov	r9, r0
 8001c40:	9802      	ldr	r0, [sp, #8]
 8001c42:	0c15      	lsrs	r5, r2, #16
 8001c44:	436f      	muls	r7, r5
 8001c46:	4343      	muls	r3, r0
 8001c48:	4345      	muls	r5, r0
 8001c4a:	4648      	mov	r0, r9
 8001c4c:	0c00      	lsrs	r0, r0, #16
 8001c4e:	4684      	mov	ip, r0
 8001c50:	19db      	adds	r3, r3, r7
 8001c52:	4463      	add	r3, ip
 8001c54:	429f      	cmp	r7, r3
 8001c56:	d903      	bls.n	8001c60 <__aeabi_ddiv+0x40c>
 8001c58:	2080      	movs	r0, #128	; 0x80
 8001c5a:	0240      	lsls	r0, r0, #9
 8001c5c:	4684      	mov	ip, r0
 8001c5e:	4465      	add	r5, ip
 8001c60:	4648      	mov	r0, r9
 8001c62:	0c1f      	lsrs	r7, r3, #16
 8001c64:	0400      	lsls	r0, r0, #16
 8001c66:	041b      	lsls	r3, r3, #16
 8001c68:	0c00      	lsrs	r0, r0, #16
 8001c6a:	197d      	adds	r5, r7, r5
 8001c6c:	1818      	adds	r0, r3, r0
 8001c6e:	42a9      	cmp	r1, r5
 8001c70:	d200      	bcs.n	8001c74 <__aeabi_ddiv+0x420>
 8001c72:	e084      	b.n	8001d7e <__aeabi_ddiv+0x52a>
 8001c74:	d100      	bne.n	8001c78 <__aeabi_ddiv+0x424>
 8001c76:	e07f      	b.n	8001d78 <__aeabi_ddiv+0x524>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	e657      	b.n	800192e <__aeabi_ddiv+0xda>
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	464a      	mov	r2, r9
 8001c82:	031b      	lsls	r3, r3, #12
 8001c84:	4313      	orrs	r3, r2
 8001c86:	031b      	lsls	r3, r3, #12
 8001c88:	0b1b      	lsrs	r3, r3, #12
 8001c8a:	46aa      	mov	sl, r5
 8001c8c:	4a6f      	ldr	r2, [pc, #444]	; (8001e4c <__aeabi_ddiv+0x5f8>)
 8001c8e:	e66f      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001c90:	42ba      	cmp	r2, r7
 8001c92:	d900      	bls.n	8001c96 <__aeabi_ddiv+0x442>
 8001c94:	e735      	b.n	8001b02 <__aeabi_ddiv+0x2ae>
 8001c96:	464b      	mov	r3, r9
 8001c98:	07dc      	lsls	r4, r3, #31
 8001c9a:	0858      	lsrs	r0, r3, #1
 8001c9c:	087b      	lsrs	r3, r7, #1
 8001c9e:	431c      	orrs	r4, r3
 8001ca0:	07ff      	lsls	r7, r7, #31
 8001ca2:	e734      	b.n	8001b0e <__aeabi_ddiv+0x2ba>
 8001ca4:	2400      	movs	r4, #0
 8001ca6:	42af      	cmp	r7, r5
 8001ca8:	d289      	bcs.n	8001bbe <__aeabi_ddiv+0x36a>
 8001caa:	4447      	add	r7, r8
 8001cac:	4547      	cmp	r7, r8
 8001cae:	41a4      	sbcs	r4, r4
 8001cb0:	465b      	mov	r3, fp
 8001cb2:	4264      	negs	r4, r4
 8001cb4:	19a4      	adds	r4, r4, r6
 8001cb6:	1864      	adds	r4, r4, r1
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	42a6      	cmp	r6, r4
 8001cbc:	d21e      	bcs.n	8001cfc <__aeabi_ddiv+0x4a8>
 8001cbe:	42a0      	cmp	r0, r4
 8001cc0:	d86d      	bhi.n	8001d9e <__aeabi_ddiv+0x54a>
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_ddiv+0x472>
 8001cc4:	e0b6      	b.n	8001e34 <__aeabi_ddiv+0x5e0>
 8001cc6:	1a24      	subs	r4, r4, r0
 8001cc8:	469b      	mov	fp, r3
 8001cca:	e778      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	465a      	mov	r2, fp
 8001cd0:	3b28      	subs	r3, #40	; 0x28
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	2700      	movs	r7, #0
 8001cd6:	4691      	mov	r9, r2
 8001cd8:	e688      	b.n	80019ec <__aeabi_ddiv+0x198>
 8001cda:	4658      	mov	r0, fp
 8001cdc:	f001 f912 	bl	8002f04 <__clzsi2>
 8001ce0:	3020      	adds	r0, #32
 8001ce2:	e672      	b.n	80019ca <__aeabi_ddiv+0x176>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	3b28      	subs	r3, #40	; 0x28
 8001cea:	409a      	lsls	r2, r3
 8001cec:	4693      	mov	fp, r2
 8001cee:	2200      	movs	r2, #0
 8001cf0:	e6b4      	b.n	8001a5c <__aeabi_ddiv+0x208>
 8001cf2:	4650      	mov	r0, sl
 8001cf4:	f001 f906 	bl	8002f04 <__clzsi2>
 8001cf8:	3020      	adds	r0, #32
 8001cfa:	e69a      	b.n	8001a32 <__aeabi_ddiv+0x1de>
 8001cfc:	42a6      	cmp	r6, r4
 8001cfe:	d1e2      	bne.n	8001cc6 <__aeabi_ddiv+0x472>
 8001d00:	45b8      	cmp	r8, r7
 8001d02:	d9dc      	bls.n	8001cbe <__aeabi_ddiv+0x46a>
 8001d04:	1a34      	subs	r4, r6, r0
 8001d06:	469b      	mov	fp, r3
 8001d08:	e759      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001d0a:	2b1f      	cmp	r3, #31
 8001d0c:	dc65      	bgt.n	8001dda <__aeabi_ddiv+0x586>
 8001d0e:	4c50      	ldr	r4, [pc, #320]	; (8001e50 <__aeabi_ddiv+0x5fc>)
 8001d10:	9900      	ldr	r1, [sp, #0]
 8001d12:	46a4      	mov	ip, r4
 8001d14:	465c      	mov	r4, fp
 8001d16:	4461      	add	r1, ip
 8001d18:	0008      	movs	r0, r1
 8001d1a:	408c      	lsls	r4, r1
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	4082      	lsls	r2, r0
 8001d20:	40d9      	lsrs	r1, r3
 8001d22:	1e50      	subs	r0, r2, #1
 8001d24:	4182      	sbcs	r2, r0
 8001d26:	430c      	orrs	r4, r1
 8001d28:	4314      	orrs	r4, r2
 8001d2a:	465a      	mov	r2, fp
 8001d2c:	40da      	lsrs	r2, r3
 8001d2e:	0013      	movs	r3, r2
 8001d30:	0762      	lsls	r2, r4, #29
 8001d32:	d009      	beq.n	8001d48 <__aeabi_ddiv+0x4f4>
 8001d34:	220f      	movs	r2, #15
 8001d36:	4022      	ands	r2, r4
 8001d38:	2a04      	cmp	r2, #4
 8001d3a:	d005      	beq.n	8001d48 <__aeabi_ddiv+0x4f4>
 8001d3c:	0022      	movs	r2, r4
 8001d3e:	1d14      	adds	r4, r2, #4
 8001d40:	4294      	cmp	r4, r2
 8001d42:	4189      	sbcs	r1, r1
 8001d44:	4249      	negs	r1, r1
 8001d46:	185b      	adds	r3, r3, r1
 8001d48:	021a      	lsls	r2, r3, #8
 8001d4a:	d562      	bpl.n	8001e12 <__aeabi_ddiv+0x5be>
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2700      	movs	r7, #0
 8001d52:	e60d      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001d54:	428a      	cmp	r2, r1
 8001d56:	d800      	bhi.n	8001d5a <__aeabi_ddiv+0x506>
 8001d58:	e70a      	b.n	8001b70 <__aeabi_ddiv+0x31c>
 8001d5a:	1e83      	subs	r3, r0, #2
 8001d5c:	1989      	adds	r1, r1, r6
 8001d5e:	e707      	b.n	8001b70 <__aeabi_ddiv+0x31c>
 8001d60:	230f      	movs	r3, #15
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d100      	bne.n	8001d6a <__aeabi_ddiv+0x516>
 8001d68:	e5e6      	b.n	8001938 <__aeabi_ddiv+0xe4>
 8001d6a:	1d17      	adds	r7, r2, #4
 8001d6c:	4297      	cmp	r7, r2
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4253      	negs	r3, r2
 8001d72:	449b      	add	fp, r3
 8001d74:	08fa      	lsrs	r2, r7, #3
 8001d76:	e5e0      	b.n	800193a <__aeabi_ddiv+0xe6>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_ddiv+0x52a>
 8001d7c:	e5d7      	b.n	800192e <__aeabi_ddiv+0xda>
 8001d7e:	1871      	adds	r1, r6, r1
 8001d80:	1e53      	subs	r3, r2, #1
 8001d82:	42b1      	cmp	r1, r6
 8001d84:	d327      	bcc.n	8001dd6 <__aeabi_ddiv+0x582>
 8001d86:	42a9      	cmp	r1, r5
 8001d88:	d315      	bcc.n	8001db6 <__aeabi_ddiv+0x562>
 8001d8a:	d058      	beq.n	8001e3e <__aeabi_ddiv+0x5ea>
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	e773      	b.n	8001c78 <__aeabi_ddiv+0x424>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	dc00      	bgt.n	8001d96 <__aeabi_ddiv+0x542>
 8001d94:	e604      	b.n	80019a0 <__aeabi_ddiv+0x14c>
 8001d96:	2301      	movs	r3, #1
 8001d98:	2200      	movs	r2, #0
 8001d9a:	449b      	add	fp, r3
 8001d9c:	e5cd      	b.n	800193a <__aeabi_ddiv+0xe6>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	4447      	add	r7, r8
 8001da2:	4547      	cmp	r7, r8
 8001da4:	4189      	sbcs	r1, r1
 8001da6:	425b      	negs	r3, r3
 8001da8:	469c      	mov	ip, r3
 8001daa:	4249      	negs	r1, r1
 8001dac:	1989      	adds	r1, r1, r6
 8001dae:	190c      	adds	r4, r1, r4
 8001db0:	44e3      	add	fp, ip
 8001db2:	1a24      	subs	r4, r4, r0
 8001db4:	e703      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001db6:	4643      	mov	r3, r8
 8001db8:	005f      	lsls	r7, r3, #1
 8001dba:	4547      	cmp	r7, r8
 8001dbc:	419b      	sbcs	r3, r3
 8001dbe:	46b8      	mov	r8, r7
 8001dc0:	425b      	negs	r3, r3
 8001dc2:	199e      	adds	r6, r3, r6
 8001dc4:	3a02      	subs	r2, #2
 8001dc6:	1989      	adds	r1, r1, r6
 8001dc8:	42a9      	cmp	r1, r5
 8001dca:	d000      	beq.n	8001dce <__aeabi_ddiv+0x57a>
 8001dcc:	e754      	b.n	8001c78 <__aeabi_ddiv+0x424>
 8001dce:	4540      	cmp	r0, r8
 8001dd0:	d000      	beq.n	8001dd4 <__aeabi_ddiv+0x580>
 8001dd2:	e751      	b.n	8001c78 <__aeabi_ddiv+0x424>
 8001dd4:	e5ab      	b.n	800192e <__aeabi_ddiv+0xda>
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	e7f6      	b.n	8001dc8 <__aeabi_ddiv+0x574>
 8001dda:	211f      	movs	r1, #31
 8001ddc:	465f      	mov	r7, fp
 8001dde:	4249      	negs	r1, r1
 8001de0:	1b0c      	subs	r4, r1, r4
 8001de2:	40e7      	lsrs	r7, r4
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d007      	beq.n	8001df8 <__aeabi_ddiv+0x5a4>
 8001de8:	491a      	ldr	r1, [pc, #104]	; (8001e54 <__aeabi_ddiv+0x600>)
 8001dea:	9b00      	ldr	r3, [sp, #0]
 8001dec:	468c      	mov	ip, r1
 8001dee:	4463      	add	r3, ip
 8001df0:	0018      	movs	r0, r3
 8001df2:	465b      	mov	r3, fp
 8001df4:	4083      	lsls	r3, r0
 8001df6:	431a      	orrs	r2, r3
 8001df8:	1e50      	subs	r0, r2, #1
 8001dfa:	4182      	sbcs	r2, r0
 8001dfc:	433a      	orrs	r2, r7
 8001dfe:	2707      	movs	r7, #7
 8001e00:	2300      	movs	r3, #0
 8001e02:	4017      	ands	r7, r2
 8001e04:	d009      	beq.n	8001e1a <__aeabi_ddiv+0x5c6>
 8001e06:	210f      	movs	r1, #15
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4011      	ands	r1, r2
 8001e0c:	0014      	movs	r4, r2
 8001e0e:	2904      	cmp	r1, #4
 8001e10:	d195      	bne.n	8001d3e <__aeabi_ddiv+0x4ea>
 8001e12:	0022      	movs	r2, r4
 8001e14:	075f      	lsls	r7, r3, #29
 8001e16:	025b      	lsls	r3, r3, #9
 8001e18:	0b1b      	lsrs	r3, r3, #12
 8001e1a:	08d2      	lsrs	r2, r2, #3
 8001e1c:	4317      	orrs	r7, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	e5a6      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	4659      	mov	r1, fp
 8001e26:	031b      	lsls	r3, r3, #12
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	031b      	lsls	r3, r3, #12
 8001e2c:	0017      	movs	r7, r2
 8001e2e:	0b1b      	lsrs	r3, r3, #12
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <__aeabi_ddiv+0x5f8>)
 8001e32:	e59d      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001e34:	42bd      	cmp	r5, r7
 8001e36:	d8b2      	bhi.n	8001d9e <__aeabi_ddiv+0x54a>
 8001e38:	469b      	mov	fp, r3
 8001e3a:	2400      	movs	r4, #0
 8001e3c:	e6bf      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001e3e:	4580      	cmp	r8, r0
 8001e40:	d3b9      	bcc.n	8001db6 <__aeabi_ddiv+0x562>
 8001e42:	001a      	movs	r2, r3
 8001e44:	e7c3      	b.n	8001dce <__aeabi_ddiv+0x57a>
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	000003ff 	.word	0x000003ff
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	0000041e 	.word	0x0000041e
 8001e54:	0000043e 	.word	0x0000043e

08001e58 <__eqdf2>:
 8001e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5a:	464f      	mov	r7, r9
 8001e5c:	4646      	mov	r6, r8
 8001e5e:	46d6      	mov	lr, sl
 8001e60:	4684      	mov	ip, r0
 8001e62:	b5c0      	push	{r6, r7, lr}
 8001e64:	4680      	mov	r8, r0
 8001e66:	4e19      	ldr	r6, [pc, #100]	; (8001ecc <__eqdf2+0x74>)
 8001e68:	0318      	lsls	r0, r3, #12
 8001e6a:	030f      	lsls	r7, r1, #12
 8001e6c:	004d      	lsls	r5, r1, #1
 8001e6e:	0b00      	lsrs	r0, r0, #12
 8001e70:	005c      	lsls	r4, r3, #1
 8001e72:	4682      	mov	sl, r0
 8001e74:	0b3f      	lsrs	r7, r7, #12
 8001e76:	0d6d      	lsrs	r5, r5, #21
 8001e78:	0fc9      	lsrs	r1, r1, #31
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	0d64      	lsrs	r4, r4, #21
 8001e7e:	0fdb      	lsrs	r3, r3, #31
 8001e80:	2001      	movs	r0, #1
 8001e82:	42b5      	cmp	r5, r6
 8001e84:	d00a      	beq.n	8001e9c <__eqdf2+0x44>
 8001e86:	42b4      	cmp	r4, r6
 8001e88:	d003      	beq.n	8001e92 <__eqdf2+0x3a>
 8001e8a:	42a5      	cmp	r5, r4
 8001e8c:	d101      	bne.n	8001e92 <__eqdf2+0x3a>
 8001e8e:	4557      	cmp	r7, sl
 8001e90:	d00c      	beq.n	8001eac <__eqdf2+0x54>
 8001e92:	bc1c      	pop	{r2, r3, r4}
 8001e94:	4690      	mov	r8, r2
 8001e96:	4699      	mov	r9, r3
 8001e98:	46a2      	mov	sl, r4
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9c:	4666      	mov	r6, ip
 8001e9e:	433e      	orrs	r6, r7
 8001ea0:	d1f7      	bne.n	8001e92 <__eqdf2+0x3a>
 8001ea2:	42ac      	cmp	r4, r5
 8001ea4:	d1f5      	bne.n	8001e92 <__eqdf2+0x3a>
 8001ea6:	4654      	mov	r4, sl
 8001ea8:	4314      	orrs	r4, r2
 8001eaa:	d1f2      	bne.n	8001e92 <__eqdf2+0x3a>
 8001eac:	2001      	movs	r0, #1
 8001eae:	45c8      	cmp	r8, r9
 8001eb0:	d1ef      	bne.n	8001e92 <__eqdf2+0x3a>
 8001eb2:	4299      	cmp	r1, r3
 8001eb4:	d007      	beq.n	8001ec6 <__eqdf2+0x6e>
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	d1eb      	bne.n	8001e92 <__eqdf2+0x3a>
 8001eba:	4663      	mov	r3, ip
 8001ebc:	431f      	orrs	r7, r3
 8001ebe:	0038      	movs	r0, r7
 8001ec0:	1e47      	subs	r7, r0, #1
 8001ec2:	41b8      	sbcs	r0, r7
 8001ec4:	e7e5      	b.n	8001e92 <__eqdf2+0x3a>
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	e7e3      	b.n	8001e92 <__eqdf2+0x3a>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007ff 	.word	0x000007ff

08001ed0 <__gedf2>:
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	464f      	mov	r7, r9
 8001ed4:	4646      	mov	r6, r8
 8001ed6:	46d6      	mov	lr, sl
 8001ed8:	004d      	lsls	r5, r1, #1
 8001eda:	b5c0      	push	{r6, r7, lr}
 8001edc:	030e      	lsls	r6, r1, #12
 8001ede:	0fc9      	lsrs	r1, r1, #31
 8001ee0:	468a      	mov	sl, r1
 8001ee2:	492c      	ldr	r1, [pc, #176]	; (8001f94 <__gedf2+0xc4>)
 8001ee4:	031f      	lsls	r7, r3, #12
 8001ee6:	005c      	lsls	r4, r3, #1
 8001ee8:	4680      	mov	r8, r0
 8001eea:	0b36      	lsrs	r6, r6, #12
 8001eec:	0d6d      	lsrs	r5, r5, #21
 8001eee:	4691      	mov	r9, r2
 8001ef0:	0b3f      	lsrs	r7, r7, #12
 8001ef2:	0d64      	lsrs	r4, r4, #21
 8001ef4:	0fdb      	lsrs	r3, r3, #31
 8001ef6:	428d      	cmp	r5, r1
 8001ef8:	d01e      	beq.n	8001f38 <__gedf2+0x68>
 8001efa:	428c      	cmp	r4, r1
 8001efc:	d016      	beq.n	8001f2c <__gedf2+0x5c>
 8001efe:	2d00      	cmp	r5, #0
 8001f00:	d11e      	bne.n	8001f40 <__gedf2+0x70>
 8001f02:	4330      	orrs	r0, r6
 8001f04:	4684      	mov	ip, r0
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	d101      	bne.n	8001f0e <__gedf2+0x3e>
 8001f0a:	433a      	orrs	r2, r7
 8001f0c:	d023      	beq.n	8001f56 <__gedf2+0x86>
 8001f0e:	4662      	mov	r2, ip
 8001f10:	2a00      	cmp	r2, #0
 8001f12:	d01a      	beq.n	8001f4a <__gedf2+0x7a>
 8001f14:	459a      	cmp	sl, r3
 8001f16:	d029      	beq.n	8001f6c <__gedf2+0x9c>
 8001f18:	4651      	mov	r1, sl
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	3901      	subs	r1, #1
 8001f1e:	4008      	ands	r0, r1
 8001f20:	3801      	subs	r0, #1
 8001f22:	bc1c      	pop	{r2, r3, r4}
 8001f24:	4690      	mov	r8, r2
 8001f26:	4699      	mov	r9, r3
 8001f28:	46a2      	mov	sl, r4
 8001f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f2c:	0039      	movs	r1, r7
 8001f2e:	4311      	orrs	r1, r2
 8001f30:	d0e5      	beq.n	8001efe <__gedf2+0x2e>
 8001f32:	2002      	movs	r0, #2
 8001f34:	4240      	negs	r0, r0
 8001f36:	e7f4      	b.n	8001f22 <__gedf2+0x52>
 8001f38:	4330      	orrs	r0, r6
 8001f3a:	d1fa      	bne.n	8001f32 <__gedf2+0x62>
 8001f3c:	42ac      	cmp	r4, r5
 8001f3e:	d00f      	beq.n	8001f60 <__gedf2+0x90>
 8001f40:	2c00      	cmp	r4, #0
 8001f42:	d10f      	bne.n	8001f64 <__gedf2+0x94>
 8001f44:	433a      	orrs	r2, r7
 8001f46:	d0e7      	beq.n	8001f18 <__gedf2+0x48>
 8001f48:	e00c      	b.n	8001f64 <__gedf2+0x94>
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	4393      	bics	r3, r2
 8001f50:	0018      	movs	r0, r3
 8001f52:	3001      	adds	r0, #1
 8001f54:	e7e5      	b.n	8001f22 <__gedf2+0x52>
 8001f56:	4663      	mov	r3, ip
 8001f58:	2000      	movs	r0, #0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0e1      	beq.n	8001f22 <__gedf2+0x52>
 8001f5e:	e7db      	b.n	8001f18 <__gedf2+0x48>
 8001f60:	433a      	orrs	r2, r7
 8001f62:	d1e6      	bne.n	8001f32 <__gedf2+0x62>
 8001f64:	459a      	cmp	sl, r3
 8001f66:	d1d7      	bne.n	8001f18 <__gedf2+0x48>
 8001f68:	42a5      	cmp	r5, r4
 8001f6a:	dcd5      	bgt.n	8001f18 <__gedf2+0x48>
 8001f6c:	42a5      	cmp	r5, r4
 8001f6e:	db05      	blt.n	8001f7c <__gedf2+0xac>
 8001f70:	42be      	cmp	r6, r7
 8001f72:	d8d1      	bhi.n	8001f18 <__gedf2+0x48>
 8001f74:	d008      	beq.n	8001f88 <__gedf2+0xb8>
 8001f76:	2000      	movs	r0, #0
 8001f78:	42be      	cmp	r6, r7
 8001f7a:	d2d2      	bcs.n	8001f22 <__gedf2+0x52>
 8001f7c:	4650      	mov	r0, sl
 8001f7e:	2301      	movs	r3, #1
 8001f80:	3801      	subs	r0, #1
 8001f82:	4398      	bics	r0, r3
 8001f84:	3001      	adds	r0, #1
 8001f86:	e7cc      	b.n	8001f22 <__gedf2+0x52>
 8001f88:	45c8      	cmp	r8, r9
 8001f8a:	d8c5      	bhi.n	8001f18 <__gedf2+0x48>
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	45c8      	cmp	r8, r9
 8001f90:	d3f4      	bcc.n	8001f7c <__gedf2+0xac>
 8001f92:	e7c6      	b.n	8001f22 <__gedf2+0x52>
 8001f94:	000007ff 	.word	0x000007ff

08001f98 <__ledf2>:
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	464f      	mov	r7, r9
 8001f9c:	4646      	mov	r6, r8
 8001f9e:	46d6      	mov	lr, sl
 8001fa0:	004d      	lsls	r5, r1, #1
 8001fa2:	b5c0      	push	{r6, r7, lr}
 8001fa4:	030e      	lsls	r6, r1, #12
 8001fa6:	0fc9      	lsrs	r1, r1, #31
 8001fa8:	468a      	mov	sl, r1
 8001faa:	492e      	ldr	r1, [pc, #184]	; (8002064 <__ledf2+0xcc>)
 8001fac:	031f      	lsls	r7, r3, #12
 8001fae:	005c      	lsls	r4, r3, #1
 8001fb0:	4680      	mov	r8, r0
 8001fb2:	0b36      	lsrs	r6, r6, #12
 8001fb4:	0d6d      	lsrs	r5, r5, #21
 8001fb6:	4691      	mov	r9, r2
 8001fb8:	0b3f      	lsrs	r7, r7, #12
 8001fba:	0d64      	lsrs	r4, r4, #21
 8001fbc:	0fdb      	lsrs	r3, r3, #31
 8001fbe:	428d      	cmp	r5, r1
 8001fc0:	d018      	beq.n	8001ff4 <__ledf2+0x5c>
 8001fc2:	428c      	cmp	r4, r1
 8001fc4:	d011      	beq.n	8001fea <__ledf2+0x52>
 8001fc6:	2d00      	cmp	r5, #0
 8001fc8:	d118      	bne.n	8001ffc <__ledf2+0x64>
 8001fca:	4330      	orrs	r0, r6
 8001fcc:	4684      	mov	ip, r0
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	d11e      	bne.n	8002010 <__ledf2+0x78>
 8001fd2:	433a      	orrs	r2, r7
 8001fd4:	d11c      	bne.n	8002010 <__ledf2+0x78>
 8001fd6:	4663      	mov	r3, ip
 8001fd8:	2000      	movs	r0, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d030      	beq.n	8002040 <__ledf2+0xa8>
 8001fde:	4651      	mov	r1, sl
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	3901      	subs	r1, #1
 8001fe4:	4008      	ands	r0, r1
 8001fe6:	3801      	subs	r0, #1
 8001fe8:	e02a      	b.n	8002040 <__ledf2+0xa8>
 8001fea:	0039      	movs	r1, r7
 8001fec:	4311      	orrs	r1, r2
 8001fee:	d0ea      	beq.n	8001fc6 <__ledf2+0x2e>
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	e025      	b.n	8002040 <__ledf2+0xa8>
 8001ff4:	4330      	orrs	r0, r6
 8001ff6:	d1fb      	bne.n	8001ff0 <__ledf2+0x58>
 8001ff8:	42ac      	cmp	r4, r5
 8001ffa:	d026      	beq.n	800204a <__ledf2+0xb2>
 8001ffc:	2c00      	cmp	r4, #0
 8001ffe:	d126      	bne.n	800204e <__ledf2+0xb6>
 8002000:	433a      	orrs	r2, r7
 8002002:	d124      	bne.n	800204e <__ledf2+0xb6>
 8002004:	4651      	mov	r1, sl
 8002006:	2002      	movs	r0, #2
 8002008:	3901      	subs	r1, #1
 800200a:	4008      	ands	r0, r1
 800200c:	3801      	subs	r0, #1
 800200e:	e017      	b.n	8002040 <__ledf2+0xa8>
 8002010:	4662      	mov	r2, ip
 8002012:	2a00      	cmp	r2, #0
 8002014:	d00f      	beq.n	8002036 <__ledf2+0x9e>
 8002016:	459a      	cmp	sl, r3
 8002018:	d1e1      	bne.n	8001fde <__ledf2+0x46>
 800201a:	42a5      	cmp	r5, r4
 800201c:	db05      	blt.n	800202a <__ledf2+0x92>
 800201e:	42be      	cmp	r6, r7
 8002020:	d8dd      	bhi.n	8001fde <__ledf2+0x46>
 8002022:	d019      	beq.n	8002058 <__ledf2+0xc0>
 8002024:	2000      	movs	r0, #0
 8002026:	42be      	cmp	r6, r7
 8002028:	d20a      	bcs.n	8002040 <__ledf2+0xa8>
 800202a:	4650      	mov	r0, sl
 800202c:	2301      	movs	r3, #1
 800202e:	3801      	subs	r0, #1
 8002030:	4398      	bics	r0, r3
 8002032:	3001      	adds	r0, #1
 8002034:	e004      	b.n	8002040 <__ledf2+0xa8>
 8002036:	2201      	movs	r2, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	4393      	bics	r3, r2
 800203c:	0018      	movs	r0, r3
 800203e:	3001      	adds	r0, #1
 8002040:	bc1c      	pop	{r2, r3, r4}
 8002042:	4690      	mov	r8, r2
 8002044:	4699      	mov	r9, r3
 8002046:	46a2      	mov	sl, r4
 8002048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204a:	433a      	orrs	r2, r7
 800204c:	d1d0      	bne.n	8001ff0 <__ledf2+0x58>
 800204e:	459a      	cmp	sl, r3
 8002050:	d1c5      	bne.n	8001fde <__ledf2+0x46>
 8002052:	42a5      	cmp	r5, r4
 8002054:	dcc3      	bgt.n	8001fde <__ledf2+0x46>
 8002056:	e7e0      	b.n	800201a <__ledf2+0x82>
 8002058:	45c8      	cmp	r8, r9
 800205a:	d8c0      	bhi.n	8001fde <__ledf2+0x46>
 800205c:	2000      	movs	r0, #0
 800205e:	45c8      	cmp	r8, r9
 8002060:	d3e3      	bcc.n	800202a <__ledf2+0x92>
 8002062:	e7ed      	b.n	8002040 <__ledf2+0xa8>
 8002064:	000007ff 	.word	0x000007ff

08002068 <__aeabi_dmul>:
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206a:	4657      	mov	r7, sl
 800206c:	46de      	mov	lr, fp
 800206e:	464e      	mov	r6, r9
 8002070:	4645      	mov	r5, r8
 8002072:	b5e0      	push	{r5, r6, r7, lr}
 8002074:	4683      	mov	fp, r0
 8002076:	0006      	movs	r6, r0
 8002078:	030f      	lsls	r7, r1, #12
 800207a:	0048      	lsls	r0, r1, #1
 800207c:	b087      	sub	sp, #28
 800207e:	4692      	mov	sl, r2
 8002080:	001d      	movs	r5, r3
 8002082:	0b3f      	lsrs	r7, r7, #12
 8002084:	0d40      	lsrs	r0, r0, #21
 8002086:	0fcc      	lsrs	r4, r1, #31
 8002088:	2800      	cmp	r0, #0
 800208a:	d100      	bne.n	800208e <__aeabi_dmul+0x26>
 800208c:	e06f      	b.n	800216e <__aeabi_dmul+0x106>
 800208e:	4bde      	ldr	r3, [pc, #888]	; (8002408 <__aeabi_dmul+0x3a0>)
 8002090:	4298      	cmp	r0, r3
 8002092:	d038      	beq.n	8002106 <__aeabi_dmul+0x9e>
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	00ff      	lsls	r7, r7, #3
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	431f      	orrs	r7, r3
 800209c:	0f73      	lsrs	r3, r6, #29
 800209e:	433b      	orrs	r3, r7
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	4bda      	ldr	r3, [pc, #872]	; (800240c <__aeabi_dmul+0x3a4>)
 80020a4:	2700      	movs	r7, #0
 80020a6:	4699      	mov	r9, r3
 80020a8:	2300      	movs	r3, #0
 80020aa:	469b      	mov	fp, r3
 80020ac:	00f6      	lsls	r6, r6, #3
 80020ae:	4481      	add	r9, r0
 80020b0:	032b      	lsls	r3, r5, #12
 80020b2:	0069      	lsls	r1, r5, #1
 80020b4:	0b1b      	lsrs	r3, r3, #12
 80020b6:	4652      	mov	r2, sl
 80020b8:	4698      	mov	r8, r3
 80020ba:	0d49      	lsrs	r1, r1, #21
 80020bc:	0fed      	lsrs	r5, r5, #31
 80020be:	2900      	cmp	r1, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dmul+0x5c>
 80020c2:	e085      	b.n	80021d0 <__aeabi_dmul+0x168>
 80020c4:	4bd0      	ldr	r3, [pc, #832]	; (8002408 <__aeabi_dmul+0x3a0>)
 80020c6:	4299      	cmp	r1, r3
 80020c8:	d100      	bne.n	80020cc <__aeabi_dmul+0x64>
 80020ca:	e073      	b.n	80021b4 <__aeabi_dmul+0x14c>
 80020cc:	4643      	mov	r3, r8
 80020ce:	00da      	lsls	r2, r3, #3
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	4313      	orrs	r3, r2
 80020d6:	4652      	mov	r2, sl
 80020d8:	48cc      	ldr	r0, [pc, #816]	; (800240c <__aeabi_dmul+0x3a4>)
 80020da:	0f52      	lsrs	r2, r2, #29
 80020dc:	4684      	mov	ip, r0
 80020de:	4313      	orrs	r3, r2
 80020e0:	4652      	mov	r2, sl
 80020e2:	2000      	movs	r0, #0
 80020e4:	4461      	add	r1, ip
 80020e6:	00d2      	lsls	r2, r2, #3
 80020e8:	4489      	add	r9, r1
 80020ea:	0021      	movs	r1, r4
 80020ec:	4069      	eors	r1, r5
 80020ee:	9100      	str	r1, [sp, #0]
 80020f0:	468c      	mov	ip, r1
 80020f2:	2101      	movs	r1, #1
 80020f4:	4449      	add	r1, r9
 80020f6:	468a      	mov	sl, r1
 80020f8:	2f0f      	cmp	r7, #15
 80020fa:	d900      	bls.n	80020fe <__aeabi_dmul+0x96>
 80020fc:	e090      	b.n	8002220 <__aeabi_dmul+0x1b8>
 80020fe:	49c4      	ldr	r1, [pc, #784]	; (8002410 <__aeabi_dmul+0x3a8>)
 8002100:	00bf      	lsls	r7, r7, #2
 8002102:	59cf      	ldr	r7, [r1, r7]
 8002104:	46bf      	mov	pc, r7
 8002106:	465b      	mov	r3, fp
 8002108:	433b      	orrs	r3, r7
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	d000      	beq.n	8002110 <__aeabi_dmul+0xa8>
 800210e:	e16a      	b.n	80023e6 <__aeabi_dmul+0x37e>
 8002110:	2302      	movs	r3, #2
 8002112:	2708      	movs	r7, #8
 8002114:	2600      	movs	r6, #0
 8002116:	4681      	mov	r9, r0
 8002118:	469b      	mov	fp, r3
 800211a:	e7c9      	b.n	80020b0 <__aeabi_dmul+0x48>
 800211c:	0032      	movs	r2, r6
 800211e:	4658      	mov	r0, fp
 8002120:	9b01      	ldr	r3, [sp, #4]
 8002122:	4661      	mov	r1, ip
 8002124:	9100      	str	r1, [sp, #0]
 8002126:	2802      	cmp	r0, #2
 8002128:	d100      	bne.n	800212c <__aeabi_dmul+0xc4>
 800212a:	e075      	b.n	8002218 <__aeabi_dmul+0x1b0>
 800212c:	2803      	cmp	r0, #3
 800212e:	d100      	bne.n	8002132 <__aeabi_dmul+0xca>
 8002130:	e1fe      	b.n	8002530 <__aeabi_dmul+0x4c8>
 8002132:	2801      	cmp	r0, #1
 8002134:	d000      	beq.n	8002138 <__aeabi_dmul+0xd0>
 8002136:	e12c      	b.n	8002392 <__aeabi_dmul+0x32a>
 8002138:	2300      	movs	r3, #0
 800213a:	2700      	movs	r7, #0
 800213c:	2600      	movs	r6, #0
 800213e:	2500      	movs	r5, #0
 8002140:	033f      	lsls	r7, r7, #12
 8002142:	0d2a      	lsrs	r2, r5, #20
 8002144:	0b3f      	lsrs	r7, r7, #12
 8002146:	48b3      	ldr	r0, [pc, #716]	; (8002414 <__aeabi_dmul+0x3ac>)
 8002148:	0512      	lsls	r2, r2, #20
 800214a:	433a      	orrs	r2, r7
 800214c:	4002      	ands	r2, r0
 800214e:	051b      	lsls	r3, r3, #20
 8002150:	4313      	orrs	r3, r2
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	07d1      	lsls	r1, r2, #31
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	430b      	orrs	r3, r1
 800215c:	0030      	movs	r0, r6
 800215e:	0019      	movs	r1, r3
 8002160:	b007      	add	sp, #28
 8002162:	bc3c      	pop	{r2, r3, r4, r5}
 8002164:	4690      	mov	r8, r2
 8002166:	4699      	mov	r9, r3
 8002168:	46a2      	mov	sl, r4
 800216a:	46ab      	mov	fp, r5
 800216c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800216e:	465b      	mov	r3, fp
 8002170:	433b      	orrs	r3, r7
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	d100      	bne.n	8002178 <__aeabi_dmul+0x110>
 8002176:	e12f      	b.n	80023d8 <__aeabi_dmul+0x370>
 8002178:	2f00      	cmp	r7, #0
 800217a:	d100      	bne.n	800217e <__aeabi_dmul+0x116>
 800217c:	e1a5      	b.n	80024ca <__aeabi_dmul+0x462>
 800217e:	0038      	movs	r0, r7
 8002180:	f000 fec0 	bl	8002f04 <__clzsi2>
 8002184:	0003      	movs	r3, r0
 8002186:	3b0b      	subs	r3, #11
 8002188:	2b1c      	cmp	r3, #28
 800218a:	dd00      	ble.n	800218e <__aeabi_dmul+0x126>
 800218c:	e196      	b.n	80024bc <__aeabi_dmul+0x454>
 800218e:	221d      	movs	r2, #29
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	465a      	mov	r2, fp
 8002194:	0001      	movs	r1, r0
 8002196:	40da      	lsrs	r2, r3
 8002198:	465e      	mov	r6, fp
 800219a:	3908      	subs	r1, #8
 800219c:	408f      	lsls	r7, r1
 800219e:	0013      	movs	r3, r2
 80021a0:	408e      	lsls	r6, r1
 80021a2:	433b      	orrs	r3, r7
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	4b9c      	ldr	r3, [pc, #624]	; (8002418 <__aeabi_dmul+0x3b0>)
 80021a8:	2700      	movs	r7, #0
 80021aa:	1a1b      	subs	r3, r3, r0
 80021ac:	4699      	mov	r9, r3
 80021ae:	2300      	movs	r3, #0
 80021b0:	469b      	mov	fp, r3
 80021b2:	e77d      	b.n	80020b0 <__aeabi_dmul+0x48>
 80021b4:	4641      	mov	r1, r8
 80021b6:	4653      	mov	r3, sl
 80021b8:	430b      	orrs	r3, r1
 80021ba:	4993      	ldr	r1, [pc, #588]	; (8002408 <__aeabi_dmul+0x3a0>)
 80021bc:	468c      	mov	ip, r1
 80021be:	44e1      	add	r9, ip
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d000      	beq.n	80021c6 <__aeabi_dmul+0x15e>
 80021c4:	e11a      	b.n	80023fc <__aeabi_dmul+0x394>
 80021c6:	2202      	movs	r2, #2
 80021c8:	2002      	movs	r0, #2
 80021ca:	4317      	orrs	r7, r2
 80021cc:	2200      	movs	r2, #0
 80021ce:	e78c      	b.n	80020ea <__aeabi_dmul+0x82>
 80021d0:	4313      	orrs	r3, r2
 80021d2:	d100      	bne.n	80021d6 <__aeabi_dmul+0x16e>
 80021d4:	e10d      	b.n	80023f2 <__aeabi_dmul+0x38a>
 80021d6:	4643      	mov	r3, r8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d100      	bne.n	80021de <__aeabi_dmul+0x176>
 80021dc:	e181      	b.n	80024e2 <__aeabi_dmul+0x47a>
 80021de:	4640      	mov	r0, r8
 80021e0:	f000 fe90 	bl	8002f04 <__clzsi2>
 80021e4:	0002      	movs	r2, r0
 80021e6:	3a0b      	subs	r2, #11
 80021e8:	2a1c      	cmp	r2, #28
 80021ea:	dd00      	ble.n	80021ee <__aeabi_dmul+0x186>
 80021ec:	e172      	b.n	80024d4 <__aeabi_dmul+0x46c>
 80021ee:	0001      	movs	r1, r0
 80021f0:	4643      	mov	r3, r8
 80021f2:	3908      	subs	r1, #8
 80021f4:	408b      	lsls	r3, r1
 80021f6:	4698      	mov	r8, r3
 80021f8:	231d      	movs	r3, #29
 80021fa:	1a9a      	subs	r2, r3, r2
 80021fc:	4653      	mov	r3, sl
 80021fe:	40d3      	lsrs	r3, r2
 8002200:	001a      	movs	r2, r3
 8002202:	4643      	mov	r3, r8
 8002204:	4313      	orrs	r3, r2
 8002206:	4652      	mov	r2, sl
 8002208:	408a      	lsls	r2, r1
 800220a:	4649      	mov	r1, r9
 800220c:	1a08      	subs	r0, r1, r0
 800220e:	4982      	ldr	r1, [pc, #520]	; (8002418 <__aeabi_dmul+0x3b0>)
 8002210:	4689      	mov	r9, r1
 8002212:	4481      	add	r9, r0
 8002214:	2000      	movs	r0, #0
 8002216:	e768      	b.n	80020ea <__aeabi_dmul+0x82>
 8002218:	4b7b      	ldr	r3, [pc, #492]	; (8002408 <__aeabi_dmul+0x3a0>)
 800221a:	2700      	movs	r7, #0
 800221c:	2600      	movs	r6, #0
 800221e:	e78e      	b.n	800213e <__aeabi_dmul+0xd6>
 8002220:	0c14      	lsrs	r4, r2, #16
 8002222:	0412      	lsls	r2, r2, #16
 8002224:	0c12      	lsrs	r2, r2, #16
 8002226:	0011      	movs	r1, r2
 8002228:	0c37      	lsrs	r7, r6, #16
 800222a:	0436      	lsls	r6, r6, #16
 800222c:	0c35      	lsrs	r5, r6, #16
 800222e:	4379      	muls	r1, r7
 8002230:	0028      	movs	r0, r5
 8002232:	468c      	mov	ip, r1
 8002234:	002e      	movs	r6, r5
 8002236:	4360      	muls	r0, r4
 8002238:	4460      	add	r0, ip
 800223a:	4683      	mov	fp, r0
 800223c:	4356      	muls	r6, r2
 800223e:	0021      	movs	r1, r4
 8002240:	0c30      	lsrs	r0, r6, #16
 8002242:	4680      	mov	r8, r0
 8002244:	4658      	mov	r0, fp
 8002246:	4379      	muls	r1, r7
 8002248:	4440      	add	r0, r8
 800224a:	9102      	str	r1, [sp, #8]
 800224c:	4584      	cmp	ip, r0
 800224e:	d906      	bls.n	800225e <__aeabi_dmul+0x1f6>
 8002250:	4688      	mov	r8, r1
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0249      	lsls	r1, r1, #9
 8002256:	468c      	mov	ip, r1
 8002258:	44e0      	add	r8, ip
 800225a:	4641      	mov	r1, r8
 800225c:	9102      	str	r1, [sp, #8]
 800225e:	0436      	lsls	r6, r6, #16
 8002260:	0c01      	lsrs	r1, r0, #16
 8002262:	0c36      	lsrs	r6, r6, #16
 8002264:	0400      	lsls	r0, r0, #16
 8002266:	468b      	mov	fp, r1
 8002268:	1981      	adds	r1, r0, r6
 800226a:	0c1e      	lsrs	r6, r3, #16
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	0c1b      	lsrs	r3, r3, #16
 8002270:	9103      	str	r1, [sp, #12]
 8002272:	0019      	movs	r1, r3
 8002274:	4379      	muls	r1, r7
 8002276:	468c      	mov	ip, r1
 8002278:	0028      	movs	r0, r5
 800227a:	4375      	muls	r5, r6
 800227c:	4465      	add	r5, ip
 800227e:	46a8      	mov	r8, r5
 8002280:	4358      	muls	r0, r3
 8002282:	0c05      	lsrs	r5, r0, #16
 8002284:	4445      	add	r5, r8
 8002286:	4377      	muls	r7, r6
 8002288:	42a9      	cmp	r1, r5
 800228a:	d903      	bls.n	8002294 <__aeabi_dmul+0x22c>
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0249      	lsls	r1, r1, #9
 8002290:	468c      	mov	ip, r1
 8002292:	4467      	add	r7, ip
 8002294:	0c29      	lsrs	r1, r5, #16
 8002296:	468c      	mov	ip, r1
 8002298:	0039      	movs	r1, r7
 800229a:	0400      	lsls	r0, r0, #16
 800229c:	0c00      	lsrs	r0, r0, #16
 800229e:	042d      	lsls	r5, r5, #16
 80022a0:	182d      	adds	r5, r5, r0
 80022a2:	4461      	add	r1, ip
 80022a4:	44ab      	add	fp, r5
 80022a6:	9105      	str	r1, [sp, #20]
 80022a8:	4659      	mov	r1, fp
 80022aa:	9104      	str	r1, [sp, #16]
 80022ac:	9901      	ldr	r1, [sp, #4]
 80022ae:	040f      	lsls	r7, r1, #16
 80022b0:	0c3f      	lsrs	r7, r7, #16
 80022b2:	0c08      	lsrs	r0, r1, #16
 80022b4:	0039      	movs	r1, r7
 80022b6:	4351      	muls	r1, r2
 80022b8:	4342      	muls	r2, r0
 80022ba:	4690      	mov	r8, r2
 80022bc:	0002      	movs	r2, r0
 80022be:	468c      	mov	ip, r1
 80022c0:	0c09      	lsrs	r1, r1, #16
 80022c2:	468b      	mov	fp, r1
 80022c4:	4362      	muls	r2, r4
 80022c6:	437c      	muls	r4, r7
 80022c8:	4444      	add	r4, r8
 80022ca:	445c      	add	r4, fp
 80022cc:	45a0      	cmp	r8, r4
 80022ce:	d903      	bls.n	80022d8 <__aeabi_dmul+0x270>
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	0249      	lsls	r1, r1, #9
 80022d4:	4688      	mov	r8, r1
 80022d6:	4442      	add	r2, r8
 80022d8:	0c21      	lsrs	r1, r4, #16
 80022da:	4688      	mov	r8, r1
 80022dc:	4661      	mov	r1, ip
 80022de:	0409      	lsls	r1, r1, #16
 80022e0:	0c09      	lsrs	r1, r1, #16
 80022e2:	468c      	mov	ip, r1
 80022e4:	0039      	movs	r1, r7
 80022e6:	4359      	muls	r1, r3
 80022e8:	4343      	muls	r3, r0
 80022ea:	4370      	muls	r0, r6
 80022ec:	437e      	muls	r6, r7
 80022ee:	0c0f      	lsrs	r7, r1, #16
 80022f0:	18f6      	adds	r6, r6, r3
 80022f2:	0424      	lsls	r4, r4, #16
 80022f4:	19be      	adds	r6, r7, r6
 80022f6:	4464      	add	r4, ip
 80022f8:	4442      	add	r2, r8
 80022fa:	468c      	mov	ip, r1
 80022fc:	42b3      	cmp	r3, r6
 80022fe:	d903      	bls.n	8002308 <__aeabi_dmul+0x2a0>
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	025b      	lsls	r3, r3, #9
 8002304:	4698      	mov	r8, r3
 8002306:	4440      	add	r0, r8
 8002308:	9b02      	ldr	r3, [sp, #8]
 800230a:	4661      	mov	r1, ip
 800230c:	4698      	mov	r8, r3
 800230e:	9b04      	ldr	r3, [sp, #16]
 8002310:	0437      	lsls	r7, r6, #16
 8002312:	4443      	add	r3, r8
 8002314:	469b      	mov	fp, r3
 8002316:	45ab      	cmp	fp, r5
 8002318:	41ad      	sbcs	r5, r5
 800231a:	426b      	negs	r3, r5
 800231c:	040d      	lsls	r5, r1, #16
 800231e:	9905      	ldr	r1, [sp, #20]
 8002320:	0c2d      	lsrs	r5, r5, #16
 8002322:	468c      	mov	ip, r1
 8002324:	197f      	adds	r7, r7, r5
 8002326:	4467      	add	r7, ip
 8002328:	18fd      	adds	r5, r7, r3
 800232a:	46a8      	mov	r8, r5
 800232c:	465d      	mov	r5, fp
 800232e:	192d      	adds	r5, r5, r4
 8002330:	42a5      	cmp	r5, r4
 8002332:	41a4      	sbcs	r4, r4
 8002334:	4693      	mov	fp, r2
 8002336:	4264      	negs	r4, r4
 8002338:	46a4      	mov	ip, r4
 800233a:	44c3      	add	fp, r8
 800233c:	44dc      	add	ip, fp
 800233e:	428f      	cmp	r7, r1
 8002340:	41bf      	sbcs	r7, r7
 8002342:	4598      	cmp	r8, r3
 8002344:	419b      	sbcs	r3, r3
 8002346:	4593      	cmp	fp, r2
 8002348:	4192      	sbcs	r2, r2
 800234a:	45a4      	cmp	ip, r4
 800234c:	41a4      	sbcs	r4, r4
 800234e:	425b      	negs	r3, r3
 8002350:	427f      	negs	r7, r7
 8002352:	431f      	orrs	r7, r3
 8002354:	0c36      	lsrs	r6, r6, #16
 8002356:	4252      	negs	r2, r2
 8002358:	4264      	negs	r4, r4
 800235a:	19bf      	adds	r7, r7, r6
 800235c:	4322      	orrs	r2, r4
 800235e:	18bf      	adds	r7, r7, r2
 8002360:	4662      	mov	r2, ip
 8002362:	1838      	adds	r0, r7, r0
 8002364:	0243      	lsls	r3, r0, #9
 8002366:	0dd2      	lsrs	r2, r2, #23
 8002368:	9903      	ldr	r1, [sp, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	026a      	lsls	r2, r5, #9
 800236e:	430a      	orrs	r2, r1
 8002370:	1e50      	subs	r0, r2, #1
 8002372:	4182      	sbcs	r2, r0
 8002374:	4661      	mov	r1, ip
 8002376:	0ded      	lsrs	r5, r5, #23
 8002378:	432a      	orrs	r2, r5
 800237a:	024e      	lsls	r6, r1, #9
 800237c:	4332      	orrs	r2, r6
 800237e:	01d9      	lsls	r1, r3, #7
 8002380:	d400      	bmi.n	8002384 <__aeabi_dmul+0x31c>
 8002382:	e0b3      	b.n	80024ec <__aeabi_dmul+0x484>
 8002384:	2601      	movs	r6, #1
 8002386:	0850      	lsrs	r0, r2, #1
 8002388:	4032      	ands	r2, r6
 800238a:	4302      	orrs	r2, r0
 800238c:	07de      	lsls	r6, r3, #31
 800238e:	4332      	orrs	r2, r6
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	4c22      	ldr	r4, [pc, #136]	; (800241c <__aeabi_dmul+0x3b4>)
 8002394:	4454      	add	r4, sl
 8002396:	2c00      	cmp	r4, #0
 8002398:	dd62      	ble.n	8002460 <__aeabi_dmul+0x3f8>
 800239a:	0751      	lsls	r1, r2, #29
 800239c:	d009      	beq.n	80023b2 <__aeabi_dmul+0x34a>
 800239e:	200f      	movs	r0, #15
 80023a0:	4010      	ands	r0, r2
 80023a2:	2804      	cmp	r0, #4
 80023a4:	d005      	beq.n	80023b2 <__aeabi_dmul+0x34a>
 80023a6:	1d10      	adds	r0, r2, #4
 80023a8:	4290      	cmp	r0, r2
 80023aa:	4192      	sbcs	r2, r2
 80023ac:	4252      	negs	r2, r2
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	0002      	movs	r2, r0
 80023b2:	01d9      	lsls	r1, r3, #7
 80023b4:	d504      	bpl.n	80023c0 <__aeabi_dmul+0x358>
 80023b6:	2480      	movs	r4, #128	; 0x80
 80023b8:	4819      	ldr	r0, [pc, #100]	; (8002420 <__aeabi_dmul+0x3b8>)
 80023ba:	00e4      	lsls	r4, r4, #3
 80023bc:	4003      	ands	r3, r0
 80023be:	4454      	add	r4, sl
 80023c0:	4818      	ldr	r0, [pc, #96]	; (8002424 <__aeabi_dmul+0x3bc>)
 80023c2:	4284      	cmp	r4, r0
 80023c4:	dd00      	ble.n	80023c8 <__aeabi_dmul+0x360>
 80023c6:	e727      	b.n	8002218 <__aeabi_dmul+0x1b0>
 80023c8:	075e      	lsls	r6, r3, #29
 80023ca:	025b      	lsls	r3, r3, #9
 80023cc:	08d2      	lsrs	r2, r2, #3
 80023ce:	0b1f      	lsrs	r7, r3, #12
 80023d0:	0563      	lsls	r3, r4, #21
 80023d2:	4316      	orrs	r6, r2
 80023d4:	0d5b      	lsrs	r3, r3, #21
 80023d6:	e6b2      	b.n	800213e <__aeabi_dmul+0xd6>
 80023d8:	2300      	movs	r3, #0
 80023da:	4699      	mov	r9, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	2704      	movs	r7, #4
 80023e0:	2600      	movs	r6, #0
 80023e2:	469b      	mov	fp, r3
 80023e4:	e664      	b.n	80020b0 <__aeabi_dmul+0x48>
 80023e6:	2303      	movs	r3, #3
 80023e8:	9701      	str	r7, [sp, #4]
 80023ea:	4681      	mov	r9, r0
 80023ec:	270c      	movs	r7, #12
 80023ee:	469b      	mov	fp, r3
 80023f0:	e65e      	b.n	80020b0 <__aeabi_dmul+0x48>
 80023f2:	2201      	movs	r2, #1
 80023f4:	2001      	movs	r0, #1
 80023f6:	4317      	orrs	r7, r2
 80023f8:	2200      	movs	r2, #0
 80023fa:	e676      	b.n	80020ea <__aeabi_dmul+0x82>
 80023fc:	2303      	movs	r3, #3
 80023fe:	2003      	movs	r0, #3
 8002400:	431f      	orrs	r7, r3
 8002402:	4643      	mov	r3, r8
 8002404:	e671      	b.n	80020ea <__aeabi_dmul+0x82>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	000007ff 	.word	0x000007ff
 800240c:	fffffc01 	.word	0xfffffc01
 8002410:	08018c44 	.word	0x08018c44
 8002414:	800fffff 	.word	0x800fffff
 8002418:	fffffc0d 	.word	0xfffffc0d
 800241c:	000003ff 	.word	0x000003ff
 8002420:	feffffff 	.word	0xfeffffff
 8002424:	000007fe 	.word	0x000007fe
 8002428:	2300      	movs	r3, #0
 800242a:	2780      	movs	r7, #128	; 0x80
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	033f      	lsls	r7, r7, #12
 8002430:	2600      	movs	r6, #0
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <__aeabi_dmul+0x4d8>)
 8002434:	e683      	b.n	800213e <__aeabi_dmul+0xd6>
 8002436:	9b01      	ldr	r3, [sp, #4]
 8002438:	0032      	movs	r2, r6
 800243a:	46a4      	mov	ip, r4
 800243c:	4658      	mov	r0, fp
 800243e:	e670      	b.n	8002122 <__aeabi_dmul+0xba>
 8002440:	46ac      	mov	ip, r5
 8002442:	e66e      	b.n	8002122 <__aeabi_dmul+0xba>
 8002444:	2780      	movs	r7, #128	; 0x80
 8002446:	9901      	ldr	r1, [sp, #4]
 8002448:	033f      	lsls	r7, r7, #12
 800244a:	4239      	tst	r1, r7
 800244c:	d02d      	beq.n	80024aa <__aeabi_dmul+0x442>
 800244e:	423b      	tst	r3, r7
 8002450:	d12b      	bne.n	80024aa <__aeabi_dmul+0x442>
 8002452:	431f      	orrs	r7, r3
 8002454:	033f      	lsls	r7, r7, #12
 8002456:	0b3f      	lsrs	r7, r7, #12
 8002458:	9500      	str	r5, [sp, #0]
 800245a:	0016      	movs	r6, r2
 800245c:	4b38      	ldr	r3, [pc, #224]	; (8002540 <__aeabi_dmul+0x4d8>)
 800245e:	e66e      	b.n	800213e <__aeabi_dmul+0xd6>
 8002460:	2501      	movs	r5, #1
 8002462:	1b2d      	subs	r5, r5, r4
 8002464:	2d38      	cmp	r5, #56	; 0x38
 8002466:	dd00      	ble.n	800246a <__aeabi_dmul+0x402>
 8002468:	e666      	b.n	8002138 <__aeabi_dmul+0xd0>
 800246a:	2d1f      	cmp	r5, #31
 800246c:	dc40      	bgt.n	80024f0 <__aeabi_dmul+0x488>
 800246e:	4835      	ldr	r0, [pc, #212]	; (8002544 <__aeabi_dmul+0x4dc>)
 8002470:	001c      	movs	r4, r3
 8002472:	4450      	add	r0, sl
 8002474:	0016      	movs	r6, r2
 8002476:	4082      	lsls	r2, r0
 8002478:	4084      	lsls	r4, r0
 800247a:	40ee      	lsrs	r6, r5
 800247c:	1e50      	subs	r0, r2, #1
 800247e:	4182      	sbcs	r2, r0
 8002480:	4334      	orrs	r4, r6
 8002482:	4314      	orrs	r4, r2
 8002484:	40eb      	lsrs	r3, r5
 8002486:	0762      	lsls	r2, r4, #29
 8002488:	d009      	beq.n	800249e <__aeabi_dmul+0x436>
 800248a:	220f      	movs	r2, #15
 800248c:	4022      	ands	r2, r4
 800248e:	2a04      	cmp	r2, #4
 8002490:	d005      	beq.n	800249e <__aeabi_dmul+0x436>
 8002492:	0022      	movs	r2, r4
 8002494:	1d14      	adds	r4, r2, #4
 8002496:	4294      	cmp	r4, r2
 8002498:	4180      	sbcs	r0, r0
 800249a:	4240      	negs	r0, r0
 800249c:	181b      	adds	r3, r3, r0
 800249e:	021a      	lsls	r2, r3, #8
 80024a0:	d53e      	bpl.n	8002520 <__aeabi_dmul+0x4b8>
 80024a2:	2301      	movs	r3, #1
 80024a4:	2700      	movs	r7, #0
 80024a6:	2600      	movs	r6, #0
 80024a8:	e649      	b.n	800213e <__aeabi_dmul+0xd6>
 80024aa:	2780      	movs	r7, #128	; 0x80
 80024ac:	9b01      	ldr	r3, [sp, #4]
 80024ae:	033f      	lsls	r7, r7, #12
 80024b0:	431f      	orrs	r7, r3
 80024b2:	033f      	lsls	r7, r7, #12
 80024b4:	0b3f      	lsrs	r7, r7, #12
 80024b6:	9400      	str	r4, [sp, #0]
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <__aeabi_dmul+0x4d8>)
 80024ba:	e640      	b.n	800213e <__aeabi_dmul+0xd6>
 80024bc:	0003      	movs	r3, r0
 80024be:	465a      	mov	r2, fp
 80024c0:	3b28      	subs	r3, #40	; 0x28
 80024c2:	409a      	lsls	r2, r3
 80024c4:	2600      	movs	r6, #0
 80024c6:	9201      	str	r2, [sp, #4]
 80024c8:	e66d      	b.n	80021a6 <__aeabi_dmul+0x13e>
 80024ca:	4658      	mov	r0, fp
 80024cc:	f000 fd1a 	bl	8002f04 <__clzsi2>
 80024d0:	3020      	adds	r0, #32
 80024d2:	e657      	b.n	8002184 <__aeabi_dmul+0x11c>
 80024d4:	0003      	movs	r3, r0
 80024d6:	4652      	mov	r2, sl
 80024d8:	3b28      	subs	r3, #40	; 0x28
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	2200      	movs	r2, #0
 80024e0:	e693      	b.n	800220a <__aeabi_dmul+0x1a2>
 80024e2:	4650      	mov	r0, sl
 80024e4:	f000 fd0e 	bl	8002f04 <__clzsi2>
 80024e8:	3020      	adds	r0, #32
 80024ea:	e67b      	b.n	80021e4 <__aeabi_dmul+0x17c>
 80024ec:	46ca      	mov	sl, r9
 80024ee:	e750      	b.n	8002392 <__aeabi_dmul+0x32a>
 80024f0:	201f      	movs	r0, #31
 80024f2:	001e      	movs	r6, r3
 80024f4:	4240      	negs	r0, r0
 80024f6:	1b04      	subs	r4, r0, r4
 80024f8:	40e6      	lsrs	r6, r4
 80024fa:	2d20      	cmp	r5, #32
 80024fc:	d003      	beq.n	8002506 <__aeabi_dmul+0x49e>
 80024fe:	4c12      	ldr	r4, [pc, #72]	; (8002548 <__aeabi_dmul+0x4e0>)
 8002500:	4454      	add	r4, sl
 8002502:	40a3      	lsls	r3, r4
 8002504:	431a      	orrs	r2, r3
 8002506:	1e50      	subs	r0, r2, #1
 8002508:	4182      	sbcs	r2, r0
 800250a:	4332      	orrs	r2, r6
 800250c:	2607      	movs	r6, #7
 800250e:	2700      	movs	r7, #0
 8002510:	4016      	ands	r6, r2
 8002512:	d009      	beq.n	8002528 <__aeabi_dmul+0x4c0>
 8002514:	200f      	movs	r0, #15
 8002516:	2300      	movs	r3, #0
 8002518:	4010      	ands	r0, r2
 800251a:	0014      	movs	r4, r2
 800251c:	2804      	cmp	r0, #4
 800251e:	d1b9      	bne.n	8002494 <__aeabi_dmul+0x42c>
 8002520:	0022      	movs	r2, r4
 8002522:	075e      	lsls	r6, r3, #29
 8002524:	025b      	lsls	r3, r3, #9
 8002526:	0b1f      	lsrs	r7, r3, #12
 8002528:	08d2      	lsrs	r2, r2, #3
 800252a:	4316      	orrs	r6, r2
 800252c:	2300      	movs	r3, #0
 800252e:	e606      	b.n	800213e <__aeabi_dmul+0xd6>
 8002530:	2780      	movs	r7, #128	; 0x80
 8002532:	033f      	lsls	r7, r7, #12
 8002534:	431f      	orrs	r7, r3
 8002536:	033f      	lsls	r7, r7, #12
 8002538:	0b3f      	lsrs	r7, r7, #12
 800253a:	0016      	movs	r6, r2
 800253c:	4b00      	ldr	r3, [pc, #0]	; (8002540 <__aeabi_dmul+0x4d8>)
 800253e:	e5fe      	b.n	800213e <__aeabi_dmul+0xd6>
 8002540:	000007ff 	.word	0x000007ff
 8002544:	0000041e 	.word	0x0000041e
 8002548:	0000043e 	.word	0x0000043e

0800254c <__aeabi_dsub>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	4657      	mov	r7, sl
 8002550:	464e      	mov	r6, r9
 8002552:	4645      	mov	r5, r8
 8002554:	46de      	mov	lr, fp
 8002556:	000c      	movs	r4, r1
 8002558:	0309      	lsls	r1, r1, #12
 800255a:	b5e0      	push	{r5, r6, r7, lr}
 800255c:	0a49      	lsrs	r1, r1, #9
 800255e:	0f46      	lsrs	r6, r0, #29
 8002560:	005f      	lsls	r7, r3, #1
 8002562:	4331      	orrs	r1, r6
 8002564:	031e      	lsls	r6, r3, #12
 8002566:	0fdb      	lsrs	r3, r3, #31
 8002568:	0a76      	lsrs	r6, r6, #9
 800256a:	469b      	mov	fp, r3
 800256c:	0f53      	lsrs	r3, r2, #29
 800256e:	4333      	orrs	r3, r6
 8002570:	4ec8      	ldr	r6, [pc, #800]	; (8002894 <__aeabi_dsub+0x348>)
 8002572:	0065      	lsls	r5, r4, #1
 8002574:	00c0      	lsls	r0, r0, #3
 8002576:	0fe4      	lsrs	r4, r4, #31
 8002578:	00d2      	lsls	r2, r2, #3
 800257a:	0d6d      	lsrs	r5, r5, #21
 800257c:	46a2      	mov	sl, r4
 800257e:	4681      	mov	r9, r0
 8002580:	0d7f      	lsrs	r7, r7, #21
 8002582:	469c      	mov	ip, r3
 8002584:	4690      	mov	r8, r2
 8002586:	42b7      	cmp	r7, r6
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x40>
 800258a:	e0b9      	b.n	8002700 <__aeabi_dsub+0x1b4>
 800258c:	465b      	mov	r3, fp
 800258e:	2601      	movs	r6, #1
 8002590:	4073      	eors	r3, r6
 8002592:	469b      	mov	fp, r3
 8002594:	1bee      	subs	r6, r5, r7
 8002596:	45a3      	cmp	fp, r4
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x50>
 800259a:	e083      	b.n	80026a4 <__aeabi_dsub+0x158>
 800259c:	2e00      	cmp	r6, #0
 800259e:	dd63      	ble.n	8002668 <__aeabi_dsub+0x11c>
 80025a0:	2f00      	cmp	r7, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x5a>
 80025a4:	e0b1      	b.n	800270a <__aeabi_dsub+0x1be>
 80025a6:	4663      	mov	r3, ip
 80025a8:	4313      	orrs	r3, r2
 80025aa:	d100      	bne.n	80025ae <__aeabi_dsub+0x62>
 80025ac:	e123      	b.n	80027f6 <__aeabi_dsub+0x2aa>
 80025ae:	1e73      	subs	r3, r6, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d000      	beq.n	80025b6 <__aeabi_dsub+0x6a>
 80025b4:	e1ba      	b.n	800292c <__aeabi_dsub+0x3e0>
 80025b6:	1a86      	subs	r6, r0, r2
 80025b8:	4663      	mov	r3, ip
 80025ba:	42b0      	cmp	r0, r6
 80025bc:	4180      	sbcs	r0, r0
 80025be:	2501      	movs	r5, #1
 80025c0:	1ac9      	subs	r1, r1, r3
 80025c2:	4240      	negs	r0, r0
 80025c4:	1a09      	subs	r1, r1, r0
 80025c6:	020b      	lsls	r3, r1, #8
 80025c8:	d400      	bmi.n	80025cc <__aeabi_dsub+0x80>
 80025ca:	e147      	b.n	800285c <__aeabi_dsub+0x310>
 80025cc:	0249      	lsls	r1, r1, #9
 80025ce:	0a4b      	lsrs	r3, r1, #9
 80025d0:	4698      	mov	r8, r3
 80025d2:	4643      	mov	r3, r8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x8e>
 80025d8:	e189      	b.n	80028ee <__aeabi_dsub+0x3a2>
 80025da:	4640      	mov	r0, r8
 80025dc:	f000 fc92 	bl	8002f04 <__clzsi2>
 80025e0:	0003      	movs	r3, r0
 80025e2:	3b08      	subs	r3, #8
 80025e4:	2b1f      	cmp	r3, #31
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x9e>
 80025e8:	e17c      	b.n	80028e4 <__aeabi_dsub+0x398>
 80025ea:	2220      	movs	r2, #32
 80025ec:	0030      	movs	r0, r6
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	4641      	mov	r1, r8
 80025f2:	40d0      	lsrs	r0, r2
 80025f4:	4099      	lsls	r1, r3
 80025f6:	0002      	movs	r2, r0
 80025f8:	409e      	lsls	r6, r3
 80025fa:	430a      	orrs	r2, r1
 80025fc:	429d      	cmp	r5, r3
 80025fe:	dd00      	ble.n	8002602 <__aeabi_dsub+0xb6>
 8002600:	e16a      	b.n	80028d8 <__aeabi_dsub+0x38c>
 8002602:	1b5d      	subs	r5, r3, r5
 8002604:	1c6b      	adds	r3, r5, #1
 8002606:	2b1f      	cmp	r3, #31
 8002608:	dd00      	ble.n	800260c <__aeabi_dsub+0xc0>
 800260a:	e194      	b.n	8002936 <__aeabi_dsub+0x3ea>
 800260c:	2120      	movs	r1, #32
 800260e:	0010      	movs	r0, r2
 8002610:	0035      	movs	r5, r6
 8002612:	1ac9      	subs	r1, r1, r3
 8002614:	408e      	lsls	r6, r1
 8002616:	40da      	lsrs	r2, r3
 8002618:	4088      	lsls	r0, r1
 800261a:	40dd      	lsrs	r5, r3
 800261c:	1e71      	subs	r1, r6, #1
 800261e:	418e      	sbcs	r6, r1
 8002620:	0011      	movs	r1, r2
 8002622:	2207      	movs	r2, #7
 8002624:	4328      	orrs	r0, r5
 8002626:	2500      	movs	r5, #0
 8002628:	4306      	orrs	r6, r0
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d009      	beq.n	8002644 <__aeabi_dsub+0xf8>
 8002630:	230f      	movs	r3, #15
 8002632:	4033      	ands	r3, r6
 8002634:	2b04      	cmp	r3, #4
 8002636:	d005      	beq.n	8002644 <__aeabi_dsub+0xf8>
 8002638:	1d33      	adds	r3, r6, #4
 800263a:	42b3      	cmp	r3, r6
 800263c:	41b6      	sbcs	r6, r6
 800263e:	4276      	negs	r6, r6
 8002640:	1989      	adds	r1, r1, r6
 8002642:	001e      	movs	r6, r3
 8002644:	020b      	lsls	r3, r1, #8
 8002646:	d400      	bmi.n	800264a <__aeabi_dsub+0xfe>
 8002648:	e23d      	b.n	8002ac6 <__aeabi_dsub+0x57a>
 800264a:	1c6a      	adds	r2, r5, #1
 800264c:	4b91      	ldr	r3, [pc, #580]	; (8002894 <__aeabi_dsub+0x348>)
 800264e:	0555      	lsls	r5, r2, #21
 8002650:	0d6d      	lsrs	r5, r5, #21
 8002652:	429a      	cmp	r2, r3
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x10c>
 8002656:	e119      	b.n	800288c <__aeabi_dsub+0x340>
 8002658:	4a8f      	ldr	r2, [pc, #572]	; (8002898 <__aeabi_dsub+0x34c>)
 800265a:	08f6      	lsrs	r6, r6, #3
 800265c:	400a      	ands	r2, r1
 800265e:	0757      	lsls	r7, r2, #29
 8002660:	0252      	lsls	r2, r2, #9
 8002662:	4337      	orrs	r7, r6
 8002664:	0b12      	lsrs	r2, r2, #12
 8002666:	e09b      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002668:	2e00      	cmp	r6, #0
 800266a:	d000      	beq.n	800266e <__aeabi_dsub+0x122>
 800266c:	e0c5      	b.n	80027fa <__aeabi_dsub+0x2ae>
 800266e:	1c6e      	adds	r6, r5, #1
 8002670:	0576      	lsls	r6, r6, #21
 8002672:	0d76      	lsrs	r6, r6, #21
 8002674:	2e01      	cmp	r6, #1
 8002676:	dc00      	bgt.n	800267a <__aeabi_dsub+0x12e>
 8002678:	e148      	b.n	800290c <__aeabi_dsub+0x3c0>
 800267a:	4667      	mov	r7, ip
 800267c:	1a86      	subs	r6, r0, r2
 800267e:	1bcb      	subs	r3, r1, r7
 8002680:	42b0      	cmp	r0, r6
 8002682:	41bf      	sbcs	r7, r7
 8002684:	427f      	negs	r7, r7
 8002686:	46b8      	mov	r8, r7
 8002688:	001f      	movs	r7, r3
 800268a:	4643      	mov	r3, r8
 800268c:	1aff      	subs	r7, r7, r3
 800268e:	003b      	movs	r3, r7
 8002690:	46b8      	mov	r8, r7
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	d500      	bpl.n	8002698 <__aeabi_dsub+0x14c>
 8002696:	e15f      	b.n	8002958 <__aeabi_dsub+0x40c>
 8002698:	4337      	orrs	r7, r6
 800269a:	d19a      	bne.n	80025d2 <__aeabi_dsub+0x86>
 800269c:	2200      	movs	r2, #0
 800269e:	2400      	movs	r4, #0
 80026a0:	2500      	movs	r5, #0
 80026a2:	e079      	b.n	8002798 <__aeabi_dsub+0x24c>
 80026a4:	2e00      	cmp	r6, #0
 80026a6:	dc00      	bgt.n	80026aa <__aeabi_dsub+0x15e>
 80026a8:	e0fa      	b.n	80028a0 <__aeabi_dsub+0x354>
 80026aa:	2f00      	cmp	r7, #0
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x164>
 80026ae:	e08d      	b.n	80027cc <__aeabi_dsub+0x280>
 80026b0:	4b78      	ldr	r3, [pc, #480]	; (8002894 <__aeabi_dsub+0x348>)
 80026b2:	429d      	cmp	r5, r3
 80026b4:	d067      	beq.n	8002786 <__aeabi_dsub+0x23a>
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	4667      	mov	r7, ip
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	431f      	orrs	r7, r3
 80026be:	46bc      	mov	ip, r7
 80026c0:	2e38      	cmp	r6, #56	; 0x38
 80026c2:	dc00      	bgt.n	80026c6 <__aeabi_dsub+0x17a>
 80026c4:	e152      	b.n	800296c <__aeabi_dsub+0x420>
 80026c6:	4663      	mov	r3, ip
 80026c8:	4313      	orrs	r3, r2
 80026ca:	1e5a      	subs	r2, r3, #1
 80026cc:	4193      	sbcs	r3, r2
 80026ce:	181e      	adds	r6, r3, r0
 80026d0:	4286      	cmp	r6, r0
 80026d2:	4180      	sbcs	r0, r0
 80026d4:	4240      	negs	r0, r0
 80026d6:	1809      	adds	r1, r1, r0
 80026d8:	020b      	lsls	r3, r1, #8
 80026da:	d400      	bmi.n	80026de <__aeabi_dsub+0x192>
 80026dc:	e0be      	b.n	800285c <__aeabi_dsub+0x310>
 80026de:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <__aeabi_dsub+0x348>)
 80026e0:	3501      	adds	r5, #1
 80026e2:	429d      	cmp	r5, r3
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x19c>
 80026e6:	e0d2      	b.n	800288e <__aeabi_dsub+0x342>
 80026e8:	4a6b      	ldr	r2, [pc, #428]	; (8002898 <__aeabi_dsub+0x34c>)
 80026ea:	0873      	lsrs	r3, r6, #1
 80026ec:	400a      	ands	r2, r1
 80026ee:	2101      	movs	r1, #1
 80026f0:	400e      	ands	r6, r1
 80026f2:	431e      	orrs	r6, r3
 80026f4:	0851      	lsrs	r1, r2, #1
 80026f6:	07d3      	lsls	r3, r2, #31
 80026f8:	2207      	movs	r2, #7
 80026fa:	431e      	orrs	r6, r3
 80026fc:	4032      	ands	r2, r6
 80026fe:	e795      	b.n	800262c <__aeabi_dsub+0xe0>
 8002700:	001e      	movs	r6, r3
 8002702:	4316      	orrs	r6, r2
 8002704:	d000      	beq.n	8002708 <__aeabi_dsub+0x1bc>
 8002706:	e745      	b.n	8002594 <__aeabi_dsub+0x48>
 8002708:	e740      	b.n	800258c <__aeabi_dsub+0x40>
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <__aeabi_dsub+0x348>)
 800270c:	429d      	cmp	r5, r3
 800270e:	d03a      	beq.n	8002786 <__aeabi_dsub+0x23a>
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	4667      	mov	r7, ip
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	431f      	orrs	r7, r3
 8002718:	46bc      	mov	ip, r7
 800271a:	2e38      	cmp	r6, #56	; 0x38
 800271c:	dd00      	ble.n	8002720 <__aeabi_dsub+0x1d4>
 800271e:	e0eb      	b.n	80028f8 <__aeabi_dsub+0x3ac>
 8002720:	2e1f      	cmp	r6, #31
 8002722:	dc00      	bgt.n	8002726 <__aeabi_dsub+0x1da>
 8002724:	e13a      	b.n	800299c <__aeabi_dsub+0x450>
 8002726:	0033      	movs	r3, r6
 8002728:	4667      	mov	r7, ip
 800272a:	3b20      	subs	r3, #32
 800272c:	40df      	lsrs	r7, r3
 800272e:	003b      	movs	r3, r7
 8002730:	2e20      	cmp	r6, #32
 8002732:	d005      	beq.n	8002740 <__aeabi_dsub+0x1f4>
 8002734:	2740      	movs	r7, #64	; 0x40
 8002736:	1bbf      	subs	r7, r7, r6
 8002738:	4666      	mov	r6, ip
 800273a:	40be      	lsls	r6, r7
 800273c:	4332      	orrs	r2, r6
 800273e:	4690      	mov	r8, r2
 8002740:	4646      	mov	r6, r8
 8002742:	1e72      	subs	r2, r6, #1
 8002744:	4196      	sbcs	r6, r2
 8002746:	4333      	orrs	r3, r6
 8002748:	e0da      	b.n	8002900 <__aeabi_dsub+0x3b4>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x204>
 800274e:	e214      	b.n	8002b7a <__aeabi_dsub+0x62e>
 8002750:	4663      	mov	r3, ip
 8002752:	4313      	orrs	r3, r2
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x20c>
 8002756:	e168      	b.n	8002a2a <__aeabi_dsub+0x4de>
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	074e      	lsls	r6, r1, #29
 800275c:	08c0      	lsrs	r0, r0, #3
 800275e:	08c9      	lsrs	r1, r1, #3
 8002760:	031b      	lsls	r3, r3, #12
 8002762:	4306      	orrs	r6, r0
 8002764:	4219      	tst	r1, r3
 8002766:	d008      	beq.n	800277a <__aeabi_dsub+0x22e>
 8002768:	4660      	mov	r0, ip
 800276a:	08c0      	lsrs	r0, r0, #3
 800276c:	4218      	tst	r0, r3
 800276e:	d104      	bne.n	800277a <__aeabi_dsub+0x22e>
 8002770:	4663      	mov	r3, ip
 8002772:	0001      	movs	r1, r0
 8002774:	08d2      	lsrs	r2, r2, #3
 8002776:	075e      	lsls	r6, r3, #29
 8002778:	4316      	orrs	r6, r2
 800277a:	00f3      	lsls	r3, r6, #3
 800277c:	4699      	mov	r9, r3
 800277e:	00c9      	lsls	r1, r1, #3
 8002780:	0f72      	lsrs	r2, r6, #29
 8002782:	4d44      	ldr	r5, [pc, #272]	; (8002894 <__aeabi_dsub+0x348>)
 8002784:	4311      	orrs	r1, r2
 8002786:	464b      	mov	r3, r9
 8002788:	08de      	lsrs	r6, r3, #3
 800278a:	4b42      	ldr	r3, [pc, #264]	; (8002894 <__aeabi_dsub+0x348>)
 800278c:	074f      	lsls	r7, r1, #29
 800278e:	4337      	orrs	r7, r6
 8002790:	08ca      	lsrs	r2, r1, #3
 8002792:	429d      	cmp	r5, r3
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x24c>
 8002796:	e06e      	b.n	8002876 <__aeabi_dsub+0x32a>
 8002798:	0312      	lsls	r2, r2, #12
 800279a:	056d      	lsls	r5, r5, #21
 800279c:	0b12      	lsrs	r2, r2, #12
 800279e:	0d6d      	lsrs	r5, r5, #21
 80027a0:	2100      	movs	r1, #0
 80027a2:	0312      	lsls	r2, r2, #12
 80027a4:	0b13      	lsrs	r3, r2, #12
 80027a6:	0d0a      	lsrs	r2, r1, #20
 80027a8:	0512      	lsls	r2, r2, #20
 80027aa:	431a      	orrs	r2, r3
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <__aeabi_dsub+0x350>)
 80027ae:	052d      	lsls	r5, r5, #20
 80027b0:	4013      	ands	r3, r2
 80027b2:	432b      	orrs	r3, r5
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	07e4      	lsls	r4, r4, #31
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	4323      	orrs	r3, r4
 80027bc:	0038      	movs	r0, r7
 80027be:	0019      	movs	r1, r3
 80027c0:	bc3c      	pop	{r2, r3, r4, r5}
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	46a2      	mov	sl, r4
 80027c8:	46ab      	mov	fp, r5
 80027ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027cc:	4663      	mov	r3, ip
 80027ce:	4313      	orrs	r3, r2
 80027d0:	d011      	beq.n	80027f6 <__aeabi_dsub+0x2aa>
 80027d2:	1e73      	subs	r3, r6, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d000      	beq.n	80027da <__aeabi_dsub+0x28e>
 80027d8:	e107      	b.n	80029ea <__aeabi_dsub+0x49e>
 80027da:	1886      	adds	r6, r0, r2
 80027dc:	4286      	cmp	r6, r0
 80027de:	4180      	sbcs	r0, r0
 80027e0:	4461      	add	r1, ip
 80027e2:	4240      	negs	r0, r0
 80027e4:	1809      	adds	r1, r1, r0
 80027e6:	2501      	movs	r5, #1
 80027e8:	020b      	lsls	r3, r1, #8
 80027ea:	d537      	bpl.n	800285c <__aeabi_dsub+0x310>
 80027ec:	2502      	movs	r5, #2
 80027ee:	e77b      	b.n	80026e8 <__aeabi_dsub+0x19c>
 80027f0:	003e      	movs	r6, r7
 80027f2:	4661      	mov	r1, ip
 80027f4:	4691      	mov	r9, r2
 80027f6:	0035      	movs	r5, r6
 80027f8:	e7c5      	b.n	8002786 <__aeabi_dsub+0x23a>
 80027fa:	465c      	mov	r4, fp
 80027fc:	2d00      	cmp	r5, #0
 80027fe:	d000      	beq.n	8002802 <__aeabi_dsub+0x2b6>
 8002800:	e0e1      	b.n	80029c6 <__aeabi_dsub+0x47a>
 8002802:	000b      	movs	r3, r1
 8002804:	4303      	orrs	r3, r0
 8002806:	d0f3      	beq.n	80027f0 <__aeabi_dsub+0x2a4>
 8002808:	1c73      	adds	r3, r6, #1
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x2c2>
 800280c:	e1ac      	b.n	8002b68 <__aeabi_dsub+0x61c>
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <__aeabi_dsub+0x348>)
 8002810:	429f      	cmp	r7, r3
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x2ca>
 8002814:	e13a      	b.n	8002a8c <__aeabi_dsub+0x540>
 8002816:	43f3      	mvns	r3, r6
 8002818:	2b38      	cmp	r3, #56	; 0x38
 800281a:	dd00      	ble.n	800281e <__aeabi_dsub+0x2d2>
 800281c:	e16f      	b.n	8002afe <__aeabi_dsub+0x5b2>
 800281e:	2b1f      	cmp	r3, #31
 8002820:	dd00      	ble.n	8002824 <__aeabi_dsub+0x2d8>
 8002822:	e18c      	b.n	8002b3e <__aeabi_dsub+0x5f2>
 8002824:	2520      	movs	r5, #32
 8002826:	000e      	movs	r6, r1
 8002828:	1aed      	subs	r5, r5, r3
 800282a:	40ae      	lsls	r6, r5
 800282c:	46b0      	mov	r8, r6
 800282e:	0006      	movs	r6, r0
 8002830:	46aa      	mov	sl, r5
 8002832:	40de      	lsrs	r6, r3
 8002834:	4645      	mov	r5, r8
 8002836:	4335      	orrs	r5, r6
 8002838:	002e      	movs	r6, r5
 800283a:	4655      	mov	r5, sl
 800283c:	40d9      	lsrs	r1, r3
 800283e:	40a8      	lsls	r0, r5
 8002840:	4663      	mov	r3, ip
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	1a5b      	subs	r3, r3, r1
 8002848:	469c      	mov	ip, r3
 800284a:	4330      	orrs	r0, r6
 800284c:	1a16      	subs	r6, r2, r0
 800284e:	42b2      	cmp	r2, r6
 8002850:	4192      	sbcs	r2, r2
 8002852:	4663      	mov	r3, ip
 8002854:	4252      	negs	r2, r2
 8002856:	1a99      	subs	r1, r3, r2
 8002858:	003d      	movs	r5, r7
 800285a:	e6b4      	b.n	80025c6 <__aeabi_dsub+0x7a>
 800285c:	2207      	movs	r2, #7
 800285e:	4032      	ands	r2, r6
 8002860:	2a00      	cmp	r2, #0
 8002862:	d000      	beq.n	8002866 <__aeabi_dsub+0x31a>
 8002864:	e6e4      	b.n	8002630 <__aeabi_dsub+0xe4>
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <__aeabi_dsub+0x348>)
 8002868:	08f6      	lsrs	r6, r6, #3
 800286a:	074f      	lsls	r7, r1, #29
 800286c:	4337      	orrs	r7, r6
 800286e:	08ca      	lsrs	r2, r1, #3
 8002870:	429d      	cmp	r5, r3
 8002872:	d000      	beq.n	8002876 <__aeabi_dsub+0x32a>
 8002874:	e790      	b.n	8002798 <__aeabi_dsub+0x24c>
 8002876:	003b      	movs	r3, r7
 8002878:	4313      	orrs	r3, r2
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x332>
 800287c:	e1a6      	b.n	8002bcc <__aeabi_dsub+0x680>
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	031b      	lsls	r3, r3, #12
 8002882:	431a      	orrs	r2, r3
 8002884:	0312      	lsls	r2, r2, #12
 8002886:	0b12      	lsrs	r2, r2, #12
 8002888:	4d02      	ldr	r5, [pc, #8]	; (8002894 <__aeabi_dsub+0x348>)
 800288a:	e789      	b.n	80027a0 <__aeabi_dsub+0x254>
 800288c:	0015      	movs	r5, r2
 800288e:	2200      	movs	r2, #0
 8002890:	2700      	movs	r7, #0
 8002892:	e785      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002894:	000007ff 	.word	0x000007ff
 8002898:	ff7fffff 	.word	0xff7fffff
 800289c:	800fffff 	.word	0x800fffff
 80028a0:	2e00      	cmp	r6, #0
 80028a2:	d000      	beq.n	80028a6 <__aeabi_dsub+0x35a>
 80028a4:	e0c7      	b.n	8002a36 <__aeabi_dsub+0x4ea>
 80028a6:	1c6b      	adds	r3, r5, #1
 80028a8:	055e      	lsls	r6, r3, #21
 80028aa:	0d76      	lsrs	r6, r6, #21
 80028ac:	2e01      	cmp	r6, #1
 80028ae:	dc00      	bgt.n	80028b2 <__aeabi_dsub+0x366>
 80028b0:	e0f0      	b.n	8002a94 <__aeabi_dsub+0x548>
 80028b2:	4dc8      	ldr	r5, [pc, #800]	; (8002bd4 <__aeabi_dsub+0x688>)
 80028b4:	42ab      	cmp	r3, r5
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x36e>
 80028b8:	e0b9      	b.n	8002a2e <__aeabi_dsub+0x4e2>
 80028ba:	1885      	adds	r5, r0, r2
 80028bc:	000a      	movs	r2, r1
 80028be:	4285      	cmp	r5, r0
 80028c0:	4189      	sbcs	r1, r1
 80028c2:	4462      	add	r2, ip
 80028c4:	4249      	negs	r1, r1
 80028c6:	1851      	adds	r1, r2, r1
 80028c8:	2207      	movs	r2, #7
 80028ca:	07ce      	lsls	r6, r1, #31
 80028cc:	086d      	lsrs	r5, r5, #1
 80028ce:	432e      	orrs	r6, r5
 80028d0:	0849      	lsrs	r1, r1, #1
 80028d2:	4032      	ands	r2, r6
 80028d4:	001d      	movs	r5, r3
 80028d6:	e6a9      	b.n	800262c <__aeabi_dsub+0xe0>
 80028d8:	49bf      	ldr	r1, [pc, #764]	; (8002bd8 <__aeabi_dsub+0x68c>)
 80028da:	1aed      	subs	r5, r5, r3
 80028dc:	4011      	ands	r1, r2
 80028de:	2207      	movs	r2, #7
 80028e0:	4032      	ands	r2, r6
 80028e2:	e6a3      	b.n	800262c <__aeabi_dsub+0xe0>
 80028e4:	0032      	movs	r2, r6
 80028e6:	3828      	subs	r0, #40	; 0x28
 80028e8:	4082      	lsls	r2, r0
 80028ea:	2600      	movs	r6, #0
 80028ec:	e686      	b.n	80025fc <__aeabi_dsub+0xb0>
 80028ee:	0030      	movs	r0, r6
 80028f0:	f000 fb08 	bl	8002f04 <__clzsi2>
 80028f4:	3020      	adds	r0, #32
 80028f6:	e673      	b.n	80025e0 <__aeabi_dsub+0x94>
 80028f8:	4663      	mov	r3, ip
 80028fa:	4313      	orrs	r3, r2
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	4193      	sbcs	r3, r2
 8002900:	1ac6      	subs	r6, r0, r3
 8002902:	42b0      	cmp	r0, r6
 8002904:	4180      	sbcs	r0, r0
 8002906:	4240      	negs	r0, r0
 8002908:	1a09      	subs	r1, r1, r0
 800290a:	e65c      	b.n	80025c6 <__aeabi_dsub+0x7a>
 800290c:	000e      	movs	r6, r1
 800290e:	4667      	mov	r7, ip
 8002910:	4306      	orrs	r6, r0
 8002912:	4317      	orrs	r7, r2
 8002914:	2d00      	cmp	r5, #0
 8002916:	d15e      	bne.n	80029d6 <__aeabi_dsub+0x48a>
 8002918:	2e00      	cmp	r6, #0
 800291a:	d000      	beq.n	800291e <__aeabi_dsub+0x3d2>
 800291c:	e0f3      	b.n	8002b06 <__aeabi_dsub+0x5ba>
 800291e:	2f00      	cmp	r7, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x3d8>
 8002922:	e11e      	b.n	8002b62 <__aeabi_dsub+0x616>
 8002924:	465c      	mov	r4, fp
 8002926:	4661      	mov	r1, ip
 8002928:	4691      	mov	r9, r2
 800292a:	e72c      	b.n	8002786 <__aeabi_dsub+0x23a>
 800292c:	4fa9      	ldr	r7, [pc, #676]	; (8002bd4 <__aeabi_dsub+0x688>)
 800292e:	42be      	cmp	r6, r7
 8002930:	d07b      	beq.n	8002a2a <__aeabi_dsub+0x4de>
 8002932:	001e      	movs	r6, r3
 8002934:	e6f1      	b.n	800271a <__aeabi_dsub+0x1ce>
 8002936:	0010      	movs	r0, r2
 8002938:	3d1f      	subs	r5, #31
 800293a:	40e8      	lsrs	r0, r5
 800293c:	2b20      	cmp	r3, #32
 800293e:	d003      	beq.n	8002948 <__aeabi_dsub+0x3fc>
 8002940:	2140      	movs	r1, #64	; 0x40
 8002942:	1acb      	subs	r3, r1, r3
 8002944:	409a      	lsls	r2, r3
 8002946:	4316      	orrs	r6, r2
 8002948:	1e73      	subs	r3, r6, #1
 800294a:	419e      	sbcs	r6, r3
 800294c:	2207      	movs	r2, #7
 800294e:	4306      	orrs	r6, r0
 8002950:	4032      	ands	r2, r6
 8002952:	2100      	movs	r1, #0
 8002954:	2500      	movs	r5, #0
 8002956:	e783      	b.n	8002860 <__aeabi_dsub+0x314>
 8002958:	1a16      	subs	r6, r2, r0
 800295a:	4663      	mov	r3, ip
 800295c:	42b2      	cmp	r2, r6
 800295e:	4180      	sbcs	r0, r0
 8002960:	1a59      	subs	r1, r3, r1
 8002962:	4240      	negs	r0, r0
 8002964:	1a0b      	subs	r3, r1, r0
 8002966:	4698      	mov	r8, r3
 8002968:	465c      	mov	r4, fp
 800296a:	e632      	b.n	80025d2 <__aeabi_dsub+0x86>
 800296c:	2e1f      	cmp	r6, #31
 800296e:	dd00      	ble.n	8002972 <__aeabi_dsub+0x426>
 8002970:	e0ab      	b.n	8002aca <__aeabi_dsub+0x57e>
 8002972:	2720      	movs	r7, #32
 8002974:	1bbb      	subs	r3, r7, r6
 8002976:	469a      	mov	sl, r3
 8002978:	4663      	mov	r3, ip
 800297a:	4657      	mov	r7, sl
 800297c:	40bb      	lsls	r3, r7
 800297e:	4699      	mov	r9, r3
 8002980:	0013      	movs	r3, r2
 8002982:	464f      	mov	r7, r9
 8002984:	40f3      	lsrs	r3, r6
 8002986:	431f      	orrs	r7, r3
 8002988:	003b      	movs	r3, r7
 800298a:	4657      	mov	r7, sl
 800298c:	40ba      	lsls	r2, r7
 800298e:	1e57      	subs	r7, r2, #1
 8002990:	41ba      	sbcs	r2, r7
 8002992:	4313      	orrs	r3, r2
 8002994:	4662      	mov	r2, ip
 8002996:	40f2      	lsrs	r2, r6
 8002998:	1889      	adds	r1, r1, r2
 800299a:	e698      	b.n	80026ce <__aeabi_dsub+0x182>
 800299c:	2720      	movs	r7, #32
 800299e:	1bbb      	subs	r3, r7, r6
 80029a0:	469a      	mov	sl, r3
 80029a2:	4663      	mov	r3, ip
 80029a4:	4657      	mov	r7, sl
 80029a6:	40bb      	lsls	r3, r7
 80029a8:	4699      	mov	r9, r3
 80029aa:	0013      	movs	r3, r2
 80029ac:	464f      	mov	r7, r9
 80029ae:	40f3      	lsrs	r3, r6
 80029b0:	431f      	orrs	r7, r3
 80029b2:	003b      	movs	r3, r7
 80029b4:	4657      	mov	r7, sl
 80029b6:	40ba      	lsls	r2, r7
 80029b8:	1e57      	subs	r7, r2, #1
 80029ba:	41ba      	sbcs	r2, r7
 80029bc:	4313      	orrs	r3, r2
 80029be:	4662      	mov	r2, ip
 80029c0:	40f2      	lsrs	r2, r6
 80029c2:	1a89      	subs	r1, r1, r2
 80029c4:	e79c      	b.n	8002900 <__aeabi_dsub+0x3b4>
 80029c6:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <__aeabi_dsub+0x688>)
 80029c8:	429f      	cmp	r7, r3
 80029ca:	d05f      	beq.n	8002a8c <__aeabi_dsub+0x540>
 80029cc:	2580      	movs	r5, #128	; 0x80
 80029ce:	042d      	lsls	r5, r5, #16
 80029d0:	4273      	negs	r3, r6
 80029d2:	4329      	orrs	r1, r5
 80029d4:	e720      	b.n	8002818 <__aeabi_dsub+0x2cc>
 80029d6:	2e00      	cmp	r6, #0
 80029d8:	d10c      	bne.n	80029f4 <__aeabi_dsub+0x4a8>
 80029da:	2f00      	cmp	r7, #0
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x494>
 80029de:	e0d0      	b.n	8002b82 <__aeabi_dsub+0x636>
 80029e0:	465c      	mov	r4, fp
 80029e2:	4661      	mov	r1, ip
 80029e4:	4691      	mov	r9, r2
 80029e6:	4d7b      	ldr	r5, [pc, #492]	; (8002bd4 <__aeabi_dsub+0x688>)
 80029e8:	e6cd      	b.n	8002786 <__aeabi_dsub+0x23a>
 80029ea:	4f7a      	ldr	r7, [pc, #488]	; (8002bd4 <__aeabi_dsub+0x688>)
 80029ec:	42be      	cmp	r6, r7
 80029ee:	d01c      	beq.n	8002a2a <__aeabi_dsub+0x4de>
 80029f0:	001e      	movs	r6, r3
 80029f2:	e665      	b.n	80026c0 <__aeabi_dsub+0x174>
 80029f4:	2f00      	cmp	r7, #0
 80029f6:	d018      	beq.n	8002a2a <__aeabi_dsub+0x4de>
 80029f8:	08c0      	lsrs	r0, r0, #3
 80029fa:	074e      	lsls	r6, r1, #29
 80029fc:	4306      	orrs	r6, r0
 80029fe:	2080      	movs	r0, #128	; 0x80
 8002a00:	08c9      	lsrs	r1, r1, #3
 8002a02:	0300      	lsls	r0, r0, #12
 8002a04:	4201      	tst	r1, r0
 8002a06:	d008      	beq.n	8002a1a <__aeabi_dsub+0x4ce>
 8002a08:	4663      	mov	r3, ip
 8002a0a:	08dc      	lsrs	r4, r3, #3
 8002a0c:	4204      	tst	r4, r0
 8002a0e:	d104      	bne.n	8002a1a <__aeabi_dsub+0x4ce>
 8002a10:	0021      	movs	r1, r4
 8002a12:	46da      	mov	sl, fp
 8002a14:	08d2      	lsrs	r2, r2, #3
 8002a16:	075e      	lsls	r6, r3, #29
 8002a18:	4316      	orrs	r6, r2
 8002a1a:	00f3      	lsls	r3, r6, #3
 8002a1c:	4699      	mov	r9, r3
 8002a1e:	2401      	movs	r4, #1
 8002a20:	4653      	mov	r3, sl
 8002a22:	00c9      	lsls	r1, r1, #3
 8002a24:	0f72      	lsrs	r2, r6, #29
 8002a26:	4311      	orrs	r1, r2
 8002a28:	401c      	ands	r4, r3
 8002a2a:	4d6a      	ldr	r5, [pc, #424]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002a2c:	e6ab      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002a2e:	001d      	movs	r5, r3
 8002a30:	2200      	movs	r2, #0
 8002a32:	2700      	movs	r7, #0
 8002a34:	e6b4      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002a36:	2d00      	cmp	r5, #0
 8002a38:	d159      	bne.n	8002aee <__aeabi_dsub+0x5a2>
 8002a3a:	000b      	movs	r3, r1
 8002a3c:	4303      	orrs	r3, r0
 8002a3e:	d100      	bne.n	8002a42 <__aeabi_dsub+0x4f6>
 8002a40:	e6d6      	b.n	80027f0 <__aeabi_dsub+0x2a4>
 8002a42:	1c73      	adds	r3, r6, #1
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x4fc>
 8002a46:	e0b2      	b.n	8002bae <__aeabi_dsub+0x662>
 8002a48:	4b62      	ldr	r3, [pc, #392]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002a4a:	429f      	cmp	r7, r3
 8002a4c:	d01e      	beq.n	8002a8c <__aeabi_dsub+0x540>
 8002a4e:	43f3      	mvns	r3, r6
 8002a50:	2b38      	cmp	r3, #56	; 0x38
 8002a52:	dc6f      	bgt.n	8002b34 <__aeabi_dsub+0x5e8>
 8002a54:	2b1f      	cmp	r3, #31
 8002a56:	dd00      	ble.n	8002a5a <__aeabi_dsub+0x50e>
 8002a58:	e097      	b.n	8002b8a <__aeabi_dsub+0x63e>
 8002a5a:	2520      	movs	r5, #32
 8002a5c:	000e      	movs	r6, r1
 8002a5e:	1aed      	subs	r5, r5, r3
 8002a60:	40ae      	lsls	r6, r5
 8002a62:	46b0      	mov	r8, r6
 8002a64:	0006      	movs	r6, r0
 8002a66:	46aa      	mov	sl, r5
 8002a68:	40de      	lsrs	r6, r3
 8002a6a:	4645      	mov	r5, r8
 8002a6c:	4335      	orrs	r5, r6
 8002a6e:	002e      	movs	r6, r5
 8002a70:	4655      	mov	r5, sl
 8002a72:	40a8      	lsls	r0, r5
 8002a74:	40d9      	lsrs	r1, r3
 8002a76:	1e45      	subs	r5, r0, #1
 8002a78:	41a8      	sbcs	r0, r5
 8002a7a:	448c      	add	ip, r1
 8002a7c:	4306      	orrs	r6, r0
 8002a7e:	18b6      	adds	r6, r6, r2
 8002a80:	4296      	cmp	r6, r2
 8002a82:	4192      	sbcs	r2, r2
 8002a84:	4251      	negs	r1, r2
 8002a86:	4461      	add	r1, ip
 8002a88:	003d      	movs	r5, r7
 8002a8a:	e625      	b.n	80026d8 <__aeabi_dsub+0x18c>
 8002a8c:	003d      	movs	r5, r7
 8002a8e:	4661      	mov	r1, ip
 8002a90:	4691      	mov	r9, r2
 8002a92:	e678      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002a94:	000b      	movs	r3, r1
 8002a96:	4303      	orrs	r3, r0
 8002a98:	2d00      	cmp	r5, #0
 8002a9a:	d000      	beq.n	8002a9e <__aeabi_dsub+0x552>
 8002a9c:	e655      	b.n	800274a <__aeabi_dsub+0x1fe>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f5      	beq.n	8002a8e <__aeabi_dsub+0x542>
 8002aa2:	4663      	mov	r3, ip
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dsub+0x55e>
 8002aa8:	e66d      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002aaa:	1886      	adds	r6, r0, r2
 8002aac:	4286      	cmp	r6, r0
 8002aae:	4180      	sbcs	r0, r0
 8002ab0:	4461      	add	r1, ip
 8002ab2:	4240      	negs	r0, r0
 8002ab4:	1809      	adds	r1, r1, r0
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	020b      	lsls	r3, r1, #8
 8002aba:	d400      	bmi.n	8002abe <__aeabi_dsub+0x572>
 8002abc:	e6d0      	b.n	8002860 <__aeabi_dsub+0x314>
 8002abe:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <__aeabi_dsub+0x68c>)
 8002ac0:	3501      	adds	r5, #1
 8002ac2:	4019      	ands	r1, r3
 8002ac4:	e5b2      	b.n	800262c <__aeabi_dsub+0xe0>
 8002ac6:	46b1      	mov	r9, r6
 8002ac8:	e65d      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002aca:	0033      	movs	r3, r6
 8002acc:	4667      	mov	r7, ip
 8002ace:	3b20      	subs	r3, #32
 8002ad0:	40df      	lsrs	r7, r3
 8002ad2:	003b      	movs	r3, r7
 8002ad4:	2e20      	cmp	r6, #32
 8002ad6:	d005      	beq.n	8002ae4 <__aeabi_dsub+0x598>
 8002ad8:	2740      	movs	r7, #64	; 0x40
 8002ada:	1bbf      	subs	r7, r7, r6
 8002adc:	4666      	mov	r6, ip
 8002ade:	40be      	lsls	r6, r7
 8002ae0:	4332      	orrs	r2, r6
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4646      	mov	r6, r8
 8002ae6:	1e72      	subs	r2, r6, #1
 8002ae8:	4196      	sbcs	r6, r2
 8002aea:	4333      	orrs	r3, r6
 8002aec:	e5ef      	b.n	80026ce <__aeabi_dsub+0x182>
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002af0:	429f      	cmp	r7, r3
 8002af2:	d0cb      	beq.n	8002a8c <__aeabi_dsub+0x540>
 8002af4:	2580      	movs	r5, #128	; 0x80
 8002af6:	042d      	lsls	r5, r5, #16
 8002af8:	4273      	negs	r3, r6
 8002afa:	4329      	orrs	r1, r5
 8002afc:	e7a8      	b.n	8002a50 <__aeabi_dsub+0x504>
 8002afe:	4308      	orrs	r0, r1
 8002b00:	1e41      	subs	r1, r0, #1
 8002b02:	4188      	sbcs	r0, r1
 8002b04:	e6a2      	b.n	800284c <__aeabi_dsub+0x300>
 8002b06:	2f00      	cmp	r7, #0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x5c0>
 8002b0a:	e63c      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002b0c:	4663      	mov	r3, ip
 8002b0e:	1a86      	subs	r6, r0, r2
 8002b10:	1acf      	subs	r7, r1, r3
 8002b12:	42b0      	cmp	r0, r6
 8002b14:	419b      	sbcs	r3, r3
 8002b16:	425b      	negs	r3, r3
 8002b18:	1afb      	subs	r3, r7, r3
 8002b1a:	4698      	mov	r8, r3
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	d54e      	bpl.n	8002bbe <__aeabi_dsub+0x672>
 8002b20:	1a16      	subs	r6, r2, r0
 8002b22:	4663      	mov	r3, ip
 8002b24:	42b2      	cmp	r2, r6
 8002b26:	4192      	sbcs	r2, r2
 8002b28:	1a59      	subs	r1, r3, r1
 8002b2a:	4252      	negs	r2, r2
 8002b2c:	1a89      	subs	r1, r1, r2
 8002b2e:	465c      	mov	r4, fp
 8002b30:	2200      	movs	r2, #0
 8002b32:	e57b      	b.n	800262c <__aeabi_dsub+0xe0>
 8002b34:	4301      	orrs	r1, r0
 8002b36:	000e      	movs	r6, r1
 8002b38:	1e71      	subs	r1, r6, #1
 8002b3a:	418e      	sbcs	r6, r1
 8002b3c:	e79f      	b.n	8002a7e <__aeabi_dsub+0x532>
 8002b3e:	001d      	movs	r5, r3
 8002b40:	000e      	movs	r6, r1
 8002b42:	3d20      	subs	r5, #32
 8002b44:	40ee      	lsrs	r6, r5
 8002b46:	46b0      	mov	r8, r6
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d004      	beq.n	8002b56 <__aeabi_dsub+0x60a>
 8002b4c:	2540      	movs	r5, #64	; 0x40
 8002b4e:	1aeb      	subs	r3, r5, r3
 8002b50:	4099      	lsls	r1, r3
 8002b52:	4308      	orrs	r0, r1
 8002b54:	4681      	mov	r9, r0
 8002b56:	4648      	mov	r0, r9
 8002b58:	4643      	mov	r3, r8
 8002b5a:	1e41      	subs	r1, r0, #1
 8002b5c:	4188      	sbcs	r0, r1
 8002b5e:	4318      	orrs	r0, r3
 8002b60:	e674      	b.n	800284c <__aeabi_dsub+0x300>
 8002b62:	2200      	movs	r2, #0
 8002b64:	2400      	movs	r4, #0
 8002b66:	e617      	b.n	8002798 <__aeabi_dsub+0x24c>
 8002b68:	1a16      	subs	r6, r2, r0
 8002b6a:	4663      	mov	r3, ip
 8002b6c:	42b2      	cmp	r2, r6
 8002b6e:	4192      	sbcs	r2, r2
 8002b70:	1a59      	subs	r1, r3, r1
 8002b72:	4252      	negs	r2, r2
 8002b74:	1a89      	subs	r1, r1, r2
 8002b76:	003d      	movs	r5, r7
 8002b78:	e525      	b.n	80025c6 <__aeabi_dsub+0x7a>
 8002b7a:	4661      	mov	r1, ip
 8002b7c:	4691      	mov	r9, r2
 8002b7e:	4d15      	ldr	r5, [pc, #84]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002b80:	e601      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002b82:	2280      	movs	r2, #128	; 0x80
 8002b84:	2400      	movs	r4, #0
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	e679      	b.n	800287e <__aeabi_dsub+0x332>
 8002b8a:	001d      	movs	r5, r3
 8002b8c:	000e      	movs	r6, r1
 8002b8e:	3d20      	subs	r5, #32
 8002b90:	40ee      	lsrs	r6, r5
 8002b92:	46b0      	mov	r8, r6
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d004      	beq.n	8002ba2 <__aeabi_dsub+0x656>
 8002b98:	2540      	movs	r5, #64	; 0x40
 8002b9a:	1aeb      	subs	r3, r5, r3
 8002b9c:	4099      	lsls	r1, r3
 8002b9e:	4308      	orrs	r0, r1
 8002ba0:	4681      	mov	r9, r0
 8002ba2:	464e      	mov	r6, r9
 8002ba4:	4643      	mov	r3, r8
 8002ba6:	1e71      	subs	r1, r6, #1
 8002ba8:	418e      	sbcs	r6, r1
 8002baa:	431e      	orrs	r6, r3
 8002bac:	e767      	b.n	8002a7e <__aeabi_dsub+0x532>
 8002bae:	1886      	adds	r6, r0, r2
 8002bb0:	4296      	cmp	r6, r2
 8002bb2:	419b      	sbcs	r3, r3
 8002bb4:	4461      	add	r1, ip
 8002bb6:	425b      	negs	r3, r3
 8002bb8:	18c9      	adds	r1, r1, r3
 8002bba:	003d      	movs	r5, r7
 8002bbc:	e58c      	b.n	80026d8 <__aeabi_dsub+0x18c>
 8002bbe:	4647      	mov	r7, r8
 8002bc0:	4337      	orrs	r7, r6
 8002bc2:	d0ce      	beq.n	8002b62 <__aeabi_dsub+0x616>
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	4641      	mov	r1, r8
 8002bc8:	4032      	ands	r2, r6
 8002bca:	e649      	b.n	8002860 <__aeabi_dsub+0x314>
 8002bcc:	2700      	movs	r7, #0
 8002bce:	003a      	movs	r2, r7
 8002bd0:	e5e6      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	000007ff 	.word	0x000007ff
 8002bd8:	ff7fffff 	.word	0xff7fffff

08002bdc <__aeabi_dcmpun>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4e0c      	ldr	r6, [pc, #48]	; (8002c10 <__aeabi_dcmpun+0x34>)
 8002be0:	030d      	lsls	r5, r1, #12
 8002be2:	031c      	lsls	r4, r3, #12
 8002be4:	0049      	lsls	r1, r1, #1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	0b2d      	lsrs	r5, r5, #12
 8002bea:	0d49      	lsrs	r1, r1, #21
 8002bec:	0b24      	lsrs	r4, r4, #12
 8002bee:	0d5b      	lsrs	r3, r3, #21
 8002bf0:	42b1      	cmp	r1, r6
 8002bf2:	d008      	beq.n	8002c06 <__aeabi_dcmpun+0x2a>
 8002bf4:	4906      	ldr	r1, [pc, #24]	; (8002c10 <__aeabi_dcmpun+0x34>)
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	428b      	cmp	r3, r1
 8002bfa:	d103      	bne.n	8002c04 <__aeabi_dcmpun+0x28>
 8002bfc:	4314      	orrs	r4, r2
 8002bfe:	0020      	movs	r0, r4
 8002c00:	1e44      	subs	r4, r0, #1
 8002c02:	41a0      	sbcs	r0, r4
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
 8002c06:	4305      	orrs	r5, r0
 8002c08:	2001      	movs	r0, #1
 8002c0a:	2d00      	cmp	r5, #0
 8002c0c:	d1fa      	bne.n	8002c04 <__aeabi_dcmpun+0x28>
 8002c0e:	e7f1      	b.n	8002bf4 <__aeabi_dcmpun+0x18>
 8002c10:	000007ff 	.word	0x000007ff

08002c14 <__aeabi_d2iz>:
 8002c14:	b530      	push	{r4, r5, lr}
 8002c16:	4d14      	ldr	r5, [pc, #80]	; (8002c68 <__aeabi_d2iz+0x54>)
 8002c18:	030a      	lsls	r2, r1, #12
 8002c1a:	004b      	lsls	r3, r1, #1
 8002c1c:	0b12      	lsrs	r2, r2, #12
 8002c1e:	0d5b      	lsrs	r3, r3, #21
 8002c20:	0fc9      	lsrs	r1, r1, #31
 8002c22:	2400      	movs	r4, #0
 8002c24:	42ab      	cmp	r3, r5
 8002c26:	dd11      	ble.n	8002c4c <__aeabi_d2iz+0x38>
 8002c28:	4c10      	ldr	r4, [pc, #64]	; (8002c6c <__aeabi_d2iz+0x58>)
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	dc10      	bgt.n	8002c50 <__aeabi_d2iz+0x3c>
 8002c2e:	2480      	movs	r4, #128	; 0x80
 8002c30:	0364      	lsls	r4, r4, #13
 8002c32:	4322      	orrs	r2, r4
 8002c34:	4c0e      	ldr	r4, [pc, #56]	; (8002c70 <__aeabi_d2iz+0x5c>)
 8002c36:	1ae4      	subs	r4, r4, r3
 8002c38:	2c1f      	cmp	r4, #31
 8002c3a:	dd0c      	ble.n	8002c56 <__aeabi_d2iz+0x42>
 8002c3c:	480d      	ldr	r0, [pc, #52]	; (8002c74 <__aeabi_d2iz+0x60>)
 8002c3e:	1ac3      	subs	r3, r0, r3
 8002c40:	40da      	lsrs	r2, r3
 8002c42:	0013      	movs	r3, r2
 8002c44:	425c      	negs	r4, r3
 8002c46:	2900      	cmp	r1, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_d2iz+0x38>
 8002c4a:	001c      	movs	r4, r3
 8002c4c:	0020      	movs	r0, r4
 8002c4e:	bd30      	pop	{r4, r5, pc}
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <__aeabi_d2iz+0x64>)
 8002c52:	18cc      	adds	r4, r1, r3
 8002c54:	e7fa      	b.n	8002c4c <__aeabi_d2iz+0x38>
 8002c56:	4d09      	ldr	r5, [pc, #36]	; (8002c7c <__aeabi_d2iz+0x68>)
 8002c58:	40e0      	lsrs	r0, r4
 8002c5a:	46ac      	mov	ip, r5
 8002c5c:	4463      	add	r3, ip
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	0013      	movs	r3, r2
 8002c62:	4303      	orrs	r3, r0
 8002c64:	e7ee      	b.n	8002c44 <__aeabi_d2iz+0x30>
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	000003fe 	.word	0x000003fe
 8002c6c:	0000041d 	.word	0x0000041d
 8002c70:	00000433 	.word	0x00000433
 8002c74:	00000413 	.word	0x00000413
 8002c78:	7fffffff 	.word	0x7fffffff
 8002c7c:	fffffbed 	.word	0xfffffbed

08002c80 <__aeabi_i2d>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d02d      	beq.n	8002ce2 <__aeabi_i2d+0x62>
 8002c86:	17c3      	asrs	r3, r0, #31
 8002c88:	18c5      	adds	r5, r0, r3
 8002c8a:	405d      	eors	r5, r3
 8002c8c:	0fc4      	lsrs	r4, r0, #31
 8002c8e:	0028      	movs	r0, r5
 8002c90:	f000 f938 	bl	8002f04 <__clzsi2>
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <__aeabi_i2d+0x6c>)
 8002c96:	1a1b      	subs	r3, r3, r0
 8002c98:	055b      	lsls	r3, r3, #21
 8002c9a:	0d5b      	lsrs	r3, r3, #21
 8002c9c:	280a      	cmp	r0, #10
 8002c9e:	dd15      	ble.n	8002ccc <__aeabi_i2d+0x4c>
 8002ca0:	380b      	subs	r0, #11
 8002ca2:	4085      	lsls	r5, r0
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	032d      	lsls	r5, r5, #12
 8002ca8:	0b2d      	lsrs	r5, r5, #12
 8002caa:	2100      	movs	r1, #0
 8002cac:	0010      	movs	r0, r2
 8002cae:	032d      	lsls	r5, r5, #12
 8002cb0:	0d0a      	lsrs	r2, r1, #20
 8002cb2:	0b2d      	lsrs	r5, r5, #12
 8002cb4:	0512      	lsls	r2, r2, #20
 8002cb6:	432a      	orrs	r2, r5
 8002cb8:	4d0d      	ldr	r5, [pc, #52]	; (8002cf0 <__aeabi_i2d+0x70>)
 8002cba:	051b      	lsls	r3, r3, #20
 8002cbc:	402a      	ands	r2, r5
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	07e4      	lsls	r4, r4, #31
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	4323      	orrs	r3, r4
 8002cc8:	0019      	movs	r1, r3
 8002cca:	bd70      	pop	{r4, r5, r6, pc}
 8002ccc:	0002      	movs	r2, r0
 8002cce:	0029      	movs	r1, r5
 8002cd0:	3215      	adds	r2, #21
 8002cd2:	4091      	lsls	r1, r2
 8002cd4:	000a      	movs	r2, r1
 8002cd6:	210b      	movs	r1, #11
 8002cd8:	1a08      	subs	r0, r1, r0
 8002cda:	40c5      	lsrs	r5, r0
 8002cdc:	032d      	lsls	r5, r5, #12
 8002cde:	0b2d      	lsrs	r5, r5, #12
 8002ce0:	e7e3      	b.n	8002caa <__aeabi_i2d+0x2a>
 8002ce2:	2400      	movs	r4, #0
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	2200      	movs	r2, #0
 8002cea:	e7de      	b.n	8002caa <__aeabi_i2d+0x2a>
 8002cec:	0000041e 	.word	0x0000041e
 8002cf0:	800fffff 	.word	0x800fffff

08002cf4 <__aeabi_ui2d>:
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	1e04      	subs	r4, r0, #0
 8002cf8:	d025      	beq.n	8002d46 <__aeabi_ui2d+0x52>
 8002cfa:	f000 f903 	bl	8002f04 <__clzsi2>
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <__aeabi_ui2d+0x5c>)
 8002d00:	1a1b      	subs	r3, r3, r0
 8002d02:	055b      	lsls	r3, r3, #21
 8002d04:	0d5b      	lsrs	r3, r3, #21
 8002d06:	280a      	cmp	r0, #10
 8002d08:	dd12      	ble.n	8002d30 <__aeabi_ui2d+0x3c>
 8002d0a:	380b      	subs	r0, #11
 8002d0c:	4084      	lsls	r4, r0
 8002d0e:	2200      	movs	r2, #0
 8002d10:	0324      	lsls	r4, r4, #12
 8002d12:	0b24      	lsrs	r4, r4, #12
 8002d14:	2100      	movs	r1, #0
 8002d16:	0010      	movs	r0, r2
 8002d18:	0324      	lsls	r4, r4, #12
 8002d1a:	0d0a      	lsrs	r2, r1, #20
 8002d1c:	0b24      	lsrs	r4, r4, #12
 8002d1e:	0512      	lsls	r2, r2, #20
 8002d20:	4322      	orrs	r2, r4
 8002d22:	4c0c      	ldr	r4, [pc, #48]	; (8002d54 <__aeabi_ui2d+0x60>)
 8002d24:	051b      	lsls	r3, r3, #20
 8002d26:	4022      	ands	r2, r4
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	0859      	lsrs	r1, r3, #1
 8002d2e:	bd10      	pop	{r4, pc}
 8002d30:	0002      	movs	r2, r0
 8002d32:	0021      	movs	r1, r4
 8002d34:	3215      	adds	r2, #21
 8002d36:	4091      	lsls	r1, r2
 8002d38:	000a      	movs	r2, r1
 8002d3a:	210b      	movs	r1, #11
 8002d3c:	1a08      	subs	r0, r1, r0
 8002d3e:	40c4      	lsrs	r4, r0
 8002d40:	0324      	lsls	r4, r4, #12
 8002d42:	0b24      	lsrs	r4, r4, #12
 8002d44:	e7e6      	b.n	8002d14 <__aeabi_ui2d+0x20>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2400      	movs	r4, #0
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	e7e2      	b.n	8002d14 <__aeabi_ui2d+0x20>
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	0000041e 	.word	0x0000041e
 8002d54:	800fffff 	.word	0x800fffff

08002d58 <__aeabi_f2d>:
 8002d58:	0041      	lsls	r1, r0, #1
 8002d5a:	0e09      	lsrs	r1, r1, #24
 8002d5c:	1c4b      	adds	r3, r1, #1
 8002d5e:	b570      	push	{r4, r5, r6, lr}
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	0246      	lsls	r6, r0, #9
 8002d64:	0a75      	lsrs	r5, r6, #9
 8002d66:	0fc4      	lsrs	r4, r0, #31
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	dd14      	ble.n	8002d96 <__aeabi_f2d+0x3e>
 8002d6c:	23e0      	movs	r3, #224	; 0xe0
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	076d      	lsls	r5, r5, #29
 8002d72:	0b36      	lsrs	r6, r6, #12
 8002d74:	18cb      	adds	r3, r1, r3
 8002d76:	2100      	movs	r1, #0
 8002d78:	0d0a      	lsrs	r2, r1, #20
 8002d7a:	0028      	movs	r0, r5
 8002d7c:	0512      	lsls	r2, r2, #20
 8002d7e:	4d1c      	ldr	r5, [pc, #112]	; (8002df0 <__aeabi_f2d+0x98>)
 8002d80:	4332      	orrs	r2, r6
 8002d82:	055b      	lsls	r3, r3, #21
 8002d84:	402a      	ands	r2, r5
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	07e4      	lsls	r4, r4, #31
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	4323      	orrs	r3, r4
 8002d92:	0019      	movs	r1, r3
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
 8002d96:	2900      	cmp	r1, #0
 8002d98:	d114      	bne.n	8002dc4 <__aeabi_f2d+0x6c>
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	d01e      	beq.n	8002ddc <__aeabi_f2d+0x84>
 8002d9e:	0028      	movs	r0, r5
 8002da0:	f000 f8b0 	bl	8002f04 <__clzsi2>
 8002da4:	280a      	cmp	r0, #10
 8002da6:	dc1c      	bgt.n	8002de2 <__aeabi_f2d+0x8a>
 8002da8:	230b      	movs	r3, #11
 8002daa:	002a      	movs	r2, r5
 8002dac:	1a1b      	subs	r3, r3, r0
 8002dae:	40da      	lsrs	r2, r3
 8002db0:	0003      	movs	r3, r0
 8002db2:	3315      	adds	r3, #21
 8002db4:	409d      	lsls	r5, r3
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <__aeabi_f2d+0x9c>)
 8002db8:	0312      	lsls	r2, r2, #12
 8002dba:	1a1b      	subs	r3, r3, r0
 8002dbc:	055b      	lsls	r3, r3, #21
 8002dbe:	0b16      	lsrs	r6, r2, #12
 8002dc0:	0d5b      	lsrs	r3, r3, #21
 8002dc2:	e7d8      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002dc4:	2d00      	cmp	r5, #0
 8002dc6:	d006      	beq.n	8002dd6 <__aeabi_f2d+0x7e>
 8002dc8:	0b32      	lsrs	r2, r6, #12
 8002dca:	2680      	movs	r6, #128	; 0x80
 8002dcc:	0336      	lsls	r6, r6, #12
 8002dce:	076d      	lsls	r5, r5, #29
 8002dd0:	4316      	orrs	r6, r2
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <__aeabi_f2d+0xa0>)
 8002dd4:	e7cf      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <__aeabi_f2d+0xa0>)
 8002dd8:	2600      	movs	r6, #0
 8002dda:	e7cc      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2600      	movs	r6, #0
 8002de0:	e7c9      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002de2:	0003      	movs	r3, r0
 8002de4:	002a      	movs	r2, r5
 8002de6:	3b0b      	subs	r3, #11
 8002de8:	409a      	lsls	r2, r3
 8002dea:	2500      	movs	r5, #0
 8002dec:	e7e3      	b.n	8002db6 <__aeabi_f2d+0x5e>
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	800fffff 	.word	0x800fffff
 8002df4:	00000389 	.word	0x00000389
 8002df8:	000007ff 	.word	0x000007ff

08002dfc <__aeabi_d2f>:
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	004c      	lsls	r4, r1, #1
 8002e00:	0d64      	lsrs	r4, r4, #21
 8002e02:	030b      	lsls	r3, r1, #12
 8002e04:	1c62      	adds	r2, r4, #1
 8002e06:	0a5b      	lsrs	r3, r3, #9
 8002e08:	0f46      	lsrs	r6, r0, #29
 8002e0a:	0552      	lsls	r2, r2, #21
 8002e0c:	0fc9      	lsrs	r1, r1, #31
 8002e0e:	431e      	orrs	r6, r3
 8002e10:	00c5      	lsls	r5, r0, #3
 8002e12:	0d52      	lsrs	r2, r2, #21
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	dd29      	ble.n	8002e6c <__aeabi_d2f+0x70>
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <__aeabi_d2f+0xfc>)
 8002e1a:	18e7      	adds	r7, r4, r3
 8002e1c:	2ffe      	cmp	r7, #254	; 0xfe
 8002e1e:	dc1c      	bgt.n	8002e5a <__aeabi_d2f+0x5e>
 8002e20:	2f00      	cmp	r7, #0
 8002e22:	dd3b      	ble.n	8002e9c <__aeabi_d2f+0xa0>
 8002e24:	0180      	lsls	r0, r0, #6
 8002e26:	1e43      	subs	r3, r0, #1
 8002e28:	4198      	sbcs	r0, r3
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	00f3      	lsls	r3, r6, #3
 8002e2e:	0f6d      	lsrs	r5, r5, #29
 8002e30:	4303      	orrs	r3, r0
 8002e32:	432b      	orrs	r3, r5
 8002e34:	401a      	ands	r2, r3
 8002e36:	2a00      	cmp	r2, #0
 8002e38:	d004      	beq.n	8002e44 <__aeabi_d2f+0x48>
 8002e3a:	220f      	movs	r2, #15
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	2a04      	cmp	r2, #4
 8002e40:	d000      	beq.n	8002e44 <__aeabi_d2f+0x48>
 8002e42:	3304      	adds	r3, #4
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	04d2      	lsls	r2, r2, #19
 8002e48:	401a      	ands	r2, r3
 8002e4a:	d024      	beq.n	8002e96 <__aeabi_d2f+0x9a>
 8002e4c:	3701      	adds	r7, #1
 8002e4e:	b2fa      	uxtb	r2, r7
 8002e50:	2fff      	cmp	r7, #255	; 0xff
 8002e52:	d002      	beq.n	8002e5a <__aeabi_d2f+0x5e>
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	0a58      	lsrs	r0, r3, #9
 8002e58:	e001      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e5a:	22ff      	movs	r2, #255	; 0xff
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	0240      	lsls	r0, r0, #9
 8002e60:	05d2      	lsls	r2, r2, #23
 8002e62:	0a40      	lsrs	r0, r0, #9
 8002e64:	07c9      	lsls	r1, r1, #31
 8002e66:	4310      	orrs	r0, r2
 8002e68:	4308      	orrs	r0, r1
 8002e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6c:	4335      	orrs	r5, r6
 8002e6e:	2c00      	cmp	r4, #0
 8002e70:	d104      	bne.n	8002e7c <__aeabi_d2f+0x80>
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	d10a      	bne.n	8002e8c <__aeabi_d2f+0x90>
 8002e76:	2200      	movs	r2, #0
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e7f0      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e7c:	2d00      	cmp	r5, #0
 8002e7e:	d0ec      	beq.n	8002e5a <__aeabi_d2f+0x5e>
 8002e80:	2080      	movs	r0, #128	; 0x80
 8002e82:	03c0      	lsls	r0, r0, #15
 8002e84:	4330      	orrs	r0, r6
 8002e86:	22ff      	movs	r2, #255	; 0xff
 8002e88:	e7e9      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e8a:	2400      	movs	r4, #0
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	025b      	lsls	r3, r3, #9
 8002e90:	0a58      	lsrs	r0, r3, #9
 8002e92:	b2e2      	uxtb	r2, r4
 8002e94:	e7e3      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e96:	08db      	lsrs	r3, r3, #3
 8002e98:	003c      	movs	r4, r7
 8002e9a:	e7f8      	b.n	8002e8e <__aeabi_d2f+0x92>
 8002e9c:	003b      	movs	r3, r7
 8002e9e:	3317      	adds	r3, #23
 8002ea0:	dbf3      	blt.n	8002e8a <__aeabi_d2f+0x8e>
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	4333      	orrs	r3, r6
 8002ea8:	261e      	movs	r6, #30
 8002eaa:	1bf6      	subs	r6, r6, r7
 8002eac:	2e1f      	cmp	r6, #31
 8002eae:	dd14      	ble.n	8002eda <__aeabi_d2f+0xde>
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4252      	negs	r2, r2
 8002eb4:	1bd7      	subs	r7, r2, r7
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	40fa      	lsrs	r2, r7
 8002eba:	0017      	movs	r7, r2
 8002ebc:	2e20      	cmp	r6, #32
 8002ebe:	d004      	beq.n	8002eca <__aeabi_d2f+0xce>
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <__aeabi_d2f+0x100>)
 8002ec2:	4694      	mov	ip, r2
 8002ec4:	4464      	add	r4, ip
 8002ec6:	40a3      	lsls	r3, r4
 8002ec8:	431d      	orrs	r5, r3
 8002eca:	002b      	movs	r3, r5
 8002ecc:	1e5d      	subs	r5, r3, #1
 8002ece:	41ab      	sbcs	r3, r5
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	433b      	orrs	r3, r7
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	2700      	movs	r7, #0
 8002ed8:	e7ad      	b.n	8002e36 <__aeabi_d2f+0x3a>
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <__aeabi_d2f+0x104>)
 8002edc:	0028      	movs	r0, r5
 8002ede:	18a2      	adds	r2, r4, r2
 8002ee0:	4095      	lsls	r5, r2
 8002ee2:	4093      	lsls	r3, r2
 8002ee4:	1e6c      	subs	r4, r5, #1
 8002ee6:	41a5      	sbcs	r5, r4
 8002ee8:	40f0      	lsrs	r0, r6
 8002eea:	2207      	movs	r2, #7
 8002eec:	432b      	orrs	r3, r5
 8002eee:	4303      	orrs	r3, r0
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	2700      	movs	r7, #0
 8002ef4:	e79f      	b.n	8002e36 <__aeabi_d2f+0x3a>
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	fffffc80 	.word	0xfffffc80
 8002efc:	fffffca2 	.word	0xfffffca2
 8002f00:	fffffc82 	.word	0xfffffc82

08002f04 <__clzsi2>:
 8002f04:	211c      	movs	r1, #28
 8002f06:	2301      	movs	r3, #1
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	4298      	cmp	r0, r3
 8002f0c:	d301      	bcc.n	8002f12 <__clzsi2+0xe>
 8002f0e:	0c00      	lsrs	r0, r0, #16
 8002f10:	3910      	subs	r1, #16
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	4298      	cmp	r0, r3
 8002f16:	d301      	bcc.n	8002f1c <__clzsi2+0x18>
 8002f18:	0a00      	lsrs	r0, r0, #8
 8002f1a:	3908      	subs	r1, #8
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	4298      	cmp	r0, r3
 8002f20:	d301      	bcc.n	8002f26 <__clzsi2+0x22>
 8002f22:	0900      	lsrs	r0, r0, #4
 8002f24:	3904      	subs	r1, #4
 8002f26:	a202      	add	r2, pc, #8	; (adr r2, 8002f30 <__clzsi2+0x2c>)
 8002f28:	5c10      	ldrb	r0, [r2, r0]
 8002f2a:	1840      	adds	r0, r0, r1
 8002f2c:	4770      	bx	lr
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	02020304 	.word	0x02020304
 8002f34:	01010101 	.word	0x01010101
	...

08002f40 <__clzdi2>:
 8002f40:	b510      	push	{r4, lr}
 8002f42:	2900      	cmp	r1, #0
 8002f44:	d103      	bne.n	8002f4e <__clzdi2+0xe>
 8002f46:	f7ff ffdd 	bl	8002f04 <__clzsi2>
 8002f4a:	3020      	adds	r0, #32
 8002f4c:	e002      	b.n	8002f54 <__clzdi2+0x14>
 8002f4e:	1c08      	adds	r0, r1, #0
 8002f50:	f7ff ffd8 	bl	8002f04 <__clzsi2>
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)

08002f58 <__divdi3>:
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	464e      	mov	r6, r9
 8002f5c:	4657      	mov	r7, sl
 8002f5e:	46de      	mov	lr, fp
 8002f60:	4645      	mov	r5, r8
 8002f62:	b5e0      	push	{r5, r6, r7, lr}
 8002f64:	000f      	movs	r7, r1
 8002f66:	2100      	movs	r1, #0
 8002f68:	b083      	sub	sp, #12
 8002f6a:	0006      	movs	r6, r0
 8002f6c:	4689      	mov	r9, r1
 8002f6e:	2f00      	cmp	r7, #0
 8002f70:	da06      	bge.n	8002f80 <__divdi3+0x28>
 8002f72:	0039      	movs	r1, r7
 8002f74:	2700      	movs	r7, #0
 8002f76:	4246      	negs	r6, r0
 8002f78:	418f      	sbcs	r7, r1
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4249      	negs	r1, r1
 8002f7e:	4689      	mov	r9, r1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da07      	bge.n	8002f94 <__divdi3+0x3c>
 8002f84:	4649      	mov	r1, r9
 8002f86:	43c9      	mvns	r1, r1
 8002f88:	0010      	movs	r0, r2
 8002f8a:	4689      	mov	r9, r1
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	2300      	movs	r3, #0
 8002f90:	4242      	negs	r2, r0
 8002f92:	418b      	sbcs	r3, r1
 8002f94:	0034      	movs	r4, r6
 8002f96:	003d      	movs	r5, r7
 8002f98:	4692      	mov	sl, r2
 8002f9a:	4698      	mov	r8, r3
 8002f9c:	42bb      	cmp	r3, r7
 8002f9e:	d869      	bhi.n	8003074 <__divdi3+0x11c>
 8002fa0:	d066      	beq.n	8003070 <__divdi3+0x118>
 8002fa2:	4641      	mov	r1, r8
 8002fa4:	4650      	mov	r0, sl
 8002fa6:	f7ff ffcb 	bl	8002f40 <__clzdi2>
 8002faa:	4683      	mov	fp, r0
 8002fac:	0039      	movs	r1, r7
 8002fae:	0030      	movs	r0, r6
 8002fb0:	f7ff ffc6 	bl	8002f40 <__clzdi2>
 8002fb4:	465b      	mov	r3, fp
 8002fb6:	1a1b      	subs	r3, r3, r0
 8002fb8:	469c      	mov	ip, r3
 8002fba:	3b20      	subs	r3, #32
 8002fbc:	469b      	mov	fp, r3
 8002fbe:	d500      	bpl.n	8002fc2 <__divdi3+0x6a>
 8002fc0:	e075      	b.n	80030ae <__divdi3+0x156>
 8002fc2:	4651      	mov	r1, sl
 8002fc4:	4658      	mov	r0, fp
 8002fc6:	4081      	lsls	r1, r0
 8002fc8:	000b      	movs	r3, r1
 8002fca:	4651      	mov	r1, sl
 8002fcc:	4660      	mov	r0, ip
 8002fce:	4081      	lsls	r1, r0
 8002fd0:	000a      	movs	r2, r1
 8002fd2:	42bb      	cmp	r3, r7
 8002fd4:	d861      	bhi.n	800309a <__divdi3+0x142>
 8002fd6:	d05e      	beq.n	8003096 <__divdi3+0x13e>
 8002fd8:	0034      	movs	r4, r6
 8002fda:	003d      	movs	r5, r7
 8002fdc:	4659      	mov	r1, fp
 8002fde:	1aa4      	subs	r4, r4, r2
 8002fe0:	419d      	sbcs	r5, r3
 8002fe2:	2900      	cmp	r1, #0
 8002fe4:	da00      	bge.n	8002fe8 <__divdi3+0x90>
 8002fe6:	e07a      	b.n	80030de <__divdi3+0x186>
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2000      	movs	r0, #0
 8002fec:	2601      	movs	r6, #1
 8002fee:	9000      	str	r0, [sp, #0]
 8002ff0:	9101      	str	r1, [sp, #4]
 8002ff2:	4659      	mov	r1, fp
 8002ff4:	408e      	lsls	r6, r1
 8002ff6:	9601      	str	r6, [sp, #4]
 8002ff8:	4661      	mov	r1, ip
 8002ffa:	2601      	movs	r6, #1
 8002ffc:	408e      	lsls	r6, r1
 8002ffe:	4661      	mov	r1, ip
 8003000:	9600      	str	r6, [sp, #0]
 8003002:	2900      	cmp	r1, #0
 8003004:	d050      	beq.n	80030a8 <__divdi3+0x150>
 8003006:	07d9      	lsls	r1, r3, #31
 8003008:	0856      	lsrs	r6, r2, #1
 800300a:	085f      	lsrs	r7, r3, #1
 800300c:	430e      	orrs	r6, r1
 800300e:	4663      	mov	r3, ip
 8003010:	e00e      	b.n	8003030 <__divdi3+0xd8>
 8003012:	42af      	cmp	r7, r5
 8003014:	d101      	bne.n	800301a <__divdi3+0xc2>
 8003016:	42a6      	cmp	r6, r4
 8003018:	d80c      	bhi.n	8003034 <__divdi3+0xdc>
 800301a:	1ba4      	subs	r4, r4, r6
 800301c:	41bd      	sbcs	r5, r7
 800301e:	2101      	movs	r1, #1
 8003020:	1924      	adds	r4, r4, r4
 8003022:	416d      	adcs	r5, r5
 8003024:	2200      	movs	r2, #0
 8003026:	3b01      	subs	r3, #1
 8003028:	1864      	adds	r4, r4, r1
 800302a:	4155      	adcs	r5, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <__divdi3+0xe6>
 8003030:	42af      	cmp	r7, r5
 8003032:	d9ee      	bls.n	8003012 <__divdi3+0xba>
 8003034:	3b01      	subs	r3, #1
 8003036:	1924      	adds	r4, r4, r4
 8003038:	416d      	adcs	r5, r5
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f8      	bne.n	8003030 <__divdi3+0xd8>
 800303e:	9800      	ldr	r0, [sp, #0]
 8003040:	9901      	ldr	r1, [sp, #4]
 8003042:	465b      	mov	r3, fp
 8003044:	1900      	adds	r0, r0, r4
 8003046:	4169      	adcs	r1, r5
 8003048:	2b00      	cmp	r3, #0
 800304a:	db3d      	blt.n	80030c8 <__divdi3+0x170>
 800304c:	002e      	movs	r6, r5
 800304e:	40de      	lsrs	r6, r3
 8003050:	4663      	mov	r3, ip
 8003052:	002c      	movs	r4, r5
 8003054:	40dc      	lsrs	r4, r3
 8003056:	465b      	mov	r3, fp
 8003058:	2b00      	cmp	r3, #0
 800305a:	db4b      	blt.n	80030f4 <__divdi3+0x19c>
 800305c:	0034      	movs	r4, r6
 800305e:	465d      	mov	r5, fp
 8003060:	40ac      	lsls	r4, r5
 8003062:	0023      	movs	r3, r4
 8003064:	4664      	mov	r4, ip
 8003066:	40a6      	lsls	r6, r4
 8003068:	0032      	movs	r2, r6
 800306a:	1a80      	subs	r0, r0, r2
 800306c:	4199      	sbcs	r1, r3
 800306e:	e003      	b.n	8003078 <__divdi3+0x120>
 8003070:	42b2      	cmp	r2, r6
 8003072:	d996      	bls.n	8002fa2 <__divdi3+0x4a>
 8003074:	2000      	movs	r0, #0
 8003076:	2100      	movs	r1, #0
 8003078:	464b      	mov	r3, r9
 800307a:	2b00      	cmp	r3, #0
 800307c:	d004      	beq.n	8003088 <__divdi3+0x130>
 800307e:	0003      	movs	r3, r0
 8003080:	000c      	movs	r4, r1
 8003082:	2100      	movs	r1, #0
 8003084:	4258      	negs	r0, r3
 8003086:	41a1      	sbcs	r1, r4
 8003088:	b003      	add	sp, #12
 800308a:	bc3c      	pop	{r2, r3, r4, r5}
 800308c:	4690      	mov	r8, r2
 800308e:	4699      	mov	r9, r3
 8003090:	46a2      	mov	sl, r4
 8003092:	46ab      	mov	fp, r5
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003096:	42b1      	cmp	r1, r6
 8003098:	d99e      	bls.n	8002fd8 <__divdi3+0x80>
 800309a:	2100      	movs	r1, #0
 800309c:	2000      	movs	r0, #0
 800309e:	9000      	str	r0, [sp, #0]
 80030a0:	9101      	str	r1, [sp, #4]
 80030a2:	4661      	mov	r1, ip
 80030a4:	2900      	cmp	r1, #0
 80030a6:	d1ae      	bne.n	8003006 <__divdi3+0xae>
 80030a8:	9800      	ldr	r0, [sp, #0]
 80030aa:	9901      	ldr	r1, [sp, #4]
 80030ac:	e7e4      	b.n	8003078 <__divdi3+0x120>
 80030ae:	2320      	movs	r3, #32
 80030b0:	4662      	mov	r2, ip
 80030b2:	4651      	mov	r1, sl
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	40d9      	lsrs	r1, r3
 80030b8:	4640      	mov	r0, r8
 80030ba:	9100      	str	r1, [sp, #0]
 80030bc:	4661      	mov	r1, ip
 80030be:	4088      	lsls	r0, r1
 80030c0:	0003      	movs	r3, r0
 80030c2:	9900      	ldr	r1, [sp, #0]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	e780      	b.n	8002fca <__divdi3+0x72>
 80030c8:	4662      	mov	r2, ip
 80030ca:	2320      	movs	r3, #32
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	002a      	movs	r2, r5
 80030d0:	409a      	lsls	r2, r3
 80030d2:	0026      	movs	r6, r4
 80030d4:	0013      	movs	r3, r2
 80030d6:	4662      	mov	r2, ip
 80030d8:	40d6      	lsrs	r6, r2
 80030da:	431e      	orrs	r6, r3
 80030dc:	e7b8      	b.n	8003050 <__divdi3+0xf8>
 80030de:	4661      	mov	r1, ip
 80030e0:	2620      	movs	r6, #32
 80030e2:	2701      	movs	r7, #1
 80030e4:	1a76      	subs	r6, r6, r1
 80030e6:	2000      	movs	r0, #0
 80030e8:	2100      	movs	r1, #0
 80030ea:	40f7      	lsrs	r7, r6
 80030ec:	9000      	str	r0, [sp, #0]
 80030ee:	9101      	str	r1, [sp, #4]
 80030f0:	9701      	str	r7, [sp, #4]
 80030f2:	e781      	b.n	8002ff8 <__divdi3+0xa0>
 80030f4:	4667      	mov	r7, ip
 80030f6:	2320      	movs	r3, #32
 80030f8:	4662      	mov	r2, ip
 80030fa:	0035      	movs	r5, r6
 80030fc:	40bc      	lsls	r4, r7
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	40dd      	lsrs	r5, r3
 8003102:	0023      	movs	r3, r4
 8003104:	432b      	orrs	r3, r5
 8003106:	e7ad      	b.n	8003064 <__divdi3+0x10c>

08003108 <NVIC_SystemReset>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003108:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <NVIC_SystemReset+0x14>)
 800310e:	4a04      	ldr	r2, [pc, #16]	; (8003120 <NVIC_SystemReset+0x18>)
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	e7fd      	b.n	8003116 <NVIC_SystemReset+0xe>
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	e000ed00 	.word	0xe000ed00
 8003120:	05fa0004 	.word	0x05fa0004

08003124 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
return 0;
}
 8003124:	2000      	movs	r0, #0
 8003126:	4770      	bx	lr

08003128 <resetCommand>:
#endif

/*-----------------------------------------------------------*/

static portBASE_TYPE resetCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8003128:	b510      	push	{r4, lr}
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800312a:	2800      	cmp	r0, #0
 800312c:	d101      	bne.n	8003132 <resetCommand+0xa>
 800312e:	b672      	cpsid	i
 8003130:	e7fe      	b.n	8003130 <resetCommand+0x8>

	NVIC_SystemReset();	
 8003132:	f7ff ffe9 	bl	8003108 <NVIC_SystemReset>
	...

08003138 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	0004      	movs	r4, r0
 800313e:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8003144:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8003146:	2800      	cmp	r0, #0
 8003148:	d101      	bne.n	800314e <setBaudrateCommand+0x16>
 800314a:	b672      	cpsid	i
 800314c:	e7fe      	b.n	800314c <setBaudrateCommand+0x14>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800314e:	aa01      	add	r2, sp, #4
 8003150:	2101      	movs	r1, #1
 8003152:	0028      	movs	r0, r5
 8003154:	f00b fcd0 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8003158:	2300      	movs	r3, #0
 800315a:	56c3      	ldrsb	r3, [r0, r3]
 800315c:	2b70      	cmp	r3, #112	; 0x70
 800315e:	d00c      	beq.n	800317a <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8003160:	466a      	mov	r2, sp
 8003162:	2102      	movs	r1, #2
 8003164:	0028      	movs	r0, r5
 8003166:	f00b fcc7 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 800316a:	f010 fe12 	bl	8013d92 <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800316e:	2213      	movs	r2, #19
 8003170:	490f      	ldr	r1, [pc, #60]	; (80031b0 <setBaudrateCommand+0x78>)
 8003172:	0020      	movs	r0, r4
 8003174:	f011 f897 	bl	80142a6 <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8003178:	e016      	b.n	80031a8 <setBaudrateCommand+0x70>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800317a:	3001      	adds	r0, #1
 800317c:	f010 fe09 	bl	8013d92 <atol>
 8003180:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8003182:	466a      	mov	r2, sp
 8003184:	2102      	movs	r1, #2
 8003186:	0028      	movs	r0, r5
 8003188:	f00b fcb6 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 800318c:	f010 fe01 	bl	8013d92 <atol>
 8003190:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 8003192:	b2f0      	uxtb	r0, r6
 8003194:	0029      	movs	r1, r5
 8003196:	f00a ff37 	bl	800e008 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 800319a:	23ff      	movs	r3, #255	; 0xff
 800319c:	4033      	ands	r3, r6
 800319e:	002a      	movs	r2, r5
 80031a0:	4904      	ldr	r1, [pc, #16]	; (80031b4 <setBaudrateCommand+0x7c>)
 80031a2:	0020      	movs	r0, r4
 80031a4:	f011 fab4 	bl	8014710 <sprintf>
}
 80031a8:	2000      	movs	r0, #0
 80031aa:	b002      	add	sp, #8
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	08019d1c 	.word	0x08019d1c
 80031b4:	08019cf4 	.word	0x08019cf4

080031b8 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 80031b8:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d101      	bne.n	80031c2 <flashsizeCommand+0xa>
 80031be:	b672      	cpsid	i
 80031c0:	e7fe      	b.n	80031c0 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 80031c2:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <flashsizeCommand+0x18>)
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	4903      	ldr	r1, [pc, #12]	; (80031d4 <flashsizeCommand+0x1c>)
 80031c8:	f011 faa2 	bl	8014710 <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 80031cc:	2000      	movs	r0, #0
 80031ce:	bd10      	pop	{r4, pc}
 80031d0:	1ffff7cc 	.word	0x1ffff7cc
 80031d4:	08019494 	.word	0x08019494

080031d8 <pingCommand>:
{
 80031d8:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 80031da:	2800      	cmp	r0, #0
 80031dc:	d01e      	beq.n	800321c <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <pingCommand+0x5c>)
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	0093      	lsls	r3, r2, #2
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4913      	ldr	r1, [pc, #76]	; (8003238 <pingCommand+0x60>)
 80031ea:	5c5b      	ldrb	r3, [r3, r1]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d117      	bne.n	8003220 <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 80031f0:	4912      	ldr	r1, [pc, #72]	; (800323c <pingCommand+0x64>)
 80031f2:	f011 fa8d 	bl	8014710 <sprintf>
	RTOS_IND_blink(200);	
 80031f6:	2580      	movs	r5, #128	; 0x80
 80031f8:	012d      	lsls	r5, r5, #4
 80031fa:	2490      	movs	r4, #144	; 0x90
 80031fc:	05e4      	lsls	r4, r4, #23
 80031fe:	2201      	movs	r2, #1
 8003200:	0029      	movs	r1, r5
 8003202:	0020      	movs	r0, r4
 8003204:	f00e fc56 	bl	8011ab4 <HAL_GPIO_WritePin>
 8003208:	20c8      	movs	r0, #200	; 0xc8
 800320a:	f00b fb5c 	bl	800e8c6 <osDelay>
 800320e:	2200      	movs	r2, #0
 8003210:	0029      	movs	r1, r5
 8003212:	0020      	movs	r0, r4
 8003214:	f00e fc4e 	bl	8011ab4 <HAL_GPIO_WritePin>
}
 8003218:	2000      	movs	r0, #0
 800321a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 800321c:	b672      	cpsid	i
 800321e:	e7fe      	b.n	800321e <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 8003220:	0093      	lsls	r3, r2, #2
 8003222:	189b      	adds	r3, r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4904      	ldr	r1, [pc, #16]	; (8003238 <pingCommand+0x60>)
 8003228:	185b      	adds	r3, r3, r1
 800322a:	4905      	ldr	r1, [pc, #20]	; (8003240 <pingCommand+0x68>)
 800322c:	f011 fa70 	bl	8014710 <sprintf>
 8003230:	e7e1      	b.n	80031f6 <pingCommand+0x1e>
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	20001298 	.word	0x20001298
 8003238:	20001194 	.word	0x20001194
 800323c:	08019974 	.word	0x08019974
 8003240:	08019988 	.word	0x08019988

08003244 <StreamTimerCallback>:
{
 8003244:	b510      	push	{r4, lr}
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8003246:	f00d f989 	bl	801055c <pvTimerGetTimerID>
	StopStreamDMA(tid);
 800324a:	b2c4      	uxtb	r4, r0
 800324c:	0020      	movs	r0, r4
 800324e:	f007 fb3d 	bl	800a8cc <StopStreamDMA>
	SwitchStreamDMAToMsg(tid);
 8003252:	0020      	movs	r0, r4
 8003254:	f007 fb68 	bl	800a928 <SwitchStreamDMAToMsg>
}
 8003258:	bd10      	pop	{r4, pc}
	...

0800325c <snipCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE snipCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 800325c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325e:	46d6      	mov	lr, sl
 8003260:	464f      	mov	r7, r9
 8003262:	4646      	mov	r6, r8
 8003264:	b5c0      	push	{r6, r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	0004      	movs	r4, r0
	static const int8_t *pcMessageSnipButtonEventPressed = ( int8_t * ) "%sif b%d.pressed for %d";
	static const int8_t *pcMessageSnipButtonEventReleased = ( int8_t * ) "%sif b%d.released for %d";	
	static const int8_t *pcMessageSnipModuleParamConst = ( int8_t * ) "%sif %s %s %.1f";
	static const int8_t *pcMessageCmds = ( int8_t * ) "%s\n\r\t%s";
	static const int8_t *pcMessageEnd = ( int8_t * ) "\n\rend if\n\n\r";
	char status[2][7] = {"Paused", "Active"};
 800326a:	aa06      	add	r2, sp, #24
 800326c:	4b7a      	ldr	r3, [pc, #488]	; (8003458 <snipCommand+0x1fc>)
 800326e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003270:	c223      	stmia	r2!, {r0, r1, r5}
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	8013      	strh	r3, [r2, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8003276:	2c00      	cmp	r4, #0
 8003278:	d101      	bne.n	800327e <snipCommand+0x22>
 800327a:	b672      	cpsid	i
 800327c:	e7fe      	b.n	800327c <snipCommand+0x20>
	
	/* Respond to the command */
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 800327e:	4b77      	ldr	r3, [pc, #476]	; (800345c <snipCommand+0x200>)
 8003280:	7818      	ldrb	r0, [r3, #0]
 8003282:	2301      	movs	r3, #1
 8003284:	425b      	negs	r3, r3
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	3333      	adds	r3, #51	; 0x33
 800328a:	2237      	movs	r2, #55	; 0x37
 800328c:	4974      	ldr	r1, [pc, #464]	; (8003460 <snipCommand+0x204>)
 800328e:	f00a fe4d 	bl	800df2c <writePxMutex>
	
	/* Go through all stored Snippets */
	uint8_t count = 1;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8003292:	4b74      	ldr	r3, [pc, #464]	; (8003464 <snipCommand+0x208>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d100      	bne.n	800329c <snipCommand+0x40>
 800329a:	e0d0      	b.n	800343e <snipCommand+0x1e2>
 800329c:	2500      	movs	r5, #0
  {
		if (snippets[s].cond.conditionType)
 800329e:	4b72      	ldr	r3, [pc, #456]	; (8003468 <snipCommand+0x20c>)
 80032a0:	4698      	mov	r8, r3
 80032a2:	e0ba      	b.n	800341a <snipCommand+0x1be>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 80032a4:	4b70      	ldr	r3, [pc, #448]	; (8003468 <snipCommand+0x20c>)
 80032a6:	4699      	mov	r9, r3
 80032a8:	00ab      	lsls	r3, r5, #2
 80032aa:	469a      	mov	sl, r3
 80032ac:	195b      	adds	r3, r3, r5
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	444b      	add	r3, r9
 80032b2:	7c1a      	ldrb	r2, [r3, #16]
 80032b4:	00d3      	lsls	r3, r2, #3
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	aa06      	add	r2, sp, #24
 80032ba:	4694      	mov	ip, r2
 80032bc:	4463      	add	r3, ip
 80032be:	003a      	movs	r2, r7
 80032c0:	496a      	ldr	r1, [pc, #424]	; (800346c <snipCommand+0x210>)
 80032c2:	0020      	movs	r0, r4
 80032c4:	f011 fa24 	bl	8014710 <sprintf>
		
		// Parse conditions
		switch (snippets[s].cond.conditionType)
 80032c8:	4653      	mov	r3, sl
 80032ca:	195b      	adds	r3, r3, r5
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	464a      	mov	r2, r9
 80032d0:	5c9b      	ldrb	r3, [r3, r2]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d02d      	beq.n	8003332 <snipCommand+0xd6>
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d000      	beq.n	80032dc <snipCommand+0x80>
 80032da:	e0a9      	b.n	8003430 <snipCommand+0x1d4>
				
				break;
				
			case SNIP_COND_MODULE_PARAM_CONST:
				// Get the module parameter, math operator and constant values. 
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 80032dc:	00a9      	lsls	r1, r5, #2
 80032de:	1949      	adds	r1, r1, r5
 80032e0:	0089      	lsls	r1, r1, #2
 80032e2:	3106      	adds	r1, #6
 80032e4:	4b60      	ldr	r3, [pc, #384]	; (8003468 <snipCommand+0x20c>)
 80032e6:	4699      	mov	r9, r3
 80032e8:	4449      	add	r1, r9
 80032ea:	2204      	movs	r2, #4
 80032ec:	a805      	add	r0, sp, #20
 80032ee:	f010 ffda 	bl	80142a6 <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 80032f2:	00ad      	lsls	r5, r5, #2
 80032f4:	19ad      	adds	r5, r5, r6
 80032f6:	00ad      	lsls	r5, r5, #2
 80032f8:	444d      	add	r5, r9
 80032fa:	78ea      	ldrb	r2, [r5, #3]
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0053      	lsls	r3, r2, #1
 8003300:	189b      	adds	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4a5a      	ldr	r2, [pc, #360]	; (8003470 <snipCommand+0x214>)
 8003306:	18d3      	adds	r3, r2, r3
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	4699      	mov	r9, r3
 800330c:	9805      	ldr	r0, [sp, #20]
 800330e:	f7ff fd23 	bl	8002d58 <__aeabi_f2d>
 8003312:	9002      	str	r0, [sp, #8]
 8003314:	9103      	str	r1, [sp, #12]
 8003316:	786b      	ldrb	r3, [r5, #1]
 8003318:	3b01      	subs	r3, #1
 800331a:	005a      	lsls	r2, r3, #1
 800331c:	18d2      	adds	r2, r2, r3
 800331e:	4b55      	ldr	r3, [pc, #340]	; (8003474 <snipCommand+0x218>)
 8003320:	189b      	adds	r3, r3, r2
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	464b      	mov	r3, r9
 8003326:	0022      	movs	r2, r4
 8003328:	4953      	ldr	r1, [pc, #332]	; (8003478 <snipCommand+0x21c>)
 800332a:	0020      	movs	r0, r4
 800332c:	f011 f9f0 	bl	8014710 <sprintf>
				break;
 8003330:	e07e      	b.n	8003430 <snipCommand+0x1d4>
				switch (snippets[s].cond.buffer1[1])
 8003332:	00ab      	lsls	r3, r5, #2
 8003334:	195b      	adds	r3, r3, r5
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4a4b      	ldr	r2, [pc, #300]	; (8003468 <snipCommand+0x20c>)
 800333a:	18d3      	adds	r3, r2, r3
 800333c:	78db      	ldrb	r3, [r3, #3]
 800333e:	3b05      	subs	r3, #5
 8003340:	b2da      	uxtb	r2, r3
 8003342:	2a09      	cmp	r2, #9
 8003344:	d874      	bhi.n	8003430 <snipCommand+0x1d4>
 8003346:	0093      	lsls	r3, r2, #2
 8003348:	4a4c      	ldr	r2, [pc, #304]	; (800347c <snipCommand+0x220>)
 800334a:	58d3      	ldr	r3, [r2, r3]
 800334c:	469f      	mov	pc, r3
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 800334e:	2314      	movs	r3, #20
 8003350:	436b      	muls	r3, r5
 8003352:	4a45      	ldr	r2, [pc, #276]	; (8003468 <snipCommand+0x20c>)
 8003354:	18d2      	adds	r2, r2, r3
 8003356:	7893      	ldrb	r3, [r2, #2]
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	9200      	str	r2, [sp, #0]
 800335c:	0022      	movs	r2, r4
 800335e:	4948      	ldr	r1, [pc, #288]	; (8003480 <snipCommand+0x224>)
 8003360:	0020      	movs	r0, r4
 8003362:	f011 f9d5 	bl	8014710 <sprintf>
        		break;
 8003366:	e063      	b.n	8003430 <snipCommand+0x1d4>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8003368:	2314      	movs	r3, #20
 800336a:	436b      	muls	r3, r5
 800336c:	4a3e      	ldr	r2, [pc, #248]	; (8003468 <snipCommand+0x20c>)
 800336e:	18d2      	adds	r2, r2, r3
 8003370:	7893      	ldrb	r3, [r2, #2]
 8003372:	68d2      	ldr	r2, [r2, #12]
 8003374:	9200      	str	r2, [sp, #0]
 8003376:	0022      	movs	r2, r4
 8003378:	4942      	ldr	r1, [pc, #264]	; (8003484 <snipCommand+0x228>)
 800337a:	0020      	movs	r0, r4
 800337c:	f011 f9c8 	bl	8014710 <sprintf>
        		break;
 8003380:	e056      	b.n	8003430 <snipCommand+0x1d4>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 8003382:	2314      	movs	r3, #20
 8003384:	436b      	muls	r3, r5
 8003386:	4a38      	ldr	r2, [pc, #224]	; (8003468 <snipCommand+0x20c>)
 8003388:	18d2      	adds	r2, r2, r3
 800338a:	7893      	ldrb	r3, [r2, #2]
 800338c:	68d1      	ldr	r1, [r2, #12]
 800338e:	9101      	str	r1, [sp, #4]
 8003390:	7912      	ldrb	r2, [r2, #4]
 8003392:	9200      	str	r2, [sp, #0]
 8003394:	0022      	movs	r2, r4
 8003396:	493c      	ldr	r1, [pc, #240]	; (8003488 <snipCommand+0x22c>)
 8003398:	0020      	movs	r0, r4
 800339a:	f011 f9b9 	bl	8014710 <sprintf>
        		break;
 800339e:	e047      	b.n	8003430 <snipCommand+0x1d4>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 80033a0:	2314      	movs	r3, #20
 80033a2:	436b      	muls	r3, r5
 80033a4:	4a30      	ldr	r2, [pc, #192]	; (8003468 <snipCommand+0x20c>)
 80033a6:	18d2      	adds	r2, r2, r3
 80033a8:	7893      	ldrb	r3, [r2, #2]
 80033aa:	68d1      	ldr	r1, [r2, #12]
 80033ac:	9101      	str	r1, [sp, #4]
 80033ae:	7912      	ldrb	r2, [r2, #4]
 80033b0:	9200      	str	r2, [sp, #0]
 80033b2:	0022      	movs	r2, r4
 80033b4:	4935      	ldr	r1, [pc, #212]	; (800348c <snipCommand+0x230>)
 80033b6:	0020      	movs	r0, r4
 80033b8:	f011 f9aa 	bl	8014710 <sprintf>
        		break;						
 80033bc:	e038      	b.n	8003430 <snipCommand+0x1d4>
		}
		
		// Parse commands
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
		{
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 80033be:	4b34      	ldr	r3, [pc, #208]	; (8003490 <snipCommand+0x234>)
 80033c0:	0022      	movs	r2, r4
 80033c2:	4934      	ldr	r1, [pc, #208]	; (8003494 <snipCommand+0x238>)
 80033c4:	0020      	movs	r0, r4
 80033c6:	f011 f9a3 	bl	8014710 <sprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 80033ca:	4831      	ldr	r0, [pc, #196]	; (8003490 <snipCommand+0x234>)
 80033cc:	f7fc fea4 	bl	8000118 <strlen>
 80033d0:	0002      	movs	r2, r0
 80033d2:	2100      	movs	r1, #0
 80033d4:	482e      	ldr	r0, [pc, #184]	; (8003490 <snipCommand+0x234>)
 80033d6:	f010 ff6f 	bl	80142b8 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 80033da:	0029      	movs	r1, r5
 80033dc:	68f0      	ldr	r0, [r6, #12]
 80033de:	f007 f94b 	bl	800a678 <ParseSnippetCommand>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d1eb      	bne.n	80033be <snipCommand+0x162>
		}
		
		// Finish and write the buffer
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 80033e6:	0020      	movs	r0, r4
 80033e8:	f7fc fe96 	bl	8000118 <strlen>
 80033ec:	1820      	adds	r0, r4, r0
 80033ee:	220c      	movs	r2, #12
 80033f0:	4929      	ldr	r1, [pc, #164]	; (8003498 <snipCommand+0x23c>)
 80033f2:	f010 ff58 	bl	80142a6 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80033f6:	0020      	movs	r0, r4
 80033f8:	f7fc fe8e 	bl	8000118 <strlen>
 80033fc:	b282      	uxth	r2, r0
 80033fe:	4b17      	ldr	r3, [pc, #92]	; (800345c <snipCommand+0x200>)
 8003400:	7818      	ldrb	r0, [r3, #0]
 8003402:	2301      	movs	r3, #1
 8003404:	425b      	negs	r3, r3
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	3333      	adds	r3, #51	; 0x33
 800340a:	0021      	movs	r1, r4
 800340c:	f00a fd8e 	bl	800df2c <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8003410:	003d      	movs	r5, r7
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <snipCommand+0x208>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	42bb      	cmp	r3, r7
 8003418:	d911      	bls.n	800343e <snipCommand+0x1e2>
 800341a:	1c6f      	adds	r7, r5, #1
 800341c:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 800341e:	002e      	movs	r6, r5
 8003420:	00ab      	lsls	r3, r5, #2
 8003422:	195b      	adds	r3, r3, r5
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4642      	mov	r2, r8
 8003428:	5c9b      	ldrb	r3, [r3, r2]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d000      	beq.n	8003430 <snipCommand+0x1d4>
 800342e:	e739      	b.n	80032a4 <snipCommand+0x48>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8003430:	4d17      	ldr	r5, [pc, #92]	; (8003490 <snipCommand+0x234>)
 8003432:	00b3      	lsls	r3, r6, #2
 8003434:	199b      	adds	r3, r3, r6
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4e0b      	ldr	r6, [pc, #44]	; (8003468 <snipCommand+0x20c>)
 800343a:	18f6      	adds	r6, r6, r3
 800343c:	e7cd      	b.n	80033da <snipCommand+0x17e>
		
		++count;
	}

	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 800343e:	22a7      	movs	r2, #167	; 0xa7
 8003440:	4916      	ldr	r1, [pc, #88]	; (800349c <snipCommand+0x240>)
 8003442:	0020      	movs	r0, r4
 8003444:	f010 ff2f 	bl	80142a6 <memcpy>

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8003448:	2000      	movs	r0, #0
 800344a:	b00a      	add	sp, #40	; 0x28
 800344c:	bc1c      	pop	{r2, r3, r4}
 800344e:	4690      	mov	r8, r2
 8003450:	4699      	mov	r9, r3
 8003452:	46a2      	mov	sl, r4
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	08018b10 	.word	0x08018b10
 800345c:	20000abf 	.word	0x20000abf
 8003460:	08019f38 	.word	0x08019f38
 8003464:	200014e3 	.word	0x200014e3
 8003468:	20006a88 	.word	0x20006a88
 800346c:	08019f70 	.word	0x08019f70
 8003470:	20000040 	.word	0x20000040
 8003474:	08019788 	.word	0x08019788
 8003478:	08019fdc 	.word	0x08019fdc
 800347c:	08018c84 	.word	0x08018c84
 8003480:	08019f7c 	.word	0x08019f7c
 8003484:	08019f90 	.word	0x08019f90
 8003488:	08019fa8 	.word	0x08019fa8
 800348c:	08019fc0 	.word	0x08019fc0
 8003490:	20000f34 	.word	0x20000f34
 8003494:	08019fec 	.word	0x08019fec
 8003498:	08019ff4 	.word	0x08019ff4
 800349c:	0801a000 	.word	0x0801a000

080034a0 <idcodeCommand>:
{	
 80034a0:	b510      	push	{r4, lr}
 80034a2:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80034a4:	d101      	bne.n	80034aa <idcodeCommand+0xa>
 80034a6:	b672      	cpsid	i
 80034a8:	e7fe      	b.n	80034a8 <idcodeCommand+0x8>
	dev = HAL_GetDEVID();
 80034aa:	f00d fa4b 	bl	8010944 <HAL_GetDEVID>
	switch (dev)
 80034ae:	0403      	lsls	r3, r0, #16
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <idcodeCommand+0x80>)
 80034b4:	4694      	mov	ip, r2
 80034b6:	4463      	add	r3, ip
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d82a      	bhi.n	8003512 <idcodeCommand+0x72>
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4a19      	ldr	r2, [pc, #100]	; (8003524 <idcodeCommand+0x84>)
 80034c0:	58d3      	ldr	r3, [r2, r3]
 80034c2:	469f      	mov	pc, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 80034c4:	4a18      	ldr	r2, [pc, #96]	; (8003528 <idcodeCommand+0x88>)
 80034c6:	4919      	ldr	r1, [pc, #100]	; (800352c <idcodeCommand+0x8c>)
 80034c8:	0020      	movs	r0, r4
 80034ca:	f011 f921 	bl	8014710 <sprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 80034ce:	f00d fa33 	bl	8010938 <HAL_GetREVID>
 80034d2:	0b03      	lsrs	r3, r0, #12
 80034d4:	0022      	movs	r2, r4
 80034d6:	4916      	ldr	r1, [pc, #88]	; (8003530 <idcodeCommand+0x90>)
 80034d8:	0020      	movs	r0, r4
 80034da:	f011 f919 	bl	8014710 <sprintf>
}
 80034de:	2000      	movs	r0, #0
 80034e0:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 80034e2:	4a14      	ldr	r2, [pc, #80]	; (8003534 <idcodeCommand+0x94>)
 80034e4:	4911      	ldr	r1, [pc, #68]	; (800352c <idcodeCommand+0x8c>)
 80034e6:	0020      	movs	r0, r4
 80034e8:	f011 f912 	bl	8014710 <sprintf>
  		break;
 80034ec:	e7ef      	b.n	80034ce <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <idcodeCommand+0x98>)
 80034f0:	490e      	ldr	r1, [pc, #56]	; (800352c <idcodeCommand+0x8c>)
 80034f2:	0020      	movs	r0, r4
 80034f4:	f011 f90c 	bl	8014710 <sprintf>
  		break;
 80034f8:	e7e9      	b.n	80034ce <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 80034fa:	4a10      	ldr	r2, [pc, #64]	; (800353c <idcodeCommand+0x9c>)
 80034fc:	490b      	ldr	r1, [pc, #44]	; (800352c <idcodeCommand+0x8c>)
 80034fe:	0020      	movs	r0, r4
 8003500:	f011 f906 	bl	8014710 <sprintf>
  		break;
 8003504:	e7e3      	b.n	80034ce <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 8003506:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <idcodeCommand+0xa0>)
 8003508:	4908      	ldr	r1, [pc, #32]	; (800352c <idcodeCommand+0x8c>)
 800350a:	0020      	movs	r0, r4
 800350c:	f011 f900 	bl	8014710 <sprintf>
  		break;
 8003510:	e7dd      	b.n	80034ce <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 8003512:	4a0c      	ldr	r2, [pc, #48]	; (8003544 <idcodeCommand+0xa4>)
 8003514:	4905      	ldr	r1, [pc, #20]	; (800352c <idcodeCommand+0x8c>)
 8003516:	0020      	movs	r0, r4
 8003518:	f011 f8fa 	bl	8014710 <sprintf>
  		break;
 800351c:	e7d7      	b.n	80034ce <idcodeCommand+0x2e>
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	fffffbc0 	.word	0xfffffbc0
 8003524:	08018cac 	.word	0x08018cac
 8003528:	08019684 	.word	0x08019684
 800352c:	08019690 	.word	0x08019690
 8003530:	080196dc 	.word	0x080196dc
 8003534:	080196a4 	.word	0x080196a4
 8003538:	080196b0 	.word	0x080196b0
 800353c:	080196bc 	.word	0x080196bc
 8003540:	080196c8 	.word	0x080196c8
 8003544:	080196d4 	.word	0x080196d4

08003548 <uuidCommand>:
{
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 800354c:	d101      	bne.n	8003552 <uuidCommand+0xa>
 800354e:	b672      	cpsid	i
 8003550:	e7fe      	b.n	8003550 <uuidCommand+0x8>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 8003552:	220e      	movs	r2, #14
 8003554:	4911      	ldr	r1, [pc, #68]	; (800359c <uuidCommand+0x54>)
 8003556:	f010 fea6 	bl	80142a6 <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <uuidCommand+0x58>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4d11      	ldr	r5, [pc, #68]	; (80035a4 <uuidCommand+0x5c>)
 8003560:	0022      	movs	r2, r4
 8003562:	0029      	movs	r1, r5
 8003564:	0020      	movs	r0, r4
 8003566:	f011 f8d3 	bl	8014710 <sprintf>
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <uuidCommand+0x60>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	0022      	movs	r2, r4
 8003570:	0029      	movs	r1, r5
 8003572:	0020      	movs	r0, r4
 8003574:	f011 f8cc 	bl	8014710 <sprintf>
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <uuidCommand+0x64>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	0022      	movs	r2, r4
 800357e:	0029      	movs	r1, r5
 8003580:	0020      	movs	r0, r4
 8003582:	f011 f8c5 	bl	8014710 <sprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 8003586:	0020      	movs	r0, r4
 8003588:	f7fc fdc6 	bl	8000118 <strlen>
 800358c:	1820      	adds	r0, r4, r0
 800358e:	2203      	movs	r2, #3
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <uuidCommand+0x68>)
 8003592:	f010 fe88 	bl	80142a6 <memcpy>
}
 8003596:	2000      	movs	r0, #0
 8003598:	bd70      	pop	{r4, r5, r6, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	0801af8c 	.word	0x0801af8c
 80035a0:	1ffff7ac 	.word	0x1ffff7ac
 80035a4:	0801af9c 	.word	0x0801af9c
 80035a8:	1ffff7b0 	.word	0x1ffff7b0
 80035ac:	1ffff7b4 	.word	0x1ffff7b4
 80035b0:	0801a54c 	.word	0x0801a54c

080035b4 <getCommand>:
{
 80035b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b6:	46c6      	mov	lr, r8
 80035b8:	b500      	push	{lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	0004      	movs	r4, r0
 80035be:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d101      	bne.n	80035ce <getCommand+0x1a>
 80035ca:	b672      	cpsid	i
 80035cc:	e7fe      	b.n	80035cc <getCommand+0x18>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80035ce:	aa01      	add	r2, sp, #4
 80035d0:	2101      	movs	r1, #1
 80035d2:	0030      	movs	r0, r6
 80035d4:	f00b fa90 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80035d8:	0005      	movs	r5, r0
 80035da:	4b74      	ldr	r3, [pc, #464]	; (80037ac <getCommand+0x1f8>)
 80035dc:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 80035de:	2204      	movs	r2, #4
 80035e0:	4973      	ldr	r1, [pc, #460]	; (80037b0 <getCommand+0x1fc>)
 80035e2:	f011 f8d9 	bl	8014798 <strncmp>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d000      	beq.n	80035ec <getCommand+0x38>
 80035ea:	e090      	b.n	800370e <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 80035ec:	1d2f      	adds	r7, r5, #4
 80035ee:	9b01      	ldr	r3, [sp, #4]
 80035f0:	1f1e      	subs	r6, r3, #4
 80035f2:	0032      	movs	r2, r6
 80035f4:	496f      	ldr	r1, [pc, #444]	; (80037b4 <getCommand+0x200>)
 80035f6:	0038      	movs	r0, r7
 80035f8:	f011 f8ce 	bl	8014798 <strncmp>
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d11e      	bne.n	800363e <getCommand+0x8a>
			if (BOS.response == BOS_RESPONSE_ALL)
 8003600:	4b6d      	ldr	r3, [pc, #436]	; (80037b8 <getCommand+0x204>)
 8003602:	799b      	ldrb	r3, [r3, #6]
 8003604:	2b60      	cmp	r3, #96	; 0x60
 8003606:	d109      	bne.n	800361c <getCommand+0x68>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8003608:	4a6c      	ldr	r2, [pc, #432]	; (80037bc <getCommand+0x208>)
 800360a:	496d      	ldr	r1, [pc, #436]	; (80037c0 <getCommand+0x20c>)
 800360c:	0020      	movs	r0, r4
 800360e:	f011 f87f 	bl	8014710 <sprintf>
}
 8003612:	2000      	movs	r0, #0
 8003614:	b002      	add	sp, #8
 8003616:	bc04      	pop	{r2}
 8003618:	4690      	mov	r8, r2
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (BOS.response == BOS_RESPONSE_MSG)
 800361c:	2b20      	cmp	r3, #32
 800361e:	d105      	bne.n	800362c <getCommand+0x78>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8003620:	4a68      	ldr	r2, [pc, #416]	; (80037c4 <getCommand+0x210>)
 8003622:	4967      	ldr	r1, [pc, #412]	; (80037c0 <getCommand+0x20c>)
 8003624:	0020      	movs	r0, r4
 8003626:	f011 f873 	bl	8014710 <sprintf>
 800362a:	e7f2      	b.n	8003612 <getCommand+0x5e>
			else if (BOS.response == BOS_RESPONSE_NONE)
 800362c:	2b00      	cmp	r3, #0
 800362e:	d000      	beq.n	8003632 <getCommand+0x7e>
 8003630:	e0b6      	b.n	80037a0 <getCommand+0x1ec>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8003632:	4a65      	ldr	r2, [pc, #404]	; (80037c8 <getCommand+0x214>)
 8003634:	4962      	ldr	r1, [pc, #392]	; (80037c0 <getCommand+0x20c>)
 8003636:	0020      	movs	r0, r4
 8003638:	f011 f86a 	bl	8014710 <sprintf>
 800363c:	e7e9      	b.n	8003612 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 800363e:	0032      	movs	r2, r6
 8003640:	4962      	ldr	r1, [pc, #392]	; (80037cc <getCommand+0x218>)
 8003642:	0038      	movs	r0, r7
 8003644:	f011 f8a8 	bl	8014798 <strncmp>
 8003648:	2800      	cmp	r0, #0
 800364a:	d11a      	bne.n	8003682 <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 800364c:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <getCommand+0x204>)
 800364e:	79db      	ldrb	r3, [r3, #7]
 8003650:	2b03      	cmp	r3, #3
 8003652:	d105      	bne.n	8003660 <getCommand+0xac>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8003654:	4a59      	ldr	r2, [pc, #356]	; (80037bc <getCommand+0x208>)
 8003656:	495a      	ldr	r1, [pc, #360]	; (80037c0 <getCommand+0x20c>)
 8003658:	0020      	movs	r0, r4
 800365a:	f011 f859 	bl	8014710 <sprintf>
 800365e:	e7d8      	b.n	8003612 <getCommand+0x5e>
			else if (BOS.trace == TRACE_MESSAGE)
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <getCommand+0xbc>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 8003664:	4a57      	ldr	r2, [pc, #348]	; (80037c4 <getCommand+0x210>)
 8003666:	4956      	ldr	r1, [pc, #344]	; (80037c0 <getCommand+0x20c>)
 8003668:	0020      	movs	r0, r4
 800366a:	f011 f851 	bl	8014710 <sprintf>
 800366e:	e7d0      	b.n	8003612 <getCommand+0x5e>
			else if (BOS.trace == TRACE_NONE)
 8003670:	2b00      	cmp	r3, #0
 8003672:	d000      	beq.n	8003676 <getCommand+0xc2>
 8003674:	e094      	b.n	80037a0 <getCommand+0x1ec>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8003676:	4a54      	ldr	r2, [pc, #336]	; (80037c8 <getCommand+0x214>)
 8003678:	4951      	ldr	r1, [pc, #324]	; (80037c0 <getCommand+0x20c>)
 800367a:	0020      	movs	r0, r4
 800367c:	f011 f848 	bl	8014710 <sprintf>
 8003680:	e7c7      	b.n	8003612 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 8003682:	0032      	movs	r2, r6
 8003684:	4952      	ldr	r1, [pc, #328]	; (80037d0 <getCommand+0x21c>)
 8003686:	0038      	movs	r0, r7
 8003688:	f011 f886 	bl	8014798 <strncmp>
 800368c:	2800      	cmp	r0, #0
 800368e:	d106      	bne.n	800369e <getCommand+0xea>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 8003690:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <getCommand+0x204>)
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	494f      	ldr	r1, [pc, #316]	; (80037d4 <getCommand+0x220>)
 8003696:	0020      	movs	r0, r4
 8003698:	f011 f83a 	bl	8014710 <sprintf>
 800369c:	e7b9      	b.n	8003612 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 800369e:	0032      	movs	r2, r6
 80036a0:	494d      	ldr	r1, [pc, #308]	; (80037d8 <getCommand+0x224>)
 80036a2:	0038      	movs	r0, r7
 80036a4:	f011 f878 	bl	8014798 <strncmp>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d106      	bne.n	80036ba <getCommand+0x106>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <getCommand+0x204>)
 80036ae:	881a      	ldrh	r2, [r3, #0]
 80036b0:	4948      	ldr	r1, [pc, #288]	; (80037d4 <getCommand+0x220>)
 80036b2:	0020      	movs	r0, r4
 80036b4:	f011 f82c 	bl	8014710 <sprintf>
 80036b8:	e7ab      	b.n	8003612 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 80036ba:	0032      	movs	r2, r6
 80036bc:	4947      	ldr	r1, [pc, #284]	; (80037dc <getCommand+0x228>)
 80036be:	0038      	movs	r0, r7
 80036c0:	f011 f86a 	bl	8014798 <strncmp>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d106      	bne.n	80036d6 <getCommand+0x122>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 80036c8:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <getCommand+0x204>)
 80036ca:	885a      	ldrh	r2, [r3, #2]
 80036cc:	4941      	ldr	r1, [pc, #260]	; (80037d4 <getCommand+0x220>)
 80036ce:	0020      	movs	r0, r4
 80036d0:	f011 f81e 	bl	8014710 <sprintf>
 80036d4:	e79d      	b.n	8003612 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 80036d6:	0032      	movs	r2, r6
 80036d8:	4941      	ldr	r1, [pc, #260]	; (80037e0 <getCommand+0x22c>)
 80036da:	0038      	movs	r0, r7
 80036dc:	f011 f85c 	bl	8014798 <strncmp>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d106      	bne.n	80036f2 <getCommand+0x13e>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 80036e4:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <getCommand+0x204>)
 80036e6:	791a      	ldrb	r2, [r3, #4]
 80036e8:	493a      	ldr	r1, [pc, #232]	; (80037d4 <getCommand+0x220>)
 80036ea:	0020      	movs	r0, r4
 80036ec:	f011 f810 	bl	8014710 <sprintf>
 80036f0:	e78f      	b.n	8003612 <getCommand+0x5e>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 80036f2:	0032      	movs	r2, r6
 80036f4:	493b      	ldr	r1, [pc, #236]	; (80037e4 <getCommand+0x230>)
 80036f6:	0038      	movs	r0, r7
 80036f8:	f011 f84e 	bl	8014798 <strncmp>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d10d      	bne.n	800371c <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 8003700:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <getCommand+0x204>)
 8003702:	795a      	ldrb	r2, [r3, #5]
 8003704:	4933      	ldr	r1, [pc, #204]	; (80037d4 <getCommand+0x220>)
 8003706:	0020      	movs	r0, r4
 8003708:	f011 f802 	bl	8014710 <sprintf>
 800370c:	e781      	b.n	8003612 <getCommand+0x5e>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 800370e:	2205      	movs	r2, #5
 8003710:	4935      	ldr	r1, [pc, #212]	; (80037e8 <getCommand+0x234>)
 8003712:	0028      	movs	r0, r5
 8003714:	f011 f840 	bl	8014798 <strncmp>
 8003718:	2800      	cmp	r0, #0
 800371a:	d005      	beq.n	8003728 <getCommand+0x174>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 800371c:	2213      	movs	r2, #19
 800371e:	4933      	ldr	r1, [pc, #204]	; (80037ec <getCommand+0x238>)
 8003720:	0020      	movs	r0, r4
 8003722:	f010 fdc0 	bl	80142a6 <memcpy>
 8003726:	e774      	b.n	8003612 <getCommand+0x5e>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8003728:	466a      	mov	r2, sp
 800372a:	2102      	movs	r1, #2
 800372c:	0030      	movs	r0, r6
 800372e:	f00b f9e3 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 8003732:	0005      	movs	r5, r0
 8003734:	4f2e      	ldr	r7, [pc, #184]	; (80037f0 <getCommand+0x23c>)
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8003736:	2600      	movs	r6, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 8003738:	0039      	movs	r1, r7
 800373a:	0028      	movs	r0, r5
 800373c:	f7fc fce2 	bl	8000104 <strcmp>
 8003740:	2800      	cmp	r0, #0
 8003742:	d011      	beq.n	8003768 <getCommand+0x1b4>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 8003744:	3601      	adds	r6, #1
 8003746:	b2f6      	uxtb	r6, r6
 8003748:	370a      	adds	r7, #10
 800374a:	2e0a      	cmp	r6, #10
 800374c:	d1f4      	bne.n	8003738 <getCommand+0x184>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 800374e:	002a      	movs	r2, r5
 8003750:	4928      	ldr	r1, [pc, #160]	; (80037f4 <getCommand+0x240>)
 8003752:	0020      	movs	r0, r4
 8003754:	f010 ffdc 	bl	8014710 <sprintf>
			return pdFALSE;
 8003758:	e75b      	b.n	8003612 <getCommand+0x5e>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 800375a:	002b      	movs	r3, r5
 800375c:	0022      	movs	r2, r4
 800375e:	4926      	ldr	r1, [pc, #152]	; (80037f8 <getCommand+0x244>)
 8003760:	0020      	movs	r0, r4
 8003762:	f010 ffd5 	bl	8014710 <sprintf>
 8003766:	e015      	b.n	8003794 <getCommand+0x1e0>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 8003768:	002a      	movs	r2, r5
 800376a:	4924      	ldr	r1, [pc, #144]	; (80037fc <getCommand+0x248>)
 800376c:	0020      	movs	r0, r4
 800376e:	f010 ffcf 	bl	8014710 <sprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 8003772:	4b23      	ldr	r3, [pc, #140]	; (8003800 <getCommand+0x24c>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d100      	bne.n	800377c <getCommand+0x1c8>
 800377a:	e74a      	b.n	8003612 <getCommand+0x5e>
 800377c:	2501      	movs	r5, #1
 800377e:	002b      	movs	r3, r5
 8003780:	40b3      	lsls	r3, r6
 8003782:	4698      	mov	r8, r3
				if (InGroup(j, i))
 8003784:	4f1f      	ldr	r7, [pc, #124]	; (8003804 <getCommand+0x250>)
			for(j=1 ; j<=N ; j++)						// N modules
 8003786:	4e1e      	ldr	r6, [pc, #120]	; (8003800 <getCommand+0x24c>)
				if (InGroup(j, i))
 8003788:	1e6b      	subs	r3, r5, #1
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	5bdb      	ldrh	r3, [r3, r7]
 800378e:	4642      	mov	r2, r8
 8003790:	421a      	tst	r2, r3
 8003792:	d1e2      	bne.n	800375a <getCommand+0x1a6>
			for(j=1 ; j<=N ; j++)						// N modules
 8003794:	3501      	adds	r5, #1
 8003796:	b2ed      	uxtb	r5, r5
 8003798:	7833      	ldrb	r3, [r6, #0]
 800379a:	42ab      	cmp	r3, r5
 800379c:	d2f4      	bcs.n	8003788 <getCommand+0x1d4>
 800379e:	e738      	b.n	8003612 <getCommand+0x5e>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 80037a0:	002a      	movs	r2, r5
 80037a2:	4919      	ldr	r1, [pc, #100]	; (8003808 <getCommand+0x254>)
 80037a4:	0020      	movs	r0, r4
 80037a6:	f010 ffb3 	bl	8014710 <sprintf>
 80037aa:	e732      	b.n	8003612 <getCommand+0x5e>
 80037ac:	200012dc 	.word	0x200012dc
 80037b0:	080194d8 	.word	0x080194d8
 80037b4:	080194e0 	.word	0x080194e0
 80037b8:	20006a10 	.word	0x20006a10
 80037bc:	080194ec 	.word	0x080194ec
 80037c0:	08018f4c 	.word	0x08018f4c
 80037c4:	080194f0 	.word	0x080194f0
 80037c8:	080194f4 	.word	0x080194f4
 80037cc:	080194fc 	.word	0x080194fc
 80037d0:	08019504 	.word	0x08019504
 80037d4:	0801b14c 	.word	0x0801b14c
 80037d8:	08019510 	.word	0x08019510
 80037dc:	0801951c 	.word	0x0801951c
 80037e0:	0801952c 	.word	0x0801952c
 80037e4:	08019540 	.word	0x08019540
 80037e8:	08019554 	.word	0x08019554
 80037ec:	08019564 	.word	0x08019564
 80037f0:	20000f74 	.word	0x20000f74
 80037f4:	08019578 	.word	0x08019578
 80037f8:	0801955c 	.word	0x0801955c
 80037fc:	08019594 	.word	0x08019594
 8003800:	2000001c 	.word	0x2000001c
 8003804:	20000fd8 	.word	0x20000fd8
 8003808:	080195a8 	.word	0x080195a8

0800380c <prvRunTimeStatsCommand>:
{
 800380c:	b510      	push	{r4, lr}
 800380e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8003810:	d101      	bne.n	8003816 <prvRunTimeStatsCommand+0xa>
 8003812:	b672      	cpsid	i
 8003814:	e7fe      	b.n	8003814 <prvRunTimeStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 8003816:	2251      	movs	r2, #81	; 0x51
 8003818:	4904      	ldr	r1, [pc, #16]	; (800382c <prvRunTimeStatsCommand+0x20>)
 800381a:	f010 fd44 	bl	80142a6 <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 800381e:	0020      	movs	r0, r4
 8003820:	3050      	adds	r0, #80	; 0x50
 8003822:	f00c fbbd 	bl	800ffa0 <vTaskGetRunTimeStats>
}
 8003826:	2000      	movs	r0, #0
 8003828:	bd10      	pop	{r4, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	080199b4 	.word	0x080199b4

08003830 <prvTaskStatsCommand>:
{
 8003830:	b510      	push	{r4, lr}
 8003832:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8003834:	d101      	bne.n	800383a <prvTaskStatsCommand+0xa>
 8003836:	b672      	cpsid	i
 8003838:	e7fe      	b.n	8003838 <prvTaskStatsCommand+0x8>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 800383a:	225b      	movs	r2, #91	; 0x5b
 800383c:	4904      	ldr	r1, [pc, #16]	; (8003850 <prvTaskStatsCommand+0x20>)
 800383e:	f010 fd32 	bl	80142a6 <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 8003842:	0020      	movs	r0, r4
 8003844:	305a      	adds	r0, #90	; 0x5a
 8003846:	f00c fb4b 	bl	800fee0 <vTaskList>
}
 800384a:	2000      	movs	r0, #0
 800384c:	bd10      	pop	{r4, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	08019a18 	.word	0x08019a18

08003854 <TIM_USEC_Init>:
{
 8003854:	b530      	push	{r4, r5, lr}
 8003856:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 8003858:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <TIM_USEC_Init+0x50>)
 800385a:	69d1      	ldr	r1, [r2, #28]
 800385c:	2080      	movs	r0, #128	; 0x80
 800385e:	0040      	lsls	r0, r0, #1
 8003860:	4301      	orrs	r1, r0
 8003862:	61d1      	str	r1, [r2, #28]
 8003864:	69d3      	ldr	r3, [r2, #28]
 8003866:	4003      	ands	r3, r0
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800386c:	4c0e      	ldr	r4, [pc, #56]	; (80038a8 <TIM_USEC_Init+0x54>)
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <TIM_USEC_Init+0x58>)
 8003870:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 8003872:	f00f f961 	bl	8012b38 <HAL_RCC_GetPCLK1Freq>
 8003876:	490e      	ldr	r1, [pc, #56]	; (80038b0 <TIM_USEC_Init+0x5c>)
 8003878:	f7fc fc6a 	bl	8000150 <__udivsi3>
 800387c:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387e:	2500      	movs	r5, #0
 8003880:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <TIM_USEC_Init+0x60>)
 8003884:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 8003886:	0020      	movs	r0, r4
 8003888:	f00f fc7c 	bl	8013184 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800388c:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800388e:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 8003890:	a902      	add	r1, sp, #8
 8003892:	0020      	movs	r0, r4
 8003894:	f00f fc90 	bl	80131b8 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_Base_Start(&htim14);
 8003898:	0020      	movs	r0, r4
 800389a:	f00f fbea 	bl	8013072 <HAL_TIM_Base_Start>
}
 800389e:	b005      	add	sp, #20
 80038a0:	bd30      	pop	{r4, r5, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	40021000 	.word	0x40021000
 80038a8:	20006a2c 	.word	0x20006a2c
 80038ac:	40002000 	.word	0x40002000
 80038b0:	000f4240 	.word	0x000f4240
 80038b4:	0000ffff 	.word	0x0000ffff

080038b8 <TIM_MSEC_Init>:
{
 80038b8:	b530      	push	{r4, r5, lr}
 80038ba:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 80038bc:	4a12      	ldr	r2, [pc, #72]	; (8003908 <TIM_MSEC_Init+0x50>)
 80038be:	6991      	ldr	r1, [r2, #24]
 80038c0:	2080      	movs	r0, #128	; 0x80
 80038c2:	0240      	lsls	r0, r0, #9
 80038c4:	4301      	orrs	r1, r0
 80038c6:	6191      	str	r1, [r2, #24]
 80038c8:	6993      	ldr	r3, [r2, #24]
 80038ca:	4003      	ands	r3, r0
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 80038d0:	4c0e      	ldr	r4, [pc, #56]	; (800390c <TIM_MSEC_Init+0x54>)
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <TIM_MSEC_Init+0x58>)
 80038d4:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 80038d6:	f00f f92f 	bl	8012b38 <HAL_RCC_GetPCLK1Freq>
 80038da:	21fa      	movs	r1, #250	; 0xfa
 80038dc:	0089      	lsls	r1, r1, #2
 80038de:	f7fc fc37 	bl	8000150 <__udivsi3>
 80038e2:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e4:	2500      	movs	r5, #0
 80038e6:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <TIM_MSEC_Init+0x5c>)
 80038ea:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 80038ec:	0020      	movs	r0, r4
 80038ee:	f00f fc49 	bl	8013184 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f2:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038f4:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 80038f6:	a902      	add	r1, sp, #8
 80038f8:	0020      	movs	r0, r4
 80038fa:	f00f fc5d 	bl	80131b8 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_Base_Start(&htim15);
 80038fe:	0020      	movs	r0, r4
 8003900:	f00f fbb7 	bl	8013072 <HAL_TIM_Base_Start>
}
 8003904:	b005      	add	sp, #20
 8003906:	bd30      	pop	{r4, r5, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	2000695c 	.word	0x2000695c
 8003910:	40014000 	.word	0x40014000
 8003914:	0000ffff 	.word	0x0000ffff

08003918 <minArr>:
{
 8003918:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!Q[0])						// Not visited yet
 800391a:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 800391c:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 800391e:	2b00      	cmp	r3, #0
 8003920:	d100      	bne.n	8003924 <minArr+0xc>
		smallest = arr[0];
 8003922:	7804      	ldrb	r4, [r0, #0]
	for (int i=0 ; i<N ; i++) {
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <minArr+0x38>)
 8003926:	781d      	ldrb	r5, [r3, #0]
 8003928:	2d00      	cmp	r5, #0
 800392a:	dd0e      	ble.n	800394a <minArr+0x32>
 800392c:	2300      	movs	r3, #0
 800392e:	2700      	movs	r7, #0
 8003930:	e002      	b.n	8003938 <minArr+0x20>
 8003932:	3301      	adds	r3, #1
 8003934:	42ab      	cmp	r3, r5
 8003936:	da09      	bge.n	800394c <minArr+0x34>
		if ((arr[i] < smallest) && !Q[i]) {
 8003938:	5cc2      	ldrb	r2, [r0, r3]
 800393a:	42a2      	cmp	r2, r4
 800393c:	d2f9      	bcs.n	8003932 <minArr+0x1a>
 800393e:	5cce      	ldrb	r6, [r1, r3]
 8003940:	2e00      	cmp	r6, #0
 8003942:	d1f6      	bne.n	8003932 <minArr+0x1a>
			index = i;
 8003944:	b2df      	uxtb	r7, r3
			smallest = arr[i];
 8003946:	0014      	movs	r4, r2
 8003948:	e7f3      	b.n	8003932 <minArr+0x1a>
	for (int i=0 ; i<N ; i++) {
 800394a:	2700      	movs	r7, #0
}
 800394c:	0038      	movs	r0, r7
 800394e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003950:	2000001c 	.word	0x2000001c

08003954 <QnotEmpty>:
	for (int i=0 ; i<N ; i++) {
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <QnotEmpty+0x20>)
 8003956:	7819      	ldrb	r1, [r3, #0]
 8003958:	2900      	cmp	r1, #0
 800395a:	d008      	beq.n	800396e <QnotEmpty+0x1a>
 800395c:	0003      	movs	r3, r0
 800395e:	1841      	adds	r1, r0, r1
	char temp = 1;
 8003960:	2001      	movs	r0, #1
		temp &= Q[i];
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	4010      	ands	r0, r2
 8003966:	3301      	adds	r3, #1
	for (int i=0 ; i<N ; i++) {
 8003968:	428b      	cmp	r3, r1
 800396a:	d1fa      	bne.n	8003962 <QnotEmpty+0xe>
}
 800396c:	4770      	bx	lr
	char temp = 1;
 800396e:	2001      	movs	r0, #1
 8003970:	e7fc      	b.n	800396c <QnotEmpty+0x18>
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	2000001c 	.word	0x2000001c

08003978 <NotifyMessagingTask>:
{
 8003978:	b510      	push	{r4, lr}
	switch (port)
 800397a:	2806      	cmp	r0, #6
 800397c:	d80a      	bhi.n	8003994 <NotifyMessagingTask+0x1c>
 800397e:	0080      	lsls	r0, r0, #2
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <NotifyMessagingTask+0x70>)
 8003982:	581b      	ldr	r3, [r3, r0]
 8003984:	469f      	mov	pc, r3
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 8003986:	4b19      	ldr	r3, [pc, #100]	; (80039ec <NotifyMessagingTask+0x74>)
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	2202      	movs	r2, #2
 800398e:	2100      	movs	r1, #0
 8003990:	f00c fbb8 	bl	8010104 <xTaskGenericNotify>
}
 8003994:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <NotifyMessagingTask+0x78>)
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	2300      	movs	r3, #0
 800399c:	2202      	movs	r2, #2
 800399e:	2100      	movs	r1, #0
 80039a0:	f00c fbb0 	bl	8010104 <xTaskGenericNotify>
 80039a4:	e7f6      	b.n	8003994 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 80039a6:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <NotifyMessagingTask+0x7c>)
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	2202      	movs	r2, #2
 80039ae:	2100      	movs	r1, #0
 80039b0:	f00c fba8 	bl	8010104 <xTaskGenericNotify>
 80039b4:	e7ee      	b.n	8003994 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <NotifyMessagingTask+0x80>)
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	2300      	movs	r3, #0
 80039bc:	2202      	movs	r2, #2
 80039be:	2100      	movs	r1, #0
 80039c0:	f00c fba0 	bl	8010104 <xTaskGenericNotify>
 80039c4:	e7e6      	b.n	8003994 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <NotifyMessagingTask+0x84>)
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	2300      	movs	r3, #0
 80039cc:	2202      	movs	r2, #2
 80039ce:	2100      	movs	r1, #0
 80039d0:	f00c fb98 	bl	8010104 <xTaskGenericNotify>
 80039d4:	e7de      	b.n	8003994 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle);	break;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <NotifyMessagingTask+0x88>)
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	2300      	movs	r3, #0
 80039dc:	2202      	movs	r2, #2
 80039de:	2100      	movs	r1, #0
 80039e0:	f00c fb90 	bl	8010104 <xTaskGenericNotify>
}
 80039e4:	e7d6      	b.n	8003994 <NotifyMessagingTask+0x1c>
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	08018cd0 	.word	0x08018cd0
 80039ec:	2000172c 	.word	0x2000172c
 80039f0:	20001730 	.word	0x20001730
 80039f4:	20001734 	.word	0x20001734
 80039f8:	20001738 	.word	0x20001738
 80039fc:	2000173c 	.word	0x2000173c
 8003a00:	20001740 	.word	0x20001740

08003a04 <SaveToRO>:
{
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a06:	46de      	mov	lr, fp
 8003a08:	4657      	mov	r7, sl
 8003a0a:	464e      	mov	r6, r9
 8003a0c:	4645      	mov	r5, r8
 8003a0e:	b5e0      	push	{r5, r6, r7, lr}
 8003a10:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 8003a12:	2215      	movs	r2, #21
 8003a14:	2100      	movs	r1, #0
 8003a16:	a802      	add	r0, sp, #8
 8003a18:	f010 fc4e 	bl	80142b8 <memset>
	HAL_FLASH_Unlock();
 8003a1c:	f00d fe30 	bl	8011680 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 8003a20:	4872      	ldr	r0, [pc, #456]	; (8003bec <SaveToRO+0x1e8>)
 8003a22:	f00d feef 	bl	8011804 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8003a26:	4872      	ldr	r0, [pc, #456]	; (8003bf0 <SaveToRO+0x1ec>)
 8003a28:	f00d fe46 	bl	80116b8 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d112      	bne.n	8003a56 <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003a30:	4a70      	ldr	r2, [pc, #448]	; (8003bf4 <SaveToRO+0x1f0>)
 8003a32:	6913      	ldr	r3, [r2, #16]
 8003a34:	2102      	movs	r1, #2
 8003a36:	438b      	bics	r3, r1
 8003a38:	6113      	str	r3, [r2, #16]
	if (myID)
 8003a3a:	4b6f      	ldr	r3, [pc, #444]	; (8003bf8 <SaveToRO+0x1f4>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d113      	bne.n	8003a6a <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 8003a42:	4b6e      	ldr	r3, [pc, #440]	; (8003bfc <SaveToRO+0x1f8>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d100      	bne.n	8003a4c <SaveToRO+0x48>
 8003a4a:	e0ca      	b.n	8003be2 <SaveToRO+0x1de>
 8003a4c:	2500      	movs	r5, #0
 8003a4e:	4c6c      	ldr	r4, [pc, #432]	; (8003c00 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) 
 8003a50:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <SaveToRO+0x200>)
 8003a52:	4698      	mov	r8, r3
 8003a54:	e06e      	b.n	8003b34 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 8003a56:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <SaveToRO+0x204>)
 8003a58:	69d8      	ldr	r0, [r3, #28]
 8003a5a:	b2c0      	uxtb	r0, r0
}
 8003a5c:	b009      	add	sp, #36	; 0x24
 8003a5e:	bc3c      	pop	{r2, r3, r4, r5}
 8003a60:	4690      	mov	r8, r2
 8003a62:	4699      	mov	r9, r3
 8003a64:	46a2      	mov	sl, r4
 8003a66:	46ab      	mov	fp, r5
 8003a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 8003a6a:	4a68      	ldr	r2, [pc, #416]	; (8003c0c <SaveToRO+0x208>)
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	0212      	lsls	r2, r2, #8
 8003a70:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8003a72:	b292      	uxth	r2, r2
 8003a74:	2300      	movs	r3, #0
 8003a76:	495d      	ldr	r1, [pc, #372]	; (8003bec <SaveToRO+0x1e8>)
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f00d fe4b 	bl	8011714 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8003a7e:	485c      	ldr	r0, [pc, #368]	; (8003bf0 <SaveToRO+0x1ec>)
 8003a80:	f00d fe1a 	bl	80116b8 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d111      	bne.n	8003aac <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003a88:	4a5a      	ldr	r2, [pc, #360]	; (8003bf4 <SaveToRO+0x1f0>)
 8003a8a:	6913      	ldr	r3, [r2, #16]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	438b      	bics	r3, r1
 8003a90:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 8003a92:	4b5e      	ldr	r3, [pc, #376]	; (8003c0c <SaveToRO+0x208>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2201      	movs	r2, #1
 8003a98:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 8003a9a:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0d0      	beq.n	8003a42 <SaveToRO+0x3e>
 8003aa0:	2316      	movs	r3, #22
 8003aa2:	469b      	mov	fp, r3
 8003aa4:	4b5a      	ldr	r3, [pc, #360]	; (8003c10 <SaveToRO+0x20c>)
 8003aa6:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 8003aa8:	4698      	mov	r8, r3
 8003aaa:	e02a      	b.n	8003b02 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 8003aac:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <SaveToRO+0x204>)
 8003aae:	69d8      	ldr	r0, [r3, #28]
 8003ab0:	b2c0      	uxtb	r0, r0
 8003ab2:	e7d3      	b.n	8003a5c <SaveToRO+0x58>
						return pFlash.ErrorCode;
 8003ab4:	4b54      	ldr	r3, [pc, #336]	; (8003c08 <SaveToRO+0x204>)
 8003ab6:	69d8      	ldr	r0, [r3, #28]
 8003ab8:	b2c0      	uxtb	r0, r0
 8003aba:	e7cf      	b.n	8003a5c <SaveToRO+0x58>
 8003abc:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8003abe:	42b4      	cmp	r4, r6
 8003ac0:	d017      	beq.n	8003af2 <SaveToRO+0xee>
				if (array[i-1][0]) {
 8003ac2:	4643      	mov	r3, r8
 8003ac4:	5afb      	ldrh	r3, [r7, r3]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f8      	beq.n	8003abc <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 8003aca:	8822      	ldrh	r2, [r4, #0]
 8003acc:	4b47      	ldr	r3, [pc, #284]	; (8003bec <SaveToRO+0x1e8>)
 8003ace:	18e9      	adds	r1, r5, r3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f00d fe1e 	bl	8011714 <HAL_FLASH_Program>
					add += 2;
 8003ad8:	3502      	adds	r5, #2
 8003ada:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8003adc:	4844      	ldr	r0, [pc, #272]	; (8003bf0 <SaveToRO+0x1ec>)
 8003ade:	f00d fdeb 	bl	80116b8 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d1e6      	bne.n	8003ab4 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003ae6:	4a43      	ldr	r2, [pc, #268]	; (8003bf4 <SaveToRO+0x1f0>)
 8003ae8:	6913      	ldr	r3, [r2, #16]
 8003aea:	2101      	movs	r1, #1
 8003aec:	438b      	bics	r3, r1
 8003aee:	6113      	str	r3, [r2, #16]
 8003af0:	e7e4      	b.n	8003abc <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 8003af2:	464b      	mov	r3, r9
 8003af4:	3301      	adds	r3, #1
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	4699      	mov	r9, r3
 8003afa:	4b44      	ldr	r3, [pc, #272]	; (8003c0c <SaveToRO+0x208>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	454b      	cmp	r3, r9
 8003b00:	d39f      	bcc.n	8003a42 <SaveToRO+0x3e>
 8003b02:	465e      	mov	r6, fp
 8003b04:	464b      	mov	r3, r9
 8003b06:	435e      	muls	r6, r3
 8003b08:	0034      	movs	r4, r6
 8003b0a:	3c16      	subs	r4, #22
 8003b0c:	4454      	add	r4, sl
 8003b0e:	4456      	add	r6, sl
				if (array[i-1][0]) {
 8003b10:	1e5f      	subs	r7, r3, #1
 8003b12:	465b      	mov	r3, fp
 8003b14:	435f      	muls	r7, r3
 8003b16:	e7d4      	b.n	8003ac2 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <SaveToRO+0x204>)
 8003b1a:	69d8      	ldr	r0, [r3, #28]
 8003b1c:	b2c0      	uxtb	r0, r0
 8003b1e:	e79d      	b.n	8003a5c <SaveToRO+0x58>
					return pFlash.ErrorCode;
 8003b20:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <SaveToRO+0x204>)
 8003b22:	69d8      	ldr	r0, [r3, #28]
 8003b24:	b2c0      	uxtb	r0, r0
 8003b26:	e799      	b.n	8003a5c <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 8003b28:	3501      	adds	r5, #1
 8003b2a:	b2ed      	uxtb	r5, r5
 8003b2c:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <SaveToRO+0x1f8>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	42ab      	cmp	r3, r5
 8003b32:	d956      	bls.n	8003be2 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) 
 8003b34:	9501      	str	r5, [sp, #4]
 8003b36:	00ab      	lsls	r3, r5, #2
 8003b38:	195b      	adds	r3, r3, r5
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	5c9b      	ldrb	r3, [r3, r2]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f1      	beq.n	8003b28 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8003b44:	23fe      	movs	r3, #254	; 0xfe
 8003b46:	aa02      	add	r2, sp, #8
 8003b48:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 8003b4a:	00a9      	lsls	r1, r5, #2
 8003b4c:	1949      	adds	r1, r1, r5
 8003b4e:	0089      	lsls	r1, r1, #2
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <SaveToRO+0x200>)
 8003b52:	469c      	mov	ip, r3
 8003b54:	4461      	add	r1, ip
 8003b56:	2214      	movs	r2, #20
 8003b58:	ab02      	add	r3, sp, #8
 8003b5a:	1c58      	adds	r0, r3, #1
 8003b5c:	f010 fba3 	bl	80142a6 <memcpy>
 8003b60:	2314      	movs	r3, #20
 8003b62:	469b      	mov	fp, r3
 8003b64:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 8003b66:	ae02      	add	r6, sp, #8
 8003b68:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003b6a:	4f22      	ldr	r7, [pc, #136]	; (8003bf4 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 8003b6c:	5b32      	ldrh	r2, [r6, r4]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	0021      	movs	r1, r4
 8003b72:	2001      	movs	r0, #1
 8003b74:	f00d fdce 	bl	8011714 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8003b78:	481d      	ldr	r0, [pc, #116]	; (8003bf0 <SaveToRO+0x1ec>)
 8003b7a:	f00d fd9d 	bl	80116b8 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d1ca      	bne.n	8003b18 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2201      	movs	r2, #1
 8003b86:	4393      	bics	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 8003b8a:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 8003b8c:	455c      	cmp	r4, fp
 8003b8e:	d1ed      	bne.n	8003b6c <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8003b90:	2700      	movs	r7, #0
 8003b92:	9a01      	ldr	r2, [sp, #4]
 8003b94:	0093      	lsls	r3, r2, #2
 8003b96:	189e      	adds	r6, r3, r2
 8003b98:	00b6      	lsls	r6, r6, #2
 8003b9a:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <SaveToRO+0x200>)
 8003b9c:	469a      	mov	sl, r3
 8003b9e:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <SaveToRO+0x1f0>)
 8003ba2:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8003ba4:	4653      	mov	r3, sl
 8003ba6:	68de      	ldr	r6, [r3, #12]
 8003ba8:	0030      	movs	r0, r6
 8003baa:	f7fc fab5 	bl	8000118 <strlen>
 8003bae:	3001      	adds	r0, #1
 8003bb0:	0840      	lsrs	r0, r0, #1
 8003bb2:	4287      	cmp	r7, r0
 8003bb4:	d2b8      	bcs.n	8003b28 <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 8003bb6:	007b      	lsls	r3, r7, #1
 8003bb8:	5af2      	ldrh	r2, [r6, r3]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	0021      	movs	r1, r4
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f00d fda8 	bl	8011714 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8003bc4:	480a      	ldr	r0, [pc, #40]	; (8003bf0 <SaveToRO+0x1ec>)
 8003bc6:	f00d fd77 	bl	80116b8 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d1a8      	bne.n	8003b20 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003bce:	465b      	mov	r3, fp
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4393      	bics	r3, r2
 8003bd6:	465a      	mov	r2, fp
 8003bd8:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 8003bda:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8003bdc:	3701      	adds	r7, #1
 8003bde:	b2ff      	uxtb	r7, r7
 8003be0:	e7e0      	b.n	8003ba4 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 8003be2:	f00d fd5f 	bl	80116a4 <HAL_FLASH_Lock>
	return result;
 8003be6:	2000      	movs	r0, #0
 8003be8:	e738      	b.n	8003a5c <SaveToRO+0x58>
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	0801d800 	.word	0x0801d800
 8003bf0:	0000c350 	.word	0x0000c350
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	20001298 	.word	0x20001298
 8003bfc:	200014e3 	.word	0x200014e3
 8003c00:	0801dc00 	.word	0x0801dc00
 8003c04:	20006a88 	.word	0x20006a88
 8003c08:	20006e68 	.word	0x20006e68
 8003c0c:	2000001c 	.word	0x2000001c
 8003c10:	20000ac0 	.word	0x20000ac0

08003c14 <delSnipCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE delSnipCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8003c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c16:	b085      	sub	sp, #20
 8003c18:	0005      	movs	r5, r0
 8003c1a:	0010      	movs	r0, r2
	static const int8_t *pcMessageOK = ( int8_t * ) "Snippet was deleted. Type snip to view updated list\n\r";
	static const int8_t *pcMessageWrong = ( int8_t * ) "The Snippet number was not found\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9303      	str	r3, [sp, #12]
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	d101      	bne.n	8003c28 <delSnipCommand+0x14>
 8003c24:	b672      	cpsid	i
 8003c26:	e7fe      	b.n	8003c26 <delSnipCommand+0x12>
	
	/* 1st parameter for Snippet index */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8003c28:	aa03      	add	r2, sp, #12
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	f00a ff64 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8003c30:	f010 f8a9 	bl	8013d86 <atoi>
 8003c34:	9001      	str	r0, [sp, #4]
 8003c36:	b2c6      	uxtb	r6, r0
	
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8003c38:	2e00      	cmp	r6, #0
 8003c3a:	d003      	beq.n	8003c44 <delSnipCommand+0x30>
 8003c3c:	4b27      	ldr	r3, [pc, #156]	; (8003cdc <delSnipCommand+0xc8>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	42b3      	cmp	r3, r6
 8003c42:	d207      	bcs.n	8003c54 <delSnipCommand+0x40>
	
	/* Respond to the command */
	if (result == BOS_OK)
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
	else
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8003c44:	2223      	movs	r2, #35	; 0x23
 8003c46:	4926      	ldr	r1, [pc, #152]	; (8003ce0 <delSnipCommand+0xcc>)
 8003c48:	0028      	movs	r0, r5
 8003c4a:	f010 fb2c 	bl	80142a6 <memcpy>

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8003c4e:	2000      	movs	r0, #0
 8003c50:	b005      	add	sp, #20
 8003c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index-1].cond.conditionType = 0;
 8003c54:	466b      	mov	r3, sp
 8003c56:	791a      	ldrb	r2, [r3, #4]
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	4822      	ldr	r0, [pc, #136]	; (8003ce4 <delSnipCommand+0xd0>)
 8003c5c:	2314      	movs	r3, #20
 8003c5e:	4353      	muls	r3, r2
 8003c60:	2700      	movs	r7, #0
 8003c62:	541f      	strb	r7, [r3, r0]
		snippets[index-1].cond.mathOperator = 0;
 8003c64:	18c4      	adds	r4, r0, r3
 8003c66:	7067      	strb	r7, [r4, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 8003c68:	3302      	adds	r3, #2
 8003c6a:	1818      	adds	r0, r3, r0
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	0039      	movs	r1, r7
 8003c70:	f010 fb22 	bl	80142b8 <memset>
		snippets[index-1].state = false;
 8003c74:	7427      	strb	r7, [r4, #16]
		free(snippets[index-1].cmd);
 8003c76:	68e0      	ldr	r0, [r4, #12]
 8003c78:	f010 f8d2 	bl	8013e20 <free>
		snippets[index-1].cmd = NULL;
 8003c7c:	60e7      	str	r7, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8003c7e:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <delSnipCommand+0xc8>)
 8003c80:	781f      	ldrb	r7, [r3, #0]
 8003c82:	42be      	cmp	r6, r7
 8003c84:	d213      	bcs.n	8003cae <delSnipCommand+0x9a>
 8003c86:	466b      	mov	r3, sp
 8003c88:	7919      	ldrb	r1, [r3, #4]
 8003c8a:	2214      	movs	r2, #20
 8003c8c:	0014      	movs	r4, r2
 8003c8e:	434c      	muls	r4, r1
 8003c90:	4814      	ldr	r0, [pc, #80]	; (8003ce4 <delSnipCommand+0xd0>)
 8003c92:	1824      	adds	r4, r4, r0
 8003c94:	1e7b      	subs	r3, r7, #1
 8003c96:	1b9b      	subs	r3, r3, r6
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	185b      	adds	r3, r3, r1
 8003c9c:	4353      	muls	r3, r2
 8003c9e:	1880      	adds	r0, r0, r2
 8003ca0:	181e      	adds	r6, r3, r0
			if (snippets[s].cond.conditionType) {
 8003ca2:	7823      	ldrb	r3, [r4, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10d      	bne.n	8003cc4 <delSnipCommand+0xb0>
 8003ca8:	3414      	adds	r4, #20
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8003caa:	42b4      	cmp	r4, r6
 8003cac:	d1f9      	bne.n	8003ca2 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8003cae:	1e7b      	subs	r3, r7, #1
 8003cb0:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <delSnipCommand+0xc8>)
 8003cb2:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8003cb4:	f7ff fea6 	bl	8003a04 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8003cb8:	2236      	movs	r2, #54	; 0x36
 8003cba:	490b      	ldr	r1, [pc, #44]	; (8003ce8 <delSnipCommand+0xd4>)
 8003cbc:	0028      	movs	r0, r5
 8003cbe:	f010 faf2 	bl	80142a6 <memcpy>
 8003cc2:	e7c4      	b.n	8003c4e <delSnipCommand+0x3a>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 8003cc4:	2214      	movs	r2, #20
 8003cc6:	0021      	movs	r1, r4
 8003cc8:	0020      	movs	r0, r4
 8003cca:	3814      	subs	r0, #20
 8003ccc:	f010 faeb 	bl	80142a6 <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 8003cd0:	2214      	movs	r2, #20
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	0020      	movs	r0, r4
 8003cd6:	f010 faef 	bl	80142b8 <memset>
 8003cda:	e7e5      	b.n	8003ca8 <delSnipCommand+0x94>
 8003cdc:	200014e3 	.word	0x200014e3
 8003ce0:	08019450 	.word	0x08019450
 8003ce4:	20006a88 	.word	0x20006a88
 8003ce8:	08019418 	.word	0x08019418

08003cec <pauseSnipCommand>:
{	
 8003cec:	b510      	push	{r4, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	0004      	movs	r4, r0
 8003cf2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8003cf8:	2c00      	cmp	r4, #0
 8003cfa:	d101      	bne.n	8003d00 <pauseSnipCommand+0x14>
 8003cfc:	b672      	cpsid	i
 8003cfe:	e7fe      	b.n	8003cfe <pauseSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8003d00:	aa01      	add	r2, sp, #4
 8003d02:	2101      	movs	r1, #1
 8003d04:	f00a fef8 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8003d08:	f010 f83d 	bl	8013d86 <atoi>
 8003d0c:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <pauseSnipCommand+0x2e>
 8003d12:	4a0e      	ldr	r2, [pc, #56]	; (8003d4c <pauseSnipCommand+0x60>)
 8003d14:	7812      	ldrb	r2, [r2, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d207      	bcs.n	8003d2a <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8003d1a:	2223      	movs	r2, #35	; 0x23
 8003d1c:	490c      	ldr	r1, [pc, #48]	; (8003d50 <pauseSnipCommand+0x64>)
 8003d1e:	0020      	movs	r0, r4
 8003d20:	f010 fac1 	bl	80142a6 <memcpy>
}
 8003d24:	2000      	movs	r0, #0
 8003d26:	b002      	add	sp, #8
 8003d28:	bd10      	pop	{r4, pc}
		snippets[index-1].state = false;
 8003d2a:	b2c0      	uxtb	r0, r0
 8003d2c:	3801      	subs	r0, #1
 8003d2e:	2314      	movs	r3, #20
 8003d30:	4343      	muls	r3, r0
 8003d32:	4808      	ldr	r0, [pc, #32]	; (8003d54 <pauseSnipCommand+0x68>)
 8003d34:	18c0      	adds	r0, r0, r3
 8003d36:	2300      	movs	r3, #0
 8003d38:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8003d3a:	f7ff fe63 	bl	8003a04 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8003d3e:	2235      	movs	r2, #53	; 0x35
 8003d40:	4905      	ldr	r1, [pc, #20]	; (8003d58 <pauseSnipCommand+0x6c>)
 8003d42:	0020      	movs	r0, r4
 8003d44:	f010 faaf 	bl	80142a6 <memcpy>
 8003d48:	e7ec      	b.n	8003d24 <pauseSnipCommand+0x38>
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	200014e3 	.word	0x200014e3
 8003d50:	08019450 	.word	0x08019450
 8003d54:	20006a88 	.word	0x20006a88
 8003d58:	0801992c 	.word	0x0801992c

08003d5c <actSnipCommand>:
{	
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	0004      	movs	r4, r0
 8003d62:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8003d68:	2c00      	cmp	r4, #0
 8003d6a:	d101      	bne.n	8003d70 <actSnipCommand+0x14>
 8003d6c:	b672      	cpsid	i
 8003d6e:	e7fe      	b.n	8003d6e <actSnipCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8003d70:	aa01      	add	r2, sp, #4
 8003d72:	2101      	movs	r1, #1
 8003d74:	f00a fec0 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8003d78:	f010 f805 	bl	8013d86 <atoi>
 8003d7c:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <actSnipCommand+0x2e>
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <actSnipCommand+0x60>)
 8003d84:	7812      	ldrb	r2, [r2, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d207      	bcs.n	8003d9a <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8003d8a:	2223      	movs	r2, #35	; 0x23
 8003d8c:	490c      	ldr	r1, [pc, #48]	; (8003dc0 <actSnipCommand+0x64>)
 8003d8e:	0020      	movs	r0, r4
 8003d90:	f010 fa89 	bl	80142a6 <memcpy>
}
 8003d94:	2000      	movs	r0, #0
 8003d96:	b002      	add	sp, #8
 8003d98:	bd10      	pop	{r4, pc}
		snippets[index-1].state = true;
 8003d9a:	b2c0      	uxtb	r0, r0
 8003d9c:	3801      	subs	r0, #1
 8003d9e:	2314      	movs	r3, #20
 8003da0:	4343      	muls	r3, r0
 8003da2:	4808      	ldr	r0, [pc, #32]	; (8003dc4 <actSnipCommand+0x68>)
 8003da4:	18c0      	adds	r0, r0, r3
 8003da6:	2301      	movs	r3, #1
 8003da8:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8003daa:	f7ff fe2b 	bl	8003a04 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8003dae:	2238      	movs	r2, #56	; 0x38
 8003db0:	4905      	ldr	r1, [pc, #20]	; (8003dc8 <actSnipCommand+0x6c>)
 8003db2:	0020      	movs	r0, r4
 8003db4:	f010 fa77 	bl	80142a6 <memcpy>
 8003db8:	e7ec      	b.n	8003d94 <actSnipCommand+0x38>
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	200014e3 	.word	0x200014e3
 8003dc0:	08019450 	.word	0x08019450
 8003dc4:	20006a88 	.word	0x20006a88
 8003dc8:	08019130 	.word	0x08019130

08003dcc <ClearROtopology>:
{
 8003dcc:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 8003dce:	4a07      	ldr	r2, [pc, #28]	; (8003dec <ClearROtopology+0x20>)
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4807      	ldr	r0, [pc, #28]	; (8003df0 <ClearROtopology+0x24>)
 8003dd4:	f010 fa70 	bl	80142b8 <memset>
	N = 1; myID = 0;
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <ClearROtopology+0x28>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <ClearROtopology+0x2c>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 8003de4:	f7ff fe0e 	bl	8003a04 <SaveToRO>
}
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	00000226 	.word	0x00000226
 8003df0:	20000ac0 	.word	0x20000ac0
 8003df4:	2000001c 	.word	0x2000001c
 8003df8:	20001298 	.word	0x20001298

08003dfc <LoadROsnippets>:
{
 8003dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfe:	46de      	mov	lr, fp
 8003e00:	4657      	mov	r7, sl
 8003e02:	464e      	mov	r6, r9
 8003e04:	b5c0      	push	{r6, r7, lr}
 8003e06:	b082      	sub	sp, #8
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 8003e08:	2032      	movs	r0, #50	; 0x32
 8003e0a:	f00f ffff 	bl	8013e0c <malloc>
 8003e0e:	1e07      	subs	r7, r0, #0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003e10:	d100      	bne.n	8003e14 <LoadROsnippets+0x18>
 8003e12:	e071      	b.n	8003ef8 <LoadROsnippets+0xfc>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 8003e14:	4b39      	ldr	r3, [pc, #228]	; (8003efc <LoadROsnippets+0x100>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	20ff      	movs	r0, #255	; 0xff
 8003e1a:	2bfe      	cmp	r3, #254	; 0xfe
 8003e1c:	d166      	bne.n	8003eec <LoadROsnippets+0xf0>
 8003e1e:	4e38      	ldr	r6, [pc, #224]	; (8003f00 <LoadROsnippets+0x104>)
 8003e20:	3b9a      	subs	r3, #154	; 0x9a
 8003e22:	469b      	mov	fp, r3
 8003e24:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 8003e26:	4d35      	ldr	r5, [pc, #212]	; (8003efc <LoadROsnippets+0x100>)
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8003e28:	1c7b      	adds	r3, r7, #1
 8003e2a:	9301      	str	r3, [sp, #4]
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003e2c:	4b35      	ldr	r3, [pc, #212]	; (8003f04 <LoadROsnippets+0x108>)
 8003e2e:	4699      	mov	r9, r3
 8003e30:	e023      	b.n	8003e7a <LoadROsnippets+0x7e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003e32:	2400      	movs	r4, #0
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	3b01      	subs	r3, #1
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <LoadROsnippets+0x46>
 8003e3e:	3401      	adds	r4, #1
 8003e40:	b2e4      	uxtb	r4, r4
		snippets[s].cmd = (char *) malloc(i);
 8003e42:	0020      	movs	r0, r4
 8003e44:	f00f ffe2 	bl	8013e0c <malloc>
 8003e48:	4653      	mov	r3, sl
 8003e4a:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d03f      	beq.n	8003ed0 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd, snipBuffer, i);
 8003e50:	0022      	movs	r2, r4
 8003e52:	0039      	movs	r1, r7
 8003e54:	f010 fa27 	bl	80142a6 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003e58:	464b      	mov	r3, r9
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	464a      	mov	r2, r9
 8003e60:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 8003e62:	0022      	movs	r2, r4
 8003e64:	2100      	movs	r1, #0
 8003e66:	0038      	movs	r0, r7
 8003e68:	f010 fa26 	bl	80142b8 <memset>
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 8003e6c:	9b00      	ldr	r3, [sp, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2bfe      	cmp	r3, #254	; 0xfe
 8003e72:	d137      	bne.n	8003ee4 <LoadROsnippets+0xe8>
 8003e74:	3614      	adds	r6, #20
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 8003e76:	455e      	cmp	r6, fp
 8003e78:	d034      	beq.n	8003ee4 <LoadROsnippets+0xe8>
 8003e7a:	0028      	movs	r0, r5
 8003e7c:	3014      	adds	r0, #20
{
 8003e7e:	002b      	movs	r3, r5
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 8003e80:	1b79      	subs	r1, r7, r5
 8003e82:	781a      	ldrb	r2, [r3, #0]
 8003e84:	54ca      	strb	r2, [r1, r3]
 8003e86:	3301      	adds	r3, #1
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 8003e88:	4283      	cmp	r3, r0
 8003e8a:	d1fa      	bne.n	8003e82 <LoadROsnippets+0x86>
 8003e8c:	3514      	adds	r5, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8003e8e:	46b2      	mov	sl, r6
 8003e90:	2214      	movs	r2, #20
 8003e92:	9901      	ldr	r1, [sp, #4]
 8003e94:	0030      	movs	r0, r6
 8003e96:	f010 fa06 	bl	80142a6 <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003e9a:	2214      	movs	r2, #20
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	0038      	movs	r0, r7
 8003ea0:	f010 fa0a 	bl	80142b8 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003ea4:	9500      	str	r5, [sp, #0]
 8003ea6:	782a      	ldrb	r2, [r5, #0]
 8003ea8:	1c93      	adds	r3, r2, #2
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d9c0      	bls.n	8003e32 <LoadROsnippets+0x36>
 8003eb0:	0039      	movs	r1, r7
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003eb2:	2400      	movs	r4, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 8003eb4:	700a      	strb	r2, [r1, #0]
			++currentAdd; ++i;
 8003eb6:	3501      	adds	r5, #1
 8003eb8:	3401      	adds	r4, #1
 8003eba:	b2e4      	uxtb	r4, r4
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003ebc:	9500      	str	r5, [sp, #0]
 8003ebe:	782a      	ldrb	r2, [r5, #0]
 8003ec0:	1c93      	adds	r3, r2, #2
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d9b5      	bls.n	8003e34 <LoadROsnippets+0x38>
 8003ec8:	3101      	adds	r1, #1
 8003eca:	2c32      	cmp	r4, #50	; 0x32
 8003ecc:	d1f2      	bne.n	8003eb4 <LoadROsnippets+0xb8>
 8003ece:	e7b1      	b.n	8003e34 <LoadROsnippets+0x38>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 8003ed0:	2214      	movs	r2, #20
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4650      	mov	r0, sl
 8003ed6:	f010 f9ef 	bl	80142b8 <memset>
			free(snipBuffer);			
 8003eda:	0038      	movs	r0, r7
 8003edc:	f00f ffa0 	bl	8013e20 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003ee0:	200e      	movs	r0, #14
 8003ee2:	e003      	b.n	8003eec <LoadROsnippets+0xf0>
	free(snipBuffer);
 8003ee4:	0038      	movs	r0, r7
 8003ee6:	f00f ff9b 	bl	8013e20 <free>
	return BOS_OK;
 8003eea:	2000      	movs	r0, #0
}
 8003eec:	b002      	add	sp, #8
 8003eee:	bc1c      	pop	{r2, r3, r4}
 8003ef0:	4691      	mov	r9, r2
 8003ef2:	469a      	mov	sl, r3
 8003ef4:	46a3      	mov	fp, r4
 8003ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 8003ef8:	20fb      	movs	r0, #251	; 0xfb
 8003efa:	e7f7      	b.n	8003eec <LoadROsnippets+0xf0>
 8003efc:	0801dc00 	.word	0x0801dc00
 8003f00:	20006a88 	.word	0x20006a88
 8003f04:	200014e3 	.word	0x200014e3

08003f08 <LoadROtopology>:
{
 8003f08:	b5f0      	push	{r4, r5, r6, r7, lr}
	temp = (*(__IO uint16_t*)(RO_START_ADDRESS));
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <LoadROtopology+0x74>)
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
	if (temp == 0xFFFF)				// Memory has been erased
 8003f10:	4a1b      	ldr	r2, [pc, #108]	; (8003f80 <LoadROtopology+0x78>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d025      	beq.n	8003f62 <LoadROtopology+0x5a>
		N = (uint8_t) (temp>>8);
 8003f16:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)	N = 1;
 8003f18:	d02b      	beq.n	8003f72 <LoadROtopology+0x6a>
		N = (uint8_t) (temp>>8);
 8003f1a:	491a      	ldr	r1, [pc, #104]	; (8003f84 <LoadROtopology+0x7c>)
 8003f1c:	700a      	strb	r2, [r1, #0]
		myID = (uint8_t) temp;
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <LoadROtopology+0x80>)
 8003f20:	7013      	strb	r3, [r2, #0]
		for(uint8_t i=1 ; i<=N ; i++)
 8003f22:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <LoadROtopology+0x7c>)
 8003f24:	781d      	ldrb	r5, [r3, #0]
	return result;
 8003f26:	2000      	movs	r0, #0
		for(uint8_t i=1 ; i<=N ; i++)
 8003f28:	2d00      	cmp	r5, #0
 8003f2a:	d019      	beq.n	8003f60 <LoadROtopology+0x58>
 8003f2c:	2401      	movs	r4, #1
	uint16_t add = 2, temp = 0;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	2716      	movs	r7, #22
 8003f32:	4e16      	ldr	r6, [pc, #88]	; (8003f8c <LoadROtopology+0x84>)
 8003f34:	003a      	movs	r2, r7
 8003f36:	4362      	muls	r2, r4
 8003f38:	3a16      	subs	r2, #22
 8003f3a:	1992      	adds	r2, r2, r6
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	3016      	adds	r0, #22
 8003f40:	b280      	uxth	r0, r0
				array[i-1][j] = (*(__IO uint16_t*)(RO_START_ADDRESS+add));
 8003f42:	490e      	ldr	r1, [pc, #56]	; (8003f7c <LoadROtopology+0x74>)
 8003f44:	1859      	adds	r1, r3, r1
 8003f46:	8809      	ldrh	r1, [r1, #0]
 8003f48:	8011      	strh	r1, [r2, #0]
				add += 2;			
 8003f4a:	3302      	adds	r3, #2
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3202      	adds	r2, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8003f50:	4283      	cmp	r3, r0
 8003f52:	d1f6      	bne.n	8003f42 <LoadROtopology+0x3a>
		for(uint8_t i=1 ; i<=N ; i++)
 8003f54:	3401      	adds	r4, #1
 8003f56:	b2e4      	uxtb	r4, r4
				add += 2;			
 8003f58:	0003      	movs	r3, r0
		for(uint8_t i=1 ; i<=N ; i++)
 8003f5a:	42ac      	cmp	r4, r5
 8003f5c:	d9ea      	bls.n	8003f34 <LoadROtopology+0x2c>
	return result;
 8003f5e:	2000      	movs	r0, #0
}
 8003f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N = 1;
 8003f62:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <LoadROtopology+0x7c>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
		myID = 0;
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <LoadROtopology+0x80>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003f6e:	20fa      	movs	r0, #250	; 0xfa
 8003f70:	e7f6      	b.n	8003f60 <LoadROtopology+0x58>
		if (N == 0)	N = 1;
 8003f72:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <LoadROtopology+0x7c>)
 8003f74:	2101      	movs	r1, #1
 8003f76:	7011      	strb	r1, [r2, #0]
 8003f78:	e7d1      	b.n	8003f1e <LoadROtopology+0x16>
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	0801d800 	.word	0x0801d800
 8003f80:	0000ffff 	.word	0x0000ffff
 8003f84:	2000001c 	.word	0x2000001c
 8003f88:	20001298 	.word	0x20001298
 8003f8c:	20000ac0 	.word	0x20000ac0

08003f90 <SaveEEportsDir>:
{
 8003f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f92:	b083      	sub	sp, #12
	for(uint8_t i=1 ; i<=N ; i++)
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <SaveEEportsDir+0x4c>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01a      	beq.n	8003fd2 <SaveEEportsDir+0x42>
 8003f9c:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	9301      	str	r3, [sp, #4]
		if (arrayPortsDir[i-1])
 8003fa2:	4e0f      	ldr	r6, [pc, #60]	; (8003fe0 <SaveEEportsDir+0x50>)
	for(uint8_t i=1 ; i<=N ; i++)
 8003fa4:	4f0d      	ldr	r7, [pc, #52]	; (8003fdc <SaveEEportsDir+0x4c>)
 8003fa6:	e008      	b.n	8003fba <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003fa8:	1c60      	adds	r0, r4, #1
 8003faa:	f006 fe05 	bl	800abb8 <EE_WriteVariable>
 8003fae:	e00a      	b.n	8003fc6 <SaveEEportsDir+0x36>
	for(uint8_t i=1 ; i<=N ; i++)
 8003fb0:	3401      	adds	r4, #1
 8003fb2:	b2e4      	uxtb	r4, r4
 8003fb4:	783b      	ldrb	r3, [r7, #0]
 8003fb6:	42a3      	cmp	r3, r4
 8003fb8:	d30d      	bcc.n	8003fd6 <SaveEEportsDir+0x46>
		if (arrayPortsDir[i-1])
 8003fba:	0025      	movs	r5, r4
 8003fbc:	1e63      	subs	r3, r4, #1
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	5b99      	ldrh	r1, [r3, r6]
 8003fc2:	2900      	cmp	r1, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <SaveEEportsDir+0x18>
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003fc6:	3502      	adds	r5, #2
 8003fc8:	2d1b      	cmp	r5, #27
 8003fca:	ddf1      	ble.n	8003fb0 <SaveEEportsDir+0x20>
			result = BOS_ERR_EEPROM;
 8003fcc:	230a      	movs	r3, #10
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	e7ee      	b.n	8003fb0 <SaveEEportsDir+0x20>
	BOS_Status result = BOS_OK; 
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	9301      	str	r3, [sp, #4]
}
 8003fd6:	9801      	ldr	r0, [sp, #4]
 8003fd8:	b003      	add	sp, #12
 8003fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fdc:	2000001c 	.word	0x2000001c
 8003fe0:	20000ce8 	.word	0x20000ce8

08003fe4 <ClearEEportsDir>:
{
 8003fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe6:	b083      	sub	sp, #12
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8003fe8:	2232      	movs	r2, #50	; 0x32
 8003fea:	2100      	movs	r1, #0
 8003fec:	4813      	ldr	r0, [pc, #76]	; (800403c <ClearEEportsDir+0x58>)
 8003fee:	f010 f963 	bl	80142b8 <memset>
	for(uint8_t i=1 ; i<=N ; i++)
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <ClearEEportsDir+0x5c>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d01a      	beq.n	8004030 <ClearEEportsDir+0x4c>
 8003ffa:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9301      	str	r3, [sp, #4]
		if (arrayPortsDir[i-1])
 8004000:	4e0e      	ldr	r6, [pc, #56]	; (800403c <ClearEEportsDir+0x58>)
	for(uint8_t i=1 ; i<=N ; i++)
 8004002:	4f0f      	ldr	r7, [pc, #60]	; (8004040 <ClearEEportsDir+0x5c>)
 8004004:	e008      	b.n	8004018 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8004006:	1c60      	adds	r0, r4, #1
 8004008:	f006 fdd6 	bl	800abb8 <EE_WriteVariable>
 800400c:	e00a      	b.n	8004024 <ClearEEportsDir+0x40>
	for(uint8_t i=1 ; i<=N ; i++)
 800400e:	3401      	adds	r4, #1
 8004010:	b2e4      	uxtb	r4, r4
 8004012:	783b      	ldrb	r3, [r7, #0]
 8004014:	42a3      	cmp	r3, r4
 8004016:	d30d      	bcc.n	8004034 <ClearEEportsDir+0x50>
		if (arrayPortsDir[i-1])
 8004018:	0025      	movs	r5, r4
 800401a:	1e63      	subs	r3, r4, #1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	5b99      	ldrh	r1, [r3, r6]
 8004020:	2900      	cmp	r1, #0
 8004022:	d1f0      	bne.n	8004006 <ClearEEportsDir+0x22>
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8004024:	3502      	adds	r5, #2
 8004026:	2d1b      	cmp	r5, #27
 8004028:	ddf1      	ble.n	800400e <ClearEEportsDir+0x2a>
			result = BOS_ERR_EEPROM;
 800402a:	230a      	movs	r3, #10
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	e7ee      	b.n	800400e <ClearEEportsDir+0x2a>
	BOS_Status result = BOS_OK; 
 8004030:	2300      	movs	r3, #0
 8004032:	9301      	str	r3, [sp, #4]
}
 8004034:	9801      	ldr	r0, [sp, #4]
 8004036:	b003      	add	sp, #12
 8004038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	20000ce8 	.word	0x20000ce8
 8004040:	2000001c 	.word	0x2000001c

08004044 <LoadEEportsDir>:
{
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(uint8_t i=1 ; i<=N ; i++)
 8004046:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <LoadEEportsDir+0x40>)
 8004048:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 800404a:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 800404c:	2b00      	cmp	r3, #0
 800404e:	d017      	beq.n	8004080 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8004050:	490d      	ldr	r1, [pc, #52]	; (8004088 <LoadEEportsDir+0x44>)
 8004052:	2002      	movs	r0, #2
 8004054:	f006 fd80 	bl	800ab58 <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 8004058:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 800405a:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 800405c:	4f09      	ldr	r7, [pc, #36]	; (8004084 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 800405e:	4e0a      	ldr	r6, [pc, #40]	; (8004088 <LoadEEportsDir+0x44>)
	for(uint8_t i=1 ; i<=N ; i++)
 8004060:	3401      	adds	r4, #1
 8004062:	b2e4      	uxtb	r4, r4
 8004064:	783b      	ldrb	r3, [r7, #0]
 8004066:	42a3      	cmp	r3, r4
 8004068:	d30a      	bcc.n	8004080 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 800406a:	1e61      	subs	r1, r4, #1
 800406c:	0049      	lsls	r1, r1, #1
 800406e:	1871      	adds	r1, r6, r1
 8004070:	1c60      	adds	r0, r4, #1
 8004072:	f006 fd71 	bl	800ab58 <EE_ReadVariable>
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8004076:	1ca3      	adds	r3, r4, #2
 8004078:	2b1b      	cmp	r3, #27
 800407a:	ddf1      	ble.n	8004060 <LoadEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 800407c:	250a      	movs	r5, #10
 800407e:	e7ef      	b.n	8004060 <LoadEEportsDir+0x1c>
}
 8004080:	0028      	movs	r0, r5
 8004082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004084:	2000001c 	.word	0x2000001c
 8004088:	20000ce8 	.word	0x20000ce8

0800408c <SaveEEalias>:
{
 800408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408e:	46d6      	mov	lr, sl
 8004090:	464f      	mov	r7, r9
 8004092:	4646      	mov	r6, r8
 8004094:	b5c0      	push	{r6, r7, lr}
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8004096:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	4698      	mov	r8, r3
		if (moduleAlias[i][0]) 				
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <SaveEEalias+0x7c>)
 800409e:	469a      	mov	sl, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <SaveEEalias+0x80>)
 80040a2:	4699      	mov	r9, r3
 80040a4:	e005      	b.n	80040b2 <SaveEEalias+0x26>
 80040a6:	3601      	adds	r6, #1
 80040a8:	b2f6      	uxtb	r6, r6
 80040aa:	464b      	mov	r3, r9
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	42b3      	cmp	r3, r6
 80040b0:	d324      	bcc.n	80040fc <SaveEEalias+0x70>
		if (moduleAlias[i][0]) 				
 80040b2:	00b3      	lsls	r3, r6, #2
 80040b4:	199b      	adds	r3, r3, r6
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4652      	mov	r2, sl
 80040ba:	5c9b      	ldrb	r3, [r3, r2]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f2      	beq.n	80040a6 <SaveEEalias+0x1a>
 80040c0:	00b5      	lsls	r5, r6, #2
 80040c2:	19ad      	adds	r5, r5, r6
 80040c4:	006d      	lsls	r5, r5, #1
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <SaveEEalias+0x7c>)
 80040c8:	469c      	mov	ip, r3
 80040ca:	4465      	add	r5, ip
 80040cc:	4644      	mov	r4, r8
 80040ce:	341c      	adds	r4, #28
 80040d0:	b2a4      	uxth	r4, r4
 80040d2:	4647      	mov	r7, r8
 80040d4:	3721      	adds	r7, #33	; 0x21
 80040d6:	b2bf      	uxth	r7, r7
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 80040d8:	782b      	ldrb	r3, [r5, #0]
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	7869      	ldrb	r1, [r5, #1]
 80040de:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 80040e0:	b289      	uxth	r1, r1
 80040e2:	0020      	movs	r0, r4
 80040e4:	f006 fd68 	bl	800abb8 <EE_WriteVariable>
 80040e8:	3502      	adds	r5, #2
 80040ea:	3401      	adds	r4, #1
 80040ec:	b2a4      	uxth	r4, r4
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80040ee:	42bc      	cmp	r4, r7
 80040f0:	d1f2      	bne.n	80040d8 <SaveEEalias+0x4c>
 80040f2:	4643      	mov	r3, r8
 80040f4:	3305      	adds	r3, #5
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4698      	mov	r8, r3
 80040fa:	e7d4      	b.n	80040a6 <SaveEEalias+0x1a>
}
 80040fc:	2000      	movs	r0, #0
 80040fe:	bc1c      	pop	{r2, r3, r4}
 8004100:	4690      	mov	r8, r2
 8004102:	4699      	mov	r9, r3
 8004104:	46a2      	mov	sl, r4
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004108:	20001194 	.word	0x20001194
 800410c:	2000001c 	.word	0x2000001c

08004110 <LoadEEalias>:
{
 8004110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004112:	46de      	mov	lr, fp
 8004114:	4657      	mov	r7, sl
 8004116:	464e      	mov	r6, r9
 8004118:	4645      	mov	r5, r8
 800411a:	b5e0      	push	{r5, r6, r7, lr}
 800411c:	b083      	sub	sp, #12
	uint16_t add = 0, temp = 0;
 800411e:	466b      	mov	r3, sp
 8004120:	2200      	movs	r2, #0
 8004122:	80da      	strh	r2, [r3, #6]
 8004124:	241c      	movs	r4, #28
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8004126:	2700      	movs	r7, #0
 8004128:	4b18      	ldr	r3, [pc, #96]	; (800418c <LoadEEalias+0x7c>)
 800412a:	469a      	mov	sl, r3
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 800412c:	469b      	mov	fp, r3
 800412e:	e00c      	b.n	800414a <LoadEEalias+0x3a>
 8004130:	464b      	mov	r3, r9
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	444b      	add	r3, r9
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	445b      	add	r3, fp
 800413a:	2200      	movs	r2, #0
 800413c:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800413e:	3701      	adds	r7, #1
 8004140:	b2ff      	uxtb	r7, r7
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <LoadEEalias+0x80>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	42bb      	cmp	r3, r7
 8004148:	d317      	bcc.n	800417a <LoadEEalias+0x6a>
 800414a:	00bd      	lsls	r5, r7, #2
 800414c:	19ed      	adds	r5, r5, r7
 800414e:	006d      	lsls	r5, r5, #1
 8004150:	4455      	add	r5, sl
 8004152:	1d63      	adds	r3, r4, #5
 8004154:	b29b      	uxth	r3, r3
 8004156:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8004158:	466b      	mov	r3, sp
 800415a:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 800415c:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 800415e:	0031      	movs	r1, r6
 8004160:	0020      	movs	r0, r4
 8004162:	f006 fcf9 	bl	800ab58 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 8004166:	8833      	ldrh	r3, [r6, #0]
 8004168:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	702b      	strb	r3, [r5, #0]
 800416e:	3401      	adds	r4, #1
 8004170:	b2a4      	uxth	r4, r4
 8004172:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8004174:	45a0      	cmp	r8, r4
 8004176:	d1f2      	bne.n	800415e <LoadEEalias+0x4e>
 8004178:	e7da      	b.n	8004130 <LoadEEalias+0x20>
}
 800417a:	2000      	movs	r0, #0
 800417c:	b003      	add	sp, #12
 800417e:	bc3c      	pop	{r2, r3, r4, r5}
 8004180:	4690      	mov	r8, r2
 8004182:	4699      	mov	r9, r3
 8004184:	46a2      	mov	sl, r4
 8004186:	46ab      	mov	fp, r5
 8004188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	20001194 	.word	0x20001194
 8004190:	2000001c 	.word	0x2000001c

08004194 <LoadEEgroup>:
{
 8004194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004196:	46d6      	mov	lr, sl
 8004198:	464f      	mov	r7, r9
 800419a:	4646      	mov	r6, r8
 800419c:	b5c0      	push	{r6, r7, lr}
 800419e:	b082      	sub	sp, #8
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80041a0:	466b      	mov	r3, sp
 80041a2:	2200      	movs	r2, #0
 80041a4:	80da      	strh	r2, [r3, #6]
	for(i=0 ; i<N ; i++)			// N modules
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <LoadEEgroup+0x9c>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01d      	beq.n	80041ea <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80041ae:	2500      	movs	r5, #0
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 80041b0:	4e20      	ldr	r6, [pc, #128]	; (8004234 <LoadEEgroup+0xa0>)
	for(i=0 ; i<N ; i++)			// N modules
 80041b2:	4c1f      	ldr	r4, [pc, #124]	; (8004230 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 80041b4:	b2e9      	uxtb	r1, r5
 80041b6:	0049      	lsls	r1, r1, #1
 80041b8:	1871      	adds	r1, r6, r1
 80041ba:	0028      	movs	r0, r5
 80041bc:	30cb      	adds	r0, #203	; 0xcb
 80041be:	b280      	uxth	r0, r0
 80041c0:	f006 fcca 	bl	800ab58 <EE_ReadVariable>
		add++;
 80041c4:	3501      	adds	r5, #1
 80041c6:	b2ad      	uxth	r5, r5
	for(i=0 ; i<N ; i++)			// N modules
 80041c8:	7822      	ldrb	r2, [r4, #0]
 80041ca:	b2eb      	uxtb	r3, r5
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d8f1      	bhi.n	80041b4 <LoadEEgroup+0x20>
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <LoadEEgroup+0xa4>)
 80041d2:	4699      	mov	r9, r3
 80041d4:	002c      	movs	r4, r5
 80041d6:	3499      	adds	r4, #153	; 0x99
 80041d8:	b2a4      	uxth	r4, r4
 80041da:	35cb      	adds	r5, #203	; 0xcb
 80041dc:	b2ab      	uxth	r3, r5
 80041de:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 80041e0:	466b      	mov	r3, sp
 80041e2:	1d9e      	adds	r6, r3, #6
		groupAlias[i][MaxLengthOfAlias] = '\0';
 80041e4:	2300      	movs	r3, #0
 80041e6:	469a      	mov	sl, r3
 80041e8:	e009      	b.n	80041fe <LoadEEgroup+0x6a>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80041ea:	2500      	movs	r5, #0
 80041ec:	e7f0      	b.n	80041d0 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 80041ee:	464b      	mov	r3, r9
 80041f0:	4652      	mov	r2, sl
 80041f2:	725a      	strb	r2, [r3, #9]
 80041f4:	230a      	movs	r3, #10
 80041f6:	469c      	mov	ip, r3
 80041f8:	44e1      	add	r9, ip
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 80041fa:	4544      	cmp	r4, r8
 80041fc:	d010      	beq.n	8004220 <LoadEEgroup+0x8c>
 80041fe:	1d67      	adds	r7, r4, #5
 8004200:	b2bf      	uxth	r7, r7
	uint16_t add = 0, temp = 0; uint8_t i=0;
 8004202:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8004204:	0031      	movs	r1, r6
 8004206:	0020      	movs	r0, r4
 8004208:	f006 fca6 	bl	800ab58 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 800420c:	8833      	ldrh	r3, [r6, #0]
 800420e:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	702b      	strb	r3, [r5, #0]
 8004214:	3401      	adds	r4, #1
 8004216:	b2a4      	uxth	r4, r4
 8004218:	3502      	adds	r5, #2
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 800421a:	42bc      	cmp	r4, r7
 800421c:	d1f2      	bne.n	8004204 <LoadEEgroup+0x70>
 800421e:	e7e6      	b.n	80041ee <LoadEEgroup+0x5a>
}
 8004220:	2000      	movs	r0, #0
 8004222:	b002      	add	sp, #8
 8004224:	bc1c      	pop	{r2, r3, r4}
 8004226:	4690      	mov	r8, r2
 8004228:	4699      	mov	r9, r3
 800422a:	46a2      	mov	sl, r4
 800422c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	2000001c 	.word	0x2000001c
 8004234:	20000fd8 	.word	0x20000fd8
 8004238:	20000f74 	.word	0x20000f74

0800423c <SaveEEstreams>:
{
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	46de      	mov	lr, fp
 8004240:	4657      	mov	r7, sl
 8004242:	464e      	mov	r6, r9
 8004244:	4645      	mov	r5, r8
 8004246:	b5e0      	push	{r5, r6, r7, lr}
 8004248:	000f      	movs	r7, r1
 800424a:	0016      	movs	r6, r2
 800424c:	4699      	mov	r9, r3
 800424e:	ab0a      	add	r3, sp, #40	; 0x28
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	469b      	mov	fp, r3
 8004254:	ab0b      	add	r3, sp, #44	; 0x2c
 8004256:	781d      	ldrb	r5, [r3, #0]
 8004258:	ab0c      	add	r3, sp, #48	; 0x30
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	469a      	mov	sl, r3
 800425e:	ab0d      	add	r3, sp, #52	; 0x34
 8004260:	781c      	ldrb	r4, [r3, #0]
 8004262:	ab0e      	add	r3, sp, #56	; 0x38
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	4698      	mov	r8, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 8004268:	b281      	uxth	r1, r0
 800426a:	20e4      	movs	r0, #228	; 0xe4
 800426c:	f006 fca4 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 8004270:	0a39      	lsrs	r1, r7, #8
 8004272:	b289      	uxth	r1, r1
 8004274:	20e5      	movs	r0, #229	; 0xe5
 8004276:	f006 fc9f 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 800427a:	b2b9      	uxth	r1, r7
 800427c:	20e6      	movs	r0, #230	; 0xe6
 800427e:	f006 fc9b 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 8004282:	0a31      	lsrs	r1, r6, #8
 8004284:	b289      	uxth	r1, r1
 8004286:	20e7      	movs	r0, #231	; 0xe7
 8004288:	f006 fc96 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 800428c:	b2b1      	uxth	r1, r6
 800428e:	20e8      	movs	r0, #232	; 0xe8
 8004290:	f006 fc92 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 8004294:	464b      	mov	r3, r9
 8004296:	0219      	lsls	r1, r3, #8
 8004298:	4459      	add	r1, fp
 800429a:	b289      	uxth	r1, r1
 800429c:	20e9      	movs	r0, #233	; 0xe9
 800429e:	f006 fc8b 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 80042a2:	022d      	lsls	r5, r5, #8
 80042a4:	4455      	add	r5, sl
 80042a6:	b2a9      	uxth	r1, r5
 80042a8:	20ea      	movs	r0, #234	; 0xea
 80042aa:	f006 fc85 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 80042ae:	0224      	lsls	r4, r4, #8
 80042b0:	4444      	add	r4, r8
 80042b2:	b2a1      	uxth	r1, r4
 80042b4:	20eb      	movs	r0, #235	; 0xeb
 80042b6:	f006 fc7f 	bl	800abb8 <EE_WriteVariable>
}
 80042ba:	2000      	movs	r0, #0
 80042bc:	bc3c      	pop	{r2, r3, r4, r5}
 80042be:	4690      	mov	r8, r2
 80042c0:	4699      	mov	r9, r3
 80042c2:	46a2      	mov	sl, r4
 80042c4:	46ab      	mov	fp, r5
 80042c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080042c8 <LoadEEparams>:
{
 80042c8:	b510      	push	{r4, lr}
 80042ca:	b082      	sub	sp, #8
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 80042cc:	208a      	movs	r0, #138	; 0x8a
 80042ce:	466b      	mov	r3, sp
 80042d0:	1d99      	adds	r1, r3, #6
 80042d2:	0040      	lsls	r0, r0, #1
 80042d4:	f006 fc40 	bl	800ab58 <EE_ReadVariable>
	if (!status1) {
 80042d8:	2800      	cmp	r0, #0
 80042da:	d000      	beq.n	80042de <LoadEEparams+0x16>
 80042dc:	e064      	b.n	80043a8 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 80042de:	466b      	mov	r3, sp
 80042e0:	3306      	adds	r3, #6
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	4a49      	ldr	r2, [pc, #292]	; (800440c <LoadEEparams+0x144>)
 80042e6:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	71d3      	strb	r3, [r2, #7]
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 80042ec:	2016      	movs	r0, #22
 80042ee:	466b      	mov	r3, sp
 80042f0:	1d99      	adds	r1, r3, #6
 80042f2:	30ff      	adds	r0, #255	; 0xff
 80042f4:	f006 fc30 	bl	800ab58 <EE_ReadVariable>
	if (!status1) 
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d15c      	bne.n	80043b6 <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 80042fc:	466b      	mov	r3, sp
 80042fe:	88da      	ldrh	r2, [r3, #6]
 8004300:	4b42      	ldr	r3, [pc, #264]	; (800440c <LoadEEparams+0x144>)
 8004302:	801a      	strh	r2, [r3, #0]
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 8004304:	208b      	movs	r0, #139	; 0x8b
 8004306:	466b      	mov	r3, sp
 8004308:	1d99      	adds	r1, r3, #6
 800430a:	0040      	lsls	r0, r0, #1
 800430c:	f006 fc24 	bl	800ab58 <EE_ReadVariable>
	if (!status1) 
 8004310:	2800      	cmp	r0, #0
 8004312:	d155      	bne.n	80043c0 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime = temp1;
 8004314:	466b      	mov	r3, sp
 8004316:	88da      	ldrh	r2, [r3, #6]
 8004318:	4b3c      	ldr	r3, [pc, #240]	; (800440c <LoadEEparams+0x144>)
 800431a:	805a      	strh	r2, [r3, #2]
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 800431c:	2018      	movs	r0, #24
 800431e:	466b      	mov	r3, sp
 8004320:	1d99      	adds	r1, r3, #6
 8004322:	30ff      	adds	r0, #255	; 0xff
 8004324:	f006 fc18 	bl	800ab58 <EE_ReadVariable>
	if (!status1) {
 8004328:	2800      	cmp	r0, #0
 800432a:	d14e      	bne.n	80043ca <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 800432c:	466b      	mov	r3, sp
 800432e:	3306      	adds	r3, #6
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	4a36      	ldr	r2, [pc, #216]	; (800440c <LoadEEparams+0x144>)
 8004334:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	7153      	strb	r3, [r2, #5]
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 800433a:	208c      	movs	r0, #140	; 0x8c
 800433c:	466b      	mov	r3, sp
 800433e:	1d99      	adds	r1, r3, #6
 8004340:	0040      	lsls	r0, r0, #1
 8004342:	f006 fc09 	bl	800ab58 <EE_ReadVariable>
 8004346:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 8004348:	201a      	movs	r0, #26
 800434a:	a901      	add	r1, sp, #4
 800434c:	30ff      	adds	r0, #255	; 0xff
 800434e:	f006 fc03 	bl	800ab58 <EE_ReadVariable>
	if (!status1 && !status2) 
 8004352:	4304      	orrs	r4, r0
 8004354:	b2a4      	uxth	r4, r4
 8004356:	2c00      	cmp	r4, #0
 8004358:	d13e      	bne.n	80043d8 <LoadEEparams+0x110>
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 800435a:	ab01      	add	r3, sp, #4
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	466a      	mov	r2, sp
 8004362:	3206      	adds	r2, #6
 8004364:	8812      	ldrh	r2, [r2, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	4a28      	ldr	r2, [pc, #160]	; (800440c <LoadEEparams+0x144>)
 800436a:	6093      	str	r3, [r2, #8]
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 800436c:	208d      	movs	r0, #141	; 0x8d
 800436e:	466b      	mov	r3, sp
 8004370:	1d99      	adds	r1, r3, #6
 8004372:	0040      	lsls	r0, r0, #1
 8004374:	f006 fbf0 	bl	800ab58 <EE_ReadVariable>
	if (!status1) {
 8004378:	2800      	cmp	r0, #0
 800437a:	d13b      	bne.n	80043f4 <LoadEEparams+0x12c>
		BOS.daylightsaving = (int8_t)temp1;
 800437c:	466b      	mov	r3, sp
 800437e:	3306      	adds	r3, #6
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	4a22      	ldr	r2, [pc, #136]	; (800440c <LoadEEparams+0x144>)
 8004384:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	7353      	strb	r3, [r2, #13]
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 800438a:	201c      	movs	r0, #28
 800438c:	466b      	mov	r3, sp
 800438e:	1d99      	adds	r1, r3, #6
 8004390:	30ff      	adds	r0, #255	; 0xff
 8004392:	f006 fbe1 	bl	800ab58 <EE_ReadVariable>
	if (!status1) {
 8004396:	2800      	cmp	r0, #0
 8004398:	d032      	beq.n	8004400 <LoadEEparams+0x138>
		BOS.disableCLI = BOS_default.disableCLI;
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <LoadEEparams+0x148>)
 800439c:	7eda      	ldrb	r2, [r3, #27]
 800439e:	4b1b      	ldr	r3, [pc, #108]	; (800440c <LoadEEparams+0x144>)
 80043a0:	76da      	strb	r2, [r3, #27]
}
 80043a2:	2000      	movs	r0, #0
 80043a4:	b002      	add	sp, #8
 80043a6:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 80043a8:	4b18      	ldr	r3, [pc, #96]	; (800440c <LoadEEparams+0x144>)
 80043aa:	4a19      	ldr	r2, [pc, #100]	; (8004410 <LoadEEparams+0x148>)
 80043ac:	7991      	ldrb	r1, [r2, #6]
 80043ae:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 80043b0:	79d2      	ldrb	r2, [r2, #7]
 80043b2:	71da      	strb	r2, [r3, #7]
 80043b4:	e79a      	b.n	80042ec <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <LoadEEparams+0x148>)
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <LoadEEparams+0x144>)
 80043bc:	801a      	strh	r2, [r3, #0]
 80043be:	e7a1      	b.n	8004304 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <LoadEEparams+0x148>)
 80043c2:	885a      	ldrh	r2, [r3, #2]
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <LoadEEparams+0x144>)
 80043c6:	805a      	strh	r2, [r3, #2]
 80043c8:	e7a8      	b.n	800431c <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <LoadEEparams+0x144>)
 80043cc:	4a10      	ldr	r2, [pc, #64]	; (8004410 <LoadEEparams+0x148>)
 80043ce:	7911      	ldrb	r1, [r2, #4]
 80043d0:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 80043d2:	7952      	ldrb	r2, [r2, #5]
 80043d4:	715a      	strb	r2, [r3, #5]
 80043d6:	e7b0      	b.n	800433a <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <LoadEEparams+0x14c>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <LoadEEparams+0x144>)
 80043e2:	22e1      	movs	r2, #225	; 0xe1
 80043e4:	0252      	lsls	r2, r2, #9
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	e7c0      	b.n	800436c <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <LoadEEparams+0x148>)
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	4b07      	ldr	r3, [pc, #28]	; (800440c <LoadEEparams+0x144>)
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	e7bb      	b.n	800436c <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <LoadEEparams+0x144>)
 80043f6:	2218      	movs	r2, #24
 80043f8:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 80043fa:	2200      	movs	r2, #0
 80043fc:	731a      	strb	r2, [r3, #12]
 80043fe:	e7c4      	b.n	800438a <LoadEEparams+0xc2>
		BOS.disableCLI = (uint8_t)temp1;
 8004400:	466b      	mov	r3, sp
 8004402:	88da      	ldrh	r2, [r3, #6]
 8004404:	4b01      	ldr	r3, [pc, #4]	; (800440c <LoadEEparams+0x144>)
 8004406:	76da      	strb	r2, [r3, #27]
 8004408:	e7cb      	b.n	80043a2 <LoadEEparams+0xda>
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	20006a10 	.word	0x20006a10
 8004410:	20000000 	.word	0x20000000
 8004414:	20000abe 	.word	0x20000abe

08004418 <SaveEEparams>:
{
 8004418:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 800441a:	4c1a      	ldr	r4, [pc, #104]	; (8004484 <SaveEEparams+0x6c>)
 800441c:	79e3      	ldrb	r3, [r4, #7]
 800441e:	015b      	lsls	r3, r3, #5
 8004420:	79a1      	ldrb	r1, [r4, #6]
 8004422:	4319      	orrs	r1, r3
 8004424:	208a      	movs	r0, #138	; 0x8a
 8004426:	0040      	lsls	r0, r0, #1
 8004428:	f006 fbc6 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 800442c:	8821      	ldrh	r1, [r4, #0]
 800442e:	2016      	movs	r0, #22
 8004430:	30ff      	adds	r0, #255	; 0xff
 8004432:	f006 fbc1 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 8004436:	8861      	ldrh	r1, [r4, #2]
 8004438:	208b      	movs	r0, #139	; 0x8b
 800443a:	0040      	lsls	r0, r0, #1
 800443c:	f006 fbbc 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 8004440:	7963      	ldrb	r3, [r4, #5]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	7b21      	ldrb	r1, [r4, #12]
 8004446:	4319      	orrs	r1, r3
 8004448:	2018      	movs	r0, #24
 800444a:	30ff      	adds	r0, #255	; 0xff
 800444c:	f006 fbb4 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8004450:	8921      	ldrh	r1, [r4, #8]
 8004452:	208c      	movs	r0, #140	; 0x8c
 8004454:	0040      	lsls	r0, r0, #1
 8004456:	f006 fbaf 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 800445a:	8961      	ldrh	r1, [r4, #10]
 800445c:	201a      	movs	r0, #26
 800445e:	30ff      	adds	r0, #255	; 0xff
 8004460:	f006 fbaa 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8004464:	7b63      	ldrb	r3, [r4, #13]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	7921      	ldrb	r1, [r4, #4]
 800446a:	4319      	orrs	r1, r3
 800446c:	208d      	movs	r0, #141	; 0x8d
 800446e:	0040      	lsls	r0, r0, #1
 8004470:	f006 fba2 	bl	800abb8 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 8004474:	7ee1      	ldrb	r1, [r4, #27]
 8004476:	201c      	movs	r0, #28
 8004478:	30ff      	adds	r0, #255	; 0xff
 800447a:	f006 fb9d 	bl	800abb8 <EE_WriteVariable>
}
 800447e:	2000      	movs	r0, #0
 8004480:	bd10      	pop	{r4, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	20006a10 	.word	0x20006a10

08004488 <EE_FormatForFactoryReset>:
{
 8004488:	b510      	push	{r4, lr}
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <EE_FormatForFactoryReset+0x1c>)
 800448c:	4a06      	ldr	r2, [pc, #24]	; (80044a8 <EE_FormatForFactoryReset+0x20>)
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d006      	beq.n	80044a2 <EE_FormatForFactoryReset+0x1a>
		if (EE_Format() == HAL_OK) 
 8004494:	f006 fc38 	bl	800ad08 <EE_Format>
 8004498:	2800      	cmp	r0, #0
 800449a:	d102      	bne.n	80044a2 <EE_FormatForFactoryReset+0x1a>
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 800449c:	4b02      	ldr	r3, [pc, #8]	; (80044a8 <EE_FormatForFactoryReset+0x20>)
 800449e:	4a01      	ldr	r2, [pc, #4]	; (80044a4 <EE_FormatForFactoryReset+0x1c>)
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	bd10      	pop	{r4, pc}
 80044a4:	beefdead 	.word	0xbeefdead
 80044a8:	20007ff0 	.word	0x20007ff0

080044ac <CheckForTimedButtonPress>:
{
 80044ac:	b510      	push	{r4, lr}
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80044ae:	00c2      	lsls	r2, r0, #3
 80044b0:	1812      	adds	r2, r2, r0
 80044b2:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <CheckForTimedButtonPress+0x74>)
 80044b4:	189b      	adds	r3, r3, r2
 80044b6:	789c      	ldrb	r4, [r3, #2]
	if (pressCounter[port] == t1)	
 80044b8:	0082      	lsls	r2, r0, #2
 80044ba:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <CheckForTimedButtonPress+0x78>)
 80044bc:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80044be:	0163      	lsls	r3, r4, #5
 80044c0:	1b1b      	subs	r3, r3, r4
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	191b      	adds	r3, r3, r4
 80044c6:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 80044c8:	4299      	cmp	r1, r3
 80044ca:	d01c      	beq.n	8004506 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80044cc:	00c2      	lsls	r2, r0, #3
 80044ce:	1812      	adds	r2, r2, r0
 80044d0:	4b13      	ldr	r3, [pc, #76]	; (8004520 <CheckForTimedButtonPress+0x74>)
 80044d2:	189b      	adds	r3, r3, r2
 80044d4:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80044d6:	0163      	lsls	r3, r4, #5
 80044d8:	1b1b      	subs	r3, r3, r4
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	191b      	adds	r3, r3, r4
 80044de:	00db      	lsls	r3, r3, #3
	else if (pressCounter[port] == t2)	
 80044e0:	4299      	cmp	r1, r3
 80044e2:	d017      	beq.n	8004514 <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80044e4:	00c2      	lsls	r2, r0, #3
 80044e6:	1812      	adds	r2, r2, r0
 80044e8:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <CheckForTimedButtonPress+0x74>)
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80044ee:	0163      	lsls	r3, r4, #5
 80044f0:	1b1b      	subs	r3, r3, r4
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	191b      	adds	r3, r3, r4
 80044f6:	00db      	lsls	r3, r3, #3
	else if (pressCounter[port] == t3)	
 80044f8:	4299      	cmp	r1, r3
 80044fa:	d109      	bne.n	8004510 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 80044fc:	0010      	movs	r0, r2
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <CheckForTimedButtonPress+0x74>)
 8004500:	220a      	movs	r2, #10
 8004502:	54c2      	strb	r2, [r0, r3]
 8004504:	e004      	b.n	8004510 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 8004506:	00c3      	lsls	r3, r0, #3
 8004508:	1818      	adds	r0, r3, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <CheckForTimedButtonPress+0x74>)
 800450c:	2209      	movs	r2, #9
 800450e:	54c2      	strb	r2, [r0, r3]
}
 8004510:	2000      	movs	r0, #0
 8004512:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8004514:	0010      	movs	r0, r2
 8004516:	4b02      	ldr	r3, [pc, #8]	; (8004520 <CheckForTimedButtonPress+0x74>)
 8004518:	220a      	movs	r2, #10
 800451a:	54c2      	strb	r2, [r0, r3]
 800451c:	e7f8      	b.n	8004510 <CheckForTimedButtonPress+0x64>
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	20000d6c 	.word	0x20000d6c
 8004524:	20001350 	.word	0x20001350

08004528 <CheckForTimedButtonRelease>:
{
 8004528:	b510      	push	{r4, lr}
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 800452a:	00c2      	lsls	r2, r0, #3
 800452c:	1812      	adds	r2, r2, r0
 800452e:	4b1b      	ldr	r3, [pc, #108]	; (800459c <CheckForTimedButtonRelease+0x74>)
 8004530:	189b      	adds	r3, r3, r2
 8004532:	795c      	ldrb	r4, [r3, #5]
	if (releaseCounter[port] == t1)	
 8004534:	0082      	lsls	r2, r0, #2
 8004536:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <CheckForTimedButtonRelease+0x78>)
 8004538:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800453a:	0163      	lsls	r3, r4, #5
 800453c:	1b1b      	subs	r3, r3, r4
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	191b      	adds	r3, r3, r4
 8004542:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 8004544:	4299      	cmp	r1, r3
 8004546:	d01c      	beq.n	8004582 <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8004548:	00c2      	lsls	r2, r0, #3
 800454a:	1812      	adds	r2, r2, r0
 800454c:	4b13      	ldr	r3, [pc, #76]	; (800459c <CheckForTimedButtonRelease+0x74>)
 800454e:	189b      	adds	r3, r3, r2
 8004550:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8004552:	0163      	lsls	r3, r4, #5
 8004554:	1b1b      	subs	r3, r3, r4
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	191b      	adds	r3, r3, r4
 800455a:	00db      	lsls	r3, r3, #3
	else if (releaseCounter[port] == t2)	
 800455c:	4299      	cmp	r1, r3
 800455e:	d017      	beq.n	8004590 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8004560:	00c2      	lsls	r2, r0, #3
 8004562:	1812      	adds	r2, r2, r0
 8004564:	4b0d      	ldr	r3, [pc, #52]	; (800459c <CheckForTimedButtonRelease+0x74>)
 8004566:	189b      	adds	r3, r3, r2
 8004568:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800456a:	0163      	lsls	r3, r4, #5
 800456c:	1b1b      	subs	r3, r3, r4
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	191b      	adds	r3, r3, r4
 8004572:	00db      	lsls	r3, r3, #3
	else if (releaseCounter[port] == t3)	
 8004574:	4299      	cmp	r1, r3
 8004576:	d109      	bne.n	800458c <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 8004578:	0010      	movs	r0, r2
 800457a:	4b08      	ldr	r3, [pc, #32]	; (800459c <CheckForTimedButtonRelease+0x74>)
 800457c:	220d      	movs	r2, #13
 800457e:	54c2      	strb	r2, [r0, r3]
 8004580:	e004      	b.n	800458c <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 8004582:	00c3      	lsls	r3, r0, #3
 8004584:	1818      	adds	r0, r3, r0
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <CheckForTimedButtonRelease+0x74>)
 8004588:	220c      	movs	r2, #12
 800458a:	54c2      	strb	r2, [r0, r3]
}
 800458c:	2000      	movs	r0, #0
 800458e:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 8004590:	0010      	movs	r0, r2
 8004592:	4b02      	ldr	r3, [pc, #8]	; (800459c <CheckForTimedButtonRelease+0x74>)
 8004594:	220d      	movs	r2, #13
 8004596:	54c2      	strb	r2, [r0, r3]
 8004598:	e7f8      	b.n	800458c <CheckForTimedButtonRelease+0x64>
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	20000d6c 	.word	0x20000d6c
 80045a0:	20001378 	.word	0x20001378

080045a4 <buttonPressedCallback>:
}
 80045a4:	4770      	bx	lr

080045a6 <buttonReleasedCallback>:
}
 80045a6:	4770      	bx	lr

080045a8 <buttonClickedCallback>:
}
 80045a8:	4770      	bx	lr

080045aa <buttonDblClickedCallback>:
}
 80045aa:	4770      	bx	lr

080045ac <buttonPressedForXCallback>:
}
 80045ac:	4770      	bx	lr

080045ae <buttonReleasedForYCallback>:
}
 80045ae:	4770      	bx	lr

080045b0 <User_MessagingParser>:
}
 80045b0:	2001      	movs	r0, #1
 80045b2:	4770      	bx	lr

080045b4 <RegisterUserCLICommands>:
}
 80045b4:	4770      	bx	lr
	...

080045b8 <RTC_CalendarConfig>:
{
 80045b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ba:	46ce      	mov	lr, r9
 80045bc:	b500      	push	{lr}
 80045be:	b08e      	sub	sp, #56	; 0x38
	char comDate[] = __DATE__, comTime[] = __TIME__;
 80045c0:	ac05      	add	r4, sp, #20
 80045c2:	4b34      	ldr	r3, [pc, #208]	; (8004694 <RTC_CalendarConfig+0xdc>)
 80045c4:	0022      	movs	r2, r4
 80045c6:	cb43      	ldmia	r3!, {r0, r1, r6}
 80045c8:	c243      	stmia	r2!, {r0, r1, r6}
 80045ca:	aa02      	add	r2, sp, #8
 80045cc:	4b32      	ldr	r3, [pc, #200]	; (8004698 <RTC_CalendarConfig+0xe0>)
 80045ce:	cb03      	ldmia	r3!, {r0, r1}
 80045d0:	c203      	stmia	r2!, {r0, r1}
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 80045d6:	2015      	movs	r0, #21
 80045d8:	ab02      	add	r3, sp, #8
 80045da:	469c      	mov	ip, r3
 80045dc:	4460      	add	r0, ip
 80045de:	f00f fbd2 	bl	8013d86 <atoi>
 80045e2:	b2c3      	uxtb	r3, r0
 80045e4:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 80045e6:	2600      	movs	r6, #0
 80045e8:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 80045ea:	a806      	add	r0, sp, #24
 80045ec:	f00f fbcb 	bl	8013d86 <atoi>
 80045f0:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 80045f2:	70e6      	strb	r6, [r4, #3]
 80045f4:	2401      	movs	r4, #1
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 80045f6:	4e29      	ldr	r6, [pc, #164]	; (800469c <RTC_CalendarConfig+0xe4>)
 80045f8:	e002      	b.n	8004600 <RTC_CalendarConfig+0x48>
 80045fa:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 80045fc:	2c0d      	cmp	r4, #13
 80045fe:	d009      	beq.n	8004614 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 8004600:	00a3      	lsls	r3, r4, #2
 8004602:	3b04      	subs	r3, #4
 8004604:	58f1      	ldr	r1, [r6, r3]
 8004606:	a805      	add	r0, sp, #20
 8004608:	f7fb fd7c 	bl	8000104 <strcmp>
 800460c:	2800      	cmp	r0, #0
 800460e:	d1f4      	bne.n	80045fa <RTC_CalendarConfig+0x42>
			month = i + 1;
 8004610:	b2e5      	uxtb	r5, r4
 8004612:	e7f2      	b.n	80045fa <RTC_CalendarConfig+0x42>
	seconds = atoi(comTime + 6);
 8004614:	ab02      	add	r3, sp, #8
 8004616:	1d98      	adds	r0, r3, #6
 8004618:	f00f fbb5 	bl	8013d86 <atoi>
 800461c:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800461e:	ac05      	add	r4, sp, #20
 8004620:	2600      	movs	r6, #0
 8004622:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 8004624:	ab02      	add	r3, sp, #8
 8004626:	1cd8      	adds	r0, r3, #3
 8004628:	f00f fbad 	bl	8013d86 <atoi>
 800462c:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800462e:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 8004630:	a802      	add	r0, sp, #8
 8004632:	f00f fba8 	bl	8013d86 <atoi>
 8004636:	0004      	movs	r4, r0
  sdatestructure.Year = year;
 8004638:	a90d      	add	r1, sp, #52	; 0x34
 800463a:	464b      	mov	r3, r9
 800463c:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800463e:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 8004640:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 8004642:	2301      	movs	r3, #1
 8004644:	700b      	strb	r3, [r1, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 8004646:	2200      	movs	r2, #0
 8004648:	4815      	ldr	r0, [pc, #84]	; (80046a0 <RTC_CalendarConfig+0xe8>)
 800464a:	f00e fc41 	bl	8012ed0 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800464e:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 8004650:	2800      	cmp	r0, #0
 8004652:	d119      	bne.n	8004688 <RTC_CalendarConfig+0xd0>
  stimestructure.Hours = hours;
 8004654:	a908      	add	r1, sp, #32
 8004656:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 8004658:	9b01      	ldr	r3, [sp, #4]
 800465a:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800465c:	9b00      	ldr	r3, [sp, #0]
 800465e:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 8004660:	2300      	movs	r3, #0
 8004662:	720b      	strb	r3, [r1, #8]
 8004664:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <RTC_CalendarConfig+0xec>)
 8004666:	3018      	adds	r0, #24
 8004668:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800466a:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800466c:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800466e:	2200      	movs	r2, #0
 8004670:	480b      	ldr	r0, [pc, #44]	; (80046a0 <RTC_CalendarConfig+0xe8>)
 8004672:	f00e fba7 	bl	8012dc4 <HAL_RTC_SetTime>
		return BOS_ERROR;
 8004676:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 8004678:	2800      	cmp	r0, #0
 800467a:	d105      	bne.n	8004688 <RTC_CalendarConfig+0xd0>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800467c:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <RTC_CalendarConfig+0xf0>)
 800467e:	2101      	movs	r1, #1
 8004680:	4807      	ldr	r0, [pc, #28]	; (80046a0 <RTC_CalendarConfig+0xe8>)
 8004682:	f00e fce9 	bl	8013058 <HAL_RTCEx_BKUPWrite>
	return BOS_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	0018      	movs	r0, r3
 800468a:	b00e      	add	sp, #56	; 0x38
 800468c:	bc04      	pop	{r2}
 800468e:	4691      	mov	r9, r2
 8004690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	0801910c 	.word	0x0801910c
 8004698:	08019118 	.word	0x08019118
 800469c:	08019820 	.word	0x08019820
 80046a0:	20006a68 	.word	0x20006a68
 80046a4:	20006a10 	.word	0x20006a10
 80046a8:	000032f2 	.word	0x000032f2

080046ac <RTC_Init>:
{
 80046ac:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 80046ae:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <RTC_Init+0x74>)
 80046b0:	6a11      	ldr	r1, [r2, #32]
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	430b      	orrs	r3, r1
 80046b8:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 80046ba:	481a      	ldr	r0, [pc, #104]	; (8004724 <RTC_Init+0x78>)
 80046bc:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <RTC_Init+0x7c>)
 80046be:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 80046c0:	2300      	movs	r3, #0
 80046c2:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 80046c4:	227c      	movs	r2, #124	; 0x7c
 80046c6:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 80046c8:	4a18      	ldr	r2, [pc, #96]	; (800472c <RTC_Init+0x80>)
 80046ca:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 80046cc:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80046ce:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80046d0:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 80046d2:	f00e fb19 	bl	8012d08 <HAL_RTC_Init>
 80046d6:	23ff      	movs	r3, #255	; 0xff
 80046d8:	2800      	cmp	r0, #0
 80046da:	d11e      	bne.n	800471a <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 80046dc:	2101      	movs	r1, #1
 80046de:	4811      	ldr	r0, [pc, #68]	; (8004724 <RTC_Init+0x78>)
 80046e0:	f00e fcc0 	bl	8013064 <HAL_RTCEx_BKUPRead>
 80046e4:	4b12      	ldr	r3, [pc, #72]	; (8004730 <RTC_Init+0x84>)
 80046e6:	4298      	cmp	r0, r3
 80046e8:	d10e      	bne.n	8004708 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 80046ea:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <RTC_Init+0x74>)
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	d502      	bpl.n	80046f8 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <RTC_Init+0x88>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <RTC_Init+0x74>)
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	015b      	lsls	r3, r3, #5
 80046fe:	d505      	bpl.n	800470c <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <RTC_Init+0x88>)
 8004702:	2201      	movs	r2, #1
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	e001      	b.n	800470c <RTC_Init+0x60>
    RTC_CalendarConfig();
 8004708:	f7ff ff56 	bl	80045b8 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <RTC_Init+0x74>)
 800470e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	045b      	lsls	r3, r3, #17
 8004714:	430b      	orrs	r3, r1
 8004716:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	0018      	movs	r0, r3
 800471c:	bd10      	pop	{r4, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	40021000 	.word	0x40021000
 8004724:	20006a68 	.word	0x20006a68
 8004728:	40002800 	.word	0x40002800
 800472c:	000007cf 	.word	0x000007cf
 8004730:	000032f2 	.word	0x000032f2
 8004734:	20000d4e 	.word	0x20000d4e

08004738 <IsModuleParameter>:
{
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	0006      	movs	r6, r0
 800473c:	4d08      	ldr	r5, [pc, #32]	; (8004760 <IsModuleParameter+0x28>)
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 800473e:	2400      	movs	r4, #0
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 8004740:	6829      	ldr	r1, [r5, #0]
 8004742:	0030      	movs	r0, r6
 8004744:	f7fb fcde 	bl	8000104 <strcmp>
 8004748:	2800      	cmp	r0, #0
 800474a:	d006      	beq.n	800475a <IsModuleParameter+0x22>
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 800474c:	3401      	adds	r4, #1
 800474e:	b2e4      	uxtb	r4, r4
 8004750:	350c      	adds	r5, #12
 8004752:	2c0d      	cmp	r4, #13
 8004754:	d1f4      	bne.n	8004740 <IsModuleParameter+0x8>
	return 0;
 8004756:	2000      	movs	r0, #0
 8004758:	e001      	b.n	800475e <IsModuleParameter+0x26>
			return i+1;
 800475a:	3401      	adds	r4, #1
 800475c:	b2e0      	uxtb	r0, r4
}
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	20000048 	.word	0x20000048

08004764 <IsMathOperator>:
{
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	0004      	movs	r4, r0
		if (!strcmp(string, "="))
 8004768:	491b      	ldr	r1, [pc, #108]	; (80047d8 <IsMathOperator+0x74>)
 800476a:	f7fb fccb 	bl	8000104 <strcmp>
 800476e:	0006      	movs	r6, r0
 8004770:	2506      	movs	r5, #6
 8004772:	2e00      	cmp	r6, #0
 8004774:	d023      	beq.n	80047be <IsMathOperator+0x5a>
		else if (!strcmp(string, ">"))
 8004776:	4919      	ldr	r1, [pc, #100]	; (80047dc <IsMathOperator+0x78>)
 8004778:	0020      	movs	r0, r4
 800477a:	f7fb fcc3 	bl	8000104 <strcmp>
 800477e:	2800      	cmp	r0, #0
 8004780:	d01f      	beq.n	80047c2 <IsMathOperator+0x5e>
		else if (!strcmp(string, "<"))
 8004782:	4917      	ldr	r1, [pc, #92]	; (80047e0 <IsMathOperator+0x7c>)
 8004784:	0020      	movs	r0, r4
 8004786:	f7fb fcbd 	bl	8000104 <strcmp>
 800478a:	2800      	cmp	r0, #0
 800478c:	d01b      	beq.n	80047c6 <IsMathOperator+0x62>
		else if (!strcmp(string, ">="))
 800478e:	4915      	ldr	r1, [pc, #84]	; (80047e4 <IsMathOperator+0x80>)
 8004790:	0020      	movs	r0, r4
 8004792:	f7fb fcb7 	bl	8000104 <strcmp>
 8004796:	2800      	cmp	r0, #0
 8004798:	d017      	beq.n	80047ca <IsMathOperator+0x66>
		else if (!strcmp(string, "<="))
 800479a:	4913      	ldr	r1, [pc, #76]	; (80047e8 <IsMathOperator+0x84>)
 800479c:	0020      	movs	r0, r4
 800479e:	f7fb fcb1 	bl	8000104 <strcmp>
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d013      	beq.n	80047ce <IsMathOperator+0x6a>
		else if (!strcmp(string, "!="))
 80047a6:	4911      	ldr	r1, [pc, #68]	; (80047ec <IsMathOperator+0x88>)
 80047a8:	0020      	movs	r0, r4
 80047aa:	f7fb fcab 	bl	8000104 <strcmp>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d00f      	beq.n	80047d2 <IsMathOperator+0x6e>
 80047b2:	3d01      	subs	r5, #1
 80047b4:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	d1db      	bne.n	8004772 <IsMathOperator+0xe>
	return 0;
 80047ba:	2000      	movs	r0, #0
}
 80047bc:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 80047be:	2001      	movs	r0, #1
 80047c0:	e7fc      	b.n	80047bc <IsMathOperator+0x58>
			return MATH_GREATER;
 80047c2:	2002      	movs	r0, #2
 80047c4:	e7fa      	b.n	80047bc <IsMathOperator+0x58>
			return MATH_SMALLER;
 80047c6:	2003      	movs	r0, #3
 80047c8:	e7f8      	b.n	80047bc <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 80047ca:	2004      	movs	r0, #4
 80047cc:	e7f6      	b.n	80047bc <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 80047ce:	2005      	movs	r0, #5
 80047d0:	e7f4      	b.n	80047bc <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 80047d2:	2006      	movs	r0, #6
 80047d4:	e7f2      	b.n	80047bc <IsMathOperator+0x58>
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	080190f4 	.word	0x080190f4
 80047dc:	080190f8 	.word	0x080190f8
 80047e0:	080190fc 	.word	0x080190fc
 80047e4:	08019100 	.word	0x08019100
 80047e8:	08019104 	.word	0x08019104
 80047ec:	08019108 	.word	0x08019108

080047f0 <SystemClock_Config>:
{
 80047f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f2:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047f4:	2401      	movs	r4, #1
 80047f6:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047f8:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047fa:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80047fc:	2310      	movs	r3, #16
 80047fe:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004800:	2702      	movs	r7, #2
 8004802:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004804:	2680      	movs	r6, #128	; 0x80
 8004806:	0276      	lsls	r6, r6, #9
 8004808:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	035b      	lsls	r3, r3, #13
 800480e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004810:	2500      	movs	r5, #0
 8004812:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004814:	a80d      	add	r0, sp, #52	; 0x34
 8004816:	f00d fd2f 	bl	8012278 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800481a:	2307      	movs	r3, #7
 800481c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800481e:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004820:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004822:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8004824:	2101      	movs	r1, #1
 8004826:	a809      	add	r0, sp, #36	; 0x24
 8004828:	f00d ffe8 	bl	80127fc <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800482c:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <SystemClock_Config+0xa8>)
 800482e:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004830:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004832:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004834:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8004836:	a802      	add	r0, sp, #8
 8004838:	f00e f98e 	bl	8012b58 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800483c:	4d17      	ldr	r5, [pc, #92]	; (800489c <SystemClock_Config+0xac>)
 800483e:	69ea      	ldr	r2, [r5, #28]
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	0549      	lsls	r1, r1, #21
 8004844:	430a      	orrs	r2, r1
 8004846:	61ea      	str	r2, [r5, #28]
 8004848:	69eb      	ldr	r3, [r5, #28]
 800484a:	400b      	ands	r3, r1
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 8004850:	f00d fd08 	bl	8012264 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004854:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8004856:	23c0      	movs	r3, #192	; 0xc0
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800485c:	a802      	add	r0, sp, #8
 800485e:	f00e f97b 	bl	8012b58 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004862:	f00e f955 	bl	8012b10 <HAL_RCC_GetHCLKFreq>
 8004866:	21fa      	movs	r1, #250	; 0xfa
 8004868:	0089      	lsls	r1, r1, #2
 800486a:	f7fb fc71 	bl	8000150 <__udivsi3>
 800486e:	f00c f8b9 	bl	80109e4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004872:	2004      	movs	r0, #4
 8004874:	f00c f8d2 	bl	8010a1c <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 8004878:	69ab      	ldr	r3, [r5, #24]
 800487a:	4323      	orrs	r3, r4
 800487c:	61ab      	str	r3, [r5, #24]
 800487e:	69ab      	ldr	r3, [r5, #24]
 8004880:	401c      	ands	r4, r3
 8004882:	9401      	str	r4, [sp, #4]
 8004884:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004886:	2001      	movs	r0, #1
 8004888:	2200      	movs	r2, #0
 800488a:	2100      	movs	r1, #0
 800488c:	4240      	negs	r0, r0
 800488e:	f00c f861 	bl	8010954 <HAL_NVIC_SetPriority>
}
 8004892:	b01b      	add	sp, #108	; 0x6c
 8004894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	00040003 	.word	0x00040003
 800489c:	40021000 	.word	0x40021000

080048a0 <vRegisterCLICommands>:
{
 80048a0:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 80048a2:	482f      	ldr	r0, [pc, #188]	; (8004960 <vRegisterCLICommands+0xc0>)
 80048a4:	f00a f88a 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 80048a8:	482e      	ldr	r0, [pc, #184]	; (8004964 <vRegisterCLICommands+0xc4>)
 80048aa:	f00a f887 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 80048ae:	482e      	ldr	r0, [pc, #184]	; (8004968 <vRegisterCLICommands+0xc8>)
 80048b0:	f00a f884 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 80048b4:	482d      	ldr	r0, [pc, #180]	; (800496c <vRegisterCLICommands+0xcc>)
 80048b6:	f00a f881 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &exploreCommandDefinition );
 80048ba:	482d      	ldr	r0, [pc, #180]	; (8004970 <vRegisterCLICommands+0xd0>)
 80048bc:	f00a f87e 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 80048c0:	482c      	ldr	r0, [pc, #176]	; (8004974 <vRegisterCLICommands+0xd4>)
 80048c2:	f00a f87b 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 80048c6:	482c      	ldr	r0, [pc, #176]	; (8004978 <vRegisterCLICommands+0xd8>)
 80048c8:	f00a f878 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 80048cc:	482b      	ldr	r0, [pc, #172]	; (800497c <vRegisterCLICommands+0xdc>)
 80048ce:	f00a f875 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 80048d2:	482b      	ldr	r0, [pc, #172]	; (8004980 <vRegisterCLICommands+0xe0>)
 80048d4:	f00a f872 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 80048d8:	482a      	ldr	r0, [pc, #168]	; (8004984 <vRegisterCLICommands+0xe4>)
 80048da:	f00a f86f 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 80048de:	482a      	ldr	r0, [pc, #168]	; (8004988 <vRegisterCLICommands+0xe8>)
 80048e0:	f00a f86c 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 80048e4:	4829      	ldr	r0, [pc, #164]	; (800498c <vRegisterCLICommands+0xec>)
 80048e6:	f00a f869 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 80048ea:	4829      	ldr	r0, [pc, #164]	; (8004990 <vRegisterCLICommands+0xf0>)
 80048ec:	f00a f866 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 80048f0:	4828      	ldr	r0, [pc, #160]	; (8004994 <vRegisterCLICommands+0xf4>)
 80048f2:	f00a f863 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 80048f6:	4828      	ldr	r0, [pc, #160]	; (8004998 <vRegisterCLICommands+0xf8>)
 80048f8:	f00a f860 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 80048fc:	4827      	ldr	r0, [pc, #156]	; (800499c <vRegisterCLICommands+0xfc>)
 80048fe:	f00a f85d 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 8004902:	4827      	ldr	r0, [pc, #156]	; (80049a0 <vRegisterCLICommands+0x100>)
 8004904:	f00a f85a 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 8004908:	4826      	ldr	r0, [pc, #152]	; (80049a4 <vRegisterCLICommands+0x104>)
 800490a:	f00a f857 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 800490e:	4826      	ldr	r0, [pc, #152]	; (80049a8 <vRegisterCLICommands+0x108>)
 8004910:	f00a f854 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 8004914:	4825      	ldr	r0, [pc, #148]	; (80049ac <vRegisterCLICommands+0x10c>)
 8004916:	f00a f851 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 800491a:	4825      	ldr	r0, [pc, #148]	; (80049b0 <vRegisterCLICommands+0x110>)
 800491c:	f00a f84e 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 8004920:	4824      	ldr	r0, [pc, #144]	; (80049b4 <vRegisterCLICommands+0x114>)
 8004922:	f00a f84b 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 8004926:	4824      	ldr	r0, [pc, #144]	; (80049b8 <vRegisterCLICommands+0x118>)
 8004928:	f00a f848 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 800492c:	4823      	ldr	r0, [pc, #140]	; (80049bc <vRegisterCLICommands+0x11c>)
 800492e:	f00a f845 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 8004932:	4823      	ldr	r0, [pc, #140]	; (80049c0 <vRegisterCLICommands+0x120>)
 8004934:	f00a f842 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 8004938:	4822      	ldr	r0, [pc, #136]	; (80049c4 <vRegisterCLICommands+0x124>)
 800493a:	f00a f83f 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 800493e:	4822      	ldr	r0, [pc, #136]	; (80049c8 <vRegisterCLICommands+0x128>)
 8004940:	f00a f83c 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 8004944:	4821      	ldr	r0, [pc, #132]	; (80049cc <vRegisterCLICommands+0x12c>)
 8004946:	f00a f839 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 800494a:	4821      	ldr	r0, [pc, #132]	; (80049d0 <vRegisterCLICommands+0x130>)
 800494c:	f00a f836 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 29;
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <vRegisterCLICommands+0x134>)
 8004952:	221d      	movs	r2, #29
 8004954:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8004956:	f007 fa63 	bl	800be20 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800495a:	f7ff fe2b 	bl	80045b4 <RegisterUserCLICommands>
}
 800495e:	bd10      	pop	{r4, pc}
 8004960:	08019a74 	.word	0x08019a74
 8004964:	08019a08 	.word	0x08019a08
 8004968:	080199a4 	.word	0x080199a4
 800496c:	080192fc 	.word	0x080192fc
 8004970:	08019484 	.word	0x08019484
 8004974:	08019c28 	.word	0x08019c28
 8004978:	0801991c 	.word	0x0801991c
 800497c:	08019674 	.word	0x08019674
 8004980:	0801a0b8 	.word	0x0801a0b8
 8004984:	08019778 	.word	0x08019778
 8004988:	08019ce4 	.word	0x08019ce4
 800498c:	080191e4 	.word	0x080191e4
 8004990:	08019c18 	.word	0x08019c18
 8004994:	08019f28 	.word	0x08019f28
 8004998:	080195c8 	.word	0x080195c8
 800499c:	08019408 	.word	0x08019408
 80049a0:	0801af30 	.word	0x0801af30
 80049a4:	08019370 	.word	0x08019370
 80049a8:	08019d30 	.word	0x08019d30
 80049ac:	0801afa4 	.word	0x0801afa4
 80049b0:	080196f4 	.word	0x080196f4
 80049b4:	080194b4 	.word	0x080194b4
 80049b8:	0801a0a8 	.word	0x0801a0a8
 80049bc:	08019168 	.word	0x08019168
 80049c0:	08019964 	.word	0x08019964
 80049c4:	08019474 	.word	0x08019474
 80049c8:	08019348 	.word	0x08019348
 80049cc:	0801af7c 	.word	0x0801af7c
 80049d0:	0801aec4 	.word	0x0801aec4
 80049d4:	20006958 	.word	0x20006958

080049d8 <GetUart>:
	switch (port)
 80049d8:	2806      	cmp	r0, #6
 80049da:	d80d      	bhi.n	80049f8 <GetUart+0x20>
 80049dc:	0080      	lsls	r0, r0, #2
 80049de:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <GetUart+0x28>)
 80049e0:	581b      	ldr	r3, [r3, r0]
 80049e2:	469f      	mov	pc, r3
			return P2uart;
 80049e4:	4807      	ldr	r0, [pc, #28]	; (8004a04 <GetUart+0x2c>)
 80049e6:	e00a      	b.n	80049fe <GetUart+0x26>
			return P3uart;
 80049e8:	4807      	ldr	r0, [pc, #28]	; (8004a08 <GetUart+0x30>)
 80049ea:	e008      	b.n	80049fe <GetUart+0x26>
			return P4uart;
 80049ec:	4807      	ldr	r0, [pc, #28]	; (8004a0c <GetUart+0x34>)
 80049ee:	e006      	b.n	80049fe <GetUart+0x26>
			return P5uart;
 80049f0:	4807      	ldr	r0, [pc, #28]	; (8004a10 <GetUart+0x38>)
 80049f2:	e004      	b.n	80049fe <GetUart+0x26>
			return P6uart;
 80049f4:	4807      	ldr	r0, [pc, #28]	; (8004a14 <GetUart+0x3c>)
 80049f6:	e002      	b.n	80049fe <GetUart+0x26>
			return 0;
 80049f8:	2000      	movs	r0, #0
 80049fa:	e000      	b.n	80049fe <GetUart+0x26>
			return P1uart;	
 80049fc:	4806      	ldr	r0, [pc, #24]	; (8004a18 <GetUart+0x40>)
}
 80049fe:	4770      	bx	lr
 8004a00:	08018cec 	.word	0x08018cec
 8004a04:	20006d58 	.word	0x20006d58
 8004a08:	20006c78 	.word	0x20006c78
 8004a0c:	20006b28 	.word	0x20006b28
 8004a10:	20006c08 	.word	0x20006c08
 8004a14:	20006b98 	.word	0x20006b98
 8004a18:	20006ce8 	.word	0x20006ce8

08004a1c <SetupDMAStreams>:
{
 8004a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	000e      	movs	r6, r1
 8004a22:	0015      	movs	r5, r2
 8004a24:	220f      	movs	r2, #15
 8004a26:	446a      	add	r2, sp
 8004a28:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8004a2a:	001c      	movs	r4, r3
 8004a2c:	ab0a      	add	r3, sp, #40	; 0x28
 8004a2e:	781f      	ldrb	r7, [r3, #0]
 8004a30:	42bc      	cmp	r4, r7
 8004a32:	d057      	beq.n	8004ae4 <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8004a34:	2c00      	cmp	r4, #0
 8004a36:	d100      	bne.n	8004a3a <SetupDMAStreams+0x1e>
 8004a38:	e0ba      	b.n	8004bb0 <SetupDMAStreams+0x194>
 8004a3a:	2f00      	cmp	r7, #0
 8004a3c:	d100      	bne.n	8004a40 <SetupDMAStreams+0x24>
 8004a3e:	e0bb      	b.n	8004bb8 <SetupDMAStreams+0x19c>
	if (direction == FORWARD) 
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d054      	beq.n	8004aee <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 8004a44:	2801      	cmp	r0, #1
 8004a46:	d100      	bne.n	8004a4a <SetupDMAStreams+0x2e>
 8004a48:	e089      	b.n	8004b5e <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 8004a4a:	2367      	movs	r3, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 8004a4c:	2802      	cmp	r0, #2
 8004a4e:	d000      	beq.n	8004a52 <SetupDMAStreams+0x36>
 8004a50:	e0af      	b.n	8004bb2 <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 8004a52:	0020      	movs	r0, r4
 8004a54:	f7ff ffc0 	bl	80049d8 <GetUart>
 8004a58:	0004      	movs	r4, r0
 8004a5a:	0038      	movs	r0, r7
 8004a5c:	f7ff ffbc 	bl	80049d8 <GetUart>
 8004a60:	0001      	movs	r1, r0
 8004a62:	2201      	movs	r2, #1
 8004a64:	0020      	movs	r0, r4
 8004a66:	f005 ff91 	bl	800a98c <StartDMAstream>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	2817      	cmp	r0, #23
 8004a6e:	d100      	bne.n	8004a72 <SetupDMAStreams+0x56>
 8004a70:	e09f      	b.n	8004bb2 <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8004a72:	0168      	lsls	r0, r5, #5
 8004a74:	1b40      	subs	r0, r0, r5
 8004a76:	0080      	lsls	r0, r0, #2
 8004a78:	1940      	adds	r0, r0, r5
 8004a7a:	00c0      	lsls	r0, r0, #3
 8004a7c:	21fa      	movs	r1, #250	; 0xfa
 8004a7e:	0089      	lsls	r1, r1, #2
 8004a80:	f7fb fb66 	bl	8000150 <__udivsi3>
 8004a84:	0004      	movs	r4, r0
 8004a86:	250f      	movs	r5, #15
 8004a88:	446d      	add	r5, sp
 8004a8a:	4b4c      	ldr	r3, [pc, #304]	; (8004bbc <SetupDMAStreams+0x1a0>)
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	002b      	movs	r3, r5
 8004a90:	2200      	movs	r2, #0
 8004a92:	0001      	movs	r1, r0
 8004a94:	484a      	ldr	r0, [pc, #296]	; (8004bc0 <SetupDMAStreams+0x1a4>)
 8004a96:	f00b fc05 	bl	80102a4 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 8004a9a:	782d      	ldrb	r5, [r5, #0]
 8004a9c:	1e6b      	subs	r3, r5, #1
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4a48      	ldr	r2, [pc, #288]	; (8004bc4 <SetupDMAStreams+0x1a8>)
 8004aa2:	509e      	str	r6, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8004aa4:	ab0a      	add	r3, sp, #40	; 0x28
 8004aa6:	7818      	ldrb	r0, [r3, #0]
 8004aa8:	f7ff ff96 	bl	80049d8 <GetUart>
 8004aac:	0007      	movs	r7, r0
 8004aae:	0028      	movs	r0, r5
 8004ab0:	f7ff ff92 	bl	80049d8 <GetUart>
 8004ab4:	0001      	movs	r1, r0
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	0038      	movs	r0, r7
 8004aba:	f005 ff67 	bl	800a98c <StartDMAstream>
 8004abe:	0003      	movs	r3, r0
 8004ac0:	2817      	cmp	r0, #23
 8004ac2:	d076      	beq.n	8004bb2 <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8004ac4:	4b3d      	ldr	r3, [pc, #244]	; (8004bbc <SetupDMAStreams+0x1a0>)
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	ab0a      	add	r3, sp, #40	; 0x28
 8004aca:	2200      	movs	r2, #0
 8004acc:	0021      	movs	r1, r4
 8004ace:	483c      	ldr	r0, [pc, #240]	; (8004bc0 <SetupDMAStreams+0x1a4>)
 8004ad0:	f00b fbe8 	bl	80102a4 <xTimerCreate>
 8004ad4:	0005      	movs	r5, r0
		dmaStreamTotal[dst-1] = count;
 8004ad6:	ab0a      	add	r3, sp, #40	; 0x28
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4a39      	ldr	r2, [pc, #228]	; (8004bc4 <SetupDMAStreams+0x1a8>)
 8004ae0:	509e      	str	r6, [r3, r2]
 8004ae2:	e02c      	b.n	8004b3e <SetupDMAStreams+0x122>
		portStatus[src] = STREAM;
 8004ae4:	4b38      	ldr	r3, [pc, #224]	; (8004bc8 <SetupDMAStreams+0x1ac>)
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	551a      	strb	r2, [r3, r4]
		return BOS_ERR_WrongParam;
 8004aea:	2367      	movs	r3, #103	; 0x67
 8004aec:	e061      	b.n	8004bb2 <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8004aee:	0020      	movs	r0, r4
 8004af0:	f7ff ff72 	bl	80049d8 <GetUart>
 8004af4:	0004      	movs	r4, r0
 8004af6:	0038      	movs	r0, r7
 8004af8:	f7ff ff6e 	bl	80049d8 <GetUart>
 8004afc:	0001      	movs	r1, r0
 8004afe:	2201      	movs	r2, #1
 8004b00:	0020      	movs	r0, r4
 8004b02:	f005 ff43 	bl	800a98c <StartDMAstream>
 8004b06:	0003      	movs	r3, r0
 8004b08:	2817      	cmp	r0, #23
 8004b0a:	d052      	beq.n	8004bb2 <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8004b0c:	240f      	movs	r4, #15
 8004b0e:	446c      	add	r4, sp
 8004b10:	0168      	lsls	r0, r5, #5
 8004b12:	1b40      	subs	r0, r0, r5
 8004b14:	0080      	lsls	r0, r0, #2
 8004b16:	1940      	adds	r0, r0, r5
 8004b18:	00c0      	lsls	r0, r0, #3
 8004b1a:	21fa      	movs	r1, #250	; 0xfa
 8004b1c:	0089      	lsls	r1, r1, #2
 8004b1e:	f7fb fb17 	bl	8000150 <__udivsi3>
 8004b22:	0001      	movs	r1, r0
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <SetupDMAStreams+0x1a0>)
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	0023      	movs	r3, r4
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4824      	ldr	r0, [pc, #144]	; (8004bc0 <SetupDMAStreams+0x1a4>)
 8004b2e:	f00b fbb9 	bl	80102a4 <xTimerCreate>
 8004b32:	0005      	movs	r5, r0
		dmaStreamTotal[src-1] = count;
 8004b34:	7823      	ldrb	r3, [r4, #0]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <SetupDMAStreams+0x1a8>)
 8004b3c:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8004b3e:	2300      	movs	r3, #0
	if (xTimerStream != NULL)
 8004b40:	2d00      	cmp	r5, #0
 8004b42:	d036      	beq.n	8004bb2 <SetupDMAStreams+0x196>
		xTimerStart( xTimerStream, portMAX_DELAY );
 8004b44:	f00a fe46 	bl	800f7d4 <xTaskGetTickCount>
 8004b48:	0002      	movs	r2, r0
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	425b      	negs	r3, r3
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	2300      	movs	r3, #0
 8004b52:	2101      	movs	r1, #1
 8004b54:	0028      	movs	r0, r5
 8004b56:	f00b fbc5 	bl	80102e4 <xTimerGenericCommand>
	return BOS_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e029      	b.n	8004bb2 <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8004b5e:	0038      	movs	r0, r7
 8004b60:	f7ff ff3a 	bl	80049d8 <GetUart>
 8004b64:	0007      	movs	r7, r0
 8004b66:	0020      	movs	r0, r4
 8004b68:	f7ff ff36 	bl	80049d8 <GetUart>
 8004b6c:	0001      	movs	r1, r0
 8004b6e:	2201      	movs	r2, #1
 8004b70:	0038      	movs	r0, r7
 8004b72:	f005 ff0b 	bl	800a98c <StartDMAstream>
 8004b76:	0003      	movs	r3, r0
 8004b78:	2817      	cmp	r0, #23
 8004b7a:	d01a      	beq.n	8004bb2 <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8004b7c:	0168      	lsls	r0, r5, #5
 8004b7e:	1b40      	subs	r0, r0, r5
 8004b80:	0080      	lsls	r0, r0, #2
 8004b82:	1940      	adds	r0, r0, r5
 8004b84:	00c0      	lsls	r0, r0, #3
 8004b86:	21fa      	movs	r1, #250	; 0xfa
 8004b88:	0089      	lsls	r1, r1, #2
 8004b8a:	f7fb fae1 	bl	8000150 <__udivsi3>
 8004b8e:	0001      	movs	r1, r0
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <SetupDMAStreams+0x1a0>)
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	ab0a      	add	r3, sp, #40	; 0x28
 8004b96:	2200      	movs	r2, #0
 8004b98:	4809      	ldr	r0, [pc, #36]	; (8004bc0 <SetupDMAStreams+0x1a4>)
 8004b9a:	f00b fb83 	bl	80102a4 <xTimerCreate>
 8004b9e:	0005      	movs	r5, r0
		dmaStreamTotal[src-1] = count;
 8004ba0:	230f      	movs	r3, #15
 8004ba2:	446b      	add	r3, sp
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <SetupDMAStreams+0x1a8>)
 8004bac:	509e      	str	r6, [r3, r2]
 8004bae:	e7c6      	b.n	8004b3e <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 8004bb0:	2367      	movs	r3, #103	; 0x67
}
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	b005      	add	sp, #20
 8004bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8004bb8:	2367      	movs	r3, #103	; 0x67
 8004bba:	e7fa      	b.n	8004bb2 <SetupDMAStreams+0x196>
 8004bbc:	08003245 	.word	0x08003245
 8004bc0:	08019124 	.word	0x08019124
 8004bc4:	2000170c 	.word	0x2000170c
 8004bc8:	20001348 	.word	0x20001348

08004bcc <LoadEEstreams>:
{
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	b084      	sub	sp, #16
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 8004bd0:	210e      	movs	r1, #14
 8004bd2:	4469      	add	r1, sp
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	800b      	strh	r3, [r1, #0]
 8004bd8:	aa03      	add	r2, sp, #12
 8004bda:	8013      	strh	r3, [r2, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8004bdc:	20e4      	movs	r0, #228	; 0xe4
 8004bde:	f005 ffbb 	bl	800ab58 <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8004be2:	2600      	movs	r6, #0
	if (!status1) {
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d102      	bne.n	8004bee <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 8004be8:	230e      	movs	r3, #14
 8004bea:	446b      	add	r3, sp
 8004bec:	781e      	ldrb	r6, [r3, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 8004bee:	210e      	movs	r1, #14
 8004bf0:	4469      	add	r1, sp
 8004bf2:	20e5      	movs	r0, #229	; 0xe5
 8004bf4:	f005 ffb0 	bl	800ab58 <EE_ReadVariable>
 8004bf8:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 8004bfa:	a903      	add	r1, sp, #12
 8004bfc:	20e6      	movs	r0, #230	; 0xe6
 8004bfe:	f005 ffab 	bl	800ab58 <EE_ReadVariable>
	if (!status1 && !status2) {
 8004c02:	4304      	orrs	r4, r0
 8004c04:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8004c06:	2500      	movs	r5, #0
	if (!status1 && !status2) {
 8004c08:	2c00      	cmp	r4, #0
 8004c0a:	d106      	bne.n	8004c1a <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 8004c0c:	230e      	movs	r3, #14
 8004c0e:	446b      	add	r3, sp
 8004c10:	881d      	ldrh	r5, [r3, #0]
 8004c12:	042d      	lsls	r5, r5, #16
 8004c14:	ab03      	add	r3, sp, #12
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	18ed      	adds	r5, r5, r3
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 8004c1a:	210e      	movs	r1, #14
 8004c1c:	4469      	add	r1, sp
 8004c1e:	20e7      	movs	r0, #231	; 0xe7
 8004c20:	f005 ff9a 	bl	800ab58 <EE_ReadVariable>
 8004c24:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 8004c26:	a903      	add	r1, sp, #12
 8004c28:	20e8      	movs	r0, #232	; 0xe8
 8004c2a:	f005 ff95 	bl	800ab58 <EE_ReadVariable>
	if (!status1 && !status2) {
 8004c2e:	4320      	orrs	r0, r4
 8004c30:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 8004c32:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 8004c34:	2800      	cmp	r0, #0
 8004c36:	d106      	bne.n	8004c46 <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 8004c38:	230e      	movs	r3, #14
 8004c3a:	446b      	add	r3, sp
 8004c3c:	881c      	ldrh	r4, [r3, #0]
 8004c3e:	0424      	lsls	r4, r4, #16
 8004c40:	ab03      	add	r3, sp, #12
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	18e4      	adds	r4, r4, r3
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 8004c46:	210e      	movs	r1, #14
 8004c48:	4469      	add	r1, sp
 8004c4a:	20e9      	movs	r0, #233	; 0xe9
 8004c4c:	f005 ff84 	bl	800ab58 <EE_ReadVariable>
	if (!status1) {
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d107      	bne.n	8004c64 <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 8004c54:	230e      	movs	r3, #14
 8004c56:	446b      	add	r3, sp
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	0a19      	lsrs	r1, r3, #8
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <LoadEEstreams+0x134>)
 8004c5e:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 8004c60:	4a28      	ldr	r2, [pc, #160]	; (8004d04 <LoadEEstreams+0x138>)
 8004c62:	7013      	strb	r3, [r2, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 8004c64:	210e      	movs	r1, #14
 8004c66:	4469      	add	r1, sp
 8004c68:	20ea      	movs	r0, #234	; 0xea
 8004c6a:	f005 ff75 	bl	800ab58 <EE_ReadVariable>
	if (!status1) {
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d107      	bne.n	8004c82 <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 8004c72:	230e      	movs	r3, #14
 8004c74:	446b      	add	r3, sp
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	0a19      	lsrs	r1, r3, #8
 8004c7a:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <LoadEEstreams+0x13c>)
 8004c7c:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 8004c7e:	4a23      	ldr	r2, [pc, #140]	; (8004d0c <LoadEEstreams+0x140>)
 8004c80:	7013      	strb	r3, [r2, #0]
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 8004c82:	210e      	movs	r1, #14
 8004c84:	4469      	add	r1, sp
 8004c86:	20eb      	movs	r0, #235	; 0xeb
 8004c88:	f005 ff66 	bl	800ab58 <EE_ReadVariable>
	if (!status1) {
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d107      	bne.n	8004ca0 <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 8004c90:	230e      	movs	r3, #14
 8004c92:	446b      	add	r3, sp
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	0a19      	lsrs	r1, r3, #8
 8004c98:	4a1d      	ldr	r2, [pc, #116]	; (8004d10 <LoadEEstreams+0x144>)
 8004c9a:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <LoadEEstreams+0x148>)
 8004c9e:	7013      	strb	r3, [r2, #0]
	if (src1 && dst1)
 8004ca0:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <LoadEEstreams+0x134>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <LoadEEstreams+0xe4>
 8004ca8:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <LoadEEstreams+0x138>)
 8004caa:	7812      	ldrb	r2, [r2, #0]
 8004cac:	2a00      	cmp	r2, #0
 8004cae:	d112      	bne.n	8004cd6 <LoadEEstreams+0x10a>
	if (src2 && dst2)
 8004cb0:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <LoadEEstreams+0x13c>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <LoadEEstreams+0xf4>
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <LoadEEstreams+0x140>)
 8004cba:	7812      	ldrb	r2, [r2, #0]
 8004cbc:	2a00      	cmp	r2, #0
 8004cbe:	d111      	bne.n	8004ce4 <LoadEEstreams+0x118>
	if (src3 && dst3)
 8004cc0:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <LoadEEstreams+0x144>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <LoadEEstreams+0x104>
 8004cc8:	4a12      	ldr	r2, [pc, #72]	; (8004d14 <LoadEEstreams+0x148>)
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	d110      	bne.n	8004cf2 <LoadEEstreams+0x126>
}
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	b004      	add	sp, #16
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 8004cd6:	9200      	str	r2, [sp, #0]
 8004cd8:	0022      	movs	r2, r4
 8004cda:	0029      	movs	r1, r5
 8004cdc:	0030      	movs	r0, r6
 8004cde:	f7ff fe9d 	bl	8004a1c <SetupDMAStreams>
 8004ce2:	e7e5      	b.n	8004cb0 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 8004ce4:	9200      	str	r2, [sp, #0]
 8004ce6:	0022      	movs	r2, r4
 8004ce8:	0029      	movs	r1, r5
 8004cea:	0030      	movs	r0, r6
 8004cec:	f7ff fe96 	bl	8004a1c <SetupDMAStreams>
 8004cf0:	e7e6      	b.n	8004cc0 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 8004cf2:	9200      	str	r2, [sp, #0]
 8004cf4:	0022      	movs	r2, r4
 8004cf6:	0029      	movs	r1, r5
 8004cf8:	0030      	movs	r0, r6
 8004cfa:	f7ff fe8f 	bl	8004a1c <SetupDMAStreams>
 8004cfe:	e7e7      	b.n	8004cd0 <LoadEEstreams+0x104>
 8004d00:	200013f5 	.word	0x200013f5
 8004d04:	20000f70 	.word	0x20000f70
 8004d08:	200013f6 	.word	0x200013f6
 8004d0c:	20000f71 	.word	0x20000f71
 8004d10:	200013f7 	.word	0x200013f7
 8004d14:	20000f72 	.word	0x20000f72

08004d18 <GetPortGPIOs>:
{
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	000e      	movs	r6, r1
 8004d1c:	0015      	movs	r5, r2
 8004d1e:	001c      	movs	r4, r3
	UART_HandleTypeDef* huart = GetUart(port);
 8004d20:	f7ff fe5a 	bl	80049d8 <GetUart>
	if (huart == &huart1) 
 8004d24:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <GetPortGPIOs+0xbc>)
 8004d26:	4298      	cmp	r0, r3
 8004d28:	d01a      	beq.n	8004d60 <GetPortGPIOs+0x48>
	else if (huart == &huart2) 
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <GetPortGPIOs+0xc0>)
 8004d2c:	4298      	cmp	r0, r3
 8004d2e:	d025      	beq.n	8004d7c <GetPortGPIOs+0x64>
	else if (huart == &huart3) 
 8004d30:	4b2a      	ldr	r3, [pc, #168]	; (8004ddc <GetPortGPIOs+0xc4>)
 8004d32:	4298      	cmp	r0, r3
 8004d34:	d02d      	beq.n	8004d92 <GetPortGPIOs+0x7a>
	else if (huart == &huart4) 
 8004d36:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <GetPortGPIOs+0xc8>)
 8004d38:	4298      	cmp	r0, r3
 8004d3a:	d036      	beq.n	8004daa <GetPortGPIOs+0x92>
	else if (huart == &huart5) 
 8004d3c:	4b29      	ldr	r3, [pc, #164]	; (8004de4 <GetPortGPIOs+0xcc>)
 8004d3e:	4298      	cmp	r0, r3
 8004d40:	d03e      	beq.n	8004dc0 <GetPortGPIOs+0xa8>
	else if (huart == &huart6) 
 8004d42:	4a29      	ldr	r2, [pc, #164]	; (8004de8 <GetPortGPIOs+0xd0>)
		result = BOS_ERROR;	
 8004d44:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 8004d46:	4290      	cmp	r0, r2
 8004d48:	d116      	bne.n	8004d78 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 8004d4a:	2390      	movs	r3, #144	; 0x90
 8004d4c:	05db      	lsls	r3, r3, #23
 8004d4e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 8004d50:	2210      	movs	r2, #16
 8004d52:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 8004d54:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 8004d56:	2320      	movs	r3, #32
 8004d58:	9a04      	ldr	r2, [sp, #16]
 8004d5a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e00b      	b.n	8004d78 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 8004d60:	2390      	movs	r3, #144	; 0x90
 8004d62:	05db      	lsls	r3, r3, #23
 8004d64:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 8004d66:	2280      	movs	r2, #128	; 0x80
 8004d68:	0092      	lsls	r2, r2, #2
 8004d6a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 8004d6c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 8004d6e:	2380      	movs	r3, #128	; 0x80
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	9a04      	ldr	r2, [sp, #16]
 8004d74:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	0018      	movs	r0, r3
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 8004d7c:	2390      	movs	r3, #144	; 0x90
 8004d7e:	05db      	lsls	r3, r3, #23
 8004d80:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 8004d82:	2204      	movs	r2, #4
 8004d84:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 8004d86:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 8004d88:	2308      	movs	r3, #8
 8004d8a:	9a04      	ldr	r2, [sp, #16]
 8004d8c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e7f2      	b.n	8004d78 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 8004d92:	4b16      	ldr	r3, [pc, #88]	; (8004dec <GetPortGPIOs+0xd4>)
 8004d94:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 8004d96:	2280      	movs	r2, #128	; 0x80
 8004d98:	00d2      	lsls	r2, r2, #3
 8004d9a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 8004d9c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 8004d9e:	2380      	movs	r3, #128	; 0x80
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	9a04      	ldr	r2, [sp, #16]
 8004da4:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e7e6      	b.n	8004d78 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 8004daa:	2390      	movs	r3, #144	; 0x90
 8004dac:	05db      	lsls	r3, r3, #23
 8004dae:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 8004db0:	2201      	movs	r2, #1
 8004db2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 8004db4:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 8004db6:	2302      	movs	r3, #2
 8004db8:	9a04      	ldr	r2, [sp, #16]
 8004dba:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e7db      	b.n	8004d78 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <GetPortGPIOs+0xd4>)
 8004dc2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 8004dc8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 8004dca:	2310      	movs	r3, #16
 8004dcc:	9a04      	ldr	r2, [sp, #16]
 8004dce:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e7d1      	b.n	8004d78 <GetPortGPIOs+0x60>
 8004dd4:	20006c08 	.word	0x20006c08
 8004dd8:	20006d58 	.word	0x20006d58
 8004ddc:	20006b28 	.word	0x20006b28
 8004de0:	20006ce8 	.word	0x20006ce8
 8004de4:	20006b98 	.word	0x20006b98
 8004de8:	20006c78 	.word	0x20006c78
 8004dec:	48000400 	.word	0x48000400

08004df0 <SetupPortForRemoteBootloaderUpdate>:
{
 8004df0:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8004df2:	f7ff fdf1 	bl	80049d8 <GetUart>
 8004df6:	0004      	movs	r4, r0
	huart->Init.BaudRate = 57600;
 8004df8:	23e1      	movs	r3, #225	; 0xe1
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	015b      	lsls	r3, r3, #5
 8004e08:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8004e0a:	f00e fe55 	bl	8013ab8 <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e0e:	6822      	ldr	r2, [r4, #0]
 8004e10:	6813      	ldr	r3, [r2, #0]
 8004e12:	2120      	movs	r1, #32
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6013      	str	r3, [r2, #0]
}
 8004e18:	bd10      	pop	{r4, pc}
	...

08004e1c <testportCommand>:
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 8004e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1e:	46d6      	mov	lr, sl
 8004e20:	4647      	mov	r7, r8
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b085      	sub	sp, #20
 8004e26:	0004      	movs	r4, r0
 8004e28:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 8004e2e:	4b62      	ldr	r3, [pc, #392]	; (8004fb8 <testportCommand+0x19c>)
 8004e30:	7c1a      	ldrb	r2, [r3, #16]
 8004e32:	ab02      	add	r3, sp, #8
 8004e34:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 8004e36:	2c00      	cmp	r4, #0
 8004e38:	d101      	bne.n	8004e3e <testportCommand+0x22>
 8004e3a:	b672      	cpsid	i
 8004e3c:	e7fe      	b.n	8004e3c <testportCommand+0x20>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8004e3e:	aa03      	add	r2, sp, #12
 8004e40:	2101      	movs	r1, #1
 8004e42:	f009 fe59 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 8004e46:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 8004e48:	495c      	ldr	r1, [pc, #368]	; (8004fbc <testportCommand+0x1a0>)
 8004e4a:	f7fb f95b 	bl	8000104 <strcmp>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d173      	bne.n	8004f3a <testportCommand+0x11e>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 8004e52:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <testportCommand+0x1a4>)
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	4b5b      	ldr	r3, [pc, #364]	; (8004fc4 <testportCommand+0x1a8>)
 8004e58:	189b      	adds	r3, r3, r2
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	781e      	ldrb	r6, [r3, #0]
 8004e5e:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 8004e60:	4b57      	ldr	r3, [pc, #348]	; (8004fc0 <testportCommand+0x1a4>)
 8004e62:	4698      	mov	r8, r3
 8004e64:	e015      	b.n	8004e92 <testportCommand+0x76>
        result = BOS_OK;
      else
        result = BOS_ERR_Keyword;
      
      if (result == BOS_OK){ 
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 8004e66:	002a      	movs	r2, r5
 8004e68:	4957      	ldr	r1, [pc, #348]	; (8004fc8 <testportCommand+0x1ac>)
 8004e6a:	0020      	movs	r0, r4
 8004e6c:	f00f fc50 	bl	8014710 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004e70:	0020      	movs	r0, r4
 8004e72:	f7fb f951 	bl	8000118 <strlen>
 8004e76:	b282      	uxth	r2, r0
 8004e78:	4b51      	ldr	r3, [pc, #324]	; (8004fc0 <testportCommand+0x1a4>)
 8004e7a:	7818      	ldrb	r0, [r3, #0]
 8004e7c:	2364      	movs	r3, #100	; 0x64
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	3b5a      	subs	r3, #90	; 0x5a
 8004e82:	0021      	movs	r1, r4
 8004e84:	f009 f852 	bl	800df2c <writePxMutex>
 8004e88:	e02f      	b.n	8004eea <testportCommand+0xce>
 8004e8a:	3501      	adds	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
 8004e8c:	2d07      	cmp	r5, #7
 8004e8e:	d100      	bne.n	8004e92 <testportCommand+0x76>
 8004e90:	e07f      	b.n	8004f92 <testportCommand+0x176>
 8004e92:	b2eb      	uxtb	r3, r5
 8004e94:	469a      	mov	sl, r3
      if(PcPort!=ports)
 8004e96:	4643      	mov	r3, r8
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	4553      	cmp	r3, sl
 8004e9c:	d0f5      	beq.n	8004e8a <testportCommand+0x6e>
        WriteVaule[0]=rand();
 8004e9e:	f00f fa23 	bl	80142e8 <rand>
 8004ea2:	af02      	add	r7, sp, #8
 8004ea4:	7038      	strb	r0, [r7, #0]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8004ea6:	2364      	movs	r3, #100	; 0x64
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	3b5a      	subs	r3, #90	; 0x5a
 8004eac:	2201      	movs	r2, #1
 8004eae:	0039      	movs	r1, r7
 8004eb0:	4650      	mov	r0, sl
 8004eb2:	f009 f83b 	bl	800df2c <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	f7ff fd8e 	bl	80049d8 <GetUart>
 8004ebc:	6803      	ldr	r3, [r0, #0]
 8004ebe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 8004ec0:	783a      	ldrb	r2, [r7, #0]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d0ce      	beq.n	8004e66 <testportCommand+0x4a>
     	else if (result == BOS_ERR_Keyword){
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8004ec8:	002a      	movs	r2, r5
 8004eca:	4940      	ldr	r1, [pc, #256]	; (8004fcc <testportCommand+0x1b0>)
 8004ecc:	0020      	movs	r0, r4
 8004ece:	f00f fc1f 	bl	8014710 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8004ed2:	0020      	movs	r0, r4
 8004ed4:	f7fb f920 	bl	8000118 <strlen>
 8004ed8:	b282      	uxth	r2, r0
 8004eda:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <testportCommand+0x1a4>)
 8004edc:	7818      	ldrb	r0, [r3, #0]
 8004ede:	2364      	movs	r3, #100	; 0x64
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	3b5a      	subs	r3, #90	; 0x5a
 8004ee4:	0021      	movs	r1, r4
 8004ee6:	f009 f821 	bl	800df2c <writePxMutex>
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8004eea:	2254      	movs	r2, #84	; 0x54
 8004eec:	4938      	ldr	r1, [pc, #224]	; (8004fd0 <testportCommand+0x1b4>)
 8004eee:	0020      	movs	r0, r4
 8004ef0:	f00f f9d9 	bl	80142a6 <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 8004ef4:	0020      	movs	r0, r4
 8004ef6:	f7fb f90f 	bl	8000118 <strlen>
 8004efa:	b282      	uxth	r2, r0
 8004efc:	4b30      	ldr	r3, [pc, #192]	; (8004fc0 <testportCommand+0x1a4>)
 8004efe:	7818      	ldrb	r0, [r3, #0]
 8004f00:	2364      	movs	r3, #100	; 0x64
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	3b5a      	subs	r3, #90	; 0x5a
 8004f06:	0021      	movs	r1, r4
 8004f08:	f009 f810 	bl	800df2c <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8004f0c:	3601      	adds	r6, #1
 8004f0e:	4b2c      	ldr	r3, [pc, #176]	; (8004fc0 <testportCommand+0x1a4>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	019b      	lsls	r3, r3, #6
 8004f16:	4a2f      	ldr	r2, [pc, #188]	; (8004fd4 <testportCommand+0x1b8>)
 8004f18:	18d3      	adds	r3, r2, r3
 8004f1a:	5d9b      	ldrb	r3, [r3, r6]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1b4      	bne.n	8004e8a <testportCommand+0x6e>
 8004f20:	4692      	mov	sl, r2
 8004f22:	4f27      	ldr	r7, [pc, #156]	; (8004fc0 <testportCommand+0x1a4>)
 8004f24:	2001      	movs	r0, #1
 8004f26:	f00b fcf9 	bl	801091c <HAL_Delay>
 8004f2a:	783b      	ldrb	r3, [r7, #0]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	019b      	lsls	r3, r3, #6
 8004f30:	4453      	add	r3, sl
 8004f32:	5d9b      	ldrb	r3, [r3, r6]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f5      	beq.n	8004f24 <testportCommand+0x108>
 8004f38:	e7a7      	b.n	8004e8a <testportCommand+0x6e>
       LastEnter++;
        }
      }
    }
	else if (pcParameterString1[0] == 'p') {
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	56eb      	ldrsb	r3, [r5, r3]
 8004f3e:	2b70      	cmp	r3, #112	; 0x70
 8004f40:	d005      	beq.n	8004f4e <testportCommand+0x132>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
	else if (result == BOS_ERR_Keyword)  
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
    }
    else {
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8004f42:	220f      	movs	r2, #15
 8004f44:	4924      	ldr	r1, [pc, #144]	; (8004fd8 <testportCommand+0x1bc>)
 8004f46:	0020      	movs	r0, r4
 8004f48:	f00f f9ad 	bl	80142a6 <memcpy>
 8004f4c:	e021      	b.n	8004f92 <testportCommand+0x176>
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8004f4e:	1c68      	adds	r0, r5, #1
 8004f50:	f00e ff1f 	bl	8013d92 <atol>
 8004f54:	0005      	movs	r5, r0
 8004f56:	b2c7      	uxtb	r7, r0
    if(portt>0 && portt<=NumOfPorts)
 8004f58:	1e7b      	subs	r3, r7, #1
 8004f5a:	2b05      	cmp	r3, #5
 8004f5c:	d825      	bhi.n	8004faa <testportCommand+0x18e>
        WriteVaule[0]=rand();
 8004f5e:	f00f f9c3 	bl	80142e8 <rand>
 8004f62:	ae02      	add	r6, sp, #8
 8004f64:	7030      	strb	r0, [r6, #0]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8004f66:	2364      	movs	r3, #100	; 0x64
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	3b32      	subs	r3, #50	; 0x32
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	0031      	movs	r1, r6
 8004f70:	0038      	movs	r0, r7
 8004f72:	f008 ffdb 	bl	800df2c <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8004f76:	0038      	movs	r0, r7
 8004f78:	f7ff fd2e 	bl	80049d8 <GetUart>
 8004f7c:	6803      	ldr	r3, [r0, #0]
 8004f7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 8004f80:	7832      	ldrb	r2, [r6, #0]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d10a      	bne.n	8004f9e <testportCommand+0x182>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8004f88:	b2ea      	uxtb	r2, r5
 8004f8a:	490f      	ldr	r1, [pc, #60]	; (8004fc8 <testportCommand+0x1ac>)
 8004f8c:	0020      	movs	r0, r4
 8004f8e:	f00f fbbf 	bl	8014710 <sprintf>
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8004f92:	2000      	movs	r0, #0
 8004f94:	b005      	add	sp, #20
 8004f96:	bc0c      	pop	{r2, r3}
 8004f98:	4690      	mov	r8, r2
 8004f9a:	469a      	mov	sl, r3
 8004f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8004f9e:	b2ea      	uxtb	r2, r5
 8004fa0:	490a      	ldr	r1, [pc, #40]	; (8004fcc <testportCommand+0x1b0>)
 8004fa2:	0020      	movs	r0, r4
 8004fa4:	f00f fbb4 	bl	8014710 <sprintf>
 8004fa8:	e7f3      	b.n	8004f92 <testportCommand+0x176>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8004faa:	221b      	movs	r2, #27
 8004fac:	490b      	ldr	r1, [pc, #44]	; (8004fdc <testportCommand+0x1c0>)
 8004fae:	0020      	movs	r0, r4
 8004fb0:	f00f f979 	bl	80142a6 <memcpy>
	return pdFALSE;
 8004fb4:	e7ed      	b.n	8004f92 <testportCommand+0x176>
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	08018b10 	.word	0x08018b10
 8004fbc:	080194ec 	.word	0x080194ec
 8004fc0:	20000abf 	.word	0x20000abf
 8004fc4:	2000169c 	.word	0x2000169c
 8004fc8:	0801ae14 	.word	0x0801ae14
 8004fcc:	0801ae30 	.word	0x0801ae30
 8004fd0:	0801ae44 	.word	0x0801ae44
 8004fd4:	2000151c 	.word	0x2000151c
 8004fd8:	0801ae98 	.word	0x0801ae98
 8004fdc:	0801aea8 	.word	0x0801aea8

08004fe0 <FindBroadcastRoutes>:
{
 8004fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe2:	46de      	mov	lr, fp
 8004fe4:	4657      	mov	r7, sl
 8004fe6:	464e      	mov	r6, r9
 8004fe8:	4645      	mov	r5, r8
 8004fea:	b5e0      	push	{r5, r6, r7, lr}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8004ff0:	4b47      	ldr	r3, [pc, #284]	; (8005110 <FindBroadcastRoutes+0x130>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	469c      	mov	ip, r3
 8004ff6:	3307      	adds	r3, #7
 8004ff8:	08db      	lsrs	r3, r3, #3
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	466a      	mov	r2, sp
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	469d      	mov	sp, r3
 8005002:	466c      	mov	r4, sp
	for(m=0 ; m<N ; m++)
 8005004:	4663      	mov	r3, ip
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00d      	beq.n	8005026 <FindBroadcastRoutes+0x46>
 800500a:	0023      	movs	r3, r4
 800500c:	4a41      	ldr	r2, [pc, #260]	; (8005114 <FindBroadcastRoutes+0x134>)
 800500e:	4661      	mov	r1, ip
 8005010:	1e4d      	subs	r5, r1, #1
 8005012:	b2ed      	uxtb	r5, r5
 8005014:	3501      	adds	r5, #1
 8005016:	192d      	adds	r5, r5, r4
		modules[m] = 0;
 8005018:	2100      	movs	r1, #0
 800501a:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] = 0;
 800501c:	8011      	strh	r1, [r2, #0]
 800501e:	3301      	adds	r3, #1
 8005020:	3202      	adds	r2, #2
	for(m=0 ; m<N ; m++)
 8005022:	42ab      	cmp	r3, r5
 8005024:	d1f9      	bne.n	800501a <FindBroadcastRoutes+0x3a>
	modules[src-1] = ++level;					// Tag the source
 8005026:	3801      	subs	r0, #1
 8005028:	2301      	movs	r3, #1
 800502a:	5423      	strb	r3, [r4, r0]
 800502c:	2216      	movs	r2, #22
 800502e:	4342      	muls	r2, r0
 8005030:	3202      	adds	r2, #2
 8005032:	4b39      	ldr	r3, [pc, #228]	; (8005118 <FindBroadcastRoutes+0x138>)
 8005034:	18d2      	adds	r2, r2, r3
 8005036:	2100      	movs	r1, #0
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8005038:	4d36      	ldr	r5, [pc, #216]	; (8005114 <FindBroadcastRoutes+0x134>)
 800503a:	0040      	lsls	r0, r0, #1
 800503c:	2301      	movs	r3, #1
 800503e:	4698      	mov	r8, r3
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8005040:	46a3      	mov	fp, r4
 8005042:	e003      	b.n	800504c <FindBroadcastRoutes+0x6c>
 8005044:	3101      	adds	r1, #1
 8005046:	3202      	adds	r2, #2
	for(p=1 ; p<=NumOfPorts ; p++)
 8005048:	2906      	cmp	r1, #6
 800504a:	d011      	beq.n	8005070 <FindBroadcastRoutes+0x90>
		if (array[src-1][p]) 
 800504c:	8813      	ldrh	r3, [r2, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f8      	beq.n	8005044 <FindBroadcastRoutes+0x64>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8005052:	5b46      	ldrh	r6, [r0, r5]
 8005054:	46b1      	mov	r9, r6
 8005056:	4646      	mov	r6, r8
 8005058:	408e      	lsls	r6, r1
 800505a:	46b2      	mov	sl, r6
 800505c:	464e      	mov	r6, r9
 800505e:	4654      	mov	r4, sl
 8005060:	4326      	orrs	r6, r4
 8005062:	5346      	strh	r6, [r0, r5]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8005064:	08db      	lsrs	r3, r3, #3
 8005066:	445b      	add	r3, fp
 8005068:	3b01      	subs	r3, #1
 800506a:	2402      	movs	r4, #2
 800506c:	701c      	strb	r4, [r3, #0]
 800506e:	e7e9      	b.n	8005044 <FindBroadcastRoutes+0x64>
 8005070:	465c      	mov	r4, fp
	++level;													// Move one level
 8005072:	2602      	movs	r6, #2
 8005074:	4b28      	ldr	r3, [pc, #160]	; (8005118 <FindBroadcastRoutes+0x138>)
 8005076:	3302      	adds	r3, #2
 8005078:	607b      	str	r3, [r7, #4]
						bcastRoutes[m] |= (0x01 << (p-1));
 800507a:	2301      	movs	r3, #1
 800507c:	469b      	mov	fp, r3
 800507e:	46b0      	mov	r8, r6
 8005080:	0026      	movs	r6, r4
		++level;																					// Move one level
 8005082:	4643      	mov	r3, r8
 8005084:	3301      	adds	r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	4698      	mov	r8, r3
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 800508a:	4663      	mov	r3, ip
 800508c:	2b00      	cmp	r3, #0
 800508e:	d035      	beq.n	80050fc <FindBroadcastRoutes+0x11c>
 8005090:	2200      	movs	r2, #0
		untaged = 0;																			// Reset the untaged counter
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8005096:	3b01      	subs	r3, #1
 8005098:	4443      	add	r3, r8
 800509a:	4699      	mov	r9, r3
 800509c:	e01e      	b.n	80050dc <FindBroadcastRoutes+0xfc>
 800509e:	3001      	adds	r0, #1
 80050a0:	3102      	adds	r1, #2
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 80050a2:	2806      	cmp	r0, #6
 80050a4:	d015      	beq.n	80050d2 <FindBroadcastRoutes+0xf2>
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 80050a6:	880b      	ldrh	r3, [r1, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f8      	beq.n	800509e <FindBroadcastRoutes+0xbe>
 80050ac:	08db      	lsrs	r3, r3, #3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	5cf5      	ldrb	r5, [r6, r3]
 80050b2:	2d00      	cmp	r5, #0
 80050b4:	d1f3      	bne.n	800509e <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |= (0x01 << (p-1));
 80050b6:	4a17      	ldr	r2, [pc, #92]	; (8005114 <FindBroadcastRoutes+0x134>)
 80050b8:	5aa5      	ldrh	r5, [r4, r2]
 80050ba:	465a      	mov	r2, fp
 80050bc:	4082      	lsls	r2, r0
 80050be:	4315      	orrs	r5, r2
 80050c0:	4a14      	ldr	r2, [pc, #80]	; (8005114 <FindBroadcastRoutes+0x134>)
 80050c2:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 80050c4:	4642      	mov	r2, r8
 80050c6:	54f2      	strb	r2, [r6, r3]
						++untaged;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3301      	adds	r3, #1
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e7e5      	b.n	800509e <FindBroadcastRoutes+0xbe>
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	3201      	adds	r2, #1
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 80050d6:	b2d3      	uxtb	r3, r2
 80050d8:	4563      	cmp	r3, ip
 80050da:	d20c      	bcs.n	80050f6 <FindBroadcastRoutes+0x116>
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 80050dc:	5cb3      	ldrb	r3, [r6, r2]
 80050de:	454b      	cmp	r3, r9
 80050e0:	d1f8      	bne.n	80050d4 <FindBroadcastRoutes+0xf4>
 80050e2:	2116      	movs	r1, #22
 80050e4:	4351      	muls	r1, r2
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	469a      	mov	sl, r3
 80050ea:	4451      	add	r1, sl
 80050ec:	0053      	lsls	r3, r2, #1
 80050ee:	2000      	movs	r0, #0
 80050f0:	60ba      	str	r2, [r7, #8]
 80050f2:	001c      	movs	r4, r3
 80050f4:	e7d7      	b.n	80050a6 <FindBroadcastRoutes+0xc6>
	while (untaged);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1c2      	bne.n	8005082 <FindBroadcastRoutes+0xa2>
}
 80050fc:	2000      	movs	r0, #0
 80050fe:	46bd      	mov	sp, r7
 8005100:	b005      	add	sp, #20
 8005102:	bc3c      	pop	{r2, r3, r4, r5}
 8005104:	4690      	mov	r8, r2
 8005106:	4699      	mov	r9, r3
 8005108:	46a2      	mov	sl, r4
 800510a:	46ab      	mov	fp, r5
 800510c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	2000001c 	.word	0x2000001c
 8005114:	20000d1c 	.word	0x20000d1c
 8005118:	20000ac0 	.word	0x20000ac0

0800511c <SendMessageFromPort>:
{
 800511c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511e:	46de      	mov	lr, fp
 8005120:	4657      	mov	r7, sl
 8005122:	464e      	mov	r6, r9
 8005124:	4645      	mov	r5, r8
 8005126:	b5e0      	push	{r5, r6, r7, lr}
 8005128:	b087      	sub	sp, #28
 800512a:	4680      	mov	r8, r0
 800512c:	9102      	str	r1, [sp, #8]
 800512e:	0014      	movs	r4, r2
 8005130:	9303      	str	r3, [sp, #12]
 8005132:	ab10      	add	r3, sp, #64	; 0x40
 8005134:	881f      	ldrh	r7, [r3, #0]
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 8005136:	0003      	movs	r3, r0
 8005138:	4313      	orrs	r3, r2
 800513a:	d100      	bne.n	800513e <SendMessageFromPort+0x22>
 800513c:	e169      	b.n	8005412 <SendMessageFromPort+0x2f6>
 800513e:	2800      	cmp	r0, #0
 8005140:	d159      	bne.n	80051f6 <SendMessageFromPort+0xda>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8005142:	1c93      	adds	r3, r2, #2
 8005144:	b2db      	uxtb	r3, r3
		return BOS_ERR_WrongParam; 
 8005146:	2067      	movs	r0, #103	; 0x67
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8005148:	2b01      	cmp	r3, #1
 800514a:	d900      	bls.n	800514e <SendMessageFromPort+0x32>
 800514c:	e143      	b.n	80053d6 <SendMessageFromPort+0x2ba>
	TaskPriority = uxTaskPriorityGet( NULL );
 800514e:	2000      	movs	r0, #0
 8005150:	f00a faa8 	bl	800f6a4 <uxTaskPriorityGet>
 8005154:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8005156:	2105      	movs	r1, #5
 8005158:	2000      	movs	r0, #0
 800515a:	f00a fab3 	bl	800f6c4 <vTaskPrioritySet>
	message[0] = 'H';						
 800515e:	4bba      	ldr	r3, [pc, #744]	; (8005448 <SendMessageFromPort+0x32c>)
 8005160:	2248      	movs	r2, #72	; 0x48
 8005162:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8005164:	3212      	adds	r2, #18
 8005166:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8005168:	9b02      	ldr	r3, [sp, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d000      	beq.n	8005170 <SendMessageFromPort+0x54>
 800516e:	e166      	b.n	800543e <SendMessageFromPort+0x322>
		length = messageLength[numberOfParams-1];
 8005170:	3f01      	subs	r7, #1
 8005172:	4bb6      	ldr	r3, [pc, #728]	; (800544c <SendMessageFromPort+0x330>)
 8005174:	5ddd      	ldrb	r5, [r3, r7]
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8005176:	48b4      	ldr	r0, [pc, #720]	; (8005448 <SendMessageFromPort+0x32c>)
 8005178:	00f9      	lsls	r1, r7, #3
 800517a:	1bc9      	subs	r1, r1, r7
 800517c:	00c9      	lsls	r1, r1, #3
 800517e:	4fb4      	ldr	r7, [pc, #720]	; (8005450 <SendMessageFromPort+0x334>)
 8005180:	19c9      	adds	r1, r1, r7
 8005182:	002a      	movs	r2, r5
 8005184:	3003      	adds	r0, #3
 8005186:	f00f f88e 	bl	80142a6 <memcpy>
	message[2] = length;
 800518a:	4baf      	ldr	r3, [pc, #700]	; (8005448 <SendMessageFromPort+0x32c>)
 800518c:	469a      	mov	sl, r3
 800518e:	709d      	strb	r5, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);	
 8005190:	1cef      	adds	r7, r5, #3
 8005192:	003a      	movs	r2, r7
 8005194:	0019      	movs	r1, r3
 8005196:	48af      	ldr	r0, [pc, #700]	; (8005454 <SendMessageFromPort+0x338>)
 8005198:	f00f f885 	bl	80142a6 <memcpy>
	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
 800519c:	17fe      	asrs	r6, r7, #31
 800519e:	2303      	movs	r3, #3
 80051a0:	469b      	mov	fp, r3
 80051a2:	401e      	ands	r6, r3
 80051a4:	19f6      	adds	r6, r6, r7
 80051a6:	10b6      	asrs	r6, r6, #2
 80051a8:	0032      	movs	r2, r6
 80051aa:	49aa      	ldr	r1, [pc, #680]	; (8005454 <SendMessageFromPort+0x338>)
 80051ac:	48aa      	ldr	r0, [pc, #680]	; (8005458 <SendMessageFromPort+0x33c>)
 80051ae:	f00b fcf8 	bl	8010ba2 <HAL_CRC_Calculate>
 80051b2:	4653      	mov	r3, sl
 80051b4:	55d8      	strb	r0, [r3, r7]
	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
 80051b6:	465b      	mov	r3, fp
 80051b8:	423b      	tst	r3, r7
 80051ba:	d000      	beq.n	80051be <SendMessageFromPort+0xa2>
 80051bc:	e0f3      	b.n	80053a6 <SendMessageFromPort+0x28a>
	memset(crcBuffer, 0, sizeof(crcBuffer));
 80051be:	2238      	movs	r2, #56	; 0x38
 80051c0:	2100      	movs	r1, #0
 80051c2:	48a4      	ldr	r0, [pc, #656]	; (8005454 <SendMessageFromPort+0x338>)
 80051c4:	f00f f878 	bl	80142b8 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 80051c8:	3402      	adds	r4, #2
 80051ca:	b2e4      	uxtb	r4, r4
 80051cc:	2c01      	cmp	r4, #1
 80051ce:	d900      	bls.n	80051d2 <SendMessageFromPort+0xb6>
 80051d0:	e0f3      	b.n	80053ba <SendMessageFromPort+0x29e>
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 80051d2:	9b03      	ldr	r3, [sp, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <SendMessageFromPort+0xc8>
 80051d8:	9b02      	ldr	r3, [sp, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d102      	bne.n	80051e4 <SendMessageFromPort+0xc8>
			src = message[4];
 80051de:	4b9a      	ldr	r3, [pc, #616]	; (8005448 <SendMessageFromPort+0x32c>)
 80051e0:	791b      	ldrb	r3, [r3, #4]
 80051e2:	9302      	str	r3, [sp, #8]
		FindBroadcastRoutes(src);
 80051e4:	9802      	ldr	r0, [sp, #8]
 80051e6:	f7ff fefb 	bl	8004fe0 <FindBroadcastRoutes>
 80051ea:	2600      	movs	r6, #0
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80051ec:	2401      	movs	r4, #1
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 80051ee:	4b9b      	ldr	r3, [pc, #620]	; (800545c <SendMessageFromPort+0x340>)
 80051f0:	4698      	mov	r8, r3
 80051f2:	4f9b      	ldr	r7, [pc, #620]	; (8005460 <SendMessageFromPort+0x344>)
 80051f4:	e0fb      	b.n	80053ee <SendMessageFromPort+0x2d2>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 80051f6:	9b02      	ldr	r3, [sp, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <SendMessageFromPort+0xe6>
 80051fc:	2a00      	cmp	r2, #0
 80051fe:	d100      	bne.n	8005202 <SendMessageFromPort+0xe6>
 8005200:	e109      	b.n	8005416 <SendMessageFromPort+0x2fa>
	TaskPriority = uxTaskPriorityGet( NULL );
 8005202:	2000      	movs	r0, #0
 8005204:	f00a fa4e 	bl	800f6a4 <uxTaskPriorityGet>
 8005208:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 800520a:	2105      	movs	r1, #5
 800520c:	2000      	movs	r0, #0
 800520e:	f00a fa59 	bl	800f6c4 <vTaskPrioritySet>
	message[0] = 'H';						
 8005212:	4b8d      	ldr	r3, [pc, #564]	; (8005448 <SendMessageFromPort+0x32c>)
 8005214:	2248      	movs	r2, #72	; 0x48
 8005216:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8005218:	3212      	adds	r2, #18
 800521a:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0a6      	beq.n	8005170 <SendMessageFromPort+0x54>
		if (src == 0)		src = myID;
 8005222:	9b02      	ldr	r3, [sp, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <SendMessageFromPort+0x112>
 8005228:	4b8d      	ldr	r3, [pc, #564]	; (8005460 <SendMessageFromPort+0x344>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	9302      	str	r3, [sp, #8]
		message[2] = length;	
 800522e:	4986      	ldr	r1, [pc, #536]	; (8005448 <SendMessageFromPort+0x32c>)
 8005230:	2300      	movs	r3, #0
 8005232:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 8005234:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 8005236:	9b02      	ldr	r3, [sp, #8]
 8005238:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 800523a:	4a8a      	ldr	r2, [pc, #552]	; (8005464 <SendMessageFromPort+0x348>)
 800523c:	79d3      	ldrb	r3, [r2, #7]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	7992      	ldrb	r2, [r2, #6]
 8005242:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 8005244:	22ff      	movs	r2, #255	; 0xff
 8005246:	9803      	ldr	r0, [sp, #12]
 8005248:	4282      	cmp	r2, r0
 800524a:	4192      	sbcs	r2, r2
 800524c:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 800524e:	0052      	lsls	r2, r2, #1
 8005250:	4313      	orrs	r3, r2
 8005252:	b2db      	uxtb	r3, r3
 8005254:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 8005256:	7188      	strb	r0, [r1, #6]
 8005258:	2200      	movs	r2, #0
 800525a:	4692      	mov	sl, r2
		if (extendCode == true) {
 800525c:	28ff      	cmp	r0, #255	; 0xff
 800525e:	d903      	bls.n	8005268 <SendMessageFromPort+0x14c>
			message[6+shift] = (uint8_t) (code >> 8);		
 8005260:	0a02      	lsrs	r2, r0, #8
 8005262:	71ca      	strb	r2, [r1, #7]
			++shift;
 8005264:	2201      	movs	r2, #1
 8005266:	4692      	mov	sl, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 8005268:	2f2e      	cmp	r7, #46	; 0x2e
 800526a:	d92f      	bls.n	80052cc <SendMessageFromPort+0x1b0>
			message[5] |= 0x80;		
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	4252      	negs	r2, r2
 8005270:	4313      	orrs	r3, r2
 8005272:	4a75      	ldr	r2, [pc, #468]	; (8005448 <SendMessageFromPort+0x32c>)
 8005274:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 8005276:	4b7c      	ldr	r3, [pc, #496]	; (8005468 <SendMessageFromPort+0x34c>)
 8005278:	801f      	strh	r7, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
 800527a:	2500      	movs	r5, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 800527c:	272e      	movs	r7, #46	; 0x2e
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 800527e:	4653      	mov	r3, sl
 8005280:	3307      	adds	r3, #7
 8005282:	4694      	mov	ip, r2
 8005284:	4463      	add	r3, ip
 8005286:	9305      	str	r3, [sp, #20]
			while (totalNumberOfParams != 0)
 8005288:	4b77      	ldr	r3, [pc, #476]	; (8005468 <SendMessageFromPort+0x34c>)
 800528a:	881e      	ldrh	r6, [r3, #0]
 800528c:	2e00      	cmp	r6, #0
 800528e:	d02b      	beq.n	80052e8 <SendMessageFromPort+0x1cc>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 8005290:	0039      	movs	r1, r7
 8005292:	0030      	movs	r0, r6
 8005294:	f7fa ff5c 	bl	8000150 <__udivsi3>
 8005298:	b280      	uxth	r0, r0
 800529a:	2800      	cmp	r0, #0
 800529c:	d141      	bne.n	8005322 <SendMessageFromPort+0x206>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 800529e:	4b6a      	ldr	r3, [pc, #424]	; (8005448 <SendMessageFromPort+0x32c>)
 80052a0:	795a      	ldrb	r2, [r3, #5]
 80052a2:	237f      	movs	r3, #127	; 0x7f
 80052a4:	4013      	ands	r3, r2
 80052a6:	4a68      	ldr	r2, [pc, #416]	; (8005448 <SendMessageFromPort+0x32c>)
 80052a8:	7153      	strb	r3, [r2, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80052aa:	4d70      	ldr	r5, [pc, #448]	; (800546c <SendMessageFromPort+0x350>)
 80052ac:	882b      	ldrh	r3, [r5, #0]
 80052ae:	4970      	ldr	r1, [pc, #448]	; (8005470 <SendMessageFromPort+0x354>)
 80052b0:	18c9      	adds	r1, r1, r3
 80052b2:	0032      	movs	r2, r6
 80052b4:	9805      	ldr	r0, [sp, #20]
 80052b6:	f00e fff6 	bl	80142a6 <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	802b      	strh	r3, [r5, #0]
 80052be:	4a6a      	ldr	r2, [pc, #424]	; (8005468 <SendMessageFromPort+0x34c>)
 80052c0:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 80052c2:	1d35      	adds	r5, r6, #4
 80052c4:	4455      	add	r5, sl
 80052c6:	b2ed      	uxtb	r5, r5
					numberOfParams = totalNumberOfParams;
 80052c8:	0037      	movs	r7, r6
 80052ca:	e7dd      	b.n	8005288 <SendMessageFromPort+0x16c>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80052cc:	4653      	mov	r3, sl
 80052ce:	3307      	adds	r3, #7
 80052d0:	485d      	ldr	r0, [pc, #372]	; (8005448 <SendMessageFromPort+0x32c>)
 80052d2:	18c0      	adds	r0, r0, r3
 80052d4:	4b65      	ldr	r3, [pc, #404]	; (800546c <SendMessageFromPort+0x350>)
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	4965      	ldr	r1, [pc, #404]	; (8005470 <SendMessageFromPort+0x354>)
 80052da:	18c9      	adds	r1, r1, r3
 80052dc:	003a      	movs	r2, r7
 80052de:	f00e ffe2 	bl	80142a6 <memcpy>
			length = numberOfParams + shift + 4;
 80052e2:	1d3d      	adds	r5, r7, #4
 80052e4:	4455      	add	r5, sl
 80052e6:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true)
 80052e8:	4b62      	ldr	r3, [pc, #392]	; (8005474 <SendMessageFromPort+0x358>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d100      	bne.n	80052f2 <SendMessageFromPort+0x1d6>
 80052f0:	e74b      	b.n	800518a <SendMessageFromPort+0x6e>
			if (dstGroupID < BOS_BROADCAST)
 80052f2:	4b61      	ldr	r3, [pc, #388]	; (8005478 <SendMessageFromPort+0x35c>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2bff      	cmp	r3, #255	; 0xff
 80052f8:	d100      	bne.n	80052fc <SendMessageFromPort+0x1e0>
 80052fa:	e090      	b.n	800541e <SendMessageFromPort+0x302>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 80052fc:	4a5f      	ldr	r2, [pc, #380]	; (800547c <SendMessageFromPort+0x360>)
 80052fe:	7812      	ldrb	r2, [r2, #0]
 8005300:	4694      	mov	ip, r2
 8005302:	2a00      	cmp	r2, #0
 8005304:	d04d      	beq.n	80053a2 <SendMessageFromPort+0x286>
 8005306:	2601      	movs	r6, #1
 8005308:	409e      	lsls	r6, r3
 800530a:	485d      	ldr	r0, [pc, #372]	; (8005480 <SendMessageFromPort+0x364>)
 800530c:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 800530e:	2100      	movs	r1, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8005310:	4a4d      	ldr	r2, [pc, #308]	; (8005448 <SendMessageFromPort+0x32c>)
 8005312:	4691      	mov	r9, r2
 8005314:	44b9      	add	r9, r7
 8005316:	0022      	movs	r2, r4
 8005318:	4664      	mov	r4, ip
 800531a:	46ac      	mov	ip, r5
 800531c:	4655      	mov	r5, sl
 800531e:	4692      	mov	sl, r2
 8005320:	e017      	b.n	8005352 <SendMessageFromPort+0x236>
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8005322:	9700      	str	r7, [sp, #0]
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	0022      	movs	r2, r4
 8005328:	9902      	ldr	r1, [sp, #8]
 800532a:	4640      	mov	r0, r8
 800532c:	f7ff fef6 	bl	800511c <SendMessageFromPort>
					osDelay(10);
 8005330:	200a      	movs	r0, #10
 8005332:	f009 fac8 	bl	800e8c6 <osDelay>
					totalNumberOfParams -= numberOfParams;
 8005336:	4a4c      	ldr	r2, [pc, #304]	; (8005468 <SendMessageFromPort+0x34c>)
 8005338:	8813      	ldrh	r3, [r2, #0]
 800533a:	1bdb      	subs	r3, r3, r7
 800533c:	8013      	strh	r3, [r2, #0]
					ptrShift += numberOfParams;
 800533e:	4a4b      	ldr	r2, [pc, #300]	; (800546c <SendMessageFromPort+0x350>)
 8005340:	8813      	ldrh	r3, [r2, #0]
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	8013      	strh	r3, [r2, #0]
 8005346:	e79f      	b.n	8005288 <SendMessageFromPort+0x16c>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8005348:	3301      	adds	r3, #1
 800534a:	b29b      	uxth	r3, r3
 800534c:	3002      	adds	r0, #2
 800534e:	42a3      	cmp	r3, r4
 8005350:	d80d      	bhi.n	800536e <SendMessageFromPort+0x252>
					if (InGroup(i, dstGroupID))
 8005352:	8802      	ldrh	r2, [r0, #0]
 8005354:	4216      	tst	r6, r2
 8005356:	d0f7      	beq.n	8005348 <SendMessageFromPort+0x22c>
						++groupMembers;							// Add this member
 8005358:	3101      	adds	r1, #1
 800535a:	b2c9      	uxtb	r1, r1
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 800535c:	187a      	adds	r2, r7, r1
 800535e:	3201      	adds	r2, #1
 8005360:	2a2d      	cmp	r2, #45	; 0x2d
 8005362:	dc5a      	bgt.n	800541a <SendMessageFromPort+0x2fe>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8005364:	464a      	mov	r2, r9
 8005366:	1852      	adds	r2, r2, r1
 8005368:	1952      	adds	r2, r2, r5
 800536a:	7193      	strb	r3, [r2, #6]
 800536c:	e7ec      	b.n	8005348 <SendMessageFromPort+0x22c>
 800536e:	4654      	mov	r4, sl
 8005370:	46aa      	mov	sl, r5
 8005372:	4665      	mov	r5, ip
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 8005374:	4653      	mov	r3, sl
 8005376:	3307      	adds	r3, #7
 8005378:	19db      	adds	r3, r3, r7
 800537a:	185b      	adds	r3, r3, r1
 800537c:	4a32      	ldr	r2, [pc, #200]	; (8005448 <SendMessageFromPort+0x32c>)
 800537e:	54d1      	strb	r1, [r2, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8005380:	187f      	adds	r7, r7, r1
 8005382:	3702      	adds	r7, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8005384:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8005386:	2f2d      	cmp	r7, #45	; 0x2d
 8005388:	dc25      	bgt.n	80053d6 <SendMessageFromPort+0x2ba>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 800538a:	483e      	ldr	r0, [pc, #248]	; (8005484 <SendMessageFromPort+0x368>)
 800538c:	7802      	ldrb	r2, [r0, #0]
 800538e:	3201      	adds	r2, #1
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	7002      	strb	r2, [r0, #0]
 8005394:	482c      	ldr	r0, [pc, #176]	; (8005448 <SendMessageFromPort+0x32c>)
 8005396:	18c3      	adds	r3, r0, r3
 8005398:	705a      	strb	r2, [r3, #1]
 800539a:	3502      	adds	r5, #2
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800539c:	186d      	adds	r5, r5, r1
 800539e:	b2ed      	uxtb	r5, r5
 80053a0:	e6f3      	b.n	800518a <SendMessageFromPort+0x6e>
			uint8_t groupMembers = 0;
 80053a2:	2100      	movs	r1, #0
 80053a4:	e7e6      	b.n	8005374 <SendMessageFromPort+0x258>
		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
 80053a6:	00b6      	lsls	r6, r6, #2
 80053a8:	492a      	ldr	r1, [pc, #168]	; (8005454 <SendMessageFromPort+0x338>)
 80053aa:	1871      	adds	r1, r6, r1
 80053ac:	2201      	movs	r2, #1
 80053ae:	482a      	ldr	r0, [pc, #168]	; (8005458 <SendMessageFromPort+0x33c>)
 80053b0:	f00b fbcb 	bl	8010b4a <HAL_CRC_Accumulate>
 80053b4:	4b24      	ldr	r3, [pc, #144]	; (8005448 <SendMessageFromPort+0x32c>)
 80053b6:	55d8      	strb	r0, [r3, r7]
 80053b8:	e701      	b.n	80051be <SendMessageFromPort+0xa2>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 80053ba:	1d2a      	adds	r2, r5, #4
 80053bc:	2332      	movs	r3, #50	; 0x32
 80053be:	4922      	ldr	r1, [pc, #136]	; (8005448 <SendMessageFromPort+0x32c>)
 80053c0:	4640      	mov	r0, r8
 80053c2:	f008 fdfd 	bl	800dfc0 <writePxDMAMutex>
	vTaskPrioritySet( NULL, TaskPriority );
 80053c6:	9904      	ldr	r1, [sp, #16]
 80053c8:	2000      	movs	r0, #0
 80053ca:	f00a f97b 	bl	800f6c4 <vTaskPrioritySet>
	responseStatus = BOS_ERR_NoResponse;
 80053ce:	4b2e      	ldr	r3, [pc, #184]	; (8005488 <SendMessageFromPort+0x36c>)
 80053d0:	2202      	movs	r2, #2
 80053d2:	701a      	strb	r2, [r3, #0]
	return result;
 80053d4:	2000      	movs	r0, #0
}
 80053d6:	b007      	add	sp, #28
 80053d8:	bc3c      	pop	{r2, r3, r4, r5}
 80053da:	4690      	mov	r8, r2
 80053dc:	4699      	mov	r9, r3
 80053de:	46a2      	mov	sl, r4
 80053e0:	46ab      	mov	fp, r5
 80053e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80053e4:	3401      	adds	r4, #1
 80053e6:	b2e4      	uxtb	r4, r4
 80053e8:	3601      	adds	r6, #1
 80053ea:	2c07      	cmp	r4, #7
 80053ec:	d0eb      	beq.n	80053c6 <SendMessageFromPort+0x2aa>
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 80053ee:	783b      	ldrb	r3, [r7, #0]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	4642      	mov	r2, r8
 80053f6:	5a9b      	ldrh	r3, [r3, r2]
 80053f8:	4133      	asrs	r3, r6
 80053fa:	07db      	lsls	r3, r3, #31
 80053fc:	d5f2      	bpl.n	80053e4 <SendMessageFromPort+0x2c8>
				writePxDMAMutex(p, message, length+4, cmd50ms);
 80053fe:	1d2a      	adds	r2, r5, #4
 8005400:	2332      	movs	r3, #50	; 0x32
 8005402:	4911      	ldr	r1, [pc, #68]	; (8005448 <SendMessageFromPort+0x32c>)
 8005404:	0020      	movs	r0, r4
 8005406:	f008 fddb 	bl	800dfc0 <writePxDMAMutex>
				Delay_ms(1);
 800540a:	2001      	movs	r0, #1
 800540c:	f00b fa86 	bl	801091c <HAL_Delay>
 8005410:	e7e8      	b.n	80053e4 <SendMessageFromPort+0x2c8>
		return BOS_ERR_WrongParam; 
 8005412:	2067      	movs	r0, #103	; 0x67
 8005414:	e7df      	b.n	80053d6 <SendMessageFromPort+0x2ba>
 8005416:	2067      	movs	r0, #103	; 0x67
 8005418:	e7dd      	b.n	80053d6 <SendMessageFromPort+0x2ba>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 800541a:	2069      	movs	r0, #105	; 0x69
 800541c:	e7db      	b.n	80053d6 <SendMessageFromPort+0x2ba>
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 800541e:	1c7b      	adds	r3, r7, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8005420:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8005422:	2b2d      	cmp	r3, #45	; 0x2d
 8005424:	dcd7      	bgt.n	80053d6 <SendMessageFromPort+0x2ba>
				message[7+shift+numberOfParams] = ++bcastID;
 8005426:	4a17      	ldr	r2, [pc, #92]	; (8005484 <SendMessageFromPort+0x368>)
 8005428:	7813      	ldrb	r3, [r2, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	7013      	strb	r3, [r2, #0]
 8005430:	4a05      	ldr	r2, [pc, #20]	; (8005448 <SendMessageFromPort+0x32c>)
 8005432:	19d7      	adds	r7, r2, r7
 8005434:	4457      	add	r7, sl
 8005436:	71fb      	strb	r3, [r7, #7]
				length += 1;		// + bcastID
 8005438:	3501      	adds	r5, #1
 800543a:	b2ed      	uxtb	r5, r5
 800543c:	e6a5      	b.n	800518a <SendMessageFromPort+0x6e>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800543e:	9b03      	ldr	r3, [sp, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d100      	bne.n	8005446 <SendMessageFromPort+0x32a>
 8005444:	e694      	b.n	8005170 <SendMessageFromPort+0x54>
 8005446:	e6f2      	b.n	800522e <SendMessageFromPort+0x112>
 8005448:	20001124 	.word	0x20001124
 800544c:	2000115c 	.word	0x2000115c
 8005450:	20000de0 	.word	0x20000de0
 8005454:	200016a4 	.word	0x200016a4
 8005458:	20006dc8 	.word	0x20006dc8
 800545c:	20000d1c 	.word	0x20000d1c
 8005460:	20001298 	.word	0x20001298
 8005464:	20006a10 	.word	0x20006a10
 8005468:	200013f8 	.word	0x200013f8
 800546c:	2000136c 	.word	0x2000136c
 8005470:	20001164 	.word	0x20001164
 8005474:	20000abc 	.word	0x20000abc
 8005478:	2000001d 	.word	0x2000001d
 800547c:	2000001c 	.word	0x2000001c
 8005480:	20000fd8 	.word	0x20000fd8
 8005484:	20000d1a 	.word	0x20000d1a
 8005488:	200013a0 	.word	0x200013a0

0800548c <BroadcastReceivedMessage>:
{
 800548c:	b500      	push	{lr}
 800548e:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <BroadcastReceivedMessage+0x38>)
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <BroadcastReceivedMessage+0x3c>)
 8005498:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 800549a:	28ff      	cmp	r0, #255	; 0xff
 800549c:	d009      	beq.n	80054b2 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 800549e:	9100      	str	r1, [sp, #0]
 80054a0:	2300      	movs	r3, #0
 80054a2:	22fe      	movs	r2, #254	; 0xfe
 80054a4:	2100      	movs	r1, #0
 80054a6:	2000      	movs	r0, #0
 80054a8:	f7ff fe38 	bl	800511c <SendMessageFromPort>
}
 80054ac:	2000      	movs	r0, #0
 80054ae:	b003      	add	sp, #12
 80054b0:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 80054b2:	9100      	str	r1, [sp, #0]
 80054b4:	2300      	movs	r3, #0
 80054b6:	32ff      	adds	r2, #255	; 0xff
 80054b8:	2100      	movs	r1, #0
 80054ba:	2000      	movs	r0, #0
 80054bc:	f7ff fe2e 	bl	800511c <SendMessageFromPort>
 80054c0:	e7f4      	b.n	80054ac <BroadcastReceivedMessage+0x20>
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	20000abc 	.word	0x20000abc
 80054c8:	2000001d 	.word	0x2000001d

080054cc <BroadcastMessage>:
{
 80054cc:	b530      	push	{r4, r5, lr}
 80054ce:	b083      	sub	sp, #12
 80054d0:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <BroadcastMessage+0x44>)
 80054d4:	2501      	movs	r5, #1
 80054d6:	701d      	strb	r5, [r3, #0]
 80054d8:	4b0e      	ldr	r3, [pc, #56]	; (8005514 <BroadcastMessage+0x48>)
 80054da:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 80054dc:	29ff      	cmp	r1, #255	; 0xff
 80054de:	d00e      	beq.n	80054fe <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 80054e0:	9400      	str	r4, [sp, #0]
 80054e2:	0013      	movs	r3, r2
 80054e4:	22fe      	movs	r2, #254	; 0xfe
 80054e6:	0001      	movs	r1, r0
 80054e8:	2000      	movs	r0, #0
 80054ea:	f7ff fe17 	bl	800511c <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 80054ee:	0022      	movs	r2, r4
 80054f0:	2100      	movs	r1, #0
 80054f2:	4809      	ldr	r0, [pc, #36]	; (8005518 <BroadcastMessage+0x4c>)
 80054f4:	f00e fee0 	bl	80142b8 <memset>
}
 80054f8:	2000      	movs	r0, #0
 80054fa:	b003      	add	sp, #12
 80054fc:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 80054fe:	9400      	str	r4, [sp, #0]
 8005500:	0013      	movs	r3, r2
 8005502:	22ff      	movs	r2, #255	; 0xff
 8005504:	0001      	movs	r1, r0
 8005506:	2000      	movs	r0, #0
 8005508:	f7ff fe08 	bl	800511c <SendMessageFromPort>
 800550c:	e7ef      	b.n	80054ee <BroadcastMessage+0x22>
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	20000abc 	.word	0x20000abc
 8005514:	2000001d 	.word	0x2000001d
 8005518:	20001164 	.word	0x20001164

0800551c <ExploreNeighbors>:
{
 800551c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800551e:	46c6      	mov	lr, r8
 8005520:	b500      	push	{lr}
 8005522:	b082      	sub	sp, #8
 8005524:	0006      	movs	r6, r0
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8005526:	2401      	movs	r4, #1
			messageParams[0] = (uint8_t) (myPN >> 8);
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <ExploreNeighbors+0x4c>)
 800552a:	4698      	mov	r8, r3
 800552c:	4d0f      	ldr	r5, [pc, #60]	; (800556c <ExploreNeighbors+0x50>)
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 800552e:	2703      	movs	r7, #3
		if (port != ignore) 
 8005530:	42a6      	cmp	r6, r4
 8005532:	d00f      	beq.n	8005554 <ExploreNeighbors+0x38>
			messageParams[0] = (uint8_t) (myPN >> 8);
 8005534:	4643      	mov	r3, r8
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	0a1a      	lsrs	r2, r3, #8
 800553a:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 800553c:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 800553e:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8005540:	9700      	str	r7, [sp, #0]
 8005542:	230a      	movs	r3, #10
 8005544:	2200      	movs	r2, #0
 8005546:	2100      	movs	r1, #0
 8005548:	0020      	movs	r0, r4
 800554a:	f7ff fde7 	bl	800511c <SendMessageFromPort>
			osDelay(10);
 800554e:	200a      	movs	r0, #10
 8005550:	f009 f9b9 	bl	800e8c6 <osDelay>
	for (uint8_t port=1 ; port<=NumOfPorts ; port++)  
 8005554:	3401      	adds	r4, #1
 8005556:	b2e4      	uxtb	r4, r4
 8005558:	2c07      	cmp	r4, #7
 800555a:	d1e9      	bne.n	8005530 <ExploreNeighbors+0x14>
}
 800555c:	2000      	movs	r0, #0
 800555e:	b002      	add	sp, #8
 8005560:	bc04      	pop	{r2}
 8005562:	4690      	mov	r8, r2
 8005564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	2000001e 	.word	0x2000001e
 800556c:	20001164 	.word	0x20001164

08005570 <StartMicroDelay>:
{
 8005570:	b510      	push	{r4, lr}
 8005572:	0004      	movs	r4, r0
	portENTER_CRITICAL();
 8005574:	f00b f860 	bl	8010638 <vPortEnterCritical>
	if (Delay)
 8005578:	2c00      	cmp	r4, #0
 800557a:	d006      	beq.n	800558a <StartMicroDelay+0x1a>
		t0 = htim14.Instance->CNT;
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <StartMicroDelay+0x20>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	6a51      	ldr	r1, [r2, #36]	; 0x24
		while(htim14.Instance->CNT - t0 <= Delay) {};
 8005582:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005584:	1a5b      	subs	r3, r3, r1
 8005586:	42a3      	cmp	r3, r4
 8005588:	d9fb      	bls.n	8005582 <StartMicroDelay+0x12>
	portEXIT_CRITICAL();
 800558a:	f00b f861 	bl	8010650 <vPortExitCritical>
}
 800558e:	bd10      	pop	{r4, pc}
 8005590:	20006a2c 	.word	0x20006a2c

08005594 <CheckAttachedButtons>:
{
 8005594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005596:	46de      	mov	lr, fp
 8005598:	4657      	mov	r7, sl
 800559a:	464e      	mov	r6, r9
 800559c:	4645      	mov	r5, r8
 800559e:	b5e0      	push	{r5, r6, r7, lr}
 80055a0:	b089      	sub	sp, #36	; 0x24
 80055a2:	4dbd      	ldr	r5, [pc, #756]	; (8005898 <CheckAttachedButtons+0x304>)
 80055a4:	3509      	adds	r5, #9
 80055a6:	2404      	movs	r4, #4
 80055a8:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	469b      	mov	fp, r3
 80055ae:	4699      	mov	r9, r3
 80055b0:	e111      	b.n	80057d6 <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 80055b2:	230e      	movs	r3, #14
 80055b4:	aa02      	add	r2, sp, #8
 80055b6:	4694      	mov	ip, r2
 80055b8:	4463      	add	r3, ip
 80055ba:	8819      	ldrh	r1, [r3, #0]
 80055bc:	2201      	movs	r2, #1
 80055be:	9807      	ldr	r0, [sp, #28]
 80055c0:	f00c fa78 	bl	8011ab4 <HAL_GPIO_WritePin>
 80055c4:	200a      	movs	r0, #10
 80055c6:	f7ff ffd3 	bl	8005570 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 80055ca:	ab05      	add	r3, sp, #20
 80055cc:	8819      	ldrh	r1, [r3, #0]
 80055ce:	9806      	ldr	r0, [sp, #24]
 80055d0:	f00c fa6a 	bl	8011aa8 <HAL_GPIO_ReadPin>
 80055d4:	4681      	mov	r9, r0
 80055d6:	e126      	b.n	8005826 <CheckAttachedButtons+0x292>
			switch (button[i].type)
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d105      	bne.n	80055e8 <CheckAttachedButtons+0x54>
					if (connected == GPIO_PIN_SET)	
 80055dc:	464b      	mov	r3, r9
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d046      	beq.n	8005670 <CheckAttachedButtons+0xdc>
					else if (connected == GPIO_PIN_RESET)
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d100      	bne.n	80055e8 <CheckAttachedButtons+0x54>
 80055e6:	e1c5      	b.n	8005974 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON)												
 80055e8:	465b      	mov	r3, fp
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d001      	beq.n	80055f2 <CheckAttachedButtons+0x5e>
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d107      	bne.n	8005602 <CheckAttachedButtons+0x6e>
				if (pressCounter[i] < 0xFFFF)	
 80055f2:	4baa      	ldr	r3, [pc, #680]	; (800589c <CheckAttachedButtons+0x308>)
 80055f4:	58e3      	ldr	r3, [r4, r3]
 80055f6:	4aaa      	ldr	r2, [pc, #680]	; (80058a0 <CheckAttachedButtons+0x30c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d842      	bhi.n	8005682 <CheckAttachedButtons+0xee>
					++pressCounter[i];																			// Advance the debounce counter
 80055fc:	3301      	adds	r3, #1
 80055fe:	4aa7      	ldr	r2, [pc, #668]	; (800589c <CheckAttachedButtons+0x308>)
 8005600:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF)												
 8005602:	23fd      	movs	r3, #253	; 0xfd
 8005604:	465a      	mov	r2, fp
 8005606:	4013      	ands	r3, r2
 8005608:	2b01      	cmp	r3, #1
 800560a:	d100      	bne.n	800560e <CheckAttachedButtons+0x7a>
 800560c:	e1b6      	b.n	800597c <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) 									
 800560e:	4ba3      	ldr	r3, [pc, #652]	; (800589c <CheckAttachedButtons+0x308>)
 8005610:	58e3      	ldr	r3, [r4, r3]
 8005612:	4aa4      	ldr	r2, [pc, #656]	; (80058a4 <CheckAttachedButtons+0x310>)
 8005614:	8812      	ldrh	r2, [r2, #0]
 8005616:	4293      	cmp	r3, r2
 8005618:	d36f      	bcc.n	80056fa <CheckAttachedButtons+0x166>
				if (pressCounter[i] == BOS.buttons.debounce)
 800561a:	d045      	beq.n	80056a8 <CheckAttachedButtons+0x114>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800561c:	4ba2      	ldr	r3, [pc, #648]	; (80058a8 <CheckAttachedButtons+0x314>)
 800561e:	58e3      	ldr	r3, [r4, r3]
 8005620:	429a      	cmp	r2, r3
 8005622:	d202      	bcs.n	800562a <CheckAttachedButtons+0x96>
					releaseCounter[i] = 0;					
 8005624:	4ba0      	ldr	r3, [pc, #640]	; (80058a8 <CheckAttachedButtons+0x314>)
 8005626:	2200      	movs	r2, #0
 8005628:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 800562a:	4b9c      	ldr	r3, [pc, #624]	; (800589c <CheckAttachedButtons+0x308>)
 800562c:	58e3      	ldr	r3, [r4, r3]
 800562e:	4a9d      	ldr	r2, [pc, #628]	; (80058a4 <CheckAttachedButtons+0x310>)
 8005630:	8852      	ldrh	r2, [r2, #2]
 8005632:	4293      	cmp	r3, r2
 8005634:	d952      	bls.n	80056dc <CheckAttachedButtons+0x148>
 8005636:	22f4      	movs	r2, #244	; 0xf4
 8005638:	32ff      	adds	r2, #255	; 0xff
 800563a:	4293      	cmp	r3, r2
 800563c:	d84e      	bhi.n	80056dc <CheckAttachedButtons+0x148>
					if (clicked == 0)
 800563e:	4b9b      	ldr	r3, [pc, #620]	; (80058ac <CheckAttachedButtons+0x318>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d137      	bne.n	80056b6 <CheckAttachedButtons+0x122>
						clicked = 1;																					// Record a possible single click 
 8005646:	4b99      	ldr	r3, [pc, #612]	; (80058ac <CheckAttachedButtons+0x318>)
 8005648:	3af3      	subs	r2, #243	; 0xf3
 800564a:	3aff      	subs	r2, #255	; 0xff
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	e054      	b.n	80056fa <CheckAttachedButtons+0x166>
					if (connected == GPIO_PIN_SET)	
 8005650:	464b      	mov	r3, r9
 8005652:	2b01      	cmp	r3, #1
 8005654:	d00f      	beq.n	8005676 <CheckAttachedButtons+0xe2>
					else if (connected == GPIO_PIN_RESET) 
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1c6      	bne.n	80055e8 <CheckAttachedButtons+0x54>
						state = OPEN;	
 800565a:	2303      	movs	r3, #3
 800565c:	469b      	mov	fp, r3
 800565e:	e18d      	b.n	800597c <CheckAttachedButtons+0x3e8>
					if (connected == GPIO_PIN_SET)	
 8005660:	464b      	mov	r3, r9
 8005662:	2b01      	cmp	r3, #1
 8005664:	d00a      	beq.n	800567c <CheckAttachedButtons+0xe8>
					else if (connected == GPIO_PIN_RESET) 
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1be      	bne.n	80055e8 <CheckAttachedButtons+0x54>
						state = OFF;
 800566a:	2301      	movs	r3, #1
 800566c:	469b      	mov	fp, r3
 800566e:	e185      	b.n	800597c <CheckAttachedButtons+0x3e8>
						state = CLOSED;
 8005670:	2304      	movs	r3, #4
 8005672:	469b      	mov	fp, r3
 8005674:	e7bd      	b.n	80055f2 <CheckAttachedButtons+0x5e>
						state = CLOSED;
 8005676:	2304      	movs	r3, #4
 8005678:	469b      	mov	fp, r3
 800567a:	e7ba      	b.n	80055f2 <CheckAttachedButtons+0x5e>
 800567c:	2302      	movs	r3, #2
 800567e:	469b      	mov	fp, r3
 8005680:	e7b7      	b.n	80055f2 <CheckAttachedButtons+0x5e>
					pressCounter[i] = 0;																		// Reset debounce counter					
 8005682:	4b86      	ldr	r3, [pc, #536]	; (800589c <CheckAttachedButtons+0x308>)
 8005684:	2200      	movs	r2, #0
 8005686:	50e2      	str	r2, [r4, r3]
 8005688:	e7bb      	b.n	8005602 <CheckAttachedButtons+0x6e>
					releaseCounter[i] = 0;																	// Reset debounce counter		
 800568a:	4b87      	ldr	r3, [pc, #540]	; (80058a8 <CheckAttachedButtons+0x314>)
 800568c:	2200      	movs	r2, #0
 800568e:	50e2      	str	r2, [r4, r3]
 8005690:	e17d      	b.n	800598e <CheckAttachedButtons+0x3fa>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 8005692:	4b87      	ldr	r3, [pc, #540]	; (80058b0 <CheckAttachedButtons+0x31c>)
 8005694:	5cf3      	ldrb	r3, [r6, r3]
 8005696:	4a83      	ldr	r2, [pc, #524]	; (80058a4 <CheckAttachedButtons+0x310>)
 8005698:	7952      	ldrb	r2, [r2, #5]
 800569a:	429a      	cmp	r2, r3
 800569c:	d200      	bcs.n	80056a0 <CheckAttachedButtons+0x10c>
 800569e:	e182      	b.n	80059a6 <CheckAttachedButtons+0x412>
					++dblCounter[i];			
 80056a0:	3301      	adds	r3, #1
 80056a2:	4a83      	ldr	r2, [pc, #524]	; (80058b0 <CheckAttachedButtons+0x31c>)
 80056a4:	54b3      	strb	r3, [r6, r2]
 80056a6:	e7b2      	b.n	800560e <CheckAttachedButtons+0x7a>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 80056a8:	2107      	movs	r1, #7
 80056aa:	4640      	mov	r0, r8
 80056ac:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 80056ae:	3301      	adds	r3, #1
 80056b0:	497a      	ldr	r1, [pc, #488]	; (800589c <CheckAttachedButtons+0x308>)
 80056b2:	5063      	str	r3, [r4, r1]
 80056b4:	e7b2      	b.n	800561c <CheckAttachedButtons+0x88>
					else if (clicked == 2) {
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d11f      	bne.n	80056fa <CheckAttachedButtons+0x166>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 80056ba:	4b7d      	ldr	r3, [pc, #500]	; (80058b0 <CheckAttachedButtons+0x31c>)
 80056bc:	5cf3      	ldrb	r3, [r6, r3]
 80056be:	4a79      	ldr	r2, [pc, #484]	; (80058a4 <CheckAttachedButtons+0x310>)
 80056c0:	7912      	ldrb	r2, [r2, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d219      	bcs.n	80056fa <CheckAttachedButtons+0x166>
 80056c6:	4a77      	ldr	r2, [pc, #476]	; (80058a4 <CheckAttachedButtons+0x310>)
 80056c8:	7952      	ldrb	r2, [r2, #5]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d915      	bls.n	80056fa <CheckAttachedButtons+0x166>
							clicked = 3;																				// Record a possible double click 
 80056ce:	4b77      	ldr	r3, [pc, #476]	; (80058ac <CheckAttachedButtons+0x318>)
 80056d0:	2203      	movs	r2, #3
 80056d2:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 80056d4:	4b76      	ldr	r3, [pc, #472]	; (80058b0 <CheckAttachedButtons+0x31c>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	54f2      	strb	r2, [r6, r3]
 80056da:	e00e      	b.n	80056fa <CheckAttachedButtons+0x166>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 80056dc:	3bf5      	subs	r3, #245	; 0xf5
 80056de:	3bff      	subs	r3, #255	; 0xff
 80056e0:	4a74      	ldr	r2, [pc, #464]	; (80058b4 <CheckAttachedButtons+0x320>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d809      	bhi.n	80056fa <CheckAttachedButtons+0x166>
					if (clicked)	clicked = 0;															// Cannot be a click
 80056e6:	4b71      	ldr	r3, [pc, #452]	; (80058ac <CheckAttachedButtons+0x318>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <CheckAttachedButtons+0x160>
 80056ee:	4b6f      	ldr	r3, [pc, #444]	; (80058ac <CheckAttachedButtons+0x318>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 80056f4:	9803      	ldr	r0, [sp, #12]
 80056f6:	f7fe fed9 	bl	80044ac <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 80056fa:	4b6b      	ldr	r3, [pc, #428]	; (80058a8 <CheckAttachedButtons+0x314>)
 80056fc:	58e3      	ldr	r3, [r4, r3]
 80056fe:	4a69      	ldr	r2, [pc, #420]	; (80058a4 <CheckAttachedButtons+0x310>)
 8005700:	8812      	ldrh	r2, [r2, #0]
 8005702:	4293      	cmp	r3, r2
 8005704:	d34d      	bcc.n	80057a2 <CheckAttachedButtons+0x20e>
				if (releaseCounter[i] == BOS.buttons.debounce)
 8005706:	d02b      	beq.n	8005760 <CheckAttachedButtons+0x1cc>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8005708:	4b64      	ldr	r3, [pc, #400]	; (800589c <CheckAttachedButtons+0x308>)
 800570a:	58e3      	ldr	r3, [r4, r3]
 800570c:	429a      	cmp	r2, r3
 800570e:	d202      	bcs.n	8005716 <CheckAttachedButtons+0x182>
					pressCounter[i] = 0;				
 8005710:	4b62      	ldr	r3, [pc, #392]	; (800589c <CheckAttachedButtons+0x308>)
 8005712:	2200      	movs	r2, #0
 8005714:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 8005716:	4b64      	ldr	r3, [pc, #400]	; (80058a8 <CheckAttachedButtons+0x314>)
 8005718:	58e3      	ldr	r3, [r4, r3]
 800571a:	4a62      	ldr	r2, [pc, #392]	; (80058a4 <CheckAttachedButtons+0x310>)
 800571c:	8852      	ldrh	r2, [r2, #2]
 800571e:	4293      	cmp	r3, r2
 8005720:	d93a      	bls.n	8005798 <CheckAttachedButtons+0x204>
 8005722:	22f4      	movs	r2, #244	; 0xf4
 8005724:	32ff      	adds	r2, #255	; 0xff
 8005726:	4293      	cmp	r3, r2
 8005728:	d836      	bhi.n	8005798 <CheckAttachedButtons+0x204>
					if (clicked == 1)
 800572a:	4b60      	ldr	r3, [pc, #384]	; (80058ac <CheckAttachedButtons+0x318>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d01d      	beq.n	800576e <CheckAttachedButtons+0x1da>
					else if (clicked == 3)
 8005732:	2b03      	cmp	r3, #3
 8005734:	d135      	bne.n	80057a2 <CheckAttachedButtons+0x20e>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 8005736:	3303      	adds	r3, #3
 8005738:	4642      	mov	r2, r8
 800573a:	7013      	strb	r3, [r2, #0]
						clicked = 0;																					// Prepare for a single click					
 800573c:	4b5b      	ldr	r3, [pc, #364]	; (80058ac <CheckAttachedButtons+0x318>)
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 8005742:	4b5d      	ldr	r3, [pc, #372]	; (80058b8 <CheckAttachedButtons+0x324>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d13f      	bne.n	80057ca <CheckAttachedButtons+0x236>
 800574a:	4643      	mov	r3, r8
 800574c:	7a1b      	ldrb	r3, [r3, #8]
 800574e:	079b      	lsls	r3, r3, #30
 8005750:	d53b      	bpl.n	80057ca <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8005752:	4b59      	ldr	r3, [pc, #356]	; (80058b8 <CheckAttachedButtons+0x324>)
 8005754:	2201      	movs	r2, #1
 8005756:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8005758:	9803      	ldr	r0, [sp, #12]
 800575a:	f7fe ff26 	bl	80045aa <buttonDblClickedCallback>
 800575e:	e034      	b.n	80057ca <CheckAttachedButtons+0x236>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 8005760:	2108      	movs	r1, #8
 8005762:	4640      	mov	r0, r8
 8005764:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 8005766:	3301      	adds	r3, #1
 8005768:	494f      	ldr	r1, [pc, #316]	; (80058a8 <CheckAttachedButtons+0x314>)
 800576a:	5063      	str	r3, [r4, r1]
 800576c:	e7cc      	b.n	8005708 <CheckAttachedButtons+0x174>
						button[i].state = CLICKED;														// Record a single button click event
 800576e:	3304      	adds	r3, #4
 8005770:	4642      	mov	r2, r8
 8005772:	7013      	strb	r3, [r2, #0]
						clicked = 2;																					// Prepare for a double click
 8005774:	4b4d      	ldr	r3, [pc, #308]	; (80058ac <CheckAttachedButtons+0x318>)
 8005776:	2202      	movs	r2, #2
 8005778:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 800577a:	4b4f      	ldr	r3, [pc, #316]	; (80058b8 <CheckAttachedButtons+0x324>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d123      	bne.n	80057ca <CheckAttachedButtons+0x236>
 8005782:	4643      	mov	r3, r8
 8005784:	7a1b      	ldrb	r3, [r3, #8]
 8005786:	07db      	lsls	r3, r3, #31
 8005788:	d51f      	bpl.n	80057ca <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 800578a:	4b4b      	ldr	r3, [pc, #300]	; (80058b8 <CheckAttachedButtons+0x324>)
 800578c:	2201      	movs	r2, #1
 800578e:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8005790:	9803      	ldr	r0, [sp, #12]
 8005792:	f7fe ff09 	bl	80045a8 <buttonClickedCallback>
 8005796:	e018      	b.n	80057ca <CheckAttachedButtons+0x236>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 8005798:	3bf5      	subs	r3, #245	; 0xf5
 800579a:	3bff      	subs	r3, #255	; 0xff
 800579c:	4a45      	ldr	r2, [pc, #276]	; (80058b4 <CheckAttachedButtons+0x320>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d909      	bls.n	80057b6 <CheckAttachedButtons+0x222>
			switch (button[i].state)
 80057a2:	4643      	mov	r3, r8
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	3b05      	subs	r3, #5
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	2a09      	cmp	r2, #9
 80057ac:	d80d      	bhi.n	80057ca <CheckAttachedButtons+0x236>
 80057ae:	0093      	lsls	r3, r2, #2
 80057b0:	4a42      	ldr	r2, [pc, #264]	; (80058bc <CheckAttachedButtons+0x328>)
 80057b2:	58d3      	ldr	r3, [r2, r3]
 80057b4:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 80057b6:	9803      	ldr	r0, [sp, #12]
 80057b8:	f7fe feb6 	bl	8004528 <CheckForTimedButtonRelease>
 80057bc:	e7f1      	b.n	80057a2 <CheckAttachedButtons+0x20e>
					buttonPressedCallback(i);
 80057be:	9803      	ldr	r0, [sp, #12]
 80057c0:	f7fe fef0 	bl	80045a4 <buttonPressedCallback>
					button[i].state = NONE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	4642      	mov	r2, r8
 80057c8:	7013      	strb	r3, [r2, #0]
 80057ca:	3601      	adds	r6, #1
 80057cc:	3509      	adds	r5, #9
 80057ce:	3404      	adds	r4, #4
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80057d0:	2c1c      	cmp	r4, #28
 80057d2:	d100      	bne.n	80057d6 <CheckAttachedButtons+0x242>
 80057d4:	e0ed      	b.n	80059b2 <CheckAttachedButtons+0x41e>
 80057d6:	b2f3      	uxtb	r3, r6
 80057d8:	9303      	str	r3, [sp, #12]
 80057da:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 80057dc:	786b      	ldrb	r3, [r5, #1]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0f3      	beq.n	80057ca <CheckAttachedButtons+0x236>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 80057e2:	4b35      	ldr	r3, [pc, #212]	; (80058b8 <CheckAttachedButtons+0x324>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d100      	bne.n	80057ec <CheckAttachedButtons+0x258>
 80057ea:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 80057ec:	230e      	movs	r3, #14
 80057ee:	aa02      	add	r2, sp, #8
 80057f0:	4694      	mov	ip, r2
 80057f2:	4463      	add	r3, ip
 80057f4:	469a      	mov	sl, r3
 80057f6:	af05      	add	r7, sp, #20
 80057f8:	9700      	str	r7, [sp, #0]
 80057fa:	ab06      	add	r3, sp, #24
 80057fc:	4652      	mov	r2, sl
 80057fe:	a907      	add	r1, sp, #28
 8005800:	9803      	ldr	r0, [sp, #12]
 8005802:	f7ff fa89 	bl	8004d18 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8005806:	4653      	mov	r3, sl
 8005808:	8819      	ldrh	r1, [r3, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	9807      	ldr	r0, [sp, #28]
 800580e:	f00c f951 	bl	8011ab4 <HAL_GPIO_WritePin>
 8005812:	200a      	movs	r0, #10
 8005814:	f7ff feac 	bl	8005570 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8005818:	8839      	ldrh	r1, [r7, #0]
 800581a:	9806      	ldr	r0, [sp, #24]
 800581c:	f00c f944 	bl	8011aa8 <HAL_GPIO_ReadPin>
 8005820:	2800      	cmp	r0, #0
 8005822:	d100      	bne.n	8005826 <CheckAttachedButtons+0x292>
 8005824:	e6c5      	b.n	80055b2 <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 8005826:	230e      	movs	r3, #14
 8005828:	aa02      	add	r2, sp, #8
 800582a:	4694      	mov	ip, r2
 800582c:	4463      	add	r3, ip
 800582e:	8819      	ldrh	r1, [r3, #0]
 8005830:	2200      	movs	r2, #0
 8005832:	9807      	ldr	r0, [sp, #28]
 8005834:	f00c f93e 	bl	8011ab4 <HAL_GPIO_WritePin>
			switch (button[i].type)
 8005838:	4643      	mov	r3, r8
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d100      	bne.n	8005842 <CheckAttachedButtons+0x2ae>
 8005840:	e706      	b.n	8005650 <CheckAttachedButtons+0xbc>
 8005842:	b2da      	uxtb	r2, r3
 8005844:	2a02      	cmp	r2, #2
 8005846:	d800      	bhi.n	800584a <CheckAttachedButtons+0x2b6>
 8005848:	e6c6      	b.n	80055d8 <CheckAttachedButtons+0x44>
 800584a:	2b03      	cmp	r3, #3
 800584c:	d100      	bne.n	8005850 <CheckAttachedButtons+0x2bc>
 800584e:	e707      	b.n	8005660 <CheckAttachedButtons+0xcc>
 8005850:	2b04      	cmp	r3, #4
 8005852:	d000      	beq.n	8005856 <CheckAttachedButtons+0x2c2>
 8005854:	e6c8      	b.n	80055e8 <CheckAttachedButtons+0x54>
					if (connected == GPIO_PIN_SET)	
 8005856:	464b      	mov	r3, r9
 8005858:	2b01      	cmp	r3, #1
 800585a:	d100      	bne.n	800585e <CheckAttachedButtons+0x2ca>
 800585c:	e08d      	b.n	800597a <CheckAttachedButtons+0x3e6>
					else if (connected == GPIO_PIN_RESET) 
 800585e:	2b00      	cmp	r3, #0
 8005860:	d000      	beq.n	8005864 <CheckAttachedButtons+0x2d0>
 8005862:	e6c1      	b.n	80055e8 <CheckAttachedButtons+0x54>
 8005864:	2302      	movs	r3, #2
 8005866:	469b      	mov	fp, r3
 8005868:	e6c3      	b.n	80055f2 <CheckAttachedButtons+0x5e>
					buttonReleasedCallback(i);
 800586a:	9803      	ldr	r0, [sp, #12]
 800586c:	f7fe fe9b 	bl	80045a6 <buttonReleasedCallback>
					button[i].state = NONE;
 8005870:	2300      	movs	r3, #0
 8005872:	4642      	mov	r2, r8
 8005874:	7013      	strb	r3, [r2, #0]
      		break;
 8005876:	e7a8      	b.n	80057ca <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 8005878:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <CheckAttachedButtons+0x324>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1a4      	bne.n	80057ca <CheckAttachedButtons+0x236>
 8005880:	4643      	mov	r3, r8
 8005882:	7a1b      	ldrb	r3, [r3, #8]
 8005884:	075b      	lsls	r3, r3, #29
 8005886:	d5a0      	bpl.n	80057ca <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <CheckAttachedButtons+0x324>)
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 800588e:	2101      	movs	r1, #1
 8005890:	9803      	ldr	r0, [sp, #12]
 8005892:	f7fe fe8b 	bl	80045ac <buttonPressedForXCallback>
 8005896:	e798      	b.n	80057ca <CheckAttachedButtons+0x236>
 8005898:	20000d6c 	.word	0x20000d6c
 800589c:	20001350 	.word	0x20001350
 80058a0:	0000fffe 	.word	0x0000fffe
 80058a4:	20006a10 	.word	0x20006a10
 80058a8:	20001378 	.word	0x20001378
 80058ac:	20000f31 	.word	0x20000f31
 80058b0:	20000f68 	.word	0x20000f68
 80058b4:	0000fe0a 	.word	0x0000fe0a
 80058b8:	20000f6f 	.word	0x20000f6f
 80058bc:	08018d08 	.word	0x08018d08
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 80058c0:	4b3f      	ldr	r3, [pc, #252]	; (80059c0 <CheckAttachedButtons+0x42c>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d000      	beq.n	80058ca <CheckAttachedButtons+0x336>
 80058c8:	e77f      	b.n	80057ca <CheckAttachedButtons+0x236>
 80058ca:	4643      	mov	r3, r8
 80058cc:	7a1b      	ldrb	r3, [r3, #8]
 80058ce:	071b      	lsls	r3, r3, #28
 80058d0:	d400      	bmi.n	80058d4 <CheckAttachedButtons+0x340>
 80058d2:	e77a      	b.n	80057ca <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 80058d4:	4b3a      	ldr	r3, [pc, #232]	; (80059c0 <CheckAttachedButtons+0x42c>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 80058da:	2102      	movs	r1, #2
 80058dc:	9803      	ldr	r0, [sp, #12]
 80058de:	f7fe fe65 	bl	80045ac <buttonPressedForXCallback>
 80058e2:	e772      	b.n	80057ca <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 80058e4:	4b36      	ldr	r3, [pc, #216]	; (80059c0 <CheckAttachedButtons+0x42c>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d000      	beq.n	80058ee <CheckAttachedButtons+0x35a>
 80058ec:	e76d      	b.n	80057ca <CheckAttachedButtons+0x236>
 80058ee:	4643      	mov	r3, r8
 80058f0:	7a1b      	ldrb	r3, [r3, #8]
 80058f2:	06db      	lsls	r3, r3, #27
 80058f4:	d400      	bmi.n	80058f8 <CheckAttachedButtons+0x364>
 80058f6:	e768      	b.n	80057ca <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 80058f8:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <CheckAttachedButtons+0x42c>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 80058fe:	2103      	movs	r1, #3
 8005900:	9803      	ldr	r0, [sp, #12]
 8005902:	f7fe fe53 	bl	80045ac <buttonPressedForXCallback>
 8005906:	e760      	b.n	80057ca <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8005908:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <CheckAttachedButtons+0x42c>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d000      	beq.n	8005912 <CheckAttachedButtons+0x37e>
 8005910:	e75b      	b.n	80057ca <CheckAttachedButtons+0x236>
 8005912:	4643      	mov	r3, r8
 8005914:	7a1b      	ldrb	r3, [r3, #8]
 8005916:	069b      	lsls	r3, r3, #26
 8005918:	d400      	bmi.n	800591c <CheckAttachedButtons+0x388>
 800591a:	e756      	b.n	80057ca <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 800591c:	4b28      	ldr	r3, [pc, #160]	; (80059c0 <CheckAttachedButtons+0x42c>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 8005922:	2101      	movs	r1, #1
 8005924:	9803      	ldr	r0, [sp, #12]
 8005926:	f7fe fe42 	bl	80045ae <buttonReleasedForYCallback>
 800592a:	e74e      	b.n	80057ca <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 800592c:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <CheckAttachedButtons+0x42c>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d000      	beq.n	8005936 <CheckAttachedButtons+0x3a2>
 8005934:	e749      	b.n	80057ca <CheckAttachedButtons+0x236>
 8005936:	4643      	mov	r3, r8
 8005938:	7a1b      	ldrb	r3, [r3, #8]
 800593a:	065b      	lsls	r3, r3, #25
 800593c:	d400      	bmi.n	8005940 <CheckAttachedButtons+0x3ac>
 800593e:	e744      	b.n	80057ca <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8005940:	4b1f      	ldr	r3, [pc, #124]	; (80059c0 <CheckAttachedButtons+0x42c>)
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 8005946:	2102      	movs	r1, #2
 8005948:	9803      	ldr	r0, [sp, #12]
 800594a:	f7fe fe30 	bl	80045ae <buttonReleasedForYCallback>
 800594e:	e73c      	b.n	80057ca <CheckAttachedButtons+0x236>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 8005950:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <CheckAttachedButtons+0x42c>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d000      	beq.n	800595a <CheckAttachedButtons+0x3c6>
 8005958:	e737      	b.n	80057ca <CheckAttachedButtons+0x236>
 800595a:	4643      	mov	r3, r8
 800595c:	7a1b      	ldrb	r3, [r3, #8]
 800595e:	2b7f      	cmp	r3, #127	; 0x7f
 8005960:	d800      	bhi.n	8005964 <CheckAttachedButtons+0x3d0>
 8005962:	e732      	b.n	80057ca <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8005964:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <CheckAttachedButtons+0x42c>)
 8005966:	2201      	movs	r2, #1
 8005968:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 800596a:	2103      	movs	r1, #3
 800596c:	9803      	ldr	r0, [sp, #12]
 800596e:	f7fe fe1e 	bl	80045ae <buttonReleasedForYCallback>
 8005972:	e72a      	b.n	80057ca <CheckAttachedButtons+0x236>
						state = OPEN;			
 8005974:	2303      	movs	r3, #3
 8005976:	469b      	mov	fp, r3
 8005978:	e000      	b.n	800597c <CheckAttachedButtons+0x3e8>
						state = OFF;
 800597a:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 800597c:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <CheckAttachedButtons+0x430>)
 800597e:	58e3      	ldr	r3, [r4, r3]
 8005980:	4a11      	ldr	r2, [pc, #68]	; (80059c8 <CheckAttachedButtons+0x434>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d900      	bls.n	8005988 <CheckAttachedButtons+0x3f4>
 8005986:	e680      	b.n	800568a <CheckAttachedButtons+0xf6>
					++releaseCounter[i];																		// Advance the debounce counter
 8005988:	3301      	adds	r3, #1
 800598a:	4a0e      	ldr	r2, [pc, #56]	; (80059c4 <CheckAttachedButtons+0x430>)
 800598c:	50a3      	str	r3, [r4, r2]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <CheckAttachedButtons+0x438>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d100      	bne.n	8005998 <CheckAttachedButtons+0x404>
 8005996:	e67c      	b.n	8005692 <CheckAttachedButtons+0xfe>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 8005998:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <CheckAttachedButtons+0x43c>)
 800599a:	5cf2      	ldrb	r2, [r6, r3]
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <CheckAttachedButtons+0x440>)
 800599e:	795b      	ldrb	r3, [r3, #5]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d800      	bhi.n	80059a6 <CheckAttachedButtons+0x412>
 80059a4:	e633      	b.n	800560e <CheckAttachedButtons+0x7a>
					clicked = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	4a08      	ldr	r2, [pc, #32]	; (80059cc <CheckAttachedButtons+0x438>)
 80059aa:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 80059ac:	4a08      	ldr	r2, [pc, #32]	; (80059d0 <CheckAttachedButtons+0x43c>)
 80059ae:	54b3      	strb	r3, [r6, r2]
 80059b0:	e62d      	b.n	800560e <CheckAttachedButtons+0x7a>
}
 80059b2:	b009      	add	sp, #36	; 0x24
 80059b4:	bc3c      	pop	{r2, r3, r4, r5}
 80059b6:	4690      	mov	r8, r2
 80059b8:	4699      	mov	r9, r3
 80059ba:	46a2      	mov	sl, r4
 80059bc:	46ab      	mov	fp, r5
 80059be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c0:	20000f6f 	.word	0x20000f6f
 80059c4:	20001378 	.word	0x20001378
 80059c8:	0000fffe 	.word	0x0000fffe
 80059cc:	20000f31 	.word	0x20000f31
 80059d0:	20000f68 	.word	0x20000f68
 80059d4:	20006a10 	.word	0x20006a10

080059d8 <StartMilliDelay>:
{
 80059d8:	b510      	push	{r4, lr}
 80059da:	0004      	movs	r4, r0
	portENTER_CRITICAL();
 80059dc:	f00a fe2c 	bl	8010638 <vPortEnterCritical>
	if (Delay)
 80059e0:	2c00      	cmp	r4, #0
 80059e2:	d006      	beq.n	80059f2 <StartMilliDelay+0x1a>
		t0 = htim15.Instance->CNT;
 80059e4:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <StartMilliDelay+0x20>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	6a51      	ldr	r1, [r2, #36]	; 0x24
		while(htim15.Instance->CNT - t0 <= Delay) {};
 80059ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80059ec:	1a5b      	subs	r3, r3, r1
 80059ee:	42a3      	cmp	r3, r4
 80059f0:	d9fb      	bls.n	80059ea <StartMilliDelay+0x12>
	portEXIT_CRITICAL();
 80059f2:	f00a fe2d 	bl	8010650 <vPortExitCritical>
}
 80059f6:	bd10      	pop	{r4, pc}
 80059f8:	2000695c 	.word	0x2000695c

080059fc <IsFactoryReset>:
{
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 8005a00:	4b39      	ldr	r3, [pc, #228]	; (8005ae8 <IsFactoryReset+0xec>)
 8005a02:	6959      	ldr	r1, [r3, #20]
 8005a04:	2080      	movs	r0, #128	; 0x80
 8005a06:	0280      	lsls	r0, r0, #10
 8005a08:	4301      	orrs	r1, r0
 8005a0a:	6159      	str	r1, [r3, #20]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	4002      	ands	r2, r0
 8005a10:	9203      	str	r2, [sp, #12]
 8005a12:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 8005a14:	6959      	ldr	r1, [r3, #20]
 8005a16:	2080      	movs	r0, #128	; 0x80
 8005a18:	02c0      	lsls	r0, r0, #11
 8005a1a:	4301      	orrs	r1, r0
 8005a1c:	6159      	str	r1, [r3, #20]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	4002      	ands	r2, r0
 8005a22:	9204      	str	r2, [sp, #16]
 8005a24:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 8005a26:	6959      	ldr	r1, [r3, #20]
 8005a28:	2080      	movs	r0, #128	; 0x80
 8005a2a:	0300      	lsls	r0, r0, #12
 8005a2c:	4301      	orrs	r1, r0
 8005a2e:	6159      	str	r1, [r3, #20]
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	4002      	ands	r2, r0
 8005a34:	9205      	str	r2, [sp, #20]
 8005a36:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	2180      	movs	r1, #128	; 0x80
 8005a3c:	0349      	lsls	r1, r1, #13
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	615a      	str	r2, [r3, #20]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	400b      	ands	r3, r1
 8005a46:	9306      	str	r3, [sp, #24]
 8005a48:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8005a4a:	2522      	movs	r5, #34	; 0x22
 8005a4c:	446d      	add	r5, sp
 8005a4e:	ab08      	add	r3, sp, #32
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	ab0b      	add	r3, sp, #44	; 0x2c
 8005a54:	002a      	movs	r2, r5
 8005a56:	a90c      	add	r1, sp, #48	; 0x30
 8005a58:	2001      	movs	r0, #1
 8005a5a:	f7ff f95d 	bl	8004d18 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 8005a5e:	ac07      	add	r4, sp, #28
 8005a60:	9400      	str	r4, [sp, #0]
 8005a62:	ab09      	add	r3, sp, #36	; 0x24
 8005a64:	221e      	movs	r2, #30
 8005a66:	446a      	add	r2, sp
 8005a68:	a90a      	add	r1, sp, #40	; 0x28
 8005a6a:	2006      	movs	r0, #6
 8005a6c:	f7ff f954 	bl	8004d18 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a70:	2301      	movs	r3, #1
 8005a72:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a74:	2600      	movs	r6, #0
 8005a76:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8005a78:	882b      	ldrh	r3, [r5, #0]
 8005a7a:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 8005a7c:	a90d      	add	r1, sp, #52	; 0x34
 8005a7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005a80:	f00b ff32 	bl	80118e8 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a84:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8005a86:	2302      	movs	r3, #2
 8005a88:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 8005a8a:	8823      	ldrh	r3, [r4, #0]
 8005a8c:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 8005a8e:	a90d      	add	r1, sp, #52	; 0x34
 8005a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a92:	f00b ff29 	bl	80118e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8005a96:	8829      	ldrh	r1, [r5, #0]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005a9c:	f00c f80a 	bl	8011ab4 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8005aa0:	2005      	movs	r0, #5
 8005aa2:	f7ff ff99 	bl	80059d8 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 8005aa6:	8821      	ldrh	r1, [r4, #0]
 8005aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aaa:	f00b fffd 	bl	8011aa8 <HAL_GPIO_ReadPin>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d006      	beq.n	8005ac0 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 8005ab2:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <IsFactoryReset+0xf0>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	4252      	negs	r2, r2
 8005ab8:	601a      	str	r2, [r3, #0]
	return 0;
 8005aba:	2000      	movs	r0, #0
}
 8005abc:	b012      	add	sp, #72	; 0x48
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8005ac0:	2322      	movs	r3, #34	; 0x22
 8005ac2:	446b      	add	r3, sp
 8005ac4:	8819      	ldrh	r1, [r3, #0]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005aca:	f00b fff3 	bl	8011ab4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8005ace:	2005      	movs	r0, #5
 8005ad0:	f7ff ff82 	bl	80059d8 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 8005ad4:	ab07      	add	r3, sp, #28
 8005ad6:	8819      	ldrh	r1, [r3, #0]
 8005ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ada:	f00b ffe5 	bl	8011aa8 <HAL_GPIO_ReadPin>
 8005ade:	2801      	cmp	r0, #1
 8005ae0:	d1e7      	bne.n	8005ab2 <IsFactoryReset+0xb6>
			return 1;
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	e7ea      	b.n	8005abc <IsFactoryReset+0xc0>
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	20007ff0 	.word	0x20007ff0

08005af0 <IsLowerCLIbaud>:
{
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8005af4:	2512      	movs	r5, #18
 8005af6:	446d      	add	r5, sp
 8005af8:	ab04      	add	r3, sp, #16
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	ab07      	add	r3, sp, #28
 8005afe:	002a      	movs	r2, r5
 8005b00:	a908      	add	r1, sp, #32
 8005b02:	2001      	movs	r0, #1
 8005b04:	f7ff f908 	bl	8004d18 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 8005b08:	ac03      	add	r4, sp, #12
 8005b0a:	9400      	str	r4, [sp, #0]
 8005b0c:	ab05      	add	r3, sp, #20
 8005b0e:	220e      	movs	r2, #14
 8005b10:	446a      	add	r2, sp
 8005b12:	a906      	add	r1, sp, #24
 8005b14:	2002      	movs	r0, #2
 8005b16:	f7ff f8ff 	bl	8004d18 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1e:	2600      	movs	r6, #0
 8005b20:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8005b22:	882b      	ldrh	r3, [r5, #0]
 8005b24:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 8005b26:	a909      	add	r1, sp, #36	; 0x24
 8005b28:	9808      	ldr	r0, [sp, #32]
 8005b2a:	f00b fedd 	bl	80118e8 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b2e:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8005b30:	2302      	movs	r3, #2
 8005b32:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8005b34:	8823      	ldrh	r3, [r4, #0]
 8005b36:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 8005b38:	a909      	add	r1, sp, #36	; 0x24
 8005b3a:	9805      	ldr	r0, [sp, #20]
 8005b3c:	f00b fed4 	bl	80118e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8005b40:	8829      	ldrh	r1, [r5, #0]
 8005b42:	2200      	movs	r2, #0
 8005b44:	9808      	ldr	r0, [sp, #32]
 8005b46:	f00b ffb5 	bl	8011ab4 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 8005b4a:	2005      	movs	r0, #5
 8005b4c:	f7ff ff44 	bl	80059d8 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8005b50:	8821      	ldrh	r1, [r4, #0]
 8005b52:	9805      	ldr	r0, [sp, #20]
 8005b54:	f00b ffa8 	bl	8011aa8 <HAL_GPIO_ReadPin>
	return 0;
 8005b58:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d002      	beq.n	8005b64 <IsLowerCLIbaud+0x74>
}
 8005b5e:	0018      	movs	r0, r3
 8005b60:	b00e      	add	sp, #56	; 0x38
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8005b64:	3312      	adds	r3, #18
 8005b66:	446b      	add	r3, sp
 8005b68:	8819      	ldrh	r1, [r3, #0]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	9808      	ldr	r0, [sp, #32]
 8005b6e:	f00b ffa1 	bl	8011ab4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 8005b72:	2005      	movs	r0, #5
 8005b74:	f7ff ff30 	bl	80059d8 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 8005b78:	ab03      	add	r3, sp, #12
 8005b7a:	8819      	ldrh	r1, [r3, #0]
 8005b7c:	9805      	ldr	r0, [sp, #20]
 8005b7e:	f00b ff93 	bl	8011aa8 <HAL_GPIO_ReadPin>
 8005b82:	3801      	subs	r0, #1
 8005b84:	4243      	negs	r3, r0
 8005b86:	4143      	adcs	r3, r0
			return 1;
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e7e8      	b.n	8005b5e <IsLowerCLIbaud+0x6e>

08005b8c <SwapUartPins>:
{
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 8005b90:	d003      	beq.n	8005b9a <SwapUartPins+0xe>
		if (direction == REVERSED) {
 8005b92:	2901      	cmp	r1, #1
 8005b94:	d002      	beq.n	8005b9c <SwapUartPins+0x10>
		} else if (direction == NORMAL) {
 8005b96:	2900      	cmp	r1, #0
 8005b98:	d016      	beq.n	8005bc8 <SwapUartPins+0x3c>
}
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 8005b9c:	f006 f952 	bl	800be44 <GetPort>
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <SwapUartPins+0x68>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	4d14      	ldr	r5, [pc, #80]	; (8005bf8 <SwapUartPins+0x6c>)
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	3801      	subs	r0, #1
 8005bac:	2180      	movs	r1, #128	; 0x80
 8005bae:	0209      	lsls	r1, r1, #8
 8005bb0:	000a      	movs	r2, r1
 8005bb2:	4102      	asrs	r2, r0
 8005bb4:	5b58      	ldrh	r0, [r3, r5]
 8005bb6:	4302      	orrs	r2, r0
 8005bb8:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005bba:	2308      	movs	r3, #8
 8005bbc:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005bbe:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 8005bc0:	0020      	movs	r0, r4
 8005bc2:	f00d ff79 	bl	8013ab8 <HAL_UART_Init>
 8005bc6:	e7e8      	b.n	8005b9a <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 8005bc8:	f006 f93c 	bl	800be44 <GetPort>
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <SwapUartPins+0x68>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	4d09      	ldr	r5, [pc, #36]	; (8005bf8 <SwapUartPins+0x6c>)
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	3801      	subs	r0, #1
 8005bd8:	2180      	movs	r1, #128	; 0x80
 8005bda:	0209      	lsls	r1, r1, #8
 8005bdc:	4101      	asrs	r1, r0
 8005bde:	5b5a      	ldrh	r2, [r3, r5]
 8005be0:	438a      	bics	r2, r1
 8005be2:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005be4:	2308      	movs	r3, #8
 8005be6:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 8005bec:	0020      	movs	r0, r4
 8005bee:	f00d ff63 	bl	8013ab8 <HAL_UART_Init>
}
 8005bf2:	e7d2      	b.n	8005b9a <SwapUartPins+0xe>
 8005bf4:	20001298 	.word	0x20001298
 8005bf8:	20000ce8 	.word	0x20000ce8

08005bfc <FindRoute>:
{
 8005bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfe:	46de      	mov	lr, fp
 8005c00:	4657      	mov	r7, sl
 8005c02:	464e      	mov	r6, r9
 8005c04:	4645      	mov	r5, r8
 8005c06:	b5e0      	push	{r5, r6, r7, lr}
 8005c08:	b08f      	sub	sp, #60	; 0x3c
 8005c0a:	0005      	movs	r5, r0
 8005c0c:	468a      	mov	sl, r1
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 8005c0e:	2232      	movs	r2, #50	; 0x32
 8005c10:	2100      	movs	r1, #0
 8005c12:	a801      	add	r0, sp, #4
 8005c14:	f00e fb50 	bl	80142b8 <memset>
	memset(route,0,sizeof(route));
 8005c18:	2219      	movs	r2, #25
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	485a      	ldr	r0, [pc, #360]	; (8005d88 <FindRoute+0x18c>)
 8005c1e:	f00e fb4b 	bl	80142b8 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 8005c22:	0029      	movs	r1, r5
 8005c24:	1e68      	subs	r0, r5, #1
 8005c26:	2300      	movs	r3, #0
 8005c28:	4a58      	ldr	r2, [pc, #352]	; (8005d8c <FindRoute+0x190>)
 8005c2a:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8005c2c:	4a58      	ldr	r2, [pc, #352]	; (8005d90 <FindRoute+0x194>)
 8005c2e:	5413      	strb	r3, [r2, r0]
 8005c30:	2516      	movs	r5, #22
 8005c32:	4345      	muls	r5, r0
 8005c34:	3502      	adds	r5, #2
 8005c36:	4b57      	ldr	r3, [pc, #348]	; (8005d94 <FindRoute+0x198>)
 8005c38:	18ed      	adds	r5, r5, r3
 8005c3a:	002a      	movs	r2, r5
	for(int col=1 ; col<=6 ; col++)
 8005c3c:	2001      	movs	r0, #1
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8005c3e:	4653      	mov	r3, sl
 8005c40:	b29c      	uxth	r4, r3
 8005c42:	e003      	b.n	8005c4c <FindRoute+0x50>
	for(int col=1 ; col<=6 ; col++)
 8005c44:	3001      	adds	r0, #1
 8005c46:	3202      	adds	r2, #2
 8005c48:	2807      	cmp	r0, #7
 8005c4a:	d00f      	beq.n	8005c6c <FindRoute+0x70>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8005c4c:	8813      	ldrh	r3, [r2, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f8      	beq.n	8005c44 <FindRoute+0x48>
 8005c52:	08db      	lsrs	r3, r3, #3
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	d1f5      	bne.n	8005c44 <FindRoute+0x48>
			routeDist[desID-1] = 1;
 8005c58:	4b4c      	ldr	r3, [pc, #304]	; (8005d8c <FindRoute+0x190>)
 8005c5a:	4453      	add	r3, sl
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	2201      	movs	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 8005c62:	4b49      	ldr	r3, [pc, #292]	; (8005d88 <FindRoute+0x18c>)
 8005c64:	4652      	mov	r2, sl
 8005c66:	701a      	strb	r2, [r3, #0]
			return col;	
 8005c68:	b2c0      	uxtb	r0, r0
 8005c6a:	e085      	b.n	8005d78 <FindRoute+0x17c>
	for (int i=1 ; i<=N ; i++)   					
 8005c6c:	4b4a      	ldr	r3, [pc, #296]	; (8005d98 <FindRoute+0x19c>)
 8005c6e:	781e      	ldrb	r6, [r3, #0]
 8005c70:	2e00      	cmp	r6, #0
 8005c72:	dd11      	ble.n	8005c98 <FindRoute+0x9c>
 8005c74:	2301      	movs	r3, #1
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8005c76:	24ff      	movs	r4, #255	; 0xff
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8005c78:	4f45      	ldr	r7, [pc, #276]	; (8005d90 <FindRoute+0x194>)
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	46ac      	mov	ip, r5
 8005c7e:	e002      	b.n	8005c86 <FindRoute+0x8a>
	for (int i=1 ; i<=N ; i++)   					
 8005c80:	3301      	adds	r3, #1
 8005c82:	42b3      	cmp	r3, r6
 8005c84:	dc07      	bgt.n	8005c96 <FindRoute+0x9a>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 8005c86:	4299      	cmp	r1, r3
 8005c88:	d0fa      	beq.n	8005c80 <FindRoute+0x84>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8005c8a:	1e5a      	subs	r2, r3, #1
 8005c8c:	4d3f      	ldr	r5, [pc, #252]	; (8005d8c <FindRoute+0x190>)
 8005c8e:	54ac      	strb	r4, [r5, r2]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8005c90:	18ba      	adds	r2, r7, r2
 8005c92:	7010      	strb	r0, [r2, #0]
 8005c94:	e7f4      	b.n	8005c80 <FindRoute+0x84>
 8005c96:	4665      	mov	r5, ip
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8005c98:	2400      	movs	r4, #0
 8005c9a:	4b3e      	ldr	r3, [pc, #248]	; (8005d94 <FindRoute+0x198>)
 8005c9c:	4698      	mov	r8, r3
 8005c9e:	230e      	movs	r3, #14
 8005ca0:	4443      	add	r3, r8
 8005ca2:	4656      	mov	r6, sl
 8005ca4:	469b      	mov	fp, r3
 8005ca6:	46a9      	mov	r9, r5
 8005ca8:	e01d      	b.n	8005ce6 <FindRoute+0xea>
 8005caa:	464d      	mov	r5, r9
 8005cac:	46b2      	mov	sl, r6
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8005cae:	0034      	movs	r4, r6
 8005cb0:	e034      	b.n	8005d1c <FindRoute+0x120>
 8005cb2:	3102      	adds	r1, #2
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8005cb4:	4281      	cmp	r1, r0
 8005cb6:	d015      	beq.n	8005ce4 <FindRoute+0xe8>
			if (array[u-1][n])										// There's a neighbor v at this port n
 8005cb8:	880b      	ldrh	r3, [r1, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f9      	beq.n	8005cb2 <FindRoute+0xb6>
				v = (array[u-1][n]>>3);
 8005cbe:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	5cd7      	ldrb	r7, [r2, r3]
 8005cc6:	2f00      	cmp	r7, #0
 8005cc8:	d1f3      	bne.n	8005cb2 <FindRoute+0xb6>
					alt = routeDist[u-1] + 1;					// Add one hop
 8005cca:	4f30      	ldr	r7, [pc, #192]	; (8005d8c <FindRoute+0x190>)
 8005ccc:	5d7f      	ldrb	r7, [r7, r5]
 8005cce:	3701      	adds	r7, #1
 8005cd0:	b2ff      	uxtb	r7, r7
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 8005cd2:	4e2e      	ldr	r6, [pc, #184]	; (8005d8c <FindRoute+0x190>)
 8005cd4:	5cf6      	ldrb	r6, [r6, r3]
 8005cd6:	42be      	cmp	r6, r7
 8005cd8:	d9eb      	bls.n	8005cb2 <FindRoute+0xb6>
						routeDist[v-1] = alt; 
 8005cda:	4e2c      	ldr	r6, [pc, #176]	; (8005d8c <FindRoute+0x190>)
 8005cdc:	54f7      	strb	r7, [r6, r3]
						routePrev[v-1] = u; 
 8005cde:	4e2c      	ldr	r6, [pc, #176]	; (8005d90 <FindRoute+0x194>)
 8005ce0:	54f4      	strb	r4, [r6, r3]
 8005ce2:	e7e6      	b.n	8005cb2 <FindRoute+0xb6>
 8005ce4:	4656      	mov	r6, sl
	while (!QnotEmpty(Q))
 8005ce6:	a801      	add	r0, sp, #4
 8005ce8:	f7fd fe34 	bl	8003954 <QnotEmpty>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d113      	bne.n	8005d18 <FindRoute+0x11c>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8005cf0:	a901      	add	r1, sp, #4
 8005cf2:	4826      	ldr	r0, [pc, #152]	; (8005d8c <FindRoute+0x190>)
 8005cf4:	f7fd fe10 	bl	8003918 <minArr>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 8005cfc:	42b4      	cmp	r4, r6
 8005cfe:	d0d4      	beq.n	8005caa <FindRoute+0xae>
			Q[u-1] = 1;													// Remove u from Q 
 8005d00:	1e65      	subs	r5, r4, #1
 8005d02:	ab01      	add	r3, sp, #4
 8005d04:	2201      	movs	r2, #1
 8005d06:	555a      	strb	r2, [r3, r5]
 8005d08:	2016      	movs	r0, #22
 8005d0a:	4368      	muls	r0, r5
 8005d0c:	1c81      	adds	r1, r0, #2
 8005d0e:	4441      	add	r1, r8
 8005d10:	4458      	add	r0, fp
				if (!Q[v-1])												// v is still in Q
 8005d12:	001a      	movs	r2, r3
 8005d14:	46b2      	mov	sl, r6
 8005d16:	e7cf      	b.n	8005cb8 <FindRoute+0xbc>
 8005d18:	464d      	mov	r5, r9
 8005d1a:	46b2      	mov	sl, r6
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005d1c:	4b1c      	ldr	r3, [pc, #112]	; (8005d90 <FindRoute+0x194>)
 8005d1e:	191b      	adds	r3, r3, r4
 8005d20:	3b01      	subs	r3, #1
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	2300      	movs	r3, #0
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	d00e      	beq.n	8005d48 <FindRoute+0x14c>
		route[j++] = u;          				// Push the vertex onto the stack
 8005d2a:	4917      	ldr	r1, [pc, #92]	; (8005d88 <FindRoute+0x18c>)
 8005d2c:	468c      	mov	ip, r1
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005d2e:	4e18      	ldr	r6, [pc, #96]	; (8005d90 <FindRoute+0x194>)
 8005d30:	e000      	b.n	8005d34 <FindRoute+0x138>
 8005d32:	000a      	movs	r2, r1
		route[j++] = u;          				// Push the vertex onto the stack
 8005d34:	1c58      	adds	r0, r3, #1
 8005d36:	4661      	mov	r1, ip
 8005d38:	54cc      	strb	r4, [r1, r3]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005d3a:	18b3      	adds	r3, r6, r2
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	7819      	ldrb	r1, [r3, #0]
 8005d40:	0014      	movs	r4, r2
		route[j++] = u;          				// Push the vertex onto the stack
 8005d42:	b2c3      	uxtb	r3, r0
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d1f4      	bne.n	8005d32 <FindRoute+0x136>
	for(int col=1 ; col<=6 ; col++)	
 8005d48:	2001      	movs	r0, #1
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8005d4a:	490f      	ldr	r1, [pc, #60]	; (8005d88 <FindRoute+0x18c>)
 8005d4c:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <FindRoute+0x190>)
 8005d4e:	4453      	add	r3, sl
 8005d50:	001f      	movs	r7, r3
 8005d52:	3f01      	subs	r7, #1
 8005d54:	e003      	b.n	8005d5e <FindRoute+0x162>
	for(int col=1 ; col<=6 ; col++)	
 8005d56:	3001      	adds	r0, #1
 8005d58:	3502      	adds	r5, #2
 8005d5a:	2807      	cmp	r0, #7
 8005d5c:	d00b      	beq.n	8005d76 <FindRoute+0x17a>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8005d5e:	882b      	ldrh	r3, [r5, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f8      	beq.n	8005d56 <FindRoute+0x15a>
 8005d64:	783a      	ldrb	r2, [r7, #0]
 8005d66:	188a      	adds	r2, r1, r2
 8005d68:	3a01      	subs	r2, #1
 8005d6a:	7812      	ldrb	r2, [r2, #0]
 8005d6c:	08db      	lsrs	r3, r3, #3
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d1f1      	bne.n	8005d56 <FindRoute+0x15a>
			return col;	
 8005d72:	b2c0      	uxtb	r0, r0
 8005d74:	e000      	b.n	8005d78 <FindRoute+0x17c>
	return 0;			
 8005d76:	2000      	movs	r0, #0
}
 8005d78:	b00f      	add	sp, #60	; 0x3c
 8005d7a:	bc3c      	pop	{r2, r3, r4, r5}
 8005d7c:	4690      	mov	r8, r2
 8005d7e:	4699      	mov	r9, r3
 8005d80:	46a2      	mov	sl, r4
 8005d82:	46ab      	mov	fp, r5
 8005d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	200013a4 	.word	0x200013a4
 8005d8c:	200013c0 	.word	0x200013c0
 8005d90:	200013dc 	.word	0x200013dc
 8005d94:	20000ac0 	.word	0x20000ac0
 8005d98:	2000001c 	.word	0x2000001c

08005d9c <ForwardReceivedMessage>:
{
 8005d9c:	b530      	push	{r4, r5, lr}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	0005      	movs	r5, r0
	AddBcastPayload = false; 	
 8005da2:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <ForwardReceivedMessage+0x34>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 8005da8:	1e42      	subs	r2, r0, #1
 8005daa:	00d3      	lsls	r3, r2, #3
 8005dac:	1a9b      	subs	r3, r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <ForwardReceivedMessage+0x38>)
 8005db2:	5c9c      	ldrb	r4, [r3, r2]
	port = FindRoute(myID, dst); 
 8005db4:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <ForwardReceivedMessage+0x3c>)
 8005db6:	7818      	ldrb	r0, [r3, #0]
 8005db8:	0021      	movs	r1, r4
 8005dba:	f7ff ff1f 	bl	8005bfc <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 8005dbe:	9500      	str	r5, [sp, #0]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	0022      	movs	r2, r4
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	f7ff f9a9 	bl	800511c <SendMessageFromPort>
}
 8005dca:	2000      	movs	r0, #0
 8005dcc:	b003      	add	sp, #12
 8005dce:	bd30      	pop	{r4, r5, pc}
 8005dd0:	20000abc 	.word	0x20000abc
 8005dd4:	20000de0 	.word	0x20000de0
 8005dd8:	20001298 	.word	0x20001298

08005ddc <SendMessageToModule>:
{
 8005ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dde:	b083      	sub	sp, #12
 8005de0:	0004      	movs	r4, r0
 8005de2:	000e      	movs	r6, r1
 8005de4:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 8005de6:	28ff      	cmp	r0, #255	; 0xff
 8005de8:	d012      	beq.n	8005e10 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 8005dea:	4f0d      	ldr	r7, [pc, #52]	; (8005e20 <SendMessageToModule+0x44>)
 8005dec:	7838      	ldrb	r0, [r7, #0]
 8005dee:	0021      	movs	r1, r4
 8005df0:	f7ff ff04 	bl	8005bfc <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 8005df4:	7839      	ldrb	r1, [r7, #0]
 8005df6:	9500      	str	r5, [sp, #0]
 8005df8:	0033      	movs	r3, r6
 8005dfa:	0022      	movs	r2, r4
 8005dfc:	f7ff f98e 	bl	800511c <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8005e00:	002a      	movs	r2, r5
 8005e02:	2100      	movs	r1, #0
 8005e04:	4807      	ldr	r0, [pc, #28]	; (8005e24 <SendMessageToModule+0x48>)
 8005e06:	f00e fa57 	bl	80142b8 <memset>
}
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	b003      	add	sp, #12
 8005e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8005e10:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <SendMessageToModule+0x44>)
 8005e12:	7818      	ldrb	r0, [r3, #0]
 8005e14:	0013      	movs	r3, r2
 8005e16:	000a      	movs	r2, r1
 8005e18:	21ff      	movs	r1, #255	; 0xff
 8005e1a:	f7ff fb57 	bl	80054cc <BroadcastMessage>
 8005e1e:	e7f4      	b.n	8005e0a <SendMessageToModule+0x2e>
 8005e20:	20001298 	.word	0x20001298
 8005e24:	20001164 	.word	0x20001164

08005e28 <defaultCommand>:
{
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	0004      	movs	r4, r0
 8005e2e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005e34:	2c00      	cmp	r4, #0
 8005e36:	d101      	bne.n	8005e3c <defaultCommand+0x14>
 8005e38:	b672      	cpsid	i
 8005e3a:	e7fe      	b.n	8005e3a <defaultCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005e3c:	aa01      	add	r2, sp, #4
 8005e3e:	2101      	movs	r1, #1
 8005e40:	f008 fe5a 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 8005e44:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 8005e46:	9e01      	ldr	r6, [sp, #4]
 8005e48:	0032      	movs	r2, r6
 8005e4a:	491e      	ldr	r1, [pc, #120]	; (8005ec4 <defaultCommand+0x9c>)
 8005e4c:	f00e fca4 	bl	8014798 <strncmp>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d01e      	beq.n	8005e92 <defaultCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 8005e54:	0032      	movs	r2, r6
 8005e56:	491c      	ldr	r1, [pc, #112]	; (8005ec8 <defaultCommand+0xa0>)
 8005e58:	0028      	movs	r0, r5
 8005e5a:	f00e fc9d 	bl	8014798 <strncmp>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d12a      	bne.n	8005eb8 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8005e62:	2200      	movs	r2, #0
 8005e64:	2116      	movs	r1, #22
 8005e66:	20ff      	movs	r0, #255	; 0xff
 8005e68:	f7ff ffb8 	bl	8005ddc <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 8005e6c:	4b17      	ldr	r3, [pc, #92]	; (8005ecc <defaultCommand+0xa4>)
 8005e6e:	2202      	movs	r2, #2
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	2064      	movs	r0, #100	; 0x64
 8005e74:	f008 fd27 	bl	800e8c6 <osDelay>
		ClearEEportsDir();
 8005e78:	f7fe f8b4 	bl	8003fe4 <ClearEEportsDir>
		ClearROtopology();
 8005e7c:	f7fd ffa6 	bl	8003dcc <ClearROtopology>
		osDelay(100);
 8005e80:	2064      	movs	r0, #100	; 0x64
 8005e82:	f008 fd20 	bl	800e8c6 <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 8005e86:	2240      	movs	r2, #64	; 0x40
 8005e88:	4911      	ldr	r1, [pc, #68]	; (8005ed0 <defaultCommand+0xa8>)
 8005e8a:	0020      	movs	r0, r4
 8005e8c:	f00e fa0b 	bl	80142a6 <memcpy>
 8005e90:	e00f      	b.n	8005eb2 <defaultCommand+0x8a>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 8005e92:	4910      	ldr	r1, [pc, #64]	; (8005ed4 <defaultCommand+0xac>)
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <defaultCommand+0xb0>)
 8005e96:	000a      	movs	r2, r1
 8005e98:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005e9a:	c223      	stmia	r2!, {r0, r1, r5}
 8005e9c:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005e9e:	c223      	stmia	r2!, {r0, r1, r5}
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8005ea4:	f7fe fab8 	bl	8004418 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 8005ea8:	2227      	movs	r2, #39	; 0x27
 8005eaa:	490c      	ldr	r1, [pc, #48]	; (8005edc <defaultCommand+0xb4>)
 8005eac:	0020      	movs	r0, r4
 8005eae:	f00e f9fa 	bl	80142a6 <memcpy>
}
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	b002      	add	sp, #8
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 8005eb8:	220f      	movs	r2, #15
 8005eba:	4909      	ldr	r1, [pc, #36]	; (8005ee0 <defaultCommand+0xb8>)
 8005ebc:	0020      	movs	r0, r4
 8005ebe:	f00e f9f2 	bl	80142a6 <memcpy>
 8005ec2:	e7f6      	b.n	8005eb2 <defaultCommand+0x8a>
 8005ec4:	08019380 	.word	0x08019380
 8005ec8:	080193b0 	.word	0x080193b0
 8005ecc:	2000100a 	.word	0x2000100a
 8005ed0:	080193c8 	.word	0x080193c8
 8005ed4:	20006a10 	.word	0x20006a10
 8005ed8:	20000000 	.word	0x20000000
 8005edc:	08019388 	.word	0x08019388
 8005ee0:	080193b8 	.word	0x080193b8

08005ee4 <DisplayTopology>:
{
 8005ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee6:	46d6      	mov	lr, sl
 8005ee8:	464f      	mov	r7, r9
 8005eea:	4646      	mov	r6, r8
 8005eec:	b5c0      	push	{r6, r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	0005      	movs	r5, r0
 8005ef2:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8005ef4:	4c56      	ldr	r4, [pc, #344]	; (8006050 <DisplayTopology+0x16c>)
 8005ef6:	4b57      	ldr	r3, [pc, #348]	; (8006054 <DisplayTopology+0x170>)
 8005ef8:	0022      	movs	r2, r4
 8005efa:	cb43      	ldmia	r3!, {r0, r1, r6}
 8005efc:	c243      	stmia	r2!, {r0, r1, r6}
 8005efe:	6819      	ldr	r1, [r3, #0]
 8005f00:	6011      	str	r1, [r2, #0]
 8005f02:	889b      	ldrh	r3, [r3, #4]
 8005f04:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005f06:	0020      	movs	r0, r4
 8005f08:	f7fa f906 	bl	8000118 <strlen>
 8005f0c:	b282      	uxth	r2, r0
 8005f0e:	2301      	movs	r3, #1
 8005f10:	425b      	negs	r3, r3
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	3333      	adds	r3, #51	; 0x33
 8005f16:	0021      	movs	r1, r4
 8005f18:	0028      	movs	r0, r5
 8005f1a:	f008 f807 	bl	800df2c <writePxMutex>
 8005f1e:	2401      	movs	r4, #1
		sprintf(pcUserMessage, "P%d\t", i);
 8005f20:	4f4d      	ldr	r7, [pc, #308]	; (8006058 <DisplayTopology+0x174>)
 8005f22:	4d4b      	ldr	r5, [pc, #300]	; (8006050 <DisplayTopology+0x16c>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005f24:	2601      	movs	r6, #1
 8005f26:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 8005f28:	0022      	movs	r2, r4
 8005f2a:	0039      	movs	r1, r7
 8005f2c:	0028      	movs	r0, r5
 8005f2e:	f00e fbef 	bl	8014710 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005f32:	0028      	movs	r0, r5
 8005f34:	f7fa f8f0 	bl	8000118 <strlen>
 8005f38:	b282      	uxth	r2, r0
 8005f3a:	9600      	str	r6, [sp, #0]
 8005f3c:	2332      	movs	r3, #50	; 0x32
 8005f3e:	0029      	movs	r1, r5
 8005f40:	9803      	ldr	r0, [sp, #12]
 8005f42:	f007 fff3 	bl	800df2c <writePxMutex>
 8005f46:	3401      	adds	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 8005f48:	2c07      	cmp	r4, #7
 8005f4a:	d1ed      	bne.n	8005f28 <DisplayTopology+0x44>
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	425b      	negs	r3, r3
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	3333      	adds	r3, #51	; 0x33
 8005f54:	2203      	movs	r2, #3
 8005f56:	4941      	ldr	r1, [pc, #260]	; (800605c <DisplayTopology+0x178>)
 8005f58:	9803      	ldr	r0, [sp, #12]
 8005f5a:	f007 ffe7 	bl	800df2c <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8005f5e:	4b40      	ldr	r3, [pc, #256]	; (8006060 <DisplayTopology+0x17c>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d065      	beq.n	8006032 <DisplayTopology+0x14e>
 8005f66:	2600      	movs	r6, #0
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005f68:	2701      	movs	r7, #1
 8005f6a:	427f      	negs	r7, r7
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8005f6c:	4b3d      	ldr	r3, [pc, #244]	; (8006064 <DisplayTopology+0x180>)
 8005f6e:	4699      	mov	r9, r3
 8005f70:	230e      	movs	r3, #14
 8005f72:	444b      	add	r3, r9
 8005f74:	469a      	mov	sl, r3
 8005f76:	e02a      	b.n	8005fce <DisplayTopology+0xea>
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 8005f78:	2307      	movs	r3, #7
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	08d2      	lsrs	r2, r2, #3
 8005f7e:	493a      	ldr	r1, [pc, #232]	; (8006068 <DisplayTopology+0x184>)
 8005f80:	4833      	ldr	r0, [pc, #204]	; (8006050 <DisplayTopology+0x16c>)
 8005f82:	f00e fbc5 	bl	8014710 <sprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 8005f86:	4d32      	ldr	r5, [pc, #200]	; (8006050 <DisplayTopology+0x16c>)
 8005f88:	0028      	movs	r0, r5
 8005f8a:	f7fa f8c5 	bl	8000118 <strlen>
 8005f8e:	b282      	uxth	r2, r0
 8005f90:	9700      	str	r7, [sp, #0]
 8005f92:	2332      	movs	r3, #50	; 0x32
 8005f94:	0029      	movs	r1, r5
 8005f96:	9803      	ldr	r0, [sp, #12]
 8005f98:	f007 ffc8 	bl	800df2c <writePxMutex>
 8005f9c:	3402      	adds	r4, #2
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8005f9e:	42b4      	cmp	r4, r6
 8005fa0:	d007      	beq.n	8005fb2 <DisplayTopology+0xce>
			if (!array[row][col])
 8005fa2:	8822      	ldrh	r2, [r4, #0]
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d1e7      	bne.n	8005f78 <DisplayTopology+0x94>
				sprintf(pcUserMessage, "%d\t",0);
 8005fa8:	4930      	ldr	r1, [pc, #192]	; (800606c <DisplayTopology+0x188>)
 8005faa:	4829      	ldr	r0, [pc, #164]	; (8006050 <DisplayTopology+0x16c>)
 8005fac:	f00e fbb0 	bl	8014710 <sprintf>
 8005fb0:	e7e9      	b.n	8005f86 <DisplayTopology+0xa2>
 8005fb2:	4646      	mov	r6, r8
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 8005fb4:	9700      	str	r7, [sp, #0]
 8005fb6:	2332      	movs	r3, #50	; 0x32
 8005fb8:	2202      	movs	r2, #2
 8005fba:	492d      	ldr	r1, [pc, #180]	; (8006070 <DisplayTopology+0x18c>)
 8005fbc:	9803      	ldr	r0, [sp, #12]
 8005fbe:	f007 ffb5 	bl	800df2c <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	b2f6      	uxtb	r6, r6
 8005fc6:	4b26      	ldr	r3, [pc, #152]	; (8006060 <DisplayTopology+0x17c>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	42b3      	cmp	r3, r6
 8005fcc:	d931      	bls.n	8006032 <DisplayTopology+0x14e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8005fce:	1c72      	adds	r2, r6, #1
 8005fd0:	4c1f      	ldr	r4, [pc, #124]	; (8006050 <DisplayTopology+0x16c>)
 8005fd2:	4928      	ldr	r1, [pc, #160]	; (8006074 <DisplayTopology+0x190>)
 8005fd4:	0020      	movs	r0, r4
 8005fd6:	f00e fb9b 	bl	8014710 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8005fda:	0020      	movs	r0, r4
 8005fdc:	f7fa f89c 	bl	8000118 <strlen>
 8005fe0:	b282      	uxth	r2, r0
 8005fe2:	9700      	str	r7, [sp, #0]
 8005fe4:	2332      	movs	r3, #50	; 0x32
 8005fe6:	0021      	movs	r1, r4
 8005fe8:	9803      	ldr	r0, [sp, #12]
 8005fea:	f007 ff9f 	bl	800df2c <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8005fee:	2516      	movs	r5, #22
 8005ff0:	4375      	muls	r5, r6
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	5aeb      	ldrh	r3, [r5, r3]
 8005ff6:	0059      	lsls	r1, r3, #1
 8005ff8:	18c9      	adds	r1, r1, r3
 8005ffa:	0049      	lsls	r1, r1, #1
 8005ffc:	4b1e      	ldr	r3, [pc, #120]	; (8006078 <DisplayTopology+0x194>)
 8005ffe:	18c9      	adds	r1, r1, r3
 8006000:	2205      	movs	r2, #5
 8006002:	0020      	movs	r0, r4
 8006004:	f00e fbd9 	bl	80147ba <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8006008:	9700      	str	r7, [sp, #0]
 800600a:	2332      	movs	r3, #50	; 0x32
 800600c:	2205      	movs	r2, #5
 800600e:	0021      	movs	r1, r4
 8006010:	9c03      	ldr	r4, [sp, #12]
 8006012:	0020      	movs	r0, r4
 8006014:	f007 ff8a 	bl	800df2c <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 8006018:	9700      	str	r7, [sp, #0]
 800601a:	2332      	movs	r3, #50	; 0x32
 800601c:	2201      	movs	r2, #1
 800601e:	4917      	ldr	r1, [pc, #92]	; (800607c <DisplayTopology+0x198>)
 8006020:	0020      	movs	r0, r4
 8006022:	f007 ff83 	bl	800df2c <writePxMutex>
 8006026:	1cac      	adds	r4, r5, #2
 8006028:	444c      	add	r4, r9
 800602a:	4455      	add	r5, sl
				sprintf(pcUserMessage, "%d\t",0);
 800602c:	46b0      	mov	r8, r6
 800602e:	002e      	movs	r6, r5
 8006030:	e7b7      	b.n	8005fa2 <DisplayTopology+0xbe>
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8006032:	2301      	movs	r3, #1
 8006034:	425b      	negs	r3, r3
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	3333      	adds	r3, #51	; 0x33
 800603a:	2201      	movs	r2, #1
 800603c:	4910      	ldr	r1, [pc, #64]	; (8006080 <DisplayTopology+0x19c>)
 800603e:	9803      	ldr	r0, [sp, #12]
 8006040:	f007 ff74 	bl	800df2c <writePxMutex>
}
 8006044:	b004      	add	sp, #16
 8006046:	bc1c      	pop	{r2, r3, r4}
 8006048:	4690      	mov	r8, r2
 800604a:	4699      	mov	r9, r3
 800604c:	46a2      	mov	sl, r4
 800604e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006050:	200012f8 	.word	0x200012f8
 8006054:	080190bc 	.word	0x080190bc
 8006058:	080190d0 	.word	0x080190d0
 800605c:	0801b49c 	.word	0x0801b49c
 8006060:	2000001c 	.word	0x2000001c
 8006064:	20000ac0 	.word	0x20000ac0
 8006068:	080190e8 	.word	0x080190e8
 800606c:	080190e4 	.word	0x080190e4
 8006070:	08018f64 	.word	0x08018f64
 8006074:	080190d8 	.word	0x080190d8
 8006078:	0801979c 	.word	0x0801979c
 800607c:	080190cc 	.word	0x080190cc
 8006080:	0801a7d8 	.word	0x0801a7d8

08006084 <DisplayPortsDir>:
{
 8006084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006086:	46c6      	mov	lr, r8
 8006088:	b500      	push	{lr}
 800608a:	b084      	sub	sp, #16
 800608c:	0005      	movs	r5, r0
 800608e:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 8006090:	4c30      	ldr	r4, [pc, #192]	; (8006154 <DisplayPortsDir+0xd0>)
 8006092:	4b31      	ldr	r3, [pc, #196]	; (8006158 <DisplayPortsDir+0xd4>)
 8006094:	0022      	movs	r2, r4
 8006096:	cb43      	ldmia	r3!, {r0, r1, r6}
 8006098:	c243      	stmia	r2!, {r0, r1, r6}
 800609a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800609c:	c243      	stmia	r2!, {r0, r1, r6}
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80060a2:	0020      	movs	r0, r4
 80060a4:	f7fa f838 	bl	8000118 <strlen>
 80060a8:	b282      	uxth	r2, r0
 80060aa:	2301      	movs	r3, #1
 80060ac:	425b      	negs	r3, r3
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	3333      	adds	r3, #51	; 0x33
 80060b2:	0021      	movs	r1, r4
 80060b4:	0028      	movs	r0, r5
 80060b6:	f007 ff39 	bl	800df2c <writePxMutex>
	for (uint8_t i=1 ; i<=N ; i++) 
 80060ba:	4b28      	ldr	r3, [pc, #160]	; (800615c <DisplayPortsDir+0xd8>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2201      	movs	r2, #1
 80060c0:	4690      	mov	r8, r2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d02c      	beq.n	8006120 <DisplayPortsDir+0x9c>
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80060c6:	4e26      	ldr	r6, [pc, #152]	; (8006160 <DisplayPortsDir+0xdc>)
 80060c8:	e025      	b.n	8006116 <DisplayPortsDir+0x92>
 80060ca:	0023      	movs	r3, r4
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 80060cc:	2c0a      	cmp	r4, #10
 80060ce:	d01a      	beq.n	8006106 <DisplayPortsDir+0x82>
 80060d0:	1c5c      	adds	r4, r3, #1
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80060d2:	5ba9      	ldrh	r1, [r5, r6]
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	0212      	lsls	r2, r2, #8
 80060d8:	411a      	asrs	r2, r3
 80060da:	420a      	tst	r2, r1
 80060dc:	d0f5      	beq.n	80060ca <DisplayPortsDir+0x46>
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 80060de:	4f1d      	ldr	r7, [pc, #116]	; (8006154 <DisplayPortsDir+0xd0>)
 80060e0:	0023      	movs	r3, r4
 80060e2:	4642      	mov	r2, r8
 80060e4:	491f      	ldr	r1, [pc, #124]	; (8006164 <DisplayPortsDir+0xe0>)
 80060e6:	0038      	movs	r0, r7
 80060e8:	f00e fb12 	bl	8014710 <sprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80060ec:	0038      	movs	r0, r7
 80060ee:	f7fa f813 	bl	8000118 <strlen>
 80060f2:	b282      	uxth	r2, r0
 80060f4:	2301      	movs	r3, #1
 80060f6:	425b      	negs	r3, r3
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	3333      	adds	r3, #51	; 0x33
 80060fc:	0039      	movs	r1, r7
 80060fe:	9803      	ldr	r0, [sp, #12]
 8006100:	f007 ff14 	bl	800df2c <writePxMutex>
 8006104:	e7e1      	b.n	80060ca <DisplayPortsDir+0x46>
	for (uint8_t i=1 ; i<=N ; i++) 
 8006106:	4643      	mov	r3, r8
 8006108:	3301      	adds	r3, #1
 800610a:	b2db      	uxtb	r3, r3
 800610c:	4698      	mov	r8, r3
 800610e:	4b13      	ldr	r3, [pc, #76]	; (800615c <DisplayPortsDir+0xd8>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	4543      	cmp	r3, r8
 8006114:	d304      	bcc.n	8006120 <DisplayPortsDir+0x9c>
{
 8006116:	2300      	movs	r3, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8006118:	4642      	mov	r2, r8
 800611a:	1e55      	subs	r5, r2, #1
 800611c:	006d      	lsls	r5, r5, #1
 800611e:	e7d7      	b.n	80060d0 <DisplayPortsDir+0x4c>
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 8006120:	4c0c      	ldr	r4, [pc, #48]	; (8006154 <DisplayPortsDir+0xd0>)
 8006122:	4b11      	ldr	r3, [pc, #68]	; (8006168 <DisplayPortsDir+0xe4>)
 8006124:	0022      	movs	r2, r4
 8006126:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006128:	c223      	stmia	r2!, {r0, r1, r5}
 800612a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800612c:	c223      	stmia	r2!, {r0, r1, r5}
 800612e:	cb03      	ldmia	r3!, {r0, r1}
 8006130:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8006132:	0020      	movs	r0, r4
 8006134:	f7f9 fff0 	bl	8000118 <strlen>
 8006138:	b282      	uxth	r2, r0
 800613a:	2301      	movs	r3, #1
 800613c:	425b      	negs	r3, r3
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	3333      	adds	r3, #51	; 0x33
 8006142:	0021      	movs	r1, r4
 8006144:	9803      	ldr	r0, [sp, #12]
 8006146:	f007 fef1 	bl	800df2c <writePxMutex>
}
 800614a:	b004      	add	sp, #16
 800614c:	bc04      	pop	{r2}
 800614e:	4690      	mov	r8, r2
 8006150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	200012f8 	.word	0x200012f8
 8006158:	0801906c 	.word	0x0801906c
 800615c:	2000001c 	.word	0x2000001c
 8006160:	20000ce8 	.word	0x20000ce8
 8006164:	08019088 	.word	0x08019088
 8006168:	0801909c 	.word	0x0801909c

0800616c <DisplayModuleStatus>:
{
 800616c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800616e:	46d6      	mov	lr, sl
 8006170:	b500      	push	{lr}
 8006172:	b084      	sub	sp, #16
 8006174:	9003      	str	r0, [sp, #12]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8006176:	f008 fcbb 	bl	800eaf0 <FreeRTOS_CLIGetOutputBuffer>
 800617a:	0004      	movs	r4, r0
	strcpy( (char *) pcOutputString, "");
 800617c:	2300      	movs	r3, #0
 800617e:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8006180:	4b8d      	ldr	r3, [pc, #564]	; (80063b8 <DisplayModuleStatus+0x24c>)
 8006182:	781a      	ldrb	r2, [r3, #0]
 8006184:	4d8d      	ldr	r5, [pc, #564]	; (80063bc <DisplayModuleStatus+0x250>)
 8006186:	498e      	ldr	r1, [pc, #568]	; (80063c0 <DisplayModuleStatus+0x254>)
 8006188:	0028      	movs	r0, r5
 800618a:	f00e fac1 	bl	8014710 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 800618e:	0029      	movs	r1, r5
 8006190:	0020      	movs	r0, r4
 8006192:	f00e fadd 	bl	8014750 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 8006196:	4b8b      	ldr	r3, [pc, #556]	; (80063c4 <DisplayModuleStatus+0x258>)
 8006198:	781a      	ldrb	r2, [r3, #0]
 800619a:	498b      	ldr	r1, [pc, #556]	; (80063c8 <DisplayModuleStatus+0x25c>)
 800619c:	0028      	movs	r0, r5
 800619e:	f00e fab7 	bl	8014710 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80061a2:	0029      	movs	r1, r5
 80061a4:	0020      	movs	r0, r4
 80061a6:	f00e fad3 	bl	8014750 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 80061aa:	2303      	movs	r3, #3
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	2200      	movs	r2, #0
 80061b2:	4986      	ldr	r1, [pc, #536]	; (80063cc <DisplayModuleStatus+0x260>)
 80061b4:	0028      	movs	r0, r5
 80061b6:	f00e faab 	bl	8014710 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80061ba:	0029      	movs	r1, r5
 80061bc:	0020      	movs	r0, r4
 80061be:	f00e fac7 	bl	8014750 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 80061c2:	4a83      	ldr	r2, [pc, #524]	; (80063d0 <DisplayModuleStatus+0x264>)
 80061c4:	4983      	ldr	r1, [pc, #524]	; (80063d4 <DisplayModuleStatus+0x268>)
 80061c6:	0028      	movs	r0, r5
 80061c8:	f00e faa2 	bl	8014710 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80061cc:	0029      	movs	r1, r5
 80061ce:	0020      	movs	r0, r4
 80061d0:	f00e fabe 	bl	8014750 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 80061d4:	4a80      	ldr	r2, [pc, #512]	; (80063d8 <DisplayModuleStatus+0x26c>)
 80061d6:	4981      	ldr	r1, [pc, #516]	; (80063dc <DisplayModuleStatus+0x270>)
 80061d8:	0028      	movs	r0, r5
 80061da:	f00e fa99 	bl	8014710 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 80061de:	0029      	movs	r1, r5
 80061e0:	0020      	movs	r0, r4
 80061e2:	f00e fab5 	bl	8014750 <strcat>
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 80061e6:	4b7e      	ldr	r3, [pc, #504]	; (80063e0 <DisplayModuleStatus+0x274>)
 80061e8:	002a      	movs	r2, r5
 80061ea:	cb43      	ldmia	r3!, {r0, r1, r6}
 80061ec:	c243      	stmia	r2!, {r0, r1, r6}
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	6011      	str	r1, [r2, #0]
 80061f2:	8899      	ldrh	r1, [r3, #4]
 80061f4:	8091      	strh	r1, [r2, #4]
 80061f6:	799b      	ldrb	r3, [r3, #6]
 80061f8:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 80061fa:	0029      	movs	r1, r5
 80061fc:	0020      	movs	r0, r4
 80061fe:	f00e faa7 	bl	8014750 <strcat>
 8006202:	2701      	movs	r7, #1
		sprintf(pcUserMessage, "P%d: ", i);
 8006204:	4d6d      	ldr	r5, [pc, #436]	; (80063bc <DisplayModuleStatus+0x250>)
		switch (portStatus[i])
 8006206:	4b77      	ldr	r3, [pc, #476]	; (80063e4 <DisplayModuleStatus+0x278>)
 8006208:	469a      	mov	sl, r3
 800620a:	e00e      	b.n	800622a <DisplayModuleStatus+0xbe>
						sprintf(pcUserMessage, "Free\n\r"); break;
 800620c:	4b6b      	ldr	r3, [pc, #428]	; (80063bc <DisplayModuleStatus+0x250>)
 800620e:	4a76      	ldr	r2, [pc, #472]	; (80063e8 <DisplayModuleStatus+0x27c>)
 8006210:	6811      	ldr	r1, [r2, #0]
 8006212:	6019      	str	r1, [r3, #0]
 8006214:	8891      	ldrh	r1, [r2, #4]
 8006216:	8099      	strh	r1, [r3, #4]
 8006218:	7992      	ldrb	r2, [r2, #6]
 800621a:	719a      	strb	r2, [r3, #6]
		strcat( (char *) pcOutputString, pcUserMessage);
 800621c:	4967      	ldr	r1, [pc, #412]	; (80063bc <DisplayModuleStatus+0x250>)
 800621e:	0020      	movs	r0, r4
 8006220:	f00e fa96 	bl	8014750 <strcat>
 8006224:	3701      	adds	r7, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 8006226:	2f07      	cmp	r7, #7
 8006228:	d039      	beq.n	800629e <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage, "P%d: ", i);
 800622a:	003a      	movs	r2, r7
 800622c:	496f      	ldr	r1, [pc, #444]	; (80063ec <DisplayModuleStatus+0x280>)
 800622e:	0028      	movs	r0, r5
 8006230:	f00e fa6e 	bl	8014710 <sprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 8006234:	0029      	movs	r1, r5
 8006236:	0020      	movs	r0, r4
 8006238:	f00e fa8a 	bl	8014750 <strcat>
		switch (portStatus[i])
 800623c:	4653      	mov	r3, sl
 800623e:	5cfb      	ldrb	r3, [r7, r3]
 8006240:	2b04      	cmp	r3, #4
 8006242:	d8eb      	bhi.n	800621c <DisplayModuleStatus+0xb0>
 8006244:	4653      	mov	r3, sl
 8006246:	5cfb      	ldrb	r3, [r7, r3]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4a69      	ldr	r2, [pc, #420]	; (80063f0 <DisplayModuleStatus+0x284>)
 800624c:	58d3      	ldr	r3, [r2, r3]
 800624e:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8006250:	495a      	ldr	r1, [pc, #360]	; (80063bc <DisplayModuleStatus+0x250>)
 8006252:	4b68      	ldr	r3, [pc, #416]	; (80063f4 <DisplayModuleStatus+0x288>)
 8006254:	000a      	movs	r2, r1
 8006256:	cb43      	ldmia	r3!, {r0, r1, r6}
 8006258:	c243      	stmia	r2!, {r0, r1, r6}
 800625a:	cb03      	ldmia	r3!, {r0, r1}
 800625c:	c203      	stmia	r2!, {r0, r1}
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	7013      	strb	r3, [r2, #0]
 8006262:	e7db      	b.n	800621c <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 8006264:	4a55      	ldr	r2, [pc, #340]	; (80063bc <DisplayModuleStatus+0x250>)
 8006266:	4b64      	ldr	r3, [pc, #400]	; (80063f8 <DisplayModuleStatus+0x28c>)
 8006268:	cb43      	ldmia	r3!, {r0, r1, r6}
 800626a:	c243      	stmia	r2!, {r0, r1, r6}
 800626c:	e7d6      	b.n	800621c <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 800626e:	4953      	ldr	r1, [pc, #332]	; (80063bc <DisplayModuleStatus+0x250>)
 8006270:	4b62      	ldr	r3, [pc, #392]	; (80063fc <DisplayModuleStatus+0x290>)
 8006272:	000a      	movs	r2, r1
 8006274:	cb43      	ldmia	r3!, {r0, r1, r6}
 8006276:	c243      	stmia	r2!, {r0, r1, r6}
 8006278:	cb43      	ldmia	r3!, {r0, r1, r6}
 800627a:	c243      	stmia	r2!, {r0, r1, r6}
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	8013      	strh	r3, [r2, #0]
 8006280:	e7cc      	b.n	800621c <DisplayModuleStatus+0xb0>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 8006282:	494e      	ldr	r1, [pc, #312]	; (80063bc <DisplayModuleStatus+0x250>)
 8006284:	4b5e      	ldr	r3, [pc, #376]	; (8006400 <DisplayModuleStatus+0x294>)
 8006286:	000a      	movs	r2, r1
 8006288:	cb43      	ldmia	r3!, {r0, r1, r6}
 800628a:	c243      	stmia	r2!, {r0, r1, r6}
 800628c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800628e:	c243      	stmia	r2!, {r0, r1, r6}
 8006290:	6819      	ldr	r1, [r3, #0]
 8006292:	6011      	str	r1, [r2, #0]
 8006294:	8899      	ldrh	r1, [r3, #4]
 8006296:	8091      	strh	r1, [r2, #4]
 8006298:	799b      	ldrb	r3, [r3, #6]
 800629a:	7193      	strb	r3, [r2, #6]
 800629c:	e7be      	b.n	800621c <DisplayModuleStatus+0xb0>
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 800629e:	4947      	ldr	r1, [pc, #284]	; (80063bc <DisplayModuleStatus+0x250>)
 80062a0:	4b58      	ldr	r3, [pc, #352]	; (8006404 <DisplayModuleStatus+0x298>)
 80062a2:	000a      	movs	r2, r1
 80062a4:	cb61      	ldmia	r3!, {r0, r5, r6}
 80062a6:	c261      	stmia	r2!, {r0, r5, r6}
 80062a8:	cb61      	ldmia	r3!, {r0, r5, r6}
 80062aa:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 80062ac:	0020      	movs	r0, r4
 80062ae:	f00e fa4f 	bl	8014750 <strcat>
 80062b2:	4f55      	ldr	r7, [pc, #340]	; (8006408 <DisplayModuleStatus+0x29c>)
 80062b4:	2601      	movs	r6, #1
 80062b6:	e00d      	b.n	80062d4 <DisplayModuleStatus+0x168>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 80062b8:	4d40      	ldr	r5, [pc, #256]	; (80063bc <DisplayModuleStatus+0x250>)
 80062ba:	0032      	movs	r2, r6
 80062bc:	4953      	ldr	r1, [pc, #332]	; (800640c <DisplayModuleStatus+0x2a0>)
 80062be:	0028      	movs	r0, r5
 80062c0:	f00e fa26 	bl	8014710 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 80062c4:	0029      	movs	r1, r5
 80062c6:	0020      	movs	r0, r4
 80062c8:	f00e fa42 	bl	8014750 <strcat>
 80062cc:	3601      	adds	r6, #1
 80062ce:	3738      	adds	r7, #56	; 0x38
	for (char i=1 ; i<=6 ; i++) {
 80062d0:	2e07      	cmp	r6, #7
 80062d2:	d018      	beq.n	8006306 <DisplayModuleStatus+0x19a>
		if (streamDMA[i-1].Instance == 0) {
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0ee      	beq.n	80062b8 <DisplayModuleStatus+0x14c>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 80062da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062dc:	f005 fdb2 	bl	800be44 <GetPort>
 80062e0:	0005      	movs	r5, r0
 80062e2:	00b3      	lsls	r3, r6, #2
 80062e4:	3b04      	subs	r3, #4
 80062e6:	4a4a      	ldr	r2, [pc, #296]	; (8006410 <DisplayModuleStatus+0x2a4>)
 80062e8:	58d0      	ldr	r0, [r2, r3]
 80062ea:	f005 fdab 	bl	800be44 <GetPort>
 80062ee:	9000      	str	r0, [sp, #0]
 80062f0:	002b      	movs	r3, r5
 80062f2:	0032      	movs	r2, r6
 80062f4:	4947      	ldr	r1, [pc, #284]	; (8006414 <DisplayModuleStatus+0x2a8>)
 80062f6:	4831      	ldr	r0, [pc, #196]	; (80063bc <DisplayModuleStatus+0x250>)
 80062f8:	f00e fa0a 	bl	8014710 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 80062fc:	492f      	ldr	r1, [pc, #188]	; (80063bc <DisplayModuleStatus+0x250>)
 80062fe:	0020      	movs	r0, r4
 8006300:	f00e fa26 	bl	8014750 <strcat>
 8006304:	e7e2      	b.n	80062cc <DisplayModuleStatus+0x160>
	strcat( (char *) pcOutputString, "\n\r");
 8006306:	0020      	movs	r0, r4
 8006308:	f7f9 ff06 	bl	8000118 <strlen>
 800630c:	1820      	adds	r0, r4, r0
 800630e:	2203      	movs	r2, #3
 8006310:	4941      	ldr	r1, [pc, #260]	; (8006418 <DisplayModuleStatus+0x2ac>)
 8006312:	f00d ffc8 	bl	80142a6 <memcpy>
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 8006316:	0020      	movs	r0, r4
 8006318:	f7f9 fefe 	bl	8000118 <strlen>
 800631c:	1820      	adds	r0, r4, r0
 800631e:	221d      	movs	r2, #29
 8006320:	493e      	ldr	r1, [pc, #248]	; (800641c <DisplayModuleStatus+0x2b0>)
 8006322:	f00d ffc0 	bl	80142a6 <memcpy>
	temp = strlen( (char *) pcOutputString);
 8006326:	0020      	movs	r0, r4
 8006328:	f7f9 fef6 	bl	8000118 <strlen>
 800632c:	4682      	mov	sl, r0
 800632e:	2200      	movs	r2, #0
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8006330:	4f3b      	ldr	r7, [pc, #236]	; (8006420 <DisplayModuleStatus+0x2b4>)
 8006332:	4e21      	ldr	r6, [pc, #132]	; (80063b8 <DisplayModuleStatus+0x24c>)
 8006334:	e002      	b.n	800633c <DisplayModuleStatus+0x1d0>
 8006336:	002a      	movs	r2, r5
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8006338:	2d06      	cmp	r5, #6
 800633a:	d013      	beq.n	8006364 <DisplayModuleStatus+0x1f8>
 800633c:	1c55      	adds	r5, r2, #1
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800633e:	7833      	ldrb	r3, [r6, #0]
 8006340:	3b01      	subs	r3, #1
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	5bd9      	ldrh	r1, [r3, r7]
 8006346:	2380      	movs	r3, #128	; 0x80
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	4113      	asrs	r3, r2
 800634c:	420b      	tst	r3, r1
 800634e:	d0f2      	beq.n	8006336 <DisplayModuleStatus+0x1ca>
			sprintf(pcUserMessage, "P%d ", p);
 8006350:	002a      	movs	r2, r5
 8006352:	4934      	ldr	r1, [pc, #208]	; (8006424 <DisplayModuleStatus+0x2b8>)
 8006354:	4819      	ldr	r0, [pc, #100]	; (80063bc <DisplayModuleStatus+0x250>)
 8006356:	f00e f9db 	bl	8014710 <sprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 800635a:	4918      	ldr	r1, [pc, #96]	; (80063bc <DisplayModuleStatus+0x250>)
 800635c:	0020      	movs	r0, r4
 800635e:	f00e f9f7 	bl	8014750 <strcat>
 8006362:	e7e8      	b.n	8006336 <DisplayModuleStatus+0x1ca>
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 8006364:	0020      	movs	r0, r4
 8006366:	f7f9 fed7 	bl	8000118 <strlen>
 800636a:	4653      	mov	r3, sl
 800636c:	041b      	lsls	r3, r3, #16
 800636e:	0c1b      	lsrs	r3, r3, #16
 8006370:	4298      	cmp	r0, r3
 8006372:	d00e      	beq.n	8006392 <DisplayModuleStatus+0x226>
	strcat( (char *) pcOutputString, "\n\r");
 8006374:	0020      	movs	r0, r4
 8006376:	f7f9 fecf 	bl	8000118 <strlen>
 800637a:	1820      	adds	r0, r4, r0
 800637c:	2203      	movs	r2, #3
 800637e:	4926      	ldr	r1, [pc, #152]	; (8006418 <DisplayModuleStatus+0x2ac>)
 8006380:	f00d ff91 	bl	80142a6 <memcpy>
	if (port)
 8006384:	9b03      	ldr	r3, [sp, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <DisplayModuleStatus+0x232>
}
 800638a:	b004      	add	sp, #16
 800638c:	bc04      	pop	{r2}
 800638e:	4692      	mov	sl, r2
 8006390:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 8006392:	1820      	adds	r0, r4, r0
 8006394:	2205      	movs	r2, #5
 8006396:	4924      	ldr	r1, [pc, #144]	; (8006428 <DisplayModuleStatus+0x2bc>)
 8006398:	f00d ff85 	bl	80142a6 <memcpy>
 800639c:	e7ea      	b.n	8006374 <DisplayModuleStatus+0x208>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 800639e:	0020      	movs	r0, r4
 80063a0:	f7f9 feba 	bl	8000118 <strlen>
 80063a4:	b282      	uxth	r2, r0
 80063a6:	2301      	movs	r3, #1
 80063a8:	425b      	negs	r3, r3
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	3333      	adds	r3, #51	; 0x33
 80063ae:	0021      	movs	r1, r4
 80063b0:	9803      	ldr	r0, [sp, #12]
 80063b2:	f007 fdbb 	bl	800df2c <writePxMutex>
}
 80063b6:	e7e8      	b.n	800638a <DisplayModuleStatus+0x21e>
 80063b8:	20001298 	.word	0x20001298
 80063bc:	200012f8 	.word	0x200012f8
 80063c0:	08018ec8 	.word	0x08018ec8
 80063c4:	20000abf 	.word	0x20000abf
 80063c8:	08018ee4 	.word	0x08018ee4
 80063cc:	08018f00 	.word	0x08018f00
 80063d0:	0801910c 	.word	0x0801910c
 80063d4:	08018f20 	.word	0x08018f20
 80063d8:	08019118 	.word	0x08019118
 80063dc:	08018f38 	.word	0x08018f38
 80063e0:	08018f54 	.word	0x08018f54
 80063e4:	20001348 	.word	0x20001348
 80063e8:	08018f70 	.word	0x08018f70
 80063ec:	08018f68 	.word	0x08018f68
 80063f0:	08018d30 	.word	0x08018d30
 80063f4:	08018f78 	.word	0x08018f78
 80063f8:	08018f90 	.word	0x08018f90
 80063fc:	08018f9c 	.word	0x08018f9c
 8006400:	08018fb8 	.word	0x08018fb8
 8006404:	08018fd8 	.word	0x08018fd8
 8006408:	200019a8 	.word	0x200019a8
 800640c:	08018ff0 	.word	0x08018ff0
 8006410:	200016f4 	.word	0x200016f4
 8006414:	0801900c 	.word	0x0801900c
 8006418:	08018f64 	.word	0x08018f64
 800641c:	0801903c 	.word	0x0801903c
 8006420:	20000ce8 	.word	0x20000ce8
 8006424:	0801905c 	.word	0x0801905c
 8006428:	08019064 	.word	0x08019064

0800642c <statusCommand>:
{
 800642c:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 800642e:	2800      	cmp	r0, #0
 8006430:	d101      	bne.n	8006436 <statusCommand+0xa>
 8006432:	b672      	cpsid	i
 8006434:	e7fe      	b.n	8006434 <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006436:	2000      	movs	r0, #0
 8006438:	f7ff fe98 	bl	800616c <DisplayModuleStatus>
}
 800643c:	2000      	movs	r0, #0
 800643e:	bd10      	pop	{r4, pc}

08006440 <GetID>:
{
 8006440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006442:	46c6      	mov	lr, r8
 8006444:	b500      	push	{lr}
 8006446:	0005      	movs	r5, r0
	if(!strcmp(string, "me"))							/* Check keywords */
 8006448:	4929      	ldr	r1, [pc, #164]	; (80064f0 <GetID+0xb0>)
 800644a:	f7f9 fe5b 	bl	8000104 <strcmp>
 800644e:	2800      	cmp	r0, #0
 8006450:	d010      	beq.n	8006474 <GetID+0x34>
	else if(!strcmp(string, "all"))							
 8006452:	4928      	ldr	r1, [pc, #160]	; (80064f4 <GetID+0xb4>)
 8006454:	0028      	movs	r0, r5
 8006456:	f7f9 fe55 	bl	8000104 <strcmp>
 800645a:	2800      	cmp	r0, #0
 800645c:	d045      	beq.n	80064ea <GetID+0xaa>
	else if (string[0] == '#') 						/* Check IDs */
 800645e:	782b      	ldrb	r3, [r5, #0]
 8006460:	4698      	mov	r8, r3
 8006462:	2b23      	cmp	r3, #35	; 0x23
 8006464:	d00b      	beq.n	800647e <GetID+0x3e>
		for (i=0 ; i<N ; i++) {
 8006466:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <GetID+0xb8>)
 8006468:	781f      	ldrb	r7, [r3, #0]
 800646a:	2f00      	cmp	r7, #0
 800646c:	d02a      	beq.n	80064c4 <GetID+0x84>
 800646e:	4e23      	ldr	r6, [pc, #140]	; (80064fc <GetID+0xbc>)
 8006470:	2400      	movs	r4, #0
 8006472:	e01c      	b.n	80064ae <GetID+0x6e>
		return myID;
 8006474:	4b22      	ldr	r3, [pc, #136]	; (8006500 <GetID+0xc0>)
 8006476:	7818      	ldrb	r0, [r3, #0]
}
 8006478:	bc04      	pop	{r2}
 800647a:	4690      	mov	r8, r2
 800647c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 800647e:	1c68      	adds	r0, r5, #1
 8006480:	f00d fc87 	bl	8013d92 <atol>
 8006484:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <GetID+0x52>
 800648a:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <GetID+0xb8>)
 800648c:	7812      	ldrb	r2, [r2, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d206      	bcs.n	80064a0 <GetID+0x60>
		else if (id == myID)
 8006492:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <GetID+0xc0>)
 8006494:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 8006496:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 8006498:	429a      	cmp	r2, r3
 800649a:	d1ed      	bne.n	8006478 <GetID+0x38>
			return myID;
 800649c:	b210      	sxth	r0, r2
 800649e:	e7eb      	b.n	8006478 <GetID+0x38>
			return id;
 80064a0:	b218      	sxth	r0, r3
 80064a2:	e7e9      	b.n	8006478 <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 80064a4:	3401      	adds	r4, #1
 80064a6:	b2e4      	uxtb	r4, r4
 80064a8:	360a      	adds	r6, #10
 80064aa:	42bc      	cmp	r4, r7
 80064ac:	d00a      	beq.n	80064c4 <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 80064ae:	0031      	movs	r1, r6
 80064b0:	0028      	movs	r0, r5
 80064b2:	f7f9 fe27 	bl	8000104 <strcmp>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d1f4      	bne.n	80064a4 <GetID+0x64>
 80064ba:	4643      	mov	r3, r8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0f1      	beq.n	80064a4 <GetID+0x64>
 80064c0:	b220      	sxth	r0, r4
 80064c2:	e7d9      	b.n	8006478 <GetID+0x38>
 80064c4:	4f0f      	ldr	r7, [pc, #60]	; (8006504 <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 80064c6:	2600      	movs	r6, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 80064c8:	0039      	movs	r1, r7
 80064ca:	0028      	movs	r0, r5
 80064cc:	f7f9 fe1a 	bl	8000104 <strcmp>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d005      	beq.n	80064e0 <GetID+0xa0>
 80064d4:	3601      	adds	r6, #1
 80064d6:	370a      	adds	r7, #10
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 80064d8:	2e0a      	cmp	r6, #10
 80064da:	d1f5      	bne.n	80064c8 <GetID+0x88>
		return BOS_ERR_WrongName;			
 80064dc:	2064      	movs	r0, #100	; 0x64
 80064de:	e7cb      	b.n	8006478 <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 80064e0:	0234      	lsls	r4, r6, #8
 80064e2:	20fe      	movs	r0, #254	; 0xfe
 80064e4:	4320      	orrs	r0, r4
 80064e6:	b200      	sxth	r0, r0
 80064e8:	e7c6      	b.n	8006478 <GetID+0x38>
		return BOS_BROADCAST;				
 80064ea:	20ff      	movs	r0, #255	; 0xff
 80064ec:	e7c4      	b.n	8006478 <GetID+0x38>
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	080190f0 	.word	0x080190f0
 80064f4:	080194ec 	.word	0x080194ec
 80064f8:	2000001c 	.word	0x2000001c
 80064fc:	20001194 	.word	0x20001194
 8006500:	20001298 	.word	0x20001298
 8006504:	20000f74 	.word	0x20000f74

08006508 <NameModule>:
{
 8006508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800650a:	b083      	sub	sp, #12
 800650c:	9001      	str	r0, [sp, #4]
 800650e:	000d      	movs	r5, r1
 8006510:	4c2a      	ldr	r4, [pc, #168]	; (80065bc <NameModule+0xb4>)
 8006512:	0027      	movs	r7, r4
 8006514:	3710      	adds	r7, #16
		if (!strcmp(alias, BOSkeywords[i]))	
 8006516:	0021      	movs	r1, r4
 8006518:	0028      	movs	r0, r5
 800651a:	f7f9 fdf3 	bl	8000104 <strcmp>
 800651e:	2800      	cmp	r0, #0
 8006520:	d043      	beq.n	80065aa <NameModule+0xa2>
 8006522:	3404      	adds	r4, #4
	for(i=0 ; i<NumOfKeywords ; i++)
 8006524:	42bc      	cmp	r4, r7
 8006526:	d1f6      	bne.n	8006516 <NameModule+0xe>
	for(i=1 ; i<N ; i++)
 8006528:	4b25      	ldr	r3, [pc, #148]	; (80065c0 <NameModule+0xb8>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d90f      	bls.n	8006550 <NameModule+0x48>
 8006530:	4c24      	ldr	r4, [pc, #144]	; (80065c4 <NameModule+0xbc>)
 8006532:	009f      	lsls	r7, r3, #2
 8006534:	18ff      	adds	r7, r7, r3
 8006536:	007f      	lsls	r7, r7, #1
 8006538:	0023      	movs	r3, r4
 800653a:	3b0a      	subs	r3, #10
 800653c:	18ff      	adds	r7, r7, r3
		if (!strcmp(alias, moduleAlias[i]))	
 800653e:	0021      	movs	r1, r4
 8006540:	0028      	movs	r0, r5
 8006542:	f7f9 fddf 	bl	8000104 <strcmp>
 8006546:	2800      	cmp	r0, #0
 8006548:	d031      	beq.n	80065ae <NameModule+0xa6>
 800654a:	340a      	adds	r4, #10
	for(i=1 ; i<N ; i++)
 800654c:	42bc      	cmp	r4, r7
 800654e:	d1f6      	bne.n	800653e <NameModule+0x36>
 8006550:	4c1d      	ldr	r4, [pc, #116]	; (80065c8 <NameModule+0xc0>)
 8006552:	0027      	movs	r7, r4
 8006554:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 8006556:	0021      	movs	r1, r4
 8006558:	0028      	movs	r0, r5
 800655a:	f7f9 fdd3 	bl	8000104 <strcmp>
 800655e:	2800      	cmp	r0, #0
 8006560:	d028      	beq.n	80065b4 <NameModule+0xac>
 8006562:	340a      	adds	r4, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8006564:	42bc      	cmp	r4, r7
 8006566:	d1f6      	bne.n	8006556 <NameModule+0x4e>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8006568:	4c18      	ldr	r4, [pc, #96]	; (80065cc <NameModule+0xc4>)
 800656a:	4b19      	ldr	r3, [pc, #100]	; (80065d0 <NameModule+0xc8>)
 800656c:	601c      	str	r4, [r3, #0]
 800656e:	001e      	movs	r6, r3
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 8006574:	0038      	movs	r0, r7
 8006576:	f7f9 fdcf 	bl	8000118 <strlen>
 800657a:	0002      	movs	r2, r0
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 800657c:	0039      	movs	r1, r7
 800657e:	0028      	movs	r0, r5
 8006580:	f00e f90a 	bl	8014798 <strncmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	d017      	beq.n	80065b8 <NameModule+0xb0>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8006588:	6864      	ldr	r4, [r4, #4]
 800658a:	6034      	str	r4, [r6, #0]
 800658c:	2c00      	cmp	r4, #0
 800658e:	d1ef      	bne.n	8006570 <NameModule+0x68>
	strcpy(moduleAlias[module], alias);
 8006590:	9b01      	ldr	r3, [sp, #4]
 8006592:	0098      	lsls	r0, r3, #2
 8006594:	469c      	mov	ip, r3
 8006596:	4460      	add	r0, ip
 8006598:	0040      	lsls	r0, r0, #1
 800659a:	4e0e      	ldr	r6, [pc, #56]	; (80065d4 <NameModule+0xcc>)
 800659c:	1980      	adds	r0, r0, r6
 800659e:	0029      	movs	r1, r5
 80065a0:	f00e f8f2 	bl	8014788 <strcpy>
	result = SaveEEalias();
 80065a4:	f7fd fd72 	bl	800408c <SaveEEalias>
	return result;
 80065a8:	e002      	b.n	80065b0 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 80065aa:	2006      	movs	r0, #6
 80065ac:	e000      	b.n	80065b0 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 80065ae:	2007      	movs	r0, #7
}
 80065b0:	b003      	add	sp, #12
 80065b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80065b4:	2007      	movs	r0, #7
 80065b6:	e7fb      	b.n	80065b0 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 80065b8:	2008      	movs	r0, #8
 80065ba:	e7f9      	b.n	80065b0 <NameModule+0xa8>
 80065bc:	08018eb8 	.word	0x08018eb8
 80065c0:	2000001c 	.word	0x2000001c
 80065c4:	2000119e 	.word	0x2000119e
 80065c8:	20000f74 	.word	0x20000f74
 80065cc:	200000e4 	.word	0x200000e4
 80065d0:	20001370 	.word	0x20001370
 80065d4:	20001194 	.word	0x20001194

080065d8 <nameCommand>:
{
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	0004      	movs	r4, r0
 80065dc:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 80065de:	2c00      	cmp	r4, #0
 80065e0:	d101      	bne.n	80065e6 <nameCommand+0xe>
 80065e2:	b672      	cpsid	i
 80065e4:	e7fe      	b.n	80065e4 <nameCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80065e6:	4d1c      	ldr	r5, [pc, #112]	; (8006658 <nameCommand+0x80>)
 80065e8:	002a      	movs	r2, r5
 80065ea:	2101      	movs	r1, #1
 80065ec:	f008 fa84 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80065f0:	0001      	movs	r1, r0
 80065f2:	4b1a      	ldr	r3, [pc, #104]	; (800665c <nameCommand+0x84>)
 80065f4:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 80065f6:	682b      	ldr	r3, [r5, #0]
 80065f8:	2b09      	cmp	r3, #9
 80065fa:	dd01      	ble.n	8006600 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 80065fc:	2300      	movs	r3, #0
 80065fe:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 8006600:	4b17      	ldr	r3, [pc, #92]	; (8006660 <nameCommand+0x88>)
 8006602:	7818      	ldrb	r0, [r3, #0]
 8006604:	f7ff ff80 	bl	8006508 <NameModule>
	if (result == BOS_OK)
 8006608:	2800      	cmp	r0, #0
 800660a:	d007      	beq.n	800661c <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 800660c:	2806      	cmp	r0, #6
 800660e:	d00e      	beq.n	800662e <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8006610:	2807      	cmp	r0, #7
 8006612:	d013      	beq.n	800663c <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 8006614:	2808      	cmp	r0, #8
 8006616:	d018      	beq.n	800664a <nameCommand+0x72>
}
 8006618:	2000      	movs	r0, #0
 800661a:	bd70      	pop	{r4, r5, r6, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 800661c:	4b10      	ldr	r3, [pc, #64]	; (8006660 <nameCommand+0x88>)
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	4b0e      	ldr	r3, [pc, #56]	; (800665c <nameCommand+0x84>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	490f      	ldr	r1, [pc, #60]	; (8006664 <nameCommand+0x8c>)
 8006626:	0020      	movs	r0, r4
 8006628:	f00e f872 	bl	8014710 <sprintf>
 800662c:	e7f4      	b.n	8006618 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 800662e:	4b0b      	ldr	r3, [pc, #44]	; (800665c <nameCommand+0x84>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	490d      	ldr	r1, [pc, #52]	; (8006668 <nameCommand+0x90>)
 8006634:	0020      	movs	r0, r4
 8006636:	f00e f86b 	bl	8014710 <sprintf>
 800663a:	e7ed      	b.n	8006618 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 800663c:	4b07      	ldr	r3, [pc, #28]	; (800665c <nameCommand+0x84>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	490a      	ldr	r1, [pc, #40]	; (800666c <nameCommand+0x94>)
 8006642:	0020      	movs	r0, r4
 8006644:	f00e f864 	bl	8014710 <sprintf>
 8006648:	e7e6      	b.n	8006618 <nameCommand+0x40>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 800664a:	4b04      	ldr	r3, [pc, #16]	; (800665c <nameCommand+0x84>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	4908      	ldr	r1, [pc, #32]	; (8006670 <nameCommand+0x98>)
 8006650:	0020      	movs	r0, r4
 8006652:	f00e f85d 	bl	8014710 <sprintf>
 8006656:	e7df      	b.n	8006618 <nameCommand+0x40>
 8006658:	20001404 	.word	0x20001404
 800665c:	200012d0 	.word	0x200012d0
 8006660:	20001298 	.word	0x20001298
 8006664:	08019850 	.word	0x08019850
 8006668:	08019868 	.word	0x08019868
 800666c:	080198a8 	.word	0x080198a8
 8006670:	080198dc 	.word	0x080198dc

08006674 <AddModuleToGroup>:
{
 8006674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006676:	46c6      	mov	lr, r8
 8006678:	b500      	push	{lr}
 800667a:	0007      	movs	r7, r0
 800667c:	000e      	movs	r6, r1
 800667e:	4d3a      	ldr	r5, [pc, #232]	; (8006768 <AddModuleToGroup+0xf4>)
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8006680:	2400      	movs	r4, #0
		if (!strcmp(group, groupAlias[i]))	
 8006682:	0029      	movs	r1, r5
 8006684:	0030      	movs	r0, r6
 8006686:	f7f9 fd3d 	bl	8000104 <strcmp>
 800668a:	2800      	cmp	r0, #0
 800668c:	d050      	beq.n	8006730 <AddModuleToGroup+0xbc>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800668e:	3401      	adds	r4, #1
 8006690:	350a      	adds	r5, #10
 8006692:	2c0a      	cmp	r4, #10
 8006694:	d1f5      	bne.n	8006682 <AddModuleToGroup+0xe>
 8006696:	4c35      	ldr	r4, [pc, #212]	; (800676c <AddModuleToGroup+0xf8>)
 8006698:	0025      	movs	r5, r4
 800669a:	3510      	adds	r5, #16
		if (!strcmp(group, BOSkeywords[j]))	
 800669c:	0021      	movs	r1, r4
 800669e:	0030      	movs	r0, r6
 80066a0:	f7f9 fd30 	bl	8000104 <strcmp>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d058      	beq.n	800675a <AddModuleToGroup+0xe6>
 80066a8:	3404      	adds	r4, #4
	for(j=0 ; j<NumOfKeywords ; j++)
 80066aa:	42ac      	cmp	r4, r5
 80066ac:	d1f6      	bne.n	800669c <AddModuleToGroup+0x28>
	for(j=1 ; j<N ; j++)
 80066ae:	4b30      	ldr	r3, [pc, #192]	; (8006770 <AddModuleToGroup+0xfc>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d90f      	bls.n	80066d6 <AddModuleToGroup+0x62>
 80066b6:	4c2f      	ldr	r4, [pc, #188]	; (8006774 <AddModuleToGroup+0x100>)
 80066b8:	009d      	lsls	r5, r3, #2
 80066ba:	18ed      	adds	r5, r5, r3
 80066bc:	006d      	lsls	r5, r5, #1
 80066be:	0023      	movs	r3, r4
 80066c0:	3b0a      	subs	r3, #10
 80066c2:	18ed      	adds	r5, r5, r3
		if (!strcmp(group, moduleAlias[j]))	
 80066c4:	0021      	movs	r1, r4
 80066c6:	0030      	movs	r0, r6
 80066c8:	f7f9 fd1c 	bl	8000104 <strcmp>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d046      	beq.n	800675e <AddModuleToGroup+0xea>
 80066d0:	340a      	adds	r4, #10
	for(j=1 ; j<N ; j++)
 80066d2:	42ac      	cmp	r4, r5
 80066d4:	d1f6      	bne.n	80066c4 <AddModuleToGroup+0x50>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80066d6:	4c28      	ldr	r4, [pc, #160]	; (8006778 <AddModuleToGroup+0x104>)
 80066d8:	4b28      	ldr	r3, [pc, #160]	; (800677c <AddModuleToGroup+0x108>)
 80066da:	601c      	str	r4, [r3, #0]
 80066dc:	4698      	mov	r8, r3
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 80066e2:	0028      	movs	r0, r5
 80066e4:	f7f9 fd18 	bl	8000118 <strlen>
 80066e8:	0002      	movs	r2, r0
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 80066ea:	0029      	movs	r1, r5
 80066ec:	0030      	movs	r0, r6
 80066ee:	f00e f853 	bl	8014798 <strncmp>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d035      	beq.n	8006762 <AddModuleToGroup+0xee>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80066f6:	6864      	ldr	r4, [r4, #4]
 80066f8:	4643      	mov	r3, r8
 80066fa:	601c      	str	r4, [r3, #0]
 80066fc:	2c00      	cmp	r4, #0
 80066fe:	d1ee      	bne.n	80066de <AddModuleToGroup+0x6a>
		if (!groupAlias[i][0]) {	
 8006700:	4b19      	ldr	r3, [pc, #100]	; (8006768 <AddModuleToGroup+0xf4>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01e      	beq.n	8006746 <AddModuleToGroup+0xd2>
 8006708:	4b17      	ldr	r3, [pc, #92]	; (8006768 <AddModuleToGroup+0xf4>)
 800670a:	330a      	adds	r3, #10
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800670c:	3401      	adds	r4, #1
		if (!groupAlias[i][0]) {	
 800670e:	781a      	ldrb	r2, [r3, #0]
 8006710:	2a00      	cmp	r2, #0
 8006712:	d019      	beq.n	8006748 <AddModuleToGroup+0xd4>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8006714:	3401      	adds	r4, #1
 8006716:	330a      	adds	r3, #10
 8006718:	2c0a      	cmp	r4, #10
 800671a:	d1f8      	bne.n	800670e <AddModuleToGroup+0x9a>
	groupModules[module-1] |= (0x0001<<i);
 800671c:	3f01      	subs	r7, #1
 800671e:	4918      	ldr	r1, [pc, #96]	; (8006780 <AddModuleToGroup+0x10c>)
 8006720:	007f      	lsls	r7, r7, #1
 8006722:	2201      	movs	r2, #1
 8006724:	40a2      	lsls	r2, r4
 8006726:	5a7b      	ldrh	r3, [r7, r1]
 8006728:	4313      	orrs	r3, r2
 800672a:	527b      	strh	r3, [r7, r1]
	return result;
 800672c:	2000      	movs	r0, #0
 800672e:	e007      	b.n	8006740 <AddModuleToGroup+0xcc>
			groupModules[module-1] |= (0x0001<<i);	
 8006730:	3f01      	subs	r7, #1
 8006732:	4913      	ldr	r1, [pc, #76]	; (8006780 <AddModuleToGroup+0x10c>)
 8006734:	007f      	lsls	r7, r7, #1
 8006736:	2201      	movs	r2, #1
 8006738:	40a2      	lsls	r2, r4
 800673a:	5a7b      	ldrh	r3, [r7, r1]
 800673c:	4313      	orrs	r3, r2
 800673e:	527b      	strh	r3, [r7, r1]
}
 8006740:	bc04      	pop	{r2}
 8006742:	4690      	mov	r8, r2
 8006744:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8006746:	2400      	movs	r4, #0
			strcpy(groupAlias[i], group);	
 8006748:	00a0      	lsls	r0, r4, #2
 800674a:	1900      	adds	r0, r0, r4
 800674c:	0040      	lsls	r0, r0, #1
 800674e:	4b06      	ldr	r3, [pc, #24]	; (8006768 <AddModuleToGroup+0xf4>)
 8006750:	1818      	adds	r0, r3, r0
 8006752:	0031      	movs	r1, r6
 8006754:	f00e f818 	bl	8014788 <strcpy>
			break;
 8006758:	e7e0      	b.n	800671c <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 800675a:	2006      	movs	r0, #6
 800675c:	e7f0      	b.n	8006740 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 800675e:	2007      	movs	r0, #7
 8006760:	e7ee      	b.n	8006740 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 8006762:	2008      	movs	r0, #8
 8006764:	e7ec      	b.n	8006740 <AddModuleToGroup+0xcc>
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	20000f74 	.word	0x20000f74
 800676c:	08018eb8 	.word	0x08018eb8
 8006770:	2000001c 	.word	0x2000001c
 8006774:	2000119e 	.word	0x2000119e
 8006778:	200000e4 	.word	0x200000e4
 800677c:	20001374 	.word	0x20001374
 8006780:	20000fd8 	.word	0x20000fd8

08006784 <groupCommand>:
{
 8006784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006786:	46ce      	mov	lr, r9
 8006788:	b500      	push	{lr}
 800678a:	b090      	sub	sp, #64	; 0x40
 800678c:	0004      	movs	r4, r0
 800678e:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 8006790:	2227      	movs	r2, #39	; 0x27
 8006792:	2100      	movs	r1, #0
 8006794:	a806      	add	r0, sp, #24
 8006796:	f00d fd8f 	bl	80142b8 <memset>
 800679a:	220a      	movs	r2, #10
 800679c:	2100      	movs	r1, #0
 800679e:	a803      	add	r0, sp, #12
 80067a0:	f00d fd8a 	bl	80142b8 <memset>
	configASSERT( pcWriteBuffer );
 80067a4:	2c00      	cmp	r4, #0
 80067a6:	d101      	bne.n	80067ac <groupCommand+0x28>
 80067a8:	b672      	cpsid	i
 80067aa:	e7fe      	b.n	80067aa <groupCommand+0x26>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80067ac:	4d54      	ldr	r5, [pc, #336]	; (8006900 <groupCommand+0x17c>)
 80067ae:	002a      	movs	r2, r5
 80067b0:	2101      	movs	r1, #1
 80067b2:	9801      	ldr	r0, [sp, #4]
 80067b4:	f008 f9a0 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80067b8:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 80067ba:	682a      	ldr	r2, [r5, #0]
 80067bc:	a803      	add	r0, sp, #12
 80067be:	f00d fffc 	bl	80147ba <strncpy>
 80067c2:	4d50      	ldr	r5, [pc, #320]	; (8006904 <groupCommand+0x180>)
 80067c4:	002f      	movs	r7, r5
 80067c6:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 80067c8:	0029      	movs	r1, r5
 80067ca:	a803      	add	r0, sp, #12
 80067cc:	f7f9 fc9a 	bl	8000104 <strcmp>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d016      	beq.n	8006802 <groupCommand+0x7e>
 80067d4:	350a      	adds	r5, #10
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 80067d6:	42bd      	cmp	r5, r7
 80067d8:	d1f6      	bne.n	80067c8 <groupCommand+0x44>
	type = 1;
 80067da:	2701      	movs	r7, #1
	count = 2;
 80067dc:	4b4a      	ldr	r3, [pc, #296]	; (8006908 <groupCommand+0x184>)
 80067de:	2202      	movs	r2, #2
 80067e0:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 80067e2:	3208      	adds	r2, #8
 80067e4:	4949      	ldr	r1, [pc, #292]	; (800690c <groupCommand+0x188>)
 80067e6:	0020      	movs	r0, r4
 80067e8:	f00d fd5d 	bl	80142a6 <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 80067ec:	4a48      	ldr	r2, [pc, #288]	; (8006910 <groupCommand+0x18c>)
 80067ee:	2102      	movs	r1, #2
 80067f0:	9801      	ldr	r0, [sp, #4]
 80067f2:	f008 f981 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80067f6:	4b47      	ldr	r3, [pc, #284]	; (8006914 <groupCommand+0x190>)
 80067f8:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d061      	beq.n	80068c2 <groupCommand+0x13e>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 80067fe:	4e44      	ldr	r6, [pc, #272]	; (8006910 <groupCommand+0x18c>)
 8006800:	e011      	b.n	8006826 <groupCommand+0xa2>
			type = 0; break;
 8006802:	2700      	movs	r7, #0
 8006804:	e7ea      	b.n	80067dc <groupCommand+0x58>
		strcat( ( char * ) pcWriteBuffer, module);
 8006806:	a906      	add	r1, sp, #24
 8006808:	0020      	movs	r0, r4
 800680a:	f00d ffa1 	bl	8014750 <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 800680e:	1c69      	adds	r1, r5, #1
 8006810:	b249      	sxtb	r1, r1
 8006812:	4b3d      	ldr	r3, [pc, #244]	; (8006908 <groupCommand+0x184>)
 8006814:	7019      	strb	r1, [r3, #0]
 8006816:	4a3e      	ldr	r2, [pc, #248]	; (8006910 <groupCommand+0x18c>)
 8006818:	9801      	ldr	r0, [sp, #4]
 800681a:	f008 f96d 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 800681e:	4b3d      	ldr	r3, [pc, #244]	; (8006914 <groupCommand+0x190>)
 8006820:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 8006822:	2800      	cmp	r0, #0
 8006824:	d04d      	beq.n	80068c2 <groupCommand+0x13e>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8006826:	6833      	ldr	r3, [r6, #0]
 8006828:	4699      	mov	r9, r3
 800682a:	ad06      	add	r5, sp, #24
 800682c:	001a      	movs	r2, r3
 800682e:	0001      	movs	r1, r0
 8006830:	0028      	movs	r0, r5
 8006832:	f00d ffc2 	bl	80147ba <strncpy>
 8006836:	2300      	movs	r3, #0
 8006838:	464a      	mov	r2, r9
 800683a:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 800683c:	0028      	movs	r0, r5
 800683e:	f7ff fdff 	bl	8006440 <GetID>
		if (modID < 0)	break;
 8006842:	2800      	cmp	r0, #0
 8006844:	db37      	blt.n	80068b6 <groupCommand+0x132>
		result = AddModuleToGroup(modID, alias);
 8006846:	b2c0      	uxtb	r0, r0
 8006848:	a903      	add	r1, sp, #12
 800684a:	f7ff ff13 	bl	8006674 <AddModuleToGroup>
		if (result != BOS_OK)	break;
 800684e:	2800      	cmp	r0, #0
 8006850:	d146      	bne.n	80068e0 <groupCommand+0x15c>
		if (count > 2)
 8006852:	4b2d      	ldr	r3, [pc, #180]	; (8006908 <groupCommand+0x184>)
 8006854:	2500      	movs	r5, #0
 8006856:	575d      	ldrsb	r5, [r3, r5]
 8006858:	2d02      	cmp	r5, #2
 800685a:	ddd4      	ble.n	8006806 <groupCommand+0x82>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 800685c:	0020      	movs	r0, r4
 800685e:	f7f9 fc5b 	bl	8000118 <strlen>
 8006862:	1820      	adds	r0, r4, r0
 8006864:	2203      	movs	r2, #3
 8006866:	492c      	ldr	r1, [pc, #176]	; (8006918 <groupCommand+0x194>)
 8006868:	f00d fd1d 	bl	80142a6 <memcpy>
 800686c:	e7cb      	b.n	8006806 <groupCommand+0x82>
	else if (result == BOS_OK && type) {
 800686e:	2f00      	cmp	r7, #0
 8006870:	d009      	beq.n	8006886 <groupCommand+0x102>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 8006872:	aa03      	add	r2, sp, #12
 8006874:	4929      	ldr	r1, [pc, #164]	; (800691c <groupCommand+0x198>)
 8006876:	a806      	add	r0, sp, #24
 8006878:	f00d ff4a 	bl	8014710 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 800687c:	a906      	add	r1, sp, #24
 800687e:	0020      	movs	r0, r4
 8006880:	f00d ff66 	bl	8014750 <strcat>
 8006884:	e027      	b.n	80068d6 <groupCommand+0x152>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 8006886:	aa03      	add	r2, sp, #12
 8006888:	4925      	ldr	r1, [pc, #148]	; (8006920 <groupCommand+0x19c>)
 800688a:	a806      	add	r0, sp, #24
 800688c:	f00d ff40 	bl	8014710 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8006890:	a906      	add	r1, sp, #24
 8006892:	0020      	movs	r0, r4
 8006894:	f00d ff5c 	bl	8014750 <strcat>
 8006898:	e01d      	b.n	80068d6 <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 800689a:	aa03      	add	r2, sp, #12
 800689c:	4921      	ldr	r1, [pc, #132]	; (8006924 <groupCommand+0x1a0>)
 800689e:	0020      	movs	r0, r4
 80068a0:	f00d ff36 	bl	8014710 <sprintf>
 80068a4:	e017      	b.n	80068d6 <groupCommand+0x152>
	else if (result == BOS_ERR_ExistingCmd)
 80068a6:	2808      	cmp	r0, #8
 80068a8:	d115      	bne.n	80068d6 <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 80068aa:	aa03      	add	r2, sp, #12
 80068ac:	491e      	ldr	r1, [pc, #120]	; (8006928 <groupCommand+0x1a4>)
 80068ae:	0020      	movs	r0, r4
 80068b0:	f00d ff2e 	bl	8014710 <sprintf>
 80068b4:	e00f      	b.n	80068d6 <groupCommand+0x152>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 80068b6:	aa06      	add	r2, sp, #24
 80068b8:	491c      	ldr	r1, [pc, #112]	; (800692c <groupCommand+0x1a8>)
 80068ba:	0020      	movs	r0, r4
 80068bc:	f00d ff28 	bl	8014710 <sprintf>
	return pdFALSE;
 80068c0:	e009      	b.n	80068d6 <groupCommand+0x152>
	else if (count == 2)
 80068c2:	4b11      	ldr	r3, [pc, #68]	; (8006908 <groupCommand+0x184>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	b25b      	sxtb	r3, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d1d0      	bne.n	800686e <groupCommand+0xea>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 80068cc:	aa03      	add	r2, sp, #12
 80068ce:	4918      	ldr	r1, [pc, #96]	; (8006930 <groupCommand+0x1ac>)
 80068d0:	0020      	movs	r0, r4
 80068d2:	f00d ff1d 	bl	8014710 <sprintf>
}
 80068d6:	2000      	movs	r0, #0
 80068d8:	b010      	add	sp, #64	; 0x40
 80068da:	bc04      	pop	{r2}
 80068dc:	4691      	mov	r9, r2
 80068de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 80068e0:	4b09      	ldr	r3, [pc, #36]	; (8006908 <groupCommand+0x184>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d0f0      	beq.n	80068cc <groupCommand+0x148>
	} else if (result == BOS_ERR_Keyword)
 80068ea:	2806      	cmp	r0, #6
 80068ec:	d0d5      	beq.n	800689a <groupCommand+0x116>
	else if (result == BOS_ERR_ExistingAlias)
 80068ee:	2807      	cmp	r0, #7
 80068f0:	d1d9      	bne.n	80068a6 <groupCommand+0x122>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 80068f2:	aa03      	add	r2, sp, #12
 80068f4:	490f      	ldr	r1, [pc, #60]	; (8006934 <groupCommand+0x1b0>)
 80068f6:	0020      	movs	r0, r4
 80068f8:	f00d ff0a 	bl	8014710 <sprintf>
 80068fc:	e7eb      	b.n	80068d6 <groupCommand+0x152>
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	20001408 	.word	0x20001408
 8006904:	20000f74 	.word	0x20000f74
 8006908:	20000f66 	.word	0x20000f66
 800690c:	080195d8 	.word	0x080195d8
 8006910:	200013fc 	.word	0x200013fc
 8006914:	200012cc 	.word	0x200012cc
 8006918:	080195e4 	.word	0x080195e4
 800691c:	08019614 	.word	0x08019614
 8006920:	08019630 	.word	0x08019630
 8006924:	08019868 	.word	0x08019868
 8006928:	080198dc 	.word	0x080198dc
 800692c:	08019650 	.word	0x08019650
 8006930:	080195e8 	.word	0x080195e8
 8006934:	080198a8 	.word	0x080198a8

08006938 <ReadPortsDir>:
{
 8006938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693a:	46de      	mov	lr, fp
 800693c:	464f      	mov	r7, r9
 800693e:	4646      	mov	r6, r8
 8006940:	b5c0      	push	{r6, r7, lr}
 8006942:	b082      	sub	sp, #8
	for (uint8_t i=1 ; i<=N ; i++) 
 8006944:	4b25      	ldr	r3, [pc, #148]	; (80069dc <ReadPortsDir+0xa4>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d03d      	beq.n	80069c8 <ReadPortsDir+0x90>
 800694c:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK; 
 800694e:	2300      	movs	r3, #0
 8006950:	9301      	str	r3, [sp, #4]
		if (i != myID) {
 8006952:	4b23      	ldr	r3, [pc, #140]	; (80069e0 <ReadPortsDir+0xa8>)
 8006954:	469b      	mov	fp, r3
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8006956:	4b23      	ldr	r3, [pc, #140]	; (80069e4 <ReadPortsDir+0xac>)
 8006958:	4698      	mov	r8, r3
 800695a:	e022      	b.n	80069a2 <ReadPortsDir+0x6a>
 800695c:	2600      	movs	r6, #0
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 800695e:	2401      	movs	r4, #1
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8006960:	2780      	movs	r7, #128	; 0x80
 8006962:	023f      	lsls	r7, r7, #8
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8006964:	1e6b      	subs	r3, r5, #1
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	4699      	mov	r9, r3
 800696a:	e004      	b.n	8006976 <ReadPortsDir+0x3e>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 800696c:	3401      	adds	r4, #1
 800696e:	b2e4      	uxtb	r4, r4
 8006970:	3601      	adds	r6, #1
 8006972:	2c07      	cmp	r4, #7
 8006974:	d00f      	beq.n	8006996 <ReadPortsDir+0x5e>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8006976:	0020      	movs	r0, r4
 8006978:	f7fe f82e 	bl	80049d8 <GetUart>
 800697c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800697e:	42bb      	cmp	r3, r7
 8006980:	d1f4      	bne.n	800696c <ReadPortsDir+0x34>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8006982:	4643      	mov	r3, r8
 8006984:	464a      	mov	r2, r9
 8006986:	5ad3      	ldrh	r3, [r2, r3]
 8006988:	003a      	movs	r2, r7
 800698a:	4132      	asrs	r2, r6
 800698c:	4313      	orrs	r3, r2
 800698e:	4642      	mov	r2, r8
 8006990:	4649      	mov	r1, r9
 8006992:	528b      	strh	r3, [r1, r2]
 8006994:	e7ea      	b.n	800696c <ReadPortsDir+0x34>
	for (uint8_t i=1 ; i<=N ; i++) 
 8006996:	3501      	adds	r5, #1
 8006998:	b2ed      	uxtb	r5, r5
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <ReadPortsDir+0xa4>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	42ab      	cmp	r3, r5
 80069a0:	d314      	bcc.n	80069cc <ReadPortsDir+0x94>
		if (i != myID) {
 80069a2:	465b      	mov	r3, fp
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	42ab      	cmp	r3, r5
 80069a8:	d0d8      	beq.n	800695c <ReadPortsDir+0x24>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 80069aa:	2200      	movs	r2, #0
 80069ac:	2113      	movs	r1, #19
 80069ae:	0028      	movs	r0, r5
 80069b0:	f7ff fa14 	bl	8005ddc <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80069b4:	2032      	movs	r0, #50	; 0x32
 80069b6:	f7ff f80f 	bl	80059d8 <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <ReadPortsDir+0xb0>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0e9      	beq.n	8006996 <ReadPortsDir+0x5e>
				result = BOS_ERR_NoResponse;
 80069c2:	2302      	movs	r3, #2
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	e7e6      	b.n	8006996 <ReadPortsDir+0x5e>
	BOS_Status result = BOS_OK; 
 80069c8:	2300      	movs	r3, #0
 80069ca:	9301      	str	r3, [sp, #4]
}
 80069cc:	9801      	ldr	r0, [sp, #4]
 80069ce:	b002      	add	sp, #8
 80069d0:	bc1c      	pop	{r2, r3, r4}
 80069d2:	4690      	mov	r8, r2
 80069d4:	4699      	mov	r9, r3
 80069d6:	46a3      	mov	fp, r4
 80069d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	2000001c 	.word	0x2000001c
 80069e0:	20001298 	.word	0x20001298
 80069e4:	20000ce8 	.word	0x20000ce8
 80069e8:	200013a0 	.word	0x200013a0

080069ec <infoCommand>:
{
 80069ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ee:	b083      	sub	sp, #12
 80069f0:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80069f2:	d039      	beq.n	8006a68 <infoCommand+0x7c>
	if (N > 1)
 80069f4:	4b26      	ldr	r3, [pc, #152]	; (8006a90 <infoCommand+0xa4>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 80069f8:	2500      	movs	r5, #0
	if (N > 1)
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d902      	bls.n	8006a04 <infoCommand+0x18>
		result = ReadPortsDir();
 80069fe:	f7ff ff9b 	bl	8006938 <ReadPortsDir>
 8006a02:	0005      	movs	r5, r0
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 8006a04:	4b22      	ldr	r3, [pc, #136]	; (8006a90 <infoCommand+0xa4>)
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	4922      	ldr	r1, [pc, #136]	; (8006a94 <infoCommand+0xa8>)
 8006a0a:	0020      	movs	r0, r4
 8006a0c:	f00d fe80 	bl	8014710 <sprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006a10:	0020      	movs	r0, r4
 8006a12:	f7f9 fb81 	bl	8000118 <strlen>
 8006a16:	b282      	uxth	r2, r0
 8006a18:	4e1f      	ldr	r6, [pc, #124]	; (8006a98 <infoCommand+0xac>)
 8006a1a:	7830      	ldrb	r0, [r6, #0]
 8006a1c:	2701      	movs	r7, #1
 8006a1e:	427f      	negs	r7, r7
 8006a20:	9700      	str	r7, [sp, #0]
 8006a22:	2332      	movs	r3, #50	; 0x32
 8006a24:	0021      	movs	r1, r4
 8006a26:	f007 fa81 	bl	800df2c <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 8006a2a:	2213      	movs	r2, #19
 8006a2c:	491b      	ldr	r1, [pc, #108]	; (8006a9c <infoCommand+0xb0>)
 8006a2e:	0020      	movs	r0, r4
 8006a30:	f00d fc39 	bl	80142a6 <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006a34:	0020      	movs	r0, r4
 8006a36:	f7f9 fb6f 	bl	8000118 <strlen>
 8006a3a:	b282      	uxth	r2, r0
 8006a3c:	7830      	ldrb	r0, [r6, #0]
 8006a3e:	9700      	str	r7, [sp, #0]
 8006a40:	2332      	movs	r3, #50	; 0x32
 8006a42:	0021      	movs	r1, r4
 8006a44:	f007 fa72 	bl	800df2c <writePxMutex>
	DisplayTopology(PcPort);
 8006a48:	7830      	ldrb	r0, [r6, #0]
 8006a4a:	f7ff fa4b 	bl	8005ee4 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006a4e:	7830      	ldrb	r0, [r6, #0]
 8006a50:	f7ff fb18 	bl	8006084 <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 8006a54:	2d02      	cmp	r5, #2
 8006a56:	d009      	beq.n	8006a6c <infoCommand+0x80>
	sprintf( ( char * ) pcWriteBuffer, " ");
 8006a58:	2202      	movs	r2, #2
 8006a5a:	4911      	ldr	r1, [pc, #68]	; (8006aa0 <infoCommand+0xb4>)
 8006a5c:	0020      	movs	r0, r4
 8006a5e:	f00d fc22 	bl	80142a6 <memcpy>
}
 8006a62:	2000      	movs	r0, #0
 8006a64:	b003      	add	sp, #12
 8006a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006a68:	b672      	cpsid	i
 8006a6a:	e7fe      	b.n	8006a6a <infoCommand+0x7e>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 8006a6c:	2244      	movs	r2, #68	; 0x44
 8006a6e:	490d      	ldr	r1, [pc, #52]	; (8006aa4 <infoCommand+0xb8>)
 8006a70:	0020      	movs	r0, r4
 8006a72:	f00d fc18 	bl	80142a6 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 8006a76:	0020      	movs	r0, r4
 8006a78:	f7f9 fb4e 	bl	8000118 <strlen>
 8006a7c:	b282      	uxth	r2, r0
 8006a7e:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <infoCommand+0xac>)
 8006a80:	7818      	ldrb	r0, [r3, #0]
 8006a82:	003b      	movs	r3, r7
 8006a84:	9700      	str	r7, [sp, #0]
 8006a86:	3333      	adds	r3, #51	; 0x33
 8006a88:	0021      	movs	r1, r4
 8006a8a:	f007 fa4f 	bl	800df2c <writePxMutex>
 8006a8e:	e7e3      	b.n	8006a58 <infoCommand+0x6c>
 8006a90:	2000001c 	.word	0x2000001c
 8006a94:	08019704 	.word	0x08019704
 8006a98:	20000abf 	.word	0x20000abf
 8006a9c:	08019720 	.word	0x08019720
 8006aa0:	08018f6c 	.word	0x08018f6c
 8006aa4:	08019734 	.word	0x08019734

08006aa8 <UpdateMyPortsDir>:
{
 8006aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aaa:	46c6      	mov	lr, r8
 8006aac:	b500      	push	{lr}
 8006aae:	2500      	movs	r5, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8006ab0:	2401      	movs	r4, #1
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8006ab2:	4b12      	ldr	r3, [pc, #72]	; (8006afc <UpdateMyPortsDir+0x54>)
 8006ab4:	4698      	mov	r8, r3
 8006ab6:	4f12      	ldr	r7, [pc, #72]	; (8006b00 <UpdateMyPortsDir+0x58>)
 8006ab8:	2680      	movs	r6, #128	; 0x80
 8006aba:	0236      	lsls	r6, r6, #8
 8006abc:	e00a      	b.n	8006ad4 <UpdateMyPortsDir+0x2c>
			SwapUartPins(GetUart(p), REVERSED);					
 8006abe:	0020      	movs	r0, r4
 8006ac0:	f7fd ff8a 	bl	80049d8 <GetUart>
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	f7ff f861 	bl	8005b8c <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8006aca:	3401      	adds	r4, #1
 8006acc:	b2e4      	uxtb	r4, r4
 8006ace:	3501      	adds	r5, #1
 8006ad0:	2c07      	cmp	r4, #7
 8006ad2:	d00f      	beq.n	8006af4 <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8006ad4:	783b      	ldrb	r3, [r7, #0]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	4642      	mov	r2, r8
 8006adc:	5a9b      	ldrh	r3, [r3, r2]
 8006ade:	0032      	movs	r2, r6
 8006ae0:	412a      	asrs	r2, r5
 8006ae2:	421a      	tst	r2, r3
 8006ae4:	d1eb      	bne.n	8006abe <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 8006ae6:	0020      	movs	r0, r4
 8006ae8:	f7fd ff76 	bl	80049d8 <GetUart>
 8006aec:	2100      	movs	r1, #0
 8006aee:	f7ff f84d 	bl	8005b8c <SwapUartPins>
 8006af2:	e7ea      	b.n	8006aca <UpdateMyPortsDir+0x22>
}
 8006af4:	2000      	movs	r0, #0
 8006af6:	bc04      	pop	{r2}
 8006af8:	4690      	mov	r8, r2
 8006afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afc:	20000ce8 	.word	0x20000ce8
 8006b00:	20001298 	.word	0x20001298

08006b04 <StartScastDMAStream>:
{
 8006b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b06:	46de      	mov	lr, fp
 8006b08:	4657      	mov	r7, sl
 8006b0a:	464e      	mov	r6, r9
 8006b0c:	4645      	mov	r5, r8
 8006b0e:	b5e0      	push	{r5, r6, r7, lr}
 8006b10:	b091      	sub	sp, #68	; 0x44
 8006b12:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b14:	000c      	movs	r4, r1
 8006b16:	9106      	str	r1, [sp, #24]
 8006b18:	0015      	movs	r5, r2
 8006b1a:	920e      	str	r2, [sp, #56]	; 0x38
 8006b1c:	001e      	movs	r6, r3
 8006b1e:	ab1a      	add	r3, sp, #104	; 0x68
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	4698      	mov	r8, r3
 8006b24:	ab1d      	add	r3, sp, #116	; 0x74
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	469a      	mov	sl, r3
	if (srcM != myID) {
 8006b2a:	4b5a      	ldr	r3, [pc, #360]	; (8006c94 <StartScastDMAStream+0x190>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	428b      	cmp	r3, r1
 8006b30:	d11e      	bne.n	8006b70 <StartScastDMAStream+0x6c>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8006b32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b34:	0e1b      	lsrs	r3, r3, #24
 8006b36:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 8006b38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b3a:	0c1b      	lsrs	r3, r3, #16
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 8006b40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b42:	0a1b      	lsrs	r3, r3, #8
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8006b48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006b4a:	0e1b      	lsrs	r3, r3, #24
 8006b4c:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 8006b4e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006b50:	0c1b      	lsrs	r3, r3, #16
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 8006b56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006b58:	0a1b      	lsrs	r3, r3, #8
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	469b      	mov	fp, r3
 8006b5e:	4b4e      	ldr	r3, [pc, #312]	; (8006c98 <StartScastDMAStream+0x194>)
 8006b60:	1e5d      	subs	r5, r3, #1
 8006b62:	2218      	movs	r2, #24
 8006b64:	4691      	mov	r9, r2
 8006b66:	4499      	add	r9, r3
				temp2 = dstP;
 8006b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b6a:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8006b6c:	4c4b      	ldr	r4, [pc, #300]	; (8006c9c <StartScastDMAStream+0x198>)
 8006b6e:	e05c      	b.n	8006c2a <StartScastDMAStream+0x126>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8006b70:	4b4a      	ldr	r3, [pc, #296]	; (8006c9c <StartScastDMAStream+0x198>)
 8006b72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b74:	0e12      	lsrs	r2, r2, #24
 8006b76:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 8006b78:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b7a:	0c12      	lsrs	r2, r2, #16
 8006b7c:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 8006b7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b80:	0a12      	lsrs	r2, r2, #8
 8006b82:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 8006b84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b86:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8006b88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b8a:	0e12      	lsrs	r2, r2, #24
 8006b8c:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 8006b8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b90:	0c12      	lsrs	r2, r2, #16
 8006b92:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 8006b94:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b96:	0a12      	lsrs	r2, r2, #8
 8006b98:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 8006b9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b9c:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 8006ba2:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 8006ba4:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 8006ba6:	72dd      	strb	r5, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 8006ba8:	4652      	mov	r2, sl
 8006baa:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 8006bac:	220d      	movs	r2, #13
 8006bae:	211c      	movs	r1, #28
 8006bb0:	0020      	movs	r0, r4
 8006bb2:	f7ff f913 	bl	8005ddc <SendMessageToModule>
}
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	b011      	add	sp, #68	; 0x44
 8006bba:	bc3c      	pop	{r2, r3, r4, r5}
 8006bbc:	4690      	mov	r8, r2
 8006bbe:	4699      	mov	r9, r3
 8006bc0:	46a2      	mov	sl, r4
 8006bc2:	46ab      	mov	fp, r5
 8006bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 = FindRoute(route[i], srcM);
 8006bc6:	9906      	ldr	r1, [sp, #24]
 8006bc8:	f7ff f818 	bl	8005bfc <FindRoute>
 8006bcc:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 8006bce:	0031      	movs	r1, r6
 8006bd0:	9806      	ldr	r0, [sp, #24]
 8006bd2:	f7ff f813 	bl	8005bfc <FindRoute>
			if (route[i] == dstM) {
 8006bd6:	7878      	ldrb	r0, [r7, #1]
				temp2 = dstP;
 8006bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 8006bda:	42b0      	cmp	r0, r6
 8006bdc:	d134      	bne.n	8006c48 <StartScastDMAStream+0x144>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8006bde:	9a08      	ldr	r2, [sp, #32]
 8006be0:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 8006be2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006be4:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 8006be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006be8:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 8006bea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006bec:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8006bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bf0:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 8006bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bf4:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 8006bf6:	465a      	mov	r2, fp
 8006bf8:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 8006bfa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006bfc:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 8006bfe:	4642      	mov	r2, r8
 8006c00:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8006c02:	9a07      	ldr	r2, [sp, #28]
 8006c04:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 8006c06:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 8006c08:	4653      	mov	r3, sl
 8006c0a:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 8006c0c:	0031      	movs	r1, r6
 8006c0e:	9806      	ldr	r0, [sp, #24]
 8006c10:	f7fe fff4 	bl	8005bfc <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 8006c14:	7878      	ldrb	r0, [r7, #1]
 8006c16:	220c      	movs	r2, #12
 8006c18:	211b      	movs	r1, #27
 8006c1a:	f7ff f8df 	bl	8005ddc <SendMessageToModule>
			osDelay(10);
 8006c1e:	200a      	movs	r0, #10
 8006c20:	f007 fe51 	bl	800e8c6 <osDelay>
 8006c24:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 8006c26:	454d      	cmp	r5, r9
 8006c28:	d013      	beq.n	8006c52 <StartScastDMAStream+0x14e>
		FindRoute(srcM, dstM);
 8006c2a:	0031      	movs	r1, r6
 8006c2c:	9806      	ldr	r0, [sp, #24]
 8006c2e:	f7fe ffe5 	bl	8005bfc <FindRoute>
 8006c32:	002f      	movs	r7, r5
		if (route[i]) 
 8006c34:	7868      	ldrb	r0, [r5, #1]
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d0f4      	beq.n	8006c24 <StartScastDMAStream+0x120>
			if (route[i+1]) {
 8006c3a:	78a9      	ldrb	r1, [r5, #2]
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	d0c2      	beq.n	8006bc6 <StartScastDMAStream+0xc2>
				temp1 = FindRoute(route[i], route[i+1]);
 8006c40:	f7fe ffdc 	bl	8005bfc <FindRoute>
 8006c44:	9007      	str	r0, [sp, #28]
 8006c46:	e7c2      	b.n	8006bce <StartScastDMAStream+0xca>
				temp2 = FindRoute(route[i], route[i-1]);
 8006c48:	7839      	ldrb	r1, [r7, #0]
 8006c4a:	f7fe ffd7 	bl	8005bfc <FindRoute>
 8006c4e:	0003      	movs	r3, r0
 8006c50:	e7c5      	b.n	8006bde <StartScastDMAStream+0xda>
	if (srcM == dstM)
 8006c52:	9806      	ldr	r0, [sp, #24]
 8006c54:	42b0      	cmp	r0, r6
 8006c56:	d118      	bne.n	8006c8a <StartScastDMAStream+0x186>
	SetupDMAStreams(direction, count, timeout, srcP, port);
 8006c58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c60:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006c62:	4640      	mov	r0, r8
 8006c64:	f7fd feda 	bl	8004a1c <SetupDMAStreams>
	if (stored) {		
 8006c68:	4653      	mov	r3, sl
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0a3      	beq.n	8006bb6 <StartScastDMAStream+0xb2>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9304      	str	r3, [sp, #16]
 8006c72:	9303      	str	r3, [sp, #12]
 8006c74:	9302      	str	r3, [sp, #8]
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c80:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006c82:	4640      	mov	r0, r8
 8006c84:	f7fd fada 	bl	800423c <SaveEEstreams>
 8006c88:	e795      	b.n	8006bb6 <StartScastDMAStream+0xb2>
		port = FindRoute(srcM, dstM);
 8006c8a:	0031      	movs	r1, r6
 8006c8c:	f7fe ffb6 	bl	8005bfc <FindRoute>
 8006c90:	900e      	str	r0, [sp, #56]	; 0x38
 8006c92:	e7e1      	b.n	8006c58 <StartScastDMAStream+0x154>
 8006c94:	20001298 	.word	0x20001298
 8006c98:	200013a4 	.word	0x200013a4
 8006c9c:	20001164 	.word	0x20001164

08006ca0 <remoteBootloaderUpdate>:
{
 8006ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	0007      	movs	r7, r0
 8006ca6:	000e      	movs	r6, r1
 8006ca8:	9205      	str	r2, [sp, #20]
 8006caa:	001d      	movs	r5, r3
	myOutport = FindRoute(myID, dst);
 8006cac:	4b37      	ldr	r3, [pc, #220]	; (8006d8c <remoteBootloaderUpdate+0xec>)
 8006cae:	7818      	ldrb	r0, [r3, #0]
 8006cb0:	f7fe ffa4 	bl	8005bfc <FindRoute>
 8006cb4:	9004      	str	r0, [sp, #16]
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	d020      	beq.n	8006cfc <remoteBootloaderUpdate+0x5c>
 8006cba:	4b34      	ldr	r3, [pc, #208]	; (8006d8c <remoteBootloaderUpdate+0xec>)
 8006cbc:	781c      	ldrb	r4, [r3, #0]
 8006cbe:	42b4      	cmp	r4, r6
 8006cc0:	d060      	beq.n	8006d84 <remoteBootloaderUpdate+0xe4>
	if (src == myID)
 8006cc2:	42bc      	cmp	r4, r7
 8006cc4:	d033      	beq.n	8006d2e <remoteBootloaderUpdate+0x8e>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8006cc6:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8006cc8:	9805      	ldr	r0, [sp, #20]
 8006cca:	f7fe f891 	bl	8004df0 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8006cce:	9804      	ldr	r0, [sp, #16]
 8006cd0:	f7fe f88e 	bl	8004df0 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 8006cd4:	4b2d      	ldr	r3, [pc, #180]	; (8006d8c <remoteBootloaderUpdate+0xec>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	42a3      	cmp	r3, r4
 8006cda:	d047      	beq.n	8006d6c <remoteBootloaderUpdate+0xcc>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 8006cdc:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <remoteBootloaderUpdate+0xec>)
 8006cde:	7819      	ldrb	r1, [r3, #0]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9303      	str	r3, [sp, #12]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	9302      	str	r3, [sp, #8]
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	3303      	adds	r3, #3
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	000b      	movs	r3, r1
 8006cf0:	9a04      	ldr	r2, [sp, #16]
 8006cf2:	9805      	ldr	r0, [sp, #20]
 8006cf4:	f7ff ff06 	bl	8006b04 <StartScastDMAStream>
}
 8006cf8:	b007      	add	sp, #28
 8006cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 8006cfc:	4b24      	ldr	r3, [pc, #144]	; (8006d90 <remoteBootloaderUpdate+0xf0>)
 8006cfe:	199b      	adds	r3, r3, r6
 8006d00:	3b01      	subs	r3, #1
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	2a01      	cmp	r2, #1
 8006d06:	d00f      	beq.n	8006d28 <remoteBootloaderUpdate+0x88>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 8006d08:	4b22      	ldr	r3, [pc, #136]	; (8006d94 <remoteBootloaderUpdate+0xf4>)
 8006d0a:	189b      	adds	r3, r3, r2
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	781c      	ldrb	r4, [r3, #0]
	if (src == myID)
 8006d10:	4b1e      	ldr	r3, [pc, #120]	; (8006d8c <remoteBootloaderUpdate+0xec>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	42bb      	cmp	r3, r7
 8006d16:	d1d7      	bne.n	8006cc8 <remoteBootloaderUpdate+0x28>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8006d18:	f007 feea 	bl	800eaf0 <FreeRTOS_CLIGetOutputBuffer>
 8006d1c:	0007      	movs	r7, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 8006d1e:	0032      	movs	r2, r6
 8006d20:	491d      	ldr	r1, [pc, #116]	; (8006d98 <remoteBootloaderUpdate+0xf8>)
 8006d22:	f00d fcf5 	bl	8014710 <sprintf>
 8006d26:	e00c      	b.n	8006d42 <remoteBootloaderUpdate+0xa2>
			lastModule = myID;
 8006d28:	4b18      	ldr	r3, [pc, #96]	; (8006d8c <remoteBootloaderUpdate+0xec>)
 8006d2a:	781c      	ldrb	r4, [r3, #0]
 8006d2c:	e7f0      	b.n	8006d10 <remoteBootloaderUpdate+0x70>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8006d2e:	f007 fedf 	bl	800eaf0 <FreeRTOS_CLIGetOutputBuffer>
 8006d32:	0007      	movs	r7, r0
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 8006d34:	2400      	movs	r4, #0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 8006d36:	002b      	movs	r3, r5
 8006d38:	0032      	movs	r2, r6
 8006d3a:	4918      	ldr	r1, [pc, #96]	; (8006d9c <remoteBootloaderUpdate+0xfc>)
 8006d3c:	0038      	movs	r0, r7
 8006d3e:	f00d fce7 	bl	8014710 <sprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 8006d42:	0038      	movs	r0, r7
 8006d44:	f7f9 f9e8 	bl	8000118 <strlen>
 8006d48:	1838      	adds	r0, r7, r0
 8006d4a:	22fb      	movs	r2, #251	; 0xfb
 8006d4c:	4914      	ldr	r1, [pc, #80]	; (8006da0 <remoteBootloaderUpdate+0x100>)
 8006d4e:	f00d faaa 	bl	80142a6 <memcpy>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 8006d52:	0038      	movs	r0, r7
 8006d54:	f7f9 f9e0 	bl	8000118 <strlen>
 8006d58:	b282      	uxth	r2, r0
 8006d5a:	2332      	movs	r3, #50	; 0x32
 8006d5c:	0039      	movs	r1, r7
 8006d5e:	9805      	ldr	r0, [sp, #20]
 8006d60:	f007 f90e 	bl	800df80 <writePxITMutex>
		Delay_ms(100);
 8006d64:	2064      	movs	r0, #100	; 0x64
 8006d66:	f009 fdd9 	bl	801091c <HAL_Delay>
 8006d6a:	e7ad      	b.n	8006cc8 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport), REVERSED);
 8006d6c:	9804      	ldr	r0, [sp, #16]
 8006d6e:	f7fd fe33 	bl	80049d8 <GetUart>
 8006d72:	2101      	movs	r1, #1
 8006d74:	f7fe ff0a 	bl	8005b8c <SwapUartPins>
 8006d78:	e7b0      	b.n	8006cdc <remoteBootloaderUpdate+0x3c>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8006d7a:	f007 feb9 	bl	800eaf0 <FreeRTOS_CLIGetOutputBuffer>
 8006d7e:	0007      	movs	r7, r0
		myOutport = outport;
 8006d80:	9504      	str	r5, [sp, #16]
 8006d82:	e7d8      	b.n	8006d36 <remoteBootloaderUpdate+0x96>
	if (src == myID)
 8006d84:	42bc      	cmp	r4, r7
 8006d86:	d0f8      	beq.n	8006d7a <remoteBootloaderUpdate+0xda>
		myOutport = outport;
 8006d88:	9504      	str	r5, [sp, #16]
 8006d8a:	e79d      	b.n	8006cc8 <remoteBootloaderUpdate+0x28>
 8006d8c:	20001298 	.word	0x20001298
 8006d90:	200013c0 	.word	0x200013c0
 8006d94:	200013a4 	.word	0x200013a4
 8006d98:	08019bbc 	.word	0x08019bbc
 8006d9c:	08019a84 	.word	0x08019a84
 8006da0:	08019ac0 	.word	0x08019ac0

08006da4 <bootloaderUpdateCommand>:
{
 8006da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da6:	b085      	sub	sp, #20
 8006da8:	1e04      	subs	r4, r0, #0
 8006daa:	9203      	str	r2, [sp, #12]
	configASSERT( pcWriteBuffer );
 8006dac:	d101      	bne.n	8006db2 <bootloaderUpdateCommand+0xe>
 8006dae:	b672      	cpsid	i
 8006db0:	e7fe      	b.n	8006db0 <bootloaderUpdateCommand+0xc>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006db2:	4a47      	ldr	r2, [pc, #284]	; (8006ed0 <bootloaderUpdateCommand+0x12c>)
 8006db4:	2101      	movs	r1, #1
 8006db6:	9803      	ldr	r0, [sp, #12]
 8006db8:	f007 fe9e 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d040      	beq.n	8006e42 <bootloaderUpdateCommand+0x9e>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 8006dc0:	4b43      	ldr	r3, [pc, #268]	; (8006ed0 <bootloaderUpdateCommand+0x12c>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	4943      	ldr	r1, [pc, #268]	; (8006ed4 <bootloaderUpdateCommand+0x130>)
 8006dc6:	f00d fce7 	bl	8014798 <strncmp>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d000      	beq.n	8006dd0 <bootloaderUpdateCommand+0x2c>
 8006dce:	e078      	b.n	8006ec2 <bootloaderUpdateCommand+0x11e>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006dd0:	4a41      	ldr	r2, [pc, #260]	; (8006ed8 <bootloaderUpdateCommand+0x134>)
 8006dd2:	2102      	movs	r1, #2
 8006dd4:	9803      	ldr	r0, [sp, #12]
 8006dd6:	f007 fe8f 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 8006dda:	4f40      	ldr	r7, [pc, #256]	; (8006edc <bootloaderUpdateCommand+0x138>)
 8006ddc:	6038      	str	r0, [r7, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006dde:	4a40      	ldr	r2, [pc, #256]	; (8006ee0 <bootloaderUpdateCommand+0x13c>)
 8006de0:	2103      	movs	r1, #3
 8006de2:	9803      	ldr	r0, [sp, #12]
 8006de4:	f007 fe88 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 8006de8:	4b3e      	ldr	r3, [pc, #248]	; (8006ee4 <bootloaderUpdateCommand+0x140>)
 8006dea:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 8006dec:	6838      	ldr	r0, [r7, #0]
 8006dee:	2300      	movs	r3, #0
 8006df0:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 8006df2:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 8006df4:	2b23      	cmp	r3, #35	; 0x23
 8006df6:	d046      	beq.n	8006e86 <bootloaderUpdateCommand+0xe2>
			if (pcParameterString3[0] == 'p') {
 8006df8:	4b3a      	ldr	r3, [pc, #232]	; (8006ee4 <bootloaderUpdateCommand+0x140>)
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	56c3      	ldrsb	r3, [r0, r3]
 8006e00:	2b70      	cmp	r3, #112	; 0x70
 8006e02:	d046      	beq.n	8006e92 <bootloaderUpdateCommand+0xee>
				result = BOS_ERR_WrongValue;		
 8006e04:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 8006e06:	4b38      	ldr	r3, [pc, #224]	; (8006ee8 <bootloaderUpdateCommand+0x144>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	42b3      	cmp	r3, r6
 8006e0c:	d046      	beq.n	8006e9c <bootloaderUpdateCommand+0xf8>
				BOS.response = BOS_RESPONSE_NONE;							
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <bootloaderUpdateCommand+0x148>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 8006e14:	4b36      	ldr	r3, [pc, #216]	; (8006ef0 <bootloaderUpdateCommand+0x14c>)
 8006e16:	701d      	strb	r5, [r3, #0]
 8006e18:	3201      	adds	r2, #1
 8006e1a:	211a      	movs	r1, #26
 8006e1c:	0030      	movs	r0, r6
 8006e1e:	f7fe ffdd 	bl	8005ddc <SendMessageToModule>
				osDelay(100);			
 8006e22:	2064      	movs	r0, #100	; 0x64
 8006e24:	f007 fd4f 	bl	800e8c6 <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 8006e28:	4b32      	ldr	r3, [pc, #200]	; (8006ef4 <bootloaderUpdateCommand+0x150>)
 8006e2a:	781a      	ldrb	r2, [r3, #0]
 8006e2c:	4b2e      	ldr	r3, [pc, #184]	; (8006ee8 <bootloaderUpdateCommand+0x144>)
 8006e2e:	7818      	ldrb	r0, [r3, #0]
 8006e30:	002b      	movs	r3, r5
 8006e32:	0031      	movs	r1, r6
 8006e34:	f7ff ff34 	bl	8006ca0 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8006e38:	2f68      	cmp	r7, #104	; 0x68
 8006e3a:	d042      	beq.n	8006ec2 <bootloaderUpdateCommand+0x11e>
}
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	b005      	add	sp, #20
 8006e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 8006e42:	4b29      	ldr	r3, [pc, #164]	; (8006ee8 <bootloaderUpdateCommand+0x144>)
 8006e44:	781a      	ldrb	r2, [r3, #0]
 8006e46:	492c      	ldr	r1, [pc, #176]	; (8006ef8 <bootloaderUpdateCommand+0x154>)
 8006e48:	0020      	movs	r0, r4
 8006e4a:	f00d fc61 	bl	8014710 <sprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 8006e4e:	492b      	ldr	r1, [pc, #172]	; (8006efc <bootloaderUpdateCommand+0x158>)
 8006e50:	0020      	movs	r0, r4
 8006e52:	f00d fc7d 	bl	8014750 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006e56:	0020      	movs	r0, r4
 8006e58:	f7f9 f95e 	bl	8000118 <strlen>
 8006e5c:	b282      	uxth	r2, r0
 8006e5e:	4b25      	ldr	r3, [pc, #148]	; (8006ef4 <bootloaderUpdateCommand+0x150>)
 8006e60:	7818      	ldrb	r0, [r3, #0]
 8006e62:	2301      	movs	r3, #1
 8006e64:	425b      	negs	r3, r3
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	3333      	adds	r3, #51	; 0x33
 8006e6a:	0021      	movs	r1, r4
 8006e6c:	f007 f85e 	bl	800df2c <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8006e70:	4b23      	ldr	r3, [pc, #140]	; (8006f00 <bootloaderUpdateCommand+0x15c>)
 8006e72:	4a24      	ldr	r2, [pc, #144]	; (8006f04 <bootloaderUpdateCommand+0x160>)
 8006e74:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 8006e76:	4b24      	ldr	r3, [pc, #144]	; (8006f08 <bootloaderUpdateCommand+0x164>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006e7c:	200a      	movs	r0, #10
 8006e7e:	f007 fd22 	bl	800e8c6 <osDelay>
		NVIC_SystemReset();						
 8006e82:	f7fc f941 	bl	8003108 <NVIC_SystemReset>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006e86:	3001      	adds	r0, #1
 8006e88:	f00c ff83 	bl	8013d92 <atol>
 8006e8c:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 8006e8e:	2700      	movs	r7, #0
 8006e90:	e7b2      	b.n	8006df8 <bootloaderUpdateCommand+0x54>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8006e92:	3001      	adds	r0, #1
 8006e94:	f00c ff7d 	bl	8013d92 <atol>
 8006e98:	b2c5      	uxtb	r5, r0
 8006e9a:	e7b4      	b.n	8006e06 <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	9100      	str	r1, [sp, #0]
 8006ea0:	2319      	movs	r3, #25
 8006ea2:	000a      	movs	r2, r1
 8006ea4:	0028      	movs	r0, r5
 8006ea6:	f7fe f939 	bl	800511c <SendMessageFromPort>
				osDelay(100);
 8006eaa:	2064      	movs	r0, #100	; 0x64
 8006eac:	f007 fd0b 	bl	800e8c6 <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 8006eb0:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <bootloaderUpdateCommand+0x144>)
 8006eb2:	7818      	ldrb	r0, [r3, #0]
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <bootloaderUpdateCommand+0x150>)
 8006eb6:	781a      	ldrb	r2, [r3, #0]
 8006eb8:	002b      	movs	r3, r5
 8006eba:	0001      	movs	r1, r0
 8006ebc:	f7ff fef0 	bl	8006ca0 <remoteBootloaderUpdate>
 8006ec0:	e7ba      	b.n	8006e38 <bootloaderUpdateCommand+0x94>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 8006ec2:	220f      	movs	r2, #15
 8006ec4:	4911      	ldr	r1, [pc, #68]	; (8006f0c <bootloaderUpdateCommand+0x168>)
 8006ec6:	0020      	movs	r0, r4
 8006ec8:	f00d f9ed 	bl	80142a6 <memcpy>
 8006ecc:	e7b6      	b.n	8006e3c <bootloaderUpdateCommand+0x98>
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	20001400 	.word	0x20001400
 8006ed4:	080192f8 	.word	0x080192f8
 8006ed8:	2000140c 	.word	0x2000140c
 8006edc:	200012e0 	.word	0x200012e0
 8006ee0:	20001410 	.word	0x20001410
 8006ee4:	200012e8 	.word	0x200012e8
 8006ee8:	20001298 	.word	0x20001298
 8006eec:	20006a10 	.word	0x20006a10
 8006ef0:	20001164 	.word	0x20001164
 8006ef4:	20000abf 	.word	0x20000abf
 8006ef8:	080191f4 	.word	0x080191f4
 8006efc:	08019214 	.word	0x08019214
 8006f00:	20007ff0 	.word	0x20007ff0
 8006f04:	deadbeef 	.word	0xdeadbeef
 8006f08:	2000100a 	.word	0x2000100a
 8006f0c:	080193b8 	.word	0x080193b8

08006f10 <PxMessagingTask>:
{
 8006f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f12:	46de      	mov	lr, fp
 8006f14:	4657      	mov	r7, sl
 8006f16:	464e      	mov	r6, r9
 8006f18:	4645      	mov	r5, r8
 8006f1a:	b5e0      	push	{r5, r6, r7, lr}
 8006f1c:	b095      	sub	sp, #84	; 0x54
	port = (int8_t)(unsigned) argument;
 8006f1e:	b2c3      	uxtb	r3, r0
 8006f20:	9307      	str	r3, [sp, #28]
 8006f22:	23ff      	movs	r3, #255	; 0xff
 8006f24:	4003      	ands	r3, r0
 8006f26:	4698      	mov	r8, r3
		if (messageLength[port-1])
 8006f28:	1e5c      	subs	r4, r3, #1
 8006f2a:	00e3      	lsls	r3, r4, #3
 8006f2c:	1b1b      	subs	r3, r3, r4
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	9309      	str	r3, [sp, #36]	; 0x24
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8006f32:	4ad9      	ldr	r2, [pc, #868]	; (8007298 <PxMessagingTask+0x388>)
 8006f34:	18d3      	adds	r3, r2, r3
 8006f36:	9305      	str	r3, [sp, #20]
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f3c:	4699      	mov	r9, r3
			if (cMessage[port-1][2]>>7) {
 8006f3e:	00e6      	lsls	r6, r4, #3
 8006f40:	1b36      	subs	r6, r6, r4
 8006f42:	00f6      	lsls	r6, r6, #3
 8006f44:	1993      	adds	r3, r2, r6
 8006f46:	3302      	adds	r3, #2
 8006f48:	469b      	mov	fp, r3
 8006f4a:	e025      	b.n	8006f98 <PxMessagingTask+0x88>
				longMessage = 1;
 8006f4c:	4ad3      	ldr	r2, [pc, #844]	; (800729c <PxMessagingTask+0x38c>)
 8006f4e:	2001      	movs	r0, #1
 8006f50:	7010      	strb	r0, [r2, #0]
 8006f52:	e032      	b.n	8006fba <PxMessagingTask+0xaa>
				code = cMessage[port-1][3+shift];
 8006f54:	4bd0      	ldr	r3, [pc, #832]	; (8007298 <PxMessagingTask+0x388>)
 8006f56:	199b      	adds	r3, r3, r6
 8006f58:	189a      	adds	r2, r3, r2
 8006f5a:	78d7      	ldrb	r7, [r2, #3]
 8006f5c:	e048      	b.n	8006ff0 <PxMessagingTask+0xe0>
					if (code == CODE_UPDATE) {		// Remote bootloader update
 8006f5e:	2f19      	cmp	r7, #25
 8006f60:	d062      	beq.n	8007028 <PxMessagingTask+0x118>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8006f62:	2f1a      	cmp	r7, #26
 8006f64:	d06a      	beq.n	800703c <PxMessagingTask+0x12c>
		if (result == BOS_ERR_UnknownMessage) {
 8006f66:	464b      	mov	r3, r9
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <PxMessagingTask+0x60>
 8006f6c:	f001 fa40 	bl	80083f0 <PxMessagingTask+0x14e0>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8006f70:	4dcb      	ldr	r5, [pc, #812]	; (80072a0 <PxMessagingTask+0x390>)
 8006f72:	5d2a      	ldrb	r2, [r5, r4]
 8006f74:	2100      	movs	r1, #0
 8006f76:	9805      	ldr	r0, [sp, #20]
 8006f78:	f00d f99e 	bl	80142b8 <memset>
		messageLength[port-1] = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	552b      	strb	r3, [r5, r4]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 8006f80:	4bc8      	ldr	r3, [pc, #800]	; (80072a4 <PxMessagingTask+0x394>)
 8006f82:	4642      	mov	r2, r8
 8006f84:	5c9b      	ldrb	r3, [r3, r2]
 8006f86:	3b02      	subs	r3, #2
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d903      	bls.n	8006f94 <PxMessagingTask+0x84>
			portStatus[port] = FREE;
 8006f8c:	4bc5      	ldr	r3, [pc, #788]	; (80072a4 <PxMessagingTask+0x394>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4641      	mov	r1, r8
 8006f92:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8006f94:	f009 fb44 	bl	8010620 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006f98:	2101      	movs	r1, #1
 8006f9a:	4249      	negs	r1, r1
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f009 f865 	bl	801006c <ulTaskNotifyTake>
		if (messageLength[port-1])
 8006fa2:	4bbf      	ldr	r3, [pc, #764]	; (80072a0 <PxMessagingTask+0x390>)
 8006fa4:	5d19      	ldrb	r1, [r3, r4]
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	d0dd      	beq.n	8006f66 <PxMessagingTask+0x56>
			if (cMessage[port-1][2]>>7) {
 8006faa:	465b      	mov	r3, fp
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b25a      	sxtb	r2, r3
 8006fb0:	2a00      	cmp	r2, #0
 8006fb2:	dbcb      	blt.n	8006f4c <PxMessagingTask+0x3c>
				longMessage = 0;
 8006fb4:	4ab9      	ldr	r2, [pc, #740]	; (800729c <PxMessagingTask+0x38c>)
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	7010      	strb	r0, [r2, #0]
			dst = cMessage[port-1][0]; 
 8006fba:	4ab7      	ldr	r2, [pc, #732]	; (8007298 <PxMessagingTask+0x388>)
 8006fbc:	5cb0      	ldrb	r0, [r6, r2]
 8006fbe:	4682      	mov	sl, r0
			src = cMessage[port-1][1];	
 8006fc0:	1992      	adds	r2, r2, r6
 8006fc2:	7852      	ldrb	r2, [r2, #1]
 8006fc4:	9206      	str	r2, [sp, #24]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	401a      	ands	r2, r3
			shift = 0;
 8006fca:	0015      	movs	r5, r2
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8006fcc:	4fb6      	ldr	r7, [pc, #728]	; (80072a8 <PxMessagingTask+0x398>)
 8006fce:	0718      	lsls	r0, r3, #28
 8006fd0:	0f80      	lsrs	r0, r0, #30
 8006fd2:	71f8      	strb	r0, [r7, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 8006fd4:	2060      	movs	r0, #96	; 0x60
 8006fd6:	4018      	ands	r0, r3
 8006fd8:	71b8      	strb	r0, [r7, #6]
			if (extendCode == true) {		
 8006fda:	079b      	lsls	r3, r3, #30
 8006fdc:	d5ba      	bpl.n	8006f54 <PxMessagingTask+0x44>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8006fde:	4bae      	ldr	r3, [pc, #696]	; (8007298 <PxMessagingTask+0x388>)
 8006fe0:	199b      	adds	r3, r3, r6
 8006fe2:	189b      	adds	r3, r3, r2
 8006fe4:	7918      	ldrb	r0, [r3, #4]
 8006fe6:	0200      	lsls	r0, r0, #8
 8006fe8:	78df      	ldrb	r7, [r3, #3]
 8006fea:	183f      	adds	r7, r7, r0
 8006fec:	b2bf      	uxth	r7, r7
				++shift;
 8006fee:	1c55      	adds	r5, r2, #1
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8006ff0:	4653      	mov	r3, sl
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2bfc      	cmp	r3, #252	; 0xfc
 8006ff8:	d901      	bls.n	8006ffe <PxMessagingTask+0xee>
 8006ffa:	f001 fa10 	bl	800841e <PxMessagingTask+0x150e>
 8006ffe:	4bab      	ldr	r3, [pc, #684]	; (80072ac <PxMessagingTask+0x39c>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	4553      	cmp	r3, sl
 8007004:	d101      	bne.n	800700a <PxMessagingTask+0xfa>
 8007006:	f001 fa0a 	bl	800841e <PxMessagingTask+0x150e>
 800700a:	2b01      	cmp	r3, #1
 800700c:	d101      	bne.n	8007012 <PxMessagingTask+0x102>
 800700e:	f001 fa00 	bl	8008412 <PxMessagingTask+0x1502>
				ForwardReceivedMessage(port);
 8007012:	9807      	ldr	r0, [sp, #28]
 8007014:	f7fe fec2 	bl	8005d9c <ForwardReceivedMessage>
				if (BOS.trace)
 8007018:	4ba3      	ldr	r3, [pc, #652]	; (80072a8 <PxMessagingTask+0x398>)
 800701a:	79db      	ldrb	r3, [r3, #7]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d09e      	beq.n	8006f5e <PxMessagingTask+0x4e>
					indMode = IND_SHORT_BLINK;
 8007020:	4ba3      	ldr	r3, [pc, #652]	; (80072b0 <PxMessagingTask+0x3a0>)
 8007022:	2203      	movs	r2, #3
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	e79a      	b.n	8006f5e <PxMessagingTask+0x4e>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 8007028:	2064      	movs	r0, #100	; 0x64
 800702a:	f009 fc77 	bl	801091c <HAL_Delay>
 800702e:	2300      	movs	r3, #0
 8007030:	9a07      	ldr	r2, [sp, #28]
 8007032:	4651      	mov	r1, sl
 8007034:	9806      	ldr	r0, [sp, #24]
 8007036:	f7ff fe33 	bl	8006ca0 <remoteBootloaderUpdate>
 800703a:	e794      	b.n	8006f66 <PxMessagingTask+0x56>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 800703c:	2064      	movs	r0, #100	; 0x64
 800703e:	f009 fc6d 	bl	801091c <HAL_Delay>
 8007042:	4b95      	ldr	r3, [pc, #596]	; (8007298 <PxMessagingTask+0x388>)
 8007044:	199b      	adds	r3, r3, r6
 8007046:	5d5b      	ldrb	r3, [r3, r5]
 8007048:	9a07      	ldr	r2, [sp, #28]
 800704a:	4651      	mov	r1, sl
 800704c:	9806      	ldr	r0, [sp, #24]
 800704e:	f7ff fe27 	bl	8006ca0 <remoteBootloaderUpdate>
 8007052:	e788      	b.n	8006f66 <PxMessagingTask+0x56>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8007054:	4b90      	ldr	r3, [pc, #576]	; (8007298 <PxMessagingTask+0x388>)
 8007056:	199b      	adds	r3, r3, r6
 8007058:	1859      	adds	r1, r3, r1
 800705a:	3901      	subs	r1, #1
 800705c:	780b      	ldrb	r3, [r1, #0]
 800705e:	4a95      	ldr	r2, [pc, #596]	; (80072b4 <PxMessagingTask+0x3a4>)
 8007060:	7812      	ldrb	r2, [r2, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d113      	bne.n	800708e <PxMessagingTask+0x17e>
					result = BOS_ERR_MSG_Reflection;
 8007066:	2303      	movs	r3, #3
 8007068:	4699      	mov	r9, r3
				if (result == BOS_OK)
 800706a:	464b      	mov	r3, r9
 800706c:	2b00      	cmp	r3, #0
 800706e:	d000      	beq.n	8007072 <PxMessagingTask+0x162>
 8007070:	e779      	b.n	8006f66 <PxMessagingTask+0x56>
				shift += 4;
 8007072:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 8007074:	4b8a      	ldr	r3, [pc, #552]	; (80072a0 <PxMessagingTask+0x390>)
 8007076:	5d19      	ldrb	r1, [r3, r4]
 8007078:	1b4a      	subs	r2, r1, r5
 800707a:	b2d3      	uxtb	r3, r2
 800707c:	4699      	mov	r9, r3
					switch (code)
 800707e:	2f23      	cmp	r7, #35	; 0x23
 8007080:	d901      	bls.n	8007086 <PxMessagingTask+0x176>
 8007082:	f001 f993 	bl	80083ac <PxMessagingTask+0x149c>
 8007086:	00bb      	lsls	r3, r7, #2
 8007088:	4a8b      	ldr	r2, [pc, #556]	; (80072b8 <PxMessagingTask+0x3a8>)
 800708a:	58d3      	ldr	r3, [r2, r3]
 800708c:	469f      	mov	pc, r3
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 800708e:	4a89      	ldr	r2, [pc, #548]	; (80072b4 <PxMessagingTask+0x3a4>)
 8007090:	7013      	strb	r3, [r2, #0]
 8007092:	4a8a      	ldr	r2, [pc, #552]	; (80072bc <PxMessagingTask+0x3ac>)
 8007094:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8007096:	9907      	ldr	r1, [sp, #28]
 8007098:	20ff      	movs	r0, #255	; 0xff
 800709a:	f7fe f9f7 	bl	800548c <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 800709e:	4b80      	ldr	r3, [pc, #512]	; (80072a0 <PxMessagingTask+0x390>)
 80070a0:	5d1a      	ldrb	r2, [r3, r4]
 80070a2:	4b7d      	ldr	r3, [pc, #500]	; (8007298 <PxMessagingTask+0x388>)
 80070a4:	199b      	adds	r3, r3, r6
 80070a6:	189b      	adds	r3, r3, r2
 80070a8:	3b01      	subs	r3, #1
 80070aa:	2200      	movs	r2, #0
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e7dc      	b.n	800706a <PxMessagingTask+0x15a>
							for (p=0 ; p<numOfParams ; p++) 
 80070b0:	464b      	mov	r3, r9
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d020      	beq.n	80070f8 <PxMessagingTask+0x1e8>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 80070b6:	9b06      	ldr	r3, [sp, #24]
 80070b8:	1e58      	subs	r0, r3, #1
 80070ba:	0042      	lsls	r2, r0, #1
 80070bc:	4b80      	ldr	r3, [pc, #512]	; (80072c0 <PxMessagingTask+0x3b0>)
 80070be:	5ad3      	ldrh	r3, [r2, r3]
 80070c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80070c2:	19e9      	adds	r1, r5, r7
 80070c4:	4a74      	ldr	r2, [pc, #464]	; (8007298 <PxMessagingTask+0x388>)
 80070c6:	1889      	adds	r1, r1, r2
 80070c8:	3201      	adds	r2, #1
 80070ca:	46bc      	mov	ip, r7
 80070cc:	4462      	add	r2, ip
 80070ce:	1955      	adds	r5, r2, r5
 80070d0:	464a      	mov	r2, r9
 80070d2:	3a01      	subs	r2, #1
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	18ad      	adds	r5, r5, r2
 80070d8:	2780      	movs	r7, #128	; 0x80
 80070da:	023f      	lsls	r7, r7, #8
 80070dc:	4684      	mov	ip, r0
 80070de:	780a      	ldrb	r2, [r1, #0]
 80070e0:	3a01      	subs	r2, #1
 80070e2:	0038      	movs	r0, r7
 80070e4:	4110      	asrs	r0, r2
 80070e6:	4303      	orrs	r3, r0
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3101      	adds	r1, #1
							for (p=0 ; p<numOfParams ; p++) 
 80070ec:	42a9      	cmp	r1, r5
 80070ee:	d1f6      	bne.n	80070de <PxMessagingTask+0x1ce>
 80070f0:	4660      	mov	r0, ip
 80070f2:	0040      	lsls	r0, r0, #1
 80070f4:	4a72      	ldr	r2, [pc, #456]	; (80072c0 <PxMessagingTask+0x3b0>)
 80070f6:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 80070f8:	4b72      	ldr	r3, [pc, #456]	; (80072c4 <PxMessagingTask+0x3b4>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
							break;		
 80070fe:	2300      	movs	r3, #0
 8007100:	4699      	mov	r9, r3
 8007102:	e735      	b.n	8006f70 <PxMessagingTask+0x60>
							indMode = IND_PING;	osDelay(10);
 8007104:	4b6a      	ldr	r3, [pc, #424]	; (80072b0 <PxMessagingTask+0x3a0>)
 8007106:	2201      	movs	r2, #1
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	200a      	movs	r0, #10
 800710c:	f007 fbdb 	bl	800e8c6 <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8007110:	4b65      	ldr	r3, [pc, #404]	; (80072a8 <PxMessagingTask+0x398>)
 8007112:	799b      	ldrb	r3, [r3, #6]
 8007114:	2240      	movs	r2, #64	; 0x40
 8007116:	4393      	bics	r3, r2
 8007118:	2200      	movs	r2, #0
 800711a:	4691      	mov	r9, r2
 800711c:	2b20      	cmp	r3, #32
 800711e:	d000      	beq.n	8007122 <PxMessagingTask+0x212>
 8007120:	e726      	b.n	8006f70 <PxMessagingTask+0x60>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 8007122:	2102      	movs	r1, #2
 8007124:	9806      	ldr	r0, [sp, #24]
 8007126:	f7fe fe59 	bl	8005ddc <SendMessageToModule>
 800712a:	e721      	b.n	8006f70 <PxMessagingTask+0x60>
							if (!moduleAlias[myID][0])
 800712c:	4b5f      	ldr	r3, [pc, #380]	; (80072ac <PxMessagingTask+0x39c>)
 800712e:	781a      	ldrb	r2, [r3, #0]
 8007130:	0093      	lsls	r3, r2, #2
 8007132:	189b      	adds	r3, r3, r2
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4a64      	ldr	r2, [pc, #400]	; (80072c8 <PxMessagingTask+0x3b8>)
 8007138:	5c9b      	ldrb	r3, [r3, r2]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d118      	bne.n	8007170 <PxMessagingTask+0x260>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 800713e:	9a06      	ldr	r2, [sp, #24]
 8007140:	4962      	ldr	r1, [pc, #392]	; (80072cc <PxMessagingTask+0x3bc>)
 8007142:	4863      	ldr	r0, [pc, #396]	; (80072d0 <PxMessagingTask+0x3c0>)
 8007144:	f00d fae4 	bl	8014710 <sprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8007148:	4d61      	ldr	r5, [pc, #388]	; (80072d0 <PxMessagingTask+0x3c0>)
 800714a:	0028      	movs	r0, r5
 800714c:	f7f8 ffe4 	bl	8000118 <strlen>
 8007150:	b282      	uxth	r2, r0
 8007152:	4b60      	ldr	r3, [pc, #384]	; (80072d4 <PxMessagingTask+0x3c4>)
 8007154:	7818      	ldrb	r0, [r3, #0]
 8007156:	2301      	movs	r3, #1
 8007158:	425b      	negs	r3, r3
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	3333      	adds	r3, #51	; 0x33
 800715e:	0029      	movs	r1, r5
 8007160:	f006 fee4 	bl	800df2c <writePxMutex>
							responseStatus = BOS_OK;								
 8007164:	4b57      	ldr	r3, [pc, #348]	; (80072c4 <PxMessagingTask+0x3b4>)
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
							break;
 800716a:	2300      	movs	r3, #0
 800716c:	4699      	mov	r9, r3
 800716e:	e6ff      	b.n	8006f70 <PxMessagingTask+0x60>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8007170:	230a      	movs	r3, #10
 8007172:	9906      	ldr	r1, [sp, #24]
 8007174:	434b      	muls	r3, r1
 8007176:	4a54      	ldr	r2, [pc, #336]	; (80072c8 <PxMessagingTask+0x3b8>)
 8007178:	189b      	adds	r3, r3, r2
 800717a:	000a      	movs	r2, r1
 800717c:	4956      	ldr	r1, [pc, #344]	; (80072d8 <PxMessagingTask+0x3c8>)
 800717e:	4854      	ldr	r0, [pc, #336]	; (80072d0 <PxMessagingTask+0x3c0>)
 8007180:	f00d fac6 	bl	8014710 <sprintf>
 8007184:	e7e0      	b.n	8007148 <PxMessagingTask+0x238>
							IND_ON();
 8007186:	2180      	movs	r1, #128	; 0x80
 8007188:	2090      	movs	r0, #144	; 0x90
 800718a:	2201      	movs	r2, #1
 800718c:	0109      	lsls	r1, r1, #4
 800718e:	05c0      	lsls	r0, r0, #23
 8007190:	f00a fc90 	bl	8011ab4 <HAL_GPIO_WritePin>
							break;
 8007194:	2300      	movs	r3, #0
 8007196:	4699      	mov	r9, r3
 8007198:	e6ea      	b.n	8006f70 <PxMessagingTask+0x60>
							IND_OFF();
 800719a:	2180      	movs	r1, #128	; 0x80
 800719c:	2090      	movs	r0, #144	; 0x90
 800719e:	2200      	movs	r2, #0
 80071a0:	0109      	lsls	r1, r1, #4
 80071a2:	05c0      	lsls	r0, r0, #23
 80071a4:	f00a fc86 	bl	8011ab4 <HAL_GPIO_WritePin>
							break;
 80071a8:	2300      	movs	r3, #0
 80071aa:	4699      	mov	r9, r3
 80071ac:	e6e0      	b.n	8006f70 <PxMessagingTask+0x60>
							IND_toggle();
 80071ae:	2180      	movs	r1, #128	; 0x80
 80071b0:	2090      	movs	r0, #144	; 0x90
 80071b2:	0109      	lsls	r1, r1, #4
 80071b4:	05c0      	lsls	r0, r0, #23
 80071b6:	f00a fc83 	bl	8011ac0 <HAL_GPIO_TogglePin>
							break;
 80071ba:	2300      	movs	r3, #0
 80071bc:	4699      	mov	r9, r3
 80071be:	e6d7      	b.n	8006f70 <PxMessagingTask+0x60>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 80071c0:	4f46      	ldr	r7, [pc, #280]	; (80072dc <PxMessagingTask+0x3cc>)
 80071c2:	00a3      	lsls	r3, r4, #2
 80071c4:	4a34      	ldr	r2, [pc, #208]	; (8007298 <PxMessagingTask+0x388>)
 80071c6:	1992      	adds	r2, r2, r6
 80071c8:	1950      	adds	r0, r2, r5
 80071ca:	7881      	ldrb	r1, [r0, #2]
 80071cc:	468c      	mov	ip, r1
 80071ce:	9906      	ldr	r1, [sp, #24]
 80071d0:	0209      	lsls	r1, r1, #8
 80071d2:	4461      	add	r1, ip
 80071d4:	53d9      	strh	r1, [r3, r7]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 80071d6:	18fb      	adds	r3, r7, r3
 80071d8:	5d51      	ldrb	r1, [r2, r5]
 80071da:	0209      	lsls	r1, r1, #8
 80071dc:	7842      	ldrb	r2, [r0, #1]
 80071de:	1852      	adds	r2, r2, r1
 80071e0:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 80071e2:	4b3f      	ldr	r3, [pc, #252]	; (80072e0 <PxMessagingTask+0x3d0>)
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	4a3f      	ldr	r2, [pc, #252]	; (80072e4 <PxMessagingTask+0x3d4>)
 80071e8:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 80071ee:	9d07      	ldr	r5, [sp, #28]
 80071f0:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 80071f2:	2002      	movs	r0, #2
 80071f4:	f007 fb67 	bl	800e8c6 <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 80071f8:	2303      	movs	r3, #3
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	3308      	adds	r3, #8
 80071fe:	2200      	movs	r2, #0
 8007200:	2100      	movs	r1, #0
 8007202:	0028      	movs	r0, r5
 8007204:	f7fd ff8a 	bl	800511c <SendMessageFromPort>
							break;
 8007208:	2300      	movs	r3, #0
 800720a:	4699      	mov	r9, r3
 800720c:	e6b0      	b.n	8006f70 <PxMessagingTask+0x60>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 800720e:	4f33      	ldr	r7, [pc, #204]	; (80072dc <PxMessagingTask+0x3cc>)
 8007210:	00a3      	lsls	r3, r4, #2
 8007212:	4a21      	ldr	r2, [pc, #132]	; (8007298 <PxMessagingTask+0x388>)
 8007214:	1992      	adds	r2, r2, r6
 8007216:	1950      	adds	r0, r2, r5
 8007218:	7881      	ldrb	r1, [r0, #2]
 800721a:	468c      	mov	ip, r1
 800721c:	9906      	ldr	r1, [sp, #24]
 800721e:	0209      	lsls	r1, r1, #8
 8007220:	4461      	add	r1, ip
 8007222:	53d9      	strh	r1, [r3, r7]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	5d51      	ldrb	r1, [r2, r5]
 8007228:	0209      	lsls	r1, r1, #8
 800722a:	7842      	ldrb	r2, [r0, #1]
 800722c:	1852      	adds	r2, r2, r1
 800722e:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8007230:	4b24      	ldr	r3, [pc, #144]	; (80072c4 <PxMessagingTask+0x3b4>)
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
							break;
 8007236:	2300      	movs	r3, #0
 8007238:	4699      	mov	r9, r3
 800723a:	e699      	b.n	8006f70 <PxMessagingTask+0x60>
							ExploreNeighbors(port);	indMode = IND_TOPOLOGY;
 800723c:	9807      	ldr	r0, [sp, #28]
 800723e:	f7fe f96d 	bl	800551c <ExploreNeighbors>
 8007242:	4b1b      	ldr	r3, [pc, #108]	; (80072b0 <PxMessagingTask+0x3a0>)
 8007244:	2202      	movs	r2, #2
 8007246:	701a      	strb	r2, [r3, #0]
							osDelay(10); temp = 0;
 8007248:	200a      	movs	r0, #10
 800724a:	f007 fb3c 	bl	800e8c6 <osDelay>
 800724e:	4d23      	ldr	r5, [pc, #140]	; (80072dc <PxMessagingTask+0x3cc>)
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 8007250:	2701      	movs	r7, #1
							osDelay(10); temp = 0;
 8007252:	2300      	movs	r3, #0
									messageParams[temp] = p;
 8007254:	46a1      	mov	r9, r4
 8007256:	001c      	movs	r4, r3
 8007258:	e004      	b.n	8007264 <PxMessagingTask+0x354>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++)  
 800725a:	3701      	adds	r7, #1
 800725c:	b2ff      	uxtb	r7, r7
 800725e:	3504      	adds	r5, #4
 8007260:	2f07      	cmp	r7, #7
 8007262:	d00e      	beq.n	8007282 <PxMessagingTask+0x372>
								if (neighbors[p-1][0])
 8007264:	882b      	ldrh	r3, [r5, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0f7      	beq.n	800725a <PxMessagingTask+0x34a>
									messageParams[temp] = p;
 800726a:	4b1e      	ldr	r3, [pc, #120]	; (80072e4 <PxMessagingTask+0x3d4>)
 800726c:	551f      	strb	r7, [r3, r4]
									memcpy(messageParams+temp+1, neighbors[p-1], (size_t)(4));
 800726e:	1c60      	adds	r0, r4, #1
 8007270:	469c      	mov	ip, r3
 8007272:	4460      	add	r0, ip
 8007274:	2204      	movs	r2, #4
 8007276:	0029      	movs	r1, r5
 8007278:	f00d f815 	bl	80142a6 <memcpy>
									temp += 5;		
 800727c:	3405      	adds	r4, #5
 800727e:	b2e4      	uxtb	r4, r4
 8007280:	e7eb      	b.n	800725a <PxMessagingTask+0x34a>
 8007282:	0023      	movs	r3, r4
 8007284:	9408      	str	r4, [sp, #32]
 8007286:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE, temp);
 8007288:	b29a      	uxth	r2, r3
 800728a:	210d      	movs	r1, #13
 800728c:	9806      	ldr	r0, [sp, #24]
 800728e:	f7fe fda5 	bl	8005ddc <SendMessageToModule>
							break;
 8007292:	2300      	movs	r3, #0
 8007294:	4699      	mov	r9, r3
 8007296:	e66b      	b.n	8006f70 <PxMessagingTask+0x60>
 8007298:	20000de0 	.word	0x20000de0
 800729c:	2000100b 	.word	0x2000100b
 80072a0:	2000115c 	.word	0x2000115c
 80072a4:	20001348 	.word	0x20001348
 80072a8:	20006a10 	.word	0x20006a10
 80072ac:	20001298 	.word	0x20001298
 80072b0:	2000100a 	.word	0x2000100a
 80072b4:	20000d1b 	.word	0x20000d1b
 80072b8:	08018d44 	.word	0x08018d44
 80072bc:	20000d1a 	.word	0x20000d1a
 80072c0:	20000ce8 	.word	0x20000ce8
 80072c4:	200013a0 	.word	0x200013a0
 80072c8:	20001194 	.word	0x20001194
 80072cc:	08019974 	.word	0x08019974
 80072d0:	200012f8 	.word	0x200012f8
 80072d4:	20000abf 	.word	0x20000abf
 80072d8:	08019988 	.word	0x08019988
 80072dc:	2000129c 	.word	0x2000129c
 80072e0:	2000001e 	.word	0x2000001e
 80072e4:	20001164 	.word	0x20001164
							temp = numOfParams/5;
 80072e8:	2105      	movs	r1, #5
 80072ea:	4648      	mov	r0, r9
 80072ec:	f7f8 ff30 	bl	8000150 <__udivsi3>
 80072f0:	b2c2      	uxtb	r2, r0
 80072f2:	9208      	str	r2, [sp, #32]
							for (uint8_t k=0 ; k<temp ; k++)  {
 80072f4:	2a00      	cmp	r2, #0
 80072f6:	d019      	beq.n	800732c <PxMessagingTask+0x41c>
 80072f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072fa:	194f      	adds	r7, r1, r5
 80072fc:	4bdc      	ldr	r3, [pc, #880]	; (8007670 <PxMessagingTask+0x760>)
 80072fe:	18ff      	adds	r7, r7, r3
 8007300:	3305      	adds	r3, #5
 8007302:	468c      	mov	ip, r1
 8007304:	4463      	add	r3, ip
 8007306:	195d      	adds	r5, r3, r5
 8007308:	1e53      	subs	r3, r2, #1
 800730a:	b2db      	uxtb	r3, r3
 800730c:	009a      	lsls	r2, r3, #2
 800730e:	18d3      	adds	r3, r2, r3
 8007310:	18ed      	adds	r5, r5, r3
								memcpy(&neighbors2[(cMessage[port-1][shift+k*5])-1][0], &cMessage[port-1][1+shift+k*5], (size_t)(4));
 8007312:	4bd8      	ldr	r3, [pc, #864]	; (8007674 <PxMessagingTask+0x764>)
 8007314:	4699      	mov	r9, r3
 8007316:	7838      	ldrb	r0, [r7, #0]
 8007318:	3801      	subs	r0, #1
 800731a:	0080      	lsls	r0, r0, #2
 800731c:	4448      	add	r0, r9
 800731e:	1c79      	adds	r1, r7, #1
 8007320:	2204      	movs	r2, #4
 8007322:	f00c ffc0 	bl	80142a6 <memcpy>
 8007326:	3705      	adds	r7, #5
							for (uint8_t k=0 ; k<temp ; k++)  {
 8007328:	42bd      	cmp	r5, r7
 800732a:	d1f4      	bne.n	8007316 <PxMessagingTask+0x406>
							responseStatus = BOS_OK;
 800732c:	4bd2      	ldr	r3, [pc, #840]	; (8007678 <PxMessagingTask+0x768>)
 800732e:	2200      	movs	r2, #0
 8007330:	701a      	strb	r2, [r3, #0]
							break;
 8007332:	2300      	movs	r3, #0
 8007334:	4699      	mov	r9, r3
 8007336:	e61b      	b.n	8006f70 <PxMessagingTask+0x60>
 8007338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733a:	18eb      	adds	r3, r5, r3
 800733c:	4acc      	ldr	r2, [pc, #816]	; (8007670 <PxMessagingTask+0x760>)
 800733e:	4699      	mov	r9, r3
 8007340:	4491      	add	r9, r2
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8007342:	2701      	movs	r7, #1
 8007344:	464b      	mov	r3, r9
 8007346:	46a1      	mov	r9, r4
 8007348:	46aa      	mov	sl, r5
 800734a:	9d07      	ldr	r5, [sp, #28]
 800734c:	001c      	movs	r4, r3
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 800734e:	42bd      	cmp	r5, r7
 8007350:	d005      	beq.n	800735e <PxMessagingTask+0x44e>
 8007352:	0038      	movs	r0, r7
 8007354:	f7fd fb40 	bl	80049d8 <GetUart>
 8007358:	7821      	ldrb	r1, [r4, #0]
 800735a:	f7fe fc17 	bl	8005b8c <SwapUartPins>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 800735e:	3701      	adds	r7, #1
 8007360:	b2ff      	uxtb	r7, r7
 8007362:	3401      	adds	r4, #1
 8007364:	2f07      	cmp	r7, #7
 8007366:	d1f2      	bne.n	800734e <PxMessagingTask+0x43e>
 8007368:	464c      	mov	r4, r9
 800736a:	4655      	mov	r5, sl
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 800736c:	9807      	ldr	r0, [sp, #28]
 800736e:	f7fd fb33 	bl	80049d8 <GetUart>
 8007372:	4bbf      	ldr	r3, [pc, #764]	; (8007670 <PxMessagingTask+0x760>)
 8007374:	199b      	adds	r3, r3, r6
 8007376:	195d      	adds	r5, r3, r5
 8007378:	7aa9      	ldrb	r1, [r5, #10]
 800737a:	f7fe fc07 	bl	8005b8c <SwapUartPins>
							break;
 800737e:	2300      	movs	r3, #0
 8007380:	4699      	mov	r9, r3
 8007382:	e5f5      	b.n	8006f70 <PxMessagingTask+0x60>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 8007384:	002a      	movs	r2, r5
 8007386:	4bba      	ldr	r3, [pc, #744]	; (8007670 <PxMessagingTask+0x760>)
 8007388:	199b      	adds	r3, r3, r6
 800738a:	5d5b      	ldrb	r3, [r3, r5]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <PxMessagingTask+0x496>
								myID = cMessage[port-1][1+shift];
 8007390:	2238      	movs	r2, #56	; 0x38
 8007392:	4362      	muls	r2, r4
 8007394:	4bb6      	ldr	r3, [pc, #728]	; (8007670 <PxMessagingTask+0x760>)
 8007396:	189b      	adds	r3, r3, r2
 8007398:	195d      	adds	r5, r3, r5
 800739a:	786a      	ldrb	r2, [r5, #1]
 800739c:	4bb7      	ldr	r3, [pc, #732]	; (800767c <PxMessagingTask+0x76c>)
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	2300      	movs	r3, #0
 80073a2:	4699      	mov	r9, r3
 80073a4:	e5e4      	b.n	8006f70 <PxMessagingTask+0x60>
 80073a6:	2100      	movs	r1, #0
 80073a8:	4689      	mov	r9, r1
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d000      	beq.n	80073b0 <PxMessagingTask+0x4a0>
 80073ae:	e5df      	b.n	8006f70 <PxMessagingTask+0x60>
								messageParams[0] = 0;											/* change own ID */
 80073b0:	49b3      	ldr	r1, [pc, #716]	; (8007680 <PxMessagingTask+0x770>)
 80073b2:	464d      	mov	r5, r9
 80073b4:	700d      	strb	r5, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 80073b6:	2038      	movs	r0, #56	; 0x38
 80073b8:	4360      	muls	r0, r4
 80073ba:	4bad      	ldr	r3, [pc, #692]	; (8007670 <PxMessagingTask+0x760>)
 80073bc:	181b      	adds	r3, r3, r0
 80073be:	189b      	adds	r3, r3, r2
 80073c0:	785a      	ldrb	r2, [r3, #1]
 80073c2:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 80073c4:	7898      	ldrb	r0, [r3, #2]
 80073c6:	2303      	movs	r3, #3
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	330d      	adds	r3, #13
 80073cc:	464a      	mov	r2, r9
 80073ce:	4649      	mov	r1, r9
 80073d0:	f7fd fea4 	bl	800511c <SendMessageFromPort>
 80073d4:	e5cc      	b.n	8006f70 <PxMessagingTask+0x60>
							if (longMessage) {
 80073d6:	4bab      	ldr	r3, [pc, #684]	; (8007684 <PxMessagingTask+0x774>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d012      	beq.n	8007404 <PxMessagingTask+0x4f4>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 80073de:	4baa      	ldr	r3, [pc, #680]	; (8007688 <PxMessagingTask+0x778>)
 80073e0:	469a      	mov	sl, r3
 80073e2:	881f      	ldrh	r7, [r3, #0]
 80073e4:	48a9      	ldr	r0, [pc, #676]	; (800768c <PxMessagingTask+0x77c>)
 80073e6:	1838      	adds	r0, r7, r0
 80073e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ea:	469c      	mov	ip, r3
 80073ec:	4465      	add	r5, ip
 80073ee:	49a0      	ldr	r1, [pc, #640]	; (8007670 <PxMessagingTask+0x760>)
 80073f0:	1869      	adds	r1, r5, r1
 80073f2:	464a      	mov	r2, r9
 80073f4:	f00c ff57 	bl	80142a6 <memcpy>
								longMessageLastPtr += numOfParams;
 80073f8:	444f      	add	r7, r9
 80073fa:	4653      	mov	r3, sl
 80073fc:	801f      	strh	r7, [r3, #0]
 80073fe:	2300      	movs	r3, #0
 8007400:	4699      	mov	r9, r3
 8007402:	e5b5      	b.n	8006f70 <PxMessagingTask+0x60>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8007404:	4ba0      	ldr	r3, [pc, #640]	; (8007688 <PxMessagingTask+0x778>)
 8007406:	469a      	mov	sl, r3
 8007408:	881f      	ldrh	r7, [r3, #0]
 800740a:	4ba0      	ldr	r3, [pc, #640]	; (800768c <PxMessagingTask+0x77c>)
 800740c:	18f8      	adds	r0, r7, r3
 800740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007410:	469c      	mov	ip, r3
 8007412:	4465      	add	r5, ip
 8007414:	4996      	ldr	r1, [pc, #600]	; (8007670 <PxMessagingTask+0x760>)
 8007416:	1869      	adds	r1, r5, r1
 8007418:	464a      	mov	r2, r9
 800741a:	f00c ff44 	bl	80142a6 <memcpy>
								longMessageLastPtr += numOfParams;
 800741e:	444f      	add	r7, r9
 8007420:	b2bf      	uxth	r7, r7
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 8007422:	2116      	movs	r1, #22
 8007424:	0038      	movs	r0, r7
 8007426:	f7f8 fe93 	bl	8000150 <__udivsi3>
 800742a:	4b99      	ldr	r3, [pc, #612]	; (8007690 <PxMessagingTask+0x780>)
 800742c:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 800742e:	003a      	movs	r2, r7
 8007430:	4996      	ldr	r1, [pc, #600]	; (800768c <PxMessagingTask+0x77c>)
 8007432:	4898      	ldr	r0, [pc, #608]	; (8007694 <PxMessagingTask+0x784>)
 8007434:	f00c ff37 	bl	80142a6 <memcpy>
								longMessageLastPtr = 0;
 8007438:	2500      	movs	r5, #0
 800743a:	4653      	mov	r3, sl
 800743c:	801d      	strh	r5, [r3, #0]
 800743e:	46a9      	mov	r9, r5
 8007440:	e596      	b.n	8006f70 <PxMessagingTask+0x60>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8007442:	2501      	movs	r5, #1
							temp = 0;
 8007444:	2300      	movs	r3, #0
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8007446:	2780      	movs	r7, #128	; 0x80
 8007448:	023f      	lsls	r7, r7, #8
									messageParams[temp++] = p;
 800744a:	46a1      	mov	r9, r4
 800744c:	001c      	movs	r4, r3
 800744e:	e003      	b.n	8007458 <PxMessagingTask+0x548>
								for (p=1 ; p<=NumOfPorts ; p++) {
 8007450:	3501      	adds	r5, #1
 8007452:	b2ed      	uxtb	r5, r5
 8007454:	2d07      	cmp	r5, #7
 8007456:	d00a      	beq.n	800746e <PxMessagingTask+0x55e>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8007458:	0028      	movs	r0, r5
 800745a:	f7fd fabd 	bl	80049d8 <GetUart>
 800745e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007460:	42bb      	cmp	r3, r7
 8007462:	d1f5      	bne.n	8007450 <PxMessagingTask+0x540>
									messageParams[temp++] = p;
 8007464:	1c63      	adds	r3, r4, #1
 8007466:	4a86      	ldr	r2, [pc, #536]	; (8007680 <PxMessagingTask+0x770>)
 8007468:	5515      	strb	r5, [r2, r4]
 800746a:	b2dc      	uxtb	r4, r3
 800746c:	e7f0      	b.n	8007450 <PxMessagingTask+0x540>
 800746e:	0023      	movs	r3, r4
 8007470:	9408      	str	r4, [sp, #32]
 8007472:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 8007474:	b29a      	uxth	r2, r3
 8007476:	2114      	movs	r1, #20
 8007478:	9806      	ldr	r0, [sp, #24]
 800747a:	f7fe fcaf 	bl	8005ddc <SendMessageToModule>
							break;
 800747e:	2300      	movs	r3, #0
 8007480:	4699      	mov	r9, r3
 8007482:	e575      	b.n	8006f70 <PxMessagingTask+0x60>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 8007484:	4b7a      	ldr	r3, [pc, #488]	; (8007670 <PxMessagingTask+0x760>)
 8007486:	199b      	adds	r3, r3, r6
 8007488:	5d5f      	ldrb	r7, [r3, r5]
 800748a:	063f      	lsls	r7, r7, #24
 800748c:	195b      	adds	r3, r3, r5
 800748e:	78da      	ldrb	r2, [r3, #3]
 8007490:	18bf      	adds	r7, r7, r2
 8007492:	785a      	ldrb	r2, [r3, #1]
 8007494:	0412      	lsls	r2, r2, #16
 8007496:	18bf      	adds	r7, r7, r2
 8007498:	789a      	ldrb	r2, [r3, #2]
 800749a:	0212      	lsls	r2, r2, #8
 800749c:	18ba      	adds	r2, r7, r2
 800749e:	9208      	str	r2, [sp, #32]
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 80074a0:	791b      	ldrb	r3, [r3, #4]
 80074a2:	2bff      	cmp	r3, #255	; 0xff
 80074a4:	d014      	beq.n	80074d0 <PxMessagingTask+0x5c0>
									for (p=0 ; p<numOfParams ; p++) 
 80074a6:	464b      	mov	r3, r9
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00f      	beq.n	80074cc <PxMessagingTask+0x5bc>
 80074ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ae:	1d0a      	adds	r2, r1, #4
 80074b0:	1952      	adds	r2, r2, r5
 80074b2:	4b6f      	ldr	r3, [pc, #444]	; (8007670 <PxMessagingTask+0x760>)
 80074b4:	18d7      	adds	r7, r2, r3
 80074b6:	3305      	adds	r3, #5
 80074b8:	468c      	mov	ip, r1
 80074ba:	4463      	add	r3, ip
 80074bc:	195d      	adds	r5, r3, r5
 80074be:	464b      	mov	r3, r9
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	18ed      	adds	r5, r5, r3
 80074c6:	46a1      	mov	r9, r4
 80074c8:	002c      	movs	r4, r5
 80074ca:	e011      	b.n	80074f0 <PxMessagingTask+0x5e0>
								temp = temp32 = 0;
 80074cc:	9308      	str	r3, [sp, #32]
 80074ce:	e54f      	b.n	8006f70 <PxMessagingTask+0x60>
									for (p=1 ; p<=NumOfPorts ; p++) 
 80074d0:	2501      	movs	r5, #1
										UpdateBaudrate(p, temp32); 
 80074d2:	9908      	ldr	r1, [sp, #32]
 80074d4:	0028      	movs	r0, r5
 80074d6:	f006 fd97 	bl	800e008 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 80074da:	3501      	adds	r5, #1
 80074dc:	b2ed      	uxtb	r5, r5
 80074de:	2d07      	cmp	r5, #7
 80074e0:	d1f7      	bne.n	80074d2 <PxMessagingTask+0x5c2>
								temp = temp32 = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	9308      	str	r3, [sp, #32]
 80074e6:	4699      	mov	r9, r3
 80074e8:	e542      	b.n	8006f70 <PxMessagingTask+0x60>
 80074ea:	3701      	adds	r7, #1
									for (p=0 ; p<numOfParams ; p++) 
 80074ec:	42a7      	cmp	r7, r4
 80074ee:	d008      	beq.n	8007502 <PxMessagingTask+0x5f2>
										temp = cMessage[port-1][4+shift+p];
 80074f0:	783d      	ldrb	r5, [r7, #0]
										if (temp>0 && temp<=NumOfPorts)	{
 80074f2:	1e6b      	subs	r3, r5, #1
 80074f4:	2b05      	cmp	r3, #5
 80074f6:	d8f8      	bhi.n	80074ea <PxMessagingTask+0x5da>
											UpdateBaudrate(temp, temp32); 
 80074f8:	9908      	ldr	r1, [sp, #32]
 80074fa:	0028      	movs	r0, r5
 80074fc:	f006 fd84 	bl	800e008 <UpdateBaudrate>
 8007500:	e7f3      	b.n	80074ea <PxMessagingTask+0x5da>
 8007502:	464c      	mov	r4, r9
 8007504:	9508      	str	r5, [sp, #32]
 8007506:	2300      	movs	r3, #0
 8007508:	4699      	mov	r9, r3
 800750a:	e531      	b.n	8006f70 <PxMessagingTask+0x60>
								SaveToRO();
 800750c:	f7fc fa7a 	bl	8003a04 <SaveToRO>
							SaveEEportsDir();
 8007510:	f7fc fd3e 	bl	8003f90 <SaveEEportsDir>
							indMode = IND_PING;
 8007514:	4b60      	ldr	r3, [pc, #384]	; (8007698 <PxMessagingTask+0x788>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
							break;
 800751a:	2300      	movs	r3, #0
 800751c:	4699      	mov	r9, r3
 800751e:	e527      	b.n	8006f70 <PxMessagingTask+0x60>
							ClearEEportsDir();
 8007520:	f7fc fd60 	bl	8003fe4 <ClearEEportsDir>
							ClearROtopology();
 8007524:	f7fc fc52 	bl	8003dcc <ClearROtopology>
							osDelay(100);
 8007528:	2064      	movs	r0, #100	; 0x64
 800752a:	f007 f9cc 	bl	800e8c6 <osDelay>
							indMode = IND_TOPOLOGY;
 800752e:	4b5a      	ldr	r3, [pc, #360]	; (8007698 <PxMessagingTask+0x788>)
 8007530:	2202      	movs	r2, #2
 8007532:	701a      	strb	r2, [r3, #0]
							break;
 8007534:	2300      	movs	r3, #0
 8007536:	4699      	mov	r9, r3
 8007538:	e51a      	b.n	8006f70 <PxMessagingTask+0x60>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800753a:	f007 fad9 	bl	800eaf0 <FreeRTOS_CLIGetOutputBuffer>
 800753e:	900a      	str	r0, [sp, #40]	; 0x28
							if (dst == BOS_BROADCAST)
 8007540:	4653      	mov	r3, sl
 8007542:	2bff      	cmp	r3, #255	; 0xff
 8007544:	d011      	beq.n	800756a <PxMessagingTask+0x65a>
							else if (dst == BOS_MULTICAST)
 8007546:	2bfe      	cmp	r3, #254	; 0xfe
 8007548:	d01a      	beq.n	8007580 <PxMessagingTask+0x670>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 800754a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754c:	469c      	mov	ip, r3
 800754e:	4465      	add	r5, ip
 8007550:	4947      	ldr	r1, [pc, #284]	; (8007670 <PxMessagingTask+0x760>)
 8007552:	1869      	adds	r1, r5, r1
 8007554:	464a      	mov	r2, r9
 8007556:	4851      	ldr	r0, [pc, #324]	; (800769c <PxMessagingTask+0x78c>)
 8007558:	f00c fea5 	bl	80142a6 <memcpy>
								temp = PcPort; PcPort = port;
 800755c:	4d50      	ldr	r5, [pc, #320]	; (80076a0 <PxMessagingTask+0x790>)
								if (BOS.response == BOS_RESPONSE_ALL)
 800755e:	4b51      	ldr	r3, [pc, #324]	; (80076a4 <PxMessagingTask+0x794>)
 8007560:	4699      	mov	r9, r3
 8007562:	46a2      	mov	sl, r4
 8007564:	960c      	str	r6, [sp, #48]	; 0x30
 8007566:	9e07      	ldr	r6, [sp, #28]
 8007568:	e019      	b.n	800759e <PxMessagingTask+0x68e>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 800756a:	464a      	mov	r2, r9
 800756c:	3a01      	subs	r2, #1
 800756e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007570:	469c      	mov	ip, r3
 8007572:	4465      	add	r5, ip
 8007574:	493e      	ldr	r1, [pc, #248]	; (8007670 <PxMessagingTask+0x760>)
 8007576:	1869      	adds	r1, r5, r1
 8007578:	4848      	ldr	r0, [pc, #288]	; (800769c <PxMessagingTask+0x78c>)
 800757a:	f00c fe94 	bl	80142a6 <memcpy>
 800757e:	e7ed      	b.n	800755c <PxMessagingTask+0x64c>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 8007580:	464b      	mov	r3, r9
 8007582:	9a08      	ldr	r2, [sp, #32]
 8007584:	1a9a      	subs	r2, r3, r2
 8007586:	3a02      	subs	r2, #2
 8007588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758a:	469c      	mov	ip, r3
 800758c:	4465      	add	r5, ip
 800758e:	4938      	ldr	r1, [pc, #224]	; (8007670 <PxMessagingTask+0x760>)
 8007590:	1869      	adds	r1, r5, r1
 8007592:	4842      	ldr	r0, [pc, #264]	; (800769c <PxMessagingTask+0x78c>)
 8007594:	f00c fe87 	bl	80142a6 <memcpy>
 8007598:	e7e0      	b.n	800755c <PxMessagingTask+0x64c>
							while( xReturned != pdFALSE );								
 800759a:	2c00      	cmp	r4, #0
 800759c:	d021      	beq.n	80075e2 <PxMessagingTask+0x6d2>
								temp = PcPort; PcPort = port;
 800759e:	782f      	ldrb	r7, [r5, #0]
 80075a0:	702e      	strb	r6, [r5, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 80075a2:	2299      	movs	r2, #153	; 0x99
 80075a4:	0092      	lsls	r2, r2, #2
 80075a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075a8:	483c      	ldr	r0, [pc, #240]	; (800769c <PxMessagingTask+0x78c>)
 80075aa:	f007 fa23 	bl	800e9f4 <FreeRTOS_CLIProcessCommand>
 80075ae:	0004      	movs	r4, r0
								PcPort = temp;
 80075b0:	702f      	strb	r7, [r5, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 80075b2:	464b      	mov	r3, r9
 80075b4:	799b      	ldrb	r3, [r3, #6]
 80075b6:	2b60      	cmp	r3, #96	; 0x60
 80075b8:	d1ef      	bne.n	800759a <PxMessagingTask+0x68a>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 80075ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80075bc:	f7f8 fdac 	bl	8000118 <strlen>
 80075c0:	0002      	movs	r2, r0
 80075c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075c4:	482e      	ldr	r0, [pc, #184]	; (8007680 <PxMessagingTask+0x770>)
 80075c6:	f00c fe6e 	bl	80142a6 <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 80075ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80075cc:	f7f8 fda4 	bl	8000118 <strlen>
 80075d0:	b282      	uxth	r2, r0
 80075d2:	2118      	movs	r1, #24
 80075d4:	9806      	ldr	r0, [sp, #24]
 80075d6:	f7fe fc01 	bl	8005ddc <SendMessageToModule>
									osDelay(10); 
 80075da:	200a      	movs	r0, #10
 80075dc:	f007 f973 	bl	800e8c6 <osDelay>
 80075e0:	e7db      	b.n	800759a <PxMessagingTask+0x68a>
 80075e2:	4654      	mov	r4, sl
 80075e4:	9708      	str	r7, [sp, #32]
 80075e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 80075e8:	2232      	movs	r2, #50	; 0x32
 80075ea:	2100      	movs	r1, #0
 80075ec:	482b      	ldr	r0, [pc, #172]	; (800769c <PxMessagingTask+0x78c>)
 80075ee:	f00c fe63 	bl	80142b8 <memset>
							break;
 80075f2:	2300      	movs	r3, #0
 80075f4:	4699      	mov	r9, r3
 80075f6:	e4bb      	b.n	8006f70 <PxMessagingTask+0x60>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80075f8:	f007 fa7a 	bl	800eaf0 <FreeRTOS_CLIGetOutputBuffer>
 80075fc:	0007      	movs	r7, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80075fe:	f7f8 fd8b 	bl	8000118 <strlen>
 8007602:	0002      	movs	r2, r0
 8007604:	2100      	movs	r1, #0
 8007606:	0038      	movs	r0, r7
 8007608:	f00c fe56 	bl	80142b8 <memset>
							if (longMessage) {
 800760c:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <PxMessagingTask+0x774>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d012      	beq.n	800763a <PxMessagingTask+0x72a>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8007614:	4b1c      	ldr	r3, [pc, #112]	; (8007688 <PxMessagingTask+0x778>)
 8007616:	469a      	mov	sl, r3
 8007618:	8818      	ldrh	r0, [r3, #0]
 800761a:	1838      	adds	r0, r7, r0
 800761c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800761e:	469c      	mov	ip, r3
 8007620:	4465      	add	r5, ip
 8007622:	4913      	ldr	r1, [pc, #76]	; (8007670 <PxMessagingTask+0x760>)
 8007624:	1869      	adds	r1, r5, r1
 8007626:	464a      	mov	r2, r9
 8007628:	f00c fe3d 	bl	80142a6 <memcpy>
								longMessageLastPtr += numOfParams;
 800762c:	4653      	mov	r3, sl
 800762e:	881a      	ldrh	r2, [r3, #0]
 8007630:	444a      	add	r2, r9
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	2300      	movs	r3, #0
 8007636:	4699      	mov	r9, r3
 8007638:	e49a      	b.n	8006f70 <PxMessagingTask+0x60>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800763a:	4b13      	ldr	r3, [pc, #76]	; (8007688 <PxMessagingTask+0x778>)
 800763c:	469a      	mov	sl, r3
 800763e:	8818      	ldrh	r0, [r3, #0]
 8007640:	1838      	adds	r0, r7, r0
 8007642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007644:	469c      	mov	ip, r3
 8007646:	4465      	add	r5, ip
 8007648:	4909      	ldr	r1, [pc, #36]	; (8007670 <PxMessagingTask+0x760>)
 800764a:	1869      	adds	r1, r5, r1
 800764c:	464a      	mov	r2, r9
 800764e:	f00c fe2a 	bl	80142a6 <memcpy>
								longMessageLastPtr = 0;
 8007652:	2500      	movs	r5, #0
 8007654:	4653      	mov	r3, sl
 8007656:	801d      	strh	r5, [r3, #0]
								responseStatus = BOS_OK;
 8007658:	4b07      	ldr	r3, [pc, #28]	; (8007678 <PxMessagingTask+0x768>)
 800765a:	701d      	strb	r5, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 800765c:	002b      	movs	r3, r5
 800765e:	002a      	movs	r2, r5
 8007660:	0029      	movs	r1, r5
 8007662:	4811      	ldr	r0, [pc, #68]	; (80076a8 <PxMessagingTask+0x798>)
 8007664:	6800      	ldr	r0, [r0, #0]
 8007666:	f008 fd4d 	bl	8010104 <xTaskGenericNotify>
 800766a:	46a9      	mov	r9, r5
 800766c:	e480      	b.n	8006f70 <PxMessagingTask+0x60>
 800766e:	46c0      	nop			; (mov r8, r8)
 8007670:	20000de0 	.word	0x20000de0
 8007674:	200012b4 	.word	0x200012b4
 8007678:	200013a0 	.word	0x200013a0
 800767c:	20001298 	.word	0x20001298
 8007680:	20001164 	.word	0x20001164
 8007684:	2000100b 	.word	0x2000100b
 8007688:	2000100c 	.word	0x2000100c
 800768c:	20001010 	.word	0x20001010
 8007690:	2000001c 	.word	0x2000001c
 8007694:	20000ac0 	.word	0x20000ac0
 8007698:	2000100a 	.word	0x2000100a
 800769c:	20000dac 	.word	0x20000dac
 80076a0:	20000abf 	.word	0x20000abf
 80076a4:	20006a10 	.word	0x20006a10
 80076a8:	20001758 	.word	0x20001758
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 80076ac:	4be4      	ldr	r3, [pc, #912]	; (8007a40 <PxMessagingTask+0xb30>)
 80076ae:	4ae5      	ldr	r2, [pc, #916]	; (8007a44 <PxMessagingTask+0xb34>)
 80076b0:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 80076b2:	4be5      	ldr	r3, [pc, #916]	; (8007a48 <PxMessagingTask+0xb38>)
 80076b4:	2201      	movs	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 80076b8:	200a      	movs	r0, #10
 80076ba:	f007 f904 	bl	800e8c6 <osDelay>
								NVIC_SystemReset();												
 80076be:	f7fb fd23 	bl	8003108 <NVIC_SystemReset>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 80076c2:	4fe2      	ldr	r7, [pc, #904]	; (8007a4c <PxMessagingTask+0xb3c>)
 80076c4:	19bf      	adds	r7, r7, r6
 80076c6:	5d78      	ldrb	r0, [r7, r5]
 80076c8:	2300      	movs	r3, #0
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	3319      	adds	r3, #25
 80076ce:	2200      	movs	r2, #0
 80076d0:	2100      	movs	r1, #0
 80076d2:	f7fd fd23 	bl	800511c <SendMessageFromPort>
								osDelay(100);
 80076d6:	2064      	movs	r0, #100	; 0x64
 80076d8:	f007 f8f5 	bl	800e8c6 <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 80076dc:	5d7b      	ldrb	r3, [r7, r5]
 80076de:	4adc      	ldr	r2, [pc, #880]	; (8007a50 <PxMessagingTask+0xb40>)
 80076e0:	7811      	ldrb	r1, [r2, #0]
 80076e2:	9a07      	ldr	r2, [sp, #28]
 80076e4:	9806      	ldr	r0, [sp, #24]
 80076e6:	f7ff fadb 	bl	8006ca0 <remoteBootloaderUpdate>
								break;
 80076ea:	2300      	movs	r3, #0
 80076ec:	4699      	mov	r9, r3
 80076ee:	e43f      	b.n	8006f70 <PxMessagingTask+0x60>
							temp = cMessage[port-1][11+shift];
 80076f0:	002f      	movs	r7, r5
 80076f2:	230b      	movs	r3, #11
 80076f4:	469a      	mov	sl, r3
 80076f6:	44aa      	add	sl, r5
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 80076f8:	464b      	mov	r3, r9
 80076fa:	2b0f      	cmp	r3, #15
 80076fc:	d011      	beq.n	8007722 <PxMessagingTask+0x812>
							temp = cMessage[port-1][11+shift];
 80076fe:	2238      	movs	r2, #56	; 0x38
 8007700:	4362      	muls	r2, r4
 8007702:	4bd2      	ldr	r3, [pc, #840]	; (8007a4c <PxMessagingTask+0xb3c>)
 8007704:	189b      	adds	r3, r3, r2
 8007706:	4652      	mov	r2, sl
 8007708:	5c9b      	ldrb	r3, [r3, r2]
 800770a:	930a      	str	r3, [sp, #40]	; 0x28
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 800770c:	464b      	mov	r3, r9
 800770e:	2b11      	cmp	r3, #17
 8007710:	d10e      	bne.n	8007730 <PxMessagingTask+0x820>
 8007712:	2238      	movs	r2, #56	; 0x38
 8007714:	4362      	muls	r2, r4
 8007716:	4bcd      	ldr	r3, [pc, #820]	; (8007a4c <PxMessagingTask+0xb3c>)
 8007718:	189b      	adds	r3, r3, r2
 800771a:	195b      	adds	r3, r3, r5
 800771c:	7bdb      	ldrb	r3, [r3, #15]
 800771e:	930a      	str	r3, [sp, #40]	; 0x28
 8007720:	e006      	b.n	8007730 <PxMessagingTask+0x820>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 8007722:	2238      	movs	r2, #56	; 0x38
 8007724:	4362      	muls	r2, r4
 8007726:	4bc9      	ldr	r3, [pc, #804]	; (8007a4c <PxMessagingTask+0xb3c>)
 8007728:	189b      	adds	r3, r3, r2
 800772a:	195d      	adds	r5, r3, r5
 800772c:	7b6b      	ldrb	r3, [r5, #13]
 800772e:	930a      	str	r3, [sp, #40]	; 0x28
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 8007730:	1c78      	adds	r0, r7, #1
 8007732:	9008      	str	r0, [sp, #32]
 8007734:	1cbd      	adds	r5, r7, #2
 8007736:	950d      	str	r5, [sp, #52]	; 0x34
 8007738:	1cf9      	adds	r1, r7, #3
 800773a:	910e      	str	r1, [sp, #56]	; 0x38
 800773c:	4bc3      	ldr	r3, [pc, #780]	; (8007a4c <PxMessagingTask+0xb3c>)
 800773e:	199b      	adds	r3, r3, r6
 8007740:	5dda      	ldrb	r2, [r3, r7]
 8007742:	0612      	lsls	r2, r2, #24
 8007744:	5c59      	ldrb	r1, [r3, r1]
 8007746:	1852      	adds	r2, r2, r1
 8007748:	5c19      	ldrb	r1, [r3, r0]
 800774a:	0409      	lsls	r1, r1, #16
 800774c:	1852      	adds	r2, r2, r1
 800774e:	5d59      	ldrb	r1, [r3, r5]
 8007750:	0209      	lsls	r1, r1, #8
 8007752:	1852      	adds	r2, r2, r1
 8007754:	920c      	str	r2, [sp, #48]	; 0x30
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 8007756:	1d3a      	adds	r2, r7, #4
 8007758:	920f      	str	r2, [sp, #60]	; 0x3c
 800775a:	1d79      	adds	r1, r7, #5
 800775c:	468c      	mov	ip, r1
 800775e:	1db9      	adds	r1, r7, #6
 8007760:	1df8      	adds	r0, r7, #7
 8007762:	5c9d      	ldrb	r5, [r3, r2]
 8007764:	062d      	lsls	r5, r5, #24
 8007766:	4662      	mov	r2, ip
 8007768:	5c9a      	ldrb	r2, [r3, r2]
 800776a:	0412      	lsls	r2, r2, #16
 800776c:	18aa      	adds	r2, r5, r2
 800776e:	5c1d      	ldrb	r5, [r3, r0]
 8007770:	1952      	adds	r2, r2, r5
 8007772:	5c5d      	ldrb	r5, [r3, r1]
 8007774:	022d      	lsls	r5, r5, #8
 8007776:	1955      	adds	r5, r2, r5
							if (temp == false)
 8007778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777a:	2b00      	cmp	r3, #0
 800777c:	d15b      	bne.n	8007836 <PxMessagingTask+0x926>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 800777e:	4bb3      	ldr	r3, [pc, #716]	; (8007a4c <PxMessagingTask+0xb3c>)
 8007780:	199b      	adds	r3, r3, r6
 8007782:	19db      	adds	r3, r3, r7
 8007784:	7a5b      	ldrb	r3, [r3, #9]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d007      	beq.n	800779a <PxMessagingTask+0x88a>
 800778a:	2138      	movs	r1, #56	; 0x38
 800778c:	4361      	muls	r1, r4
 800778e:	4aaf      	ldr	r2, [pc, #700]	; (8007a4c <PxMessagingTask+0xb3c>)
 8007790:	1852      	adds	r2, r2, r1
 8007792:	19d2      	adds	r2, r2, r7
 8007794:	7a91      	ldrb	r1, [r2, #10]
 8007796:	2900      	cmp	r1, #0
 8007798:	d125      	bne.n	80077e6 <PxMessagingTask+0x8d6>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 800779a:	4bac      	ldr	r3, [pc, #688]	; (8007a4c <PxMessagingTask+0xb3c>)
 800779c:	199b      	adds	r3, r3, r6
 800779e:	4652      	mov	r2, sl
 80077a0:	5c9b      	ldrb	r3, [r3, r2]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d007      	beq.n	80077b6 <PxMessagingTask+0x8a6>
 80077a6:	2138      	movs	r1, #56	; 0x38
 80077a8:	4361      	muls	r1, r4
 80077aa:	4aa8      	ldr	r2, [pc, #672]	; (8007a4c <PxMessagingTask+0xb3c>)
 80077ac:	1852      	adds	r2, r2, r1
 80077ae:	19d2      	adds	r2, r2, r7
 80077b0:	7b11      	ldrb	r1, [r2, #12]
 80077b2:	2900      	cmp	r1, #0
 80077b4:	d123      	bne.n	80077fe <PxMessagingTask+0x8ee>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 80077b6:	4ba5      	ldr	r3, [pc, #660]	; (8007a4c <PxMessagingTask+0xb3c>)
 80077b8:	199b      	adds	r3, r3, r6
 80077ba:	19db      	adds	r3, r3, r7
 80077bc:	7b5b      	ldrb	r3, [r3, #13]
 80077be:	9308      	str	r3, [sp, #32]
 80077c0:	2200      	movs	r2, #0
 80077c2:	4691      	mov	r9, r2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <PxMessagingTask+0x8bc>
 80077c8:	f7ff fbd2 	bl	8006f70 <PxMessagingTask+0x60>
 80077cc:	3238      	adds	r2, #56	; 0x38
 80077ce:	4362      	muls	r2, r4
 80077d0:	4b9e      	ldr	r3, [pc, #632]	; (8007a4c <PxMessagingTask+0xb3c>)
 80077d2:	189b      	adds	r3, r3, r2
 80077d4:	19db      	adds	r3, r3, r7
 80077d6:	7b9a      	ldrb	r2, [r3, #14]
 80077d8:	454a      	cmp	r2, r9
 80077da:	d11c      	bne.n	8007816 <PxMessagingTask+0x906>
 80077dc:	9208      	str	r2, [sp, #32]
 80077de:	2300      	movs	r3, #0
 80077e0:	4699      	mov	r9, r3
 80077e2:	f7ff fbc5 	bl	8006f70 <PxMessagingTask+0x60>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 80077e6:	2038      	movs	r0, #56	; 0x38
 80077e8:	4360      	muls	r0, r4
 80077ea:	4a98      	ldr	r2, [pc, #608]	; (8007a4c <PxMessagingTask+0xb3c>)
 80077ec:	1812      	adds	r2, r2, r0
 80077ee:	19d2      	adds	r2, r2, r7
 80077f0:	7a10      	ldrb	r0, [r2, #8]
 80077f2:	9100      	str	r1, [sp, #0]
 80077f4:	002a      	movs	r2, r5
 80077f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80077f8:	f7fd f910 	bl	8004a1c <SetupDMAStreams>
 80077fc:	e7cd      	b.n	800779a <PxMessagingTask+0x88a>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 80077fe:	2038      	movs	r0, #56	; 0x38
 8007800:	4360      	muls	r0, r4
 8007802:	4a92      	ldr	r2, [pc, #584]	; (8007a4c <PxMessagingTask+0xb3c>)
 8007804:	1812      	adds	r2, r2, r0
 8007806:	19d2      	adds	r2, r2, r7
 8007808:	7a10      	ldrb	r0, [r2, #8]
 800780a:	9100      	str	r1, [sp, #0]
 800780c:	002a      	movs	r2, r5
 800780e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007810:	f7fd f904 	bl	8004a1c <SetupDMAStreams>
 8007814:	e7cf      	b.n	80077b6 <PxMessagingTask+0x8a6>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 8007816:	2138      	movs	r1, #56	; 0x38
 8007818:	4361      	muls	r1, r4
 800781a:	4b8c      	ldr	r3, [pc, #560]	; (8007a4c <PxMessagingTask+0xb3c>)
 800781c:	185b      	adds	r3, r3, r1
 800781e:	19df      	adds	r7, r3, r7
 8007820:	7a38      	ldrb	r0, [r7, #8]
 8007822:	9200      	str	r2, [sp, #0]
 8007824:	9b08      	ldr	r3, [sp, #32]
 8007826:	002a      	movs	r2, r5
 8007828:	990c      	ldr	r1, [sp, #48]	; 0x30
 800782a:	f7fd f8f7 	bl	8004a1c <SetupDMAStreams>
 800782e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007830:	9308      	str	r3, [sp, #32]
 8007832:	f7ff fb9d 	bl	8006f70 <PxMessagingTask+0x60>
 8007836:	9705      	str	r7, [sp, #20]
 8007838:	4663      	mov	r3, ip
 800783a:	9306      	str	r3, [sp, #24]
 800783c:	468b      	mov	fp, r1
 800783e:	4680      	mov	r8, r0
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 8007840:	2338      	movs	r3, #56	; 0x38
 8007842:	4363      	muls	r3, r4
 8007844:	4d81      	ldr	r5, [pc, #516]	; (8007a4c <PxMessagingTask+0xb3c>)
 8007846:	18ed      	adds	r5, r5, r3
 8007848:	19ee      	adds	r6, r5, r7
 800784a:	7a31      	ldrb	r1, [r6, #8]
 800784c:	20e4      	movs	r0, #228	; 0xe4
 800784e:	f003 f9b3 	bl	800abb8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 8007852:	5deb      	ldrb	r3, [r5, r7]
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	9f08      	ldr	r7, [sp, #32]
 8007858:	5de9      	ldrb	r1, [r5, r7]
 800785a:	18c9      	adds	r1, r1, r3
 800785c:	b289      	uxth	r1, r1
 800785e:	20e5      	movs	r0, #229	; 0xe5
 8007860:	f003 f9aa 	bl	800abb8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 8007864:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007866:	5deb      	ldrb	r3, [r5, r7]
 8007868:	021b      	lsls	r3, r3, #8
 800786a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800786c:	5de9      	ldrb	r1, [r5, r7]
 800786e:	18c9      	adds	r1, r1, r3
 8007870:	b289      	uxth	r1, r1
 8007872:	20e6      	movs	r0, #230	; 0xe6
 8007874:	f003 f9a0 	bl	800abb8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 8007878:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800787a:	5deb      	ldrb	r3, [r5, r7]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	9a06      	ldr	r2, [sp, #24]
 8007880:	5ca9      	ldrb	r1, [r5, r2]
 8007882:	18c9      	adds	r1, r1, r3
 8007884:	b289      	uxth	r1, r1
 8007886:	20e7      	movs	r0, #231	; 0xe7
 8007888:	f003 f996 	bl	800abb8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 800788c:	465b      	mov	r3, fp
 800788e:	5ceb      	ldrb	r3, [r5, r3]
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	4642      	mov	r2, r8
 8007894:	5ca9      	ldrb	r1, [r5, r2]
 8007896:	18c9      	adds	r1, r1, r3
 8007898:	b289      	uxth	r1, r1
 800789a:	20e8      	movs	r0, #232	; 0xe8
 800789c:	f003 f98c 	bl	800abb8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 80078a0:	7a73      	ldrb	r3, [r6, #9]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	7ab1      	ldrb	r1, [r6, #10]
 80078a6:	18c9      	adds	r1, r1, r3
 80078a8:	b289      	uxth	r1, r1
 80078aa:	20e9      	movs	r0, #233	; 0xe9
 80078ac:	f003 f984 	bl	800abb8 <EE_WriteVariable>
								if (numOfParams == 19)
 80078b0:	464b      	mov	r3, r9
 80078b2:	2b13      	cmp	r3, #19
 80078b4:	d003      	beq.n	80078be <PxMessagingTask+0x9ae>
								if (numOfParams == 21)
 80078b6:	2b15      	cmp	r3, #21
 80078b8:	d012      	beq.n	80078e0 <PxMessagingTask+0x9d0>
								NVIC_SystemReset();
 80078ba:	f7fb fc25 	bl	8003108 <NVIC_SystemReset>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 80078be:	3325      	adds	r3, #37	; 0x25
 80078c0:	4363      	muls	r3, r4
 80078c2:	4c62      	ldr	r4, [pc, #392]	; (8007a4c <PxMessagingTask+0xb3c>)
 80078c4:	18e4      	adds	r4, r4, r3
 80078c6:	4653      	mov	r3, sl
 80078c8:	5ce3      	ldrb	r3, [r4, r3]
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	9a05      	ldr	r2, [sp, #20]
 80078ce:	4694      	mov	ip, r2
 80078d0:	4464      	add	r4, ip
 80078d2:	7b21      	ldrb	r1, [r4, #12]
 80078d4:	18c9      	adds	r1, r1, r3
 80078d6:	b289      	uxth	r1, r1
 80078d8:	20ea      	movs	r0, #234	; 0xea
 80078da:	f003 f96d 	bl	800abb8 <EE_WriteVariable>
 80078de:	e7ec      	b.n	80078ba <PxMessagingTask+0x9aa>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 80078e0:	3323      	adds	r3, #35	; 0x23
 80078e2:	435c      	muls	r4, r3
 80078e4:	4b59      	ldr	r3, [pc, #356]	; (8007a4c <PxMessagingTask+0xb3c>)
 80078e6:	191b      	adds	r3, r3, r4
 80078e8:	9a05      	ldr	r2, [sp, #20]
 80078ea:	4694      	mov	ip, r2
 80078ec:	4463      	add	r3, ip
 80078ee:	7b5a      	ldrb	r2, [r3, #13]
 80078f0:	0212      	lsls	r2, r2, #8
 80078f2:	7b99      	ldrb	r1, [r3, #14]
 80078f4:	1889      	adds	r1, r1, r2
 80078f6:	b289      	uxth	r1, r1
 80078f8:	20eb      	movs	r0, #235	; 0xeb
 80078fa:	f003 f95d 	bl	800abb8 <EE_WriteVariable>
 80078fe:	e7dc      	b.n	80078ba <PxMessagingTask+0x9aa>
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8007900:	4f52      	ldr	r7, [pc, #328]	; (8007a4c <PxMessagingTask+0xb3c>)
 8007902:	19bf      	adds	r7, r7, r6
 8007904:	1979      	adds	r1, r7, r5
 8007906:	7a8b      	ldrb	r3, [r1, #10]
 8007908:	930a      	str	r3, [sp, #40]	; 0x28
 800790a:	7aca      	ldrb	r2, [r1, #11]
 800790c:	4850      	ldr	r0, [pc, #320]	; (8007a50 <PxMessagingTask+0xb40>)
 800790e:	7800      	ldrb	r0, [r0, #0]
 8007910:	4681      	mov	r9, r0
 8007912:	7a48      	ldrb	r0, [r1, #9]
 8007914:	4682      	mov	sl, r0
 8007916:	7b08      	ldrb	r0, [r1, #12]
 8007918:	1e43      	subs	r3, r0, #1
 800791a:	4198      	sbcs	r0, r3
 800791c:	9003      	str	r0, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800791e:	7908      	ldrb	r0, [r1, #4]
 8007920:	0600      	lsls	r0, r0, #24
 8007922:	4684      	mov	ip, r0
 8007924:	7948      	ldrb	r0, [r1, #5]
 8007926:	0400      	lsls	r0, r0, #16
 8007928:	4460      	add	r0, ip
 800792a:	79cb      	ldrb	r3, [r1, #7]
 800792c:	469c      	mov	ip, r3
 800792e:	4460      	add	r0, ip
 8007930:	798b      	ldrb	r3, [r1, #6]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	469c      	mov	ip, r3
 8007936:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 8007938:	9002      	str	r0, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800793a:	5d78      	ldrb	r0, [r7, r5]
 800793c:	0600      	lsls	r0, r0, #24
 800793e:	78cd      	ldrb	r5, [r1, #3]
 8007940:	1940      	adds	r0, r0, r5
 8007942:	784d      	ldrb	r5, [r1, #1]
 8007944:	042d      	lsls	r5, r5, #16
 8007946:	1940      	adds	r0, r0, r5
 8007948:	788d      	ldrb	r5, [r1, #2]
 800794a:	022d      	lsls	r5, r5, #8
 800794c:	1940      	adds	r0, r0, r5
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800794e:	9001      	str	r0, [sp, #4]
 8007950:	7a09      	ldrb	r1, [r1, #8]
 8007952:	9100      	str	r1, [sp, #0]
 8007954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007956:	4649      	mov	r1, r9
 8007958:	4650      	mov	r0, sl
 800795a:	f7ff f8d3 	bl	8006b04 <StartScastDMAStream>
							break;								
 800795e:	2300      	movs	r3, #0
 8007960:	4699      	mov	r9, r3
 8007962:	f7ff fb05 	bl	8006f70 <PxMessagingTask+0x60>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 8007966:	4b39      	ldr	r3, [pc, #228]	; (8007a4c <PxMessagingTask+0xb3c>)
 8007968:	199b      	adds	r3, r3, r6
 800796a:	5d5b      	ldrb	r3, [r3, r5]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d000      	beq.n	8007972 <PxMessagingTask+0xa62>
 8007970:	e09b      	b.n	8007aaa <PxMessagingTask+0xb9a>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 8007972:	2238      	movs	r2, #56	; 0x38
 8007974:	4362      	muls	r2, r4
 8007976:	4b35      	ldr	r3, [pc, #212]	; (8007a4c <PxMessagingTask+0xb3c>)
 8007978:	189b      	adds	r3, r3, r2
 800797a:	195d      	adds	r5, r3, r5
 800797c:	78ab      	ldrb	r3, [r5, #2]
 800797e:	061b      	lsls	r3, r3, #24
 8007980:	78ea      	ldrb	r2, [r5, #3]
 8007982:	0412      	lsls	r2, r2, #16
 8007984:	189b      	adds	r3, r3, r2
 8007986:	796a      	ldrb	r2, [r5, #5]
 8007988:	189b      	adds	r3, r3, r2
 800798a:	792a      	ldrb	r2, [r5, #4]
 800798c:	0212      	lsls	r2, r2, #8
 800798e:	189b      	adds	r3, r3, r2
									switch (cMessage[port-1][1+shift])											// requested format
 8007990:	786a      	ldrb	r2, [r5, #1]
 8007992:	3a01      	subs	r2, #1
 8007994:	b2d1      	uxtb	r1, r2
 8007996:	2907      	cmp	r1, #7
 8007998:	d901      	bls.n	800799e <PxMessagingTask+0xa8e>
 800799a:	f000 fd1d 	bl	80083d8 <PxMessagingTask+0x14c8>
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	0092      	lsls	r2, r2, #2
 80079a2:	492c      	ldr	r1, [pc, #176]	; (8007a54 <PxMessagingTask+0xb44>)
 80079a4:	588a      	ldr	r2, [r1, r2]
 80079a6:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 80079a8:	781a      	ldrb	r2, [r3, #0]
 80079aa:	4b2b      	ldr	r3, [pc, #172]	; (8007a58 <PxMessagingTask+0xb48>)
 80079ac:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 80079ae:	2201      	movs	r2, #1
 80079b0:	211f      	movs	r1, #31
 80079b2:	9806      	ldr	r0, [sp, #24]
 80079b4:	f7fe fa12 	bl	8005ddc <SendMessageToModule>
 80079b8:	2300      	movs	r3, #0
 80079ba:	4699      	mov	r9, r3
 80079bc:	f7ff fad8 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[0] = *(__IO int8_t *)temp32; 
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	4b25      	ldr	r3, [pc, #148]	; (8007a58 <PxMessagingTask+0xb48>)
 80079c4:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 80079c6:	2201      	movs	r2, #1
 80079c8:	211f      	movs	r1, #31
 80079ca:	9806      	ldr	r0, [sp, #24]
 80079cc:	f7fe fa06 	bl	8005ddc <SendMessageToModule>
 80079d0:	2300      	movs	r3, #0
 80079d2:	4699      	mov	r9, r3
 80079d4:	f7ff facc 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 80079d8:	8819      	ldrh	r1, [r3, #0]
 80079da:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <PxMessagingTask+0xb48>)
 80079dc:	7011      	strb	r1, [r2, #0]
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	0a1b      	lsrs	r3, r3, #8
 80079e2:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 80079e4:	2202      	movs	r2, #2
 80079e6:	211f      	movs	r1, #31
 80079e8:	9806      	ldr	r0, [sp, #24]
 80079ea:	f7fe f9f7 	bl	8005ddc <SendMessageToModule>
 80079ee:	2300      	movs	r3, #0
 80079f0:	4699      	mov	r9, r3
 80079f2:	f7ff fabd 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 80079f6:	8819      	ldrh	r1, [r3, #0]
 80079f8:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <PxMessagingTask+0xb48>)
 80079fa:	7011      	strb	r1, [r2, #0]
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b21b      	sxth	r3, r3
 8007a00:	121b      	asrs	r3, r3, #8
 8007a02:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8007a04:	2202      	movs	r2, #2
 8007a06:	211f      	movs	r1, #31
 8007a08:	9806      	ldr	r0, [sp, #24]
 8007a0a:	f7fe f9e7 	bl	8005ddc <SendMessageToModule>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4699      	mov	r9, r3
 8007a12:	f7ff faad 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8007a16:	6819      	ldr	r1, [r3, #0]
 8007a18:	4a0f      	ldr	r2, [pc, #60]	; (8007a58 <PxMessagingTask+0xb48>)
 8007a1a:	7011      	strb	r1, [r2, #0]
 8007a1c:	6819      	ldr	r1, [r3, #0]
 8007a1e:	0a09      	lsrs	r1, r1, #8
 8007a20:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8007a22:	6819      	ldr	r1, [r3, #0]
 8007a24:	0c09      	lsrs	r1, r1, #16
 8007a26:	7091      	strb	r1, [r2, #2]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	0e1b      	lsrs	r3, r3, #24
 8007a2c:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 8007a2e:	2204      	movs	r2, #4
 8007a30:	211f      	movs	r1, #31
 8007a32:	9806      	ldr	r0, [sp, #24]
 8007a34:	f7fe f9d2 	bl	8005ddc <SendMessageToModule>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4699      	mov	r9, r3
 8007a3c:	f7ff fa98 	bl	8006f70 <PxMessagingTask+0x60>
 8007a40:	20007ff0 	.word	0x20007ff0
 8007a44:	deadbeef 	.word	0xdeadbeef
 8007a48:	2000100a 	.word	0x2000100a
 8007a4c:	20000de0 	.word	0x20000de0
 8007a50:	20001298 	.word	0x20001298
 8007a54:	08018dd4 	.word	0x08018dd4
 8007a58:	20001164 	.word	0x20001164
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8007a5c:	6819      	ldr	r1, [r3, #0]
 8007a5e:	4aef      	ldr	r2, [pc, #956]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007a60:	7011      	strb	r1, [r2, #0]
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	1209      	asrs	r1, r1, #8
 8007a66:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8007a68:	6819      	ldr	r1, [r3, #0]
 8007a6a:	1409      	asrs	r1, r1, #16
 8007a6c:	7091      	strb	r1, [r2, #2]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	161b      	asrs	r3, r3, #24
 8007a72:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 8007a74:	2204      	movs	r2, #4
 8007a76:	211f      	movs	r1, #31
 8007a78:	9806      	ldr	r0, [sp, #24]
 8007a7a:	f7fe f9af 	bl	8005ddc <SendMessageToModule>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4699      	mov	r9, r3
 8007a82:	f7ff fa75 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 8007a86:	7819      	ldrb	r1, [r3, #0]
 8007a88:	4ae4      	ldr	r2, [pc, #912]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007a8a:	7011      	strb	r1, [r2, #0]
 8007a8c:	7859      	ldrb	r1, [r3, #1]
 8007a8e:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 8007a90:	7899      	ldrb	r1, [r3, #2]
 8007a92:	7091      	strb	r1, [r2, #2]
 8007a94:	78db      	ldrb	r3, [r3, #3]
 8007a96:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 8007a98:	2208      	movs	r2, #8
 8007a9a:	211f      	movs	r1, #31
 8007a9c:	9806      	ldr	r0, [sp, #24]
 8007a9e:	f7fe f99d 	bl	8005ddc <SendMessageToModule>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4699      	mov	r9, r3
 8007aa6:	f7ff fa63 	bl	8006f70 <PxMessagingTask+0x60>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d01f      	beq.n	8007aee <PxMessagingTask+0xbde>
									}
 8007aae:	2200      	movs	r2, #0
 8007ab0:	4691      	mov	r9, r2
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d801      	bhi.n	8007aba <PxMessagingTask+0xbaa>
 8007ab6:	f7ff fa5b 	bl	8006f70 <PxMessagingTask+0x60>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 8007aba:	3b04      	subs	r3, #4
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4ad8      	ldr	r2, [pc, #864]	; (8007e20 <PxMessagingTask+0xf10>)
 8007ac0:	5899      	ldr	r1, [r3, r2]
 8007ac2:	220f      	movs	r2, #15
 8007ac4:	400a      	ands	r2, r1
 8007ac6:	4bd5      	ldr	r3, [pc, #852]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007ac8:	701a      	strb	r2, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 8007aca:	454a      	cmp	r2, r9
 8007acc:	d100      	bne.n	8007ad0 <PxMessagingTask+0xbc0>
 8007ace:	e0b0      	b.n	8007c32 <PxMessagingTask+0xd22>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 8007ad0:	0c09      	lsrs	r1, r1, #16
 8007ad2:	2380      	movs	r3, #128	; 0x80
 8007ad4:	059b      	lsls	r3, r3, #22
 8007ad6:	18cb      	adds	r3, r1, r3
										switch (messageParams[0])											// requested format
 8007ad8:	3a01      	subs	r2, #1
 8007ada:	b2d0      	uxtb	r0, r2
 8007adc:	2807      	cmp	r0, #7
 8007ade:	d901      	bls.n	8007ae4 <PxMessagingTask+0xbd4>
 8007ae0:	f000 fc82 	bl	80083e8 <PxMessagingTask+0x14d8>
 8007ae4:	b2d2      	uxtb	r2, r2
 8007ae6:	0092      	lsls	r2, r2, #2
 8007ae8:	48ce      	ldr	r0, [pc, #824]	; (8007e24 <PxMessagingTask+0xf14>)
 8007aea:	5882      	ldr	r2, [r0, r2]
 8007aec:	4697      	mov	pc, r2
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 8007aee:	4bce      	ldr	r3, [pc, #824]	; (8007e28 <PxMessagingTask+0xf18>)
 8007af0:	2038      	movs	r0, #56	; 0x38
 8007af2:	4360      	muls	r0, r4
 8007af4:	1818      	adds	r0, r3, r0
 8007af6:	1841      	adds	r1, r0, r1
 8007af8:	3901      	subs	r1, #1
 8007afa:	2000      	movs	r0, #0
 8007afc:	7008      	strb	r0, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 8007afe:	1c68      	adds	r0, r5, #1
 8007b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b02:	4694      	mov	ip, r2
 8007b04:	4460      	add	r0, ip
 8007b06:	18c0      	adds	r0, r0, r3
 8007b08:	f7fc fe16 	bl	8004738 <IsModuleParameter>
 8007b0c:	9008      	str	r0, [sp, #32]
									if (temp == 0) {																					// Parameter does not exist
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d013      	beq.n	8007b3a <PxMessagingTask+0xc2a>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 8007b12:	3801      	subs	r0, #1
 8007b14:	4ac5      	ldr	r2, [pc, #788]	; (8007e2c <PxMessagingTask+0xf1c>)
 8007b16:	210c      	movs	r1, #12
 8007b18:	4341      	muls	r1, r0
 8007b1a:	588b      	ldr	r3, [r1, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 8007b1c:	1852      	adds	r2, r2, r1
 8007b1e:	7912      	ldrb	r2, [r2, #4]
 8007b20:	49be      	ldr	r1, [pc, #760]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007b22:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 8007b24:	3a01      	subs	r2, #1
 8007b26:	b2d1      	uxtb	r1, r2
 8007b28:	2907      	cmp	r1, #7
 8007b2a:	d901      	bls.n	8007b30 <PxMessagingTask+0xc20>
 8007b2c:	f000 fc58 	bl	80083e0 <PxMessagingTask+0x14d0>
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	0092      	lsls	r2, r2, #2
 8007b34:	49be      	ldr	r1, [pc, #760]	; (8007e30 <PxMessagingTask+0xf20>)
 8007b36:	588a      	ldr	r2, [r1, r2]
 8007b38:	4697      	mov	pc, r2
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	211f      	movs	r1, #31
 8007b3e:	9806      	ldr	r0, [sp, #24]
 8007b40:	f7fe f94c 	bl	8005ddc <SendMessageToModule>
 8007b44:	2300      	movs	r3, #0
 8007b46:	4699      	mov	r9, r3
 8007b48:	f7ff fa12 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[1] = *(__IO uint8_t *)temp32; 
 8007b4c:	781a      	ldrb	r2, [r3, #0]
 8007b4e:	4bb3      	ldr	r3, [pc, #716]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007b50:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8007b52:	2202      	movs	r2, #2
 8007b54:	211f      	movs	r1, #31
 8007b56:	9806      	ldr	r0, [sp, #24]
 8007b58:	f7fe f940 	bl	8005ddc <SendMessageToModule>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4699      	mov	r9, r3
 8007b60:	f7ff fa06 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[1] = *(__IO int8_t *)temp32; 
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	4bad      	ldr	r3, [pc, #692]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007b68:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	211f      	movs	r1, #31
 8007b6e:	9806      	ldr	r0, [sp, #24]
 8007b70:	f7fe f934 	bl	8005ddc <SendMessageToModule>
 8007b74:	2300      	movs	r3, #0
 8007b76:	4699      	mov	r9, r3
 8007b78:	f7ff f9fa 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8007b7c:	8819      	ldrh	r1, [r3, #0]
 8007b7e:	4aa7      	ldr	r2, [pc, #668]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007b80:	7051      	strb	r1, [r2, #1]
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	0a1b      	lsrs	r3, r3, #8
 8007b86:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8007b88:	2203      	movs	r2, #3
 8007b8a:	211f      	movs	r1, #31
 8007b8c:	9806      	ldr	r0, [sp, #24]
 8007b8e:	f7fe f925 	bl	8005ddc <SendMessageToModule>
 8007b92:	2300      	movs	r3, #0
 8007b94:	4699      	mov	r9, r3
 8007b96:	f7ff f9eb 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8007b9a:	8819      	ldrh	r1, [r3, #0]
 8007b9c:	4a9f      	ldr	r2, [pc, #636]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007b9e:	7051      	strb	r1, [r2, #1]
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b21b      	sxth	r3, r3
 8007ba4:	121b      	asrs	r3, r3, #8
 8007ba6:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8007ba8:	2203      	movs	r2, #3
 8007baa:	211f      	movs	r1, #31
 8007bac:	9806      	ldr	r0, [sp, #24]
 8007bae:	f7fe f915 	bl	8005ddc <SendMessageToModule>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4699      	mov	r9, r3
 8007bb6:	f7ff f9db 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8007bba:	6819      	ldr	r1, [r3, #0]
 8007bbc:	4a97      	ldr	r2, [pc, #604]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007bbe:	7051      	strb	r1, [r2, #1]
 8007bc0:	6819      	ldr	r1, [r3, #0]
 8007bc2:	0a09      	lsrs	r1, r1, #8
 8007bc4:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8007bc6:	6819      	ldr	r1, [r3, #0]
 8007bc8:	0c09      	lsrs	r1, r1, #16
 8007bca:	70d1      	strb	r1, [r2, #3]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	0e1b      	lsrs	r3, r3, #24
 8007bd0:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8007bd2:	2205      	movs	r2, #5
 8007bd4:	211f      	movs	r1, #31
 8007bd6:	9806      	ldr	r0, [sp, #24]
 8007bd8:	f7fe f900 	bl	8005ddc <SendMessageToModule>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4699      	mov	r9, r3
 8007be0:	f7ff f9c6 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8007be4:	6819      	ldr	r1, [r3, #0]
 8007be6:	4a8d      	ldr	r2, [pc, #564]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007be8:	7051      	strb	r1, [r2, #1]
 8007bea:	6819      	ldr	r1, [r3, #0]
 8007bec:	1209      	asrs	r1, r1, #8
 8007bee:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8007bf0:	6819      	ldr	r1, [r3, #0]
 8007bf2:	1409      	asrs	r1, r1, #16
 8007bf4:	70d1      	strb	r1, [r2, #3]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	161b      	asrs	r3, r3, #24
 8007bfa:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 8007bfc:	2205      	movs	r2, #5
 8007bfe:	211f      	movs	r1, #31
 8007c00:	9806      	ldr	r0, [sp, #24]
 8007c02:	f7fe f8eb 	bl	8005ddc <SendMessageToModule>
 8007c06:	2300      	movs	r3, #0
 8007c08:	4699      	mov	r9, r3
 8007c0a:	f7ff f9b1 	bl	8006f70 <PxMessagingTask+0x60>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 8007c0e:	7819      	ldrb	r1, [r3, #0]
 8007c10:	4a82      	ldr	r2, [pc, #520]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007c12:	7051      	strb	r1, [r2, #1]
 8007c14:	7859      	ldrb	r1, [r3, #1]
 8007c16:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 8007c18:	7899      	ldrb	r1, [r3, #2]
 8007c1a:	70d1      	strb	r1, [r2, #3]
 8007c1c:	78db      	ldrb	r3, [r3, #3]
 8007c1e:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8007c20:	2209      	movs	r2, #9
 8007c22:	211f      	movs	r1, #31
 8007c24:	9806      	ldr	r0, [sp, #24]
 8007c26:	f7fe f8d9 	bl	8005ddc <SendMessageToModule>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	4699      	mov	r9, r3
 8007c2e:	f7ff f99f 	bl	8006f70 <PxMessagingTask+0x60>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 8007c32:	2201      	movs	r2, #1
 8007c34:	211f      	movs	r1, #31
 8007c36:	9806      	ldr	r0, [sp, #24]
 8007c38:	f7fe f8d0 	bl	8005ddc <SendMessageToModule>
 8007c3c:	f7ff f998 	bl	8006f70 <PxMessagingTask+0x60>
												messageParams[1] = *(__IO uint8_t *)temp32; 
 8007c40:	781a      	ldrb	r2, [r3, #0]
 8007c42:	4b76      	ldr	r3, [pc, #472]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007c44:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8007c46:	2202      	movs	r2, #2
 8007c48:	211f      	movs	r1, #31
 8007c4a:	9806      	ldr	r0, [sp, #24]
 8007c4c:	f7fe f8c6 	bl	8005ddc <SendMessageToModule>
 8007c50:	2300      	movs	r3, #0
 8007c52:	4699      	mov	r9, r3
 8007c54:	f7ff f98c 	bl	8006f70 <PxMessagingTask+0x60>
												messageParams[1] = *(__IO int8_t *)temp32; 
 8007c58:	781a      	ldrb	r2, [r3, #0]
 8007c5a:	4b70      	ldr	r3, [pc, #448]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007c5c:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 8007c5e:	2202      	movs	r2, #2
 8007c60:	211f      	movs	r1, #31
 8007c62:	9806      	ldr	r0, [sp, #24]
 8007c64:	f7fe f8ba 	bl	8005ddc <SendMessageToModule>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4699      	mov	r9, r3
 8007c6c:	f7ff f980 	bl	8006f70 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 8007c70:	8819      	ldrh	r1, [r3, #0]
 8007c72:	4a6a      	ldr	r2, [pc, #424]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007c74:	7051      	strb	r1, [r2, #1]
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	0a1b      	lsrs	r3, r3, #8
 8007c7a:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	211f      	movs	r1, #31
 8007c80:	9806      	ldr	r0, [sp, #24]
 8007c82:	f7fe f8ab 	bl	8005ddc <SendMessageToModule>
 8007c86:	2300      	movs	r3, #0
 8007c88:	4699      	mov	r9, r3
 8007c8a:	f7ff f971 	bl	8006f70 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 8007c8e:	8819      	ldrh	r1, [r3, #0]
 8007c90:	4a62      	ldr	r2, [pc, #392]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007c92:	7051      	strb	r1, [r2, #1]
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b21b      	sxth	r3, r3
 8007c98:	121b      	asrs	r3, r3, #8
 8007c9a:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 8007c9c:	2203      	movs	r2, #3
 8007c9e:	211f      	movs	r1, #31
 8007ca0:	9806      	ldr	r0, [sp, #24]
 8007ca2:	f7fe f89b 	bl	8005ddc <SendMessageToModule>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4699      	mov	r9, r3
 8007caa:	f7ff f961 	bl	8006f70 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 8007cae:	6819      	ldr	r1, [r3, #0]
 8007cb0:	4a5a      	ldr	r2, [pc, #360]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007cb2:	7051      	strb	r1, [r2, #1]
 8007cb4:	6819      	ldr	r1, [r3, #0]
 8007cb6:	0a09      	lsrs	r1, r1, #8
 8007cb8:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 8007cba:	6819      	ldr	r1, [r3, #0]
 8007cbc:	0c09      	lsrs	r1, r1, #16
 8007cbe:	70d1      	strb	r1, [r2, #3]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	0e1b      	lsrs	r3, r3, #24
 8007cc4:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 8007cc6:	2205      	movs	r2, #5
 8007cc8:	211f      	movs	r1, #31
 8007cca:	9806      	ldr	r0, [sp, #24]
 8007ccc:	f7fe f886 	bl	8005ddc <SendMessageToModule>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4699      	mov	r9, r3
 8007cd4:	f7ff f94c 	bl	8006f70 <PxMessagingTask+0x60>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 8007cd8:	6819      	ldr	r1, [r3, #0]
 8007cda:	4a50      	ldr	r2, [pc, #320]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007cdc:	7051      	strb	r1, [r2, #1]
 8007cde:	6819      	ldr	r1, [r3, #0]
 8007ce0:	1209      	asrs	r1, r1, #8
 8007ce2:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 8007ce4:	6819      	ldr	r1, [r3, #0]
 8007ce6:	1409      	asrs	r1, r1, #16
 8007ce8:	70d1      	strb	r1, [r2, #3]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	161b      	asrs	r3, r3, #24
 8007cee:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 8007cf0:	2205      	movs	r2, #5
 8007cf2:	211f      	movs	r1, #31
 8007cf4:	9806      	ldr	r0, [sp, #24]
 8007cf6:	f7fe f871 	bl	8005ddc <SendMessageToModule>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	4699      	mov	r9, r3
 8007cfe:	f7ff f937 	bl	8006f70 <PxMessagingTask+0x60>
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 8007d02:	781a      	ldrb	r2, [r3, #0]
 8007d04:	4b45      	ldr	r3, [pc, #276]	; (8007e1c <PxMessagingTask+0xf0c>)
 8007d06:	705a      	strb	r2, [r3, #1]
 8007d08:	4a4a      	ldr	r2, [pc, #296]	; (8007e34 <PxMessagingTask+0xf24>)
 8007d0a:	188a      	adds	r2, r1, r2
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	709a      	strb	r2, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 8007d10:	4a49      	ldr	r2, [pc, #292]	; (8007e38 <PxMessagingTask+0xf28>)
 8007d12:	188a      	adds	r2, r1, r2
 8007d14:	7812      	ldrb	r2, [r2, #0]
 8007d16:	70da      	strb	r2, [r3, #3]
 8007d18:	4a48      	ldr	r2, [pc, #288]	; (8007e3c <PxMessagingTask+0xf2c>)
 8007d1a:	4694      	mov	ip, r2
 8007d1c:	4461      	add	r1, ip
 8007d1e:	780a      	ldrb	r2, [r1, #0]
 8007d20:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 8007d22:	2209      	movs	r2, #9
 8007d24:	211f      	movs	r1, #31
 8007d26:	9806      	ldr	r0, [sp, #24]
 8007d28:	f7fe f858 	bl	8005ddc <SendMessageToModule>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4699      	mov	r9, r3
 8007d30:	f7ff f91e 	bl	8006f70 <PxMessagingTask+0x60>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8007d34:	4b42      	ldr	r3, [pc, #264]	; (8007e40 <PxMessagingTask+0xf30>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2002      	movs	r0, #2
 8007d3c:	4240      	negs	r0, r0
 8007d3e:	17c1      	asrs	r1, r0, #31
 8007d40:	1812      	adds	r2, r2, r0
 8007d42:	414b      	adcs	r3, r1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <PxMessagingTask+0xe4e>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 8007d48:	4b3e      	ldr	r3, [pc, #248]	; (8007e44 <PxMessagingTask+0xf34>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d100      	bne.n	8007d52 <PxMessagingTask+0xe42>
 8007d50:	e35b      	b.n	800840a <PxMessagingTask+0x14fa>
 8007d52:	2500      	movs	r5, #0
 8007d54:	4b3b      	ldr	r3, [pc, #236]	; (8007e44 <PxMessagingTask+0xf34>)
 8007d56:	701d      	strb	r5, [r3, #0]
 8007d58:	46a9      	mov	r9, r5
 8007d5a:	f7ff f909 	bl	8006f70 <PxMessagingTask+0x60>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <PxMessagingTask+0xe56>
 8007d62:	2a01      	cmp	r2, #1
 8007d64:	d8f0      	bhi.n	8007d48 <PxMessagingTask+0xe38>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 8007d66:	2238      	movs	r2, #56	; 0x38
 8007d68:	4362      	muls	r2, r4
 8007d6a:	4b2f      	ldr	r3, [pc, #188]	; (8007e28 <PxMessagingTask+0xf18>)
 8007d6c:	189b      	adds	r3, r3, r2
 8007d6e:	5d5b      	ldrb	r3, [r3, r5]
 8007d70:	4a35      	ldr	r2, [pc, #212]	; (8007e48 <PxMessagingTask+0xf38>)
 8007d72:	7013      	strb	r3, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d8e7      	bhi.n	8007d48 <PxMessagingTask+0xe38>
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4a34      	ldr	r2, [pc, #208]	; (8007e4c <PxMessagingTask+0xf3c>)
 8007d7c:	58d3      	ldr	r3, [r2, r3]
 8007d7e:	469f      	mov	pc, r3
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 8007d80:	4b30      	ldr	r3, [pc, #192]	; (8007e44 <PxMessagingTask+0xf34>)
 8007d82:	2210      	movs	r2, #16
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	2300      	movs	r3, #0
 8007d88:	4699      	mov	r9, r3
 8007d8a:	f7ff f8f1 	bl	8006f70 <PxMessagingTask+0x60>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 8007d8e:	4b2c      	ldr	r3, [pc, #176]	; (8007e40 <PxMessagingTask+0xf30>)
 8007d90:	2238      	movs	r2, #56	; 0x38
 8007d92:	4362      	muls	r2, r4
 8007d94:	4924      	ldr	r1, [pc, #144]	; (8007e28 <PxMessagingTask+0xf18>)
 8007d96:	1889      	adds	r1, r1, r2
 8007d98:	1949      	adds	r1, r1, r5
 8007d9a:	784a      	ldrb	r2, [r1, #1]
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	e7d1      	b.n	8007d48 <PxMessagingTask+0xe38>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 8007da4:	4b26      	ldr	r3, [pc, #152]	; (8007e40 <PxMessagingTask+0xf30>)
 8007da6:	2238      	movs	r2, #56	; 0x38
 8007da8:	4362      	muls	r2, r4
 8007daa:	491f      	ldr	r1, [pc, #124]	; (8007e28 <PxMessagingTask+0xf18>)
 8007dac:	1889      	adds	r1, r1, r2
 8007dae:	1949      	adds	r1, r1, r5
 8007db0:	2201      	movs	r2, #1
 8007db2:	568a      	ldrsb	r2, [r1, r2]
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	17d2      	asrs	r2, r2, #31
 8007db8:	605a      	str	r2, [r3, #4]
 8007dba:	e7c5      	b.n	8007d48 <PxMessagingTask+0xe38>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 8007dbc:	4a20      	ldr	r2, [pc, #128]	; (8007e40 <PxMessagingTask+0xf30>)
 8007dbe:	2338      	movs	r3, #56	; 0x38
 8007dc0:	4363      	muls	r3, r4
 8007dc2:	4919      	ldr	r1, [pc, #100]	; (8007e28 <PxMessagingTask+0xf18>)
 8007dc4:	18c9      	adds	r1, r1, r3
 8007dc6:	1949      	adds	r1, r1, r5
 8007dc8:	788b      	ldrb	r3, [r1, #2]
 8007dca:	021b      	lsls	r3, r3, #8
 8007dcc:	7849      	ldrb	r1, [r1, #1]
 8007dce:	185b      	adds	r3, r3, r1
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	17db      	asrs	r3, r3, #31
 8007dd4:	6053      	str	r3, [r2, #4]
 8007dd6:	e7b7      	b.n	8007d48 <PxMessagingTask+0xe38>
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 8007dd8:	4a19      	ldr	r2, [pc, #100]	; (8007e40 <PxMessagingTask+0xf30>)
 8007dda:	2338      	movs	r3, #56	; 0x38
 8007ddc:	4363      	muls	r3, r4
 8007dde:	4912      	ldr	r1, [pc, #72]	; (8007e28 <PxMessagingTask+0xf18>)
 8007de0:	18c9      	adds	r1, r1, r3
 8007de2:	1949      	adds	r1, r1, r5
 8007de4:	788b      	ldrb	r3, [r1, #2]
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	7849      	ldrb	r1, [r1, #1]
 8007dea:	185b      	adds	r3, r3, r1
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	17db      	asrs	r3, r3, #31
 8007df0:	6053      	str	r3, [r2, #4]
 8007df2:	e7a9      	b.n	8007d48 <PxMessagingTask+0xe38>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8007df4:	4a12      	ldr	r2, [pc, #72]	; (8007e40 <PxMessagingTask+0xf30>)
 8007df6:	2338      	movs	r3, #56	; 0x38
 8007df8:	4363      	muls	r3, r4
 8007dfa:	490b      	ldr	r1, [pc, #44]	; (8007e28 <PxMessagingTask+0xf18>)
 8007dfc:	18c9      	adds	r1, r1, r3
 8007dfe:	1949      	adds	r1, r1, r5
 8007e00:	788b      	ldrb	r3, [r1, #2]
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	78c8      	ldrb	r0, [r1, #3]
 8007e06:	0400      	lsls	r0, r0, #16
 8007e08:	181b      	adds	r3, r3, r0
 8007e0a:	7848      	ldrb	r0, [r1, #1]
 8007e0c:	181b      	adds	r3, r3, r0
 8007e0e:	7909      	ldrb	r1, [r1, #4]
 8007e10:	0609      	lsls	r1, r1, #24
 8007e12:	185b      	adds	r3, r3, r1
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	2300      	movs	r3, #0
 8007e18:	6053      	str	r3, [r2, #4]
 8007e1a:	e795      	b.n	8007d48 <PxMessagingTask+0xe38>
 8007e1c:	20001164 	.word	0x20001164
 8007e20:	20006998 	.word	0x20006998
 8007e24:	08018df4 	.word	0x08018df4
 8007e28:	20000de0 	.word	0x20000de0
 8007e2c:	20000040 	.word	0x20000040
 8007e30:	08018e14 	.word	0x08018e14
 8007e34:	20000001 	.word	0x20000001
 8007e38:	20000002 	.word	0x20000002
 8007e3c:	20000003 	.word	0x20000003
 8007e40:	20001398 	.word	0x20001398
 8007e44:	200013a0 	.word	0x200013a0
 8007e48:	2000003c 	.word	0x2000003c
 8007e4c:	08018e34 	.word	0x08018e34
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 8007e50:	4ae5      	ldr	r2, [pc, #916]	; (80081e8 <PxMessagingTask+0x12d8>)
 8007e52:	2338      	movs	r3, #56	; 0x38
 8007e54:	4363      	muls	r3, r4
 8007e56:	49e5      	ldr	r1, [pc, #916]	; (80081ec <PxMessagingTask+0x12dc>)
 8007e58:	18c9      	adds	r1, r1, r3
 8007e5a:	1949      	adds	r1, r1, r5
 8007e5c:	788b      	ldrb	r3, [r1, #2]
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	7848      	ldrb	r0, [r1, #1]
 8007e62:	181b      	adds	r3, r3, r0
 8007e64:	78c8      	ldrb	r0, [r1, #3]
 8007e66:	0400      	lsls	r0, r0, #16
 8007e68:	181b      	adds	r3, r3, r0
 8007e6a:	7909      	ldrb	r1, [r1, #4]
 8007e6c:	0609      	lsls	r1, r1, #24
 8007e6e:	185b      	adds	r3, r3, r1
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	17db      	asrs	r3, r3, #31
 8007e74:	6053      	str	r3, [r2, #4]
 8007e76:	e767      	b.n	8007d48 <PxMessagingTask+0xe38>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 8007e78:	4adb      	ldr	r2, [pc, #876]	; (80081e8 <PxMessagingTask+0x12d8>)
 8007e7a:	2338      	movs	r3, #56	; 0x38
 8007e7c:	4363      	muls	r3, r4
 8007e7e:	49db      	ldr	r1, [pc, #876]	; (80081ec <PxMessagingTask+0x12dc>)
 8007e80:	18c9      	adds	r1, r1, r3
 8007e82:	1949      	adds	r1, r1, r5
 8007e84:	788b      	ldrb	r3, [r1, #2]
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	78c8      	ldrb	r0, [r1, #3]
 8007e8a:	0400      	lsls	r0, r0, #16
 8007e8c:	181b      	adds	r3, r3, r0
 8007e8e:	7848      	ldrb	r0, [r1, #1]
 8007e90:	181b      	adds	r3, r3, r0
 8007e92:	7909      	ldrb	r1, [r1, #4]
 8007e94:	0609      	lsls	r1, r1, #24
 8007e96:	185b      	adds	r3, r3, r1
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	6053      	str	r3, [r2, #4]
 8007e9e:	e753      	b.n	8007d48 <PxMessagingTask+0xe38>
							responseStatus = BOS_OK;		// Initialize response
 8007ea0:	4bd3      	ldr	r3, [pc, #844]	; (80081f0 <PxMessagingTask+0x12e0>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 8007ea6:	46a9      	mov	r9, r5
 8007ea8:	4bd0      	ldr	r3, [pc, #832]	; (80081ec <PxMessagingTask+0x12dc>)
 8007eaa:	199b      	adds	r3, r3, r6
 8007eac:	5d5b      	ldrb	r3, [r3, r5]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d100      	bne.n	8007eb4 <PxMessagingTask+0xfa4>
 8007eb2:	e113      	b.n	80080dc <PxMessagingTask+0x11cc>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 8007eb4:	2b1e      	cmp	r3, #30
 8007eb6:	d900      	bls.n	8007eba <PxMessagingTask+0xfaa>
 8007eb8:	e0f8      	b.n	80080ac <PxMessagingTask+0x119c>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 8007eba:	1e5d      	subs	r5, r3, #1
 8007ebc:	00aa      	lsls	r2, r5, #2
 8007ebe:	4bcd      	ldr	r3, [pc, #820]	; (80081f4 <PxMessagingTask+0x12e4>)
 8007ec0:	58d2      	ldr	r2, [r2, r3]
 8007ec2:	0c13      	lsrs	r3, r2, #16
 8007ec4:	2180      	movs	r1, #128	; 0x80
 8007ec6:	0589      	lsls	r1, r1, #22
 8007ec8:	468c      	mov	ip, r1
 8007eca:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 8007ecc:	4649      	mov	r1, r9
 8007ece:	1c4f      	adds	r7, r1, #1
 8007ed0:	2038      	movs	r0, #56	; 0x38
 8007ed2:	4360      	muls	r0, r4
 8007ed4:	49c5      	ldr	r1, [pc, #788]	; (80081ec <PxMessagingTask+0x12dc>)
 8007ed6:	1809      	adds	r1, r1, r0
 8007ed8:	5dc9      	ldrb	r1, [r1, r7]
 8007eda:	468a      	mov	sl, r1
 8007edc:	3901      	subs	r1, #1
 8007ede:	b2c8      	uxtb	r0, r1
 8007ee0:	2807      	cmp	r0, #7
 8007ee2:	d818      	bhi.n	8007f16 <PxMessagingTask+0x1006>
 8007ee4:	b2c9      	uxtb	r1, r1
 8007ee6:	0089      	lsls	r1, r1, #2
 8007ee8:	48c3      	ldr	r0, [pc, #780]	; (80081f8 <PxMessagingTask+0x12e8>)
 8007eea:	5841      	ldr	r1, [r0, r1]
 8007eec:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007eee:	0712      	lsls	r2, r2, #28
 8007ef0:	d10a      	bne.n	8007f08 <PxMessagingTask+0xff8>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	f00b ff8a 	bl	8013e0c <malloc>
												if (temp32 != 0) {
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d027      	beq.n	8007f4c <PxMessagingTask+0x103c>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 8007efc:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007efe:	00ad      	lsls	r5, r5, #2
 8007f00:	0400      	lsls	r0, r0, #16
 8007f02:	4450      	add	r0, sl
 8007f04:	4abb      	ldr	r2, [pc, #748]	; (80081f4 <PxMessagingTask+0x12e4>)
 8007f06:	50a8      	str	r0, [r5, r2]
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 8007f08:	2138      	movs	r1, #56	; 0x38
 8007f0a:	4361      	muls	r1, r4
 8007f0c:	4ab7      	ldr	r2, [pc, #732]	; (80081ec <PxMessagingTask+0x12dc>)
 8007f0e:	1852      	adds	r2, r2, r1
 8007f10:	444a      	add	r2, r9
 8007f12:	7892      	ldrb	r2, [r2, #2]
 8007f14:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 8007f16:	2338      	movs	r3, #56	; 0x38
 8007f18:	4363      	muls	r3, r4
 8007f1a:	4ab4      	ldr	r2, [pc, #720]	; (80081ec <PxMessagingTask+0x12dc>)
 8007f1c:	18d2      	adds	r2, r2, r3
 8007f1e:	464b      	mov	r3, r9
 8007f20:	5cd3      	ldrb	r3, [r2, r3]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	0098      	lsls	r0, r3, #2
 8007f26:	49b3      	ldr	r1, [pc, #716]	; (80081f4 <PxMessagingTask+0x12e4>)
 8007f28:	5841      	ldr	r1, [r0, r1]
 8007f2a:	5dd2      	ldrb	r2, [r2, r7]
 8007f2c:	200f      	movs	r0, #15
 8007f2e:	4008      	ands	r0, r1
 8007f30:	4290      	cmp	r0, r2
 8007f32:	d100      	bne.n	8007f36 <PxMessagingTask+0x1026>
 8007f34:	e0bd      	b.n	80080b2 <PxMessagingTask+0x11a2>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	48b0      	ldr	r0, [pc, #704]	; (80081fc <PxMessagingTask+0x12ec>)
 8007f3a:	4684      	mov	ip, r0
 8007f3c:	4462      	add	r2, ip
 8007f3e:	400a      	ands	r2, r1
 8007f40:	49ac      	ldr	r1, [pc, #688]	; (80081f4 <PxMessagingTask+0x12e4>)
 8007f42:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 8007f44:	4baa      	ldr	r3, [pc, #680]	; (80081f0 <PxMessagingTask+0x12e0>)
 8007f46:	2214      	movs	r2, #20
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	e0b2      	b.n	80080b2 <PxMessagingTask+0x11a2>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8007f4c:	4ba8      	ldr	r3, [pc, #672]	; (80081f0 <PxMessagingTask+0x12e0>)
 8007f4e:	2212      	movs	r2, #18
 8007f50:	701a      	strb	r2, [r3, #0]
 8007f52:	e7e0      	b.n	8007f16 <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007f54:	0712      	lsls	r2, r2, #28
 8007f56:	d10b      	bne.n	8007f70 <PxMessagingTask+0x1060>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 8007f58:	2001      	movs	r0, #1
 8007f5a:	f00b ff57 	bl	8013e0c <malloc>
												if (temp32 != 0) {
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d100      	bne.n	8007f64 <PxMessagingTask+0x1054>
 8007f62:	e2b1      	b.n	80084c8 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 8007f64:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007f66:	00ad      	lsls	r5, r5, #2
 8007f68:	0400      	lsls	r0, r0, #16
 8007f6a:	3002      	adds	r0, #2
 8007f6c:	4aa1      	ldr	r2, [pc, #644]	; (80081f4 <PxMessagingTask+0x12e4>)
 8007f6e:	50a8      	str	r0, [r5, r2]
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 8007f70:	2138      	movs	r1, #56	; 0x38
 8007f72:	4361      	muls	r1, r4
 8007f74:	4a9d      	ldr	r2, [pc, #628]	; (80081ec <PxMessagingTask+0x12dc>)
 8007f76:	1852      	adds	r2, r2, r1
 8007f78:	444a      	add	r2, r9
 8007f7a:	7892      	ldrb	r2, [r2, #2]
 8007f7c:	b252      	sxtb	r2, r2
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	e7c9      	b.n	8007f16 <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007f82:	0712      	lsls	r2, r2, #28
 8007f84:	d10b      	bne.n	8007f9e <PxMessagingTask+0x108e>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 8007f86:	2002      	movs	r0, #2
 8007f88:	f00b ff40 	bl	8013e0c <malloc>
												if (temp32 != 0) {
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d100      	bne.n	8007f92 <PxMessagingTask+0x1082>
 8007f90:	e29a      	b.n	80084c8 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 8007f92:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007f94:	00ad      	lsls	r5, r5, #2
 8007f96:	0400      	lsls	r0, r0, #16
 8007f98:	3003      	adds	r0, #3
 8007f9a:	4a96      	ldr	r2, [pc, #600]	; (80081f4 <PxMessagingTask+0x12e4>)
 8007f9c:	50a8      	str	r0, [r5, r2]
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 8007f9e:	2138      	movs	r1, #56	; 0x38
 8007fa0:	4361      	muls	r1, r4
 8007fa2:	4a92      	ldr	r2, [pc, #584]	; (80081ec <PxMessagingTask+0x12dc>)
 8007fa4:	1852      	adds	r2, r2, r1
 8007fa6:	444a      	add	r2, r9
 8007fa8:	78d1      	ldrb	r1, [r2, #3]
 8007faa:	0209      	lsls	r1, r1, #8
 8007fac:	7892      	ldrb	r2, [r2, #2]
 8007fae:	1852      	adds	r2, r2, r1
 8007fb0:	b292      	uxth	r2, r2
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	e7af      	b.n	8007f16 <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007fb6:	0712      	lsls	r2, r2, #28
 8007fb8:	d10b      	bne.n	8007fd2 <PxMessagingTask+0x10c2>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 8007fba:	2002      	movs	r0, #2
 8007fbc:	f00b ff26 	bl	8013e0c <malloc>
												if (temp32 != 0) {
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d100      	bne.n	8007fc6 <PxMessagingTask+0x10b6>
 8007fc4:	e280      	b.n	80084c8 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 8007fc6:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007fc8:	00ad      	lsls	r5, r5, #2
 8007fca:	0400      	lsls	r0, r0, #16
 8007fcc:	3004      	adds	r0, #4
 8007fce:	4a89      	ldr	r2, [pc, #548]	; (80081f4 <PxMessagingTask+0x12e4>)
 8007fd0:	50a8      	str	r0, [r5, r2]
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 8007fd2:	2138      	movs	r1, #56	; 0x38
 8007fd4:	4361      	muls	r1, r4
 8007fd6:	4a85      	ldr	r2, [pc, #532]	; (80081ec <PxMessagingTask+0x12dc>)
 8007fd8:	1852      	adds	r2, r2, r1
 8007fda:	444a      	add	r2, r9
 8007fdc:	78d1      	ldrb	r1, [r2, #3]
 8007fde:	0209      	lsls	r1, r1, #8
 8007fe0:	7892      	ldrb	r2, [r2, #2]
 8007fe2:	1852      	adds	r2, r2, r1
 8007fe4:	b212      	sxth	r2, r2
 8007fe6:	801a      	strh	r2, [r3, #0]
 8007fe8:	e795      	b.n	8007f16 <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8007fea:	0712      	lsls	r2, r2, #28
 8007fec:	d10b      	bne.n	8008006 <PxMessagingTask+0x10f6>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 8007fee:	2004      	movs	r0, #4
 8007ff0:	f00b ff0c 	bl	8013e0c <malloc>
												if (temp32 != 0) {
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d100      	bne.n	8007ffa <PxMessagingTask+0x10ea>
 8007ff8:	e266      	b.n	80084c8 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 8007ffa:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8007ffc:	00ad      	lsls	r5, r5, #2
 8007ffe:	0400      	lsls	r0, r0, #16
 8008000:	3005      	adds	r0, #5
 8008002:	4a7c      	ldr	r2, [pc, #496]	; (80081f4 <PxMessagingTask+0x12e4>)
 8008004:	50a8      	str	r0, [r5, r2]
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 8008006:	2238      	movs	r2, #56	; 0x38
 8008008:	4362      	muls	r2, r4
 800800a:	4978      	ldr	r1, [pc, #480]	; (80081ec <PxMessagingTask+0x12dc>)
 800800c:	1889      	adds	r1, r1, r2
 800800e:	4449      	add	r1, r9
 8008010:	78ca      	ldrb	r2, [r1, #3]
 8008012:	0212      	lsls	r2, r2, #8
 8008014:	7908      	ldrb	r0, [r1, #4]
 8008016:	0400      	lsls	r0, r0, #16
 8008018:	1812      	adds	r2, r2, r0
 800801a:	7888      	ldrb	r0, [r1, #2]
 800801c:	1812      	adds	r2, r2, r0
 800801e:	7949      	ldrb	r1, [r1, #5]
 8008020:	0609      	lsls	r1, r1, #24
 8008022:	1852      	adds	r2, r2, r1
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e776      	b.n	8007f16 <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8008028:	0712      	lsls	r2, r2, #28
 800802a:	d10b      	bne.n	8008044 <PxMessagingTask+0x1134>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800802c:	2004      	movs	r0, #4
 800802e:	f00b feed 	bl	8013e0c <malloc>
												if (temp32 != 0) {
 8008032:	2800      	cmp	r0, #0
 8008034:	d100      	bne.n	8008038 <PxMessagingTask+0x1128>
 8008036:	e247      	b.n	80084c8 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 8008038:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800803a:	00ad      	lsls	r5, r5, #2
 800803c:	0400      	lsls	r0, r0, #16
 800803e:	3006      	adds	r0, #6
 8008040:	4a6c      	ldr	r2, [pc, #432]	; (80081f4 <PxMessagingTask+0x12e4>)
 8008042:	50a8      	str	r0, [r5, r2]
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 8008044:	2238      	movs	r2, #56	; 0x38
 8008046:	4362      	muls	r2, r4
 8008048:	4968      	ldr	r1, [pc, #416]	; (80081ec <PxMessagingTask+0x12dc>)
 800804a:	1889      	adds	r1, r1, r2
 800804c:	4449      	add	r1, r9
 800804e:	78ca      	ldrb	r2, [r1, #3]
 8008050:	0212      	lsls	r2, r2, #8
 8008052:	7888      	ldrb	r0, [r1, #2]
 8008054:	1812      	adds	r2, r2, r0
 8008056:	7908      	ldrb	r0, [r1, #4]
 8008058:	0400      	lsls	r0, r0, #16
 800805a:	1812      	adds	r2, r2, r0
 800805c:	7949      	ldrb	r1, [r1, #5]
 800805e:	0609      	lsls	r1, r1, #24
 8008060:	1852      	adds	r2, r2, r1
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e757      	b.n	8007f16 <PxMessagingTask+0x1006>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 8008066:	0712      	lsls	r2, r2, #28
 8008068:	d10b      	bne.n	8008082 <PxMessagingTask+0x1172>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800806a:	2004      	movs	r0, #4
 800806c:	f00b fece 	bl	8013e0c <malloc>
												if (temp32 != 0) {
 8008070:	2800      	cmp	r0, #0
 8008072:	d100      	bne.n	8008076 <PxMessagingTask+0x1166>
 8008074:	e228      	b.n	80084c8 <PxMessagingTask+0x15b8>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 8008076:	0003      	movs	r3, r0
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 8008078:	00ad      	lsls	r5, r5, #2
 800807a:	0400      	lsls	r0, r0, #16
 800807c:	3007      	adds	r0, #7
 800807e:	4a5d      	ldr	r2, [pc, #372]	; (80081f4 <PxMessagingTask+0x12e4>)
 8008080:	50a8      	str	r0, [r5, r2]
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 8008082:	2238      	movs	r2, #56	; 0x38
 8008084:	4362      	muls	r2, r4
 8008086:	4959      	ldr	r1, [pc, #356]	; (80081ec <PxMessagingTask+0x12dc>)
 8008088:	1889      	adds	r1, r1, r2
 800808a:	4449      	add	r1, r9
 800808c:	78ca      	ldrb	r2, [r1, #3]
 800808e:	0212      	lsls	r2, r2, #8
 8008090:	7908      	ldrb	r0, [r1, #4]
 8008092:	0400      	lsls	r0, r0, #16
 8008094:	1812      	adds	r2, r2, r0
 8008096:	7888      	ldrb	r0, [r1, #2]
 8008098:	1812      	adds	r2, r2, r0
 800809a:	7949      	ldrb	r1, [r1, #5]
 800809c:	0609      	lsls	r1, r1, #24
 800809e:	1852      	adds	r2, r2, r1
 80080a0:	4951      	ldr	r1, [pc, #324]	; (80081e8 <PxMessagingTask+0x12d8>)
 80080a2:	600a      	str	r2, [r1, #0]
 80080a4:	2000      	movs	r0, #0
 80080a6:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	e734      	b.n	8007f16 <PxMessagingTask+0x1006>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 80080ac:	4b50      	ldr	r3, [pc, #320]	; (80081f0 <PxMessagingTask+0x12e0>)
 80080ae:	2213      	movs	r2, #19
 80080b0:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 80080b2:	4b53      	ldr	r3, [pc, #332]	; (8008200 <PxMessagingTask+0x12f0>)
 80080b4:	799b      	ldrb	r3, [r3, #6]
 80080b6:	2240      	movs	r2, #64	; 0x40
 80080b8:	4393      	bics	r3, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	4691      	mov	r9, r2
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d001      	beq.n	80080c6 <PxMessagingTask+0x11b6>
 80080c2:	f7fe ff55 	bl	8006f70 <PxMessagingTask+0x60>
								messageParams[0] = responseStatus;
 80080c6:	4b4a      	ldr	r3, [pc, #296]	; (80081f0 <PxMessagingTask+0x12e0>)
 80080c8:	781a      	ldrb	r2, [r3, #0]
 80080ca:	4b4e      	ldr	r3, [pc, #312]	; (8008204 <PxMessagingTask+0x12f4>)
 80080cc:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 80080ce:	2201      	movs	r2, #1
 80080d0:	2121      	movs	r1, #33	; 0x21
 80080d2:	9806      	ldr	r0, [sp, #24]
 80080d4:	f7fd fe82 	bl	8005ddc <SendMessageToModule>
 80080d8:	f7fe ff4a 	bl	8006f70 <PxMessagingTask+0x60>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 80080dc:	2238      	movs	r2, #56	; 0x38
 80080de:	4362      	muls	r2, r4
 80080e0:	4b42      	ldr	r3, [pc, #264]	; (80081ec <PxMessagingTask+0x12dc>)
 80080e2:	189b      	adds	r3, r3, r2
 80080e4:	195b      	adds	r3, r3, r5
 80080e6:	789d      	ldrb	r5, [r3, #2]
 80080e8:	062d      	lsls	r5, r5, #24
 80080ea:	78da      	ldrb	r2, [r3, #3]
 80080ec:	0412      	lsls	r2, r2, #16
 80080ee:	18ad      	adds	r5, r5, r2
 80080f0:	795a      	ldrb	r2, [r3, #5]
 80080f2:	18ad      	adds	r5, r5, r2
 80080f4:	791b      	ldrb	r3, [r3, #4]
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	18ed      	adds	r5, r5, r3
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 80080fa:	23e0      	movs	r3, #224	; 0xe0
 80080fc:	061b      	lsls	r3, r3, #24
 80080fe:	18ea      	adds	r2, r5, r3
 8008100:	4b41      	ldr	r3, [pc, #260]	; (8008208 <PxMessagingTask+0x12f8>)
 8008102:	429a      	cmp	r2, r3
 8008104:	d900      	bls.n	8008108 <PxMessagingTask+0x11f8>
 8008106:	e083      	b.n	8008210 <PxMessagingTask+0x1300>
									switch (cMessage[port-1][1+shift])															// Requested format
 8008108:	2238      	movs	r2, #56	; 0x38
 800810a:	4362      	muls	r2, r4
 800810c:	4b37      	ldr	r3, [pc, #220]	; (80081ec <PxMessagingTask+0x12dc>)
 800810e:	189b      	adds	r3, r3, r2
 8008110:	444b      	add	r3, r9
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	3b01      	subs	r3, #1
 8008116:	b2da      	uxtb	r2, r3
 8008118:	2a07      	cmp	r2, #7
 800811a:	d8ca      	bhi.n	80080b2 <PxMessagingTask+0x11a2>
 800811c:	b2db      	uxtb	r3, r3
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4a3a      	ldr	r2, [pc, #232]	; (800820c <PxMessagingTask+0x12fc>)
 8008122:	58d3      	ldr	r3, [r2, r3]
 8008124:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 8008126:	2238      	movs	r2, #56	; 0x38
 8008128:	4362      	muls	r2, r4
 800812a:	4b30      	ldr	r3, [pc, #192]	; (80081ec <PxMessagingTask+0x12dc>)
 800812c:	189b      	adds	r3, r3, r2
 800812e:	444b      	add	r3, r9
 8008130:	799b      	ldrb	r3, [r3, #6]
 8008132:	702b      	strb	r3, [r5, #0]
 8008134:	e7bd      	b.n	80080b2 <PxMessagingTask+0x11a2>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 8008136:	2238      	movs	r2, #56	; 0x38
 8008138:	4362      	muls	r2, r4
 800813a:	4b2c      	ldr	r3, [pc, #176]	; (80081ec <PxMessagingTask+0x12dc>)
 800813c:	189b      	adds	r3, r3, r2
 800813e:	444b      	add	r3, r9
 8008140:	799b      	ldrb	r3, [r3, #6]
 8008142:	b25b      	sxtb	r3, r3
 8008144:	702b      	strb	r3, [r5, #0]
 8008146:	e7b4      	b.n	80080b2 <PxMessagingTask+0x11a2>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 8008148:	2238      	movs	r2, #56	; 0x38
 800814a:	4362      	muls	r2, r4
 800814c:	4b27      	ldr	r3, [pc, #156]	; (80081ec <PxMessagingTask+0x12dc>)
 800814e:	189b      	adds	r3, r3, r2
 8008150:	444b      	add	r3, r9
 8008152:	79da      	ldrb	r2, [r3, #7]
 8008154:	0212      	lsls	r2, r2, #8
 8008156:	799b      	ldrb	r3, [r3, #6]
 8008158:	189b      	adds	r3, r3, r2
 800815a:	b29b      	uxth	r3, r3
 800815c:	802b      	strh	r3, [r5, #0]
 800815e:	e7a8      	b.n	80080b2 <PxMessagingTask+0x11a2>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 8008160:	2238      	movs	r2, #56	; 0x38
 8008162:	4362      	muls	r2, r4
 8008164:	4b21      	ldr	r3, [pc, #132]	; (80081ec <PxMessagingTask+0x12dc>)
 8008166:	189b      	adds	r3, r3, r2
 8008168:	444b      	add	r3, r9
 800816a:	79da      	ldrb	r2, [r3, #7]
 800816c:	0212      	lsls	r2, r2, #8
 800816e:	799b      	ldrb	r3, [r3, #6]
 8008170:	189b      	adds	r3, r3, r2
 8008172:	b21b      	sxth	r3, r3
 8008174:	802b      	strh	r3, [r5, #0]
 8008176:	e79c      	b.n	80080b2 <PxMessagingTask+0x11a2>
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 8008178:	2338      	movs	r3, #56	; 0x38
 800817a:	4363      	muls	r3, r4
 800817c:	4a1b      	ldr	r2, [pc, #108]	; (80081ec <PxMessagingTask+0x12dc>)
 800817e:	18d2      	adds	r2, r2, r3
 8008180:	444a      	add	r2, r9
 8008182:	79d3      	ldrb	r3, [r2, #7]
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	7a11      	ldrb	r1, [r2, #8]
 8008188:	0409      	lsls	r1, r1, #16
 800818a:	185b      	adds	r3, r3, r1
 800818c:	7991      	ldrb	r1, [r2, #6]
 800818e:	185b      	adds	r3, r3, r1
 8008190:	7a52      	ldrb	r2, [r2, #9]
 8008192:	0612      	lsls	r2, r2, #24
 8008194:	189b      	adds	r3, r3, r2
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	e78b      	b.n	80080b2 <PxMessagingTask+0x11a2>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800819a:	2338      	movs	r3, #56	; 0x38
 800819c:	4363      	muls	r3, r4
 800819e:	4a13      	ldr	r2, [pc, #76]	; (80081ec <PxMessagingTask+0x12dc>)
 80081a0:	18d2      	adds	r2, r2, r3
 80081a2:	444a      	add	r2, r9
 80081a4:	79d3      	ldrb	r3, [r2, #7]
 80081a6:	021b      	lsls	r3, r3, #8
 80081a8:	7991      	ldrb	r1, [r2, #6]
 80081aa:	185b      	adds	r3, r3, r1
 80081ac:	7a11      	ldrb	r1, [r2, #8]
 80081ae:	0409      	lsls	r1, r1, #16
 80081b0:	185b      	adds	r3, r3, r1
 80081b2:	7a52      	ldrb	r2, [r2, #9]
 80081b4:	0612      	lsls	r2, r2, #24
 80081b6:	189b      	adds	r3, r3, r2
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	e77a      	b.n	80080b2 <PxMessagingTask+0x11a2>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 80081bc:	2338      	movs	r3, #56	; 0x38
 80081be:	4363      	muls	r3, r4
 80081c0:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <PxMessagingTask+0x12dc>)
 80081c2:	18d2      	adds	r2, r2, r3
 80081c4:	444a      	add	r2, r9
 80081c6:	79d3      	ldrb	r3, [r2, #7]
 80081c8:	021b      	lsls	r3, r3, #8
 80081ca:	7a11      	ldrb	r1, [r2, #8]
 80081cc:	0409      	lsls	r1, r1, #16
 80081ce:	185b      	adds	r3, r3, r1
 80081d0:	7991      	ldrb	r1, [r2, #6]
 80081d2:	185b      	adds	r3, r3, r1
 80081d4:	7a52      	ldrb	r2, [r2, #9]
 80081d6:	0612      	lsls	r2, r2, #24
 80081d8:	189b      	adds	r3, r3, r2
 80081da:	4a03      	ldr	r2, [pc, #12]	; (80081e8 <PxMessagingTask+0x12d8>)
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	2100      	movs	r1, #0
 80081e0:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	e765      	b.n	80080b2 <PxMessagingTask+0x11a2>
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	20001398 	.word	0x20001398
 80081ec:	20000de0 	.word	0x20000de0
 80081f0:	200013a0 	.word	0x200013a0
 80081f4:	20006998 	.word	0x20006998
 80081f8:	08018e58 	.word	0x08018e58
 80081fc:	0000fff0 	.word	0x0000fff0
 8008200:	20006a10 	.word	0x20006a10
 8008204:	20001164 	.word	0x20001164
 8008208:	00007fff 	.word	0x00007fff
 800820c:	08018e78 	.word	0x08018e78
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 8008210:	4ab5      	ldr	r2, [pc, #724]	; (80084e8 <PxMessagingTask+0x15d8>)
 8008212:	23f8      	movs	r3, #248	; 0xf8
 8008214:	061b      	lsls	r3, r3, #24
 8008216:	18eb      	adds	r3, r5, r3
 8008218:	4293      	cmp	r3, r2
 800821a:	d903      	bls.n	8008224 <PxMessagingTask+0x1314>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800821c:	4bb3      	ldr	r3, [pc, #716]	; (80084ec <PxMessagingTask+0x15dc>)
 800821e:	2215      	movs	r2, #21
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	e746      	b.n	80080b2 <PxMessagingTask+0x11a2>
									HAL_FLASH_Unlock();
 8008224:	f009 fa2c 	bl	8011680 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 8008228:	2f22      	cmp	r7, #34	; 0x22
 800822a:	d012      	beq.n	8008252 <PxMessagingTask+0x1342>
									if (responseStatus == BOS_OK)
 800822c:	4baf      	ldr	r3, [pc, #700]	; (80084ec <PxMessagingTask+0x15dc>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d129      	bne.n	8008288 <PxMessagingTask+0x1378>
										switch (cMessage[port-1][1+shift])															// Requested format
 8008234:	2238      	movs	r2, #56	; 0x38
 8008236:	4362      	muls	r2, r4
 8008238:	4bad      	ldr	r3, [pc, #692]	; (80084f0 <PxMessagingTask+0x15e0>)
 800823a:	189b      	adds	r3, r3, r2
 800823c:	444b      	add	r3, r9
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	3b01      	subs	r3, #1
 8008242:	b2da      	uxtb	r2, r3
 8008244:	2a07      	cmp	r2, #7
 8008246:	d81f      	bhi.n	8008288 <PxMessagingTask+0x1378>
 8008248:	b2db      	uxtb	r3, r3
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4aa9      	ldr	r2, [pc, #676]	; (80084f4 <PxMessagingTask+0x15e4>)
 800824e:	58d3      	ldr	r3, [r2, r3]
 8008250:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8008252:	2300      	movs	r3, #0
 8008254:	9311      	str	r3, [sp, #68]	; 0x44
										erase.PageAddress = temp32;
 8008256:	9512      	str	r5, [sp, #72]	; 0x48
										erase.NbPages = 1;
 8008258:	3301      	adds	r3, #1
 800825a:	9313      	str	r3, [sp, #76]	; 0x4c
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800825c:	a910      	add	r1, sp, #64	; 0x40
 800825e:	a811      	add	r0, sp, #68	; 0x44
 8008260:	f009 fae2 	bl	8011828 <HAL_FLASHEx_Erase>
 8008264:	900b      	str	r0, [sp, #44]	; 0x2c
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 8008266:	2800      	cmp	r0, #0
 8008268:	d102      	bne.n	8008270 <PxMessagingTask+0x1360>
 800826a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800826c:	3301      	adds	r3, #1
 800826e:	d0dd      	beq.n	800822c <PxMessagingTask+0x131c>
 8008270:	4b9e      	ldr	r3, [pc, #632]	; (80084ec <PxMessagingTask+0x15dc>)
 8008272:	2216      	movs	r2, #22
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	e7d9      	b.n	800822c <PxMessagingTask+0x131c>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 8008278:	882b      	ldrh	r3, [r5, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	4a9e      	ldr	r2, [pc, #632]	; (80084f8 <PxMessagingTask+0x15e8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00c      	beq.n	800829c <PxMessagingTask+0x138c>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 8008282:	4b9a      	ldr	r3, [pc, #616]	; (80084ec <PxMessagingTask+0x15dc>)
 8008284:	2216      	movs	r2, #22
 8008286:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 8008288:	f009 fa0c 	bl	80116a4 <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800828c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800828e:	2b00      	cmp	r3, #0
 8008290:	d100      	bne.n	8008294 <PxMessagingTask+0x1384>
 8008292:	e70e      	b.n	80080b2 <PxMessagingTask+0x11a2>
 8008294:	4b95      	ldr	r3, [pc, #596]	; (80084ec <PxMessagingTask+0x15dc>)
 8008296:	2216      	movs	r2, #22
 8008298:	701a      	strb	r2, [r3, #0]
 800829a:	e70a      	b.n	80080b2 <PxMessagingTask+0x11a2>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800829c:	2238      	movs	r2, #56	; 0x38
 800829e:	4362      	muls	r2, r4
 80082a0:	4b93      	ldr	r3, [pc, #588]	; (80084f0 <PxMessagingTask+0x15e0>)
 80082a2:	189b      	adds	r3, r3, r2
 80082a4:	444b      	add	r3, r9
 80082a6:	799a      	ldrb	r2, [r3, #6]
 80082a8:	2300      	movs	r3, #0
 80082aa:	4994      	ldr	r1, [pc, #592]	; (80084fc <PxMessagingTask+0x15ec>)
 80082ac:	600a      	str	r2, [r1, #0]
 80082ae:	604b      	str	r3, [r1, #4]
 80082b0:	0029      	movs	r1, r5
 80082b2:	2001      	movs	r0, #1
 80082b4:	f009 fa2e 	bl	8011714 <HAL_FLASH_Program>
 80082b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80082ba:	e7e5      	b.n	8008288 <PxMessagingTask+0x1378>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 80082bc:	882b      	ldrh	r3, [r5, #0]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	4a8d      	ldr	r2, [pc, #564]	; (80084f8 <PxMessagingTask+0x15e8>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d003      	beq.n	80082ce <PxMessagingTask+0x13be>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 80082c6:	4b89      	ldr	r3, [pc, #548]	; (80084ec <PxMessagingTask+0x15dc>)
 80082c8:	2216      	movs	r2, #22
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	e7dc      	b.n	8008288 <PxMessagingTask+0x1378>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 80082ce:	2238      	movs	r2, #56	; 0x38
 80082d0:	4362      	muls	r2, r4
 80082d2:	4b87      	ldr	r3, [pc, #540]	; (80084f0 <PxMessagingTask+0x15e0>)
 80082d4:	189b      	adds	r3, r3, r2
 80082d6:	444b      	add	r3, r9
 80082d8:	79da      	ldrb	r2, [r3, #7]
 80082da:	0212      	lsls	r2, r2, #8
 80082dc:	799b      	ldrb	r3, [r3, #6]
 80082de:	18d2      	adds	r2, r2, r3
 80082e0:	17d3      	asrs	r3, r2, #31
 80082e2:	4986      	ldr	r1, [pc, #536]	; (80084fc <PxMessagingTask+0x15ec>)
 80082e4:	600a      	str	r2, [r1, #0]
 80082e6:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 80082e8:	0029      	movs	r1, r5
 80082ea:	2001      	movs	r0, #1
 80082ec:	f009 fa12 	bl	8011714 <HAL_FLASH_Program>
 80082f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80082f2:	e7c9      	b.n	8008288 <PxMessagingTask+0x1378>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	3301      	adds	r3, #1
 80082f8:	d003      	beq.n	8008302 <PxMessagingTask+0x13f2>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 80082fa:	4b7c      	ldr	r3, [pc, #496]	; (80084ec <PxMessagingTask+0x15dc>)
 80082fc:	2216      	movs	r2, #22
 80082fe:	701a      	strb	r2, [r3, #0]
 8008300:	e7c2      	b.n	8008288 <PxMessagingTask+0x1378>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 8008302:	2238      	movs	r2, #56	; 0x38
 8008304:	4362      	muls	r2, r4
 8008306:	4b7a      	ldr	r3, [pc, #488]	; (80084f0 <PxMessagingTask+0x15e0>)
 8008308:	189b      	adds	r3, r3, r2
 800830a:	444b      	add	r3, r9
 800830c:	79da      	ldrb	r2, [r3, #7]
 800830e:	0212      	lsls	r2, r2, #8
 8008310:	7a19      	ldrb	r1, [r3, #8]
 8008312:	0409      	lsls	r1, r1, #16
 8008314:	1852      	adds	r2, r2, r1
 8008316:	7999      	ldrb	r1, [r3, #6]
 8008318:	1852      	adds	r2, r2, r1
 800831a:	7a5b      	ldrb	r3, [r3, #9]
 800831c:	061b      	lsls	r3, r3, #24
 800831e:	18d2      	adds	r2, r2, r3
 8008320:	2300      	movs	r3, #0
 8008322:	4976      	ldr	r1, [pc, #472]	; (80084fc <PxMessagingTask+0x15ec>)
 8008324:	600a      	str	r2, [r1, #0]
 8008326:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 8008328:	0029      	movs	r1, r5
 800832a:	2002      	movs	r0, #2
 800832c:	f009 f9f2 	bl	8011714 <HAL_FLASH_Program>
 8008330:	900b      	str	r0, [sp, #44]	; 0x2c
 8008332:	e7a9      	b.n	8008288 <PxMessagingTask+0x1378>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	3301      	adds	r3, #1
 8008338:	d003      	beq.n	8008342 <PxMessagingTask+0x1432>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800833a:	4b6c      	ldr	r3, [pc, #432]	; (80084ec <PxMessagingTask+0x15dc>)
 800833c:	2216      	movs	r2, #22
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	e7a2      	b.n	8008288 <PxMessagingTask+0x1378>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 8008342:	2238      	movs	r2, #56	; 0x38
 8008344:	4362      	muls	r2, r4
 8008346:	4b6a      	ldr	r3, [pc, #424]	; (80084f0 <PxMessagingTask+0x15e0>)
 8008348:	189b      	adds	r3, r3, r2
 800834a:	444b      	add	r3, r9
 800834c:	79da      	ldrb	r2, [r3, #7]
 800834e:	0212      	lsls	r2, r2, #8
 8008350:	7a19      	ldrb	r1, [r3, #8]
 8008352:	0409      	lsls	r1, r1, #16
 8008354:	1852      	adds	r2, r2, r1
 8008356:	7999      	ldrb	r1, [r3, #6]
 8008358:	1852      	adds	r2, r2, r1
 800835a:	7a5b      	ldrb	r3, [r3, #9]
 800835c:	061b      	lsls	r3, r3, #24
 800835e:	18d2      	adds	r2, r2, r3
 8008360:	2300      	movs	r3, #0
 8008362:	4966      	ldr	r1, [pc, #408]	; (80084fc <PxMessagingTask+0x15ec>)
 8008364:	600a      	str	r2, [r1, #0]
 8008366:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 8008368:	0029      	movs	r1, r5
 800836a:	2003      	movs	r0, #3
 800836c:	f009 f9d2 	bl	8011714 <HAL_FLASH_Program>
 8008370:	900b      	str	r0, [sp, #44]	; 0x2c
 8008372:	e789      	b.n	8008288 <PxMessagingTask+0x1378>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 8008374:	4b5e      	ldr	r3, [pc, #376]	; (80084f0 <PxMessagingTask+0x15e0>)
 8008376:	199b      	adds	r3, r3, r6
 8008378:	5d5a      	ldrb	r2, [r3, r5]
 800837a:	4b5c      	ldr	r3, [pc, #368]	; (80084ec <PxMessagingTask+0x15dc>)
 800837c:	701a      	strb	r2, [r3, #0]
							break;	
 800837e:	2300      	movs	r3, #0
 8008380:	4699      	mov	r9, r3
 8008382:	f7fe fdf5 	bl	8006f70 <PxMessagingTask+0x60>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 8008386:	464a      	mov	r2, r9
 8008388:	3a01      	subs	r2, #1
 800838a:	b292      	uxth	r2, r2
 800838c:	1c69      	adds	r1, r5, #1
 800838e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008390:	469c      	mov	ip, r3
 8008392:	4461      	add	r1, ip
 8008394:	4b56      	ldr	r3, [pc, #344]	; (80084f0 <PxMessagingTask+0x15e0>)
 8008396:	18c9      	adds	r1, r1, r3
 8008398:	199b      	adds	r3, r3, r6
 800839a:	5d58      	ldrb	r0, [r3, r5]
 800839c:	230a      	movs	r3, #10
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	f005 fdc4 	bl	800df2c <writePxMutex>
							break;
 80083a4:	2300      	movs	r3, #0
 80083a6:	4699      	mov	r9, r3
 80083a8:	f7fe fde2 	bl	8006f70 <PxMessagingTask+0x60>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 80083ac:	9500      	str	r5, [sp, #0]
 80083ae:	4653      	mov	r3, sl
 80083b0:	9a06      	ldr	r2, [sp, #24]
 80083b2:	9907      	ldr	r1, [sp, #28]
 80083b4:	0038      	movs	r0, r7
 80083b6:	f7fc f8fb 	bl	80045b0 <User_MessagingParser>
 80083ba:	4681      	mov	r9, r0
							if (result == BOS_ERR_UnknownMessage) {
 80083bc:	2801      	cmp	r0, #1
 80083be:	d001      	beq.n	80083c4 <PxMessagingTask+0x14b4>
 80083c0:	f7fe fdd6 	bl	8006f70 <PxMessagingTask+0x60>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 80083c4:	9500      	str	r5, [sp, #0]
 80083c6:	4653      	mov	r3, sl
 80083c8:	9a06      	ldr	r2, [sp, #24]
 80083ca:	9907      	ldr	r1, [sp, #28]
 80083cc:	0038      	movs	r0, r7
 80083ce:	f003 ff85 	bl	800c2dc <Module_MessagingTask>
 80083d2:	4681      	mov	r9, r0
 80083d4:	f7fe fdc7 	bl	8006f66 <PxMessagingTask+0x56>
									switch (cMessage[port-1][1+shift])											// requested format
 80083d8:	2300      	movs	r3, #0
 80083da:	4699      	mov	r9, r3
 80083dc:	f7fe fdc3 	bl	8006f66 <PxMessagingTask+0x56>
									switch (messageParams[0])											// requested format
 80083e0:	2300      	movs	r3, #0
 80083e2:	4699      	mov	r9, r3
 80083e4:	f7fe fdbf 	bl	8006f66 <PxMessagingTask+0x56>
										switch (messageParams[0])											// requested format
 80083e8:	2300      	movs	r3, #0
 80083ea:	4699      	mov	r9, r3
 80083ec:	f7fe fdbb 	bl	8006f66 <PxMessagingTask+0x56>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 80083f0:	2200      	movs	r2, #0
 80083f2:	2100      	movs	r1, #0
 80083f4:	9806      	ldr	r0, [sp, #24]
 80083f6:	f7fd fcf1 	bl	8005ddc <SendMessageToModule>
			result = BOS_OK;			
 80083fa:	2300      	movs	r3, #0
 80083fc:	4699      	mov	r9, r3
 80083fe:	f7fe fdb7 	bl	8006f70 <PxMessagingTask+0x60>
					switch (code)
 8008402:	2300      	movs	r3, #0
 8008404:	4699      	mov	r9, r3
 8008406:	f7fe fdb3 	bl	8006f70 <PxMessagingTask+0x60>
 800840a:	2300      	movs	r3, #0
 800840c:	4699      	mov	r9, r3
 800840e:	f7fe fdaf 	bl	8006f70 <PxMessagingTask+0x60>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 8008412:	4553      	cmp	r3, sl
 8008414:	d003      	beq.n	800841e <PxMessagingTask+0x150e>
 8008416:	2f10      	cmp	r7, #16
 8008418:	d001      	beq.n	800841e <PxMessagingTask+0x150e>
 800841a:	f7fe fdfa 	bl	8007012 <PxMessagingTask+0x102>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 800841e:	4653      	mov	r3, sl
 8008420:	2bff      	cmp	r3, #255	; 0xff
 8008422:	d101      	bne.n	8008428 <PxMessagingTask+0x1518>
 8008424:	f7fe fe16 	bl	8007054 <PxMessagingTask+0x144>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008428:	2bfe      	cmp	r3, #254	; 0xfe
 800842a:	d001      	beq.n	8008430 <PxMessagingTask+0x1520>
 800842c:	f7fe fe1d 	bl	800706a <PxMessagingTask+0x15a>
 8008430:	4b2f      	ldr	r3, [pc, #188]	; (80084f0 <PxMessagingTask+0x15e0>)
 8008432:	199b      	adds	r3, r3, r6
 8008434:	1859      	adds	r1, r3, r1
 8008436:	3901      	subs	r1, #1
 8008438:	780b      	ldrb	r3, [r1, #0]
 800843a:	4a31      	ldr	r2, [pc, #196]	; (8008500 <PxMessagingTask+0x15f0>)
 800843c:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 800843e:	2103      	movs	r1, #3
 8008440:	4689      	mov	r9, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8008442:	429a      	cmp	r2, r3
 8008444:	d101      	bne.n	800844a <PxMessagingTask+0x153a>
 8008446:	f7fe fd8e 	bl	8006f66 <PxMessagingTask+0x56>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 800844a:	4a2d      	ldr	r2, [pc, #180]	; (8008500 <PxMessagingTask+0x15f0>)
 800844c:	7013      	strb	r3, [r2, #0]
 800844e:	4a2d      	ldr	r2, [pc, #180]	; (8008504 <PxMessagingTask+0x15f4>)
 8008450:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 8008452:	9907      	ldr	r1, [sp, #28]
 8008454:	20fe      	movs	r0, #254	; 0xfe
 8008456:	f7fd f819 	bl	800548c <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 800845a:	4b2b      	ldr	r3, [pc, #172]	; (8008508 <PxMessagingTask+0x15f8>)
 800845c:	5d19      	ldrb	r1, [r3, r4]
 800845e:	4b24      	ldr	r3, [pc, #144]	; (80084f0 <PxMessagingTask+0x15e0>)
 8008460:	199b      	adds	r3, r3, r6
 8008462:	185a      	adds	r2, r3, r1
 8008464:	3a01      	subs	r2, #1
 8008466:	2000      	movs	r0, #0
 8008468:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800846a:	1e8a      	subs	r2, r1, #2
 800846c:	5c9b      	ldrb	r3, [r3, r2]
 800846e:	9308      	str	r3, [sp, #32]
					for(i=0 ; i<temp ; i++)
 8008470:	2b00      	cmp	r3, #0
 8008472:	d035      	beq.n	80084e0 <PxMessagingTask+0x15d0>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 8008474:	1ad2      	subs	r2, r2, r3
 8008476:	4694      	mov	ip, r2
 8008478:	4b24      	ldr	r3, [pc, #144]	; (800850c <PxMessagingTask+0x15fc>)
 800847a:	7818      	ldrb	r0, [r3, #0]
 800847c:	4b1c      	ldr	r3, [pc, #112]	; (80084f0 <PxMessagingTask+0x15e0>)
 800847e:	199b      	adds	r3, r3, r6
 8008480:	5c9b      	ldrb	r3, [r3, r2]
 8008482:	900a      	str	r0, [sp, #40]	; 0x28
 8008484:	4283      	cmp	r3, r0
 8008486:	d019      	beq.n	80084bc <PxMessagingTask+0x15ac>
 8008488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	4463      	add	r3, ip
 800848e:	4a18      	ldr	r2, [pc, #96]	; (80084f0 <PxMessagingTask+0x15e0>)
 8008490:	189b      	adds	r3, r3, r2
 8008492:	3201      	adds	r2, #1
 8008494:	4681      	mov	r9, r0
 8008496:	444a      	add	r2, r9
 8008498:	9808      	ldr	r0, [sp, #32]
 800849a:	3801      	subs	r0, #1
 800849c:	b2c0      	uxtb	r0, r0
 800849e:	4681      	mov	r9, r0
 80084a0:	444a      	add	r2, r9
 80084a2:	4494      	add	ip, r2
 80084a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084a6:	4660      	mov	r0, ip
 80084a8:	468c      	mov	ip, r1
 80084aa:	0011      	movs	r1, r2
					for(i=0 ; i<temp ; i++)
 80084ac:	4283      	cmp	r3, r0
 80084ae:	d017      	beq.n	80084e0 <PxMessagingTask+0x15d0>
 80084b0:	3301      	adds	r3, #1
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 80084b2:	1e5a      	subs	r2, r3, #1
 80084b4:	7812      	ldrb	r2, [r2, #0]
 80084b6:	428a      	cmp	r2, r1
 80084b8:	d1f8      	bne.n	80084ac <PxMessagingTask+0x159c>
 80084ba:	4661      	mov	r1, ip
				shift += 4;
 80084bc:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 80084be:	1b4a      	subs	r2, r1, r5
 80084c0:	b2d3      	uxtb	r3, r2
 80084c2:	4699      	mov	r9, r3
 80084c4:	f7fe fddb 	bl	800707e <PxMessagingTask+0x16e>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 80084c8:	2338      	movs	r3, #56	; 0x38
 80084ca:	4363      	muls	r3, r4
 80084cc:	4a08      	ldr	r2, [pc, #32]	; (80084f0 <PxMessagingTask+0x15e0>)
 80084ce:	18d2      	adds	r2, r2, r3
 80084d0:	464b      	mov	r3, r9
 80084d2:	5cd3      	ldrb	r3, [r2, r3]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	0098      	lsls	r0, r3, #2
 80084d8:	490d      	ldr	r1, [pc, #52]	; (8008510 <PxMessagingTask+0x1600>)
 80084da:	5841      	ldr	r1, [r0, r1]
 80084dc:	5dd2      	ldrb	r2, [r2, r7]
 80084de:	e52a      	b.n	8007f36 <PxMessagingTask+0x1026>
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 80084e0:	2366      	movs	r3, #102	; 0x66
 80084e2:	4699      	mov	r9, r3
 80084e4:	f7fe fd44 	bl	8006f70 <PxMessagingTask+0x60>
 80084e8:	0001ffff 	.word	0x0001ffff
 80084ec:	200013a0 	.word	0x200013a0
 80084f0:	20000de0 	.word	0x20000de0
 80084f4:	08018e98 	.word	0x08018e98
 80084f8:	0000ffff 	.word	0x0000ffff
 80084fc:	20001398 	.word	0x20001398
 8008500:	20000d1b 	.word	0x20000d1b
 8008504:	20000d1a 	.word	0x20000d1a
 8008508:	2000115c 	.word	0x2000115c
 800850c:	20001298 	.word	0x20001298
 8008510:	20006998 	.word	0x20006998

08008514 <scastCommand>:
{
 8008514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008516:	46de      	mov	lr, fp
 8008518:	4657      	mov	r7, sl
 800851a:	b580      	push	{r7, lr}
 800851c:	b09b      	sub	sp, #108	; 0x6c
 800851e:	0005      	movs	r5, r0
 8008520:	9009      	str	r0, [sp, #36]	; 0x24
 8008522:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 8008524:	2300      	movs	r3, #0
 8008526:	9319      	str	r3, [sp, #100]	; 0x64
 8008528:	9318      	str	r3, [sp, #96]	; 0x60
 800852a:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 800852c:	9316      	str	r3, [sp, #88]	; 0x58
 800852e:	9315      	str	r3, [sp, #84]	; 0x54
 8008530:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 = 0;
 8008532:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 8008534:	220a      	movs	r2, #10
 8008536:	2100      	movs	r1, #0
 8008538:	a810      	add	r0, sp, #64	; 0x40
 800853a:	f00b febd 	bl	80142b8 <memset>
 800853e:	220a      	movs	r2, #10
 8008540:	2100      	movs	r1, #0
 8008542:	a80d      	add	r0, sp, #52	; 0x34
 8008544:	f00b feb8 	bl	80142b8 <memset>
 8008548:	220a      	movs	r2, #10
 800854a:	2100      	movs	r1, #0
 800854c:	a80a      	add	r0, sp, #40	; 0x28
 800854e:	f00b feb3 	bl	80142b8 <memset>
	configASSERT( pcWriteBuffer );
 8008552:	2d00      	cmp	r5, #0
 8008554:	d101      	bne.n	800855a <scastCommand+0x46>
 8008556:	b672      	cpsid	i
 8008558:	e7fe      	b.n	8008558 <scastCommand+0x44>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800855a:	aa19      	add	r2, sp, #100	; 0x64
 800855c:	2101      	movs	r1, #1
 800855e:	0020      	movs	r0, r4
 8008560:	f006 faca 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8008564:	2300      	movs	r3, #0
 8008566:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8008568:	2200      	movs	r2, #0
 800856a:	9208      	str	r2, [sp, #32]
	if (pcParameterString1[0] == 'P') {
 800856c:	2b50      	cmp	r3, #80	; 0x50
 800856e:	d100      	bne.n	8008572 <scastCommand+0x5e>
 8008570:	e06d      	b.n	800864e <scastCommand+0x13a>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8008572:	aa18      	add	r2, sp, #96	; 0x60
 8008574:	2102      	movs	r1, #2
 8008576:	0020      	movs	r0, r4
 8008578:	f006 fabe 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 800857c:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 800857e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008580:	a810      	add	r0, sp, #64	; 0x40
 8008582:	f00c f91a 	bl	80147ba <strncpy>
	srcM = (uint8_t) GetID(par1);
 8008586:	a810      	add	r0, sp, #64	; 0x40
 8008588:	f7fd ff5a 	bl	8006440 <GetID>
 800858c:	b2c3      	uxtb	r3, r0
 800858e:	469a      	mov	sl, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8008590:	aa17      	add	r2, sp, #92	; 0x5c
 8008592:	2103      	movs	r1, #3
 8008594:	0020      	movs	r0, r4
 8008596:	f006 faaf 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 800859a:	2300      	movs	r3, #0
 800859c:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 800859e:	2700      	movs	r7, #0
	if (pcParameterString3[0] == 'p') {
 80085a0:	2b70      	cmp	r3, #112	; 0x70
 80085a2:	d05a      	beq.n	800865a <scastCommand+0x146>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80085a4:	aa16      	add	r2, sp, #88	; 0x58
 80085a6:	2104      	movs	r1, #4
 80085a8:	0020      	movs	r0, r4
 80085aa:	f006 faa5 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80085ae:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 80085b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80085b2:	a80d      	add	r0, sp, #52	; 0x34
 80085b4:	f00c f901 	bl	80147ba <strncpy>
	dstM = (uint8_t) GetID(par2);
 80085b8:	a80d      	add	r0, sp, #52	; 0x34
 80085ba:	f7fd ff41 	bl	8006440 <GetID>
 80085be:	b2c3      	uxtb	r3, r0
 80085c0:	469b      	mov	fp, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80085c2:	aa15      	add	r2, sp, #84	; 0x54
 80085c4:	2105      	movs	r1, #5
 80085c6:	0020      	movs	r0, r4
 80085c8:	f006 fa96 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 80085cc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80085ce:	0032      	movs	r2, r6
 80085d0:	492b      	ldr	r1, [pc, #172]	; (8008680 <scastCommand+0x16c>)
 80085d2:	9007      	str	r0, [sp, #28]
 80085d4:	f00c f8e0 	bl	8014798 <strncmp>
		direction = FORWARD;
 80085d8:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 80085da:	2800      	cmp	r0, #0
 80085dc:	d00f      	beq.n	80085fe <scastCommand+0xea>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 80085de:	0032      	movs	r2, r6
 80085e0:	4928      	ldr	r1, [pc, #160]	; (8008684 <scastCommand+0x170>)
 80085e2:	9807      	ldr	r0, [sp, #28]
 80085e4:	f00c f8d8 	bl	8014798 <strncmp>
		direction = BACKWARD;
 80085e8:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d007      	beq.n	80085fe <scastCommand+0xea>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 80085ee:	0032      	movs	r2, r6
 80085f0:	4925      	ldr	r1, [pc, #148]	; (8008688 <scastCommand+0x174>)
 80085f2:	9807      	ldr	r0, [sp, #28]
 80085f4:	f00c f8d0 	bl	8014798 <strncmp>
		direction = BIDIRECTIONAL;
 80085f8:	4243      	negs	r3, r0
 80085fa:	4158      	adcs	r0, r3
 80085fc:	0045      	lsls	r5, r0, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 80085fe:	0032      	movs	r2, r6
 8008600:	9907      	ldr	r1, [sp, #28]
 8008602:	a80a      	add	r0, sp, #40	; 0x28
 8008604:	f00c f8d9 	bl	80147ba <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 8008608:	aa14      	add	r2, sp, #80	; 0x50
 800860a:	2106      	movs	r1, #6
 800860c:	0020      	movs	r0, r4
 800860e:	f006 fa73 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8008612:	f00b fbbe 	bl	8013d92 <atol>
 8008616:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 8008618:	aa13      	add	r2, sp, #76	; 0x4c
 800861a:	2107      	movs	r1, #7
 800861c:	0020      	movs	r0, r4
 800861e:	f006 fa6b 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8008622:	f00b fbb6 	bl	8013d92 <atol>
 8008626:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 8008628:	2300      	movs	r3, #0
 800862a:	9303      	str	r3, [sp, #12]
 800862c:	9002      	str	r0, [sp, #8]
 800862e:	9601      	str	r6, [sp, #4]
 8008630:	9500      	str	r5, [sp, #0]
 8008632:	465b      	mov	r3, fp
 8008634:	003a      	movs	r2, r7
 8008636:	4651      	mov	r1, sl
 8008638:	9808      	ldr	r0, [sp, #32]
 800863a:	f7fe fa63 	bl	8006b04 <StartScastDMAStream>
	if (result == BOS_OK) 
 800863e:	2800      	cmp	r0, #0
 8008640:	d010      	beq.n	8008664 <scastCommand+0x150>
}
 8008642:	2000      	movs	r0, #0
 8008644:	b01b      	add	sp, #108	; 0x6c
 8008646:	bc0c      	pop	{r2, r3}
 8008648:	4692      	mov	sl, r2
 800864a:	469b      	mov	fp, r3
 800864c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 800864e:	3001      	adds	r0, #1
 8008650:	f00b fb9f 	bl	8013d92 <atol>
 8008654:	b2c3      	uxtb	r3, r0
 8008656:	9308      	str	r3, [sp, #32]
 8008658:	e78b      	b.n	8008572 <scastCommand+0x5e>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 800865a:	3001      	adds	r0, #1
 800865c:	f00b fb99 	bl	8013d92 <atol>
 8008660:	b2c7      	uxtb	r7, r0
 8008662:	e79f      	b.n	80085a4 <scastCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 8008664:	9404      	str	r4, [sp, #16]
 8008666:	9603      	str	r6, [sp, #12]
 8008668:	ab0d      	add	r3, sp, #52	; 0x34
 800866a:	9302      	str	r3, [sp, #8]
 800866c:	9701      	str	r7, [sp, #4]
 800866e:	ab10      	add	r3, sp, #64	; 0x40
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	9b08      	ldr	r3, [sp, #32]
 8008674:	aa0a      	add	r2, sp, #40	; 0x28
 8008676:	4905      	ldr	r1, [pc, #20]	; (800868c <scastCommand+0x178>)
 8008678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800867a:	f00c f849 	bl	8014710 <sprintf>
 800867e:	e7e0      	b.n	8008642 <scastCommand+0x12e>
 8008680:	08019c38 	.word	0x08019c38
 8008684:	08019c40 	.word	0x08019c40
 8008688:	08019c4c 	.word	0x08019c4c
 800868c:	08019c5c 	.word	0x08019c5c

08008690 <AddPortButton>:
{
 8008690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008692:	b08d      	sub	sp, #52	; 0x34
 8008694:	0006      	movs	r6, r0
 8008696:	000c      	movs	r4, r1
	if (BOS_initialized) {
 8008698:	4b41      	ldr	r3, [pc, #260]	; (80087a0 <AddPortButton+0x110>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d157      	bne.n	8008750 <AddPortButton+0xc0>
	portStatus[port] = PORTBUTTON;	
 80086a0:	4b40      	ldr	r3, [pc, #256]	; (80087a4 <AddPortButton+0x114>)
 80086a2:	2204      	movs	r2, #4
 80086a4:	551a      	strb	r2, [r3, r4]
	if (BOS_initialized) {
 80086a6:	4b3e      	ldr	r3, [pc, #248]	; (80087a0 <AddPortButton+0x110>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d15a      	bne.n	8008764 <AddPortButton+0xd4>
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 80086ae:	2512      	movs	r5, #18
 80086b0:	446d      	add	r5, sp
 80086b2:	af04      	add	r7, sp, #16
 80086b4:	9700      	str	r7, [sp, #0]
 80086b6:	ab05      	add	r3, sp, #20
 80086b8:	002a      	movs	r2, r5
 80086ba:	a906      	add	r1, sp, #24
 80086bc:	0020      	movs	r0, r4
 80086be:	f7fc fb2b 	bl	8004d18 <GetPortGPIOs>
	GPIO_InitStruct.Pin = TX_Pin;
 80086c2:	882b      	ldrh	r3, [r5, #0]
 80086c4:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086c6:	2301      	movs	r3, #1
 80086c8:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ca:	2500      	movs	r5, #0
 80086cc:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80086ce:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 80086d0:	a907      	add	r1, sp, #28
 80086d2:	9806      	ldr	r0, [sp, #24]
 80086d4:	f009 f908 	bl	80118e8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RX_Pin;
 80086d8:	883b      	ldrh	r3, [r7, #0]
 80086da:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086dc:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80086de:	2302      	movs	r3, #2
 80086e0:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 80086e2:	a907      	add	r1, sp, #28
 80086e4:	9805      	ldr	r0, [sp, #20]
 80086e6:	f009 f8ff 	bl	80118e8 <HAL_GPIO_Init>
	button[port].type = buttonType;	
 80086ea:	00e2      	lsls	r2, r4, #3
 80086ec:	1912      	adds	r2, r2, r4
 80086ee:	4b2e      	ldr	r3, [pc, #184]	; (80087a8 <AddPortButton+0x118>)
 80086f0:	189b      	adds	r3, r3, r2
 80086f2:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 80086f4:	0025      	movs	r5, r4
 80086f6:	353a      	adds	r5, #58	; 0x3a
 80086f8:	00ad      	lsls	r5, r5, #2
 80086fa:	210e      	movs	r1, #14
 80086fc:	4469      	add	r1, sp
 80086fe:	0028      	movs	r0, r5
 8008700:	f002 fa2a 	bl	800ab58 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008704:	2800      	cmp	r0, #0
 8008706:	d133      	bne.n	8008770 <AddPortButton+0xe0>
		temp8 = (uint8_t)(temp16 >> 8);
 8008708:	230e      	movs	r3, #14
 800870a:	446b      	add	r3, sp
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	0a1b      	lsrs	r3, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 8008710:	091a      	lsrs	r2, r3, #4
 8008712:	42a2      	cmp	r2, r4
 8008714:	d103      	bne.n	800871e <AddPortButton+0x8e>
 8008716:	220f      	movs	r2, #15
 8008718:	4013      	ands	r3, r2
 800871a:	42b3      	cmp	r3, r6
 800871c:	d015      	beq.n	800874a <AddPortButton+0xba>
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 800871e:	0324      	lsls	r4, r4, #12
 8008720:	0231      	lsls	r1, r6, #8
 8008722:	4321      	orrs	r1, r4
 8008724:	b289      	uxth	r1, r1
 8008726:	230e      	movs	r3, #14
 8008728:	446b      	add	r3, sp
 800872a:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 800872c:	0028      	movs	r0, r5
 800872e:	f002 fa43 	bl	800abb8 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008732:	1c68      	adds	r0, r5, #1
 8008734:	2100      	movs	r1, #0
 8008736:	f002 fa3f 	bl	800abb8 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 800873a:	1ca8      	adds	r0, r5, #2
 800873c:	2100      	movs	r1, #0
 800873e:	f002 fa3b 	bl	800abb8 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008742:	1ce8      	adds	r0, r5, #3
 8008744:	2100      	movs	r1, #0
 8008746:	f002 fa37 	bl	800abb8 <EE_WriteVariable>
}
 800874a:	2000      	movs	r0, #0
 800874c:	b00d      	add	sp, #52	; 0x34
 800874e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 8008750:	008d      	lsls	r5, r1, #2
 8008752:	4b16      	ldr	r3, [pc, #88]	; (80087ac <AddPortButton+0x11c>)
 8008754:	58e8      	ldr	r0, [r5, r3]
 8008756:	f006 f901 	bl	800e95c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800875a:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <AddPortButton+0x120>)
 800875c:	58e8      	ldr	r0, [r5, r3]
 800875e:	f006 f8fd 	bl	800e95c <osSemaphoreRelease>
 8008762:	e79d      	b.n	80086a0 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008764:	0020      	movs	r0, r4
 8008766:	f7fc f937 	bl	80049d8 <GetUart>
 800876a:	f00a fd4c 	bl	8013206 <HAL_UART_DeInit>
 800876e:	e79e      	b.n	80086ae <AddPortButton+0x1e>
		temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 8008770:	0324      	lsls	r4, r4, #12
 8008772:	0231      	lsls	r1, r6, #8
 8008774:	4321      	orrs	r1, r4
 8008776:	b289      	uxth	r1, r1
 8008778:	230e      	movs	r3, #14
 800877a:	446b      	add	r3, sp
 800877c:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 800877e:	0028      	movs	r0, r5
 8008780:	f002 fa1a 	bl	800abb8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008784:	1c68      	adds	r0, r5, #1
 8008786:	2100      	movs	r1, #0
 8008788:	f002 fa16 	bl	800abb8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 800878c:	1ca8      	adds	r0, r5, #2
 800878e:	2100      	movs	r1, #0
 8008790:	f002 fa12 	bl	800abb8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 8008794:	1ce8      	adds	r0, r5, #3
 8008796:	2100      	movs	r1, #0
 8008798:	f002 fa0e 	bl	800abb8 <EE_WriteVariable>
 800879c:	e7d5      	b.n	800874a <AddPortButton+0xba>
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	20000abd 	.word	0x20000abd
 80087a4:	20001348 	.word	0x20001348
 80087a8:	20000d6c 	.word	0x20000d6c
 80087ac:	20006b0c 	.word	0x20006b0c
 80087b0:	20006af0 	.word	0x20006af0

080087b4 <addbuttonCommand>:
{
 80087b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087b6:	b087      	sub	sp, #28
 80087b8:	0006      	movs	r6, r0
 80087ba:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 80087bc:	2300      	movs	r3, #0
 80087be:	9305      	str	r3, [sp, #20]
 80087c0:	9304      	str	r3, [sp, #16]
	configASSERT( pcWriteBuffer );
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d101      	bne.n	80087ca <addbuttonCommand+0x16>
 80087c6:	b672      	cpsid	i
 80087c8:	e7fe      	b.n	80087c8 <addbuttonCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80087ca:	aa05      	add	r2, sp, #20
 80087cc:	2101      	movs	r1, #1
 80087ce:	9803      	ldr	r0, [sp, #12]
 80087d0:	f006 f992 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80087d4:	0004      	movs	r4, r0
 80087d6:	4b23      	ldr	r3, [pc, #140]	; (8008864 <addbuttonCommand+0xb0>)
 80087d8:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 80087da:	9d05      	ldr	r5, [sp, #20]
 80087dc:	002a      	movs	r2, r5
 80087de:	4922      	ldr	r1, [pc, #136]	; (8008868 <addbuttonCommand+0xb4>)
 80087e0:	f00b ffda 	bl	8014798 <strncmp>
		type = MOMENTARY_NO;
 80087e4:	2701      	movs	r7, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d017      	beq.n	800881a <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 80087ea:	002a      	movs	r2, r5
 80087ec:	491f      	ldr	r1, [pc, #124]	; (800886c <addbuttonCommand+0xb8>)
 80087ee:	0020      	movs	r0, r4
 80087f0:	f00b ffd2 	bl	8014798 <strncmp>
		type = MOMENTARY_NC;
 80087f4:	3701      	adds	r7, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d00f      	beq.n	800881a <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 80087fa:	002a      	movs	r2, r5
 80087fc:	491c      	ldr	r1, [pc, #112]	; (8008870 <addbuttonCommand+0xbc>)
 80087fe:	0020      	movs	r0, r4
 8008800:	f00b ffca 	bl	8014798 <strncmp>
		type = ONOFF_NO;
 8008804:	3701      	adds	r7, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8008806:	2800      	cmp	r0, #0
 8008808:	d007      	beq.n	800881a <addbuttonCommand+0x66>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 800880a:	002a      	movs	r2, r5
 800880c:	4919      	ldr	r1, [pc, #100]	; (8008874 <addbuttonCommand+0xc0>)
 800880e:	0020      	movs	r0, r4
 8008810:	f00b ffc2 	bl	8014798 <strncmp>
		type = ONOFF_NC;
 8008814:	4243      	negs	r3, r0
 8008816:	4158      	adcs	r0, r3
 8008818:	0087      	lsls	r7, r0, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800881a:	aa04      	add	r2, sp, #16
 800881c:	2102      	movs	r1, #2
 800881e:	9803      	ldr	r0, [sp, #12]
 8008820:	f006 f96a 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8008824:	2300      	movs	r3, #0
 8008826:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8008828:	2400      	movs	r4, #0
	if (pcParameterString2[0] == 'p') {
 800882a:	2b70      	cmp	r3, #112	; 0x70
 800882c:	d008      	beq.n	8008840 <addbuttonCommand+0x8c>
	result = AddPortButton(type, port);
 800882e:	0021      	movs	r1, r4
 8008830:	0038      	movs	r0, r7
 8008832:	f7ff ff2d 	bl	8008690 <AddPortButton>
	if (result == BOS_OK) 
 8008836:	2800      	cmp	r0, #0
 8008838:	d007      	beq.n	800884a <addbuttonCommand+0x96>
}
 800883a:	2000      	movs	r0, #0
 800883c:	b007      	add	sp, #28
 800883e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8008840:	3001      	adds	r0, #1
 8008842:	f00b faa6 	bl	8013d92 <atol>
 8008846:	b2c4      	uxtb	r4, r0
 8008848:	e7f1      	b.n	800882e <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 800884a:	4b06      	ldr	r3, [pc, #24]	; (8008864 <addbuttonCommand+0xb0>)
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	2300      	movs	r3, #0
 8008850:	9905      	ldr	r1, [sp, #20]
 8008852:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8008854:	9400      	str	r4, [sp, #0]
 8008856:	0023      	movs	r3, r4
 8008858:	4907      	ldr	r1, [pc, #28]	; (8008878 <addbuttonCommand+0xc4>)
 800885a:	0030      	movs	r0, r6
 800885c:	f00b ff58 	bl	8014710 <sprintf>
 8008860:	e7eb      	b.n	800883a <addbuttonCommand+0x86>
 8008862:	46c0      	nop			; (mov r8, r8)
 8008864:	200012d4 	.word	0x200012d4
 8008868:	08019178 	.word	0x08019178
 800886c:	08019188 	.word	0x08019188
 8008870:	08019198 	.word	0x08019198
 8008874:	080191a4 	.word	0x080191a4
 8008878:	080191b0 	.word	0x080191b0

0800887c <RemovePortButton>:
{
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	0005      	movs	r5, r0
	button[port].type = NONE;
 8008882:	4837      	ldr	r0, [pc, #220]	; (8008960 <RemovePortButton+0xe4>)
 8008884:	00e9      	lsls	r1, r5, #3
 8008886:	1949      	adds	r1, r1, r5
 8008888:	1842      	adds	r2, r0, r1
 800888a:	2300      	movs	r3, #0
 800888c:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800888e:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8008890:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 8008892:	7093      	strb	r3, [r2, #2]
 8008894:	70d3      	strb	r3, [r2, #3]
 8008896:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 8008898:	7153      	strb	r3, [r2, #5]
 800889a:	7193      	strb	r3, [r2, #6]
 800889c:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 800889e:	002c      	movs	r4, r5
 80088a0:	343a      	adds	r4, #58	; 0x3a
 80088a2:	00a4      	lsls	r4, r4, #2
 80088a4:	466b      	mov	r3, sp
 80088a6:	1d99      	adds	r1, r3, #6
 80088a8:	0020      	movs	r0, r4
 80088aa:	f002 f955 	bl	800ab58 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d02b      	beq.n	800890a <RemovePortButton+0x8e>
	UART_HandleTypeDef* huart = GetUart(port);
 80088b2:	0028      	movs	r0, r5
 80088b4:	f7fc f890 	bl	80049d8 <GetUart>
 80088b8:	0006      	movs	r6, r0
	if (huart->Instance == USART1) 
 80088ba:	6803      	ldr	r3, [r0, #0]
 80088bc:	4a29      	ldr	r2, [pc, #164]	; (8008964 <RemovePortButton+0xe8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d034      	beq.n	800892c <RemovePortButton+0xb0>
	else if (huart->Instance == USART2) 
 80088c2:	4a29      	ldr	r2, [pc, #164]	; (8008968 <RemovePortButton+0xec>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d035      	beq.n	8008934 <RemovePortButton+0xb8>
	else if (huart->Instance == USART3) 
 80088c8:	4a28      	ldr	r2, [pc, #160]	; (800896c <RemovePortButton+0xf0>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d036      	beq.n	800893c <RemovePortButton+0xc0>
	else if (huart->Instance == USART4) 
 80088ce:	4a28      	ldr	r2, [pc, #160]	; (8008970 <RemovePortButton+0xf4>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d037      	beq.n	8008944 <RemovePortButton+0xc8>
	else if (huart->Instance == USART5) 
 80088d4:	4a27      	ldr	r2, [pc, #156]	; (8008974 <RemovePortButton+0xf8>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d038      	beq.n	800894c <RemovePortButton+0xd0>
	else if (huart->Instance == USART6) 
 80088da:	4a27      	ldr	r2, [pc, #156]	; (8008978 <RemovePortButton+0xfc>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d039      	beq.n	8008954 <RemovePortButton+0xd8>
	else if (huart->Instance == USART7) 
 80088e0:	4a26      	ldr	r2, [pc, #152]	; (800897c <RemovePortButton+0x100>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d03a      	beq.n	800895c <RemovePortButton+0xe0>
	else if (huart->Instance == USART8) 
 80088e6:	4a26      	ldr	r2, [pc, #152]	; (8008980 <RemovePortButton+0x104>)
 80088e8:	4694      	mov	ip, r2
 80088ea:	4463      	add	r3, ip
 80088ec:	1e5c      	subs	r4, r3, #1
 80088ee:	41a3      	sbcs	r3, r4
 80088f0:	425c      	negs	r4, r3
 80088f2:	b2e4      	uxtb	r4, r4
	portStatus[port] = FREE;
 80088f4:	4b23      	ldr	r3, [pc, #140]	; (8008984 <RemovePortButton+0x108>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 80088fa:	3201      	adds	r2, #1
 80088fc:	4922      	ldr	r1, [pc, #136]	; (8008988 <RemovePortButton+0x10c>)
 80088fe:	0030      	movs	r0, r6
 8008900:	f00a fcda 	bl	80132b8 <HAL_UART_Receive_IT>
}
 8008904:	0020      	movs	r0, r4
 8008906:	b002      	add	sp, #8
 8008908:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 800890a:	2100      	movs	r1, #0
 800890c:	0020      	movs	r0, r4
 800890e:	f002 f953 	bl	800abb8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008912:	1c60      	adds	r0, r4, #1
 8008914:	2100      	movs	r1, #0
 8008916:	f002 f94f 	bl	800abb8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 800891a:	1ca0      	adds	r0, r4, #2
 800891c:	2100      	movs	r1, #0
 800891e:	f002 f94b 	bl	800abb8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 8008922:	1ce0      	adds	r0, r4, #3
 8008924:	2100      	movs	r1, #0
 8008926:	f002 f947 	bl	800abb8 <EE_WriteVariable>
 800892a:	e7c2      	b.n	80088b2 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800892c:	f005 f936 	bl	800db9c <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008930:	2400      	movs	r4, #0
 8008932:	e7df      	b.n	80088f4 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008934:	f005 f94a 	bl	800dbcc <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8008938:	2400      	movs	r4, #0
 800893a:	e7db      	b.n	80088f4 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800893c:	f005 f95e 	bl	800dbfc <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008940:	2400      	movs	r4, #0
 8008942:	e7d7      	b.n	80088f4 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008944:	f005 f972 	bl	800dc2c <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 8008948:	2400      	movs	r4, #0
 800894a:	e7d3      	b.n	80088f4 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800894c:	f005 f986 	bl	800dc5c <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008950:	2400      	movs	r4, #0
 8008952:	e7cf      	b.n	80088f4 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8008954:	f005 f99a 	bl	800dc8c <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008958:	2400      	movs	r4, #0
 800895a:	e7cb      	b.n	80088f4 <RemovePortButton+0x78>
 800895c:	2400      	movs	r4, #0
 800895e:	e7c9      	b.n	80088f4 <RemovePortButton+0x78>
 8008960:	20000d6c 	.word	0x20000d6c
 8008964:	40013800 	.word	0x40013800
 8008968:	40004400 	.word	0x40004400
 800896c:	40004800 	.word	0x40004800
 8008970:	40004c00 	.word	0x40004c00
 8008974:	40005000 	.word	0x40005000
 8008978:	40011400 	.word	0x40011400
 800897c:	40011800 	.word	0x40011800
 8008980:	bffee400 	.word	0xbffee400
 8008984:	20001348 	.word	0x20001348
 8008988:	20000f30 	.word	0x20000f30

0800898c <removebuttonCommand>:
{
 800898c:	b530      	push	{r4, r5, lr}
 800898e:	b083      	sub	sp, #12
 8008990:	0005      	movs	r5, r0
 8008992:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8008994:	2300      	movs	r3, #0
 8008996:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8008998:	2d00      	cmp	r5, #0
 800899a:	d101      	bne.n	80089a0 <removebuttonCommand+0x14>
 800899c:	b672      	cpsid	i
 800899e:	e7fe      	b.n	800899e <removebuttonCommand+0x12>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80089a0:	aa01      	add	r2, sp, #4
 80089a2:	2101      	movs	r1, #1
 80089a4:	f006 f8a8 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 80089a8:	2300      	movs	r3, #0
 80089aa:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 80089ac:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 80089ae:	2b70      	cmp	r3, #112	; 0x70
 80089b0:	d007      	beq.n	80089c2 <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 80089b2:	0020      	movs	r0, r4
 80089b4:	f7ff ff62 	bl	800887c <RemovePortButton>
	if (result == BOS_OK) 
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d007      	beq.n	80089cc <removebuttonCommand+0x40>
}
 80089bc:	2000      	movs	r0, #0
 80089be:	b003      	add	sp, #12
 80089c0:	bd30      	pop	{r4, r5, pc}
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80089c2:	3001      	adds	r0, #1
 80089c4:	f00b f9e5 	bl	8013d92 <atol>
 80089c8:	b2c4      	uxtb	r4, r0
 80089ca:	e7f2      	b.n	80089b2 <removebuttonCommand+0x26>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 80089cc:	0023      	movs	r3, r4
 80089ce:	0022      	movs	r2, r4
 80089d0:	4902      	ldr	r1, [pc, #8]	; (80089dc <removebuttonCommand+0x50>)
 80089d2:	0028      	movs	r0, r5
 80089d4:	f00b fe9c 	bl	8014710 <sprintf>
 80089d8:	e7f0      	b.n	80089bc <removebuttonCommand+0x30>
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	08019bf0 	.word	0x08019bf0

080089e0 <SetButtonEvents>:
{
 80089e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e2:	46de      	mov	lr, fp
 80089e4:	4657      	mov	r7, sl
 80089e6:	464e      	mov	r6, r9
 80089e8:	4645      	mov	r5, r8
 80089ea:	b5e0      	push	{r5, r6, r7, lr}
 80089ec:	b085      	sub	sp, #20
 80089ee:	0007      	movs	r7, r0
 80089f0:	001e      	movs	r6, r3
 80089f2:	ab0e      	add	r3, sp, #56	; 0x38
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	4698      	mov	r8, r3
 80089f8:	ab0f      	add	r3, sp, #60	; 0x3c
 80089fa:	781d      	ldrb	r5, [r3, #0]
 80089fc:	ab10      	add	r3, sp, #64	; 0x40
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	469b      	mov	fp, r3
 8008a02:	ab11      	add	r3, sp, #68	; 0x44
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	469a      	mov	sl, r3
 8008a08:	ab12      	add	r3, sp, #72	; 0x48
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	4699      	mov	r9, r3
 8008a0e:	ab13      	add	r3, sp, #76	; 0x4c
 8008a10:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 8008a12:	00fc      	lsls	r4, r7, #3
 8008a14:	19e4      	adds	r4, r4, r7
 8008a16:	4b9e      	ldr	r3, [pc, #632]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008a18:	191b      	adds	r3, r3, r4
 8008a1a:	785b      	ldrb	r3, [r3, #1]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d04c      	beq.n	8008aba <SetButtonEvents+0xda>
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 8008a20:	00fc      	lsls	r4, r7, #3
 8008a22:	19e4      	adds	r4, r4, r7
 8008a24:	4b9a      	ldr	r3, [pc, #616]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008a26:	191b      	adds	r3, r3, r4
 8008a28:	709e      	strb	r6, [r3, #2]
 8008a2a:	4644      	mov	r4, r8
 8008a2c:	70dc      	strb	r4, [r3, #3]
 8008a2e:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 8008a30:	465c      	mov	r4, fp
 8008a32:	715c      	strb	r4, [r3, #5]
 8008a34:	4654      	mov	r4, sl
 8008a36:	719c      	strb	r4, [r3, #6]
 8008a38:	464c      	mov	r4, r9
 8008a3a:	71dc      	strb	r4, [r3, #7]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 8008a3c:	2801      	cmp	r0, #1
 8008a3e:	d003      	beq.n	8008a48 <SetButtonEvents+0x68>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d113      	bne.n	8008a6c <SetButtonEvents+0x8c>
 8008a44:	2900      	cmp	r1, #0
 8008a46:	d042      	beq.n	8008ace <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008a48:	00f9      	lsls	r1, r7, #3
 8008a4a:	19c9      	adds	r1, r1, r7
 8008a4c:	4b90      	ldr	r3, [pc, #576]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008a4e:	185b      	adds	r3, r3, r1
 8008a50:	7a19      	ldrb	r1, [r3, #8]
 8008a52:	2401      	movs	r4, #1
 8008a54:	4321      	orrs	r1, r4
 8008a56:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008a58:	2801      	cmp	r0, #1
 8008a5a:	d10c      	bne.n	8008a76 <SetButtonEvents+0x96>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008a5c:	00fa      	lsls	r2, r7, #3
 8008a5e:	19d2      	adds	r2, r2, r7
 8008a60:	4b8b      	ldr	r3, [pc, #556]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008a62:	189b      	adds	r3, r3, r2
 8008a64:	7a1a      	ldrb	r2, [r3, #8]
 8008a66:	2102      	movs	r1, #2
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008a6c:	2801      	cmp	r0, #1
 8008a6e:	d042      	beq.n	8008af6 <SetButtonEvents+0x116>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d152      	bne.n	8008b1a <SetButtonEvents+0x13a>
 8008a74:	e03d      	b.n	8008af2 <SetButtonEvents+0x112>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d031      	beq.n	8008ade <SetButtonEvents+0xfe>
 8008a7a:	e044      	b.n	8008b06 <SetButtonEvents+0x126>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d059      	beq.n	8008b34 <SetButtonEvents+0x154>
 8008a80:	e06d      	b.n	8008b5e <SetButtonEvents+0x17e>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d100      	bne.n	8008a88 <SetButtonEvents+0xa8>
 8008a86:	e082      	b.n	8008b8e <SetButtonEvents+0x1ae>
 8008a88:	e097      	b.n	8008bba <SetButtonEvents+0x1da>
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d100      	bne.n	8008a90 <SetButtonEvents+0xb0>
 8008a8e:	e0f2      	b.n	8008c76 <SetButtonEvents+0x296>
 8008a90:	e09f      	b.n	8008bd2 <SetButtonEvents+0x1f2>
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008a92:	0a19      	lsrs	r1, r3, #8
 8008a94:	0209      	lsls	r1, r1, #8
 8008a96:	4311      	orrs	r1, r2
 8008a98:	ab02      	add	r3, sp, #8
 8008a9a:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008a9c:	0020      	movs	r0, r4
 8008a9e:	f002 f88b 	bl	800abb8 <EE_WriteVariable>
 8008aa2:	e0ad      	b.n	8008c00 <SetButtonEvents+0x220>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8008aa4:	0019      	movs	r1, r3
 8008aa6:	9801      	ldr	r0, [sp, #4]
 8008aa8:	f002 f886 	bl	800abb8 <EE_WriteVariable>
 8008aac:	e0b7      	b.n	8008c1e <SetButtonEvents+0x23e>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 8008aae:	4653      	mov	r3, sl
 8008ab0:	4319      	orrs	r1, r3
 8008ab2:	0030      	movs	r0, r6
 8008ab4:	f002 f880 	bl	800abb8 <EE_WriteVariable>
 8008ab8:	e0c0      	b.n	8008c3c <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008aba:	200b      	movs	r0, #11
}
 8008abc:	b005      	add	sp, #20
 8008abe:	bc3c      	pop	{r2, r3, r4, r5}
 8008ac0:	4690      	mov	r8, r2
 8008ac2:	4699      	mov	r9, r3
 8008ac4:	46a2      	mov	sl, r4
 8008ac6:	46ab      	mov	fp, r5
 8008ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 8008aca:	200b      	movs	r0, #11
 8008acc:	e7f6      	b.n	8008abc <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8008ace:	00f9      	lsls	r1, r7, #3
 8008ad0:	19c9      	adds	r1, r1, r7
 8008ad2:	4b6f      	ldr	r3, [pc, #444]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008ad4:	185b      	adds	r3, r3, r1
 8008ad6:	7a19      	ldrb	r1, [r3, #8]
 8008ad8:	2401      	movs	r4, #1
 8008ada:	43a1      	bics	r1, r4
 8008adc:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	d1bc      	bne.n	8008a5c <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 8008ae2:	00fa      	lsls	r2, r7, #3
 8008ae4:	19d2      	adds	r2, r2, r7
 8008ae6:	4b6a      	ldr	r3, [pc, #424]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008ae8:	189b      	adds	r3, r3, r2
 8008aea:	7a1a      	ldrb	r2, [r3, #8]
 8008aec:	2102      	movs	r1, #2
 8008aee:	438a      	bics	r2, r1
 8008af0:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	d016      	beq.n	8008b24 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008af6:	00fa      	lsls	r2, r7, #3
 8008af8:	19d2      	adds	r2, r2, r7
 8008afa:	4b65      	ldr	r3, [pc, #404]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008afc:	189b      	adds	r3, r3, r2
 8008afe:	7a1a      	ldrb	r2, [r3, #8]
 8008b00:	2104      	movs	r1, #4
 8008b02:	430a      	orrs	r2, r1
 8008b04:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008b06:	2801      	cmp	r0, #1
 8008b08:	d1b8      	bne.n	8008a7c <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008b0a:	00fa      	lsls	r2, r7, #3
 8008b0c:	19d2      	adds	r2, r2, r7
 8008b0e:	4b60      	ldr	r3, [pc, #384]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008b10:	189b      	adds	r3, r3, r2
 8008b12:	7a1a      	ldrb	r2, [r3, #8]
 8008b14:	2108      	movs	r1, #8
 8008b16:	430a      	orrs	r2, r1
 8008b18:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008b1a:	2801      	cmp	r0, #1
 8008b1c:	d017      	beq.n	8008b4e <SetButtonEvents+0x16e>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d128      	bne.n	8008b74 <SetButtonEvents+0x194>
 8008b22:	e012      	b.n	8008b4a <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8008b24:	00fa      	lsls	r2, r7, #3
 8008b26:	19d2      	adds	r2, r2, r7
 8008b28:	4b59      	ldr	r3, [pc, #356]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008b2a:	189b      	adds	r3, r3, r2
 8008b2c:	7a1a      	ldrb	r2, [r3, #8]
 8008b2e:	2104      	movs	r1, #4
 8008b30:	438a      	bics	r2, r1
 8008b32:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008b34:	4643      	mov	r3, r8
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e7      	bne.n	8008b0a <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 8008b3a:	00fa      	lsls	r2, r7, #3
 8008b3c:	19d2      	adds	r2, r2, r7
 8008b3e:	4b54      	ldr	r3, [pc, #336]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008b40:	189b      	adds	r3, r3, r2
 8008b42:	7a1a      	ldrb	r2, [r3, #8]
 8008b44:	2108      	movs	r1, #8
 8008b46:	438a      	bics	r2, r1
 8008b48:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	d017      	beq.n	8008b7e <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008b4e:	00fa      	lsls	r2, r7, #3
 8008b50:	19d2      	adds	r2, r2, r7
 8008b52:	4b4f      	ldr	r3, [pc, #316]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008b54:	189b      	adds	r3, r3, r2
 8008b56:	7a1a      	ldrb	r2, [r3, #8]
 8008b58:	2110      	movs	r1, #16
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008b5e:	2801      	cmp	r0, #1
 8008b60:	d000      	beq.n	8008b64 <SetButtonEvents+0x184>
 8008b62:	e78e      	b.n	8008a82 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008b64:	00fa      	lsls	r2, r7, #3
 8008b66:	19d2      	adds	r2, r2, r7
 8008b68:	4b49      	ldr	r3, [pc, #292]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008b6a:	189b      	adds	r3, r3, r2
 8008b6c:	7a1a      	ldrb	r2, [r3, #8]
 8008b6e:	2120      	movs	r1, #32
 8008b70:	430a      	orrs	r2, r1
 8008b72:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008b74:	2801      	cmp	r0, #1
 8008b76:	d018      	beq.n	8008baa <SetButtonEvents+0x1ca>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d12a      	bne.n	8008bd2 <SetButtonEvents+0x1f2>
 8008b7c:	e012      	b.n	8008ba4 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8008b7e:	00fa      	lsls	r2, r7, #3
 8008b80:	19d2      	adds	r2, r2, r7
 8008b82:	4b43      	ldr	r3, [pc, #268]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008b84:	189b      	adds	r3, r3, r2
 8008b86:	7a1a      	ldrb	r2, [r3, #8]
 8008b88:	2110      	movs	r1, #16
 8008b8a:	438a      	bics	r2, r1
 8008b8c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008b8e:	465b      	mov	r3, fp
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1e7      	bne.n	8008b64 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 8008b94:	00fa      	lsls	r2, r7, #3
 8008b96:	19d2      	adds	r2, r2, r7
 8008b98:	4b3d      	ldr	r3, [pc, #244]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008b9a:	189b      	adds	r3, r3, r2
 8008b9c:	7a1a      	ldrb	r2, [r3, #8]
 8008b9e:	2120      	movs	r1, #32
 8008ba0:	438a      	bics	r2, r1
 8008ba2:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008ba4:	4653      	mov	r3, sl
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d05d      	beq.n	8008c66 <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008baa:	00fa      	lsls	r2, r7, #3
 8008bac:	19d2      	adds	r2, r2, r7
 8008bae:	4b38      	ldr	r3, [pc, #224]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008bb0:	189b      	adds	r3, r3, r2
 8008bb2:	7a1a      	ldrb	r2, [r3, #8]
 8008bb4:	2140      	movs	r1, #64	; 0x40
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008bba:	2801      	cmp	r0, #1
 8008bbc:	d000      	beq.n	8008bc0 <SetButtonEvents+0x1e0>
 8008bbe:	e764      	b.n	8008a8a <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 8008bc0:	00fa      	lsls	r2, r7, #3
 8008bc2:	19d2      	adds	r2, r2, r7
 8008bc4:	4b32      	ldr	r3, [pc, #200]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008bc6:	189b      	adds	r3, r3, r2
 8008bc8:	7a19      	ldrb	r1, [r3, #8]
 8008bca:	2280      	movs	r2, #128	; 0x80
 8008bcc:	4252      	negs	r2, r2
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008bd2:	003c      	movs	r4, r7
 8008bd4:	343a      	adds	r4, #58	; 0x3a
 8008bd6:	00a4      	lsls	r4, r4, #2
 8008bd8:	ab02      	add	r3, sp, #8
 8008bda:	1d99      	adds	r1, r3, #6
 8008bdc:	0020      	movs	r0, r4
 8008bde:	f001 ffbb 	bl	800ab58 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d000      	beq.n	8008be8 <SetButtonEvents+0x208>
 8008be6:	e770      	b.n	8008aca <SetButtonEvents+0xea>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 8008be8:	ab02      	add	r3, sp, #8
 8008bea:	3306      	adds	r3, #6
 8008bec:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 8008bee:	00fa      	lsls	r2, r7, #3
 8008bf0:	19d2      	adds	r2, r2, r7
 8008bf2:	4f27      	ldr	r7, [pc, #156]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008bf4:	18bf      	adds	r7, r7, r2
 8008bf6:	7a3a      	ldrb	r2, [r7, #8]
 8008bf8:	b2d9      	uxtb	r1, r3
 8008bfa:	4291      	cmp	r1, r2
 8008bfc:	d000      	beq.n	8008c00 <SetButtonEvents+0x220>
 8008bfe:	e748      	b.n	8008a92 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 8008c00:	1c63      	adds	r3, r4, #1
 8008c02:	aa02      	add	r2, sp, #8
 8008c04:	1d97      	adds	r7, r2, #6
 8008c06:	0039      	movs	r1, r7
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f001 ffa4 	bl	800ab58 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 8008c10:	0236      	lsls	r6, r6, #8
 8008c12:	883a      	ldrh	r2, [r7, #0]
 8008c14:	465b      	mov	r3, fp
 8008c16:	4333      	orrs	r3, r6
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d000      	beq.n	8008c1e <SetButtonEvents+0x23e>
 8008c1c:	e742      	b.n	8008aa4 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 8008c1e:	1ca6      	adds	r6, r4, #2
 8008c20:	ab02      	add	r3, sp, #8
 8008c22:	1d9f      	adds	r7, r3, #6
 8008c24:	0039      	movs	r1, r7
 8008c26:	0030      	movs	r0, r6
 8008c28:	f001 ff96 	bl	800ab58 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8008c2c:	4643      	mov	r3, r8
 8008c2e:	0219      	lsls	r1, r3, #8
 8008c30:	883a      	ldrh	r2, [r7, #0]
 8008c32:	4653      	mov	r3, sl
 8008c34:	430b      	orrs	r3, r1
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d000      	beq.n	8008c3c <SetButtonEvents+0x25c>
 8008c3a:	e738      	b.n	8008aae <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008c3c:	3403      	adds	r4, #3
 8008c3e:	ab02      	add	r3, sp, #8
 8008c40:	1d9e      	adds	r6, r3, #6
 8008c42:	0031      	movs	r1, r6
 8008c44:	0020      	movs	r0, r4
 8008c46:	f001 ff87 	bl	800ab58 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008c4a:	022d      	lsls	r5, r5, #8
 8008c4c:	8832      	ldrh	r2, [r6, #0]
 8008c4e:	464b      	mov	r3, r9
 8008c50:	432b      	orrs	r3, r5
	return result;
 8008c52:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d100      	bne.n	8008c5a <SetButtonEvents+0x27a>
 8008c58:	e730      	b.n	8008abc <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 8008c5a:	0019      	movs	r1, r3
 8008c5c:	0020      	movs	r0, r4
 8008c5e:	f001 ffab 	bl	800abb8 <EE_WriteVariable>
	return result;
 8008c62:	2000      	movs	r0, #0
 8008c64:	e72a      	b.n	8008abc <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008c66:	00fa      	lsls	r2, r7, #3
 8008c68:	19d2      	adds	r2, r2, r7
 8008c6a:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008c6c:	189b      	adds	r3, r3, r2
 8008c6e:	7a1a      	ldrb	r2, [r3, #8]
 8008c70:	2140      	movs	r1, #64	; 0x40
 8008c72:	438a      	bics	r2, r1
 8008c74:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008c76:	464b      	mov	r3, r9
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1a1      	bne.n	8008bc0 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008c7c:	00fa      	lsls	r2, r7, #3
 8008c7e:	19d2      	adds	r2, r2, r7
 8008c80:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <SetButtonEvents+0x2b0>)
 8008c82:	189b      	adds	r3, r3, r2
 8008c84:	7a19      	ldrb	r1, [r3, #8]
 8008c86:	227f      	movs	r2, #127	; 0x7f
 8008c88:	400a      	ands	r2, r1
 8008c8a:	721a      	strb	r2, [r3, #8]
 8008c8c:	e7a1      	b.n	8008bd2 <SetButtonEvents+0x1f2>
 8008c8e:	46c0      	nop			; (mov r8, r8)
 8008c90:	20000d6c 	.word	0x20000d6c

08008c94 <LoadEEbuttons>:
{
 8008c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c96:	46ce      	mov	lr, r9
 8008c98:	4647      	mov	r7, r8
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b089      	sub	sp, #36	; 0x24
	uint16_t temp16 = 0, status1 = 0; 
 8008c9e:	231e      	movs	r3, #30
 8008ca0:	446b      	add	r3, sp
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	2501      	movs	r5, #1
 8008ca8:	24ec      	movs	r4, #236	; 0xec
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8008caa:	001e      	movs	r6, r3
 8008cac:	230f      	movs	r3, #15
 8008cae:	4698      	mov	r8, r3
 8008cb0:	e004      	b.n	8008cbc <LoadEEbuttons+0x28>
 8008cb2:	3404      	adds	r4, #4
 8008cb4:	b2a4      	uxth	r4, r4
 8008cb6:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8008cb8:	2d08      	cmp	r5, #8
 8008cba:	d058      	beq.n	8008d6e <LoadEEbuttons+0xda>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8008cbc:	0031      	movs	r1, r6
 8008cbe:	0020      	movs	r0, r4
 8008cc0:	f001 ff4a 	bl	800ab58 <EE_ReadVariable>
		if(!status1)																												// This variable exists
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d1f4      	bne.n	8008cb2 <LoadEEbuttons+0x1e>
			temp8 = (uint8_t)(temp16 >> 8);
 8008cc8:	8831      	ldrh	r1, [r6, #0]
 8008cca:	0a0b      	lsrs	r3, r1, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 8008ccc:	091a      	lsrs	r2, r3, #4
 8008cce:	42aa      	cmp	r2, r5
 8008cd0:	d1ef      	bne.n	8008cb2 <LoadEEbuttons+0x1e>
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	4003      	ands	r3, r0
 8008cd6:	d0ec      	beq.n	8008cb2 <LoadEEbuttons+0x1e>
				button[i+1].type = temp8 & 0x0F;
 8008cd8:	00d0      	lsls	r0, r2, #3
 8008cda:	1882      	adds	r2, r0, r2
 8008cdc:	4827      	ldr	r0, [pc, #156]	; (8008d7c <LoadEEbuttons+0xe8>)
 8008cde:	4681      	mov	r9, r0
 8008ce0:	4491      	add	r9, r2
 8008ce2:	464a      	mov	r2, r9
 8008ce4:	7053      	strb	r3, [r2, #1]
				button[i+1].events = (uint8_t)temp16;
 8008ce6:	7211      	strb	r1, [r2, #8]
 8008ce8:	00af      	lsls	r7, r5, #2
 8008cea:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 8008cec:	0038      	movs	r0, r7
 8008cee:	30e9      	adds	r0, #233	; 0xe9
 8008cf0:	b280      	uxth	r0, r0
 8008cf2:	0031      	movs	r1, r6
 8008cf4:	f001 ff30 	bl	800ab58 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 8008cf8:	8833      	ldrh	r3, [r6, #0]
 8008cfa:	0a1a      	lsrs	r2, r3, #8
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	708a      	strb	r2, [r1, #2]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 8008d00:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 8008d02:	0038      	movs	r0, r7
 8008d04:	30ea      	adds	r0, #234	; 0xea
 8008d06:	b280      	uxth	r0, r0
 8008d08:	0031      	movs	r1, r6
 8008d0a:	f001 ff25 	bl	800ab58 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 8008d0e:	8833      	ldrh	r3, [r6, #0]
 8008d10:	0a1a      	lsrs	r2, r3, #8
 8008d12:	4649      	mov	r1, r9
 8008d14:	70ca      	strb	r2, [r1, #3]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 8008d16:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 8008d18:	37eb      	adds	r7, #235	; 0xeb
 8008d1a:	b2b8      	uxth	r0, r7
 8008d1c:	0031      	movs	r1, r6
 8008d1e:	f001 ff1b 	bl	800ab58 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 8008d22:	8833      	ldrh	r3, [r6, #0]
 8008d24:	0a1a      	lsrs	r2, r3, #8
 8008d26:	4649      	mov	r1, r9
 8008d28:	710a      	strb	r2, [r1, #4]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 8008d2a:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i+1].type, i+1);
 8008d2c:	b2ef      	uxtb	r7, r5
 8008d2e:	7848      	ldrb	r0, [r1, #1]
 8008d30:	0039      	movs	r1, r7
 8008d32:	f7ff fcad 	bl	8008690 <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8008d36:	464b      	mov	r3, r9
 8008d38:	7a19      	ldrb	r1, [r3, #8]
 8008d3a:	789b      	ldrb	r3, [r3, #2]
 8008d3c:	104a      	asrs	r2, r1, #1
 8008d3e:	2001      	movs	r0, #1
 8008d40:	4002      	ands	r2, r0
 8008d42:	4001      	ands	r1, r0
 8008d44:	2000      	movs	r0, #0
 8008d46:	9005      	str	r0, [sp, #20]
 8008d48:	4648      	mov	r0, r9
 8008d4a:	79c0      	ldrb	r0, [r0, #7]
 8008d4c:	9004      	str	r0, [sp, #16]
 8008d4e:	4648      	mov	r0, r9
 8008d50:	7980      	ldrb	r0, [r0, #6]
 8008d52:	9003      	str	r0, [sp, #12]
 8008d54:	4648      	mov	r0, r9
 8008d56:	7940      	ldrb	r0, [r0, #5]
 8008d58:	9002      	str	r0, [sp, #8]
 8008d5a:	4648      	mov	r0, r9
 8008d5c:	7900      	ldrb	r0, [r0, #4]
 8008d5e:	9001      	str	r0, [sp, #4]
 8008d60:	4648      	mov	r0, r9
 8008d62:	78c0      	ldrb	r0, [r0, #3]
 8008d64:	9000      	str	r0, [sp, #0]
 8008d66:	0038      	movs	r0, r7
 8008d68:	f7ff fe3a 	bl	80089e0 <SetButtonEvents>
 8008d6c:	e7a1      	b.n	8008cb2 <LoadEEbuttons+0x1e>
}
 8008d6e:	2000      	movs	r0, #0
 8008d70:	b009      	add	sp, #36	; 0x24
 8008d72:	bc0c      	pop	{r2, r3}
 8008d74:	4690      	mov	r8, r2
 8008d76:	4699      	mov	r9, r3
 8008d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	20000d6c 	.word	0x20000d6c

08008d80 <LoadEEvars>:
{
 8008d80:	b510      	push	{r4, lr}
	LoadROtopology();
 8008d82:	f7fb f8c1 	bl	8003f08 <LoadROtopology>
	LoadEEportsDir();
 8008d86:	f7fb f95d 	bl	8004044 <LoadEEportsDir>
	LoadEEalias();
 8008d8a:	f7fb f9c1 	bl	8004110 <LoadEEalias>
	LoadEEgroup();
 8008d8e:	f7fb fa01 	bl	8004194 <LoadEEgroup>
	LoadEEstreams();
 8008d92:	f7fb ff1b 	bl	8004bcc <LoadEEstreams>
	LoadEEparams();	
 8008d96:	f7fb fa97 	bl	80042c8 <LoadEEparams>
	LoadEEbuttons();	
 8008d9a:	f7ff ff7b 	bl	8008c94 <LoadEEbuttons>
	LoadROsnippets();
 8008d9e:	f7fb f82d 	bl	8003dfc <LoadROsnippets>
}
 8008da2:	bd10      	pop	{r4, pc}

08008da4 <BOS_CalendarConfig>:
{
 8008da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008da6:	46c6      	mov	lr, r8
 8008da8:	b500      	push	{lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	ac0c      	add	r4, sp, #48	; 0x30
 8008dae:	7827      	ldrb	r7, [r4, #0]
 8008db0:	ac0d      	add	r4, sp, #52	; 0x34
 8008db2:	7824      	ldrb	r4, [r4, #0]
 8008db4:	46a0      	mov	r8, r4
 8008db6:	ac0e      	add	r4, sp, #56	; 0x38
 8008db8:	7825      	ldrb	r5, [r4, #0]
 8008dba:	ac0f      	add	r4, sp, #60	; 0x3c
 8008dbc:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 8008dbe:	ac05      	add	r4, sp, #20
 8008dc0:	3230      	adds	r2, #48	; 0x30
 8008dc2:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 8008dc4:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 8008dc6:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 8008dc8:	7023      	strb	r3, [r4, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	0021      	movs	r1, r4
 8008dce:	481f      	ldr	r0, [pc, #124]	; (8008e4c <BOS_CalendarConfig+0xa8>)
 8008dd0:	f00a f87e 	bl	8012ed0 <HAL_RTC_SetDate>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d136      	bne.n	8008e46 <BOS_CalendarConfig+0xa2>
  stimestructure.Hours = hours;
 8008dd8:	466b      	mov	r3, sp
 8008dda:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 8008ddc:	4642      	mov	r2, r8
 8008dde:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 8008de0:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 8008de2:	2300      	movs	r3, #0
 8008de4:	9304      	str	r3, [sp, #16]
	if (AMPM == RTC_AM) {
 8008de6:	2e01      	cmp	r6, #1
 8008de8:	d020      	beq.n	8008e2c <BOS_CalendarConfig+0x88>
	} else if (AMPM == RTC_PM) {
 8008dea:	2e02      	cmp	r6, #2
 8008dec:	d024      	beq.n	8008e38 <BOS_CalendarConfig+0x94>
		BOS.hourformat = 24;
 8008dee:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <BOS_CalendarConfig+0xac>)
 8008df0:	2218      	movs	r2, #24
 8008df2:	735a      	strb	r2, [r3, #13]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 8008df4:	2200      	movs	r2, #0
 8008df6:	4669      	mov	r1, sp
 8008df8:	4814      	ldr	r0, [pc, #80]	; (8008e4c <BOS_CalendarConfig+0xa8>)
 8008dfa:	f009 ffe3 	bl	8012dc4 <HAL_RTC_SetTime>
		return BOS_ERROR;
 8008dfe:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d10e      	bne.n	8008e22 <BOS_CalendarConfig+0x7e>
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8008e04:	4a12      	ldr	r2, [pc, #72]	; (8008e50 <BOS_CalendarConfig+0xac>)
 8008e06:	7b53      	ldrb	r3, [r2, #13]
 8008e08:	021b      	lsls	r3, r3, #8
 8008e0a:	7911      	ldrb	r1, [r2, #4]
 8008e0c:	4319      	orrs	r1, r3
 8008e0e:	308d      	adds	r0, #141	; 0x8d
 8008e10:	0040      	lsls	r0, r0, #1
 8008e12:	f001 fed1 	bl	800abb8 <EE_WriteVariable>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 8008e16:	4a0f      	ldr	r2, [pc, #60]	; (8008e54 <BOS_CalendarConfig+0xb0>)
 8008e18:	2101      	movs	r1, #1
 8008e1a:	480c      	ldr	r0, [pc, #48]	; (8008e4c <BOS_CalendarConfig+0xa8>)
 8008e1c:	f00a f91c 	bl	8013058 <HAL_RTCEx_BKUPWrite>
	return BOS_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	0018      	movs	r0, r3
 8008e24:	b006      	add	sp, #24
 8008e26:	bc04      	pop	{r2}
 8008e28:	4690      	mov	r8, r2
 8008e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 8008e2c:	466a      	mov	r2, sp
 8008e2e:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 8008e30:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <BOS_CalendarConfig+0xac>)
 8008e32:	220c      	movs	r2, #12
 8008e34:	735a      	strb	r2, [r3, #13]
 8008e36:	e7dd      	b.n	8008df4 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 8008e38:	2340      	movs	r3, #64	; 0x40
 8008e3a:	466a      	mov	r2, sp
 8008e3c:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 8008e3e:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <BOS_CalendarConfig+0xac>)
 8008e40:	220c      	movs	r2, #12
 8008e42:	735a      	strb	r2, [r3, #13]
 8008e44:	e7d6      	b.n	8008df4 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 8008e46:	23ff      	movs	r3, #255	; 0xff
 8008e48:	e7eb      	b.n	8008e22 <BOS_CalendarConfig+0x7e>
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	20006a68 	.word	0x20006a68
 8008e50:	20006a10 	.word	0x20006a10
 8008e54:	000032f2 	.word	0x000032f2

08008e58 <GetTimeDate>:
{
 8008e58:	b530      	push	{r4, r5, lr}
 8008e5a:	b089      	sub	sp, #36	; 0x24
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 8008e5c:	4d16      	ldr	r5, [pc, #88]	; (8008eb8 <GetTimeDate+0x60>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	a902      	add	r1, sp, #8
 8008e62:	0028      	movs	r0, r5
 8008e64:	f00a f8b0 	bl	8012fc8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 8008e68:	ac07      	add	r4, sp, #28
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	0021      	movs	r1, r4
 8008e6e:	0028      	movs	r0, r5
 8008e70:	f00a f8d0 	bl	8013014 <HAL_RTC_GetDate>
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 8008e74:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <GetTimeDate+0x64>)
 8008e76:	aa02      	add	r2, sp, #8
 8008e78:	7a12      	ldrb	r2, [r2, #8]
 8008e7a:	09d2      	lsrs	r2, r2, #7
 8008e7c:	3201      	adds	r2, #1
 8008e7e:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 8008e80:	9a03      	ldr	r2, [sp, #12]
 8008e82:	9201      	str	r2, [sp, #4]
 8008e84:	0852      	lsrs	r2, r2, #1
 8008e86:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 8008e88:	aa02      	add	r2, sp, #8
 8008e8a:	7892      	ldrb	r2, [r2, #2]
 8008e8c:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 8008e8e:	aa02      	add	r2, sp, #8
 8008e90:	7852      	ldrb	r2, [r2, #1]
 8008e92:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 8008e94:	aa02      	add	r2, sp, #8
 8008e96:	7812      	ldrb	r2, [r2, #0]
 8008e98:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 8008e9a:	78a2      	ldrb	r2, [r4, #2]
 8008e9c:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 8008e9e:	7862      	ldrb	r2, [r4, #1]
 8008ea0:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 8008ea2:	7822      	ldrb	r2, [r4, #0]
 8008ea4:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 8008ea6:	78e2      	ldrb	r2, [r4, #3]
 8008ea8:	21fa      	movs	r1, #250	; 0xfa
 8008eaa:	00c9      	lsls	r1, r1, #3
 8008eac:	468c      	mov	ip, r1
 8008eae:	4462      	add	r2, ip
 8008eb0:	831a      	strh	r2, [r3, #24]
}
 8008eb2:	b009      	add	sp, #36	; 0x24
 8008eb4:	bd30      	pop	{r4, r5, pc}
 8008eb6:	46c0      	nop			; (mov r8, r8)
 8008eb8:	20006a68 	.word	0x20006a68
 8008ebc:	20006a10 	.word	0x20006a10

08008ec0 <BOS_Init>:
{
 8008ec0:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8008ec2:	f7fb fbf3 	bl	80046ac <RTC_Init>
	GetTimeDate();
 8008ec6:	f7ff ffc7 	bl	8008e58 <GetTimeDate>
	EE_Init();
 8008eca:	f001 ff81 	bl	800add0 <EE_Init>
  GPIO_Init();
 8008ece:	f004 fc95 	bl	800d7fc <GPIO_Init>
	DMA_Init();
 8008ed2:	f003 fc03 	bl	800c6dc <DMA_Init>
	TIM_USEC_Init();
 8008ed6:	f7fa fcbd 	bl	8003854 <TIM_USEC_Init>
	CRC_Init();
 8008eda:	f004 fc29 	bl	800d730 <CRC_Init>
	TIM_MSEC_Init();
 8008ede:	f7fa fceb 	bl	80038b8 <TIM_MSEC_Init>
	if (IsFactoryReset())
 8008ee2:	f7fc fd8b 	bl	80059fc <IsFactoryReset>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d11a      	bne.n	8008f20 <BOS_Init+0x60>
	if (IsLowerCLIbaud())
 8008eea:	f7fc fe01 	bl	8005af0 <IsLowerCLIbaud>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d01a      	beq.n	8008f28 <BOS_Init+0x68>
		CLI_LOW_Baudrate_Flag = 1;
 8008ef2:	4b3a      	ldr	r3, [pc, #232]	; (8008fdc <BOS_Init+0x11c>)
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8008ef8:	2032      	movs	r0, #50	; 0x32
 8008efa:	f7fc fd6d 	bl	80059d8 <StartMilliDelay>
		Module_Init();	
 8008efe:	f002 feed 	bl	800bcdc <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8008f02:	4b37      	ldr	r3, [pc, #220]	; (8008fe0 <BOS_Init+0x120>)
 8008f04:	22e1      	movs	r2, #225	; 0xe1
 8008f06:	0252      	lsls	r2, r2, #9
 8008f08:	609a      	str	r2, [r3, #8]
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8008f0a:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 8008f0c:	001d      	movs	r5, r3
 8008f0e:	68a9      	ldr	r1, [r5, #8]
 8008f10:	0020      	movs	r0, r4
 8008f12:	f005 f879 	bl	800e008 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8008f16:	3401      	adds	r4, #1
 8008f18:	b2e4      	uxtb	r4, r4
 8008f1a:	2c07      	cmp	r4, #7
 8008f1c:	d1f7      	bne.n	8008f0e <BOS_Init+0x4e>
 8008f1e:	e008      	b.n	8008f32 <BOS_Init+0x72>
		EE_FormatForFactoryReset();
 8008f20:	f7fb fab2 	bl	8004488 <EE_FormatForFactoryReset>
		NVIC_SystemReset();
 8008f24:	f7fa f8f0 	bl	8003108 <NVIC_SystemReset>
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8008f28:	2032      	movs	r0, #50	; 0x32
 8008f2a:	f7fc fd55 	bl	80059d8 <StartMilliDelay>
		Module_Init();				
 8008f2e:	f002 fed5 	bl	800bcdc <Module_Init>
	LoadEEvars();
 8008f32:	f7ff ff25 	bl	8008d80 <LoadEEvars>
	UpdateMyPortsDir();
 8008f36:	f7fd fdb7 	bl	8006aa8 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8008f3a:	f004 f837 	bl	800cfac <SetupMessagingRxDMAs>
	if (myID == 0)		/* Native module */
 8008f3e:	4b29      	ldr	r3, [pc, #164]	; (8008fe4 <BOS_Init+0x124>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d037      	beq.n	8008fb6 <BOS_Init+0xf6>
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8008f46:	2580      	movs	r5, #128	; 0x80
 8008f48:	012d      	lsls	r5, r5, #4
 8008f4a:	2490      	movs	r4, #144	; 0x90
 8008f4c:	05e4      	lsls	r4, r4, #23
 8008f4e:	2201      	movs	r2, #1
 8008f50:	0029      	movs	r1, r5
 8008f52:	0020      	movs	r0, r4
 8008f54:	f008 fdae 	bl	8011ab4 <HAL_GPIO_WritePin>
 8008f58:	20fa      	movs	r0, #250	; 0xfa
 8008f5a:	0040      	lsls	r0, r0, #1
 8008f5c:	f7fc fd3c 	bl	80059d8 <StartMilliDelay>
 8008f60:	2200      	movs	r2, #0
 8008f62:	0029      	movs	r1, r5
 8008f64:	0020      	movs	r0, r4
 8008f66:	f008 fda5 	bl	8011ab4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8008f6a:	2064      	movs	r0, #100	; 0x64
 8008f6c:	f7fc fd34 	bl	80059d8 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8008f70:	2201      	movs	r2, #1
 8008f72:	0029      	movs	r1, r5
 8008f74:	0020      	movs	r0, r4
 8008f76:	f008 fd9d 	bl	8011ab4 <HAL_GPIO_WritePin>
 8008f7a:	2064      	movs	r0, #100	; 0x64
 8008f7c:	f7fc fd2c 	bl	80059d8 <StartMilliDelay>
 8008f80:	2200      	movs	r2, #0
 8008f82:	0029      	movs	r1, r5
 8008f84:	0020      	movs	r0, r4
 8008f86:	f008 fd95 	bl	8011ab4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8008f8a:	2064      	movs	r0, #100	; 0x64
 8008f8c:	f7fc fd24 	bl	80059d8 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8008f90:	2201      	movs	r2, #1
 8008f92:	0029      	movs	r1, r5
 8008f94:	0020      	movs	r0, r4
 8008f96:	f008 fd8d 	bl	8011ab4 <HAL_GPIO_WritePin>
 8008f9a:	2064      	movs	r0, #100	; 0x64
 8008f9c:	f7fc fd1c 	bl	80059d8 <StartMilliDelay>
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	0029      	movs	r1, r5
 8008fa4:	0020      	movs	r0, r4
 8008fa6:	f008 fd85 	bl	8011ab4 <HAL_GPIO_WritePin>
	ResetUartORE();
 8008faa:	f001 fd49 	bl	800aa40 <ResetUartORE>
	BOS_initialized = 1;
 8008fae:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <BOS_Init+0x128>)
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	701a      	strb	r2, [r3, #0]
}
 8008fb4:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8008fb6:	2580      	movs	r5, #128	; 0x80
 8008fb8:	012d      	lsls	r5, r5, #4
 8008fba:	2490      	movs	r4, #144	; 0x90
 8008fbc:	05e4      	lsls	r4, r4, #23
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	0029      	movs	r1, r5
 8008fc2:	0020      	movs	r0, r4
 8008fc4:	f008 fd76 	bl	8011ab4 <HAL_GPIO_WritePin>
 8008fc8:	20fa      	movs	r0, #250	; 0xfa
 8008fca:	0040      	lsls	r0, r0, #1
 8008fcc:	f7fc fd04 	bl	80059d8 <StartMilliDelay>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	0029      	movs	r1, r5
 8008fd4:	0020      	movs	r0, r4
 8008fd6:	f008 fd6d 	bl	8011ab4 <HAL_GPIO_WritePin>
 8008fda:	e7e6      	b.n	8008faa <BOS_Init+0xea>
 8008fdc:	20000abe 	.word	0x20000abe
 8008fe0:	20006a10 	.word	0x20006a10
 8008fe4:	20001298 	.word	0x20001298
 8008fe8:	20000abd 	.word	0x20000abd

08008fec <timeCommand>:
{
 8008fec:	b510      	push	{r4, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8008ff2:	d101      	bne.n	8008ff8 <timeCommand+0xc>
 8008ff4:	b672      	cpsid	i
 8008ff6:	e7fe      	b.n	8008ff6 <timeCommand+0xa>
	GetTimeDate();
 8008ff8:	f7ff ff2e 	bl	8008e58 <GetTimeDate>
	if (BOS.hourformat == 24)
 8008ffc:	4b1b      	ldr	r3, [pc, #108]	; (800906c <timeCommand+0x80>)
 8008ffe:	7b5b      	ldrb	r3, [r3, #13]
 8009000:	2b18      	cmp	r3, #24
 8009002:	d004      	beq.n	800900e <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 8009004:	2b0c      	cmp	r3, #12
 8009006:	d00e      	beq.n	8009026 <timeCommand+0x3a>
}
 8009008:	2000      	movs	r0, #0
 800900a:	b004      	add	sp, #16
 800900c:	bd10      	pop	{r4, pc}
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 800900e:	4917      	ldr	r1, [pc, #92]	; (800906c <timeCommand+0x80>)
 8009010:	7c4b      	ldrb	r3, [r1, #17]
 8009012:	7c8a      	ldrb	r2, [r1, #18]
 8009014:	89c8      	ldrh	r0, [r1, #14]
 8009016:	9001      	str	r0, [sp, #4]
 8009018:	7c09      	ldrb	r1, [r1, #16]
 800901a:	9100      	str	r1, [sp, #0]
 800901c:	4914      	ldr	r1, [pc, #80]	; (8009070 <timeCommand+0x84>)
 800901e:	0020      	movs	r0, r4
 8009020:	f00b fb76 	bl	8014710 <sprintf>
 8009024:	e7f0      	b.n	8009008 <timeCommand+0x1c>
		if (BOS.time.ampm == RTC_AM)
 8009026:	4b11      	ldr	r3, [pc, #68]	; (800906c <timeCommand+0x80>)
 8009028:	7cdb      	ldrb	r3, [r3, #19]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d10d      	bne.n	800904a <timeCommand+0x5e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 800902e:	490f      	ldr	r1, [pc, #60]	; (800906c <timeCommand+0x80>)
 8009030:	7c4b      	ldrb	r3, [r1, #17]
 8009032:	7c8a      	ldrb	r2, [r1, #18]
 8009034:	480f      	ldr	r0, [pc, #60]	; (8009074 <timeCommand+0x88>)
 8009036:	9002      	str	r0, [sp, #8]
 8009038:	89c8      	ldrh	r0, [r1, #14]
 800903a:	9001      	str	r0, [sp, #4]
 800903c:	7c09      	ldrb	r1, [r1, #16]
 800903e:	9100      	str	r1, [sp, #0]
 8009040:	490d      	ldr	r1, [pc, #52]	; (8009078 <timeCommand+0x8c>)
 8009042:	0020      	movs	r0, r4
 8009044:	f00b fb64 	bl	8014710 <sprintf>
 8009048:	e7de      	b.n	8009008 <timeCommand+0x1c>
		else if (BOS.time.ampm == RTC_PM)
 800904a:	2b02      	cmp	r3, #2
 800904c:	d1dc      	bne.n	8009008 <timeCommand+0x1c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 800904e:	4907      	ldr	r1, [pc, #28]	; (800906c <timeCommand+0x80>)
 8009050:	7c4b      	ldrb	r3, [r1, #17]
 8009052:	7c8a      	ldrb	r2, [r1, #18]
 8009054:	4809      	ldr	r0, [pc, #36]	; (800907c <timeCommand+0x90>)
 8009056:	9002      	str	r0, [sp, #8]
 8009058:	89c8      	ldrh	r0, [r1, #14]
 800905a:	9001      	str	r0, [sp, #4]
 800905c:	7c09      	ldrb	r1, [r1, #16]
 800905e:	9100      	str	r1, [sp, #0]
 8009060:	4905      	ldr	r1, [pc, #20]	; (8009078 <timeCommand+0x8c>)
 8009062:	0020      	movs	r0, r4
 8009064:	f00b fb54 	bl	8014710 <sprintf>
 8009068:	e7ce      	b.n	8009008 <timeCommand+0x1c>
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	20006a10 	.word	0x20006a10
 8009070:	0801aed4 	.word	0x0801aed4
 8009074:	0801af28 	.word	0x0801af28
 8009078:	0801aefc 	.word	0x0801aefc
 800907c:	0801af2c 	.word	0x0801af2c

08009080 <setCommand>:
{
 8009080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009082:	46ce      	mov	lr, r9
 8009084:	4647      	mov	r7, r8
 8009086:	b580      	push	{r7, lr}
 8009088:	b08d      	sub	sp, #52	; 0x34
 800908a:	0005      	movs	r5, r0
 800908c:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	930b      	str	r3, [sp, #44]	; 0x2c
 8009092:	930a      	str	r3, [sp, #40]	; 0x28
 8009094:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 8009096:	9308      	str	r3, [sp, #32]
 8009098:	9307      	str	r3, [sp, #28]
	configASSERT( pcWriteBuffer );
 800909a:	2800      	cmp	r0, #0
 800909c:	d101      	bne.n	80090a2 <setCommand+0x22>
 800909e:	b672      	cpsid	i
 80090a0:	e7fe      	b.n	80090a0 <setCommand+0x20>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80090a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80090a4:	2101      	movs	r1, #1
 80090a6:	0020      	movs	r0, r4
 80090a8:	f005 fd26 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80090ac:	0006      	movs	r6, r0
 80090ae:	4bb3      	ldr	r3, [pc, #716]	; (800937c <setCommand+0x2fc>)
 80090b0:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 80090b2:	2204      	movs	r2, #4
 80090b4:	49b2      	ldr	r1, [pc, #712]	; (8009380 <setCommand+0x300>)
 80090b6:	f00b fb6f 	bl	8014798 <strncmp>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d015      	beq.n	80090ea <setCommand+0x6a>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 80090be:	2204      	movs	r2, #4
 80090c0:	49b0      	ldr	r1, [pc, #704]	; (8009384 <setCommand+0x304>)
 80090c2:	0030      	movs	r0, r6
 80090c4:	f00b fb68 	bl	8014798 <strncmp>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d100      	bne.n	80090ce <setCommand+0x4e>
 80090cc:	e180      	b.n	80093d0 <setCommand+0x350>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 80090ce:	2204      	movs	r2, #4
 80090d0:	49ad      	ldr	r1, [pc, #692]	; (8009388 <setCommand+0x308>)
 80090d2:	0030      	movs	r0, r6
 80090d4:	f00b fb60 	bl	8014798 <strncmp>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d100      	bne.n	80090de <setCommand+0x5e>
 80090dc:	e1e6      	b.n	80094ac <setCommand+0x42c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 80090de:	2213      	movs	r2, #19
 80090e0:	49aa      	ldr	r1, [pc, #680]	; (800938c <setCommand+0x30c>)
 80090e2:	0028      	movs	r0, r5
 80090e4:	f00b f8df 	bl	80142a6 <memcpy>
 80090e8:	e1d7      	b.n	800949a <setCommand+0x41a>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80090ea:	aa0a      	add	r2, sp, #40	; 0x28
 80090ec:	2102      	movs	r1, #2
 80090ee:	0020      	movs	r0, r4
 80090f0:	f005 fd02 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80090f4:	0004      	movs	r4, r0
 80090f6:	4ba6      	ldr	r3, [pc, #664]	; (8009390 <setCommand+0x310>)
 80090f8:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 80090fa:	4ba0      	ldr	r3, [pc, #640]	; (800937c <setCommand+0x2fc>)
 80090fc:	681e      	ldr	r6, [r3, #0]
 80090fe:	3604      	adds	r6, #4
 8009100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009102:	1f1f      	subs	r7, r3, #4
 8009104:	003a      	movs	r2, r7
 8009106:	49a3      	ldr	r1, [pc, #652]	; (8009394 <setCommand+0x314>)
 8009108:	0030      	movs	r0, r6
 800910a:	f00b fb45 	bl	8014798 <strncmp>
 800910e:	2800      	cmp	r0, #0
 8009110:	d153      	bne.n	80091ba <setCommand+0x13a>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 8009112:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009114:	0032      	movs	r2, r6
 8009116:	49a0      	ldr	r1, [pc, #640]	; (8009398 <setCommand+0x318>)
 8009118:	0020      	movs	r0, r4
 800911a:	f00b fb3d 	bl	8014798 <strncmp>
 800911e:	2800      	cmp	r0, #0
 8009120:	d115      	bne.n	800914e <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 8009122:	4b9e      	ldr	r3, [pc, #632]	; (800939c <setCommand+0x31c>)
 8009124:	2160      	movs	r1, #96	; 0x60
 8009126:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8009128:	79db      	ldrb	r3, [r3, #7]
 800912a:	021b      	lsls	r3, r3, #8
 800912c:	4319      	orrs	r1, r3
 800912e:	308a      	adds	r0, #138	; 0x8a
 8009130:	0040      	lsls	r0, r0, #1
 8009132:	f001 fd41 	bl	800abb8 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8009136:	4b91      	ldr	r3, [pc, #580]	; (800937c <setCommand+0x2fc>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	2300      	movs	r3, #0
 800913c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800913e:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8009140:	4b93      	ldr	r3, [pc, #588]	; (8009390 <setCommand+0x310>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4996      	ldr	r1, [pc, #600]	; (80093a0 <setCommand+0x320>)
 8009146:	0028      	movs	r0, r5
 8009148:	f00b fae2 	bl	8014710 <sprintf>
	return pdFALSE;
 800914c:	e1a5      	b.n	800949a <setCommand+0x41a>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 800914e:	0032      	movs	r2, r6
 8009150:	4994      	ldr	r1, [pc, #592]	; (80093a4 <setCommand+0x324>)
 8009152:	0020      	movs	r0, r4
 8009154:	f00b fb20 	bl	8014798 <strncmp>
 8009158:	2800      	cmp	r0, #0
 800915a:	d10a      	bne.n	8009172 <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 800915c:	4b8f      	ldr	r3, [pc, #572]	; (800939c <setCommand+0x31c>)
 800915e:	2120      	movs	r1, #32
 8009160:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8009162:	79db      	ldrb	r3, [r3, #7]
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	4319      	orrs	r1, r3
 8009168:	308a      	adds	r0, #138	; 0x8a
 800916a:	0040      	lsls	r0, r0, #1
 800916c:	f001 fd24 	bl	800abb8 <EE_WriteVariable>
 8009170:	e7e1      	b.n	8009136 <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 8009172:	0032      	movs	r2, r6
 8009174:	498c      	ldr	r1, [pc, #560]	; (80093a8 <setCommand+0x328>)
 8009176:	0020      	movs	r0, r4
 8009178:	f00b fb0e 	bl	8014798 <strncmp>
 800917c:	2800      	cmp	r0, #0
 800917e:	d10a      	bne.n	8009196 <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 8009180:	4b86      	ldr	r3, [pc, #536]	; (800939c <setCommand+0x31c>)
 8009182:	2140      	movs	r1, #64	; 0x40
 8009184:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8009186:	79db      	ldrb	r3, [r3, #7]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	4319      	orrs	r1, r3
 800918c:	308a      	adds	r0, #138	; 0x8a
 800918e:	0040      	lsls	r0, r0, #1
 8009190:	f001 fd12 	bl	800abb8 <EE_WriteVariable>
 8009194:	e7cf      	b.n	8009136 <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8009196:	0032      	movs	r2, r6
 8009198:	4984      	ldr	r1, [pc, #528]	; (80093ac <setCommand+0x32c>)
 800919a:	0020      	movs	r0, r4
 800919c:	f00b fafc 	bl	8014798 <strncmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d000      	beq.n	80091a6 <setCommand+0x126>
 80091a4:	e2a7      	b.n	80096f6 <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 80091a6:	4b7d      	ldr	r3, [pc, #500]	; (800939c <setCommand+0x31c>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80091ac:	79d9      	ldrb	r1, [r3, #7]
 80091ae:	0209      	lsls	r1, r1, #8
 80091b0:	308a      	adds	r0, #138	; 0x8a
 80091b2:	0040      	lsls	r0, r0, #1
 80091b4:	f001 fd00 	bl	800abb8 <EE_WriteVariable>
 80091b8:	e7bd      	b.n	8009136 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80091ba:	003a      	movs	r2, r7
 80091bc:	497c      	ldr	r1, [pc, #496]	; (80093b0 <setCommand+0x330>)
 80091be:	0030      	movs	r0, r6
 80091c0:	f00b faea 	bl	8014798 <strncmp>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d14a      	bne.n	800925e <setCommand+0x1de>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 80091c8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80091ca:	0032      	movs	r2, r6
 80091cc:	4972      	ldr	r1, [pc, #456]	; (8009398 <setCommand+0x318>)
 80091ce:	0020      	movs	r0, r4
 80091d0:	f00b fae2 	bl	8014798 <strncmp>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d10b      	bne.n	80091f0 <setCommand+0x170>
				BOS.trace = TRACE_BOTH;
 80091d8:	4b70      	ldr	r3, [pc, #448]	; (800939c <setCommand+0x31c>)
 80091da:	2203      	movs	r2, #3
 80091dc:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80091de:	799b      	ldrb	r3, [r3, #6]
 80091e0:	21c0      	movs	r1, #192	; 0xc0
 80091e2:	0089      	lsls	r1, r1, #2
 80091e4:	4319      	orrs	r1, r3
 80091e6:	308a      	adds	r0, #138	; 0x8a
 80091e8:	0040      	lsls	r0, r0, #1
 80091ea:	f001 fce5 	bl	800abb8 <EE_WriteVariable>
 80091ee:	e7a2      	b.n	8009136 <setCommand+0xb6>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 80091f0:	0032      	movs	r2, r6
 80091f2:	496c      	ldr	r1, [pc, #432]	; (80093a4 <setCommand+0x324>)
 80091f4:	0020      	movs	r0, r4
 80091f6:	f00b facf 	bl	8014798 <strncmp>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d10b      	bne.n	8009216 <setCommand+0x196>
				BOS.trace = TRACE_MESSAGE;
 80091fe:	4b67      	ldr	r3, [pc, #412]	; (800939c <setCommand+0x31c>)
 8009200:	2201      	movs	r2, #1
 8009202:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8009204:	799b      	ldrb	r3, [r3, #6]
 8009206:	2180      	movs	r1, #128	; 0x80
 8009208:	0049      	lsls	r1, r1, #1
 800920a:	4319      	orrs	r1, r3
 800920c:	308a      	adds	r0, #138	; 0x8a
 800920e:	4090      	lsls	r0, r2
 8009210:	f001 fcd2 	bl	800abb8 <EE_WriteVariable>
 8009214:	e78f      	b.n	8009136 <setCommand+0xb6>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8009216:	0032      	movs	r2, r6
 8009218:	495e      	ldr	r1, [pc, #376]	; (8009394 <setCommand+0x314>)
 800921a:	0020      	movs	r0, r4
 800921c:	f00b fabc 	bl	8014798 <strncmp>
 8009220:	2800      	cmp	r0, #0
 8009222:	d10b      	bne.n	800923c <setCommand+0x1bc>
				BOS.trace = TRACE_RESPONSE;
 8009224:	4b5d      	ldr	r3, [pc, #372]	; (800939c <setCommand+0x31c>)
 8009226:	2202      	movs	r2, #2
 8009228:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800922a:	799b      	ldrb	r3, [r3, #6]
 800922c:	2180      	movs	r1, #128	; 0x80
 800922e:	0089      	lsls	r1, r1, #2
 8009230:	4319      	orrs	r1, r3
 8009232:	308a      	adds	r0, #138	; 0x8a
 8009234:	0040      	lsls	r0, r0, #1
 8009236:	f001 fcbf 	bl	800abb8 <EE_WriteVariable>
 800923a:	e77c      	b.n	8009136 <setCommand+0xb6>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 800923c:	0032      	movs	r2, r6
 800923e:	495b      	ldr	r1, [pc, #364]	; (80093ac <setCommand+0x32c>)
 8009240:	0020      	movs	r0, r4
 8009242:	f00b faa9 	bl	8014798 <strncmp>
 8009246:	2800      	cmp	r0, #0
 8009248:	d000      	beq.n	800924c <setCommand+0x1cc>
 800924a:	e254      	b.n	80096f6 <setCommand+0x676>
				BOS.trace = TRACE_NONE;
 800924c:	4b53      	ldr	r3, [pc, #332]	; (800939c <setCommand+0x31c>)
 800924e:	2200      	movs	r2, #0
 8009250:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8009252:	7999      	ldrb	r1, [r3, #6]
 8009254:	308a      	adds	r0, #138	; 0x8a
 8009256:	0040      	lsls	r0, r0, #1
 8009258:	f001 fcae 	bl	800abb8 <EE_WriteVariable>
 800925c:	e76b      	b.n	8009136 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 800925e:	003a      	movs	r2, r7
 8009260:	4954      	ldr	r1, [pc, #336]	; (80093b4 <setCommand+0x334>)
 8009262:	0030      	movs	r0, r6
 8009264:	f00b fa98 	bl	8014798 <strncmp>
 8009268:	2800      	cmp	r0, #0
 800926a:	d128      	bne.n	80092be <setCommand+0x23e>
			temp2 = atoi((const char *)pcParameterString2);
 800926c:	0020      	movs	r0, r4
 800926e:	f00a fd8a 	bl	8013d86 <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 8009272:	23e1      	movs	r3, #225	; 0xe1
 8009274:	031b      	lsls	r3, r3, #12
 8009276:	4298      	cmp	r0, r3
 8009278:	d900      	bls.n	800927c <setCommand+0x1fc>
 800927a:	e23c      	b.n	80096f6 <setCommand+0x676>
				BOS.clibaudrate = temp2;
 800927c:	4c47      	ldr	r4, [pc, #284]	; (800939c <setCommand+0x31c>)
 800927e:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8009280:	b281      	uxth	r1, r0
 8009282:	208c      	movs	r0, #140	; 0x8c
 8009284:	0040      	lsls	r0, r0, #1
 8009286:	f001 fc97 	bl	800abb8 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 800928a:	68a1      	ldr	r1, [r4, #8]
 800928c:	0c09      	lsrs	r1, r1, #16
 800928e:	201a      	movs	r0, #26
 8009290:	30ff      	adds	r0, #255	; 0xff
 8009292:	f001 fc91 	bl	800abb8 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8009296:	4b39      	ldr	r3, [pc, #228]	; (800937c <setCommand+0x2fc>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	2300      	movs	r3, #0
 800929c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800929e:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 80092a0:	4b3b      	ldr	r3, [pc, #236]	; (8009390 <setCommand+0x310>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	493e      	ldr	r1, [pc, #248]	; (80093a0 <setCommand+0x320>)
 80092a6:	0028      	movs	r0, r5
 80092a8:	f00b fa32 	bl	8014710 <sprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 80092ac:	4942      	ldr	r1, [pc, #264]	; (80093b8 <setCommand+0x338>)
 80092ae:	0028      	movs	r0, r5
 80092b0:	f00b fa4e 	bl	8014750 <strcat>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 80092b4:	4941      	ldr	r1, [pc, #260]	; (80093bc <setCommand+0x33c>)
 80092b6:	0028      	movs	r0, r5
 80092b8:	f00b fa4a 	bl	8014750 <strcat>
 80092bc:	e0ed      	b.n	800949a <setCommand+0x41a>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 80092be:	003a      	movs	r2, r7
 80092c0:	493f      	ldr	r1, [pc, #252]	; (80093c0 <setCommand+0x340>)
 80092c2:	0030      	movs	r0, r6
 80092c4:	f00b fa68 	bl	8014798 <strncmp>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d10d      	bne.n	80092e8 <setCommand+0x268>
			temp16 = atoi((const char *)pcParameterString2);
 80092cc:	0020      	movs	r0, r4
 80092ce:	f00a fd5a 	bl	8013d86 <atoi>
 80092d2:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 80092d4:	2900      	cmp	r1, #0
 80092d6:	d100      	bne.n	80092da <setCommand+0x25a>
 80092d8:	e20d      	b.n	80096f6 <setCommand+0x676>
				BOS.buttons.debounce = temp16;
 80092da:	4b30      	ldr	r3, [pc, #192]	; (800939c <setCommand+0x31c>)
 80092dc:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 80092de:	2016      	movs	r0, #22
 80092e0:	30ff      	adds	r0, #255	; 0xff
 80092e2:	f001 fc69 	bl	800abb8 <EE_WriteVariable>
 80092e6:	e726      	b.n	8009136 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 80092e8:	003a      	movs	r2, r7
 80092ea:	4936      	ldr	r1, [pc, #216]	; (80093c4 <setCommand+0x344>)
 80092ec:	0030      	movs	r0, r6
 80092ee:	f00b fa53 	bl	8014798 <strncmp>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d10d      	bne.n	8009312 <setCommand+0x292>
			temp16 = atoi((const char *)pcParameterString2);
 80092f6:	0020      	movs	r0, r4
 80092f8:	f00a fd45 	bl	8013d86 <atoi>
 80092fc:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 80092fe:	2900      	cmp	r1, #0
 8009300:	d100      	bne.n	8009304 <setCommand+0x284>
 8009302:	e1f8      	b.n	80096f6 <setCommand+0x676>
				BOS.buttons.singleClickTime = temp16;
 8009304:	4b25      	ldr	r3, [pc, #148]	; (800939c <setCommand+0x31c>)
 8009306:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 8009308:	208b      	movs	r0, #139	; 0x8b
 800930a:	0040      	lsls	r0, r0, #1
 800930c:	f001 fc54 	bl	800abb8 <EE_WriteVariable>
 8009310:	e711      	b.n	8009136 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8009312:	003a      	movs	r2, r7
 8009314:	492c      	ldr	r1, [pc, #176]	; (80093c8 <setCommand+0x348>)
 8009316:	0030      	movs	r0, r6
 8009318:	f00b fa3e 	bl	8014798 <strncmp>
 800931c:	2800      	cmp	r0, #0
 800931e:	d112      	bne.n	8009346 <setCommand+0x2c6>
			temp16 = atoi((const char *)pcParameterString2);
 8009320:	0020      	movs	r0, r4
 8009322:	f00a fd30 	bl	8013d86 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8009326:	1e43      	subs	r3, r0, #1
 8009328:	b29b      	uxth	r3, r3
 800932a:	2bfe      	cmp	r3, #254	; 0xfe
 800932c:	d900      	bls.n	8009330 <setCommand+0x2b0>
 800932e:	e1e2      	b.n	80096f6 <setCommand+0x676>
				BOS.buttons.minInterClickTime = temp16;
 8009330:	b2c0      	uxtb	r0, r0
 8009332:	4b1a      	ldr	r3, [pc, #104]	; (800939c <setCommand+0x31c>)
 8009334:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 8009336:	7959      	ldrb	r1, [r3, #5]
 8009338:	0209      	lsls	r1, r1, #8
 800933a:	4301      	orrs	r1, r0
 800933c:	2018      	movs	r0, #24
 800933e:	30ff      	adds	r0, #255	; 0xff
 8009340:	f001 fc3a 	bl	800abb8 <EE_WriteVariable>
 8009344:	e6f7      	b.n	8009136 <setCommand+0xb6>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8009346:	003a      	movs	r2, r7
 8009348:	4920      	ldr	r1, [pc, #128]	; (80093cc <setCommand+0x34c>)
 800934a:	0030      	movs	r0, r6
 800934c:	f00b fa24 	bl	8014798 <strncmp>
 8009350:	2800      	cmp	r0, #0
 8009352:	d000      	beq.n	8009356 <setCommand+0x2d6>
 8009354:	e6c3      	b.n	80090de <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 8009356:	0020      	movs	r0, r4
 8009358:	f00a fd15 	bl	8013d86 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 800935c:	1e43      	subs	r3, r0, #1
 800935e:	b29b      	uxth	r3, r3
 8009360:	2bfe      	cmp	r3, #254	; 0xfe
 8009362:	d900      	bls.n	8009366 <setCommand+0x2e6>
 8009364:	e1c7      	b.n	80096f6 <setCommand+0x676>
				BOS.buttons.maxInterClickTime = temp16;
 8009366:	4b0d      	ldr	r3, [pc, #52]	; (800939c <setCommand+0x31c>)
 8009368:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800936a:	0200      	lsls	r0, r0, #8
 800936c:	7919      	ldrb	r1, [r3, #4]
 800936e:	4301      	orrs	r1, r0
 8009370:	b289      	uxth	r1, r1
 8009372:	2018      	movs	r0, #24
 8009374:	30ff      	adds	r0, #255	; 0xff
 8009376:	f001 fc1f 	bl	800abb8 <EE_WriteVariable>
 800937a:	e6dc      	b.n	8009136 <setCommand+0xb6>
 800937c:	200012d8 	.word	0x200012d8
 8009380:	080194d8 	.word	0x080194d8
 8009384:	08019e34 	.word	0x08019e34
 8009388:	08019e40 	.word	0x08019e40
 800938c:	08019564 	.word	0x08019564
 8009390:	200012e4 	.word	0x200012e4
 8009394:	080194e0 	.word	0x080194e0
 8009398:	080194ec 	.word	0x080194ec
 800939c:	20006a10 	.word	0x20006a10
 80093a0:	08019d4c 	.word	0x08019d4c
 80093a4:	08019d40 	.word	0x08019d40
 80093a8:	08019d48 	.word	0x08019d48
 80093ac:	080194f4 	.word	0x080194f4
 80093b0:	080194fc 	.word	0x080194fc
 80093b4:	08019504 	.word	0x08019504
 80093b8:	08019d60 	.word	0x08019d60
 80093bc:	08019d90 	.word	0x08019d90
 80093c0:	08019510 	.word	0x08019510
 80093c4:	0801951c 	.word	0x0801951c
 80093c8:	0801952c 	.word	0x0801952c
 80093cc:	08019540 	.word	0x08019540
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80093d0:	aa0a      	add	r2, sp, #40	; 0x28
 80093d2:	2102      	movs	r1, #2
 80093d4:	0020      	movs	r0, r4
 80093d6:	f005 fb8f 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80093da:	4bca      	ldr	r3, [pc, #808]	; (8009704 <setCommand+0x684>)
 80093dc:	4699      	mov	r9, r3
 80093de:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80093e0:	aa09      	add	r2, sp, #36	; 0x24
 80093e2:	2103      	movs	r1, #3
 80093e4:	0020      	movs	r0, r4
 80093e6:	f005 fb87 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80093ea:	4fc7      	ldr	r7, [pc, #796]	; (8009708 <setCommand+0x688>)
 80093ec:	6038      	str	r0, [r7, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80093ee:	aa08      	add	r2, sp, #32
 80093f0:	2104      	movs	r1, #4
 80093f2:	0020      	movs	r0, r4
 80093f4:	f005 fb80 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80093f8:	4ec4      	ldr	r6, [pc, #784]	; (800970c <setCommand+0x68c>)
 80093fa:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80093fc:	aa07      	add	r2, sp, #28
 80093fe:	2105      	movs	r1, #5
 8009400:	0020      	movs	r0, r4
 8009402:	f005 fb79 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 8009406:	4cc2      	ldr	r4, [pc, #776]	; (8009710 <setCommand+0x690>)
 8009408:	6020      	str	r0, [r4, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 800940a:	464b      	mov	r3, r9
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	f00a fcba 	bl	8013d86 <atoi>
 8009412:	b2c3      	uxtb	r3, r0
 8009414:	4699      	mov	r9, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8009416:	6838      	ldr	r0, [r7, #0]
 8009418:	f00a fcb5 	bl	8013d86 <atoi>
 800941c:	b2c7      	uxtb	r7, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 800941e:	6830      	ldr	r0, [r6, #0]
 8009420:	f00a fcb1 	bl	8013d86 <atoi>
 8009424:	b2c6      	uxtb	r6, r0
		if (pcParameterString5 != NULL) {
 8009426:	6824      	ldr	r4, [r4, #0]
 8009428:	2c00      	cmp	r4, #0
 800942a:	d010      	beq.n	800944e <setCommand+0x3ce>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 800942c:	2202      	movs	r2, #2
 800942e:	49b9      	ldr	r1, [pc, #740]	; (8009714 <setCommand+0x694>)
 8009430:	0020      	movs	r0, r4
 8009432:	f00b f9b1 	bl	8014798 <strncmp>
 8009436:	2800      	cmp	r0, #0
 8009438:	d035      	beq.n	80094a6 <setCommand+0x426>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 800943a:	2202      	movs	r2, #2
 800943c:	49b6      	ldr	r1, [pc, #728]	; (8009718 <setCommand+0x698>)
 800943e:	0020      	movs	r0, r4
 8009440:	f00b f9aa 	bl	8014798 <strncmp>
 8009444:	2800      	cmp	r0, #0
 8009446:	d000      	beq.n	800944a <setCommand+0x3ca>
 8009448:	e155      	b.n	80096f6 <setCommand+0x676>
				temp84 = RTC_PM;
 800944a:	2302      	movs	r3, #2
 800944c:	4698      	mov	r8, r3
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 800944e:	464b      	mov	r3, r9
 8009450:	2b17      	cmp	r3, #23
 8009452:	d900      	bls.n	8009456 <setCommand+0x3d6>
 8009454:	e14f      	b.n	80096f6 <setCommand+0x676>
 8009456:	2f3b      	cmp	r7, #59	; 0x3b
 8009458:	d900      	bls.n	800945c <setCommand+0x3dc>
 800945a:	e14c      	b.n	80096f6 <setCommand+0x676>
 800945c:	2e3b      	cmp	r6, #59	; 0x3b
 800945e:	d900      	bls.n	8009462 <setCommand+0x3e2>
 8009460:	e149      	b.n	80096f6 <setCommand+0x676>
				GetTimeDate();				
 8009462:	f7ff fcf9 	bl	8008e58 <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 8009466:	4cad      	ldr	r4, [pc, #692]	; (800971c <setCommand+0x69c>)
 8009468:	7d23      	ldrb	r3, [r4, #20]
 800946a:	8b22      	ldrh	r2, [r4, #24]
 800946c:	7d61      	ldrb	r1, [r4, #21]
 800946e:	7da0      	ldrb	r0, [r4, #22]
 8009470:	7b24      	ldrb	r4, [r4, #12]
 8009472:	b264      	sxtb	r4, r4
 8009474:	9404      	str	r4, [sp, #16]
 8009476:	4644      	mov	r4, r8
 8009478:	9403      	str	r4, [sp, #12]
 800947a:	464c      	mov	r4, r9
 800947c:	9402      	str	r4, [sp, #8]
 800947e:	9701      	str	r7, [sp, #4]
 8009480:	9600      	str	r6, [sp, #0]
 8009482:	f7ff fc8f 	bl	8008da4 <BOS_CalendarConfig>
 8009486:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 8009488:	2e00      	cmp	r6, #0
 800948a:	d100      	bne.n	800948e <setCommand+0x40e>
 800948c:	e653      	b.n	8009136 <setCommand+0xb6>
	else if (result == BOS_ERR_WrongParam)
 800948e:	2e67      	cmp	r6, #103	; 0x67
 8009490:	d100      	bne.n	8009494 <setCommand+0x414>
 8009492:	e624      	b.n	80090de <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 8009494:	2e68      	cmp	r6, #104	; 0x68
 8009496:	d100      	bne.n	800949a <setCommand+0x41a>
 8009498:	e12d      	b.n	80096f6 <setCommand+0x676>
}
 800949a:	2000      	movs	r0, #0
 800949c:	b00d      	add	sp, #52	; 0x34
 800949e:	bc0c      	pop	{r2, r3}
 80094a0:	4690      	mov	r8, r2
 80094a2:	4699      	mov	r9, r3
 80094a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 = RTC_AM;
 80094a6:	2301      	movs	r3, #1
 80094a8:	4698      	mov	r8, r3
 80094aa:	e7d0      	b.n	800944e <setCommand+0x3ce>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 80094ac:	aa0a      	add	r2, sp, #40	; 0x28
 80094ae:	2102      	movs	r1, #2
 80094b0:	0020      	movs	r0, r4
 80094b2:	f005 fb21 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80094b6:	4e93      	ldr	r6, [pc, #588]	; (8009704 <setCommand+0x684>)
 80094b8:	6030      	str	r0, [r6, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 80094ba:	aa09      	add	r2, sp, #36	; 0x24
 80094bc:	2103      	movs	r1, #3
 80094be:	0020      	movs	r0, r4
 80094c0:	f005 fb1a 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80094c4:	4b90      	ldr	r3, [pc, #576]	; (8009708 <setCommand+0x688>)
 80094c6:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 80094c8:	aa08      	add	r2, sp, #32
 80094ca:	2104      	movs	r1, #4
 80094cc:	0020      	movs	r0, r4
 80094ce:	f005 fb13 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80094d2:	4b8e      	ldr	r3, [pc, #568]	; (800970c <setCommand+0x68c>)
 80094d4:	4698      	mov	r8, r3
 80094d6:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 80094d8:	aa07      	add	r2, sp, #28
 80094da:	2105      	movs	r1, #5
 80094dc:	0020      	movs	r0, r4
 80094de:	f005 fb0b 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 80094e2:	4c8b      	ldr	r4, [pc, #556]	; (8009710 <setCommand+0x690>)
 80094e4:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 80094e6:	4643      	mov	r3, r8
 80094e8:	6818      	ldr	r0, [r3, #0]
 80094ea:	f00a fc4c 	bl	8013d86 <atoi>
 80094ee:	b2c3      	uxtb	r3, r0
 80094f0:	4698      	mov	r8, r3
		temp16 = atoi((const char *)pcParameterString5);		// year	
 80094f2:	6820      	ldr	r0, [r4, #0]
 80094f4:	f00a fc47 	bl	8013d86 <atoi>
 80094f8:	b283      	uxth	r3, r0
 80094fa:	4699      	mov	r9, r3
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 80094fc:	6834      	ldr	r4, [r6, #0]
 80094fe:	2206      	movs	r2, #6
 8009500:	4987      	ldr	r1, [pc, #540]	; (8009720 <setCommand+0x6a0>)
 8009502:	0020      	movs	r0, r4
 8009504:	f00b f948 	bl	8014798 <strncmp>
 8009508:	2800      	cmp	r0, #0
 800950a:	d100      	bne.n	800950e <setCommand+0x48e>
 800950c:	e195      	b.n	800983a <setCommand+0x7ba>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 800950e:	2207      	movs	r2, #7
 8009510:	4984      	ldr	r1, [pc, #528]	; (8009724 <setCommand+0x6a4>)
 8009512:	0020      	movs	r0, r4
 8009514:	f00b f940 	bl	8014798 <strncmp>
 8009518:	2800      	cmp	r0, #0
 800951a:	d100      	bne.n	800951e <setCommand+0x49e>
 800951c:	e19b      	b.n	8009856 <setCommand+0x7d6>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 800951e:	2209      	movs	r2, #9
 8009520:	4981      	ldr	r1, [pc, #516]	; (8009728 <setCommand+0x6a8>)
 8009522:	0020      	movs	r0, r4
 8009524:	f00b f938 	bl	8014798 <strncmp>
 8009528:	2800      	cmp	r0, #0
 800952a:	d100      	bne.n	800952e <setCommand+0x4ae>
 800952c:	e195      	b.n	800985a <setCommand+0x7da>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 800952e:	2208      	movs	r2, #8
 8009530:	497e      	ldr	r1, [pc, #504]	; (800972c <setCommand+0x6ac>)
 8009532:	0020      	movs	r0, r4
 8009534:	f00b f930 	bl	8014798 <strncmp>
 8009538:	2800      	cmp	r0, #0
 800953a:	d100      	bne.n	800953e <setCommand+0x4be>
 800953c:	e18f      	b.n	800985e <setCommand+0x7de>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 800953e:	2206      	movs	r2, #6
 8009540:	497b      	ldr	r1, [pc, #492]	; (8009730 <setCommand+0x6b0>)
 8009542:	0020      	movs	r0, r4
 8009544:	f00b f928 	bl	8014798 <strncmp>
 8009548:	2800      	cmp	r0, #0
 800954a:	d100      	bne.n	800954e <setCommand+0x4ce>
 800954c:	e189      	b.n	8009862 <setCommand+0x7e2>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 800954e:	2208      	movs	r2, #8
 8009550:	4978      	ldr	r1, [pc, #480]	; (8009734 <setCommand+0x6b4>)
 8009552:	0020      	movs	r0, r4
 8009554:	f00b f920 	bl	8014798 <strncmp>
 8009558:	2800      	cmp	r0, #0
 800955a:	d100      	bne.n	800955e <setCommand+0x4de>
 800955c:	e183      	b.n	8009866 <setCommand+0x7e6>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 800955e:	2206      	movs	r2, #6
 8009560:	4975      	ldr	r1, [pc, #468]	; (8009738 <setCommand+0x6b8>)
 8009562:	0020      	movs	r0, r4
 8009564:	f00b f918 	bl	8014798 <strncmp>
 8009568:	2800      	cmp	r0, #0
 800956a:	d100      	bne.n	800956e <setCommand+0x4ee>
 800956c:	e17d      	b.n	800986a <setCommand+0x7ea>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800956e:	4b66      	ldr	r3, [pc, #408]	; (8009708 <setCommand+0x688>)
 8009570:	681c      	ldr	r4, [r3, #0]
 8009572:	2207      	movs	r2, #7
 8009574:	4971      	ldr	r1, [pc, #452]	; (800973c <setCommand+0x6bc>)
 8009576:	0020      	movs	r0, r4
 8009578:	f00b f90e 	bl	8014798 <strncmp>
			result = BOS_ERR_WrongValue;		
 800957c:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800957e:	2800      	cmp	r0, #0
 8009580:	d101      	bne.n	8009586 <setCommand+0x506>
			result = BOS_ERR_WrongValue;		
 8009582:	2668      	movs	r6, #104	; 0x68
 8009584:	e783      	b.n	800948e <setCommand+0x40e>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8009586:	2202      	movs	r2, #2
 8009588:	496d      	ldr	r1, [pc, #436]	; (8009740 <setCommand+0x6c0>)
 800958a:	0020      	movs	r0, r4
 800958c:	f00b f904 	bl	8014798 <strncmp>
 8009590:	2800      	cmp	r0, #0
 8009592:	d100      	bne.n	8009596 <setCommand+0x516>
 8009594:	e104      	b.n	80097a0 <setCommand+0x720>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 8009596:	2208      	movs	r2, #8
 8009598:	496a      	ldr	r1, [pc, #424]	; (8009744 <setCommand+0x6c4>)
 800959a:	0020      	movs	r0, r4
 800959c:	f00b f8fc 	bl	8014798 <strncmp>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d100      	bne.n	80095a6 <setCommand+0x526>
 80095a4:	e11f      	b.n	80097e6 <setCommand+0x766>
 80095a6:	2202      	movs	r2, #2
 80095a8:	4967      	ldr	r1, [pc, #412]	; (8009748 <setCommand+0x6c8>)
 80095aa:	0020      	movs	r0, r4
 80095ac:	f00b f8f4 	bl	8014798 <strncmp>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d100      	bne.n	80095b6 <setCommand+0x536>
 80095b4:	e119      	b.n	80097ea <setCommand+0x76a>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 80095b6:	2205      	movs	r2, #5
 80095b8:	4964      	ldr	r1, [pc, #400]	; (800974c <setCommand+0x6cc>)
 80095ba:	0020      	movs	r0, r4
 80095bc:	f00b f8ec 	bl	8014798 <strncmp>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d100      	bne.n	80095c6 <setCommand+0x546>
 80095c4:	e113      	b.n	80097ee <setCommand+0x76e>
 80095c6:	2202      	movs	r2, #2
 80095c8:	4961      	ldr	r1, [pc, #388]	; (8009750 <setCommand+0x6d0>)
 80095ca:	0020      	movs	r0, r4
 80095cc:	f00b f8e4 	bl	8014798 <strncmp>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d100      	bne.n	80095d6 <setCommand+0x556>
 80095d4:	e10d      	b.n	80097f2 <setCommand+0x772>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 80095d6:	2205      	movs	r2, #5
 80095d8:	495e      	ldr	r1, [pc, #376]	; (8009754 <setCommand+0x6d4>)
 80095da:	0020      	movs	r0, r4
 80095dc:	f00b f8dc 	bl	8014798 <strncmp>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d100      	bne.n	80095e6 <setCommand+0x566>
 80095e4:	e107      	b.n	80097f6 <setCommand+0x776>
 80095e6:	2202      	movs	r2, #2
 80095e8:	495b      	ldr	r1, [pc, #364]	; (8009758 <setCommand+0x6d8>)
 80095ea:	0020      	movs	r0, r4
 80095ec:	f00b f8d4 	bl	8014798 <strncmp>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d100      	bne.n	80095f6 <setCommand+0x576>
 80095f4:	e101      	b.n	80097fa <setCommand+0x77a>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 80095f6:	2203      	movs	r2, #3
 80095f8:	4958      	ldr	r1, [pc, #352]	; (800975c <setCommand+0x6dc>)
 80095fa:	0020      	movs	r0, r4
 80095fc:	f00b f8cc 	bl	8014798 <strncmp>
 8009600:	2800      	cmp	r0, #0
 8009602:	d100      	bne.n	8009606 <setCommand+0x586>
 8009604:	e0fb      	b.n	80097fe <setCommand+0x77e>
 8009606:	2202      	movs	r2, #2
 8009608:	4955      	ldr	r1, [pc, #340]	; (8009760 <setCommand+0x6e0>)
 800960a:	0020      	movs	r0, r4
 800960c:	f00b f8c4 	bl	8014798 <strncmp>
 8009610:	2800      	cmp	r0, #0
 8009612:	d100      	bne.n	8009616 <setCommand+0x596>
 8009614:	e0f5      	b.n	8009802 <setCommand+0x782>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 8009616:	2204      	movs	r2, #4
 8009618:	4952      	ldr	r1, [pc, #328]	; (8009764 <setCommand+0x6e4>)
 800961a:	0020      	movs	r0, r4
 800961c:	f00b f8bc 	bl	8014798 <strncmp>
 8009620:	2800      	cmp	r0, #0
 8009622:	d100      	bne.n	8009626 <setCommand+0x5a6>
 8009624:	e0ef      	b.n	8009806 <setCommand+0x786>
 8009626:	2202      	movs	r2, #2
 8009628:	494f      	ldr	r1, [pc, #316]	; (8009768 <setCommand+0x6e8>)
 800962a:	0020      	movs	r0, r4
 800962c:	f00b f8b4 	bl	8014798 <strncmp>
 8009630:	2800      	cmp	r0, #0
 8009632:	d100      	bne.n	8009636 <setCommand+0x5b6>
 8009634:	e0e9      	b.n	800980a <setCommand+0x78a>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 8009636:	2204      	movs	r2, #4
 8009638:	494c      	ldr	r1, [pc, #304]	; (800976c <setCommand+0x6ec>)
 800963a:	0020      	movs	r0, r4
 800963c:	f00b f8ac 	bl	8014798 <strncmp>
 8009640:	2800      	cmp	r0, #0
 8009642:	d100      	bne.n	8009646 <setCommand+0x5c6>
 8009644:	e0e3      	b.n	800980e <setCommand+0x78e>
 8009646:	2202      	movs	r2, #2
 8009648:	4949      	ldr	r1, [pc, #292]	; (8009770 <setCommand+0x6f0>)
 800964a:	0020      	movs	r0, r4
 800964c:	f00b f8a4 	bl	8014798 <strncmp>
 8009650:	2800      	cmp	r0, #0
 8009652:	d100      	bne.n	8009656 <setCommand+0x5d6>
 8009654:	e0dd      	b.n	8009812 <setCommand+0x792>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 8009656:	2205      	movs	r2, #5
 8009658:	4946      	ldr	r1, [pc, #280]	; (8009774 <setCommand+0x6f4>)
 800965a:	0020      	movs	r0, r4
 800965c:	f00b f89c 	bl	8014798 <strncmp>
 8009660:	2800      	cmp	r0, #0
 8009662:	d100      	bne.n	8009666 <setCommand+0x5e6>
 8009664:	e0d7      	b.n	8009816 <setCommand+0x796>
 8009666:	2202      	movs	r2, #2
 8009668:	4943      	ldr	r1, [pc, #268]	; (8009778 <setCommand+0x6f8>)
 800966a:	0020      	movs	r0, r4
 800966c:	f00b f894 	bl	8014798 <strncmp>
 8009670:	2800      	cmp	r0, #0
 8009672:	d100      	bne.n	8009676 <setCommand+0x5f6>
 8009674:	e0d1      	b.n	800981a <setCommand+0x79a>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8009676:	2209      	movs	r2, #9
 8009678:	4940      	ldr	r1, [pc, #256]	; (800977c <setCommand+0x6fc>)
 800967a:	0020      	movs	r0, r4
 800967c:	f00b f88c 	bl	8014798 <strncmp>
 8009680:	2800      	cmp	r0, #0
 8009682:	d100      	bne.n	8009686 <setCommand+0x606>
 8009684:	e0cb      	b.n	800981e <setCommand+0x79e>
 8009686:	2202      	movs	r2, #2
 8009688:	493d      	ldr	r1, [pc, #244]	; (8009780 <setCommand+0x700>)
 800968a:	0020      	movs	r0, r4
 800968c:	f00b f884 	bl	8014798 <strncmp>
 8009690:	2800      	cmp	r0, #0
 8009692:	d100      	bne.n	8009696 <setCommand+0x616>
 8009694:	e0c5      	b.n	8009822 <setCommand+0x7a2>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 8009696:	2207      	movs	r2, #7
 8009698:	493a      	ldr	r1, [pc, #232]	; (8009784 <setCommand+0x704>)
 800969a:	0020      	movs	r0, r4
 800969c:	f00b f87c 	bl	8014798 <strncmp>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d100      	bne.n	80096a6 <setCommand+0x626>
 80096a4:	e0bf      	b.n	8009826 <setCommand+0x7a6>
 80096a6:	2202      	movs	r2, #2
 80096a8:	4937      	ldr	r1, [pc, #220]	; (8009788 <setCommand+0x708>)
 80096aa:	0020      	movs	r0, r4
 80096ac:	f00b f874 	bl	8014798 <strncmp>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d100      	bne.n	80096b6 <setCommand+0x636>
 80096b4:	e0b9      	b.n	800982a <setCommand+0x7aa>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 80096b6:	2208      	movs	r2, #8
 80096b8:	4934      	ldr	r1, [pc, #208]	; (800978c <setCommand+0x70c>)
 80096ba:	0020      	movs	r0, r4
 80096bc:	f00b f86c 	bl	8014798 <strncmp>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d100      	bne.n	80096c6 <setCommand+0x646>
 80096c4:	e0b3      	b.n	800982e <setCommand+0x7ae>
 80096c6:	2202      	movs	r2, #2
 80096c8:	4931      	ldr	r1, [pc, #196]	; (8009790 <setCommand+0x710>)
 80096ca:	0020      	movs	r0, r4
 80096cc:	f00b f864 	bl	8014798 <strncmp>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d100      	bne.n	80096d6 <setCommand+0x656>
 80096d4:	e0ad      	b.n	8009832 <setCommand+0x7b2>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 80096d6:	2208      	movs	r2, #8
 80096d8:	492e      	ldr	r1, [pc, #184]	; (8009794 <setCommand+0x714>)
 80096da:	0020      	movs	r0, r4
 80096dc:	f00b f85c 	bl	8014798 <strncmp>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d100      	bne.n	80096e6 <setCommand+0x666>
 80096e4:	e0a7      	b.n	8009836 <setCommand+0x7b6>
 80096e6:	2202      	movs	r2, #2
 80096e8:	492b      	ldr	r1, [pc, #172]	; (8009798 <setCommand+0x718>)
 80096ea:	0020      	movs	r0, r4
 80096ec:	f00b f854 	bl	8014798 <strncmp>
			temp82 = DECEMBER;
 80096f0:	240c      	movs	r4, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d055      	beq.n	80097a2 <setCommand+0x722>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 80096f6:	220f      	movs	r2, #15
 80096f8:	4928      	ldr	r1, [pc, #160]	; (800979c <setCommand+0x71c>)
 80096fa:	0028      	movs	r0, r5
 80096fc:	f00a fdd3 	bl	80142a6 <memcpy>
 8009700:	e6cb      	b.n	800949a <setCommand+0x41a>
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	200012e4 	.word	0x200012e4
 8009708:	200012ec 	.word	0x200012ec
 800970c:	200012f0 	.word	0x200012f0
 8009710:	200012f4 	.word	0x200012f4
 8009714:	0801b6bc 	.word	0x0801b6bc
 8009718:	08019e3c 	.word	0x08019e3c
 800971c:	20006a10 	.word	0x20006a10
 8009720:	08019e48 	.word	0x08019e48
 8009724:	08019e50 	.word	0x08019e50
 8009728:	08019e58 	.word	0x08019e58
 800972c:	08019e64 	.word	0x08019e64
 8009730:	08019e70 	.word	0x08019e70
 8009734:	08019e78 	.word	0x08019e78
 8009738:	08019e84 	.word	0x08019e84
 800973c:	08019f20 	.word	0x08019f20
 8009740:	08019e8c 	.word	0x08019e8c
 8009744:	08019e90 	.word	0x08019e90
 8009748:	08019e9c 	.word	0x08019e9c
 800974c:	08019ea0 	.word	0x08019ea0
 8009750:	08019ea8 	.word	0x08019ea8
 8009754:	08019eac 	.word	0x08019eac
 8009758:	08019eb4 	.word	0x08019eb4
 800975c:	08019eb8 	.word	0x08019eb8
 8009760:	08019ebc 	.word	0x08019ebc
 8009764:	08019ec0 	.word	0x08019ec0
 8009768:	08019ec8 	.word	0x08019ec8
 800976c:	08019ecc 	.word	0x08019ecc
 8009770:	08019ed4 	.word	0x08019ed4
 8009774:	08019ed8 	.word	0x08019ed8
 8009778:	08019ee0 	.word	0x08019ee0
 800977c:	08019ee4 	.word	0x08019ee4
 8009780:	08019ef0 	.word	0x08019ef0
 8009784:	08019ef4 	.word	0x08019ef4
 8009788:	08019efc 	.word	0x08019efc
 800978c:	08019f00 	.word	0x08019f00
 8009790:	08019f0c 	.word	0x08019f0c
 8009794:	08019f10 	.word	0x08019f10
 8009798:	08019f1c 	.word	0x08019f1c
 800979c:	080193b8 	.word	0x080193b8
			temp82 = JANUARY;
 80097a0:	2401      	movs	r4, #1
		if (result == BOS_OK) 
 80097a2:	2e00      	cmp	r6, #0
 80097a4:	d000      	beq.n	80097a8 <setCommand+0x728>
 80097a6:	e672      	b.n	800948e <setCommand+0x40e>
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80097a8:	4643      	mov	r3, r8
 80097aa:	3b01      	subs	r3, #1
 80097ac:	2b1e      	cmp	r3, #30
 80097ae:	d8a2      	bhi.n	80096f6 <setCommand+0x676>
 80097b0:	4b2f      	ldr	r3, [pc, #188]	; (8009870 <setCommand+0x7f0>)
 80097b2:	444b      	add	r3, r9
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	2b64      	cmp	r3, #100	; 0x64
 80097b8:	d89d      	bhi.n	80096f6 <setCommand+0x676>
				GetTimeDate();
 80097ba:	f7ff fb4d 	bl	8008e58 <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 80097be:	4b2d      	ldr	r3, [pc, #180]	; (8009874 <setCommand+0x7f4>)
 80097c0:	220c      	movs	r2, #12
 80097c2:	569a      	ldrsb	r2, [r3, r2]
 80097c4:	9204      	str	r2, [sp, #16]
 80097c6:	7cda      	ldrb	r2, [r3, #19]
 80097c8:	9203      	str	r2, [sp, #12]
 80097ca:	7c9a      	ldrb	r2, [r3, #18]
 80097cc:	9202      	str	r2, [sp, #8]
 80097ce:	7c5a      	ldrb	r2, [r3, #17]
 80097d0:	9201      	str	r2, [sp, #4]
 80097d2:	7c1b      	ldrb	r3, [r3, #16]
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	003b      	movs	r3, r7
 80097d8:	464a      	mov	r2, r9
 80097da:	4641      	mov	r1, r8
 80097dc:	0020      	movs	r0, r4
 80097de:	f7ff fae1 	bl	8008da4 <BOS_CalendarConfig>
 80097e2:	0006      	movs	r6, r0
 80097e4:	e650      	b.n	8009488 <setCommand+0x408>
			temp82 = FEBRUARY;
 80097e6:	2402      	movs	r4, #2
 80097e8:	e7db      	b.n	80097a2 <setCommand+0x722>
 80097ea:	2402      	movs	r4, #2
 80097ec:	e7d9      	b.n	80097a2 <setCommand+0x722>
			temp82 = MARCH;
 80097ee:	2403      	movs	r4, #3
 80097f0:	e7d7      	b.n	80097a2 <setCommand+0x722>
 80097f2:	2403      	movs	r4, #3
 80097f4:	e7d5      	b.n	80097a2 <setCommand+0x722>
			temp82 = APRIL;
 80097f6:	2404      	movs	r4, #4
 80097f8:	e7d3      	b.n	80097a2 <setCommand+0x722>
 80097fa:	2404      	movs	r4, #4
 80097fc:	e7d1      	b.n	80097a2 <setCommand+0x722>
			temp82 = MAY;
 80097fe:	2405      	movs	r4, #5
 8009800:	e7cf      	b.n	80097a2 <setCommand+0x722>
 8009802:	2405      	movs	r4, #5
 8009804:	e7cd      	b.n	80097a2 <setCommand+0x722>
			temp82 = JUNE;
 8009806:	2406      	movs	r4, #6
 8009808:	e7cb      	b.n	80097a2 <setCommand+0x722>
 800980a:	2406      	movs	r4, #6
 800980c:	e7c9      	b.n	80097a2 <setCommand+0x722>
			temp82 = JULY;
 800980e:	2407      	movs	r4, #7
 8009810:	e7c7      	b.n	80097a2 <setCommand+0x722>
 8009812:	2407      	movs	r4, #7
 8009814:	e7c5      	b.n	80097a2 <setCommand+0x722>
			temp82 = AUGUST;
 8009816:	2408      	movs	r4, #8
 8009818:	e7c3      	b.n	80097a2 <setCommand+0x722>
 800981a:	2408      	movs	r4, #8
 800981c:	e7c1      	b.n	80097a2 <setCommand+0x722>
			temp82 = SEPTEMBER;
 800981e:	2409      	movs	r4, #9
 8009820:	e7bf      	b.n	80097a2 <setCommand+0x722>
 8009822:	2409      	movs	r4, #9
 8009824:	e7bd      	b.n	80097a2 <setCommand+0x722>
			temp82 = OCTOBER;
 8009826:	240a      	movs	r4, #10
 8009828:	e7bb      	b.n	80097a2 <setCommand+0x722>
 800982a:	240a      	movs	r4, #10
 800982c:	e7b9      	b.n	80097a2 <setCommand+0x722>
			temp82 = NOVEMBER;
 800982e:	240b      	movs	r4, #11
 8009830:	e7b7      	b.n	80097a2 <setCommand+0x722>
 8009832:	240b      	movs	r4, #11
 8009834:	e7b5      	b.n	80097a2 <setCommand+0x722>
			temp82 = DECEMBER;
 8009836:	240c      	movs	r4, #12
 8009838:	e7b3      	b.n	80097a2 <setCommand+0x722>
			temp81 = MONDAY;
 800983a:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 800983c:	4b0e      	ldr	r3, [pc, #56]	; (8009878 <setCommand+0x7f8>)
 800983e:	681c      	ldr	r4, [r3, #0]
 8009840:	2207      	movs	r2, #7
 8009842:	490e      	ldr	r1, [pc, #56]	; (800987c <setCommand+0x7fc>)
 8009844:	0020      	movs	r0, r4
 8009846:	f00a ffa7 	bl	8014798 <strncmp>
 800984a:	2600      	movs	r6, #0
 800984c:	2800      	cmp	r0, #0
 800984e:	d000      	beq.n	8009852 <setCommand+0x7d2>
 8009850:	e699      	b.n	8009586 <setCommand+0x506>
			temp82 = JANUARY;
 8009852:	2401      	movs	r4, #1
 8009854:	e7a8      	b.n	80097a8 <setCommand+0x728>
			temp81 = TUESDAY;
 8009856:	2702      	movs	r7, #2
 8009858:	e7f0      	b.n	800983c <setCommand+0x7bc>
			temp81 = WEDNESDAY;
 800985a:	2703      	movs	r7, #3
 800985c:	e7ee      	b.n	800983c <setCommand+0x7bc>
			temp81 = THURSDAY;
 800985e:	2704      	movs	r7, #4
 8009860:	e7ec      	b.n	800983c <setCommand+0x7bc>
			temp81 = FRIDAY;
 8009862:	2705      	movs	r7, #5
 8009864:	e7ea      	b.n	800983c <setCommand+0x7bc>
			temp81 = SATURDAY;
 8009866:	2706      	movs	r7, #6
 8009868:	e7e8      	b.n	800983c <setCommand+0x7bc>
			temp81 = SUNDAY;
 800986a:	2707      	movs	r7, #7
 800986c:	e7e6      	b.n	800983c <setCommand+0x7bc>
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	fffff830 	.word	0xfffff830
 8009874:	20006a10 	.word	0x20006a10
 8009878:	200012ec 	.word	0x200012ec
 800987c:	08019f20 	.word	0x08019f20

08009880 <GetDateString>:
{
 8009880:	b510      	push	{r4, lr}
 8009882:	b082      	sub	sp, #8
  char *buffer = malloc(30 * sizeof(int8_t));
 8009884:	201e      	movs	r0, #30
 8009886:	f00a fac1 	bl	8013e0c <malloc>
 800988a:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 800988c:	221e      	movs	r2, #30
 800988e:	2100      	movs	r1, #0
 8009890:	f00a fd12 	bl	80142b8 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 8009894:	4908      	ldr	r1, [pc, #32]	; (80098b8 <GetDateString+0x38>)
 8009896:	7d8b      	ldrb	r3, [r1, #22]
 8009898:	7d0a      	ldrb	r2, [r1, #20]
 800989a:	3a01      	subs	r2, #1
 800989c:	0092      	lsls	r2, r2, #2
 800989e:	4807      	ldr	r0, [pc, #28]	; (80098bc <GetDateString+0x3c>)
 80098a0:	5812      	ldr	r2, [r2, r0]
 80098a2:	8b08      	ldrh	r0, [r1, #24]
 80098a4:	9001      	str	r0, [sp, #4]
 80098a6:	7d49      	ldrb	r1, [r1, #21]
 80098a8:	9100      	str	r1, [sp, #0]
 80098aa:	4905      	ldr	r1, [pc, #20]	; (80098c0 <GetDateString+0x40>)
 80098ac:	0020      	movs	r0, r4
 80098ae:	f00a ff2f 	bl	8014710 <sprintf>
}
 80098b2:	0020      	movs	r0, r4
 80098b4:	b002      	add	sp, #8
 80098b6:	bd10      	pop	{r4, pc}
 80098b8:	20006a10 	.word	0x20006a10
 80098bc:	0801afb4 	.word	0x0801afb4
 80098c0:	080194c4 	.word	0x080194c4

080098c4 <dateCommand>:
{
 80098c4:	b510      	push	{r4, lr}
 80098c6:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80098c8:	d101      	bne.n	80098ce <dateCommand+0xa>
 80098ca:	b672      	cpsid	i
 80098cc:	e7fe      	b.n	80098cc <dateCommand+0x8>
	GetTimeDate();
 80098ce:	f7ff fac3 	bl	8008e58 <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 80098d2:	f7ff ffd5 	bl	8009880 <GetDateString>
 80098d6:	0002      	movs	r2, r0
 80098d8:	4902      	ldr	r1, [pc, #8]	; (80098e4 <dateCommand+0x20>)
 80098da:	0020      	movs	r0, r4
 80098dc:	f00a ff18 	bl	8014710 <sprintf>
}
 80098e0:	2000      	movs	r0, #0
 80098e2:	bd10      	pop	{r4, pc}
 80098e4:	08019358 	.word	0x08019358

080098e8 <Bridge>:
{
 80098e8:	b500      	push	{lr}
 80098ea:	b085      	sub	sp, #20
 80098ec:	000a      	movs	r2, r1
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 80098ee:	4b07      	ldr	r3, [pc, #28]	; (800990c <Bridge+0x24>)
 80098f0:	7819      	ldrb	r1, [r3, #0]
 80098f2:	2301      	movs	r3, #1
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	3b02      	subs	r3, #2
 80098f8:	9302      	str	r3, [sp, #8]
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	3303      	adds	r3, #3
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	000b      	movs	r3, r1
 8009902:	f7fd f8ff 	bl	8006b04 <StartScastDMAStream>
}
 8009906:	b005      	add	sp, #20
 8009908:	bd00      	pop	{pc}
 800990a:	46c0      	nop			; (mov r8, r8)
 800990c:	20001298 	.word	0x20001298

08009910 <bridgeCommand>:
{	
 8009910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009912:	b083      	sub	sp, #12
 8009914:	0004      	movs	r4, r0
 8009916:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 800991e:	2800      	cmp	r0, #0
 8009920:	d101      	bne.n	8009926 <bridgeCommand+0x16>
 8009922:	b672      	cpsid	i
 8009924:	e7fe      	b.n	8009924 <bridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8009926:	aa01      	add	r2, sp, #4
 8009928:	2101      	movs	r1, #1
 800992a:	0028      	movs	r0, r5
 800992c:	f005 f8e4 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8009930:	2300      	movs	r3, #0
 8009932:	56c3      	ldrsb	r3, [r0, r3]
 8009934:	2b70      	cmp	r3, #112	; 0x70
 8009936:	d00e      	beq.n	8009956 <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8009938:	466a      	mov	r2, sp
 800993a:	2102      	movs	r1, #2
 800993c:	0028      	movs	r0, r5
 800993e:	f005 f8db 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8009942:	2300      	movs	r3, #0
 8009944:	56c3      	ldrsb	r3, [r0, r3]
 8009946:	2b70      	cmp	r3, #112	; 0x70
 8009948:	d01e      	beq.n	8009988 <bridgeCommand+0x78>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 800994a:	220f      	movs	r2, #15
 800994c:	491a      	ldr	r1, [pc, #104]	; (80099b8 <bridgeCommand+0xa8>)
 800994e:	0020      	movs	r0, r4
 8009950:	f00a fca9 	bl	80142a6 <memcpy>
 8009954:	e015      	b.n	8009982 <bridgeCommand+0x72>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8009956:	3001      	adds	r0, #1
 8009958:	f00a fa1b 	bl	8013d92 <atol>
 800995c:	0006      	movs	r6, r0
 800995e:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8009960:	466a      	mov	r2, sp
 8009962:	2102      	movs	r1, #2
 8009964:	0028      	movs	r0, r5
 8009966:	f005 f8c7 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 800996a:	2300      	movs	r3, #0
 800996c:	56c3      	ldrsb	r3, [r0, r3]
 800996e:	2b70      	cmp	r3, #112	; 0x70
 8009970:	d00e      	beq.n	8009990 <bridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 8009972:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam) 
 8009974:	2867      	cmp	r0, #103	; 0x67
 8009976:	d0e8      	beq.n	800994a <bridgeCommand+0x3a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8009978:	2217      	movs	r2, #23
 800997a:	4910      	ldr	r1, [pc, #64]	; (80099bc <bridgeCommand+0xac>)
 800997c:	0020      	movs	r0, r4
 800997e:	f00a fc92 	bl	80142a6 <memcpy>
}
 8009982:	2000      	movs	r0, #0
 8009984:	b003      	add	sp, #12
 8009986:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8009988:	3001      	adds	r0, #1
 800998a:	f00a fa02 	bl	8013d92 <atol>
 800998e:	e7dc      	b.n	800994a <bridgeCommand+0x3a>
 8009990:	3001      	adds	r0, #1
 8009992:	f00a f9fe 	bl	8013d92 <atol>
 8009996:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 8009998:	b2c1      	uxtb	r1, r0
 800999a:	0038      	movs	r0, r7
 800999c:	f7ff ffa4 	bl	80098e8 <Bridge>
	if (result == BOS_OK) 
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d1e7      	bne.n	8009974 <bridgeCommand+0x64>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 80099a4:	22ff      	movs	r2, #255	; 0xff
 80099a6:	002b      	movs	r3, r5
 80099a8:	4013      	ands	r3, r2
 80099aa:	4032      	ands	r2, r6
 80099ac:	4904      	ldr	r1, [pc, #16]	; (80099c0 <bridgeCommand+0xb0>)
 80099ae:	0020      	movs	r0, r4
 80099b0:	f00a feae 	bl	8014710 <sprintf>
 80099b4:	e7e5      	b.n	8009982 <bridgeCommand+0x72>
 80099b6:	46c0      	nop			; (mov r8, r8)
 80099b8:	0801ae98 	.word	0x0801ae98
 80099bc:	08019330 	.word	0x08019330
 80099c0:	0801930c 	.word	0x0801930c

080099c4 <Unbridge>:
{		
 80099c4:	b530      	push	{r4, r5, lr}
 80099c6:	b087      	sub	sp, #28
 80099c8:	0004      	movs	r4, r0
 80099ca:	000d      	movs	r5, r1
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 80099cc:	2300      	movs	r3, #0
 80099ce:	9304      	str	r3, [sp, #16]
 80099d0:	9303      	str	r3, [sp, #12]
 80099d2:	9302      	str	r3, [sp, #8]
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	2200      	movs	r2, #0
 80099da:	2100      	movs	r1, #0
 80099dc:	2000      	movs	r0, #0
 80099de:	f7fa fc2d 	bl	800423c <SaveEEstreams>
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 80099e2:	1e62      	subs	r2, r4, #1
 80099e4:	00d3      	lsls	r3, r2, #3
 80099e6:	1a9b      	subs	r3, r3, r2
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	4a14      	ldr	r2, [pc, #80]	; (8009a3c <Unbridge+0x78>)
 80099ec:	589b      	ldr	r3, [r3, r2]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d015      	beq.n	8009a1e <Unbridge+0x5a>
 80099f2:	1e6a      	subs	r2, r5, #1
 80099f4:	00d3      	lsls	r3, r2, #3
 80099f6:	1a9b      	subs	r3, r3, r2
 80099f8:	00db      	lsls	r3, r3, #3
 80099fa:	4a10      	ldr	r2, [pc, #64]	; (8009a3c <Unbridge+0x78>)
 80099fc:	589b      	ldr	r3, [r3, r2]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 8009a02:	0020      	movs	r0, r4
 8009a04:	f000 ff90 	bl	800a928 <SwitchStreamDMAToMsg>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e006      	b.n	8009a1a <Unbridge+0x56>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8009a0c:	0020      	movs	r0, r4
 8009a0e:	f000 ff8b 	bl	800a928 <SwitchStreamDMAToMsg>
 8009a12:	0028      	movs	r0, r5
 8009a14:	f000 ff88 	bl	800a928 <SwitchStreamDMAToMsg>
 8009a18:	2000      	movs	r0, #0
}
 8009a1a:	b007      	add	sp, #28
 8009a1c:	bd30      	pop	{r4, r5, pc}
	else if (streamDMA[port2-1].Instance != 0)
 8009a1e:	1e6a      	subs	r2, r5, #1
 8009a20:	00d3      	lsls	r3, r2, #3
 8009a22:	1a9b      	subs	r3, r3, r2
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	4a05      	ldr	r2, [pc, #20]	; (8009a3c <Unbridge+0x78>)
 8009a28:	589b      	ldr	r3, [r3, r2]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d004      	beq.n	8009a38 <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 8009a2e:	0028      	movs	r0, r5
 8009a30:	f000 ff7a 	bl	800a928 <SwitchStreamDMAToMsg>
 8009a34:	2000      	movs	r0, #0
 8009a36:	e7f0      	b.n	8009a1a <Unbridge+0x56>
	else {return BOS_ERR_WrongValue;}
 8009a38:	2068      	movs	r0, #104	; 0x68
 8009a3a:	e7ee      	b.n	8009a1a <Unbridge+0x56>
 8009a3c:	200019a8 	.word	0x200019a8

08009a40 <unbridgeCommand>:
{	
 8009a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a42:	b083      	sub	sp, #12
 8009a44:	0004      	movs	r4, r0
 8009a46:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	9301      	str	r3, [sp, #4]
 8009a4c:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	d101      	bne.n	8009a56 <unbridgeCommand+0x16>
 8009a52:	b672      	cpsid	i
 8009a54:	e7fe      	b.n	8009a54 <unbridgeCommand+0x14>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8009a56:	aa01      	add	r2, sp, #4
 8009a58:	2101      	movs	r1, #1
 8009a5a:	0028      	movs	r0, r5
 8009a5c:	f005 f84c 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8009a60:	2300      	movs	r3, #0
 8009a62:	56c3      	ldrsb	r3, [r0, r3]
 8009a64:	2b70      	cmp	r3, #112	; 0x70
 8009a66:	d00e      	beq.n	8009a86 <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8009a68:	466a      	mov	r2, sp
 8009a6a:	2102      	movs	r1, #2
 8009a6c:	0028      	movs	r0, r5
 8009a6e:	f005 f843 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8009a72:	2300      	movs	r3, #0
 8009a74:	56c3      	ldrsb	r3, [r0, r3]
 8009a76:	2b70      	cmp	r3, #112	; 0x70
 8009a78:	d01e      	beq.n	8009ab8 <unbridgeCommand+0x78>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8009a7a:	220f      	movs	r2, #15
 8009a7c:	491a      	ldr	r1, [pc, #104]	; (8009ae8 <unbridgeCommand+0xa8>)
 8009a7e:	0020      	movs	r0, r4
 8009a80:	f00a fc11 	bl	80142a6 <memcpy>
 8009a84:	e015      	b.n	8009ab2 <unbridgeCommand+0x72>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8009a86:	3001      	adds	r0, #1
 8009a88:	f00a f983 	bl	8013d92 <atol>
 8009a8c:	0006      	movs	r6, r0
 8009a8e:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8009a90:	466a      	mov	r2, sp
 8009a92:	2102      	movs	r1, #2
 8009a94:	0028      	movs	r0, r5
 8009a96:	f005 f82f 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	56c3      	ldrsb	r3, [r0, r3]
 8009a9e:	2b70      	cmp	r3, #112	; 0x70
 8009aa0:	d00e      	beq.n	8009ac0 <unbridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 8009aa2:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam) 
 8009aa4:	2867      	cmp	r0, #103	; 0x67
 8009aa6:	d0e8      	beq.n	8009a7a <unbridgeCommand+0x3a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8009aa8:	2219      	movs	r2, #25
 8009aaa:	4910      	ldr	r1, [pc, #64]	; (8009aec <unbridgeCommand+0xac>)
 8009aac:	0020      	movs	r0, r4
 8009aae:	f00a fbfa 	bl	80142a6 <memcpy>
}
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	b003      	add	sp, #12
 8009ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8009ab8:	3001      	adds	r0, #1
 8009aba:	f00a f96a 	bl	8013d92 <atol>
 8009abe:	e7dc      	b.n	8009a7a <unbridgeCommand+0x3a>
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	f00a f966 	bl	8013d92 <atol>
 8009ac6:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 8009ac8:	b2c1      	uxtb	r1, r0
 8009aca:	0038      	movs	r0, r7
 8009acc:	f7ff ff7a 	bl	80099c4 <Unbridge>
	if (result == BOS_OK) 
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d1e7      	bne.n	8009aa4 <unbridgeCommand+0x64>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8009ad4:	22ff      	movs	r2, #255	; 0xff
 8009ad6:	002b      	movs	r3, r5
 8009ad8:	4013      	ands	r3, r2
 8009ada:	4032      	ands	r2, r6
 8009adc:	4904      	ldr	r1, [pc, #16]	; (8009af0 <unbridgeCommand+0xb0>)
 8009ade:	0020      	movs	r0, r4
 8009ae0:	f00a fe16 	bl	8014710 <sprintf>
 8009ae4:	e7e5      	b.n	8009ab2 <unbridgeCommand+0x72>
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	0801ae98 	.word	0x0801ae98
 8009aec:	0801af60 	.word	0x0801af60
 8009af0:	0801af40 	.word	0x0801af40

08009af4 <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	0005      	movs	r5, r0
	for(int i = 0; string[i]; i++){
 8009af8:	7804      	ldrb	r4, [r0, #0]
 8009afa:	2c00      	cmp	r4, #0
 8009afc:	d010      	beq.n	8009b20 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 8009afe:	2603      	movs	r6, #3
 8009b00:	e004      	b.n	8009b0c <StringToLowerCase+0x18>
 8009b02:	702a      	strb	r2, [r5, #0]
 8009b04:	3501      	adds	r5, #1
	for(int i = 0; string[i]; i++){
 8009b06:	782c      	ldrb	r4, [r5, #0]
 8009b08:	2c00      	cmp	r4, #0
 8009b0a:	d009      	beq.n	8009b20 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 8009b0c:	f00a f970 	bl	8013df0 <__locale_ctype_ptr>
 8009b10:	1900      	adds	r0, r0, r4
 8009b12:	7843      	ldrb	r3, [r0, #1]
 8009b14:	4033      	ands	r3, r6
 8009b16:	0022      	movs	r2, r4
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d1f2      	bne.n	8009b02 <StringToLowerCase+0xe>
 8009b1c:	3220      	adds	r2, #32
 8009b1e:	e7f0      	b.n	8009b02 <StringToLowerCase+0xe>
	}
}
 8009b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b24 <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8009b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b26:	46c6      	mov	lr, r8
 8009b28:	b500      	push	{lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8009b2e:	4bdc      	ldr	r3, [pc, #880]	; (8009ea0 <ParseSnippetCondition+0x37c>)
 8009b30:	781c      	ldrb	r4, [r3, #0]
 8009b32:	2c05      	cmp	r4, #5
 8009b34:	d100      	bne.n	8009b38 <ParseSnippetCondition+0x14>
 8009b36:	e210      	b.n	8009f5a <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 8009b38:	49da      	ldr	r1, [pc, #872]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009b3a:	00a3      	lsls	r3, r4, #2
 8009b3c:	191a      	adds	r2, r3, r4
 8009b3e:	0092      	lsls	r2, r2, #2
 8009b40:	2000      	movs	r0, #0
 8009b42:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8009b44:	191a      	adds	r2, r3, r4
 8009b46:	0092      	lsls	r2, r2, #2
 8009b48:	188a      	adds	r2, r1, r2
 8009b4a:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8009b4c:	1918      	adds	r0, r3, r4
 8009b4e:	0080      	lsls	r0, r0, #2
 8009b50:	3002      	adds	r0, #2
 8009b52:	1840      	adds	r0, r0, r1
 8009b54:	2204      	movs	r2, #4
 8009b56:	2100      	movs	r1, #0
 8009b58:	f00a fbae 	bl	80142b8 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8009b5c:	782b      	ldrb	r3, [r5, #0]
 8009b5e:	2b62      	cmp	r3, #98	; 0x62
 8009b60:	d102      	bne.n	8009b68 <ParseSnippetCondition+0x44>
 8009b62:	78ab      	ldrb	r3, [r5, #2]
 8009b64:	2b2e      	cmp	r3, #46	; 0x2e
 8009b66:	d032      	beq.n	8009bce <ParseSnippetCondition+0xaa>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 8009b68:	4ecf      	ldr	r6, [pc, #828]	; (8009ea8 <ParseSnippetCondition+0x384>)
 8009b6a:	0029      	movs	r1, r5
 8009b6c:	0030      	movs	r0, r6
 8009b6e:	f00a fe0b 	bl	8014788 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8009b72:	4cce      	ldr	r4, [pc, #824]	; (8009eac <ParseSnippetCondition+0x388>)
 8009b74:	0021      	movs	r1, r4
 8009b76:	0030      	movs	r0, r6
 8009b78:	f00b fc86 	bl	8015488 <strtok>
 8009b7c:	0005      	movs	r5, r0
		secondPart = strtok ( NULL, " ");
 8009b7e:	0021      	movs	r1, r4
 8009b80:	2000      	movs	r0, #0
 8009b82:	f00b fc81 	bl	8015488 <strtok>
 8009b86:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 8009b88:	0021      	movs	r1, r4
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	f00b fc7c 	bl	8015488 <strtok>
 8009b90:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 8009b92:	2d00      	cmp	r5, #0
 8009b94:	d100      	bne.n	8009b98 <ParseSnippetCondition+0x74>
 8009b96:	e1e5      	b.n	8009f64 <ParseSnippetCondition+0x440>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8009b98:	0028      	movs	r0, r5
 8009b9a:	f7fa fdcd 	bl	8004738 <IsModuleParameter>
 8009b9e:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8009ba0:	d100      	bne.n	8009ba4 <ParseSnippetCondition+0x80>
 8009ba2:	e18f      	b.n	8009ec4 <ParseSnippetCondition+0x3a0>
 8009ba4:	2e00      	cmp	r6, #0
 8009ba6:	d000      	beq.n	8009baa <ParseSnippetCondition+0x86>
 8009ba8:	e18e      	b.n	8009ec8 <ParseSnippetCondition+0x3a4>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 8009baa:	2067      	movs	r0, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8009bac:	2c00      	cmp	r4, #0
 8009bae:	d000      	beq.n	8009bb2 <ParseSnippetCondition+0x8e>
 8009bb0:	e1d4      	b.n	8009f5c <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 8009bb2:	4cbb      	ldr	r4, [pc, #748]	; (8009ea0 <ParseSnippetCondition+0x37c>)
 8009bb4:	7823      	ldrb	r3, [r4, #0]
 8009bb6:	49bb      	ldr	r1, [pc, #748]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009bb8:	009a      	lsls	r2, r3, #2
 8009bba:	18d0      	adds	r0, r2, r3
 8009bbc:	0080      	lsls	r0, r0, #2
 8009bbe:	3602      	adds	r6, #2
 8009bc0:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8009bc2:	180a      	adds	r2, r1, r0
 8009bc4:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 8009bca:	2000      	movs	r0, #0
 8009bcc:	e1c6      	b.n	8009f5c <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8009bce:	786e      	ldrb	r6, [r5, #1]
 8009bd0:	3e30      	subs	r6, #48	; 0x30
 8009bd2:	b2f6      	uxtb	r6, r6
	BOS_Status status = BOS_OK;
 8009bd4:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8009bd6:	2e06      	cmp	r6, #6
 8009bd8:	d900      	bls.n	8009bdc <ParseSnippetCondition+0xb8>
 8009bda:	e1bf      	b.n	8009f5c <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8009bdc:	4ab1      	ldr	r2, [pc, #708]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009bde:	00a3      	lsls	r3, r4, #2
 8009be0:	1919      	adds	r1, r3, r4
 8009be2:	0089      	lsls	r1, r1, #2
 8009be4:	3001      	adds	r0, #1
 8009be6:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 8009be8:	1853      	adds	r3, r2, r1
 8009bea:	2200      	movs	r2, #0
 8009bec:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8009bee:	709e      	strb	r6, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8009bf0:	1cef      	adds	r7, r5, #3
 8009bf2:	3207      	adds	r2, #7
 8009bf4:	49ae      	ldr	r1, [pc, #696]	; (8009eb0 <ParseSnippetCondition+0x38c>)
 8009bf6:	0038      	movs	r0, r7
 8009bf8:	f00a fdce 	bl	8014798 <strncmp>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d121      	bne.n	8009c44 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8009c00:	00a3      	lsls	r3, r4, #2
 8009c02:	191c      	adds	r4, r3, r4
 8009c04:	00a4      	lsls	r4, r4, #2
 8009c06:	4ba7      	ldr	r3, [pc, #668]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009c08:	191c      	adds	r4, r3, r4
 8009c0a:	2305      	movs	r3, #5
 8009c0c:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8009c0e:	00f2      	lsls	r2, r6, #3
 8009c10:	1992      	adds	r2, r2, r6
 8009c12:	4ba8      	ldr	r3, [pc, #672]	; (8009eb4 <ParseSnippetCondition+0x390>)
 8009c14:	189b      	adds	r3, r3, r2
 8009c16:	7a1b      	ldrb	r3, [r3, #8]
 8009c18:	07db      	lsls	r3, r3, #31
 8009c1a:	d504      	bpl.n	8009c26 <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8009c1c:	4aa0      	ldr	r2, [pc, #640]	; (8009ea0 <ParseSnippetCondition+0x37c>)
 8009c1e:	7813      	ldrb	r3, [r2, #0]
 8009c20:	3301      	adds	r3, #1
 8009c22:	7013      	strb	r3, [r2, #0]
 8009c24:	e19a      	b.n	8009f5c <ParseSnippetCondition+0x438>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009c26:	2301      	movs	r3, #1
 8009c28:	9305      	str	r3, [sp, #20]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9304      	str	r3, [sp, #16]
 8009c2e:	9303      	str	r3, [sp, #12]
 8009c30:	9302      	str	r3, [sp, #8]
 8009c32:	9301      	str	r3, [sp, #4]
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	2200      	movs	r2, #0
 8009c38:	2101      	movs	r1, #1
 8009c3a:	0030      	movs	r0, r6
 8009c3c:	f7fe fed0 	bl	80089e0 <SetButtonEvents>
				status = BOS_OK;
 8009c40:	2000      	movs	r0, #0
 8009c42:	e7eb      	b.n	8009c1c <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8009c44:	220e      	movs	r2, #14
 8009c46:	499c      	ldr	r1, [pc, #624]	; (8009eb8 <ParseSnippetCondition+0x394>)
 8009c48:	0038      	movs	r0, r7
 8009c4a:	f00a fda5 	bl	8014798 <strncmp>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d11c      	bne.n	8009c8c <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8009c52:	00a3      	lsls	r3, r4, #2
 8009c54:	191c      	adds	r4, r3, r4
 8009c56:	00a4      	lsls	r4, r4, #2
 8009c58:	4b92      	ldr	r3, [pc, #584]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009c5a:	191c      	adds	r4, r3, r4
 8009c5c:	2306      	movs	r3, #6
 8009c5e:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8009c60:	00f2      	lsls	r2, r6, #3
 8009c62:	1992      	adds	r2, r2, r6
 8009c64:	4b93      	ldr	r3, [pc, #588]	; (8009eb4 <ParseSnippetCondition+0x390>)
 8009c66:	189b      	adds	r3, r3, r2
 8009c68:	7a1b      	ldrb	r3, [r3, #8]
 8009c6a:	079b      	lsls	r3, r3, #30
 8009c6c:	d4d6      	bmi.n	8009c1c <ParseSnippetCondition+0xf8>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009c6e:	2301      	movs	r3, #1
 8009c70:	9305      	str	r3, [sp, #20]
 8009c72:	2300      	movs	r3, #0
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	9303      	str	r3, [sp, #12]
 8009c78:	9302      	str	r3, [sp, #8]
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	2100      	movs	r1, #0
 8009c82:	0030      	movs	r0, r6
 8009c84:	f7fe feac 	bl	80089e0 <SetButtonEvents>
				status = BOS_OK;					
 8009c88:	2000      	movs	r0, #0
 8009c8a:	e7c7      	b.n	8009c1c <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8009c8c:	220c      	movs	r2, #12
 8009c8e:	498b      	ldr	r1, [pc, #556]	; (8009ebc <ParseSnippetCondition+0x398>)
 8009c90:	0038      	movs	r0, r7
 8009c92:	f00a fd81 	bl	8014798 <strncmp>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d17a      	bne.n	8009d90 <ParseSnippetCondition+0x26c>
				if (!button[port].pressedX1Sec) {	
 8009c9a:	00f2      	lsls	r2, r6, #3
 8009c9c:	1992      	adds	r2, r2, r6
 8009c9e:	4b85      	ldr	r3, [pc, #532]	; (8009eb4 <ParseSnippetCondition+0x390>)
 8009ca0:	189b      	adds	r3, r3, r2
 8009ca2:	789b      	ldrb	r3, [r3, #2]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d030      	beq.n	8009d0a <ParseSnippetCondition+0x1e6>
				} else if (!button[port].pressedX2Sec) {	
 8009ca8:	00f2      	lsls	r2, r6, #3
 8009caa:	1992      	adds	r2, r2, r6
 8009cac:	4b81      	ldr	r3, [pc, #516]	; (8009eb4 <ParseSnippetCondition+0x390>)
 8009cae:	189b      	adds	r3, r3, r2
 8009cb0:	78db      	ldrb	r3, [r3, #3]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d04a      	beq.n	8009d4c <ParseSnippetCondition+0x228>
				} else if (!button[port].pressedX3Sec) {	
 8009cb6:	00f2      	lsls	r2, r6, #3
 8009cb8:	1992      	adds	r2, r2, r6
 8009cba:	4b7e      	ldr	r3, [pc, #504]	; (8009eb4 <ParseSnippetCondition+0x390>)
 8009cbc:	189b      	adds	r3, r3, r2
 8009cbe:	791b      	ldrb	r3, [r3, #4]
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8009cc0:	200c      	movs	r0, #12
				} else if (!button[port].pressedX3Sec) {	
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1aa      	bne.n	8009c1c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 8009cc6:	4f77      	ldr	r7, [pc, #476]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009cc8:	00a3      	lsls	r3, r4, #2
 8009cca:	191b      	adds	r3, r3, r4
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	18fb      	adds	r3, r7, r3
 8009cd0:	220b      	movs	r2, #11
 8009cd2:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8009cd4:	0028      	movs	r0, r5
 8009cd6:	300f      	adds	r0, #15
 8009cd8:	f00a f855 	bl	8013d86 <atoi>
 8009cdc:	b2c0      	uxtb	r0, r0
 8009cde:	4b70      	ldr	r3, [pc, #448]	; (8009ea0 <ParseSnippetCondition+0x37c>)
 8009ce0:	781a      	ldrb	r2, [r3, #0]
 8009ce2:	0093      	lsls	r3, r2, #2
 8009ce4:	189b      	adds	r3, r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	18ff      	adds	r7, r7, r3
 8009cea:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009cec:	2301      	movs	r3, #1
 8009cee:	9305      	str	r3, [sp, #20]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9304      	str	r3, [sp, #16]
 8009cf4:	9303      	str	r3, [sp, #12]
 8009cf6:	9302      	str	r3, [sp, #8]
 8009cf8:	9001      	str	r0, [sp, #4]
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2100      	movs	r1, #0
 8009d00:	0030      	movs	r0, r6
 8009d02:	f7fe fe6d 	bl	80089e0 <SetButtonEvents>
					status = BOS_OK;	
 8009d06:	2000      	movs	r0, #0
 8009d08:	e788      	b.n	8009c1c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8009d0a:	4f66      	ldr	r7, [pc, #408]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009d0c:	00a3      	lsls	r3, r4, #2
 8009d0e:	191b      	adds	r3, r3, r4
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	18fb      	adds	r3, r7, r3
 8009d14:	2209      	movs	r2, #9
 8009d16:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8009d18:	0028      	movs	r0, r5
 8009d1a:	300f      	adds	r0, #15
 8009d1c:	f00a f833 	bl	8013d86 <atoi>
 8009d20:	b2c3      	uxtb	r3, r0
 8009d22:	4a5f      	ldr	r2, [pc, #380]	; (8009ea0 <ParseSnippetCondition+0x37c>)
 8009d24:	7811      	ldrb	r1, [r2, #0]
 8009d26:	008a      	lsls	r2, r1, #2
 8009d28:	1852      	adds	r2, r2, r1
 8009d2a:	0092      	lsls	r2, r2, #2
 8009d2c:	18bf      	adds	r7, r7, r2
 8009d2e:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009d30:	2201      	movs	r2, #1
 8009d32:	9205      	str	r2, [sp, #20]
 8009d34:	2200      	movs	r2, #0
 8009d36:	9204      	str	r2, [sp, #16]
 8009d38:	9203      	str	r2, [sp, #12]
 8009d3a:	9202      	str	r2, [sp, #8]
 8009d3c:	9201      	str	r2, [sp, #4]
 8009d3e:	9200      	str	r2, [sp, #0]
 8009d40:	2100      	movs	r1, #0
 8009d42:	0030      	movs	r0, r6
 8009d44:	f7fe fe4c 	bl	80089e0 <SetButtonEvents>
					status = BOS_OK;
 8009d48:	2000      	movs	r0, #0
 8009d4a:	e767      	b.n	8009c1c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 8009d4c:	4f55      	ldr	r7, [pc, #340]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009d4e:	00a3      	lsls	r3, r4, #2
 8009d50:	191b      	adds	r3, r3, r4
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	18fb      	adds	r3, r7, r3
 8009d56:	220a      	movs	r2, #10
 8009d58:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8009d5a:	0028      	movs	r0, r5
 8009d5c:	300f      	adds	r0, #15
 8009d5e:	f00a f812 	bl	8013d86 <atoi>
 8009d62:	b2c0      	uxtb	r0, r0
 8009d64:	4b4e      	ldr	r3, [pc, #312]	; (8009ea0 <ParseSnippetCondition+0x37c>)
 8009d66:	781a      	ldrb	r2, [r3, #0]
 8009d68:	0093      	lsls	r3, r2, #2
 8009d6a:	189b      	adds	r3, r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	18ff      	adds	r7, r7, r3
 8009d70:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8009d72:	2301      	movs	r3, #1
 8009d74:	9305      	str	r3, [sp, #20]
 8009d76:	2300      	movs	r3, #0
 8009d78:	9304      	str	r3, [sp, #16]
 8009d7a:	9303      	str	r3, [sp, #12]
 8009d7c:	9302      	str	r3, [sp, #8]
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	9000      	str	r0, [sp, #0]
 8009d82:	2200      	movs	r2, #0
 8009d84:	2100      	movs	r1, #0
 8009d86:	0030      	movs	r0, r6
 8009d88:	f7fe fe2a 	bl	80089e0 <SetButtonEvents>
					status = BOS_OK;		
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	e745      	b.n	8009c1c <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8009d90:	220d      	movs	r2, #13
 8009d92:	494b      	ldr	r1, [pc, #300]	; (8009ec0 <ParseSnippetCondition+0x39c>)
 8009d94:	0038      	movs	r0, r7
 8009d96:	f00a fcff 	bl	8014798 <strncmp>
 8009d9a:	0003      	movs	r3, r0
	BOS_Status status = BOS_OK;
 8009d9c:	2000      	movs	r0, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d000      	beq.n	8009da4 <ParseSnippetCondition+0x280>
 8009da2:	e73b      	b.n	8009c1c <ParseSnippetCondition+0xf8>
				if (!button[port].releasedY1Sec) {	
 8009da4:	00f2      	lsls	r2, r6, #3
 8009da6:	1992      	adds	r2, r2, r6
 8009da8:	4b42      	ldr	r3, [pc, #264]	; (8009eb4 <ParseSnippetCondition+0x390>)
 8009daa:	189b      	adds	r3, r3, r2
 8009dac:	795b      	ldrb	r3, [r3, #5]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d031      	beq.n	8009e16 <ParseSnippetCondition+0x2f2>
				} else if (!button[port].releasedY2Sec) {	
 8009db2:	00f2      	lsls	r2, r6, #3
 8009db4:	1992      	adds	r2, r2, r6
 8009db6:	4b3f      	ldr	r3, [pc, #252]	; (8009eb4 <ParseSnippetCondition+0x390>)
 8009db8:	189b      	adds	r3, r3, r2
 8009dba:	799b      	ldrb	r3, [r3, #6]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d04c      	beq.n	8009e5a <ParseSnippetCondition+0x336>
				} else if (!button[port].releasedY3Sec) {	
 8009dc0:	00f2      	lsls	r2, r6, #3
 8009dc2:	1992      	adds	r2, r2, r6
 8009dc4:	4b3b      	ldr	r3, [pc, #236]	; (8009eb4 <ParseSnippetCondition+0x390>)
 8009dc6:	189b      	adds	r3, r3, r2
 8009dc8:	79db      	ldrb	r3, [r3, #7]
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8009dca:	200d      	movs	r0, #13
				} else if (!button[port].releasedY3Sec) {	
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d000      	beq.n	8009dd2 <ParseSnippetCondition+0x2ae>
 8009dd0:	e724      	b.n	8009c1c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8009dd2:	4f34      	ldr	r7, [pc, #208]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009dd4:	3314      	adds	r3, #20
 8009dd6:	4698      	mov	r8, r3
 8009dd8:	435c      	muls	r4, r3
 8009dda:	193c      	adds	r4, r7, r4
 8009ddc:	3b06      	subs	r3, #6
 8009dde:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8009de0:	0028      	movs	r0, r5
 8009de2:	3010      	adds	r0, #16
 8009de4:	f009 ffcf 	bl	8013d86 <atoi>
 8009de8:	b2c0      	uxtb	r0, r0
 8009dea:	4b2d      	ldr	r3, [pc, #180]	; (8009ea0 <ParseSnippetCondition+0x37c>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	4642      	mov	r2, r8
 8009df0:	4353      	muls	r3, r2
 8009df2:	18ff      	adds	r7, r7, r3
 8009df4:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 8009df6:	2301      	movs	r3, #1
 8009df8:	9305      	str	r3, [sp, #20]
 8009dfa:	9004      	str	r0, [sp, #16]
 8009dfc:	2400      	movs	r4, #0
 8009dfe:	9403      	str	r4, [sp, #12]
 8009e00:	9402      	str	r4, [sp, #8]
 8009e02:	9401      	str	r4, [sp, #4]
 8009e04:	9400      	str	r4, [sp, #0]
 8009e06:	0023      	movs	r3, r4
 8009e08:	0022      	movs	r2, r4
 8009e0a:	0021      	movs	r1, r4
 8009e0c:	0030      	movs	r0, r6
 8009e0e:	f7fe fde7 	bl	80089e0 <SetButtonEvents>
					status = BOS_OK;	
 8009e12:	0020      	movs	r0, r4
 8009e14:	e702      	b.n	8009c1c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 8009e16:	4f23      	ldr	r7, [pc, #140]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009e18:	00a3      	lsls	r3, r4, #2
 8009e1a:	191b      	adds	r3, r3, r4
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	18fb      	adds	r3, r7, r3
 8009e20:	220c      	movs	r2, #12
 8009e22:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8009e24:	0028      	movs	r0, r5
 8009e26:	3010      	adds	r0, #16
 8009e28:	f009 ffad 	bl	8013d86 <atoi>
 8009e2c:	b2c0      	uxtb	r0, r0
 8009e2e:	4b1c      	ldr	r3, [pc, #112]	; (8009ea0 <ParseSnippetCondition+0x37c>)
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	0093      	lsls	r3, r2, #2
 8009e34:	189b      	adds	r3, r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	18ff      	adds	r7, r7, r3
 8009e3a:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	9305      	str	r3, [sp, #20]
 8009e40:	2300      	movs	r3, #0
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	9303      	str	r3, [sp, #12]
 8009e46:	9002      	str	r0, [sp, #8]
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2100      	movs	r1, #0
 8009e50:	0030      	movs	r0, r6
 8009e52:	f7fe fdc5 	bl	80089e0 <SetButtonEvents>
					status = BOS_OK;
 8009e56:	2000      	movs	r0, #0
 8009e58:	e6e0      	b.n	8009c1c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 8009e5a:	4f12      	ldr	r7, [pc, #72]	; (8009ea4 <ParseSnippetCondition+0x380>)
 8009e5c:	00a3      	lsls	r3, r4, #2
 8009e5e:	191b      	adds	r3, r3, r4
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	18fb      	adds	r3, r7, r3
 8009e64:	220d      	movs	r2, #13
 8009e66:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8009e68:	0028      	movs	r0, r5
 8009e6a:	3010      	adds	r0, #16
 8009e6c:	f009 ff8b 	bl	8013d86 <atoi>
 8009e70:	b2c0      	uxtb	r0, r0
 8009e72:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <ParseSnippetCondition+0x37c>)
 8009e74:	781a      	ldrb	r2, [r3, #0]
 8009e76:	0093      	lsls	r3, r2, #2
 8009e78:	189b      	adds	r3, r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	18ff      	adds	r7, r7, r3
 8009e7e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8009e80:	2301      	movs	r3, #1
 8009e82:	9305      	str	r3, [sp, #20]
 8009e84:	2300      	movs	r3, #0
 8009e86:	9304      	str	r3, [sp, #16]
 8009e88:	9003      	str	r0, [sp, #12]
 8009e8a:	9302      	str	r3, [sp, #8]
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	2200      	movs	r2, #0
 8009e92:	2100      	movs	r1, #0
 8009e94:	0030      	movs	r0, r6
 8009e96:	f7fe fda3 	bl	80089e0 <SetButtonEvents>
					status = BOS_OK;		
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	e6be      	b.n	8009c1c <ParseSnippetCondition+0xf8>
 8009e9e:	46c0      	nop			; (mov r8, r8)
 8009ea0:	200014e3 	.word	0x200014e3
 8009ea4:	20006a88 	.word	0x20006a88
 8009ea8:	20001448 	.word	0x20001448
 8009eac:	08018f6c 	.word	0x08018f6c
 8009eb0:	08019fa0 	.word	0x08019fa0
 8009eb4:	20000d6c 	.word	0x20000d6c
 8009eb8:	0801b1b0 	.word	0x0801b1b0
 8009ebc:	0801b1c0 	.word	0x0801b1c0
 8009ec0:	0801b1d0 	.word	0x0801b1d0
			else if (secondPart != NULL && thirdPart != NULL) 
 8009ec4:	2e00      	cmp	r6, #0
 8009ec6:	d04f      	beq.n	8009f68 <ParseSnippetCondition+0x444>
 8009ec8:	2c00      	cmp	r4, #0
 8009eca:	d04f      	beq.n	8009f6c <ParseSnippetCondition+0x448>
				modPar2 = IsModuleParameter(thirdPart);
 8009ecc:	0020      	movs	r0, r4
 8009ece:	f7fa fc33 	bl	8004738 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d024      	beq.n	8009f20 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8009ed6:	4b27      	ldr	r3, [pc, #156]	; (8009f74 <ParseSnippetCondition+0x450>)
 8009ed8:	781c      	ldrb	r4, [r3, #0]
 8009eda:	4a27      	ldr	r2, [pc, #156]	; (8009f78 <ParseSnippetCondition+0x454>)
 8009edc:	00a3      	lsls	r3, r4, #2
 8009ede:	1919      	adds	r1, r3, r4
 8009ee0:	0089      	lsls	r1, r1, #2
 8009ee2:	2704      	movs	r7, #4
 8009ee4:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8009ee6:	1919      	adds	r1, r3, r4
 8009ee8:	0089      	lsls	r1, r1, #2
 8009eea:	1851      	adds	r1, r2, r1
 8009eec:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8009eee:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8009ef0:	4d20      	ldr	r5, [pc, #128]	; (8009f74 <ParseSnippetCondition+0x450>)
 8009ef2:	782c      	ldrb	r4, [r5, #0]
 8009ef4:	0030      	movs	r0, r6
 8009ef6:	f7fa fc35 	bl	8004764 <IsMathOperator>
 8009efa:	491f      	ldr	r1, [pc, #124]	; (8009f78 <ParseSnippetCondition+0x454>)
 8009efc:	00a3      	lsls	r3, r4, #2
 8009efe:	191b      	adds	r3, r3, r4
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	18cb      	adds	r3, r1, r3
 8009f04:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8009f06:	782a      	ldrb	r2, [r5, #0]
 8009f08:	0093      	lsls	r3, r2, #2
 8009f0a:	189b      	adds	r3, r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	18cb      	adds	r3, r1, r3
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d02c      	beq.n	8009f70 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8009f16:	3201      	adds	r2, #1
 8009f18:	4b16      	ldr	r3, [pc, #88]	; (8009f74 <ParseSnippetCondition+0x450>)
 8009f1a:	701a      	strb	r2, [r3, #0]
				return BOS_OK;				
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	e01d      	b.n	8009f5c <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8009f20:	4b14      	ldr	r3, [pc, #80]	; (8009f74 <ParseSnippetCondition+0x450>)
 8009f22:	4698      	mov	r8, r3
 8009f24:	781a      	ldrb	r2, [r3, #0]
 8009f26:	4f14      	ldr	r7, [pc, #80]	; (8009f78 <ParseSnippetCondition+0x454>)
 8009f28:	0093      	lsls	r3, r2, #2
 8009f2a:	1899      	adds	r1, r3, r2
 8009f2c:	0089      	lsls	r1, r1, #2
 8009f2e:	2003      	movs	r0, #3
 8009f30:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8009f32:	187b      	adds	r3, r7, r1
 8009f34:	70dd      	strb	r5, [r3, #3]
					float constant = atof(thirdPart);
 8009f36:	0020      	movs	r0, r4
 8009f38:	f009 ff20 	bl	8013d7c <atof>
 8009f3c:	f7f8 ff5e 	bl	8002dfc <__aeabi_d2f>
 8009f40:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8009f42:	4643      	mov	r3, r8
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	0098      	lsls	r0, r3, #2
 8009f48:	18c0      	adds	r0, r0, r3
 8009f4a:	0080      	lsls	r0, r0, #2
 8009f4c:	3006      	adds	r0, #6
 8009f4e:	19c0      	adds	r0, r0, r7
 8009f50:	2204      	movs	r2, #4
 8009f52:	a907      	add	r1, sp, #28
 8009f54:	f00a f9a7 	bl	80142a6 <memcpy>
 8009f58:	e7ca      	b.n	8009ef0 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8009f5a:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8009f5c:	b008      	add	sp, #32
 8009f5e:	bc04      	pop	{r2}
 8009f60:	4690      	mov	r8, r2
 8009f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8009f64:	2067      	movs	r0, #103	; 0x67
 8009f66:	e7f9      	b.n	8009f5c <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8009f68:	2067      	movs	r0, #103	; 0x67
 8009f6a:	e7f7      	b.n	8009f5c <ParseSnippetCondition+0x438>
 8009f6c:	2067      	movs	r0, #103	; 0x67
 8009f6e:	e7f5      	b.n	8009f5c <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8009f70:	2067      	movs	r0, #103	; 0x67
 8009f72:	e7f3      	b.n	8009f5c <ParseSnippetCondition+0x438>
 8009f74:	200014e3 	.word	0x200014e3
 8009f78:	20006a88 	.word	0x20006a88

08009f7c <AddSnippet>:
{
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	000c      	movs	r4, r1
	switch (code)
 8009f80:	2802      	cmp	r0, #2
 8009f82:	d017      	beq.n	8009fb4 <AddSnippet+0x38>
 8009f84:	2803      	cmp	r0, #3
 8009f86:	d003      	beq.n	8009f90 <AddSnippet+0x14>
 8009f88:	2801      	cmp	r0, #1
 8009f8a:	d00f      	beq.n	8009fac <AddSnippet+0x30>
	return BOS_OK;
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	e00c      	b.n	8009faa <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets-1].state = true;
 8009f90:	4b35      	ldr	r3, [pc, #212]	; (800a068 <AddSnippet+0xec>)
 8009f92:	781a      	ldrb	r2, [r3, #0]
 8009f94:	3a01      	subs	r2, #1
 8009f96:	0093      	lsls	r3, r2, #2
 8009f98:	189b      	adds	r3, r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4a33      	ldr	r2, [pc, #204]	; (800a06c <AddSnippet+0xf0>)
 8009f9e:	18d3      	adds	r3, r2, r3
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8009fa4:	f7f9 fd2e 	bl	8003a04 <SaveToRO>
	return BOS_OK;
 8009fa8:	2000      	movs	r0, #0
}
 8009faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8009fac:	0008      	movs	r0, r1
 8009fae:	f7ff fdb9 	bl	8009b24 <ParseSnippetCondition>
 8009fb2:	e7fa      	b.n	8009faa <AddSnippet+0x2e>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8009fb4:	4b2c      	ldr	r3, [pc, #176]	; (800a068 <AddSnippet+0xec>)
 8009fb6:	781d      	ldrb	r5, [r3, #0]
 8009fb8:	3d01      	subs	r5, #1
 8009fba:	00ab      	lsls	r3, r5, #2
 8009fbc:	195b      	adds	r3, r3, r5
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4a2a      	ldr	r2, [pc, #168]	; (800a06c <AddSnippet+0xf0>)
 8009fc2:	18d3      	adds	r3, r2, r3
 8009fc4:	68de      	ldr	r6, [r3, #12]
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	d03d      	beq.n	800a046 <AddSnippet+0xca>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8009fca:	0030      	movs	r0, r6
 8009fcc:	f7f6 f8a4 	bl	8000118 <strlen>
 8009fd0:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8009fd2:	0020      	movs	r0, r4
 8009fd4:	f7f6 f8a0 	bl	8000118 <strlen>
 8009fd8:	1839      	adds	r1, r7, r0
 8009fda:	3102      	adds	r1, #2
 8009fdc:	0030      	movs	r0, r6
 8009fde:	f00a f99d 	bl	801431c <realloc>
 8009fe2:	4e22      	ldr	r6, [pc, #136]	; (800a06c <AddSnippet+0xf0>)
 8009fe4:	00ab      	lsls	r3, r5, #2
 8009fe6:	195d      	adds	r5, r3, r5
 8009fe8:	00ad      	lsls	r5, r5, #2
 8009fea:	1975      	adds	r5, r6, r5
 8009fec:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8009fee:	4d1e      	ldr	r5, [pc, #120]	; (800a068 <AddSnippet+0xec>)
 8009ff0:	782a      	ldrb	r2, [r5, #0]
 8009ff2:	3a01      	subs	r2, #1
 8009ff4:	0093      	lsls	r3, r2, #2
 8009ff6:	189b      	adds	r3, r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	18f3      	adds	r3, r6, r3
 8009ffc:	1c7a      	adds	r2, r7, #1
 8009ffe:	68d8      	ldr	r0, [r3, #12]
 800a000:	1880      	adds	r0, r0, r2
 800a002:	0021      	movs	r1, r4
 800a004:	f00a fbc0 	bl	8014788 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 800a008:	782a      	ldrb	r2, [r5, #0]
 800a00a:	3a01      	subs	r2, #1
 800a00c:	0093      	lsls	r3, r2, #2
 800a00e:	189b      	adds	r3, r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	18f6      	adds	r6, r6, r3
 800a014:	68f3      	ldr	r3, [r6, #12]
 800a016:	2213      	movs	r2, #19
 800a018:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 800a01a:	4b13      	ldr	r3, [pc, #76]	; (800a068 <AddSnippet+0xec>)
 800a01c:	781a      	ldrb	r2, [r3, #0]
 800a01e:	3a01      	subs	r2, #1
 800a020:	0093      	lsls	r3, r2, #2
 800a022:	189b      	adds	r3, r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4911      	ldr	r1, [pc, #68]	; (800a06c <AddSnippet+0xf0>)
 800a028:	18cb      	adds	r3, r1, r3
 800a02a:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 800a02c:	2000      	movs	r0, #0
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1bb      	bne.n	8009faa <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 800a032:	0090      	lsls	r0, r2, #2
 800a034:	1880      	adds	r0, r0, r2
 800a036:	0080      	lsls	r0, r0, #2
 800a038:	1840      	adds	r0, r0, r1
 800a03a:	2214      	movs	r2, #20
 800a03c:	2100      	movs	r1, #0
 800a03e:	f00a f93b 	bl	80142b8 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800a042:	200e      	movs	r0, #14
 800a044:	e7b1      	b.n	8009faa <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 800a046:	0008      	movs	r0, r1
 800a048:	f7f6 f866 	bl	8000118 <strlen>
 800a04c:	3001      	adds	r0, #1
 800a04e:	f009 fedd 	bl	8013e0c <malloc>
 800a052:	00ab      	lsls	r3, r5, #2
 800a054:	195d      	adds	r5, r3, r5
 800a056:	00ad      	lsls	r5, r5, #2
 800a058:	4b04      	ldr	r3, [pc, #16]	; (800a06c <AddSnippet+0xf0>)
 800a05a:	195d      	adds	r5, r3, r5
 800a05c:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 800a05e:	0021      	movs	r1, r4
 800a060:	f00a fb92 	bl	8014788 <strcpy>
 800a064:	e7d9      	b.n	800a01a <AddSnippet+0x9e>
 800a066:	46c0      	nop			; (mov r8, r8)
 800a068:	200014e3 	.word	0x200014e3
 800a06c:	20006a88 	.word	0x20006a88

0800a070 <CLI_CommandParser>:
{
 800a070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a072:	46de      	mov	lr, fp
 800a074:	4657      	mov	r7, sl
 800a076:	464e      	mov	r6, r9
 800a078:	4645      	mov	r5, r8
 800a07a:	b5e0      	push	{r5, r6, r7, lr}
 800a07c:	b08b      	sub	sp, #44	; 0x2c
 800a07e:	9004      	str	r0, [sp, #16]
 800a080:	4688      	mov	r8, r1
 800a082:	9203      	str	r2, [sp, #12]
 800a084:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 800a086:	2209      	movs	r2, #9
 800a088:	2100      	movs	r1, #0
 800a08a:	a807      	add	r0, sp, #28
 800a08c:	f00a f914 	bl	80142b8 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 800a090:	4fd5      	ldr	r7, [pc, #852]	; (800a3e8 <CLI_CommandParser+0x378>)
				if (id == myID) {
 800a092:	002e      	movs	r6, r5
 800a094:	e034      	b.n	800a100 <CLI_CommandParser+0x90>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 800a096:	2252      	movs	r2, #82	; 0x52
 800a098:	49d4      	ldr	r1, [pc, #848]	; (800a3ec <CLI_CommandParser+0x37c>)
 800a09a:	0020      	movs	r0, r4
 800a09c:	f00a f903 	bl	80142a6 <memcpy>
				recordSnippet = 0;
 800a0a0:	4bd1      	ldr	r3, [pc, #836]	; (800a3e8 <CLI_CommandParser+0x378>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	e044      	b.n	800a132 <CLI_CommandParser+0xc2>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 800a0a8:	2206      	movs	r2, #6
 800a0aa:	49d1      	ldr	r1, [pc, #836]	; (800a3f0 <CLI_CommandParser+0x380>)
 800a0ac:	9803      	ldr	r0, [sp, #12]
 800a0ae:	f00a fb73 	bl	8014798 <strncmp>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d053      	beq.n	800a15e <CLI_CommandParser+0xee>
		else if (recordSnippet == SNIPPET_COMMANDS)
 800a0b6:	2d02      	cmp	r5, #2
 800a0b8:	d05e      	beq.n	800a178 <CLI_CommandParser+0x108>
			loc = strchr( ( char * ) cInputString, '.');
 800a0ba:	212e      	movs	r1, #46	; 0x2e
 800a0bc:	9803      	ldr	r0, [sp, #12]
 800a0be:	f00a fb55 	bl	801476c <strchr>
 800a0c2:	1e05      	subs	r5, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 800a0c4:	d006      	beq.n	800a0d4 <CLI_CommandParser+0x64>
 800a0c6:	3803      	subs	r0, #3
 800a0c8:	2203      	movs	r2, #3
 800a0ca:	49ca      	ldr	r1, [pc, #808]	; (800a3f4 <CLI_CommandParser+0x384>)
 800a0cc:	f00a fb64 	bl	8014798 <strncmp>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d160      	bne.n	800a196 <CLI_CommandParser+0x126>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 800a0d4:	2299      	movs	r2, #153	; 0x99
 800a0d6:	0092      	lsls	r2, r2, #2
 800a0d8:	0021      	movs	r1, r4
 800a0da:	9803      	ldr	r0, [sp, #12]
 800a0dc:	f004 fc8a 	bl	800e9f4 <FreeRTOS_CLIProcessCommand>
 800a0e0:	0006      	movs	r6, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 800a0e2:	7823      	ldrb	r3, [r4, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d000      	beq.n	800a0ea <CLI_CommandParser+0x7a>
 800a0e8:	e16f      	b.n	800a3ca <CLI_CommandParser+0x35a>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a0ea:	0020      	movs	r0, r4
 800a0ec:	f7f6 f814 	bl	8000118 <strlen>
 800a0f0:	0002      	movs	r2, r0
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	0020      	movs	r0, r4
 800a0f6:	f00a f8df 	bl	80142b8 <memset>
	} while( xReturned != pdFALSE );
 800a0fa:	2e00      	cmp	r6, #0
 800a0fc:	d100      	bne.n	800a100 <CLI_CommandParser+0x90>
 800a0fe:	e1ab      	b.n	800a458 <CLI_CommandParser+0x3e8>
		StringToLowerCase(( char * )cInputString);
 800a100:	9803      	ldr	r0, [sp, #12]
 800a102:	f7ff fcf7 	bl	8009af4 <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 800a106:	783d      	ldrb	r5, [r7, #0]
 800a108:	2d00      	cmp	r5, #0
 800a10a:	d1cd      	bne.n	800a0a8 <CLI_CommandParser+0x38>
 800a10c:	2203      	movs	r2, #3
 800a10e:	49ba      	ldr	r1, [pc, #744]	; (800a3f8 <CLI_CommandParser+0x388>)
 800a110:	9803      	ldr	r0, [sp, #12]
 800a112:	f00a fb41 	bl	8014798 <strncmp>
 800a116:	2800      	cmp	r0, #0
 800a118:	d1cf      	bne.n	800a0ba <CLI_CommandParser+0x4a>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	1cd9      	adds	r1, r3, #3
 800a11e:	3001      	adds	r0, #1
 800a120:	f7ff ff2c 	bl	8009f7c <AddSnippet>
 800a124:	2800      	cmp	r0, #0
 800a126:	d1b6      	bne.n	800a096 <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 800a128:	4baf      	ldr	r3, [pc, #700]	; (800a3e8 <CLI_CommandParser+0x378>)
 800a12a:	2202      	movs	r2, #2
 800a12c:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 800a12e:	230d      	movs	r3, #13
 800a130:	7023      	strb	r3, [r4, #0]
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 800a132:	7823      	ldrb	r3, [r4, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d100      	bne.n	800a13a <CLI_CommandParser+0xca>
 800a138:	e186      	b.n	800a448 <CLI_CommandParser+0x3d8>
 800a13a:	4643      	mov	r3, r8
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d100      	bne.n	800a142 <CLI_CommandParser+0xd2>
 800a140:	e19d      	b.n	800a47e <CLI_CommandParser+0x40e>
 800a142:	2600      	movs	r6, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 800a144:	0020      	movs	r0, r4
 800a146:	f7f5 ffe7 	bl	8000118 <strlen>
 800a14a:	b282      	uxth	r2, r0
 800a14c:	2301      	movs	r3, #1
 800a14e:	425b      	negs	r3, r3
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	3333      	adds	r3, #51	; 0x33
 800a154:	0021      	movs	r1, r4
 800a156:	9804      	ldr	r0, [sp, #16]
 800a158:	f003 fee8 	bl	800df2c <writePxMutex>
 800a15c:	e7c5      	b.n	800a0ea <CLI_CommandParser+0x7a>
			recordSnippet = 0;
 800a15e:	4ba2      	ldr	r3, [pc, #648]	; (800a3e8 <CLI_CommandParser+0x378>)
 800a160:	2200      	movs	r2, #0
 800a162:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 800a164:	49a5      	ldr	r1, [pc, #660]	; (800a3fc <CLI_CommandParser+0x38c>)
 800a166:	3003      	adds	r0, #3
 800a168:	f7ff ff08 	bl	8009f7c <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 800a16c:	2241      	movs	r2, #65	; 0x41
 800a16e:	49a4      	ldr	r1, [pc, #656]	; (800a400 <CLI_CommandParser+0x390>)
 800a170:	0020      	movs	r0, r4
 800a172:	f00a f898 	bl	80142a6 <memcpy>
			xReturned = pdFALSE;
 800a176:	e7dc      	b.n	800a132 <CLI_CommandParser+0xc2>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 800a178:	9903      	ldr	r1, [sp, #12]
 800a17a:	2002      	movs	r0, #2
 800a17c:	f7ff fefe 	bl	8009f7c <AddSnippet>
 800a180:	2800      	cmp	r0, #0
 800a182:	d102      	bne.n	800a18a <CLI_CommandParser+0x11a>
				pcOutputString[0] = '\r';
 800a184:	230d      	movs	r3, #13
 800a186:	7023      	strb	r3, [r4, #0]
 800a188:	e7d3      	b.n	800a132 <CLI_CommandParser+0xc2>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 800a18a:	2252      	movs	r2, #82	; 0x52
 800a18c:	4997      	ldr	r1, [pc, #604]	; (800a3ec <CLI_CommandParser+0x37c>)
 800a18e:	0020      	movs	r0, r4
 800a190:	f00a f889 	bl	80142a6 <memcpy>
 800a194:	e7cd      	b.n	800a132 <CLI_CommandParser+0xc2>
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 800a196:	f009 fe2b 	bl	8013df0 <__locale_ctype_ptr>
 800a19a:	786b      	ldrb	r3, [r5, #1]
 800a19c:	18c0      	adds	r0, r0, r3
 800a19e:	7843      	ldrb	r3, [r0, #1]
 800a1a0:	075b      	lsls	r3, r3, #29
 800a1a2:	d497      	bmi.n	800a0d4 <CLI_CommandParser+0x64>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 800a1a4:	9903      	ldr	r1, [sp, #12]
 800a1a6:	1a6a      	subs	r2, r5, r1
 800a1a8:	a807      	add	r0, sp, #28
 800a1aa:	f00a fb06 	bl	80147ba <strncpy>
				id = GetID(idString);
 800a1ae:	a807      	add	r0, sp, #28
 800a1b0:	f7fc f946 	bl	8006440 <GetID>
 800a1b4:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 800a1b6:	4a93      	ldr	r2, [pc, #588]	; (800a404 <CLI_CommandParser+0x394>)
 800a1b8:	7812      	ldrb	r2, [r2, #0]
 800a1ba:	4693      	mov	fp, r2
 800a1bc:	4290      	cmp	r0, r2
 800a1be:	d03d      	beq.n	800a23c <CLI_CommandParser+0x1cc>
				}	else if (id == BOS_ERR_WrongName) {		
 800a1c0:	2864      	cmp	r0, #100	; 0x64
 800a1c2:	d043      	beq.n	800a24c <CLI_CommandParser+0x1dc>
				}	else if (id == BOS_ERR_WrongID) {
 800a1c4:	2866      	cmp	r0, #102	; 0x66
 800a1c6:	d047      	beq.n	800a258 <CLI_CommandParser+0x1e8>
				}	else if (id == BOS_BROADCAST) {
 800a1c8:	28ff      	cmp	r0, #255	; 0xff
 800a1ca:	d04b      	beq.n	800a264 <CLI_CommandParser+0x1f4>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 800a1cc:	466b      	mov	r3, sp
 800a1ce:	7d1b      	ldrb	r3, [r3, #20]
 800a1d0:	469a      	mov	sl, r3
 800a1d2:	2bfe      	cmp	r3, #254	; 0xfe
 800a1d4:	d078      	beq.n	800a2c8 <CLI_CommandParser+0x258>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 800a1d6:	3501      	adds	r5, #1
 800a1d8:	2206      	movs	r2, #6
 800a1da:	498b      	ldr	r1, [pc, #556]	; (800a408 <CLI_CommandParser+0x398>)
 800a1dc:	0028      	movs	r0, r5
 800a1de:	f00a fadb 	bl	8014798 <strncmp>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d000      	beq.n	800a1e8 <CLI_CommandParser+0x178>
 800a1e6:	e0b4      	b.n	800a352 <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;				
 800a1e8:	4b88      	ldr	r3, [pc, #544]	; (800a40c <CLI_CommandParser+0x39c>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 800a1ee:	2119      	movs	r1, #25
 800a1f0:	4650      	mov	r0, sl
 800a1f2:	f7fb fdf3 	bl	8005ddc <SendMessageToModule>
						osDelay(100);
 800a1f6:	2064      	movs	r0, #100	; 0x64
 800a1f8:	f004 fb65 	bl	800e8c6 <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 800a1fc:	4b84      	ldr	r3, [pc, #528]	; (800a410 <CLI_CommandParser+0x3a0>)
 800a1fe:	781a      	ldrb	r2, [r3, #0]
 800a200:	4b80      	ldr	r3, [pc, #512]	; (800a404 <CLI_CommandParser+0x394>)
 800a202:	7818      	ldrb	r0, [r3, #0]
 800a204:	2300      	movs	r3, #0
 800a206:	4651      	mov	r1, sl
 800a208:	f7fc fd4a 	bl	8006ca0 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 800a20c:	4b7f      	ldr	r3, [pc, #508]	; (800a40c <CLI_CommandParser+0x39c>)
 800a20e:	799b      	ldrb	r3, [r3, #6]
 800a210:	2b60      	cmp	r3, #96	; 0x60
 800a212:	d18e      	bne.n	800a132 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 800a214:	21fa      	movs	r1, #250	; 0xfa
 800a216:	0089      	lsls	r1, r1, #2
 800a218:	2001      	movs	r0, #1
 800a21a:	f005 ff27 	bl	801006c <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 800a21e:	4b7d      	ldr	r3, [pc, #500]	; (800a414 <CLI_CommandParser+0x3a4>)
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d085      	beq.n	800a132 <CLI_CommandParser+0xc2>
									++timedoutMsg;
 800a226:	4a7c      	ldr	r2, [pc, #496]	; (800a418 <CLI_CommandParser+0x3a8>)
 800a228:	8813      	ldrh	r3, [r2, #0]
 800a22a:	3301      	adds	r3, #1
 800a22c:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 800a22e:	9b05      	ldr	r3, [sp, #20]
 800a230:	0022      	movs	r2, r4
 800a232:	497a      	ldr	r1, [pc, #488]	; (800a41c <CLI_CommandParser+0x3ac>)
 800a234:	0020      	movs	r0, r4
 800a236:	f00a fa6b 	bl	8014710 <sprintf>
 800a23a:	e77a      	b.n	800a132 <CLI_CommandParser+0xc2>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 800a23c:	2299      	movs	r2, #153	; 0x99
 800a23e:	1c68      	adds	r0, r5, #1
 800a240:	0092      	lsls	r2, r2, #2
 800a242:	0021      	movs	r1, r4
 800a244:	f004 fbd6 	bl	800e9f4 <FreeRTOS_CLIProcessCommand>
 800a248:	0006      	movs	r6, r0
 800a24a:	e74a      	b.n	800a0e2 <CLI_CommandParser+0x72>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 800a24c:	2227      	movs	r2, #39	; 0x27
 800a24e:	4974      	ldr	r1, [pc, #464]	; (800a420 <CLI_CommandParser+0x3b0>)
 800a250:	0020      	movs	r0, r4
 800a252:	f00a f828 	bl	80142a6 <memcpy>
 800a256:	e76c      	b.n	800a132 <CLI_CommandParser+0xc2>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 800a258:	2225      	movs	r2, #37	; 0x25
 800a25a:	4972      	ldr	r1, [pc, #456]	; (800a424 <CLI_CommandParser+0x3b4>)
 800a25c:	0020      	movs	r0, r4
 800a25e:	f00a f822 	bl	80142a6 <memcpy>
 800a262:	e766      	b.n	800a132 <CLI_CommandParser+0xc2>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 800a264:	2219      	movs	r2, #25
 800a266:	2100      	movs	r1, #0
 800a268:	486f      	ldr	r0, [pc, #444]	; (800a428 <CLI_CommandParser+0x3b8>)
 800a26a:	f00a f825 	bl	80142b8 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 800a26e:	3501      	adds	r5, #1
 800a270:	9803      	ldr	r0, [sp, #12]
 800a272:	f7f5 ff51 	bl	8000118 <strlen>
 800a276:	0006      	movs	r6, r0
 800a278:	ab07      	add	r3, sp, #28
 800a27a:	0018      	movs	r0, r3
 800a27c:	f7f5 ff4c 	bl	8000118 <strlen>
 800a280:	1e72      	subs	r2, r6, #1
 800a282:	1a12      	subs	r2, r2, r0
 800a284:	0029      	movs	r1, r5
 800a286:	4869      	ldr	r0, [pc, #420]	; (800a42c <CLI_CommandParser+0x3bc>)
 800a288:	f00a fa97 	bl	80147ba <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 800a28c:	9803      	ldr	r0, [sp, #12]
 800a28e:	f7f5 ff43 	bl	8000118 <strlen>
 800a292:	0006      	movs	r6, r0
 800a294:	a807      	add	r0, sp, #28
 800a296:	f7f5 ff3f 	bl	8000118 <strlen>
 800a29a:	1a33      	subs	r3, r6, r0
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2217      	movs	r2, #23
 800a2a0:	21ff      	movs	r1, #255	; 0xff
 800a2a2:	4658      	mov	r0, fp
 800a2a4:	f7fb f912 	bl	80054cc <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800a2a8:	2299      	movs	r2, #153	; 0x99
 800a2aa:	0092      	lsls	r2, r2, #2
 800a2ac:	0021      	movs	r1, r4
 800a2ae:	0028      	movs	r0, r5
 800a2b0:	f004 fba0 	bl	800e9f4 <FreeRTOS_CLIProcessCommand>
 800a2b4:	0006      	movs	r6, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 800a2b6:	0020      	movs	r0, r4
 800a2b8:	f7f5 ff2e 	bl	8000118 <strlen>
 800a2bc:	1820      	adds	r0, r4, r0
 800a2be:	221d      	movs	r2, #29
 800a2c0:	495b      	ldr	r1, [pc, #364]	; (800a430 <CLI_CommandParser+0x3c0>)
 800a2c2:	f009 fff0 	bl	80142a6 <memcpy>
 800a2c6:	e70c      	b.n	800a0e2 <CLI_CommandParser+0x72>
					group = id >> 8;
 800a2c8:	9b05      	ldr	r3, [sp, #20]
 800a2ca:	121b      	asrs	r3, r3, #8
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	469a      	mov	sl, r3
 800a2d0:	4b58      	ldr	r3, [pc, #352]	; (800a434 <CLI_CommandParser+0x3c4>)
 800a2d2:	4699      	mov	r9, r3
 800a2d4:	4652      	mov	r2, sl
 800a2d6:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 800a2d8:	2219      	movs	r2, #25
 800a2da:	2100      	movs	r1, #0
 800a2dc:	4852      	ldr	r0, [pc, #328]	; (800a428 <CLI_CommandParser+0x3b8>)
 800a2de:	f009 ffeb 	bl	80142b8 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 800a2e2:	1c6b      	adds	r3, r5, #1
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	9803      	ldr	r0, [sp, #12]
 800a2e8:	f7f5 ff16 	bl	8000118 <strlen>
 800a2ec:	0005      	movs	r5, r0
 800a2ee:	aa07      	add	r2, sp, #28
 800a2f0:	0010      	movs	r0, r2
 800a2f2:	f7f5 ff11 	bl	8000118 <strlen>
 800a2f6:	3d01      	subs	r5, #1
 800a2f8:	1a2a      	subs	r2, r5, r0
 800a2fa:	9905      	ldr	r1, [sp, #20]
 800a2fc:	484b      	ldr	r0, [pc, #300]	; (800a42c <CLI_CommandParser+0x3bc>)
 800a2fe:	f00a fa5c 	bl	80147ba <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 800a302:	9803      	ldr	r0, [sp, #12]
 800a304:	f7f5 ff08 	bl	8000118 <strlen>
 800a308:	0005      	movs	r5, r0
 800a30a:	a807      	add	r0, sp, #28
 800a30c:	f7f5 ff04 	bl	8000118 <strlen>
 800a310:	1a2b      	subs	r3, r5, r0
 800a312:	b29b      	uxth	r3, r3
 800a314:	2217      	movs	r2, #23
 800a316:	4651      	mov	r1, sl
 800a318:	4658      	mov	r0, fp
 800a31a:	f7fb f8d7 	bl	80054cc <BroadcastMessage>
					if (InGroup(myID, group))
 800a31e:	4b39      	ldr	r3, [pc, #228]	; (800a404 <CLI_CommandParser+0x394>)
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	3b01      	subs	r3, #1
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	4a44      	ldr	r2, [pc, #272]	; (800a438 <CLI_CommandParser+0x3c8>)
 800a328:	5a9b      	ldrh	r3, [r3, r2]
 800a32a:	464a      	mov	r2, r9
 800a32c:	7812      	ldrb	r2, [r2, #0]
 800a32e:	4113      	asrs	r3, r2
 800a330:	07db      	lsls	r3, r3, #31
 800a332:	d406      	bmi.n	800a342 <CLI_CommandParser+0x2d2>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 800a334:	ab07      	add	r3, sp, #28
 800a336:	0022      	movs	r2, r4
 800a338:	4940      	ldr	r1, [pc, #256]	; (800a43c <CLI_CommandParser+0x3cc>)
 800a33a:	0020      	movs	r0, r4
 800a33c:	f00a f9e8 	bl	8014710 <sprintf>
 800a340:	e6cf      	b.n	800a0e2 <CLI_CommandParser+0x72>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800a342:	2299      	movs	r2, #153	; 0x99
 800a344:	0092      	lsls	r2, r2, #2
 800a346:	0021      	movs	r1, r4
 800a348:	9805      	ldr	r0, [sp, #20]
 800a34a:	f004 fb53 	bl	800e9f4 <FreeRTOS_CLIProcessCommand>
 800a34e:	0006      	movs	r6, r0
 800a350:	e7f0      	b.n	800a334 <CLI_CommandParser+0x2c4>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 800a352:	9803      	ldr	r0, [sp, #12]
 800a354:	f7f5 fee0 	bl	8000118 <strlen>
 800a358:	0006      	movs	r6, r0
 800a35a:	ab07      	add	r3, sp, #28
 800a35c:	0018      	movs	r0, r3
 800a35e:	f7f5 fedb 	bl	8000118 <strlen>
 800a362:	1e72      	subs	r2, r6, #1
 800a364:	1a12      	subs	r2, r2, r0
 800a366:	0029      	movs	r1, r5
 800a368:	4830      	ldr	r0, [pc, #192]	; (800a42c <CLI_CommandParser+0x3bc>)
 800a36a:	f00a fa26 	bl	80147ba <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 800a36e:	9803      	ldr	r0, [sp, #12]
 800a370:	f7f5 fed2 	bl	8000118 <strlen>
 800a374:	0005      	movs	r5, r0
 800a376:	a807      	add	r0, sp, #28
 800a378:	f7f5 fece 	bl	8000118 <strlen>
 800a37c:	3d01      	subs	r5, #1
 800a37e:	1a2a      	subs	r2, r5, r0
 800a380:	b292      	uxth	r2, r2
 800a382:	2117      	movs	r1, #23
 800a384:	4650      	mov	r0, sl
 800a386:	f7fb fd29 	bl	8005ddc <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 800a38a:	9a05      	ldr	r2, [sp, #20]
 800a38c:	492c      	ldr	r1, [pc, #176]	; (800a440 <CLI_CommandParser+0x3d0>)
 800a38e:	0020      	movs	r0, r4
 800a390:	f00a f9be 	bl	8014710 <sprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 800a394:	7823      	ldrb	r3, [r4, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <CLI_CommandParser+0x330>
 800a39a:	4643      	mov	r3, r8
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d108      	bne.n	800a3b2 <CLI_CommandParser+0x342>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a3a0:	0020      	movs	r0, r4
 800a3a2:	f7f5 feb9 	bl	8000118 <strlen>
 800a3a6:	0002      	movs	r2, r0
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	0020      	movs	r0, r4
 800a3ac:	f009 ff84 	bl	80142b8 <memset>
 800a3b0:	e72c      	b.n	800a20c <CLI_CommandParser+0x19c>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 800a3b2:	0020      	movs	r0, r4
 800a3b4:	f7f5 feb0 	bl	8000118 <strlen>
 800a3b8:	b282      	uxth	r2, r0
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	3331      	adds	r3, #49	; 0x31
 800a3c0:	0021      	movs	r1, r4
 800a3c2:	9804      	ldr	r0, [sp, #16]
 800a3c4:	f003 fdb2 	bl	800df2c <writePxMutex>
 800a3c8:	e7ea      	b.n	800a3a0 <CLI_CommandParser+0x330>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 800a3ca:	4643      	mov	r3, r8
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d100      	bne.n	800a3d2 <CLI_CommandParser+0x362>
 800a3d0:	e68b      	b.n	800a0ea <CLI_CommandParser+0x7a>
 800a3d2:	e6b7      	b.n	800a144 <CLI_CommandParser+0xd4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	425b      	negs	r3, r3
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	3333      	adds	r3, #51	; 0x33
 800a3dc:	2238      	movs	r2, #56	; 0x38
 800a3de:	4919      	ldr	r1, [pc, #100]	; (800a444 <CLI_CommandParser+0x3d4>)
 800a3e0:	9804      	ldr	r0, [sp, #16]
 800a3e2:	f003 fda3 	bl	800df2c <writePxMutex>
}
 800a3e6:	e043      	b.n	800a470 <CLI_CommandParser+0x400>
 800a3e8:	20001510 	.word	0x20001510
 800a3ec:	0801aff0 	.word	0x0801aff0
 800a3f0:	0801b044 	.word	0x0801b044
 800a3f4:	0801b090 	.word	0x0801b090
 800a3f8:	0801afec 	.word	0x0801afec
 800a3fc:	080190d4 	.word	0x080190d4
 800a400:	0801b04c 	.word	0x0801b04c
 800a404:	20001298 	.word	0x20001298
 800a408:	0801a938 	.word	0x0801a938
 800a40c:	20006a10 	.word	0x20006a10
 800a410:	20000abf 	.word	0x20000abf
 800a414:	200013a0 	.word	0x200013a0
 800a418:	20001752 	.word	0x20001752
 800a41c:	0801b154 	.word	0x0801b154
 800a420:	0801b094 	.word	0x0801b094
 800a424:	0801b0bc 	.word	0x0801b0bc
 800a428:	20000d50 	.word	0x20000d50
 800a42c:	20001164 	.word	0x20001164
 800a430:	0801b0e4 	.word	0x0801b0e4
 800a434:	200014e2 	.word	0x200014e2
 800a438:	20000fd8 	.word	0x20000fd8
 800a43c:	0801b104 	.word	0x0801b104
 800a440:	0801b130 	.word	0x0801b130
 800a444:	0801b174 	.word	0x0801b174
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a448:	0020      	movs	r0, r4
 800a44a:	f7f5 fe65 	bl	8000118 <strlen>
 800a44e:	0002      	movs	r2, r0
 800a450:	2100      	movs	r1, #0
 800a452:	0020      	movs	r0, r4
 800a454:	f009 ff30 	bl	80142b8 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 800a458:	2209      	movs	r2, #9
 800a45a:	2100      	movs	r1, #0
 800a45c:	a807      	add	r0, sp, #28
 800a45e:	f009 ff2b 	bl	80142b8 <memset>
	if(!recordSnippet && enableOutput)
 800a462:	4b0b      	ldr	r3, [pc, #44]	; (800a490 <CLI_CommandParser+0x420>)
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d102      	bne.n	800a470 <CLI_CommandParser+0x400>
 800a46a:	4643      	mov	r3, r8
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1b1      	bne.n	800a3d4 <CLI_CommandParser+0x364>
}
 800a470:	b00b      	add	sp, #44	; 0x2c
 800a472:	bc3c      	pop	{r2, r3, r4, r5}
 800a474:	4690      	mov	r8, r2
 800a476:	4699      	mov	r9, r3
 800a478:	46a2      	mov	sl, r4
 800a47a:	46ab      	mov	fp, r5
 800a47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a47e:	0020      	movs	r0, r4
 800a480:	f7f5 fe4a 	bl	8000118 <strlen>
 800a484:	0002      	movs	r2, r0
 800a486:	2100      	movs	r1, #0
 800a488:	0020      	movs	r0, r4
 800a48a:	f009 ff15 	bl	80142b8 <memset>
 800a48e:	e7e3      	b.n	800a458 <CLI_CommandParser+0x3e8>
 800a490:	20001510 	.word	0x20001510

0800a494 <prvCLITask>:
{
 800a494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a496:	46de      	mov	lr, fp
 800a498:	4657      	mov	r7, sl
 800a49a:	464e      	mov	r6, r9
 800a49c:	b5c0      	push	{r6, r7, lr}
 800a49e:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	4249      	negs	r1, r1
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	f005 fde1 	bl	801006c <ulTaskNotifyTake>
	cRxedChar = '\0';
 800a4aa:	230f      	movs	r3, #15
 800a4ac:	aa02      	add	r2, sp, #8
 800a4ae:	4694      	mov	ip, r2
 800a4b0:	4463      	add	r3, ip
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a4b6:	f004 fb1b 	bl	800eaf0 <FreeRTOS_CLIGetOutputBuffer>
 800a4ba:	9003      	str	r0, [sp, #12]
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 800a4bc:	23e1      	movs	r3, #225	; 0xe1
 800a4be:	031b      	lsls	r3, r3, #12
 800a4c0:	4a5f      	ldr	r2, [pc, #380]	; (800a640 <prvCLITask+0x1ac>)
 800a4c2:	6892      	ldr	r2, [r2, #8]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d009      	beq.n	800a4dc <prvCLITask+0x48>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800a4c8:	2401      	movs	r4, #1
			if (port != PcPort)
 800a4ca:	4e5e      	ldr	r6, [pc, #376]	; (800a644 <prvCLITask+0x1b0>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 800a4cc:	001d      	movs	r5, r3
			if (port != PcPort)
 800a4ce:	7833      	ldrb	r3, [r6, #0]
 800a4d0:	42a3      	cmp	r3, r4
 800a4d2:	d12c      	bne.n	800a52e <prvCLITask+0x9a>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800a4d4:	3401      	adds	r4, #1
 800a4d6:	b2e4      	uxtb	r4, r4
 800a4d8:	2c07      	cmp	r4, #7
 800a4da:	d1f8      	bne.n	800a4ce <prvCLITask+0x3a>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 800a4dc:	4b5a      	ldr	r3, [pc, #360]	; (800a648 <prvCLITask+0x1b4>)
 800a4de:	881a      	ldrh	r2, [r3, #0]
 800a4e0:	0053      	lsls	r3, r2, #1
 800a4e2:	189b      	adds	r3, r3, r2
 800a4e4:	005b      	lsls	r3, r3, #1
 800a4e6:	4a59      	ldr	r2, [pc, #356]	; (800a64c <prvCLITask+0x1b8>)
 800a4e8:	189b      	adds	r3, r3, r2
 800a4ea:	4a59      	ldr	r2, [pc, #356]	; (800a650 <prvCLITask+0x1bc>)
 800a4ec:	7812      	ldrb	r2, [r2, #0]
 800a4ee:	4c59      	ldr	r4, [pc, #356]	; (800a654 <prvCLITask+0x1c0>)
 800a4f0:	4d54      	ldr	r5, [pc, #336]	; (800a644 <prvCLITask+0x1b0>)
 800a4f2:	7829      	ldrb	r1, [r5, #0]
 800a4f4:	9100      	str	r1, [sp, #0]
 800a4f6:	4958      	ldr	r1, [pc, #352]	; (800a658 <prvCLITask+0x1c4>)
 800a4f8:	0020      	movs	r0, r4
 800a4fa:	f00a f909 	bl	8014710 <sprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 800a4fe:	7828      	ldrb	r0, [r5, #0]
 800a500:	230a      	movs	r3, #10
 800a502:	4a56      	ldr	r2, [pc, #344]	; (800a65c <prvCLITask+0x1c8>)
 800a504:	4956      	ldr	r1, [pc, #344]	; (800a660 <prvCLITask+0x1cc>)
 800a506:	f003 fd3b 	bl	800df80 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 800a50a:	0020      	movs	r0, r4
 800a50c:	f7f5 fe04 	bl	8000118 <strlen>
 800a510:	b282      	uxth	r2, r0
 800a512:	7828      	ldrb	r0, [r5, #0]
 800a514:	230a      	movs	r3, #10
 800a516:	0021      	movs	r1, r4
 800a518:	f003 fd32 	bl	800df80 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 800a51c:	2300      	movs	r3, #0
 800a51e:	469b      	mov	fp, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a520:	4b48      	ldr	r3, [pc, #288]	; (800a644 <prvCLITask+0x1b0>)
 800a522:	469a      	mov	sl, r3
 800a524:	4b4f      	ldr	r3, [pc, #316]	; (800a664 <prvCLITask+0x1d0>)
 800a526:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800a528:	001f      	movs	r7, r3
			if (UARTRxBuf[PcPort-1][chr]) {
 800a52a:	4656      	mov	r6, sl
 800a52c:	e066      	b.n	800a5fc <prvCLITask+0x168>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 800a52e:	0029      	movs	r1, r5
 800a530:	0020      	movs	r0, r4
 800a532:	f003 fd69 	bl	800e008 <UpdateBaudrate>
 800a536:	e7cd      	b.n	800a4d4 <prvCLITask+0x40>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 800a538:	200f      	movs	r0, #15
 800a53a:	ad02      	add	r5, sp, #8
 800a53c:	46ac      	mov	ip, r5
 800a53e:	4460      	add	r0, ip
 800a540:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 800a542:	0198      	lsls	r0, r3, #6
 800a544:	4a48      	ldr	r2, [pc, #288]	; (800a668 <prvCLITask+0x1d4>)
 800a546:	1812      	adds	r2, r2, r0
 800a548:	2000      	movs	r0, #0
 800a54a:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort-1] = chr;
 800a54c:	4a45      	ldr	r2, [pc, #276]	; (800a664 <prvCLITask+0x1d0>)
 800a54e:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 800a550:	240f      	movs	r4, #15
 800a552:	ab02      	add	r3, sp, #8
 800a554:	469c      	mov	ip, r3
 800a556:	4464      	add	r4, ip
 800a558:	4b3a      	ldr	r3, [pc, #232]	; (800a644 <prvCLITask+0x1b0>)
 800a55a:	7818      	ldrb	r0, [r3, #0]
 800a55c:	230a      	movs	r3, #10
 800a55e:	2201      	movs	r2, #1
 800a560:	0021      	movs	r1, r4
 800a562:	f003 fd0d 	bl	800df80 <writePxITMutex>
		if( cRxedChar == '\r' )
 800a566:	7823      	ldrb	r3, [r4, #0]
 800a568:	2b0d      	cmp	r3, #13
 800a56a:	d028      	beq.n	800a5be <prvCLITask+0x12a>
			if( cRxedChar == '\n' )
 800a56c:	2b0a      	cmp	r3, #10
 800a56e:	d043      	beq.n	800a5f8 <prvCLITask+0x164>
			else if( cRxedChar == '\b' )
 800a570:	2b08      	cmp	r3, #8
 800a572:	d059      	beq.n	800a628 <prvCLITask+0x194>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 800a574:	001a      	movs	r2, r3
 800a576:	3a20      	subs	r2, #32
 800a578:	2a5e      	cmp	r2, #94	; 0x5e
 800a57a:	d83d      	bhi.n	800a5f8 <prvCLITask+0x164>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 800a57c:	465a      	mov	r2, fp
 800a57e:	2a31      	cmp	r2, #49	; 0x31
 800a580:	dc3a      	bgt.n	800a5f8 <prvCLITask+0x164>
						cInputString[ cInputIndex ] = cRxedChar;
 800a582:	4a3a      	ldr	r2, [pc, #232]	; (800a66c <prvCLITask+0x1d8>)
 800a584:	4659      	mov	r1, fp
 800a586:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 800a588:	465b      	mov	r3, fp
 800a58a:	3301      	adds	r3, #1
 800a58c:	b25b      	sxtb	r3, r3
 800a58e:	469b      	mov	fp, r3
 800a590:	e032      	b.n	800a5f8 <prvCLITask+0x164>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800a592:	2200      	movs	r2, #0
 800a594:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 800a596:	f006 f843 	bl	8010620 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a59a:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 800a59c:	7833      	ldrb	r3, [r6, #0]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	0021      	movs	r1, r4
 800a5a2:	019a      	lsls	r2, r3, #6
 800a5a4:	18aa      	adds	r2, r5, r2
 800a5a6:	5d12      	ldrb	r2, [r2, r4]
 800a5a8:	2a00      	cmp	r2, #0
 800a5aa:	d1c5      	bne.n	800a538 <prvCLITask+0xa4>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 800a5ac:	2c3f      	cmp	r4, #63	; 0x3f
 800a5ae:	d0f0      	beq.n	800a592 <prvCLITask+0xfe>
			taskYIELD();
 800a5b0:	f006 f836 	bl	8010620 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a5b4:	3401      	adds	r4, #1
 800a5b6:	b2a4      	uxth	r4, r4
 800a5b8:	2c3f      	cmp	r4, #63	; 0x3f
 800a5ba:	d9ef      	bls.n	800a59c <prvCLITask+0x108>
 800a5bc:	e7c8      	b.n	800a550 <prvCLITask+0xbc>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 800a5be:	4b21      	ldr	r3, [pc, #132]	; (800a644 <prvCLITask+0x1b0>)
 800a5c0:	7818      	ldrb	r0, [r3, #0]
 800a5c2:	230a      	movs	r3, #10
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	492a      	ldr	r1, [pc, #168]	; (800a670 <prvCLITask+0x1dc>)
 800a5c8:	f003 fcda 	bl	800df80 <writePxITMutex>
			if( cInputIndex == 0 )
 800a5cc:	465b      	mov	r3, fp
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d025      	beq.n	800a61e <prvCLITask+0x18a>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 800a5d2:	4c26      	ldr	r4, [pc, #152]	; (800a66c <prvCLITask+0x1d8>)
 800a5d4:	4b1b      	ldr	r3, [pc, #108]	; (800a644 <prvCLITask+0x1b0>)
 800a5d6:	7818      	ldrb	r0, [r3, #0]
 800a5d8:	9b03      	ldr	r3, [sp, #12]
 800a5da:	0022      	movs	r2, r4
 800a5dc:	2101      	movs	r1, #1
 800a5de:	f7ff fd47 	bl	800a070 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 800a5e2:	0021      	movs	r1, r4
 800a5e4:	4823      	ldr	r0, [pc, #140]	; (800a674 <prvCLITask+0x1e0>)
 800a5e6:	f00a f8cf 	bl	8014788 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 800a5ea:	2232      	movs	r2, #50	; 0x32
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	0020      	movs	r0, r4
 800a5f0:	f009 fe62 	bl	80142b8 <memset>
			cInputIndex = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	469b      	mov	fp, r3
		taskYIELD();
 800a5f8:	f006 f812 	bl	8010620 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a5fc:	4653      	mov	r3, sl
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	3b01      	subs	r3, #1
 800a602:	464a      	mov	r2, r9
 800a604:	5cd2      	ldrb	r2, [r2, r3]
 800a606:	b294      	uxth	r4, r2
 800a608:	2c3f      	cmp	r4, #63	; 0x3f
 800a60a:	d8a1      	bhi.n	800a550 <prvCLITask+0xbc>
			if (UARTRxBuf[PcPort-1][chr]) {
 800a60c:	0011      	movs	r1, r2
 800a60e:	019d      	lsls	r5, r3, #6
 800a610:	4815      	ldr	r0, [pc, #84]	; (800a668 <prvCLITask+0x1d4>)
 800a612:	1940      	adds	r0, r0, r5
 800a614:	5c82      	ldrb	r2, [r0, r2]
 800a616:	2a00      	cmp	r2, #0
 800a618:	d18e      	bne.n	800a538 <prvCLITask+0xa4>
 800a61a:	4d13      	ldr	r5, [pc, #76]	; (800a668 <prvCLITask+0x1d4>)
 800a61c:	e7c6      	b.n	800a5ac <prvCLITask+0x118>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 800a61e:	4915      	ldr	r1, [pc, #84]	; (800a674 <prvCLITask+0x1e0>)
 800a620:	4812      	ldr	r0, [pc, #72]	; (800a66c <prvCLITask+0x1d8>)
 800a622:	f00a f8b1 	bl	8014788 <strcpy>
 800a626:	e7d4      	b.n	800a5d2 <prvCLITask+0x13e>
				if( cInputIndex > 0 )
 800a628:	465b      	mov	r3, fp
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	dde4      	ble.n	800a5f8 <prvCLITask+0x164>
					cInputIndex--;
 800a62e:	3b01      	subs	r3, #1
 800a630:	b25b      	sxtb	r3, r3
 800a632:	469b      	mov	fp, r3
					cInputString[ cInputIndex ] = '\0';
 800a634:	4b0d      	ldr	r3, [pc, #52]	; (800a66c <prvCLITask+0x1d8>)
 800a636:	2200      	movs	r2, #0
 800a638:	4659      	mov	r1, fp
 800a63a:	545a      	strb	r2, [r3, r1]
 800a63c:	e7dc      	b.n	800a5f8 <prvCLITask+0x164>
 800a63e:	46c0      	nop			; (mov r8, r8)
 800a640:	20006a10 	.word	0x20006a10
 800a644:	20000abf 	.word	0x20000abf
 800a648:	2000001e 	.word	0x2000001e
 800a64c:	0801979c 	.word	0x0801979c
 800a650:	20001298 	.word	0x20001298
 800a654:	200014e4 	.word	0x200014e4
 800a658:	0801b1e0 	.word	0x0801b1e0
 800a65c:	00000293 	.word	0x00000293
 800a660:	0801b20c 	.word	0x0801b20c
 800a664:	2000169c 	.word	0x2000169c
 800a668:	2000151c 	.word	0x2000151c
 800a66c:	20001414 	.word	0x20001414
 800a670:	0801a54c 	.word	0x0801a54c
 800a674:	200014b0 	.word	0x200014b0

0800a678 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 800a67c:	4b1c      	ldr	r3, [pc, #112]	; (800a6f0 <ParseSnippetCommand+0x78>)
 800a67e:	781a      	ldrb	r2, [r3, #0]
 800a680:	3a01      	subs	r2, #1
 800a682:	0093      	lsls	r3, r2, #2
 800a684:	189b      	adds	r3, r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4a1a      	ldr	r2, [pc, #104]	; (800a6f4 <ParseSnippetCommand+0x7c>)
 800a68a:	18d3      	adds	r3, r2, r3
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d02c      	beq.n	800a6ec <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800a692:	4b19      	ldr	r3, [pc, #100]	; (800a6f8 <ParseSnippetCommand+0x80>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d014      	beq.n	800a6c4 <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 800a69a:	4b17      	ldr	r3, [pc, #92]	; (800a6f8 <ParseSnippetCommand+0x80>)
 800a69c:	681d      	ldr	r5, [r3, #0]
 800a69e:	782b      	ldrb	r3, [r5, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d012      	beq.n	800a6ca <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 800a6a4:	2113      	movs	r1, #19
 800a6a6:	0028      	movs	r0, r5
 800a6a8:	f00a f860 	bl	801476c <strchr>
 800a6ac:	1e06      	subs	r6, r0, #0
	if (ptrEnd != NULL)
 800a6ae:	d011      	beq.n	800a6d4 <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 800a6b0:	1b42      	subs	r2, r0, r5
 800a6b2:	0029      	movs	r1, r5
 800a6b4:	0020      	movs	r0, r4
 800a6b6:	f00a f880 	bl	80147ba <strncpy>
		ptrStart = ptrEnd+1;
 800a6ba:	3601      	adds	r6, #1
 800a6bc:	4b0e      	ldr	r3, [pc, #56]	; (800a6f8 <ParseSnippetCommand+0x80>)
 800a6be:	601e      	str	r6, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	e006      	b.n	800a6d2 <ParseSnippetCommand+0x5a>
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800a6c4:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <ParseSnippetCommand+0x80>)
 800a6c6:	6018      	str	r0, [r3, #0]
 800a6c8:	e7e7      	b.n	800a69a <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 800a6ca:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <ParseSnippetCommand+0x80>)
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]
		return false;
 800a6d0:	2000      	movs	r0, #0
}
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char *)cliBuffer, ptrStart);
 800a6d4:	0029      	movs	r1, r5
 800a6d6:	0020      	movs	r0, r4
 800a6d8:	f00a f856 	bl	8014788 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 800a6dc:	0020      	movs	r0, r4
 800a6de:	f7f5 fd1b 	bl	8000118 <strlen>
 800a6e2:	182d      	adds	r5, r5, r0
 800a6e4:	4b04      	ldr	r3, [pc, #16]	; (800a6f8 <ParseSnippetCommand+0x80>)
 800a6e6:	601d      	str	r5, [r3, #0]
	return true;
 800a6e8:	2001      	movs	r0, #1
 800a6ea:	e7f2      	b.n	800a6d2 <ParseSnippetCommand+0x5a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e7f0      	b.n	800a6d2 <ParseSnippetCommand+0x5a>
 800a6f0:	200014e3 	.word	0x200014e3
 800a6f4:	20006a88 	.word	0x20006a88
 800a6f8:	2000150c 	.word	0x2000150c

0800a6fc <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 800a6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6fe:	b083      	sub	sp, #12
 800a700:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 800a702:	0083      	lsls	r3, r0, #2
 800a704:	181b      	adds	r3, r3, r0
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4a3f      	ldr	r2, [pc, #252]	; (800a808 <CheckSnippetCondition+0x10c>)
 800a70a:	5c9b      	ldrb	r3, [r3, r2]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d003      	beq.n	800a718 <CheckSnippetCondition+0x1c>
 800a710:	2b03      	cmp	r3, #3
 800a712:	d015      	beq.n	800a740 <CheckSnippetCondition+0x44>
					
  	default:
  		break;
  }
	
	return false;
 800a714:	2000      	movs	r0, #0
 800a716:	e011      	b.n	800a73c <CheckSnippetCondition+0x40>
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 800a718:	493b      	ldr	r1, [pc, #236]	; (800a808 <CheckSnippetCondition+0x10c>)
 800a71a:	0083      	lsls	r3, r0, #2
 800a71c:	181a      	adds	r2, r3, r0
 800a71e:	0092      	lsls	r2, r2, #2
 800a720:	188a      	adds	r2, r1, r2
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 800a722:	7890      	ldrb	r0, [r2, #2]
 800a724:	00c2      	lsls	r2, r0, #3
 800a726:	1812      	adds	r2, r2, r0
 800a728:	191b      	adds	r3, r3, r4
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	18cb      	adds	r3, r1, r3
 800a72e:	4937      	ldr	r1, [pc, #220]	; (800a80c <CheckSnippetCondition+0x110>)
 800a730:	5c50      	ldrb	r0, [r2, r1]
 800a732:	78db      	ldrb	r3, [r3, #3]
 800a734:	1ac0      	subs	r0, r0, r3
 800a736:	4243      	negs	r3, r0
 800a738:	4158      	adcs	r0, r3
 800a73a:	b2c0      	uxtb	r0, r0
}
 800a73c:	b003      	add	sp, #12
 800a73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 800a740:	4e31      	ldr	r6, [pc, #196]	; (800a808 <CheckSnippetCondition+0x10c>)
 800a742:	0085      	lsls	r5, r0, #2
 800a744:	182b      	adds	r3, r5, r0
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	18f3      	adds	r3, r6, r3
 800a74a:	78da      	ldrb	r2, [r3, #3]
 800a74c:	3a01      	subs	r2, #1
 800a74e:	0053      	lsls	r3, r2, #1
 800a750:	189b      	adds	r3, r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4a2e      	ldr	r2, [pc, #184]	; (800a810 <CheckSnippetCondition+0x114>)
 800a756:	589b      	ldr	r3, [r3, r2]
 800a758:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800a75a:	1829      	adds	r1, r5, r0
 800a75c:	0089      	lsls	r1, r1, #2
 800a75e:	3106      	adds	r1, #6
 800a760:	1989      	adds	r1, r1, r6
 800a762:	2204      	movs	r2, #4
 800a764:	a801      	add	r0, sp, #4
 800a766:	f009 fd9e 	bl	80142a6 <memcpy>
			switch (snippets[index].cond.mathOperator)
 800a76a:	192d      	adds	r5, r5, r4
 800a76c:	00ad      	lsls	r5, r5, #2
 800a76e:	1975      	adds	r5, r6, r5
 800a770:	786b      	ldrb	r3, [r5, #1]
 800a772:	2b06      	cmp	r3, #6
 800a774:	d83f      	bhi.n	800a7f6 <CheckSnippetCondition+0xfa>
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4a26      	ldr	r2, [pc, #152]	; (800a814 <CheckSnippetCondition+0x118>)
 800a77a:	58d3      	ldr	r3, [r2, r3]
 800a77c:	469f      	mov	pc, r3
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 800a77e:	1c39      	adds	r1, r7, #0
 800a780:	9801      	ldr	r0, [sp, #4]
 800a782:	f7f5 fea5 	bl	80004d0 <__aeabi_fcmpeq>
 800a786:	1e43      	subs	r3, r0, #1
 800a788:	4198      	sbcs	r0, r3
 800a78a:	e7d7      	b.n	800a73c <CheckSnippetCondition+0x40>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 800a78c:	1c39      	adds	r1, r7, #0
 800a78e:	9801      	ldr	r0, [sp, #4]
 800a790:	f7f5 fea4 	bl	80004dc <__aeabi_fcmplt>
 800a794:	1e43      	subs	r3, r0, #1
 800a796:	4198      	sbcs	r0, r3
 800a798:	e7d0      	b.n	800a73c <CheckSnippetCondition+0x40>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 800a79a:	1c39      	adds	r1, r7, #0
 800a79c:	9801      	ldr	r0, [sp, #4]
 800a79e:	f7f5 feb1 	bl	8000504 <__aeabi_fcmpgt>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d029      	beq.n	800a7fa <CheckSnippetCondition+0xfe>
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	1c38      	adds	r0, r7, #0
 800a7aa:	f7f5 fe91 	bl	80004d0 <__aeabi_fcmpeq>
 800a7ae:	4243      	negs	r3, r0
 800a7b0:	4158      	adcs	r0, r3
 800a7b2:	e7c3      	b.n	800a73c <CheckSnippetCondition+0x40>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 800a7b4:	1c39      	adds	r1, r7, #0
 800a7b6:	9801      	ldr	r0, [sp, #4]
 800a7b8:	f7f5 fe9a 	bl	80004f0 <__aeabi_fcmple>
 800a7bc:	1e43      	subs	r3, r0, #1
 800a7be:	4198      	sbcs	r0, r3
 800a7c0:	e7bc      	b.n	800a73c <CheckSnippetCondition+0x40>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 800a7c2:	1c39      	adds	r1, r7, #0
 800a7c4:	9801      	ldr	r0, [sp, #4]
 800a7c6:	f7f5 fea7 	bl	8000518 <__aeabi_fcmpge>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d017      	beq.n	800a7fe <CheckSnippetCondition+0x102>
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	1c38      	adds	r0, r7, #0
 800a7d2:	f7f5 fe7d 	bl	80004d0 <__aeabi_fcmpeq>
 800a7d6:	4243      	negs	r3, r0
 800a7d8:	4158      	adcs	r0, r3
 800a7da:	e7af      	b.n	800a73c <CheckSnippetCondition+0x40>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 800a7dc:	1c39      	adds	r1, r7, #0
 800a7de:	9801      	ldr	r0, [sp, #4]
 800a7e0:	f7f5 fe76 	bl	80004d0 <__aeabi_fcmpeq>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d10c      	bne.n	800a802 <CheckSnippetCondition+0x106>
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	1c38      	adds	r0, r7, #0
 800a7ec:	f7f5 fe70 	bl	80004d0 <__aeabi_fcmpeq>
 800a7f0:	4243      	negs	r3, r0
 800a7f2:	4158      	adcs	r0, r3
 800a7f4:	e7a2      	b.n	800a73c <CheckSnippetCondition+0x40>
	return false;
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	e7a0      	b.n	800a73c <CheckSnippetCondition+0x40>
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	e79e      	b.n	800a73c <CheckSnippetCondition+0x40>
 800a7fe:	2000      	movs	r0, #0
 800a800:	e79c      	b.n	800a73c <CheckSnippetCondition+0x40>
 800a802:	2000      	movs	r0, #0
 800a804:	e79a      	b.n	800a73c <CheckSnippetCondition+0x40>
 800a806:	46c0      	nop			; (mov r8, r8)
 800a808:	20006a88 	.word	0x20006a88
 800a80c:	20000d6c 	.word	0x20000d6c
 800a810:	20000040 	.word	0x20000040
 800a814:	0801afd0 	.word	0x0801afd0

0800a818 <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 800a81a:	f004 f969 	bl	800eaf0 <FreeRTOS_CLIGetOutputBuffer>
 800a81e:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 800a820:	4b1c      	ldr	r3, [pc, #112]	; (800a894 <ExecuteSnippet+0x7c>)
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d032      	beq.n	800a88e <ExecuteSnippet+0x76>
 800a828:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 800a82a:	4f1b      	ldr	r7, [pc, #108]	; (800a898 <ExecuteSnippet+0x80>)
 800a82c:	e01a      	b.n	800a864 <ExecuteSnippet+0x4c>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 800a82e:	4b1b      	ldr	r3, [pc, #108]	; (800a89c <ExecuteSnippet+0x84>)
 800a830:	7818      	ldrb	r0, [r3, #0]
 800a832:	002b      	movs	r3, r5
 800a834:	4a1a      	ldr	r2, [pc, #104]	; (800a8a0 <ExecuteSnippet+0x88>)
 800a836:	2100      	movs	r1, #0
 800a838:	f7ff fc1a 	bl	800a070 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 800a83c:	0028      	movs	r0, r5
 800a83e:	f7f5 fc6b 	bl	8000118 <strlen>
 800a842:	0002      	movs	r2, r0
 800a844:	2100      	movs	r1, #0
 800a846:	0028      	movs	r0, r5
 800a848:	f009 fd36 	bl	80142b8 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 800a84c:	4914      	ldr	r1, [pc, #80]	; (800a8a0 <ExecuteSnippet+0x88>)
 800a84e:	68f0      	ldr	r0, [r6, #12]
 800a850:	f7ff ff12 	bl	800a678 <ParseSnippetCommand>
 800a854:	2800      	cmp	r0, #0
 800a856:	d1ea      	bne.n	800a82e <ExecuteSnippet+0x16>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 800a858:	3401      	adds	r4, #1
 800a85a:	b2a4      	uxth	r4, r4
 800a85c:	4b0d      	ldr	r3, [pc, #52]	; (800a894 <ExecuteSnippet+0x7c>)
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	42a3      	cmp	r3, r4
 800a862:	d914      	bls.n	800a88e <ExecuteSnippet+0x76>
		if (snippets[s].state)								// Check for activated Snippets
 800a864:	00a3      	lsls	r3, r4, #2
 800a866:	191b      	adds	r3, r3, r4
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	18fb      	adds	r3, r7, r3
 800a86c:	7c1b      	ldrb	r3, [r3, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d0f2      	beq.n	800a858 <ExecuteSnippet+0x40>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 800a872:	b2e0      	uxtb	r0, r4
 800a874:	f7ff ff42 	bl	800a6fc <CheckSnippetCondition>
 800a878:	2800      	cmp	r0, #0
 800a87a:	d0ed      	beq.n	800a858 <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 800a87c:	4b09      	ldr	r3, [pc, #36]	; (800a8a4 <ExecuteSnippet+0x8c>)
 800a87e:	2220      	movs	r2, #32
 800a880:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 800a882:	00a3      	lsls	r3, r4, #2
 800a884:	191e      	adds	r6, r3, r4
 800a886:	00b6      	lsls	r6, r6, #2
 800a888:	4b03      	ldr	r3, [pc, #12]	; (800a898 <ExecuteSnippet+0x80>)
 800a88a:	199e      	adds	r6, r3, r6
 800a88c:	e7de      	b.n	800a84c <ExecuteSnippet+0x34>
			}
		}
  }
	
	return result;
}
 800a88e:	2000      	movs	r0, #0
 800a890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a892:	46c0      	nop			; (mov r8, r8)
 800a894:	200014e3 	.word	0x200014e3
 800a898:	20006a88 	.word	0x20006a88
 800a89c:	20000abf 	.word	0x20000abf
 800a8a0:	2000147c 	.word	0x2000147c
 800a8a4:	20006a10 	.word	0x20006a10

0800a8a8 <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 800a8a8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 800a8aa:	1e45      	subs	r5, r0, #1
 800a8ac:	00ec      	lsls	r4, r5, #3
 800a8ae:	1b60      	subs	r0, r4, r5
 800a8b0:	00c0      	lsls	r0, r0, #3
 800a8b2:	4e05      	ldr	r6, [pc, #20]	; (800a8c8 <StopMsgDMA+0x20>)
 800a8b4:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800a8b6:	f006 fa4a 	bl	8010d4e <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a8ba:	1b64      	subs	r4, r4, r5
 800a8bc:	00e4      	lsls	r4, r4, #3
 800a8be:	59a3      	ldr	r3, [r4, r6]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	605a      	str	r2, [r3, #4]
}
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
 800a8c6:	46c0      	nop			; (mov r8, r8)
 800a8c8:	200017b0 	.word	0x200017b0

0800a8cc <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 800a8cc:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 800a8ce:	1e44      	subs	r4, r0, #1
 800a8d0:	00e5      	lsls	r5, r4, #3
 800a8d2:	1b28      	subs	r0, r5, r4
 800a8d4:	00c0      	lsls	r0, r0, #3
 800a8d6:	4e07      	ldr	r6, [pc, #28]	; (800a8f4 <StopStreamDMA+0x28>)
 800a8d8:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800a8da:	f006 fa38 	bl	8010d4e <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a8de:	1b2d      	subs	r5, r5, r4
 800a8e0:	00ed      	lsls	r5, r5, #3
 800a8e2:	59aa      	ldr	r2, [r5, r6]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 800a8e8:	00a4      	lsls	r4, r4, #2
 800a8ea:	4a03      	ldr	r2, [pc, #12]	; (800a8f8 <StopStreamDMA+0x2c>)
 800a8ec:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 800a8ee:	4a03      	ldr	r2, [pc, #12]	; (800a8fc <StopStreamDMA+0x30>)
 800a8f0:	50a3      	str	r3, [r4, r2]

}
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	200019a8 	.word	0x200019a8
 800a8f8:	200016dc 	.word	0x200016dc
 800a8fc:	2000170c 	.word	0x2000170c

0800a900 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 800a900:	b510      	push	{r4, lr}
 800a902:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 800a904:	f7ff ffd0 	bl	800a8a8 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 800a908:	3c01      	subs	r4, #1
 800a90a:	00e0      	lsls	r0, r4, #3
 800a90c:	1b02      	subs	r2, r0, r4
 800a90e:	00d2      	lsls	r2, r2, #3
 800a910:	4903      	ldr	r1, [pc, #12]	; (800a920 <SwitchMsgDMAToStream+0x20>)
 800a912:	5851      	ldr	r1, [r2, r1]
 800a914:	4b03      	ldr	r3, [pc, #12]	; (800a924 <SwitchMsgDMAToStream+0x24>)
 800a916:	18d0      	adds	r0, r2, r3
 800a918:	f001 ff3c 	bl	800c794 <DMA_STREAM_CH_Init>
}
 800a91c:	bd10      	pop	{r4, pc}
 800a91e:	46c0      	nop			; (mov r8, r8)
 800a920:	200017b0 	.word	0x200017b0
 800a924:	200019a8 	.word	0x200019a8

0800a928 <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 800a928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a92a:	b083      	sub	sp, #12
 800a92c:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800a92e:	f7ff ffcd 	bl	800a8cc <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 800a932:	9401      	str	r4, [sp, #4]
 800a934:	3c01      	subs	r4, #1
 800a936:	00e7      	lsls	r7, r4, #3
 800a938:	1b3d      	subs	r5, r7, r4
 800a93a:	00ed      	lsls	r5, r5, #3
 800a93c:	4b0f      	ldr	r3, [pc, #60]	; (800a97c <SwitchStreamDMAToMsg+0x54>)
 800a93e:	18ed      	adds	r5, r5, r3
 800a940:	4e0f      	ldr	r6, [pc, #60]	; (800a980 <SwitchStreamDMAToMsg+0x58>)
 800a942:	1b3b      	subs	r3, r7, r4
 800a944:	00db      	lsls	r3, r3, #3
 800a946:	5999      	ldr	r1, [r3, r6]
 800a948:	0028      	movs	r0, r5
 800a94a:	f001 fea5 	bl	800c698 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 800a94e:	1b3b      	subs	r3, r7, r4
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	18f3      	adds	r3, r6, r3
 800a954:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a956:	f001 fa75 	bl	800be44 <GetPort>
 800a95a:	2300      	movs	r3, #0
 800a95c:	4a09      	ldr	r2, [pc, #36]	; (800a984 <SwitchStreamDMAToMsg+0x5c>)
 800a95e:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 800a960:	1b3f      	subs	r7, r7, r4
 800a962:	00ff      	lsls	r7, r7, #3
 800a964:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port-1] = 0;
 800a966:	00a4      	lsls	r4, r4, #2
 800a968:	4a07      	ldr	r2, [pc, #28]	; (800a988 <SwitchStreamDMAToMsg+0x60>)
 800a96a:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 800a96c:	9801      	ldr	r0, [sp, #4]
 800a96e:	f7fa f833 	bl	80049d8 <GetUart>
 800a972:	0029      	movs	r1, r5
 800a974:	f002 fb02 	bl	800cf7c <DMA_MSG_RX_Setup>
		
}
 800a978:	b003      	add	sp, #12
 800a97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a97c:	200017b0 	.word	0x200017b0
 800a980:	200019a8 	.word	0x200019a8
 800a984:	20001348 	.word	0x20001348
 800a988:	200016f4 	.word	0x200016f4

0800a98c <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 800a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98e:	0005      	movs	r5, r0
 800a990:	000e      	movs	r6, r1
 800a992:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 800a994:	f001 fa56 	bl	800be44 <GetPort>
 800a998:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800a99a:	4b0d      	ldr	r3, [pc, #52]	; (800a9d0 <StartDMAstream+0x44>)
 800a99c:	5c1b      	ldrb	r3, [r3, r0]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d902      	bls.n	800a9a8 <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 800a9a2:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d112      	bne.n	800a9ce <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800a9a8:	0020      	movs	r0, r4
 800a9aa:	f7ff ffa9 	bl	800a900 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 800a9ae:	1e63      	subs	r3, r4, #1
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4a08      	ldr	r2, [pc, #32]	; (800a9d4 <StartDMAstream+0x48>)
 800a9b4:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 800a9b6:	4a06      	ldr	r2, [pc, #24]	; (800a9d0 <StartDMAstream+0x44>)
 800a9b8:	2102      	movs	r1, #2
 800a9ba:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 800a9bc:	4a06      	ldr	r2, [pc, #24]	; (800a9d8 <StartDMAstream+0x4c>)
 800a9be:	2100      	movs	r1, #0
 800a9c0:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 800a9c2:	003a      	movs	r2, r7
 800a9c4:	0031      	movs	r1, r6
 800a9c6:	0028      	movs	r0, r5
 800a9c8:	f002 fb42 	bl	800d050 <DMA_STREAM_Setup>
	
	return BOS_OK;
 800a9cc:	2000      	movs	r0, #0
}
 800a9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d0:	20001348 	.word	0x20001348
 800a9d4:	200016f4 	.word	0x200016f4
 800a9d8:	200016dc 	.word	0x200016dc

0800a9dc <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 800a9e0:	4b12      	ldr	r3, [pc, #72]	; (800aa2c <DMA_IRQHandler+0x50>)
 800a9e2:	5c1b      	ldrb	r3, [r3, r0]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d008      	beq.n	800a9fa <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 800a9e8:	3c01      	subs	r4, #1
 800a9ea:	00e0      	lsls	r0, r4, #3
 800a9ec:	1b00      	subs	r0, r0, r4
 800a9ee:	00c0      	lsls	r0, r0, #3
 800a9f0:	4c0f      	ldr	r4, [pc, #60]	; (800aa30 <DMA_IRQHandler+0x54>)
 800a9f2:	1900      	adds	r0, r0, r4
 800a9f4:	f006 f9d4 	bl	8010da0 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 800a9f8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 800a9fa:	1e45      	subs	r5, r0, #1
 800a9fc:	00e8      	lsls	r0, r5, #3
 800a9fe:	1b40      	subs	r0, r0, r5
 800aa00:	00c0      	lsls	r0, r0, #3
 800aa02:	4b0c      	ldr	r3, [pc, #48]	; (800aa34 <DMA_IRQHandler+0x58>)
 800aa04:	18c0      	adds	r0, r0, r3
 800aa06:	f006 f9cb 	bl	8010da0 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 800aa0a:	00aa      	lsls	r2, r5, #2
 800aa0c:	4b0a      	ldr	r3, [pc, #40]	; (800aa38 <DMA_IRQHandler+0x5c>)
 800aa0e:	58d2      	ldr	r2, [r2, r3]
 800aa10:	2a00      	cmp	r2, #0
 800aa12:	d006      	beq.n	800aa22 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 800aa14:	4909      	ldr	r1, [pc, #36]	; (800aa3c <DMA_IRQHandler+0x60>)
 800aa16:	00ad      	lsls	r5, r5, #2
 800aa18:	586b      	ldr	r3, [r5, r1]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d8ea      	bhi.n	800a9f8 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 800aa22:	0020      	movs	r0, r4
 800aa24:	f7ff ff52 	bl	800a8cc <StopStreamDMA>
}
 800aa28:	e7e6      	b.n	800a9f8 <DMA_IRQHandler+0x1c>
 800aa2a:	46c0      	nop			; (mov r8, r8)
 800aa2c:	20001348 	.word	0x20001348
 800aa30:	200017b0 	.word	0x200017b0
 800aa34:	200019a8 	.word	0x200019a8
 800aa38:	2000170c 	.word	0x2000170c
 800aa3c:	200016dc 	.word	0x200016dc

0800aa40 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 800aa40:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <ResetUartORE+0x28>)
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	2308      	movs	r3, #8
 800aa46:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800aa48:	4a08      	ldr	r2, [pc, #32]	; (800aa6c <ResetUartORE+0x2c>)
 800aa4a:	6812      	ldr	r2, [r2, #0]
 800aa4c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800aa4e:	4a08      	ldr	r2, [pc, #32]	; (800aa70 <ResetUartORE+0x30>)
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 800aa54:	4a07      	ldr	r2, [pc, #28]	; (800aa74 <ResetUartORE+0x34>)
 800aa56:	6812      	ldr	r2, [r2, #0]
 800aa58:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 800aa5a:	4a07      	ldr	r2, [pc, #28]	; (800aa78 <ResetUartORE+0x38>)
 800aa5c:	6812      	ldr	r2, [r2, #0]
 800aa5e:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800aa60:	4a06      	ldr	r2, [pc, #24]	; (800aa7c <ResetUartORE+0x3c>)
 800aa62:	6812      	ldr	r2, [r2, #0]
 800aa64:	6213      	str	r3, [r2, #32]
#endif
}
 800aa66:	4770      	bx	lr
 800aa68:	20006c08 	.word	0x20006c08
 800aa6c:	20006d58 	.word	0x20006d58
 800aa70:	20006b28 	.word	0x20006b28
 800aa74:	20006ce8 	.word	0x20006ce8
 800aa78:	20006b98 	.word	0x20006b98
 800aa7c:	20006c78 	.word	0x20006c78

0800aa80 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	0006      	movs	r6, r0
 800aa84:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 800aa86:	f006 fdfb 	bl	8011680 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800aa8a:	4b2b      	ldr	r3, [pc, #172]	; (800ab38 <EE_VerifyPageFullWriteVariable+0xb8>)
 800aa8c:	881a      	ldrh	r2, [r3, #0]
 800aa8e:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800aa90:	4b2a      	ldr	r3, [pc, #168]	; (800ab3c <EE_VerifyPageFullWriteVariable+0xbc>)
 800aa92:	881b      	ldrh	r3, [r3, #0]
 800aa94:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d104      	bne.n	800aaa4 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 800aa9a:	4929      	ldr	r1, [pc, #164]	; (800ab40 <EE_VerifyPageFullWriteVariable+0xc0>)
 800aa9c:	428a      	cmp	r2, r1
 800aa9e:	d007      	beq.n	800aab0 <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 800aaa0:	3302      	adds	r3, #2
 800aaa2:	e005      	b.n	800aab0 <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	d143      	bne.n	800ab30 <EE_VerifyPageFullWriteVariable+0xb0>
        if (PageStatusB == RECEIVE_DATA)
 800aaa8:	4925      	ldr	r1, [pc, #148]	; (800ab40 <EE_VerifyPageFullWriteVariable+0xc0>)
 800aaaa:	428b      	cmp	r3, r1
 800aaac:	d042      	beq.n	800ab34 <EE_VerifyPageFullWriteVariable+0xb4>
          return PAGEA;         /* PageA valid */
 800aaae:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800aab0:	4a24      	ldr	r2, [pc, #144]	; (800ab44 <EE_VerifyPageFullWriteVariable+0xc4>)
 800aab2:	189c      	adds	r4, r3, r2
 800aab4:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 800aab6:	02db      	lsls	r3, r3, #11
 800aab8:	4a23      	ldr	r2, [pc, #140]	; (800ab48 <EE_VerifyPageFullWriteVariable+0xc8>)
 800aaba:	4694      	mov	ip, r2
 800aabc:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800aabe:	6822      	ldr	r2, [r4, #0]
 800aac0:	3201      	adds	r2, #1
 800aac2:	d005      	beq.n	800aad0 <EE_VerifyPageFullWriteVariable+0x50>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800aac4:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 800aac6:	429c      	cmp	r4, r3
 800aac8:	d22e      	bcs.n	800ab28 <EE_VerifyPageFullWriteVariable+0xa8>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800aaca:	6822      	ldr	r2, [r4, #0]
 800aacc:	3201      	adds	r2, #1
 800aace:	d1f9      	bne.n	800aac4 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 800aad0:	002a      	movs	r2, r5
 800aad2:	2300      	movs	r3, #0
 800aad4:	0021      	movs	r1, r4
 800aad6:	2001      	movs	r0, #1
 800aad8:	f006 fe1c 	bl	8011714 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aadc:	481b      	ldr	r0, [pc, #108]	; (800ab4c <EE_VerifyPageFullWriteVariable+0xcc>)
 800aade:	f006 fdeb 	bl	80116b8 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d003      	beq.n	800aaee <EE_VerifyPageFullWriteVariable+0x6e>
        return pFlash.ErrorCode;
 800aae6:	4b1a      	ldr	r3, [pc, #104]	; (800ab50 <EE_VerifyPageFullWriteVariable+0xd0>)
 800aae8:	69d8      	ldr	r0, [r3, #28]
 800aaea:	b280      	uxth	r0, r0
 800aaec:	e01f      	b.n	800ab2e <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800aaee:	4a19      	ldr	r2, [pc, #100]	; (800ab54 <EE_VerifyPageFullWriteVariable+0xd4>)
 800aaf0:	6913      	ldr	r3, [r2, #16]
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	438b      	bics	r3, r1
 800aaf6:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 800aaf8:	1ca1      	adds	r1, r4, #2
 800aafa:	0032      	movs	r2, r6
 800aafc:	2300      	movs	r3, #0
 800aafe:	2001      	movs	r0, #1
 800ab00:	f006 fe08 	bl	8011714 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ab04:	4811      	ldr	r0, [pc, #68]	; (800ab4c <EE_VerifyPageFullWriteVariable+0xcc>)
 800ab06:	f006 fdd7 	bl	80116b8 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d003      	beq.n	800ab16 <EE_VerifyPageFullWriteVariable+0x96>
        return pFlash.ErrorCode;
 800ab0e:	4b10      	ldr	r3, [pc, #64]	; (800ab50 <EE_VerifyPageFullWriteVariable+0xd0>)
 800ab10:	69d8      	ldr	r0, [r3, #28]
 800ab12:	b280      	uxth	r0, r0
 800ab14:	e00b      	b.n	800ab2e <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ab16:	4a0f      	ldr	r2, [pc, #60]	; (800ab54 <EE_VerifyPageFullWriteVariable+0xd4>)
 800ab18:	6913      	ldr	r3, [r2, #16]
 800ab1a:	2101      	movs	r1, #1
 800ab1c:	438b      	bics	r3, r1
 800ab1e:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 800ab20:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <EE_VerifyPageFullWriteVariable+0xd0>)
 800ab22:	69d8      	ldr	r0, [r3, #28]
 800ab24:	b280      	uxth	r0, r0
 800ab26:	e002      	b.n	800ab2e <EE_VerifyPageFullWriteVariable+0xae>
    }
  }
	
	HAL_FLASH_Lock();
 800ab28:	f006 fdbc 	bl	80116a4 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800ab2c:	2080      	movs	r0, #128	; 0x80
}
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}
    return  NO_VALID_PAGE;
 800ab30:	20ab      	movs	r0, #171	; 0xab
 800ab32:	e7fc      	b.n	800ab2e <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEB;         /* PageB valid */
 800ab34:	2302      	movs	r3, #2
 800ab36:	e7bb      	b.n	800aab0 <EE_VerifyPageFullWriteVariable+0x30>
 800ab38:	0801e000 	.word	0x0801e000
 800ab3c:	0801f000 	.word	0x0801f000
 800ab40:	0000eeee 	.word	0x0000eeee
 800ab44:	0001003c 	.word	0x0001003c
 800ab48:	0801effe 	.word	0x0801effe
 800ab4c:	0000c350 	.word	0x0000c350
 800ab50:	20006e68 	.word	0x20006e68
 800ab54:	40022000 	.word	0x40022000

0800ab58 <EE_ReadVariable>:
{
 800ab58:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800ab5a:	4b13      	ldr	r3, [pc, #76]	; (800aba8 <EE_ReadVariable+0x50>)
 800ab5c:	881c      	ldrh	r4, [r3, #0]
 800ab5e:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800ab60:	4b12      	ldr	r3, [pc, #72]	; (800abac <EE_ReadVariable+0x54>)
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 800ab66:	2c00      	cmp	r4, #0
 800ab68:	d006      	beq.n	800ab78 <EE_ReadVariable+0x20>
      else if (PageStatusB == VALID_PAGE)
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <EE_ReadVariable+0x1e>
    return  NO_VALID_PAGE;
 800ab6e:	20ab      	movs	r0, #171	; 0xab
 800ab70:	e019      	b.n	800aba6 <EE_ReadVariable+0x4e>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800ab72:	2001      	movs	r0, #1
 800ab74:	e017      	b.n	800aba6 <EE_ReadVariable+0x4e>
        return PAGEB;           /* PageB valid */
 800ab76:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 800ab78:	02e3      	lsls	r3, r4, #11
 800ab7a:	4a0d      	ldr	r2, [pc, #52]	; (800abb0 <EE_ReadVariable+0x58>)
 800ab7c:	4694      	mov	ip, r2
 800ab7e:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800ab80:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 800ab82:	4a0c      	ldr	r2, [pc, #48]	; (800abb4 <EE_ReadVariable+0x5c>)
 800ab84:	4694      	mov	ip, r2
 800ab86:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 800ab88:	881a      	ldrh	r2, [r3, #0]
 800ab8a:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 800ab8c:	4290      	cmp	r0, r2
 800ab8e:	d006      	beq.n	800ab9e <EE_ReadVariable+0x46>
      Address = Address - 4;
 800ab90:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 800ab92:	42a3      	cmp	r3, r4
 800ab94:	d9ed      	bls.n	800ab72 <EE_ReadVariable+0x1a>
    AddressValue = (*(__IO uint16_t*)Address);
 800ab96:	881a      	ldrh	r2, [r3, #0]
 800ab98:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 800ab9a:	4282      	cmp	r2, r0
 800ab9c:	d1f8      	bne.n	800ab90 <EE_ReadVariable+0x38>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800ab9e:	3b02      	subs	r3, #2
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 800aba4:	2000      	movs	r0, #0
}
 800aba6:	bd10      	pop	{r4, pc}
 800aba8:	0801e000 	.word	0x0801e000
 800abac:	0801f000 	.word	0x0801f000
 800abb0:	0801effe 	.word	0x0801effe
 800abb4:	0801e002 	.word	0x0801e002

0800abb8 <EE_WriteVariable>:
{
 800abb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abba:	46de      	mov	lr, fp
 800abbc:	4647      	mov	r7, r8
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b083      	sub	sp, #12
 800abc2:	0005      	movs	r5, r0
 800abc4:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800abc6:	f006 fd5b 	bl	8011680 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800abca:	0031      	movs	r1, r6
 800abcc:	0028      	movs	r0, r5
 800abce:	f7ff ff57 	bl	800aa80 <EE_VerifyPageFullWriteVariable>
 800abd2:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 800abd4:	2880      	cmp	r0, #128	; 0x80
 800abd6:	d007      	beq.n	800abe8 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800abd8:	f006 fd64 	bl	80116a4 <HAL_FLASH_Lock>
}
 800abdc:	0020      	movs	r0, r4
 800abde:	b003      	add	sp, #12
 800abe0:	bc0c      	pop	{r2, r3}
 800abe2:	4690      	mov	r8, r2
 800abe4:	469b      	mov	fp, r3
 800abe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 800abe8:	f006 fd4a 	bl	8011680 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800abec:	4b3e      	ldr	r3, [pc, #248]	; (800ace8 <EE_WriteVariable+0x130>)
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800abf2:	4a3e      	ldr	r2, [pc, #248]	; (800acec <EE_WriteVariable+0x134>)
 800abf4:	8812      	ldrh	r2, [r2, #0]
 800abf6:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d007      	beq.n	800ac0c <EE_WriteVariable+0x54>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800abfc:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 800abfe:	2a00      	cmp	r2, #0
 800ac00:	d1ea      	bne.n	800abd8 <EE_WriteVariable+0x20>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 800ac02:	4b3a      	ldr	r3, [pc, #232]	; (800acec <EE_WriteVariable+0x134>)
 800ac04:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 800ac06:	4b38      	ldr	r3, [pc, #224]	; (800ace8 <EE_WriteVariable+0x130>)
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	e003      	b.n	800ac14 <EE_WriteVariable+0x5c>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 800ac0c:	4b36      	ldr	r3, [pc, #216]	; (800ace8 <EE_WriteVariable+0x130>)
 800ac0e:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 800ac10:	4b36      	ldr	r3, [pc, #216]	; (800acec <EE_WriteVariable+0x134>)
 800ac12:	9301      	str	r3, [sp, #4]
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 800ac14:	4a36      	ldr	r2, [pc, #216]	; (800acf0 <EE_WriteVariable+0x138>)
 800ac16:	2300      	movs	r3, #0
 800ac18:	9901      	ldr	r1, [sp, #4]
 800ac1a:	2001      	movs	r0, #1
 800ac1c:	f006 fd7a 	bl	8011714 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ac20:	4834      	ldr	r0, [pc, #208]	; (800acf4 <EE_WriteVariable+0x13c>)
 800ac22:	f006 fd49 	bl	80116b8 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d003      	beq.n	800ac32 <EE_WriteVariable+0x7a>
  {
    return pFlash.ErrorCode;
 800ac2a:	4b33      	ldr	r3, [pc, #204]	; (800acf8 <EE_WriteVariable+0x140>)
 800ac2c:	69dc      	ldr	r4, [r3, #28]
 800ac2e:	b2a4      	uxth	r4, r4
 800ac30:	e7d2      	b.n	800abd8 <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ac32:	4a32      	ldr	r2, [pc, #200]	; (800acfc <EE_WriteVariable+0x144>)
 800ac34:	6913      	ldr	r3, [r2, #16]
 800ac36:	2101      	movs	r1, #1
 800ac38:	438b      	bics	r3, r1
 800ac3a:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800ac3c:	0031      	movs	r1, r6
 800ac3e:	0028      	movs	r0, r5
 800ac40:	f7ff ff1e 	bl	800aa80 <EE_VerifyPageFullWriteVariable>
 800ac44:	1e04      	subs	r4, r0, #0
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800ac46:	d1c7      	bne.n	800abd8 <EE_WriteVariable+0x20>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800ac48:	2701      	movs	r7, #1
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800ac4a:	4b2d      	ldr	r3, [pc, #180]	; (800ad00 <EE_WriteVariable+0x148>)
 800ac4c:	4698      	mov	r8, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800ac4e:	4e2d      	ldr	r6, [pc, #180]	; (800ad04 <EE_WriteVariable+0x14c>)
 800ac50:	e003      	b.n	800ac5a <EE_WriteVariable+0xa2>
 800ac52:	3701      	adds	r7, #1
 800ac54:	b2bf      	uxth	r7, r7
 800ac56:	42b7      	cmp	r7, r6
 800ac58:	d00f      	beq.n	800ac7a <EE_WriteVariable+0xc2>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 800ac5a:	42bd      	cmp	r5, r7
 800ac5c:	d0f9      	beq.n	800ac52 <EE_WriteVariable+0x9a>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800ac5e:	4928      	ldr	r1, [pc, #160]	; (800ad00 <EE_WriteVariable+0x148>)
 800ac60:	0038      	movs	r0, r7
 800ac62:	f7ff ff79 	bl	800ab58 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 800ac66:	2801      	cmp	r0, #1
 800ac68:	d0f3      	beq.n	800ac52 <EE_WriteVariable+0x9a>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800ac6a:	4643      	mov	r3, r8
 800ac6c:	8819      	ldrh	r1, [r3, #0]
 800ac6e:	0038      	movs	r0, r7
 800ac70:	f7ff ff06 	bl	800aa80 <EE_VerifyPageFullWriteVariable>
 800ac74:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800ac76:	d0ec      	beq.n	800ac52 <EE_WriteVariable+0x9a>
 800ac78:	e7ae      	b.n	800abd8 <EE_WriteVariable+0x20>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 800ac7a:	4658      	mov	r0, fp
 800ac7c:	f006 fdc2 	bl	8011804 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ac80:	481c      	ldr	r0, [pc, #112]	; (800acf4 <EE_WriteVariable+0x13c>)
 800ac82:	f006 fd19 	bl	80116b8 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d003      	beq.n	800ac92 <EE_WriteVariable+0xda>
  {
    return pFlash.ErrorCode;
 800ac8a:	4b1b      	ldr	r3, [pc, #108]	; (800acf8 <EE_WriteVariable+0x140>)
 800ac8c:	69dc      	ldr	r4, [r3, #28]
 800ac8e:	b2a4      	uxth	r4, r4
 800ac90:	e7a2      	b.n	800abd8 <EE_WriteVariable+0x20>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800ac92:	2080      	movs	r0, #128	; 0x80
 800ac94:	0100      	lsls	r0, r0, #4
 800ac96:	4458      	add	r0, fp
 800ac98:	f006 fdb4 	bl	8011804 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ac9c:	4815      	ldr	r0, [pc, #84]	; (800acf4 <EE_WriteVariable+0x13c>)
 800ac9e:	f006 fd0b 	bl	80116b8 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d003      	beq.n	800acae <EE_WriteVariable+0xf6>
		{
			return pFlash.ErrorCode;
 800aca6:	4b14      	ldr	r3, [pc, #80]	; (800acf8 <EE_WriteVariable+0x140>)
 800aca8:	69dc      	ldr	r4, [r3, #28]
 800acaa:	b2a4      	uxth	r4, r4
 800acac:	e794      	b.n	800abd8 <EE_WriteVariable+0x20>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800acae:	4a13      	ldr	r2, [pc, #76]	; (800acfc <EE_WriteVariable+0x144>)
 800acb0:	6913      	ldr	r3, [r2, #16]
 800acb2:	2102      	movs	r1, #2
 800acb4:	438b      	bics	r3, r1
 800acb6:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 800acb8:	2200      	movs	r2, #0
 800acba:	2300      	movs	r3, #0
 800acbc:	9901      	ldr	r1, [sp, #4]
 800acbe:	2001      	movs	r0, #1
 800acc0:	f006 fd28 	bl	8011714 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800acc4:	480b      	ldr	r0, [pc, #44]	; (800acf4 <EE_WriteVariable+0x13c>)
 800acc6:	f006 fcf7 	bl	80116b8 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800acca:	2800      	cmp	r0, #0
 800accc:	d003      	beq.n	800acd6 <EE_WriteVariable+0x11e>
  {
    return pFlash.ErrorCode;
 800acce:	4b0a      	ldr	r3, [pc, #40]	; (800acf8 <EE_WriteVariable+0x140>)
 800acd0:	69dc      	ldr	r4, [r3, #28]
 800acd2:	b2a4      	uxth	r4, r4
 800acd4:	e780      	b.n	800abd8 <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800acd6:	4a09      	ldr	r2, [pc, #36]	; (800acfc <EE_WriteVariable+0x144>)
 800acd8:	6913      	ldr	r3, [r2, #16]
 800acda:	2101      	movs	r1, #1
 800acdc:	438b      	bics	r3, r1
 800acde:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 800ace0:	f006 fce0 	bl	80116a4 <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 800ace4:	2400      	movs	r4, #0
 800ace6:	e777      	b.n	800abd8 <EE_WriteVariable+0x20>
 800ace8:	0801e000 	.word	0x0801e000
 800acec:	0801f000 	.word	0x0801f000
 800acf0:	0000eeee 	.word	0x0000eeee
 800acf4:	0000c350 	.word	0x0000c350
 800acf8:	20006e68 	.word	0x20006e68
 800acfc:	40022000 	.word	0x40022000
 800ad00:	20001724 	.word	0x20001724
 800ad04:	00000401 	.word	0x00000401

0800ad08 <EE_Format>:
{
 800ad08:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800ad0a:	f006 fcb9 	bl	8011680 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 800ad0e:	4829      	ldr	r0, [pc, #164]	; (800adb4 <EE_Format+0xac>)
 800ad10:	f006 fd78 	bl	8011804 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad14:	4828      	ldr	r0, [pc, #160]	; (800adb8 <EE_Format+0xb0>)
 800ad16:	f006 fccf 	bl	80116b8 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d003      	beq.n	800ad26 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800ad1e:	4b27      	ldr	r3, [pc, #156]	; (800adbc <EE_Format+0xb4>)
 800ad20:	69d8      	ldr	r0, [r3, #28]
 800ad22:	b280      	uxth	r0, r0
}
 800ad24:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ad26:	4826      	ldr	r0, [pc, #152]	; (800adc0 <EE_Format+0xb8>)
 800ad28:	f006 fd6c 	bl	8011804 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad2c:	4822      	ldr	r0, [pc, #136]	; (800adb8 <EE_Format+0xb0>)
 800ad2e:	f006 fcc3 	bl	80116b8 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d003      	beq.n	800ad3e <EE_Format+0x36>
			return pFlash.ErrorCode;
 800ad36:	4b21      	ldr	r3, [pc, #132]	; (800adbc <EE_Format+0xb4>)
 800ad38:	69d8      	ldr	r0, [r3, #28]
 800ad3a:	b280      	uxth	r0, r0
 800ad3c:	e7f2      	b.n	800ad24 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ad3e:	4a21      	ldr	r2, [pc, #132]	; (800adc4 <EE_Format+0xbc>)
 800ad40:	6913      	ldr	r3, [r2, #16]
 800ad42:	2102      	movs	r1, #2
 800ad44:	438b      	bics	r3, r1
 800ad46:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	4919      	ldr	r1, [pc, #100]	; (800adb4 <EE_Format+0xac>)
 800ad4e:	2001      	movs	r0, #1
 800ad50:	f006 fce0 	bl	8011714 <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad54:	4818      	ldr	r0, [pc, #96]	; (800adb8 <EE_Format+0xb0>)
 800ad56:	f006 fcaf 	bl	80116b8 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d003      	beq.n	800ad66 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800ad5e:	4b17      	ldr	r3, [pc, #92]	; (800adbc <EE_Format+0xb4>)
 800ad60:	69d8      	ldr	r0, [r3, #28]
 800ad62:	b280      	uxth	r0, r0
 800ad64:	e7de      	b.n	800ad24 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ad66:	4a17      	ldr	r2, [pc, #92]	; (800adc4 <EE_Format+0xbc>)
 800ad68:	6913      	ldr	r3, [r2, #16]
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	438b      	bics	r3, r1
 800ad6e:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800ad70:	4815      	ldr	r0, [pc, #84]	; (800adc8 <EE_Format+0xc0>)
 800ad72:	f006 fd47 	bl	8011804 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad76:	4810      	ldr	r0, [pc, #64]	; (800adb8 <EE_Format+0xb0>)
 800ad78:	f006 fc9e 	bl	80116b8 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d003      	beq.n	800ad88 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800ad80:	4b0e      	ldr	r3, [pc, #56]	; (800adbc <EE_Format+0xb4>)
 800ad82:	69d8      	ldr	r0, [r3, #28]
 800ad84:	b280      	uxth	r0, r0
 800ad86:	e7cd      	b.n	800ad24 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800ad88:	4810      	ldr	r0, [pc, #64]	; (800adcc <EE_Format+0xc4>)
 800ad8a:	f006 fd3b 	bl	8011804 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ad8e:	480a      	ldr	r0, [pc, #40]	; (800adb8 <EE_Format+0xb0>)
 800ad90:	f006 fc92 	bl	80116b8 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d003      	beq.n	800ada0 <EE_Format+0x98>
			return pFlash.ErrorCode;
 800ad98:	4b08      	ldr	r3, [pc, #32]	; (800adbc <EE_Format+0xb4>)
 800ad9a:	69d8      	ldr	r0, [r3, #28]
 800ad9c:	b280      	uxth	r0, r0
 800ad9e:	e7c1      	b.n	800ad24 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ada0:	4a08      	ldr	r2, [pc, #32]	; (800adc4 <EE_Format+0xbc>)
 800ada2:	6913      	ldr	r3, [r2, #16]
 800ada4:	2101      	movs	r1, #1
 800ada6:	438b      	bics	r3, r1
 800ada8:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800adaa:	f006 fc7b 	bl	80116a4 <HAL_FLASH_Lock>
  return FlashStatus;
 800adae:	2000      	movs	r0, #0
 800adb0:	e7b8      	b.n	800ad24 <EE_Format+0x1c>
 800adb2:	46c0      	nop			; (mov r8, r8)
 800adb4:	0801e000 	.word	0x0801e000
 800adb8:	0000c350 	.word	0x0000c350
 800adbc:	20006e68 	.word	0x20006e68
 800adc0:	0801e800 	.word	0x0801e800
 800adc4:	40022000 	.word	0x40022000
 800adc8:	0801f000 	.word	0x0801f000
 800adcc:	0801f800 	.word	0x0801f800

0800add0 <EE_Init>:
{
 800add0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add2:	46c6      	mov	lr, r8
 800add4:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 800add6:	f006 fc53 	bl	8011680 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800adda:	4bbe      	ldr	r3, [pc, #760]	; (800b0d4 <EE_Init+0x304>)
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800ade0:	4abd      	ldr	r2, [pc, #756]	; (800b0d8 <EE_Init+0x308>)
 800ade2:	8812      	ldrh	r2, [r2, #0]
 800ade4:	b292      	uxth	r2, r2
  switch (PageStatusA)
 800ade6:	49bd      	ldr	r1, [pc, #756]	; (800b0dc <EE_Init+0x30c>)
 800ade8:	428b      	cmp	r3, r1
 800adea:	d100      	bne.n	800adee <EE_Init+0x1e>
 800adec:	e074      	b.n	800aed8 <EE_Init+0x108>
 800adee:	49bc      	ldr	r1, [pc, #752]	; (800b0e0 <EE_Init+0x310>)
 800adf0:	428b      	cmp	r3, r1
 800adf2:	d011      	beq.n	800ae18 <EE_Init+0x48>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d100      	bne.n	800adfa <EE_Init+0x2a>
 800adf8:	e109      	b.n	800b00e <EE_Init+0x23e>
      FlashStatus = EE_Format();
 800adfa:	f7ff ff85 	bl	800ad08 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800adfe:	48b9      	ldr	r0, [pc, #740]	; (800b0e4 <EE_Init+0x314>)
 800ae00:	f006 fc5a 	bl	80116b8 <FLASH_WaitForLastOperation>
 800ae04:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 800ae06:	2e00      	cmp	r6, #0
 800ae08:	d102      	bne.n	800ae10 <EE_Init+0x40>
	HAL_FLASH_Lock();
 800ae0a:	f006 fc4b 	bl	80116a4 <HAL_FLASH_Lock>
  return HAL_OK;
 800ae0e:	2600      	movs	r6, #0
}
 800ae10:	0030      	movs	r0, r6
 800ae12:	bc04      	pop	{r2}
 800ae14:	4690      	mov	r8, r2
 800ae16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800ae18:	2a00      	cmp	r2, #0
 800ae1a:	d00d      	beq.n	800ae38 <EE_Init+0x68>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800ae1c:	4baf      	ldr	r3, [pc, #700]	; (800b0dc <EE_Init+0x30c>)
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d028      	beq.n	800ae74 <EE_Init+0xa4>
        FlashStatus = EE_Format();
 800ae22:	f7ff ff71 	bl	800ad08 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ae26:	48af      	ldr	r0, [pc, #700]	; (800b0e4 <EE_Init+0x314>)
 800ae28:	f006 fc46 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d0ec      	beq.n	800ae0a <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800ae30:	4bad      	ldr	r3, [pc, #692]	; (800b0e8 <EE_Init+0x318>)
 800ae32:	69de      	ldr	r6, [r3, #28]
 800ae34:	b2b6      	uxth	r6, r6
 800ae36:	e7eb      	b.n	800ae10 <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 800ae38:	48a6      	ldr	r0, [pc, #664]	; (800b0d4 <EE_Init+0x304>)
 800ae3a:	f006 fce3 	bl	8011804 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ae3e:	48a9      	ldr	r0, [pc, #676]	; (800b0e4 <EE_Init+0x314>)
 800ae40:	f006 fc3a 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d003      	beq.n	800ae50 <EE_Init+0x80>
          return pFlash.ErrorCode;
 800ae48:	4ba7      	ldr	r3, [pc, #668]	; (800b0e8 <EE_Init+0x318>)
 800ae4a:	69de      	ldr	r6, [r3, #28]
 800ae4c:	b2b6      	uxth	r6, r6
 800ae4e:	e7df      	b.n	800ae10 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ae50:	48a6      	ldr	r0, [pc, #664]	; (800b0ec <EE_Init+0x31c>)
 800ae52:	f006 fcd7 	bl	8011804 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ae56:	48a3      	ldr	r0, [pc, #652]	; (800b0e4 <EE_Init+0x314>)
 800ae58:	f006 fc2e 	bl	80116b8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d105      	bne.n	800ae6c <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ae60:	4aa3      	ldr	r2, [pc, #652]	; (800b0f0 <EE_Init+0x320>)
 800ae62:	6913      	ldr	r3, [r2, #16]
 800ae64:	2102      	movs	r1, #2
 800ae66:	438b      	bics	r3, r1
 800ae68:	6113      	str	r3, [r2, #16]
 800ae6a:	e7ce      	b.n	800ae0a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800ae6c:	4b9e      	ldr	r3, [pc, #632]	; (800b0e8 <EE_Init+0x318>)
 800ae6e:	69de      	ldr	r6, [r3, #28]
 800ae70:	b2b6      	uxth	r6, r6
 800ae72:	e7cd      	b.n	800ae10 <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ae74:	4897      	ldr	r0, [pc, #604]	; (800b0d4 <EE_Init+0x304>)
 800ae76:	f006 fcc5 	bl	8011804 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ae7a:	489a      	ldr	r0, [pc, #616]	; (800b0e4 <EE_Init+0x314>)
 800ae7c:	f006 fc1c 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d003      	beq.n	800ae8c <EE_Init+0xbc>
          return pFlash.ErrorCode;
 800ae84:	4b98      	ldr	r3, [pc, #608]	; (800b0e8 <EE_Init+0x318>)
 800ae86:	69de      	ldr	r6, [r3, #28]
 800ae88:	b2b6      	uxth	r6, r6
 800ae8a:	e7c1      	b.n	800ae10 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ae8c:	4897      	ldr	r0, [pc, #604]	; (800b0ec <EE_Init+0x31c>)
 800ae8e:	f006 fcb9 	bl	8011804 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800ae92:	4894      	ldr	r0, [pc, #592]	; (800b0e4 <EE_Init+0x314>)
 800ae94:	f006 fc10 	bl	80116b8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d003      	beq.n	800aea4 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 800ae9c:	4b92      	ldr	r3, [pc, #584]	; (800b0e8 <EE_Init+0x318>)
 800ae9e:	69de      	ldr	r6, [r3, #28]
 800aea0:	b2b6      	uxth	r6, r6
 800aea2:	e7b5      	b.n	800ae10 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800aea4:	4a92      	ldr	r2, [pc, #584]	; (800b0f0 <EE_Init+0x320>)
 800aea6:	6913      	ldr	r3, [r2, #16]
 800aea8:	2102      	movs	r1, #2
 800aeaa:	438b      	bics	r3, r1
 800aeac:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4989      	ldr	r1, [pc, #548]	; (800b0d8 <EE_Init+0x308>)
 800aeb4:	2001      	movs	r0, #1
 800aeb6:	f006 fc2d 	bl	8011714 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aeba:	488a      	ldr	r0, [pc, #552]	; (800b0e4 <EE_Init+0x314>)
 800aebc:	f006 fbfc 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d105      	bne.n	800aed0 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800aec4:	4a8a      	ldr	r2, [pc, #552]	; (800b0f0 <EE_Init+0x320>)
 800aec6:	6913      	ldr	r3, [r2, #16]
 800aec8:	2101      	movs	r1, #1
 800aeca:	438b      	bics	r3, r1
 800aecc:	6113      	str	r3, [r2, #16]
 800aece:	e79c      	b.n	800ae0a <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800aed0:	4b85      	ldr	r3, [pc, #532]	; (800b0e8 <EE_Init+0x318>)
 800aed2:	69de      	ldr	r6, [r3, #28]
 800aed4:	b2b6      	uxth	r6, r6
 800aed6:	e79b      	b.n	800ae10 <EE_Init+0x40>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d157      	bne.n	800af8c <EE_Init+0x1bc>
 800aedc:	2401      	movs	r4, #1
  int16_t x = -1;
 800aede:	2701      	movs	r7, #1
 800aee0:	427f      	negs	r7, r7
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 800aee2:	4d84      	ldr	r5, [pc, #528]	; (800b0f4 <EE_Init+0x324>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800aee4:	4b84      	ldr	r3, [pc, #528]	; (800b0f8 <EE_Init+0x328>)
 800aee6:	4698      	mov	r8, r3
 800aee8:	e005      	b.n	800aef6 <EE_Init+0x126>
            x = VarIdx;
 800aeea:	b227      	sxth	r7, r4
 800aeec:	e008      	b.n	800af00 <EE_Init+0x130>
 800aeee:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800aef0:	4b82      	ldr	r3, [pc, #520]	; (800b0fc <EE_Init+0x32c>)
 800aef2:	429c      	cmp	r4, r3
 800aef4:	d018      	beq.n	800af28 <EE_Init+0x158>
 800aef6:	b2a6      	uxth	r6, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 800aef8:	882b      	ldrh	r3, [r5, #0]
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	42b3      	cmp	r3, r6
 800aefe:	d0f4      	beq.n	800aeea <EE_Init+0x11a>
          if (VarIdx != x)
 800af00:	42bc      	cmp	r4, r7
 800af02:	d0f4      	beq.n	800aeee <EE_Init+0x11e>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800af04:	497c      	ldr	r1, [pc, #496]	; (800b0f8 <EE_Init+0x328>)
 800af06:	0030      	movs	r0, r6
 800af08:	f7ff fe26 	bl	800ab58 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 800af0c:	2801      	cmp	r0, #1
 800af0e:	d0ee      	beq.n	800aeee <EE_Init+0x11e>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800af10:	4643      	mov	r3, r8
 800af12:	8819      	ldrh	r1, [r3, #0]
 800af14:	0030      	movs	r0, r6
 800af16:	f7ff fdb3 	bl	800aa80 <EE_VerifyPageFullWriteVariable>
 800af1a:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800af1c:	4871      	ldr	r0, [pc, #452]	; (800b0e4 <EE_Init+0x314>)
 800af1e:	f006 fbcb 	bl	80116b8 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 800af22:	2800      	cmp	r0, #0
 800af24:	d0e3      	beq.n	800aeee <EE_Init+0x11e>
 800af26:	e773      	b.n	800ae10 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800af28:	2200      	movs	r2, #0
 800af2a:	2300      	movs	r3, #0
 800af2c:	4969      	ldr	r1, [pc, #420]	; (800b0d4 <EE_Init+0x304>)
 800af2e:	2001      	movs	r0, #1
 800af30:	f006 fbf0 	bl	8011714 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800af34:	486b      	ldr	r0, [pc, #428]	; (800b0e4 <EE_Init+0x314>)
 800af36:	f006 fbbf 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d003      	beq.n	800af46 <EE_Init+0x176>
          return pFlash.ErrorCode;
 800af3e:	4b6a      	ldr	r3, [pc, #424]	; (800b0e8 <EE_Init+0x318>)
 800af40:	69de      	ldr	r6, [r3, #28]
 800af42:	b2b6      	uxth	r6, r6
 800af44:	e764      	b.n	800ae10 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800af46:	4a6a      	ldr	r2, [pc, #424]	; (800b0f0 <EE_Init+0x320>)
 800af48:	6913      	ldr	r3, [r2, #16]
 800af4a:	2101      	movs	r1, #1
 800af4c:	438b      	bics	r3, r1
 800af4e:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800af50:	4861      	ldr	r0, [pc, #388]	; (800b0d8 <EE_Init+0x308>)
 800af52:	f006 fc57 	bl	8011804 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800af56:	4863      	ldr	r0, [pc, #396]	; (800b0e4 <EE_Init+0x314>)
 800af58:	f006 fbae 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d003      	beq.n	800af68 <EE_Init+0x198>
          return pFlash.ErrorCode;
 800af60:	4b61      	ldr	r3, [pc, #388]	; (800b0e8 <EE_Init+0x318>)
 800af62:	69de      	ldr	r6, [r3, #28]
 800af64:	b2b6      	uxth	r6, r6
 800af66:	e753      	b.n	800ae10 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800af68:	4865      	ldr	r0, [pc, #404]	; (800b100 <EE_Init+0x330>)
 800af6a:	f006 fc4b 	bl	8011804 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800af6e:	485d      	ldr	r0, [pc, #372]	; (800b0e4 <EE_Init+0x314>)
 800af70:	f006 fba2 	bl	80116b8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800af74:	2800      	cmp	r0, #0
 800af76:	d105      	bne.n	800af84 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800af78:	4a5d      	ldr	r2, [pc, #372]	; (800b0f0 <EE_Init+0x320>)
 800af7a:	6913      	ldr	r3, [r2, #16]
 800af7c:	2102      	movs	r1, #2
 800af7e:	438b      	bics	r3, r1
 800af80:	6113      	str	r3, [r2, #16]
 800af82:	e742      	b.n	800ae0a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800af84:	4b58      	ldr	r3, [pc, #352]	; (800b0e8 <EE_Init+0x318>)
 800af86:	69de      	ldr	r6, [r3, #28]
 800af88:	b2b6      	uxth	r6, r6
 800af8a:	e741      	b.n	800ae10 <EE_Init+0x40>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 800af8c:	4b54      	ldr	r3, [pc, #336]	; (800b0e0 <EE_Init+0x310>)
 800af8e:	429a      	cmp	r2, r3
 800af90:	d00b      	beq.n	800afaa <EE_Init+0x1da>
        FlashStatus = EE_Format();
 800af92:	f7ff feb9 	bl	800ad08 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800af96:	4853      	ldr	r0, [pc, #332]	; (800b0e4 <EE_Init+0x314>)
 800af98:	f006 fb8e 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800af9c:	2800      	cmp	r0, #0
 800af9e:	d100      	bne.n	800afa2 <EE_Init+0x1d2>
 800afa0:	e733      	b.n	800ae0a <EE_Init+0x3a>
          return pFlash.ErrorCode;
 800afa2:	4b51      	ldr	r3, [pc, #324]	; (800b0e8 <EE_Init+0x318>)
 800afa4:	69de      	ldr	r6, [r3, #28]
 800afa6:	b2b6      	uxth	r6, r6
 800afa8:	e732      	b.n	800ae10 <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800afaa:	484b      	ldr	r0, [pc, #300]	; (800b0d8 <EE_Init+0x308>)
 800afac:	f006 fc2a 	bl	8011804 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800afb0:	484c      	ldr	r0, [pc, #304]	; (800b0e4 <EE_Init+0x314>)
 800afb2:	f006 fb81 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d003      	beq.n	800afc2 <EE_Init+0x1f2>
          return pFlash.ErrorCode;
 800afba:	4b4b      	ldr	r3, [pc, #300]	; (800b0e8 <EE_Init+0x318>)
 800afbc:	69de      	ldr	r6, [r3, #28]
 800afbe:	b2b6      	uxth	r6, r6
 800afc0:	e726      	b.n	800ae10 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800afc2:	484f      	ldr	r0, [pc, #316]	; (800b100 <EE_Init+0x330>)
 800afc4:	f006 fc1e 	bl	8011804 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800afc8:	4846      	ldr	r0, [pc, #280]	; (800b0e4 <EE_Init+0x314>)
 800afca:	f006 fb75 	bl	80116b8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800afce:	2800      	cmp	r0, #0
 800afd0:	d003      	beq.n	800afda <EE_Init+0x20a>
						return pFlash.ErrorCode;
 800afd2:	4b45      	ldr	r3, [pc, #276]	; (800b0e8 <EE_Init+0x318>)
 800afd4:	69de      	ldr	r6, [r3, #28]
 800afd6:	b2b6      	uxth	r6, r6
 800afd8:	e71a      	b.n	800ae10 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800afda:	4a45      	ldr	r2, [pc, #276]	; (800b0f0 <EE_Init+0x320>)
 800afdc:	6913      	ldr	r3, [r2, #16]
 800afde:	2102      	movs	r1, #2
 800afe0:	438b      	bics	r3, r1
 800afe2:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800afe4:	2200      	movs	r2, #0
 800afe6:	2300      	movs	r3, #0
 800afe8:	493a      	ldr	r1, [pc, #232]	; (800b0d4 <EE_Init+0x304>)
 800afea:	2001      	movs	r0, #1
 800afec:	f006 fb92 	bl	8011714 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800aff0:	483c      	ldr	r0, [pc, #240]	; (800b0e4 <EE_Init+0x314>)
 800aff2:	f006 fb61 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d003      	beq.n	800b002 <EE_Init+0x232>
          return pFlash.ErrorCode;
 800affa:	4b3b      	ldr	r3, [pc, #236]	; (800b0e8 <EE_Init+0x318>)
 800affc:	69de      	ldr	r6, [r3, #28]
 800affe:	b2b6      	uxth	r6, r6
 800b000:	e706      	b.n	800ae10 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b002:	4a3b      	ldr	r2, [pc, #236]	; (800b0f0 <EE_Init+0x320>)
 800b004:	6913      	ldr	r3, [r2, #16]
 800b006:	2101      	movs	r1, #1
 800b008:	438b      	bics	r3, r1
 800b00a:	6113      	str	r3, [r2, #16]
 800b00c:	e6fd      	b.n	800ae0a <EE_Init+0x3a>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800b00e:	2a00      	cmp	r2, #0
 800b010:	d009      	beq.n	800b026 <EE_Init+0x256>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 800b012:	4b33      	ldr	r3, [pc, #204]	; (800b0e0 <EE_Init+0x310>)
 800b014:	429a      	cmp	r2, r3
 800b016:	d010      	beq.n	800b03a <EE_Init+0x26a>
 800b018:	2401      	movs	r4, #1
  int16_t x = -1;
 800b01a:	2701      	movs	r7, #1
 800b01c:	427f      	negs	r7, r7
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 800b01e:	4d39      	ldr	r5, [pc, #228]	; (800b104 <EE_Init+0x334>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800b020:	4b35      	ldr	r3, [pc, #212]	; (800b0f8 <EE_Init+0x328>)
 800b022:	4698      	mov	r8, r3
 800b024:	e02d      	b.n	800b082 <EE_Init+0x2b2>
        FlashStatus = EE_Format();
 800b026:	f7ff fe6f 	bl	800ad08 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b02a:	482e      	ldr	r0, [pc, #184]	; (800b0e4 <EE_Init+0x314>)
 800b02c:	f006 fb44 	bl	80116b8 <FLASH_WaitForLastOperation>
 800b030:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 800b032:	2e00      	cmp	r6, #0
 800b034:	d100      	bne.n	800b038 <EE_Init+0x268>
 800b036:	e6e8      	b.n	800ae0a <EE_Init+0x3a>
 800b038:	e6ea      	b.n	800ae10 <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b03a:	4827      	ldr	r0, [pc, #156]	; (800b0d8 <EE_Init+0x308>)
 800b03c:	f006 fbe2 	bl	8011804 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b040:	4828      	ldr	r0, [pc, #160]	; (800b0e4 <EE_Init+0x314>)
 800b042:	f006 fb39 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800b046:	2800      	cmp	r0, #0
 800b048:	d003      	beq.n	800b052 <EE_Init+0x282>
          return pFlash.ErrorCode;
 800b04a:	4b27      	ldr	r3, [pc, #156]	; (800b0e8 <EE_Init+0x318>)
 800b04c:	69de      	ldr	r6, [r3, #28]
 800b04e:	b2b6      	uxth	r6, r6
 800b050:	e6de      	b.n	800ae10 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b052:	482b      	ldr	r0, [pc, #172]	; (800b100 <EE_Init+0x330>)
 800b054:	f006 fbd6 	bl	8011804 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b058:	4822      	ldr	r0, [pc, #136]	; (800b0e4 <EE_Init+0x314>)
 800b05a:	f006 fb2d 	bl	80116b8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800b05e:	2800      	cmp	r0, #0
 800b060:	d105      	bne.n	800b06e <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b062:	4a23      	ldr	r2, [pc, #140]	; (800b0f0 <EE_Init+0x320>)
 800b064:	6913      	ldr	r3, [r2, #16]
 800b066:	2102      	movs	r1, #2
 800b068:	438b      	bics	r3, r1
 800b06a:	6113      	str	r3, [r2, #16]
 800b06c:	e6cd      	b.n	800ae0a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800b06e:	4b1e      	ldr	r3, [pc, #120]	; (800b0e8 <EE_Init+0x318>)
 800b070:	69de      	ldr	r6, [r3, #28]
 800b072:	b2b6      	uxth	r6, r6
 800b074:	e6cc      	b.n	800ae10 <EE_Init+0x40>
            x = VarIdx;
 800b076:	b227      	sxth	r7, r4
 800b078:	e008      	b.n	800b08c <EE_Init+0x2bc>
 800b07a:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800b07c:	4b1f      	ldr	r3, [pc, #124]	; (800b0fc <EE_Init+0x32c>)
 800b07e:	429c      	cmp	r4, r3
 800b080:	d018      	beq.n	800b0b4 <EE_Init+0x2e4>
 800b082:	b2a6      	uxth	r6, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 800b084:	882b      	ldrh	r3, [r5, #0]
 800b086:	b29b      	uxth	r3, r3
 800b088:	42b3      	cmp	r3, r6
 800b08a:	d0f4      	beq.n	800b076 <EE_Init+0x2a6>
          if (VarIdx != x)
 800b08c:	42bc      	cmp	r4, r7
 800b08e:	d0f4      	beq.n	800b07a <EE_Init+0x2aa>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 800b090:	4919      	ldr	r1, [pc, #100]	; (800b0f8 <EE_Init+0x328>)
 800b092:	0030      	movs	r0, r6
 800b094:	f7ff fd60 	bl	800ab58 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 800b098:	2801      	cmp	r0, #1
 800b09a:	d0ee      	beq.n	800b07a <EE_Init+0x2aa>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800b09c:	4643      	mov	r3, r8
 800b09e:	8819      	ldrh	r1, [r3, #0]
 800b0a0:	0030      	movs	r0, r6
 800b0a2:	f7ff fced 	bl	800aa80 <EE_VerifyPageFullWriteVariable>
 800b0a6:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b0a8:	480e      	ldr	r0, [pc, #56]	; (800b0e4 <EE_Init+0x314>)
 800b0aa:	f006 fb05 	bl	80116b8 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d0e3      	beq.n	800b07a <EE_Init+0x2aa>
 800b0b2:	e6ad      	b.n	800ae10 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	4907      	ldr	r1, [pc, #28]	; (800b0d8 <EE_Init+0x308>)
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	f006 fb2a 	bl	8011714 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b0c0:	4808      	ldr	r0, [pc, #32]	; (800b0e4 <EE_Init+0x314>)
 800b0c2:	f006 faf9 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d01e      	beq.n	800b108 <EE_Init+0x338>
          return pFlash.ErrorCode;
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <EE_Init+0x318>)
 800b0cc:	69de      	ldr	r6, [r3, #28]
 800b0ce:	b2b6      	uxth	r6, r6
 800b0d0:	e69e      	b.n	800ae10 <EE_Init+0x40>
 800b0d2:	46c0      	nop			; (mov r8, r8)
 800b0d4:	0801e000 	.word	0x0801e000
 800b0d8:	0801f000 	.word	0x0801f000
 800b0dc:	0000eeee 	.word	0x0000eeee
 800b0e0:	0000ffff 	.word	0x0000ffff
 800b0e4:	0000c350 	.word	0x0000c350
 800b0e8:	20006e68 	.word	0x20006e68
 800b0ec:	0801e800 	.word	0x0801e800
 800b0f0:	40022000 	.word	0x40022000
 800b0f4:	0801e006 	.word	0x0801e006
 800b0f8:	20001724 	.word	0x20001724
 800b0fc:	00000401 	.word	0x00000401
 800b100:	0801f800 	.word	0x0801f800
 800b104:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b108:	4a11      	ldr	r2, [pc, #68]	; (800b150 <EE_Init+0x380>)
 800b10a:	6913      	ldr	r3, [r2, #16]
 800b10c:	2101      	movs	r1, #1
 800b10e:	438b      	bics	r3, r1
 800b110:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b112:	4810      	ldr	r0, [pc, #64]	; (800b154 <EE_Init+0x384>)
 800b114:	f006 fb76 	bl	8011804 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b118:	480f      	ldr	r0, [pc, #60]	; (800b158 <EE_Init+0x388>)
 800b11a:	f006 facd 	bl	80116b8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800b11e:	2800      	cmp	r0, #0
 800b120:	d003      	beq.n	800b12a <EE_Init+0x35a>
          return pFlash.ErrorCode;
 800b122:	4b0e      	ldr	r3, [pc, #56]	; (800b15c <EE_Init+0x38c>)
 800b124:	69de      	ldr	r6, [r3, #28]
 800b126:	b2b6      	uxth	r6, r6
 800b128:	e672      	b.n	800ae10 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b12a:	480d      	ldr	r0, [pc, #52]	; (800b160 <EE_Init+0x390>)
 800b12c:	f006 fb6a 	bl	8011804 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b130:	4809      	ldr	r0, [pc, #36]	; (800b158 <EE_Init+0x388>)
 800b132:	f006 fac1 	bl	80116b8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 800b136:	2800      	cmp	r0, #0
 800b138:	d105      	bne.n	800b146 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b13a:	4a05      	ldr	r2, [pc, #20]	; (800b150 <EE_Init+0x380>)
 800b13c:	6913      	ldr	r3, [r2, #16]
 800b13e:	2102      	movs	r1, #2
 800b140:	438b      	bics	r3, r1
 800b142:	6113      	str	r3, [r2, #16]
 800b144:	e661      	b.n	800ae0a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800b146:	4b05      	ldr	r3, [pc, #20]	; (800b15c <EE_Init+0x38c>)
 800b148:	69de      	ldr	r6, [r3, #28]
 800b14a:	b2b6      	uxth	r6, r6
 800b14c:	e660      	b.n	800ae10 <EE_Init+0x40>
 800b14e:	46c0      	nop			; (mov r8, r8)
 800b150:	40022000 	.word	0x40022000
 800b154:	0801e000 	.word	0x0801e000
 800b158:	0000c350 	.word	0x0000c350
 800b15c:	20006e68 	.word	0x20006e68
 800b160:	0801e800 	.word	0x0801e800

0800b164 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 800b164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b166:	46c6      	mov	lr, r8
 800b168:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 800b16a:	4c2b      	ldr	r4, [pc, #172]	; (800b218 <StartDefaultTask+0xb4>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 800b16c:	46a0      	mov	r8, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 800b16e:	0027      	movs	r7, r4
 800b170:	e020      	b.n	800b1b4 <StartDefaultTask+0x50>
				RTOS_IND_blink(200);
 800b172:	2680      	movs	r6, #128	; 0x80
 800b174:	0136      	lsls	r6, r6, #4
 800b176:	2590      	movs	r5, #144	; 0x90
 800b178:	05ed      	lsls	r5, r5, #23
 800b17a:	2201      	movs	r2, #1
 800b17c:	0031      	movs	r1, r6
 800b17e:	0028      	movs	r0, r5
 800b180:	f006 fc98 	bl	8011ab4 <HAL_GPIO_WritePin>
 800b184:	20c8      	movs	r0, #200	; 0xc8
 800b186:	f003 fb9e 	bl	800e8c6 <osDelay>
 800b18a:	2200      	movs	r2, #0
 800b18c:	0031      	movs	r1, r6
 800b18e:	0028      	movs	r0, r5
 800b190:	f006 fc90 	bl	8011ab4 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800b194:	4b20      	ldr	r3, [pc, #128]	; (800b218 <StartDefaultTask+0xb4>)
 800b196:	2200      	movs	r2, #0
 800b198:	701a      	strb	r2, [r3, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 800b19a:	f7fa f9fb 	bl	8005594 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 800b19e:	f7ff fb3b 	bl	800a818 <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 800b1a2:	4b1e      	ldr	r3, [pc, #120]	; (800b21c <StartDefaultTask+0xb8>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <StartDefaultTask+0x4c>
 800b1aa:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <StartDefaultTask+0xbc>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 800b1b0:	f005 fa36 	bl	8010620 <vPortYield>
		switch (indMode)
 800b1b4:	7823      	ldrb	r3, [r4, #0]
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d004      	beq.n	800b1c4 <StartDefaultTask+0x60>
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	d017      	beq.n	800b1ee <StartDefaultTask+0x8a>
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d1eb      	bne.n	800b19a <StartDefaultTask+0x36>
 800b1c2:	e7d6      	b.n	800b172 <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 800b1c4:	2680      	movs	r6, #128	; 0x80
 800b1c6:	0136      	lsls	r6, r6, #4
 800b1c8:	2590      	movs	r5, #144	; 0x90
 800b1ca:	05ed      	lsls	r5, r5, #23
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	0031      	movs	r1, r6
 800b1d0:	0028      	movs	r0, r5
 800b1d2:	f006 fc6f 	bl	8011ab4 <HAL_GPIO_WritePin>
 800b1d6:	2064      	movs	r0, #100	; 0x64
 800b1d8:	f003 fb75 	bl	800e8c6 <osDelay>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	0031      	movs	r1, r6
 800b1e0:	0028      	movs	r0, r5
 800b1e2:	f006 fc67 	bl	8011ab4 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	7013      	strb	r3, [r2, #0]
				break;
 800b1ec:	e7d5      	b.n	800b19a <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 800b1ee:	2680      	movs	r6, #128	; 0x80
 800b1f0:	0136      	lsls	r6, r6, #4
 800b1f2:	2590      	movs	r5, #144	; 0x90
 800b1f4:	05ed      	lsls	r5, r5, #23
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	0031      	movs	r1, r6
 800b1fa:	0028      	movs	r0, r5
 800b1fc:	f006 fc5a 	bl	8011ab4 <HAL_GPIO_WritePin>
 800b200:	201e      	movs	r0, #30
 800b202:	f003 fb60 	bl	800e8c6 <osDelay>
 800b206:	2200      	movs	r2, #0
 800b208:	0031      	movs	r1, r6
 800b20a:	0028      	movs	r0, r5
 800b20c:	f006 fc52 	bl	8011ab4 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800b210:	2300      	movs	r3, #0
 800b212:	703b      	strb	r3, [r7, #0]
				break;
 800b214:	e7c1      	b.n	800b19a <StartDefaultTask+0x36>
 800b216:	46c0      	nop			; (mov r8, r8)
 800b218:	2000100a 	.word	0x2000100a
 800b21c:	20001299 	.word	0x20001299
 800b220:	20000f6f 	.word	0x20000f6f

0800b224 <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 800b224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b226:	46de      	mov	lr, fp
 800b228:	4657      	mov	r7, sl
 800b22a:	464e      	mov	r6, r9
 800b22c:	4645      	mov	r5, r8
 800b22e:	b5e0      	push	{r5, r6, r7, lr}
 800b230:	b089      	sub	sp, #36	; 0x24
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	469b      	mov	fp, r3

						/* A.5.1. Copy the packet to message buffer */	
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
						} else {				// Message wraps around
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 800b236:	4bd6      	ldr	r3, [pc, #856]	; (800b590 <BackEndTask+0x36c>)
 800b238:	3b70      	subs	r3, #112	; 0x70
 800b23a:	9306      	str	r3, [sp, #24]
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 800b23c:	4bd4      	ldr	r3, [pc, #848]	; (800b590 <BackEndTask+0x36c>)
 800b23e:	3b70      	subs	r3, #112	; 0x70
 800b240:	9307      	str	r3, [sp, #28]
 800b242:	46d9      	mov	r9, fp
 800b244:	e1c4      	b.n	800b5d0 <BackEndTask+0x3ac>
 800b246:	1ebb      	subs	r3, r7, #2
 800b248:	001a      	movs	r2, r3
 800b24a:	9303      	str	r3, [sp, #12]
 800b24c:	4bd1      	ldr	r3, [pc, #836]	; (800b594 <BackEndTask+0x370>)
 800b24e:	4692      	mov	sl, r2
 800b250:	449a      	add	sl, r3
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800b252:	4653      	mov	r3, sl
 800b254:	781a      	ldrb	r2, [r3, #0]
 800b256:	2a3f      	cmp	r2, #63	; 0x3f
 800b258:	dc17      	bgt.n	800b28a <BackEndTask+0x66>
							if (BOS.disableCLI == false)
 800b25a:	4bcf      	ldr	r3, [pc, #828]	; (800b598 <BackEndTask+0x374>)
 800b25c:	7edb      	ldrb	r3, [r3, #27]
 800b25e:	469c      	mov	ip, r3
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800b260:	0013      	movs	r3, r2
							if (BOS.disableCLI == false)
 800b262:	2100      	movs	r1, #0
 800b264:	e004      	b.n	800b270 <BackEndTask+0x4c>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800b266:	2b3f      	cmp	r3, #63	; 0x3f
 800b268:	d023      	beq.n	800b2b2 <BackEndTask+0x8e>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800b26a:	3301      	adds	r3, #1
 800b26c:	2b40      	cmp	r3, #64	; 0x40
 800b26e:	d009      	beq.n	800b284 <BackEndTask+0x60>
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 800b270:	2b3e      	cmp	r3, #62	; 0x3e
 800b272:	dcf8      	bgt.n	800b266 <BackEndTask+0x42>
 800b274:	5cf0      	ldrb	r0, [r6, r3]
 800b276:	2848      	cmp	r0, #72	; 0x48
 800b278:	d1f5      	bne.n	800b266 <BackEndTask+0x42>
 800b27a:	18f0      	adds	r0, r6, r3
 800b27c:	7840      	ldrb	r0, [r0, #1]
 800b27e:	285a      	cmp	r0, #90	; 0x5a
 800b280:	d1f1      	bne.n	800b266 <BackEndTask+0x42>
 800b282:	4699      	mov	r9, r3
				if (emptyBuffer) {	
 800b284:	2900      	cmp	r1, #0
 800b286:	d000      	beq.n	800b28a <BackEndTask+0x66>
 800b288:	e167      	b.n	800b55a <BackEndTask+0x336>
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 800b28a:	464b      	mov	r3, r9
 800b28c:	2b3d      	cmp	r3, #61	; 0x3d
 800b28e:	d051      	beq.n	800b334 <BackEndTask+0x110>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 800b290:	2b3e      	cmp	r3, #62	; 0x3e
 800b292:	d100      	bne.n	800b296 <BackEndTask+0x72>
 800b294:	e0aa      	b.n	800b3ec <BackEndTask+0x1c8>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 800b296:	2b3f      	cmp	r3, #63	; 0x3f
 800b298:	d100      	bne.n	800b29c <BackEndTask+0x78>
 800b29a:	e0ac      	b.n	800b3f6 <BackEndTask+0x1d2>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 800b29c:	9b03      	ldr	r3, [sp, #12]
 800b29e:	019a      	lsls	r2, r3, #6
 800b2a0:	4bbe      	ldr	r3, [pc, #760]	; (800b59c <BackEndTask+0x378>)
 800b2a2:	189b      	adds	r3, r3, r2
 800b2a4:	444b      	add	r3, r9
 800b2a6:	789b      	ldrb	r3, [r3, #2]
 800b2a8:	9301      	str	r3, [sp, #4]
					parseStart = packetStart+3;
 800b2aa:	464b      	mov	r3, r9
 800b2ac:	3303      	adds	r3, #3
 800b2ae:	9304      	str	r3, [sp, #16]
 800b2b0:	e046      	b.n	800b340 <BackEndTask+0x11c>
 800b2b2:	9601      	str	r6, [sp, #4]
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800b2b4:	203f      	movs	r0, #63	; 0x3f
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	44b0      	add	r8, r6
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	7800      	ldrb	r0, [r0, #0]
 800b2be:	2848      	cmp	r0, #72	; 0x48
 800b2c0:	d005      	beq.n	800b2ce <BackEndTask+0xaa>
							if (BOS.disableCLI == false)
 800b2c2:	4663      	mov	r3, ip
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d000      	beq.n	800b2ca <BackEndTask+0xa6>
 800b2c8:	e147      	b.n	800b55a <BackEndTask+0x336>
 800b2ca:	9801      	ldr	r0, [sp, #4]
 800b2cc:	e00d      	b.n	800b2ea <BackEndTask+0xc6>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800b2ce:	7830      	ldrb	r0, [r6, #0]
 800b2d0:	285a      	cmp	r0, #90	; 0x5a
 800b2d2:	d1f6      	bne.n	800b2c2 <BackEndTask+0x9e>
				if (emptyBuffer) {	
 800b2d4:	2900      	cmp	r1, #0
 800b2d6:	d100      	bne.n	800b2da <BackEndTask+0xb6>
 800b2d8:	e08d      	b.n	800b3f6 <BackEndTask+0x1d2>
						packetStart = MSG_RX_BUF_SIZE-1;	
 800b2da:	4699      	mov	r9, r3
 800b2dc:	e13d      	b.n	800b55a <BackEndTask+0x336>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800b2de:	2a3f      	cmp	r2, #63	; 0x3f
 800b2e0:	d023      	beq.n	800b32a <BackEndTask+0x106>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 800b2e2:	3201      	adds	r2, #1
 800b2e4:	2a40      	cmp	r2, #64	; 0x40
 800b2e6:	d100      	bne.n	800b2ea <BackEndTask+0xc6>
 800b2e8:	e137      	b.n	800b55a <BackEndTask+0x336>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800b2ea:	5c83      	ldrb	r3, [r0, r2]
 800b2ec:	2b0d      	cmp	r3, #13
 800b2ee:	d1f8      	bne.n	800b2e2 <BackEndTask+0xbe>
 800b2f0:	2a3e      	cmp	r2, #62	; 0x3e
 800b2f2:	dcf4      	bgt.n	800b2de <BackEndTask+0xba>
 800b2f4:	1881      	adds	r1, r0, r2
 800b2f6:	784b      	ldrb	r3, [r1, #1]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1f0      	bne.n	800b2de <BackEndTask+0xba>
										UARTRxBuf[port-1][j] = 0;
 800b2fc:	9b03      	ldr	r3, [sp, #12]
 800b2fe:	0199      	lsls	r1, r3, #6
 800b300:	4ba6      	ldr	r3, [pc, #664]	; (800b59c <BackEndTask+0x378>)
 800b302:	185b      	adds	r3, r3, r1
 800b304:	2100      	movs	r1, #0
 800b306:	5499      	strb	r1, [r3, r2]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 800b308:	3201      	adds	r2, #1
 800b30a:	4653      	mov	r3, sl
 800b30c:	701a      	strb	r2, [r3, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 800b30e:	4ba4      	ldr	r3, [pc, #656]	; (800b5a0 <BackEndTask+0x37c>)
 800b310:	781a      	ldrb	r2, [r3, #0]
 800b312:	48a4      	ldr	r0, [pc, #656]	; (800b5a4 <BackEndTask+0x380>)
 800b314:	5481      	strb	r1, [r0, r2]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 800b316:	2203      	movs	r2, #3
 800b318:	7022      	strb	r2, [r4, #0]
										PcPort = port;
 800b31a:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 800b31c:	4ba2      	ldr	r3, [pc, #648]	; (800b5a8 <BackEndTask+0x384>)
 800b31e:	6818      	ldr	r0, [r3, #0]
 800b320:	2300      	movs	r3, #0
 800b322:	3a01      	subs	r2, #1
 800b324:	f004 feee 	bl	8010104 <xTaskGenericNotify>
										break;
 800b328:	e117      	b.n	800b55a <BackEndTask+0x336>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800b32a:	7803      	ldrb	r3, [r0, #0]
							emptyBuffer = true;
 800b32c:	2101      	movs	r1, #1
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1a8      	bne.n	800b284 <BackEndTask+0x60>
 800b332:	e7e3      	b.n	800b2fc <BackEndTask+0xd8>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 800b334:	0033      	movs	r3, r6
 800b336:	333f      	adds	r3, #63	; 0x3f
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	9301      	str	r3, [sp, #4]
					parseStart = 0;				
 800b33c:	2300      	movs	r3, #0
 800b33e:	9304      	str	r3, [sp, #16]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 800b340:	9b01      	ldr	r3, [sp, #4]
 800b342:	3303      	adds	r3, #3
 800b344:	9302      	str	r3, [sp, #8]
 800b346:	444b      	add	r3, r9
 800b348:	4698      	mov	r8, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 800b34a:	2b3f      	cmp	r3, #63	; 0x3f
 800b34c:	dd03      	ble.n	800b356 <BackEndTask+0x132>
					packetEnd -= MSG_RX_BUF_SIZE;
 800b34e:	2340      	movs	r3, #64	; 0x40
 800b350:	425b      	negs	r3, r3
 800b352:	469c      	mov	ip, r3
 800b354:	44e0      	add	r8, ip
				if (packetStart != packetEnd)										// Non-empty packet
 800b356:	45c1      	cmp	r9, r8
 800b358:	d100      	bne.n	800b35c <BackEndTask+0x138>
 800b35a:	e0e1      	b.n	800b520 <BackEndTask+0x2fc>
					Delay_ms(1);
 800b35c:	2001      	movs	r0, #1
 800b35e:	f005 fadd 	bl	801091c <HAL_Delay>
					if (packetStart < packetEnd) {
 800b362:	45c1      	cmp	r9, r8
 800b364:	da4e      	bge.n	800b404 <BackEndTask+0x1e0>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 800b366:	4b91      	ldr	r3, [pc, #580]	; (800b5ac <BackEndTask+0x388>)
 800b368:	18f9      	adds	r1, r7, r3
 800b36a:	0189      	lsls	r1, r1, #6
 800b36c:	4449      	add	r1, r9
 800b36e:	4b8b      	ldr	r3, [pc, #556]	; (800b59c <BackEndTask+0x378>)
 800b370:	18c9      	adds	r1, r1, r3
 800b372:	9a02      	ldr	r2, [sp, #8]
 800b374:	488e      	ldr	r0, [pc, #568]	; (800b5b0 <BackEndTask+0x38c>)
 800b376:	f008 ff96 	bl	80142a6 <memcpy>
					crc8 = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (packetLength + 3)/4);
 800b37a:	9b02      	ldr	r3, [sp, #8]
 800b37c:	17d9      	asrs	r1, r3, #31
 800b37e:	2203      	movs	r2, #3
 800b380:	4011      	ands	r1, r2
 800b382:	469c      	mov	ip, r3
 800b384:	4461      	add	r1, ip
 800b386:	1088      	asrs	r0, r1, #2
 800b388:	9005      	str	r0, [sp, #20]
 800b38a:	0002      	movs	r2, r0
 800b38c:	4988      	ldr	r1, [pc, #544]	; (800b5b0 <BackEndTask+0x38c>)
 800b38e:	4889      	ldr	r0, [pc, #548]	; (800b5b4 <BackEndTask+0x390>)
 800b390:	f005 fc07 	bl	8010ba2 <HAL_CRC_Calculate>
 800b394:	4b88      	ldr	r3, [pc, #544]	; (800b5b8 <BackEndTask+0x394>)
 800b396:	7018      	strb	r0, [r3, #0]
					if ((packetLength + 3)%4 !=0)		// Non-word-aligned packet
 800b398:	2103      	movs	r1, #3
 800b39a:	9b02      	ldr	r3, [sp, #8]
 800b39c:	4219      	tst	r1, r3
 800b39e:	d149      	bne.n	800b434 <BackEndTask+0x210>
					memset(crcBuffer, 0, sizeof(crcBuffer));
 800b3a0:	2238      	movs	r2, #56	; 0x38
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	4882      	ldr	r0, [pc, #520]	; (800b5b0 <BackEndTask+0x38c>)
 800b3a6:	f008 ff87 	bl	80142b8 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	019a      	lsls	r2, r3, #6
 800b3ae:	4b7b      	ldr	r3, [pc, #492]	; (800b59c <BackEndTask+0x378>)
 800b3b0:	189b      	adds	r3, r3, r2
 800b3b2:	4642      	mov	r2, r8
 800b3b4:	5c9a      	ldrb	r2, [r3, r2]
 800b3b6:	4b80      	ldr	r3, [pc, #512]	; (800b5b8 <BackEndTask+0x394>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d045      	beq.n	800b44a <BackEndTask+0x226>
				}
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */                
				if (packetStart < packetEnd) {
 800b3be:	45c1      	cmp	r9, r8
 800b3c0:	db00      	blt.n	800b3c4 <BackEndTask+0x1a0>
 800b3c2:	e0ad      	b.n	800b520 <BackEndTask+0x2fc>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 800b3c4:	9a01      	ldr	r2, [sp, #4]
 800b3c6:	3204      	adds	r2, #4
 800b3c8:	4b78      	ldr	r3, [pc, #480]	; (800b5ac <BackEndTask+0x388>)
 800b3ca:	18f8      	adds	r0, r7, r3
 800b3cc:	0180      	lsls	r0, r0, #6
 800b3ce:	4448      	add	r0, r9
 800b3d0:	4b72      	ldr	r3, [pc, #456]	; (800b59c <BackEndTask+0x378>)
 800b3d2:	18c0      	adds	r0, r0, r3
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	f008 ff6f 	bl	80142b8 <memset>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
				}    
				
				/* A.6.2 Advance buffer index */				
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 800b3da:	4643      	mov	r3, r8
 800b3dc:	3301      	adds	r3, #1
 800b3de:	4652      	mov	r2, sl
 800b3e0:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 800b3e2:	4a76      	ldr	r2, [pc, #472]	; (800b5bc <BackEndTask+0x398>)
 800b3e4:	8813      	ldrh	r3, [r2, #0]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	8013      	strh	r3, [r2, #0]
 800b3ea:	e0c2      	b.n	800b572 <BackEndTask+0x34e>
					packetLength = UARTRxBuf[port-1][0];
 800b3ec:	7833      	ldrb	r3, [r6, #0]
 800b3ee:	9301      	str	r3, [sp, #4]
					parseStart = 1;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	9304      	str	r3, [sp, #16]
 800b3f4:	e7a4      	b.n	800b340 <BackEndTask+0x11c>
					packetLength = UARTRxBuf[port-1][1];
 800b3f6:	7873      	ldrb	r3, [r6, #1]
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	233f      	movs	r3, #63	; 0x3f
 800b3fc:	4699      	mov	r9, r3
					parseStart = 2;
 800b3fe:	3b3d      	subs	r3, #61	; 0x3d
 800b400:	9304      	str	r3, [sp, #16]
 800b402:	e79d      	b.n	800b340 <BackEndTask+0x11c>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 800b404:	2240      	movs	r2, #64	; 0x40
 800b406:	464b      	mov	r3, r9
 800b408:	1ad2      	subs	r2, r2, r3
 800b40a:	4b68      	ldr	r3, [pc, #416]	; (800b5ac <BackEndTask+0x388>)
 800b40c:	18f9      	adds	r1, r7, r3
 800b40e:	0189      	lsls	r1, r1, #6
 800b410:	4449      	add	r1, r9
 800b412:	4b62      	ldr	r3, [pc, #392]	; (800b59c <BackEndTask+0x378>)
 800b414:	18c9      	adds	r1, r1, r3
 800b416:	9205      	str	r2, [sp, #20]
 800b418:	4865      	ldr	r0, [pc, #404]	; (800b5b0 <BackEndTask+0x38c>)
 800b41a:	f008 ff44 	bl	80142a6 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 800b41e:	4964      	ldr	r1, [pc, #400]	; (800b5b0 <BackEndTask+0x38c>)
 800b420:	9b05      	ldr	r3, [sp, #20]
 800b422:	469c      	mov	ip, r3
 800b424:	4461      	add	r1, ip
 800b426:	0008      	movs	r0, r1
 800b428:	9a02      	ldr	r2, [sp, #8]
 800b42a:	1ad2      	subs	r2, r2, r3
 800b42c:	0031      	movs	r1, r6
 800b42e:	f008 ff3a 	bl	80142a6 <memcpy>
 800b432:	e7a2      	b.n	800b37a <BackEndTask+0x156>
					crc8 = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((packetLength + 3)/4)*4], 1);
 800b434:	9b05      	ldr	r3, [sp, #20]
 800b436:	0099      	lsls	r1, r3, #2
 800b438:	4b5d      	ldr	r3, [pc, #372]	; (800b5b0 <BackEndTask+0x38c>)
 800b43a:	18c9      	adds	r1, r1, r3
 800b43c:	2201      	movs	r2, #1
 800b43e:	485d      	ldr	r0, [pc, #372]	; (800b5b4 <BackEndTask+0x390>)
 800b440:	f005 fb83 	bl	8010b4a <HAL_CRC_Accumulate>
 800b444:	4b5c      	ldr	r3, [pc, #368]	; (800b5b8 <BackEndTask+0x394>)
 800b446:	7018      	strb	r0, [r3, #0]
 800b448:	e7aa      	b.n	800b3a0 <BackEndTask+0x17c>
						portStatus[port] = MSG;
 800b44a:	2301      	movs	r3, #1
 800b44c:	7023      	strb	r3, [r4, #0]
						messageLength[port-1] = packetLength;	
 800b44e:	1ebb      	subs	r3, r7, #2
 800b450:	4a5b      	ldr	r2, [pc, #364]	; (800b5c0 <BackEndTask+0x39c>)
 800b452:	9901      	ldr	r1, [sp, #4]
 800b454:	54d1      	strb	r1, [r2, r3]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 800b456:	233f      	movs	r3, #63	; 0x3f
 800b458:	9c04      	ldr	r4, [sp, #16]
 800b45a:	1b1b      	subs	r3, r3, r4
 800b45c:	000a      	movs	r2, r1
 800b45e:	428b      	cmp	r3, r1
 800b460:	db27      	blt.n	800b4b2 <BackEndTask+0x28e>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 800b462:	00f8      	lsls	r0, r7, #3
 800b464:	1bc0      	subs	r0, r0, r7
 800b466:	00c0      	lsls	r0, r0, #3
 800b468:	9b07      	ldr	r3, [sp, #28]
 800b46a:	469c      	mov	ip, r3
 800b46c:	4460      	add	r0, ip
 800b46e:	4b4f      	ldr	r3, [pc, #316]	; (800b5ac <BackEndTask+0x388>)
 800b470:	18f9      	adds	r1, r7, r3
 800b472:	0189      	lsls	r1, r1, #6
 800b474:	46a4      	mov	ip, r4
 800b476:	4461      	add	r1, ip
 800b478:	4b48      	ldr	r3, [pc, #288]	; (800b59c <BackEndTask+0x378>)
 800b47a:	18c9      	adds	r1, r1, r3
 800b47c:	f008 ff13 	bl	80142a6 <memcpy>
						if (packetStart < packetEnd) {
 800b480:	45c1      	cmp	r9, r8
 800b482:	da38      	bge.n	800b4f6 <BackEndTask+0x2d2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 800b484:	9a01      	ldr	r2, [sp, #4]
 800b486:	3204      	adds	r2, #4
 800b488:	4b48      	ldr	r3, [pc, #288]	; (800b5ac <BackEndTask+0x388>)
 800b48a:	18f8      	adds	r0, r7, r3
 800b48c:	0180      	lsls	r0, r0, #6
 800b48e:	4448      	add	r0, r9
 800b490:	4b42      	ldr	r3, [pc, #264]	; (800b59c <BackEndTask+0x378>)
 800b492:	18c0      	adds	r0, r0, r3
 800b494:	2100      	movs	r1, #0
 800b496:	f008 ff0f 	bl	80142b8 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 800b49a:	4643      	mov	r3, r8
 800b49c:	3301      	adds	r3, #1
 800b49e:	4652      	mov	r2, sl
 800b4a0:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 800b4a2:	4a48      	ldr	r2, [pc, #288]	; (800b5c4 <BackEndTask+0x3a0>)
 800b4a4:	8813      	ldrh	r3, [r2, #0]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 800b4aa:	0028      	movs	r0, r5
 800b4ac:	f7f8 fa64 	bl	8003978 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 800b4b0:	e053      	b.n	800b55a <BackEndTask+0x336>
 800b4b2:	00fb      	lsls	r3, r7, #3
 800b4b4:	1bdb      	subs	r3, r3, r7
 800b4b6:	00db      	lsls	r3, r3, #3
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 800b4b8:	2440      	movs	r4, #64	; 0x40
 800b4ba:	9a04      	ldr	r2, [sp, #16]
 800b4bc:	1aa4      	subs	r4, r4, r2
 800b4be:	9906      	ldr	r1, [sp, #24]
 800b4c0:	9302      	str	r3, [sp, #8]
 800b4c2:	469c      	mov	ip, r3
 800b4c4:	4461      	add	r1, ip
 800b4c6:	0008      	movs	r0, r1
 800b4c8:	4938      	ldr	r1, [pc, #224]	; (800b5ac <BackEndTask+0x388>)
 800b4ca:	1879      	adds	r1, r7, r1
 800b4cc:	0189      	lsls	r1, r1, #6
 800b4ce:	9a04      	ldr	r2, [sp, #16]
 800b4d0:	4694      	mov	ip, r2
 800b4d2:	4461      	add	r1, ip
 800b4d4:	4b31      	ldr	r3, [pc, #196]	; (800b59c <BackEndTask+0x378>)
 800b4d6:	18c9      	adds	r1, r1, r3
 800b4d8:	0022      	movs	r2, r4
 800b4da:	f008 fee4 	bl	80142a6 <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 800b4de:	9802      	ldr	r0, [sp, #8]
 800b4e0:	3870      	subs	r0, #112	; 0x70
 800b4e2:	1900      	adds	r0, r0, r4
 800b4e4:	4b2a      	ldr	r3, [pc, #168]	; (800b590 <BackEndTask+0x36c>)
 800b4e6:	469c      	mov	ip, r3
 800b4e8:	4460      	add	r0, ip
 800b4ea:	9b01      	ldr	r3, [sp, #4]
 800b4ec:	1b1a      	subs	r2, r3, r4
 800b4ee:	0031      	movs	r1, r6
 800b4f0:	f008 fed9 	bl	80142a6 <memcpy>
 800b4f4:	e7c4      	b.n	800b480 <BackEndTask+0x25c>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800b4f6:	2440      	movs	r4, #64	; 0x40
 800b4f8:	464b      	mov	r3, r9
 800b4fa:	1ae4      	subs	r4, r4, r3
 800b4fc:	4b2b      	ldr	r3, [pc, #172]	; (800b5ac <BackEndTask+0x388>)
 800b4fe:	18f8      	adds	r0, r7, r3
 800b500:	0180      	lsls	r0, r0, #6
 800b502:	4448      	add	r0, r9
 800b504:	4b25      	ldr	r3, [pc, #148]	; (800b59c <BackEndTask+0x378>)
 800b506:	18c0      	adds	r0, r0, r3
 800b508:	0022      	movs	r2, r4
 800b50a:	2100      	movs	r1, #0
 800b50c:	f008 fed4 	bl	80142b8 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 800b510:	9a01      	ldr	r2, [sp, #4]
 800b512:	3204      	adds	r2, #4
 800b514:	1b12      	subs	r2, r2, r4
 800b516:	2100      	movs	r1, #0
 800b518:	0030      	movs	r0, r6
 800b51a:	f008 fecd 	bl	80142b8 <memset>
 800b51e:	e7bc      	b.n	800b49a <BackEndTask+0x276>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 800b520:	2240      	movs	r2, #64	; 0x40
 800b522:	464b      	mov	r3, r9
 800b524:	1ad2      	subs	r2, r2, r3
 800b526:	4b21      	ldr	r3, [pc, #132]	; (800b5ac <BackEndTask+0x388>)
 800b528:	18f8      	adds	r0, r7, r3
 800b52a:	0180      	lsls	r0, r0, #6
 800b52c:	4448      	add	r0, r9
 800b52e:	4b1b      	ldr	r3, [pc, #108]	; (800b59c <BackEndTask+0x378>)
 800b530:	18c0      	adds	r0, r0, r3
 800b532:	9202      	str	r2, [sp, #8]
 800b534:	2100      	movs	r1, #0
 800b536:	f008 febf 	bl	80142b8 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 800b53a:	9a01      	ldr	r2, [sp, #4]
 800b53c:	3204      	adds	r2, #4
 800b53e:	9b02      	ldr	r3, [sp, #8]
 800b540:	1ad2      	subs	r2, r2, r3
 800b542:	2100      	movs	r1, #0
 800b544:	0030      	movs	r0, r6
 800b546:	f008 feb7 	bl	80142b8 <memset>
 800b54a:	e746      	b.n	800b3da <BackEndTask+0x1b6>
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
				MsgDMAStopped[port-1] = false;
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 800b54c:	0028      	movs	r0, r5
 800b54e:	f7f9 fa43 	bl	80049d8 <GetUart>
 800b552:	2240      	movs	r2, #64	; 0x40
 800b554:	0031      	movs	r1, r6
 800b556:	f007 ff6f 	bl	8013438 <HAL_UART_Receive_DMA>
		for (port=1 ; port <= NumOfPorts; port++)
 800b55a:	3501      	adds	r5, #1
 800b55c:	b2ed      	uxtb	r5, r5
 800b55e:	3701      	adds	r7, #1
 800b560:	3640      	adds	r6, #64	; 0x40
 800b562:	2d07      	cmp	r5, #7
 800b564:	d032      	beq.n	800b5cc <BackEndTask+0x3a8>
 800b566:	1e7c      	subs	r4, r7, #1
 800b568:	445c      	add	r4, fp
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 800b56a:	7823      	ldrb	r3, [r4, #0]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d800      	bhi.n	800b572 <BackEndTask+0x34e>
 800b570:	e669      	b.n	800b246 <BackEndTask+0x22>
 800b572:	1ebb      	subs	r3, r7, #2
 800b574:	4a14      	ldr	r2, [pc, #80]	; (800b5c8 <BackEndTask+0x3a4>)
 800b576:	4694      	mov	ip, r2
 800b578:	4463      	add	r3, ip
			if (MsgDMAStopped[port-1] == true) {
 800b57a:	781a      	ldrb	r2, [r3, #0]
 800b57c:	2a00      	cmp	r2, #0
 800b57e:	d0ec      	beq.n	800b55a <BackEndTask+0x336>
				MsgDMAStopped[port-1] = false;
 800b580:	2200      	movs	r2, #0
 800b582:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 800b584:	7823      	ldrb	r3, [r4, #0]
 800b586:	2b05      	cmp	r3, #5
 800b588:	d1e0      	bne.n	800b54c <BackEndTask+0x328>
 800b58a:	2300      	movs	r3, #0
 800b58c:	7023      	strb	r3, [r4, #0]
 800b58e:	e7dd      	b.n	800b54c <BackEndTask+0x328>
 800b590:	20000de0 	.word	0x20000de0
 800b594:	2000169c 	.word	0x2000169c
 800b598:	20006a10 	.word	0x20006a10
 800b59c:	2000151c 	.word	0x2000151c
 800b5a0:	20000abf 	.word	0x20000abf
 800b5a4:	20001348 	.word	0x20001348
 800b5a8:	20001758 	.word	0x20001758
 800b5ac:	03fffffe 	.word	0x03fffffe
 800b5b0:	200016a4 	.word	0x200016a4
 800b5b4:	20006dc8 	.word	0x20006dc8
 800b5b8:	2000174a 	.word	0x2000174a
 800b5bc:	20001750 	.word	0x20001750
 800b5c0:	2000115c 	.word	0x2000115c
 800b5c4:	20001748 	.word	0x20001748
 800b5c8:	20001514 	.word	0x20001514
			}				
		}
		
		taskYIELD();
 800b5cc:	f005 f828 	bl	8010620 <vPortYield>
 800b5d0:	4e02      	ldr	r6, [pc, #8]	; (800b5dc <BackEndTask+0x3b8>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 800b5d2:	2702      	movs	r7, #2
		for (port=1 ; port <= NumOfPorts; port++)
 800b5d4:	2501      	movs	r5, #1
 800b5d6:	4b02      	ldr	r3, [pc, #8]	; (800b5e0 <BackEndTask+0x3bc>)
 800b5d8:	469b      	mov	fp, r3
 800b5da:	e7c4      	b.n	800b566 <BackEndTask+0x342>
 800b5dc:	2000151c 	.word	0x2000151c
 800b5e0:	20001348 	.word	0x20001348

0800b5e4 <MX_FREERTOS_Init>:
{
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	b090      	sub	sp, #64	; 0x40
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 800b5e8:	25a0      	movs	r5, #160	; 0xa0
 800b5ea:	006d      	lsls	r5, r5, #1
 800b5ec:	2400      	movs	r4, #0
 800b5ee:	9403      	str	r4, [sp, #12]
 800b5f0:	9402      	str	r4, [sp, #8]
 800b5f2:	4b5e      	ldr	r3, [pc, #376]	; (800b76c <MX_FREERTOS_Init+0x188>)
 800b5f4:	9301      	str	r3, [sp, #4]
 800b5f6:	2603      	movs	r6, #3
 800b5f8:	9600      	str	r6, [sp, #0]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	002a      	movs	r2, r5
 800b5fe:	495c      	ldr	r1, [pc, #368]	; (800b770 <MX_FREERTOS_Init+0x18c>)
 800b600:	485c      	ldr	r0, [pc, #368]	; (800b774 <MX_FREERTOS_Init+0x190>)
 800b602:	f003 ff5b 	bl	800f4bc <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 800b606:	9403      	str	r4, [sp, #12]
 800b608:	9402      	str	r4, [sp, #8]
 800b60a:	4b5b      	ldr	r3, [pc, #364]	; (800b778 <MX_FREERTOS_Init+0x194>)
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	9600      	str	r6, [sp, #0]
 800b610:	2300      	movs	r3, #0
 800b612:	002a      	movs	r2, r5
 800b614:	4959      	ldr	r1, [pc, #356]	; (800b77c <MX_FREERTOS_Init+0x198>)
 800b616:	485a      	ldr	r0, [pc, #360]	; (800b780 <MX_FREERTOS_Init+0x19c>)
 800b618:	f003 ff50 	bl	800f4bc <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 800b61c:	9403      	str	r4, [sp, #12]
 800b61e:	9402      	str	r4, [sp, #8]
 800b620:	4b58      	ldr	r3, [pc, #352]	; (800b784 <MX_FREERTOS_Init+0x1a0>)
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	9600      	str	r6, [sp, #0]
 800b626:	2300      	movs	r3, #0
 800b628:	002a      	movs	r2, r5
 800b62a:	4957      	ldr	r1, [pc, #348]	; (800b788 <MX_FREERTOS_Init+0x1a4>)
 800b62c:	4857      	ldr	r0, [pc, #348]	; (800b78c <MX_FREERTOS_Init+0x1a8>)
 800b62e:	f003 ff45 	bl	800f4bc <xTaskGenericCreate>
	vRegisterCLICommands();
 800b632:	f7f9 f935 	bl	80048a0 <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 800b636:	9403      	str	r4, [sp, #12]
 800b638:	9402      	str	r4, [sp, #8]
 800b63a:	4b55      	ldr	r3, [pc, #340]	; (800b790 <MX_FREERTOS_Init+0x1ac>)
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	9600      	str	r6, [sp, #0]
 800b640:	2300      	movs	r3, #0
 800b642:	002a      	movs	r2, r5
 800b644:	4953      	ldr	r1, [pc, #332]	; (800b794 <MX_FREERTOS_Init+0x1b0>)
 800b646:	4854      	ldr	r0, [pc, #336]	; (800b798 <MX_FREERTOS_Init+0x1b4>)
 800b648:	f003 ff38 	bl	800f4bc <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 800b64c:	4d53      	ldr	r5, [pc, #332]	; (800b79c <MX_FREERTOS_Init+0x1b8>)
 800b64e:	9403      	str	r4, [sp, #12]
 800b650:	9402      	str	r4, [sp, #8]
 800b652:	4b53      	ldr	r3, [pc, #332]	; (800b7a0 <MX_FREERTOS_Init+0x1bc>)
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	3601      	adds	r6, #1
 800b658:	9600      	str	r6, [sp, #0]
 800b65a:	2301      	movs	r3, #1
 800b65c:	22a0      	movs	r2, #160	; 0xa0
 800b65e:	4951      	ldr	r1, [pc, #324]	; (800b7a4 <MX_FREERTOS_Init+0x1c0>)
 800b660:	0028      	movs	r0, r5
 800b662:	f003 ff2b 	bl	800f4bc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 800b666:	9403      	str	r4, [sp, #12]
 800b668:	9402      	str	r4, [sp, #8]
 800b66a:	4b4f      	ldr	r3, [pc, #316]	; (800b7a8 <MX_FREERTOS_Init+0x1c4>)
 800b66c:	9301      	str	r3, [sp, #4]
 800b66e:	9600      	str	r6, [sp, #0]
 800b670:	2302      	movs	r3, #2
 800b672:	22a0      	movs	r2, #160	; 0xa0
 800b674:	494d      	ldr	r1, [pc, #308]	; (800b7ac <MX_FREERTOS_Init+0x1c8>)
 800b676:	0028      	movs	r0, r5
 800b678:	f003 ff20 	bl	800f4bc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 800b67c:	9403      	str	r4, [sp, #12]
 800b67e:	9402      	str	r4, [sp, #8]
 800b680:	4b4b      	ldr	r3, [pc, #300]	; (800b7b0 <MX_FREERTOS_Init+0x1cc>)
 800b682:	9301      	str	r3, [sp, #4]
 800b684:	9600      	str	r6, [sp, #0]
 800b686:	2303      	movs	r3, #3
 800b688:	22a0      	movs	r2, #160	; 0xa0
 800b68a:	494a      	ldr	r1, [pc, #296]	; (800b7b4 <MX_FREERTOS_Init+0x1d0>)
 800b68c:	0028      	movs	r0, r5
 800b68e:	f003 ff15 	bl	800f4bc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 800b692:	9403      	str	r4, [sp, #12]
 800b694:	9402      	str	r4, [sp, #8]
 800b696:	4b48      	ldr	r3, [pc, #288]	; (800b7b8 <MX_FREERTOS_Init+0x1d4>)
 800b698:	9301      	str	r3, [sp, #4]
 800b69a:	9600      	str	r6, [sp, #0]
 800b69c:	2304      	movs	r3, #4
 800b69e:	22a0      	movs	r2, #160	; 0xa0
 800b6a0:	4946      	ldr	r1, [pc, #280]	; (800b7bc <MX_FREERTOS_Init+0x1d8>)
 800b6a2:	0028      	movs	r0, r5
 800b6a4:	f003 ff0a 	bl	800f4bc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 800b6a8:	9403      	str	r4, [sp, #12]
 800b6aa:	9402      	str	r4, [sp, #8]
 800b6ac:	4b44      	ldr	r3, [pc, #272]	; (800b7c0 <MX_FREERTOS_Init+0x1dc>)
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	9600      	str	r6, [sp, #0]
 800b6b2:	2305      	movs	r3, #5
 800b6b4:	22a0      	movs	r2, #160	; 0xa0
 800b6b6:	4943      	ldr	r1, [pc, #268]	; (800b7c4 <MX_FREERTOS_Init+0x1e0>)
 800b6b8:	0028      	movs	r0, r5
 800b6ba:	f003 feff 	bl	800f4bc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P6MsgTask", configMINIMAL_STACK_SIZE, (void *) P6, osPriorityAboveNormal-osPriorityIdle, &P6MsgTaskHandle);
 800b6be:	9403      	str	r4, [sp, #12]
 800b6c0:	9402      	str	r4, [sp, #8]
 800b6c2:	4b41      	ldr	r3, [pc, #260]	; (800b7c8 <MX_FREERTOS_Init+0x1e4>)
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	9600      	str	r6, [sp, #0]
 800b6c8:	2306      	movs	r3, #6
 800b6ca:	22a0      	movs	r2, #160	; 0xa0
 800b6cc:	493f      	ldr	r1, [pc, #252]	; (800b7cc <MX_FREERTOS_Init+0x1e8>)
 800b6ce:	0028      	movs	r0, r5
 800b6d0:	f003 fef4 	bl	800f4bc <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 800b6d4:	940f      	str	r4, [sp, #60]	; 0x3c
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	a80f      	add	r0, sp, #60	; 0x3c
 800b6da:	f003 f8fc 	bl	800e8d6 <osSemaphoreCreate>
 800b6de:	4e3c      	ldr	r6, [pc, #240]	; (800b7d0 <MX_FREERTOS_Init+0x1ec>)
 800b6e0:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 800b6e2:	940e      	str	r4, [sp, #56]	; 0x38
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	a80e      	add	r0, sp, #56	; 0x38
 800b6e8:	f003 f8f5 	bl	800e8d6 <osSemaphoreCreate>
 800b6ec:	4d39      	ldr	r5, [pc, #228]	; (800b7d4 <MX_FREERTOS_Init+0x1f0>)
 800b6ee:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 800b6f0:	940d      	str	r4, [sp, #52]	; 0x34
 800b6f2:	2101      	movs	r1, #1
 800b6f4:	a80d      	add	r0, sp, #52	; 0x34
 800b6f6:	f003 f8ee 	bl	800e8d6 <osSemaphoreCreate>
 800b6fa:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 800b6fc:	940c      	str	r4, [sp, #48]	; 0x30
 800b6fe:	2101      	movs	r1, #1
 800b700:	a80c      	add	r0, sp, #48	; 0x30
 800b702:	f003 f8e8 	bl	800e8d6 <osSemaphoreCreate>
 800b706:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 800b708:	940b      	str	r4, [sp, #44]	; 0x2c
 800b70a:	2101      	movs	r1, #1
 800b70c:	a80b      	add	r0, sp, #44	; 0x2c
 800b70e:	f003 f8e2 	bl	800e8d6 <osSemaphoreCreate>
 800b712:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 800b714:	940a      	str	r4, [sp, #40]	; 0x28
 800b716:	2101      	movs	r1, #1
 800b718:	a80a      	add	r0, sp, #40	; 0x28
 800b71a:	f003 f8dc 	bl	800e8d6 <osSemaphoreCreate>
 800b71e:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 800b720:	9409      	str	r4, [sp, #36]	; 0x24
 800b722:	2101      	movs	r1, #1
 800b724:	a809      	add	r0, sp, #36	; 0x24
 800b726:	f003 f8d6 	bl	800e8d6 <osSemaphoreCreate>
 800b72a:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 800b72c:	9408      	str	r4, [sp, #32]
 800b72e:	2101      	movs	r1, #1
 800b730:	a808      	add	r0, sp, #32
 800b732:	f003 f8d0 	bl	800e8d6 <osSemaphoreCreate>
 800b736:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 800b738:	9407      	str	r4, [sp, #28]
 800b73a:	2101      	movs	r1, #1
 800b73c:	a807      	add	r0, sp, #28
 800b73e:	f003 f8ca 	bl	800e8d6 <osSemaphoreCreate>
 800b742:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 800b744:	9406      	str	r4, [sp, #24]
 800b746:	2101      	movs	r1, #1
 800b748:	a806      	add	r0, sp, #24
 800b74a:	f003 f8c4 	bl	800e8d6 <osSemaphoreCreate>
 800b74e:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11); PxRxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP11), 1);
 800b750:	9405      	str	r4, [sp, #20]
 800b752:	2101      	movs	r1, #1
 800b754:	a805      	add	r0, sp, #20
 800b756:	f003 f8be 	bl	800e8d6 <osSemaphoreCreate>
 800b75a:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12); PxTxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP12), 1);
 800b75c:	9404      	str	r4, [sp, #16]
 800b75e:	2101      	movs	r1, #1
 800b760:	a804      	add	r0, sp, #16
 800b762:	f003 f8b8 	bl	800e8d6 <osSemaphoreCreate>
 800b766:	61a8      	str	r0, [r5, #24]
}
 800b768:	b010      	add	sp, #64	; 0x40
 800b76a:	bd70      	pop	{r4, r5, r6, pc}
 800b76c:	2000174c 	.word	0x2000174c
 800b770:	0801b4a0 	.word	0x0801b4a0
 800b774:	0800b165 	.word	0x0800b165
 800b778:	20001728 	.word	0x20001728
 800b77c:	0801b4ac 	.word	0x0801b4ac
 800b780:	0800b225 	.word	0x0800b225
 800b784:	20001744 	.word	0x20001744
 800b788:	0801b4b8 	.word	0x0801b4b8
 800b78c:	08013d7b 	.word	0x08013d7b
 800b790:	20001758 	.word	0x20001758
 800b794:	0801b4c4 	.word	0x0801b4c4
 800b798:	0800a495 	.word	0x0800a495
 800b79c:	08006f11 	.word	0x08006f11
 800b7a0:	2000172c 	.word	0x2000172c
 800b7a4:	0801b4cc 	.word	0x0801b4cc
 800b7a8:	20001730 	.word	0x20001730
 800b7ac:	0801b4d8 	.word	0x0801b4d8
 800b7b0:	20001734 	.word	0x20001734
 800b7b4:	0801b4e4 	.word	0x0801b4e4
 800b7b8:	20001738 	.word	0x20001738
 800b7bc:	0801b4f0 	.word	0x0801b4f0
 800b7c0:	2000173c 	.word	0x2000173c
 800b7c4:	0801b4fc 	.word	0x0801b4fc
 800b7c8:	20001740 	.word	0x20001740
 800b7cc:	0801b508 	.word	0x0801b508
 800b7d0:	20006b0c 	.word	0x20006b0c
 800b7d4:	20006af0 	.word	0x20006af0

0800b7d8 <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 800b7d8:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800b7da:	4b04      	ldr	r3, [pc, #16]	; (800b7ec <vMainConfigureTimerForRunTimeStats+0x14>)
 800b7dc:	6818      	ldr	r0, [r3, #0]
 800b7de:	4904      	ldr	r1, [pc, #16]	; (800b7f0 <vMainConfigureTimerForRunTimeStats+0x18>)
 800b7e0:	f7f4 fcb6 	bl	8000150 <__udivsi3>
 800b7e4:	4b03      	ldr	r3, [pc, #12]	; (800b7f4 <vMainConfigureTimerForRunTimeStats+0x1c>)
 800b7e6:	6018      	str	r0, [r3, #0]
}
 800b7e8:	bd10      	pop	{r4, pc}
 800b7ea:	46c0      	nop			; (mov r8, r8)
 800b7ec:	200000dc 	.word	0x200000dc
 800b7f0:	00002710 	.word	0x00002710
 800b7f4:	20001754 	.word	0x20001754

0800b7f8 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 800b7f8:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7fa:	4b0f      	ldr	r3, [pc, #60]	; (800b838 <ulMainGetRunTimeCounterValue+0x40>)
 800b7fc:	6818      	ldr	r0, [r3, #0]
 800b7fe:	21fa      	movs	r1, #250	; 0xfa
 800b800:	0089      	lsls	r1, r1, #2
 800b802:	f7f4 fca5 	bl	8000150 <__udivsi3>
 800b806:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800b808:	4b0c      	ldr	r3, [pc, #48]	; (800b83c <ulMainGetRunTimeCounterValue+0x44>)
 800b80a:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 800b80c:	f003 ffe8 	bl	800f7e0 <xTaskGetTickCountFromISR>

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 800b810:	4b0b      	ldr	r3, [pc, #44]	; (800b840 <ulMainGetRunTimeCounterValue+0x48>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	015b      	lsls	r3, r3, #5
 800b816:	d50d      	bpl.n	800b834 <ulMainGetRunTimeCounterValue+0x3c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 800b818:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800b81a:	4b08      	ldr	r3, [pc, #32]	; (800b83c <ulMainGetRunTimeCounterValue+0x44>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	1aed      	subs	r5, r5, r3
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 800b820:	0084      	lsls	r4, r0, #2
 800b822:	1824      	adds	r4, r4, r0
 800b824:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 800b826:	4b07      	ldr	r3, [pc, #28]	; (800b844 <ulMainGetRunTimeCounterValue+0x4c>)
 800b828:	6819      	ldr	r1, [r3, #0]
 800b82a:	0028      	movs	r0, r5
 800b82c:	f7f4 fc90 	bl	8000150 <__udivsi3>
 800b830:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 800b832:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800b834:	1b2d      	subs	r5, r5, r4
 800b836:	e7f3      	b.n	800b820 <ulMainGetRunTimeCounterValue+0x28>
 800b838:	200000dc 	.word	0x200000dc
 800b83c:	e000e018 	.word	0xe000e018
 800b840:	e000ed04 	.word	0xe000ed04
 800b844:	20001754 	.word	0x20001754

0800b848 <LSM303SampleMagRaw>:
//	
//	return LSM303MagDisable();
//}

static Module_Status LSM303SampleMagRaw(int16_t *magX, int16_t *magY, int16_t *magZ)
{
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	0006      	movs	r6, r0
 800b84e:	000d      	movs	r5, r1
 800b850:	0014      	movs	r4, r2
	int16_t *pData;
	uint8_t data[6];
	
	memset(data, 0, sizeof(data));
 800b852:	2206      	movs	r2, #6
 800b854:	2100      	movs	r1, #0
 800b856:	4668      	mov	r0, sp
 800b858:	f008 fd2e 	bl	80142b8 <memset>
	
	if (LSM303AGR_MAG_Get_Raw_Magnetic(&hi2c2, data) != MEMS_SUCCESS)
 800b85c:	4669      	mov	r1, sp
 800b85e:	4809      	ldr	r0, [pc, #36]	; (800b884 <LSM303SampleMagRaw+0x3c>)
 800b860:	f002 fca8 	bl	800e1b4 <LSM303AGR_MAG_Get_Raw_Magnetic>
		return H0BR4_ERR_LSM303;
 800b864:	2306      	movs	r3, #6
	if (LSM303AGR_MAG_Get_Raw_Magnetic(&hi2c2, data) != MEMS_SUCCESS)
 800b866:	2801      	cmp	r0, #1
 800b868:	d109      	bne.n	800b87e <LSM303SampleMagRaw+0x36>
	
	pData = (int16_t *)data;
	*magX = pData[0];
 800b86a:	466b      	mov	r3, sp
 800b86c:	881b      	ldrh	r3, [r3, #0]
 800b86e:	8033      	strh	r3, [r6, #0]
	*magY = pData[1];
 800b870:	466b      	mov	r3, sp
 800b872:	885b      	ldrh	r3, [r3, #2]
 800b874:	802b      	strh	r3, [r5, #0]
	*magZ = pData[2];
 800b876:	466b      	mov	r3, sp
 800b878:	889b      	ldrh	r3, [r3, #4]
 800b87a:	8023      	strh	r3, [r4, #0]
	
	return H0BR4_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	0018      	movs	r0, r3
 800b880:	b002      	add	sp, #8
 800b882:	bd70      	pop	{r4, r5, r6, pc}
 800b884:	20006dec 	.word	0x20006dec

0800b888 <LSM303SampleMagMGauss>:

static Module_Status LSM303SampleMagMGauss(int *magX, int *magY, int *magZ)
{
 800b888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b88a:	b083      	sub	sp, #12
 800b88c:	0007      	movs	r7, r0
 800b88e:	000e      	movs	r6, r1
 800b890:	0015      	movs	r5, r2
	Module_Status status = H0BR4_OK;
  int16_t rawMagX, rawMagY, rawMagZ;

  /* Read raw data from LSM303AGR output register. */
  if ((status = LSM303SampleMagRaw(&rawMagX, &rawMagY, &rawMagZ)) != H0BR4_OK)
 800b892:	466b      	mov	r3, sp
 800b894:	1c9a      	adds	r2, r3, #2
 800b896:	a901      	add	r1, sp, #4
 800b898:	1d98      	adds	r0, r3, #6
 800b89a:	f7ff ffd5 	bl	800b848 <LSM303SampleMagRaw>
 800b89e:	1e04      	subs	r4, r0, #0
 800b8a0:	d125      	bne.n	800b8ee <LSM303SampleMagMGauss+0x66>
    return status;

  /* Set the raw data. */
  *magX = rawMagX * (float)LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b8a2:	466b      	mov	r3, sp
 800b8a4:	3306      	adds	r3, #6
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	5e18      	ldrsh	r0, [r3, r0]
 800b8aa:	f7f5 fc6d 	bl	8001188 <__aeabi_i2f>
 800b8ae:	21ff      	movs	r1, #255	; 0xff
 800b8b0:	0589      	lsls	r1, r1, #22
 800b8b2:	f7f5 fb17 	bl	8000ee4 <__aeabi_fmul>
 800b8b6:	f7f5 fc47 	bl	8001148 <__aeabi_f2iz>
 800b8ba:	6038      	str	r0, [r7, #0]
  *magY = rawMagY * (float)LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b8bc:	ab01      	add	r3, sp, #4
 800b8be:	2000      	movs	r0, #0
 800b8c0:	5e18      	ldrsh	r0, [r3, r0]
 800b8c2:	f7f5 fc61 	bl	8001188 <__aeabi_i2f>
 800b8c6:	21ff      	movs	r1, #255	; 0xff
 800b8c8:	0589      	lsls	r1, r1, #22
 800b8ca:	f7f5 fb0b 	bl	8000ee4 <__aeabi_fmul>
 800b8ce:	f7f5 fc3b 	bl	8001148 <__aeabi_f2iz>
 800b8d2:	6030      	str	r0, [r6, #0]
  *magZ = rawMagZ * (float)LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b8d4:	466b      	mov	r3, sp
 800b8d6:	3302      	adds	r3, #2
 800b8d8:	2000      	movs	r0, #0
 800b8da:	5e18      	ldrsh	r0, [r3, r0]
 800b8dc:	f7f5 fc54 	bl	8001188 <__aeabi_i2f>
 800b8e0:	21ff      	movs	r1, #255	; 0xff
 800b8e2:	0589      	lsls	r1, r1, #22
 800b8e4:	f7f5 fafe 	bl	8000ee4 <__aeabi_fmul>
 800b8e8:	f7f5 fc2e 	bl	8001148 <__aeabi_f2iz>
 800b8ec:	6028      	str	r0, [r5, #0]
  return status;
}
 800b8ee:	0020      	movs	r0, r4
 800b8f0:	b003      	add	sp, #12
 800b8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8f4 <SampleMagMGaussToString>:
					}
	return status;
}

Module_Status SampleMagMGaussToString(char *cstring, size_t maxLen)
{
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	0005      	movs	r5, r0
 800b8fa:	000e      	movs	r6, r1
	Module_Status status = H0BR4_OK;
	int x = 0, y = 0, z = 0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9305      	str	r3, [sp, #20]
 800b900:	9304      	str	r3, [sp, #16]
 800b902:	9303      	str	r3, [sp, #12]
	
	if ((status = LSM303SampleMagMGauss(&x, &y, &z)) != H0BR4_OK)
 800b904:	aa03      	add	r2, sp, #12
 800b906:	a904      	add	r1, sp, #16
 800b908:	a805      	add	r0, sp, #20
 800b90a:	f7ff ffbd 	bl	800b888 <LSM303SampleMagMGauss>
 800b90e:	1e04      	subs	r4, r0, #0
 800b910:	d002      	beq.n	800b918 <SampleMagMGaussToString+0x24>
		return status;
	
	snprintf(cstring, maxLen, "Mag(mGauss) | X: %d, Y: %d, Z: %d\r\n", x, y, z);
	return status;
}
 800b912:	0020      	movs	r0, r4
 800b914:	b006      	add	sp, #24
 800b916:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Mag(mGauss) | X: %d, Y: %d, Z: %d\r\n", x, y, z);
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	9b04      	ldr	r3, [sp, #16]
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	9b05      	ldr	r3, [sp, #20]
 800b922:	4a03      	ldr	r2, [pc, #12]	; (800b930 <SampleMagMGaussToString+0x3c>)
 800b924:	0031      	movs	r1, r6
 800b926:	0028      	movs	r0, r5
 800b928:	f008 fec0 	bl	80146ac <snprintf>
	return status;
 800b92c:	e7f1      	b.n	800b912 <SampleMagMGaussToString+0x1e>
 800b92e:	46c0      	nop			; (mov r8, r8)
 800b930:	0801b5a8 	.word	0x0801b5a8

0800b934 <SampleMagMGaussToBuf>:

Module_Status SampleMagMGaussToBuf(float *buffer)
{
 800b934:	b530      	push	{r4, r5, lr}
 800b936:	b085      	sub	sp, #20
 800b938:	0004      	movs	r4, r0
	int iMagMGauss[3];
	Module_Status status = LSM303SampleMagMGauss(iMagMGauss, iMagMGauss + 1, iMagMGauss + 2);
 800b93a:	aa03      	add	r2, sp, #12
 800b93c:	a902      	add	r1, sp, #8
 800b93e:	a801      	add	r0, sp, #4
 800b940:	f7ff ffa2 	bl	800b888 <LSM303SampleMagMGauss>
 800b944:	0005      	movs	r5, r0
	
	buffer[0] = iMagMGauss[0];
 800b946:	9801      	ldr	r0, [sp, #4]
 800b948:	f7f5 fc1e 	bl	8001188 <__aeabi_i2f>
 800b94c:	6020      	str	r0, [r4, #0]
	buffer[1] = iMagMGauss[1];
 800b94e:	9802      	ldr	r0, [sp, #8]
 800b950:	f7f5 fc1a 	bl	8001188 <__aeabi_i2f>
 800b954:	6060      	str	r0, [r4, #4]
	buffer[2] = iMagMGauss[2];
 800b956:	9803      	ldr	r0, [sp, #12]
 800b958:	f7f5 fc16 	bl	8001188 <__aeabi_i2f>
 800b95c:	60a0      	str	r0, [r4, #8]
	
	return status;
}
 800b95e:	0028      	movs	r0, r5
 800b960:	b005      	add	sp, #20
 800b962:	bd30      	pop	{r4, r5, pc}

0800b964 <SampleMagMGaussToPort>:
{
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	0006      	movs	r6, r0
 800b96a:	000d      	movs	r5, r1
	if ((status = SampleMagMGaussToBuf(buffer)) != H0BR4_OK)
 800b96c:	a801      	add	r0, sp, #4
 800b96e:	f7ff ffe1 	bl	800b934 <SampleMagMGaussToBuf>
 800b972:	1e04      	subs	r4, r0, #0
 800b974:	d123      	bne.n	800b9be <SampleMagMGaussToPort+0x5a>
	if (module==myID){
 800b976:	4b23      	ldr	r3, [pc, #140]	; (800ba04 <SampleMagMGaussToPort+0xa0>)
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	42ab      	cmp	r3, r5
 800b97c:	d022      	beq.n	800b9c4 <SampleMagMGaussToPort+0x60>
						messageParams[0]=port;
 800b97e:	4b22      	ldr	r3, [pc, #136]	; (800ba08 <SampleMagMGaussToPort+0xa4>)
 800b980:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&buffer[0])+3);  messageParams[2] = *((__IO uint8_t *)(&buffer[0])+2);
 800b982:	aa01      	add	r2, sp, #4
 800b984:	78d1      	ldrb	r1, [r2, #3]
 800b986:	7059      	strb	r1, [r3, #1]
 800b988:	7891      	ldrb	r1, [r2, #2]
 800b98a:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&buffer[0])+1);  messageParams[4] = *((__IO uint8_t *)(&buffer[0])+0);
 800b98c:	7851      	ldrb	r1, [r2, #1]
 800b98e:	70d9      	strb	r1, [r3, #3]
 800b990:	7811      	ldrb	r1, [r2, #0]
 800b992:	7119      	strb	r1, [r3, #4]
					  messageParams[5] = *((__IO uint8_t *)(&buffer[1])+3);  messageParams[6] = *((__IO uint8_t *)(&buffer[1])+2);
 800b994:	79d1      	ldrb	r1, [r2, #7]
 800b996:	7159      	strb	r1, [r3, #5]
 800b998:	7991      	ldrb	r1, [r2, #6]
 800b99a:	7199      	strb	r1, [r3, #6]
						messageParams[7] = *((__IO uint8_t *)(&buffer[1])+1);  messageParams[8] = *((__IO uint8_t *)(&buffer[1])+0);
 800b99c:	7951      	ldrb	r1, [r2, #5]
 800b99e:	71d9      	strb	r1, [r3, #7]
 800b9a0:	7911      	ldrb	r1, [r2, #4]
 800b9a2:	7219      	strb	r1, [r3, #8]
					  messageParams[9] = *((__IO uint8_t *)(&buffer[2])+3);  messageParams[10] = *((__IO uint8_t *)(&buffer[2])+2);
 800b9a4:	7ad1      	ldrb	r1, [r2, #11]
 800b9a6:	7259      	strb	r1, [r3, #9]
 800b9a8:	7a91      	ldrb	r1, [r2, #10]
 800b9aa:	7299      	strb	r1, [r3, #10]
						messageParams[11] = *((__IO uint8_t *)(&buffer[2])+1); messageParams[12] = *((__IO uint8_t *)(&buffer[2])+0);
 800b9ac:	7a51      	ldrb	r1, [r2, #9]
 800b9ae:	72d9      	strb	r1, [r3, #11]
 800b9b0:	7a12      	ldrb	r2, [r2, #8]
 800b9b2:	731a      	strb	r2, [r3, #12]
						SendMessageToModule(module, CODE_PORT_FORWARD, (sizeof(float)*3)+1);
 800b9b4:	220d      	movs	r2, #13
 800b9b6:	2123      	movs	r1, #35	; 0x23
 800b9b8:	0028      	movs	r0, r5
 800b9ba:	f7fa fa0f 	bl	8005ddc <SendMessageToModule>
}
 800b9be:	0020      	movs	r0, r4
 800b9c0:	b004      	add	sp, #16
 800b9c2:	bd70      	pop	{r4, r5, r6, pc}
						temp[0] = *((__IO uint8_t *)(&buffer[0])+3);  temp[1] = *((__IO uint8_t *)(&buffer[0])+2);
 800b9c4:	ab01      	add	r3, sp, #4
 800b9c6:	78da      	ldrb	r2, [r3, #3]
 800b9c8:	4910      	ldr	r1, [pc, #64]	; (800ba0c <SampleMagMGaussToPort+0xa8>)
 800b9ca:	700a      	strb	r2, [r1, #0]
 800b9cc:	789a      	ldrb	r2, [r3, #2]
 800b9ce:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&buffer[0])+1);  temp[3] = *((__IO uint8_t *)(&buffer[0])+0);
 800b9d0:	785a      	ldrb	r2, [r3, #1]
 800b9d2:	708a      	strb	r2, [r1, #2]
 800b9d4:	781a      	ldrb	r2, [r3, #0]
 800b9d6:	70ca      	strb	r2, [r1, #3]
		        temp[4] = *((__IO uint8_t *)(&buffer[1])+3);  temp[5] = *((__IO uint8_t *)(&buffer[1])+2);
 800b9d8:	79da      	ldrb	r2, [r3, #7]
 800b9da:	710a      	strb	r2, [r1, #4]
 800b9dc:	799a      	ldrb	r2, [r3, #6]
 800b9de:	714a      	strb	r2, [r1, #5]
						temp[6] = *((__IO uint8_t *)(&buffer[1])+1);  temp[7] = *((__IO uint8_t *)(&buffer[1])+0);
 800b9e0:	795a      	ldrb	r2, [r3, #5]
 800b9e2:	718a      	strb	r2, [r1, #6]
 800b9e4:	791a      	ldrb	r2, [r3, #4]
 800b9e6:	71ca      	strb	r2, [r1, #7]
		        temp[8] = *((__IO uint8_t *)(&buffer[2])+3);  temp[9] = *((__IO uint8_t *)(&buffer[2])+2);
 800b9e8:	7ada      	ldrb	r2, [r3, #11]
 800b9ea:	720a      	strb	r2, [r1, #8]
 800b9ec:	7a9a      	ldrb	r2, [r3, #10]
 800b9ee:	724a      	strb	r2, [r1, #9]
						temp[10] = *((__IO uint8_t *)(&buffer[2])+1); temp[11] = *((__IO uint8_t *)(&buffer[2])+0);
 800b9f0:	7a5a      	ldrb	r2, [r3, #9]
 800b9f2:	728a      	strb	r2, [r1, #10]
 800b9f4:	7a1b      	ldrb	r3, [r3, #8]
 800b9f6:	72cb      	strb	r3, [r1, #11]
						writePxITMutex(port, (char *)&temp[0], 12*sizeof(uint8_t), 10);
 800b9f8:	230a      	movs	r3, #10
 800b9fa:	220c      	movs	r2, #12
 800b9fc:	0030      	movs	r0, r6
 800b9fe:	f002 fabf 	bl	800df80 <writePxITMutex>
 800ba02:	e7dc      	b.n	800b9be <SampleMagMGaussToPort+0x5a>
 800ba04:	20001298 	.word	0x20001298
 800ba08:	20001164 	.word	0x20001164
 800ba0c:	200017a0 	.word	0x200017a0

0800ba10 <LSM6DS3SampleTempCelsius>:
{
 800ba10:	b510      	push	{r4, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	0004      	movs	r4, r0
	if (LSM6DS3_ACC_GYRO_ReadReg(&hi2c2, LSM6DS3_ACC_GYRO_OUT_TEMP_L, buff, 2) != MEMS_SUCCESS)
 800ba16:	2302      	movs	r3, #2
 800ba18:	aa01      	add	r2, sp, #4
 800ba1a:	2120      	movs	r1, #32
 800ba1c:	480c      	ldr	r0, [pc, #48]	; (800ba50 <LSM6DS3SampleTempCelsius+0x40>)
 800ba1e:	f002 fc16 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
		return H0BR4_ERR_LSM6DS3;
 800ba22:	2305      	movs	r3, #5
	if (LSM6DS3_ACC_GYRO_ReadReg(&hi2c2, LSM6DS3_ACC_GYRO_OUT_TEMP_L, buff, 2) != MEMS_SUCCESS)
 800ba24:	2801      	cmp	r0, #1
 800ba26:	d110      	bne.n	800ba4a <LSM6DS3SampleTempCelsius+0x3a>
	int16_t rawTemp = concatBytes(buff[0], buff[1]);
 800ba28:	aa01      	add	r2, sp, #4
 800ba2a:	7853      	ldrb	r3, [r2, #1]
 800ba2c:	021b      	lsls	r3, r3, #8
 800ba2e:	7810      	ldrb	r0, [r2, #0]
 800ba30:	4318      	orrs	r0, r3
	*temp = (((float)rawTemp)/16) + 25;
 800ba32:	b200      	sxth	r0, r0
 800ba34:	f7f5 fba8 	bl	8001188 <__aeabi_i2f>
 800ba38:	21f6      	movs	r1, #246	; 0xf6
 800ba3a:	0589      	lsls	r1, r1, #22
 800ba3c:	f7f5 fa52 	bl	8000ee4 <__aeabi_fmul>
 800ba40:	4904      	ldr	r1, [pc, #16]	; (800ba54 <LSM6DS3SampleTempCelsius+0x44>)
 800ba42:	f7f4 fedd 	bl	8000800 <__aeabi_fadd>
 800ba46:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	0018      	movs	r0, r3
 800ba4c:	b002      	add	sp, #8
 800ba4e:	bd10      	pop	{r4, pc}
 800ba50:	20006dec 	.word	0x20006dec
 800ba54:	41c80000 	.word	0x41c80000

0800ba58 <SampleTempCelsius>:

Module_Status SampleTempCelsius(float *temp)
{
 800ba58:	b510      	push	{r4, lr}
	return LSM6DS3SampleTempCelsius(temp);
 800ba5a:	f7ff ffd9 	bl	800ba10 <LSM6DS3SampleTempCelsius>
}
 800ba5e:	bd10      	pop	{r4, pc}

0800ba60 <SampleTempCToString>:
					}
	return status;
}

Module_Status SampleTempCToString(char *cstring, size_t maxLen)
{
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	0005      	movs	r5, r0
 800ba66:	000e      	movs	r6, r1
	Module_Status status = H0BR4_OK;
	float temp;
	
	if ((status = LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800ba68:	a803      	add	r0, sp, #12
 800ba6a:	f7ff ffd1 	bl	800ba10 <LSM6DS3SampleTempCelsius>
 800ba6e:	1e04      	subs	r4, r0, #0
 800ba70:	d002      	beq.n	800ba78 <SampleTempCToString+0x18>
		return status;
	
	snprintf(cstring, maxLen, "Temp(Celsius) | %0.2f\r\n", temp);
	return status;
}
 800ba72:	0020      	movs	r0, r4
 800ba74:	b004      	add	sp, #16
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Temp(Celsius) | %0.2f\r\n", temp);
 800ba78:	9803      	ldr	r0, [sp, #12]
 800ba7a:	f7f7 f96d 	bl	8002d58 <__aeabi_f2d>
 800ba7e:	9000      	str	r0, [sp, #0]
 800ba80:	9101      	str	r1, [sp, #4]
 800ba82:	4a03      	ldr	r2, [pc, #12]	; (800ba90 <SampleTempCToString+0x30>)
 800ba84:	0031      	movs	r1, r6
 800ba86:	0028      	movs	r0, r5
 800ba88:	f008 fe10 	bl	80146ac <snprintf>
	return status;
 800ba8c:	e7f1      	b.n	800ba72 <SampleTempCToString+0x12>
 800ba8e:	46c0      	nop			; (mov r8, r8)
 800ba90:	0801b610 	.word	0x0801b610

0800ba94 <SampleTempCToPort>:
{
 800ba94:	b570      	push	{r4, r5, r6, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	0006      	movs	r6, r0
 800ba9a:	000d      	movs	r5, r1
	if ((status = LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800ba9c:	a803      	add	r0, sp, #12
 800ba9e:	f7ff ffb7 	bl	800ba10 <LSM6DS3SampleTempCelsius>
 800baa2:	1e04      	subs	r4, r0, #0
 800baa4:	d113      	bne.n	800bace <SampleTempCToPort+0x3a>
if (module==myID){
 800baa6:	4b14      	ldr	r3, [pc, #80]	; (800baf8 <SampleTempCToPort+0x64>)
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	42ab      	cmp	r3, r5
 800baac:	d012      	beq.n	800bad4 <SampleTempCToPort+0x40>
						messageParams[0]=port;
 800baae:	4b13      	ldr	r3, [pc, #76]	; (800bafc <SampleTempCToPort+0x68>)
 800bab0:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&temp)+3);
 800bab2:	aa03      	add	r2, sp, #12
 800bab4:	78d1      	ldrb	r1, [r2, #3]
 800bab6:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&temp)+2);
 800bab8:	7891      	ldrb	r1, [r2, #2]
 800baba:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&temp)+1);
 800babc:	7851      	ldrb	r1, [r2, #1]
 800babe:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&temp)+0);
 800bac0:	7812      	ldrb	r2, [r2, #0]
 800bac2:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(module, CODE_PORT_FORWARD, sizeof(float)+1);
 800bac4:	2205      	movs	r2, #5
 800bac6:	2123      	movs	r1, #35	; 0x23
 800bac8:	0028      	movs	r0, r5
 800baca:	f7fa f987 	bl	8005ddc <SendMessageToModule>
}
 800bace:	0020      	movs	r0, r4
 800bad0:	b004      	add	sp, #16
 800bad2:	bd70      	pop	{r4, r5, r6, pc}
						tempD[0] = *((__IO uint8_t *)(&temp)+3);
 800bad4:	ab03      	add	r3, sp, #12
 800bad6:	78da      	ldrb	r2, [r3, #3]
 800bad8:	4909      	ldr	r1, [pc, #36]	; (800bb00 <SampleTempCToPort+0x6c>)
 800bada:	700a      	strb	r2, [r1, #0]
						tempD[1] = *((__IO uint8_t *)(&temp)+2);
 800badc:	789a      	ldrb	r2, [r3, #2]
 800bade:	704a      	strb	r2, [r1, #1]
						tempD[2] = *((__IO uint8_t *)(&temp)+1);
 800bae0:	785a      	ldrb	r2, [r3, #1]
 800bae2:	708a      	strb	r2, [r1, #2]
						tempD[3] = *((__IO uint8_t *)(&temp)+0);
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	70cb      	strb	r3, [r1, #3]
						writePxMutex(port, (char *)&tempD[0], 4*sizeof(uint8_t), 10, 10);
 800bae8:	230a      	movs	r3, #10
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	2204      	movs	r2, #4
 800baee:	0030      	movs	r0, r6
 800baf0:	f002 fa1c 	bl	800df2c <writePxMutex>
 800baf4:	e7eb      	b.n	800bace <SampleTempCToPort+0x3a>
 800baf6:	46c0      	nop			; (mov r8, r8)
 800baf8:	20001298 	.word	0x20001298
 800bafc:	20001164 	.word	0x20001164
 800bb00:	200017ac 	.word	0x200017ac

0800bb04 <StreamMemsToPort>:
{
 800bb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb06:	b085      	sub	sp, #20
 800bb08:	0004      	movs	r4, r0
 800bb0a:	9101      	str	r1, [sp, #4]
 800bb0c:	0017      	movs	r7, r2
 800bb0e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	if (period < MIN_MEMS_PERIOD_MS)
 800bb10:	2ac7      	cmp	r2, #199	; 0xc7
 800bb12:	d931      	bls.n	800bb78 <StreamMemsToPort+0x74>
	if (port == 0)
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d032      	beq.n	800bb7e <StreamMemsToPort+0x7a>
	if (port == PcPort) // Check if CLI is not enabled at that port!
 800bb18:	4a1b      	ldr	r2, [pc, #108]	; (800bb88 <StreamMemsToPort+0x84>)
 800bb1a:	7812      	ldrb	r2, [r2, #0]
 800bb1c:	4282      	cmp	r2, r0
 800bb1e:	d030      	beq.n	800bb82 <StreamMemsToPort+0x7e>
 800bb20:	9703      	str	r7, [sp, #12]
 800bb22:	429f      	cmp	r7, r3
 800bb24:	d200      	bcs.n	800bb28 <StreamMemsToPort+0x24>
 800bb26:	9303      	str	r3, [sp, #12]
	long numTimes = timeout / period;
 800bb28:	0039      	movs	r1, r7
 800bb2a:	9803      	ldr	r0, [sp, #12]
 800bb2c:	f7f4 fb10 	bl	8000150 <__udivsi3>
 800bb30:	0005      	movs	r5, r0
	stopStream = false;
 800bb32:	4b16      	ldr	r3, [pc, #88]	; (800bb8c <StreamMemsToPort+0x88>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	701a      	strb	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(period));
 800bb38:	0178      	lsls	r0, r7, #5
 800bb3a:	1bc0      	subs	r0, r0, r7
 800bb3c:	0080      	lsls	r0, r0, #2
 800bb3e:	19c0      	adds	r0, r0, r7
 800bb40:	00c0      	lsls	r0, r0, #3
 800bb42:	21fa      	movs	r1, #250	; 0xfa
 800bb44:	0089      	lsls	r1, r1, #2
 800bb46:	f7f4 fb03 	bl	8000150 <__udivsi3>
 800bb4a:	9002      	str	r0, [sp, #8]
		if (stopStream) {
 800bb4c:	4f0f      	ldr	r7, [pc, #60]	; (800bb8c <StreamMemsToPort+0x88>)
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800bb4e:	2d00      	cmp	r5, #0
 800bb50:	dd0d      	ble.n	800bb6e <StreamMemsToPort+0x6a>
		if ((status = function(port, module)) != H0BR4_OK)
 800bb52:	9901      	ldr	r1, [sp, #4]
 800bb54:	0020      	movs	r0, r4
 800bb56:	47b0      	blx	r6
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d10e      	bne.n	800bb7a <StreamMemsToPort+0x76>
		vTaskDelay(pdMS_TO_TICKS(period));
 800bb5c:	9802      	ldr	r0, [sp, #8]
 800bb5e:	f003 ff41 	bl	800f9e4 <vTaskDelay>
 800bb62:	3d01      	subs	r5, #1
		if (stopStream) {
 800bb64:	783b      	ldrb	r3, [r7, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d0f1      	beq.n	800bb4e <StreamMemsToPort+0x4a>
			status = H0BR4_ERR_TERMINATED;
 800bb6a:	200a      	movs	r0, #10
 800bb6c:	e005      	b.n	800bb7a <StreamMemsToPort+0x76>
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800bb6e:	9b03      	ldr	r3, [sp, #12]
 800bb70:	3301      	adds	r3, #1
 800bb72:	d0ee      	beq.n	800bb52 <StreamMemsToPort+0x4e>
 800bb74:	2000      	movs	r0, #0
 800bb76:	e000      	b.n	800bb7a <StreamMemsToPort+0x76>
		return H0BR4_ERR_WrongParams;
 800bb78:	200b      	movs	r0, #11
}
 800bb7a:	b005      	add	sp, #20
 800bb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return H0BR4_ERR_WrongParams;
 800bb7e:	200b      	movs	r0, #11
 800bb80:	e7fb      	b.n	800bb7a <StreamMemsToPort+0x76>
		return H0BR4_ERR_BUSY;
 800bb82:	2007      	movs	r0, #7
 800bb84:	e7f9      	b.n	800bb7a <StreamMemsToPort+0x76>
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	20000abf 	.word	0x20000abf
 800bb8c:	20001784 	.word	0x20001784

0800bb90 <StreamMemsToCLI>:
{
 800bb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb92:	46de      	mov	lr, fp
 800bb94:	4657      	mov	r7, sl
 800bb96:	464e      	mov	r6, r9
 800bb98:	4645      	mov	r5, r8
 800bb9a:	b5e0      	push	{r5, r6, r7, lr}
 800bb9c:	b087      	sub	sp, #28
 800bb9e:	0004      	movs	r4, r0
 800bba0:	4692      	mov	sl, r2
	if (period < MIN_MEMS_PERIOD_MS)
 800bba2:	28c7      	cmp	r0, #199	; 0xc7
 800bba4:	d800      	bhi.n	800bba8 <StreamMemsToCLI+0x18>
 800bba6:	e07f      	b.n	800bca8 <StreamMemsToCLI+0x118>
 800bba8:	9004      	str	r0, [sp, #16]
 800bbaa:	4288      	cmp	r0, r1
 800bbac:	d200      	bcs.n	800bbb0 <StreamMemsToCLI+0x20>
 800bbae:	9104      	str	r1, [sp, #16]
	long numTimes = timeout / period;
 800bbb0:	0021      	movs	r1, r4
 800bbb2:	9804      	ldr	r0, [sp, #16]
 800bbb4:	f7f4 facc 	bl	8000150 <__udivsi3>
 800bbb8:	0007      	movs	r7, r0
	stopStream = false;
 800bbba:	4b3c      	ldr	r3, [pc, #240]	; (800bcac <StreamMemsToCLI+0x11c>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	701a      	strb	r2, [r3, #0]
	long numDeltaDelay =  period / DELTA_SLEEP_MS;
 800bbc0:	2164      	movs	r1, #100	; 0x64
 800bbc2:	0020      	movs	r0, r4
 800bbc4:	f7f4 fac4 	bl	8000150 <__udivsi3>
 800bbc8:	9003      	str	r0, [sp, #12]
	unsigned lastDelayMS = period % DELTA_SLEEP_MS;
 800bbca:	2164      	movs	r1, #100	; 0x64
 800bbcc:	0020      	movs	r0, r4
 800bbce:	f7f4 fb45 	bl	800025c <__aeabi_uidivmod>
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800bbd2:	0148      	lsls	r0, r1, #5
 800bbd4:	1a40      	subs	r0, r0, r1
 800bbd6:	0080      	lsls	r0, r0, #2
 800bbd8:	1840      	adds	r0, r0, r1
 800bbda:	00c0      	lsls	r0, r0, #3
 800bbdc:	21fa      	movs	r1, #250	; 0xfa
 800bbde:	0089      	lsls	r1, r1, #2
 800bbe0:	f7f4 fab6 	bl	8000150 <__udivsi3>
 800bbe4:	9005      	str	r0, [sp, #20]
	int8_t *pcOutputString = NULL;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	9302      	str	r3, [sp, #8]
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800bbea:	4b31      	ldr	r3, [pc, #196]	; (800bcb0 <StreamMemsToCLI+0x120>)
 800bbec:	4699      	mov	r9, r3
 800bbee:	4b31      	ldr	r3, [pc, #196]	; (800bcb4 <StreamMemsToCLI+0x124>)
 800bbf0:	4698      	mov	r8, r3
 800bbf2:	469b      	mov	fp, r3
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800bbf4:	2f00      	cmp	r7, #0
 800bbf6:	dd52      	ble.n	800bc9e <StreamMemsToCLI+0x10e>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800bbf8:	f002 ff7a 	bl	800eaf0 <FreeRTOS_CLIGetOutputBuffer>
 800bbfc:	0004      	movs	r4, r0
 800bbfe:	9002      	str	r0, [sp, #8]
		if ((status = function((char *)pcOutputString, 100)) != H0BR4_OK)
 800bc00:	2164      	movs	r1, #100	; 0x64
 800bc02:	47d0      	blx	sl
 800bc04:	1e05      	subs	r5, r0, #0
 800bc06:	d131      	bne.n	800bc6c <StreamMemsToCLI+0xdc>
		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800bc08:	0020      	movs	r0, r4
 800bc0a:	f7f4 fa85 	bl	8000118 <strlen>
 800bc0e:	23fa      	movs	r3, #250	; 0xfa
 800bc10:	b282      	uxth	r2, r0
 800bc12:	4927      	ldr	r1, [pc, #156]	; (800bcb0 <StreamMemsToCLI+0x120>)
 800bc14:	7808      	ldrb	r0, [r1, #0]
 800bc16:	2101      	movs	r1, #1
 800bc18:	4249      	negs	r1, r1
 800bc1a:	9100      	str	r1, [sp, #0]
 800bc1c:	005b      	lsls	r3, r3, #1
 800bc1e:	0021      	movs	r1, r4
 800bc20:	f002 f984 	bl	800df2c <writePxMutex>
 800bc24:	9e03      	ldr	r6, [sp, #12]
	while (numDeltaDelay-- > 0) {
 800bc26:	2e00      	cmp	r6, #0
 800bc28:	dd34      	ble.n	800bc94 <StreamMemsToCLI+0x104>
		vTaskDelay(pdMS_TO_TICKS(DELTA_SLEEP_MS));
 800bc2a:	2064      	movs	r0, #100	; 0x64
 800bc2c:	f003 feda 	bl	800f9e4 <vTaskDelay>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800bc30:	464b      	mov	r3, r9
 800bc32:	781c      	ldrb	r4, [r3, #0]
 800bc34:	3c01      	subs	r4, #1
 800bc36:	01a3      	lsls	r3, r4, #6
 800bc38:	4642      	mov	r2, r8
 800bc3a:	5c9b      	ldrb	r3, [r3, r2]
 800bc3c:	2b0d      	cmp	r3, #13
 800bc3e:	d00f      	beq.n	800bc60 <StreamMemsToCLI+0xd0>
 800bc40:	01a1      	lsls	r1, r4, #6
 800bc42:	4459      	add	r1, fp
 800bc44:	2301      	movs	r3, #1
 800bc46:	0018      	movs	r0, r3
 800bc48:	5cca      	ldrb	r2, [r1, r3]
 800bc4a:	2a0d      	cmp	r2, #13
 800bc4c:	d009      	beq.n	800bc62 <StreamMemsToCLI+0xd2>
 800bc4e:	3301      	adds	r3, #1
		for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800bc50:	2b40      	cmp	r3, #64	; 0x40
 800bc52:	d1f8      	bne.n	800bc46 <StreamMemsToCLI+0xb6>
 800bc54:	3e01      	subs	r6, #1
		if (stopStream)
 800bc56:	4b15      	ldr	r3, [pc, #84]	; (800bcac <StreamMemsToCLI+0x11c>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0e3      	beq.n	800bc26 <StreamMemsToCLI+0x96>
 800bc5e:	e005      	b.n	800bc6c <StreamMemsToCLI+0xdc>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800bc60:	2000      	movs	r0, #0
				UARTRxBuf[PcPort-1][chr] = 0;
 800bc62:	01a3      	lsls	r3, r4, #6
 800bc64:	4a13      	ldr	r2, [pc, #76]	; (800bcb4 <StreamMemsToCLI+0x124>)
 800bc66:	18d3      	adds	r3, r2, r3
 800bc68:	2200      	movs	r2, #0
 800bc6a:	541a      	strb	r2, [r3, r0]
	memset((char *) pcOutputString, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800bc6c:	2299      	movs	r2, #153	; 0x99
 800bc6e:	0092      	lsls	r2, r2, #2
 800bc70:	2100      	movs	r1, #0
 800bc72:	9c02      	ldr	r4, [sp, #8]
 800bc74:	0020      	movs	r0, r4
 800bc76:	f008 fb1f 	bl	80142b8 <memset>
  sprintf((char *)pcOutputString, "\r\n");
 800bc7a:	2203      	movs	r2, #3
 800bc7c:	490e      	ldr	r1, [pc, #56]	; (800bcb8 <StreamMemsToCLI+0x128>)
 800bc7e:	0020      	movs	r0, r4
 800bc80:	f008 fb11 	bl	80142a6 <memcpy>
}
 800bc84:	0028      	movs	r0, r5
 800bc86:	b007      	add	sp, #28
 800bc88:	bc3c      	pop	{r2, r3, r4, r5}
 800bc8a:	4690      	mov	r8, r2
 800bc8c:	4699      	mov	r9, r3
 800bc8e:	46a2      	mov	sl, r4
 800bc90:	46ab      	mov	fp, r5
 800bc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800bc94:	3f01      	subs	r7, #1
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800bc96:	9805      	ldr	r0, [sp, #20]
 800bc98:	f003 fea4 	bl	800f9e4 <vTaskDelay>
 800bc9c:	e7aa      	b.n	800bbf4 <StreamMemsToCLI+0x64>
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800bc9e:	9b04      	ldr	r3, [sp, #16]
 800bca0:	3301      	adds	r3, #1
 800bca2:	d0a9      	beq.n	800bbf8 <StreamMemsToCLI+0x68>
 800bca4:	2500      	movs	r5, #0
 800bca6:	e7e1      	b.n	800bc6c <StreamMemsToCLI+0xdc>
		return H0BR4_ERR_WrongParams;
 800bca8:	250b      	movs	r5, #11
 800bcaa:	e7eb      	b.n	800bc84 <StreamMemsToCLI+0xf4>
 800bcac:	20001784 	.word	0x20001784
 800bcb0:	20000abf 	.word	0x20000abf
 800bcb4:	2000151c 	.word	0x2000151c
 800bcb8:	0801a54c 	.word	0x0801a54c

0800bcbc <StopStreamCommand>:
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
	return pdFALSE;
}

static portBASE_TYPE StopStreamCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 800bcbc:	b510      	push	{r4, lr}
	// Make sure we return something
	pcWriteBuffer[0] = '\0';
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	7003      	strb	r3, [r0, #0]
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Stopping Streaming MEMS...\r\n");
 800bcc2:	4a04      	ldr	r2, [pc, #16]	; (800bcd4 <StopStreamCommand+0x18>)
 800bcc4:	f008 fcf2 	bl	80146ac <snprintf>
	stopStream = true;
 800bcc8:	4b03      	ldr	r3, [pc, #12]	; (800bcd8 <StopStreamCommand+0x1c>)
 800bcca:	2201      	movs	r2, #1
 800bccc:	701a      	strb	r2, [r3, #0]
	
	stopStreamMems();
	return pdFALSE;
}
 800bcce:	2000      	movs	r0, #0
 800bcd0:	bd10      	pop	{r4, pc}
 800bcd2:	46c0      	nop			; (mov r8, r8)
 800bcd4:	0801b638 	.word	0x0801b638
 800bcd8:	20001784 	.word	0x20001784

0800bcdc <Module_Init>:
{
 800bcdc:	b500      	push	{lr}
 800bcde:	b083      	sub	sp, #12
  MX_USART1_UART_Init();
 800bce0:	f001 ff5c 	bl	800db9c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800bce4:	f001 ff72 	bl	800dbcc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800bce8:	f001 ff88 	bl	800dbfc <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800bcec:	f001 ff9e 	bl	800dc2c <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800bcf0:	f001 ffb4 	bl	800dc5c <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800bcf4:	f001 ffca 	bl	800dc8c <MX_USART6_UART_Init>
	MX_I2C_Init();
 800bcf8:	f001 fdda 	bl	800d8b0 <MX_I2C_Init>
	uint8_t who_am_i = 0;
 800bcfc:	466b      	mov	r3, sp
 800bcfe:	1dd9      	adds	r1, r3, #7
 800bd00:	2300      	movs	r3, #0
 800bd02:	700b      	strb	r3, [r1, #0]
	if (LSM6DS3_ACC_GYRO_R_WHO_AM_I(&hi2c2, &who_am_i) != MEMS_SUCCESS)
 800bd04:	4845      	ldr	r0, [pc, #276]	; (800be1c <Module_Init+0x140>)
 800bd06:	f002 faa9 	bl	800e25c <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 800bd0a:	2801      	cmp	r0, #1
 800bd0c:	d104      	bne.n	800bd18 <Module_Init+0x3c>
	if (who_am_i != LSM6DS3_ACC_GYRO_WHO_AM_I)
 800bd0e:	466b      	mov	r3, sp
 800bd10:	3307      	adds	r3, #7
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	2b69      	cmp	r3, #105	; 0x69
 800bd16:	d00f      	beq.n	800bd38 <Module_Init+0x5c>
	uint8_t who_am_i = 0x00;
 800bd18:	466b      	mov	r3, sp
 800bd1a:	1dd9      	adds	r1, r3, #7
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	700b      	strb	r3, [r1, #0]
  if (LSM303AGR_MAG_R_WHO_AM_I(&hi2c2, &who_am_i ) != MEMS_SUCCESS)
 800bd20:	483e      	ldr	r0, [pc, #248]	; (800be1c <Module_Init+0x140>)
 800bd22:	f002 fa01 	bl	800e128 <LSM303AGR_MAG_R_WHO_AM_I>
 800bd26:	2801      	cmp	r0, #1
 800bd28:	d104      	bne.n	800bd34 <Module_Init+0x58>
  if (who_am_i != LSM303AGR_MAG_WHO_AM_I)
 800bd2a:	466b      	mov	r3, sp
 800bd2c:	3307      	adds	r3, #7
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b40      	cmp	r3, #64	; 0x40
 800bd32:	d054      	beq.n	800bdde <Module_Init+0x102>
}
 800bd34:	b003      	add	sp, #12
 800bd36:	bd00      	pop	{pc}
	if (LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(&hi2c2, LSM6DS3_ACC_GYRO_IF_INC_ENABLED) != MEMS_SUCCESS)
 800bd38:	2104      	movs	r1, #4
 800bd3a:	4838      	ldr	r0, [pc, #224]	; (800be1c <Module_Init+0x140>)
 800bd3c:	f002 fbb1 	bl	800e4a2 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>
 800bd40:	2801      	cmp	r0, #1
 800bd42:	d1e9      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_FIFO_MODE(&hi2c2, LSM6DS3_ACC_GYRO_FIFO_MODE_BYPASS) != MEMS_SUCCESS)
 800bd44:	2100      	movs	r1, #0
 800bd46:	4835      	ldr	r0, [pc, #212]	; (800be1c <Module_Init+0x140>)
 800bd48:	f002 fb8d 	bl	800e466 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>
 800bd4c:	2801      	cmp	r0, #1
 800bd4e:	d1e3      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ODR_G(&hi2c2, LSM6DS3_ACC_GYRO_ODR_G_13Hz) != MEMS_SUCCESS)
 800bd50:	2110      	movs	r1, #16
 800bd52:	4832      	ldr	r0, [pc, #200]	; (800be1c <Module_Init+0x140>)
 800bd54:	f002 fb20 	bl	800e398 <LSM6DS3_ACC_GYRO_W_ODR_G>
 800bd58:	2801      	cmp	r0, #1
 800bd5a:	d1dd      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_FS_G(&hi2c2, LSM6DS3_ACC_GYRO_FS_G_2000dps) != MEMS_SUCCESS)
 800bd5c:	210c      	movs	r1, #12
 800bd5e:	482f      	ldr	r0, [pc, #188]	; (800be1c <Module_Init+0x140>)
 800bd60:	f002 faed 	bl	800e33e <LSM6DS3_ACC_GYRO_W_FS_G>
 800bd64:	2801      	cmp	r0, #1
 800bd66:	d1d7      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_XEN_G(&hi2c2, LSM6DS3_ACC_GYRO_XEN_G_ENABLED) != MEMS_SUCCESS)
 800bd68:	2108      	movs	r1, #8
 800bd6a:	482c      	ldr	r0, [pc, #176]	; (800be1c <Module_Init+0x140>)
 800bd6c:	f002 fc2f 	bl	800e5ce <LSM6DS3_ACC_GYRO_W_XEN_G>
 800bd70:	2801      	cmp	r0, #1
 800bd72:	d1d1      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_YEN_G(&hi2c2, LSM6DS3_ACC_GYRO_YEN_G_ENABLED) != MEMS_SUCCESS)
 800bd74:	2110      	movs	r1, #16
 800bd76:	4829      	ldr	r0, [pc, #164]	; (800be1c <Module_Init+0x140>)
 800bd78:	f002 fc47 	bl	800e60a <LSM6DS3_ACC_GYRO_W_YEN_G>
 800bd7c:	2801      	cmp	r0, #1
 800bd7e:	d1cb      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ZEN_G(&hi2c2, LSM6DS3_ACC_GYRO_ZEN_G_ENABLED) != MEMS_SUCCESS)
 800bd80:	2120      	movs	r1, #32
 800bd82:	4826      	ldr	r0, [pc, #152]	; (800be1c <Module_Init+0x140>)
 800bd84:	f002 fc5f 	bl	800e646 <LSM6DS3_ACC_GYRO_W_ZEN_G>
 800bd88:	2801      	cmp	r0, #1
 800bd8a:	d1c5      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ODR_XL(&hi2c2, LSM6DS3_ACC_GYRO_ODR_XL_104Hz) != MEMS_SUCCESS)
 800bd8c:	2140      	movs	r1, #64	; 0x40
 800bd8e:	4823      	ldr	r0, [pc, #140]	; (800be1c <Module_Init+0x140>)
 800bd90:	f002 fab7 	bl	800e302 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 800bd94:	2801      	cmp	r0, #1
 800bd96:	d1bf      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_BW_XL(&hi2c2, LSM6DS3_ACC_GYRO_BW_XL_50Hz) != MEMS_SUCCESS)
 800bd98:	2103      	movs	r1, #3
 800bd9a:	4820      	ldr	r0, [pc, #128]	; (800be1c <Module_Init+0x140>)
 800bd9c:	f002 fb36 	bl	800e40c <LSM6DS3_ACC_GYRO_W_BW_XL>
 800bda0:	2801      	cmp	r0, #1
 800bda2:	d1b9      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_FS_XL(&hi2c2, LSM6DS3_ACC_GYRO_FS_XL_16g) != MEMS_SUCCESS)
 800bda4:	2104      	movs	r1, #4
 800bda6:	481d      	ldr	r0, [pc, #116]	; (800be1c <Module_Init+0x140>)
 800bda8:	f002 fa62 	bl	800e270 <LSM6DS3_ACC_GYRO_W_FS_XL>
 800bdac:	2801      	cmp	r0, #1
 800bdae:	d1b3      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_XEN_XL(&hi2c2, LSM6DS3_ACC_GYRO_XEN_XL_ENABLED) != MEMS_SUCCESS)
 800bdb0:	2108      	movs	r1, #8
 800bdb2:	481a      	ldr	r0, [pc, #104]	; (800be1c <Module_Init+0x140>)
 800bdb4:	f002 fbb1 	bl	800e51a <LSM6DS3_ACC_GYRO_W_XEN_XL>
 800bdb8:	2801      	cmp	r0, #1
 800bdba:	d1ad      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_YEN_XL(&hi2c2, LSM6DS3_ACC_GYRO_YEN_XL_ENABLED) != MEMS_SUCCESS)
 800bdbc:	2110      	movs	r1, #16
 800bdbe:	4817      	ldr	r0, [pc, #92]	; (800be1c <Module_Init+0x140>)
 800bdc0:	f002 fbc9 	bl	800e556 <LSM6DS3_ACC_GYRO_W_YEN_XL>
 800bdc4:	2801      	cmp	r0, #1
 800bdc6:	d1a7      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ZEN_XL(&hi2c2, LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED) != MEMS_SUCCESS)
 800bdc8:	2120      	movs	r1, #32
 800bdca:	4814      	ldr	r0, [pc, #80]	; (800be1c <Module_Init+0x140>)
 800bdcc:	f002 fbe1 	bl	800e592 <LSM6DS3_ACC_GYRO_W_ZEN_XL>
 800bdd0:	2801      	cmp	r0, #1
 800bdd2:	d1a1      	bne.n	800bd18 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR(&hi2c2, LSM6DS3_ACC_GYRO_BW_SCAL_ODR_ENABLED) != MEMS_ERROR)
 800bdd4:	2180      	movs	r1, #128	; 0x80
 800bdd6:	4811      	ldr	r0, [pc, #68]	; (800be1c <Module_Init+0x140>)
 800bdd8:	f002 fb81 	bl	800e4de <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR>
 800bddc:	e79c      	b.n	800bd18 <Module_Init+0x3c>
	if (LSM303AGR_MAG_W_MD(&hi2c2, LSM303AGR_MAG_MD_IDLE1_MODE) != MEMS_SUCCESS)
 800bdde:	2102      	movs	r1, #2
 800bde0:	480e      	ldr	r0, [pc, #56]	; (800be1c <Module_Init+0x140>)
 800bde2:	f002 f9c9 	bl	800e178 <LSM303AGR_MAG_W_MD>
 800bde6:	2801      	cmp	r0, #1
 800bde8:	d1a4      	bne.n	800bd34 <Module_Init+0x58>
  if (LSM303AGR_MAG_W_BDU(&hi2c2, LSM303AGR_MAG_BDU_ENABLED ) != MEMS_SUCCESS)
 800bdea:	2110      	movs	r1, #16
 800bdec:	480b      	ldr	r0, [pc, #44]	; (800be1c <Module_Init+0x140>)
 800bdee:	f002 f9a5 	bl	800e13c <LSM303AGR_MAG_W_BDU>
 800bdf2:	2801      	cmp	r0, #1
 800bdf4:	d19e      	bne.n	800bd34 <Module_Init+0x58>
	if (LSM303AGR_MAG_W_ODR(&hi2c2, LSM303AGR_MAG_ODR_10Hz) != MEMS_SUCCESS)
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	4808      	ldr	r0, [pc, #32]	; (800be1c <Module_Init+0x140>)
 800bdfa:	f002 f9e5 	bl	800e1c8 <LSM303AGR_MAG_W_ODR>
 800bdfe:	2801      	cmp	r0, #1
 800be00:	d198      	bne.n	800bd34 <Module_Init+0x58>
	if (LSM303AGR_MAG_W_ST(&hi2c2, LSM303AGR_MAG_ST_DISABLED) != MEMS_SUCCESS)
 800be02:	2100      	movs	r1, #0
 800be04:	4805      	ldr	r0, [pc, #20]	; (800be1c <Module_Init+0x140>)
 800be06:	f002 f9fd 	bl	800e204 <LSM303AGR_MAG_W_ST>
 800be0a:	2801      	cmp	r0, #1
 800be0c:	d000      	beq.n	800be10 <Module_Init+0x134>
 800be0e:	e791      	b.n	800bd34 <Module_Init+0x58>
	if (LSM303AGR_MAG_W_MD(&hi2c2, LSM303AGR_MAG_MD_CONTINUOS_MODE) != MEMS_SUCCESS)
 800be10:	2100      	movs	r1, #0
 800be12:	4802      	ldr	r0, [pc, #8]	; (800be1c <Module_Init+0x140>)
 800be14:	f002 f9b0 	bl	800e178 <LSM303AGR_MAG_W_MD>
}
 800be18:	e78c      	b.n	800bd34 <Module_Init+0x58>
 800be1a:	46c0      	nop			; (mov r8, r8)
 800be1c:	20006dec 	.word	0x20006dec

0800be20 <RegisterModuleCLICommands>:
{
 800be20:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&SampleCommandDefinition);
 800be22:	4805      	ldr	r0, [pc, #20]	; (800be38 <RegisterModuleCLICommands+0x18>)
 800be24:	f002 fdca 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&StreamCommandDefinition);
 800be28:	4804      	ldr	r0, [pc, #16]	; (800be3c <RegisterModuleCLICommands+0x1c>)
 800be2a:	f002 fdc7 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&StopCommandDefinition);
 800be2e:	4804      	ldr	r0, [pc, #16]	; (800be40 <RegisterModuleCLICommands+0x20>)
 800be30:	f002 fdc4 	bl	800e9bc <FreeRTOS_CLIRegisterCommand>
}
 800be34:	bd10      	pop	{r4, pc}
 800be36:	46c0      	nop			; (mov r8, r8)
 800be38:	0801b570 	.word	0x0801b570
 800be3c:	0801b658 	.word	0x0801b658
 800be40:	0801b628 	.word	0x0801b628

0800be44 <GetPort>:
	if (huart->Instance == USART4)
 800be44:	6800      	ldr	r0, [r0, #0]
 800be46:	4b11      	ldr	r3, [pc, #68]	; (800be8c <GetPort+0x48>)
 800be48:	4298      	cmp	r0, r3
 800be4a:	d014      	beq.n	800be76 <GetPort+0x32>
	else if (huart->Instance == USART2)
 800be4c:	4b10      	ldr	r3, [pc, #64]	; (800be90 <GetPort+0x4c>)
 800be4e:	4298      	cmp	r0, r3
 800be50:	d013      	beq.n	800be7a <GetPort+0x36>
	else if (huart->Instance == USART6)
 800be52:	4b10      	ldr	r3, [pc, #64]	; (800be94 <GetPort+0x50>)
 800be54:	4298      	cmp	r0, r3
 800be56:	d012      	beq.n	800be7e <GetPort+0x3a>
	else if (huart->Instance == USART3)
 800be58:	4b0f      	ldr	r3, [pc, #60]	; (800be98 <GetPort+0x54>)
 800be5a:	4298      	cmp	r0, r3
 800be5c:	d011      	beq.n	800be82 <GetPort+0x3e>
	else if (huart->Instance == USART1)
 800be5e:	4b0f      	ldr	r3, [pc, #60]	; (800be9c <GetPort+0x58>)
 800be60:	4298      	cmp	r0, r3
 800be62:	d010      	beq.n	800be86 <GetPort+0x42>
	return 0;
 800be64:	4b0e      	ldr	r3, [pc, #56]	; (800bea0 <GetPort+0x5c>)
 800be66:	469c      	mov	ip, r3
 800be68:	4460      	add	r0, ip
 800be6a:	4243      	negs	r3, r0
 800be6c:	4158      	adcs	r0, r3
 800be6e:	4240      	negs	r0, r0
 800be70:	2306      	movs	r3, #6
 800be72:	4018      	ands	r0, r3
}
 800be74:	4770      	bx	lr
		return P1;
 800be76:	2001      	movs	r0, #1
 800be78:	e7fc      	b.n	800be74 <GetPort+0x30>
		return P2;
 800be7a:	2002      	movs	r0, #2
 800be7c:	e7fa      	b.n	800be74 <GetPort+0x30>
		return P3;
 800be7e:	2003      	movs	r0, #3
 800be80:	e7f8      	b.n	800be74 <GetPort+0x30>
		return P4;
 800be82:	2004      	movs	r0, #4
 800be84:	e7f6      	b.n	800be74 <GetPort+0x30>
		return P5;
 800be86:	2005      	movs	r0, #5
 800be88:	e7f4      	b.n	800be74 <GetPort+0x30>
 800be8a:	46c0      	nop			; (mov r8, r8)
 800be8c:	40004c00 	.word	0x40004c00
 800be90:	40004400 	.word	0x40004400
 800be94:	40011400 	.word	0x40011400
 800be98:	40004800 	.word	0x40004800
 800be9c:	40013800 	.word	0x40013800
 800bea0:	bfffb000 	.word	0xbfffb000

0800bea4 <SampleGyroDPS>:
{
 800bea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bea6:	46c6      	mov	lr, r8
 800bea8:	b500      	push	{lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	0006      	movs	r6, r0
 800beae:	000d      	movs	r5, r1
 800beb0:	0014      	movs	r4, r2
	if (LSM6DS3_ACC_Get_AngularRate(&hi2c2, buff, 0) != MEMS_SUCCESS)
 800beb2:	2200      	movs	r2, #0
 800beb4:	a901      	add	r1, sp, #4
 800beb6:	4812      	ldr	r0, [pc, #72]	; (800bf00 <SampleGyroDPS+0x5c>)
 800beb8:	f002 fc6e 	bl	800e798 <LSM6DS3_ACC_Get_AngularRate>
		return H0BR4_ERR_LSM6DS3;
 800bebc:	2305      	movs	r3, #5
	if (LSM6DS3_ACC_Get_AngularRate(&hi2c2, buff, 0) != MEMS_SUCCESS)
 800bebe:	2801      	cmp	r0, #1
 800bec0:	d118      	bne.n	800bef4 <SampleGyroDPS+0x50>
	*gyroY = buff[1];
 800bec2:	9b02      	ldr	r3, [sp, #8]
 800bec4:	4698      	mov	r8, r3
	*gyroZ = buff[2];
 800bec6:	9f03      	ldr	r7, [sp, #12]
	*x = ((float)xInMDPS) / 1000;
 800bec8:	9801      	ldr	r0, [sp, #4]
 800beca:	f7f5 f95d 	bl	8001188 <__aeabi_i2f>
 800bece:	490d      	ldr	r1, [pc, #52]	; (800bf04 <SampleGyroDPS+0x60>)
 800bed0:	f7f4 fe30 	bl	8000b34 <__aeabi_fdiv>
 800bed4:	6030      	str	r0, [r6, #0]
	*y = ((float)yInMDPS) / 1000;
 800bed6:	4640      	mov	r0, r8
 800bed8:	f7f5 f956 	bl	8001188 <__aeabi_i2f>
 800bedc:	4909      	ldr	r1, [pc, #36]	; (800bf04 <SampleGyroDPS+0x60>)
 800bede:	f7f4 fe29 	bl	8000b34 <__aeabi_fdiv>
 800bee2:	6028      	str	r0, [r5, #0]
	*z = ((float)zInMDPS) / 1000;
 800bee4:	0038      	movs	r0, r7
 800bee6:	f7f5 f94f 	bl	8001188 <__aeabi_i2f>
 800beea:	4906      	ldr	r1, [pc, #24]	; (800bf04 <SampleGyroDPS+0x60>)
 800beec:	f7f4 fe22 	bl	8000b34 <__aeabi_fdiv>
 800bef0:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	0018      	movs	r0, r3
 800bef6:	b004      	add	sp, #16
 800bef8:	bc04      	pop	{r2}
 800befa:	4690      	mov	r8, r2
 800befc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800befe:	46c0      	nop			; (mov r8, r8)
 800bf00:	20006dec 	.word	0x20006dec
 800bf04:	447a0000 	.word	0x447a0000

0800bf08 <SampleGyroDPSToString>:
{
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	b08a      	sub	sp, #40	; 0x28
 800bf0c:	0005      	movs	r5, r0
 800bf0e:	000e      	movs	r6, r1
	float x = 0, y = 0, z = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	9309      	str	r3, [sp, #36]	; 0x24
 800bf14:	9308      	str	r3, [sp, #32]
 800bf16:	9307      	str	r3, [sp, #28]
	if ((status = SampleGyroDPS(&x, &y, &z)) != H0BR4_OK)
 800bf18:	aa07      	add	r2, sp, #28
 800bf1a:	a908      	add	r1, sp, #32
 800bf1c:	a809      	add	r0, sp, #36	; 0x24
 800bf1e:	f7ff ffc1 	bl	800bea4 <SampleGyroDPS>
 800bf22:	1e04      	subs	r4, r0, #0
 800bf24:	d002      	beq.n	800bf2c <SampleGyroDPSToString+0x24>
}
 800bf26:	0020      	movs	r0, r4
 800bf28:	b00a      	add	sp, #40	; 0x28
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Gyro(DPS) | X: %.2f, Y: %.2f, Z: %.2f\r\n", x, y, z);
 800bf2c:	9807      	ldr	r0, [sp, #28]
 800bf2e:	f7f6 ff13 	bl	8002d58 <__aeabi_f2d>
 800bf32:	9004      	str	r0, [sp, #16]
 800bf34:	9105      	str	r1, [sp, #20]
 800bf36:	9808      	ldr	r0, [sp, #32]
 800bf38:	f7f6 ff0e 	bl	8002d58 <__aeabi_f2d>
 800bf3c:	9002      	str	r0, [sp, #8]
 800bf3e:	9103      	str	r1, [sp, #12]
 800bf40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf42:	f7f6 ff09 	bl	8002d58 <__aeabi_f2d>
 800bf46:	9000      	str	r0, [sp, #0]
 800bf48:	9101      	str	r1, [sp, #4]
 800bf4a:	4a03      	ldr	r2, [pc, #12]	; (800bf58 <SampleGyroDPSToString+0x50>)
 800bf4c:	0031      	movs	r1, r6
 800bf4e:	0028      	movs	r0, r5
 800bf50:	f008 fbac 	bl	80146ac <snprintf>
	return status;
 800bf54:	e7e7      	b.n	800bf26 <SampleGyroDPSToString+0x1e>
 800bf56:	46c0      	nop			; (mov r8, r8)
 800bf58:	0801b580 	.word	0x0801b580

0800bf5c <SampleGyroDPSToBuf>:
{
 800bf5c:	b510      	push	{r4, lr}
	return SampleGyroDPS(buffer, buffer + 1, buffer + 2);
 800bf5e:	0002      	movs	r2, r0
 800bf60:	3208      	adds	r2, #8
 800bf62:	1d01      	adds	r1, r0, #4
 800bf64:	f7ff ff9e 	bl	800bea4 <SampleGyroDPS>
}
 800bf68:	bd10      	pop	{r4, pc}
	...

0800bf6c <SampleGyroDPSToPort>:
{
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	0006      	movs	r6, r0
 800bf72:	000d      	movs	r5, r1
	if ((status = SampleGyroDPSToBuf(buffer)) != H0BR4_OK)
 800bf74:	a801      	add	r0, sp, #4
 800bf76:	f7ff fff1 	bl	800bf5c <SampleGyroDPSToBuf>
 800bf7a:	1e04      	subs	r4, r0, #0
 800bf7c:	d123      	bne.n	800bfc6 <SampleGyroDPSToPort+0x5a>
	if (module==myID){
 800bf7e:	4b23      	ldr	r3, [pc, #140]	; (800c00c <SampleGyroDPSToPort+0xa0>)
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	42ab      	cmp	r3, r5
 800bf84:	d022      	beq.n	800bfcc <SampleGyroDPSToPort+0x60>
						messageParams[0]=port;
 800bf86:	4b22      	ldr	r3, [pc, #136]	; (800c010 <SampleGyroDPSToPort+0xa4>)
 800bf88:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&buffer[0])+3);  messageParams[2] = *((__IO uint8_t *)(&buffer[0])+2);
 800bf8a:	aa01      	add	r2, sp, #4
 800bf8c:	78d1      	ldrb	r1, [r2, #3]
 800bf8e:	7059      	strb	r1, [r3, #1]
 800bf90:	7891      	ldrb	r1, [r2, #2]
 800bf92:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&buffer[0])+1);  messageParams[4] = *((__IO uint8_t *)(&buffer[0])+0);
 800bf94:	7851      	ldrb	r1, [r2, #1]
 800bf96:	70d9      	strb	r1, [r3, #3]
 800bf98:	7811      	ldrb	r1, [r2, #0]
 800bf9a:	7119      	strb	r1, [r3, #4]
					  messageParams[5] = *((__IO uint8_t *)(&buffer[1])+3);  messageParams[6] = *((__IO uint8_t *)(&buffer[1])+2);
 800bf9c:	79d1      	ldrb	r1, [r2, #7]
 800bf9e:	7159      	strb	r1, [r3, #5]
 800bfa0:	7991      	ldrb	r1, [r2, #6]
 800bfa2:	7199      	strb	r1, [r3, #6]
						messageParams[7] = *((__IO uint8_t *)(&buffer[1])+1);  messageParams[8] = *((__IO uint8_t *)(&buffer[1])+0);
 800bfa4:	7951      	ldrb	r1, [r2, #5]
 800bfa6:	71d9      	strb	r1, [r3, #7]
 800bfa8:	7911      	ldrb	r1, [r2, #4]
 800bfaa:	7219      	strb	r1, [r3, #8]
					  messageParams[9] = *((__IO uint8_t *)(&buffer[2])+3);  messageParams[10] = *((__IO uint8_t *)(&buffer[2])+2);
 800bfac:	7ad1      	ldrb	r1, [r2, #11]
 800bfae:	7259      	strb	r1, [r3, #9]
 800bfb0:	7a91      	ldrb	r1, [r2, #10]
 800bfb2:	7299      	strb	r1, [r3, #10]
						messageParams[11] = *((__IO uint8_t *)(&buffer[2])+1); messageParams[12] = *((__IO uint8_t *)(&buffer[2])+0);
 800bfb4:	7a51      	ldrb	r1, [r2, #9]
 800bfb6:	72d9      	strb	r1, [r3, #11]
 800bfb8:	7a12      	ldrb	r2, [r2, #8]
 800bfba:	731a      	strb	r2, [r3, #12]
						SendMessageToModule(module, CODE_PORT_FORWARD, (sizeof(float)*3)+1);
 800bfbc:	220d      	movs	r2, #13
 800bfbe:	2123      	movs	r1, #35	; 0x23
 800bfc0:	0028      	movs	r0, r5
 800bfc2:	f7f9 ff0b 	bl	8005ddc <SendMessageToModule>
}
 800bfc6:	0020      	movs	r0, r4
 800bfc8:	b004      	add	sp, #16
 800bfca:	bd70      	pop	{r4, r5, r6, pc}
						temp[0] = *((__IO uint8_t *)(&buffer[0])+3);  temp[1] = *((__IO uint8_t *)(&buffer[0])+2);
 800bfcc:	ab01      	add	r3, sp, #4
 800bfce:	78da      	ldrb	r2, [r3, #3]
 800bfd0:	4910      	ldr	r1, [pc, #64]	; (800c014 <SampleGyroDPSToPort+0xa8>)
 800bfd2:	700a      	strb	r2, [r1, #0]
 800bfd4:	789a      	ldrb	r2, [r3, #2]
 800bfd6:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&buffer[0])+1);  temp[3] = *((__IO uint8_t *)(&buffer[0])+0);
 800bfd8:	785a      	ldrb	r2, [r3, #1]
 800bfda:	708a      	strb	r2, [r1, #2]
 800bfdc:	781a      	ldrb	r2, [r3, #0]
 800bfde:	70ca      	strb	r2, [r1, #3]
		        temp[4] = *((__IO uint8_t *)(&buffer[1])+3);  temp[5] = *((__IO uint8_t *)(&buffer[1])+2);
 800bfe0:	79da      	ldrb	r2, [r3, #7]
 800bfe2:	710a      	strb	r2, [r1, #4]
 800bfe4:	799a      	ldrb	r2, [r3, #6]
 800bfe6:	714a      	strb	r2, [r1, #5]
						temp[6] = *((__IO uint8_t *)(&buffer[1])+1);  temp[7] = *((__IO uint8_t *)(&buffer[1])+0);
 800bfe8:	795a      	ldrb	r2, [r3, #5]
 800bfea:	718a      	strb	r2, [r1, #6]
 800bfec:	791a      	ldrb	r2, [r3, #4]
 800bfee:	71ca      	strb	r2, [r1, #7]
		        temp[8] = *((__IO uint8_t *)(&buffer[2])+3);  temp[9] = *((__IO uint8_t *)(&buffer[2])+2);
 800bff0:	7ada      	ldrb	r2, [r3, #11]
 800bff2:	720a      	strb	r2, [r1, #8]
 800bff4:	7a9a      	ldrb	r2, [r3, #10]
 800bff6:	724a      	strb	r2, [r1, #9]
						temp[10] = *((__IO uint8_t *)(&buffer[2])+1); temp[11] = *((__IO uint8_t *)(&buffer[2])+0);
 800bff8:	7a5a      	ldrb	r2, [r3, #9]
 800bffa:	728a      	strb	r2, [r1, #10]
 800bffc:	7a1b      	ldrb	r3, [r3, #8]
 800bffe:	72cb      	strb	r3, [r1, #11]
						writePxITMutex(port, (char *)&temp[0], 12*sizeof(uint8_t), 10);
 800c000:	230a      	movs	r3, #10
 800c002:	220c      	movs	r2, #12
 800c004:	0030      	movs	r0, r6
 800c006:	f001 ffbb 	bl	800df80 <writePxITMutex>
 800c00a:	e7dc      	b.n	800bfc6 <SampleGyroDPSToPort+0x5a>
 800c00c:	20001298 	.word	0x20001298
 800c010:	20001164 	.word	0x20001164
 800c014:	20001788 	.word	0x20001788

0800c018 <SampleAccG>:
{
 800c018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c01a:	46c6      	mov	lr, r8
 800c01c:	b500      	push	{lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	0006      	movs	r6, r0
 800c022:	000d      	movs	r5, r1
 800c024:	0014      	movs	r4, r2
	if (LSM6DS3_ACC_Get_Acceleration(&hi2c2, buff, 0) != MEMS_SUCCESS)
 800c026:	2200      	movs	r2, #0
 800c028:	a901      	add	r1, sp, #4
 800c02a:	4812      	ldr	r0, [pc, #72]	; (800c074 <SampleAccG+0x5c>)
 800c02c:	f002 fb3d 	bl	800e6aa <LSM6DS3_ACC_Get_Acceleration>
		return H0BR4_ERR_LSM6DS3;
 800c030:	2305      	movs	r3, #5
	if (LSM6DS3_ACC_Get_Acceleration(&hi2c2, buff, 0) != MEMS_SUCCESS)
 800c032:	2801      	cmp	r0, #1
 800c034:	d118      	bne.n	800c068 <SampleAccG+0x50>
	*accY = buff[1];
 800c036:	9b02      	ldr	r3, [sp, #8]
 800c038:	4698      	mov	r8, r3
	*accZ = buff[2];
 800c03a:	9f03      	ldr	r7, [sp, #12]
	*x = ((float)xInMG) / 1000;
 800c03c:	9801      	ldr	r0, [sp, #4]
 800c03e:	f7f5 f8a3 	bl	8001188 <__aeabi_i2f>
 800c042:	490d      	ldr	r1, [pc, #52]	; (800c078 <SampleAccG+0x60>)
 800c044:	f7f4 fd76 	bl	8000b34 <__aeabi_fdiv>
 800c048:	6030      	str	r0, [r6, #0]
	*y = ((float)yInMG) / 1000;
 800c04a:	4640      	mov	r0, r8
 800c04c:	f7f5 f89c 	bl	8001188 <__aeabi_i2f>
 800c050:	4909      	ldr	r1, [pc, #36]	; (800c078 <SampleAccG+0x60>)
 800c052:	f7f4 fd6f 	bl	8000b34 <__aeabi_fdiv>
 800c056:	6028      	str	r0, [r5, #0]
	*z = ((float)zInMG) / 1000;
 800c058:	0038      	movs	r0, r7
 800c05a:	f7f5 f895 	bl	8001188 <__aeabi_i2f>
 800c05e:	4906      	ldr	r1, [pc, #24]	; (800c078 <SampleAccG+0x60>)
 800c060:	f7f4 fd68 	bl	8000b34 <__aeabi_fdiv>
 800c064:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	0018      	movs	r0, r3
 800c06a:	b004      	add	sp, #16
 800c06c:	bc04      	pop	{r2}
 800c06e:	4690      	mov	r8, r2
 800c070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c072:	46c0      	nop			; (mov r8, r8)
 800c074:	20006dec 	.word	0x20006dec
 800c078:	447a0000 	.word	0x447a0000

0800c07c <SampleAccGToString>:
{
 800c07c:	b570      	push	{r4, r5, r6, lr}
 800c07e:	b08a      	sub	sp, #40	; 0x28
 800c080:	0005      	movs	r5, r0
 800c082:	000e      	movs	r6, r1
	float x = 0, y = 0, z = 0;
 800c084:	2300      	movs	r3, #0
 800c086:	9309      	str	r3, [sp, #36]	; 0x24
 800c088:	9308      	str	r3, [sp, #32]
 800c08a:	9307      	str	r3, [sp, #28]
	if ((status = SampleAccG(&x, &y, &z)) != H0BR4_OK)
 800c08c:	aa07      	add	r2, sp, #28
 800c08e:	a908      	add	r1, sp, #32
 800c090:	a809      	add	r0, sp, #36	; 0x24
 800c092:	f7ff ffc1 	bl	800c018 <SampleAccG>
 800c096:	1e04      	subs	r4, r0, #0
 800c098:	d002      	beq.n	800c0a0 <SampleAccGToString+0x24>
}
 800c09a:	0020      	movs	r0, r4
 800c09c:	b00a      	add	sp, #40	; 0x28
 800c09e:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Acc(G) | X: %.2f, Y: %.2f, Z: %.2f\r\n", x, y, z);
 800c0a0:	9807      	ldr	r0, [sp, #28]
 800c0a2:	f7f6 fe59 	bl	8002d58 <__aeabi_f2d>
 800c0a6:	9004      	str	r0, [sp, #16]
 800c0a8:	9105      	str	r1, [sp, #20]
 800c0aa:	9808      	ldr	r0, [sp, #32]
 800c0ac:	f7f6 fe54 	bl	8002d58 <__aeabi_f2d>
 800c0b0:	9002      	str	r0, [sp, #8]
 800c0b2:	9103      	str	r1, [sp, #12]
 800c0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0b6:	f7f6 fe4f 	bl	8002d58 <__aeabi_f2d>
 800c0ba:	9000      	str	r0, [sp, #0]
 800c0bc:	9101      	str	r1, [sp, #4]
 800c0be:	4a03      	ldr	r2, [pc, #12]	; (800c0cc <SampleAccGToString+0x50>)
 800c0c0:	0031      	movs	r1, r6
 800c0c2:	0028      	movs	r0, r5
 800c0c4:	f008 faf2 	bl	80146ac <snprintf>
	return status;
 800c0c8:	e7e7      	b.n	800c09a <SampleAccGToString+0x1e>
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	0801b548 	.word	0x0801b548

0800c0d0 <SampleSensorCommand>:
{
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	0005      	movs	r5, r0
 800c0d6:	000e      	movs	r6, r1
 800c0d8:	0010      	movs	r0, r2
	portBASE_TYPE sensNameLen = 0;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9301      	str	r3, [sp, #4]
	*pcWriteBuffer = '\0';
 800c0de:	702b      	strb	r3, [r5, #0]
	pSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &sensNameLen);
 800c0e0:	aa01      	add	r2, sp, #4
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	f002 fd08 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 800c0e8:	1e04      	subs	r4, r0, #0
	if (pSensName == NULL) {
 800c0ea:	d021      	beq.n	800c130 <SampleSensorCommand+0x60>
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800c0ec:	2204      	movs	r2, #4
 800c0ee:	4924      	ldr	r1, [pc, #144]	; (800c180 <SampleSensorCommand+0xb0>)
 800c0f0:	f008 fb52 	bl	8014798 <strncmp>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d021      	beq.n	800c13c <SampleSensorCommand+0x6c>
		} else if (!strncmp(pSensName, accCmdName, strlen(accCmdName))) {
 800c0f8:	2203      	movs	r2, #3
 800c0fa:	4922      	ldr	r1, [pc, #136]	; (800c184 <SampleSensorCommand+0xb4>)
 800c0fc:	0020      	movs	r0, r4
 800c0fe:	f008 fb4b 	bl	8014798 <strncmp>
 800c102:	2800      	cmp	r0, #0
 800c104:	d028      	beq.n	800c158 <SampleSensorCommand+0x88>
		} else if (!strncmp(pSensName, magCmdName, strlen(magCmdName))) {
 800c106:	2203      	movs	r2, #3
 800c108:	491f      	ldr	r1, [pc, #124]	; (800c188 <SampleSensorCommand+0xb8>)
 800c10a:	0020      	movs	r0, r4
 800c10c:	f008 fb44 	bl	8014798 <strncmp>
 800c110:	2800      	cmp	r0, #0
 800c112:	d028      	beq.n	800c166 <SampleSensorCommand+0x96>
		} else if (!strncmp(pSensName, tempCmdName, strlen(tempCmdName))) {
 800c114:	2204      	movs	r2, #4
 800c116:	491d      	ldr	r1, [pc, #116]	; (800c18c <SampleSensorCommand+0xbc>)
 800c118:	0020      	movs	r0, r4
 800c11a:	f008 fb3d 	bl	8014798 <strncmp>
 800c11e:	2800      	cmp	r0, #0
 800c120:	d128      	bne.n	800c174 <SampleSensorCommand+0xa4>
			if (SampleTempCToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800c122:	0031      	movs	r1, r6
 800c124:	0028      	movs	r0, r5
 800c126:	f7ff fc9b 	bl	800ba60 <SampleTempCToString>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d10c      	bne.n	800c148 <SampleSensorCommand+0x78>
 800c12e:	e010      	b.n	800c152 <SampleSensorCommand+0x82>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c130:	4a17      	ldr	r2, [pc, #92]	; (800c190 <SampleSensorCommand+0xc0>)
 800c132:	0031      	movs	r1, r6
 800c134:	0028      	movs	r0, r5
 800c136:	f008 fab9 	bl	80146ac <snprintf>
		return pdFALSE;
 800c13a:	e00a      	b.n	800c152 <SampleSensorCommand+0x82>
			if (SampleGyroDPSToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800c13c:	0031      	movs	r1, r6
 800c13e:	0028      	movs	r0, r5
 800c140:	f7ff fee2 	bl	800bf08 <SampleGyroDPSToString>
 800c144:	2800      	cmp	r0, #0
 800c146:	d004      	beq.n	800c152 <SampleSensorCommand+0x82>
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
 800c148:	4a12      	ldr	r2, [pc, #72]	; (800c194 <SampleSensorCommand+0xc4>)
 800c14a:	0031      	movs	r1, r6
 800c14c:	0028      	movs	r0, r5
 800c14e:	f008 faad 	bl	80146ac <snprintf>
}
 800c152:	2000      	movs	r0, #0
 800c154:	b002      	add	sp, #8
 800c156:	bd70      	pop	{r4, r5, r6, pc}
			if (SampleAccGToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800c158:	0031      	movs	r1, r6
 800c15a:	0028      	movs	r0, r5
 800c15c:	f7ff ff8e 	bl	800c07c <SampleAccGToString>
 800c160:	2800      	cmp	r0, #0
 800c162:	d1f1      	bne.n	800c148 <SampleSensorCommand+0x78>
 800c164:	e7f5      	b.n	800c152 <SampleSensorCommand+0x82>
			if (SampleMagMGaussToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800c166:	0031      	movs	r1, r6
 800c168:	0028      	movs	r0, r5
 800c16a:	f7ff fbc3 	bl	800b8f4 <SampleMagMGaussToString>
 800c16e:	2800      	cmp	r0, #0
 800c170:	d1ea      	bne.n	800c148 <SampleSensorCommand+0x78>
 800c172:	e7ee      	b.n	800c152 <SampleSensorCommand+0x82>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c174:	4a06      	ldr	r2, [pc, #24]	; (800c190 <SampleSensorCommand+0xc0>)
 800c176:	0031      	movs	r1, r6
 800c178:	0028      	movs	r0, r5
 800c17a:	f008 fa97 	bl	80146ac <snprintf>
 800c17e:	e7e8      	b.n	800c152 <SampleSensorCommand+0x82>
 800c180:	0801b5e0 	.word	0x0801b5e0
 800c184:	0801b5e8 	.word	0x0801b5e8
 800c188:	0801b5ec 	.word	0x0801b5ec
 800c18c:	0801b5f0 	.word	0x0801b5f0
 800c190:	0801b5cc 	.word	0x0801b5cc
 800c194:	0801b5f8 	.word	0x0801b5f8

0800c198 <SampleAccGToBuf>:
{
 800c198:	b510      	push	{r4, lr}
	return SampleAccG(buffer, buffer + 1, buffer + 2);
 800c19a:	0002      	movs	r2, r0
 800c19c:	3208      	adds	r2, #8
 800c19e:	1d01      	adds	r1, r0, #4
 800c1a0:	f7ff ff3a 	bl	800c018 <SampleAccG>
}
 800c1a4:	bd10      	pop	{r4, pc}
	...

0800c1a8 <SampleAccGToPort>:
{
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	0006      	movs	r6, r0
 800c1ae:	000d      	movs	r5, r1
	if ((status = SampleAccGToBuf(buffer)) != H0BR4_OK)
 800c1b0:	a801      	add	r0, sp, #4
 800c1b2:	f7ff fff1 	bl	800c198 <SampleAccGToBuf>
 800c1b6:	1e04      	subs	r4, r0, #0
 800c1b8:	d123      	bne.n	800c202 <SampleAccGToPort+0x5a>
	if (module==myID){
 800c1ba:	4b23      	ldr	r3, [pc, #140]	; (800c248 <SampleAccGToPort+0xa0>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	42ab      	cmp	r3, r5
 800c1c0:	d022      	beq.n	800c208 <SampleAccGToPort+0x60>
						messageParams[0]=port;
 800c1c2:	4b22      	ldr	r3, [pc, #136]	; (800c24c <SampleAccGToPort+0xa4>)
 800c1c4:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&buffer[0])+3);  messageParams[2] = *((__IO uint8_t *)(&buffer[0])+2);
 800c1c6:	aa01      	add	r2, sp, #4
 800c1c8:	78d1      	ldrb	r1, [r2, #3]
 800c1ca:	7059      	strb	r1, [r3, #1]
 800c1cc:	7891      	ldrb	r1, [r2, #2]
 800c1ce:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&buffer[0])+1);  messageParams[4] = *((__IO uint8_t *)(&buffer[0])+0);
 800c1d0:	7851      	ldrb	r1, [r2, #1]
 800c1d2:	70d9      	strb	r1, [r3, #3]
 800c1d4:	7811      	ldrb	r1, [r2, #0]
 800c1d6:	7119      	strb	r1, [r3, #4]
					  messageParams[5] = *((__IO uint8_t *)(&buffer[1])+3);  messageParams[6] = *((__IO uint8_t *)(&buffer[1])+2);
 800c1d8:	79d1      	ldrb	r1, [r2, #7]
 800c1da:	7159      	strb	r1, [r3, #5]
 800c1dc:	7991      	ldrb	r1, [r2, #6]
 800c1de:	7199      	strb	r1, [r3, #6]
						messageParams[7] = *((__IO uint8_t *)(&buffer[1])+1);  messageParams[8] = *((__IO uint8_t *)(&buffer[1])+0);
 800c1e0:	7951      	ldrb	r1, [r2, #5]
 800c1e2:	71d9      	strb	r1, [r3, #7]
 800c1e4:	7911      	ldrb	r1, [r2, #4]
 800c1e6:	7219      	strb	r1, [r3, #8]
					  messageParams[9] = *((__IO uint8_t *)(&buffer[2])+3);  messageParams[10] = *((__IO uint8_t *)(&buffer[2])+2);
 800c1e8:	7ad1      	ldrb	r1, [r2, #11]
 800c1ea:	7259      	strb	r1, [r3, #9]
 800c1ec:	7a91      	ldrb	r1, [r2, #10]
 800c1ee:	7299      	strb	r1, [r3, #10]
						messageParams[11] = *((__IO uint8_t *)(&buffer[2])+1); messageParams[12] = *((__IO uint8_t *)(&buffer[2])+0);
 800c1f0:	7a51      	ldrb	r1, [r2, #9]
 800c1f2:	72d9      	strb	r1, [r3, #11]
 800c1f4:	7a12      	ldrb	r2, [r2, #8]
 800c1f6:	731a      	strb	r2, [r3, #12]
						SendMessageToModule(module, CODE_PORT_FORWARD, (sizeof(float)*3)+1);
 800c1f8:	220d      	movs	r2, #13
 800c1fa:	2123      	movs	r1, #35	; 0x23
 800c1fc:	0028      	movs	r0, r5
 800c1fe:	f7f9 fded 	bl	8005ddc <SendMessageToModule>
}
 800c202:	0020      	movs	r0, r4
 800c204:	b004      	add	sp, #16
 800c206:	bd70      	pop	{r4, r5, r6, pc}
						temp[0] = *((__IO uint8_t *)(&buffer[0])+3);  temp[1] = *((__IO uint8_t *)(&buffer[0])+2);
 800c208:	ab01      	add	r3, sp, #4
 800c20a:	78da      	ldrb	r2, [r3, #3]
 800c20c:	4910      	ldr	r1, [pc, #64]	; (800c250 <SampleAccGToPort+0xa8>)
 800c20e:	700a      	strb	r2, [r1, #0]
 800c210:	789a      	ldrb	r2, [r3, #2]
 800c212:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&buffer[0])+1);  temp[3] = *((__IO uint8_t *)(&buffer[0])+0);
 800c214:	785a      	ldrb	r2, [r3, #1]
 800c216:	708a      	strb	r2, [r1, #2]
 800c218:	781a      	ldrb	r2, [r3, #0]
 800c21a:	70ca      	strb	r2, [r1, #3]
		        temp[4] = *((__IO uint8_t *)(&buffer[1])+3);  temp[5] = *((__IO uint8_t *)(&buffer[1])+2);
 800c21c:	79da      	ldrb	r2, [r3, #7]
 800c21e:	710a      	strb	r2, [r1, #4]
 800c220:	799a      	ldrb	r2, [r3, #6]
 800c222:	714a      	strb	r2, [r1, #5]
						temp[6] = *((__IO uint8_t *)(&buffer[1])+1);  temp[7] = *((__IO uint8_t *)(&buffer[1])+0);
 800c224:	795a      	ldrb	r2, [r3, #5]
 800c226:	718a      	strb	r2, [r1, #6]
 800c228:	791a      	ldrb	r2, [r3, #4]
 800c22a:	71ca      	strb	r2, [r1, #7]
		        temp[8] = *((__IO uint8_t *)(&buffer[2])+3);  temp[9] = *((__IO uint8_t *)(&buffer[2])+2);
 800c22c:	7ada      	ldrb	r2, [r3, #11]
 800c22e:	720a      	strb	r2, [r1, #8]
 800c230:	7a9a      	ldrb	r2, [r3, #10]
 800c232:	724a      	strb	r2, [r1, #9]
						temp[10] = *((__IO uint8_t *)(&buffer[2])+1); temp[11] = *((__IO uint8_t *)(&buffer[2])+0);
 800c234:	7a5a      	ldrb	r2, [r3, #9]
 800c236:	728a      	strb	r2, [r1, #10]
 800c238:	7a1b      	ldrb	r3, [r3, #8]
 800c23a:	72cb      	strb	r3, [r1, #11]
						writePxITMutex(port, (char *)&temp[0], 12*sizeof(uint8_t), 10);
 800c23c:	230a      	movs	r3, #10
 800c23e:	220c      	movs	r2, #12
 800c240:	0030      	movs	r0, r6
 800c242:	f001 fe9d 	bl	800df80 <writePxITMutex>
 800c246:	e7dc      	b.n	800c202 <SampleAccGToPort+0x5a>
 800c248:	20001298 	.word	0x20001298
 800c24c:	20001164 	.word	0x20001164
 800c250:	20001794 	.word	0x20001794

0800c254 <SampleMagMGauss>:
{
 800c254:	b510      	push	{r4, lr}
	return LSM303SampleMagMGauss(magX, magY, magZ);
 800c256:	f7ff fb17 	bl	800b888 <LSM303SampleMagMGauss>
}
 800c25a:	bd10      	pop	{r4, pc}

0800c25c <StreamGyroDPSToPort>:
{
 800c25c:	b510      	push	{r4, lr}
 800c25e:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleGyroDPSToPort);
 800c260:	4c02      	ldr	r4, [pc, #8]	; (800c26c <StreamGyroDPSToPort+0x10>)
 800c262:	9400      	str	r4, [sp, #0]
 800c264:	f7ff fc4e 	bl	800bb04 <StreamMemsToPort>
}
 800c268:	b002      	add	sp, #8
 800c26a:	bd10      	pop	{r4, pc}
 800c26c:	0800bf6d 	.word	0x0800bf6d

0800c270 <StreamGyroDPSToCLI>:
{
 800c270:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleGyroDPSToString);
 800c272:	4a02      	ldr	r2, [pc, #8]	; (800c27c <StreamGyroDPSToCLI+0xc>)
 800c274:	f7ff fc8c 	bl	800bb90 <StreamMemsToCLI>
}
 800c278:	bd10      	pop	{r4, pc}
 800c27a:	46c0      	nop			; (mov r8, r8)
 800c27c:	0800bf09 	.word	0x0800bf09

0800c280 <StreamAccGToPort>:
{
 800c280:	b510      	push	{r4, lr}
 800c282:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleAccGToPort);
 800c284:	4c02      	ldr	r4, [pc, #8]	; (800c290 <StreamAccGToPort+0x10>)
 800c286:	9400      	str	r4, [sp, #0]
 800c288:	f7ff fc3c 	bl	800bb04 <StreamMemsToPort>
}
 800c28c:	b002      	add	sp, #8
 800c28e:	bd10      	pop	{r4, pc}
 800c290:	0800c1a9 	.word	0x0800c1a9

0800c294 <StreamAccGToCLI>:
{
 800c294:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleAccGToString);
 800c296:	4a02      	ldr	r2, [pc, #8]	; (800c2a0 <StreamAccGToCLI+0xc>)
 800c298:	f7ff fc7a 	bl	800bb90 <StreamMemsToCLI>
}
 800c29c:	bd10      	pop	{r4, pc}
 800c29e:	46c0      	nop			; (mov r8, r8)
 800c2a0:	0800c07d 	.word	0x0800c07d

0800c2a4 <StreamMagMGaussToPort>:
{
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleMagMGaussToPort);
 800c2a8:	4c02      	ldr	r4, [pc, #8]	; (800c2b4 <StreamMagMGaussToPort+0x10>)
 800c2aa:	9400      	str	r4, [sp, #0]
 800c2ac:	f7ff fc2a 	bl	800bb04 <StreamMemsToPort>
}
 800c2b0:	b002      	add	sp, #8
 800c2b2:	bd10      	pop	{r4, pc}
 800c2b4:	0800b965 	.word	0x0800b965

0800c2b8 <StreamMagMGaussToCLI>:
{
 800c2b8:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleMagMGaussToString);
 800c2ba:	4a02      	ldr	r2, [pc, #8]	; (800c2c4 <StreamMagMGaussToCLI+0xc>)
 800c2bc:	f7ff fc68 	bl	800bb90 <StreamMemsToCLI>
}
 800c2c0:	bd10      	pop	{r4, pc}
 800c2c2:	46c0      	nop			; (mov r8, r8)
 800c2c4:	0800b8f5 	.word	0x0800b8f5

0800c2c8 <StreamTempCToPort>:
{
 800c2c8:	b510      	push	{r4, lr}
 800c2ca:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleTempCToPort);
 800c2cc:	4c02      	ldr	r4, [pc, #8]	; (800c2d8 <StreamTempCToPort+0x10>)
 800c2ce:	9400      	str	r4, [sp, #0]
 800c2d0:	f7ff fc18 	bl	800bb04 <StreamMemsToPort>
}
 800c2d4:	b002      	add	sp, #8
 800c2d6:	bd10      	pop	{r4, pc}
 800c2d8:	0800ba95 	.word	0x0800ba95

0800c2dc <Module_MessagingTask>:
{
 800c2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2de:	46c6      	mov	lr, r8
 800c2e0:	b500      	push	{lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	000c      	movs	r4, r1
 800c2e6:	9301      	str	r3, [sp, #4]
 800c2e8:	ab08      	add	r3, sp, #32
 800c2ea:	781d      	ldrb	r5, [r3, #0]
	switch (code)
 800c2ec:	4b6a      	ldr	r3, [pc, #424]	; (800c498 <Module_MessagingTask+0x1bc>)
 800c2ee:	18c3      	adds	r3, r0, r3
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	2a0c      	cmp	r2, #12
 800c2f4:	d900      	bls.n	800c2f8 <Module_MessagingTask+0x1c>
 800c2f6:	e0cd      	b.n	800c494 <Module_MessagingTask+0x1b8>
 800c2f8:	0093      	lsls	r3, r2, #2
 800c2fa:	4a68      	ldr	r2, [pc, #416]	; (800c49c <Module_MessagingTask+0x1c0>)
 800c2fc:	58d3      	ldr	r3, [r2, r3]
 800c2fe:	469f      	mov	pc, r3
			SampleGyroDPS(&H0BR4_gyroX, &H0BR4_gyroY, &H0BR4_gyroZ);
 800c300:	4a67      	ldr	r2, [pc, #412]	; (800c4a0 <Module_MessagingTask+0x1c4>)
 800c302:	4968      	ldr	r1, [pc, #416]	; (800c4a4 <Module_MessagingTask+0x1c8>)
 800c304:	4868      	ldr	r0, [pc, #416]	; (800c4a8 <Module_MessagingTask+0x1cc>)
 800c306:	f7ff fdcd 	bl	800bea4 <SampleGyroDPS>
	Module_Status result = H0BR4_OK;
 800c30a:	2000      	movs	r0, #0
}
 800c30c:	b002      	add	sp, #8
 800c30e:	bc04      	pop	{r2}
 800c310:	4690      	mov	r8, r2
 800c312:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SampleAccG(&H0BR4_accX, &H0BR4_accY, &H0BR4_accZ);
 800c314:	4a65      	ldr	r2, [pc, #404]	; (800c4ac <Module_MessagingTask+0x1d0>)
 800c316:	4966      	ldr	r1, [pc, #408]	; (800c4b0 <Module_MessagingTask+0x1d4>)
 800c318:	4866      	ldr	r0, [pc, #408]	; (800c4b4 <Module_MessagingTask+0x1d8>)
 800c31a:	f7ff fe7d 	bl	800c018 <SampleAccG>
	Module_Status result = H0BR4_OK;
 800c31e:	2000      	movs	r0, #0
			break;
 800c320:	e7f4      	b.n	800c30c <Module_MessagingTask+0x30>
			SampleMagMGauss(&H0BR4_magX, &H0BR4_magY, &H0BR4_magZ);
 800c322:	4a65      	ldr	r2, [pc, #404]	; (800c4b8 <Module_MessagingTask+0x1dc>)
 800c324:	4965      	ldr	r1, [pc, #404]	; (800c4bc <Module_MessagingTask+0x1e0>)
 800c326:	4866      	ldr	r0, [pc, #408]	; (800c4c0 <Module_MessagingTask+0x1e4>)
 800c328:	f7ff ff94 	bl	800c254 <SampleMagMGauss>
	Module_Status result = H0BR4_OK;
 800c32c:	2000      	movs	r0, #0
			break;
 800c32e:	e7ed      	b.n	800c30c <Module_MessagingTask+0x30>
			SampleTempCelsius(&H0BR4_temp);
 800c330:	4864      	ldr	r0, [pc, #400]	; (800c4c4 <Module_MessagingTask+0x1e8>)
 800c332:	f7ff fb91 	bl	800ba58 <SampleTempCelsius>
	Module_Status result = H0BR4_OK;
 800c336:	2000      	movs	r0, #0
			break;
 800c338:	e7e8      	b.n	800c30c <Module_MessagingTask+0x30>
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800c33a:	1e4b      	subs	r3, r1, #1
 800c33c:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800c33e:	4e62      	ldr	r6, [pc, #392]	; (800c4c8 <Module_MessagingTask+0x1ec>)
 800c340:	00d8      	lsls	r0, r3, #3
 800c342:	1ac2      	subs	r2, r0, r3
 800c344:	00d2      	lsls	r2, r2, #3
 800c346:	18b2      	adds	r2, r6, r2
 800c348:	1957      	adds	r7, r2, r5
 800c34a:	793b      	ldrb	r3, [r7, #4]
 800c34c:	061b      	lsls	r3, r3, #24
 800c34e:	7979      	ldrb	r1, [r7, #5]
 800c350:	0409      	lsls	r1, r1, #16
 800c352:	4688      	mov	r8, r1
 800c354:	4443      	add	r3, r8
 800c356:	79f9      	ldrb	r1, [r7, #7]
 800c358:	4688      	mov	r8, r1
 800c35a:	4443      	add	r3, r8
 800c35c:	79b9      	ldrb	r1, [r7, #6]
 800c35e:	0209      	lsls	r1, r1, #8
 800c360:	4688      	mov	r8, r1
 800c362:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800c364:	7879      	ldrb	r1, [r7, #1]
 800c366:	0409      	lsls	r1, r1, #16
 800c368:	4688      	mov	r8, r1
 800c36a:	5d52      	ldrb	r2, [r2, r5]
 800c36c:	0612      	lsls	r2, r2, #24
 800c36e:	4442      	add	r2, r8
 800c370:	78ff      	ldrb	r7, [r7, #3]
 800c372:	19d2      	adds	r2, r2, r7
 800c374:	4661      	mov	r1, ip
 800c376:	1a40      	subs	r0, r0, r1
 800c378:	00c0      	lsls	r0, r0, #3
 800c37a:	1830      	adds	r0, r6, r0
 800c37c:	1945      	adds	r5, r0, r5
 800c37e:	78a8      	ldrb	r0, [r5, #2]
 800c380:	0200      	lsls	r0, r0, #8
 800c382:	1812      	adds	r2, r2, r0
			if ((result = StreamGyroDPSToPort(port, dst, period, timeout)) != H0BR4_OK)
 800c384:	9901      	ldr	r1, [sp, #4]
 800c386:	0020      	movs	r0, r4
 800c388:	f7ff ff68 	bl	800c25c <StreamGyroDPSToPort>
	return result;	
 800c38c:	e7be      	b.n	800c30c <Module_MessagingTask+0x30>
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800c38e:	1e4b      	subs	r3, r1, #1
 800c390:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800c392:	4e4d      	ldr	r6, [pc, #308]	; (800c4c8 <Module_MessagingTask+0x1ec>)
 800c394:	00d8      	lsls	r0, r3, #3
 800c396:	1ac2      	subs	r2, r0, r3
 800c398:	00d2      	lsls	r2, r2, #3
 800c39a:	18b2      	adds	r2, r6, r2
 800c39c:	1957      	adds	r7, r2, r5
 800c39e:	793b      	ldrb	r3, [r7, #4]
 800c3a0:	061b      	lsls	r3, r3, #24
 800c3a2:	7979      	ldrb	r1, [r7, #5]
 800c3a4:	0409      	lsls	r1, r1, #16
 800c3a6:	4688      	mov	r8, r1
 800c3a8:	4443      	add	r3, r8
 800c3aa:	79f9      	ldrb	r1, [r7, #7]
 800c3ac:	4688      	mov	r8, r1
 800c3ae:	4443      	add	r3, r8
 800c3b0:	79b9      	ldrb	r1, [r7, #6]
 800c3b2:	0209      	lsls	r1, r1, #8
 800c3b4:	4688      	mov	r8, r1
 800c3b6:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800c3b8:	7879      	ldrb	r1, [r7, #1]
 800c3ba:	0409      	lsls	r1, r1, #16
 800c3bc:	4688      	mov	r8, r1
 800c3be:	5d52      	ldrb	r2, [r2, r5]
 800c3c0:	0612      	lsls	r2, r2, #24
 800c3c2:	4442      	add	r2, r8
 800c3c4:	78ff      	ldrb	r7, [r7, #3]
 800c3c6:	19d2      	adds	r2, r2, r7
 800c3c8:	4661      	mov	r1, ip
 800c3ca:	1a40      	subs	r0, r0, r1
 800c3cc:	00c0      	lsls	r0, r0, #3
 800c3ce:	1830      	adds	r0, r6, r0
 800c3d0:	1945      	adds	r5, r0, r5
 800c3d2:	78a8      	ldrb	r0, [r5, #2]
 800c3d4:	0200      	lsls	r0, r0, #8
 800c3d6:	1812      	adds	r2, r2, r0
			if ((result = StreamAccGToPort(port, dst, period, timeout)) != H0BR4_OK)
 800c3d8:	9901      	ldr	r1, [sp, #4]
 800c3da:	0020      	movs	r0, r4
 800c3dc:	f7ff ff50 	bl	800c280 <StreamAccGToPort>
	return result;	
 800c3e0:	e794      	b.n	800c30c <Module_MessagingTask+0x30>
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800c3e2:	1e4b      	subs	r3, r1, #1
 800c3e4:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800c3e6:	4e38      	ldr	r6, [pc, #224]	; (800c4c8 <Module_MessagingTask+0x1ec>)
 800c3e8:	00d8      	lsls	r0, r3, #3
 800c3ea:	1ac2      	subs	r2, r0, r3
 800c3ec:	00d2      	lsls	r2, r2, #3
 800c3ee:	18b2      	adds	r2, r6, r2
 800c3f0:	1957      	adds	r7, r2, r5
 800c3f2:	793b      	ldrb	r3, [r7, #4]
 800c3f4:	061b      	lsls	r3, r3, #24
 800c3f6:	7979      	ldrb	r1, [r7, #5]
 800c3f8:	0409      	lsls	r1, r1, #16
 800c3fa:	4688      	mov	r8, r1
 800c3fc:	4443      	add	r3, r8
 800c3fe:	79f9      	ldrb	r1, [r7, #7]
 800c400:	4688      	mov	r8, r1
 800c402:	4443      	add	r3, r8
 800c404:	79b9      	ldrb	r1, [r7, #6]
 800c406:	0209      	lsls	r1, r1, #8
 800c408:	4688      	mov	r8, r1
 800c40a:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800c40c:	7879      	ldrb	r1, [r7, #1]
 800c40e:	0409      	lsls	r1, r1, #16
 800c410:	4688      	mov	r8, r1
 800c412:	5d52      	ldrb	r2, [r2, r5]
 800c414:	0612      	lsls	r2, r2, #24
 800c416:	4442      	add	r2, r8
 800c418:	78ff      	ldrb	r7, [r7, #3]
 800c41a:	19d2      	adds	r2, r2, r7
 800c41c:	4661      	mov	r1, ip
 800c41e:	1a40      	subs	r0, r0, r1
 800c420:	00c0      	lsls	r0, r0, #3
 800c422:	1830      	adds	r0, r6, r0
 800c424:	1945      	adds	r5, r0, r5
 800c426:	78a8      	ldrb	r0, [r5, #2]
 800c428:	0200      	lsls	r0, r0, #8
 800c42a:	1812      	adds	r2, r2, r0
			if ((result = StreamMagMGaussToPort(port, dst, period, timeout)) != H0BR4_OK)
 800c42c:	9901      	ldr	r1, [sp, #4]
 800c42e:	0020      	movs	r0, r4
 800c430:	f7ff ff38 	bl	800c2a4 <StreamMagMGaussToPort>
	return result;	
 800c434:	e76a      	b.n	800c30c <Module_MessagingTask+0x30>
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800c436:	1e4b      	subs	r3, r1, #1
 800c438:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800c43a:	4e23      	ldr	r6, [pc, #140]	; (800c4c8 <Module_MessagingTask+0x1ec>)
 800c43c:	00d8      	lsls	r0, r3, #3
 800c43e:	1ac2      	subs	r2, r0, r3
 800c440:	00d2      	lsls	r2, r2, #3
 800c442:	18b2      	adds	r2, r6, r2
 800c444:	1957      	adds	r7, r2, r5
 800c446:	793b      	ldrb	r3, [r7, #4]
 800c448:	061b      	lsls	r3, r3, #24
 800c44a:	7979      	ldrb	r1, [r7, #5]
 800c44c:	0409      	lsls	r1, r1, #16
 800c44e:	4688      	mov	r8, r1
 800c450:	4443      	add	r3, r8
 800c452:	79f9      	ldrb	r1, [r7, #7]
 800c454:	4688      	mov	r8, r1
 800c456:	4443      	add	r3, r8
 800c458:	79b9      	ldrb	r1, [r7, #6]
 800c45a:	0209      	lsls	r1, r1, #8
 800c45c:	4688      	mov	r8, r1
 800c45e:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800c460:	7879      	ldrb	r1, [r7, #1]
 800c462:	0409      	lsls	r1, r1, #16
 800c464:	4688      	mov	r8, r1
 800c466:	5d52      	ldrb	r2, [r2, r5]
 800c468:	0612      	lsls	r2, r2, #24
 800c46a:	4442      	add	r2, r8
 800c46c:	78ff      	ldrb	r7, [r7, #3]
 800c46e:	19d2      	adds	r2, r2, r7
 800c470:	4661      	mov	r1, ip
 800c472:	1a40      	subs	r0, r0, r1
 800c474:	00c0      	lsls	r0, r0, #3
 800c476:	1830      	adds	r0, r6, r0
 800c478:	1945      	adds	r5, r0, r5
 800c47a:	78a8      	ldrb	r0, [r5, #2]
 800c47c:	0200      	lsls	r0, r0, #8
 800c47e:	1812      	adds	r2, r2, r0
			if ((result = StreamTempCToPort(port, dst, period, timeout)) != H0BR4_OK)
 800c480:	9901      	ldr	r1, [sp, #4]
 800c482:	0020      	movs	r0, r4
 800c484:	f7ff ff20 	bl	800c2c8 <StreamTempCToPort>
	return result;	
 800c488:	e740      	b.n	800c30c <Module_MessagingTask+0x30>
	stopStream = true;
 800c48a:	4b10      	ldr	r3, [pc, #64]	; (800c4cc <Module_MessagingTask+0x1f0>)
 800c48c:	2201      	movs	r2, #1
 800c48e:	701a      	strb	r2, [r3, #0]
			result = H0BR4_OK;
 800c490:	2000      	movs	r0, #0
 800c492:	e73b      	b.n	800c30c <Module_MessagingTask+0x30>
			result = H0BR4_ERR_UnknownMessage;
 800c494:	2001      	movs	r0, #1
 800c496:	e739      	b.n	800c30c <Module_MessagingTask+0x30>
 800c498:	fffffdda 	.word	0xfffffdda
 800c49c:	0801b514 	.word	0x0801b514
 800c4a0:	20001770 	.word	0x20001770
 800c4a4:	2000176c 	.word	0x2000176c
 800c4a8:	20001768 	.word	0x20001768
 800c4ac:	20001764 	.word	0x20001764
 800c4b0:	20001760 	.word	0x20001760
 800c4b4:	2000175c 	.word	0x2000175c
 800c4b8:	2000177c 	.word	0x2000177c
 800c4bc:	20001778 	.word	0x20001778
 800c4c0:	20001774 	.word	0x20001774
 800c4c4:	20001780 	.word	0x20001780
 800c4c8:	20000de0 	.word	0x20000de0
 800c4cc:	20001784 	.word	0x20001784

0800c4d0 <StreamTempCToCLI>:
{
 800c4d0:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleTempCToString);
 800c4d2:	4a02      	ldr	r2, [pc, #8]	; (800c4dc <StreamTempCToCLI+0xc>)
 800c4d4:	f7ff fb5c 	bl	800bb90 <StreamMemsToCLI>
}
 800c4d8:	bd10      	pop	{r4, pc}
 800c4da:	46c0      	nop			; (mov r8, r8)
 800c4dc:	0800ba61 	.word	0x0800ba61

0800c4e0 <StreamSensorCommand>:
{
 800c4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e2:	b08b      	sub	sp, #44	; 0x2c
 800c4e4:	0005      	movs	r5, r0
 800c4e6:	9100      	str	r1, [sp, #0]
 800c4e8:	0014      	movs	r4, r2
	portBASE_TYPE sensNameLen = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9309      	str	r3, [sp, #36]	; 0x24
	*pcWriteBuffer = '\0';
 800c4ee:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800c4f0:	9305      	str	r3, [sp, #20]
	portBASE_TYPE timeoutStrLen = 0;
 800c4f2:	9306      	str	r3, [sp, #24]
	portBASE_TYPE portStrLen = 0;
 800c4f4:	9307      	str	r3, [sp, #28]
	portBASE_TYPE modStrLen = 0;
 800c4f6:	9308      	str	r3, [sp, #32]
	*ppSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, pSensNameLen);
 800c4f8:	aa09      	add	r2, sp, #36	; 0x24
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	0020      	movs	r0, r4
 800c4fe:	f002 fafb 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 800c502:	0006      	movs	r6, r0
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &periodStrLen);
 800c504:	aa05      	add	r2, sp, #20
 800c506:	2102      	movs	r1, #2
 800c508:	0020      	movs	r0, r4
 800c50a:	f002 faf5 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 800c50e:	0007      	movs	r7, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &timeoutStrLen);
 800c510:	aa06      	add	r2, sp, #24
 800c512:	2103      	movs	r1, #3
 800c514:	9401      	str	r4, [sp, #4]
 800c516:	0020      	movs	r0, r4
 800c518:	f002 faee 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 800c51c:	0004      	movs	r4, r0
	if ((*ppSensName == NULL) || (pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800c51e:	2e00      	cmp	r6, #0
 800c520:	d03d      	beq.n	800c59e <StreamSensorCommand+0xbe>
 800c522:	2f00      	cmp	r7, #0
 800c524:	d03b      	beq.n	800c59e <StreamSensorCommand+0xbe>
 800c526:	2800      	cmp	r0, #0
 800c528:	d039      	beq.n	800c59e <StreamSensorCommand+0xbe>
	*pPeriod = atoi(pPeriodMSStr);
 800c52a:	0038      	movs	r0, r7
 800c52c:	f007 fc2b 	bl	8013d86 <atoi>
 800c530:	9002      	str	r0, [sp, #8]
	*pTimeout = atoi(pTimeoutMSStr);
 800c532:	0020      	movs	r0, r4
 800c534:	f007 fc27 	bl	8013d86 <atoi>
 800c538:	9003      	str	r0, [sp, #12]
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &portStrLen);
 800c53a:	aa07      	add	r2, sp, #28
 800c53c:	2104      	movs	r1, #4
 800c53e:	9c01      	ldr	r4, [sp, #4]
 800c540:	0020      	movs	r0, r4
 800c542:	f002 fad9 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 800c546:	0007      	movs	r7, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 5, &modStrLen);
 800c548:	aa08      	add	r2, sp, #32
 800c54a:	2105      	movs	r1, #5
 800c54c:	0020      	movs	r0, r4
 800c54e:	f002 fad3 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
 800c552:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800c554:	d021      	beq.n	800c59a <StreamSensorCommand+0xba>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800c556:	2f00      	cmp	r7, #0
 800c558:	d021      	beq.n	800c59e <StreamSensorCommand+0xbe>
	*pPort = atoi(pPortStr);
 800c55a:	0038      	movs	r0, r7
 800c55c:	f007 fc13 	bl	8013d86 <atoi>
 800c560:	b2c3      	uxtb	r3, r0
 800c562:	9301      	str	r3, [sp, #4]
	*pModule = atoi(pModStr);
 800c564:	0020      	movs	r0, r4
 800c566:	f007 fc0e 	bl	8013d86 <atoi>
 800c56a:	b2c4      	uxtb	r4, r0
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800c56c:	2204      	movs	r2, #4
 800c56e:	4943      	ldr	r1, [pc, #268]	; (800c67c <StreamSensorCommand+0x19c>)
 800c570:	0030      	movs	r0, r6
 800c572:	f008 f911 	bl	8014798 <strncmp>
	*pPortOrCLI = false;
 800c576:	2700      	movs	r7, #0
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800c578:	2800      	cmp	r0, #0
 800c57a:	d000      	beq.n	800c57e <StreamSensorCommand+0x9e>
 800c57c:	e06e      	b.n	800c65c <StreamSensorCommand+0x17c>
				if (StreamGyroDPSToPort(port, module, period, timeout) != H0BR4_OK)
 800c57e:	9b03      	ldr	r3, [sp, #12]
 800c580:	9a02      	ldr	r2, [sp, #8]
 800c582:	0021      	movs	r1, r4
 800c584:	9801      	ldr	r0, [sp, #4]
 800c586:	f7ff fe69 	bl	800c25c <StreamGyroDPSToPort>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d15b      	bne.n	800c646 <StreamSensorCommand+0x166>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800c58e:	4a3c      	ldr	r2, [pc, #240]	; (800c680 <StreamSensorCommand+0x1a0>)
 800c590:	9900      	ldr	r1, [sp, #0]
 800c592:	0028      	movs	r0, r5
 800c594:	f008 f88a 	bl	80146ac <snprintf>
		return pdFALSE;
 800c598:	e05a      	b.n	800c650 <StreamSensorCommand+0x170>
	if ((pModStr == NULL) && (pPortStr == NULL))
 800c59a:	2f00      	cmp	r7, #0
 800c59c:	d046      	beq.n	800c62c <StreamSensorCommand+0x14c>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c59e:	4a39      	ldr	r2, [pc, #228]	; (800c684 <StreamSensorCommand+0x1a4>)
 800c5a0:	9900      	ldr	r1, [sp, #0]
 800c5a2:	0028      	movs	r0, r5
 800c5a4:	f008 f882 	bl	80146ac <snprintf>
		return pdFALSE;
 800c5a8:	e052      	b.n	800c650 <StreamSensorCommand+0x170>
				if (StreamAccGToPort(port, module, period, timeout) != H0BR4_OK)
 800c5aa:	9b03      	ldr	r3, [sp, #12]
 800c5ac:	9a02      	ldr	r2, [sp, #8]
 800c5ae:	0021      	movs	r1, r4
 800c5b0:	9801      	ldr	r0, [sp, #4]
 800c5b2:	f7ff fe65 	bl	800c280 <StreamAccGToPort>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d145      	bne.n	800c646 <StreamSensorCommand+0x166>
 800c5ba:	e7e8      	b.n	800c58e <StreamSensorCommand+0xae>
		} else if (!strncmp(pSensName, magCmdName, strlen(magCmdName))) {
 800c5bc:	2203      	movs	r2, #3
 800c5be:	4932      	ldr	r1, [pc, #200]	; (800c688 <StreamSensorCommand+0x1a8>)
 800c5c0:	0030      	movs	r0, r6
 800c5c2:	f008 f8e9 	bl	8014798 <strncmp>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d111      	bne.n	800c5ee <StreamSensorCommand+0x10e>
			if (portOrCLI) {
 800c5ca:	2f00      	cmp	r7, #0
 800c5cc:	d006      	beq.n	800c5dc <StreamSensorCommand+0xfc>
				if (StreamMagMGaussToCLI(period, timeout) != H0BR4_OK)
 800c5ce:	9903      	ldr	r1, [sp, #12]
 800c5d0:	9802      	ldr	r0, [sp, #8]
 800c5d2:	f7ff fe71 	bl	800c2b8 <StreamMagMGaussToCLI>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d135      	bne.n	800c646 <StreamSensorCommand+0x166>
 800c5da:	e7d8      	b.n	800c58e <StreamSensorCommand+0xae>
				if (StreamMagMGaussToPort(port, module, period, timeout) != H0BR4_OK)
 800c5dc:	9b03      	ldr	r3, [sp, #12]
 800c5de:	9a02      	ldr	r2, [sp, #8]
 800c5e0:	0021      	movs	r1, r4
 800c5e2:	9801      	ldr	r0, [sp, #4]
 800c5e4:	f7ff fe5e 	bl	800c2a4 <StreamMagMGaussToPort>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d12c      	bne.n	800c646 <StreamSensorCommand+0x166>
 800c5ec:	e7cf      	b.n	800c58e <StreamSensorCommand+0xae>
		} else if (!strncmp(pSensName, tempCmdName, strlen(tempCmdName))) {
 800c5ee:	2204      	movs	r2, #4
 800c5f0:	4926      	ldr	r1, [pc, #152]	; (800c68c <StreamSensorCommand+0x1ac>)
 800c5f2:	0030      	movs	r0, r6
 800c5f4:	f008 f8d0 	bl	8014798 <strncmp>
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d111      	bne.n	800c620 <StreamSensorCommand+0x140>
			if (portOrCLI) {
 800c5fc:	2f00      	cmp	r7, #0
 800c5fe:	d006      	beq.n	800c60e <StreamSensorCommand+0x12e>
				if (StreamTempCToCLI(period, timeout) != H0BR4_OK)
 800c600:	9903      	ldr	r1, [sp, #12]
 800c602:	9802      	ldr	r0, [sp, #8]
 800c604:	f7ff ff64 	bl	800c4d0 <StreamTempCToCLI>
 800c608:	2800      	cmp	r0, #0
 800c60a:	d11c      	bne.n	800c646 <StreamSensorCommand+0x166>
 800c60c:	e7bf      	b.n	800c58e <StreamSensorCommand+0xae>
				if (StreamTempCToPort(port, module, period, timeout) != H0BR4_OK)
 800c60e:	9b03      	ldr	r3, [sp, #12]
 800c610:	9a02      	ldr	r2, [sp, #8]
 800c612:	0021      	movs	r1, r4
 800c614:	9801      	ldr	r0, [sp, #4]
 800c616:	f7ff fe57 	bl	800c2c8 <StreamTempCToPort>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	d113      	bne.n	800c646 <StreamSensorCommand+0x166>
 800c61e:	e7b6      	b.n	800c58e <StreamSensorCommand+0xae>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c620:	4a18      	ldr	r2, [pc, #96]	; (800c684 <StreamSensorCommand+0x1a4>)
 800c622:	9900      	ldr	r1, [sp, #0]
 800c624:	0028      	movs	r0, r5
 800c626:	f008 f841 	bl	80146ac <snprintf>
 800c62a:	e7b0      	b.n	800c58e <StreamSensorCommand+0xae>
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800c62c:	2204      	movs	r2, #4
 800c62e:	4913      	ldr	r1, [pc, #76]	; (800c67c <StreamSensorCommand+0x19c>)
 800c630:	0030      	movs	r0, r6
 800c632:	f008 f8b1 	bl	8014798 <strncmp>
 800c636:	2800      	cmp	r0, #0
 800c638:	d10d      	bne.n	800c656 <StreamSensorCommand+0x176>
				if (StreamGyroDPSToCLI(period, timeout) != H0BR4_OK)
 800c63a:	9903      	ldr	r1, [sp, #12]
 800c63c:	9802      	ldr	r0, [sp, #8]
 800c63e:	f7ff fe17 	bl	800c270 <StreamGyroDPSToCLI>
 800c642:	2800      	cmp	r0, #0
 800c644:	d0a3      	beq.n	800c58e <StreamSensorCommand+0xae>
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
 800c646:	4a12      	ldr	r2, [pc, #72]	; (800c690 <StreamSensorCommand+0x1b0>)
 800c648:	9900      	ldr	r1, [sp, #0]
 800c64a:	0028      	movs	r0, r5
 800c64c:	f008 f82e 	bl	80146ac <snprintf>
}
 800c650:	2000      	movs	r0, #0
 800c652:	b00b      	add	sp, #44	; 0x2c
 800c654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pPortOrCLI = true;
 800c656:	2701      	movs	r7, #1
	uint8_t module = 0;
 800c658:	2400      	movs	r4, #0
	uint8_t port = 0;
 800c65a:	9401      	str	r4, [sp, #4]
		} else if (!strncmp(pSensName, accCmdName, strlen(accCmdName))) {
 800c65c:	2203      	movs	r2, #3
 800c65e:	490d      	ldr	r1, [pc, #52]	; (800c694 <StreamSensorCommand+0x1b4>)
 800c660:	0030      	movs	r0, r6
 800c662:	f008 f899 	bl	8014798 <strncmp>
 800c666:	2800      	cmp	r0, #0
 800c668:	d1a8      	bne.n	800c5bc <StreamSensorCommand+0xdc>
			if (portOrCLI) {
 800c66a:	2f00      	cmp	r7, #0
 800c66c:	d09d      	beq.n	800c5aa <StreamSensorCommand+0xca>
				if (StreamAccGToCLI(period, timeout) != H0BR4_OK)
 800c66e:	9903      	ldr	r1, [sp, #12]
 800c670:	9802      	ldr	r0, [sp, #8]
 800c672:	f7ff fe0f 	bl	800c294 <StreamAccGToCLI>
 800c676:	2800      	cmp	r0, #0
 800c678:	d1e5      	bne.n	800c646 <StreamSensorCommand+0x166>
 800c67a:	e788      	b.n	800c58e <StreamSensorCommand+0xae>
 800c67c:	0801b5e0 	.word	0x0801b5e0
 800c680:	0801a54c 	.word	0x0801a54c
 800c684:	0801b5cc 	.word	0x0801b5cc
 800c688:	0801b5ec 	.word	0x0801b5ec
 800c68c:	0801b5f0 	.word	0x0801b5f0
 800c690:	0801b5f8 	.word	0x0801b5f8
 800c694:	0801b5e8 	.word	0x0801b5e8

0800c698 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c698:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c69a:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c69c:	2300      	movs	r3, #0
 800c69e:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c6a0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c6a2:	2280      	movs	r2, #128	; 0x80
 800c6a4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c6a6:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c6a8:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c6aa:	3320      	adds	r3, #32
 800c6ac:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c6ae:	2380      	movs	r3, #128	; 0x80
 800c6b0:	019b      	lsls	r3, r3, #6
 800c6b2:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c6b4:	f004 faec 	bl	8010c90 <HAL_DMA_Init>
}
 800c6b8:	bd10      	pop	{r4, pc}

0800c6ba <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c6ba:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c6bc:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c6be:	2310      	movs	r3, #16
 800c6c0:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c6c6:	2280      	movs	r2, #128	; 0x80
 800c6c8:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c6ca:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c6cc:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c6ce:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c6d0:	2380      	movs	r3, #128	; 0x80
 800c6d2:	019b      	lsls	r3, r3, #6
 800c6d4:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c6d6:	f004 fadb 	bl	8010c90 <HAL_DMA_Init>
}
 800c6da:	bd10      	pop	{r4, pc}

0800c6dc <DMA_Init>:
{
 800c6dc:	b510      	push	{r4, lr}
 800c6de:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800c6e0:	4b20      	ldr	r3, [pc, #128]	; (800c764 <DMA_Init+0x88>)
 800c6e2:	6959      	ldr	r1, [r3, #20]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	4311      	orrs	r1, r2
 800c6e8:	6159      	str	r1, [r3, #20]
 800c6ea:	6959      	ldr	r1, [r3, #20]
 800c6ec:	400a      	ands	r2, r1
 800c6ee:	9200      	str	r2, [sp, #0]
 800c6f0:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800c6f2:	6959      	ldr	r1, [r3, #20]
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	4311      	orrs	r1, r2
 800c6f8:	6159      	str	r1, [r3, #20]
 800c6fa:	695b      	ldr	r3, [r3, #20]
 800c6fc:	401a      	ands	r2, r3
 800c6fe:	9201      	str	r2, [sp, #4]
 800c700:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800c702:	4c19      	ldr	r4, [pc, #100]	; (800c768 <DMA_Init+0x8c>)
 800c704:	4919      	ldr	r1, [pc, #100]	; (800c76c <DMA_Init+0x90>)
 800c706:	0020      	movs	r0, r4
 800c708:	f7ff ffc6 	bl	800c698 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800c70c:	0020      	movs	r0, r4
 800c70e:	3038      	adds	r0, #56	; 0x38
 800c710:	4917      	ldr	r1, [pc, #92]	; (800c770 <DMA_Init+0x94>)
 800c712:	f7ff ffc1 	bl	800c698 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800c716:	0020      	movs	r0, r4
 800c718:	3070      	adds	r0, #112	; 0x70
 800c71a:	4916      	ldr	r1, [pc, #88]	; (800c774 <DMA_Init+0x98>)
 800c71c:	f7ff ffbc 	bl	800c698 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800c720:	0020      	movs	r0, r4
 800c722:	30a8      	adds	r0, #168	; 0xa8
 800c724:	4914      	ldr	r1, [pc, #80]	; (800c778 <DMA_Init+0x9c>)
 800c726:	f7ff ffb7 	bl	800c698 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800c72a:	0020      	movs	r0, r4
 800c72c:	30e0      	adds	r0, #224	; 0xe0
 800c72e:	4913      	ldr	r1, [pc, #76]	; (800c77c <DMA_Init+0xa0>)
 800c730:	f7ff ffb2 	bl	800c698 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800c734:	0020      	movs	r0, r4
 800c736:	3019      	adds	r0, #25
 800c738:	30ff      	adds	r0, #255	; 0xff
 800c73a:	4911      	ldr	r1, [pc, #68]	; (800c780 <DMA_Init+0xa4>)
 800c73c:	f7ff ffac 	bl	800c698 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800c740:	4c10      	ldr	r4, [pc, #64]	; (800c784 <DMA_Init+0xa8>)
 800c742:	4911      	ldr	r1, [pc, #68]	; (800c788 <DMA_Init+0xac>)
 800c744:	0020      	movs	r0, r4
 800c746:	f7ff ffb8 	bl	800c6ba <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800c74a:	0020      	movs	r0, r4
 800c74c:	3038      	adds	r0, #56	; 0x38
 800c74e:	490f      	ldr	r1, [pc, #60]	; (800c78c <DMA_Init+0xb0>)
 800c750:	f7ff ffb3 	bl	800c6ba <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800c754:	0020      	movs	r0, r4
 800c756:	3070      	adds	r0, #112	; 0x70
 800c758:	490d      	ldr	r1, [pc, #52]	; (800c790 <DMA_Init+0xb4>)
 800c75a:	f7ff ffae 	bl	800c6ba <DMA_MSG_TX_CH_Init>
}
 800c75e:	b002      	add	sp, #8
 800c760:	bd10      	pop	{r4, pc}
 800c762:	46c0      	nop			; (mov r8, r8)
 800c764:	40021000 	.word	0x40021000
 800c768:	200017b0 	.word	0x200017b0
 800c76c:	40020008 	.word	0x40020008
 800c770:	40020030 	.word	0x40020030
 800c774:	40020058 	.word	0x40020058
 800c778:	4002006c 	.word	0x4002006c
 800c77c:	4002041c 	.word	0x4002041c
 800c780:	40020430 	.word	0x40020430
 800c784:	20001900 	.word	0x20001900
 800c788:	4002001c 	.word	0x4002001c
 800c78c:	40020044 	.word	0x40020044
 800c790:	40020080 	.word	0x40020080

0800c794 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c794:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c796:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c798:	2300      	movs	r3, #0
 800c79a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c79c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800c79e:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c7a0:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c7a2:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c7a4:	3320      	adds	r3, #32
 800c7a6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800c7a8:	2380      	movs	r3, #128	; 0x80
 800c7aa:	015b      	lsls	r3, r3, #5
 800c7ac:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c7ae:	f004 fa6f 	bl	8010c90 <HAL_DMA_Init>
}
 800c7b2:	bd10      	pop	{r4, pc}

0800c7b4 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800c7b4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c7b6:	6803      	ldr	r3, [r0, #0]
 800c7b8:	4a20      	ldr	r2, [pc, #128]	; (800c83c <SetupDMAInterrupts+0x88>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d020      	beq.n	800c800 <SetupDMAInterrupts+0x4c>
 800c7be:	d827      	bhi.n	800c810 <SetupDMAInterrupts+0x5c>
 800c7c0:	4a1f      	ldr	r2, [pc, #124]	; (800c840 <SetupDMAInterrupts+0x8c>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d00e      	beq.n	800c7e4 <SetupDMAInterrupts+0x30>
 800c7c6:	d815      	bhi.n	800c7f4 <SetupDMAInterrupts+0x40>
 800c7c8:	4a1e      	ldr	r2, [pc, #120]	; (800c844 <SetupDMAInterrupts+0x90>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d107      	bne.n	800c7de <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	2009      	movs	r0, #9
 800c7d2:	f004 f8bf 	bl	8010954 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800c7d6:	2009      	movs	r0, #9
 800c7d8:	f004 f8f0 	bl	80109bc <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c7dc:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c7de:	4a1a      	ldr	r2, [pc, #104]	; (800c848 <SetupDMAInterrupts+0x94>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d1fb      	bne.n	800c7dc <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	200a      	movs	r0, #10
 800c7e8:	f004 f8b4 	bl	8010954 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c7ec:	200a      	movs	r0, #10
 800c7ee:	f004 f8e5 	bl	80109bc <HAL_NVIC_EnableIRQ>
			break;
 800c7f2:	e7f3      	b.n	800c7dc <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800c7f4:	4a15      	ldr	r2, [pc, #84]	; (800c84c <SetupDMAInterrupts+0x98>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d002      	beq.n	800c800 <SetupDMAInterrupts+0x4c>
 800c7fa:	4a15      	ldr	r2, [pc, #84]	; (800c850 <SetupDMAInterrupts+0x9c>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d1ed      	bne.n	800c7dc <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800c800:	2200      	movs	r2, #0
 800c802:	200b      	movs	r0, #11
 800c804:	f004 f8a6 	bl	8010954 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c808:	200b      	movs	r0, #11
 800c80a:	f004 f8d7 	bl	80109bc <HAL_NVIC_EnableIRQ>
}
 800c80e:	e7e5      	b.n	800c7dc <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800c810:	4a10      	ldr	r2, [pc, #64]	; (800c854 <SetupDMAInterrupts+0xa0>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d0e6      	beq.n	800c7e4 <SetupDMAInterrupts+0x30>
 800c816:	d909      	bls.n	800c82c <SetupDMAInterrupts+0x78>
 800c818:	4a0f      	ldr	r2, [pc, #60]	; (800c858 <SetupDMAInterrupts+0xa4>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d0f0      	beq.n	800c800 <SetupDMAInterrupts+0x4c>
 800c81e:	4a0f      	ldr	r2, [pc, #60]	; (800c85c <SetupDMAInterrupts+0xa8>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d0ed      	beq.n	800c800 <SetupDMAInterrupts+0x4c>
 800c824:	4a0e      	ldr	r2, [pc, #56]	; (800c860 <SetupDMAInterrupts+0xac>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d1d8      	bne.n	800c7dc <SetupDMAInterrupts+0x28>
 800c82a:	e7e9      	b.n	800c800 <SetupDMAInterrupts+0x4c>
 800c82c:	4a0d      	ldr	r2, [pc, #52]	; (800c864 <SetupDMAInterrupts+0xb0>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d0e6      	beq.n	800c800 <SetupDMAInterrupts+0x4c>
 800c832:	4a0d      	ldr	r2, [pc, #52]	; (800c868 <SetupDMAInterrupts+0xb4>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d0d5      	beq.n	800c7e4 <SetupDMAInterrupts+0x30>
 800c838:	e7d0      	b.n	800c7dc <SetupDMAInterrupts+0x28>
 800c83a:	46c0      	nop			; (mov r8, r8)
 800c83c:	4002006c 	.word	0x4002006c
 800c840:	40020030 	.word	0x40020030
 800c844:	40020008 	.word	0x40020008
 800c848:	4002001c 	.word	0x4002001c
 800c84c:	40020044 	.word	0x40020044
 800c850:	40020058 	.word	0x40020058
 800c854:	4002041c 	.word	0x4002041c
 800c858:	40020444 	.word	0x40020444
 800c85c:	40020458 	.word	0x40020458
 800c860:	40020430 	.word	0x40020430
 800c864:	40020080 	.word	0x40020080
 800c868:	40020408 	.word	0x40020408

0800c86c <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800c86c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c86e:	6803      	ldr	r3, [r0, #0]
 800c870:	4a1a      	ldr	r2, [pc, #104]	; (800c8dc <UnSetupDMAInterrupts+0x70>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d018      	beq.n	800c8a8 <UnSetupDMAInterrupts+0x3c>
 800c876:	d81b      	bhi.n	800c8b0 <UnSetupDMAInterrupts+0x44>
 800c878:	4a19      	ldr	r2, [pc, #100]	; (800c8e0 <UnSetupDMAInterrupts+0x74>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d00a      	beq.n	800c894 <UnSetupDMAInterrupts+0x28>
 800c87e:	d80d      	bhi.n	800c89c <UnSetupDMAInterrupts+0x30>
 800c880:	4a18      	ldr	r2, [pc, #96]	; (800c8e4 <UnSetupDMAInterrupts+0x78>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d103      	bne.n	800c88e <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800c886:	2009      	movs	r0, #9
 800c888:	f004 f8a2 	bl	80109d0 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c88c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c88e:	4a16      	ldr	r2, [pc, #88]	; (800c8e8 <UnSetupDMAInterrupts+0x7c>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d1fb      	bne.n	800c88c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c894:	200a      	movs	r0, #10
 800c896:	f004 f89b 	bl	80109d0 <HAL_NVIC_DisableIRQ>
			break;
 800c89a:	e7f7      	b.n	800c88c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800c89c:	4a13      	ldr	r2, [pc, #76]	; (800c8ec <UnSetupDMAInterrupts+0x80>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d002      	beq.n	800c8a8 <UnSetupDMAInterrupts+0x3c>
 800c8a2:	4a13      	ldr	r2, [pc, #76]	; (800c8f0 <UnSetupDMAInterrupts+0x84>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d1f1      	bne.n	800c88c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c8a8:	200b      	movs	r0, #11
 800c8aa:	f004 f891 	bl	80109d0 <HAL_NVIC_DisableIRQ>
}
 800c8ae:	e7ed      	b.n	800c88c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800c8b0:	4a10      	ldr	r2, [pc, #64]	; (800c8f4 <UnSetupDMAInterrupts+0x88>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d0ee      	beq.n	800c894 <UnSetupDMAInterrupts+0x28>
 800c8b6:	d909      	bls.n	800c8cc <UnSetupDMAInterrupts+0x60>
 800c8b8:	4a0f      	ldr	r2, [pc, #60]	; (800c8f8 <UnSetupDMAInterrupts+0x8c>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d0f4      	beq.n	800c8a8 <UnSetupDMAInterrupts+0x3c>
 800c8be:	4a0f      	ldr	r2, [pc, #60]	; (800c8fc <UnSetupDMAInterrupts+0x90>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d0f1      	beq.n	800c8a8 <UnSetupDMAInterrupts+0x3c>
 800c8c4:	4a0e      	ldr	r2, [pc, #56]	; (800c900 <UnSetupDMAInterrupts+0x94>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d1e0      	bne.n	800c88c <UnSetupDMAInterrupts+0x20>
 800c8ca:	e7ed      	b.n	800c8a8 <UnSetupDMAInterrupts+0x3c>
 800c8cc:	4a0d      	ldr	r2, [pc, #52]	; (800c904 <UnSetupDMAInterrupts+0x98>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d0ea      	beq.n	800c8a8 <UnSetupDMAInterrupts+0x3c>
 800c8d2:	4a0d      	ldr	r2, [pc, #52]	; (800c908 <UnSetupDMAInterrupts+0x9c>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d0dd      	beq.n	800c894 <UnSetupDMAInterrupts+0x28>
 800c8d8:	e7d8      	b.n	800c88c <UnSetupDMAInterrupts+0x20>
 800c8da:	46c0      	nop			; (mov r8, r8)
 800c8dc:	4002006c 	.word	0x4002006c
 800c8e0:	40020030 	.word	0x40020030
 800c8e4:	40020008 	.word	0x40020008
 800c8e8:	4002001c 	.word	0x4002001c
 800c8ec:	40020044 	.word	0x40020044
 800c8f0:	40020058 	.word	0x40020058
 800c8f4:	4002041c 	.word	0x4002041c
 800c8f8:	40020444 	.word	0x40020444
 800c8fc:	40020458 	.word	0x40020458
 800c900:	40020430 	.word	0x40020430
 800c904:	40020080 	.word	0x40020080
 800c908:	40020408 	.word	0x40020408

0800c90c <DMA_MSG_TX_UnSetup>:
{	
 800c90c:	b510      	push	{r4, lr}
 800c90e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800c910:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c912:	f7ff ffab 	bl	800c86c <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800c916:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c918:	2300      	movs	r3, #0
 800c91a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800c91c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c91e:	bd10      	pop	{r4, pc}

0800c920 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c920:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c922:	6803      	ldr	r3, [r0, #0]
 800c924:	4abd      	ldr	r2, [pc, #756]	; (800cc1c <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d02f      	beq.n	800c98a <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c92a:	4abd      	ldr	r2, [pc, #756]	; (800cc20 <RemapAndLinkDMAtoUARTRx+0x300>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d100      	bne.n	800c932 <RemapAndLinkDMAtoUARTRx+0x12>
 800c930:	e087      	b.n	800ca42 <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c932:	4abc      	ldr	r2, [pc, #752]	; (800cc24 <RemapAndLinkDMAtoUARTRx+0x304>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d100      	bne.n	800c93a <RemapAndLinkDMAtoUARTRx+0x1a>
 800c938:	e0dc      	b.n	800caf4 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c93a:	4abb      	ldr	r2, [pc, #748]	; (800cc28 <RemapAndLinkDMAtoUARTRx+0x308>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d000      	beq.n	800c942 <RemapAndLinkDMAtoUARTRx+0x22>
 800c940:	e18a      	b.n	800cc58 <RemapAndLinkDMAtoUARTRx+0x338>
 800c942:	680b      	ldr	r3, [r1, #0]
 800c944:	4ab9      	ldr	r2, [pc, #740]	; (800cc2c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d100      	bne.n	800c94c <RemapAndLinkDMAtoUARTRx+0x2c>
 800c94a:	e12d      	b.n	800cba8 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c94c:	4ab8      	ldr	r2, [pc, #736]	; (800cc30 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d100      	bne.n	800c954 <RemapAndLinkDMAtoUARTRx+0x34>
 800c952:	e134      	b.n	800cbbe <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c954:	4ab7      	ldr	r2, [pc, #732]	; (800cc34 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d100      	bne.n	800c95c <RemapAndLinkDMAtoUARTRx+0x3c>
 800c95a:	e13c      	b.n	800cbd6 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c95c:	4ab6      	ldr	r2, [pc, #728]	; (800cc38 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d100      	bne.n	800c964 <RemapAndLinkDMAtoUARTRx+0x44>
 800c962:	e144      	b.n	800cbee <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c964:	4ab5      	ldr	r2, [pc, #724]	; (800cc3c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d100      	bne.n	800c96c <RemapAndLinkDMAtoUARTRx+0x4c>
 800c96a:	e14c      	b.n	800cc06 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c96c:	4ab4      	ldr	r2, [pc, #720]	; (800cc40 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d11e      	bne.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c972:	4ab4      	ldr	r2, [pc, #720]	; (800cc44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c974:	23a8      	movs	r3, #168	; 0xa8
 800c976:	58d4      	ldr	r4, [r2, r3]
 800c978:	4db3      	ldr	r5, [pc, #716]	; (800cc48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c97a:	402c      	ands	r4, r5
 800c97c:	50d4      	str	r4, [r2, r3]
 800c97e:	58d5      	ldr	r5, [r2, r3]
 800c980:	24b0      	movs	r4, #176	; 0xb0
 800c982:	0124      	lsls	r4, r4, #4
 800c984:	432c      	orrs	r4, r5
 800c986:	50d4      	str	r4, [r2, r3]
 800c988:	e012      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c98a:	680b      	ldr	r3, [r1, #0]
 800c98c:	4aa7      	ldr	r2, [pc, #668]	; (800cc2c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d011      	beq.n	800c9b6 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c992:	4aa7      	ldr	r2, [pc, #668]	; (800cc30 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d019      	beq.n	800c9cc <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c998:	4aa6      	ldr	r2, [pc, #664]	; (800cc34 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d022      	beq.n	800c9e4 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c99e:	4aa6      	ldr	r2, [pc, #664]	; (800cc38 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d02b      	beq.n	800c9fc <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c9a4:	4aa5      	ldr	r2, [pc, #660]	; (800cc3c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d034      	beq.n	800ca14 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c9aa:	4aa5      	ldr	r2, [pc, #660]	; (800cc40 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d03c      	beq.n	800ca2a <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c9b0:	6641      	str	r1, [r0, #100]	; 0x64
 800c9b2:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c9b4:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c9b6:	4aa5      	ldr	r2, [pc, #660]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c9b8:	23a8      	movs	r3, #168	; 0xa8
 800c9ba:	58d4      	ldr	r4, [r2, r3]
 800c9bc:	250f      	movs	r5, #15
 800c9be:	43ac      	bics	r4, r5
 800c9c0:	50d4      	str	r4, [r2, r3]
 800c9c2:	58d4      	ldr	r4, [r2, r3]
 800c9c4:	3d07      	subs	r5, #7
 800c9c6:	432c      	orrs	r4, r5
 800c9c8:	50d4      	str	r4, [r2, r3]
 800c9ca:	e7f1      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c9cc:	4a9f      	ldr	r2, [pc, #636]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c9ce:	23a8      	movs	r3, #168	; 0xa8
 800c9d0:	58d4      	ldr	r4, [r2, r3]
 800c9d2:	4d9d      	ldr	r5, [pc, #628]	; (800cc48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c9d4:	402c      	ands	r4, r5
 800c9d6:	50d4      	str	r4, [r2, r3]
 800c9d8:	58d5      	ldr	r5, [r2, r3]
 800c9da:	2480      	movs	r4, #128	; 0x80
 800c9dc:	0124      	lsls	r4, r4, #4
 800c9de:	432c      	orrs	r4, r5
 800c9e0:	50d4      	str	r4, [r2, r3]
 800c9e2:	e7e5      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c9e4:	4a99      	ldr	r2, [pc, #612]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c9e6:	23a8      	movs	r3, #168	; 0xa8
 800c9e8:	58d4      	ldr	r4, [r2, r3]
 800c9ea:	4d99      	ldr	r5, [pc, #612]	; (800cc50 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c9ec:	402c      	ands	r4, r5
 800c9ee:	50d4      	str	r4, [r2, r3]
 800c9f0:	58d5      	ldr	r5, [r2, r3]
 800c9f2:	2480      	movs	r4, #128	; 0x80
 800c9f4:	0324      	lsls	r4, r4, #12
 800c9f6:	432c      	orrs	r4, r5
 800c9f8:	50d4      	str	r4, [r2, r3]
 800c9fa:	e7d9      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c9fc:	4a93      	ldr	r2, [pc, #588]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c9fe:	23a8      	movs	r3, #168	; 0xa8
 800ca00:	58d4      	ldr	r4, [r2, r3]
 800ca02:	4d94      	ldr	r5, [pc, #592]	; (800cc54 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ca04:	402c      	ands	r4, r5
 800ca06:	50d4      	str	r4, [r2, r3]
 800ca08:	58d5      	ldr	r5, [r2, r3]
 800ca0a:	2480      	movs	r4, #128	; 0x80
 800ca0c:	0424      	lsls	r4, r4, #16
 800ca0e:	432c      	orrs	r4, r5
 800ca10:	50d4      	str	r4, [r2, r3]
 800ca12:	e7cd      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800ca14:	4a8b      	ldr	r2, [pc, #556]	; (800cc44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ca16:	23a8      	movs	r3, #168	; 0xa8
 800ca18:	58d4      	ldr	r4, [r2, r3]
 800ca1a:	25f0      	movs	r5, #240	; 0xf0
 800ca1c:	43ac      	bics	r4, r5
 800ca1e:	50d4      	str	r4, [r2, r3]
 800ca20:	58d4      	ldr	r4, [r2, r3]
 800ca22:	3d70      	subs	r5, #112	; 0x70
 800ca24:	432c      	orrs	r4, r5
 800ca26:	50d4      	str	r4, [r2, r3]
 800ca28:	e7c2      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ca2a:	4a86      	ldr	r2, [pc, #536]	; (800cc44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ca2c:	23a8      	movs	r3, #168	; 0xa8
 800ca2e:	58d4      	ldr	r4, [r2, r3]
 800ca30:	4d85      	ldr	r5, [pc, #532]	; (800cc48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ca32:	402c      	ands	r4, r5
 800ca34:	50d4      	str	r4, [r2, r3]
 800ca36:	58d5      	ldr	r5, [r2, r3]
 800ca38:	2480      	movs	r4, #128	; 0x80
 800ca3a:	0124      	lsls	r4, r4, #4
 800ca3c:	432c      	orrs	r4, r5
 800ca3e:	50d4      	str	r4, [r2, r3]
 800ca40:	e7b6      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ca42:	680b      	ldr	r3, [r1, #0]
 800ca44:	4a79      	ldr	r2, [pc, #484]	; (800cc2c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d01a      	beq.n	800ca80 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ca4a:	4a79      	ldr	r2, [pc, #484]	; (800cc30 <RemapAndLinkDMAtoUARTRx+0x310>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d022      	beq.n	800ca96 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800ca50:	4a78      	ldr	r2, [pc, #480]	; (800cc34 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d02b      	beq.n	800caae <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800ca56:	4a78      	ldr	r2, [pc, #480]	; (800cc38 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d034      	beq.n	800cac6 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800ca5c:	4a77      	ldr	r2, [pc, #476]	; (800cc3c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d03d      	beq.n	800cade <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800ca62:	4a77      	ldr	r2, [pc, #476]	; (800cc40 <RemapAndLinkDMAtoUARTRx+0x320>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d1a3      	bne.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800ca68:	4a76      	ldr	r2, [pc, #472]	; (800cc44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ca6a:	23a8      	movs	r3, #168	; 0xa8
 800ca6c:	58d4      	ldr	r4, [r2, r3]
 800ca6e:	4d76      	ldr	r5, [pc, #472]	; (800cc48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ca70:	402c      	ands	r4, r5
 800ca72:	50d4      	str	r4, [r2, r3]
 800ca74:	58d5      	ldr	r5, [r2, r3]
 800ca76:	2490      	movs	r4, #144	; 0x90
 800ca78:	0124      	lsls	r4, r4, #4
 800ca7a:	432c      	orrs	r4, r5
 800ca7c:	50d4      	str	r4, [r2, r3]
 800ca7e:	e797      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800ca80:	4a72      	ldr	r2, [pc, #456]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ca82:	23a8      	movs	r3, #168	; 0xa8
 800ca84:	58d4      	ldr	r4, [r2, r3]
 800ca86:	250f      	movs	r5, #15
 800ca88:	43ac      	bics	r4, r5
 800ca8a:	50d4      	str	r4, [r2, r3]
 800ca8c:	58d4      	ldr	r4, [r2, r3]
 800ca8e:	3d06      	subs	r5, #6
 800ca90:	432c      	orrs	r4, r5
 800ca92:	50d4      	str	r4, [r2, r3]
 800ca94:	e78c      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800ca96:	4a6d      	ldr	r2, [pc, #436]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ca98:	23a8      	movs	r3, #168	; 0xa8
 800ca9a:	58d4      	ldr	r4, [r2, r3]
 800ca9c:	4d6a      	ldr	r5, [pc, #424]	; (800cc48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ca9e:	402c      	ands	r4, r5
 800caa0:	50d4      	str	r4, [r2, r3]
 800caa2:	58d5      	ldr	r5, [r2, r3]
 800caa4:	2490      	movs	r4, #144	; 0x90
 800caa6:	0124      	lsls	r4, r4, #4
 800caa8:	432c      	orrs	r4, r5
 800caaa:	50d4      	str	r4, [r2, r3]
 800caac:	e780      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800caae:	4a67      	ldr	r2, [pc, #412]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cab0:	23a8      	movs	r3, #168	; 0xa8
 800cab2:	58d4      	ldr	r4, [r2, r3]
 800cab4:	4d66      	ldr	r5, [pc, #408]	; (800cc50 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cab6:	402c      	ands	r4, r5
 800cab8:	50d4      	str	r4, [r2, r3]
 800caba:	58d5      	ldr	r5, [r2, r3]
 800cabc:	2490      	movs	r4, #144	; 0x90
 800cabe:	0324      	lsls	r4, r4, #12
 800cac0:	432c      	orrs	r4, r5
 800cac2:	50d4      	str	r4, [r2, r3]
 800cac4:	e774      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800cac6:	4a61      	ldr	r2, [pc, #388]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cac8:	23a8      	movs	r3, #168	; 0xa8
 800caca:	58d4      	ldr	r4, [r2, r3]
 800cacc:	4d61      	ldr	r5, [pc, #388]	; (800cc54 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cace:	402c      	ands	r4, r5
 800cad0:	50d4      	str	r4, [r2, r3]
 800cad2:	58d5      	ldr	r5, [r2, r3]
 800cad4:	2490      	movs	r4, #144	; 0x90
 800cad6:	0424      	lsls	r4, r4, #16
 800cad8:	432c      	orrs	r4, r5
 800cada:	50d4      	str	r4, [r2, r3]
 800cadc:	e768      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800cade:	4a59      	ldr	r2, [pc, #356]	; (800cc44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cae0:	23a8      	movs	r3, #168	; 0xa8
 800cae2:	58d4      	ldr	r4, [r2, r3]
 800cae4:	25f0      	movs	r5, #240	; 0xf0
 800cae6:	43ac      	bics	r4, r5
 800cae8:	50d4      	str	r4, [r2, r3]
 800caea:	58d4      	ldr	r4, [r2, r3]
 800caec:	3d60      	subs	r5, #96	; 0x60
 800caee:	432c      	orrs	r4, r5
 800caf0:	50d4      	str	r4, [r2, r3]
 800caf2:	e75d      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800caf4:	680b      	ldr	r3, [r1, #0]
 800caf6:	4a4d      	ldr	r2, [pc, #308]	; (800cc2c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d01b      	beq.n	800cb34 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800cafc:	4a4c      	ldr	r2, [pc, #304]	; (800cc30 <RemapAndLinkDMAtoUARTRx+0x310>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d023      	beq.n	800cb4a <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800cb02:	4a4c      	ldr	r2, [pc, #304]	; (800cc34 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d02c      	beq.n	800cb62 <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800cb08:	4a4b      	ldr	r2, [pc, #300]	; (800cc38 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d035      	beq.n	800cb7a <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800cb0e:	4a4b      	ldr	r2, [pc, #300]	; (800cc3c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d03e      	beq.n	800cb92 <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800cb14:	4a4a      	ldr	r2, [pc, #296]	; (800cc40 <RemapAndLinkDMAtoUARTRx+0x320>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d000      	beq.n	800cb1c <RemapAndLinkDMAtoUARTRx+0x1fc>
 800cb1a:	e749      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800cb1c:	4a49      	ldr	r2, [pc, #292]	; (800cc44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cb1e:	23a8      	movs	r3, #168	; 0xa8
 800cb20:	58d4      	ldr	r4, [r2, r3]
 800cb22:	4d49      	ldr	r5, [pc, #292]	; (800cc48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cb24:	402c      	ands	r4, r5
 800cb26:	50d4      	str	r4, [r2, r3]
 800cb28:	58d5      	ldr	r5, [r2, r3]
 800cb2a:	24a0      	movs	r4, #160	; 0xa0
 800cb2c:	0124      	lsls	r4, r4, #4
 800cb2e:	432c      	orrs	r4, r5
 800cb30:	50d4      	str	r4, [r2, r3]
 800cb32:	e73d      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800cb34:	4a45      	ldr	r2, [pc, #276]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cb36:	23a8      	movs	r3, #168	; 0xa8
 800cb38:	58d4      	ldr	r4, [r2, r3]
 800cb3a:	250f      	movs	r5, #15
 800cb3c:	43ac      	bics	r4, r5
 800cb3e:	50d4      	str	r4, [r2, r3]
 800cb40:	58d4      	ldr	r4, [r2, r3]
 800cb42:	3d05      	subs	r5, #5
 800cb44:	432c      	orrs	r4, r5
 800cb46:	50d4      	str	r4, [r2, r3]
 800cb48:	e732      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800cb4a:	4a40      	ldr	r2, [pc, #256]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cb4c:	23a8      	movs	r3, #168	; 0xa8
 800cb4e:	58d4      	ldr	r4, [r2, r3]
 800cb50:	4d3d      	ldr	r5, [pc, #244]	; (800cc48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cb52:	402c      	ands	r4, r5
 800cb54:	50d4      	str	r4, [r2, r3]
 800cb56:	58d5      	ldr	r5, [r2, r3]
 800cb58:	24a0      	movs	r4, #160	; 0xa0
 800cb5a:	0124      	lsls	r4, r4, #4
 800cb5c:	432c      	orrs	r4, r5
 800cb5e:	50d4      	str	r4, [r2, r3]
 800cb60:	e726      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800cb62:	4a3a      	ldr	r2, [pc, #232]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cb64:	23a8      	movs	r3, #168	; 0xa8
 800cb66:	58d4      	ldr	r4, [r2, r3]
 800cb68:	4d39      	ldr	r5, [pc, #228]	; (800cc50 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cb6a:	402c      	ands	r4, r5
 800cb6c:	50d4      	str	r4, [r2, r3]
 800cb6e:	58d5      	ldr	r5, [r2, r3]
 800cb70:	24a0      	movs	r4, #160	; 0xa0
 800cb72:	0324      	lsls	r4, r4, #12
 800cb74:	432c      	orrs	r4, r5
 800cb76:	50d4      	str	r4, [r2, r3]
 800cb78:	e71a      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800cb7a:	4a34      	ldr	r2, [pc, #208]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cb7c:	23a8      	movs	r3, #168	; 0xa8
 800cb7e:	58d4      	ldr	r4, [r2, r3]
 800cb80:	4d34      	ldr	r5, [pc, #208]	; (800cc54 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cb82:	402c      	ands	r4, r5
 800cb84:	50d4      	str	r4, [r2, r3]
 800cb86:	58d5      	ldr	r5, [r2, r3]
 800cb88:	24a0      	movs	r4, #160	; 0xa0
 800cb8a:	0424      	lsls	r4, r4, #16
 800cb8c:	432c      	orrs	r4, r5
 800cb8e:	50d4      	str	r4, [r2, r3]
 800cb90:	e70e      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800cb92:	4a2c      	ldr	r2, [pc, #176]	; (800cc44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cb94:	23a8      	movs	r3, #168	; 0xa8
 800cb96:	58d4      	ldr	r4, [r2, r3]
 800cb98:	25f0      	movs	r5, #240	; 0xf0
 800cb9a:	43ac      	bics	r4, r5
 800cb9c:	50d4      	str	r4, [r2, r3]
 800cb9e:	58d4      	ldr	r4, [r2, r3]
 800cba0:	3d50      	subs	r5, #80	; 0x50
 800cba2:	432c      	orrs	r4, r5
 800cba4:	50d4      	str	r4, [r2, r3]
 800cba6:	e703      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800cba8:	4a28      	ldr	r2, [pc, #160]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cbaa:	23a8      	movs	r3, #168	; 0xa8
 800cbac:	58d4      	ldr	r4, [r2, r3]
 800cbae:	250f      	movs	r5, #15
 800cbb0:	43ac      	bics	r4, r5
 800cbb2:	50d4      	str	r4, [r2, r3]
 800cbb4:	58d4      	ldr	r4, [r2, r3]
 800cbb6:	3d04      	subs	r5, #4
 800cbb8:	432c      	orrs	r4, r5
 800cbba:	50d4      	str	r4, [r2, r3]
 800cbbc:	e6f8      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800cbbe:	4a23      	ldr	r2, [pc, #140]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cbc0:	23a8      	movs	r3, #168	; 0xa8
 800cbc2:	58d4      	ldr	r4, [r2, r3]
 800cbc4:	4d20      	ldr	r5, [pc, #128]	; (800cc48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cbc6:	402c      	ands	r4, r5
 800cbc8:	50d4      	str	r4, [r2, r3]
 800cbca:	58d5      	ldr	r5, [r2, r3]
 800cbcc:	24b0      	movs	r4, #176	; 0xb0
 800cbce:	0124      	lsls	r4, r4, #4
 800cbd0:	432c      	orrs	r4, r5
 800cbd2:	50d4      	str	r4, [r2, r3]
 800cbd4:	e6ec      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800cbd6:	4a1d      	ldr	r2, [pc, #116]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cbd8:	23a8      	movs	r3, #168	; 0xa8
 800cbda:	58d4      	ldr	r4, [r2, r3]
 800cbdc:	4d1c      	ldr	r5, [pc, #112]	; (800cc50 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cbde:	402c      	ands	r4, r5
 800cbe0:	50d4      	str	r4, [r2, r3]
 800cbe2:	58d5      	ldr	r5, [r2, r3]
 800cbe4:	24b0      	movs	r4, #176	; 0xb0
 800cbe6:	0324      	lsls	r4, r4, #12
 800cbe8:	432c      	orrs	r4, r5
 800cbea:	50d4      	str	r4, [r2, r3]
 800cbec:	e6e0      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800cbee:	4a17      	ldr	r2, [pc, #92]	; (800cc4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cbf0:	23a8      	movs	r3, #168	; 0xa8
 800cbf2:	58d4      	ldr	r4, [r2, r3]
 800cbf4:	4d17      	ldr	r5, [pc, #92]	; (800cc54 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cbf6:	402c      	ands	r4, r5
 800cbf8:	50d4      	str	r4, [r2, r3]
 800cbfa:	58d5      	ldr	r5, [r2, r3]
 800cbfc:	24b0      	movs	r4, #176	; 0xb0
 800cbfe:	0424      	lsls	r4, r4, #16
 800cc00:	432c      	orrs	r4, r5
 800cc02:	50d4      	str	r4, [r2, r3]
 800cc04:	e6d4      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800cc06:	4a0f      	ldr	r2, [pc, #60]	; (800cc44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cc08:	23a8      	movs	r3, #168	; 0xa8
 800cc0a:	58d4      	ldr	r4, [r2, r3]
 800cc0c:	25f0      	movs	r5, #240	; 0xf0
 800cc0e:	43ac      	bics	r4, r5
 800cc10:	50d4      	str	r4, [r2, r3]
 800cc12:	58d4      	ldr	r4, [r2, r3]
 800cc14:	3d40      	subs	r5, #64	; 0x40
 800cc16:	432c      	orrs	r4, r5
 800cc18:	50d4      	str	r4, [r2, r3]
 800cc1a:	e6c9      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
 800cc1c:	40013800 	.word	0x40013800
 800cc20:	40004400 	.word	0x40004400
 800cc24:	40004800 	.word	0x40004800
 800cc28:	40004c00 	.word	0x40004c00
 800cc2c:	40020008 	.word	0x40020008
 800cc30:	40020030 	.word	0x40020030
 800cc34:	40020058 	.word	0x40020058
 800cc38:	4002006c 	.word	0x4002006c
 800cc3c:	4002041c 	.word	0x4002041c
 800cc40:	40020430 	.word	0x40020430
 800cc44:	40020400 	.word	0x40020400
 800cc48:	fffff0ff 	.word	0xfffff0ff
 800cc4c:	40020000 	.word	0x40020000
 800cc50:	fff0ffff 	.word	0xfff0ffff
 800cc54:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800cc58:	4ab9      	ldr	r2, [pc, #740]	; (800cf40 <RemapAndLinkDMAtoUARTRx+0x620>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d159      	bne.n	800cd12 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800cc5e:	680b      	ldr	r3, [r1, #0]
 800cc60:	4ab8      	ldr	r2, [pc, #736]	; (800cf44 <RemapAndLinkDMAtoUARTRx+0x624>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d01b      	beq.n	800cc9e <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800cc66:	4ab8      	ldr	r2, [pc, #736]	; (800cf48 <RemapAndLinkDMAtoUARTRx+0x628>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d023      	beq.n	800ccb4 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800cc6c:	4ab7      	ldr	r2, [pc, #732]	; (800cf4c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d02c      	beq.n	800cccc <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800cc72:	4ab7      	ldr	r2, [pc, #732]	; (800cf50 <RemapAndLinkDMAtoUARTRx+0x630>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d035      	beq.n	800cce4 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800cc78:	4ab6      	ldr	r2, [pc, #728]	; (800cf54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d03e      	beq.n	800ccfc <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800cc7e:	4ab6      	ldr	r2, [pc, #728]	; (800cf58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d000      	beq.n	800cc86 <RemapAndLinkDMAtoUARTRx+0x366>
 800cc84:	e694      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800cc86:	4ab5      	ldr	r2, [pc, #724]	; (800cf5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cc88:	23a8      	movs	r3, #168	; 0xa8
 800cc8a:	58d4      	ldr	r4, [r2, r3]
 800cc8c:	4db4      	ldr	r5, [pc, #720]	; (800cf60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cc8e:	402c      	ands	r4, r5
 800cc90:	50d4      	str	r4, [r2, r3]
 800cc92:	58d5      	ldr	r5, [r2, r3]
 800cc94:	24c0      	movs	r4, #192	; 0xc0
 800cc96:	0124      	lsls	r4, r4, #4
 800cc98:	432c      	orrs	r4, r5
 800cc9a:	50d4      	str	r4, [r2, r3]
 800cc9c:	e688      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800cc9e:	4ab1      	ldr	r2, [pc, #708]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cca0:	23a8      	movs	r3, #168	; 0xa8
 800cca2:	58d4      	ldr	r4, [r2, r3]
 800cca4:	250f      	movs	r5, #15
 800cca6:	43ac      	bics	r4, r5
 800cca8:	50d4      	str	r4, [r2, r3]
 800ccaa:	58d4      	ldr	r4, [r2, r3]
 800ccac:	3d03      	subs	r5, #3
 800ccae:	432c      	orrs	r4, r5
 800ccb0:	50d4      	str	r4, [r2, r3]
 800ccb2:	e67d      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800ccb4:	4aab      	ldr	r2, [pc, #684]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ccb6:	23a8      	movs	r3, #168	; 0xa8
 800ccb8:	58d4      	ldr	r4, [r2, r3]
 800ccba:	4da9      	ldr	r5, [pc, #676]	; (800cf60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ccbc:	402c      	ands	r4, r5
 800ccbe:	50d4      	str	r4, [r2, r3]
 800ccc0:	58d5      	ldr	r5, [r2, r3]
 800ccc2:	24c0      	movs	r4, #192	; 0xc0
 800ccc4:	0124      	lsls	r4, r4, #4
 800ccc6:	432c      	orrs	r4, r5
 800ccc8:	50d4      	str	r4, [r2, r3]
 800ccca:	e671      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800cccc:	4aa5      	ldr	r2, [pc, #660]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ccce:	23a8      	movs	r3, #168	; 0xa8
 800ccd0:	58d4      	ldr	r4, [r2, r3]
 800ccd2:	4da5      	ldr	r5, [pc, #660]	; (800cf68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800ccd4:	402c      	ands	r4, r5
 800ccd6:	50d4      	str	r4, [r2, r3]
 800ccd8:	58d5      	ldr	r5, [r2, r3]
 800ccda:	24c0      	movs	r4, #192	; 0xc0
 800ccdc:	0324      	lsls	r4, r4, #12
 800ccde:	432c      	orrs	r4, r5
 800cce0:	50d4      	str	r4, [r2, r3]
 800cce2:	e665      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800cce4:	4a9f      	ldr	r2, [pc, #636]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cce6:	23a8      	movs	r3, #168	; 0xa8
 800cce8:	58d4      	ldr	r4, [r2, r3]
 800ccea:	4da0      	ldr	r5, [pc, #640]	; (800cf6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800ccec:	402c      	ands	r4, r5
 800ccee:	50d4      	str	r4, [r2, r3]
 800ccf0:	58d5      	ldr	r5, [r2, r3]
 800ccf2:	24c0      	movs	r4, #192	; 0xc0
 800ccf4:	0424      	lsls	r4, r4, #16
 800ccf6:	432c      	orrs	r4, r5
 800ccf8:	50d4      	str	r4, [r2, r3]
 800ccfa:	e659      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800ccfc:	4a97      	ldr	r2, [pc, #604]	; (800cf5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ccfe:	23a8      	movs	r3, #168	; 0xa8
 800cd00:	58d4      	ldr	r4, [r2, r3]
 800cd02:	25f0      	movs	r5, #240	; 0xf0
 800cd04:	43ac      	bics	r4, r5
 800cd06:	50d4      	str	r4, [r2, r3]
 800cd08:	58d4      	ldr	r4, [r2, r3]
 800cd0a:	3d30      	subs	r5, #48	; 0x30
 800cd0c:	432c      	orrs	r4, r5
 800cd0e:	50d4      	str	r4, [r2, r3]
 800cd10:	e64e      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800cd12:	4a97      	ldr	r2, [pc, #604]	; (800cf70 <RemapAndLinkDMAtoUARTRx+0x650>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d159      	bne.n	800cdcc <RemapAndLinkDMAtoUARTRx+0x4ac>
 800cd18:	680b      	ldr	r3, [r1, #0]
 800cd1a:	4a8a      	ldr	r2, [pc, #552]	; (800cf44 <RemapAndLinkDMAtoUARTRx+0x624>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d01b      	beq.n	800cd58 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800cd20:	4a89      	ldr	r2, [pc, #548]	; (800cf48 <RemapAndLinkDMAtoUARTRx+0x628>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d023      	beq.n	800cd6e <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800cd26:	4a89      	ldr	r2, [pc, #548]	; (800cf4c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d02c      	beq.n	800cd86 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800cd2c:	4a88      	ldr	r2, [pc, #544]	; (800cf50 <RemapAndLinkDMAtoUARTRx+0x630>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d035      	beq.n	800cd9e <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800cd32:	4a88      	ldr	r2, [pc, #544]	; (800cf54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d03e      	beq.n	800cdb6 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800cd38:	4a87      	ldr	r2, [pc, #540]	; (800cf58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d000      	beq.n	800cd40 <RemapAndLinkDMAtoUARTRx+0x420>
 800cd3e:	e637      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800cd40:	4a86      	ldr	r2, [pc, #536]	; (800cf5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cd42:	23a8      	movs	r3, #168	; 0xa8
 800cd44:	58d4      	ldr	r4, [r2, r3]
 800cd46:	4d86      	ldr	r5, [pc, #536]	; (800cf60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cd48:	402c      	ands	r4, r5
 800cd4a:	50d4      	str	r4, [r2, r3]
 800cd4c:	58d5      	ldr	r5, [r2, r3]
 800cd4e:	24d0      	movs	r4, #208	; 0xd0
 800cd50:	0124      	lsls	r4, r4, #4
 800cd52:	432c      	orrs	r4, r5
 800cd54:	50d4      	str	r4, [r2, r3]
 800cd56:	e62b      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800cd58:	4a82      	ldr	r2, [pc, #520]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cd5a:	23a8      	movs	r3, #168	; 0xa8
 800cd5c:	58d4      	ldr	r4, [r2, r3]
 800cd5e:	250f      	movs	r5, #15
 800cd60:	43ac      	bics	r4, r5
 800cd62:	50d4      	str	r4, [r2, r3]
 800cd64:	58d4      	ldr	r4, [r2, r3]
 800cd66:	3d02      	subs	r5, #2
 800cd68:	432c      	orrs	r4, r5
 800cd6a:	50d4      	str	r4, [r2, r3]
 800cd6c:	e620      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800cd6e:	4a7d      	ldr	r2, [pc, #500]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cd70:	23a8      	movs	r3, #168	; 0xa8
 800cd72:	58d4      	ldr	r4, [r2, r3]
 800cd74:	4d7a      	ldr	r5, [pc, #488]	; (800cf60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cd76:	402c      	ands	r4, r5
 800cd78:	50d4      	str	r4, [r2, r3]
 800cd7a:	58d5      	ldr	r5, [r2, r3]
 800cd7c:	24d0      	movs	r4, #208	; 0xd0
 800cd7e:	0124      	lsls	r4, r4, #4
 800cd80:	432c      	orrs	r4, r5
 800cd82:	50d4      	str	r4, [r2, r3]
 800cd84:	e614      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800cd86:	4a77      	ldr	r2, [pc, #476]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cd88:	23a8      	movs	r3, #168	; 0xa8
 800cd8a:	58d4      	ldr	r4, [r2, r3]
 800cd8c:	4d76      	ldr	r5, [pc, #472]	; (800cf68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800cd8e:	402c      	ands	r4, r5
 800cd90:	50d4      	str	r4, [r2, r3]
 800cd92:	58d5      	ldr	r5, [r2, r3]
 800cd94:	24d0      	movs	r4, #208	; 0xd0
 800cd96:	0324      	lsls	r4, r4, #12
 800cd98:	432c      	orrs	r4, r5
 800cd9a:	50d4      	str	r4, [r2, r3]
 800cd9c:	e608      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800cd9e:	4a71      	ldr	r2, [pc, #452]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cda0:	23a8      	movs	r3, #168	; 0xa8
 800cda2:	58d4      	ldr	r4, [r2, r3]
 800cda4:	4d71      	ldr	r5, [pc, #452]	; (800cf6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800cda6:	402c      	ands	r4, r5
 800cda8:	50d4      	str	r4, [r2, r3]
 800cdaa:	58d5      	ldr	r5, [r2, r3]
 800cdac:	24d0      	movs	r4, #208	; 0xd0
 800cdae:	0424      	lsls	r4, r4, #16
 800cdb0:	432c      	orrs	r4, r5
 800cdb2:	50d4      	str	r4, [r2, r3]
 800cdb4:	e5fc      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800cdb6:	4a69      	ldr	r2, [pc, #420]	; (800cf5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cdb8:	23a8      	movs	r3, #168	; 0xa8
 800cdba:	58d4      	ldr	r4, [r2, r3]
 800cdbc:	25f0      	movs	r5, #240	; 0xf0
 800cdbe:	43ac      	bics	r4, r5
 800cdc0:	50d4      	str	r4, [r2, r3]
 800cdc2:	58d4      	ldr	r4, [r2, r3]
 800cdc4:	3d20      	subs	r5, #32
 800cdc6:	432c      	orrs	r4, r5
 800cdc8:	50d4      	str	r4, [r2, r3]
 800cdca:	e5f1      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800cdcc:	4a69      	ldr	r2, [pc, #420]	; (800cf74 <RemapAndLinkDMAtoUARTRx+0x654>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d159      	bne.n	800ce86 <RemapAndLinkDMAtoUARTRx+0x566>
 800cdd2:	680b      	ldr	r3, [r1, #0]
 800cdd4:	4a5b      	ldr	r2, [pc, #364]	; (800cf44 <RemapAndLinkDMAtoUARTRx+0x624>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d01b      	beq.n	800ce12 <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800cdda:	4a5b      	ldr	r2, [pc, #364]	; (800cf48 <RemapAndLinkDMAtoUARTRx+0x628>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d023      	beq.n	800ce28 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800cde0:	4a5a      	ldr	r2, [pc, #360]	; (800cf4c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d02c      	beq.n	800ce40 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800cde6:	4a5a      	ldr	r2, [pc, #360]	; (800cf50 <RemapAndLinkDMAtoUARTRx+0x630>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d035      	beq.n	800ce58 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800cdec:	4a59      	ldr	r2, [pc, #356]	; (800cf54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d03e      	beq.n	800ce70 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800cdf2:	4a59      	ldr	r2, [pc, #356]	; (800cf58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d000      	beq.n	800cdfa <RemapAndLinkDMAtoUARTRx+0x4da>
 800cdf8:	e5da      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800cdfa:	4a58      	ldr	r2, [pc, #352]	; (800cf5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cdfc:	23a8      	movs	r3, #168	; 0xa8
 800cdfe:	58d4      	ldr	r4, [r2, r3]
 800ce00:	4d57      	ldr	r5, [pc, #348]	; (800cf60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ce02:	402c      	ands	r4, r5
 800ce04:	50d4      	str	r4, [r2, r3]
 800ce06:	58d5      	ldr	r5, [r2, r3]
 800ce08:	24e0      	movs	r4, #224	; 0xe0
 800ce0a:	0124      	lsls	r4, r4, #4
 800ce0c:	432c      	orrs	r4, r5
 800ce0e:	50d4      	str	r4, [r2, r3]
 800ce10:	e5ce      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800ce12:	4a54      	ldr	r2, [pc, #336]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ce14:	23a8      	movs	r3, #168	; 0xa8
 800ce16:	58d4      	ldr	r4, [r2, r3]
 800ce18:	250f      	movs	r5, #15
 800ce1a:	43ac      	bics	r4, r5
 800ce1c:	50d4      	str	r4, [r2, r3]
 800ce1e:	58d4      	ldr	r4, [r2, r3]
 800ce20:	3d01      	subs	r5, #1
 800ce22:	432c      	orrs	r4, r5
 800ce24:	50d4      	str	r4, [r2, r3]
 800ce26:	e5c3      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800ce28:	4a4e      	ldr	r2, [pc, #312]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ce2a:	23a8      	movs	r3, #168	; 0xa8
 800ce2c:	58d4      	ldr	r4, [r2, r3]
 800ce2e:	4d4c      	ldr	r5, [pc, #304]	; (800cf60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ce30:	402c      	ands	r4, r5
 800ce32:	50d4      	str	r4, [r2, r3]
 800ce34:	58d5      	ldr	r5, [r2, r3]
 800ce36:	24e0      	movs	r4, #224	; 0xe0
 800ce38:	0124      	lsls	r4, r4, #4
 800ce3a:	432c      	orrs	r4, r5
 800ce3c:	50d4      	str	r4, [r2, r3]
 800ce3e:	e5b7      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800ce40:	4a48      	ldr	r2, [pc, #288]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ce42:	23a8      	movs	r3, #168	; 0xa8
 800ce44:	58d4      	ldr	r4, [r2, r3]
 800ce46:	4d48      	ldr	r5, [pc, #288]	; (800cf68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800ce48:	402c      	ands	r4, r5
 800ce4a:	50d4      	str	r4, [r2, r3]
 800ce4c:	58d5      	ldr	r5, [r2, r3]
 800ce4e:	24e0      	movs	r4, #224	; 0xe0
 800ce50:	0324      	lsls	r4, r4, #12
 800ce52:	432c      	orrs	r4, r5
 800ce54:	50d4      	str	r4, [r2, r3]
 800ce56:	e5ab      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800ce58:	4a42      	ldr	r2, [pc, #264]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ce5a:	23a8      	movs	r3, #168	; 0xa8
 800ce5c:	58d4      	ldr	r4, [r2, r3]
 800ce5e:	4d43      	ldr	r5, [pc, #268]	; (800cf6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800ce60:	402c      	ands	r4, r5
 800ce62:	50d4      	str	r4, [r2, r3]
 800ce64:	58d5      	ldr	r5, [r2, r3]
 800ce66:	24e0      	movs	r4, #224	; 0xe0
 800ce68:	0424      	lsls	r4, r4, #16
 800ce6a:	432c      	orrs	r4, r5
 800ce6c:	50d4      	str	r4, [r2, r3]
 800ce6e:	e59f      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800ce70:	4a3a      	ldr	r2, [pc, #232]	; (800cf5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ce72:	23a8      	movs	r3, #168	; 0xa8
 800ce74:	58d4      	ldr	r4, [r2, r3]
 800ce76:	25f0      	movs	r5, #240	; 0xf0
 800ce78:	43ac      	bics	r4, r5
 800ce7a:	50d4      	str	r4, [r2, r3]
 800ce7c:	58d4      	ldr	r4, [r2, r3]
 800ce7e:	3d10      	subs	r5, #16
 800ce80:	432c      	orrs	r4, r5
 800ce82:	50d4      	str	r4, [r2, r3]
 800ce84:	e594      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800ce86:	4a3c      	ldr	r2, [pc, #240]	; (800cf78 <RemapAndLinkDMAtoUARTRx+0x658>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d000      	beq.n	800ce8e <RemapAndLinkDMAtoUARTRx+0x56e>
 800ce8c:	e590      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
 800ce8e:	680b      	ldr	r3, [r1, #0]
 800ce90:	4a2c      	ldr	r2, [pc, #176]	; (800cf44 <RemapAndLinkDMAtoUARTRx+0x624>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d01b      	beq.n	800cece <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800ce96:	4a2c      	ldr	r2, [pc, #176]	; (800cf48 <RemapAndLinkDMAtoUARTRx+0x628>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d022      	beq.n	800cee2 <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800ce9c:	4a2b      	ldr	r2, [pc, #172]	; (800cf4c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d02b      	beq.n	800cefa <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800cea2:	4a2b      	ldr	r2, [pc, #172]	; (800cf50 <RemapAndLinkDMAtoUARTRx+0x630>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d034      	beq.n	800cf12 <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800cea8:	4a2a      	ldr	r2, [pc, #168]	; (800cf54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d03d      	beq.n	800cf2a <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800ceae:	4a2a      	ldr	r2, [pc, #168]	; (800cf58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d000      	beq.n	800ceb6 <RemapAndLinkDMAtoUARTRx+0x596>
 800ceb4:	e57c      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800ceb6:	4a29      	ldr	r2, [pc, #164]	; (800cf5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ceb8:	23a8      	movs	r3, #168	; 0xa8
 800ceba:	58d4      	ldr	r4, [r2, r3]
 800cebc:	4d28      	ldr	r5, [pc, #160]	; (800cf60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cebe:	402c      	ands	r4, r5
 800cec0:	50d4      	str	r4, [r2, r3]
 800cec2:	58d5      	ldr	r5, [r2, r3]
 800cec4:	24f0      	movs	r4, #240	; 0xf0
 800cec6:	0124      	lsls	r4, r4, #4
 800cec8:	432c      	orrs	r4, r5
 800ceca:	50d4      	str	r4, [r2, r3]
 800cecc:	e570      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800cece:	4a25      	ldr	r2, [pc, #148]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ced0:	23a8      	movs	r3, #168	; 0xa8
 800ced2:	58d5      	ldr	r5, [r2, r3]
 800ced4:	260f      	movs	r6, #15
 800ced6:	43b5      	bics	r5, r6
 800ced8:	50d5      	str	r5, [r2, r3]
 800ceda:	58d4      	ldr	r4, [r2, r3]
 800cedc:	4334      	orrs	r4, r6
 800cede:	50d4      	str	r4, [r2, r3]
 800cee0:	e566      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800cee2:	4a20      	ldr	r2, [pc, #128]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cee4:	23a8      	movs	r3, #168	; 0xa8
 800cee6:	58d4      	ldr	r4, [r2, r3]
 800cee8:	4d1d      	ldr	r5, [pc, #116]	; (800cf60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ceea:	402c      	ands	r4, r5
 800ceec:	50d4      	str	r4, [r2, r3]
 800ceee:	58d5      	ldr	r5, [r2, r3]
 800cef0:	24f0      	movs	r4, #240	; 0xf0
 800cef2:	0124      	lsls	r4, r4, #4
 800cef4:	432c      	orrs	r4, r5
 800cef6:	50d4      	str	r4, [r2, r3]
 800cef8:	e55a      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800cefa:	4a1a      	ldr	r2, [pc, #104]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cefc:	23a8      	movs	r3, #168	; 0xa8
 800cefe:	58d4      	ldr	r4, [r2, r3]
 800cf00:	4d19      	ldr	r5, [pc, #100]	; (800cf68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800cf02:	402c      	ands	r4, r5
 800cf04:	50d4      	str	r4, [r2, r3]
 800cf06:	58d5      	ldr	r5, [r2, r3]
 800cf08:	24f0      	movs	r4, #240	; 0xf0
 800cf0a:	0324      	lsls	r4, r4, #12
 800cf0c:	432c      	orrs	r4, r5
 800cf0e:	50d4      	str	r4, [r2, r3]
 800cf10:	e54e      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800cf12:	4a14      	ldr	r2, [pc, #80]	; (800cf64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cf14:	23a8      	movs	r3, #168	; 0xa8
 800cf16:	58d4      	ldr	r4, [r2, r3]
 800cf18:	4d14      	ldr	r5, [pc, #80]	; (800cf6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800cf1a:	402c      	ands	r4, r5
 800cf1c:	50d4      	str	r4, [r2, r3]
 800cf1e:	58d5      	ldr	r5, [r2, r3]
 800cf20:	24f0      	movs	r4, #240	; 0xf0
 800cf22:	0424      	lsls	r4, r4, #16
 800cf24:	432c      	orrs	r4, r5
 800cf26:	50d4      	str	r4, [r2, r3]
 800cf28:	e542      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800cf2a:	4a0c      	ldr	r2, [pc, #48]	; (800cf5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cf2c:	23a8      	movs	r3, #168	; 0xa8
 800cf2e:	58d5      	ldr	r5, [r2, r3]
 800cf30:	26f0      	movs	r6, #240	; 0xf0
 800cf32:	43b5      	bics	r5, r6
 800cf34:	50d5      	str	r5, [r2, r3]
 800cf36:	58d4      	ldr	r4, [r2, r3]
 800cf38:	4334      	orrs	r4, r6
 800cf3a:	50d4      	str	r4, [r2, r3]
 800cf3c:	e538      	b.n	800c9b0 <RemapAndLinkDMAtoUARTRx+0x90>
 800cf3e:	46c0      	nop			; (mov r8, r8)
 800cf40:	40005000 	.word	0x40005000
 800cf44:	40020008 	.word	0x40020008
 800cf48:	40020030 	.word	0x40020030
 800cf4c:	40020058 	.word	0x40020058
 800cf50:	4002006c 	.word	0x4002006c
 800cf54:	4002041c 	.word	0x4002041c
 800cf58:	40020430 	.word	0x40020430
 800cf5c:	40020400 	.word	0x40020400
 800cf60:	fffff0ff 	.word	0xfffff0ff
 800cf64:	40020000 	.word	0x40020000
 800cf68:	fff0ffff 	.word	0xfff0ffff
 800cf6c:	ff0fffff 	.word	0xff0fffff
 800cf70:	40011400 	.word	0x40011400
 800cf74:	40011800 	.word	0x40011800
 800cf78:	40011c00 	.word	0x40011c00

0800cf7c <DMA_MSG_RX_Setup>:
{	
 800cf7c:	b570      	push	{r4, r5, r6, lr}
 800cf7e:	0004      	movs	r4, r0
 800cf80:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800cf82:	f7ff fccd 	bl	800c920 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cf86:	2100      	movs	r1, #0
 800cf88:	0028      	movs	r0, r5
 800cf8a:	f7ff fc13 	bl	800c7b4 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800cf8e:	0020      	movs	r0, r4
 800cf90:	f7fe ff58 	bl	800be44 <GetPort>
 800cf94:	1e41      	subs	r1, r0, #1
 800cf96:	0189      	lsls	r1, r1, #6
 800cf98:	4803      	ldr	r0, [pc, #12]	; (800cfa8 <DMA_MSG_RX_Setup+0x2c>)
 800cf9a:	1809      	adds	r1, r1, r0
 800cf9c:	2240      	movs	r2, #64	; 0x40
 800cf9e:	0020      	movs	r0, r4
 800cfa0:	f006 fa4a 	bl	8013438 <HAL_UART_Receive_DMA>
}
 800cfa4:	bd70      	pop	{r4, r5, r6, pc}
 800cfa6:	46c0      	nop			; (mov r8, r8)
 800cfa8:	2000151c 	.word	0x2000151c

0800cfac <SetupMessagingRxDMAs>:
{	
 800cfac:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800cfae:	4b1b      	ldr	r3, [pc, #108]	; (800d01c <SetupMessagingRxDMAs+0x70>)
 800cfb0:	785b      	ldrb	r3, [r3, #1]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d014      	beq.n	800cfe0 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800cfb6:	4b19      	ldr	r3, [pc, #100]	; (800d01c <SetupMessagingRxDMAs+0x70>)
 800cfb8:	789b      	ldrb	r3, [r3, #2]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d015      	beq.n	800cfea <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800cfbe:	4b17      	ldr	r3, [pc, #92]	; (800d01c <SetupMessagingRxDMAs+0x70>)
 800cfc0:	78db      	ldrb	r3, [r3, #3]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d016      	beq.n	800cff4 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800cfc6:	4b15      	ldr	r3, [pc, #84]	; (800d01c <SetupMessagingRxDMAs+0x70>)
 800cfc8:	791b      	ldrb	r3, [r3, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d017      	beq.n	800cffe <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800cfce:	4b13      	ldr	r3, [pc, #76]	; (800d01c <SetupMessagingRxDMAs+0x70>)
 800cfd0:	795b      	ldrb	r3, [r3, #5]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d018      	beq.n	800d008 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800cfd6:	4b11      	ldr	r3, [pc, #68]	; (800d01c <SetupMessagingRxDMAs+0x70>)
 800cfd8:	799b      	ldrb	r3, [r3, #6]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d019      	beq.n	800d012 <SetupMessagingRxDMAs+0x66>
}
 800cfde:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800cfe0:	490f      	ldr	r1, [pc, #60]	; (800d020 <SetupMessagingRxDMAs+0x74>)
 800cfe2:	4810      	ldr	r0, [pc, #64]	; (800d024 <SetupMessagingRxDMAs+0x78>)
 800cfe4:	f7ff ffca 	bl	800cf7c <DMA_MSG_RX_Setup>
 800cfe8:	e7e5      	b.n	800cfb6 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800cfea:	490f      	ldr	r1, [pc, #60]	; (800d028 <SetupMessagingRxDMAs+0x7c>)
 800cfec:	480f      	ldr	r0, [pc, #60]	; (800d02c <SetupMessagingRxDMAs+0x80>)
 800cfee:	f7ff ffc5 	bl	800cf7c <DMA_MSG_RX_Setup>
 800cff2:	e7e4      	b.n	800cfbe <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800cff4:	490e      	ldr	r1, [pc, #56]	; (800d030 <SetupMessagingRxDMAs+0x84>)
 800cff6:	480f      	ldr	r0, [pc, #60]	; (800d034 <SetupMessagingRxDMAs+0x88>)
 800cff8:	f7ff ffc0 	bl	800cf7c <DMA_MSG_RX_Setup>
 800cffc:	e7e3      	b.n	800cfc6 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800cffe:	490e      	ldr	r1, [pc, #56]	; (800d038 <SetupMessagingRxDMAs+0x8c>)
 800d000:	480e      	ldr	r0, [pc, #56]	; (800d03c <SetupMessagingRxDMAs+0x90>)
 800d002:	f7ff ffbb 	bl	800cf7c <DMA_MSG_RX_Setup>
 800d006:	e7e2      	b.n	800cfce <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800d008:	490d      	ldr	r1, [pc, #52]	; (800d040 <SetupMessagingRxDMAs+0x94>)
 800d00a:	480e      	ldr	r0, [pc, #56]	; (800d044 <SetupMessagingRxDMAs+0x98>)
 800d00c:	f7ff ffb6 	bl	800cf7c <DMA_MSG_RX_Setup>
 800d010:	e7e1      	b.n	800cfd6 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800d012:	490d      	ldr	r1, [pc, #52]	; (800d048 <SetupMessagingRxDMAs+0x9c>)
 800d014:	480d      	ldr	r0, [pc, #52]	; (800d04c <SetupMessagingRxDMAs+0xa0>)
 800d016:	f7ff ffb1 	bl	800cf7c <DMA_MSG_RX_Setup>
}
 800d01a:	e7e0      	b.n	800cfde <SetupMessagingRxDMAs+0x32>
 800d01c:	20001348 	.word	0x20001348
 800d020:	200017b0 	.word	0x200017b0
 800d024:	20006ce8 	.word	0x20006ce8
 800d028:	200017e8 	.word	0x200017e8
 800d02c:	20006d58 	.word	0x20006d58
 800d030:	20001820 	.word	0x20001820
 800d034:	20006c78 	.word	0x20006c78
 800d038:	20001858 	.word	0x20001858
 800d03c:	20006b28 	.word	0x20006b28
 800d040:	20001890 	.word	0x20001890
 800d044:	20006c08 	.word	0x20006c08
 800d048:	200018c8 	.word	0x200018c8
 800d04c:	20006b98 	.word	0x20006b98

0800d050 <DMA_STREAM_Setup>:
{	
 800d050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d052:	0005      	movs	r5, r0
 800d054:	000f      	movs	r7, r1
 800d056:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800d058:	f7fe fef4 	bl	800be44 <GetPort>
	hDMA = &streamDMA[port-1];
 800d05c:	3801      	subs	r0, #1
 800d05e:	00c4      	lsls	r4, r0, #3
 800d060:	1a24      	subs	r4, r4, r0
 800d062:	00e4      	lsls	r4, r4, #3
 800d064:	4809      	ldr	r0, [pc, #36]	; (800d08c <DMA_STREAM_Setup+0x3c>)
 800d066:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800d068:	0021      	movs	r1, r4
 800d06a:	0028      	movs	r0, r5
 800d06c:	f7ff fc58 	bl	800c920 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800d070:	2101      	movs	r1, #1
 800d072:	0020      	movs	r0, r4
 800d074:	f7ff fb9e 	bl	800c7b4 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800d078:	2369      	movs	r3, #105	; 0x69
 800d07a:	2201      	movs	r2, #1
 800d07c:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	3128      	adds	r1, #40	; 0x28
 800d082:	0032      	movs	r2, r6
 800d084:	0028      	movs	r0, r5
 800d086:	f006 f9d7 	bl	8013438 <HAL_UART_Receive_DMA>
}
 800d08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d08c:	200019a8 	.word	0x200019a8

0800d090 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800d090:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d092:	6803      	ldr	r3, [r0, #0]
 800d094:	4abd      	ldr	r2, [pc, #756]	; (800d38c <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d02f      	beq.n	800d0fa <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d09a:	4abd      	ldr	r2, [pc, #756]	; (800d390 <RemapAndLinkDMAtoUARTTx+0x300>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d100      	bne.n	800d0a2 <RemapAndLinkDMAtoUARTTx+0x12>
 800d0a0:	e087      	b.n	800d1b2 <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d0a2:	4abc      	ldr	r2, [pc, #752]	; (800d394 <RemapAndLinkDMAtoUARTTx+0x304>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d100      	bne.n	800d0aa <RemapAndLinkDMAtoUARTTx+0x1a>
 800d0a8:	e0dc      	b.n	800d264 <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d0aa:	4abb      	ldr	r2, [pc, #748]	; (800d398 <RemapAndLinkDMAtoUARTTx+0x308>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d000      	beq.n	800d0b2 <RemapAndLinkDMAtoUARTTx+0x22>
 800d0b0:	e18a      	b.n	800d3c8 <RemapAndLinkDMAtoUARTTx+0x338>
 800d0b2:	680b      	ldr	r3, [r1, #0]
 800d0b4:	4ab9      	ldr	r2, [pc, #740]	; (800d39c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d100      	bne.n	800d0bc <RemapAndLinkDMAtoUARTTx+0x2c>
 800d0ba:	e12d      	b.n	800d318 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d0bc:	4ab8      	ldr	r2, [pc, #736]	; (800d3a0 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d100      	bne.n	800d0c4 <RemapAndLinkDMAtoUARTTx+0x34>
 800d0c2:	e134      	b.n	800d32e <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d0c4:	4ab7      	ldr	r2, [pc, #732]	; (800d3a4 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d100      	bne.n	800d0cc <RemapAndLinkDMAtoUARTTx+0x3c>
 800d0ca:	e13c      	b.n	800d346 <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d0cc:	4ab6      	ldr	r2, [pc, #728]	; (800d3a8 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d100      	bne.n	800d0d4 <RemapAndLinkDMAtoUARTTx+0x44>
 800d0d2:	e144      	b.n	800d35e <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d0d4:	4ab5      	ldr	r2, [pc, #724]	; (800d3ac <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d100      	bne.n	800d0dc <RemapAndLinkDMAtoUARTTx+0x4c>
 800d0da:	e14b      	b.n	800d374 <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d0dc:	4ab4      	ldr	r2, [pc, #720]	; (800d3b0 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d11e      	bne.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800d0e2:	4ab4      	ldr	r2, [pc, #720]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d0e4:	23a8      	movs	r3, #168	; 0xa8
 800d0e6:	58d4      	ldr	r4, [r2, r3]
 800d0e8:	4db3      	ldr	r5, [pc, #716]	; (800d3b8 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d0ea:	402c      	ands	r4, r5
 800d0ec:	50d4      	str	r4, [r2, r3]
 800d0ee:	58d5      	ldr	r5, [r2, r3]
 800d0f0:	24b0      	movs	r4, #176	; 0xb0
 800d0f2:	0324      	lsls	r4, r4, #12
 800d0f4:	432c      	orrs	r4, r5
 800d0f6:	50d4      	str	r4, [r2, r3]
 800d0f8:	e012      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d0fa:	680b      	ldr	r3, [r1, #0]
 800d0fc:	4aa7      	ldr	r2, [pc, #668]	; (800d39c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d011      	beq.n	800d126 <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800d102:	4aa7      	ldr	r2, [pc, #668]	; (800d3a0 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d019      	beq.n	800d13c <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800d108:	4aa6      	ldr	r2, [pc, #664]	; (800d3a4 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d022      	beq.n	800d154 <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800d10e:	4aa6      	ldr	r2, [pc, #664]	; (800d3a8 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d02b      	beq.n	800d16c <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800d114:	4aa5      	ldr	r2, [pc, #660]	; (800d3ac <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d033      	beq.n	800d182 <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800d11a:	4aa5      	ldr	r2, [pc, #660]	; (800d3b0 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d03c      	beq.n	800d19a <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800d120:	6601      	str	r1, [r0, #96]	; 0x60
 800d122:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d124:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800d126:	4aa5      	ldr	r2, [pc, #660]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d128:	23a8      	movs	r3, #168	; 0xa8
 800d12a:	58d4      	ldr	r4, [r2, r3]
 800d12c:	25f0      	movs	r5, #240	; 0xf0
 800d12e:	43ac      	bics	r4, r5
 800d130:	50d4      	str	r4, [r2, r3]
 800d132:	58d4      	ldr	r4, [r2, r3]
 800d134:	3d70      	subs	r5, #112	; 0x70
 800d136:	432c      	orrs	r4, r5
 800d138:	50d4      	str	r4, [r2, r3]
 800d13a:	e7f1      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800d13c:	4a9f      	ldr	r2, [pc, #636]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d13e:	23a8      	movs	r3, #168	; 0xa8
 800d140:	58d4      	ldr	r4, [r2, r3]
 800d142:	4d9f      	ldr	r5, [pc, #636]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d144:	402c      	ands	r4, r5
 800d146:	50d4      	str	r4, [r2, r3]
 800d148:	58d5      	ldr	r5, [r2, r3]
 800d14a:	2480      	movs	r4, #128	; 0x80
 800d14c:	0224      	lsls	r4, r4, #8
 800d14e:	432c      	orrs	r4, r5
 800d150:	50d4      	str	r4, [r2, r3]
 800d152:	e7e5      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800d154:	4a99      	ldr	r2, [pc, #612]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d156:	23a8      	movs	r3, #168	; 0xa8
 800d158:	58d4      	ldr	r4, [r2, r3]
 800d15a:	4d9a      	ldr	r5, [pc, #616]	; (800d3c4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d15c:	402c      	ands	r4, r5
 800d15e:	50d4      	str	r4, [r2, r3]
 800d160:	58d5      	ldr	r5, [r2, r3]
 800d162:	2480      	movs	r4, #128	; 0x80
 800d164:	0524      	lsls	r4, r4, #20
 800d166:	432c      	orrs	r4, r5
 800d168:	50d4      	str	r4, [r2, r3]
 800d16a:	e7d9      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800d16c:	4a91      	ldr	r2, [pc, #580]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d16e:	23a8      	movs	r3, #168	; 0xa8
 800d170:	58d4      	ldr	r4, [r2, r3]
 800d172:	250f      	movs	r5, #15
 800d174:	43ac      	bics	r4, r5
 800d176:	50d4      	str	r4, [r2, r3]
 800d178:	58d4      	ldr	r4, [r2, r3]
 800d17a:	3d07      	subs	r5, #7
 800d17c:	432c      	orrs	r4, r5
 800d17e:	50d4      	str	r4, [r2, r3]
 800d180:	e7ce      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800d182:	4a8c      	ldr	r2, [pc, #560]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d184:	23a8      	movs	r3, #168	; 0xa8
 800d186:	58d4      	ldr	r4, [r2, r3]
 800d188:	4d8d      	ldr	r5, [pc, #564]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d18a:	402c      	ands	r4, r5
 800d18c:	50d4      	str	r4, [r2, r3]
 800d18e:	58d5      	ldr	r5, [r2, r3]
 800d190:	2480      	movs	r4, #128	; 0x80
 800d192:	0224      	lsls	r4, r4, #8
 800d194:	432c      	orrs	r4, r5
 800d196:	50d4      	str	r4, [r2, r3]
 800d198:	e7c2      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800d19a:	4a86      	ldr	r2, [pc, #536]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d19c:	23a8      	movs	r3, #168	; 0xa8
 800d19e:	58d4      	ldr	r4, [r2, r3]
 800d1a0:	4d85      	ldr	r5, [pc, #532]	; (800d3b8 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d1a2:	402c      	ands	r4, r5
 800d1a4:	50d4      	str	r4, [r2, r3]
 800d1a6:	58d5      	ldr	r5, [r2, r3]
 800d1a8:	2480      	movs	r4, #128	; 0x80
 800d1aa:	0324      	lsls	r4, r4, #12
 800d1ac:	432c      	orrs	r4, r5
 800d1ae:	50d4      	str	r4, [r2, r3]
 800d1b0:	e7b6      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d1b2:	680b      	ldr	r3, [r1, #0]
 800d1b4:	4a79      	ldr	r2, [pc, #484]	; (800d39c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d01a      	beq.n	800d1f0 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800d1ba:	4a79      	ldr	r2, [pc, #484]	; (800d3a0 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d022      	beq.n	800d206 <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800d1c0:	4a78      	ldr	r2, [pc, #480]	; (800d3a4 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d02b      	beq.n	800d21e <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800d1c6:	4a78      	ldr	r2, [pc, #480]	; (800d3a8 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d034      	beq.n	800d236 <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800d1cc:	4a77      	ldr	r2, [pc, #476]	; (800d3ac <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d03c      	beq.n	800d24c <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800d1d2:	4a77      	ldr	r2, [pc, #476]	; (800d3b0 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d1a3      	bne.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800d1d8:	4a76      	ldr	r2, [pc, #472]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d1da:	23a8      	movs	r3, #168	; 0xa8
 800d1dc:	58d4      	ldr	r4, [r2, r3]
 800d1de:	4d76      	ldr	r5, [pc, #472]	; (800d3b8 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d1e0:	402c      	ands	r4, r5
 800d1e2:	50d4      	str	r4, [r2, r3]
 800d1e4:	58d5      	ldr	r5, [r2, r3]
 800d1e6:	2490      	movs	r4, #144	; 0x90
 800d1e8:	0324      	lsls	r4, r4, #12
 800d1ea:	432c      	orrs	r4, r5
 800d1ec:	50d4      	str	r4, [r2, r3]
 800d1ee:	e797      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800d1f0:	4a72      	ldr	r2, [pc, #456]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d1f2:	23a8      	movs	r3, #168	; 0xa8
 800d1f4:	58d4      	ldr	r4, [r2, r3]
 800d1f6:	25f0      	movs	r5, #240	; 0xf0
 800d1f8:	43ac      	bics	r4, r5
 800d1fa:	50d4      	str	r4, [r2, r3]
 800d1fc:	58d4      	ldr	r4, [r2, r3]
 800d1fe:	3d60      	subs	r5, #96	; 0x60
 800d200:	432c      	orrs	r4, r5
 800d202:	50d4      	str	r4, [r2, r3]
 800d204:	e78c      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800d206:	4a6d      	ldr	r2, [pc, #436]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d208:	23a8      	movs	r3, #168	; 0xa8
 800d20a:	58d4      	ldr	r4, [r2, r3]
 800d20c:	4d6c      	ldr	r5, [pc, #432]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d20e:	402c      	ands	r4, r5
 800d210:	50d4      	str	r4, [r2, r3]
 800d212:	58d5      	ldr	r5, [r2, r3]
 800d214:	2490      	movs	r4, #144	; 0x90
 800d216:	0224      	lsls	r4, r4, #8
 800d218:	432c      	orrs	r4, r5
 800d21a:	50d4      	str	r4, [r2, r3]
 800d21c:	e780      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800d21e:	4a67      	ldr	r2, [pc, #412]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d220:	23a8      	movs	r3, #168	; 0xa8
 800d222:	58d4      	ldr	r4, [r2, r3]
 800d224:	4d67      	ldr	r5, [pc, #412]	; (800d3c4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d226:	402c      	ands	r4, r5
 800d228:	50d4      	str	r4, [r2, r3]
 800d22a:	58d5      	ldr	r5, [r2, r3]
 800d22c:	2490      	movs	r4, #144	; 0x90
 800d22e:	0524      	lsls	r4, r4, #20
 800d230:	432c      	orrs	r4, r5
 800d232:	50d4      	str	r4, [r2, r3]
 800d234:	e774      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800d236:	4a5f      	ldr	r2, [pc, #380]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d238:	23a8      	movs	r3, #168	; 0xa8
 800d23a:	58d4      	ldr	r4, [r2, r3]
 800d23c:	250f      	movs	r5, #15
 800d23e:	43ac      	bics	r4, r5
 800d240:	50d4      	str	r4, [r2, r3]
 800d242:	58d4      	ldr	r4, [r2, r3]
 800d244:	3d06      	subs	r5, #6
 800d246:	432c      	orrs	r4, r5
 800d248:	50d4      	str	r4, [r2, r3]
 800d24a:	e769      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d24c:	4a59      	ldr	r2, [pc, #356]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d24e:	23a8      	movs	r3, #168	; 0xa8
 800d250:	58d4      	ldr	r4, [r2, r3]
 800d252:	4d5b      	ldr	r5, [pc, #364]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d254:	402c      	ands	r4, r5
 800d256:	50d4      	str	r4, [r2, r3]
 800d258:	58d5      	ldr	r5, [r2, r3]
 800d25a:	2490      	movs	r4, #144	; 0x90
 800d25c:	0224      	lsls	r4, r4, #8
 800d25e:	432c      	orrs	r4, r5
 800d260:	50d4      	str	r4, [r2, r3]
 800d262:	e75d      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d264:	680b      	ldr	r3, [r1, #0]
 800d266:	4a4d      	ldr	r2, [pc, #308]	; (800d39c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d01b      	beq.n	800d2a4 <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d26c:	4a4c      	ldr	r2, [pc, #304]	; (800d3a0 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d023      	beq.n	800d2ba <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d272:	4a4c      	ldr	r2, [pc, #304]	; (800d3a4 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d02c      	beq.n	800d2d2 <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d278:	4a4b      	ldr	r2, [pc, #300]	; (800d3a8 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d035      	beq.n	800d2ea <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d27e:	4a4b      	ldr	r2, [pc, #300]	; (800d3ac <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d03d      	beq.n	800d300 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d284:	4a4a      	ldr	r2, [pc, #296]	; (800d3b0 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d000      	beq.n	800d28c <RemapAndLinkDMAtoUARTTx+0x1fc>
 800d28a:	e749      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800d28c:	4a49      	ldr	r2, [pc, #292]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d28e:	23a8      	movs	r3, #168	; 0xa8
 800d290:	58d4      	ldr	r4, [r2, r3]
 800d292:	4d49      	ldr	r5, [pc, #292]	; (800d3b8 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d294:	402c      	ands	r4, r5
 800d296:	50d4      	str	r4, [r2, r3]
 800d298:	58d5      	ldr	r5, [r2, r3]
 800d29a:	24a0      	movs	r4, #160	; 0xa0
 800d29c:	0324      	lsls	r4, r4, #12
 800d29e:	432c      	orrs	r4, r5
 800d2a0:	50d4      	str	r4, [r2, r3]
 800d2a2:	e73d      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d2a4:	4a45      	ldr	r2, [pc, #276]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d2a6:	23a8      	movs	r3, #168	; 0xa8
 800d2a8:	58d4      	ldr	r4, [r2, r3]
 800d2aa:	25f0      	movs	r5, #240	; 0xf0
 800d2ac:	43ac      	bics	r4, r5
 800d2ae:	50d4      	str	r4, [r2, r3]
 800d2b0:	58d4      	ldr	r4, [r2, r3]
 800d2b2:	3d50      	subs	r5, #80	; 0x50
 800d2b4:	432c      	orrs	r4, r5
 800d2b6:	50d4      	str	r4, [r2, r3]
 800d2b8:	e732      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d2ba:	4a40      	ldr	r2, [pc, #256]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d2bc:	23a8      	movs	r3, #168	; 0xa8
 800d2be:	58d4      	ldr	r4, [r2, r3]
 800d2c0:	4d3f      	ldr	r5, [pc, #252]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d2c2:	402c      	ands	r4, r5
 800d2c4:	50d4      	str	r4, [r2, r3]
 800d2c6:	58d5      	ldr	r5, [r2, r3]
 800d2c8:	24a0      	movs	r4, #160	; 0xa0
 800d2ca:	0224      	lsls	r4, r4, #8
 800d2cc:	432c      	orrs	r4, r5
 800d2ce:	50d4      	str	r4, [r2, r3]
 800d2d0:	e726      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d2d2:	4a3a      	ldr	r2, [pc, #232]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d2d4:	23a8      	movs	r3, #168	; 0xa8
 800d2d6:	58d4      	ldr	r4, [r2, r3]
 800d2d8:	4d3a      	ldr	r5, [pc, #232]	; (800d3c4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d2da:	402c      	ands	r4, r5
 800d2dc:	50d4      	str	r4, [r2, r3]
 800d2de:	58d5      	ldr	r5, [r2, r3]
 800d2e0:	24a0      	movs	r4, #160	; 0xa0
 800d2e2:	0524      	lsls	r4, r4, #20
 800d2e4:	432c      	orrs	r4, r5
 800d2e6:	50d4      	str	r4, [r2, r3]
 800d2e8:	e71a      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d2ea:	4a32      	ldr	r2, [pc, #200]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d2ec:	23a8      	movs	r3, #168	; 0xa8
 800d2ee:	58d4      	ldr	r4, [r2, r3]
 800d2f0:	250f      	movs	r5, #15
 800d2f2:	43ac      	bics	r4, r5
 800d2f4:	50d4      	str	r4, [r2, r3]
 800d2f6:	58d4      	ldr	r4, [r2, r3]
 800d2f8:	3d05      	subs	r5, #5
 800d2fa:	432c      	orrs	r4, r5
 800d2fc:	50d4      	str	r4, [r2, r3]
 800d2fe:	e70f      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d300:	4a2c      	ldr	r2, [pc, #176]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d302:	23a8      	movs	r3, #168	; 0xa8
 800d304:	58d4      	ldr	r4, [r2, r3]
 800d306:	4d2e      	ldr	r5, [pc, #184]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d308:	402c      	ands	r4, r5
 800d30a:	50d4      	str	r4, [r2, r3]
 800d30c:	58d5      	ldr	r5, [r2, r3]
 800d30e:	24a0      	movs	r4, #160	; 0xa0
 800d310:	0224      	lsls	r4, r4, #8
 800d312:	432c      	orrs	r4, r5
 800d314:	50d4      	str	r4, [r2, r3]
 800d316:	e703      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d318:	4a28      	ldr	r2, [pc, #160]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d31a:	23a8      	movs	r3, #168	; 0xa8
 800d31c:	58d4      	ldr	r4, [r2, r3]
 800d31e:	25f0      	movs	r5, #240	; 0xf0
 800d320:	43ac      	bics	r4, r5
 800d322:	50d4      	str	r4, [r2, r3]
 800d324:	58d4      	ldr	r4, [r2, r3]
 800d326:	3d40      	subs	r5, #64	; 0x40
 800d328:	432c      	orrs	r4, r5
 800d32a:	50d4      	str	r4, [r2, r3]
 800d32c:	e6f8      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d32e:	4a23      	ldr	r2, [pc, #140]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d330:	23a8      	movs	r3, #168	; 0xa8
 800d332:	58d4      	ldr	r4, [r2, r3]
 800d334:	4d22      	ldr	r5, [pc, #136]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d336:	402c      	ands	r4, r5
 800d338:	50d4      	str	r4, [r2, r3]
 800d33a:	58d5      	ldr	r5, [r2, r3]
 800d33c:	24b0      	movs	r4, #176	; 0xb0
 800d33e:	0224      	lsls	r4, r4, #8
 800d340:	432c      	orrs	r4, r5
 800d342:	50d4      	str	r4, [r2, r3]
 800d344:	e6ec      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d346:	4a1d      	ldr	r2, [pc, #116]	; (800d3bc <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d348:	23a8      	movs	r3, #168	; 0xa8
 800d34a:	58d4      	ldr	r4, [r2, r3]
 800d34c:	4d1d      	ldr	r5, [pc, #116]	; (800d3c4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d34e:	402c      	ands	r4, r5
 800d350:	50d4      	str	r4, [r2, r3]
 800d352:	58d5      	ldr	r5, [r2, r3]
 800d354:	24b0      	movs	r4, #176	; 0xb0
 800d356:	0524      	lsls	r4, r4, #20
 800d358:	432c      	orrs	r4, r5
 800d35a:	50d4      	str	r4, [r2, r3]
 800d35c:	e6e0      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d35e:	4a15      	ldr	r2, [pc, #84]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d360:	23a8      	movs	r3, #168	; 0xa8
 800d362:	58d4      	ldr	r4, [r2, r3]
 800d364:	250f      	movs	r5, #15
 800d366:	43ac      	bics	r4, r5
 800d368:	50d4      	str	r4, [r2, r3]
 800d36a:	58d4      	ldr	r4, [r2, r3]
 800d36c:	3d04      	subs	r5, #4
 800d36e:	432c      	orrs	r4, r5
 800d370:	50d4      	str	r4, [r2, r3]
 800d372:	e6d5      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d374:	4a0f      	ldr	r2, [pc, #60]	; (800d3b4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d376:	23a8      	movs	r3, #168	; 0xa8
 800d378:	58d4      	ldr	r4, [r2, r3]
 800d37a:	4d11      	ldr	r5, [pc, #68]	; (800d3c0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d37c:	402c      	ands	r4, r5
 800d37e:	50d4      	str	r4, [r2, r3]
 800d380:	58d5      	ldr	r5, [r2, r3]
 800d382:	24b0      	movs	r4, #176	; 0xb0
 800d384:	0224      	lsls	r4, r4, #8
 800d386:	432c      	orrs	r4, r5
 800d388:	50d4      	str	r4, [r2, r3]
 800d38a:	e6c9      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
 800d38c:	40013800 	.word	0x40013800
 800d390:	40004400 	.word	0x40004400
 800d394:	40004800 	.word	0x40004800
 800d398:	40004c00 	.word	0x40004c00
 800d39c:	4002001c 	.word	0x4002001c
 800d3a0:	40020044 	.word	0x40020044
 800d3a4:	40020080 	.word	0x40020080
 800d3a8:	40020408 	.word	0x40020408
 800d3ac:	40020444 	.word	0x40020444
 800d3b0:	40020458 	.word	0x40020458
 800d3b4:	40020400 	.word	0x40020400
 800d3b8:	fff0ffff 	.word	0xfff0ffff
 800d3bc:	40020000 	.word	0x40020000
 800d3c0:	ffff0fff 	.word	0xffff0fff
 800d3c4:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d3c8:	4ab9      	ldr	r2, [pc, #740]	; (800d6b0 <RemapAndLinkDMAtoUARTTx+0x620>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d159      	bne.n	800d482 <RemapAndLinkDMAtoUARTTx+0x3f2>
 800d3ce:	680b      	ldr	r3, [r1, #0]
 800d3d0:	4ab8      	ldr	r2, [pc, #736]	; (800d6b4 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d01b      	beq.n	800d40e <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d3d6:	4ab8      	ldr	r2, [pc, #736]	; (800d6b8 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d023      	beq.n	800d424 <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d3dc:	4ab7      	ldr	r2, [pc, #732]	; (800d6bc <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d02c      	beq.n	800d43c <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d3e2:	4ab7      	ldr	r2, [pc, #732]	; (800d6c0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d035      	beq.n	800d454 <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d3e8:	4ab6      	ldr	r2, [pc, #728]	; (800d6c4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d03d      	beq.n	800d46a <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d3ee:	4ab6      	ldr	r2, [pc, #728]	; (800d6c8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d000      	beq.n	800d3f6 <RemapAndLinkDMAtoUARTTx+0x366>
 800d3f4:	e694      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d3f6:	4ab5      	ldr	r2, [pc, #724]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d3f8:	23a8      	movs	r3, #168	; 0xa8
 800d3fa:	58d4      	ldr	r4, [r2, r3]
 800d3fc:	4db4      	ldr	r5, [pc, #720]	; (800d6d0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d3fe:	402c      	ands	r4, r5
 800d400:	50d4      	str	r4, [r2, r3]
 800d402:	58d5      	ldr	r5, [r2, r3]
 800d404:	24c0      	movs	r4, #192	; 0xc0
 800d406:	0324      	lsls	r4, r4, #12
 800d408:	432c      	orrs	r4, r5
 800d40a:	50d4      	str	r4, [r2, r3]
 800d40c:	e688      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d40e:	4ab1      	ldr	r2, [pc, #708]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d410:	23a8      	movs	r3, #168	; 0xa8
 800d412:	58d4      	ldr	r4, [r2, r3]
 800d414:	25f0      	movs	r5, #240	; 0xf0
 800d416:	43ac      	bics	r4, r5
 800d418:	50d4      	str	r4, [r2, r3]
 800d41a:	58d4      	ldr	r4, [r2, r3]
 800d41c:	3d30      	subs	r5, #48	; 0x30
 800d41e:	432c      	orrs	r4, r5
 800d420:	50d4      	str	r4, [r2, r3]
 800d422:	e67d      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d424:	4aab      	ldr	r2, [pc, #684]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d426:	23a8      	movs	r3, #168	; 0xa8
 800d428:	58d4      	ldr	r4, [r2, r3]
 800d42a:	4dab      	ldr	r5, [pc, #684]	; (800d6d8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d42c:	402c      	ands	r4, r5
 800d42e:	50d4      	str	r4, [r2, r3]
 800d430:	58d5      	ldr	r5, [r2, r3]
 800d432:	24c0      	movs	r4, #192	; 0xc0
 800d434:	0224      	lsls	r4, r4, #8
 800d436:	432c      	orrs	r4, r5
 800d438:	50d4      	str	r4, [r2, r3]
 800d43a:	e671      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d43c:	4aa5      	ldr	r2, [pc, #660]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d43e:	23a8      	movs	r3, #168	; 0xa8
 800d440:	58d4      	ldr	r4, [r2, r3]
 800d442:	4da6      	ldr	r5, [pc, #664]	; (800d6dc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d444:	402c      	ands	r4, r5
 800d446:	50d4      	str	r4, [r2, r3]
 800d448:	58d5      	ldr	r5, [r2, r3]
 800d44a:	24c0      	movs	r4, #192	; 0xc0
 800d44c:	0524      	lsls	r4, r4, #20
 800d44e:	432c      	orrs	r4, r5
 800d450:	50d4      	str	r4, [r2, r3]
 800d452:	e665      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d454:	4a9d      	ldr	r2, [pc, #628]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d456:	23a8      	movs	r3, #168	; 0xa8
 800d458:	58d4      	ldr	r4, [r2, r3]
 800d45a:	250f      	movs	r5, #15
 800d45c:	43ac      	bics	r4, r5
 800d45e:	50d4      	str	r4, [r2, r3]
 800d460:	58d4      	ldr	r4, [r2, r3]
 800d462:	3d03      	subs	r5, #3
 800d464:	432c      	orrs	r4, r5
 800d466:	50d4      	str	r4, [r2, r3]
 800d468:	e65a      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d46a:	4a98      	ldr	r2, [pc, #608]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d46c:	23a8      	movs	r3, #168	; 0xa8
 800d46e:	58d4      	ldr	r4, [r2, r3]
 800d470:	4d99      	ldr	r5, [pc, #612]	; (800d6d8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d472:	402c      	ands	r4, r5
 800d474:	50d4      	str	r4, [r2, r3]
 800d476:	58d5      	ldr	r5, [r2, r3]
 800d478:	24c0      	movs	r4, #192	; 0xc0
 800d47a:	0224      	lsls	r4, r4, #8
 800d47c:	432c      	orrs	r4, r5
 800d47e:	50d4      	str	r4, [r2, r3]
 800d480:	e64e      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d482:	4a97      	ldr	r2, [pc, #604]	; (800d6e0 <RemapAndLinkDMAtoUARTTx+0x650>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d159      	bne.n	800d53c <RemapAndLinkDMAtoUARTTx+0x4ac>
 800d488:	680b      	ldr	r3, [r1, #0]
 800d48a:	4a8a      	ldr	r2, [pc, #552]	; (800d6b4 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d01b      	beq.n	800d4c8 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d490:	4a89      	ldr	r2, [pc, #548]	; (800d6b8 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d023      	beq.n	800d4de <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d496:	4a89      	ldr	r2, [pc, #548]	; (800d6bc <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d02c      	beq.n	800d4f6 <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d49c:	4a88      	ldr	r2, [pc, #544]	; (800d6c0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d035      	beq.n	800d50e <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d4a2:	4a88      	ldr	r2, [pc, #544]	; (800d6c4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d03d      	beq.n	800d524 <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d4a8:	4a87      	ldr	r2, [pc, #540]	; (800d6c8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d000      	beq.n	800d4b0 <RemapAndLinkDMAtoUARTTx+0x420>
 800d4ae:	e637      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d4b0:	4a86      	ldr	r2, [pc, #536]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d4b2:	23a8      	movs	r3, #168	; 0xa8
 800d4b4:	58d4      	ldr	r4, [r2, r3]
 800d4b6:	4d86      	ldr	r5, [pc, #536]	; (800d6d0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d4b8:	402c      	ands	r4, r5
 800d4ba:	50d4      	str	r4, [r2, r3]
 800d4bc:	58d5      	ldr	r5, [r2, r3]
 800d4be:	24d0      	movs	r4, #208	; 0xd0
 800d4c0:	0324      	lsls	r4, r4, #12
 800d4c2:	432c      	orrs	r4, r5
 800d4c4:	50d4      	str	r4, [r2, r3]
 800d4c6:	e62b      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d4c8:	4a82      	ldr	r2, [pc, #520]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d4ca:	23a8      	movs	r3, #168	; 0xa8
 800d4cc:	58d4      	ldr	r4, [r2, r3]
 800d4ce:	25f0      	movs	r5, #240	; 0xf0
 800d4d0:	43ac      	bics	r4, r5
 800d4d2:	50d4      	str	r4, [r2, r3]
 800d4d4:	58d4      	ldr	r4, [r2, r3]
 800d4d6:	3d20      	subs	r5, #32
 800d4d8:	432c      	orrs	r4, r5
 800d4da:	50d4      	str	r4, [r2, r3]
 800d4dc:	e620      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d4de:	4a7d      	ldr	r2, [pc, #500]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d4e0:	23a8      	movs	r3, #168	; 0xa8
 800d4e2:	58d4      	ldr	r4, [r2, r3]
 800d4e4:	4d7c      	ldr	r5, [pc, #496]	; (800d6d8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d4e6:	402c      	ands	r4, r5
 800d4e8:	50d4      	str	r4, [r2, r3]
 800d4ea:	58d5      	ldr	r5, [r2, r3]
 800d4ec:	24d0      	movs	r4, #208	; 0xd0
 800d4ee:	0224      	lsls	r4, r4, #8
 800d4f0:	432c      	orrs	r4, r5
 800d4f2:	50d4      	str	r4, [r2, r3]
 800d4f4:	e614      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d4f6:	4a77      	ldr	r2, [pc, #476]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d4f8:	23a8      	movs	r3, #168	; 0xa8
 800d4fa:	58d4      	ldr	r4, [r2, r3]
 800d4fc:	4d77      	ldr	r5, [pc, #476]	; (800d6dc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d4fe:	402c      	ands	r4, r5
 800d500:	50d4      	str	r4, [r2, r3]
 800d502:	58d5      	ldr	r5, [r2, r3]
 800d504:	24d0      	movs	r4, #208	; 0xd0
 800d506:	0524      	lsls	r4, r4, #20
 800d508:	432c      	orrs	r4, r5
 800d50a:	50d4      	str	r4, [r2, r3]
 800d50c:	e608      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d50e:	4a6f      	ldr	r2, [pc, #444]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d510:	23a8      	movs	r3, #168	; 0xa8
 800d512:	58d4      	ldr	r4, [r2, r3]
 800d514:	250f      	movs	r5, #15
 800d516:	43ac      	bics	r4, r5
 800d518:	50d4      	str	r4, [r2, r3]
 800d51a:	58d4      	ldr	r4, [r2, r3]
 800d51c:	3d02      	subs	r5, #2
 800d51e:	432c      	orrs	r4, r5
 800d520:	50d4      	str	r4, [r2, r3]
 800d522:	e5fd      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d524:	4a69      	ldr	r2, [pc, #420]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d526:	23a8      	movs	r3, #168	; 0xa8
 800d528:	58d4      	ldr	r4, [r2, r3]
 800d52a:	4d6b      	ldr	r5, [pc, #428]	; (800d6d8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d52c:	402c      	ands	r4, r5
 800d52e:	50d4      	str	r4, [r2, r3]
 800d530:	58d5      	ldr	r5, [r2, r3]
 800d532:	24d0      	movs	r4, #208	; 0xd0
 800d534:	0224      	lsls	r4, r4, #8
 800d536:	432c      	orrs	r4, r5
 800d538:	50d4      	str	r4, [r2, r3]
 800d53a:	e5f1      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d53c:	4a69      	ldr	r2, [pc, #420]	; (800d6e4 <RemapAndLinkDMAtoUARTTx+0x654>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d159      	bne.n	800d5f6 <RemapAndLinkDMAtoUARTTx+0x566>
 800d542:	680b      	ldr	r3, [r1, #0]
 800d544:	4a5b      	ldr	r2, [pc, #364]	; (800d6b4 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d01b      	beq.n	800d582 <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d54a:	4a5b      	ldr	r2, [pc, #364]	; (800d6b8 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d023      	beq.n	800d598 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d550:	4a5a      	ldr	r2, [pc, #360]	; (800d6bc <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d02c      	beq.n	800d5b0 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d556:	4a5a      	ldr	r2, [pc, #360]	; (800d6c0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d035      	beq.n	800d5c8 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d55c:	4a59      	ldr	r2, [pc, #356]	; (800d6c4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d03d      	beq.n	800d5de <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d562:	4a59      	ldr	r2, [pc, #356]	; (800d6c8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d000      	beq.n	800d56a <RemapAndLinkDMAtoUARTTx+0x4da>
 800d568:	e5da      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d56a:	4a58      	ldr	r2, [pc, #352]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d56c:	23a8      	movs	r3, #168	; 0xa8
 800d56e:	58d4      	ldr	r4, [r2, r3]
 800d570:	4d57      	ldr	r5, [pc, #348]	; (800d6d0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d572:	402c      	ands	r4, r5
 800d574:	50d4      	str	r4, [r2, r3]
 800d576:	58d5      	ldr	r5, [r2, r3]
 800d578:	24e0      	movs	r4, #224	; 0xe0
 800d57a:	0324      	lsls	r4, r4, #12
 800d57c:	432c      	orrs	r4, r5
 800d57e:	50d4      	str	r4, [r2, r3]
 800d580:	e5ce      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d582:	4a54      	ldr	r2, [pc, #336]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d584:	23a8      	movs	r3, #168	; 0xa8
 800d586:	58d4      	ldr	r4, [r2, r3]
 800d588:	25f0      	movs	r5, #240	; 0xf0
 800d58a:	43ac      	bics	r4, r5
 800d58c:	50d4      	str	r4, [r2, r3]
 800d58e:	58d4      	ldr	r4, [r2, r3]
 800d590:	3d10      	subs	r5, #16
 800d592:	432c      	orrs	r4, r5
 800d594:	50d4      	str	r4, [r2, r3]
 800d596:	e5c3      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d598:	4a4e      	ldr	r2, [pc, #312]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d59a:	23a8      	movs	r3, #168	; 0xa8
 800d59c:	58d4      	ldr	r4, [r2, r3]
 800d59e:	4d4e      	ldr	r5, [pc, #312]	; (800d6d8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d5a0:	402c      	ands	r4, r5
 800d5a2:	50d4      	str	r4, [r2, r3]
 800d5a4:	58d5      	ldr	r5, [r2, r3]
 800d5a6:	24e0      	movs	r4, #224	; 0xe0
 800d5a8:	0224      	lsls	r4, r4, #8
 800d5aa:	432c      	orrs	r4, r5
 800d5ac:	50d4      	str	r4, [r2, r3]
 800d5ae:	e5b7      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d5b0:	4a48      	ldr	r2, [pc, #288]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d5b2:	23a8      	movs	r3, #168	; 0xa8
 800d5b4:	58d4      	ldr	r4, [r2, r3]
 800d5b6:	4d49      	ldr	r5, [pc, #292]	; (800d6dc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d5b8:	402c      	ands	r4, r5
 800d5ba:	50d4      	str	r4, [r2, r3]
 800d5bc:	58d5      	ldr	r5, [r2, r3]
 800d5be:	24e0      	movs	r4, #224	; 0xe0
 800d5c0:	0524      	lsls	r4, r4, #20
 800d5c2:	432c      	orrs	r4, r5
 800d5c4:	50d4      	str	r4, [r2, r3]
 800d5c6:	e5ab      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d5c8:	4a40      	ldr	r2, [pc, #256]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d5ca:	23a8      	movs	r3, #168	; 0xa8
 800d5cc:	58d4      	ldr	r4, [r2, r3]
 800d5ce:	250f      	movs	r5, #15
 800d5d0:	43ac      	bics	r4, r5
 800d5d2:	50d4      	str	r4, [r2, r3]
 800d5d4:	58d4      	ldr	r4, [r2, r3]
 800d5d6:	3d01      	subs	r5, #1
 800d5d8:	432c      	orrs	r4, r5
 800d5da:	50d4      	str	r4, [r2, r3]
 800d5dc:	e5a0      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d5de:	4a3b      	ldr	r2, [pc, #236]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d5e0:	23a8      	movs	r3, #168	; 0xa8
 800d5e2:	58d4      	ldr	r4, [r2, r3]
 800d5e4:	4d3c      	ldr	r5, [pc, #240]	; (800d6d8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d5e6:	402c      	ands	r4, r5
 800d5e8:	50d4      	str	r4, [r2, r3]
 800d5ea:	58d5      	ldr	r5, [r2, r3]
 800d5ec:	24e0      	movs	r4, #224	; 0xe0
 800d5ee:	0224      	lsls	r4, r4, #8
 800d5f0:	432c      	orrs	r4, r5
 800d5f2:	50d4      	str	r4, [r2, r3]
 800d5f4:	e594      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d5f6:	4a3c      	ldr	r2, [pc, #240]	; (800d6e8 <RemapAndLinkDMAtoUARTTx+0x658>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d000      	beq.n	800d5fe <RemapAndLinkDMAtoUARTTx+0x56e>
 800d5fc:	e590      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
 800d5fe:	680b      	ldr	r3, [r1, #0]
 800d600:	4a2c      	ldr	r2, [pc, #176]	; (800d6b4 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d01b      	beq.n	800d63e <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d606:	4a2c      	ldr	r2, [pc, #176]	; (800d6b8 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d022      	beq.n	800d652 <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d60c:	4a2b      	ldr	r2, [pc, #172]	; (800d6bc <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d02b      	beq.n	800d66a <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d612:	4a2b      	ldr	r2, [pc, #172]	; (800d6c0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d034      	beq.n	800d682 <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d618:	4a2a      	ldr	r2, [pc, #168]	; (800d6c4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d03b      	beq.n	800d696 <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800d61e:	4a2a      	ldr	r2, [pc, #168]	; (800d6c8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d000      	beq.n	800d626 <RemapAndLinkDMAtoUARTTx+0x596>
 800d624:	e57c      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800d626:	4a29      	ldr	r2, [pc, #164]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d628:	23a8      	movs	r3, #168	; 0xa8
 800d62a:	58d4      	ldr	r4, [r2, r3]
 800d62c:	4d28      	ldr	r5, [pc, #160]	; (800d6d0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d62e:	402c      	ands	r4, r5
 800d630:	50d4      	str	r4, [r2, r3]
 800d632:	58d5      	ldr	r5, [r2, r3]
 800d634:	24f0      	movs	r4, #240	; 0xf0
 800d636:	0324      	lsls	r4, r4, #12
 800d638:	432c      	orrs	r4, r5
 800d63a:	50d4      	str	r4, [r2, r3]
 800d63c:	e570      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d63e:	4a25      	ldr	r2, [pc, #148]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d640:	23a8      	movs	r3, #168	; 0xa8
 800d642:	58d5      	ldr	r5, [r2, r3]
 800d644:	26f0      	movs	r6, #240	; 0xf0
 800d646:	43b5      	bics	r5, r6
 800d648:	50d5      	str	r5, [r2, r3]
 800d64a:	58d4      	ldr	r4, [r2, r3]
 800d64c:	4334      	orrs	r4, r6
 800d64e:	50d4      	str	r4, [r2, r3]
 800d650:	e566      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d652:	4a20      	ldr	r2, [pc, #128]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d654:	23a8      	movs	r3, #168	; 0xa8
 800d656:	58d4      	ldr	r4, [r2, r3]
 800d658:	4d1f      	ldr	r5, [pc, #124]	; (800d6d8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d65a:	402c      	ands	r4, r5
 800d65c:	50d4      	str	r4, [r2, r3]
 800d65e:	58d5      	ldr	r5, [r2, r3]
 800d660:	24f0      	movs	r4, #240	; 0xf0
 800d662:	0224      	lsls	r4, r4, #8
 800d664:	432c      	orrs	r4, r5
 800d666:	50d4      	str	r4, [r2, r3]
 800d668:	e55a      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d66a:	4a1a      	ldr	r2, [pc, #104]	; (800d6d4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d66c:	23a8      	movs	r3, #168	; 0xa8
 800d66e:	58d4      	ldr	r4, [r2, r3]
 800d670:	4d1a      	ldr	r5, [pc, #104]	; (800d6dc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d672:	402c      	ands	r4, r5
 800d674:	50d4      	str	r4, [r2, r3]
 800d676:	58d5      	ldr	r5, [r2, r3]
 800d678:	24f0      	movs	r4, #240	; 0xf0
 800d67a:	0524      	lsls	r4, r4, #20
 800d67c:	432c      	orrs	r4, r5
 800d67e:	50d4      	str	r4, [r2, r3]
 800d680:	e54e      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d682:	4a12      	ldr	r2, [pc, #72]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d684:	23a8      	movs	r3, #168	; 0xa8
 800d686:	58d5      	ldr	r5, [r2, r3]
 800d688:	260f      	movs	r6, #15
 800d68a:	43b5      	bics	r5, r6
 800d68c:	50d5      	str	r5, [r2, r3]
 800d68e:	58d4      	ldr	r4, [r2, r3]
 800d690:	4334      	orrs	r4, r6
 800d692:	50d4      	str	r4, [r2, r3]
 800d694:	e544      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d696:	4a0d      	ldr	r2, [pc, #52]	; (800d6cc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d698:	23a8      	movs	r3, #168	; 0xa8
 800d69a:	58d4      	ldr	r4, [r2, r3]
 800d69c:	4d0e      	ldr	r5, [pc, #56]	; (800d6d8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d69e:	402c      	ands	r4, r5
 800d6a0:	50d4      	str	r4, [r2, r3]
 800d6a2:	58d5      	ldr	r5, [r2, r3]
 800d6a4:	24f0      	movs	r4, #240	; 0xf0
 800d6a6:	0224      	lsls	r4, r4, #8
 800d6a8:	432c      	orrs	r4, r5
 800d6aa:	50d4      	str	r4, [r2, r3]
 800d6ac:	e538      	b.n	800d120 <RemapAndLinkDMAtoUARTTx+0x90>
 800d6ae:	46c0      	nop			; (mov r8, r8)
 800d6b0:	40005000 	.word	0x40005000
 800d6b4:	4002001c 	.word	0x4002001c
 800d6b8:	40020044 	.word	0x40020044
 800d6bc:	40020080 	.word	0x40020080
 800d6c0:	40020408 	.word	0x40020408
 800d6c4:	40020444 	.word	0x40020444
 800d6c8:	40020458 	.word	0x40020458
 800d6cc:	40020400 	.word	0x40020400
 800d6d0:	fff0ffff 	.word	0xfff0ffff
 800d6d4:	40020000 	.word	0x40020000
 800d6d8:	ffff0fff 	.word	0xffff0fff
 800d6dc:	f0ffffff 	.word	0xf0ffffff
 800d6e0:	40011400 	.word	0x40011400
 800d6e4:	40011800 	.word	0x40011800
 800d6e8:	40011c00 	.word	0x40011c00

0800d6ec <DMA_MSG_TX_Setup>:
{	
 800d6ec:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d6ee:	4b0d      	ldr	r3, [pc, #52]	; (800d724 <DMA_MSG_TX_Setup+0x38>)
 800d6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d012      	beq.n	800d71c <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800d6f6:	4b0b      	ldr	r3, [pc, #44]	; (800d724 <DMA_MSG_TX_Setup+0x38>)
 800d6f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d010      	beq.n	800d720 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800d6fe:	4a09      	ldr	r2, [pc, #36]	; (800d724 <DMA_MSG_TX_Setup+0x38>)
 800d700:	2394      	movs	r3, #148	; 0x94
 800d702:	58d3      	ldr	r3, [r2, r3]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d007      	beq.n	800d718 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d708:	0021      	movs	r1, r4
 800d70a:	f7ff fcc1 	bl	800d090 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d70e:	2100      	movs	r1, #0
 800d710:	0020      	movs	r0, r4
 800d712:	f7ff f84f 	bl	800c7b4 <SetupDMAInterrupts>
}
 800d716:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800d718:	4c03      	ldr	r4, [pc, #12]	; (800d728 <DMA_MSG_TX_Setup+0x3c>)
 800d71a:	e7f5      	b.n	800d708 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800d71c:	4c01      	ldr	r4, [pc, #4]	; (800d724 <DMA_MSG_TX_Setup+0x38>)
 800d71e:	e7f3      	b.n	800d708 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800d720:	4c02      	ldr	r4, [pc, #8]	; (800d72c <DMA_MSG_TX_Setup+0x40>)
 800d722:	e7f1      	b.n	800d708 <DMA_MSG_TX_Setup+0x1c>
 800d724:	20001900 	.word	0x20001900
 800d728:	20001970 	.word	0x20001970
 800d72c:	20001938 	.word	0x20001938

0800d730 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800d730:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800d732:	4807      	ldr	r0, [pc, #28]	; (800d750 <CRC_Init+0x20>)
 800d734:	4b07      	ldr	r3, [pc, #28]	; (800d754 <CRC_Init+0x24>)
 800d736:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d738:	2310      	movs	r3, #16
 800d73a:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800d73c:	2300      	movs	r3, #0
 800d73e:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d740:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800d742:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800d744:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d746:	3303      	adds	r3, #3
 800d748:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d74a:	f003 f9cd 	bl	8010ae8 <HAL_CRC_Init>
}
 800d74e:	bd10      	pop	{r4, pc}
 800d750:	20006dc8 	.word	0x20006dc8
 800d754:	40023000 	.word	0x40023000

0800d758 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d758:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d75a:	4a05      	ldr	r2, [pc, #20]	; (800d770 <HAL_CRC_MspInit+0x18>)
 800d75c:	6951      	ldr	r1, [r2, #20]
 800d75e:	2340      	movs	r3, #64	; 0x40
 800d760:	4319      	orrs	r1, r3
 800d762:	6151      	str	r1, [r2, #20]
 800d764:	6952      	ldr	r2, [r2, #20]
 800d766:	4013      	ands	r3, r2
 800d768:	9301      	str	r3, [sp, #4]
 800d76a:	9b01      	ldr	r3, [sp, #4]
}
 800d76c:	b002      	add	sp, #8
 800d76e:	4770      	bx	lr
 800d770:	40021000 	.word	0x40021000

0800d774 <IND_LED_Init>:
	MEMS_GPIO_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800d774:	b500      	push	{lr}
 800d776:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800d778:	2380      	movs	r3, #128	; 0x80
 800d77a:	011b      	lsls	r3, r3, #4
 800d77c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d77e:	2301      	movs	r3, #1
 800d780:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d782:	2300      	movs	r3, #0
 800d784:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d786:	3303      	adds	r3, #3
 800d788:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d78a:	2090      	movs	r0, #144	; 0x90
 800d78c:	a901      	add	r1, sp, #4
 800d78e:	05c0      	lsls	r0, r0, #23
 800d790:	f004 f8aa 	bl	80118e8 <HAL_GPIO_Init>
}
 800d794:	b007      	add	sp, #28
 800d796:	bd00      	pop	{pc}

0800d798 <MEMS_GPIO_Init>:

void MEMS_GPIO_Init(void)
{
 800d798:	b510      	push	{r4, lr}
 800d79a:	b086      	sub	sp, #24
  /**I2C2 GPIO Configuration
  PB13     ------> I2C2_SCL
  PB14     ------> I2C2_SDA
  */
	
  GPIO_InitStruct.Pin = _MEMS_I2C2_SCL_PIN;
 800d79c:	2380      	movs	r3, #128	; 0x80
 800d79e:	019b      	lsls	r3, r3, #6
 800d7a0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d7a2:	2312      	movs	r3, #18
 800d7a4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d7a6:	3b11      	subs	r3, #17
 800d7a8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d7aa:	3302      	adds	r3, #2
 800d7ac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800d7ae:	3302      	adds	r3, #2
 800d7b0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(_MEMS_I2C2_SCL_PORT, &GPIO_InitStruct);
 800d7b2:	4c10      	ldr	r4, [pc, #64]	; (800d7f4 <MEMS_GPIO_Init+0x5c>)
 800d7b4:	a901      	add	r1, sp, #4
 800d7b6:	0020      	movs	r0, r4
 800d7b8:	f004 f896 	bl	80118e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = _MEMS_I2C2_SDA_PIN;
 800d7bc:	2380      	movs	r3, #128	; 0x80
 800d7be:	01db      	lsls	r3, r3, #7
 800d7c0:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(_MEMS_I2C2_SDA_PORT, &GPIO_InitStruct);
 800d7c2:	a901      	add	r1, sp, #4
 800d7c4:	0020      	movs	r0, r4
 800d7c6:	f004 f88f 	bl	80118e8 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C2_CLK_ENABLE();
 800d7ca:	4a0b      	ldr	r2, [pc, #44]	; (800d7f8 <MEMS_GPIO_Init+0x60>)
 800d7cc:	69d1      	ldr	r1, [r2, #28]
 800d7ce:	2080      	movs	r0, #128	; 0x80
 800d7d0:	03c0      	lsls	r0, r0, #15
 800d7d2:	4301      	orrs	r1, r0
 800d7d4:	61d1      	str	r1, [r2, #28]
 800d7d6:	69d3      	ldr	r3, [r2, #28]
 800d7d8:	4003      	ands	r3, r0
 800d7da:	9300      	str	r3, [sp, #0]
 800d7dc:	9b00      	ldr	r3, [sp, #0]
	
  /* I2C2 interrupt Init */
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 800d7de:	2200      	movs	r2, #0
 800d7e0:	2101      	movs	r1, #1
 800d7e2:	2018      	movs	r0, #24
 800d7e4:	f003 f8b6 	bl	8010954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800d7e8:	2018      	movs	r0, #24
 800d7ea:	f003 f8e7 	bl	80109bc <HAL_NVIC_EnableIRQ>
}
 800d7ee:	b006      	add	sp, #24
 800d7f0:	bd10      	pop	{r4, pc}
 800d7f2:	46c0      	nop			; (mov r8, r8)
 800d7f4:	48000400 	.word	0x48000400
 800d7f8:	40021000 	.word	0x40021000

0800d7fc <GPIO_Init>:
{
 800d7fc:	b500      	push	{lr}
 800d7fe:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d800:	4b19      	ldr	r3, [pc, #100]	; (800d868 <GPIO_Init+0x6c>)
 800d802:	6959      	ldr	r1, [r3, #20]
 800d804:	2080      	movs	r0, #128	; 0x80
 800d806:	0300      	lsls	r0, r0, #12
 800d808:	4301      	orrs	r1, r0
 800d80a:	6159      	str	r1, [r3, #20]
 800d80c:	695a      	ldr	r2, [r3, #20]
 800d80e:	4002      	ands	r2, r0
 800d810:	9201      	str	r2, [sp, #4]
 800d812:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d814:	6959      	ldr	r1, [r3, #20]
 800d816:	2080      	movs	r0, #128	; 0x80
 800d818:	0280      	lsls	r0, r0, #10
 800d81a:	4301      	orrs	r1, r0
 800d81c:	6159      	str	r1, [r3, #20]
 800d81e:	695a      	ldr	r2, [r3, #20]
 800d820:	4002      	ands	r2, r0
 800d822:	9202      	str	r2, [sp, #8]
 800d824:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d826:	6959      	ldr	r1, [r3, #20]
 800d828:	2080      	movs	r0, #128	; 0x80
 800d82a:	0340      	lsls	r0, r0, #13
 800d82c:	4301      	orrs	r1, r0
 800d82e:	6159      	str	r1, [r3, #20]
 800d830:	695a      	ldr	r2, [r3, #20]
 800d832:	4002      	ands	r2, r0
 800d834:	9203      	str	r2, [sp, #12]
 800d836:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800d838:	6959      	ldr	r1, [r3, #20]
 800d83a:	2080      	movs	r0, #128	; 0x80
 800d83c:	02c0      	lsls	r0, r0, #11
 800d83e:	4301      	orrs	r1, r0
 800d840:	6159      	str	r1, [r3, #20]
 800d842:	695a      	ldr	r2, [r3, #20]
 800d844:	4002      	ands	r2, r0
 800d846:	9204      	str	r2, [sp, #16]
 800d848:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d84a:	695a      	ldr	r2, [r3, #20]
 800d84c:	2180      	movs	r1, #128	; 0x80
 800d84e:	03c9      	lsls	r1, r1, #15
 800d850:	430a      	orrs	r2, r1
 800d852:	615a      	str	r2, [r3, #20]
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	400b      	ands	r3, r1
 800d858:	9305      	str	r3, [sp, #20]
 800d85a:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800d85c:	f7ff ff8a 	bl	800d774 <IND_LED_Init>
	MEMS_GPIO_Init();
 800d860:	f7ff ff9a 	bl	800d798 <MEMS_GPIO_Init>
}
 800d864:	b007      	add	sp, #28
 800d866:	bd00      	pop	{pc}
 800d868:	40021000 	.word	0x40021000

0800d86c <MX_I2C2_Init>:
  MX_I2C2_Init();
}

//-- Configure indicator LED
 void MX_I2C2_Init(void)
{
 800d86c:	b510      	push	{r4, lr}

  hi2c2.Instance = I2C2;
 800d86e:	4c0d      	ldr	r4, [pc, #52]	; (800d8a4 <MX_I2C2_Init+0x38>)
 800d870:	4b0d      	ldr	r3, [pc, #52]	; (800d8a8 <MX_I2C2_Init+0x3c>)
 800d872:	6023      	str	r3, [r4, #0]
  /* hi2c2.Init.Timing = 0x2010091A; */ /* fast mode: 400 KHz */
  hi2c2.Init.Timing = 0x20303E5D; /* Standard mode: 100 KHz */
 800d874:	4b0d      	ldr	r3, [pc, #52]	; (800d8ac <MX_I2C2_Init+0x40>)
 800d876:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800d878:	2300      	movs	r3, #0
 800d87a:	60a3      	str	r3, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d87c:	2201      	movs	r2, #1
 800d87e:	60e2      	str	r2, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d880:	6123      	str	r3, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800d882:	6163      	str	r3, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d884:	61a3      	str	r3, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d886:	61e3      	str	r3, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d888:	6223      	str	r3, [r4, #32]
  HAL_I2C_Init(&hi2c2);
 800d88a:	0020      	movs	r0, r4
 800d88c:	f004 fa96 	bl	8011dbc <HAL_I2C_Init>

  /** Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 800d890:	2100      	movs	r1, #0
 800d892:	0020      	movs	r0, r4
 800d894:	f004 fc5e 	bl	8012154 <HAL_I2CEx_ConfigAnalogFilter>

  /** Configure Digital filter */
  HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 800d898:	2100      	movs	r1, #0
 800d89a:	0020      	movs	r0, r4
 800d89c:	f004 fc9e 	bl	80121dc <HAL_I2CEx_ConfigDigitalFilter>
}
 800d8a0:	bd10      	pop	{r4, pc}
 800d8a2:	46c0      	nop			; (mov r8, r8)
 800d8a4:	20006dec 	.word	0x20006dec
 800d8a8:	40005800 	.word	0x40005800
 800d8ac:	20303e5d 	.word	0x20303e5d

0800d8b0 <MX_I2C_Init>:
{
 800d8b0:	b500      	push	{lr}
 800d8b2:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d8b4:	4b18      	ldr	r3, [pc, #96]	; (800d918 <MX_I2C_Init+0x68>)
 800d8b6:	6959      	ldr	r1, [r3, #20]
 800d8b8:	2080      	movs	r0, #128	; 0x80
 800d8ba:	0300      	lsls	r0, r0, #12
 800d8bc:	4301      	orrs	r1, r0
 800d8be:	6159      	str	r1, [r3, #20]
 800d8c0:	695a      	ldr	r2, [r3, #20]
 800d8c2:	4002      	ands	r2, r0
 800d8c4:	9201      	str	r2, [sp, #4]
 800d8c6:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d8c8:	6959      	ldr	r1, [r3, #20]
 800d8ca:	2080      	movs	r0, #128	; 0x80
 800d8cc:	0280      	lsls	r0, r0, #10
 800d8ce:	4301      	orrs	r1, r0
 800d8d0:	6159      	str	r1, [r3, #20]
 800d8d2:	695a      	ldr	r2, [r3, #20]
 800d8d4:	4002      	ands	r2, r0
 800d8d6:	9202      	str	r2, [sp, #8]
 800d8d8:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d8da:	6959      	ldr	r1, [r3, #20]
 800d8dc:	2080      	movs	r0, #128	; 0x80
 800d8de:	0340      	lsls	r0, r0, #13
 800d8e0:	4301      	orrs	r1, r0
 800d8e2:	6159      	str	r1, [r3, #20]
 800d8e4:	695a      	ldr	r2, [r3, #20]
 800d8e6:	4002      	ands	r2, r0
 800d8e8:	9203      	str	r2, [sp, #12]
 800d8ea:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d8ec:	6959      	ldr	r1, [r3, #20]
 800d8ee:	2080      	movs	r0, #128	; 0x80
 800d8f0:	02c0      	lsls	r0, r0, #11
 800d8f2:	4301      	orrs	r1, r0
 800d8f4:	6159      	str	r1, [r3, #20]
 800d8f6:	695a      	ldr	r2, [r3, #20]
 800d8f8:	4002      	ands	r2, r0
 800d8fa:	9204      	str	r2, [sp, #16]
 800d8fc:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();   // for HSE and Boot0
 800d8fe:	695a      	ldr	r2, [r3, #20]
 800d900:	2180      	movs	r1, #128	; 0x80
 800d902:	03c9      	lsls	r1, r1, #15
 800d904:	430a      	orrs	r2, r1
 800d906:	615a      	str	r2, [r3, #20]
 800d908:	695b      	ldr	r3, [r3, #20]
 800d90a:	400b      	ands	r3, r1
 800d90c:	9305      	str	r3, [sp, #20]
 800d90e:	9b05      	ldr	r3, [sp, #20]
  MX_I2C2_Init();
 800d910:	f7ff ffac 	bl	800d86c <MX_I2C2_Init>
}
 800d914:	b007      	add	sp, #28
 800d916:	bd00      	pop	{pc}
 800d918:	40021000 	.word	0x40021000

0800d91c <LSM6DS3_I2C_Write>:

uint8_t LSM6DS3_I2C_Write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer, uint16_t nBytesToWrite)
{
 800d91c:	b510      	push	{r4, lr}
 800d91e:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Write(handle, LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH, WriteAddr, sizeof(WriteAddr), 
 800d920:	b289      	uxth	r1, r1
 800d922:	2464      	movs	r4, #100	; 0x64
 800d924:	9402      	str	r4, [sp, #8]
 800d926:	9301      	str	r3, [sp, #4]
 800d928:	9200      	str	r2, [sp, #0]
 800d92a:	2301      	movs	r3, #1
 800d92c:	000a      	movs	r2, r1
 800d92e:	21d6      	movs	r1, #214	; 0xd6
 800d930:	f004 faa2 	bl	8011e78 <HAL_I2C_Mem_Write>
 800d934:	1e43      	subs	r3, r0, #1
 800d936:	4198      	sbcs	r0, r3
 800d938:	b2c0      	uxtb	r0, r0
																							pBuffer, nBytesToWrite, 100) != HAL_OK) {
		return 1;
	}
	return 0;
}
 800d93a:	b004      	add	sp, #16
 800d93c:	bd10      	pop	{r4, pc}

0800d93e <LSM6DS3_I2C_Read>:

uint8_t LSM6DS3_I2C_Read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer, uint16_t nBytesToRead)
{
 800d93e:	b510      	push	{r4, lr}
 800d940:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Read(handle, LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH, ReadAddr, sizeof(ReadAddr), 
 800d942:	b289      	uxth	r1, r1
 800d944:	2464      	movs	r4, #100	; 0x64
 800d946:	9402      	str	r4, [sp, #8]
 800d948:	9301      	str	r3, [sp, #4]
 800d94a:	9200      	str	r2, [sp, #0]
 800d94c:	2301      	movs	r3, #1
 800d94e:	000a      	movs	r2, r1
 800d950:	21d6      	movs	r1, #214	; 0xd6
 800d952:	f004 fb49 	bl	8011fe8 <HAL_I2C_Mem_Read>
 800d956:	1e43      	subs	r3, r0, #1
 800d958:	4198      	sbcs	r0, r3
 800d95a:	b2c0      	uxtb	r0, r0
		pBuffer, nBytesToRead, 100) != HAL_OK) {
			return 1;
	}
	return 0;
}
 800d95c:	b004      	add	sp, #16
 800d95e:	bd10      	pop	{r4, pc}

0800d960 <LSM303AGR_MAG_I2C_Write>:
	}
	return 0;
}

uint8_t LSM303AGR_MAG_I2C_Write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer, uint16_t nBytesToWrite)
{
 800d960:	b510      	push	{r4, lr}
 800d962:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Write(handle, LSM303AGR_MAG_I2C_ADDRESS, WriteAddr, sizeof(WriteAddr), 
 800d964:	b289      	uxth	r1, r1
 800d966:	2464      	movs	r4, #100	; 0x64
 800d968:	9402      	str	r4, [sp, #8]
 800d96a:	9301      	str	r3, [sp, #4]
 800d96c:	9200      	str	r2, [sp, #0]
 800d96e:	2301      	movs	r3, #1
 800d970:	000a      	movs	r2, r1
 800d972:	213c      	movs	r1, #60	; 0x3c
 800d974:	f004 fa80 	bl	8011e78 <HAL_I2C_Mem_Write>
 800d978:	1e43      	subs	r3, r0, #1
 800d97a:	4198      	sbcs	r0, r3
 800d97c:	b2c0      	uxtb	r0, r0
																							pBuffer, nBytesToWrite, 100) != HAL_OK) {
		return 1;
	}
	return 0;
}
 800d97e:	b004      	add	sp, #16
 800d980:	bd10      	pop	{r4, pc}

0800d982 <LSM303AGR_MAG_I2C_Read>:

uint8_t LSM303AGR_MAG_I2C_Read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer, uint16_t nBytesToRead)
{
 800d982:	b510      	push	{r4, lr}
 800d984:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Read(handle, LSM303AGR_MAG_I2C_ADDRESS, ReadAddr, sizeof(ReadAddr), 
 800d986:	b289      	uxth	r1, r1
 800d988:	2464      	movs	r4, #100	; 0x64
 800d98a:	9402      	str	r4, [sp, #8]
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	9200      	str	r2, [sp, #0]
 800d990:	2301      	movs	r3, #1
 800d992:	000a      	movs	r2, r1
 800d994:	213c      	movs	r1, #60	; 0x3c
 800d996:	f004 fb27 	bl	8011fe8 <HAL_I2C_Mem_Read>
 800d99a:	1e43      	subs	r3, r0, #1
 800d99c:	4198      	sbcs	r0, r3
 800d99e:	b2c0      	uxtb	r0, r0
		pBuffer, nBytesToRead, 100) != HAL_OK) {
			return 1;
	}
	return 0;
}
 800d9a0:	b004      	add	sp, #16
 800d9a2:	bd10      	pop	{r4, pc}

0800d9a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d9a4:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d9a6:	f002 ffab 	bl	8010900 <HAL_IncTick>
  osSystickHandler();  
 800d9aa:	f000 ffff 	bl	800e9ac <osSystickHandler>

}
 800d9ae:	bd10      	pop	{r4, pc}

0800d9b0 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d9b0:	e7fe      	b.n	800d9b0 <HardFault_Handler>
	...

0800d9b4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d9b4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d9b6:	4802      	ldr	r0, [pc, #8]	; (800d9c0 <USART1_IRQHandler+0xc>)
 800d9b8:	f006 f955 	bl	8013c66 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d9bc:	bd10      	pop	{r4, pc}
 800d9be:	46c0      	nop			; (mov r8, r8)
 800d9c0:	20006c08 	.word	0x20006c08

0800d9c4 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d9c4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d9c6:	4802      	ldr	r0, [pc, #8]	; (800d9d0 <USART2_IRQHandler+0xc>)
 800d9c8:	f006 f94d 	bl	8013c66 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d9cc:	bd10      	pop	{r4, pc}
 800d9ce:	46c0      	nop			; (mov r8, r8)
 800d9d0:	20006d58 	.word	0x20006d58

0800d9d4 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d9d4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d9d6:	4806      	ldr	r0, [pc, #24]	; (800d9f0 <USART3_8_IRQHandler+0x1c>)
 800d9d8:	f006 f945 	bl	8013c66 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d9dc:	4805      	ldr	r0, [pc, #20]	; (800d9f4 <USART3_8_IRQHandler+0x20>)
 800d9de:	f006 f942 	bl	8013c66 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d9e2:	4805      	ldr	r0, [pc, #20]	; (800d9f8 <USART3_8_IRQHandler+0x24>)
 800d9e4:	f006 f93f 	bl	8013c66 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d9e8:	4804      	ldr	r0, [pc, #16]	; (800d9fc <USART3_8_IRQHandler+0x28>)
 800d9ea:	f006 f93c 	bl	8013c66 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d9ee:	bd10      	pop	{r4, pc}
 800d9f0:	20006b28 	.word	0x20006b28
 800d9f4:	20006ce8 	.word	0x20006ce8
 800d9f8:	20006b98 	.word	0x20006b98
 800d9fc:	20006c78 	.word	0x20006c78

0800da00 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800da00:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800da02:	2001      	movs	r0, #1
 800da04:	f7fc ffea 	bl	800a9dc <DMA_IRQHandler>
	
}
 800da08:	bd10      	pop	{r4, pc}
	...

0800da0c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800da0c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800da0e:	4b0c      	ldr	r3, [pc, #48]	; (800da40 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	06db      	lsls	r3, r3, #27
 800da14:	d408      	bmi.n	800da28 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800da16:	4b0b      	ldr	r3, [pc, #44]	; (800da44 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	05db      	lsls	r3, r3, #23
 800da1c:	d408      	bmi.n	800da30 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800da1e:	4b09      	ldr	r3, [pc, #36]	; (800da44 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	06db      	lsls	r3, r3, #27
 800da24:	d408      	bmi.n	800da38 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800da26:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800da28:	2005      	movs	r0, #5
 800da2a:	f7fc ffd7 	bl	800a9dc <DMA_IRQHandler>
 800da2e:	e7fa      	b.n	800da26 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800da30:	2002      	movs	r0, #2
 800da32:	f7fc ffd3 	bl	800a9dc <DMA_IRQHandler>
 800da36:	e7f6      	b.n	800da26 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800da38:	4803      	ldr	r0, [pc, #12]	; (800da48 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800da3a:	f003 f9b1 	bl	8010da0 <HAL_DMA_IRQHandler>
}
 800da3e:	e7f2      	b.n	800da26 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800da40:	40020400 	.word	0x40020400
 800da44:	40020000 	.word	0x40020000
 800da48:	20001900 	.word	0x20001900

0800da4c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800da4c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800da4e:	4b14      	ldr	r3, [pc, #80]	; (800daa0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	03db      	lsls	r3, r3, #15
 800da54:	d413      	bmi.n	800da7e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800da56:	4b12      	ldr	r3, [pc, #72]	; (800daa0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	02db      	lsls	r3, r3, #11
 800da5c:	d413      	bmi.n	800da86 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800da5e:	4b11      	ldr	r3, [pc, #68]	; (800daa4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	05db      	lsls	r3, r3, #23
 800da64:	d413      	bmi.n	800da8e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800da66:	4b0e      	ldr	r3, [pc, #56]	; (800daa0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	04db      	lsls	r3, r3, #19
 800da6c:	d413      	bmi.n	800da96 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800da6e:	4b0c      	ldr	r3, [pc, #48]	; (800daa0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	01db      	lsls	r3, r3, #7
 800da74:	d506      	bpl.n	800da84 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800da76:	480c      	ldr	r0, [pc, #48]	; (800daa8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800da78:	f003 f992 	bl	8010da0 <HAL_DMA_IRQHandler>
	}
}
 800da7c:	e002      	b.n	800da84 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800da7e:	2003      	movs	r0, #3
 800da80:	f7fc ffac 	bl	800a9dc <DMA_IRQHandler>
}
 800da84:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800da86:	2004      	movs	r0, #4
 800da88:	f7fc ffa8 	bl	800a9dc <DMA_IRQHandler>
 800da8c:	e7fa      	b.n	800da84 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800da8e:	2006      	movs	r0, #6
 800da90:	f7fc ffa4 	bl	800a9dc <DMA_IRQHandler>
 800da94:	e7f6      	b.n	800da84 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800da96:	4805      	ldr	r0, [pc, #20]	; (800daac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800da98:	f003 f982 	bl	8010da0 <HAL_DMA_IRQHandler>
 800da9c:	e7f2      	b.n	800da84 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800da9e:	46c0      	nop			; (mov r8, r8)
 800daa0:	40020000 	.word	0x40020000
 800daa4:	40020400 	.word	0x40020400
 800daa8:	20001970 	.word	0x20001970
 800daac:	20001938 	.word	0x20001938

0800dab0 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dab0:	b510      	push	{r4, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800dab6:	2300      	movs	r3, #0
 800dab8:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800daba:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d001      	beq.n	800dac4 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800dac0:	f7fe ff24 	bl	800c90c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800dac4:	0020      	movs	r0, r4
 800dac6:	f7fe f9bd 	bl	800be44 <GetPort>
 800daca:	0080      	lsls	r0, r0, #2
 800dacc:	4b03      	ldr	r3, [pc, #12]	; (800dadc <HAL_UART_TxCpltCallback+0x2c>)
 800dace:	58c0      	ldr	r0, [r0, r3]
 800dad0:	a901      	add	r1, sp, #4
 800dad2:	f001 faef 	bl	800f0b4 <xQueueGiveFromISR>
}
 800dad6:	b002      	add	sp, #8
 800dad8:	bd10      	pop	{r4, pc}
 800dada:	46c0      	nop			; (mov r8, r8)
 800dadc:	20006af0 	.word	0x20006af0

0800dae0 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dae0:	b510      	push	{r4, lr}
 800dae2:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800dae4:	2369      	movs	r3, #105	; 0x69
 800dae6:	2201      	movs	r2, #1
 800dae8:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800daea:	f7fe f9ab 	bl	800be44 <GetPort>
	if (portStatus[port] == STREAM) {
 800daee:	4b0c      	ldr	r3, [pc, #48]	; (800db20 <HAL_UART_ErrorCallback+0x40>)
 800daf0:	5c1b      	ldrb	r3, [r3, r0]
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	d005      	beq.n	800db02 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800daf6:	4b0b      	ldr	r3, [pc, #44]	; (800db24 <HAL_UART_ErrorCallback+0x44>)
 800daf8:	1818      	adds	r0, r3, r0
 800dafa:	3801      	subs	r0, #1
 800dafc:	2301      	movs	r3, #1
 800dafe:	7003      	strb	r3, [r0, #0]
	}	
}
 800db00:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800db02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	b292      	uxth	r2, r2
 800db0a:	3801      	subs	r0, #1
 800db0c:	0080      	lsls	r0, r0, #2
 800db0e:	4b06      	ldr	r3, [pc, #24]	; (800db28 <HAL_UART_ErrorCallback+0x48>)
 800db10:	58c3      	ldr	r3, [r0, r3]
 800db12:	6819      	ldr	r1, [r3, #0]
 800db14:	3128      	adds	r1, #40	; 0x28
 800db16:	0020      	movs	r0, r4
 800db18:	f005 fc8e 	bl	8013438 <HAL_UART_Receive_DMA>
 800db1c:	e7f0      	b.n	800db00 <HAL_UART_ErrorCallback+0x20>
 800db1e:	46c0      	nop			; (mov r8, r8)
 800db20:	20001348 	.word	0x20001348
 800db24:	20001514 	.word	0x20001514
 800db28:	200016f4 	.word	0x200016f4

0800db2c <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800db2c:	b510      	push	{r4, lr}
 800db2e:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800db30:	f7fe f988 	bl	800be44 <GetPort>
 800db34:	4b13      	ldr	r3, [pc, #76]	; (800db84 <HAL_UART_RxCpltCallback+0x58>)
 800db36:	5c1b      	ldrb	r3, [r3, r0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d006      	beq.n	800db4a <HAL_UART_RxCpltCallback+0x1e>
 800db3c:	0020      	movs	r0, r4
 800db3e:	f7fe f981 	bl	800be44 <GetPort>
 800db42:	4b10      	ldr	r3, [pc, #64]	; (800db84 <HAL_UART_RxCpltCallback+0x58>)
 800db44:	5c1b      	ldrb	r3, [r3, r0]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d11a      	bne.n	800db80 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800db4a:	0020      	movs	r0, r4
 800db4c:	f7fe f97a 	bl	800be44 <GetPort>
 800db50:	4b0d      	ldr	r3, [pc, #52]	; (800db88 <HAL_UART_RxCpltCallback+0x5c>)
 800db52:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800db54:	0020      	movs	r0, r4
 800db56:	f7fe f975 	bl	800be44 <GetPort>
 800db5a:	4b0a      	ldr	r3, [pc, #40]	; (800db84 <HAL_UART_RxCpltCallback+0x58>)
 800db5c:	2205      	movs	r2, #5
 800db5e:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800db60:	0020      	movs	r0, r4
 800db62:	f7fe f96f 	bl	800be44 <GetPort>
 800db66:	4b09      	ldr	r3, [pc, #36]	; (800db8c <HAL_UART_RxCpltCallback+0x60>)
 800db68:	1818      	adds	r0, r3, r0
 800db6a:	3801      	subs	r0, #1
 800db6c:	2300      	movs	r3, #0
 800db6e:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800db70:	0020      	movs	r0, r4
 800db72:	f7fe f967 	bl	800be44 <GetPort>
 800db76:	4b06      	ldr	r3, [pc, #24]	; (800db90 <HAL_UART_RxCpltCallback+0x64>)
 800db78:	1818      	adds	r0, r3, r0
 800db7a:	3801      	subs	r0, #1
 800db7c:	2301      	movs	r3, #1
 800db7e:	7003      	strb	r3, [r0, #0]
	}
}
 800db80:	bd10      	pop	{r4, pc}
 800db82:	46c0      	nop			; (mov r8, r8)
 800db84:	20001348 	.word	0x20001348
 800db88:	20006a10 	.word	0x20006a10
 800db8c:	2000169c 	.word	0x2000169c
 800db90:	20001514 	.word	0x20001514

0800db94 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800db94:	b672      	cpsid	i
 800db96:	e7fe      	b.n	800db96 <vApplicationStackOverflowHook+0x2>

0800db98 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800db98:	b672      	cpsid	i
 800db9a:	e7fe      	b.n	800db9a <vApplicationMallocFailedHook+0x2>

0800db9c <MX_USART1_UART_Init>:
FlagStatus UartTxReady = RESET;

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800db9c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800db9e:	4809      	ldr	r0, [pc, #36]	; (800dbc4 <MX_USART1_UART_Init+0x28>)
 800dba0:	4b09      	ldr	r3, [pc, #36]	; (800dbc8 <MX_USART1_UART_Init+0x2c>)
 800dba2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dba4:	23e1      	movs	r3, #225	; 0xe1
 800dba6:	031b      	lsls	r3, r3, #12
 800dba8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800dbae:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800dbb0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dbb2:	220c      	movs	r2, #12
 800dbb4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dbb6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800dbb8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dbba:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dbbc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800dbbe:	f005 ff7b 	bl	8013ab8 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800dbc2:	bd10      	pop	{r4, pc}
 800dbc4:	20006c08 	.word	0x20006c08
 800dbc8:	40013800 	.word	0x40013800

0800dbcc <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800dbcc:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800dbce:	4809      	ldr	r0, [pc, #36]	; (800dbf4 <MX_USART2_UART_Init+0x28>)
 800dbd0:	4b09      	ldr	r3, [pc, #36]	; (800dbf8 <MX_USART2_UART_Init+0x2c>)
 800dbd2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dbd4:	23e1      	movs	r3, #225	; 0xe1
 800dbd6:	031b      	lsls	r3, r3, #12
 800dbd8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800dbde:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dbe0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800dbe2:	220c      	movs	r2, #12
 800dbe4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dbe6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dbe8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dbea:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dbec:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800dbee:	f005 ff63 	bl	8013ab8 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800dbf2:	bd10      	pop	{r4, pc}
 800dbf4:	20006d58 	.word	0x20006d58
 800dbf8:	40004400 	.word	0x40004400

0800dbfc <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800dbfc:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800dbfe:	4809      	ldr	r0, [pc, #36]	; (800dc24 <MX_USART3_UART_Init+0x28>)
 800dc00:	4b09      	ldr	r3, [pc, #36]	; (800dc28 <MX_USART3_UART_Init+0x2c>)
 800dc02:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dc04:	23e1      	movs	r3, #225	; 0xe1
 800dc06:	031b      	lsls	r3, r3, #12
 800dc08:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800dc0e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800dc10:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800dc12:	220c      	movs	r2, #12
 800dc14:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc16:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc18:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc1a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc1c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dc1e:	f005 ff4b 	bl	8013ab8 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800dc22:	bd10      	pop	{r4, pc}
 800dc24:	20006b28 	.word	0x20006b28
 800dc28:	40004800 	.word	0x40004800

0800dc2c <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800dc2c:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800dc2e:	4809      	ldr	r0, [pc, #36]	; (800dc54 <MX_USART4_UART_Init+0x28>)
 800dc30:	4b09      	ldr	r3, [pc, #36]	; (800dc58 <MX_USART4_UART_Init+0x2c>)
 800dc32:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dc34:	23e1      	movs	r3, #225	; 0xe1
 800dc36:	031b      	lsls	r3, r3, #12
 800dc38:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dc3e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dc40:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800dc42:	220c      	movs	r2, #12
 800dc44:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc46:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc48:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc4a:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc4c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800dc4e:	f005 ff33 	bl	8013ab8 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800dc52:	bd10      	pop	{r4, pc}
 800dc54:	20006ce8 	.word	0x20006ce8
 800dc58:	40004c00 	.word	0x40004c00

0800dc5c <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800dc5c:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800dc5e:	4809      	ldr	r0, [pc, #36]	; (800dc84 <MX_USART5_UART_Init+0x28>)
 800dc60:	4b09      	ldr	r3, [pc, #36]	; (800dc88 <MX_USART5_UART_Init+0x2c>)
 800dc62:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dc64:	23e1      	movs	r3, #225	; 0xe1
 800dc66:	031b      	lsls	r3, r3, #12
 800dc68:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800dc6e:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800dc70:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800dc72:	220c      	movs	r2, #12
 800dc74:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc76:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc78:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc7a:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc7c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800dc7e:	f005 ff1b 	bl	8013ab8 <HAL_UART_Init>
	#if _P6pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800dc82:	bd10      	pop	{r4, pc}
 800dc84:	20006b98 	.word	0x20006b98
 800dc88:	40005000 	.word	0x40005000

0800dc8c <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800dc8c:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800dc8e:	4809      	ldr	r0, [pc, #36]	; (800dcb4 <MX_USART6_UART_Init+0x28>)
 800dc90:	4b09      	ldr	r3, [pc, #36]	; (800dcb8 <MX_USART6_UART_Init+0x2c>)
 800dc92:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dc94:	23e1      	movs	r3, #225	; 0xe1
 800dc96:	031b      	lsls	r3, r3, #12
 800dc98:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800dc9e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800dca0:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800dca2:	220c      	movs	r2, #12
 800dca4:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dca6:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800dca8:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dcaa:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dcac:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800dcae:	f005 ff03 	bl	8013ab8 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800dcb2:	bd10      	pop	{r4, pc}
 800dcb4:	20006c78 	.word	0x20006c78
 800dcb8:	40011400 	.word	0x40011400

0800dcbc <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcbe:	46ce      	mov	lr, r9
 800dcc0:	b500      	push	{lr}
 800dcc2:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800dcc4:	6803      	ldr	r3, [r0, #0]
 800dcc6:	4a91      	ldr	r2, [pc, #580]	; (800df0c <HAL_UART_MspInit+0x250>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d015      	beq.n	800dcf8 <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800dccc:	4a90      	ldr	r2, [pc, #576]	; (800df10 <HAL_UART_MspInit+0x254>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d040      	beq.n	800dd54 <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800dcd2:	4a90      	ldr	r2, [pc, #576]	; (800df14 <HAL_UART_MspInit+0x258>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d069      	beq.n	800ddac <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800dcd8:	4a8f      	ldr	r2, [pc, #572]	; (800df18 <HAL_UART_MspInit+0x25c>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d100      	bne.n	800dce0 <HAL_UART_MspInit+0x24>
 800dcde:	e092      	b.n	800de06 <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800dce0:	4a8e      	ldr	r2, [pc, #568]	; (800df1c <HAL_UART_MspInit+0x260>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d100      	bne.n	800dce8 <HAL_UART_MspInit+0x2c>
 800dce6:	e0b9      	b.n	800de5c <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800dce8:	4a8d      	ldr	r2, [pc, #564]	; (800df20 <HAL_UART_MspInit+0x264>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d100      	bne.n	800dcf0 <HAL_UART_MspInit+0x34>
 800dcee:	e0e0      	b.n	800deb2 <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800dcf0:	b00c      	add	sp, #48	; 0x30
 800dcf2:	bc04      	pop	{r2}
 800dcf4:	4691      	mov	r9, r2
 800dcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800dcf8:	4a8a      	ldr	r2, [pc, #552]	; (800df24 <HAL_UART_MspInit+0x268>)
 800dcfa:	6991      	ldr	r1, [r2, #24]
 800dcfc:	2080      	movs	r0, #128	; 0x80
 800dcfe:	01c0      	lsls	r0, r0, #7
 800dd00:	4301      	orrs	r1, r0
 800dd02:	6191      	str	r1, [r2, #24]
 800dd04:	6993      	ldr	r3, [r2, #24]
 800dd06:	4003      	ands	r3, r0
 800dd08:	9301      	str	r3, [sp, #4]
 800dd0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800dd0c:	2380      	movs	r3, #128	; 0x80
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd12:	2702      	movs	r7, #2
 800dd14:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd16:	2401      	movs	r4, #1
 800dd18:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd1a:	2603      	movs	r6, #3
 800dd1c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800dd1e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800dd20:	2590      	movs	r5, #144	; 0x90
 800dd22:	05ed      	lsls	r5, r5, #23
 800dd24:	a907      	add	r1, sp, #28
 800dd26:	0028      	movs	r0, r5
 800dd28:	f003 fdde 	bl	80118e8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800dd2c:	2380      	movs	r3, #128	; 0x80
 800dd2e:	00db      	lsls	r3, r3, #3
 800dd30:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd32:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd34:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd36:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800dd38:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800dd3a:	a907      	add	r1, sp, #28
 800dd3c:	0028      	movs	r0, r5
 800dd3e:	f003 fdd3 	bl	80118e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800dd42:	2200      	movs	r2, #0
 800dd44:	2101      	movs	r1, #1
 800dd46:	201b      	movs	r0, #27
 800dd48:	f002 fe04 	bl	8010954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800dd4c:	201b      	movs	r0, #27
 800dd4e:	f002 fe35 	bl	80109bc <HAL_NVIC_EnableIRQ>
 800dd52:	e7cd      	b.n	800dcf0 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800dd54:	4a73      	ldr	r2, [pc, #460]	; (800df24 <HAL_UART_MspInit+0x268>)
 800dd56:	69d1      	ldr	r1, [r2, #28]
 800dd58:	2080      	movs	r0, #128	; 0x80
 800dd5a:	0280      	lsls	r0, r0, #10
 800dd5c:	4301      	orrs	r1, r0
 800dd5e:	61d1      	str	r1, [r2, #28]
 800dd60:	69d3      	ldr	r3, [r2, #28]
 800dd62:	4003      	ands	r3, r0
 800dd64:	9302      	str	r3, [sp, #8]
 800dd66:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800dd68:	2304      	movs	r3, #4
 800dd6a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd6c:	2702      	movs	r7, #2
 800dd6e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd70:	2401      	movs	r4, #1
 800dd72:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd74:	2603      	movs	r6, #3
 800dd76:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800dd78:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800dd7a:	2590      	movs	r5, #144	; 0x90
 800dd7c:	05ed      	lsls	r5, r5, #23
 800dd7e:	a907      	add	r1, sp, #28
 800dd80:	0028      	movs	r0, r5
 800dd82:	f003 fdb1 	bl	80118e8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800dd86:	2308      	movs	r3, #8
 800dd88:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd8a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd8c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd8e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800dd90:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800dd92:	a907      	add	r1, sp, #28
 800dd94:	0028      	movs	r0, r5
 800dd96:	f003 fda7 	bl	80118e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	2101      	movs	r1, #1
 800dd9e:	201c      	movs	r0, #28
 800dda0:	f002 fdd8 	bl	8010954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800dda4:	201c      	movs	r0, #28
 800dda6:	f002 fe09 	bl	80109bc <HAL_NVIC_EnableIRQ>
 800ddaa:	e7a1      	b.n	800dcf0 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800ddac:	4a5d      	ldr	r2, [pc, #372]	; (800df24 <HAL_UART_MspInit+0x268>)
 800ddae:	69d1      	ldr	r1, [r2, #28]
 800ddb0:	2080      	movs	r0, #128	; 0x80
 800ddb2:	02c0      	lsls	r0, r0, #11
 800ddb4:	4301      	orrs	r1, r0
 800ddb6:	61d1      	str	r1, [r2, #28]
 800ddb8:	69d3      	ldr	r3, [r2, #28]
 800ddba:	4003      	ands	r3, r0
 800ddbc:	9303      	str	r3, [sp, #12]
 800ddbe:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800ddc0:	2380      	movs	r3, #128	; 0x80
 800ddc2:	00db      	lsls	r3, r3, #3
 800ddc4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddc6:	2402      	movs	r4, #2
 800ddc8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddca:	2701      	movs	r7, #1
 800ddcc:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ddce:	2603      	movs	r6, #3
 800ddd0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800ddd2:	2504      	movs	r5, #4
 800ddd4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800ddd6:	a907      	add	r1, sp, #28
 800ddd8:	4853      	ldr	r0, [pc, #332]	; (800df28 <HAL_UART_MspInit+0x26c>)
 800ddda:	f003 fd85 	bl	80118e8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800ddde:	2380      	movs	r3, #128	; 0x80
 800dde0:	011b      	lsls	r3, r3, #4
 800dde2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dde4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dde6:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dde8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800ddea:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800ddec:	a907      	add	r1, sp, #28
 800ddee:	484e      	ldr	r0, [pc, #312]	; (800df28 <HAL_UART_MspInit+0x26c>)
 800ddf0:	f003 fd7a 	bl	80118e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	2101      	movs	r1, #1
 800ddf8:	201d      	movs	r0, #29
 800ddfa:	f002 fdab 	bl	8010954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800ddfe:	201d      	movs	r0, #29
 800de00:	f002 fddc 	bl	80109bc <HAL_NVIC_EnableIRQ>
 800de04:	e774      	b.n	800dcf0 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800de06:	4a47      	ldr	r2, [pc, #284]	; (800df24 <HAL_UART_MspInit+0x268>)
 800de08:	69d1      	ldr	r1, [r2, #28]
 800de0a:	2080      	movs	r0, #128	; 0x80
 800de0c:	0300      	lsls	r0, r0, #12
 800de0e:	4301      	orrs	r1, r0
 800de10:	61d1      	str	r1, [r2, #28]
 800de12:	69d3      	ldr	r3, [r2, #28]
 800de14:	4003      	ands	r3, r0
 800de16:	9304      	str	r3, [sp, #16]
 800de18:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800de1a:	2401      	movs	r4, #1
 800de1c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de1e:	2502      	movs	r5, #2
 800de20:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de22:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de24:	2603      	movs	r6, #3
 800de26:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800de28:	2704      	movs	r7, #4
 800de2a:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800de2c:	a907      	add	r1, sp, #28
 800de2e:	2090      	movs	r0, #144	; 0x90
 800de30:	05c0      	lsls	r0, r0, #23
 800de32:	f003 fd59 	bl	80118e8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800de36:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de38:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de3a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de3c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800de3e:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800de40:	a907      	add	r1, sp, #28
 800de42:	2090      	movs	r0, #144	; 0x90
 800de44:	05c0      	lsls	r0, r0, #23
 800de46:	f003 fd4f 	bl	80118e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800de4a:	2200      	movs	r2, #0
 800de4c:	2101      	movs	r1, #1
 800de4e:	201d      	movs	r0, #29
 800de50:	f002 fd80 	bl	8010954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800de54:	201d      	movs	r0, #29
 800de56:	f002 fdb1 	bl	80109bc <HAL_NVIC_EnableIRQ>
 800de5a:	e749      	b.n	800dcf0 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800de5c:	4a31      	ldr	r2, [pc, #196]	; (800df24 <HAL_UART_MspInit+0x268>)
 800de5e:	69d1      	ldr	r1, [r2, #28]
 800de60:	2080      	movs	r0, #128	; 0x80
 800de62:	0340      	lsls	r0, r0, #13
 800de64:	4301      	orrs	r1, r0
 800de66:	61d1      	str	r1, [r2, #28]
 800de68:	69d3      	ldr	r3, [r2, #28]
 800de6a:	4003      	ands	r3, r0
 800de6c:	9305      	str	r3, [sp, #20]
 800de6e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800de70:	2308      	movs	r3, #8
 800de72:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de74:	2402      	movs	r4, #2
 800de76:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de78:	2701      	movs	r7, #1
 800de7a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de7c:	2603      	movs	r6, #3
 800de7e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800de80:	2504      	movs	r5, #4
 800de82:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800de84:	a907      	add	r1, sp, #28
 800de86:	4828      	ldr	r0, [pc, #160]	; (800df28 <HAL_UART_MspInit+0x26c>)
 800de88:	f003 fd2e 	bl	80118e8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800de8c:	2310      	movs	r3, #16
 800de8e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de90:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de92:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de94:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800de96:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800de98:	a907      	add	r1, sp, #28
 800de9a:	4823      	ldr	r0, [pc, #140]	; (800df28 <HAL_UART_MspInit+0x26c>)
 800de9c:	f003 fd24 	bl	80118e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dea0:	2200      	movs	r2, #0
 800dea2:	2101      	movs	r1, #1
 800dea4:	201d      	movs	r0, #29
 800dea6:	f002 fd55 	bl	8010954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800deaa:	201d      	movs	r0, #29
 800deac:	f002 fd86 	bl	80109bc <HAL_NVIC_EnableIRQ>
 800deb0:	e71e      	b.n	800dcf0 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800deb2:	4b1c      	ldr	r3, [pc, #112]	; (800df24 <HAL_UART_MspInit+0x268>)
 800deb4:	699a      	ldr	r2, [r3, #24]
 800deb6:	2420      	movs	r4, #32
 800deb8:	4322      	orrs	r2, r4
 800deba:	619a      	str	r2, [r3, #24]
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	4023      	ands	r3, r4
 800dec0:	9306      	str	r3, [sp, #24]
 800dec2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800dec4:	2310      	movs	r3, #16
 800dec6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dec8:	3b0e      	subs	r3, #14
 800deca:	4699      	mov	r9, r3
 800decc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dece:	2501      	movs	r5, #1
 800ded0:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ded2:	2703      	movs	r7, #3
 800ded4:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800ded6:	2605      	movs	r6, #5
 800ded8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800deda:	a907      	add	r1, sp, #28
 800dedc:	2090      	movs	r0, #144	; 0x90
 800dede:	05c0      	lsls	r0, r0, #23
 800dee0:	f003 fd02 	bl	80118e8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800dee4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dee6:	464b      	mov	r3, r9
 800dee8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800deea:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800deec:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800deee:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800def0:	a907      	add	r1, sp, #28
 800def2:	2090      	movs	r0, #144	; 0x90
 800def4:	05c0      	lsls	r0, r0, #23
 800def6:	f003 fcf7 	bl	80118e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800defa:	2200      	movs	r2, #0
 800defc:	2101      	movs	r1, #1
 800defe:	201d      	movs	r0, #29
 800df00:	f002 fd28 	bl	8010954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800df04:	201d      	movs	r0, #29
 800df06:	f002 fd59 	bl	80109bc <HAL_NVIC_EnableIRQ>
}
 800df0a:	e6f1      	b.n	800dcf0 <HAL_UART_MspInit+0x34>
 800df0c:	40013800 	.word	0x40013800
 800df10:	40004400 	.word	0x40004400
 800df14:	40004800 	.word	0x40004800
 800df18:	40004c00 	.word	0x40004c00
 800df1c:	40005000 	.word	0x40005000
 800df20:	40011400 	.word	0x40011400
 800df24:	40021000 	.word	0x40021000
 800df28:	48000400 	.word	0x48000400

0800df2c <writePxMutex>:
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout, uint32_t portTimeout)
{
 800df2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df2e:	b083      	sub	sp, #12
 800df30:	0004      	movs	r4, r0
 800df32:	000d      	movs	r5, r1
 800df34:	0016      	movs	r6, r2
 800df36:	9301      	str	r3, [sp, #4]
	HAL_StatusTypeDef result = HAL_ERROR;
	
	if (GetUart(port) != NULL) {
 800df38:	f7f6 fd4e 	bl	80049d8 <GetUart>
	HAL_StatusTypeDef result = HAL_ERROR;
 800df3c:	2701      	movs	r7, #1
	if (GetUart(port) != NULL) {
 800df3e:	2800      	cmp	r0, #0
 800df40:	d018      	beq.n	800df74 <writePxMutex+0x48>
		/*/ Wait for the semaphore to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df42:	00a3      	lsls	r3, r4, #2
 800df44:	4a0d      	ldr	r2, [pc, #52]	; (800df7c <writePxMutex+0x50>)
 800df46:	5898      	ldr	r0, [r3, r2]
 800df48:	9901      	ldr	r1, [sp, #4]
 800df4a:	f000 fcdb 	bl	800e904 <osSemaphoreWait>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d110      	bne.n	800df74 <writePxMutex+0x48>
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800df52:	0020      	movs	r0, r4
 800df54:	f7f6 fd40 	bl	80049d8 <GetUart>
 800df58:	9b08      	ldr	r3, [sp, #32]
 800df5a:	0032      	movs	r2, r6
 800df5c:	0029      	movs	r1, r5
 800df5e:	f005 fd05 	bl	801396c <HAL_UART_Transmit>
 800df62:	1e07      	subs	r7, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800df64:	d001      	beq.n	800df6a <writePxMutex+0x3e>
 800df66:	2803      	cmp	r0, #3
 800df68:	d1f3      	bne.n	800df52 <writePxMutex+0x26>
			}
			/* Give back the semaphore. */
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800df6a:	00a4      	lsls	r4, r4, #2
 800df6c:	4b03      	ldr	r3, [pc, #12]	; (800df7c <writePxMutex+0x50>)
 800df6e:	58e0      	ldr	r0, [r4, r3]
 800df70:	f000 fcf4 	bl	800e95c <osSemaphoreRelease>
		}
	}
	
	return result;
}
 800df74:	0038      	movs	r0, r7
 800df76:	b003      	add	sp, #12
 800df78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df7a:	46c0      	nop			; (mov r8, r8)
 800df7c:	20006af0 	.word	0x20006af0

0800df80 <writePxITMutex>:
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxITMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800df80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df82:	0004      	movs	r4, r0
 800df84:	000e      	movs	r6, r1
 800df86:	0017      	movs	r7, r2
 800df88:	001d      	movs	r5, r3
	HAL_StatusTypeDef result = HAL_ERROR; 

	if (GetUart(port) != NULL) {	
 800df8a:	f7f6 fd25 	bl	80049d8 <GetUart>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800df8e:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800df90:	2800      	cmp	r0, #0
 800df92:	d008      	beq.n	800dfa6 <writePxITMutex+0x26>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800df94:	00a3      	lsls	r3, r4, #2
 800df96:	4a09      	ldr	r2, [pc, #36]	; (800dfbc <writePxITMutex+0x3c>)
 800df98:	5898      	ldr	r0, [r3, r2]
 800df9a:	0029      	movs	r1, r5
 800df9c:	f000 fcb2 	bl	800e904 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dfa0:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d001      	beq.n	800dfaa <writePxITMutex+0x2a>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800dfa6:	0018      	movs	r0, r3
 800dfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800dfaa:	0020      	movs	r0, r4
 800dfac:	f7f6 fd14 	bl	80049d8 <GetUart>
 800dfb0:	003a      	movs	r2, r7
 800dfb2:	0031      	movs	r1, r6
 800dfb4:	f005 f944 	bl	8013240 <HAL_UART_Transmit_IT>
 800dfb8:	0003      	movs	r3, r0
 800dfba:	e7f4      	b.n	800dfa6 <writePxITMutex+0x26>
 800dfbc:	20006af0 	.word	0x20006af0

0800dfc0 <writePxDMAMutex>:

/* --- Non-blocking (DMA-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxDMAMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800dfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	0004      	movs	r4, r0
 800dfc6:	000f      	movs	r7, r1
 800dfc8:	9201      	str	r2, [sp, #4]
 800dfca:	001e      	movs	r6, r3
	HAL_StatusTypeDef result = HAL_ERROR; 
	UART_HandleTypeDef* hUart = GetUart(port);
 800dfcc:	f7f6 fd04 	bl	80049d8 <GetUart>
 800dfd0:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dfd2:	2301      	movs	r3, #1

	if (hUart != NULL) {	
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d008      	beq.n	800dfea <writePxDMAMutex+0x2a>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dfd8:	00a4      	lsls	r4, r4, #2
 800dfda:	4b0a      	ldr	r3, [pc, #40]	; (800e004 <writePxDMAMutex+0x44>)
 800dfdc:	58e0      	ldr	r0, [r4, r3]
 800dfde:	0031      	movs	r1, r6
 800dfe0:	f000 fc90 	bl	800e904 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dfe4:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d002      	beq.n	800dff0 <writePxDMAMutex+0x30>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800dfea:	0018      	movs	r0, r3
 800dfec:	b003      	add	sp, #12
 800dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800dff0:	0028      	movs	r0, r5
 800dff2:	f7ff fb7b 	bl	800d6ec <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800dff6:	9a01      	ldr	r2, [sp, #4]
 800dff8:	0039      	movs	r1, r7
 800dffa:	0028      	movs	r0, r5
 800dffc:	f005 f9cc 	bl	8013398 <HAL_UART_Transmit_DMA>
 800e000:	0003      	movs	r3, r0
 800e002:	e7f2      	b.n	800dfea <writePxDMAMutex+0x2a>
 800e004:	20006af0 	.word	0x20006af0

0800e008 <UpdateBaudrate>:

/* --- Update baudrate for this port --- 
*/
BOS_Status UpdateBaudrate(uint8_t port, uint32_t baudrate)
{
 800e008:	b510      	push	{r4, lr}
 800e00a:	000c      	movs	r4, r1
	BOS_Status result = BOS_OK; 
	UART_HandleTypeDef *huart = GetUart(port);
 800e00c:	f7f6 fce4 	bl	80049d8 <GetUart>

	huart->Init.BaudRate = baudrate;
 800e010:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e012:	f005 fd51 	bl	8013ab8 <HAL_UART_Init>
	
	return result;
}
 800e016:	2000      	movs	r0, #0
 800e018:	bd10      	pop	{r4, pc}
	...

0800e01c <Reset_Handler>:
 800e01c:	4816      	ldr	r0, [pc, #88]	; (800e078 <LoopForever+0x4>)
 800e01e:	4685      	mov	sp, r0
 800e020:	2100      	movs	r1, #0
 800e022:	e003      	b.n	800e02c <LoopCopyDataInit>

0800e024 <CopyDataInit>:
 800e024:	4b15      	ldr	r3, [pc, #84]	; (800e07c <LoopForever+0x8>)
 800e026:	585b      	ldr	r3, [r3, r1]
 800e028:	5043      	str	r3, [r0, r1]
 800e02a:	3104      	adds	r1, #4

0800e02c <LoopCopyDataInit>:
 800e02c:	4814      	ldr	r0, [pc, #80]	; (800e080 <LoopForever+0xc>)
 800e02e:	4b15      	ldr	r3, [pc, #84]	; (800e084 <LoopForever+0x10>)
 800e030:	1842      	adds	r2, r0, r1
 800e032:	429a      	cmp	r2, r3
 800e034:	d3f6      	bcc.n	800e024 <CopyDataInit>
 800e036:	4a14      	ldr	r2, [pc, #80]	; (800e088 <LoopForever+0x14>)
 800e038:	e002      	b.n	800e040 <LoopFillZerobss>

0800e03a <FillZerobss>:
 800e03a:	2300      	movs	r3, #0
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	3204      	adds	r2, #4

0800e040 <LoopFillZerobss>:
 800e040:	4b12      	ldr	r3, [pc, #72]	; (800e08c <LoopForever+0x18>)
 800e042:	429a      	cmp	r2, r3
 800e044:	d3f9      	bcc.n	800e03a <FillZerobss>
 800e046:	4812      	ldr	r0, [pc, #72]	; (800e090 <LoopForever+0x1c>)
 800e048:	4912      	ldr	r1, [pc, #72]	; (800e094 <LoopForever+0x20>)
 800e04a:	6802      	ldr	r2, [r0, #0]
 800e04c:	6000      	str	r0, [r0, #0]
 800e04e:	428a      	cmp	r2, r1
 800e050:	d005      	beq.n	800e05e <Reboot_Loader>
 800e052:	f000 f82b 	bl	800e0ac <SystemInit>
 800e056:	f005 fea3 	bl	8013da0 <__libc_init_array>
 800e05a:	f005 fe82 	bl	8013d62 <main>

0800e05e <Reboot_Loader>:
 800e05e:	480e      	ldr	r0, [pc, #56]	; (800e098 <LoopForever+0x24>)
 800e060:	490e      	ldr	r1, [pc, #56]	; (800e09c <LoopForever+0x28>)
 800e062:	6001      	str	r1, [r0, #0]
 800e064:	480e      	ldr	r0, [pc, #56]	; (800e0a0 <LoopForever+0x2c>)
 800e066:	490d      	ldr	r1, [pc, #52]	; (800e09c <LoopForever+0x28>)
 800e068:	6001      	str	r1, [r0, #0]
 800e06a:	480e      	ldr	r0, [pc, #56]	; (800e0a4 <LoopForever+0x30>)
 800e06c:	6801      	ldr	r1, [r0, #0]
 800e06e:	468d      	mov	sp, r1
 800e070:	6840      	ldr	r0, [r0, #4]
 800e072:	4700      	bx	r0

0800e074 <LoopForever>:
 800e074:	e7fe      	b.n	800e074 <LoopForever>
 800e076:	0000      	.short	0x0000
 800e078:	20008000 	.word	0x20008000
 800e07c:	0801bd60 	.word	0x0801bd60
 800e080:	20000000 	.word	0x20000000
 800e084:	20000aa0 	.word	0x20000aa0
 800e088:	20000aa0 	.word	0x20000aa0
 800e08c:	20006e98 	.word	0x20006e98
 800e090:	20007ff0 	.word	0x20007ff0
 800e094:	deadbeef 	.word	0xdeadbeef
 800e098:	40021018 	.word	0x40021018
 800e09c:	00000001 	.word	0x00000001
 800e0a0:	40010000 	.word	0x40010000
 800e0a4:	1fffd800 	.word	0x1fffd800

0800e0a8 <ADC1_COMP_IRQHandler>:
 800e0a8:	e7fe      	b.n	800e0a8 <ADC1_COMP_IRQHandler>
	...

0800e0ac <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e0ac:	4b11      	ldr	r3, [pc, #68]	; (800e0f4 <SystemInit+0x48>)
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	430a      	orrs	r2, r1
 800e0b4:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e0b6:	685a      	ldr	r2, [r3, #4]
 800e0b8:	480f      	ldr	r0, [pc, #60]	; (800e0f8 <SystemInit+0x4c>)
 800e0ba:	4002      	ands	r2, r0
 800e0bc:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	480e      	ldr	r0, [pc, #56]	; (800e0fc <SystemInit+0x50>)
 800e0c2:	4002      	ands	r2, r0
 800e0c4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	480d      	ldr	r0, [pc, #52]	; (800e100 <SystemInit+0x54>)
 800e0ca:	4002      	ands	r2, r0
 800e0cc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e0ce:	685a      	ldr	r2, [r3, #4]
 800e0d0:	480c      	ldr	r0, [pc, #48]	; (800e104 <SystemInit+0x58>)
 800e0d2:	4002      	ands	r2, r0
 800e0d4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d8:	200f      	movs	r0, #15
 800e0da:	4382      	bics	r2, r0
 800e0dc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e0de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0e0:	4809      	ldr	r0, [pc, #36]	; (800e108 <SystemInit+0x5c>)
 800e0e2:	4002      	ands	r2, r0
 800e0e4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e0e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0e8:	438a      	bics	r2, r1
 800e0ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	609a      	str	r2, [r3, #8]

}
 800e0f0:	4770      	bx	lr
 800e0f2:	46c0      	nop			; (mov r8, r8)
 800e0f4:	40021000 	.word	0x40021000
 800e0f8:	08ffb80c 	.word	0x08ffb80c
 800e0fc:	fef6ffff 	.word	0xfef6ffff
 800e100:	fffbffff 	.word	0xfffbffff
 800e104:	ffc0ffff 	.word	0xffc0ffff
 800e108:	fff0feac 	.word	0xfff0feac

0800e10c <LSM303AGR_MAG_WriteReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM303AGR_MAG_WriteReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 800e10c:	b510      	push	{r4, lr}

  if (LSM303AGR_MAG_I2C_Write(handle, Reg, Bufp, len))
 800e10e:	f7ff fc27 	bl	800d960 <LSM303AGR_MAG_I2C_Write>
 800e112:	4243      	negs	r3, r0
 800e114:	4158      	adcs	r0, r3
 800e116:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e118:	bd10      	pop	{r4, pc}

0800e11a <LSM303AGR_MAG_ReadReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM303AGR_MAG_ReadReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 800e11a:	b510      	push	{r4, lr}

  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e11c:	f7ff fc31 	bl	800d982 <LSM303AGR_MAG_I2C_Read>
 800e120:	4243      	negs	r3, r0
 800e122:	4158      	adcs	r0, r3
 800e124:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e126:	bd10      	pop	{r4, pc}

0800e128 <LSM303AGR_MAG_R_WHO_AM_I>:
* Input          : Pointer to u8_t
* Output         : Status of WHO_AM_I
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM303AGR_MAG_R_WHO_AM_I(void *handle, u8_t *value)
{
 800e128:	b510      	push	{r4, lr}
 800e12a:	000a      	movs	r2, r1
  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_WHO_AM_I_REG, (u8_t *)value, 1) )
 800e12c:	2301      	movs	r3, #1
 800e12e:	214f      	movs	r1, #79	; 0x4f
 800e130:	f7ff fff3 	bl	800e11a <LSM303AGR_MAG_ReadReg>
 800e134:	1e43      	subs	r3, r0, #1
 800e136:	4198      	sbcs	r0, r3
 800e138:	b2c0      	uxtb	r0, r0

  *value &= LSM303AGR_MAG_WHO_AM_I_MASK; //coerce
  *value = *value >> LSM303AGR_MAG_WHO_AM_I_POSITION; //mask

  return MEMS_SUCCESS;
}
 800e13a:	bd10      	pop	{r4, pc}

0800e13c <LSM303AGR_MAG_W_BDU>:
* Input          : LSM303AGR_MAG_BDU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_BDU(void *handle, LSM303AGR_MAG_BDU_t newValue)
{
 800e13c:	b530      	push	{r4, r5, lr}
 800e13e:	b083      	sub	sp, #12
 800e140:	0004      	movs	r4, r0
 800e142:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e144:	2301      	movs	r3, #1
 800e146:	466a      	mov	r2, sp
 800e148:	3207      	adds	r2, #7
 800e14a:	2162      	movs	r1, #98	; 0x62
 800e14c:	f7ff ffe5 	bl	800e11a <LSM303AGR_MAG_ReadReg>
 800e150:	2800      	cmp	r0, #0
 800e152:	d101      	bne.n	800e158 <LSM303AGR_MAG_W_BDU+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e154:	b003      	add	sp, #12
 800e156:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e158:	466b      	mov	r3, sp
 800e15a:	1dda      	adds	r2, r3, #7
  value &= ~LSM303AGR_MAG_BDU_MASK;
 800e15c:	7813      	ldrb	r3, [r2, #0]
 800e15e:	2110      	movs	r1, #16
 800e160:	438b      	bics	r3, r1
  value |= newValue;
 800e162:	431d      	orrs	r5, r3
 800e164:	7015      	strb	r5, [r2, #0]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e166:	2301      	movs	r3, #1
 800e168:	3152      	adds	r1, #82	; 0x52
 800e16a:	0020      	movs	r0, r4
 800e16c:	f7ff ffce 	bl	800e10c <LSM303AGR_MAG_WriteReg>
 800e170:	1e43      	subs	r3, r0, #1
 800e172:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e174:	b2c0      	uxtb	r0, r0
 800e176:	e7ed      	b.n	800e154 <LSM303AGR_MAG_W_BDU+0x18>

0800e178 <LSM303AGR_MAG_W_MD>:
* Input          : LSM303AGR_MAG_MD_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_MD(void *handle, LSM303AGR_MAG_MD_t newValue)
{
 800e178:	b530      	push	{r4, r5, lr}
 800e17a:	b083      	sub	sp, #12
 800e17c:	0004      	movs	r4, r0
 800e17e:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e180:	2301      	movs	r3, #1
 800e182:	466a      	mov	r2, sp
 800e184:	3207      	adds	r2, #7
 800e186:	2160      	movs	r1, #96	; 0x60
 800e188:	f7ff ffc7 	bl	800e11a <LSM303AGR_MAG_ReadReg>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	d101      	bne.n	800e194 <LSM303AGR_MAG_W_MD+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e190:	b003      	add	sp, #12
 800e192:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e194:	466b      	mov	r3, sp
 800e196:	1dda      	adds	r2, r3, #7
  value &= ~LSM303AGR_MAG_MD_MASK;
 800e198:	7813      	ldrb	r3, [r2, #0]
 800e19a:	2103      	movs	r1, #3
 800e19c:	438b      	bics	r3, r1
  value |= newValue;
 800e19e:	431d      	orrs	r5, r3
 800e1a0:	7015      	strb	r5, [r2, #0]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	315d      	adds	r1, #93	; 0x5d
 800e1a6:	0020      	movs	r0, r4
 800e1a8:	f7ff ffb0 	bl	800e10c <LSM303AGR_MAG_WriteReg>
 800e1ac:	1e43      	subs	r3, r0, #1
 800e1ae:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e1b0:	b2c0      	uxtb	r0, r0
 800e1b2:	e7ed      	b.n	800e190 <LSM303AGR_MAG_W_MD+0x18>

0800e1b4 <LSM303AGR_MAG_Get_Raw_Magnetic>:
* Input          : pointer to [u8_t]
* Output         : Magnetic buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM303AGR_MAG_Get_Raw_Magnetic(void *handle, u8_t *buff)
{
 800e1b4:	b510      	push	{r4, lr}
 800e1b6:	000a      	movs	r2, r1
  if( !LSM303AGR_MAG_ReadReg( handle, LSM303AGR_MAG_OUTX_L_REG, buff, 6 ) )
 800e1b8:	2306      	movs	r3, #6
 800e1ba:	2168      	movs	r1, #104	; 0x68
 800e1bc:	f7ff ffad 	bl	800e11a <LSM303AGR_MAG_ReadReg>
 800e1c0:	1e43      	subs	r3, r0, #1
 800e1c2:	4198      	sbcs	r0, r3
 800e1c4:	b2c0      	uxtb	r0, r0
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e1c6:	bd10      	pop	{r4, pc}

0800e1c8 <LSM303AGR_MAG_W_ODR>:
* Input          : LSM303AGR_MAG_ODR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_ODR(void *handle, LSM303AGR_MAG_ODR_t newValue)
{
 800e1c8:	b530      	push	{r4, r5, lr}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	0004      	movs	r4, r0
 800e1ce:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	466a      	mov	r2, sp
 800e1d4:	3207      	adds	r2, #7
 800e1d6:	2160      	movs	r1, #96	; 0x60
 800e1d8:	f7ff ff9f 	bl	800e11a <LSM303AGR_MAG_ReadReg>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d101      	bne.n	800e1e4 <LSM303AGR_MAG_W_ODR+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e1e0:	b003      	add	sp, #12
 800e1e2:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e1e4:	466b      	mov	r3, sp
 800e1e6:	1dda      	adds	r2, r3, #7
  value &= ~LSM303AGR_MAG_ODR_MASK;
 800e1e8:	7813      	ldrb	r3, [r2, #0]
 800e1ea:	210c      	movs	r1, #12
 800e1ec:	438b      	bics	r3, r1
  value |= newValue;
 800e1ee:	431d      	orrs	r5, r3
 800e1f0:	7015      	strb	r5, [r2, #0]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	3154      	adds	r1, #84	; 0x54
 800e1f6:	0020      	movs	r0, r4
 800e1f8:	f7ff ff88 	bl	800e10c <LSM303AGR_MAG_WriteReg>
 800e1fc:	1e43      	subs	r3, r0, #1
 800e1fe:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e200:	b2c0      	uxtb	r0, r0
 800e202:	e7ed      	b.n	800e1e0 <LSM303AGR_MAG_W_ODR+0x18>

0800e204 <LSM303AGR_MAG_W_ST>:
* Input          : LSM303AGR_MAG_ST_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_ST(void *handle, LSM303AGR_MAG_ST_t newValue)
{
 800e204:	b530      	push	{r4, r5, lr}
 800e206:	b083      	sub	sp, #12
 800e208:	0004      	movs	r4, r0
 800e20a:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e20c:	2301      	movs	r3, #1
 800e20e:	466a      	mov	r2, sp
 800e210:	3207      	adds	r2, #7
 800e212:	2162      	movs	r1, #98	; 0x62
 800e214:	f7ff ff81 	bl	800e11a <LSM303AGR_MAG_ReadReg>
 800e218:	2800      	cmp	r0, #0
 800e21a:	d101      	bne.n	800e220 <LSM303AGR_MAG_W_ST+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e21c:	b003      	add	sp, #12
 800e21e:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e220:	466b      	mov	r3, sp
 800e222:	1dda      	adds	r2, r3, #7
  value &= ~LSM303AGR_MAG_ST_MASK;
 800e224:	7813      	ldrb	r3, [r2, #0]
 800e226:	2102      	movs	r1, #2
 800e228:	438b      	bics	r3, r1
  value |= newValue;
 800e22a:	431d      	orrs	r5, r3
 800e22c:	7015      	strb	r5, [r2, #0]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e22e:	2301      	movs	r3, #1
 800e230:	3160      	adds	r1, #96	; 0x60
 800e232:	0020      	movs	r0, r4
 800e234:	f7ff ff6a 	bl	800e10c <LSM303AGR_MAG_WriteReg>
 800e238:	1e43      	subs	r3, r0, #1
 800e23a:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e23c:	b2c0      	uxtb	r0, r0
 800e23e:	e7ed      	b.n	800e21c <LSM303AGR_MAG_W_ST+0x18>

0800e240 <LSM6DS3_ACC_GYRO_WriteReg>:
/* Private functions ---------------------------------------------------------*/

/************** Generic Function  *******************/

status_t LSM6DS3_ACC_GYRO_WriteReg(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800e240:	b510      	push	{r4, lr}

  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800e242:	f7ff fb6b 	bl	800d91c <LSM6DS3_I2C_Write>
 800e246:	4243      	negs	r3, r0
 800e248:	4158      	adcs	r0, r3
 800e24a:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e24c:	bd10      	pop	{r4, pc}

0800e24e <LSM6DS3_ACC_GYRO_ReadReg>:

status_t LSM6DS3_ACC_GYRO_ReadReg(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800e24e:	b510      	push	{r4, lr}

  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800e250:	f7ff fb75 	bl	800d93e <LSM6DS3_I2C_Read>
 800e254:	4243      	negs	r3, r0
 800e256:	4158      	adcs	r0, r3
 800e258:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e25a:	bd10      	pop	{r4, pc}

0800e25c <LSM6DS3_ACC_GYRO_R_WHO_AM_I>:
* Input          : Pointer to uint8_t
* Output         : Status of WHO_AM_I_BIT
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_WHO_AM_I(void *handle, uint8_t *value)
{
 800e25c:	b510      	push	{r4, lr}
 800e25e:	000a      	movs	r2, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WHO_AM_I_REG, (uint8_t *)value, 1) )
 800e260:	2301      	movs	r3, #1
 800e262:	210f      	movs	r1, #15
 800e264:	f7ff fff3 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e268:	1e43      	subs	r3, r0, #1
 800e26a:	4198      	sbcs	r0, r3
 800e26c:	b2c0      	uxtb	r0, r0

  *value &= LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_MASK; //coerce
  *value = *value >> LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_POSITION; //mask

  return MEMS_SUCCESS;
}
 800e26e:	bd10      	pop	{r4, pc}

0800e270 <LSM6DS3_ACC_GYRO_W_FS_XL>:
* Input          : LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t newValue)
{
 800e270:	b530      	push	{r4, r5, lr}
 800e272:	b083      	sub	sp, #12
 800e274:	0004      	movs	r4, r0
 800e276:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e278:	2301      	movs	r3, #1
 800e27a:	466a      	mov	r2, sp
 800e27c:	3207      	adds	r2, #7
 800e27e:	2110      	movs	r1, #16
 800e280:	f7ff ffe5 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e284:	2800      	cmp	r0, #0
 800e286:	d101      	bne.n	800e28c <LSM6DS3_ACC_GYRO_W_FS_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e288:	b003      	add	sp, #12
 800e28a:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e28c:	466b      	mov	r3, sp
 800e28e:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_FS_XL_MASK;
 800e290:	7813      	ldrb	r3, [r2, #0]
 800e292:	210c      	movs	r1, #12
 800e294:	438b      	bics	r3, r1
  value |= newValue;
 800e296:	431d      	orrs	r5, r3
 800e298:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e29a:	2301      	movs	r3, #1
 800e29c:	3104      	adds	r1, #4
 800e29e:	0020      	movs	r0, r4
 800e2a0:	f7ff ffce 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e2a4:	1e43      	subs	r3, r0, #1
 800e2a6:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e2a8:	b2c0      	uxtb	r0, r0
 800e2aa:	e7ed      	b.n	800e288 <LSM6DS3_ACC_GYRO_W_FS_XL+0x18>

0800e2ac <LSM6DS3_ACC_GYRO_R_FS_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : Status of FS_XL see LSM6DS3_ACC_GYRO_FS_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t *value)
{
 800e2ac:	b510      	push	{r4, lr}
 800e2ae:	000c      	movs	r4, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, (uint8_t *)value, 1) )
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	000a      	movs	r2, r1
 800e2b4:	2110      	movs	r1, #16
 800e2b6:	f7ff ffca 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d004      	beq.n	800e2c8 <LSM6DS3_ACC_GYRO_R_FS_XL+0x1c>
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_XL_MASK; //mask
 800e2be:	7822      	ldrb	r2, [r4, #0]
 800e2c0:	230c      	movs	r3, #12
 800e2c2:	4013      	ands	r3, r2
 800e2c4:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800e2c6:	2001      	movs	r0, #1
}
 800e2c8:	bd10      	pop	{r4, pc}

0800e2ca <LSM6DS3_ACC_GYRO_GetRawAccData>:
* Input          : pointer to [uint8_t]
* Output         : GetAccData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawAccData(void *handle, uint8_t *buff)
{
 800e2ca:	b570      	push	{r4, r5, r6, lr}
 800e2cc:	0004      	movs	r4, r0
 800e2ce:	000e      	movs	r6, r1
 800e2d0:	2528      	movs	r5, #40	; 0x28
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_XL + k, &buff[k], 1))
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	0032      	movs	r2, r6
 800e2d6:	0029      	movs	r1, r5
 800e2d8:	0020      	movs	r0, r4
 800e2da:	f7ff ffb8 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	d00e      	beq.n	800e300 <LSM6DS3_ACC_GYRO_GetRawAccData+0x36>
 800e2e2:	1c72      	adds	r2, r6, #1
 800e2e4:	1c69      	adds	r1, r5, #1
 800e2e6:	b2c9      	uxtb	r1, r1
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	0020      	movs	r0, r4
 800e2ec:	f7ff ffaf 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	d005      	beq.n	800e300 <LSM6DS3_ACC_GYRO_GetRawAccData+0x36>
 800e2f4:	3502      	adds	r5, #2
 800e2f6:	b2ed      	uxtb	r5, r5
 800e2f8:	3602      	adds	r6, #2
  for (i = 0; i < 3; i++ )
 800e2fa:	2d2e      	cmp	r5, #46	; 0x2e
 800e2fc:	d1e9      	bne.n	800e2d2 <LSM6DS3_ACC_GYRO_GetRawAccData+0x8>
        return MEMS_ERROR;
      k++;
    }
  }

  return MEMS_SUCCESS;
 800e2fe:	2001      	movs	r0, #1
}
 800e300:	bd70      	pop	{r4, r5, r6, pc}

0800e302 <LSM6DS3_ACC_GYRO_W_ODR_XL>:
* Input          : LSM6DS3_ACC_GYRO_ODR_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_XL(void *handle, LSM6DS3_ACC_GYRO_ODR_XL_t newValue)
{
 800e302:	b530      	push	{r4, r5, lr}
 800e304:	b083      	sub	sp, #12
 800e306:	0004      	movs	r4, r0
 800e308:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e30a:	2301      	movs	r3, #1
 800e30c:	466a      	mov	r2, sp
 800e30e:	3207      	adds	r2, #7
 800e310:	2110      	movs	r1, #16
 800e312:	f7ff ff9c 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e316:	2800      	cmp	r0, #0
 800e318:	d101      	bne.n	800e31e <LSM6DS3_ACC_GYRO_W_ODR_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e31a:	b003      	add	sp, #12
 800e31c:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e31e:	466b      	mov	r3, sp
 800e320:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_ODR_XL_MASK;
 800e322:	7811      	ldrb	r1, [r2, #0]
 800e324:	230f      	movs	r3, #15
 800e326:	400b      	ands	r3, r1
  value |= newValue;
 800e328:	431d      	orrs	r5, r3
 800e32a:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e32c:	2301      	movs	r3, #1
 800e32e:	2110      	movs	r1, #16
 800e330:	0020      	movs	r0, r4
 800e332:	f7ff ff85 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e336:	1e43      	subs	r3, r0, #1
 800e338:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e33a:	b2c0      	uxtb	r0, r0
 800e33c:	e7ed      	b.n	800e31a <LSM6DS3_ACC_GYRO_W_ODR_XL+0x18>

0800e33e <LSM6DS3_ACC_GYRO_W_FS_G>:
* Input          : LSM6DS3_ACC_GYRO_FS_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_G(void *handle, LSM6DS3_ACC_GYRO_FS_G_t newValue)
{
 800e33e:	b530      	push	{r4, r5, lr}
 800e340:	b083      	sub	sp, #12
 800e342:	0004      	movs	r4, r0
 800e344:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e346:	2301      	movs	r3, #1
 800e348:	466a      	mov	r2, sp
 800e34a:	3207      	adds	r2, #7
 800e34c:	2111      	movs	r1, #17
 800e34e:	f7ff ff7e 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e352:	2800      	cmp	r0, #0
 800e354:	d101      	bne.n	800e35a <LSM6DS3_ACC_GYRO_W_FS_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e356:	b003      	add	sp, #12
 800e358:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e35a:	466b      	mov	r3, sp
 800e35c:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_FS_G_MASK;
 800e35e:	7813      	ldrb	r3, [r2, #0]
 800e360:	210c      	movs	r1, #12
 800e362:	438b      	bics	r3, r1
  value |= newValue;
 800e364:	431d      	orrs	r5, r3
 800e366:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e368:	2301      	movs	r3, #1
 800e36a:	3105      	adds	r1, #5
 800e36c:	0020      	movs	r0, r4
 800e36e:	f7ff ff67 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e372:	1e43      	subs	r3, r0, #1
 800e374:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e376:	b2c0      	uxtb	r0, r0
 800e378:	e7ed      	b.n	800e356 <LSM6DS3_ACC_GYRO_W_FS_G+0x18>

0800e37a <LSM6DS3_ACC_GYRO_R_FS_G>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_G_t
* Output         : Status of FS_G see LSM6DS3_ACC_GYRO_FS_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_G(void *handle, LSM6DS3_ACC_GYRO_FS_G_t *value)
{
 800e37a:	b510      	push	{r4, lr}
 800e37c:	000c      	movs	r4, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, (uint8_t *)value, 1) )
 800e37e:	2301      	movs	r3, #1
 800e380:	000a      	movs	r2, r1
 800e382:	2111      	movs	r1, #17
 800e384:	f7ff ff63 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e388:	2800      	cmp	r0, #0
 800e38a:	d004      	beq.n	800e396 <LSM6DS3_ACC_GYRO_R_FS_G+0x1c>
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_G_MASK; //mask
 800e38c:	7822      	ldrb	r2, [r4, #0]
 800e38e:	230c      	movs	r3, #12
 800e390:	4013      	ands	r3, r2
 800e392:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800e394:	2001      	movs	r0, #1
}
 800e396:	bd10      	pop	{r4, pc}

0800e398 <LSM6DS3_ACC_GYRO_W_ODR_G>:
* Input          : LSM6DS3_ACC_GYRO_ODR_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_G(void *handle, LSM6DS3_ACC_GYRO_ODR_G_t newValue)
{
 800e398:	b530      	push	{r4, r5, lr}
 800e39a:	b083      	sub	sp, #12
 800e39c:	0004      	movs	r4, r0
 800e39e:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	466a      	mov	r2, sp
 800e3a4:	3207      	adds	r2, #7
 800e3a6:	2111      	movs	r1, #17
 800e3a8:	f7ff ff51 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d101      	bne.n	800e3b4 <LSM6DS3_ACC_GYRO_W_ODR_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e3b0:	b003      	add	sp, #12
 800e3b2:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e3b4:	466b      	mov	r3, sp
 800e3b6:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_ODR_G_MASK;
 800e3b8:	7811      	ldrb	r1, [r2, #0]
 800e3ba:	230f      	movs	r3, #15
 800e3bc:	400b      	ands	r3, r1
  value |= newValue;
 800e3be:	431d      	orrs	r5, r3
 800e3c0:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	2111      	movs	r1, #17
 800e3c6:	0020      	movs	r0, r4
 800e3c8:	f7ff ff3a 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e3cc:	1e43      	subs	r3, r0, #1
 800e3ce:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e3d0:	b2c0      	uxtb	r0, r0
 800e3d2:	e7ed      	b.n	800e3b0 <LSM6DS3_ACC_GYRO_W_ODR_G+0x18>

0800e3d4 <LSM6DS3_ACC_GYRO_GetRawGyroData>:
* Input          : pointer to [uint8_t]
* Output         : GetGyroData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawGyroData(void *handle, uint8_t *buff)
{
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	0004      	movs	r4, r0
 800e3d8:	000e      	movs	r6, r1
 800e3da:	2522      	movs	r5, #34	; 0x22
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_G + k, &buff[k], 1))
 800e3dc:	2301      	movs	r3, #1
 800e3de:	0032      	movs	r2, r6
 800e3e0:	0029      	movs	r1, r5
 800e3e2:	0020      	movs	r0, r4
 800e3e4:	f7ff ff33 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	d00e      	beq.n	800e40a <LSM6DS3_ACC_GYRO_GetRawGyroData+0x36>
 800e3ec:	1c72      	adds	r2, r6, #1
 800e3ee:	1c69      	adds	r1, r5, #1
 800e3f0:	b2c9      	uxtb	r1, r1
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	0020      	movs	r0, r4
 800e3f6:	f7ff ff2a 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	d005      	beq.n	800e40a <LSM6DS3_ACC_GYRO_GetRawGyroData+0x36>
 800e3fe:	3502      	adds	r5, #2
 800e400:	b2ed      	uxtb	r5, r5
 800e402:	3602      	adds	r6, #2
  for (i = 0; i < 3; i++ )
 800e404:	2d28      	cmp	r5, #40	; 0x28
 800e406:	d1e9      	bne.n	800e3dc <LSM6DS3_ACC_GYRO_GetRawGyroData+0x8>
        return MEMS_ERROR;
      k++;
    }
  }

  return MEMS_SUCCESS;
 800e408:	2001      	movs	r0, #1
}
 800e40a:	bd70      	pop	{r4, r5, r6, pc}

0800e40c <LSM6DS3_ACC_GYRO_W_BW_XL>:
* Input          : LSM6DS3_ACC_GYRO_BW_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_BW_XL(void *handle, LSM6DS3_ACC_GYRO_BW_XL_t newValue)
{
 800e40c:	b530      	push	{r4, r5, lr}
 800e40e:	b083      	sub	sp, #12
 800e410:	0004      	movs	r4, r0
 800e412:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e414:	2301      	movs	r3, #1
 800e416:	466a      	mov	r2, sp
 800e418:	3207      	adds	r2, #7
 800e41a:	2110      	movs	r1, #16
 800e41c:	f7ff ff17 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e420:	2800      	cmp	r0, #0
 800e422:	d101      	bne.n	800e428 <LSM6DS3_ACC_GYRO_W_BW_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e424:	b003      	add	sp, #12
 800e426:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e428:	466b      	mov	r3, sp
 800e42a:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_BW_XL_MASK;
 800e42c:	7813      	ldrb	r3, [r2, #0]
 800e42e:	2103      	movs	r1, #3
 800e430:	438b      	bics	r3, r1
  value |= newValue;
 800e432:	431d      	orrs	r5, r3
 800e434:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e436:	2301      	movs	r3, #1
 800e438:	310d      	adds	r1, #13
 800e43a:	0020      	movs	r0, r4
 800e43c:	f7ff ff00 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e440:	1e43      	subs	r3, r0, #1
 800e442:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e444:	b2c0      	uxtb	r0, r0
 800e446:	e7ed      	b.n	800e424 <LSM6DS3_ACC_GYRO_W_BW_XL+0x18>

0800e448 <LSM6DS3_ACC_GYRO_R_FS_125>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_125_t
* Output         : Status of FS_125 see LSM6DS3_ACC_GYRO_FS_125_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_125(void *handle, LSM6DS3_ACC_GYRO_FS_125_t *value)
{
 800e448:	b510      	push	{r4, lr}
 800e44a:	000c      	movs	r4, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, (uint8_t *)value, 1) )
 800e44c:	2301      	movs	r3, #1
 800e44e:	000a      	movs	r2, r1
 800e450:	2111      	movs	r1, #17
 800e452:	f7ff fefc 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e456:	2800      	cmp	r0, #0
 800e458:	d004      	beq.n	800e464 <LSM6DS3_ACC_GYRO_R_FS_125+0x1c>
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_125_MASK; //mask
 800e45a:	7822      	ldrb	r2, [r4, #0]
 800e45c:	2302      	movs	r3, #2
 800e45e:	4013      	ands	r3, r2
 800e460:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800e462:	2001      	movs	r0, #1
}
 800e464:	bd10      	pop	{r4, pc}

0800e466 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>:
* Input          : LSM6DS3_ACC_GYRO_FIFO_MODE_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FIFO_MODE(void *handle, LSM6DS3_ACC_GYRO_FIFO_MODE_t newValue)
{
 800e466:	b530      	push	{r4, r5, lr}
 800e468:	b083      	sub	sp, #12
 800e46a:	0004      	movs	r4, r0
 800e46c:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
 800e46e:	2301      	movs	r3, #1
 800e470:	466a      	mov	r2, sp
 800e472:	3207      	adds	r2, #7
 800e474:	210a      	movs	r1, #10
 800e476:	f7ff feea 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d101      	bne.n	800e482 <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e47e:	b003      	add	sp, #12
 800e480:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e482:	466b      	mov	r3, sp
 800e484:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_FIFO_MODE_MASK;
 800e486:	7813      	ldrb	r3, [r2, #0]
 800e488:	2107      	movs	r1, #7
 800e48a:	438b      	bics	r3, r1
  value |= newValue;
 800e48c:	431d      	orrs	r5, r3
 800e48e:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
 800e490:	2301      	movs	r3, #1
 800e492:	3103      	adds	r1, #3
 800e494:	0020      	movs	r0, r4
 800e496:	f7ff fed3 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e49a:	1e43      	subs	r3, r0, #1
 800e49c:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e49e:	b2c0      	uxtb	r0, r0
 800e4a0:	e7ed      	b.n	800e47e <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x18>

0800e4a2 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>:
* Input          : LSM6DS3_ACC_GYRO_IF_INC_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(void *handle, LSM6DS3_ACC_GYRO_IF_INC_t newValue)
{
 800e4a2:	b530      	push	{r4, r5, lr}
 800e4a4:	b083      	sub	sp, #12
 800e4a6:	0004      	movs	r4, r0
 800e4a8:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	466a      	mov	r2, sp
 800e4ae:	3207      	adds	r2, #7
 800e4b0:	2112      	movs	r1, #18
 800e4b2:	f7ff fecc 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d101      	bne.n	800e4be <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e4ba:	b003      	add	sp, #12
 800e4bc:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e4be:	466b      	mov	r3, sp
 800e4c0:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_IF_INC_MASK;
 800e4c2:	7813      	ldrb	r3, [r2, #0]
 800e4c4:	2104      	movs	r1, #4
 800e4c6:	438b      	bics	r3, r1
  value |= newValue;
 800e4c8:	431d      	orrs	r5, r3
 800e4ca:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	310e      	adds	r1, #14
 800e4d0:	0020      	movs	r0, r4
 800e4d2:	f7ff feb5 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e4d6:	1e43      	subs	r3, r0, #1
 800e4d8:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e4da:	b2c0      	uxtb	r0, r0
 800e4dc:	e7ed      	b.n	800e4ba <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x18>

0800e4de <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR>:
* Input          : LSM6DS3_ACC_GYRO_BW_SCAL_ODR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR(void *handle, LSM6DS3_ACC_GYRO_BW_SCAL_ODR_t newValue)
{
 800e4de:	b530      	push	{r4, r5, lr}
 800e4e0:	b083      	sub	sp, #12
 800e4e2:	0004      	movs	r4, r0
 800e4e4:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	466a      	mov	r2, sp
 800e4ea:	3207      	adds	r2, #7
 800e4ec:	2113      	movs	r1, #19
 800e4ee:	f7ff feae 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d101      	bne.n	800e4fa <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e4f6:	b003      	add	sp, #12
 800e4f8:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e4fa:	466b      	mov	r3, sp
 800e4fc:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_BW_SCAL_ODR_MASK;
 800e4fe:	7811      	ldrb	r1, [r2, #0]
 800e500:	237f      	movs	r3, #127	; 0x7f
 800e502:	400b      	ands	r3, r1
  value |= newValue;
 800e504:	431d      	orrs	r5, r3
 800e506:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
 800e508:	2301      	movs	r3, #1
 800e50a:	2113      	movs	r1, #19
 800e50c:	0020      	movs	r0, r4
 800e50e:	f7ff fe97 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e512:	1e43      	subs	r3, r0, #1
 800e514:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e516:	b2c0      	uxtb	r0, r0
 800e518:	e7ed      	b.n	800e4f6 <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR+0x18>

0800e51a <LSM6DS3_ACC_GYRO_W_XEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_XEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_XL(void *handle, LSM6DS3_ACC_GYRO_XEN_XL_t newValue)
{
 800e51a:	b530      	push	{r4, r5, lr}
 800e51c:	b083      	sub	sp, #12
 800e51e:	0004      	movs	r4, r0
 800e520:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e522:	2301      	movs	r3, #1
 800e524:	466a      	mov	r2, sp
 800e526:	3207      	adds	r2, #7
 800e528:	2118      	movs	r1, #24
 800e52a:	f7ff fe90 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e52e:	2800      	cmp	r0, #0
 800e530:	d101      	bne.n	800e536 <LSM6DS3_ACC_GYRO_W_XEN_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e532:	b003      	add	sp, #12
 800e534:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e536:	466b      	mov	r3, sp
 800e538:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_XEN_XL_MASK;
 800e53a:	7813      	ldrb	r3, [r2, #0]
 800e53c:	2108      	movs	r1, #8
 800e53e:	438b      	bics	r3, r1
  value |= newValue;
 800e540:	431d      	orrs	r5, r3
 800e542:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e544:	2301      	movs	r3, #1
 800e546:	3110      	adds	r1, #16
 800e548:	0020      	movs	r0, r4
 800e54a:	f7ff fe79 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e54e:	1e43      	subs	r3, r0, #1
 800e550:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e552:	b2c0      	uxtb	r0, r0
 800e554:	e7ed      	b.n	800e532 <LSM6DS3_ACC_GYRO_W_XEN_XL+0x18>

0800e556 <LSM6DS3_ACC_GYRO_W_YEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_YEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_XL(void *handle, LSM6DS3_ACC_GYRO_YEN_XL_t newValue)
{
 800e556:	b530      	push	{r4, r5, lr}
 800e558:	b083      	sub	sp, #12
 800e55a:	0004      	movs	r4, r0
 800e55c:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e55e:	2301      	movs	r3, #1
 800e560:	466a      	mov	r2, sp
 800e562:	3207      	adds	r2, #7
 800e564:	2118      	movs	r1, #24
 800e566:	f7ff fe72 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d101      	bne.n	800e572 <LSM6DS3_ACC_GYRO_W_YEN_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e56e:	b003      	add	sp, #12
 800e570:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e572:	466b      	mov	r3, sp
 800e574:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_YEN_XL_MASK;
 800e576:	7813      	ldrb	r3, [r2, #0]
 800e578:	2110      	movs	r1, #16
 800e57a:	438b      	bics	r3, r1
  value |= newValue;
 800e57c:	431d      	orrs	r5, r3
 800e57e:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e580:	2301      	movs	r3, #1
 800e582:	3108      	adds	r1, #8
 800e584:	0020      	movs	r0, r4
 800e586:	f7ff fe5b 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e58a:	1e43      	subs	r3, r0, #1
 800e58c:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e58e:	b2c0      	uxtb	r0, r0
 800e590:	e7ed      	b.n	800e56e <LSM6DS3_ACC_GYRO_W_YEN_XL+0x18>

0800e592 <LSM6DS3_ACC_GYRO_W_ZEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_XL(void *handle, LSM6DS3_ACC_GYRO_ZEN_XL_t newValue)
{
 800e592:	b530      	push	{r4, r5, lr}
 800e594:	b083      	sub	sp, #12
 800e596:	0004      	movs	r4, r0
 800e598:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e59a:	2301      	movs	r3, #1
 800e59c:	466a      	mov	r2, sp
 800e59e:	3207      	adds	r2, #7
 800e5a0:	2118      	movs	r1, #24
 800e5a2:	f7ff fe54 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d101      	bne.n	800e5ae <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e5aa:	b003      	add	sp, #12
 800e5ac:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e5ae:	466b      	mov	r3, sp
 800e5b0:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_ZEN_XL_MASK;
 800e5b2:	7813      	ldrb	r3, [r2, #0]
 800e5b4:	2120      	movs	r1, #32
 800e5b6:	438b      	bics	r3, r1
  value |= newValue;
 800e5b8:	431d      	orrs	r5, r3
 800e5ba:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e5bc:	2301      	movs	r3, #1
 800e5be:	3908      	subs	r1, #8
 800e5c0:	0020      	movs	r0, r4
 800e5c2:	f7ff fe3d 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e5c6:	1e43      	subs	r3, r0, #1
 800e5c8:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e5ca:	b2c0      	uxtb	r0, r0
 800e5cc:	e7ed      	b.n	800e5aa <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x18>

0800e5ce <LSM6DS3_ACC_GYRO_W_XEN_G>:
* Input          : LSM6DS3_ACC_GYRO_XEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_G(void *handle, LSM6DS3_ACC_GYRO_XEN_G_t newValue)
{
 800e5ce:	b530      	push	{r4, r5, lr}
 800e5d0:	b083      	sub	sp, #12
 800e5d2:	0004      	movs	r4, r0
 800e5d4:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	466a      	mov	r2, sp
 800e5da:	3207      	adds	r2, #7
 800e5dc:	2119      	movs	r1, #25
 800e5de:	f7ff fe36 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	d101      	bne.n	800e5ea <LSM6DS3_ACC_GYRO_W_XEN_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e5e6:	b003      	add	sp, #12
 800e5e8:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e5ea:	466b      	mov	r3, sp
 800e5ec:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_XEN_G_MASK;
 800e5ee:	7813      	ldrb	r3, [r2, #0]
 800e5f0:	2108      	movs	r1, #8
 800e5f2:	438b      	bics	r3, r1
  value |= newValue;
 800e5f4:	431d      	orrs	r5, r3
 800e5f6:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	3111      	adds	r1, #17
 800e5fc:	0020      	movs	r0, r4
 800e5fe:	f7ff fe1f 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e602:	1e43      	subs	r3, r0, #1
 800e604:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e606:	b2c0      	uxtb	r0, r0
 800e608:	e7ed      	b.n	800e5e6 <LSM6DS3_ACC_GYRO_W_XEN_G+0x18>

0800e60a <LSM6DS3_ACC_GYRO_W_YEN_G>:
* Input          : LSM6DS3_ACC_GYRO_YEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_G(void *handle, LSM6DS3_ACC_GYRO_YEN_G_t newValue)
{
 800e60a:	b530      	push	{r4, r5, lr}
 800e60c:	b083      	sub	sp, #12
 800e60e:	0004      	movs	r4, r0
 800e610:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e612:	2301      	movs	r3, #1
 800e614:	466a      	mov	r2, sp
 800e616:	3207      	adds	r2, #7
 800e618:	2119      	movs	r1, #25
 800e61a:	f7ff fe18 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d101      	bne.n	800e626 <LSM6DS3_ACC_GYRO_W_YEN_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e622:	b003      	add	sp, #12
 800e624:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e626:	466b      	mov	r3, sp
 800e628:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_YEN_G_MASK;
 800e62a:	7813      	ldrb	r3, [r2, #0]
 800e62c:	2110      	movs	r1, #16
 800e62e:	438b      	bics	r3, r1
  value |= newValue;
 800e630:	431d      	orrs	r5, r3
 800e632:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e634:	2301      	movs	r3, #1
 800e636:	3109      	adds	r1, #9
 800e638:	0020      	movs	r0, r4
 800e63a:	f7ff fe01 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e63e:	1e43      	subs	r3, r0, #1
 800e640:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e642:	b2c0      	uxtb	r0, r0
 800e644:	e7ed      	b.n	800e622 <LSM6DS3_ACC_GYRO_W_YEN_G+0x18>

0800e646 <LSM6DS3_ACC_GYRO_W_ZEN_G>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_G(void *handle, LSM6DS3_ACC_GYRO_ZEN_G_t newValue)
{
 800e646:	b530      	push	{r4, r5, lr}
 800e648:	b083      	sub	sp, #12
 800e64a:	0004      	movs	r4, r0
 800e64c:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e64e:	2301      	movs	r3, #1
 800e650:	466a      	mov	r2, sp
 800e652:	3207      	adds	r2, #7
 800e654:	2119      	movs	r1, #25
 800e656:	f7ff fdfa 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d101      	bne.n	800e662 <LSM6DS3_ACC_GYRO_W_ZEN_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e65e:	b003      	add	sp, #12
 800e660:	bd30      	pop	{r4, r5, pc}
  value |= newValue;
 800e662:	466b      	mov	r3, sp
 800e664:	1dda      	adds	r2, r3, #7
  value &= ~LSM6DS3_ACC_GYRO_ZEN_G_MASK;
 800e666:	7813      	ldrb	r3, [r2, #0]
 800e668:	2120      	movs	r1, #32
 800e66a:	438b      	bics	r3, r1
  value |= newValue;
 800e66c:	431d      	orrs	r5, r3
 800e66e:	7015      	strb	r5, [r2, #0]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e670:	2301      	movs	r3, #1
 800e672:	3907      	subs	r1, #7
 800e674:	0020      	movs	r0, r4
 800e676:	f7ff fde3 	bl	800e240 <LSM6DS3_ACC_GYRO_WriteReg>
 800e67a:	1e43      	subs	r3, r0, #1
 800e67c:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e67e:	b2c0      	uxtb	r0, r0
 800e680:	e7ed      	b.n	800e65e <LSM6DS3_ACC_GYRO_W_ZEN_G+0x18>

0800e682 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>:
* Input          : pointer to [uint8_t]
* Output         : GetFIFOData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_Get_GetFIFOData(void *handle, uint8_t *buff)
{
 800e682:	b570      	push	{r4, r5, r6, lr}
 800e684:	0005      	movs	r5, r0
 800e686:	000c      	movs	r4, r1
  k = 0;
  for (i = 0; i < 1; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_DATA_OUT_L + k, &buff[k], 1))
 800e688:	2301      	movs	r3, #1
 800e68a:	000a      	movs	r2, r1
 800e68c:	213e      	movs	r1, #62	; 0x3e
 800e68e:	f7ff fdde 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e692:	2800      	cmp	r0, #0
 800e694:	d008      	beq.n	800e6a8 <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x26>
 800e696:	1c62      	adds	r2, r4, #1
 800e698:	2301      	movs	r3, #1
 800e69a:	213f      	movs	r1, #63	; 0x3f
 800e69c:	0028      	movs	r0, r5
 800e69e:	f7ff fdd6 	bl	800e24e <LSM6DS3_ACC_GYRO_ReadReg>
 800e6a2:	1e43      	subs	r3, r0, #1
 800e6a4:	4198      	sbcs	r0, r3
        return MEMS_ERROR;
 800e6a6:	b2c0      	uxtb	r0, r0
      k++;
    }
  }

  return MEMS_SUCCESS;
}
 800e6a8:	bd70      	pop	{r4, r5, r6, pc}

0800e6aa <LSM6DS3_ACC_Get_Acceleration>:
{
 800e6aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ac:	b085      	sub	sp, #20
 800e6ae:	0004      	movs	r4, r0
 800e6b0:	000e      	movs	r6, r1
 800e6b2:	0017      	movs	r7, r2
  LSM6DS3_ACC_GYRO_R_FS_XL(handle, &fs);
 800e6b4:	ab02      	add	r3, sp, #8
 800e6b6:	1ddd      	adds	r5, r3, #7
 800e6b8:	0029      	movs	r1, r5
 800e6ba:	f7ff fdf7 	bl	800e2ac <LSM6DS3_ACC_GYRO_R_FS_XL>
  switch(fs)
 800e6be:	782b      	ldrb	r3, [r5, #0]
 800e6c0:	2b04      	cmp	r3, #4
 800e6c2:	d05e      	beq.n	800e782 <LSM6DS3_ACC_Get_Acceleration+0xd8>
 800e6c4:	b2da      	uxtb	r2, r3
 800e6c6:	2a04      	cmp	r2, #4
 800e6c8:	d950      	bls.n	800e76c <LSM6DS3_ACC_Get_Acceleration+0xc2>
      sensitivity = LSM6DS3_ACC_Sensitivity_List[1];
 800e6ca:	217a      	movs	r1, #122	; 0x7a
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	9100      	str	r1, [sp, #0]
 800e6d0:	9201      	str	r2, [sp, #4]
  switch(fs)
 800e6d2:	2b08      	cmp	r3, #8
 800e6d4:	d005      	beq.n	800e6e2 <LSM6DS3_ACC_Get_Acceleration+0x38>
      sensitivity = LSM6DS3_ACC_Sensitivity_List[2];
 800e6d6:	21f4      	movs	r1, #244	; 0xf4
 800e6d8:	2200      	movs	r2, #0
 800e6da:	9100      	str	r1, [sp, #0]
 800e6dc:	9201      	str	r2, [sp, #4]
  switch(fs)
 800e6de:	2b0c      	cmp	r3, #12
 800e6e0:	d14a      	bne.n	800e778 <LSM6DS3_ACC_Get_Acceleration+0xce>
  if (from_fifo)
 800e6e2:	2f00      	cmp	r7, #0
 800e6e4:	d053      	beq.n	800e78e <LSM6DS3_ACC_Get_Acceleration+0xe4>
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800e6e6:	a902      	add	r1, sp, #8
 800e6e8:	0020      	movs	r0, r4
 800e6ea:	f7ff ffca 	bl	800e682 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800e6ee:	ab02      	add	r3, sp, #8
 800e6f0:	1c99      	adds	r1, r3, #2
 800e6f2:	0020      	movs	r0, r4
 800e6f4:	f7ff ffc5 	bl	800e682 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800e6f8:	a903      	add	r1, sp, #12
 800e6fa:	0020      	movs	r0, r4
 800e6fc:	f7ff ffc1 	bl	800e682 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
  buff[0] = (raw_data_tmp.i16bit[0] * sensitivity + 500) / 1000;
 800e700:	ab02      	add	r3, sp, #8
 800e702:	2000      	movs	r0, #0
 800e704:	5e18      	ldrsh	r0, [r3, r0]
 800e706:	17c1      	asrs	r1, r0, #31
 800e708:	9a00      	ldr	r2, [sp, #0]
 800e70a:	9b01      	ldr	r3, [sp, #4]
 800e70c:	f7f1 ff52 	bl	80005b4 <__aeabi_lmul>
 800e710:	24fa      	movs	r4, #250	; 0xfa
 800e712:	0064      	lsls	r4, r4, #1
 800e714:	2500      	movs	r5, #0
 800e716:	1900      	adds	r0, r0, r4
 800e718:	4169      	adcs	r1, r5
 800e71a:	22fa      	movs	r2, #250	; 0xfa
 800e71c:	0092      	lsls	r2, r2, #2
 800e71e:	2300      	movs	r3, #0
 800e720:	f7f1 ff04 	bl	800052c <__aeabi_ldivmod>
 800e724:	6030      	str	r0, [r6, #0]
  buff[1] = (raw_data_tmp.i16bit[1] * sensitivity + 500) / 1000;
 800e726:	ab02      	add	r3, sp, #8
 800e728:	2002      	movs	r0, #2
 800e72a:	5e18      	ldrsh	r0, [r3, r0]
 800e72c:	17c1      	asrs	r1, r0, #31
 800e72e:	9a00      	ldr	r2, [sp, #0]
 800e730:	9b01      	ldr	r3, [sp, #4]
 800e732:	f7f1 ff3f 	bl	80005b4 <__aeabi_lmul>
 800e736:	1900      	adds	r0, r0, r4
 800e738:	4169      	adcs	r1, r5
 800e73a:	22fa      	movs	r2, #250	; 0xfa
 800e73c:	0092      	lsls	r2, r2, #2
 800e73e:	2300      	movs	r3, #0
 800e740:	f7f1 fef4 	bl	800052c <__aeabi_ldivmod>
 800e744:	6070      	str	r0, [r6, #4]
  buff[2] = (raw_data_tmp.i16bit[2] * sensitivity + 500) / 1000;
 800e746:	ab02      	add	r3, sp, #8
 800e748:	2004      	movs	r0, #4
 800e74a:	5e18      	ldrsh	r0, [r3, r0]
 800e74c:	17c1      	asrs	r1, r0, #31
 800e74e:	9a00      	ldr	r2, [sp, #0]
 800e750:	9b01      	ldr	r3, [sp, #4]
 800e752:	f7f1 ff2f 	bl	80005b4 <__aeabi_lmul>
 800e756:	1900      	adds	r0, r0, r4
 800e758:	4169      	adcs	r1, r5
 800e75a:	22fa      	movs	r2, #250	; 0xfa
 800e75c:	0092      	lsls	r2, r2, #2
 800e75e:	2300      	movs	r3, #0
 800e760:	f7f1 fee4 	bl	800052c <__aeabi_ldivmod>
 800e764:	60b0      	str	r0, [r6, #8]
}
 800e766:	2001      	movs	r0, #1
 800e768:	b005      	add	sp, #20
 800e76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      sensitivity = LSM6DS3_ACC_Sensitivity_List[0];
 800e76c:	213d      	movs	r1, #61	; 0x3d
 800e76e:	2200      	movs	r2, #0
 800e770:	9100      	str	r1, [sp, #0]
 800e772:	9201      	str	r2, [sp, #4]
  switch(fs)
 800e774:	2b00      	cmp	r3, #0
 800e776:	d0b4      	beq.n	800e6e2 <LSM6DS3_ACC_Get_Acceleration+0x38>
  long long sensitivity = 0;
 800e778:	2200      	movs	r2, #0
 800e77a:	2300      	movs	r3, #0
 800e77c:	9200      	str	r2, [sp, #0]
 800e77e:	9301      	str	r3, [sp, #4]
 800e780:	e7af      	b.n	800e6e2 <LSM6DS3_ACC_Get_Acceleration+0x38>
      sensitivity = LSM6DS3_ACC_Sensitivity_List[3];
 800e782:	22f4      	movs	r2, #244	; 0xf4
 800e784:	0052      	lsls	r2, r2, #1
 800e786:	2300      	movs	r3, #0
 800e788:	9200      	str	r2, [sp, #0]
 800e78a:	9301      	str	r3, [sp, #4]
      break;
 800e78c:	e7a9      	b.n	800e6e2 <LSM6DS3_ACC_Get_Acceleration+0x38>
    LSM6DS3_ACC_GYRO_GetRawAccData(handle, raw_data_tmp.u8bit);
 800e78e:	a902      	add	r1, sp, #8
 800e790:	0020      	movs	r0, r4
 800e792:	f7ff fd9a 	bl	800e2ca <LSM6DS3_ACC_GYRO_GetRawAccData>
 800e796:	e7b3      	b.n	800e700 <LSM6DS3_ACC_Get_Acceleration+0x56>

0800e798 <LSM6DS3_ACC_Get_AngularRate>:
{
 800e798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e79a:	b085      	sub	sp, #20
 800e79c:	0004      	movs	r4, r0
 800e79e:	000e      	movs	r6, r1
 800e7a0:	0017      	movs	r7, r2
  LSM6DS3_ACC_GYRO_R_FS_125(handle, &fs_125);
 800e7a2:	ab02      	add	r3, sp, #8
 800e7a4:	1ddd      	adds	r5, r3, #7
 800e7a6:	0029      	movs	r1, r5
 800e7a8:	f7ff fe4e 	bl	800e448 <LSM6DS3_ACC_GYRO_R_FS_125>
  if (fs_125 == LSM6DS3_ACC_GYRO_FS_125_ENABLED)
 800e7ac:	782b      	ldrb	r3, [r5, #0]
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d149      	bne.n	800e846 <LSM6DS3_ACC_Get_AngularRate+0xae>
    sensitivity = LSM6DS3_GYRO_Sensitivity_List[0];
 800e7b2:	4a3d      	ldr	r2, [pc, #244]	; (800e8a8 <LSM6DS3_ACC_Get_AngularRate+0x110>)
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	9200      	str	r2, [sp, #0]
 800e7b8:	9301      	str	r3, [sp, #4]
  if (from_fifo)
 800e7ba:	2f00      	cmp	r7, #0
 800e7bc:	d100      	bne.n	800e7c0 <LSM6DS3_ACC_Get_AngularRate+0x28>
 800e7be:	e06d      	b.n	800e89c <LSM6DS3_ACC_Get_AngularRate+0x104>
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800e7c0:	a902      	add	r1, sp, #8
 800e7c2:	0020      	movs	r0, r4
 800e7c4:	f7ff ff5d 	bl	800e682 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800e7c8:	ab02      	add	r3, sp, #8
 800e7ca:	1c99      	adds	r1, r3, #2
 800e7cc:	0020      	movs	r0, r4
 800e7ce:	f7ff ff58 	bl	800e682 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800e7d2:	a903      	add	r1, sp, #12
 800e7d4:	0020      	movs	r0, r4
 800e7d6:	f7ff ff54 	bl	800e682 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
  buff[0] = (raw_data_tmp.i16bit[0] * sensitivity + 500) / 1000;
 800e7da:	ab02      	add	r3, sp, #8
 800e7dc:	2000      	movs	r0, #0
 800e7de:	5e18      	ldrsh	r0, [r3, r0]
 800e7e0:	17c1      	asrs	r1, r0, #31
 800e7e2:	9a00      	ldr	r2, [sp, #0]
 800e7e4:	9b01      	ldr	r3, [sp, #4]
 800e7e6:	f7f1 fee5 	bl	80005b4 <__aeabi_lmul>
 800e7ea:	24fa      	movs	r4, #250	; 0xfa
 800e7ec:	0064      	lsls	r4, r4, #1
 800e7ee:	2500      	movs	r5, #0
 800e7f0:	1900      	adds	r0, r0, r4
 800e7f2:	4169      	adcs	r1, r5
 800e7f4:	22fa      	movs	r2, #250	; 0xfa
 800e7f6:	0092      	lsls	r2, r2, #2
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	f7f1 fe97 	bl	800052c <__aeabi_ldivmod>
 800e7fe:	6030      	str	r0, [r6, #0]
  buff[1] = (raw_data_tmp.i16bit[1] * sensitivity + 500) / 1000;
 800e800:	ab02      	add	r3, sp, #8
 800e802:	2002      	movs	r0, #2
 800e804:	5e18      	ldrsh	r0, [r3, r0]
 800e806:	17c1      	asrs	r1, r0, #31
 800e808:	9a00      	ldr	r2, [sp, #0]
 800e80a:	9b01      	ldr	r3, [sp, #4]
 800e80c:	f7f1 fed2 	bl	80005b4 <__aeabi_lmul>
 800e810:	1900      	adds	r0, r0, r4
 800e812:	4169      	adcs	r1, r5
 800e814:	22fa      	movs	r2, #250	; 0xfa
 800e816:	0092      	lsls	r2, r2, #2
 800e818:	2300      	movs	r3, #0
 800e81a:	f7f1 fe87 	bl	800052c <__aeabi_ldivmod>
 800e81e:	6070      	str	r0, [r6, #4]
  buff[2] = (raw_data_tmp.i16bit[2] * sensitivity + 500) / 1000;
 800e820:	ab02      	add	r3, sp, #8
 800e822:	2004      	movs	r0, #4
 800e824:	5e18      	ldrsh	r0, [r3, r0]
 800e826:	17c1      	asrs	r1, r0, #31
 800e828:	9a00      	ldr	r2, [sp, #0]
 800e82a:	9b01      	ldr	r3, [sp, #4]
 800e82c:	f7f1 fec2 	bl	80005b4 <__aeabi_lmul>
 800e830:	1900      	adds	r0, r0, r4
 800e832:	4169      	adcs	r1, r5
 800e834:	22fa      	movs	r2, #250	; 0xfa
 800e836:	0092      	lsls	r2, r2, #2
 800e838:	2300      	movs	r3, #0
 800e83a:	f7f1 fe77 	bl	800052c <__aeabi_ldivmod>
 800e83e:	60b0      	str	r0, [r6, #8]
}
 800e840:	2001      	movs	r0, #1
 800e842:	b005      	add	sp, #20
 800e844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LSM6DS3_ACC_GYRO_R_FS_G(handle, &fs);
 800e846:	ab02      	add	r3, sp, #8
 800e848:	1d9d      	adds	r5, r3, #6
 800e84a:	0029      	movs	r1, r5
 800e84c:	0020      	movs	r0, r4
 800e84e:	f7ff fd94 	bl	800e37a <LSM6DS3_ACC_GYRO_R_FS_G>
    switch(fs)
 800e852:	782b      	ldrb	r3, [r5, #0]
 800e854:	2b04      	cmp	r3, #4
 800e856:	d012      	beq.n	800e87e <LSM6DS3_ACC_Get_AngularRate+0xe6>
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	2a04      	cmp	r2, #4
 800e85c:	d908      	bls.n	800e870 <LSM6DS3_ACC_Get_AngularRate+0xd8>
 800e85e:	2b08      	cmp	r3, #8
 800e860:	d012      	beq.n	800e888 <LSM6DS3_ACC_Get_AngularRate+0xf0>
 800e862:	2b0c      	cmp	r3, #12
 800e864:	d115      	bne.n	800e892 <LSM6DS3_ACC_Get_AngularRate+0xfa>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[4];
 800e866:	4a11      	ldr	r2, [pc, #68]	; (800e8ac <LSM6DS3_ACC_Get_AngularRate+0x114>)
 800e868:	2300      	movs	r3, #0
 800e86a:	9200      	str	r2, [sp, #0]
 800e86c:	9301      	str	r3, [sp, #4]
        break;
 800e86e:	e7a4      	b.n	800e7ba <LSM6DS3_ACC_Get_AngularRate+0x22>
    switch(fs)
 800e870:	2b00      	cmp	r3, #0
 800e872:	d10e      	bne.n	800e892 <LSM6DS3_ACC_Get_AngularRate+0xfa>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[1];
 800e874:	4a0e      	ldr	r2, [pc, #56]	; (800e8b0 <LSM6DS3_ACC_Get_AngularRate+0x118>)
 800e876:	2300      	movs	r3, #0
 800e878:	9200      	str	r2, [sp, #0]
 800e87a:	9301      	str	r3, [sp, #4]
 800e87c:	e79d      	b.n	800e7ba <LSM6DS3_ACC_Get_AngularRate+0x22>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[2];
 800e87e:	4a0d      	ldr	r2, [pc, #52]	; (800e8b4 <LSM6DS3_ACC_Get_AngularRate+0x11c>)
 800e880:	2300      	movs	r3, #0
 800e882:	9200      	str	r2, [sp, #0]
 800e884:	9301      	str	r3, [sp, #4]
        break;
 800e886:	e798      	b.n	800e7ba <LSM6DS3_ACC_Get_AngularRate+0x22>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[3];
 800e888:	4a0b      	ldr	r2, [pc, #44]	; (800e8b8 <LSM6DS3_ACC_Get_AngularRate+0x120>)
 800e88a:	2300      	movs	r3, #0
 800e88c:	9200      	str	r2, [sp, #0]
 800e88e:	9301      	str	r3, [sp, #4]
        break;
 800e890:	e793      	b.n	800e7ba <LSM6DS3_ACC_Get_AngularRate+0x22>
  long long sensitivity = 0;
 800e892:	2200      	movs	r2, #0
 800e894:	2300      	movs	r3, #0
 800e896:	9200      	str	r2, [sp, #0]
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	e78e      	b.n	800e7ba <LSM6DS3_ACC_Get_AngularRate+0x22>
    LSM6DS3_ACC_GYRO_GetRawGyroData(handle, raw_data_tmp.u8bit);
 800e89c:	a902      	add	r1, sp, #8
 800e89e:	0020      	movs	r0, r4
 800e8a0:	f7ff fd98 	bl	800e3d4 <LSM6DS3_ACC_GYRO_GetRawGyroData>
 800e8a4:	e799      	b.n	800e7da <LSM6DS3_ACC_Get_AngularRate+0x42>
 800e8a6:	46c0      	nop			; (mov r8, r8)
 800e8a8:	00001117 	.word	0x00001117
 800e8ac:	00011170 	.word	0x00011170
 800e8b0:	0000222e 	.word	0x0000222e
 800e8b4:	0000445c 	.word	0x0000445c
 800e8b8:	000088b8 	.word	0x000088b8

0800e8bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e8bc:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e8be:	f000 ff55 	bl	800f76c <vTaskStartScheduler>
  
  return osOK;
}
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	bd10      	pop	{r4, pc}

0800e8c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e8c6:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d100      	bne.n	800e8ce <osDelay+0x8>
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	f001 f889 	bl	800f9e4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	bd10      	pop	{r4, pc}

0800e8d6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e8d6:	b510      	push	{r4, lr}
 800e8d8:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e8da:	2901      	cmp	r1, #1
 800e8dc:	d005      	beq.n	800e8ea <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e8de:	2100      	movs	r1, #0
 800e8e0:	f000 faf6 	bl	800eed0 <xQueueCreateCountingSemaphore>
 800e8e4:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e8e6:	0020      	movs	r0, r4
 800e8e8:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e8ea:	2203      	movs	r2, #3
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	f000 fac8 	bl	800ee82 <xQueueGenericCreate>
 800e8f2:	1e04      	subs	r4, r0, #0
 800e8f4:	d0f7      	beq.n	800e8e6 <osSemaphoreCreate+0x10>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	f000 fafc 	bl	800eef8 <xQueueGenericSend>
 800e900:	e7f1      	b.n	800e8e6 <osSemaphoreCreate+0x10>
	...

0800e904 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e904:	b500      	push	{lr}
 800e906:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e908:	2300      	movs	r3, #0
 800e90a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d021      	beq.n	800e954 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e910:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e914:	2b00      	cmp	r3, #0
 800e916:	d010      	beq.n	800e93a <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e918:	aa01      	add	r2, sp, #4
 800e91a:	2100      	movs	r1, #0
 800e91c:	f000 fcae 	bl	800f27c <xQueueReceiveFromISR>
 800e920:	0003      	movs	r3, r0
      return osErrorOS;
 800e922:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e924:	2b01      	cmp	r3, #1
 800e926:	d113      	bne.n	800e950 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e928:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800e92a:	9b01      	ldr	r3, [sp, #4]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00f      	beq.n	800e950 <osSemaphoreWait+0x4c>
 800e930:	4b09      	ldr	r3, [pc, #36]	; (800e958 <osSemaphoreWait+0x54>)
 800e932:	2280      	movs	r2, #128	; 0x80
 800e934:	0552      	lsls	r2, r2, #21
 800e936:	601a      	str	r2, [r3, #0]
 800e938:	e00a      	b.n	800e950 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e93a:	2300      	movs	r3, #0
 800e93c:	000a      	movs	r2, r1
 800e93e:	2100      	movs	r1, #0
 800e940:	f000 fbf3 	bl	800f12a <xQueueGenericReceive>
  return osOK;
 800e944:	3801      	subs	r0, #1
 800e946:	1e43      	subs	r3, r0, #1
 800e948:	4198      	sbcs	r0, r3
 800e94a:	4240      	negs	r0, r0
 800e94c:	23ff      	movs	r3, #255	; 0xff
 800e94e:	4018      	ands	r0, r3
}
 800e950:	b003      	add	sp, #12
 800e952:	bd00      	pop	{pc}
    return osErrorParameter;
 800e954:	2080      	movs	r0, #128	; 0x80
 800e956:	e7fb      	b.n	800e950 <osSemaphoreWait+0x4c>
 800e958:	e000ed04 	.word	0xe000ed04

0800e95c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e95c:	b500      	push	{lr}
 800e95e:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e960:	2300      	movs	r3, #0
 800e962:	9301      	str	r3, [sp, #4]
 800e964:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00f      	beq.n	800e98c <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e96c:	a901      	add	r1, sp, #4
 800e96e:	f000 fba1 	bl	800f0b4 <xQueueGiveFromISR>
 800e972:	0003      	movs	r3, r0
      return osErrorOS;
 800e974:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e976:	2b01      	cmp	r3, #1
 800e978:	d114      	bne.n	800e9a4 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800e97a:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e97c:	9b01      	ldr	r3, [sp, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d010      	beq.n	800e9a4 <osSemaphoreRelease+0x48>
 800e982:	4b09      	ldr	r3, [pc, #36]	; (800e9a8 <osSemaphoreRelease+0x4c>)
 800e984:	2280      	movs	r2, #128	; 0x80
 800e986:	0552      	lsls	r2, r2, #21
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	e00b      	b.n	800e9a4 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e98c:	2300      	movs	r3, #0
 800e98e:	2200      	movs	r2, #0
 800e990:	2100      	movs	r1, #0
 800e992:	f000 fab1 	bl	800eef8 <xQueueGenericSend>
      result = osErrorOS;
 800e996:	3801      	subs	r0, #1
 800e998:	4243      	negs	r3, r0
 800e99a:	4158      	adcs	r0, r3
 800e99c:	4240      	negs	r0, r0
 800e99e:	23fe      	movs	r3, #254	; 0xfe
 800e9a0:	4398      	bics	r0, r3
 800e9a2:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e9a4:	b003      	add	sp, #12
 800e9a6:	bd00      	pop	{pc}
 800e9a8:	e000ed04 	.word	0xe000ed04

0800e9ac <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e9ac:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e9ae:	f001 fa0f 	bl	800fdd0 <xTaskGetSchedulerState>
 800e9b2:	2801      	cmp	r0, #1
 800e9b4:	d001      	beq.n	800e9ba <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800e9b6:	f001 fe85 	bl	80106c4 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e9ba:	bd10      	pop	{r4, pc}

0800e9bc <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e9bc:	b570      	push	{r4, r5, r6, lr}
 800e9be:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800e9c0:	d101      	bne.n	800e9c6 <FreeRTOS_CLIRegisterCommand+0xa>
 800e9c2:	b672      	cpsid	i
 800e9c4:	e7fe      	b.n	800e9c4 <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e9c6:	2008      	movs	r0, #8
 800e9c8:	f001 feb8 	bl	801073c <pvPortMalloc>
 800e9cc:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800e9ce:	d101      	bne.n	800e9d4 <FreeRTOS_CLIRegisterCommand+0x18>
 800e9d0:	b672      	cpsid	i
 800e9d2:	e7fe      	b.n	800e9d2 <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800e9d4:	f001 fe30 	bl	8010638 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e9d8:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e9de:	4b04      	ldr	r3, [pc, #16]	; (800e9f0 <FreeRTOS_CLIRegisterCommand+0x34>)
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e9e4:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e9e6:	f001 fe33 	bl	8010650 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800e9ea:	2001      	movs	r0, #1
 800e9ec:	bd70      	pop	{r4, r5, r6, pc}
 800e9ee:	46c0      	nop			; (mov r8, r8)
 800e9f0:	200000e0 	.word	0x200000e0

0800e9f4 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9f6:	46d6      	mov	lr, sl
 800e9f8:	b500      	push	{lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	9001      	str	r0, [sp, #4]
 800e9fe:	9102      	str	r1, [sp, #8]
 800ea00:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800ea02:	4b37      	ldr	r3, [pc, #220]	; (800eae0 <FreeRTOS_CLIProcessCommand+0xec>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00e      	beq.n	800ea28 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	9a01      	ldr	r2, [sp, #4]
 800ea10:	9903      	ldr	r1, [sp, #12]
 800ea12:	9802      	ldr	r0, [sp, #8]
 800ea14:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d102      	bne.n	800ea20 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800ea1a:	4b31      	ldr	r3, [pc, #196]	; (800eae0 <FreeRTOS_CLIProcessCommand+0xec>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800ea20:	b004      	add	sp, #16
 800ea22:	bc04      	pop	{r2}
 800ea24:	4692      	mov	sl, r2
 800ea26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ea28:	4d2e      	ldr	r5, [pc, #184]	; (800eae4 <FreeRTOS_CLIProcessCommand+0xf0>)
 800ea2a:	4a2d      	ldr	r2, [pc, #180]	; (800eae0 <FreeRTOS_CLIProcessCommand+0xec>)
 800ea2c:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ea2e:	3320      	adds	r3, #32
 800ea30:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ea32:	0017      	movs	r7, r2
 800ea34:	e00a      	b.n	800ea4c <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800ea36:	0002      	movs	r2, r0
 800ea38:	0021      	movs	r1, r4
 800ea3a:	9801      	ldr	r0, [sp, #4]
 800ea3c:	f005 feac 	bl	8014798 <strncmp>
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d00e      	beq.n	800ea62 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ea44:	686d      	ldr	r5, [r5, #4]
 800ea46:	603d      	str	r5, [r7, #0]
 800ea48:	2d00      	cmp	r5, #0
 800ea4a:	d012      	beq.n	800ea72 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800ea4c:	682e      	ldr	r6, [r5, #0]
 800ea4e:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800ea50:	0020      	movs	r0, r4
 800ea52:	f7f1 fb61 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ea56:	9b01      	ldr	r3, [sp, #4]
 800ea58:	5c1b      	ldrb	r3, [r3, r0]
 800ea5a:	4652      	mov	r2, sl
 800ea5c:	4393      	bics	r3, r2
 800ea5e:	d1f1      	bne.n	800ea44 <FreeRTOS_CLIProcessCommand+0x50>
 800ea60:	e7e9      	b.n	800ea36 <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800ea62:	200c      	movs	r0, #12
 800ea64:	5630      	ldrsb	r0, [r6, r0]
 800ea66:	2800      	cmp	r0, #0
 800ea68:	da0a      	bge.n	800ea80 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ea6a:	4b1d      	ldr	r3, [pc, #116]	; (800eae0 <FreeRTOS_CLIProcessCommand+0xec>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1cb      	bne.n	800ea0a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ea72:	9a03      	ldr	r2, [sp, #12]
 800ea74:	491c      	ldr	r1, [pc, #112]	; (800eae8 <FreeRTOS_CLIProcessCommand+0xf4>)
 800ea76:	9802      	ldr	r0, [sp, #8]
 800ea78:	f005 fe9f 	bl	80147ba <strncpy>
		xReturn = pdFALSE;
 800ea7c:	2000      	movs	r0, #0
	return xReturn;
 800ea7e:	e7cf      	b.n	800ea20 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800ea80:	9a01      	ldr	r2, [sp, #4]
 800ea82:	2300      	movs	r3, #0
 800ea84:	56d3      	ldrsb	r3, [r2, r3]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d027      	beq.n	800eada <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800ea8a:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800ea8c:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800ea8e:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800ea90:	2501      	movs	r5, #1
 800ea92:	e009      	b.n	800eaa8 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800ea94:	2901      	cmp	r1, #1
 800ea96:	d002      	beq.n	800ea9e <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800ea98:	3401      	adds	r4, #1
 800ea9a:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800ea9c:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800ea9e:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	56d3      	ldrsb	r3, [r2, r3]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d003      	beq.n	800eab0 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800eaa8:	2b20      	cmp	r3, #32
 800eaaa:	d0f3      	beq.n	800ea94 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800eaac:	0031      	movs	r1, r6
 800eaae:	e7f6      	b.n	800ea9e <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800eab0:	2901      	cmp	r1, #1
 800eab2:	d00f      	beq.n	800ead4 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800eab4:	4b0a      	ldr	r3, [pc, #40]	; (800eae0 <FreeRTOS_CLIProcessCommand+0xec>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d0da      	beq.n	800ea72 <FreeRTOS_CLIProcessCommand+0x7e>
 800eabc:	42a0      	cmp	r0, r4
 800eabe:	d0a4      	beq.n	800ea0a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800eac0:	9a03      	ldr	r2, [sp, #12]
 800eac2:	490a      	ldr	r1, [pc, #40]	; (800eaec <FreeRTOS_CLIProcessCommand+0xf8>)
 800eac4:	9802      	ldr	r0, [sp, #8]
 800eac6:	f005 fe78 	bl	80147ba <strncpy>
		pxCommand = NULL;
 800eaca:	4b05      	ldr	r3, [pc, #20]	; (800eae0 <FreeRTOS_CLIProcessCommand+0xec>)
 800eacc:	2200      	movs	r2, #0
 800eace:	601a      	str	r2, [r3, #0]
 800ead0:	2000      	movs	r0, #0
 800ead2:	e7a5      	b.n	800ea20 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800ead4:	3c01      	subs	r4, #1
 800ead6:	b264      	sxtb	r4, r4
 800ead8:	e7ec      	b.n	800eab4 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800eada:	2400      	movs	r4, #0
 800eadc:	e7ea      	b.n	800eab4 <FreeRTOS_CLIProcessCommand+0xc0>
 800eade:	46c0      	nop			; (mov r8, r8)
 800eae0:	20001d60 	.word	0x20001d60
 800eae4:	200000e4 	.word	0x200000e4
 800eae8:	0801b918 	.word	0x0801b918
 800eaec:	0801b8c0 	.word	0x0801b8c0

0800eaf0 <FreeRTOS_CLIGetOutputBuffer>:
}
 800eaf0:	4800      	ldr	r0, [pc, #0]	; (800eaf4 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800eaf2:	4770      	bx	lr
 800eaf4:	20001af8 	.word	0x20001af8

0800eaf8 <FreeRTOS_CLIGetParameter>:
{
 800eaf8:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800eafe:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800eb00:	2900      	cmp	r1, #0
 800eb02:	d10b      	bne.n	800eb1c <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800eb04:	2000      	movs	r0, #0
 800eb06:	e02a      	b.n	800eb5e <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800eb08:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	56c3      	ldrsb	r3, [r0, r3]
 800eb0e:	2b20      	cmp	r3, #32
 800eb10:	d0fa      	beq.n	800eb08 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d022      	beq.n	800eb5c <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800eb16:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800eb18:	42a1      	cmp	r1, r4
 800eb1a:	d00d      	beq.n	800eb38 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	56c3      	ldrsb	r3, [r0, r3]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d01f      	beq.n	800eb64 <FreeRTOS_CLIGetParameter+0x6c>
 800eb24:	2b20      	cmp	r3, #32
 800eb26:	d0ef      	beq.n	800eb08 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800eb28:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	56c3      	ldrsb	r3, [r0, r3]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d018      	beq.n	800eb64 <FreeRTOS_CLIGetParameter+0x6c>
 800eb32:	2b20      	cmp	r3, #32
 800eb34:	d1f8      	bne.n	800eb28 <FreeRTOS_CLIGetParameter+0x30>
 800eb36:	e7e7      	b.n	800eb08 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eb38:	7803      	ldrb	r3, [r0, #0]
 800eb3a:	2120      	movs	r1, #32
 800eb3c:	438b      	bics	r3, r1
 800eb3e:	d00f      	beq.n	800eb60 <FreeRTOS_CLIGetParameter+0x68>
 800eb40:	0004      	movs	r4, r0
 800eb42:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800eb44:	6813      	ldr	r3, [r2, #0]
 800eb46:	3301      	adds	r3, #1
 800eb48:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800eb4a:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eb4c:	7821      	ldrb	r1, [r4, #0]
 800eb4e:	43a9      	bics	r1, r5
 800eb50:	d1f8      	bne.n	800eb44 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800eb52:	1e5a      	subs	r2, r3, #1
 800eb54:	4193      	sbcs	r3, r2
 800eb56:	425b      	negs	r3, r3
 800eb58:	4018      	ands	r0, r3
 800eb5a:	e000      	b.n	800eb5e <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800eb5c:	2000      	movs	r0, #0
}
 800eb5e:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800eb60:	2000      	movs	r0, #0
 800eb62:	e7fc      	b.n	800eb5e <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800eb64:	2300      	movs	r3, #0
 800eb66:	56c3      	ldrsb	r3, [r0, r3]
 800eb68:	e7d3      	b.n	800eb12 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800eb6c <prvHelpCommand>:
{
 800eb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	0004      	movs	r4, r0
 800eb72:	000d      	movs	r5, r1
 800eb74:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800eb7a:	aa01      	add	r2, sp, #4
 800eb7c:	2101      	movs	r1, #1
 800eb7e:	f7ff ffbb 	bl	800eaf8 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d027      	beq.n	800ebd6 <prvHelpCommand+0x6a>
 800eb86:	2206      	movs	r2, #6
 800eb88:	4930      	ldr	r1, [pc, #192]	; (800ec4c <prvHelpCommand+0xe0>)
 800eb8a:	f005 fe05 	bl	8014798 <strncmp>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d149      	bne.n	800ec26 <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800eb92:	4b2f      	ldr	r3, [pc, #188]	; (800ec50 <prvHelpCommand+0xe4>)
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	2b07      	cmp	r3, #7
 800eb98:	d012      	beq.n	800ebc0 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800eb9a:	1c5f      	adds	r7, r3, #1
 800eb9c:	b2ff      	uxtb	r7, r7
 800eb9e:	4a2c      	ldr	r2, [pc, #176]	; (800ec50 <prvHelpCommand+0xe4>)
 800eba0:	7017      	strb	r7, [r2, #0]
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	4a2b      	ldr	r2, [pc, #172]	; (800ec54 <prvHelpCommand+0xe8>)
 800eba6:	5899      	ldr	r1, [r3, r2]
 800eba8:	002a      	movs	r2, r5
 800ebaa:	0020      	movs	r0, r4
 800ebac:	f005 fe05 	bl	80147ba <strncpy>
			xReturn = pdTRUE;
 800ebb0:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800ebb2:	2f07      	cmp	r7, #7
 800ebb4:	d137      	bne.n	800ec26 <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800ebb6:	4b26      	ldr	r3, [pc, #152]	; (800ec50 <prvHelpCommand+0xe4>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	701a      	strb	r2, [r3, #0]
 800ebbc:	2600      	movs	r6, #0
 800ebbe:	e032      	b.n	800ec26 <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ebc0:	4b23      	ldr	r3, [pc, #140]	; (800ec50 <prvHelpCommand+0xe4>)
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	701a      	strb	r2, [r3, #0]
 800ebc6:	4b23      	ldr	r3, [pc, #140]	; (800ec54 <prvHelpCommand+0xe8>)
 800ebc8:	6819      	ldr	r1, [r3, #0]
 800ebca:	002a      	movs	r2, r5
 800ebcc:	0020      	movs	r0, r4
 800ebce:	f005 fdf4 	bl	80147ba <strncpy>
			xReturn = pdTRUE;
 800ebd2:	2601      	movs	r6, #1
 800ebd4:	e027      	b.n	800ec26 <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800ebd6:	4b20      	ldr	r3, [pc, #128]	; (800ec58 <prvHelpCommand+0xec>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d026      	beq.n	800ec2c <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800ebde:	4b1f      	ldr	r3, [pc, #124]	; (800ec5c <prvHelpCommand+0xf0>)
 800ebe0:	781a      	ldrb	r2, [r3, #0]
 800ebe2:	4b1f      	ldr	r3, [pc, #124]	; (800ec60 <prvHelpCommand+0xf4>)
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d927      	bls.n	800ec3a <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800ebea:	002a      	movs	r2, r5
 800ebec:	3a08      	subs	r2, #8
 800ebee:	4b1a      	ldr	r3, [pc, #104]	; (800ec58 <prvHelpCommand+0xec>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	6859      	ldr	r1, [r3, #4]
 800ebf6:	0020      	movs	r0, r4
 800ebf8:	3008      	adds	r0, #8
 800ebfa:	f005 fdde 	bl	80147ba <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800ebfe:	1c60      	adds	r0, r4, #1
 800ec00:	4918      	ldr	r1, [pc, #96]	; (800ec64 <prvHelpCommand+0xf8>)
 800ec02:	f005 fdc1 	bl	8014788 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800ec06:	2328      	movs	r3, #40	; 0x28
 800ec08:	7023      	strb	r3, [r4, #0]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	71a3      	strb	r3, [r4, #6]
 800ec0e:	3b09      	subs	r3, #9
 800ec10:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800ec12:	4b11      	ldr	r3, [pc, #68]	; (800ec58 <prvHelpCommand+0xec>)
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	6856      	ldr	r6, [r2, #4]
 800ec18:	601e      	str	r6, [r3, #0]
		counter++;
 800ec1a:	4a10      	ldr	r2, [pc, #64]	; (800ec5c <prvHelpCommand+0xf0>)
 800ec1c:	7813      	ldrb	r3, [r2, #0]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800ec22:	1e73      	subs	r3, r6, #1
 800ec24:	419e      	sbcs	r6, r3
}
 800ec26:	0030      	movs	r0, r6
 800ec28:	b003      	add	sp, #12
 800ec2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800ec2c:	4b0a      	ldr	r3, [pc, #40]	; (800ec58 <prvHelpCommand+0xec>)
 800ec2e:	4a0e      	ldr	r2, [pc, #56]	; (800ec68 <prvHelpCommand+0xfc>)
 800ec30:	601a      	str	r2, [r3, #0]
			counter = 1;
 800ec32:	4b0a      	ldr	r3, [pc, #40]	; (800ec5c <prvHelpCommand+0xf0>)
 800ec34:	2201      	movs	r2, #1
 800ec36:	701a      	strb	r2, [r3, #0]
 800ec38:	e7d1      	b.n	800ebde <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800ec3a:	4b07      	ldr	r3, [pc, #28]	; (800ec58 <prvHelpCommand+0xec>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	6859      	ldr	r1, [r3, #4]
 800ec42:	002a      	movs	r2, r5
 800ec44:	0020      	movs	r0, r4
 800ec46:	f005 fdb8 	bl	80147ba <strncpy>
 800ec4a:	e7e2      	b.n	800ec12 <prvHelpCommand+0xa6>
 800ec4c:	08019380 	.word	0x08019380
 800ec50:	20001d68 	.word	0x20001d68
 800ec54:	20000020 	.word	0x20000020
 800ec58:	20001d64 	.word	0x20001d64
 800ec5c:	20001d5c 	.word	0x20001d5c
 800ec60:	20006958 	.word	0x20006958
 800ec64:	08019808 	.word	0x08019808
 800ec68:	200000e4 	.word	0x200000e4

0800ec6c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec6c:	0003      	movs	r3, r0
 800ec6e:	3308      	adds	r3, #8
 800ec70:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ec72:	2201      	movs	r2, #1
 800ec74:	4252      	negs	r2, r2
 800ec76:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec78:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec7a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ec80:	4770      	bx	lr

0800ec82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ec82:	2300      	movs	r3, #0
 800ec84:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec86:	4770      	bx	lr

0800ec88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ec88:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ec8a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ec8c:	689a      	ldr	r2, [r3, #8]
 800ec8e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ec90:	689a      	ldr	r2, [r3, #8]
 800ec92:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ec94:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ec96:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ec98:	6803      	ldr	r3, [r0, #0]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	6003      	str	r3, [r0, #0]
}
 800ec9e:	4770      	bx	lr

0800eca0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eca0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eca2:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eca4:	0002      	movs	r2, r0
 800eca6:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800eca8:	1c63      	adds	r3, r4, #1
 800ecaa:	d102      	bne.n	800ecb2 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800ecac:	6902      	ldr	r2, [r0, #16]
 800ecae:	e004      	b.n	800ecba <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecb0:	001a      	movs	r2, r3
 800ecb2:	6853      	ldr	r3, [r2, #4]
 800ecb4:	681d      	ldr	r5, [r3, #0]
 800ecb6:	42a5      	cmp	r5, r4
 800ecb8:	d9fa      	bls.n	800ecb0 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ecba:	6853      	ldr	r3, [r2, #4]
 800ecbc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ecbe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ecc0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ecc2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ecc4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ecc6:	6803      	ldr	r3, [r0, #0]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	6003      	str	r3, [r0, #0]
}
 800eccc:	bd30      	pop	{r4, r5, pc}

0800ecce <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ecce:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ecd0:	6842      	ldr	r2, [r0, #4]
 800ecd2:	6881      	ldr	r1, [r0, #8]
 800ecd4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ecd6:	6882      	ldr	r2, [r0, #8]
 800ecd8:	6841      	ldr	r1, [r0, #4]
 800ecda:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ecdc:	685a      	ldr	r2, [r3, #4]
 800ecde:	4282      	cmp	r2, r0
 800ece0:	d005      	beq.n	800ecee <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ece2:	2200      	movs	r2, #0
 800ece4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	1e50      	subs	r0, r2, #1
 800ecea:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800ecec:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ecee:	6882      	ldr	r2, [r0, #8]
 800ecf0:	605a      	str	r2, [r3, #4]
 800ecf2:	e7f6      	b.n	800ece2 <uxListRemove+0x14>

0800ecf4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ecf4:	b570      	push	{r4, r5, r6, lr}
 800ecf6:	0004      	movs	r4, r0
 800ecf8:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ecfa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ecfc:	2a00      	cmp	r2, #0
 800ecfe:	d10d      	bne.n	800ed1c <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800ed00:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed02:	6823      	ldr	r3, [r4, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d003      	beq.n	800ed10 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ed08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800ed0e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ed10:	6860      	ldr	r0, [r4, #4]
 800ed12:	f001 f8ab 	bl	800fe6c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ed16:	2300      	movs	r3, #0
 800ed18:	6063      	str	r3, [r4, #4]
 800ed1a:	e7f5      	b.n	800ed08 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ed1c:	2d00      	cmp	r5, #0
 800ed1e:	d10e      	bne.n	800ed3e <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ed20:	6880      	ldr	r0, [r0, #8]
 800ed22:	f005 fac0 	bl	80142a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ed26:	68a3      	ldr	r3, [r4, #8]
 800ed28:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ed2a:	4694      	mov	ip, r2
 800ed2c:	4463      	add	r3, ip
 800ed2e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800ed30:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed32:	6862      	ldr	r2, [r4, #4]
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d3e7      	bcc.n	800ed08 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed38:	6823      	ldr	r3, [r4, #0]
 800ed3a:	60a3      	str	r3, [r4, #8]
 800ed3c:	e7e4      	b.n	800ed08 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed3e:	68c0      	ldr	r0, [r0, #12]
 800ed40:	f005 fab1 	bl	80142a6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ed44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed46:	425a      	negs	r2, r3
 800ed48:	68e3      	ldr	r3, [r4, #12]
 800ed4a:	189b      	adds	r3, r3, r2
 800ed4c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed4e:	6821      	ldr	r1, [r4, #0]
 800ed50:	428b      	cmp	r3, r1
 800ed52:	d203      	bcs.n	800ed5c <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ed54:	6863      	ldr	r3, [r4, #4]
 800ed56:	469c      	mov	ip, r3
 800ed58:	4462      	add	r2, ip
 800ed5a:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800ed5c:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800ed5e:	2d02      	cmp	r5, #2
 800ed60:	d1d2      	bne.n	800ed08 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d0cf      	beq.n	800ed08 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800ed68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ed6e:	e7cb      	b.n	800ed08 <prvCopyDataToQueue+0x14>

0800ed70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ed70:	b510      	push	{r4, lr}
 800ed72:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ed74:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ed76:	2a00      	cmp	r2, #0
 800ed78:	d00b      	beq.n	800ed92 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ed7a:	68c3      	ldr	r3, [r0, #12]
 800ed7c:	189b      	adds	r3, r3, r2
 800ed7e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ed80:	6841      	ldr	r1, [r0, #4]
 800ed82:	428b      	cmp	r3, r1
 800ed84:	d301      	bcc.n	800ed8a <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ed86:	6803      	ldr	r3, [r0, #0]
 800ed88:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ed8a:	68c1      	ldr	r1, [r0, #12]
 800ed8c:	0020      	movs	r0, r4
 800ed8e:	f005 fa8a 	bl	80142a6 <memcpy>
	}
}
 800ed92:	bd10      	pop	{r4, pc}

0800ed94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ed94:	b570      	push	{r4, r5, r6, lr}
 800ed96:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ed98:	f001 fc4e 	bl	8010638 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ed9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	dd04      	ble.n	800edac <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eda2:	0025      	movs	r5, r4
 800eda4:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eda6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d11f      	bne.n	800edec <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800edac:	2301      	movs	r3, #1
 800edae:	425b      	negs	r3, r3
 800edb0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800edb2:	f001 fc4d 	bl	8010650 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800edb6:	f001 fc3f 	bl	8010638 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800edba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	dd04      	ble.n	800edca <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edc0:	0025      	movs	r5, r4
 800edc2:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edc4:	6923      	ldr	r3, [r4, #16]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d121      	bne.n	800ee0e <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800edca:	2301      	movs	r3, #1
 800edcc:	425b      	negs	r3, r3
 800edce:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800edd0:	f001 fc3e 	bl	8010650 <vPortExitCritical>
}
 800edd4:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800edd6:	f000 fff5 	bl	800fdc4 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800edda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eddc:	3b01      	subs	r3, #1
 800edde:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ede0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	dde2      	ble.n	800edac <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ede6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d0df      	beq.n	800edac <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800edec:	0028      	movs	r0, r5
 800edee:	f000 ff67 	bl	800fcc0 <xTaskRemoveFromEventList>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d0f1      	beq.n	800edda <prvUnlockQueue+0x46>
 800edf6:	e7ee      	b.n	800edd6 <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800edf8:	f000 ffe4 	bl	800fdc4 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800edfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800edfe:	3b01      	subs	r3, #1
 800ee00:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ee02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	dde0      	ble.n	800edca <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee08:	6923      	ldr	r3, [r4, #16]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d0dd      	beq.n	800edca <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee0e:	0028      	movs	r0, r5
 800ee10:	f000 ff56 	bl	800fcc0 <xTaskRemoveFromEventList>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d0f1      	beq.n	800edfc <prvUnlockQueue+0x68>
 800ee18:	e7ee      	b.n	800edf8 <prvUnlockQueue+0x64>

0800ee1a <xQueueGenericReset>:
{
 800ee1a:	b570      	push	{r4, r5, r6, lr}
 800ee1c:	0004      	movs	r4, r0
 800ee1e:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d101      	bne.n	800ee28 <xQueueGenericReset+0xe>
 800ee24:	b672      	cpsid	i
 800ee26:	e7fe      	b.n	800ee26 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800ee28:	f001 fc06 	bl	8010638 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ee2c:	6822      	ldr	r2, [r4, #0]
 800ee2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ee30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ee32:	434b      	muls	r3, r1
 800ee34:	18d0      	adds	r0, r2, r3
 800ee36:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ee38:	2000      	movs	r0, #0
 800ee3a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee3c:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ee3e:	1a5b      	subs	r3, r3, r1
 800ee40:	18d3      	adds	r3, r2, r3
 800ee42:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800ee44:	2301      	movs	r3, #1
 800ee46:	425b      	negs	r3, r3
 800ee48:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800ee4a:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800ee4c:	2d00      	cmp	r5, #0
 800ee4e:	d10f      	bne.n	800ee70 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee50:	6923      	ldr	r3, [r4, #16]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d103      	bne.n	800ee5e <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800ee56:	f001 fbfb 	bl	8010650 <vPortExitCritical>
}
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ee5e:	0020      	movs	r0, r4
 800ee60:	3010      	adds	r0, #16
 800ee62:	f000 ff2d 	bl	800fcc0 <xTaskRemoveFromEventList>
 800ee66:	2801      	cmp	r0, #1
 800ee68:	d1f5      	bne.n	800ee56 <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800ee6a:	f001 fbd9 	bl	8010620 <vPortYield>
 800ee6e:	e7f2      	b.n	800ee56 <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ee70:	0020      	movs	r0, r4
 800ee72:	3010      	adds	r0, #16
 800ee74:	f7ff fefa 	bl	800ec6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ee78:	0020      	movs	r0, r4
 800ee7a:	3024      	adds	r0, #36	; 0x24
 800ee7c:	f7ff fef6 	bl	800ec6c <vListInitialise>
 800ee80:	e7e9      	b.n	800ee56 <xQueueGenericReset+0x3c>

0800ee82 <xQueueGenericCreate>:
{
 800ee82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee84:	0005      	movs	r5, r0
 800ee86:	000e      	movs	r6, r1
 800ee88:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d101      	bne.n	800ee92 <xQueueGenericCreate+0x10>
 800ee8e:	b672      	cpsid	i
 800ee90:	e7fe      	b.n	800ee90 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ee92:	2900      	cmp	r1, #0
 800ee94:	d00c      	beq.n	800eeb0 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee96:	0008      	movs	r0, r1
 800ee98:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ee9a:	3055      	adds	r0, #85	; 0x55
 800ee9c:	f001 fc4e 	bl	801073c <pvPortMalloc>
 800eea0:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800eea2:	d101      	bne.n	800eea8 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800eea4:	b672      	cpsid	i
 800eea6:	e7fe      	b.n	800eea6 <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800eea8:	0003      	movs	r3, r0
 800eeaa:	3354      	adds	r3, #84	; 0x54
 800eeac:	6003      	str	r3, [r0, #0]
 800eeae:	e005      	b.n	800eebc <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800eeb0:	2054      	movs	r0, #84	; 0x54
 800eeb2:	f001 fc43 	bl	801073c <pvPortMalloc>
 800eeb6:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800eeb8:	d0f4      	beq.n	800eea4 <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eeba:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800eebc:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800eebe:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eec0:	2101      	movs	r1, #1
 800eec2:	0020      	movs	r0, r4
 800eec4:	f7ff ffa9 	bl	800ee1a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800eec8:	2350      	movs	r3, #80	; 0x50
 800eeca:	54e7      	strb	r7, [r4, r3]
}
 800eecc:	0020      	movs	r0, r4
 800eece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eed0 <xQueueCreateCountingSemaphore>:
	{
 800eed0:	b510      	push	{r4, lr}
 800eed2:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800eed4:	2800      	cmp	r0, #0
 800eed6:	d101      	bne.n	800eedc <xQueueCreateCountingSemaphore+0xc>
 800eed8:	b672      	cpsid	i
 800eeda:	e7fe      	b.n	800eeda <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eedc:	4288      	cmp	r0, r1
 800eede:	d201      	bcs.n	800eee4 <xQueueCreateCountingSemaphore+0x14>
 800eee0:	b672      	cpsid	i
 800eee2:	e7fe      	b.n	800eee2 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eee4:	2202      	movs	r2, #2
 800eee6:	2100      	movs	r1, #0
 800eee8:	f7ff ffcb 	bl	800ee82 <xQueueGenericCreate>
		if( xHandle != NULL )
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d001      	beq.n	800eef4 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eef0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800eef2:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800eef4:	b672      	cpsid	i
 800eef6:	e7fe      	b.n	800eef6 <xQueueCreateCountingSemaphore+0x26>

0800eef8 <xQueueGenericSend>:
{
 800eef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eefa:	46ce      	mov	lr, r9
 800eefc:	b500      	push	{lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	0004      	movs	r4, r0
 800ef02:	9100      	str	r1, [sp, #0]
 800ef04:	9201      	str	r2, [sp, #4]
 800ef06:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d007      	beq.n	800ef1c <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef0c:	9b00      	ldr	r3, [sp, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d106      	bne.n	800ef20 <xQueueGenericSend+0x28>
 800ef12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d003      	beq.n	800ef20 <xQueueGenericSend+0x28>
 800ef18:	b672      	cpsid	i
 800ef1a:	e7fe      	b.n	800ef1a <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800ef1c:	b672      	cpsid	i
 800ef1e:	e7fe      	b.n	800ef1e <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef20:	2d02      	cmp	r5, #2
 800ef22:	d104      	bne.n	800ef2e <xQueueGenericSend+0x36>
 800ef24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d001      	beq.n	800ef2e <xQueueGenericSend+0x36>
 800ef2a:	b672      	cpsid	i
 800ef2c:	e7fe      	b.n	800ef2c <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef2e:	f000 ff4f 	bl	800fdd0 <xTaskGetSchedulerState>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d104      	bne.n	800ef40 <xQueueGenericSend+0x48>
 800ef36:	9b01      	ldr	r3, [sp, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d004      	beq.n	800ef46 <xQueueGenericSend+0x4e>
 800ef3c:	b672      	cpsid	i
 800ef3e:	e7fe      	b.n	800ef3e <xQueueGenericSend+0x46>
 800ef40:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800ef42:	2700      	movs	r7, #0
 800ef44:	e02f      	b.n	800efa6 <xQueueGenericSend+0xae>
 800ef46:	2600      	movs	r6, #0
 800ef48:	e7fb      	b.n	800ef42 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef4a:	002a      	movs	r2, r5
 800ef4c:	9900      	ldr	r1, [sp, #0]
 800ef4e:	0020      	movs	r0, r4
 800ef50:	f7ff fed0 	bl	800ecf4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d104      	bne.n	800ef64 <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	d00a      	beq.n	800ef74 <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800ef5e:	f001 fb5f 	bl	8010620 <vPortYield>
 800ef62:	e007      	b.n	800ef74 <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800ef64:	0020      	movs	r0, r4
 800ef66:	3024      	adds	r0, #36	; 0x24
 800ef68:	f000 feaa 	bl	800fcc0 <xTaskRemoveFromEventList>
 800ef6c:	2801      	cmp	r0, #1
 800ef6e:	d101      	bne.n	800ef74 <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800ef70:	f001 fb56 	bl	8010620 <vPortYield>
				taskEXIT_CRITICAL();
 800ef74:	f001 fb6c 	bl	8010650 <vPortExitCritical>
				return pdPASS;
 800ef78:	2001      	movs	r0, #1
}
 800ef7a:	b004      	add	sp, #16
 800ef7c:	bc04      	pop	{r2}
 800ef7e:	4691      	mov	r9, r2
 800ef80:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800ef82:	f001 fb65 	bl	8010650 <vPortExitCritical>
					return errQUEUE_FULL;
 800ef86:	2000      	movs	r0, #0
 800ef88:	e7f7      	b.n	800ef7a <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800ef8a:	a802      	add	r0, sp, #8
 800ef8c:	f000 fed8 	bl	800fd40 <vTaskSetTimeOutState>
 800ef90:	e016      	b.n	800efc0 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800ef92:	6467      	str	r7, [r4, #68]	; 0x44
 800ef94:	e01d      	b.n	800efd2 <xQueueGenericSend+0xda>
 800ef96:	64a7      	str	r7, [r4, #72]	; 0x48
 800ef98:	e01e      	b.n	800efd8 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800ef9a:	0020      	movs	r0, r4
 800ef9c:	f7ff fefa 	bl	800ed94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efa0:	f000 fcb0 	bl	800f904 <xTaskResumeAll>
 800efa4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800efa6:	f001 fb47 	bl	8010638 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800efaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800efae:	4293      	cmp	r3, r2
 800efb0:	d3cb      	bcc.n	800ef4a <xQueueGenericSend+0x52>
 800efb2:	2d02      	cmp	r5, #2
 800efb4:	d0c9      	beq.n	800ef4a <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800efb6:	9b01      	ldr	r3, [sp, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d0e2      	beq.n	800ef82 <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800efbc:	2e00      	cmp	r6, #0
 800efbe:	d0e4      	beq.n	800ef8a <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800efc0:	f001 fb46 	bl	8010650 <vPortExitCritical>
		vTaskSuspendAll();
 800efc4:	f000 fbfe 	bl	800f7c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800efc8:	f001 fb36 	bl	8010638 <vPortEnterCritical>
 800efcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800efce:	3301      	adds	r3, #1
 800efd0:	d0df      	beq.n	800ef92 <xQueueGenericSend+0x9a>
 800efd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800efd4:	3301      	adds	r3, #1
 800efd6:	d0de      	beq.n	800ef96 <xQueueGenericSend+0x9e>
 800efd8:	f001 fb3a 	bl	8010650 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efdc:	a901      	add	r1, sp, #4
 800efde:	a802      	add	r0, sp, #8
 800efe0:	f000 febe 	bl	800fd60 <xTaskCheckForTimeOut>
 800efe4:	2800      	cmp	r0, #0
 800efe6:	d117      	bne.n	800f018 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800efe8:	f001 fb26 	bl	8010638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800efec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efee:	4699      	mov	r9, r3
 800eff0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800eff2:	f001 fb2d 	bl	8010650 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eff6:	45b1      	cmp	r9, r6
 800eff8:	d1cf      	bne.n	800ef9a <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800effa:	0020      	movs	r0, r4
 800effc:	3010      	adds	r0, #16
 800effe:	9901      	ldr	r1, [sp, #4]
 800f000:	f000 fe20 	bl	800fc44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f004:	0020      	movs	r0, r4
 800f006:	f7ff fec5 	bl	800ed94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f00a:	f000 fc7b 	bl	800f904 <xTaskResumeAll>
 800f00e:	2800      	cmp	r0, #0
 800f010:	d1c8      	bne.n	800efa4 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800f012:	f001 fb05 	bl	8010620 <vPortYield>
 800f016:	e7c5      	b.n	800efa4 <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800f018:	0020      	movs	r0, r4
 800f01a:	f7ff febb 	bl	800ed94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f01e:	f000 fc71 	bl	800f904 <xTaskResumeAll>
			return errQUEUE_FULL;
 800f022:	2000      	movs	r0, #0
 800f024:	e7a9      	b.n	800ef7a <xQueueGenericSend+0x82>

0800f026 <xQueueGenericSendFromISR>:
{
 800f026:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f028:	b083      	sub	sp, #12
 800f02a:	0004      	movs	r4, r0
 800f02c:	000d      	movs	r5, r1
 800f02e:	0016      	movs	r6, r2
 800f030:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800f032:	2800      	cmp	r0, #0
 800f034:	d006      	beq.n	800f044 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f036:	2900      	cmp	r1, #0
 800f038:	d106      	bne.n	800f048 <xQueueGenericSendFromISR+0x22>
 800f03a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d003      	beq.n	800f048 <xQueueGenericSendFromISR+0x22>
 800f040:	b672      	cpsid	i
 800f042:	e7fe      	b.n	800f042 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800f044:	b672      	cpsid	i
 800f046:	e7fe      	b.n	800f046 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f048:	2f02      	cmp	r7, #2
 800f04a:	d12a      	bne.n	800f0a2 <xQueueGenericSendFromISR+0x7c>
 800f04c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d011      	beq.n	800f076 <xQueueGenericSendFromISR+0x50>
 800f052:	b672      	cpsid	i
 800f054:	e7fe      	b.n	800f054 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800f056:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d01b      	beq.n	800f096 <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f05e:	0020      	movs	r0, r4
 800f060:	3024      	adds	r0, #36	; 0x24
 800f062:	f000 fe2d 	bl	800fcc0 <xTaskRemoveFromEventList>
 800f066:	2800      	cmp	r0, #0
 800f068:	d015      	beq.n	800f096 <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800f06a:	2e00      	cmp	r6, #0
 800f06c:	d001      	beq.n	800f072 <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f06e:	6035      	str	r5, [r6, #0]
 800f070:	e011      	b.n	800f096 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800f072:	2501      	movs	r5, #1
 800f074:	e00f      	b.n	800f096 <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f076:	f001 fafb 	bl	8010670 <ulSetInterruptMaskFromISR>
 800f07a:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f07c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f07e:	003a      	movs	r2, r7
 800f080:	0029      	movs	r1, r5
 800f082:	0020      	movs	r0, r4
 800f084:	f7ff fe36 	bl	800ecf4 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f088:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f08a:	3301      	adds	r3, #1
 800f08c:	d0e3      	beq.n	800f056 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800f08e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f090:	3301      	adds	r3, #1
 800f092:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f094:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f096:	9801      	ldr	r0, [sp, #4]
 800f098:	f001 faef 	bl	801067a <vClearInterruptMaskFromISR>
}
 800f09c:	0028      	movs	r0, r5
 800f09e:	b003      	add	sp, #12
 800f0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0a2:	f001 fae5 	bl	8010670 <ulSetInterruptMaskFromISR>
 800f0a6:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f0aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d3e6      	bcc.n	800f07e <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800f0b0:	2500      	movs	r5, #0
 800f0b2:	e7f0      	b.n	800f096 <xQueueGenericSendFromISR+0x70>

0800f0b4 <xQueueGiveFromISR>:
{
 800f0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b6:	0004      	movs	r4, r0
 800f0b8:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	d004      	beq.n	800f0c8 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f0be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d003      	beq.n	800f0cc <xQueueGiveFromISR+0x18>
 800f0c4:	b672      	cpsid	i
 800f0c6:	e7fe      	b.n	800f0c6 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800f0c8:	b672      	cpsid	i
 800f0ca:	e7fe      	b.n	800f0ca <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f0cc:	6803      	ldr	r3, [r0, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d01f      	beq.n	800f112 <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0d2:	f001 facd 	bl	8010670 <ulSetInterruptMaskFromISR>
 800f0d6:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f0d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800f0da:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f0dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d212      	bcs.n	800f108 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800f0e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f0e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	d116      	bne.n	800f11c <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800f0ee:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d008      	beq.n	800f108 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0f6:	0020      	movs	r0, r4
 800f0f8:	3024      	adds	r0, #36	; 0x24
 800f0fa:	f000 fde1 	bl	800fcc0 <xTaskRemoveFromEventList>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d002      	beq.n	800f108 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800f102:	2f00      	cmp	r7, #0
 800f104:	d00f      	beq.n	800f126 <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f106:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f108:	0030      	movs	r0, r6
 800f10a:	f001 fab6 	bl	801067a <vClearInterruptMaskFromISR>
}
 800f10e:	0028      	movs	r0, r5
 800f110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f112:	6843      	ldr	r3, [r0, #4]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d0dc      	beq.n	800f0d2 <xQueueGiveFromISR+0x1e>
 800f118:	b672      	cpsid	i
 800f11a:	e7fe      	b.n	800f11a <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800f11c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f11e:	3301      	adds	r3, #1
 800f120:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f122:	2501      	movs	r5, #1
 800f124:	e7f0      	b.n	800f108 <xQueueGiveFromISR+0x54>
 800f126:	2501      	movs	r5, #1
 800f128:	e7ee      	b.n	800f108 <xQueueGiveFromISR+0x54>

0800f12a <xQueueGenericReceive>:
{
 800f12a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f12c:	46c6      	mov	lr, r8
 800f12e:	b500      	push	{lr}
 800f130:	b084      	sub	sp, #16
 800f132:	0004      	movs	r4, r0
 800f134:	000e      	movs	r6, r1
 800f136:	9201      	str	r2, [sp, #4]
 800f138:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800f13a:	2800      	cmp	r0, #0
 800f13c:	d006      	beq.n	800f14c <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f13e:	2900      	cmp	r1, #0
 800f140:	d106      	bne.n	800f150 <xQueueGenericReceive+0x26>
 800f142:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f144:	2b00      	cmp	r3, #0
 800f146:	d003      	beq.n	800f150 <xQueueGenericReceive+0x26>
 800f148:	b672      	cpsid	i
 800f14a:	e7fe      	b.n	800f14a <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800f14c:	b672      	cpsid	i
 800f14e:	e7fe      	b.n	800f14e <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f150:	f000 fe3e 	bl	800fdd0 <xTaskGetSchedulerState>
 800f154:	2800      	cmp	r0, #0
 800f156:	d104      	bne.n	800f162 <xQueueGenericReceive+0x38>
 800f158:	9b01      	ldr	r3, [sp, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d004      	beq.n	800f168 <xQueueGenericReceive+0x3e>
 800f15e:	b672      	cpsid	i
 800f160:	e7fe      	b.n	800f160 <xQueueGenericReceive+0x36>
 800f162:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f164:	2700      	movs	r7, #0
 800f166:	e04b      	b.n	800f200 <xQueueGenericReceive+0xd6>
 800f168:	2500      	movs	r5, #0
 800f16a:	e7fb      	b.n	800f164 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f16c:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f16e:	0031      	movs	r1, r6
 800f170:	0020      	movs	r0, r4
 800f172:	f7ff fdfd 	bl	800ed70 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f176:	4643      	mov	r3, r8
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d11a      	bne.n	800f1b2 <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800f17c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f17e:	3b01      	subs	r3, #1
 800f180:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f182:	6823      	ldr	r3, [r4, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d102      	bne.n	800f18e <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f188:	f000 ff62 	bl	8010050 <pvTaskIncrementMutexHeldCount>
 800f18c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f18e:	6923      	ldr	r3, [r4, #16]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d007      	beq.n	800f1a4 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f194:	0020      	movs	r0, r4
 800f196:	3010      	adds	r0, #16
 800f198:	f000 fd92 	bl	800fcc0 <xTaskRemoveFromEventList>
 800f19c:	2801      	cmp	r0, #1
 800f19e:	d101      	bne.n	800f1a4 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800f1a0:	f001 fa3e 	bl	8010620 <vPortYield>
				taskEXIT_CRITICAL();
 800f1a4:	f001 fa54 	bl	8010650 <vPortExitCritical>
				return pdPASS;
 800f1a8:	2001      	movs	r0, #1
}
 800f1aa:	b004      	add	sp, #16
 800f1ac:	bc04      	pop	{r2}
 800f1ae:	4690      	mov	r8, r2
 800f1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f1b2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d0f4      	beq.n	800f1a4 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1ba:	0020      	movs	r0, r4
 800f1bc:	3024      	adds	r0, #36	; 0x24
 800f1be:	f000 fd7f 	bl	800fcc0 <xTaskRemoveFromEventList>
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	d0ee      	beq.n	800f1a4 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800f1c6:	f001 fa2b 	bl	8010620 <vPortYield>
 800f1ca:	e7eb      	b.n	800f1a4 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800f1cc:	f001 fa40 	bl	8010650 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	e7ea      	b.n	800f1aa <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800f1d4:	a802      	add	r0, sp, #8
 800f1d6:	f000 fdb3 	bl	800fd40 <vTaskSetTimeOutState>
 800f1da:	e01b      	b.n	800f214 <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800f1dc:	6467      	str	r7, [r4, #68]	; 0x44
 800f1de:	e022      	b.n	800f226 <xQueueGenericReceive+0xfc>
 800f1e0:	64a7      	str	r7, [r4, #72]	; 0x48
 800f1e2:	e023      	b.n	800f22c <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800f1e4:	f001 fa28 	bl	8010638 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f1e8:	6860      	ldr	r0, [r4, #4]
 800f1ea:	f000 fe01 	bl	800fdf0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f1ee:	f001 fa2f 	bl	8010650 <vPortExitCritical>
 800f1f2:	e02d      	b.n	800f250 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800f1f4:	0020      	movs	r0, r4
 800f1f6:	f7ff fdcd 	bl	800ed94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1fa:	f000 fb83 	bl	800f904 <xTaskResumeAll>
 800f1fe:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800f200:	f001 fa1a 	bl	8010638 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f204:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f206:	2b00      	cmp	r3, #0
 800f208:	d1b0      	bne.n	800f16c <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f20a:	9b01      	ldr	r3, [sp, #4]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d0dd      	beq.n	800f1cc <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800f210:	2d00      	cmp	r5, #0
 800f212:	d0df      	beq.n	800f1d4 <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800f214:	f001 fa1c 	bl	8010650 <vPortExitCritical>
		vTaskSuspendAll();
 800f218:	f000 fad4 	bl	800f7c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f21c:	f001 fa0c 	bl	8010638 <vPortEnterCritical>
 800f220:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f222:	3301      	adds	r3, #1
 800f224:	d0da      	beq.n	800f1dc <xQueueGenericReceive+0xb2>
 800f226:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f228:	3301      	adds	r3, #1
 800f22a:	d0d9      	beq.n	800f1e0 <xQueueGenericReceive+0xb6>
 800f22c:	f001 fa10 	bl	8010650 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f230:	a901      	add	r1, sp, #4
 800f232:	a802      	add	r0, sp, #8
 800f234:	f000 fd94 	bl	800fd60 <xTaskCheckForTimeOut>
 800f238:	2800      	cmp	r0, #0
 800f23a:	d118      	bne.n	800f26e <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800f23c:	f001 f9fc 	bl	8010638 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f240:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800f242:	f001 fa05 	bl	8010650 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f246:	2d00      	cmp	r5, #0
 800f248:	d1d4      	bne.n	800f1f4 <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f24a:	6823      	ldr	r3, [r4, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d0c9      	beq.n	800f1e4 <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f250:	0020      	movs	r0, r4
 800f252:	3024      	adds	r0, #36	; 0x24
 800f254:	9901      	ldr	r1, [sp, #4]
 800f256:	f000 fcf5 	bl	800fc44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f25a:	0020      	movs	r0, r4
 800f25c:	f7ff fd9a 	bl	800ed94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f260:	f000 fb50 	bl	800f904 <xTaskResumeAll>
 800f264:	2800      	cmp	r0, #0
 800f266:	d1ca      	bne.n	800f1fe <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800f268:	f001 f9da 	bl	8010620 <vPortYield>
 800f26c:	e7c7      	b.n	800f1fe <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800f26e:	0020      	movs	r0, r4
 800f270:	f7ff fd90 	bl	800ed94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f274:	f000 fb46 	bl	800f904 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f278:	2000      	movs	r0, #0
 800f27a:	e796      	b.n	800f1aa <xQueueGenericReceive+0x80>

0800f27c <xQueueReceiveFromISR>:
{
 800f27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f27e:	b083      	sub	sp, #12
 800f280:	0004      	movs	r4, r0
 800f282:	000f      	movs	r7, r1
 800f284:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800f286:	2800      	cmp	r0, #0
 800f288:	d006      	beq.n	800f298 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f28a:	2900      	cmp	r1, #0
 800f28c:	d106      	bne.n	800f29c <xQueueReceiveFromISR+0x20>
 800f28e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f290:	2b00      	cmp	r3, #0
 800f292:	d003      	beq.n	800f29c <xQueueReceiveFromISR+0x20>
 800f294:	b672      	cpsid	i
 800f296:	e7fe      	b.n	800f296 <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800f298:	b672      	cpsid	i
 800f29a:	e7fe      	b.n	800f29a <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f29c:	f001 f9e8 	bl	8010670 <ulSetInterruptMaskFromISR>
 800f2a0:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800f2a4:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d01b      	beq.n	800f2e2 <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f2aa:	0039      	movs	r1, r7
 800f2ac:	0020      	movs	r0, r4
 800f2ae:	f7ff fd5f 	bl	800ed70 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800f2b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800f2b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	d004      	beq.n	800f2c8 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800f2be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f2c4:	2501      	movs	r5, #1
 800f2c6:	e00c      	b.n	800f2e2 <xQueueReceiveFromISR+0x66>
 800f2c8:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2ca:	6923      	ldr	r3, [r4, #16]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d008      	beq.n	800f2e2 <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2d0:	0020      	movs	r0, r4
 800f2d2:	3010      	adds	r0, #16
 800f2d4:	f000 fcf4 	bl	800fcc0 <xTaskRemoveFromEventList>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	d002      	beq.n	800f2e2 <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800f2dc:	2e00      	cmp	r6, #0
 800f2de:	d006      	beq.n	800f2ee <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f2e0:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f2e2:	9801      	ldr	r0, [sp, #4]
 800f2e4:	f001 f9c9 	bl	801067a <vClearInterruptMaskFromISR>
}
 800f2e8:	0028      	movs	r0, r5
 800f2ea:	b003      	add	sp, #12
 800f2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800f2ee:	2501      	movs	r5, #1
 800f2f0:	e7f7      	b.n	800f2e2 <xQueueReceiveFromISR+0x66>
	...

0800f2f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f2f4:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f2f6:	4b0a      	ldr	r3, [pc, #40]	; (800f320 <vQueueAddToRegistry+0x2c>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d009      	beq.n	800f312 <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f2fe:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f300:	4c07      	ldr	r4, [pc, #28]	; (800f320 <vQueueAddToRegistry+0x2c>)
 800f302:	00da      	lsls	r2, r3, #3
 800f304:	58a2      	ldr	r2, [r4, r2]
 800f306:	2a00      	cmp	r2, #0
 800f308:	d004      	beq.n	800f314 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f30a:	3301      	adds	r3, #1
 800f30c:	2b08      	cmp	r3, #8
 800f30e:	d1f8      	bne.n	800f302 <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f310:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f312:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f314:	4a02      	ldr	r2, [pc, #8]	; (800f320 <vQueueAddToRegistry+0x2c>)
 800f316:	00db      	lsls	r3, r3, #3
 800f318:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f31a:	18d3      	adds	r3, r2, r3
 800f31c:	6058      	str	r0, [r3, #4]
				break;
 800f31e:	e7f7      	b.n	800f310 <vQueueAddToRegistry+0x1c>
 800f320:	20006e28 	.word	0x20006e28

0800f324 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f324:	b570      	push	{r4, r5, r6, lr}
 800f326:	0004      	movs	r4, r0
 800f328:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f32a:	f001 f985 	bl	8010638 <vPortEnterCritical>
 800f32e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f330:	3301      	adds	r3, #1
 800f332:	d00b      	beq.n	800f34c <vQueueWaitForMessageRestricted+0x28>
 800f334:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f336:	3301      	adds	r3, #1
 800f338:	d00b      	beq.n	800f352 <vQueueWaitForMessageRestricted+0x2e>
 800f33a:	f001 f989 	bl	8010650 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f33e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f340:	2b00      	cmp	r3, #0
 800f342:	d009      	beq.n	800f358 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f344:	0020      	movs	r0, r4
 800f346:	f7ff fd25 	bl	800ed94 <prvUnlockQueue>
	}
 800f34a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f34c:	2300      	movs	r3, #0
 800f34e:	6463      	str	r3, [r4, #68]	; 0x44
 800f350:	e7f0      	b.n	800f334 <vQueueWaitForMessageRestricted+0x10>
 800f352:	2300      	movs	r3, #0
 800f354:	64a3      	str	r3, [r4, #72]	; 0x48
 800f356:	e7f0      	b.n	800f33a <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f358:	0020      	movs	r0, r4
 800f35a:	3024      	adds	r0, #36	; 0x24
 800f35c:	0029      	movs	r1, r5
 800f35e:	f000 fc95 	bl	800fc8c <vTaskPlaceOnEventListRestricted>
 800f362:	e7ef      	b.n	800f344 <vQueueWaitForMessageRestricted+0x20>

0800f364 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f366:	46d6      	mov	lr, sl
 800f368:	464f      	mov	r7, r9
 800f36a:	4646      	mov	r6, r8
 800f36c:	b5c0      	push	{r6, r7, lr}
 800f36e:	0006      	movs	r6, r0
 800f370:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f372:	6808      	ldr	r0, [r1, #0]
 800f374:	2800      	cmp	r0, #0
 800f376:	d044      	beq.n	800f402 <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f378:	684b      	ldr	r3, [r1, #4]
 800f37a:	685b      	ldr	r3, [r3, #4]
 800f37c:	604b      	str	r3, [r1, #4]
 800f37e:	2208      	movs	r2, #8
 800f380:	4690      	mov	r8, r2
 800f382:	4488      	add	r8, r1
 800f384:	4543      	cmp	r3, r8
 800f386:	d006      	beq.n	800f396 <prvListTaskWithinSingleList+0x32>
 800f388:	684b      	ldr	r3, [r1, #4]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800f38e:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f390:	2302      	movs	r3, #2
 800f392:	469a      	mov	sl, r3
 800f394:	e018      	b.n	800f3c8 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f396:	68cb      	ldr	r3, [r1, #12]
 800f398:	604b      	str	r3, [r1, #4]
 800f39a:	e7f5      	b.n	800f388 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f39c:	68cb      	ldr	r3, [r1, #12]
 800f39e:	604b      	str	r3, [r1, #4]
 800f3a0:	e017      	b.n	800f3d2 <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f3a2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f3a4:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f3a6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800f3a8:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f3aa:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f3ac:	783b      	ldrb	r3, [r7, #0]
 800f3ae:	2ba5      	cmp	r3, #165	; 0xa5
 800f3b0:	d125      	bne.n	800f3fe <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800f3b2:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800f3b4:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f3b6:	5cfc      	ldrb	r4, [r7, r3]
 800f3b8:	2ca5      	cmp	r4, #165	; 0xa5
 800f3ba:	d0fb      	beq.n	800f3b4 <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f3bc:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800f3be:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800f3c0:	3001      	adds	r0, #1
 800f3c2:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800f3c4:	45a9      	cmp	r9, r5
 800f3c6:	d01c      	beq.n	800f402 <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f3c8:	684b      	ldr	r3, [r1, #4]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	604b      	str	r3, [r1, #4]
 800f3ce:	4598      	cmp	r8, r3
 800f3d0:	d0e4      	beq.n	800f39c <prvListTaskWithinSingleList+0x38>
 800f3d2:	684b      	ldr	r3, [r1, #4]
 800f3d4:	68dd      	ldr	r5, [r3, #12]
 800f3d6:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800f3d8:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800f3da:	002b      	movs	r3, r5
 800f3dc:	3334      	adds	r3, #52	; 0x34
 800f3de:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800f3e0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800f3e2:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800f3e4:	4663      	mov	r3, ip
 800f3e6:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800f3e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f3ea:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800f3ec:	4663      	mov	r3, ip
 800f3ee:	2b03      	cmp	r3, #3
 800f3f0:	d1d7      	bne.n	800f3a2 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800f3f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d0d4      	beq.n	800f3a2 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f3f8:	4653      	mov	r3, sl
 800f3fa:	7333      	strb	r3, [r6, #12]
 800f3fc:	e7d1      	b.n	800f3a2 <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800f3fe:	2300      	movs	r3, #0
 800f400:	e7dc      	b.n	800f3bc <prvListTaskWithinSingleList+0x58>
	}
 800f402:	bc1c      	pop	{r2, r3, r4}
 800f404:	4690      	mov	r8, r2
 800f406:	4699      	mov	r9, r3
 800f408:	46a2      	mov	sl, r4
 800f40a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f40c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f40c:	4b08      	ldr	r3, [pc, #32]	; (800f430 <prvResetNextTaskUnblockTime+0x24>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d007      	beq.n	800f426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f416:	4b06      	ldr	r3, [pc, #24]	; (800f430 <prvResetNextTaskUnblockTime+0x24>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	685a      	ldr	r2, [r3, #4]
 800f420:	4b04      	ldr	r3, [pc, #16]	; (800f434 <prvResetNextTaskUnblockTime+0x28>)
 800f422:	601a      	str	r2, [r3, #0]
	}
}
 800f424:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800f426:	4b03      	ldr	r3, [pc, #12]	; (800f434 <prvResetNextTaskUnblockTime+0x28>)
 800f428:	2201      	movs	r2, #1
 800f42a:	4252      	negs	r2, r2
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	e7f9      	b.n	800f424 <prvResetNextTaskUnblockTime+0x18>
 800f430:	20001d70 	.word	0x20001d70
 800f434:	200000ec 	.word	0x200000ec

0800f438 <prvAddCurrentTaskToDelayedList>:
{
 800f438:	b510      	push	{r4, lr}
 800f43a:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f43c:	4b0e      	ldr	r3, [pc, #56]	; (800f478 <prvAddCurrentTaskToDelayedList+0x40>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f442:	4b0e      	ldr	r3, [pc, #56]	; (800f47c <prvAddCurrentTaskToDelayedList+0x44>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4283      	cmp	r3, r0
 800f448:	d80d      	bhi.n	800f466 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f44a:	4b0d      	ldr	r3, [pc, #52]	; (800f480 <prvAddCurrentTaskToDelayedList+0x48>)
 800f44c:	6818      	ldr	r0, [r3, #0]
 800f44e:	4b0a      	ldr	r3, [pc, #40]	; (800f478 <prvAddCurrentTaskToDelayedList+0x40>)
 800f450:	6819      	ldr	r1, [r3, #0]
 800f452:	3104      	adds	r1, #4
 800f454:	f7ff fc24 	bl	800eca0 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f458:	4b0a      	ldr	r3, [pc, #40]	; (800f484 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	42a3      	cmp	r3, r4
 800f45e:	d909      	bls.n	800f474 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800f460:	4b08      	ldr	r3, [pc, #32]	; (800f484 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f462:	601c      	str	r4, [r3, #0]
}
 800f464:	e006      	b.n	800f474 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f466:	4b08      	ldr	r3, [pc, #32]	; (800f488 <prvAddCurrentTaskToDelayedList+0x50>)
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	4b03      	ldr	r3, [pc, #12]	; (800f478 <prvAddCurrentTaskToDelayedList+0x40>)
 800f46c:	6819      	ldr	r1, [r3, #0]
 800f46e:	3104      	adds	r1, #4
 800f470:	f7ff fc16 	bl	800eca0 <vListInsert>
}
 800f474:	bd10      	pop	{r4, pc}
 800f476:	46c0      	nop			; (mov r8, r8)
 800f478:	20001d6c 	.word	0x20001d6c
 800f47c:	20001e8c 	.word	0x20001e8c
 800f480:	20001d70 	.word	0x20001d70
 800f484:	200000ec 	.word	0x200000ec
 800f488:	20001d74 	.word	0x20001d74

0800f48c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f48c:	b510      	push	{r4, lr}
 800f48e:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f490:	f005 f97a 	bl	8014788 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f494:	0020      	movs	r0, r4
 800f496:	f7f0 fe3f 	bl	8000118 <strlen>
 800f49a:	0003      	movs	r3, r0
 800f49c:	280b      	cmp	r0, #11
 800f49e:	dc08      	bgt.n	800f4b2 <prvWriteNameToBuffer+0x26>
 800f4a0:	1820      	adds	r0, r4, r0
 800f4a2:	0022      	movs	r2, r4
 800f4a4:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800f4a6:	2320      	movs	r3, #32
 800f4a8:	7003      	strb	r3, [r0, #0]
 800f4aa:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f4ac:	4290      	cmp	r0, r2
 800f4ae:	d1fb      	bne.n	800f4a8 <prvWriteNameToBuffer+0x1c>
 800f4b0:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f4b2:	18e0      	adds	r0, r4, r3
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f4b8:	bd10      	pop	{r4, pc}
	...

0800f4bc <xTaskGenericCreate>:
{
 800f4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4be:	46d6      	mov	lr, sl
 800f4c0:	4647      	mov	r7, r8
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b085      	sub	sp, #20
 800f4c6:	9002      	str	r0, [sp, #8]
 800f4c8:	000d      	movs	r5, r1
 800f4ca:	0016      	movs	r6, r2
 800f4cc:	9303      	str	r3, [sp, #12]
 800f4ce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d101      	bne.n	800f4d8 <xTaskGenericCreate+0x1c>
 800f4d4:	b672      	cpsid	i
 800f4d6:	e7fe      	b.n	800f4d6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800f4d8:	2f06      	cmp	r7, #6
 800f4da:	d901      	bls.n	800f4e0 <xTaskGenericCreate+0x24>
 800f4dc:	b672      	cpsid	i
 800f4de:	e7fe      	b.n	800f4de <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d106      	bne.n	800f4f4 <xTaskGenericCreate+0x38>
 800f4e6:	0090      	lsls	r0, r2, #2
 800f4e8:	f001 f928 	bl	801073c <pvPortMalloc>
 800f4ec:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	d100      	bne.n	800f4f4 <xTaskGenericCreate+0x38>
 800f4f2:	e0b7      	b.n	800f664 <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f4f4:	2060      	movs	r0, #96	; 0x60
 800f4f6:	f001 f921 	bl	801073c <pvPortMalloc>
 800f4fa:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800f4fc:	d100      	bne.n	800f500 <xTaskGenericCreate+0x44>
 800f4fe:	e08b      	b.n	800f618 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800f500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f502:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f504:	00b2      	lsls	r2, r6, #2
 800f506:	21a5      	movs	r1, #165	; 0xa5
 800f508:	0018      	movs	r0, r3
 800f50a:	f004 fed5 	bl	80142b8 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f50e:	4b57      	ldr	r3, [pc, #348]	; (800f66c <xTaskGenericCreate+0x1b0>)
 800f510:	18f3      	adds	r3, r6, r3
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f516:	4694      	mov	ip, r2
 800f518:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f51a:	2207      	movs	r2, #7
 800f51c:	4393      	bics	r3, r2
 800f51e:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f520:	782a      	ldrb	r2, [r5, #0]
 800f522:	2334      	movs	r3, #52	; 0x34
 800f524:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800f526:	782b      	ldrb	r3, [r5, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d000      	beq.n	800f52e <xTaskGenericCreate+0x72>
 800f52c:	e07e      	b.n	800f62c <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f52e:	2500      	movs	r5, #0
 800f530:	2340      	movs	r3, #64	; 0x40
 800f532:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800f534:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f536:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f538:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f53a:	1d23      	adds	r3, r4, #4
 800f53c:	9301      	str	r3, [sp, #4]
 800f53e:	0018      	movs	r0, r3
 800f540:	f7ff fb9f 	bl	800ec82 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f544:	0020      	movs	r0, r4
 800f546:	3018      	adds	r0, #24
 800f548:	f7ff fb9b 	bl	800ec82 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f54c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f54e:	2307      	movs	r3, #7
 800f550:	1bdb      	subs	r3, r3, r7
 800f552:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f554:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f556:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f558:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f55a:	235c      	movs	r3, #92	; 0x5c
 800f55c:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f55e:	9a03      	ldr	r2, [sp, #12]
 800f560:	9902      	ldr	r1, [sp, #8]
 800f562:	4650      	mov	r0, sl
 800f564:	f001 f820 	bl	80105a8 <pxPortInitialiseStack>
 800f568:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f56c:	42ab      	cmp	r3, r5
 800f56e:	d000      	beq.n	800f572 <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f570:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f572:	f001 f861 	bl	8010638 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f576:	4a3e      	ldr	r2, [pc, #248]	; (800f670 <xTaskGenericCreate+0x1b4>)
 800f578:	6813      	ldr	r3, [r2, #0]
 800f57a:	3301      	adds	r3, #1
 800f57c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f57e:	4b3d      	ldr	r3, [pc, #244]	; (800f674 <xTaskGenericCreate+0x1b8>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d162      	bne.n	800f64c <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800f586:	4b3b      	ldr	r3, [pc, #236]	; (800f674 <xTaskGenericCreate+0x1b8>)
 800f588:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f58a:	6813      	ldr	r3, [r2, #0]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d120      	bne.n	800f5d2 <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f590:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f592:	3313      	adds	r3, #19
 800f594:	4698      	mov	r8, r3
 800f596:	4e38      	ldr	r6, [pc, #224]	; (800f678 <xTaskGenericCreate+0x1bc>)
 800f598:	4640      	mov	r0, r8
 800f59a:	4368      	muls	r0, r5
 800f59c:	1980      	adds	r0, r0, r6
 800f59e:	f7ff fb65 	bl	800ec6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f5a2:	3501      	adds	r5, #1
 800f5a4:	2d07      	cmp	r5, #7
 800f5a6:	d1f7      	bne.n	800f598 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800f5a8:	4e34      	ldr	r6, [pc, #208]	; (800f67c <xTaskGenericCreate+0x1c0>)
 800f5aa:	0030      	movs	r0, r6
 800f5ac:	f7ff fb5e 	bl	800ec6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f5b0:	4d33      	ldr	r5, [pc, #204]	; (800f680 <xTaskGenericCreate+0x1c4>)
 800f5b2:	0028      	movs	r0, r5
 800f5b4:	f7ff fb5a 	bl	800ec6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f5b8:	4832      	ldr	r0, [pc, #200]	; (800f684 <xTaskGenericCreate+0x1c8>)
 800f5ba:	f7ff fb57 	bl	800ec6c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f5be:	4832      	ldr	r0, [pc, #200]	; (800f688 <xTaskGenericCreate+0x1cc>)
 800f5c0:	f7ff fb54 	bl	800ec6c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f5c4:	4831      	ldr	r0, [pc, #196]	; (800f68c <xTaskGenericCreate+0x1d0>)
 800f5c6:	f7ff fb51 	bl	800ec6c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f5ca:	4b31      	ldr	r3, [pc, #196]	; (800f690 <xTaskGenericCreate+0x1d4>)
 800f5cc:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f5ce:	4b31      	ldr	r3, [pc, #196]	; (800f694 <xTaskGenericCreate+0x1d8>)
 800f5d0:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800f5d2:	4a31      	ldr	r2, [pc, #196]	; (800f698 <xTaskGenericCreate+0x1dc>)
 800f5d4:	6813      	ldr	r3, [r2, #0]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f5da:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f5dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f5de:	4a2f      	ldr	r2, [pc, #188]	; (800f69c <xTaskGenericCreate+0x1e0>)
 800f5e0:	6812      	ldr	r2, [r2, #0]
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d901      	bls.n	800f5ea <xTaskGenericCreate+0x12e>
 800f5e6:	4a2d      	ldr	r2, [pc, #180]	; (800f69c <xTaskGenericCreate+0x1e0>)
 800f5e8:	6013      	str	r3, [r2, #0]
 800f5ea:	2014      	movs	r0, #20
 800f5ec:	4358      	muls	r0, r3
 800f5ee:	4b22      	ldr	r3, [pc, #136]	; (800f678 <xTaskGenericCreate+0x1bc>)
 800f5f0:	18c0      	adds	r0, r0, r3
 800f5f2:	9901      	ldr	r1, [sp, #4]
 800f5f4:	f7ff fb48 	bl	800ec88 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f5f8:	f001 f82a 	bl	8010650 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f5fc:	4b28      	ldr	r3, [pc, #160]	; (800f6a0 <xTaskGenericCreate+0x1e4>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f600:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00d      	beq.n	800f622 <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f606:	4b1b      	ldr	r3, [pc, #108]	; (800f674 <xTaskGenericCreate+0x1b8>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f60c:	42bb      	cmp	r3, r7
 800f60e:	d208      	bcs.n	800f622 <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800f610:	f001 f806 	bl	8010620 <vPortYield>
			xReturn = pdPASS;
 800f614:	2001      	movs	r0, #1
 800f616:	e004      	b.n	800f622 <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800f618:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f61a:	f001 f925 	bl	8010868 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f61e:	2001      	movs	r0, #1
 800f620:	4240      	negs	r0, r0
}
 800f622:	b005      	add	sp, #20
 800f624:	bc0c      	pop	{r2, r3}
 800f626:	4690      	mov	r8, r2
 800f628:	469a      	mov	sl, r3
 800f62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f62c:	1c6b      	adds	r3, r5, #1
 800f62e:	0022      	movs	r2, r4
 800f630:	3235      	adds	r2, #53	; 0x35
 800f632:	0021      	movs	r1, r4
 800f634:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f636:	7818      	ldrb	r0, [r3, #0]
 800f638:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800f63a:	7818      	ldrb	r0, [r3, #0]
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d100      	bne.n	800f642 <xTaskGenericCreate+0x186>
 800f640:	e775      	b.n	800f52e <xTaskGenericCreate+0x72>
 800f642:	3301      	adds	r3, #1
 800f644:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f646:	4291      	cmp	r1, r2
 800f648:	d1f5      	bne.n	800f636 <xTaskGenericCreate+0x17a>
 800f64a:	e770      	b.n	800f52e <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800f64c:	4b14      	ldr	r3, [pc, #80]	; (800f6a0 <xTaskGenericCreate+0x1e4>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1be      	bne.n	800f5d2 <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f654:	4b07      	ldr	r3, [pc, #28]	; (800f674 <xTaskGenericCreate+0x1b8>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f65a:	42bb      	cmp	r3, r7
 800f65c:	d8b9      	bhi.n	800f5d2 <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800f65e:	4b05      	ldr	r3, [pc, #20]	; (800f674 <xTaskGenericCreate+0x1b8>)
 800f660:	601c      	str	r4, [r3, #0]
 800f662:	e7b6      	b.n	800f5d2 <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f664:	2001      	movs	r0, #1
 800f666:	4240      	negs	r0, r0
 800f668:	e7db      	b.n	800f622 <xTaskGenericCreate+0x166>
 800f66a:	46c0      	nop			; (mov r8, r8)
 800f66c:	3fffffff 	.word	0x3fffffff
 800f670:	20001e08 	.word	0x20001e08
 800f674:	20001d6c 	.word	0x20001d6c
 800f678:	20001d78 	.word	0x20001d78
 800f67c:	20001e20 	.word	0x20001e20
 800f680:	20001e34 	.word	0x20001e34
 800f684:	20001e4c 	.word	0x20001e4c
 800f688:	20001e78 	.word	0x20001e78
 800f68c:	20001e64 	.word	0x20001e64
 800f690:	20001d70 	.word	0x20001d70
 800f694:	20001d74 	.word	0x20001d74
 800f698:	20001e14 	.word	0x20001e14
 800f69c:	20001e1c 	.word	0x20001e1c
 800f6a0:	20001e60 	.word	0x20001e60

0800f6a4 <uxTaskPriorityGet>:
	{
 800f6a4:	b510      	push	{r4, lr}
 800f6a6:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f6a8:	f000 ffc6 	bl	8010638 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f6ac:	2c00      	cmp	r4, #0
 800f6ae:	d004      	beq.n	800f6ba <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f6b0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f6b2:	f000 ffcd 	bl	8010650 <vPortExitCritical>
	}
 800f6b6:	0020      	movs	r0, r4
 800f6b8:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f6ba:	4b01      	ldr	r3, [pc, #4]	; (800f6c0 <uxTaskPriorityGet+0x1c>)
 800f6bc:	681c      	ldr	r4, [r3, #0]
 800f6be:	e7f7      	b.n	800f6b0 <uxTaskPriorityGet+0xc>
 800f6c0:	20001d6c 	.word	0x20001d6c

0800f6c4 <vTaskPrioritySet>:
	{
 800f6c4:	b570      	push	{r4, r5, r6, lr}
 800f6c6:	0004      	movs	r4, r0
 800f6c8:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f6ca:	2906      	cmp	r1, #6
 800f6cc:	d901      	bls.n	800f6d2 <vTaskPrioritySet+0xe>
 800f6ce:	b672      	cpsid	i
 800f6d0:	e7fe      	b.n	800f6d0 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f6d2:	f000 ffb1 	bl	8010638 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f6d6:	2c00      	cmp	r4, #0
 800f6d8:	d101      	bne.n	800f6de <vTaskPrioritySet+0x1a>
 800f6da:	4b21      	ldr	r3, [pc, #132]	; (800f760 <vTaskPrioritySet+0x9c>)
 800f6dc:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f6de:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f6e0:	4295      	cmp	r5, r2
 800f6e2:	d032      	beq.n	800f74a <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800f6e4:	d934      	bls.n	800f750 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800f6e6:	4b1e      	ldr	r3, [pc, #120]	; (800f760 <vTaskPrioritySet+0x9c>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	42a3      	cmp	r3, r4
 800f6ec:	d036      	beq.n	800f75c <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f6ee:	4b1c      	ldr	r3, [pc, #112]	; (800f760 <vTaskPrioritySet+0x9c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6f4:	2600      	movs	r6, #0
 800f6f6:	429d      	cmp	r5, r3
 800f6f8:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f6fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f6fc:	428a      	cmp	r2, r1
 800f6fe:	d100      	bne.n	800f702 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800f700:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800f702:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f704:	69a3      	ldr	r3, [r4, #24]
 800f706:	2b00      	cmp	r3, #0
 800f708:	db02      	blt.n	800f710 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f70a:	2207      	movs	r2, #7
 800f70c:	1b55      	subs	r5, r2, r5
 800f70e:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f710:	2314      	movs	r3, #20
 800f712:	434b      	muls	r3, r1
 800f714:	4a13      	ldr	r2, [pc, #76]	; (800f764 <vTaskPrioritySet+0xa0>)
 800f716:	189b      	adds	r3, r3, r2
 800f718:	6962      	ldr	r2, [r4, #20]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d111      	bne.n	800f742 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f71e:	1d25      	adds	r5, r4, #4
 800f720:	0028      	movs	r0, r5
 800f722:	f7ff fad4 	bl	800ecce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f726:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f728:	4a0f      	ldr	r2, [pc, #60]	; (800f768 <vTaskPrioritySet+0xa4>)
 800f72a:	6812      	ldr	r2, [r2, #0]
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d901      	bls.n	800f734 <vTaskPrioritySet+0x70>
 800f730:	4a0d      	ldr	r2, [pc, #52]	; (800f768 <vTaskPrioritySet+0xa4>)
 800f732:	6013      	str	r3, [r2, #0]
 800f734:	2014      	movs	r0, #20
 800f736:	4358      	muls	r0, r3
 800f738:	4b0a      	ldr	r3, [pc, #40]	; (800f764 <vTaskPrioritySet+0xa0>)
 800f73a:	18c0      	adds	r0, r0, r3
 800f73c:	0029      	movs	r1, r5
 800f73e:	f7ff faa3 	bl	800ec88 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800f742:	2e01      	cmp	r6, #1
 800f744:	d101      	bne.n	800f74a <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800f746:	f000 ff6b 	bl	8010620 <vPortYield>
		taskEXIT_CRITICAL();
 800f74a:	f000 ff81 	bl	8010650 <vPortExitCritical>
	}
 800f74e:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800f750:	4b03      	ldr	r3, [pc, #12]	; (800f760 <vTaskPrioritySet+0x9c>)
 800f752:	681e      	ldr	r6, [r3, #0]
 800f754:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f756:	4273      	negs	r3, r6
 800f758:	415e      	adcs	r6, r3
 800f75a:	e7ce      	b.n	800f6fa <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800f75c:	2600      	movs	r6, #0
 800f75e:	e7cc      	b.n	800f6fa <vTaskPrioritySet+0x36>
 800f760:	20001d6c 	.word	0x20001d6c
 800f764:	20001d78 	.word	0x20001d78
 800f768:	20001e1c 	.word	0x20001e1c

0800f76c <vTaskStartScheduler>:
{
 800f76c:	b500      	push	{lr}
 800f76e:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f770:	2300      	movs	r3, #0
 800f772:	9303      	str	r3, [sp, #12]
 800f774:	9302      	str	r3, [sp, #8]
 800f776:	9301      	str	r3, [sp, #4]
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	22a0      	movs	r2, #160	; 0xa0
 800f77c:	490d      	ldr	r1, [pc, #52]	; (800f7b4 <vTaskStartScheduler+0x48>)
 800f77e:	480e      	ldr	r0, [pc, #56]	; (800f7b8 <vTaskStartScheduler+0x4c>)
 800f780:	f7ff fe9c 	bl	800f4bc <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f784:	2801      	cmp	r0, #1
 800f786:	d003      	beq.n	800f790 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800f788:	2800      	cmp	r0, #0
 800f78a:	d110      	bne.n	800f7ae <vTaskStartScheduler+0x42>
 800f78c:	b672      	cpsid	i
 800f78e:	e7fe      	b.n	800f78e <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800f790:	f000 fd68 	bl	8010264 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f794:	2801      	cmp	r0, #1
 800f796:	d1f7      	bne.n	800f788 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f798:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f79a:	4b08      	ldr	r3, [pc, #32]	; (800f7bc <vTaskStartScheduler+0x50>)
 800f79c:	2201      	movs	r2, #1
 800f79e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f7a0:	4b07      	ldr	r3, [pc, #28]	; (800f7c0 <vTaskStartScheduler+0x54>)
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f7a6:	f7fc f817 	bl	800b7d8 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f7aa:	f000 ff0f 	bl	80105cc <xPortStartScheduler>
}
 800f7ae:	b005      	add	sp, #20
 800f7b0:	bd00      	pop	{pc}
 800f7b2:	46c0      	nop			; (mov r8, r8)
 800f7b4:	0801ba38 	.word	0x0801ba38
 800f7b8:	0800fa2d 	.word	0x0800fa2d
 800f7bc:	20001e60 	.word	0x20001e60
 800f7c0:	20001e8c 	.word	0x20001e8c

0800f7c4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f7c4:	4a02      	ldr	r2, [pc, #8]	; (800f7d0 <vTaskSuspendAll+0xc>)
 800f7c6:	6813      	ldr	r3, [r2, #0]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	6013      	str	r3, [r2, #0]
}
 800f7cc:	4770      	bx	lr
 800f7ce:	46c0      	nop			; (mov r8, r8)
 800f7d0:	20001e10 	.word	0x20001e10

0800f7d4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f7d4:	4b01      	ldr	r3, [pc, #4]	; (800f7dc <xTaskGetTickCount+0x8>)
 800f7d6:	6818      	ldr	r0, [r3, #0]
}
 800f7d8:	4770      	bx	lr
 800f7da:	46c0      	nop			; (mov r8, r8)
 800f7dc:	20001e8c 	.word	0x20001e8c

0800f7e0 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f7e0:	4b01      	ldr	r3, [pc, #4]	; (800f7e8 <xTaskGetTickCountFromISR+0x8>)
 800f7e2:	6818      	ldr	r0, [r3, #0]
}
 800f7e4:	4770      	bx	lr
 800f7e6:	46c0      	nop			; (mov r8, r8)
 800f7e8:	20001e8c 	.word	0x20001e8c

0800f7ec <xTaskIncrementTick>:
{
 800f7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ee:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7f0:	4b39      	ldr	r3, [pc, #228]	; (800f8d8 <xTaskIncrementTick+0xec>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d161      	bne.n	800f8bc <xTaskIncrementTick+0xd0>
		++xTickCount;
 800f7f8:	4b38      	ldr	r3, [pc, #224]	; (800f8dc <xTaskIncrementTick+0xf0>)
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	3201      	adds	r2, #1
 800f7fe:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f800:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f802:	2e00      	cmp	r6, #0
 800f804:	d112      	bne.n	800f82c <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800f806:	4b36      	ldr	r3, [pc, #216]	; (800f8e0 <xTaskIncrementTick+0xf4>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d001      	beq.n	800f814 <xTaskIncrementTick+0x28>
 800f810:	b672      	cpsid	i
 800f812:	e7fe      	b.n	800f812 <xTaskIncrementTick+0x26>
 800f814:	4a32      	ldr	r2, [pc, #200]	; (800f8e0 <xTaskIncrementTick+0xf4>)
 800f816:	6811      	ldr	r1, [r2, #0]
 800f818:	4b32      	ldr	r3, [pc, #200]	; (800f8e4 <xTaskIncrementTick+0xf8>)
 800f81a:	6818      	ldr	r0, [r3, #0]
 800f81c:	6010      	str	r0, [r2, #0]
 800f81e:	6019      	str	r1, [r3, #0]
 800f820:	4a31      	ldr	r2, [pc, #196]	; (800f8e8 <xTaskIncrementTick+0xfc>)
 800f822:	6813      	ldr	r3, [r2, #0]
 800f824:	3301      	adds	r3, #1
 800f826:	6013      	str	r3, [r2, #0]
 800f828:	f7ff fdf0 	bl	800f40c <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f82c:	4b2f      	ldr	r3, [pc, #188]	; (800f8ec <xTaskIncrementTick+0x100>)
 800f82e:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f830:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f832:	42b3      	cmp	r3, r6
 800f834:	d833      	bhi.n	800f89e <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800f836:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f838:	4d29      	ldr	r5, [pc, #164]	; (800f8e0 <xTaskIncrementTick+0xf4>)
 800f83a:	682b      	ldr	r3, [r5, #0]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d029      	beq.n	800f896 <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f842:	4b27      	ldr	r3, [pc, #156]	; (800f8e0 <xTaskIncrementTick+0xf4>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f84a:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f84c:	429e      	cmp	r6, r3
 800f84e:	d332      	bcc.n	800f8b6 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f850:	1d23      	adds	r3, r4, #4
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	0018      	movs	r0, r3
 800f856:	f7ff fa3a 	bl	800ecce <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f85a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d003      	beq.n	800f868 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f860:	0020      	movs	r0, r4
 800f862:	3018      	adds	r0, #24
 800f864:	f7ff fa33 	bl	800ecce <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f868:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f86a:	4a21      	ldr	r2, [pc, #132]	; (800f8f0 <xTaskIncrementTick+0x104>)
 800f86c:	6812      	ldr	r2, [r2, #0]
 800f86e:	4293      	cmp	r3, r2
 800f870:	d901      	bls.n	800f876 <xTaskIncrementTick+0x8a>
 800f872:	4a1f      	ldr	r2, [pc, #124]	; (800f8f0 <xTaskIncrementTick+0x104>)
 800f874:	6013      	str	r3, [r2, #0]
 800f876:	0098      	lsls	r0, r3, #2
 800f878:	18c0      	adds	r0, r0, r3
 800f87a:	0080      	lsls	r0, r0, #2
 800f87c:	4b1d      	ldr	r3, [pc, #116]	; (800f8f4 <xTaskIncrementTick+0x108>)
 800f87e:	18c0      	adds	r0, r0, r3
 800f880:	9901      	ldr	r1, [sp, #4]
 800f882:	f7ff fa01 	bl	800ec88 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f886:	4b1c      	ldr	r3, [pc, #112]	; (800f8f8 <xTaskIncrementTick+0x10c>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f88e:	429a      	cmp	r2, r3
 800f890:	d3d3      	bcc.n	800f83a <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800f892:	2701      	movs	r7, #1
 800f894:	e7d1      	b.n	800f83a <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f896:	4b15      	ldr	r3, [pc, #84]	; (800f8ec <xTaskIncrementTick+0x100>)
 800f898:	2201      	movs	r2, #1
 800f89a:	4252      	negs	r2, r2
 800f89c:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f89e:	4b16      	ldr	r3, [pc, #88]	; (800f8f8 <xTaskIncrementTick+0x10c>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a4:	0093      	lsls	r3, r2, #2
 800f8a6:	189b      	adds	r3, r3, r2
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	4a12      	ldr	r2, [pc, #72]	; (800f8f4 <xTaskIncrementTick+0x108>)
 800f8ac:	589b      	ldr	r3, [r3, r2]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d909      	bls.n	800f8c6 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800f8b2:	2701      	movs	r7, #1
 800f8b4:	e007      	b.n	800f8c6 <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800f8b6:	4a0d      	ldr	r2, [pc, #52]	; (800f8ec <xTaskIncrementTick+0x100>)
 800f8b8:	6013      	str	r3, [r2, #0]
							break;
 800f8ba:	e7f0      	b.n	800f89e <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800f8bc:	4a0f      	ldr	r2, [pc, #60]	; (800f8fc <xTaskIncrementTick+0x110>)
 800f8be:	6813      	ldr	r3, [r2, #0]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f8c4:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800f8c6:	4b0e      	ldr	r3, [pc, #56]	; (800f900 <xTaskIncrementTick+0x114>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d000      	beq.n	800f8d0 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800f8ce:	2701      	movs	r7, #1
}
 800f8d0:	0038      	movs	r0, r7
 800f8d2:	b003      	add	sp, #12
 800f8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8d6:	46c0      	nop			; (mov r8, r8)
 800f8d8:	20001e10 	.word	0x20001e10
 800f8dc:	20001e8c 	.word	0x20001e8c
 800f8e0:	20001d70 	.word	0x20001d70
 800f8e4:	20001d74 	.word	0x20001d74
 800f8e8:	20001e48 	.word	0x20001e48
 800f8ec:	200000ec 	.word	0x200000ec
 800f8f0:	20001e1c 	.word	0x20001e1c
 800f8f4:	20001d78 	.word	0x20001d78
 800f8f8:	20001d6c 	.word	0x20001d6c
 800f8fc:	20001e0c 	.word	0x20001e0c
 800f900:	20001e90 	.word	0x20001e90

0800f904 <xTaskResumeAll>:
{
 800f904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800f906:	4b2f      	ldr	r3, [pc, #188]	; (800f9c4 <xTaskResumeAll+0xc0>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d101      	bne.n	800f912 <xTaskResumeAll+0xe>
 800f90e:	b672      	cpsid	i
 800f910:	e7fe      	b.n	800f910 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800f912:	f000 fe91 	bl	8010638 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f916:	4b2b      	ldr	r3, [pc, #172]	; (800f9c4 <xTaskResumeAll+0xc0>)
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	3a01      	subs	r2, #1
 800f91c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f91e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f920:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f922:	42a3      	cmp	r3, r4
 800f924:	d105      	bne.n	800f932 <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f926:	4b28      	ldr	r3, [pc, #160]	; (800f9c8 <xTaskResumeAll+0xc4>)
 800f928:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f92a:	4d28      	ldr	r5, [pc, #160]	; (800f9cc <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f92c:	42a3      	cmp	r3, r4
 800f92e:	d12a      	bne.n	800f986 <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800f930:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f932:	f000 fe8d 	bl	8010650 <vPortExitCritical>
}
 800f936:	0020      	movs	r0, r4
 800f938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800f93a:	0098      	lsls	r0, r3, #2
 800f93c:	18c0      	adds	r0, r0, r3
 800f93e:	0080      	lsls	r0, r0, #2
 800f940:	4b23      	ldr	r3, [pc, #140]	; (800f9d0 <xTaskResumeAll+0xcc>)
 800f942:	18c0      	adds	r0, r0, r3
 800f944:	0021      	movs	r1, r4
 800f946:	f7ff f99f 	bl	800ec88 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f94a:	4b22      	ldr	r3, [pc, #136]	; (800f9d4 <xTaskResumeAll+0xd0>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f952:	429a      	cmp	r2, r3
 800f954:	d214      	bcs.n	800f980 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f956:	6833      	ldr	r3, [r6, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d016      	beq.n	800f98a <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f95c:	68eb      	ldr	r3, [r5, #12]
 800f95e:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f960:	0038      	movs	r0, r7
 800f962:	3018      	adds	r0, #24
 800f964:	f7ff f9b3 	bl	800ecce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f968:	1d3c      	adds	r4, r7, #4
 800f96a:	0020      	movs	r0, r4
 800f96c:	f7ff f9af 	bl	800ecce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f972:	4a19      	ldr	r2, [pc, #100]	; (800f9d8 <xTaskResumeAll+0xd4>)
 800f974:	6812      	ldr	r2, [r2, #0]
 800f976:	4293      	cmp	r3, r2
 800f978:	d9df      	bls.n	800f93a <xTaskResumeAll+0x36>
 800f97a:	4a17      	ldr	r2, [pc, #92]	; (800f9d8 <xTaskResumeAll+0xd4>)
 800f97c:	6013      	str	r3, [r2, #0]
 800f97e:	e7dc      	b.n	800f93a <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800f980:	4b16      	ldr	r3, [pc, #88]	; (800f9dc <xTaskResumeAll+0xd8>)
 800f982:	2201      	movs	r2, #1
 800f984:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f986:	4e11      	ldr	r6, [pc, #68]	; (800f9cc <xTaskResumeAll+0xc8>)
 800f988:	e7e5      	b.n	800f956 <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f98a:	4b15      	ldr	r3, [pc, #84]	; (800f9e0 <xTaskResumeAll+0xdc>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d005      	beq.n	800f99e <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f992:	4e13      	ldr	r6, [pc, #76]	; (800f9e0 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800f994:	4c11      	ldr	r4, [pc, #68]	; (800f9dc <xTaskResumeAll+0xd8>)
 800f996:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f998:	6833      	ldr	r3, [r6, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d108      	bne.n	800f9b0 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800f99e:	4b0f      	ldr	r3, [pc, #60]	; (800f9dc <xTaskResumeAll+0xd8>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f9a2:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d1c4      	bne.n	800f932 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800f9a8:	f000 fe3a 	bl	8010620 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800f9ac:	3401      	adds	r4, #1
 800f9ae:	e7c0      	b.n	800f932 <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800f9b0:	f7ff ff1c 	bl	800f7ec <xTaskIncrementTick>
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	d000      	beq.n	800f9ba <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800f9b8:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800f9ba:	4a09      	ldr	r2, [pc, #36]	; (800f9e0 <xTaskResumeAll+0xdc>)
 800f9bc:	6813      	ldr	r3, [r2, #0]
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	6013      	str	r3, [r2, #0]
 800f9c2:	e7e9      	b.n	800f998 <xTaskResumeAll+0x94>
 800f9c4:	20001e10 	.word	0x20001e10
 800f9c8:	20001e08 	.word	0x20001e08
 800f9cc:	20001e4c 	.word	0x20001e4c
 800f9d0:	20001d78 	.word	0x20001d78
 800f9d4:	20001d6c 	.word	0x20001d6c
 800f9d8:	20001e1c 	.word	0x20001e1c
 800f9dc:	20001e90 	.word	0x20001e90
 800f9e0:	20001e0c 	.word	0x20001e0c

0800f9e4 <vTaskDelay>:
	{
 800f9e4:	b570      	push	{r4, r5, r6, lr}
 800f9e6:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9e8:	d016      	beq.n	800fa18 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800f9ea:	4b0d      	ldr	r3, [pc, #52]	; (800fa20 <vTaskDelay+0x3c>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d001      	beq.n	800f9f6 <vTaskDelay+0x12>
 800f9f2:	b672      	cpsid	i
 800f9f4:	e7fe      	b.n	800f9f4 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800f9f6:	f7ff fee5 	bl	800f7c4 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f9fa:	4b0a      	ldr	r3, [pc, #40]	; (800fa24 <vTaskDelay+0x40>)
 800f9fc:	681c      	ldr	r4, [r3, #0]
 800f9fe:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fa00:	4b09      	ldr	r3, [pc, #36]	; (800fa28 <vTaskDelay+0x44>)
 800fa02:	6818      	ldr	r0, [r3, #0]
 800fa04:	3004      	adds	r0, #4
 800fa06:	f7ff f962 	bl	800ecce <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fa0a:	0020      	movs	r0, r4
 800fa0c:	f7ff fd14 	bl	800f438 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800fa10:	f7ff ff78 	bl	800f904 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d101      	bne.n	800fa1c <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800fa18:	f000 fe02 	bl	8010620 <vPortYield>
	}
 800fa1c:	bd70      	pop	{r4, r5, r6, pc}
 800fa1e:	46c0      	nop			; (mov r8, r8)
 800fa20:	20001e10 	.word	0x20001e10
 800fa24:	20001e8c 	.word	0x20001e8c
 800fa28:	20001d6c 	.word	0x20001d6c

0800fa2c <prvIdleTask>:
{
 800fa2c:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fa2e:	4d16      	ldr	r5, [pc, #88]	; (800fa88 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fa30:	4e16      	ldr	r6, [pc, #88]	; (800fa8c <prvIdleTask+0x60>)
 800fa32:	e003      	b.n	800fa3c <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa34:	4b16      	ldr	r3, [pc, #88]	; (800fa90 <prvIdleTask+0x64>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d822      	bhi.n	800fa82 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fa3c:	682b      	ldr	r3, [r5, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d0f8      	beq.n	800fa34 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800fa42:	f7ff febf 	bl	800f7c4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fa46:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800fa48:	f7ff ff5c 	bl	800f904 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800fa4c:	2c00      	cmp	r4, #0
 800fa4e:	d0f5      	beq.n	800fa3c <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800fa50:	f000 fdf2 	bl	8010638 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fa54:	4b0d      	ldr	r3, [pc, #52]	; (800fa8c <prvIdleTask+0x60>)
 800fa56:	68db      	ldr	r3, [r3, #12]
 800fa58:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fa5a:	1d20      	adds	r0, r4, #4
 800fa5c:	f7ff f937 	bl	800ecce <uxListRemove>
					--uxCurrentNumberOfTasks;
 800fa60:	4a0c      	ldr	r2, [pc, #48]	; (800fa94 <prvIdleTask+0x68>)
 800fa62:	6813      	ldr	r3, [r2, #0]
 800fa64:	3b01      	subs	r3, #1
 800fa66:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800fa68:	4a07      	ldr	r2, [pc, #28]	; (800fa88 <prvIdleTask+0x5c>)
 800fa6a:	6813      	ldr	r3, [r2, #0]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800fa70:	f000 fdee 	bl	8010650 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800fa74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fa76:	f000 fef7 	bl	8010868 <vPortFree>
		vPortFree( pxTCB );
 800fa7a:	0020      	movs	r0, r4
 800fa7c:	f000 fef4 	bl	8010868 <vPortFree>
 800fa80:	e7dc      	b.n	800fa3c <prvIdleTask+0x10>
				taskYIELD();
 800fa82:	f000 fdcd 	bl	8010620 <vPortYield>
 800fa86:	e7d9      	b.n	800fa3c <prvIdleTask+0x10>
 800fa88:	20001e18 	.word	0x20001e18
 800fa8c:	20001e78 	.word	0x20001e78
 800fa90:	20001d78 	.word	0x20001d78
 800fa94:	20001e08 	.word	0x20001e08

0800fa98 <uxTaskGetSystemState>:
	{
 800fa98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa9a:	46c6      	mov	lr, r8
 800fa9c:	b500      	push	{lr}
 800fa9e:	0006      	movs	r6, r0
 800faa0:	000d      	movs	r5, r1
 800faa2:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800faa4:	f7ff fe8e 	bl	800f7c4 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800faa8:	4b1e      	ldr	r3, [pc, #120]	; (800fb24 <uxTaskGetSystemState+0x8c>)
 800faaa:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800faac:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800faae:	42ab      	cmp	r3, r5
 800fab0:	d831      	bhi.n	800fb16 <uxTaskGetSystemState+0x7e>
 800fab2:	4d1d      	ldr	r5, [pc, #116]	; (800fb28 <uxTaskGetSystemState+0x90>)
 800fab4:	002f      	movs	r7, r5
 800fab6:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800fab8:	0160      	lsls	r0, r4, #5
 800faba:	1830      	adds	r0, r6, r0
 800fabc:	2201      	movs	r2, #1
 800fabe:	0029      	movs	r1, r5
 800fac0:	f7ff fc50 	bl	800f364 <prvListTaskWithinSingleList>
 800fac4:	1824      	adds	r4, r4, r0
 800fac6:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fac8:	42bd      	cmp	r5, r7
 800faca:	d1f5      	bne.n	800fab8 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800facc:	4b17      	ldr	r3, [pc, #92]	; (800fb2c <uxTaskGetSystemState+0x94>)
 800face:	6819      	ldr	r1, [r3, #0]
 800fad0:	0160      	lsls	r0, r4, #5
 800fad2:	1830      	adds	r0, r6, r0
 800fad4:	2202      	movs	r2, #2
 800fad6:	f7ff fc45 	bl	800f364 <prvListTaskWithinSingleList>
 800fada:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800fadc:	4b14      	ldr	r3, [pc, #80]	; (800fb30 <uxTaskGetSystemState+0x98>)
 800fade:	6819      	ldr	r1, [r3, #0]
 800fae0:	0160      	lsls	r0, r4, #5
 800fae2:	1830      	adds	r0, r6, r0
 800fae4:	2202      	movs	r2, #2
 800fae6:	f7ff fc3d 	bl	800f364 <prvListTaskWithinSingleList>
 800faea:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800faec:	0160      	lsls	r0, r4, #5
 800faee:	1830      	adds	r0, r6, r0
 800faf0:	2204      	movs	r2, #4
 800faf2:	4910      	ldr	r1, [pc, #64]	; (800fb34 <uxTaskGetSystemState+0x9c>)
 800faf4:	f7ff fc36 	bl	800f364 <prvListTaskWithinSingleList>
 800faf8:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800fafa:	0160      	lsls	r0, r4, #5
 800fafc:	1830      	adds	r0, r6, r0
 800fafe:	2203      	movs	r2, #3
 800fb00:	490d      	ldr	r1, [pc, #52]	; (800fb38 <uxTaskGetSystemState+0xa0>)
 800fb02:	f7ff fc2f 	bl	800f364 <prvListTaskWithinSingleList>
 800fb06:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800fb08:	4643      	mov	r3, r8
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d003      	beq.n	800fb16 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fb0e:	f7fb fe73 	bl	800b7f8 <ulMainGetRunTimeCounterValue>
 800fb12:	4643      	mov	r3, r8
 800fb14:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800fb16:	f7ff fef5 	bl	800f904 <xTaskResumeAll>
	}
 800fb1a:	0020      	movs	r0, r4
 800fb1c:	bc04      	pop	{r2}
 800fb1e:	4690      	mov	r8, r2
 800fb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb22:	46c0      	nop			; (mov r8, r8)
 800fb24:	20001e08 	.word	0x20001e08
 800fb28:	20001df0 	.word	0x20001df0
 800fb2c:	20001d70 	.word	0x20001d70
 800fb30:	20001d74 	.word	0x20001d74
 800fb34:	20001e78 	.word	0x20001e78
 800fb38:	20001e64 	.word	0x20001e64

0800fb3c <vTaskSwitchContext>:
{
 800fb3c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fb3e:	4b3a      	ldr	r3, [pc, #232]	; (800fc28 <vTaskSwitchContext+0xec>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d003      	beq.n	800fb4e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800fb46:	4b39      	ldr	r3, [pc, #228]	; (800fc2c <vTaskSwitchContext+0xf0>)
 800fb48:	2201      	movs	r2, #1
 800fb4a:	601a      	str	r2, [r3, #0]
}
 800fb4c:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800fb4e:	4b37      	ldr	r3, [pc, #220]	; (800fc2c <vTaskSwitchContext+0xf0>)
 800fb50:	2200      	movs	r2, #0
 800fb52:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fb54:	f7fb fe50 	bl	800b7f8 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fb58:	4b35      	ldr	r3, [pc, #212]	; (800fc30 <vTaskSwitchContext+0xf4>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4298      	cmp	r0, r3
 800fb5e:	d905      	bls.n	800fb6c <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fb60:	4a34      	ldr	r2, [pc, #208]	; (800fc34 <vTaskSwitchContext+0xf8>)
 800fb62:	6812      	ldr	r2, [r2, #0]
 800fb64:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fb66:	1acb      	subs	r3, r1, r3
 800fb68:	181b      	adds	r3, r3, r0
 800fb6a:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800fb6c:	4b30      	ldr	r3, [pc, #192]	; (800fc30 <vTaskSwitchContext+0xf4>)
 800fb6e:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fb70:	4b30      	ldr	r3, [pc, #192]	; (800fc34 <vTaskSwitchContext+0xf8>)
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	6812      	ldr	r2, [r2, #0]
 800fb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d805      	bhi.n	800fb8a <vTaskSwitchContext+0x4e>
 800fb7e:	4b2d      	ldr	r3, [pc, #180]	; (800fc34 <vTaskSwitchContext+0xf8>)
 800fb80:	6818      	ldr	r0, [r3, #0]
 800fb82:	6819      	ldr	r1, [r3, #0]
 800fb84:	3134      	adds	r1, #52	; 0x34
 800fb86:	f7fe f805 	bl	800db94 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fb8a:	4b2a      	ldr	r3, [pc, #168]	; (800fc34 <vTaskSwitchContext+0xf8>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fb90:	2214      	movs	r2, #20
 800fb92:	4929      	ldr	r1, [pc, #164]	; (800fc38 <vTaskSwitchContext+0xfc>)
 800fb94:	f004 fb78 	bl	8014288 <memcmp>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	d005      	beq.n	800fba8 <vTaskSwitchContext+0x6c>
 800fb9c:	4b25      	ldr	r3, [pc, #148]	; (800fc34 <vTaskSwitchContext+0xf8>)
 800fb9e:	6818      	ldr	r0, [r3, #0]
 800fba0:	6819      	ldr	r1, [r3, #0]
 800fba2:	3134      	adds	r1, #52	; 0x34
 800fba4:	f7fd fff6 	bl	800db94 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fba8:	4b24      	ldr	r3, [pc, #144]	; (800fc3c <vTaskSwitchContext+0x100>)
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	0093      	lsls	r3, r2, #2
 800fbae:	189b      	adds	r3, r3, r2
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	4a23      	ldr	r2, [pc, #140]	; (800fc40 <vTaskSwitchContext+0x104>)
 800fbb4:	589b      	ldr	r3, [r3, r2]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d115      	bne.n	800fbe6 <vTaskSwitchContext+0xaa>
 800fbba:	4b20      	ldr	r3, [pc, #128]	; (800fc3c <vTaskSwitchContext+0x100>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d00f      	beq.n	800fbe2 <vTaskSwitchContext+0xa6>
 800fbc2:	4a1e      	ldr	r2, [pc, #120]	; (800fc3c <vTaskSwitchContext+0x100>)
 800fbc4:	4c1e      	ldr	r4, [pc, #120]	; (800fc40 <vTaskSwitchContext+0x104>)
 800fbc6:	0010      	movs	r0, r2
 800fbc8:	6813      	ldr	r3, [r2, #0]
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	6013      	str	r3, [r2, #0]
 800fbce:	6811      	ldr	r1, [r2, #0]
 800fbd0:	008b      	lsls	r3, r1, #2
 800fbd2:	185b      	adds	r3, r3, r1
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	591b      	ldr	r3, [r3, r4]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d104      	bne.n	800fbe6 <vTaskSwitchContext+0xaa>
 800fbdc:	6803      	ldr	r3, [r0, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1f2      	bne.n	800fbc8 <vTaskSwitchContext+0x8c>
 800fbe2:	b672      	cpsid	i
 800fbe4:	e7fe      	b.n	800fbe4 <vTaskSwitchContext+0xa8>
 800fbe6:	4b15      	ldr	r3, [pc, #84]	; (800fc3c <vTaskSwitchContext+0x100>)
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	4c15      	ldr	r4, [pc, #84]	; (800fc40 <vTaskSwitchContext+0x104>)
 800fbec:	0093      	lsls	r3, r2, #2
 800fbee:	1899      	adds	r1, r3, r2
 800fbf0:	0089      	lsls	r1, r1, #2
 800fbf2:	1861      	adds	r1, r4, r1
 800fbf4:	6848      	ldr	r0, [r1, #4]
 800fbf6:	6840      	ldr	r0, [r0, #4]
 800fbf8:	6048      	str	r0, [r1, #4]
 800fbfa:	189b      	adds	r3, r3, r2
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	3308      	adds	r3, #8
 800fc00:	191b      	adds	r3, r3, r4
 800fc02:	4298      	cmp	r0, r3
 800fc04:	d009      	beq.n	800fc1a <vTaskSwitchContext+0xde>
 800fc06:	0093      	lsls	r3, r2, #2
 800fc08:	189a      	adds	r2, r3, r2
 800fc0a:	0092      	lsls	r2, r2, #2
 800fc0c:	4b0c      	ldr	r3, [pc, #48]	; (800fc40 <vTaskSwitchContext+0x104>)
 800fc0e:	189a      	adds	r2, r3, r2
 800fc10:	6853      	ldr	r3, [r2, #4]
 800fc12:	68da      	ldr	r2, [r3, #12]
 800fc14:	4b07      	ldr	r3, [pc, #28]	; (800fc34 <vTaskSwitchContext+0xf8>)
 800fc16:	601a      	str	r2, [r3, #0]
}
 800fc18:	e798      	b.n	800fb4c <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fc1a:	6840      	ldr	r0, [r0, #4]
 800fc1c:	2114      	movs	r1, #20
 800fc1e:	4351      	muls	r1, r2
 800fc20:	1863      	adds	r3, r4, r1
 800fc22:	6058      	str	r0, [r3, #4]
 800fc24:	e7ef      	b.n	800fc06 <vTaskSwitchContext+0xca>
 800fc26:	46c0      	nop			; (mov r8, r8)
 800fc28:	20001e10 	.word	0x20001e10
 800fc2c:	20001e90 	.word	0x20001e90
 800fc30:	20001e04 	.word	0x20001e04
 800fc34:	20001d6c 	.word	0x20001d6c
 800fc38:	0801b9fc 	.word	0x0801b9fc
 800fc3c:	20001e1c 	.word	0x20001e1c
 800fc40:	20001d78 	.word	0x20001d78

0800fc44 <vTaskPlaceOnEventList>:
{
 800fc44:	b570      	push	{r4, r5, r6, lr}
 800fc46:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	d101      	bne.n	800fc50 <vTaskPlaceOnEventList+0xc>
 800fc4c:	b672      	cpsid	i
 800fc4e:	e7fe      	b.n	800fc4e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc50:	4d0b      	ldr	r5, [pc, #44]	; (800fc80 <vTaskPlaceOnEventList+0x3c>)
 800fc52:	6829      	ldr	r1, [r5, #0]
 800fc54:	3118      	adds	r1, #24
 800fc56:	f7ff f823 	bl	800eca0 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fc5a:	6828      	ldr	r0, [r5, #0]
 800fc5c:	3004      	adds	r0, #4
 800fc5e:	f7ff f836 	bl	800ecce <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800fc62:	1c63      	adds	r3, r4, #1
 800fc64:	d005      	beq.n	800fc72 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800fc66:	4b07      	ldr	r3, [pc, #28]	; (800fc84 <vTaskPlaceOnEventList+0x40>)
 800fc68:	6818      	ldr	r0, [r3, #0]
 800fc6a:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fc6c:	f7ff fbe4 	bl	800f438 <prvAddCurrentTaskToDelayedList>
}
 800fc70:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fc72:	4b03      	ldr	r3, [pc, #12]	; (800fc80 <vTaskPlaceOnEventList+0x3c>)
 800fc74:	6819      	ldr	r1, [r3, #0]
 800fc76:	3104      	adds	r1, #4
 800fc78:	4803      	ldr	r0, [pc, #12]	; (800fc88 <vTaskPlaceOnEventList+0x44>)
 800fc7a:	f7ff f805 	bl	800ec88 <vListInsertEnd>
 800fc7e:	e7f7      	b.n	800fc70 <vTaskPlaceOnEventList+0x2c>
 800fc80:	20001d6c 	.word	0x20001d6c
 800fc84:	20001e8c 	.word	0x20001e8c
 800fc88:	20001e64 	.word	0x20001e64

0800fc8c <vTaskPlaceOnEventListRestricted>:
	{
 800fc8c:	b570      	push	{r4, r5, r6, lr}
 800fc8e:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d101      	bne.n	800fc98 <vTaskPlaceOnEventListRestricted+0xc>
 800fc94:	b672      	cpsid	i
 800fc96:	e7fe      	b.n	800fc96 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc98:	4c07      	ldr	r4, [pc, #28]	; (800fcb8 <vTaskPlaceOnEventListRestricted+0x2c>)
 800fc9a:	6821      	ldr	r1, [r4, #0]
 800fc9c:	3118      	adds	r1, #24
 800fc9e:	f7fe fff3 	bl	800ec88 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fca2:	6820      	ldr	r0, [r4, #0]
 800fca4:	3004      	adds	r0, #4
 800fca6:	f7ff f812 	bl	800ecce <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800fcaa:	4b04      	ldr	r3, [pc, #16]	; (800fcbc <vTaskPlaceOnEventListRestricted+0x30>)
 800fcac:	6818      	ldr	r0, [r3, #0]
 800fcae:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fcb0:	f7ff fbc2 	bl	800f438 <prvAddCurrentTaskToDelayedList>
	}
 800fcb4:	bd70      	pop	{r4, r5, r6, pc}
 800fcb6:	46c0      	nop			; (mov r8, r8)
 800fcb8:	20001d6c 	.word	0x20001d6c
 800fcbc:	20001e8c 	.word	0x20001e8c

0800fcc0 <xTaskRemoveFromEventList>:
{
 800fcc0:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fcc2:	68c3      	ldr	r3, [r0, #12]
 800fcc4:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800fcc6:	2d00      	cmp	r5, #0
 800fcc8:	d101      	bne.n	800fcce <xTaskRemoveFromEventList+0xe>
 800fcca:	b672      	cpsid	i
 800fccc:	e7fe      	b.n	800fccc <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fcce:	002c      	movs	r4, r5
 800fcd0:	3418      	adds	r4, #24
 800fcd2:	0020      	movs	r0, r4
 800fcd4:	f7fe fffb 	bl	800ecce <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcd8:	4b13      	ldr	r3, [pc, #76]	; (800fd28 <xTaskRemoveFromEventList+0x68>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d11e      	bne.n	800fd1e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800fce0:	1d2c      	adds	r4, r5, #4
 800fce2:	0020      	movs	r0, r4
 800fce4:	f7fe fff3 	bl	800ecce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fce8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fcea:	4a10      	ldr	r2, [pc, #64]	; (800fd2c <xTaskRemoveFromEventList+0x6c>)
 800fcec:	6812      	ldr	r2, [r2, #0]
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d901      	bls.n	800fcf6 <xTaskRemoveFromEventList+0x36>
 800fcf2:	4a0e      	ldr	r2, [pc, #56]	; (800fd2c <xTaskRemoveFromEventList+0x6c>)
 800fcf4:	6013      	str	r3, [r2, #0]
 800fcf6:	0098      	lsls	r0, r3, #2
 800fcf8:	18c0      	adds	r0, r0, r3
 800fcfa:	0080      	lsls	r0, r0, #2
 800fcfc:	4b0c      	ldr	r3, [pc, #48]	; (800fd30 <xTaskRemoveFromEventList+0x70>)
 800fcfe:	18c0      	adds	r0, r0, r3
 800fd00:	0021      	movs	r1, r4
 800fd02:	f7fe ffc1 	bl	800ec88 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd06:	4b0b      	ldr	r3, [pc, #44]	; (800fd34 <xTaskRemoveFromEventList+0x74>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800fd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800fd0e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d903      	bls.n	800fd1c <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800fd14:	4b08      	ldr	r3, [pc, #32]	; (800fd38 <xTaskRemoveFromEventList+0x78>)
 800fd16:	2201      	movs	r2, #1
 800fd18:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800fd1a:	3001      	adds	r0, #1
}
 800fd1c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fd1e:	0021      	movs	r1, r4
 800fd20:	4806      	ldr	r0, [pc, #24]	; (800fd3c <xTaskRemoveFromEventList+0x7c>)
 800fd22:	f7fe ffb1 	bl	800ec88 <vListInsertEnd>
 800fd26:	e7ee      	b.n	800fd06 <xTaskRemoveFromEventList+0x46>
 800fd28:	20001e10 	.word	0x20001e10
 800fd2c:	20001e1c 	.word	0x20001e1c
 800fd30:	20001d78 	.word	0x20001d78
 800fd34:	20001d6c 	.word	0x20001d6c
 800fd38:	20001e90 	.word	0x20001e90
 800fd3c:	20001e4c 	.word	0x20001e4c

0800fd40 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800fd40:	2800      	cmp	r0, #0
 800fd42:	d006      	beq.n	800fd52 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd44:	4b04      	ldr	r3, [pc, #16]	; (800fd58 <vTaskSetTimeOutState+0x18>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd4a:	4b04      	ldr	r3, [pc, #16]	; (800fd5c <vTaskSetTimeOutState+0x1c>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	6043      	str	r3, [r0, #4]
}
 800fd50:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800fd52:	b672      	cpsid	i
 800fd54:	e7fe      	b.n	800fd54 <vTaskSetTimeOutState+0x14>
 800fd56:	46c0      	nop			; (mov r8, r8)
 800fd58:	20001e48 	.word	0x20001e48
 800fd5c:	20001e8c 	.word	0x20001e8c

0800fd60 <xTaskCheckForTimeOut>:
{
 800fd60:	b570      	push	{r4, r5, r6, lr}
 800fd62:	0004      	movs	r4, r0
 800fd64:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d003      	beq.n	800fd72 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800fd6a:	2900      	cmp	r1, #0
 800fd6c:	d103      	bne.n	800fd76 <xTaskCheckForTimeOut+0x16>
 800fd6e:	b672      	cpsid	i
 800fd70:	e7fe      	b.n	800fd70 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800fd72:	b672      	cpsid	i
 800fd74:	e7fe      	b.n	800fd74 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800fd76:	f000 fc5f 	bl	8010638 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fd7a:	4b10      	ldr	r3, [pc, #64]	; (800fdbc <xTaskCheckForTimeOut+0x5c>)
 800fd7c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800fd7e:	6833      	ldr	r3, [r6, #0]
 800fd80:	1c59      	adds	r1, r3, #1
 800fd82:	d019      	beq.n	800fdb8 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd84:	490e      	ldr	r1, [pc, #56]	; (800fdc0 <xTaskCheckForTimeOut+0x60>)
 800fd86:	6809      	ldr	r1, [r1, #0]
 800fd88:	6820      	ldr	r0, [r4, #0]
 800fd8a:	4288      	cmp	r0, r1
 800fd8c:	d003      	beq.n	800fd96 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800fd8e:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd90:	6861      	ldr	r1, [r4, #4]
 800fd92:	4291      	cmp	r1, r2
 800fd94:	d904      	bls.n	800fda0 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800fd96:	6861      	ldr	r1, [r4, #4]
 800fd98:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800fd9a:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800fd9c:	4283      	cmp	r3, r0
 800fd9e:	d803      	bhi.n	800fda8 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800fda0:	f000 fc56 	bl	8010650 <vPortExitCritical>
}
 800fda4:	0028      	movs	r0, r5
 800fda6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800fda8:	1a9b      	subs	r3, r3, r2
 800fdaa:	185b      	adds	r3, r3, r1
 800fdac:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800fdae:	0020      	movs	r0, r4
 800fdb0:	f7ff ffc6 	bl	800fd40 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800fdb4:	2500      	movs	r5, #0
 800fdb6:	e7f3      	b.n	800fda0 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800fdb8:	2500      	movs	r5, #0
 800fdba:	e7f1      	b.n	800fda0 <xTaskCheckForTimeOut+0x40>
 800fdbc:	20001e8c 	.word	0x20001e8c
 800fdc0:	20001e48 	.word	0x20001e48

0800fdc4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800fdc4:	4b01      	ldr	r3, [pc, #4]	; (800fdcc <vTaskMissedYield+0x8>)
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	601a      	str	r2, [r3, #0]
}
 800fdca:	4770      	bx	lr
 800fdcc:	20001e90 	.word	0x20001e90

0800fdd0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800fdd0:	4b05      	ldr	r3, [pc, #20]	; (800fde8 <xTaskGetSchedulerState+0x18>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fdd4:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d004      	beq.n	800fde4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdda:	4b04      	ldr	r3, [pc, #16]	; (800fdec <xTaskGetSchedulerState+0x1c>)
 800fddc:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800fdde:	4243      	negs	r3, r0
 800fde0:	4158      	adcs	r0, r3
 800fde2:	0040      	lsls	r0, r0, #1
	}
 800fde4:	4770      	bx	lr
 800fde6:	46c0      	nop			; (mov r8, r8)
 800fde8:	20001e60 	.word	0x20001e60
 800fdec:	20001e10 	.word	0x20001e10

0800fdf0 <vTaskPriorityInherit>:
	{
 800fdf0:	b570      	push	{r4, r5, r6, lr}
 800fdf2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fdf4:	d01a      	beq.n	800fe2c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fdf6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fdf8:	4b19      	ldr	r3, [pc, #100]	; (800fe60 <vTaskPriorityInherit+0x70>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d214      	bcs.n	800fe2c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe02:	6983      	ldr	r3, [r0, #24]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	db05      	blt.n	800fe14 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe08:	4b15      	ldr	r3, [pc, #84]	; (800fe60 <vTaskPriorityInherit+0x70>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fe0e:	2307      	movs	r3, #7
 800fe10:	1a5b      	subs	r3, r3, r1
 800fe12:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800fe14:	0093      	lsls	r3, r2, #2
 800fe16:	189b      	adds	r3, r3, r2
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4a12      	ldr	r2, [pc, #72]	; (800fe64 <vTaskPriorityInherit+0x74>)
 800fe1c:	189b      	adds	r3, r3, r2
 800fe1e:	6962      	ldr	r2, [r4, #20]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d004      	beq.n	800fe2e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe24:	4b0e      	ldr	r3, [pc, #56]	; (800fe60 <vTaskPriorityInherit+0x70>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe2a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800fe2c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fe2e:	1d25      	adds	r5, r4, #4
 800fe30:	0028      	movs	r0, r5
 800fe32:	f7fe ff4c 	bl	800ecce <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe36:	4b0a      	ldr	r3, [pc, #40]	; (800fe60 <vTaskPriorityInherit+0x70>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800fe3e:	4a0a      	ldr	r2, [pc, #40]	; (800fe68 <vTaskPriorityInherit+0x78>)
 800fe40:	6812      	ldr	r2, [r2, #0]
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d808      	bhi.n	800fe58 <vTaskPriorityInherit+0x68>
 800fe46:	0098      	lsls	r0, r3, #2
 800fe48:	18c0      	adds	r0, r0, r3
 800fe4a:	0080      	lsls	r0, r0, #2
 800fe4c:	4b05      	ldr	r3, [pc, #20]	; (800fe64 <vTaskPriorityInherit+0x74>)
 800fe4e:	18c0      	adds	r0, r0, r3
 800fe50:	0029      	movs	r1, r5
 800fe52:	f7fe ff19 	bl	800ec88 <vListInsertEnd>
	}
 800fe56:	e7e9      	b.n	800fe2c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800fe58:	4a03      	ldr	r2, [pc, #12]	; (800fe68 <vTaskPriorityInherit+0x78>)
 800fe5a:	6013      	str	r3, [r2, #0]
 800fe5c:	e7f3      	b.n	800fe46 <vTaskPriorityInherit+0x56>
 800fe5e:	46c0      	nop			; (mov r8, r8)
 800fe60:	20001d6c 	.word	0x20001d6c
 800fe64:	20001d78 	.word	0x20001d78
 800fe68:	20001e1c 	.word	0x20001e1c

0800fe6c <xTaskPriorityDisinherit>:
	{
 800fe6c:	b570      	push	{r4, r5, r6, lr}
 800fe6e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fe70:	d02b      	beq.n	800feca <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800fe72:	4b18      	ldr	r3, [pc, #96]	; (800fed4 <xTaskPriorityDisinherit+0x68>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4283      	cmp	r3, r0
 800fe78:	d001      	beq.n	800fe7e <xTaskPriorityDisinherit+0x12>
 800fe7a:	b672      	cpsid	i
 800fe7c:	e7fe      	b.n	800fe7c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d101      	bne.n	800fe88 <xTaskPriorityDisinherit+0x1c>
 800fe84:	b672      	cpsid	i
 800fe86:	e7fe      	b.n	800fe86 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800fe88:	3b01      	subs	r3, #1
 800fe8a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe8c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fe8e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800fe90:	428a      	cmp	r2, r1
 800fe92:	d01c      	beq.n	800fece <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800fe94:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe96:	4283      	cmp	r3, r0
 800fe98:	d118      	bne.n	800fecc <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fe9a:	1d25      	adds	r5, r4, #4
 800fe9c:	0028      	movs	r0, r5
 800fe9e:	f7fe ff16 	bl	800ecce <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fea2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fea4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fea6:	2207      	movs	r2, #7
 800fea8:	1ad2      	subs	r2, r2, r3
 800feaa:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800feac:	4a0a      	ldr	r2, [pc, #40]	; (800fed8 <xTaskPriorityDisinherit+0x6c>)
 800feae:	6812      	ldr	r2, [r2, #0]
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d901      	bls.n	800feb8 <xTaskPriorityDisinherit+0x4c>
 800feb4:	4a08      	ldr	r2, [pc, #32]	; (800fed8 <xTaskPriorityDisinherit+0x6c>)
 800feb6:	6013      	str	r3, [r2, #0]
 800feb8:	2014      	movs	r0, #20
 800feba:	4358      	muls	r0, r3
 800febc:	4b07      	ldr	r3, [pc, #28]	; (800fedc <xTaskPriorityDisinherit+0x70>)
 800febe:	18c0      	adds	r0, r0, r3
 800fec0:	0029      	movs	r1, r5
 800fec2:	f7fe fee1 	bl	800ec88 <vListInsertEnd>
					xReturn = pdTRUE;
 800fec6:	2001      	movs	r0, #1
 800fec8:	e000      	b.n	800fecc <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800feca:	2000      	movs	r0, #0
	}
 800fecc:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800fece:	2000      	movs	r0, #0
 800fed0:	e7fc      	b.n	800fecc <xTaskPriorityDisinherit+0x60>
 800fed2:	46c0      	nop			; (mov r8, r8)
 800fed4:	20001d6c 	.word	0x20001d6c
 800fed8:	20001e1c 	.word	0x20001e1c
 800fedc:	20001d78 	.word	0x20001d78

0800fee0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800fee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fee2:	b085      	sub	sp, #20
 800fee4:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800fee6:	2300      	movs	r3, #0
 800fee8:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800feea:	4b2b      	ldr	r3, [pc, #172]	; (800ff98 <vTaskList+0xb8>)
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fef0:	6818      	ldr	r0, [r3, #0]
 800fef2:	0140      	lsls	r0, r0, #5
 800fef4:	f000 fc22 	bl	801073c <pvPortMalloc>
 800fef8:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800fefa:	d04a      	beq.n	800ff92 <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800fefc:	9903      	ldr	r1, [sp, #12]
 800fefe:	2200      	movs	r2, #0
 800ff00:	f7ff fdca 	bl	800fa98 <uxTaskGetSystemState>
 800ff04:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ff06:	2300      	movs	r3, #0
 800ff08:	9302      	str	r3, [sp, #8]
 800ff0a:	9a02      	ldr	r2, [sp, #8]
 800ff0c:	9b03      	ldr	r3, [sp, #12]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d23c      	bcs.n	800ff8c <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ff12:	4e22      	ldr	r6, [pc, #136]	; (800ff9c <vTaskList+0xbc>)
 800ff14:	e027      	b.n	800ff66 <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800ff16:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d133      	bne.n	800ff84 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ff1c:	9b02      	ldr	r3, [sp, #8]
 800ff1e:	015b      	lsls	r3, r3, #5
 800ff20:	18fb      	adds	r3, r7, r3
 800ff22:	6859      	ldr	r1, [r3, #4]
 800ff24:	0020      	movs	r0, r4
 800ff26:	f7ff fab1 	bl	800f48c <prvWriteNameToBuffer>
 800ff2a:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ff2c:	9b02      	ldr	r3, [sp, #8]
 800ff2e:	9a02      	ldr	r2, [sp, #8]
 800ff30:	9902      	ldr	r1, [sp, #8]
 800ff32:	015b      	lsls	r3, r3, #5
 800ff34:	18fb      	adds	r3, r7, r3
 800ff36:	691b      	ldr	r3, [r3, #16]
 800ff38:	0149      	lsls	r1, r1, #5
 800ff3a:	1879      	adds	r1, r7, r1
 800ff3c:	6889      	ldr	r1, [r1, #8]
 800ff3e:	9101      	str	r1, [sp, #4]
 800ff40:	0152      	lsls	r2, r2, #5
 800ff42:	18ba      	adds	r2, r7, r2
 800ff44:	8b92      	ldrh	r2, [r2, #28]
 800ff46:	9200      	str	r2, [sp, #0]
 800ff48:	002a      	movs	r2, r5
 800ff4a:	0031      	movs	r1, r6
 800ff4c:	f004 fbe0 	bl	8014710 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ff50:	0020      	movs	r0, r4
 800ff52:	f7f0 f8e1 	bl	8000118 <strlen>
 800ff56:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ff58:	9b02      	ldr	r3, [sp, #8]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	9302      	str	r3, [sp, #8]
 800ff5e:	9a02      	ldr	r2, [sp, #8]
 800ff60:	9b03      	ldr	r3, [sp, #12]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d212      	bcs.n	800ff8c <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff66:	9b02      	ldr	r3, [sp, #8]
 800ff68:	015b      	lsls	r3, r3, #5
 800ff6a:	18fb      	adds	r3, r7, r3
 800ff6c:	7b1b      	ldrb	r3, [r3, #12]
 800ff6e:	2b02      	cmp	r3, #2
 800ff70:	d00a      	beq.n	800ff88 <vTaskList+0xa8>
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	2a02      	cmp	r2, #2
 800ff76:	d9ce      	bls.n	800ff16 <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ff78:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d0ce      	beq.n	800ff1c <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ff7e:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff80:	2b04      	cmp	r3, #4
 800ff82:	d0cb      	beq.n	800ff1c <vTaskList+0x3c>
										cStatus = 0x00;
 800ff84:	2500      	movs	r5, #0
										break;
 800ff86:	e7c9      	b.n	800ff1c <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ff88:	2542      	movs	r5, #66	; 0x42
 800ff8a:	e7c7      	b.n	800ff1c <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ff8c:	0038      	movs	r0, r7
 800ff8e:	f000 fc6b 	bl	8010868 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff92:	b005      	add	sp, #20
 800ff94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff96:	46c0      	nop			; (mov r8, r8)
 800ff98:	20001e08 	.word	0x20001e08
 800ff9c:	0801ba28 	.word	0x0801ba28

0800ffa0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ffa0:	b570      	push	{r4, r5, r6, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ffaa:	4b26      	ldr	r3, [pc, #152]	; (8010044 <vTaskGetRunTimeStats+0xa4>)
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ffb0:	6818      	ldr	r0, [r3, #0]
 800ffb2:	0140      	lsls	r0, r0, #5
 800ffb4:	f000 fbc2 	bl	801073c <pvPortMalloc>
 800ffb8:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800ffba:	d014      	beq.n	800ffe6 <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ffbc:	9903      	ldr	r1, [sp, #12]
 800ffbe:	aa01      	add	r2, sp, #4
 800ffc0:	f7ff fd6a 	bl	800fa98 <uxTaskGetSystemState>
 800ffc4:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ffc6:	2164      	movs	r1, #100	; 0x64
 800ffc8:	9801      	ldr	r0, [sp, #4]
 800ffca:	f7f0 f8c1 	bl	8000150 <__udivsi3>
 800ffce:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d005      	beq.n	800ffe0 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	9302      	str	r3, [sp, #8]
 800ffd8:	9a02      	ldr	r2, [sp, #8]
 800ffda:	9b03      	ldr	r3, [sp, #12]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d316      	bcc.n	801000e <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ffe0:	0030      	movs	r0, r6
 800ffe2:	f000 fc41 	bl	8010868 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ffe6:	b004      	add	sp, #16
 800ffe8:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ffea:	9b02      	ldr	r3, [sp, #8]
 800ffec:	015b      	lsls	r3, r3, #5
 800ffee:	18f3      	adds	r3, r6, r3
 800fff0:	699a      	ldr	r2, [r3, #24]
 800fff2:	4915      	ldr	r1, [pc, #84]	; (8010048 <vTaskGetRunTimeStats+0xa8>)
 800fff4:	f004 fb8c 	bl	8014710 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800fff8:	0020      	movs	r0, r4
 800fffa:	f7f0 f88d 	bl	8000118 <strlen>
 800fffe:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8010000:	9b02      	ldr	r3, [sp, #8]
 8010002:	3301      	adds	r3, #1
 8010004:	9302      	str	r3, [sp, #8]
 8010006:	9a02      	ldr	r2, [sp, #8]
 8010008:	9b03      	ldr	r3, [sp, #12]
 801000a:	429a      	cmp	r2, r3
 801000c:	d2e8      	bcs.n	800ffe0 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 801000e:	9b02      	ldr	r3, [sp, #8]
 8010010:	015b      	lsls	r3, r3, #5
 8010012:	18f3      	adds	r3, r6, r3
 8010014:	9901      	ldr	r1, [sp, #4]
 8010016:	6998      	ldr	r0, [r3, #24]
 8010018:	f7f0 f89a 	bl	8000150 <__udivsi3>
 801001c:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801001e:	9b02      	ldr	r3, [sp, #8]
 8010020:	015b      	lsls	r3, r3, #5
 8010022:	18f3      	adds	r3, r6, r3
 8010024:	6859      	ldr	r1, [r3, #4]
 8010026:	0020      	movs	r0, r4
 8010028:	f7ff fa30 	bl	800f48c <prvWriteNameToBuffer>
 801002c:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 801002e:	2d00      	cmp	r5, #0
 8010030:	d0db      	beq.n	800ffea <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8010032:	9b02      	ldr	r3, [sp, #8]
 8010034:	015b      	lsls	r3, r3, #5
 8010036:	18f3      	adds	r3, r6, r3
 8010038:	699a      	ldr	r2, [r3, #24]
 801003a:	002b      	movs	r3, r5
 801003c:	4903      	ldr	r1, [pc, #12]	; (801004c <vTaskGetRunTimeStats+0xac>)
 801003e:	f004 fb67 	bl	8014710 <sprintf>
 8010042:	e7d9      	b.n	800fff8 <vTaskGetRunTimeStats+0x58>
 8010044:	20001e08 	.word	0x20001e08
 8010048:	0801ba1c 	.word	0x0801ba1c
 801004c:	0801ba10 	.word	0x0801ba10

08010050 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010050:	4b05      	ldr	r3, [pc, #20]	; (8010068 <pvTaskIncrementMutexHeldCount+0x18>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d004      	beq.n	8010062 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010058:	4b03      	ldr	r3, [pc, #12]	; (8010068 <pvTaskIncrementMutexHeldCount+0x18>)
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801005e:	3301      	adds	r3, #1
 8010060:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010062:	4b01      	ldr	r3, [pc, #4]	; (8010068 <pvTaskIncrementMutexHeldCount+0x18>)
 8010064:	6818      	ldr	r0, [r3, #0]
	}
 8010066:	4770      	bx	lr
 8010068:	20001d6c 	.word	0x20001d6c

0801006c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801006c:	b570      	push	{r4, r5, r6, lr}
 801006e:	0005      	movs	r5, r0
 8010070:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8010072:	f000 fae1 	bl	8010638 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8010076:	4b20      	ldr	r3, [pc, #128]	; (80100f8 <ulTaskNotifyTake+0x8c>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801007c:	2b00      	cmp	r3, #0
 801007e:	d106      	bne.n	801008e <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8010080:	4b1d      	ldr	r3, [pc, #116]	; (80100f8 <ulTaskNotifyTake+0x8c>)
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	235c      	movs	r3, #92	; 0x5c
 8010086:	2101      	movs	r1, #1
 8010088:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 801008a:	2c00      	cmp	r4, #0
 801008c:	d118      	bne.n	80100c0 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801008e:	f000 fadf 	bl	8010650 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010092:	f000 fad1 	bl	8010638 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010096:	4b18      	ldr	r3, [pc, #96]	; (80100f8 <ulTaskNotifyTake+0x8c>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 801009c:	2c00      	cmp	r4, #0
 801009e:	d006      	beq.n	80100ae <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 80100a0:	2d00      	cmp	r5, #0
 80100a2:	d123      	bne.n	80100ec <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 80100a4:	4b14      	ldr	r3, [pc, #80]	; (80100f8 <ulTaskNotifyTake+0x8c>)
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80100aa:	3b01      	subs	r3, #1
 80100ac:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80100ae:	4b12      	ldr	r3, [pc, #72]	; (80100f8 <ulTaskNotifyTake+0x8c>)
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	235c      	movs	r3, #92	; 0x5c
 80100b4:	2100      	movs	r1, #0
 80100b6:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 80100b8:	f000 faca 	bl	8010650 <vPortExitCritical>

		return ulReturn;
	}
 80100bc:	0020      	movs	r0, r4
 80100be:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80100c0:	4b0d      	ldr	r3, [pc, #52]	; (80100f8 <ulTaskNotifyTake+0x8c>)
 80100c2:	6818      	ldr	r0, [r3, #0]
 80100c4:	3004      	adds	r0, #4
 80100c6:	f7fe fe02 	bl	800ecce <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 80100ca:	1c63      	adds	r3, r4, #1
 80100cc:	d007      	beq.n	80100de <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 80100ce:	4b0b      	ldr	r3, [pc, #44]	; (80100fc <ulTaskNotifyTake+0x90>)
 80100d0:	6818      	ldr	r0, [r3, #0]
 80100d2:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 80100d4:	f7ff f9b0 	bl	800f438 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80100d8:	f000 faa2 	bl	8010620 <vPortYield>
 80100dc:	e7d7      	b.n	801008e <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80100de:	4b06      	ldr	r3, [pc, #24]	; (80100f8 <ulTaskNotifyTake+0x8c>)
 80100e0:	6819      	ldr	r1, [r3, #0]
 80100e2:	3104      	adds	r1, #4
 80100e4:	4806      	ldr	r0, [pc, #24]	; (8010100 <ulTaskNotifyTake+0x94>)
 80100e6:	f7fe fdcf 	bl	800ec88 <vListInsertEnd>
 80100ea:	e7f5      	b.n	80100d8 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80100ec:	4b02      	ldr	r3, [pc, #8]	; (80100f8 <ulTaskNotifyTake+0x8c>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2200      	movs	r2, #0
 80100f2:	659a      	str	r2, [r3, #88]	; 0x58
 80100f4:	e7db      	b.n	80100ae <ulTaskNotifyTake+0x42>
 80100f6:	46c0      	nop			; (mov r8, r8)
 80100f8:	20001d6c 	.word	0x20001d6c
 80100fc:	20001e8c 	.word	0x20001e8c
 8010100:	20001e64 	.word	0x20001e64

08010104 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010106:	0004      	movs	r4, r0
 8010108:	000e      	movs	r6, r1
 801010a:	0015      	movs	r5, r2
 801010c:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 801010e:	2800      	cmp	r0, #0
 8010110:	d101      	bne.n	8010116 <xTaskGenericNotify+0x12>
 8010112:	b672      	cpsid	i
 8010114:	e7fe      	b.n	8010114 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8010116:	f000 fa8f 	bl	8010638 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801011a:	2f00      	cmp	r7, #0
 801011c:	d001      	beq.n	8010122 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801011e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010120:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8010122:	225c      	movs	r2, #92	; 0x5c
 8010124:	5ca3      	ldrb	r3, [r4, r2]
 8010126:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 8010128:	2102      	movs	r1, #2
 801012a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 801012c:	2d02      	cmp	r5, #2
 801012e:	d015      	beq.n	801015c <xTaskGenericNotify+0x58>
 8010130:	d907      	bls.n	8010142 <xTaskGenericNotify+0x3e>
 8010132:	2d03      	cmp	r5, #3
 8010134:	d016      	beq.n	8010164 <xTaskGenericNotify+0x60>
 8010136:	2d04      	cmp	r5, #4
 8010138:	d105      	bne.n	8010146 <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 801013a:	2b02      	cmp	r3, #2
 801013c:	d035      	beq.n	80101aa <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801013e:	65a6      	str	r6, [r4, #88]	; 0x58
 8010140:	e001      	b.n	8010146 <xTaskGenericNotify+0x42>
			switch( eAction )
 8010142:	2d01      	cmp	r5, #1
 8010144:	d006      	beq.n	8010154 <xTaskGenericNotify+0x50>
 8010146:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8010148:	2b01      	cmp	r3, #1
 801014a:	d00d      	beq.n	8010168 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801014c:	f000 fa80 	bl	8010650 <vPortExitCritical>

		return xReturn;
	}
 8010150:	0028      	movs	r0, r5
 8010152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 8010154:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010156:	4316      	orrs	r6, r2
 8010158:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 801015a:	e7f4      	b.n	8010146 <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 801015c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801015e:	3201      	adds	r2, #1
 8010160:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 8010162:	e7f0      	b.n	8010146 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 8010164:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 8010166:	e7ee      	b.n	8010146 <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010168:	1d25      	adds	r5, r4, #4
 801016a:	0028      	movs	r0, r5
 801016c:	f7fe fdaf 	bl	800ecce <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010172:	4a0f      	ldr	r2, [pc, #60]	; (80101b0 <xTaskGenericNotify+0xac>)
 8010174:	6812      	ldr	r2, [r2, #0]
 8010176:	4293      	cmp	r3, r2
 8010178:	d901      	bls.n	801017e <xTaskGenericNotify+0x7a>
 801017a:	4a0d      	ldr	r2, [pc, #52]	; (80101b0 <xTaskGenericNotify+0xac>)
 801017c:	6013      	str	r3, [r2, #0]
 801017e:	2014      	movs	r0, #20
 8010180:	4358      	muls	r0, r3
 8010182:	4b0c      	ldr	r3, [pc, #48]	; (80101b4 <xTaskGenericNotify+0xb0>)
 8010184:	18c0      	adds	r0, r0, r3
 8010186:	0029      	movs	r1, r5
 8010188:	f7fe fd7e 	bl	800ec88 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801018c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801018e:	2b00      	cmp	r3, #0
 8010190:	d001      	beq.n	8010196 <xTaskGenericNotify+0x92>
 8010192:	b672      	cpsid	i
 8010194:	e7fe      	b.n	8010194 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010196:	4b08      	ldr	r3, [pc, #32]	; (80101b8 <xTaskGenericNotify+0xb4>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801019c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801019e:	2501      	movs	r5, #1
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d9d3      	bls.n	801014c <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 80101a4:	f000 fa3c 	bl	8010620 <vPortYield>
 80101a8:	e7d0      	b.n	801014c <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 80101aa:	2500      	movs	r5, #0
 80101ac:	e7ce      	b.n	801014c <xTaskGenericNotify+0x48>
 80101ae:	46c0      	nop			; (mov r8, r8)
 80101b0:	20001e1c 	.word	0x20001e1c
 80101b4:	20001d78 	.word	0x20001d78
 80101b8:	20001d6c 	.word	0x20001d6c

080101bc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80101bc:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80101be:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80101c0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80101c2:	4291      	cmp	r1, r2
 80101c4:	d80b      	bhi.n	80101de <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80101c6:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80101c8:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80101ca:	6983      	ldr	r3, [r0, #24]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d211      	bcs.n	80101f4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80101d0:	1d01      	adds	r1, r0, #4
 80101d2:	4b09      	ldr	r3, [pc, #36]	; (80101f8 <prvInsertTimerInActiveList+0x3c>)
 80101d4:	6818      	ldr	r0, [r3, #0]
 80101d6:	f7fe fd63 	bl	800eca0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80101da:	2400      	movs	r4, #0
 80101dc:	e00a      	b.n	80101f4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80101de:	429a      	cmp	r2, r3
 80101e0:	d202      	bcs.n	80101e8 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80101e2:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80101e4:	4299      	cmp	r1, r3
 80101e6:	d205      	bcs.n	80101f4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80101e8:	1d01      	adds	r1, r0, #4
 80101ea:	4b04      	ldr	r3, [pc, #16]	; (80101fc <prvInsertTimerInActiveList+0x40>)
 80101ec:	6818      	ldr	r0, [r3, #0]
 80101ee:	f7fe fd57 	bl	800eca0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80101f2:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 80101f4:	0020      	movs	r0, r4
 80101f6:	bd10      	pop	{r4, pc}
 80101f8:	20001e98 	.word	0x20001e98
 80101fc:	20001e94 	.word	0x20001e94

08010200 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010200:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010202:	f000 fa19 	bl	8010638 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010206:	4b11      	ldr	r3, [pc, #68]	; (801024c <prvCheckForValidListAndQueue+0x4c>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d002      	beq.n	8010214 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801020e:	f000 fa1f 	bl	8010650 <vPortExitCritical>
}
 8010212:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8010214:	4d0e      	ldr	r5, [pc, #56]	; (8010250 <prvCheckForValidListAndQueue+0x50>)
 8010216:	0028      	movs	r0, r5
 8010218:	f7fe fd28 	bl	800ec6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801021c:	4c0d      	ldr	r4, [pc, #52]	; (8010254 <prvCheckForValidListAndQueue+0x54>)
 801021e:	0020      	movs	r0, r4
 8010220:	f7fe fd24 	bl	800ec6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010224:	4b0c      	ldr	r3, [pc, #48]	; (8010258 <prvCheckForValidListAndQueue+0x58>)
 8010226:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010228:	4b0c      	ldr	r3, [pc, #48]	; (801025c <prvCheckForValidListAndQueue+0x5c>)
 801022a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801022c:	2200      	movs	r2, #0
 801022e:	2110      	movs	r1, #16
 8010230:	2004      	movs	r0, #4
 8010232:	f7fe fe26 	bl	800ee82 <xQueueGenericCreate>
 8010236:	4b05      	ldr	r3, [pc, #20]	; (801024c <prvCheckForValidListAndQueue+0x4c>)
 8010238:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 801023a:	2800      	cmp	r0, #0
 801023c:	d101      	bne.n	8010242 <prvCheckForValidListAndQueue+0x42>
 801023e:	b672      	cpsid	i
 8010240:	e7fe      	b.n	8010240 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010242:	4907      	ldr	r1, [pc, #28]	; (8010260 <prvCheckForValidListAndQueue+0x60>)
 8010244:	f7ff f856 	bl	800f2f4 <vQueueAddToRegistry>
 8010248:	e7e1      	b.n	801020e <prvCheckForValidListAndQueue+0xe>
 801024a:	46c0      	nop			; (mov r8, r8)
 801024c:	20001ec8 	.word	0x20001ec8
 8010250:	20001e9c 	.word	0x20001e9c
 8010254:	20001eb0 	.word	0x20001eb0
 8010258:	20001e94 	.word	0x20001e94
 801025c:	20001e98 	.word	0x20001e98
 8010260:	0801ba68 	.word	0x0801ba68

08010264 <xTimerCreateTimerTask>:
{
 8010264:	b500      	push	{lr}
 8010266:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 8010268:	f7ff ffca 	bl	8010200 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801026c:	4b0a      	ldr	r3, [pc, #40]	; (8010298 <xTimerCreateTimerTask+0x34>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d00d      	beq.n	8010290 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8010274:	2300      	movs	r3, #0
 8010276:	9303      	str	r3, [sp, #12]
 8010278:	9302      	str	r3, [sp, #8]
 801027a:	9301      	str	r3, [sp, #4]
 801027c:	3303      	adds	r3, #3
 801027e:	9300      	str	r3, [sp, #0]
 8010280:	2300      	movs	r3, #0
 8010282:	22a0      	movs	r2, #160	; 0xa0
 8010284:	4905      	ldr	r1, [pc, #20]	; (801029c <xTimerCreateTimerTask+0x38>)
 8010286:	4806      	ldr	r0, [pc, #24]	; (80102a0 <xTimerCreateTimerTask+0x3c>)
 8010288:	f7ff f918 	bl	800f4bc <xTaskGenericCreate>
	configASSERT( xReturn );
 801028c:	2800      	cmp	r0, #0
 801028e:	d101      	bne.n	8010294 <xTimerCreateTimerTask+0x30>
 8010290:	b672      	cpsid	i
 8010292:	e7fe      	b.n	8010292 <xTimerCreateTimerTask+0x2e>
}
 8010294:	b005      	add	sp, #20
 8010296:	bd00      	pop	{pc}
 8010298:	20001ec8 	.word	0x20001ec8
 801029c:	0801ba70 	.word	0x0801ba70
 80102a0:	080103ed 	.word	0x080103ed

080102a4 <xTimerCreate>:
{
 80102a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102a6:	46c6      	mov	lr, r8
 80102a8:	b500      	push	{lr}
 80102aa:	4680      	mov	r8, r0
 80102ac:	000d      	movs	r5, r1
 80102ae:	0017      	movs	r7, r2
 80102b0:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 80102b2:	2900      	cmp	r1, #0
 80102b4:	d014      	beq.n	80102e0 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80102b6:	202c      	movs	r0, #44	; 0x2c
 80102b8:	f000 fa40 	bl	801073c <pvPortMalloc>
 80102bc:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 80102be:	d00b      	beq.n	80102d8 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 80102c0:	f7ff ff9e 	bl	8010200 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 80102c4:	4643      	mov	r3, r8
 80102c6:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80102c8:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 80102ca:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 80102cc:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80102ce:	9b06      	ldr	r3, [sp, #24]
 80102d0:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80102d2:	1d20      	adds	r0, r4, #4
 80102d4:	f7fe fcd5 	bl	800ec82 <vListInitialiseItem>
}
 80102d8:	0020      	movs	r0, r4
 80102da:	bc04      	pop	{r2}
 80102dc:	4690      	mov	r8, r2
 80102de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80102e0:	b672      	cpsid	i
 80102e2:	e7fe      	b.n	80102e2 <xTimerCreate+0x3e>

080102e4 <xTimerGenericCommand>:
{
 80102e4:	b530      	push	{r4, r5, lr}
 80102e6:	b085      	sub	sp, #20
 80102e8:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 80102ea:	4b13      	ldr	r3, [pc, #76]	; (8010338 <xTimerGenericCommand+0x54>)
 80102ec:	681c      	ldr	r4, [r3, #0]
 80102ee:	2c00      	cmp	r4, #0
 80102f0:	d020      	beq.n	8010334 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 80102f2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80102f4:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80102f6:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80102f8:	2905      	cmp	r1, #5
 80102fa:	dc13      	bgt.n	8010324 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80102fc:	f7ff fd68 	bl	800fdd0 <xTaskGetSchedulerState>
 8010300:	2802      	cmp	r0, #2
 8010302:	d007      	beq.n	8010314 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010304:	4b0c      	ldr	r3, [pc, #48]	; (8010338 <xTimerGenericCommand+0x54>)
 8010306:	6818      	ldr	r0, [r3, #0]
 8010308:	2300      	movs	r3, #0
 801030a:	2200      	movs	r2, #0
 801030c:	4669      	mov	r1, sp
 801030e:	f7fe fdf3 	bl	800eef8 <xQueueGenericSend>
 8010312:	e00d      	b.n	8010330 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010314:	4b08      	ldr	r3, [pc, #32]	; (8010338 <xTimerGenericCommand+0x54>)
 8010316:	6818      	ldr	r0, [r3, #0]
 8010318:	2300      	movs	r3, #0
 801031a:	9a08      	ldr	r2, [sp, #32]
 801031c:	4669      	mov	r1, sp
 801031e:	f7fe fdeb 	bl	800eef8 <xQueueGenericSend>
 8010322:	e005      	b.n	8010330 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010324:	2300      	movs	r3, #0
 8010326:	002a      	movs	r2, r5
 8010328:	4669      	mov	r1, sp
 801032a:	0020      	movs	r0, r4
 801032c:	f7fe fe7b 	bl	800f026 <xQueueGenericSendFromISR>
}
 8010330:	b005      	add	sp, #20
 8010332:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8010334:	2000      	movs	r0, #0
	return xReturn;
 8010336:	e7fb      	b.n	8010330 <xTimerGenericCommand+0x4c>
 8010338:	20001ec8 	.word	0x20001ec8

0801033c <prvSampleTimeNow>:
{
 801033c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801033e:	46d6      	mov	lr, sl
 8010340:	464f      	mov	r7, r9
 8010342:	4646      	mov	r6, r8
 8010344:	b5c0      	push	{r6, r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 801034a:	f7ff fa43 	bl	800f7d4 <xTaskGetTickCount>
 801034e:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 8010350:	4b23      	ldr	r3, [pc, #140]	; (80103e0 <prvSampleTimeNow+0xa4>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4283      	cmp	r3, r0
 8010356:	d80b      	bhi.n	8010370 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 8010358:	2300      	movs	r3, #0
 801035a:	4642      	mov	r2, r8
 801035c:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 801035e:	4b20      	ldr	r3, [pc, #128]	; (80103e0 <prvSampleTimeNow+0xa4>)
 8010360:	601f      	str	r7, [r3, #0]
}
 8010362:	0038      	movs	r0, r7
 8010364:	b004      	add	sp, #16
 8010366:	bc1c      	pop	{r2, r3, r4}
 8010368:	4690      	mov	r8, r2
 801036a:	4699      	mov	r9, r3
 801036c:	46a2      	mov	sl, r4
 801036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010370:	4e1c      	ldr	r6, [pc, #112]	; (80103e4 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010372:	2300      	movs	r3, #0
 8010374:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010376:	6833      	ldr	r3, [r6, #0]
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	2a00      	cmp	r2, #0
 801037c:	d026      	beq.n	80103cc <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010384:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010386:	1d25      	adds	r5, r4, #4
 8010388:	0028      	movs	r0, r5
 801038a:	f7fe fca0 	bl	800ecce <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801038e:	0020      	movs	r0, r4
 8010390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010392:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010394:	69e3      	ldr	r3, [r4, #28]
 8010396:	2b01      	cmp	r3, #1
 8010398:	d1ed      	bne.n	8010376 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801039a:	69a3      	ldr	r3, [r4, #24]
 801039c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 801039e:	459a      	cmp	sl, r3
 80103a0:	d209      	bcs.n	80103b6 <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80103a2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80103a4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103a6:	4b0f      	ldr	r3, [pc, #60]	; (80103e4 <prvSampleTimeNow+0xa8>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	9303      	str	r3, [sp, #12]
 80103ac:	0029      	movs	r1, r5
 80103ae:	0018      	movs	r0, r3
 80103b0:	f7fe fc76 	bl	800eca0 <vListInsert>
 80103b4:	e7df      	b.n	8010376 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103b6:	464b      	mov	r3, r9
 80103b8:	9300      	str	r3, [sp, #0]
 80103ba:	4652      	mov	r2, sl
 80103bc:	4649      	mov	r1, r9
 80103be:	0020      	movs	r0, r4
 80103c0:	f7ff ff90 	bl	80102e4 <xTimerGenericCommand>
				configASSERT( xResult );
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d1d6      	bne.n	8010376 <prvSampleTimeNow+0x3a>
 80103c8:	b672      	cpsid	i
 80103ca:	e7fe      	b.n	80103ca <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 80103cc:	4a06      	ldr	r2, [pc, #24]	; (80103e8 <prvSampleTimeNow+0xac>)
 80103ce:	4905      	ldr	r1, [pc, #20]	; (80103e4 <prvSampleTimeNow+0xa8>)
 80103d0:	6810      	ldr	r0, [r2, #0]
 80103d2:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80103d4:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80103d6:	2301      	movs	r3, #1
 80103d8:	4642      	mov	r2, r8
 80103da:	6013      	str	r3, [r2, #0]
 80103dc:	e7bf      	b.n	801035e <prvSampleTimeNow+0x22>
 80103de:	46c0      	nop			; (mov r8, r8)
 80103e0:	20001ec4 	.word	0x20001ec4
 80103e4:	20001e94 	.word	0x20001e94
 80103e8:	20001e98 	.word	0x20001e98

080103ec <prvTimerTask>:
{
 80103ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ee:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 80103f0:	4e57      	ldr	r6, [pc, #348]	; (8010550 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80103f2:	4b58      	ldr	r3, [pc, #352]	; (8010554 <prvTimerTask+0x168>)
 80103f4:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	2a00      	cmp	r2, #0
 80103fa:	d100      	bne.n	80103fe <prvTimerTask+0x12>
 80103fc:	e09c      	b.n	8010538 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 8010402:	f7ff f9df 	bl	800f7c4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010406:	a808      	add	r0, sp, #32
 8010408:	f7ff ff98 	bl	801033c <prvSampleTimeNow>
 801040c:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 801040e:	9b08      	ldr	r3, [sp, #32]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d000      	beq.n	8010416 <prvTimerTask+0x2a>
 8010414:	e099      	b.n	801054a <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010416:	42a0      	cmp	r0, r4
 8010418:	d233      	bcs.n	8010482 <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 801041a:	1b61      	subs	r1, r4, r5
 801041c:	4b4e      	ldr	r3, [pc, #312]	; (8010558 <prvTimerTask+0x16c>)
 801041e:	6818      	ldr	r0, [r3, #0]
 8010420:	f7fe ff80 	bl	800f324 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010424:	f7ff fa6e 	bl	800f904 <xTaskResumeAll>
 8010428:	2800      	cmp	r0, #0
 801042a:	d050      	beq.n	80104ce <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801042c:	4c4a      	ldr	r4, [pc, #296]	; (8010558 <prvTimerTask+0x16c>)
 801042e:	2300      	movs	r3, #0
 8010430:	2200      	movs	r2, #0
 8010432:	a908      	add	r1, sp, #32
 8010434:	6820      	ldr	r0, [r4, #0]
 8010436:	f7fe fe78 	bl	800f12a <xQueueGenericReceive>
 801043a:	2800      	cmp	r0, #0
 801043c:	d0d9      	beq.n	80103f2 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801043e:	9b08      	ldr	r3, [sp, #32]
 8010440:	9303      	str	r3, [sp, #12]
 8010442:	2b00      	cmp	r3, #0
 8010444:	da0c      	bge.n	8010460 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010448:	9303      	str	r3, [sp, #12]
 801044a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801044c:	9304      	str	r3, [sp, #16]
 801044e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010450:	9305      	str	r3, [sp, #20]
 8010452:	9903      	ldr	r1, [sp, #12]
 8010454:	9804      	ldr	r0, [sp, #16]
 8010456:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010458:	9b08      	ldr	r3, [sp, #32]
 801045a:	9303      	str	r3, [sp, #12]
 801045c:	2b00      	cmp	r3, #0
 801045e:	dbe6      	blt.n	801042e <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010460:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8010462:	696b      	ldr	r3, [r5, #20]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d002      	beq.n	801046e <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010468:	1d28      	adds	r0, r5, #4
 801046a:	f7fe fc30 	bl	800ecce <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801046e:	a807      	add	r0, sp, #28
 8010470:	f7ff ff64 	bl	801033c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010474:	9b08      	ldr	r3, [sp, #32]
 8010476:	9303      	str	r3, [sp, #12]
 8010478:	2b09      	cmp	r3, #9
 801047a:	d8d8      	bhi.n	801042e <prvTimerTask+0x42>
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	58f3      	ldr	r3, [r6, r3]
 8010480:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 8010482:	f7ff fa3f 	bl	800f904 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010486:	4b33      	ldr	r3, [pc, #204]	; (8010554 <prvTimerTask+0x168>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801048e:	1d38      	adds	r0, r7, #4
 8010490:	f7fe fc1d 	bl	800ecce <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	2b01      	cmp	r3, #1
 8010498:	d003      	beq.n	80104a2 <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049c:	0038      	movs	r0, r7
 801049e:	4798      	blx	r3
 80104a0:	e7c4      	b.n	801042c <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	18e1      	adds	r1, r4, r3
 80104a6:	0023      	movs	r3, r4
 80104a8:	002a      	movs	r2, r5
 80104aa:	0038      	movs	r0, r7
 80104ac:	f7ff fe86 	bl	80101bc <prvInsertTimerInActiveList>
 80104b0:	2801      	cmp	r0, #1
 80104b2:	d1f2      	bne.n	801049a <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80104b4:	2100      	movs	r1, #0
 80104b6:	9100      	str	r1, [sp, #0]
 80104b8:	000b      	movs	r3, r1
 80104ba:	0022      	movs	r2, r4
 80104bc:	0038      	movs	r0, r7
 80104be:	f7ff ff11 	bl	80102e4 <xTimerGenericCommand>
			configASSERT( xResult );
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d1e9      	bne.n	801049a <prvTimerTask+0xae>
 80104c6:	b672      	cpsid	i
 80104c8:	e7fe      	b.n	80104c8 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 80104ca:	2400      	movs	r4, #0
 80104cc:	e7a5      	b.n	801041a <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 80104ce:	f000 f8a7 	bl	8010620 <vPortYield>
 80104d2:	e7ab      	b.n	801042c <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 80104d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104d6:	69aa      	ldr	r2, [r5, #24]
 80104d8:	4694      	mov	ip, r2
 80104da:	4463      	add	r3, ip
 80104dc:	0019      	movs	r1, r3
 80104de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e0:	0002      	movs	r2, r0
 80104e2:	0028      	movs	r0, r5
 80104e4:	f7ff fe6a 	bl	80101bc <prvInsertTimerInActiveList>
 80104e8:	2801      	cmp	r0, #1
 80104ea:	d1a0      	bne.n	801042e <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80104ec:	0028      	movs	r0, r5
 80104ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104f0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80104f2:	69eb      	ldr	r3, [r5, #28]
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	d19a      	bne.n	801042e <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80104f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104fa:	69a9      	ldr	r1, [r5, #24]
 80104fc:	468c      	mov	ip, r1
 80104fe:	4463      	add	r3, ip
 8010500:	001a      	movs	r2, r3
 8010502:	2300      	movs	r3, #0
 8010504:	9300      	str	r3, [sp, #0]
 8010506:	2100      	movs	r1, #0
 8010508:	0028      	movs	r0, r5
 801050a:	f7ff feeb 	bl	80102e4 <xTimerGenericCommand>
							configASSERT( xResult );
 801050e:	2800      	cmp	r0, #0
 8010510:	d18d      	bne.n	801042e <prvTimerTask+0x42>
 8010512:	b672      	cpsid	i
 8010514:	e7fe      	b.n	8010514 <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010516:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010518:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801051a:	2900      	cmp	r1, #0
 801051c:	d006      	beq.n	801052c <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801051e:	1841      	adds	r1, r0, r1
 8010520:	0003      	movs	r3, r0
 8010522:	0002      	movs	r2, r0
 8010524:	0028      	movs	r0, r5
 8010526:	f7ff fe49 	bl	80101bc <prvInsertTimerInActiveList>
 801052a:	e780      	b.n	801042e <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801052c:	b672      	cpsid	i
 801052e:	e7fe      	b.n	801052e <prvTimerTask+0x142>
					vPortFree( pxTimer );
 8010530:	0028      	movs	r0, r5
 8010532:	f000 f999 	bl	8010868 <vPortFree>
 8010536:	e77a      	b.n	801042e <prvTimerTask+0x42>
	vTaskSuspendAll();
 8010538:	f7ff f944 	bl	800f7c4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801053c:	a808      	add	r0, sp, #32
 801053e:	f7ff fefd 	bl	801033c <prvSampleTimeNow>
 8010542:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010544:	9b08      	ldr	r3, [sp, #32]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d0bf      	beq.n	80104ca <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 801054a:	f7ff f9db 	bl	800f904 <xTaskResumeAll>
 801054e:	e76d      	b.n	801042c <prvTimerTask+0x40>
 8010550:	0801ba40 	.word	0x0801ba40
 8010554:	20001e94 	.word	0x20001e94
 8010558:	20001ec8 	.word	0x20001ec8

0801055c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801055c:	b510      	push	{r4, lr}
 801055e:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8010560:	d101      	bne.n	8010566 <pvTimerGetTimerID+0xa>
 8010562:	b672      	cpsid	i
 8010564:	e7fe      	b.n	8010564 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 8010566:	f000 f867 	bl	8010638 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801056a:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 801056c:	f000 f870 	bl	8010650 <vPortExitCritical>

	return pvReturn;
}
 8010570:	0020      	movs	r0, r4
 8010572:	bd10      	pop	{r4, pc}

08010574 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010574:	4b03      	ldr	r3, [pc, #12]	; (8010584 <prvTaskExitError+0x10>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	3301      	adds	r3, #1
 801057a:	d001      	beq.n	8010580 <prvTaskExitError+0xc>
 801057c:	b672      	cpsid	i
 801057e:	e7fe      	b.n	801057e <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8010580:	b672      	cpsid	i
 8010582:	e7fe      	b.n	8010582 <prvTaskExitError+0xe>
 8010584:	200000f0 	.word	0x200000f0

08010588 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010588:	4a06      	ldr	r2, [pc, #24]	; (80105a4 <pxCurrentTCBConst2>)
 801058a:	6813      	ldr	r3, [r2, #0]
 801058c:	6818      	ldr	r0, [r3, #0]
 801058e:	3020      	adds	r0, #32
 8010590:	f380 8809 	msr	PSP, r0
 8010594:	2002      	movs	r0, #2
 8010596:	f380 8814 	msr	CONTROL, r0
 801059a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 801059c:	46ae      	mov	lr, r5
 801059e:	b662      	cpsie	i
 80105a0:	bd00      	pop	{pc}
 80105a2:	46c0      	nop			; (mov r8, r8)

080105a4 <pxCurrentTCBConst2>:
 80105a4:	20001d6c 	.word	0x20001d6c

080105a8 <pxPortInitialiseStack>:
{
 80105a8:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80105aa:	1f03      	subs	r3, r0, #4
 80105ac:	2480      	movs	r4, #128	; 0x80
 80105ae:	0464      	lsls	r4, r4, #17
 80105b0:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80105b2:	3b04      	subs	r3, #4
 80105b4:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80105b6:	3b04      	subs	r3, #4
 80105b8:	4902      	ldr	r1, [pc, #8]	; (80105c4 <pxPortInitialiseStack+0x1c>)
 80105ba:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80105bc:	3b14      	subs	r3, #20
 80105be:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80105c0:	3840      	subs	r0, #64	; 0x40
}
 80105c2:	bd10      	pop	{r4, pc}
 80105c4:	08010575 	.word	0x08010575

080105c8 <SVC_Handler>:
}
 80105c8:	4770      	bx	lr
	...

080105cc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105cc:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80105ce:	4b0f      	ldr	r3, [pc, #60]	; (801060c <xPortStartScheduler+0x40>)
 80105d0:	6819      	ldr	r1, [r3, #0]
 80105d2:	22ff      	movs	r2, #255	; 0xff
 80105d4:	0412      	lsls	r2, r2, #16
 80105d6:	430a      	orrs	r2, r1
 80105d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80105da:	6819      	ldr	r1, [r3, #0]
 80105dc:	22ff      	movs	r2, #255	; 0xff
 80105de:	0612      	lsls	r2, r2, #24
 80105e0:	430a      	orrs	r2, r1
 80105e2:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80105e4:	4b0a      	ldr	r3, [pc, #40]	; (8010610 <xPortStartScheduler+0x44>)
 80105e6:	6818      	ldr	r0, [r3, #0]
 80105e8:	21fa      	movs	r1, #250	; 0xfa
 80105ea:	0089      	lsls	r1, r1, #2
 80105ec:	f7ef fdb0 	bl	8000150 <__udivsi3>
 80105f0:	3801      	subs	r0, #1
 80105f2:	4b08      	ldr	r3, [pc, #32]	; (8010614 <xPortStartScheduler+0x48>)
 80105f4:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80105f6:	4b08      	ldr	r3, [pc, #32]	; (8010618 <xPortStartScheduler+0x4c>)
 80105f8:	2207      	movs	r2, #7
 80105fa:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 80105fc:	4b07      	ldr	r3, [pc, #28]	; (801061c <xPortStartScheduler+0x50>)
 80105fe:	2200      	movs	r2, #0
 8010600:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8010602:	f7ff ffc1 	bl	8010588 <vPortStartFirstTask>
	prvTaskExitError();
 8010606:	f7ff ffb5 	bl	8010574 <prvTaskExitError>
 801060a:	46c0      	nop			; (mov r8, r8)
 801060c:	e000ed20 	.word	0xe000ed20
 8010610:	200000dc 	.word	0x200000dc
 8010614:	e000e014 	.word	0xe000e014
 8010618:	e000e010 	.word	0xe000e010
 801061c:	200000f0 	.word	0x200000f0

08010620 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010620:	4b04      	ldr	r3, [pc, #16]	; (8010634 <vPortYield+0x14>)
 8010622:	2280      	movs	r2, #128	; 0x80
 8010624:	0552      	lsls	r2, r2, #21
 8010626:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010628:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801062c:	f3bf 8f6f 	isb	sy
}
 8010630:	4770      	bx	lr
 8010632:	46c0      	nop			; (mov r8, r8)
 8010634:	e000ed04 	.word	0xe000ed04

08010638 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010638:	b672      	cpsid	i
    uxCriticalNesting++;
 801063a:	4a04      	ldr	r2, [pc, #16]	; (801064c <vPortEnterCritical+0x14>)
 801063c:	6813      	ldr	r3, [r2, #0]
 801063e:	3301      	adds	r3, #1
 8010640:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8010642:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010646:	f3bf 8f6f 	isb	sy
}
 801064a:	4770      	bx	lr
 801064c:	200000f0 	.word	0x200000f0

08010650 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010650:	4b06      	ldr	r3, [pc, #24]	; (801066c <vPortExitCritical+0x1c>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d101      	bne.n	801065c <vPortExitCritical+0xc>
 8010658:	b672      	cpsid	i
 801065a:	e7fe      	b.n	801065a <vPortExitCritical+0xa>
    uxCriticalNesting--;
 801065c:	3b01      	subs	r3, #1
 801065e:	4a03      	ldr	r2, [pc, #12]	; (801066c <vPortExitCritical+0x1c>)
 8010660:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8010662:	2b00      	cmp	r3, #0
 8010664:	d100      	bne.n	8010668 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 8010666:	b662      	cpsie	i
}
 8010668:	4770      	bx	lr
 801066a:	46c0      	nop			; (mov r8, r8)
 801066c:	200000f0 	.word	0x200000f0

08010670 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8010670:	f3ef 8010 	mrs	r0, PRIMASK
 8010674:	b672      	cpsid	i
 8010676:	4770      	bx	lr
}
 8010678:	2000      	movs	r0, #0

0801067a <vClearInterruptMaskFromISR>:
	__asm volatile(
 801067a:	f380 8810 	msr	PRIMASK, r0
 801067e:	4770      	bx	lr

08010680 <PendSV_Handler>:
	__asm volatile
 8010680:	f3ef 8009 	mrs	r0, PSP
 8010684:	4b0e      	ldr	r3, [pc, #56]	; (80106c0 <pxCurrentTCBConst>)
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	3820      	subs	r0, #32
 801068a:	6010      	str	r0, [r2, #0]
 801068c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801068e:	4644      	mov	r4, r8
 8010690:	464d      	mov	r5, r9
 8010692:	4656      	mov	r6, sl
 8010694:	465f      	mov	r7, fp
 8010696:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010698:	b508      	push	{r3, lr}
 801069a:	b672      	cpsid	i
 801069c:	f7ff fa4e 	bl	800fb3c <vTaskSwitchContext>
 80106a0:	b662      	cpsie	i
 80106a2:	bc0c      	pop	{r2, r3}
 80106a4:	6811      	ldr	r1, [r2, #0]
 80106a6:	6808      	ldr	r0, [r1, #0]
 80106a8:	3010      	adds	r0, #16
 80106aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80106ac:	46a0      	mov	r8, r4
 80106ae:	46a9      	mov	r9, r5
 80106b0:	46b2      	mov	sl, r6
 80106b2:	46bb      	mov	fp, r7
 80106b4:	f380 8809 	msr	PSP, r0
 80106b8:	3820      	subs	r0, #32
 80106ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80106bc:	4718      	bx	r3
 80106be:	46c0      	nop			; (mov r8, r8)

080106c0 <pxCurrentTCBConst>:
 80106c0:	20001d6c 	.word	0x20001d6c

080106c4 <xPortSysTickHandler>:
{
 80106c4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80106c6:	f7ff ffd3 	bl	8010670 <ulSetInterruptMaskFromISR>
 80106ca:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 80106cc:	f7ff f88e 	bl	800f7ec <xTaskIncrementTick>
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d003      	beq.n	80106dc <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80106d4:	4b03      	ldr	r3, [pc, #12]	; (80106e4 <xPortSysTickHandler+0x20>)
 80106d6:	2280      	movs	r2, #128	; 0x80
 80106d8:	0552      	lsls	r2, r2, #21
 80106da:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80106dc:	0020      	movs	r0, r4
 80106de:	f7ff ffcc 	bl	801067a <vClearInterruptMaskFromISR>
}
 80106e2:	bd10      	pop	{r4, pc}
 80106e4:	e000ed04 	.word	0xe000ed04

080106e8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80106e8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80106ea:	4b12      	ldr	r3, [pc, #72]	; (8010734 <prvInsertBlockIntoFreeList+0x4c>)
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	4282      	cmp	r2, r0
 80106f0:	d319      	bcc.n	8010726 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80106f2:	685c      	ldr	r4, [r3, #4]
 80106f4:	1919      	adds	r1, r3, r4
 80106f6:	4288      	cmp	r0, r1
 80106f8:	d103      	bne.n	8010702 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80106fa:	6841      	ldr	r1, [r0, #4]
 80106fc:	1909      	adds	r1, r1, r4
 80106fe:	6059      	str	r1, [r3, #4]
 8010700:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010702:	6841      	ldr	r1, [r0, #4]
 8010704:	1844      	adds	r4, r0, r1
 8010706:	42a2      	cmp	r2, r4
 8010708:	d111      	bne.n	801072e <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801070a:	4c0b      	ldr	r4, [pc, #44]	; (8010738 <prvInsertBlockIntoFreeList+0x50>)
 801070c:	6824      	ldr	r4, [r4, #0]
 801070e:	42a2      	cmp	r2, r4
 8010710:	d00b      	beq.n	801072a <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010712:	6852      	ldr	r2, [r2, #4]
 8010714:	1852      	adds	r2, r2, r1
 8010716:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	6812      	ldr	r2, [r2, #0]
 801071c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801071e:	4298      	cmp	r0, r3
 8010720:	d000      	beq.n	8010724 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010722:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010724:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010726:	0013      	movs	r3, r2
 8010728:	e7e0      	b.n	80106ec <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801072a:	6002      	str	r2, [r0, #0]
 801072c:	e7f7      	b.n	801071e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801072e:	6002      	str	r2, [r0, #0]
 8010730:	e7f5      	b.n	801071e <prvInsertBlockIntoFreeList+0x36>
 8010732:	46c0      	nop			; (mov r8, r8)
 8010734:	20006914 	.word	0x20006914
 8010738:	20001ecc 	.word	0x20001ecc

0801073c <pvPortMalloc>:
{
 801073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073e:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010740:	f7ff f840 	bl	800f7c4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010744:	4b41      	ldr	r3, [pc, #260]	; (801084c <pvPortMalloc+0x110>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d00a      	beq.n	8010762 <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801074c:	4b40      	ldr	r3, [pc, #256]	; (8010850 <pvPortMalloc+0x114>)
 801074e:	681f      	ldr	r7, [r3, #0]
 8010750:	423c      	tst	r4, r7
 8010752:	d02a      	beq.n	80107aa <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 8010754:	f7ff f8d6 	bl	800f904 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8010758:	f7fd fa1e 	bl	800db98 <vApplicationMallocFailedHook>
 801075c:	2500      	movs	r5, #0
}
 801075e:	0028      	movs	r0, r5
 8010760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 8010762:	4a3c      	ldr	r2, [pc, #240]	; (8010854 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010764:	0753      	lsls	r3, r2, #29
 8010766:	d01e      	beq.n	80107a6 <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8010768:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 801076a:	2307      	movs	r3, #7
 801076c:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 801076e:	4b3a      	ldr	r3, [pc, #232]	; (8010858 <pvPortMalloc+0x11c>)
 8010770:	18d3      	adds	r3, r2, r3
 8010772:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010774:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010776:	4839      	ldr	r0, [pc, #228]	; (801085c <pvPortMalloc+0x120>)
 8010778:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801077a:	2100      	movs	r1, #0
 801077c:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 801077e:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 8010780:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010782:	2007      	movs	r0, #7
 8010784:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 8010786:	4831      	ldr	r0, [pc, #196]	; (801084c <pvPortMalloc+0x110>)
 8010788:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801078a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801078c:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 801078e:	1a99      	subs	r1, r3, r2
 8010790:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010792:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010794:	4b32      	ldr	r3, [pc, #200]	; (8010860 <pvPortMalloc+0x124>)
 8010796:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010798:	4b32      	ldr	r3, [pc, #200]	; (8010864 <pvPortMalloc+0x128>)
 801079a:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801079c:	4b2c      	ldr	r3, [pc, #176]	; (8010850 <pvPortMalloc+0x114>)
 801079e:	2280      	movs	r2, #128	; 0x80
 80107a0:	0612      	lsls	r2, r2, #24
 80107a2:	601a      	str	r2, [r3, #0]
 80107a4:	e7d2      	b.n	801074c <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80107a6:	4b2c      	ldr	r3, [pc, #176]	; (8010858 <pvPortMalloc+0x11c>)
 80107a8:	e7e5      	b.n	8010776 <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 80107aa:	2c00      	cmp	r4, #0
 80107ac:	d008      	beq.n	80107c0 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 80107ae:	0023      	movs	r3, r4
 80107b0:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80107b2:	075a      	lsls	r2, r3, #29
 80107b4:	d002      	beq.n	80107bc <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80107b6:	2207      	movs	r2, #7
 80107b8:	4393      	bics	r3, r2
 80107ba:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d102      	bne.n	80107c6 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 80107c0:	f7ff f8a0 	bl	800f904 <xTaskResumeAll>
 80107c4:	e7c8      	b.n	8010758 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80107c6:	4a27      	ldr	r2, [pc, #156]	; (8010864 <pvPortMalloc+0x128>)
 80107c8:	6816      	ldr	r6, [r2, #0]
 80107ca:	429e      	cmp	r6, r3
 80107cc:	d302      	bcc.n	80107d4 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 80107ce:	4a23      	ldr	r2, [pc, #140]	; (801085c <pvPortMalloc+0x120>)
 80107d0:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107d2:	e004      	b.n	80107de <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 80107d4:	f7ff f896 	bl	800f904 <xTaskResumeAll>
 80107d8:	e7be      	b.n	8010758 <pvPortMalloc+0x1c>
 80107da:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80107dc:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107de:	6861      	ldr	r1, [r4, #4]
 80107e0:	4299      	cmp	r1, r3
 80107e2:	d202      	bcs.n	80107ea <pvPortMalloc+0xae>
 80107e4:	6821      	ldr	r1, [r4, #0]
 80107e6:	2900      	cmp	r1, #0
 80107e8:	d1f7      	bne.n	80107da <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 80107ea:	4918      	ldr	r1, [pc, #96]	; (801084c <pvPortMalloc+0x110>)
 80107ec:	6809      	ldr	r1, [r1, #0]
 80107ee:	42a1      	cmp	r1, r4
 80107f0:	d00b      	beq.n	801080a <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80107f2:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80107f4:	6821      	ldr	r1, [r4, #0]
 80107f6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80107f8:	6862      	ldr	r2, [r4, #4]
 80107fa:	1ad2      	subs	r2, r2, r3
 80107fc:	2a10      	cmp	r2, #16
 80107fe:	d90b      	bls.n	8010818 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010800:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010802:	0741      	lsls	r1, r0, #29
 8010804:	d004      	beq.n	8010810 <pvPortMalloc+0xd4>
 8010806:	b672      	cpsid	i
 8010808:	e7fe      	b.n	8010808 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 801080a:	f7ff f87b 	bl	800f904 <xTaskResumeAll>
 801080e:	e7a3      	b.n	8010758 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010810:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010812:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010814:	f7ff ff68 	bl	80106e8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010818:	6862      	ldr	r2, [r4, #4]
 801081a:	1ab6      	subs	r6, r6, r2
 801081c:	4911      	ldr	r1, [pc, #68]	; (8010864 <pvPortMalloc+0x128>)
 801081e:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010820:	490f      	ldr	r1, [pc, #60]	; (8010860 <pvPortMalloc+0x124>)
 8010822:	6809      	ldr	r1, [r1, #0]
 8010824:	428e      	cmp	r6, r1
 8010826:	d201      	bcs.n	801082c <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010828:	490d      	ldr	r1, [pc, #52]	; (8010860 <pvPortMalloc+0x124>)
 801082a:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801082c:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801082e:	4317      	orrs	r7, r2
 8010830:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010832:	2300      	movs	r3, #0
 8010834:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8010836:	f7ff f865 	bl	800f904 <xTaskResumeAll>
		if( pvReturn == NULL )
 801083a:	2d00      	cmp	r5, #0
 801083c:	d100      	bne.n	8010840 <pvPortMalloc+0x104>
 801083e:	e78b      	b.n	8010758 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010840:	076b      	lsls	r3, r5, #29
 8010842:	d100      	bne.n	8010846 <pvPortMalloc+0x10a>
 8010844:	e78b      	b.n	801075e <pvPortMalloc+0x22>
 8010846:	b672      	cpsid	i
 8010848:	e7fe      	b.n	8010848 <pvPortMalloc+0x10c>
 801084a:	46c0      	nop			; (mov r8, r8)
 801084c:	20001ecc 	.word	0x20001ecc
 8010850:	20006908 	.word	0x20006908
 8010854:	20001ed0 	.word	0x20001ed0
 8010858:	00004a38 	.word	0x00004a38
 801085c:	20006914 	.word	0x20006914
 8010860:	20006910 	.word	0x20006910
 8010864:	2000690c 	.word	0x2000690c

08010868 <vPortFree>:
{
 8010868:	b510      	push	{r4, lr}
	if( pv != NULL )
 801086a:	2800      	cmp	r0, #0
 801086c:	d020      	beq.n	80108b0 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801086e:	0003      	movs	r3, r0
 8010870:	3b08      	subs	r3, #8
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	4a0f      	ldr	r2, [pc, #60]	; (80108b4 <vPortFree+0x4c>)
 8010876:	6812      	ldr	r2, [r2, #0]
 8010878:	421a      	tst	r2, r3
 801087a:	d101      	bne.n	8010880 <vPortFree+0x18>
 801087c:	b672      	cpsid	i
 801087e:	e7fe      	b.n	801087e <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010880:	0001      	movs	r1, r0
 8010882:	3908      	subs	r1, #8
 8010884:	6809      	ldr	r1, [r1, #0]
 8010886:	2900      	cmp	r1, #0
 8010888:	d001      	beq.n	801088e <vPortFree+0x26>
 801088a:	b672      	cpsid	i
 801088c:	e7fe      	b.n	801088c <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801088e:	3808      	subs	r0, #8
 8010890:	0004      	movs	r4, r0
 8010892:	4393      	bics	r3, r2
 8010894:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8010896:	f7fe ff95 	bl	800f7c4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801089a:	4a07      	ldr	r2, [pc, #28]	; (80108b8 <vPortFree+0x50>)
 801089c:	6863      	ldr	r3, [r4, #4]
 801089e:	6811      	ldr	r1, [r2, #0]
 80108a0:	468c      	mov	ip, r1
 80108a2:	4463      	add	r3, ip
 80108a4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80108a6:	0020      	movs	r0, r4
 80108a8:	f7ff ff1e 	bl	80106e8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80108ac:	f7ff f82a 	bl	800f904 <xTaskResumeAll>
}
 80108b0:	bd10      	pop	{r4, pc}
 80108b2:	46c0      	nop			; (mov r8, r8)
 80108b4:	20006908 	.word	0x20006908
 80108b8:	2000690c 	.word	0x2000690c

080108bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80108bc:	b510      	push	{r4, lr}
 80108be:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80108c0:	f002 f926 	bl	8012b10 <HAL_RCC_GetHCLKFreq>
 80108c4:	21fa      	movs	r1, #250	; 0xfa
 80108c6:	0089      	lsls	r1, r1, #2
 80108c8:	f7ef fc42 	bl	8000150 <__udivsi3>
 80108cc:	f000 f88a 	bl	80109e4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80108d0:	2001      	movs	r0, #1
 80108d2:	2200      	movs	r2, #0
 80108d4:	0021      	movs	r1, r4
 80108d6:	4240      	negs	r0, r0
 80108d8:	f000 f83c 	bl	8010954 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80108dc:	2000      	movs	r0, #0
 80108de:	bd10      	pop	{r4, pc}

080108e0 <HAL_Init>:
{
 80108e0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80108e2:	4a06      	ldr	r2, [pc, #24]	; (80108fc <HAL_Init+0x1c>)
 80108e4:	6813      	ldr	r3, [r2, #0]
 80108e6:	2110      	movs	r1, #16
 80108e8:	430b      	orrs	r3, r1
 80108ea:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80108ec:	2000      	movs	r0, #0
 80108ee:	f7ff ffe5 	bl	80108bc <HAL_InitTick>
  HAL_MspInit();
 80108f2:	f001 fcb5 	bl	8012260 <HAL_MspInit>
}
 80108f6:	2000      	movs	r0, #0
 80108f8:	bd10      	pop	{r4, pc}
 80108fa:	46c0      	nop			; (mov r8, r8)
 80108fc:	40022000 	.word	0x40022000

08010900 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010900:	4a02      	ldr	r2, [pc, #8]	; (801090c <HAL_IncTick+0xc>)
 8010902:	6813      	ldr	r3, [r2, #0]
 8010904:	3301      	adds	r3, #1
 8010906:	6013      	str	r3, [r2, #0]
}
 8010908:	4770      	bx	lr
 801090a:	46c0      	nop			; (mov r8, r8)
 801090c:	2000691c 	.word	0x2000691c

08010910 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010910:	4b01      	ldr	r3, [pc, #4]	; (8010918 <HAL_GetTick+0x8>)
 8010912:	6818      	ldr	r0, [r3, #0]
}
 8010914:	4770      	bx	lr
 8010916:	46c0      	nop			; (mov r8, r8)
 8010918:	2000691c 	.word	0x2000691c

0801091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 801091c:	b510      	push	{r4, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8010922:	f7ff fff5 	bl	8010910 <HAL_GetTick>
 8010926:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010928:	f7ff fff2 	bl	8010910 <HAL_GetTick>
 801092c:	9b01      	ldr	r3, [sp, #4]
 801092e:	1b00      	subs	r0, r0, r4
 8010930:	4298      	cmp	r0, r3
 8010932:	d3f9      	bcc.n	8010928 <HAL_Delay+0xc>
  {
  }
}
 8010934:	b002      	add	sp, #8
 8010936:	bd10      	pop	{r4, pc}

08010938 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010938:	4b01      	ldr	r3, [pc, #4]	; (8010940 <HAL_GetREVID+0x8>)
 801093a:	6818      	ldr	r0, [r3, #0]
 801093c:	0c00      	lsrs	r0, r0, #16
}
 801093e:	4770      	bx	lr
 8010940:	40015800 	.word	0x40015800

08010944 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010944:	4b02      	ldr	r3, [pc, #8]	; (8010950 <HAL_GetDEVID+0xc>)
 8010946:	6818      	ldr	r0, [r3, #0]
 8010948:	0500      	lsls	r0, r0, #20
 801094a:	0d00      	lsrs	r0, r0, #20
}
 801094c:	4770      	bx	lr
 801094e:	46c0      	nop			; (mov r8, r8)
 8010950:	40015800 	.word	0x40015800

08010954 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010954:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010956:	2800      	cmp	r0, #0
 8010958:	db14      	blt.n	8010984 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801095a:	0883      	lsrs	r3, r0, #2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4a15      	ldr	r2, [pc, #84]	; (80109b4 <HAL_NVIC_SetPriority+0x60>)
 8010960:	4694      	mov	ip, r2
 8010962:	4463      	add	r3, ip
 8010964:	26c0      	movs	r6, #192	; 0xc0
 8010966:	00b6      	lsls	r6, r6, #2
 8010968:	599d      	ldr	r5, [r3, r6]
 801096a:	2403      	movs	r4, #3
 801096c:	4020      	ands	r0, r4
 801096e:	00c0      	lsls	r0, r0, #3
 8010970:	22ff      	movs	r2, #255	; 0xff
 8010972:	0014      	movs	r4, r2
 8010974:	4084      	lsls	r4, r0
 8010976:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010978:	0189      	lsls	r1, r1, #6
 801097a:	400a      	ands	r2, r1
 801097c:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801097e:	432a      	orrs	r2, r5
 8010980:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010982:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010984:	b2c0      	uxtb	r0, r0
 8010986:	230f      	movs	r3, #15
 8010988:	4003      	ands	r3, r0
 801098a:	3b08      	subs	r3, #8
 801098c:	089b      	lsrs	r3, r3, #2
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	4a09      	ldr	r2, [pc, #36]	; (80109b8 <HAL_NVIC_SetPriority+0x64>)
 8010992:	4694      	mov	ip, r2
 8010994:	4463      	add	r3, ip
 8010996:	69dd      	ldr	r5, [r3, #28]
 8010998:	2203      	movs	r2, #3
 801099a:	4010      	ands	r0, r2
 801099c:	00c0      	lsls	r0, r0, #3
 801099e:	24ff      	movs	r4, #255	; 0xff
 80109a0:	0022      	movs	r2, r4
 80109a2:	4082      	lsls	r2, r0
 80109a4:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80109a6:	0189      	lsls	r1, r1, #6
 80109a8:	400c      	ands	r4, r1
 80109aa:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80109ac:	432c      	orrs	r4, r5
 80109ae:	61dc      	str	r4, [r3, #28]
 80109b0:	e7e7      	b.n	8010982 <HAL_NVIC_SetPriority+0x2e>
 80109b2:	46c0      	nop			; (mov r8, r8)
 80109b4:	e000e100 	.word	0xe000e100
 80109b8:	e000ed00 	.word	0xe000ed00

080109bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80109bc:	231f      	movs	r3, #31
 80109be:	4018      	ands	r0, r3
 80109c0:	3b1e      	subs	r3, #30
 80109c2:	4083      	lsls	r3, r0
 80109c4:	4a01      	ldr	r2, [pc, #4]	; (80109cc <HAL_NVIC_EnableIRQ+0x10>)
 80109c6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80109c8:	4770      	bx	lr
 80109ca:	46c0      	nop			; (mov r8, r8)
 80109cc:	e000e100 	.word	0xe000e100

080109d0 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80109d0:	231f      	movs	r3, #31
 80109d2:	4018      	ands	r0, r3
 80109d4:	3b1e      	subs	r3, #30
 80109d6:	4083      	lsls	r3, r0
 80109d8:	4901      	ldr	r1, [pc, #4]	; (80109e0 <HAL_NVIC_DisableIRQ+0x10>)
 80109da:	2280      	movs	r2, #128	; 0x80
 80109dc:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80109de:	4770      	bx	lr
 80109e0:	e000e100 	.word	0xe000e100

080109e4 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80109e4:	1e43      	subs	r3, r0, #1
 80109e6:	4a0a      	ldr	r2, [pc, #40]	; (8010a10 <HAL_SYSTICK_Config+0x2c>)
 80109e8:	2001      	movs	r0, #1
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d80e      	bhi.n	8010a0c <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80109ee:	4a09      	ldr	r2, [pc, #36]	; (8010a14 <HAL_SYSTICK_Config+0x30>)
 80109f0:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80109f2:	4809      	ldr	r0, [pc, #36]	; (8010a18 <HAL_SYSTICK_Config+0x34>)
 80109f4:	6a03      	ldr	r3, [r0, #32]
 80109f6:	021b      	lsls	r3, r3, #8
 80109f8:	0a1b      	lsrs	r3, r3, #8
 80109fa:	21c0      	movs	r1, #192	; 0xc0
 80109fc:	0609      	lsls	r1, r1, #24
 80109fe:	430b      	orrs	r3, r1
 8010a00:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010a02:	2300      	movs	r3, #0
 8010a04:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010a06:	3307      	adds	r3, #7
 8010a08:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010a0a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010a0c:	4770      	bx	lr
 8010a0e:	46c0      	nop			; (mov r8, r8)
 8010a10:	00ffffff 	.word	0x00ffffff
 8010a14:	e000e010 	.word	0xe000e010
 8010a18:	e000ed00 	.word	0xe000ed00

08010a1c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010a1c:	2804      	cmp	r0, #4
 8010a1e:	d005      	beq.n	8010a2c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010a20:	4a05      	ldr	r2, [pc, #20]	; (8010a38 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010a22:	6813      	ldr	r3, [r2, #0]
 8010a24:	2104      	movs	r1, #4
 8010a26:	438b      	bics	r3, r1
 8010a28:	6013      	str	r3, [r2, #0]
  }
}
 8010a2a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010a2c:	4a02      	ldr	r2, [pc, #8]	; (8010a38 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010a2e:	6813      	ldr	r3, [r2, #0]
 8010a30:	2104      	movs	r1, #4
 8010a32:	430b      	orrs	r3, r1
 8010a34:	6013      	str	r3, [r2, #0]
 8010a36:	e7f8      	b.n	8010a2a <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010a38:	e000e010 	.word	0xe000e010

08010a3c <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a3e:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010a40:	0891      	lsrs	r1, r2, #2
 8010a42:	d013      	beq.n	8010a6c <CRC_Handle_8+0x30>
 8010a44:	0034      	movs	r4, r6
 8010a46:	2303      	movs	r3, #3
 8010a48:	0017      	movs	r7, r2
 8010a4a:	439f      	bics	r7, r3
 8010a4c:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010a4e:	7823      	ldrb	r3, [r4, #0]
 8010a50:	061b      	lsls	r3, r3, #24
 8010a52:	7865      	ldrb	r5, [r4, #1]
 8010a54:	042d      	lsls	r5, r5, #16
 8010a56:	432b      	orrs	r3, r5
 8010a58:	78e5      	ldrb	r5, [r4, #3]
 8010a5a:	432b      	orrs	r3, r5
 8010a5c:	78a5      	ldrb	r5, [r4, #2]
 8010a5e:	022d      	lsls	r5, r5, #8
 8010a60:	432b      	orrs	r3, r5
 8010a62:	6805      	ldr	r5, [r0, #0]
 8010a64:	602b      	str	r3, [r5, #0]
 8010a66:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 8010a68:	42bc      	cmp	r4, r7
 8010a6a:	d1f0      	bne.n	8010a4e <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010a6c:	2303      	movs	r3, #3
 8010a6e:	401a      	ands	r2, r3
 8010a70:	d01e      	beq.n	8010ab0 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 8010a72:	2a01      	cmp	r2, #1
 8010a74:	d00a      	beq.n	8010a8c <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010a76:	2a02      	cmp	r2, #2
 8010a78:	d10d      	bne.n	8010a96 <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010a7a:	0089      	lsls	r1, r1, #2
 8010a7c:	5c72      	ldrb	r2, [r6, r1]
 8010a7e:	0212      	lsls	r2, r2, #8
 8010a80:	1871      	adds	r1, r6, r1
 8010a82:	784b      	ldrb	r3, [r1, #1]
 8010a84:	4313      	orrs	r3, r2
 8010a86:	6802      	ldr	r2, [r0, #0]
 8010a88:	8013      	strh	r3, [r2, #0]
 8010a8a:	e011      	b.n	8010ab0 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010a8c:	0089      	lsls	r1, r1, #2
 8010a8e:	5d8b      	ldrb	r3, [r1, r6]
 8010a90:	6802      	ldr	r2, [r0, #0]
 8010a92:	7013      	strb	r3, [r2, #0]
 8010a94:	e00c      	b.n	8010ab0 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 8010a96:	2a03      	cmp	r2, #3
 8010a98:	d10a      	bne.n	8010ab0 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010a9a:	0089      	lsls	r1, r1, #2
 8010a9c:	5c72      	ldrb	r2, [r6, r1]
 8010a9e:	0212      	lsls	r2, r2, #8
 8010aa0:	1871      	adds	r1, r6, r1
 8010aa2:	784b      	ldrb	r3, [r1, #1]
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	6802      	ldr	r2, [r0, #0]
 8010aa8:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010aaa:	788b      	ldrb	r3, [r1, #2]
 8010aac:	6802      	ldr	r2, [r0, #0]
 8010aae:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010ab0:	6803      	ldr	r3, [r0, #0]
 8010ab2:	6818      	ldr	r0, [r3, #0]
}
 8010ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ab6 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ab8:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010aba:	0852      	lsrs	r2, r2, #1
 8010abc:	d00b      	beq.n	8010ad6 <CRC_Handle_16+0x20>
 8010abe:	000c      	movs	r4, r1
 8010ac0:	0097      	lsls	r7, r2, #2
 8010ac2:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010ac4:	8823      	ldrh	r3, [r4, #0]
 8010ac6:	041b      	lsls	r3, r3, #16
 8010ac8:	8866      	ldrh	r6, [r4, #2]
 8010aca:	4333      	orrs	r3, r6
 8010acc:	6806      	ldr	r6, [r0, #0]
 8010ace:	6033      	str	r3, [r6, #0]
 8010ad0:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 8010ad2:	42bc      	cmp	r4, r7
 8010ad4:	d1f6      	bne.n	8010ac4 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 8010ad6:	07eb      	lsls	r3, r5, #31
 8010ad8:	d503      	bpl.n	8010ae2 <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010ada:	0092      	lsls	r2, r2, #2
 8010adc:	5a53      	ldrh	r3, [r2, r1]
 8010ade:	6802      	ldr	r2, [r0, #0]
 8010ae0:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010ae2:	6803      	ldr	r3, [r0, #0]
 8010ae4:	6818      	ldr	r0, [r3, #0]
}
 8010ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ae8 <HAL_CRC_Init>:
{
 8010ae8:	b510      	push	{r4, lr}
 8010aea:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010aec:	d029      	beq.n	8010b42 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010aee:	7f43      	ldrb	r3, [r0, #29]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d01e      	beq.n	8010b32 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010af4:	2302      	movs	r3, #2
 8010af6:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010af8:	0020      	movs	r0, r4
 8010afa:	f000 f8b1 	bl	8010c60 <HAL_CRCEx_Init>
 8010afe:	2800      	cmp	r0, #0
 8010b00:	d121      	bne.n	8010b46 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010b02:	7963      	ldrb	r3, [r4, #5]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d118      	bne.n	8010b3a <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010b08:	6823      	ldr	r3, [r4, #0]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	4252      	negs	r2, r2
 8010b0e:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010b10:	6822      	ldr	r2, [r4, #0]
 8010b12:	6893      	ldr	r3, [r2, #8]
 8010b14:	2160      	movs	r1, #96	; 0x60
 8010b16:	438b      	bics	r3, r1
 8010b18:	6961      	ldr	r1, [r4, #20]
 8010b1a:	430b      	orrs	r3, r1
 8010b1c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010b1e:	6822      	ldr	r2, [r4, #0]
 8010b20:	6893      	ldr	r3, [r2, #8]
 8010b22:	2180      	movs	r1, #128	; 0x80
 8010b24:	438b      	bics	r3, r1
 8010b26:	69a1      	ldr	r1, [r4, #24]
 8010b28:	430b      	orrs	r3, r1
 8010b2a:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	7763      	strb	r3, [r4, #29]
}
 8010b30:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010b32:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010b34:	f7fc fe10 	bl	800d758 <HAL_CRC_MspInit>
 8010b38:	e7dc      	b.n	8010af4 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010b3a:	6823      	ldr	r3, [r4, #0]
 8010b3c:	6922      	ldr	r2, [r4, #16]
 8010b3e:	611a      	str	r2, [r3, #16]
 8010b40:	e7e6      	b.n	8010b10 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010b42:	2001      	movs	r0, #1
 8010b44:	e7f4      	b.n	8010b30 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010b46:	2001      	movs	r0, #1
 8010b48:	e7f2      	b.n	8010b30 <HAL_CRC_Init+0x48>

08010b4a <HAL_CRC_Accumulate>:
{
 8010b4a:	b510      	push	{r4, lr}
 8010b4c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010b4e:	7f03      	ldrb	r3, [r0, #28]
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	d024      	beq.n	8010b9e <HAL_CRC_Accumulate+0x54>
 8010b54:	2301      	movs	r3, #1
 8010b56:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010b58:	3301      	adds	r3, #1
 8010b5a:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010b5c:	6a03      	ldr	r3, [r0, #32]
 8010b5e:	2b02      	cmp	r3, #2
 8010b60:	d01a      	beq.n	8010b98 <HAL_CRC_Accumulate+0x4e>
 8010b62:	2b03      	cmp	r3, #3
 8010b64:	d007      	beq.n	8010b76 <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010b66:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	d011      	beq.n	8010b90 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010b70:	2300      	movs	r3, #0
 8010b72:	7723      	strb	r3, [r4, #28]
}
 8010b74:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8010b76:	2a00      	cmp	r2, #0
 8010b78:	d007      	beq.n	8010b8a <HAL_CRC_Accumulate+0x40>
 8010b7a:	000b      	movs	r3, r1
 8010b7c:	0092      	lsls	r2, r2, #2
 8010b7e:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010b80:	6822      	ldr	r2, [r4, #0]
 8010b82:	cb01      	ldmia	r3!, {r0}
 8010b84:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010b86:	428b      	cmp	r3, r1
 8010b88:	d1fa      	bne.n	8010b80 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010b8a:	6823      	ldr	r3, [r4, #0]
 8010b8c:	6818      	ldr	r0, [r3, #0]
      break;
 8010b8e:	e7ed      	b.n	8010b6c <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010b90:	0020      	movs	r0, r4
 8010b92:	f7ff ff53 	bl	8010a3c <CRC_Handle_8>
      break;
 8010b96:	e7e9      	b.n	8010b6c <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010b98:	f7ff ff8d 	bl	8010ab6 <CRC_Handle_16>
      break;
 8010b9c:	e7e6      	b.n	8010b6c <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010b9e:	2002      	movs	r0, #2
 8010ba0:	e7e8      	b.n	8010b74 <HAL_CRC_Accumulate+0x2a>

08010ba2 <HAL_CRC_Calculate>:
{
 8010ba2:	b570      	push	{r4, r5, r6, lr}
 8010ba4:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010ba6:	7f03      	ldrb	r3, [r0, #28]
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d029      	beq.n	8010c00 <HAL_CRC_Calculate+0x5e>
 8010bac:	2501      	movs	r5, #1
 8010bae:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010bb0:	2302      	movs	r3, #2
 8010bb2:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010bb4:	6800      	ldr	r0, [r0, #0]
 8010bb6:	6883      	ldr	r3, [r0, #8]
 8010bb8:	432b      	orrs	r3, r5
 8010bba:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010bbc:	6a23      	ldr	r3, [r4, #32]
 8010bbe:	2b02      	cmp	r3, #2
 8010bc0:	d01a      	beq.n	8010bf8 <HAL_CRC_Calculate+0x56>
 8010bc2:	2b03      	cmp	r3, #3
 8010bc4:	d007      	beq.n	8010bd6 <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010bc6:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d011      	beq.n	8010bf0 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010bcc:	2301      	movs	r3, #1
 8010bce:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	7723      	strb	r3, [r4, #28]
}
 8010bd4:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010bd6:	2a00      	cmp	r2, #0
 8010bd8:	d007      	beq.n	8010bea <HAL_CRC_Calculate+0x48>
 8010bda:	000b      	movs	r3, r1
 8010bdc:	0092      	lsls	r2, r2, #2
 8010bde:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010be0:	6820      	ldr	r0, [r4, #0]
 8010be2:	cb20      	ldmia	r3!, {r5}
 8010be4:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010be6:	428b      	cmp	r3, r1
 8010be8:	d1fa      	bne.n	8010be0 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	6818      	ldr	r0, [r3, #0]
      break;
 8010bee:	e7ed      	b.n	8010bcc <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010bf0:	0020      	movs	r0, r4
 8010bf2:	f7ff ff23 	bl	8010a3c <CRC_Handle_8>
      break;
 8010bf6:	e7e9      	b.n	8010bcc <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010bf8:	0020      	movs	r0, r4
 8010bfa:	f7ff ff5c 	bl	8010ab6 <CRC_Handle_16>
      break;
 8010bfe:	e7e5      	b.n	8010bcc <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010c00:	2002      	movs	r0, #2
 8010c02:	e7e7      	b.n	8010bd4 <HAL_CRC_Calculate+0x32>

08010c04 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010c04:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010c06:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010c08:	2501      	movs	r5, #1
 8010c0a:	002c      	movs	r4, r5
 8010c0c:	409c      	lsls	r4, r3
 8010c0e:	4221      	tst	r1, r4
 8010c10:	d10b      	bne.n	8010c2a <HAL_CRCEx_Polynomial_Set+0x26>
 8010c12:	3b01      	subs	r3, #1
 8010c14:	d2f9      	bcs.n	8010c0a <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8010c16:	2a10      	cmp	r2, #16
 8010c18:	d01c      	beq.n	8010c54 <HAL_CRCEx_Polynomial_Set+0x50>
 8010c1a:	2a18      	cmp	r2, #24
 8010c1c:	d01e      	beq.n	8010c5c <HAL_CRCEx_Polynomial_Set+0x58>
 8010c1e:	2a08      	cmp	r2, #8
 8010c20:	d109      	bne.n	8010c36 <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 8010c22:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8010c24:	2b0f      	cmp	r3, #15
 8010c26:	d906      	bls.n	8010c36 <HAL_CRCEx_Polynomial_Set+0x32>
 8010c28:	e00e      	b.n	8010c48 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8010c2a:	2a10      	cmp	r2, #16
 8010c2c:	d012      	beq.n	8010c54 <HAL_CRCEx_Polynomial_Set+0x50>
 8010c2e:	2a18      	cmp	r2, #24
 8010c30:	d00c      	beq.n	8010c4c <HAL_CRCEx_Polynomial_Set+0x48>
 8010c32:	2a08      	cmp	r2, #8
 8010c34:	d0f5      	beq.n	8010c22 <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010c36:	6803      	ldr	r3, [r0, #0]
 8010c38:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010c3a:	6801      	ldr	r1, [r0, #0]
 8010c3c:	688b      	ldr	r3, [r1, #8]
 8010c3e:	2018      	movs	r0, #24
 8010c40:	4383      	bics	r3, r0
 8010c42:	431a      	orrs	r2, r3
 8010c44:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010c46:	2400      	movs	r4, #0
}
 8010c48:	0020      	movs	r0, r4
 8010c4a:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010c4c:	2b06      	cmp	r3, #6
 8010c4e:	d9f2      	bls.n	8010c36 <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 8010c50:	2401      	movs	r4, #1
 8010c52:	e7f9      	b.n	8010c48 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010c54:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 8010c56:	2b07      	cmp	r3, #7
 8010c58:	d9ed      	bls.n	8010c36 <HAL_CRCEx_Polynomial_Set+0x32>
 8010c5a:	e7f5      	b.n	8010c48 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010c5c:	2401      	movs	r4, #1
 8010c5e:	e7f3      	b.n	8010c48 <HAL_CRCEx_Polynomial_Set+0x44>

08010c60 <HAL_CRCEx_Init>:
{
 8010c60:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010c62:	7903      	ldrb	r3, [r0, #4]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d109      	bne.n	8010c7c <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010c68:	6803      	ldr	r3, [r0, #0]
 8010c6a:	4a08      	ldr	r2, [pc, #32]	; (8010c8c <HAL_CRCEx_Init+0x2c>)
 8010c6c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010c6e:	6802      	ldr	r2, [r0, #0]
 8010c70:	6893      	ldr	r3, [r2, #8]
 8010c72:	2118      	movs	r1, #24
 8010c74:	438b      	bics	r3, r1
 8010c76:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010c78:	2000      	movs	r0, #0
}
 8010c7a:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010c7c:	68c2      	ldr	r2, [r0, #12]
 8010c7e:	6881      	ldr	r1, [r0, #8]
 8010c80:	f7ff ffc0 	bl	8010c04 <HAL_CRCEx_Polynomial_Set>
 8010c84:	1e43      	subs	r3, r0, #1
 8010c86:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010c88:	b2c0      	uxtb	r0, r0
 8010c8a:	e7f6      	b.n	8010c7a <HAL_CRCEx_Init+0x1a>
 8010c8c:	04c11db7 	.word	0x04c11db7

08010c90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010c90:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010c92:	2800      	cmp	r0, #0
 8010c94:	d022      	beq.n	8010cdc <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010c96:	2321      	movs	r3, #33	; 0x21
 8010c98:	5cc3      	ldrb	r3, [r0, r3]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d102      	bne.n	8010ca4 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8010c9e:	3320      	adds	r3, #32
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010ca4:	2121      	movs	r1, #33	; 0x21
 8010ca6:	2302      	movs	r3, #2
 8010ca8:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010caa:	6804      	ldr	r4, [r0, #0]
 8010cac:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010cae:	4a0c      	ldr	r2, [pc, #48]	; (8010ce0 <HAL_DMA_Init+0x50>)
 8010cb0:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010cb2:	6843      	ldr	r3, [r0, #4]
 8010cb4:	6885      	ldr	r5, [r0, #8]
 8010cb6:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010cb8:	68c5      	ldr	r5, [r0, #12]
 8010cba:	432b      	orrs	r3, r5
 8010cbc:	6905      	ldr	r5, [r0, #16]
 8010cbe:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010cc0:	6945      	ldr	r5, [r0, #20]
 8010cc2:	432b      	orrs	r3, r5
 8010cc4:	6985      	ldr	r5, [r0, #24]
 8010cc6:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010cc8:	69c5      	ldr	r5, [r0, #28]
 8010cca:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010ccc:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010cce:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010cd8:	2000      	movs	r0, #0
}  
 8010cda:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010cdc:	2001      	movs	r0, #1
 8010cde:	e7fc      	b.n	8010cda <HAL_DMA_Init+0x4a>
 8010ce0:	ffffc00f 	.word	0xffffc00f

08010ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010ce4:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010ce6:	2420      	movs	r4, #32
 8010ce8:	5d04      	ldrb	r4, [r0, r4]
 8010cea:	2c01      	cmp	r4, #1
 8010cec:	d02d      	beq.n	8010d4a <HAL_DMA_Start_IT+0x66>
 8010cee:	2601      	movs	r6, #1
 8010cf0:	2420      	movs	r4, #32
 8010cf2:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010cf4:	3401      	adds	r4, #1
 8010cf6:	2502      	movs	r5, #2
 8010cf8:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010cfa:	6805      	ldr	r5, [r0, #0]
 8010cfc:	682c      	ldr	r4, [r5, #0]
 8010cfe:	43b4      	bics	r4, r6
 8010d00:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010d02:	6804      	ldr	r4, [r0, #0]
 8010d04:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010d06:	6843      	ldr	r3, [r0, #4]
 8010d08:	2b10      	cmp	r3, #16
 8010d0a:	d019      	beq.n	8010d40 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010d0c:	6803      	ldr	r3, [r0, #0]
 8010d0e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010d10:	6803      	ldr	r3, [r0, #0]
 8010d12:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010d14:	6802      	ldr	r2, [r0, #0]
 8010d16:	6813      	ldr	r3, [r2, #0]
 8010d18:	2102      	movs	r1, #2
 8010d1a:	430b      	orrs	r3, r1
 8010d1c:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010d1e:	6802      	ldr	r2, [r0, #0]
 8010d20:	6813      	ldr	r3, [r2, #0]
 8010d22:	3102      	adds	r1, #2
 8010d24:	430b      	orrs	r3, r1
 8010d26:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010d28:	6802      	ldr	r2, [r0, #0]
 8010d2a:	6813      	ldr	r3, [r2, #0]
 8010d2c:	3104      	adds	r1, #4
 8010d2e:	430b      	orrs	r3, r1
 8010d30:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010d32:	6802      	ldr	r2, [r0, #0]
 8010d34:	6813      	ldr	r3, [r2, #0]
 8010d36:	3907      	subs	r1, #7
 8010d38:	430b      	orrs	r3, r1
 8010d3a:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010d3c:	2000      	movs	r0, #0
} 
 8010d3e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010d40:	6803      	ldr	r3, [r0, #0]
 8010d42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010d44:	6803      	ldr	r3, [r0, #0]
 8010d46:	60d9      	str	r1, [r3, #12]
 8010d48:	e7e4      	b.n	8010d14 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8010d4a:	2002      	movs	r0, #2
 8010d4c:	e7f7      	b.n	8010d3e <HAL_DMA_Start_IT+0x5a>

08010d4e <HAL_DMA_Abort>:
{
 8010d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d50:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010d52:	6802      	ldr	r2, [r0, #0]
 8010d54:	6813      	ldr	r3, [r2, #0]
 8010d56:	2101      	movs	r1, #1
 8010d58:	438b      	bics	r3, r1
 8010d5a:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010d5c:	f7ff fdd8 	bl	8010910 <HAL_GetTick>
 8010d60:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010d62:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010d64:	26fa      	movs	r6, #250	; 0xfa
 8010d66:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010d68:	6823      	ldr	r3, [r4, #0]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	421d      	tst	r5, r3
 8010d6e:	d00f      	beq.n	8010d90 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010d70:	f7ff fdce 	bl	8010910 <HAL_GetTick>
 8010d74:	1bc0      	subs	r0, r0, r7
 8010d76:	42b0      	cmp	r0, r6
 8010d78:	d9f6      	bls.n	8010d68 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d7c:	2220      	movs	r2, #32
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010d82:	2321      	movs	r3, #33	; 0x21
 8010d84:	2103      	movs	r1, #3
 8010d86:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010d88:	2300      	movs	r3, #0
 8010d8a:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010d8c:	2003      	movs	r0, #3
 8010d8e:	e006      	b.n	8010d9e <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010d90:	2321      	movs	r3, #33	; 0x21
 8010d92:	2201      	movs	r2, #1
 8010d94:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010d96:	3b01      	subs	r3, #1
 8010d98:	2200      	movs	r2, #0
 8010d9a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010d9c:	2000      	movs	r0, #0
}
 8010d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010da0 <HAL_DMA_IRQHandler>:
{        
 8010da0:	b510      	push	{r4, lr}
 8010da2:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010da4:	6803      	ldr	r3, [r0, #0]
 8010da6:	4ab4      	ldr	r2, [pc, #720]	; (8011078 <HAL_DMA_IRQHandler+0x2d8>)
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d94d      	bls.n	8010e48 <HAL_DMA_IRQHandler+0xa8>
 8010dac:	4ab3      	ldr	r2, [pc, #716]	; (801107c <HAL_DMA_IRQHandler+0x2dc>)
 8010dae:	6811      	ldr	r1, [r2, #0]
 8010db0:	4ab3      	ldr	r2, [pc, #716]	; (8011080 <HAL_DMA_IRQHandler+0x2e0>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d026      	beq.n	8010e04 <HAL_DMA_IRQHandler+0x64>
 8010db6:	4ab3      	ldr	r2, [pc, #716]	; (8011084 <HAL_DMA_IRQHandler+0x2e4>)
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d02d      	beq.n	8010e18 <HAL_DMA_IRQHandler+0x78>
 8010dbc:	4ab2      	ldr	r2, [pc, #712]	; (8011088 <HAL_DMA_IRQHandler+0x2e8>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d02c      	beq.n	8010e1c <HAL_DMA_IRQHandler+0x7c>
 8010dc2:	4ab2      	ldr	r2, [pc, #712]	; (801108c <HAL_DMA_IRQHandler+0x2ec>)
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d02c      	beq.n	8010e22 <HAL_DMA_IRQHandler+0x82>
 8010dc8:	4ab1      	ldr	r2, [pc, #708]	; (8011090 <HAL_DMA_IRQHandler+0x2f0>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d02c      	beq.n	8010e28 <HAL_DMA_IRQHandler+0x88>
 8010dce:	4ab1      	ldr	r2, [pc, #708]	; (8011094 <HAL_DMA_IRQHandler+0x2f4>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d02c      	beq.n	8010e2e <HAL_DMA_IRQHandler+0x8e>
 8010dd4:	4aa8      	ldr	r2, [pc, #672]	; (8011078 <HAL_DMA_IRQHandler+0x2d8>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d02c      	beq.n	8010e34 <HAL_DMA_IRQHandler+0x94>
 8010dda:	4aaf      	ldr	r2, [pc, #700]	; (8011098 <HAL_DMA_IRQHandler+0x2f8>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d02c      	beq.n	8010e3a <HAL_DMA_IRQHandler+0x9a>
 8010de0:	4aae      	ldr	r2, [pc, #696]	; (801109c <HAL_DMA_IRQHandler+0x2fc>)
 8010de2:	4293      	cmp	r3, r2
 8010de4:	d02b      	beq.n	8010e3e <HAL_DMA_IRQHandler+0x9e>
 8010de6:	4aae      	ldr	r2, [pc, #696]	; (80110a0 <HAL_DMA_IRQHandler+0x300>)
 8010de8:	4293      	cmp	r3, r2
 8010dea:	d02a      	beq.n	8010e42 <HAL_DMA_IRQHandler+0xa2>
 8010dec:	4aad      	ldr	r2, [pc, #692]	; (80110a4 <HAL_DMA_IRQHandler+0x304>)
 8010dee:	189a      	adds	r2, r3, r2
 8010df0:	4250      	negs	r0, r2
 8010df2:	4142      	adcs	r2, r0
 8010df4:	4252      	negs	r2, r2
 8010df6:	48ac      	ldr	r0, [pc, #688]	; (80110a8 <HAL_DMA_IRQHandler+0x308>)
 8010df8:	4002      	ands	r2, r0
 8010dfa:	2080      	movs	r0, #128	; 0x80
 8010dfc:	0300      	lsls	r0, r0, #12
 8010dfe:	4684      	mov	ip, r0
 8010e00:	4462      	add	r2, ip
 8010e02:	e000      	b.n	8010e06 <HAL_DMA_IRQHandler+0x66>
 8010e04:	2208      	movs	r2, #8
 8010e06:	420a      	tst	r2, r1
 8010e08:	d100      	bne.n	8010e0c <HAL_DMA_IRQHandler+0x6c>
 8010e0a:	e0e6      	b.n	8010fda <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	0712      	lsls	r2, r2, #28
 8010e10:	d500      	bpl.n	8010e14 <HAL_DMA_IRQHandler+0x74>
 8010e12:	e097      	b.n	8010f44 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e14:	6823      	ldr	r3, [r4, #0]
 8010e16:	e0e0      	b.n	8010fda <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010e18:	2280      	movs	r2, #128	; 0x80
 8010e1a:	e7f4      	b.n	8010e06 <HAL_DMA_IRQHandler+0x66>
 8010e1c:	2280      	movs	r2, #128	; 0x80
 8010e1e:	0112      	lsls	r2, r2, #4
 8010e20:	e7f1      	b.n	8010e06 <HAL_DMA_IRQHandler+0x66>
 8010e22:	2280      	movs	r2, #128	; 0x80
 8010e24:	0212      	lsls	r2, r2, #8
 8010e26:	e7ee      	b.n	8010e06 <HAL_DMA_IRQHandler+0x66>
 8010e28:	2280      	movs	r2, #128	; 0x80
 8010e2a:	0312      	lsls	r2, r2, #12
 8010e2c:	e7eb      	b.n	8010e06 <HAL_DMA_IRQHandler+0x66>
 8010e2e:	2280      	movs	r2, #128	; 0x80
 8010e30:	0412      	lsls	r2, r2, #16
 8010e32:	e7e8      	b.n	8010e06 <HAL_DMA_IRQHandler+0x66>
 8010e34:	2280      	movs	r2, #128	; 0x80
 8010e36:	0512      	lsls	r2, r2, #20
 8010e38:	e7e5      	b.n	8010e06 <HAL_DMA_IRQHandler+0x66>
 8010e3a:	2208      	movs	r2, #8
 8010e3c:	e7e3      	b.n	8010e06 <HAL_DMA_IRQHandler+0x66>
 8010e3e:	2280      	movs	r2, #128	; 0x80
 8010e40:	e7e1      	b.n	8010e06 <HAL_DMA_IRQHandler+0x66>
 8010e42:	2280      	movs	r2, #128	; 0x80
 8010e44:	0112      	lsls	r2, r2, #4
 8010e46:	e7de      	b.n	8010e06 <HAL_DMA_IRQHandler+0x66>
 8010e48:	4a98      	ldr	r2, [pc, #608]	; (80110ac <HAL_DMA_IRQHandler+0x30c>)
 8010e4a:	6811      	ldr	r1, [r2, #0]
 8010e4c:	4a8c      	ldr	r2, [pc, #560]	; (8011080 <HAL_DMA_IRQHandler+0x2e0>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d026      	beq.n	8010ea0 <HAL_DMA_IRQHandler+0x100>
 8010e52:	4a8c      	ldr	r2, [pc, #560]	; (8011084 <HAL_DMA_IRQHandler+0x2e4>)
 8010e54:	4293      	cmp	r3, r2
 8010e56:	d05d      	beq.n	8010f14 <HAL_DMA_IRQHandler+0x174>
 8010e58:	4a8b      	ldr	r2, [pc, #556]	; (8011088 <HAL_DMA_IRQHandler+0x2e8>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d05c      	beq.n	8010f18 <HAL_DMA_IRQHandler+0x178>
 8010e5e:	4a8b      	ldr	r2, [pc, #556]	; (801108c <HAL_DMA_IRQHandler+0x2ec>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d05c      	beq.n	8010f1e <HAL_DMA_IRQHandler+0x17e>
 8010e64:	4a8a      	ldr	r2, [pc, #552]	; (8011090 <HAL_DMA_IRQHandler+0x2f0>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d05c      	beq.n	8010f24 <HAL_DMA_IRQHandler+0x184>
 8010e6a:	4a8a      	ldr	r2, [pc, #552]	; (8011094 <HAL_DMA_IRQHandler+0x2f4>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d05c      	beq.n	8010f2a <HAL_DMA_IRQHandler+0x18a>
 8010e70:	4a81      	ldr	r2, [pc, #516]	; (8011078 <HAL_DMA_IRQHandler+0x2d8>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d05c      	beq.n	8010f30 <HAL_DMA_IRQHandler+0x190>
 8010e76:	4a88      	ldr	r2, [pc, #544]	; (8011098 <HAL_DMA_IRQHandler+0x2f8>)
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	d05c      	beq.n	8010f36 <HAL_DMA_IRQHandler+0x196>
 8010e7c:	4a87      	ldr	r2, [pc, #540]	; (801109c <HAL_DMA_IRQHandler+0x2fc>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d05b      	beq.n	8010f3a <HAL_DMA_IRQHandler+0x19a>
 8010e82:	4a87      	ldr	r2, [pc, #540]	; (80110a0 <HAL_DMA_IRQHandler+0x300>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d05a      	beq.n	8010f3e <HAL_DMA_IRQHandler+0x19e>
 8010e88:	4a86      	ldr	r2, [pc, #536]	; (80110a4 <HAL_DMA_IRQHandler+0x304>)
 8010e8a:	189a      	adds	r2, r3, r2
 8010e8c:	4250      	negs	r0, r2
 8010e8e:	4142      	adcs	r2, r0
 8010e90:	4252      	negs	r2, r2
 8010e92:	4885      	ldr	r0, [pc, #532]	; (80110a8 <HAL_DMA_IRQHandler+0x308>)
 8010e94:	4002      	ands	r2, r0
 8010e96:	2080      	movs	r0, #128	; 0x80
 8010e98:	0300      	lsls	r0, r0, #12
 8010e9a:	4684      	mov	ip, r0
 8010e9c:	4462      	add	r2, ip
 8010e9e:	e000      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x102>
 8010ea0:	2208      	movs	r2, #8
 8010ea2:	420a      	tst	r2, r1
 8010ea4:	d000      	beq.n	8010ea8 <HAL_DMA_IRQHandler+0x108>
 8010ea6:	e3ad      	b.n	8011604 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ea8:	4a80      	ldr	r2, [pc, #512]	; (80110ac <HAL_DMA_IRQHandler+0x30c>)
 8010eaa:	6811      	ldr	r1, [r2, #0]
 8010eac:	4a74      	ldr	r2, [pc, #464]	; (8011080 <HAL_DMA_IRQHandler+0x2e0>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d100      	bne.n	8010eb4 <HAL_DMA_IRQHandler+0x114>
 8010eb2:	e198      	b.n	80111e6 <HAL_DMA_IRQHandler+0x446>
 8010eb4:	4a73      	ldr	r2, [pc, #460]	; (8011084 <HAL_DMA_IRQHandler+0x2e4>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d100      	bne.n	8010ebc <HAL_DMA_IRQHandler+0x11c>
 8010eba:	e1da      	b.n	8011272 <HAL_DMA_IRQHandler+0x4d2>
 8010ebc:	4a72      	ldr	r2, [pc, #456]	; (8011088 <HAL_DMA_IRQHandler+0x2e8>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d100      	bne.n	8010ec4 <HAL_DMA_IRQHandler+0x124>
 8010ec2:	e1d8      	b.n	8011276 <HAL_DMA_IRQHandler+0x4d6>
 8010ec4:	4a71      	ldr	r2, [pc, #452]	; (801108c <HAL_DMA_IRQHandler+0x2ec>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d100      	bne.n	8010ecc <HAL_DMA_IRQHandler+0x12c>
 8010eca:	e1d7      	b.n	801127c <HAL_DMA_IRQHandler+0x4dc>
 8010ecc:	4a70      	ldr	r2, [pc, #448]	; (8011090 <HAL_DMA_IRQHandler+0x2f0>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d100      	bne.n	8010ed4 <HAL_DMA_IRQHandler+0x134>
 8010ed2:	e1d6      	b.n	8011282 <HAL_DMA_IRQHandler+0x4e2>
 8010ed4:	4a6f      	ldr	r2, [pc, #444]	; (8011094 <HAL_DMA_IRQHandler+0x2f4>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d100      	bne.n	8010edc <HAL_DMA_IRQHandler+0x13c>
 8010eda:	e1d5      	b.n	8011288 <HAL_DMA_IRQHandler+0x4e8>
 8010edc:	4a66      	ldr	r2, [pc, #408]	; (8011078 <HAL_DMA_IRQHandler+0x2d8>)
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d100      	bne.n	8010ee4 <HAL_DMA_IRQHandler+0x144>
 8010ee2:	e1d4      	b.n	801128e <HAL_DMA_IRQHandler+0x4ee>
 8010ee4:	4a6c      	ldr	r2, [pc, #432]	; (8011098 <HAL_DMA_IRQHandler+0x2f8>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d100      	bne.n	8010eec <HAL_DMA_IRQHandler+0x14c>
 8010eea:	e1d3      	b.n	8011294 <HAL_DMA_IRQHandler+0x4f4>
 8010eec:	4a6b      	ldr	r2, [pc, #428]	; (801109c <HAL_DMA_IRQHandler+0x2fc>)
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d100      	bne.n	8010ef4 <HAL_DMA_IRQHandler+0x154>
 8010ef2:	e1d1      	b.n	8011298 <HAL_DMA_IRQHandler+0x4f8>
 8010ef4:	4a6a      	ldr	r2, [pc, #424]	; (80110a0 <HAL_DMA_IRQHandler+0x300>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d100      	bne.n	8010efc <HAL_DMA_IRQHandler+0x15c>
 8010efa:	e1cf      	b.n	801129c <HAL_DMA_IRQHandler+0x4fc>
 8010efc:	4a69      	ldr	r2, [pc, #420]	; (80110a4 <HAL_DMA_IRQHandler+0x304>)
 8010efe:	189a      	adds	r2, r3, r2
 8010f00:	4250      	negs	r0, r2
 8010f02:	4142      	adcs	r2, r0
 8010f04:	4252      	negs	r2, r2
 8010f06:	486a      	ldr	r0, [pc, #424]	; (80110b0 <HAL_DMA_IRQHandler+0x310>)
 8010f08:	4002      	ands	r2, r0
 8010f0a:	2080      	movs	r0, #128	; 0x80
 8010f0c:	02c0      	lsls	r0, r0, #11
 8010f0e:	4684      	mov	ip, r0
 8010f10:	4462      	add	r2, ip
 8010f12:	e169      	b.n	80111e8 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010f14:	2280      	movs	r2, #128	; 0x80
 8010f16:	e7c4      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x102>
 8010f18:	2280      	movs	r2, #128	; 0x80
 8010f1a:	0112      	lsls	r2, r2, #4
 8010f1c:	e7c1      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x102>
 8010f1e:	2280      	movs	r2, #128	; 0x80
 8010f20:	0212      	lsls	r2, r2, #8
 8010f22:	e7be      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x102>
 8010f24:	2280      	movs	r2, #128	; 0x80
 8010f26:	0312      	lsls	r2, r2, #12
 8010f28:	e7bb      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x102>
 8010f2a:	2280      	movs	r2, #128	; 0x80
 8010f2c:	0412      	lsls	r2, r2, #16
 8010f2e:	e7b8      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x102>
 8010f30:	2280      	movs	r2, #128	; 0x80
 8010f32:	0512      	lsls	r2, r2, #20
 8010f34:	e7b5      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x102>
 8010f36:	2208      	movs	r2, #8
 8010f38:	e7b3      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x102>
 8010f3a:	2280      	movs	r2, #128	; 0x80
 8010f3c:	e7b1      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x102>
 8010f3e:	2280      	movs	r2, #128	; 0x80
 8010f40:	0112      	lsls	r2, r2, #4
 8010f42:	e7ae      	b.n	8010ea2 <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	2108      	movs	r1, #8
 8010f48:	438a      	bics	r2, r1
 8010f4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010f4c:	6823      	ldr	r3, [r4, #0]
 8010f4e:	4a4a      	ldr	r2, [pc, #296]	; (8011078 <HAL_DMA_IRQHandler+0x2d8>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d800      	bhi.n	8010f56 <HAL_DMA_IRQHandler+0x1b6>
 8010f54:	e0ae      	b.n	80110b4 <HAL_DMA_IRQHandler+0x314>
 8010f56:	4a4a      	ldr	r2, [pc, #296]	; (8011080 <HAL_DMA_IRQHandler+0x2e0>)
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	d027      	beq.n	8010fac <HAL_DMA_IRQHandler+0x20c>
 8010f5c:	4a49      	ldr	r2, [pc, #292]	; (8011084 <HAL_DMA_IRQHandler+0x2e4>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d071      	beq.n	8011046 <HAL_DMA_IRQHandler+0x2a6>
 8010f62:	4a49      	ldr	r2, [pc, #292]	; (8011088 <HAL_DMA_IRQHandler+0x2e8>)
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d070      	beq.n	801104a <HAL_DMA_IRQHandler+0x2aa>
 8010f68:	4a48      	ldr	r2, [pc, #288]	; (801108c <HAL_DMA_IRQHandler+0x2ec>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d070      	beq.n	8011050 <HAL_DMA_IRQHandler+0x2b0>
 8010f6e:	4a48      	ldr	r2, [pc, #288]	; (8011090 <HAL_DMA_IRQHandler+0x2f0>)
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d070      	beq.n	8011056 <HAL_DMA_IRQHandler+0x2b6>
 8010f74:	4a47      	ldr	r2, [pc, #284]	; (8011094 <HAL_DMA_IRQHandler+0x2f4>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d070      	beq.n	801105c <HAL_DMA_IRQHandler+0x2bc>
 8010f7a:	4a3f      	ldr	r2, [pc, #252]	; (8011078 <HAL_DMA_IRQHandler+0x2d8>)
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	d070      	beq.n	8011062 <HAL_DMA_IRQHandler+0x2c2>
 8010f80:	4a45      	ldr	r2, [pc, #276]	; (8011098 <HAL_DMA_IRQHandler+0x2f8>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d070      	beq.n	8011068 <HAL_DMA_IRQHandler+0x2c8>
 8010f86:	4a45      	ldr	r2, [pc, #276]	; (801109c <HAL_DMA_IRQHandler+0x2fc>)
 8010f88:	4293      	cmp	r3, r2
 8010f8a:	d06f      	beq.n	801106c <HAL_DMA_IRQHandler+0x2cc>
 8010f8c:	4a44      	ldr	r2, [pc, #272]	; (80110a0 <HAL_DMA_IRQHandler+0x300>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d06e      	beq.n	8011070 <HAL_DMA_IRQHandler+0x2d0>
 8010f92:	4a44      	ldr	r2, [pc, #272]	; (80110a4 <HAL_DMA_IRQHandler+0x304>)
 8010f94:	4694      	mov	ip, r2
 8010f96:	4463      	add	r3, ip
 8010f98:	425a      	negs	r2, r3
 8010f9a:	4153      	adcs	r3, r2
 8010f9c:	425b      	negs	r3, r3
 8010f9e:	4a42      	ldr	r2, [pc, #264]	; (80110a8 <HAL_DMA_IRQHandler+0x308>)
 8010fa0:	4013      	ands	r3, r2
 8010fa2:	2280      	movs	r2, #128	; 0x80
 8010fa4:	0312      	lsls	r2, r2, #12
 8010fa6:	4694      	mov	ip, r2
 8010fa8:	4463      	add	r3, ip
 8010faa:	e000      	b.n	8010fae <HAL_DMA_IRQHandler+0x20e>
 8010fac:	2308      	movs	r3, #8
 8010fae:	4a33      	ldr	r2, [pc, #204]	; (801107c <HAL_DMA_IRQHandler+0x2dc>)
 8010fb0:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010fb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	4313      	orrs	r3, r2
 8010fb8:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010fba:	2321      	movs	r3, #33	; 0x21
 8010fbc:	3203      	adds	r2, #3
 8010fbe:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010fc0:	3b01      	subs	r3, #1
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010fc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d001      	beq.n	8010fd0 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 8010fcc:	0020      	movs	r0, r4
 8010fce:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010fd0:	6823      	ldr	r3, [r4, #0]
 8010fd2:	4a29      	ldr	r2, [pc, #164]	; (8011078 <HAL_DMA_IRQHandler+0x2d8>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d800      	bhi.n	8010fda <HAL_DMA_IRQHandler+0x23a>
 8010fd8:	e766      	b.n	8010ea8 <HAL_DMA_IRQHandler+0x108>
 8010fda:	4a28      	ldr	r2, [pc, #160]	; (801107c <HAL_DMA_IRQHandler+0x2dc>)
 8010fdc:	6811      	ldr	r1, [r2, #0]
 8010fde:	4a28      	ldr	r2, [pc, #160]	; (8011080 <HAL_DMA_IRQHandler+0x2e0>)
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d100      	bne.n	8010fe6 <HAL_DMA_IRQHandler+0x246>
 8010fe4:	e0ad      	b.n	8011142 <HAL_DMA_IRQHandler+0x3a2>
 8010fe6:	4a27      	ldr	r2, [pc, #156]	; (8011084 <HAL_DMA_IRQHandler+0x2e4>)
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d100      	bne.n	8010fee <HAL_DMA_IRQHandler+0x24e>
 8010fec:	e0e3      	b.n	80111b6 <HAL_DMA_IRQHandler+0x416>
 8010fee:	4a26      	ldr	r2, [pc, #152]	; (8011088 <HAL_DMA_IRQHandler+0x2e8>)
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	d100      	bne.n	8010ff6 <HAL_DMA_IRQHandler+0x256>
 8010ff4:	e0e1      	b.n	80111ba <HAL_DMA_IRQHandler+0x41a>
 8010ff6:	4a25      	ldr	r2, [pc, #148]	; (801108c <HAL_DMA_IRQHandler+0x2ec>)
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d100      	bne.n	8010ffe <HAL_DMA_IRQHandler+0x25e>
 8010ffc:	e0e0      	b.n	80111c0 <HAL_DMA_IRQHandler+0x420>
 8010ffe:	4a24      	ldr	r2, [pc, #144]	; (8011090 <HAL_DMA_IRQHandler+0x2f0>)
 8011000:	4293      	cmp	r3, r2
 8011002:	d100      	bne.n	8011006 <HAL_DMA_IRQHandler+0x266>
 8011004:	e0df      	b.n	80111c6 <HAL_DMA_IRQHandler+0x426>
 8011006:	4a23      	ldr	r2, [pc, #140]	; (8011094 <HAL_DMA_IRQHandler+0x2f4>)
 8011008:	4293      	cmp	r3, r2
 801100a:	d100      	bne.n	801100e <HAL_DMA_IRQHandler+0x26e>
 801100c:	e0de      	b.n	80111cc <HAL_DMA_IRQHandler+0x42c>
 801100e:	4a1a      	ldr	r2, [pc, #104]	; (8011078 <HAL_DMA_IRQHandler+0x2d8>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d100      	bne.n	8011016 <HAL_DMA_IRQHandler+0x276>
 8011014:	e0dd      	b.n	80111d2 <HAL_DMA_IRQHandler+0x432>
 8011016:	4a20      	ldr	r2, [pc, #128]	; (8011098 <HAL_DMA_IRQHandler+0x2f8>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d100      	bne.n	801101e <HAL_DMA_IRQHandler+0x27e>
 801101c:	e0dc      	b.n	80111d8 <HAL_DMA_IRQHandler+0x438>
 801101e:	4a1f      	ldr	r2, [pc, #124]	; (801109c <HAL_DMA_IRQHandler+0x2fc>)
 8011020:	4293      	cmp	r3, r2
 8011022:	d100      	bne.n	8011026 <HAL_DMA_IRQHandler+0x286>
 8011024:	e0da      	b.n	80111dc <HAL_DMA_IRQHandler+0x43c>
 8011026:	4a1e      	ldr	r2, [pc, #120]	; (80110a0 <HAL_DMA_IRQHandler+0x300>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d100      	bne.n	801102e <HAL_DMA_IRQHandler+0x28e>
 801102c:	e0d8      	b.n	80111e0 <HAL_DMA_IRQHandler+0x440>
 801102e:	4a1d      	ldr	r2, [pc, #116]	; (80110a4 <HAL_DMA_IRQHandler+0x304>)
 8011030:	189a      	adds	r2, r3, r2
 8011032:	4250      	negs	r0, r2
 8011034:	4142      	adcs	r2, r0
 8011036:	4252      	negs	r2, r2
 8011038:	481d      	ldr	r0, [pc, #116]	; (80110b0 <HAL_DMA_IRQHandler+0x310>)
 801103a:	4002      	ands	r2, r0
 801103c:	2080      	movs	r0, #128	; 0x80
 801103e:	02c0      	lsls	r0, r0, #11
 8011040:	4684      	mov	ip, r0
 8011042:	4462      	add	r2, ip
 8011044:	e07e      	b.n	8011144 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011046:	2380      	movs	r3, #128	; 0x80
 8011048:	e7b1      	b.n	8010fae <HAL_DMA_IRQHandler+0x20e>
 801104a:	2380      	movs	r3, #128	; 0x80
 801104c:	011b      	lsls	r3, r3, #4
 801104e:	e7ae      	b.n	8010fae <HAL_DMA_IRQHandler+0x20e>
 8011050:	2380      	movs	r3, #128	; 0x80
 8011052:	021b      	lsls	r3, r3, #8
 8011054:	e7ab      	b.n	8010fae <HAL_DMA_IRQHandler+0x20e>
 8011056:	2380      	movs	r3, #128	; 0x80
 8011058:	031b      	lsls	r3, r3, #12
 801105a:	e7a8      	b.n	8010fae <HAL_DMA_IRQHandler+0x20e>
 801105c:	2380      	movs	r3, #128	; 0x80
 801105e:	041b      	lsls	r3, r3, #16
 8011060:	e7a5      	b.n	8010fae <HAL_DMA_IRQHandler+0x20e>
 8011062:	2380      	movs	r3, #128	; 0x80
 8011064:	051b      	lsls	r3, r3, #20
 8011066:	e7a2      	b.n	8010fae <HAL_DMA_IRQHandler+0x20e>
 8011068:	2308      	movs	r3, #8
 801106a:	e7a0      	b.n	8010fae <HAL_DMA_IRQHandler+0x20e>
 801106c:	2380      	movs	r3, #128	; 0x80
 801106e:	e79e      	b.n	8010fae <HAL_DMA_IRQHandler+0x20e>
 8011070:	2380      	movs	r3, #128	; 0x80
 8011072:	011b      	lsls	r3, r3, #4
 8011074:	e79b      	b.n	8010fae <HAL_DMA_IRQHandler+0x20e>
 8011076:	46c0      	nop			; (mov r8, r8)
 8011078:	40020080 	.word	0x40020080
 801107c:	40020400 	.word	0x40020400
 8011080:	40020008 	.word	0x40020008
 8011084:	4002001c 	.word	0x4002001c
 8011088:	40020030 	.word	0x40020030
 801108c:	40020044 	.word	0x40020044
 8011090:	40020058 	.word	0x40020058
 8011094:	4002006c 	.word	0x4002006c
 8011098:	40020408 	.word	0x40020408
 801109c:	4002041c 	.word	0x4002041c
 80110a0:	40020430 	.word	0x40020430
 80110a4:	bffdfbbc 	.word	0xbffdfbbc
 80110a8:	fff88000 	.word	0xfff88000
 80110ac:	40020000 	.word	0x40020000
 80110b0:	fffc4000 	.word	0xfffc4000
 80110b4:	4aaa      	ldr	r2, [pc, #680]	; (8011360 <HAL_DMA_IRQHandler+0x5c0>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d027      	beq.n	801110a <HAL_DMA_IRQHandler+0x36a>
 80110ba:	4aaa      	ldr	r2, [pc, #680]	; (8011364 <HAL_DMA_IRQHandler+0x5c4>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d028      	beq.n	8011112 <HAL_DMA_IRQHandler+0x372>
 80110c0:	4aa9      	ldr	r2, [pc, #676]	; (8011368 <HAL_DMA_IRQHandler+0x5c8>)
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d027      	beq.n	8011116 <HAL_DMA_IRQHandler+0x376>
 80110c6:	4aa9      	ldr	r2, [pc, #676]	; (801136c <HAL_DMA_IRQHandler+0x5cc>)
 80110c8:	4293      	cmp	r3, r2
 80110ca:	d027      	beq.n	801111c <HAL_DMA_IRQHandler+0x37c>
 80110cc:	4aa8      	ldr	r2, [pc, #672]	; (8011370 <HAL_DMA_IRQHandler+0x5d0>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d027      	beq.n	8011122 <HAL_DMA_IRQHandler+0x382>
 80110d2:	4aa8      	ldr	r2, [pc, #672]	; (8011374 <HAL_DMA_IRQHandler+0x5d4>)
 80110d4:	4293      	cmp	r3, r2
 80110d6:	d027      	beq.n	8011128 <HAL_DMA_IRQHandler+0x388>
 80110d8:	4aa7      	ldr	r2, [pc, #668]	; (8011378 <HAL_DMA_IRQHandler+0x5d8>)
 80110da:	4293      	cmp	r3, r2
 80110dc:	d027      	beq.n	801112e <HAL_DMA_IRQHandler+0x38e>
 80110de:	4aa7      	ldr	r2, [pc, #668]	; (801137c <HAL_DMA_IRQHandler+0x5dc>)
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d027      	beq.n	8011134 <HAL_DMA_IRQHandler+0x394>
 80110e4:	4aa6      	ldr	r2, [pc, #664]	; (8011380 <HAL_DMA_IRQHandler+0x5e0>)
 80110e6:	4293      	cmp	r3, r2
 80110e8:	d026      	beq.n	8011138 <HAL_DMA_IRQHandler+0x398>
 80110ea:	4aa6      	ldr	r2, [pc, #664]	; (8011384 <HAL_DMA_IRQHandler+0x5e4>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d025      	beq.n	801113c <HAL_DMA_IRQHandler+0x39c>
 80110f0:	4aa5      	ldr	r2, [pc, #660]	; (8011388 <HAL_DMA_IRQHandler+0x5e8>)
 80110f2:	4694      	mov	ip, r2
 80110f4:	4463      	add	r3, ip
 80110f6:	425a      	negs	r2, r3
 80110f8:	4153      	adcs	r3, r2
 80110fa:	425b      	negs	r3, r3
 80110fc:	4aa3      	ldr	r2, [pc, #652]	; (801138c <HAL_DMA_IRQHandler+0x5ec>)
 80110fe:	4013      	ands	r3, r2
 8011100:	2280      	movs	r2, #128	; 0x80
 8011102:	0312      	lsls	r2, r2, #12
 8011104:	4694      	mov	ip, r2
 8011106:	4463      	add	r3, ip
 8011108:	e000      	b.n	801110c <HAL_DMA_IRQHandler+0x36c>
 801110a:	2308      	movs	r3, #8
 801110c:	4aa0      	ldr	r2, [pc, #640]	; (8011390 <HAL_DMA_IRQHandler+0x5f0>)
 801110e:	6053      	str	r3, [r2, #4]
 8011110:	e74f      	b.n	8010fb2 <HAL_DMA_IRQHandler+0x212>
 8011112:	2380      	movs	r3, #128	; 0x80
 8011114:	e7fa      	b.n	801110c <HAL_DMA_IRQHandler+0x36c>
 8011116:	2380      	movs	r3, #128	; 0x80
 8011118:	011b      	lsls	r3, r3, #4
 801111a:	e7f7      	b.n	801110c <HAL_DMA_IRQHandler+0x36c>
 801111c:	2380      	movs	r3, #128	; 0x80
 801111e:	021b      	lsls	r3, r3, #8
 8011120:	e7f4      	b.n	801110c <HAL_DMA_IRQHandler+0x36c>
 8011122:	2380      	movs	r3, #128	; 0x80
 8011124:	031b      	lsls	r3, r3, #12
 8011126:	e7f1      	b.n	801110c <HAL_DMA_IRQHandler+0x36c>
 8011128:	2380      	movs	r3, #128	; 0x80
 801112a:	041b      	lsls	r3, r3, #16
 801112c:	e7ee      	b.n	801110c <HAL_DMA_IRQHandler+0x36c>
 801112e:	2380      	movs	r3, #128	; 0x80
 8011130:	051b      	lsls	r3, r3, #20
 8011132:	e7eb      	b.n	801110c <HAL_DMA_IRQHandler+0x36c>
 8011134:	2308      	movs	r3, #8
 8011136:	e7e9      	b.n	801110c <HAL_DMA_IRQHandler+0x36c>
 8011138:	2380      	movs	r3, #128	; 0x80
 801113a:	e7e7      	b.n	801110c <HAL_DMA_IRQHandler+0x36c>
 801113c:	2380      	movs	r3, #128	; 0x80
 801113e:	011b      	lsls	r3, r3, #4
 8011140:	e7e4      	b.n	801110c <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011142:	2204      	movs	r2, #4
 8011144:	420a      	tst	r2, r1
 8011146:	d152      	bne.n	80111ee <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011148:	6821      	ldr	r1, [r4, #0]
 801114a:	4b92      	ldr	r3, [pc, #584]	; (8011394 <HAL_DMA_IRQHandler+0x5f4>)
 801114c:	6818      	ldr	r0, [r3, #0]
 801114e:	4a84      	ldr	r2, [pc, #528]	; (8011360 <HAL_DMA_IRQHandler+0x5c0>)
 8011150:	4291      	cmp	r1, r2
 8011152:	d100      	bne.n	8011156 <HAL_DMA_IRQHandler+0x3b6>
 8011154:	e16b      	b.n	801142e <HAL_DMA_IRQHandler+0x68e>
 8011156:	4a83      	ldr	r2, [pc, #524]	; (8011364 <HAL_DMA_IRQHandler+0x5c4>)
 8011158:	4291      	cmp	r1, r2
 801115a:	d100      	bne.n	801115e <HAL_DMA_IRQHandler+0x3be>
 801115c:	e1aa      	b.n	80114b4 <HAL_DMA_IRQHandler+0x714>
 801115e:	4a82      	ldr	r2, [pc, #520]	; (8011368 <HAL_DMA_IRQHandler+0x5c8>)
 8011160:	4291      	cmp	r1, r2
 8011162:	d100      	bne.n	8011166 <HAL_DMA_IRQHandler+0x3c6>
 8011164:	e1a8      	b.n	80114b8 <HAL_DMA_IRQHandler+0x718>
 8011166:	4a81      	ldr	r2, [pc, #516]	; (801136c <HAL_DMA_IRQHandler+0x5cc>)
 8011168:	4291      	cmp	r1, r2
 801116a:	d100      	bne.n	801116e <HAL_DMA_IRQHandler+0x3ce>
 801116c:	e1a7      	b.n	80114be <HAL_DMA_IRQHandler+0x71e>
 801116e:	4b80      	ldr	r3, [pc, #512]	; (8011370 <HAL_DMA_IRQHandler+0x5d0>)
 8011170:	4299      	cmp	r1, r3
 8011172:	d100      	bne.n	8011176 <HAL_DMA_IRQHandler+0x3d6>
 8011174:	e1a6      	b.n	80114c4 <HAL_DMA_IRQHandler+0x724>
 8011176:	4b7f      	ldr	r3, [pc, #508]	; (8011374 <HAL_DMA_IRQHandler+0x5d4>)
 8011178:	4299      	cmp	r1, r3
 801117a:	d100      	bne.n	801117e <HAL_DMA_IRQHandler+0x3de>
 801117c:	e1a5      	b.n	80114ca <HAL_DMA_IRQHandler+0x72a>
 801117e:	4b7e      	ldr	r3, [pc, #504]	; (8011378 <HAL_DMA_IRQHandler+0x5d8>)
 8011180:	4299      	cmp	r1, r3
 8011182:	d100      	bne.n	8011186 <HAL_DMA_IRQHandler+0x3e6>
 8011184:	e1a4      	b.n	80114d0 <HAL_DMA_IRQHandler+0x730>
 8011186:	4b7d      	ldr	r3, [pc, #500]	; (801137c <HAL_DMA_IRQHandler+0x5dc>)
 8011188:	4299      	cmp	r1, r3
 801118a:	d100      	bne.n	801118e <HAL_DMA_IRQHandler+0x3ee>
 801118c:	e1a3      	b.n	80114d6 <HAL_DMA_IRQHandler+0x736>
 801118e:	4b7c      	ldr	r3, [pc, #496]	; (8011380 <HAL_DMA_IRQHandler+0x5e0>)
 8011190:	4299      	cmp	r1, r3
 8011192:	d100      	bne.n	8011196 <HAL_DMA_IRQHandler+0x3f6>
 8011194:	e1a1      	b.n	80114da <HAL_DMA_IRQHandler+0x73a>
 8011196:	4b7b      	ldr	r3, [pc, #492]	; (8011384 <HAL_DMA_IRQHandler+0x5e4>)
 8011198:	4299      	cmp	r1, r3
 801119a:	d100      	bne.n	801119e <HAL_DMA_IRQHandler+0x3fe>
 801119c:	e19f      	b.n	80114de <HAL_DMA_IRQHandler+0x73e>
 801119e:	4b7a      	ldr	r3, [pc, #488]	; (8011388 <HAL_DMA_IRQHandler+0x5e8>)
 80111a0:	18ca      	adds	r2, r1, r3
 80111a2:	4253      	negs	r3, r2
 80111a4:	415a      	adcs	r2, r3
 80111a6:	4252      	negs	r2, r2
 80111a8:	4b7b      	ldr	r3, [pc, #492]	; (8011398 <HAL_DMA_IRQHandler+0x5f8>)
 80111aa:	4013      	ands	r3, r2
 80111ac:	2280      	movs	r2, #128	; 0x80
 80111ae:	0292      	lsls	r2, r2, #10
 80111b0:	4694      	mov	ip, r2
 80111b2:	4463      	add	r3, ip
 80111b4:	e13c      	b.n	8011430 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80111b6:	2240      	movs	r2, #64	; 0x40
 80111b8:	e7c4      	b.n	8011144 <HAL_DMA_IRQHandler+0x3a4>
 80111ba:	2280      	movs	r2, #128	; 0x80
 80111bc:	00d2      	lsls	r2, r2, #3
 80111be:	e7c1      	b.n	8011144 <HAL_DMA_IRQHandler+0x3a4>
 80111c0:	2280      	movs	r2, #128	; 0x80
 80111c2:	01d2      	lsls	r2, r2, #7
 80111c4:	e7be      	b.n	8011144 <HAL_DMA_IRQHandler+0x3a4>
 80111c6:	2280      	movs	r2, #128	; 0x80
 80111c8:	02d2      	lsls	r2, r2, #11
 80111ca:	e7bb      	b.n	8011144 <HAL_DMA_IRQHandler+0x3a4>
 80111cc:	2280      	movs	r2, #128	; 0x80
 80111ce:	03d2      	lsls	r2, r2, #15
 80111d0:	e7b8      	b.n	8011144 <HAL_DMA_IRQHandler+0x3a4>
 80111d2:	2280      	movs	r2, #128	; 0x80
 80111d4:	04d2      	lsls	r2, r2, #19
 80111d6:	e7b5      	b.n	8011144 <HAL_DMA_IRQHandler+0x3a4>
 80111d8:	2204      	movs	r2, #4
 80111da:	e7b3      	b.n	8011144 <HAL_DMA_IRQHandler+0x3a4>
 80111dc:	2240      	movs	r2, #64	; 0x40
 80111de:	e7b1      	b.n	8011144 <HAL_DMA_IRQHandler+0x3a4>
 80111e0:	2280      	movs	r2, #128	; 0x80
 80111e2:	00d2      	lsls	r2, r2, #3
 80111e4:	e7ae      	b.n	8011144 <HAL_DMA_IRQHandler+0x3a4>
 80111e6:	2204      	movs	r2, #4
 80111e8:	420a      	tst	r2, r1
 80111ea:	d100      	bne.n	80111ee <HAL_DMA_IRQHandler+0x44e>
 80111ec:	e208      	b.n	8011600 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	0752      	lsls	r2, r2, #29
 80111f2:	d561      	bpl.n	80112b8 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80111f4:	681a      	ldr	r2, [r3, #0]
 80111f6:	0692      	lsls	r2, r2, #26
 80111f8:	d403      	bmi.n	8011202 <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	2104      	movs	r1, #4
 80111fe:	438a      	bics	r2, r1
 8011200:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011202:	6823      	ldr	r3, [r4, #0]
 8011204:	4a5c      	ldr	r2, [pc, #368]	; (8011378 <HAL_DMA_IRQHandler+0x5d8>)
 8011206:	4293      	cmp	r3, r2
 8011208:	d800      	bhi.n	801120c <HAL_DMA_IRQHandler+0x46c>
 801120a:	e0c9      	b.n	80113a0 <HAL_DMA_IRQHandler+0x600>
 801120c:	4a54      	ldr	r2, [pc, #336]	; (8011360 <HAL_DMA_IRQHandler+0x5c0>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d047      	beq.n	80112a2 <HAL_DMA_IRQHandler+0x502>
 8011212:	4a54      	ldr	r2, [pc, #336]	; (8011364 <HAL_DMA_IRQHandler+0x5c4>)
 8011214:	4293      	cmp	r3, r2
 8011216:	d100      	bne.n	801121a <HAL_DMA_IRQHandler+0x47a>
 8011218:	e089      	b.n	801132e <HAL_DMA_IRQHandler+0x58e>
 801121a:	4a53      	ldr	r2, [pc, #332]	; (8011368 <HAL_DMA_IRQHandler+0x5c8>)
 801121c:	4293      	cmp	r3, r2
 801121e:	d100      	bne.n	8011222 <HAL_DMA_IRQHandler+0x482>
 8011220:	e087      	b.n	8011332 <HAL_DMA_IRQHandler+0x592>
 8011222:	4a52      	ldr	r2, [pc, #328]	; (801136c <HAL_DMA_IRQHandler+0x5cc>)
 8011224:	4293      	cmp	r3, r2
 8011226:	d100      	bne.n	801122a <HAL_DMA_IRQHandler+0x48a>
 8011228:	e086      	b.n	8011338 <HAL_DMA_IRQHandler+0x598>
 801122a:	4a51      	ldr	r2, [pc, #324]	; (8011370 <HAL_DMA_IRQHandler+0x5d0>)
 801122c:	4293      	cmp	r3, r2
 801122e:	d100      	bne.n	8011232 <HAL_DMA_IRQHandler+0x492>
 8011230:	e085      	b.n	801133e <HAL_DMA_IRQHandler+0x59e>
 8011232:	4a50      	ldr	r2, [pc, #320]	; (8011374 <HAL_DMA_IRQHandler+0x5d4>)
 8011234:	4293      	cmp	r3, r2
 8011236:	d100      	bne.n	801123a <HAL_DMA_IRQHandler+0x49a>
 8011238:	e084      	b.n	8011344 <HAL_DMA_IRQHandler+0x5a4>
 801123a:	4a4f      	ldr	r2, [pc, #316]	; (8011378 <HAL_DMA_IRQHandler+0x5d8>)
 801123c:	4293      	cmp	r3, r2
 801123e:	d100      	bne.n	8011242 <HAL_DMA_IRQHandler+0x4a2>
 8011240:	e083      	b.n	801134a <HAL_DMA_IRQHandler+0x5aa>
 8011242:	4a4e      	ldr	r2, [pc, #312]	; (801137c <HAL_DMA_IRQHandler+0x5dc>)
 8011244:	4293      	cmp	r3, r2
 8011246:	d100      	bne.n	801124a <HAL_DMA_IRQHandler+0x4aa>
 8011248:	e082      	b.n	8011350 <HAL_DMA_IRQHandler+0x5b0>
 801124a:	4a4d      	ldr	r2, [pc, #308]	; (8011380 <HAL_DMA_IRQHandler+0x5e0>)
 801124c:	4293      	cmp	r3, r2
 801124e:	d100      	bne.n	8011252 <HAL_DMA_IRQHandler+0x4b2>
 8011250:	e080      	b.n	8011354 <HAL_DMA_IRQHandler+0x5b4>
 8011252:	4a4c      	ldr	r2, [pc, #304]	; (8011384 <HAL_DMA_IRQHandler+0x5e4>)
 8011254:	4293      	cmp	r3, r2
 8011256:	d07f      	beq.n	8011358 <HAL_DMA_IRQHandler+0x5b8>
 8011258:	4a4b      	ldr	r2, [pc, #300]	; (8011388 <HAL_DMA_IRQHandler+0x5e8>)
 801125a:	4694      	mov	ip, r2
 801125c:	4463      	add	r3, ip
 801125e:	425a      	negs	r2, r3
 8011260:	4153      	adcs	r3, r2
 8011262:	425b      	negs	r3, r3
 8011264:	4a4d      	ldr	r2, [pc, #308]	; (801139c <HAL_DMA_IRQHandler+0x5fc>)
 8011266:	4013      	ands	r3, r2
 8011268:	2280      	movs	r2, #128	; 0x80
 801126a:	02d2      	lsls	r2, r2, #11
 801126c:	4694      	mov	ip, r2
 801126e:	4463      	add	r3, ip
 8011270:	e018      	b.n	80112a4 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011272:	2240      	movs	r2, #64	; 0x40
 8011274:	e7b8      	b.n	80111e8 <HAL_DMA_IRQHandler+0x448>
 8011276:	2280      	movs	r2, #128	; 0x80
 8011278:	00d2      	lsls	r2, r2, #3
 801127a:	e7b5      	b.n	80111e8 <HAL_DMA_IRQHandler+0x448>
 801127c:	2280      	movs	r2, #128	; 0x80
 801127e:	01d2      	lsls	r2, r2, #7
 8011280:	e7b2      	b.n	80111e8 <HAL_DMA_IRQHandler+0x448>
 8011282:	2280      	movs	r2, #128	; 0x80
 8011284:	02d2      	lsls	r2, r2, #11
 8011286:	e7af      	b.n	80111e8 <HAL_DMA_IRQHandler+0x448>
 8011288:	2280      	movs	r2, #128	; 0x80
 801128a:	03d2      	lsls	r2, r2, #15
 801128c:	e7ac      	b.n	80111e8 <HAL_DMA_IRQHandler+0x448>
 801128e:	2280      	movs	r2, #128	; 0x80
 8011290:	04d2      	lsls	r2, r2, #19
 8011292:	e7a9      	b.n	80111e8 <HAL_DMA_IRQHandler+0x448>
 8011294:	2204      	movs	r2, #4
 8011296:	e7a7      	b.n	80111e8 <HAL_DMA_IRQHandler+0x448>
 8011298:	2240      	movs	r2, #64	; 0x40
 801129a:	e7a5      	b.n	80111e8 <HAL_DMA_IRQHandler+0x448>
 801129c:	2280      	movs	r2, #128	; 0x80
 801129e:	00d2      	lsls	r2, r2, #3
 80112a0:	e7a2      	b.n	80111e8 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80112a2:	2304      	movs	r3, #4
 80112a4:	4a3b      	ldr	r2, [pc, #236]	; (8011394 <HAL_DMA_IRQHandler+0x5f4>)
 80112a6:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80112a8:	2321      	movs	r3, #33	; 0x21
 80112aa:	2211      	movs	r2, #17
 80112ac:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80112ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d001      	beq.n	80112b8 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 80112b4:	0020      	movs	r0, r4
 80112b6:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80112b8:	6821      	ldr	r1, [r4, #0]
 80112ba:	4b2f      	ldr	r3, [pc, #188]	; (8011378 <HAL_DMA_IRQHandler+0x5d8>)
 80112bc:	4299      	cmp	r1, r3
 80112be:	d900      	bls.n	80112c2 <HAL_DMA_IRQHandler+0x522>
 80112c0:	e743      	b.n	801114a <HAL_DMA_IRQHandler+0x3aa>
 80112c2:	4b33      	ldr	r3, [pc, #204]	; (8011390 <HAL_DMA_IRQHandler+0x5f0>)
 80112c4:	6818      	ldr	r0, [r3, #0]
 80112c6:	4a26      	ldr	r2, [pc, #152]	; (8011360 <HAL_DMA_IRQHandler+0x5c0>)
 80112c8:	4291      	cmp	r1, r2
 80112ca:	d100      	bne.n	80112ce <HAL_DMA_IRQHandler+0x52e>
 80112cc:	e10a      	b.n	80114e4 <HAL_DMA_IRQHandler+0x744>
 80112ce:	4a25      	ldr	r2, [pc, #148]	; (8011364 <HAL_DMA_IRQHandler+0x5c4>)
 80112d0:	4291      	cmp	r1, r2
 80112d2:	d100      	bne.n	80112d6 <HAL_DMA_IRQHandler+0x536>
 80112d4:	e10c      	b.n	80114f0 <HAL_DMA_IRQHandler+0x750>
 80112d6:	4a24      	ldr	r2, [pc, #144]	; (8011368 <HAL_DMA_IRQHandler+0x5c8>)
 80112d8:	4291      	cmp	r1, r2
 80112da:	d100      	bne.n	80112de <HAL_DMA_IRQHandler+0x53e>
 80112dc:	e10a      	b.n	80114f4 <HAL_DMA_IRQHandler+0x754>
 80112de:	4a23      	ldr	r2, [pc, #140]	; (801136c <HAL_DMA_IRQHandler+0x5cc>)
 80112e0:	4291      	cmp	r1, r2
 80112e2:	d100      	bne.n	80112e6 <HAL_DMA_IRQHandler+0x546>
 80112e4:	e109      	b.n	80114fa <HAL_DMA_IRQHandler+0x75a>
 80112e6:	4b22      	ldr	r3, [pc, #136]	; (8011370 <HAL_DMA_IRQHandler+0x5d0>)
 80112e8:	4299      	cmp	r1, r3
 80112ea:	d100      	bne.n	80112ee <HAL_DMA_IRQHandler+0x54e>
 80112ec:	e108      	b.n	8011500 <HAL_DMA_IRQHandler+0x760>
 80112ee:	4b21      	ldr	r3, [pc, #132]	; (8011374 <HAL_DMA_IRQHandler+0x5d4>)
 80112f0:	4299      	cmp	r1, r3
 80112f2:	d100      	bne.n	80112f6 <HAL_DMA_IRQHandler+0x556>
 80112f4:	e107      	b.n	8011506 <HAL_DMA_IRQHandler+0x766>
 80112f6:	4b20      	ldr	r3, [pc, #128]	; (8011378 <HAL_DMA_IRQHandler+0x5d8>)
 80112f8:	4299      	cmp	r1, r3
 80112fa:	d100      	bne.n	80112fe <HAL_DMA_IRQHandler+0x55e>
 80112fc:	e106      	b.n	801150c <HAL_DMA_IRQHandler+0x76c>
 80112fe:	4b1f      	ldr	r3, [pc, #124]	; (801137c <HAL_DMA_IRQHandler+0x5dc>)
 8011300:	4299      	cmp	r1, r3
 8011302:	d100      	bne.n	8011306 <HAL_DMA_IRQHandler+0x566>
 8011304:	e105      	b.n	8011512 <HAL_DMA_IRQHandler+0x772>
 8011306:	4b1e      	ldr	r3, [pc, #120]	; (8011380 <HAL_DMA_IRQHandler+0x5e0>)
 8011308:	4299      	cmp	r1, r3
 801130a:	d100      	bne.n	801130e <HAL_DMA_IRQHandler+0x56e>
 801130c:	e103      	b.n	8011516 <HAL_DMA_IRQHandler+0x776>
 801130e:	4b1d      	ldr	r3, [pc, #116]	; (8011384 <HAL_DMA_IRQHandler+0x5e4>)
 8011310:	4299      	cmp	r1, r3
 8011312:	d100      	bne.n	8011316 <HAL_DMA_IRQHandler+0x576>
 8011314:	e101      	b.n	801151a <HAL_DMA_IRQHandler+0x77a>
 8011316:	4b1c      	ldr	r3, [pc, #112]	; (8011388 <HAL_DMA_IRQHandler+0x5e8>)
 8011318:	18ca      	adds	r2, r1, r3
 801131a:	4253      	negs	r3, r2
 801131c:	415a      	adcs	r2, r3
 801131e:	4252      	negs	r2, r2
 8011320:	4b1d      	ldr	r3, [pc, #116]	; (8011398 <HAL_DMA_IRQHandler+0x5f8>)
 8011322:	4013      	ands	r3, r2
 8011324:	2280      	movs	r2, #128	; 0x80
 8011326:	0292      	lsls	r2, r2, #10
 8011328:	4694      	mov	ip, r2
 801132a:	4463      	add	r3, ip
 801132c:	e0db      	b.n	80114e6 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801132e:	2340      	movs	r3, #64	; 0x40
 8011330:	e7b8      	b.n	80112a4 <HAL_DMA_IRQHandler+0x504>
 8011332:	2380      	movs	r3, #128	; 0x80
 8011334:	00db      	lsls	r3, r3, #3
 8011336:	e7b5      	b.n	80112a4 <HAL_DMA_IRQHandler+0x504>
 8011338:	2380      	movs	r3, #128	; 0x80
 801133a:	01db      	lsls	r3, r3, #7
 801133c:	e7b2      	b.n	80112a4 <HAL_DMA_IRQHandler+0x504>
 801133e:	2380      	movs	r3, #128	; 0x80
 8011340:	02db      	lsls	r3, r3, #11
 8011342:	e7af      	b.n	80112a4 <HAL_DMA_IRQHandler+0x504>
 8011344:	2380      	movs	r3, #128	; 0x80
 8011346:	03db      	lsls	r3, r3, #15
 8011348:	e7ac      	b.n	80112a4 <HAL_DMA_IRQHandler+0x504>
 801134a:	2380      	movs	r3, #128	; 0x80
 801134c:	04db      	lsls	r3, r3, #19
 801134e:	e7a9      	b.n	80112a4 <HAL_DMA_IRQHandler+0x504>
 8011350:	2304      	movs	r3, #4
 8011352:	e7a7      	b.n	80112a4 <HAL_DMA_IRQHandler+0x504>
 8011354:	2340      	movs	r3, #64	; 0x40
 8011356:	e7a5      	b.n	80112a4 <HAL_DMA_IRQHandler+0x504>
 8011358:	2380      	movs	r3, #128	; 0x80
 801135a:	00db      	lsls	r3, r3, #3
 801135c:	e7a2      	b.n	80112a4 <HAL_DMA_IRQHandler+0x504>
 801135e:	46c0      	nop			; (mov r8, r8)
 8011360:	40020008 	.word	0x40020008
 8011364:	4002001c 	.word	0x4002001c
 8011368:	40020030 	.word	0x40020030
 801136c:	40020044 	.word	0x40020044
 8011370:	40020058 	.word	0x40020058
 8011374:	4002006c 	.word	0x4002006c
 8011378:	40020080 	.word	0x40020080
 801137c:	40020408 	.word	0x40020408
 8011380:	4002041c 	.word	0x4002041c
 8011384:	40020430 	.word	0x40020430
 8011388:	bffdfbbc 	.word	0xbffdfbbc
 801138c:	fff88000 	.word	0xfff88000
 8011390:	40020000 	.word	0x40020000
 8011394:	40020400 	.word	0x40020400
 8011398:	fffe2000 	.word	0xfffe2000
 801139c:	fffc4000 	.word	0xfffc4000
 80113a0:	4a9b      	ldr	r2, [pc, #620]	; (8011610 <HAL_DMA_IRQHandler+0x870>)
 80113a2:	4293      	cmp	r3, r2
 80113a4:	d027      	beq.n	80113f6 <HAL_DMA_IRQHandler+0x656>
 80113a6:	4a9b      	ldr	r2, [pc, #620]	; (8011614 <HAL_DMA_IRQHandler+0x874>)
 80113a8:	4293      	cmp	r3, r2
 80113aa:	d028      	beq.n	80113fe <HAL_DMA_IRQHandler+0x65e>
 80113ac:	4a9a      	ldr	r2, [pc, #616]	; (8011618 <HAL_DMA_IRQHandler+0x878>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d027      	beq.n	8011402 <HAL_DMA_IRQHandler+0x662>
 80113b2:	4a9a      	ldr	r2, [pc, #616]	; (801161c <HAL_DMA_IRQHandler+0x87c>)
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d027      	beq.n	8011408 <HAL_DMA_IRQHandler+0x668>
 80113b8:	4a99      	ldr	r2, [pc, #612]	; (8011620 <HAL_DMA_IRQHandler+0x880>)
 80113ba:	4293      	cmp	r3, r2
 80113bc:	d027      	beq.n	801140e <HAL_DMA_IRQHandler+0x66e>
 80113be:	4a99      	ldr	r2, [pc, #612]	; (8011624 <HAL_DMA_IRQHandler+0x884>)
 80113c0:	4293      	cmp	r3, r2
 80113c2:	d027      	beq.n	8011414 <HAL_DMA_IRQHandler+0x674>
 80113c4:	4a98      	ldr	r2, [pc, #608]	; (8011628 <HAL_DMA_IRQHandler+0x888>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d027      	beq.n	801141a <HAL_DMA_IRQHandler+0x67a>
 80113ca:	4a98      	ldr	r2, [pc, #608]	; (801162c <HAL_DMA_IRQHandler+0x88c>)
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d027      	beq.n	8011420 <HAL_DMA_IRQHandler+0x680>
 80113d0:	4a97      	ldr	r2, [pc, #604]	; (8011630 <HAL_DMA_IRQHandler+0x890>)
 80113d2:	4293      	cmp	r3, r2
 80113d4:	d026      	beq.n	8011424 <HAL_DMA_IRQHandler+0x684>
 80113d6:	4a97      	ldr	r2, [pc, #604]	; (8011634 <HAL_DMA_IRQHandler+0x894>)
 80113d8:	4293      	cmp	r3, r2
 80113da:	d025      	beq.n	8011428 <HAL_DMA_IRQHandler+0x688>
 80113dc:	4a96      	ldr	r2, [pc, #600]	; (8011638 <HAL_DMA_IRQHandler+0x898>)
 80113de:	4694      	mov	ip, r2
 80113e0:	4463      	add	r3, ip
 80113e2:	425a      	negs	r2, r3
 80113e4:	4153      	adcs	r3, r2
 80113e6:	425b      	negs	r3, r3
 80113e8:	4a94      	ldr	r2, [pc, #592]	; (801163c <HAL_DMA_IRQHandler+0x89c>)
 80113ea:	4013      	ands	r3, r2
 80113ec:	2280      	movs	r2, #128	; 0x80
 80113ee:	02d2      	lsls	r2, r2, #11
 80113f0:	4694      	mov	ip, r2
 80113f2:	4463      	add	r3, ip
 80113f4:	e000      	b.n	80113f8 <HAL_DMA_IRQHandler+0x658>
 80113f6:	2304      	movs	r3, #4
 80113f8:	4a91      	ldr	r2, [pc, #580]	; (8011640 <HAL_DMA_IRQHandler+0x8a0>)
 80113fa:	6053      	str	r3, [r2, #4]
 80113fc:	e754      	b.n	80112a8 <HAL_DMA_IRQHandler+0x508>
 80113fe:	2340      	movs	r3, #64	; 0x40
 8011400:	e7fa      	b.n	80113f8 <HAL_DMA_IRQHandler+0x658>
 8011402:	2380      	movs	r3, #128	; 0x80
 8011404:	00db      	lsls	r3, r3, #3
 8011406:	e7f7      	b.n	80113f8 <HAL_DMA_IRQHandler+0x658>
 8011408:	2380      	movs	r3, #128	; 0x80
 801140a:	01db      	lsls	r3, r3, #7
 801140c:	e7f4      	b.n	80113f8 <HAL_DMA_IRQHandler+0x658>
 801140e:	2380      	movs	r3, #128	; 0x80
 8011410:	02db      	lsls	r3, r3, #11
 8011412:	e7f1      	b.n	80113f8 <HAL_DMA_IRQHandler+0x658>
 8011414:	2380      	movs	r3, #128	; 0x80
 8011416:	03db      	lsls	r3, r3, #15
 8011418:	e7ee      	b.n	80113f8 <HAL_DMA_IRQHandler+0x658>
 801141a:	2380      	movs	r3, #128	; 0x80
 801141c:	04db      	lsls	r3, r3, #19
 801141e:	e7eb      	b.n	80113f8 <HAL_DMA_IRQHandler+0x658>
 8011420:	2304      	movs	r3, #4
 8011422:	e7e9      	b.n	80113f8 <HAL_DMA_IRQHandler+0x658>
 8011424:	2340      	movs	r3, #64	; 0x40
 8011426:	e7e7      	b.n	80113f8 <HAL_DMA_IRQHandler+0x658>
 8011428:	2380      	movs	r3, #128	; 0x80
 801142a:	00db      	lsls	r3, r3, #3
 801142c:	e7e4      	b.n	80113f8 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801142e:	2302      	movs	r3, #2
 8011430:	4003      	ands	r3, r0
 8011432:	1e5a      	subs	r2, r3, #1
 8011434:	4193      	sbcs	r3, r2
 8011436:	b2db      	uxtb	r3, r3
 8011438:	2b00      	cmp	r3, #0
 801143a:	d100      	bne.n	801143e <HAL_DMA_IRQHandler+0x69e>
 801143c:	e080      	b.n	8011540 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801143e:	680b      	ldr	r3, [r1, #0]
 8011440:	079b      	lsls	r3, r3, #30
 8011442:	d57d      	bpl.n	8011540 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011444:	680b      	ldr	r3, [r1, #0]
 8011446:	069b      	lsls	r3, r3, #26
 8011448:	d403      	bmi.n	8011452 <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 801144a:	680b      	ldr	r3, [r1, #0]
 801144c:	2202      	movs	r2, #2
 801144e:	4393      	bics	r3, r2
 8011450:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011452:	6823      	ldr	r3, [r4, #0]
 8011454:	4a74      	ldr	r2, [pc, #464]	; (8011628 <HAL_DMA_IRQHandler+0x888>)
 8011456:	4293      	cmp	r3, r2
 8011458:	d800      	bhi.n	801145c <HAL_DMA_IRQHandler+0x6bc>
 801145a:	e08a      	b.n	8011572 <HAL_DMA_IRQHandler+0x7d2>
 801145c:	4a6c      	ldr	r2, [pc, #432]	; (8011610 <HAL_DMA_IRQHandler+0x870>)
 801145e:	4293      	cmp	r3, r2
 8011460:	d05e      	beq.n	8011520 <HAL_DMA_IRQHandler+0x780>
 8011462:	4a6c      	ldr	r2, [pc, #432]	; (8011614 <HAL_DMA_IRQHandler+0x874>)
 8011464:	4293      	cmp	r3, r2
 8011466:	d100      	bne.n	801146a <HAL_DMA_IRQHandler+0x6ca>
 8011468:	e06b      	b.n	8011542 <HAL_DMA_IRQHandler+0x7a2>
 801146a:	4a6b      	ldr	r2, [pc, #428]	; (8011618 <HAL_DMA_IRQHandler+0x878>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d06a      	beq.n	8011546 <HAL_DMA_IRQHandler+0x7a6>
 8011470:	4a6a      	ldr	r2, [pc, #424]	; (801161c <HAL_DMA_IRQHandler+0x87c>)
 8011472:	4293      	cmp	r3, r2
 8011474:	d06a      	beq.n	801154c <HAL_DMA_IRQHandler+0x7ac>
 8011476:	4a6a      	ldr	r2, [pc, #424]	; (8011620 <HAL_DMA_IRQHandler+0x880>)
 8011478:	4293      	cmp	r3, r2
 801147a:	d06a      	beq.n	8011552 <HAL_DMA_IRQHandler+0x7b2>
 801147c:	4a69      	ldr	r2, [pc, #420]	; (8011624 <HAL_DMA_IRQHandler+0x884>)
 801147e:	4293      	cmp	r3, r2
 8011480:	d06a      	beq.n	8011558 <HAL_DMA_IRQHandler+0x7b8>
 8011482:	4a69      	ldr	r2, [pc, #420]	; (8011628 <HAL_DMA_IRQHandler+0x888>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d06a      	beq.n	801155e <HAL_DMA_IRQHandler+0x7be>
 8011488:	4a68      	ldr	r2, [pc, #416]	; (801162c <HAL_DMA_IRQHandler+0x88c>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d06a      	beq.n	8011564 <HAL_DMA_IRQHandler+0x7c4>
 801148e:	4a68      	ldr	r2, [pc, #416]	; (8011630 <HAL_DMA_IRQHandler+0x890>)
 8011490:	4293      	cmp	r3, r2
 8011492:	d069      	beq.n	8011568 <HAL_DMA_IRQHandler+0x7c8>
 8011494:	4a67      	ldr	r2, [pc, #412]	; (8011634 <HAL_DMA_IRQHandler+0x894>)
 8011496:	4293      	cmp	r3, r2
 8011498:	d068      	beq.n	801156c <HAL_DMA_IRQHandler+0x7cc>
 801149a:	4a67      	ldr	r2, [pc, #412]	; (8011638 <HAL_DMA_IRQHandler+0x898>)
 801149c:	4694      	mov	ip, r2
 801149e:	4463      	add	r3, ip
 80114a0:	425a      	negs	r2, r3
 80114a2:	4153      	adcs	r3, r2
 80114a4:	425b      	negs	r3, r3
 80114a6:	4a67      	ldr	r2, [pc, #412]	; (8011644 <HAL_DMA_IRQHandler+0x8a4>)
 80114a8:	4013      	ands	r3, r2
 80114aa:	2280      	movs	r2, #128	; 0x80
 80114ac:	0292      	lsls	r2, r2, #10
 80114ae:	4694      	mov	ip, r2
 80114b0:	4463      	add	r3, ip
 80114b2:	e036      	b.n	8011522 <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80114b4:	2320      	movs	r3, #32
 80114b6:	e7bb      	b.n	8011430 <HAL_DMA_IRQHandler+0x690>
 80114b8:	2380      	movs	r3, #128	; 0x80
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	e7b8      	b.n	8011430 <HAL_DMA_IRQHandler+0x690>
 80114be:	2380      	movs	r3, #128	; 0x80
 80114c0:	019b      	lsls	r3, r3, #6
 80114c2:	e7b5      	b.n	8011430 <HAL_DMA_IRQHandler+0x690>
 80114c4:	2380      	movs	r3, #128	; 0x80
 80114c6:	029b      	lsls	r3, r3, #10
 80114c8:	e7b2      	b.n	8011430 <HAL_DMA_IRQHandler+0x690>
 80114ca:	2380      	movs	r3, #128	; 0x80
 80114cc:	039b      	lsls	r3, r3, #14
 80114ce:	e7af      	b.n	8011430 <HAL_DMA_IRQHandler+0x690>
 80114d0:	2380      	movs	r3, #128	; 0x80
 80114d2:	049b      	lsls	r3, r3, #18
 80114d4:	e7ac      	b.n	8011430 <HAL_DMA_IRQHandler+0x690>
 80114d6:	2302      	movs	r3, #2
 80114d8:	e7aa      	b.n	8011430 <HAL_DMA_IRQHandler+0x690>
 80114da:	2320      	movs	r3, #32
 80114dc:	e7a8      	b.n	8011430 <HAL_DMA_IRQHandler+0x690>
 80114de:	2380      	movs	r3, #128	; 0x80
 80114e0:	009b      	lsls	r3, r3, #2
 80114e2:	e7a5      	b.n	8011430 <HAL_DMA_IRQHandler+0x690>
 80114e4:	2302      	movs	r3, #2
 80114e6:	4003      	ands	r3, r0
 80114e8:	1e5a      	subs	r2, r3, #1
 80114ea:	4193      	sbcs	r3, r2
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	e7a3      	b.n	8011438 <HAL_DMA_IRQHandler+0x698>
 80114f0:	2320      	movs	r3, #32
 80114f2:	e7f8      	b.n	80114e6 <HAL_DMA_IRQHandler+0x746>
 80114f4:	2380      	movs	r3, #128	; 0x80
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	e7f5      	b.n	80114e6 <HAL_DMA_IRQHandler+0x746>
 80114fa:	2380      	movs	r3, #128	; 0x80
 80114fc:	019b      	lsls	r3, r3, #6
 80114fe:	e7f2      	b.n	80114e6 <HAL_DMA_IRQHandler+0x746>
 8011500:	2380      	movs	r3, #128	; 0x80
 8011502:	029b      	lsls	r3, r3, #10
 8011504:	e7ef      	b.n	80114e6 <HAL_DMA_IRQHandler+0x746>
 8011506:	2380      	movs	r3, #128	; 0x80
 8011508:	039b      	lsls	r3, r3, #14
 801150a:	e7ec      	b.n	80114e6 <HAL_DMA_IRQHandler+0x746>
 801150c:	2380      	movs	r3, #128	; 0x80
 801150e:	049b      	lsls	r3, r3, #18
 8011510:	e7e9      	b.n	80114e6 <HAL_DMA_IRQHandler+0x746>
 8011512:	2302      	movs	r3, #2
 8011514:	e7e7      	b.n	80114e6 <HAL_DMA_IRQHandler+0x746>
 8011516:	2320      	movs	r3, #32
 8011518:	e7e5      	b.n	80114e6 <HAL_DMA_IRQHandler+0x746>
 801151a:	2380      	movs	r3, #128	; 0x80
 801151c:	009b      	lsls	r3, r3, #2
 801151e:	e7e2      	b.n	80114e6 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011520:	2302      	movs	r3, #2
 8011522:	4a49      	ldr	r2, [pc, #292]	; (8011648 <HAL_DMA_IRQHandler+0x8a8>)
 8011524:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011528:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 801152a:	2321      	movs	r3, #33	; 0x21
 801152c:	2201      	movs	r2, #1
 801152e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011530:	3b01      	subs	r3, #1
 8011532:	2200      	movs	r2, #0
 8011534:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011536:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011538:	2b00      	cmp	r3, #0
 801153a:	d001      	beq.n	8011540 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 801153c:	0020      	movs	r0, r4
 801153e:	4798      	blx	r3
}  
 8011540:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011542:	2320      	movs	r3, #32
 8011544:	e7ed      	b.n	8011522 <HAL_DMA_IRQHandler+0x782>
 8011546:	2380      	movs	r3, #128	; 0x80
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	e7ea      	b.n	8011522 <HAL_DMA_IRQHandler+0x782>
 801154c:	2380      	movs	r3, #128	; 0x80
 801154e:	019b      	lsls	r3, r3, #6
 8011550:	e7e7      	b.n	8011522 <HAL_DMA_IRQHandler+0x782>
 8011552:	2380      	movs	r3, #128	; 0x80
 8011554:	029b      	lsls	r3, r3, #10
 8011556:	e7e4      	b.n	8011522 <HAL_DMA_IRQHandler+0x782>
 8011558:	2380      	movs	r3, #128	; 0x80
 801155a:	039b      	lsls	r3, r3, #14
 801155c:	e7e1      	b.n	8011522 <HAL_DMA_IRQHandler+0x782>
 801155e:	2380      	movs	r3, #128	; 0x80
 8011560:	049b      	lsls	r3, r3, #18
 8011562:	e7de      	b.n	8011522 <HAL_DMA_IRQHandler+0x782>
 8011564:	2302      	movs	r3, #2
 8011566:	e7dc      	b.n	8011522 <HAL_DMA_IRQHandler+0x782>
 8011568:	2320      	movs	r3, #32
 801156a:	e7da      	b.n	8011522 <HAL_DMA_IRQHandler+0x782>
 801156c:	2380      	movs	r3, #128	; 0x80
 801156e:	009b      	lsls	r3, r3, #2
 8011570:	e7d7      	b.n	8011522 <HAL_DMA_IRQHandler+0x782>
 8011572:	4a27      	ldr	r2, [pc, #156]	; (8011610 <HAL_DMA_IRQHandler+0x870>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d027      	beq.n	80115c8 <HAL_DMA_IRQHandler+0x828>
 8011578:	4a26      	ldr	r2, [pc, #152]	; (8011614 <HAL_DMA_IRQHandler+0x874>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d028      	beq.n	80115d0 <HAL_DMA_IRQHandler+0x830>
 801157e:	4a26      	ldr	r2, [pc, #152]	; (8011618 <HAL_DMA_IRQHandler+0x878>)
 8011580:	4293      	cmp	r3, r2
 8011582:	d027      	beq.n	80115d4 <HAL_DMA_IRQHandler+0x834>
 8011584:	4a25      	ldr	r2, [pc, #148]	; (801161c <HAL_DMA_IRQHandler+0x87c>)
 8011586:	4293      	cmp	r3, r2
 8011588:	d027      	beq.n	80115da <HAL_DMA_IRQHandler+0x83a>
 801158a:	4a25      	ldr	r2, [pc, #148]	; (8011620 <HAL_DMA_IRQHandler+0x880>)
 801158c:	4293      	cmp	r3, r2
 801158e:	d027      	beq.n	80115e0 <HAL_DMA_IRQHandler+0x840>
 8011590:	4a24      	ldr	r2, [pc, #144]	; (8011624 <HAL_DMA_IRQHandler+0x884>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d027      	beq.n	80115e6 <HAL_DMA_IRQHandler+0x846>
 8011596:	4a24      	ldr	r2, [pc, #144]	; (8011628 <HAL_DMA_IRQHandler+0x888>)
 8011598:	4293      	cmp	r3, r2
 801159a:	d027      	beq.n	80115ec <HAL_DMA_IRQHandler+0x84c>
 801159c:	4a23      	ldr	r2, [pc, #140]	; (801162c <HAL_DMA_IRQHandler+0x88c>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	d027      	beq.n	80115f2 <HAL_DMA_IRQHandler+0x852>
 80115a2:	4a23      	ldr	r2, [pc, #140]	; (8011630 <HAL_DMA_IRQHandler+0x890>)
 80115a4:	4293      	cmp	r3, r2
 80115a6:	d026      	beq.n	80115f6 <HAL_DMA_IRQHandler+0x856>
 80115a8:	4a22      	ldr	r2, [pc, #136]	; (8011634 <HAL_DMA_IRQHandler+0x894>)
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d025      	beq.n	80115fa <HAL_DMA_IRQHandler+0x85a>
 80115ae:	4a22      	ldr	r2, [pc, #136]	; (8011638 <HAL_DMA_IRQHandler+0x898>)
 80115b0:	4694      	mov	ip, r2
 80115b2:	4463      	add	r3, ip
 80115b4:	425a      	negs	r2, r3
 80115b6:	4153      	adcs	r3, r2
 80115b8:	425b      	negs	r3, r3
 80115ba:	4a22      	ldr	r2, [pc, #136]	; (8011644 <HAL_DMA_IRQHandler+0x8a4>)
 80115bc:	4013      	ands	r3, r2
 80115be:	2280      	movs	r2, #128	; 0x80
 80115c0:	0292      	lsls	r2, r2, #10
 80115c2:	4694      	mov	ip, r2
 80115c4:	4463      	add	r3, ip
 80115c6:	e000      	b.n	80115ca <HAL_DMA_IRQHandler+0x82a>
 80115c8:	2302      	movs	r3, #2
 80115ca:	4a1d      	ldr	r2, [pc, #116]	; (8011640 <HAL_DMA_IRQHandler+0x8a0>)
 80115cc:	6053      	str	r3, [r2, #4]
 80115ce:	e7aa      	b.n	8011526 <HAL_DMA_IRQHandler+0x786>
 80115d0:	2320      	movs	r3, #32
 80115d2:	e7fa      	b.n	80115ca <HAL_DMA_IRQHandler+0x82a>
 80115d4:	2380      	movs	r3, #128	; 0x80
 80115d6:	009b      	lsls	r3, r3, #2
 80115d8:	e7f7      	b.n	80115ca <HAL_DMA_IRQHandler+0x82a>
 80115da:	2380      	movs	r3, #128	; 0x80
 80115dc:	019b      	lsls	r3, r3, #6
 80115de:	e7f4      	b.n	80115ca <HAL_DMA_IRQHandler+0x82a>
 80115e0:	2380      	movs	r3, #128	; 0x80
 80115e2:	029b      	lsls	r3, r3, #10
 80115e4:	e7f1      	b.n	80115ca <HAL_DMA_IRQHandler+0x82a>
 80115e6:	2380      	movs	r3, #128	; 0x80
 80115e8:	039b      	lsls	r3, r3, #14
 80115ea:	e7ee      	b.n	80115ca <HAL_DMA_IRQHandler+0x82a>
 80115ec:	2380      	movs	r3, #128	; 0x80
 80115ee:	049b      	lsls	r3, r3, #18
 80115f0:	e7eb      	b.n	80115ca <HAL_DMA_IRQHandler+0x82a>
 80115f2:	2302      	movs	r3, #2
 80115f4:	e7e9      	b.n	80115ca <HAL_DMA_IRQHandler+0x82a>
 80115f6:	2320      	movs	r3, #32
 80115f8:	e7e7      	b.n	80115ca <HAL_DMA_IRQHandler+0x82a>
 80115fa:	2380      	movs	r3, #128	; 0x80
 80115fc:	009b      	lsls	r3, r3, #2
 80115fe:	e7e4      	b.n	80115ca <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011600:	6821      	ldr	r1, [r4, #0]
 8011602:	e65e      	b.n	80112c2 <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	0712      	lsls	r2, r2, #28
 8011608:	d500      	bpl.n	801160c <HAL_DMA_IRQHandler+0x86c>
 801160a:	e49b      	b.n	8010f44 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801160c:	6823      	ldr	r3, [r4, #0]
 801160e:	e44b      	b.n	8010ea8 <HAL_DMA_IRQHandler+0x108>
 8011610:	40020008 	.word	0x40020008
 8011614:	4002001c 	.word	0x4002001c
 8011618:	40020030 	.word	0x40020030
 801161c:	40020044 	.word	0x40020044
 8011620:	40020058 	.word	0x40020058
 8011624:	4002006c 	.word	0x4002006c
 8011628:	40020080 	.word	0x40020080
 801162c:	40020408 	.word	0x40020408
 8011630:	4002041c 	.word	0x4002041c
 8011634:	40020430 	.word	0x40020430
 8011638:	bffdfbbc 	.word	0xbffdfbbc
 801163c:	fffc4000 	.word	0xfffc4000
 8011640:	40020000 	.word	0x40020000
 8011644:	fffe2000 	.word	0xfffe2000
 8011648:	40020400 	.word	0x40020400

0801164c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801164c:	4b0a      	ldr	r3, [pc, #40]	; (8011678 <FLASH_SetErrorCode+0x2c>)
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	06db      	lsls	r3, r3, #27
 8011652:	d504      	bpl.n	801165e <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011654:	4a09      	ldr	r2, [pc, #36]	; (801167c <FLASH_SetErrorCode+0x30>)
 8011656:	69d3      	ldr	r3, [r2, #28]
 8011658:	2102      	movs	r1, #2
 801165a:	430b      	orrs	r3, r1
 801165c:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801165e:	4b06      	ldr	r3, [pc, #24]	; (8011678 <FLASH_SetErrorCode+0x2c>)
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	075b      	lsls	r3, r3, #29
 8011664:	d504      	bpl.n	8011670 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011666:	4a05      	ldr	r2, [pc, #20]	; (801167c <FLASH_SetErrorCode+0x30>)
 8011668:	69d3      	ldr	r3, [r2, #28]
 801166a:	2101      	movs	r1, #1
 801166c:	430b      	orrs	r3, r1
 801166e:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011670:	4b01      	ldr	r3, [pc, #4]	; (8011678 <FLASH_SetErrorCode+0x2c>)
 8011672:	2214      	movs	r2, #20
 8011674:	60da      	str	r2, [r3, #12]
}  
 8011676:	4770      	bx	lr
 8011678:	40022000 	.word	0x40022000
 801167c:	20006e68 	.word	0x20006e68

08011680 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011680:	4b05      	ldr	r3, [pc, #20]	; (8011698 <HAL_FLASH_Unlock+0x18>)
 8011682:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8011684:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011686:	061b      	lsls	r3, r3, #24
 8011688:	d505      	bpl.n	8011696 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801168a:	4b03      	ldr	r3, [pc, #12]	; (8011698 <HAL_FLASH_Unlock+0x18>)
 801168c:	4a03      	ldr	r2, [pc, #12]	; (801169c <HAL_FLASH_Unlock+0x1c>)
 801168e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011690:	4a03      	ldr	r2, [pc, #12]	; (80116a0 <HAL_FLASH_Unlock+0x20>)
 8011692:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011694:	2000      	movs	r0, #0
}
 8011696:	4770      	bx	lr
 8011698:	40022000 	.word	0x40022000
 801169c:	45670123 	.word	0x45670123
 80116a0:	cdef89ab 	.word	0xcdef89ab

080116a4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80116a4:	4a03      	ldr	r2, [pc, #12]	; (80116b4 <HAL_FLASH_Lock+0x10>)
 80116a6:	6913      	ldr	r3, [r2, #16]
 80116a8:	2180      	movs	r1, #128	; 0x80
 80116aa:	430b      	orrs	r3, r1
 80116ac:	6113      	str	r3, [r2, #16]
}
 80116ae:	2000      	movs	r0, #0
 80116b0:	4770      	bx	lr
 80116b2:	46c0      	nop			; (mov r8, r8)
 80116b4:	40022000 	.word	0x40022000

080116b8 <FLASH_WaitForLastOperation>:
{
 80116b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ba:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80116bc:	f7ff f928 	bl	8010910 <HAL_GetTick>
 80116c0:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80116c2:	4e13      	ldr	r6, [pc, #76]	; (8011710 <FLASH_WaitForLastOperation+0x58>)
 80116c4:	2501      	movs	r5, #1
 80116c6:	68f3      	ldr	r3, [r6, #12]
 80116c8:	421d      	tst	r5, r3
 80116ca:	d00a      	beq.n	80116e2 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80116cc:	1c63      	adds	r3, r4, #1
 80116ce:	d0fa      	beq.n	80116c6 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80116d0:	2c00      	cmp	r4, #0
 80116d2:	d01a      	beq.n	801170a <FLASH_WaitForLastOperation+0x52>
 80116d4:	f7ff f91c 	bl	8010910 <HAL_GetTick>
 80116d8:	1bc0      	subs	r0, r0, r7
 80116da:	42a0      	cmp	r0, r4
 80116dc:	d9f3      	bls.n	80116c6 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 80116de:	2003      	movs	r0, #3
 80116e0:	e012      	b.n	8011708 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80116e2:	4b0b      	ldr	r3, [pc, #44]	; (8011710 <FLASH_WaitForLastOperation+0x58>)
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	069b      	lsls	r3, r3, #26
 80116e8:	d502      	bpl.n	80116f0 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80116ea:	4b09      	ldr	r3, [pc, #36]	; (8011710 <FLASH_WaitForLastOperation+0x58>)
 80116ec:	2220      	movs	r2, #32
 80116ee:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80116f0:	4b07      	ldr	r3, [pc, #28]	; (8011710 <FLASH_WaitForLastOperation+0x58>)
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	06db      	lsls	r3, r3, #27
 80116f6:	d404      	bmi.n	8011702 <FLASH_WaitForLastOperation+0x4a>
 80116f8:	4b05      	ldr	r3, [pc, #20]	; (8011710 <FLASH_WaitForLastOperation+0x58>)
 80116fa:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 80116fc:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80116fe:	075b      	lsls	r3, r3, #29
 8011700:	d502      	bpl.n	8011708 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8011702:	f7ff ffa3 	bl	801164c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011706:	2001      	movs	r0, #1
}
 8011708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 801170a:	2003      	movs	r0, #3
 801170c:	e7fc      	b.n	8011708 <FLASH_WaitForLastOperation+0x50>
 801170e:	46c0      	nop			; (mov r8, r8)
 8011710:	40022000 	.word	0x40022000

08011714 <HAL_FLASH_Program>:
{
 8011714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011716:	46de      	mov	lr, fp
 8011718:	4657      	mov	r7, sl
 801171a:	464e      	mov	r6, r9
 801171c:	4645      	mov	r5, r8
 801171e:	b5e0      	push	{r5, r6, r7, lr}
 8011720:	b083      	sub	sp, #12
 8011722:	0004      	movs	r4, r0
 8011724:	000e      	movs	r6, r1
 8011726:	9201      	str	r2, [sp, #4]
 8011728:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 801172a:	4b2a      	ldr	r3, [pc, #168]	; (80117d4 <HAL_FLASH_Program+0xc0>)
 801172c:	7e1b      	ldrb	r3, [r3, #24]
 801172e:	2b01      	cmp	r3, #1
 8011730:	d04b      	beq.n	80117ca <HAL_FLASH_Program+0xb6>
 8011732:	4b28      	ldr	r3, [pc, #160]	; (80117d4 <HAL_FLASH_Program+0xc0>)
 8011734:	2201      	movs	r2, #1
 8011736:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011738:	4827      	ldr	r0, [pc, #156]	; (80117d8 <HAL_FLASH_Program+0xc4>)
 801173a:	f7ff ffbd 	bl	80116b8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801173e:	2800      	cmp	r0, #0
 8011740:	d139      	bne.n	80117b6 <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011742:	2c01      	cmp	r4, #1
 8011744:	d043      	beq.n	80117ce <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8011746:	3c02      	subs	r4, #2
 8011748:	4263      	negs	r3, r4
 801174a:	415c      	adcs	r4, r3
 801174c:	4264      	negs	r4, r4
 801174e:	2301      	movs	r3, #1
 8011750:	439c      	bics	r4, r3
 8011752:	46a0      	mov	r8, r4
 8011754:	3303      	adds	r3, #3
 8011756:	469c      	mov	ip, r3
 8011758:	44e0      	add	r8, ip
{
 801175a:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801175c:	4b1d      	ldr	r3, [pc, #116]	; (80117d4 <HAL_FLASH_Program+0xc0>)
 801175e:	469b      	mov	fp, r3
 8011760:	2300      	movs	r3, #0
 8011762:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011764:	4c1d      	ldr	r4, [pc, #116]	; (80117dc <HAL_FLASH_Program+0xc8>)
 8011766:	e01e      	b.n	80117a6 <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011768:	2220      	movs	r2, #32
 801176a:	1ad2      	subs	r2, r2, r3
 801176c:	4649      	mov	r1, r9
 801176e:	4091      	lsls	r1, r2
 8011770:	000a      	movs	r2, r1
 8011772:	9901      	ldr	r1, [sp, #4]
 8011774:	40d9      	lsrs	r1, r3
 8011776:	000b      	movs	r3, r1
 8011778:	4313      	orrs	r3, r2
 801177a:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801177c:	465a      	mov	r2, fp
 801177e:	4651      	mov	r1, sl
 8011780:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011782:	6922      	ldr	r2, [r4, #16]
 8011784:	2701      	movs	r7, #1
 8011786:	433a      	orrs	r2, r7
 8011788:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 801178a:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801178c:	4812      	ldr	r0, [pc, #72]	; (80117d8 <HAL_FLASH_Program+0xc4>)
 801178e:	f7ff ff93 	bl	80116b8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011792:	6923      	ldr	r3, [r4, #16]
 8011794:	43bb      	bics	r3, r7
 8011796:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011798:	2800      	cmp	r0, #0
 801179a:	d10c      	bne.n	80117b6 <HAL_FLASH_Program+0xa2>
 801179c:	3501      	adds	r5, #1
 801179e:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 80117a0:	b2eb      	uxtb	r3, r5
 80117a2:	4598      	cmp	r8, r3
 80117a4:	d907      	bls.n	80117b6 <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80117a6:	012b      	lsls	r3, r5, #4
 80117a8:	2220      	movs	r2, #32
 80117aa:	4252      	negs	r2, r2
 80117ac:	189a      	adds	r2, r3, r2
 80117ae:	d4db      	bmi.n	8011768 <HAL_FLASH_Program+0x54>
 80117b0:	464b      	mov	r3, r9
 80117b2:	40d3      	lsrs	r3, r2
 80117b4:	e7e1      	b.n	801177a <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 80117b6:	4b07      	ldr	r3, [pc, #28]	; (80117d4 <HAL_FLASH_Program+0xc0>)
 80117b8:	2200      	movs	r2, #0
 80117ba:	761a      	strb	r2, [r3, #24]
}
 80117bc:	b003      	add	sp, #12
 80117be:	bc3c      	pop	{r2, r3, r4, r5}
 80117c0:	4690      	mov	r8, r2
 80117c2:	4699      	mov	r9, r3
 80117c4:	46a2      	mov	sl, r4
 80117c6:	46ab      	mov	fp, r5
 80117c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80117ca:	2002      	movs	r0, #2
 80117cc:	e7f6      	b.n	80117bc <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 80117ce:	2301      	movs	r3, #1
 80117d0:	4698      	mov	r8, r3
 80117d2:	e7c2      	b.n	801175a <HAL_FLASH_Program+0x46>
 80117d4:	20006e68 	.word	0x20006e68
 80117d8:	0000c350 	.word	0x0000c350
 80117dc:	40022000 	.word	0x40022000

080117e0 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80117e0:	4b06      	ldr	r3, [pc, #24]	; (80117fc <FLASH_MassErase+0x1c>)
 80117e2:	2200      	movs	r2, #0
 80117e4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80117e6:	4b06      	ldr	r3, [pc, #24]	; (8011800 <FLASH_MassErase+0x20>)
 80117e8:	691a      	ldr	r2, [r3, #16]
 80117ea:	2104      	movs	r1, #4
 80117ec:	430a      	orrs	r2, r1
 80117ee:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80117f0:	691a      	ldr	r2, [r3, #16]
 80117f2:	313c      	adds	r1, #60	; 0x3c
 80117f4:	430a      	orrs	r2, r1
 80117f6:	611a      	str	r2, [r3, #16]
}
 80117f8:	4770      	bx	lr
 80117fa:	46c0      	nop			; (mov r8, r8)
 80117fc:	20006e68 	.word	0x20006e68
 8011800:	40022000 	.word	0x40022000

08011804 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011804:	4b06      	ldr	r3, [pc, #24]	; (8011820 <FLASH_PageErase+0x1c>)
 8011806:	2200      	movs	r2, #0
 8011808:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801180a:	4b06      	ldr	r3, [pc, #24]	; (8011824 <FLASH_PageErase+0x20>)
 801180c:	691a      	ldr	r2, [r3, #16]
 801180e:	2102      	movs	r1, #2
 8011810:	430a      	orrs	r2, r1
 8011812:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011814:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011816:	691a      	ldr	r2, [r3, #16]
 8011818:	313e      	adds	r1, #62	; 0x3e
 801181a:	430a      	orrs	r2, r1
 801181c:	611a      	str	r2, [r3, #16]
}
 801181e:	4770      	bx	lr
 8011820:	20006e68 	.word	0x20006e68
 8011824:	40022000 	.word	0x40022000

08011828 <HAL_FLASHEx_Erase>:
{
 8011828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801182a:	46c6      	mov	lr, r8
 801182c:	b500      	push	{lr}
 801182e:	0006      	movs	r6, r0
 8011830:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8011832:	4b2a      	ldr	r3, [pc, #168]	; (80118dc <HAL_FLASHEx_Erase+0xb4>)
 8011834:	7e1b      	ldrb	r3, [r3, #24]
 8011836:	2b01      	cmp	r3, #1
 8011838:	d04d      	beq.n	80118d6 <HAL_FLASHEx_Erase+0xae>
 801183a:	4b28      	ldr	r3, [pc, #160]	; (80118dc <HAL_FLASHEx_Erase+0xb4>)
 801183c:	2201      	movs	r2, #1
 801183e:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011840:	6803      	ldr	r3, [r0, #0]
 8011842:	2b01      	cmp	r3, #1
 8011844:	d029      	beq.n	801189a <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011846:	4826      	ldr	r0, [pc, #152]	; (80118e0 <HAL_FLASHEx_Erase+0xb8>)
 8011848:	f7ff ff36 	bl	80116b8 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 801184c:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801184e:	2800      	cmp	r0, #0
 8011850:	d129      	bne.n	80118a6 <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 8011852:	2301      	movs	r3, #1
 8011854:	425b      	negs	r3, r3
 8011856:	4642      	mov	r2, r8
 8011858:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 801185a:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801185c:	68b3      	ldr	r3, [r6, #8]
 801185e:	02db      	lsls	r3, r3, #11
 8011860:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8011862:	429c      	cmp	r4, r3
 8011864:	d235      	bcs.n	80118d2 <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011866:	4f1f      	ldr	r7, [pc, #124]	; (80118e4 <HAL_FLASHEx_Erase+0xbc>)
 8011868:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 801186a:	0020      	movs	r0, r4
 801186c:	f7ff ffca 	bl	8011804 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011870:	481b      	ldr	r0, [pc, #108]	; (80118e0 <HAL_FLASHEx_Erase+0xb8>)
 8011872:	f7ff ff21 	bl	80116b8 <FLASH_WaitForLastOperation>
 8011876:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	43ab      	bics	r3, r5
 801187c:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 801187e:	2800      	cmp	r0, #0
 8011880:	d124      	bne.n	80118cc <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8011882:	2380      	movs	r3, #128	; 0x80
 8011884:	011b      	lsls	r3, r3, #4
 8011886:	469c      	mov	ip, r3
 8011888:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801188a:	68b3      	ldr	r3, [r6, #8]
 801188c:	02db      	lsls	r3, r3, #11
 801188e:	6871      	ldr	r1, [r6, #4]
 8011890:	468c      	mov	ip, r1
 8011892:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011894:	42a3      	cmp	r3, r4
 8011896:	d8e8      	bhi.n	801186a <HAL_FLASHEx_Erase+0x42>
 8011898:	e005      	b.n	80118a6 <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801189a:	4811      	ldr	r0, [pc, #68]	; (80118e0 <HAL_FLASHEx_Erase+0xb8>)
 801189c:	f7ff ff0c 	bl	80116b8 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 80118a0:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80118a2:	2800      	cmp	r0, #0
 80118a4:	d006      	beq.n	80118b4 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 80118a6:	4b0d      	ldr	r3, [pc, #52]	; (80118dc <HAL_FLASHEx_Erase+0xb4>)
 80118a8:	2100      	movs	r1, #0
 80118aa:	7619      	strb	r1, [r3, #24]
}
 80118ac:	0010      	movs	r0, r2
 80118ae:	bc04      	pop	{r2}
 80118b0:	4690      	mov	r8, r2
 80118b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 80118b4:	f7ff ff94 	bl	80117e0 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80118b8:	4809      	ldr	r0, [pc, #36]	; (80118e0 <HAL_FLASHEx_Erase+0xb8>)
 80118ba:	f7ff fefd 	bl	80116b8 <FLASH_WaitForLastOperation>
 80118be:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80118c0:	4908      	ldr	r1, [pc, #32]	; (80118e4 <HAL_FLASHEx_Erase+0xbc>)
 80118c2:	690b      	ldr	r3, [r1, #16]
 80118c4:	2004      	movs	r0, #4
 80118c6:	4383      	bics	r3, r0
 80118c8:	610b      	str	r3, [r1, #16]
 80118ca:	e7ec      	b.n	80118a6 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 80118cc:	4643      	mov	r3, r8
 80118ce:	601c      	str	r4, [r3, #0]
            break;
 80118d0:	e7e9      	b.n	80118a6 <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80118d2:	2201      	movs	r2, #1
 80118d4:	e7e7      	b.n	80118a6 <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 80118d6:	2202      	movs	r2, #2
 80118d8:	e7e8      	b.n	80118ac <HAL_FLASHEx_Erase+0x84>
 80118da:	46c0      	nop			; (mov r8, r8)
 80118dc:	20006e68 	.word	0x20006e68
 80118e0:	0000c350 	.word	0x0000c350
 80118e4:	40022000 	.word	0x40022000

080118e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80118e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ea:	46de      	mov	lr, fp
 80118ec:	4657      	mov	r7, sl
 80118ee:	464e      	mov	r6, r9
 80118f0:	4645      	mov	r5, r8
 80118f2:	b5e0      	push	{r5, r6, r7, lr}
 80118f4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80118f6:	680a      	ldr	r2, [r1, #0]
 80118f8:	2a00      	cmp	r2, #0
 80118fa:	d100      	bne.n	80118fe <HAL_GPIO_Init+0x16>
 80118fc:	e0bf      	b.n	8011a7e <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 80118fe:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011900:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011902:	2410      	movs	r4, #16
 8011904:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011906:	3c0d      	subs	r4, #13
 8011908:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801190a:	2480      	movs	r4, #128	; 0x80
 801190c:	0564      	lsls	r4, r4, #21
 801190e:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011910:	4c5e      	ldr	r4, [pc, #376]	; (8011a8c <HAL_GPIO_Init+0x1a4>)
 8011912:	1904      	adds	r4, r0, r4
 8011914:	1e65      	subs	r5, r4, #1
 8011916:	41ac      	sbcs	r4, r5
 8011918:	3404      	adds	r4, #4
 801191a:	46a1      	mov	r9, r4
 801191c:	e03b      	b.n	8011996 <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 801191e:	08dc      	lsrs	r4, r3, #3
 8011920:	00a4      	lsls	r4, r4, #2
 8011922:	1904      	adds	r4, r0, r4
 8011924:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011926:	2507      	movs	r5, #7
 8011928:	401d      	ands	r5, r3
 801192a:	00ad      	lsls	r5, r5, #2
 801192c:	220f      	movs	r2, #15
 801192e:	40aa      	lsls	r2, r5
 8011930:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011932:	690a      	ldr	r2, [r1, #16]
 8011934:	40aa      	lsls	r2, r5
 8011936:	0015      	movs	r5, r2
 8011938:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 801193a:	6225      	str	r5, [r4, #32]
 801193c:	e035      	b.n	80119aa <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801193e:	2500      	movs	r5, #0
 8011940:	465a      	mov	r2, fp
 8011942:	4095      	lsls	r5, r2
 8011944:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011946:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011948:	4c51      	ldr	r4, [pc, #324]	; (8011a90 <HAL_GPIO_Init+0x1a8>)
 801194a:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 801194c:	9a01      	ldr	r2, [sp, #4]
 801194e:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011950:	684a      	ldr	r2, [r1, #4]
 8011952:	03d2      	lsls	r2, r2, #15
 8011954:	d500      	bpl.n	8011958 <HAL_GPIO_Init+0x70>
 8011956:	e086      	b.n	8011a66 <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011958:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 801195a:	4f4d      	ldr	r7, [pc, #308]	; (8011a90 <HAL_GPIO_Init+0x1a8>)
 801195c:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 801195e:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011960:	684a      	ldr	r2, [r1, #4]
 8011962:	0392      	lsls	r2, r2, #14
 8011964:	d500      	bpl.n	8011968 <HAL_GPIO_Init+0x80>
 8011966:	e081      	b.n	8011a6c <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011968:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 801196a:	4f49      	ldr	r7, [pc, #292]	; (8011a90 <HAL_GPIO_Init+0x1a8>)
 801196c:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801196e:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011970:	684a      	ldr	r2, [r1, #4]
 8011972:	02d2      	lsls	r2, r2, #11
 8011974:	d47d      	bmi.n	8011a72 <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011976:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011978:	4f45      	ldr	r7, [pc, #276]	; (8011a90 <HAL_GPIO_Init+0x1a8>)
 801197a:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 801197c:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801197e:	684a      	ldr	r2, [r1, #4]
 8011980:	0292      	lsls	r2, r2, #10
 8011982:	d479      	bmi.n	8011a78 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011984:	0022      	movs	r2, r4
 8011986:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011988:	4c41      	ldr	r4, [pc, #260]	; (8011a90 <HAL_GPIO_Init+0x1a8>)
 801198a:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 801198c:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 801198e:	680a      	ldr	r2, [r1, #0]
 8011990:	0014      	movs	r4, r2
 8011992:	40dc      	lsrs	r4, r3
 8011994:	d073      	beq.n	8011a7e <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011996:	0034      	movs	r4, r6
 8011998:	409c      	lsls	r4, r3
 801199a:	4022      	ands	r2, r4
 801199c:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 801199e:	d0f5      	beq.n	801198c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80119a0:	684c      	ldr	r4, [r1, #4]
 80119a2:	4642      	mov	r2, r8
 80119a4:	4394      	bics	r4, r2
 80119a6:	2c02      	cmp	r4, #2
 80119a8:	d0b9      	beq.n	801191e <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80119aa:	6804      	ldr	r4, [r0, #0]
 80119ac:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80119ae:	4665      	mov	r5, ip
 80119b0:	40bd      	lsls	r5, r7
 80119b2:	43ed      	mvns	r5, r5
 80119b4:	402c      	ands	r4, r5
 80119b6:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80119b8:	684c      	ldr	r4, [r1, #4]
 80119ba:	4662      	mov	r2, ip
 80119bc:	4014      	ands	r4, r2
 80119be:	40bc      	lsls	r4, r7
 80119c0:	465a      	mov	r2, fp
 80119c2:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 80119c4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80119c6:	684c      	ldr	r4, [r1, #4]
 80119c8:	4642      	mov	r2, r8
 80119ca:	4394      	bics	r4, r2
 80119cc:	3c01      	subs	r4, #1
 80119ce:	2c01      	cmp	r4, #1
 80119d0:	d813      	bhi.n	80119fa <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 80119d2:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80119d4:	402c      	ands	r4, r5
 80119d6:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80119d8:	68cc      	ldr	r4, [r1, #12]
 80119da:	40bc      	lsls	r4, r7
 80119dc:	465a      	mov	r2, fp
 80119de:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 80119e0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80119e2:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80119e4:	0032      	movs	r2, r6
 80119e6:	409a      	lsls	r2, r3
 80119e8:	4394      	bics	r4, r2
 80119ea:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80119ec:	684a      	ldr	r2, [r1, #4]
 80119ee:	0914      	lsrs	r4, r2, #4
 80119f0:	4034      	ands	r4, r6
 80119f2:	409c      	lsls	r4, r3
 80119f4:	465a      	mov	r2, fp
 80119f6:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80119f8:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80119fa:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80119fc:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80119fe:	688d      	ldr	r5, [r1, #8]
 8011a00:	40bd      	lsls	r5, r7
 8011a02:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8011a04:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011a06:	684a      	ldr	r2, [r1, #4]
 8011a08:	4654      	mov	r4, sl
 8011a0a:	4222      	tst	r2, r4
 8011a0c:	d0be      	beq.n	801198c <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011a0e:	4c21      	ldr	r4, [pc, #132]	; (8011a94 <HAL_GPIO_Init+0x1ac>)
 8011a10:	69a5      	ldr	r5, [r4, #24]
 8011a12:	4335      	orrs	r5, r6
 8011a14:	61a5      	str	r5, [r4, #24]
 8011a16:	69a4      	ldr	r4, [r4, #24]
 8011a18:	4034      	ands	r4, r6
 8011a1a:	9403      	str	r4, [sp, #12]
 8011a1c:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011a1e:	089c      	lsrs	r4, r3, #2
 8011a20:	00a4      	lsls	r4, r4, #2
 8011a22:	4a1d      	ldr	r2, [pc, #116]	; (8011a98 <HAL_GPIO_Init+0x1b0>)
 8011a24:	4693      	mov	fp, r2
 8011a26:	445c      	add	r4, fp
 8011a28:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011a2a:	4667      	mov	r7, ip
 8011a2c:	401f      	ands	r7, r3
 8011a2e:	00ba      	lsls	r2, r7, #2
 8011a30:	4693      	mov	fp, r2
 8011a32:	270f      	movs	r7, #15
 8011a34:	4097      	lsls	r7, r2
 8011a36:	43bd      	bics	r5, r7
 8011a38:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011a3a:	2590      	movs	r5, #144	; 0x90
 8011a3c:	05ed      	lsls	r5, r5, #23
 8011a3e:	42a8      	cmp	r0, r5
 8011a40:	d100      	bne.n	8011a44 <HAL_GPIO_Init+0x15c>
 8011a42:	e77c      	b.n	801193e <HAL_GPIO_Init+0x56>
 8011a44:	4d15      	ldr	r5, [pc, #84]	; (8011a9c <HAL_GPIO_Init+0x1b4>)
 8011a46:	42a8      	cmp	r0, r5
 8011a48:	d007      	beq.n	8011a5a <HAL_GPIO_Init+0x172>
 8011a4a:	4d15      	ldr	r5, [pc, #84]	; (8011aa0 <HAL_GPIO_Init+0x1b8>)
 8011a4c:	42a8      	cmp	r0, r5
 8011a4e:	d006      	beq.n	8011a5e <HAL_GPIO_Init+0x176>
 8011a50:	4d14      	ldr	r5, [pc, #80]	; (8011aa4 <HAL_GPIO_Init+0x1bc>)
 8011a52:	42a8      	cmp	r0, r5
 8011a54:	d005      	beq.n	8011a62 <HAL_GPIO_Init+0x17a>
 8011a56:	464d      	mov	r5, r9
 8011a58:	e772      	b.n	8011940 <HAL_GPIO_Init+0x58>
 8011a5a:	0035      	movs	r5, r6
 8011a5c:	e770      	b.n	8011940 <HAL_GPIO_Init+0x58>
 8011a5e:	2502      	movs	r5, #2
 8011a60:	e76e      	b.n	8011940 <HAL_GPIO_Init+0x58>
 8011a62:	4665      	mov	r5, ip
 8011a64:	e76c      	b.n	8011940 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8011a66:	9a01      	ldr	r2, [sp, #4]
 8011a68:	4314      	orrs	r4, r2
 8011a6a:	e776      	b.n	801195a <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8011a6c:	9a01      	ldr	r2, [sp, #4]
 8011a6e:	4314      	orrs	r4, r2
 8011a70:	e77b      	b.n	801196a <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 8011a72:	9a01      	ldr	r2, [sp, #4]
 8011a74:	4314      	orrs	r4, r2
 8011a76:	e77f      	b.n	8011978 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8011a78:	9a01      	ldr	r2, [sp, #4]
 8011a7a:	4322      	orrs	r2, r4
 8011a7c:	e784      	b.n	8011988 <HAL_GPIO_Init+0xa0>
  } 
}
 8011a7e:	b005      	add	sp, #20
 8011a80:	bc3c      	pop	{r2, r3, r4, r5}
 8011a82:	4690      	mov	r8, r2
 8011a84:	4699      	mov	r9, r3
 8011a86:	46a2      	mov	sl, r4
 8011a88:	46ab      	mov	fp, r5
 8011a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a8c:	b7fff000 	.word	0xb7fff000
 8011a90:	40010400 	.word	0x40010400
 8011a94:	40021000 	.word	0x40021000
 8011a98:	40010000 	.word	0x40010000
 8011a9c:	48000400 	.word	0x48000400
 8011aa0:	48000800 	.word	0x48000800
 8011aa4:	48000c00 	.word	0x48000c00

08011aa8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011aa8:	6900      	ldr	r0, [r0, #16]
 8011aaa:	4008      	ands	r0, r1
 8011aac:	1e41      	subs	r1, r0, #1
 8011aae:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011ab0:	b2c0      	uxtb	r0, r0
  }
 8011ab2:	4770      	bx	lr

08011ab4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011ab4:	2a00      	cmp	r2, #0
 8011ab6:	d101      	bne.n	8011abc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011ab8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8011aba:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011abc:	6181      	str	r1, [r0, #24]
 8011abe:	e7fc      	b.n	8011aba <HAL_GPIO_WritePin+0x6>

08011ac0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011ac0:	6943      	ldr	r3, [r0, #20]
 8011ac2:	4059      	eors	r1, r3
 8011ac4:	6141      	str	r1, [r0, #20]
}
 8011ac6:	4770      	bx	lr

08011ac8 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8011ac8:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8011aca:	6804      	ldr	r4, [r0, #0]
 8011acc:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8011ace:	4d06      	ldr	r5, [pc, #24]	; (8011ae8 <I2C_TransferConfig+0x20>)
 8011ad0:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8011ad2:	0412      	lsls	r2, r2, #16
 8011ad4:	9d03      	ldr	r5, [sp, #12]
 8011ad6:	432b      	orrs	r3, r5
 8011ad8:	431a      	orrs	r2, r3
 8011ada:	0589      	lsls	r1, r1, #22
 8011adc:	0d89      	lsrs	r1, r1, #22
 8011ade:	430a      	orrs	r2, r1
 8011ae0:	4302      	orrs	r2, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8011ae2:	6062      	str	r2, [r4, #4]
}  
 8011ae4:	bd30      	pop	{r4, r5, pc}
 8011ae6:	46c0      	nop			; (mov r8, r8)
 8011ae8:	fc009800 	.word	0xfc009800

08011aec <I2C_IsAcknowledgeFailed>:
{
 8011aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aee:	0007      	movs	r7, r0
 8011af0:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 8011af2:	f7fe ff0d 	bl	8010910 <HAL_GetTick>
 8011af6:	0005      	movs	r5, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	699a      	ldr	r2, [r3, #24]
  return HAL_OK;      
 8011afc:	2000      	movs	r0, #0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011afe:	06d2      	lsls	r2, r2, #27
 8011b00:	d53c      	bpl.n	8011b7c <I2C_IsAcknowledgeFailed+0x90>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8011b02:	2235      	movs	r2, #53	; 0x35
 8011b04:	5cba      	ldrb	r2, [r7, r2]
 8011b06:	2a12      	cmp	r2, #18
 8011b08:	d007      	beq.n	8011b1a <I2C_IsAcknowledgeFailed+0x2e>
 8011b0a:	2235      	movs	r2, #53	; 0x35
 8011b0c:	5cba      	ldrb	r2, [r7, r2]
 8011b0e:	2a52      	cmp	r2, #82	; 0x52
 8011b10:	d003      	beq.n	8011b1a <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8011b12:	2235      	movs	r2, #53	; 0x35
 8011b14:	5cba      	ldrb	r2, [r7, r2]
 8011b16:	2a62      	cmp	r2, #98	; 0x62
 8011b18:	d107      	bne.n	8011b2a <I2C_IsAcknowledgeFailed+0x3e>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8011b1a:	685a      	ldr	r2, [r3, #4]
 8011b1c:	0192      	lsls	r2, r2, #6
 8011b1e:	d404      	bmi.n	8011b2a <I2C_IsAcknowledgeFailed+0x3e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011b20:	6859      	ldr	r1, [r3, #4]
 8011b22:	2280      	movs	r2, #128	; 0x80
 8011b24:	01d2      	lsls	r2, r2, #7
 8011b26:	430a      	orrs	r2, r1
 8011b28:	605a      	str	r2, [r3, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011b2a:	2620      	movs	r6, #32
 8011b2c:	683a      	ldr	r2, [r7, #0]
 8011b2e:	6993      	ldr	r3, [r2, #24]
 8011b30:	421e      	tst	r6, r3
 8011b32:	d110      	bne.n	8011b56 <I2C_IsAcknowledgeFailed+0x6a>
      if(Timeout != HAL_MAX_DELAY)
 8011b34:	1c63      	adds	r3, r4, #1
 8011b36:	d0fa      	beq.n	8011b2e <I2C_IsAcknowledgeFailed+0x42>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011b38:	2c00      	cmp	r4, #0
 8011b3a:	d004      	beq.n	8011b46 <I2C_IsAcknowledgeFailed+0x5a>
 8011b3c:	f7fe fee8 	bl	8010910 <HAL_GetTick>
 8011b40:	1b40      	subs	r0, r0, r5
 8011b42:	42a0      	cmp	r0, r4
 8011b44:	d9f2      	bls.n	8011b2c <I2C_IsAcknowledgeFailed+0x40>
          hi2c->State= HAL_I2C_STATE_READY;
 8011b46:	2335      	movs	r3, #53	; 0x35
 8011b48:	2201      	movs	r2, #1
 8011b4a:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 8011b4c:	3b01      	subs	r3, #1
 8011b4e:	2200      	movs	r2, #0
 8011b50:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8011b52:	2003      	movs	r0, #3
 8011b54:	e012      	b.n	8011b7c <I2C_IsAcknowledgeFailed+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b56:	2310      	movs	r3, #16
 8011b58:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	2220      	movs	r2, #32
 8011b5e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8011b60:	683a      	ldr	r2, [r7, #0]
 8011b62:	6853      	ldr	r3, [r2, #4]
 8011b64:	4906      	ldr	r1, [pc, #24]	; (8011b80 <I2C_IsAcknowledgeFailed+0x94>)
 8011b66:	400b      	ands	r3, r1
 8011b68:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011b6a:	2304      	movs	r3, #4
 8011b6c:	63bb      	str	r3, [r7, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 8011b6e:	3331      	adds	r3, #49	; 0x31
 8011b70:	2201      	movs	r2, #1
 8011b72:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 8011b74:	3b01      	subs	r3, #1
 8011b76:	2200      	movs	r2, #0
 8011b78:	54fa      	strb	r2, [r7, r3]
    return HAL_ERROR;
 8011b7a:	2001      	movs	r0, #1
}
 8011b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b7e:	46c0      	nop			; (mov r8, r8)
 8011b80:	fe00e800 	.word	0xfe00e800

08011b84 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 8011b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b86:	0004      	movs	r4, r0
 8011b88:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8011b8a:	f7fe fec1 	bl	8010910 <HAL_GetTick>
 8011b8e:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011b90:	2702      	movs	r7, #2
 8011b92:	6823      	ldr	r3, [r4, #0]
 8011b94:	699b      	ldr	r3, [r3, #24]
 8011b96:	421f      	tst	r7, r3
 8011b98:	d11a      	bne.n	8011bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8011b9a:	0029      	movs	r1, r5
 8011b9c:	0020      	movs	r0, r4
 8011b9e:	f7ff ffa5 	bl	8011aec <I2C_IsAcknowledgeFailed>
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	d116      	bne.n	8011bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8011ba6:	1c6b      	adds	r3, r5, #1
 8011ba8:	d0f3      	beq.n	8011b92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011baa:	2d00      	cmp	r5, #0
 8011bac:	d004      	beq.n	8011bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 8011bae:	f7fe feaf 	bl	8010910 <HAL_GetTick>
 8011bb2:	1b80      	subs	r0, r0, r6
 8011bb4:	42a8      	cmp	r0, r5
 8011bb6:	d9ec      	bls.n	8011b92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011bb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011bba:	2220      	movs	r2, #32
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 8011bc0:	2335      	movs	r3, #53	; 0x35
 8011bc2:	3a1f      	subs	r2, #31
 8011bc4:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8011bc6:	3b01      	subs	r3, #1
 8011bc8:	2200      	movs	r2, #0
 8011bca:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8011bcc:	2003      	movs	r0, #3
 8011bce:	e000      	b.n	8011bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;      
 8011bd0:	2000      	movs	r0, #0
}
 8011bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011bd4:	2001      	movs	r0, #1
 8011bd6:	e7fc      	b.n	8011bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08011bd8 <I2C_WaitOnFlagUntilTimeout>:
{  
 8011bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bda:	46c6      	mov	lr, r8
 8011bdc:	b500      	push	{lr}
 8011bde:	0006      	movs	r6, r0
 8011be0:	000c      	movs	r4, r1
 8011be2:	0017      	movs	r7, r2
 8011be4:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8011be6:	f7fe fe93 	bl	8010910 <HAL_GetTick>
 8011bea:	4680      	mov	r8, r0
  if(Status == RESET)
 8011bec:	2f00      	cmp	r7, #0
 8011bee:	d118      	bne.n	8011c22 <I2C_WaitOnFlagUntilTimeout+0x4a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011bf0:	03e4      	lsls	r4, r4, #15
 8011bf2:	0be4      	lsrs	r4, r4, #15
 8011bf4:	6832      	ldr	r2, [r6, #0]
 8011bf6:	6993      	ldr	r3, [r2, #24]
 8011bf8:	0021      	movs	r1, r4
 8011bfa:	4399      	bics	r1, r3
 8011bfc:	d02a      	beq.n	8011c54 <I2C_WaitOnFlagUntilTimeout+0x7c>
      if(Timeout != HAL_MAX_DELAY)
 8011bfe:	1c6b      	adds	r3, r5, #1
 8011c00:	d0f9      	beq.n	8011bf6 <I2C_WaitOnFlagUntilTimeout+0x1e>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011c02:	2d00      	cmp	r5, #0
 8011c04:	d005      	beq.n	8011c12 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8011c06:	f7fe fe83 	bl	8010910 <HAL_GetTick>
 8011c0a:	4643      	mov	r3, r8
 8011c0c:	1ac0      	subs	r0, r0, r3
 8011c0e:	42a8      	cmp	r0, r5
 8011c10:	d9f0      	bls.n	8011bf4 <I2C_WaitOnFlagUntilTimeout+0x1c>
          hi2c->State= HAL_I2C_STATE_READY;
 8011c12:	2335      	movs	r3, #53	; 0x35
 8011c14:	2201      	movs	r2, #1
 8011c16:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8011c18:	3b01      	subs	r3, #1
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011c1e:	2003      	movs	r0, #3
 8011c20:	e019      	b.n	8011c56 <I2C_WaitOnFlagUntilTimeout+0x7e>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8011c22:	03e4      	lsls	r4, r4, #15
 8011c24:	0be4      	lsrs	r4, r4, #15
 8011c26:	6832      	ldr	r2, [r6, #0]
 8011c28:	6993      	ldr	r3, [r2, #24]
 8011c2a:	0021      	movs	r1, r4
 8011c2c:	4399      	bics	r1, r3
 8011c2e:	d115      	bne.n	8011c5c <I2C_WaitOnFlagUntilTimeout+0x84>
      if(Timeout != HAL_MAX_DELAY)
 8011c30:	1c6b      	adds	r3, r5, #1
 8011c32:	d0f9      	beq.n	8011c28 <I2C_WaitOnFlagUntilTimeout+0x50>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011c34:	2d00      	cmp	r5, #0
 8011c36:	d005      	beq.n	8011c44 <I2C_WaitOnFlagUntilTimeout+0x6c>
 8011c38:	f7fe fe6a 	bl	8010910 <HAL_GetTick>
 8011c3c:	4643      	mov	r3, r8
 8011c3e:	1ac0      	subs	r0, r0, r3
 8011c40:	42a8      	cmp	r0, r5
 8011c42:	d9f0      	bls.n	8011c26 <I2C_WaitOnFlagUntilTimeout+0x4e>
          hi2c->State= HAL_I2C_STATE_READY;
 8011c44:	2335      	movs	r3, #53	; 0x35
 8011c46:	2201      	movs	r2, #1
 8011c48:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8011c4a:	3b01      	subs	r3, #1
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011c50:	2003      	movs	r0, #3
 8011c52:	e000      	b.n	8011c56 <I2C_WaitOnFlagUntilTimeout+0x7e>
  return HAL_OK;      
 8011c54:	2000      	movs	r0, #0
}
 8011c56:	bc04      	pop	{r2}
 8011c58:	4690      	mov	r8, r2
 8011c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;      
 8011c5c:	2000      	movs	r0, #0
 8011c5e:	e7fa      	b.n	8011c56 <I2C_WaitOnFlagUntilTimeout+0x7e>

08011c60 <I2C_RequestMemoryWrite>:
{
 8011c60:	b570      	push	{r4, r5, r6, lr}
 8011c62:	b082      	sub	sp, #8
 8011c64:	0004      	movs	r4, r0
 8011c66:	0016      	movs	r6, r2
 8011c68:	001d      	movs	r5, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8011c6a:	2380      	movs	r3, #128	; 0x80
 8011c6c:	b2ea      	uxtb	r2, r5
 8011c6e:	2080      	movs	r0, #128	; 0x80
 8011c70:	0180      	lsls	r0, r0, #6
 8011c72:	9000      	str	r0, [sp, #0]
 8011c74:	045b      	lsls	r3, r3, #17
 8011c76:	0020      	movs	r0, r4
 8011c78:	f7ff ff26 	bl	8011ac8 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011c7c:	9906      	ldr	r1, [sp, #24]
 8011c7e:	0020      	movs	r0, r4
 8011c80:	f7ff ff80 	bl	8011b84 <I2C_WaitOnTXISFlagUntilTimeout>
 8011c84:	2800      	cmp	r0, #0
 8011c86:	d009      	beq.n	8011c9c <I2C_RequestMemoryWrite+0x3c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011c88:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8011c8a:	3804      	subs	r0, #4
 8011c8c:	4243      	negs	r3, r0
 8011c8e:	4158      	adcs	r0, r3
 8011c90:	4240      	negs	r0, r0
 8011c92:	2301      	movs	r3, #1
 8011c94:	4398      	bics	r0, r3
 8011c96:	3003      	adds	r0, #3
}
 8011c98:	b002      	add	sp, #8
 8011c9a:	bd70      	pop	{r4, r5, r6, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011c9c:	2d01      	cmp	r5, #1
 8011c9e:	d10c      	bne.n	8011cba <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);    
 8011ca0:	6823      	ldr	r3, [r4, #0]
 8011ca2:	b2f6      	uxtb	r6, r6
 8011ca4:	629e      	str	r6, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8011ca6:	9b06      	ldr	r3, [sp, #24]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	2180      	movs	r1, #128	; 0x80
 8011cac:	0020      	movs	r0, r4
 8011cae:	f7ff ff93 	bl	8011bd8 <I2C_WaitOnFlagUntilTimeout>
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	d0f0      	beq.n	8011c98 <I2C_RequestMemoryWrite+0x38>
    return HAL_TIMEOUT;
 8011cb6:	2003      	movs	r0, #3
 8011cb8:	e7ee      	b.n	8011c98 <I2C_RequestMemoryWrite+0x38>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8011cba:	6823      	ldr	r3, [r4, #0]
 8011cbc:	0a32      	lsrs	r2, r6, #8
 8011cbe:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011cc0:	9906      	ldr	r1, [sp, #24]
 8011cc2:	0020      	movs	r0, r4
 8011cc4:	f7ff ff5e 	bl	8011b84 <I2C_WaitOnTXISFlagUntilTimeout>
 8011cc8:	2800      	cmp	r0, #0
 8011cca:	d008      	beq.n	8011cde <I2C_RequestMemoryWrite+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011ccc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 8011cce:	3804      	subs	r0, #4
 8011cd0:	4243      	negs	r3, r0
 8011cd2:	4158      	adcs	r0, r3
 8011cd4:	4240      	negs	r0, r0
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	4398      	bics	r0, r3
 8011cda:	3003      	adds	r0, #3
 8011cdc:	e7dc      	b.n	8011c98 <I2C_RequestMemoryWrite+0x38>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8011cde:	6823      	ldr	r3, [r4, #0]
 8011ce0:	b2f6      	uxtb	r6, r6
 8011ce2:	629e      	str	r6, [r3, #40]	; 0x28
 8011ce4:	e7df      	b.n	8011ca6 <I2C_RequestMemoryWrite+0x46>

08011ce6 <I2C_RequestMemoryRead>:
{
 8011ce6:	b570      	push	{r4, r5, r6, lr}
 8011ce8:	b082      	sub	sp, #8
 8011cea:	0004      	movs	r4, r0
 8011cec:	0016      	movs	r6, r2
 8011cee:	001d      	movs	r5, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8011cf0:	b2da      	uxtb	r2, r3
 8011cf2:	2380      	movs	r3, #128	; 0x80
 8011cf4:	019b      	lsls	r3, r3, #6
 8011cf6:	9300      	str	r3, [sp, #0]
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	f7ff fee5 	bl	8011ac8 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011cfe:	9906      	ldr	r1, [sp, #24]
 8011d00:	0020      	movs	r0, r4
 8011d02:	f7ff ff3f 	bl	8011b84 <I2C_WaitOnTXISFlagUntilTimeout>
 8011d06:	2800      	cmp	r0, #0
 8011d08:	d009      	beq.n	8011d1e <I2C_RequestMemoryRead+0x38>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011d0a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8011d0c:	3804      	subs	r0, #4
 8011d0e:	4243      	negs	r3, r0
 8011d10:	4158      	adcs	r0, r3
 8011d12:	4240      	negs	r0, r0
 8011d14:	2301      	movs	r3, #1
 8011d16:	4398      	bics	r0, r3
 8011d18:	3003      	adds	r0, #3
}
 8011d1a:	b002      	add	sp, #8
 8011d1c:	bd70      	pop	{r4, r5, r6, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011d1e:	2d01      	cmp	r5, #1
 8011d20:	d10c      	bne.n	8011d3c <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);    
 8011d22:	6823      	ldr	r3, [r4, #0]
 8011d24:	b2f6      	uxtb	r6, r6
 8011d26:	629e      	str	r6, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8011d28:	9b06      	ldr	r3, [sp, #24]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	2140      	movs	r1, #64	; 0x40
 8011d2e:	0020      	movs	r0, r4
 8011d30:	f7ff ff52 	bl	8011bd8 <I2C_WaitOnFlagUntilTimeout>
 8011d34:	2800      	cmp	r0, #0
 8011d36:	d0f0      	beq.n	8011d1a <I2C_RequestMemoryRead+0x34>
    return HAL_TIMEOUT;
 8011d38:	2003      	movs	r0, #3
 8011d3a:	e7ee      	b.n	8011d1a <I2C_RequestMemoryRead+0x34>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8011d3c:	6823      	ldr	r3, [r4, #0]
 8011d3e:	0a32      	lsrs	r2, r6, #8
 8011d40:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011d42:	9906      	ldr	r1, [sp, #24]
 8011d44:	0020      	movs	r0, r4
 8011d46:	f7ff ff1d 	bl	8011b84 <I2C_WaitOnTXISFlagUntilTimeout>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	d008      	beq.n	8011d60 <I2C_RequestMemoryRead+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011d4e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 8011d50:	3804      	subs	r0, #4
 8011d52:	4243      	negs	r3, r0
 8011d54:	4158      	adcs	r0, r3
 8011d56:	4240      	negs	r0, r0
 8011d58:	2301      	movs	r3, #1
 8011d5a:	4398      	bics	r0, r3
 8011d5c:	3003      	adds	r0, #3
 8011d5e:	e7dc      	b.n	8011d1a <I2C_RequestMemoryRead+0x34>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8011d60:	6823      	ldr	r3, [r4, #0]
 8011d62:	b2f6      	uxtb	r6, r6
 8011d64:	629e      	str	r6, [r3, #40]	; 0x28
 8011d66:	e7df      	b.n	8011d28 <I2C_RequestMemoryRead+0x42>

08011d68 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 8011d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d6a:	0005      	movs	r5, r0
 8011d6c:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 8011d6e:	f7fe fdcf 	bl	8010910 <HAL_GetTick>
 8011d72:	0007      	movs	r7, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011d74:	2620      	movs	r6, #32
 8011d76:	682b      	ldr	r3, [r5, #0]
 8011d78:	699b      	ldr	r3, [r3, #24]
 8011d7a:	421e      	tst	r6, r3
 8011d7c:	d118      	bne.n	8011db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8011d7e:	0021      	movs	r1, r4
 8011d80:	0028      	movs	r0, r5
 8011d82:	f7ff feb3 	bl	8011aec <I2C_IsAcknowledgeFailed>
 8011d86:	2800      	cmp	r0, #0
 8011d88:	d114      	bne.n	8011db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011d8a:	2c00      	cmp	r4, #0
 8011d8c:	d004      	beq.n	8011d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
 8011d8e:	f7fe fdbf 	bl	8010910 <HAL_GetTick>
 8011d92:	1bc0      	subs	r0, r0, r7
 8011d94:	42a0      	cmp	r0, r4
 8011d96:	d9ee      	bls.n	8011d76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011d98:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011d9a:	2220      	movs	r2, #32
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	63ab      	str	r3, [r5, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8011da0:	2335      	movs	r3, #53	; 0x35
 8011da2:	3a1f      	subs	r2, #31
 8011da4:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 8011da6:	3b01      	subs	r3, #1
 8011da8:	2200      	movs	r2, #0
 8011daa:	54ea      	strb	r2, [r5, r3]
      return HAL_TIMEOUT;
 8011dac:	2003      	movs	r0, #3
}
 8011dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8011db0:	2000      	movs	r0, #0
 8011db2:	e7fc      	b.n	8011dae <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8011db4:	2001      	movs	r0, #1
 8011db6:	e7fa      	b.n	8011dae <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08011db8 <HAL_I2C_MspInit>:
}
 8011db8:	4770      	bx	lr
	...

08011dbc <HAL_I2C_Init>:
{ 
 8011dbc:	b510      	push	{r4, lr}
 8011dbe:	1e04      	subs	r4, r0, #0
  if(hi2c == NULL)
 8011dc0:	d051      	beq.n	8011e66 <HAL_I2C_Init+0xaa>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8011dc2:	2335      	movs	r3, #53	; 0x35
 8011dc4:	5cc3      	ldrb	r3, [r0, r3]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d03c      	beq.n	8011e44 <HAL_I2C_Init+0x88>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8011dca:	2335      	movs	r3, #53	; 0x35
 8011dcc:	2202      	movs	r2, #2
 8011dce:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8011dd0:	6822      	ldr	r2, [r4, #0]
 8011dd2:	6813      	ldr	r3, [r2, #0]
 8011dd4:	2101      	movs	r1, #1
 8011dd6:	438b      	bics	r3, r1
 8011dd8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011dda:	6822      	ldr	r2, [r4, #0]
 8011ddc:	4b23      	ldr	r3, [pc, #140]	; (8011e6c <HAL_I2C_Init+0xb0>)
 8011dde:	6861      	ldr	r1, [r4, #4]
 8011de0:	400b      	ands	r3, r1
 8011de2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011de4:	6822      	ldr	r2, [r4, #0]
 8011de6:	6893      	ldr	r3, [r2, #8]
 8011de8:	4921      	ldr	r1, [pc, #132]	; (8011e70 <HAL_I2C_Init+0xb4>)
 8011dea:	400b      	ands	r3, r1
 8011dec:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8011dee:	68a3      	ldr	r3, [r4, #8]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d007      	beq.n	8011e04 <HAL_I2C_Init+0x48>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011df4:	68e2      	ldr	r2, [r4, #12]
 8011df6:	2a01      	cmp	r2, #1
 8011df8:	d02a      	beq.n	8011e50 <HAL_I2C_Init+0x94>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011dfa:	6821      	ldr	r1, [r4, #0]
 8011dfc:	2284      	movs	r2, #132	; 0x84
 8011dfe:	0212      	lsls	r2, r2, #8
 8011e00:	4313      	orrs	r3, r2
 8011e02:	608b      	str	r3, [r1, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011e04:	68e3      	ldr	r3, [r4, #12]
 8011e06:	2b02      	cmp	r3, #2
 8011e08:	d028      	beq.n	8011e5c <HAL_I2C_Init+0xa0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011e0a:	6822      	ldr	r2, [r4, #0]
 8011e0c:	6851      	ldr	r1, [r2, #4]
 8011e0e:	4b19      	ldr	r3, [pc, #100]	; (8011e74 <HAL_I2C_Init+0xb8>)
 8011e10:	430b      	orrs	r3, r1
 8011e12:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8011e14:	6821      	ldr	r1, [r4, #0]
 8011e16:	6923      	ldr	r3, [r4, #16]
 8011e18:	6962      	ldr	r2, [r4, #20]
 8011e1a:	4313      	orrs	r3, r2
 8011e1c:	69a2      	ldr	r2, [r4, #24]
 8011e1e:	0212      	lsls	r2, r2, #8
 8011e20:	4313      	orrs	r3, r2
 8011e22:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011e24:	6822      	ldr	r2, [r4, #0]
 8011e26:	69e3      	ldr	r3, [r4, #28]
 8011e28:	6a21      	ldr	r1, [r4, #32]
 8011e2a:	430b      	orrs	r3, r1
 8011e2c:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8011e2e:	6821      	ldr	r1, [r4, #0]
 8011e30:	680b      	ldr	r3, [r1, #0]
 8011e32:	2201      	movs	r2, #1
 8011e34:	4313      	orrs	r3, r2
 8011e36:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8011e3c:	3335      	adds	r3, #53	; 0x35
 8011e3e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8011e40:	2000      	movs	r0, #0
}
 8011e42:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8011e44:	3334      	adds	r3, #52	; 0x34
 8011e46:	2200      	movs	r2, #0
 8011e48:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8011e4a:	f7ff ffb5 	bl	8011db8 <HAL_I2C_MspInit>
 8011e4e:	e7bc      	b.n	8011dca <HAL_I2C_Init+0xe>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011e50:	6821      	ldr	r1, [r4, #0]
 8011e52:	2280      	movs	r2, #128	; 0x80
 8011e54:	0212      	lsls	r2, r2, #8
 8011e56:	4313      	orrs	r3, r2
 8011e58:	608b      	str	r3, [r1, #8]
 8011e5a:	e7d3      	b.n	8011e04 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	2280      	movs	r2, #128	; 0x80
 8011e60:	0112      	lsls	r2, r2, #4
 8011e62:	605a      	str	r2, [r3, #4]
 8011e64:	e7d1      	b.n	8011e0a <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8011e66:	2001      	movs	r0, #1
 8011e68:	e7eb      	b.n	8011e42 <HAL_I2C_Init+0x86>
 8011e6a:	46c0      	nop			; (mov r8, r8)
 8011e6c:	f0ffffff 	.word	0xf0ffffff
 8011e70:	ffff7fff 	.word	0xffff7fff
 8011e74:	02008000 	.word	0x02008000

08011e78 <HAL_I2C_Mem_Write>:
{
 8011e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e7a:	b085      	sub	sp, #20
 8011e7c:	0004      	movs	r4, r0
 8011e7e:	000f      	movs	r7, r1
 8011e80:	9103      	str	r1, [sp, #12]
 8011e82:	a90a      	add	r1, sp, #40	; 0x28
 8011e84:	c940      	ldmia	r1!, {r6}
 8011e86:	880d      	ldrh	r5, [r1, #0]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8011e88:	2135      	movs	r1, #53	; 0x35
 8011e8a:	5c41      	ldrb	r1, [r0, r1]
    return HAL_BUSY;
 8011e8c:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8011e8e:	2901      	cmp	r1, #1
 8011e90:	d000      	beq.n	8011e94 <HAL_I2C_Mem_Write+0x1c>
 8011e92:	e09f      	b.n	8011fd4 <HAL_I2C_Mem_Write+0x15c>
    if((pData == NULL) || (Size == 0)) 
 8011e94:	2e00      	cmp	r6, #0
 8011e96:	d100      	bne.n	8011e9a <HAL_I2C_Mem_Write+0x22>
 8011e98:	e09b      	b.n	8011fd2 <HAL_I2C_Mem_Write+0x15a>
      return  HAL_ERROR;                                    
 8011e9a:	3801      	subs	r0, #1
    if((pData == NULL) || (Size == 0)) 
 8011e9c:	2d00      	cmp	r5, #0
 8011e9e:	d100      	bne.n	8011ea2 <HAL_I2C_Mem_Write+0x2a>
 8011ea0:	e098      	b.n	8011fd4 <HAL_I2C_Mem_Write+0x15c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8011ea2:	6821      	ldr	r1, [r4, #0]
 8011ea4:	6989      	ldr	r1, [r1, #24]
 8011ea6:	0409      	lsls	r1, r1, #16
 8011ea8:	d500      	bpl.n	8011eac <HAL_I2C_Mem_Write+0x34>
 8011eaa:	e095      	b.n	8011fd8 <HAL_I2C_Mem_Write+0x160>
    __HAL_LOCK(hi2c);
 8011eac:	2134      	movs	r1, #52	; 0x34
 8011eae:	5c61      	ldrb	r1, [r4, r1]
 8011eb0:	2901      	cmp	r1, #1
 8011eb2:	d100      	bne.n	8011eb6 <HAL_I2C_Mem_Write+0x3e>
 8011eb4:	e092      	b.n	8011fdc <HAL_I2C_Mem_Write+0x164>
 8011eb6:	2134      	movs	r1, #52	; 0x34
 8011eb8:	5460      	strb	r0, [r4, r1]
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8011eba:	3101      	adds	r1, #1
 8011ebc:	3051      	adds	r0, #81	; 0x51
 8011ebe:	5460      	strb	r0, [r4, r1]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	63a1      	str	r1, [r4, #56]	; 0x38
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8011ec4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ec6:	9100      	str	r1, [sp, #0]
 8011ec8:	0039      	movs	r1, r7
 8011eca:	0020      	movs	r0, r4
 8011ecc:	f7ff fec8 	bl	8011c60 <I2C_RequestMemoryWrite>
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	d00c      	beq.n	8011eee <HAL_I2C_Mem_Write+0x76>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011ed4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ed6:	2b04      	cmp	r3, #4
 8011ed8:	d104      	bne.n	8011ee4 <HAL_I2C_Mem_Write+0x6c>
        __HAL_UNLOCK(hi2c);
 8011eda:	3330      	adds	r3, #48	; 0x30
 8011edc:	2200      	movs	r2, #0
 8011ede:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8011ee0:	2001      	movs	r0, #1
 8011ee2:	e077      	b.n	8011fd4 <HAL_I2C_Mem_Write+0x15c>
        __HAL_UNLOCK(hi2c);
 8011ee4:	2334      	movs	r3, #52	; 0x34
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8011eea:	2003      	movs	r0, #3
 8011eec:	e072      	b.n	8011fd4 <HAL_I2C_Mem_Write+0x15c>
    if(Size > 255)
 8011eee:	2dff      	cmp	r5, #255	; 0xff
 8011ef0:	d90a      	bls.n	8011f08 <HAL_I2C_Mem_Write+0x90>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011ef2:	2380      	movs	r3, #128	; 0x80
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	9200      	str	r2, [sp, #0]
 8011ef8:	045b      	lsls	r3, r3, #17
 8011efa:	32ff      	adds	r2, #255	; 0xff
 8011efc:	9903      	ldr	r1, [sp, #12]
 8011efe:	0020      	movs	r0, r4
 8011f00:	f7ff fde2 	bl	8011ac8 <I2C_TransferConfig>
      Sizetmp = 255;
 8011f04:	27ff      	movs	r7, #255	; 0xff
 8011f06:	e036      	b.n	8011f76 <HAL_I2C_Mem_Write+0xfe>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011f08:	2380      	movs	r3, #128	; 0x80
 8011f0a:	b2ea      	uxtb	r2, r5
 8011f0c:	2100      	movs	r1, #0
 8011f0e:	9100      	str	r1, [sp, #0]
 8011f10:	049b      	lsls	r3, r3, #18
 8011f12:	9903      	ldr	r1, [sp, #12]
 8011f14:	0020      	movs	r0, r4
 8011f16:	f7ff fdd7 	bl	8011ac8 <I2C_TransferConfig>
      Sizetmp = Size;
 8011f1a:	002f      	movs	r7, r5
 8011f1c:	e02b      	b.n	8011f76 <HAL_I2C_Mem_Write+0xfe>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011f1e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8011f20:	3804      	subs	r0, #4
 8011f22:	4243      	negs	r3, r0
 8011f24:	4158      	adcs	r0, r3
 8011f26:	4240      	negs	r0, r0
 8011f28:	2301      	movs	r3, #1
 8011f2a:	4398      	bics	r0, r3
 8011f2c:	3003      	adds	r0, #3
 8011f2e:	e051      	b.n	8011fd4 <HAL_I2C_Mem_Write+0x15c>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8011f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f32:	2200      	movs	r2, #0
 8011f34:	2180      	movs	r1, #128	; 0x80
 8011f36:	0020      	movs	r0, r4
 8011f38:	f7ff fe4e 	bl	8011bd8 <I2C_WaitOnFlagUntilTimeout>
 8011f3c:	2800      	cmp	r0, #0
 8011f3e:	d14f      	bne.n	8011fe0 <HAL_I2C_Mem_Write+0x168>
        if(Size > 255)
 8011f40:	2dff      	cmp	r5, #255	; 0xff
 8011f42:	d90a      	bls.n	8011f5a <HAL_I2C_Mem_Write+0xe2>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011f44:	2300      	movs	r3, #0
 8011f46:	9300      	str	r3, [sp, #0]
 8011f48:	2380      	movs	r3, #128	; 0x80
 8011f4a:	045b      	lsls	r3, r3, #17
 8011f4c:	22ff      	movs	r2, #255	; 0xff
 8011f4e:	9903      	ldr	r1, [sp, #12]
 8011f50:	0020      	movs	r0, r4
 8011f52:	f7ff fdb9 	bl	8011ac8 <I2C_TransferConfig>
          Sizetmp = 255;
 8011f56:	37ff      	adds	r7, #255	; 0xff
 8011f58:	e00c      	b.n	8011f74 <HAL_I2C_Mem_Write+0xfc>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011f5a:	b2ea      	uxtb	r2, r5
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	9300      	str	r3, [sp, #0]
 8011f60:	2380      	movs	r3, #128	; 0x80
 8011f62:	049b      	lsls	r3, r3, #18
 8011f64:	9903      	ldr	r1, [sp, #12]
 8011f66:	0020      	movs	r0, r4
 8011f68:	f7ff fdae 	bl	8011ac8 <I2C_TransferConfig>
          Sizetmp = Size;
 8011f6c:	002f      	movs	r7, r5
 8011f6e:	e001      	b.n	8011f74 <HAL_I2C_Mem_Write+0xfc>
    }while(Size > 0);
 8011f70:	2d00      	cmp	r5, #0
 8011f72:	d010      	beq.n	8011f96 <HAL_I2C_Mem_Write+0x11e>
 8011f74:	3601      	adds	r6, #1
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011f76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f78:	0020      	movs	r0, r4
 8011f7a:	f7ff fe03 	bl	8011b84 <I2C_WaitOnTXISFlagUntilTimeout>
 8011f7e:	2800      	cmp	r0, #0
 8011f80:	d1cd      	bne.n	8011f1e <HAL_I2C_Mem_Write+0xa6>
      hi2c->Instance->TXDR = (*pData++);
 8011f82:	6823      	ldr	r3, [r4, #0]
 8011f84:	7832      	ldrb	r2, [r6, #0]
 8011f86:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
 8011f88:	3f01      	subs	r7, #1
      Size--;
 8011f8a:	3d01      	subs	r5, #1
 8011f8c:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 8011f8e:	2f00      	cmp	r7, #0
 8011f90:	d1ee      	bne.n	8011f70 <HAL_I2C_Mem_Write+0xf8>
 8011f92:	2d00      	cmp	r5, #0
 8011f94:	d1cc      	bne.n	8011f30 <HAL_I2C_Mem_Write+0xb8>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8011f96:	2119      	movs	r1, #25
 8011f98:	0020      	movs	r0, r4
 8011f9a:	f7ff fee5 	bl	8011d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	d008      	beq.n	8011fb4 <HAL_I2C_Mem_Write+0x13c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011fa2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 8011fa4:	3804      	subs	r0, #4
 8011fa6:	4243      	negs	r3, r0
 8011fa8:	4158      	adcs	r0, r3
 8011faa:	4240      	negs	r0, r0
 8011fac:	2301      	movs	r3, #1
 8011fae:	4398      	bics	r0, r3
 8011fb0:	3003      	adds	r0, #3
 8011fb2:	e00f      	b.n	8011fd4 <HAL_I2C_Mem_Write+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011fb4:	6823      	ldr	r3, [r4, #0]
 8011fb6:	2220      	movs	r2, #32
 8011fb8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8011fba:	6822      	ldr	r2, [r4, #0]
 8011fbc:	6853      	ldr	r3, [r2, #4]
 8011fbe:	4909      	ldr	r1, [pc, #36]	; (8011fe4 <HAL_I2C_Mem_Write+0x16c>)
 8011fc0:	400b      	ands	r3, r1
 8011fc2:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 8011fc4:	2335      	movs	r3, #53	; 0x35
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8011fca:	3b01      	subs	r3, #1
 8011fcc:	2200      	movs	r2, #0
 8011fce:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8011fd0:	e000      	b.n	8011fd4 <HAL_I2C_Mem_Write+0x15c>
      return  HAL_ERROR;                                    
 8011fd2:	2001      	movs	r0, #1
}
 8011fd4:	b005      	add	sp, #20
 8011fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8011fd8:	2002      	movs	r0, #2
 8011fda:	e7fb      	b.n	8011fd4 <HAL_I2C_Mem_Write+0x15c>
    __HAL_LOCK(hi2c);
 8011fdc:	2002      	movs	r0, #2
 8011fde:	e7f9      	b.n	8011fd4 <HAL_I2C_Mem_Write+0x15c>
          return HAL_TIMEOUT;
 8011fe0:	2003      	movs	r0, #3
 8011fe2:	e7f7      	b.n	8011fd4 <HAL_I2C_Mem_Write+0x15c>
 8011fe4:	fe00e800 	.word	0xfe00e800

08011fe8 <HAL_I2C_Mem_Read>:
{
 8011fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fea:	b085      	sub	sp, #20
 8011fec:	0004      	movs	r4, r0
 8011fee:	000f      	movs	r7, r1
 8011ff0:	9103      	str	r1, [sp, #12]
 8011ff2:	a90a      	add	r1, sp, #40	; 0x28
 8011ff4:	c940      	ldmia	r1!, {r6}
 8011ff6:	880d      	ldrh	r5, [r1, #0]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8011ff8:	2135      	movs	r1, #53	; 0x35
 8011ffa:	5c41      	ldrb	r1, [r0, r1]
    return HAL_BUSY;
 8011ffc:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8011ffe:	2901      	cmp	r1, #1
 8012000:	d000      	beq.n	8012004 <HAL_I2C_Mem_Read+0x1c>
 8012002:	e09a      	b.n	801213a <HAL_I2C_Mem_Read+0x152>
    if((pData == NULL) || (Size == 0)) 
 8012004:	2e00      	cmp	r6, #0
 8012006:	d100      	bne.n	801200a <HAL_I2C_Mem_Read+0x22>
 8012008:	e096      	b.n	8012138 <HAL_I2C_Mem_Read+0x150>
      return  HAL_ERROR;                                    
 801200a:	3801      	subs	r0, #1
    if((pData == NULL) || (Size == 0)) 
 801200c:	2d00      	cmp	r5, #0
 801200e:	d100      	bne.n	8012012 <HAL_I2C_Mem_Read+0x2a>
 8012010:	e093      	b.n	801213a <HAL_I2C_Mem_Read+0x152>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012012:	6821      	ldr	r1, [r4, #0]
 8012014:	6989      	ldr	r1, [r1, #24]
 8012016:	0409      	lsls	r1, r1, #16
 8012018:	d500      	bpl.n	801201c <HAL_I2C_Mem_Read+0x34>
 801201a:	e090      	b.n	801213e <HAL_I2C_Mem_Read+0x156>
    __HAL_LOCK(hi2c);
 801201c:	2134      	movs	r1, #52	; 0x34
 801201e:	5c61      	ldrb	r1, [r4, r1]
 8012020:	2901      	cmp	r1, #1
 8012022:	d100      	bne.n	8012026 <HAL_I2C_Mem_Read+0x3e>
 8012024:	e08d      	b.n	8012142 <HAL_I2C_Mem_Read+0x15a>
 8012026:	2134      	movs	r1, #52	; 0x34
 8012028:	5460      	strb	r0, [r4, r1]
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 801202a:	3101      	adds	r1, #1
 801202c:	3061      	adds	r0, #97	; 0x61
 801202e:	5460      	strb	r0, [r4, r1]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012030:	2100      	movs	r1, #0
 8012032:	63a1      	str	r1, [r4, #56]	; 0x38
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8012034:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012036:	9100      	str	r1, [sp, #0]
 8012038:	0039      	movs	r1, r7
 801203a:	0020      	movs	r0, r4
 801203c:	f7ff fe53 	bl	8011ce6 <I2C_RequestMemoryRead>
 8012040:	2800      	cmp	r0, #0
 8012042:	d00c      	beq.n	801205e <HAL_I2C_Mem_Read+0x76>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012046:	2b04      	cmp	r3, #4
 8012048:	d104      	bne.n	8012054 <HAL_I2C_Mem_Read+0x6c>
        __HAL_UNLOCK(hi2c);
 801204a:	3330      	adds	r3, #48	; 0x30
 801204c:	2200      	movs	r2, #0
 801204e:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8012050:	2001      	movs	r0, #1
 8012052:	e072      	b.n	801213a <HAL_I2C_Mem_Read+0x152>
        __HAL_UNLOCK(hi2c);
 8012054:	2334      	movs	r3, #52	; 0x34
 8012056:	2200      	movs	r2, #0
 8012058:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 801205a:	2003      	movs	r0, #3
 801205c:	e06d      	b.n	801213a <HAL_I2C_Mem_Read+0x152>
    if(Size > 255)
 801205e:	2dff      	cmp	r5, #255	; 0xff
 8012060:	d90b      	bls.n	801207a <HAL_I2C_Mem_Read+0x92>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8012062:	2380      	movs	r3, #128	; 0x80
 8012064:	2290      	movs	r2, #144	; 0x90
 8012066:	0192      	lsls	r2, r2, #6
 8012068:	9200      	str	r2, [sp, #0]
 801206a:	045b      	lsls	r3, r3, #17
 801206c:	22ff      	movs	r2, #255	; 0xff
 801206e:	9903      	ldr	r1, [sp, #12]
 8012070:	0020      	movs	r0, r4
 8012072:	f7ff fd29 	bl	8011ac8 <I2C_TransferConfig>
      Sizetmp = 255;
 8012076:	27ff      	movs	r7, #255	; 0xff
 8012078:	e02e      	b.n	80120d8 <HAL_I2C_Mem_Read+0xf0>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 801207a:	2380      	movs	r3, #128	; 0x80
 801207c:	b2ea      	uxtb	r2, r5
 801207e:	2190      	movs	r1, #144	; 0x90
 8012080:	0189      	lsls	r1, r1, #6
 8012082:	9100      	str	r1, [sp, #0]
 8012084:	049b      	lsls	r3, r3, #18
 8012086:	9903      	ldr	r1, [sp, #12]
 8012088:	0020      	movs	r0, r4
 801208a:	f7ff fd1d 	bl	8011ac8 <I2C_TransferConfig>
      Sizetmp = Size;
 801208e:	002f      	movs	r7, r5
 8012090:	e022      	b.n	80120d8 <HAL_I2C_Mem_Read+0xf0>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8012092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012094:	2200      	movs	r2, #0
 8012096:	2180      	movs	r1, #128	; 0x80
 8012098:	0020      	movs	r0, r4
 801209a:	f7ff fd9d 	bl	8011bd8 <I2C_WaitOnFlagUntilTimeout>
 801209e:	2800      	cmp	r0, #0
 80120a0:	d153      	bne.n	801214a <HAL_I2C_Mem_Read+0x162>
        if(Size > 255)
 80120a2:	2dff      	cmp	r5, #255	; 0xff
 80120a4:	d90a      	bls.n	80120bc <HAL_I2C_Mem_Read+0xd4>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80120a6:	2300      	movs	r3, #0
 80120a8:	9300      	str	r3, [sp, #0]
 80120aa:	2380      	movs	r3, #128	; 0x80
 80120ac:	045b      	lsls	r3, r3, #17
 80120ae:	22ff      	movs	r2, #255	; 0xff
 80120b0:	9903      	ldr	r1, [sp, #12]
 80120b2:	0020      	movs	r0, r4
 80120b4:	f7ff fd08 	bl	8011ac8 <I2C_TransferConfig>
          Sizetmp = 255;
 80120b8:	37ff      	adds	r7, #255	; 0xff
 80120ba:	e00c      	b.n	80120d6 <HAL_I2C_Mem_Read+0xee>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80120bc:	b2ea      	uxtb	r2, r5
 80120be:	2300      	movs	r3, #0
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	2380      	movs	r3, #128	; 0x80
 80120c4:	049b      	lsls	r3, r3, #18
 80120c6:	9903      	ldr	r1, [sp, #12]
 80120c8:	0020      	movs	r0, r4
 80120ca:	f7ff fcfd 	bl	8011ac8 <I2C_TransferConfig>
          Sizetmp = Size;
 80120ce:	002f      	movs	r7, r5
 80120d0:	e001      	b.n	80120d6 <HAL_I2C_Mem_Read+0xee>
    }while(Size > 0);
 80120d2:	2d00      	cmp	r5, #0
 80120d4:	d012      	beq.n	80120fc <HAL_I2C_Mem_Read+0x114>
 80120d6:	3601      	adds	r6, #1
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 80120d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120da:	2200      	movs	r2, #0
 80120dc:	2104      	movs	r1, #4
 80120de:	0020      	movs	r0, r4
 80120e0:	f7ff fd7a 	bl	8011bd8 <I2C_WaitOnFlagUntilTimeout>
 80120e4:	2800      	cmp	r0, #0
 80120e6:	d12e      	bne.n	8012146 <HAL_I2C_Mem_Read+0x15e>
      (*pData++) = hi2c->Instance->RXDR;
 80120e8:	6823      	ldr	r3, [r4, #0]
 80120ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ec:	7033      	strb	r3, [r6, #0]
      Sizetmp--;
 80120ee:	3f01      	subs	r7, #1
      Size--;   
 80120f0:	3d01      	subs	r5, #1
 80120f2:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 80120f4:	2f00      	cmp	r7, #0
 80120f6:	d1ec      	bne.n	80120d2 <HAL_I2C_Mem_Read+0xea>
 80120f8:	2d00      	cmp	r5, #0
 80120fa:	d1ca      	bne.n	8012092 <HAL_I2C_Mem_Read+0xaa>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 80120fc:	2119      	movs	r1, #25
 80120fe:	0020      	movs	r0, r4
 8012100:	f7ff fe32 	bl	8011d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012104:	2800      	cmp	r0, #0
 8012106:	d008      	beq.n	801211a <HAL_I2C_Mem_Read+0x132>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012108:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 801210a:	3804      	subs	r0, #4
 801210c:	4243      	negs	r3, r0
 801210e:	4158      	adcs	r0, r3
 8012110:	4240      	negs	r0, r0
 8012112:	2301      	movs	r3, #1
 8012114:	4398      	bics	r0, r3
 8012116:	3003      	adds	r0, #3
 8012118:	e00f      	b.n	801213a <HAL_I2C_Mem_Read+0x152>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801211a:	6823      	ldr	r3, [r4, #0]
 801211c:	2220      	movs	r2, #32
 801211e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8012120:	6822      	ldr	r2, [r4, #0]
 8012122:	6853      	ldr	r3, [r2, #4]
 8012124:	490a      	ldr	r1, [pc, #40]	; (8012150 <HAL_I2C_Mem_Read+0x168>)
 8012126:	400b      	ands	r3, r1
 8012128:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801212a:	2335      	movs	r3, #53	; 0x35
 801212c:	2201      	movs	r2, #1
 801212e:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8012130:	3b01      	subs	r3, #1
 8012132:	2200      	movs	r2, #0
 8012134:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012136:	e000      	b.n	801213a <HAL_I2C_Mem_Read+0x152>
      return  HAL_ERROR;                                    
 8012138:	2001      	movs	r0, #1
}
 801213a:	b005      	add	sp, #20
 801213c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 801213e:	2002      	movs	r0, #2
 8012140:	e7fb      	b.n	801213a <HAL_I2C_Mem_Read+0x152>
    __HAL_LOCK(hi2c);
 8012142:	2002      	movs	r0, #2
 8012144:	e7f9      	b.n	801213a <HAL_I2C_Mem_Read+0x152>
        return HAL_TIMEOUT;
 8012146:	2003      	movs	r0, #3
 8012148:	e7f7      	b.n	801213a <HAL_I2C_Mem_Read+0x152>
          return HAL_TIMEOUT;
 801214a:	2003      	movs	r0, #3
 801214c:	e7f5      	b.n	801213a <HAL_I2C_Mem_Read+0x152>
 801214e:	46c0      	nop			; (mov r8, r8)
 8012150:	fe00e800 	.word	0xfe00e800

08012154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter : new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012154:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 8012156:	2335      	movs	r3, #53	; 0x35
 8012158:	5cc3      	ldrb	r3, [r0, r3]
 801215a:	2b02      	cmp	r3, #2
 801215c:	d02f      	beq.n	80121be <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 801215e:	2335      	movs	r3, #53	; 0x35
 8012160:	5cc3      	ldrb	r3, [r0, r3]
 8012162:	2b12      	cmp	r3, #18
 8012164:	d02d      	beq.n	80121c2 <HAL_I2CEx_ConfigAnalogFilter+0x6e>
 8012166:	2335      	movs	r3, #53	; 0x35
 8012168:	5cc3      	ldrb	r3, [r0, r3]
 801216a:	2b22      	cmp	r3, #34	; 0x22
 801216c:	d02b      	beq.n	80121c6 <HAL_I2CEx_ConfigAnalogFilter+0x72>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 801216e:	2335      	movs	r3, #53	; 0x35
 8012170:	5cc3      	ldrb	r3, [r0, r3]
 8012172:	2b32      	cmp	r3, #50	; 0x32
 8012174:	d029      	beq.n	80121ca <HAL_I2CEx_ConfigAnalogFilter+0x76>
 8012176:	2335      	movs	r3, #53	; 0x35
 8012178:	5cc3      	ldrb	r3, [r0, r3]
 801217a:	2b42      	cmp	r3, #66	; 0x42
 801217c:	d027      	beq.n	80121ce <HAL_I2CEx_ConfigAnalogFilter+0x7a>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 801217e:	2334      	movs	r3, #52	; 0x34
 8012180:	5cc3      	ldrb	r3, [r0, r3]
 8012182:	2b01      	cmp	r3, #1
 8012184:	d025      	beq.n	80121d2 <HAL_I2CEx_ConfigAnalogFilter+0x7e>
 8012186:	2434      	movs	r4, #52	; 0x34
 8012188:	2301      	movs	r3, #1
 801218a:	5503      	strb	r3, [r0, r4]

  hi2c->State = HAL_I2C_STATE_BUSY;
 801218c:	2535      	movs	r5, #53	; 0x35
 801218e:	2202      	movs	r2, #2
 8012190:	5542      	strb	r2, [r0, r5]
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);    
 8012192:	6806      	ldr	r6, [r0, #0]
 8012194:	6832      	ldr	r2, [r6, #0]
 8012196:	439a      	bics	r2, r3
 8012198:	6032      	str	r2, [r6, #0]
  
  /* Reset I2Cx ANOFF bit */
  hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 801219a:	6806      	ldr	r6, [r0, #0]
 801219c:	6832      	ldr	r2, [r6, #0]
 801219e:	4f0e      	ldr	r7, [pc, #56]	; (80121d8 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 80121a0:	403a      	ands	r2, r7
 80121a2:	6032      	str	r2, [r6, #0]
  
  /* Set analog filter bit*/
  hi2c->Instance->CR1 |= AnalogFilter;
 80121a4:	6806      	ldr	r6, [r0, #0]
 80121a6:	6832      	ldr	r2, [r6, #0]
 80121a8:	4311      	orrs	r1, r2
 80121aa:	6031      	str	r1, [r6, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 80121ac:	6801      	ldr	r1, [r0, #0]
 80121ae:	680a      	ldr	r2, [r1, #0]
 80121b0:	431a      	orrs	r2, r3
 80121b2:	600a      	str	r2, [r1, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 80121b4:	5543      	strb	r3, [r0, r5]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80121b6:	2300      	movs	r3, #0
 80121b8:	5503      	strb	r3, [r0, r4]

  return HAL_OK; 
 80121ba:	2000      	movs	r0, #0
}
 80121bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80121be:	2002      	movs	r0, #2
 80121c0:	e7fc      	b.n	80121bc <HAL_I2CEx_ConfigAnalogFilter+0x68>
 80121c2:	2002      	movs	r0, #2
 80121c4:	e7fa      	b.n	80121bc <HAL_I2CEx_ConfigAnalogFilter+0x68>
 80121c6:	2002      	movs	r0, #2
 80121c8:	e7f8      	b.n	80121bc <HAL_I2CEx_ConfigAnalogFilter+0x68>
 80121ca:	2002      	movs	r0, #2
 80121cc:	e7f6      	b.n	80121bc <HAL_I2CEx_ConfigAnalogFilter+0x68>
 80121ce:	2002      	movs	r0, #2
 80121d0:	e7f4      	b.n	80121bc <HAL_I2CEx_ConfigAnalogFilter+0x68>
  __HAL_LOCK(hi2c);
 80121d2:	2002      	movs	r0, #2
 80121d4:	e7f2      	b.n	80121bc <HAL_I2CEx_ConfigAnalogFilter+0x68>
 80121d6:	46c0      	nop			; (mov r8, r8)
 80121d8:	ffffefff 	.word	0xffffefff

080121dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter : Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80121dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 80121de:	2335      	movs	r3, #53	; 0x35
 80121e0:	5cc3      	ldrb	r3, [r0, r3]
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	d02d      	beq.n	8012242 <HAL_I2CEx_ConfigDigitalFilter+0x66>
 80121e6:	2335      	movs	r3, #53	; 0x35
 80121e8:	5cc3      	ldrb	r3, [r0, r3]
 80121ea:	2b12      	cmp	r3, #18
 80121ec:	d02b      	beq.n	8012246 <HAL_I2CEx_ConfigDigitalFilter+0x6a>
 80121ee:	2335      	movs	r3, #53	; 0x35
 80121f0:	5cc3      	ldrb	r3, [r0, r3]
 80121f2:	2b22      	cmp	r3, #34	; 0x22
 80121f4:	d029      	beq.n	801224a <HAL_I2CEx_ConfigDigitalFilter+0x6e>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 80121f6:	2335      	movs	r3, #53	; 0x35
 80121f8:	5cc3      	ldrb	r3, [r0, r3]
 80121fa:	2b32      	cmp	r3, #50	; 0x32
 80121fc:	d027      	beq.n	801224e <HAL_I2CEx_ConfigDigitalFilter+0x72>
 80121fe:	2335      	movs	r3, #53	; 0x35
 8012200:	5cc3      	ldrb	r3, [r0, r3]
 8012202:	2b42      	cmp	r3, #66	; 0x42
 8012204:	d025      	beq.n	8012252 <HAL_I2CEx_ConfigDigitalFilter+0x76>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 8012206:	2334      	movs	r3, #52	; 0x34
 8012208:	5cc3      	ldrb	r3, [r0, r3]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d023      	beq.n	8012256 <HAL_I2CEx_ConfigDigitalFilter+0x7a>
 801220e:	2434      	movs	r4, #52	; 0x34
 8012210:	2301      	movs	r3, #1
 8012212:	5503      	strb	r3, [r0, r4]

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012214:	2535      	movs	r5, #53	; 0x35
 8012216:	2202      	movs	r2, #2
 8012218:	5542      	strb	r2, [r0, r5]
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);  
 801221a:	6806      	ldr	r6, [r0, #0]
 801221c:	6832      	ldr	r2, [r6, #0]
 801221e:	439a      	bics	r2, r3
 8012220:	6032      	str	r2, [r6, #0]
  
  /* Get the old register value */
  tmpreg = hi2c->Instance->CR1;
 8012222:	6806      	ldr	r6, [r0, #0]
 8012224:	6832      	ldr	r2, [r6, #0]
  
  /* Reset I2Cx DNF bits [11:8] */
  tmpreg &= ~(I2C_CR1_DFN);
 8012226:	4f0d      	ldr	r7, [pc, #52]	; (801225c <HAL_I2CEx_ConfigDigitalFilter+0x80>)
 8012228:	403a      	ands	r2, r7
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= DigitalFilter << 8;
 801222a:	0209      	lsls	r1, r1, #8
 801222c:	4311      	orrs	r1, r2
  
  /* Store the new register value */
  hi2c->Instance->CR1 = tmpreg;
 801222e:	6031      	str	r1, [r6, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 8012230:	6801      	ldr	r1, [r0, #0]
 8012232:	680a      	ldr	r2, [r1, #0]
 8012234:	431a      	orrs	r2, r3
 8012236:	600a      	str	r2, [r1, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 8012238:	5543      	strb	r3, [r0, r5]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801223a:	2300      	movs	r3, #0
 801223c:	5503      	strb	r3, [r0, r4]

  return HAL_OK; 
 801223e:	2000      	movs	r0, #0
}  
 8012240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8012242:	2002      	movs	r0, #2
 8012244:	e7fc      	b.n	8012240 <HAL_I2CEx_ConfigDigitalFilter+0x64>
 8012246:	2002      	movs	r0, #2
 8012248:	e7fa      	b.n	8012240 <HAL_I2CEx_ConfigDigitalFilter+0x64>
 801224a:	2002      	movs	r0, #2
 801224c:	e7f8      	b.n	8012240 <HAL_I2CEx_ConfigDigitalFilter+0x64>
 801224e:	2002      	movs	r0, #2
 8012250:	e7f6      	b.n	8012240 <HAL_I2CEx_ConfigDigitalFilter+0x64>
 8012252:	2002      	movs	r0, #2
 8012254:	e7f4      	b.n	8012240 <HAL_I2CEx_ConfigDigitalFilter+0x64>
  __HAL_LOCK(hi2c);
 8012256:	2002      	movs	r0, #2
 8012258:	e7f2      	b.n	8012240 <HAL_I2CEx_ConfigDigitalFilter+0x64>
 801225a:	46c0      	nop			; (mov r8, r8)
 801225c:	fffff0ff 	.word	0xfffff0ff

08012260 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8012260:	4770      	bx	lr
	...

08012264 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8012264:	4a03      	ldr	r2, [pc, #12]	; (8012274 <HAL_PWR_EnableBkUpAccess+0x10>)
 8012266:	6811      	ldr	r1, [r2, #0]
 8012268:	2380      	movs	r3, #128	; 0x80
 801226a:	005b      	lsls	r3, r3, #1
 801226c:	430b      	orrs	r3, r1
 801226e:	6013      	str	r3, [r2, #0]
}
 8012270:	4770      	bx	lr
 8012272:	46c0      	nop			; (mov r8, r8)
 8012274:	40007000 	.word	0x40007000

08012278 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801227a:	46c6      	mov	lr, r8
 801227c:	b500      	push	{lr}
 801227e:	b082      	sub	sp, #8
 8012280:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012282:	6803      	ldr	r3, [r0, #0]
 8012284:	07db      	lsls	r3, r3, #31
 8012286:	d538      	bpl.n	80122fa <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8012288:	4bbd      	ldr	r3, [pc, #756]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 801228a:	685a      	ldr	r2, [r3, #4]
 801228c:	230c      	movs	r3, #12
 801228e:	4013      	ands	r3, r2
 8012290:	2b04      	cmp	r3, #4
 8012292:	d02a      	beq.n	80122ea <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8012294:	4bba      	ldr	r3, [pc, #744]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012296:	685a      	ldr	r2, [r3, #4]
 8012298:	230c      	movs	r3, #12
 801229a:	4013      	ands	r3, r2
 801229c:	2b08      	cmp	r3, #8
 801229e:	d108      	bne.n	80122b2 <HAL_RCC_OscConfig+0x3a>
 80122a0:	4bb7      	ldr	r3, [pc, #732]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80122a2:	685b      	ldr	r3, [r3, #4]
 80122a4:	22c0      	movs	r2, #192	; 0xc0
 80122a6:	0252      	lsls	r2, r2, #9
 80122a8:	4013      	ands	r3, r2
 80122aa:	2280      	movs	r2, #128	; 0x80
 80122ac:	0252      	lsls	r2, r2, #9
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d01b      	beq.n	80122ea <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80122b2:	4bb3      	ldr	r3, [pc, #716]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	49b3      	ldr	r1, [pc, #716]	; (8012584 <HAL_RCC_OscConfig+0x30c>)
 80122b8:	400a      	ands	r2, r1
 80122ba:	601a      	str	r2, [r3, #0]
 80122bc:	681a      	ldr	r2, [r3, #0]
 80122be:	49b2      	ldr	r1, [pc, #712]	; (8012588 <HAL_RCC_OscConfig+0x310>)
 80122c0:	400a      	ands	r2, r1
 80122c2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80122c4:	f7fe fb24 	bl	8010910 <HAL_GetTick>
 80122c8:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80122ca:	4ead      	ldr	r6, [pc, #692]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80122cc:	2580      	movs	r5, #128	; 0x80
 80122ce:	02ad      	lsls	r5, r5, #10
 80122d0:	6833      	ldr	r3, [r6, #0]
 80122d2:	422b      	tst	r3, r5
 80122d4:	d039      	beq.n	801234a <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80122d6:	f7fe fb1b 	bl	8010910 <HAL_GetTick>
 80122da:	1bc0      	subs	r0, r0, r7
 80122dc:	2864      	cmp	r0, #100	; 0x64
 80122de:	d9f7      	bls.n	80122d0 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 80122e0:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80122e2:	b002      	add	sp, #8
 80122e4:	bc04      	pop	{r2}
 80122e6:	4690      	mov	r8, r2
 80122e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80122ea:	4ba5      	ldr	r3, [pc, #660]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	039b      	lsls	r3, r3, #14
 80122f0:	d503      	bpl.n	80122fa <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 80122f2:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80122f4:	6863      	ldr	r3, [r4, #4]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d0f3      	beq.n	80122e2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80122fa:	6823      	ldr	r3, [r4, #0]
 80122fc:	079b      	lsls	r3, r3, #30
 80122fe:	d400      	bmi.n	8012302 <HAL_RCC_OscConfig+0x8a>
 8012300:	e08d      	b.n	801241e <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8012302:	4b9f      	ldr	r3, [pc, #636]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	220c      	movs	r2, #12
 8012308:	421a      	tst	r2, r3
 801230a:	d077      	beq.n	80123fc <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801230c:	4b9c      	ldr	r3, [pc, #624]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 801230e:	685a      	ldr	r2, [r3, #4]
 8012310:	230c      	movs	r3, #12
 8012312:	4013      	ands	r3, r2
 8012314:	2b08      	cmp	r3, #8
 8012316:	d068      	beq.n	80123ea <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012318:	68e3      	ldr	r3, [r4, #12]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d100      	bne.n	8012320 <HAL_RCC_OscConfig+0xa8>
 801231e:	e0a1      	b.n	8012464 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8012320:	4a97      	ldr	r2, [pc, #604]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012322:	6813      	ldr	r3, [r2, #0]
 8012324:	2101      	movs	r1, #1
 8012326:	430b      	orrs	r3, r1
 8012328:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801232a:	f7fe faf1 	bl	8010910 <HAL_GetTick>
 801232e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012330:	4e93      	ldr	r6, [pc, #588]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012332:	2502      	movs	r5, #2
 8012334:	6833      	ldr	r3, [r6, #0]
 8012336:	421d      	tst	r5, r3
 8012338:	d000      	beq.n	801233c <HAL_RCC_OscConfig+0xc4>
 801233a:	e08a      	b.n	8012452 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801233c:	f7fe fae8 	bl	8010910 <HAL_GetTick>
 8012340:	1bc0      	subs	r0, r0, r7
 8012342:	2864      	cmp	r0, #100	; 0x64
 8012344:	d9f6      	bls.n	8012334 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8012346:	2003      	movs	r0, #3
 8012348:	e7cb      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801234a:	6863      	ldr	r3, [r4, #4]
 801234c:	2b01      	cmp	r3, #1
 801234e:	d00b      	beq.n	8012368 <HAL_RCC_OscConfig+0xf0>
 8012350:	2b00      	cmp	r3, #0
 8012352:	d122      	bne.n	801239a <HAL_RCC_OscConfig+0x122>
 8012354:	4b8a      	ldr	r3, [pc, #552]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	498a      	ldr	r1, [pc, #552]	; (8012584 <HAL_RCC_OscConfig+0x30c>)
 801235a:	400a      	ands	r2, r1
 801235c:	601a      	str	r2, [r3, #0]
 801235e:	681a      	ldr	r2, [r3, #0]
 8012360:	4989      	ldr	r1, [pc, #548]	; (8012588 <HAL_RCC_OscConfig+0x310>)
 8012362:	400a      	ands	r2, r1
 8012364:	601a      	str	r2, [r3, #0]
 8012366:	e005      	b.n	8012374 <HAL_RCC_OscConfig+0xfc>
 8012368:	4a85      	ldr	r2, [pc, #532]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 801236a:	6811      	ldr	r1, [r2, #0]
 801236c:	2380      	movs	r3, #128	; 0x80
 801236e:	025b      	lsls	r3, r3, #9
 8012370:	430b      	orrs	r3, r1
 8012372:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012374:	6863      	ldr	r3, [r4, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d027      	beq.n	80123ca <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 801237a:	f7fe fac9 	bl	8010910 <HAL_GetTick>
 801237e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012380:	4e7f      	ldr	r6, [pc, #508]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012382:	2580      	movs	r5, #128	; 0x80
 8012384:	02ad      	lsls	r5, r5, #10
 8012386:	6833      	ldr	r3, [r6, #0]
 8012388:	422b      	tst	r3, r5
 801238a:	d1b6      	bne.n	80122fa <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801238c:	f7fe fac0 	bl	8010910 <HAL_GetTick>
 8012390:	1bc0      	subs	r0, r0, r7
 8012392:	2864      	cmp	r0, #100	; 0x64
 8012394:	d9f7      	bls.n	8012386 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8012396:	2003      	movs	r0, #3
 8012398:	e7a3      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801239a:	2b05      	cmp	r3, #5
 801239c:	d009      	beq.n	80123b2 <HAL_RCC_OscConfig+0x13a>
 801239e:	4b78      	ldr	r3, [pc, #480]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80123a0:	681a      	ldr	r2, [r3, #0]
 80123a2:	4978      	ldr	r1, [pc, #480]	; (8012584 <HAL_RCC_OscConfig+0x30c>)
 80123a4:	400a      	ands	r2, r1
 80123a6:	601a      	str	r2, [r3, #0]
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	4977      	ldr	r1, [pc, #476]	; (8012588 <HAL_RCC_OscConfig+0x310>)
 80123ac:	400a      	ands	r2, r1
 80123ae:	601a      	str	r2, [r3, #0]
 80123b0:	e7e0      	b.n	8012374 <HAL_RCC_OscConfig+0xfc>
 80123b2:	4b73      	ldr	r3, [pc, #460]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80123b4:	6819      	ldr	r1, [r3, #0]
 80123b6:	2280      	movs	r2, #128	; 0x80
 80123b8:	02d2      	lsls	r2, r2, #11
 80123ba:	430a      	orrs	r2, r1
 80123bc:	601a      	str	r2, [r3, #0]
 80123be:	6819      	ldr	r1, [r3, #0]
 80123c0:	2280      	movs	r2, #128	; 0x80
 80123c2:	0252      	lsls	r2, r2, #9
 80123c4:	430a      	orrs	r2, r1
 80123c6:	601a      	str	r2, [r3, #0]
 80123c8:	e7d4      	b.n	8012374 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80123ca:	f7fe faa1 	bl	8010910 <HAL_GetTick>
 80123ce:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80123d0:	4e6b      	ldr	r6, [pc, #428]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80123d2:	2580      	movs	r5, #128	; 0x80
 80123d4:	02ad      	lsls	r5, r5, #10
 80123d6:	6833      	ldr	r3, [r6, #0]
 80123d8:	422b      	tst	r3, r5
 80123da:	d08e      	beq.n	80122fa <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80123dc:	f7fe fa98 	bl	8010910 <HAL_GetTick>
 80123e0:	1bc0      	subs	r0, r0, r7
 80123e2:	2864      	cmp	r0, #100	; 0x64
 80123e4:	d9f7      	bls.n	80123d6 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80123e6:	2003      	movs	r0, #3
 80123e8:	e77b      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80123ea:	4b65      	ldr	r3, [pc, #404]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	22c0      	movs	r2, #192	; 0xc0
 80123f0:	0252      	lsls	r2, r2, #9
 80123f2:	4013      	ands	r3, r2
 80123f4:	2280      	movs	r2, #128	; 0x80
 80123f6:	0212      	lsls	r2, r2, #8
 80123f8:	4293      	cmp	r3, r2
 80123fa:	d18d      	bne.n	8012318 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80123fc:	4b60      	ldr	r3, [pc, #384]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	079b      	lsls	r3, r3, #30
 8012402:	d504      	bpl.n	801240e <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8012404:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012406:	68e3      	ldr	r3, [r4, #12]
 8012408:	2b01      	cmp	r3, #1
 801240a:	d000      	beq.n	801240e <HAL_RCC_OscConfig+0x196>
 801240c:	e769      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801240e:	495c      	ldr	r1, [pc, #368]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012410:	680a      	ldr	r2, [r1, #0]
 8012412:	6923      	ldr	r3, [r4, #16]
 8012414:	00db      	lsls	r3, r3, #3
 8012416:	20f8      	movs	r0, #248	; 0xf8
 8012418:	4382      	bics	r2, r0
 801241a:	4313      	orrs	r3, r2
 801241c:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801241e:	6823      	ldr	r3, [r4, #0]
 8012420:	071b      	lsls	r3, r3, #28
 8012422:	d547      	bpl.n	80124b4 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012424:	6a23      	ldr	r3, [r4, #32]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d030      	beq.n	801248c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 801242a:	4a55      	ldr	r2, [pc, #340]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 801242c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801242e:	2101      	movs	r1, #1
 8012430:	430b      	orrs	r3, r1
 8012432:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012434:	f7fe fa6c 	bl	8010910 <HAL_GetTick>
 8012438:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801243a:	4e51      	ldr	r6, [pc, #324]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 801243c:	2502      	movs	r5, #2
 801243e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012440:	421d      	tst	r5, r3
 8012442:	d137      	bne.n	80124b4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012444:	f7fe fa64 	bl	8010910 <HAL_GetTick>
 8012448:	1bc0      	subs	r0, r0, r7
 801244a:	2864      	cmp	r0, #100	; 0x64
 801244c:	d9f7      	bls.n	801243e <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 801244e:	2003      	movs	r0, #3
 8012450:	e747      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012452:	494b      	ldr	r1, [pc, #300]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012454:	680a      	ldr	r2, [r1, #0]
 8012456:	6923      	ldr	r3, [r4, #16]
 8012458:	00db      	lsls	r3, r3, #3
 801245a:	20f8      	movs	r0, #248	; 0xf8
 801245c:	4382      	bics	r2, r0
 801245e:	4313      	orrs	r3, r2
 8012460:	600b      	str	r3, [r1, #0]
 8012462:	e7dc      	b.n	801241e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8012464:	4a46      	ldr	r2, [pc, #280]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012466:	6813      	ldr	r3, [r2, #0]
 8012468:	2101      	movs	r1, #1
 801246a:	438b      	bics	r3, r1
 801246c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801246e:	f7fe fa4f 	bl	8010910 <HAL_GetTick>
 8012472:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012474:	4e42      	ldr	r6, [pc, #264]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012476:	2502      	movs	r5, #2
 8012478:	6833      	ldr	r3, [r6, #0]
 801247a:	421d      	tst	r5, r3
 801247c:	d0cf      	beq.n	801241e <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801247e:	f7fe fa47 	bl	8010910 <HAL_GetTick>
 8012482:	1bc0      	subs	r0, r0, r7
 8012484:	2864      	cmp	r0, #100	; 0x64
 8012486:	d9f7      	bls.n	8012478 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8012488:	2003      	movs	r0, #3
 801248a:	e72a      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 801248c:	4a3c      	ldr	r2, [pc, #240]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 801248e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012490:	2101      	movs	r1, #1
 8012492:	438b      	bics	r3, r1
 8012494:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012496:	f7fe fa3b 	bl	8010910 <HAL_GetTick>
 801249a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801249c:	4e38      	ldr	r6, [pc, #224]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 801249e:	2502      	movs	r5, #2
 80124a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80124a2:	421d      	tst	r5, r3
 80124a4:	d006      	beq.n	80124b4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80124a6:	f7fe fa33 	bl	8010910 <HAL_GetTick>
 80124aa:	1bc0      	subs	r0, r0, r7
 80124ac:	2864      	cmp	r0, #100	; 0x64
 80124ae:	d9f7      	bls.n	80124a0 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80124b0:	2003      	movs	r0, #3
 80124b2:	e716      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80124b4:	6823      	ldr	r3, [r4, #0]
 80124b6:	075b      	lsls	r3, r3, #29
 80124b8:	d442      	bmi.n	8012540 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80124ba:	6823      	ldr	r3, [r4, #0]
 80124bc:	06db      	lsls	r3, r3, #27
 80124be:	d512      	bpl.n	80124e6 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80124c0:	6963      	ldr	r3, [r4, #20]
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d100      	bne.n	80124c8 <HAL_RCC_OscConfig+0x250>
 80124c6:	e0ce      	b.n	8012666 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80124c8:	3305      	adds	r3, #5
 80124ca:	d000      	beq.n	80124ce <HAL_RCC_OscConfig+0x256>
 80124cc:	e0ec      	b.n	80126a8 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80124ce:	4a2c      	ldr	r2, [pc, #176]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80124d0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80124d2:	2104      	movs	r1, #4
 80124d4:	438b      	bics	r3, r1
 80124d6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80124d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80124da:	69a3      	ldr	r3, [r4, #24]
 80124dc:	00db      	lsls	r3, r3, #3
 80124de:	20f8      	movs	r0, #248	; 0xf8
 80124e0:	4381      	bics	r1, r0
 80124e2:	430b      	orrs	r3, r1
 80124e4:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80124e6:	6823      	ldr	r3, [r4, #0]
 80124e8:	069b      	lsls	r3, r3, #26
 80124ea:	d400      	bmi.n	80124ee <HAL_RCC_OscConfig+0x276>
 80124ec:	e106      	b.n	80126fc <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80124ee:	4b24      	ldr	r3, [pc, #144]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80124f0:	685a      	ldr	r2, [r3, #4]
 80124f2:	230c      	movs	r3, #12
 80124f4:	4013      	ands	r3, r2
 80124f6:	2b0c      	cmp	r3, #12
 80124f8:	d100      	bne.n	80124fc <HAL_RCC_OscConfig+0x284>
 80124fa:	e0f6      	b.n	80126ea <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80124fc:	4b20      	ldr	r3, [pc, #128]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 80124fe:	685a      	ldr	r2, [r3, #4]
 8012500:	230c      	movs	r3, #12
 8012502:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012504:	2b08      	cmp	r3, #8
 8012506:	d100      	bne.n	801250a <HAL_RCC_OscConfig+0x292>
 8012508:	e0e7      	b.n	80126da <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801250a:	69e3      	ldr	r3, [r4, #28]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d100      	bne.n	8012512 <HAL_RCC_OscConfig+0x29a>
 8012510:	e116      	b.n	8012740 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8012512:	4a1b      	ldr	r2, [pc, #108]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012514:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012516:	2380      	movs	r3, #128	; 0x80
 8012518:	025b      	lsls	r3, r3, #9
 801251a:	430b      	orrs	r3, r1
 801251c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801251e:	f7fe f9f7 	bl	8010910 <HAL_GetTick>
 8012522:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012524:	4e16      	ldr	r6, [pc, #88]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012526:	2580      	movs	r5, #128	; 0x80
 8012528:	026d      	lsls	r5, r5, #9
 801252a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801252c:	422b      	tst	r3, r5
 801252e:	d000      	beq.n	8012532 <HAL_RCC_OscConfig+0x2ba>
 8012530:	e0e4      	b.n	80126fc <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012532:	f7fe f9ed 	bl	8010910 <HAL_GetTick>
 8012536:	1bc0      	subs	r0, r0, r7
 8012538:	2864      	cmp	r0, #100	; 0x64
 801253a:	d9f6      	bls.n	801252a <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 801253c:	2003      	movs	r0, #3
 801253e:	e6d0      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012540:	4a0f      	ldr	r2, [pc, #60]	; (8012580 <HAL_RCC_OscConfig+0x308>)
 8012542:	69d1      	ldr	r1, [r2, #28]
 8012544:	2080      	movs	r0, #128	; 0x80
 8012546:	0540      	lsls	r0, r0, #21
 8012548:	4301      	orrs	r1, r0
 801254a:	61d1      	str	r1, [r2, #28]
 801254c:	69d3      	ldr	r3, [r2, #28]
 801254e:	4003      	ands	r3, r0
 8012550:	9301      	str	r3, [sp, #4]
 8012552:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012554:	4a0d      	ldr	r2, [pc, #52]	; (801258c <HAL_RCC_OscConfig+0x314>)
 8012556:	6811      	ldr	r1, [r2, #0]
 8012558:	2380      	movs	r3, #128	; 0x80
 801255a:	005b      	lsls	r3, r3, #1
 801255c:	430b      	orrs	r3, r1
 801255e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012560:	f7fe f9d6 	bl	8010910 <HAL_GetTick>
 8012564:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012566:	4e09      	ldr	r6, [pc, #36]	; (801258c <HAL_RCC_OscConfig+0x314>)
 8012568:	2580      	movs	r5, #128	; 0x80
 801256a:	006d      	lsls	r5, r5, #1
 801256c:	6833      	ldr	r3, [r6, #0]
 801256e:	422b      	tst	r3, r5
 8012570:	d10e      	bne.n	8012590 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012572:	f7fe f9cd 	bl	8010910 <HAL_GetTick>
 8012576:	1bc0      	subs	r0, r0, r7
 8012578:	2864      	cmp	r0, #100	; 0x64
 801257a:	d9f7      	bls.n	801256c <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 801257c:	2003      	movs	r0, #3
 801257e:	e6b0      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
 8012580:	40021000 	.word	0x40021000
 8012584:	fffeffff 	.word	0xfffeffff
 8012588:	fffbffff 	.word	0xfffbffff
 801258c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8012590:	4b95      	ldr	r3, [pc, #596]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012592:	6a1a      	ldr	r2, [r3, #32]
 8012594:	2101      	movs	r1, #1
 8012596:	438a      	bics	r2, r1
 8012598:	621a      	str	r2, [r3, #32]
 801259a:	6a1a      	ldr	r2, [r3, #32]
 801259c:	3103      	adds	r1, #3
 801259e:	438a      	bics	r2, r1
 80125a0:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80125a2:	f7fe f9b5 	bl	8010910 <HAL_GetTick>
 80125a6:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80125a8:	4e8f      	ldr	r6, [pc, #572]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 80125aa:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80125ac:	4f8f      	ldr	r7, [pc, #572]	; (80127ec <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80125ae:	6a33      	ldr	r3, [r6, #32]
 80125b0:	421d      	tst	r5, r3
 80125b2:	d007      	beq.n	80125c4 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80125b4:	f7fe f9ac 	bl	8010910 <HAL_GetTick>
 80125b8:	4643      	mov	r3, r8
 80125ba:	1ac0      	subs	r0, r0, r3
 80125bc:	42b8      	cmp	r0, r7
 80125be:	d9f6      	bls.n	80125ae <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 80125c0:	2003      	movs	r0, #3
 80125c2:	e68e      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80125c4:	68a3      	ldr	r3, [r4, #8]
 80125c6:	2b01      	cmp	r3, #1
 80125c8:	d00b      	beq.n	80125e2 <HAL_RCC_OscConfig+0x36a>
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d123      	bne.n	8012616 <HAL_RCC_OscConfig+0x39e>
 80125ce:	4b86      	ldr	r3, [pc, #536]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 80125d0:	6a1a      	ldr	r2, [r3, #32]
 80125d2:	2101      	movs	r1, #1
 80125d4:	438a      	bics	r2, r1
 80125d6:	621a      	str	r2, [r3, #32]
 80125d8:	6a1a      	ldr	r2, [r3, #32]
 80125da:	3103      	adds	r1, #3
 80125dc:	438a      	bics	r2, r1
 80125de:	621a      	str	r2, [r3, #32]
 80125e0:	e004      	b.n	80125ec <HAL_RCC_OscConfig+0x374>
 80125e2:	4a81      	ldr	r2, [pc, #516]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 80125e4:	6a13      	ldr	r3, [r2, #32]
 80125e6:	2101      	movs	r1, #1
 80125e8:	430b      	orrs	r3, r1
 80125ea:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80125ec:	68a3      	ldr	r3, [r4, #8]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d027      	beq.n	8012642 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80125f2:	f7fe f98d 	bl	8010910 <HAL_GetTick>
 80125f6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80125f8:	4e7b      	ldr	r6, [pc, #492]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 80125fa:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80125fc:	4f7b      	ldr	r7, [pc, #492]	; (80127ec <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80125fe:	6a33      	ldr	r3, [r6, #32]
 8012600:	421d      	tst	r5, r3
 8012602:	d000      	beq.n	8012606 <HAL_RCC_OscConfig+0x38e>
 8012604:	e759      	b.n	80124ba <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012606:	f7fe f983 	bl	8010910 <HAL_GetTick>
 801260a:	4643      	mov	r3, r8
 801260c:	1ac0      	subs	r0, r0, r3
 801260e:	42b8      	cmp	r0, r7
 8012610:	d9f5      	bls.n	80125fe <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 8012612:	2003      	movs	r0, #3
 8012614:	e665      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012616:	2b05      	cmp	r3, #5
 8012618:	d009      	beq.n	801262e <HAL_RCC_OscConfig+0x3b6>
 801261a:	4b73      	ldr	r3, [pc, #460]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 801261c:	6a1a      	ldr	r2, [r3, #32]
 801261e:	2101      	movs	r1, #1
 8012620:	438a      	bics	r2, r1
 8012622:	621a      	str	r2, [r3, #32]
 8012624:	6a1a      	ldr	r2, [r3, #32]
 8012626:	3103      	adds	r1, #3
 8012628:	438a      	bics	r2, r1
 801262a:	621a      	str	r2, [r3, #32]
 801262c:	e7de      	b.n	80125ec <HAL_RCC_OscConfig+0x374>
 801262e:	4b6e      	ldr	r3, [pc, #440]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012630:	6a1a      	ldr	r2, [r3, #32]
 8012632:	2104      	movs	r1, #4
 8012634:	430a      	orrs	r2, r1
 8012636:	621a      	str	r2, [r3, #32]
 8012638:	6a1a      	ldr	r2, [r3, #32]
 801263a:	3903      	subs	r1, #3
 801263c:	430a      	orrs	r2, r1
 801263e:	621a      	str	r2, [r3, #32]
 8012640:	e7d4      	b.n	80125ec <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012642:	f7fe f965 	bl	8010910 <HAL_GetTick>
 8012646:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012648:	4e67      	ldr	r6, [pc, #412]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 801264a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801264c:	4f67      	ldr	r7, [pc, #412]	; (80127ec <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801264e:	6a33      	ldr	r3, [r6, #32]
 8012650:	421d      	tst	r5, r3
 8012652:	d100      	bne.n	8012656 <HAL_RCC_OscConfig+0x3de>
 8012654:	e731      	b.n	80124ba <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012656:	f7fe f95b 	bl	8010910 <HAL_GetTick>
 801265a:	4643      	mov	r3, r8
 801265c:	1ac0      	subs	r0, r0, r3
 801265e:	42b8      	cmp	r0, r7
 8012660:	d9f5      	bls.n	801264e <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8012662:	2003      	movs	r0, #3
 8012664:	e63d      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012666:	4b60      	ldr	r3, [pc, #384]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801266a:	2104      	movs	r1, #4
 801266c:	430a      	orrs	r2, r1
 801266e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012672:	3903      	subs	r1, #3
 8012674:	430a      	orrs	r2, r1
 8012676:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012678:	f7fe f94a 	bl	8010910 <HAL_GetTick>
 801267c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801267e:	4e5a      	ldr	r6, [pc, #360]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012680:	2502      	movs	r5, #2
 8012682:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012684:	421d      	tst	r5, r3
 8012686:	d106      	bne.n	8012696 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012688:	f7fe f942 	bl	8010910 <HAL_GetTick>
 801268c:	1bc0      	subs	r0, r0, r7
 801268e:	2864      	cmp	r0, #100	; 0x64
 8012690:	d9f7      	bls.n	8012682 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8012692:	2003      	movs	r0, #3
 8012694:	e625      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012696:	4954      	ldr	r1, [pc, #336]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012698:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801269a:	69a3      	ldr	r3, [r4, #24]
 801269c:	00db      	lsls	r3, r3, #3
 801269e:	20f8      	movs	r0, #248	; 0xf8
 80126a0:	4382      	bics	r2, r0
 80126a2:	4313      	orrs	r3, r2
 80126a4:	634b      	str	r3, [r1, #52]	; 0x34
 80126a6:	e71e      	b.n	80124e6 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80126a8:	4b4f      	ldr	r3, [pc, #316]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 80126aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126ac:	2104      	movs	r1, #4
 80126ae:	430a      	orrs	r2, r1
 80126b0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80126b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126b4:	3903      	subs	r1, #3
 80126b6:	438a      	bics	r2, r1
 80126b8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80126ba:	f7fe f929 	bl	8010910 <HAL_GetTick>
 80126be:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80126c0:	4e49      	ldr	r6, [pc, #292]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 80126c2:	2502      	movs	r5, #2
 80126c4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80126c6:	421d      	tst	r5, r3
 80126c8:	d100      	bne.n	80126cc <HAL_RCC_OscConfig+0x454>
 80126ca:	e70c      	b.n	80124e6 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80126cc:	f7fe f920 	bl	8010910 <HAL_GetTick>
 80126d0:	1bc0      	subs	r0, r0, r7
 80126d2:	2864      	cmp	r0, #100	; 0x64
 80126d4:	d9f6      	bls.n	80126c4 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80126d6:	2003      	movs	r0, #3
 80126d8:	e603      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80126da:	4b43      	ldr	r3, [pc, #268]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	22c0      	movs	r2, #192	; 0xc0
 80126e0:	0252      	lsls	r2, r2, #9
 80126e2:	4013      	ands	r3, r2
 80126e4:	4293      	cmp	r3, r2
 80126e6:	d000      	beq.n	80126ea <HAL_RCC_OscConfig+0x472>
 80126e8:	e70f      	b.n	801250a <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80126ea:	4b3f      	ldr	r3, [pc, #252]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 80126ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126ee:	03db      	lsls	r3, r3, #15
 80126f0:	d504      	bpl.n	80126fc <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 80126f2:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80126f4:	69e3      	ldr	r3, [r4, #28]
 80126f6:	2b01      	cmp	r3, #1
 80126f8:	d000      	beq.n	80126fc <HAL_RCC_OscConfig+0x484>
 80126fa:	e5f2      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80126fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80126fe:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012700:	2b00      	cmp	r3, #0
 8012702:	d100      	bne.n	8012706 <HAL_RCC_OscConfig+0x48e>
 8012704:	e5ed      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012706:	4a38      	ldr	r2, [pc, #224]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012708:	6851      	ldr	r1, [r2, #4]
 801270a:	220c      	movs	r2, #12
 801270c:	400a      	ands	r2, r1
 801270e:	2a08      	cmp	r2, #8
 8012710:	d068      	beq.n	80127e4 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012712:	2b02      	cmp	r3, #2
 8012714:	d029      	beq.n	801276a <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8012716:	4a34      	ldr	r2, [pc, #208]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012718:	6813      	ldr	r3, [r2, #0]
 801271a:	4935      	ldr	r1, [pc, #212]	; (80127f0 <HAL_RCC_OscConfig+0x578>)
 801271c:	400b      	ands	r3, r1
 801271e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012720:	f7fe f8f6 	bl	8010910 <HAL_GetTick>
 8012724:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012726:	4d30      	ldr	r5, [pc, #192]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012728:	2480      	movs	r4, #128	; 0x80
 801272a:	04a4      	lsls	r4, r4, #18
 801272c:	682b      	ldr	r3, [r5, #0]
 801272e:	4223      	tst	r3, r4
 8012730:	d056      	beq.n	80127e0 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012732:	f7fe f8ed 	bl	8010910 <HAL_GetTick>
 8012736:	1b80      	subs	r0, r0, r6
 8012738:	2864      	cmp	r0, #100	; 0x64
 801273a:	d9f7      	bls.n	801272c <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 801273c:	2003      	movs	r0, #3
 801273e:	e5d0      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012740:	4a29      	ldr	r2, [pc, #164]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012742:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012744:	492b      	ldr	r1, [pc, #172]	; (80127f4 <HAL_RCC_OscConfig+0x57c>)
 8012746:	400b      	ands	r3, r1
 8012748:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801274a:	f7fe f8e1 	bl	8010910 <HAL_GetTick>
 801274e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012750:	4e25      	ldr	r6, [pc, #148]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012752:	2580      	movs	r5, #128	; 0x80
 8012754:	026d      	lsls	r5, r5, #9
 8012756:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012758:	422b      	tst	r3, r5
 801275a:	d0cf      	beq.n	80126fc <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801275c:	f7fe f8d8 	bl	8010910 <HAL_GetTick>
 8012760:	1bc0      	subs	r0, r0, r7
 8012762:	2864      	cmp	r0, #100	; 0x64
 8012764:	d9f7      	bls.n	8012756 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8012766:	2003      	movs	r0, #3
 8012768:	e5bb      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 801276a:	4a1f      	ldr	r2, [pc, #124]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 801276c:	6813      	ldr	r3, [r2, #0]
 801276e:	4920      	ldr	r1, [pc, #128]	; (80127f0 <HAL_RCC_OscConfig+0x578>)
 8012770:	400b      	ands	r3, r1
 8012772:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012774:	f7fe f8cc 	bl	8010910 <HAL_GetTick>
 8012778:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801277a:	4e1b      	ldr	r6, [pc, #108]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 801277c:	2580      	movs	r5, #128	; 0x80
 801277e:	04ad      	lsls	r5, r5, #18
 8012780:	6833      	ldr	r3, [r6, #0]
 8012782:	422b      	tst	r3, r5
 8012784:	d006      	beq.n	8012794 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012786:	f7fe f8c3 	bl	8010910 <HAL_GetTick>
 801278a:	1bc0      	subs	r0, r0, r7
 801278c:	2864      	cmp	r0, #100	; 0x64
 801278e:	d9f7      	bls.n	8012780 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8012790:	2003      	movs	r0, #3
 8012792:	e5a6      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012794:	4b14      	ldr	r3, [pc, #80]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 8012796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012798:	210f      	movs	r1, #15
 801279a:	438a      	bics	r2, r1
 801279c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801279e:	430a      	orrs	r2, r1
 80127a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80127a2:	6859      	ldr	r1, [r3, #4]
 80127a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80127a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80127a8:	4302      	orrs	r2, r0
 80127aa:	4813      	ldr	r0, [pc, #76]	; (80127f8 <HAL_RCC_OscConfig+0x580>)
 80127ac:	4001      	ands	r1, r0
 80127ae:	430a      	orrs	r2, r1
 80127b0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80127b2:	6819      	ldr	r1, [r3, #0]
 80127b4:	2280      	movs	r2, #128	; 0x80
 80127b6:	0452      	lsls	r2, r2, #17
 80127b8:	430a      	orrs	r2, r1
 80127ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80127bc:	f7fe f8a8 	bl	8010910 <HAL_GetTick>
 80127c0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80127c2:	4d09      	ldr	r5, [pc, #36]	; (80127e8 <HAL_RCC_OscConfig+0x570>)
 80127c4:	2480      	movs	r4, #128	; 0x80
 80127c6:	04a4      	lsls	r4, r4, #18
 80127c8:	682b      	ldr	r3, [r5, #0]
 80127ca:	4223      	tst	r3, r4
 80127cc:	d106      	bne.n	80127dc <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80127ce:	f7fe f89f 	bl	8010910 <HAL_GetTick>
 80127d2:	1b80      	subs	r0, r0, r6
 80127d4:	2864      	cmp	r0, #100	; 0x64
 80127d6:	d9f7      	bls.n	80127c8 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80127d8:	2003      	movs	r0, #3
 80127da:	e582      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80127dc:	2000      	movs	r0, #0
 80127de:	e580      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
 80127e0:	2000      	movs	r0, #0
 80127e2:	e57e      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80127e4:	2001      	movs	r0, #1
 80127e6:	e57c      	b.n	80122e2 <HAL_RCC_OscConfig+0x6a>
 80127e8:	40021000 	.word	0x40021000
 80127ec:	00001388 	.word	0x00001388
 80127f0:	feffffff 	.word	0xfeffffff
 80127f4:	fffeffff 	.word	0xfffeffff
 80127f8:	ffc27fff 	.word	0xffc27fff

080127fc <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80127fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127fe:	46ce      	mov	lr, r9
 8012800:	4647      	mov	r7, r8
 8012802:	b580      	push	{r7, lr}
 8012804:	0005      	movs	r5, r0
 8012806:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012808:	4b95      	ldr	r3, [pc, #596]	; (8012a60 <HAL_RCC_ClockConfig+0x264>)
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	2301      	movs	r3, #1
 801280e:	4013      	ands	r3, r2
 8012810:	428b      	cmp	r3, r1
 8012812:	d300      	bcc.n	8012816 <HAL_RCC_ClockConfig+0x1a>
 8012814:	e089      	b.n	801292a <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012816:	4992      	ldr	r1, [pc, #584]	; (8012a60 <HAL_RCC_ClockConfig+0x264>)
 8012818:	680b      	ldr	r3, [r1, #0]
 801281a:	2201      	movs	r2, #1
 801281c:	4393      	bics	r3, r2
 801281e:	4323      	orrs	r3, r4
 8012820:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012822:	680b      	ldr	r3, [r1, #0]
 8012824:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012826:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012828:	42a2      	cmp	r2, r4
 801282a:	d003      	beq.n	8012834 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 801282c:	bc0c      	pop	{r2, r3}
 801282e:	4690      	mov	r8, r2
 8012830:	4699      	mov	r9, r3
 8012832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012834:	682b      	ldr	r3, [r5, #0]
 8012836:	079b      	lsls	r3, r3, #30
 8012838:	d506      	bpl.n	8012848 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801283a:	4a8a      	ldr	r2, [pc, #552]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 801283c:	6853      	ldr	r3, [r2, #4]
 801283e:	21f0      	movs	r1, #240	; 0xf0
 8012840:	438b      	bics	r3, r1
 8012842:	68a9      	ldr	r1, [r5, #8]
 8012844:	430b      	orrs	r3, r1
 8012846:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012848:	682b      	ldr	r3, [r5, #0]
 801284a:	07db      	lsls	r3, r3, #31
 801284c:	d400      	bmi.n	8012850 <HAL_RCC_ClockConfig+0x54>
 801284e:	e0f7      	b.n	8012a40 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012850:	686b      	ldr	r3, [r5, #4]
 8012852:	2b01      	cmp	r3, #1
 8012854:	d009      	beq.n	801286a <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012856:	2b02      	cmp	r3, #2
 8012858:	d02b      	beq.n	80128b2 <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801285a:	2b03      	cmp	r3, #3
 801285c:	d02f      	beq.n	80128be <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801285e:	4a81      	ldr	r2, [pc, #516]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 8012860:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012862:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012864:	0792      	lsls	r2, r2, #30
 8012866:	d405      	bmi.n	8012874 <HAL_RCC_ClockConfig+0x78>
 8012868:	e7e0      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801286a:	4a7e      	ldr	r2, [pc, #504]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 801286c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801286e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012870:	0392      	lsls	r2, r2, #14
 8012872:	d5db      	bpl.n	801282c <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012874:	497b      	ldr	r1, [pc, #492]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 8012876:	684a      	ldr	r2, [r1, #4]
 8012878:	2003      	movs	r0, #3
 801287a:	4382      	bics	r2, r0
 801287c:	4313      	orrs	r3, r2
 801287e:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012880:	f7fe f846 	bl	8010910 <HAL_GetTick>
 8012884:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012886:	686b      	ldr	r3, [r5, #4]
 8012888:	2b01      	cmp	r3, #1
 801288a:	d01e      	beq.n	80128ca <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801288c:	2b02      	cmp	r3, #2
 801288e:	d02c      	beq.n	80128ea <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012890:	2b03      	cmp	r3, #3
 8012892:	d03a      	beq.n	801290a <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012894:	4f73      	ldr	r7, [pc, #460]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 8012896:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012898:	4b73      	ldr	r3, [pc, #460]	; (8012a68 <HAL_RCC_ClockConfig+0x26c>)
 801289a:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	421e      	tst	r6, r3
 80128a0:	d100      	bne.n	80128a4 <HAL_RCC_ClockConfig+0xa8>
 80128a2:	e0cd      	b.n	8012a40 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128a4:	f7fe f834 	bl	8010910 <HAL_GetTick>
 80128a8:	1b00      	subs	r0, r0, r4
 80128aa:	4540      	cmp	r0, r8
 80128ac:	d9f6      	bls.n	801289c <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 80128ae:	2003      	movs	r0, #3
 80128b0:	e7bc      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80128b2:	4a6c      	ldr	r2, [pc, #432]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 80128b4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80128b6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80128b8:	0192      	lsls	r2, r2, #6
 80128ba:	d4db      	bmi.n	8012874 <HAL_RCC_ClockConfig+0x78>
 80128bc:	e7b6      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80128be:	4a69      	ldr	r2, [pc, #420]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 80128c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80128c2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80128c4:	03d2      	lsls	r2, r2, #15
 80128c6:	d4d5      	bmi.n	8012874 <HAL_RCC_ClockConfig+0x78>
 80128c8:	e7b0      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80128ca:	4f66      	ldr	r7, [pc, #408]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 80128cc:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128ce:	4b66      	ldr	r3, [pc, #408]	; (8012a68 <HAL_RCC_ClockConfig+0x26c>)
 80128d0:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4033      	ands	r3, r6
 80128d6:	2b04      	cmp	r3, #4
 80128d8:	d100      	bne.n	80128dc <HAL_RCC_ClockConfig+0xe0>
 80128da:	e0b1      	b.n	8012a40 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128dc:	f7fe f818 	bl	8010910 <HAL_GetTick>
 80128e0:	1b00      	subs	r0, r0, r4
 80128e2:	4540      	cmp	r0, r8
 80128e4:	d9f5      	bls.n	80128d2 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 80128e6:	2003      	movs	r0, #3
 80128e8:	e7a0      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80128ea:	4f5e      	ldr	r7, [pc, #376]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 80128ec:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128ee:	4b5e      	ldr	r3, [pc, #376]	; (8012a68 <HAL_RCC_ClockConfig+0x26c>)
 80128f0:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	4033      	ands	r3, r6
 80128f6:	2b08      	cmp	r3, #8
 80128f8:	d100      	bne.n	80128fc <HAL_RCC_ClockConfig+0x100>
 80128fa:	e0a1      	b.n	8012a40 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128fc:	f7fe f808 	bl	8010910 <HAL_GetTick>
 8012900:	1b00      	subs	r0, r0, r4
 8012902:	4540      	cmp	r0, r8
 8012904:	d9f5      	bls.n	80128f2 <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8012906:	2003      	movs	r0, #3
 8012908:	e790      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801290a:	4f56      	ldr	r7, [pc, #344]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 801290c:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801290e:	4b56      	ldr	r3, [pc, #344]	; (8012a68 <HAL_RCC_ClockConfig+0x26c>)
 8012910:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4033      	ands	r3, r6
 8012916:	2b0c      	cmp	r3, #12
 8012918:	d100      	bne.n	801291c <HAL_RCC_ClockConfig+0x120>
 801291a:	e091      	b.n	8012a40 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801291c:	f7fd fff8 	bl	8010910 <HAL_GetTick>
 8012920:	1b00      	subs	r0, r0, r4
 8012922:	4540      	cmp	r0, r8
 8012924:	d9f5      	bls.n	8012912 <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 8012926:	2003      	movs	r0, #3
 8012928:	e780      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801292a:	6803      	ldr	r3, [r0, #0]
 801292c:	079b      	lsls	r3, r3, #30
 801292e:	d506      	bpl.n	801293e <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012930:	4a4c      	ldr	r2, [pc, #304]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 8012932:	6853      	ldr	r3, [r2, #4]
 8012934:	21f0      	movs	r1, #240	; 0xf0
 8012936:	438b      	bics	r3, r1
 8012938:	6881      	ldr	r1, [r0, #8]
 801293a:	430b      	orrs	r3, r1
 801293c:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801293e:	682b      	ldr	r3, [r5, #0]
 8012940:	07db      	lsls	r3, r3, #31
 8012942:	d571      	bpl.n	8012a28 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012944:	686b      	ldr	r3, [r5, #4]
 8012946:	2b01      	cmp	r3, #1
 8012948:	d009      	beq.n	801295e <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801294a:	2b02      	cmp	r3, #2
 801294c:	d02d      	beq.n	80129aa <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801294e:	2b03      	cmp	r3, #3
 8012950:	d031      	beq.n	80129b6 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012952:	4a44      	ldr	r2, [pc, #272]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 8012954:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012956:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012958:	0792      	lsls	r2, r2, #30
 801295a:	d406      	bmi.n	801296a <HAL_RCC_ClockConfig+0x16e>
 801295c:	e766      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801295e:	4a41      	ldr	r2, [pc, #260]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 8012960:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012962:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012964:	0392      	lsls	r2, r2, #14
 8012966:	d400      	bmi.n	801296a <HAL_RCC_ClockConfig+0x16e>
 8012968:	e760      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801296a:	493e      	ldr	r1, [pc, #248]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 801296c:	684a      	ldr	r2, [r1, #4]
 801296e:	2003      	movs	r0, #3
 8012970:	4382      	bics	r2, r0
 8012972:	4313      	orrs	r3, r2
 8012974:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012976:	f7fd ffcb 	bl	8010910 <HAL_GetTick>
 801297a:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801297c:	686b      	ldr	r3, [r5, #4]
 801297e:	2b01      	cmp	r3, #1
 8012980:	d01f      	beq.n	80129c2 <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012982:	2b02      	cmp	r3, #2
 8012984:	d02e      	beq.n	80129e4 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012986:	2b03      	cmp	r3, #3
 8012988:	d03d      	beq.n	8012a06 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801298a:	4b36      	ldr	r3, [pc, #216]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 801298c:	4698      	mov	r8, r3
 801298e:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012990:	4b35      	ldr	r3, [pc, #212]	; (8012a68 <HAL_RCC_ClockConfig+0x26c>)
 8012992:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012994:	4643      	mov	r3, r8
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	421f      	tst	r7, r3
 801299a:	d045      	beq.n	8012a28 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801299c:	f7fd ffb8 	bl	8010910 <HAL_GetTick>
 80129a0:	1b80      	subs	r0, r0, r6
 80129a2:	4548      	cmp	r0, r9
 80129a4:	d9f6      	bls.n	8012994 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 80129a6:	2003      	movs	r0, #3
 80129a8:	e740      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80129aa:	4a2e      	ldr	r2, [pc, #184]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 80129ac:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80129ae:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80129b0:	0192      	lsls	r2, r2, #6
 80129b2:	d4da      	bmi.n	801296a <HAL_RCC_ClockConfig+0x16e>
 80129b4:	e73a      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80129b6:	4a2b      	ldr	r2, [pc, #172]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 80129b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80129ba:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80129bc:	03d2      	lsls	r2, r2, #15
 80129be:	d4d4      	bmi.n	801296a <HAL_RCC_ClockConfig+0x16e>
 80129c0:	e734      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80129c2:	4b28      	ldr	r3, [pc, #160]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 80129c4:	4698      	mov	r8, r3
 80129c6:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129c8:	4b27      	ldr	r3, [pc, #156]	; (8012a68 <HAL_RCC_ClockConfig+0x26c>)
 80129ca:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80129cc:	4643      	mov	r3, r8
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	403b      	ands	r3, r7
 80129d2:	2b04      	cmp	r3, #4
 80129d4:	d028      	beq.n	8012a28 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129d6:	f7fd ff9b 	bl	8010910 <HAL_GetTick>
 80129da:	1b80      	subs	r0, r0, r6
 80129dc:	4548      	cmp	r0, r9
 80129de:	d9f5      	bls.n	80129cc <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 80129e0:	2003      	movs	r0, #3
 80129e2:	e723      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80129e4:	4b1f      	ldr	r3, [pc, #124]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 80129e6:	4698      	mov	r8, r3
 80129e8:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129ea:	4b1f      	ldr	r3, [pc, #124]	; (8012a68 <HAL_RCC_ClockConfig+0x26c>)
 80129ec:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80129ee:	4643      	mov	r3, r8
 80129f0:	685b      	ldr	r3, [r3, #4]
 80129f2:	403b      	ands	r3, r7
 80129f4:	2b08      	cmp	r3, #8
 80129f6:	d017      	beq.n	8012a28 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80129f8:	f7fd ff8a 	bl	8010910 <HAL_GetTick>
 80129fc:	1b80      	subs	r0, r0, r6
 80129fe:	4548      	cmp	r0, r9
 8012a00:	d9f5      	bls.n	80129ee <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 8012a02:	2003      	movs	r0, #3
 8012a04:	e712      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012a06:	4b17      	ldr	r3, [pc, #92]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 8012a08:	4698      	mov	r8, r3
 8012a0a:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a0c:	4b16      	ldr	r3, [pc, #88]	; (8012a68 <HAL_RCC_ClockConfig+0x26c>)
 8012a0e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012a10:	4643      	mov	r3, r8
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	403b      	ands	r3, r7
 8012a16:	2b0c      	cmp	r3, #12
 8012a18:	d006      	beq.n	8012a28 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012a1a:	f7fd ff79 	bl	8010910 <HAL_GetTick>
 8012a1e:	1b80      	subs	r0, r0, r6
 8012a20:	4548      	cmp	r0, r9
 8012a22:	d9f5      	bls.n	8012a10 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8012a24:	2003      	movs	r0, #3
 8012a26:	e701      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012a28:	490d      	ldr	r1, [pc, #52]	; (8012a60 <HAL_RCC_ClockConfig+0x264>)
 8012a2a:	680b      	ldr	r3, [r1, #0]
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	4393      	bics	r3, r2
 8012a30:	4323      	orrs	r3, r4
 8012a32:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012a34:	680b      	ldr	r3, [r1, #0]
 8012a36:	401a      	ands	r2, r3
      return HAL_ERROR;
 8012a38:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012a3a:	42a2      	cmp	r2, r4
 8012a3c:	d000      	beq.n	8012a40 <HAL_RCC_ClockConfig+0x244>
 8012a3e:	e6f5      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012a40:	682b      	ldr	r3, [r5, #0]
 8012a42:	075b      	lsls	r3, r3, #29
 8012a44:	d506      	bpl.n	8012a54 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012a46:	4a07      	ldr	r2, [pc, #28]	; (8012a64 <HAL_RCC_ClockConfig+0x268>)
 8012a48:	6853      	ldr	r3, [r2, #4]
 8012a4a:	4908      	ldr	r1, [pc, #32]	; (8012a6c <HAL_RCC_ClockConfig+0x270>)
 8012a4c:	400b      	ands	r3, r1
 8012a4e:	68e9      	ldr	r1, [r5, #12]
 8012a50:	430b      	orrs	r3, r1
 8012a52:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012a54:	2000      	movs	r0, #0
 8012a56:	f7fd ff31 	bl	80108bc <HAL_InitTick>
  return HAL_OK;
 8012a5a:	2000      	movs	r0, #0
 8012a5c:	e6e6      	b.n	801282c <HAL_RCC_ClockConfig+0x30>
 8012a5e:	46c0      	nop			; (mov r8, r8)
 8012a60:	40022000 	.word	0x40022000
 8012a64:	40021000 	.word	0x40021000
 8012a68:	00001388 	.word	0x00001388
 8012a6c:	fffff8ff 	.word	0xfffff8ff

08012a70 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012a70:	b530      	push	{r4, r5, lr}
 8012a72:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012a74:	aa04      	add	r2, sp, #16
 8012a76:	4b21      	ldr	r3, [pc, #132]	; (8012afc <HAL_RCC_GetSysClockFreq+0x8c>)
 8012a78:	0018      	movs	r0, r3
 8012a7a:	c832      	ldmia	r0!, {r1, r4, r5}
 8012a7c:	c232      	stmia	r2!, {r1, r4, r5}
 8012a7e:	0011      	movs	r1, r2
 8012a80:	6802      	ldr	r2, [r0, #0]
 8012a82:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012a84:	466a      	mov	r2, sp
 8012a86:	3310      	adds	r3, #16
 8012a88:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012a8a:	c213      	stmia	r2!, {r0, r1, r4}
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012a90:	4b1b      	ldr	r3, [pc, #108]	; (8012b00 <HAL_RCC_GetSysClockFreq+0x90>)
 8012a92:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012a94:	200c      	movs	r0, #12
 8012a96:	4018      	ands	r0, r3
 8012a98:	2808      	cmp	r0, #8
 8012a9a:	d00a      	beq.n	8012ab2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012a9c:	380c      	subs	r0, #12
 8012a9e:	4243      	negs	r3, r0
 8012aa0:	4158      	adcs	r0, r3
 8012aa2:	4240      	negs	r0, r0
 8012aa4:	4b17      	ldr	r3, [pc, #92]	; (8012b04 <HAL_RCC_GetSysClockFreq+0x94>)
 8012aa6:	4018      	ands	r0, r3
 8012aa8:	4b17      	ldr	r3, [pc, #92]	; (8012b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8012aaa:	469c      	mov	ip, r3
 8012aac:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8012aae:	b009      	add	sp, #36	; 0x24
 8012ab0:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8012ab2:	0c99      	lsrs	r1, r3, #18
 8012ab4:	220f      	movs	r2, #15
 8012ab6:	4011      	ands	r1, r2
 8012ab8:	a804      	add	r0, sp, #16
 8012aba:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012abc:	4910      	ldr	r1, [pc, #64]	; (8012b00 <HAL_RCC_GetSysClockFreq+0x90>)
 8012abe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012ac0:	400a      	ands	r2, r1
 8012ac2:	4669      	mov	r1, sp
 8012ac4:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012ac6:	22c0      	movs	r2, #192	; 0xc0
 8012ac8:	0252      	lsls	r2, r2, #9
 8012aca:	4013      	ands	r3, r2
 8012acc:	2280      	movs	r2, #128	; 0x80
 8012ace:	0252      	lsls	r2, r2, #9
 8012ad0:	4293      	cmp	r3, r2
 8012ad2:	d008      	beq.n	8012ae6 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8012ad4:	22c0      	movs	r2, #192	; 0xc0
 8012ad6:	0252      	lsls	r2, r2, #9
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	d009      	beq.n	8012af0 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012adc:	480a      	ldr	r0, [pc, #40]	; (8012b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8012ade:	f7ed fb37 	bl	8000150 <__udivsi3>
 8012ae2:	4360      	muls	r0, r4
 8012ae4:	e7e3      	b.n	8012aae <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8012ae6:	4808      	ldr	r0, [pc, #32]	; (8012b08 <HAL_RCC_GetSysClockFreq+0x98>)
 8012ae8:	f7ed fb32 	bl	8000150 <__udivsi3>
 8012aec:	4360      	muls	r0, r4
 8012aee:	e7de      	b.n	8012aae <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8012af0:	4806      	ldr	r0, [pc, #24]	; (8012b0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8012af2:	f7ed fb2d 	bl	8000150 <__udivsi3>
 8012af6:	4360      	muls	r0, r4
 8012af8:	e7d9      	b.n	8012aae <HAL_RCC_GetSysClockFreq+0x3e>
 8012afa:	46c0      	nop			; (mov r8, r8)
 8012afc:	08018b24 	.word	0x08018b24
 8012b00:	40021000 	.word	0x40021000
 8012b04:	02625a00 	.word	0x02625a00
 8012b08:	007a1200 	.word	0x007a1200
 8012b0c:	02dc6c00 	.word	0x02dc6c00

08012b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012b10:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012b12:	f7ff ffad 	bl	8012a70 <HAL_RCC_GetSysClockFreq>
 8012b16:	4b05      	ldr	r3, [pc, #20]	; (8012b2c <HAL_RCC_GetHCLKFreq+0x1c>)
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	061b      	lsls	r3, r3, #24
 8012b1c:	0f1b      	lsrs	r3, r3, #28
 8012b1e:	4a04      	ldr	r2, [pc, #16]	; (8012b30 <HAL_RCC_GetHCLKFreq+0x20>)
 8012b20:	5cd3      	ldrb	r3, [r2, r3]
 8012b22:	40d8      	lsrs	r0, r3
 8012b24:	4b03      	ldr	r3, [pc, #12]	; (8012b34 <HAL_RCC_GetHCLKFreq+0x24>)
 8012b26:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012b28:	bd10      	pop	{r4, pc}
 8012b2a:	46c0      	nop			; (mov r8, r8)
 8012b2c:	40021000 	.word	0x40021000
 8012b30:	0801ba78 	.word	0x0801ba78
 8012b34:	200000dc 	.word	0x200000dc

08012b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012b38:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012b3a:	f7ff ffe9 	bl	8012b10 <HAL_RCC_GetHCLKFreq>
 8012b3e:	4b04      	ldr	r3, [pc, #16]	; (8012b50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	055b      	lsls	r3, r3, #21
 8012b44:	0f5b      	lsrs	r3, r3, #29
 8012b46:	4a03      	ldr	r2, [pc, #12]	; (8012b54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012b48:	5cd3      	ldrb	r3, [r2, r3]
 8012b4a:	40d8      	lsrs	r0, r3
}    
 8012b4c:	bd10      	pop	{r4, pc}
 8012b4e:	46c0      	nop			; (mov r8, r8)
 8012b50:	40021000 	.word	0x40021000
 8012b54:	0801ba78 	.word	0x0801ba78

08012b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b5a:	46c6      	mov	lr, r8
 8012b5c:	b500      	push	{lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012b62:	6803      	ldr	r3, [r0, #0]
 8012b64:	03db      	lsls	r3, r3, #15
 8012b66:	d507      	bpl.n	8012b78 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012b68:	4b43      	ldr	r3, [pc, #268]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012b6a:	6a1b      	ldr	r3, [r3, #32]
 8012b6c:	6842      	ldr	r2, [r0, #4]
 8012b6e:	4053      	eors	r3, r2
 8012b70:	22c0      	movs	r2, #192	; 0xc0
 8012b72:	0092      	lsls	r2, r2, #2
 8012b74:	4213      	tst	r3, r2
 8012b76:	d136      	bne.n	8012be6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012b78:	6823      	ldr	r3, [r4, #0]
 8012b7a:	07db      	lsls	r3, r3, #31
 8012b7c:	d506      	bpl.n	8012b8c <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012b7e:	4a3e      	ldr	r2, [pc, #248]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012b80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012b82:	2103      	movs	r1, #3
 8012b84:	438b      	bics	r3, r1
 8012b86:	68a1      	ldr	r1, [r4, #8]
 8012b88:	430b      	orrs	r3, r1
 8012b8a:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012b8c:	6823      	ldr	r3, [r4, #0]
 8012b8e:	079b      	lsls	r3, r3, #30
 8012b90:	d506      	bpl.n	8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012b92:	4a39      	ldr	r2, [pc, #228]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012b94:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012b96:	4939      	ldr	r1, [pc, #228]	; (8012c7c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012b98:	400b      	ands	r3, r1
 8012b9a:	68e1      	ldr	r1, [r4, #12]
 8012b9c:	430b      	orrs	r3, r1
 8012b9e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012ba0:	6823      	ldr	r3, [r4, #0]
 8012ba2:	035b      	lsls	r3, r3, #13
 8012ba4:	d506      	bpl.n	8012bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012ba6:	4a34      	ldr	r2, [pc, #208]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012ba8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012baa:	4935      	ldr	r1, [pc, #212]	; (8012c80 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012bac:	400b      	ands	r3, r1
 8012bae:	6921      	ldr	r1, [r4, #16]
 8012bb0:	430b      	orrs	r3, r1
 8012bb2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012bb4:	6823      	ldr	r3, [r4, #0]
 8012bb6:	069b      	lsls	r3, r3, #26
 8012bb8:	d506      	bpl.n	8012bc8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012bba:	4a2f      	ldr	r2, [pc, #188]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012bbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012bbe:	2110      	movs	r1, #16
 8012bc0:	438b      	bics	r3, r1
 8012bc2:	6961      	ldr	r1, [r4, #20]
 8012bc4:	430b      	orrs	r3, r1
 8012bc6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012bc8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012bca:	6823      	ldr	r3, [r4, #0]
 8012bcc:	055b      	lsls	r3, r3, #21
 8012bce:	d506      	bpl.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012bd0:	4a29      	ldr	r2, [pc, #164]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012bd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012bd4:	2140      	movs	r1, #64	; 0x40
 8012bd6:	438b      	bics	r3, r1
 8012bd8:	69a1      	ldr	r1, [r4, #24]
 8012bda:	430b      	orrs	r3, r1
 8012bdc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8012bde:	b002      	add	sp, #8
 8012be0:	bc04      	pop	{r2}
 8012be2:	4690      	mov	r8, r2
 8012be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8012be6:	4a24      	ldr	r2, [pc, #144]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012be8:	69d1      	ldr	r1, [r2, #28]
 8012bea:	2080      	movs	r0, #128	; 0x80
 8012bec:	0540      	lsls	r0, r0, #21
 8012bee:	4301      	orrs	r1, r0
 8012bf0:	61d1      	str	r1, [r2, #28]
 8012bf2:	69d3      	ldr	r3, [r2, #28]
 8012bf4:	4003      	ands	r3, r0
 8012bf6:	9301      	str	r3, [sp, #4]
 8012bf8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012bfa:	4a22      	ldr	r2, [pc, #136]	; (8012c84 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012bfc:	6811      	ldr	r1, [r2, #0]
 8012bfe:	2380      	movs	r3, #128	; 0x80
 8012c00:	005b      	lsls	r3, r3, #1
 8012c02:	430b      	orrs	r3, r1
 8012c04:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012c06:	f7fd fe83 	bl	8010910 <HAL_GetTick>
 8012c0a:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012c0c:	4e1d      	ldr	r6, [pc, #116]	; (8012c84 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012c0e:	2580      	movs	r5, #128	; 0x80
 8012c10:	006d      	lsls	r5, r5, #1
 8012c12:	6833      	ldr	r3, [r6, #0]
 8012c14:	422b      	tst	r3, r5
 8012c16:	d106      	bne.n	8012c26 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012c18:	f7fd fe7a 	bl	8010910 <HAL_GetTick>
 8012c1c:	1bc0      	subs	r0, r0, r7
 8012c1e:	2864      	cmp	r0, #100	; 0x64
 8012c20:	d9f7      	bls.n	8012c12 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8012c22:	2003      	movs	r0, #3
 8012c24:	e7db      	b.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012c26:	4b14      	ldr	r3, [pc, #80]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c28:	6a18      	ldr	r0, [r3, #32]
 8012c2a:	4a17      	ldr	r2, [pc, #92]	; (8012c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012c2c:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8012c2e:	6a1d      	ldr	r5, [r3, #32]
 8012c30:	2180      	movs	r1, #128	; 0x80
 8012c32:	0249      	lsls	r1, r1, #9
 8012c34:	4329      	orrs	r1, r5
 8012c36:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012c38:	6a19      	ldr	r1, [r3, #32]
 8012c3a:	4d14      	ldr	r5, [pc, #80]	; (8012c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012c3c:	4029      	ands	r1, r5
 8012c3e:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012c40:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012c42:	0783      	lsls	r3, r0, #30
 8012c44:	d407      	bmi.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012c46:	4a0c      	ldr	r2, [pc, #48]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c48:	6a13      	ldr	r3, [r2, #32]
 8012c4a:	490f      	ldr	r1, [pc, #60]	; (8012c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012c4c:	400b      	ands	r3, r1
 8012c4e:	6861      	ldr	r1, [r4, #4]
 8012c50:	430b      	orrs	r3, r1
 8012c52:	6213      	str	r3, [r2, #32]
 8012c54:	e790      	b.n	8012b78 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8012c56:	f7fd fe5b 	bl	8010910 <HAL_GetTick>
 8012c5a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c5c:	4e06      	ldr	r6, [pc, #24]	; (8012c78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012c5e:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012c60:	4f0b      	ldr	r7, [pc, #44]	; (8012c90 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c62:	6a33      	ldr	r3, [r6, #32]
 8012c64:	421d      	tst	r5, r3
 8012c66:	d1ee      	bne.n	8012c46 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012c68:	f7fd fe52 	bl	8010910 <HAL_GetTick>
 8012c6c:	4643      	mov	r3, r8
 8012c6e:	1ac0      	subs	r0, r0, r3
 8012c70:	42b8      	cmp	r0, r7
 8012c72:	d9f6      	bls.n	8012c62 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8012c74:	2003      	movs	r0, #3
 8012c76:	e7b2      	b.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0x86>
 8012c78:	40021000 	.word	0x40021000
 8012c7c:	fffcffff 	.word	0xfffcffff
 8012c80:	fff3ffff 	.word	0xfff3ffff
 8012c84:	40007000 	.word	0x40007000
 8012c88:	fffffcff 	.word	0xfffffcff
 8012c8c:	fffeffff 	.word	0xfffeffff
 8012c90:	00001388 	.word	0x00001388

08012c94 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012c94:	4770      	bx	lr

08012c96 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c98:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012c9a:	6802      	ldr	r2, [r0, #0]
 8012c9c:	68d3      	ldr	r3, [r2, #12]
 8012c9e:	21a0      	movs	r1, #160	; 0xa0
 8012ca0:	438b      	bics	r3, r1
 8012ca2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012ca4:	f7fd fe34 	bl	8010910 <HAL_GetTick>
 8012ca8:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012caa:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012cac:	26fa      	movs	r6, #250	; 0xfa
 8012cae:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012cb0:	6823      	ldr	r3, [r4, #0]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	421d      	tst	r5, r3
 8012cb6:	d106      	bne.n	8012cc6 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012cb8:	f7fd fe2a 	bl	8010910 <HAL_GetTick>
 8012cbc:	1bc0      	subs	r0, r0, r7
 8012cbe:	42b0      	cmp	r0, r6
 8012cc0:	d9f6      	bls.n	8012cb0 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8012cc2:	2003      	movs	r0, #3
 8012cc4:	e000      	b.n	8012cc8 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8012cc6:	2000      	movs	r0, #0
}
 8012cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012cca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ccc:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012cce:	6803      	ldr	r3, [r0, #0]
 8012cd0:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012cd2:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012cd4:	0652      	lsls	r2, r2, #25
 8012cd6:	d500      	bpl.n	8012cda <RTC_EnterInitMode+0x10>
}
 8012cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012cda:	2201      	movs	r2, #1
 8012cdc:	4252      	negs	r2, r2
 8012cde:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012ce0:	f7fd fe16 	bl	8010910 <HAL_GetTick>
 8012ce4:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012ce6:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012ce8:	26fa      	movs	r6, #250	; 0xfa
 8012cea:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012cec:	6823      	ldr	r3, [r4, #0]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	421d      	tst	r5, r3
 8012cf2:	d106      	bne.n	8012d02 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012cf4:	f7fd fe0c 	bl	8010910 <HAL_GetTick>
 8012cf8:	1bc0      	subs	r0, r0, r7
 8012cfa:	42b0      	cmp	r0, r6
 8012cfc:	d9f6      	bls.n	8012cec <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8012cfe:	2003      	movs	r0, #3
 8012d00:	e7ea      	b.n	8012cd8 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012d02:	2000      	movs	r0, #0
 8012d04:	e7e8      	b.n	8012cd8 <RTC_EnterInitMode+0xe>
	...

08012d08 <HAL_RTC_Init>:
{
 8012d08:	b570      	push	{r4, r5, r6, lr}
 8012d0a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012d0c:	d046      	beq.n	8012d9c <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012d0e:	7f43      	ldrb	r3, [r0, #29]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d038      	beq.n	8012d86 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012d14:	2302      	movs	r3, #2
 8012d16:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012d18:	6823      	ldr	r3, [r4, #0]
 8012d1a:	22ca      	movs	r2, #202	; 0xca
 8012d1c:	625a      	str	r2, [r3, #36]	; 0x24
 8012d1e:	6823      	ldr	r3, [r4, #0]
 8012d20:	3a77      	subs	r2, #119	; 0x77
 8012d22:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012d24:	0020      	movs	r0, r4
 8012d26:	f7ff ffd0 	bl	8012cca <RTC_EnterInitMode>
 8012d2a:	2800      	cmp	r0, #0
 8012d2c:	d12f      	bne.n	8012d8e <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012d2e:	6822      	ldr	r2, [r4, #0]
 8012d30:	6893      	ldr	r3, [r2, #8]
 8012d32:	491b      	ldr	r1, [pc, #108]	; (8012da0 <HAL_RTC_Init+0x98>)
 8012d34:	400b      	ands	r3, r1
 8012d36:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012d38:	6822      	ldr	r2, [r4, #0]
 8012d3a:	6891      	ldr	r1, [r2, #8]
 8012d3c:	6863      	ldr	r3, [r4, #4]
 8012d3e:	6925      	ldr	r5, [r4, #16]
 8012d40:	432b      	orrs	r3, r5
 8012d42:	6965      	ldr	r5, [r4, #20]
 8012d44:	432b      	orrs	r3, r5
 8012d46:	430b      	orrs	r3, r1
 8012d48:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012d4a:	6823      	ldr	r3, [r4, #0]
 8012d4c:	68e2      	ldr	r2, [r4, #12]
 8012d4e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012d50:	6822      	ldr	r2, [r4, #0]
 8012d52:	6911      	ldr	r1, [r2, #16]
 8012d54:	68a3      	ldr	r3, [r4, #8]
 8012d56:	041b      	lsls	r3, r3, #16
 8012d58:	430b      	orrs	r3, r1
 8012d5a:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012d5c:	6822      	ldr	r2, [r4, #0]
 8012d5e:	68d3      	ldr	r3, [r2, #12]
 8012d60:	2180      	movs	r1, #128	; 0x80
 8012d62:	438b      	bics	r3, r1
 8012d64:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012d66:	6822      	ldr	r2, [r4, #0]
 8012d68:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012d6a:	490e      	ldr	r1, [pc, #56]	; (8012da4 <HAL_RTC_Init+0x9c>)
 8012d6c:	400b      	ands	r3, r1
 8012d6e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012d70:	6822      	ldr	r2, [r4, #0]
 8012d72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012d74:	69a1      	ldr	r1, [r4, #24]
 8012d76:	430b      	orrs	r3, r1
 8012d78:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012d7a:	6823      	ldr	r3, [r4, #0]
 8012d7c:	22ff      	movs	r2, #255	; 0xff
 8012d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012d80:	2301      	movs	r3, #1
 8012d82:	7763      	strb	r3, [r4, #29]
}
 8012d84:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012d86:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012d88:	f7ff ff84 	bl	8012c94 <HAL_RTC_MspInit>
 8012d8c:	e7c2      	b.n	8012d14 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012d8e:	6823      	ldr	r3, [r4, #0]
 8012d90:	22ff      	movs	r2, #255	; 0xff
 8012d92:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012d94:	2304      	movs	r3, #4
 8012d96:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012d98:	2001      	movs	r0, #1
 8012d9a:	e7f3      	b.n	8012d84 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8012d9c:	2001      	movs	r0, #1
 8012d9e:	e7f1      	b.n	8012d84 <HAL_RTC_Init+0x7c>
 8012da0:	ff8fffbf 	.word	0xff8fffbf
 8012da4:	fffbffff 	.word	0xfffbffff

08012da8 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8012da8:	2809      	cmp	r0, #9
 8012daa:	d909      	bls.n	8012dc0 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8012dac:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8012dae:	3301      	adds	r3, #1
    Value -= 10;
 8012db0:	380a      	subs	r0, #10
 8012db2:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012db4:	2809      	cmp	r0, #9
 8012db6:	d8fa      	bhi.n	8012dae <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012db8:	011b      	lsls	r3, r3, #4
 8012dba:	4318      	orrs	r0, r3
 8012dbc:	b2c0      	uxtb	r0, r0
}
 8012dbe:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	e7f9      	b.n	8012db8 <RTC_ByteToBcd2+0x10>

08012dc4 <HAL_RTC_SetTime>:
{
 8012dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dc6:	46c6      	mov	lr, r8
 8012dc8:	b500      	push	{lr}
 8012dca:	0004      	movs	r4, r0
 8012dcc:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012dce:	7f03      	ldrb	r3, [r0, #28]
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	d100      	bne.n	8012dd6 <HAL_RTC_SetTime+0x12>
 8012dd4:	e075      	b.n	8012ec2 <HAL_RTC_SetTime+0xfe>
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012dda:	3301      	adds	r3, #1
 8012ddc:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012dde:	2a00      	cmp	r2, #0
 8012de0:	d144      	bne.n	8012e6c <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012de2:	6803      	ldr	r3, [r0, #0]
 8012de4:	689b      	ldr	r3, [r3, #8]
 8012de6:	065b      	lsls	r3, r3, #25
 8012de8:	d401      	bmi.n	8012dee <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8012dea:	2300      	movs	r3, #0
 8012dec:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012dee:	7830      	ldrb	r0, [r6, #0]
 8012df0:	f7ff ffda 	bl	8012da8 <RTC_ByteToBcd2>
 8012df4:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012df6:	7870      	ldrb	r0, [r6, #1]
 8012df8:	f7ff ffd6 	bl	8012da8 <RTC_ByteToBcd2>
 8012dfc:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012dfe:	78b0      	ldrb	r0, [r6, #2]
 8012e00:	f7ff ffd2 	bl	8012da8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012e04:	7a35      	ldrb	r5, [r6, #8]
 8012e06:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012e08:	4305      	orrs	r5, r0
 8012e0a:	4643      	mov	r3, r8
 8012e0c:	0418      	lsls	r0, r3, #16
 8012e0e:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012e10:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012e12:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012e14:	6823      	ldr	r3, [r4, #0]
 8012e16:	22ca      	movs	r2, #202	; 0xca
 8012e18:	625a      	str	r2, [r3, #36]	; 0x24
 8012e1a:	6823      	ldr	r3, [r4, #0]
 8012e1c:	3a77      	subs	r2, #119	; 0x77
 8012e1e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012e20:	0020      	movs	r0, r4
 8012e22:	f7ff ff52 	bl	8012cca <RTC_EnterInitMode>
 8012e26:	1e07      	subs	r7, r0, #0
 8012e28:	d131      	bne.n	8012e8e <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012e2a:	6823      	ldr	r3, [r4, #0]
 8012e2c:	4826      	ldr	r0, [pc, #152]	; (8012ec8 <HAL_RTC_SetTime+0x104>)
 8012e2e:	4005      	ands	r5, r0
 8012e30:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012e32:	6822      	ldr	r2, [r4, #0]
 8012e34:	6893      	ldr	r3, [r2, #8]
 8012e36:	4925      	ldr	r1, [pc, #148]	; (8012ecc <HAL_RTC_SetTime+0x108>)
 8012e38:	400b      	ands	r3, r1
 8012e3a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012e3c:	6822      	ldr	r2, [r4, #0]
 8012e3e:	6891      	ldr	r1, [r2, #8]
 8012e40:	68f3      	ldr	r3, [r6, #12]
 8012e42:	6930      	ldr	r0, [r6, #16]
 8012e44:	4303      	orrs	r3, r0
 8012e46:	430b      	orrs	r3, r1
 8012e48:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012e4a:	6822      	ldr	r2, [r4, #0]
 8012e4c:	68d3      	ldr	r3, [r2, #12]
 8012e4e:	2180      	movs	r1, #128	; 0x80
 8012e50:	438b      	bics	r3, r1
 8012e52:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012e54:	6823      	ldr	r3, [r4, #0]
 8012e56:	689b      	ldr	r3, [r3, #8]
 8012e58:	069b      	lsls	r3, r3, #26
 8012e5a:	d524      	bpl.n	8012ea6 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012e5c:	6823      	ldr	r3, [r4, #0]
 8012e5e:	22ff      	movs	r2, #255	; 0xff
 8012e60:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012e62:	2301      	movs	r3, #1
 8012e64:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012e66:	2300      	movs	r3, #0
 8012e68:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8012e6a:	e018      	b.n	8012e9e <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012e6c:	6803      	ldr	r3, [r0, #0]
 8012e6e:	689b      	ldr	r3, [r3, #8]
 8012e70:	065b      	lsls	r3, r3, #25
 8012e72:	d401      	bmi.n	8012e78 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8012e74:	2300      	movs	r3, #0
 8012e76:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012e78:	7835      	ldrb	r5, [r6, #0]
 8012e7a:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012e7c:	7870      	ldrb	r0, [r6, #1]
 8012e7e:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012e80:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012e82:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012e84:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012e86:	7a30      	ldrb	r0, [r6, #8]
 8012e88:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012e8a:	4305      	orrs	r5, r0
 8012e8c:	e7c2      	b.n	8012e14 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012e8e:	6823      	ldr	r3, [r4, #0]
 8012e90:	22ff      	movs	r2, #255	; 0xff
 8012e92:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012e94:	2304      	movs	r3, #4
 8012e96:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012e98:	2300      	movs	r3, #0
 8012e9a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012e9c:	2701      	movs	r7, #1
}
 8012e9e:	0038      	movs	r0, r7
 8012ea0:	bc04      	pop	{r2}
 8012ea2:	4690      	mov	r8, r2
 8012ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012ea6:	0020      	movs	r0, r4
 8012ea8:	f7ff fef5 	bl	8012c96 <HAL_RTC_WaitForSynchro>
 8012eac:	2800      	cmp	r0, #0
 8012eae:	d0d5      	beq.n	8012e5c <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012eb0:	6823      	ldr	r3, [r4, #0]
 8012eb2:	22ff      	movs	r2, #255	; 0xff
 8012eb4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012eb6:	2304      	movs	r3, #4
 8012eb8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012eba:	2300      	movs	r3, #0
 8012ebc:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012ebe:	2701      	movs	r7, #1
 8012ec0:	e7ed      	b.n	8012e9e <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8012ec2:	2702      	movs	r7, #2
 8012ec4:	e7eb      	b.n	8012e9e <HAL_RTC_SetTime+0xda>
 8012ec6:	46c0      	nop			; (mov r8, r8)
 8012ec8:	007f7f7f 	.word	0x007f7f7f
 8012ecc:	fffbffff 	.word	0xfffbffff

08012ed0 <HAL_RTC_SetDate>:
{
 8012ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ed2:	46c6      	mov	lr, r8
 8012ed4:	b500      	push	{lr}
 8012ed6:	0004      	movs	r4, r0
 8012ed8:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012eda:	7f03      	ldrb	r3, [r0, #28]
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	d03a      	beq.n	8012f56 <HAL_RTC_SetDate+0x86>
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012ee8:	2a00      	cmp	r2, #0
 8012eea:	d136      	bne.n	8012f5a <HAL_RTC_SetDate+0x8a>
 8012eec:	784b      	ldrb	r3, [r1, #1]
 8012eee:	06da      	lsls	r2, r3, #27
 8012ef0:	d503      	bpl.n	8012efa <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012ef2:	2210      	movs	r2, #16
 8012ef4:	4393      	bics	r3, r2
 8012ef6:	330a      	adds	r3, #10
 8012ef8:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012efa:	78f0      	ldrb	r0, [r6, #3]
 8012efc:	f7ff ff54 	bl	8012da8 <RTC_ByteToBcd2>
 8012f00:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012f02:	7870      	ldrb	r0, [r6, #1]
 8012f04:	f7ff ff50 	bl	8012da8 <RTC_ByteToBcd2>
 8012f08:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012f0a:	78b0      	ldrb	r0, [r6, #2]
 8012f0c:	f7ff ff4c 	bl	8012da8 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012f10:	7835      	ldrb	r5, [r6, #0]
 8012f12:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012f14:	4305      	orrs	r5, r0
 8012f16:	4643      	mov	r3, r8
 8012f18:	0418      	lsls	r0, r3, #16
 8012f1a:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012f1c:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012f1e:	433d      	orrs	r5, r7
 8012f20:	e025      	b.n	8012f6e <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012f22:	6823      	ldr	r3, [r4, #0]
 8012f24:	22ff      	movs	r2, #255	; 0xff
 8012f26:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012f28:	2304      	movs	r3, #4
 8012f2a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012f30:	2601      	movs	r6, #1
}
 8012f32:	0030      	movs	r0, r6
 8012f34:	bc04      	pop	{r2}
 8012f36:	4690      	mov	r8, r2
 8012f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012f3a:	0020      	movs	r0, r4
 8012f3c:	f7ff feab 	bl	8012c96 <HAL_RTC_WaitForSynchro>
 8012f40:	2800      	cmp	r0, #0
 8012f42:	d02c      	beq.n	8012f9e <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012f44:	6823      	ldr	r3, [r4, #0]
 8012f46:	22ff      	movs	r2, #255	; 0xff
 8012f48:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012f4a:	2304      	movs	r3, #4
 8012f4c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012f4e:	2300      	movs	r3, #0
 8012f50:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012f52:	2601      	movs	r6, #1
 8012f54:	e7ed      	b.n	8012f32 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8012f56:	2602      	movs	r6, #2
 8012f58:	e7eb      	b.n	8012f32 <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012f5a:	78cd      	ldrb	r5, [r1, #3]
 8012f5c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012f5e:	7848      	ldrb	r0, [r1, #1]
 8012f60:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012f62:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8012f64:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8012f66:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012f68:	7808      	ldrb	r0, [r1, #0]
 8012f6a:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012f6c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012f6e:	6823      	ldr	r3, [r4, #0]
 8012f70:	22ca      	movs	r2, #202	; 0xca
 8012f72:	625a      	str	r2, [r3, #36]	; 0x24
 8012f74:	6823      	ldr	r3, [r4, #0]
 8012f76:	3a77      	subs	r2, #119	; 0x77
 8012f78:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012f7a:	0020      	movs	r0, r4
 8012f7c:	f7ff fea5 	bl	8012cca <RTC_EnterInitMode>
 8012f80:	1e06      	subs	r6, r0, #0
 8012f82:	d1ce      	bne.n	8012f22 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012f84:	6823      	ldr	r3, [r4, #0]
 8012f86:	480a      	ldr	r0, [pc, #40]	; (8012fb0 <HAL_RTC_SetDate+0xe0>)
 8012f88:	4005      	ands	r5, r0
 8012f8a:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012f8c:	6822      	ldr	r2, [r4, #0]
 8012f8e:	68d3      	ldr	r3, [r2, #12]
 8012f90:	2180      	movs	r1, #128	; 0x80
 8012f92:	438b      	bics	r3, r1
 8012f94:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012f96:	6823      	ldr	r3, [r4, #0]
 8012f98:	689b      	ldr	r3, [r3, #8]
 8012f9a:	069b      	lsls	r3, r3, #26
 8012f9c:	d5cd      	bpl.n	8012f3a <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012f9e:	6823      	ldr	r3, [r4, #0]
 8012fa0:	22ff      	movs	r2, #255	; 0xff
 8012fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012fa8:	2300      	movs	r3, #0
 8012faa:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8012fac:	e7c1      	b.n	8012f32 <HAL_RTC_SetDate+0x62>
 8012fae:	46c0      	nop			; (mov r8, r8)
 8012fb0:	00ffff3f 	.word	0x00ffff3f

08012fb4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012fb4:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012fb6:	0900      	lsrs	r0, r0, #4
 8012fb8:	0083      	lsls	r3, r0, #2
 8012fba:	181b      	adds	r3, r3, r0
 8012fbc:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012fbe:	200f      	movs	r0, #15
 8012fc0:	4010      	ands	r0, r2
 8012fc2:	1818      	adds	r0, r3, r0
 8012fc4:	b2c0      	uxtb	r0, r0
}
 8012fc6:	4770      	bx	lr

08012fc8 <HAL_RTC_GetTime>:
{
 8012fc8:	b570      	push	{r4, r5, r6, lr}
 8012fca:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012fcc:	6803      	ldr	r3, [r0, #0]
 8012fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fd0:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012fd2:	6803      	ldr	r3, [r0, #0]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	490e      	ldr	r1, [pc, #56]	; (8013010 <HAL_RTC_GetTime+0x48>)
 8012fd8:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012fda:	0c19      	lsrs	r1, r3, #16
 8012fdc:	203f      	movs	r0, #63	; 0x3f
 8012fde:	4008      	ands	r0, r1
 8012fe0:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012fe2:	0a1e      	lsrs	r6, r3, #8
 8012fe4:	b2f6      	uxtb	r6, r6
 8012fe6:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012fe8:	b2dc      	uxtb	r4, r3
 8012fea:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012fec:	2340      	movs	r3, #64	; 0x40
 8012fee:	400b      	ands	r3, r1
 8012ff0:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8012ff2:	2a00      	cmp	r2, #0
 8012ff4:	d10a      	bne.n	801300c <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012ff6:	f7ff ffdd 	bl	8012fb4 <RTC_Bcd2ToByte>
 8012ffa:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012ffc:	0030      	movs	r0, r6
 8012ffe:	f7ff ffd9 	bl	8012fb4 <RTC_Bcd2ToByte>
 8013002:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8013004:	0020      	movs	r0, r4
 8013006:	f7ff ffd5 	bl	8012fb4 <RTC_Bcd2ToByte>
 801300a:	70a8      	strb	r0, [r5, #2]
}
 801300c:	2000      	movs	r0, #0
 801300e:	bd70      	pop	{r4, r5, r6, pc}
 8013010:	007f7f7f 	.word	0x007f7f7f

08013014 <HAL_RTC_GetDate>:
{
 8013014:	b570      	push	{r4, r5, r6, lr}
 8013016:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8013018:	6803      	ldr	r3, [r0, #0]
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	490d      	ldr	r1, [pc, #52]	; (8013054 <HAL_RTC_GetDate+0x40>)
 801301e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8013020:	0c18      	lsrs	r0, r3, #16
 8013022:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8013024:	04dd      	lsls	r5, r3, #19
 8013026:	0eed      	lsrs	r5, r5, #27
 8013028:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801302a:	b2de      	uxtb	r6, r3
 801302c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801302e:	041b      	lsls	r3, r3, #16
 8013030:	0f5b      	lsrs	r3, r3, #29
 8013032:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8013034:	2a00      	cmp	r2, #0
 8013036:	d10a      	bne.n	801304e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013038:	f7ff ffbc 	bl	8012fb4 <RTC_Bcd2ToByte>
 801303c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801303e:	0028      	movs	r0, r5
 8013040:	f7ff ffb8 	bl	8012fb4 <RTC_Bcd2ToByte>
 8013044:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8013046:	0030      	movs	r0, r6
 8013048:	f7ff ffb4 	bl	8012fb4 <RTC_Bcd2ToByte>
 801304c:	70a0      	strb	r0, [r4, #2]
}
 801304e:	2000      	movs	r0, #0
 8013050:	bd70      	pop	{r4, r5, r6, pc}
 8013052:	46c0      	nop			; (mov r8, r8)
 8013054:	00ffff3f 	.word	0x00ffff3f

08013058 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013058:	6803      	ldr	r3, [r0, #0]
 801305a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801305c:	0089      	lsls	r1, r1, #2
 801305e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8013060:	600a      	str	r2, [r1, #0]
}
 8013062:	4770      	bx	lr

08013064 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013064:	6803      	ldr	r3, [r0, #0]
 8013066:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013068:	0089      	lsls	r1, r1, #2
 801306a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801306c:	6808      	ldr	r0, [r1, #0]
}
 801306e:	4770      	bx	lr

08013070 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013070:	4770      	bx	lr

08013072 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8013072:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8013074:	2239      	movs	r2, #57	; 0x39
 8013076:	2302      	movs	r3, #2
 8013078:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801307a:	6804      	ldr	r4, [r0, #0]
 801307c:	6823      	ldr	r3, [r4, #0]
 801307e:	2101      	movs	r1, #1
 8013080:	430b      	orrs	r3, r1
 8013082:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8013084:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8013086:	2000      	movs	r0, #0
 8013088:	bd10      	pop	{r4, pc}
	...

0801308c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 801308c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801308e:	4a36      	ldr	r2, [pc, #216]	; (8013168 <TIM_Base_SetConfig+0xdc>)
 8013090:	4290      	cmp	r0, r2
 8013092:	d022      	beq.n	80130da <TIM_Base_SetConfig+0x4e>
 8013094:	2280      	movs	r2, #128	; 0x80
 8013096:	05d2      	lsls	r2, r2, #23
 8013098:	4290      	cmp	r0, r2
 801309a:	d014      	beq.n	80130c6 <TIM_Base_SetConfig+0x3a>
 801309c:	4a33      	ldr	r2, [pc, #204]	; (801316c <TIM_Base_SetConfig+0xe0>)
 801309e:	4290      	cmp	r0, r2
 80130a0:	d016      	beq.n	80130d0 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80130a2:	4a33      	ldr	r2, [pc, #204]	; (8013170 <TIM_Base_SetConfig+0xe4>)
 80130a4:	4290      	cmp	r0, r2
 80130a6:	d040      	beq.n	801312a <TIM_Base_SetConfig+0x9e>
 80130a8:	4a32      	ldr	r2, [pc, #200]	; (8013174 <TIM_Base_SetConfig+0xe8>)
 80130aa:	4290      	cmp	r0, r2
 80130ac:	d047      	beq.n	801313e <TIM_Base_SetConfig+0xb2>
 80130ae:	4a32      	ldr	r2, [pc, #200]	; (8013178 <TIM_Base_SetConfig+0xec>)
 80130b0:	4290      	cmp	r0, r2
 80130b2:	d04e      	beq.n	8013152 <TIM_Base_SetConfig+0xc6>
 80130b4:	4a31      	ldr	r2, [pc, #196]	; (801317c <TIM_Base_SetConfig+0xf0>)
 80130b6:	4290      	cmp	r0, r2
 80130b8:	d02d      	beq.n	8013116 <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80130ba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80130bc:	688b      	ldr	r3, [r1, #8]
 80130be:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80130c0:	680b      	ldr	r3, [r1, #0]
 80130c2:	6283      	str	r3, [r0, #40]	; 0x28
 80130c4:	e024      	b.n	8013110 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80130c6:	2270      	movs	r2, #112	; 0x70
 80130c8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80130ca:	684a      	ldr	r2, [r1, #4]
 80130cc:	4313      	orrs	r3, r2
 80130ce:	e008      	b.n	80130e2 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80130d0:	2270      	movs	r2, #112	; 0x70
 80130d2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80130d4:	684a      	ldr	r2, [r1, #4]
 80130d6:	4313      	orrs	r3, r2
 80130d8:	e003      	b.n	80130e2 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80130da:	2270      	movs	r2, #112	; 0x70
 80130dc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80130de:	684a      	ldr	r2, [r1, #4]
 80130e0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80130e2:	4a27      	ldr	r2, [pc, #156]	; (8013180 <TIM_Base_SetConfig+0xf4>)
 80130e4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80130e6:	68ca      	ldr	r2, [r1, #12]
 80130e8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80130ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80130ec:	688b      	ldr	r3, [r1, #8]
 80130ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80130f0:	680b      	ldr	r3, [r1, #0]
 80130f2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80130f4:	4b1c      	ldr	r3, [pc, #112]	; (8013168 <TIM_Base_SetConfig+0xdc>)
 80130f6:	4298      	cmp	r0, r3
 80130f8:	d008      	beq.n	801310c <TIM_Base_SetConfig+0x80>
 80130fa:	4b1e      	ldr	r3, [pc, #120]	; (8013174 <TIM_Base_SetConfig+0xe8>)
 80130fc:	4298      	cmp	r0, r3
 80130fe:	d005      	beq.n	801310c <TIM_Base_SetConfig+0x80>
 8013100:	4b1d      	ldr	r3, [pc, #116]	; (8013178 <TIM_Base_SetConfig+0xec>)
 8013102:	4298      	cmp	r0, r3
 8013104:	d002      	beq.n	801310c <TIM_Base_SetConfig+0x80>
 8013106:	4b1d      	ldr	r3, [pc, #116]	; (801317c <TIM_Base_SetConfig+0xf0>)
 8013108:	4298      	cmp	r0, r3
 801310a:	d101      	bne.n	8013110 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801310c:	690b      	ldr	r3, [r1, #16]
 801310e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8013110:	2301      	movs	r3, #1
 8013112:	6143      	str	r3, [r0, #20]
}
 8013114:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8013116:	4a1a      	ldr	r2, [pc, #104]	; (8013180 <TIM_Base_SetConfig+0xf4>)
 8013118:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801311a:	68ca      	ldr	r2, [r1, #12]
 801311c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801311e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013120:	688b      	ldr	r3, [r1, #8]
 8013122:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013124:	680b      	ldr	r3, [r1, #0]
 8013126:	6283      	str	r3, [r0, #40]	; 0x28
 8013128:	e7f0      	b.n	801310c <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 801312a:	4a15      	ldr	r2, [pc, #84]	; (8013180 <TIM_Base_SetConfig+0xf4>)
 801312c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801312e:	68ca      	ldr	r2, [r1, #12]
 8013130:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013132:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013134:	688b      	ldr	r3, [r1, #8]
 8013136:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013138:	680b      	ldr	r3, [r1, #0]
 801313a:	6283      	str	r3, [r0, #40]	; 0x28
 801313c:	e7e8      	b.n	8013110 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 801313e:	4a10      	ldr	r2, [pc, #64]	; (8013180 <TIM_Base_SetConfig+0xf4>)
 8013140:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013142:	68ca      	ldr	r2, [r1, #12]
 8013144:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013146:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013148:	688b      	ldr	r3, [r1, #8]
 801314a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801314c:	680b      	ldr	r3, [r1, #0]
 801314e:	6283      	str	r3, [r0, #40]	; 0x28
 8013150:	e7dc      	b.n	801310c <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8013152:	4a0b      	ldr	r2, [pc, #44]	; (8013180 <TIM_Base_SetConfig+0xf4>)
 8013154:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013156:	68ca      	ldr	r2, [r1, #12]
 8013158:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801315a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801315c:	688b      	ldr	r3, [r1, #8]
 801315e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013160:	680b      	ldr	r3, [r1, #0]
 8013162:	6283      	str	r3, [r0, #40]	; 0x28
 8013164:	e7d2      	b.n	801310c <TIM_Base_SetConfig+0x80>
 8013166:	46c0      	nop			; (mov r8, r8)
 8013168:	40012c00 	.word	0x40012c00
 801316c:	40000400 	.word	0x40000400
 8013170:	40002000 	.word	0x40002000
 8013174:	40014000 	.word	0x40014000
 8013178:	40014400 	.word	0x40014400
 801317c:	40014800 	.word	0x40014800
 8013180:	fffffcff 	.word	0xfffffcff

08013184 <HAL_TIM_Base_Init>:
{
 8013184:	b570      	push	{r4, r5, r6, lr}
 8013186:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8013188:	d014      	beq.n	80131b4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801318a:	2339      	movs	r3, #57	; 0x39
 801318c:	5cc3      	ldrb	r3, [r0, r3]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d00a      	beq.n	80131a8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8013192:	2539      	movs	r5, #57	; 0x39
 8013194:	2302      	movs	r3, #2
 8013196:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013198:	1d21      	adds	r1, r4, #4
 801319a:	6820      	ldr	r0, [r4, #0]
 801319c:	f7ff ff76 	bl	801308c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80131a0:	2301      	movs	r3, #1
 80131a2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80131a4:	2000      	movs	r0, #0
}
 80131a6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80131a8:	3338      	adds	r3, #56	; 0x38
 80131aa:	2200      	movs	r2, #0
 80131ac:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80131ae:	f7ff ff5f 	bl	8013070 <HAL_TIM_Base_MspInit>
 80131b2:	e7ee      	b.n	8013192 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80131b4:	2001      	movs	r0, #1
 80131b6:	e7f6      	b.n	80131a6 <HAL_TIM_Base_Init+0x22>

080131b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80131b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80131ba:	2338      	movs	r3, #56	; 0x38
 80131bc:	5cc3      	ldrb	r3, [r0, r3]
 80131be:	2b01      	cmp	r3, #1
 80131c0:	d01e      	beq.n	8013200 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80131c2:	2238      	movs	r2, #56	; 0x38
 80131c4:	2501      	movs	r5, #1
 80131c6:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80131c8:	2439      	movs	r4, #57	; 0x39
 80131ca:	2302      	movs	r3, #2
 80131cc:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80131ce:	6806      	ldr	r6, [r0, #0]
 80131d0:	6873      	ldr	r3, [r6, #4]
 80131d2:	2770      	movs	r7, #112	; 0x70
 80131d4:	43bb      	bics	r3, r7
 80131d6:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80131d8:	6806      	ldr	r6, [r0, #0]
 80131da:	6873      	ldr	r3, [r6, #4]
 80131dc:	680f      	ldr	r7, [r1, #0]
 80131de:	433b      	orrs	r3, r7
 80131e0:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80131e2:	6806      	ldr	r6, [r0, #0]
 80131e4:	68b3      	ldr	r3, [r6, #8]
 80131e6:	2780      	movs	r7, #128	; 0x80
 80131e8:	43bb      	bics	r3, r7
 80131ea:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80131ec:	6806      	ldr	r6, [r0, #0]
 80131ee:	68b3      	ldr	r3, [r6, #8]
 80131f0:	6849      	ldr	r1, [r1, #4]
 80131f2:	430b      	orrs	r3, r1
 80131f4:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80131f6:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80131f8:	2300      	movs	r3, #0
 80131fa:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80131fc:	2000      	movs	r0, #0
}
 80131fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8013200:	2002      	movs	r0, #2
 8013202:	e7fc      	b.n	80131fe <HAL_TIMEx_MasterConfigSynchronization+0x46>

08013204 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8013204:	4770      	bx	lr

08013206 <HAL_UART_DeInit>:
{
 8013206:	b570      	push	{r4, r5, r6, lr}
 8013208:	0004      	movs	r4, r0
    return HAL_ERROR;
 801320a:	2001      	movs	r0, #1
  if(huart == NULL)
 801320c:	2c00      	cmp	r4, #0
 801320e:	d016      	beq.n	801323e <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8013210:	2669      	movs	r6, #105	; 0x69
 8013212:	2302      	movs	r3, #2
 8013214:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8013216:	6822      	ldr	r2, [r4, #0]
 8013218:	6813      	ldr	r3, [r2, #0]
 801321a:	2101      	movs	r1, #1
 801321c:	438b      	bics	r3, r1
 801321e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8013220:	6823      	ldr	r3, [r4, #0]
 8013222:	2500      	movs	r5, #0
 8013224:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8013226:	6823      	ldr	r3, [r4, #0]
 8013228:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 801322a:	6823      	ldr	r3, [r4, #0]
 801322c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 801322e:	0020      	movs	r0, r4
 8013230:	f7ff ffe8 	bl	8013204 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013234:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8013236:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8013238:	2368      	movs	r3, #104	; 0x68
 801323a:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 801323c:	2000      	movs	r0, #0
}
 801323e:	bd70      	pop	{r4, r5, r6, pc}

08013240 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013240:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013242:	2369      	movs	r3, #105	; 0x69
 8013244:	5cc3      	ldrb	r3, [r0, r3]
 8013246:	2b01      	cmp	r3, #1
 8013248:	d004      	beq.n	8013254 <HAL_UART_Transmit_IT+0x14>
 801324a:	2369      	movs	r3, #105	; 0x69
 801324c:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801324e:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013250:	2c22      	cmp	r4, #34	; 0x22
 8013252:	d127      	bne.n	80132a4 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8013254:	2900      	cmp	r1, #0
 8013256:	d02b      	beq.n	80132b0 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8013258:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 801325a:	2a00      	cmp	r2, #0
 801325c:	d022      	beq.n	80132a4 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 801325e:	3367      	adds	r3, #103	; 0x67
 8013260:	5cc3      	ldrb	r3, [r0, r3]
 8013262:	2b01      	cmp	r3, #1
 8013264:	d026      	beq.n	80132b4 <HAL_UART_Transmit_IT+0x74>
 8013266:	2368      	movs	r3, #104	; 0x68
 8013268:	2401      	movs	r4, #1
 801326a:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 801326c:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 801326e:	3b18      	subs	r3, #24
 8013270:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8013272:	3302      	adds	r3, #2
 8013274:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013276:	2300      	movs	r3, #0
 8013278:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801327a:	3369      	adds	r3, #105	; 0x69
 801327c:	5cc3      	ldrb	r3, [r0, r3]
 801327e:	2b22      	cmp	r3, #34	; 0x22
 8013280:	d012      	beq.n	80132a8 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013282:	2369      	movs	r3, #105	; 0x69
 8013284:	2212      	movs	r2, #18
 8013286:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013288:	6802      	ldr	r2, [r0, #0]
 801328a:	6893      	ldr	r3, [r2, #8]
 801328c:	2101      	movs	r1, #1
 801328e:	430b      	orrs	r3, r1
 8013290:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013292:	2368      	movs	r3, #104	; 0x68
 8013294:	2200      	movs	r2, #0
 8013296:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8013298:	6802      	ldr	r2, [r0, #0]
 801329a:	6813      	ldr	r3, [r2, #0]
 801329c:	317f      	adds	r1, #127	; 0x7f
 801329e:	430b      	orrs	r3, r1
 80132a0:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80132a2:	2300      	movs	r3, #0
  }
}
 80132a4:	0018      	movs	r0, r3
 80132a6:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80132a8:	3347      	adds	r3, #71	; 0x47
 80132aa:	2232      	movs	r2, #50	; 0x32
 80132ac:	54c2      	strb	r2, [r0, r3]
 80132ae:	e7eb      	b.n	8013288 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 80132b0:	2301      	movs	r3, #1
 80132b2:	e7f7      	b.n	80132a4 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 80132b4:	2302      	movs	r3, #2
 80132b6:	e7f5      	b.n	80132a4 <HAL_UART_Transmit_IT+0x64>

080132b8 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80132b8:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80132ba:	2369      	movs	r3, #105	; 0x69
 80132bc:	5cc3      	ldrb	r3, [r0, r3]
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d004      	beq.n	80132cc <HAL_UART_Receive_IT+0x14>
 80132c2:	2369      	movs	r3, #105	; 0x69
 80132c4:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80132c6:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80132c8:	2c12      	cmp	r4, #18
 80132ca:	d14e      	bne.n	801336a <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 80132cc:	2900      	cmp	r1, #0
 80132ce:	d05d      	beq.n	801338c <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 80132d0:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 80132d2:	2a00      	cmp	r2, #0
 80132d4:	d049      	beq.n	801336a <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80132d6:	3367      	adds	r3, #103	; 0x67
 80132d8:	5cc3      	ldrb	r3, [r0, r3]
 80132da:	2b01      	cmp	r3, #1
 80132dc:	d058      	beq.n	8013390 <HAL_UART_Receive_IT+0xd8>
 80132de:	2368      	movs	r3, #104	; 0x68
 80132e0:	2401      	movs	r4, #1
 80132e2:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 80132e4:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80132e6:	3b10      	subs	r3, #16
 80132e8:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80132ea:	3302      	adds	r3, #2
 80132ec:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 80132ee:	6883      	ldr	r3, [r0, #8]
 80132f0:	2280      	movs	r2, #128	; 0x80
 80132f2:	0152      	lsls	r2, r2, #5
 80132f4:	4293      	cmp	r3, r2
 80132f6:	d008      	beq.n	801330a <HAL_UART_Receive_IT+0x52>
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d115      	bne.n	8013328 <HAL_UART_Receive_IT+0x70>
 80132fc:	6903      	ldr	r3, [r0, #16]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d10e      	bne.n	8013320 <HAL_UART_Receive_IT+0x68>
 8013302:	335c      	adds	r3, #92	; 0x5c
 8013304:	22ff      	movs	r2, #255	; 0xff
 8013306:	52c2      	strh	r2, [r0, r3]
 8013308:	e012      	b.n	8013330 <HAL_UART_Receive_IT+0x78>
 801330a:	6903      	ldr	r3, [r0, #16]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d103      	bne.n	8013318 <HAL_UART_Receive_IT+0x60>
 8013310:	335c      	adds	r3, #92	; 0x5c
 8013312:	4a20      	ldr	r2, [pc, #128]	; (8013394 <HAL_UART_Receive_IT+0xdc>)
 8013314:	52c2      	strh	r2, [r0, r3]
 8013316:	e00b      	b.n	8013330 <HAL_UART_Receive_IT+0x78>
 8013318:	235c      	movs	r3, #92	; 0x5c
 801331a:	22ff      	movs	r2, #255	; 0xff
 801331c:	52c2      	strh	r2, [r0, r3]
 801331e:	e007      	b.n	8013330 <HAL_UART_Receive_IT+0x78>
 8013320:	235c      	movs	r3, #92	; 0x5c
 8013322:	227f      	movs	r2, #127	; 0x7f
 8013324:	52c2      	strh	r2, [r0, r3]
 8013326:	e003      	b.n	8013330 <HAL_UART_Receive_IT+0x78>
 8013328:	2280      	movs	r2, #128	; 0x80
 801332a:	0552      	lsls	r2, r2, #21
 801332c:	4293      	cmp	r3, r2
 801332e:	d01e      	beq.n	801336e <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013330:	2300      	movs	r3, #0
 8013332:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013334:	3369      	adds	r3, #105	; 0x69
 8013336:	5cc3      	ldrb	r3, [r0, r3]
 8013338:	2b12      	cmp	r3, #18
 801333a:	d023      	beq.n	8013384 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801333c:	2369      	movs	r3, #105	; 0x69
 801333e:	2222      	movs	r2, #34	; 0x22
 8013340:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8013342:	6802      	ldr	r2, [r0, #0]
 8013344:	6811      	ldr	r1, [r2, #0]
 8013346:	2380      	movs	r3, #128	; 0x80
 8013348:	005b      	lsls	r3, r3, #1
 801334a:	430b      	orrs	r3, r1
 801334c:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801334e:	6802      	ldr	r2, [r0, #0]
 8013350:	6893      	ldr	r3, [r2, #8]
 8013352:	2101      	movs	r1, #1
 8013354:	430b      	orrs	r3, r1
 8013356:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013358:	2368      	movs	r3, #104	; 0x68
 801335a:	2200      	movs	r2, #0
 801335c:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801335e:	6802      	ldr	r2, [r0, #0]
 8013360:	6813      	ldr	r3, [r2, #0]
 8013362:	311f      	adds	r1, #31
 8013364:	430b      	orrs	r3, r1
 8013366:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8013368:	2300      	movs	r3, #0
  }
}
 801336a:	0018      	movs	r0, r3
 801336c:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 801336e:	6903      	ldr	r3, [r0, #16]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d103      	bne.n	801337c <HAL_UART_Receive_IT+0xc4>
 8013374:	335c      	adds	r3, #92	; 0x5c
 8013376:	227f      	movs	r2, #127	; 0x7f
 8013378:	52c2      	strh	r2, [r0, r3]
 801337a:	e7d9      	b.n	8013330 <HAL_UART_Receive_IT+0x78>
 801337c:	235c      	movs	r3, #92	; 0x5c
 801337e:	223f      	movs	r2, #63	; 0x3f
 8013380:	52c2      	strh	r2, [r0, r3]
 8013382:	e7d5      	b.n	8013330 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013384:	3357      	adds	r3, #87	; 0x57
 8013386:	2232      	movs	r2, #50	; 0x32
 8013388:	54c2      	strb	r2, [r0, r3]
 801338a:	e7da      	b.n	8013342 <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 801338c:	2301      	movs	r3, #1
 801338e:	e7ec      	b.n	801336a <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8013390:	2302      	movs	r3, #2
 8013392:	e7ea      	b.n	801336a <HAL_UART_Receive_IT+0xb2>
 8013394:	000001ff 	.word	0x000001ff

08013398 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013398:	b510      	push	{r4, lr}
 801339a:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801339c:	2369      	movs	r3, #105	; 0x69
 801339e:	5cc3      	ldrb	r3, [r0, r3]
 80133a0:	2b01      	cmp	r3, #1
 80133a2:	d004      	beq.n	80133ae <HAL_UART_Transmit_DMA+0x16>
 80133a4:	2369      	movs	r3, #105	; 0x69
 80133a6:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80133a8:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80133aa:	2b22      	cmp	r3, #34	; 0x22
 80133ac:	d134      	bne.n	8013418 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 80133ae:	2900      	cmp	r1, #0
 80133b0:	d037      	beq.n	8013422 <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 80133b2:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80133b4:	2a00      	cmp	r2, #0
 80133b6:	d02f      	beq.n	8013418 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 80133b8:	2368      	movs	r3, #104	; 0x68
 80133ba:	5ce3      	ldrb	r3, [r4, r3]
 80133bc:	2b01      	cmp	r3, #1
 80133be:	d032      	beq.n	8013426 <HAL_UART_Transmit_DMA+0x8e>
 80133c0:	2368      	movs	r3, #104	; 0x68
 80133c2:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 80133c4:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80133c6:	3b18      	subs	r3, #24
 80133c8:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80133ca:	3302      	adds	r3, #2
 80133cc:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133ce:	2300      	movs	r3, #0
 80133d0:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80133d2:	3369      	adds	r3, #105	; 0x69
 80133d4:	5ce3      	ldrb	r3, [r4, r3]
 80133d6:	2b22      	cmp	r3, #34	; 0x22
 80133d8:	d01f      	beq.n	801341a <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80133da:	2369      	movs	r3, #105	; 0x69
 80133dc:	2012      	movs	r0, #18
 80133de:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80133e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80133e2:	4812      	ldr	r0, [pc, #72]	; (801342c <HAL_UART_Transmit_DMA+0x94>)
 80133e4:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80133e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80133e8:	4811      	ldr	r0, [pc, #68]	; (8013430 <HAL_UART_Transmit_DMA+0x98>)
 80133ea:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80133ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80133ee:	4811      	ldr	r0, [pc, #68]	; (8013434 <HAL_UART_Transmit_DMA+0x9c>)
 80133f0:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80133f2:	6820      	ldr	r0, [r4, #0]
 80133f4:	3028      	adds	r0, #40	; 0x28
 80133f6:	0013      	movs	r3, r2
 80133f8:	0002      	movs	r2, r0
 80133fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80133fc:	f7fd fc72 	bl	8010ce4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013400:	6823      	ldr	r3, [r4, #0]
 8013402:	2240      	movs	r2, #64	; 0x40
 8013404:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8013406:	6822      	ldr	r2, [r4, #0]
 8013408:	6893      	ldr	r3, [r2, #8]
 801340a:	2180      	movs	r1, #128	; 0x80
 801340c:	430b      	orrs	r3, r1
 801340e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013410:	2368      	movs	r3, #104	; 0x68
 8013412:	2200      	movs	r2, #0
 8013414:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013416:	2000      	movs	r0, #0
  }
}
 8013418:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801341a:	3347      	adds	r3, #71	; 0x47
 801341c:	3031      	adds	r0, #49	; 0x31
 801341e:	54e0      	strb	r0, [r4, r3]
 8013420:	e7de      	b.n	80133e0 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8013422:	2001      	movs	r0, #1
 8013424:	e7f8      	b.n	8013418 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8013426:	2002      	movs	r0, #2
 8013428:	e7f6      	b.n	8013418 <HAL_UART_Transmit_DMA+0x80>
 801342a:	46c0      	nop			; (mov r8, r8)
 801342c:	080134d1 	.word	0x080134d1
 8013430:	08013503 	.word	0x08013503
 8013434:	08013553 	.word	0x08013553

08013438 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013438:	b510      	push	{r4, lr}
 801343a:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801343c:	2069      	movs	r0, #105	; 0x69
 801343e:	5c20      	ldrb	r0, [r4, r0]
 8013440:	2801      	cmp	r0, #1
 8013442:	d004      	beq.n	801344e <HAL_UART_Receive_DMA+0x16>
 8013444:	2369      	movs	r3, #105	; 0x69
 8013446:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013448:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801344a:	2b12      	cmp	r3, #18
 801344c:	d130      	bne.n	80134b0 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 801344e:	2900      	cmp	r1, #0
 8013450:	d033      	beq.n	80134ba <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8013452:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013454:	2a00      	cmp	r2, #0
 8013456:	d02b      	beq.n	80134b0 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013458:	2368      	movs	r3, #104	; 0x68
 801345a:	5ce3      	ldrb	r3, [r4, r3]
 801345c:	2b01      	cmp	r3, #1
 801345e:	d02e      	beq.n	80134be <HAL_UART_Receive_DMA+0x86>
 8013460:	2368      	movs	r3, #104	; 0x68
 8013462:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8013464:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8013466:	3b10      	subs	r3, #16
 8013468:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801346a:	2300      	movs	r3, #0
 801346c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801346e:	3369      	adds	r3, #105	; 0x69
 8013470:	5ce3      	ldrb	r3, [r4, r3]
 8013472:	2b12      	cmp	r3, #18
 8013474:	d01d      	beq.n	80134b2 <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013476:	2369      	movs	r3, #105	; 0x69
 8013478:	2022      	movs	r0, #34	; 0x22
 801347a:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801347c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801347e:	4811      	ldr	r0, [pc, #68]	; (80134c4 <HAL_UART_Receive_DMA+0x8c>)
 8013480:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013484:	4810      	ldr	r0, [pc, #64]	; (80134c8 <HAL_UART_Receive_DMA+0x90>)
 8013486:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801348a:	4810      	ldr	r0, [pc, #64]	; (80134cc <HAL_UART_Receive_DMA+0x94>)
 801348c:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801348e:	6820      	ldr	r0, [r4, #0]
 8013490:	3024      	adds	r0, #36	; 0x24
 8013492:	0013      	movs	r3, r2
 8013494:	000a      	movs	r2, r1
 8013496:	0001      	movs	r1, r0
 8013498:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801349a:	f7fd fc23 	bl	8010ce4 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 801349e:	6822      	ldr	r2, [r4, #0]
 80134a0:	6893      	ldr	r3, [r2, #8]
 80134a2:	2140      	movs	r1, #64	; 0x40
 80134a4:	430b      	orrs	r3, r1
 80134a6:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80134a8:	2368      	movs	r3, #104	; 0x68
 80134aa:	2200      	movs	r2, #0
 80134ac:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80134ae:	2000      	movs	r0, #0
  }
}
 80134b0:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80134b2:	3357      	adds	r3, #87	; 0x57
 80134b4:	3031      	adds	r0, #49	; 0x31
 80134b6:	54e0      	strb	r0, [r4, r3]
 80134b8:	e7e0      	b.n	801347c <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 80134ba:	2001      	movs	r0, #1
 80134bc:	e7f8      	b.n	80134b0 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80134be:	2002      	movs	r0, #2
 80134c0:	e7f6      	b.n	80134b0 <HAL_UART_Receive_DMA+0x78>
 80134c2:	46c0      	nop			; (mov r8, r8)
 80134c4:	0801350d 	.word	0x0801350d
 80134c8:	08013549 	.word	0x08013549
 80134cc:	08013553 	.word	0x08013553

080134d0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80134d0:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80134d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80134d4:	6802      	ldr	r2, [r0, #0]
 80134d6:	6812      	ldr	r2, [r2, #0]
 80134d8:	0692      	lsls	r2, r2, #26
 80134da:	d40d      	bmi.n	80134f8 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 80134dc:	2252      	movs	r2, #82	; 0x52
 80134de:	2100      	movs	r1, #0
 80134e0:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80134e2:	6819      	ldr	r1, [r3, #0]
 80134e4:	688a      	ldr	r2, [r1, #8]
 80134e6:	2080      	movs	r0, #128	; 0x80
 80134e8:	4382      	bics	r2, r0
 80134ea:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	6813      	ldr	r3, [r2, #0]
 80134f0:	2140      	movs	r1, #64	; 0x40
 80134f2:	430b      	orrs	r3, r1
 80134f4:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80134f6:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80134f8:	0018      	movs	r0, r3
 80134fa:	f7fa fad9 	bl	800dab0 <HAL_UART_TxCpltCallback>
}
 80134fe:	e7fa      	b.n	80134f6 <UART_DMATransmitCplt+0x26>

08013500 <HAL_UART_TxHalfCpltCallback>:
}
 8013500:	4770      	bx	lr

08013502 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013502:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8013504:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013506:	f7ff fffb 	bl	8013500 <HAL_UART_TxHalfCpltCallback>
}
 801350a:	bd10      	pop	{r4, pc}

0801350c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801350c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801350e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013510:	6802      	ldr	r2, [r0, #0]
 8013512:	6812      	ldr	r2, [r2, #0]
 8013514:	0692      	lsls	r2, r2, #26
 8013516:	d40e      	bmi.n	8013536 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8013518:	225a      	movs	r2, #90	; 0x5a
 801351a:	2100      	movs	r1, #0
 801351c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801351e:	6819      	ldr	r1, [r3, #0]
 8013520:	688a      	ldr	r2, [r1, #8]
 8013522:	2040      	movs	r0, #64	; 0x40
 8013524:	4382      	bics	r2, r0
 8013526:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013528:	2269      	movs	r2, #105	; 0x69
 801352a:	5c9a      	ldrb	r2, [r3, r2]
 801352c:	2a32      	cmp	r2, #50	; 0x32
 801352e:	d006      	beq.n	801353e <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013530:	2269      	movs	r2, #105	; 0x69
 8013532:	2101      	movs	r1, #1
 8013534:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8013536:	0018      	movs	r0, r3
 8013538:	f7fa faf8 	bl	800db2c <HAL_UART_RxCpltCallback>
}
 801353c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801353e:	3237      	adds	r2, #55	; 0x37
 8013540:	2112      	movs	r1, #18
 8013542:	5499      	strb	r1, [r3, r2]
 8013544:	e7f7      	b.n	8013536 <UART_DMAReceiveCplt+0x2a>

08013546 <HAL_UART_RxHalfCpltCallback>:
}
 8013546:	4770      	bx	lr

08013548 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013548:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801354a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801354c:	f7ff fffb 	bl	8013546 <HAL_UART_RxHalfCpltCallback>
}
 8013550:	bd10      	pop	{r4, pc}

08013552 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013552:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013554:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8013556:	2300      	movs	r3, #0
 8013558:	225a      	movs	r2, #90	; 0x5a
 801355a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801355c:	3a08      	subs	r2, #8
 801355e:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8013560:	3369      	adds	r3, #105	; 0x69
 8013562:	3a51      	subs	r2, #81	; 0x51
 8013564:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013566:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013568:	320f      	adds	r2, #15
 801356a:	4313      	orrs	r3, r2
 801356c:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801356e:	f7fa fab7 	bl	800dae0 <HAL_UART_ErrorCallback>
}
 8013572:	bd10      	pop	{r4, pc}

08013574 <UART_SetConfig>:
{
 8013574:	b570      	push	{r4, r5, r6, lr}
 8013576:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013578:	6801      	ldr	r1, [r0, #0]
 801357a:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801357c:	6883      	ldr	r3, [r0, #8]
 801357e:	6900      	ldr	r0, [r0, #16]
 8013580:	4303      	orrs	r3, r0
 8013582:	6960      	ldr	r0, [r4, #20]
 8013584:	4303      	orrs	r3, r0
 8013586:	69e0      	ldr	r0, [r4, #28]
 8013588:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801358a:	487e      	ldr	r0, [pc, #504]	; (8013784 <UART_SetConfig+0x210>)
 801358c:	4002      	ands	r2, r0
 801358e:	4313      	orrs	r3, r2
 8013590:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013592:	6822      	ldr	r2, [r4, #0]
 8013594:	6853      	ldr	r3, [r2, #4]
 8013596:	497c      	ldr	r1, [pc, #496]	; (8013788 <UART_SetConfig+0x214>)
 8013598:	400b      	ands	r3, r1
 801359a:	68e1      	ldr	r1, [r4, #12]
 801359c:	430b      	orrs	r3, r1
 801359e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80135a0:	6821      	ldr	r1, [r4, #0]
 80135a2:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80135a4:	69a3      	ldr	r3, [r4, #24]
 80135a6:	6a20      	ldr	r0, [r4, #32]
 80135a8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80135aa:	4878      	ldr	r0, [pc, #480]	; (801378c <UART_SetConfig+0x218>)
 80135ac:	4002      	ands	r2, r0
 80135ae:	4313      	orrs	r3, r2
 80135b0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80135b2:	6825      	ldr	r5, [r4, #0]
 80135b4:	4b76      	ldr	r3, [pc, #472]	; (8013790 <UART_SetConfig+0x21c>)
 80135b6:	429d      	cmp	r5, r3
 80135b8:	d022      	beq.n	8013600 <UART_SetConfig+0x8c>
 80135ba:	4b76      	ldr	r3, [pc, #472]	; (8013794 <UART_SetConfig+0x220>)
 80135bc:	429d      	cmp	r5, r3
 80135be:	d034      	beq.n	801362a <UART_SetConfig+0xb6>
 80135c0:	4b75      	ldr	r3, [pc, #468]	; (8013798 <UART_SetConfig+0x224>)
 80135c2:	429d      	cmp	r5, r3
 80135c4:	d100      	bne.n	80135c8 <UART_SetConfig+0x54>
 80135c6:	e06b      	b.n	80136a0 <UART_SetConfig+0x12c>
 80135c8:	4b74      	ldr	r3, [pc, #464]	; (801379c <UART_SetConfig+0x228>)
 80135ca:	429d      	cmp	r5, r3
 80135cc:	d100      	bne.n	80135d0 <UART_SetConfig+0x5c>
 80135ce:	e08e      	b.n	80136ee <UART_SetConfig+0x17a>
 80135d0:	4b73      	ldr	r3, [pc, #460]	; (80137a0 <UART_SetConfig+0x22c>)
 80135d2:	429d      	cmp	r5, r3
 80135d4:	d100      	bne.n	80135d8 <UART_SetConfig+0x64>
 80135d6:	e08a      	b.n	80136ee <UART_SetConfig+0x17a>
 80135d8:	4b72      	ldr	r3, [pc, #456]	; (80137a4 <UART_SetConfig+0x230>)
 80135da:	429d      	cmp	r5, r3
 80135dc:	d100      	bne.n	80135e0 <UART_SetConfig+0x6c>
 80135de:	e086      	b.n	80136ee <UART_SetConfig+0x17a>
 80135e0:	4b71      	ldr	r3, [pc, #452]	; (80137a8 <UART_SetConfig+0x234>)
 80135e2:	429d      	cmp	r5, r3
 80135e4:	d100      	bne.n	80135e8 <UART_SetConfig+0x74>
 80135e6:	e082      	b.n	80136ee <UART_SetConfig+0x17a>
 80135e8:	4b70      	ldr	r3, [pc, #448]	; (80137ac <UART_SetConfig+0x238>)
 80135ea:	429d      	cmp	r5, r3
 80135ec:	d100      	bne.n	80135f0 <UART_SetConfig+0x7c>
 80135ee:	e07e      	b.n	80136ee <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80135f0:	2380      	movs	r3, #128	; 0x80
 80135f2:	021b      	lsls	r3, r3, #8
 80135f4:	69e2      	ldr	r2, [r4, #28]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d100      	bne.n	80135fc <UART_SetConfig+0x88>
 80135fa:	e072      	b.n	80136e2 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 80135fc:	2001      	movs	r0, #1
 80135fe:	e04e      	b.n	801369e <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013600:	4b6b      	ldr	r3, [pc, #428]	; (80137b0 <UART_SetConfig+0x23c>)
 8013602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013604:	2303      	movs	r3, #3
 8013606:	4013      	ands	r3, r2
 8013608:	2b01      	cmp	r3, #1
 801360a:	d100      	bne.n	801360e <UART_SetConfig+0x9a>
 801360c:	e09a      	b.n	8013744 <UART_SetConfig+0x1d0>
 801360e:	2b00      	cmp	r3, #0
 8013610:	d02f      	beq.n	8013672 <UART_SetConfig+0xfe>
 8013612:	2b02      	cmp	r3, #2
 8013614:	d100      	bne.n	8013618 <UART_SetConfig+0xa4>
 8013616:	e0a5      	b.n	8013764 <UART_SetConfig+0x1f0>
 8013618:	2b03      	cmp	r3, #3
 801361a:	d01a      	beq.n	8013652 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801361c:	2380      	movs	r3, #128	; 0x80
 801361e:	021b      	lsls	r3, r3, #8
 8013620:	69e2      	ldr	r2, [r4, #28]
 8013622:	429a      	cmp	r2, r3
 8013624:	d060      	beq.n	80136e8 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 8013626:	2001      	movs	r0, #1
 8013628:	e039      	b.n	801369e <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801362a:	4b61      	ldr	r3, [pc, #388]	; (80137b0 <UART_SetConfig+0x23c>)
 801362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801362e:	22c0      	movs	r2, #192	; 0xc0
 8013630:	0292      	lsls	r2, r2, #10
 8013632:	4013      	ands	r3, r2
 8013634:	2280      	movs	r2, #128	; 0x80
 8013636:	0252      	lsls	r2, r2, #9
 8013638:	4293      	cmp	r3, r2
 801363a:	d100      	bne.n	801363e <UART_SetConfig+0xca>
 801363c:	e082      	b.n	8013744 <UART_SetConfig+0x1d0>
 801363e:	d916      	bls.n	801366e <UART_SetConfig+0xfa>
 8013640:	2280      	movs	r2, #128	; 0x80
 8013642:	0292      	lsls	r2, r2, #10
 8013644:	4293      	cmp	r3, r2
 8013646:	d100      	bne.n	801364a <UART_SetConfig+0xd6>
 8013648:	e08c      	b.n	8013764 <UART_SetConfig+0x1f0>
 801364a:	22c0      	movs	r2, #192	; 0xc0
 801364c:	0292      	lsls	r2, r2, #10
 801364e:	4293      	cmp	r3, r2
 8013650:	d1e4      	bne.n	801361c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013652:	2380      	movs	r3, #128	; 0x80
 8013654:	021b      	lsls	r3, r3, #8
 8013656:	69e2      	ldr	r2, [r4, #28]
 8013658:	429a      	cmp	r2, r3
 801365a:	d038      	beq.n	80136ce <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801365c:	6861      	ldr	r1, [r4, #4]
 801365e:	4855      	ldr	r0, [pc, #340]	; (80137b4 <UART_SetConfig+0x240>)
 8013660:	f7ec fd76 	bl	8000150 <__udivsi3>
 8013664:	0400      	lsls	r0, r0, #16
 8013666:	0c00      	lsrs	r0, r0, #16
 8013668:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801366a:	2000      	movs	r0, #0
        break;
 801366c:	e017      	b.n	801369e <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801366e:	2b00      	cmp	r3, #0
 8013670:	d1d4      	bne.n	801361c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013672:	2380      	movs	r3, #128	; 0x80
 8013674:	021b      	lsls	r3, r3, #8
 8013676:	69e2      	ldr	r2, [r4, #28]
 8013678:	429a      	cmp	r2, r3
 801367a:	d13d      	bne.n	80136f8 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801367c:	f7ff fa5c 	bl	8012b38 <HAL_RCC_GetPCLK1Freq>
 8013680:	0040      	lsls	r0, r0, #1
 8013682:	6861      	ldr	r1, [r4, #4]
 8013684:	f7ec fd64 	bl	8000150 <__udivsi3>
 8013688:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801368a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 801368c:	220f      	movs	r2, #15
 801368e:	0019      	movs	r1, r3
 8013690:	4391      	bics	r1, r2
 8013692:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8013694:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8013696:	071b      	lsls	r3, r3, #28
 8013698:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 801369a:	4313      	orrs	r3, r2
 801369c:	60cb      	str	r3, [r1, #12]
}
 801369e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80136a0:	4b43      	ldr	r3, [pc, #268]	; (80137b0 <UART_SetConfig+0x23c>)
 80136a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136a4:	22c0      	movs	r2, #192	; 0xc0
 80136a6:	0312      	lsls	r2, r2, #12
 80136a8:	4013      	ands	r3, r2
 80136aa:	2280      	movs	r2, #128	; 0x80
 80136ac:	02d2      	lsls	r2, r2, #11
 80136ae:	4293      	cmp	r3, r2
 80136b0:	d02d      	beq.n	801370e <UART_SetConfig+0x19a>
 80136b2:	d913      	bls.n	80136dc <UART_SetConfig+0x168>
 80136b4:	2280      	movs	r2, #128	; 0x80
 80136b6:	0312      	lsls	r2, r2, #12
 80136b8:	4293      	cmp	r3, r2
 80136ba:	d036      	beq.n	801372a <UART_SetConfig+0x1b6>
 80136bc:	22c0      	movs	r2, #192	; 0xc0
 80136be:	0312      	lsls	r2, r2, #12
 80136c0:	4293      	cmp	r3, r2
 80136c2:	d1ab      	bne.n	801361c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80136c4:	2380      	movs	r3, #128	; 0x80
 80136c6:	021b      	lsls	r3, r3, #8
 80136c8:	69e2      	ldr	r2, [r4, #28]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d1c6      	bne.n	801365c <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80136ce:	6861      	ldr	r1, [r4, #4]
 80136d0:	4839      	ldr	r0, [pc, #228]	; (80137b8 <UART_SetConfig+0x244>)
 80136d2:	f7ec fd3d 	bl	8000150 <__udivsi3>
 80136d6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80136d8:	2000      	movs	r0, #0
        break;
 80136da:	e7d7      	b.n	801368c <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d0c8      	beq.n	8013672 <UART_SetConfig+0xfe>
 80136e0:	e79c      	b.n	801361c <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 80136e2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80136e4:	2300      	movs	r3, #0
 80136e6:	e7d1      	b.n	801368c <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 80136e8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80136ea:	2300      	movs	r3, #0
 80136ec:	e7ce      	b.n	801368c <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80136ee:	2380      	movs	r3, #128	; 0x80
 80136f0:	021b      	lsls	r3, r3, #8
 80136f2:	69e2      	ldr	r2, [r4, #28]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d0c1      	beq.n	801367c <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80136f8:	f7ff fa1e 	bl	8012b38 <HAL_RCC_GetPCLK1Freq>
 80136fc:	6825      	ldr	r5, [r4, #0]
 80136fe:	6861      	ldr	r1, [r4, #4]
 8013700:	f7ec fd26 	bl	8000150 <__udivsi3>
 8013704:	0400      	lsls	r0, r0, #16
 8013706:	0c00      	lsrs	r0, r0, #16
 8013708:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801370a:	2000      	movs	r0, #0
  return ret;
 801370c:	e7c7      	b.n	801369e <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801370e:	2380      	movs	r3, #128	; 0x80
 8013710:	021b      	lsls	r3, r3, #8
 8013712:	69e2      	ldr	r2, [r4, #28]
 8013714:	429a      	cmp	r2, r3
 8013716:	d11a      	bne.n	801374e <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013718:	f7ff f9aa 	bl	8012a70 <HAL_RCC_GetSysClockFreq>
 801371c:	0040      	lsls	r0, r0, #1
 801371e:	6861      	ldr	r1, [r4, #4]
 8013720:	f7ec fd16 	bl	8000150 <__udivsi3>
 8013724:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013726:	2000      	movs	r0, #0
        break;
 8013728:	e7b0      	b.n	801368c <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801372a:	2380      	movs	r3, #128	; 0x80
 801372c:	021b      	lsls	r3, r3, #8
 801372e:	69e2      	ldr	r2, [r4, #28]
 8013730:	429a      	cmp	r2, r3
 8013732:	d11c      	bne.n	801376e <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013734:	6861      	ldr	r1, [r4, #4]
 8013736:	2080      	movs	r0, #128	; 0x80
 8013738:	0240      	lsls	r0, r0, #9
 801373a:	f7ec fd09 	bl	8000150 <__udivsi3>
 801373e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013740:	2000      	movs	r0, #0
        break;
 8013742:	e7a3      	b.n	801368c <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013744:	2380      	movs	r3, #128	; 0x80
 8013746:	021b      	lsls	r3, r3, #8
 8013748:	69e2      	ldr	r2, [r4, #28]
 801374a:	429a      	cmp	r2, r3
 801374c:	d0e4      	beq.n	8013718 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801374e:	f7ff f98f 	bl	8012a70 <HAL_RCC_GetSysClockFreq>
 8013752:	6825      	ldr	r5, [r4, #0]
 8013754:	6861      	ldr	r1, [r4, #4]
 8013756:	f7ec fcfb 	bl	8000150 <__udivsi3>
 801375a:	0400      	lsls	r0, r0, #16
 801375c:	0c00      	lsrs	r0, r0, #16
 801375e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013760:	2000      	movs	r0, #0
        break;
 8013762:	e79c      	b.n	801369e <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013764:	2380      	movs	r3, #128	; 0x80
 8013766:	021b      	lsls	r3, r3, #8
 8013768:	69e2      	ldr	r2, [r4, #28]
 801376a:	429a      	cmp	r2, r3
 801376c:	d0e2      	beq.n	8013734 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 801376e:	6861      	ldr	r1, [r4, #4]
 8013770:	2080      	movs	r0, #128	; 0x80
 8013772:	0200      	lsls	r0, r0, #8
 8013774:	f7ec fcec 	bl	8000150 <__udivsi3>
 8013778:	0400      	lsls	r0, r0, #16
 801377a:	0c00      	lsrs	r0, r0, #16
 801377c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801377e:	2000      	movs	r0, #0
        break;
 8013780:	e78d      	b.n	801369e <UART_SetConfig+0x12a>
 8013782:	46c0      	nop			; (mov r8, r8)
 8013784:	efff69f3 	.word	0xefff69f3
 8013788:	ffffcfff 	.word	0xffffcfff
 801378c:	fffff4ff 	.word	0xfffff4ff
 8013790:	40013800 	.word	0x40013800
 8013794:	40004400 	.word	0x40004400
 8013798:	40004800 	.word	0x40004800
 801379c:	40004c00 	.word	0x40004c00
 80137a0:	40005000 	.word	0x40005000
 80137a4:	40011400 	.word	0x40011400
 80137a8:	40011800 	.word	0x40011800
 80137ac:	40011c00 	.word	0x40011c00
 80137b0:	40021000 	.word	0x40021000
 80137b4:	007a1200 	.word	0x007a1200
 80137b8:	00f42400 	.word	0x00f42400

080137bc <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80137bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80137be:	07db      	lsls	r3, r3, #31
 80137c0:	d506      	bpl.n	80137d0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80137c2:	6802      	ldr	r2, [r0, #0]
 80137c4:	6853      	ldr	r3, [r2, #4]
 80137c6:	492c      	ldr	r1, [pc, #176]	; (8013878 <UART_AdvFeatureConfig+0xbc>)
 80137c8:	400b      	ands	r3, r1
 80137ca:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80137cc:	430b      	orrs	r3, r1
 80137ce:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80137d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80137d2:	079b      	lsls	r3, r3, #30
 80137d4:	d506      	bpl.n	80137e4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80137d6:	6802      	ldr	r2, [r0, #0]
 80137d8:	6853      	ldr	r3, [r2, #4]
 80137da:	4928      	ldr	r1, [pc, #160]	; (801387c <UART_AdvFeatureConfig+0xc0>)
 80137dc:	400b      	ands	r3, r1
 80137de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80137e0:	430b      	orrs	r3, r1
 80137e2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80137e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80137e6:	075b      	lsls	r3, r3, #29
 80137e8:	d506      	bpl.n	80137f8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80137ea:	6802      	ldr	r2, [r0, #0]
 80137ec:	6853      	ldr	r3, [r2, #4]
 80137ee:	4924      	ldr	r1, [pc, #144]	; (8013880 <UART_AdvFeatureConfig+0xc4>)
 80137f0:	400b      	ands	r3, r1
 80137f2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80137f4:	430b      	orrs	r3, r1
 80137f6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80137f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80137fa:	071b      	lsls	r3, r3, #28
 80137fc:	d506      	bpl.n	801380c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80137fe:	6802      	ldr	r2, [r0, #0]
 8013800:	6853      	ldr	r3, [r2, #4]
 8013802:	4920      	ldr	r1, [pc, #128]	; (8013884 <UART_AdvFeatureConfig+0xc8>)
 8013804:	400b      	ands	r3, r1
 8013806:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013808:	430b      	orrs	r3, r1
 801380a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801380c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801380e:	06db      	lsls	r3, r3, #27
 8013810:	d506      	bpl.n	8013820 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013812:	6802      	ldr	r2, [r0, #0]
 8013814:	6893      	ldr	r3, [r2, #8]
 8013816:	491c      	ldr	r1, [pc, #112]	; (8013888 <UART_AdvFeatureConfig+0xcc>)
 8013818:	400b      	ands	r3, r1
 801381a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801381c:	430b      	orrs	r3, r1
 801381e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013820:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013822:	069b      	lsls	r3, r3, #26
 8013824:	d506      	bpl.n	8013834 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013826:	6802      	ldr	r2, [r0, #0]
 8013828:	6893      	ldr	r3, [r2, #8]
 801382a:	4918      	ldr	r1, [pc, #96]	; (801388c <UART_AdvFeatureConfig+0xd0>)
 801382c:	400b      	ands	r3, r1
 801382e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013830:	430b      	orrs	r3, r1
 8013832:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013834:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013836:	065b      	lsls	r3, r3, #25
 8013838:	d50b      	bpl.n	8013852 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801383a:	6802      	ldr	r2, [r0, #0]
 801383c:	6853      	ldr	r3, [r2, #4]
 801383e:	4914      	ldr	r1, [pc, #80]	; (8013890 <UART_AdvFeatureConfig+0xd4>)
 8013840:	400b      	ands	r3, r1
 8013842:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013844:	430b      	orrs	r3, r1
 8013846:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013848:	2380      	movs	r3, #128	; 0x80
 801384a:	035b      	lsls	r3, r3, #13
 801384c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801384e:	429a      	cmp	r2, r3
 8013850:	d00a      	beq.n	8013868 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013852:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013854:	061b      	lsls	r3, r3, #24
 8013856:	d506      	bpl.n	8013866 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013858:	6802      	ldr	r2, [r0, #0]
 801385a:	6853      	ldr	r3, [r2, #4]
 801385c:	490d      	ldr	r1, [pc, #52]	; (8013894 <UART_AdvFeatureConfig+0xd8>)
 801385e:	400b      	ands	r3, r1
 8013860:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8013862:	430b      	orrs	r3, r1
 8013864:	6053      	str	r3, [r2, #4]
}
 8013866:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013868:	6802      	ldr	r2, [r0, #0]
 801386a:	6853      	ldr	r3, [r2, #4]
 801386c:	490a      	ldr	r1, [pc, #40]	; (8013898 <UART_AdvFeatureConfig+0xdc>)
 801386e:	400b      	ands	r3, r1
 8013870:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8013872:	430b      	orrs	r3, r1
 8013874:	6053      	str	r3, [r2, #4]
 8013876:	e7ec      	b.n	8013852 <UART_AdvFeatureConfig+0x96>
 8013878:	fffdffff 	.word	0xfffdffff
 801387c:	fffeffff 	.word	0xfffeffff
 8013880:	fffbffff 	.word	0xfffbffff
 8013884:	ffff7fff 	.word	0xffff7fff
 8013888:	ffffefff 	.word	0xffffefff
 801388c:	ffffdfff 	.word	0xffffdfff
 8013890:	ffefffff 	.word	0xffefffff
 8013894:	fff7ffff 	.word	0xfff7ffff
 8013898:	ff9fffff 	.word	0xff9fffff

0801389c <UART_WaitOnFlagUntilTimeout>:
{
 801389c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801389e:	46c6      	mov	lr, r8
 80138a0:	b500      	push	{lr}
 80138a2:	0006      	movs	r6, r0
 80138a4:	000c      	movs	r4, r1
 80138a6:	0017      	movs	r7, r2
 80138a8:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80138aa:	f7fd f831 	bl	8010910 <HAL_GetTick>
 80138ae:	4680      	mov	r8, r0
  if(Status == RESET)
 80138b0:	2f00      	cmp	r7, #0
 80138b2:	d029      	beq.n	8013908 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80138b4:	6832      	ldr	r2, [r6, #0]
 80138b6:	69d3      	ldr	r3, [r2, #28]
 80138b8:	4023      	ands	r3, r4
 80138ba:	42a3      	cmp	r3, r4
 80138bc:	d152      	bne.n	8013964 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80138be:	1c6b      	adds	r3, r5, #1
 80138c0:	d0f9      	beq.n	80138b6 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80138c2:	2d00      	cmp	r5, #0
 80138c4:	d005      	beq.n	80138d2 <UART_WaitOnFlagUntilTimeout+0x36>
 80138c6:	f7fd f823 	bl	8010910 <HAL_GetTick>
 80138ca:	4643      	mov	r3, r8
 80138cc:	1ac0      	subs	r0, r0, r3
 80138ce:	42a8      	cmp	r0, r5
 80138d0:	d9f0      	bls.n	80138b4 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80138d2:	6832      	ldr	r2, [r6, #0]
 80138d4:	6813      	ldr	r3, [r2, #0]
 80138d6:	2180      	movs	r1, #128	; 0x80
 80138d8:	438b      	bics	r3, r1
 80138da:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80138dc:	6832      	ldr	r2, [r6, #0]
 80138de:	6813      	ldr	r3, [r2, #0]
 80138e0:	3960      	subs	r1, #96	; 0x60
 80138e2:	438b      	bics	r3, r1
 80138e4:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80138e6:	6832      	ldr	r2, [r6, #0]
 80138e8:	6813      	ldr	r3, [r2, #0]
 80138ea:	491f      	ldr	r1, [pc, #124]	; (8013968 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80138ec:	400b      	ands	r3, r1
 80138ee:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80138f0:	6831      	ldr	r1, [r6, #0]
 80138f2:	688b      	ldr	r3, [r1, #8]
 80138f4:	2201      	movs	r2, #1
 80138f6:	4393      	bics	r3, r2
 80138f8:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80138fa:	2369      	movs	r3, #105	; 0x69
 80138fc:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80138fe:	3b01      	subs	r3, #1
 8013900:	2200      	movs	r2, #0
 8013902:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013904:	2003      	movs	r0, #3
 8013906:	e02a      	b.n	801395e <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013908:	6832      	ldr	r2, [r6, #0]
 801390a:	69d3      	ldr	r3, [r2, #28]
 801390c:	4023      	ands	r3, r4
 801390e:	42a3      	cmp	r3, r4
 8013910:	d024      	beq.n	801395c <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8013912:	1c6b      	adds	r3, r5, #1
 8013914:	d0f9      	beq.n	801390a <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013916:	2d00      	cmp	r5, #0
 8013918:	d005      	beq.n	8013926 <UART_WaitOnFlagUntilTimeout+0x8a>
 801391a:	f7fc fff9 	bl	8010910 <HAL_GetTick>
 801391e:	4643      	mov	r3, r8
 8013920:	1ac0      	subs	r0, r0, r3
 8013922:	42a8      	cmp	r0, r5
 8013924:	d9f0      	bls.n	8013908 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013926:	6832      	ldr	r2, [r6, #0]
 8013928:	6813      	ldr	r3, [r2, #0]
 801392a:	2180      	movs	r1, #128	; 0x80
 801392c:	438b      	bics	r3, r1
 801392e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013930:	6832      	ldr	r2, [r6, #0]
 8013932:	6813      	ldr	r3, [r2, #0]
 8013934:	3960      	subs	r1, #96	; 0x60
 8013936:	438b      	bics	r3, r1
 8013938:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801393a:	6832      	ldr	r2, [r6, #0]
 801393c:	6813      	ldr	r3, [r2, #0]
 801393e:	490a      	ldr	r1, [pc, #40]	; (8013968 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013940:	400b      	ands	r3, r1
 8013942:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013944:	6831      	ldr	r1, [r6, #0]
 8013946:	688b      	ldr	r3, [r1, #8]
 8013948:	2201      	movs	r2, #1
 801394a:	4393      	bics	r3, r2
 801394c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801394e:	2369      	movs	r3, #105	; 0x69
 8013950:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013952:	3b01      	subs	r3, #1
 8013954:	2200      	movs	r2, #0
 8013956:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013958:	2003      	movs	r0, #3
 801395a:	e000      	b.n	801395e <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 801395c:	2000      	movs	r0, #0
}
 801395e:	bc04      	pop	{r2}
 8013960:	4690      	mov	r8, r2
 8013962:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013964:	2000      	movs	r0, #0
 8013966:	e7fa      	b.n	801395e <UART_WaitOnFlagUntilTimeout+0xc2>
 8013968:	fffffeff 	.word	0xfffffeff

0801396c <HAL_UART_Transmit>:
{
 801396c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801396e:	b083      	sub	sp, #12
 8013970:	0004      	movs	r4, r0
 8013972:	000e      	movs	r6, r1
 8013974:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013976:	2369      	movs	r3, #105	; 0x69
 8013978:	5cc3      	ldrb	r3, [r0, r3]
 801397a:	2b01      	cmp	r3, #1
 801397c:	d004      	beq.n	8013988 <HAL_UART_Transmit+0x1c>
 801397e:	2369      	movs	r3, #105	; 0x69
 8013980:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8013982:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013984:	2b22      	cmp	r3, #34	; 0x22
 8013986:	d153      	bne.n	8013a30 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8013988:	2e00      	cmp	r6, #0
 801398a:	d050      	beq.n	8013a2e <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 801398c:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801398e:	2a00      	cmp	r2, #0
 8013990:	d04e      	beq.n	8013a30 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8013992:	2368      	movs	r3, #104	; 0x68
 8013994:	5ce3      	ldrb	r3, [r4, r3]
 8013996:	2b01      	cmp	r3, #1
 8013998:	d04c      	beq.n	8013a34 <HAL_UART_Transmit+0xc8>
 801399a:	2368      	movs	r3, #104	; 0x68
 801399c:	2101      	movs	r1, #1
 801399e:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139a0:	2300      	movs	r3, #0
 80139a2:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80139a4:	3369      	adds	r3, #105	; 0x69
 80139a6:	5ce3      	ldrb	r3, [r4, r3]
 80139a8:	2b22      	cmp	r3, #34	; 0x22
 80139aa:	d008      	beq.n	80139be <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80139ac:	2369      	movs	r3, #105	; 0x69
 80139ae:	2112      	movs	r1, #18
 80139b0:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80139b2:	2350      	movs	r3, #80	; 0x50
 80139b4:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80139b6:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80139b8:	2580      	movs	r5, #128	; 0x80
 80139ba:	016d      	lsls	r5, r5, #5
 80139bc:	e00a      	b.n	80139d4 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80139be:	3347      	adds	r3, #71	; 0x47
 80139c0:	3131      	adds	r1, #49	; 0x31
 80139c2:	54e1      	strb	r1, [r4, r3]
 80139c4:	e7f5      	b.n	80139b2 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80139c6:	7833      	ldrb	r3, [r6, #0]
 80139c8:	6822      	ldr	r2, [r4, #0]
 80139ca:	8513      	strh	r3, [r2, #40]	; 0x28
 80139cc:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 80139ce:	5be2      	ldrh	r2, [r4, r7]
 80139d0:	2a00      	cmp	r2, #0
 80139d2:	d016      	beq.n	8013a02 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80139d4:	3a01      	subs	r2, #1
 80139d6:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80139d8:	9b01      	ldr	r3, [sp, #4]
 80139da:	2200      	movs	r2, #0
 80139dc:	2180      	movs	r1, #128	; 0x80
 80139de:	0020      	movs	r0, r4
 80139e0:	f7ff ff5c 	bl	801389c <UART_WaitOnFlagUntilTimeout>
 80139e4:	2800      	cmp	r0, #0
 80139e6:	d127      	bne.n	8013a38 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80139e8:	68a3      	ldr	r3, [r4, #8]
 80139ea:	42ab      	cmp	r3, r5
 80139ec:	d1eb      	bne.n	80139c6 <HAL_UART_Transmit+0x5a>
 80139ee:	6923      	ldr	r3, [r4, #16]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d1e8      	bne.n	80139c6 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80139f4:	8833      	ldrh	r3, [r6, #0]
 80139f6:	05db      	lsls	r3, r3, #23
 80139f8:	0ddb      	lsrs	r3, r3, #23
 80139fa:	6822      	ldr	r2, [r4, #0]
 80139fc:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80139fe:	3602      	adds	r6, #2
 8013a00:	e7e5      	b.n	80139ce <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8013a02:	9b01      	ldr	r3, [sp, #4]
 8013a04:	2140      	movs	r1, #64	; 0x40
 8013a06:	0020      	movs	r0, r4
 8013a08:	f7ff ff48 	bl	801389c <UART_WaitOnFlagUntilTimeout>
 8013a0c:	2800      	cmp	r0, #0
 8013a0e:	d115      	bne.n	8013a3c <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013a10:	2369      	movs	r3, #105	; 0x69
 8013a12:	5ce3      	ldrb	r3, [r4, r3]
 8013a14:	2b32      	cmp	r3, #50	; 0x32
 8013a16:	d006      	beq.n	8013a26 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8013a18:	2369      	movs	r3, #105	; 0x69
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8013a1e:	2368      	movs	r3, #104	; 0x68
 8013a20:	2200      	movs	r2, #0
 8013a22:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013a24:	e004      	b.n	8013a30 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013a26:	3337      	adds	r3, #55	; 0x37
 8013a28:	2222      	movs	r2, #34	; 0x22
 8013a2a:	54e2      	strb	r2, [r4, r3]
 8013a2c:	e7f7      	b.n	8013a1e <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8013a2e:	2001      	movs	r0, #1
}
 8013a30:	b003      	add	sp, #12
 8013a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8013a34:	2002      	movs	r0, #2
 8013a36:	e7fb      	b.n	8013a30 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8013a38:	2003      	movs	r0, #3
 8013a3a:	e7f9      	b.n	8013a30 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8013a3c:	2003      	movs	r0, #3
 8013a3e:	e7f7      	b.n	8013a30 <HAL_UART_Transmit+0xc4>

08013a40 <UART_CheckIdleState>:
{
 8013a40:	b510      	push	{r4, lr}
 8013a42:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a44:	2300      	movs	r3, #0
 8013a46:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013a48:	6803      	ldr	r3, [r0, #0]
 8013a4a:	4a18      	ldr	r2, [pc, #96]	; (8013aac <UART_CheckIdleState+0x6c>)
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d005      	beq.n	8013a5c <UART_CheckIdleState+0x1c>
 8013a50:	4a17      	ldr	r2, [pc, #92]	; (8013ab0 <UART_CheckIdleState+0x70>)
 8013a52:	4293      	cmp	r3, r2
 8013a54:	d002      	beq.n	8013a5c <UART_CheckIdleState+0x1c>
 8013a56:	4a17      	ldr	r2, [pc, #92]	; (8013ab4 <UART_CheckIdleState+0x74>)
 8013a58:	4293      	cmp	r3, r2
 8013a5a:	d106      	bne.n	8013a6a <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	071b      	lsls	r3, r3, #28
 8013a60:	d40b      	bmi.n	8013a7a <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013a62:	6823      	ldr	r3, [r4, #0]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	075b      	lsls	r3, r3, #29
 8013a68:	d413      	bmi.n	8013a92 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8013a6a:	2369      	movs	r3, #105	; 0x69
 8013a6c:	2201      	movs	r2, #1
 8013a6e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8013a70:	3b01      	subs	r3, #1
 8013a72:	2200      	movs	r2, #0
 8013a74:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8013a76:	2000      	movs	r0, #0
}
 8013a78:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013a7a:	23fa      	movs	r3, #250	; 0xfa
 8013a7c:	2180      	movs	r1, #128	; 0x80
 8013a7e:	009b      	lsls	r3, r3, #2
 8013a80:	2200      	movs	r2, #0
 8013a82:	0389      	lsls	r1, r1, #14
 8013a84:	0020      	movs	r0, r4
 8013a86:	f7ff ff09 	bl	801389c <UART_WaitOnFlagUntilTimeout>
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	d0e9      	beq.n	8013a62 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8013a8e:	2003      	movs	r0, #3
 8013a90:	e7f2      	b.n	8013a78 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013a92:	23fa      	movs	r3, #250	; 0xfa
 8013a94:	2180      	movs	r1, #128	; 0x80
 8013a96:	009b      	lsls	r3, r3, #2
 8013a98:	2200      	movs	r2, #0
 8013a9a:	03c9      	lsls	r1, r1, #15
 8013a9c:	0020      	movs	r0, r4
 8013a9e:	f7ff fefd 	bl	801389c <UART_WaitOnFlagUntilTimeout>
 8013aa2:	2800      	cmp	r0, #0
 8013aa4:	d0e1      	beq.n	8013a6a <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8013aa6:	2003      	movs	r0, #3
 8013aa8:	e7e6      	b.n	8013a78 <UART_CheckIdleState+0x38>
 8013aaa:	46c0      	nop			; (mov r8, r8)
 8013aac:	40013800 	.word	0x40013800
 8013ab0:	40004400 	.word	0x40004400
 8013ab4:	40004800 	.word	0x40004800

08013ab8 <HAL_UART_Init>:
{
 8013ab8:	b510      	push	{r4, lr}
 8013aba:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013abc:	d030      	beq.n	8013b20 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8013abe:	2369      	movs	r3, #105	; 0x69
 8013ac0:	5cc3      	ldrb	r3, [r0, r3]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d022      	beq.n	8013b0c <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8013ac6:	2369      	movs	r3, #105	; 0x69
 8013ac8:	2202      	movs	r2, #2
 8013aca:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013acc:	6822      	ldr	r2, [r4, #0]
 8013ace:	6813      	ldr	r3, [r2, #0]
 8013ad0:	2101      	movs	r1, #1
 8013ad2:	438b      	bics	r3, r1
 8013ad4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013ad6:	0020      	movs	r0, r4
 8013ad8:	f7ff fd4c 	bl	8013574 <UART_SetConfig>
 8013adc:	2801      	cmp	r0, #1
 8013ade:	d014      	beq.n	8013b0a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d118      	bne.n	8013b18 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013ae6:	6822      	ldr	r2, [r4, #0]
 8013ae8:	6853      	ldr	r3, [r2, #4]
 8013aea:	490e      	ldr	r1, [pc, #56]	; (8013b24 <HAL_UART_Init+0x6c>)
 8013aec:	400b      	ands	r3, r1
 8013aee:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013af0:	6822      	ldr	r2, [r4, #0]
 8013af2:	6893      	ldr	r3, [r2, #8]
 8013af4:	212a      	movs	r1, #42	; 0x2a
 8013af6:	438b      	bics	r3, r1
 8013af8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013afa:	6822      	ldr	r2, [r4, #0]
 8013afc:	6813      	ldr	r3, [r2, #0]
 8013afe:	3929      	subs	r1, #41	; 0x29
 8013b00:	430b      	orrs	r3, r1
 8013b02:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013b04:	0020      	movs	r0, r4
 8013b06:	f7ff ff9b 	bl	8013a40 <UART_CheckIdleState>
}
 8013b0a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013b0c:	3368      	adds	r3, #104	; 0x68
 8013b0e:	2200      	movs	r2, #0
 8013b10:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8013b12:	f7fa f8d3 	bl	800dcbc <HAL_UART_MspInit>
 8013b16:	e7d6      	b.n	8013ac6 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013b18:	0020      	movs	r0, r4
 8013b1a:	f7ff fe4f 	bl	80137bc <UART_AdvFeatureConfig>
 8013b1e:	e7e2      	b.n	8013ae6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013b20:	2001      	movs	r0, #1
 8013b22:	e7f2      	b.n	8013b0a <HAL_UART_Init+0x52>
 8013b24:	ffffb7ff 	.word	0xffffb7ff

08013b28 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013b28:	2369      	movs	r3, #105	; 0x69
 8013b2a:	5cc3      	ldrb	r3, [r0, r3]
 8013b2c:	2b12      	cmp	r3, #18
 8013b2e:	d004      	beq.n	8013b3a <UART_Transmit_IT+0x12>
 8013b30:	2369      	movs	r3, #105	; 0x69
 8013b32:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8013b34:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013b36:	2a32      	cmp	r2, #50	; 0x32
 8013b38:	d113      	bne.n	8013b62 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8013b3a:	2352      	movs	r3, #82	; 0x52
 8013b3c:	5ac3      	ldrh	r3, [r0, r3]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d011      	beq.n	8013b66 <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b42:	2380      	movs	r3, #128	; 0x80
 8013b44:	015b      	lsls	r3, r3, #5
 8013b46:	6882      	ldr	r2, [r0, #8]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d018      	beq.n	8013b7e <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013b4c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013b4e:	1c5a      	adds	r2, r3, #1
 8013b50:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	6802      	ldr	r2, [r0, #0]
 8013b56:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8013b58:	2252      	movs	r2, #82	; 0x52
 8013b5a:	5a83      	ldrh	r3, [r0, r2]
 8013b5c:	3b01      	subs	r3, #1
 8013b5e:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8013b60:	2300      	movs	r3, #0
  }
}
 8013b62:	0018      	movs	r0, r3
 8013b64:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013b66:	6802      	ldr	r2, [r0, #0]
 8013b68:	6813      	ldr	r3, [r2, #0]
 8013b6a:	2180      	movs	r1, #128	; 0x80
 8013b6c:	438b      	bics	r3, r1
 8013b6e:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013b70:	6802      	ldr	r2, [r0, #0]
 8013b72:	6813      	ldr	r3, [r2, #0]
 8013b74:	3940      	subs	r1, #64	; 0x40
 8013b76:	430b      	orrs	r3, r1
 8013b78:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	e7f1      	b.n	8013b62 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013b7e:	6903      	ldr	r3, [r0, #16]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d1e3      	bne.n	8013b4c <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013b84:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013b86:	881b      	ldrh	r3, [r3, #0]
 8013b88:	05db      	lsls	r3, r3, #23
 8013b8a:	0ddb      	lsrs	r3, r3, #23
 8013b8c:	6802      	ldr	r2, [r0, #0]
 8013b8e:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8013b90:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013b92:	3302      	adds	r3, #2
 8013b94:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013b96:	e7df      	b.n	8013b58 <UART_Transmit_IT+0x30>

08013b98 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013b98:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013b9a:	6802      	ldr	r2, [r0, #0]
 8013b9c:	6813      	ldr	r3, [r2, #0]
 8013b9e:	2140      	movs	r1, #64	; 0x40
 8013ba0:	438b      	bics	r3, r1
 8013ba2:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013ba4:	2369      	movs	r3, #105	; 0x69
 8013ba6:	5cc3      	ldrb	r3, [r0, r3]
 8013ba8:	2b32      	cmp	r3, #50	; 0x32
 8013baa:	d00a      	beq.n	8013bc2 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013bac:	6801      	ldr	r1, [r0, #0]
 8013bae:	688b      	ldr	r3, [r1, #8]
 8013bb0:	2201      	movs	r2, #1
 8013bb2:	4393      	bics	r3, r2
 8013bb4:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8013bb6:	2369      	movs	r3, #105	; 0x69
 8013bb8:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8013bba:	f7f9 ff79 	bl	800dab0 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8013bbe:	2000      	movs	r0, #0
 8013bc0:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013bc2:	3337      	adds	r3, #55	; 0x37
 8013bc4:	2222      	movs	r2, #34	; 0x22
 8013bc6:	54c2      	strb	r2, [r0, r3]
 8013bc8:	e7f7      	b.n	8013bba <UART_EndTransmit_IT+0x22>
	...

08013bcc <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013bcc:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013bce:	2369      	movs	r3, #105	; 0x69
 8013bd0:	5cc3      	ldrb	r3, [r0, r3]
 8013bd2:	2b22      	cmp	r3, #34	; 0x22
 8013bd4:	d004      	beq.n	8013be0 <UART_Receive_IT+0x14>
 8013bd6:	2369      	movs	r3, #105	; 0x69
 8013bd8:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013bda:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013bdc:	2b32      	cmp	r3, #50	; 0x32
 8013bde:	d12d      	bne.n	8013c3c <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8013be0:	235c      	movs	r3, #92	; 0x5c
 8013be2:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013be4:	2280      	movs	r2, #128	; 0x80
 8013be6:	0152      	lsls	r2, r2, #5
 8013be8:	6883      	ldr	r3, [r0, #8]
 8013bea:	4293      	cmp	r3, r2
 8013bec:	d028      	beq.n	8013c40 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013bee:	6803      	ldr	r3, [r0, #0]
 8013bf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013bf2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013bf4:	1c54      	adds	r4, r2, #1
 8013bf6:	6544      	str	r4, [r0, #84]	; 0x54
 8013bf8:	400b      	ands	r3, r1
 8013bfa:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8013bfc:	225a      	movs	r2, #90	; 0x5a
 8013bfe:	5a83      	ldrh	r3, [r0, r2]
 8013c00:	3b01      	subs	r3, #1
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8013c06:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d117      	bne.n	8013c3c <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013c0c:	6802      	ldr	r2, [r0, #0]
 8013c0e:	6813      	ldr	r3, [r2, #0]
 8013c10:	2120      	movs	r1, #32
 8013c12:	438b      	bics	r3, r1
 8013c14:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013c16:	2369      	movs	r3, #105	; 0x69
 8013c18:	5cc3      	ldrb	r3, [r0, r3]
 8013c1a:	2b32      	cmp	r3, #50	; 0x32
 8013c1c:	d01c      	beq.n	8013c58 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013c1e:	6802      	ldr	r2, [r0, #0]
 8013c20:	6813      	ldr	r3, [r2, #0]
 8013c22:	490f      	ldr	r1, [pc, #60]	; (8013c60 <UART_Receive_IT+0x94>)
 8013c24:	400b      	ands	r3, r1
 8013c26:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013c28:	6801      	ldr	r1, [r0, #0]
 8013c2a:	688b      	ldr	r3, [r1, #8]
 8013c2c:	2201      	movs	r2, #1
 8013c2e:	4393      	bics	r3, r2
 8013c30:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 8013c32:	2369      	movs	r3, #105	; 0x69
 8013c34:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8013c36:	f7f9 ff79 	bl	800db2c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8013c3a:	2200      	movs	r2, #0
  }
}
 8013c3c:	0010      	movs	r0, r2
 8013c3e:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c40:	6903      	ldr	r3, [r0, #16]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d1d3      	bne.n	8013bee <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013c46:	6803      	ldr	r3, [r0, #0]
 8013c48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c4a:	400b      	ands	r3, r1
 8013c4c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013c4e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8013c50:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8013c52:	3302      	adds	r3, #2
 8013c54:	6543      	str	r3, [r0, #84]	; 0x54
 8013c56:	e7d1      	b.n	8013bfc <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013c58:	3337      	adds	r3, #55	; 0x37
 8013c5a:	2212      	movs	r2, #18
 8013c5c:	54c2      	strb	r2, [r0, r3]
 8013c5e:	e7ea      	b.n	8013c36 <UART_Receive_IT+0x6a>
 8013c60:	fffffeff 	.word	0xfffffeff

08013c64 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013c64:	4770      	bx	lr

08013c66 <HAL_UART_IRQHandler>:
{
 8013c66:	b510      	push	{r4, lr}
 8013c68:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8013c6a:	6803      	ldr	r3, [r0, #0]
 8013c6c:	69da      	ldr	r2, [r3, #28]
 8013c6e:	07d2      	lsls	r2, r2, #31
 8013c70:	d509      	bpl.n	8013c86 <HAL_UART_IRQHandler+0x20>
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	05d2      	lsls	r2, r2, #23
 8013c76:	d506      	bpl.n	8013c86 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8013c78:	2201      	movs	r2, #1
 8013c7a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013c7c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013c7e:	4313      	orrs	r3, r2
 8013c80:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013c82:	2369      	movs	r3, #105	; 0x69
 8013c84:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013c86:	6823      	ldr	r3, [r4, #0]
 8013c88:	69da      	ldr	r2, [r3, #28]
 8013c8a:	0792      	lsls	r2, r2, #30
 8013c8c:	d50b      	bpl.n	8013ca6 <HAL_UART_IRQHandler+0x40>
 8013c8e:	689a      	ldr	r2, [r3, #8]
 8013c90:	07d2      	lsls	r2, r2, #31
 8013c92:	d508      	bpl.n	8013ca6 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013c94:	2202      	movs	r2, #2
 8013c96:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013c98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013c9a:	3202      	adds	r2, #2
 8013c9c:	4313      	orrs	r3, r2
 8013c9e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013ca0:	2369      	movs	r3, #105	; 0x69
 8013ca2:	3a03      	subs	r2, #3
 8013ca4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013ca6:	6823      	ldr	r3, [r4, #0]
 8013ca8:	69da      	ldr	r2, [r3, #28]
 8013caa:	0752      	lsls	r2, r2, #29
 8013cac:	d50b      	bpl.n	8013cc6 <HAL_UART_IRQHandler+0x60>
 8013cae:	689a      	ldr	r2, [r3, #8]
 8013cb0:	07d2      	lsls	r2, r2, #31
 8013cb2:	d508      	bpl.n	8013cc6 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013cb4:	2204      	movs	r2, #4
 8013cb6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013cb8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013cba:	3a02      	subs	r2, #2
 8013cbc:	4313      	orrs	r3, r2
 8013cbe:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013cc0:	2369      	movs	r3, #105	; 0x69
 8013cc2:	3a01      	subs	r2, #1
 8013cc4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013cc6:	6823      	ldr	r3, [r4, #0]
 8013cc8:	69da      	ldr	r2, [r3, #28]
 8013cca:	0712      	lsls	r2, r2, #28
 8013ccc:	d50a      	bpl.n	8013ce4 <HAL_UART_IRQHandler+0x7e>
 8013cce:	689a      	ldr	r2, [r3, #8]
 8013cd0:	07d2      	lsls	r2, r2, #31
 8013cd2:	d507      	bpl.n	8013ce4 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013cd4:	2208      	movs	r2, #8
 8013cd6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013cd8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013cda:	4313      	orrs	r3, r2
 8013cdc:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013cde:	2369      	movs	r3, #105	; 0x69
 8013ce0:	3a07      	subs	r2, #7
 8013ce2:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013ce4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d11c      	bne.n	8013d24 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013cea:	6823      	ldr	r3, [r4, #0]
 8013cec:	69da      	ldr	r2, [r3, #28]
 8013cee:	02d2      	lsls	r2, r2, #11
 8013cf0:	d502      	bpl.n	8013cf8 <HAL_UART_IRQHandler+0x92>
 8013cf2:	689a      	ldr	r2, [r3, #8]
 8013cf4:	0252      	lsls	r2, r2, #9
 8013cf6:	d419      	bmi.n	8013d2c <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013cf8:	6823      	ldr	r3, [r4, #0]
 8013cfa:	69da      	ldr	r2, [r3, #28]
 8013cfc:	0692      	lsls	r2, r2, #26
 8013cfe:	d502      	bpl.n	8013d06 <HAL_UART_IRQHandler+0xa0>
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	069b      	lsls	r3, r3, #26
 8013d04:	d41c      	bmi.n	8013d40 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013d06:	6823      	ldr	r3, [r4, #0]
 8013d08:	69da      	ldr	r2, [r3, #28]
 8013d0a:	0612      	lsls	r2, r2, #24
 8013d0c:	d502      	bpl.n	8013d14 <HAL_UART_IRQHandler+0xae>
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	061b      	lsls	r3, r3, #24
 8013d12:	d41e      	bmi.n	8013d52 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013d14:	6823      	ldr	r3, [r4, #0]
 8013d16:	69da      	ldr	r2, [r3, #28]
 8013d18:	0652      	lsls	r2, r2, #25
 8013d1a:	d502      	bpl.n	8013d22 <HAL_UART_IRQHandler+0xbc>
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	065b      	lsls	r3, r3, #25
 8013d20:	d41b      	bmi.n	8013d5a <HAL_UART_IRQHandler+0xf4>
}
 8013d22:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013d24:	0020      	movs	r0, r4
 8013d26:	f7f9 fedb 	bl	800dae0 <HAL_UART_ErrorCallback>
 8013d2a:	e7de      	b.n	8013cea <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013d2c:	2280      	movs	r2, #128	; 0x80
 8013d2e:	0352      	lsls	r2, r2, #13
 8013d30:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013d32:	2369      	movs	r3, #105	; 0x69
 8013d34:	2201      	movs	r2, #1
 8013d36:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013d38:	0020      	movs	r0, r4
 8013d3a:	f7ff ff93 	bl	8013c64 <HAL_UARTEx_WakeupCallback>
 8013d3e:	e7db      	b.n	8013cf8 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013d40:	0020      	movs	r0, r4
 8013d42:	f7ff ff43 	bl	8013bcc <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013d46:	6822      	ldr	r2, [r4, #0]
 8013d48:	6993      	ldr	r3, [r2, #24]
 8013d4a:	2108      	movs	r1, #8
 8013d4c:	430b      	orrs	r3, r1
 8013d4e:	6193      	str	r3, [r2, #24]
 8013d50:	e7d9      	b.n	8013d06 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013d52:	0020      	movs	r0, r4
 8013d54:	f7ff fee8 	bl	8013b28 <UART_Transmit_IT>
 8013d58:	e7dc      	b.n	8013d14 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8013d5a:	0020      	movs	r0, r4
 8013d5c:	f7ff ff1c 	bl	8013b98 <UART_EndTransmit_IT>
}
 8013d60:	e7df      	b.n	8013d22 <HAL_UART_IRQHandler+0xbc>

08013d62 <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 8013d62:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013d64:	f7fc fdbc 	bl	80108e0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8013d68:	f7f0 fd42 	bl	80047f0 <SystemClock_Config>

  /* Initialize all user peripherals */

	/* Initialize BitzOS */
	BOS_Init();
 8013d6c:	f7f5 f8a8 	bl	8008ec0 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8013d70:	f7f7 fc38 	bl	800b5e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8013d74:	f7fa fda2 	bl	800e8bc <osKernelStart>
 8013d78:	e7fe      	b.n	8013d78 <main+0x16>

08013d7a <UserTask>:

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void * argument)
{
 8013d7a:	e7fe      	b.n	8013d7a <UserTask>

08013d7c <atof>:
 8013d7c:	b510      	push	{r4, lr}
 8013d7e:	2100      	movs	r1, #0
 8013d80:	f001 fb70 	bl	8015464 <strtod>
 8013d84:	bd10      	pop	{r4, pc}

08013d86 <atoi>:
 8013d86:	b510      	push	{r4, lr}
 8013d88:	220a      	movs	r2, #10
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	f001 fc36 	bl	80155fc <strtol>
 8013d90:	bd10      	pop	{r4, pc}

08013d92 <atol>:
 8013d92:	b510      	push	{r4, lr}
 8013d94:	220a      	movs	r2, #10
 8013d96:	2100      	movs	r1, #0
 8013d98:	f001 fc30 	bl	80155fc <strtol>
 8013d9c:	bd10      	pop	{r4, pc}
	...

08013da0 <__libc_init_array>:
 8013da0:	b570      	push	{r4, r5, r6, lr}
 8013da2:	2600      	movs	r6, #0
 8013da4:	4d0c      	ldr	r5, [pc, #48]	; (8013dd8 <__libc_init_array+0x38>)
 8013da6:	4c0d      	ldr	r4, [pc, #52]	; (8013ddc <__libc_init_array+0x3c>)
 8013da8:	1b64      	subs	r4, r4, r5
 8013daa:	10a4      	asrs	r4, r4, #2
 8013dac:	42a6      	cmp	r6, r4
 8013dae:	d109      	bne.n	8013dc4 <__libc_init_array+0x24>
 8013db0:	2600      	movs	r6, #0
 8013db2:	f004 fe9f 	bl	8018af4 <_init>
 8013db6:	4d0a      	ldr	r5, [pc, #40]	; (8013de0 <__libc_init_array+0x40>)
 8013db8:	4c0a      	ldr	r4, [pc, #40]	; (8013de4 <__libc_init_array+0x44>)
 8013dba:	1b64      	subs	r4, r4, r5
 8013dbc:	10a4      	asrs	r4, r4, #2
 8013dbe:	42a6      	cmp	r6, r4
 8013dc0:	d105      	bne.n	8013dce <__libc_init_array+0x2e>
 8013dc2:	bd70      	pop	{r4, r5, r6, pc}
 8013dc4:	00b3      	lsls	r3, r6, #2
 8013dc6:	58eb      	ldr	r3, [r5, r3]
 8013dc8:	4798      	blx	r3
 8013dca:	3601      	adds	r6, #1
 8013dcc:	e7ee      	b.n	8013dac <__libc_init_array+0xc>
 8013dce:	00b3      	lsls	r3, r6, #2
 8013dd0:	58eb      	ldr	r3, [r5, r3]
 8013dd2:	4798      	blx	r3
 8013dd4:	3601      	adds	r6, #1
 8013dd6:	e7f2      	b.n	8013dbe <__libc_init_array+0x1e>
 8013dd8:	0801bd54 	.word	0x0801bd54
 8013ddc:	0801bd54 	.word	0x0801bd54
 8013de0:	0801bd54 	.word	0x0801bd54
 8013de4:	0801bd5c 	.word	0x0801bd5c

08013de8 <__locale_ctype_ptr_l>:
 8013de8:	30ec      	adds	r0, #236	; 0xec
 8013dea:	6800      	ldr	r0, [r0, #0]
 8013dec:	4770      	bx	lr
	...

08013df0 <__locale_ctype_ptr>:
 8013df0:	4b04      	ldr	r3, [pc, #16]	; (8013e04 <__locale_ctype_ptr+0x14>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d100      	bne.n	8013dfc <__locale_ctype_ptr+0xc>
 8013dfa:	4b03      	ldr	r3, [pc, #12]	; (8013e08 <__locale_ctype_ptr+0x18>)
 8013dfc:	33ec      	adds	r3, #236	; 0xec
 8013dfe:	6818      	ldr	r0, [r3, #0]
 8013e00:	4770      	bx	lr
 8013e02:	46c0      	nop			; (mov r8, r8)
 8013e04:	200000f4 	.word	0x200000f4
 8013e08:	20000520 	.word	0x20000520

08013e0c <malloc>:
 8013e0c:	b510      	push	{r4, lr}
 8013e0e:	4b03      	ldr	r3, [pc, #12]	; (8013e1c <malloc+0x10>)
 8013e10:	0001      	movs	r1, r0
 8013e12:	6818      	ldr	r0, [r3, #0]
 8013e14:	f000 f80e 	bl	8013e34 <_malloc_r>
 8013e18:	bd10      	pop	{r4, pc}
 8013e1a:	46c0      	nop			; (mov r8, r8)
 8013e1c:	200000f4 	.word	0x200000f4

08013e20 <free>:
 8013e20:	b510      	push	{r4, lr}
 8013e22:	4b03      	ldr	r3, [pc, #12]	; (8013e30 <free+0x10>)
 8013e24:	0001      	movs	r1, r0
 8013e26:	6818      	ldr	r0, [r3, #0]
 8013e28:	f003 fd42 	bl	80178b0 <_free_r>
 8013e2c:	bd10      	pop	{r4, pc}
 8013e2e:	46c0      	nop			; (mov r8, r8)
 8013e30:	200000f4 	.word	0x200000f4

08013e34 <_malloc_r>:
 8013e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e36:	000d      	movs	r5, r1
 8013e38:	b085      	sub	sp, #20
 8013e3a:	350b      	adds	r5, #11
 8013e3c:	9001      	str	r0, [sp, #4]
 8013e3e:	2d16      	cmp	r5, #22
 8013e40:	d908      	bls.n	8013e54 <_malloc_r+0x20>
 8013e42:	2307      	movs	r3, #7
 8013e44:	439d      	bics	r5, r3
 8013e46:	d506      	bpl.n	8013e56 <_malloc_r+0x22>
 8013e48:	230c      	movs	r3, #12
 8013e4a:	9a01      	ldr	r2, [sp, #4]
 8013e4c:	6013      	str	r3, [r2, #0]
 8013e4e:	2000      	movs	r0, #0
 8013e50:	b005      	add	sp, #20
 8013e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e54:	2510      	movs	r5, #16
 8013e56:	428d      	cmp	r5, r1
 8013e58:	d3f6      	bcc.n	8013e48 <_malloc_r+0x14>
 8013e5a:	9801      	ldr	r0, [sp, #4]
 8013e5c:	f000 fa34 	bl	80142c8 <__malloc_lock>
 8013e60:	23f8      	movs	r3, #248	; 0xf8
 8013e62:	33ff      	adds	r3, #255	; 0xff
 8013e64:	4ac4      	ldr	r2, [pc, #784]	; (8014178 <_malloc_r+0x344>)
 8013e66:	429d      	cmp	r5, r3
 8013e68:	d820      	bhi.n	8013eac <_malloc_r+0x78>
 8013e6a:	0029      	movs	r1, r5
 8013e6c:	3108      	adds	r1, #8
 8013e6e:	1851      	adds	r1, r2, r1
 8013e70:	0008      	movs	r0, r1
 8013e72:	684c      	ldr	r4, [r1, #4]
 8013e74:	3808      	subs	r0, #8
 8013e76:	08eb      	lsrs	r3, r5, #3
 8013e78:	4284      	cmp	r4, r0
 8013e7a:	d104      	bne.n	8013e86 <_malloc_r+0x52>
 8013e7c:	68cc      	ldr	r4, [r1, #12]
 8013e7e:	3302      	adds	r3, #2
 8013e80:	469c      	mov	ip, r3
 8013e82:	42a1      	cmp	r1, r4
 8013e84:	d02a      	beq.n	8013edc <_malloc_r+0xa8>
 8013e86:	2303      	movs	r3, #3
 8013e88:	6862      	ldr	r2, [r4, #4]
 8013e8a:	68a1      	ldr	r1, [r4, #8]
 8013e8c:	439a      	bics	r2, r3
 8013e8e:	0013      	movs	r3, r2
 8013e90:	68e2      	ldr	r2, [r4, #12]
 8013e92:	18e3      	adds	r3, r4, r3
 8013e94:	60ca      	str	r2, [r1, #12]
 8013e96:	6091      	str	r1, [r2, #8]
 8013e98:	2201      	movs	r2, #1
 8013e9a:	6859      	ldr	r1, [r3, #4]
 8013e9c:	430a      	orrs	r2, r1
 8013e9e:	605a      	str	r2, [r3, #4]
 8013ea0:	9801      	ldr	r0, [sp, #4]
 8013ea2:	f000 fa19 	bl	80142d8 <__malloc_unlock>
 8013ea6:	0020      	movs	r0, r4
 8013ea8:	3008      	adds	r0, #8
 8013eaa:	e7d1      	b.n	8013e50 <_malloc_r+0x1c>
 8013eac:	0a69      	lsrs	r1, r5, #9
 8013eae:	233f      	movs	r3, #63	; 0x3f
 8013eb0:	2900      	cmp	r1, #0
 8013eb2:	d003      	beq.n	8013ebc <_malloc_r+0x88>
 8013eb4:	2904      	cmp	r1, #4
 8013eb6:	d828      	bhi.n	8013f0a <_malloc_r+0xd6>
 8013eb8:	09ab      	lsrs	r3, r5, #6
 8013eba:	3338      	adds	r3, #56	; 0x38
 8013ebc:	2103      	movs	r1, #3
 8013ebe:	468c      	mov	ip, r1
 8013ec0:	00d8      	lsls	r0, r3, #3
 8013ec2:	1880      	adds	r0, r0, r2
 8013ec4:	68c4      	ldr	r4, [r0, #12]
 8013ec6:	4284      	cmp	r4, r0
 8013ec8:	d006      	beq.n	8013ed8 <_malloc_r+0xa4>
 8013eca:	4666      	mov	r6, ip
 8013ecc:	6861      	ldr	r1, [r4, #4]
 8013ece:	43b1      	bics	r1, r6
 8013ed0:	1b4f      	subs	r7, r1, r5
 8013ed2:	2f0f      	cmp	r7, #15
 8013ed4:	dd31      	ble.n	8013f3a <_malloc_r+0x106>
 8013ed6:	3b01      	subs	r3, #1
 8013ed8:	3301      	adds	r3, #1
 8013eda:	469c      	mov	ip, r3
 8013edc:	6914      	ldr	r4, [r2, #16]
 8013ede:	49a7      	ldr	r1, [pc, #668]	; (801417c <_malloc_r+0x348>)
 8013ee0:	428c      	cmp	r4, r1
 8013ee2:	d055      	beq.n	8013f90 <_malloc_r+0x15c>
 8013ee4:	2303      	movs	r3, #3
 8013ee6:	6860      	ldr	r0, [r4, #4]
 8013ee8:	4398      	bics	r0, r3
 8013eea:	0003      	movs	r3, r0
 8013eec:	1b46      	subs	r6, r0, r5
 8013eee:	2e0f      	cmp	r6, #15
 8013ef0:	dd31      	ble.n	8013f56 <_malloc_r+0x122>
 8013ef2:	2701      	movs	r7, #1
 8013ef4:	1960      	adds	r0, r4, r5
 8013ef6:	433d      	orrs	r5, r7
 8013ef8:	4337      	orrs	r7, r6
 8013efa:	6065      	str	r5, [r4, #4]
 8013efc:	6150      	str	r0, [r2, #20]
 8013efe:	6110      	str	r0, [r2, #16]
 8013f00:	60c1      	str	r1, [r0, #12]
 8013f02:	6081      	str	r1, [r0, #8]
 8013f04:	6047      	str	r7, [r0, #4]
 8013f06:	50e6      	str	r6, [r4, r3]
 8013f08:	e7ca      	b.n	8013ea0 <_malloc_r+0x6c>
 8013f0a:	2914      	cmp	r1, #20
 8013f0c:	d802      	bhi.n	8013f14 <_malloc_r+0xe0>
 8013f0e:	000b      	movs	r3, r1
 8013f10:	335b      	adds	r3, #91	; 0x5b
 8013f12:	e7d3      	b.n	8013ebc <_malloc_r+0x88>
 8013f14:	2954      	cmp	r1, #84	; 0x54
 8013f16:	d802      	bhi.n	8013f1e <_malloc_r+0xea>
 8013f18:	0b2b      	lsrs	r3, r5, #12
 8013f1a:	336e      	adds	r3, #110	; 0x6e
 8013f1c:	e7ce      	b.n	8013ebc <_malloc_r+0x88>
 8013f1e:	23aa      	movs	r3, #170	; 0xaa
 8013f20:	005b      	lsls	r3, r3, #1
 8013f22:	4299      	cmp	r1, r3
 8013f24:	d802      	bhi.n	8013f2c <_malloc_r+0xf8>
 8013f26:	0beb      	lsrs	r3, r5, #15
 8013f28:	3377      	adds	r3, #119	; 0x77
 8013f2a:	e7c7      	b.n	8013ebc <_malloc_r+0x88>
 8013f2c:	4894      	ldr	r0, [pc, #592]	; (8014180 <_malloc_r+0x34c>)
 8013f2e:	237e      	movs	r3, #126	; 0x7e
 8013f30:	4281      	cmp	r1, r0
 8013f32:	d8c3      	bhi.n	8013ebc <_malloc_r+0x88>
 8013f34:	0cab      	lsrs	r3, r5, #18
 8013f36:	337c      	adds	r3, #124	; 0x7c
 8013f38:	e7c0      	b.n	8013ebc <_malloc_r+0x88>
 8013f3a:	68e6      	ldr	r6, [r4, #12]
 8013f3c:	2f00      	cmp	r7, #0
 8013f3e:	db08      	blt.n	8013f52 <_malloc_r+0x11e>
 8013f40:	68a3      	ldr	r3, [r4, #8]
 8013f42:	1861      	adds	r1, r4, r1
 8013f44:	60de      	str	r6, [r3, #12]
 8013f46:	60b3      	str	r3, [r6, #8]
 8013f48:	2301      	movs	r3, #1
 8013f4a:	684a      	ldr	r2, [r1, #4]
 8013f4c:	4313      	orrs	r3, r2
 8013f4e:	604b      	str	r3, [r1, #4]
 8013f50:	e7a6      	b.n	8013ea0 <_malloc_r+0x6c>
 8013f52:	0034      	movs	r4, r6
 8013f54:	e7b7      	b.n	8013ec6 <_malloc_r+0x92>
 8013f56:	6151      	str	r1, [r2, #20]
 8013f58:	6111      	str	r1, [r2, #16]
 8013f5a:	2e00      	cmp	r6, #0
 8013f5c:	db05      	blt.n	8013f6a <_malloc_r+0x136>
 8013f5e:	2101      	movs	r1, #1
 8013f60:	1823      	adds	r3, r4, r0
 8013f62:	685a      	ldr	r2, [r3, #4]
 8013f64:	4311      	orrs	r1, r2
 8013f66:	6059      	str	r1, [r3, #4]
 8013f68:	e79a      	b.n	8013ea0 <_malloc_r+0x6c>
 8013f6a:	4986      	ldr	r1, [pc, #536]	; (8014184 <_malloc_r+0x350>)
 8013f6c:	6857      	ldr	r7, [r2, #4]
 8013f6e:	4288      	cmp	r0, r1
 8013f70:	d900      	bls.n	8013f74 <_malloc_r+0x140>
 8013f72:	e090      	b.n	8014096 <_malloc_r+0x262>
 8013f74:	08c3      	lsrs	r3, r0, #3
 8013f76:	39ff      	subs	r1, #255	; 0xff
 8013f78:	1098      	asrs	r0, r3, #2
 8013f7a:	39ff      	subs	r1, #255	; 0xff
 8013f7c:	4081      	lsls	r1, r0
 8013f7e:	00db      	lsls	r3, r3, #3
 8013f80:	4339      	orrs	r1, r7
 8013f82:	6051      	str	r1, [r2, #4]
 8013f84:	189a      	adds	r2, r3, r2
 8013f86:	6893      	ldr	r3, [r2, #8]
 8013f88:	60e2      	str	r2, [r4, #12]
 8013f8a:	60a3      	str	r3, [r4, #8]
 8013f8c:	6094      	str	r4, [r2, #8]
 8013f8e:	60dc      	str	r4, [r3, #12]
 8013f90:	4663      	mov	r3, ip
 8013f92:	2201      	movs	r2, #1
 8013f94:	4978      	ldr	r1, [pc, #480]	; (8014178 <_malloc_r+0x344>)
 8013f96:	109b      	asrs	r3, r3, #2
 8013f98:	6848      	ldr	r0, [r1, #4]
 8013f9a:	409a      	lsls	r2, r3
 8013f9c:	4290      	cmp	r0, r2
 8013f9e:	d32d      	bcc.n	8013ffc <_malloc_r+0x1c8>
 8013fa0:	4202      	tst	r2, r0
 8013fa2:	d109      	bne.n	8013fb8 <_malloc_r+0x184>
 8013fa4:	2303      	movs	r3, #3
 8013fa6:	4664      	mov	r4, ip
 8013fa8:	439c      	bics	r4, r3
 8013faa:	0023      	movs	r3, r4
 8013fac:	3304      	adds	r3, #4
 8013fae:	469c      	mov	ip, r3
 8013fb0:	0052      	lsls	r2, r2, #1
 8013fb2:	4202      	tst	r2, r0
 8013fb4:	d100      	bne.n	8013fb8 <_malloc_r+0x184>
 8013fb6:	e0a4      	b.n	8014102 <_malloc_r+0x2ce>
 8013fb8:	4663      	mov	r3, ip
 8013fba:	00db      	lsls	r3, r3, #3
 8013fbc:	18cb      	adds	r3, r1, r3
 8013fbe:	9303      	str	r3, [sp, #12]
 8013fc0:	001f      	movs	r7, r3
 8013fc2:	4663      	mov	r3, ip
 8013fc4:	9302      	str	r3, [sp, #8]
 8013fc6:	68fc      	ldr	r4, [r7, #12]
 8013fc8:	42bc      	cmp	r4, r7
 8013fca:	d000      	beq.n	8013fce <_malloc_r+0x19a>
 8013fcc:	e09c      	b.n	8014108 <_malloc_r+0x2d4>
 8013fce:	2003      	movs	r0, #3
 8013fd0:	9b02      	ldr	r3, [sp, #8]
 8013fd2:	3708      	adds	r7, #8
 8013fd4:	3301      	adds	r3, #1
 8013fd6:	9302      	str	r3, [sp, #8]
 8013fd8:	4203      	tst	r3, r0
 8013fda:	d1f4      	bne.n	8013fc6 <_malloc_r+0x192>
 8013fdc:	4663      	mov	r3, ip
 8013fde:	2003      	movs	r0, #3
 8013fe0:	4203      	tst	r3, r0
 8013fe2:	d000      	beq.n	8013fe6 <_malloc_r+0x1b2>
 8013fe4:	e0b3      	b.n	801414e <_malloc_r+0x31a>
 8013fe6:	684b      	ldr	r3, [r1, #4]
 8013fe8:	4393      	bics	r3, r2
 8013fea:	604b      	str	r3, [r1, #4]
 8013fec:	4b62      	ldr	r3, [pc, #392]	; (8014178 <_malloc_r+0x344>)
 8013fee:	0052      	lsls	r2, r2, #1
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	4293      	cmp	r3, r2
 8013ff4:	d302      	bcc.n	8013ffc <_malloc_r+0x1c8>
 8013ff6:	2a00      	cmp	r2, #0
 8013ff8:	d000      	beq.n	8013ffc <_malloc_r+0x1c8>
 8013ffa:	e0b9      	b.n	8014170 <_malloc_r+0x33c>
 8013ffc:	2303      	movs	r3, #3
 8013ffe:	688f      	ldr	r7, [r1, #8]
 8014000:	687a      	ldr	r2, [r7, #4]
 8014002:	439a      	bics	r2, r3
 8014004:	9202      	str	r2, [sp, #8]
 8014006:	42aa      	cmp	r2, r5
 8014008:	d303      	bcc.n	8014012 <_malloc_r+0x1de>
 801400a:	1b52      	subs	r2, r2, r5
 801400c:	2a0f      	cmp	r2, #15
 801400e:	dd00      	ble.n	8014012 <_malloc_r+0x1de>
 8014010:	e116      	b.n	8014240 <_malloc_r+0x40c>
 8014012:	4b5d      	ldr	r3, [pc, #372]	; (8014188 <_malloc_r+0x354>)
 8014014:	2008      	movs	r0, #8
 8014016:	681e      	ldr	r6, [r3, #0]
 8014018:	f002 fd58 	bl	8016acc <sysconf>
 801401c:	4b5b      	ldr	r3, [pc, #364]	; (801418c <_malloc_r+0x358>)
 801401e:	3610      	adds	r6, #16
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	1976      	adds	r6, r6, r5
 8014024:	9003      	str	r0, [sp, #12]
 8014026:	3301      	adds	r3, #1
 8014028:	d003      	beq.n	8014032 <_malloc_r+0x1fe>
 801402a:	3e01      	subs	r6, #1
 801402c:	1836      	adds	r6, r6, r0
 801402e:	4243      	negs	r3, r0
 8014030:	401e      	ands	r6, r3
 8014032:	0031      	movs	r1, r6
 8014034:	9801      	ldr	r0, [sp, #4]
 8014036:	f000 fb27 	bl	8014688 <_sbrk_r>
 801403a:	0004      	movs	r4, r0
 801403c:	1c43      	adds	r3, r0, #1
 801403e:	d100      	bne.n	8014042 <_malloc_r+0x20e>
 8014040:	e0d6      	b.n	80141f0 <_malloc_r+0x3bc>
 8014042:	9b02      	ldr	r3, [sp, #8]
 8014044:	18fb      	adds	r3, r7, r3
 8014046:	4283      	cmp	r3, r0
 8014048:	d903      	bls.n	8014052 <_malloc_r+0x21e>
 801404a:	4a4b      	ldr	r2, [pc, #300]	; (8014178 <_malloc_r+0x344>)
 801404c:	4297      	cmp	r7, r2
 801404e:	d000      	beq.n	8014052 <_malloc_r+0x21e>
 8014050:	e0ce      	b.n	80141f0 <_malloc_r+0x3bc>
 8014052:	494f      	ldr	r1, [pc, #316]	; (8014190 <_malloc_r+0x35c>)
 8014054:	680a      	ldr	r2, [r1, #0]
 8014056:	18b2      	adds	r2, r6, r2
 8014058:	600a      	str	r2, [r1, #0]
 801405a:	9903      	ldr	r1, [sp, #12]
 801405c:	4694      	mov	ip, r2
 801405e:	1e48      	subs	r0, r1, #1
 8014060:	42a3      	cmp	r3, r4
 8014062:	d000      	beq.n	8014066 <_malloc_r+0x232>
 8014064:	e09a      	b.n	801419c <_malloc_r+0x368>
 8014066:	4203      	tst	r3, r0
 8014068:	d000      	beq.n	801406c <_malloc_r+0x238>
 801406a:	e097      	b.n	801419c <_malloc_r+0x368>
 801406c:	9a02      	ldr	r2, [sp, #8]
 801406e:	4b42      	ldr	r3, [pc, #264]	; (8014178 <_malloc_r+0x344>)
 8014070:	1992      	adds	r2, r2, r6
 8014072:	2601      	movs	r6, #1
 8014074:	689b      	ldr	r3, [r3, #8]
 8014076:	4316      	orrs	r6, r2
 8014078:	605e      	str	r6, [r3, #4]
 801407a:	4b45      	ldr	r3, [pc, #276]	; (8014190 <_malloc_r+0x35c>)
 801407c:	4a45      	ldr	r2, [pc, #276]	; (8014194 <_malloc_r+0x360>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	6811      	ldr	r1, [r2, #0]
 8014082:	428b      	cmp	r3, r1
 8014084:	d900      	bls.n	8014088 <_malloc_r+0x254>
 8014086:	6013      	str	r3, [r2, #0]
 8014088:	4a43      	ldr	r2, [pc, #268]	; (8014198 <_malloc_r+0x364>)
 801408a:	6811      	ldr	r1, [r2, #0]
 801408c:	428b      	cmp	r3, r1
 801408e:	d800      	bhi.n	8014092 <_malloc_r+0x25e>
 8014090:	e0ae      	b.n	80141f0 <_malloc_r+0x3bc>
 8014092:	6013      	str	r3, [r2, #0]
 8014094:	e0ac      	b.n	80141f0 <_malloc_r+0x3bc>
 8014096:	0a40      	lsrs	r0, r0, #9
 8014098:	2804      	cmp	r0, #4
 801409a:	d810      	bhi.n	80140be <_malloc_r+0x28a>
 801409c:	0999      	lsrs	r1, r3, #6
 801409e:	3138      	adds	r1, #56	; 0x38
 80140a0:	00ce      	lsls	r6, r1, #3
 80140a2:	18b6      	adds	r6, r6, r2
 80140a4:	68b0      	ldr	r0, [r6, #8]
 80140a6:	4286      	cmp	r6, r0
 80140a8:	d124      	bne.n	80140f4 <_malloc_r+0x2c0>
 80140aa:	2301      	movs	r3, #1
 80140ac:	1089      	asrs	r1, r1, #2
 80140ae:	408b      	lsls	r3, r1
 80140b0:	433b      	orrs	r3, r7
 80140b2:	6053      	str	r3, [r2, #4]
 80140b4:	60e6      	str	r6, [r4, #12]
 80140b6:	60a0      	str	r0, [r4, #8]
 80140b8:	60b4      	str	r4, [r6, #8]
 80140ba:	60c4      	str	r4, [r0, #12]
 80140bc:	e768      	b.n	8013f90 <_malloc_r+0x15c>
 80140be:	2814      	cmp	r0, #20
 80140c0:	d802      	bhi.n	80140c8 <_malloc_r+0x294>
 80140c2:	0001      	movs	r1, r0
 80140c4:	315b      	adds	r1, #91	; 0x5b
 80140c6:	e7eb      	b.n	80140a0 <_malloc_r+0x26c>
 80140c8:	2854      	cmp	r0, #84	; 0x54
 80140ca:	d802      	bhi.n	80140d2 <_malloc_r+0x29e>
 80140cc:	0b19      	lsrs	r1, r3, #12
 80140ce:	316e      	adds	r1, #110	; 0x6e
 80140d0:	e7e6      	b.n	80140a0 <_malloc_r+0x26c>
 80140d2:	21aa      	movs	r1, #170	; 0xaa
 80140d4:	0049      	lsls	r1, r1, #1
 80140d6:	4288      	cmp	r0, r1
 80140d8:	d802      	bhi.n	80140e0 <_malloc_r+0x2ac>
 80140da:	0bd9      	lsrs	r1, r3, #15
 80140dc:	3177      	adds	r1, #119	; 0x77
 80140de:	e7df      	b.n	80140a0 <_malloc_r+0x26c>
 80140e0:	4e27      	ldr	r6, [pc, #156]	; (8014180 <_malloc_r+0x34c>)
 80140e2:	217e      	movs	r1, #126	; 0x7e
 80140e4:	42b0      	cmp	r0, r6
 80140e6:	d8db      	bhi.n	80140a0 <_malloc_r+0x26c>
 80140e8:	0c99      	lsrs	r1, r3, #18
 80140ea:	317c      	adds	r1, #124	; 0x7c
 80140ec:	e7d8      	b.n	80140a0 <_malloc_r+0x26c>
 80140ee:	6880      	ldr	r0, [r0, #8]
 80140f0:	4286      	cmp	r6, r0
 80140f2:	d004      	beq.n	80140fe <_malloc_r+0x2ca>
 80140f4:	2103      	movs	r1, #3
 80140f6:	6842      	ldr	r2, [r0, #4]
 80140f8:	438a      	bics	r2, r1
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d8f7      	bhi.n	80140ee <_malloc_r+0x2ba>
 80140fe:	68c6      	ldr	r6, [r0, #12]
 8014100:	e7d8      	b.n	80140b4 <_malloc_r+0x280>
 8014102:	2304      	movs	r3, #4
 8014104:	449c      	add	ip, r3
 8014106:	e753      	b.n	8013fb0 <_malloc_r+0x17c>
 8014108:	2003      	movs	r0, #3
 801410a:	6863      	ldr	r3, [r4, #4]
 801410c:	4383      	bics	r3, r0
 801410e:	1b5e      	subs	r6, r3, r5
 8014110:	68e0      	ldr	r0, [r4, #12]
 8014112:	2e0f      	cmp	r6, #15
 8014114:	dd0e      	ble.n	8014134 <_malloc_r+0x300>
 8014116:	2701      	movs	r7, #1
 8014118:	1962      	adds	r2, r4, r5
 801411a:	433d      	orrs	r5, r7
 801411c:	6065      	str	r5, [r4, #4]
 801411e:	68a5      	ldr	r5, [r4, #8]
 8014120:	4337      	orrs	r7, r6
 8014122:	60e8      	str	r0, [r5, #12]
 8014124:	6085      	str	r5, [r0, #8]
 8014126:	614a      	str	r2, [r1, #20]
 8014128:	610a      	str	r2, [r1, #16]
 801412a:	4914      	ldr	r1, [pc, #80]	; (801417c <_malloc_r+0x348>)
 801412c:	6057      	str	r7, [r2, #4]
 801412e:	60d1      	str	r1, [r2, #12]
 8014130:	6091      	str	r1, [r2, #8]
 8014132:	e6e8      	b.n	8013f06 <_malloc_r+0xd2>
 8014134:	2e00      	cmp	r6, #0
 8014136:	db08      	blt.n	801414a <_malloc_r+0x316>
 8014138:	2201      	movs	r2, #1
 801413a:	18e3      	adds	r3, r4, r3
 801413c:	6859      	ldr	r1, [r3, #4]
 801413e:	430a      	orrs	r2, r1
 8014140:	605a      	str	r2, [r3, #4]
 8014142:	68a3      	ldr	r3, [r4, #8]
 8014144:	60d8      	str	r0, [r3, #12]
 8014146:	6083      	str	r3, [r0, #8]
 8014148:	e6aa      	b.n	8013ea0 <_malloc_r+0x6c>
 801414a:	0004      	movs	r4, r0
 801414c:	e73c      	b.n	8013fc8 <_malloc_r+0x194>
 801414e:	2301      	movs	r3, #1
 8014150:	425b      	negs	r3, r3
 8014152:	449c      	add	ip, r3
 8014154:	9b03      	ldr	r3, [sp, #12]
 8014156:	6818      	ldr	r0, [r3, #0]
 8014158:	3b08      	subs	r3, #8
 801415a:	9003      	str	r0, [sp, #12]
 801415c:	4298      	cmp	r0, r3
 801415e:	d100      	bne.n	8014162 <_malloc_r+0x32e>
 8014160:	e73c      	b.n	8013fdc <_malloc_r+0x1a8>
 8014162:	e743      	b.n	8013fec <_malloc_r+0x1b8>
 8014164:	2004      	movs	r0, #4
 8014166:	0052      	lsls	r2, r2, #1
 8014168:	4484      	add	ip, r0
 801416a:	421a      	tst	r2, r3
 801416c:	d0fa      	beq.n	8014164 <_malloc_r+0x330>
 801416e:	e723      	b.n	8013fb8 <_malloc_r+0x184>
 8014170:	9802      	ldr	r0, [sp, #8]
 8014172:	4684      	mov	ip, r0
 8014174:	e7f9      	b.n	801416a <_malloc_r+0x336>
 8014176:	46c0      	nop			; (mov r8, r8)
 8014178:	2000068c 	.word	0x2000068c
 801417c:	20000694 	.word	0x20000694
 8014180:	00000554 	.word	0x00000554
 8014184:	000001ff 	.word	0x000001ff
 8014188:	20006950 	.word	0x20006950
 801418c:	20000a94 	.word	0x20000a94
 8014190:	20006920 	.word	0x20006920
 8014194:	20006948 	.word	0x20006948
 8014198:	2000694c 	.word	0x2000694c
 801419c:	492e      	ldr	r1, [pc, #184]	; (8014258 <_malloc_r+0x424>)
 801419e:	680a      	ldr	r2, [r1, #0]
 80141a0:	3201      	adds	r2, #1
 80141a2:	d133      	bne.n	801420c <_malloc_r+0x3d8>
 80141a4:	600c      	str	r4, [r1, #0]
 80141a6:	2307      	movs	r3, #7
 80141a8:	4023      	ands	r3, r4
 80141aa:	d002      	beq.n	80141b2 <_malloc_r+0x37e>
 80141ac:	2208      	movs	r2, #8
 80141ae:	1ad3      	subs	r3, r2, r3
 80141b0:	18e4      	adds	r4, r4, r3
 80141b2:	9a03      	ldr	r2, [sp, #12]
 80141b4:	19a6      	adds	r6, r4, r6
 80141b6:	18d3      	adds	r3, r2, r3
 80141b8:	4006      	ands	r6, r0
 80141ba:	1b9e      	subs	r6, r3, r6
 80141bc:	0031      	movs	r1, r6
 80141be:	9801      	ldr	r0, [sp, #4]
 80141c0:	f000 fa62 	bl	8014688 <_sbrk_r>
 80141c4:	1c43      	adds	r3, r0, #1
 80141c6:	d101      	bne.n	80141cc <_malloc_r+0x398>
 80141c8:	0020      	movs	r0, r4
 80141ca:	2600      	movs	r6, #0
 80141cc:	4a23      	ldr	r2, [pc, #140]	; (801425c <_malloc_r+0x428>)
 80141ce:	1b00      	subs	r0, r0, r4
 80141d0:	6813      	ldr	r3, [r2, #0]
 80141d2:	199b      	adds	r3, r3, r6
 80141d4:	6013      	str	r3, [r2, #0]
 80141d6:	2301      	movs	r3, #1
 80141d8:	4a21      	ldr	r2, [pc, #132]	; (8014260 <_malloc_r+0x42c>)
 80141da:	1986      	adds	r6, r0, r6
 80141dc:	431e      	orrs	r6, r3
 80141de:	6094      	str	r4, [r2, #8]
 80141e0:	6066      	str	r6, [r4, #4]
 80141e2:	4297      	cmp	r7, r2
 80141e4:	d100      	bne.n	80141e8 <_malloc_r+0x3b4>
 80141e6:	e748      	b.n	801407a <_malloc_r+0x246>
 80141e8:	9a02      	ldr	r2, [sp, #8]
 80141ea:	2a0f      	cmp	r2, #15
 80141ec:	d813      	bhi.n	8014216 <_malloc_r+0x3e2>
 80141ee:	6063      	str	r3, [r4, #4]
 80141f0:	2203      	movs	r2, #3
 80141f2:	4b1b      	ldr	r3, [pc, #108]	; (8014260 <_malloc_r+0x42c>)
 80141f4:	689b      	ldr	r3, [r3, #8]
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	4393      	bics	r3, r2
 80141fa:	1b5a      	subs	r2, r3, r5
 80141fc:	42ab      	cmp	r3, r5
 80141fe:	d301      	bcc.n	8014204 <_malloc_r+0x3d0>
 8014200:	2a0f      	cmp	r2, #15
 8014202:	dc1d      	bgt.n	8014240 <_malloc_r+0x40c>
 8014204:	9801      	ldr	r0, [sp, #4]
 8014206:	f000 f867 	bl	80142d8 <__malloc_unlock>
 801420a:	e620      	b.n	8013e4e <_malloc_r+0x1a>
 801420c:	1ae3      	subs	r3, r4, r3
 801420e:	4a13      	ldr	r2, [pc, #76]	; (801425c <_malloc_r+0x428>)
 8014210:	4463      	add	r3, ip
 8014212:	6013      	str	r3, [r2, #0]
 8014214:	e7c7      	b.n	80141a6 <_malloc_r+0x372>
 8014216:	2207      	movs	r2, #7
 8014218:	9e02      	ldr	r6, [sp, #8]
 801421a:	3e0c      	subs	r6, #12
 801421c:	4396      	bics	r6, r2
 801421e:	687a      	ldr	r2, [r7, #4]
 8014220:	4013      	ands	r3, r2
 8014222:	2205      	movs	r2, #5
 8014224:	4333      	orrs	r3, r6
 8014226:	607b      	str	r3, [r7, #4]
 8014228:	19bb      	adds	r3, r7, r6
 801422a:	605a      	str	r2, [r3, #4]
 801422c:	609a      	str	r2, [r3, #8]
 801422e:	2e0f      	cmp	r6, #15
 8014230:	d800      	bhi.n	8014234 <_malloc_r+0x400>
 8014232:	e722      	b.n	801407a <_malloc_r+0x246>
 8014234:	0039      	movs	r1, r7
 8014236:	9801      	ldr	r0, [sp, #4]
 8014238:	3108      	adds	r1, #8
 801423a:	f003 fb39 	bl	80178b0 <_free_r>
 801423e:	e71c      	b.n	801407a <_malloc_r+0x246>
 8014240:	2301      	movs	r3, #1
 8014242:	0018      	movs	r0, r3
 8014244:	4906      	ldr	r1, [pc, #24]	; (8014260 <_malloc_r+0x42c>)
 8014246:	4328      	orrs	r0, r5
 8014248:	688c      	ldr	r4, [r1, #8]
 801424a:	4313      	orrs	r3, r2
 801424c:	1965      	adds	r5, r4, r5
 801424e:	6060      	str	r0, [r4, #4]
 8014250:	608d      	str	r5, [r1, #8]
 8014252:	606b      	str	r3, [r5, #4]
 8014254:	e624      	b.n	8013ea0 <_malloc_r+0x6c>
 8014256:	46c0      	nop			; (mov r8, r8)
 8014258:	20000a94 	.word	0x20000a94
 801425c:	20006920 	.word	0x20006920
 8014260:	2000068c 	.word	0x2000068c

08014264 <__ascii_mbtowc>:
 8014264:	b082      	sub	sp, #8
 8014266:	2900      	cmp	r1, #0
 8014268:	d100      	bne.n	801426c <__ascii_mbtowc+0x8>
 801426a:	a901      	add	r1, sp, #4
 801426c:	1e10      	subs	r0, r2, #0
 801426e:	d006      	beq.n	801427e <__ascii_mbtowc+0x1a>
 8014270:	2b00      	cmp	r3, #0
 8014272:	d006      	beq.n	8014282 <__ascii_mbtowc+0x1e>
 8014274:	7813      	ldrb	r3, [r2, #0]
 8014276:	600b      	str	r3, [r1, #0]
 8014278:	7810      	ldrb	r0, [r2, #0]
 801427a:	1e43      	subs	r3, r0, #1
 801427c:	4198      	sbcs	r0, r3
 801427e:	b002      	add	sp, #8
 8014280:	4770      	bx	lr
 8014282:	2002      	movs	r0, #2
 8014284:	4240      	negs	r0, r0
 8014286:	e7fa      	b.n	801427e <__ascii_mbtowc+0x1a>

08014288 <memcmp>:
 8014288:	b530      	push	{r4, r5, lr}
 801428a:	2400      	movs	r4, #0
 801428c:	42a2      	cmp	r2, r4
 801428e:	d101      	bne.n	8014294 <memcmp+0xc>
 8014290:	2000      	movs	r0, #0
 8014292:	e005      	b.n	80142a0 <memcmp+0x18>
 8014294:	5d03      	ldrb	r3, [r0, r4]
 8014296:	1c65      	adds	r5, r4, #1
 8014298:	5d0c      	ldrb	r4, [r1, r4]
 801429a:	42a3      	cmp	r3, r4
 801429c:	d001      	beq.n	80142a2 <memcmp+0x1a>
 801429e:	1b18      	subs	r0, r3, r4
 80142a0:	bd30      	pop	{r4, r5, pc}
 80142a2:	002c      	movs	r4, r5
 80142a4:	e7f2      	b.n	801428c <memcmp+0x4>

080142a6 <memcpy>:
 80142a6:	2300      	movs	r3, #0
 80142a8:	b510      	push	{r4, lr}
 80142aa:	429a      	cmp	r2, r3
 80142ac:	d100      	bne.n	80142b0 <memcpy+0xa>
 80142ae:	bd10      	pop	{r4, pc}
 80142b0:	5ccc      	ldrb	r4, [r1, r3]
 80142b2:	54c4      	strb	r4, [r0, r3]
 80142b4:	3301      	adds	r3, #1
 80142b6:	e7f8      	b.n	80142aa <memcpy+0x4>

080142b8 <memset>:
 80142b8:	0003      	movs	r3, r0
 80142ba:	1812      	adds	r2, r2, r0
 80142bc:	4293      	cmp	r3, r2
 80142be:	d100      	bne.n	80142c2 <memset+0xa>
 80142c0:	4770      	bx	lr
 80142c2:	7019      	strb	r1, [r3, #0]
 80142c4:	3301      	adds	r3, #1
 80142c6:	e7f9      	b.n	80142bc <memset+0x4>

080142c8 <__malloc_lock>:
 80142c8:	b510      	push	{r4, lr}
 80142ca:	4802      	ldr	r0, [pc, #8]	; (80142d4 <__malloc_lock+0xc>)
 80142cc:	f003 fee4 	bl	8018098 <__retarget_lock_acquire_recursive>
 80142d0:	bd10      	pop	{r4, pc}
 80142d2:	46c0      	nop			; (mov r8, r8)
 80142d4:	20006e8c 	.word	0x20006e8c

080142d8 <__malloc_unlock>:
 80142d8:	b510      	push	{r4, lr}
 80142da:	4802      	ldr	r0, [pc, #8]	; (80142e4 <__malloc_unlock+0xc>)
 80142dc:	f003 fedd 	bl	801809a <__retarget_lock_release_recursive>
 80142e0:	bd10      	pop	{r4, pc}
 80142e2:	46c0      	nop			; (mov r8, r8)
 80142e4:	20006e8c 	.word	0x20006e8c

080142e8 <rand>:
 80142e8:	4b09      	ldr	r3, [pc, #36]	; (8014310 <rand+0x28>)
 80142ea:	b510      	push	{r4, lr}
 80142ec:	681c      	ldr	r4, [r3, #0]
 80142ee:	4a09      	ldr	r2, [pc, #36]	; (8014314 <rand+0x2c>)
 80142f0:	34a8      	adds	r4, #168	; 0xa8
 80142f2:	6820      	ldr	r0, [r4, #0]
 80142f4:	6861      	ldr	r1, [r4, #4]
 80142f6:	4b08      	ldr	r3, [pc, #32]	; (8014318 <rand+0x30>)
 80142f8:	f7ec f95c 	bl	80005b4 <__aeabi_lmul>
 80142fc:	2201      	movs	r2, #1
 80142fe:	2300      	movs	r3, #0
 8014300:	1880      	adds	r0, r0, r2
 8014302:	4159      	adcs	r1, r3
 8014304:	6020      	str	r0, [r4, #0]
 8014306:	6061      	str	r1, [r4, #4]
 8014308:	0048      	lsls	r0, r1, #1
 801430a:	0840      	lsrs	r0, r0, #1
 801430c:	bd10      	pop	{r4, pc}
 801430e:	46c0      	nop			; (mov r8, r8)
 8014310:	200000f4 	.word	0x200000f4
 8014314:	4c957f2d 	.word	0x4c957f2d
 8014318:	5851f42d 	.word	0x5851f42d

0801431c <realloc>:
 801431c:	b510      	push	{r4, lr}
 801431e:	4b03      	ldr	r3, [pc, #12]	; (801432c <realloc+0x10>)
 8014320:	000a      	movs	r2, r1
 8014322:	0001      	movs	r1, r0
 8014324:	6818      	ldr	r0, [r3, #0]
 8014326:	f000 f803 	bl	8014330 <_realloc_r>
 801432a:	bd10      	pop	{r4, pc}
 801432c:	200000f4 	.word	0x200000f4

08014330 <_realloc_r>:
 8014330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014332:	b087      	sub	sp, #28
 8014334:	9003      	str	r0, [sp, #12]
 8014336:	1e0c      	subs	r4, r1, #0
 8014338:	9205      	str	r2, [sp, #20]
 801433a:	d106      	bne.n	801434a <_realloc_r+0x1a>
 801433c:	0011      	movs	r1, r2
 801433e:	f7ff fd79 	bl	8013e34 <_malloc_r>
 8014342:	0007      	movs	r7, r0
 8014344:	0038      	movs	r0, r7
 8014346:	b007      	add	sp, #28
 8014348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801434a:	9803      	ldr	r0, [sp, #12]
 801434c:	f7ff ffbc 	bl	80142c8 <__malloc_lock>
 8014350:	0023      	movs	r3, r4
 8014352:	3b08      	subs	r3, #8
 8014354:	685f      	ldr	r7, [r3, #4]
 8014356:	9302      	str	r3, [sp, #8]
 8014358:	003a      	movs	r2, r7
 801435a:	2303      	movs	r3, #3
 801435c:	9e05      	ldr	r6, [sp, #20]
 801435e:	439a      	bics	r2, r3
 8014360:	360b      	adds	r6, #11
 8014362:	9204      	str	r2, [sp, #16]
 8014364:	2e16      	cmp	r6, #22
 8014366:	d908      	bls.n	801437a <_realloc_r+0x4a>
 8014368:	3304      	adds	r3, #4
 801436a:	439e      	bics	r6, r3
 801436c:	9601      	str	r6, [sp, #4]
 801436e:	d506      	bpl.n	801437e <_realloc_r+0x4e>
 8014370:	230c      	movs	r3, #12
 8014372:	9a03      	ldr	r2, [sp, #12]
 8014374:	2700      	movs	r7, #0
 8014376:	6013      	str	r3, [r2, #0]
 8014378:	e7e4      	b.n	8014344 <_realloc_r+0x14>
 801437a:	2310      	movs	r3, #16
 801437c:	9301      	str	r3, [sp, #4]
 801437e:	9b01      	ldr	r3, [sp, #4]
 8014380:	9a05      	ldr	r2, [sp, #20]
 8014382:	4293      	cmp	r3, r2
 8014384:	d3f4      	bcc.n	8014370 <_realloc_r+0x40>
 8014386:	9b01      	ldr	r3, [sp, #4]
 8014388:	9a04      	ldr	r2, [sp, #16]
 801438a:	4293      	cmp	r3, r2
 801438c:	dc00      	bgt.n	8014390 <_realloc_r+0x60>
 801438e:	e16f      	b.n	8014670 <_realloc_r+0x340>
 8014390:	9b02      	ldr	r3, [sp, #8]
 8014392:	48bc      	ldr	r0, [pc, #752]	; (8014684 <_realloc_r+0x354>)
 8014394:	189b      	adds	r3, r3, r2
 8014396:	6882      	ldr	r2, [r0, #8]
 8014398:	4694      	mov	ip, r2
 801439a:	685a      	ldr	r2, [r3, #4]
 801439c:	459c      	cmp	ip, r3
 801439e:	d006      	beq.n	80143ae <_realloc_r+0x7e>
 80143a0:	2501      	movs	r5, #1
 80143a2:	0011      	movs	r1, r2
 80143a4:	43a9      	bics	r1, r5
 80143a6:	1859      	adds	r1, r3, r1
 80143a8:	6849      	ldr	r1, [r1, #4]
 80143aa:	4229      	tst	r1, r5
 80143ac:	d146      	bne.n	801443c <_realloc_r+0x10c>
 80143ae:	2103      	movs	r1, #3
 80143b0:	438a      	bics	r2, r1
 80143b2:	9904      	ldr	r1, [sp, #16]
 80143b4:	188e      	adds	r6, r1, r2
 80143b6:	9901      	ldr	r1, [sp, #4]
 80143b8:	459c      	cmp	ip, r3
 80143ba:	d117      	bne.n	80143ec <_realloc_r+0xbc>
 80143bc:	3110      	adds	r1, #16
 80143be:	42b1      	cmp	r1, r6
 80143c0:	dc3e      	bgt.n	8014440 <_realloc_r+0x110>
 80143c2:	9901      	ldr	r1, [sp, #4]
 80143c4:	9b02      	ldr	r3, [sp, #8]
 80143c6:	468c      	mov	ip, r1
 80143c8:	4463      	add	r3, ip
 80143ca:	6083      	str	r3, [r0, #8]
 80143cc:	001a      	movs	r2, r3
 80143ce:	1a73      	subs	r3, r6, r1
 80143d0:	2601      	movs	r6, #1
 80143d2:	4333      	orrs	r3, r6
 80143d4:	6053      	str	r3, [r2, #4]
 80143d6:	0023      	movs	r3, r4
 80143d8:	3b08      	subs	r3, #8
 80143da:	685a      	ldr	r2, [r3, #4]
 80143dc:	9803      	ldr	r0, [sp, #12]
 80143de:	4016      	ands	r6, r2
 80143e0:	430e      	orrs	r6, r1
 80143e2:	605e      	str	r6, [r3, #4]
 80143e4:	f7ff ff78 	bl	80142d8 <__malloc_unlock>
 80143e8:	0027      	movs	r7, r4
 80143ea:	e7ab      	b.n	8014344 <_realloc_r+0x14>
 80143ec:	42b1      	cmp	r1, r6
 80143ee:	dc27      	bgt.n	8014440 <_realloc_r+0x110>
 80143f0:	68da      	ldr	r2, [r3, #12]
 80143f2:	689b      	ldr	r3, [r3, #8]
 80143f4:	60da      	str	r2, [r3, #12]
 80143f6:	6093      	str	r3, [r2, #8]
 80143f8:	9b01      	ldr	r3, [sp, #4]
 80143fa:	9a02      	ldr	r2, [sp, #8]
 80143fc:	1af4      	subs	r4, r6, r3
 80143fe:	9b02      	ldr	r3, [sp, #8]
 8014400:	1992      	adds	r2, r2, r6
 8014402:	685b      	ldr	r3, [r3, #4]
 8014404:	9304      	str	r3, [sp, #16]
 8014406:	2301      	movs	r3, #1
 8014408:	9804      	ldr	r0, [sp, #16]
 801440a:	4018      	ands	r0, r3
 801440c:	2c0f      	cmp	r4, #15
 801440e:	d800      	bhi.n	8014412 <_realloc_r+0xe2>
 8014410:	e130      	b.n	8014674 <_realloc_r+0x344>
 8014412:	9d01      	ldr	r5, [sp, #4]
 8014414:	9902      	ldr	r1, [sp, #8]
 8014416:	4328      	orrs	r0, r5
 8014418:	1949      	adds	r1, r1, r5
 801441a:	9d02      	ldr	r5, [sp, #8]
 801441c:	431c      	orrs	r4, r3
 801441e:	6068      	str	r0, [r5, #4]
 8014420:	604c      	str	r4, [r1, #4]
 8014422:	6850      	ldr	r0, [r2, #4]
 8014424:	3108      	adds	r1, #8
 8014426:	4303      	orrs	r3, r0
 8014428:	6053      	str	r3, [r2, #4]
 801442a:	9803      	ldr	r0, [sp, #12]
 801442c:	f003 fa40 	bl	80178b0 <_free_r>
 8014430:	9803      	ldr	r0, [sp, #12]
 8014432:	f7ff ff51 	bl	80142d8 <__malloc_unlock>
 8014436:	9f02      	ldr	r7, [sp, #8]
 8014438:	3708      	adds	r7, #8
 801443a:	e783      	b.n	8014344 <_realloc_r+0x14>
 801443c:	2200      	movs	r2, #0
 801443e:	0013      	movs	r3, r2
 8014440:	07f9      	lsls	r1, r7, #31
 8014442:	d500      	bpl.n	8014446 <_realloc_r+0x116>
 8014444:	e0c6      	b.n	80145d4 <_realloc_r+0x2a4>
 8014446:	0021      	movs	r1, r4
 8014448:	3908      	subs	r1, #8
 801444a:	680d      	ldr	r5, [r1, #0]
 801444c:	9902      	ldr	r1, [sp, #8]
 801444e:	1b4d      	subs	r5, r1, r5
 8014450:	2103      	movs	r1, #3
 8014452:	686f      	ldr	r7, [r5, #4]
 8014454:	438f      	bics	r7, r1
 8014456:	9904      	ldr	r1, [sp, #16]
 8014458:	187f      	adds	r7, r7, r1
 801445a:	2b00      	cmp	r3, #0
 801445c:	d100      	bne.n	8014460 <_realloc_r+0x130>
 801445e:	e084      	b.n	801456a <_realloc_r+0x23a>
 8014460:	19d6      	adds	r6, r2, r7
 8014462:	459c      	cmp	ip, r3
 8014464:	d148      	bne.n	80144f8 <_realloc_r+0x1c8>
 8014466:	9b01      	ldr	r3, [sp, #4]
 8014468:	3310      	adds	r3, #16
 801446a:	42b3      	cmp	r3, r6
 801446c:	dc7d      	bgt.n	801456a <_realloc_r+0x23a>
 801446e:	68aa      	ldr	r2, [r5, #8]
 8014470:	68eb      	ldr	r3, [r5, #12]
 8014472:	002f      	movs	r7, r5
 8014474:	60d3      	str	r3, [r2, #12]
 8014476:	609a      	str	r2, [r3, #8]
 8014478:	000a      	movs	r2, r1
 801447a:	3a04      	subs	r2, #4
 801447c:	3708      	adds	r7, #8
 801447e:	2a24      	cmp	r2, #36	; 0x24
 8014480:	d835      	bhi.n	80144ee <_realloc_r+0x1be>
 8014482:	003b      	movs	r3, r7
 8014484:	2a13      	cmp	r2, #19
 8014486:	d908      	bls.n	801449a <_realloc_r+0x16a>
 8014488:	6823      	ldr	r3, [r4, #0]
 801448a:	60ab      	str	r3, [r5, #8]
 801448c:	6863      	ldr	r3, [r4, #4]
 801448e:	60eb      	str	r3, [r5, #12]
 8014490:	2a1b      	cmp	r2, #27
 8014492:	d81a      	bhi.n	80144ca <_realloc_r+0x19a>
 8014494:	002b      	movs	r3, r5
 8014496:	3408      	adds	r4, #8
 8014498:	3310      	adds	r3, #16
 801449a:	6822      	ldr	r2, [r4, #0]
 801449c:	601a      	str	r2, [r3, #0]
 801449e:	6862      	ldr	r2, [r4, #4]
 80144a0:	605a      	str	r2, [r3, #4]
 80144a2:	68a2      	ldr	r2, [r4, #8]
 80144a4:	609a      	str	r2, [r3, #8]
 80144a6:	9b01      	ldr	r3, [sp, #4]
 80144a8:	18ea      	adds	r2, r5, r3
 80144aa:	4b76      	ldr	r3, [pc, #472]	; (8014684 <_realloc_r+0x354>)
 80144ac:	609a      	str	r2, [r3, #8]
 80144ae:	9b01      	ldr	r3, [sp, #4]
 80144b0:	1af3      	subs	r3, r6, r3
 80144b2:	2601      	movs	r6, #1
 80144b4:	4333      	orrs	r3, r6
 80144b6:	6053      	str	r3, [r2, #4]
 80144b8:	686b      	ldr	r3, [r5, #4]
 80144ba:	401e      	ands	r6, r3
 80144bc:	9b01      	ldr	r3, [sp, #4]
 80144be:	431e      	orrs	r6, r3
 80144c0:	606e      	str	r6, [r5, #4]
 80144c2:	9803      	ldr	r0, [sp, #12]
 80144c4:	f7ff ff08 	bl	80142d8 <__malloc_unlock>
 80144c8:	e73c      	b.n	8014344 <_realloc_r+0x14>
 80144ca:	68a3      	ldr	r3, [r4, #8]
 80144cc:	612b      	str	r3, [r5, #16]
 80144ce:	68e3      	ldr	r3, [r4, #12]
 80144d0:	616b      	str	r3, [r5, #20]
 80144d2:	2a24      	cmp	r2, #36	; 0x24
 80144d4:	d003      	beq.n	80144de <_realloc_r+0x1ae>
 80144d6:	002b      	movs	r3, r5
 80144d8:	3410      	adds	r4, #16
 80144da:	3318      	adds	r3, #24
 80144dc:	e7dd      	b.n	801449a <_realloc_r+0x16a>
 80144de:	6923      	ldr	r3, [r4, #16]
 80144e0:	61ab      	str	r3, [r5, #24]
 80144e2:	002b      	movs	r3, r5
 80144e4:	6962      	ldr	r2, [r4, #20]
 80144e6:	3320      	adds	r3, #32
 80144e8:	61ea      	str	r2, [r5, #28]
 80144ea:	3418      	adds	r4, #24
 80144ec:	e7d5      	b.n	801449a <_realloc_r+0x16a>
 80144ee:	0021      	movs	r1, r4
 80144f0:	0038      	movs	r0, r7
 80144f2:	f003 fdde 	bl	80180b2 <memmove>
 80144f6:	e7d6      	b.n	80144a6 <_realloc_r+0x176>
 80144f8:	9a01      	ldr	r2, [sp, #4]
 80144fa:	42b2      	cmp	r2, r6
 80144fc:	dc35      	bgt.n	801456a <_realloc_r+0x23a>
 80144fe:	0028      	movs	r0, r5
 8014500:	68da      	ldr	r2, [r3, #12]
 8014502:	689b      	ldr	r3, [r3, #8]
 8014504:	3008      	adds	r0, #8
 8014506:	60da      	str	r2, [r3, #12]
 8014508:	6093      	str	r3, [r2, #8]
 801450a:	68aa      	ldr	r2, [r5, #8]
 801450c:	68eb      	ldr	r3, [r5, #12]
 801450e:	60d3      	str	r3, [r2, #12]
 8014510:	609a      	str	r2, [r3, #8]
 8014512:	9a04      	ldr	r2, [sp, #16]
 8014514:	3a04      	subs	r2, #4
 8014516:	2a24      	cmp	r2, #36	; 0x24
 8014518:	d823      	bhi.n	8014562 <_realloc_r+0x232>
 801451a:	2a13      	cmp	r2, #19
 801451c:	d907      	bls.n	801452e <_realloc_r+0x1fe>
 801451e:	6823      	ldr	r3, [r4, #0]
 8014520:	60ab      	str	r3, [r5, #8]
 8014522:	6863      	ldr	r3, [r4, #4]
 8014524:	60eb      	str	r3, [r5, #12]
 8014526:	2a1b      	cmp	r2, #27
 8014528:	d809      	bhi.n	801453e <_realloc_r+0x20e>
 801452a:	3408      	adds	r4, #8
 801452c:	3008      	adds	r0, #8
 801452e:	6823      	ldr	r3, [r4, #0]
 8014530:	6003      	str	r3, [r0, #0]
 8014532:	6863      	ldr	r3, [r4, #4]
 8014534:	6043      	str	r3, [r0, #4]
 8014536:	68a3      	ldr	r3, [r4, #8]
 8014538:	6083      	str	r3, [r0, #8]
 801453a:	9502      	str	r5, [sp, #8]
 801453c:	e75c      	b.n	80143f8 <_realloc_r+0xc8>
 801453e:	68a3      	ldr	r3, [r4, #8]
 8014540:	612b      	str	r3, [r5, #16]
 8014542:	68e3      	ldr	r3, [r4, #12]
 8014544:	616b      	str	r3, [r5, #20]
 8014546:	2a24      	cmp	r2, #36	; 0x24
 8014548:	d003      	beq.n	8014552 <_realloc_r+0x222>
 801454a:	0028      	movs	r0, r5
 801454c:	3410      	adds	r4, #16
 801454e:	3018      	adds	r0, #24
 8014550:	e7ed      	b.n	801452e <_realloc_r+0x1fe>
 8014552:	0028      	movs	r0, r5
 8014554:	6923      	ldr	r3, [r4, #16]
 8014556:	3020      	adds	r0, #32
 8014558:	61ab      	str	r3, [r5, #24]
 801455a:	6963      	ldr	r3, [r4, #20]
 801455c:	3418      	adds	r4, #24
 801455e:	61eb      	str	r3, [r5, #28]
 8014560:	e7e5      	b.n	801452e <_realloc_r+0x1fe>
 8014562:	0021      	movs	r1, r4
 8014564:	f003 fda5 	bl	80180b2 <memmove>
 8014568:	e7e7      	b.n	801453a <_realloc_r+0x20a>
 801456a:	9b01      	ldr	r3, [sp, #4]
 801456c:	42bb      	cmp	r3, r7
 801456e:	dc31      	bgt.n	80145d4 <_realloc_r+0x2a4>
 8014570:	0028      	movs	r0, r5
 8014572:	68aa      	ldr	r2, [r5, #8]
 8014574:	68eb      	ldr	r3, [r5, #12]
 8014576:	3008      	adds	r0, #8
 8014578:	60d3      	str	r3, [r2, #12]
 801457a:	609a      	str	r2, [r3, #8]
 801457c:	9a04      	ldr	r2, [sp, #16]
 801457e:	3a04      	subs	r2, #4
 8014580:	2a24      	cmp	r2, #36	; 0x24
 8014582:	d823      	bhi.n	80145cc <_realloc_r+0x29c>
 8014584:	2a13      	cmp	r2, #19
 8014586:	d907      	bls.n	8014598 <_realloc_r+0x268>
 8014588:	6823      	ldr	r3, [r4, #0]
 801458a:	60ab      	str	r3, [r5, #8]
 801458c:	6863      	ldr	r3, [r4, #4]
 801458e:	60eb      	str	r3, [r5, #12]
 8014590:	2a1b      	cmp	r2, #27
 8014592:	d809      	bhi.n	80145a8 <_realloc_r+0x278>
 8014594:	3408      	adds	r4, #8
 8014596:	3008      	adds	r0, #8
 8014598:	6823      	ldr	r3, [r4, #0]
 801459a:	6003      	str	r3, [r0, #0]
 801459c:	6863      	ldr	r3, [r4, #4]
 801459e:	6043      	str	r3, [r0, #4]
 80145a0:	68a3      	ldr	r3, [r4, #8]
 80145a2:	6083      	str	r3, [r0, #8]
 80145a4:	003e      	movs	r6, r7
 80145a6:	e7c8      	b.n	801453a <_realloc_r+0x20a>
 80145a8:	68a3      	ldr	r3, [r4, #8]
 80145aa:	612b      	str	r3, [r5, #16]
 80145ac:	68e3      	ldr	r3, [r4, #12]
 80145ae:	616b      	str	r3, [r5, #20]
 80145b0:	2a24      	cmp	r2, #36	; 0x24
 80145b2:	d003      	beq.n	80145bc <_realloc_r+0x28c>
 80145b4:	0028      	movs	r0, r5
 80145b6:	3410      	adds	r4, #16
 80145b8:	3018      	adds	r0, #24
 80145ba:	e7ed      	b.n	8014598 <_realloc_r+0x268>
 80145bc:	0028      	movs	r0, r5
 80145be:	6923      	ldr	r3, [r4, #16]
 80145c0:	3020      	adds	r0, #32
 80145c2:	61ab      	str	r3, [r5, #24]
 80145c4:	6963      	ldr	r3, [r4, #20]
 80145c6:	3418      	adds	r4, #24
 80145c8:	61eb      	str	r3, [r5, #28]
 80145ca:	e7e5      	b.n	8014598 <_realloc_r+0x268>
 80145cc:	0021      	movs	r1, r4
 80145ce:	f003 fd70 	bl	80180b2 <memmove>
 80145d2:	e7e7      	b.n	80145a4 <_realloc_r+0x274>
 80145d4:	9905      	ldr	r1, [sp, #20]
 80145d6:	9803      	ldr	r0, [sp, #12]
 80145d8:	f7ff fc2c 	bl	8013e34 <_malloc_r>
 80145dc:	1e07      	subs	r7, r0, #0
 80145de:	d100      	bne.n	80145e2 <_realloc_r+0x2b2>
 80145e0:	e76f      	b.n	80144c2 <_realloc_r+0x192>
 80145e2:	0023      	movs	r3, r4
 80145e4:	2201      	movs	r2, #1
 80145e6:	3b08      	subs	r3, #8
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	4393      	bics	r3, r2
 80145ec:	9a02      	ldr	r2, [sp, #8]
 80145ee:	18d3      	adds	r3, r2, r3
 80145f0:	0002      	movs	r2, r0
 80145f2:	3a08      	subs	r2, #8
 80145f4:	4293      	cmp	r3, r2
 80145f6:	d105      	bne.n	8014604 <_realloc_r+0x2d4>
 80145f8:	685e      	ldr	r6, [r3, #4]
 80145fa:	2303      	movs	r3, #3
 80145fc:	439e      	bics	r6, r3
 80145fe:	9b04      	ldr	r3, [sp, #16]
 8014600:	18f6      	adds	r6, r6, r3
 8014602:	e6f9      	b.n	80143f8 <_realloc_r+0xc8>
 8014604:	9a04      	ldr	r2, [sp, #16]
 8014606:	3a04      	subs	r2, #4
 8014608:	2a24      	cmp	r2, #36	; 0x24
 801460a:	d82d      	bhi.n	8014668 <_realloc_r+0x338>
 801460c:	2a13      	cmp	r2, #19
 801460e:	d928      	bls.n	8014662 <_realloc_r+0x332>
 8014610:	6823      	ldr	r3, [r4, #0]
 8014612:	6003      	str	r3, [r0, #0]
 8014614:	6863      	ldr	r3, [r4, #4]
 8014616:	6043      	str	r3, [r0, #4]
 8014618:	2a1b      	cmp	r2, #27
 801461a:	d80e      	bhi.n	801463a <_realloc_r+0x30a>
 801461c:	0022      	movs	r2, r4
 801461e:	0003      	movs	r3, r0
 8014620:	3208      	adds	r2, #8
 8014622:	3308      	adds	r3, #8
 8014624:	6811      	ldr	r1, [r2, #0]
 8014626:	6019      	str	r1, [r3, #0]
 8014628:	6851      	ldr	r1, [r2, #4]
 801462a:	6059      	str	r1, [r3, #4]
 801462c:	6892      	ldr	r2, [r2, #8]
 801462e:	609a      	str	r2, [r3, #8]
 8014630:	0021      	movs	r1, r4
 8014632:	9803      	ldr	r0, [sp, #12]
 8014634:	f003 f93c 	bl	80178b0 <_free_r>
 8014638:	e743      	b.n	80144c2 <_realloc_r+0x192>
 801463a:	68a3      	ldr	r3, [r4, #8]
 801463c:	6083      	str	r3, [r0, #8]
 801463e:	68e3      	ldr	r3, [r4, #12]
 8014640:	60c3      	str	r3, [r0, #12]
 8014642:	2a24      	cmp	r2, #36	; 0x24
 8014644:	d004      	beq.n	8014650 <_realloc_r+0x320>
 8014646:	0022      	movs	r2, r4
 8014648:	0003      	movs	r3, r0
 801464a:	3210      	adds	r2, #16
 801464c:	3310      	adds	r3, #16
 801464e:	e7e9      	b.n	8014624 <_realloc_r+0x2f4>
 8014650:	6923      	ldr	r3, [r4, #16]
 8014652:	0022      	movs	r2, r4
 8014654:	6103      	str	r3, [r0, #16]
 8014656:	0003      	movs	r3, r0
 8014658:	6961      	ldr	r1, [r4, #20]
 801465a:	3218      	adds	r2, #24
 801465c:	3318      	adds	r3, #24
 801465e:	6141      	str	r1, [r0, #20]
 8014660:	e7e0      	b.n	8014624 <_realloc_r+0x2f4>
 8014662:	0003      	movs	r3, r0
 8014664:	0022      	movs	r2, r4
 8014666:	e7dd      	b.n	8014624 <_realloc_r+0x2f4>
 8014668:	0021      	movs	r1, r4
 801466a:	f003 fd22 	bl	80180b2 <memmove>
 801466e:	e7df      	b.n	8014630 <_realloc_r+0x300>
 8014670:	9e04      	ldr	r6, [sp, #16]
 8014672:	e6c1      	b.n	80143f8 <_realloc_r+0xc8>
 8014674:	9902      	ldr	r1, [sp, #8]
 8014676:	4306      	orrs	r6, r0
 8014678:	604e      	str	r6, [r1, #4]
 801467a:	6851      	ldr	r1, [r2, #4]
 801467c:	430b      	orrs	r3, r1
 801467e:	6053      	str	r3, [r2, #4]
 8014680:	e6d6      	b.n	8014430 <_realloc_r+0x100>
 8014682:	46c0      	nop			; (mov r8, r8)
 8014684:	2000068c 	.word	0x2000068c

08014688 <_sbrk_r>:
 8014688:	2300      	movs	r3, #0
 801468a:	b570      	push	{r4, r5, r6, lr}
 801468c:	4c06      	ldr	r4, [pc, #24]	; (80146a8 <_sbrk_r+0x20>)
 801468e:	0005      	movs	r5, r0
 8014690:	0008      	movs	r0, r1
 8014692:	6023      	str	r3, [r4, #0]
 8014694:	f004 fa1e 	bl	8018ad4 <_sbrk>
 8014698:	1c43      	adds	r3, r0, #1
 801469a:	d103      	bne.n	80146a4 <_sbrk_r+0x1c>
 801469c:	6823      	ldr	r3, [r4, #0]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d000      	beq.n	80146a4 <_sbrk_r+0x1c>
 80146a2:	602b      	str	r3, [r5, #0]
 80146a4:	bd70      	pop	{r4, r5, r6, pc}
 80146a6:	46c0      	nop			; (mov r8, r8)
 80146a8:	20006e94 	.word	0x20006e94

080146ac <snprintf>:
 80146ac:	b40c      	push	{r2, r3}
 80146ae:	b530      	push	{r4, r5, lr}
 80146b0:	4b16      	ldr	r3, [pc, #88]	; (801470c <snprintf+0x60>)
 80146b2:	b09d      	sub	sp, #116	; 0x74
 80146b4:	1e0c      	subs	r4, r1, #0
 80146b6:	681d      	ldr	r5, [r3, #0]
 80146b8:	da08      	bge.n	80146cc <snprintf+0x20>
 80146ba:	238b      	movs	r3, #139	; 0x8b
 80146bc:	2001      	movs	r0, #1
 80146be:	602b      	str	r3, [r5, #0]
 80146c0:	4240      	negs	r0, r0
 80146c2:	b01d      	add	sp, #116	; 0x74
 80146c4:	bc30      	pop	{r4, r5}
 80146c6:	bc08      	pop	{r3}
 80146c8:	b002      	add	sp, #8
 80146ca:	4718      	bx	r3
 80146cc:	2382      	movs	r3, #130	; 0x82
 80146ce:	a902      	add	r1, sp, #8
 80146d0:	009b      	lsls	r3, r3, #2
 80146d2:	818b      	strh	r3, [r1, #12]
 80146d4:	2300      	movs	r3, #0
 80146d6:	9002      	str	r0, [sp, #8]
 80146d8:	6108      	str	r0, [r1, #16]
 80146da:	429c      	cmp	r4, r3
 80146dc:	d000      	beq.n	80146e0 <snprintf+0x34>
 80146de:	1e63      	subs	r3, r4, #1
 80146e0:	608b      	str	r3, [r1, #8]
 80146e2:	614b      	str	r3, [r1, #20]
 80146e4:	2301      	movs	r3, #1
 80146e6:	425b      	negs	r3, r3
 80146e8:	81cb      	strh	r3, [r1, #14]
 80146ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80146ec:	ab21      	add	r3, sp, #132	; 0x84
 80146ee:	0028      	movs	r0, r5
 80146f0:	9301      	str	r3, [sp, #4]
 80146f2:	f000 ff97 	bl	8015624 <_svfprintf_r>
 80146f6:	1c43      	adds	r3, r0, #1
 80146f8:	da01      	bge.n	80146fe <snprintf+0x52>
 80146fa:	238b      	movs	r3, #139	; 0x8b
 80146fc:	602b      	str	r3, [r5, #0]
 80146fe:	2c00      	cmp	r4, #0
 8014700:	d0df      	beq.n	80146c2 <snprintf+0x16>
 8014702:	2300      	movs	r3, #0
 8014704:	9a02      	ldr	r2, [sp, #8]
 8014706:	7013      	strb	r3, [r2, #0]
 8014708:	e7db      	b.n	80146c2 <snprintf+0x16>
 801470a:	46c0      	nop			; (mov r8, r8)
 801470c:	200000f4 	.word	0x200000f4

08014710 <sprintf>:
 8014710:	b40e      	push	{r1, r2, r3}
 8014712:	b500      	push	{lr}
 8014714:	490b      	ldr	r1, [pc, #44]	; (8014744 <sprintf+0x34>)
 8014716:	b09c      	sub	sp, #112	; 0x70
 8014718:	ab1d      	add	r3, sp, #116	; 0x74
 801471a:	9002      	str	r0, [sp, #8]
 801471c:	9006      	str	r0, [sp, #24]
 801471e:	9107      	str	r1, [sp, #28]
 8014720:	9104      	str	r1, [sp, #16]
 8014722:	4809      	ldr	r0, [pc, #36]	; (8014748 <sprintf+0x38>)
 8014724:	4909      	ldr	r1, [pc, #36]	; (801474c <sprintf+0x3c>)
 8014726:	cb04      	ldmia	r3!, {r2}
 8014728:	9105      	str	r1, [sp, #20]
 801472a:	6800      	ldr	r0, [r0, #0]
 801472c:	a902      	add	r1, sp, #8
 801472e:	9301      	str	r3, [sp, #4]
 8014730:	f000 ff78 	bl	8015624 <_svfprintf_r>
 8014734:	2300      	movs	r3, #0
 8014736:	9a02      	ldr	r2, [sp, #8]
 8014738:	7013      	strb	r3, [r2, #0]
 801473a:	b01c      	add	sp, #112	; 0x70
 801473c:	bc08      	pop	{r3}
 801473e:	b003      	add	sp, #12
 8014740:	4718      	bx	r3
 8014742:	46c0      	nop			; (mov r8, r8)
 8014744:	7fffffff 	.word	0x7fffffff
 8014748:	200000f4 	.word	0x200000f4
 801474c:	ffff0208 	.word	0xffff0208

08014750 <strcat>:
 8014750:	0002      	movs	r2, r0
 8014752:	b510      	push	{r4, lr}
 8014754:	7813      	ldrb	r3, [r2, #0]
 8014756:	1c54      	adds	r4, r2, #1
 8014758:	2b00      	cmp	r3, #0
 801475a:	d105      	bne.n	8014768 <strcat+0x18>
 801475c:	5ccc      	ldrb	r4, [r1, r3]
 801475e:	54d4      	strb	r4, [r2, r3]
 8014760:	3301      	adds	r3, #1
 8014762:	2c00      	cmp	r4, #0
 8014764:	d1fa      	bne.n	801475c <strcat+0xc>
 8014766:	bd10      	pop	{r4, pc}
 8014768:	0022      	movs	r2, r4
 801476a:	e7f3      	b.n	8014754 <strcat+0x4>

0801476c <strchr>:
 801476c:	b2c9      	uxtb	r1, r1
 801476e:	7803      	ldrb	r3, [r0, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d004      	beq.n	801477e <strchr+0x12>
 8014774:	428b      	cmp	r3, r1
 8014776:	d100      	bne.n	801477a <strchr+0xe>
 8014778:	4770      	bx	lr
 801477a:	3001      	adds	r0, #1
 801477c:	e7f7      	b.n	801476e <strchr+0x2>
 801477e:	424b      	negs	r3, r1
 8014780:	4159      	adcs	r1, r3
 8014782:	4249      	negs	r1, r1
 8014784:	4008      	ands	r0, r1
 8014786:	e7f7      	b.n	8014778 <strchr+0xc>

08014788 <strcpy>:
 8014788:	0003      	movs	r3, r0
 801478a:	780a      	ldrb	r2, [r1, #0]
 801478c:	3101      	adds	r1, #1
 801478e:	701a      	strb	r2, [r3, #0]
 8014790:	3301      	adds	r3, #1
 8014792:	2a00      	cmp	r2, #0
 8014794:	d1f9      	bne.n	801478a <strcpy+0x2>
 8014796:	4770      	bx	lr

08014798 <strncmp>:
 8014798:	2300      	movs	r3, #0
 801479a:	b530      	push	{r4, r5, lr}
 801479c:	429a      	cmp	r2, r3
 801479e:	d00a      	beq.n	80147b6 <strncmp+0x1e>
 80147a0:	3a01      	subs	r2, #1
 80147a2:	5cc4      	ldrb	r4, [r0, r3]
 80147a4:	5ccd      	ldrb	r5, [r1, r3]
 80147a6:	42ac      	cmp	r4, r5
 80147a8:	d104      	bne.n	80147b4 <strncmp+0x1c>
 80147aa:	4293      	cmp	r3, r2
 80147ac:	d002      	beq.n	80147b4 <strncmp+0x1c>
 80147ae:	3301      	adds	r3, #1
 80147b0:	2c00      	cmp	r4, #0
 80147b2:	d1f6      	bne.n	80147a2 <strncmp+0xa>
 80147b4:	1b63      	subs	r3, r4, r5
 80147b6:	0018      	movs	r0, r3
 80147b8:	bd30      	pop	{r4, r5, pc}

080147ba <strncpy>:
 80147ba:	b530      	push	{r4, r5, lr}
 80147bc:	0005      	movs	r5, r0
 80147be:	2a00      	cmp	r2, #0
 80147c0:	d100      	bne.n	80147c4 <strncpy+0xa>
 80147c2:	bd30      	pop	{r4, r5, pc}
 80147c4:	780c      	ldrb	r4, [r1, #0]
 80147c6:	3a01      	subs	r2, #1
 80147c8:	1c6b      	adds	r3, r5, #1
 80147ca:	702c      	strb	r4, [r5, #0]
 80147cc:	3101      	adds	r1, #1
 80147ce:	2c00      	cmp	r4, #0
 80147d0:	d105      	bne.n	80147de <strncpy+0x24>
 80147d2:	189a      	adds	r2, r3, r2
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d0f4      	beq.n	80147c2 <strncpy+0x8>
 80147d8:	701c      	strb	r4, [r3, #0]
 80147da:	3301      	adds	r3, #1
 80147dc:	e7fa      	b.n	80147d4 <strncpy+0x1a>
 80147de:	001d      	movs	r5, r3
 80147e0:	e7ed      	b.n	80147be <strncpy+0x4>
	...

080147e4 <sulp>:
 80147e4:	b570      	push	{r4, r5, r6, lr}
 80147e6:	0016      	movs	r6, r2
 80147e8:	000d      	movs	r5, r1
 80147ea:	f003 ff17 	bl	801861c <__ulp>
 80147ee:	2e00      	cmp	r6, #0
 80147f0:	d00d      	beq.n	801480e <sulp+0x2a>
 80147f2:	236b      	movs	r3, #107	; 0x6b
 80147f4:	006a      	lsls	r2, r5, #1
 80147f6:	0d52      	lsrs	r2, r2, #21
 80147f8:	1a9b      	subs	r3, r3, r2
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	dd07      	ble.n	801480e <sulp+0x2a>
 80147fe:	2400      	movs	r4, #0
 8014800:	4a03      	ldr	r2, [pc, #12]	; (8014810 <sulp+0x2c>)
 8014802:	051b      	lsls	r3, r3, #20
 8014804:	189d      	adds	r5, r3, r2
 8014806:	002b      	movs	r3, r5
 8014808:	0022      	movs	r2, r4
 801480a:	f7ed fc2d 	bl	8002068 <__aeabi_dmul>
 801480e:	bd70      	pop	{r4, r5, r6, pc}
 8014810:	3ff00000 	.word	0x3ff00000

08014814 <_strtod_l>:
 8014814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014816:	b0a7      	sub	sp, #156	; 0x9c
 8014818:	9307      	str	r3, [sp, #28]
 801481a:	2300      	movs	r3, #0
 801481c:	9004      	str	r0, [sp, #16]
 801481e:	9807      	ldr	r0, [sp, #28]
 8014820:	9322      	str	r3, [sp, #136]	; 0x88
 8014822:	9106      	str	r1, [sp, #24]
 8014824:	921d      	str	r2, [sp, #116]	; 0x74
 8014826:	f003 fc28 	bl	801807a <__localeconv_l>
 801482a:	0005      	movs	r5, r0
 801482c:	6800      	ldr	r0, [r0, #0]
 801482e:	f7eb fc73 	bl	8000118 <strlen>
 8014832:	2600      	movs	r6, #0
 8014834:	2700      	movs	r7, #0
 8014836:	9b06      	ldr	r3, [sp, #24]
 8014838:	9005      	str	r0, [sp, #20]
 801483a:	9321      	str	r3, [sp, #132]	; 0x84
 801483c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801483e:	781a      	ldrb	r2, [r3, #0]
 8014840:	2a0d      	cmp	r2, #13
 8014842:	d839      	bhi.n	80148b8 <_strtod_l+0xa4>
 8014844:	2a09      	cmp	r2, #9
 8014846:	d23d      	bcs.n	80148c4 <_strtod_l+0xb0>
 8014848:	2a00      	cmp	r2, #0
 801484a:	d044      	beq.n	80148d6 <_strtod_l+0xc2>
 801484c:	2300      	movs	r3, #0
 801484e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014850:	2200      	movs	r2, #0
 8014852:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014854:	920c      	str	r2, [sp, #48]	; 0x30
 8014856:	7823      	ldrb	r3, [r4, #0]
 8014858:	2b30      	cmp	r3, #48	; 0x30
 801485a:	d000      	beq.n	801485e <_strtod_l+0x4a>
 801485c:	e07e      	b.n	801495c <_strtod_l+0x148>
 801485e:	7863      	ldrb	r3, [r4, #1]
 8014860:	2b58      	cmp	r3, #88	; 0x58
 8014862:	d002      	beq.n	801486a <_strtod_l+0x56>
 8014864:	2b78      	cmp	r3, #120	; 0x78
 8014866:	d000      	beq.n	801486a <_strtod_l+0x56>
 8014868:	e06e      	b.n	8014948 <_strtod_l+0x134>
 801486a:	9b07      	ldr	r3, [sp, #28]
 801486c:	4a96      	ldr	r2, [pc, #600]	; (8014ac8 <_strtod_l+0x2b4>)
 801486e:	9302      	str	r3, [sp, #8]
 8014870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014872:	a921      	add	r1, sp, #132	; 0x84
 8014874:	9301      	str	r3, [sp, #4]
 8014876:	ab22      	add	r3, sp, #136	; 0x88
 8014878:	9300      	str	r3, [sp, #0]
 801487a:	9804      	ldr	r0, [sp, #16]
 801487c:	ab23      	add	r3, sp, #140	; 0x8c
 801487e:	f003 f914 	bl	8017aaa <__gethex>
 8014882:	2507      	movs	r5, #7
 8014884:	9005      	str	r0, [sp, #20]
 8014886:	4005      	ands	r5, r0
 8014888:	d005      	beq.n	8014896 <_strtod_l+0x82>
 801488a:	2d06      	cmp	r5, #6
 801488c:	d12f      	bne.n	80148ee <_strtod_l+0xda>
 801488e:	2300      	movs	r3, #0
 8014890:	3401      	adds	r4, #1
 8014892:	9421      	str	r4, [sp, #132]	; 0x84
 8014894:	9313      	str	r3, [sp, #76]	; 0x4c
 8014896:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014898:	2b00      	cmp	r3, #0
 801489a:	d002      	beq.n	80148a2 <_strtod_l+0x8e>
 801489c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801489e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80148a0:	601a      	str	r2, [r3, #0]
 80148a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d01d      	beq.n	80148e4 <_strtod_l+0xd0>
 80148a8:	2380      	movs	r3, #128	; 0x80
 80148aa:	0032      	movs	r2, r6
 80148ac:	061b      	lsls	r3, r3, #24
 80148ae:	18fb      	adds	r3, r7, r3
 80148b0:	0010      	movs	r0, r2
 80148b2:	0019      	movs	r1, r3
 80148b4:	b027      	add	sp, #156	; 0x9c
 80148b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148b8:	2a2b      	cmp	r2, #43	; 0x2b
 80148ba:	d016      	beq.n	80148ea <_strtod_l+0xd6>
 80148bc:	2a2d      	cmp	r2, #45	; 0x2d
 80148be:	d003      	beq.n	80148c8 <_strtod_l+0xb4>
 80148c0:	2a20      	cmp	r2, #32
 80148c2:	d1c3      	bne.n	801484c <_strtod_l+0x38>
 80148c4:	3301      	adds	r3, #1
 80148c6:	e7b8      	b.n	801483a <_strtod_l+0x26>
 80148c8:	2201      	movs	r2, #1
 80148ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80148cc:	1c5a      	adds	r2, r3, #1
 80148ce:	9221      	str	r2, [sp, #132]	; 0x84
 80148d0:	785b      	ldrb	r3, [r3, #1]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d1bc      	bne.n	8014850 <_strtod_l+0x3c>
 80148d6:	9b06      	ldr	r3, [sp, #24]
 80148d8:	9321      	str	r3, [sp, #132]	; 0x84
 80148da:	2300      	movs	r3, #0
 80148dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80148de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d1db      	bne.n	801489c <_strtod_l+0x88>
 80148e4:	0032      	movs	r2, r6
 80148e6:	003b      	movs	r3, r7
 80148e8:	e7e2      	b.n	80148b0 <_strtod_l+0x9c>
 80148ea:	2200      	movs	r2, #0
 80148ec:	e7ed      	b.n	80148ca <_strtod_l+0xb6>
 80148ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80148f0:	2a00      	cmp	r2, #0
 80148f2:	d007      	beq.n	8014904 <_strtod_l+0xf0>
 80148f4:	2135      	movs	r1, #53	; 0x35
 80148f6:	a824      	add	r0, sp, #144	; 0x90
 80148f8:	f003 ff7d 	bl	80187f6 <__copybits>
 80148fc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80148fe:	9804      	ldr	r0, [sp, #16]
 8014900:	f003 fc12 	bl	8018128 <_Bfree>
 8014904:	1e68      	subs	r0, r5, #1
 8014906:	2804      	cmp	r0, #4
 8014908:	d806      	bhi.n	8014918 <_strtod_l+0x104>
 801490a:	f7eb fc0d 	bl	8000128 <__gnu_thumb1_case_uqi>
 801490e:	030c      	.short	0x030c
 8014910:	1917      	.short	0x1917
 8014912:	0c          	.byte	0x0c
 8014913:	00          	.byte	0x00
 8014914:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014916:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8014918:	9b05      	ldr	r3, [sp, #20]
 801491a:	071b      	lsls	r3, r3, #28
 801491c:	d5bb      	bpl.n	8014896 <_strtod_l+0x82>
 801491e:	2380      	movs	r3, #128	; 0x80
 8014920:	061b      	lsls	r3, r3, #24
 8014922:	431f      	orrs	r7, r3
 8014924:	e7b7      	b.n	8014896 <_strtod_l+0x82>
 8014926:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014928:	4a68      	ldr	r2, [pc, #416]	; (8014acc <_strtod_l+0x2b8>)
 801492a:	4969      	ldr	r1, [pc, #420]	; (8014ad0 <_strtod_l+0x2bc>)
 801492c:	401a      	ands	r2, r3
 801492e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014930:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014932:	185b      	adds	r3, r3, r1
 8014934:	051b      	lsls	r3, r3, #20
 8014936:	431a      	orrs	r2, r3
 8014938:	0017      	movs	r7, r2
 801493a:	e7ed      	b.n	8014918 <_strtod_l+0x104>
 801493c:	4f65      	ldr	r7, [pc, #404]	; (8014ad4 <_strtod_l+0x2c0>)
 801493e:	e7eb      	b.n	8014918 <_strtod_l+0x104>
 8014940:	2601      	movs	r6, #1
 8014942:	4f65      	ldr	r7, [pc, #404]	; (8014ad8 <_strtod_l+0x2c4>)
 8014944:	4276      	negs	r6, r6
 8014946:	e7e7      	b.n	8014918 <_strtod_l+0x104>
 8014948:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801494a:	1c5a      	adds	r2, r3, #1
 801494c:	9221      	str	r2, [sp, #132]	; 0x84
 801494e:	785b      	ldrb	r3, [r3, #1]
 8014950:	2b30      	cmp	r3, #48	; 0x30
 8014952:	d0f9      	beq.n	8014948 <_strtod_l+0x134>
 8014954:	2b00      	cmp	r3, #0
 8014956:	d09e      	beq.n	8014896 <_strtod_l+0x82>
 8014958:	2301      	movs	r3, #1
 801495a:	930c      	str	r3, [sp, #48]	; 0x30
 801495c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801495e:	220a      	movs	r2, #10
 8014960:	9312      	str	r3, [sp, #72]	; 0x48
 8014962:	2300      	movs	r3, #0
 8014964:	930b      	str	r3, [sp, #44]	; 0x2c
 8014966:	9308      	str	r3, [sp, #32]
 8014968:	930a      	str	r3, [sp, #40]	; 0x28
 801496a:	9821      	ldr	r0, [sp, #132]	; 0x84
 801496c:	7804      	ldrb	r4, [r0, #0]
 801496e:	0023      	movs	r3, r4
 8014970:	3b30      	subs	r3, #48	; 0x30
 8014972:	b2d9      	uxtb	r1, r3
 8014974:	2909      	cmp	r1, #9
 8014976:	d934      	bls.n	80149e2 <_strtod_l+0x1ce>
 8014978:	9a05      	ldr	r2, [sp, #20]
 801497a:	6829      	ldr	r1, [r5, #0]
 801497c:	f7ff ff0c 	bl	8014798 <strncmp>
 8014980:	2800      	cmp	r0, #0
 8014982:	d040      	beq.n	8014a06 <_strtod_l+0x1f2>
 8014984:	2000      	movs	r0, #0
 8014986:	0023      	movs	r3, r4
 8014988:	4684      	mov	ip, r0
 801498a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801498c:	9007      	str	r0, [sp, #28]
 801498e:	9205      	str	r2, [sp, #20]
 8014990:	2220      	movs	r2, #32
 8014992:	0019      	movs	r1, r3
 8014994:	4391      	bics	r1, r2
 8014996:	000a      	movs	r2, r1
 8014998:	2100      	movs	r1, #0
 801499a:	2a45      	cmp	r2, #69	; 0x45
 801499c:	d000      	beq.n	80149a0 <_strtod_l+0x18c>
 801499e:	e0bf      	b.n	8014b20 <_strtod_l+0x30c>
 80149a0:	9b05      	ldr	r3, [sp, #20]
 80149a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80149a4:	4303      	orrs	r3, r0
 80149a6:	4313      	orrs	r3, r2
 80149a8:	428b      	cmp	r3, r1
 80149aa:	d094      	beq.n	80148d6 <_strtod_l+0xc2>
 80149ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149ae:	9306      	str	r3, [sp, #24]
 80149b0:	3301      	adds	r3, #1
 80149b2:	9321      	str	r3, [sp, #132]	; 0x84
 80149b4:	9b06      	ldr	r3, [sp, #24]
 80149b6:	785b      	ldrb	r3, [r3, #1]
 80149b8:	2b2b      	cmp	r3, #43	; 0x2b
 80149ba:	d100      	bne.n	80149be <_strtod_l+0x1aa>
 80149bc:	e082      	b.n	8014ac4 <_strtod_l+0x2b0>
 80149be:	000c      	movs	r4, r1
 80149c0:	2b2d      	cmp	r3, #45	; 0x2d
 80149c2:	d105      	bne.n	80149d0 <_strtod_l+0x1bc>
 80149c4:	2401      	movs	r4, #1
 80149c6:	9b06      	ldr	r3, [sp, #24]
 80149c8:	3302      	adds	r3, #2
 80149ca:	9321      	str	r3, [sp, #132]	; 0x84
 80149cc:	9b06      	ldr	r3, [sp, #24]
 80149ce:	789b      	ldrb	r3, [r3, #2]
 80149d0:	001a      	movs	r2, r3
 80149d2:	3a30      	subs	r2, #48	; 0x30
 80149d4:	2a09      	cmp	r2, #9
 80149d6:	d800      	bhi.n	80149da <_strtod_l+0x1c6>
 80149d8:	e084      	b.n	8014ae4 <_strtod_l+0x2d0>
 80149da:	9a06      	ldr	r2, [sp, #24]
 80149dc:	2100      	movs	r1, #0
 80149de:	9221      	str	r2, [sp, #132]	; 0x84
 80149e0:	e09e      	b.n	8014b20 <_strtod_l+0x30c>
 80149e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80149e4:	2908      	cmp	r1, #8
 80149e6:	dc09      	bgt.n	80149fc <_strtod_l+0x1e8>
 80149e8:	9908      	ldr	r1, [sp, #32]
 80149ea:	4351      	muls	r1, r2
 80149ec:	18cb      	adds	r3, r1, r3
 80149ee:	9308      	str	r3, [sp, #32]
 80149f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149f2:	3001      	adds	r0, #1
 80149f4:	3301      	adds	r3, #1
 80149f6:	930a      	str	r3, [sp, #40]	; 0x28
 80149f8:	9021      	str	r0, [sp, #132]	; 0x84
 80149fa:	e7b6      	b.n	801496a <_strtod_l+0x156>
 80149fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80149fe:	4351      	muls	r1, r2
 8014a00:	18cb      	adds	r3, r1, r3
 8014a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a04:	e7f4      	b.n	80149f0 <_strtod_l+0x1dc>
 8014a06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a08:	9b05      	ldr	r3, [sp, #20]
 8014a0a:	4694      	mov	ip, r2
 8014a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a0e:	4463      	add	r3, ip
 8014a10:	9321      	str	r3, [sp, #132]	; 0x84
 8014a12:	781b      	ldrb	r3, [r3, #0]
 8014a14:	2a00      	cmp	r2, #0
 8014a16:	d036      	beq.n	8014a86 <_strtod_l+0x272>
 8014a18:	4684      	mov	ip, r0
 8014a1a:	9205      	str	r2, [sp, #20]
 8014a1c:	001a      	movs	r2, r3
 8014a1e:	3a30      	subs	r2, #48	; 0x30
 8014a20:	2a09      	cmp	r2, #9
 8014a22:	d912      	bls.n	8014a4a <_strtod_l+0x236>
 8014a24:	2201      	movs	r2, #1
 8014a26:	9207      	str	r2, [sp, #28]
 8014a28:	e7b2      	b.n	8014990 <_strtod_l+0x17c>
 8014a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a2c:	3001      	adds	r0, #1
 8014a2e:	1c5a      	adds	r2, r3, #1
 8014a30:	9221      	str	r2, [sp, #132]	; 0x84
 8014a32:	785b      	ldrb	r3, [r3, #1]
 8014a34:	2b30      	cmp	r3, #48	; 0x30
 8014a36:	d0f8      	beq.n	8014a2a <_strtod_l+0x216>
 8014a38:	001a      	movs	r2, r3
 8014a3a:	3a31      	subs	r2, #49	; 0x31
 8014a3c:	2a08      	cmp	r2, #8
 8014a3e:	d83c      	bhi.n	8014aba <_strtod_l+0x2a6>
 8014a40:	4684      	mov	ip, r0
 8014a42:	2000      	movs	r0, #0
 8014a44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a46:	9005      	str	r0, [sp, #20]
 8014a48:	9212      	str	r2, [sp, #72]	; 0x48
 8014a4a:	3b30      	subs	r3, #48	; 0x30
 8014a4c:	1c42      	adds	r2, r0, #1
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d013      	beq.n	8014a7a <_strtod_l+0x266>
 8014a52:	210a      	movs	r1, #10
 8014a54:	4494      	add	ip, r2
 8014a56:	9a05      	ldr	r2, [sp, #20]
 8014a58:	1885      	adds	r5, r0, r2
 8014a5a:	42aa      	cmp	r2, r5
 8014a5c:	d115      	bne.n	8014a8a <_strtod_l+0x276>
 8014a5e:	9905      	ldr	r1, [sp, #20]
 8014a60:	9a05      	ldr	r2, [sp, #20]
 8014a62:	3101      	adds	r1, #1
 8014a64:	1809      	adds	r1, r1, r0
 8014a66:	1812      	adds	r2, r2, r0
 8014a68:	9105      	str	r1, [sp, #20]
 8014a6a:	2a08      	cmp	r2, #8
 8014a6c:	dc1b      	bgt.n	8014aa6 <_strtod_l+0x292>
 8014a6e:	220a      	movs	r2, #10
 8014a70:	9908      	ldr	r1, [sp, #32]
 8014a72:	434a      	muls	r2, r1
 8014a74:	189b      	adds	r3, r3, r2
 8014a76:	2200      	movs	r2, #0
 8014a78:	9308      	str	r3, [sp, #32]
 8014a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a7c:	0010      	movs	r0, r2
 8014a7e:	1c59      	adds	r1, r3, #1
 8014a80:	9121      	str	r1, [sp, #132]	; 0x84
 8014a82:	785b      	ldrb	r3, [r3, #1]
 8014a84:	e7ca      	b.n	8014a1c <_strtod_l+0x208>
 8014a86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a88:	e7d4      	b.n	8014a34 <_strtod_l+0x220>
 8014a8a:	1c54      	adds	r4, r2, #1
 8014a8c:	2a08      	cmp	r2, #8
 8014a8e:	dc04      	bgt.n	8014a9a <_strtod_l+0x286>
 8014a90:	9a08      	ldr	r2, [sp, #32]
 8014a92:	434a      	muls	r2, r1
 8014a94:	9208      	str	r2, [sp, #32]
 8014a96:	0022      	movs	r2, r4
 8014a98:	e7df      	b.n	8014a5a <_strtod_l+0x246>
 8014a9a:	2c10      	cmp	r4, #16
 8014a9c:	dcfb      	bgt.n	8014a96 <_strtod_l+0x282>
 8014a9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014aa0:	434a      	muls	r2, r1
 8014aa2:	920b      	str	r2, [sp, #44]	; 0x2c
 8014aa4:	e7f7      	b.n	8014a96 <_strtod_l+0x282>
 8014aa6:	9905      	ldr	r1, [sp, #20]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	2910      	cmp	r1, #16
 8014aac:	dce5      	bgt.n	8014a7a <_strtod_l+0x266>
 8014aae:	210a      	movs	r1, #10
 8014ab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014ab2:	4341      	muls	r1, r0
 8014ab4:	185b      	adds	r3, r3, r1
 8014ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ab8:	e7df      	b.n	8014a7a <_strtod_l+0x266>
 8014aba:	2200      	movs	r2, #0
 8014abc:	4694      	mov	ip, r2
 8014abe:	9205      	str	r2, [sp, #20]
 8014ac0:	3201      	adds	r2, #1
 8014ac2:	e7b0      	b.n	8014a26 <_strtod_l+0x212>
 8014ac4:	000c      	movs	r4, r1
 8014ac6:	e77e      	b.n	80149c6 <_strtod_l+0x1b2>
 8014ac8:	0801ba98 	.word	0x0801ba98
 8014acc:	ffefffff 	.word	0xffefffff
 8014ad0:	00000433 	.word	0x00000433
 8014ad4:	7ff00000 	.word	0x7ff00000
 8014ad8:	7fffffff 	.word	0x7fffffff
 8014adc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ade:	1c5a      	adds	r2, r3, #1
 8014ae0:	9221      	str	r2, [sp, #132]	; 0x84
 8014ae2:	785b      	ldrb	r3, [r3, #1]
 8014ae4:	2b30      	cmp	r3, #48	; 0x30
 8014ae6:	d0f9      	beq.n	8014adc <_strtod_l+0x2c8>
 8014ae8:	001a      	movs	r2, r3
 8014aea:	3a31      	subs	r2, #49	; 0x31
 8014aec:	2100      	movs	r1, #0
 8014aee:	2a08      	cmp	r2, #8
 8014af0:	d816      	bhi.n	8014b20 <_strtod_l+0x30c>
 8014af2:	3b30      	subs	r3, #48	; 0x30
 8014af4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8014af6:	930e      	str	r3, [sp, #56]	; 0x38
 8014af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014afa:	1c59      	adds	r1, r3, #1
 8014afc:	9121      	str	r1, [sp, #132]	; 0x84
 8014afe:	785b      	ldrb	r3, [r3, #1]
 8014b00:	001a      	movs	r2, r3
 8014b02:	3a30      	subs	r2, #48	; 0x30
 8014b04:	2a09      	cmp	r2, #9
 8014b06:	d932      	bls.n	8014b6e <_strtod_l+0x35a>
 8014b08:	1b4a      	subs	r2, r1, r5
 8014b0a:	4dad      	ldr	r5, [pc, #692]	; (8014dc0 <_strtod_l+0x5ac>)
 8014b0c:	0029      	movs	r1, r5
 8014b0e:	2a08      	cmp	r2, #8
 8014b10:	dc03      	bgt.n	8014b1a <_strtod_l+0x306>
 8014b12:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014b14:	42a9      	cmp	r1, r5
 8014b16:	dd00      	ble.n	8014b1a <_strtod_l+0x306>
 8014b18:	0029      	movs	r1, r5
 8014b1a:	2c00      	cmp	r4, #0
 8014b1c:	d000      	beq.n	8014b20 <_strtod_l+0x30c>
 8014b1e:	4249      	negs	r1, r1
 8014b20:	9a05      	ldr	r2, [sp, #20]
 8014b22:	2a00      	cmp	r2, #0
 8014b24:	d149      	bne.n	8014bba <_strtod_l+0x3a6>
 8014b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b28:	4310      	orrs	r0, r2
 8014b2a:	d000      	beq.n	8014b2e <_strtod_l+0x31a>
 8014b2c:	e6b3      	b.n	8014896 <_strtod_l+0x82>
 8014b2e:	9a07      	ldr	r2, [sp, #28]
 8014b30:	2a00      	cmp	r2, #0
 8014b32:	d000      	beq.n	8014b36 <_strtod_l+0x322>
 8014b34:	e6cf      	b.n	80148d6 <_strtod_l+0xc2>
 8014b36:	2b4e      	cmp	r3, #78	; 0x4e
 8014b38:	d025      	beq.n	8014b86 <_strtod_l+0x372>
 8014b3a:	dc1f      	bgt.n	8014b7c <_strtod_l+0x368>
 8014b3c:	2b49      	cmp	r3, #73	; 0x49
 8014b3e:	d000      	beq.n	8014b42 <_strtod_l+0x32e>
 8014b40:	e6c9      	b.n	80148d6 <_strtod_l+0xc2>
 8014b42:	49a0      	ldr	r1, [pc, #640]	; (8014dc4 <_strtod_l+0x5b0>)
 8014b44:	a821      	add	r0, sp, #132	; 0x84
 8014b46:	f003 f9ed 	bl	8017f24 <__match>
 8014b4a:	2800      	cmp	r0, #0
 8014b4c:	d100      	bne.n	8014b50 <_strtod_l+0x33c>
 8014b4e:	e6c2      	b.n	80148d6 <_strtod_l+0xc2>
 8014b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b52:	499d      	ldr	r1, [pc, #628]	; (8014dc8 <_strtod_l+0x5b4>)
 8014b54:	3b01      	subs	r3, #1
 8014b56:	a821      	add	r0, sp, #132	; 0x84
 8014b58:	9321      	str	r3, [sp, #132]	; 0x84
 8014b5a:	f003 f9e3 	bl	8017f24 <__match>
 8014b5e:	2800      	cmp	r0, #0
 8014b60:	d102      	bne.n	8014b68 <_strtod_l+0x354>
 8014b62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b64:	3301      	adds	r3, #1
 8014b66:	9321      	str	r3, [sp, #132]	; 0x84
 8014b68:	4f98      	ldr	r7, [pc, #608]	; (8014dcc <_strtod_l+0x5b8>)
 8014b6a:	2600      	movs	r6, #0
 8014b6c:	e693      	b.n	8014896 <_strtod_l+0x82>
 8014b6e:	220a      	movs	r2, #10
 8014b70:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014b72:	434a      	muls	r2, r1
 8014b74:	18d2      	adds	r2, r2, r3
 8014b76:	3a30      	subs	r2, #48	; 0x30
 8014b78:	920e      	str	r2, [sp, #56]	; 0x38
 8014b7a:	e7bd      	b.n	8014af8 <_strtod_l+0x2e4>
 8014b7c:	2b69      	cmp	r3, #105	; 0x69
 8014b7e:	d0e0      	beq.n	8014b42 <_strtod_l+0x32e>
 8014b80:	2b6e      	cmp	r3, #110	; 0x6e
 8014b82:	d000      	beq.n	8014b86 <_strtod_l+0x372>
 8014b84:	e6a7      	b.n	80148d6 <_strtod_l+0xc2>
 8014b86:	4992      	ldr	r1, [pc, #584]	; (8014dd0 <_strtod_l+0x5bc>)
 8014b88:	a821      	add	r0, sp, #132	; 0x84
 8014b8a:	f003 f9cb 	bl	8017f24 <__match>
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	d100      	bne.n	8014b94 <_strtod_l+0x380>
 8014b92:	e6a0      	b.n	80148d6 <_strtod_l+0xc2>
 8014b94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	2b28      	cmp	r3, #40	; 0x28
 8014b9a:	d10c      	bne.n	8014bb6 <_strtod_l+0x3a2>
 8014b9c:	aa24      	add	r2, sp, #144	; 0x90
 8014b9e:	498d      	ldr	r1, [pc, #564]	; (8014dd4 <_strtod_l+0x5c0>)
 8014ba0:	a821      	add	r0, sp, #132	; 0x84
 8014ba2:	f003 f9d3 	bl	8017f4c <__hexnan>
 8014ba6:	2805      	cmp	r0, #5
 8014ba8:	d105      	bne.n	8014bb6 <_strtod_l+0x3a2>
 8014baa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014bac:	4a87      	ldr	r2, [pc, #540]	; (8014dcc <_strtod_l+0x5b8>)
 8014bae:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014bb0:	431a      	orrs	r2, r3
 8014bb2:	0017      	movs	r7, r2
 8014bb4:	e66f      	b.n	8014896 <_strtod_l+0x82>
 8014bb6:	4f88      	ldr	r7, [pc, #544]	; (8014dd8 <_strtod_l+0x5c4>)
 8014bb8:	e7d7      	b.n	8014b6a <_strtod_l+0x356>
 8014bba:	4663      	mov	r3, ip
 8014bbc:	1acb      	subs	r3, r1, r3
 8014bbe:	9307      	str	r3, [sp, #28]
 8014bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d101      	bne.n	8014bca <_strtod_l+0x3b6>
 8014bc6:	9b05      	ldr	r3, [sp, #20]
 8014bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8014bca:	9c05      	ldr	r4, [sp, #20]
 8014bcc:	2c10      	cmp	r4, #16
 8014bce:	dd00      	ble.n	8014bd2 <_strtod_l+0x3be>
 8014bd0:	2410      	movs	r4, #16
 8014bd2:	9808      	ldr	r0, [sp, #32]
 8014bd4:	f7ee f88e 	bl	8002cf4 <__aeabi_ui2d>
 8014bd8:	9b05      	ldr	r3, [sp, #20]
 8014bda:	0006      	movs	r6, r0
 8014bdc:	000f      	movs	r7, r1
 8014bde:	2b09      	cmp	r3, #9
 8014be0:	dc15      	bgt.n	8014c0e <_strtod_l+0x3fa>
 8014be2:	9b07      	ldr	r3, [sp, #28]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d100      	bne.n	8014bea <_strtod_l+0x3d6>
 8014be8:	e655      	b.n	8014896 <_strtod_l+0x82>
 8014bea:	9b07      	ldr	r3, [sp, #28]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	dc00      	bgt.n	8014bf2 <_strtod_l+0x3de>
 8014bf0:	e07d      	b.n	8014cee <_strtod_l+0x4da>
 8014bf2:	2b16      	cmp	r3, #22
 8014bf4:	dc62      	bgt.n	8014cbc <_strtod_l+0x4a8>
 8014bf6:	00dc      	lsls	r4, r3, #3
 8014bf8:	4b78      	ldr	r3, [pc, #480]	; (8014ddc <_strtod_l+0x5c8>)
 8014bfa:	0032      	movs	r2, r6
 8014bfc:	1919      	adds	r1, r3, r4
 8014bfe:	003b      	movs	r3, r7
 8014c00:	6808      	ldr	r0, [r1, #0]
 8014c02:	6849      	ldr	r1, [r1, #4]
 8014c04:	f7ed fa30 	bl	8002068 <__aeabi_dmul>
 8014c08:	0006      	movs	r6, r0
 8014c0a:	000f      	movs	r7, r1
 8014c0c:	e643      	b.n	8014896 <_strtod_l+0x82>
 8014c0e:	0022      	movs	r2, r4
 8014c10:	4b72      	ldr	r3, [pc, #456]	; (8014ddc <_strtod_l+0x5c8>)
 8014c12:	3a09      	subs	r2, #9
 8014c14:	00d2      	lsls	r2, r2, #3
 8014c16:	189b      	adds	r3, r3, r2
 8014c18:	681a      	ldr	r2, [r3, #0]
 8014c1a:	685b      	ldr	r3, [r3, #4]
 8014c1c:	f7ed fa24 	bl	8002068 <__aeabi_dmul>
 8014c20:	0006      	movs	r6, r0
 8014c22:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014c24:	000f      	movs	r7, r1
 8014c26:	f7ee f865 	bl	8002cf4 <__aeabi_ui2d>
 8014c2a:	000b      	movs	r3, r1
 8014c2c:	0002      	movs	r2, r0
 8014c2e:	0039      	movs	r1, r7
 8014c30:	0030      	movs	r0, r6
 8014c32:	f7ec faf3 	bl	800121c <__aeabi_dadd>
 8014c36:	9b05      	ldr	r3, [sp, #20]
 8014c38:	0006      	movs	r6, r0
 8014c3a:	000f      	movs	r7, r1
 8014c3c:	2b0f      	cmp	r3, #15
 8014c3e:	ddd0      	ble.n	8014be2 <_strtod_l+0x3ce>
 8014c40:	9b05      	ldr	r3, [sp, #20]
 8014c42:	1b1c      	subs	r4, r3, r4
 8014c44:	9b07      	ldr	r3, [sp, #28]
 8014c46:	18e4      	adds	r4, r4, r3
 8014c48:	2c00      	cmp	r4, #0
 8014c4a:	dc00      	bgt.n	8014c4e <_strtod_l+0x43a>
 8014c4c:	e094      	b.n	8014d78 <_strtod_l+0x564>
 8014c4e:	230f      	movs	r3, #15
 8014c50:	4023      	ands	r3, r4
 8014c52:	d00a      	beq.n	8014c6a <_strtod_l+0x456>
 8014c54:	4961      	ldr	r1, [pc, #388]	; (8014ddc <_strtod_l+0x5c8>)
 8014c56:	00db      	lsls	r3, r3, #3
 8014c58:	18c9      	adds	r1, r1, r3
 8014c5a:	0032      	movs	r2, r6
 8014c5c:	6808      	ldr	r0, [r1, #0]
 8014c5e:	6849      	ldr	r1, [r1, #4]
 8014c60:	003b      	movs	r3, r7
 8014c62:	f7ed fa01 	bl	8002068 <__aeabi_dmul>
 8014c66:	0006      	movs	r6, r0
 8014c68:	000f      	movs	r7, r1
 8014c6a:	230f      	movs	r3, #15
 8014c6c:	439c      	bics	r4, r3
 8014c6e:	d06e      	beq.n	8014d4e <_strtod_l+0x53a>
 8014c70:	3326      	adds	r3, #38	; 0x26
 8014c72:	33ff      	adds	r3, #255	; 0xff
 8014c74:	429c      	cmp	r4, r3
 8014c76:	dd48      	ble.n	8014d0a <_strtod_l+0x4f6>
 8014c78:	2400      	movs	r4, #0
 8014c7a:	9405      	str	r4, [sp, #20]
 8014c7c:	940b      	str	r4, [sp, #44]	; 0x2c
 8014c7e:	940a      	str	r4, [sp, #40]	; 0x28
 8014c80:	2322      	movs	r3, #34	; 0x22
 8014c82:	2600      	movs	r6, #0
 8014c84:	9a04      	ldr	r2, [sp, #16]
 8014c86:	4f51      	ldr	r7, [pc, #324]	; (8014dcc <_strtod_l+0x5b8>)
 8014c88:	6013      	str	r3, [r2, #0]
 8014c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c8c:	42b3      	cmp	r3, r6
 8014c8e:	d100      	bne.n	8014c92 <_strtod_l+0x47e>
 8014c90:	e601      	b.n	8014896 <_strtod_l+0x82>
 8014c92:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014c94:	9804      	ldr	r0, [sp, #16]
 8014c96:	f003 fa47 	bl	8018128 <_Bfree>
 8014c9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014c9c:	9804      	ldr	r0, [sp, #16]
 8014c9e:	f003 fa43 	bl	8018128 <_Bfree>
 8014ca2:	9905      	ldr	r1, [sp, #20]
 8014ca4:	9804      	ldr	r0, [sp, #16]
 8014ca6:	f003 fa3f 	bl	8018128 <_Bfree>
 8014caa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014cac:	9804      	ldr	r0, [sp, #16]
 8014cae:	f003 fa3b 	bl	8018128 <_Bfree>
 8014cb2:	0021      	movs	r1, r4
 8014cb4:	9804      	ldr	r0, [sp, #16]
 8014cb6:	f003 fa37 	bl	8018128 <_Bfree>
 8014cba:	e5ec      	b.n	8014896 <_strtod_l+0x82>
 8014cbc:	2325      	movs	r3, #37	; 0x25
 8014cbe:	9a05      	ldr	r2, [sp, #20]
 8014cc0:	1a9b      	subs	r3, r3, r2
 8014cc2:	9a07      	ldr	r2, [sp, #28]
 8014cc4:	4293      	cmp	r3, r2
 8014cc6:	dbbb      	blt.n	8014c40 <_strtod_l+0x42c>
 8014cc8:	230f      	movs	r3, #15
 8014cca:	9a05      	ldr	r2, [sp, #20]
 8014ccc:	4c43      	ldr	r4, [pc, #268]	; (8014ddc <_strtod_l+0x5c8>)
 8014cce:	1a9d      	subs	r5, r3, r2
 8014cd0:	00e9      	lsls	r1, r5, #3
 8014cd2:	1861      	adds	r1, r4, r1
 8014cd4:	0032      	movs	r2, r6
 8014cd6:	6808      	ldr	r0, [r1, #0]
 8014cd8:	6849      	ldr	r1, [r1, #4]
 8014cda:	003b      	movs	r3, r7
 8014cdc:	f7ed f9c4 	bl	8002068 <__aeabi_dmul>
 8014ce0:	9b07      	ldr	r3, [sp, #28]
 8014ce2:	1b5e      	subs	r6, r3, r5
 8014ce4:	00f6      	lsls	r6, r6, #3
 8014ce6:	19a6      	adds	r6, r4, r6
 8014ce8:	6832      	ldr	r2, [r6, #0]
 8014cea:	6873      	ldr	r3, [r6, #4]
 8014cec:	e78a      	b.n	8014c04 <_strtod_l+0x3f0>
 8014cee:	9b07      	ldr	r3, [sp, #28]
 8014cf0:	3316      	adds	r3, #22
 8014cf2:	dba5      	blt.n	8014c40 <_strtod_l+0x42c>
 8014cf4:	9b07      	ldr	r3, [sp, #28]
 8014cf6:	0030      	movs	r0, r6
 8014cf8:	00da      	lsls	r2, r3, #3
 8014cfa:	4b38      	ldr	r3, [pc, #224]	; (8014ddc <_strtod_l+0x5c8>)
 8014cfc:	0039      	movs	r1, r7
 8014cfe:	1a9b      	subs	r3, r3, r2
 8014d00:	681a      	ldr	r2, [r3, #0]
 8014d02:	685b      	ldr	r3, [r3, #4]
 8014d04:	f7ec fda6 	bl	8001854 <__aeabi_ddiv>
 8014d08:	e77e      	b.n	8014c08 <_strtod_l+0x3f4>
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	0030      	movs	r0, r6
 8014d0e:	0039      	movs	r1, r7
 8014d10:	001d      	movs	r5, r3
 8014d12:	1124      	asrs	r4, r4, #4
 8014d14:	2c01      	cmp	r4, #1
 8014d16:	dc1d      	bgt.n	8014d54 <_strtod_l+0x540>
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d001      	beq.n	8014d20 <_strtod_l+0x50c>
 8014d1c:	0006      	movs	r6, r0
 8014d1e:	000f      	movs	r7, r1
 8014d20:	4b2f      	ldr	r3, [pc, #188]	; (8014de0 <_strtod_l+0x5cc>)
 8014d22:	00ed      	lsls	r5, r5, #3
 8014d24:	18ff      	adds	r7, r7, r3
 8014d26:	4b2f      	ldr	r3, [pc, #188]	; (8014de4 <_strtod_l+0x5d0>)
 8014d28:	0032      	movs	r2, r6
 8014d2a:	195d      	adds	r5, r3, r5
 8014d2c:	6828      	ldr	r0, [r5, #0]
 8014d2e:	6869      	ldr	r1, [r5, #4]
 8014d30:	003b      	movs	r3, r7
 8014d32:	f7ed f999 	bl	8002068 <__aeabi_dmul>
 8014d36:	4b25      	ldr	r3, [pc, #148]	; (8014dcc <_strtod_l+0x5b8>)
 8014d38:	4a2b      	ldr	r2, [pc, #172]	; (8014de8 <_strtod_l+0x5d4>)
 8014d3a:	0006      	movs	r6, r0
 8014d3c:	400b      	ands	r3, r1
 8014d3e:	4293      	cmp	r3, r2
 8014d40:	d89a      	bhi.n	8014c78 <_strtod_l+0x464>
 8014d42:	4a2a      	ldr	r2, [pc, #168]	; (8014dec <_strtod_l+0x5d8>)
 8014d44:	4293      	cmp	r3, r2
 8014d46:	d913      	bls.n	8014d70 <_strtod_l+0x55c>
 8014d48:	2601      	movs	r6, #1
 8014d4a:	4f29      	ldr	r7, [pc, #164]	; (8014df0 <_strtod_l+0x5dc>)
 8014d4c:	4276      	negs	r6, r6
 8014d4e:	2300      	movs	r3, #0
 8014d50:	9306      	str	r3, [sp, #24]
 8014d52:	e07b      	b.n	8014e4c <_strtod_l+0x638>
 8014d54:	2201      	movs	r2, #1
 8014d56:	4214      	tst	r4, r2
 8014d58:	d007      	beq.n	8014d6a <_strtod_l+0x556>
 8014d5a:	4a22      	ldr	r2, [pc, #136]	; (8014de4 <_strtod_l+0x5d0>)
 8014d5c:	00eb      	lsls	r3, r5, #3
 8014d5e:	189b      	adds	r3, r3, r2
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	f7ed f980 	bl	8002068 <__aeabi_dmul>
 8014d68:	2301      	movs	r3, #1
 8014d6a:	3501      	adds	r5, #1
 8014d6c:	1064      	asrs	r4, r4, #1
 8014d6e:	e7d1      	b.n	8014d14 <_strtod_l+0x500>
 8014d70:	23d4      	movs	r3, #212	; 0xd4
 8014d72:	049b      	lsls	r3, r3, #18
 8014d74:	18cf      	adds	r7, r1, r3
 8014d76:	e7ea      	b.n	8014d4e <_strtod_l+0x53a>
 8014d78:	2c00      	cmp	r4, #0
 8014d7a:	d0e8      	beq.n	8014d4e <_strtod_l+0x53a>
 8014d7c:	230f      	movs	r3, #15
 8014d7e:	4264      	negs	r4, r4
 8014d80:	4023      	ands	r3, r4
 8014d82:	d00a      	beq.n	8014d9a <_strtod_l+0x586>
 8014d84:	4a15      	ldr	r2, [pc, #84]	; (8014ddc <_strtod_l+0x5c8>)
 8014d86:	00db      	lsls	r3, r3, #3
 8014d88:	18d3      	adds	r3, r2, r3
 8014d8a:	0030      	movs	r0, r6
 8014d8c:	681a      	ldr	r2, [r3, #0]
 8014d8e:	685b      	ldr	r3, [r3, #4]
 8014d90:	0039      	movs	r1, r7
 8014d92:	f7ec fd5f 	bl	8001854 <__aeabi_ddiv>
 8014d96:	0006      	movs	r6, r0
 8014d98:	000f      	movs	r7, r1
 8014d9a:	1124      	asrs	r4, r4, #4
 8014d9c:	d0d7      	beq.n	8014d4e <_strtod_l+0x53a>
 8014d9e:	2c1f      	cmp	r4, #31
 8014da0:	dd28      	ble.n	8014df4 <_strtod_l+0x5e0>
 8014da2:	2400      	movs	r4, #0
 8014da4:	9405      	str	r4, [sp, #20]
 8014da6:	940b      	str	r4, [sp, #44]	; 0x2c
 8014da8:	940a      	str	r4, [sp, #40]	; 0x28
 8014daa:	2322      	movs	r3, #34	; 0x22
 8014dac:	9a04      	ldr	r2, [sp, #16]
 8014dae:	2600      	movs	r6, #0
 8014db0:	6013      	str	r3, [r2, #0]
 8014db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014db4:	2700      	movs	r7, #0
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d000      	beq.n	8014dbc <_strtod_l+0x5a8>
 8014dba:	e76a      	b.n	8014c92 <_strtod_l+0x47e>
 8014dbc:	e56b      	b.n	8014896 <_strtod_l+0x82>
 8014dbe:	46c0      	nop			; (mov r8, r8)
 8014dc0:	00004e1f 	.word	0x00004e1f
 8014dc4:	0801baed 	.word	0x0801baed
 8014dc8:	0801bc40 	.word	0x0801bc40
 8014dcc:	7ff00000 	.word	0x7ff00000
 8014dd0:	0801baf5 	.word	0x0801baf5
 8014dd4:	0801baac 	.word	0x0801baac
 8014dd8:	fff80000 	.word	0xfff80000
 8014ddc:	0801bc78 	.word	0x0801bc78
 8014de0:	fcb00000 	.word	0xfcb00000
 8014de4:	0801bc50 	.word	0x0801bc50
 8014de8:	7ca00000 	.word	0x7ca00000
 8014dec:	7c900000 	.word	0x7c900000
 8014df0:	7fefffff 	.word	0x7fefffff
 8014df4:	2310      	movs	r3, #16
 8014df6:	4023      	ands	r3, r4
 8014df8:	9306      	str	r3, [sp, #24]
 8014dfa:	d001      	beq.n	8014e00 <_strtod_l+0x5ec>
 8014dfc:	236a      	movs	r3, #106	; 0x6a
 8014dfe:	9306      	str	r3, [sp, #24]
 8014e00:	2300      	movs	r3, #0
 8014e02:	0030      	movs	r0, r6
 8014e04:	0039      	movs	r1, r7
 8014e06:	001d      	movs	r5, r3
 8014e08:	2c00      	cmp	r4, #0
 8014e0a:	dd00      	ble.n	8014e0e <_strtod_l+0x5fa>
 8014e0c:	e10e      	b.n	801502c <_strtod_l+0x818>
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d001      	beq.n	8014e16 <_strtod_l+0x602>
 8014e12:	0006      	movs	r6, r0
 8014e14:	000f      	movs	r7, r1
 8014e16:	9b06      	ldr	r3, [sp, #24]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d00f      	beq.n	8014e3c <_strtod_l+0x628>
 8014e1c:	236b      	movs	r3, #107	; 0x6b
 8014e1e:	0079      	lsls	r1, r7, #1
 8014e20:	0d49      	lsrs	r1, r1, #21
 8014e22:	003a      	movs	r2, r7
 8014e24:	1a5b      	subs	r3, r3, r1
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	dd08      	ble.n	8014e3c <_strtod_l+0x628>
 8014e2a:	2b1f      	cmp	r3, #31
 8014e2c:	dc00      	bgt.n	8014e30 <_strtod_l+0x61c>
 8014e2e:	e112      	b.n	8015056 <_strtod_l+0x842>
 8014e30:	2600      	movs	r6, #0
 8014e32:	2b34      	cmp	r3, #52	; 0x34
 8014e34:	dc00      	bgt.n	8014e38 <_strtod_l+0x624>
 8014e36:	e107      	b.n	8015048 <_strtod_l+0x834>
 8014e38:	27dc      	movs	r7, #220	; 0xdc
 8014e3a:	04bf      	lsls	r7, r7, #18
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	2300      	movs	r3, #0
 8014e40:	0030      	movs	r0, r6
 8014e42:	0039      	movs	r1, r7
 8014e44:	f7eb fb0a 	bl	800045c <__aeabi_dcmpeq>
 8014e48:	2800      	cmp	r0, #0
 8014e4a:	d1aa      	bne.n	8014da2 <_strtod_l+0x58e>
 8014e4c:	9b08      	ldr	r3, [sp, #32]
 8014e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e50:	9300      	str	r3, [sp, #0]
 8014e52:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014e54:	9b05      	ldr	r3, [sp, #20]
 8014e56:	9804      	ldr	r0, [sp, #16]
 8014e58:	f003 f9ae 	bl	80181b8 <__s2b>
 8014e5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014e5e:	2800      	cmp	r0, #0
 8014e60:	d100      	bne.n	8014e64 <_strtod_l+0x650>
 8014e62:	e709      	b.n	8014c78 <_strtod_l+0x464>
 8014e64:	9b07      	ldr	r3, [sp, #28]
 8014e66:	9a07      	ldr	r2, [sp, #28]
 8014e68:	17db      	asrs	r3, r3, #31
 8014e6a:	4252      	negs	r2, r2
 8014e6c:	4013      	ands	r3, r2
 8014e6e:	9315      	str	r3, [sp, #84]	; 0x54
 8014e70:	9b07      	ldr	r3, [sp, #28]
 8014e72:	2400      	movs	r4, #0
 8014e74:	43db      	mvns	r3, r3
 8014e76:	9a07      	ldr	r2, [sp, #28]
 8014e78:	17db      	asrs	r3, r3, #31
 8014e7a:	401a      	ands	r2, r3
 8014e7c:	921c      	str	r2, [sp, #112]	; 0x70
 8014e7e:	9405      	str	r4, [sp, #20]
 8014e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e82:	9804      	ldr	r0, [sp, #16]
 8014e84:	6859      	ldr	r1, [r3, #4]
 8014e86:	f003 f927 	bl	80180d8 <_Balloc>
 8014e8a:	900a      	str	r0, [sp, #40]	; 0x28
 8014e8c:	2800      	cmp	r0, #0
 8014e8e:	d100      	bne.n	8014e92 <_strtod_l+0x67e>
 8014e90:	e6f6      	b.n	8014c80 <_strtod_l+0x46c>
 8014e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e96:	691b      	ldr	r3, [r3, #16]
 8014e98:	310c      	adds	r1, #12
 8014e9a:	1c9a      	adds	r2, r3, #2
 8014e9c:	0092      	lsls	r2, r2, #2
 8014e9e:	300c      	adds	r0, #12
 8014ea0:	9308      	str	r3, [sp, #32]
 8014ea2:	f7ff fa00 	bl	80142a6 <memcpy>
 8014ea6:	ab24      	add	r3, sp, #144	; 0x90
 8014ea8:	9301      	str	r3, [sp, #4]
 8014eaa:	ab23      	add	r3, sp, #140	; 0x8c
 8014eac:	9300      	str	r3, [sp, #0]
 8014eae:	0032      	movs	r2, r6
 8014eb0:	003b      	movs	r3, r7
 8014eb2:	9804      	ldr	r0, [sp, #16]
 8014eb4:	960e      	str	r6, [sp, #56]	; 0x38
 8014eb6:	970f      	str	r7, [sp, #60]	; 0x3c
 8014eb8:	f003 fc22 	bl	8018700 <__d2b>
 8014ebc:	9022      	str	r0, [sp, #136]	; 0x88
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d100      	bne.n	8014ec4 <_strtod_l+0x6b0>
 8014ec2:	e6dd      	b.n	8014c80 <_strtod_l+0x46c>
 8014ec4:	2101      	movs	r1, #1
 8014ec6:	9804      	ldr	r0, [sp, #16]
 8014ec8:	f003 f9fd 	bl	80182c6 <__i2b>
 8014ecc:	9005      	str	r0, [sp, #20]
 8014ece:	2800      	cmp	r0, #0
 8014ed0:	d100      	bne.n	8014ed4 <_strtod_l+0x6c0>
 8014ed2:	e6d5      	b.n	8014c80 <_strtod_l+0x46c>
 8014ed4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	da00      	bge.n	8014edc <_strtod_l+0x6c8>
 8014eda:	e0c1      	b.n	8015060 <_strtod_l+0x84c>
 8014edc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ede:	189d      	adds	r5, r3, r2
 8014ee0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014ee2:	4694      	mov	ip, r2
 8014ee4:	9906      	ldr	r1, [sp, #24]
 8014ee6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014ee8:	1a5b      	subs	r3, r3, r1
 8014eea:	2136      	movs	r1, #54	; 0x36
 8014eec:	189b      	adds	r3, r3, r2
 8014eee:	1a8a      	subs	r2, r1, r2
 8014ef0:	49b2      	ldr	r1, [pc, #712]	; (80151bc <_strtod_l+0x9a8>)
 8014ef2:	3b01      	subs	r3, #1
 8014ef4:	2001      	movs	r0, #1
 8014ef6:	428b      	cmp	r3, r1
 8014ef8:	db00      	blt.n	8014efc <_strtod_l+0x6e8>
 8014efa:	e0bd      	b.n	8015078 <_strtod_l+0x864>
 8014efc:	1ac9      	subs	r1, r1, r3
 8014efe:	1a52      	subs	r2, r2, r1
 8014f00:	291f      	cmp	r1, #31
 8014f02:	dd00      	ble.n	8014f06 <_strtod_l+0x6f2>
 8014f04:	e0b1      	b.n	801506a <_strtod_l+0x856>
 8014f06:	4088      	lsls	r0, r1
 8014f08:	2300      	movs	r3, #0
 8014f0a:	9014      	str	r0, [sp, #80]	; 0x50
 8014f0c:	9310      	str	r3, [sp, #64]	; 0x40
 8014f0e:	18ab      	adds	r3, r5, r2
 8014f10:	9308      	str	r3, [sp, #32]
 8014f12:	0013      	movs	r3, r2
 8014f14:	9a06      	ldr	r2, [sp, #24]
 8014f16:	4463      	add	r3, ip
 8014f18:	18d3      	adds	r3, r2, r3
 8014f1a:	9a08      	ldr	r2, [sp, #32]
 8014f1c:	930c      	str	r3, [sp, #48]	; 0x30
 8014f1e:	002b      	movs	r3, r5
 8014f20:	4295      	cmp	r5, r2
 8014f22:	dd00      	ble.n	8014f26 <_strtod_l+0x712>
 8014f24:	0013      	movs	r3, r2
 8014f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f28:	4293      	cmp	r3, r2
 8014f2a:	dd00      	ble.n	8014f2e <_strtod_l+0x71a>
 8014f2c:	0013      	movs	r3, r2
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	dd06      	ble.n	8014f40 <_strtod_l+0x72c>
 8014f32:	9a08      	ldr	r2, [sp, #32]
 8014f34:	1aed      	subs	r5, r5, r3
 8014f36:	1ad2      	subs	r2, r2, r3
 8014f38:	9208      	str	r2, [sp, #32]
 8014f3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f3c:	1ad2      	subs	r2, r2, r3
 8014f3e:	920c      	str	r2, [sp, #48]	; 0x30
 8014f40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d017      	beq.n	8014f76 <_strtod_l+0x762>
 8014f46:	001a      	movs	r2, r3
 8014f48:	9905      	ldr	r1, [sp, #20]
 8014f4a:	9804      	ldr	r0, [sp, #16]
 8014f4c:	f003 fa54 	bl	80183f8 <__pow5mult>
 8014f50:	9005      	str	r0, [sp, #20]
 8014f52:	2800      	cmp	r0, #0
 8014f54:	d100      	bne.n	8014f58 <_strtod_l+0x744>
 8014f56:	e693      	b.n	8014c80 <_strtod_l+0x46c>
 8014f58:	0001      	movs	r1, r0
 8014f5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014f5c:	9804      	ldr	r0, [sp, #16]
 8014f5e:	f003 f9bb 	bl	80182d8 <__multiply>
 8014f62:	9012      	str	r0, [sp, #72]	; 0x48
 8014f64:	2800      	cmp	r0, #0
 8014f66:	d100      	bne.n	8014f6a <_strtod_l+0x756>
 8014f68:	e68a      	b.n	8014c80 <_strtod_l+0x46c>
 8014f6a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014f6c:	9804      	ldr	r0, [sp, #16]
 8014f6e:	f003 f8db 	bl	8018128 <_Bfree>
 8014f72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f74:	9322      	str	r3, [sp, #136]	; 0x88
 8014f76:	9b08      	ldr	r3, [sp, #32]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	dd00      	ble.n	8014f7e <_strtod_l+0x76a>
 8014f7c:	e07f      	b.n	801507e <_strtod_l+0x86a>
 8014f7e:	9b07      	ldr	r3, [sp, #28]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	dd08      	ble.n	8014f96 <_strtod_l+0x782>
 8014f84:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014f86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f88:	9804      	ldr	r0, [sp, #16]
 8014f8a:	f003 fa35 	bl	80183f8 <__pow5mult>
 8014f8e:	900a      	str	r0, [sp, #40]	; 0x28
 8014f90:	2800      	cmp	r0, #0
 8014f92:	d100      	bne.n	8014f96 <_strtod_l+0x782>
 8014f94:	e674      	b.n	8014c80 <_strtod_l+0x46c>
 8014f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	dd08      	ble.n	8014fae <_strtod_l+0x79a>
 8014f9c:	001a      	movs	r2, r3
 8014f9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014fa0:	9804      	ldr	r0, [sp, #16]
 8014fa2:	f003 fa6b 	bl	801847c <__lshift>
 8014fa6:	900a      	str	r0, [sp, #40]	; 0x28
 8014fa8:	2800      	cmp	r0, #0
 8014faa:	d100      	bne.n	8014fae <_strtod_l+0x79a>
 8014fac:	e668      	b.n	8014c80 <_strtod_l+0x46c>
 8014fae:	2d00      	cmp	r5, #0
 8014fb0:	dd08      	ble.n	8014fc4 <_strtod_l+0x7b0>
 8014fb2:	002a      	movs	r2, r5
 8014fb4:	9905      	ldr	r1, [sp, #20]
 8014fb6:	9804      	ldr	r0, [sp, #16]
 8014fb8:	f003 fa60 	bl	801847c <__lshift>
 8014fbc:	9005      	str	r0, [sp, #20]
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d100      	bne.n	8014fc4 <_strtod_l+0x7b0>
 8014fc2:	e65d      	b.n	8014c80 <_strtod_l+0x46c>
 8014fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014fc6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014fc8:	9804      	ldr	r0, [sp, #16]
 8014fca:	f003 fac3 	bl	8018554 <__mdiff>
 8014fce:	1e04      	subs	r4, r0, #0
 8014fd0:	d100      	bne.n	8014fd4 <_strtod_l+0x7c0>
 8014fd2:	e655      	b.n	8014c80 <_strtod_l+0x46c>
 8014fd4:	2500      	movs	r5, #0
 8014fd6:	68c3      	ldr	r3, [r0, #12]
 8014fd8:	9905      	ldr	r1, [sp, #20]
 8014fda:	60c5      	str	r5, [r0, #12]
 8014fdc:	9312      	str	r3, [sp, #72]	; 0x48
 8014fde:	f003 fa9f 	bl	8018520 <__mcmp>
 8014fe2:	42a8      	cmp	r0, r5
 8014fe4:	da55      	bge.n	8015092 <_strtod_l+0x87e>
 8014fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014fe8:	42ab      	cmp	r3, r5
 8014fea:	d11b      	bne.n	8015024 <_strtod_l+0x810>
 8014fec:	42ae      	cmp	r6, r5
 8014fee:	d119      	bne.n	8015024 <_strtod_l+0x810>
 8014ff0:	033b      	lsls	r3, r7, #12
 8014ff2:	42ab      	cmp	r3, r5
 8014ff4:	d116      	bne.n	8015024 <_strtod_l+0x810>
 8014ff6:	22d6      	movs	r2, #214	; 0xd6
 8014ff8:	4b71      	ldr	r3, [pc, #452]	; (80151c0 <_strtod_l+0x9ac>)
 8014ffa:	04d2      	lsls	r2, r2, #19
 8014ffc:	403b      	ands	r3, r7
 8014ffe:	4293      	cmp	r3, r2
 8015000:	d910      	bls.n	8015024 <_strtod_l+0x810>
 8015002:	6963      	ldr	r3, [r4, #20]
 8015004:	42ab      	cmp	r3, r5
 8015006:	d102      	bne.n	801500e <_strtod_l+0x7fa>
 8015008:	6923      	ldr	r3, [r4, #16]
 801500a:	2b01      	cmp	r3, #1
 801500c:	dd0a      	ble.n	8015024 <_strtod_l+0x810>
 801500e:	0021      	movs	r1, r4
 8015010:	2201      	movs	r2, #1
 8015012:	9804      	ldr	r0, [sp, #16]
 8015014:	f003 fa32 	bl	801847c <__lshift>
 8015018:	9905      	ldr	r1, [sp, #20]
 801501a:	0004      	movs	r4, r0
 801501c:	f003 fa80 	bl	8018520 <__mcmp>
 8015020:	2800      	cmp	r0, #0
 8015022:	dc6b      	bgt.n	80150fc <_strtod_l+0x8e8>
 8015024:	9b06      	ldr	r3, [sp, #24]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d178      	bne.n	801511c <_strtod_l+0x908>
 801502a:	e632      	b.n	8014c92 <_strtod_l+0x47e>
 801502c:	2201      	movs	r2, #1
 801502e:	4214      	tst	r4, r2
 8015030:	d007      	beq.n	8015042 <_strtod_l+0x82e>
 8015032:	4a64      	ldr	r2, [pc, #400]	; (80151c4 <_strtod_l+0x9b0>)
 8015034:	00eb      	lsls	r3, r5, #3
 8015036:	18d3      	adds	r3, r2, r3
 8015038:	681a      	ldr	r2, [r3, #0]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	f7ed f814 	bl	8002068 <__aeabi_dmul>
 8015040:	2301      	movs	r3, #1
 8015042:	3501      	adds	r5, #1
 8015044:	1064      	asrs	r4, r4, #1
 8015046:	e6df      	b.n	8014e08 <_strtod_l+0x5f4>
 8015048:	2101      	movs	r1, #1
 801504a:	3b20      	subs	r3, #32
 801504c:	4249      	negs	r1, r1
 801504e:	4099      	lsls	r1, r3
 8015050:	400a      	ands	r2, r1
 8015052:	0017      	movs	r7, r2
 8015054:	e6f2      	b.n	8014e3c <_strtod_l+0x628>
 8015056:	2201      	movs	r2, #1
 8015058:	4252      	negs	r2, r2
 801505a:	409a      	lsls	r2, r3
 801505c:	4016      	ands	r6, r2
 801505e:	e6ed      	b.n	8014e3c <_strtod_l+0x628>
 8015060:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015062:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015064:	1ad2      	subs	r2, r2, r3
 8015066:	4694      	mov	ip, r2
 8015068:	e73c      	b.n	8014ee4 <_strtod_l+0x6d0>
 801506a:	4957      	ldr	r1, [pc, #348]	; (80151c8 <_strtod_l+0x9b4>)
 801506c:	1acb      	subs	r3, r1, r3
 801506e:	0001      	movs	r1, r0
 8015070:	4099      	lsls	r1, r3
 8015072:	9110      	str	r1, [sp, #64]	; 0x40
 8015074:	9014      	str	r0, [sp, #80]	; 0x50
 8015076:	e74a      	b.n	8014f0e <_strtod_l+0x6fa>
 8015078:	2300      	movs	r3, #0
 801507a:	9310      	str	r3, [sp, #64]	; 0x40
 801507c:	e7fa      	b.n	8015074 <_strtod_l+0x860>
 801507e:	9a08      	ldr	r2, [sp, #32]
 8015080:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015082:	9804      	ldr	r0, [sp, #16]
 8015084:	f003 f9fa 	bl	801847c <__lshift>
 8015088:	9022      	str	r0, [sp, #136]	; 0x88
 801508a:	2800      	cmp	r0, #0
 801508c:	d000      	beq.n	8015090 <_strtod_l+0x87c>
 801508e:	e776      	b.n	8014f7e <_strtod_l+0x76a>
 8015090:	e5f6      	b.n	8014c80 <_strtod_l+0x46c>
 8015092:	970c      	str	r7, [sp, #48]	; 0x30
 8015094:	2800      	cmp	r0, #0
 8015096:	d000      	beq.n	801509a <_strtod_l+0x886>
 8015098:	e0a0      	b.n	80151dc <_strtod_l+0x9c8>
 801509a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801509c:	033b      	lsls	r3, r7, #12
 801509e:	0b1b      	lsrs	r3, r3, #12
 80150a0:	2a00      	cmp	r2, #0
 80150a2:	d027      	beq.n	80150f4 <_strtod_l+0x8e0>
 80150a4:	4a49      	ldr	r2, [pc, #292]	; (80151cc <_strtod_l+0x9b8>)
 80150a6:	4293      	cmp	r3, r2
 80150a8:	d157      	bne.n	801515a <_strtod_l+0x946>
 80150aa:	2201      	movs	r2, #1
 80150ac:	9b06      	ldr	r3, [sp, #24]
 80150ae:	4252      	negs	r2, r2
 80150b0:	0031      	movs	r1, r6
 80150b2:	0010      	movs	r0, r2
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d00b      	beq.n	80150d0 <_strtod_l+0x8bc>
 80150b8:	25d4      	movs	r5, #212	; 0xd4
 80150ba:	4b41      	ldr	r3, [pc, #260]	; (80151c0 <_strtod_l+0x9ac>)
 80150bc:	04ed      	lsls	r5, r5, #19
 80150be:	403b      	ands	r3, r7
 80150c0:	0010      	movs	r0, r2
 80150c2:	42ab      	cmp	r3, r5
 80150c4:	d804      	bhi.n	80150d0 <_strtod_l+0x8bc>
 80150c6:	306c      	adds	r0, #108	; 0x6c
 80150c8:	0d1b      	lsrs	r3, r3, #20
 80150ca:	1ac3      	subs	r3, r0, r3
 80150cc:	409a      	lsls	r2, r3
 80150ce:	0010      	movs	r0, r2
 80150d0:	4281      	cmp	r1, r0
 80150d2:	d142      	bne.n	801515a <_strtod_l+0x946>
 80150d4:	4b3e      	ldr	r3, [pc, #248]	; (80151d0 <_strtod_l+0x9bc>)
 80150d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150d8:	429a      	cmp	r2, r3
 80150da:	d102      	bne.n	80150e2 <_strtod_l+0x8ce>
 80150dc:	1c4b      	adds	r3, r1, #1
 80150de:	d100      	bne.n	80150e2 <_strtod_l+0x8ce>
 80150e0:	e5ce      	b.n	8014c80 <_strtod_l+0x46c>
 80150e2:	4b37      	ldr	r3, [pc, #220]	; (80151c0 <_strtod_l+0x9ac>)
 80150e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150e6:	2600      	movs	r6, #0
 80150e8:	401a      	ands	r2, r3
 80150ea:	0013      	movs	r3, r2
 80150ec:	2280      	movs	r2, #128	; 0x80
 80150ee:	0352      	lsls	r2, r2, #13
 80150f0:	189f      	adds	r7, r3, r2
 80150f2:	e797      	b.n	8015024 <_strtod_l+0x810>
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d130      	bne.n	801515a <_strtod_l+0x946>
 80150f8:	2e00      	cmp	r6, #0
 80150fa:	d12e      	bne.n	801515a <_strtod_l+0x946>
 80150fc:	9906      	ldr	r1, [sp, #24]
 80150fe:	003b      	movs	r3, r7
 8015100:	4a2f      	ldr	r2, [pc, #188]	; (80151c0 <_strtod_l+0x9ac>)
 8015102:	2900      	cmp	r1, #0
 8015104:	d020      	beq.n	8015148 <_strtod_l+0x934>
 8015106:	0011      	movs	r1, r2
 8015108:	20d6      	movs	r0, #214	; 0xd6
 801510a:	4039      	ands	r1, r7
 801510c:	04c0      	lsls	r0, r0, #19
 801510e:	4281      	cmp	r1, r0
 8015110:	dc1a      	bgt.n	8015148 <_strtod_l+0x934>
 8015112:	23dc      	movs	r3, #220	; 0xdc
 8015114:	049b      	lsls	r3, r3, #18
 8015116:	4299      	cmp	r1, r3
 8015118:	dc00      	bgt.n	801511c <_strtod_l+0x908>
 801511a:	e646      	b.n	8014daa <_strtod_l+0x596>
 801511c:	4b2d      	ldr	r3, [pc, #180]	; (80151d4 <_strtod_l+0x9c0>)
 801511e:	0030      	movs	r0, r6
 8015120:	931b      	str	r3, [sp, #108]	; 0x6c
 8015122:	2300      	movs	r3, #0
 8015124:	931a      	str	r3, [sp, #104]	; 0x68
 8015126:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015128:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801512a:	0039      	movs	r1, r7
 801512c:	f7ec ff9c 	bl	8002068 <__aeabi_dmul>
 8015130:	0006      	movs	r6, r0
 8015132:	000f      	movs	r7, r1
 8015134:	1e0b      	subs	r3, r1, #0
 8015136:	d000      	beq.n	801513a <_strtod_l+0x926>
 8015138:	e5ab      	b.n	8014c92 <_strtod_l+0x47e>
 801513a:	2800      	cmp	r0, #0
 801513c:	d000      	beq.n	8015140 <_strtod_l+0x92c>
 801513e:	e5a8      	b.n	8014c92 <_strtod_l+0x47e>
 8015140:	9a04      	ldr	r2, [sp, #16]
 8015142:	3322      	adds	r3, #34	; 0x22
 8015144:	6013      	str	r3, [r2, #0]
 8015146:	e5a4      	b.n	8014c92 <_strtod_l+0x47e>
 8015148:	2601      	movs	r6, #1
 801514a:	4013      	ands	r3, r2
 801514c:	4a22      	ldr	r2, [pc, #136]	; (80151d8 <_strtod_l+0x9c4>)
 801514e:	4276      	negs	r6, r6
 8015150:	189b      	adds	r3, r3, r2
 8015152:	4a1e      	ldr	r2, [pc, #120]	; (80151cc <_strtod_l+0x9b8>)
 8015154:	431a      	orrs	r2, r3
 8015156:	0017      	movs	r7, r2
 8015158:	e764      	b.n	8015024 <_strtod_l+0x810>
 801515a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801515c:	2b00      	cmp	r3, #0
 801515e:	d015      	beq.n	801518c <_strtod_l+0x978>
 8015160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015162:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015164:	4213      	tst	r3, r2
 8015166:	d100      	bne.n	801516a <_strtod_l+0x956>
 8015168:	e75c      	b.n	8015024 <_strtod_l+0x810>
 801516a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801516c:	9a06      	ldr	r2, [sp, #24]
 801516e:	0030      	movs	r0, r6
 8015170:	0039      	movs	r1, r7
 8015172:	2b00      	cmp	r3, #0
 8015174:	d00f      	beq.n	8015196 <_strtod_l+0x982>
 8015176:	f7ff fb35 	bl	80147e4 <sulp>
 801517a:	0002      	movs	r2, r0
 801517c:	000b      	movs	r3, r1
 801517e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015180:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015182:	f7ec f84b 	bl	800121c <__aeabi_dadd>
 8015186:	0006      	movs	r6, r0
 8015188:	000f      	movs	r7, r1
 801518a:	e74b      	b.n	8015024 <_strtod_l+0x810>
 801518c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801518e:	4233      	tst	r3, r6
 8015190:	d100      	bne.n	8015194 <_strtod_l+0x980>
 8015192:	e747      	b.n	8015024 <_strtod_l+0x810>
 8015194:	e7e9      	b.n	801516a <_strtod_l+0x956>
 8015196:	f7ff fb25 	bl	80147e4 <sulp>
 801519a:	0002      	movs	r2, r0
 801519c:	000b      	movs	r3, r1
 801519e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80151a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80151a2:	f7ed f9d3 	bl	800254c <__aeabi_dsub>
 80151a6:	2200      	movs	r2, #0
 80151a8:	2300      	movs	r3, #0
 80151aa:	0006      	movs	r6, r0
 80151ac:	000f      	movs	r7, r1
 80151ae:	f7eb f955 	bl	800045c <__aeabi_dcmpeq>
 80151b2:	2800      	cmp	r0, #0
 80151b4:	d000      	beq.n	80151b8 <_strtod_l+0x9a4>
 80151b6:	e5f8      	b.n	8014daa <_strtod_l+0x596>
 80151b8:	e734      	b.n	8015024 <_strtod_l+0x810>
 80151ba:	46c0      	nop			; (mov r8, r8)
 80151bc:	fffffc02 	.word	0xfffffc02
 80151c0:	7ff00000 	.word	0x7ff00000
 80151c4:	0801bac0 	.word	0x0801bac0
 80151c8:	fffffbe2 	.word	0xfffffbe2
 80151cc:	000fffff 	.word	0x000fffff
 80151d0:	7fefffff 	.word	0x7fefffff
 80151d4:	39500000 	.word	0x39500000
 80151d8:	fff00000 	.word	0xfff00000
 80151dc:	9905      	ldr	r1, [sp, #20]
 80151de:	0020      	movs	r0, r4
 80151e0:	f003 fae2 	bl	80187a8 <__ratio>
 80151e4:	2380      	movs	r3, #128	; 0x80
 80151e6:	2200      	movs	r2, #0
 80151e8:	05db      	lsls	r3, r3, #23
 80151ea:	9008      	str	r0, [sp, #32]
 80151ec:	9109      	str	r1, [sp, #36]	; 0x24
 80151ee:	f7eb f945 	bl	800047c <__aeabi_dcmple>
 80151f2:	2800      	cmp	r0, #0
 80151f4:	d100      	bne.n	80151f8 <_strtod_l+0x9e4>
 80151f6:	e07f      	b.n	80152f8 <_strtod_l+0xae4>
 80151f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d04b      	beq.n	8015296 <_strtod_l+0xa82>
 80151fe:	2200      	movs	r2, #0
 8015200:	4b8a      	ldr	r3, [pc, #552]	; (801542c <_strtod_l+0xc18>)
 8015202:	9210      	str	r2, [sp, #64]	; 0x40
 8015204:	9311      	str	r3, [sp, #68]	; 0x44
 8015206:	4b89      	ldr	r3, [pc, #548]	; (801542c <_strtod_l+0xc18>)
 8015208:	9308      	str	r3, [sp, #32]
 801520a:	4a89      	ldr	r2, [pc, #548]	; (8015430 <_strtod_l+0xc1c>)
 801520c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801520e:	4013      	ands	r3, r2
 8015210:	9314      	str	r3, [sp, #80]	; 0x50
 8015212:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015214:	4b87      	ldr	r3, [pc, #540]	; (8015434 <_strtod_l+0xc20>)
 8015216:	429a      	cmp	r2, r3
 8015218:	d000      	beq.n	801521c <_strtod_l+0xa08>
 801521a:	e0ba      	b.n	8015392 <_strtod_l+0xb7e>
 801521c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801521e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015220:	921a      	str	r2, [sp, #104]	; 0x68
 8015222:	931b      	str	r3, [sp, #108]	; 0x6c
 8015224:	4a84      	ldr	r2, [pc, #528]	; (8015438 <_strtod_l+0xc24>)
 8015226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015228:	4694      	mov	ip, r2
 801522a:	4463      	add	r3, ip
 801522c:	001f      	movs	r7, r3
 801522e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015232:	0030      	movs	r0, r6
 8015234:	0039      	movs	r1, r7
 8015236:	920c      	str	r2, [sp, #48]	; 0x30
 8015238:	930d      	str	r3, [sp, #52]	; 0x34
 801523a:	f003 f9ef 	bl	801861c <__ulp>
 801523e:	0002      	movs	r2, r0
 8015240:	000b      	movs	r3, r1
 8015242:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015244:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015246:	f7ec ff0f 	bl	8002068 <__aeabi_dmul>
 801524a:	0032      	movs	r2, r6
 801524c:	003b      	movs	r3, r7
 801524e:	f7eb ffe5 	bl	800121c <__aeabi_dadd>
 8015252:	4a77      	ldr	r2, [pc, #476]	; (8015430 <_strtod_l+0xc1c>)
 8015254:	4b79      	ldr	r3, [pc, #484]	; (801543c <_strtod_l+0xc28>)
 8015256:	0006      	movs	r6, r0
 8015258:	400a      	ands	r2, r1
 801525a:	429a      	cmp	r2, r3
 801525c:	d964      	bls.n	8015328 <_strtod_l+0xb14>
 801525e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015260:	4a77      	ldr	r2, [pc, #476]	; (8015440 <_strtod_l+0xc2c>)
 8015262:	4293      	cmp	r3, r2
 8015264:	d103      	bne.n	801526e <_strtod_l+0xa5a>
 8015266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015268:	3301      	adds	r3, #1
 801526a:	d100      	bne.n	801526e <_strtod_l+0xa5a>
 801526c:	e508      	b.n	8014c80 <_strtod_l+0x46c>
 801526e:	2601      	movs	r6, #1
 8015270:	4f73      	ldr	r7, [pc, #460]	; (8015440 <_strtod_l+0xc2c>)
 8015272:	4276      	negs	r6, r6
 8015274:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015276:	9804      	ldr	r0, [sp, #16]
 8015278:	f002 ff56 	bl	8018128 <_Bfree>
 801527c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801527e:	9804      	ldr	r0, [sp, #16]
 8015280:	f002 ff52 	bl	8018128 <_Bfree>
 8015284:	9905      	ldr	r1, [sp, #20]
 8015286:	9804      	ldr	r0, [sp, #16]
 8015288:	f002 ff4e 	bl	8018128 <_Bfree>
 801528c:	0021      	movs	r1, r4
 801528e:	9804      	ldr	r0, [sp, #16]
 8015290:	f002 ff4a 	bl	8018128 <_Bfree>
 8015294:	e5f4      	b.n	8014e80 <_strtod_l+0x66c>
 8015296:	2e00      	cmp	r6, #0
 8015298:	d11e      	bne.n	80152d8 <_strtod_l+0xac4>
 801529a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801529c:	031b      	lsls	r3, r3, #12
 801529e:	d121      	bne.n	80152e4 <_strtod_l+0xad0>
 80152a0:	9808      	ldr	r0, [sp, #32]
 80152a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152a4:	2200      	movs	r2, #0
 80152a6:	4b61      	ldr	r3, [pc, #388]	; (801542c <_strtod_l+0xc18>)
 80152a8:	f7eb f8de 	bl	8000468 <__aeabi_dcmplt>
 80152ac:	2800      	cmp	r0, #0
 80152ae:	d11f      	bne.n	80152f0 <_strtod_l+0xadc>
 80152b0:	9808      	ldr	r0, [sp, #32]
 80152b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152b4:	2200      	movs	r2, #0
 80152b6:	4b63      	ldr	r3, [pc, #396]	; (8015444 <_strtod_l+0xc30>)
 80152b8:	f7ec fed6 	bl	8002068 <__aeabi_dmul>
 80152bc:	0005      	movs	r5, r0
 80152be:	9108      	str	r1, [sp, #32]
 80152c0:	2280      	movs	r2, #128	; 0x80
 80152c2:	0612      	lsls	r2, r2, #24
 80152c4:	4694      	mov	ip, r2
 80152c6:	9b08      	ldr	r3, [sp, #32]
 80152c8:	951e      	str	r5, [sp, #120]	; 0x78
 80152ca:	4463      	add	r3, ip
 80152cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80152ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80152d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80152d2:	9210      	str	r2, [sp, #64]	; 0x40
 80152d4:	9311      	str	r3, [sp, #68]	; 0x44
 80152d6:	e798      	b.n	801520a <_strtod_l+0x9f6>
 80152d8:	2e01      	cmp	r6, #1
 80152da:	d103      	bne.n	80152e4 <_strtod_l+0xad0>
 80152dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d100      	bne.n	80152e4 <_strtod_l+0xad0>
 80152e2:	e562      	b.n	8014daa <_strtod_l+0x596>
 80152e4:	2200      	movs	r2, #0
 80152e6:	4b58      	ldr	r3, [pc, #352]	; (8015448 <_strtod_l+0xc34>)
 80152e8:	2500      	movs	r5, #0
 80152ea:	9210      	str	r2, [sp, #64]	; 0x40
 80152ec:	9311      	str	r3, [sp, #68]	; 0x44
 80152ee:	e78a      	b.n	8015206 <_strtod_l+0x9f2>
 80152f0:	4b54      	ldr	r3, [pc, #336]	; (8015444 <_strtod_l+0xc30>)
 80152f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80152f4:	9308      	str	r3, [sp, #32]
 80152f6:	e7e3      	b.n	80152c0 <_strtod_l+0xaac>
 80152f8:	4b52      	ldr	r3, [pc, #328]	; (8015444 <_strtod_l+0xc30>)
 80152fa:	9808      	ldr	r0, [sp, #32]
 80152fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152fe:	2200      	movs	r2, #0
 8015300:	f7ec feb2 	bl	8002068 <__aeabi_dmul>
 8015304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015306:	0005      	movs	r5, r0
 8015308:	9108      	str	r1, [sp, #32]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d107      	bne.n	801531e <_strtod_l+0xb0a>
 801530e:	2380      	movs	r3, #128	; 0x80
 8015310:	061b      	lsls	r3, r3, #24
 8015312:	18cb      	adds	r3, r1, r3
 8015314:	9016      	str	r0, [sp, #88]	; 0x58
 8015316:	9317      	str	r3, [sp, #92]	; 0x5c
 8015318:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801531a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801531c:	e7d9      	b.n	80152d2 <_strtod_l+0xabe>
 801531e:	0002      	movs	r2, r0
 8015320:	9b08      	ldr	r3, [sp, #32]
 8015322:	9216      	str	r2, [sp, #88]	; 0x58
 8015324:	9317      	str	r3, [sp, #92]	; 0x5c
 8015326:	e7f7      	b.n	8015318 <_strtod_l+0xb04>
 8015328:	23d4      	movs	r3, #212	; 0xd4
 801532a:	049b      	lsls	r3, r3, #18
 801532c:	18cf      	adds	r7, r1, r3
 801532e:	9b06      	ldr	r3, [sp, #24]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d19f      	bne.n	8015274 <_strtod_l+0xa60>
 8015334:	4b3e      	ldr	r3, [pc, #248]	; (8015430 <_strtod_l+0xc1c>)
 8015336:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015338:	970c      	str	r7, [sp, #48]	; 0x30
 801533a:	403b      	ands	r3, r7
 801533c:	429a      	cmp	r2, r3
 801533e:	d199      	bne.n	8015274 <_strtod_l+0xa60>
 8015340:	9908      	ldr	r1, [sp, #32]
 8015342:	0028      	movs	r0, r5
 8015344:	f7ed fc66 	bl	8002c14 <__aeabi_d2iz>
 8015348:	f7ed fc9a 	bl	8002c80 <__aeabi_i2d>
 801534c:	000b      	movs	r3, r1
 801534e:	0002      	movs	r2, r0
 8015350:	9908      	ldr	r1, [sp, #32]
 8015352:	0028      	movs	r0, r5
 8015354:	f7ed f8fa 	bl	800254c <__aeabi_dsub>
 8015358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801535a:	9008      	str	r0, [sp, #32]
 801535c:	9109      	str	r1, [sp, #36]	; 0x24
 801535e:	2b00      	cmp	r3, #0
 8015360:	d104      	bne.n	801536c <_strtod_l+0xb58>
 8015362:	2e00      	cmp	r6, #0
 8015364:	d102      	bne.n	801536c <_strtod_l+0xb58>
 8015366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015368:	031b      	lsls	r3, r3, #12
 801536a:	d058      	beq.n	801541e <_strtod_l+0xc0a>
 801536c:	9808      	ldr	r0, [sp, #32]
 801536e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015370:	4a36      	ldr	r2, [pc, #216]	; (801544c <_strtod_l+0xc38>)
 8015372:	4b37      	ldr	r3, [pc, #220]	; (8015450 <_strtod_l+0xc3c>)
 8015374:	f7eb f878 	bl	8000468 <__aeabi_dcmplt>
 8015378:	2800      	cmp	r0, #0
 801537a:	d000      	beq.n	801537e <_strtod_l+0xb6a>
 801537c:	e489      	b.n	8014c92 <_strtod_l+0x47e>
 801537e:	9808      	ldr	r0, [sp, #32]
 8015380:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015382:	4a34      	ldr	r2, [pc, #208]	; (8015454 <_strtod_l+0xc40>)
 8015384:	4b2f      	ldr	r3, [pc, #188]	; (8015444 <_strtod_l+0xc30>)
 8015386:	f7eb f883 	bl	8000490 <__aeabi_dcmpgt>
 801538a:	2800      	cmp	r0, #0
 801538c:	d100      	bne.n	8015390 <_strtod_l+0xb7c>
 801538e:	e771      	b.n	8015274 <_strtod_l+0xa60>
 8015390:	e47f      	b.n	8014c92 <_strtod_l+0x47e>
 8015392:	9b06      	ldr	r3, [sp, #24]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d02a      	beq.n	80153ee <_strtod_l+0xbda>
 8015398:	23d4      	movs	r3, #212	; 0xd4
 801539a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801539c:	04db      	lsls	r3, r3, #19
 801539e:	429a      	cmp	r2, r3
 80153a0:	d825      	bhi.n	80153ee <_strtod_l+0xbda>
 80153a2:	4a2d      	ldr	r2, [pc, #180]	; (8015458 <_strtod_l+0xc44>)
 80153a4:	4b2d      	ldr	r3, [pc, #180]	; (801545c <_strtod_l+0xc48>)
 80153a6:	0028      	movs	r0, r5
 80153a8:	9908      	ldr	r1, [sp, #32]
 80153aa:	f7eb f867 	bl	800047c <__aeabi_dcmple>
 80153ae:	2800      	cmp	r0, #0
 80153b0:	d016      	beq.n	80153e0 <_strtod_l+0xbcc>
 80153b2:	0028      	movs	r0, r5
 80153b4:	9908      	ldr	r1, [sp, #32]
 80153b6:	f7eb f927 	bl	8000608 <__aeabi_d2uiz>
 80153ba:	2800      	cmp	r0, #0
 80153bc:	d100      	bne.n	80153c0 <_strtod_l+0xbac>
 80153be:	3001      	adds	r0, #1
 80153c0:	f7ed fc98 	bl	8002cf4 <__aeabi_ui2d>
 80153c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80153c6:	0005      	movs	r5, r0
 80153c8:	9108      	str	r1, [sp, #32]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d122      	bne.n	8015414 <_strtod_l+0xc00>
 80153ce:	2380      	movs	r3, #128	; 0x80
 80153d0:	061b      	lsls	r3, r3, #24
 80153d2:	18cb      	adds	r3, r1, r3
 80153d4:	9018      	str	r0, [sp, #96]	; 0x60
 80153d6:	9319      	str	r3, [sp, #100]	; 0x64
 80153d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80153da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80153dc:	9210      	str	r2, [sp, #64]	; 0x40
 80153de:	9311      	str	r3, [sp, #68]	; 0x44
 80153e0:	22d6      	movs	r2, #214	; 0xd6
 80153e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153e4:	04d2      	lsls	r2, r2, #19
 80153e6:	189b      	adds	r3, r3, r2
 80153e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153ea:	1a9b      	subs	r3, r3, r2
 80153ec:	9311      	str	r3, [sp, #68]	; 0x44
 80153ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80153f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80153f2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80153f4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80153f6:	f003 f911 	bl	801861c <__ulp>
 80153fa:	0002      	movs	r2, r0
 80153fc:	000b      	movs	r3, r1
 80153fe:	0030      	movs	r0, r6
 8015400:	0039      	movs	r1, r7
 8015402:	f7ec fe31 	bl	8002068 <__aeabi_dmul>
 8015406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801540a:	f7eb ff07 	bl	800121c <__aeabi_dadd>
 801540e:	0006      	movs	r6, r0
 8015410:	000f      	movs	r7, r1
 8015412:	e78c      	b.n	801532e <_strtod_l+0xb1a>
 8015414:	0002      	movs	r2, r0
 8015416:	9b08      	ldr	r3, [sp, #32]
 8015418:	9218      	str	r2, [sp, #96]	; 0x60
 801541a:	9319      	str	r3, [sp, #100]	; 0x64
 801541c:	e7dc      	b.n	80153d8 <_strtod_l+0xbc4>
 801541e:	4a0b      	ldr	r2, [pc, #44]	; (801544c <_strtod_l+0xc38>)
 8015420:	4b0f      	ldr	r3, [pc, #60]	; (8015460 <_strtod_l+0xc4c>)
 8015422:	9808      	ldr	r0, [sp, #32]
 8015424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015426:	f7eb f81f 	bl	8000468 <__aeabi_dcmplt>
 801542a:	e7ae      	b.n	801538a <_strtod_l+0xb76>
 801542c:	3ff00000 	.word	0x3ff00000
 8015430:	7ff00000 	.word	0x7ff00000
 8015434:	7fe00000 	.word	0x7fe00000
 8015438:	fcb00000 	.word	0xfcb00000
 801543c:	7c9fffff 	.word	0x7c9fffff
 8015440:	7fefffff 	.word	0x7fefffff
 8015444:	3fe00000 	.word	0x3fe00000
 8015448:	bff00000 	.word	0xbff00000
 801544c:	94a03595 	.word	0x94a03595
 8015450:	3fdfffff 	.word	0x3fdfffff
 8015454:	35afe535 	.word	0x35afe535
 8015458:	ffc00000 	.word	0xffc00000
 801545c:	41dfffff 	.word	0x41dfffff
 8015460:	3fcfffff 	.word	0x3fcfffff

08015464 <strtod>:
 8015464:	4b06      	ldr	r3, [pc, #24]	; (8015480 <strtod+0x1c>)
 8015466:	b510      	push	{r4, lr}
 8015468:	0004      	movs	r4, r0
 801546a:	6818      	ldr	r0, [r3, #0]
 801546c:	000a      	movs	r2, r1
 801546e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015470:	2b00      	cmp	r3, #0
 8015472:	d100      	bne.n	8015476 <strtod+0x12>
 8015474:	4b03      	ldr	r3, [pc, #12]	; (8015484 <strtod+0x20>)
 8015476:	0021      	movs	r1, r4
 8015478:	f7ff f9cc 	bl	8014814 <_strtod_l>
 801547c:	bd10      	pop	{r4, pc}
 801547e:	46c0      	nop			; (mov r8, r8)
 8015480:	200000f4 	.word	0x200000f4
 8015484:	20000520 	.word	0x20000520

08015488 <strtok>:
 8015488:	4b03      	ldr	r3, [pc, #12]	; (8015498 <strtok+0x10>)
 801548a:	b510      	push	{r4, lr}
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	2301      	movs	r3, #1
 8015490:	325c      	adds	r2, #92	; 0x5c
 8015492:	f000 f803 	bl	801549c <__strtok_r>
 8015496:	bd10      	pop	{r4, pc}
 8015498:	200000f4 	.word	0x200000f4

0801549c <__strtok_r>:
 801549c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801549e:	2800      	cmp	r0, #0
 80154a0:	d104      	bne.n	80154ac <__strtok_r+0x10>
 80154a2:	6810      	ldr	r0, [r2, #0]
 80154a4:	2800      	cmp	r0, #0
 80154a6:	d101      	bne.n	80154ac <__strtok_r+0x10>
 80154a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154aa:	0020      	movs	r0, r4
 80154ac:	000e      	movs	r6, r1
 80154ae:	7805      	ldrb	r5, [r0, #0]
 80154b0:	1c44      	adds	r4, r0, #1
 80154b2:	7837      	ldrb	r7, [r6, #0]
 80154b4:	2f00      	cmp	r7, #0
 80154b6:	d104      	bne.n	80154c2 <__strtok_r+0x26>
 80154b8:	2d00      	cmp	r5, #0
 80154ba:	d110      	bne.n	80154de <__strtok_r+0x42>
 80154bc:	6015      	str	r5, [r2, #0]
 80154be:	0028      	movs	r0, r5
 80154c0:	e7f2      	b.n	80154a8 <__strtok_r+0xc>
 80154c2:	3601      	adds	r6, #1
 80154c4:	42bd      	cmp	r5, r7
 80154c6:	d1f4      	bne.n	80154b2 <__strtok_r+0x16>
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d1ee      	bne.n	80154aa <__strtok_r+0xe>
 80154cc:	6014      	str	r4, [r2, #0]
 80154ce:	7003      	strb	r3, [r0, #0]
 80154d0:	e7ea      	b.n	80154a8 <__strtok_r+0xc>
 80154d2:	0033      	movs	r3, r6
 80154d4:	e00d      	b.n	80154f2 <__strtok_r+0x56>
 80154d6:	3501      	adds	r5, #1
 80154d8:	2f00      	cmp	r7, #0
 80154da:	d103      	bne.n	80154e4 <__strtok_r+0x48>
 80154dc:	001c      	movs	r4, r3
 80154de:	000d      	movs	r5, r1
 80154e0:	7826      	ldrb	r6, [r4, #0]
 80154e2:	1c63      	adds	r3, r4, #1
 80154e4:	782f      	ldrb	r7, [r5, #0]
 80154e6:	42be      	cmp	r6, r7
 80154e8:	d1f5      	bne.n	80154d6 <__strtok_r+0x3a>
 80154ea:	2e00      	cmp	r6, #0
 80154ec:	d0f1      	beq.n	80154d2 <__strtok_r+0x36>
 80154ee:	2100      	movs	r1, #0
 80154f0:	7021      	strb	r1, [r4, #0]
 80154f2:	6013      	str	r3, [r2, #0]
 80154f4:	e7d8      	b.n	80154a8 <__strtok_r+0xc>
	...

080154f8 <_strtol_l.isra.0>:
 80154f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154fa:	001f      	movs	r7, r3
 80154fc:	000e      	movs	r6, r1
 80154fe:	b087      	sub	sp, #28
 8015500:	9005      	str	r0, [sp, #20]
 8015502:	9101      	str	r1, [sp, #4]
 8015504:	9202      	str	r2, [sp, #8]
 8015506:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015508:	7834      	ldrb	r4, [r6, #0]
 801550a:	f7fe fc6d 	bl	8013de8 <__locale_ctype_ptr_l>
 801550e:	2208      	movs	r2, #8
 8015510:	1900      	adds	r0, r0, r4
 8015512:	7843      	ldrb	r3, [r0, #1]
 8015514:	1c75      	adds	r5, r6, #1
 8015516:	4013      	ands	r3, r2
 8015518:	d136      	bne.n	8015588 <_strtol_l.isra.0+0x90>
 801551a:	2c2d      	cmp	r4, #45	; 0x2d
 801551c:	d136      	bne.n	801558c <_strtol_l.isra.0+0x94>
 801551e:	1cb5      	adds	r5, r6, #2
 8015520:	7874      	ldrb	r4, [r6, #1]
 8015522:	2601      	movs	r6, #1
 8015524:	2f00      	cmp	r7, #0
 8015526:	d062      	beq.n	80155ee <_strtol_l.isra.0+0xf6>
 8015528:	2f10      	cmp	r7, #16
 801552a:	d109      	bne.n	8015540 <_strtol_l.isra.0+0x48>
 801552c:	2c30      	cmp	r4, #48	; 0x30
 801552e:	d107      	bne.n	8015540 <_strtol_l.isra.0+0x48>
 8015530:	2220      	movs	r2, #32
 8015532:	782b      	ldrb	r3, [r5, #0]
 8015534:	4393      	bics	r3, r2
 8015536:	2b58      	cmp	r3, #88	; 0x58
 8015538:	d154      	bne.n	80155e4 <_strtol_l.isra.0+0xec>
 801553a:	2710      	movs	r7, #16
 801553c:	786c      	ldrb	r4, [r5, #1]
 801553e:	3502      	adds	r5, #2
 8015540:	4b2d      	ldr	r3, [pc, #180]	; (80155f8 <_strtol_l.isra.0+0x100>)
 8015542:	0039      	movs	r1, r7
 8015544:	18f3      	adds	r3, r6, r3
 8015546:	0018      	movs	r0, r3
 8015548:	9303      	str	r3, [sp, #12]
 801554a:	f7ea fe87 	bl	800025c <__aeabi_uidivmod>
 801554e:	9104      	str	r1, [sp, #16]
 8015550:	2101      	movs	r1, #1
 8015552:	2300      	movs	r3, #0
 8015554:	4249      	negs	r1, r1
 8015556:	0002      	movs	r2, r0
 8015558:	468c      	mov	ip, r1
 801555a:	0018      	movs	r0, r3
 801555c:	0021      	movs	r1, r4
 801555e:	3930      	subs	r1, #48	; 0x30
 8015560:	2909      	cmp	r1, #9
 8015562:	d81a      	bhi.n	801559a <_strtol_l.isra.0+0xa2>
 8015564:	000c      	movs	r4, r1
 8015566:	42a7      	cmp	r7, r4
 8015568:	dd23      	ble.n	80155b2 <_strtol_l.isra.0+0xba>
 801556a:	1c59      	adds	r1, r3, #1
 801556c:	d009      	beq.n	8015582 <_strtol_l.isra.0+0x8a>
 801556e:	4663      	mov	r3, ip
 8015570:	4282      	cmp	r2, r0
 8015572:	d306      	bcc.n	8015582 <_strtol_l.isra.0+0x8a>
 8015574:	d102      	bne.n	801557c <_strtol_l.isra.0+0x84>
 8015576:	9904      	ldr	r1, [sp, #16]
 8015578:	42a1      	cmp	r1, r4
 801557a:	db02      	blt.n	8015582 <_strtol_l.isra.0+0x8a>
 801557c:	2301      	movs	r3, #1
 801557e:	4378      	muls	r0, r7
 8015580:	1820      	adds	r0, r4, r0
 8015582:	782c      	ldrb	r4, [r5, #0]
 8015584:	3501      	adds	r5, #1
 8015586:	e7e9      	b.n	801555c <_strtol_l.isra.0+0x64>
 8015588:	002e      	movs	r6, r5
 801558a:	e7bc      	b.n	8015506 <_strtol_l.isra.0+0xe>
 801558c:	2c2b      	cmp	r4, #43	; 0x2b
 801558e:	d001      	beq.n	8015594 <_strtol_l.isra.0+0x9c>
 8015590:	001e      	movs	r6, r3
 8015592:	e7c7      	b.n	8015524 <_strtol_l.isra.0+0x2c>
 8015594:	1cb5      	adds	r5, r6, #2
 8015596:	7874      	ldrb	r4, [r6, #1]
 8015598:	e7fa      	b.n	8015590 <_strtol_l.isra.0+0x98>
 801559a:	0021      	movs	r1, r4
 801559c:	3941      	subs	r1, #65	; 0x41
 801559e:	2919      	cmp	r1, #25
 80155a0:	d801      	bhi.n	80155a6 <_strtol_l.isra.0+0xae>
 80155a2:	3c37      	subs	r4, #55	; 0x37
 80155a4:	e7df      	b.n	8015566 <_strtol_l.isra.0+0x6e>
 80155a6:	0021      	movs	r1, r4
 80155a8:	3961      	subs	r1, #97	; 0x61
 80155aa:	2919      	cmp	r1, #25
 80155ac:	d801      	bhi.n	80155b2 <_strtol_l.isra.0+0xba>
 80155ae:	3c57      	subs	r4, #87	; 0x57
 80155b0:	e7d9      	b.n	8015566 <_strtol_l.isra.0+0x6e>
 80155b2:	1c5a      	adds	r2, r3, #1
 80155b4:	d108      	bne.n	80155c8 <_strtol_l.isra.0+0xd0>
 80155b6:	9a05      	ldr	r2, [sp, #20]
 80155b8:	3323      	adds	r3, #35	; 0x23
 80155ba:	6013      	str	r3, [r2, #0]
 80155bc:	9b02      	ldr	r3, [sp, #8]
 80155be:	9803      	ldr	r0, [sp, #12]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d109      	bne.n	80155d8 <_strtol_l.isra.0+0xe0>
 80155c4:	b007      	add	sp, #28
 80155c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155c8:	2e00      	cmp	r6, #0
 80155ca:	d000      	beq.n	80155ce <_strtol_l.isra.0+0xd6>
 80155cc:	4240      	negs	r0, r0
 80155ce:	9a02      	ldr	r2, [sp, #8]
 80155d0:	2a00      	cmp	r2, #0
 80155d2:	d0f7      	beq.n	80155c4 <_strtol_l.isra.0+0xcc>
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d001      	beq.n	80155dc <_strtol_l.isra.0+0xe4>
 80155d8:	1e6b      	subs	r3, r5, #1
 80155da:	9301      	str	r3, [sp, #4]
 80155dc:	9b02      	ldr	r3, [sp, #8]
 80155de:	9a01      	ldr	r2, [sp, #4]
 80155e0:	601a      	str	r2, [r3, #0]
 80155e2:	e7ef      	b.n	80155c4 <_strtol_l.isra.0+0xcc>
 80155e4:	2430      	movs	r4, #48	; 0x30
 80155e6:	2f00      	cmp	r7, #0
 80155e8:	d1aa      	bne.n	8015540 <_strtol_l.isra.0+0x48>
 80155ea:	2708      	movs	r7, #8
 80155ec:	e7a8      	b.n	8015540 <_strtol_l.isra.0+0x48>
 80155ee:	2c30      	cmp	r4, #48	; 0x30
 80155f0:	d09e      	beq.n	8015530 <_strtol_l.isra.0+0x38>
 80155f2:	270a      	movs	r7, #10
 80155f4:	e7a4      	b.n	8015540 <_strtol_l.isra.0+0x48>
 80155f6:	46c0      	nop			; (mov r8, r8)
 80155f8:	7fffffff 	.word	0x7fffffff

080155fc <strtol>:
 80155fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155fe:	0013      	movs	r3, r2
 8015600:	4a06      	ldr	r2, [pc, #24]	; (801561c <strtol+0x20>)
 8015602:	0005      	movs	r5, r0
 8015604:	6810      	ldr	r0, [r2, #0]
 8015606:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8015608:	2c00      	cmp	r4, #0
 801560a:	d100      	bne.n	801560e <strtol+0x12>
 801560c:	4c04      	ldr	r4, [pc, #16]	; (8015620 <strtol+0x24>)
 801560e:	000a      	movs	r2, r1
 8015610:	9400      	str	r4, [sp, #0]
 8015612:	0029      	movs	r1, r5
 8015614:	f7ff ff70 	bl	80154f8 <_strtol_l.isra.0>
 8015618:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801561a:	46c0      	nop			; (mov r8, r8)
 801561c:	200000f4 	.word	0x200000f4
 8015620:	20000520 	.word	0x20000520

08015624 <_svfprintf_r>:
 8015624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015626:	b0d9      	sub	sp, #356	; 0x164
 8015628:	910b      	str	r1, [sp, #44]	; 0x2c
 801562a:	9209      	str	r2, [sp, #36]	; 0x24
 801562c:	001c      	movs	r4, r3
 801562e:	900a      	str	r0, [sp, #40]	; 0x28
 8015630:	f002 fd26 	bl	8018080 <_localeconv_r>
 8015634:	6803      	ldr	r3, [r0, #0]
 8015636:	0018      	movs	r0, r3
 8015638:	931c      	str	r3, [sp, #112]	; 0x70
 801563a:	f7ea fd6d 	bl	8000118 <strlen>
 801563e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015640:	9014      	str	r0, [sp, #80]	; 0x50
 8015642:	899b      	ldrh	r3, [r3, #12]
 8015644:	061b      	lsls	r3, r3, #24
 8015646:	d518      	bpl.n	801567a <_svfprintf_r+0x56>
 8015648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801564a:	691b      	ldr	r3, [r3, #16]
 801564c:	9308      	str	r3, [sp, #32]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d113      	bne.n	801567a <_svfprintf_r+0x56>
 8015652:	2140      	movs	r1, #64	; 0x40
 8015654:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015656:	f7fe fbed 	bl	8013e34 <_malloc_r>
 801565a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801565c:	6018      	str	r0, [r3, #0]
 801565e:	6118      	str	r0, [r3, #16]
 8015660:	2800      	cmp	r0, #0
 8015662:	d107      	bne.n	8015674 <_svfprintf_r+0x50>
 8015664:	230c      	movs	r3, #12
 8015666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015668:	6013      	str	r3, [r2, #0]
 801566a:	3b0d      	subs	r3, #13
 801566c:	9315      	str	r3, [sp, #84]	; 0x54
 801566e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015670:	b059      	add	sp, #356	; 0x164
 8015672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015674:	2340      	movs	r3, #64	; 0x40
 8015676:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015678:	6153      	str	r3, [r2, #20]
 801567a:	2600      	movs	r6, #0
 801567c:	af2f      	add	r7, sp, #188	; 0xbc
 801567e:	972c      	str	r7, [sp, #176]	; 0xb0
 8015680:	962e      	str	r6, [sp, #184]	; 0xb8
 8015682:	962d      	str	r6, [sp, #180]	; 0xb4
 8015684:	960d      	str	r6, [sp, #52]	; 0x34
 8015686:	961a      	str	r6, [sp, #104]	; 0x68
 8015688:	9619      	str	r6, [sp, #100]	; 0x64
 801568a:	961e      	str	r6, [sp, #120]	; 0x78
 801568c:	961d      	str	r6, [sp, #116]	; 0x74
 801568e:	9613      	str	r6, [sp, #76]	; 0x4c
 8015690:	961b      	str	r6, [sp, #108]	; 0x6c
 8015692:	961f      	str	r6, [sp, #124]	; 0x7c
 8015694:	9615      	str	r6, [sp, #84]	; 0x54
 8015696:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015698:	782b      	ldrb	r3, [r5, #0]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d002      	beq.n	80156a4 <_svfprintf_r+0x80>
 801569e:	2b25      	cmp	r3, #37	; 0x25
 80156a0:	d000      	beq.n	80156a4 <_svfprintf_r+0x80>
 80156a2:	e095      	b.n	80157d0 <_svfprintf_r+0x1ac>
 80156a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156a6:	1aee      	subs	r6, r5, r3
 80156a8:	d017      	beq.n	80156da <_svfprintf_r+0xb6>
 80156aa:	603b      	str	r3, [r7, #0]
 80156ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80156ae:	607e      	str	r6, [r7, #4]
 80156b0:	199b      	adds	r3, r3, r6
 80156b2:	932e      	str	r3, [sp, #184]	; 0xb8
 80156b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156b6:	3708      	adds	r7, #8
 80156b8:	9308      	str	r3, [sp, #32]
 80156ba:	3301      	adds	r3, #1
 80156bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80156be:	2b07      	cmp	r3, #7
 80156c0:	dd08      	ble.n	80156d4 <_svfprintf_r+0xb0>
 80156c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80156c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156c8:	f003 f900 	bl	80188cc <__ssprint_r>
 80156cc:	2800      	cmp	r0, #0
 80156ce:	d000      	beq.n	80156d2 <_svfprintf_r+0xae>
 80156d0:	e2d9      	b.n	8015c86 <_svfprintf_r+0x662>
 80156d2:	af2f      	add	r7, sp, #188	; 0xbc
 80156d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80156d6:	199b      	adds	r3, r3, r6
 80156d8:	9315      	str	r3, [sp, #84]	; 0x54
 80156da:	782b      	ldrb	r3, [r5, #0]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d101      	bne.n	80156e4 <_svfprintf_r+0xc0>
 80156e0:	f001 f9e5 	bl	8016aae <_svfprintf_r+0x148a>
 80156e4:	1c6b      	adds	r3, r5, #1
 80156e6:	221b      	movs	r2, #27
 80156e8:	9311      	str	r3, [sp, #68]	; 0x44
 80156ea:	2300      	movs	r3, #0
 80156ec:	a91e      	add	r1, sp, #120	; 0x78
 80156ee:	1852      	adds	r2, r2, r1
 80156f0:	7013      	strb	r3, [r2, #0]
 80156f2:	2201      	movs	r2, #1
 80156f4:	001e      	movs	r6, r3
 80156f6:	2520      	movs	r5, #32
 80156f8:	4252      	negs	r2, r2
 80156fa:	9208      	str	r2, [sp, #32]
 80156fc:	9316      	str	r3, [sp, #88]	; 0x58
 80156fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015700:	781b      	ldrb	r3, [r3, #0]
 8015702:	930e      	str	r3, [sp, #56]	; 0x38
 8015704:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015706:	3301      	adds	r3, #1
 8015708:	9311      	str	r3, [sp, #68]	; 0x44
 801570a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801570c:	3820      	subs	r0, #32
 801570e:	285a      	cmp	r0, #90	; 0x5a
 8015710:	d901      	bls.n	8015716 <_svfprintf_r+0xf2>
 8015712:	f000 fe3d 	bl	8016390 <_svfprintf_r+0xd6c>
 8015716:	f7ea fd11 	bl	800013c <__gnu_thumb1_case_shi>
 801571a:	009e      	.short	0x009e
 801571c:	063b063b 	.word	0x063b063b
 8015720:	063b00a7 	.word	0x063b00a7
 8015724:	063b063b 	.word	0x063b063b
 8015728:	063b0080 	.word	0x063b0080
 801572c:	00a9063b 	.word	0x00a9063b
 8015730:	063b00b3 	.word	0x063b00b3
 8015734:	00b900b1 	.word	0x00b900b1
 8015738:	00dd063b 	.word	0x00dd063b
 801573c:	00df00df 	.word	0x00df00df
 8015740:	00df00df 	.word	0x00df00df
 8015744:	00df00df 	.word	0x00df00df
 8015748:	00df00df 	.word	0x00df00df
 801574c:	063b00df 	.word	0x063b00df
 8015750:	063b063b 	.word	0x063b063b
 8015754:	063b063b 	.word	0x063b063b
 8015758:	063b063b 	.word	0x063b063b
 801575c:	063b0240 	.word	0x063b0240
 8015760:	01fd010a 	.word	0x01fd010a
 8015764:	02400240 	.word	0x02400240
 8015768:	063b0240 	.word	0x063b0240
 801576c:	063b063b 	.word	0x063b063b
 8015770:	00f1063b 	.word	0x00f1063b
 8015774:	063b063b 	.word	0x063b063b
 8015778:	063b04e2 	.word	0x063b04e2
 801577c:	063b063b 	.word	0x063b063b
 8015780:	063b0537 	.word	0x063b0537
 8015784:	063b0557 	.word	0x063b0557
 8015788:	005d063b 	.word	0x005d063b
 801578c:	063b063b 	.word	0x063b063b
 8015790:	063b063b 	.word	0x063b063b
 8015794:	063b063b 	.word	0x063b063b
 8015798:	063b063b 	.word	0x063b063b
 801579c:	063b0240 	.word	0x063b0240
 80157a0:	01ff010a 	.word	0x01ff010a
 80157a4:	02400240 	.word	0x02400240
 80157a8:	00f30240 	.word	0x00f30240
 80157ac:	010601ff 	.word	0x010601ff
 80157b0:	00ff063b 	.word	0x00ff063b
 80157b4:	04c5063b 	.word	0x04c5063b
 80157b8:	052704e4 	.word	0x052704e4
 80157bc:	063b0106 	.word	0x063b0106
 80157c0:	fff20537 	.word	0xfff20537
 80157c4:	063b0559 	.word	0x063b0559
 80157c8:	0582063b 	.word	0x0582063b
 80157cc:	fff2063b 	.word	0xfff2063b
 80157d0:	3501      	adds	r5, #1
 80157d2:	e761      	b.n	8015698 <_svfprintf_r+0x74>
 80157d4:	4bcb      	ldr	r3, [pc, #812]	; (8015b04 <_svfprintf_r+0x4e0>)
 80157d6:	2220      	movs	r2, #32
 80157d8:	931e      	str	r3, [sp, #120]	; 0x78
 80157da:	4032      	ands	r2, r6
 80157dc:	d101      	bne.n	80157e2 <_svfprintf_r+0x1be>
 80157de:	f000 fd21 	bl	8016224 <_svfprintf_r+0xc00>
 80157e2:	2307      	movs	r3, #7
 80157e4:	3407      	adds	r4, #7
 80157e6:	439c      	bics	r4, r3
 80157e8:	0023      	movs	r3, r4
 80157ea:	3308      	adds	r3, #8
 80157ec:	9312      	str	r3, [sp, #72]	; 0x48
 80157ee:	6823      	ldr	r3, [r4, #0]
 80157f0:	6864      	ldr	r4, [r4, #4]
 80157f2:	9306      	str	r3, [sp, #24]
 80157f4:	9407      	str	r4, [sp, #28]
 80157f6:	07f3      	lsls	r3, r6, #31
 80157f8:	d50a      	bpl.n	8015810 <_svfprintf_r+0x1ec>
 80157fa:	9b06      	ldr	r3, [sp, #24]
 80157fc:	9a07      	ldr	r2, [sp, #28]
 80157fe:	4313      	orrs	r3, r2
 8015800:	d006      	beq.n	8015810 <_svfprintf_r+0x1ec>
 8015802:	2230      	movs	r2, #48	; 0x30
 8015804:	ab25      	add	r3, sp, #148	; 0x94
 8015806:	701a      	strb	r2, [r3, #0]
 8015808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801580a:	705a      	strb	r2, [r3, #1]
 801580c:	2302      	movs	r3, #2
 801580e:	431e      	orrs	r6, r3
 8015810:	4bbd      	ldr	r3, [pc, #756]	; (8015b08 <_svfprintf_r+0x4e4>)
 8015812:	401e      	ands	r6, r3
 8015814:	2302      	movs	r3, #2
 8015816:	f000 fc74 	bl	8016102 <_svfprintf_r+0xade>
 801581a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801581c:	f002 fc30 	bl	8018080 <_localeconv_r>
 8015820:	6843      	ldr	r3, [r0, #4]
 8015822:	0018      	movs	r0, r3
 8015824:	931f      	str	r3, [sp, #124]	; 0x7c
 8015826:	f7ea fc77 	bl	8000118 <strlen>
 801582a:	901b      	str	r0, [sp, #108]	; 0x6c
 801582c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801582e:	f002 fc27 	bl	8018080 <_localeconv_r>
 8015832:	6883      	ldr	r3, [r0, #8]
 8015834:	9313      	str	r3, [sp, #76]	; 0x4c
 8015836:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015838:	2b00      	cmp	r3, #0
 801583a:	d100      	bne.n	801583e <_svfprintf_r+0x21a>
 801583c:	e75f      	b.n	80156fe <_svfprintf_r+0xda>
 801583e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015840:	2b00      	cmp	r3, #0
 8015842:	d100      	bne.n	8015846 <_svfprintf_r+0x222>
 8015844:	e75b      	b.n	80156fe <_svfprintf_r+0xda>
 8015846:	781b      	ldrb	r3, [r3, #0]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d100      	bne.n	801584e <_svfprintf_r+0x22a>
 801584c:	e757      	b.n	80156fe <_svfprintf_r+0xda>
 801584e:	2380      	movs	r3, #128	; 0x80
 8015850:	00db      	lsls	r3, r3, #3
 8015852:	431e      	orrs	r6, r3
 8015854:	e753      	b.n	80156fe <_svfprintf_r+0xda>
 8015856:	231b      	movs	r3, #27
 8015858:	aa1e      	add	r2, sp, #120	; 0x78
 801585a:	189b      	adds	r3, r3, r2
 801585c:	781a      	ldrb	r2, [r3, #0]
 801585e:	2a00      	cmp	r2, #0
 8015860:	d000      	beq.n	8015864 <_svfprintf_r+0x240>
 8015862:	e74c      	b.n	80156fe <_svfprintf_r+0xda>
 8015864:	701d      	strb	r5, [r3, #0]
 8015866:	e74a      	b.n	80156fe <_svfprintf_r+0xda>
 8015868:	2301      	movs	r3, #1
 801586a:	e7f2      	b.n	8015852 <_svfprintf_r+0x22e>
 801586c:	6823      	ldr	r3, [r4, #0]
 801586e:	3404      	adds	r4, #4
 8015870:	9316      	str	r3, [sp, #88]	; 0x58
 8015872:	2b00      	cmp	r3, #0
 8015874:	db00      	blt.n	8015878 <_svfprintf_r+0x254>
 8015876:	e742      	b.n	80156fe <_svfprintf_r+0xda>
 8015878:	425b      	negs	r3, r3
 801587a:	9316      	str	r3, [sp, #88]	; 0x58
 801587c:	2304      	movs	r3, #4
 801587e:	e7e8      	b.n	8015852 <_svfprintf_r+0x22e>
 8015880:	231b      	movs	r3, #27
 8015882:	aa1e      	add	r2, sp, #120	; 0x78
 8015884:	189b      	adds	r3, r3, r2
 8015886:	222b      	movs	r2, #43	; 0x2b
 8015888:	701a      	strb	r2, [r3, #0]
 801588a:	e738      	b.n	80156fe <_svfprintf_r+0xda>
 801588c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801588e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015890:	7812      	ldrb	r2, [r2, #0]
 8015892:	3301      	adds	r3, #1
 8015894:	920e      	str	r2, [sp, #56]	; 0x38
 8015896:	2a2a      	cmp	r2, #42	; 0x2a
 8015898:	d008      	beq.n	80158ac <_svfprintf_r+0x288>
 801589a:	2200      	movs	r2, #0
 801589c:	9208      	str	r2, [sp, #32]
 801589e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80158a0:	001a      	movs	r2, r3
 80158a2:	3930      	subs	r1, #48	; 0x30
 80158a4:	2909      	cmp	r1, #9
 80158a6:	d90c      	bls.n	80158c2 <_svfprintf_r+0x29e>
 80158a8:	9211      	str	r2, [sp, #68]	; 0x44
 80158aa:	e72e      	b.n	801570a <_svfprintf_r+0xe6>
 80158ac:	6821      	ldr	r1, [r4, #0]
 80158ae:	1d22      	adds	r2, r4, #4
 80158b0:	9108      	str	r1, [sp, #32]
 80158b2:	2900      	cmp	r1, #0
 80158b4:	da02      	bge.n	80158bc <_svfprintf_r+0x298>
 80158b6:	2101      	movs	r1, #1
 80158b8:	4249      	negs	r1, r1
 80158ba:	9108      	str	r1, [sp, #32]
 80158bc:	0014      	movs	r4, r2
 80158be:	9311      	str	r3, [sp, #68]	; 0x44
 80158c0:	e71d      	b.n	80156fe <_svfprintf_r+0xda>
 80158c2:	200a      	movs	r0, #10
 80158c4:	9a08      	ldr	r2, [sp, #32]
 80158c6:	4342      	muls	r2, r0
 80158c8:	1852      	adds	r2, r2, r1
 80158ca:	9208      	str	r2, [sp, #32]
 80158cc:	781a      	ldrb	r2, [r3, #0]
 80158ce:	3301      	adds	r3, #1
 80158d0:	920e      	str	r2, [sp, #56]	; 0x38
 80158d2:	e7e4      	b.n	801589e <_svfprintf_r+0x27a>
 80158d4:	2380      	movs	r3, #128	; 0x80
 80158d6:	e7bc      	b.n	8015852 <_svfprintf_r+0x22e>
 80158d8:	2300      	movs	r3, #0
 80158da:	9316      	str	r3, [sp, #88]	; 0x58
 80158dc:	220a      	movs	r2, #10
 80158de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80158e0:	4353      	muls	r3, r2
 80158e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80158e4:	3a30      	subs	r2, #48	; 0x30
 80158e6:	18d3      	adds	r3, r2, r3
 80158e8:	9316      	str	r3, [sp, #88]	; 0x58
 80158ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158ec:	1c5a      	adds	r2, r3, #1
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	9211      	str	r2, [sp, #68]	; 0x44
 80158f2:	930e      	str	r3, [sp, #56]	; 0x38
 80158f4:	3b30      	subs	r3, #48	; 0x30
 80158f6:	2b09      	cmp	r3, #9
 80158f8:	d9f0      	bls.n	80158dc <_svfprintf_r+0x2b8>
 80158fa:	e7d5      	b.n	80158a8 <_svfprintf_r+0x284>
 80158fc:	2308      	movs	r3, #8
 80158fe:	e7a8      	b.n	8015852 <_svfprintf_r+0x22e>
 8015900:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	2b68      	cmp	r3, #104	; 0x68
 8015906:	d105      	bne.n	8015914 <_svfprintf_r+0x2f0>
 8015908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801590a:	3301      	adds	r3, #1
 801590c:	9311      	str	r3, [sp, #68]	; 0x44
 801590e:	2380      	movs	r3, #128	; 0x80
 8015910:	009b      	lsls	r3, r3, #2
 8015912:	e79e      	b.n	8015852 <_svfprintf_r+0x22e>
 8015914:	2340      	movs	r3, #64	; 0x40
 8015916:	e79c      	b.n	8015852 <_svfprintf_r+0x22e>
 8015918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801591a:	781b      	ldrb	r3, [r3, #0]
 801591c:	2b6c      	cmp	r3, #108	; 0x6c
 801591e:	d104      	bne.n	801592a <_svfprintf_r+0x306>
 8015920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015922:	3301      	adds	r3, #1
 8015924:	9311      	str	r3, [sp, #68]	; 0x44
 8015926:	432e      	orrs	r6, r5
 8015928:	e6e9      	b.n	80156fe <_svfprintf_r+0xda>
 801592a:	2310      	movs	r3, #16
 801592c:	e791      	b.n	8015852 <_svfprintf_r+0x22e>
 801592e:	1d23      	adds	r3, r4, #4
 8015930:	6822      	ldr	r2, [r4, #0]
 8015932:	9312      	str	r3, [sp, #72]	; 0x48
 8015934:	ab3f      	add	r3, sp, #252	; 0xfc
 8015936:	701a      	strb	r2, [r3, #0]
 8015938:	221b      	movs	r2, #27
 801593a:	2000      	movs	r0, #0
 801593c:	a91e      	add	r1, sp, #120	; 0x78
 801593e:	1852      	adds	r2, r2, r1
 8015940:	7010      	strb	r0, [r2, #0]
 8015942:	2201      	movs	r2, #1
 8015944:	0005      	movs	r5, r0
 8015946:	900c      	str	r0, [sp, #48]	; 0x30
 8015948:	9208      	str	r2, [sp, #32]
 801594a:	9017      	str	r0, [sp, #92]	; 0x5c
 801594c:	9010      	str	r0, [sp, #64]	; 0x40
 801594e:	900f      	str	r0, [sp, #60]	; 0x3c
 8015950:	9309      	str	r3, [sp, #36]	; 0x24
 8015952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015954:	9a08      	ldr	r2, [sp, #32]
 8015956:	9318      	str	r3, [sp, #96]	; 0x60
 8015958:	4293      	cmp	r3, r2
 801595a:	da00      	bge.n	801595e <_svfprintf_r+0x33a>
 801595c:	9218      	str	r2, [sp, #96]	; 0x60
 801595e:	231b      	movs	r3, #27
 8015960:	aa1e      	add	r2, sp, #120	; 0x78
 8015962:	189b      	adds	r3, r3, r2
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	1e5a      	subs	r2, r3, #1
 8015968:	4193      	sbcs	r3, r2
 801596a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801596c:	18d3      	adds	r3, r2, r3
 801596e:	9318      	str	r3, [sp, #96]	; 0x60
 8015970:	2302      	movs	r3, #2
 8015972:	4033      	ands	r3, r6
 8015974:	9320      	str	r3, [sp, #128]	; 0x80
 8015976:	d002      	beq.n	801597e <_svfprintf_r+0x35a>
 8015978:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801597a:	3302      	adds	r3, #2
 801597c:	9318      	str	r3, [sp, #96]	; 0x60
 801597e:	2384      	movs	r3, #132	; 0x84
 8015980:	4033      	ands	r3, r6
 8015982:	9321      	str	r3, [sp, #132]	; 0x84
 8015984:	d121      	bne.n	80159ca <_svfprintf_r+0x3a6>
 8015986:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015988:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801598a:	1a9c      	subs	r4, r3, r2
 801598c:	2c00      	cmp	r4, #0
 801598e:	dd1c      	ble.n	80159ca <_svfprintf_r+0x3a6>
 8015990:	0039      	movs	r1, r7
 8015992:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015994:	485d      	ldr	r0, [pc, #372]	; (8015b0c <_svfprintf_r+0x4e8>)
 8015996:	9322      	str	r3, [sp, #136]	; 0x88
 8015998:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801599a:	3301      	adds	r3, #1
 801599c:	3108      	adds	r1, #8
 801599e:	6038      	str	r0, [r7, #0]
 80159a0:	2c10      	cmp	r4, #16
 80159a2:	dd01      	ble.n	80159a8 <_svfprintf_r+0x384>
 80159a4:	f000 fd08 	bl	80163b8 <_svfprintf_r+0xd94>
 80159a8:	607c      	str	r4, [r7, #4]
 80159aa:	18a4      	adds	r4, r4, r2
 80159ac:	942e      	str	r4, [sp, #184]	; 0xb8
 80159ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80159b0:	000f      	movs	r7, r1
 80159b2:	2b07      	cmp	r3, #7
 80159b4:	dd09      	ble.n	80159ca <_svfprintf_r+0x3a6>
 80159b6:	aa2c      	add	r2, sp, #176	; 0xb0
 80159b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80159ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159bc:	f002 ff86 	bl	80188cc <__ssprint_r>
 80159c0:	2800      	cmp	r0, #0
 80159c2:	d001      	beq.n	80159c8 <_svfprintf_r+0x3a4>
 80159c4:	f001 f852 	bl	8016a6c <_svfprintf_r+0x1448>
 80159c8:	af2f      	add	r7, sp, #188	; 0xbc
 80159ca:	231b      	movs	r3, #27
 80159cc:	aa1e      	add	r2, sp, #120	; 0x78
 80159ce:	189b      	adds	r3, r3, r2
 80159d0:	781a      	ldrb	r2, [r3, #0]
 80159d2:	2a00      	cmp	r2, #0
 80159d4:	d017      	beq.n	8015a06 <_svfprintf_r+0x3e2>
 80159d6:	603b      	str	r3, [r7, #0]
 80159d8:	2301      	movs	r3, #1
 80159da:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80159dc:	607b      	str	r3, [r7, #4]
 80159de:	0013      	movs	r3, r2
 80159e0:	3301      	adds	r3, #1
 80159e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80159e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80159e6:	3708      	adds	r7, #8
 80159e8:	9322      	str	r3, [sp, #136]	; 0x88
 80159ea:	3301      	adds	r3, #1
 80159ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80159ee:	2b07      	cmp	r3, #7
 80159f0:	dd09      	ble.n	8015a06 <_svfprintf_r+0x3e2>
 80159f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80159f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80159f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159f8:	f002 ff68 	bl	80188cc <__ssprint_r>
 80159fc:	2800      	cmp	r0, #0
 80159fe:	d001      	beq.n	8015a04 <_svfprintf_r+0x3e0>
 8015a00:	f001 f834 	bl	8016a6c <_svfprintf_r+0x1448>
 8015a04:	af2f      	add	r7, sp, #188	; 0xbc
 8015a06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d019      	beq.n	8015a40 <_svfprintf_r+0x41c>
 8015a0c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015a0e:	9320      	str	r3, [sp, #128]	; 0x80
 8015a10:	ab25      	add	r3, sp, #148	; 0x94
 8015a12:	603b      	str	r3, [r7, #0]
 8015a14:	2302      	movs	r3, #2
 8015a16:	607b      	str	r3, [r7, #4]
 8015a18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a1a:	3708      	adds	r7, #8
 8015a1c:	3302      	adds	r3, #2
 8015a1e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015a20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a22:	9320      	str	r3, [sp, #128]	; 0x80
 8015a24:	3301      	adds	r3, #1
 8015a26:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a28:	2b07      	cmp	r3, #7
 8015a2a:	dd09      	ble.n	8015a40 <_svfprintf_r+0x41c>
 8015a2c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a32:	f002 ff4b 	bl	80188cc <__ssprint_r>
 8015a36:	2800      	cmp	r0, #0
 8015a38:	d001      	beq.n	8015a3e <_svfprintf_r+0x41a>
 8015a3a:	f001 f817 	bl	8016a6c <_svfprintf_r+0x1448>
 8015a3e:	af2f      	add	r7, sp, #188	; 0xbc
 8015a40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a42:	2b80      	cmp	r3, #128	; 0x80
 8015a44:	d121      	bne.n	8015a8a <_svfprintf_r+0x466>
 8015a46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015a48:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015a4a:	1a9c      	subs	r4, r3, r2
 8015a4c:	2c00      	cmp	r4, #0
 8015a4e:	dd1c      	ble.n	8015a8a <_svfprintf_r+0x466>
 8015a50:	0039      	movs	r1, r7
 8015a52:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a54:	482e      	ldr	r0, [pc, #184]	; (8015b10 <_svfprintf_r+0x4ec>)
 8015a56:	9320      	str	r3, [sp, #128]	; 0x80
 8015a58:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	3108      	adds	r1, #8
 8015a5e:	6038      	str	r0, [r7, #0]
 8015a60:	2c10      	cmp	r4, #16
 8015a62:	dd01      	ble.n	8015a68 <_svfprintf_r+0x444>
 8015a64:	f000 fcbc 	bl	80163e0 <_svfprintf_r+0xdbc>
 8015a68:	607c      	str	r4, [r7, #4]
 8015a6a:	18a4      	adds	r4, r4, r2
 8015a6c:	942e      	str	r4, [sp, #184]	; 0xb8
 8015a6e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a70:	000f      	movs	r7, r1
 8015a72:	2b07      	cmp	r3, #7
 8015a74:	dd09      	ble.n	8015a8a <_svfprintf_r+0x466>
 8015a76:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a7c:	f002 ff26 	bl	80188cc <__ssprint_r>
 8015a80:	2800      	cmp	r0, #0
 8015a82:	d001      	beq.n	8015a88 <_svfprintf_r+0x464>
 8015a84:	f000 fff2 	bl	8016a6c <_svfprintf_r+0x1448>
 8015a88:	af2f      	add	r7, sp, #188	; 0xbc
 8015a8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015a8c:	9a08      	ldr	r2, [sp, #32]
 8015a8e:	1a9c      	subs	r4, r3, r2
 8015a90:	2c00      	cmp	r4, #0
 8015a92:	dd1c      	ble.n	8015ace <_svfprintf_r+0x4aa>
 8015a94:	0039      	movs	r1, r7
 8015a96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a98:	481d      	ldr	r0, [pc, #116]	; (8015b10 <_svfprintf_r+0x4ec>)
 8015a9a:	9317      	str	r3, [sp, #92]	; 0x5c
 8015a9c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	3108      	adds	r1, #8
 8015aa2:	6038      	str	r0, [r7, #0]
 8015aa4:	2c10      	cmp	r4, #16
 8015aa6:	dd01      	ble.n	8015aac <_svfprintf_r+0x488>
 8015aa8:	f000 fcb4 	bl	8016414 <_svfprintf_r+0xdf0>
 8015aac:	18a2      	adds	r2, r4, r2
 8015aae:	607c      	str	r4, [r7, #4]
 8015ab0:	922e      	str	r2, [sp, #184]	; 0xb8
 8015ab2:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ab4:	000f      	movs	r7, r1
 8015ab6:	2b07      	cmp	r3, #7
 8015ab8:	dd09      	ble.n	8015ace <_svfprintf_r+0x4aa>
 8015aba:	aa2c      	add	r2, sp, #176	; 0xb0
 8015abc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015abe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ac0:	f002 ff04 	bl	80188cc <__ssprint_r>
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	d001      	beq.n	8015acc <_svfprintf_r+0x4a8>
 8015ac8:	f000 ffd0 	bl	8016a6c <_svfprintf_r+0x1448>
 8015acc:	af2f      	add	r7, sp, #188	; 0xbc
 8015ace:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015ad0:	9317      	str	r3, [sp, #92]	; 0x5c
 8015ad2:	05f3      	lsls	r3, r6, #23
 8015ad4:	d501      	bpl.n	8015ada <_svfprintf_r+0x4b6>
 8015ad6:	f000 fcb1 	bl	801643c <_svfprintf_r+0xe18>
 8015ada:	9a08      	ldr	r2, [sp, #32]
 8015adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ade:	4694      	mov	ip, r2
 8015ae0:	603b      	str	r3, [r7, #0]
 8015ae2:	9b08      	ldr	r3, [sp, #32]
 8015ae4:	607b      	str	r3, [r7, #4]
 8015ae6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ae8:	4463      	add	r3, ip
 8015aea:	932e      	str	r3, [sp, #184]	; 0xb8
 8015aec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015aee:	9308      	str	r3, [sp, #32]
 8015af0:	3301      	adds	r3, #1
 8015af2:	932d      	str	r3, [sp, #180]	; 0xb4
 8015af4:	2b07      	cmp	r3, #7
 8015af6:	dd01      	ble.n	8015afc <_svfprintf_r+0x4d8>
 8015af8:	f000 fd94 	bl	8016624 <_svfprintf_r+0x1000>
 8015afc:	3708      	adds	r7, #8
 8015afe:	f000 fce4 	bl	80164ca <_svfprintf_r+0xea6>
 8015b02:	46c0      	nop			; (mov r8, r8)
 8015b04:	0801bb09 	.word	0x0801bb09
 8015b08:	fffffbff 	.word	0xfffffbff
 8015b0c:	0801bb1c 	.word	0x0801bb1c
 8015b10:	0801bb2c 	.word	0x0801bb2c
 8015b14:	2310      	movs	r3, #16
 8015b16:	431e      	orrs	r6, r3
 8015b18:	06b3      	lsls	r3, r6, #26
 8015b1a:	d52c      	bpl.n	8015b76 <_svfprintf_r+0x552>
 8015b1c:	2307      	movs	r3, #7
 8015b1e:	3407      	adds	r4, #7
 8015b20:	439c      	bics	r4, r3
 8015b22:	0023      	movs	r3, r4
 8015b24:	3308      	adds	r3, #8
 8015b26:	9312      	str	r3, [sp, #72]	; 0x48
 8015b28:	6823      	ldr	r3, [r4, #0]
 8015b2a:	6864      	ldr	r4, [r4, #4]
 8015b2c:	9306      	str	r3, [sp, #24]
 8015b2e:	9407      	str	r4, [sp, #28]
 8015b30:	9b07      	ldr	r3, [sp, #28]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	da0b      	bge.n	8015b4e <_svfprintf_r+0x52a>
 8015b36:	9906      	ldr	r1, [sp, #24]
 8015b38:	9a07      	ldr	r2, [sp, #28]
 8015b3a:	2400      	movs	r4, #0
 8015b3c:	424b      	negs	r3, r1
 8015b3e:	4194      	sbcs	r4, r2
 8015b40:	9306      	str	r3, [sp, #24]
 8015b42:	9407      	str	r4, [sp, #28]
 8015b44:	231b      	movs	r3, #27
 8015b46:	aa1e      	add	r2, sp, #120	; 0x78
 8015b48:	189b      	adds	r3, r3, r2
 8015b4a:	222d      	movs	r2, #45	; 0x2d
 8015b4c:	701a      	strb	r2, [r3, #0]
 8015b4e:	9b08      	ldr	r3, [sp, #32]
 8015b50:	3301      	adds	r3, #1
 8015b52:	d000      	beq.n	8015b56 <_svfprintf_r+0x532>
 8015b54:	e382      	b.n	801625c <_svfprintf_r+0xc38>
 8015b56:	9b07      	ldr	r3, [sp, #28]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d000      	beq.n	8015b5e <_svfprintf_r+0x53a>
 8015b5c:	e3b0      	b.n	80162c0 <_svfprintf_r+0xc9c>
 8015b5e:	9b06      	ldr	r3, [sp, #24]
 8015b60:	2b09      	cmp	r3, #9
 8015b62:	d900      	bls.n	8015b66 <_svfprintf_r+0x542>
 8015b64:	e3ac      	b.n	80162c0 <_svfprintf_r+0xc9c>
 8015b66:	23e7      	movs	r3, #231	; 0xe7
 8015b68:	aa1e      	add	r2, sp, #120	; 0x78
 8015b6a:	189b      	adds	r3, r3, r2
 8015b6c:	9a06      	ldr	r2, [sp, #24]
 8015b6e:	3230      	adds	r2, #48	; 0x30
 8015b70:	701a      	strb	r2, [r3, #0]
 8015b72:	9309      	str	r3, [sp, #36]	; 0x24
 8015b74:	e395      	b.n	80162a2 <_svfprintf_r+0xc7e>
 8015b76:	1d23      	adds	r3, r4, #4
 8015b78:	9312      	str	r3, [sp, #72]	; 0x48
 8015b7a:	06f3      	lsls	r3, r6, #27
 8015b7c:	d504      	bpl.n	8015b88 <_svfprintf_r+0x564>
 8015b7e:	6823      	ldr	r3, [r4, #0]
 8015b80:	9306      	str	r3, [sp, #24]
 8015b82:	17db      	asrs	r3, r3, #31
 8015b84:	9307      	str	r3, [sp, #28]
 8015b86:	e7d3      	b.n	8015b30 <_svfprintf_r+0x50c>
 8015b88:	6823      	ldr	r3, [r4, #0]
 8015b8a:	0672      	lsls	r2, r6, #25
 8015b8c:	d501      	bpl.n	8015b92 <_svfprintf_r+0x56e>
 8015b8e:	b21b      	sxth	r3, r3
 8015b90:	e7f6      	b.n	8015b80 <_svfprintf_r+0x55c>
 8015b92:	05b2      	lsls	r2, r6, #22
 8015b94:	d5f4      	bpl.n	8015b80 <_svfprintf_r+0x55c>
 8015b96:	b25b      	sxtb	r3, r3
 8015b98:	e7f2      	b.n	8015b80 <_svfprintf_r+0x55c>
 8015b9a:	2307      	movs	r3, #7
 8015b9c:	3407      	adds	r4, #7
 8015b9e:	439c      	bics	r4, r3
 8015ba0:	0023      	movs	r3, r4
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	3308      	adds	r3, #8
 8015ba6:	9312      	str	r3, [sp, #72]	; 0x48
 8015ba8:	6823      	ldr	r3, [r4, #0]
 8015baa:	4252      	negs	r2, r2
 8015bac:	931a      	str	r3, [sp, #104]	; 0x68
 8015bae:	6863      	ldr	r3, [r4, #4]
 8015bb0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8015bb2:	005c      	lsls	r4, r3, #1
 8015bb4:	0864      	lsrs	r4, r4, #1
 8015bb6:	9319      	str	r3, [sp, #100]	; 0x64
 8015bb8:	0028      	movs	r0, r5
 8015bba:	4bcf      	ldr	r3, [pc, #828]	; (8015ef8 <_svfprintf_r+0x8d4>)
 8015bbc:	0021      	movs	r1, r4
 8015bbe:	f7ed f80d 	bl	8002bdc <__aeabi_dcmpun>
 8015bc2:	2800      	cmp	r0, #0
 8015bc4:	d125      	bne.n	8015c12 <_svfprintf_r+0x5ee>
 8015bc6:	2201      	movs	r2, #1
 8015bc8:	4bcb      	ldr	r3, [pc, #812]	; (8015ef8 <_svfprintf_r+0x8d4>)
 8015bca:	4252      	negs	r2, r2
 8015bcc:	0028      	movs	r0, r5
 8015bce:	0021      	movs	r1, r4
 8015bd0:	f7ea fc54 	bl	800047c <__aeabi_dcmple>
 8015bd4:	2800      	cmp	r0, #0
 8015bd6:	d11c      	bne.n	8015c12 <_svfprintf_r+0x5ee>
 8015bd8:	2200      	movs	r2, #0
 8015bda:	2300      	movs	r3, #0
 8015bdc:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015bde:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015be0:	f7ea fc42 	bl	8000468 <__aeabi_dcmplt>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	d004      	beq.n	8015bf2 <_svfprintf_r+0x5ce>
 8015be8:	231b      	movs	r3, #27
 8015bea:	aa1e      	add	r2, sp, #120	; 0x78
 8015bec:	189b      	adds	r3, r3, r2
 8015bee:	222d      	movs	r2, #45	; 0x2d
 8015bf0:	701a      	strb	r2, [r3, #0]
 8015bf2:	4bc2      	ldr	r3, [pc, #776]	; (8015efc <_svfprintf_r+0x8d8>)
 8015bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8015bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015bf8:	2b47      	cmp	r3, #71	; 0x47
 8015bfa:	dc01      	bgt.n	8015c00 <_svfprintf_r+0x5dc>
 8015bfc:	4bc0      	ldr	r3, [pc, #768]	; (8015f00 <_svfprintf_r+0x8dc>)
 8015bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8015c00:	2380      	movs	r3, #128	; 0x80
 8015c02:	439e      	bics	r6, r3
 8015c04:	2300      	movs	r3, #0
 8015c06:	930c      	str	r3, [sp, #48]	; 0x30
 8015c08:	3303      	adds	r3, #3
 8015c0a:	9308      	str	r3, [sp, #32]
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8015c10:	e34f      	b.n	80162b2 <_svfprintf_r+0xc8e>
 8015c12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015c14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c16:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015c18:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015c1a:	f7ec ffdf 	bl	8002bdc <__aeabi_dcmpun>
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	d00e      	beq.n	8015c40 <_svfprintf_r+0x61c>
 8015c22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	da04      	bge.n	8015c32 <_svfprintf_r+0x60e>
 8015c28:	231b      	movs	r3, #27
 8015c2a:	aa1e      	add	r2, sp, #120	; 0x78
 8015c2c:	189b      	adds	r3, r3, r2
 8015c2e:	222d      	movs	r2, #45	; 0x2d
 8015c30:	701a      	strb	r2, [r3, #0]
 8015c32:	4bb4      	ldr	r3, [pc, #720]	; (8015f04 <_svfprintf_r+0x8e0>)
 8015c34:	9309      	str	r3, [sp, #36]	; 0x24
 8015c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c38:	2b47      	cmp	r3, #71	; 0x47
 8015c3a:	dce1      	bgt.n	8015c00 <_svfprintf_r+0x5dc>
 8015c3c:	4bb2      	ldr	r3, [pc, #712]	; (8015f08 <_svfprintf_r+0x8e4>)
 8015c3e:	e7de      	b.n	8015bfe <_svfprintf_r+0x5da>
 8015c40:	2320      	movs	r3, #32
 8015c42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c44:	439a      	bics	r2, r3
 8015c46:	920f      	str	r2, [sp, #60]	; 0x3c
 8015c48:	2a41      	cmp	r2, #65	; 0x41
 8015c4a:	d124      	bne.n	8015c96 <_svfprintf_r+0x672>
 8015c4c:	2230      	movs	r2, #48	; 0x30
 8015c4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015c50:	ab25      	add	r3, sp, #148	; 0x94
 8015c52:	701a      	strb	r2, [r3, #0]
 8015c54:	3228      	adds	r2, #40	; 0x28
 8015c56:	2961      	cmp	r1, #97	; 0x61
 8015c58:	d100      	bne.n	8015c5c <_svfprintf_r+0x638>
 8015c5a:	3220      	adds	r2, #32
 8015c5c:	705a      	strb	r2, [r3, #1]
 8015c5e:	2302      	movs	r3, #2
 8015c60:	431e      	orrs	r6, r3
 8015c62:	9b08      	ldr	r3, [sp, #32]
 8015c64:	2b63      	cmp	r3, #99	; 0x63
 8015c66:	dc00      	bgt.n	8015c6a <_svfprintf_r+0x646>
 8015c68:	e09e      	b.n	8015da8 <_svfprintf_r+0x784>
 8015c6a:	1c59      	adds	r1, r3, #1
 8015c6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c6e:	f7fe f8e1 	bl	8013e34 <_malloc_r>
 8015c72:	9009      	str	r0, [sp, #36]	; 0x24
 8015c74:	2800      	cmp	r0, #0
 8015c76:	d000      	beq.n	8015c7a <_svfprintf_r+0x656>
 8015c78:	e09b      	b.n	8015db2 <_svfprintf_r+0x78e>
 8015c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c7c:	899a      	ldrh	r2, [r3, #12]
 8015c7e:	2340      	movs	r3, #64	; 0x40
 8015c80:	4313      	orrs	r3, r2
 8015c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015c84:	8193      	strh	r3, [r2, #12]
 8015c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c88:	899b      	ldrh	r3, [r3, #12]
 8015c8a:	065b      	lsls	r3, r3, #25
 8015c8c:	d400      	bmi.n	8015c90 <_svfprintf_r+0x66c>
 8015c8e:	e4ee      	b.n	801566e <_svfprintf_r+0x4a>
 8015c90:	2301      	movs	r3, #1
 8015c92:	425b      	negs	r3, r3
 8015c94:	e4ea      	b.n	801566c <_svfprintf_r+0x48>
 8015c96:	9b08      	ldr	r3, [sp, #32]
 8015c98:	900c      	str	r0, [sp, #48]	; 0x30
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	d100      	bne.n	8015ca0 <_svfprintf_r+0x67c>
 8015c9e:	e08b      	b.n	8015db8 <_svfprintf_r+0x794>
 8015ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ca2:	2b47      	cmp	r3, #71	; 0x47
 8015ca4:	d103      	bne.n	8015cae <_svfprintf_r+0x68a>
 8015ca6:	9b08      	ldr	r3, [sp, #32]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d100      	bne.n	8015cae <_svfprintf_r+0x68a>
 8015cac:	e087      	b.n	8015dbe <_svfprintf_r+0x79a>
 8015cae:	2380      	movs	r3, #128	; 0x80
 8015cb0:	005b      	lsls	r3, r3, #1
 8015cb2:	4333      	orrs	r3, r6
 8015cb4:	9320      	str	r3, [sp, #128]	; 0x80
 8015cb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015cb8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	db00      	blt.n	8015cc0 <_svfprintf_r+0x69c>
 8015cbe:	e082      	b.n	8015dc6 <_svfprintf_r+0x7a2>
 8015cc0:	2280      	movs	r2, #128	; 0x80
 8015cc2:	0612      	lsls	r2, r2, #24
 8015cc4:	4694      	mov	ip, r2
 8015cc6:	4463      	add	r3, ip
 8015cc8:	930d      	str	r3, [sp, #52]	; 0x34
 8015cca:	232d      	movs	r3, #45	; 0x2d
 8015ccc:	9322      	str	r3, [sp, #136]	; 0x88
 8015cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cd0:	2b41      	cmp	r3, #65	; 0x41
 8015cd2:	d000      	beq.n	8015cd6 <_svfprintf_r+0x6b2>
 8015cd4:	e105      	b.n	8015ee2 <_svfprintf_r+0x8be>
 8015cd6:	aa26      	add	r2, sp, #152	; 0x98
 8015cd8:	0020      	movs	r0, r4
 8015cda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015cdc:	f002 fdc4 	bl	8018868 <frexp>
 8015ce0:	23ff      	movs	r3, #255	; 0xff
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	059b      	lsls	r3, r3, #22
 8015ce6:	f7ec f9bf 	bl	8002068 <__aeabi_dmul>
 8015cea:	2200      	movs	r2, #0
 8015cec:	2300      	movs	r3, #0
 8015cee:	0004      	movs	r4, r0
 8015cf0:	000d      	movs	r5, r1
 8015cf2:	f7ea fbb3 	bl	800045c <__aeabi_dcmpeq>
 8015cf6:	2800      	cmp	r0, #0
 8015cf8:	d001      	beq.n	8015cfe <_svfprintf_r+0x6da>
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	9326      	str	r3, [sp, #152]	; 0x98
 8015cfe:	4b83      	ldr	r3, [pc, #524]	; (8015f0c <_svfprintf_r+0x8e8>)
 8015d00:	9317      	str	r3, [sp, #92]	; 0x5c
 8015d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d04:	2b61      	cmp	r3, #97	; 0x61
 8015d06:	d101      	bne.n	8015d0c <_svfprintf_r+0x6e8>
 8015d08:	4b81      	ldr	r3, [pc, #516]	; (8015f10 <_svfprintf_r+0x8ec>)
 8015d0a:	9317      	str	r3, [sp, #92]	; 0x5c
 8015d0c:	9b08      	ldr	r3, [sp, #32]
 8015d0e:	3b01      	subs	r3, #1
 8015d10:	9310      	str	r3, [sp, #64]	; 0x40
 8015d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d14:	9318      	str	r3, [sp, #96]	; 0x60
 8015d16:	2200      	movs	r2, #0
 8015d18:	4b7e      	ldr	r3, [pc, #504]	; (8015f14 <_svfprintf_r+0x8f0>)
 8015d1a:	0020      	movs	r0, r4
 8015d1c:	0029      	movs	r1, r5
 8015d1e:	f7ec f9a3 	bl	8002068 <__aeabi_dmul>
 8015d22:	000d      	movs	r5, r1
 8015d24:	0004      	movs	r4, r0
 8015d26:	f7ec ff75 	bl	8002c14 <__aeabi_d2iz>
 8015d2a:	9021      	str	r0, [sp, #132]	; 0x84
 8015d2c:	f7ec ffa8 	bl	8002c80 <__aeabi_i2d>
 8015d30:	0002      	movs	r2, r0
 8015d32:	000b      	movs	r3, r1
 8015d34:	0020      	movs	r0, r4
 8015d36:	0029      	movs	r1, r5
 8015d38:	f7ec fc08 	bl	800254c <__aeabi_dsub>
 8015d3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015d3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d40:	3301      	adds	r3, #1
 8015d42:	930d      	str	r3, [sp, #52]	; 0x34
 8015d44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d46:	0004      	movs	r4, r0
 8015d48:	5c9b      	ldrb	r3, [r3, r2]
 8015d4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015d4c:	000d      	movs	r5, r1
 8015d4e:	7013      	strb	r3, [r2, #0]
 8015d50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d52:	9323      	str	r3, [sp, #140]	; 0x8c
 8015d54:	3301      	adds	r3, #1
 8015d56:	d00a      	beq.n	8015d6e <_svfprintf_r+0x74a>
 8015d58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	3b01      	subs	r3, #1
 8015d5e:	9310      	str	r3, [sp, #64]	; 0x40
 8015d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d62:	9318      	str	r3, [sp, #96]	; 0x60
 8015d64:	2300      	movs	r3, #0
 8015d66:	f7ea fb79 	bl	800045c <__aeabi_dcmpeq>
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	d0d3      	beq.n	8015d16 <_svfprintf_r+0x6f2>
 8015d6e:	2200      	movs	r2, #0
 8015d70:	4b69      	ldr	r3, [pc, #420]	; (8015f18 <_svfprintf_r+0x8f4>)
 8015d72:	0020      	movs	r0, r4
 8015d74:	0029      	movs	r1, r5
 8015d76:	f7ea fb8b 	bl	8000490 <__aeabi_dcmpgt>
 8015d7a:	2800      	cmp	r0, #0
 8015d7c:	d126      	bne.n	8015dcc <_svfprintf_r+0x7a8>
 8015d7e:	2200      	movs	r2, #0
 8015d80:	4b65      	ldr	r3, [pc, #404]	; (8015f18 <_svfprintf_r+0x8f4>)
 8015d82:	0020      	movs	r0, r4
 8015d84:	0029      	movs	r1, r5
 8015d86:	f7ea fb69 	bl	800045c <__aeabi_dcmpeq>
 8015d8a:	2800      	cmp	r0, #0
 8015d8c:	d002      	beq.n	8015d94 <_svfprintf_r+0x770>
 8015d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d90:	07db      	lsls	r3, r3, #31
 8015d92:	d41b      	bmi.n	8015dcc <_svfprintf_r+0x7a8>
 8015d94:	2130      	movs	r1, #48	; 0x30
 8015d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d98:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015d9a:	1898      	adds	r0, r3, r2
 8015d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8015d9e:	1ac2      	subs	r2, r0, r3
 8015da0:	d426      	bmi.n	8015df0 <_svfprintf_r+0x7cc>
 8015da2:	7019      	strb	r1, [r3, #0]
 8015da4:	3301      	adds	r3, #1
 8015da6:	e7f9      	b.n	8015d9c <_svfprintf_r+0x778>
 8015da8:	2300      	movs	r3, #0
 8015daa:	930c      	str	r3, [sp, #48]	; 0x30
 8015dac:	ab3f      	add	r3, sp, #252	; 0xfc
 8015dae:	9309      	str	r3, [sp, #36]	; 0x24
 8015db0:	e77d      	b.n	8015cae <_svfprintf_r+0x68a>
 8015db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015db4:	930c      	str	r3, [sp, #48]	; 0x30
 8015db6:	e77a      	b.n	8015cae <_svfprintf_r+0x68a>
 8015db8:	2306      	movs	r3, #6
 8015dba:	9308      	str	r3, [sp, #32]
 8015dbc:	e777      	b.n	8015cae <_svfprintf_r+0x68a>
 8015dbe:	9b08      	ldr	r3, [sp, #32]
 8015dc0:	930c      	str	r3, [sp, #48]	; 0x30
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	e7f9      	b.n	8015dba <_svfprintf_r+0x796>
 8015dc6:	930d      	str	r3, [sp, #52]	; 0x34
 8015dc8:	2300      	movs	r3, #0
 8015dca:	e77f      	b.n	8015ccc <_svfprintf_r+0x6a8>
 8015dcc:	2030      	movs	r0, #48	; 0x30
 8015dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dd0:	932a      	str	r3, [sp, #168]	; 0xa8
 8015dd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015dd4:	7bda      	ldrb	r2, [r3, #15]
 8015dd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015dd8:	3b01      	subs	r3, #1
 8015dda:	932a      	str	r3, [sp, #168]	; 0xa8
 8015ddc:	7819      	ldrb	r1, [r3, #0]
 8015dde:	4291      	cmp	r1, r2
 8015de0:	d07d      	beq.n	8015ede <_svfprintf_r+0x8ba>
 8015de2:	1c4a      	adds	r2, r1, #1
 8015de4:	b2d2      	uxtb	r2, r2
 8015de6:	2939      	cmp	r1, #57	; 0x39
 8015de8:	d101      	bne.n	8015dee <_svfprintf_r+0x7ca>
 8015dea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015dec:	7a92      	ldrb	r2, [r2, #10]
 8015dee:	701a      	strb	r2, [r3, #0]
 8015df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015df4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015df6:	1a9b      	subs	r3, r3, r2
 8015df8:	930d      	str	r3, [sp, #52]	; 0x34
 8015dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015dfc:	2b47      	cmp	r3, #71	; 0x47
 8015dfe:	d000      	beq.n	8015e02 <_svfprintf_r+0x7de>
 8015e00:	e0d2      	b.n	8015fa8 <_svfprintf_r+0x984>
 8015e02:	1ceb      	adds	r3, r5, #3
 8015e04:	db03      	blt.n	8015e0e <_svfprintf_r+0x7ea>
 8015e06:	9b08      	ldr	r3, [sp, #32]
 8015e08:	42ab      	cmp	r3, r5
 8015e0a:	db00      	blt.n	8015e0e <_svfprintf_r+0x7ea>
 8015e0c:	e0fd      	b.n	801600a <_svfprintf_r+0x9e6>
 8015e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e10:	3b02      	subs	r3, #2
 8015e12:	930e      	str	r3, [sp, #56]	; 0x38
 8015e14:	2238      	movs	r2, #56	; 0x38
 8015e16:	466b      	mov	r3, sp
 8015e18:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015e1a:	189b      	adds	r3, r3, r2
 8015e1c:	3a18      	subs	r2, #24
 8015e1e:	4391      	bics	r1, r2
 8015e20:	1e6c      	subs	r4, r5, #1
 8015e22:	000a      	movs	r2, r1
 8015e24:	9426      	str	r4, [sp, #152]	; 0x98
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	2100      	movs	r1, #0
 8015e2a:	2a41      	cmp	r2, #65	; 0x41
 8015e2c:	d102      	bne.n	8015e34 <_svfprintf_r+0x810>
 8015e2e:	330f      	adds	r3, #15
 8015e30:	b2db      	uxtb	r3, r3
 8015e32:	3101      	adds	r1, #1
 8015e34:	aa28      	add	r2, sp, #160	; 0xa0
 8015e36:	7013      	strb	r3, [r2, #0]
 8015e38:	232b      	movs	r3, #43	; 0x2b
 8015e3a:	2c00      	cmp	r4, #0
 8015e3c:	da02      	bge.n	8015e44 <_svfprintf_r+0x820>
 8015e3e:	2401      	movs	r4, #1
 8015e40:	232d      	movs	r3, #45	; 0x2d
 8015e42:	1b64      	subs	r4, r4, r5
 8015e44:	7053      	strb	r3, [r2, #1]
 8015e46:	2c09      	cmp	r4, #9
 8015e48:	dc00      	bgt.n	8015e4c <_svfprintf_r+0x828>
 8015e4a:	e0c7      	b.n	8015fdc <_svfprintf_r+0x9b8>
 8015e4c:	2537      	movs	r5, #55	; 0x37
 8015e4e:	ab1e      	add	r3, sp, #120	; 0x78
 8015e50:	18ed      	adds	r5, r5, r3
 8015e52:	1e6b      	subs	r3, r5, #1
 8015e54:	0020      	movs	r0, r4
 8015e56:	210a      	movs	r1, #10
 8015e58:	9308      	str	r3, [sp, #32]
 8015e5a:	f7ea fae9 	bl	8000430 <__aeabi_idivmod>
 8015e5e:	1e6b      	subs	r3, r5, #1
 8015e60:	3130      	adds	r1, #48	; 0x30
 8015e62:	7019      	strb	r1, [r3, #0]
 8015e64:	0020      	movs	r0, r4
 8015e66:	210a      	movs	r1, #10
 8015e68:	f7ea f9fc 	bl	8000264 <__divsi3>
 8015e6c:	0004      	movs	r4, r0
 8015e6e:	2809      	cmp	r0, #9
 8015e70:	dd00      	ble.n	8015e74 <_svfprintf_r+0x850>
 8015e72:	e0ac      	b.n	8015fce <_svfprintf_r+0x9aa>
 8015e74:	232a      	movs	r3, #42	; 0x2a
 8015e76:	2137      	movs	r1, #55	; 0x37
 8015e78:	aa1e      	add	r2, sp, #120	; 0x78
 8015e7a:	3d02      	subs	r5, #2
 8015e7c:	3430      	adds	r4, #48	; 0x30
 8015e7e:	702c      	strb	r4, [r5, #0]
 8015e80:	189b      	adds	r3, r3, r2
 8015e82:	1889      	adds	r1, r1, r2
 8015e84:	001a      	movs	r2, r3
 8015e86:	428d      	cmp	r5, r1
 8015e88:	d200      	bcs.n	8015e8c <_svfprintf_r+0x868>
 8015e8a:	e0a2      	b.n	8015fd2 <_svfprintf_r+0x9ae>
 8015e8c:	ab28      	add	r3, sp, #160	; 0xa0
 8015e8e:	1ad3      	subs	r3, r2, r3
 8015e90:	931d      	str	r3, [sp, #116]	; 0x74
 8015e92:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e96:	4694      	mov	ip, r2
 8015e98:	4463      	add	r3, ip
 8015e9a:	9308      	str	r3, [sp, #32]
 8015e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e9e:	2b01      	cmp	r3, #1
 8015ea0:	dc01      	bgt.n	8015ea6 <_svfprintf_r+0x882>
 8015ea2:	07f3      	lsls	r3, r6, #31
 8015ea4:	d504      	bpl.n	8015eb0 <_svfprintf_r+0x88c>
 8015ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ea8:	9b08      	ldr	r3, [sp, #32]
 8015eaa:	4694      	mov	ip, r2
 8015eac:	4463      	add	r3, ip
 8015eae:	9308      	str	r3, [sp, #32]
 8015eb0:	2280      	movs	r2, #128	; 0x80
 8015eb2:	4b1a      	ldr	r3, [pc, #104]	; (8015f1c <_svfprintf_r+0x8f8>)
 8015eb4:	0052      	lsls	r2, r2, #1
 8015eb6:	4033      	ands	r3, r6
 8015eb8:	431a      	orrs	r2, r3
 8015eba:	2300      	movs	r3, #0
 8015ebc:	001d      	movs	r5, r3
 8015ebe:	9220      	str	r2, [sp, #128]	; 0x80
 8015ec0:	9310      	str	r3, [sp, #64]	; 0x40
 8015ec2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ec4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d100      	bne.n	8015ecc <_svfprintf_r+0x8a8>
 8015eca:	e270      	b.n	80163ae <_svfprintf_r+0xd8a>
 8015ecc:	231b      	movs	r3, #27
 8015ece:	aa1e      	add	r2, sp, #120	; 0x78
 8015ed0:	189b      	adds	r3, r3, r2
 8015ed2:	222d      	movs	r2, #45	; 0x2d
 8015ed4:	701a      	strb	r2, [r3, #0]
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015eda:	9317      	str	r3, [sp, #92]	; 0x5c
 8015edc:	e539      	b.n	8015952 <_svfprintf_r+0x32e>
 8015ede:	7018      	strb	r0, [r3, #0]
 8015ee0:	e779      	b.n	8015dd6 <_svfprintf_r+0x7b2>
 8015ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ee4:	2b46      	cmp	r3, #70	; 0x46
 8015ee6:	d01b      	beq.n	8015f20 <_svfprintf_r+0x8fc>
 8015ee8:	9d08      	ldr	r5, [sp, #32]
 8015eea:	2b45      	cmp	r3, #69	; 0x45
 8015eec:	d101      	bne.n	8015ef2 <_svfprintf_r+0x8ce>
 8015eee:	9b08      	ldr	r3, [sp, #32]
 8015ef0:	1c5d      	adds	r5, r3, #1
 8015ef2:	2302      	movs	r3, #2
 8015ef4:	e016      	b.n	8015f24 <_svfprintf_r+0x900>
 8015ef6:	46c0      	nop			; (mov r8, r8)
 8015ef8:	7fefffff 	.word	0x7fefffff
 8015efc:	0801baec 	.word	0x0801baec
 8015f00:	0801bae8 	.word	0x0801bae8
 8015f04:	0801baf4 	.word	0x0801baf4
 8015f08:	0801baf0 	.word	0x0801baf0
 8015f0c:	0801bb09 	.word	0x0801bb09
 8015f10:	0801baf8 	.word	0x0801baf8
 8015f14:	40300000 	.word	0x40300000
 8015f18:	3fe00000 	.word	0x3fe00000
 8015f1c:	fffffbff 	.word	0xfffffbff
 8015f20:	2303      	movs	r3, #3
 8015f22:	9d08      	ldr	r5, [sp, #32]
 8015f24:	aa2a      	add	r2, sp, #168	; 0xa8
 8015f26:	9204      	str	r2, [sp, #16]
 8015f28:	aa27      	add	r2, sp, #156	; 0x9c
 8015f2a:	9203      	str	r2, [sp, #12]
 8015f2c:	aa26      	add	r2, sp, #152	; 0x98
 8015f2e:	9202      	str	r2, [sp, #8]
 8015f30:	9300      	str	r3, [sp, #0]
 8015f32:	9501      	str	r5, [sp, #4]
 8015f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f36:	0022      	movs	r2, r4
 8015f38:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f3a:	f000 fe79 	bl	8016c30 <_dtoa_r>
 8015f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f40:	9009      	str	r0, [sp, #36]	; 0x24
 8015f42:	2b47      	cmp	r3, #71	; 0x47
 8015f44:	d101      	bne.n	8015f4a <_svfprintf_r+0x926>
 8015f46:	07f3      	lsls	r3, r6, #31
 8015f48:	d524      	bpl.n	8015f94 <_svfprintf_r+0x970>
 8015f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f4c:	195b      	adds	r3, r3, r5
 8015f4e:	9310      	str	r3, [sp, #64]	; 0x40
 8015f50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f52:	2b46      	cmp	r3, #70	; 0x46
 8015f54:	d113      	bne.n	8015f7e <_svfprintf_r+0x95a>
 8015f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f58:	781b      	ldrb	r3, [r3, #0]
 8015f5a:	2b30      	cmp	r3, #48	; 0x30
 8015f5c:	d10a      	bne.n	8015f74 <_svfprintf_r+0x950>
 8015f5e:	2200      	movs	r2, #0
 8015f60:	2300      	movs	r3, #0
 8015f62:	0020      	movs	r0, r4
 8015f64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015f66:	f7ea fa79 	bl	800045c <__aeabi_dcmpeq>
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	d102      	bne.n	8015f74 <_svfprintf_r+0x950>
 8015f6e:	2301      	movs	r3, #1
 8015f70:	1b5d      	subs	r5, r3, r5
 8015f72:	9526      	str	r5, [sp, #152]	; 0x98
 8015f74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f78:	4694      	mov	ip, r2
 8015f7a:	4463      	add	r3, ip
 8015f7c:	9310      	str	r3, [sp, #64]	; 0x40
 8015f7e:	2200      	movs	r2, #0
 8015f80:	2300      	movs	r3, #0
 8015f82:	0020      	movs	r0, r4
 8015f84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015f86:	f7ea fa69 	bl	800045c <__aeabi_dcmpeq>
 8015f8a:	2230      	movs	r2, #48	; 0x30
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	d006      	beq.n	8015f9e <_svfprintf_r+0x97a>
 8015f90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f92:	932a      	str	r3, [sp, #168]	; 0xa8
 8015f94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015f96:	e72c      	b.n	8015df2 <_svfprintf_r+0x7ce>
 8015f98:	1c59      	adds	r1, r3, #1
 8015f9a:	912a      	str	r1, [sp, #168]	; 0xa8
 8015f9c:	701a      	strb	r2, [r3, #0]
 8015f9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015fa0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015fa2:	4299      	cmp	r1, r3
 8015fa4:	d8f8      	bhi.n	8015f98 <_svfprintf_r+0x974>
 8015fa6:	e7f5      	b.n	8015f94 <_svfprintf_r+0x970>
 8015fa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015faa:	2b46      	cmp	r3, #70	; 0x46
 8015fac:	d000      	beq.n	8015fb0 <_svfprintf_r+0x98c>
 8015fae:	e731      	b.n	8015e14 <_svfprintf_r+0x7f0>
 8015fb0:	9b08      	ldr	r3, [sp, #32]
 8015fb2:	2d00      	cmp	r5, #0
 8015fb4:	dd21      	ble.n	8015ffa <_svfprintf_r+0x9d6>
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d101      	bne.n	8015fbe <_svfprintf_r+0x99a>
 8015fba:	07f3      	lsls	r3, r6, #31
 8015fbc:	d54a      	bpl.n	8016054 <_svfprintf_r+0xa30>
 8015fbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fc0:	18eb      	adds	r3, r5, r3
 8015fc2:	9a08      	ldr	r2, [sp, #32]
 8015fc4:	18d3      	adds	r3, r2, r3
 8015fc6:	9308      	str	r3, [sp, #32]
 8015fc8:	2366      	movs	r3, #102	; 0x66
 8015fca:	930e      	str	r3, [sp, #56]	; 0x38
 8015fcc:	e034      	b.n	8016038 <_svfprintf_r+0xa14>
 8015fce:	9d08      	ldr	r5, [sp, #32]
 8015fd0:	e73f      	b.n	8015e52 <_svfprintf_r+0x82e>
 8015fd2:	782a      	ldrb	r2, [r5, #0]
 8015fd4:	3501      	adds	r5, #1
 8015fd6:	701a      	strb	r2, [r3, #0]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	e753      	b.n	8015e84 <_svfprintf_r+0x860>
 8015fdc:	232a      	movs	r3, #42	; 0x2a
 8015fde:	aa1e      	add	r2, sp, #120	; 0x78
 8015fe0:	189b      	adds	r3, r3, r2
 8015fe2:	2900      	cmp	r1, #0
 8015fe4:	d105      	bne.n	8015ff2 <_svfprintf_r+0x9ce>
 8015fe6:	2230      	movs	r2, #48	; 0x30
 8015fe8:	ab28      	add	r3, sp, #160	; 0xa0
 8015fea:	709a      	strb	r2, [r3, #2]
 8015fec:	232b      	movs	r3, #43	; 0x2b
 8015fee:	aa1e      	add	r2, sp, #120	; 0x78
 8015ff0:	189b      	adds	r3, r3, r2
 8015ff2:	3430      	adds	r4, #48	; 0x30
 8015ff4:	1c5a      	adds	r2, r3, #1
 8015ff6:	701c      	strb	r4, [r3, #0]
 8015ff8:	e748      	b.n	8015e8c <_svfprintf_r+0x868>
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d102      	bne.n	8016004 <_svfprintf_r+0x9e0>
 8015ffe:	3301      	adds	r3, #1
 8016000:	421e      	tst	r6, r3
 8016002:	d029      	beq.n	8016058 <_svfprintf_r+0xa34>
 8016004:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016006:	3301      	adds	r3, #1
 8016008:	e7db      	b.n	8015fc2 <_svfprintf_r+0x99e>
 801600a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801600c:	42ab      	cmp	r3, r5
 801600e:	dc06      	bgt.n	801601e <_svfprintf_r+0x9fa>
 8016010:	07f3      	lsls	r3, r6, #31
 8016012:	d524      	bpl.n	801605e <_svfprintf_r+0xa3a>
 8016014:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016016:	18eb      	adds	r3, r5, r3
 8016018:	9308      	str	r3, [sp, #32]
 801601a:	2367      	movs	r3, #103	; 0x67
 801601c:	e7d5      	b.n	8015fca <_svfprintf_r+0x9a6>
 801601e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016022:	4694      	mov	ip, r2
 8016024:	4463      	add	r3, ip
 8016026:	9308      	str	r3, [sp, #32]
 8016028:	2367      	movs	r3, #103	; 0x67
 801602a:	930e      	str	r3, [sp, #56]	; 0x38
 801602c:	2d00      	cmp	r5, #0
 801602e:	dc03      	bgt.n	8016038 <_svfprintf_r+0xa14>
 8016030:	9b08      	ldr	r3, [sp, #32]
 8016032:	1b5b      	subs	r3, r3, r5
 8016034:	3301      	adds	r3, #1
 8016036:	9308      	str	r3, [sp, #32]
 8016038:	2380      	movs	r3, #128	; 0x80
 801603a:	00db      	lsls	r3, r3, #3
 801603c:	401e      	ands	r6, r3
 801603e:	2300      	movs	r3, #0
 8016040:	960f      	str	r6, [sp, #60]	; 0x3c
 8016042:	9310      	str	r3, [sp, #64]	; 0x40
 8016044:	2e00      	cmp	r6, #0
 8016046:	d100      	bne.n	801604a <_svfprintf_r+0xa26>
 8016048:	e73c      	b.n	8015ec4 <_svfprintf_r+0x8a0>
 801604a:	2d00      	cmp	r5, #0
 801604c:	dc27      	bgt.n	801609e <_svfprintf_r+0xa7a>
 801604e:	2300      	movs	r3, #0
 8016050:	930f      	str	r3, [sp, #60]	; 0x3c
 8016052:	e737      	b.n	8015ec4 <_svfprintf_r+0x8a0>
 8016054:	9508      	str	r5, [sp, #32]
 8016056:	e7b7      	b.n	8015fc8 <_svfprintf_r+0x9a4>
 8016058:	2266      	movs	r2, #102	; 0x66
 801605a:	920e      	str	r2, [sp, #56]	; 0x38
 801605c:	e7eb      	b.n	8016036 <_svfprintf_r+0xa12>
 801605e:	9508      	str	r5, [sp, #32]
 8016060:	e7db      	b.n	801601a <_svfprintf_r+0x9f6>
 8016062:	42ab      	cmp	r3, r5
 8016064:	da0e      	bge.n	8016084 <_svfprintf_r+0xa60>
 8016066:	1aed      	subs	r5, r5, r3
 8016068:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801606a:	785b      	ldrb	r3, [r3, #1]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d012      	beq.n	8016096 <_svfprintf_r+0xa72>
 8016070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016072:	3301      	adds	r3, #1
 8016074:	930f      	str	r3, [sp, #60]	; 0x3c
 8016076:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016078:	3301      	adds	r3, #1
 801607a:	9313      	str	r3, [sp, #76]	; 0x4c
 801607c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	2bff      	cmp	r3, #255	; 0xff
 8016082:	d1ee      	bne.n	8016062 <_svfprintf_r+0xa3e>
 8016084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016088:	189b      	adds	r3, r3, r2
 801608a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801608c:	4353      	muls	r3, r2
 801608e:	9a08      	ldr	r2, [sp, #32]
 8016090:	189b      	adds	r3, r3, r2
 8016092:	9308      	str	r3, [sp, #32]
 8016094:	e716      	b.n	8015ec4 <_svfprintf_r+0x8a0>
 8016096:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016098:	3301      	adds	r3, #1
 801609a:	9310      	str	r3, [sp, #64]	; 0x40
 801609c:	e7ee      	b.n	801607c <_svfprintf_r+0xa58>
 801609e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80160a2:	e7eb      	b.n	801607c <_svfprintf_r+0xa58>
 80160a4:	0022      	movs	r2, r4
 80160a6:	ca08      	ldmia	r2!, {r3}
 80160a8:	9212      	str	r2, [sp, #72]	; 0x48
 80160aa:	06b2      	lsls	r2, r6, #26
 80160ac:	d508      	bpl.n	80160c0 <_svfprintf_r+0xa9c>
 80160ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80160b0:	601a      	str	r2, [r3, #0]
 80160b2:	17d2      	asrs	r2, r2, #31
 80160b4:	605a      	str	r2, [r3, #4]
 80160b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80160ba:	9309      	str	r3, [sp, #36]	; 0x24
 80160bc:	f7ff faeb 	bl	8015696 <_svfprintf_r+0x72>
 80160c0:	06f2      	lsls	r2, r6, #27
 80160c2:	d502      	bpl.n	80160ca <_svfprintf_r+0xaa6>
 80160c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80160c6:	601a      	str	r2, [r3, #0]
 80160c8:	e7f5      	b.n	80160b6 <_svfprintf_r+0xa92>
 80160ca:	0672      	lsls	r2, r6, #25
 80160cc:	d502      	bpl.n	80160d4 <_svfprintf_r+0xab0>
 80160ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80160d0:	801a      	strh	r2, [r3, #0]
 80160d2:	e7f0      	b.n	80160b6 <_svfprintf_r+0xa92>
 80160d4:	05b2      	lsls	r2, r6, #22
 80160d6:	d5f5      	bpl.n	80160c4 <_svfprintf_r+0xaa0>
 80160d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80160da:	701a      	strb	r2, [r3, #0]
 80160dc:	e7eb      	b.n	80160b6 <_svfprintf_r+0xa92>
 80160de:	2310      	movs	r3, #16
 80160e0:	431e      	orrs	r6, r3
 80160e2:	2220      	movs	r2, #32
 80160e4:	4032      	ands	r2, r6
 80160e6:	d025      	beq.n	8016134 <_svfprintf_r+0xb10>
 80160e8:	2307      	movs	r3, #7
 80160ea:	3407      	adds	r4, #7
 80160ec:	439c      	bics	r4, r3
 80160ee:	0023      	movs	r3, r4
 80160f0:	3308      	adds	r3, #8
 80160f2:	9312      	str	r3, [sp, #72]	; 0x48
 80160f4:	6823      	ldr	r3, [r4, #0]
 80160f6:	6864      	ldr	r4, [r4, #4]
 80160f8:	9306      	str	r3, [sp, #24]
 80160fa:	9407      	str	r4, [sp, #28]
 80160fc:	4bc2      	ldr	r3, [pc, #776]	; (8016408 <_svfprintf_r+0xde4>)
 80160fe:	401e      	ands	r6, r3
 8016100:	2300      	movs	r3, #0
 8016102:	221b      	movs	r2, #27
 8016104:	a91e      	add	r1, sp, #120	; 0x78
 8016106:	1852      	adds	r2, r2, r1
 8016108:	2100      	movs	r1, #0
 801610a:	7011      	strb	r1, [r2, #0]
 801610c:	9a08      	ldr	r2, [sp, #32]
 801610e:	3201      	adds	r2, #1
 8016110:	d100      	bne.n	8016114 <_svfprintf_r+0xaf0>
 8016112:	e0a6      	b.n	8016262 <_svfprintf_r+0xc3e>
 8016114:	0032      	movs	r2, r6
 8016116:	2180      	movs	r1, #128	; 0x80
 8016118:	9807      	ldr	r0, [sp, #28]
 801611a:	438e      	bics	r6, r1
 801611c:	9906      	ldr	r1, [sp, #24]
 801611e:	4301      	orrs	r1, r0
 8016120:	d000      	beq.n	8016124 <_svfprintf_r+0xb00>
 8016122:	e09e      	b.n	8016262 <_svfprintf_r+0xc3e>
 8016124:	9908      	ldr	r1, [sp, #32]
 8016126:	2900      	cmp	r1, #0
 8016128:	d100      	bne.n	801612c <_svfprintf_r+0xb08>
 801612a:	e125      	b.n	8016378 <_svfprintf_r+0xd54>
 801612c:	2b01      	cmp	r3, #1
 801612e:	d000      	beq.n	8016132 <_svfprintf_r+0xb0e>
 8016130:	e09a      	b.n	8016268 <_svfprintf_r+0xc44>
 8016132:	e518      	b.n	8015b66 <_svfprintf_r+0x542>
 8016134:	1d23      	adds	r3, r4, #4
 8016136:	9312      	str	r3, [sp, #72]	; 0x48
 8016138:	2310      	movs	r3, #16
 801613a:	4033      	ands	r3, r6
 801613c:	d003      	beq.n	8016146 <_svfprintf_r+0xb22>
 801613e:	6823      	ldr	r3, [r4, #0]
 8016140:	9306      	str	r3, [sp, #24]
 8016142:	9207      	str	r2, [sp, #28]
 8016144:	e7da      	b.n	80160fc <_svfprintf_r+0xad8>
 8016146:	2240      	movs	r2, #64	; 0x40
 8016148:	4032      	ands	r2, r6
 801614a:	d004      	beq.n	8016156 <_svfprintf_r+0xb32>
 801614c:	6822      	ldr	r2, [r4, #0]
 801614e:	b292      	uxth	r2, r2
 8016150:	9206      	str	r2, [sp, #24]
 8016152:	9307      	str	r3, [sp, #28]
 8016154:	e7d2      	b.n	80160fc <_svfprintf_r+0xad8>
 8016156:	2380      	movs	r3, #128	; 0x80
 8016158:	009b      	lsls	r3, r3, #2
 801615a:	4033      	ands	r3, r6
 801615c:	d002      	beq.n	8016164 <_svfprintf_r+0xb40>
 801615e:	6823      	ldr	r3, [r4, #0]
 8016160:	b2db      	uxtb	r3, r3
 8016162:	e7ed      	b.n	8016140 <_svfprintf_r+0xb1c>
 8016164:	6822      	ldr	r2, [r4, #0]
 8016166:	e7f3      	b.n	8016150 <_svfprintf_r+0xb2c>
 8016168:	1d23      	adds	r3, r4, #4
 801616a:	49a8      	ldr	r1, [pc, #672]	; (801640c <_svfprintf_r+0xde8>)
 801616c:	aa25      	add	r2, sp, #148	; 0x94
 801616e:	9312      	str	r3, [sp, #72]	; 0x48
 8016170:	6823      	ldr	r3, [r4, #0]
 8016172:	8011      	strh	r1, [r2, #0]
 8016174:	4aa6      	ldr	r2, [pc, #664]	; (8016410 <_svfprintf_r+0xdec>)
 8016176:	9306      	str	r3, [sp, #24]
 8016178:	2300      	movs	r3, #0
 801617a:	921e      	str	r2, [sp, #120]	; 0x78
 801617c:	2278      	movs	r2, #120	; 0x78
 801617e:	9307      	str	r3, [sp, #28]
 8016180:	3302      	adds	r3, #2
 8016182:	431e      	orrs	r6, r3
 8016184:	920e      	str	r2, [sp, #56]	; 0x38
 8016186:	e7bc      	b.n	8016102 <_svfprintf_r+0xade>
 8016188:	1d23      	adds	r3, r4, #4
 801618a:	9312      	str	r3, [sp, #72]	; 0x48
 801618c:	6823      	ldr	r3, [r4, #0]
 801618e:	2400      	movs	r4, #0
 8016190:	9309      	str	r3, [sp, #36]	; 0x24
 8016192:	231b      	movs	r3, #27
 8016194:	aa1e      	add	r2, sp, #120	; 0x78
 8016196:	189b      	adds	r3, r3, r2
 8016198:	701c      	strb	r4, [r3, #0]
 801619a:	9b08      	ldr	r3, [sp, #32]
 801619c:	3301      	adds	r3, #1
 801619e:	d00e      	beq.n	80161be <_svfprintf_r+0xb9a>
 80161a0:	9a08      	ldr	r2, [sp, #32]
 80161a2:	0021      	movs	r1, r4
 80161a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161a6:	f001 ff79 	bl	801809c <memchr>
 80161aa:	900c      	str	r0, [sp, #48]	; 0x30
 80161ac:	42a0      	cmp	r0, r4
 80161ae:	d100      	bne.n	80161b2 <_svfprintf_r+0xb8e>
 80161b0:	e100      	b.n	80163b4 <_svfprintf_r+0xd90>
 80161b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80161b4:	1a83      	subs	r3, r0, r2
 80161b6:	9308      	str	r3, [sp, #32]
 80161b8:	940c      	str	r4, [sp, #48]	; 0x30
 80161ba:	0023      	movs	r3, r4
 80161bc:	e527      	b.n	8015c0e <_svfprintf_r+0x5ea>
 80161be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161c0:	f7e9 ffaa 	bl	8000118 <strlen>
 80161c4:	9008      	str	r0, [sp, #32]
 80161c6:	e7f7      	b.n	80161b8 <_svfprintf_r+0xb94>
 80161c8:	2310      	movs	r3, #16
 80161ca:	431e      	orrs	r6, r3
 80161cc:	2220      	movs	r2, #32
 80161ce:	4032      	ands	r2, r6
 80161d0:	d00b      	beq.n	80161ea <_svfprintf_r+0xbc6>
 80161d2:	2307      	movs	r3, #7
 80161d4:	3407      	adds	r4, #7
 80161d6:	439c      	bics	r4, r3
 80161d8:	0023      	movs	r3, r4
 80161da:	3308      	adds	r3, #8
 80161dc:	9312      	str	r3, [sp, #72]	; 0x48
 80161de:	6823      	ldr	r3, [r4, #0]
 80161e0:	6864      	ldr	r4, [r4, #4]
 80161e2:	9306      	str	r3, [sp, #24]
 80161e4:	9407      	str	r4, [sp, #28]
 80161e6:	2301      	movs	r3, #1
 80161e8:	e78b      	b.n	8016102 <_svfprintf_r+0xade>
 80161ea:	1d23      	adds	r3, r4, #4
 80161ec:	9312      	str	r3, [sp, #72]	; 0x48
 80161ee:	2310      	movs	r3, #16
 80161f0:	4033      	ands	r3, r6
 80161f2:	d003      	beq.n	80161fc <_svfprintf_r+0xbd8>
 80161f4:	6823      	ldr	r3, [r4, #0]
 80161f6:	9306      	str	r3, [sp, #24]
 80161f8:	9207      	str	r2, [sp, #28]
 80161fa:	e7f4      	b.n	80161e6 <_svfprintf_r+0xbc2>
 80161fc:	2240      	movs	r2, #64	; 0x40
 80161fe:	4032      	ands	r2, r6
 8016200:	d004      	beq.n	801620c <_svfprintf_r+0xbe8>
 8016202:	6822      	ldr	r2, [r4, #0]
 8016204:	b292      	uxth	r2, r2
 8016206:	9206      	str	r2, [sp, #24]
 8016208:	9307      	str	r3, [sp, #28]
 801620a:	e7ec      	b.n	80161e6 <_svfprintf_r+0xbc2>
 801620c:	2380      	movs	r3, #128	; 0x80
 801620e:	009b      	lsls	r3, r3, #2
 8016210:	4033      	ands	r3, r6
 8016212:	d002      	beq.n	801621a <_svfprintf_r+0xbf6>
 8016214:	6823      	ldr	r3, [r4, #0]
 8016216:	b2db      	uxtb	r3, r3
 8016218:	e7ed      	b.n	80161f6 <_svfprintf_r+0xbd2>
 801621a:	6822      	ldr	r2, [r4, #0]
 801621c:	e7f3      	b.n	8016206 <_svfprintf_r+0xbe2>
 801621e:	4b7c      	ldr	r3, [pc, #496]	; (8016410 <_svfprintf_r+0xdec>)
 8016220:	f7ff fad9 	bl	80157d6 <_svfprintf_r+0x1b2>
 8016224:	1d23      	adds	r3, r4, #4
 8016226:	9312      	str	r3, [sp, #72]	; 0x48
 8016228:	2310      	movs	r3, #16
 801622a:	4033      	ands	r3, r6
 801622c:	d004      	beq.n	8016238 <_svfprintf_r+0xc14>
 801622e:	6823      	ldr	r3, [r4, #0]
 8016230:	9306      	str	r3, [sp, #24]
 8016232:	9207      	str	r2, [sp, #28]
 8016234:	f7ff fadf 	bl	80157f6 <_svfprintf_r+0x1d2>
 8016238:	2240      	movs	r2, #64	; 0x40
 801623a:	4032      	ands	r2, r6
 801623c:	d005      	beq.n	801624a <_svfprintf_r+0xc26>
 801623e:	6822      	ldr	r2, [r4, #0]
 8016240:	b292      	uxth	r2, r2
 8016242:	9206      	str	r2, [sp, #24]
 8016244:	9307      	str	r3, [sp, #28]
 8016246:	f7ff fad6 	bl	80157f6 <_svfprintf_r+0x1d2>
 801624a:	2380      	movs	r3, #128	; 0x80
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	4033      	ands	r3, r6
 8016250:	d002      	beq.n	8016258 <_svfprintf_r+0xc34>
 8016252:	6823      	ldr	r3, [r4, #0]
 8016254:	b2db      	uxtb	r3, r3
 8016256:	e7eb      	b.n	8016230 <_svfprintf_r+0xc0c>
 8016258:	6822      	ldr	r2, [r4, #0]
 801625a:	e7f2      	b.n	8016242 <_svfprintf_r+0xc1e>
 801625c:	0032      	movs	r2, r6
 801625e:	2301      	movs	r3, #1
 8016260:	e759      	b.n	8016116 <_svfprintf_r+0xaf2>
 8016262:	2b01      	cmp	r3, #1
 8016264:	d100      	bne.n	8016268 <_svfprintf_r+0xc44>
 8016266:	e476      	b.n	8015b56 <_svfprintf_r+0x532>
 8016268:	2b02      	cmp	r3, #2
 801626a:	d06b      	beq.n	8016344 <_svfprintf_r+0xd20>
 801626c:	2507      	movs	r5, #7
 801626e:	ab58      	add	r3, sp, #352	; 0x160
 8016270:	1e5a      	subs	r2, r3, #1
 8016272:	9209      	str	r2, [sp, #36]	; 0x24
 8016274:	9a06      	ldr	r2, [sp, #24]
 8016276:	1e59      	subs	r1, r3, #1
 8016278:	402a      	ands	r2, r5
 801627a:	3230      	adds	r2, #48	; 0x30
 801627c:	700a      	strb	r2, [r1, #0]
 801627e:	9907      	ldr	r1, [sp, #28]
 8016280:	074c      	lsls	r4, r1, #29
 8016282:	9906      	ldr	r1, [sp, #24]
 8016284:	08c8      	lsrs	r0, r1, #3
 8016286:	9907      	ldr	r1, [sp, #28]
 8016288:	4304      	orrs	r4, r0
 801628a:	08c9      	lsrs	r1, r1, #3
 801628c:	9107      	str	r1, [sp, #28]
 801628e:	0021      	movs	r1, r4
 8016290:	9807      	ldr	r0, [sp, #28]
 8016292:	9406      	str	r4, [sp, #24]
 8016294:	4301      	orrs	r1, r0
 8016296:	d111      	bne.n	80162bc <_svfprintf_r+0xc98>
 8016298:	07f1      	lsls	r1, r6, #31
 801629a:	d502      	bpl.n	80162a2 <_svfprintf_r+0xc7e>
 801629c:	3b02      	subs	r3, #2
 801629e:	2a30      	cmp	r2, #48	; 0x30
 80162a0:	d173      	bne.n	801638a <_svfprintf_r+0xd66>
 80162a2:	9b08      	ldr	r3, [sp, #32]
 80162a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80162a8:	ab58      	add	r3, sp, #352	; 0x160
 80162aa:	1a9b      	subs	r3, r3, r2
 80162ac:	9308      	str	r3, [sp, #32]
 80162ae:	2300      	movs	r3, #0
 80162b0:	930c      	str	r3, [sp, #48]	; 0x30
 80162b2:	9310      	str	r3, [sp, #64]	; 0x40
 80162b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80162b6:	001d      	movs	r5, r3
 80162b8:	f7ff fb4b 	bl	8015952 <_svfprintf_r+0x32e>
 80162bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162be:	e7d7      	b.n	8016270 <_svfprintf_r+0xc4c>
 80162c0:	2480      	movs	r4, #128	; 0x80
 80162c2:	2300      	movs	r3, #0
 80162c4:	00e4      	lsls	r4, r4, #3
 80162c6:	930d      	str	r3, [sp, #52]	; 0x34
 80162c8:	4034      	ands	r4, r6
 80162ca:	ab58      	add	r3, sp, #352	; 0x160
 80162cc:	3b01      	subs	r3, #1
 80162ce:	9309      	str	r3, [sp, #36]	; 0x24
 80162d0:	220a      	movs	r2, #10
 80162d2:	9806      	ldr	r0, [sp, #24]
 80162d4:	9907      	ldr	r1, [sp, #28]
 80162d6:	2300      	movs	r3, #0
 80162d8:	f7ea f94c 	bl	8000574 <__aeabi_uldivmod>
 80162dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162de:	3230      	adds	r2, #48	; 0x30
 80162e0:	701a      	strb	r2, [r3, #0]
 80162e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162e4:	3301      	adds	r3, #1
 80162e6:	930d      	str	r3, [sp, #52]	; 0x34
 80162e8:	2c00      	cmp	r4, #0
 80162ea:	d01d      	beq.n	8016328 <_svfprintf_r+0xd04>
 80162ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80162ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80162f0:	781b      	ldrb	r3, [r3, #0]
 80162f2:	429a      	cmp	r2, r3
 80162f4:	d118      	bne.n	8016328 <_svfprintf_r+0xd04>
 80162f6:	2aff      	cmp	r2, #255	; 0xff
 80162f8:	d016      	beq.n	8016328 <_svfprintf_r+0xd04>
 80162fa:	9b07      	ldr	r3, [sp, #28]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d102      	bne.n	8016306 <_svfprintf_r+0xce2>
 8016300:	9b06      	ldr	r3, [sp, #24]
 8016302:	2b09      	cmp	r3, #9
 8016304:	d910      	bls.n	8016328 <_svfprintf_r+0xd04>
 8016306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016308:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801630a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801630c:	1a9b      	subs	r3, r3, r2
 801630e:	0018      	movs	r0, r3
 8016310:	9309      	str	r3, [sp, #36]	; 0x24
 8016312:	f7fe fa52 	bl	80147ba <strncpy>
 8016316:	2200      	movs	r2, #0
 8016318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801631a:	920d      	str	r2, [sp, #52]	; 0x34
 801631c:	785b      	ldrb	r3, [r3, #1]
 801631e:	1e5a      	subs	r2, r3, #1
 8016320:	4193      	sbcs	r3, r2
 8016322:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016324:	18d3      	adds	r3, r2, r3
 8016326:	9313      	str	r3, [sp, #76]	; 0x4c
 8016328:	220a      	movs	r2, #10
 801632a:	9806      	ldr	r0, [sp, #24]
 801632c:	9907      	ldr	r1, [sp, #28]
 801632e:	2300      	movs	r3, #0
 8016330:	f7ea f920 	bl	8000574 <__aeabi_uldivmod>
 8016334:	9006      	str	r0, [sp, #24]
 8016336:	9107      	str	r1, [sp, #28]
 8016338:	9b06      	ldr	r3, [sp, #24]
 801633a:	9a07      	ldr	r2, [sp, #28]
 801633c:	4313      	orrs	r3, r2
 801633e:	d0b0      	beq.n	80162a2 <_svfprintf_r+0xc7e>
 8016340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016342:	e7c3      	b.n	80162cc <_svfprintf_r+0xca8>
 8016344:	200f      	movs	r0, #15
 8016346:	ab58      	add	r3, sp, #352	; 0x160
 8016348:	9309      	str	r3, [sp, #36]	; 0x24
 801634a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801634c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801634e:	3b01      	subs	r3, #1
 8016350:	9309      	str	r3, [sp, #36]	; 0x24
 8016352:	9b06      	ldr	r3, [sp, #24]
 8016354:	4003      	ands	r3, r0
 8016356:	5cd3      	ldrb	r3, [r2, r3]
 8016358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801635a:	7013      	strb	r3, [r2, #0]
 801635c:	9b07      	ldr	r3, [sp, #28]
 801635e:	0719      	lsls	r1, r3, #28
 8016360:	9b06      	ldr	r3, [sp, #24]
 8016362:	091a      	lsrs	r2, r3, #4
 8016364:	9b07      	ldr	r3, [sp, #28]
 8016366:	4311      	orrs	r1, r2
 8016368:	091b      	lsrs	r3, r3, #4
 801636a:	9307      	str	r3, [sp, #28]
 801636c:	000b      	movs	r3, r1
 801636e:	9a07      	ldr	r2, [sp, #28]
 8016370:	9106      	str	r1, [sp, #24]
 8016372:	4313      	orrs	r3, r2
 8016374:	d1e9      	bne.n	801634a <_svfprintf_r+0xd26>
 8016376:	e794      	b.n	80162a2 <_svfprintf_r+0xc7e>
 8016378:	a958      	add	r1, sp, #352	; 0x160
 801637a:	9109      	str	r1, [sp, #36]	; 0x24
 801637c:	2b00      	cmp	r3, #0
 801637e:	d190      	bne.n	80162a2 <_svfprintf_r+0xc7e>
 8016380:	07d3      	lsls	r3, r2, #31
 8016382:	d58e      	bpl.n	80162a2 <_svfprintf_r+0xc7e>
 8016384:	23e7      	movs	r3, #231	; 0xe7
 8016386:	aa1e      	add	r2, sp, #120	; 0x78
 8016388:	189b      	adds	r3, r3, r2
 801638a:	2230      	movs	r2, #48	; 0x30
 801638c:	f7ff fbf0 	bl	8015b70 <_svfprintf_r+0x54c>
 8016390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016392:	2b00      	cmp	r3, #0
 8016394:	d100      	bne.n	8016398 <_svfprintf_r+0xd74>
 8016396:	e38a      	b.n	8016aae <_svfprintf_r+0x148a>
 8016398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801639a:	ab3f      	add	r3, sp, #252	; 0xfc
 801639c:	701a      	strb	r2, [r3, #0]
 801639e:	221b      	movs	r2, #27
 80163a0:	2000      	movs	r0, #0
 80163a2:	a91e      	add	r1, sp, #120	; 0x78
 80163a4:	1852      	adds	r2, r2, r1
 80163a6:	7010      	strb	r0, [r2, #0]
 80163a8:	9412      	str	r4, [sp, #72]	; 0x48
 80163aa:	f7ff faca 	bl	8015942 <_svfprintf_r+0x31e>
 80163ae:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80163b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80163b2:	e592      	b.n	8015eda <_svfprintf_r+0x8b6>
 80163b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163b6:	e42a      	b.n	8015c0e <_svfprintf_r+0x5ea>
 80163b8:	2010      	movs	r0, #16
 80163ba:	1812      	adds	r2, r2, r0
 80163bc:	6078      	str	r0, [r7, #4]
 80163be:	922e      	str	r2, [sp, #184]	; 0xb8
 80163c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80163c2:	2b07      	cmp	r3, #7
 80163c4:	dd08      	ble.n	80163d8 <_svfprintf_r+0xdb4>
 80163c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80163c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163cc:	f002 fa7e 	bl	80188cc <__ssprint_r>
 80163d0:	2800      	cmp	r0, #0
 80163d2:	d000      	beq.n	80163d6 <_svfprintf_r+0xdb2>
 80163d4:	e34a      	b.n	8016a6c <_svfprintf_r+0x1448>
 80163d6:	a92f      	add	r1, sp, #188	; 0xbc
 80163d8:	3c10      	subs	r4, #16
 80163da:	000f      	movs	r7, r1
 80163dc:	f7ff fad8 	bl	8015990 <_svfprintf_r+0x36c>
 80163e0:	2010      	movs	r0, #16
 80163e2:	1812      	adds	r2, r2, r0
 80163e4:	6078      	str	r0, [r7, #4]
 80163e6:	922e      	str	r2, [sp, #184]	; 0xb8
 80163e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80163ea:	2b07      	cmp	r3, #7
 80163ec:	dd08      	ble.n	8016400 <_svfprintf_r+0xddc>
 80163ee:	aa2c      	add	r2, sp, #176	; 0xb0
 80163f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163f4:	f002 fa6a 	bl	80188cc <__ssprint_r>
 80163f8:	2800      	cmp	r0, #0
 80163fa:	d000      	beq.n	80163fe <_svfprintf_r+0xdda>
 80163fc:	e336      	b.n	8016a6c <_svfprintf_r+0x1448>
 80163fe:	a92f      	add	r1, sp, #188	; 0xbc
 8016400:	3c10      	subs	r4, #16
 8016402:	000f      	movs	r7, r1
 8016404:	f7ff fb24 	bl	8015a50 <_svfprintf_r+0x42c>
 8016408:	fffffbff 	.word	0xfffffbff
 801640c:	00007830 	.word	0x00007830
 8016410:	0801baf8 	.word	0x0801baf8
 8016414:	2010      	movs	r0, #16
 8016416:	1812      	adds	r2, r2, r0
 8016418:	6078      	str	r0, [r7, #4]
 801641a:	922e      	str	r2, [sp, #184]	; 0xb8
 801641c:	932d      	str	r3, [sp, #180]	; 0xb4
 801641e:	2b07      	cmp	r3, #7
 8016420:	dd08      	ble.n	8016434 <_svfprintf_r+0xe10>
 8016422:	aa2c      	add	r2, sp, #176	; 0xb0
 8016424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016426:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016428:	f002 fa50 	bl	80188cc <__ssprint_r>
 801642c:	2800      	cmp	r0, #0
 801642e:	d000      	beq.n	8016432 <_svfprintf_r+0xe0e>
 8016430:	e31c      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016432:	a92f      	add	r1, sp, #188	; 0xbc
 8016434:	3c10      	subs	r4, #16
 8016436:	000f      	movs	r7, r1
 8016438:	f7ff fb2c 	bl	8015a94 <_svfprintf_r+0x470>
 801643c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801643e:	2b65      	cmp	r3, #101	; 0x65
 8016440:	dc00      	bgt.n	8016444 <_svfprintf_r+0xe20>
 8016442:	e259      	b.n	80168f8 <_svfprintf_r+0x12d4>
 8016444:	2200      	movs	r2, #0
 8016446:	2300      	movs	r3, #0
 8016448:	981a      	ldr	r0, [sp, #104]	; 0x68
 801644a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801644c:	f7ea f806 	bl	800045c <__aeabi_dcmpeq>
 8016450:	2800      	cmp	r0, #0
 8016452:	d07c      	beq.n	801654e <_svfprintf_r+0xf2a>
 8016454:	4b81      	ldr	r3, [pc, #516]	; (801665c <_svfprintf_r+0x1038>)
 8016456:	603b      	str	r3, [r7, #0]
 8016458:	2301      	movs	r3, #1
 801645a:	607b      	str	r3, [r7, #4]
 801645c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801645e:	3708      	adds	r7, #8
 8016460:	3301      	adds	r3, #1
 8016462:	932e      	str	r3, [sp, #184]	; 0xb8
 8016464:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016466:	9308      	str	r3, [sp, #32]
 8016468:	3301      	adds	r3, #1
 801646a:	932d      	str	r3, [sp, #180]	; 0xb4
 801646c:	2b07      	cmp	r3, #7
 801646e:	dd08      	ble.n	8016482 <_svfprintf_r+0xe5e>
 8016470:	aa2c      	add	r2, sp, #176	; 0xb0
 8016472:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016474:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016476:	f002 fa29 	bl	80188cc <__ssprint_r>
 801647a:	2800      	cmp	r0, #0
 801647c:	d000      	beq.n	8016480 <_svfprintf_r+0xe5c>
 801647e:	e2f5      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016480:	af2f      	add	r7, sp, #188	; 0xbc
 8016482:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016484:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016486:	4293      	cmp	r3, r2
 8016488:	db01      	blt.n	801648e <_svfprintf_r+0xe6a>
 801648a:	07f3      	lsls	r3, r6, #31
 801648c:	d51d      	bpl.n	80164ca <_svfprintf_r+0xea6>
 801648e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016490:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016492:	4694      	mov	ip, r2
 8016494:	603b      	str	r3, [r7, #0]
 8016496:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016498:	607b      	str	r3, [r7, #4]
 801649a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801649c:	3708      	adds	r7, #8
 801649e:	4463      	add	r3, ip
 80164a0:	932e      	str	r3, [sp, #184]	; 0xb8
 80164a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80164a4:	9308      	str	r3, [sp, #32]
 80164a6:	3301      	adds	r3, #1
 80164a8:	932d      	str	r3, [sp, #180]	; 0xb4
 80164aa:	2b07      	cmp	r3, #7
 80164ac:	dd08      	ble.n	80164c0 <_svfprintf_r+0xe9c>
 80164ae:	aa2c      	add	r2, sp, #176	; 0xb0
 80164b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164b4:	f002 fa0a 	bl	80188cc <__ssprint_r>
 80164b8:	2800      	cmp	r0, #0
 80164ba:	d000      	beq.n	80164be <_svfprintf_r+0xe9a>
 80164bc:	e2d6      	b.n	8016a6c <_svfprintf_r+0x1448>
 80164be:	af2f      	add	r7, sp, #188	; 0xbc
 80164c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164c2:	2510      	movs	r5, #16
 80164c4:	1e5c      	subs	r4, r3, #1
 80164c6:	2c00      	cmp	r4, #0
 80164c8:	dc2f      	bgt.n	801652a <_svfprintf_r+0xf06>
 80164ca:	0773      	lsls	r3, r6, #29
 80164cc:	d500      	bpl.n	80164d0 <_svfprintf_r+0xeac>
 80164ce:	e2af      	b.n	8016a30 <_svfprintf_r+0x140c>
 80164d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80164d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80164d4:	4293      	cmp	r3, r2
 80164d6:	da00      	bge.n	80164da <_svfprintf_r+0xeb6>
 80164d8:	0013      	movs	r3, r2
 80164da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80164dc:	18d3      	adds	r3, r2, r3
 80164de:	9315      	str	r3, [sp, #84]	; 0x54
 80164e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80164e2:	9308      	str	r3, [sp, #32]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d007      	beq.n	80164f8 <_svfprintf_r+0xed4>
 80164e8:	aa2c      	add	r2, sp, #176	; 0xb0
 80164ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164ee:	f002 f9ed 	bl	80188cc <__ssprint_r>
 80164f2:	2800      	cmp	r0, #0
 80164f4:	d000      	beq.n	80164f8 <_svfprintf_r+0xed4>
 80164f6:	e2b9      	b.n	8016a6c <_svfprintf_r+0x1448>
 80164f8:	2300      	movs	r3, #0
 80164fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80164fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d000      	beq.n	8016504 <_svfprintf_r+0xee0>
 8016502:	e2cf      	b.n	8016aa4 <_svfprintf_r+0x1480>
 8016504:	af2f      	add	r7, sp, #188	; 0xbc
 8016506:	e5d6      	b.n	80160b6 <_svfprintf_r+0xa92>
 8016508:	3210      	adds	r2, #16
 801650a:	607d      	str	r5, [r7, #4]
 801650c:	922e      	str	r2, [sp, #184]	; 0xb8
 801650e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016510:	2b07      	cmp	r3, #7
 8016512:	dd08      	ble.n	8016526 <_svfprintf_r+0xf02>
 8016514:	aa2c      	add	r2, sp, #176	; 0xb0
 8016516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016518:	980a      	ldr	r0, [sp, #40]	; 0x28
 801651a:	f002 f9d7 	bl	80188cc <__ssprint_r>
 801651e:	2800      	cmp	r0, #0
 8016520:	d000      	beq.n	8016524 <_svfprintf_r+0xf00>
 8016522:	e2a3      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016524:	a92f      	add	r1, sp, #188	; 0xbc
 8016526:	000f      	movs	r7, r1
 8016528:	3c10      	subs	r4, #16
 801652a:	0039      	movs	r1, r7
 801652c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801652e:	484c      	ldr	r0, [pc, #304]	; (8016660 <_svfprintf_r+0x103c>)
 8016530:	9308      	str	r3, [sp, #32]
 8016532:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016534:	3301      	adds	r3, #1
 8016536:	3108      	adds	r1, #8
 8016538:	6038      	str	r0, [r7, #0]
 801653a:	2c10      	cmp	r4, #16
 801653c:	dce4      	bgt.n	8016508 <_svfprintf_r+0xee4>
 801653e:	607c      	str	r4, [r7, #4]
 8016540:	18a4      	adds	r4, r4, r2
 8016542:	942e      	str	r4, [sp, #184]	; 0xb8
 8016544:	932d      	str	r3, [sp, #180]	; 0xb4
 8016546:	000f      	movs	r7, r1
 8016548:	2b07      	cmp	r3, #7
 801654a:	ddbe      	ble.n	80164ca <_svfprintf_r+0xea6>
 801654c:	e06a      	b.n	8016624 <_svfprintf_r+0x1000>
 801654e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016550:	2b00      	cmp	r3, #0
 8016552:	dd00      	ble.n	8016556 <_svfprintf_r+0xf32>
 8016554:	e086      	b.n	8016664 <_svfprintf_r+0x1040>
 8016556:	4b41      	ldr	r3, [pc, #260]	; (801665c <_svfprintf_r+0x1038>)
 8016558:	603b      	str	r3, [r7, #0]
 801655a:	2301      	movs	r3, #1
 801655c:	607b      	str	r3, [r7, #4]
 801655e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016560:	3708      	adds	r7, #8
 8016562:	3301      	adds	r3, #1
 8016564:	932e      	str	r3, [sp, #184]	; 0xb8
 8016566:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016568:	9308      	str	r3, [sp, #32]
 801656a:	3301      	adds	r3, #1
 801656c:	932d      	str	r3, [sp, #180]	; 0xb4
 801656e:	2b07      	cmp	r3, #7
 8016570:	dd08      	ble.n	8016584 <_svfprintf_r+0xf60>
 8016572:	aa2c      	add	r2, sp, #176	; 0xb0
 8016574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016576:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016578:	f002 f9a8 	bl	80188cc <__ssprint_r>
 801657c:	2800      	cmp	r0, #0
 801657e:	d000      	beq.n	8016582 <_svfprintf_r+0xf5e>
 8016580:	e274      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016582:	af2f      	add	r7, sp, #188	; 0xbc
 8016584:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016586:	2b00      	cmp	r3, #0
 8016588:	d104      	bne.n	8016594 <_svfprintf_r+0xf70>
 801658a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801658c:	2b00      	cmp	r3, #0
 801658e:	d101      	bne.n	8016594 <_svfprintf_r+0xf70>
 8016590:	07f3      	lsls	r3, r6, #31
 8016592:	d59a      	bpl.n	80164ca <_svfprintf_r+0xea6>
 8016594:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016596:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016598:	4694      	mov	ip, r2
 801659a:	603b      	str	r3, [r7, #0]
 801659c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801659e:	607b      	str	r3, [r7, #4]
 80165a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80165a2:	3708      	adds	r7, #8
 80165a4:	4463      	add	r3, ip
 80165a6:	932e      	str	r3, [sp, #184]	; 0xb8
 80165a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165aa:	9308      	str	r3, [sp, #32]
 80165ac:	3301      	adds	r3, #1
 80165ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80165b0:	2b07      	cmp	r3, #7
 80165b2:	dd08      	ble.n	80165c6 <_svfprintf_r+0xfa2>
 80165b4:	aa2c      	add	r2, sp, #176	; 0xb0
 80165b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165ba:	f002 f987 	bl	80188cc <__ssprint_r>
 80165be:	2800      	cmp	r0, #0
 80165c0:	d000      	beq.n	80165c4 <_svfprintf_r+0xfa0>
 80165c2:	e253      	b.n	8016a6c <_svfprintf_r+0x1448>
 80165c4:	af2f      	add	r7, sp, #188	; 0xbc
 80165c6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80165c8:	2c00      	cmp	r4, #0
 80165ca:	da1a      	bge.n	8016602 <_svfprintf_r+0xfde>
 80165cc:	0039      	movs	r1, r7
 80165ce:	2510      	movs	r5, #16
 80165d0:	4264      	negs	r4, r4
 80165d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165d4:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80165d6:	9308      	str	r3, [sp, #32]
 80165d8:	1c5a      	adds	r2, r3, #1
 80165da:	4b21      	ldr	r3, [pc, #132]	; (8016660 <_svfprintf_r+0x103c>)
 80165dc:	3708      	adds	r7, #8
 80165de:	600b      	str	r3, [r1, #0]
 80165e0:	2c10      	cmp	r4, #16
 80165e2:	dc29      	bgt.n	8016638 <_svfprintf_r+0x1014>
 80165e4:	604c      	str	r4, [r1, #4]
 80165e6:	1824      	adds	r4, r4, r0
 80165e8:	942e      	str	r4, [sp, #184]	; 0xb8
 80165ea:	922d      	str	r2, [sp, #180]	; 0xb4
 80165ec:	2a07      	cmp	r2, #7
 80165ee:	dd08      	ble.n	8016602 <_svfprintf_r+0xfde>
 80165f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80165f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165f6:	f002 f969 	bl	80188cc <__ssprint_r>
 80165fa:	2800      	cmp	r0, #0
 80165fc:	d000      	beq.n	8016600 <_svfprintf_r+0xfdc>
 80165fe:	e235      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016600:	af2f      	add	r7, sp, #188	; 0xbc
 8016602:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016606:	468c      	mov	ip, r1
 8016608:	603b      	str	r3, [r7, #0]
 801660a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801660c:	607b      	str	r3, [r7, #4]
 801660e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016610:	4463      	add	r3, ip
 8016612:	932e      	str	r3, [sp, #184]	; 0xb8
 8016614:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016616:	1c5a      	adds	r2, r3, #1
 8016618:	9308      	str	r3, [sp, #32]
 801661a:	922d      	str	r2, [sp, #180]	; 0xb4
 801661c:	2a07      	cmp	r2, #7
 801661e:	dc01      	bgt.n	8016624 <_svfprintf_r+0x1000>
 8016620:	f7ff fa6c 	bl	8015afc <_svfprintf_r+0x4d8>
 8016624:	aa2c      	add	r2, sp, #176	; 0xb0
 8016626:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016628:	980a      	ldr	r0, [sp, #40]	; 0x28
 801662a:	f002 f94f 	bl	80188cc <__ssprint_r>
 801662e:	2800      	cmp	r0, #0
 8016630:	d000      	beq.n	8016634 <_svfprintf_r+0x1010>
 8016632:	e21b      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016634:	af2f      	add	r7, sp, #188	; 0xbc
 8016636:	e748      	b.n	80164ca <_svfprintf_r+0xea6>
 8016638:	3010      	adds	r0, #16
 801663a:	604d      	str	r5, [r1, #4]
 801663c:	902e      	str	r0, [sp, #184]	; 0xb8
 801663e:	922d      	str	r2, [sp, #180]	; 0xb4
 8016640:	2a07      	cmp	r2, #7
 8016642:	dd08      	ble.n	8016656 <_svfprintf_r+0x1032>
 8016644:	aa2c      	add	r2, sp, #176	; 0xb0
 8016646:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016648:	980a      	ldr	r0, [sp, #40]	; 0x28
 801664a:	f002 f93f 	bl	80188cc <__ssprint_r>
 801664e:	2800      	cmp	r0, #0
 8016650:	d000      	beq.n	8016654 <_svfprintf_r+0x1030>
 8016652:	e20b      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016654:	af2f      	add	r7, sp, #188	; 0xbc
 8016656:	3c10      	subs	r4, #16
 8016658:	0039      	movs	r1, r7
 801665a:	e7ba      	b.n	80165d2 <_svfprintf_r+0xfae>
 801665c:	0801bb1a 	.word	0x0801bb1a
 8016660:	0801bb2c 	.word	0x0801bb2c
 8016664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016666:	002c      	movs	r4, r5
 8016668:	429d      	cmp	r5, r3
 801666a:	dd00      	ble.n	801666e <_svfprintf_r+0x104a>
 801666c:	001c      	movs	r4, r3
 801666e:	2c00      	cmp	r4, #0
 8016670:	dd15      	ble.n	801669e <_svfprintf_r+0x107a>
 8016672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016674:	607c      	str	r4, [r7, #4]
 8016676:	603b      	str	r3, [r7, #0]
 8016678:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801667a:	3708      	adds	r7, #8
 801667c:	18e3      	adds	r3, r4, r3
 801667e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016680:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016682:	9308      	str	r3, [sp, #32]
 8016684:	3301      	adds	r3, #1
 8016686:	932d      	str	r3, [sp, #180]	; 0xb4
 8016688:	2b07      	cmp	r3, #7
 801668a:	dd08      	ble.n	801669e <_svfprintf_r+0x107a>
 801668c:	aa2c      	add	r2, sp, #176	; 0xb0
 801668e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016690:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016692:	f002 f91b 	bl	80188cc <__ssprint_r>
 8016696:	2800      	cmp	r0, #0
 8016698:	d000      	beq.n	801669c <_svfprintf_r+0x1078>
 801669a:	e1e7      	b.n	8016a6c <_svfprintf_r+0x1448>
 801669c:	af2f      	add	r7, sp, #188	; 0xbc
 801669e:	43e3      	mvns	r3, r4
 80166a0:	17db      	asrs	r3, r3, #31
 80166a2:	401c      	ands	r4, r3
 80166a4:	1b2c      	subs	r4, r5, r4
 80166a6:	2c00      	cmp	r4, #0
 80166a8:	dd1a      	ble.n	80166e0 <_svfprintf_r+0x10bc>
 80166aa:	0039      	movs	r1, r7
 80166ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166ae:	48d4      	ldr	r0, [pc, #848]	; (8016a00 <_svfprintf_r+0x13dc>)
 80166b0:	9308      	str	r3, [sp, #32]
 80166b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80166b4:	3301      	adds	r3, #1
 80166b6:	3108      	adds	r1, #8
 80166b8:	6038      	str	r0, [r7, #0]
 80166ba:	2c10      	cmp	r4, #16
 80166bc:	dd00      	ble.n	80166c0 <_svfprintf_r+0x109c>
 80166be:	e089      	b.n	80167d4 <_svfprintf_r+0x11b0>
 80166c0:	607c      	str	r4, [r7, #4]
 80166c2:	18a4      	adds	r4, r4, r2
 80166c4:	942e      	str	r4, [sp, #184]	; 0xb8
 80166c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80166c8:	000f      	movs	r7, r1
 80166ca:	2b07      	cmp	r3, #7
 80166cc:	dd08      	ble.n	80166e0 <_svfprintf_r+0x10bc>
 80166ce:	aa2c      	add	r2, sp, #176	; 0xb0
 80166d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166d4:	f002 f8fa 	bl	80188cc <__ssprint_r>
 80166d8:	2800      	cmp	r0, #0
 80166da:	d000      	beq.n	80166de <_svfprintf_r+0x10ba>
 80166dc:	e1c6      	b.n	8016a6c <_svfprintf_r+0x1448>
 80166de:	af2f      	add	r7, sp, #188	; 0xbc
 80166e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166e2:	195d      	adds	r5, r3, r5
 80166e4:	0573      	lsls	r3, r6, #21
 80166e6:	d50d      	bpl.n	8016704 <_svfprintf_r+0x10e0>
 80166e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d000      	beq.n	80166f0 <_svfprintf_r+0x10cc>
 80166ee:	e084      	b.n	80167fa <_svfprintf_r+0x11d6>
 80166f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d000      	beq.n	80166f8 <_svfprintf_r+0x10d4>
 80166f6:	e083      	b.n	8016800 <_svfprintf_r+0x11dc>
 80166f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80166fc:	189b      	adds	r3, r3, r2
 80166fe:	429d      	cmp	r5, r3
 8016700:	d900      	bls.n	8016704 <_svfprintf_r+0x10e0>
 8016702:	001d      	movs	r5, r3
 8016704:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016706:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016708:	4293      	cmp	r3, r2
 801670a:	db01      	blt.n	8016710 <_svfprintf_r+0x10ec>
 801670c:	07f3      	lsls	r3, r6, #31
 801670e:	d518      	bpl.n	8016742 <_svfprintf_r+0x111e>
 8016710:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016712:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016714:	4694      	mov	ip, r2
 8016716:	603b      	str	r3, [r7, #0]
 8016718:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801671a:	607b      	str	r3, [r7, #4]
 801671c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801671e:	3708      	adds	r7, #8
 8016720:	4463      	add	r3, ip
 8016722:	932e      	str	r3, [sp, #184]	; 0xb8
 8016724:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016726:	9308      	str	r3, [sp, #32]
 8016728:	3301      	adds	r3, #1
 801672a:	932d      	str	r3, [sp, #180]	; 0xb4
 801672c:	2b07      	cmp	r3, #7
 801672e:	dd08      	ble.n	8016742 <_svfprintf_r+0x111e>
 8016730:	aa2c      	add	r2, sp, #176	; 0xb0
 8016732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016734:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016736:	f002 f8c9 	bl	80188cc <__ssprint_r>
 801673a:	2800      	cmp	r0, #0
 801673c:	d000      	beq.n	8016740 <_svfprintf_r+0x111c>
 801673e:	e195      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016740:	af2f      	add	r7, sp, #188	; 0xbc
 8016742:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016746:	4694      	mov	ip, r2
 8016748:	9926      	ldr	r1, [sp, #152]	; 0x98
 801674a:	4463      	add	r3, ip
 801674c:	1b5b      	subs	r3, r3, r5
 801674e:	1a54      	subs	r4, r2, r1
 8016750:	429c      	cmp	r4, r3
 8016752:	dd00      	ble.n	8016756 <_svfprintf_r+0x1132>
 8016754:	001c      	movs	r4, r3
 8016756:	2c00      	cmp	r4, #0
 8016758:	dd14      	ble.n	8016784 <_svfprintf_r+0x1160>
 801675a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801675c:	603d      	str	r5, [r7, #0]
 801675e:	18e3      	adds	r3, r4, r3
 8016760:	932e      	str	r3, [sp, #184]	; 0xb8
 8016762:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016764:	607c      	str	r4, [r7, #4]
 8016766:	9308      	str	r3, [sp, #32]
 8016768:	3301      	adds	r3, #1
 801676a:	932d      	str	r3, [sp, #180]	; 0xb4
 801676c:	3708      	adds	r7, #8
 801676e:	2b07      	cmp	r3, #7
 8016770:	dd08      	ble.n	8016784 <_svfprintf_r+0x1160>
 8016772:	aa2c      	add	r2, sp, #176	; 0xb0
 8016774:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016776:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016778:	f002 f8a8 	bl	80188cc <__ssprint_r>
 801677c:	2800      	cmp	r0, #0
 801677e:	d000      	beq.n	8016782 <_svfprintf_r+0x115e>
 8016780:	e174      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016782:	af2f      	add	r7, sp, #188	; 0xbc
 8016784:	43e3      	mvns	r3, r4
 8016786:	17db      	asrs	r3, r3, #31
 8016788:	401c      	ands	r4, r3
 801678a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801678c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801678e:	2510      	movs	r5, #16
 8016790:	1a9b      	subs	r3, r3, r2
 8016792:	1b1c      	subs	r4, r3, r4
 8016794:	2c00      	cmp	r4, #0
 8016796:	dc00      	bgt.n	801679a <_svfprintf_r+0x1176>
 8016798:	e697      	b.n	80164ca <_svfprintf_r+0xea6>
 801679a:	0039      	movs	r1, r7
 801679c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801679e:	4898      	ldr	r0, [pc, #608]	; (8016a00 <_svfprintf_r+0x13dc>)
 80167a0:	9308      	str	r3, [sp, #32]
 80167a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80167a4:	3301      	adds	r3, #1
 80167a6:	3108      	adds	r1, #8
 80167a8:	6038      	str	r0, [r7, #0]
 80167aa:	2c10      	cmp	r4, #16
 80167ac:	dc00      	bgt.n	80167b0 <_svfprintf_r+0x118c>
 80167ae:	e6c6      	b.n	801653e <_svfprintf_r+0xf1a>
 80167b0:	3210      	adds	r2, #16
 80167b2:	607d      	str	r5, [r7, #4]
 80167b4:	922e      	str	r2, [sp, #184]	; 0xb8
 80167b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80167b8:	2b07      	cmp	r3, #7
 80167ba:	dd08      	ble.n	80167ce <_svfprintf_r+0x11aa>
 80167bc:	aa2c      	add	r2, sp, #176	; 0xb0
 80167be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167c2:	f002 f883 	bl	80188cc <__ssprint_r>
 80167c6:	2800      	cmp	r0, #0
 80167c8:	d000      	beq.n	80167cc <_svfprintf_r+0x11a8>
 80167ca:	e14f      	b.n	8016a6c <_svfprintf_r+0x1448>
 80167cc:	a92f      	add	r1, sp, #188	; 0xbc
 80167ce:	3c10      	subs	r4, #16
 80167d0:	000f      	movs	r7, r1
 80167d2:	e7e2      	b.n	801679a <_svfprintf_r+0x1176>
 80167d4:	2010      	movs	r0, #16
 80167d6:	1812      	adds	r2, r2, r0
 80167d8:	6078      	str	r0, [r7, #4]
 80167da:	922e      	str	r2, [sp, #184]	; 0xb8
 80167dc:	932d      	str	r3, [sp, #180]	; 0xb4
 80167de:	2b07      	cmp	r3, #7
 80167e0:	dd08      	ble.n	80167f4 <_svfprintf_r+0x11d0>
 80167e2:	aa2c      	add	r2, sp, #176	; 0xb0
 80167e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167e8:	f002 f870 	bl	80188cc <__ssprint_r>
 80167ec:	2800      	cmp	r0, #0
 80167ee:	d000      	beq.n	80167f2 <_svfprintf_r+0x11ce>
 80167f0:	e13c      	b.n	8016a6c <_svfprintf_r+0x1448>
 80167f2:	a92f      	add	r1, sp, #188	; 0xbc
 80167f4:	3c10      	subs	r4, #16
 80167f6:	000f      	movs	r7, r1
 80167f8:	e757      	b.n	80166aa <_svfprintf_r+0x1086>
 80167fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d061      	beq.n	80168c4 <_svfprintf_r+0x12a0>
 8016800:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016802:	3b01      	subs	r3, #1
 8016804:	9310      	str	r3, [sp, #64]	; 0x40
 8016806:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016808:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801680a:	4694      	mov	ip, r2
 801680c:	603b      	str	r3, [r7, #0]
 801680e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016810:	607b      	str	r3, [r7, #4]
 8016812:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016814:	3708      	adds	r7, #8
 8016816:	4463      	add	r3, ip
 8016818:	932e      	str	r3, [sp, #184]	; 0xb8
 801681a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801681c:	9308      	str	r3, [sp, #32]
 801681e:	3301      	adds	r3, #1
 8016820:	932d      	str	r3, [sp, #180]	; 0xb4
 8016822:	2b07      	cmp	r3, #7
 8016824:	dd08      	ble.n	8016838 <_svfprintf_r+0x1214>
 8016826:	aa2c      	add	r2, sp, #176	; 0xb0
 8016828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801682a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801682c:	f002 f84e 	bl	80188cc <__ssprint_r>
 8016830:	2800      	cmp	r0, #0
 8016832:	d000      	beq.n	8016836 <_svfprintf_r+0x1212>
 8016834:	e11a      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016836:	af2f      	add	r7, sp, #188	; 0xbc
 8016838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801683a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801683c:	189b      	adds	r3, r3, r2
 801683e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016840:	1b5b      	subs	r3, r3, r5
 8016842:	7814      	ldrb	r4, [r2, #0]
 8016844:	429c      	cmp	r4, r3
 8016846:	dd00      	ble.n	801684a <_svfprintf_r+0x1226>
 8016848:	001c      	movs	r4, r3
 801684a:	2c00      	cmp	r4, #0
 801684c:	dd14      	ble.n	8016878 <_svfprintf_r+0x1254>
 801684e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016850:	603d      	str	r5, [r7, #0]
 8016852:	18e3      	adds	r3, r4, r3
 8016854:	932e      	str	r3, [sp, #184]	; 0xb8
 8016856:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016858:	607c      	str	r4, [r7, #4]
 801685a:	9308      	str	r3, [sp, #32]
 801685c:	3301      	adds	r3, #1
 801685e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016860:	3708      	adds	r7, #8
 8016862:	2b07      	cmp	r3, #7
 8016864:	dd08      	ble.n	8016878 <_svfprintf_r+0x1254>
 8016866:	aa2c      	add	r2, sp, #176	; 0xb0
 8016868:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801686a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801686c:	f002 f82e 	bl	80188cc <__ssprint_r>
 8016870:	2800      	cmp	r0, #0
 8016872:	d000      	beq.n	8016876 <_svfprintf_r+0x1252>
 8016874:	e0fa      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016876:	af2f      	add	r7, sp, #188	; 0xbc
 8016878:	43e3      	mvns	r3, r4
 801687a:	17db      	asrs	r3, r3, #31
 801687c:	401c      	ands	r4, r3
 801687e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016880:	781b      	ldrb	r3, [r3, #0]
 8016882:	1b1c      	subs	r4, r3, r4
 8016884:	2c00      	cmp	r4, #0
 8016886:	dd19      	ble.n	80168bc <_svfprintf_r+0x1298>
 8016888:	0039      	movs	r1, r7
 801688a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801688c:	485c      	ldr	r0, [pc, #368]	; (8016a00 <_svfprintf_r+0x13dc>)
 801688e:	9308      	str	r3, [sp, #32]
 8016890:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016892:	3301      	adds	r3, #1
 8016894:	3108      	adds	r1, #8
 8016896:	6038      	str	r0, [r7, #0]
 8016898:	2c10      	cmp	r4, #16
 801689a:	dc1a      	bgt.n	80168d2 <_svfprintf_r+0x12ae>
 801689c:	607c      	str	r4, [r7, #4]
 801689e:	18a4      	adds	r4, r4, r2
 80168a0:	942e      	str	r4, [sp, #184]	; 0xb8
 80168a2:	932d      	str	r3, [sp, #180]	; 0xb4
 80168a4:	000f      	movs	r7, r1
 80168a6:	2b07      	cmp	r3, #7
 80168a8:	dd08      	ble.n	80168bc <_svfprintf_r+0x1298>
 80168aa:	aa2c      	add	r2, sp, #176	; 0xb0
 80168ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168b0:	f002 f80c 	bl	80188cc <__ssprint_r>
 80168b4:	2800      	cmp	r0, #0
 80168b6:	d000      	beq.n	80168ba <_svfprintf_r+0x1296>
 80168b8:	e0d8      	b.n	8016a6c <_svfprintf_r+0x1448>
 80168ba:	af2f      	add	r7, sp, #188	; 0xbc
 80168bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168be:	781b      	ldrb	r3, [r3, #0]
 80168c0:	18ed      	adds	r5, r5, r3
 80168c2:	e711      	b.n	80166e8 <_svfprintf_r+0x10c4>
 80168c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168c6:	3b01      	subs	r3, #1
 80168c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80168ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168cc:	3b01      	subs	r3, #1
 80168ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80168d0:	e799      	b.n	8016806 <_svfprintf_r+0x11e2>
 80168d2:	2010      	movs	r0, #16
 80168d4:	1812      	adds	r2, r2, r0
 80168d6:	6078      	str	r0, [r7, #4]
 80168d8:	922e      	str	r2, [sp, #184]	; 0xb8
 80168da:	932d      	str	r3, [sp, #180]	; 0xb4
 80168dc:	2b07      	cmp	r3, #7
 80168de:	dd08      	ble.n	80168f2 <_svfprintf_r+0x12ce>
 80168e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80168e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168e6:	f001 fff1 	bl	80188cc <__ssprint_r>
 80168ea:	2800      	cmp	r0, #0
 80168ec:	d000      	beq.n	80168f0 <_svfprintf_r+0x12cc>
 80168ee:	e0bd      	b.n	8016a6c <_svfprintf_r+0x1448>
 80168f0:	a92f      	add	r1, sp, #188	; 0xbc
 80168f2:	3c10      	subs	r4, #16
 80168f4:	000f      	movs	r7, r1
 80168f6:	e7c7      	b.n	8016888 <_svfprintf_r+0x1264>
 80168f8:	003c      	movs	r4, r7
 80168fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80168fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80168fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016900:	9308      	str	r3, [sp, #32]
 8016902:	3101      	adds	r1, #1
 8016904:	3301      	adds	r3, #1
 8016906:	3408      	adds	r4, #8
 8016908:	2a01      	cmp	r2, #1
 801690a:	dc03      	bgt.n	8016914 <_svfprintf_r+0x12f0>
 801690c:	2201      	movs	r2, #1
 801690e:	4216      	tst	r6, r2
 8016910:	d100      	bne.n	8016914 <_svfprintf_r+0x12f0>
 8016912:	e088      	b.n	8016a26 <_svfprintf_r+0x1402>
 8016914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016916:	912e      	str	r1, [sp, #184]	; 0xb8
 8016918:	603a      	str	r2, [r7, #0]
 801691a:	2201      	movs	r2, #1
 801691c:	932d      	str	r3, [sp, #180]	; 0xb4
 801691e:	607a      	str	r2, [r7, #4]
 8016920:	2b07      	cmp	r3, #7
 8016922:	dd08      	ble.n	8016936 <_svfprintf_r+0x1312>
 8016924:	aa2c      	add	r2, sp, #176	; 0xb0
 8016926:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016928:	980a      	ldr	r0, [sp, #40]	; 0x28
 801692a:	f001 ffcf 	bl	80188cc <__ssprint_r>
 801692e:	2800      	cmp	r0, #0
 8016930:	d000      	beq.n	8016934 <_svfprintf_r+0x1310>
 8016932:	e09b      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016934:	ac2f      	add	r4, sp, #188	; 0xbc
 8016936:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016938:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801693a:	4694      	mov	ip, r2
 801693c:	6023      	str	r3, [r4, #0]
 801693e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016940:	6063      	str	r3, [r4, #4]
 8016942:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016944:	3408      	adds	r4, #8
 8016946:	4463      	add	r3, ip
 8016948:	932e      	str	r3, [sp, #184]	; 0xb8
 801694a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801694c:	9308      	str	r3, [sp, #32]
 801694e:	3301      	adds	r3, #1
 8016950:	932d      	str	r3, [sp, #180]	; 0xb4
 8016952:	2b07      	cmp	r3, #7
 8016954:	dd08      	ble.n	8016968 <_svfprintf_r+0x1344>
 8016956:	aa2c      	add	r2, sp, #176	; 0xb0
 8016958:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801695a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801695c:	f001 ffb6 	bl	80188cc <__ssprint_r>
 8016960:	2800      	cmp	r0, #0
 8016962:	d000      	beq.n	8016966 <_svfprintf_r+0x1342>
 8016964:	e082      	b.n	8016a6c <_svfprintf_r+0x1448>
 8016966:	ac2f      	add	r4, sp, #188	; 0xbc
 8016968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801696a:	2200      	movs	r2, #0
 801696c:	1e5d      	subs	r5, r3, #1
 801696e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016970:	2300      	movs	r3, #0
 8016972:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016974:	f7e9 fd72 	bl	800045c <__aeabi_dcmpeq>
 8016978:	2800      	cmp	r0, #0
 801697a:	d12c      	bne.n	80169d6 <_svfprintf_r+0x13b2>
 801697c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801697e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016980:	9308      	str	r3, [sp, #32]
 8016982:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016984:	6065      	str	r5, [r4, #4]
 8016986:	1c5a      	adds	r2, r3, #1
 8016988:	930e      	str	r3, [sp, #56]	; 0x38
 801698a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801698c:	922d      	str	r2, [sp, #180]	; 0xb4
 801698e:	3301      	adds	r3, #1
 8016990:	6023      	str	r3, [r4, #0]
 8016992:	9b08      	ldr	r3, [sp, #32]
 8016994:	3408      	adds	r4, #8
 8016996:	3b01      	subs	r3, #1
 8016998:	185b      	adds	r3, r3, r1
 801699a:	932e      	str	r3, [sp, #184]	; 0xb8
 801699c:	2a07      	cmp	r2, #7
 801699e:	dd07      	ble.n	80169b0 <_svfprintf_r+0x138c>
 80169a0:	aa2c      	add	r2, sp, #176	; 0xb0
 80169a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169a6:	f001 ff91 	bl	80188cc <__ssprint_r>
 80169aa:	2800      	cmp	r0, #0
 80169ac:	d15e      	bne.n	8016a6c <_svfprintf_r+0x1448>
 80169ae:	ac2f      	add	r4, sp, #188	; 0xbc
 80169b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80169b2:	ab28      	add	r3, sp, #160	; 0xa0
 80169b4:	4694      	mov	ip, r2
 80169b6:	6023      	str	r3, [r4, #0]
 80169b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80169ba:	6063      	str	r3, [r4, #4]
 80169bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80169be:	4463      	add	r3, ip
 80169c0:	932e      	str	r3, [sp, #184]	; 0xb8
 80169c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169c4:	9308      	str	r3, [sp, #32]
 80169c6:	3301      	adds	r3, #1
 80169c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80169ca:	2b07      	cmp	r3, #7
 80169cc:	dd00      	ble.n	80169d0 <_svfprintf_r+0x13ac>
 80169ce:	e629      	b.n	8016624 <_svfprintf_r+0x1000>
 80169d0:	3408      	adds	r4, #8
 80169d2:	0027      	movs	r7, r4
 80169d4:	e579      	b.n	80164ca <_svfprintf_r+0xea6>
 80169d6:	2710      	movs	r7, #16
 80169d8:	2d00      	cmp	r5, #0
 80169da:	dde9      	ble.n	80169b0 <_svfprintf_r+0x138c>
 80169dc:	0021      	movs	r1, r4
 80169de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169e0:	4807      	ldr	r0, [pc, #28]	; (8016a00 <_svfprintf_r+0x13dc>)
 80169e2:	9308      	str	r3, [sp, #32]
 80169e4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80169e6:	3301      	adds	r3, #1
 80169e8:	3108      	adds	r1, #8
 80169ea:	6020      	str	r0, [r4, #0]
 80169ec:	2d10      	cmp	r5, #16
 80169ee:	dc09      	bgt.n	8016a04 <_svfprintf_r+0x13e0>
 80169f0:	6065      	str	r5, [r4, #4]
 80169f2:	000c      	movs	r4, r1
 80169f4:	18ad      	adds	r5, r5, r2
 80169f6:	952e      	str	r5, [sp, #184]	; 0xb8
 80169f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80169fa:	2b07      	cmp	r3, #7
 80169fc:	ddd8      	ble.n	80169b0 <_svfprintf_r+0x138c>
 80169fe:	e7cf      	b.n	80169a0 <_svfprintf_r+0x137c>
 8016a00:	0801bb2c 	.word	0x0801bb2c
 8016a04:	3210      	adds	r2, #16
 8016a06:	6067      	str	r7, [r4, #4]
 8016a08:	922e      	str	r2, [sp, #184]	; 0xb8
 8016a0a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a0c:	2b07      	cmp	r3, #7
 8016a0e:	dd07      	ble.n	8016a20 <_svfprintf_r+0x13fc>
 8016a10:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a16:	f001 ff59 	bl	80188cc <__ssprint_r>
 8016a1a:	2800      	cmp	r0, #0
 8016a1c:	d126      	bne.n	8016a6c <_svfprintf_r+0x1448>
 8016a1e:	a92f      	add	r1, sp, #188	; 0xbc
 8016a20:	3d10      	subs	r5, #16
 8016a22:	000c      	movs	r4, r1
 8016a24:	e7da      	b.n	80169dc <_svfprintf_r+0x13b8>
 8016a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a28:	912e      	str	r1, [sp, #184]	; 0xb8
 8016a2a:	c705      	stmia	r7!, {r0, r2}
 8016a2c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a2e:	e7e4      	b.n	80169fa <_svfprintf_r+0x13d6>
 8016a30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016a32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016a34:	2510      	movs	r5, #16
 8016a36:	1a9c      	subs	r4, r3, r2
 8016a38:	2c00      	cmp	r4, #0
 8016a3a:	dc00      	bgt.n	8016a3e <_svfprintf_r+0x141a>
 8016a3c:	e548      	b.n	80164d0 <_svfprintf_r+0xeac>
 8016a3e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a40:	4921      	ldr	r1, [pc, #132]	; (8016ac8 <_svfprintf_r+0x14a4>)
 8016a42:	9308      	str	r3, [sp, #32]
 8016a44:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016a46:	3301      	adds	r3, #1
 8016a48:	6039      	str	r1, [r7, #0]
 8016a4a:	2c10      	cmp	r4, #16
 8016a4c:	dc19      	bgt.n	8016a82 <_svfprintf_r+0x145e>
 8016a4e:	607c      	str	r4, [r7, #4]
 8016a50:	18a4      	adds	r4, r4, r2
 8016a52:	942e      	str	r4, [sp, #184]	; 0xb8
 8016a54:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a56:	2b07      	cmp	r3, #7
 8016a58:	dc00      	bgt.n	8016a5c <_svfprintf_r+0x1438>
 8016a5a:	e539      	b.n	80164d0 <_svfprintf_r+0xeac>
 8016a5c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a62:	f001 ff33 	bl	80188cc <__ssprint_r>
 8016a66:	2800      	cmp	r0, #0
 8016a68:	d100      	bne.n	8016a6c <_svfprintf_r+0x1448>
 8016a6a:	e531      	b.n	80164d0 <_svfprintf_r+0xeac>
 8016a6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d101      	bne.n	8016a76 <_svfprintf_r+0x1452>
 8016a72:	f7ff f908 	bl	8015c86 <_svfprintf_r+0x662>
 8016a76:	0019      	movs	r1, r3
 8016a78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a7a:	f000 ff19 	bl	80178b0 <_free_r>
 8016a7e:	f7ff f902 	bl	8015c86 <_svfprintf_r+0x662>
 8016a82:	3210      	adds	r2, #16
 8016a84:	607d      	str	r5, [r7, #4]
 8016a86:	922e      	str	r2, [sp, #184]	; 0xb8
 8016a88:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a8a:	3708      	adds	r7, #8
 8016a8c:	2b07      	cmp	r3, #7
 8016a8e:	dd07      	ble.n	8016aa0 <_svfprintf_r+0x147c>
 8016a90:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a96:	f001 ff19 	bl	80188cc <__ssprint_r>
 8016a9a:	2800      	cmp	r0, #0
 8016a9c:	d1e6      	bne.n	8016a6c <_svfprintf_r+0x1448>
 8016a9e:	af2f      	add	r7, sp, #188	; 0xbc
 8016aa0:	3c10      	subs	r4, #16
 8016aa2:	e7cc      	b.n	8016a3e <_svfprintf_r+0x141a>
 8016aa4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016aa6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016aa8:	f000 ff02 	bl	80178b0 <_free_r>
 8016aac:	e52a      	b.n	8016504 <_svfprintf_r+0xee0>
 8016aae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016ab0:	9306      	str	r3, [sp, #24]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d101      	bne.n	8016aba <_svfprintf_r+0x1496>
 8016ab6:	f7ff f8e6 	bl	8015c86 <_svfprintf_r+0x662>
 8016aba:	aa2c      	add	r2, sp, #176	; 0xb0
 8016abc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016abe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ac0:	f001 ff04 	bl	80188cc <__ssprint_r>
 8016ac4:	f7ff f8df 	bl	8015c86 <_svfprintf_r+0x662>
 8016ac8:	0801bb1c 	.word	0x0801bb1c

08016acc <sysconf>:
 8016acc:	2380      	movs	r3, #128	; 0x80
 8016ace:	b510      	push	{r4, lr}
 8016ad0:	015b      	lsls	r3, r3, #5
 8016ad2:	2808      	cmp	r0, #8
 8016ad4:	d004      	beq.n	8016ae0 <sysconf+0x14>
 8016ad6:	f000 fe7d 	bl	80177d4 <__errno>
 8016ada:	2316      	movs	r3, #22
 8016adc:	6003      	str	r3, [r0, #0]
 8016ade:	3b17      	subs	r3, #23
 8016ae0:	0018      	movs	r0, r3
 8016ae2:	bd10      	pop	{r4, pc}

08016ae4 <__ascii_wctomb>:
 8016ae4:	1e0b      	subs	r3, r1, #0
 8016ae6:	d004      	beq.n	8016af2 <__ascii_wctomb+0xe>
 8016ae8:	2aff      	cmp	r2, #255	; 0xff
 8016aea:	d904      	bls.n	8016af6 <__ascii_wctomb+0x12>
 8016aec:	238a      	movs	r3, #138	; 0x8a
 8016aee:	6003      	str	r3, [r0, #0]
 8016af0:	3b8b      	subs	r3, #139	; 0x8b
 8016af2:	0018      	movs	r0, r3
 8016af4:	4770      	bx	lr
 8016af6:	700a      	strb	r2, [r1, #0]
 8016af8:	2301      	movs	r3, #1
 8016afa:	e7fa      	b.n	8016af2 <__ascii_wctomb+0xe>

08016afc <register_fini>:
 8016afc:	4b03      	ldr	r3, [pc, #12]	; (8016b0c <register_fini+0x10>)
 8016afe:	b510      	push	{r4, lr}
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d002      	beq.n	8016b0a <register_fini+0xe>
 8016b04:	4802      	ldr	r0, [pc, #8]	; (8016b10 <register_fini+0x14>)
 8016b06:	f000 f805 	bl	8016b14 <atexit>
 8016b0a:	bd10      	pop	{r4, pc}
 8016b0c:	00000000 	.word	0x00000000
 8016b10:	080177e1 	.word	0x080177e1

08016b14 <atexit>:
 8016b14:	2300      	movs	r3, #0
 8016b16:	b510      	push	{r4, lr}
 8016b18:	0001      	movs	r1, r0
 8016b1a:	001a      	movs	r2, r3
 8016b1c:	0018      	movs	r0, r3
 8016b1e:	f001 ff53 	bl	80189c8 <__register_exitproc>
 8016b22:	bd10      	pop	{r4, pc}

08016b24 <quorem>:
 8016b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b26:	6903      	ldr	r3, [r0, #16]
 8016b28:	690c      	ldr	r4, [r1, #16]
 8016b2a:	b089      	sub	sp, #36	; 0x24
 8016b2c:	0007      	movs	r7, r0
 8016b2e:	9105      	str	r1, [sp, #20]
 8016b30:	2600      	movs	r6, #0
 8016b32:	42a3      	cmp	r3, r4
 8016b34:	db65      	blt.n	8016c02 <quorem+0xde>
 8016b36:	000b      	movs	r3, r1
 8016b38:	3c01      	subs	r4, #1
 8016b3a:	3314      	adds	r3, #20
 8016b3c:	00a5      	lsls	r5, r4, #2
 8016b3e:	9303      	str	r3, [sp, #12]
 8016b40:	195b      	adds	r3, r3, r5
 8016b42:	9304      	str	r3, [sp, #16]
 8016b44:	0003      	movs	r3, r0
 8016b46:	3314      	adds	r3, #20
 8016b48:	9302      	str	r3, [sp, #8]
 8016b4a:	195d      	adds	r5, r3, r5
 8016b4c:	9b04      	ldr	r3, [sp, #16]
 8016b4e:	6828      	ldr	r0, [r5, #0]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	1c59      	adds	r1, r3, #1
 8016b54:	9301      	str	r3, [sp, #4]
 8016b56:	f7e9 fafb 	bl	8000150 <__udivsi3>
 8016b5a:	9001      	str	r0, [sp, #4]
 8016b5c:	42b0      	cmp	r0, r6
 8016b5e:	d029      	beq.n	8016bb4 <quorem+0x90>
 8016b60:	9b03      	ldr	r3, [sp, #12]
 8016b62:	9802      	ldr	r0, [sp, #8]
 8016b64:	469c      	mov	ip, r3
 8016b66:	9606      	str	r6, [sp, #24]
 8016b68:	4662      	mov	r2, ip
 8016b6a:	ca08      	ldmia	r2!, {r3}
 8016b6c:	4694      	mov	ip, r2
 8016b6e:	9a01      	ldr	r2, [sp, #4]
 8016b70:	b299      	uxth	r1, r3
 8016b72:	4351      	muls	r1, r2
 8016b74:	0c1b      	lsrs	r3, r3, #16
 8016b76:	4353      	muls	r3, r2
 8016b78:	1989      	adds	r1, r1, r6
 8016b7a:	0c0a      	lsrs	r2, r1, #16
 8016b7c:	189b      	adds	r3, r3, r2
 8016b7e:	9307      	str	r3, [sp, #28]
 8016b80:	0c1e      	lsrs	r6, r3, #16
 8016b82:	6803      	ldr	r3, [r0, #0]
 8016b84:	b289      	uxth	r1, r1
 8016b86:	b29a      	uxth	r2, r3
 8016b88:	9b06      	ldr	r3, [sp, #24]
 8016b8a:	18d2      	adds	r2, r2, r3
 8016b8c:	6803      	ldr	r3, [r0, #0]
 8016b8e:	1a52      	subs	r2, r2, r1
 8016b90:	0c19      	lsrs	r1, r3, #16
 8016b92:	466b      	mov	r3, sp
 8016b94:	8b9b      	ldrh	r3, [r3, #28]
 8016b96:	1acb      	subs	r3, r1, r3
 8016b98:	1411      	asrs	r1, r2, #16
 8016b9a:	185b      	adds	r3, r3, r1
 8016b9c:	1419      	asrs	r1, r3, #16
 8016b9e:	b292      	uxth	r2, r2
 8016ba0:	041b      	lsls	r3, r3, #16
 8016ba2:	431a      	orrs	r2, r3
 8016ba4:	9b04      	ldr	r3, [sp, #16]
 8016ba6:	9106      	str	r1, [sp, #24]
 8016ba8:	c004      	stmia	r0!, {r2}
 8016baa:	4563      	cmp	r3, ip
 8016bac:	d2dc      	bcs.n	8016b68 <quorem+0x44>
 8016bae:	682b      	ldr	r3, [r5, #0]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d02d      	beq.n	8016c10 <quorem+0xec>
 8016bb4:	9905      	ldr	r1, [sp, #20]
 8016bb6:	0038      	movs	r0, r7
 8016bb8:	f001 fcb2 	bl	8018520 <__mcmp>
 8016bbc:	2800      	cmp	r0, #0
 8016bbe:	db1f      	blt.n	8016c00 <quorem+0xdc>
 8016bc0:	2500      	movs	r5, #0
 8016bc2:	9b01      	ldr	r3, [sp, #4]
 8016bc4:	9802      	ldr	r0, [sp, #8]
 8016bc6:	3301      	adds	r3, #1
 8016bc8:	9903      	ldr	r1, [sp, #12]
 8016bca:	9301      	str	r3, [sp, #4]
 8016bcc:	6802      	ldr	r2, [r0, #0]
 8016bce:	c908      	ldmia	r1!, {r3}
 8016bd0:	b292      	uxth	r2, r2
 8016bd2:	1955      	adds	r5, r2, r5
 8016bd4:	b29a      	uxth	r2, r3
 8016bd6:	1aaa      	subs	r2, r5, r2
 8016bd8:	6805      	ldr	r5, [r0, #0]
 8016bda:	0c1b      	lsrs	r3, r3, #16
 8016bdc:	0c2d      	lsrs	r5, r5, #16
 8016bde:	1aeb      	subs	r3, r5, r3
 8016be0:	1415      	asrs	r5, r2, #16
 8016be2:	195b      	adds	r3, r3, r5
 8016be4:	141d      	asrs	r5, r3, #16
 8016be6:	b292      	uxth	r2, r2
 8016be8:	041b      	lsls	r3, r3, #16
 8016bea:	4313      	orrs	r3, r2
 8016bec:	c008      	stmia	r0!, {r3}
 8016bee:	9b04      	ldr	r3, [sp, #16]
 8016bf0:	428b      	cmp	r3, r1
 8016bf2:	d2eb      	bcs.n	8016bcc <quorem+0xa8>
 8016bf4:	9a02      	ldr	r2, [sp, #8]
 8016bf6:	00a3      	lsls	r3, r4, #2
 8016bf8:	18d3      	adds	r3, r2, r3
 8016bfa:	681a      	ldr	r2, [r3, #0]
 8016bfc:	2a00      	cmp	r2, #0
 8016bfe:	d011      	beq.n	8016c24 <quorem+0x100>
 8016c00:	9e01      	ldr	r6, [sp, #4]
 8016c02:	0030      	movs	r0, r6
 8016c04:	b009      	add	sp, #36	; 0x24
 8016c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c08:	682b      	ldr	r3, [r5, #0]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d104      	bne.n	8016c18 <quorem+0xf4>
 8016c0e:	3c01      	subs	r4, #1
 8016c10:	9b02      	ldr	r3, [sp, #8]
 8016c12:	3d04      	subs	r5, #4
 8016c14:	42ab      	cmp	r3, r5
 8016c16:	d3f7      	bcc.n	8016c08 <quorem+0xe4>
 8016c18:	613c      	str	r4, [r7, #16]
 8016c1a:	e7cb      	b.n	8016bb4 <quorem+0x90>
 8016c1c:	681a      	ldr	r2, [r3, #0]
 8016c1e:	2a00      	cmp	r2, #0
 8016c20:	d104      	bne.n	8016c2c <quorem+0x108>
 8016c22:	3c01      	subs	r4, #1
 8016c24:	9a02      	ldr	r2, [sp, #8]
 8016c26:	3b04      	subs	r3, #4
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d3f7      	bcc.n	8016c1c <quorem+0xf8>
 8016c2c:	613c      	str	r4, [r7, #16]
 8016c2e:	e7e7      	b.n	8016c00 <quorem+0xdc>

08016c30 <_dtoa_r>:
 8016c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c32:	0014      	movs	r4, r2
 8016c34:	001d      	movs	r5, r3
 8016c36:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016c38:	b09b      	sub	sp, #108	; 0x6c
 8016c3a:	9002      	str	r0, [sp, #8]
 8016c3c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8016c3e:	9406      	str	r4, [sp, #24]
 8016c40:	9507      	str	r5, [sp, #28]
 8016c42:	2900      	cmp	r1, #0
 8016c44:	d009      	beq.n	8016c5a <_dtoa_r+0x2a>
 8016c46:	2301      	movs	r3, #1
 8016c48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016c4a:	4093      	lsls	r3, r2
 8016c4c:	604a      	str	r2, [r1, #4]
 8016c4e:	608b      	str	r3, [r1, #8]
 8016c50:	f001 fa6a 	bl	8018128 <_Bfree>
 8016c54:	2300      	movs	r3, #0
 8016c56:	9a02      	ldr	r2, [sp, #8]
 8016c58:	6413      	str	r3, [r2, #64]	; 0x40
 8016c5a:	2d00      	cmp	r5, #0
 8016c5c:	da20      	bge.n	8016ca0 <_dtoa_r+0x70>
 8016c5e:	2301      	movs	r3, #1
 8016c60:	6033      	str	r3, [r6, #0]
 8016c62:	006b      	lsls	r3, r5, #1
 8016c64:	085b      	lsrs	r3, r3, #1
 8016c66:	9307      	str	r3, [sp, #28]
 8016c68:	9c07      	ldr	r4, [sp, #28]
 8016c6a:	4bb2      	ldr	r3, [pc, #712]	; (8016f34 <_dtoa_r+0x304>)
 8016c6c:	0022      	movs	r2, r4
 8016c6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c70:	401a      	ands	r2, r3
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d117      	bne.n	8016ca6 <_dtoa_r+0x76>
 8016c76:	4bb0      	ldr	r3, [pc, #704]	; (8016f38 <_dtoa_r+0x308>)
 8016c78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016c7a:	6013      	str	r3, [r2, #0]
 8016c7c:	9b06      	ldr	r3, [sp, #24]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d103      	bne.n	8016c8a <_dtoa_r+0x5a>
 8016c82:	0324      	lsls	r4, r4, #12
 8016c84:	d101      	bne.n	8016c8a <_dtoa_r+0x5a>
 8016c86:	f000 fd89 	bl	801779c <_dtoa_r+0xb6c>
 8016c8a:	4bac      	ldr	r3, [pc, #688]	; (8016f3c <_dtoa_r+0x30c>)
 8016c8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016c8e:	9308      	str	r3, [sp, #32]
 8016c90:	2a00      	cmp	r2, #0
 8016c92:	d002      	beq.n	8016c9a <_dtoa_r+0x6a>
 8016c94:	4baa      	ldr	r3, [pc, #680]	; (8016f40 <_dtoa_r+0x310>)
 8016c96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016c98:	6013      	str	r3, [r2, #0]
 8016c9a:	9808      	ldr	r0, [sp, #32]
 8016c9c:	b01b      	add	sp, #108	; 0x6c
 8016c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	6033      	str	r3, [r6, #0]
 8016ca4:	e7e0      	b.n	8016c68 <_dtoa_r+0x38>
 8016ca6:	9e06      	ldr	r6, [sp, #24]
 8016ca8:	9f07      	ldr	r7, [sp, #28]
 8016caa:	2200      	movs	r2, #0
 8016cac:	2300      	movs	r3, #0
 8016cae:	0030      	movs	r0, r6
 8016cb0:	0039      	movs	r1, r7
 8016cb2:	f7e9 fbd3 	bl	800045c <__aeabi_dcmpeq>
 8016cb6:	1e05      	subs	r5, r0, #0
 8016cb8:	d00b      	beq.n	8016cd2 <_dtoa_r+0xa2>
 8016cba:	2301      	movs	r3, #1
 8016cbc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016cbe:	6013      	str	r3, [r2, #0]
 8016cc0:	4ba0      	ldr	r3, [pc, #640]	; (8016f44 <_dtoa_r+0x314>)
 8016cc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016cc4:	9308      	str	r3, [sp, #32]
 8016cc6:	2a00      	cmp	r2, #0
 8016cc8:	d0e7      	beq.n	8016c9a <_dtoa_r+0x6a>
 8016cca:	4a9f      	ldr	r2, [pc, #636]	; (8016f48 <_dtoa_r+0x318>)
 8016ccc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8016cce:	600a      	str	r2, [r1, #0]
 8016cd0:	e7e3      	b.n	8016c9a <_dtoa_r+0x6a>
 8016cd2:	ab18      	add	r3, sp, #96	; 0x60
 8016cd4:	9301      	str	r3, [sp, #4]
 8016cd6:	ab19      	add	r3, sp, #100	; 0x64
 8016cd8:	9300      	str	r3, [sp, #0]
 8016cda:	0032      	movs	r2, r6
 8016cdc:	003b      	movs	r3, r7
 8016cde:	9802      	ldr	r0, [sp, #8]
 8016ce0:	f001 fd0e 	bl	8018700 <__d2b>
 8016ce4:	0063      	lsls	r3, r4, #1
 8016ce6:	9003      	str	r0, [sp, #12]
 8016ce8:	0d5b      	lsrs	r3, r3, #21
 8016cea:	d074      	beq.n	8016dd6 <_dtoa_r+0x1a6>
 8016cec:	033a      	lsls	r2, r7, #12
 8016cee:	4c97      	ldr	r4, [pc, #604]	; (8016f4c <_dtoa_r+0x31c>)
 8016cf0:	0b12      	lsrs	r2, r2, #12
 8016cf2:	4314      	orrs	r4, r2
 8016cf4:	0021      	movs	r1, r4
 8016cf6:	4a96      	ldr	r2, [pc, #600]	; (8016f50 <_dtoa_r+0x320>)
 8016cf8:	0030      	movs	r0, r6
 8016cfa:	9516      	str	r5, [sp, #88]	; 0x58
 8016cfc:	189e      	adds	r6, r3, r2
 8016cfe:	2200      	movs	r2, #0
 8016d00:	4b94      	ldr	r3, [pc, #592]	; (8016f54 <_dtoa_r+0x324>)
 8016d02:	f7eb fc23 	bl	800254c <__aeabi_dsub>
 8016d06:	4a94      	ldr	r2, [pc, #592]	; (8016f58 <_dtoa_r+0x328>)
 8016d08:	4b94      	ldr	r3, [pc, #592]	; (8016f5c <_dtoa_r+0x32c>)
 8016d0a:	f7eb f9ad 	bl	8002068 <__aeabi_dmul>
 8016d0e:	4a94      	ldr	r2, [pc, #592]	; (8016f60 <_dtoa_r+0x330>)
 8016d10:	4b94      	ldr	r3, [pc, #592]	; (8016f64 <_dtoa_r+0x334>)
 8016d12:	f7ea fa83 	bl	800121c <__aeabi_dadd>
 8016d16:	0004      	movs	r4, r0
 8016d18:	0030      	movs	r0, r6
 8016d1a:	000d      	movs	r5, r1
 8016d1c:	f7eb ffb0 	bl	8002c80 <__aeabi_i2d>
 8016d20:	4a91      	ldr	r2, [pc, #580]	; (8016f68 <_dtoa_r+0x338>)
 8016d22:	4b92      	ldr	r3, [pc, #584]	; (8016f6c <_dtoa_r+0x33c>)
 8016d24:	f7eb f9a0 	bl	8002068 <__aeabi_dmul>
 8016d28:	0002      	movs	r2, r0
 8016d2a:	000b      	movs	r3, r1
 8016d2c:	0020      	movs	r0, r4
 8016d2e:	0029      	movs	r1, r5
 8016d30:	f7ea fa74 	bl	800121c <__aeabi_dadd>
 8016d34:	0004      	movs	r4, r0
 8016d36:	000d      	movs	r5, r1
 8016d38:	f7eb ff6c 	bl	8002c14 <__aeabi_d2iz>
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	0007      	movs	r7, r0
 8016d40:	2300      	movs	r3, #0
 8016d42:	0020      	movs	r0, r4
 8016d44:	0029      	movs	r1, r5
 8016d46:	f7e9 fb8f 	bl	8000468 <__aeabi_dcmplt>
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	d009      	beq.n	8016d62 <_dtoa_r+0x132>
 8016d4e:	0038      	movs	r0, r7
 8016d50:	f7eb ff96 	bl	8002c80 <__aeabi_i2d>
 8016d54:	002b      	movs	r3, r5
 8016d56:	0022      	movs	r2, r4
 8016d58:	f7e9 fb80 	bl	800045c <__aeabi_dcmpeq>
 8016d5c:	4243      	negs	r3, r0
 8016d5e:	4158      	adcs	r0, r3
 8016d60:	1a3f      	subs	r7, r7, r0
 8016d62:	2301      	movs	r3, #1
 8016d64:	9314      	str	r3, [sp, #80]	; 0x50
 8016d66:	2f16      	cmp	r7, #22
 8016d68:	d80d      	bhi.n	8016d86 <_dtoa_r+0x156>
 8016d6a:	4981      	ldr	r1, [pc, #516]	; (8016f70 <_dtoa_r+0x340>)
 8016d6c:	00fb      	lsls	r3, r7, #3
 8016d6e:	18c9      	adds	r1, r1, r3
 8016d70:	6808      	ldr	r0, [r1, #0]
 8016d72:	6849      	ldr	r1, [r1, #4]
 8016d74:	9a06      	ldr	r2, [sp, #24]
 8016d76:	9b07      	ldr	r3, [sp, #28]
 8016d78:	f7e9 fb8a 	bl	8000490 <__aeabi_dcmpgt>
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	d046      	beq.n	8016e0e <_dtoa_r+0x1de>
 8016d80:	2300      	movs	r3, #0
 8016d82:	3f01      	subs	r7, #1
 8016d84:	9314      	str	r3, [sp, #80]	; 0x50
 8016d86:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016d88:	1b9e      	subs	r6, r3, r6
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8016d8e:	0033      	movs	r3, r6
 8016d90:	3b01      	subs	r3, #1
 8016d92:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d94:	d504      	bpl.n	8016da0 <_dtoa_r+0x170>
 8016d96:	2301      	movs	r3, #1
 8016d98:	1b9b      	subs	r3, r3, r6
 8016d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016da0:	2f00      	cmp	r7, #0
 8016da2:	db36      	blt.n	8016e12 <_dtoa_r+0x1e2>
 8016da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016da6:	9711      	str	r7, [sp, #68]	; 0x44
 8016da8:	19db      	adds	r3, r3, r7
 8016daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8016dac:	2300      	movs	r3, #0
 8016dae:	9304      	str	r3, [sp, #16]
 8016db0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016db2:	2401      	movs	r4, #1
 8016db4:	2b09      	cmp	r3, #9
 8016db6:	d900      	bls.n	8016dba <_dtoa_r+0x18a>
 8016db8:	e082      	b.n	8016ec0 <_dtoa_r+0x290>
 8016dba:	2b05      	cmp	r3, #5
 8016dbc:	dd02      	ble.n	8016dc4 <_dtoa_r+0x194>
 8016dbe:	2400      	movs	r4, #0
 8016dc0:	3b04      	subs	r3, #4
 8016dc2:	9320      	str	r3, [sp, #128]	; 0x80
 8016dc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016dc6:	1e98      	subs	r0, r3, #2
 8016dc8:	2803      	cmp	r0, #3
 8016dca:	d900      	bls.n	8016dce <_dtoa_r+0x19e>
 8016dcc:	e082      	b.n	8016ed4 <_dtoa_r+0x2a4>
 8016dce:	f7e9 f9ab 	bl	8000128 <__gnu_thumb1_case_uqi>
 8016dd2:	7573      	.short	0x7573
 8016dd4:	6828      	.short	0x6828
 8016dd6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016dd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016dda:	189e      	adds	r6, r3, r2
 8016ddc:	4b65      	ldr	r3, [pc, #404]	; (8016f74 <_dtoa_r+0x344>)
 8016dde:	18f2      	adds	r2, r6, r3
 8016de0:	2a20      	cmp	r2, #32
 8016de2:	dd0f      	ble.n	8016e04 <_dtoa_r+0x1d4>
 8016de4:	2340      	movs	r3, #64	; 0x40
 8016de6:	1a9b      	subs	r3, r3, r2
 8016de8:	409c      	lsls	r4, r3
 8016dea:	4b63      	ldr	r3, [pc, #396]	; (8016f78 <_dtoa_r+0x348>)
 8016dec:	9806      	ldr	r0, [sp, #24]
 8016dee:	18f3      	adds	r3, r6, r3
 8016df0:	40d8      	lsrs	r0, r3
 8016df2:	4320      	orrs	r0, r4
 8016df4:	f7eb ff7e 	bl	8002cf4 <__aeabi_ui2d>
 8016df8:	2301      	movs	r3, #1
 8016dfa:	4c60      	ldr	r4, [pc, #384]	; (8016f7c <_dtoa_r+0x34c>)
 8016dfc:	3e01      	subs	r6, #1
 8016dfe:	1909      	adds	r1, r1, r4
 8016e00:	9316      	str	r3, [sp, #88]	; 0x58
 8016e02:	e77c      	b.n	8016cfe <_dtoa_r+0xce>
 8016e04:	2320      	movs	r3, #32
 8016e06:	9806      	ldr	r0, [sp, #24]
 8016e08:	1a9b      	subs	r3, r3, r2
 8016e0a:	4098      	lsls	r0, r3
 8016e0c:	e7f2      	b.n	8016df4 <_dtoa_r+0x1c4>
 8016e0e:	9014      	str	r0, [sp, #80]	; 0x50
 8016e10:	e7b9      	b.n	8016d86 <_dtoa_r+0x156>
 8016e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e14:	1bdb      	subs	r3, r3, r7
 8016e16:	930a      	str	r3, [sp, #40]	; 0x28
 8016e18:	427b      	negs	r3, r7
 8016e1a:	9304      	str	r3, [sp, #16]
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	9311      	str	r3, [sp, #68]	; 0x44
 8016e20:	e7c6      	b.n	8016db0 <_dtoa_r+0x180>
 8016e22:	2301      	movs	r3, #1
 8016e24:	930d      	str	r3, [sp, #52]	; 0x34
 8016e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	dd57      	ble.n	8016edc <_dtoa_r+0x2ac>
 8016e2c:	930c      	str	r3, [sp, #48]	; 0x30
 8016e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8016e30:	2200      	movs	r2, #0
 8016e32:	9902      	ldr	r1, [sp, #8]
 8016e34:	644a      	str	r2, [r1, #68]	; 0x44
 8016e36:	3204      	adds	r2, #4
 8016e38:	0010      	movs	r0, r2
 8016e3a:	9902      	ldr	r1, [sp, #8]
 8016e3c:	3014      	adds	r0, #20
 8016e3e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8016e40:	4298      	cmp	r0, r3
 8016e42:	d950      	bls.n	8016ee6 <_dtoa_r+0x2b6>
 8016e44:	9802      	ldr	r0, [sp, #8]
 8016e46:	f001 f947 	bl	80180d8 <_Balloc>
 8016e4a:	9b02      	ldr	r3, [sp, #8]
 8016e4c:	9008      	str	r0, [sp, #32]
 8016e4e:	6418      	str	r0, [r3, #64]	; 0x40
 8016e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e52:	2b0e      	cmp	r3, #14
 8016e54:	d900      	bls.n	8016e58 <_dtoa_r+0x228>
 8016e56:	e10c      	b.n	8017072 <_dtoa_r+0x442>
 8016e58:	2c00      	cmp	r4, #0
 8016e5a:	d100      	bne.n	8016e5e <_dtoa_r+0x22e>
 8016e5c:	e109      	b.n	8017072 <_dtoa_r+0x442>
 8016e5e:	9b06      	ldr	r3, [sp, #24]
 8016e60:	9c07      	ldr	r4, [sp, #28]
 8016e62:	9312      	str	r3, [sp, #72]	; 0x48
 8016e64:	9413      	str	r4, [sp, #76]	; 0x4c
 8016e66:	2f00      	cmp	r7, #0
 8016e68:	dc00      	bgt.n	8016e6c <_dtoa_r+0x23c>
 8016e6a:	e08b      	b.n	8016f84 <_dtoa_r+0x354>
 8016e6c:	210f      	movs	r1, #15
 8016e6e:	003a      	movs	r2, r7
 8016e70:	4b3f      	ldr	r3, [pc, #252]	; (8016f70 <_dtoa_r+0x340>)
 8016e72:	400a      	ands	r2, r1
 8016e74:	00d2      	lsls	r2, r2, #3
 8016e76:	189b      	adds	r3, r3, r2
 8016e78:	681d      	ldr	r5, [r3, #0]
 8016e7a:	685e      	ldr	r6, [r3, #4]
 8016e7c:	2302      	movs	r3, #2
 8016e7e:	113c      	asrs	r4, r7, #4
 8016e80:	930e      	str	r3, [sp, #56]	; 0x38
 8016e82:	06e3      	lsls	r3, r4, #27
 8016e84:	d50b      	bpl.n	8016e9e <_dtoa_r+0x26e>
 8016e86:	4b3e      	ldr	r3, [pc, #248]	; (8016f80 <_dtoa_r+0x350>)
 8016e88:	400c      	ands	r4, r1
 8016e8a:	6a1a      	ldr	r2, [r3, #32]
 8016e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e8e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016e90:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016e92:	f7ea fcdf 	bl	8001854 <__aeabi_ddiv>
 8016e96:	2303      	movs	r3, #3
 8016e98:	9006      	str	r0, [sp, #24]
 8016e9a:	9107      	str	r1, [sp, #28]
 8016e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	e03b      	b.n	8016f1a <_dtoa_r+0x2ea>
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	930d      	str	r3, [sp, #52]	; 0x34
 8016ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ea8:	18fb      	adds	r3, r7, r3
 8016eaa:	930c      	str	r3, [sp, #48]	; 0x30
 8016eac:	3301      	adds	r3, #1
 8016eae:	9309      	str	r3, [sp, #36]	; 0x24
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	dcbd      	bgt.n	8016e30 <_dtoa_r+0x200>
 8016eb4:	2301      	movs	r3, #1
 8016eb6:	e7bb      	b.n	8016e30 <_dtoa_r+0x200>
 8016eb8:	2300      	movs	r3, #0
 8016eba:	e7b3      	b.n	8016e24 <_dtoa_r+0x1f4>
 8016ebc:	2300      	movs	r3, #0
 8016ebe:	e7f1      	b.n	8016ea4 <_dtoa_r+0x274>
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	940d      	str	r4, [sp, #52]	; 0x34
 8016ec4:	9320      	str	r3, [sp, #128]	; 0x80
 8016ec6:	3b01      	subs	r3, #1
 8016ec8:	2200      	movs	r2, #0
 8016eca:	930c      	str	r3, [sp, #48]	; 0x30
 8016ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8016ece:	3313      	adds	r3, #19
 8016ed0:	9221      	str	r2, [sp, #132]	; 0x84
 8016ed2:	e7ad      	b.n	8016e30 <_dtoa_r+0x200>
 8016ed4:	2301      	movs	r3, #1
 8016ed6:	930d      	str	r3, [sp, #52]	; 0x34
 8016ed8:	3b02      	subs	r3, #2
 8016eda:	e7f5      	b.n	8016ec8 <_dtoa_r+0x298>
 8016edc:	2301      	movs	r3, #1
 8016ede:	930c      	str	r3, [sp, #48]	; 0x30
 8016ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ee2:	001a      	movs	r2, r3
 8016ee4:	e7f4      	b.n	8016ed0 <_dtoa_r+0x2a0>
 8016ee6:	9802      	ldr	r0, [sp, #8]
 8016ee8:	3101      	adds	r1, #1
 8016eea:	6441      	str	r1, [r0, #68]	; 0x44
 8016eec:	0052      	lsls	r2, r2, #1
 8016eee:	e7a3      	b.n	8016e38 <_dtoa_r+0x208>
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	421c      	tst	r4, r3
 8016ef4:	d00e      	beq.n	8016f14 <_dtoa_r+0x2e4>
 8016ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ef8:	4a21      	ldr	r2, [pc, #132]	; (8016f80 <_dtoa_r+0x350>)
 8016efa:	3301      	adds	r3, #1
 8016efc:	930e      	str	r3, [sp, #56]	; 0x38
 8016efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f00:	0028      	movs	r0, r5
 8016f02:	00db      	lsls	r3, r3, #3
 8016f04:	189b      	adds	r3, r3, r2
 8016f06:	0031      	movs	r1, r6
 8016f08:	681a      	ldr	r2, [r3, #0]
 8016f0a:	685b      	ldr	r3, [r3, #4]
 8016f0c:	f7eb f8ac 	bl	8002068 <__aeabi_dmul>
 8016f10:	0005      	movs	r5, r0
 8016f12:	000e      	movs	r6, r1
 8016f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f16:	1064      	asrs	r4, r4, #1
 8016f18:	3301      	adds	r3, #1
 8016f1a:	9310      	str	r3, [sp, #64]	; 0x40
 8016f1c:	2c00      	cmp	r4, #0
 8016f1e:	d1e7      	bne.n	8016ef0 <_dtoa_r+0x2c0>
 8016f20:	9806      	ldr	r0, [sp, #24]
 8016f22:	9907      	ldr	r1, [sp, #28]
 8016f24:	002a      	movs	r2, r5
 8016f26:	0033      	movs	r3, r6
 8016f28:	f7ea fc94 	bl	8001854 <__aeabi_ddiv>
 8016f2c:	9006      	str	r0, [sp, #24]
 8016f2e:	9107      	str	r1, [sp, #28]
 8016f30:	e043      	b.n	8016fba <_dtoa_r+0x38a>
 8016f32:	46c0      	nop			; (mov r8, r8)
 8016f34:	7ff00000 	.word	0x7ff00000
 8016f38:	0000270f 	.word	0x0000270f
 8016f3c:	0801bc46 	.word	0x0801bc46
 8016f40:	0801bc49 	.word	0x0801bc49
 8016f44:	0801bb1a 	.word	0x0801bb1a
 8016f48:	0801bb1b 	.word	0x0801bb1b
 8016f4c:	3ff00000 	.word	0x3ff00000
 8016f50:	fffffc01 	.word	0xfffffc01
 8016f54:	3ff80000 	.word	0x3ff80000
 8016f58:	636f4361 	.word	0x636f4361
 8016f5c:	3fd287a7 	.word	0x3fd287a7
 8016f60:	8b60c8b3 	.word	0x8b60c8b3
 8016f64:	3fc68a28 	.word	0x3fc68a28
 8016f68:	509f79fb 	.word	0x509f79fb
 8016f6c:	3fd34413 	.word	0x3fd34413
 8016f70:	0801bc78 	.word	0x0801bc78
 8016f74:	00000432 	.word	0x00000432
 8016f78:	00000412 	.word	0x00000412
 8016f7c:	fe100000 	.word	0xfe100000
 8016f80:	0801bc50 	.word	0x0801bc50
 8016f84:	2302      	movs	r3, #2
 8016f86:	930e      	str	r3, [sp, #56]	; 0x38
 8016f88:	2f00      	cmp	r7, #0
 8016f8a:	d016      	beq.n	8016fba <_dtoa_r+0x38a>
 8016f8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016f8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016f90:	427c      	negs	r4, r7
 8016f92:	330d      	adds	r3, #13
 8016f94:	4023      	ands	r3, r4
 8016f96:	4acf      	ldr	r2, [pc, #828]	; (80172d4 <_dtoa_r+0x6a4>)
 8016f98:	00db      	lsls	r3, r3, #3
 8016f9a:	18d3      	adds	r3, r2, r3
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	685b      	ldr	r3, [r3, #4]
 8016fa0:	f7eb f862 	bl	8002068 <__aeabi_dmul>
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	2601      	movs	r6, #1
 8016fa8:	001d      	movs	r5, r3
 8016faa:	9006      	str	r0, [sp, #24]
 8016fac:	9107      	str	r1, [sp, #28]
 8016fae:	1124      	asrs	r4, r4, #4
 8016fb0:	2c00      	cmp	r4, #0
 8016fb2:	d000      	beq.n	8016fb6 <_dtoa_r+0x386>
 8016fb4:	e08c      	b.n	80170d0 <_dtoa_r+0x4a0>
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d1b8      	bne.n	8016f2c <_dtoa_r+0x2fc>
 8016fba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d100      	bne.n	8016fc2 <_dtoa_r+0x392>
 8016fc0:	e096      	b.n	80170f0 <_dtoa_r+0x4c0>
 8016fc2:	9c06      	ldr	r4, [sp, #24]
 8016fc4:	9d07      	ldr	r5, [sp, #28]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	4bc3      	ldr	r3, [pc, #780]	; (80172d8 <_dtoa_r+0x6a8>)
 8016fca:	0020      	movs	r0, r4
 8016fcc:	0029      	movs	r1, r5
 8016fce:	f7e9 fa4b 	bl	8000468 <__aeabi_dcmplt>
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	d100      	bne.n	8016fd8 <_dtoa_r+0x3a8>
 8016fd6:	e08b      	b.n	80170f0 <_dtoa_r+0x4c0>
 8016fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d100      	bne.n	8016fe0 <_dtoa_r+0x3b0>
 8016fde:	e087      	b.n	80170f0 <_dtoa_r+0x4c0>
 8016fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	dd41      	ble.n	801706a <_dtoa_r+0x43a>
 8016fe6:	4bbd      	ldr	r3, [pc, #756]	; (80172dc <_dtoa_r+0x6ac>)
 8016fe8:	2200      	movs	r2, #0
 8016fea:	0020      	movs	r0, r4
 8016fec:	0029      	movs	r1, r5
 8016fee:	f7eb f83b 	bl	8002068 <__aeabi_dmul>
 8016ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ff4:	9006      	str	r0, [sp, #24]
 8016ff6:	9107      	str	r1, [sp, #28]
 8016ff8:	3301      	adds	r3, #1
 8016ffa:	930e      	str	r3, [sp, #56]	; 0x38
 8016ffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ffe:	1e7e      	subs	r6, r7, #1
 8017000:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017002:	9310      	str	r3, [sp, #64]	; 0x40
 8017004:	f7eb fe3c 	bl	8002c80 <__aeabi_i2d>
 8017008:	9a06      	ldr	r2, [sp, #24]
 801700a:	9b07      	ldr	r3, [sp, #28]
 801700c:	f7eb f82c 	bl	8002068 <__aeabi_dmul>
 8017010:	2200      	movs	r2, #0
 8017012:	4bb3      	ldr	r3, [pc, #716]	; (80172e0 <_dtoa_r+0x6b0>)
 8017014:	f7ea f902 	bl	800121c <__aeabi_dadd>
 8017018:	4ab2      	ldr	r2, [pc, #712]	; (80172e4 <_dtoa_r+0x6b4>)
 801701a:	900e      	str	r0, [sp, #56]	; 0x38
 801701c:	910f      	str	r1, [sp, #60]	; 0x3c
 801701e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017020:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017022:	4694      	mov	ip, r2
 8017024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017026:	4463      	add	r3, ip
 8017028:	9315      	str	r3, [sp, #84]	; 0x54
 801702a:	001d      	movs	r5, r3
 801702c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801702e:	2b00      	cmp	r3, #0
 8017030:	d161      	bne.n	80170f6 <_dtoa_r+0x4c6>
 8017032:	9806      	ldr	r0, [sp, #24]
 8017034:	9907      	ldr	r1, [sp, #28]
 8017036:	2200      	movs	r2, #0
 8017038:	4bab      	ldr	r3, [pc, #684]	; (80172e8 <_dtoa_r+0x6b8>)
 801703a:	f7eb fa87 	bl	800254c <__aeabi_dsub>
 801703e:	0022      	movs	r2, r4
 8017040:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017042:	9006      	str	r0, [sp, #24]
 8017044:	9107      	str	r1, [sp, #28]
 8017046:	f7e9 fa23 	bl	8000490 <__aeabi_dcmpgt>
 801704a:	2800      	cmp	r0, #0
 801704c:	d000      	beq.n	8017050 <_dtoa_r+0x420>
 801704e:	e2aa      	b.n	80175a6 <_dtoa_r+0x976>
 8017050:	48a6      	ldr	r0, [pc, #664]	; (80172ec <_dtoa_r+0x6bc>)
 8017052:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017054:	4684      	mov	ip, r0
 8017056:	4461      	add	r1, ip
 8017058:	000b      	movs	r3, r1
 801705a:	9806      	ldr	r0, [sp, #24]
 801705c:	9907      	ldr	r1, [sp, #28]
 801705e:	0022      	movs	r2, r4
 8017060:	f7e9 fa02 	bl	8000468 <__aeabi_dcmplt>
 8017064:	2800      	cmp	r0, #0
 8017066:	d000      	beq.n	801706a <_dtoa_r+0x43a>
 8017068:	e297      	b.n	801759a <_dtoa_r+0x96a>
 801706a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801706c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801706e:	9306      	str	r3, [sp, #24]
 8017070:	9407      	str	r4, [sp, #28]
 8017072:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017074:	2b00      	cmp	r3, #0
 8017076:	da00      	bge.n	801707a <_dtoa_r+0x44a>
 8017078:	e15e      	b.n	8017338 <_dtoa_r+0x708>
 801707a:	2f0e      	cmp	r7, #14
 801707c:	dd00      	ble.n	8017080 <_dtoa_r+0x450>
 801707e:	e15b      	b.n	8017338 <_dtoa_r+0x708>
 8017080:	4b94      	ldr	r3, [pc, #592]	; (80172d4 <_dtoa_r+0x6a4>)
 8017082:	00fa      	lsls	r2, r7, #3
 8017084:	189b      	adds	r3, r3, r2
 8017086:	685c      	ldr	r4, [r3, #4]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	9304      	str	r3, [sp, #16]
 801708c:	9405      	str	r4, [sp, #20]
 801708e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017090:	2b00      	cmp	r3, #0
 8017092:	db00      	blt.n	8017096 <_dtoa_r+0x466>
 8017094:	e0da      	b.n	801724c <_dtoa_r+0x61c>
 8017096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017098:	2b00      	cmp	r3, #0
 801709a:	dd00      	ble.n	801709e <_dtoa_r+0x46e>
 801709c:	e0d6      	b.n	801724c <_dtoa_r+0x61c>
 801709e:	d000      	beq.n	80170a2 <_dtoa_r+0x472>
 80170a0:	e27f      	b.n	80175a2 <_dtoa_r+0x972>
 80170a2:	9804      	ldr	r0, [sp, #16]
 80170a4:	9905      	ldr	r1, [sp, #20]
 80170a6:	2200      	movs	r2, #0
 80170a8:	4b8f      	ldr	r3, [pc, #572]	; (80172e8 <_dtoa_r+0x6b8>)
 80170aa:	f7ea ffdd 	bl	8002068 <__aeabi_dmul>
 80170ae:	9a06      	ldr	r2, [sp, #24]
 80170b0:	9b07      	ldr	r3, [sp, #28]
 80170b2:	f7e9 f9f7 	bl	80004a4 <__aeabi_dcmpge>
 80170b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170b8:	9304      	str	r3, [sp, #16]
 80170ba:	001e      	movs	r6, r3
 80170bc:	2800      	cmp	r0, #0
 80170be:	d000      	beq.n	80170c2 <_dtoa_r+0x492>
 80170c0:	e251      	b.n	8017566 <_dtoa_r+0x936>
 80170c2:	9b08      	ldr	r3, [sp, #32]
 80170c4:	9a08      	ldr	r2, [sp, #32]
 80170c6:	1c5d      	adds	r5, r3, #1
 80170c8:	2331      	movs	r3, #49	; 0x31
 80170ca:	3701      	adds	r7, #1
 80170cc:	7013      	strb	r3, [r2, #0]
 80170ce:	e24d      	b.n	801756c <_dtoa_r+0x93c>
 80170d0:	4234      	tst	r4, r6
 80170d2:	d00a      	beq.n	80170ea <_dtoa_r+0x4ba>
 80170d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170d6:	4a86      	ldr	r2, [pc, #536]	; (80172f0 <_dtoa_r+0x6c0>)
 80170d8:	3301      	adds	r3, #1
 80170da:	930e      	str	r3, [sp, #56]	; 0x38
 80170dc:	00eb      	lsls	r3, r5, #3
 80170de:	189b      	adds	r3, r3, r2
 80170e0:	681a      	ldr	r2, [r3, #0]
 80170e2:	685b      	ldr	r3, [r3, #4]
 80170e4:	f7ea ffc0 	bl	8002068 <__aeabi_dmul>
 80170e8:	0033      	movs	r3, r6
 80170ea:	1064      	asrs	r4, r4, #1
 80170ec:	3501      	adds	r5, #1
 80170ee:	e75f      	b.n	8016fb0 <_dtoa_r+0x380>
 80170f0:	003e      	movs	r6, r7
 80170f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170f4:	e784      	b.n	8017000 <_dtoa_r+0x3d0>
 80170f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170f8:	1e5a      	subs	r2, r3, #1
 80170fa:	4b76      	ldr	r3, [pc, #472]	; (80172d4 <_dtoa_r+0x6a4>)
 80170fc:	00d2      	lsls	r2, r2, #3
 80170fe:	189b      	adds	r3, r3, r2
 8017100:	6818      	ldr	r0, [r3, #0]
 8017102:	6859      	ldr	r1, [r3, #4]
 8017104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017106:	2b00      	cmp	r3, #0
 8017108:	d04b      	beq.n	80171a2 <_dtoa_r+0x572>
 801710a:	0002      	movs	r2, r0
 801710c:	000b      	movs	r3, r1
 801710e:	2000      	movs	r0, #0
 8017110:	4978      	ldr	r1, [pc, #480]	; (80172f4 <_dtoa_r+0x6c4>)
 8017112:	f7ea fb9f 	bl	8001854 <__aeabi_ddiv>
 8017116:	002b      	movs	r3, r5
 8017118:	0022      	movs	r2, r4
 801711a:	f7eb fa17 	bl	800254c <__aeabi_dsub>
 801711e:	9b08      	ldr	r3, [sp, #32]
 8017120:	900e      	str	r0, [sp, #56]	; 0x38
 8017122:	910f      	str	r1, [sp, #60]	; 0x3c
 8017124:	9315      	str	r3, [sp, #84]	; 0x54
 8017126:	9806      	ldr	r0, [sp, #24]
 8017128:	9907      	ldr	r1, [sp, #28]
 801712a:	f7eb fd73 	bl	8002c14 <__aeabi_d2iz>
 801712e:	0004      	movs	r4, r0
 8017130:	f7eb fda6 	bl	8002c80 <__aeabi_i2d>
 8017134:	0002      	movs	r2, r0
 8017136:	000b      	movs	r3, r1
 8017138:	9806      	ldr	r0, [sp, #24]
 801713a:	9907      	ldr	r1, [sp, #28]
 801713c:	f7eb fa06 	bl	800254c <__aeabi_dsub>
 8017140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017142:	3430      	adds	r4, #48	; 0x30
 8017144:	1c5d      	adds	r5, r3, #1
 8017146:	701c      	strb	r4, [r3, #0]
 8017148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801714a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801714c:	9006      	str	r0, [sp, #24]
 801714e:	9107      	str	r1, [sp, #28]
 8017150:	f7e9 f98a 	bl	8000468 <__aeabi_dcmplt>
 8017154:	2800      	cmp	r0, #0
 8017156:	d16c      	bne.n	8017232 <_dtoa_r+0x602>
 8017158:	9a06      	ldr	r2, [sp, #24]
 801715a:	9b07      	ldr	r3, [sp, #28]
 801715c:	2000      	movs	r0, #0
 801715e:	495e      	ldr	r1, [pc, #376]	; (80172d8 <_dtoa_r+0x6a8>)
 8017160:	f7eb f9f4 	bl	800254c <__aeabi_dsub>
 8017164:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017168:	f7e9 f97e 	bl	8000468 <__aeabi_dcmplt>
 801716c:	2800      	cmp	r0, #0
 801716e:	d000      	beq.n	8017172 <_dtoa_r+0x542>
 8017170:	e0c3      	b.n	80172fa <_dtoa_r+0x6ca>
 8017172:	9b08      	ldr	r3, [sp, #32]
 8017174:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017176:	1aeb      	subs	r3, r5, r3
 8017178:	429a      	cmp	r2, r3
 801717a:	dc00      	bgt.n	801717e <_dtoa_r+0x54e>
 801717c:	e775      	b.n	801706a <_dtoa_r+0x43a>
 801717e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017180:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017182:	2200      	movs	r2, #0
 8017184:	4b55      	ldr	r3, [pc, #340]	; (80172dc <_dtoa_r+0x6ac>)
 8017186:	f7ea ff6f 	bl	8002068 <__aeabi_dmul>
 801718a:	2200      	movs	r2, #0
 801718c:	900e      	str	r0, [sp, #56]	; 0x38
 801718e:	910f      	str	r1, [sp, #60]	; 0x3c
 8017190:	9806      	ldr	r0, [sp, #24]
 8017192:	9907      	ldr	r1, [sp, #28]
 8017194:	4b51      	ldr	r3, [pc, #324]	; (80172dc <_dtoa_r+0x6ac>)
 8017196:	f7ea ff67 	bl	8002068 <__aeabi_dmul>
 801719a:	9515      	str	r5, [sp, #84]	; 0x54
 801719c:	9006      	str	r0, [sp, #24]
 801719e:	9107      	str	r1, [sp, #28]
 80171a0:	e7c1      	b.n	8017126 <_dtoa_r+0x4f6>
 80171a2:	0022      	movs	r2, r4
 80171a4:	002b      	movs	r3, r5
 80171a6:	f7ea ff5f 	bl	8002068 <__aeabi_dmul>
 80171aa:	9c08      	ldr	r4, [sp, #32]
 80171ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80171ae:	0023      	movs	r3, r4
 80171b0:	4694      	mov	ip, r2
 80171b2:	900e      	str	r0, [sp, #56]	; 0x38
 80171b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80171b6:	4463      	add	r3, ip
 80171b8:	9315      	str	r3, [sp, #84]	; 0x54
 80171ba:	9806      	ldr	r0, [sp, #24]
 80171bc:	9907      	ldr	r1, [sp, #28]
 80171be:	f7eb fd29 	bl	8002c14 <__aeabi_d2iz>
 80171c2:	0005      	movs	r5, r0
 80171c4:	f7eb fd5c 	bl	8002c80 <__aeabi_i2d>
 80171c8:	000b      	movs	r3, r1
 80171ca:	0002      	movs	r2, r0
 80171cc:	9806      	ldr	r0, [sp, #24]
 80171ce:	9907      	ldr	r1, [sp, #28]
 80171d0:	f7eb f9bc 	bl	800254c <__aeabi_dsub>
 80171d4:	3530      	adds	r5, #48	; 0x30
 80171d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171d8:	7025      	strb	r5, [r4, #0]
 80171da:	3401      	adds	r4, #1
 80171dc:	9006      	str	r0, [sp, #24]
 80171de:	9107      	str	r1, [sp, #28]
 80171e0:	42a3      	cmp	r3, r4
 80171e2:	d12a      	bne.n	801723a <_dtoa_r+0x60a>
 80171e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80171e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80171e8:	9a08      	ldr	r2, [sp, #32]
 80171ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80171ec:	4694      	mov	ip, r2
 80171ee:	4463      	add	r3, ip
 80171f0:	2200      	movs	r2, #0
 80171f2:	001d      	movs	r5, r3
 80171f4:	4b3f      	ldr	r3, [pc, #252]	; (80172f4 <_dtoa_r+0x6c4>)
 80171f6:	f7ea f811 	bl	800121c <__aeabi_dadd>
 80171fa:	0002      	movs	r2, r0
 80171fc:	000b      	movs	r3, r1
 80171fe:	9806      	ldr	r0, [sp, #24]
 8017200:	9907      	ldr	r1, [sp, #28]
 8017202:	f7e9 f945 	bl	8000490 <__aeabi_dcmpgt>
 8017206:	2800      	cmp	r0, #0
 8017208:	d000      	beq.n	801720c <_dtoa_r+0x5dc>
 801720a:	e076      	b.n	80172fa <_dtoa_r+0x6ca>
 801720c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801720e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017210:	2000      	movs	r0, #0
 8017212:	4938      	ldr	r1, [pc, #224]	; (80172f4 <_dtoa_r+0x6c4>)
 8017214:	f7eb f99a 	bl	800254c <__aeabi_dsub>
 8017218:	0002      	movs	r2, r0
 801721a:	000b      	movs	r3, r1
 801721c:	9806      	ldr	r0, [sp, #24]
 801721e:	9907      	ldr	r1, [sp, #28]
 8017220:	f7e9 f922 	bl	8000468 <__aeabi_dcmplt>
 8017224:	2800      	cmp	r0, #0
 8017226:	d100      	bne.n	801722a <_dtoa_r+0x5fa>
 8017228:	e71f      	b.n	801706a <_dtoa_r+0x43a>
 801722a:	1e6b      	subs	r3, r5, #1
 801722c:	781a      	ldrb	r2, [r3, #0]
 801722e:	2a30      	cmp	r2, #48	; 0x30
 8017230:	d001      	beq.n	8017236 <_dtoa_r+0x606>
 8017232:	0037      	movs	r7, r6
 8017234:	e03f      	b.n	80172b6 <_dtoa_r+0x686>
 8017236:	001d      	movs	r5, r3
 8017238:	e7f7      	b.n	801722a <_dtoa_r+0x5fa>
 801723a:	9806      	ldr	r0, [sp, #24]
 801723c:	9907      	ldr	r1, [sp, #28]
 801723e:	2200      	movs	r2, #0
 8017240:	4b26      	ldr	r3, [pc, #152]	; (80172dc <_dtoa_r+0x6ac>)
 8017242:	f7ea ff11 	bl	8002068 <__aeabi_dmul>
 8017246:	9006      	str	r0, [sp, #24]
 8017248:	9107      	str	r1, [sp, #28]
 801724a:	e7b6      	b.n	80171ba <_dtoa_r+0x58a>
 801724c:	9e08      	ldr	r6, [sp, #32]
 801724e:	9a04      	ldr	r2, [sp, #16]
 8017250:	9b05      	ldr	r3, [sp, #20]
 8017252:	9806      	ldr	r0, [sp, #24]
 8017254:	9907      	ldr	r1, [sp, #28]
 8017256:	f7ea fafd 	bl	8001854 <__aeabi_ddiv>
 801725a:	f7eb fcdb 	bl	8002c14 <__aeabi_d2iz>
 801725e:	0004      	movs	r4, r0
 8017260:	f7eb fd0e 	bl	8002c80 <__aeabi_i2d>
 8017264:	9a04      	ldr	r2, [sp, #16]
 8017266:	9b05      	ldr	r3, [sp, #20]
 8017268:	f7ea fefe 	bl	8002068 <__aeabi_dmul>
 801726c:	0002      	movs	r2, r0
 801726e:	000b      	movs	r3, r1
 8017270:	9806      	ldr	r0, [sp, #24]
 8017272:	9907      	ldr	r1, [sp, #28]
 8017274:	f7eb f96a 	bl	800254c <__aeabi_dsub>
 8017278:	0023      	movs	r3, r4
 801727a:	3330      	adds	r3, #48	; 0x30
 801727c:	7033      	strb	r3, [r6, #0]
 801727e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017280:	9b08      	ldr	r3, [sp, #32]
 8017282:	1c75      	adds	r5, r6, #1
 8017284:	1aeb      	subs	r3, r5, r3
 8017286:	429a      	cmp	r2, r3
 8017288:	d148      	bne.n	801731c <_dtoa_r+0x6ec>
 801728a:	0002      	movs	r2, r0
 801728c:	000b      	movs	r3, r1
 801728e:	f7e9 ffc5 	bl	800121c <__aeabi_dadd>
 8017292:	9a04      	ldr	r2, [sp, #16]
 8017294:	9b05      	ldr	r3, [sp, #20]
 8017296:	9006      	str	r0, [sp, #24]
 8017298:	9107      	str	r1, [sp, #28]
 801729a:	f7e9 f8f9 	bl	8000490 <__aeabi_dcmpgt>
 801729e:	2800      	cmp	r0, #0
 80172a0:	d12a      	bne.n	80172f8 <_dtoa_r+0x6c8>
 80172a2:	9a04      	ldr	r2, [sp, #16]
 80172a4:	9b05      	ldr	r3, [sp, #20]
 80172a6:	9806      	ldr	r0, [sp, #24]
 80172a8:	9907      	ldr	r1, [sp, #28]
 80172aa:	f7e9 f8d7 	bl	800045c <__aeabi_dcmpeq>
 80172ae:	2800      	cmp	r0, #0
 80172b0:	d001      	beq.n	80172b6 <_dtoa_r+0x686>
 80172b2:	07e3      	lsls	r3, r4, #31
 80172b4:	d420      	bmi.n	80172f8 <_dtoa_r+0x6c8>
 80172b6:	9903      	ldr	r1, [sp, #12]
 80172b8:	9802      	ldr	r0, [sp, #8]
 80172ba:	f000 ff35 	bl	8018128 <_Bfree>
 80172be:	2300      	movs	r3, #0
 80172c0:	702b      	strb	r3, [r5, #0]
 80172c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80172c4:	3701      	adds	r7, #1
 80172c6:	601f      	str	r7, [r3, #0]
 80172c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d100      	bne.n	80172d0 <_dtoa_r+0x6a0>
 80172ce:	e4e4      	b.n	8016c9a <_dtoa_r+0x6a>
 80172d0:	601d      	str	r5, [r3, #0]
 80172d2:	e4e2      	b.n	8016c9a <_dtoa_r+0x6a>
 80172d4:	0801bc78 	.word	0x0801bc78
 80172d8:	3ff00000 	.word	0x3ff00000
 80172dc:	40240000 	.word	0x40240000
 80172e0:	401c0000 	.word	0x401c0000
 80172e4:	fcc00000 	.word	0xfcc00000
 80172e8:	40140000 	.word	0x40140000
 80172ec:	7cc00000 	.word	0x7cc00000
 80172f0:	0801bc50 	.word	0x0801bc50
 80172f4:	3fe00000 	.word	0x3fe00000
 80172f8:	003e      	movs	r6, r7
 80172fa:	1e6b      	subs	r3, r5, #1
 80172fc:	781a      	ldrb	r2, [r3, #0]
 80172fe:	2a39      	cmp	r2, #57	; 0x39
 8017300:	d106      	bne.n	8017310 <_dtoa_r+0x6e0>
 8017302:	9a08      	ldr	r2, [sp, #32]
 8017304:	429a      	cmp	r2, r3
 8017306:	d107      	bne.n	8017318 <_dtoa_r+0x6e8>
 8017308:	2330      	movs	r3, #48	; 0x30
 801730a:	7013      	strb	r3, [r2, #0]
 801730c:	0013      	movs	r3, r2
 801730e:	3601      	adds	r6, #1
 8017310:	781a      	ldrb	r2, [r3, #0]
 8017312:	3201      	adds	r2, #1
 8017314:	701a      	strb	r2, [r3, #0]
 8017316:	e78c      	b.n	8017232 <_dtoa_r+0x602>
 8017318:	001d      	movs	r5, r3
 801731a:	e7ee      	b.n	80172fa <_dtoa_r+0x6ca>
 801731c:	2200      	movs	r2, #0
 801731e:	4ba4      	ldr	r3, [pc, #656]	; (80175b0 <_dtoa_r+0x980>)
 8017320:	f7ea fea2 	bl	8002068 <__aeabi_dmul>
 8017324:	2200      	movs	r2, #0
 8017326:	2300      	movs	r3, #0
 8017328:	9006      	str	r0, [sp, #24]
 801732a:	9107      	str	r1, [sp, #28]
 801732c:	002e      	movs	r6, r5
 801732e:	f7e9 f895 	bl	800045c <__aeabi_dcmpeq>
 8017332:	2800      	cmp	r0, #0
 8017334:	d08b      	beq.n	801724e <_dtoa_r+0x61e>
 8017336:	e7be      	b.n	80172b6 <_dtoa_r+0x686>
 8017338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801733a:	2a00      	cmp	r2, #0
 801733c:	d100      	bne.n	8017340 <_dtoa_r+0x710>
 801733e:	e0da      	b.n	80174f6 <_dtoa_r+0x8c6>
 8017340:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017342:	2a01      	cmp	r2, #1
 8017344:	dd00      	ble.n	8017348 <_dtoa_r+0x718>
 8017346:	e0bd      	b.n	80174c4 <_dtoa_r+0x894>
 8017348:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801734a:	2a00      	cmp	r2, #0
 801734c:	d100      	bne.n	8017350 <_dtoa_r+0x720>
 801734e:	e0b5      	b.n	80174bc <_dtoa_r+0x88c>
 8017350:	4a98      	ldr	r2, [pc, #608]	; (80175b4 <_dtoa_r+0x984>)
 8017352:	189b      	adds	r3, r3, r2
 8017354:	9d04      	ldr	r5, [sp, #16]
 8017356:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801735a:	2101      	movs	r1, #1
 801735c:	18d2      	adds	r2, r2, r3
 801735e:	920a      	str	r2, [sp, #40]	; 0x28
 8017360:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017362:	9802      	ldr	r0, [sp, #8]
 8017364:	18d3      	adds	r3, r2, r3
 8017366:	930b      	str	r3, [sp, #44]	; 0x2c
 8017368:	f000 ffad 	bl	80182c6 <__i2b>
 801736c:	0006      	movs	r6, r0
 801736e:	2c00      	cmp	r4, #0
 8017370:	dd0e      	ble.n	8017390 <_dtoa_r+0x760>
 8017372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017374:	2b00      	cmp	r3, #0
 8017376:	dd0b      	ble.n	8017390 <_dtoa_r+0x760>
 8017378:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801737a:	0023      	movs	r3, r4
 801737c:	4294      	cmp	r4, r2
 801737e:	dd00      	ble.n	8017382 <_dtoa_r+0x752>
 8017380:	0013      	movs	r3, r2
 8017382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017384:	1ae4      	subs	r4, r4, r3
 8017386:	1ad2      	subs	r2, r2, r3
 8017388:	920a      	str	r2, [sp, #40]	; 0x28
 801738a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801738c:	1ad3      	subs	r3, r2, r3
 801738e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017390:	9b04      	ldr	r3, [sp, #16]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d01f      	beq.n	80173d6 <_dtoa_r+0x7a6>
 8017396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017398:	2b00      	cmp	r3, #0
 801739a:	d100      	bne.n	801739e <_dtoa_r+0x76e>
 801739c:	e0af      	b.n	80174fe <_dtoa_r+0x8ce>
 801739e:	2d00      	cmp	r5, #0
 80173a0:	d011      	beq.n	80173c6 <_dtoa_r+0x796>
 80173a2:	0031      	movs	r1, r6
 80173a4:	002a      	movs	r2, r5
 80173a6:	9802      	ldr	r0, [sp, #8]
 80173a8:	f001 f826 	bl	80183f8 <__pow5mult>
 80173ac:	9a03      	ldr	r2, [sp, #12]
 80173ae:	0001      	movs	r1, r0
 80173b0:	0006      	movs	r6, r0
 80173b2:	9802      	ldr	r0, [sp, #8]
 80173b4:	f000 ff90 	bl	80182d8 <__multiply>
 80173b8:	9903      	ldr	r1, [sp, #12]
 80173ba:	9010      	str	r0, [sp, #64]	; 0x40
 80173bc:	9802      	ldr	r0, [sp, #8]
 80173be:	f000 feb3 	bl	8018128 <_Bfree>
 80173c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80173c4:	9303      	str	r3, [sp, #12]
 80173c6:	9b04      	ldr	r3, [sp, #16]
 80173c8:	1b5a      	subs	r2, r3, r5
 80173ca:	d004      	beq.n	80173d6 <_dtoa_r+0x7a6>
 80173cc:	9903      	ldr	r1, [sp, #12]
 80173ce:	9802      	ldr	r0, [sp, #8]
 80173d0:	f001 f812 	bl	80183f8 <__pow5mult>
 80173d4:	9003      	str	r0, [sp, #12]
 80173d6:	2101      	movs	r1, #1
 80173d8:	9802      	ldr	r0, [sp, #8]
 80173da:	f000 ff74 	bl	80182c6 <__i2b>
 80173de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80173e0:	9004      	str	r0, [sp, #16]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d100      	bne.n	80173e8 <_dtoa_r+0x7b8>
 80173e6:	e1e3      	b.n	80177b0 <_dtoa_r+0xb80>
 80173e8:	001a      	movs	r2, r3
 80173ea:	0001      	movs	r1, r0
 80173ec:	9802      	ldr	r0, [sp, #8]
 80173ee:	f001 f803 	bl	80183f8 <__pow5mult>
 80173f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80173f4:	9004      	str	r0, [sp, #16]
 80173f6:	2b01      	cmp	r3, #1
 80173f8:	dd00      	ble.n	80173fc <_dtoa_r+0x7cc>
 80173fa:	e082      	b.n	8017502 <_dtoa_r+0x8d2>
 80173fc:	2500      	movs	r5, #0
 80173fe:	9b06      	ldr	r3, [sp, #24]
 8017400:	42ab      	cmp	r3, r5
 8017402:	d10e      	bne.n	8017422 <_dtoa_r+0x7f2>
 8017404:	9b07      	ldr	r3, [sp, #28]
 8017406:	031b      	lsls	r3, r3, #12
 8017408:	42ab      	cmp	r3, r5
 801740a:	d10a      	bne.n	8017422 <_dtoa_r+0x7f2>
 801740c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801740e:	9a07      	ldr	r2, [sp, #28]
 8017410:	4213      	tst	r3, r2
 8017412:	d006      	beq.n	8017422 <_dtoa_r+0x7f2>
 8017414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017416:	3501      	adds	r5, #1
 8017418:	3301      	adds	r3, #1
 801741a:	930a      	str	r3, [sp, #40]	; 0x28
 801741c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801741e:	3301      	adds	r3, #1
 8017420:	930b      	str	r3, [sp, #44]	; 0x2c
 8017422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017424:	2001      	movs	r0, #1
 8017426:	2b00      	cmp	r3, #0
 8017428:	d16c      	bne.n	8017504 <_dtoa_r+0x8d4>
 801742a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801742c:	1818      	adds	r0, r3, r0
 801742e:	231f      	movs	r3, #31
 8017430:	4018      	ands	r0, r3
 8017432:	d07e      	beq.n	8017532 <_dtoa_r+0x902>
 8017434:	3301      	adds	r3, #1
 8017436:	1a1b      	subs	r3, r3, r0
 8017438:	2b04      	cmp	r3, #4
 801743a:	dd70      	ble.n	801751e <_dtoa_r+0x8ee>
 801743c:	231c      	movs	r3, #28
 801743e:	1a18      	subs	r0, r3, r0
 8017440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017442:	1824      	adds	r4, r4, r0
 8017444:	181b      	adds	r3, r3, r0
 8017446:	930a      	str	r3, [sp, #40]	; 0x28
 8017448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801744a:	181b      	adds	r3, r3, r0
 801744c:	930b      	str	r3, [sp, #44]	; 0x2c
 801744e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017450:	2b00      	cmp	r3, #0
 8017452:	dd05      	ble.n	8017460 <_dtoa_r+0x830>
 8017454:	001a      	movs	r2, r3
 8017456:	9903      	ldr	r1, [sp, #12]
 8017458:	9802      	ldr	r0, [sp, #8]
 801745a:	f001 f80f 	bl	801847c <__lshift>
 801745e:	9003      	str	r0, [sp, #12]
 8017460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017462:	2b00      	cmp	r3, #0
 8017464:	dd05      	ble.n	8017472 <_dtoa_r+0x842>
 8017466:	001a      	movs	r2, r3
 8017468:	9904      	ldr	r1, [sp, #16]
 801746a:	9802      	ldr	r0, [sp, #8]
 801746c:	f001 f806 	bl	801847c <__lshift>
 8017470:	9004      	str	r0, [sp, #16]
 8017472:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017474:	2b00      	cmp	r3, #0
 8017476:	d05e      	beq.n	8017536 <_dtoa_r+0x906>
 8017478:	9904      	ldr	r1, [sp, #16]
 801747a:	9803      	ldr	r0, [sp, #12]
 801747c:	f001 f850 	bl	8018520 <__mcmp>
 8017480:	2800      	cmp	r0, #0
 8017482:	da58      	bge.n	8017536 <_dtoa_r+0x906>
 8017484:	2300      	movs	r3, #0
 8017486:	220a      	movs	r2, #10
 8017488:	9903      	ldr	r1, [sp, #12]
 801748a:	9802      	ldr	r0, [sp, #8]
 801748c:	f000 fe56 	bl	801813c <__multadd>
 8017490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017492:	3f01      	subs	r7, #1
 8017494:	9003      	str	r0, [sp, #12]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d100      	bne.n	801749c <_dtoa_r+0x86c>
 801749a:	e190      	b.n	80177be <_dtoa_r+0xb8e>
 801749c:	2300      	movs	r3, #0
 801749e:	0031      	movs	r1, r6
 80174a0:	220a      	movs	r2, #10
 80174a2:	9802      	ldr	r0, [sp, #8]
 80174a4:	f000 fe4a 	bl	801813c <__multadd>
 80174a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174aa:	0006      	movs	r6, r0
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	dd00      	ble.n	80174b2 <_dtoa_r+0x882>
 80174b0:	e088      	b.n	80175c4 <_dtoa_r+0x994>
 80174b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174b4:	2b02      	cmp	r3, #2
 80174b6:	dc00      	bgt.n	80174ba <_dtoa_r+0x88a>
 80174b8:	e084      	b.n	80175c4 <_dtoa_r+0x994>
 80174ba:	e044      	b.n	8017546 <_dtoa_r+0x916>
 80174bc:	2336      	movs	r3, #54	; 0x36
 80174be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80174c0:	1a9b      	subs	r3, r3, r2
 80174c2:	e747      	b.n	8017354 <_dtoa_r+0x724>
 80174c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174c6:	1e5d      	subs	r5, r3, #1
 80174c8:	9b04      	ldr	r3, [sp, #16]
 80174ca:	42ab      	cmp	r3, r5
 80174cc:	db08      	blt.n	80174e0 <_dtoa_r+0x8b0>
 80174ce:	1b5d      	subs	r5, r3, r5
 80174d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	da0c      	bge.n	80174f0 <_dtoa_r+0x8c0>
 80174d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174da:	1a9c      	subs	r4, r3, r2
 80174dc:	2300      	movs	r3, #0
 80174de:	e73b      	b.n	8017358 <_dtoa_r+0x728>
 80174e0:	9b04      	ldr	r3, [sp, #16]
 80174e2:	9504      	str	r5, [sp, #16]
 80174e4:	1aea      	subs	r2, r5, r3
 80174e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80174e8:	2500      	movs	r5, #0
 80174ea:	189b      	adds	r3, r3, r2
 80174ec:	9311      	str	r3, [sp, #68]	; 0x44
 80174ee:	e7ef      	b.n	80174d0 <_dtoa_r+0x8a0>
 80174f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80174f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174f4:	e730      	b.n	8017358 <_dtoa_r+0x728>
 80174f6:	9d04      	ldr	r5, [sp, #16]
 80174f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80174fa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80174fc:	e737      	b.n	801736e <_dtoa_r+0x73e>
 80174fe:	9a04      	ldr	r2, [sp, #16]
 8017500:	e764      	b.n	80173cc <_dtoa_r+0x79c>
 8017502:	2500      	movs	r5, #0
 8017504:	9b04      	ldr	r3, [sp, #16]
 8017506:	9a04      	ldr	r2, [sp, #16]
 8017508:	691b      	ldr	r3, [r3, #16]
 801750a:	9310      	str	r3, [sp, #64]	; 0x40
 801750c:	3303      	adds	r3, #3
 801750e:	009b      	lsls	r3, r3, #2
 8017510:	18d3      	adds	r3, r2, r3
 8017512:	6858      	ldr	r0, [r3, #4]
 8017514:	f000 fe8e 	bl	8018234 <__hi0bits>
 8017518:	2320      	movs	r3, #32
 801751a:	1a18      	subs	r0, r3, r0
 801751c:	e785      	b.n	801742a <_dtoa_r+0x7fa>
 801751e:	2b04      	cmp	r3, #4
 8017520:	d095      	beq.n	801744e <_dtoa_r+0x81e>
 8017522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017524:	331c      	adds	r3, #28
 8017526:	18d2      	adds	r2, r2, r3
 8017528:	920a      	str	r2, [sp, #40]	; 0x28
 801752a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801752c:	18e4      	adds	r4, r4, r3
 801752e:	18d3      	adds	r3, r2, r3
 8017530:	e78c      	b.n	801744c <_dtoa_r+0x81c>
 8017532:	0003      	movs	r3, r0
 8017534:	e7f5      	b.n	8017522 <_dtoa_r+0x8f2>
 8017536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017538:	2b00      	cmp	r3, #0
 801753a:	dc3d      	bgt.n	80175b8 <_dtoa_r+0x988>
 801753c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801753e:	2b02      	cmp	r3, #2
 8017540:	dd3a      	ble.n	80175b8 <_dtoa_r+0x988>
 8017542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017544:	930c      	str	r3, [sp, #48]	; 0x30
 8017546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017548:	2b00      	cmp	r3, #0
 801754a:	d10c      	bne.n	8017566 <_dtoa_r+0x936>
 801754c:	9904      	ldr	r1, [sp, #16]
 801754e:	2205      	movs	r2, #5
 8017550:	9802      	ldr	r0, [sp, #8]
 8017552:	f000 fdf3 	bl	801813c <__multadd>
 8017556:	9004      	str	r0, [sp, #16]
 8017558:	0001      	movs	r1, r0
 801755a:	9803      	ldr	r0, [sp, #12]
 801755c:	f000 ffe0 	bl	8018520 <__mcmp>
 8017560:	2800      	cmp	r0, #0
 8017562:	dd00      	ble.n	8017566 <_dtoa_r+0x936>
 8017564:	e5ad      	b.n	80170c2 <_dtoa_r+0x492>
 8017566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017568:	9d08      	ldr	r5, [sp, #32]
 801756a:	43df      	mvns	r7, r3
 801756c:	2300      	movs	r3, #0
 801756e:	9309      	str	r3, [sp, #36]	; 0x24
 8017570:	9904      	ldr	r1, [sp, #16]
 8017572:	9802      	ldr	r0, [sp, #8]
 8017574:	f000 fdd8 	bl	8018128 <_Bfree>
 8017578:	2e00      	cmp	r6, #0
 801757a:	d100      	bne.n	801757e <_dtoa_r+0x94e>
 801757c:	e69b      	b.n	80172b6 <_dtoa_r+0x686>
 801757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017580:	2b00      	cmp	r3, #0
 8017582:	d005      	beq.n	8017590 <_dtoa_r+0x960>
 8017584:	42b3      	cmp	r3, r6
 8017586:	d003      	beq.n	8017590 <_dtoa_r+0x960>
 8017588:	0019      	movs	r1, r3
 801758a:	9802      	ldr	r0, [sp, #8]
 801758c:	f000 fdcc 	bl	8018128 <_Bfree>
 8017590:	0031      	movs	r1, r6
 8017592:	9802      	ldr	r0, [sp, #8]
 8017594:	f000 fdc8 	bl	8018128 <_Bfree>
 8017598:	e68d      	b.n	80172b6 <_dtoa_r+0x686>
 801759a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801759c:	9304      	str	r3, [sp, #16]
 801759e:	001e      	movs	r6, r3
 80175a0:	e7e1      	b.n	8017566 <_dtoa_r+0x936>
 80175a2:	2300      	movs	r3, #0
 80175a4:	e7fa      	b.n	801759c <_dtoa_r+0x96c>
 80175a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80175a8:	0037      	movs	r7, r6
 80175aa:	9304      	str	r3, [sp, #16]
 80175ac:	001e      	movs	r6, r3
 80175ae:	e588      	b.n	80170c2 <_dtoa_r+0x492>
 80175b0:	40240000 	.word	0x40240000
 80175b4:	00000433 	.word	0x00000433
 80175b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d100      	bne.n	80175c0 <_dtoa_r+0x990>
 80175be:	e0b2      	b.n	8017726 <_dtoa_r+0xaf6>
 80175c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175c2:	930c      	str	r3, [sp, #48]	; 0x30
 80175c4:	2c00      	cmp	r4, #0
 80175c6:	dd05      	ble.n	80175d4 <_dtoa_r+0x9a4>
 80175c8:	0031      	movs	r1, r6
 80175ca:	0022      	movs	r2, r4
 80175cc:	9802      	ldr	r0, [sp, #8]
 80175ce:	f000 ff55 	bl	801847c <__lshift>
 80175d2:	0006      	movs	r6, r0
 80175d4:	0030      	movs	r0, r6
 80175d6:	2d00      	cmp	r5, #0
 80175d8:	d011      	beq.n	80175fe <_dtoa_r+0x9ce>
 80175da:	6871      	ldr	r1, [r6, #4]
 80175dc:	9802      	ldr	r0, [sp, #8]
 80175de:	f000 fd7b 	bl	80180d8 <_Balloc>
 80175e2:	0031      	movs	r1, r6
 80175e4:	0004      	movs	r4, r0
 80175e6:	6933      	ldr	r3, [r6, #16]
 80175e8:	310c      	adds	r1, #12
 80175ea:	1c9a      	adds	r2, r3, #2
 80175ec:	0092      	lsls	r2, r2, #2
 80175ee:	300c      	adds	r0, #12
 80175f0:	f7fc fe59 	bl	80142a6 <memcpy>
 80175f4:	2201      	movs	r2, #1
 80175f6:	0021      	movs	r1, r4
 80175f8:	9802      	ldr	r0, [sp, #8]
 80175fa:	f000 ff3f 	bl	801847c <__lshift>
 80175fe:	9609      	str	r6, [sp, #36]	; 0x24
 8017600:	0006      	movs	r6, r0
 8017602:	9b08      	ldr	r3, [sp, #32]
 8017604:	930a      	str	r3, [sp, #40]	; 0x28
 8017606:	9904      	ldr	r1, [sp, #16]
 8017608:	9803      	ldr	r0, [sp, #12]
 801760a:	f7ff fa8b 	bl	8016b24 <quorem>
 801760e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017610:	900d      	str	r0, [sp, #52]	; 0x34
 8017612:	0004      	movs	r4, r0
 8017614:	9803      	ldr	r0, [sp, #12]
 8017616:	f000 ff83 	bl	8018520 <__mcmp>
 801761a:	0032      	movs	r2, r6
 801761c:	9010      	str	r0, [sp, #64]	; 0x40
 801761e:	9904      	ldr	r1, [sp, #16]
 8017620:	9802      	ldr	r0, [sp, #8]
 8017622:	f000 ff97 	bl	8018554 <__mdiff>
 8017626:	2301      	movs	r3, #1
 8017628:	930b      	str	r3, [sp, #44]	; 0x2c
 801762a:	68c3      	ldr	r3, [r0, #12]
 801762c:	3430      	adds	r4, #48	; 0x30
 801762e:	0005      	movs	r5, r0
 8017630:	2b00      	cmp	r3, #0
 8017632:	d104      	bne.n	801763e <_dtoa_r+0xa0e>
 8017634:	0001      	movs	r1, r0
 8017636:	9803      	ldr	r0, [sp, #12]
 8017638:	f000 ff72 	bl	8018520 <__mcmp>
 801763c:	900b      	str	r0, [sp, #44]	; 0x2c
 801763e:	0029      	movs	r1, r5
 8017640:	9802      	ldr	r0, [sp, #8]
 8017642:	f000 fd71 	bl	8018128 <_Bfree>
 8017646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017648:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801764a:	4313      	orrs	r3, r2
 801764c:	d10e      	bne.n	801766c <_dtoa_r+0xa3c>
 801764e:	9a06      	ldr	r2, [sp, #24]
 8017650:	3301      	adds	r3, #1
 8017652:	4213      	tst	r3, r2
 8017654:	d10a      	bne.n	801766c <_dtoa_r+0xa3c>
 8017656:	2c39      	cmp	r4, #57	; 0x39
 8017658:	d026      	beq.n	80176a8 <_dtoa_r+0xa78>
 801765a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801765c:	2b00      	cmp	r3, #0
 801765e:	dd01      	ble.n	8017664 <_dtoa_r+0xa34>
 8017660:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017662:	3431      	adds	r4, #49	; 0x31
 8017664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017666:	1c5d      	adds	r5, r3, #1
 8017668:	701c      	strb	r4, [r3, #0]
 801766a:	e781      	b.n	8017570 <_dtoa_r+0x940>
 801766c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801766e:	2b00      	cmp	r3, #0
 8017670:	db07      	blt.n	8017682 <_dtoa_r+0xa52>
 8017672:	001d      	movs	r5, r3
 8017674:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017676:	431d      	orrs	r5, r3
 8017678:	d122      	bne.n	80176c0 <_dtoa_r+0xa90>
 801767a:	2301      	movs	r3, #1
 801767c:	9a06      	ldr	r2, [sp, #24]
 801767e:	4213      	tst	r3, r2
 8017680:	d11e      	bne.n	80176c0 <_dtoa_r+0xa90>
 8017682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017684:	2b00      	cmp	r3, #0
 8017686:	dded      	ble.n	8017664 <_dtoa_r+0xa34>
 8017688:	9903      	ldr	r1, [sp, #12]
 801768a:	2201      	movs	r2, #1
 801768c:	9802      	ldr	r0, [sp, #8]
 801768e:	f000 fef5 	bl	801847c <__lshift>
 8017692:	9904      	ldr	r1, [sp, #16]
 8017694:	9003      	str	r0, [sp, #12]
 8017696:	f000 ff43 	bl	8018520 <__mcmp>
 801769a:	2800      	cmp	r0, #0
 801769c:	dc02      	bgt.n	80176a4 <_dtoa_r+0xa74>
 801769e:	d1e1      	bne.n	8017664 <_dtoa_r+0xa34>
 80176a0:	07e3      	lsls	r3, r4, #31
 80176a2:	d5df      	bpl.n	8017664 <_dtoa_r+0xa34>
 80176a4:	2c39      	cmp	r4, #57	; 0x39
 80176a6:	d1db      	bne.n	8017660 <_dtoa_r+0xa30>
 80176a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80176ac:	1c5d      	adds	r5, r3, #1
 80176ae:	2339      	movs	r3, #57	; 0x39
 80176b0:	7013      	strb	r3, [r2, #0]
 80176b2:	1e6b      	subs	r3, r5, #1
 80176b4:	781a      	ldrb	r2, [r3, #0]
 80176b6:	2a39      	cmp	r2, #57	; 0x39
 80176b8:	d067      	beq.n	801778a <_dtoa_r+0xb5a>
 80176ba:	3201      	adds	r2, #1
 80176bc:	701a      	strb	r2, [r3, #0]
 80176be:	e757      	b.n	8017570 <_dtoa_r+0x940>
 80176c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176c2:	1c5d      	adds	r5, r3, #1
 80176c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	dd04      	ble.n	80176d4 <_dtoa_r+0xaa4>
 80176ca:	2c39      	cmp	r4, #57	; 0x39
 80176cc:	d0ec      	beq.n	80176a8 <_dtoa_r+0xa78>
 80176ce:	3401      	adds	r4, #1
 80176d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176d2:	e7c9      	b.n	8017668 <_dtoa_r+0xa38>
 80176d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80176d8:	701c      	strb	r4, [r3, #0]
 80176da:	9b08      	ldr	r3, [sp, #32]
 80176dc:	1aeb      	subs	r3, r5, r3
 80176de:	4293      	cmp	r3, r2
 80176e0:	d03e      	beq.n	8017760 <_dtoa_r+0xb30>
 80176e2:	2300      	movs	r3, #0
 80176e4:	220a      	movs	r2, #10
 80176e6:	9903      	ldr	r1, [sp, #12]
 80176e8:	9802      	ldr	r0, [sp, #8]
 80176ea:	f000 fd27 	bl	801813c <__multadd>
 80176ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176f0:	9003      	str	r0, [sp, #12]
 80176f2:	42b3      	cmp	r3, r6
 80176f4:	d109      	bne.n	801770a <_dtoa_r+0xada>
 80176f6:	2300      	movs	r3, #0
 80176f8:	220a      	movs	r2, #10
 80176fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80176fc:	9802      	ldr	r0, [sp, #8]
 80176fe:	f000 fd1d 	bl	801813c <__multadd>
 8017702:	9009      	str	r0, [sp, #36]	; 0x24
 8017704:	0006      	movs	r6, r0
 8017706:	950a      	str	r5, [sp, #40]	; 0x28
 8017708:	e77d      	b.n	8017606 <_dtoa_r+0x9d6>
 801770a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801770c:	2300      	movs	r3, #0
 801770e:	220a      	movs	r2, #10
 8017710:	9802      	ldr	r0, [sp, #8]
 8017712:	f000 fd13 	bl	801813c <__multadd>
 8017716:	2300      	movs	r3, #0
 8017718:	9009      	str	r0, [sp, #36]	; 0x24
 801771a:	220a      	movs	r2, #10
 801771c:	0031      	movs	r1, r6
 801771e:	9802      	ldr	r0, [sp, #8]
 8017720:	f000 fd0c 	bl	801813c <__multadd>
 8017724:	e7ee      	b.n	8017704 <_dtoa_r+0xad4>
 8017726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017728:	930c      	str	r3, [sp, #48]	; 0x30
 801772a:	9b08      	ldr	r3, [sp, #32]
 801772c:	9306      	str	r3, [sp, #24]
 801772e:	9904      	ldr	r1, [sp, #16]
 8017730:	9803      	ldr	r0, [sp, #12]
 8017732:	f7ff f9f7 	bl	8016b24 <quorem>
 8017736:	9b06      	ldr	r3, [sp, #24]
 8017738:	3030      	adds	r0, #48	; 0x30
 801773a:	1c5d      	adds	r5, r3, #1
 801773c:	7018      	strb	r0, [r3, #0]
 801773e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017740:	9b08      	ldr	r3, [sp, #32]
 8017742:	0004      	movs	r4, r0
 8017744:	1aeb      	subs	r3, r5, r3
 8017746:	429a      	cmp	r2, r3
 8017748:	dd08      	ble.n	801775c <_dtoa_r+0xb2c>
 801774a:	2300      	movs	r3, #0
 801774c:	220a      	movs	r2, #10
 801774e:	9903      	ldr	r1, [sp, #12]
 8017750:	9802      	ldr	r0, [sp, #8]
 8017752:	f000 fcf3 	bl	801813c <__multadd>
 8017756:	9506      	str	r5, [sp, #24]
 8017758:	9003      	str	r0, [sp, #12]
 801775a:	e7e8      	b.n	801772e <_dtoa_r+0xafe>
 801775c:	2300      	movs	r3, #0
 801775e:	9309      	str	r3, [sp, #36]	; 0x24
 8017760:	9903      	ldr	r1, [sp, #12]
 8017762:	2201      	movs	r2, #1
 8017764:	9802      	ldr	r0, [sp, #8]
 8017766:	f000 fe89 	bl	801847c <__lshift>
 801776a:	9904      	ldr	r1, [sp, #16]
 801776c:	9003      	str	r0, [sp, #12]
 801776e:	f000 fed7 	bl	8018520 <__mcmp>
 8017772:	2800      	cmp	r0, #0
 8017774:	dc9d      	bgt.n	80176b2 <_dtoa_r+0xa82>
 8017776:	d101      	bne.n	801777c <_dtoa_r+0xb4c>
 8017778:	07e3      	lsls	r3, r4, #31
 801777a:	d49a      	bmi.n	80176b2 <_dtoa_r+0xa82>
 801777c:	1e6b      	subs	r3, r5, #1
 801777e:	781a      	ldrb	r2, [r3, #0]
 8017780:	2a30      	cmp	r2, #48	; 0x30
 8017782:	d000      	beq.n	8017786 <_dtoa_r+0xb56>
 8017784:	e6f4      	b.n	8017570 <_dtoa_r+0x940>
 8017786:	001d      	movs	r5, r3
 8017788:	e7f8      	b.n	801777c <_dtoa_r+0xb4c>
 801778a:	9a08      	ldr	r2, [sp, #32]
 801778c:	429a      	cmp	r2, r3
 801778e:	d103      	bne.n	8017798 <_dtoa_r+0xb68>
 8017790:	2331      	movs	r3, #49	; 0x31
 8017792:	3701      	adds	r7, #1
 8017794:	7013      	strb	r3, [r2, #0]
 8017796:	e6eb      	b.n	8017570 <_dtoa_r+0x940>
 8017798:	001d      	movs	r5, r3
 801779a:	e78a      	b.n	80176b2 <_dtoa_r+0xa82>
 801779c:	4b0b      	ldr	r3, [pc, #44]	; (80177cc <_dtoa_r+0xb9c>)
 801779e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80177a0:	9308      	str	r3, [sp, #32]
 80177a2:	4b0b      	ldr	r3, [pc, #44]	; (80177d0 <_dtoa_r+0xba0>)
 80177a4:	2a00      	cmp	r2, #0
 80177a6:	d001      	beq.n	80177ac <_dtoa_r+0xb7c>
 80177a8:	f7ff fa75 	bl	8016c96 <_dtoa_r+0x66>
 80177ac:	f7ff fa75 	bl	8016c9a <_dtoa_r+0x6a>
 80177b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80177b2:	2b01      	cmp	r3, #1
 80177b4:	dc00      	bgt.n	80177b8 <_dtoa_r+0xb88>
 80177b6:	e621      	b.n	80173fc <_dtoa_r+0x7cc>
 80177b8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80177ba:	2001      	movs	r0, #1
 80177bc:	e635      	b.n	801742a <_dtoa_r+0x7fa>
 80177be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	dcb2      	bgt.n	801772a <_dtoa_r+0xafa>
 80177c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80177c6:	2b02      	cmp	r3, #2
 80177c8:	ddaf      	ble.n	801772a <_dtoa_r+0xafa>
 80177ca:	e6bc      	b.n	8017546 <_dtoa_r+0x916>
 80177cc:	0801bc3d 	.word	0x0801bc3d
 80177d0:	0801bc45 	.word	0x0801bc45

080177d4 <__errno>:
 80177d4:	4b01      	ldr	r3, [pc, #4]	; (80177dc <__errno+0x8>)
 80177d6:	6818      	ldr	r0, [r3, #0]
 80177d8:	4770      	bx	lr
 80177da:	46c0      	nop			; (mov r8, r8)
 80177dc:	200000f4 	.word	0x200000f4

080177e0 <__libc_fini_array>:
 80177e0:	b570      	push	{r4, r5, r6, lr}
 80177e2:	4d07      	ldr	r5, [pc, #28]	; (8017800 <__libc_fini_array+0x20>)
 80177e4:	4c07      	ldr	r4, [pc, #28]	; (8017804 <__libc_fini_array+0x24>)
 80177e6:	1b64      	subs	r4, r4, r5
 80177e8:	10a4      	asrs	r4, r4, #2
 80177ea:	2c00      	cmp	r4, #0
 80177ec:	d102      	bne.n	80177f4 <__libc_fini_array+0x14>
 80177ee:	f001 f987 	bl	8018b00 <_fini>
 80177f2:	bd70      	pop	{r4, r5, r6, pc}
 80177f4:	3c01      	subs	r4, #1
 80177f6:	00a3      	lsls	r3, r4, #2
 80177f8:	58eb      	ldr	r3, [r5, r3]
 80177fa:	4798      	blx	r3
 80177fc:	e7f5      	b.n	80177ea <__libc_fini_array+0xa>
 80177fe:	46c0      	nop			; (mov r8, r8)
 8017800:	0801bd5c 	.word	0x0801bd5c
 8017804:	0801bd60 	.word	0x0801bd60

08017808 <_malloc_trim_r>:
 8017808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801780a:	0005      	movs	r5, r0
 801780c:	2008      	movs	r0, #8
 801780e:	000c      	movs	r4, r1
 8017810:	f7ff f95c 	bl	8016acc <sysconf>
 8017814:	0007      	movs	r7, r0
 8017816:	0028      	movs	r0, r5
 8017818:	f7fc fd56 	bl	80142c8 <__malloc_lock>
 801781c:	2203      	movs	r2, #3
 801781e:	4e21      	ldr	r6, [pc, #132]	; (80178a4 <_malloc_trim_r+0x9c>)
 8017820:	0039      	movs	r1, r7
 8017822:	68b3      	ldr	r3, [r6, #8]
 8017824:	685b      	ldr	r3, [r3, #4]
 8017826:	4393      	bics	r3, r2
 8017828:	1b18      	subs	r0, r3, r4
 801782a:	3811      	subs	r0, #17
 801782c:	19c0      	adds	r0, r0, r7
 801782e:	9301      	str	r3, [sp, #4]
 8017830:	f7e8 fc8e 	bl	8000150 <__udivsi3>
 8017834:	1e44      	subs	r4, r0, #1
 8017836:	437c      	muls	r4, r7
 8017838:	42a7      	cmp	r7, r4
 801783a:	dd04      	ble.n	8017846 <_malloc_trim_r+0x3e>
 801783c:	0028      	movs	r0, r5
 801783e:	f7fc fd4b 	bl	80142d8 <__malloc_unlock>
 8017842:	2000      	movs	r0, #0
 8017844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017846:	2100      	movs	r1, #0
 8017848:	0028      	movs	r0, r5
 801784a:	f7fc ff1d 	bl	8014688 <_sbrk_r>
 801784e:	68b3      	ldr	r3, [r6, #8]
 8017850:	9a01      	ldr	r2, [sp, #4]
 8017852:	189b      	adds	r3, r3, r2
 8017854:	4298      	cmp	r0, r3
 8017856:	d1f1      	bne.n	801783c <_malloc_trim_r+0x34>
 8017858:	4261      	negs	r1, r4
 801785a:	0028      	movs	r0, r5
 801785c:	f7fc ff14 	bl	8014688 <_sbrk_r>
 8017860:	1c43      	adds	r3, r0, #1
 8017862:	d110      	bne.n	8017886 <_malloc_trim_r+0x7e>
 8017864:	2100      	movs	r1, #0
 8017866:	0028      	movs	r0, r5
 8017868:	f7fc ff0e 	bl	8014688 <_sbrk_r>
 801786c:	68b2      	ldr	r2, [r6, #8]
 801786e:	1a81      	subs	r1, r0, r2
 8017870:	290f      	cmp	r1, #15
 8017872:	dde3      	ble.n	801783c <_malloc_trim_r+0x34>
 8017874:	4b0c      	ldr	r3, [pc, #48]	; (80178a8 <_malloc_trim_r+0xa0>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	1ac0      	subs	r0, r0, r3
 801787a:	4b0c      	ldr	r3, [pc, #48]	; (80178ac <_malloc_trim_r+0xa4>)
 801787c:	6018      	str	r0, [r3, #0]
 801787e:	2301      	movs	r3, #1
 8017880:	430b      	orrs	r3, r1
 8017882:	6053      	str	r3, [r2, #4]
 8017884:	e7da      	b.n	801783c <_malloc_trim_r+0x34>
 8017886:	68b2      	ldr	r2, [r6, #8]
 8017888:	2601      	movs	r6, #1
 801788a:	9b01      	ldr	r3, [sp, #4]
 801788c:	0028      	movs	r0, r5
 801788e:	1b1b      	subs	r3, r3, r4
 8017890:	4333      	orrs	r3, r6
 8017892:	6053      	str	r3, [r2, #4]
 8017894:	4b05      	ldr	r3, [pc, #20]	; (80178ac <_malloc_trim_r+0xa4>)
 8017896:	681a      	ldr	r2, [r3, #0]
 8017898:	1b14      	subs	r4, r2, r4
 801789a:	601c      	str	r4, [r3, #0]
 801789c:	f7fc fd1c 	bl	80142d8 <__malloc_unlock>
 80178a0:	0030      	movs	r0, r6
 80178a2:	e7cf      	b.n	8017844 <_malloc_trim_r+0x3c>
 80178a4:	2000068c 	.word	0x2000068c
 80178a8:	20000a94 	.word	0x20000a94
 80178ac:	20006920 	.word	0x20006920

080178b0 <_free_r>:
 80178b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80178b2:	1e0d      	subs	r5, r1, #0
 80178b4:	9001      	str	r0, [sp, #4]
 80178b6:	d02d      	beq.n	8017914 <_free_r+0x64>
 80178b8:	f7fc fd06 	bl	80142c8 <__malloc_lock>
 80178bc:	2301      	movs	r3, #1
 80178be:	0029      	movs	r1, r5
 80178c0:	469c      	mov	ip, r3
 80178c2:	3908      	subs	r1, #8
 80178c4:	684f      	ldr	r7, [r1, #4]
 80178c6:	4662      	mov	r2, ip
 80178c8:	003b      	movs	r3, r7
 80178ca:	4666      	mov	r6, ip
 80178cc:	4393      	bics	r3, r2
 80178ce:	18c8      	adds	r0, r1, r3
 80178d0:	6845      	ldr	r5, [r0, #4]
 80178d2:	3202      	adds	r2, #2
 80178d4:	4395      	bics	r5, r2
 80178d6:	4a4a      	ldr	r2, [pc, #296]	; (8017a00 <_free_r+0x150>)
 80178d8:	4037      	ands	r7, r6
 80178da:	6896      	ldr	r6, [r2, #8]
 80178dc:	4286      	cmp	r6, r0
 80178de:	d11a      	bne.n	8017916 <_free_r+0x66>
 80178e0:	195b      	adds	r3, r3, r5
 80178e2:	2f00      	cmp	r7, #0
 80178e4:	d106      	bne.n	80178f4 <_free_r+0x44>
 80178e6:	6808      	ldr	r0, [r1, #0]
 80178e8:	1a09      	subs	r1, r1, r0
 80178ea:	688d      	ldr	r5, [r1, #8]
 80178ec:	181b      	adds	r3, r3, r0
 80178ee:	68c8      	ldr	r0, [r1, #12]
 80178f0:	60e8      	str	r0, [r5, #12]
 80178f2:	6085      	str	r5, [r0, #8]
 80178f4:	2001      	movs	r0, #1
 80178f6:	4318      	orrs	r0, r3
 80178f8:	6048      	str	r0, [r1, #4]
 80178fa:	6091      	str	r1, [r2, #8]
 80178fc:	4a41      	ldr	r2, [pc, #260]	; (8017a04 <_free_r+0x154>)
 80178fe:	6812      	ldr	r2, [r2, #0]
 8017900:	429a      	cmp	r2, r3
 8017902:	d804      	bhi.n	801790e <_free_r+0x5e>
 8017904:	4b40      	ldr	r3, [pc, #256]	; (8017a08 <_free_r+0x158>)
 8017906:	9801      	ldr	r0, [sp, #4]
 8017908:	6819      	ldr	r1, [r3, #0]
 801790a:	f7ff ff7d 	bl	8017808 <_malloc_trim_r>
 801790e:	9801      	ldr	r0, [sp, #4]
 8017910:	f7fc fce2 	bl	80142d8 <__malloc_unlock>
 8017914:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017916:	2600      	movs	r6, #0
 8017918:	6045      	str	r5, [r0, #4]
 801791a:	42b7      	cmp	r7, r6
 801791c:	d109      	bne.n	8017932 <_free_r+0x82>
 801791e:	680f      	ldr	r7, [r1, #0]
 8017920:	4c3a      	ldr	r4, [pc, #232]	; (8017a0c <_free_r+0x15c>)
 8017922:	1bc9      	subs	r1, r1, r7
 8017924:	19db      	adds	r3, r3, r7
 8017926:	688f      	ldr	r7, [r1, #8]
 8017928:	42a7      	cmp	r7, r4
 801792a:	d02b      	beq.n	8017984 <_free_r+0xd4>
 801792c:	68cc      	ldr	r4, [r1, #12]
 801792e:	60fc      	str	r4, [r7, #12]
 8017930:	60a7      	str	r7, [r4, #8]
 8017932:	1947      	adds	r7, r0, r5
 8017934:	687c      	ldr	r4, [r7, #4]
 8017936:	2701      	movs	r7, #1
 8017938:	423c      	tst	r4, r7
 801793a:	d10b      	bne.n	8017954 <_free_r+0xa4>
 801793c:	195b      	adds	r3, r3, r5
 801793e:	6885      	ldr	r5, [r0, #8]
 8017940:	2e00      	cmp	r6, #0
 8017942:	d121      	bne.n	8017988 <_free_r+0xd8>
 8017944:	4c31      	ldr	r4, [pc, #196]	; (8017a0c <_free_r+0x15c>)
 8017946:	42a5      	cmp	r5, r4
 8017948:	d11e      	bne.n	8017988 <_free_r+0xd8>
 801794a:	003e      	movs	r6, r7
 801794c:	6151      	str	r1, [r2, #20]
 801794e:	6111      	str	r1, [r2, #16]
 8017950:	60cd      	str	r5, [r1, #12]
 8017952:	608d      	str	r5, [r1, #8]
 8017954:	2001      	movs	r0, #1
 8017956:	0005      	movs	r5, r0
 8017958:	431d      	orrs	r5, r3
 801795a:	604d      	str	r5, [r1, #4]
 801795c:	50cb      	str	r3, [r1, r3]
 801795e:	2e00      	cmp	r6, #0
 8017960:	d1d5      	bne.n	801790e <_free_r+0x5e>
 8017962:	4d2b      	ldr	r5, [pc, #172]	; (8017a10 <_free_r+0x160>)
 8017964:	42ab      	cmp	r3, r5
 8017966:	d813      	bhi.n	8017990 <_free_r+0xe0>
 8017968:	08db      	lsrs	r3, r3, #3
 801796a:	109d      	asrs	r5, r3, #2
 801796c:	40a8      	lsls	r0, r5
 801796e:	6854      	ldr	r4, [r2, #4]
 8017970:	00db      	lsls	r3, r3, #3
 8017972:	4320      	orrs	r0, r4
 8017974:	6050      	str	r0, [r2, #4]
 8017976:	189a      	adds	r2, r3, r2
 8017978:	6893      	ldr	r3, [r2, #8]
 801797a:	60ca      	str	r2, [r1, #12]
 801797c:	608b      	str	r3, [r1, #8]
 801797e:	6091      	str	r1, [r2, #8]
 8017980:	60d9      	str	r1, [r3, #12]
 8017982:	e7c4      	b.n	801790e <_free_r+0x5e>
 8017984:	4666      	mov	r6, ip
 8017986:	e7d4      	b.n	8017932 <_free_r+0x82>
 8017988:	68c0      	ldr	r0, [r0, #12]
 801798a:	60e8      	str	r0, [r5, #12]
 801798c:	6085      	str	r5, [r0, #8]
 801798e:	e7e1      	b.n	8017954 <_free_r+0xa4>
 8017990:	0a5d      	lsrs	r5, r3, #9
 8017992:	2d04      	cmp	r5, #4
 8017994:	d812      	bhi.n	80179bc <_free_r+0x10c>
 8017996:	0998      	lsrs	r0, r3, #6
 8017998:	3038      	adds	r0, #56	; 0x38
 801799a:	00c6      	lsls	r6, r0, #3
 801799c:	18b6      	adds	r6, r6, r2
 801799e:	68b5      	ldr	r5, [r6, #8]
 80179a0:	2703      	movs	r7, #3
 80179a2:	42ae      	cmp	r6, r5
 80179a4:	d125      	bne.n	80179f2 <_free_r+0x142>
 80179a6:	2301      	movs	r3, #1
 80179a8:	1080      	asrs	r0, r0, #2
 80179aa:	4083      	lsls	r3, r0
 80179ac:	6850      	ldr	r0, [r2, #4]
 80179ae:	4303      	orrs	r3, r0
 80179b0:	6053      	str	r3, [r2, #4]
 80179b2:	60ce      	str	r6, [r1, #12]
 80179b4:	608d      	str	r5, [r1, #8]
 80179b6:	60b1      	str	r1, [r6, #8]
 80179b8:	60e9      	str	r1, [r5, #12]
 80179ba:	e7a8      	b.n	801790e <_free_r+0x5e>
 80179bc:	2d14      	cmp	r5, #20
 80179be:	d802      	bhi.n	80179c6 <_free_r+0x116>
 80179c0:	0028      	movs	r0, r5
 80179c2:	305b      	adds	r0, #91	; 0x5b
 80179c4:	e7e9      	b.n	801799a <_free_r+0xea>
 80179c6:	2d54      	cmp	r5, #84	; 0x54
 80179c8:	d802      	bhi.n	80179d0 <_free_r+0x120>
 80179ca:	0b18      	lsrs	r0, r3, #12
 80179cc:	306e      	adds	r0, #110	; 0x6e
 80179ce:	e7e4      	b.n	801799a <_free_r+0xea>
 80179d0:	20aa      	movs	r0, #170	; 0xaa
 80179d2:	0040      	lsls	r0, r0, #1
 80179d4:	4285      	cmp	r5, r0
 80179d6:	d802      	bhi.n	80179de <_free_r+0x12e>
 80179d8:	0bd8      	lsrs	r0, r3, #15
 80179da:	3077      	adds	r0, #119	; 0x77
 80179dc:	e7dd      	b.n	801799a <_free_r+0xea>
 80179de:	4e0d      	ldr	r6, [pc, #52]	; (8017a14 <_free_r+0x164>)
 80179e0:	207e      	movs	r0, #126	; 0x7e
 80179e2:	42b5      	cmp	r5, r6
 80179e4:	d8d9      	bhi.n	801799a <_free_r+0xea>
 80179e6:	0c98      	lsrs	r0, r3, #18
 80179e8:	307c      	adds	r0, #124	; 0x7c
 80179ea:	e7d6      	b.n	801799a <_free_r+0xea>
 80179ec:	68ad      	ldr	r5, [r5, #8]
 80179ee:	42ae      	cmp	r6, r5
 80179f0:	d003      	beq.n	80179fa <_free_r+0x14a>
 80179f2:	686a      	ldr	r2, [r5, #4]
 80179f4:	43ba      	bics	r2, r7
 80179f6:	429a      	cmp	r2, r3
 80179f8:	d8f8      	bhi.n	80179ec <_free_r+0x13c>
 80179fa:	68ee      	ldr	r6, [r5, #12]
 80179fc:	e7d9      	b.n	80179b2 <_free_r+0x102>
 80179fe:	46c0      	nop			; (mov r8, r8)
 8017a00:	2000068c 	.word	0x2000068c
 8017a04:	20000a98 	.word	0x20000a98
 8017a08:	20006950 	.word	0x20006950
 8017a0c:	20000694 	.word	0x20000694
 8017a10:	000001ff 	.word	0x000001ff
 8017a14:	00000554 	.word	0x00000554

08017a18 <rshift>:
 8017a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a1a:	0004      	movs	r4, r0
 8017a1c:	6905      	ldr	r5, [r0, #16]
 8017a1e:	3414      	adds	r4, #20
 8017a20:	114b      	asrs	r3, r1, #5
 8017a22:	0026      	movs	r6, r4
 8017a24:	429d      	cmp	r5, r3
 8017a26:	dd14      	ble.n	8017a52 <rshift+0x3a>
 8017a28:	221f      	movs	r2, #31
 8017a2a:	00ad      	lsls	r5, r5, #2
 8017a2c:	009b      	lsls	r3, r3, #2
 8017a2e:	4011      	ands	r1, r2
 8017a30:	1965      	adds	r5, r4, r5
 8017a32:	18e3      	adds	r3, r4, r3
 8017a34:	0022      	movs	r2, r4
 8017a36:	2900      	cmp	r1, #0
 8017a38:	d01e      	beq.n	8017a78 <rshift+0x60>
 8017a3a:	cb04      	ldmia	r3!, {r2}
 8017a3c:	2720      	movs	r7, #32
 8017a3e:	40ca      	lsrs	r2, r1
 8017a40:	46a4      	mov	ip, r4
 8017a42:	1a7f      	subs	r7, r7, r1
 8017a44:	4666      	mov	r6, ip
 8017a46:	429d      	cmp	r5, r3
 8017a48:	d80b      	bhi.n	8017a62 <rshift+0x4a>
 8017a4a:	6032      	str	r2, [r6, #0]
 8017a4c:	2a00      	cmp	r2, #0
 8017a4e:	d000      	beq.n	8017a52 <rshift+0x3a>
 8017a50:	3604      	adds	r6, #4
 8017a52:	1b33      	subs	r3, r6, r4
 8017a54:	109b      	asrs	r3, r3, #2
 8017a56:	6103      	str	r3, [r0, #16]
 8017a58:	42a6      	cmp	r6, r4
 8017a5a:	d101      	bne.n	8017a60 <rshift+0x48>
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	6143      	str	r3, [r0, #20]
 8017a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a62:	681e      	ldr	r6, [r3, #0]
 8017a64:	40be      	lsls	r6, r7
 8017a66:	4332      	orrs	r2, r6
 8017a68:	4666      	mov	r6, ip
 8017a6a:	c604      	stmia	r6!, {r2}
 8017a6c:	cb04      	ldmia	r3!, {r2}
 8017a6e:	46b4      	mov	ip, r6
 8017a70:	40ca      	lsrs	r2, r1
 8017a72:	e7e7      	b.n	8017a44 <rshift+0x2c>
 8017a74:	cb02      	ldmia	r3!, {r1}
 8017a76:	c202      	stmia	r2!, {r1}
 8017a78:	0016      	movs	r6, r2
 8017a7a:	429d      	cmp	r5, r3
 8017a7c:	d8fa      	bhi.n	8017a74 <rshift+0x5c>
 8017a7e:	e7e8      	b.n	8017a52 <rshift+0x3a>

08017a80 <__hexdig_fun>:
 8017a80:	0003      	movs	r3, r0
 8017a82:	3b30      	subs	r3, #48	; 0x30
 8017a84:	2b09      	cmp	r3, #9
 8017a86:	d803      	bhi.n	8017a90 <__hexdig_fun+0x10>
 8017a88:	3820      	subs	r0, #32
 8017a8a:	b2c3      	uxtb	r3, r0
 8017a8c:	0018      	movs	r0, r3
 8017a8e:	4770      	bx	lr
 8017a90:	0003      	movs	r3, r0
 8017a92:	3b61      	subs	r3, #97	; 0x61
 8017a94:	2b05      	cmp	r3, #5
 8017a96:	d801      	bhi.n	8017a9c <__hexdig_fun+0x1c>
 8017a98:	3847      	subs	r0, #71	; 0x47
 8017a9a:	e7f6      	b.n	8017a8a <__hexdig_fun+0xa>
 8017a9c:	0002      	movs	r2, r0
 8017a9e:	3a41      	subs	r2, #65	; 0x41
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	2a05      	cmp	r2, #5
 8017aa4:	d8f2      	bhi.n	8017a8c <__hexdig_fun+0xc>
 8017aa6:	3827      	subs	r0, #39	; 0x27
 8017aa8:	e7ef      	b.n	8017a8a <__hexdig_fun+0xa>

08017aaa <__gethex>:
 8017aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aac:	b08d      	sub	sp, #52	; 0x34
 8017aae:	9005      	str	r0, [sp, #20]
 8017ab0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017ab2:	9109      	str	r1, [sp, #36]	; 0x24
 8017ab4:	9202      	str	r2, [sp, #8]
 8017ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8017ab8:	f000 fadf 	bl	801807a <__localeconv_l>
 8017abc:	6803      	ldr	r3, [r0, #0]
 8017abe:	0018      	movs	r0, r3
 8017ac0:	9307      	str	r3, [sp, #28]
 8017ac2:	f7e8 fb29 	bl	8000118 <strlen>
 8017ac6:	2202      	movs	r2, #2
 8017ac8:	9b07      	ldr	r3, [sp, #28]
 8017aca:	4252      	negs	r2, r2
 8017acc:	181b      	adds	r3, r3, r0
 8017ace:	3b01      	subs	r3, #1
 8017ad0:	781b      	ldrb	r3, [r3, #0]
 8017ad2:	9004      	str	r0, [sp, #16]
 8017ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ad8:	6819      	ldr	r1, [r3, #0]
 8017ada:	1c8b      	adds	r3, r1, #2
 8017adc:	1a52      	subs	r2, r2, r1
 8017ade:	18d1      	adds	r1, r2, r3
 8017ae0:	9301      	str	r3, [sp, #4]
 8017ae2:	9108      	str	r1, [sp, #32]
 8017ae4:	9901      	ldr	r1, [sp, #4]
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	7808      	ldrb	r0, [r1, #0]
 8017aea:	2830      	cmp	r0, #48	; 0x30
 8017aec:	d0f7      	beq.n	8017ade <__gethex+0x34>
 8017aee:	f7ff ffc7 	bl	8017a80 <__hexdig_fun>
 8017af2:	1e07      	subs	r7, r0, #0
 8017af4:	d000      	beq.n	8017af8 <__gethex+0x4e>
 8017af6:	e06f      	b.n	8017bd8 <__gethex+0x12e>
 8017af8:	9a04      	ldr	r2, [sp, #16]
 8017afa:	9907      	ldr	r1, [sp, #28]
 8017afc:	9801      	ldr	r0, [sp, #4]
 8017afe:	f7fc fe4b 	bl	8014798 <strncmp>
 8017b02:	2800      	cmp	r0, #0
 8017b04:	d000      	beq.n	8017b08 <__gethex+0x5e>
 8017b06:	e06d      	b.n	8017be4 <__gethex+0x13a>
 8017b08:	9b01      	ldr	r3, [sp, #4]
 8017b0a:	9a04      	ldr	r2, [sp, #16]
 8017b0c:	189c      	adds	r4, r3, r2
 8017b0e:	7820      	ldrb	r0, [r4, #0]
 8017b10:	f7ff ffb6 	bl	8017a80 <__hexdig_fun>
 8017b14:	2800      	cmp	r0, #0
 8017b16:	d069      	beq.n	8017bec <__gethex+0x142>
 8017b18:	9401      	str	r4, [sp, #4]
 8017b1a:	9b01      	ldr	r3, [sp, #4]
 8017b1c:	7818      	ldrb	r0, [r3, #0]
 8017b1e:	2830      	cmp	r0, #48	; 0x30
 8017b20:	d009      	beq.n	8017b36 <__gethex+0x8c>
 8017b22:	f7ff ffad 	bl	8017a80 <__hexdig_fun>
 8017b26:	4243      	negs	r3, r0
 8017b28:	4143      	adcs	r3, r0
 8017b2a:	9303      	str	r3, [sp, #12]
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	0026      	movs	r6, r4
 8017b30:	9308      	str	r3, [sp, #32]
 8017b32:	9c01      	ldr	r4, [sp, #4]
 8017b34:	e004      	b.n	8017b40 <__gethex+0x96>
 8017b36:	9b01      	ldr	r3, [sp, #4]
 8017b38:	3301      	adds	r3, #1
 8017b3a:	9301      	str	r3, [sp, #4]
 8017b3c:	e7ed      	b.n	8017b1a <__gethex+0x70>
 8017b3e:	3401      	adds	r4, #1
 8017b40:	7820      	ldrb	r0, [r4, #0]
 8017b42:	f7ff ff9d 	bl	8017a80 <__hexdig_fun>
 8017b46:	2800      	cmp	r0, #0
 8017b48:	d1f9      	bne.n	8017b3e <__gethex+0x94>
 8017b4a:	9a04      	ldr	r2, [sp, #16]
 8017b4c:	9907      	ldr	r1, [sp, #28]
 8017b4e:	0020      	movs	r0, r4
 8017b50:	f7fc fe22 	bl	8014798 <strncmp>
 8017b54:	2800      	cmp	r0, #0
 8017b56:	d109      	bne.n	8017b6c <__gethex+0xc2>
 8017b58:	2e00      	cmp	r6, #0
 8017b5a:	d10a      	bne.n	8017b72 <__gethex+0xc8>
 8017b5c:	9b04      	ldr	r3, [sp, #16]
 8017b5e:	18e4      	adds	r4, r4, r3
 8017b60:	0026      	movs	r6, r4
 8017b62:	7820      	ldrb	r0, [r4, #0]
 8017b64:	f7ff ff8c 	bl	8017a80 <__hexdig_fun>
 8017b68:	2800      	cmp	r0, #0
 8017b6a:	d139      	bne.n	8017be0 <__gethex+0x136>
 8017b6c:	2700      	movs	r7, #0
 8017b6e:	42be      	cmp	r6, r7
 8017b70:	d001      	beq.n	8017b76 <__gethex+0xcc>
 8017b72:	1b37      	subs	r7, r6, r4
 8017b74:	00bf      	lsls	r7, r7, #2
 8017b76:	7823      	ldrb	r3, [r4, #0]
 8017b78:	2b50      	cmp	r3, #80	; 0x50
 8017b7a:	d001      	beq.n	8017b80 <__gethex+0xd6>
 8017b7c:	2b70      	cmp	r3, #112	; 0x70
 8017b7e:	d142      	bne.n	8017c06 <__gethex+0x15c>
 8017b80:	7863      	ldrb	r3, [r4, #1]
 8017b82:	2b2b      	cmp	r3, #43	; 0x2b
 8017b84:	d034      	beq.n	8017bf0 <__gethex+0x146>
 8017b86:	2b2d      	cmp	r3, #45	; 0x2d
 8017b88:	d036      	beq.n	8017bf8 <__gethex+0x14e>
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	1c66      	adds	r6, r4, #1
 8017b8e:	9306      	str	r3, [sp, #24]
 8017b90:	7830      	ldrb	r0, [r6, #0]
 8017b92:	f7ff ff75 	bl	8017a80 <__hexdig_fun>
 8017b96:	1e43      	subs	r3, r0, #1
 8017b98:	b2db      	uxtb	r3, r3
 8017b9a:	2b18      	cmp	r3, #24
 8017b9c:	d833      	bhi.n	8017c06 <__gethex+0x15c>
 8017b9e:	3810      	subs	r0, #16
 8017ba0:	0005      	movs	r5, r0
 8017ba2:	3601      	adds	r6, #1
 8017ba4:	7830      	ldrb	r0, [r6, #0]
 8017ba6:	f7ff ff6b 	bl	8017a80 <__hexdig_fun>
 8017baa:	1e43      	subs	r3, r0, #1
 8017bac:	b2db      	uxtb	r3, r3
 8017bae:	2b18      	cmp	r3, #24
 8017bb0:	d924      	bls.n	8017bfc <__gethex+0x152>
 8017bb2:	9b06      	ldr	r3, [sp, #24]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d000      	beq.n	8017bba <__gethex+0x110>
 8017bb8:	426d      	negs	r5, r5
 8017bba:	197f      	adds	r7, r7, r5
 8017bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bbe:	601e      	str	r6, [r3, #0]
 8017bc0:	9b03      	ldr	r3, [sp, #12]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d021      	beq.n	8017c0a <__gethex+0x160>
 8017bc6:	9b08      	ldr	r3, [sp, #32]
 8017bc8:	2606      	movs	r6, #6
 8017bca:	425a      	negs	r2, r3
 8017bcc:	4153      	adcs	r3, r2
 8017bce:	425b      	negs	r3, r3
 8017bd0:	401e      	ands	r6, r3
 8017bd2:	0030      	movs	r0, r6
 8017bd4:	b00d      	add	sp, #52	; 0x34
 8017bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bd8:	2300      	movs	r3, #0
 8017bda:	9303      	str	r3, [sp, #12]
 8017bdc:	001e      	movs	r6, r3
 8017bde:	e7a8      	b.n	8017b32 <__gethex+0x88>
 8017be0:	3401      	adds	r4, #1
 8017be2:	e7be      	b.n	8017b62 <__gethex+0xb8>
 8017be4:	9c01      	ldr	r4, [sp, #4]
 8017be6:	2301      	movs	r3, #1
 8017be8:	9303      	str	r3, [sp, #12]
 8017bea:	e7c4      	b.n	8017b76 <__gethex+0xcc>
 8017bec:	0007      	movs	r7, r0
 8017bee:	e7fa      	b.n	8017be6 <__gethex+0x13c>
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	9306      	str	r3, [sp, #24]
 8017bf4:	1ca6      	adds	r6, r4, #2
 8017bf6:	e7cb      	b.n	8017b90 <__gethex+0xe6>
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	e7fa      	b.n	8017bf2 <__gethex+0x148>
 8017bfc:	230a      	movs	r3, #10
 8017bfe:	435d      	muls	r5, r3
 8017c00:	182d      	adds	r5, r5, r0
 8017c02:	3d10      	subs	r5, #16
 8017c04:	e7cd      	b.n	8017ba2 <__gethex+0xf8>
 8017c06:	0026      	movs	r6, r4
 8017c08:	e7d8      	b.n	8017bbc <__gethex+0x112>
 8017c0a:	9b01      	ldr	r3, [sp, #4]
 8017c0c:	9903      	ldr	r1, [sp, #12]
 8017c0e:	1ae3      	subs	r3, r4, r3
 8017c10:	3b01      	subs	r3, #1
 8017c12:	2b07      	cmp	r3, #7
 8017c14:	dc47      	bgt.n	8017ca6 <__gethex+0x1fc>
 8017c16:	9805      	ldr	r0, [sp, #20]
 8017c18:	f000 fa5e 	bl	80180d8 <_Balloc>
 8017c1c:	0003      	movs	r3, r0
 8017c1e:	3314      	adds	r3, #20
 8017c20:	9303      	str	r3, [sp, #12]
 8017c22:	9308      	str	r3, [sp, #32]
 8017c24:	2300      	movs	r3, #0
 8017c26:	0005      	movs	r5, r0
 8017c28:	001e      	movs	r6, r3
 8017c2a:	9306      	str	r3, [sp, #24]
 8017c2c:	9b01      	ldr	r3, [sp, #4]
 8017c2e:	42a3      	cmp	r3, r4
 8017c30:	d33c      	bcc.n	8017cac <__gethex+0x202>
 8017c32:	9c08      	ldr	r4, [sp, #32]
 8017c34:	9b03      	ldr	r3, [sp, #12]
 8017c36:	c440      	stmia	r4!, {r6}
 8017c38:	1ae4      	subs	r4, r4, r3
 8017c3a:	10a4      	asrs	r4, r4, #2
 8017c3c:	612c      	str	r4, [r5, #16]
 8017c3e:	0030      	movs	r0, r6
 8017c40:	f000 faf8 	bl	8018234 <__hi0bits>
 8017c44:	9b02      	ldr	r3, [sp, #8]
 8017c46:	0164      	lsls	r4, r4, #5
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	1a26      	subs	r6, r4, r0
 8017c4c:	9301      	str	r3, [sp, #4]
 8017c4e:	429e      	cmp	r6, r3
 8017c50:	dd5f      	ble.n	8017d12 <__gethex+0x268>
 8017c52:	1af6      	subs	r6, r6, r3
 8017c54:	0031      	movs	r1, r6
 8017c56:	0028      	movs	r0, r5
 8017c58:	f000 fde3 	bl	8018822 <__any_on>
 8017c5c:	1e04      	subs	r4, r0, #0
 8017c5e:	d00f      	beq.n	8017c80 <__gethex+0x1d6>
 8017c60:	2401      	movs	r4, #1
 8017c62:	211f      	movs	r1, #31
 8017c64:	0020      	movs	r0, r4
 8017c66:	1e73      	subs	r3, r6, #1
 8017c68:	4019      	ands	r1, r3
 8017c6a:	4088      	lsls	r0, r1
 8017c6c:	0001      	movs	r1, r0
 8017c6e:	115a      	asrs	r2, r3, #5
 8017c70:	9803      	ldr	r0, [sp, #12]
 8017c72:	0092      	lsls	r2, r2, #2
 8017c74:	5812      	ldr	r2, [r2, r0]
 8017c76:	420a      	tst	r2, r1
 8017c78:	d002      	beq.n	8017c80 <__gethex+0x1d6>
 8017c7a:	42a3      	cmp	r3, r4
 8017c7c:	dc41      	bgt.n	8017d02 <__gethex+0x258>
 8017c7e:	2402      	movs	r4, #2
 8017c80:	0031      	movs	r1, r6
 8017c82:	0028      	movs	r0, r5
 8017c84:	f7ff fec8 	bl	8017a18 <rshift>
 8017c88:	19bf      	adds	r7, r7, r6
 8017c8a:	9b02      	ldr	r3, [sp, #8]
 8017c8c:	689b      	ldr	r3, [r3, #8]
 8017c8e:	9304      	str	r3, [sp, #16]
 8017c90:	42bb      	cmp	r3, r7
 8017c92:	da4e      	bge.n	8017d32 <__gethex+0x288>
 8017c94:	0029      	movs	r1, r5
 8017c96:	9805      	ldr	r0, [sp, #20]
 8017c98:	f000 fa46 	bl	8018128 <_Bfree>
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017ca0:	26a3      	movs	r6, #163	; 0xa3
 8017ca2:	6013      	str	r3, [r2, #0]
 8017ca4:	e795      	b.n	8017bd2 <__gethex+0x128>
 8017ca6:	3101      	adds	r1, #1
 8017ca8:	105b      	asrs	r3, r3, #1
 8017caa:	e7b2      	b.n	8017c12 <__gethex+0x168>
 8017cac:	1e63      	subs	r3, r4, #1
 8017cae:	9309      	str	r3, [sp, #36]	; 0x24
 8017cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017cb2:	781b      	ldrb	r3, [r3, #0]
 8017cb4:	4293      	cmp	r3, r2
 8017cb6:	d015      	beq.n	8017ce4 <__gethex+0x23a>
 8017cb8:	9b06      	ldr	r3, [sp, #24]
 8017cba:	2b20      	cmp	r3, #32
 8017cbc:	d105      	bne.n	8017cca <__gethex+0x220>
 8017cbe:	9b08      	ldr	r3, [sp, #32]
 8017cc0:	601e      	str	r6, [r3, #0]
 8017cc2:	2600      	movs	r6, #0
 8017cc4:	3304      	adds	r3, #4
 8017cc6:	9308      	str	r3, [sp, #32]
 8017cc8:	9606      	str	r6, [sp, #24]
 8017cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ccc:	7818      	ldrb	r0, [r3, #0]
 8017cce:	f7ff fed7 	bl	8017a80 <__hexdig_fun>
 8017cd2:	230f      	movs	r3, #15
 8017cd4:	4018      	ands	r0, r3
 8017cd6:	9b06      	ldr	r3, [sp, #24]
 8017cd8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017cda:	4098      	lsls	r0, r3
 8017cdc:	3304      	adds	r3, #4
 8017cde:	4306      	orrs	r6, r0
 8017ce0:	9306      	str	r3, [sp, #24]
 8017ce2:	e7a3      	b.n	8017c2c <__gethex+0x182>
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	9a04      	ldr	r2, [sp, #16]
 8017ce8:	1a9c      	subs	r4, r3, r2
 8017cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cec:	191c      	adds	r4, r3, r4
 8017cee:	9b01      	ldr	r3, [sp, #4]
 8017cf0:	429c      	cmp	r4, r3
 8017cf2:	d3e1      	bcc.n	8017cb8 <__gethex+0x20e>
 8017cf4:	9907      	ldr	r1, [sp, #28]
 8017cf6:	0020      	movs	r0, r4
 8017cf8:	f7fc fd4e 	bl	8014798 <strncmp>
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	d1db      	bne.n	8017cb8 <__gethex+0x20e>
 8017d00:	e794      	b.n	8017c2c <__gethex+0x182>
 8017d02:	1eb1      	subs	r1, r6, #2
 8017d04:	0028      	movs	r0, r5
 8017d06:	f000 fd8c 	bl	8018822 <__any_on>
 8017d0a:	2800      	cmp	r0, #0
 8017d0c:	d0b7      	beq.n	8017c7e <__gethex+0x1d4>
 8017d0e:	2403      	movs	r4, #3
 8017d10:	e7b6      	b.n	8017c80 <__gethex+0x1d6>
 8017d12:	9b01      	ldr	r3, [sp, #4]
 8017d14:	2400      	movs	r4, #0
 8017d16:	429e      	cmp	r6, r3
 8017d18:	dab7      	bge.n	8017c8a <__gethex+0x1e0>
 8017d1a:	1b9e      	subs	r6, r3, r6
 8017d1c:	0029      	movs	r1, r5
 8017d1e:	0032      	movs	r2, r6
 8017d20:	9805      	ldr	r0, [sp, #20]
 8017d22:	f000 fbab 	bl	801847c <__lshift>
 8017d26:	0003      	movs	r3, r0
 8017d28:	3314      	adds	r3, #20
 8017d2a:	0005      	movs	r5, r0
 8017d2c:	1bbf      	subs	r7, r7, r6
 8017d2e:	9303      	str	r3, [sp, #12]
 8017d30:	e7ab      	b.n	8017c8a <__gethex+0x1e0>
 8017d32:	9b02      	ldr	r3, [sp, #8]
 8017d34:	685e      	ldr	r6, [r3, #4]
 8017d36:	42be      	cmp	r6, r7
 8017d38:	dd6b      	ble.n	8017e12 <__gethex+0x368>
 8017d3a:	9b01      	ldr	r3, [sp, #4]
 8017d3c:	1bf6      	subs	r6, r6, r7
 8017d3e:	42b3      	cmp	r3, r6
 8017d40:	dc32      	bgt.n	8017da8 <__gethex+0x2fe>
 8017d42:	9b02      	ldr	r3, [sp, #8]
 8017d44:	68db      	ldr	r3, [r3, #12]
 8017d46:	2b02      	cmp	r3, #2
 8017d48:	d026      	beq.n	8017d98 <__gethex+0x2ee>
 8017d4a:	2b03      	cmp	r3, #3
 8017d4c:	d028      	beq.n	8017da0 <__gethex+0x2f6>
 8017d4e:	2b01      	cmp	r3, #1
 8017d50:	d119      	bne.n	8017d86 <__gethex+0x2dc>
 8017d52:	9b01      	ldr	r3, [sp, #4]
 8017d54:	42b3      	cmp	r3, r6
 8017d56:	d116      	bne.n	8017d86 <__gethex+0x2dc>
 8017d58:	2b01      	cmp	r3, #1
 8017d5a:	dc0d      	bgt.n	8017d78 <__gethex+0x2ce>
 8017d5c:	9b02      	ldr	r3, [sp, #8]
 8017d5e:	2662      	movs	r6, #98	; 0x62
 8017d60:	685b      	ldr	r3, [r3, #4]
 8017d62:	9301      	str	r3, [sp, #4]
 8017d64:	9a01      	ldr	r2, [sp, #4]
 8017d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d68:	601a      	str	r2, [r3, #0]
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	9a03      	ldr	r2, [sp, #12]
 8017d6e:	612b      	str	r3, [r5, #16]
 8017d70:	6013      	str	r3, [r2, #0]
 8017d72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d74:	601d      	str	r5, [r3, #0]
 8017d76:	e72c      	b.n	8017bd2 <__gethex+0x128>
 8017d78:	9901      	ldr	r1, [sp, #4]
 8017d7a:	0028      	movs	r0, r5
 8017d7c:	3901      	subs	r1, #1
 8017d7e:	f000 fd50 	bl	8018822 <__any_on>
 8017d82:	2800      	cmp	r0, #0
 8017d84:	d1ea      	bne.n	8017d5c <__gethex+0x2b2>
 8017d86:	0029      	movs	r1, r5
 8017d88:	9805      	ldr	r0, [sp, #20]
 8017d8a:	f000 f9cd 	bl	8018128 <_Bfree>
 8017d8e:	2300      	movs	r3, #0
 8017d90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d92:	2650      	movs	r6, #80	; 0x50
 8017d94:	6013      	str	r3, [r2, #0]
 8017d96:	e71c      	b.n	8017bd2 <__gethex+0x128>
 8017d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d0de      	beq.n	8017d5c <__gethex+0x2b2>
 8017d9e:	e7f2      	b.n	8017d86 <__gethex+0x2dc>
 8017da0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d1da      	bne.n	8017d5c <__gethex+0x2b2>
 8017da6:	e7ee      	b.n	8017d86 <__gethex+0x2dc>
 8017da8:	1e77      	subs	r7, r6, #1
 8017daa:	2c00      	cmp	r4, #0
 8017dac:	d12f      	bne.n	8017e0e <__gethex+0x364>
 8017dae:	2f00      	cmp	r7, #0
 8017db0:	d004      	beq.n	8017dbc <__gethex+0x312>
 8017db2:	0039      	movs	r1, r7
 8017db4:	0028      	movs	r0, r5
 8017db6:	f000 fd34 	bl	8018822 <__any_on>
 8017dba:	0004      	movs	r4, r0
 8017dbc:	231f      	movs	r3, #31
 8017dbe:	117a      	asrs	r2, r7, #5
 8017dc0:	401f      	ands	r7, r3
 8017dc2:	3b1e      	subs	r3, #30
 8017dc4:	40bb      	lsls	r3, r7
 8017dc6:	9903      	ldr	r1, [sp, #12]
 8017dc8:	0092      	lsls	r2, r2, #2
 8017dca:	5852      	ldr	r2, [r2, r1]
 8017dcc:	421a      	tst	r2, r3
 8017dce:	d001      	beq.n	8017dd4 <__gethex+0x32a>
 8017dd0:	2302      	movs	r3, #2
 8017dd2:	431c      	orrs	r4, r3
 8017dd4:	9b01      	ldr	r3, [sp, #4]
 8017dd6:	0031      	movs	r1, r6
 8017dd8:	1b9b      	subs	r3, r3, r6
 8017dda:	2602      	movs	r6, #2
 8017ddc:	0028      	movs	r0, r5
 8017dde:	9301      	str	r3, [sp, #4]
 8017de0:	f7ff fe1a 	bl	8017a18 <rshift>
 8017de4:	9b02      	ldr	r3, [sp, #8]
 8017de6:	685f      	ldr	r7, [r3, #4]
 8017de8:	2c00      	cmp	r4, #0
 8017dea:	d040      	beq.n	8017e6e <__gethex+0x3c4>
 8017dec:	9b02      	ldr	r3, [sp, #8]
 8017dee:	68db      	ldr	r3, [r3, #12]
 8017df0:	2b02      	cmp	r3, #2
 8017df2:	d010      	beq.n	8017e16 <__gethex+0x36c>
 8017df4:	2b03      	cmp	r3, #3
 8017df6:	d012      	beq.n	8017e1e <__gethex+0x374>
 8017df8:	2b01      	cmp	r3, #1
 8017dfa:	d106      	bne.n	8017e0a <__gethex+0x360>
 8017dfc:	07a2      	lsls	r2, r4, #30
 8017dfe:	d504      	bpl.n	8017e0a <__gethex+0x360>
 8017e00:	9a03      	ldr	r2, [sp, #12]
 8017e02:	6812      	ldr	r2, [r2, #0]
 8017e04:	4314      	orrs	r4, r2
 8017e06:	421c      	tst	r4, r3
 8017e08:	d10c      	bne.n	8017e24 <__gethex+0x37a>
 8017e0a:	2310      	movs	r3, #16
 8017e0c:	e02e      	b.n	8017e6c <__gethex+0x3c2>
 8017e0e:	2401      	movs	r4, #1
 8017e10:	e7d4      	b.n	8017dbc <__gethex+0x312>
 8017e12:	2601      	movs	r6, #1
 8017e14:	e7e8      	b.n	8017de8 <__gethex+0x33e>
 8017e16:	2301      	movs	r3, #1
 8017e18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017e1a:	1a9b      	subs	r3, r3, r2
 8017e1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017e1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d0f2      	beq.n	8017e0a <__gethex+0x360>
 8017e24:	692c      	ldr	r4, [r5, #16]
 8017e26:	00a3      	lsls	r3, r4, #2
 8017e28:	9304      	str	r3, [sp, #16]
 8017e2a:	002b      	movs	r3, r5
 8017e2c:	00a2      	lsls	r2, r4, #2
 8017e2e:	3314      	adds	r3, #20
 8017e30:	1899      	adds	r1, r3, r2
 8017e32:	2200      	movs	r2, #0
 8017e34:	4694      	mov	ip, r2
 8017e36:	681a      	ldr	r2, [r3, #0]
 8017e38:	1c50      	adds	r0, r2, #1
 8017e3a:	d01d      	beq.n	8017e78 <__gethex+0x3ce>
 8017e3c:	3201      	adds	r2, #1
 8017e3e:	601a      	str	r2, [r3, #0]
 8017e40:	002b      	movs	r3, r5
 8017e42:	3314      	adds	r3, #20
 8017e44:	2e02      	cmp	r6, #2
 8017e46:	d13a      	bne.n	8017ebe <__gethex+0x414>
 8017e48:	9a02      	ldr	r2, [sp, #8]
 8017e4a:	9901      	ldr	r1, [sp, #4]
 8017e4c:	6812      	ldr	r2, [r2, #0]
 8017e4e:	3a01      	subs	r2, #1
 8017e50:	428a      	cmp	r2, r1
 8017e52:	d10a      	bne.n	8017e6a <__gethex+0x3c0>
 8017e54:	114a      	asrs	r2, r1, #5
 8017e56:	211f      	movs	r1, #31
 8017e58:	9801      	ldr	r0, [sp, #4]
 8017e5a:	0092      	lsls	r2, r2, #2
 8017e5c:	4001      	ands	r1, r0
 8017e5e:	2001      	movs	r0, #1
 8017e60:	0004      	movs	r4, r0
 8017e62:	408c      	lsls	r4, r1
 8017e64:	58d3      	ldr	r3, [r2, r3]
 8017e66:	4223      	tst	r3, r4
 8017e68:	d148      	bne.n	8017efc <__gethex+0x452>
 8017e6a:	2320      	movs	r3, #32
 8017e6c:	431e      	orrs	r6, r3
 8017e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017e70:	601d      	str	r5, [r3, #0]
 8017e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e74:	601f      	str	r7, [r3, #0]
 8017e76:	e6ac      	b.n	8017bd2 <__gethex+0x128>
 8017e78:	4662      	mov	r2, ip
 8017e7a:	c304      	stmia	r3!, {r2}
 8017e7c:	4299      	cmp	r1, r3
 8017e7e:	d8da      	bhi.n	8017e36 <__gethex+0x38c>
 8017e80:	68ab      	ldr	r3, [r5, #8]
 8017e82:	429c      	cmp	r4, r3
 8017e84:	db12      	blt.n	8017eac <__gethex+0x402>
 8017e86:	686b      	ldr	r3, [r5, #4]
 8017e88:	9805      	ldr	r0, [sp, #20]
 8017e8a:	1c59      	adds	r1, r3, #1
 8017e8c:	f000 f924 	bl	80180d8 <_Balloc>
 8017e90:	0029      	movs	r1, r5
 8017e92:	692b      	ldr	r3, [r5, #16]
 8017e94:	9003      	str	r0, [sp, #12]
 8017e96:	1c9a      	adds	r2, r3, #2
 8017e98:	0092      	lsls	r2, r2, #2
 8017e9a:	310c      	adds	r1, #12
 8017e9c:	300c      	adds	r0, #12
 8017e9e:	f7fc fa02 	bl	80142a6 <memcpy>
 8017ea2:	0029      	movs	r1, r5
 8017ea4:	9805      	ldr	r0, [sp, #20]
 8017ea6:	f000 f93f 	bl	8018128 <_Bfree>
 8017eaa:	9d03      	ldr	r5, [sp, #12]
 8017eac:	692b      	ldr	r3, [r5, #16]
 8017eae:	1c5a      	adds	r2, r3, #1
 8017eb0:	612a      	str	r2, [r5, #16]
 8017eb2:	2201      	movs	r2, #1
 8017eb4:	3304      	adds	r3, #4
 8017eb6:	009b      	lsls	r3, r3, #2
 8017eb8:	18eb      	adds	r3, r5, r3
 8017eba:	605a      	str	r2, [r3, #4]
 8017ebc:	e7c0      	b.n	8017e40 <__gethex+0x396>
 8017ebe:	692a      	ldr	r2, [r5, #16]
 8017ec0:	42a2      	cmp	r2, r4
 8017ec2:	dd0a      	ble.n	8017eda <__gethex+0x430>
 8017ec4:	2101      	movs	r1, #1
 8017ec6:	0028      	movs	r0, r5
 8017ec8:	f7ff fda6 	bl	8017a18 <rshift>
 8017ecc:	9b02      	ldr	r3, [sp, #8]
 8017ece:	3701      	adds	r7, #1
 8017ed0:	689b      	ldr	r3, [r3, #8]
 8017ed2:	2601      	movs	r6, #1
 8017ed4:	42bb      	cmp	r3, r7
 8017ed6:	dac8      	bge.n	8017e6a <__gethex+0x3c0>
 8017ed8:	e6dc      	b.n	8017c94 <__gethex+0x1ea>
 8017eda:	241f      	movs	r4, #31
 8017edc:	9a01      	ldr	r2, [sp, #4]
 8017ede:	2601      	movs	r6, #1
 8017ee0:	4022      	ands	r2, r4
 8017ee2:	1e14      	subs	r4, r2, #0
 8017ee4:	d0c1      	beq.n	8017e6a <__gethex+0x3c0>
 8017ee6:	9a04      	ldr	r2, [sp, #16]
 8017ee8:	189b      	adds	r3, r3, r2
 8017eea:	3b04      	subs	r3, #4
 8017eec:	6818      	ldr	r0, [r3, #0]
 8017eee:	f000 f9a1 	bl	8018234 <__hi0bits>
 8017ef2:	2120      	movs	r1, #32
 8017ef4:	1b0c      	subs	r4, r1, r4
 8017ef6:	42a0      	cmp	r0, r4
 8017ef8:	dbe4      	blt.n	8017ec4 <__gethex+0x41a>
 8017efa:	e7b6      	b.n	8017e6a <__gethex+0x3c0>
 8017efc:	0006      	movs	r6, r0
 8017efe:	e7b4      	b.n	8017e6a <__gethex+0x3c0>

08017f00 <L_shift>:
 8017f00:	2308      	movs	r3, #8
 8017f02:	b570      	push	{r4, r5, r6, lr}
 8017f04:	2520      	movs	r5, #32
 8017f06:	1a9a      	subs	r2, r3, r2
 8017f08:	0092      	lsls	r2, r2, #2
 8017f0a:	1aad      	subs	r5, r5, r2
 8017f0c:	6843      	ldr	r3, [r0, #4]
 8017f0e:	6806      	ldr	r6, [r0, #0]
 8017f10:	001c      	movs	r4, r3
 8017f12:	40ac      	lsls	r4, r5
 8017f14:	40d3      	lsrs	r3, r2
 8017f16:	4334      	orrs	r4, r6
 8017f18:	6004      	str	r4, [r0, #0]
 8017f1a:	6043      	str	r3, [r0, #4]
 8017f1c:	3004      	adds	r0, #4
 8017f1e:	4288      	cmp	r0, r1
 8017f20:	d3f4      	bcc.n	8017f0c <L_shift+0xc>
 8017f22:	bd70      	pop	{r4, r5, r6, pc}

08017f24 <__match>:
 8017f24:	b530      	push	{r4, r5, lr}
 8017f26:	6803      	ldr	r3, [r0, #0]
 8017f28:	780c      	ldrb	r4, [r1, #0]
 8017f2a:	3301      	adds	r3, #1
 8017f2c:	2c00      	cmp	r4, #0
 8017f2e:	d102      	bne.n	8017f36 <__match+0x12>
 8017f30:	6003      	str	r3, [r0, #0]
 8017f32:	2001      	movs	r0, #1
 8017f34:	bd30      	pop	{r4, r5, pc}
 8017f36:	781a      	ldrb	r2, [r3, #0]
 8017f38:	0015      	movs	r5, r2
 8017f3a:	3d41      	subs	r5, #65	; 0x41
 8017f3c:	2d19      	cmp	r5, #25
 8017f3e:	d800      	bhi.n	8017f42 <__match+0x1e>
 8017f40:	3220      	adds	r2, #32
 8017f42:	3101      	adds	r1, #1
 8017f44:	42a2      	cmp	r2, r4
 8017f46:	d0ef      	beq.n	8017f28 <__match+0x4>
 8017f48:	2000      	movs	r0, #0
 8017f4a:	e7f3      	b.n	8017f34 <__match+0x10>

08017f4c <__hexnan>:
 8017f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f4e:	b08b      	sub	sp, #44	; 0x2c
 8017f50:	9201      	str	r2, [sp, #4]
 8017f52:	680a      	ldr	r2, [r1, #0]
 8017f54:	9901      	ldr	r1, [sp, #4]
 8017f56:	1153      	asrs	r3, r2, #5
 8017f58:	009b      	lsls	r3, r3, #2
 8017f5a:	18cb      	adds	r3, r1, r3
 8017f5c:	9304      	str	r3, [sp, #16]
 8017f5e:	231f      	movs	r3, #31
 8017f60:	401a      	ands	r2, r3
 8017f62:	9008      	str	r0, [sp, #32]
 8017f64:	9206      	str	r2, [sp, #24]
 8017f66:	d002      	beq.n	8017f6e <__hexnan+0x22>
 8017f68:	9b04      	ldr	r3, [sp, #16]
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	9304      	str	r3, [sp, #16]
 8017f6e:	9b04      	ldr	r3, [sp, #16]
 8017f70:	2500      	movs	r5, #0
 8017f72:	1f1e      	subs	r6, r3, #4
 8017f74:	0037      	movs	r7, r6
 8017f76:	0034      	movs	r4, r6
 8017f78:	9b08      	ldr	r3, [sp, #32]
 8017f7a:	6035      	str	r5, [r6, #0]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	9507      	str	r5, [sp, #28]
 8017f80:	9305      	str	r3, [sp, #20]
 8017f82:	9502      	str	r5, [sp, #8]
 8017f84:	9b05      	ldr	r3, [sp, #20]
 8017f86:	3301      	adds	r3, #1
 8017f88:	9309      	str	r3, [sp, #36]	; 0x24
 8017f8a:	9b05      	ldr	r3, [sp, #20]
 8017f8c:	785b      	ldrb	r3, [r3, #1]
 8017f8e:	9303      	str	r3, [sp, #12]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d028      	beq.n	8017fe6 <__hexnan+0x9a>
 8017f94:	9803      	ldr	r0, [sp, #12]
 8017f96:	f7ff fd73 	bl	8017a80 <__hexdig_fun>
 8017f9a:	2800      	cmp	r0, #0
 8017f9c:	d145      	bne.n	801802a <__hexnan+0xde>
 8017f9e:	9b03      	ldr	r3, [sp, #12]
 8017fa0:	2b20      	cmp	r3, #32
 8017fa2:	d819      	bhi.n	8017fd8 <__hexnan+0x8c>
 8017fa4:	9b02      	ldr	r3, [sp, #8]
 8017fa6:	9a07      	ldr	r2, [sp, #28]
 8017fa8:	4293      	cmp	r3, r2
 8017faa:	dd12      	ble.n	8017fd2 <__hexnan+0x86>
 8017fac:	42bc      	cmp	r4, r7
 8017fae:	d206      	bcs.n	8017fbe <__hexnan+0x72>
 8017fb0:	2d07      	cmp	r5, #7
 8017fb2:	dc04      	bgt.n	8017fbe <__hexnan+0x72>
 8017fb4:	002a      	movs	r2, r5
 8017fb6:	0039      	movs	r1, r7
 8017fb8:	0020      	movs	r0, r4
 8017fba:	f7ff ffa1 	bl	8017f00 <L_shift>
 8017fbe:	9b01      	ldr	r3, [sp, #4]
 8017fc0:	2508      	movs	r5, #8
 8017fc2:	429c      	cmp	r4, r3
 8017fc4:	d905      	bls.n	8017fd2 <__hexnan+0x86>
 8017fc6:	1f27      	subs	r7, r4, #4
 8017fc8:	2500      	movs	r5, #0
 8017fca:	003c      	movs	r4, r7
 8017fcc:	9b02      	ldr	r3, [sp, #8]
 8017fce:	603d      	str	r5, [r7, #0]
 8017fd0:	9307      	str	r3, [sp, #28]
 8017fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fd4:	9305      	str	r3, [sp, #20]
 8017fd6:	e7d5      	b.n	8017f84 <__hexnan+0x38>
 8017fd8:	9b03      	ldr	r3, [sp, #12]
 8017fda:	2b29      	cmp	r3, #41	; 0x29
 8017fdc:	d14a      	bne.n	8018074 <__hexnan+0x128>
 8017fde:	9b05      	ldr	r3, [sp, #20]
 8017fe0:	9a08      	ldr	r2, [sp, #32]
 8017fe2:	3302      	adds	r3, #2
 8017fe4:	6013      	str	r3, [r2, #0]
 8017fe6:	9b02      	ldr	r3, [sp, #8]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d043      	beq.n	8018074 <__hexnan+0x128>
 8017fec:	42bc      	cmp	r4, r7
 8017fee:	d206      	bcs.n	8017ffe <__hexnan+0xb2>
 8017ff0:	2d07      	cmp	r5, #7
 8017ff2:	dc04      	bgt.n	8017ffe <__hexnan+0xb2>
 8017ff4:	002a      	movs	r2, r5
 8017ff6:	0039      	movs	r1, r7
 8017ff8:	0020      	movs	r0, r4
 8017ffa:	f7ff ff81 	bl	8017f00 <L_shift>
 8017ffe:	9b01      	ldr	r3, [sp, #4]
 8018000:	429c      	cmp	r4, r3
 8018002:	d926      	bls.n	8018052 <__hexnan+0x106>
 8018004:	cc04      	ldmia	r4!, {r2}
 8018006:	601a      	str	r2, [r3, #0]
 8018008:	3304      	adds	r3, #4
 801800a:	42a6      	cmp	r6, r4
 801800c:	d2fa      	bcs.n	8018004 <__hexnan+0xb8>
 801800e:	2200      	movs	r2, #0
 8018010:	c304      	stmia	r3!, {r2}
 8018012:	429e      	cmp	r6, r3
 8018014:	d2fc      	bcs.n	8018010 <__hexnan+0xc4>
 8018016:	6833      	ldr	r3, [r6, #0]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d104      	bne.n	8018026 <__hexnan+0xda>
 801801c:	9b01      	ldr	r3, [sp, #4]
 801801e:	429e      	cmp	r6, r3
 8018020:	d126      	bne.n	8018070 <__hexnan+0x124>
 8018022:	2301      	movs	r3, #1
 8018024:	6033      	str	r3, [r6, #0]
 8018026:	2005      	movs	r0, #5
 8018028:	e025      	b.n	8018076 <__hexnan+0x12a>
 801802a:	9b02      	ldr	r3, [sp, #8]
 801802c:	3501      	adds	r5, #1
 801802e:	3301      	adds	r3, #1
 8018030:	9302      	str	r3, [sp, #8]
 8018032:	2d08      	cmp	r5, #8
 8018034:	dd06      	ble.n	8018044 <__hexnan+0xf8>
 8018036:	9b01      	ldr	r3, [sp, #4]
 8018038:	429c      	cmp	r4, r3
 801803a:	d9ca      	bls.n	8017fd2 <__hexnan+0x86>
 801803c:	2300      	movs	r3, #0
 801803e:	2501      	movs	r5, #1
 8018040:	3c04      	subs	r4, #4
 8018042:	6023      	str	r3, [r4, #0]
 8018044:	220f      	movs	r2, #15
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	4010      	ands	r0, r2
 801804a:	011b      	lsls	r3, r3, #4
 801804c:	4318      	orrs	r0, r3
 801804e:	6020      	str	r0, [r4, #0]
 8018050:	e7bf      	b.n	8017fd2 <__hexnan+0x86>
 8018052:	9b06      	ldr	r3, [sp, #24]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d0de      	beq.n	8018016 <__hexnan+0xca>
 8018058:	2120      	movs	r1, #32
 801805a:	9a06      	ldr	r2, [sp, #24]
 801805c:	9b04      	ldr	r3, [sp, #16]
 801805e:	1a89      	subs	r1, r1, r2
 8018060:	2201      	movs	r2, #1
 8018062:	4252      	negs	r2, r2
 8018064:	40ca      	lsrs	r2, r1
 8018066:	3b04      	subs	r3, #4
 8018068:	6819      	ldr	r1, [r3, #0]
 801806a:	400a      	ands	r2, r1
 801806c:	601a      	str	r2, [r3, #0]
 801806e:	e7d2      	b.n	8018016 <__hexnan+0xca>
 8018070:	3e04      	subs	r6, #4
 8018072:	e7d0      	b.n	8018016 <__hexnan+0xca>
 8018074:	2004      	movs	r0, #4
 8018076:	b00b      	add	sp, #44	; 0x2c
 8018078:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801807a <__localeconv_l>:
 801807a:	30f0      	adds	r0, #240	; 0xf0
 801807c:	4770      	bx	lr
	...

08018080 <_localeconv_r>:
 8018080:	4b03      	ldr	r3, [pc, #12]	; (8018090 <_localeconv_r+0x10>)
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018086:	2800      	cmp	r0, #0
 8018088:	d100      	bne.n	801808c <_localeconv_r+0xc>
 801808a:	4802      	ldr	r0, [pc, #8]	; (8018094 <_localeconv_r+0x14>)
 801808c:	30f0      	adds	r0, #240	; 0xf0
 801808e:	4770      	bx	lr
 8018090:	200000f4 	.word	0x200000f4
 8018094:	20000520 	.word	0x20000520

08018098 <__retarget_lock_acquire_recursive>:
 8018098:	4770      	bx	lr

0801809a <__retarget_lock_release_recursive>:
 801809a:	4770      	bx	lr

0801809c <memchr>:
 801809c:	b2c9      	uxtb	r1, r1
 801809e:	1882      	adds	r2, r0, r2
 80180a0:	4290      	cmp	r0, r2
 80180a2:	d101      	bne.n	80180a8 <memchr+0xc>
 80180a4:	2000      	movs	r0, #0
 80180a6:	4770      	bx	lr
 80180a8:	7803      	ldrb	r3, [r0, #0]
 80180aa:	428b      	cmp	r3, r1
 80180ac:	d0fb      	beq.n	80180a6 <memchr+0xa>
 80180ae:	3001      	adds	r0, #1
 80180b0:	e7f6      	b.n	80180a0 <memchr+0x4>

080180b2 <memmove>:
 80180b2:	b510      	push	{r4, lr}
 80180b4:	4288      	cmp	r0, r1
 80180b6:	d902      	bls.n	80180be <memmove+0xc>
 80180b8:	188b      	adds	r3, r1, r2
 80180ba:	4298      	cmp	r0, r3
 80180bc:	d303      	bcc.n	80180c6 <memmove+0x14>
 80180be:	2300      	movs	r3, #0
 80180c0:	e007      	b.n	80180d2 <memmove+0x20>
 80180c2:	5c8b      	ldrb	r3, [r1, r2]
 80180c4:	5483      	strb	r3, [r0, r2]
 80180c6:	3a01      	subs	r2, #1
 80180c8:	d2fb      	bcs.n	80180c2 <memmove+0x10>
 80180ca:	bd10      	pop	{r4, pc}
 80180cc:	5ccc      	ldrb	r4, [r1, r3]
 80180ce:	54c4      	strb	r4, [r0, r3]
 80180d0:	3301      	adds	r3, #1
 80180d2:	429a      	cmp	r2, r3
 80180d4:	d1fa      	bne.n	80180cc <memmove+0x1a>
 80180d6:	e7f8      	b.n	80180ca <memmove+0x18>

080180d8 <_Balloc>:
 80180d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80180da:	b570      	push	{r4, r5, r6, lr}
 80180dc:	0004      	movs	r4, r0
 80180de:	000d      	movs	r5, r1
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d012      	beq.n	801810a <_Balloc+0x32>
 80180e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80180e6:	00ab      	lsls	r3, r5, #2
 80180e8:	18d3      	adds	r3, r2, r3
 80180ea:	6818      	ldr	r0, [r3, #0]
 80180ec:	2800      	cmp	r0, #0
 80180ee:	d115      	bne.n	801811c <_Balloc+0x44>
 80180f0:	2101      	movs	r1, #1
 80180f2:	000e      	movs	r6, r1
 80180f4:	40ae      	lsls	r6, r5
 80180f6:	1d72      	adds	r2, r6, #5
 80180f8:	0092      	lsls	r2, r2, #2
 80180fa:	0020      	movs	r0, r4
 80180fc:	f000 fcbe 	bl	8018a7c <_calloc_r>
 8018100:	2800      	cmp	r0, #0
 8018102:	d009      	beq.n	8018118 <_Balloc+0x40>
 8018104:	6045      	str	r5, [r0, #4]
 8018106:	6086      	str	r6, [r0, #8]
 8018108:	e00a      	b.n	8018120 <_Balloc+0x48>
 801810a:	2221      	movs	r2, #33	; 0x21
 801810c:	2104      	movs	r1, #4
 801810e:	f000 fcb5 	bl	8018a7c <_calloc_r>
 8018112:	64e0      	str	r0, [r4, #76]	; 0x4c
 8018114:	2800      	cmp	r0, #0
 8018116:	d1e5      	bne.n	80180e4 <_Balloc+0xc>
 8018118:	2000      	movs	r0, #0
 801811a:	bd70      	pop	{r4, r5, r6, pc}
 801811c:	6802      	ldr	r2, [r0, #0]
 801811e:	601a      	str	r2, [r3, #0]
 8018120:	2300      	movs	r3, #0
 8018122:	6103      	str	r3, [r0, #16]
 8018124:	60c3      	str	r3, [r0, #12]
 8018126:	e7f8      	b.n	801811a <_Balloc+0x42>

08018128 <_Bfree>:
 8018128:	2900      	cmp	r1, #0
 801812a:	d006      	beq.n	801813a <_Bfree+0x12>
 801812c:	684b      	ldr	r3, [r1, #4]
 801812e:	009a      	lsls	r2, r3, #2
 8018130:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018132:	189b      	adds	r3, r3, r2
 8018134:	681a      	ldr	r2, [r3, #0]
 8018136:	600a      	str	r2, [r1, #0]
 8018138:	6019      	str	r1, [r3, #0]
 801813a:	4770      	bx	lr

0801813c <__multadd>:
 801813c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801813e:	001e      	movs	r6, r3
 8018140:	2314      	movs	r3, #20
 8018142:	469c      	mov	ip, r3
 8018144:	0007      	movs	r7, r0
 8018146:	000c      	movs	r4, r1
 8018148:	2000      	movs	r0, #0
 801814a:	690d      	ldr	r5, [r1, #16]
 801814c:	448c      	add	ip, r1
 801814e:	4663      	mov	r3, ip
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	3001      	adds	r0, #1
 8018154:	b299      	uxth	r1, r3
 8018156:	4663      	mov	r3, ip
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	4351      	muls	r1, r2
 801815c:	0c1b      	lsrs	r3, r3, #16
 801815e:	4353      	muls	r3, r2
 8018160:	1989      	adds	r1, r1, r6
 8018162:	0c0e      	lsrs	r6, r1, #16
 8018164:	199b      	adds	r3, r3, r6
 8018166:	b289      	uxth	r1, r1
 8018168:	0c1e      	lsrs	r6, r3, #16
 801816a:	041b      	lsls	r3, r3, #16
 801816c:	185b      	adds	r3, r3, r1
 801816e:	4661      	mov	r1, ip
 8018170:	c108      	stmia	r1!, {r3}
 8018172:	468c      	mov	ip, r1
 8018174:	4285      	cmp	r5, r0
 8018176:	dcea      	bgt.n	801814e <__multadd+0x12>
 8018178:	2e00      	cmp	r6, #0
 801817a:	d01b      	beq.n	80181b4 <__multadd+0x78>
 801817c:	68a3      	ldr	r3, [r4, #8]
 801817e:	42ab      	cmp	r3, r5
 8018180:	dc12      	bgt.n	80181a8 <__multadd+0x6c>
 8018182:	6863      	ldr	r3, [r4, #4]
 8018184:	0038      	movs	r0, r7
 8018186:	1c59      	adds	r1, r3, #1
 8018188:	f7ff ffa6 	bl	80180d8 <_Balloc>
 801818c:	0021      	movs	r1, r4
 801818e:	6923      	ldr	r3, [r4, #16]
 8018190:	9001      	str	r0, [sp, #4]
 8018192:	1c9a      	adds	r2, r3, #2
 8018194:	0092      	lsls	r2, r2, #2
 8018196:	310c      	adds	r1, #12
 8018198:	300c      	adds	r0, #12
 801819a:	f7fc f884 	bl	80142a6 <memcpy>
 801819e:	0021      	movs	r1, r4
 80181a0:	0038      	movs	r0, r7
 80181a2:	f7ff ffc1 	bl	8018128 <_Bfree>
 80181a6:	9c01      	ldr	r4, [sp, #4]
 80181a8:	1d2b      	adds	r3, r5, #4
 80181aa:	009b      	lsls	r3, r3, #2
 80181ac:	18e3      	adds	r3, r4, r3
 80181ae:	3501      	adds	r5, #1
 80181b0:	605e      	str	r6, [r3, #4]
 80181b2:	6125      	str	r5, [r4, #16]
 80181b4:	0020      	movs	r0, r4
 80181b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080181b8 <__s2b>:
 80181b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80181ba:	0006      	movs	r6, r0
 80181bc:	0018      	movs	r0, r3
 80181be:	000c      	movs	r4, r1
 80181c0:	3008      	adds	r0, #8
 80181c2:	2109      	movs	r1, #9
 80181c4:	9301      	str	r3, [sp, #4]
 80181c6:	0015      	movs	r5, r2
 80181c8:	f7e8 f84c 	bl	8000264 <__divsi3>
 80181cc:	2301      	movs	r3, #1
 80181ce:	2100      	movs	r1, #0
 80181d0:	4283      	cmp	r3, r0
 80181d2:	db1f      	blt.n	8018214 <__s2b+0x5c>
 80181d4:	0030      	movs	r0, r6
 80181d6:	f7ff ff7f 	bl	80180d8 <_Balloc>
 80181da:	9b08      	ldr	r3, [sp, #32]
 80181dc:	6143      	str	r3, [r0, #20]
 80181de:	2301      	movs	r3, #1
 80181e0:	6103      	str	r3, [r0, #16]
 80181e2:	2d09      	cmp	r5, #9
 80181e4:	dd19      	ble.n	801821a <__s2b+0x62>
 80181e6:	0023      	movs	r3, r4
 80181e8:	3309      	adds	r3, #9
 80181ea:	001f      	movs	r7, r3
 80181ec:	9300      	str	r3, [sp, #0]
 80181ee:	1964      	adds	r4, r4, r5
 80181f0:	783b      	ldrb	r3, [r7, #0]
 80181f2:	0001      	movs	r1, r0
 80181f4:	3b30      	subs	r3, #48	; 0x30
 80181f6:	220a      	movs	r2, #10
 80181f8:	0030      	movs	r0, r6
 80181fa:	3701      	adds	r7, #1
 80181fc:	f7ff ff9e 	bl	801813c <__multadd>
 8018200:	42a7      	cmp	r7, r4
 8018202:	d1f5      	bne.n	80181f0 <__s2b+0x38>
 8018204:	9b00      	ldr	r3, [sp, #0]
 8018206:	195c      	adds	r4, r3, r5
 8018208:	3c08      	subs	r4, #8
 801820a:	002f      	movs	r7, r5
 801820c:	9b01      	ldr	r3, [sp, #4]
 801820e:	429f      	cmp	r7, r3
 8018210:	db06      	blt.n	8018220 <__s2b+0x68>
 8018212:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018214:	005b      	lsls	r3, r3, #1
 8018216:	3101      	adds	r1, #1
 8018218:	e7da      	b.n	80181d0 <__s2b+0x18>
 801821a:	340a      	adds	r4, #10
 801821c:	2509      	movs	r5, #9
 801821e:	e7f4      	b.n	801820a <__s2b+0x52>
 8018220:	1b63      	subs	r3, r4, r5
 8018222:	5ddb      	ldrb	r3, [r3, r7]
 8018224:	0001      	movs	r1, r0
 8018226:	3b30      	subs	r3, #48	; 0x30
 8018228:	220a      	movs	r2, #10
 801822a:	0030      	movs	r0, r6
 801822c:	f7ff ff86 	bl	801813c <__multadd>
 8018230:	3701      	adds	r7, #1
 8018232:	e7eb      	b.n	801820c <__s2b+0x54>

08018234 <__hi0bits>:
 8018234:	0003      	movs	r3, r0
 8018236:	0c02      	lsrs	r2, r0, #16
 8018238:	2000      	movs	r0, #0
 801823a:	4282      	cmp	r2, r0
 801823c:	d101      	bne.n	8018242 <__hi0bits+0xe>
 801823e:	041b      	lsls	r3, r3, #16
 8018240:	3010      	adds	r0, #16
 8018242:	0e1a      	lsrs	r2, r3, #24
 8018244:	d101      	bne.n	801824a <__hi0bits+0x16>
 8018246:	3008      	adds	r0, #8
 8018248:	021b      	lsls	r3, r3, #8
 801824a:	0f1a      	lsrs	r2, r3, #28
 801824c:	d101      	bne.n	8018252 <__hi0bits+0x1e>
 801824e:	3004      	adds	r0, #4
 8018250:	011b      	lsls	r3, r3, #4
 8018252:	0f9a      	lsrs	r2, r3, #30
 8018254:	d101      	bne.n	801825a <__hi0bits+0x26>
 8018256:	3002      	adds	r0, #2
 8018258:	009b      	lsls	r3, r3, #2
 801825a:	2b00      	cmp	r3, #0
 801825c:	db03      	blt.n	8018266 <__hi0bits+0x32>
 801825e:	3001      	adds	r0, #1
 8018260:	005b      	lsls	r3, r3, #1
 8018262:	d400      	bmi.n	8018266 <__hi0bits+0x32>
 8018264:	2020      	movs	r0, #32
 8018266:	4770      	bx	lr

08018268 <__lo0bits>:
 8018268:	2207      	movs	r2, #7
 801826a:	6803      	ldr	r3, [r0, #0]
 801826c:	b510      	push	{r4, lr}
 801826e:	0001      	movs	r1, r0
 8018270:	401a      	ands	r2, r3
 8018272:	d00d      	beq.n	8018290 <__lo0bits+0x28>
 8018274:	2401      	movs	r4, #1
 8018276:	2000      	movs	r0, #0
 8018278:	4223      	tst	r3, r4
 801827a:	d105      	bne.n	8018288 <__lo0bits+0x20>
 801827c:	3002      	adds	r0, #2
 801827e:	4203      	tst	r3, r0
 8018280:	d003      	beq.n	801828a <__lo0bits+0x22>
 8018282:	40e3      	lsrs	r3, r4
 8018284:	0020      	movs	r0, r4
 8018286:	600b      	str	r3, [r1, #0]
 8018288:	bd10      	pop	{r4, pc}
 801828a:	089b      	lsrs	r3, r3, #2
 801828c:	600b      	str	r3, [r1, #0]
 801828e:	e7fb      	b.n	8018288 <__lo0bits+0x20>
 8018290:	b29c      	uxth	r4, r3
 8018292:	0010      	movs	r0, r2
 8018294:	2c00      	cmp	r4, #0
 8018296:	d101      	bne.n	801829c <__lo0bits+0x34>
 8018298:	2010      	movs	r0, #16
 801829a:	0c1b      	lsrs	r3, r3, #16
 801829c:	b2da      	uxtb	r2, r3
 801829e:	2a00      	cmp	r2, #0
 80182a0:	d101      	bne.n	80182a6 <__lo0bits+0x3e>
 80182a2:	3008      	adds	r0, #8
 80182a4:	0a1b      	lsrs	r3, r3, #8
 80182a6:	071a      	lsls	r2, r3, #28
 80182a8:	d101      	bne.n	80182ae <__lo0bits+0x46>
 80182aa:	3004      	adds	r0, #4
 80182ac:	091b      	lsrs	r3, r3, #4
 80182ae:	079a      	lsls	r2, r3, #30
 80182b0:	d101      	bne.n	80182b6 <__lo0bits+0x4e>
 80182b2:	3002      	adds	r0, #2
 80182b4:	089b      	lsrs	r3, r3, #2
 80182b6:	07da      	lsls	r2, r3, #31
 80182b8:	d4e8      	bmi.n	801828c <__lo0bits+0x24>
 80182ba:	085b      	lsrs	r3, r3, #1
 80182bc:	d001      	beq.n	80182c2 <__lo0bits+0x5a>
 80182be:	3001      	adds	r0, #1
 80182c0:	e7e4      	b.n	801828c <__lo0bits+0x24>
 80182c2:	2020      	movs	r0, #32
 80182c4:	e7e0      	b.n	8018288 <__lo0bits+0x20>

080182c6 <__i2b>:
 80182c6:	b510      	push	{r4, lr}
 80182c8:	000c      	movs	r4, r1
 80182ca:	2101      	movs	r1, #1
 80182cc:	f7ff ff04 	bl	80180d8 <_Balloc>
 80182d0:	2301      	movs	r3, #1
 80182d2:	6144      	str	r4, [r0, #20]
 80182d4:	6103      	str	r3, [r0, #16]
 80182d6:	bd10      	pop	{r4, pc}

080182d8 <__multiply>:
 80182d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182da:	690b      	ldr	r3, [r1, #16]
 80182dc:	0014      	movs	r4, r2
 80182de:	6912      	ldr	r2, [r2, #16]
 80182e0:	b089      	sub	sp, #36	; 0x24
 80182e2:	000d      	movs	r5, r1
 80182e4:	4293      	cmp	r3, r2
 80182e6:	da01      	bge.n	80182ec <__multiply+0x14>
 80182e8:	0025      	movs	r5, r4
 80182ea:	000c      	movs	r4, r1
 80182ec:	692f      	ldr	r7, [r5, #16]
 80182ee:	6926      	ldr	r6, [r4, #16]
 80182f0:	6869      	ldr	r1, [r5, #4]
 80182f2:	19bb      	adds	r3, r7, r6
 80182f4:	9302      	str	r3, [sp, #8]
 80182f6:	68ab      	ldr	r3, [r5, #8]
 80182f8:	19ba      	adds	r2, r7, r6
 80182fa:	4293      	cmp	r3, r2
 80182fc:	da00      	bge.n	8018300 <__multiply+0x28>
 80182fe:	3101      	adds	r1, #1
 8018300:	f7ff feea 	bl	80180d8 <_Balloc>
 8018304:	0002      	movs	r2, r0
 8018306:	19bb      	adds	r3, r7, r6
 8018308:	3214      	adds	r2, #20
 801830a:	009b      	lsls	r3, r3, #2
 801830c:	18d3      	adds	r3, r2, r3
 801830e:	469c      	mov	ip, r3
 8018310:	2100      	movs	r1, #0
 8018312:	0013      	movs	r3, r2
 8018314:	9004      	str	r0, [sp, #16]
 8018316:	4563      	cmp	r3, ip
 8018318:	d31d      	bcc.n	8018356 <__multiply+0x7e>
 801831a:	3514      	adds	r5, #20
 801831c:	00bf      	lsls	r7, r7, #2
 801831e:	19eb      	adds	r3, r5, r7
 8018320:	3414      	adds	r4, #20
 8018322:	00b6      	lsls	r6, r6, #2
 8018324:	9305      	str	r3, [sp, #20]
 8018326:	19a3      	adds	r3, r4, r6
 8018328:	9503      	str	r5, [sp, #12]
 801832a:	9401      	str	r4, [sp, #4]
 801832c:	9307      	str	r3, [sp, #28]
 801832e:	9b07      	ldr	r3, [sp, #28]
 8018330:	9901      	ldr	r1, [sp, #4]
 8018332:	4299      	cmp	r1, r3
 8018334:	d311      	bcc.n	801835a <__multiply+0x82>
 8018336:	9b02      	ldr	r3, [sp, #8]
 8018338:	2b00      	cmp	r3, #0
 801833a:	dd06      	ble.n	801834a <__multiply+0x72>
 801833c:	2304      	movs	r3, #4
 801833e:	425b      	negs	r3, r3
 8018340:	449c      	add	ip, r3
 8018342:	4663      	mov	r3, ip
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d051      	beq.n	80183ee <__multiply+0x116>
 801834a:	9b04      	ldr	r3, [sp, #16]
 801834c:	9a02      	ldr	r2, [sp, #8]
 801834e:	0018      	movs	r0, r3
 8018350:	611a      	str	r2, [r3, #16]
 8018352:	b009      	add	sp, #36	; 0x24
 8018354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018356:	c302      	stmia	r3!, {r1}
 8018358:	e7dd      	b.n	8018316 <__multiply+0x3e>
 801835a:	9b01      	ldr	r3, [sp, #4]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	b298      	uxth	r0, r3
 8018360:	2800      	cmp	r0, #0
 8018362:	d01c      	beq.n	801839e <__multiply+0xc6>
 8018364:	0015      	movs	r5, r2
 8018366:	2600      	movs	r6, #0
 8018368:	9f03      	ldr	r7, [sp, #12]
 801836a:	cf02      	ldmia	r7!, {r1}
 801836c:	682c      	ldr	r4, [r5, #0]
 801836e:	b28b      	uxth	r3, r1
 8018370:	4343      	muls	r3, r0
 8018372:	0c09      	lsrs	r1, r1, #16
 8018374:	4341      	muls	r1, r0
 8018376:	b2a4      	uxth	r4, r4
 8018378:	191b      	adds	r3, r3, r4
 801837a:	199b      	adds	r3, r3, r6
 801837c:	000e      	movs	r6, r1
 801837e:	6829      	ldr	r1, [r5, #0]
 8018380:	9506      	str	r5, [sp, #24]
 8018382:	0c09      	lsrs	r1, r1, #16
 8018384:	1871      	adds	r1, r6, r1
 8018386:	0c1e      	lsrs	r6, r3, #16
 8018388:	1989      	adds	r1, r1, r6
 801838a:	0c0e      	lsrs	r6, r1, #16
 801838c:	b29b      	uxth	r3, r3
 801838e:	0409      	lsls	r1, r1, #16
 8018390:	430b      	orrs	r3, r1
 8018392:	c508      	stmia	r5!, {r3}
 8018394:	9b05      	ldr	r3, [sp, #20]
 8018396:	42bb      	cmp	r3, r7
 8018398:	d8e7      	bhi.n	801836a <__multiply+0x92>
 801839a:	9b06      	ldr	r3, [sp, #24]
 801839c:	605e      	str	r6, [r3, #4]
 801839e:	9b01      	ldr	r3, [sp, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	0c1d      	lsrs	r5, r3, #16
 80183a4:	d01e      	beq.n	80183e4 <__multiply+0x10c>
 80183a6:	0010      	movs	r0, r2
 80183a8:	2700      	movs	r7, #0
 80183aa:	6813      	ldr	r3, [r2, #0]
 80183ac:	9e03      	ldr	r6, [sp, #12]
 80183ae:	6831      	ldr	r1, [r6, #0]
 80183b0:	6804      	ldr	r4, [r0, #0]
 80183b2:	b289      	uxth	r1, r1
 80183b4:	4369      	muls	r1, r5
 80183b6:	0c24      	lsrs	r4, r4, #16
 80183b8:	1909      	adds	r1, r1, r4
 80183ba:	19c9      	adds	r1, r1, r7
 80183bc:	040f      	lsls	r7, r1, #16
 80183be:	b29b      	uxth	r3, r3
 80183c0:	433b      	orrs	r3, r7
 80183c2:	6003      	str	r3, [r0, #0]
 80183c4:	ce80      	ldmia	r6!, {r7}
 80183c6:	6843      	ldr	r3, [r0, #4]
 80183c8:	0c3f      	lsrs	r7, r7, #16
 80183ca:	436f      	muls	r7, r5
 80183cc:	b29b      	uxth	r3, r3
 80183ce:	18fb      	adds	r3, r7, r3
 80183d0:	0c09      	lsrs	r1, r1, #16
 80183d2:	185b      	adds	r3, r3, r1
 80183d4:	9905      	ldr	r1, [sp, #20]
 80183d6:	9006      	str	r0, [sp, #24]
 80183d8:	0c1f      	lsrs	r7, r3, #16
 80183da:	3004      	adds	r0, #4
 80183dc:	42b1      	cmp	r1, r6
 80183de:	d8e6      	bhi.n	80183ae <__multiply+0xd6>
 80183e0:	9906      	ldr	r1, [sp, #24]
 80183e2:	604b      	str	r3, [r1, #4]
 80183e4:	9b01      	ldr	r3, [sp, #4]
 80183e6:	3204      	adds	r2, #4
 80183e8:	3304      	adds	r3, #4
 80183ea:	9301      	str	r3, [sp, #4]
 80183ec:	e79f      	b.n	801832e <__multiply+0x56>
 80183ee:	9b02      	ldr	r3, [sp, #8]
 80183f0:	3b01      	subs	r3, #1
 80183f2:	9302      	str	r3, [sp, #8]
 80183f4:	e79f      	b.n	8018336 <__multiply+0x5e>
	...

080183f8 <__pow5mult>:
 80183f8:	2303      	movs	r3, #3
 80183fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80183fc:	4013      	ands	r3, r2
 80183fe:	0006      	movs	r6, r0
 8018400:	000f      	movs	r7, r1
 8018402:	0015      	movs	r5, r2
 8018404:	2b00      	cmp	r3, #0
 8018406:	d008      	beq.n	801841a <__pow5mult+0x22>
 8018408:	491a      	ldr	r1, [pc, #104]	; (8018474 <__pow5mult+0x7c>)
 801840a:	3b01      	subs	r3, #1
 801840c:	009a      	lsls	r2, r3, #2
 801840e:	5852      	ldr	r2, [r2, r1]
 8018410:	2300      	movs	r3, #0
 8018412:	0039      	movs	r1, r7
 8018414:	f7ff fe92 	bl	801813c <__multadd>
 8018418:	0007      	movs	r7, r0
 801841a:	10ad      	asrs	r5, r5, #2
 801841c:	d027      	beq.n	801846e <__pow5mult+0x76>
 801841e:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018420:	2c00      	cmp	r4, #0
 8018422:	d107      	bne.n	8018434 <__pow5mult+0x3c>
 8018424:	4914      	ldr	r1, [pc, #80]	; (8018478 <__pow5mult+0x80>)
 8018426:	0030      	movs	r0, r6
 8018428:	f7ff ff4d 	bl	80182c6 <__i2b>
 801842c:	2300      	movs	r3, #0
 801842e:	0004      	movs	r4, r0
 8018430:	64b0      	str	r0, [r6, #72]	; 0x48
 8018432:	6003      	str	r3, [r0, #0]
 8018434:	2301      	movs	r3, #1
 8018436:	421d      	tst	r5, r3
 8018438:	d00a      	beq.n	8018450 <__pow5mult+0x58>
 801843a:	0039      	movs	r1, r7
 801843c:	0022      	movs	r2, r4
 801843e:	0030      	movs	r0, r6
 8018440:	f7ff ff4a 	bl	80182d8 <__multiply>
 8018444:	0039      	movs	r1, r7
 8018446:	9001      	str	r0, [sp, #4]
 8018448:	0030      	movs	r0, r6
 801844a:	f7ff fe6d 	bl	8018128 <_Bfree>
 801844e:	9f01      	ldr	r7, [sp, #4]
 8018450:	106d      	asrs	r5, r5, #1
 8018452:	d00c      	beq.n	801846e <__pow5mult+0x76>
 8018454:	6820      	ldr	r0, [r4, #0]
 8018456:	2800      	cmp	r0, #0
 8018458:	d107      	bne.n	801846a <__pow5mult+0x72>
 801845a:	0022      	movs	r2, r4
 801845c:	0021      	movs	r1, r4
 801845e:	0030      	movs	r0, r6
 8018460:	f7ff ff3a 	bl	80182d8 <__multiply>
 8018464:	2300      	movs	r3, #0
 8018466:	6020      	str	r0, [r4, #0]
 8018468:	6003      	str	r3, [r0, #0]
 801846a:	0004      	movs	r4, r0
 801846c:	e7e2      	b.n	8018434 <__pow5mult+0x3c>
 801846e:	0038      	movs	r0, r7
 8018470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018472:	46c0      	nop			; (mov r8, r8)
 8018474:	0801bd40 	.word	0x0801bd40
 8018478:	00000271 	.word	0x00000271

0801847c <__lshift>:
 801847c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801847e:	000d      	movs	r5, r1
 8018480:	0017      	movs	r7, r2
 8018482:	692b      	ldr	r3, [r5, #16]
 8018484:	1154      	asrs	r4, r2, #5
 8018486:	b085      	sub	sp, #20
 8018488:	18e3      	adds	r3, r4, r3
 801848a:	9301      	str	r3, [sp, #4]
 801848c:	3301      	adds	r3, #1
 801848e:	9300      	str	r3, [sp, #0]
 8018490:	6849      	ldr	r1, [r1, #4]
 8018492:	68ab      	ldr	r3, [r5, #8]
 8018494:	9002      	str	r0, [sp, #8]
 8018496:	9a00      	ldr	r2, [sp, #0]
 8018498:	4293      	cmp	r3, r2
 801849a:	db35      	blt.n	8018508 <__lshift+0x8c>
 801849c:	9802      	ldr	r0, [sp, #8]
 801849e:	f7ff fe1b 	bl	80180d8 <_Balloc>
 80184a2:	2300      	movs	r3, #0
 80184a4:	0002      	movs	r2, r0
 80184a6:	0006      	movs	r6, r0
 80184a8:	0019      	movs	r1, r3
 80184aa:	3214      	adds	r2, #20
 80184ac:	42a3      	cmp	r3, r4
 80184ae:	db2e      	blt.n	801850e <__lshift+0x92>
 80184b0:	43e3      	mvns	r3, r4
 80184b2:	17db      	asrs	r3, r3, #31
 80184b4:	401c      	ands	r4, r3
 80184b6:	002b      	movs	r3, r5
 80184b8:	00a4      	lsls	r4, r4, #2
 80184ba:	1914      	adds	r4, r2, r4
 80184bc:	692a      	ldr	r2, [r5, #16]
 80184be:	3314      	adds	r3, #20
 80184c0:	0092      	lsls	r2, r2, #2
 80184c2:	189a      	adds	r2, r3, r2
 80184c4:	4694      	mov	ip, r2
 80184c6:	221f      	movs	r2, #31
 80184c8:	4017      	ands	r7, r2
 80184ca:	d024      	beq.n	8018516 <__lshift+0x9a>
 80184cc:	3201      	adds	r2, #1
 80184ce:	1bd2      	subs	r2, r2, r7
 80184d0:	9203      	str	r2, [sp, #12]
 80184d2:	2200      	movs	r2, #0
 80184d4:	6819      	ldr	r1, [r3, #0]
 80184d6:	0020      	movs	r0, r4
 80184d8:	40b9      	lsls	r1, r7
 80184da:	430a      	orrs	r2, r1
 80184dc:	c404      	stmia	r4!, {r2}
 80184de:	cb04      	ldmia	r3!, {r2}
 80184e0:	9903      	ldr	r1, [sp, #12]
 80184e2:	40ca      	lsrs	r2, r1
 80184e4:	459c      	cmp	ip, r3
 80184e6:	d8f5      	bhi.n	80184d4 <__lshift+0x58>
 80184e8:	6042      	str	r2, [r0, #4]
 80184ea:	2a00      	cmp	r2, #0
 80184ec:	d002      	beq.n	80184f4 <__lshift+0x78>
 80184ee:	9b01      	ldr	r3, [sp, #4]
 80184f0:	3302      	adds	r3, #2
 80184f2:	9300      	str	r3, [sp, #0]
 80184f4:	9b00      	ldr	r3, [sp, #0]
 80184f6:	9802      	ldr	r0, [sp, #8]
 80184f8:	3b01      	subs	r3, #1
 80184fa:	6133      	str	r3, [r6, #16]
 80184fc:	0029      	movs	r1, r5
 80184fe:	f7ff fe13 	bl	8018128 <_Bfree>
 8018502:	0030      	movs	r0, r6
 8018504:	b005      	add	sp, #20
 8018506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018508:	3101      	adds	r1, #1
 801850a:	005b      	lsls	r3, r3, #1
 801850c:	e7c3      	b.n	8018496 <__lshift+0x1a>
 801850e:	0098      	lsls	r0, r3, #2
 8018510:	5011      	str	r1, [r2, r0]
 8018512:	3301      	adds	r3, #1
 8018514:	e7ca      	b.n	80184ac <__lshift+0x30>
 8018516:	cb04      	ldmia	r3!, {r2}
 8018518:	c404      	stmia	r4!, {r2}
 801851a:	459c      	cmp	ip, r3
 801851c:	d8fb      	bhi.n	8018516 <__lshift+0x9a>
 801851e:	e7e9      	b.n	80184f4 <__lshift+0x78>

08018520 <__mcmp>:
 8018520:	690a      	ldr	r2, [r1, #16]
 8018522:	6903      	ldr	r3, [r0, #16]
 8018524:	b530      	push	{r4, r5, lr}
 8018526:	1a9b      	subs	r3, r3, r2
 8018528:	d10d      	bne.n	8018546 <__mcmp+0x26>
 801852a:	0092      	lsls	r2, r2, #2
 801852c:	3014      	adds	r0, #20
 801852e:	3114      	adds	r1, #20
 8018530:	1884      	adds	r4, r0, r2
 8018532:	1889      	adds	r1, r1, r2
 8018534:	3c04      	subs	r4, #4
 8018536:	3904      	subs	r1, #4
 8018538:	6825      	ldr	r5, [r4, #0]
 801853a:	680a      	ldr	r2, [r1, #0]
 801853c:	4295      	cmp	r5, r2
 801853e:	d004      	beq.n	801854a <__mcmp+0x2a>
 8018540:	2301      	movs	r3, #1
 8018542:	4295      	cmp	r5, r2
 8018544:	d304      	bcc.n	8018550 <__mcmp+0x30>
 8018546:	0018      	movs	r0, r3
 8018548:	bd30      	pop	{r4, r5, pc}
 801854a:	42a0      	cmp	r0, r4
 801854c:	d3f2      	bcc.n	8018534 <__mcmp+0x14>
 801854e:	e7fa      	b.n	8018546 <__mcmp+0x26>
 8018550:	425b      	negs	r3, r3
 8018552:	e7f8      	b.n	8018546 <__mcmp+0x26>

08018554 <__mdiff>:
 8018554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018556:	000d      	movs	r5, r1
 8018558:	b085      	sub	sp, #20
 801855a:	0007      	movs	r7, r0
 801855c:	0011      	movs	r1, r2
 801855e:	0028      	movs	r0, r5
 8018560:	0014      	movs	r4, r2
 8018562:	f7ff ffdd 	bl	8018520 <__mcmp>
 8018566:	1e06      	subs	r6, r0, #0
 8018568:	d108      	bne.n	801857c <__mdiff+0x28>
 801856a:	0001      	movs	r1, r0
 801856c:	0038      	movs	r0, r7
 801856e:	f7ff fdb3 	bl	80180d8 <_Balloc>
 8018572:	2301      	movs	r3, #1
 8018574:	6146      	str	r6, [r0, #20]
 8018576:	6103      	str	r3, [r0, #16]
 8018578:	b005      	add	sp, #20
 801857a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801857c:	2301      	movs	r3, #1
 801857e:	9301      	str	r3, [sp, #4]
 8018580:	2800      	cmp	r0, #0
 8018582:	db04      	blt.n	801858e <__mdiff+0x3a>
 8018584:	0023      	movs	r3, r4
 8018586:	002c      	movs	r4, r5
 8018588:	001d      	movs	r5, r3
 801858a:	2300      	movs	r3, #0
 801858c:	9301      	str	r3, [sp, #4]
 801858e:	6861      	ldr	r1, [r4, #4]
 8018590:	0038      	movs	r0, r7
 8018592:	f7ff fda1 	bl	80180d8 <_Balloc>
 8018596:	002f      	movs	r7, r5
 8018598:	2200      	movs	r2, #0
 801859a:	9b01      	ldr	r3, [sp, #4]
 801859c:	6926      	ldr	r6, [r4, #16]
 801859e:	60c3      	str	r3, [r0, #12]
 80185a0:	3414      	adds	r4, #20
 80185a2:	00b3      	lsls	r3, r6, #2
 80185a4:	18e3      	adds	r3, r4, r3
 80185a6:	9302      	str	r3, [sp, #8]
 80185a8:	692b      	ldr	r3, [r5, #16]
 80185aa:	3714      	adds	r7, #20
 80185ac:	009b      	lsls	r3, r3, #2
 80185ae:	18fb      	adds	r3, r7, r3
 80185b0:	9303      	str	r3, [sp, #12]
 80185b2:	0003      	movs	r3, r0
 80185b4:	4694      	mov	ip, r2
 80185b6:	3314      	adds	r3, #20
 80185b8:	cc20      	ldmia	r4!, {r5}
 80185ba:	cf04      	ldmia	r7!, {r2}
 80185bc:	9201      	str	r2, [sp, #4]
 80185be:	b2aa      	uxth	r2, r5
 80185c0:	4494      	add	ip, r2
 80185c2:	466a      	mov	r2, sp
 80185c4:	4661      	mov	r1, ip
 80185c6:	8892      	ldrh	r2, [r2, #4]
 80185c8:	0c2d      	lsrs	r5, r5, #16
 80185ca:	1a8a      	subs	r2, r1, r2
 80185cc:	9901      	ldr	r1, [sp, #4]
 80185ce:	0c09      	lsrs	r1, r1, #16
 80185d0:	1a69      	subs	r1, r5, r1
 80185d2:	1415      	asrs	r5, r2, #16
 80185d4:	1949      	adds	r1, r1, r5
 80185d6:	140d      	asrs	r5, r1, #16
 80185d8:	b292      	uxth	r2, r2
 80185da:	0409      	lsls	r1, r1, #16
 80185dc:	430a      	orrs	r2, r1
 80185de:	601a      	str	r2, [r3, #0]
 80185e0:	9a03      	ldr	r2, [sp, #12]
 80185e2:	46ac      	mov	ip, r5
 80185e4:	3304      	adds	r3, #4
 80185e6:	42ba      	cmp	r2, r7
 80185e8:	d8e6      	bhi.n	80185b8 <__mdiff+0x64>
 80185ea:	9902      	ldr	r1, [sp, #8]
 80185ec:	001a      	movs	r2, r3
 80185ee:	428c      	cmp	r4, r1
 80185f0:	d305      	bcc.n	80185fe <__mdiff+0xaa>
 80185f2:	3a04      	subs	r2, #4
 80185f4:	6813      	ldr	r3, [r2, #0]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d00e      	beq.n	8018618 <__mdiff+0xc4>
 80185fa:	6106      	str	r6, [r0, #16]
 80185fc:	e7bc      	b.n	8018578 <__mdiff+0x24>
 80185fe:	cc04      	ldmia	r4!, {r2}
 8018600:	b291      	uxth	r1, r2
 8018602:	4461      	add	r1, ip
 8018604:	140d      	asrs	r5, r1, #16
 8018606:	0c12      	lsrs	r2, r2, #16
 8018608:	1952      	adds	r2, r2, r5
 801860a:	1415      	asrs	r5, r2, #16
 801860c:	b289      	uxth	r1, r1
 801860e:	0412      	lsls	r2, r2, #16
 8018610:	430a      	orrs	r2, r1
 8018612:	46ac      	mov	ip, r5
 8018614:	c304      	stmia	r3!, {r2}
 8018616:	e7e8      	b.n	80185ea <__mdiff+0x96>
 8018618:	3e01      	subs	r6, #1
 801861a:	e7ea      	b.n	80185f2 <__mdiff+0x9e>

0801861c <__ulp>:
 801861c:	000b      	movs	r3, r1
 801861e:	4910      	ldr	r1, [pc, #64]	; (8018660 <__ulp+0x44>)
 8018620:	b510      	push	{r4, lr}
 8018622:	4019      	ands	r1, r3
 8018624:	4b0f      	ldr	r3, [pc, #60]	; (8018664 <__ulp+0x48>)
 8018626:	18c9      	adds	r1, r1, r3
 8018628:	2900      	cmp	r1, #0
 801862a:	dd04      	ble.n	8018636 <__ulp+0x1a>
 801862c:	2200      	movs	r2, #0
 801862e:	000b      	movs	r3, r1
 8018630:	0010      	movs	r0, r2
 8018632:	0019      	movs	r1, r3
 8018634:	bd10      	pop	{r4, pc}
 8018636:	4249      	negs	r1, r1
 8018638:	1509      	asrs	r1, r1, #20
 801863a:	2200      	movs	r2, #0
 801863c:	2300      	movs	r3, #0
 801863e:	2913      	cmp	r1, #19
 8018640:	dc04      	bgt.n	801864c <__ulp+0x30>
 8018642:	2080      	movs	r0, #128	; 0x80
 8018644:	0300      	lsls	r0, r0, #12
 8018646:	4108      	asrs	r0, r1
 8018648:	0003      	movs	r3, r0
 801864a:	e7f1      	b.n	8018630 <__ulp+0x14>
 801864c:	3914      	subs	r1, #20
 801864e:	2001      	movs	r0, #1
 8018650:	291e      	cmp	r1, #30
 8018652:	dc02      	bgt.n	801865a <__ulp+0x3e>
 8018654:	241f      	movs	r4, #31
 8018656:	1a61      	subs	r1, r4, r1
 8018658:	4088      	lsls	r0, r1
 801865a:	0002      	movs	r2, r0
 801865c:	e7e8      	b.n	8018630 <__ulp+0x14>
 801865e:	46c0      	nop			; (mov r8, r8)
 8018660:	7ff00000 	.word	0x7ff00000
 8018664:	fcc00000 	.word	0xfcc00000

08018668 <__b2d>:
 8018668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801866a:	0006      	movs	r6, r0
 801866c:	6903      	ldr	r3, [r0, #16]
 801866e:	3614      	adds	r6, #20
 8018670:	009b      	lsls	r3, r3, #2
 8018672:	18f3      	adds	r3, r6, r3
 8018674:	1f1d      	subs	r5, r3, #4
 8018676:	682c      	ldr	r4, [r5, #0]
 8018678:	000f      	movs	r7, r1
 801867a:	0020      	movs	r0, r4
 801867c:	9301      	str	r3, [sp, #4]
 801867e:	f7ff fdd9 	bl	8018234 <__hi0bits>
 8018682:	2320      	movs	r3, #32
 8018684:	1a1b      	subs	r3, r3, r0
 8018686:	603b      	str	r3, [r7, #0]
 8018688:	491c      	ldr	r1, [pc, #112]	; (80186fc <__b2d+0x94>)
 801868a:	280a      	cmp	r0, #10
 801868c:	dc16      	bgt.n	80186bc <__b2d+0x54>
 801868e:	230b      	movs	r3, #11
 8018690:	0027      	movs	r7, r4
 8018692:	1a1b      	subs	r3, r3, r0
 8018694:	40df      	lsrs	r7, r3
 8018696:	4339      	orrs	r1, r7
 8018698:	469c      	mov	ip, r3
 801869a:	000b      	movs	r3, r1
 801869c:	2100      	movs	r1, #0
 801869e:	42ae      	cmp	r6, r5
 80186a0:	d202      	bcs.n	80186a8 <__b2d+0x40>
 80186a2:	9901      	ldr	r1, [sp, #4]
 80186a4:	3908      	subs	r1, #8
 80186a6:	6809      	ldr	r1, [r1, #0]
 80186a8:	3015      	adds	r0, #21
 80186aa:	4084      	lsls	r4, r0
 80186ac:	4660      	mov	r0, ip
 80186ae:	40c1      	lsrs	r1, r0
 80186b0:	430c      	orrs	r4, r1
 80186b2:	0022      	movs	r2, r4
 80186b4:	0010      	movs	r0, r2
 80186b6:	0019      	movs	r1, r3
 80186b8:	b003      	add	sp, #12
 80186ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186bc:	2700      	movs	r7, #0
 80186be:	42ae      	cmp	r6, r5
 80186c0:	d202      	bcs.n	80186c8 <__b2d+0x60>
 80186c2:	9d01      	ldr	r5, [sp, #4]
 80186c4:	3d08      	subs	r5, #8
 80186c6:	682f      	ldr	r7, [r5, #0]
 80186c8:	380b      	subs	r0, #11
 80186ca:	4684      	mov	ip, r0
 80186cc:	1e03      	subs	r3, r0, #0
 80186ce:	d012      	beq.n	80186f6 <__b2d+0x8e>
 80186d0:	409c      	lsls	r4, r3
 80186d2:	2020      	movs	r0, #32
 80186d4:	4321      	orrs	r1, r4
 80186d6:	003c      	movs	r4, r7
 80186d8:	1ac0      	subs	r0, r0, r3
 80186da:	40c4      	lsrs	r4, r0
 80186dc:	4321      	orrs	r1, r4
 80186de:	000b      	movs	r3, r1
 80186e0:	2100      	movs	r1, #0
 80186e2:	42b5      	cmp	r5, r6
 80186e4:	d901      	bls.n	80186ea <__b2d+0x82>
 80186e6:	3d04      	subs	r5, #4
 80186e8:	6829      	ldr	r1, [r5, #0]
 80186ea:	4664      	mov	r4, ip
 80186ec:	40c1      	lsrs	r1, r0
 80186ee:	40a7      	lsls	r7, r4
 80186f0:	430f      	orrs	r7, r1
 80186f2:	003a      	movs	r2, r7
 80186f4:	e7de      	b.n	80186b4 <__b2d+0x4c>
 80186f6:	4321      	orrs	r1, r4
 80186f8:	000b      	movs	r3, r1
 80186fa:	e7fa      	b.n	80186f2 <__b2d+0x8a>
 80186fc:	3ff00000 	.word	0x3ff00000

08018700 <__d2b>:
 8018700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018702:	001d      	movs	r5, r3
 8018704:	2101      	movs	r1, #1
 8018706:	0014      	movs	r4, r2
 8018708:	9f08      	ldr	r7, [sp, #32]
 801870a:	f7ff fce5 	bl	80180d8 <_Balloc>
 801870e:	032b      	lsls	r3, r5, #12
 8018710:	006d      	lsls	r5, r5, #1
 8018712:	0006      	movs	r6, r0
 8018714:	0b1b      	lsrs	r3, r3, #12
 8018716:	0d6d      	lsrs	r5, r5, #21
 8018718:	d124      	bne.n	8018764 <__d2b+0x64>
 801871a:	9301      	str	r3, [sp, #4]
 801871c:	2c00      	cmp	r4, #0
 801871e:	d027      	beq.n	8018770 <__d2b+0x70>
 8018720:	4668      	mov	r0, sp
 8018722:	9400      	str	r4, [sp, #0]
 8018724:	f7ff fda0 	bl	8018268 <__lo0bits>
 8018728:	9c00      	ldr	r4, [sp, #0]
 801872a:	2800      	cmp	r0, #0
 801872c:	d01e      	beq.n	801876c <__d2b+0x6c>
 801872e:	9b01      	ldr	r3, [sp, #4]
 8018730:	2120      	movs	r1, #32
 8018732:	001a      	movs	r2, r3
 8018734:	1a09      	subs	r1, r1, r0
 8018736:	408a      	lsls	r2, r1
 8018738:	40c3      	lsrs	r3, r0
 801873a:	4322      	orrs	r2, r4
 801873c:	6172      	str	r2, [r6, #20]
 801873e:	9301      	str	r3, [sp, #4]
 8018740:	9c01      	ldr	r4, [sp, #4]
 8018742:	61b4      	str	r4, [r6, #24]
 8018744:	1e63      	subs	r3, r4, #1
 8018746:	419c      	sbcs	r4, r3
 8018748:	3401      	adds	r4, #1
 801874a:	6134      	str	r4, [r6, #16]
 801874c:	2d00      	cmp	r5, #0
 801874e:	d018      	beq.n	8018782 <__d2b+0x82>
 8018750:	4b12      	ldr	r3, [pc, #72]	; (801879c <__d2b+0x9c>)
 8018752:	18ed      	adds	r5, r5, r3
 8018754:	2335      	movs	r3, #53	; 0x35
 8018756:	182d      	adds	r5, r5, r0
 8018758:	603d      	str	r5, [r7, #0]
 801875a:	1a18      	subs	r0, r3, r0
 801875c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801875e:	6018      	str	r0, [r3, #0]
 8018760:	0030      	movs	r0, r6
 8018762:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018764:	2280      	movs	r2, #128	; 0x80
 8018766:	0352      	lsls	r2, r2, #13
 8018768:	4313      	orrs	r3, r2
 801876a:	e7d6      	b.n	801871a <__d2b+0x1a>
 801876c:	6174      	str	r4, [r6, #20]
 801876e:	e7e7      	b.n	8018740 <__d2b+0x40>
 8018770:	a801      	add	r0, sp, #4
 8018772:	f7ff fd79 	bl	8018268 <__lo0bits>
 8018776:	2401      	movs	r4, #1
 8018778:	9b01      	ldr	r3, [sp, #4]
 801877a:	6134      	str	r4, [r6, #16]
 801877c:	6173      	str	r3, [r6, #20]
 801877e:	3020      	adds	r0, #32
 8018780:	e7e4      	b.n	801874c <__d2b+0x4c>
 8018782:	4b07      	ldr	r3, [pc, #28]	; (80187a0 <__d2b+0xa0>)
 8018784:	18c0      	adds	r0, r0, r3
 8018786:	4b07      	ldr	r3, [pc, #28]	; (80187a4 <__d2b+0xa4>)
 8018788:	6038      	str	r0, [r7, #0]
 801878a:	18e3      	adds	r3, r4, r3
 801878c:	009b      	lsls	r3, r3, #2
 801878e:	18f3      	adds	r3, r6, r3
 8018790:	6958      	ldr	r0, [r3, #20]
 8018792:	f7ff fd4f 	bl	8018234 <__hi0bits>
 8018796:	0164      	lsls	r4, r4, #5
 8018798:	1a20      	subs	r0, r4, r0
 801879a:	e7df      	b.n	801875c <__d2b+0x5c>
 801879c:	fffffbcd 	.word	0xfffffbcd
 80187a0:	fffffbce 	.word	0xfffffbce
 80187a4:	3fffffff 	.word	0x3fffffff

080187a8 <__ratio>:
 80187a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187aa:	b085      	sub	sp, #20
 80187ac:	000f      	movs	r7, r1
 80187ae:	a902      	add	r1, sp, #8
 80187b0:	0006      	movs	r6, r0
 80187b2:	f7ff ff59 	bl	8018668 <__b2d>
 80187b6:	0004      	movs	r4, r0
 80187b8:	000d      	movs	r5, r1
 80187ba:	0038      	movs	r0, r7
 80187bc:	a903      	add	r1, sp, #12
 80187be:	9400      	str	r4, [sp, #0]
 80187c0:	9501      	str	r5, [sp, #4]
 80187c2:	f7ff ff51 	bl	8018668 <__b2d>
 80187c6:	6936      	ldr	r6, [r6, #16]
 80187c8:	693f      	ldr	r7, [r7, #16]
 80187ca:	0002      	movs	r2, r0
 80187cc:	1bf7      	subs	r7, r6, r7
 80187ce:	017e      	lsls	r6, r7, #5
 80187d0:	46b4      	mov	ip, r6
 80187d2:	9f03      	ldr	r7, [sp, #12]
 80187d4:	9e02      	ldr	r6, [sp, #8]
 80187d6:	000b      	movs	r3, r1
 80187d8:	1bf6      	subs	r6, r6, r7
 80187da:	4466      	add	r6, ip
 80187dc:	0537      	lsls	r7, r6, #20
 80187de:	2e00      	cmp	r6, #0
 80187e0:	dd07      	ble.n	80187f2 <__ratio+0x4a>
 80187e2:	1979      	adds	r1, r7, r5
 80187e4:	9101      	str	r1, [sp, #4]
 80187e6:	9800      	ldr	r0, [sp, #0]
 80187e8:	9901      	ldr	r1, [sp, #4]
 80187ea:	f7e9 f833 	bl	8001854 <__aeabi_ddiv>
 80187ee:	b005      	add	sp, #20
 80187f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187f2:	1bcb      	subs	r3, r1, r7
 80187f4:	e7f7      	b.n	80187e6 <__ratio+0x3e>

080187f6 <__copybits>:
 80187f6:	0013      	movs	r3, r2
 80187f8:	3901      	subs	r1, #1
 80187fa:	b510      	push	{r4, lr}
 80187fc:	1149      	asrs	r1, r1, #5
 80187fe:	6912      	ldr	r2, [r2, #16]
 8018800:	3101      	adds	r1, #1
 8018802:	0089      	lsls	r1, r1, #2
 8018804:	3314      	adds	r3, #20
 8018806:	0092      	lsls	r2, r2, #2
 8018808:	1841      	adds	r1, r0, r1
 801880a:	189a      	adds	r2, r3, r2
 801880c:	429a      	cmp	r2, r3
 801880e:	d803      	bhi.n	8018818 <__copybits+0x22>
 8018810:	2300      	movs	r3, #0
 8018812:	4281      	cmp	r1, r0
 8018814:	d803      	bhi.n	801881e <__copybits+0x28>
 8018816:	bd10      	pop	{r4, pc}
 8018818:	cb10      	ldmia	r3!, {r4}
 801881a:	c010      	stmia	r0!, {r4}
 801881c:	e7f6      	b.n	801880c <__copybits+0x16>
 801881e:	c008      	stmia	r0!, {r3}
 8018820:	e7f7      	b.n	8018812 <__copybits+0x1c>

08018822 <__any_on>:
 8018822:	0002      	movs	r2, r0
 8018824:	6900      	ldr	r0, [r0, #16]
 8018826:	b510      	push	{r4, lr}
 8018828:	3214      	adds	r2, #20
 801882a:	114b      	asrs	r3, r1, #5
 801882c:	4298      	cmp	r0, r3
 801882e:	db12      	blt.n	8018856 <__any_on+0x34>
 8018830:	dd0b      	ble.n	801884a <__any_on+0x28>
 8018832:	201f      	movs	r0, #31
 8018834:	4001      	ands	r1, r0
 8018836:	d008      	beq.n	801884a <__any_on+0x28>
 8018838:	0098      	lsls	r0, r3, #2
 801883a:	5884      	ldr	r4, [r0, r2]
 801883c:	0020      	movs	r0, r4
 801883e:	40c8      	lsrs	r0, r1
 8018840:	4088      	lsls	r0, r1
 8018842:	0001      	movs	r1, r0
 8018844:	2001      	movs	r0, #1
 8018846:	428c      	cmp	r4, r1
 8018848:	d104      	bne.n	8018854 <__any_on+0x32>
 801884a:	009b      	lsls	r3, r3, #2
 801884c:	18d3      	adds	r3, r2, r3
 801884e:	4293      	cmp	r3, r2
 8018850:	d803      	bhi.n	801885a <__any_on+0x38>
 8018852:	2000      	movs	r0, #0
 8018854:	bd10      	pop	{r4, pc}
 8018856:	0003      	movs	r3, r0
 8018858:	e7f7      	b.n	801884a <__any_on+0x28>
 801885a:	3b04      	subs	r3, #4
 801885c:	6819      	ldr	r1, [r3, #0]
 801885e:	2900      	cmp	r1, #0
 8018860:	d0f5      	beq.n	801884e <__any_on+0x2c>
 8018862:	2001      	movs	r0, #1
 8018864:	e7f6      	b.n	8018854 <__any_on+0x32>
	...

08018868 <frexp>:
 8018868:	b570      	push	{r4, r5, r6, lr}
 801886a:	0014      	movs	r4, r2
 801886c:	2500      	movs	r5, #0
 801886e:	6025      	str	r5, [r4, #0]
 8018870:	4d10      	ldr	r5, [pc, #64]	; (80188b4 <frexp+0x4c>)
 8018872:	004b      	lsls	r3, r1, #1
 8018874:	000a      	movs	r2, r1
 8018876:	085b      	lsrs	r3, r3, #1
 8018878:	42ab      	cmp	r3, r5
 801887a:	dc1a      	bgt.n	80188b2 <frexp+0x4a>
 801887c:	001d      	movs	r5, r3
 801887e:	4305      	orrs	r5, r0
 8018880:	d017      	beq.n	80188b2 <frexp+0x4a>
 8018882:	4d0d      	ldr	r5, [pc, #52]	; (80188b8 <frexp+0x50>)
 8018884:	42ab      	cmp	r3, r5
 8018886:	dc09      	bgt.n	801889c <frexp+0x34>
 8018888:	2200      	movs	r2, #0
 801888a:	4b0c      	ldr	r3, [pc, #48]	; (80188bc <frexp+0x54>)
 801888c:	f7e9 fbec 	bl	8002068 <__aeabi_dmul>
 8018890:	2536      	movs	r5, #54	; 0x36
 8018892:	000a      	movs	r2, r1
 8018894:	004b      	lsls	r3, r1, #1
 8018896:	426d      	negs	r5, r5
 8018898:	085b      	lsrs	r3, r3, #1
 801889a:	6025      	str	r5, [r4, #0]
 801889c:	4d08      	ldr	r5, [pc, #32]	; (80188c0 <frexp+0x58>)
 801889e:	151b      	asrs	r3, r3, #20
 80188a0:	195b      	adds	r3, r3, r5
 80188a2:	6825      	ldr	r5, [r4, #0]
 80188a4:	18eb      	adds	r3, r5, r3
 80188a6:	6023      	str	r3, [r4, #0]
 80188a8:	4b06      	ldr	r3, [pc, #24]	; (80188c4 <frexp+0x5c>)
 80188aa:	401a      	ands	r2, r3
 80188ac:	4b06      	ldr	r3, [pc, #24]	; (80188c8 <frexp+0x60>)
 80188ae:	4313      	orrs	r3, r2
 80188b0:	0019      	movs	r1, r3
 80188b2:	bd70      	pop	{r4, r5, r6, pc}
 80188b4:	7fefffff 	.word	0x7fefffff
 80188b8:	000fffff 	.word	0x000fffff
 80188bc:	43500000 	.word	0x43500000
 80188c0:	fffffc02 	.word	0xfffffc02
 80188c4:	800fffff 	.word	0x800fffff
 80188c8:	3fe00000 	.word	0x3fe00000

080188cc <__ssprint_r>:
 80188cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188ce:	6893      	ldr	r3, [r2, #8]
 80188d0:	b087      	sub	sp, #28
 80188d2:	9002      	str	r0, [sp, #8]
 80188d4:	000c      	movs	r4, r1
 80188d6:	0016      	movs	r6, r2
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d063      	beq.n	80189a4 <__ssprint_r+0xd8>
 80188dc:	6813      	ldr	r3, [r2, #0]
 80188de:	9303      	str	r3, [sp, #12]
 80188e0:	2300      	movs	r3, #0
 80188e2:	001f      	movs	r7, r3
 80188e4:	9305      	str	r3, [sp, #20]
 80188e6:	2f00      	cmp	r7, #0
 80188e8:	d02e      	beq.n	8018948 <__ssprint_r+0x7c>
 80188ea:	68a5      	ldr	r5, [r4, #8]
 80188ec:	42af      	cmp	r7, r5
 80188ee:	d347      	bcc.n	8018980 <__ssprint_r+0xb4>
 80188f0:	2390      	movs	r3, #144	; 0x90
 80188f2:	89a2      	ldrh	r2, [r4, #12]
 80188f4:	00db      	lsls	r3, r3, #3
 80188f6:	421a      	tst	r2, r3
 80188f8:	d042      	beq.n	8018980 <__ssprint_r+0xb4>
 80188fa:	2003      	movs	r0, #3
 80188fc:	6921      	ldr	r1, [r4, #16]
 80188fe:	6823      	ldr	r3, [r4, #0]
 8018900:	1a5b      	subs	r3, r3, r1
 8018902:	9304      	str	r3, [sp, #16]
 8018904:	6963      	ldr	r3, [r4, #20]
 8018906:	4343      	muls	r3, r0
 8018908:	0fd8      	lsrs	r0, r3, #31
 801890a:	18c3      	adds	r3, r0, r3
 801890c:	105b      	asrs	r3, r3, #1
 801890e:	9301      	str	r3, [sp, #4]
 8018910:	9b04      	ldr	r3, [sp, #16]
 8018912:	9801      	ldr	r0, [sp, #4]
 8018914:	3301      	adds	r3, #1
 8018916:	19db      	adds	r3, r3, r7
 8018918:	4283      	cmp	r3, r0
 801891a:	d900      	bls.n	801891e <__ssprint_r+0x52>
 801891c:	9301      	str	r3, [sp, #4]
 801891e:	0553      	lsls	r3, r2, #21
 8018920:	d544      	bpl.n	80189ac <__ssprint_r+0xe0>
 8018922:	9901      	ldr	r1, [sp, #4]
 8018924:	9802      	ldr	r0, [sp, #8]
 8018926:	f7fb fa85 	bl	8013e34 <_malloc_r>
 801892a:	1e05      	subs	r5, r0, #0
 801892c:	d114      	bne.n	8018958 <__ssprint_r+0x8c>
 801892e:	230c      	movs	r3, #12
 8018930:	9a02      	ldr	r2, [sp, #8]
 8018932:	2001      	movs	r0, #1
 8018934:	6013      	str	r3, [r2, #0]
 8018936:	2340      	movs	r3, #64	; 0x40
 8018938:	89a2      	ldrh	r2, [r4, #12]
 801893a:	4240      	negs	r0, r0
 801893c:	4313      	orrs	r3, r2
 801893e:	81a3      	strh	r3, [r4, #12]
 8018940:	2300      	movs	r3, #0
 8018942:	60b3      	str	r3, [r6, #8]
 8018944:	6073      	str	r3, [r6, #4]
 8018946:	e02f      	b.n	80189a8 <__ssprint_r+0xdc>
 8018948:	9b03      	ldr	r3, [sp, #12]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	9305      	str	r3, [sp, #20]
 801894e:	9b03      	ldr	r3, [sp, #12]
 8018950:	685f      	ldr	r7, [r3, #4]
 8018952:	3308      	adds	r3, #8
 8018954:	9303      	str	r3, [sp, #12]
 8018956:	e7c6      	b.n	80188e6 <__ssprint_r+0x1a>
 8018958:	9a04      	ldr	r2, [sp, #16]
 801895a:	6921      	ldr	r1, [r4, #16]
 801895c:	f7fb fca3 	bl	80142a6 <memcpy>
 8018960:	89a3      	ldrh	r3, [r4, #12]
 8018962:	4a18      	ldr	r2, [pc, #96]	; (80189c4 <__ssprint_r+0xf8>)
 8018964:	401a      	ands	r2, r3
 8018966:	2380      	movs	r3, #128	; 0x80
 8018968:	4313      	orrs	r3, r2
 801896a:	81a3      	strh	r3, [r4, #12]
 801896c:	9b04      	ldr	r3, [sp, #16]
 801896e:	6125      	str	r5, [r4, #16]
 8018970:	18ed      	adds	r5, r5, r3
 8018972:	6025      	str	r5, [r4, #0]
 8018974:	003d      	movs	r5, r7
 8018976:	9b01      	ldr	r3, [sp, #4]
 8018978:	9a04      	ldr	r2, [sp, #16]
 801897a:	6163      	str	r3, [r4, #20]
 801897c:	1a9b      	subs	r3, r3, r2
 801897e:	60a3      	str	r3, [r4, #8]
 8018980:	42bd      	cmp	r5, r7
 8018982:	d900      	bls.n	8018986 <__ssprint_r+0xba>
 8018984:	003d      	movs	r5, r7
 8018986:	002a      	movs	r2, r5
 8018988:	9905      	ldr	r1, [sp, #20]
 801898a:	6820      	ldr	r0, [r4, #0]
 801898c:	f7ff fb91 	bl	80180b2 <memmove>
 8018990:	68a3      	ldr	r3, [r4, #8]
 8018992:	1b5b      	subs	r3, r3, r5
 8018994:	60a3      	str	r3, [r4, #8]
 8018996:	6823      	ldr	r3, [r4, #0]
 8018998:	195d      	adds	r5, r3, r5
 801899a:	68b3      	ldr	r3, [r6, #8]
 801899c:	6025      	str	r5, [r4, #0]
 801899e:	1bdb      	subs	r3, r3, r7
 80189a0:	60b3      	str	r3, [r6, #8]
 80189a2:	d1d1      	bne.n	8018948 <__ssprint_r+0x7c>
 80189a4:	2000      	movs	r0, #0
 80189a6:	6070      	str	r0, [r6, #4]
 80189a8:	b007      	add	sp, #28
 80189aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189ac:	9a01      	ldr	r2, [sp, #4]
 80189ae:	9802      	ldr	r0, [sp, #8]
 80189b0:	f7fb fcbe 	bl	8014330 <_realloc_r>
 80189b4:	1e05      	subs	r5, r0, #0
 80189b6:	d1d9      	bne.n	801896c <__ssprint_r+0xa0>
 80189b8:	6921      	ldr	r1, [r4, #16]
 80189ba:	9802      	ldr	r0, [sp, #8]
 80189bc:	f7fe ff78 	bl	80178b0 <_free_r>
 80189c0:	e7b5      	b.n	801892e <__ssprint_r+0x62>
 80189c2:	46c0      	nop			; (mov r8, r8)
 80189c4:	fffffb7f 	.word	0xfffffb7f

080189c8 <__register_exitproc>:
 80189c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80189ca:	4d29      	ldr	r5, [pc, #164]	; (8018a70 <__register_exitproc+0xa8>)
 80189cc:	0006      	movs	r6, r0
 80189ce:	6828      	ldr	r0, [r5, #0]
 80189d0:	9301      	str	r3, [sp, #4]
 80189d2:	9100      	str	r1, [sp, #0]
 80189d4:	0017      	movs	r7, r2
 80189d6:	f7ff fb5f 	bl	8018098 <__retarget_lock_acquire_recursive>
 80189da:	4b26      	ldr	r3, [pc, #152]	; (8018a74 <__register_exitproc+0xac>)
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	001c      	movs	r4, r3
 80189e0:	34fc      	adds	r4, #252	; 0xfc
 80189e2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80189e4:	2800      	cmp	r0, #0
 80189e6:	d103      	bne.n	80189f0 <__register_exitproc+0x28>
 80189e8:	334d      	adds	r3, #77	; 0x4d
 80189ea:	33ff      	adds	r3, #255	; 0xff
 80189ec:	0018      	movs	r0, r3
 80189ee:	64e3      	str	r3, [r4, #76]	; 0x4c
 80189f0:	6843      	ldr	r3, [r0, #4]
 80189f2:	2b1f      	cmp	r3, #31
 80189f4:	dd18      	ble.n	8018a28 <__register_exitproc+0x60>
 80189f6:	4b20      	ldr	r3, [pc, #128]	; (8018a78 <__register_exitproc+0xb0>)
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d105      	bne.n	8018a08 <__register_exitproc+0x40>
 80189fc:	6828      	ldr	r0, [r5, #0]
 80189fe:	f7ff fb4c 	bl	801809a <__retarget_lock_release_recursive>
 8018a02:	2001      	movs	r0, #1
 8018a04:	4240      	negs	r0, r0
 8018a06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018a08:	20c8      	movs	r0, #200	; 0xc8
 8018a0a:	0040      	lsls	r0, r0, #1
 8018a0c:	f7fb f9fe 	bl	8013e0c <malloc>
 8018a10:	2800      	cmp	r0, #0
 8018a12:	d0f3      	beq.n	80189fc <__register_exitproc+0x34>
 8018a14:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8018a16:	2300      	movs	r3, #0
 8018a18:	6002      	str	r2, [r0, #0]
 8018a1a:	22c4      	movs	r2, #196	; 0xc4
 8018a1c:	0052      	lsls	r2, r2, #1
 8018a1e:	6043      	str	r3, [r0, #4]
 8018a20:	64e0      	str	r0, [r4, #76]	; 0x4c
 8018a22:	5083      	str	r3, [r0, r2]
 8018a24:	3204      	adds	r2, #4
 8018a26:	5083      	str	r3, [r0, r2]
 8018a28:	6843      	ldr	r3, [r0, #4]
 8018a2a:	2e00      	cmp	r6, #0
 8018a2c:	d014      	beq.n	8018a58 <__register_exitproc+0x90>
 8018a2e:	009a      	lsls	r2, r3, #2
 8018a30:	1882      	adds	r2, r0, r2
 8018a32:	0011      	movs	r1, r2
 8018a34:	3188      	adds	r1, #136	; 0x88
 8018a36:	600f      	str	r7, [r1, #0]
 8018a38:	2101      	movs	r1, #1
 8018a3a:	0004      	movs	r4, r0
 8018a3c:	4099      	lsls	r1, r3
 8018a3e:	3485      	adds	r4, #133	; 0x85
 8018a40:	34ff      	adds	r4, #255	; 0xff
 8018a42:	6865      	ldr	r5, [r4, #4]
 8018a44:	32fc      	adds	r2, #252	; 0xfc
 8018a46:	430d      	orrs	r5, r1
 8018a48:	6065      	str	r5, [r4, #4]
 8018a4a:	9d01      	ldr	r5, [sp, #4]
 8018a4c:	60d5      	str	r5, [r2, #12]
 8018a4e:	2e02      	cmp	r6, #2
 8018a50:	d102      	bne.n	8018a58 <__register_exitproc+0x90>
 8018a52:	68a2      	ldr	r2, [r4, #8]
 8018a54:	4311      	orrs	r1, r2
 8018a56:	60a1      	str	r1, [r4, #8]
 8018a58:	1c5a      	adds	r2, r3, #1
 8018a5a:	6042      	str	r2, [r0, #4]
 8018a5c:	3302      	adds	r3, #2
 8018a5e:	9a00      	ldr	r2, [sp, #0]
 8018a60:	009b      	lsls	r3, r3, #2
 8018a62:	501a      	str	r2, [r3, r0]
 8018a64:	4b02      	ldr	r3, [pc, #8]	; (8018a70 <__register_exitproc+0xa8>)
 8018a66:	6818      	ldr	r0, [r3, #0]
 8018a68:	f7ff fb17 	bl	801809a <__retarget_lock_release_recursive>
 8018a6c:	2000      	movs	r0, #0
 8018a6e:	e7ca      	b.n	8018a06 <__register_exitproc+0x3e>
 8018a70:	20000a9c 	.word	0x20000a9c
 8018a74:	0801ba88 	.word	0x0801ba88
 8018a78:	08013e0d 	.word	0x08013e0d

08018a7c <_calloc_r>:
 8018a7c:	b510      	push	{r4, lr}
 8018a7e:	4351      	muls	r1, r2
 8018a80:	f7fb f9d8 	bl	8013e34 <_malloc_r>
 8018a84:	1e04      	subs	r4, r0, #0
 8018a86:	d01a      	beq.n	8018abe <_calloc_r+0x42>
 8018a88:	0003      	movs	r3, r0
 8018a8a:	3b08      	subs	r3, #8
 8018a8c:	685a      	ldr	r2, [r3, #4]
 8018a8e:	2303      	movs	r3, #3
 8018a90:	439a      	bics	r2, r3
 8018a92:	3a04      	subs	r2, #4
 8018a94:	2a24      	cmp	r2, #36	; 0x24
 8018a96:	d819      	bhi.n	8018acc <_calloc_r+0x50>
 8018a98:	0003      	movs	r3, r0
 8018a9a:	2a13      	cmp	r2, #19
 8018a9c:	d90b      	bls.n	8018ab6 <_calloc_r+0x3a>
 8018a9e:	2100      	movs	r1, #0
 8018aa0:	3308      	adds	r3, #8
 8018aa2:	6001      	str	r1, [r0, #0]
 8018aa4:	6041      	str	r1, [r0, #4]
 8018aa6:	2a1b      	cmp	r2, #27
 8018aa8:	d905      	bls.n	8018ab6 <_calloc_r+0x3a>
 8018aaa:	6081      	str	r1, [r0, #8]
 8018aac:	60c1      	str	r1, [r0, #12]
 8018aae:	2a24      	cmp	r2, #36	; 0x24
 8018ab0:	d007      	beq.n	8018ac2 <_calloc_r+0x46>
 8018ab2:	0003      	movs	r3, r0
 8018ab4:	3310      	adds	r3, #16
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	601a      	str	r2, [r3, #0]
 8018aba:	605a      	str	r2, [r3, #4]
 8018abc:	609a      	str	r2, [r3, #8]
 8018abe:	0020      	movs	r0, r4
 8018ac0:	bd10      	pop	{r4, pc}
 8018ac2:	0003      	movs	r3, r0
 8018ac4:	6101      	str	r1, [r0, #16]
 8018ac6:	3318      	adds	r3, #24
 8018ac8:	6141      	str	r1, [r0, #20]
 8018aca:	e7f4      	b.n	8018ab6 <_calloc_r+0x3a>
 8018acc:	2100      	movs	r1, #0
 8018ace:	f7fb fbf3 	bl	80142b8 <memset>
 8018ad2:	e7f4      	b.n	8018abe <_calloc_r+0x42>

08018ad4 <_sbrk>:
 8018ad4:	4b05      	ldr	r3, [pc, #20]	; (8018aec <_sbrk+0x18>)
 8018ad6:	0002      	movs	r2, r0
 8018ad8:	6819      	ldr	r1, [r3, #0]
 8018ada:	2900      	cmp	r1, #0
 8018adc:	d101      	bne.n	8018ae2 <_sbrk+0xe>
 8018ade:	4904      	ldr	r1, [pc, #16]	; (8018af0 <_sbrk+0x1c>)
 8018ae0:	6019      	str	r1, [r3, #0]
 8018ae2:	6818      	ldr	r0, [r3, #0]
 8018ae4:	1882      	adds	r2, r0, r2
 8018ae6:	601a      	str	r2, [r3, #0]
 8018ae8:	4770      	bx	lr
 8018aea:	46c0      	nop			; (mov r8, r8)
 8018aec:	20006954 	.word	0x20006954
 8018af0:	20006e98 	.word	0x20006e98

08018af4 <_init>:
 8018af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018af6:	46c0      	nop			; (mov r8, r8)
 8018af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018afa:	bc08      	pop	{r3}
 8018afc:	469e      	mov	lr, r3
 8018afe:	4770      	bx	lr

08018b00 <_fini>:
 8018b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b02:	46c0      	nop			; (mov r8, r8)
 8018b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b06:	bc08      	pop	{r3}
 8018b08:	469e      	mov	lr, r3
 8018b0a:	4770      	bx	lr
